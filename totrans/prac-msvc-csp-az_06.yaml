- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Microsoft Azure for Hosting Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Microsoft Azure 用于托管应用程序
- en: After creating Docker images with the previous chapters, and running the complete
    application using Docker containers locally, let’s move over to run the solution
    with Microsoft Azure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用前几章创建 Docker 镜像并本地使用 Docker 容器运行完整应用程序之后，让我们转向使用 Microsoft Azure 运行解决方案。
- en: In this chapter, you’ll learn how to push Docker images to an Azure container
    registry, run Docker containers with Azure Container Apps, access a database using
    Azure Cosmos DB, and configure environment variables and secrets with Azure Container
    Apps.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何将 Docker 镜像推送到 Azure 容器注册表，使用 Azure 容器应用运行 Docker 容器，使用 Azure Cosmos
    DB 访问数据库，以及使用 Azure 容器应用配置环境变量和密钥。
- en: Using Bicep scripts, you learn how to create multiple Azure resources at once.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Bicep 脚本，您将学习如何一次性创建多个 Azure 资源。
- en: 'In this chapter, you’ll learn about the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解以下主题：
- en: Experiencing Microsoft Azure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 体验 Microsoft Azure
- en: Creating Azure resources
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Azure 资源
- en: Creating an Azure Cosmos database
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Azure Cosmos 数据库
- en: Pushing images to the **Azure Container Registry** (**ACR**) instance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推送镜像到 **Azure 容器注册表**（**ACR**）实例
- en: Creating Azure container apps
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 Azure 容器应用
- en: Creating Azure resources using .NET Aspire and the **Azure Developer** **CLI**
    (**azd**)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 .NET Aspire 和 **Azure 开发者 CLI**（**azd**）创建 Azure 资源
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: For this chapter, you need to have Docker Desktop installed. You also need a
    Microsoft Azure subscription. You can activate Microsoft Azure for free at [https://azure.microsoft.com/free](https://azure.microsoft.com/free),
    which gives you an amount of about USD 200, Azure credits that are available for
    the first 30 days, and several services that can be used for free for the time
    after.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，您需要安装 Docker Desktop。您还需要一个 Microsoft Azure 订阅。您可以在 [https://azure.microsoft.com/free](https://azure.microsoft.com/free)
    上免费激活 Microsoft Azure，这将为您提供约 200 美元的 Azure 信用额度，这些信用额度在前 30 天内可用，以及一些在此之后可以免费使用的服务。
- en: 'What many developers miss: if you have a Visual Studio Professional or Enterprise
    subscription, you also have a free amount of Azure resources every month. You
    just need to activate this with your Visual Studio subscription: [https://visualstudio.microsoft.com/subscriptions/](https://visualstudio.microsoft.com/subscriptions/).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多开发者可能会错过：如果您拥有 Visual Studio Professional 或 Enterprise 订阅，您每月也有免费额度的 Azure
    资源。您只需使用您的 Visual Studio 订阅激活此服务：[https://visualstudio.microsoft.com/subscriptions/](https://visualstudio.microsoft.com/subscriptions/)。
- en: To work through the samples of this chapter, besides Docker Desktop, the Azure
    CLI and `azd` are needed.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本章的示例，除了 Docker Desktop，还需要 Azure CLI 和 `azd`。
- en: 'To create and manage resources, install the Azure CLI and `azd`:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建和管理资源，请安装 Azure CLI 和 `azd`：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: These tools are available on Mac and Linux as well. To install the Azure CLI
    on different platforms, see [https://learn.microsoft.com/cli/azure/install-azure-cli](https://learn.microsoft.com/cli/azure/install-azure-cli),
    and for `azd`, see [https://learn.microsoft.com/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/azure/developer/azure-developer-cli/install-azd).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具也适用于 Mac 和 Linux。要在不同平台上安装 Azure CLI，请参阅 [https://learn.microsoft.com/cli/azure/install-azure-cli](https://learn.microsoft.com/cli/azure/install-azure-cli)，而对于
    `azd`，请参阅 [https://learn.microsoft.com/azure/developer/azure-developer-cli/install-azd](https://learn.microsoft.com/azure/developer/azure-developer-cli/install-azd)。
- en: An easy way to use the Azure Cloud Shell is from a web browser. As you log in
    to the Azure portal at [https://portal.azure.com](https://portal.azure.com) using
    your Microsoft Azure account, on the top button bar, you’ll see an icon for *Cloud
    Shell*. Clicking on this button, a terminal opens. Here, the Azure CLI is already
    installed – along with many other tools such as `wget` to download files, `git`
    to work with repositories, `docker`, the .NET CLI, and more. You can also use
    a Visual Studio Code editor (just run `code` from the terminal) to edit files.
    All the files you create and change are persisted within an Azure Storage account
    that is automatically created when you start the Cloud Shell. For a fullscreen
    Cloud Shell, you can open [https://shell.azure.com](https://shell.azure.com).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Azure Cloud Shell的一个简单方法是通过网页浏览器。当您使用Microsoft Azure账户登录到[https://portal.azure.com](https://portal.azure.com)的Azure门户时，在顶部的按钮栏上，您会看到一个代表*Cloud
    Shell*的图标。点击此按钮，会打开一个终端。在这里，Azure CLI已经安装好了——以及许多其他工具，如`wget`用于下载文件，`git`用于处理仓库，`docker`，.NET
    CLI等。您还可以使用Visual Studio Code编辑器（只需在终端中运行`code`）来编辑文件。您创建和更改的所有文件都保存在一个Azure存储账户中，该账户在您启动Cloud
    Shell时自动创建。对于全屏的Cloud Shell，您可以通过[https://shell.azure.com](https://shell.azure.com)打开。
- en: 'The code for this chapter can be found in the following GitHub repository:
    [https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure](https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure](https://github.com/PacktPublishing/Pragmatic-Microservices-with-CSharp-and-Azure)。
- en: 'In the `ch06` folder, these are the important projects:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ch06`文件夹中，这些是重要的项目：
- en: '`Codebreaker.GameAPIs` – The `gamesAPI` project we used in the previous chapter.
    There’s one change: instead of including the projects with the database access
    code and the models, NuGet packages are referenced.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Codebreaker.GameAPIs` – 我们在上一章中使用的`gamesAPI`项目。有一个更改：不再包含带有数据库访问代码和模型的项目的引用，而是使用了NuGet包。'
- en: '`Codebreaker.Bot` – The bot service calling the game APIs.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Codebreaker.Bot` – 调用游戏API的机器人服务。'
- en: '`Codebreaker.AppHost` – This project contains important changes in this chapter
    to define the app model with Azure resources.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Codebreaker.AppHost` – 本章中此项目包含了一些重要更改，用于使用Azure资源定义应用程序模型。'
- en: '`Codebreaker.ServiceDefaults` – This project is unchanged in this chapter.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Codebreaker.ServiceDefaults` – 本章中此项目未做任何更改。'
- en: You can start with the results from the previous chapter to work on your own
    through this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从上一章的结果开始，通过本章继续进行自己的工作。
- en: Experiencing Microsoft Azure
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 体验微软Azure
- en: Microsoft Azure offers cloud services from many different categories. You can
    create **virtual machines** (**VMs**), which belong to the **Infrastructure as
    a Service** (**IaaS**) category, where you are in control of the machines but
    also need to manage them as you do in on-premises environments, up to ready-to-use
    software such as Office 365 from the **Software as a Service** (**SaaS**) category.
    Something in between is **Platform as a Service** (**PaaS**), where you don’t
    have full control over the VMs but instead get many functionalities out of the
    box.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 微软Azure提供来自许多不同类别的云服务。您可以创建属于**基础设施即服务**（**IaaS**）类别的**虚拟机**（**VMs**），在这里您控制着机器，但同时也需要像在本地环境中一样管理它们，直到可以使用来自**软件即服务**（**SaaS**）类别的如Office
    365等现成的软件。介于两者之间的是**平台即服务**（**PaaS**），在这里您对虚拟机没有完全控制权，但可以轻松获得许多开箱即用的功能。
- en: The focus here is on PaaS services. With the PaaS category, there’s also a category
    named **serverless**. This category allows for easy scaling, starting from zero,
    where no or low costs are associated, up to a maximum amount of automatic scaling
    based on the needs. Many Azure services have offerings in this category.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的重点是PaaS服务。在PaaS类别中，还有一个名为**无服务器**的类别。这个类别允许从零开始轻松扩展，从没有或低成本的关联，到基于需求的自动扩展的最大量。许多Azure服务在这个类别中都有提供。
- en: Cost
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成本
- en: When creating resources in a cloud environment, there’s always a question about
    the cost. Many are afraid of the need to pay unexpected amounts, but this fear
    is not necessary. Some subscriptions (such as a Visual Studio subscription) are
    limited to the amount available every month. If this amount is reached, resources
    are automatically stopped (unless you explicitly allow the cost to go above the
    limits), so no additional cost applies.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在云环境中创建资源时，总会有关于成本的问题。许多人害怕需要支付意外金额，但这种恐惧是不必要的。一些订阅（如 Visual Studio 订阅）每月都有可用金额的限制。如果达到这个金额，资源将自动停止（除非您明确允许成本超过限制），因此不会产生额外费用。
- en: 'With subscriptions and also just with resource groups, you can specify a budget
    to specify the amount that’s planned to be spent. To do this, open the Azure portal
    and select a resource group. Within a resource group, you’ll see the **Cost Management**
    category with the **Budgets** option. By creating a budget (see *Figure 6**.1*),
    you can define limits month by month. Before this limit is reached, you specify
    alerts where you can be informed. With an alert, you can specify to receive a
    notification via email, SMS, push, or voice notification, and in addition to that,
    you can define an action that should be invoked to call an Azure function, a logic
    app, an Automation runbook, or other Azure resources where custom functionality
    can be implemented. Based on usage and requirements, stopping services could be
    an option:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用订阅以及仅使用资源组，您可以指定预算以指定计划支出的金额。为此，请打开 Azure 门户并选择一个资源组。在资源组内，您将看到**成本管理**类别中的**预算**选项。通过创建预算（见*图
    6.1*），您可以按月定义限制。在达到此限制之前，您可以指定警报，以便您能够收到通知。通过警报，您可以指定通过电子邮件、短信、推送或语音通知接收通知，并且除此之外，您还可以定义一个应调用的操作，以调用
    Azure 函数、逻辑应用、自动化运行手册或其他 Azure 资源，在这些资源中可以实现自定义功能。根据使用情况和需求，停止服务可能是一个选项：
- en: '![Figure 6.1 – Specifying budgets](img/B21217_06_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.1 – 指定预算](img/B21217_06_01.jpg)'
- en: Figure 6.1 – Specifying budgets
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 指定预算
- en: To get price information about services, at [https://azure.microsoft.com](https://azure.microsoft.com),
    you can select **Azure pricing**, search for products, or select a product from
    a category to get details of different offerings available. You will also see
    a pricing calculator where you select multiple products and get complete price
    information based on selections made.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取有关服务的价格信息，请访问 [https://azure.microsoft.com](https://azure.microsoft.com)，您可以选择**Azure
    价格**，搜索产品，或从类别中选择产品以获取不同提供物的详细信息。您还将看到定价计算器，您可以在其中选择多个产品，并根据所做的选择获取完整的价格信息。
- en: Naming conventions and more
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名约定以及更多
- en: 'When creating resources within Azure, we should think about some important
    foundations to easily find resources based on the needs of IT but also based on
    the needs of business organizations. Which resources are for production, and which
    are for testing environments? Which resources are used by different organizations
    in the company? Which resources are used by one product? What are the resources
    potentially being impacted by a technical issue? For all these scenarios, these
    features help:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 中创建资源时，我们应该考虑一些重要的基础，以便根据 IT 和业务组织的需求轻松找到资源。哪些资源用于生产，哪些用于测试环境？公司中不同的组织使用哪些资源？哪些资源由一个产品使用？哪些资源可能受到技术问题的影响？对于所有这些场景，这些功能都有帮助：
- en: Every resource needs to be put into one `codebreaker` solution, resource groups
    will be created for the test and production environments.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个资源都需要放入一个`codebreaker`解决方案中，将为测试和生产环境创建资源组。
- en: It should also be easy to find multiple resources across resource groups. **Resource
    tags** can be used here.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还应该能够在资源组中轻松找到多个资源。**资源标签**可以在这里使用。
- en: Define a convention for how you name your resources. The number of resources
    will grow over time! You might create multiple instances for scaling, run the
    same services around the globe in different regions for better latency, run services
    in different environments… there are many reasons the number of resources grows.
    To deal with this, a good naming strategy used from the start can help a lot!
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个命名资源的约定。资源的数量会随着时间的推移而增长！您可能需要创建多个实例进行扩展，在不同地区运行相同的服务以获得更好的延迟，在不同环境中运行服务……有许多原因导致资源数量增加。为了应对这种情况，从一开始就使用一个好的命名策略可以大有帮助！
- en: With the `codebreaker` application, we can use `rg-codebreaker-dev`, `rg-codebreaker-test`,
    and `rg-codebreaker-prod` resource groups for *development*, *test*, and *production*
    environments.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `codebreaker` 应用程序，我们可以为开发、测试和生产环境使用 `rg-codebreaker-dev`、`rg-codebreaker-test`
    和 `rg-codebreaker-prod` 资源组。
- en: Note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Besides separating the environments with different resource groups, it’s a good
    practice to separate the development and production environments into different
    subscriptions. As there’s an Azure subscription with some free amount available
    with a Visual Studio subscription, this subscription can be used with the development
    environment.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用不同的资源组来分隔环境外，将开发和生产环境分开到不同的订阅中也是一个好的做法。因为有一个 Azure 订阅，在 Visual Studio 订阅中提供了一些免费额度，这个订阅可以与开发环境一起使用。
- en: Some resources are used across different resource groups. For example, you might
    use a central Azure DNS resource. You might also share resources across different
    applications. You can share an Azure app service that hosts many small websites.
    With every Azure resource, you can add custom tags and search for resources using
    different tags and their values. For example, you can specify a tag named `cc`
    (for cost center), and the value specifies the cost center.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一些资源被跨多个资源组使用。例如，你可能使用一个中央 Azure DNS 资源。你也可能在不同应用程序之间共享资源。你可以共享一个托管许多小型网站的 Azure
    应用服务。对于每个 Azure 资源，你都可以添加自定义标签，并使用不同的标签及其值来搜索资源。例如，你可以指定一个名为 `cc`（代表成本中心）的标签，其值指定了成本中心。
- en: 'To define a naming convention for resources, Microsoft not only has a guideline
    (available at [https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming](https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming)),
    but also an Excel template you can use (available at https://raw.githubusercontent.com/microsoft/CloudAdoptionFramework/master/ready/naming-and-tagging-conventions-tracking-template.xlsx),
    and even a Blazor application that you can host on-premises (or in the cloud)
    for your administrators to manage naming conventions with a simple user interface:
    https://github.com/mspnp/AzureNamingTool.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义资源的命名规范，Microsoft 不仅有一份指南（可在 [https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming](https://learn.microsoft.com/azure/cloud-adoption-framework/ready/azure-best-practices/resource-naming)
    查找），还提供了一个可用的 Excel 模板（可在 https://raw.githubusercontent.com/microsoft/CloudAdoptionFramework/master/ready/naming-and-tagging-conventions-tracking-template.xlsx
    查找），甚至还有一个可以托管在本地（或云端）的 Blazor 应用程序，供管理员使用简单的用户界面来管理命名规范：https://github.com/mspnp/AzureNamingTool。
- en: 'Components that can be part of the name of resources include the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 可以作为资源名称一部分的组件包括以下内容：
- en: The *resource type*. Microsoft has a list of proposed abbreviations; for example,
    `rg` for resource group, `cosmos` for an Azure Cosmos DB database, `cr` for ACR,
    `ca` for container apps, and `cae` for Container Apps environments.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源类型。Microsoft 提供了一组建议的缩写；例如，`rg` 代表资源组，`cosmos` 代表 Azure Cosmos DB 数据库，`cr`
    代表 ACR，`ca` 代表容器应用，以及 `cae` 代表容器应用环境。
- en: The project, application, or service name. We’ll use `codebreaker` for the application
    name.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目、应用程序或服务名称。我们将使用 `codebreaker` 作为应用程序名称。
- en: The environment where the resource is used; for example, `prod` for production,
    `dev` for development, and `test` for testing.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源使用的环境；例如，`prod` 代表生产，`dev` 代表开发，`test` 代表测试。
- en: The location of the Azure resource; for example, `eastus2` for the second East
    US region, and `westeu` for West Europe. Creating resources in multiple regions
    can be useful for failover scenarios, for better performance for customers around
    the globe, and because of data regulations.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 资源的位置；例如，`eastus2` 代表第二个东 US 区域，而 `westeu` 代表西欧。在多个区域创建资源对于故障转移场景、为全球客户提供更好的性能以及遵守数据法规都很有用。
- en: Now, we are ready to create Azure resources.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已准备好创建 Azure 资源。
- en: Creating Azure resources
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Azure 资源
- en: Using Microsoft Azure, there are different ways to create and manage Azure resources.
    Azure resources are accessible via a REST API. You can send `GET` requests to
    read information about resources and `POST` requests to create new resources,
    but of course, there’s an easier way to do it. The Azure portal ([https://portal.azure.com](https://portal.azure.com))
    is a great way to learn and see the different options you have. To automatically
    create Azure resources, you can use the Azure CLI, PowerShell scripts, and many
    more options to use. In this book, we’ll use the Azure portal, Bicep scripts,
    .NET Aspire, and `azd`. Bicep scripts give you a simple syntax from Microsoft
    to easily recreate Azure resources. .NET Aspire offers to define Azure resources
    using .NET code and directly create the resources.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Microsoft Azure，有不同方式来创建和管理Azure资源。Azure资源可以通过REST API访问。您可以发送`GET`请求来读取有关资源的信息，发送`POST`请求来创建新资源，但当然，还有更简单的方法来做这件事。Azure门户([https://portal.azure.com](https://portal.azure.com))是学习并查看您拥有的不同选项的好方法。要自动创建Azure资源，您可以使用Azure
    CLI、PowerShell脚本以及许多其他选项。在本书中，我们将使用Azure门户、Bicep脚本、.NET Aspire和`azd`。Bicep脚本提供了来自Microsoft的简单语法，可以轻松地重新创建Azure资源。.NET
    Aspire允许使用.NET代码定义Azure资源并直接创建资源。
- en: Within company environments, there are different ways Azure resources are created
    and how teams are organized. .NET Aspire, together with `azd`, offers great functionality
    for creating Azure resources, but this might not (yet?) fit into your environment.
    You can also decide to use parts of .NET Aspire that fit into your company environment,
    or use all that .NET Aspire and `azd` offer. The second option is the easiest
    one. To better understand the options, and for you to map it into your environment,
    we’ll start using the Azure CLI and the Azure portal. With this, you can easily
    see what options a resource offers for configuration. Later in this chapter, we’ll
    use .NET Aspire and `azd`. Specifying Azure resources with .NET code just needs
    a few statements to create all the resources needed with the solution.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在公司环境中，有不同方式创建Azure资源以及团队的组织方式。.NET Aspire与`azd`一起提供了创建Azure资源的强大功能，但这可能（目前可能）不适合您的环境。您也可以选择使用适合您公司环境的.NET
    Aspire的部分，或者使用.NET Aspire和`azd`提供的一切。第二个选项是最简单的。为了更好地理解选项，并让您将其映射到您的环境中，我们将开始使用Azure
    CLI和Azure门户。这样，您可以轻松地看到资源提供的配置选项。在本章的后面部分，我们将使用.NET Aspire和`azd`。使用.NET代码指定Azure资源只需要几条语句就可以创建解决方案所需的所有资源。
- en: 'What are the resources we create? In this section, we’ll do the following:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了哪些资源？在本节中，我们将执行以下操作：
- en: Create a resource group that groups all Azure resources together.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个资源组，将所有Azure资源组合在一起。
- en: Create an Azure Cosmos DB database that is added to the previously created resource
    group and used by the EF Core context we created in [*Chapter 3*](B21217_03.xhtml#_idTextAnchor063).
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Azure Cosmos DB数据库，该数据库被添加到之前创建的资源组中，并用于我们在[*第3章*](B21217_03.xhtml#_idTextAnchor063)中创建的EF
    Core上下文。
- en: Create an Azure container registry to publish the Docker images we created in
    [*Chapter 5*](B21217_05.xhtml#_idTextAnchor110).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Azure容器注册库来发布我们在[*第5章*](B21217_05.xhtml#_idTextAnchor110)中创建的Docker镜像。
- en: Create two Azure container apps to run the `gamesAPI` service and the bot service.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个Azure容器应用来运行`gamesAPI`服务和机器人服务。
- en: Creating a resource group
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建资源组
- en: Resource groups are used to manage Azure resources together. With a resource
    group, you can specify permissions for who is allowed to create or manage resources
    within the resource group. From a price standpoint, you easily can see the cost
    of the complete resource group and which resources of this resource group were
    responsible for which cost. You can also delete a resource group, which deletes
    all resources within the group.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 资源组用于一起管理Azure资源。使用资源组，您可以指定允许谁在资源组内创建或管理资源的权限。从价格的角度来看，您可以轻松地看到整个资源组的成本以及该资源组中的哪些资源导致了哪些成本。您还可以删除资源组，这将删除组内的所有资源。
- en: To create a resource group, let’s use the Azure CLI.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建资源组，让我们使用Azure CLI。
- en: 'To log in to Azure, use the following command:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要登录Azure，请使用以下命令：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This command opens the default browser to authenticate the user.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打开默认浏览器以验证用户身份。
- en: If you have multiple Azure subscriptions, you can check these with `az account
    list`. The current active subscription where you create resources is shown with
    `az` `account show`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有多个Azure订阅，您可以使用`az account list`来检查这些订阅。当前创建资源的活动订阅通过`az` `account show`显示。
- en: 'To create a resource group, use the `az` `group` command:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建资源组，请使用 `az` `group` 命令：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `create` subcommand creates a resource group. With `-l`, we specify the
    location of this Azure resource. Here, I’m using `westeurope` because this region
    is near my location. With the `-n` value, the name of the resource group is set.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`create` 子命令创建资源组。使用 `-l`，我们指定此 Azure 资源的位置。在这里，我使用 `westeurope` 因为这个区域靠近我的位置。使用
    `-n` 值，设置资源组的名称。'
- en: The location of the resource group is independent of the location of the resources
    within the resource group. Resources within the resource group can have other
    regions. A resource group is just metadata. The location for the resource group
    specifies the primary location for the resource group. In a fatal case where the
    location is not available, you cannot make changes to the resource group.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 资源组的地理位置与资源组内资源的地理位置无关。资源组内的资源可以位于其他区域。资源组只是元数据。资源组的地理位置指定了资源组的主要位置。在位置不可用的情况下，你无法更改资源组。
- en: To get the regions available with your subscription, you can use `az account
    list-locations -``o table`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取你的订阅可用的区域，你可以使用 `az account list-locations -o table`。
- en: After the resource group is created, we can create resources within this resource
    group.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 资源组创建后，我们可以在该资源组内创建资源。
- en: Creating an Azure Cosmos DB account
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Azure Cosmos DB 账户
- en: In [*Chapter 3*](B21217_03.xhtml#_idTextAnchor063), we used the Azure Cosmos
    DB emulator to store games and moves. Now, let’s change this to the real database
    in the Azure cloud. First, we’ll use the Azure portal to create an Azure Cosmos
    DB account.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 3 章*](B21217_03.xhtml#_idTextAnchor063) 中，我们使用了 Azure Cosmos DB 模拟器来存储游戏和移动。现在，让我们将其更改为
    Azure 云中的真实数据库。首先，我们将使用 Azure 门户来创建 Azure Cosmos DB 账户。
- en: Within the Azure portal, by clicking on `Azure Cosmos DB`. When you click **Create**
    with the Azure Cosmos DB resource, this does not immediately create the resource.
    Instead, you need to do some configuration beforehand.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，通过点击 `Azure Cosmos DB`。当你点击 Azure Cosmos DB 资源上的 **创建** 时，这并不会立即创建资源。相反，你需要在之前进行一些配置。
- en: 'With the Azure Cosmos DB resource, you first need to select one of the APIs
    available. Read back to [*Chapter 3*](B21217_03.xhtml#_idTextAnchor063) for the
    different APIs available and what they offer. Now, select **Azure Cosmos DB for
    NoSQL**, and click the **Create** button. This opens the configuration, as shown
    in *Figure 6**.2*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure Cosmos DB 资源时，你首先需要选择可用的 API 之一。请参阅 [*第 3 章*](B21217_03.xhtml#_idTextAnchor063)
    了解可用的不同 API 以及它们提供的功能。现在，选择 **Azure Cosmos DB for NoSQL**，然后点击 **创建** 按钮。这将打开配置，如图
    *图 6.2* 所示：
- en: '![Figure 6.2 – Creating an Azure Cosmos DB account](img/B21217_06_02.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – 创建 Azure Cosmos DB 账户](img/B21217_06_02.jpg)'
- en: Figure 6.2 – Creating an Azure Cosmos DB account
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 创建 Azure Cosmos DB 账户
- en: You have some pages for configuration before you can click the `cosmos-codebreaker-test`
    for the test environment, but be aware this name needs to be globally unique),
    and the capacity. Azure Cosmos DB offers one free tier with a subscription. In
    case you haven’t used this yet with your subscription, you can choose this option.
    This gives you 1,000 **request units per second** (**RU/s**) and 25 GB of storage
    for free. Using provisioned throughput, you define a RU/s limit by database or
    by database container, at least 400 RU/s. The serverless option starts with a
    higher minimum limit but automatically scales to the RU/s needed. With serverless,
    you need to be aware of some limits. With serverless, the maximum database container
    size is 1 TB; there’s no limit with the provisioned configuration. Serverless
    also doesn’t support geo-distribution, which is available with the provisioned
    setting.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在你可以点击 `cosmos-codebreaker-test` 进行测试环境之前，你有一些配置页面，但请注意此名称需要是全球唯一的），以及容量。Azure
    Cosmos DB 为订阅提供了一级免费层。如果你还没有使用过你的订阅，你可以选择此选项。这为你提供了每秒 1,000 个 **请求单位**（**RU/s**）和
    25 GB 的存储空间。使用预配吞吐量，你可以通过数据库或数据库容器定义 RU/s 的限制，至少 400 RU/s。无服务器选项从更高的最小限制开始，但会自动扩展到所需的
    RU/s。使用无服务器时，你需要注意一些限制。使用无服务器时，最大数据库容器大小为 1 TB；预配配置没有限制。无服务器也不支持地理分布，这在预配设置中是可用的。
- en: Note
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Creating an Azure Cosmos DB account registers a DNS name, thus the name needs
    to be globally unique. For your account, you can add a number following the account
    name, and check by clicking **Review + create** if your selected name is available.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Azure Cosmos DB 账户会注册一个 DNS 名称，因此该名称需要是全球唯一的。对于您的账户，您可以在账户名称后添加一个数字，并通过点击
    **审查 + 创建** 来检查您选择的名字是否可用。
- en: With the next configurations, you can configure the global distribution of a
    database, networking, a policy to automatically create backups, encryption with
    a service-managed key or a customer-managed key, and tags (which are available
    with every resource). You can use the default values with all the settings other
    than the basic configuration. Upon clicking on the **Review + create** button,
    final checks are made, and you can click the final **Create** button. Now, you
    just need to wait for a few minutes until the database account is created.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个配置中，您可以配置数据库的全局分布、网络、自动创建备份的策略、使用服务管理密钥或客户管理密钥的加密，以及标签（每个资源都可用）。您可以使用除基本配置之外的所有设置的默认值。点击
    **审查 + 创建** 按钮，进行最终检查，然后点击最终的 **创建** 按钮。现在，您只需等待几分钟，直到数据库账户创建完成。
- en: Using the Azure CLI, you can use the `az cosmosdb` `create` command.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure CLI，您可以使用 `az cosmosdb create` 命令。
- en: The database account is created! Next, we’ll create an Azure container registry.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库账户已创建！接下来，我们将创建 Azure 容器注册库。
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In [*Chapter 3*](B21217_03.xhtml#_idTextAnchor063), we not only created a library
    to write to Azure Cosmos DB but also to SQL Server. With Microsoft Azure, you
    can also configure Azure SQL Database. Just be aware of the low cost in the development
    environment; select a **Database Transaction Unit** (**DTU**) tier instead of
    the vCore tier. With 5 Basic DTUs, there’s just a cost lower than USD 5, for a
    month for 2 GB storage (at the time of this writing) compared to USD 400,- where
    a VM with 2 vCores is allocated.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 3 章*](B21217_03.xhtml#_idTextAnchor063) 中，我们不仅创建了一个用于写入 Azure Cosmos DB
    的库，还用于 SQL Server。使用 Microsoft Azure，您还可以配置 Azure SQL 数据库。只需注意开发环境中的低成本；选择 **数据库事务单元**（**DTU**）层而不是
    vCore 层。有 5 个基本 DTU，每月只需低于 5 美元（在撰写本文时），对于 2 GB 存储空间（与分配有 2 个 vCore 的虚拟机相比，400
    美元）。
- en: Creating an Azure container registry
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Azure 容器注册库
- en: In the previous chapter, we created Docker images and used them locally. You
    can publish Docker images to the Docker hub, or any container registry. ACR offers
    a registry for Docker images that greatly integrates with Microsoft Azure.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了 Docker 镜像并在本地使用它们。您可以将 Docker 镜像发布到 Docker Hub 或任何容器注册库。ACR 为 Docker
    镜像提供了一个注册库，它与 Microsoft Azure 集成得很好。
- en: 'While creating an ACR instance, three different tiers are available:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 ACR 实例时，有三个不同的层可供选择：
- en: '`codebreaker` application, the Basic tier (SKU) fits the purpose and is a lot
    cheaper than the other options. You just need to be aware of the limits.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codebreaker` 应用程序，基本层（SKU）适合此用途，并且比其他选项便宜得多。您只需注意限制即可。'
- en: '**Standard**: The Standard tier offers more storage (the Basic tier is limited
    to 10 GB storage) and image throughput.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准版**：标准层提供更多存储空间（基本层限制为 10 GB 存储）和镜像吞吐量。'
- en: '**Premium**: The Premium tier adds some features, such as geo-replication replicates
    images across different regions and private access points.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高级版**：高级版添加了一些功能，例如地理复制可以在不同地区复制镜像和私有访问点。'
- en: '*Figure 6**.3* shows how to create an ACR instance via the portal. Clicking
    on `Container Registry` in the search box. Selecting the **Azure services only**
    checkbox doesn’t show the many third-party offerings:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6**.3* 展示了如何通过门户创建 ACR 实例。在搜索框中点击 `容器注册库`。选择 **仅 Azure 服务**复选框不会显示许多第三方产品：'
- en: '![Figure 6.3 – Creating a container registry](img/B21217_06_03.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – 创建容器注册库](img/B21217_06_03.jpg)'
- en: Figure 6.3 – Creating a container registry
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – 创建容器注册库
- en: With the configuration, we just need the name of the resource group, the name
    of the registry, the location, and the SKU. Availability zones, where the images
    are stored in different data centers in the same region, are only available with
    the Premium tier. Other configurations to change the networking and encryption
    require the Premium tier as well.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置中，我们只需要资源组的名称、注册库的名称、位置和 SKU。可用区域，其中图像存储在同一地区的不同数据中心，仅在 Premium 层中可用。其他更改网络和加密的配置也需要
    Premium 层。
- en: Filling out this form, after clicking **Review + create**, you still can verify
    all the options before clicking **Create** to create the resources.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在填写此表格后，在点击 **Review + create** 之前，您仍然可以验证所有选项，然后再点击 **Create** 来创建资源。
- en: Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The name of the registry is a globally available DNS name (with the `azurecr.io`
    extension) and thus needs to be unique. Choose your own name where creating the
    resource succeeds with an available name.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注册表的名称是一个全局可用的 DNS 名称（带有 `azurecr.io` 扩展），因此需要是唯一的。选择您自己的名称，只要创建资源时使用的是可用的名称，资源就可以成功创建。
- en: We now have a database and a registry for container images running. With the
    first resources created, all we need to run the application in the cloud is a
    compute service where we can run the Docker images. We will use Azure Container
    Apps.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个数据库和一个用于运行容器镜像的注册表。在创建了第一个资源之后，我们只需要一个计算服务来运行 Docker 镜像，就可以在云端运行应用程序。我们将使用
    Azure 容器应用。
- en: Creating an Azure Container Apps environment
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Azure 容器应用环境
- en: Microsoft Azure has several compute offerings to run Docker containers. You
    can publish a Docker image to an **Azure app service**, and use a Windows or Linux
    server to run your APIs. Another option is to use **Azure Container Instances**
    (**ACI**), which allows you to host a group of Docker containers, including one
    frontend container (the API service) and multiple backend containers. While Azure
    app services offer automatic scaling to create multiple instances based on rules,
    this feature is not available with ACI. ACI is great with a fast startup – you
    spin up a VM where just the smaller Docker image needs to be uploaded, but it
    doesn’t offer orchestration and scaling features.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure 提供了多种计算服务来运行 Docker 容器。您可以将 Docker 镜像发布到**Azure 应用服务**，并使用 Windows
    或 Linux 服务器来运行您的 API。另一个选项是使用**Azure 容器实例**（**ACI**），它允许您托管一组 Docker 容器，包括一个前端容器（API
    服务）和多个后端容器。虽然 Azure 应用服务提供自动扩展功能，可以根据规则创建多个实例，但此功能在 ACI 中不可用。ACI 在快速启动方面很出色——您只需启动一个虚拟机，只需上传较小的
    Docker 镜像，但它不提供编排和扩展功能。
- en: For full-blown orchestration and scaling of Docker containers, Azure offers
    `kubectl`. To remove the complexity of Kubernetes, defining an Ingress controller
    is just a matter of changing some settings; **Azure Container Apps** instances
    are available. This service makes use of Kubernetes behind the scenes but removes
    a lot of its complexity.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Docker 容器的全面编排和扩展，Azure 提供 `kubectl`。为了简化 Kubernetes 的复杂性，定义一个入口控制器只需更改一些设置；**Azure
    容器应用**实例即可使用。此服务在幕后使用 Kubernetes，但去除了许多复杂性。
- en: Let’s get into creating an Azure container app.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始创建 Azure 容器应用。
- en: Creating a Log Analytics workspace
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建日志分析工作区
- en: When creating an Azure container app, having space for logging is a good idea.
    With previous versions of Azure Container Apps, it was a requirement to have a
    **Log Analytics workspace**. This is no longer a requirement, as you can also
    use Azure Monitor to log to an Azure storage account, an Azure event hub, or a
    third-party monitoring solution. Azure Monitor can also be configured to route
    logs to Log Analytics.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Azure 容器应用时，为日志记录留出空间是一个好主意。在 Azure 容器应用的先前版本中，有一个要求必须有一个**日志分析工作区**。这不再是要求，因为您还可以使用
    Azure Monitor 将日志记录到 Azure 存储帐户、Azure 事件中心或第三方监控解决方案。Azure Monitor 还可以配置为将日志路由到日志分析。
- en: A Log Analytics workspace is a storage unit for log data to analyze data and
    metrics. In [*Chapter 10*](B21217_10.xhtml#_idTextAnchor239), *Logging*, we’ll
    dive into logging and metrics with microservices, and make use of Log Analytics,
    Azure Monitor, and Application Insights to get information about running services.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 日志分析工作区是用于分析数据和指标的日志数据存储单元。在 [*第 10 章*](B21217_10.xhtml#_idTextAnchor239) *日志记录*
    中，我们将深入了解微服务的日志记录和指标，并利用日志分析、Azure Monitor 和 Application Insights 获取有关运行服务的详细信息。
- en: 'To create a Log Analytics workspace, we will use the Azure CLI:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建日志分析工作区，我们将使用 Azure CLI：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Log Analytics belongs to Azure Monitor, thus the `az monitor log-analytics`
    command is used to create and manage Log Analytics. With the `workspace create`
    subcommand, a Log Analytics workspace is created. This command requires the resource
    group and the name of the workspace. If the location is not supplied with the
    command, the workspace uses the same location as the resource group.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 日志分析属于 Azure Monitor，因此使用 `az monitor log-analytics` 命令来创建和管理日志分析。使用 `workspace
    create` 子命令创建一个日志分析工作区。此命令需要资源组和工作区的名称。如果命令中没有提供位置，则工作区将使用与资源组相同的地理位置。
- en: Creating a container app environment
  id: totrans-111
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建容器应用环境
- en: 'Creating a container app environment uses a Kubernetes cluster behind the scenes.
    You can create this environment to create a Log Analytics workspace automatically.
    Using an existing workspace (we created one in the previous step), we need the
    customer ID and a key from the workspace. Get the customer ID using the following
    command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 创建容器应用环境在幕后使用一个Kubernetes集群。您可以创建此环境来自动创建日志分析工作区。使用现有的工作区（我们在上一步中创建了一个），我们需要客户ID和工作区的密钥。使用以下命令获取客户ID：
- en: '[PRE4]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Without supplying `--query customerId`, you get more complete information about
    the workspace, including the `customerId` value. Using the `--query` command,
    we can supply a `customerId` with the query, just the unique identifier of this
    id (a GUID) is returned. Copy this GUID as well as the key from the next command
    as we’ll need these values when creating the environment.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不提供 `--query customerId`，您将获得关于工作区的更完整信息，包括 `customerId` 值。使用 `--query` 命令，我们可以通过查询提供
    `customerId`，仅返回此 id 的唯一标识符（一个GUID）。将此GUID以及下一个命令中的密钥一起复制，因为我们创建环境时需要这些值。
- en: 'This command returns keys to connect to the log workspace:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令返回连接到日志工作区的密钥：
- en: '[PRE5]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The output returns primary and secondary shared keys. Copy the primary shared
    key.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 输出返回主密钥和辅助密钥。复制主密钥。
- en: 'Using the customer ID as well as the key from the Log Analytics workspace,
    we can create a container app environment:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用客户ID以及日志分析工作区的密钥，我们可以创建一个容器应用环境：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: To create the environment, you need to specify the resource group, the name
    of the environment, information to connect log analytics, as well as the location
    of the newly created resource. This command does not use the location of the resource
    group if the location is not supplied. Be aware that this command might take several
    minutes. But think about how many minutes you would need to create a Kubernetes
    cluster manually.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建环境，您需要指定资源组、环境名称、连接日志分析的信息以及新创建资源的位置。如果未提供位置，则此命令不使用资源组的位置。请注意，此命令可能需要几分钟。但想想您手动创建Kubernetes集群需要多少分钟。
- en: Creating a hello container app
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个hello容器应用
- en: 'After creating the environment, let’s create our first app within this environment:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建环境后，让我们在这个环境中创建我们的第一个应用：
- en: '[PRE7]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Using the `create` command creates a new app. The name of this app is specified
    with the `-n` parameter. The environment is specified with the resource group
    (`-g`) and the `--environment` parameter. The image referenced with the `--image`
    parameter is a sample Docker image from Microsoft that hosts a web server with
    a static page. To access the web server running on port 80 within the container,
    the Ingress service is configured with the `--ingress` and `--target-port` parameters.
    Using the `--min-replicas` and `--max-replicas` parameters, scaling is defined
    to scale from 0 up to 2 instances. With 0 instances, the first user accessing
    the service needs to wait until the container is started. With the supplied configuration,
    the application scales up to 2 running containers. One container allocates 0.5
    CPUs and 1.0 Gi memory.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `create` 命令创建一个新的应用。此应用的名称由 `-n` 参数指定。环境由资源组（`-g`）和 `--environment` 参数指定。`--image`
    参数引用的镜像是从Microsoft提供的示例Docker镜像，它托管了一个带有静态页面的Web服务器。要访问容器内运行在80端口的Web服务器，需要配置Ingress服务，使用
    `--ingress` 和 `--target-port` 参数。使用 `--min-replicas` 和 `--max-replicas` 参数定义扩展，从0扩展到2个实例。在有0个实例的情况下，第一个访问服务的用户需要等待容器启动。根据提供的配置，应用程序扩展到2个运行中的容器。一个容器分配了0.5个CPU和1.0
    GiB内存。
- en: Note
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*Chapters 9* to *11* will give you information about scaling services. In [*Chapter
    9*](B21217_09.xhtml#_idTextAnchor216), you’ll create load tests to stress-test
    services, in [*Chapter 10*](B21217_10.xhtml#_idTextAnchor239), we’ll use these
    load tests to monitor metrics information, and in [*Chapter 11*](B21217_11.xhtml#_idTextAnchor263),
    we’ll configure scaling with information learned in the previous two chapters.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*第9章* 到 *第11章* 将为您提供有关服务扩展的信息。在 [*第9章*](B21217_09.xhtml#_idTextAnchor216) 中，您将创建负载测试以对服务进行压力测试，在
    [*第10章*](B21217_10.xhtml#_idTextAnchor239) 中，我们将使用这些负载测试来监控指标信息，而在 [*第11章*](B21217_11.xhtml#_idTextAnchor263)
    中，我们将利用前两章学到的信息来配置扩展。'
- en: 'When the app is created, a link for the app service is shown. You can also
    get the URL using this command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用创建完成后，会显示应用服务的链接。您也可以使用此命令获取URL：
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `containerapp show` command shows properties of the Azure container app.
    Using the `properties.configuration.ingress.fqdn` JMESPath query returns the `https://`
    instance shows the running application (see *Figure 6**.4*):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`containerapp show` 命令显示 Azure 容器应用的属性。使用 `properties.configuration.ingress.fqdn`
    JMESPath 查询返回的 `https://` 实例显示了正在运行的应用程序（见 *图 6**.4*）：'
- en: '![Figure 6.4 – Accessing the hello Azure container app](img/B21217_06_04.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4 – 访问 hello Azure 容器应用](img/B21217_06_04.jpg)'
- en: Figure 6.4 – Accessing the hello Azure container app
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – 访问 hello Azure 容器应用
- en: Now, opening the `rg-codebreaker-test` resource group with the Azure portal,
    we can see the Azure Cosmos DB, ACR, and Azure Container Apps environments, the
    Log Analytics workspace, and the container app, as shown in *Figure 6**.5*. Just
    check the options you have with the categories on the left side of the **Resource
    group** view. The **Overview** view shows the resources, as shown here. Clicking
    on **Access control**, you can configure who has access to the resources of this
    group. The *activity log* shows who created, updated, and deleted resources within
    this group. The *resource visualizer* gives a graphical view of resources and
    how they relate to each other. The **Cost Management** category might also be
    of interest.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用 Azure 门户打开 `rg-codebreaker-test` 资源组，我们可以看到 Azure Cosmos DB、ACR、Azure
    容器应用环境、日志分析工作区和容器应用，如图 *图 6**.5* 所示。只需检查 **资源组** 视图左侧的类别选项。**概览** 视图显示了资源，如这里所示。点击
    **访问控制**，您可以配置谁可以访问此组中的资源。**活动日志** 显示了在此组内创建、更新和删除资源的人员。**资源可视化器** 提供了资源及其相互关系的图形视图。**成本管理**
    类别也可能很有兴趣。
- en: 'You might need to wait for a day before seeing the detailed cost of each resource.
    With the tiers we used, the cost will be within a few cents. But you can also
    click on **Recommendations** to see what should be changed and configured with
    a production environment. Some of these recommendations require different tiers
    where you need to check into the cost changes. In case your company already experienced
    hacking into the company’s site, the cost of turning security features on with
    Microsoft Azure is really low compared to the cost of a hacking attack:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能需要等待一天才能看到每个资源的详细成本。使用我们使用的层级，成本将在几分钱之内。但您也可以点击 **推荐** 来查看在生产环境中应该更改和配置的内容。其中一些推荐需要不同的层级，您需要检查成本变化。如果您的公司已经经历过黑客攻击公司网站的情况，那么与黑客攻击的成本相比，使用
    Microsoft Azure 启用安全功能的成本非常低：
- en: '![Figure 6.5 – Resource group with Azure resources](img/B21217_06_05.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – 包含 Azure 资源的资源组](img/B21217_06_05.jpg)'
- en: Figure 6.5 – Resource group with Azure resources
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – 包含 Azure 资源的资源组
- en: Now, as the Azure resources are created, let’s publish the `codebreaker` services
    to Microsoft Azure.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着 Azure 资源创建完成，让我们将 `codebreaker` 服务发布到 Microsoft Azure。
- en: Let’s start with creating an Azure Cosmos database within an Azure Cosmos DB
    account.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Azure Cosmos DB 帐户内创建 Azure Cosmos 数据库开始。
- en: Creating an Azure Cosmos database
  id: totrans-138
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Azure Cosmos 数据库
- en: 'From the Azure portal, you can open the page for your Azure Cosmos DB account,
    open **Data Explorer**, and from there, click on **New Database** to create a
    new database, and **New Container** to create a container within the database.
    Here, we’ll use the Azure CLI instead:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 从 Azure 门户，您可以打开 Azure Cosmos DB 帐户的页面，打开 **数据探索器**，然后从那里点击 **新建数据库** 来创建新数据库，以及点击
    **新建容器** 在数据库中创建容器。这里，我们将使用 Azure CLI：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This command creates a database named `codebreaker` in the existing account.
    Setting the throughput option with this command defines the scale of the database.
    Here, all containers within this database share the 400 RU/s throughput. 400 is
    the smallest value that can be set. Instead of supplying this value when creating
    the database, scaling can also be configured with every container. In case some
    containers should not take away scaling from other containers, configure the RU/s
    with every container – but here, the minimum value to be used with each container
    is 400 as well.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令在现有帐户中创建一个名为 `codebreaker` 的数据库。使用此命令设置吞吐量选项定义了数据库的规模。在此，此数据库中的所有容器共享 400
    RU/s 的吞吐量。400 是可以设置的最小值。在创建数据库时，除了提供此值外，还可以通过每个容器配置扩展。如果某些容器不应从其他容器中获取扩展，则可以针对每个容器配置
    RU/s – 但在此，每个容器使用的最小值也是 400。
- en: 'After creating the database, let’s create a container:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 创建数据库后，让我们创建一个容器：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The implementation of the `gamesAPI` service uses a container named `GamesV3`.
    This container is created within the previously created database, using the `/PartitionKey`
    partition key, as was specified with the EF Core context in [*Chapter 3*](B21217_03.xhtml#_idTextAnchor063).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`gamesAPI` 服务的实现使用了一个名为 `GamesV3` 的容器。该容器是在之前创建的数据库中创建的，使用 `/PartitionKey`
    分区键，正如在 [*第 3 章*](B21217_03.xhtml#_idTextAnchor063) 中使用 EF Core 上下文所指定的。'
- en: 'After this command is completed, check **Data Explorer** in the Azure portal,
    as shown in *Figure 6**.6*:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在此命令完成后，检查 Azure 门户中的 **数据探索器**，如 *图 6*.6* 所示：
- en: '![Figure 6.6 – Data Explorer](img/B21217_06_06.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – 数据探索器](img/B21217_06_06.jpg)'
- en: Figure 6.6 – Data Explorer
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – 数据探索器
- en: You can see the database, the container, and, with the container, the configured
    partition key.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到数据库、容器，以及与容器一起配置的分区键。
- en: Configuring replication with Azure Cosmos DB
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Azure Cosmos DB 的复制
- en: 'A great feature of Azure Cosmos DB is global data replication. Within the Azure
    portal, in the **Settings** category, click on **Replicate data globally**. *Figure
    6**.7* shows the replication view:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Cosmos DB 的一个出色功能是全球数据复制。在 Azure 门户中，在 **设置** 类别中，单击 **全局复制数据**。*图 6*.7*
    显示了复制视图：
- en: '![Figure 6.7 – Replication with Azure Cosmos DB](img/B21217_06_07.jpg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.7 – 使用 Azure Cosmos DB 进行复制](img/B21217_06_07.jpg)'
- en: Figure 6.7 – Replication with Azure Cosmos DB
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – 使用 Azure Cosmos DB 进行复制
- en: You just need to click on the Azure regions that are available with your subscription
    to replicate data within the selected regions. You can also configure it to write
    to multiple regions.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您只需点击您的订阅中可用的 Azure 区域，即可在所选区域内复制数据。您还可以配置将其写入多个区域。
- en: With the `codebreaker` application where users around the world can play, for
    faster performance for users in the US, Europe, Asia, and Africa, writing to multiple
    regions can be configured. For this option to be available, automatic scaling
    cannot be configured. For the best scalability across the globe, we also need
    to think about the partition key. By using different partition key values for
    every game that’s stored, games can be stored within different partitions.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在全球范围内，对于 `codebreaker` 应用程序，用户可以在全球范围内玩游戏，为了提高美国、欧洲、亚洲和非洲用户的性能，可以配置写入多个区域。为此选项可用，不能配置自动扩展。为了在全球范围内实现最佳可伸缩性，我们还需要考虑分区键。通过为每个存储的游戏使用不同的分区键值，游戏可以存储在不同的分区中。
- en: Configuring consistency
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置一致性
- en: 'With the **Settings** category in the Azure portal of Azure Cosmos DB, we can
    configure the default consistency level. The outcomes are shown using music notes,
    reading, and writing from multiple regions, as shown in *Figure 6**.8*:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure Cosmos DB 的 Azure 门户中的 **设置** 类别中，我们可以配置默认的一致性级别。结果使用音符、读取和写入多个区域的方式显示，如
    *图 6*.8* 所示：
- en: '![Figure 6.8 – Outcome shown using music notes](img/B21217_06_08.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 使用音符显示的结果](img/B21217_06_08.jpg)'
- en: Figure 6.8 – Outcome shown using music notes
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 使用音符显示的结果
- en: The default setting is **Session consistency** – the data is consistent within
    the same session. With this setting, write latencies, availability, and read throughput
    are comparable to **Eventual consistency**. Using the Azure Cosmos DB API, a session
    can be created and distributed within the application.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 默认设置是 **会话一致性** – 数据在同一个会话中是一致的。使用此设置，写入延迟、可用性和读取吞吐量与 **最终一致性** 相当。使用 Azure
    Cosmos DB API，可以在应用程序中创建和分发会话。
- en: The **Strong consistency** option is not available if multiple regions are configured.
    With multiple regions, **Bounded staleness** can be configured, which specifies
    a maximum lag time and a number of maximum lag operations before the data is consistently
    replicated.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果配置了多个区域，则 **强一致性** 选项不可用。对于多个区域，可以配置 **有界过时性**，它指定了在数据一致复制之前的最大延迟时间和最大延迟操作数。
- en: The database is now ready to use, so let’s publish Docker images to the registry!
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库现在已准备好使用，让我们将 Docker 镜像发布到注册表中！
- en: Pushing images to the ACR instance
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将镜像推送到 ACR 实例
- en: The ACR instance is ready, and we created Docker images in the previous chapter
    – now, let’s publish the images to this registry.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ACR 实例已准备就绪，我们在上一章中创建了 Docker 镜像 – 现在，让我们将镜像发布到这个注册表中。
- en: 'After you’ve logged in to Microsoft Azure (using `az login`), to log in to
    the ACR instance, you can use `az acr login`. Make sure to use the name you defined
    with the ACR instance:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在您使用 `az login` 登录到 Microsoft Azure 后，要登录到 ACR 实例，可以使用 `az acr login`。请确保使用您为
    ACR 实例定义的名称：
- en: '[PRE11]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command needs to have Docker Desktop installed and running.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令需要安装并运行 Docker Desktop。
- en: Note
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Referencing the ACR instance using the Azure CLI, just the name of the registry
    is needed (such as `codebreakertest`). The `docker` and `dotnet` commands support
    different registries, thus with these commands, the complete domain name is needed,
    such as `codebreakertest.azurecr.io`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure CLI 引用 ACR 实例，只需要注册表的名称（例如 `codebreakertest`）。`docker` 和 `dotnet` 命令支持不同的注册表，因此使用这些命令时，需要完整的域名，例如
    `codebreakertest.azurecr.io`。
- en: 'Next, let’s build the images. With the game APIs, we created a Dockerfile in
    the previous chapter. With the Windows terminal, make sure to set the current
    directory to the `ch06` folder and build the game image locally:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们构建镜像。在上一章中，我们为游戏 API 创建了 Dockerfile。使用 Windows 终端，确保将当前目录设置为 `ch06` 文件夹，并在本地构建游戏镜像：
- en: '[PRE12]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command – as in the previous chapter – builds the Docker image locally,
    referencing the Dockerfile, setting the context for `docker build`, and setting
    the tag.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令——就像上一章中一样——在本地构建 Docker 镜像，引用 Dockerfile，设置 `docker build` 的上下文，并设置标记。
- en: 'To publish the image to ACR, we need to tag the local images:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 要将镜像发布到 ACR，我们需要对本地镜像进行标记：
- en: '[PRE13]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The images are tagged with a link to the ACR instance. The same image is tagged
    with the version number as well as the `latest` tag. The `latest` tag is a convention
    where the newest version is stored and is always overridden in the repository.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像被标记为指向 ACR 实例的链接。相同的镜像还标记了版本号以及 `latest` 标签。`latest` 标签是一种约定，其中存储最新版本，并且总是覆盖存储库中的版本。
- en: 'Next, push the image to the registry with `docker push`:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `docker push` 将镜像推送到注册表：
- en: '[PRE14]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Make sure you are already logged in to the ACR instance; otherwise, the push
    will fail.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经登录到 ACR 实例；否则，推送将失败。
- en: 'With a successful push, you can see the images in the Azure portal within the
    **Repositories** menu, as shown in *Figure 6**.9*:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 成功推送后，您可以在 Azure 门户的 **存储库** 菜单中看到镜像，如图 *图 6.9* 所示：
- en: '![Figure 6.9 – Repositories in ACR](img/B21217_06_09.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – ACR 中的存储库](img/B21217_06_09.jpg)'
- en: Figure 6.9 – Repositories in ACR
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – ACR 中的存储库
- en: 'With the bot service, we didn’t create a Dockerfile in the previous chapter
    and used the dotnet CLI instead. Using `dotnet publish`, we just need to add this
    `PropertyGroup` instance to the project file:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们没有为机器人服务创建 Dockerfile，而是使用了 dotnet CLI。使用 `dotnet publish`，我们只需将此 `PropertyGroup`
    实例添加到项目文件中：
- en: Codebreaker.Bot/Codebreaker.Bot.csproj project file
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Codebreaker.Bot/Codebreaker.Bot.csproj 项目文件
- en: '[PRE15]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `dotnet publish` command uses `ContainerRegistry`, `ContainerRepository`,
    and `ContainerImageTags` elements to create the image and publish it to the registry.
    Pay attention to configuring your own registry with the `ContainerRegistry` element.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet publish` 命令使用 `ContainerRegistry`、`ContainerRepository` 和 `ContainerImageTags`
    元素来创建镜像并将其发布到注册表。请注意使用 `ContainerRegistry` 元素配置您自己的注册表。'
- en: 'All that needs to be done with the current directory is to set the directory
    of the project file of the bot and run `dotnet publish`:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 对于当前目录需要做的所有事情就是设置机器人的项目文件目录并运行 `dotnet publish`：
- en: '[PRE16]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command builds the image and directly publishes it to the registry, as
    specified with the `ContainerRegistry` element. Just make sure to enter the link
    to your registry, and be logged in using `docker login`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令构建镜像并将其直接发布到注册表，如 `ContainerRegistry` 元素中指定。只需确保输入您的注册表链接，并使用 `docker login`
    登录。
- en: As the images are ready, let’s continue using them with Azure container apps!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 随着镜像准备就绪，让我们继续使用 Azure 容器应用来使用它们！
- en: Creating Azure container apps
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 Azure 容器应用
- en: Let’s create a `gamesAPI` service running with an Azure container app. This
    one needs a configuration containing a secret to the Azure Cosmos database.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个使用 Azure 容器应用运行的 `gamesAPI` 服务。这个服务需要一个包含对 Azure Cosmos 数据库的密钥的配置。
- en: With the Azure Cosmos database, in the Azure portal, go to the **Settings**
    category and open **Keys**. From this page, copy the primary or the secondary
    connection string.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 门户中，使用 Azure Cosmos 数据库，转到 **设置** 类别并打开 **密钥**。从该页面复制主连接字符串或辅助连接字符串。
- en: With such keys, it’s useful to regenerate them from time to time – that’s why
    pairs are available. When you use the primary key from apps, regenerate the secondary
    key. After the regeneration, use the secondary key from within the apps, and regenerate
    the primary key. With this, you have some time to configure all the apps for the
    new key.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些密钥时，定期重新生成它们是有用的——这就是为什么有配对的原因。当你使用应用的主密钥时，重新生成辅助密钥。重新生成后，在应用内部使用辅助密钥，并重新生成主密钥。这样，你就有时间配置所有应用的新密钥。
- en: 'When creating an Azure container app for game APIs, there are quite some values
    to configure. While you can pass all the configuration values to the `az containerapp
    create` command, let’s start creating this with the Azure portal. Opening the
    resource of the Azure container app environment, click on **Apps**, and create
    a new app. *Figure 6**.10* shows the basic settings:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 当为游戏API创建Azure容器应用时，有许多值需要配置。虽然你可以将所有配置值传递给`az containerapp create`命令，但让我们从Azure门户开始创建。打开Azure容器应用环境资源，点击**应用**，创建一个新的应用。*图6**.10*显示了基本设置：
- en: '![Figure 6.10 – Basic settings for the Azure container app](img/B21217_06_10.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – Azure容器应用的基本设置](img/B21217_06_10.jpg)'
- en: Figure 6.10 – Basic settings for the Azure container app
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – Azure容器应用的基本设置
- en: 'With the basic settings, these values need to be configured:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在基本设置中，需要配置以下值：
- en: The subscription for the resource.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源订阅。
- en: The resource group (`rg-codebreaker-test`).
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组（`rg-codebreaker-test`）。
- en: The name of the container app. We use `cae-codebreaker-gamesapi-3`. The suffix
    3 names version 3 of this API. You can run different versions of this app in parallel.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器应用的名称。我们使用`cae-codebreaker-gamesapi-3`。后缀3表示该API的版本3。你可以并行运行此应用的多个版本。
- en: The region – select the region that best fits your location.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 区域——选择最适合您位置的区域。
- en: The container app environment. Select the environment created earlier.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器应用环境。选择之前创建的环境。
- en: 'The configuration screen for the container app is shown in *Figure 6**.11*:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 容器应用的配置屏幕如图6**.11**所示：
- en: '![Figure 6.11 – Container settings for the Azure container app](img/B21217_06_11.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – Azure容器应用的容器设置](img/B21217_06_11.jpg)'
- en: Figure 6.11 – Container settings for the Azure container app
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – Azure容器应用的容器设置
- en: Here, we select the image that will be published by selecting the ACR instance
    and the image name and tag, the CPU and memory resources that should be allocated
    for one running instance, and environment variables. Setting the `DataStorage`
    environment variable to `Cosmos` overrides the values defined in the `appsettings.json`
    file.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过选择ACR实例和镜像名称和标签来选择将要发布的镜像，为单个运行实例分配的CPU和内存资源，以及环境变量。将`DataStorage`环境变量设置为`Cosmos`将覆盖`appsettings.json`文件中定义的值。
- en: '*Figure 6**.12* shows the **Ingress** configuration:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6**.12*显示了**入口**配置：'
- en: '![Figure 6.12 – Ingress settings for the Azure container app](img/B21217_06_12.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图6.12 – Azure容器应用的入口设置](img/B21217_06_12.jpg)'
- en: Figure 6.12 – Ingress settings for the Azure container app
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – Azure容器应用的入口设置
- en: We need to enable `8080`, as defined by the .NET 8 images.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要启用由.NET 8镜像定义的`8080`。
- en: Clicking on **Create** creates the Azure container app by getting the image
    from the ACR instance. Be aware that starting the app will fail, as the connection
    string to the Cosmos database still needs to be configured. We will do this after
    creating the app for the bot service.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**将根据ACR实例获取镜像来创建Azure容器应用。请注意，启动应用将失败，因为连接到Cosmos数据库的连接字符串仍然需要配置。我们将在创建机器人服务应用后进行此操作。
- en: To create the app for the bot service, open the newly created container app
    in the Azure portal, and copy the *application URL* from the **Overview** view.
    This URL is needed for the configuration of the bot.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建机器人服务的应用，请在Azure门户中打开新创建的容器应用，并从**概览**视图复制*应用URL*。此URL用于配置机器人。
- en: When creating an app for the bot service, you can configure it similarly to
    the game APIs. The `codebreaker/bot` image. Create an environment variable with
    the name `ApiBase`, and the value with the application URL from the game APIs.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 当为机器人服务创建应用时，你可以像配置游戏API一样进行配置。创建一个名为`ApiBase`的环境变量，其值为游戏API的应用URL。
- en: We still need to add some configuration values, which we’ll do next.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要添加一些配置值，我们将在下一步进行。
- en: Configuring secrets and environment variables
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置密钥和环境变量
- en: Defining secrets for the application is not directly possible with the portal
    when creating the app. This would be possible directly using the `az containerapp`
    `create` command.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建应用时，无法直接通过门户定义应用密钥。这可以通过 `az containerapp` `create` 命令直接完成。
- en: 'With the portal, the secret can be configured afterward. When opening the container
    app within the Azure portal, in the `cosmosconnectionstring`, as shown in *Figure
    6**.13*, and copy the connection string you copied from Azure Cosmos DB to the
    value:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 使用门户，可以在之后配置密钥。当在 Azure 门户中打开容器应用时，在 `cosmosconnectionstring`，如图 *图 6.13* 所示，并将从
    Azure Cosmos DB 复制的连接字符串复制到值：
- en: Note
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The screenshot in *Figure 6**.13* shows another option where secrets can be
    stored: a Key Vault reference. In [*Chapter 7*](B21217_07.xhtml#_idTextAnchor162),
    we’ll discuss using other options to use configurations, which include **Azure**
    **Key Vault**.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 6.13* 中的截图显示了另一个可以存储密钥的选项：密钥保管库引用。在 [*第 7 章*](B21217_07.xhtml#_idTextAnchor162)
    中，我们将讨论使用其他选项来使用配置，这些选项包括 **Azure** **密钥保管库**。'
- en: '![Figure 6.13 – Secret configuration with the Azure container app](img/B21217_06_13.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.13 – 使用 Azure 容器应用的密钥配置](img/B21217_06_13.jpg)'
- en: Figure 6.13 – Secret configuration with the Azure container app
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.13 – 使用 Azure 容器应用的密钥配置
- en: 'To create an environment variable that references the secret, we can use the
    Azure CLI:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个引用密钥的环境变量，我们可以使用 Azure CLI：
- en: '[PRE17]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Using the `az containerapp update` command, we need to reference the container
    app and the resource group and set environment variables using `--set-env-vars`.
    Contrary to passing hierarchical configuration values to the command line where
    `:` is used as a separator, such as `ConnectionStrings:GamesCosmosConnection`,
    with environment variables, using `:` is not possible. Instead, here, `__` maps
    values. The key that’s specified for the connection to the Azure Cosmos DB instance
    is `ConnectionStrings__GamesCosmosConnection`. The value for this is stored in
    a secret. A secret is referenced with `secretref`, followed by the secret key.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `az containerapp update` 命令时，我们需要引用容器应用和资源组，并使用 `--set-env-vars` 设置环境变量。与通过命令行传递具有
    `:` 作为分隔符的分层配置值不同，例如 `ConnectionStrings:GamesCosmosConnection`，使用环境变量时不能使用 `:`。相反，在这里，`__`
    用于映射值。用于连接到 Azure Cosmos DB 实例的键是 `ConnectionStrings__GamesCosmosConnection`。这个值的存储在密钥中。密钥通过
    `secretref` 后跟密钥来引用。
- en: The application should be running now, but let’s make sure to configure scaling.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 应用现在应该正在运行，但让我们确保配置了缩放。
- en: Configuring scaling with Azure Container Apps
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Azure 容器应用配置缩放
- en: The default scaling configured with Azure Container Apps is scaling from 0 to
    10\. If no load is on the app, it scales down to 0 where CPU and memory costs
    are reduced to zero. However, scaling to 0 also means that the first user accessing
    the service needs to wait for a few seconds before the service returns results.
    With the bot service that’s running in the background and doesn’t need some user
    interaction after the first invocation, this can be fast enough. With app jobs
    that are triggered from messages or events, this is also OK. However, with the
    `gamesAPI` service, this should be responsive for the first user accessing the
    service.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 容器应用默认配置的缩放范围是从 0 到 10。如果没有应用负载，它会缩放到 0，此时 CPU 和内存成本降低到零。然而，缩放到 0 也意味着第一个访问服务的用户需要等待几秒钟，服务才能返回结果。对于在后台运行且在第一次调用后不需要用户交互的机器人服务，这可能是足够的。对于从消息或事件触发的应用作业，这也行得通。然而，对于
    `gamesAPI` 服务，对于第一个访问服务的用户，它应该能够快速响应。
- en: Configuring the minimum scale to 1 has a reduced price for the CPU if there’s
    no load. With idle pricing, the memory doesn’t have a price difference, but the
    CPU is about 10% of the cost compared to a running service.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 将最小缩放设置为 1，如果没有负载，CPU 的价格会降低。在空闲定价中，内存没有价格差异，但与运行中的服务相比，CPU 的成本大约是 10%。
- en: Let’s configure the `gamesAPI` service to scale from 1 to 3 replicas, and the
    bot service to scale from 0 to 3\. Within the Azure portal, select the container
    app, the **Applications** category, and the **Scale and replicas** menu. Click
    the **Edit and deploy** menu, select **Scale**, and change the replicas to 1 to
    3 and to 0 to 3 depending on the app. In case the UI elements are not easily movable
    to change the values accordingly, you can use the arrow keys to change the values
    one by one. The maximum scale count (at the time of this writing) is 300.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们配置`gamesAPI`服务从1个副本扩展到3个副本，以及机器人服务从0个副本扩展到3个副本。在Azure门户中，选择容器应用，**应用程序**类别，以及**扩展和副本**菜单。点击**编辑和部署**菜单，选择**扩展**，根据应用程序更改副本数量为1到3和0到3。如果UI元素不易移动以相应地更改值，你可以使用箭头键逐个更改值。在撰写本文时，最大扩展计数（最大）为300。
- en: Clicking on **Create** does a redeploy and creates a new revision of the app.
    By default, only one revision is active at a time. As soon as the new revision
    successfully starts up, the load balancer moves 100% of the traffic to the new
    revision. With the **Applications** | **Revisions** menu, you can see active and
    inactive revisions. There, you also can configure the revision mode. The default
    revision mode is **Single**, where just one revision is active. You can change
    this to **Multiple**, where several revisions are running concurrently, and you
    can configure how much percentage of the traffic should be distributed to which
    revision. This can be useful to test different versions running on a user load.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**会重新部署并创建应用程序的新版本。默认情况下，一次只有一个版本是激活的。一旦新版本成功启动，负载均衡器会将100%的流量转移到新版本。通过**应用程序**
    | **版本**菜单，你可以看到激活和未激活的版本。在那里，你也可以配置版本模式。默认版本模式是**单版本**，其中只有一个版本是激活的。你可以将其更改为**多版本**，其中多个版本同时运行，你可以配置要将多少百分比的流量分配给哪个版本。这可以用于测试在用户负载下运行的不同版本。
- en: With this in place, let’s try to run the application. You can open the Swagger
    page of the bot to let the bot play some games. You can also use a client you
    created in [*Chapter 4*](B21217_04.xhtml#_idTextAnchor092), configure the address
    with the Container App game API’s URL, and play a game. Check into the **Data
    Explorer** section of Cosmos DB to see the games stored.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在此设置完成后，让我们尝试运行应用程序。你可以打开机器人的 Swagger 页面，让机器人玩一些游戏。你也可以使用你在 [*第4章*](B21217_04.xhtml#_idTextAnchor092)
    中创建的客户端，配置 Container App 游戏API的URL，并玩游戏。检查Cosmos DB的**数据探索器**部分以查看存储的游戏。
- en: As you now know all the Azure services used in the first place, you can delete
    Azure resources and recreate them easily in the next section.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如你现在所知，所有最初使用的Azure服务，你可以在下一节中轻松删除Azure资源并重新创建它们。
- en: Creating Azure resources with .NET Aspire and azd
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用.NET Aspire和azd创建Azure资源
- en: Here, we’ll look into how to easily create Azure resources from the development
    system. First, we use some resources from the Azure cloud, while most of the projects
    are running locally on the development system, before we publish the complete
    solution to Azure.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将探讨如何轻松地从开发系统创建Azure资源。首先，我们使用一些来自Azure云的资源，而大多数项目在发布完整解决方案到Azure之前都在开发系统上本地运行。
- en: Provisioning Azure resources while debugging
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在调试时配置Azure资源
- en: When creating API services and using databases, you might not need any Azure
    resources when debugging the application locally. The API can run locally; even
    building Docker images is not required here. To run the database, a Docker image
    can be used easily, as you’ve already seen in [*Chapter 5*](B21217_05.xhtml#_idTextAnchor110).
    However, for some Azure resources that you might also use during development,
    creating and connecting Azure resources is required. One example is Azure Application
    Insights (which is covered in detail in [*Chapter 8*](B21217_08.xhtml#_idTextAnchor183)).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建API服务和使用数据库时，在本地调试应用程序时，你可能不需要任何Azure资源。API可以在本地运行；甚至构建Docker镜像也不是必需的。要运行数据库，可以使用Docker镜像，正如你在
    [*第5章*](B21217_05.xhtml#_idTextAnchor110) 中所见。然而，对于你可能也在开发过程中使用的某些Azure资源，创建和连接Azure资源是必需的。一个例子是Azure
    Application Insights（在第 [*第8章*](B21217_08.xhtml#_idTextAnchor183) 中有详细说明）。
- en: To use Azure resources with the application map in the `AppHost` project, you
    need to add the `A``spire.Hosting.Azure.* packages`. To use Azure resources to
    define the app model, packages such as `Aspire.Hosting.Azure` and `Aspire.Hosting.Azure.cosmosDB`
    are available.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`AppHost`项目中使用应用程序映射的Azure资源，您需要添加`A``spire.Hosting.Azure.*`包。要使用Azure资源来定义应用程序模型，有如`Aspire.Hosting.Azure`和`Aspire.Hosting.Azure.cosmosDB`之类的包可用。
- en: 'Provisioning of Azure resources happens automatically when the Azure resources
    are specified with the app model:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用应用程序模型指定Azure资源时，Azure资源的配置会自动发生：
- en: Codebreaker.AppHost/Program.cs
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Codebreaker.AppHost/Program.cs
- en: '[PRE18]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `AddAzureProvisioning` method creates Azure resources or retrieves the
    connection string when starting the application. Before this can successfully
    run, you need to specify your subscription ID and the location where the resources
    are created:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`AddAzureProvisioning`方法在应用程序启动时创建Azure资源或检索连接字符串。在成功运行之前，您需要指定您的订阅ID和资源创建的位置：'
- en: '[PRE19]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This information should not be part of the source code repository, thus add
    it to the user secrets. The `SubscriptionId` and `Location` keys need to be specified
    within the `Azure` category. Adding a *CredentialSource* is optional. The user
    to create the resources is selected using the DefaultAzureCredential (see [*Chapter
    7*](B21217_07.xhtml#_idTextAnchor162) for details). In case this is not working
    in your environment, you can configure AzureCli which uses the account you are
    logged in with the Azure CLI.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 此信息不应成为源代码存储库的一部分，因此将其添加到用户密钥中。需要在`Azure`类别中指定`SubscriptionId`和`Location`键。添加`*CredentialSource*`是可选的。用于创建资源的用户是通过DefaultAzureCredential选择的（有关详细信息，请参阅[*第7章*](B21217_07.xhtml#_idTextAnchor162)）。如果在此环境中不起作用，您可以配置AzureCli，它使用您通过Azure
    CLI登录的账户。
- en: 'To get the subscription ID, you can use the following command:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取订阅ID，您可以使用以下命令：
- en: '[PRE20]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You need to be logged in to your subscription not only to see the subscription
    ID but also to deploy the resources automatically. After running the application,
    you can see the deployed resources are written to the user secrets as well.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要登录到您的订阅，不仅是为了查看订阅ID，还可以自动部署资源。运行应用程序后，您可以看到已部署的资源已写入用户密钥中。
- en: 'This app model defines provisioning and using the Azure Cosmos DB database
    without using the emulator:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 此应用程序模型定义了使用模拟器之外的方式配置和使用Azure Cosmos DB数据库：
- en: Codebreaker.AppHost/Program.cs
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Codebreaker.AppHost/Program.cs
- en: '[PRE21]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To avoid the need to install and run the local Azure Cosmos DB emulator, and
    to get rid of some issues using Azure Cosmos DB in the Docker image, we can use
    Azure Cosmos DB in the cloud. Not using the `RunAsEmulator` method with `AddAzureCosmosDB`,
    we use the resource running in Azure. The `AddDatabase` method adds the `codebreaker`
    database to the account. The `Codebreaker.CosmosCreate` project is used to run
    once, invoking the `EnsureCreatedAsync` method of the EF Core context to create
    a container with the partition key. The `WithReference` method used both with
    the `gamesAPI` service and the `CosmosCreate` project passes the newly created
    Azure Cosmos DB connection string to these resources. The `WithExternalEndpoints`
    method configures the Ingress controller of the Azure App Configuration to make
    this service external available.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免安装和运行本地Azure Cosmos DB模拟器，并解决在Docker镜像中使用Azure Cosmos DB时的一些问题，我们可以在云中使用Azure
    Cosmos DB。不使用`RunAsEmulator`方法与`AddAzureCosmosDB`一起使用，我们使用在Azure中运行的资源。`AddDatabase`方法将`codebreaker`数据库添加到账户中。`Codebreaker.CosmosCreate`项目用于运行一次，调用EF
    Core上下文的`EnsureCreatedAsync`方法来创建一个具有分区键的容器。与`gamesAPI`服务和`CosmosCreate`项目一起使用的`WithReference`方法将这些新创建的Azure
    Cosmos DB连接字符串传递给这些资源。`WithExternalEndpoints`方法配置Azure App Configuration的Ingress控制器，使此服务外部可用。
- en: '*Figure 6**.14* shows the .NET Aspire dashboard with the application running:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.14*显示了运行应用程序的.NET Aspire仪表板：'
- en: '![Figure 6.14 – .NET Aspire dashboard with deployed Azure resources](img/B21217_06_14.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 部署了Azure资源的.NET Aspire仪表板](img/B21217_06_14.jpg)'
- en: Figure 6.14 – .NET Aspire dashboard with deployed Azure resources
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 部署了Azure资源的.NET Aspire仪表板
- en: The `codebreakercosmos` resource shows an endpoint with the `deployment` link
    text. This is a resource deployed to Azure. Clicking this link, you are directly
    navigated to this cloud resource and can check the database and container name
    are created. The `cosmoscreate` reference is in the **Finished** state, thus the
    creation of the container is done.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`codebreakercosmos` 资源显示了一个带有 `deployment` 链接文本的端点。这是一个部署到 Azure 的资源。点击此链接，你将直接导航到这个云资源，并可以检查数据库和容器名称是否已创建。`cosmoscreate`
    引用处于 **完成** 状态，因此容器创建已完成。'
- en: Now let’s start the bot and let it run some games, then open **Data Explorer**
    with Azure Cosmos DB, and you’ll see the games created. You can debug the solution
    locally while using some of the resources in the cloud, just by adding one API
    method.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们启动机器人并让它运行一些游戏，然后使用 Azure Cosmos DB 打开 **数据探索器**，你将看到创建的游戏。你只需添加一个 API
    方法，就可以在本地调试解决方案的同时使用云中的一些资源。
- en: The resource group created here uses the name `rg-aspire-{yourhost}-codebreaker.apphost`.
    If multiple developers use the same Azure subscription, resources are created
    independently of each other to not get into conflicts. Make sure to delete resources
    when not needed.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这里创建的资源组使用名称 `rg-aspire-{yourhost}-codebreaker.apphost`。如果多个开发者使用相同的 Azure 订阅，资源将独立创建，以避免冲突。确保在不需要时删除资源。
- en: Next, let’s create the complete solution to run with Azure.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个完整的解决方案，以便在 Azure 上运行。
- en: Provisioning the complete solution with azd up
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 azd up 配置完整解决方案
- en: 'For this, we use `azd`. First, in the directory of the solution, use the following
    command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们使用 `azd`。首先，在解决方案的目录中，使用以下命令：
- en: '[PRE22]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This initializes an application to be used with `azd`. You can use a template
    to create a new solution or analyze an existing application. As we already have
    a running application, select `Use code in the current directory` to analyze the
    application. The application needs to be stopped because `azd` also starts the
    compilation. With a successful scan, `azd` informs to host the app using `bot`
    and `gamesAPI` services. Then, define an environment (for example, `codebreaker-06`)
    using a chapter suffix.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这初始化了一个用于与 `azd` 一起使用的应用程序。你可以使用模板创建一个新的解决方案或分析现有的应用程序。由于我们已经有了一个运行中的应用程序，选择
    `使用当前目录中的代码` 来分析应用程序。由于 `azd` 也会启动编译，因此需要停止应用程序。在成功扫描后，`azd` 会通知使用 `bot` 和 `gamesAPI`
    服务托管应用程序。然后，使用章节后缀定义一个环境（例如，`codebreaker-06`）。
- en: What happened? This command created a `.azure` folder and `azure.yaml` and `next-steps.md`
    files. `next-steps.md` gives information about what you can do next. `azure.yaml`
    is a short file containing information that references the `AppHost` project running
    with a `containerapp`. The most interesting generated information can be found
    in the `.azure` folder. This folder is excluded from the source code repository
    as it can contain secrets. In this folder, you can see the environments that are
    configured, as well as the configuration about which services should be public.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？此命令创建了一个 `.azure` 文件夹和 `azure.yaml` 以及 `next-steps.md` 文件。`next-steps.md`
    提供了有关下一步可以做什么的信息。`azure.yaml` 是一个包含引用 `containerapp` 中运行的 `AppHost` 项目的信息的简短文件。最有趣生成的信息可以在
    `.azure` 文件夹中找到。此文件夹被排除在源代码存储库之外，因为它可能包含机密信息。在这个文件夹中，你可以看到配置的环境，以及关于哪些服务应该是公开的配置信息。
- en: 'To publish the complete solution to Azure, just use the following command:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 要将完整解决方案发布到 Azure，只需使用以下命令：
- en: '[PRE23]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: With the first run, you need to select the Azure subscription to deploy the
    resources to, and the location for the Azure region. Next, you just need to wait
    several minutes until all the resources have been deployed.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次运行时，你需要选择将资源部署到的 Azure 订阅和 Azure 区域的位置。接下来，只需等待几分钟，直到所有资源都已部署。
- en: 'In the provisioning phase, these resources are deployed:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置阶段，这些资源被部署：
- en: A resource group
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源组
- en: A container registry
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器注册库
- en: A key vault
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密钥保管库
- en: A Log Analytics workspace
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志分析工作区
- en: A Container Apps environment
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 容器应用环境
- en: 'After the provisioning phase, the deployment phase starts with these actions:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置阶段之后，部署阶段开始，这些操作包括：
- en: Pushing Docker images to the ACR instance
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Docker 镜像推送到 ACR 实例
- en: Creating container apps in the Container Apps environment using the images from
    the ACR instance
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在容器应用环境中使用 ACR 实例中的镜像创建容器应用
- en: As you make any changes to the source code or the configuration, you just need
    to use `azd up` again to deploy the updates. As the created environment is no
    longer needed, use `azd down` to delete all the resources again. Make sure to
    wait until you are asked for verification as to whether the number of resources
    should really be deleted.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 当你对源代码或配置进行任何更改时，你只需再次使用 `azd up` 来部署更新。由于创建的环境不再需要，请使用 `azd down` 再次删除所有资源。确保等待直到你被要求验证是否真的应该删除资源数量。
- en: 'Checking the resource group within the Azure portal, you can see all resources
    created, as shown in *Figure 6**.15*:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 门户中检查资源组，你可以看到所有创建的资源，如图 *图 6**.15* 所示：
- en: '![Figure 6.15 – Resources created from azd up](img/B21217_06_15.jpg)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.15 – 从 azd up 创建的资源](img/B21217_06_15.jpg)'
- en: Figure 6.15 – Resources created from azd up
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 从 azd up 创建的资源
- en: Now, you can check the resources deployed, the images published to the container
    registry, the applications published to the container apps environment, the key
    vault containing a secret, and the Azure Cosmos DB account with the database and
    the configured container. Let the bot play games and verify if everything is running.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以检查部署的资源、发布到容器注册表的镜像、发布到容器应用环境的应用程序、包含机密的密钥保管库以及包含数据库和配置容器的 Azure Cosmos
    DB 账户。让机器人玩游戏并验证一切是否正常运行。
- en: Next, let’s get into the details of what happened with `azd up`.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们深入了解 `azd up` 发生了什么。
- en: Diving into azd up stages
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 深入 azd up 阶段
- en: 'Running the `AppHost` project, command-line arguments can be passed to create
    a manifest file describing all the resources:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `AppHost` 项目时，可以通过命令行参数传递来创建一个描述所有资源的清单文件：
- en: '[PRE24]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When using `dotnet run`, command-line arguments can be passed to the application
    by using `--` to differentiate from the arguments of `dotnet run`. Using the -`–publisher
    manifest` option creates an Aspire manifest describing the app model of the application.
    This manifest specifies all resources with the resource type, bindings, environment
    variables, and paths to the projects. This information is used by `azd` to create
    Azure resources and can be used from other tools to, for example, deploy the solution
    to Kubernetes.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `dotnet run` 时，可以通过使用 `--` 来区分 `dotnet run` 的参数，将命令行参数传递给应用程序。使用 `-–publisher
    manifest` 选项创建一个描述应用程序应用模型的 Aspire 清单。此清单指定所有资源，包括资源类型、绑定、环境变量和项目路径。这些信息由 `azd`
    用于创建 Azure 资源，并且可以从其他工具中使用，例如，将解决方案部署到 Kubernetes。
- en: 'Next, `azd provision` is used. In case you just want to provision Azure resources
    without pushing Docker images and deploying the Azure container apps, use the
    following command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用 `azd provision`。如果你只想配置 Azure 资源而不推送 Docker 镜像和部署 Azure 容器应用，请使用以下命令：
- en: '[PRE25]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`azd provision` uses the manifest file to create Bicep files in memory and
    creates Azure resources.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`azd provision` 使用清单文件在内存中创建 Bicep 文件，并创建 Azure 资源。'
- en: You can use this command when any Azure resources are added to the app model,
    then just these resources are created.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何 Azure 资源被添加到应用模型时，你可以使用此命令，然后仅创建这些资源。
- en: 'The next step is the following:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是以下：
- en: '[PRE26]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`azd deploy` pushes the container images to the ACR instance using `dotnet
    publish`, and then creates or updates Azure resources using these images.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`azd deploy` 使用 `dotnet publish` 将容器镜像推送到 ACR 实例，然后使用这些镜像创建或更新 Azure 资源。'
- en: '`azd up` creates Bicep scripts in memory. It’s also possible to create Bicep
    scripts on disk to use them to create Azure resources, as we’ll do next.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`azd up` 在内存中创建 Bicep 脚本。也可以在磁盘上创建 Bicep 脚本以使用它们来创建 Azure 资源，就像我们接下来要做的那样。'
- en: Creating Bicep files using azd
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 azd 创建 Bicep 文件
- en: Bicep is a domain-specific language using declarative syntax. Before Bicep was
    available, we created **Azure Resource Manager** (**ARM**) templates to create
    Azure resources. ARM templates are defined using JSON. Bicep is simpler to write
    than ARM templates. During deployment, Bicep files are converted to ARM templates.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Bicep 是一种使用声明性语法的特定领域语言。在 Bicep 可用之前，我们创建 **Azure 资源管理器** (**ARM**) 模板来创建 Azure
    资源。ARM 模板使用 JSON 定义。Bicep 比ARM模板更容易编写。在部署期间，Bicep 文件被转换为 ARM 模板。
- en: Here, we use `azd infra` to create Bicep files for the solution.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们使用 `azd infra` 为解决方案创建 Bicep 文件。
- en: Note
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: At the time of this writing, `azd infra` is in an early stage. Check the README
    file of this chapter for updates.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，`azd infra` 处于早期阶段。请查看本章的 README 文件以获取更新。
- en: 'Start this command from the directory of the solution:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 从解决方案目录启动此命令：
- en: '[PRE27]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This command creates an `infra` folder with these files:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令创建一个包含这些文件的 `infra` 文件夹：
- en: '`main.bicep` – The main bicep file that creates a resource group and references
    modules to create more resources.'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.bicep` – 创建资源组并引用模块以创建更多资源的主体 bicep 文件。'
- en: '`main.parameters.json` – A parameters file that is used to pass parameters
    such as the environment name and the location to the `main.bicep` file.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.parameters.json` – 一个参数文件，用于将环境名称和位置等参数传递给 `main.bicep` 文件。'
- en: '`resources.bicep` – This file is referenced by `main.bicep` and contains resources
    such as the ACR instance, the Log Analytics workspace, the Container Apps environment,
    and the Azure key vault that are created.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resources.bicep` – 此文件由 `main.bicep` 引用，并包含创建的资源，如 ACR 实例、日志分析工作区、容器应用环境和
    Azure 密钥保管库。'
- en: '`codebreakercosmos/codebreakercosmos.bicep` – This file is referenced from
    `main.bicep` as well and contains resource information for Azure Cosmos DB, as
    well as an Azure Key Vault secret that’s written to the Azure key vault. The secret
    itself is not part of this file; the secret is retrieved dynamically from the
    Azure Cosmos DB account when creating this resource.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`codebreakercosmos/codebreakercosmos.bicep` – 此文件也被 `main.bicep` 引用，并包含 Azure
    Cosmos DB 的资源信息，以及写入 Azure 密钥保管库的 Azure 密钥保管库密钥。密钥本身不是此文件的一部分；密钥在创建此资源时从 Azure
    Cosmos DB 账户动态检索。'
- en: In case you customize these generated Bicep files, the customized files are
    used by `azd up` or `azd provision` on creating the Azure resources.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这些生成的 Bicep 文件进行自定义，则自定义文件在创建 Azure 资源时由 `azd up` 或 `azd provision` 使用。
- en: With the `bot` and `gamesAPI` projects, `azd infra` also creates an infra folder
    with template files in the AppHost project; for example `gameapis.tmpl.yaml`.
    With these files, the Azure Container Apps instances can be customized; for example,
    by changing CPU and memory sizes or changing the number of replicas that should
    be used. Changing these values, `azd up` or `azd deploy` makes use of these files.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `bot` 和 `gamesAPI` 项目，`azd infra` 还在 AppHost 项目中创建一个包含模板文件的 infra 文件夹；例如
    `gameapis.tmpl.yaml`。使用这些文件，可以自定义 Azure 容器应用实例；例如，通过更改 CPU 和内存大小或更改应使用的副本数量。更改这些值，`azd
    up` 或 `azd deploy` 会使用这些文件。
- en: 'When you open the resource group you previously created with `azd up`, open
    **Deployments** in the **Settings** category. This shows deployments of the resource
    group, as shown in *Figure 6**.16*:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `azd up` 创建的资源组打开时，在**设置**类别中打开**部署**。这显示了资源组的部署，如图 *图 6**.16* 所示：
- en: '![Figure 6.16 – Deployments](img/B21217_06_16.jpg)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 部署](img/B21217_06_16.jpg)'
- en: Figure 6.16 – Deployments
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 部署
- en: The deployments match the Bicep files used. When you open **Related events**,
    you can see all the steps that have been done with these deployments.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 部署与使用的 Bicep 文件匹配。当你打开**相关事件**时，你可以看到使用这些部署所执行的所有步骤。
- en: 'After you don’t need the resources anymore, use this command to delete all
    the resources again:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 当你不再需要这些资源时，使用此命令再次删除所有资源：
- en: '[PRE28]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This tool retrieves the number of Azure resources to delete and asks if this
    should be done – thus, make sure to wait until you can answer yes. After the deletion
    of the resources is complete, which usually takes more than 10 minutes, another
    question is asked if the data from the key vault should be purged. If you don’t
    answer yes to this question, this data can be recovered for 90 days, and during
    that time you cannot create the resource with the same name again until the end
    of this recovery time.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具检索要删除的 Azure 资源数量，并询问是否应该执行此操作——因此，请确保等待直到你可以回答“是”。资源删除完成后，通常需要超过 10 分钟，接下来会询问是否应该清除密钥保管库中的数据。如果你不回答“是”，则这些数据可以在
    90 天内恢复，在此期间，你无法在此恢复时间结束前再次创建具有相同名称的资源。
- en: Summary
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned to create Microsoft Azure resources using the Azure
    CLI, the Azure portal, and .NET Aspire with `azd`. The `gamesAPI` service is now
    running with Microsoft Azure resources using ACR, Azure Container Apps, and the
    Azure Cosmos DB database. When using `azd` together with .NET Aspire, just one
    command was needed to deploy all the services.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了使用 Azure CLI、Azure 门户和 .NET Aspire 的 `azd` 创建 Microsoft Azure 资源。`gamesAPI`
    服务现在正在使用 ACR、Azure 容器应用和 Azure Cosmos DB 数据库运行在 Microsoft Azure 资源上。当使用 `azd`
    与 .NET Aspire 一起时，只需一个命令即可部署所有服务。
- en: Before moving on to the next chapter, let’s configure the client application
    you used in previous chapters to now use the URL from the Azure container app
    instead of the local services, and play some games.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一章之前，让我们配置您在上一章中使用过的客户端应用程序，现在使用 Azure 容器应用的 URL 而不是本地服务，并玩一些游戏。
- en: In this chapter, the Azure key vault was already created. In the next chapter,
    we look into the configuration of the backend services, which includes Azure Key
    Vault, and use Azure App Configuration as a central place for the configuration
    of all `codebreaker` services.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，Azure 密钥保管库已经创建。在下一章中，我们将探讨后端服务的配置，包括 Azure 密钥保管库，并使用 Azure 应用配置作为所有 `codebreaker`
    服务的配置中心。
- en: Further reading
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics discussed in this chapter, you can refer to
    the following links:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章讨论的主题，您可以参考以下链接：
- en: 'Azure round-trip latency statistics with Azure regions: [https://learn.microsoft.com/azure/networking/azure-network-latency](https://learn.microsoft.com/azure/networking/azure-network-latency)'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 与 Azure 区域的往返延迟统计信息：[https://learn.microsoft.com/azure/networking/azure-network-latency](https://learn.microsoft.com/azure/networking/azure-network-latency)
- en: 'Azure Cosmos DB – databases, containers, and items: [https://learn.microsoft.com/azure/cosmos-db/resource-model](https://learn.microsoft.com/azure/cosmos-db/resource-model)'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Cosmos DB – 数据库、容器和项：[https://learn.microsoft.com/azure/cosmos-db/resource-model](https://learn.microsoft.com/azure/cosmos-db/resource-model)
- en: 'Stored procedures, triggers, and user-defined functions: https://learn.microsoft.com/azure/cosmos-db/nosql/how-to-write-stored-procedures-triggers-udfs'
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储过程、触发器和用户定义函数：[https://learn.microsoft.com/azure/cosmos-db/nosql/how-to-write-stored-procedures-triggers-udfs](https://learn.microsoft.com/azure/cosmos-db/nosql/how-to-write-stored-procedures-triggers-udfs)
- en: 'Azure Container Apps: [https://learn.microsoft.com/azure/container-apps/](https://learn.microsoft.com/azure/container-apps/)'
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 容器应用：[https://learn.microsoft.com/azure/container-apps/](https://learn.microsoft.com/azure/container-apps/)
- en: 'Bicep: https://learn.microsoft.com/azure/azure-resource-manager/bicep'
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bicep：[https://learn.microsoft.com/azure/azure-resource-manager/bicep](https://learn.microsoft.com/azure/azure-resource-manager/bicep)
- en: '`azd` reference: [https://learn.microsoft.com/en-gb/azure/developer/azure-developer-cli/reference](https://learn.microsoft.com/en-gb/azure/developer/azure-developer-cli/reference)'
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`azd` 参考：[https://learn.microsoft.com/en-gb/azure/developer/azure-developer-cli/reference](https://learn.microsoft.com/en-gb/azure/developer/azure-developer-cli/reference)'
