- en: Chapter 9. Preparing Xamarin.iOS Apps for Distribution
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 9 章：准备分发 Xamarin.iOS 应用
- en: 'In this chapter, we will discuss activities related to preparing a Xamarin.iOS
    app for distribution and look at the various options for distributing apps. While
    many of the activities we will discuss are an integral part of any iOS app deployment,
    we will try and narrow the scope of our coverage to aspects that are unique to
    developing an app with Xamarin.iOS. We will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论与准备分发 Xamarin.iOS 应用相关的活动，并查看分发应用的多种选项。虽然我们将讨论的活动是任何 iOS 应用部署的组成部分，但我们将尝试缩小覆盖范围，仅涵盖开发
    Xamarin.iOS 应用时独特的方面。我们将涵盖以下主题：
- en: App profiling
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用分析
- en: iOS Build settings for distributing apps
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS 应用分发构建设置
- en: App distribution options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用分发选项
- en: Preparing for distribution
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备分发
- en: 'At this point, our app is built and functioning the way we want; most of the
    work is done. We now turn our attention to preparing our app for distribution.
    This section discusses the following three aspects of preparing an app for distribution:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的应用已经构建并按预期工作；大部分工作已经完成。现在，我们将注意力转向准备应用分发。本节讨论以下三个准备应用分发的方面：
- en: '**App profiling**: Here we will be looking at memory allocation issues and
    performance bottlenecks'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用分析**：在这里，我们将查看内存分配问题和性能瓶颈'
- en: '**iOS Application settings**: Here we will be updating informational settings
    such as version and build numbers'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 应用设置**：在这里，我们将更新版本和构建号等信息设置'
- en: '**iOS Build settings**: Here we will be adjusting settings that affect the
    code being generated based on target devices, desired performance characteristics,
    and deployable size'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 构建设置**：在这里，我们将调整基于目标设备、期望的性能特性和可部署大小而影响的代码生成设置'
- en: Profiling Xamarin.iOS apps
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析 Xamarin.iOS 应用
- en: Profiling allows developers to monitor their apps during execution and identify
    issues related to memory allocation and performance bottlenecks. The activity
    of profiling can be performed throughout the life cycle of developing an app,
    but it is especially beneficial to incorporate profiling into the latter stages
    of the process as a final verification prior to distribution.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 分析允许开发者在应用执行期间监控其应用，并识别与内存分配和性能瓶颈相关的问题。分析活动可以在应用开发的整个生命周期中执行，但将其纳入过程的后期阶段作为分发前的最终验证特别有益。
- en: 'Xamarin.iOS developers have two tools to choose from for profiling apps: MonoTouch
    Profiler and Apple''s Instruments app. We will not replicate the existing documentation
    for these apps but simply provide the following links for reference:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS 开发者可以选择两种工具来分析应用：MonoTouch 分析器和 Apple 的 Instruments 应用。我们不会复制这些应用的现有文档，但会提供以下链接供参考：
- en: '| Tool | URL |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| 工具 | URL |'
- en: '| --- | --- |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| MonoTouch Profiler | [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/monotouch_profiler/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/monotouch_profiler/)
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| MonoTouch 分析器 | [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/monotouch_profiler/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/monotouch_profiler/)
    |'
- en: '| Apple''s Instruments app | [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/walkthrough_Apples_instrument/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/walkthrough_Apples_instrument/)
    |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| Apple 的 Instruments 应用 | [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/walkthrough_Apples_instrument/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/walkthrough_Apples_instrument/)
    |'
- en: iOS Application (Info.plist) settings
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS 应用（Info.plist）设置
- en: 'It''s likely that most of the settings you need to make in `Info.plist` will
    have already been made by the time you are ready to start the distribution process.
    However, there are a few settings you likely need to update, specifically, the
    version and build settings. The following screenshot shows the **iOS Application**
    settings screen:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，当你准备开始分发过程时，你需要在 `Info.plist` 中进行的设置大部分已经完成。但是，你可能需要更新一些设置，特别是版本和构建设置。以下截图显示了
    **iOS 应用** 设置屏幕：
- en: '![iOS Application (Info.plist) settings](img/0838OT_09_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![iOS 应用（Info.plist）设置](img/0838OT_09_04.jpg)'
- en: iOS Build settings
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: iOS 构建设置
- en: Xamarin.iOS provides numerous options to optimize the build process based on
    the devices that are being targeted, the size of the deployable app, and the execution
    speed. The following sections discuss the most important settings related to producing
    a final build for distribution.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS提供了许多选项来优化基于目标设备、可部署应用的大小和执行速度的构建过程。以下几节讨论了与生成最终分发构建最相关的设置。
- en: SDK Options
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SDK选项
- en: The SDK version should be set to the minimum iOS version that the app can be
    deployed to. It's likely that this setting would have already been established
    during the development process.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: SDK版本应设置为应用可以部署到的最低iOS版本。很可能这个设置已经在开发过程中已经确定。
- en: Linker Options
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 链接器选项
- en: The mTouch tool used to build Xamarin.iOS apps includes a linker, where the
    aim of the linker is to reduce the size of the resulting app. The linker accomplishes
    this by performing static analysis on the code in your app, evaluating which classes
    and methods in the referenced assemblies are actually used, and removing classes,
    methods, and properties that are not used.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 用于构建Xamarin.iOS应用的mTouch工具包括一个链接器，链接器的目的是减小最终应用的大小。链接器通过在您的应用中对代码执行静态分析来实现这一点，评估引用组件中哪些类和方法实际上被使用，并删除未使用的类、方法和属性。
- en: 'Options for the linker can be set in **Project Options** | **iOS Build** under
    the **General** tab, as shown in the following screenshot:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在**项目选项** | **iOS构建**下的**常规**选项卡中设置链接器的选项，如下面的截图所示：
- en: '![Linker Options](img/0838OT_09_05.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![链接器选项](img/0838OT_09_05.jpg)'
- en: 'The following options can be set to control the linking process:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 可以设置以下选项来控制链接过程：
- en: '**Don''t link**: This option disables the linker and ensures that all referenced
    assemblies are included without modification. You should note that this is the
    default setting for builds that target the iOS simulator because excluding the
    time-consuming static analysis process saves time. From this, the resulting large
    DLLs can still be deployed relatively quickly to the simulator.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不链接**：此选项禁用链接器并确保所有引用的组件都包含在内，而不进行修改。请注意，这是针对iOS模拟器的构建的默认设置，因为排除耗时的静态分析过程可以节省时间。因此，生成的大型DLL仍然可以相对快速地部署到模拟器。'
- en: '**Link SDK assemblies only**: This option tells the linker to operate on only
    the SDK assemblies (which are the assemblies that ship with Xamarin.iOS). This
    is the default setting for builds that target a device.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅链接SDK组件**：此选项告诉链接器仅对SDK组件（即与Xamarin.iOS一起发货的组件）进行操作。这是针对设备的目标构建的默认设置。'
- en: '**Link all assemblies**: This option tells the linker to operate on the entire
    app as well as on all referenced assemblies. This allows the linker to use a larger
    set of optimizations and results in the smallest possible application. However,
    when the linker runs in this mode, there is a greater chance that it will break
    portions of your code due to false assumptions made by the static analysis process.
    In particular, static analysis can get tripped up through usage of reflection,
    serialization, or any code where a type or member instance is not statically referenced.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**链接所有组件**：此选项告诉链接器对整个应用以及所有引用的组件进行操作。这允许链接器使用更大的优化集，并产生可能的最小应用。然而，当链接器以这种方式运行时，由于静态分析过程中做出的错误假设，它更有可能破坏您的代码的一部分。特别是，静态分析可能会因为反射、序列化或任何类型或成员实例未静态引用的代码而陷入困境。'
- en: 'The following table summarizes the results of linking the two versions of the
    `NationalParks` app produced in [Chapter 6](ch06.html "Chapter 6. The Sharing
    Game"), *The Sharing Game*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了在[第6章](ch06.html "第6章。共享游戏") *共享游戏*中生产的`NationalParks`应用两个版本链接的结果：
- en: '|   | File linking version | PCL version |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '|   | 文件链接版本 | PCL版本 |'
- en: '| --- | --- | --- |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| **Don''t link** | 47.5 MB | 48.4 MB |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| **不链接** | 47.5 MB | 48.4 MB |'
- en: '| **Link SDK assemblies only** | 6.7 MB | 7.3 MB |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| **仅链接SDK组件** | 6.7 MB | 7.3 MB |'
- en: '| **Link all assemblies** | 5.8 MB | 6.4 MB |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| **链接所有组件** | 5.8 MB | 6.4 MB |'
- en: As you can see from the table, the biggest difference in application size is
    achieved when going from **Don't link** to **Link SDK assemblies only**.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如表所示，从**不链接**到**仅链接SDK组件**的转变实现了应用大小最大的差异。
- en: Overriding the linker
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 覆盖链接器
- en: 'The linker provides great benefits as demonstrated in the previous section.
    However, there might be times when you need to override the default behavior of
    the linker as the linker might remove type and member instances that are actually
    used by your app. This will result in runtime exceptions relating to these types
    and/or member not being found. The following table describes three ways to alter
    the behavior of the linker in order to avoid losing important types and members:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 链接器在上一节中展示了其提供的巨大好处。然而，有时你可能需要覆盖链接器的默认行为，因为链接器可能会删除应用实际使用的类型和成员实例。这将导致与这些类型和/或成员未找到相关的运行时异常。以下表格描述了三种改变链接器行为的方法，以避免丢失重要的类型和成员：
- en: '| Technique | Description |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 技术 | 描述 |'
- en: '| --- | --- |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Preserving code | If you determine from testing that the linker is removing
    classes or methods needed by your app, you can explicitly tell the linker to always
    include them by using the `Preserve` attribute on a class and/or method.To preserve
    the entire type use:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '| 保留代码 | 如果你在测试中确定链接器正在删除你的应用所需的类或方法，你可以通过在类和/或方法上使用`Preserve`属性来明确告诉链接器始终包含它们。要保留整个类型，请使用：'
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To preserve a single member use:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要保留单个成员，请使用：
- en: '[PRE1]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '|'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Skipping assemblies | In some cases, you might need to tell the linker to
    skip entire assemblies because you do not have the ability to modify the source
    code (third-party libraries). This can be accomplished by using the command line
    option `linkskip`. For example:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '| 跳过程序集 | 在某些情况下，你可能需要告诉链接器跳过整个程序集，因为你没有修改源代码的能力（第三方库）。这可以通过使用命令行选项`linkskip`来完成。例如：'
- en: '[PRE2]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '|'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Disable **Link Away** | One optimization the linker employs is to remove
    code that is very unlikely to be used on an actual device; those features that
    are marked as unsupported or disallowed. On rare occasions, these features might
    be needed for your app to function. This optimization can be disabled by using
    the command line option `--nolinkaway`. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 禁用**链接移除** | 链接器采用的一种优化是移除在实际设备上非常不可能使用的代码；那些标记为不受支持或禁止的功能。在罕见的情况下，这些功能可能对应用的功能是必需的。此优化可以通过使用命令行选项`--nolinkaway`来禁用。|'
- en: Debugging options
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调试选项
- en: Debugging options should always be disabled for release builds. Enabling debugging
    can result in significantly larger binaries.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 调试选项应始终在发布构建中禁用。启用调试可能导致二进制文件显著增大。
- en: Code generation options
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 代码生成选项
- en: Code generation options control the code being created during the build process
    based on the processor(s) being targeted and the performance characteristics desired.
    The option we have under this setting are explained in the following sections.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成选项控制根据目标处理器和期望的性能特性在构建过程中创建的代码。此设置下的选项将在以下章节中解释。
- en: Supported architectures
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 支持的架构
- en: Supported architectures identify the processor architectures that should be
    supported by the resulting build. The original iPhone through to the iPhone 3G,
    used an ARMv6 CPU. Newer models of iPhone and iPad use either the ARMv7 or ARMv7s
    architecture while the iPhone 5s introduced the use of A7 processor based on the
    ARMv8a architecture.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 支持的架构标识了结果构建应支持的处理器架构。从原始iPhone到iPhone 3G，使用了ARMv6 CPU。较新的iPhone和iPad型号使用ARMv7或ARMv7s架构，而iPhone
    5s引入了基于ARMv8a架构的A7处理器的使用。
- en: ARMv6 has not supported Xcode versions prior to Xcode 4.5\. If you need to build
    for older devices, you will need to use an earlier version of Xcode installed.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ARMv6不支持Xcode 4.5之前的版本。如果你需要为旧设备构建，你需要使用安装的较早版本的Xcode。
- en: LLVM optimizing compiler
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: LLVM优化编译器
- en: 'Xamarin.iOS comes with two different code generation engines: the normal Mono
    code generation engine and the one based on the LLVM optimizing compiler. The
    LLVM engine produces both faster and smaller code than the Mono engine at the
    cost of compile time. Thus, the Mono code generation engine is convenient to use
    as you develop an app, whereas the LLVM engine is preferred for builds that will
    be distributed.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS附带两个不同的代码生成引擎：普通的Mono代码生成引擎和基于LLVM优化编译器的引擎。LLVM引擎在编译时间成本下，比Mono引擎生成更快、更小的代码。因此，当你在开发应用时，Mono代码生成引擎更方便使用，而LLVM引擎则更适合用于将分发构建。
- en: ARM thumb instruction set
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: ARM thumb指令集
- en: The ARM thumb instruction set is a more compact instruction set used by ARM
    processors. By enabling the Thumb support, you can reduce the size of your executable
    at the expense of slower execution times. Thumb is supported by ARMv6, ARMv7,
    and ARMv7s.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: ARM Thumb 指令集是 ARM 处理器使用的更紧凑的指令集。通过启用 Thumb 支持，你可以以牺牲较慢的执行时间为代价来减小可执行文件的大小。Thumb
    由 ARMv6、ARMv7 和 ARMv7s 支持。
- en: Distributing Xamarin.iOS apps
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分发 Xamarin.iOS 应用
- en: Xamarin.iOS supports all of the traditional distribution methods that iOS developers
    have access to. There is a great deal of information about distribution of iOS
    apps on the Xamarin website and the Apple developer website. We make no attempt
    to replicate those comprehensive repositories. The following sections are intended
    to provide a general overview from a Xamarin.iOS perspective.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.iOS 支持所有 iOS 开发者可访问的传统分发方法。Xamarin 网站和 Apple 开发者网站上关于 iOS 应用分发的信息非常丰富。我们并不试图复制那些详尽的资源库。以下章节旨在从
    Xamarin.iOS 的角度提供一个概述。
- en: The Ad Hoc and enterprise distributions
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ad Hoc 和企业分发
- en: The Ad Hoc distribution and enterprise distributions allow an app to be distributed
    without going through the App Store. Ad Hoc is generally used to support testing
    efforts leading up to a general release. Enterprise is used to distribute apps
    that are not intended for the general public, but are instead intended for use
    by users within a single enterprise. In either case, an iOS App Store Package
    (IPA) must be created.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Ad Hoc 分发和企业分发允许应用在不经过 App Store 的情况下进行分发。Ad Hoc 通常用于支持即将发布的测试工作。企业分发用于分发不面向公众的应用，而是面向单个企业内部用户使用。在两种情况下，都必须创建一个
    iOS App Store Package (IPA)。
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Producing an enterprise distribution requires an Enterprise account from Apple
    and an Enterprise Xamarin.iOS license.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 生成企业分发需要 Apple 的企业账户和 Enterprise Xamarin.iOS 许可证。
- en: 'To create an IPA, we will perform the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 IPA 的步骤如下：
- en: Create and install a distribution profile for your app on [developer.apple.com](http://developer.apple.com).
    Detailed instructions for this procedure can be found in the section titled *Creating
    and Installing a Distribution Profile* at [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/).
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 [developer.apple.com](http://developer.apple.com) 上为您的应用创建并安装分发配置文件。有关此过程的详细说明，请参阅
    [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/)
    中的 *创建和安装分发配置文件* 部分。
- en: Set the **Provisioning profile** option to be used for the build of the newly
    installed profile by navigating to **Project Options** | **Build** | **iOS Bundle
    Signing**, as shown in the following screenshot:![The Ad Hoc and enterprise distributions](img/0838OT_09_01.jpg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **项目选项** | **构建** | **iOS 包签名**，设置用于构建新安装配置文件的 **配置文件** 选项，如图所示：![Ad Hoc
    和企业分发](img/0838OT_09_01.jpg)
- en: Set the **Bundle Identifier** option on the app to the same value that was used
    while creating the distribution profile by navigating to **Project Options** |
    **Build** | **iOS Application**, as shown in the following screenshot:![The Ad
    Hoc and enterprise distributions](img/0838OT_09_02.jpg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用的 **Bundle Identifier** 选项设置为在创建分发配置文件时使用的相同值，方法是通过导航到 **项目选项** | **构建**
    | **iOS 应用**，如图所示：![Ad Hoc 和企业分发](img/0838OT_09_02.jpg)
- en: Once the IPA has been created, simply navigate to the IPA in finder, double-click
    on it, and it will be opened in iTunes. iTunes can now be used to sync the app
    on devices.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IPA 创建完成后，只需在 finder 中导航到 IPA，双击它，它将在 iTunes 中打开。现在可以使用 iTunes 在设备上同步应用。
- en: TestFlight distribution
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: TestFlight 分发
- en: '**TestFlight** is a cloud-based app distribution service used to distribute
    pre-released versions of your app. Xamarin Studio provides its integration with
    the **TestFlight** service so that **Ad Hoc** builds can be uploaded to **TestFlight**
    directly from within the IDE. Prior to uploading a build, you must establish an
    account and define the testing team(s) and app within the **TestFlight** service.
    This can be accomplished by [https://www.testflightapp.com](https://www.testflightapp.com).'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**TestFlight**是一个基于云的应用程序分发服务，用于分发应用程序的预发布版本。Xamarin Studio提供了与**TestFlight**服务的集成，以便可以直接从IDE中上传**Ad
    Hoc**构建。在上传构建之前，您必须在**TestFlight**服务中创建一个账户并定义测试团队和应用程序。这可以通过[https://www.testflightapp.com](https://www.testflightapp.com)完成。'
- en: 'To upload a build to TestFlight, perform the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要将构建上传到TestFlight，请执行以下步骤：
- en: Select **Ad Hoc** for the build type and navigate from **Project** | **Publish**
    to **TestFlight** from the main menu.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Ad Hoc**作为构建类型，并从主菜单中的**项目** | **发布**导航到**TestFlight**。
- en: Enter the **API token** and **Team token** values assigned by **TestFlight**
    when you set up your app and team. You can click on the link next to these fields
    to display the appropriate value in a browser.![TestFlight distribution](img/0838OT_09_03.jpg)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**API令牌**和**团队令牌**，这些是在您设置应用程序和团队时由**TestFlight**分配的。您可以点击这些字段旁边的链接，在浏览器中显示相应的值。![TestFlight分发](img/0838OT_09_03.jpg)
- en: Enter **Release notes** to let the testers know what has been fixed and/or added
    in the new release.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**发布说明**，以便让测试者知道新版本中修复了什么以及/或者添加了什么。
- en: Enter **Distribution lists** and turn on **Notify team members** to have an
    e-mail notification sent out with the release notes.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**分发列表**并开启**通知团队成员**，以便在发布说明中发送电子邮件通知。
- en: Select the options, **Replace existing binaries with the same name** and **Upload
    dSYMs**, and click on **Publish**. Xamarin Studio will build the app and upload
    it to TestFlight.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择选项，**替换具有相同名称的现有二进制文件**和**上传dSYMs**，然后点击**发布**。Xamarin Studio将构建应用程序并将其上传到TestFlight。
- en: App Store submission
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: App Store提交
- en: Distributing apps through the App Store is much the same for Xamarin.iOS apps
    as any other iOS app. With the exception of producing a release build, most of
    the work is done outside of Xamarin Studio. You do need to enter the **Provisioning
    Profile** value in the **iOS Bundle Signing** section of the **Project Options**
    dialog box.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过App Store分发应用程序对Xamarin.iOS应用程序来说与其他iOS应用程序几乎相同。除了生成发布构建之外，大部分工作都是在Xamarin
    Studio之外完成的。您需要在**项目选项**对话框的**iOS捆绑签名**部分输入**配置文件**值。
- en: 'The following link provides detailed steps to publish a Xamarin.iOS app to
    the App Store: [http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接提供了将Xamarin.iOS应用程序发布到App Store的详细步骤：[http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/](http://docs.xamarin.com/guides/ios/deployment,_testing,_and_metrics/app_distribution_overview/publishing_to_the_app_store/)。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the activities related to preparing an app for
    distribution, the distribution channels available, and the processes involved
    in distributing an app. In the next chapter, we will look at the same aspects
    of distributing a Xamarin.Android app.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了准备应用程序分发相关的活动、可用的分发渠道以及分发应用程序涉及的过程。在下一章中，我们将探讨分发Xamarin.Android应用程序的相同方面。
