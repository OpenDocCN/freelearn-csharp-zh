["```cs\npublic class SyncCommand : Command\n{\n    #region Properties\n    private readonly IBookmarkService _service;\n    #endregion\n    #region Constructor\n    public SyncCommand(IBookmarkService service, string name, string? \n    description = null)\n        : base(name, description)\n    {\n        _service = service;\n        this.SetHandler(OnSyncCommand);\n    }\n    #endregion\n    #region Options\n    #endregion\n    #region Handler method\n    private async Task OnSyncCommand()\n    {\n    }\n    #endregion\n}\n```", "```cs\n#region Properties\n    private readonly IBookmarkService _service;\n    private readonly IHttpClientFactory _clientFactory;\n#endregion\n#region Constructor\n    public SyncCommand(IHttpClientFactory clientFactory, \n    IBookmarkService service, string name, string? description = null)\n        : base(name, description)\n    {\n        _service = service;\n        _clientFactory = clientFactory;\n        this.SetHandler(OnSyncCommand);\n    }\n#endregion\n```", "```cs\n#region Handler method\n    private async Task OnSyncCommand()\n    {\n        var retrievedBookmarks = _service.GetAll();\n        var serializedRetrievedBookmarks = JsonSerializer.\n        Serialize(retrievedBookmarks);\n        var content = new StringContent(serializedRetrievedBookmarks, \n        Encoding.UTF8, \"application/json\");\n        var client = _clientFactory.CreateClient(\"bookmarkrSyncr\");\n        var response = await client.PostAsync(«sync», content);\n        if (response.IsSuccessStatusCode)\n        {\n            var options = new JsonSerializerOptions\n            {\n                PropertyNameCaseInsensitive = true\n            };\n            var mergedBookmarks = await JsonSerializer.\n            DeserializeAsync<List<Bookmark>>(\n                await response.Content.ReadAsStreamAsync(),\n                options\n            );\n            _service.ClearAll();\n            _service.Import(mergedBookmarks!);\n            Log.Information(\"Successfully synced bookmarks\");\n        }\n        else\n        {\n            switch(response.StatusCode)\n            {\n                case HttpStatusCode.NotFound:\n                    Log.Error(\"Resource not found\"); break;\n                case HttpStatusCode.Unauthorized:\n                    Log.Error(\"Unauthorized access\"); break;\n                default:\n                    var error = await response.Content.\n                    ReadAsStringAsync();\n                    Log.Error($\"Failed to sync bookmarks | {error}\");\n                    break;\n            }\n        }\n    }\n#endregion\n```", "```cs\ndotnet add package Microsoft.Extensions.Http\n```", "```cs\nrootCommand.AddCommand(new SyncCommand(_clientFactory, _service, \"sync\", \"sync local and remote bookmark stores\"));\n```", "```cs\nIHttpClientFactory _clientFactory;\n```", "```cs\n_clientFactory = host.Services.GetRequiredService<IHttpClientFactory>();\n```", "```cs\nservices.AddHttpClient(\"bookmarkrSyncr\", client =>\n{\n    client.BaseAddress = new Uri(\"https://bookmarkrsyncr-api.\n    azurewebsites.net\");\n    client.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n    client.DefaultRequestHeaders.Add(\"User-Agent\", \"Bookmarkr\");\n});\n```", "```cs\ndotnet run sync\n```", "```cs\nnamespace bookmarkr.ServiceAgents;\npublic interface IBookmarkrSyncrServiceAgent\n{\n    Task<List<Bookmark>> SyncBookmarks(List<Bookmark> localBookmarks);\n}\n```", "```cs\nnamespace bookmarkr.ServiceAgents;\npublic class BookmarkrSyncrServiceAgent : IBookmarkrSyncrServiceAgent\n{\n    private readonly IHttpClientFactory _clientFactory;\n    public BookmarkrSyncrServiceAgent(IHttpClientFactory \n    clientFactory)\n    {\n        _clientFactory = clientFactory;\n    }\n    public async Task<List<Bookmark>> Sync(List<Bookmark> localBookmarks)\n    {\n        var serializedRetrievedBookmarks = JsonSerializer.\n        Serialize(localBookmarks);\n        var content = new StringContent(serializedRetrievedBookmarks, \n        Encoding.UTF8, \"application/json\");\n        var client = _clientFactory.CreateClient(\"bookmarkrSyncr\");\n        var response = await client.PostAsync(«sync», content);\n        if (response.IsSuccessStatusCode)\n        {\n            var options = new JsonSerializerOptions\n            {\n                PropertyNameCaseInsensitive = true\n            };\n            var mergedBookmarks = await JsonSerializer.\n            DeserializeAsync<List<Bookmark>>(\n                await response.Content.ReadAsStreamAsync(),\n                options\n            );\n            return mergedBookmarks!;\n        }\n        else\n        {\n            switch(response.StatusCode)\n            {\n                case HttpStatusCode.NotFound:\n                    throw new HttpRequestException($\"Resource not \n                    found: {response.StatusCode}\");\n                case HttpStatusCode.Unauthorized:\n                    throw new HttpRequestException($\"Unauthorized \n                    access: {response.StatusCode}\");\n                default:\n                    var error = await response.Content.\n                    ReadAsStringAsync();\n                    throw new HttpRequestException($\"Failed to sync \n                    bookmarks: {response.StatusCode} | {error}\");\n            }\n        }\n    }\n}\n```", "```cs\npublic class SyncCommand : Command\n{\n    #region Properties\n    private readonly IBookmarkService _service;\n    private readonly IBookmarkrSyncrServiceAgent _serviceAgent;\n    #endregion\n    #region Constructor\n    public SyncCommand(IBookmarkrSyncrServiceAgent serviceAgent, \n    IBookmarkService service, string name, string? description = null)\n        : base(name, description)\n    {\n        _service = service;\n        _serviceAgent = serviceAgent;\n        this.SetHandler(OnSyncCommand);\n    }\n    #endregion\n    #region Options\n    #endregion\n    #region Handler method\n    private async Task OnSyncCommand()\n    {\n        var retrievedBookmarks = _service.GetAll();\n        try\n        {\n            var mergedBookmarks = await _serviceAgent.\n            Sync(retrievedBookmarks);\n            _service.ClearAll();\n            _service.Import(mergedBookmarks!);\n            Log.Information(\"Successfully synced bookmarks\");\n        }\n        catch(HttpRequestException ex)\n        {\n            Log.Error(ex.Message);\n        }\n    }\n    #endregion\n}\n```", "```cs\nservices.AddScoped<IBookmarkrSyncrServiceAgent, BookmarkrSyncrServiceAgent>();\n```", "```cs\nIBookmarkrSyncrServiceAgent _serviceAgent;\n```", "```cs\n_serviceAgent = host.Services.GetRequiredService<IBookmarkrSyncrServiceAgent>();\n```", "```cs\nrootCommand.AddCommand(new SyncCommand(_serviceAgent, _service, \"sync\", \"sync local and remote bookmark stores\"));\n```", "```cs\ndotnet run sync\n```"]