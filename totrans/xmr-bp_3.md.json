["```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ContentPage   \n\n    x:Class=\"Locator.Pages.MainPage\" \n    BackgroundColor=\"White\" \n    Title=\"Welcome\"> \n\n    <ContentPage.Content> \n\n    <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\"> \n        <Grid.RowDefinitions> \n            <RowDefinition Height=\"*\"/> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n            <RowDefinition Height=\"Auto\"/> \n        </Grid.RowDefinitions> \n\n        <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"*\"/> \n        </Grid.ColumnDefinitions> \n\n        <Image x:Name=\"Image\" Source=\"map.png\" HeightRequest=\"120\" WidthRequest=\"120\"  \n                Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n        <Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" HorizontalOptions=\"Center\" Font=\"Arial, 20\" Grid.Row=\"1\" Grid.Column=\"0\"> \n            <Label.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Black\" \n                    WinPhone=\"Black\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Label.TextColor> \n        </Label> \n\n        <Button x:Name=\"LocationButton\" Text=\"{Binding LocationTitle}\" Command=\"{Binding LocationCommand}\" BackgroundColor=\"Silver\" Grid.Row=\"2\" Grid.Column=\"0\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button> \n\n        <Button x:Name=\"ExitButton\" Text=\"{Binding ExitTitle}\" Command=\"{Binding ExitCommand}\" BackgroundColor=\"Silver\" Grid.Row=\"3\" Grid.Column=\"0\"> \n            <Button.TextColor> \n                <OnPlatform x:TypeArguments=\"Color\" \n                    Android=\"Navy\" \n                    WinPhone=\"Blue\" \n                    iOS=\"Black\"> \n                </OnPlatform> \n            </Button.TextColor> \n        </Button>  \n    </Grid> \n\n    </ContentPage.Content> \n\n</ContentPage> \n\n```", "```cs\npublic enum PageNames \n{ \n    MainPage, \n\n    MapPage \n} \n\n```", "```cs\npublic interface INavigationService \n{ \n    Task Navigate(PageNames pageName); \n} \n\n```", "```cs\n    public class NavigationService : INavigationService \n    { \n        #region INavigationService implementation \n\n        public async Task Navigate (PageNames pageName) \n        { \n        } \n\n        #endregion \n    } \n\n```", "```cs\n        public async Task Navigate (PageNames pageName, IDictionary<string, object> navigationParameters) \n        { \n            var page = GetPage (pageName); \n\n            if (page != null)  \n            { \n                var navigablePage = page as INavigableXamarinFormsPage; \n\n                if (navigablePage != null)  \n                { \n                    await IoC.Resolve<NavigationPage> ().PushAsync (page); \n                    navigablePage.OnNavigatedTo (navigationParameters); \n                } \n            } \n        } \n\n        private Page GetPage(PageNames page) \n        { \n            switch(page) \n            { \n                case PageNames.MainPage: \n                    return IoC.Resolve<MainPage> (); \n                case PageNames.MapPage: \n                    return IoC.Resolve<MapPage> (); \n                default: \n                    return null; \n            } \n        } \n\n```", "```cs\npublic void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<MainPage> ().SingleInstance(); \n            builer.RegisterType<MapPage> ().SingleInstance(); \n\n            builer.Register (x => new NavigationPage(x.Resolve<MainPage>())).AsSelf().SingleInstance(); \n\n            builer.RegisterType<NavigationService> ().As<INavigationService>().SingleInstance(); \n        } \n\n```", "```cs\npublic App () \n        { \n            MainPage = IoC.Resolve<NavigationPage> (); \n        } \n\n```", "```cs\npublic class MainPageViewModel : ViewModelBase \n    { \n                #region Private Properties \n\n        private readonly IMethods _methods; \n\n        private string _descriptionMessage = \"Find your location\"; \n\n        private string _locationTitle = \"Find Location\"; \n\n        private string _exitTitle = \"Exit\"; \n\n        private ICommand _locationCommand; \n\n        private ICommand _exitCommand; \n\n        #endregion \n\n} \n\n```", "```cs\n#region Public Properties \n\n        public string DescriptionMessage \n        { \n            get \n            { \n                return _descriptionMessage; \n            } \n\n            set \n            { \n                if (value.Equals(_descriptionMessage)) \n                { \n                    return; \n                } \n\n                _descriptionMessage = value; \n                OnPropertyChanged(\"DescriptionMessage\"); \n            } \n        } \n\n        public string LocationTitle \n        { \n            get \n            { \n                return _locationTitle; \n            } \n\n            set \n            { \n                if (value.Equals(_locationTitle)) \n                { \n                    return; \n                } \n\n                _locationTitle = value; \n                OnPropertyChanged(\"LocationTitle\"); \n            } \n        } \n\n        public string ExitTitle \n        { \n            get \n            { \n                return _exitTitle; \n            } \n\n            set \n            { \n                if (value.Equals(_exitTitle)) \n                { \n                    return; \n                } \n\n                _exitTitle = value; \n                OnPropertyChanged(\"ExitTitle\"); \n            } \n        } \n\n        public ICommand LocationCommand \n        { \n            get \n            { \n                return _locationCommand; \n            } \n\n            set \n            { \n                if (value.Equals(_locationCommand)) \n                { \n                    return; \n                } \n\n                _locationCommand = value; \n                OnPropertyChanged(\"LocationCommand\"); \n            } \n        } \n\n        public ICommand ExitCommand \n        { \n            get \n            { \n                return _exitCommand; \n            } \n\n            set \n            { \n                if (value.Equals(_exitCommand)) \n                { \n                    return; \n                } \n\n                _exitCommand = value; \n                OnPropertyChanged(\"ExitCommand\"); \n            } \n        } \n\n        #endregion \n\n```", "```cs\n        #region Constructors \n\n        public MainPageViewModel (INavigationService navigation) : base (navigation) \n        { \n\n        } \n\n        #endregion \n\n```", "```cs\nbuiler.RegisterType<Xamarin.Forms.Command> ().As<ICommand>().InstancePerDependency(); \n\n```", "```cs\n        #region Constructors \n\n        public MainPageViewModel (INavigationService navigation, Func<Action, ICommand> commandFactory) : base (navigation) \n        { \n            _locationCommand = commandFactory (() => Navigation.Navigate(PageNames.MapPage)); \n        } \n\n        #endregion \n\n```", "```cs\n  locationCommand = commandFactory (() => Navigation.Navigate(PageNames.MapPage)); \n\n```", "```cs\n  locationCommand = new Command (() => Navigation.Navigate(PageNames.MapPage)); \n\n```", "```cs\n    public class PortableModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<MainPageViewModel> ().SingleInstance(); \n\n        } \n    } \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?> \n<ContentPage   \n\n    x:Class=\"Locator.Pages.MapPage\" \n    BackgroundColor=\"White\" \n    Title=\"Map\"> \n\n    <ContentPage.Content> \n\n        <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\"> \n            <Grid.RowDefinitions> \n                <RowDefinition Height=\"*\"/> \n                <RowDefinition Height=\"80\"/> \n                <RowDefinition Height=\"60\"/> \n                <RowDefinition Height=\"60\"/> \n            </Grid.RowDefinitions> \n\n            <Grid.ColumnDefinitions> \n                <ColumnDefinition Width=\"*\"/> \n            </Grid.ColumnDefinitions> \n\n            <maps:Map x:Name=\"MapView\" IsShowingUser=\"true\" Grid.Row=\"0\" Grid.Column=\"0\"/> \n\n            <Label x:Name=\"AddressLabel\" Text=\"{Binding Address}\" TextColor=\"Black\" Grid.Row=\"1\" Grid.Column=\"0\"/> \n\n            <Button x:Name=\"GeolocationButton\" Text=\"{Binding GeolocationButtonTitle}\"  \n                Command=\"{Binding GeolocationCommand}\" Grid.Row=\"2\" Grid.Column=\"0\"/> \n\n            <Button x:Name=\"NearestAddressButton\" Text=\"Find Nearest Address\"  \n                Command=\"{Binding NearestAddressCommand}\" Grid.Row=\"3\" Grid.Column=\"0\"/> \n        </Grid> \n\n    </ContentPage.Content> \n\n</ContentPage> \n\n```", "```cs\n    public interface IGeolocator \n    { \n        Subject<IPosition> Positions { get; set; }  \n\n        void Start(); \n\n        void Stop(); \n    } \n\n```", "```cs\npublic interface IPosition \n    { \n        double Latitude {get; set;} \n\n        double Longitude {get; set;} \n    } \n\n```", "```cs\n    public class GeolocatorIOS : IGeolocator \n    { \n        public Subject<IPosition> Positions { get; set; }  \n    } \n\n```", "```cs\n    using CoreLocation; \n\n```", "```cs\npublic GeolocatorIOS() \n        { \n            Positions = new Subject<IPosition> (); \n\n            locationManager = new CLLocationManager(); \n            locationManager.PausesLocationUpdatesAutomatically = false;  \n\n            // iOS 8 has additional permissions requirements \n            if (UIDevice.CurrentDevice.CheckSystemVersion (8, 0))  \n            { \n                locationManager.RequestWhenInUseAuthorization (); \n            } \n\n            if (UIDevice.CurrentDevice.CheckSystemVersion (9, 0))  \n            { \n                locationManager.AllowsBackgroundLocationUpdates = true; \n            } \n        } \n\n```", "```cs\nAllowsBackgroundLocationUpdates = true \n\n```", "```cs\nif (UIDevice.CurrentDevice.CheckSystemVersion (8, 0))  \n            { \n                locationManager.RequestWhenInUseAuthorization (); \n            }  \n\n```", "```cs\n        private void handleLocationsUpdated (object sender, CLLocationsUpdatedEventArgs e) \n        { \n            var location = e.Locations.LastOrDefault (); \n            if (location != null) \n            { \n                Console.WriteLine (\"Location updated, position: \" + location.Coordinate.Latitude + \"-\" + location.Coordinate.Longitude); \n\n                // fire our custom Location Updated event \n                Positions.OnNext(new Position() \n                    { \n                        Latitude = location.Coordinate.Latitude, \n                        Longitude = location.Coordinate.Longitude, \n                    }); \n            } \n        } \n\n```", "```cs\n  <key>NSLocationAlwaysUsageDescription</key> \n  <string>Can we use your location</string> \n  key>NSLocationWhenInUseUsageDescription</key> \n  <string>We are using your location</string> \n\n```", "```cs\n        public void Start() \n        { \n            if (CLLocationManager.LocationServicesEnabled)  \n            { \n                locationManager.DesiredAccuracy = 1; \n                locationManager.LocationsUpdated += handleLocationsUpdated; \n                locationManager.StartUpdatingLocation(); \n            } \n        } \n\n        public void Stop() \n        { \n            locationManager.LocationsUpdated -= handleLocationsUpdated; \n            locationManager.StopUpdatingLocation(); \n        } \n\n```", "```cs\npublic void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<GeolocatorIOS>().As<IGeolocator>().SingleInstance(); \n        } \n\n```", "```cs\npublic MapPageViewModel (INavigationService navigation, IGeolocator geolocator, Func<Action, ICommand> commandFactory,  \n            IGeocodingWebServiceController geocodingWebServiceController) : base (navigation) \n        { \n            _geolocator = geolocator; \n            _geocodingWebServiceController = geocodingWebServiceController; \n\n            _nearestAddressCommand = commandFactory(() => FindNearestSite()); \n            _geolocationCommand = commandFactory(() => \n            { \n                if (_geolocationUpdating) \n                { \n                    geolocator.Stop(); \n                } \n                else \n                { \n                    geolocator.Start(); \n                } \n\n                GeolocationButtonTitle = _geolocationUpdating ? \"Start\" : \"Stop\"; \n                _geolocationUpdating = !_geolocationUpdating; \n            }); \n\n            _positions = new List<IPosition> (); \n\n            LocationUpdates = new Subject<IPosition> (); \n            ClosestUpdates = new Subject<IPosition> (); \n        } \n\n```", "```cs\n_geolocator = geolocator; \n\n```", "```cs\nprivate readonly IGeolocator _geolocator; \n\n```", "```cs\n#region Private Properties \n\nprivate IDisposable _subscriptions; \n\nprivate readonly IGeolocator _geolocator; \n\nprivate string _address; \n\n#endregion \n\n```", "```cs\n        public void OnAppear() \n        { \n            _subscriptions = _geolocator.Positions.Subscribe (x =>  \n                { \n                    _currentPosition = x; \n                    LocationUpdates.OnNext(x); \n                }); \n        }  \n\n        public void OnDisppear() \n        { \n            geolocator.Stop (); \n\n            if (subscriptions != null)  \n            { \n                subscriptions.Dispose (); \n            } \n        } \n\n```", "```cs\n#region Public Properties \n\n        public string Address \n        { \n            get \n            { \n                return address; \n            } \n\n            set \n            { \n                if (value.Equals(address)) \n                { \n                    return; \n                } \n\n                address = value; \n                OnPropertyChanged(\"Address\"); \n            } \n        } \n\n        #endregion \n\n```", "```cs\n<Label x:Name=\"AddressLabel\" Text=\"{Binding Address}\" Grid.Row=\"1\" Grid.Column=\"0\"/>  \n\n```", "```cs\nprivate MapPageViewModel viewModel; \n\n        private IDisposable locationUpdateSubscriptions; \n\n        private IDisposable closestSubscriptions; \n\n        private Geocoder geocoder; \n\n        public MapPage () \n        { \n            InitializeComponent (); \n        } \n\n        public MapPage (MapPageViewModel model) \n        { \n            viewModel = model; \n            BindingContext = model; \n            InitializeComponent (); \n\n            Appearing += handleAppearing; \n            Disappearing += handleDisappearing; \n\n            geocoder = new Geocoder (); \n        } \n\n```", "```cs\n        private void HandleDisappearing (object sender, EventArgs e) \n        { \n            viewModel.OnDisppear (); \n\n            if (locationUpdateSubscriptions != null)  \n            { \n                locationUpdateSubscriptions.Dispose (); \n            } \n\n            if (closestSubscriptions != null)  \n            { \n                closestSubscriptions.Dispose (); \n            } \n        } \n\n        private void HandleAppearing (object sender, EventArgs e) \n        { \n            viewModel.OnAppear (); \n\n            locationUpdateSubscriptions = viewModel.LocationUpdates.Subscribe (LocationChanged); \n        } \n\n```", "```cs\nprivate void LocationChanged (IPosition position) \n        { \n            try  \n            { \n                var formsPosition = new Xamarin.Forms.Maps.Position(position.Latitude, position.Longitude); \n\n                geocoder.GetAddressesForPositionAsync(formsPosition) \n                        .ContinueWith(_ => \n                        { \n                            var mostRecent = _.Result.FirstOrDefault(); \n                            if (mostRecent != null) \n                            { \n                                viewModel.Address = mostRecent; \n                            } \n                        }) \n                        .ConfigureAwait(false); \n            } \n            catch (Exception e)  \n            { \n                System.Diagnostics.Debug.WriteLine (\"MapPage: Error with moving map region - \" + e); \n            } \n        } \n\n```", "```cs\nMapView.MoveToRegion (MapSpan.FromCenterAndRadius (formsPosition, Distance.FromMiles (0.3))); \n\n```", "```cs\n    public class IOSModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<GeolocatorIOS>().As<IGeolocator>().SingleInstance(); \n        } \n    } \n\n```", "```cs\n[Register (\"AppDelegate\")] \n    public partial class AppDelegate : global::Xamarin.Forms.Platform.iOS.FormsApplicationDelegate \n    { \n        public override bool FinishedLaunching (UIApplication app, NSDictionary options) \n        { \n            global::Xamarin.Forms.Forms.Init (this, bundle); \n            global::Xamarin.FormsMaps.Init (this, bundle); \n\n            initIoC (); \n\n            LoadApplication (new App ()); \n\n            return base.FinishedLaunching (app, options); \n        } \n\n        private void initIoC() \n        { \n            IoC.CreateContainer (); \n            IoC.RegisterModule (new IOSModule()); \n            IoC.RegisterModule (new XamFormsModule()); \n            IoC.RegisterModule (new PortableModule()); \n            IoC.StartContainer (); \n        } \n    } \n\n```", "```cs\npublic class GeolocatorDroid : IGeolocator, ILocationListener \n    { \n        private string provider = string.Empty; \n\n        public Subject<IPosition> Positions { get; set; } \n\n        #region ILocationListener implementation \n\n        public void OnLocationChanged (Location location) \n        { \n            Positions.OnNext (new Position ()  \n                { \n                    Latitude = location.Latitude, \n                    Longitude = location.Longitude \n                }); \n        } \n\n        public void OnProviderDisabled (string provider) \n        { \n            Console.WriteLine (provider + \" disabled by user\"); \n        } \n\n        public void OnProviderEnabled (string provider) \n        { \n            Console.WriteLine (provider + \" disabled by user\"); \n        } \n\n        public void OnStatusChanged (string provider, Availability status, Bundle extras) \n        { \n            Console.WriteLine (provider + \" disabled by user\"); \n        } \n\n        #endregion \n} \n\n```", "```cs\npublic class GeolocatorDroid : Object, IGeolocator, ILocationListener \n\n```", "```cs\nprivate LocationManager locationManager; \n\n        public GeolocatorDroid() \n        { \n            Positions = new Subject<IPosition> (); \n\n            locationManager = (LocationManager)Application.Context.GetSystemService(Context.LocationService); \n            provider = LocationManager.NetworkProvider; \n        } \n\n```", "```cs\npublic void Start() \n        { \n            if (locationManager.IsProviderEnabled(provider)) \n            { \n                locationManager.RequestLocationUpdates (provider, 2000, 1, this); \n            } \n            else \n            { \n                Console.WriteLine(provider + \" is not available. Does the device have location services enabled?\"); \n            } \n        } \n\n        public void Stop() \n        { \n            locationManager.RemoveUpdates (this); \n        } \n\n```", "```cs\n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<GeolocatorDroid>().As<IGeolocator>().SingleInstance(); \n        } \n\n```", "```cs\n[Activity (Label = \"Locator.Droid\", Icon = \"@drawable/icon\", MainLauncher = true, ConfigurationChanges = ConfigChanges.ScreenSize | ConfigChanges.Orientation)] \n    public class MainActivity : global::Xamarin.Forms.Platform.Android.FormsApplicationActivity \n    { \n        protected override void OnCreate (Bundle bundle) \n        { \n            base.OnCreate (bundle); \n\n            global::Xamarin.Forms.Forms.Init (this, bundle); \n            global::Xamarin.FormsMaps.Init (this, bundle); \n\n            LoadApplication (new App ()); \n        } \n\n        private void initIoC() \n        { \n            IoC.CreateContainer (); \n            IoC.RegisterModule (new DroidModule()); \n            IoC.RegisterModule (new XamFormsModule()); \n            IoC.RegisterModule (new PortableModule()); \n            IoC.StartContainer (); \n        } \n    } \n\n```", "```cs\n        <application android:label=\"Locator\"> \n        <meta-data android:name=\"com.google.android.maps.v2.API_KEY\" android:value=\"YOUR-API-KEY\" /> \n        <meta-data android:name=\"com.google.android.gms.version\" android:value=\"@integer/google_play_services_version\" /> \n    </application> \n\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" /> \n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /> \n    <uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />  \n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /> \n\n```", "```cs\n    public interface IMethods \n    { \n        void Exit(); \n    } \n\n```", "```cs\n    public class IOSMethods \n    { \n        public void Exit() \n        { \n            UIApplication.SharedApplication.PerformSelector(new ObjCRuntime.Selector(\"terminateWithSuccess\"), null, 0f); \n        } \n    } \n\n```", "```cs\n\npublic void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<GeolocatorIOS>().As<IGeolocator>().SingleInstance(); \n            builer.RegisterType<IOSMethods>().As<IMethods>().SingleInstance(); \n        } \n\n```", "```cs\n\n public class DroidMethods \n    { \n        public void Exit() \n        { \n            Android.OS.Process.KillProcess(Android.OS.Process.MyPid()); \n        } \n    } \n\n```", "```cs\npublic void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<GeolocatorDroid>().As<IGeolocator>().SingleInstance(); \n            builer.RegisterType<DroidMethods>().As<IMethods>().SingleInstance(); \n        } \n\n```", "```cs\npublic MainPageViewModel (INavigationService navigation, Func<Action, ICommand> commandFactory, \n            IMethods methods) : base (navigation) \n        { \n            exitCommand = commandFactory (() => methods.Exit()); \n            locationCommand = commandFactory (() => Navigation.Navigate(PageNames.MapPage)); \n        } \n\n```", "```cs\npublic class GeolocatorWinPhone : IGeolocator \n        { \n            public Subject<IPosition> Positions { get; set; } \n\n            Geolocator _geolocator; \n\n            public GeolocatorWinPhone() \n            { \n                Positions = new Subject<IPosition>(); \n\n                geolocator = new Geolocator(); \n                _geolocator.DesiredAccuracyInMeters = 50; \n            } \n        } \n\n```", "```cs\ngeolocator.DesiredAccuracyInMeters = 50; \n\n```", "```cs\npublic async void Start() \n        { \n            try \n            { \n               var geoposition = await _geolocator.GetGeopositionAsync( \n                    maximumAge: TimeSpan.FromMinutes(5), \n                    timeout: TimeSpan.FromSeconds(10) \n                ); \n\n                _geolocator.PositionChanged += geolocatorPositionChanged; \n\n                // push a new position into the sequence \n                Positions.OnNext(new Position() \n                    { \n                        Latitude = geoposition.Coordinate.Latitude, \n                        Longitude = geoposition.Coordinate.Longitude \n                    }); \n            } \n            catch (Exception ex) \n            { \n                Console.WriteLine(\"Error retrieving geoposition - \" + ex); \n            } \n\n        } \n\n```", "```cs\n        private void GeolocatorPositionChanged(Geolocator sender, PositionChangedEventArgs args) \n        { \n            // push a new position into the sequence \n            Positions.OnNext(new Position () \n                { \n                    Latitude = args.Position.Coordinate.Latitude, \n                    Longitude = args.Position.geoposition.Coordinate.Longitude \n                }); \n        } \n\n```", "```cs\n        public void Stop() \n        { \n            // remove event handler \n            _geolocator.PositionChanged -= GeolocatorPositionChanged; \n        } \n\n```", "```cs\n    public class WinPhoneModule : IModule \n    { \n        public void Register(ContainerBuilder builer) \n        { \n            builer.RegisterType<GeolocatorWinPhone>().As<IGeolocator>().SingleInstance(); \n            builer.RegisterType<WinPhoneMethods>().As< IMethods>().SingleInstance(); \n        } \n    } \n\n```", "```cs\n public class WinPhoneMethods : IMethods \n        { \n            public void Exit() \n            { \n                Application.Current.Terminate(); \n            } \n        } \n\n```", "```cs\n<forms:WindowsPhonePage \n    x:Class=\"Locator.WinPhone.MainPage\" \n\n    mc:Ignorable=\"d\" \n    Background=\"{ThemeResource ApplicationPageBackgroundThemeBrush}\"> \n</forms:WindowsPhonePage> \n\n```", "```cs\npublic MainPage() \n    { \n        InitializeComponent(); \n\n        InitIoC(); \n\n        NavigationCacheMode = NavigationCacheMode.Required; \n        LoadApplication(new Locator.App()); \n    } \n\n    private void InitIoC() \n    { \n        IoC.CreateContainer(); \n            IoC.RegisterModule(new WinPhoneModule()); \n            IoC.RegisterModule(new SharedModule(true)); \n            IoC.RegisterModule(new XamFormsModule()); \n            IoC.RegisterModule(new PortableModule()); \n            IoC.StartContainer(); \n\n    } \n\n```", "```cs\nif (rootFrame == null) \n        { \n            rootFrame = new Frame(); \n\n            rootFrame.CacheSize = 1; \n\n            if (e.PreviousExecutionState == ApplicationExecutionState.Terminated) \n            { \n            } \n\n            Xamarin.Forms.Forms.Init(e); \n            InTheHand.FormsMaps.Init(\"YOUR-API-KEY\"); \n\n            Window.Current.Content = rootFrame; \n        } \n\n```", "```cs\n{ \n   \"results\" : [ \n      { \n         \"address_components\" : [ \n            { \n               \"long_name\" : \"1600\", \n               \"short_name\" : \"1600\", \n               \"types\" : [ \"street_number\" ] \n            }, \n            { \n               \"long_name\" : \"Amphitheatre Parkway\", \n               \"short_name\" : \"Amphitheatre Pkwy\", \n               \"types\" : [ \"route\" ] \n            }, \n            { \n               \"long_name\" : \"Mountain View\", \n               \"short_name\" : \"Mountain View\", \n               \"types\" : [ \"locality\", \"political\" ] \n            }, \n            { \n               \"long_name\" : \"Santa Clara County\", \n               \"short_name\" : \"Santa Clara County\", \n               \"types\" : [ \"administrative_area_level_2\", \"political\" ] \n            }, \n\n```", "```cs\npublic sealed class AddressComponentContract \n    { \n        #region Public Properties \n\n        public string long_name { get; set; } \n\n        public string short_name { get; set; } \n\n        public List<string> types { get; set; } \n\n        #endregion \n    } \n\n```", "```cs\n    public sealed class GeocodingContract \n    { \n        #region Public Properties \n\n        public List<GeocodingResultContract> results { get; set; } \n\n        public string status { get; set; } \n\n        #endregion \n    } \n\n```", "```cs\n    public sealed class GeocodingResultContract \n    { \n        #region Public Properties \n\n        public List<AddressComponentContract> address_components { get; set; } \n\n        public string formatted_address { get; set; } \n\n        public GeometryContract geometry { get; set; } \n\n        public string place_id { get; set; } \n\n        public List<string> types { get; set; } \n\n        #endregion \n    } \n\n```", "```cs\npublic interface IGeocodingWebServiceController \n    { \n        #region Methods and Operators \n\n        IObservable<GeocodingContract> GetGeocodeFromAddressAsync (string address, string city, string state); \n\n        #endregion \n    } \n\n```", "```cs\npublic sealed class SharedModule : IModule \n    { \n        #region Fields \n\n        private bool isWindows; \n\n        #endregion \n\n        #region Constructors and Destructors \n\n        public SharedModule(bool isWindows) \n        { \n            isWindows = isWindows; \n        } \n\n        #endregion \n\n        #region Public Methods and Operators \n\n        public void Register(ContainerBuilder builder) \n        { \n            HttpClientHandler clientHandler = isWindows ? new HttpClientHandler() : new NativeMessageHandler(); \n            clientHandler.UseCookies = false; \n            clientHandler.AutomaticDecompression = DecompressionMethods.Deflate | DecompressionMethods.GZip; \n            builder.Register(cb => clientHandler).As<HttpClientHandler>().SingleInstance(); \n        } \n\n        #endregion \n    } \n\n```", "```cs\nprivate void InitIoC() \n        { \n            IoC.CreateContainer (); \n            IoC.RegisterModule (new IOSModule()); \n            IoC.RegisterModule (new SharedModule(false)); \n            IoC.RegisterModule (new XamFormsModule()); \n            IoC.RegisterModule (new PortableModule()); \n            IoC.StartContainer (); \n        } \n\n```", "```cs\npublic sealed class GeocodingWebServiceController : IGeocodingWebServiceController \n    { \n        #region Fields \n\n        /// <summary> \n        /// The client handler. \n        /// </summary> \n        private readonly HttpClientHandler clientHandler; \n\n        #endregion \n\n#region Constructors and Destructors \n\n        public GeocodingWebServiceController (HttpClientHandler clientHandler) \n        { \n            clientHandler = clientHandler; \n        } \n\n        #endregion  \n\n     } \n\n```", "```cs\n#region Public Methods  \n\n        public IObservable<GeocodingContract> GetGeocodeFromAddressAsync(string address, string city, string state) \n        { \n            var authClient = new HttpClient(_clientHandler); \n\n            var message = new HttpRequestMessage(HttpMethod.Get, new Uri(string.Format(ApiConfig.GoogleMapsUrl, address, city, state))); \n\n            return Observable.FromAsync(() => authClient.SendAsync(message, new CancellationToken(false))) \n                .SelectMany(async response => \n                    { \n                        if (response.StatusCode != HttpStatusCode.OK) \n                        { \n                            throw new Exception(\"Respone error\"); \n                        } \n\n                        return await response.Content.ReadAsStringAsync(); \n                    }) \n                .Select(json => JsonConvert.DeserializeObject<GeocodingContract>(json)); \n        } \n\n        #endregion \n\n```", "```cs\nvar newObservable = list.Select (x => x);  \n\n```", "```cs\nvar newObservable = list.Select (x => x.Name);  \n\n```", "```cs\nApiConfig.GoogleMapsUrl \n\n```", "```cs\n  <!-- url --> \n  <data name=\"GoogleMapsUrl\" xml:space=\"preserve\"> \n    <value>https://maps.googleapis.com/maps/api/geocode/json?address={0},+{1},+{2}&amp;key={YOUR-BROSWER-API-KEY}</value> \n  </data> \n\n```", "```cs\nbuiler.RegisterType<GeocodingWebServiceController> ().As<IGeocodingWebServiceController>().SingleInstance();  \n\n```", "```cs\n        #region Constructors \n\n        public MapPageViewModel (INavigationService navigation, IGeolocator geolocator,  \n            IGeocodingWebServiceController geocodingWebServiceController) : base (navigation) \n        { \n            _geolocator = geolocator; \n            _geocodingWebServiceController= geocodingWebServiceController; \n\n            LocationUpdates = new Subject<IPosition> (); \n        } \n\n        #endregion \n\n```", "```cs\n        #region Constants \n\n        private IDictionary<int, string[]> addresses = new Dictionary<int, string[]>() \n        { \n            {0, new string[] { \"120 Rosamond Rd\", \"Melbourne\", \"Victoria\" }}, \n            {1, new string[] { \"367 George Street\", \"Sydney\", \"New South Wales\" }}, \n            {2, new string[] { \"790 Hay St\", \"Perth\", \"Western Australi\" }}, \n            {3, new string[] { \"77-90 Rundle Mall\", \"Adelaide\", \"South Australia\" }}, \n            {4, new string[] { \"233 Queen Street\", \"Brisbane\", \"Queensland\" }}, \n        }; \n\n        #endregion  \n\n```", "```cs\n    internal interface INavigableXamarinFormsPage \n    { \n        void OnNavigatedTo(IDictionary<string, object> navigationParameters); \n    } \n\n```", "```cs\npublic partial class MainPage : ContentPage, INavigableXamarinFormsPage  \n    { \n        public void OnNavigatedTo(IDictionary<string, object> navigationParameters) \n        { \n        } \n    } \n\npublic partial class MapPage : ContentPage, INavigableXamarinFormsPage \n    { \n        public void OnNavigatedTo(IDictionary<string, object> navigationParameters) \n        { \n        } \n    } \n\n```", "```cs\n    public interface INavigationService \n    { \n        Task Navigate (PageNames pageName, IDictionary<string, object> navigationParameters); \n    } \n\n```", "```cs\n        #region INavigationService implementation \n\n        public async Task Navigate (PageNames pageName, IDictionary<string, object> navigationParameters) \n        { \n            var page = getPage (pageName); \n\n            if (page != null)  \n            { \n                var navigablePage = page as INavigableXamarinFormsPage; \n\n                if (navigablePage != null)  \n                { \n                    await IoC.Resolve<NavigationPage> ().PushAsync (page); \n                    navigablePage.OnNavigatedTo (); \n                } \n            } \n        } \n\n        #endregion \n\n```", "```cs\n        public void OnShow(IDictionary<string, object> parameters) \n        { \n            LoadAsync(parameters).ToObservable().Subscribe( \n                result => \n                { \n                    // we can add things to do after we load the view model \n                },  \n                ex => \n                { \n                    // we can handle any areas from the load async function \n                }); \n        } \n\n        protected virtual async Task LoadAsync(IDictionary<string, object> parameters) \n        { \n        } \n\n```", "```cs\npublic static class XamarinNavigationExtensions \n    { \n        #region Public Methods and Operators \n\n        // for ContentPage \n        public static void Show(this ContentPage page, IDictionary<string, object> parameters) \n        { \n            var target = page.BindingContext as ViewModelBase; \n            if (target != null) \n            { \n                target.OnShow(parameters); \n            } \n        } \n\n        #endregion \n\n    } \n\n```", "```cs\n        public void OnNavigatedTo(IDictionary<string, object> navigationParameters) \n        { \n            this.Show (navigationParameters); \n        } \n\n```", "```cs\n#region Private Properties \n\nprivate IList<IPosition> _positions; \n\nprivate Position _currentPosition; \n\nprivate string _closestAddress; \n\nprivate int _geocodesComplete = 0; \n\n#endregion \n\n```", "```cs\npublic string ClosestAddress \n        { \n            get \n            { \n                return _closestAddress; \n            } \n\n            set \n            { \n                if (value.Equals(_closestAddress)) \n                { \n                    return; \n                } \n\n                _closestAddress = value; \n                OnPropertyChanged(\"ClosestAddress\"); \n            } \n        } \n\n```", "```cs\n#region Subjects \n\npublic Subject<IPosition> ClosestUpdates { get; set; }  \n\n#endregion \n\n```", "```cs\nClosestUpdates = new Subject<IPosition> (); \n\n```", "```cs\n        public async Task GetGeocodeFromAddress(string address, string city, string state) \n        { \n            var geoContract = await _geocodingWebServiceController.GetGeocodeFromAddressAsync(address, city, state); \n\n            if (geoContract != null && geoContract.results != null && geoContract.results.Count > 0) \n            { \n                var result = geoContract.results.FirstOrDefault(); \n\n                if (result != null && result.geometry != null && result.geometry.location != null) \n                { \n                    _geocodesComplete++; \n\n                    _positions.Add(new Position() \n                        { \n                            Latitude = result.geometry.location.lat, \n                            Longitude = result.geometry.location.lng, \n                            Address = string.Format(\"{0}, {1}, {2}\", address, city, state) \n                        }); \n\n                    // once all geocodes are found, find the closest \n                    if ((_geocodesComplete == _positions.Count) && _currentPosition != null) \n                    { \n                        FindNearestSite(); \n                    } \n                } \n            } \n        } \n\n```", "```cs\n    public class Position : IPosition \n    { \n        public string Address {get; set;} \n    } \n\n    public interface IPosition \n    { \n        double Latitude {get; set;} \n\n        double Longitude {get; set;} \n\n        public string Address {get; set;} \n    } \n\n```", "```cs\nprivate double DegreesToRadians(double deg)  \n        { \n            return deg * Math.PI / 180; \n        } \n\n        private double PythagorasEquirectangular  \n (double lat1, double lon1, double lat2, double lon2) \n        { \n            lat1 = DegreesToRadians(lat1); \n            lat2 = DegreesToRadians(lat2); \n            lon1 = DegreesToRadians(lon1); \n            lon2 = DegreesToRadians(lon2); \n\n            // within a 10km radius \n            var radius = 10; \n            var x = (lon2 - lon1) * Math.Cos((lat1 + lat2) / 2); \n            var y = (lat2 - lat1); \n            var distance = Math.Sqrt(x * x + y * y) * radius; \n\n            return distance; \n        } \n\n```", "```cs\nprivate void FindNearestSite() \n        { \n            if (_geolocationUpdating) \n            { \n                _geolocationUpdating = false; \n                _geolocator.Stop(); \n                GeolocationButtonTitle = \"Start\"; \n            } \n\n            double mindif = 99999; \n            IPosition closest = null; \n            var closestIndex = 0; \n            var index = 0; \n\n            if (_currentPosition != null) \n            { \n                foreach (var position in _positions) \n                { \n                    var difference = PythagorasEquirectangular(_currentPosition.Latitude, _currentPosition.Longitude, \n                        position.Latitude, position.Longitude); \n\n                    if (difference < mindif) \n                    { \n                        closest = position; \n                        closestIndex = index; \n                        mindif = difference; \n                    } \n\n                    index++; \n                } \n\n                if (closest != null) \n                { \n                    var array = _addresses[closestIndex]; \n                    Address = string.Format(\"{0}, {1}, {2}\", array[0], array[1], array[2]); \n                    ClosestUpdates.OnNext(closest); \n                } \n            } \n        } \n\n```", "```cs\n        protected override async Task LoadAsync (IDictionary<string, object> parameters) \n        { \n            var index = 0; \n\n            for (int i = 0; i < 5; i++) \n            { \n                var array = _addresses [index]; \n                index++; \n\n                GetGeocodeFromAddress(array[0], array[1], array[2]).ConfigureAwait(false); \n            } \n        }  \n\n```", "```cs\nprivate IDisposable _locationUpdateSubscriptions; \n\nprivate IDisposable _closestSubscriptions;  \n\n```", "```cs\nprivate void HandleDisappearing (object sender, EventArgs e) \n        { \n            _viewModel.OnDisppear (); \n\n            if (_locationUpdateSubscriptions != null)  \n            { \n                _locationUpdateSubscriptions.Dispose (); \n            } \n\n            if (_closestSubscriptions != null)  \n            { \n                _closestSubscriptions.Dispose (); \n            } \n        } \n\n        private void HandleAppearing (object sender, EventArgs e) \n        { \n            _viewModel.OnAppear (); \n\n            _locationUpdateSubscriptions = _viewModel.LocationUpdates.Subscribe (LocationChanged); \n            _closestSubscriptions = _viewModel.ClosestUpdates.Subscribe (ClosestChanged); \n        } \n\n```", "```cs\nprivate void ClosestChanged (IPosition position) \n        { \n            try \n            { \n                var pin = new Pin() \n                { \n                    Type = PinType.Place, \n                    Position = new Xamarin.Forms.Maps.Position (position.Latitude, position.Longitude), \n                    Label = \"Closest Location\", \n                    Address = position.Address \n                }; \n\n                MapView.Pins.Add(pin); \n\n                MapView.MoveToRegion(MapSpan.FromCenterAndRadius(new Xamarin.Forms.Maps.Position(position.Latitude, position.Longitude) \n                                                                 , Distance.FromMiles(0.3))); \n            } \n            catch (Exception e)  \n            { \n                System.Diagnostics.Debug.WriteLine (\"MapPage: Error with moving pin - \" + e); \n            } \n        } \n\n```"]