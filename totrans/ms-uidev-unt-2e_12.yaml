- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The UI Button Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buttons provided by Unity’s UI system are graphical objects that preutilize
    the Event System we covered in the last chapter. When a Button is placed in a
    scene, it automatically has components added to it that allow the player to interact
    with it. This makes sense because the whole point of a Button is to interact with
    it. Let’s explore how to add and utilize buttons in our games.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating UI Buttons and setting their properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set button transitions that make the button change appearance when it
    is highlighted, pressed, or disabled
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use invisible button zones to allow large tapping areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigating button selection on screen with the keyboard or joystick
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create an onscreen button that looks like it is physically being pressed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading scenes with a button press
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating Button Transition Animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: All the examples shown in the sections before the *Examples* section can be
    found within the Unity project provided in the code bundle. They can be found
    within the scene labeled **Chapter9**.
  prefs: []
  type: TYPE_NORMAL
- en: Each example image has a caption stating the example number within the scene.
  prefs: []
  type: TYPE_NORMAL
- en: In the scene, each example is on its own Canvas, and some of the Canvases are
    deactivated. To view an example on a deactivated Canvas, simply select the checkbox
    next to the Canvas’ name in the Inspector. Each Canvas is also given its own Event
    System. This will cause errors if you have more than one Canvas activated at a
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2009](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2009)'
  prefs: []
  type: TYPE_NORMAL
- en: UI Button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Buttons are UI objects that expect a click from the player. You can create
    a Button by selecting `Button` object with a `Text` child will be placed in the
    scene. As with all other UI objects, if no Canvas or Event System is in the scene
    when you create the `Button`, a `Canvas` and `Event System` will be created for
    you, with the `Canvas` being a parent of your new `Button`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1: Adding a new UI Button to the scene](img/Figure_09.01_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Adding a new UI Button to the scene'
  prefs: []
  type: TYPE_NORMAL
- en: You can delete the child `Text` object if you do not want to have text displaying
    on your `Button`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Button object has three main components: **Rect Transform** (like all other
    UI graphical objects), an **Image** component, and a **Button** component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2: The components of a new UI Button](img/Figure_09.02_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: The components of a new UI Button'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll discuss the **Image** component more thoroughly in the next chapter, but
    for now, just know that the **Image** component determines the look of the Button
    in its standard state.
  prefs: []
  type: TYPE_NORMAL
- en: The Button component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Button` will do when the player attempts to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: The first property of the **Button** component is the **Interactable** property.
    This property determines whether the Button can or cannot be interacted with by
    accepting input from the player. This is turned on by default but can be turned
    off if you want to disable the button.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll see that the `Button`, moves the mouse outside of the `Button`’s Rect
    Transform, and then releases the mouse, the `Button`’s **On Click Event** will
    not register. You set the **On Click** Event the same way we set Events in [*Chapter
    8*](B18327_08.xhtml#_idTextAnchor147).
  prefs: []
  type: TYPE_NORMAL
- en: Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The second property of the **Button** component is the **Transition** property.
    The **Transition** property determines the way the button will visually react
    when the button is in different states. These different states are *not highlighted*
    (or normal), *highlighted*, *pressed*, *selected*, or *disabled*. These transitions
    are performed automatically and do not require coding.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four different types of transitions you can assign: **None**, **Color
    Tint**, **Sprite Swap**, and **Animation**.'
  prefs: []
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Selecting **None** for the **Transition** type would mean that the button will
    not visually change for the different states.
  prefs: []
  type: TYPE_NORMAL
- en: Color Tint
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Color Tint** transition type will make the button change color based on
    its state. You assign **Normal Color**, **Highlighted Color**, **Pressed Color**,
    **Selected Color**, and **Disabled Color**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, you can see that the button changes to green when
    the mouse is hovering over it (hence, highlighting it) and turns red as the mouse
    is being pressed down on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3: Color Swap Example in the Chapter9 scene](img/Figure_09.03_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Color Swap Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: If you view the preceding example, you’ll notice that the button turns yellow
    after it has been clicked. This is because it is *selected*. To return it to the
    normal color, click on any area outside of the button.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a Button to enter the state that will give it its **Disabled Color**, the
    Button’s **Interactable** property must be disabled. In the following screenshot,
    you will see how the button changes when the **Interactable** property is toggled
    on and off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4: Disabled Button Example in the Chapter9 scene](img/Figure_09.04_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Disabled Button Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'You also can select the `Button` itself, so the Button’s image will change
    color when it is highlighted, pressed, or disabled. However, you can choose to
    make a secondary graphic the **Target Graphic**. This means the item assigned
    to the **Target Graphic** will change color based on the interaction of the button.
    In the following example, a secondary image is assigned as the **Target Graphic**.
    You’ll see the button does not undergo transitions; instead, the star image undergoes
    transitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5: Target Graphic Example in the Chapter9 scene](img/Figure_09.05_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: Target Graphic Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: It’s important to note that these colors will tint the **Target Graphic**’s
    image. So, it essentially puts a color overlay on top of the **Target Graphic**.
    If the image of the **Target Graphic** is black, these tints will not appear to
    have any effect on the image. Note that the default **Normal Color** is white.
    Putting a white tint on an image does not change the color of the image.
  prefs: []
  type: TYPE_NORMAL
- en: The `1`, this property will increase the alpha of the graphic. This applies
    to all (including the normal) states.
  prefs: []
  type: TYPE_NORMAL
- en: The **Fade Duration** property is the time (in seconds) it takes to fade between
    the state colors.
  prefs: []
  type: TYPE_NORMAL
- en: Sprite Swap
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Sprite Swap** transition type will make the button change to different
    images for different states.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll note that there is no property to assign a sprite for the normal state.
    This is because the normal state will just use the sprite assigned to the **Image**
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The sprite sheet we imported in [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085),
    has four button images that will be helpful in demonstrating the Sprite Swap Transition:
    the images labeled `uiElements_39`, `uiElements_40`, `uiElements_41`, and `uiElements_42`
    (as shown in the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6: The sprites we will use to demonstrate button Sprite Swap](img/Figure_09.06_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: The sprites we will use to demonstrate button Sprite Swap'
  prefs: []
  type: TYPE_NORMAL
- en: 'To have the button take on these images at the appropriate states, we simply
    need to assign `uiElements_39` to the `uiElements_40` to the `uiElements_41` to
    the `uiElements_39` to the `uiElements_42` to the **Disabled Sprite**. We also
    need to delete the child **Text** object from the button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7: Sprite Swap Example in the Chapter9 scene](img/Figure_09.07_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.7: Sprite Swap Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: Remember, you can view the **Disabled Sprite** by deselecting **Interactable**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A nice sprite swap animation that I always find appealing is applying an image
    of a button that appears down-pressed to the pressed image. For example, I took
    the button on the left and slightly edited it to create the button on the right.
    The change is slight, but I changed it by slightly moving down the top part of
    the button to make it look pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8: The indented button animation sheet](img/Figure_09.08_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.8: The indented button animation sheet'
  prefs: []
  type: TYPE_NORMAL
- en: 'It doesn’t look like much of a difference when viewed side by side. However,
    when the left-hand image is used for **Source Image**, **Highlighted Sprite**,
    **Selected Sprite**, and **Disabled Sprite**, and the right-hand image is used
    for **Pressed Sprite**, the button transitions to show a very nice button-pressing
    animation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9: Pressed Button Example in the Chapter9 scene](img/Figure_09.09_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.9: Pressed Button Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: To see this in action, view `Pressed Button Example Canvas` in `Chapter9Scene`;
    it really is quite satisfying to click.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 11*](B18327_11.xhtml#_idTextAnchor292), we will explore how to
    create an image swap without the button transition property, for something like
    a mute/unmute button.
  prefs: []
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Animation** transition allows the button to animate in its various states.
  prefs: []
  type: TYPE_NORMAL
- en: Animation transition types require an **Animator** component attached to the
    Button. It can add a preexisting set of animations to a Button by dragging it
    onto the Button’s Inspector, or you can make a whole new Animator Controller by
    selecting **Auto Generate Animation**. If you use a preexisting Animator Controller,
    you can simply assign the Animations to the individual states. However, if you
    generate a new Animator Controller, you can select the state from the list of
    Clips in the **Animation** window and edit them from that window. An example of
    making a Button with animated transitions is provided in the *Examples* section
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Buttons have a **Navigation** property that determines the order in which they
    will be highlighted via keyboard or controller inputs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10: The Navigation property on the Button component](img/Figure_09.10_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.10: The Navigation property on the Button component'
  prefs: []
  type: TYPE_NORMAL
- en: Each Button within the scene must have this property set if you want to navigate
    to all the Buttons. If you recall from [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    we discussed the **First Selected** property of the **Event System** component.
    If you have a Button assigned to **First Selected**, that Button will be highlighted
    when you load the scene. If you then navigate through the Buttons with the keyboard,
    the navigation will begin at the Button with the **First Selected** property.
    However, if you do not have a Button assigned as **First Selected**, navigation
    will not start until a button has been selected with the mouse. The next button
    selected is determined by the navigation option you have selected for the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are five **Navigation** options: **None**, **Horizontal**, **Vertical**,
    **Automatic**, and **Explicit**.'
  prefs: []
  type: TYPE_NORMAL
- en: Selecting **None** will disable all keyboard navigation to the specified Button.
    Remember that this is for the individual button, so if you want to disable all
    keyboard navigation, you must select **None** for all Buttons.
  prefs: []
  type: TYPE_NORMAL
- en: '**Horizontal** and **Vertical** are pretty self-explanatory. If a Button has
    its **Navigation** property set to **Horizontal**, when it is selected, the next
    button selected will be chosen horizontally, meaning with the right and left arrows.
    **Vertical** works similarly; this represents the navigation *away* from that
    button, not *to* that button. So, if a button that has **Horizontal** set has
    its navigation property, you can still access that button from another with a
    vertical button.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Automatic** will allow the **Button** to navigate both Horizontally and Vertically,
    as determined automatically by its position relative to the other buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Visualize** button allows you to see a visual representation of the navigation
    setup. Each Button will be connected, with arrows demonstrating which Button will
    be selected after it. Each arrow begins on the side of the button to symbolize
    the directional arrow pressed, and it points at the next button that will be highlighted
    if that arrow is pressed. For example, if an arrow begins on a Button’s right,
    that arrow symbolizes what Button will be selected next if the player presses
    right on the keyboard. The following example shows the visualization of five Buttons,
    all with their **Navigation** property set to **Automatic**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11: Navigation Example in the Chapter9 scene](img/Figure_09.11_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.11: Navigation Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, each Button has a **Color Tint Transition** property
    with the **Highlighted Color** and **Selected Color** assigned to green. The Button
    labeled **1** has been assigned as **First Selected** in the **Event System**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.12: Event System with Button 1 assigned to First Selected](img/Figure_09.12_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.12: Event System with Button 1 assigned to First Selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, when the scene begins playing, it will automatically be highlighted.
    Based on the visualized graph, if the right arrow key is selected on the keyboard
    after the scene loads, the **Button** labeled **2** will be selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.13: Navigation Example in the Chapter9 scene](img/Figure_09.13_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.13: Navigation Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: The last **Navigation** type is **Explicit** and allows for significantly better
    control. With this, you can explicitly define which button will be accessed with
    each individual keyboard press.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.14: The properties of the Explicit Navigation type](img/Figure_09.14_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.14: The properties of the Explicit Navigation type'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s say that you wanted the player to cycle through the buttons in the order
    1-2-3-4-5 and then loop back to 1\. You want this to happen with either the up
    button or the right button. None of the previously mentioned navigation methods
    will allow that. However, you can achieve that with the **Explicit** Navigation
    type. The first step-by-step example of this chapter covers how to create an explicit
    button navigation map.
  prefs: []
  type: TYPE_NORMAL
- en: Invisible button zones
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B18327_02.xhtml#_idTextAnchor024), we discussed tapping zones
    on the screen. Often, in mobile games, tapping anywhere on the screen will cause
    an event. For example, many times when you select outside of a pop-up window,
    it will close. Other examples are when you can tap on the left or right side of
    the screen to move a character back and forth. Tapping on areas of the screen
    may not seem like a button implementation, but it actually is! The buttons are
    just invisible.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s explore the first scenario. If you review the `Close Panel Example` GameObject
    of the `Chapter9` scene, you will see a Panel that appears when an info button
    is pressed, closes when the close button is pressed, and also closes when the
    area outside of the Panel is pressed. This is accomplished by putting a large,
    invisible button behind the Panel. For it to work appropriately, it needs to be
    in front of the info button (blocking raycast to it).
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.15: Close Panel Example in the Chapter9 scene](img/Figure_09.15_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.15: Close Panel Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: It’s a good design choice to include the close button, even if the background
    area will dismiss the Panel. Many people do not intuitively consider tapping outside
    a Panel to be an action that will close it and will spend time looking for the
    close button if you do not provide it.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s explore the second scenario, where the two sides of the screen cause
    different actions. In the `Tap Zone Example GameObject`, tapping the left side
    moves the candy cane to the left, and tapping the right side moves the candy cane
    to the right. Once again, large invisible buttons are being utilized.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16: Tap Zone Example in the Chapter9 scene](img/Figure_09.16_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.16: Tap Zone Example in the Chapter9 scene'
  prefs: []
  type: TYPE_NORMAL
- en: When using these large invisible buttons, it is very important that you consider
    how raycast will be affected by them, even though they are invisible. They will
    block things behind them!
  prefs: []
  type: TYPE_NORMAL
- en: Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the first three examples in this chapter, we will momentarily step away
    from the scene we have been working on to build a new scene that will allow us
    to experiment with button navigation and scene loading. We’ll then pick up where
    we left off with our scene from [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    to add some buttons to our scene.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating through Buttons and using First Selected
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’ll build out a faux start screen that appears as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17: The start screen scene we will build](img/Figure_09.17_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.17: The start screen scene we will build'
  prefs: []
  type: TYPE_NORMAL
- en: Most of these buttons will be dummy buttons, but we will set up the **Play**
    button in the next example to load the scene we have been working on.
  prefs: []
  type: TYPE_NORMAL
- en: 'To give us the ability to experiment with button navigation, we’ll assign an
    **Explicit** navigation scheme to it so that we can cycle through the buttons
    with the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18: The button navigation map](img/Figure_09.18_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.18: The button navigation map'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, the **Play** button will be selected. Pressing the *down* key on the
    keyboard continuously will result in the following selection path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19: The button navigation flow with the down arrow](img/Figure_09.19_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.19: The button navigation flow with the down arrow'
  prefs: []
  type: TYPE_NORMAL
- en: 'Pressing the *up* button continuously will result in the following path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20: The button navigation flow with the up arrow](img/Figure_09.20_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.20: The button navigation flow with the up arrow'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we’ll learn how to lay out the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Laying out the Buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s start by creating a new scene and laying out the buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make a faux start screen as shown in *Figure 9**.17*, complete the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new empty scene and name it `Chapter9-Examples-StartScreen`. Open the
    new scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To give this scene the same background as the scenes we’ve made in the last
    few chapters, we can create another `Chapter8-Examples` scene to the **Hierarchy**.
    You should now see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.21: Loading the two scenes simultaneously](img/Figure_09.21_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.21: Loading the two scenes simultaneously'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select `Background Canvas` and press *Ctrl* + *D* to duplicate it. Now, drag
    the duplicate, labeled `Chapter9-Examples-StartScreen` scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.22: Duplicating Background Canvas](img/Figure_09.22_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.22: Duplicating Background Canvas'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now close the `Chapter8-Examples` scene, as we no longer need it. To
    do so, select the three dots on the right of the `Chapter8-Examples` scene, and
    select **Remove Scene**. Just in case you accidentally deleted something, select
    **Don’t Save** when prompted:![Figure 9.23: Removing the Scene](img/Figure_09.23_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.23: Removing the Scene'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You should now have only `Chapter9-Examples-StartScreen` in the `Background
    Canvas` should be visible in the scene.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Rename `Background Canvas (1)` to `Background Canvas` and save the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You’ll note that by doing this, we have a **Canvas** in the scene without an
    **Event System**. That’s okay, though; once we add new UI elements, an Event System
    will be added in for us.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can proceed, we should take care of a warning message that pops up
    in the Console. Since we copied `Background Canvas` from another scene, it is
    trying to access the camera from the other scene and can’t find it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A warning message will also appear on the `Background Canvas`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.24: The Canvas component error message](img/B18327_09_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.24: The Canvas component error message'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To fix this, simply drag the `Main Camera` from the current scene to the **Render
    Camera** slot and set the **Sorting Layer** to **Background**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.25: The Canvas component with the Main Camera assigned](img/Figure_09.25_B18327.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.25: The Canvas component with the Main Camera assigned'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let’s add the `Button Canvas`. Note that once you create the `Button Canvas`,
    an `Event System` GameObject will be created for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new UI Button (`Button Canvas` and give it the following **Rect Transform**
    and **Image** component properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.26: The properties on the Play Button](img/Figure_09.26_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.26: The properties on the Play Button'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, select the child `Play Button` and set its **Rect Transform** and **Text**
    component properties as such:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.27: The properties on the Play Button’s text](img/Figure_09.27_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.27: The properties on the Play Button’s text'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create an `Achievement Button`, a `Leaderboard Button`, and an `Info
    Button` so they appear as follows:![Figure 9.28: The layout of the start screen
    buttons](img/Figure_09.28_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.28: The layout of the start screen buttons'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To achieve the preceding layout, use the following properties and make sure
    to remove their child `Text` objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.29: The properties of the three buttons](img/Figure_09.29_B18327.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.29: The properties of the three buttons'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now all that is left to do to set up our scene’s layout is to create the `Facebook
    Button` and `Twitter Button` in the bottom-right corner of the scene. (Ignore
    the fact that the logos are extremely outdated.) To achieve the layout in *Figure
    9**.26*, create two buttons with the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.30: The properties on the two buttons](img/Figure_09.30_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.30: The properties on the two buttons'
  prefs: []
  type: TYPE_NORMAL
- en: Your scene should be correctly laid out now, so let’s work on setting up the
    navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the explicit navigation and First Selected
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you select the **Visualize** button on any of your Button’s **Button** components,
    you should see the following navigation path:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.31: The automatic button navigation visualization](img/Figure_09.31_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.31: The automatic button navigation visualization'
  prefs: []
  type: TYPE_NORMAL
- en: This navigation setup allows significantly more navigation range than the setup
    I described at the beginning of this example. This is because each button has
    its navigation set to `Play Button` the **First Selected** Button in our **Event
    System**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the navigation described at the beginning of this example, complete
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the `Play Button` to the **First Selected** slot by drag and drop:![Figure
    9.32: The Event System with the Play Button as First Selected](img/Figure_09.32_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.32: The Event System with the Play Button as First Selected'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, when we start cycling through our buttons, our navigation will begin at
    the `Play Button`. Also, if we were to hit the *Enter* key when this scene loads,
    the `Play Button` will automatically be executed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, let’s set all the Buttons to have an **Explicit Navigation** type. Select
    all six of the buttons in the **Hierarchy** list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With all selected, change the **Navigation** type to **Explicit** from the dropdown
    menu. Now, each Button should have the following settings in its **Button** component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make it easier to see our navigation, let’s change the **Selected Colors**
    property on each of our Buttons. With all the Buttons still selected, set **Selected
    Color** to dark red. It’s not very attractive, but it will make it easier for
    us to see whether our buttons are being selected. The **Button** component on
    all of your buttons should now look as follows:![Figure 9.33: The Button component
    with Color Tint transitions](img/Figure_09.33_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.33: The Button component with Color Tint transitions'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you play the game, you should see the `Play Button` colored red, symbolizing
    that it is selected (since we set it as **First Selected** in Step 1):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.34: Play Button selected and colored red](img/Figure_09.34_B18327.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.34: Play Button selected and colored red'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we can explicitly (hence the name) set the Buttons that each individual
    Button is to navigate to by dragging and dropping them into the appropriate slots.
    Let’s set the `Play Button` first since it will be the first button selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: According to *Figures 9.18* through *9.20*, the `Play Button` should navigate
    to `Twitter Button` when the *up* key is pressed and `Achievements Button` when
    the *down* key is pressed. So, drag and drop those Buttons into the slots labeled
    **Select On Up** and **Select On Down**, respectively, from the **Hierarchy**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have the **Visualize** button selected, as you are dragging the Buttons
    into their slots, you should see the navigation visualization starting to build
    out.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.35: The Navigation properties of the Play Button](img/Figure_09.35_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.35: The Navigation properties of the Play Button'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Remember that if an arrow begins on top of a Button, that arrow symbolizes where
    navigation will go if the *up* key is pressed, and if the arrow begins on the
    bottom of a Button, it symbolizes where navigation will go if the *down* key is
    pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Play the game to check and see whether it works. Press the *up* key and you
    should see the `Twitter Button` turn red, indicating it is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To see the `Achievement Button` become selected, you actually have to stop playing
    the game and replay, because we have not set up the navigation for the `Twitter
    Button` to go back to the `Play Button`. So, stop the game, press Play again,
    then press the *down* key, and you should see the `Achievement Button` highlight
    red.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Instead of restarting the game, you can also highlight the Play Button with
    your mouse so that you can then navigate to the Achievement Button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you set up the navigation for one Button, the rest aren’t too difficult,
    albeit tedious. Use the following chart to help you set up the rest of the Buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Button** | **Select** **On Up** | **Select** **On Down** |'
  prefs: []
  type: TYPE_TB
- en: '| `Play Button` | `Twitter Button` | `Achievement Button` |'
  prefs: []
  type: TYPE_TB
- en: '| `Achievement Button` | `Play Button` | `Leaderboard Button` |'
  prefs: []
  type: TYPE_TB
- en: '| `Leaderboard Button` | `Achievement Button` | `Info Button` |'
  prefs: []
  type: TYPE_TB
- en: '| `Info Button` | `LeaderBoard Button` | `Facebook Button` |'
  prefs: []
  type: TYPE_TB
- en: '| `Facebook Button` | `Info Button` | `Twitter Button` |'
  prefs: []
  type: TYPE_TB
- en: '| `Twitter Button` | `Facebook Button` | `Play Button` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 9.1: The Select On Up and Select On Down assignments for each Button'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you are done, your navigation visualization should look like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.36: The finalized Navigation flow visualization](img/Figure_09.36_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.36: The finalized Navigation flow visualization'
  prefs: []
  type: TYPE_NORMAL
- en: If you play your game, you should be able to easily cycle through the Buttons
    using the arrow keys.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend setting all the buttons to have **Horizontal** or **Vertical** **Navigation**
    patterns and seeing how they differ from what we have created so that you can
    see that this pattern is not attainable with a predefined pattern applied to all
    the Buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Loading scenes with Button presses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our start screen laid out, let’s hook up the `Play Button`
    to play our game. First, duplicate the scene you created in [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    called `Chapter8-Examples`, using *Ctrl* + *D*. The new scene should be called
    `Chapter9-Examples`. Our goal is to have the `Play Button` in `Chapter9-Examples-StartScreen`
    load the `Chapter9-Examples` scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the `Play Button` in the `Chapter9-Examples-StartScreen` scene, load
    up the `Chapter9-Examples` scene and complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To transition between scenes within Unity, you must first ensure that they
    are each listed within the **Scenes In Build** list in the **Build Settings**.
    Select **File** | **Build Settings** (or *Ctrl* + *Shift* + *B*). The following
    should be visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.37: The Build Settings with no scenes in the build](img/Figure_09.37_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.37: The Build Settings with no scenes in the build'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `Chapter9-Examples-StartScreen` and `Chapter9-Examples` scenes into
    the list:![Figure 9.38: Adding the scenes to the build](img/Figure_09.38_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.38: Adding the scenes to the build'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The order in which scenes appear in this list does not matter, except for the
    first scene (the one listed as scene `Chapter9-Examples-StartScreen` in position
    **0**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now that our scenes are in the `Scripts` folder in your `LevelLoader`. Open
    the new `LevelLoader` script and replace the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code contains a single function—`LoadTheLevel()`. This function
    calls the `LoadScene` method in the `SceneManager` class. We will load the `sceneToLoad`,
    which is a string we will specify in the `UnityEngine.SceneManagement` namespace
    must be included with the following line at the top of the script:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you still do not have the `Chapter9-Examples-StartScreen` scene open, open
    it again. Select the `Play Button` and drag and drop the `LevelLoader` script
    onto its **Inspector**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, within the `Chapter9-Examples`. You don’t need to put it in quotes; since
    the `sceneToLoad` variable is a string, `Chapter9-Examples` is assumed to be a
    string without you needing to put it in quotes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.39: The LevelLoader.cs script component](img/Figure_09.39_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.39: The LevelLoader.cs script component'
  prefs: []
  type: TYPE_NORMAL
- en: Now all that is left is to hook up the Button’s click event. Select the `LevelLoader.cs`,
    is on the `Play Button`, so drag the `Play Button` into the object slot. Now,
    from the function dropdown menu, select **LevelLoader** | **LoadTheLevel**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.40: The OnClick event hooked up](img/Figure_09.40_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.40: The OnClick event hooked up'
  prefs: []
  type: TYPE_NORMAL
- en: That’s it! Your `Play Button` should now navigate to the `Chapter9-Examples`
    scene when clicked on or when you press *Enter* when it is highlighted (as it
    is at the beginning or with your keyboard navigation).
  prefs: []
  type: TYPE_NORMAL
- en: Button Animation Transitions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often buttons are animated as a way to draw your attention to them. Let’s give
    the `Play Button` an Animation Transition so that when it is in its normal state
    it will pulsate to draw the attention of the player to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add button Animation Transition on the `Play Button`, complete the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Play Button` and change its **Transition** type to **Animation**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do not have an Animator Controller prebuilt, so select **Auto Generate Animation**
    to create a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A window will pop up asking you to save the newly created Animator Controller.
    Create a new folder in the `Assets` folder, called `Animations`, and save the
    new Animator Controller as `Play Button` to the folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the new Animator Controller in the new `Animations` folder:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.41: The Play Button animator in the Project](img/Figure_09.41_B18327.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.41: The Play Button animator in the Project'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You will also see the new `Play Button`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.42: The Play Button Animator component](img/Figure_09.42_B18327.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.42: The Play Button Animator component'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the **Animation** window by selecting **Window** | **Animation**. If you
    want to dock this new window, dock it somewhere so that you can still see the
    Scene and Game views when it is up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Play Button` and open the **Animation** window. The various animation
    clips associated with the transition states will be visible in the animation clip
    dropdown menu:![Figure 9.43: The various animations on the Play Button](img/Figure_09.43_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.43: The various animations on the Play Button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We want to edit the animation for the **Normal** transition state, so make sure
    it is selected (**Normal** is the animation selected by default).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To make the button look like its pulsating, we want to affect its scale. Select
    **Add Property** | **Rect Transform** and then hit the **+** icon next to **Scale**:![Figure
    9.44: Adding the Scale property to the Play Button](img/Figure_09.44_B18327.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 9.44: Adding the Scale property to the Play Button'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The **Scale** property should now be showing up in the **Animation** timeline:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 9.45: The Play Button Scale timeline](img/Figure_09.45_B18327.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.45: The Play Button Scale timeline'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To achieve the pulsation with scaling, we want the button to start at its normal
    size, get big, and then go back to its normal size. The diamonds that appear on
    the timeline are known as keyframes. To do what I just described, we need one
    more keyframe, right in the center of the timeline. Click on the top of the timeline
    (where the numbers appear) to move the timeline to the **0:30** mark. Then, select
    the **Add keyframe** button to add a new keyframe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.46: Adding an extra keyframe to the timeline](img/Figure_09.46_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.46: Adding an extra keyframe to the timeline'
  prefs: []
  type: TYPE_NORMAL
- en: 'Expand the **Scale** property by selecting the arrow to its left. You will
    see that if you select any of the keyframes, the number **1** appears next to
    all three scaling directions. This indicates that the scale at that frame is 100%
    (or its normal scale):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.47: Expanding the Scale property of the Play Button](img/Figure_09.47_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.47: Expanding the Scale property of the Play Button'
  prefs: []
  type: TYPE_NORMAL
- en: Select the keyframe in the center. Change the number `1.2` by clicking on the
    number **1** and typing the new value. You can press the Play button in the animation
    window to preview your animation. You will see that the button now pulsates in
    the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your button should now pulsate when you play the game (and will not turn red
    any longer). Note that it does not pulsate immediately, because the button will
    only pulsate when it is in its normal state. Since we have it set to **First Selected**,
    it is selected on start. To remove the selection, simply click anywhere in your
    scene outside of the button or navigate away using your keyboard. Once the button
    is no longer selected, it should begin pulsating.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let’s bring back the red selection since it made it easy to tell when the button
    was selected (even if it was unattractive). From the animation list dropdown menu,
    select the **Selected** animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.48: Selecting the Selected animation for the Play Button](img/Figure_09.48_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.48: Selecting the Selected animation for the Play Button'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Add Property** button, then select **Image** | **Color**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.49: Adding the Color property to the Play Button timeline](img/Figure_09.49_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.49: Adding the Color property to the Play Button timeline'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the second keyframe by selecting it and hitting the *Delete* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `1`, `0`, `0`, and `1`, respectively, on the remaining keyframe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.50: Adjusting the Color property of the Play Button](img/Figure_09.50_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.50: Adjusting the Color property of the Play Button'
  prefs: []
  type: TYPE_NORMAL
- en: Now when you play the game, the `Play Button` should pulsate when it is not
    selected and change to red when it is.
  prefs: []
  type: TYPE_NORMAL
- en: That marks the end of the examples concerning Buttons, but we will continue
    to use them in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you learn how to work with the Event System, working with buttons is an
    easy extension. Buttons are the most common interactive UI element, so having
    a good grasp on them is essential to effective UI development. Setting them up
    so that they function when clicked on is only half the process, though. You want
    to also ensure that you have your button navigation set up properly if you will
    be developing for PC, Mac, or console.
  prefs: []
  type: TYPE_NORMAL
- en: We’re not done with Buttons! We’ll be working with them throughout this book.
    Once we explore the Image component more thoroughly, we will cover more interesting
    button implementations and transitions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll cover the UI Text component!
  prefs: []
  type: TYPE_NORMAL
