["```cs\n<SYSTEMDRIVE>\\Users\\<username>\\AppData\\Local \n<SYSTEMDRIVE>\\Users\\<username>\\AppData\\Roaming \n```", "```cs\nnamespace CompanyName.ApplicationName.Managers.Interfaces\n{\n  public interface IHardDriveManager\n  {\n    void SaveTextFile(string filePath, string fileContents);\n\n    string ReadTextFile(string filePath);\n  }\n}\n```", "```cs\nusing CompanyName.ApplicationName.Managers.Interfaces;\nusing System.IO; \nusing System.IO.IsolatedStorage; \n\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class HardDriveManager : IHardDriveManager \n  { \n    private IsolatedStorageFile GetIsolatedStorageFile() \n    { \n      return IsolatedStorageFile.GetStore(IsolatedStorageScope.User |      \n        IsolatedStorageScope.Assembly | IsolatedStorageScope.Domain,\n        null, null); \n    } \n\n    public void SaveTextFile(string filePath, string fileContents) \n    { \n      try \n      { \n        IsolatedStorageFile isolatedStorageFile = GetIsolatedStorageFile(); \n        using (IsolatedStorageFileStream isolatedStorageFileStream =\n          new IsolatedStorageFileStream(filePath, FileMode.OpenOrCreate, \n          isolatedStorageFile)) \n        { \n          using (StreamWriter streamWriter =  \n            new StreamWriter(isolatedStorageFileStream)) \n          { \n            streamWriter.Write(fileContents); \n          } \n        } \n      } \n      catch { /*Log error*/ } \n    } \n\n    public string ReadTextFile(string filePath) \n    { \n      string fileContents = string.Empty; \n      try \n      { \n        IsolatedStorageFile isolatedStorageFile = GetIsolatedStorageFile(); \n        if (isolatedStorageFile.FileExists(filePath)) \n        { \n          using (IsolatedStorageFileStream isolatedStorageFileStream =\n            new IsolatedStorageFileStream(filePath, FileMode.Open, \n            isolatedStorageFile)) \n          { \n            using (StreamReader streamReader =  \n              new StreamReader(isolatedStorageFileStream)) \n            { \n              fileContents = streamReader.ReadToEnd(); \n            } \n          } \n        } \n      } \n      catch { /*Log error*/ } \n      return fileContents; \n    } \n  } \n} \n```", "```cs\nDependencyManager.Instance.Register<IHardDriveManager, HardDriveManager>();\n```", "```cs\npublic IHardDriveManager HardDriveManager \n{ \n  get { return DependencyManager.Instance.Resolve<IHardDriveManager>(); }\n} \n```", "```cs\nHardDriveManager.SaveTextFile(\"UserPreferences.txt\", \"AutoLogIn:True\");\n\n...\n\nstring preferences = HardDriveManager.ReadTextFile(\"UserPreferences.txt\"); \n```", "```cs\npublic void DeleteFile(string filePath) \n{ \n  try \n  { \n    IsolatedStorageFile isolatedStorageFile = GetIsolatedStorageFile(); \n    isolatedStorageFile.DeleteFile(filePath); \n  } \n  catch { /*Log error*/ } \n} \n\npublic void CreateFolder(string folderName) \n{ \n  try \n  { \n    IsolatedStorageFile isolatedStorageFile = GetIsolatedStorageFile(); \n    isolatedStorageFile.CreateDirectory(folderName); \n  } \n  catch { /*Log error*/ } \n} \n\npublic void DeleteFolder(string folderName) \n{ \n  try \n  { \n    IsolatedStorageFile isolatedStorageFile = GetIsolatedStorageFile(); \n    isolatedStorageFile.DeleteDirectory(folderName); \n  } \n  catch { /*Log error*/ } \n} \n```", "```cs\nHardDriveManager.CreateFolder(\"Preferences\"); \nHardDriveManager.SaveTextFile(\"Preferences/UserPreferences.txt\", \n  \"AutoLogIn:True\"); \n\n...\n\nstring preferences = \n  HardDriveManager.ReadTextFile(\"Preferences/UserPreferences.txt\"); \n\n...\n\nHardDriveManager.DeleteFile(\"Preferences/UserPreferences.txt\"); \nHardDriveManager.DeleteFolder(\"Preferences\"); \n```", "```cs\nHardDriveManager.CreateFolder(\"Preferences\"); \nHardDriveManager.CreateFolder(\"Preferences/Login\"); \nHardDriveManager.SaveTextFile(\"Preferences/Login/UserPreferences.txt\",  \n  \"AutoLogIn:True\"); \n```", "```cs\nusing System.Deployment.Application;\n\n...\n\nprivate string GetPublishedVersion() \n{ \n  if (ApplicationDeployment.IsNetworkDeployed) \n  { \n    return \n      ApplicationDeployment.CurrentDeployment.CurrentVersion.ToString(); \n  } \n  return \"Not network deployed\"; \n} \n```", "```cs\nusing System.Diagnostics; \nusing System.Reflection; \n```", "```cs\nstring assemblyVersion = \n  Assembly.GetEntryAssembly().GetName().Version.ToString(); \n```", "```cs\nVersion assemblyVersion = Assembly.GetEntryAssembly().GetName().Version; \nstring productName = FileVersionInfo.GetVersionInfo( Assembly.GetEntryAssembly().Location).ProductName; \nstring output = $\"{productName}: Version {version.Major}.{version.Minor}\"; \n```", "```cs\nstring fileVersion = FileVersionInfo.GetVersionInfo( \n  Assembly.GetEntryAssembly().Location).FileVersion; \n```", "```cs\nstring productVersion = FileVersionInfo.GetVersionInfo( \n  Assembly.GetEntryAssembly().Location).ProductVersion; \n```"]