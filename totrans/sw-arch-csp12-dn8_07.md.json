["```cs\npublic abstract class Entity<K>: IEntity<K>\n{\n\n    public virtual K Id { get; protected set; }\n    public bool IsTransient()\n    {\n        return Object.Equals(Id, default(K));\n    }\n    public override bool Equals(object obj)\n    {\n        return obj is Entity<K> entity &&\n          Equals(entity);\n    }\n    public bool Equals(IEntity<K>? other)\n    {\n        if (other == null ||\n            other.IsTransient() || this.IsTransient())\n            return false;\n        return Object.Equals(Id, other.Id);\n    }\n    int? _requestedHashCode;\n    public override int GetHashCode()\n    {\n        if (!IsTransient())\n        {\n            if (!_requestedHashCode.HasValue)\n                _requestedHashCode = HashCode.Combine(Id);\n            return _requestedHashCode.Value;\n        }\n        else\nreturn base.GetHashCode();\n    }\n    public static bool operator ==(Entity<K> left, Entity<K> right)\n    {\n        if (Object.Equals(left, null))\n            return Object.Equals(right, null);\n        return left.Equals(right);\n    }\n    public static bool operator !=(Entity<K> left, Entity<K> right)\n    {\n        return !(left == right);\n    }\n} \n```", "```cs\nvar modifiedAddress = myAddress with {Street = \"new street\"} \n```", "```cs\npublic record Address\n{\n   public string Country {get; init;}\n   public string Town {get; init;}\n   public string Street {get; init;}\n} \n```", "```cs\npublic record Address(string Country, string Town, string Street) ; \n```", "```cs\npublic interface IUnitOfWork\n{\n    Task<bool> SaveEntitiesAsync();\n    Task StartAsync();\n    Task CommitAsync();\n    Task RollbackAsync();\n}\npublic interface IRepository<T>: IRepository\n{\n   IUnitOfWork UnitOfWork { get; }\n} \n```", "```cs\npublic List<IEventNotification> DomainEvents { get; private set; }\npublic void AddDomainEvent(IEventNotification evt)\n{\n    DomainEvents ??= new List<IEventNotification>();\n    DomainEvents.Add(evt);\n}\npublic void RemoveDomainEvent(IEventNotification evt)\n{\n    DomainEvents?.Remove(evt);\n} \n```", "```cs\npublic interface IEventHandler<T>: IEventHandler\nwhere T: IEventNotification\n{\n    Task HandleAsync(T ev);\n} \n```", "```cs\npublic interface ICommandHandler<T>: ICommandHandler\nwhere T: ICommand\n{\n    Task HandleAsync(T command);\n} \n```", "```cs\npublic class EventTrigger<T>\n    where T: IEventNotification\n{\n    private IEnumerable<IEventHandler<T>> handlers;\n    public EventTrigger(IEnumerable<IEventHandler<T>> handlers)\n    {\n        this.handlers = handlers;\n    }\n    public async Task Trigger(T ev)\n    {\n        foreach (var handler in handlers)\n            await handler.HandleAsync(ev);\n    }\n} \n```", "```cs\n service.AddEventHandler<MyEventType, MyHandlerType>() \n```", "```cs\npublic static class EventDIExtensions\n{\n    public static IServiceCollection AddEventHandler<T, H>\n        (this IServiceCollection services)\n where T : IEventNotification\n where H: class, IEventHandler<T>\n    {\n        services.AddScoped<H>();\n        services.TryAddScoped(typeof(EventTrigger<>));\n        return services;\n    }\n    ...\n    ...\n} \n```"]