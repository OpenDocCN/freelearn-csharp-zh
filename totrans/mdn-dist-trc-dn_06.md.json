["```cs\n$ docker run -d --name jaeger -p 6831:6831/udp -p\n  16686:16686 jaegertracing/all-in-one:latest\n```", "```cs\nprivate static readonly ActivitySource Source =\n  new (\"Worker\");\n...\nusing var activity = Source.StartActivity(\"DoWork\");\nactivity?.SetTag(\"work_item.id\", workItemId);\ntry\n{\n  await DoWorkImpl(workItemId);\n}\ncatch (Exception ex)\n{\n  activity?.SetStatus(ActivityStatusCode.Error,\n    ex.Message);\n  throw;\n}\n```", "```cs\nusing var provider = Sdk.CreateTracerProviderBuilder()\n  .ConfigureResource(b => b.AddService(\"activity-sample\"))\n  .AddSource(\"Worker\")\n  .AddJaegerExporter()\n  .AddConsoleExporter()\n  .Build()!;\n```", "```cs\ntracing-with-net$ dotnet run open-telemetry –scenario basic\n```", "```cs\nActivity.TraceId:         9c45e1b454e28bf1edbba296c3315c51\nActivity.SpanId:          bcd47a4fc7d92063\nActivity.TraceFlags:         Recorded\nActivity.ActivitySourceName: Worker\nActivity.DisplayName:        DoWork\nActivity.Kind:               Internal\nActivity.StartTime:          2022-12-07T23:10:49.1998081Z\nActivity.Duration:           00:00:00.1163745\nResource associated with Activity:\n    service.name: activity-sample\n```", "```cs\nActivitySource.AddActivityListener(new ActivityListener()\n{\n  ActivityStopped = PrintActivity\n  ShouldListenTo = source => source.Name == \"Worker\",\n  Sample = (ref ActivityCreationOptions<ActivityContext> _)\n    => ActivitySamplingResult.AllDataAndRecorded\n});\n```", "```cs\ntracing-with-net$ dotnet run activity-listener\n```", "```cs\nDoWork: Id = 00-7720a4aca8472f92c36079b0bee3afd9-\n0d0c62b5cfb15876-01, Duration=110.3466, Status = Unset\n```", "```cs\nSource.CreateActivity(\"foo\", ActivityKind.Client)?.Start()\n```", "```cs\nif (activity?.IsAllDataRequested == true)\n    activity?.SetTag(\"foo\", GetValue());\n```", "```cs\nprivate static readonly Tracer Tracer = TracerProvider\n  .Default.GetTracer(\"Worker\");\n...\nusing var workSpan = Tracer.StartActiveSpan(\"DoWork\"));\n  workSpan.SetAttribute(\"work_item.id\", workItemId);\n  try\n  {\n    await DoWorkImpl(workItemId);\n  }\n  catch (Exception ex)\n  {\n    workSpan.SetStatus(Status.Error.WithDescription(\n      ex.Message));\n    throw;\n  }\n}\n```", "```cs\npublic static async Task DoWork(int workItemId) {\n  using var workActivity = Source.StartActivity();\n  workActivity?.AddTag(\"work_item.id\",  workItemId);\n  await DoWithRetry(async tryCount => {\n    using var tryActivity = Source.StartActivity(\"Try\");\n    try\n    {\n      await DoWorkImpl(work.Id, tryCount);\n      tryActivity?.SetTag(\"try_count\", tryCount);\n    }\n    catch (Exception ex)\n    {\n      tryActivity?.RecordException(ex);\n      tryActivity?.SetStatus(ActivityStatusCode.Error);\n      throw;\n    }\n  }\n}\n```", "```cs\ntracing-with-net$ dotnet run open-telemetry –scenario with-\nretries\n```", "```cs\npublic static async Task DoWork(int workItemId) {\n  using var work = Source.StartActivity();\n  try\n  {\n    work?.AddTag(\"work_item.id\", workItemId);\n    var res = await Client.GetAsync(\n      \"https://www.bing.com/search?q=tracing\",\n      HttpCompletionOption.ResponseHeadersRead);\n    res.EnsureSuccessStatusCode();\n    work?.AddEvent(\n      new ActivityEvent(\"received_response_headers\"));\n    ...\n  }\n  catch (Exception ex)\n  {\n    work?.SetStatus(ActivityStatusCode.Error,\n      ex.Message);\n  }\n}\n```", "```cs\nprivate readonly TokenBucketRateLimiter _rateLimiter =\n  new (Options);\nprotected override async Task<HttpResponseMessage>\n  SendAsync(HttpRequestMessage req, CancellationToken ct)\n{\n  using var lease = _rateLimiter.AttemptAcquire();\n  if (lease.IsAcquired)\n    return await base.SendAsync(req, ct);\n  return Throttle(lease);\n}\n```", "```cs\nprivate HttpResponseMessage Throttle(RateLimitLease lease)\n{\n  var res = new HttpResponseMessage(\n    HttpStatusCode.TooManyRequests);\n  if (lease.TryGetMetadata(MetadataName.RetryAfter,\n    out var retryAfter))\n  {\n    var work = Activity.Current;\n    if (work?.IsAllDataRequested == true)\n    {\n      var tags = new ActivityTagsCollection();\ntags.Add(\"exception.type\", \"rate_is_limited\");\n      tags.Add(\"retry_after_ms\",\n        retryAfter.TotalMilliseconds);\n      work?.AddEvent(new ActivityEvent(\"exception\",\n        tags: tags));\n    }\n    res.Headers.Add(\"Retry-After\",\n      ((int)retryAfter.TotalSeconds).ToString());\n  }\n  return res;\n}\n```", "```cs\npublic void Enqueue(int id)\n{\n  using var enqueue = Source\n    .StartActivity(ActivityKind.Producer)?\n    .SetTag(\"work_item.id\", id);\n  _queue.Enqueue(new WorkItem(id, enqueue?.Context));\n}\n```", "```cs\nasync Task ProcessBatch(List<WorkItem> items)\n{\n  using var activity = Source.StartActivity(\n      ActivityKind.Consumer,\n      links: items\n        .Select(i => new ActivityLink(i.Context)));\n  activity?.SetTag(\"work_items.id\",\n       items.Select(i => i.Id).ToArray());\n  ...\n}\n```", "```cs\npublic class TestFactory : WebApplicationFactory<Program>\n{\n  public readonly TestActivityProcessor Processor = new ();\n  protected override void ConfigureWebHost(\n    IWebHostBuilder b)\n  {\n    b.ConfigureServices(s => {\n      s.ConfigureOpenTelemetryTracerProvider(\n        (_, traceProviderBuilder) =>\n          traceProviderBuilder.AddProcessor(Processor));\n      ...\n    });\n  }\n}\n```", "```cs\npublic class TestActivityProcessor :BaseProcessor<Activity>\n{\n  ConcurrentQueue<Activity> _processed = new ();\n  public override void OnEnd(Activity activity) =>\n    _processed.Enqueue(activity);\n  ...\n}\n```", "```cs\nAssert.Equal(\"/document/foo\",\n  httpIn.GetTagItem(\"http.target\"));\nAssert.Equal(404, httpIn.GetTagItem(\"http.status_code\"));\nAssert.Equal(ActivityStatusCode.Unset, httpIn.Status);\nAssert.Empty(httpIn.Events);\n```"]