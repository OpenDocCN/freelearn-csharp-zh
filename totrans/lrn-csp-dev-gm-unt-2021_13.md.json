["```cs\npublic class SomeGenericCollection**<****T****>** {} \n```", "```cs\nSomeGenericCollection**<****int****>** highScores = new SomeGenericCollection<int>(); \n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n\n    // 1\n    public class Shop<T>\n    {\n        // 2\n        public List<T> inventory = new List<T>();\n    } \n    ```", "```cs\n    public class GameBehavior : MonoBehaviour, IManager\n    {\n        // ... No other changes needed ...\n\n        public void Initialize()\n        {\n            // 3\n            var itemShop = new Shop<string>();\n            // 4\n            Debug.Log(\"There are \" + itemShop.inventory.Count + \" items for sale.\");\n        }\n    } \n    ```", "```cs\npublic void GenericMethod**<****T****>**(**T** genericParameter) {} \n```", "```cs\nGenericMethod**<****string****>(****\"Hello World!\"****)**; \n```", "```cs\npublic class SomeGenericCollection<T> \n{\n    public void NonGenericMethod(**T** genericParameter) {}\n} \n```", "```cs\nSomeGenericCollection**<****int****>** highScores = new SomeGenericCollection\n<int> ();\nhighScores.NonGenericMethod(**35**); \n```", "```cs\n    public class Shop<T>\n    {\n        public List<T> inventory = new List<T>();\n        **// 1**\n        **public****void****AddItem****(****T newItem****)**\n        **{**\n\n            **inventory.Add(newItem);**\n        **}**\n    } \n    ```", "```cs\n    public class GameBehavior : MonoBehaviour, IManager\n    {\n        // ... No other changes needed ...\n\n         public void Initialize()\n        {\n            var itemShop = new Shop<string>();\n            **// 2**\n            itemShop**.AddItem(****\"Potion\"****);**\n            itemShop**.AddItem(****\"Antidote\"****);**\n           Debug.Log(\"There are \" + itemShop.inventory.Count + \" items for sale.\");\n        }\n    } \n    ```", "```cs\n// 1\npublic int GetStockCount<U>()\n{\n    // 2\n    var stock = 0;\n    // 3\n    foreach (var item in inventory)\n    {\n        if (item is U)\n        {\n            stock++;\n        }\n    }\n    // 4\n    return stock;\n} \n```", "```cs\nDebug.Log(\"There are \" + itemShop.GetStockCount<string>() + \" items for sale.\"); \n```", "```cs\nDebug.Log(\"There are \" + itemShop.GetStockCount<int>() + \" items for sale.\"); \n```", "```cs\npublic class SomeGenericCollection<T> where T: ConstraintType {} \n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n\n    public class Collectable\n    {\n        public string name;\n    }\n\n    public class Potion : Collectable\n    {\n        public Potion()\n        {\n            this.name = \"Potion\";\n        }\n    }\n\n    public class Antidote : Collectable\n    {\n        public Antidote()\n        {\n            this.name = \"Antidote\";\n        }\n    } \n    ```", "```cs\n    public class Shop<T> **where****T** **:** **Collectable** \n    ```", "```cs\n    public int GetStockCount<U>() **where** **U : T**\n    {\n        var stock = 0;\n        foreach (var item in inventory)\n        {\n            if (item is U)\n            {\n                stock++;\n            }\n        }\n        return stock;\n    } \n    ```", "```cs\n    var itemShop = new Shop<**Collectable**>();\n    itemShop.AddItem(**new** **Potion()**);\n    itemShop.AddItem(**new** **Antidote()**);\n    Debug.Log(\"There are \" + itemShop.GetStockCount<**Potion**>() + \" items for sale.\"); \n    ```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n\n    public class Destroyable<T> : MonoBehaviour where T : MonoBehaviour\n    {\n        public int OnscreenDelay;\n\n        void Start()\n        {\n            Destroy(this.gameObject, OnscreenDelay);\n        }\n    } \n    ```", "```cs\n    public class BulletBehavior : **Destroyable****<****BulletBehavior****>**\n    {\n    } \n    ```", "```cs\npublic **delegate** returnType DelegateName(int param1, string param2); \n```", "```cs\npublic **DelegateName** someDelegate; \n```", "```cs\npublic DelegateName someDelegate = **MatchingMethod**;\npublic void **MatchingMethod****(****int** **param1,** **string** **param2****)** \n{\n    // ... Executing code here ...\n} \n```", "```cs\nsomeDelegate(); \n```", "```cs\npublic class GameBehavior : MonoBehaviour, IManager\n{\n    // ... No other changes needed ...\n\n    **// 1**\n    **public****delegate****void****DebugDelegate****(****string** **newText****)****;**\n\n    **// 2**\n    **public** **DebugDelegate debug = Print;**\n\n    public void Initialize() \n    {\n        _state = \"Game Manager initialized..\";\n        _state.FancyDebug();\n        **// 3**\n        **debug(_state);**\n   // ... No changes needed ...\n    }\n    **// 4**\n    **public****static****void****Print****(****string** **newText****)**\n    **{**\n        **Debug.Log(newText);**\n    **}**\n} \n```", "```cs\npublic class GameBehavior : MonoBehaviour, IManager\n{\n    // ... No changes needed ...\n    public void Initialize() \n    {\n        _state = \"Game Manager initialized..\";\n        _state.FancyDebug();\n        debug(_state);\n        **// 1**\n        **LogWithDelegate(debug);**\n    }\n    **// 2**\n    **public****void****LogWithDelegate****(****DebugDelegate del****)**\n    **{**\n        **// 3**\n        **del(****\"Delegating the debug task...\"****);**\n    **}**\n} \n```", "```cs\npublic delegate void EventDelegate(int param1, string param2);\npublic **event** EventDelegate eventInstance; \n```", "```cs\neventInstance(35, \"John Doe\"); \n```", "```cs\npublic class PlayerBehavior : MonoBehaviour \n{\n    // ... No other variable changes needed ...\n    **// 1**\n    **public****delegate****void****JumpingEvent****()****;**\n    **// 2**\n    **public****event** **JumpingEvent playerJump;**\n    void Start()\n    {\n        // ... No changes needed ...\n    }\n    void Update() \n    {\n        // ... No changes needed ...\n;\n    }\n    void FixedUpdate()\n    {\n        if(IsGrounded() &&  _isJumping)\n        {\n            _rb.AddForce(Vector3.up * jumpVelocity,\n               ForceMode.Impulse);\n            **// 3**\n            **playerJump();**\n        }\n    }\n    // ... No changes needed in IsGrounded or OnCollisionEnter\n} \n```", "```cs\nsomeClass.eventInstance += EventHandler; \n```", "```cs\npublic void EventHandler(int param1, string param2) {} \n```", "```cs\nsomeClass.eventInstance -= EventHandler; \n```", "```cs\n    public class GameBehavior : MonoBehaviour, IManager\n    {\n        // 1\n        public PlayerBehavior playerBehavior;\n\n        // 2\n        void OnEnable()\n        {\n            // 3\n            GameObject player = GameObject.Find(\"Player\");\n            // 4\n            playerBehavior = player.GetComponent<PlayerBehavior>();\n            // 5\n            playerBehavior.playerJump += HandlePlayerJump;\n            debug(\"Jump event subscribed...\");\n        }\n\n        // 6\n        public void HandlePlayerJump()\n        {\n             debug(\"Player has jumped...\");\n        **}**\n        // ... No other changes ...\n    } \n    ```", "```cs\n// 1\nprivate void OnDisable()\n{\n    // 2\n    playerBehavior.playerJump -= HandlePlayerJump;\n    debug(\"Jump event unsubscribed...\");\n} \n```", "```cs\npublic void ValidateEmail(string email)\n{\n    if(!email.Contains(\"@\"))\n    {\n        **throw****new** **System.ArgumentException(****\"Email is invalid\"****);**\n    }\n} \n```", "```cs\n    public static class Utilities \n    {\n        // ... No changes needed ...\n        public static bool RestartLevel(int sceneIndex) \n        {\n            **// 1**\n            **if****(sceneIndex <** **0****)**\n            **{**\n                **// 2**\n                **throw****new** **System.ArgumentException(****\"Scene index cannot be negative\"****);**\n             **}**\n\n            Debug.Log(\"Player deaths: \" + PlayerDeaths);\n            string message = UpdateDeathCount(ref PlayerDeaths);\n            Debug.Log(\"Player deaths: \" + PlayerDeaths);\n            Debug.Log(message);\n\n            SceneManager.LoadScene(sceneIndex);\n            Time.timeScale = 1.0f;\n\n            return true;\n        }\n    } \n    ```", "```cs\n    // 3\n    public void RestartScene()\n    {\n        Utilities.RestartLevel(**-1**);\n    } \n    ```", "```cs\ntry\n{\n    // Call a method that might throw an exception\n}\ncatch (ExceptionType localVariable)\n{\n    // Catch all exception cases individually\n} \n```", "```cs\ntry\n{\n    // Call a method that might throw an exception\n}\ncatch (ArgumentException argException)\n{\n    // Catch argument exceptions here\n}\ncatch (FileNotFoundException fileException)\n{\n    // Catch exceptions for files not found here\n} \n```", "```cs\nfinally\n{\n    // Executes at the end of the try-catch no matter what\n} \n```", "```cs\npublic class GameBehavior : MonoBehaviour, IManager\n{\n    // ... No variable changes needed ...\n    public void RestartScene()\n    {\n        // 1 \n        try\n        {\n            Utilities.RestartLevel(-1);\n            debug(\"Level successfully restarted...\");\n        }\n        // 2\n        catch (System.ArgumentException exception)\n        {\n            // 3\n            Utilities.RestartLevel(0);\n            debug(\"Reverting to scene 0: \" + exception.ToString());\n        }\n        // 4\n        finally\n        {\n            debug(\"Level restart has completed...\");\n        }\n    }\n} \n```"]