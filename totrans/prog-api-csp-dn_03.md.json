["```cs\nbuilder.Services.AddAutoMapper(typeof(Program));\n```", "```cs\nnamespace Cars.Data.DTOs\n{\n    public class CarDto\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Mpg { get; set; }\n        public string Cylinders { get; set; }\n        public string Displacement { get; set; }\n        public string Horsepower { get; set; }\n        public string Weight { get; set; }\n        public string Acceleration { get; set; }\n        public string ModelYear { get; set; }\n        public string Origin { get; set; }\n    }\n}\n```", "```cs\nPublic class CarProfile : Profile\n{\n   Public CarProfile()\n   {\n      CreateMap<CarDto, Car>()\n        .ForMember(car => car.id, opt=>opt.MapFrom(carDto => carDto.\n        Id))\n        .ForMember(car => car.name, opt=>opt.MapFrom(carDto => carDto.\n        Name))\n        .ForMember(car => car.mpg, opt=>opt.MapFrom(carDto => carDto.\n        Mpg))\n        .ForMember(car => car.cylinders, opt=>opt.MapFrom(carDto => \n        carDto.Cylinders))\n        .ForMember(car => car.displacement, opt=>opt.MapFrom(carDto => \n        carDto.Displacement))\n        .ForMember(car => car.horsepower, opt=>opt.MapFrom(carDto => \n        carDto.Horsepower))\n        .ForMember(car => car.weight, opt=>opt.MapFrom(carDto => \n        carDto.Weight))\n        .ForMember(car => car.acceleration, opt=>opt.MapFrom(carDto => \n        carDto.Acceleration))\n        .ForMember(car => car.model_year, opt=>opt.MapFrom(carDto => \n        carDto.ModelYear))\n        .ForMember(car => car.origin, opt=>opt.MapFrom(carDto => \n        carDto.Origin))\n        .ReverseMap();\n```", "```cs\nPublic async Task<Car?> GetCarById(int carId)\n{\nvar sql =\n    $@\"SELECT *\n       FROM\n            Cars C\n       WHERE\n            C.id = @{nameof(carId)}\n            AND C.is_deleted = 0\";\nvar param = new\n{\n    carId\n};\nvar car = await QueryFirstOrDefaultAsync<Car>(sql, param);\nreturn car;\n}\n```", "```cs\n//Controller\n[HttpPost]\n public async Task<ActionResult<Car>> Insert([FromBody] CarDto \n carAsDto)\n {\n     try\n     {\n         if (carAsDto == null)\n         {\n             return BadRequest(\"No car was provided\");\n         }\n         var carToInsert = _mapper.Map<Car>(carAsDto);\n         var insertedCar = await _carService.Insert(carToInsert);\n         var insertedCarDto = _mapper.Map<CarDto>(insertedCar);\n         var location = $\"https://localhost:5001/car/{insertedCarDto.\n         Id}\";\n         return Created(location, insertedCarDto);\n     }\n     catch (Exception e)\n     {\n         return StatusCode(StatusCodes.Status500InternalServerError);\n     }\n }\n```", "```cs\n // car service\n  public async Task<Car> Insert(Car)\n {\n     var newId = await _carRepository.UpsertAsync(car);\n     if (newId > 0)\n     {\n         car.id = newId;\n     }\n     else\n     {\n         throw new Exception(\"Failed to insert car\");\n     }\n     return car;\n }\n```", "```cs\npublic async Task<int> UpsertAsync(Car car)\n {\n     using var db = databaseConnectionFactory.GetConnection();\n     var sql = @\"\n     DECLARE @InsertedRows AS TABLE (Id int);\n     MERGE INTO Car AS target\n     USING (SELECT @Id AS Id, @Name AS Name, @MPG as MPG, @\n     Cylinders as Cylinders, @Displacement as Displacement, @\n     Horsepower as Horsepower, @Weight as Weight, @Acceleration as \n     Acceleration, @Model_Year AS Model_Year, @Origin AS origin, @\n     Is_Deleted AS Is_Deleted ) AS source\n     ON target.Id = source.Id\n     WHEN MATCHED THEN\n         UPDATE SET\n             Name = source.Name,\n             MPG = source.MPG,\n             Cylinders = source.Cylinders,\n             Displacement = source.Displacement,\n             Horsepower = source.Horsepower,\n             Weight = source.Weight,\n             Acceleration = source.Acceleration,\n             Model_Year = source.Model_Year,\n             Origin = source.Origin,\n             Is_Deleted = source.Is_Deleted\n     WHEN NOT MATCHED THEN\n         INSERT (Name, Mpg, Cylinders, Displacement, Horsepower, \n         Weight, Acceleration, Model_Year, Origin, Is_deleted)\n         VALUES (source.Name, source.MPG, source.Cylinders, source.\n         Displacement, source.Horsepower, source.Weight, source.\n         Acceleration, source.Model_Year, source.Origin, source.Is_\n         Deleted)\n         OUTPUT inserted.Id INTO @InsertedRows\n     ;\n     SELECT Id FROM @InsertedRows;\n \";\n     var newId = await db.QuerySingleOrDefaultAsync<int>(sql, car);\n     return newId == 0 ? car.id : newId;\n }\n```", "```cs\npublic async Task<ActionResult<Car>> Insert([FromBody] CarDto carAsDto)\n```", "```cs\npublic async Task<IEnumerable<Car>> GetAll(bool returnDeletedRecords = false)\n{\n    return await _carRepository.GetAll(returnDeletedRecords);\n}\n```", "```cs\npublic async Task<IEnumerable<Car>> GetAll(bool returnDeletedRecords = false)\n{\n    var builder = new SqlBuilder();\n    var sqlTemplate = builder.AddTemplate(\"SELECT * FROM car \" + \n    \"/**where**/ \");\n    if (!returnDeletedRecords)\n    {\n        builder.Where(\"is_deleted=0\");\n    }\n    using var db = databaseConnectionFactory.GetConnection();\n    return await db.QueryAsync<Car>(sqlTemplate.RawSql,sqlTemplate.\n    Parameters)\n}\n```", "```cs\n[HttpPut]\npublic async Task<IActionResult> Put([FromBody] Car car)\n```", "```cs\n[HttpPut]\npublic async Task<IActionResult> Put([FromBody] Car car)\n{\n    try\n    {\n        await _carService.Update(car);\n    }\n    catch (Exception e)\n    {\n        return BadRequest(e);\n    }\n    return NoContent();\n}\n```", "```cs\npublic async Task<Car> Update(Car car)\n{\n    if (car.id == 0)\n    {\n        throw new Exception(\"Id must be set\");\n    }\n    var oldId = car.id;\n    var newId = await _carRepository.UpsertAsync(car);\n    if (newId != oldId)\n    {\n        throw new Exception(\"Failed to update car\");\n    }\n    return car;\n}\n```", "```cs\npublic async Task<int> UpsertAsync(Car car)\n{\n    using var db = databaseConnectionFactory.GetConnection();\n    var sql = @\"\n    DECLARE @InsertedRows AS TABLE (Id int);\n    MERGE INTO Car AS target\n    USING (SELECT @Id AS Id, @Name AS Name, @MPG as MPG, @Cylinders as \n    Cylinders, @Displacement as Displacement, @Horsepower as \n    Horsepower, @Weight as Weight, @Acceleration as Acceleration, @\n    Model_Year AS Model_Year, @Origin AS origin, @Is_Deleted AS Is_\n    Deleted ) AS source\n    ON target.Id = source.Id\n    WHEN MATCHED THEN\n        UPDATE SET\n            Name = source.Name,\n            MPG = source.MPG,\n            Cylinders = source.Cylinders,\n            Displacement = source.Displacement,\n            Horsepower = source.Horsepower,\n            Weight = source.Weight,\n            Acceleration = source.Acceleration,\n            Model_Year = source.Model_Year,\n            Origin = source.Origin,\n            Is_Deleted = source.Is_Deleted\n    WHEN NOT MATCHED THEN\n        INSERT (Name, Mpg, Cylinders, Displacement, Horsepower,\n        Weight, Acceleration, Model_Year, Origin, Is_deleted)\n        VALUES (source.Name, source.MPG, source.Cylinders, source.\n        Displacement, source.Horsepower, source.Weight, source.\n        Acceleration,source.Model_Year, source.Origin, source.Is_\n        Deleted)\n        OUTPUT inserted.Id INTO @InsertedRows\n    ;\n    SELECT Id FROM @InsertedRows;\n\";\n    var newId = await db.QuerySingleOrDefaultAsync<int>(sql, car);\n    return newId == 0 ? car.id : newId;\n}\n```", "```cs\n[HttpDelete(\"{id}\")]\npublic async Task<IActionResult> Delete(int id)\n{\n    try\n    {\n        await _carService.Delete(id);\n    }\n    catch (Exception e)\n    {\n        return BadRequest(e);\n    }\n    return NoContent();\n}\n```", "```cs\npublic async Task Delete(int id)\n{\n    var car = await _carRepository.Get(id);\n    if (car == null)\n    {\n        throw new Exception(\"Car not found\");\n    }\n    await _carRepository.DeleteAsync(id);\n    return;\n}\n```", "```cs\npublic async Task<int> DeleteAsync(int id)\n{\n    using var db = databaseConnectionFactory.GetConnection();\n    var query = \"UPDATE car SET Is_Deleted = 1 WHERE Id = @Id\";\n    return await db.ExecuteAsync(query, new { Id = id });\n}\n```"]