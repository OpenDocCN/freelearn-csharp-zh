["```cs\n\"EntityFramework.Commands\": \"7.0.0-rc1-final\", \n    \"EntityFramework.MicrosoftSqlServer\": \"7.0.0-rc1-final\", \n    \"Microsoft.AspNet.Authentication.Cookies\": \"1.0.0-rc1-final\", \n\n```", "```cs\n{ \n  \"Data\": { \n    \"DefaultConnection\": { \n      \"ConnectionString\": \"Server=(localdb)\\\\mssqllocaldb;Database=aspnet_security;Trusted_Connection=True;MultipleActiveResultSets=true\" \n   } \n  } \n} \n\n```", "```cs\npublic class ApplicationUser : IdentityUser \n{\n..  \n} \n\n```", "```cs\npublic class ApplicationDbContext : IdentityDbContext<ApplicationUser> \n    { \n        public ApplicationDbContext(string nameOrConnectionString) : base(nameOrConnectionString) { } \n\n        protected override void OnModelCreating(DbModelBuilder modelBuilder) \n        { \n            base.OnModelCreating(modelBuilder);             \n        } \n    } \n\n```", "```cs\napp.UseIdentity(); \n\n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env,  ILoggerFactory loggerFactory) \n        { \n            loggerFactory.AddConsole(Configuration.GetSection(\"Logging\")); \n            loggerFactory.AddDebug(); \n\n            if (env.IsDevelopment()) \n            { \n                app.UseBrowserLink(); \n                app.UseDeveloperExceptionPage(); \n                app.UseDatabaseErrorPage(); \n            } \n            else \n            { \n                app.UseExceptionHandler(\"/Home/Error\"); \n\n            app.UseIISPlatformHandler(options => options.AuthenticationDescriptions.Clear()); \n\n            app.UseStaticFiles(); \n\n            app.UseIdentity(); \n\n            // To configure external authentication please see http://go.microsoft.com/fwlink/?LinkID=532715 \n\n            app.UseMvc(routes => \n            { \n                routes.MapRoute( \n                    name: \"default\", \n                    template: \"{controller=Home}/{action=Index}/{id?}\"); \n            }); \n        } \n\n```", "```cs\n    public void ConfigureServices(IServiceCollection services \n    { \n    // Add framework services. \n\n                services.AddScoped<ApplicationDbContext>(f => { \n                    return new ApplicationDbContext(Configuration[\"Data:DefaultConnection:ConnectionString\"]); \n                }); \n\n                services.AddIdentity<ApplicationUser, IdentityRole>() \n                    .AddUserStore<UserStore<ApplicationUser, ApplicationDbContext>>() \n                    .AddRoleStore<RoleStore<ApplicationDbContext>>() \n                    .AddDefaultTokenProviders(); \n\n                services.AddMvc(); \n\n                // Add application services. \n                services.AddTransient<IEmailSender, AuthMessageSender>(); \n                services.AddTransient<ISmsSender, AuthMessageSender>(); \n            } \n\n    ```", "```cs\npublic class RegisterViewModel \n    { \n        [Required] \n        [EmailAddress] \n        [Display(Name = \"Email\")] \n        public string Email { get; set; } \n\n        [Required] \n        [StringLength(100, ErrorMessage = \"The {0} must be at least {2} characters long.\", MinimumLength = 6)] \n        [DataType(DataType.Password)] \n        [Display(Name = \"Password\")] \n        public string Password { get; set; } \n\n        [DataType(DataType.Password)] \n        [Display(Name = \"Confirm password\")] \n        [Compare(\"Password\", ErrorMessage = \"The password and confirmation password do not match.\")] \n        public string ConfirmPassword { get; set; } \n    } \n\n```", "```cs\npublic class LoginViewModel \n    { \n        [Required] \n        [EmailAddress] \n        public string Email { get; set; } \n\n        [Required] \n        [DataType(DataType.Password)] \n        public string Password { get; set; } \n\n        [Display(Name = \"Remember me?\")] \n        public bool RememberMe { get; set; } \n    } \n\n```", "```cs\npublic class AccountController : Controller \n    { \n        private readonly UserManager<ApplicationUser> _userManager; \n        private readonly SignInManager<ApplicationUser> _signInManager; \n        private readonly IEmailSender _emailSender; \n        private readonly ISmsSender _smsSender; \n        private readonly ILogger _logger; \n\n        public AccountController( \n            UserManager<ApplicationUser> userManager, \n            SignInManager<ApplicationUser> signInManager, \n            IEmailSender emailSender, \n            ISmsSender smsSender, \n            ILoggerFactory loggerFactory) \n        { \n            _userManager = userManager; \n            _signInManager = signInManager; \n            _emailSender = emailSender; \n            _smsSender = smsSender; \n            _logger = loggerFactory.CreateLogger<AccountController>(); \n        } \n    } \n\n```", "```cs\n[HttpGet] \n        [AllowAnonymous] \n        public IActionResult Login(string returnUrl = null) \n        { \n            ViewData[\"ReturnUrl\"] = returnUrl; \n            return View(); \n        } \n\n```", "```cs\n@using System.Collections.Generic \n@using Microsoft.AspNet.Http \n@using Microsoft.AspNet.Http.Authentication \n@using AspNet.Identity.EntityFramework6 \n\n@model LoginViewModel \n@inject SignInManager<ApplicationUser> SignInManager \n\n@{ \n    ViewData[\"Title\"] = \"Log in\"; \n} \n\n<h2>@ViewData[\"Title\"].</h2> \n<div class=\"row\"> \n    <div class=\"col-md-8\"> \n        <section> \n            <form asp-controller=\"Account\" asp-action=\"Login\" asp-route-returnurl=\"@ViewData[\"ReturnUrl\"]\" method=\"post\" class=\"form-horizontal\" role=\"form\"> \n                <h4>Use a local account to log in.</h4> \n                <hr /> \n                <div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div> \n                <div class=\"form-group\"> \n                    <label asp-for=\"Email\" class=\"col-md-2 control-label\"></label> \n                    <div class=\"col-md-10\"> \n                        <input asp-for=\"Email\" class=\"form-control\" /> \n                        <span asp-validation-for=\"Email\" class=\"text-danger\"></span> \n                    </div> \n                </div> \n                <div class=\"form-group\"> \n                    <label asp-for=\"Password\" class=\"col-md-2 control-label\"></label> \n                    <div class=\"col-md-10\"> \n                        <input asp-for=\"Password\" class=\"form-control\" /> \n                        <span asp-validation-for=\"Password\" class=\"text-danger\"></span> \n                    </div> \n                </div> \n                <div class=\"form-group\"> \n                    <div class=\"col-md-offset-2 col-md-10\"> \n                        <div class=\"checkbox\"> \n                            <input asp-for=\"RememberMe\" /> \n                            <label asp-for=\"RememberMe\"></label> \n                        </div> \n                    </div> \n                </div> \n                <div class=\"form-group\"> \n                    <div class=\"col-md-offset-2 col-md-10\"> \n                        <button type=\"submit\" class=\"btn btn-default\">Log in</button> \n                    </div> \n                </div> \n                <p> \n                    <a asp-action=\"Register\">Register as a new user?</a> \n                </p> \n                <p> \n                    <a asp-action=\"ForgotPassword\">Forgot your password?</a> \n                </p> \n            </form> \n        </section> \n    </div> \n\n</div> \n\n@section Scripts { \n    @{ await Html.RenderPartialAsync(\"_ValidationScriptsPartial\"); } \n} \n\n```", "```cs\n[HttpGet] \n[AllowAnonymous] \npublic IActionResult Register() \n{ \n    return View(); \n} \n\n```", "```cs\n@model RegisterViewModel \n@{ \n    ViewData[\"Title\"] = \"Register\"; \n} \n\n<h2>@ViewData[\"Title\"].</h2> \n\n<form asp-controller=\"Account\" asp-action=\"Register\" method=\"post\" class=\"form-horizontal\" role=\"form\"> \n    <h4>Create a new account.</h4> \n    <hr /> \n    <div asp-validation-summary=\"ValidationSummary.All\" class=\"text-danger\"></div> \n    <div class=\"form-group\"> \n        <label asp-for=\"Email\" class=\"col-md-2 control-label\"></label> \n        <div class=\"col-md-10\"> \n            <input asp-for=\"Email\" class=\"form-control\" /> \n            <span asp-validation-for=\"Email\" class=\"text-danger\"></span> \n        </div> \n    </div> \n    <div class=\"form-group\"> \n        <label asp-for=\"Password\" class=\"col-md-2 control-label\"></label> \n        <div class=\"col-md-10\"> \n            <input asp-for=\"Password\" class=\"form-control\" /> \n            <span asp-validation-for=\"Password\" class=\"text-danger\"></span> \n        </div> \n    </div> \n    <div class=\"form-group\"> \n        <label asp-for=\"ConfirmPassword\" class=\"col-md-2 control-label\"></label> \n        <div class=\"col-md-10\"> \n            <input asp-for=\"ConfirmPassword\" class=\"form-control\" /> \n            <span asp-validation-for=\"ConfirmPassword\" class=\"text-danger\"></span> \n        </div> \n    </div> \n    <div class=\"form-group\"> \n        <div class=\"col-md-offset-2 col-md-10\"> \n            <button type=\"submit\" class=\"btn btn-default\">Register</button> \n        </div> \n    </div> \n</form> \n\n@section Scripts { \n    @{ await Html.RenderPartialAsync(\"_ValidationScriptsPartial\"); } \n} \n\n```", "```cs\n[HttpPost] \n        [AllowAnonymous] \n        [ValidateAntiForgeryToken] \n        public async Task<IActionResult> Register(RegisterViewModel model) \n        { \n            if (ModelState.IsValid) \n            { \n                var user = new ApplicationUser { UserName = model.Email,  Email = model.Email }; \n                var result = await _userManager.CreateAsync(user,  model.Password); \n                if (result.Succeeded) \n                { \n                    await _signInManager.SignInAsync(user, isPersistent:  false); \n                    return RedirectToAction(nameof(HomeController.Index),  \"Home\"); \n                } \n                AddErrors(result); \n            } \n\n            return View(model); \n        } \n\n```", "```cs\n[HttpPost] \n        [ValidateAntiForgeryToken] \n        public async Task<IActionResult> LogOff() \n        { \n            await _signInManager.SignOutAsync(); \n            _logger.LogInformation(4, \"User logged out.\"); \n            return RedirectToAction(nameof(HomeController.Index), \"Home\"); \n       } \n\n```", "```cs\n[HttpPost] \n        [AllowAnonymous] \n        [ValidateAntiForgeryToken] \n        public async Task<IActionResult> Login(LoginViewModel model, string returnUrl = null) \n        { \n            ViewData[\"ReturnUrl\"] = returnUrl; \n            if (ModelState.IsValid) \n            { \n                var result = await _signInManager.PasswordSignInAsync(model.Email, model.Password, model.RememberMe, lockoutOnFailure: false); \n                if (result.Succeeded) \n                { \n                    return RedirectToLocal(returnUrl); \n                } \n\n            } \n            // If there is any error, display the form again \n            return View(model); \n        } \n\n```", "```cs\npublic interface IEmailSender\n{\n        Task SendEmailAsync(string email, string subject, string message)\n  }\n  public interface ISmsSender\n    {\n        Task SendSmsAsync(string number, string message);\n    }\npublic class AuthMessageSender : IEmailSender, ISmsSender\n    {\n        public Task SendEmailAsync(string email, string subject, string message)\n        {\n            // We can plug in our email service here to send an email.\n            return Task.FromResult(0);\n        }\n        public Task SendSmsAsync(string number, string message)\n        {\n            // We can plug in our SMS service here to send a text message.\n            return Task.FromResult(0);\n        }\n    }\n```", "```cs\n[Authorize] \n        public IActionResult About() \n        { \n            ViewData[\"Message\"] = \"This is my about page\"; \n            return View(); \n        } \n\n```"]