["```cs\n    public struct PlayerData\n    {\n        public string Name;\n        public int Age;\n        public float HP;\n        public float Attack;\n        public PlayerData(string name, int age, float hp,\n          float attack)\n        {\n            Name = name;\n            Age = age;\n            HP = hp;\n            Attack = attack;\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class JSONSerializationSample : MonoBehaviour\n    {\n        private void Start()\n        {\n            var playerData = new PlayerData(\"player1\", 50,\n              100, 100);\n            var jsonString =\n              JsonUtility.ToJson(playerData);\n            Debug.Log(jsonString);\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class JSONSerializationSample : MonoBehaviour\n    {\n        private void Start()\n        {\n            var playerData = new PlayerData(\"player1\", 50,\n              100, 100);\n            var jsonString =\n              JsonUtility.ToJson(playerData);\n            Debug.Log(jsonString);\n            var deserializedObject =\n             JsonUtility.FromJson<PlayerData>(jsonString);\n            Debug.Log(deserializedObject.Name);\n        }\n    }\n    ```", "```cs\n    [System.Serializable]\n    public struct PlayerData\n    {\n       //No Change\n    }\n    ```", "```cs\n    using System.Collections.Generic;\n    public class TeamData\n    {\n        public List<PlayerData> Players;\n        public Dictionary<string, PlayerData> Roles;\n        public TeamData()\n        {\n            Players = new List<PlayerData>();\n            Roles = new Dictionary<string, PlayerData>();\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class JsonUtilityLimitationsSample :\n      MonoBehaviour\n    {\n        private void Start()\n        {\n            var playerData = new PlayerData(\"player1\", 50,\n              100, 100);\n            var teamData = new TeamData();\n            teamData.Players.Add(playerData);\n            teamData.Roles.Add(\"leader\", playerData);\n            var jsonStringFromTeamData =\n              JsonUtility.ToJson(teamData);\n            Debug.Log(jsonStringFromTeamData);\n        }\n    }\n    ```", "```cs\n    public class JsonUtilityLimitationsSample :\n      MonoBehaviour\n    {\n        private void Start()\n        {\n            // No Change\n            var jsonStringFromList =\n              JsonUtility.ToJson(teamData.Players);\n            Debug.Log(jsonStringFromList);\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using Newtonsoft.Json;\n    public class JsonUtilityLimitationsSample :\n      MonoBehaviour\n    {\n        private void Start()\n        {\n          var playerData = new PlayerData(\"player1\", 50,\n            100, 100);\n          var teamData = new TeamData();\n          teamData.Players.Add(playerData);\n          teamData.Roles.Add(\"leader\", playerData);\n          var jsonStringFromTeamData =\n            JsonConvert.SerializeObject(teamData);\n          Debug.Log(jsonStringFromTeamData);\n          var jsonStringFromList =\n            JsonConvert.SerializeObject(teamData.Players);\n          Debug.Log(jsonStringFromList);\n        }\n    }\n    ```", "```cs\n    public class AssetSample : MonoBehaviour\n    {\n        [SerializeField]\n        private Texture _texture;\n    }\n    ```", "```cs\n    using UnityEditor;\n    public class AssetImporterSample : AssetPostprocessor\n    {\n        private void OnPreprocessAudio()\n        {\n            var audioImporter =\n              (AudioImporter)assetImporter;\n            if(audioImporter == null)\n            {\n                return;\n            }\n            audioImporter.forceToMono = true;\n            audioImporter.SaveAndReimport();\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class ResourcesLoadExample : MonoBehaviour\n    {\n        private GameObject _gameObjectInstance;\n        private void Start()\n        {\n            var samplePrefab =\n              Resources.Load<GameObject>(\"SamplePrefab\");\n            if(samplePrefab != null)\n            {\n                _gameObjectInstance =\n                  Instantiate(samplePrefab);\n            }\n        }\n    }\n    ```", "```cs\n    public void OnClickSetVideoURL()\n    {\n        _videoPlayer.url =\n          Path.Combine(Application.streamingAssetsPath,\n          _videoFileName);\n    }\n```", "```cs\n    using UnityEngine;\n    using UnityEngine.AddressableAssets;\n    public class LoadAddressableContentFromAzureCloud :\n      MonoBehaviour\n    {\n        [SerializeField]\n        private string _assetKey;\n        private void Start()\n        {\n            GetContentFromAzureCloud();\n        }\n        private async void GetContentFromAzureCloud()\n        {\n            var resourceLocations = await\n              Addressables.LoadResourceLocationsAsync\n              (_assetKey).Task;\n            foreach (var resourceLocation in\n              resourceLocations)\n            {\n                await Addressables.InstantiateAsync\n                  (resourceLocation).Task;\n            }\n        }\n    }\n    ```"]