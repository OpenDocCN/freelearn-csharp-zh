["```cs\nAs user group organizer\n I want to see a listing of all speakers\n So that I can find speakers for my user group.\n\nAs conference organizer\n I want to see details of a particular speaker\n So that I might view more information about them.\n```", "```cs\nAs user group organizer\n I want to see a listing of all speakers\n So that I can find speakers for my user group.\n```", "```cs\nGiven system contains speakers\n When viewing speaker catalog\n Then a listing of all speaker summaries is returned.\n```", "```cs\nAs conference organizer\n I want to see details of a particular speaker\n So that I might view more information about them.\n```", "```cs\nGiven specified speaker exists\n When speaker selected\n Then speaker details are returned.\n```", "```cs\nGiven specified speaker does not exists\n When speaker selected\n Then a friendly error message should be returned.\n```", "```cs\nAs a speaker\n I want to see a listing of all communities\n So that I can find potential user groups at which to speak.\n```", "```cs\nAs a speaker\n I want to see details of a particular community\n So that I can learn more about the user group.\n```", "```cs\nAs a speaker\n I want to see a listing of all communities\n So that I can find potential user groups at which to speak.\n```", "```cs\nGiven system contains communities\n When viewing community catalog\n Then a listing of all user groups is returned.\n```", "```cs\nAs a speaker\n I want to see details of a particular community\n So that I can learn more about the user group.\n```", "```cs\nGiven community selected\n When specified community exists\n Then community detail returned.\n```", "```cs\nGiven community selected\n When specified community does not exists\n Then a friendly error message should be returned.\n```", "```cs\nAs a speaker\n I want to see a listing of all conferences\n So that I can find conferences at which to speak.\n```", "```cs\nAs a speaker\n I want to see details of a particular conference\n So that I can learn more about the conference.\n```", "```cs\nAs a speaker\n I want to see a listing of all conferences\n So that I can find conferences at which to speak.\n```", "```cs\nGiven system contains conferences\n When viewing conference catalog\n Then a listing of all conferences is returned.\n```", "```cs\nAs a speaker\n I want to see details of a particular community\n So that I can learn more about the user group.\n```", "```cs\nGiven specified conference exists\n When conference selected\n Then conference detail returned.\n```", "```cs\nGiven specified conference does not exists\n When conference selected\n Then a friendly error message should be returned.\n```", "```cs\npublic class UserProfileDtoTests\n{\n  [Fact]  \n  public void ItExists()\n  {\n    var dto = new UserProfileDto();\n  }\n\n  [Fact]\n  public void ItHasAnId()\n  {\n    // Arrange\n    var dto = new UserProfileDto();\n    dto.Id = 1;\n\n    // Act\n    // Assert\n    Assert.Equal(1, dto.Id);\n  }\n}\n```", "```cs\npublic class UserProfileDto\n{ \n  public int Id { get; set; }\n  public string Username { get; set; }\n  public string FirstName {get; set;}\n  public byte[] PasswordHash { get; set; }\n}\n```", "```cs\npublic class FakeRepository<T> : IRepository<T> where T : class\n{\n    public IList<T> DataSet { get; set; } = new List<T>(); \n    public T Get(Func<T, bool> predicate)\n    { \n        return GetAll().Where(predicate).FirstOrDefault(); \n    }\n\n    public IQueryable<T> GetAll() \n    { \n        return DataSet.AsQueryable(); \n    } \n} \n```", "```cs\npublic class UserProfileServiceTests\n{\n  [Fact]\n  public void ItExists()\n  {\n    var service = new UserProfileService();\n  }\n}\n```", "```cs\npublic class UserProfileService\n{\n  public UserProfileService()\n  {\n  }\n}\n```", "```cs\npublic class GetUserProfileTests\n{\n  [Fact]\n  public void ItReturnsNullForNonExistentUsers()\n  {\n    // Arrange\n    var repository = new FakeRepository<UserProfileDto>();\n    var service = new UserProfileService(repository);\n\n    // Act\n    var profile = service.GetUserProfile(\"NonExistantUser@email.com\");\n\n    // Assert\n    Assert.Null(profile);\n  }\n\n  [Fact]\n  public void ItReturnsUserProfileForUsersThatExist()\n  {\n    // Arrange\n    var repository = new FakeRepository<UserProfileDto>();\n    var service = new UserProfileService(repository);\n\n    repository.DataSet.Add(new UserProfileDto\n    {\n      Username = \"ExistingUser@email.com\"\n    });\n\n    // Act\n    var profile = service.GetUserProfile(\"ExistingUser@email.com\");\n\n    // Assert\n    Assert.NotNull(profile);\n    Assert.IsAssignableFrom<UserProfileDto>(profile);\n  }\n}\n```", "```cs\npublic class IsUserPasswordValid\n{\n  private readonly UserProfileService _service;\n  private readonly UserProfileDto _profile;\n\n  public IsUserPasswordValid()\n  {\n    // Arrange\n    var repository = new FakeRepository<UserProfileDto>();\n    _service = new UserProfileService(repository);\n    _profile = new UserProfileDto\n    {\n      Username = \"ValidUser@email.com\",\n      // This should be an encryption helper utility. Try to write and \n         test a utility to replace this code.\n      PasswordHash = SHA512.Create().ComputeHash(Encoding.ASCII.GetBytes(\"ValidPassword\"))\n    };\n\n    repository.DataSet.Add(_profile);\n  }\n\n  [Fact]\n  public void ItReturnsFalseForInvalidPasswords()\n  {\n    // Act\n    var result = _service.IsUserPasswordValid(_profile, \"InvalidPassword\");\n\n    // Assert\n    Assert.False(result);\n  }\n\n  [Fact]\n  public void ItReturnsTrueForValidPasswords()\n  {\n    // Act\n    var result = _service.IsUserPasswordValid(_profile, \"ValidPassword\");\n\n    // Assert\n    Assert.True(result);\n  }\n}\n```", "```cs\npublic class UserProfileService\n{\n  private readonly IRepository<UserProfileDto> _repository;\n\n  public UserProfileService(IRepository<UserProfileDto> repository)\n  {\n    _repository = repository;\n  }\n\n  public object GetUserProfile(string username)\n  {\n    return _repository.GetAll().FirstOrDefault(u => u.Username == username);\n  }\n\n  public bool IsUserPasswordValid(UserProfileDto profile, string password)\n  {\n    // Now we have the same code in production code as we do in our tests.\n    var hash = SHA512.Create().ComputeHash(Encoding.ASCII.GetBytes(password));\n\n    return profile.PasswordHash.SequenceEqual(hash);\n  }\n}\n```", "```cs\npublic class UserProfileControllerTests\n{\n  [Fact]\n  public void ItExists()\n  {\n    var controller = new UserProfileController();\n  }\n\n  [Fact]\n  public void ItIsAController()\n  {\n    var controller = new UserProfileController();\n\n    Assert.IsAssignableFrom<Controller>(controller);\n  }\n}\n```", "```cs\npublic class UserProfileController : Controller\n{\n}\n```", "```cs\npublic class UserLogon\n{\n  private readonly UserProfileController _controller;\n\n  public UserLogon()\n  {\n    // Arrange\n    var repository = new FakeRepository<UserProfileDto>();\n    var service = new UserProfileService(repository);\n    _controller = new UserProfileController(service);\n\n    repository.DataSet.Add(new UserProfileDto\n    {\n      Username = \"TestUser@email.com\",\n      PasswordHash = SHA512.Create().ComputeHash(Encoding.UTF8.GetBytes(\"ValidPassword\"))\n    });\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    // Act\n    var response = _controller.LogonUser(\"TestUser@email.com\", \"Password\");\n  }\n\n  [Fact]\n  public void ItReturnsAnActionResult()\n  {\n    // Act\n    var response = _controller.LogonUser(\"TestUser@email.com\", \"Password\");\n\n    // Assert\n    Assert.IsAssignableFrom<IActionResult>(response);\n  }\n\n  [Fact]\n  public void ItReturnsNotAuthorizedForBadUsername()\n  {\n    // Act\n    var response = (StatusCodeResult) _controller.LogonUser(\"BadUser@email.com\", \"ValidPassword\");\n\n    // Assert\n    Assert.Equal(HttpStatusCode.Unauthorized, (HttpStatusCode)response.StatusCode);\n  }\n\n  [Fact]\n  public void ItReturnsOkForValidUsernameAndPassword()\n  {\n    // Act\n    var response = (StatusCodeResult)_controller.LogonUser(\"TestUser@email.com\", \"ValidPassword\");\n\n    // Assert\n    Assert.Equal(HttpStatusCode.OK, (HttpStatusCode)response.StatusCode);\n  }\n\n  [Fact]\n  public void ItReturnsUnauthorizedForInvlalidPassword()\n  {\n    // Act\n    var response = (StatusCodeResult)_controller.LogonUser(\"TestUser@email.com\", \"InvalidPassword\");\n\n    // Assert\n    Assert.Equal(HttpStatusCode.Unauthorized, (HttpStatusCode)response.StatusCode);\n  }\n}\n```", "```cs\npublic class UserProfileController : Controller\n{\n  private readonly UserProfileService _service;\n\n  public UserProfileController(UserProfileService service)\n  {\n    _service = service;\n  }\n\n  public IActionResult LogonUser(string username, string password)\n  {\n    var user = _service.GetUserProfile(username);\n\n    if (user != null && _service.IsUserPasswordValid(user, password))\n    {\n      return Ok();\n    }\n\n    return Unauthorized();\n  }\n}\n```", "```cs\npublic class LogonControllerTests\n{\n  [Fact]\n  public void ItExists()\n  {\n    var controller = new LogonController();\n  }\n\n  [Fact]\n  public void ItIsAnIActionResult()\n  {\n    // Act\n    var controller = new LogonController();\n\n    // Assert\n    Assert.IsAssignableFrom<Controller>(controller);\n  }\n}\n```", "```cs\npublic class LogonController : Controller\n{\n}\n```", "```cs\npublic class Post\n{\n  [Fact]\n  public void ItExists()\n  {\n    // Arrange\n    var controller = new LogonController();\n\n    // Act\n    var response = controller.Post(null);\n  }\n\n  [Fact]\n  public void ItReturnsAnIActionResult()\n  {\n    // Arrange\n    var controller = new LogonController();\n\n    // Act\n    var response = controller.Post(null);\n\n    // Assert\n    Assert.IsAssignableFrom<IActionResult>(response);\n  }\n\n  [Fact]\n  public void ItReturnsUnauthorizedForInvalidUser()\n  {\n    // Arrange\n    var controller = new LogonController();\n    var attempt = new LoginAttempt\n    {\n      Username = \"InvalidUser@email.com\",\n      Password = \"BadPassword\"\n    };\n\n    // Act\n    var response = (ObjectResult)controller.Post(attempt);\n\n    // Assert\n    Assert.NotNull(response.StatusCode);\n    Assert.Equal(HttpStatusCode.Unauthorized, (HttpStatusCode)response.StatusCode);\n  }\n\n  [Fact]\n  public void ItReturnsOkForValidUser()\n  {\n    // Arrange\n    var controller = new LogonController();\n    var attempt = new LoginAttempt\n    {\n      Username = \"ValidUser@email.com\",\n      Password = \"ValidPassword\"\n    };\n\n    // Act\n    var response = (ObjectResult)controller.Post(attempt);\n\n    // Assert\n    Assert.NotNull(response.StatusCode);\n    Assert.Equal(HttpStatusCode.OK, (HttpStatusCode)response.StatusCode);\n  }\n\n  [Fact]\n  public void ItReturnsUnauthorizedForInvalidPassword()\n  {\n    // Arrange\n    var controller = new LogonController();\n    var attempt = new LoginAttempt\n    {\n      Username = \"ValidUser@email.com\",\n      Password = \"InvalidPassword\"\n    };\n\n    // Act\n    var response = (ObjectResult)controller.Post(attempt);\n\n    // Assert\n    Assert.NotNull(response.StatusCode);\n    Assert.Equal(HttpStatusCode.Unauthorized, (HttpStatusCode)response.StatusCode);\n  }\n\n  [Fact]\n  public void ItReturnsSuccessfulLogonMessageWhenSuccessful()\n  {\n    // Arrange\n    var controller = new LogonController();\n    var attempt = new LoginAttempt\n    {\n      Username = \"ValidUser@email.com\",\n      Password = \"ValidPassword\"\n    };\n\n    // Act\n    var response = (ObjectResult)controller.Post(attempt);\n\n    // Assert\n    Assert.Equal(\"Logon Successful\", response.Value);\n  }\n\n  [Fact]\n  public void ItReturnsUnauthorizedLogonMessageWhenUnauthorized()\n  {\n    // Arrange\n    var controller = new LogonController();\n    var attempt = new LoginAttempt\n    {\n      Username = \"InvalidUser@email.com\",\n      Password = \"Password\"\n    };\n\n    // Act\n    var response = (ObjectResult)controller.Post(attempt);\n\n    // Assert\n    Assert.Equal(\"Username or Password invalid\", response.Value);\n  }\n}\n```", "```cs\npublic class LoginAttempt\n{\n  public string Username { get; set; }\n  public string Password { get; set; }\n}\n```", "```cs\npublic class LogonController : Controller\n{\n  [HttpPost]\n  public IActionResult Post(LoginAttempt attempt)\n  {\n    if (attempt != null && attempt.Username == \"ValidUser@email.com\" && attempt.Password == \"ValidPassword\")\n    {\n      return Ok(\"Logon Successful\");\n    }\n\n    return new ObjectResult(\"Username or Password invalid\") {\n      StatusCode = (int?)HttpStatusCode.Unauthorized\n    };\n  }\n}\n```", "```cs\npublic class LogonController : Controller\n{\n  private readonly ILogonService _service;\n\n  public LogonController(ILogonService service)\n  {\n    _service = service;\n  }\n\n  public IActionResult Post(LoginAttempt attempt)\n  {\n    return _service.IsLogonValid(attempt) ? \n      Ok(\"Logon Successful\") :\n      new ObjectResult(\"Username or Password invalid\") {\n        StatusCode = (int?)HttpStatusCode.Unauthorized\n      };\n  }\n}\n```", "```cs\npublic interface ILogonService\n{\n  bool IsLogonValid(LoginAttempt attempt);\n}\n```", "```cs\nclass FakeLogonService : ILogonService\n{\n  public bool IsLogonValid(LoginAttempt attempt)\n  {\n    return attempt != null &&\n      attempt.Username == \"ValidUser@email.com\" &&\n      attempt.Password == \"ValidPassword\";\n  }\n}\n```", "```cs\npublic class IsValidLogon\n{\n  private readonly LogonService _service;\n\n  public IsValidLogon()\n  {\n    var repository = new FakeRepository<UserLogonDto>();\n    _service = new LogonService(repository);\n    var userLogon = new UserLogonDto\n    {\n      Username = \"ValidUser@email.com\",\n      PasswordHash =  SHA512.Create().ComputeHash(Encoding.ASCII.GetBytes(\"ValidPassword\"))\n    };\n\n    repository.DataSet.Add(userLogon);\n  }\n\n  [Fact]\n  public void ItExists()\n  {\n    var repository = new FakeRepository<UserLogonDto>();\n    var service = new LogonService(repository);\n    var attempt = new LoginAttempt();\n\n    service.IsLogonValid(attempt);\n  }\n\n  [Fact]\n  public void ItReturnsTrueForValidAttempt()\n  {\n    // Arrange\n    var attempt = new LoginAttempt\n    {\n      Username = \"ValidUser@email.com\",\n      Password = \"ValidPassword\"\n    };\n\n    // Act\n    var result = _service.IsLogonValid(attempt);\n\n    // Assert\n    Assert.True(result);\n  }\n\n  [Fact]\n  public void ItReturnsFalseForInvalidUsername()\n  {\n    // Arrange\n    var attempt = new LoginAttempt\n    {\n      Username = \"InvalidUser@email.com\",\n      Password = \"ValidPassword\"\n    };\n\n    // Act\n    var result = _service.IsLogonValid(attempt);\n\n    // Assert\n    Assert.False(result);\n  }\n\n  [Fact]\n  public void ItReturnsFalseForInvalidPassword()\n  {\n    // Arrange\n    var attempt = new LoginAttempt\n    {\n      Username = \"ValidUser@email.com\",\n      Password = \"InvalidPassword\"\n    };\n\n    // Act\n    var result = _service.IsLogonValid(attempt);\n\n    // Assert\n    Assert.False(result);\n  }\n}\n```", "```cs\npublic class LogonService : ILogonService\n{\n  private readonly IRepository<UserLogonDto> _repository;\n\n  public LogonService(IRepository<UserLogonDto> repository)\n  {\n    _repository = repository;\n  }\n\n  public bool IsLogonValid(LoginAttempt attempt)\n  {\n    attempt = attempt ?? new LoginAttempt();\n\n    var user = _repository.GetAll().FirstOrDefault(u => u.Username == attempt.Username);\n\n    var hash = SHA512.Create().ComputeHash(Encoding.ASCII.GetBytes(attempt.Password ?? \"\"));\n\n    return user != null && user.PasswordHash.SequenceEqual(hash);\n  }\n}\n```", "```cs\npublic class UserLogonDto : IIdentity\n{\n  public int Id { get; set; }\n  public string Username { get; set; }\n  public byte[] PasswordHash { get; set; }\n}\n```", "```cs\npublic class LoginTests\n{\n  [Fact]\n  public void GivenAnInvalidUsername()\n  {\n    // Arrange/Given\n    var username = \"InvalidUser@email.com\";\n\n    // Act/When\n    var exception = Record.Exception(() => Account.Logon(username));\n\n    // Assert/Then\n    Assert.IsAssignableFrom<InvalidUsernameOrPasswordException>(exception);\n    Assert.Equal(\"Invalid Username or Password\", exception.Message);\n  }\n}\n```", "```cs\npublic class InvalidUsernameOrPasswordException: Exception\n{\n  public InvalidUsernameOrPasswordException() : base(\"Invalid Username or Password\")\n  {\n  }\n}\n```", "```cs\npublic class Account\n{\n  public object Logon(string username)\n  {\n    throw new InvalidUsernameOrPasswordException();\n  }\n}\n```", "```cs\npublic class LoginTests\n{\n  private readonly string _accessKey;\n  private readonly Account _account;\n\n  public LoginTests()\n  {\n    _accessKey = \"GrantedAccessKey\";\n    var repository = new FakeRepository<UserCredentials>();\n    _account = new AccountTestDouble(repository);\n\n    repository.DataSet.Add(new UserCredentials {\n      Username = \"ValidUser@email.com\"\n    });\n  }\n\n  [Fact]\n  public void GivenAnInvalidUsername()\n  {\n    // Arrange/Given\n    var username = \"InvalidUser@email.com\";\n    var password = \"UnimportantPassword\";\n\n    // Act/When\n    var exception = Record.Exception(() => _account.Logon(username, password));\n\n    // Assert/Then\n    Assert.IsAssignableFrom<InvalidUsernameOrPasswordException>(exception);\n    Assert.Equal(\"Invalid Username or Password\", exception.Message);\n  }\n\n  [Fact]\n  public void GivenAValidUsernameAndPassword()\n  {\n    // Arrange/Given\n    var username = \"ValidUser@email.com\";\n    var password = \"ValidPassword\";\n\n    // Act/When\n    var result = _account.Logon(username, password);\n\n    // Assert/Then\n    Assert.IsAssignableFrom<string>(result);\n    Assert.Equal(_accessKey, result);\n  }\n}\n```", "```cs\npublic class InvalidUsernameOrPasswordException : Exception\n{\n  public InvalidUsernameOrPasswordException() : base(\"Invalid Username or Password\")\n  {\n  }\n}\n```", "```cs\npublic class Account\n{\n  private readonly IRepository<UserCredentials> _repository;\n\n  public Account(IRepository<UserCredentials> repository)\n  {\n    _repository = repository;\n  }\n\n  public string Logon(string username, string password)\n  {\n    var uc =_repository.GetAll().FirstOrDefault(u => u.Username == username);\n\n    if (uc == null)\n    {\n      throw new InvalidUsernameOrPasswordException();\n    }\n\n    return GenerateAccessKey(uc);\n  }\n\n  protected virtual string GenerateAccessKey(UserCredentials userCredentials)\n  {\n    // Here we would need to actually generate an access token\n    return \"DefaultKey\";\n  }\n}\n```", "```cs\npublic class AccountTestDouble : Account\n{\n  public AccountTestDouble(IRepository<UserCredentials> repository) : base(repository) { }\n\n  protected override string GenerateAccessKey(UserCredentials userCredentials)\n  {\n    return \"GrantedAccessKey\";\n  }\n}\n```", "```cs\npublic class UserCredentials : IIdentity\n{\n  public int Id { get; set; }\n  public string Username { get; set; }\n}\n```", "```cs\n[Fact]\npublic void GivenAnInvalidPassword()\n{\n  // Arrange/Given\n  var username = \"ValidUser@email.com\";\n  var password = \"InvalidPassword\";\n\n  // Act/When\n  var exception = Record.Exception(() => _account.Logon(username, password));\n\n  // Assert/Then\n  Assert.IsAssignableFrom<InvalidUsernameOrPasswordException>(exception);\n  Assert.Equal(\"Invalid Username or Password\", exception.Message);\n}\n```"]