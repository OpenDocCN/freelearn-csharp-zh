["```cs\nnamespace AudioPlayer.Portable.ViewModels \n{ \n    using MvvmCross.Core.ViewModels; \n\n    public class MainPageViewModel : MvxViewModel \n    { \n        public MainPageViewModel() \n        { \n        } \n   } \n} \n\n```", "```cs\npublic class MainPageViewModel : MvxViewModel \n    { \n        #region Private Properties \n\n        private string _descriptionMessage = \"Welcome to the Music Room\"; \n\n        private string _audioPlayerTitle = \"Audio Player\"; \n\n        private string _exitTitle = \"Exit\"; \n\n        private MvxCommand _audioPlayerCommand; \n\n        private MvxCommand _exitCommand; \n\n        #endregion \n} \n\n```", "```cs\n#region Public Properties \n\n        public string DescriptionMessage \n        { \n            get  \n            {  \n                return _descriptionMessage;  \n            }  \n            set  \n            {  \n                if (value.Equals(_descriptionMessage)) \n                { \n                    _descriptionMessage = value; \n                    RaisePropertyChanged (() => DescriptionMessage); \n                } \n            } \n        } \n\n        public MvxCommand AudioPlayerCommand \n        { \n            get \n            { \n                return _audioPlayerCommand; \n            } \n\n            set \n            { \n                if (value.Equals(_audioPlayerCommand)) \n                { \n                    _audioPlayerCommand = value; \n                    RaisePropertyChanged (() => AudioPlayerCommand); \n                } \n            } \n        } \n\n        #endregion \n\n```", "```cs\n\n[MvxViewFor(typeof(MainPageViewModel))] \n    public partial class MainPage : MvxViewController \n    { \n        public MainPage () \n        { \n        } \n    }  \n\n```", "```cs\npublic override void ViewDidLoad () \n        { \n            base.ViewDidLoad (); \n\n            var mainView = new UIView ()  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                BackgroundColor = UIColor.White \n            }; \n\n            var imageView = new UIImageView() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                ContentMode = UIViewContentMode.ScaleAspectFit, \n                Image = new UIImage(\"audio.png\") \n            }; \n\n            var descriptionLabel = new UILabel ()  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                TextAlignment = UITextAlignment.Center \n            }; \n\n            var audioPlayerButton = new UIButton (UIButtonType.RoundedRect)  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false \n            }; \n\n            var exitButton = new UIButton (UIButtonType.RoundedRect)  \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false \n            }; \n\n            View.Add (mainView); \n\n            // add buttons to the main view \n            mainView.Add (imageView); \n            mainView.Add (descriptionLabel); \n            mainView.Add (audioPlayerButton); \n            mainView.Add (exitButton); \n\n        } \n\n```", "```cs\nvar set = this.CreateBindingSet<MainPage, MainPageViewModel> (); \n            set.Bind(this).For(\"Title\").To(vm => vm.Title); \n            set.Bind(descriptionLabel).To(vm => vm.DescriptionMessage); \n            set.Bind(audioPlayerButton).For(\"Title\").To(vm => vm.AudioPlayerTitle); \n            set.Bind(audioPlayerButton).To(vm => vm.AudioPlayerCommand); \n            set.Bind(exitButton).For(\"Title\").To(vm => vm.ExitTitle); \n            set.Bind(exitButton).To(vm => vm.ExitCommand); \n            set.Apply (); \n\n```", "```cs\nView.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"V:|[mainView]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, new NSDictionary(\"mainView\", mainView))); \n            View.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|[mainView]|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"mainView\", mainView))); \n\n            mainView.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"V:|-80-[welcomeLabel]-[audioPlayerButton]-[exitButton]\", NSLayoutFormatOptions.DirectionLeftToRight, null, new NSDictionary(\"welcomeLabel\", welcomeLabel, \"audioPlayerButton\", audioPlayerButton, \"exitButton\", exitButton))); \n            mainView.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|-5-[welcomeLabel]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"welcomeLabel\", welcomeLabel))); \n            mainView.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|-5-[audioPlayerButton]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"audioPlayerButton\", audioPlayerButton))); \n            mainView.AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|-5-[exitButton]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"exitButton\", exitButton))); \n\n```", "```cs\n\"V:|[mainView]|\" \n\n```", "```cs\n\"H:|[mainView]|\" \n\n```", "```cs\n\"H:|-5-[audioPlayerButton]-5-|\" \n\n```", "```cs\n\"H:|-[audioPlayerButton]-|\" \n\n```", "```cs\npublic class App : MvxApplication \n    { \n        public override void Initialize() \n        { \n            CreatableTypes() \n                .EndingWith(\"Service\") \n                .AsInterfaces() \n                .RegisterAsLazySingleton(); \n        } \n    } \n\n```", "```cs\nRegisterAppStart<MainPageViewModel>(); \n\n```", "```cs\npublic class IosSetup : MvxIosSetup \n    { \n        public IosSetup(MvxApplicationDelegate applicationDelegate, UIWindow window) : base(applicationDelegate, window) \n        { \n        } \n\n        protected override IMvxApplication CreateApp() \n        { \n            return new App(); \n        } \n\n        protected override IMvxTrace CreateDebugTrace() \n        { \n            return new DebugTrace(); \n        } \n    } \n\n```", "```cs\npublic class DebugTrace : IMvxTrace \n    { \n        public void Trace(MvxTraceLevel level, string tag, Func<string> message) \n        { \n            Debug.WriteLine(tag + \":\" + level + \":\" + message()); \n        } \n\n        public void Trace(MvxTraceLevel level, string tag, string message) \n        { \n            Debug.WriteLine(tag + \":\" + level + \":\" + message); \n        } \n\n        public void Trace(MvxTraceLevel level, string tag, string message, params object[] args) \n        { \n            try \n            { \n                Debug.WriteLine(string.Format(tag + \":\" + level + \":\" + message, args)); \n            } \n            catch (FormatException) \n            { \n                Trace(MvxTraceLevel.Error, tag, \"Exception during trace of {0} {1}\", level, message); \n            } \n        } \n    } \n\n```", "```cs\npublic override bool FinishedLaunching (UIApplication application, NSDictionary launchOptions) \n        { \n            _window = new UIWindow (UIScreen.MainScreen.Bounds); \n\n            var setup = new IosSetup(this, window); \n            setup.Initialize(); \n\n            var startup = Mvx.Resolve<IMvxAppStart>(); \n            startup.Start(); \n\n            _window.MakeKeyAndVisible (); \n\n            return true; \n        } \n\n```", "```cs\npublic class AndroidSetup : MvxAndroidSetup \n    { \n        public AndroidSetup(Context context) :base(context) \n        { \n        } \n\n        protected override IMvxApplication CreateApp() \n        { \n            return new App(); \n        } \n\n        protected override IMvxTrace CreateDebugTrace() \n        { \n            return new DebugTrace(); \n        } \n    } \n\n```", "```cs\n[Activity(Label = \"AudioPlayer.Droid\" \n        , MainLauncher = true \n        , Icon = \"@drawable/icon\" \n        , Theme = \"@style/Theme.Splash\" \n        , NoHistory = true \n        , ScreenOrientation = ScreenOrientation.Portrait)] \n    public class SplashScreenActivity : MvxSplashScreenActivity \n    { \n        public SplashScreenActivity(): base(Resource.Layout.SplashScreen) \n        { \n        } \n    } \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n    android:orientation=\"vertical\" \n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"fill_parent\"> \n    <TextView   \n    android:layout_width=\"fill_parent\"  \n    android:layout_height=\"wrap_content\"  \n    android:text=\"Loading....\"/> \n</LinearLayout> \n\n```", "```cs\npublic interface ISoundHandler \n    { \n        bool IsPlaying { get; set; } \n\n        void Load(); \n\n        void PlayPause(); \n\n        void Stop(); \n\n        double Duration(); \n\n        void SetPosition(double value); \n\n        double CurrentPosition(); \n\n        void Forward(); \n\n        void Rewind(); \n    } \n\n```", "```cs\npublic class SoundHandler : ISoundHandler \n    { \n\n    } \n\n```", "```cs\nprivate AVAudioPlayer _audioPlayer; \n\npublic bool IsPlaying { get; set; } \n\n```", "```cs\npublic void Load() \n        { \n            _audioPlayer = AVAudioPlayer.FromUrl(NSUrl.FromFilename(\"Moby - The Only Thing.mp3\")); \n        } \n\npublic void PlayPause() \n        { \n            if (_audioPlayer != null) \n            { \n                if (IsPlaying) \n                { \n                    _audioPlayer.Stop(); \n                } \n                else \n                { \n                    _audioPlayer.Play(); \n                } \n\n                IsPlaying = !IsPlaying; \n            } \n        } \n\n```", "```cs\npublic void Stop() \n        { \n            if (_audioPlayer != null) \n            { \n                _audioPlayer.Stop(); \n            } \n        } \n\n        public double Duration() \n        { \n            if (_audioPlayer != null) \n            { \n                return _audioPlayer.Duration; \n            } \n\n            return 0; \n        } \n\n        public void SetPosition(double value) \n        { \n            if (_audioPlayer != null) \n            { \n                _audioPlayer.CurrentTime = value; \n            } \n        } \n\n        public double CurrentPosition() \n        { \n            if (_audioPlayer != null) \n            { \n                return _audioPlayer.CurrentTime; \n            } \n\n            return 0; \n        } \n\n        public void Forward() \n        { \n            if (_audioPlayer != null) \n            { \n                IsPlaying = false; \n\n                _audioPlayer.Stop(); \n                _audioPlayer.CurrentTime = audioPlayer.Duration; \n            } \n        } \n\n        public void Rewind() \n        { \n            if (_audioPlayer != null) \n            { \n                IsPlaying = false; \n\n                _audioPlayer.Stop(); \n                _audioPlayer.CurrentTime = 0; \n            } \n        } \n\n```", "```cs\nprivate void SetupIoC() \n{ \n     Mvx.RegisterType<ISoundHandler, SoundHandler>(); \n} \n\n```", "```cs\npublic static class PortableMvxIoCRegistrations \n    { \n        public static void InitIoC() \n        { \n            Mvx.IocConstruct<MainPageViewModel>(); \n            Mvx.IocConstruct<AudioPlayerPageViewModel>(); \n        } \n    } \n\n```", "```cs\nprivate void SetupIoC() \n        { \n            Mvx.RegisterType<ISoundHandler, SoundHandler>(); \n            PortableMvxIoCRegistrations.InitIoC(); \n        } \n\n```", "```cs\n[MvxViewFor(typeof(AudioPlayerPageViewModel))] \npublic class AudioPlayerPage : MvxViewController \n{ \n   private UIButton playButton; \n\n        private UISlider _progressSlider; \n\n        private bool _playing; \n\n        private AudioPlayerPageViewModel _model; \n} \n\n```", "```cs\npublic override void ViewDidLoad() \n        { \n            base.ViewDidLoad(); \n\n            var mainView = new UIView() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                BackgroundColor = UIColor.White \n            }; \n\n            var buttonView = new UIView() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                BackgroundColor = UIColor.Clear \n            }; \n\n            var imageView = new UIImageView() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                ContentMode = UIViewContentMode.ScaleAspectFit, \n                Image = new UIImage(\"moby.png\") \n            }; \n\n            var descriptionLabel = new UILabel() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                TextAlignment = UITextAlignment.Center \n            }; \n\n            var startLabel = new UILabel() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                TextAlignment = UITextAlignment.Left, \n            }; \n\n            var endLabel = new UILabel() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                TextAlignment = UITextAlignment.Right, \n            }; \n\n            _progressSlider = new UISlider() \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n                MinValue = 0 \n            }; \n\n            _playButton = new UIButton(UIButtonType.Custom) \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n            var rewindButton = new UIButton(UIButtonType.Custom) \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n            var fastForwardButton = new UIButton(UIButtonType.Custom) \n            { \n                TranslatesAutoresizingMaskIntoConstraints = false, \n            }; \n        } \n\n```", "```cs\n_playButton.TouchUpInside += HandlePlayButton; \n            _playButton.SetImage(UIImage.FromFile(\"play.png\"), UIControlState.Normal); \n\n```", "```cs\n        private void HandlePlayButton(object sender, EventArgs e) \n        { \n            _playing = !_playing; \n            _playButton.SetImage(UIImage.FromFile(playing ? \"pause.png\" : \"play.png\"), UIControlState.Normal); \n        } \n\n```", "```cs\nrewindButton.TouchUpInside += HandleRewindForwardButton; \n            rewindButton.SetImage(UIImage.FromFile(\"rewind.png\"), UIControlState.Normal); \nfastForwardButton.TouchUpInside += HandleRewindForwardButton; \n            fastForwardButton.SetImage(UIImage.FromFile(\"fast_forward.png\"), UIControlState.Normal); \n\n```", "```cs\n        private void HandleRewindForwardButton(object sender, EventArgs e) \n        { \n            _playing = false; \n            _playButton.SetImage(UIImage.FromFile(\"play.png\"), UIControlState.Normal); \n        } \n\n```", "```cs\npublic class DictionaryViews : IEnumerable \n    { \n        private readonly NSMutableDictionary _nsDictionary; \n\n        public DictionaryViews() \n        { \n            _nsDictionary = new NSMutableDictionary(); \n        } \n\n        public void Add(string name, UIView view) \n        { \n            _nsDictionary.Add(new NSString(name), view); \n        } \n\n        public static implicit operator NSDictionary(DictionaryViews us) \n        { \n            return us.ToNSDictionary(); \n        } \n\n        public NSDictionary ToNSDictionary() \n        { \n            return _nsDictionary; \n        } \n\n        public IEnumerator GetEnumerator() \n        { \n            return ((IEnumerable)_nsDictionary).GetEnumerator(); \n        } \n    } \n\n```", "```cs\n            var views = new DictionaryViews() \n            { \n                {\"mainView\", mainView}, \n                {\"buttonView\", buttonView}, \n                {\"imageView\", imageView}, \n                {\"descriptionLabel\", descriptionLabel}, \n                {\"startLabel\", startLabel}, \n                {\"endLabel\", endLabel}, \n                {\"progressSlider\", progressSlider}, \n                {\"playButton\", playButton}, \n                {\"rewindButton\", rewindButton}, \n                {\"fastForwardButton\", fastForwardButton} \n            }; \n\n```", "```cs\nView.Add(mainView); \n\n            mainView.Add(imageView); \n            mainView.Add(descriptionLabel); \n            mainView.Add(buttonView); \n            mainView.Add(startLabel); \n            mainView.Add(endLabel); \n            mainView.Add(progressSlider); \n\n            buttonView.Add(playButton); \n            buttonView.Add(rewindButton); \n            buttonView.Add(fastForwardButton); \n\n```", "```cs\nView.AddConstraints( \n                NSLayoutConstraint.FromVisualFormat(\"V:|[mainView]|\", NSLayoutFormatOptions.DirectionLeftToRight, null, views) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|[mainView]|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .ToArray()); \n\n```", "```cs\nmainView.AddConstraints( \n                NSLayoutConstraint.FromVisualFormat(\"V:|-100-[imageView(200)]-[descriptionLabel(30)]-[buttonView(50)]-[startLabel(30)]-[progressSlider]\", NSLayoutFormatOptions.DirectionLeftToRight, null, views) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"V:|-100-[imageView(200)]-[descriptionLabel(30)]-[buttonView(50)]-[endLabel(30)]-[progressSlider]\", NSLayoutFormatOptions.DirectionLeftToRight, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-20-[progressSlider]-20-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-25-[startLabel(70)]\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:[endLabel(70)]-25-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-5-[descriptionLabel]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-5-[imageView]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(new[] { NSLayoutConstraint.Create(buttonView, NSLayoutAttribute.CenterX, NSLayoutRelation.Equal, mainView, NSLayoutAttribute.CenterX, 1, 0) }) \n                .ToArray()); \n\n            buttonView.AddConstraints( \n                NSLayoutConstraint.FromVisualFormat(\"V:|-5-[rewindButton]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"V:|-5-[playButton]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"V:|-5-[fastForwardButton]-5-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .Concat(NSLayoutConstraint.FromVisualFormat(\"H:|-20-[rewindButton]-[playButton(100)]-[fastForwardButton]-20-|\", NSLayoutFormatOptions.AlignAllTop, null, views)) \n                .ToArray()); \n\n```", "```cs\n            var set = CreateBindingSet<AudioPlayerPage, AudioPlayerPageViewModel>(); \n            set.Apply(); \n\n```", "```cs\npublic class AudioPlayerPageViewModel : MvxViewModel \n    { \n        #region Private Properties \n\n        private readonly ISoundHandler _soundHandler; \n\n        private string _title = \"Audio Player\"; \n\n        private string _descriptionMessage = \"Moby - The Only Thing\"; \n\n        private MvxCommand _playPauseCommand; \n\n        private MvxCommand _forwardCommand; \n\n        private MvxCommand _rewindCommand; \n\n        private float _audioPosition; \n\n        private double _currentTime; \n\n        private double _endTime; \n\n        private bool _updating; \n\n        #endregion \n\n```", "```cs\npublic MvxCommand PlayPauseCommand \n        { \n            get \n            { \n                return _playPauseCommand; \n            } \n\n            set \n            { \n                if (!value.Equals(_playPauseCommand)) \n                { \n                    _playPauseCommand = value; \n                    RaisePropertyChanged (() => PlayPauseCommand); \n                } \n            } \n        } \n\n        public MvxCommand RewindCommand \n        { \n            get \n            { \n                return _rewindCommand; \n            } \n\n            set \n            { \n                if (!value.Equals(_rewindCommand)) \n                { \n                    _rewindCommand = value; \n                    RaisePropertyChanged(() => RewindCommand); \n                } \n            } \n        } \n\n```", "```cs\npublic string CurrentTimeStr \n        { \n            get \n            { \n                return TimeSpan.FromSeconds(CurrentTime).ToString(\"mm\\\\:ss\"); \n            } \n        } \n\n        public double CurrentTime \n        { \n            get \n            { \n                return _currentTime; \n            } \n\n            set \n            { \n                if (!value.Equals(_currentTime)) \n                { \n                    _currentTime = value; \n                    RaisePropertyChanged(() => CurrentTime); \n                    // everytime we change the current time, the time span values must also update \n                    RaisePropertyChanged(() => CurrentTimeStr); \n                } \n            } \n        } \n\n        public string EndTimeStr \n        { \n            get \n            { \n                return TimeSpan.FromSeconds(EndTime).ToString(\"mm\\\\:ss\"); \n            } \n        } \n\n        public double EndTime \n        { \n            get \n            { \n                return _endTime; \n            } \n\n            set \n            { \n                if (!value.Equals(_endTime)) \n                { \n                    _endTime = value; \n                    RaisePropertyChanged(() => EndTime); \n                    RaisePropertyChanged(() => EndTimeStr); \n                } \n            } \n        } \n\n```", "```cs\n#region Constructors \n\n        public AudioPlayerPageViewModel (ISoundHandler soundHandler) \n        { \n            _soundHandler = soundHandler; \n\n            // load sound file \n            _soundHandler.Load(); \n\n            EndTime = _soundHandler.Duration(); \n        } \n\n        #endregion \n\n```", "```cs\npublic void Load() \n        { \n            // make sure we only start the loop once \n            if (!_updating) \n            { \n                _updating = true; \n\n                // we are going to post a regular update to the UI with the current time \n                var context = SynchronizationContext.Current; \n\n                Task.Run(async () => \n                { \n                    while (_updating) \n                    { \n                        await Task.Delay(1000); \n\n                        context.Post(unused => \n                        { \n                            var current = _soundHandler.CurrentPosition(); ; \n\n                            if (current > 0) \n                            { \n                               CurrentTime = current; \n                            } \n\n                        }, null); \n                    } \n                }); \n            } \n        } \n\n```", "```cs\npublic void Dispose() \n        { \n            _updating = false; \n            _soundHandler.Stop(); \n        } \n\n```", "```cs\n_playPauseCommand = new MvxCommand(() => \n            { \n                // start/stop UI updates if the audio is not playing \n                if (soundHandler.IsPlaying) \n                { \n                    Dispose(); \n                } \n                else \n                { \n                    Load(); \n                } \n\n                _soundHandler.PlayPause(); \n            }); \n\n            _rewindCommand = new MvxCommand(() => \n            { \n                // set current time to the beginning \n                CurrentTime = 0; \n                _soundHandler.Rewind(); \n                Dispose(); \n            }); \n\n            _forwardCommand = new MvxCommand(() => \n            { \n                // set current time to the end \n                CurrentTime = _soundHandler.Duration(); \n                _soundHandler.Forward(); \n                Dispose(); \n            }); \n\n```", "```cs\n        public void UpdateAudioPosition(double value) \n        { \n            _soundHandler.SetPosition(value); \n        } \n\n```", "```cs\n_model = (AudioPlayerPageViewModel)DataContext; \n\n```", "```cs\nprogressSlider.ValueChanged += ProgressSliderValueChanged; \n\n```", "```cs\n        private void ProgressSliderValueChanged(object sender, EventArgs e) \n        { \n            _model.UpdateAudioPosition(_progressSlider.Value); \n        } \n\n```", "```cs\npublic override void ViewDidAppear(bool animated) \n        { \n            _model.Load(); \n\n            base.ViewDidAppear(animated); \n        } \n\n```", "```cs\npublic override void ViewDidDisappear(bool animated) \n        { \n            _model.Dispose(); \n\n            base.ViewDidDisappear(animated); \n        } \n\n```", "```cs\nset.Bind(this).For(\"Title\").To(vm => vm.Title); \n            set.Bind(descriptionLabel).To(vm => vm.DescriptionMessage); \n            set.Bind(currentLabel).To(vm => vm.CurrentTime); \n            set.Bind(endLabel).To(vm => vm.EndTime); \n            set.Bind(progressSlider).For(v => v.Value).To(vm => vm.CurrentTime);  \n            set.Bind(progressSlider).For(v => v.MaxValue).To(vm => vm.EndTime); \n            set.Bind(playButton).To(vm => vm.PlayPauseCommand); \n            set.Bind(rewindButton).To(vm => vm.RewindCommand); \n            set.Bind(fastForwardButton).To(vm => vm.ForwardCommand); \n\n```", "```cs\npublic class SoundHandler : ISoundHandler \n{ \n        private MediaPlayer _mediaPlayer; \n\n        public bool IsPlaying { get; set; } \n} \n\n```", "```cs\npublic void Load() \n        { \n            try \n            { \n                _mediaPlayer = new MediaPlayer(); \n                _mediaPlayer.SetAudioStreamType(Stream.Music); \n\n                AssetFileDescriptor descriptor = Android.App.Application.Context.Assets.OpenFd(\"Moby - The Only Thing.mp3\"); \n                _mediaPlayer.SetDataSource(descriptor.FileDescriptor, descriptor.StartOffset, descriptor.Length); \n\n                _mediaPlayer.Prepare(); \n                _mediaPlayer.SetVolume(1f, 1f); \n            } \n            catch (Exception e) \n            { \n                Debug.WriteLine(e); \n            } \n        } \n\n        public void PlayPause() \n        { \n            if (_mediaPlayer != null) \n            { \n                if (IsPlaying) \n                { \n                    _mediaPlayer.Pause(); \n                } \n                else \n                { \n                    _mediaPlayer.Start(); \n                } \n\n                IsPlaying = !IsPlaying; \n            } \n        } \n\n```", "```cs\npublic void Stop() \n        { \n            if (_mediaPlayer != null) \n            { \n                _mediaPlayer.Stop(); \n                _mediaPlayer.Reset(); \n            } \n        } \n\n        public double Duration() \n        { \n            if (_mediaPlayer != null) \n            { \n                return _mediaPlayer.Duration / 1000; \n            } \n\n            return 0; \n        } \n\n        public void SetPosition(double value) \n        { \n            if (_mediaPlayer != null) \n            { \n                _mediaPlayer.SeekTo((int)value * 1000); \n            } \n        } \n\n        public double CurrentPosition() \n        { \n            if (_mediaPlayer != null) \n            { \n                return _mediaPlayer.CurrentPosition / 1000; \n            } \n\n            return 0; \n        } \n\n        public void Forward() \n        { \n            if (_mediaPlayer != null) \n            { \n                IsPlaying = false; \n\n                _mediaPlayer.Pause(); \n                _mediaPlayer.SeekTo(_mediaPlayer.Duration); \n            } \n        } \n\n        public void Rewind() \n        { \n            if (_mediaPlayer != null) \n            { \n                IsPlaying = false; \n\n                _mediaPlayer.Pause(); \n                _mediaPlayer.SeekTo(0); \n            } \n        } \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n\n    android:orientation=\"vertical\" \n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"fill_parent\" \n    android:gravity=\"center\"> \n    <ImageView \n        android:id=\"@+id/AudioImage\" \n        android:layout_width=\"200dp\" \n        android:layout_height=\"200dp\" \n        android:src=\"img/audio\" /> \n    <TextView \n        android:id=\"@+id/DescriptionText\" \n        android:textSize=\"32sp\" \n        android:layout_marginBottom=\"5dp\" \n        android:layout_marginTop=\"5dp\" \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        local:MvxBind=\"Text DescriptionMessage\" /> \n    <Button \n        android:id=\"@+id/AudioPlayerButton\" \n        android:layout_width=\"200dp\" \n        android:layout_height=\"wrap_content\" \n        local:MvxBind=\"Text AudioPlayerTitle; Click AudioPlayerCommand\" /> \n    <Button \n        android:id=\"@+id/ExitButton\" \n        android:layout_width=\"200dp\" \n        android:layout_height=\"wrap_content\" \n        local:MvxBind=\"Text ExitTitle; Click ExitCommand\" /> \n</LinearLayout> \n\n```", "```cs\n[Activity(Label = \"Audio Player\")] \n    public class MainPage : MvxActivity \n    { \n        protected override void OnCreate(Bundle bundle) \n        { \n            base.OnCreate(bundle); \n\n            SetupIoC(); \n\n            SetContentView(Resource.Layout.MainPage); \n        } \n\n        private void SetupIoC() \n        { \n            Mvx.RegisterType<ISoundHandler, SoundHandler>(); \n            PortableMvxIoCRegistrations.InitIoC(); \n        } \n    } \n\n```", "```cs\npublic class CustomSeekBar : SeekBar \n    { \n        public event EventHandler ValueChanged; \n\n        protected CustomSeekBar(IntPtr javaReference, JniHandleOwnership transfer) \n            : base(javaReference, transfer) \n        { \n        } \n\n        public CustomSeekBar(Context context) \n            : base(context) \n        { \n\n        } \n\n        public CustomSeekBar(Context context, IAttributeSet attrs) \n            : base(context, attrs) \n        { \n        } \n\n        public CustomSeekBar(Context context, IAttributeSet attrs, int defStyle) \n            : base(context, attrs, defStyle) \n        { \n        } \n\n        public override bool OnTouchEvent(MotionEvent evt) \n        { \n            if (!Enabled) \n                return false; \n\n            switch (evt.Action) \n            { \n                // only fire value change events when the touch is released \n                case MotionEventActions.Up: \n                    { \n                        if (ValueChanged != null) \n                        { \n                            ValueChanged(this, EventArgs.Empty); \n                        } \n                    } \n                    break; \n            } \n\n            // we also want to fire all base motion events \n            base.OnTouchEvent(evt); \n\n            return true; \n        } \n    } \n\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?> \n<LinearLayout  \n\n    android:orientation=\"vertical\" \n    android:layout_width=\"fill_parent\" \n    android:layout_height=\"fill_parent\" \n    android:gravity=\"center\"> \n    <ImageView \n        android:id=\"@+id/AudioImage\" \n        android:layout_marginTop=\"20dp\" \n        android:layout_marginBottom=\"80dp\" \n        android:layout_width=\"200dp\" \n        android:layout_height=\"200dp\" \n        android:src=\"img/moby\" /> \n    <LinearLayout \n        android:layout_width=\"wrap_content\" \n        android:layout_height=\"wrap_content\" \n        android:orientation=\"horizontal\" \n        android:gravity=\"center\"> \n        <ImageButton \n            android:id=\"@+id/RewindButton\" \n            android:layout_width=\"50dp\" \n            android:layout_height=\"50dp\" \n            android:src=\"img/rewind\" \n            local:MvxBind=\"Click RewindCommand\" /> \n        <ImageButton \n            android:id=\"@+id/PlayButton\" \n            android:layout_marginLeft=\"20dp\" \n            android:layout_marginRight=\"20dp\" \n            android:layout_width=\"50dp\" \n            android:layout_height=\"50dp\" \n            android:src=\"img/play\" \n            local:MvxBind=\"Click PlayPauseCommand\" /> \n        <ImageButton \n            android:id=\"@+id/ForwardButton\" \n            android:layout_width=\"50dp\" \n            android:layout_height=\"50dp\" \n            android:src=\"img/fast_forward\" \n            local:MvxBind=\"Click ForwardCommand\" /> \n    </LinearLayout> \n    <LinearLayout \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:orientation=\"horizontal\" \n        android:gravity=\"center\"> \n        <TextView \n            android:id=\"@+id/CurrentTimeText\" \n            android:textSize=\"32sp\" \n            android:layout_marginBottom=\"5dp\" \n            android:layout_marginTop=\"5dp\" \n            android:layout_marginLeft=\"20dp\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:layout_weight=\"1\" \n            android:gravity=\"left\" \n            local:MvxBind=\"Text CurrentTimeStr\" /> \n        <TextView \n            android:id=\"@+id/EndTimeText\" \n            android:textSize=\"32sp\" \n            android:layout_marginBottom=\"5dp\" \n            android:layout_marginTop=\"5dp\" \n            android:layout_marginRight=\"20dp\" \n            android:layout_width=\"wrap_content\" \n            android:layout_height=\"wrap_content\" \n            android:layout_weight=\"1\" \n            android:gravity=\"right\" \n            local:MvxBind=\"Text EndTimeStr\" /> \n    </LinearLayout> \n    <AudioPlayer.Droid.Controls.CustomSeekBar \n        android:layout_width=\"fill_parent\" \n        android:layout_height=\"wrap_content\" \n        android:layout_gravity=\"center_vertical\" \n        android:layout_marginLeft=\"20dp\" \n        android:layout_marginRight=\"20dp\" \n        android:id=\"@+id/seekBar\" \n        local:MvxBind=\"Progress CurrentTime; Max EndTime\" /> \n</LinearLayout> \n\n```", "```cs\n[Activity(NoHistory = true)] \n    public class AudioPlayerPage : MvxActivity \n    { \n        private bool _playing; \n\n        private ImageButton _playButton; \n\n        private CustomSeekBar _seekBar; \n\n        private AudioPlayerPageViewModel _model; \n\n        protected override void OnCreate(Bundle bundle) \n        { \n            base.OnCreate(bundle); \n\n            SetContentView(Resource.Layout.AudioPlayerPage); \n\n            _seekBar = FindViewById<CustomSeekBar>(Resource.Id.seekBar); \n            _seekBar.ValueChanged += handleValueChanged; \n\n            _playButton = FindViewById<ImageButton>(Resource.Id.PlayButton); \n            _playButton.SetColorFilter(Color.White); \n            _playButton.Click += handlePlayClick; \n\n            var rewindButton = FindViewById<ImageButton>(Resource.Id.RewindButton); \n            rewindButton.SetColorFilter(Color.White); \n            rewindButton.Click += handleRewindForwardClick; \n\n            var forwardButton = FindViewById<ImageButton>(Resource.Id.ForwardButton); \n            forwardButton.SetColorFilter(Color.White); \n            forwardButton.Click += handleRewindForwardClick; \n\n            _model = (AudioPlayerPageViewModel)ViewModel; \n        } \n    } \n\n```", "```cs\nprivate void HandleValueChanged(object sender, System.EventArgs e) \n        { \n            _model.UpdateAudioPosition(_seekBar.Progress); \n        } \n\n        private void HandlePlayClick(object sender, System.EventArgs e) \n        { \n            _playing = !_playing; \n            _playButton.SetImageResource(playing ? Resource.Drawable.pause : Resource.Drawable.play); \n        } \n\n        private void handleRewindForwardClick(object sender, System.EventArgs e) \n        { \n            _playing = false; \n            _playButton.SetImageResource(Resource.Drawable.play); \n        } \n\n        protected override void OnDestroy() \n        { \n            _model.Dispose(); \n\n            base.OnDestroy(); \n        } \n\n```", "```cs\n_model = (AudioPlayerPageViewModel)DataContext; \n\n```", "```cs\n_model = (AudioPlayerPageViewModel)ViewModel; \n\n```"]