- en: Testing Services Using Postman
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Postman 测试服务
- en: Postman is one of the most powerful tools we can use to query APIs and is mainly
    available to developers and enterprise teams. In this chapter, we will introduce
    Postman and show you how to use this tool to test and monitor a web service. Postman
    is described as an API-first solution with the industry's only complete API development
    environment. Next, we will learn how to use Postman to call a generic HTTP API.
    Then, we will learn how to import the OpenAPI Specification we generated in the
    previous chapter into Postman to automatically generate the API calls that are
    implemented in the catalog service.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 是我们可用于查询 API 的最强大的工具之一，主要面向开发者和企业团队。在本章中，我们将介绍 Postman 并展示如何使用此工具测试和监控
    Web 服务。Postman 被描述为以 API 为首的解决方案，拥有行业唯一的完整 API 开发环境。接下来，我们将学习如何使用 Postman 调用通用
    HTTP API。然后，我们将学习如何将上一章中生成的 OpenAPI 规范导入 Postman，以自动生成在目录服务中实现的 API 调用。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Overview of Postman
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Postman 概述
- en: Importing a collection using OpenAPI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenAPI 导入集合
- en: By the end of this chapter, you will have learned how to use Postman to test
    and verify API responses through the Postman UI and by using the automated testing
    tools.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，你将学会如何使用 Postman 通过 Postman UI 和自动化测试工具来测试和验证 API 响应。
- en: Overview of Postman
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Postman 概述
- en: Postman can be used within a company to share internal APIs and applies the
    concept of collections so that it can group, index, and query web services. A
    collection is a group of HTTP calls related to the same service or a collection
    of services.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 可以在公司内部使用，用于共享内部 API，并应用集合的概念，以便它可以对相关服务或服务集合进行分组、索引和查询。集合是一组与同一服务或服务集合相关的
    HTTP 调用。
- en: 'The following screenshot shows a conventional UI for Postman. On the left,
    you can see a list of *collections* that are available in the Postman account,
    while on the right, you can see the core part of the UI:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 Postman 的传统 UI。在左侧，你可以看到 Postman 账户中可用的 *集合* 列表，而在右侧，你可以看到 UI 的核心部分：
- en: '![](img/90eb6aca-fc74-4044-99f6-c0a5a9ae01a6.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/90eb6aca-fc74-4044-99f6-c0a5a9ae01a6.png)'
- en: The first half of the UI represents the HTTP request we intend to launch. Each
    tab at the top of the interface represents an API call; it is possible to type
    in a URL and specify the HTTP verb on the left. For each request, it is also possible
    to specify the query parameters, the authorization specification, the headers,
    the body, and some scripts that we will execute before and after every request.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: UI 的前半部分代表我们打算发起的 HTTP 请求。界面上方的每个标签页代表一个 API 调用；可以在左侧输入 URL 并指定 HTTP 动词。对于每个请求，还可以指定查询参数、授权规范、头部、正文以及在我们每次请求前后要执行的脚本。
- en: 'Here, the request uses the `{{baseUrl}}/api/artists/:id` URL and passes `id:<guid_value>`.
    It is important to note that, in Postman, it is possible to specify environment
    variables that can be used to parameterize our API queries. In this case, the
    `{{baseUrl}}` placeholder is replaced with the values specified in the collection.
    It is possible to view the collection variables by clicking on the three dots
    next to the collection name, selecting Edit, and then navigating to the Variables
    tab:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，请求使用 `{{baseUrl}}/api/artists/:id` URL 并传递 `id:<guid_value>`。需要注意的是，在 Postman
    中，可以指定环境变量，这些变量可以用于参数化我们的 API 查询。在这种情况下，`{{baseUrl}}` 占位符被替换为集合中指定的值。可以通过单击集合名称旁边的三个点、选择编辑并导航到变量选项卡来查看集合变量：
- en: '![](img/fcff8238-3dba-42eb-87ba-b7b5daf53bde.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fcff8238-3dba-42eb-87ba-b7b5daf53bde.png)'
- en: 'The second part of the Postman interface is focused on the response of the
    request. The main section contains the JSON response of the API:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 界面的第二部分专注于请求的响应。主要部分包含 API 的 JSON 响应：
- en: '![](img/03db581c-8a6a-4f36-8d11-67f4463c8cae.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/03db581c-8a6a-4f36-8d11-67f4463c8cae.png)'
- en: On the right-hand side, we have the Status of the response, the response Time,
    and the Size of the response. Furthermore, it is possible to switch the format
    of the response so that it's either JSON, HTML, or raw text. The response section
    also provides some detailed information about the Headers, Cookies, and Test Results.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，我们有响应的状态、响应时间和响应大小。此外，还可以切换响应的格式，使其为 JSON、HTML 或纯文本。响应部分还提供了有关头部、Cookies
    和测试结果的详细信息。
- en: In the next section, we will learn how to automatically test our API using Postman's
    tools.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 Postman 的工具自动测试我们的 API。
- en: Testing the API using Postman
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Postman 测试 API
- en: 'Postman also provides us with a helpful tool/framework that we can use to test
    our APIs automatically. The test runtime is based on Node.js; for that reason,
    we should write a test assertion using JavaScript. The test framework of Postman
    uses the following workflow to test our code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 还为我们提供了一个有用的工具/框架，我们可以用它来自动测试我们的 API。测试运行时基于 Node.js；因此，我们应该使用 JavaScript
    编写测试断言。Postman 的测试框架使用以下工作流程来测试我们的代码：
- en: '![](img/007fe9da-7399-431b-ad1a-335f4959ccc7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/007fe9da-7399-431b-ad1a-335f4959ccc7.png)'
- en: 'The scripts will execute as follows for every request in a collection:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于集合中的每个请求，脚本将按以下方式执行：
- en: A pre-request script will run before every request in the collection. This is
    considered the setup part of a test case.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合中的每个请求之前都会运行一个预请求脚本。这被认为是测试用例的设置部分。
- en: A test script will run after every request in the collection; this is the core
    part of our test. Furthermore, it provides the core assertions for our test.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在集合中的每个请求之后都会运行一个测试脚本；这是我们的测试的核心部分。此外，它还提供了我们测试的核心断言。
- en: 'Let''s use this procedure to implement a simple test for our API:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个程序来实现我们 API 的简单测试：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you can see, the test uses the `pm` global object to describe a test, and
    it adds a callback function to make some assertions. In this case, it checks whether
    the API has a status of `200` OK. The following implementation can be added to
    a request by typing the preceding code into the Tests tab of the request, as shown
    in the following screenshot:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，测试使用 `pm` 全局对象来描述一个测试，并添加一个回调函数来进行一些断言。在这种情况下，它检查 API 是否具有 `200` OK 状态。以下实现可以通过在请求的测试标签页中输入前面的代码来添加到请求中，如下面的屏幕截图所示：
- en: '![](img/5e379cc0-c364-441a-82fe-9ecf0519dfc1.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e379cc0-c364-441a-82fe-9ecf0519dfc1.png)'
- en: 'After that, we will be able to check the result in the response part of Postman:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们将在 Postman 的响应部分检查结果：
- en: '![](img/1ca0e823-f4e5-4c7d-b5ca-a1f561d0a2e8.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1ca0e823-f4e5-4c7d-b5ca-a1f561d0a2e8.png)'
- en: The test results section that's shown in the preceding screenshot contains four
    different subtabs, all of which group the tests by the results. If an error occurs,
    the UI provides details of the error.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个屏幕截图中所显示的测试结果部分包含四个不同的子标签页，所有这些标签页都将测试按结果分组。如果发生错误，UI 将提供错误详情。
- en: Using the runner to test the APIs
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用运行器测试 API
- en: The Postman team built a runner tool that automatically tests and runs your
    APIs so that you can – quite literally – sit back and watch your API test itself.
    Furthermore, you can use scripts to build integration test suites, pass data between
    API requests, and build workflows that mirror your actual API use cases.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 团队构建了一个运行器工具，可以自动测试和运行您的 API，这样您就可以——字面意义上——坐下来观看您的 API 进行测试。此外，您可以使用脚本构建集成测试套件，在
    API 请求之间传递数据，并构建反映您实际 API 用例的工作流程。
- en: 'The runner feature requires at least one test to be associated with the request
    so that it can assert the result. It is possible to access the runner interface
    of Postman by clicking on the Runner button (shown in the yellow rectangle in
    the following screenshot), which can be found in the top-left corner of the screen,
    and selecting the collection you want to run:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 运行器功能要求至少有一个测试与请求相关联，以便它可以断言结果。可以通过点击屏幕左上角的运行器按钮（如下一个屏幕截图中的黄色矩形所示），并选择要运行的集合来访问
    Postman 的运行器界面：
- en: '![](img/e8d6489f-8217-47df-baff-5841911b1d2f.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e8d6489f-8217-47df-baff-5841911b1d2f.png)'
- en: 'Postman also allows us to integrate these functionalities using the CLI. The
    development team published an `npm` package to execute the runner in a localhost
    environment. It is possible to install this package on your local machine using
    the following command:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Postman 还允许我们使用 CLI 集成这些功能。开发团队发布了一个 `npm` 包，用于在本地主机环境中执行运行器。您可以使用以下命令在您的本地计算机上安装此包：
- en: '[PRE1]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After that, it is possible to execute the runner on a specific collection by
    passing the JSON file that represents the collection and then executing the preceding
    command. It is possible to export a collection by clicking on the three points
    next to the collection and clicking on the Export option:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，可以通过传递表示集合的 JSON 文件并执行前面的命令来在特定的集合上执行运行器。可以通过点击集合旁边的三个点并点击导出选项来导出集合：
- en: '![](img/16d976d6-9b72-4a18-ade8-104bb5d2741f.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/16d976d6-9b72-4a18-ade8-104bb5d2741f.png)'
- en: 'Then, we can proceed by executing this command on the file:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以通过在文件上执行以下命令来继续：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The resulting execution will look something similar to the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 结果执行将类似于以下内容：
- en: '![](img/f06b7f68-082e-4de4-ad13-042d963e41fd.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f06b7f68-082e-4de4-ad13-042d963e41fd.png)'
- en: This implementation provides a single and detailed response of each request
    that was tested and a final report that shows all the information related to the
    tests. This approach is really useful when we want to integrate Postman's testing
    capabilities into a continuous integration pipeline. All we need to do is install
    the `newman` tool on our server and add the path of the collection.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 此实现提供了每个测试请求的单一详细响应以及显示所有与测试相关的信息的最终报告。当我们将 Postman 的测试功能集成到持续集成管道中时，这种方法非常有用。我们只需要在我们的服务器上安装
    `newman` 工具并添加收集的路径。
- en: In the next section, we will learn how to use the OpenAPI Specification (described
    in the previous chapter) to automatically generate a Postman collection.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用 OpenAPI 规范（在上一章中描述）来自动生成 Postman 收集。
- en: Importing a collection using OpenAPI
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 OpenAPI 导入收集
- en: 'In this section, you will learn how to import a collection using the OpenAPI
    Specification. Postman uses some of common API description standards, such as
    OpenAPI v3, Swagger v2 and v1 (as described in the previous chapter), to import
    the routes of web services. Let''s get started:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何使用 OpenAPI 规范导入收集。Postman 使用一些常见的 API 描述标准，例如 OpenAPI v3、Swagger
    v2 和 v1（如前一章所述），以导入 Web 服务的路由。让我们开始吧：
- en: 'First of all, click on the Import (shown in the yellow rectangle) button at
    the top-left corner of the screen and click on the Import from Link tab:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，点击屏幕左上角的导入（显示在黄色矩形中）按钮，然后点击“从链接导入”标签：
- en: '![](img/fef80a91-2a6f-48aa-afd7-30e88edc7985.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fef80a91-2a6f-48aa-afd7-30e88edc7985.png)'
- en: 'Now, we can copy and paste the URL of the document API of the running localhost
    service, like so:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以复制并粘贴正在运行的 localhost 服务的文档 API 的 URL，如下所示：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: By doing this, the collection will be imported with the same name that we gave
    our Swagger document. This will contain a selection of all the routes that were
    described by Swagger.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，收集将以我们给 Swagger 文档相同的名称导入。这将包含 Swagger 描述的所有路由的选择。
- en: Summary
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use Postman to query, test, and monitor web
    services. Postman's capabilities go beyond this; however, we can also share collections
    of APIs with other teams and with our consumers. It is an essential tool for any
    API consumer if they wish to check the results and the information provided by
    the consumed services.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 Postman 查询、测试和监控 Web 服务。Postman 的功能远不止于此；然而，我们还可以与其他团队和我们的消费者共享
    API 收集。如果 API 消费者希望检查所消费服务提供的成果和信息，它是一个必不可少的工具。
- en: You now have the necessary knowledge to use the Postman suite to test and verify
    a web service.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在拥有了使用 Postman 套件测试和验证 Web 服务的必要知识。
