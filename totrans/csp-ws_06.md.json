["```cs\n    C:\\<change-with-your-download-path-to-The-C-Sharp-Workshop>\\Chapter06\\AdventureWorks\\>\n    ```", "```cs\n    psql -U postgres -c \"CREATE DATABASE \\\"Adventureworks\\\";\"\n    ```", "```cs\n    psql -d Adventureworks -f install.sql -U postgres\n    ```", "```cs\nusing var connection = new NpgsqlConnection(Program.GlobalFactoryConnectionString);\nconnection.Open(); \nNpgsqlCommand command = new NpgsqlCommand(\"SELECT * FROM factory.product\", connection);\nvar reader = command.ExecuteReader();\nvar products = new List<Product>();\nwhile (reader.Read())\n{\n    products.Add(new Product\n    {\n        Id = (int)reader[\"id\"],\n        //ManufacturerId = (int)reader[\"ManufacturerId\"],\n        Name = (string)reader[\"name\"],\n        Price = (decimal)reader[\"price\"]\n    });\n}\nreturn products;\n```", "```cs\nSELECT * FROM Users WHERE UserId = 105\n```", "```cs\nSELECT * FROM Users WHERE UserId = 105 or 1 = 1\n```", "```cs\n\"Host=localhost;Username=postgres;Password=*****;Database=globalfactory2021\"\n```", "```cs\n    Host=localhost;Username=postgres;Password=*****;Database=globalfactory2021\n    ```", "```cs\npublic static string ConnectionString { get; } = Environment.GetEnvironmentVariable(\"GlobalFactory\", EnvironmentVariableTarget.User);\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore\n```", "```cs\ndotnet add package Npgsql.EntityFrameworkCore.PostgreSQL\n```", "```cs\npublic class Product\n{\n    public int id { get; set; }\n    public string name { get; set; }\n    public decimal price { get; set; }\n    public int manufacturerId { get; set; }\n}\n```", "```cs\npublic class Product\n{\n    [Key]\n    public int PrimaryKey { get; set; }\n    public string name { get; set; }\n    public decimal price { get; set; }\n    public int manufacturerId { get; set; }\n}\n```", "```cs\n[Table(\"manufacturer\", Schema = \"factory\")]\npublic class Manufacturer\n{\n    public int id { get; set; }\n    public string name { get; set; }\n    public string country { get; set; }\n    public virtual ICollection<Product> Products { get; set; } = new List<Product>();\n}\n```", "```cs\n[Table(\"product\", Schema = \"factory\")]\npublic class Product\n{\n    public int id { get; set; }\n    public string name { get; set; }\n    public decimal price { get; set; }\n    public int manufacturerId { get; set; }\n    public virtual Manufacturer Manufacturer { get; set; }\n}\n```", "```cs\npublic class FactoryDbContext : DbContext\n{\n    public DbSet<Product> Products { get; set; }\n    public DbSet<Manufacturer> Manufacturers { get; set; }\n\n    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n    {\n        if (!optionsBuilder.IsConfigured)\n        {\n            optionsBuilder.UseNpgsql(Program.GlobalFactoryConnectionString);\n        }\n    }\n}\n```", "```cs\n public FactoryDbContext(DbContextOptions<FactoryDbContext> options)\n    : base(options)\n{\n}\n```", "```cs\npublic FactoryDbContext()\n    : base(UsePostgreSqlServerOptions())\n{\n}\n```", "```cs\nprotected static DbContextOptions UsePostgreSqlServerOptions()\n{\n    return new DbContextOptionsBuilder()\n        .UseNpgsql(Program.ConnectionString)\n        .Options;\n}\n```", "```cs\nFactoryDbContext.cs\npublic class FactoryDbContext : DbContext\n{\n    public DbSet<Product> Products { get; set; }\n    public DbSet<Manufacturer> Manufacturers { get; set; }\n\n    public FactoryDbContext(DbContextOptions<FactoryDbContext> options)\n        : base(options)\n    {\n    }\n\n    public FactoryDbContext()\n        : base(UsePostgreSqlServerOptions())\n    {\n    }\nThe complete code can be found here: https://packt.link/0uVPP.\n```", "```cs\nusing var context = new FactoryDbContext();\nvar products = context.Products.ToList();\n```", "```cs\nusing var context = new FactoryDbContext()\n```", "```cs\n    [Table(\"location\", Schema = \"production\")]\n    public class Location\n    {\n        [Column(\"locationid\")]\n        public int LocationId { get; set; }\n        [Column(\"name\")]\n        public string Name { get; set; }\n        [Column(\"costrate\")]\n        public double Costrate { get; set; }\n        [Column(\"availability\")]\n        public double Availability { get; set; }\n        [Column(\"modifieddate\")]\n        public DateTime ModifiedDate { get; set; }\n    }\n    ```", "```cs\n    public class AdventureWorksContext : DbContext\n    {\n        public DbSet<Location> Locations { get; set; }\n\n        public AdventureWorksContext()\n            : base(UsePostgreSqlServerOptions())\n        {\n        }\n\n        protected static DbContextOptions UsePostgreSqlServerOptions()\n        {\n            return new DbContextOptionsBuilder()\n                .UseNpgsql(Program.AdventureWorksConnectionString)\n                .Options;\n        }\n    ```", "```cs\n    Host=localhost;Username=postgres;Password=****;Database=Adventureworks. DbSet<Location>Locations\n    ```", "```cs\n    var db = new AdventureWorksContext();\n    ```", "```cs\n    var locations = db.Locations.ToList();\n    ```", "```cs\n    db.Dispose();\n    ```", "```cs\n    foreach (var location in locations)\n    {\n        Console.WriteLine($\"{location.LocationId} {location.Name} {location.Costrate} {location.Availability} {location.ModifiedDate}\");\n    }\n    ```", "```cs\n1 Tool Crib 0 0 2008-04-30 00:00:00\n2 Sheet Metal Racks 0 0 2008-04-30 00:00:00\n3 Paint Shop 0 0 2008-04-30 00:00:00\n4 Paint Storage 0 0 2008-04-30 00:00:00\n5 Metal Storage 0 0 2008-04-30 00:00:00\n6 Miscellaneous Storage 0 0 2008-04-30 00:00:00\n7 Finished Goods Storage 0 0 2008-04-30 00:00:00\n10 Frame Forming 22,5 96 2008-04-30 00:00:00\n20 Frame Welding 25 108 2008-04-30 00:00:00\n30 Debur and Polish 14,5 120 2008-04-30 00:00:00\n40 Paint 15,75 120 2008-04-30 00:00:00\n45 Specialized Paint 18 80 2008-04-30 00:00:00\n50 Subassembly 12,25 120 2008-04-30 00:00:00\n60 Final Assembly 12,25 120 2008-04-30 00:00:00\n```", "```cs\npublic Product GetByName(string name)\n{\n    var product = db.Products.FirstOrDefault(p => p.Name == name);\n    return product;\n}\n```", "```cs\npublic Product GetById(int id)\n{\n    var product = db.Products.Find(id);\n    return product;\n}\n```", "```cs\npublic IEnumerable<Product> GetByManufacturer(int manufacturerId)\n{    var products = db\n        .Products\n        .Where(p => p.Manufacturer.Id == manufacturerId)\n        .ToList();\n\n    return products;\n}\n```", "```cs\ndb.Manufacturers\n.Include(m => m.Products)\n.ToList();\n```", "```cs\ndb.Products\n.Join(db.Manufacturers,\n    p => p.ManufacturerId, m => m.Id,\n    (p, m) => new {Product = p.Name, Manufacturer = m.Name})\n.ToList();\n```", "```cs\n(from p in db.Products\njoin m in db.Manufacturers\n    on p.ManufacturerId equals m.Id\nselect new {Product = p.Name, Manufacturer = m.Name}\n).ToList();\n```", "```cs\nfrom p in db.Products\n```", "```cs\njoin m in db.Manufacturers\n```", "```cs\non p.ManufacturerId equals m.Id\n```", "```cs\nforeach(var product in db.Products)\n```", "```cs\nfrom product in db.Products\n```", "```cs\nvar product = new Product\n{\n    Name = \"Teddy Bear\",\n    Price = 10,\n    ManufacturerId = 1\n};\ndb.Products.Add(product);\ndb.SaveChanges();\n```", "```cs\nvar manufacturer = new Manufacturer\n{\n    Country = \"Lithuania\",\n    Name = \"Toy Lasers\",\n    Products = new List<Product>\n    {\n        new()\n        {\n            Name = \"Laser S\",\n            Price = 4.01m\n        },\n        new()\n        {\n            Name = \"Laser M\",\n            Price = 7.99m\n        }\n    }\n};\ndb.Manufacturers.Add(manufacturer);\ndb.SaveChanges();\n```", "```cs\nvar productUpdate = new Product\n{\n    Id = existingProduct.Id,\n    Price = 45.99m,\n    ManufacturerId = existingProduct.ManufacturerId,\n    Name = existingProduct.Name\n};\ndb.Products.Update(productUpdate);\n db.SaveChanges();\n```", "```cs\nvar productToUpdate = db.Products.Find(productUpdate.Id);\nvar anyProductToUpdate = productToUpdate != null;\nif (anyProductToUpdate)\n{\n    productToUpdate.Name = productUpdate.Name ?? productToUpdate.Name;\n\n    productToUpdate.ManufacturerId = (productUpdate.ManufacturerId != default)\n        ? productUpdate.ManufacturerId\n        : productToUpdate.ManufacturerId;\n\n    productToUpdate.Price = (productUpdate.Price != default)\n        ? productUpdate.Price\n        : productToUpdate.Price;\n\n    db.SaveChanges();\n}\n```", "```cs\nvar productToDelete = db.Products.Find(productId);\nif (productToDelete != null)\n{\n    db.Products.Remove(productToDelete);\n    db.SaveChanges();\n} \n```", "```cs\n    public class GlobalFactoryService : IDisposable\n    {\n        private readonly FactoryDbContext _context;\n\n        public GlobalFactoryService(FactoryDbContext context)\n        {\n            _context = context;\n        }\n    ```", "```cs\n    public void CreateManufacturersInUsa(IEnumerable<string> names)\n    {\n        var manufacturers = names\n            .Select(name => new Manufacturer()\n            {\n                Name = name,\n                Country = \"USA\"\n            });\n\n        _context.Manufacturers.AddRange(manufacturers);\n        _context.SaveChanges();\n    }\n    ```", "```cs\n    public void CreateUsaProducts(IEnumerable<Product> products)\n    {\n        var manufacturersInUsa = _context\n            .Manufacturers\n            .Where(m => m.Country == \"USA\")\n            .ToList();\n\n        foreach (var product in products)\n        {\n            manufacturersInUsa.ForEach(m => m.Products.Add(\n                new Product {Name = product.Name, Price = product.Price}\n                ));\n        }\n\n        _context.SaveChanges();\n    }\n    ```", "```cs\n    public void SetAnyUsaProductOnDiscount(decimal discountedPrice)\n    {\n        var anyProductInUsa = _context\n            .Products\n            .FirstOrDefault(p => p.Manufacturer.Country == \"USA\");\n\n        anyProductInUsa.Price = discountedPrice;\n\n        _context.SaveChanges();\n    }\n    ```", "```cs\n    public void RemoveAnyProductInUsa()\n    {\n        var anyProductInUsa = _context\n            .Products\n            .FirstOrDefault(p => p.Manufacturer.Country == \"USA\");\n\n        _context.Remove(anyProductInUsa);\n        _context.SaveChanges();\n    }\n    ```", "```cs\n      public IEnumerable<Manufacturer> GetManufacturersInUsa()\n      {\n          var manufacturersFromUsa = _context\n              .Manufacturers\n              .Include(m => m.Products)\n              .Where(m => m.Country == \"USA\")\n              .ToList();\n\n          return manufacturersFromUsa;\n      }\n    }\n    ```", "```cs\n    Demo.cs\n    public static class Demo\n    {\n        public static void Run()\n        {\n            var service = new GlobalFactoryService(new FactoryDbContext());\n            service.CreateManufacturersInUsa(new []{\"Best Buy\", \"Iron Retail\"});\n            service.CreateUsaProducts(new []\n            {\n                new Product\n                {\n                    Name = \"Toy computer\",\n                    Price = 20.99m\n                },\n                new Product\n                {\n    ```", "```cs\nThe complete code can be found here: https://packt.link/qMYbi.\n```", "```cs\nBest Buy:\nLoli microphone 5\nIron Retail:\nToy computer 20,99\nLoli microphone 7,51\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.tools\n```", "```cs\ndotnet ef dbcontext scaffold \"Host=localhost;Username=postgres;Password=****;Database=Adventureworks\" Npgsql.EntityFrameworkCore.PostgreSQL -o your/models/path --schema \"production\"\n```", "```cs\npublic globalfactory2021Context()\n        {\n        }\n        public globalfactory2021Context(DbContextOptions<globalfactory2021Context> options)\n            : base(options)\n        {\n        } \n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            if (!optionsBuilder.IsConfigured)\n            {\n                optionsBuilder.UseNpgsql(Program.GlobalFactoryConnectionString);\n            }\n        }\n```", "```cs\nglobalfactory2021Context.cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\nmodelBuilder.Entity<Manufacturer>(entity =>\n{\n              entity.ToTable(\"manufacturer\", \"factory\");\n\n              entity.Property(e => e.Id)\n                      .HasColumnName(\"id\")\n                      .UseIdentityAlwaysColumn();\n\n              entity.Property(e => e.Country)\n                      .IsRequired()\n                      .HasMaxLength(50)\n                      .HasColumnName(\"country\");\nThe complete code can be found here: https://packt.link/S5s6d.\n```", "```cs\nmodelBuilder.Entity< Manufacturer >(entity =>\n```", "```cs\nentity.ToTable(\"manufacturer\", \"factory\");\n```", "```cs\nentity.Property(e => e.Name)\n        .IsRequired()\n        .HasMaxLength(50)\n   .HasColumnName(\"name\");\n```", "```cs\n                entity.HasOne(d => d.Manufacturer)\n                    .WithMany(p => p.Products)\n                    .HasForeignKey(d => d.Manufacturerid)\n                    .HasConstraintName(\"product_manufacturerid_id\");\n```", "```cs\nUnable to determine the relationship represented by navigation property Entity.NavProperty' of type 'AnotherEntity'. Either manually configure the relationship, or ignore this property from the model.\n```", "```cs\ndotnet ef dbcontext scaffold \"Host=localhost;Username=postgres;Password=****;Database=globalfactory2021\" Npgsql.EntityFrameworkCore.PostgreSQL -o Examples/GlobalFactory2021.\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```", "```cs\ndotnet ef migrations add MyFirstMigration -c globalfactory2021Context\n```", "```cs\ndotnet ef database update -c globalfactory2021context\n```", "```cs\npublic DateTime FoundedAt { get; set; }\n```", "```cs\nentity.Property(e => e.FoundedAt)\n    .HasColumnType(\"date\")\n```", "```cs\ndotnet ef migrations add AddManufacturerFoundedDate -c globalfactory2021Context\n```", "```cs\ndotnet ef database update -c globalfactory2021context\n```", "```cs\ndotnet ef database update MyFirstMigration -c globalfactory2021context\n```", "```cs\ndotnet ef migrations remove -c globalfactory2021Context\n```", "```cs\ndotnet ef migrations script -c globalfactory2021context\n```", "```cs\npublic class ProductPriceHistory\n{\n    public int Id { get; set; }\n    public decimal Price { get; set; }\n    public DateTime DateOfPrice { get; set; }\n    public int ProductId { get; set; }\n\n    public Product Product { get; set; }\n}\n```", "```cs\n    public ICollection<ProductPriceHistory> PriceHistory { get; set; }\n    ```", "```cs\n    public partial class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public int ManufacturerId { get; set; }\n\n        public decimal GetPrice() => PriceHistory\n            .Where(p => p.ProductId == Id)\n            .OrderByDescending(p => p.DateOfPrice)\n            .First().Price;\n\n        public Manufacturer Manufacturer { get; set; }\n        public ICollection<ProductPriceHistory> PriceHistory { get; set; }\n    }\n    ```", "```cs\n    modelBuilder.Entity<ProductPriceHistory>(entity =>\n    {\n        entity.ToTable(\"ProductPriceHistory\", \"Factory\");\n\n        entity.Property(e => e.Price)\n            .HasColumnType(\"money\");\n\n        entity.Property(e => e.DateOfPrice)\n            .HasColumnType(\"date\");\n    ```", "```cs\n     RelationalForeignKeyBuilderExtensions.HasConstraintName((ReferenceCollectionBuilder)\n            entity.HasOne(d => d.Product)\n                .WithMany(p => p.PriceHistory)\n                .HasForeignKey(d => d.ProductId), \"FK_ProductPriceHistory_Product\");\n    });\n    ```", "```cs\n    dotnet ef migrations add AddProductPriceHistory -c globalfactory2021Contextv3 -o Exercises/Exercise03/Migrations\n    ```", "```cs\n    dotnet ef database update -c globalfactory2021contextv3\n    ```", "```cs\n    Demo.cs\n    public static class Demo\n    {\n        public static void Run()\n        {\n            var db = new globalfactory2021Contextv3();\n            var manufacturer = new Manufacturer\n            {\n                Country = \"Canada\",\n                FoundedAt = DateTime.UtcNow,\n                Name = \"Fake Toys\"\n            };\n\n            var product = new Product\n            {\n                Name = \"Rubber Sweater\",\n    ```", "```cs\nThe complete code can be found here: https://packt.link/4FMz4.\n```", "```cs\n    Fake Toys Rubber Sweater 15.5000\n    ```", "```cs\nvar db = new GlobalFactory2021Context();\n```", "```cs\ndb.Dispose();\n```", "```cs\nDataSeeding.cs\npublic static class DataSeeding\n{\n    public const string ManufacturerName = \"Test Factory\";\n    public const string TestProduct1Name = \"Product1     \";\n    /// <summary>\n    /// Padding should be 13 spaces to the right as per our test data, db and filtering requirements\n    /// </summary>\n    public const string TestProduct2NameNotPadded = \"Product2\";\n    public const decimal MaxPrice = 1000;\n\n    public static void SeedDataNotSeededBefore()\n    {\n        var db = new globalfactory2021Context();\n        var isDataAlreadySeeded = db.Manufacturers.Any(m => m.Name == ManufacturerName);\n        if (isDataAlreadySeeded) return;\nThe complete code can be found here: https://packt.link/58JTd.\n```", "```cs\nDemo.cs\npublic static class Demo\n{\n    public static void Run()\n    {\n        // For benchmarks to be more accurate, make sure you run the seeding before anything\n        // And then restart the application\n        // Lazy loading is a prime example of being impacted by this inverting the intended results.\n        DataSeeding.SeedDataNotSeededBefore();\n        // Slow-Faster example pairs\n        // The title does not illustrate which you should pick\n        // It rather illustrates when it becomes a problem.\n\n    CompareExecTimes(EnumerableVsQueryable.Slow, EnumerableVsQueryable.Fast, \"IEnumerable over IQueryable\");\n    CompareExecTimes(MethodChoice.Slow, MethodChoice.Fast, \"equals over ==\");\n    CompareExecTimes(Loading.Lazy, Loading.Eager, \"Lazy over Eager loading\");\nThe complete code can be found here: https://packt.link/xE0Df.\n```", "```cs\nfor (int i = 0; i < 1000; i++)\n{\n    var product = new Product\n    {\n        Name = productName,\n        Price = 11,\n        ManufacturerId = 2\n    };\n    db.Products.Add(product);\n}\n```", "```cs\nvar toAdd = new List<Product>();\nfor (int i = 0; i < 1000; i++)\n{\n    var product = new Product\n    {\n        Name = productName,\n        Price = 11,\n        Manufacturerid = 2\n    };\n    toAdd.Add(product);\n}\ndb.Products.AddRange(toAdd);\n```", "```cs\nvar filtered = db.Products\n    .Where(p => p.Name.Equals(DataSeeding.TestProduct1Name))\n    .ToList();\n```", "```cs\nvar filtered = db.Products\n    .Where(p => p.Name == DataSeeding.TestProduct1Name)\n    .ToList();\n```", "```cs\nIEnumerable<Product> products = db.Products;\nvar filtered = products\n    .Where(p => p.Name == DataSeeding.TestProduct1Name)\n    .ToList();\n```", "```cs\nIQueryable<Product> products = db.Products;\nvar filtered = products\n    .Where(p => p.Name == DataSeeding.TestProduct1Name)\n    .ToList();\n```", "```cs\nvar product = db.Products.First();\n// Lazy loaded\nvar manufacturer = product.Manufacturer;\n```", "```cs\nvar manufacturer = db.Products\n    // Eager loaded\n    .Include(p => p.Manufacturer)\n    .First()\n    .Manufacturer;\n```", "```cs\nvar products = db.Products\n    .ToList();\n```", "```cs\nvar products = db.Products\n    .AsNoTracking()\n    .ToList();\n```", "```cs\nIENUMERABLE OVER IQUERYABLE          Scenario1: 75ms,   Scenario2: 31ms\nEQUALS OVER ==                       Scenario1: 33ms,   Scenario2: 24ms\nLAZY OVER EAGER LOADING              Scenario1: 3ms,    Scenario2: 29ms\nREAD-ONLY QUERIES                    Scenario1: 40ms,   Scenario2: 10ms\nMULTIPLE ADDS                        Scenario1: 8ms,    Scenario2: 8ms\n```", "```cs\noptionsBuilder.LogTo((s) => Debug.WriteLine(s));\n```", "```cs\npublic interface IProductRepository\n{\n    int Create(Product product);\n    void Delete(int id);\n    void Update(Product product);\n    Product Get(int id);\n    IEnumerable<Product> Get();\n}\n```", "```cs\npublic interface IManufacturerRepository\n{\n    int Create(Manufacturer product);\n    void Delete(int id);\n    void Update(Manufacturer product);\n    Manufacturer Get(int id);\n    IEnumerable<Manufacturer> Get();\n}\n```", "```cs\npublic interface IRepository<TEntity>: IDisposable where TEntity : class\n{\n    int Create(TEntity productentity);\n    void Delete(long id)(int id);\n    void Update(TEntity entityproduct);\n    TEntity Get(long id)(int id);\n    IEnumerable<TEntity> Get();\n    void Dispose();\n}\n```", "```cs\npublic interface IEntity\n{\n    int Id { get; }\n}\n```", "```cs\npublic interface IAggregate : IEntity\n{\n}\n```", "```cs\n    public class Repository<TAggregate>: IRepository<TAggregate> where TAggregate: class\n    {\n        private readonly DbSet<TAggregate> _dbSet;\n        private readonly DbContext _context;\n\n        public Repository(DbContext context)\n        {\n            _dbSet = context.Set<TAggregate>();\n            _context = context;\n        }\n    ```", "```cs\n    public int Create(TAggregate aggregate)\n    {\n        var added = _dbSet.Add(aggregate);\n        _context.SaveChanges();\n\n        return added.Entity.Id;\n    }\n    ```", "```cs\n        public void Delete(int id)\n        {\n            var toRemove = _dbSet.Find(id);\n            if (toRemove != null)\n            {\n                _dbSet.Remove(toRemove);\n            }\n\n            _context.SaveChanges();\n        }\n    ```", "```cs\n        public void Update(TAggregate aggregate)\n        {\n            _dbSet.Update(aggregate);\n            _context.SaveChanges();\n        }\n    ```", "```cs\n        public TAggregate Get(int id)\n        {\n            return _dbSet.Find(id);\n        }\n    ```", "```cs\n        public IEnumerable<TAggregate> Get()\n        {\n            return _dbSet.ToList();\n        }\n    ```", "```cs\n        public void Dispose()\n        {\n            _context?.Dispose();\n        }\n    }\n    ```", "```cs\n    public static void Run()\n    {\n    ```", "```cs\n         var db = new FactoryDbContext();\n         var manufacturersRepository = new Repository<Manufacturer>(db);\n    ```", "```cs\n        var manufacturer = new Manufacturer { Country = \"Lithuania\", Name = \"Tomo Baldai\" };\n         var id = manufacturersRepository.Create(manufacturer);\n    ```", "```cs\n         manufacturer.Name = \"New Name\";\n         manufacturersRepository.Update(manufacturer);\n    ```", "```cs\n         var manufacturerAfterChanges = manufacturersRepository.Get(id);\n         Console.WriteLine($\"Id: {manufacturerAfterChanges.Id}, \" +\n                      $\"Name: {manufacturerAfterChanges.Name}\");\n    ```", "```cs\nId: 25, Name: New Name\n```", "```cs\n        var countBeforeDelete = manufacturersRepository.Get().Count();\n    ```", "```cs\n        manufacturersRepository.Delete(id);\n    ```", "```cs\n        var countAfter = manufacturersRepository.Get().Count();\n        Console.WriteLine($\"Before: {countBeforeDelete}, after: {countAfter}\");\n    }\n    ```", "```cs\n    Before: 3, after: 2\n    ```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.InMemory\n```", "```cs\nvar builder = new DbContextOptionsBuilder<FactoryDbContext>();\nbuilder.UseInMemoryDatabase(Guid.NewGuid().ToString());\nvar options = builder.Options;\n_db = new FactoryDbContext(options);\n```", "```cs\nvar productsRepository = new Repository<Product>(db);\n```", "```cs\nvar product = new Product {Name = \"Test PP\", ManufacturerId = 1, Price = 9.99m};\nvar id = productsRepository.Create(product);\n```", "```cs\nproduct.Price = 19m;\nproductsRepository.Update(product);\n```", "```cs\nvar productAfterChanges = productsRepository.Get(id);\n```", "```cs\nConsole.WriteLine($\"Id: {productAfterChanges.Id}, \" +\n                  $\"Name: {productAfterChanges.Name}, \" +\n                  $\"Price: {productAfterChanges.Price}\");\n```", "```cs\nId: 1, Name: Test PP, Price: 19\n```", "```cs\nvar productToDelete = new Product { Name = \"Test PP 2\", ManufacturerId = 1, Price = 9.99m };\nvar idToDelete = productsRepository.Create(productToDelete);\n```", "```cs\nvar countBeforeDelete = productsRepository.Get().Count();\n```", "```cs\nproductsRepository.Delete(idToDelete);\n```", "```cs\nvar countAfter = productsRepository.Get().Count();\nConsole.WriteLine($\"Before: {countBeforeDelete}, after: {countAfter}\");\n```", "```cs\nBefore: 2, after: 1\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.Sqlite\n```", "```cs\nvar connection = new SqliteConnection(\"Filename=:memory:\");\nconnection.Open();\nvar builder = new DbContextOptionsBuilder<FactoryDbContext>();\nbuilder.UseSqlite(connection);\nvar options = builder.Options;\nvar db = new FactoryDbContext(options);\ndb.Database.EnsureCreated();\n```", "```cs\nvar manufacturer = new Manufacturer() { Id = 1 };\ndb.Manufacturers.Add(manufacturer);\ndb.SaveChanges();\n```", "```cs\nconnection.Dispose();\n```", "```cs\npublic class CreateProductCommand\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public int ManufacturerId { get; set; }\n}\n```", "```cs\nCreateProductQueryHandler.cs\npublic class CreateProductCommandHandler\n{\n    private readonly FactoryDbContext _context;\n\n    public CreateProductCommandHandler(FactoryDbContext context)\n    {\n        _context = context;\n    }\n\n    public int Handle(CreateProductCommand command)\n    {\n        var product = new Product\n        {\n            ManufacturerId = command.ManufacturerId,\n            Name = command.Name,\nThe complete code can be found here: https://packt.link/xhAVS.\n```", "```cs\npublic class GetProductQueryHandler\n{\n    private readonly FactoryDbContext _context;\n\n    public GetProductQueryHandler(FactoryDbContext context)\n    {\n        _context = context;\n    }\n\n    public Product Handle(int id)\n    {\n        return _context.Products.Find(id);\n    }\n}\n```", "```cs\nvar command = new CreateProductCommand { Name = \"Test PP\", Manufacturerid = 1, Price = 9.99m };\nvar commandHandler = new CreateProductCommandHandler(db);\nvar newProductId = commandHandler.Handle(command);\n```", "```cs\nvar query = newProductId;\nvar queryHandler = new GetProductQueryHandler(db);\nvar product = queryHandler.Handle(query);\nConsole.WriteLine($\"Id: {product.Id}, \" +\n                  $\"Name: {product.Name}, \" +\n                  $\"Price: {product.Price}\");\n```", "```cs\nId: 1, Name: Test PP, Price: 9,99\n```", "```cs\nDispatch: 1 1,1,1 2021-11-02 21:45:42\nDriver: Stephen King 2021-07-25 21:45:42\nTruck: Scania R 500 LA6x2HHA 2009\n```"]