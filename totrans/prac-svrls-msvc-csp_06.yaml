- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: IoT Functions in Practice
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实践中的物联网函数
- en: The implementation of the Internet of Things certainly is changing the way we
    interact with the world. Although we have a lot of solutions delivered, IoT is
    still challenging to deliver, especially if you want to focus on a scalable solution.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网的实施确实正在改变我们与世界互动的方式。尽管我们提供了许多解决方案，但物联网仍然具有挑战性，尤其是如果您想要关注可扩展的解决方案。
- en: The idea of this chapter is to present Event Grid, Event Hubs, and IoT Hub triggers
    that will be good options to start a microservice connected to devices. Besides
    that, we will discuss how to enable IoT using Azure.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是介绍Event Grid、Event Hubs和物联网中心触发器，这些将是有益于启动连接到设备的微服务的选项。除此之外，我们还将讨论如何使用Azure启用物联网。
- en: This chapter will help you to create an IoT environment using Azure. Besides
    that, it will guide you on connecting this environment through Azure IoT Function
    triggers. To finish, it will present the car-sharing example case for IoT. Let’s
    check how to do it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将帮助您使用Azure创建物联网环境。除此之外，它将指导您通过Azure物联网函数触发器连接此环境。最后，它将展示物联网的汽车共享示例案例。让我们看看如何操作。
- en: Technical requirements
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2022 free *community edition* or Visual
    Studio Code. You will also need an Azure account to create the sample environment.
    You can find the sample code for this chapter at [https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要Visual Studio 2022免费**社区版**或Visual Studio Code。您还需要一个Azure账户来创建示例环境。您可以在[https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp](https://github.com/PacktPublishing/Practical-Serverless-and-Microservices-with-Csharp)找到本章的示例代码。
- en: Enabling IoT in Azure
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Azure中启用物联网
- en: When we think about IoT, one of the greatest worries is the scalability of the
    solution. Considering that we are designing a solution to facilitate connection
    with a great number of devices, the best way to enable IoT in Azure is by using
    IoT Hub. IoT Hub creates a great environment for connecting, monitoring, and managing
    your IoT devices, offering a Platform as a Service (PaaS) solution that will make
    you focus on the application you are working on.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们思考物联网时，最大的担忧之一是解决方案的可扩展性。考虑到我们正在设计一个便于与大量设备连接的解决方案，在Azure中启用物联网的最佳方式是通过使用物联网中心。物联网中心为连接、监控和管理您的物联网设备提供了一个良好的环境，提供了一个平台即服务（PaaS）解决方案，这将使您专注于您正在开发的应用程序。
- en: There are two tiers of pricing for IoT Hub in Azure and the Free Edition of
    it. The Free Edition enables up to 8,000 messages of 0.5KB a day and it has the
    same features we have in the Standard tier. If you go for the Basic or Standard
    tiers, this can be increased to up to 3 billion messages of 4KB a day! The standard
    tier also offers device management, cloud-to-device messaging, and IoT Edge. Besides
    that, the Standard tier has a layer of security managed by Defender, called Defender
    for IoT. This information gives us an idea of how scalable the platform is.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Azure中的物联网中心有两个定价层，以及其免费版。免费版每天允许发送高达8,000条0.5KB的消息，并且具有与标准层相同的特性。如果您选择基本或标准层，这可以增加到每天高达30亿条4KB的消息！标准层还提供设备管理、云到设备消息和物联网边缘。除此之外，标准层还有一个由Defender管理的安全层，称为Defender
    for IoT。这些信息让我们对平台的可扩展性有了概念。
- en: For our purposes in this book and to help you understand the following examples,
    we suggest that you create a free tier IoT Hub component. The next topics will
    discuss how to get messages from this IoT Hub so you can create a microservice
    based on it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了本书的目的以及帮助您理解以下示例，我们建议您创建一个免费的物联网中心组件。接下来的主题将讨论如何从该物联网中心获取消息，以便您可以根据它创建一个微服务。
- en: The process of doing so is quite simple. You must go to **Create Resource**
    in Azure and type IoT Hub in Azure Marketplace.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作的过程相当简单。您必须转到Azure中的**创建资源**并输入Azure Marketplace中的物联网中心。
- en: '![Figure 6.1: Creating an IoT Hub using Azure Marketplace](img/B31916_06_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1：使用Azure Marketplace创建物联网中心](img/B31916_06_01.png)'
- en: 'Figure 6.1: Creating an IoT Hub using Azure Marketplace'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：使用Azure Marketplace创建物联网中心
- en: For **Free Tier**, you only need to fill in the information related to the **Basics**
    tab, so after this, you can move on to the **Review + create** tab.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**免费层**，您只需填写与**基本**选项卡相关的信息，然后您就可以继续到**审查 + 创建**选项卡。
- en: '![Figure 6.2: Azure IoT Hub Free Tier setup](img/B31916_06_02.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2：Azure物联网中心免费层设置](img/B31916_06_02.png)'
- en: 'Figure 6.2: Azure IoT Hub Free Tier setup'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：Azure物联网中心免费层设置
- en: As soon as the resource is created, you will be able to create devices in the
    Azure IoT Hub **Device management** area.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 资源创建后，您将能够在 Azure IoT Hub 的 **设备管理** 区域创建设备。
- en: '![Figure 6.3: Azure IoT Hub Device management](img/B31916_06_03.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3：Azure IoT Hub 设备管理](img/B31916_06_03.png)'
- en: 'Figure 6.3: Azure IoT Hub Device management'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3：Azure IoT Hub 设备管理
- en: First, the device will only need **Device ID** information, which represents
    the uniqueness of the device that will be handled.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，设备只需要 **设备 ID** 信息，它代表了将要处理的设备的唯一性。
- en: '![Figure 6.4: Creating a device in IoT Hub](img/B31916_06_04.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.4：在 IoT Hub 中创建设备](img/B31916_06_04.png)'
- en: 'Figure 6.4: Creating a device in IoT Hub'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4：在 IoT Hub 中创建设备
- en: IoT Hub also provides the possibility to connect devices on the edge, by using
    IoT Edge devices. This is not the focus of this book, but you will find information
    about it in the *Further reading* section. For the book’s purpose, devices created
    in Azure are good to go.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IoT Hub 还提供了使用 IoT Edge 设备连接边缘设备的可能性。这不是本书的重点，但您将在 *进一步阅读* 部分找到相关信息。对于本书的目的，在
    Azure 中创建的设备就绪可以使用。
- en: 'Considering we have the devices created, we need to understand how to simulate
    them. The code below shows how we can do it using the .NET `Microsoft.Azure.Devices.Client`
    library:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们已经创建了设备，我们需要了解如何模拟它们。下面的代码展示了我们如何使用 .NET `Microsoft.Azure.Devices.Client`
    库来实现这一点：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The connectionString argument in the method above is specific to each IoT device.
    You can get it using the Azure portal, but it is great to mention that there is
    a very useful tool for Azure IoT Hub called **Azure IoT Explorer**.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的方法中的 connectionString 参数针对每个 IoT 设备都是特定的。您可以使用 Azure 门户获取它，但值得一提的是，有一个非常实用的工具称为
    **Azure IoT Explorer**。
- en: With Azure IoT Explorer, we can manage devices connected to IoT Hub in a graphical
    tool that facilitates diagnosing and testing. For instance, to get the **connection
    string** of a specific device, you can check the **Device identity** information
    available.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure IoT Explorer，我们可以在一个图形工具中管理连接到 IoT Hub 的设备，该工具有助于诊断和测试。例如，要获取特定设备的
    **连接字符串**，您可以检查可用的 **设备标识** 信息。
- en: '![Figure 6.5: Getting device connection string](img/B31916_06_05.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5：获取设备连接字符串](img/B31916_06_05.png)'
- en: 'Figure 6.5: Getting device connection string'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5：获取设备连接字符串
- en: Now that we have understood how to simulate devices, let’s learn how to receive
    data from these devices using Azure Functions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了如何模拟设备，让我们学习如何使用 Azure Functions 从这些设备接收数据。
- en: Connecting IoT Hub with Azure Functions
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 IoT Hub 与 Azure Functions 连接
- en: 'By default, IoT Hub offers a built-in service that delivers device-to-cloud
    messages to a compatible EventHubs endpoint at messages/events. This means that
    you can easily connect IoT Hub device messages to an Event Hubs trigger function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，IoT Hub 提供了一个内置服务，该服务将设备到云的消息发送到兼容的 EventHubs 端点，端点为 messages/events。这意味着您可以轻松地将
    IoT Hub 设备消息连接到 Event Hubs 触发功能：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This option is certainly very useful since you can develop a solution very fast
    where you connect different devices using IoT Hub and Azure Functions. So, this
    can be considered the simplest way to directly integrate message processing.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项确实非常有用，因为它可以快速开发一个解决方案，其中使用 IoT Hub 和 Azure Functions 连接不同的设备。因此，这可以被认为是直接集成消息处理的最简单方法。
- en: In the code above, we are just defining the default endpoint messages/events
    and defining the variable that will give us the connection string for the Event
    Hub. The EventHubConnection variable can be found in **Built-in endpoints** in
    IoT Hub. There will be only shared access policies that enable us to receive data
    from devices (**ServiceConnect** permissions). It is recommended that you share
    the policy with the least access, considering the purpose of this connection is
    just reading the information.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们只是定义了默认端点 messages/events 并定义了将为我们提供 Event Hub 连接字符串的变量。EventHubConnection
    变量可以在 IoT Hub 的 **内置端点** 中找到。这里将只有共享访问策略，使我们能够从设备接收数据（**ServiceConnect** 权限）。考虑到此连接的目的仅仅是读取信息，建议您以最少的访问权限共享策略。
- en: '![Figure 6.6: Obtaining Event Hubs connection string to receive data from IoT
    Hub](img/B31916_06_06.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6：获取从 IoT Hub 接收数据的 Event Hubs 连接字符串](img/B31916_06_06.png)'
- en: 'Figure 6.6: Obtaining Event Hubs connection string to receive data from IoT
    Hub'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6：获取从 IoT Hub 接收数据的 Event Hubs 连接字符串
- en: It is also worth noting that these messages can be retained for a maximum of
    seven days, according to the tier you have selected in Azure IoT Hub.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，根据你在Azure IoT Hub中选择的层级，这些消息可以保留最多七天。
- en: Although the built-in option is very easy and fast to implement, you may want
    to apply different IoT scenarios where other alternatives can be applied. There
    are several ways to trigger data coming from devices using **Events** in Azure
    IoT Hub, as we can see in the following screenshot.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然内置选项非常容易且快速实现，但你可能希望在可以应用其他替代方案的不同的物联网场景中应用。在Azure IoT Hub中使用**事件**触发来自设备的数据有几种方法，如下面的截图所示。
- en: '![Figure 6.7: Azure IoT Hub Events alternatives to receive data from devices](img/B31916_06_07.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7：Azure IoT Hub事件从设备接收数据的替代方案](img/B31916_06_07.png)'
- en: 'Figure 6.7: Azure IoT Hub Events alternatives to receive data from devices'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：Azure IoT Hub事件从设备接收数据的替代方案
- en: Each approach certainly will give you the versatility to implement event driven
    and scalable solutions. Besides that, you need to analyze exactly the data you
    are going to send from devices to the cloud to define the best alternative. It
    is worth noting that only IoT Hub triggers aims at direct integration between
    IoT Hub and Azure Functions. The other triggers are visible under the **Events**
    blade.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 每种方法当然都会给你实现事件驱动和可扩展解决方案的灵活性。除此之外，你需要精确分析你将从设备发送到云的数据，以定义最佳替代方案。值得注意的是，只有IoT
    Hub触发器旨在实现IoT Hub和Azure Functions之间的直接集成。其他触发器在**事件**选项卡下可见。
- en: '| **Approach** | **When to use** |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| **方法** | **何时使用** |'
- en: '| --- | --- |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| IoT Hub Trigger | Simplest, direct integration for message processing. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| IoT Hub触发器 | 简单直接的消息处理集成。 |'
- en: '| Event Grid Trigger | Best for event-driven systems and scalable architecture.
    |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 事件网格触发器 | 适用于事件驱动系统和可扩展架构。 |'
- en: '| Service Bus Trigger | When you need intermediate buffering or message priority
    handling. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 服务总线触发器 | 当你需要中间缓冲或消息优先级处理时。 |'
- en: '| Blob Storage Trigger | When you want to store and process telemetry data
    as files. |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Blob存储触发器 | 当你想要将遥测数据作为文件存储和处理时。 |'
- en: '| HTTP Trigger (Direct) | When you need fine-grained control over function
    invocation. |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| HTTP触发器（直接） | 当你需要对函数调用有精细控制时。 |'
- en: '| Logic Apps | For no-code/low-code integration with IoT Hub and Functions.
    |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑应用 | 用于与IoT Hub和函数的无代码/低代码集成。 |'
- en: '| Stream Analytics Output | When you need to perform real-time analytics before
    invoking the function. |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 流分析输出 | 当你在调用函数之前需要执行实时分析时。 |'
- en: '| Queue Trigger | For lightweight, simple queue-based message processing. |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 队列触发器 | 用于轻量级、简单的基于队列的消息处理。 |'
- en: We have already covered how to implement some of these alternatives in the last
    three chapters, so we will not explore them again.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在过去三章中介绍了如何实现这些替代方案中的一些，因此我们不会再次探讨它们。
- en: Car-sharing IoT example
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 汽车共享物联网示例
- en: The car-sharing example that we are covering in the book enables interaction
    between car-seeking and car-holding users. But let’s suppose we have the possibility
    to deliver a special plan for car-holders who apply for a specific IoT device
    from the platform we are designing. Another option would be to integrate the car-sharing
    app in the central car cockpit. In this scenario, users could track the location,
    speed, and status of the available vehicles. It would also be possible to monitor
    vehicle health parameters such as battery life, tire pressure, and fuel levels.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在书中讨论的汽车共享示例允许寻找车辆和拥有车辆的用户之间进行互动。但是，假设我们有向从我们设计的平台申请特定物联网设备的车辆拥有者提供特殊计划的可能性。另一个选择是将汽车共享应用集成到中央汽车驾驶舱中。在这种情况下，用户可以追踪可用车辆的地理位置、速度和状态。还可以监控车辆健康参数，如电池寿命、轮胎压力和油量。
- en: In the alternatives presented before, a new vehicle-tracking microservice could
    be implemented and its data would probably be shared with the existing **Routes-Listing**
    and **Routes-Planner** microservices. For the first one, it would be possible
    to provide up-to-date information on car availability and estimated arrival times.
    For the planner, it would facilitate the decision of the best car to suggest a
    new hide.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前提出的替代方案中，可以实施一个新的车辆跟踪微服务，其数据可能会与现有的**路线列表**和**路线规划器**微服务共享。对于前者，可以提供有关汽车可用性和预计到达时间的最新信息。对于规划者，这将有助于决定推荐新藏匿点的最佳汽车。
- en: But considering the scenario above, which would be a great architectural approach?
    In [*Chapter 7*](Chapter_7.xhtml#_idTextAnchor151), *Microservices in Practice*,
    we will present the RabbitMQ message broker, which will be very useful for this
    scenario, and the complete example of Routes-Planner microservices. The diagram
    below shows how the IoT solution and the Vehicle-Tracking microservice will be
    connected to the main solution.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但考虑到上述场景，哪种架构方法会更好？在[*第7章*](Chapter_7.xhtml#_idTextAnchor151)“实践中的微服务”中，我们将介绍RabbitMQ消息代理，这对于此场景非常有用，以及Routes-Planner微服务的完整示例。下面的图示显示了物联网解决方案和Vehicle-Tracking微服务如何连接到主解决方案。
- en: Azure IoT Hub is the component responsible for managing multiple cars (devices)
    and it will send tracking data received from each car to the Vehicle-Tracking
    microservice using Azure Event Hubs messages. This microservice will be responsible
    for processing vehicle health parameters, as presented above, and this information
    will be stored in the Cosmos DB database, considering the volume of data received.
    To finish, it will publish only the data needed for the RoutesPlanning microservice
    using a RabbitMQ principal bus.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Azure IoT Hub是负责管理多辆汽车（设备）的组件，它将使用Azure Event Hubs消息将每辆汽车接收到的跟踪数据发送到Vehicle-Tracking微服务。这个微服务将负责处理车辆健康参数，如上所述，并且这些信息将被存储在Cosmos
    DB数据库中，考虑到接收到的数据量。最后，它将仅使用RabbitMQ主总线发布RoutesPlanning微服务所需的数据。
- en: '![Figure 6.8: IoT solution connected to a microservice solution](img/B31916_06_08.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图6.8：连接到微服务解决方案的物联网解决方案](img/B31916_06_08.png)'
- en: 'Figure 6.8: IoT solution connected to a microservice solution'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8：连接到微服务解决方案的物联网解决方案
- en: 'The tracking data that is sent from the car could have a structure like the
    one below. It is also great to mention that, if you are running .NET from a device
    to the cloud, this structure can be reused if you work in a class library dedicated
    to defining SharedMessages:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从汽车发送的跟踪数据可能具有以下结构。还值得一提的是，如果您从设备运行.NET到云，如果您在一个专门用于定义SharedMessages的类库中工作，这个结构可以被重用：
- en: '[PRE2]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'It is worth noting that the Location property is defined by another shared
    class, called GeoLocalizationMessage:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Location属性是由另一个共享类定义的，称为GeoLocalizationMessage：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Considering this scenario, the following code is an emulation of a car collecting
    data and sending data using IoT Hub as the front door:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这个场景，以下代码是使用物联网Hub作为前门收集数据并发送数据的汽车模拟：
- en: '[PRE4]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It is worth noting that we are just creating data here with random information.
    However, the process itself exactly represents the output of data from a device
    to the cloud.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，我们在这里只是使用随机信息创建数据。然而，这个过程本身正好代表了从设备到云的数据输出过程。
- en: Depending on the device you have, you may need to change the protocol used with
    Azure IoT Hub. You may check https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols
    for more information.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您拥有的设备，您可能需要更改与Azure IoT Hub一起使用的协议。您可以查看https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-protocols以获取更多信息。
- en: 'On the other hand, the following code represents the function that will process
    the vehicle tracking message, storing its data in Cosmos DB and, at the same time,
    alerting all the microservices via RabbitMQ that there is a new message from a
    car, so other microservices, like RoutesPlanning, can make use of it to run their
    business rules:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，以下代码表示将处理车辆跟踪消息的功能，将数据存储在Cosmos DB中，同时通过RabbitMQ向所有微服务发出警报，表明有来自汽车的新的消息，因此其他微服务，如RoutesPlanning，可以利用它来运行其业务规则：
- en: '[PRE5]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Some great things about this approach justify why microservices are a good way
    to work with big products. First, the implementation of the IoT solution is totally
    decoupled from the implementation of the rest of the application, which enables
    developers to define the technology used and the deployment pipeline. Second,
    the usage of the information provided by the IoT solution is optional and can
    be spread to each microservice that is required. Besides that, one point of attention
    is the contract defined in the Shared Messages. You must be careful not to create
    an incompatibility between the systems. A good approach to avoid this is to version
    the message content.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这种方法的一些优点证明了为什么微服务是处理大型产品的良好方式。首先，物联网解决方案的实施与应用程序其他部分的实施完全解耦，这使得开发者能够定义所使用的技术和部署管道。其次，物联网解决方案提供的信息的使用是可选的，并且可以扩展到所需的每个微服务。此外，需要注意的一个点是Shared
    Messages中定义的合约。您必须小心不要在系统之间创建不兼容性。避免这种情况的一个好方法是版本化消息内容。
- en: Summary
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter discussed how Internet of Things solutions can be handled in Azure,
    especially with the help of Azure IoT Hub and Azure Functions. It also presented
    an extension of the car-sharing example using an IoT service, which demonstrates
    how useful microservices architecture can be.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了如何在Azure中处理物联网解决方案，特别是借助Azure IoT Hub和Azure Functions。它还展示了使用物联网服务扩展的汽车共享示例，这展示了微服务架构的实用性。
- en: Microservices offer several strategic advantages in the development of large-scale
    applications, especially when it comes to implementing IoT solutions. By decoupling
    the IoT solution from the rest of the application, developers have the flexibility
    to choose the appropriate technologies and pipelines for deployment independently.
    This modular approach not only enhances scalability and maintainability but also
    allows different teams to work on various parts of the application without interference.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务在大规模应用程序的开发中提供了几个战略优势，尤其是在实施物联网解决方案时。通过将物联网解决方案从应用程序的其他部分解耦，开发者可以独立选择合适的技术和部署管道。这种模块化方法不仅增强了可扩展性和可维护性，还允许不同的团队在没有干扰的情况下共同工作于应用程序的不同部分。
- en: Another significant benefit of microservices is their optional and distributed
    usage of information. The data provided by the IoT solution can be utilized by
    any microservice that requires it, ensuring efficient data handling and processing.
    However, it is crucial to maintain compatibility across different systems by carefully
    managing contracts. Versioning message content is an effective strategy to avoid
    incompatibility issues, ensuring smooth communication between microservices. In
    the next chapter, we will start discussing the usage of microservices in practice
    with more emphasis.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的另一个显著优势是它们可选的分布式信息使用。物联网解决方案提供的数据可以被任何需要它的微服务利用，确保高效的数据处理和加工。然而，通过精心管理合约，保持不同系统间的兼容性至关重要。版本化消息内容是避免不兼容问题的有效策略，确保微服务之间通信的顺畅。在下一章中，我们将开始讨论微服务的实际应用，并更加注重这一点。
- en: Questions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the purpose of reading device-to-cloud messages from the built-in endpoint
    in IoT applications?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在物联网应用程序中，从内置端点读取设备到云的消息的目的是什么？
- en: The built-in endpoint in IoT Hub allows you to read device-to-cloud messages
    easily and directly, making it ideal for quick integration between devices and
    backend applications. It simplifies the process of connecting IoT devices to services
    like Azure Functions using standard Event Hub-compatible endpoints.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: IoT Hub中的内置端点允许您轻松直接地读取设备到云的消息，使其非常适合设备与后端应用程序之间的快速集成。它简化了将物联网设备连接到如Azure Functions等服务使用标准Event
    Hub兼容端点的过程。
- en: This approach is useful for scenarios where rapid prototyping or lightweight
    integration is needed, as it requires minimal configuration and supports scalable,
    event-driven solutions.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法适用于需要快速原型设计或轻量级集成的场景，因为它需要最少的配置并支持可扩展的事件驱动解决方案。
- en: How can you read device-to-cloud messages from the built-in endpoint?
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何从内置端点读取设备到云的消息？
- en: To read messages from the built-in endpoint, you can create an Azure function
    using an Event Hub trigger and point it to the default messages/events endpoint
    of IoT Hub. The connection string with read permissions (typically from the service
    policy) is used to access the messages.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要从内置端点读取消息，您可以使用Event Hub触发器创建一个Azure函数，并将其指向IoT Hub的默认消息/事件端点。使用具有读取权限的连接字符串（通常来自服务策略）来访问消息。
- en: This method enables a fast and straightforward implementation of serverless
    message processing, allowing the Azure Function to automatically execute whenever
    a device sends data to IoT Hub.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法允许快速直接地实现无服务器消息处理，使Azure Function能够在设备向IoT Hub发送数据时自动执行。
- en: What are the advantages of using the Azure IoT explorer for managing IoT devices?
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Azure IoT explorer管理物联网设备有哪些优势？
- en: The Azure IoT explorer is a graphical tool that simplifies device management
    in IoT Hub. It allows you to register new devices, view connection strings, send
    test messages, and monitor device status without writing any code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Azure IoT explorer是一个图形工具，它简化了IoT Hub中的设备管理。它允许您注册新设备、查看连接字符串、发送测试消息和监控设备状态，而无需编写任何代码。
- en: This tool is especially helpful during the development and testing phases, as
    it accelerates diagnostics and gives developers a user-friendly interface to interact
    with and configure IoT devices.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具在开发和测试阶段特别有用，因为它加速了诊断，并为开发者提供了一个用户友好的界面来交互和配置物联网设备。
- en: How does Queue Trigger facilitate lightweight, simple queue-based message processing?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Queue Trigger如何促进轻量级、简单的基于队列的消息处理？
- en: Queue triggers enable Azure Functions to respond to messages placed in Azure
    Storage Queues. This pattern provides a lightweight and decoupled way to process
    tasks asynchronously, making it easy to implement background job handling or message
    workflows.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Queue triggers使Azure Functions能够响应放置在Azure存储队列中的消息。此模式提供了一种轻量级且解耦的方式来异步处理任务，使得实现后台作业处理或消息工作流变得容易。
- en: It is particularly effective in scenarios where simplicity, scalability, and
    fault tolerance are desired without the need for complex messaging infrastructure.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在需要简单性、可扩展性和容错性，而不需要复杂消息基础设施的情况下，这种方法尤其有效。
- en: What are the key differences between IoT Hub and Event Hubs?
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IoT Hub和Event Hubs之间有哪些主要区别？
- en: IoT Hub is specifically designed for secure and scalable communication with
    IoT devices, offering device management, bidirectional messaging, and integration
    with IoT Edge. Event Hubs, on the other hand, is a high-throughput, general-purpose
    event ingestion service mainly used for telemetry and logging.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: IoT Hub专门设计用于与物联网设备进行安全且可扩展的通信，提供设备管理、双向消息和与IoT Edge的集成。另一方面，Event Hubs是一个高吞吐量的通用事件摄取服务，主要用于遥测和日志记录。
- en: While both support massive data ingestion, IoT Hub provides device-centric features
    like twin properties, direct methods, and security credentials per device, whereas
    Event Hubs focuses on data streaming and integration into analytics pipelines.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然两者都支持大量数据摄取，但IoT Hub提供了以设备为中心的功能，如设备属性、直接方法和每个设备的身份验证凭据，而Event Hubs则专注于数据流和集成到分析管道中。
- en: What are the benefits of decoupling the IoT solution from the rest of the application?
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将物联网解决方案与应用程序的其他部分解耦有哪些好处？
- en: Decoupling the IoT solution allows independent development, scaling, and deployment
    of the device communication layer. Each microservice can process only the data
    it needs, leading to better performance, flexibility, and maintainability.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 解耦物联网解决方案允许独立开发、扩展和部署设备通信层。每个微服务只能处理它需要的数据，从而带来更好的性能、灵活性和可维护性。
- en: Additionally, this separation enables teams to adopt different technologies
    or deployment strategies as needed, while keeping the core application architecture
    clean and modular.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这种分离还使团队能够根据需要采用不同的技术或部署策略，同时保持核心应用程序架构的清洁和模块化。
- en: How can versioning message content help prevent incompatibility issues in shared
    messages?
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何通过版本化消息内容帮助防止共享消息中的不兼容性问题？
- en: Versioning message content ensures that changes to data structures don’t break
    functionality in microservices that consume these messages. Each service can process
    the version it understands, allowing smooth evolution of the system.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 版本化消息内容确保对数据结构的更改不会破坏消费这些消息的微服务中的功能。每个服务都可以处理它理解的版本，从而实现系统的平稳演进。
- en: By maintaining compatibility across versions, developers can update and deploy
    components independently without risking integration failures or data misinterpretation
    between services.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 通过保持版本间的兼容性，开发者可以独立更新和部署组件，而不会导致集成失败或服务间数据误解。
- en: What role does the pipeline of deployment play in the implementation of microservices
    in IoT solutions?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署管道在物联网解决方案中微服务实现中扮演什么角色？
- en: A well-defined deployment pipeline allows each microservice, including those
    related to IoT, to be built, tested, and deployed independently. This supports
    continuous integration and delivery, reducing time to market and minimizing risks
    during updates.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一个定义良好的部署管道允许每个微服务，包括与物联网相关的微服务，独立地进行构建、测试和部署。这支持持续集成和交付，缩短上市时间并最小化更新期间的风险。
- en: For IoT scenarios, where data ingestion and processing are critical, automated
    pipelines ensure reliability, version control, and traceability across the distributed
    system—enhancing overall application robustness.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 对于物联网场景，数据摄取和处理至关重要，自动化的管道确保了分布式系统中的可靠性、版本控制和可追溯性，从而增强了整体应用的鲁棒性。
- en: Further reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Azurite: [https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azurite: [https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite](https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azurite)'
- en: 'Microsoft Azure Storage Explorer: [https://learn.microsoft.com/en-us/azure/storage/storage-explorer/vs-azure-tools-storage-manage-with-storage-explorer](https://learn.microsoft.com/en-us/azure/storage/storage-explorer/vs-azure-tools-storage-manage-with-storage-explorer)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Microsoft Azure 存储资源管理器: [https://learn.microsoft.com/en-us/azure/storage/storage-explorer/vs-azure-tools-storage-manage-with-storage-explorer](https://learn.microsoft.com/en-us/azure/storage/storage-explorer/vs-azure-tools-storage-manage-with-storage-explorer)'
- en: 'Azure IoT Edge Documentation: [https://learn.microsoft.com/en-us/azure/iot-edge](https://learn.microsoft.com/en-us/azure/iot-edge)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure IoT Edge 文档: [https://learn.microsoft.com/en-us/azure/iot-edge](https://learn.microsoft.com/en-us/azure/iot-edge)'
- en: 'Read device-to-cloud messages from the built-in endpoint: [https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-read-builtin](https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-read-builtin)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '从内置端点读取设备到云的消息: [https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-read-builtin](https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-devguide-messages-read-builtin)'
- en: 'Azure IoT explorer: [https://learn.microsoft.com/en-us/azure/iot/howto-use-iot-explorer](https://learn.microsoft.com/en-us/azure/iot/howto-use-iot-explorer)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure IoT 探索器: [https://learn.microsoft.com/en-us/azure/iot/howto-use-iot-explorer](https://learn.microsoft.com/en-us/azure/iot/howto-use-iot-explorer)'
- en: 'Comparison between IoT Hub and Event Hubs: [https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-compare-event-hubs](https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-compare-event-hubs)'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '物联网中心与事件中心之间的比较: [https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-compare-event-hubs](https://learn.microsoft.com/en-us/azure/iot-hub/iot-hub-compare-event-hubs)'
- en: 'Azure Functions Event Triggers: https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-iot'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Functions 事件触发器: https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-iot'
- en: 'Azure Functions IoT Triggers: https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-iot-trigger'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure Functions IoT 触发器: https://learn.microsoft.com/en-us/azure/azure-functions/functions-bindings-event-iot-trigger'
- en: 'Azure Stream Analytics: https://azure.microsoft.com/en-us/products/stream-analytics/'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Azure 流分析: https://azure.microsoft.com/en-us/products/stream-analytics/'
- en: Join our community on Discord
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/PSMCSharp](https://packt.link/PSMCSharp)'
- en: '![A qr code with black squares  AI-generated content may be incorrect.](img/B31916_Discord-QR-Code.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![一个带有黑色方块的二维码 AI生成的内容可能不正确。](img/B31916_Discord-QR-Code.png)'
