["```cs\n namespace FlixOne.BookStore.ProductService.Models\n {\n   public class Product\n   {\n     public Guid Id { get; set; }\n     public string Name { get; set; }\n     public string Description { get; set; }\n     public string Image { get; set; }\n     public decimal Price { get; set; }\n     public Guid CategoryId { get; set; }\n   }\n }\n```", "```cs\n namespace FlixOne.BookStore.ProductService.Models\n {\n   public class Category\n   {\n     public Category()\n     {\n       Products = new List<Product>();\n     }\n     public Guid Id { get; set; }\n     public string Name { get; set; }\n     public string Description { get; set; }\n     public IEnumerable<Product> Products { get; set; }\n   }\n }\n```", "```cs\nnamespace FlixOne.BookStore.ProductService.Persistence\n{\n  public interface IProductRepository\n  {\n    void Add(Product product);\n    IEnumerable<Product> GetAll();\n    Product GetBy(Guid id);\n    void Remove(Guid id);\n    void Update(Product product);\n  }\n}\n```", "```cs\n namespace FlixOne.BookStore.ProductService.Persistence\n {\n   public class ProductRepository : IProductRepository\n   {\n     public void Add(Product Product)\n     {\n       throw new NotImplementedException();\n     }\n     public IEnumerable<Product> GetAll()\n     {\n       throw new NotImplementedException();\n     }\n     public Product GetBy(Guid id)\n     {\n       throw new NotImplementedException();\n     }\n     public bool Remove(Guid id)\n     {\n       throw new NotImplementedException();\n     }\n     public void Update(Product Product)\n     {\n       throw new NotImplementedException();\n     }\n   }\n }\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n  // Add framework services.\n  services.AddMvc();\n  services.AddSingleton<IProductRepository, \n  ProductRepository>();\n}\n```", "```cs\n using Microsoft.AspNetCore.Mvc;\n using FlixOne.BookStore.ProductService.Persistence;\n namespace FlixOne.BookStore.ProductService.Controllers\n {\n   [Route(\"api/[controller]\")]\n   public class ProductController : Controller\n   {\n     private readonly IProductRepository _ProductRepository;\n     public ProductController(IProductRepositoryProductRepository)\n     {\n       _ProductRepository = ProductRepository;\n     }\n   }\n }\n```", "```cs\n using FlixOne.BookStore.ProductService.Models;\n using Microsoft.EntityFrameworkCore;\n namespace FlixOne.BookStore.ProductService.Contexts\n {\n   public class ProductContext : DbContext\n   {\n     public ProductContext(DbContextOptions<\n     ProductContext>options): base(options)\n     { }\n     public ProductContext()\n     { }\n     public DbSet<Product> Products { get; set; }\n     public DbSet<Category> Categories { get; set; }\n   }\n }\n```", "```cs\n public void ConfigureServices(IServiceCollection services)\n {\n   // Add framework services.\n   services.AddMvc();\n   services.AddSingleton<IProductRepository, ProductRepository>();\n   services.AddDbContext<ProductContext>(o =>o.UseSqlServer\n   (Configuration.GetConnectionString(\"ProductsConnection\" )));\n }\n```", "```cs\n {\n   \"ConnectionStrings\": \n   {\n     \"ProductConnection\":\n     \"Data Source=.SQLEXPRESS;Initial Catalog=ProductsDB;\n     IntegratedSecurity=True;MultipleActiveResultSets=True\"\n   }\n }\n```", "```cs\nInstall--Package Microsoft.EntityFrameworkCore.Tools --pre\nInstall--Package Microsoft.EntityFrameworkCore.Design \n```", "```cs\n Add-Migration ProductDB\n```", "```cs\nUpdate-Database\n```", "```cs\n using System.Collections.Generic;\n using System.Linq;\n using FlixOne.BookStore.ProductService.Contexts;\n using FlixOne.BookStore.ProductService.Models;\n namespace FlixOne.BookStore.ProductService.Persistence\n {\n   public class ProductRepository : IProductRepository\n   {\n     private readonly ProductContext _context;\n     public ProductRepository(ProductContext context)\n     {\n       _context = context;\n     }\n     public void Add(Product Product)\n     {\n       _context.Add(Product);\n       _context.SaveChanges();\n     }\n     public IEnumerable<Product> GetAll() =>\n     _context.Products.Include(c => c.Category).ToList();\n     //Rest of the code has been deleted\n   }\n }\n```", "```cs\n using System;\n namespace FlixOne.BookStore.ProductService.Models\n {\n   public class ProductViewModel\n   {\n     public Guid ProductId { get; set; }\n     public string ProductName { get; set; }\n     public string ProductDescription { get; set; }\n     public string ProductImage { get; set; }\n     public decimal ProductPrice { get; set; }\n     public Guid CategoryId { get; set; }\n     public string CategoryName { get; set; }\n     public string CategoryDescription { get; set; }\n   }\n }\n```", "```cs\n using System.Linq;\n using FlixOne.BookStore.ProductService.Models;\n using FlixOne.BookStore.ProductService.Persistence;\n using Microsoft.AspNetCore.Mvc;\n namespace FlixOne.BookStore.ProductService.Controllers\n {\n   [Route(\"api/[controller]\")]\n   public class ProductController : Controller\n   {\n     private readonly IProductRepository _productRepository;\n     public ProductController(IProductRepository \n     productRepository) => _productRepository = productRepository;\n\n    [HttpGet]\n    [Route(\"productlist\")]\n    public IActionResult GetList() => new\n    OkObjectResult(_productRepository.GetAll().\n    Select(ToProductvm).ToList());\n\n    [HttpGet]\n    [Route(\"product/{productid}\")]\n    public IActionResult Get(string productId)\n    {\n      var productModel = _productRepository.GetBy(new Guid(productId));\n      return new OkObjectResult(ToProductvm(productModel));\n    }\n\n     //Rest of code has been removed\n   }\n }\n```", "```cs\nservices.AddSwaggerGen(swagger =>\n{\n  swagger.SwaggerDoc(\"v1\", new Info \n  { Title = \"Product APIs\", Version = \"v1\" });\n});\n```", "```cs\napp.UseSwagger();\napp.UseSwaggerUI(c =>\n{\n  c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \n  \"My API V1\");\n});\n\n```"]