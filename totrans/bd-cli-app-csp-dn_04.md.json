["```cs\n$ dotnet new console -n bookmarkr -o bookmarkr --use-program-main\n```", "```cs\nnamespace bookmarkr;\npublic class BookmarkService\n{\n}\n```", "```cs\nnamespace bookmarkr;\npublic class BookmarkService\n{\n    private readonly List<Bookmark> _bookmarks = new();\n}\n```", "```cs\nnamespace bookmarkr;\npublic class Bookmark\n{\n    public required string Name { get; set; }\n    public required string Url { get; set; }\n}\n```", "```cs\n$ bookmarkr link add <name> <url>\n```", "```cs\nnamespace bookmarkr;\nclass Program\n{\n    static void Main(string[] args)\n    {\n        if(args == null || args.Length == 0)\n        {\n            Helper.ShowErrorMessage([\"You haven't passed any argument. \n            The expected syntax is:\", \"bookmarkr <command-name> \n            <parameters>\"]);\n            return;\n        }\n        var service = new BookmarkService();\n        switch(args[0].ToLower())\n        {\n            case \"link\":\n                ManageLinks(args, service);\n                break;\n            // we may add more commands here...\n            default:\n                Helper.ShowErrorMessage([\"Unknown Command\"]);\n                break;\n        }\n    }\n    static void ManageLinks(string[] args, BookmarkService svc)\n    {\n        if(args.Length < 2)\n        {\n            Helper.ShowErrorMessage([\"Unsufficient number  of \n            parameters. The expected syntax is:\", \"bookmarkr link \n            <subcommand> <parameters>\"]);\n        }\n        switch(args[1].ToLower())\n        {\n            case \"add\":\n                svc.AddLink(args[2], args[3]);\n                break;\n            // we may add more subcommands here...\n            default:\n                Helper.ShowErrorMessage([\"Unsufficient number of \n                parameters. The expected syntax is:\", \"bookmarkr link \n                <subcommand> <parameters>\"]);\n                break;\n        }\n    }\n}\n```", "```cs\npublic void AddLink(string name, string url)\n{\n        if(string.IsNullOrWhiteSpace(name))\n        {\n            Helper.ShowErrorMessage([\"the 'name' for the link is \n            not provided. The expected syntax is:\", \"bookmarkr link \n            add <name> <url>\"]);\n            return;\n        }\n        if(string.IsNullOrWhiteSpace(url))\n        {\n            Helper.ShowErrorMessage([\"the 'url' for the link is \n            not provided. The expected syntax is:\", \"bookmarkr link \n            add <name> <url>\"]);\n            return;\n        }\n        if(_bookmarks.Any(b => b.Name.Equals(name, StringComparison.\n        OrdinalIgnoreCase)))\n        {\n            Helper.ShowWarningMessage([$\"A link with the name '{name}' \n            already exists. It will thus not be added\",\n            $\"To update the existing link, use the command: bookmarkr \n            link update '{name}' '{url}'\"]);\n            return;\n        }\n        _bookmarks.Add(new Bookmark { Name = name, Url = url});\n        Helper.ShowSuccessMessage([\"Bookmark successfully added!\"]);\n}\n```", "```cs\n$ bookmarkr link add --name <name> --url <url>\n```", "```cs\n$ bookmarkr link add -n <name> -u <url>\n```", "```cs\n$ dotnet add package System.CommandLine --prerelease\n```", "```cs\nvar rootCommand = new RootCommand(\"Bookmarkr is a bookmark manager provided as a CLI application.\")\n{\n};\n```", "```cs\nrootCommand.SetHandler(OnHandleRootCommand);\n```", "```cs\nstatic void OnHandleRootCommand()\n{\n    Console.WriteLine(\"Hello from the root command!\");\n}\n```", "```cs\nvar parser = new CommandLineBuilder(rootCommand)\n    .UseDefaults()\n    .Build();\nreturn await parser.InvokeAsync(args);\n```", "```cs\nusing System.CommandLine;\nusing System.CommandLine.Builder;\nusing System.CommandLine.Parsing;\n```", "```cs\n$ bookmarkr\n```", "```cs\n$ bookmarkr link add <name> <url>\n```", "```cs\nvar linkCommand = new Command(\"link\", \"Manage bookmarks links\")\n{\n};\nrootCommand.AddCommand(linkCommand);\n```", "```cs\nvar addLinkCommand = new Command(\"add\", \"Add a new bookmark link\")\n{\n};\nlinkCommand.AddCommand(addLinkCommand);\naddLinkCommand.SetHandler(OnHandleAddLinkCommand);\n```", "```cs\n$ bookmarkr link add\n```", "```cs\n$ bookmarkr add\n```", "```cs\nvar nameOption = new Option<string>(\n    [\"--name\", \"-n\"],\n    \"The name of the bookmark\"\n);\nvar urlOption = new Option<string>(\n    [\"--url\", \"-u\"],\n    \"The URL of the bookmark\"\n);\n```", "```cs\nvar addLinkCommand = new Command(\"add\", \"Add a new bookmark link\")\n{\n    nameOption,\n    urlOption\n};\n```", "```cs\naddLinkCommand.SetHandler(OnHandleAddLinkCommand, nameOption, urlOption);\n```", "```cs\nstatic void OnHandleAddLinkCommand(string name, string url)\n{\n    // 'service' is an instance of 'BookmarkService'.\n    service.AddLink(name, url);\n}\n```", "```cs\n$ bookmarkr --name 'Packt Publishing' --url 'https://www.packtpub.com'\n```", "```cs\n$ bookmarkr -n 'Packt Publishing' -u 'https://www.packtpub.com'\n```", "```cs\n$ bookmarkr --number toto\nCannot parse argument 'toto' for option '--number' as expected type 'System.Int32'.\n```", "```cs\n$ bookmarkr --version\n```", "```cs\n<PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <Version>2.0.0</Version>\n</PropertyGroup>\n```", "```cs\n$ bookmarkr link remove --name <name>\n```", "```cs\n$ bookmarkr link remove -n <name>\n```", "```cs\n$ bookmarkr link update --name <name> --url <url>\n```", "```cs\n$ bookmarkr link update -n <name> -u <url>\n```", "```cs\n$ bookmarkr link --list\n```", "```cs\n$ bookmarkr link -l\n```", "```cs\n# <name 1>\n<url 1>\n# <name 2>\n<url 2>\n...\n```"]