["```cs\ndotnet add package MessagePack\n```", "```cs\n1: {\n2:     object a = new object();\n3: }\n4: {\n5:     object b = new object();\n6: }\n```", "```cs\nclass MyClass\n {\n     public MyClass()\n     {\n         // Initialize everything here...\n     }\n     ~MyClass()\n     {\n         // Clean up here\n         // (well, don't. Use IDisposable for that).\n     }\n}\n```", "```cs\nvar myClass = new MyClass();\n```", "```cs\npublic interface IDisposable\n{\n    void Dispose();\n}\n```", "```cs\nclass ResourceUser\n{\n    private readonly IntPtr _ptr;\n    public ResourceUser()\n    {\n        // Allocate an 8 KB block of memory\n        _ptr = Marshal.AllocHGlobal(8 * 1024);//\n    }\n    ~ResourceUser()\n    {\n        Marshal.FreeHGlobal(_ptr);\n    }\n}\n```", "```cs\nclass ResourceUser\n{\n    private IntPtr _ptr;\n    public ResourceUser()\n    {\n        // Allocate an 8 KB block of memory\n        _ptr = Marshal.AllocHGlobal(8 * 1024);//\n    }\n    ~ResourceUser()\n    {\n        //nothing to do here!\n    }\n    public void Cleanup()\n    {\n        if (_ptr == IntPtr.Zero) return;\n        Marshal.FreeHGlobal(_ptr);\n        _ptr = IntPtr.Zero;\n    }\n}\n```", "```cs\nvar myClass = new ResourceUser();\ntry\n{\n    // Do something with myClass\n}\nfinally\n{\n    myClass.Cleanup();\n}\n```", "```cs\nclass ResourceUser : IDisposable\n{\n    private IntPtr _ptr;\n    public ResourceUser()\n    {\n        // Allocate an 8 KB block of memory\n        _ptr = Marshal.AllocHGlobal(8 * 1024);//\n    }\n    ~ResourceUser()\n    {}\n    public void Dispose()\n    {\n        if (_ptr == IntPtr.Zero) return;\n        Marshal.FreeHGlobal(_ptr);\n        _ptr = IntPtr.Zero;\n    }\n}\n```", "```cs\n01: .method private hidebysig static void  '<Main>$'(string[] args) cil managed\n02: {\n03:   .entrypoint\n04:   // Code size       21 (0x15)\n05:   .maxstack  1\n06:   .locals init (class ConsoleApp1.ResourceUser V_0)\n07:   IL_0000:  newobj     instance void ConsoleApp1.ResourceUser::.ctor()\n08:   IL_0005:  stloc.0\n09:   .try\n10:   {\n11:     IL_0006:  nop\n12:     IL_0007:  nop\n13:     IL_0008:  leave.s    IL_0014\n14:   }  // end .try\n15:   finally\n16:   {\n17:     IL_000a:  nop\n18:     IL_000b:  ldloc.0\n19:     IL_000c:  callvirt   instance void ConsoleApp1.ResourceUser::Dispose()\n20:     IL_0011:  nop\n21:     IL_0012:  nop\n22:     IL_0013:  endfinally\n23:   }  // end handler\n24:   IL_0014:  ret\n25: } // end of method Program::'<Main>$'\n```", "```cs\nusing (var myClass = new ResourceUser())\n{\n    // Do something with myClass\n}\n```", "```cs\nusing var myClass = new ResourceUser();\n// Do something with myClass\n```", "```cs\n .method private hidebysig static void  '<Main>$'(string[] args) cil managed\n {\n   .entrypoint\n   // Code size       20 (0x14)\n   .maxstack  1\n   .locals init (class ConsoleApp1.ResourceUser V_0)\n   IL_0000:  newobj     instance void ConsoleApp1.ResourceUser::.ctor()\n   IL_0005:  stloc.0\n   .try\n   {\n     IL_0006:  leave.s    IL_0013\n   }  // end .try\n   finally\n   {\n     IL_0008:  ldloc.0\n     IL_0009:  brfalse.s  IL_0012\n     IL_000b:  ldloc.0\n     IL_000c:  callvirt   instance void [System.Runtime]System.IDisposable::Dispose()\n     IL_0011:  nop\n     IL_0012:  endfinally\n   }  // end handler\n   IL_0013:  ret\n } // end of method Program::'<Main>$'\n```", "```cs\n01: class ResourceUser : IDisposable\n02: {\n03:     private IntPtr _ptr;\n04:     private IDisposable? _someOtherDisposableClass;\n05:     private bool _isDisposed;\n06:     public ResourceUser()\n07:     {\n08:         // Allocate an 8 KB block of Memory\n09:         _ptr = Marshal.AllocHGlobal(8 * 1024); //\n10:     }\n11:     public void Dispose()\n12:     {\n13:         Dispose(true);\n14:         GC.SuppressFinalize(this);\n15:     }\n16:     ~ResourceUser()\n17:     {\n18:         Dispose(false);\n19:     }\n20:     private void Dispose(bool isDisposing)\n21:     {\n22:         if (_isDisposed)\n23:             return;\n24:         if (isDisposing)\n25:         {\n26:             _someOtherDisposableClass?.Dispose();\n27:         }\n28:         if (_ptr != IntPtr.Zero)\n29:         {\n30:             Marshal.FreeHGlobal(_ptr);\n31:             _ptr = IntPtr.Zero;\n32:         }\n33:         _isDisposed = true;\n34:     }\n35: }\n```", "```cs\n    int[] myBuffer = new int[100];\n    ```", "```cs\nint[] firstHalf = myBuffer.Take(50).ToArray();\nint[] secondHalf = myBuffer.Skip(50).ToArray();\n```", "```cs\nvar firstHalf = new Span<int>(myBuffer, 0, 50);\nvar secondHalf = new Span<int>(myBuffer, 50, 50);\n```", "```cs\n    var myObject = new object();\n    var myObjectReference = new\n    WeakReference<object>(myObject);\n    // Much further in the code, we might need myObject\n    if (myObjectReference.TryGetTarget(out var retrievedObject))\n    {\n        // Do something with retrievedObject\n    }\n    else\n    {\n        // We need to recreate myObject\n        myObject = new object();\n        myObjectReference.SetTarget(myObject);\n    }\n    ```", "```cs\n    bool customerHasPayed= false;\n    bool customerHasCredit = true;\n    bool customerPaymentIsLate = true;\n    ```", "```cs\n[Flags]\nenum CustomerPaymentStatus : byte\n{\n    CustomerHasPayed = 1 << 0,\n    CustomerHasCredit = 1 << 1,\n    CustomerPaymentIsLate = 1 << 2\n};\n```", "```cs\nCustomerPaymentStatus customerStatus =\n    CustomerPaymentStatus.CustomerHasCredit &\n    CustomerPaymentStatus.CustomerPaymentIsLate;\n```", "```cs\n[MessagePackObject]\npublic class SimpleClass\n{\n    [Key(0)]\n    public int X { get; set; }\n    [Key(1)]\n    public string Y { get; set; }\n}\n```", "```cs\npublic static byte[] SerializeToByteArray(SimpleClass simpleClass)\n{\n    byte[] data = MessagePackSerializer.Serialize(simpleClass);\n    return data;\n}\n```", "```cs\npublic static SimpleClass DeserializeFromByteArray(IntPtr ptr, int length)\n{\n    byte[] data = new byte[length];\n    Marshal.Copy(ptr, data, 0, length);\n    var simpleClass = MessagePackSerializer.        Deserialize<SimpleClass>(data);\n    return simpleClass;\n}\n```", "```cs\nvar simpleClass = new SimpleClass()\n{\n    X = 42,\n    Y = \"Systems Programming Rules!\"\n};\nvar memory = IntPtr.Zero;\ntry\n{\n    byte[] serializedData =\n        MemoryHandler.SerializeToByteArray(simpleClass);\n    memory = Marshal.AllocHGlobal(serializedData.Length);\n    Marshal.Copy(serializedData, 0, memory,\n        serializedData.Length);\n    SimpleClass deserializedSimpleClass =\n        MemoryHandler.DeserializeFromByteArray(\n            memory,\n            serializedData.Length);\n}\nfinally\n{\n    Marshal.FreeHGlobal(memory);\n}\n```", "```cs\nvar pointer = IntPtr.Zero;\ntry\n{\n    byte[] serializedData = MemoryHandler.        SerializeToByteArray(simpleClass);\n    pointer = Marshal.AllocHGlobal(serializedData.Length);\n    unsafe\n    {\n        // copy the data using pointer arithmetic\n        byte* pByte = (byte*)pointer;\n        for (int i = 0; i < serializedData.Length; i++)\n        {\n            *pByte = serializedData[i];\n            pByte++;\n        }\n        //deserialization is done here\n        byte[] deserializeData = new byte[serializedData.Length];\n        pByte = (byte*)pointer;\n        for (int i = 0; i < serializedData.Length; i++)\n        {\n            deserializeData[i] = *pByte;\n            pByte++;\n        }\n        var deserializedObject = MessagePackSerializer.        Deserialize<SimpleClass>(deserializeData);\n    }\n}\nfinally\n{\n    Marshal.FreeHGlobal(pointer);\n}\n```"]