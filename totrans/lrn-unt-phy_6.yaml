- en: Chapter 6. Animation and Unity3D Physics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn to use Physics in animation creation. We will
    see that there are several animations that can be easily handled by Unity3D's
    Physics. During development, you will come to know that working with animations
    and Physics is easy in Unity3D. You will find the combination of Physics and animation
    very interesting.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Interpolate and Extrapolate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Cloth component and its uses in animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ConstantForce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AddForce
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AddTorque
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example of creating a rope animation using different joints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing simple and complex animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, you will learn how to handle and create simple and complex
    animations using Physics, for example, creating a rope animation and hanging ball.
    Let's start with the Physics properties of a Rigidbody component, which help in
    syncing animation.
  prefs: []
  type: TYPE_NORMAL
- en: Interpolate and Extrapolate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unity3D offers a way that its Rigidbody component can help in the syncing of
    animation. Using the interpolation and extrapolation properties, we sync animations.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Interpolation is not only for animation, it also works with Rigidbody.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see in detail how interpolation and extrapolation work:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Cube** game object and apply **Rigidbody** on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Look at the **Inspector** panel shown in the following screenshot. On clicking
    **Interpolate**, a drop-down list that contains three options will appear, which
    are **None**, **Interpolate**, and **Extrapolate**. For details, refer to the
    previous chapter. By selecting any one of them, we can apply the feature.![Interpolate
    and Extrapolate](img/00080.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In interpolation, the position of an object is calculated by the current update
    time, moving it backwards one Physics update delta time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Delta time** or **delta timing** is a concept used among programmers in relation
    to frame rate and time. For more details, check out [http://docs.unity3d.com/ScriptReference/Time-deltaTime.html](http://docs.unity3d.com/ScriptReference/Time-deltaTime.html).'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely, you will observe that there are at least two Physics updates,
    which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ahead of the chosen time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Behind the chosen time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity interpolates between these two updates to get a position for the update
    position. So, we can say that the interpolation is actually lagging behind one
    Physics update.
  prefs: []
  type: TYPE_NORMAL
- en: The second option is **Extrapolate**, which is to use for extrapolation. In
    this case, Unity predicts the future position for the object. Although this does
    not show any lag, incorrect prediction sometime causes a visual jitter.
  prefs: []
  type: TYPE_NORMAL
- en: One more important component that is widely used to animate cloth is the **Cloth
    component**. Here, you will learn about its properties and how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: The Cloth component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make animation easy, Unity provides an interactive component called **Cloth**.
    In the **GameObject** menu, you can directly create the **Cloth** game object.
    Have a look at the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Cloth component](img/00081.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Unity also provides Cloth components in its Physics sections. To apply this,
    let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Plane** game object. (We can also create a **Cloth** game object.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Component** | **Physics** and choose **InteractiveCloth**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, you will see the following properties
    in the **Inspector** panel:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The Cloth component](img/00082.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Let's have a look at the properties one by one. **Blending Stiffness** and **Stretching
    Stiffness** define the blending and stretching stiffness of the Cloth while **Damping**
    defines the damp motion of the Cloth. Using the **Thickness** property, we decide
    the thickness of the Cloth, which ranges from 0.001 to 10,000\. If we enable the
    **Use Gravity** property, it will affect the Cloth simulation. Similarly, if we
    enable **Self Collision**, it allows the Cloth to collide with itself. For a constant
    or random acceleration, we apply the **External Acceleration** and **Random Acceleration**
    properties, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '**World Velocity Scale** decides the movement of the character in the world,
    which will affect the Cloth vertices. The higher the value, the more movement
    of the character will affect. **World Acceleration** works similarly. The **Interactive
    Cloth** component depends on the **Cloth Renderer** components. Lots of Cloth
    components in a game reduces the performance of game. To simulate clothing in
    characters, we use the **Skinned Cloth** component.'
  prefs: []
  type: TYPE_NORMAL
- en: Important points while using the Cloth component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are the important points to remember while using the Cloth component:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloth simulation will not generate tangents. So, if you are using a tangent
    dependent shader, the lighting will look wrong for a Cloth component that has
    been moved from its initial position.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We cannot directly change the transform of moving the Cloth game object. This
    is not supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disabling the Cloth before changing the transform is supported.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **SkinnedCloth** component works together with **SkinnedMeshRenderer** to
    simulate clothing on a character. As shown in the following screenshot, we can
    apply **Skinned Cloth**:![Important points while using the Cloth component](img/00083.jpeg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, there are different properties
    that we can use to get the desired effect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Important points while using the Cloth component](img/00084.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We can disable or enable the **Skinned Cloth** component at any time to turn
    it on or off.
  prefs: []
  type: TYPE_NORMAL
- en: ConstantForce
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a force is applied constantly on a game object, it is known as constant
    force. We use the `ConstantForce` Physics utility class to apply constant force
    on a game object. `AddForce` applies a force to the Rigidbody only for one frame
    whereas `ConstantForce` applies a force in every frame until we change the force
    or torque to a new value.
  prefs: []
  type: TYPE_NORMAL
- en: We use this for one-shot objects such as rockets.
  prefs: []
  type: TYPE_NORMAL
- en: An example of animation using ConstantForce
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We will look at the example of animation using ConstantForce with the help
    of the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and save it as `Constant Force Example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Cube** game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, apply **Constant Force** on it:![An example
    of animation using ConstantForce](img/00085.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To make a cube that accelerates forward, we set **Relative Force** to be along
    the positive *z* axis.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, use the Rigidbody's **Drag** property to set the maximum velocity and
    turn off gravity so that the game object will always stay on its path.![An example
    of animation using ConstantForce](img/00086.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the scene and you will see that the cube game object moves constantly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Till now, you have learned different Physics components. Now, you'll learn how
    we can use Physics in scripting. In this chapter, we will learn `AddForce` and
    `AddTorque`. By applying `AddForce` on a Rigidbody, we make it move while `AddTorque`
    adds a torque to the Rigidbody to make it spin around the torque axis.
  prefs: []
  type: TYPE_NORMAL
- en: An example of animation using AddForce
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AddForce` adds force to the Rigidbody.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Physics, a **force** is any interaction that tends to change the motion of
    an object. In other words, a force can cause an object with mass to change its
    velocity (which includes beginning moving from a state of rest), that is, to accelerate.
    Force can also be described by intuitive concepts such as a push or a pull.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will create a projectile using `AddForce` Physics:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and save it as `addForce example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use a **Plane** game object to create ground.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Apply a green material on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Capsule** object and apply **Rigidbody** on it as shown in the following
    screenshot. Now, name it `bullet`.![An example of animation using AddForce](img/00087.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new JavaScript or UnityScript and name it `projectile`. Write the
    following code inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As shown in the following screenshot, you will need to specify **Bullet Object**:![An
    example of animation using AddForce](img/00088.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **bullet** game object and put it on the **Bullet Object** section
    as shown in the following screenshot:![An example of animation using AddForce](img/00089.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, test the scene and you will see that on a click, the bullet is fired and
    it is moved in a projectile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this example, we saw how to use `AddForce` to create a projectile animation.
    Similarly, in the next example, we will see how to use `AddTorque` to create an
    animation.
  prefs: []
  type: TYPE_NORMAL
- en: An example of animation using AddTorque
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`AddTorque` adds torque to the Rigidbody.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Torque is a measure of the turning force on an object such as a bolt or a flywheel.
    For example, pushing or pulling the handle of a wrench connected to a nut or bolt
    produces a torque (turning force) that loosens or tightens the nut or bolt.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we will use `AddTorque` to create an animation:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and save it as `AddTorque example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Cube** game object and name it `box`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add **Rigidbody** on a **Box** game object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new JavaScript and use the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the script file to **Main Camera** and drag the game object box to the box
    variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the scene and you will see the spin movement of the box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In another example, we will create an animation using different joints. In the
    previous chapter, you learned different joints, including the character joint,
    which is used for a Ragdoll effect. Now, we will create a rope animation using
    **Fixed Joint** and **Hinge Joint**.
  prefs: []
  type: TYPE_NORMAL
- en: An example of rope animation using different joints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following example, we will create a rope using different joints. Joints
    help to create flexible animation, and this is why we are going to use joints
    for the rope animation.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene and save it as `Rope Animation example`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Sphere** game object and apply a material to make it colorful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, apply **Rigidbody** and **Fixed Joint** on it as shown in the following
    screenshot:![An example of rope animation using different joints](img/00090.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a **Cylinder** game object and name it `Chain 1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, apply **Rigidbody** and **Hinge Joint** on it. As shown in the following
    screenshot, you will see the **Connected Body** property:![An example of rope
    animation using different joints](img/00091.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Connected Body** property of the **Sphere** game object, drag the **Chain
    1** game object.![An example of rope animation using different joints](img/00092.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, run the scene; you will see that the sphere falls along with the **Cylinder**
    game object as shown in the following screenshot:![An example of rope animation
    using different joints](img/00093.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As shown in the following screenshot, now create the `Chain 2` game object and
    apply **Rigidbody** and **Hinge Joint**. Specify its position above the **Chain
    1** and drag **Chain 2** as connected body for **Chain 1**.![An example of rope
    animation using different joints](img/00094.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, create **Chain 3** and **Chain 4**. Now, rotate all the game objects
    as shown in the following screenshot:![An example of rope animation using different
    joints](img/00095.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test this application; you will see a sphere hanging from a rope:![An example
    of rope animation using different joints](img/00096.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the preceding steps, you learned how to create an animation using different
    joints.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the different Physics components of Unity,
    using which we can create different types of animation. You learned how to use
    the Cloth component and `AddForce` to create the projectile animation of a bullet.
    You learned how to create the wrecking animation of ball using different joints.
    In the next chapter, you will learn how to create a smooth game play using different
    Physics components and how we can handle the game play performance.
  prefs: []
  type: TYPE_NORMAL
