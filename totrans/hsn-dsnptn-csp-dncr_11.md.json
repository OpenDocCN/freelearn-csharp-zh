["```cs\ninternal class TicketCounter\n{\n    public static void CounterA() => Console.WriteLine(\"Person A is collecting ticket from Counter A\");\n    public static void CounterB() => Console.WriteLine(\"Person B is collecting ticket from Counter B\");\n    public static void CounterC() => Console.WriteLine(\"Person C is collecting ticket from Counter C\");\n}\n```", "```cs\ninternal class Program\n{\n    private static void Main(string[] args)\n    {\n        var counterA = new Thread(TicketCounter.CounterA);\n        var counterB = new Thread(TicketCounter.CounterB);\n        var counterC = new Thread(TicketCounter.CounterC);\n        Console.WriteLine(\"3-counters are serving...\");\n        counterA.Start();\n        counterB.Start();\n        counterC.Start();\n        Console.WriteLine(\"Next person from row\");\n        Console.ReadLine();\n    }\n}\n```", "```cs\n3-counters are serving...\nNext person from row\nPerson A is collecting ticket from Counter A\nPerson B is collecting ticket from Counter B\nPerson C is collecting ticket from Counter C\n```", "```cs\n3-counters are serving...\nPerson A is collecting ticket from Counter A\nPerson B is collecting ticket from Counter B\nNext person from row\nPerson C is collecting ticket from Counter C\n```", "```cs\ninternal class SynchronizedTicketCounter\n{\n    public void ShowMessage()\n    {\n        int personsInQueue = 5; //assume maximum persons in queue\n lock (this)\n        {\n            Thread thread = Thread.CurrentThread;\n            for (int personCount = 0; personCount < personsInQueue; personCount++)\n            {\n                Console.WriteLine($\"\\tPerson {personCount + 1} is collecting ticket from counter {thread.Name}.\");\n            }\n        }\n    }\n}\n```", "```cs\ninternal class AsyncAwait\n{\n    public async Task ShowMessage()\n    {\n        Console.WriteLine(\"\\tServing messages!\");\n        await Task.Delay(1000);\n    }\n}\n```", "```cs\npublic bool UpdateQuantity(string name, int quantity)\n{\n    lock (_lock)\n    {\n        _books[name].Quantity += quantity;\n    }\n\n    return true;\n}\n```", "```cs\nprivate readonly IDictionary<string, Book> _books;\nprotected InventoryContext()\n{\n    _books = new ConcurrentDictionary<string, Book>();\n}\n```", "```cs\nprivate static void ProcessTickets()\n{\n    var ticketCounter = new TicketCounter();\n    var counterA = new Thread(ticketCounter.ShowMessage);\n    var counterB = new Thread(ticketCounter.ShowMessage);\n    var counterC = new Thread(ticketCounter.ShowMessage);\n    counterA.Name = \"A\";\n    counterB.Name = \"B\";\n    counterC.Name = \"C\";\n    counterA.Start();\n    counterB.Start();\n    counterC.Start();\n}\n```", "```cs\nprivate static readonly object Object = new object();\npublic void ShowMessage()\n{\n    const int personsInQueue = 5;\n    if (Monitor.TryEnter(Object, 300))\n    {\n        try\n        {\n            var thread = Thread.CurrentThread;\n            for (var personCount = 0; personCount < personsInQueue; personCount++)\n                Console.WriteLine(\n                    $\"\\tPerson {personCount + 1} is collecting ticket from counter {thread.Name}.\");\n        }\n        finally\n        {\n            Monitor.Exit(Object);\n        }\n    }\n}\n```", "```cs\ncounterC.Priority = ThreadPriority.Highest\ncounterB.Priority = ThreadPriority.Normal;\ncounterA.Priority = ThreadPriority.Lowest;\n```", "```cs\npublic void PallelVersion()\n{\n    var books = GetBooks();\n    Parallel.ForEach(books, Process);\n}\n```", "```cs\nprivate void Process(Book book)\n{\n    Console.WriteLine($\"\\t{book.Id}\\t{book.Name}\\t{book.Quantity}\");\n}\n```", "```cs\nprivate static void ParallelismExample()\n{\n    var parallelism = new Parallelism();\n    parallelism.GenerateBooks(19);\n    Console.WriteLine(\"\\n\\tId\\tName\\tQty\\n\");\n    parallelism.PallelVersion();\n    Console.WriteLine($\"\\n\\tTotal Processes Running on the machine:{Environment.ProcessorCount}\\n\");\n    Console.WriteLine(\"\\tProcessing complete. Press any key to exit.\");\n    Console.ReadKey();\n}\n```", "```cs\npublic void Sequential()\n{\n    var books = GetBooks();\n    foreach (var book in books) { Process(book); }\n}\n```", "```cs\npublic void Process()\n{\n    var bookCount = 50000;\n    _parallelism.GenerateBooks(bookCount);\n    var books = _parallelism.GetBooks();\n    var query = from book in books.AsParallel()\n        where book.Quantity > 12250\n        select book;\n    Console.WriteLine($\"\\n\\t{query.Count()} books out of {bookCount} total books,\" +\n                      \"having Qty in stock more than 12250.\");\n    Console.ReadKey();\n}\n```", "```cs\nvar query = from book in books.AsParallel().WithDegreeOfParallelism(3)\n    where book.Quantity > 12250\n    select book;\nreturn query;\n```"]