["```cs\n    using UnityEngine;\n\n         public class MouseOverHighlighter : MonoBehaviour {\n         public Color mouseOverColor = Color.yellow;\n\n         private Material originalMaterial;\n         private Material mouseOverMaterial;\n         private MeshRenderer meshRenderer;\n\n         void Start() {\n             meshRenderer = GetComponent<MeshRenderer>();\n             originalMaterial = meshRenderer.material;\n             mouseOverMaterial = new \n             Material(meshRenderer.sharedMaterial);\n             mouseOverMaterial.color = mouseOverColor;\n         }\n\n         void OnMouseOver() {\n             meshRenderer.material = mouseOverMaterial;\n         }\n\n         void OnMouseExit() {\n             meshRenderer.material = originalMaterial;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class MouseOverDownHighlighter : MonoBehaviour {\n         public Color mouseOverColor = Color.yellow;\n         public Color mouseDownColor = Color.green;\n\n         private Material originalMaterial;\n         private Material mouseOverMaterial;\n         private Material mouseDownMaterial;\n         private MeshRenderer meshRenderer;\n\n         private bool mouseOver = false;\n\n         void Start() {\n             meshRenderer = GetComponent<MeshRenderer>();\n             originalMaterial = meshRenderer.sharedMaterial;\n             mouseOverMaterial = NewMaterialWithColor(mouseOverColor);\n             mouseDownMaterial = NewMaterialWithColor(mouseDownColor);\n\n         }\n\n         void OnMouseEnter() {\n             mouseOver = true;\n             meshRenderer.sharedMaterial = mouseOverMaterial;\n         }\n\n         void OnMouseDown() {\n             meshRenderer.sharedMaterial = mouseDownMaterial;\n         }\n\n         void OnMouseUp() {\n             if (mouseOver)\n                 OnMouseEnter();\n             else\n                 OnMouseExit();\n         }\n\n         void OnMouseExit() {\n             mouseOver = false;\n             meshRenderer.sharedMaterial = originalMaterial;\n         }\n\n         private Material NewMaterialWithColor(Color newColor) {\n             Material material = new Material(meshRenderer.sharedMaterial);\n             material.color = newColor;\n\n             return material;\n         }\n     } \n```", "```cs\nusing UnityEngine;\n     public class FadeObject: MonoBehaviour {\n         public float fadeDurationSeconds = 1.0f;\n         public float alphaStart = 1.0f;\n         public float alphaEnd = 0.0f;\n         private float startTime;\n         private MeshRenderer meshRenderer;\n         private Color fadeColor;\n         private bool isFading = false;\n\n         void Start () {\n             meshRenderer = GetComponent<MeshRenderer>();\n             fadeColor = meshRenderer.material.color;\n             UpdateMaterialAlpha(alphaStart);\n         }\n\n         void Update() {\n             if (isFading)\n                 FadeAlpha();\n         }\n\n         void OnMouseUp() {\n             StartFading();\n         }\n\n         private void StartFading()\n         {\n             startTime = Time.time;\n             isFading = true;\n         }\n\n         private void FadeAlpha()\n         {\n             float timeFading = Time.time - startTime;\n             float fadePercentage = timeFading / \n             fadeDurationSeconds;\n             float alpha = Mathf.Lerp(alphaStart, alphaEnd, \n            fadePercentage);\n             UpdateMaterialAlpha(alpha);\n\n             if (fadePercentage >= 1)\n                 isFading = false;\n         }\n\n         private void UpdateMaterialAlpha(float newAlpha) {\n             fadeColor.a = newAlpha;\n             meshRenderer.material.color = fadeColor;\n         }\n     } \n```", "```cs\nvoid Update()\n {\n if (Input.GetKeyDown(KeyCode.F))\n StartFading();\n\n if (isFading)\n FadeAlpha();\n }\n```", "```cs\npublic bool destroyWhenFadingComplete = true; \n```", "```cs\nprivate void EndFade() {\n         isFading = false;\n\n         if(destroyWhenFadingComplete)\n             Destroy (gameObject);\n     } \n```", "```cs\n    private void FadeAlpha()\n     {\n         float fadeProgress = Time.time - startTime;\n         float alpha = Mathf.Lerp(alphaStart, alphaEnd, fadeProgress \n          / fadeDurationSeconds);\n         UpdateMaterialAlpha(alpha);\n\n         if (fadeProgress >= fadeDurationSeconds)\n             EndFade();\n     } \n```", "```cs\npublic bool useMaterialAlpha = false; \n```", "```cs\nvoid Start () {\n         meshRenderer = GetComponent<MeshRenderer>();\n\n         // set object material's original color as fadeColor\n         fadeColor = meshRenderer.material.color;\n\n         // IF using material's original alpha value, THEN use \n             //material's alpha value for alphaStart\n         if (useMaterialAlpha)\n             alphaStart = fadeColor.a;\n\n         // start object's alpha at our alphaStart value\n         UpdateMaterialAlpha(alphaStart);\n     } \n```", "```cs\nusing System.Collections; \n```", "```cs\nprivate IEnumerator FadeFunction() {\n         while (isFading)\n         {\n             yield return new WaitForEndOfFrame();\n             FadeAlpha();\n         }\n     } \n```", "```cs\nprivate void StartFading() {\n         startTime = Time.time;\n         isFading = true;\n         StartCoroutine(FadeFunction());\n     } \n```"]