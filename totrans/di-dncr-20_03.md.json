["```cs\n    public class DependencyClass1 : IDisposable \n    { \n      private readonly DependencyClass2 _DC2; \n      public DependencyClass1(DependencyClass2 DC2instance) \n      { \n        _DC2 = DC2instance; \n        Console.WriteLine(\"Constructor of DependencyClass1 finished\"); \n      } \n      public void CurrentTime() \n      { \n        string time = DateTime.Now.Hour.ToString() + \":\" + \n           DateTime.Now.Minute.ToString() + \":\" + \n           DateTime.Now.Second.ToString(); \n        Console.WriteLine($\"Current time: {time}\"); \n      } \n      public void Dispose() \n      { \n        _DC2.Dispose(); \n        Console.WriteLine(\"DependencyClass1 disposed\"); \n      } \n    } \n    public class DependencyClass2 : IDisposable \n    { \n      public DependencyClass2() \n      { \n        Console.WriteLine(\"Constructor of DependencyClass2 finished\"); \n      } \n\n      public void Dispose() \n      { \n        Console.WriteLine(\"DependencyClass2 Disposed\"); \n      } \n    } \n```", "```cs\n    using Microsoft.Extensions.DependencyInjection; \n    using System; \n```", "```cs\n    static void Main(string[] args) \n    { \n      Console.WriteLine(\"Dependency Injection Demo\"); \n      Console.WriteLine(\"Basic use of the Microsoft.Extensions.\n          DependencyInjection Library\"); \n      Console.WriteLine(\"--------------------------------------\n          ---------------------------\"); \n      var services = new ServiceCollection(); \n      services.AddTransient<DependencyClass2>(); \n      services.AddTransient<DependencyClass1>(); \n      var provider = services.BuildServiceProvider(); \n      using (var DC1Instance = provider.GetService<DependencyClass1>()) \n      { \n        // Merely by declaring DC1Instance \n        // everything gets launched, but we also call \n        // CurrentTime() just to check functionality \n        DC1Instance.CurrentTime(); \n        // Notice also how classes are properly disposed \n        // after used. \n      } \n      Console.ReadLine(); \n    } \n```", "```cs\n    using (var DC1Instance = provider.\n         GetService<DependencyClass1>()) \n    { \n      // Merely by declaring DependencyClass1  \n      // everything gets launched, but we also call \n      // CurrentTime() just to check functionality \n      DC1Instance.CurrentTime(); \n      // Notice also how classes are properly disposed \n      // after used. \n      var DC1Instance2 = provider.GetService<DependencyClass1>(); \n      DC1Instance2.CurrentTime(); \n    } \n```", "```cs\n    services.AddScoped<DependencyClass2>(); \n    services.AddScoped<DependencyClass1>(); \n```", "```cs\n    public interface IXMLWriter \n    { \n      void WriteXML(); \n    } \n    public interface IJSONWriter \n    { \n      void WriteJSON(); \n    } \n    public class XMLWriter : IXMLWriter \n    { \n      public void WriteXML() \n      { \n        Console.WriteLine(\"<message>Writing in XML Format</message>\"); \n      } \n    } \n    public class JSONWriter : IJSONWriter \n    { \n      public void WriteJSON() \n      { \n        Console.WriteLine(\"{'message': 'Writing in JSON Format'}\"); \n      } \n    } \n```", "```cs\n    static void Main(string[] args) \n    { \n      var services = new ServiceCollection(); \n      services.AddTransient<IXMLWriter, XMLWriter>(); \n      services.AddTransient<IJSONWriter, JSONWriter>(); \n      var provider = services.BuildServiceProvider(); \n      Console.WriteLine(\"Dependency Injection Demo (2)\"); \n      Console.WriteLine(\"Mapping Interfaces to instance classes\"); \n      Console.WriteLine(\"--------------------------------------\"); \n      Console.WriteLine(\"Please, select message format \n          (1):XML // (2):JSON\"); \n       var res = Console.ReadLine(); \n      if (res == \"1\") \n      { \n        var XMLInstance = provider.GetService<IXMLWriter>(); \n        XMLInstance.WriteXML(); \n      } \n      else \n      { \n         var JSONInstance = provider.GetService<IJSONWriter>(); \n         JSONInstance.WriteJSON(); \n      } \n      Console.ReadLine(); \n    } \n```", "```cs\n    public class XMLWriter2 : IXMLWriter \n    { \n      public void WriteXML() \n      { \n        Console.WriteLine(\"<message>Writing in XML Format (2)</message>\"); \n      } \n    } \n    public class JSONWriter2 : IJSONWriter \n    { \n      public void WriteJSON() \n      { \n        Console.WriteLine(\"{'message': 'Writing in JSON Format (2)'}\"); \n      } \n   } \n```", "```cs\n    services.AddTransient<IXMLWriter, XMLWriter>(); \n    services.AddTransient<IXMLWriter, XMLWriter2>(); \n    services.AddTransient<IJSONWriter, JSONWriter>(); \n    services.AddTransient<IJSONWriter, JSONWriter2>(); \n    Now we can use a whole collection by asking for it by means of the \n       GetServices<Interface>() method that I mentioned above: \n    var registeredXMLServices = provider.GetServices<IXMLWriter>(); \n    foreach (var svc in registeredXMLServices) \n    { \n      svc.WriteXML(); \n    } \n```", "```cs\n    var myServiceArray = new ServiceDescriptor[services.Count]; \n    // Copy the services into an array. \n    services.CopyTo(myServiceArray, 0); \n    IEnumerator myEnumerator = myServiceArray.GetEnumerator(); \n    Console.WriteLine(\"The Implementation Types in the array are\"); \n    while (myEnumerator.MoveNext()) \n    { \n      var myService1 = (ServiceDescriptor)myEnumerator.Current; \n      Console.WriteLine(myService1.ImplementationType); \n    } \n```", "```cs\n    //Description of properties in the service collection  \n    foreach (var svc in services) \n    { \n      Console.WriteLine($\"Type: {svc.ImplementationType} \\n\" + \n         $\"Lifetime: {svc.Lifetime} \\n\" + \n         $\"Service Type: {svc.ServiceType}\"); \n    } \n```", "```cs\n    static void Main(string[] args) \n    { \n      var services = new ServiceCollection(); \n      services.AddSingleton<IXMLWriter, XMLWriter>(); \n      var provider = services.BuildServiceProvider(); \n      Console.WriteLine(\"Dependency Injection Demo (3)\"); \n      Console.WriteLine(\"Choice between implementations\"); \n      Console.WriteLine(\"------------------------------\"); \n      // Instance via services class \n      var XMLInstance = provider.GetService<IXMLWriter>(); \n      XMLInstance.WriteXML(); \n      // Instance via ServiceProviderServiceExtensions \n      var XMLInstance2 = ServiceProviderServiceExtensions. \n                       GetService<IXMLWriter>(provider); \n      XMLInstance2.WriteXML();     \n      Console.ReadLine(); \n    } \n```", "```cs\n    var services = new ServiceCollection(); \n    services.AddSingleton<IXMLWriter, XMLWriter>(); \n    // Provider via DefaultServiceProviderFactory \n    var factory = new DefaultServiceProviderFactory(); \n    IServiceProvider prov = factory.CreateServiceProvider(services); \n    var XMLInstance = prov.GetService<IXMLWriter>(); \n    XMLInstance.WriteXML(); \n```", "```cs\n    var services = new ServiceCollection(); \n    services.AddSingleton<IXMLWriter, XMLWriter>(); \n    // Provider via ServiceCollectionContainerBuilderExtensions \n    IServiceProvider prov = ServiceCollectionContainerBuilderExtensions. \n        BuildServiceProvider(services); \n    var XMLInstance = prov.GetService<IXMLWriter>(); \n    XMLInstance.WriteXML(); \n```", "```cs\n    public interface IServiceScope : IDisposable \n```", "```cs\n    // Enabling logging with the ServiceCollection \n    var services = new ServiceCollection() \n      .AddSingleton<IXMLWriter, XMLWriter>() \n      .AddLogging(); \n   var serviceProvider = services.BuildServiceProvider(); \n```", "```cs\n    // Test the register of AddLoggin() \n    foreach (var svc in services) \n   { \n      Console.WriteLine($\"Type: {svc.ImplementationType} \\n\" + \n        $\"Lifetime: {svc.Lifetime} \\n\" + \n        $\"Service Type: {svc.ServiceType}\"); \n   } \n```", "```cs\n    //Obtain service and configure logging \n    serviceProvider.GetService<ILoggerFactory>() \n      .AddConsole(LogLevel.Debug); \n```", "```cs\n    // Create a logger class from ILoggerFactory \n    // and print an initial set of messages. \n    var ILoggerService = serviceProvider.GetService<ILoggerFactory>(); \n    var logger = ILoggerService.CreateLogger<Program>(); \n```", "```cs\n    logger.LogCritical(\"Critical format message from Program\"); \n    logger.LogDebug(\"Debug format message from Program\"); \n    logger.LogError(\"Error format message from Program\"); \n    logger.LogInformation(\"Information format message from Program\"); \n    logger.LogTrace(\"Trace format message from Program\"); \n    logger.LogWarning(\"Warning format message from Program\");  \n```", "```cs\n    public class XMLWriter : IXMLWriter \n    { \n      private readonly ILogger<XMLWriter> logger; \n      public XMLWriter(ILoggerFactory loggerFactory) \n      { \n        logger = loggerFactory.CreateLogger<XMLWriter>(); \n      } \n      public void WriteXML() \n      { \n        logger.LogInformation(\"<message>Writing in XML Format\n          (via Logger)</message>\"); \n      } \n    } \n```", "```cs\n    static void Main(string[] args) \n    { \n      // Enabling logging in the ServiceCollection \n      // via AddLogging() \n      var services = new ServiceCollection() \n        .AddSingleton<IXMLWriter, XMLWriter>() \n        .AddLogging(); \n      var serviceProvider = services.BuildServiceProvider(); \n      //Obtain service and configure logging \n      serviceProvider.GetService<ILoggerFactory>() \n        .AddConsole(LogLevel.Debug); \n\n      // Create a logger class from ILoggerFactory \n      // and print all types of messages. \n      var ILoggerService = serviceProvider.GetService<ILoggerFactory>(); \n      var logger = ILoggerService.CreateLogger<Program>(); \n      logger.LogCritical(\"Critical format message from Program\"); \n      logger.LogDebug(\"Debug format message from Program\"); \n      logger.LogError(\"Error format message from Program\"); \n      logger.LogInformation(\"Information format message from Program\"); \n      logger.LogTrace(\"Trace format message from Program\"); \n      logger.LogWarning(\"Warning format message from Program\"); \n\n      //Instantiation of XMLInstance \n      var XMLInstance = serviceProvider.GetService<IXMLWriter>(); \n      XMLInstance.WriteXML(); \n\n      logger.LogDebug(\"Process finished!\"); \n      Console.Read(); \n    } \n```", "```cs\n    public interface IXMLWriter \n    { \n        void WriteXML(); \n        void WriteXMLWithSeverityLevel(); \n    } \n```", "```cs\n    public class XMLWriter : IXMLWriter \n    { \n      private readonly ILogger<XMLWriter> logger; \n      public XMLWriter(ILoggerFactory loggerFactory) \n      { \n        loggerFactory.AddDebug().AddConsole(LogLevel.Information); \n        logger = loggerFactory.CreateLogger<XMLWriter>(); \n      } \n      public void WriteXML() \n      { \n        logger.LogDebug( \n            \"<msg>First Message (LogDebug/SeverityLevel: \n                 Information)</msg>\"); \n      } \n      public void WriteXMLWithSeverityLevel() \n      { \n        logger.LogDebug( \n            \"<msg>Second Message (LogDebug/SeverityLevel: \n                 Information</msg>\"); \n      } \n    } \n```", "```cs\n    var ILoggerService = serviceProvider.GetService<\n          ILoggerFactory>(); \n    ILoggerService.AddDebug(); \n```", "```cs\n    //Instantiation of XMLInstance \n    var XMLInstance = serviceProvider.GetService<IXMLWriter>(); \n    XMLInstance.WriteXML(); \n    XMLInstance.WriteXMLWithSeverityLevel(); \n```"]