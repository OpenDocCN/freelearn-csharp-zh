["```cs\nusing System;\nusing System.Linq;\nusing System.Collections.Immutable;\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.Diagnostics;\nnamespace Packt.Analyzers {\n  [DiagnosticAnalyzer(LanguageNames.CSharp)]\n  public class ToStringAnalyzer : DiagnosticAnalyzer {\n  }\n}\n```", "```cs\npublic override ImmutableArray<DiagnosticDescriptor>\n  SupportedDiagnostics => null;\npublic override void Initialize(AnalysisContext con) {\n}\n```", "```cs\npublic static readonly DiagnosticDescriptor Rule =\n  new DiagnosticDescriptor(\n    id: \"CSA1001\",\n    title: \"Override ToString()\",\n    messageFormat: \"Override ToString on {0}\",\n    category: \"Maintainability\",\n    defaultSeverity: DiagnosticSeverity.Info,\n    isEnabledByDefault: true,\n    description: \"Override ToString to help debugging.\");\npublic override ImmutableArray<DiagnosticDescriptor>\n  SupportedDiagnostics => ImmutableArray.Create(Rule);\n```", "```cs\npublic override void Initialize(AnalysisContext con) {\n  con.ConfigureGeneratedCodeAnalysis(\n    GeneratedCodeAnalysisFlags.None);\n  con.EnableConcurrentExecution();\n  con.RegisterSymbolAction(Analyze, SymbolKind.NamedType);\n}\n```", "```cs\nprivate static void Analyze(\n  SymbolAnalysisContext con) {\n  INamedTypeSymbol sym = (INamedTypeSymbol)con.Symbol;\n  IMethodSymbol toString =\n    sym.GetMembers()\n       .OfType<IMethodSymbol>()\n       .FirstOrDefault(m => m.Name == \"ToString\"\n                         && m.IsOverride\n                         && m.Parameters.Length == 0);\n  if (toString == null) {\n    Diagnostic diagnostic = Diagnostic.Create(\n      Rule, sym.Locations[0], sym.Name);\n    con.ReportDiagnostic(diagnostic);\n  }\n}\n```", "```cs\nusing Microsoft.CodeAnalysis;\nusing Microsoft.CodeAnalysis.Diagnostics;\nusing RoslynTestKit;\nnamespace Packt.Analyzers.Tests;\npublic class ToStringAnalyzerTests : AnalyzerTestFixture {\n  protected override string LanguageName\n    => LanguageNames.CSharp;\n  protected override DiagnosticAnalyzer CreateAnalyzer()\n    => new ToStringAnalyzer();\n}\n```", "```cs\npublic const string GoodCode = @\"\nusing System;\npublic class Flight\n{\n  public string Id {get; set;}\n  public string DepartAirport {get; set;}\n  public string ArriveAirport {get; set;}\n  public override string ToString() => Id;\n}\";\n```", "```cs\n[Fact]\npublic void AnalyzerShouldNotFlagGoodCode() {\n  NoDiagnostic(GoodCode, ToStringAnalyzer.Rule.Id);\n}\n```", "```cs\npublic const string BadCode = @\"\nusing System;\npublic class [|Flight|]\n{\n  public string Id {get; set;}\n  public string DepartAirport {get; set;}\n  public string ArriveAirport {get; set;}\n}\";\n```", "```cs\n[Fact]\npublic void AnalyzerShouldFlagViolations() {\n  HasDiagnostic(BadCode, ToStringAnalyzer.Rule.Id);\n}\n```", "```cs\n<ItemGroup>\n  <Analyzer Include=\"..\\some\\path\\Your.Analyzer.dll\" />\n</ItemGroup>\n```"]