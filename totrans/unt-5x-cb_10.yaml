- en: Chapter 10. Working with External Resource Files and Devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files – using Unity Default Resources
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files – by downloading files from the Internet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files – by manually storing files in the Unity Resources
    folder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and loading player data – using static properties
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and loading player data – using PlayerPrefs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving screenshots from the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a leaderboard using PHP/MySQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading game data from a text file map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Unity project code using Git version control and GitHub hosting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing for multiple devices via Unity Cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For some projects, it works fine to use the **Inspector** window to manually
    assign imported assets to the component slots, and then build and play the game
    with no further changes. However, there are also many times when external data
    of some kind can add flexibility and features to a game. For example, it might
    add updateable or user-editable content; it can allow memory of user preferences
    and achievements between scenes, and even game-playing sessions. Using code to
    read local or Internet file contents at runtime can help file organization and
    separation of tasks between game programmers and the content designers. Having
    an arsenal of different assets and long-term game memory techniques means providing
    a wide range of opportunities to deliver a rich experience to players and developers
    alike.
  prefs: []
  type: TYPE_NORMAL
- en: The big picture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before getting on with the recipes, let's step back and have a quick review
    of the role of the asset files and the Unity game building and running process.
    The most straightforward way to work with assets is to import them into a Unity
    project, use the **Inspector** window to assign the assets to the components in
    the **Inspector**, and then build and play the game.
  prefs: []
  type: TYPE_NORMAL
- en: '![The big picture](img/1362OT_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Standalone executables offer another possible workflow, which is the adding
    of files into the `Resources` folder of the game after it has been built. This
    will support game media asset developers being able to provide the final version
    of assets after development and building has been completed.
  prefs: []
  type: TYPE_NORMAL
- en: However, another option is to use the `WWW` class to dynamically read assets
    from the web at runtime; or perhaps, for communication with a high score or multiplayer
    server, and sending and receiving information and files.
  prefs: []
  type: TYPE_NORMAL
- en: '![The big picture](img/1362OT_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When loading/saving data either locally or via the web interface, it is important
    to keep in mind the data types that can be used. When writing C# code, our variables
    can be of any type permitted by the language, but when communicated by the web
    interface, or to a local storage using Unity's `PlayerPrefs` class, we are restricted
    in the types of data that we can work with. Unity's `WWW` class permits three
    file types (text files, binary audio clips, and binary image textures), but, for
    example, for 2D UIs we sometimes need Sprite images and not Textures, so that
    we have provided in this chapter a C# method to create a Sprite from a Texture.
    When using the `PlayerPrefs` class, we are limited to saving and loading integers,
    floats, and strings. Similarly, when communicating with a web server using the
    URL encoded data, we are restricted to whatever we can place into strings (we
    include a PHP web-based high score recipe, where the user scores can be loaded
    and saved via such a method).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, managing Unity project source code with an online **Distributed Version
    Control System** (**DVCS**) like Git and GitHub opens up new workflows for the
    continuous integration of code updates to the working builds. Unity Cloud will
    *pull* the updated source code projects from your online repository, and then
    build the game for designated versions of Unity and the deployment devices. Developers
    will get e-mails to confirm the build success, or to list the reasons for any
    build failure. The final two recipes in this chapter show you how to manage your
    code with Git and GitHub, and use Unity Cloud to build projects for multiple devices.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Acknowledgement**: Thanks to the following for publishing *Creative Commons
    (BY 3.0)* licensed icons: **Elegant Themes**, **Picol**, **Freepik**, **Yannick**,
    **Google**, [www.flaticon.com](http://www.flaticon.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Loading external resource files – using Unity Default Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will load an external image file, and display it on the screen,
    using the **Unity Default Resources** file (a library created at the time the
    game was compiled).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This method is perhaps the simplest way to store and read the external resource
    files. However, it is only appropriate when the contents of the resource files
    will not change after compilation, since the contents of these files are combined
    and compiled into the `resources.assets` file.
  prefs: []
  type: TYPE_NORMAL
- en: The `resources.assets` file can be found in the `Data` folder for a compiled
    game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading external resource files – using Unity Default Resources](img/1362OT_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `1362_10_01` folder, we have provided an image file, a text file, and
    an audio file in the `.ogg` format for this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`externalTexture.jpg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cities.txt`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`soundtrack.ogg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load the external resources by Unity Default Resources, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 3D Unity project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** window, create a new folder and rename it `Resources`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the `externalTexture.jpg` file and place it in the `Resources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a 3D cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# Script to your cube:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Play the scene. The texture will be loaded and displayed on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have another image file, put a copy into the `Resources` folder. Then,
    in the **Inspector** window, change the public file name to the name of your image
    file and play the scene again. The new image will now be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Resources.Load(fileName)` statement makes Unity look inside its compiled
    project data file called `resources.assets` for the contents of a file named `externalTexture`.
    The contents are returned as a texture image, which is stored into the `externalImage`
    variable. The last statement in the `Start()` method sets the texture of the GameObject
    the script has been attached to our `externalImage` variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Note: The filename string passed to `Resources.Load()` does *not* include the
    file extension (such as `.jpg` or `.txt`).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Loading text files with this method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can load the external text files using the same approach. The private variable
    needs to be a string (to store the text file contents). The `Start()` method uses
    a temporary `TextAsset` object to receive the text file contents, and the text
    property of this object contains the string contents that are to be stored in
    the private variable `textFileContents`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Finally, this string is displayed on the console.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading text files with this method](img/1362OT_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loading and playing audio files with this method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can load external audio files using the same approach. The private variable
    needs to be an `AudioClip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading external resource files – by manually storing files in Unity Resources
    folder*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Loading external resource files – by downloading files from the Internet*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files – by downloading files from the Internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to store and read a text file data is to store the text files on the
    Web. In this recipe, the contents of a text file for a given URL are downloaded,
    read, and then displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you need to have access to the files on a web server. If you
    run a local web server such as **Apache**, or have your own web hosting, then
    you can use the files in the `1362_10_01` folder and the corresponding URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Otherwise, you may find the following URLs useful; since they are the web locations
    of an image file (a Packt Publishing logo) and a text file (an ASCII-art badger
    picture):'
  prefs: []
  type: TYPE_NORMAL
- en: '[www.packtpub.com/sites/default/files/packt_logo.png](http://www.packtpub.com/sites/default/files/packt_logo.png)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[www.ascii-art.de/ascii/ab/badger.txt](http://www.ascii-art.de/ascii/ab/badger.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load external resources by downloading them from the Internet, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In a 2D project, create a new `RawImage` UI GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# script class as a component of your image object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Play the scene. Once downloaded, the contents of the image file will be displayed:![How
    to do it...](img/1362OT_10_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note the need to use the `UnityEngine.UI` package for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: When the game starts, our `Start()` method starts the **coroutine** method called
    `LoadWWW()`. A coroutine is a method that can keep on running in the background
    without halting or slowing down the other parts of the game and the frame rate.
    The `yield` statement indicates that once a value can be returned for `imageFile`,
    the remainder of the method can be executed—that is, until the file has finished
    downloading, no attempt should be made to extract the texture property of the
    `WWW` object variable.
  prefs: []
  type: TYPE_NORMAL
- en: Once the image data has been loaded, execution will progress past the `yield`
    statement. Finally, the `texture` property of the `RawImage` GameObject, to which
    the script is attached, is changed to the image data that is downloaded from the
    Web (inside the `texture` variable of the `www` object).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Converting from Texture to Sprite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'While in the recipe we used a UI **RawImage**, and so could use the downloaded
    **Texture** directly, there may be times when we wish to work with a **Sprite**
    rather than a **Texture**. Use this method to create a **Sprite** object from
    a **Texture**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Downloading a text file from the Web
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Use this technique to download a text file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The WWW class and the resource contents
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `WWW` class defines several different properties and methods to allow the
    downloaded media resource file data to be extracted into appropriate variables
    for use in the game. The most useful of these include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.text`: A read-only property, returning the web data as string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.texture`: A read-only property, returning the web data as a Texture2D image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.GetAudioClip()`: A method that returns the web data as an AudioClip'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information about the Unity `WWW` class visit [http://docs.unity3d.com/ScriptReference/WWW.html](http://docs.unity3d.com/ScriptReference/WWW.html).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading external resource files – by Unity Default Resources*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Loading external resource files – by manually storing files in the Unity Resources
    folder*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading external resource files – by manually storing files in the Unity Resources
    folder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At times, the contents of the external resource files may need to be changed
    after the game compilation. Hosting the resource files on the web may not be an
    option. There is a method of manually storing and reading files from the `Resources`
    folder of the compiled game, which allows for those files to be changed after
    the game compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique only works when you compile to a Windows or Mac stand alone executable—it
    will not work for Web Player builds, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `1362_10_01` folder provides the texture image that you can use for this
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`externalTexture.jpg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load external resources by manually storing the files in the `Resources`
    folder, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: In a 2D project, create a new Image UI GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# script class as a component of your Image object:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build your (Windows or Mac) standalone executable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the `externalTexture.jpg` image to your standalone's `Resources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You will need to place the files in the `Resources` folder manually after every
    compilation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you create a Windows or Linux standalone executable, there is also a _`Data`
    folder, created with the executable application file. The `Resources` folder can
    be found inside this `Data` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A Mac standalone application executable looks like a single file, but it is
    actually a MacOS `package` folder. Right-click on the executable file and select
    **Show Package Contents**. You will then find the standalone's `Resources` folder
    inside the `Contents` folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Run your standalone game application and the image will be displayed:![How to
    do it...](img/1362OT_10_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note the need to use the `System.IO` and `UnityEngine.UI` packages for this
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: When the executable runs, the `WWW` object spots that the URL starts with the
    word file, and so Unity attempts to find the external resource file in its `Resources`
    folder, and then load its contents.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding cross-platform problems with Path.Combine() rather than "/" or "\"
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The filepath folder separator character is different for Windows and Mac file
    systems (backslash (`\`) for Windows, forward slash (`/`) for the Mac). However,
    Unity knows which kind of standalone you are compiling your project into, therefore
    the `Path.Combine()` method will insert the appropriate separator slash character
    form the file URL that is required.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipes in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Loading external resource files – by Unity Default Resources*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Loading external resource files – by downloading files from the Internet*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and loading player data – using static properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Keeping track of the player's progress and user settings during a game is vital
    to give your game a greater feel of depth and content. In this recipe, we will
    learn how to make our game remember the player's score between the different levels
    (scenes).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have included a complete project in a Unity package named `game_HigherOrLower`
    in the `1362_10_04` folder. In order to follow this recipe, we will import this
    package as the starting point.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save and load player data, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 2D project and import the `game_HigherOrLower` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add each of the scenes to the build in the sequence (`scene0_mainMenu`, then
    `scene1_gamePlaying`, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make yourself familiar with the game by playing it a few times and examining
    the contents of the scenes. The game starts on the `scene0_mainMenu` scene, inside
    the `Scenes` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a class to store the number of correct and incorrect guesses
    made by the user. Create a new C# script called `Player` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the lower-left corner of the `scene0_mainMenu` scene, create a UI Text GameObject
    named **Text – score**, containing the placeholder text **Score: 99 / 99**.![How
    to do it...](img/1362OT_10_07.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, attach the following C# script to UI GameObject **Text – score**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `scene2_gameWon` scene, attach the following C# script to the Main Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `scene3_gameLost` scene, attach the following C# script to the Main
    Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your scripts and play the game. As you progress from level (scene) to level,
    you will find that the score and player's name are remembered, until you quit
    the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Player` class uses static (class) properties `scoreCorrect` and `scoreIncorrect`
    to store the current total number of correct and incorrect guesses. Since these
    are public static properties, any object from any scene can access (set or get)
    these values, since the static properties are remembered from scene to scene.
    This class also provides the public static method called `ZeroTotals()` that resets
    both the values to zero.
  prefs: []
  type: TYPE_NORMAL
- en: When the `scene0_mainMenu` scene is loaded, all the GameObjects with scripts
    will have their `Start()` methods executed. The UI Text GameObject called **Text
    – score** has an instance of the `UpdateScoreText` class as s script component,
    so that the scripts `Start()` method will be executed, which retrieves the correct
    and incorrect totals from the `Player` class, creates the `scoreMessage` string
    about the current score, and updates the text property so that the user sees the
    current score.
  prefs: []
  type: TYPE_NORMAL
- en: When the game is running and the user guesses correctly (higher), then the `scene2_gameWon`
    scene is loaded. So the `Start()` method, of the `IncrementCorrectScore` script
    component, of the Main Camera in this scene is executed, which adds `1` to the
    `scoreCorrect` variable of the `Player` class.
  prefs: []
  type: TYPE_NORMAL
- en: When the game is running and the user guesses wrongly (lower), then scene `scene3_gameLost`
    is loaded. So the `Start()` method, of the `IncrementIncorrectScore` script component,
    of the Main Camera in this scene is executed, which adds `1` to the `scoreIncorrect`
    variable of the `Player` class.
  prefs: []
  type: TYPE_NORMAL
- en: The next time the user visits the main menu scene, the new values of the correct
    and incorrect totals will be read from the `Player` class, and the UI Text on
    the screen will inform the user of their updated total score for the game.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding the score before the first attempt completed
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Showing a score of zero out of zero isn''t very professional. Let''s add some
    logic so that the score is only displayed (a non-empty string) if the total number
    of attempts is greater than zero:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Saving and loading player data – using PlayerPrefs*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving and loading player data – using PlayerPrefs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the previous recipe illustrates how the static properties allow a game
    to remember values between different scenes, these values are forgotten once the
    game application has quit. Unity provides the `PlayerPrefs` feature to allow a
    game to store and retrieve data, between the different game playing sessions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Saving and loading player data – using PlayerPrefs](img/1362OT_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This recipe builds upon the previous recipe. In case you haven''t completed
    the previous recipe, we have included a `Unity` package named `game_scoreStaticVariables`
    in the the `1362_10_05` folder. In order to follow this recipe using this package,
    you must do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new 2D project and import the `game_HigherOrLower` package.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add each of the scenes to the build in the sequence (`scene0_mainMenu`, then
    `scene1_gamePlaying`, and so on).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save and load the player data using `PlayerPrefs`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Delete the C# script called `Player`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the C# script called `UpdateScoreText` by replacing the `Start()` method
    with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit the C# script called `IncrementCorrectScore` by replacing the `Start()`
    method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, edit the C# script called `IncrementIncorrectScore` by replacing the `Start()`
    method with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your scripts and play the game. Quit from Unity and then restart the application.
    You will find that the player's name, level, and score are now kept between the
    game sessions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We had no need for the `Player` class, since this recipe uses the built-in runtime
    class called `PlayerPrefs`, provided by Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Unity's `PlayerPrefs` runtime class is capable of storing and accessing information
    (the string, int, and float variables) in the user's machine. Values are stored
    in a `plist` file (Mac) or the registry (Windows), in a similar way to web browser
    cookies, and therefore, remembered between game application sessions.
  prefs: []
  type: TYPE_NORMAL
- en: Values for the total correct and incorrect scores are stored by the `Start()`
    methods in the `IncrementCorrectScore` and `IncrementIncorrectScore` classes.
    These methods use the `PlayerPrefs.GetInt("<variableName>")` method to retrieve
    the old total, add `1` to it, and then store the incremented total using the `PlayerPrefs.SetInt("<variableName>")`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: These correct and incorrect totals are then read each time the `scene0_mainMenu`
    scene is loaded, and the score totals displayed via the UI Text object on the
    screen.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For more information on `PlayerPrefs`, see Unity's online documentation at
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.unity3d.com/ScriptReference/PlayerPrefs.html](http://docs.unity3d.com/ScriptReference/PlayerPrefs.html).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe in this chapter for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Saving and loading player data – using static properties*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving screenshots from the game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to take in-game snapshots, and save them in
    an external file. Better yet, we will make it possible to choose between three
    different methods.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This technique only works when you compile to a Windows or Mac standalone executable—it
    will not work for Web Player builds, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to follow this recipe, please import the `screenshots` package, which
    is available in the `1362_10_06` folder, to your project. The package includes
    a basic terrain, and a camera that can be rotated via mouse.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To save the screenshots from your game, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the `screenshots` package and open the `screenshotLevel` scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following C# Script to the Main Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save your script and attach it to the Main Camera GameObject, by dragging it
    from the **Project** view to the Main Camera GameObject, in the **Hierarchy**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Access the **Take Screenshot** component. Set **Capt Method** as **Capture Screenshot
    Png**. Change **Capture Screenshot Scale** to **2**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want your image file's name to start with something different than `Screenshot`,
    then change it in the **Prefix** field.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/1362OT_10_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Play the scene. A new screenshot with twice the original size will be saved
    in your project folder every time you press *P*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Start()` method creates a Rect object with the screen width and height.
    Each frame the `Update()` methods tests whether the *P* key has been pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Once the script has detected that the *P* key was pressed, the screen is captured
    and stored as an image file into the same folder where the executable is. In case
    the **Capture Screenshot Png** option is selected, the script will call a built-in
    Unity function called `CaptureScreenshot()`, which is capable of scaling up the
    original screen size (in our case, based on the `Scale` variable of our script).
    If not, the image will be captured by the `ReadPixels` function, encoded to PNG
    or JPG and finally, written via the `WriteAllBytes` function.
  prefs: []
  type: TYPE_NORMAL
- en: In all cases the file created will have the appropriate "`.png`" or "`.jpg`"
    file extension, to match its image file format.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have included the options using the `ReadPixel` function as a demonstration
    of how to save your images to a disk without using Unity's `CaptureScreenshot()`
    function. One advantage of this method is that it can be adapted to capture and
    save only a portion of the screen. The `captureScreenshotScale` variable from
    our script will not affect screenshots created with the ReadPixel function though.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a leaderboard using PHP/MySQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Games are more fun when there is a leaderboard of high scores that the players
    have achieved. Even single player games can communicate to a shared web-based
    leaderboard. This recipe includes both, the client side (Unity) code, as well
    as the web-server side (PHP) scripts to set and get the player scores from a MySQL
    database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up a leaderboard using PHP/MySQL](img/1362OT_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe assumes that you either have your own web hosting, or are running
    a local web server and a database server, such as XAMPP or MAMP. Your web server
    needs to support PHP, and you also need to be able to create the MySQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: All the SQL, PHP, and C# scripts for this recipe can be found in the `1362_10_07`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Since the scene contains several UI elements and the code of the recipe is the
    communication with the PHP scripts and SQL database, in `1362_10_07` folder, we
    have provided a `Unity` package called `PHPMySQLeaderboard`, containing a scene
    with everything set up for the Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you are hosting your leaderboard on a public website, you will change the
    names of the database, database user and password for reasons of security. You
    should also implement some form of secret game code, as described in the *There's
    more…* section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To set up a leaderboard using PHP and MySQL, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: On your server, create a new MySQL database named `cookbook_highscores`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your server, create a new database user (username=`cookbook`, password=`cookbook`)
    with full rights to the database that you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On your server, execute the following SQL to create the database table called
    `score_list`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Copy the provided PHP script files to your web server:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`index.php`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`scoreFunctions.php`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`htmlMenu.php`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new 2D Unity project and extract the Unity package called `PHPMySQLeaderboard`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the provided scene, and click on the buttons to make Unity communicate with
    the PHP scripts that have access to the high score database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The player's scores are stored in a MySQL database. Access to the database is
    facilitated through the PHP scripts provided. In our example, all the PHP scripts
    were placed in the web server root folder for a local Apache webserver. So, the
    scripts are accessed via `http://localhost:8888/`. However, since URL is a public
    string variable, this can be set before running to the location of your server
    and site code.
  prefs: []
  type: TYPE_NORMAL
- en: 'All the access is through the PHP file called `index.php`. There are five actions
    implemented, and each is indicated by adding the action name at the end of the
    URL (this is the `GET HTTP` method, which is sometimes used for web forms. Take
    a look at the address bar of your browser next time you search Google for example).
    The actions and their parameters (if any) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`action = html`: This action asks for HTML text listing all player scores to
    be returned. This action takes no parameters. It returns: HTML text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = xml`: This action asks for XML text listing all player scores to
    be returned. This action takes no parameters. It returns: XML text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = reset`: This action asks for a set of default player name and score
    values to replace the current contents of the database table. This action takes
    no argument. It returns: the string `reset`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = get`: This action asks for the integer score of the named player
    that is to be found. It takes parameters in the form `player = matt`. It returns:
    the score integer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action = set`: This action asks for the provide score of the named player
    to be stored in the database (but only if this new score is greater than the currently
    stored score). It takes parameters in the form `player = matt, score = 101`. It
    returns: the score integer (if the database update was successful), otherwise
    a negative value (to indicate that no update took place).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are five buttons in the Unity scene (corresponding to the five actions)
    which set up the corresponding action and the parameters to be added to the URL,
    for the next call to the web server, via the `LoadWWW()` method. The `OnClick`
    actions have been set up for each button to call the corresponding methods of
    the `WebLeaderBoard` C# script of the Main Camera.
  prefs: []
  type: TYPE_NORMAL
- en: There are also three UI Text objects. The first displays the most recent URL
    string sent to the server. The second displays the integer value that was extracted
    from the response message that was received from the server (or a message as "not
    an integer" if some other data was received). The third UI Text object is inside
    a panel, and has been made large enough to display a full, multi-line, text string,
    received from the server (which is stored inside the `textFileContents` variable).
  prefs: []
  type: TYPE_NORMAL
- en: The three UI Text objects have been assigned to the public variables of the
    `WebLeaderBoard` C# script for the Main Camera. When the scene first starts, the
    `Start()` method calls the `UpdateUI()` method to update the three text UI elements.
    When any of the buttons are clicked, the corresponding method of the `WebLeaderBoard`
    method is called, which builds the URL string with parameters, and then calls
    the `LoadWWW()` method. This method sends the request to the URL, and waits (by
    virtue of being a coroutine) until a response is received. It then stores the
    content, received in the `textFileContents` variable, and calls the `UpdateUI()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following sections will fine-tune and customize this recipe for you:'
  prefs: []
  type: TYPE_NORMAL
- en: Extracting the full leaderboard data as XML for display within Unity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The XML text that can be retrieved from the PHP web server provides a useful
    method for allowing a Unity game to retrieve the full set of the leaderboard data
    from the database. Then, the leaderboard can be displayed to the user in the Unity
    game (perhaps, in some nice 3D fashion, or through a game-consistent GUI).
  prefs: []
  type: TYPE_NORMAL
- en: Using the secret game codes to secure your leaderboard scripts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Unity and PHP code that is presented illustrates a simple, unsecured web-based
    leaderboard. To prevent players hacking into the board with false scores, it is
    usual to encode some form of secret game code (or key) into the communications.
    Only update requests that include the correct code will actually cause a change
    to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity code will combine the secret key (in this example, the string called
    `harrypotter`) with something related to the communication—for example, the same
    MySQL/PHP leader board may have different database records for different games
    that are identified with a game ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The server-side PHP code will receive both the encrypted game code, and also
    the piece of game data that is used to create that encrypted code (in this example,
    the game ID and MD5 hashing function, which is available in both, Unity and in
    PHP). The secret key (`harrypotter`) is used with the game ID to create an encrypted
    code that can be compared with the code received from the Unity game (or whatever
    user agent or browser is attempting to communicate with the leaderboard server
    scripts). The database actions will only be executed if the game code created
    on the server matches that send along with the request for a database action.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe for more Information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Preventing your game from running on unknown servers* in [Chapter 11](ch11.html
    "Chapter 11. Improving Games with Extra Features and Optimization"), *Improving
    Games With Extra Features and Optimization*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loading game data from a text file map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Rather than, for every level of a game, having to create and place every GameObject
    on the screen by hand, a better approach can be to create the text files of rows,
    and columns of characters, where each character corresponds to the type of GameObject
    that is to be created in the corresponding location. In this recipe, we'll use
    a text file and set of prefab sprites to display a graphical version of a text-data
    file for a screen from the classic game called **NetHack**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Loading game data from a text file map](img/1362OT_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `1362_10_08` folder, we have provided the following two files for this
    recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`level1.txt` (a text file, representing a level)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`absurd128.png` (a 128 x 128 sprite sheet for Nethack).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The level data came from the Nethack Wikipedia page, and the sprite sheet came
    from SourceForge:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/NetHack](http://en.wikipedia.org/wiki/NetHack)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://sourceforge.net/projects/noegnud/files/tilesets_nethack-3.4.1/absurd%20128x128/](http://sourceforge.net/projects/noegnud/files/tilesets_nethack-3.4.1/absurd%20128x128/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that we also included a Unity package with all the prefabs set up, since
    this can be a laborious task.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load game data from a text file map, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Import the text file called `level1.txt`, and the image file called `absurd128.png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `absurd128.png` in the Inspector, and set **Texture Type** to **Sprite
    (2D/uGUI)**, and **Sprite Mode** to **Multiple**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit this sprite in the **Sprite Editor**, choosing **Type** as **Grid** and
    **Pixel Size** as `128` x `128`, and apply these settings.![How to do it...](img/1362OT_10_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** panel, click on the right-facing white triangle to *explode*
    the icon, to show all the sprites in this sprite sheet individually.![How to do
    it...](img/1362OT_10_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Sprite called `absurd128_175` onto the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new **Prefab** named `corpse_175` in the **Project** panel, and drag
    onto this blank prefab Sprite `absurd128_175` from the scene. Now, delete the
    sprite instance from the scene. You have now created a prefab containing the Sprite
    `175`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat this process for the following sprites (that is, create prefabs for
    each one):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`floor_848`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`corridor_849`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`horiz_1034`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`vert_1025`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`door_844`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`potion_675`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`chest_586`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alter_583`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stairs_up_994`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`stairs_down_993`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wizard_287`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the **Main Camera** in the Inspector, and ensure that it is set to an
    **Orthographic** camera, sized **20**, with **Clear Flags** as **Solid Color**
    and **Background** as **Black**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach the following C# code to the Main Camera as the script class called
    `LoadMapFromTextfile`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the **Main Camera** selected, drag the appropriate prefabs onto the prefabs
    slots in the **Inspector**, for the `LoadMapFromTextfile` Script component.![How
    to do it...](img/1362OT_10_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you run the scene, you will see that a sprite-based Nethack map will appear,
    using your prefabs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Sprite sheet was automatically sliced up into hundreds of 128 x 128 pixel
    Sprite squares. We created the prefab objects from some of these sprites, so that
    the copies can be created at runtime when needed.
  prefs: []
  type: TYPE_NORMAL
- en: The text file called `level1.txt` contains the lines of text characters. Each
    non-space character represents where a sprite prefab should be instantiated (`column
    = X`, `row = Y`). A C# dictionary variable named `dictionary` is declared and
    initialized in the `Start()` method to associate specific prefab GameObjects with
    some particular characters in the text file.
  prefs: []
  type: TYPE_NORMAL
- en: The `Awake()` method splits the string into an array using the newline character
    as a separator. So now, we have `stringArray` with an entry for each row of the
    text data. The `BuildMase(…)` method is called with the `stringArray`.
  prefs: []
  type: TYPE_NORMAL
- en: The `BuildMaze(…)` method interrogates the array to find its length (the number
    of rows of data for this level), and sets `yOffSet` to half this value. This is
    done to allow the placing of the prefabs half above `Y = 0` and half below, so
    `(0,0,0)` is the center of the level map. A `for`-loop is used to read each row's
    string from the array. It passes it to the `CreateRow(…)` method along with the
    Y-value corresponding to the current row.
  prefs: []
  type: TYPE_NORMAL
- en: The `CreateRow(…)` method extracts the length of the string, and sets `xOffSet`
    to half this value. This is done to allow the placing of the prefabs half to the
    left of `X = 0` and half to the right, so `(0,0,0)` is the center of the level
    map. A `for`-loop is used to read each character from the current row's string,
    and (if there is an entry in our dictionary for that character) then the `CreatePrefabIInstance
    (…)` method is called, passing the prefab reference in the dictionary for that
    character, and the *x* and *y* value.
  prefs: []
  type: TYPE_NORMAL
- en: The `CreatePrefabInstance(…)` method instantiates the given prefab at a position
    of (*x*, *y*, *z*) where *z* is always zero, and there is no rotation (`Quarternion.identity`).
  prefs: []
  type: TYPE_NORMAL
- en: Managing Unity project code using Git version control and GitHub hosting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Distributed Version Control Systems** (**DVCS**) are becoming a bread-and-butter
    everyday tool for software developers. An issue with Unity projects can be the
    many binary files in each project. There are also many files in a local system''s
    Unity project directory that are not needed for archiving/sharing, such as OS
    specific thumbnail files, trash files, and so on. Finally, some Unity project
    folders themselves do not need to be archived, such as Temp and Library.'
  prefs: []
  type: TYPE_NORMAL
- en: While Unity provides its own "Asset Server", many small game developers chose
    not to pay for this extra feature. Also, Git and Mercurial (the most common DVCSs)
    are free, and work with any set of documents that are to be maintained (programs
    in any programming language, text-files, and so on). So, it makes sense to learn
    how to work with a third-party, industry standard DVCS for the Unity projects.
    In fact, the documents for this very book were all archived and version-controlled
    using a private GitHub repository!
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will set up a Unity project for GIT DVCS through a combination
    of Unity Application settings and use of the GitHub GUI-client application.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We created a real project this way—a pacman-style game, which you can explore
    and download/pull from the public GitHub's URL, available at [https://github.com/dr-matt-smith/matt-mac-man](https://github.com/dr-matt-smith/matt-mac-man).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe can be used with any Unity project. In the `1362_10_09` folder,
    we have provided a Unity package of our `matt-mac-man` game, if you wish to use
    that one - in which case create a new 2D project in Unity, and import this package.
  prefs: []
  type: TYPE_NORMAL
- en: Since this recipe illustrates hosting code on GitHub, you'll need to create
    a (free) GitHub account at [github.com](http://github.com) if you do not already
    have one.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting this recipe you need to have installed Git and the GitHub client
    application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn how, and download the client from the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book/en/Getting-Started-Installing-Git](http://git-scm.com/book/en/Getting-Started-Installing-Git)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/downloads/guis](http://git-scm.com/downloads/guis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load the external resources by Unity Default Resources, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the root directory of your Unity project, add the following code into a
    file named `.gitignore` (ensure that the filename starts with the *dot*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This special file (`.gitignore`) tells the version control system which files
    do *not* need to be archived. For example, we don't need to record the Windows
    or Mac image thumbnail files (`DS_STORE` or `Thumbs.db`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open **Editor Settings** in the **Inspector** by navigating to **Edit** | **Project
    Settings** | **Editor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Editor Settings**, set the **Version Control Mode** to **Visible Meta
    Files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Editor Settings**, set the **Asset Serialization Mode** to **Force
    Text**.![How to do it...](img/1362OT_10_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save your project so that these new settings are stored. Then, close the Unity
    application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log on to your GitHub account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your GitHub home page, click on the green **New** button to start creating
    a new repository.![How to do it...](img/1362OT_10_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give your new repository a name (we chose **matt-mac-man**) and check the **Initialize
    this repository with a README** option.![How to do it...](img/1362OT_10_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Startup your GitHub client application on your computer, and get a list of the
    repositories to clone to the local computer by navigating to **File** | **Clone
    Repository ..**. From the list provided, select your new repository (for us, it
    was matt-mac-man) and click on the **Clone** button to this repository.![How to
    do it...](img/1362OT_10_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll be asked where to store this repository on your local computer (we simply
    chose our **Desktop**). You will now see a folder with the repository name on
    your computer's disk, containing a hidden `.git` folder, and a single file named
    `README.md`.![How to do it...](img/1362OT_10_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, copy to this local repository folder the following files and folders from
    your Unity project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.gitignore`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/Assets`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/Library`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`/ProjectSettings`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/1362OT_10_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: In your GitHub client application, you will now see lots of **Uncommitted Changes**.
    Type in a short comment for your first commit (we typed our standard—`v0.1 – first
    commit`), and click on the **Commit & Sync** to push the contents of this Unity
    project folder up to your GitHub account repository.![How to do it...](img/1362OT_10_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, if you visit your GitHub project page, you will see that all these Unity
    project files are available for download for people's computers either as a ZIP
    archive, or to be cloned using a Git client.![How to do it...](img/1362OT_10_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The special file called `.gitngnore` lists all the files and directories that
    are *not* to be archived.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Unity **Editor Settings** for **Version Control Mode** to **Meta
    Files** ensures that Unity stores the required housekeeping data for each asset
    in its associated meta file. Selecting **Visible** rather than **Hidden** simply
    avoids any confusion as to whether GIT will record the meta files or not—GIT will
    record them whether visible or not. So, by making them visible, it is obvious
    to the developers working with the files that they will be included.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the Unity **Editor Settings** for **Asset Serialization Mode** to **Force
    Text** attempts to solve some of the difficulties of managing changes with the
    large binary files. Unity projects tend to have quite a few binary files, such
    as the `.unity` scene files, prefabs, and so on. There seems to be some debate
    about the best setting that should be used; we have found that **Force Text**
    works fine and so, we will use this at present. You'll see two commits on GitHub,
    since the very first was when we created the new repository, and the second was
    our first commit of the repository using the GitHub client, when we added all
    of our code into the local repository and pushed (committed) it to the remote
    server.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Distributed Version Control Systems (DVCS)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following video link is a short introduction to DVCS:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://youtu.be/1BbK9o5fQD4](http://youtu.be/1BbK9o5fQD4)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that the Fogcreek Kiln "harmony" feature now allows seamless work between
    GIT and Mercurial with the same Kiln repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://blog.fogcreek.com/kiln-harmony-internals-the-basics/](http://blog.fogcreek.com/kiln-harmony-internals-the-basics/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Bitbucket and SourceTree
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you prefer to use Bitbucket and SourceTree with your Unity projects, you
    can find a good tutorial at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://yeticrabgames.blogspot.ie/2014/02/using-git-with-unity-without-using.html](http://yeticrabgames.blogspot.ie/2014/02/using-git-with-unity-without-using.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the command line rather than Git-client application
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While for many, using a GUI client, such as the GitHub application, is a gentler
    introduction to using DVCS, at some point, you'll want to learn more and get to
    grips with working in the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since both Git and Mercurial are open source, there are lots of great, free
    online resources available. The following are some good sources to get started
    on:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn all about Git, download free GUI clients, and even get free online access
    to The Pro Git book (by Scott Chacon), available through Creative Commons license
    at the following URL:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/book](http://git-scm.com/book)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You will find an online interactive Git command line to practice in:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://try.github.io/levels/1/challenges/1](https://try.github.io/levels/1/challenges/1)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The main Mercurial website, including free online access to the *Mercurial:
    The Definitive Guide* (by Bryan O''Sullivan) book is available through the Open
    Publication License at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://mercurial.selenic.com/](http://mercurial.selenic.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SourceTree is a free Mercurial and Git GUI client, available at:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.sourcetreeapp.com/](http://www.sourcetreeapp.com/)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Refer to the following recipe for more information:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Publishing for multiple devices via Unity Cloud*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publishing for multiple devices via Unity Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One reason for the Git recipe in this chapter is to allow you to prepare your
    projects for one of the most exciting new services offered to Unity developers
    in recent years—Unity Cloud! Unity Cloud takes all the work out of building different
    versions of your project for different devices—you PUSH your updated Unity project
    to your online DVCS (such as GitHub). Then, Unity Cloud will see the update and
    PULL your new code, and build your game for the range of devices/deployment platforms
    that you have set up.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, log on to the Unity Cloud Build website and create an account at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://unity3d.com/unity/cloud-build](http://unity3d.com/unity/cloud-build)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For this recipe, you need access to a project''s source code. If you don''t
    have your own (for example, you haven''t completed the Git recipe in this chapter),
    then feel free to use the matt-mac-man project available at the public GitHub
    URL at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/dr-matt-smith/matt-mac-man](https://github.com/dr-matt-smith/matt-mac-man)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A common reason for a test project that was first built to fail is forgetting
    to add at least one scene to the build settings for the project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load external resources by Unity Default Resources, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Log on to your Unity Cloud Build account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **Projects** page, click on the **Add a New Project** button.![How to
    do it...](img/1362OT_10_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you'll need to add the URL for your source code, and the **Source Control
    Method** (**SCM**). For our project, we entered our *matt-mac-man* URL, and **GIT**
    for the SCM.![How to do it...](img/1362OT_10_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, you need to enter some settings. Unity Cloud Build will choose your source
    code project name as the default application name (most times, this is fine).
    You need to enter a **Bundle ID**—commonly, the reverse of your website URL is
    used here to ensure that the **App Name** plus **Bundle ID** is unique. So, we
    entered `com.mattsmithdev`. Unless testing branches of the code, the default master
    branch is fine, and likewise, unless testing subfolders, the default (no subfolder)
    is fine. Unless you are using the latest "beta" versions, the **Unity Version**
    option should be left to the default **Always Use Latest Version**. Finally, check
    the build options that you wish to have created. Note that you'll need to have
    set up the Apple codes if building for iOS; but you will be able to build for
    Unity Web Player and Android immediately.![How to do it...](img/1362OT_10_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next are the app "credentials". Unless you have Android credentials, you can
    choose the default "development" credentials. But this means that users will be
    warned when installing the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unity Cloud will then start to build your application—this will take a few minutes
    (depending on the load on their server).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When built, you'll get an e-mail (for each deployment target—so, we got one
    for Web Player, and one for Android). If the build fails, you'll still get an
    e-mail, and you can look up the logs for the reasons why the build failed.![How
    to do it...](img/1362OT_10_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can then play web player version immediately:![How to do it...](img/1362OT_10_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test with Android or iOS, you download it onto the device (from the Unity
    Cloud web server) and play the game:![How to do it...](img/1362OT_10_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unity Cloud pulls your project source code from the DVCS system (such as GitHub).
    It then compiles your code using the settings chosen for Unity version and deployment
    platforms (we chose Web Player and Android in this recipe). If the build is successful,
    Unity Cloud makes the build applications available to download and run.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some details that you don't want to miss.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about Unity Cloud
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Learn more in the Support section of the Unity Cloud website (after logging-in),
    and the Unity main website Cloud Build information page at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://build.cloud.unity3d.com/support/](https://build.cloud.unity3d.com/support/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://unity3d.com/unity/cloud-build](http://unity3d.com/unity/cloud-build)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more information refer the *Managing Unity project code using Git version
    control and GitHub hosting* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
