["```cs\n<Color x:Key=\"ReadOnlyColor\">#FF585858</Color> \n...\n<SolidColorBrush x:Key=\"ReadOnlyBrush\" \n  Color=\"{StaticResource ReadOnlyColor}\" /> \n```", "```cs\n<Style x:Key=\"TextBoxStyle\" TargetType=\"{x:Type TextBox}\"> \n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" /> \n  <Setter Property=\"Margin\" Value=\"0,0,0,5\" /> \n  <Setter Property=\"Padding\" Value=\"1.5,2\" /> \n  <Setter Property=\"MinHeight\" Value=\"25\" /> \n  <Setter Property=\"TextWrapping\" Value=\"Wrap\" /> \n  ... \n</Style> \n<Style x:Key=\"Max2LineTextBoxStyle\" TargetType=\"{x:Type TextBox}\"  \n  BasedOn=\"{StaticResource TextBoxStyle}\"> \n  <Setter Property=\"MaxHeight\" Value=\"44\" /> \n  <Setter Property=\"VerticalScrollBarVisibility\" Value=\"Auto\" /> \n  <Setter Property=\"ToolTip\" \n    Value=\"{Binding Text, RelativeSource={RelativeSource Self}}\" />\n</Style> \n<Style x:Key=\"Max3LineTextBoxStyle\" TargetType=\"{x:Type TextBox}\"  \n  BasedOn=\"{StaticResource Max2LineTextBoxStyle}\"> \n  <Setter Property=\"MaxHeight\" Value=\"64\" /> \n</Style> \n<Style x:Key=\"ReadOnlyTextBoxStyle\" TargetType=\"{x:Type TextBox}\"  \n  BasedOn=\"{StaticResource TextBoxStyle}\"> \n  <Setter Property=\"Background\" Value=\"{StaticResource ReadOnlyBrush}\" /> \n  <Setter Property=\"IsReadOnly\" Value=\"True\" /> \n  <Setter Property=\"Cursor\" Value=\"Arrow\" /> \n</Style> \n```", "```cs\n<Button Content=\"Click Me\" Width=\"140\" Height=\"34\" FontSize=\"18\"> \n  <Button.Effect> \n    <DropShadowEffect Color=\"Black\" ShadowDepth=\"6\" BlurRadius=\"6\"  \n      Direction=\"270\" Opacity=\"0.5\" /> \n  </Button.Effect> \n</Button> \n```", "```cs\n<Grid Width=\"160\" Height=\"68\"> \n  <Grid.Background> \n    <LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"1,1\"> \n      <GradientStop Color=\"Red\" /> \n      <GradientStop Color=\"Yellow\" Offset=\"1\" /> \n    </LinearGradientBrush> \n  </Grid.Background> \n  <Button Content=\"Click Me\" Width=\"120\" Height=\"28\" FontSize=\"14\"  \n    Margin=\"20\"> \n    <Button.Template> \n      <ControlTemplate TargetType=\"{x:Type Button}\"> \n        <Border BorderBrush=\"Black\" BorderThickness=\"1\"  \n          Background=\"#7FFFFFFF\" Padding=\"1\" CornerRadius=\"5\"  \n          SnapsToDevicePixels=\"True\"> \n          <Border BorderBrush=\"#7F000000\" BorderThickness=\"1\"  \n            Background=\"White\" CornerRadius=\"3.5\"  \n            SnapsToDevicePixels=\"True\"> \n            <ContentPresenter HorizontalAlignment=\"Center\"  \n              VerticalAlignment=\"Center\" /> \n          </Border> \n        </Border> \n      </ControlTemplate> \n    </Button.Template> \n  </Button> \n</Grid> \n```", "```cs\n<RadialGradientBrush x:Key=\"LayeredButtonBackgroundBrush\" RadiusX=\"1.85\"  \n  RadiusY=\"0.796\" Center=\"1.018,-0.115\" GradientOrigin=\"0.65,- 0.139\"> \n  <GradientStop Color=\"#FFCACACD\" /> \n  <GradientStop Color=\"#FF3B3D42\" Offset=\"1\" /> \n</RadialGradientBrush> \n<LinearGradientBrush x:Key=\"LayeredButtonCurveBrush\" StartPoint=\"0,0\"  \n  EndPoint=\"1,1\">\n  <GradientStop Color=\"#FF747475\" Offset=\"0\" /> \n  <GradientStop Color=\"#FF3B3D42\" Offset=\"1\" /> \n</LinearGradientBrush> \n<Grid x:Key=\"LayeredButtonBackgroundElements\"> \n  <Rectangle Fill=\"{StaticResource LayeredButtonBackgroundBrush}\" /> \n  <Path StrokeThickness=\"0\" \n    Fill=\"{StaticResource LayeredButtonCurveBrush}\"> \n    <Path.Data> \n      <CombinedGeometry GeometryCombineMode=\"Intersect\"> \n        <CombinedGeometry.Geometry1> \n          <EllipseGeometry Center=\"-20,50.7\" RadiusX=\"185\" RadiusY=\"46\" />\n        </CombinedGeometry.Geometry1> \n        <CombinedGeometry.Geometry2> \n          <RectangleGeometry Rect=\"0,0,106,24\" /> \n        </CombinedGeometry.Geometry2> \n      </CombinedGeometry> \n    </Path.Data> \n  </Path> \n</Grid> \n<VisualBrush x:Key=\"LayeredButtonBackground\"  \n  Visual=\"{StaticResource LayeredButtonBackgroundElements}\" /> \n```", "```cs\n<Button Background=\"{StaticResource LayeredButtonBackground}\" Width=\"200\"  \n  Height=\"40\" SnapsToDevicePixels=\"True\" />\n```", "```cs\n<Button Content=\"Click Me\" Width=\"140\" Height=\"34\" FontSize=\"18\"  \n  Foreground=\"White\" Margin=\"20\"> \n  <Button.Template> \n    <ControlTemplate TargetType=\"{x:Type Button}\"> \n      <Border Background=\"#FF007767\" CornerRadius=\"5\"  \n        SnapsToDevicePixels=\"True\"> \n        <Grid> \n          <Rectangle RadiusX=\"4\" RadiusY=\"4\" Margin=\"1,1,1,7\"  \n            SnapsToDevicePixels=\"True\"> \n            <Rectangle.Fill> \n              <LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"0,1\"> \n                <GradientStop Color=\"#BFFFFFFF\" /> \n                <GradientStop Color=\"#00FFFFFF\" Offset=\"0.8\" /> \n              </LinearGradientBrush> \n            </Rectangle.Fill> \n          </Rectangle> \n          <ContentPresenter HorizontalAlignment=\"Center\"  \n            VerticalAlignment=\"Center\" /> \n        </Grid> \n      </Border> \n    </ControlTemplate> \n  </Button.Template> \n</Button> \n```", "```cs\n<TransformGroup x:Key=\"GlowTransformGroup\"> \n  <ScaleTransform CenterX=\"0.5\" CenterY=\"0.85\" ScaleY=\"1.8\" /> \n  <TranslateTransform Y=\"0.278\" /> \n</TransformGroup> \n<RadialGradientBrush x:Key=\"GreenGlow\" Center=\"0.5,0.848\"  \n  GradientOrigin=\"0.5,0.818\" RadiusX=\"-1.424\" RadiusY=\"-0.622\"  \n  RelativeTransform=\"{StaticResource GlowTransformGroup}\"> \n  <GradientStop Color=\"#CF65FF00\" Offset=\"0.168\" /> \n  <GradientStop Color=\"#4B65FF00\" Offset=\"0.478\" /> \n  <GradientStop Color=\"#0065FF00\" Offset=\"1\" /> \n</RadialGradientBrush> \n<Style x:Key=\"GlowingButtonStyle\" TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" /> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type Button}\"> \n        <Border BorderBrush=\"White\" BorderThickness=\"1\"  \n          Background=\"DarkGray\" CornerRadius=\"3\"> \n          <Grid> \n            <Rectangle IsHitTestVisible=\"False\" RadiusX=\"2\"\n              RadiusY=\"2\" Fill=\"{StaticResource GreenGlow}\" /> \n            <ContentPresenter Content=\"{TemplateBinding Content}\" \n              HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" /> \n          </Grid> \n          <Border.Effect> \n            <DropShadowEffect Color=\"#FF65FF00\" ShadowDepth=\"4\"\n              Opacity=\"0.4\" Direction=\"270\" BlurRadius=\"10\" /> \n          </Border.Effect> \n        </Border> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<SolidColorBrush x:Key=\"TransparentWhite\" Color=\"#7FFFFFFF\" /> \n<SolidColorBrush x:Key=\"VeryTransparentWhite\" Color=\"#3FFFFFFF\" /> \n<SolidColorBrush x:Key=\"TransparentBlack\" Color=\"#7F000000\" /> \n<SolidColorBrush x:Key=\"VeryTransparentBlack\" Color=\"#3F000000\" /> \n<VisualBrush x:Key=\"SemiTransparentLayeredButtonBackground\"  \n  Visual=\"{StaticResource LayeredButtonBackgroundElements}\" \n  Opacity=\"0.65\" /> \n```", "```cs\n<Style TargetType=\"{x:Type Button}\"> \n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" /> \n  <Setter Property=\"Cursor\" Value=\"Hand\" /> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type Button}\"> \n        <Border CornerRadius=\"3\" \n          BorderBrush=\"{StaticResource TransparentBlack}\" \n          BorderThickness=\"1\"  \n          Background=\"{StaticResource TransparentWhite}\"> \n          <Border Name=\"InnerBorder\" CornerRadius=\"2\"  \n            Background=\"{StaticResource LayeredButtonBackground}\" \n            Margin=\"1\"> \n            <Grid> \n              <Rectangle IsHitTestVisible=\"False\" RadiusX=\"2\"\n                RadiusY=\"2\" Fill=\"{StaticResource GreenGlow}\" />\n              <ContentPresenter Content=\"{TemplateBinding Content}\"\n                Margin=\"{TemplateBinding Padding}\" \n                HorizontalAlignment=\"{TemplateBinding \n                HorizontalContentAlignment}\" \n                VerticalAlignment=\"{TemplateBinding \n                VerticalContentAlignment}\" /> \n            </Grid> \n          </Border> \n          <Border.Effect> \n            <DropShadowEffect Color=\"Black\" ShadowDepth=\"6\" \n              BlurRadius=\"6\" Direction=\"270\" Opacity=\"0.5\" /> \n          </Border.Effect> \n        </Border> \n        <ControlTemplate.Triggers> \n          <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n            <Setter TargetName=\"InnerBorder\"  \n              Property=\"Background\" Value=\"{StaticResource\n              SemiTransparentLayeredButtonBackground}\" /> \n          </Trigger> \n          <Trigger Property=\"IsPressed\" Value=\"True\"> \n            <Setter TargetName=\"InnerBorder\" Property=\"Background\" \n              Value=\"{StaticResource LayeredButtonBackground}\" /> \n          </Trigger> \n        </ControlTemplate.Triggers> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<Button Content=\"Click Me\" Width=\"200\" Height=\"40\" FontSize=\"20\"  \n  Foreground=\"White\" /> \n```", "```cs\n<StackPanel HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\"  \n  Width=\"348\"> \n  <TextBlock Name=\"TextBlock\" FontFamily=\"Candara\" \n    Text=\"APPLICATION NAME\" FontSize=\"40\" FontWeight=\"Bold\"> \n    <TextBlock.Foreground> \n      <LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"1,0\"> \n        <GradientStop Color=\"Orange\" /> \n        <GradientStop Color=\"Red\" Offset=\"0.5\" /> \n        <GradientStop Color=\"Orange\" Offset=\"1\" /> \n      </LinearGradientBrush> \n    </TextBlock.Foreground> \n  </TextBlock> \n  <Rectangle Height=\"31\" Margin=\"0,-11.6,0,0\"> \n    <Rectangle.Fill> \n      <VisualBrush Visual=\"{Binding ElementName=TextBlock}\"> \n        <VisualBrush.RelativeTransform> \n          <ScaleTransform ScaleY=\"-1.0\" CenterX=\"0.5\" CenterY=\"0.5\" /> \n        </VisualBrush.RelativeTransform> \n      </VisualBrush> \n    </Rectangle.Fill> \n    <Rectangle.OpacityMask> \n      <LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"0,1\"> \n        <GradientStop Color=\"#DF000000\" /> \n        <GradientStop Color=\"Transparent\" Offset=\"0.8\" /> \n      </LinearGradientBrush> \n    </Rectangle.OpacityMask> \n  </Rectangle> \n</StackPanel> \n```", "```cs\n<Window  \n  x:Class=\"CompanyName.ApplicationName.Views.Controls.BorderlessWindow\"    \n\n  Height=\"100\" Width=\"200\" WindowStyle=\"None\" AllowsTransparency=\"True\"> \n</Window>\n\n...\n\nusing System.Windows; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class BorderlessWindow : Window \n  { \n    public BorderlessWindow() \n    { \n      InitializeComponent(); \n    } \n  } \n} \n```", "```cs\nMouseLeftButtonDown += (o, e) => DragMove(); \n```", "```cs\n<Window x:Class=\"CompanyName.ApplicationName.Views.Controls.CalloutWindow\" \n\n  xmlns:Controls=\n    \"clr-namespace:CompanyName.ApplicationName.Views.Controls\" \n  WindowStartupLocation=\"Manual\"> \n  <Window.Resources> \n    <Style TargetType=\"{x:Type Controls:CalloutWindow}\"> \n      <Setter Property=\"ShowInTaskbar\" Value=\"False\" /> \n      <Setter Property=\"WindowStyle\" Value=\"None\" /> \n      <Setter Property=\"AllowsTransparency\" Value=\"True\" /> \n      <Setter Property=\"ResizeMode\" Value=\"NoResize\" /> \n      <Setter Property=\"Template\"> \n        <Setter.Value> \n          <ControlTemplate TargetType=\"{x:Type Controls:CalloutWindow}\"> \n            <Grid Margin=\"0,0,0,12\"> \n              <Grid.ColumnDefinitions> \n                <ColumnDefinition Width=\"*\" /> \n                <ColumnDefinition Width=\"5*\" /> \n              </Grid.ColumnDefinitions> \n              <Path Grid.ColumnSpan=\"2\"  \n                Fill=\"{TemplateBinding Background}\"  \n                Stroke=\"{TemplateBinding BorderBrush}\"  \n                StrokeThickness=\"2\" Stretch=\"Fill\"> \n                <Path.Data> \n                  <CombinedGeometry GeometryCombineMode=\"Union\"> \n                    <CombinedGeometry.Geometry1> \n                      <PathGeometry> \n                        <PathFigure StartPoint=\"0,60\"> \n                          <LineSegment Point=\"50,45\" /> \n                          <LineSegment Point=\"50,75\" /> \n                        </PathFigure> \n                      </PathGeometry> \n                    </CombinedGeometry.Geometry1> \n                    <CombinedGeometry.Geometry2> \n                      <RectangleGeometry RadiusX=\"20\" RadiusY=\"20\"  \n                        Rect=\"50,0,250,150\" /> \n                    </CombinedGeometry.Geometry2> \n                  </CombinedGeometry> \n                </Path.Data> \n              </Path> \n              <ContentPresenter Grid.Column=\"1\"  \n                Content=\"{TemplateBinding Content}\"  \n                HorizontalAlignment=\"{TemplateBinding  \n                HorizontalContentAlignment}\"  \n                VerticalAlignment=\"{TemplateBinding  \n                VerticalContentAlignment}\"  \n                Margin=\"{TemplateBinding Padding}\"> \n                <ContentPresenter.Resources> \n                  <Style TargetType=\"{x:Type TextBlock}\"> \n                    <Setter Property=\"TextWrapping\" Value=\"Wrap\" /> \n                  </Style> \n                </ContentPresenter.Resources> \n              </ContentPresenter> \n              <Grid.Effect> \n                <DropShadowEffect Color=\"Black\"  \n                  Direction=\"270\" ShadowDepth=\"7\" Opacity=\"0.3\" /> \n              </Grid.Effect> \n            </Grid> \n          </ControlTemplate> \n        </Setter.Value> \n      </Setter> \n    </Style> \n  </Window.Resources> \n</Window> \n```", "```cs\nusing System.Windows; \nusing System.Windows.Media; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class CalloutWindow : Window \n  { \n    static CalloutWindow() \n    { \n      BorderBrushProperty.OverrideMetadata(typeof(CalloutWindow),  \n        new FrameworkPropertyMetadata( \n        new SolidColorBrush(Color.FromArgb(255, 238, 156, 88))));       \n      HorizontalContentAlignmentProperty.OverrideMetadata(  \n        typeof(CalloutWindow),  \n        new FrameworkPropertyMetadata(HorizontalAlignment.Center)); \n      VerticalContentAlignmentProperty.OverrideMetadata( \n        typeof(CalloutWindow),  \n        new FrameworkPropertyMetadata(VerticalAlignment.Center)); \n    } \n\n    public CalloutWindow() \n    { \n      InitializeComponent(); \n    } \n\n    public new static readonly DependencyProperty BackgroundProperty =       \n      DependencyProperty.Register(nameof(Background), typeof(Brush),  \n      typeof(CalloutWindow), \n      new PropertyMetadata(new LinearGradientBrush(Colors.White, \n      Color.FromArgb(255, 250, 191, 143), 90))); \n\n    public new Brush Background \n    { \n      get { return (Brush)GetValue(BackgroundProperty); } \n      set { SetValue(BackgroundProperty, value); } \n    } \n  } \n} \n```", "```cs\nCalloutWindow calloutWindow = new CalloutWindow(); \ncalloutWindow.Width = 225; \ncalloutWindow.Height = 120; \ncalloutWindow.FontSize = 18; \ncalloutWindow.Padding = new Thickness(20); \ncalloutWindow.Content = \"Please fill in the first line of your address.\"; \ncalloutWindow.Show(); \n```", "```cs\ncalloutWindow.DataContext = new UsersViewModel(); \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Media; \nusing System.Windows.Shapes; \nusing CompanyName.ApplicationName.CustomControls.Enums;\nusing MediaColor = System.Windows.Media.Color; \n\nnamespace CompanyName.ApplicationName.CustomControls \n{ \n  [TemplatePart(Name = \"PART_Background\", Type = typeof(Ellipse))] \n  [TemplatePart(Name = \"PART_Glow\", Type = typeof(Ellipse))] \n  public class Sphere : Control \n  { \n    private RadialGradientBrush greenBackground =\n      new RadialGradientBrush(new GradientStopCollection() { \n      new GradientStop(MediaColor.FromRgb(0, 254, 0), 0),\n      new GradientStop(MediaColor.FromRgb(1, 27, 0), 0.974) }); \n    private RadialGradientBrush greenGlow = \n      new RadialGradientBrush(new GradientStopCollection() { \n      new GradientStop(MediaColor.FromArgb(205, 67, 255, 46), 0),\n      new GradientStop(MediaColor.FromArgb(102, 88, 254, 72), 0.426),\n      new GradientStop(MediaColor.FromArgb(0, 44, 191, 32), 1) }); \n    private RadialGradientBrush redBackground = \n      new RadialGradientBrush(new GradientStopCollection() { \n      new GradientStop(MediaColor.FromRgb(254, 0, 0), 0),\n      new GradientStop(MediaColor.FromRgb(27, 0, 0), 0.974) }); \n    private RadialGradientBrush redGlow = \n      new RadialGradientBrush(new GradientStopCollection() { \n      new GradientStop(MediaColor.FromArgb(205, 255, 46, 46), 0), \n      new GradientStop(MediaColor.FromArgb(102, 254, 72, 72), 0.426),\n      new GradientStop(MediaColor.FromArgb(0, 191, 32, 32), 1) }); \n\n    static Sphere() \n    { \n      DefaultStyleKeyProperty.OverrideMetadata(typeof(Sphere),  \n        new FrameworkPropertyMetadata(typeof(Sphere))); \n    } \n\n    public static readonly DependencyProperty ValueProperty =  \n      DependencyProperty.Register(nameof(Value), typeof(double),  \n      typeof(Sphere), new PropertyMetadata(50.0)); \n\n    public double Value \n    { \n      get { return (double)GetValue(ValueProperty); } \n      set { SetValue(ValueProperty, value); } \n    } \n\n    public static readonly DependencyProperty ColorProperty =  \n      DependencyProperty.Register(nameof(Color), typeof(SphereColor),  \n      typeof(Sphere), new PropertyMetadata(SphereColor.Green,  \n      OnColorChanged)); \n\n    public SphereColor Color \n    { \n      get { return (SphereColor)GetValue(ColorProperty); } \n      set { SetValue(ColorProperty, value); } \n    } \n\n    private static void OnColorChanged(DependencyObject  \n      dependencyObject, DependencyPropertyChangedEventArgs e) \n    { \n      ((Sphere)dependencyObject).SetEllipseColors(); \n    } \n\n    public override void OnApplyTemplate() \n    { \n      SetEllipseColors(); \n    } \n\n    private void SetEllipseColors() \n    { \n      Ellipse backgroundEllipse =  \n        GetTemplateChild(\"PART_Background\") as Ellipse; \n      Ellipse glowEllipse = GetTemplateChild(\"PART_Glow\") as Ellipse;\n      if (backgroundEllipse != null) backgroundEllipse.Fill = \n        Color == SphereColor.Green ? greenBackground : redBackground; \n      if (glowEllipse != null) glowEllipse.Fill =  \n        Color == SphereColor.Green ? greenGlow : redGlow;\n    } \n  } \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.CustomControls.Enums \n{ \n  public enum SphereColor \n  { \n    Green, Red \n  } \n} \n```", "```cs\n<Style TargetType=\"{x:Type CustomControls:Sphere}\"> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type CustomControls:Sphere}\"> \n        <ControlTemplate.Resources> \n          <DropShadowEffect x:Key=\"Shadow\" BlurRadius=\"10\" \n            Direction=\"270\" ShadowDepth=\"7\" Opacity=\"0.5\" /> \n          <LinearGradientBrush x:Key=\"Reflection\" \n            StartPoint=\"0,0\" EndPoint=\"0,1\"> \n            <GradientStop Color=\"#90FFFFFF\" Offset=\"0.009\" />\n            <GradientStop Color=\"#2DFFFFFF\" Offset=\"0.506\" /> \n            <GradientStop Offset=\"0.991\" /> \n          </LinearGradientBrush> \n        </ControlTemplate.Resources> \n        <Grid Height=\"{Binding Value,  \n          RelativeSource={RelativeSource TemplatedParent}}\"\n          Width=\"{Binding Value,\n          RelativeSource={RelativeSource TemplatedParent}}\">\n          <Grid.RowDefinitions> \n            <RowDefinition Height=\"5*\" /> \n            <RowDefinition Height=\"2*\" /> \n          </Grid.RowDefinitions> \n          <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"*\" /> \n            <ColumnDefinition Width=\"8*\" /> \n            <ColumnDefinition Width=\"*\" /> \n          </Grid.ColumnDefinitions> \n          <Ellipse Name=\"PART_Background\" Grid.RowSpan=\"2\"  \n            Grid.ColumnSpan=\"3\" Stroke=\"#FF1B0000\"  \n            Effect=\"{StaticResource Shadow}\" /> \n          <Ellipse Name=\"PART_Glow\" Grid.RowSpan=\"2\"\n            Grid.ColumnSpan=\"3\" /> \n          <Ellipse Grid.Column=\"1\" Margin=\"0,2,0,0\" \n            Fill=\"{StaticResource Reflection}\" /> \n        </Grid> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<Grid TextElement.FontSize=\"28\" TextElement.FontWeight=\"Bold\" Margin=\"20\"> \n  <Grid.ColumnDefinitions> \n    <ColumnDefinition /> \n    <ColumnDefinition /> \n  </Grid.ColumnDefinitions> \n  <Grid.RowDefinitions> \n    <RowDefinition /> \n    <RowDefinition Height=\"Auto\" /> \n  </Grid.RowDefinitions> \n  <CustomControls:Sphere Color=\"Red\" Value=\"{Binding InCount}\"  \n    VerticalAlignment=\"Bottom\" /> \n  <CustomControls:Sphere Grid.Column=\"1\" Value=\"{Binding OutCount}\"  \n    VerticalAlignment=\"Bottom\" /> \n  <TextBlock Grid.Row=\"1\" Text=\"{Binding InCount}\"  \n    HorizontalAlignment=\"Center\" Margin=\"0,10,0,0\" /> \n  <TextBlock Grid.Row=\"1\" Grid.Column=\"1\" Text=\"{Binding OutCount}\"  \n    HorizontalAlignment=\"Center\" Margin=\"0,10,0,0\" /> \n</Grid> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Media; \nusing System.Windows.Shapes; \n\nnamespace CompanyName.ApplicationName.CustomControls \n{ \n  public class Arc : Shape \n  { \n    public static readonly DependencyProperty StartAngleProperty =\n      DependencyProperty.Register(nameof(StartAngle), typeof(double),  \n      typeof(Arc), new FrameworkPropertyMetadata(180.0, \n      FrameworkPropertyMetadataOptions.AffectsRender)); \n\n    public double StartAngle \n    { \n      get { return (double)GetValue(StartAngleProperty); } \n      set { SetValue(StartAngleProperty, value); } \n    } \n\n    public static readonly DependencyProperty EndAngleProperty =\n      DependencyProperty.Register(nameof(EndAngle), typeof(double),  \n      typeof(Arc), new FrameworkPropertyMetadata(0.0, \n      FrameworkPropertyMetadataOptions.AffectsRender)); \n\n    public double EndAngle \n    { \n      get { return (double)GetValue(EndAngleProperty); } \n      set { SetValue(EndAngleProperty, value); } \n    } \n\n    protected override Geometry DefiningGeometry \n    { \n      get { return GetArcGeometry(); } \n    } \n\n    private Geometry GetArcGeometry() \n    { \n      Point startPoint = ConvertToPoint(Math.Min(StartAngle, EndAngle)); \n      Point endPoint = ConvertToPoint(Math.Max(StartAngle, EndAngle)); \n      Size arcSize = new Size(Math.Max(0, (RenderSize.Width -\n        StrokeThickness) / 2), Math.Max(0, (RenderSize.Height -  \n        StrokeThickness) / 2)); \n      bool isLargeArc = Math.Abs(EndAngle - StartAngle) > 180; \n      StreamGeometry streamGeometry = new StreamGeometry(); \n      using (StreamGeometryContext context = streamGeometry.Open()) \n      { \n        context.BeginFigure(startPoint, false, false); \n        context.ArcTo(endPoint, arcSize, 0, isLargeArc, \n          SweepDirection.Counterclockwise, true, false); \n      } \n      streamGeometry.Transform = \n        new TranslateTransform(StrokeThickness / 2, StrokeThickness / 2);\n      streamGeometry.Freeze(); \n      return streamGeometry; \n    } \n\n    private Point ConvertToPoint(double angleInDegrees) \n    { \n      double angleInRadians = angleInDegrees * Math.PI / 180;\n      double radiusX = (RenderSize.Width - StrokeThickness) / 2;\n      double radiusY = (RenderSize.Height - StrokeThickness) / 2; \n      return new Point(radiusX * Math.Cos(angleInRadians) + radiusX,  \n        radiusY * Math.Sin(-angleInRadians) + radiusY); \n    } \n  } \n} \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \n\nnamespace CompanyName.ApplicationName.CustomControls \n{ \n  public class Gauge : Control \n  { \n    static Gauge() \n    { \n      DefaultStyleKeyProperty.OverrideMetadata (typeof(Gauge),  \n        new FrameworkPropertyMetadata(typeof(Gauge))); \n    } \n\n    public static readonly DependencyPropertyKey valueAnglePropertyKey = \n      DependencyProperty.RegisterReadOnly(nameof(ValueAngle),  \n      typeof(double), typeof(Gauge), new PropertyMetadata(180.0)); \n\n    public static readonly DependencyProperty ValueAngleProperty =  \n      valueAnglePropertyKey.DependencyProperty; \n\n    public double ValueAngle \n    { \n      get { return (double)GetValue(ValueAngleProperty); } \n      private set { SetValue(valueAnglePropertyKey, value); } \n    } \n\n    public static readonly DependencyPropertyKey  \n      rotationAnglePropertyKey = DependencyProperty.RegisterReadOnly( \n      nameof(RotationAngle), typeof(double), typeof(Gauge),\n      new PropertyMetadata(180.0)); \n\n    public static readonly DependencyProperty RotationAngleProperty =  \n      rotationAnglePropertyKey.DependencyProperty; \n\n    public double RotationAngle \n    { \n      get { return (double)GetValue(RotationAngleProperty); } \n      private set { SetValue(rotationAnglePropertyKey, value); } \n    } \n\n    public static readonly DependencyProperty ValueProperty =  \n      DependencyProperty.Register(nameof(Value), typeof(double),  \n      typeof(Gauge), new PropertyMetadata(0.0, OnValueChanged)); \n\n    private static void OnValueChanged(DependencyObject  \n      dependencyObject, DependencyPropertyChangedEventArgs e) \n    { \n      Gauge gauge = (Gauge)dependencyObject; \n      if (gauge.MaximumValue == 0.0)  \n        gauge.ValueAngle = gauge.RotationAngle = 180.0; \n      else if ((double)e.NewValue > gauge.MaximumValue) \n      { \n        gauge.ValueAngle = 0.0; \n        gauge.RotationAngle = 360.0; \n      } \n      else \n      { \n        double scaledPercentageValue =  \n          ((double)e.NewValue / gauge.MaximumValue) * 180.0; \n        gauge.ValueAngle = 180.0 - scaledPercentageValue; \n        gauge.RotationAngle = 180.0 + scaledPercentageValue; \n      } \n    } \n\n    public double Value \n    { \n      get { return (double)GetValue(ValueProperty); } \n      set { SetValue(ValueProperty, value); } \n    } \n\n    public static readonly DependencyProperty MaximumValueProperty =  \n      DependencyProperty.Register(nameof(MaximumValue), typeof(double),  \n      typeof(Gauge), new PropertyMetadata(0.0)); \n\n    public double MaximumValue \n    { \n      get { return (double)GetValue(MaximumValueProperty); } \n      set { SetValue(MaximumValueProperty, value); } \n    } \n\n    public static readonly DependencyProperty TitleProperty =  \n      DependencyProperty.Register(nameof(Title), typeof(string),  \n      typeof(Gauge), new PropertyMetadata(string.Empty)); \n\n    public string Title \n    { \n      get { return (string)GetValue(TitleProperty); } \n      set { SetValue(TitleProperty, value); } \n    } \n  } \n} \n```", "```cs\n<Style TargetType=\"{x:Type CustomControls:Gauge}\"> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type CustomControls:Gauge}\"> \n        <Grid Background=\"{Binding Background,  \n          RelativeSource={RelativeSource TemplatedParent}}\"> \n          <Grid Margin=\"{Binding Padding,  \n            RelativeSource={RelativeSource TemplatedParent}}\"> \n            <Grid.RowDefinitions> \n              <RowDefinition Height=\"Auto\" /> \n              <RowDefinition /> \n              <RowDefinition Height=\"Auto\" /> \n            </Grid.RowDefinitions> \n            <TextBlock Text=\"{Binding Title,  \n              RelativeSource={RelativeSource TemplatedParent}}\"  \n              HorizontalAlignment=\"Center\" /> \n            <Canvas Grid.Row=\"1\" Width=\"300\" Height=\"150\"\n              HorizontalAlignment=\"Center\" Margin=\"0,5\">\n              <CustomControls:Arc Width=\"300\" Height=\"300\"\n                StrokeThickness=\"75\"  Stroke=\"#FF444444\" />\n              <CustomControls:Arc Width=\"300\" Height=\"300\"\n                StrokeThickness=\"75\" Stroke=\"OrangeRed\" StartAngle=\"180\"\n                EndAngle=\"{Binding AngleValue, \n                RelativeSource={RelativeSource TemplatedParent}}\" /> \n              <Path Canvas.Left=\"150\" Canvas.Top=\"140\"  \n                Fill=\"White\" StrokeThickness=\"5\" Stroke=\"White\" \n                StrokeLineJoin=\"Round\" Data=\"M0,0 L125,10, 0,20Z\"\n                Stretch=\"Fill\" Width=\"125\" Height=\"20\"> \n                <Path.RenderTransform> \n                  <RotateTransform Angle=\"{Binding RotationAngle,\n                    RelativeSource={RelativeSource TemplatedParent}}\"\n                    CenterX=\"0\" CenterY=\"10\" /> \n                </Path.RenderTransform> \n              </Path> \n            </Canvas> \n            <TextBlock Grid.Row=\"2\" Text=\"{Binding Value, StringFormat=N0,\n              RelativeSource={RelativeSource TemplatedParent}}\"\n              HorizontalAlignment=\"Center\" FontWeight=\"Bold\" /> \n          </Grid> \n        </Grid> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<CustomControls:Gauge Width=\"400\" Height=\"300\"  \n  MaximumValue=\"{Binding InCount}\" Value=\"{Binding OutCount}\"  \n  Title=\"Support Tickets Cleared\" Foreground=\"White\" FontSize=\"34\" \n  Padding=\"10\" /> \n```", "```cs\n<Color x:Key=\"TransparentWhiteColor\">#7FFFFFFF</Color>\n<Color x:Key=\"TransparentBlackColor\">#7F000000</Color>\n```", "```cs\n<SolidColorBrush x:Key=\"TransparentWhite\"  \n  Color=\"{StaticResource TransparentWhiteColor}\" /> \n<SolidColorBrush x:Key=\"TransparentBlack\" \n  Color=\"{StaticResource TransparentBlackColor}\" /> \n```", "```cs\n<Grid Width=\"160\" Height=\"68\"> \n  <Grid.Background> \n    <LinearGradientBrush StartPoint=\"0,0\" EndPoint=\"1,1\"> \n      <GradientStop Color=\"Red\" /> \n      <GradientStop Color=\"Yellow\" Offset=\"1\" /> \n    </LinearGradientBrush> \n  </Grid.Background> \n  <Button Content=\"Click Me\" Width=\"120\" Height=\"28\" FontSize=\"14\"  \n    Margin=\"20\"> \n    <Button.Template> \n      <ControlTemplate TargetType=\"{x:Type Button}\"> \n        <Border Name=\"OuterBorder\" \n          BorderBrush=\"{StaticResource TransparentBlack}\" \n          BorderThickness=\"1\" Padding=\"1\" \n          Background=\"{StaticResource TransparentWhite}\"  \n          CornerRadius=\"5\" SnapsToDevicePixels=\"True\"> \n          <Border Name=\"InnerBorder\"  \n            BorderBrush=\"{StaticResource TransparentBlack}\" \n            BorderThickness=\"1\" Background=\"White\"\n            CornerRadius=\"3.5\" SnapsToDevicePixels=\"True\"> \n            <ContentPresenter HorizontalAlignment=\"Center\"  \n              VerticalAlignment=\"Center\" /> \n          </Border> \n        </Border> \n        <ControlTemplate.Triggers> \n          <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n            <Trigger.EnterActions> \n              <BeginStoryboard> \n                <Storyboard Storyboard.TargetName=\"OuterBorder\"  \n                  Storyboard.TargetProperty=\n                  \"BorderBrush.(SolidColorBrush.Color)\"> \n                  <ColorAnimation To=\"Black\" Duration=\"0:0:0.25\" /> \n                </Storyboard> \n              </BeginStoryboard> \n              <BeginStoryboard> \n                <Storyboard Storyboard.TargetName=\"InnerBorder\"  \n                  Storyboard.TargetProperty=\n                  \"BorderBrush.(SolidColorBrush.Color)\"> \n                  <ColorAnimation To=\"Black\" Duration=\"0:0:0.3\" /> \n                </Storyboard> \n              </BeginStoryboard> \n              <BeginStoryboard Name=\"BackgroundFadeIn\" \n                HandoffBehavior=\"Compose\"> \n                <Storyboard Storyboard.TargetName=\"InnerBorder\"  \n                  Storyboard.TargetProperty=\n                  \"Background.(SolidColorBrush.Color)\">\n                  <ColorAnimation To=\"{StaticResource  \n                    TransparentWhiteColor}\" Duration=\"0:0:0.2\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.EnterActions> \n            <Trigger.ExitActions> \n              <BeginStoryboard> \n                <Storyboard Storyboard.TargetName=\"OuterBorder\"  \n                  Storyboard.TargetProperty=\n                  \"BorderBrush.(SolidColorBrush.Color)\">\n                  <ColorAnimation To=\"{StaticResource  \n                    TransparentBlackColor}\" Duration=\"0:0:0.5\" /> \n                </Storyboard> \n              </BeginStoryboard> \n              <BeginStoryboard> \n                <Storyboard Storyboard.TargetName=\"InnerBorder\"  \n                  Storyboard.TargetProperty=\n                  \"BorderBrush.(SolidColorBrush.Color)\">\n                  <ColorAnimation To=\"{StaticResource  \n                    TransparentBlackColor}\" Duration=\"0:0:0.3\" /> \n                </Storyboard> \n              </BeginStoryboard> \n              <BeginStoryboard Name=\"BackgroundFadeOut\"  \n                HandoffBehavior=\"Compose\"> \n                <Storyboard Storyboard.TargetName=\"InnerBorder\"  \n                  Storyboard.TargetProperty=\n                  \"Background.(SolidColorBrush.Color)\"> \n                  <ColorAnimation To=\"White\" Duration=\"0:0:0.4\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.ExitActions> \n          </Trigger> \n          <Trigger Property=\"IsPressed\" Value=\"True\"> \n            <Trigger.EnterActions> \n              <BeginStoryboard Name=\"MouseDownBackground\"  \n                HandoffBehavior=\"Compose\"> \n                <Storyboard Storyboard.TargetName=\"InnerBorder\" \n                  Storyboard.TargetProperty=\n                  \"Background.(SolidColorBrush.Color)\"> \n                  <ColorAnimation From=\"#D6FF21\" Duration=\"0:0:1\"  \n                    DecelerationRatio=\"1.0\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.EnterActions> \n          </Trigger> \n          <EventTrigger RoutedEvent=\"Unloaded\"> \n            <RemoveStoryboard BeginStoryboardName=\"BackgroundFadeIn\" /> \n            <RemoveStoryboard BeginStoryboardName=\"BackgroundFadeOut\" /> \n            <RemoveStoryboard BeginStoryboardName=\"MouseDownBackground\" /> \n          </EventTrigger> \n        </ControlTemplate.Triggers> \n      </ControlTemplate> \n    </Button.Template> \n  </Button> \n</Grid> \n```", "```cs\nBorderBrush.(GradientBrush.GradientStops)[0].(GradientStop.Color) \n```", "```cs\nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Controls.Primitives; \nusing System.Windows.Input; \nusing System.Windows.Media; \nusing CompanyName.ApplicationName.CustomControls.Enums; \n\nnamespace CompanyName.ApplicationName.CustomControls \n{ \n  [TemplatePart(Name = \"PART_Root\", Type = typeof(Grid))] \n  public class GlowButton : ButtonBase \n  { \n    private RadialGradientBrush glowBrush = null; \n\n    static GlowButton() \n    { \n      DefaultStyleKeyProperty.OverrideMetadata (typeof(GlowButton),\n        new FrameworkPropertyMetadata(typeof(GlowButton))); \n    } \n\n    public GlowMode GlowMode { get; set; } = GlowMode.FullCenterMovement; \n\n    public static readonly DependencyProperty GlowColorProperty =\n      DependencyProperty.Register(nameof(GlowColor), typeof(Color),\n      typeof(GlowButton), new PropertyMetadata( \n      Color.FromArgb(121, 71, 0, 255), OnGlowColorChanged)); \n\n    public Color GlowColor \n    { \n      get { return (Color)GetValue(GlowColorProperty); } \n      set { SetValue(GlowColorProperty, value); } \n    } \n\n    private static void OnGlowColorChanged( \n      DependencyObject dependencyObject, \n      DependencyPropertyChangedEventArgs e) \n    { \n      ((GlowButton)dependencyObject).SetGlowColor((Color)e.NewValue); \n    } \n\n    public override void OnApplyTemplate() \n    { \n      Grid rootGrid = GetTemplateChild(\"PART_Root\") as Grid; \n      if (rootGrid != null) \n      { \n        rootGrid.MouseMove += Grid_MouseMove; \n        glowBrush =   \n          (RadialGradientBrush)rootGrid.FindResource(\"GlowBrush\"); \n        SetGlowColor(GlowColor); \n      } \n    } \n\n    private void SetGlowColor(Color value) \n    { \n      GlowColor = Color.FromArgb(121, value.R, value.G, value.B); \n      if (glowBrush != null) \n      { \n        GradientStop gradientStop = glowBrush.GradientStops[2]; \n        gradientStop.Color = GlowColor; \n      } \n    } \n\n    private void Grid_MouseMove(object sender, MouseEventArgs e) \n    { \n      Grid grid = (Grid)sender; \n      if (grid.IsMouseOver && glowBrush != null) \n      { \n        Point mousePosition = e.GetPosition(grid); \n        double x = mousePosition.X / ActualWidth; \n        double y = GlowMode != GlowMode.HorizontalCenterMovement ?\n          mousePosition.Y / ActualHeight : glowBrush.Center.Y; \n        glowBrush.Center = new Point(x, y); \n        if (GlowMode == GlowMode.HorizontalCenterMovement)  \n          glowBrush.GradientOrigin = \n          new Point(x, glowBrush.GradientOrigin.Y); \n        else if (GlowMode == GlowMode.FullCenterMovement)  \n          glowBrush.GradientOrigin = new Point(x, y); \n      } \n    } \n  } \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.CustomControls.Enums \n{ \n  public enum GlowMode \n  { \n    NoCenterMovement, HorizontalCenterMovement, FullCenterMovement \n  } \n} \n```", "```cs\n<Style TargetType=\"{x:Type CustomControls:GlowButton}\"> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type CustomControls:GlowButton}\"> \n        <Grid Name=\"PART_Root\"> \n          <Grid.Resources> \n            <RadialGradientBrush x:Key=\"GlowBrush\"  \n              RadiusY=\"0.622\" Center=\"0.5,0.848\"  \n              GradientOrigin=\"0.5,0.818\" RadiusX=\"1.5\">\n              <RadialGradientBrush.RelativeTransform>\n                <ScaleTransform x:Name=\"ScaleTransform\"  \n                  CenterX=\"0.5\" CenterY=\"0.5\" ScaleX=\"1.0\" ScaleY=\"1.8\" /> \n              </RadialGradientBrush.RelativeTransform> \n              <GradientStop Color=\"#B9F6F2FF\" /> \n              <GradientStop Color=\"#A9F4EFFF\" Offset=\"0.099\" /> \n              <GradientStop Color=\"{Binding GlowColor, \n                RelativeSource={RelativeSource AncestorType={x:Type \n                CustomControls:GlowButton}}}\" Offset=\"0.608\" /> \n              <GradientStop Offset=\"1\" Color=\"#004700FF\" /> \n            </RadialGradientBrush> \n            <RadialGradientBrush x:Key=\"LayeredButtonBackgroundBrush\"  \n              RadiusX=\"1.85\" RadiusY=\"0.796\" Center=\"1.018, -0.115\" \n              GradientOrigin=\"0.65,-0.139\"> \n              <GradientStop Color=\"#FFCACACD\" /> \n              <GradientStop Color=\"#FF3B3D42\"  Offset=\"1\" /> \n            </RadialGradientBrush> \n            <LinearGradientBrush x:Key=\"LayeredButtonCurveBrush\"  \n              StartPoint=\"0,0\" EndPoint=\"1,1\"> \n              <GradientStop Color=\"#FF747475\" Offset=\"0\" />\n              <GradientStop Color=\"#FF3B3D42\" Offset=\"1\" /> \n            </LinearGradientBrush> \n            <Grid x:Key=\"LayeredButtonBackgroundElements\"> \n              <Rectangle \n                Fill=\"{StaticResource LayeredButtonBackgroundBrush}\" /> \n              <Path StrokeThickness=\"0\"  \n                Fill=\"{StaticResource LayeredButtonCurveBrush}\">\n                <Path.Data> \n                  <CombinedGeometry GeometryCombineMode=\"Intersect\">\n                    <CombinedGeometry.Geometry1>\n                      <EllipseGeometry Center=\"-20,50.7\" RadiusX=\"185\"  \n                        RadiusY=\"46\" /> \n                    </CombinedGeometry.Geometry1>\n                    <CombinedGeometry.Geometry2> \n                      <RectangleGeometry Rect=\"0,0,106,24\" />\n                    </CombinedGeometry.Geometry2> \n                  </CombinedGeometry> \n                </Path.Data> \n              </Path> \n            </Grid> \n            <VisualBrush x:Key=\"LayeredButtonBackground\"  \n              Visual=\"{StaticResource LayeredButtonBackgroundElements}\" /> \n          </Grid.Resources> \n          <Border CornerRadius=\"3\" BorderBrush=\"#7F000000\"  \n            BorderThickness=\"1\" Background=\"#7FFFFFFF\"  \n            SnapsToDevicePixels=\"True\"> \n            <Border CornerRadius=\"2\" Margin=\"1\"  \n              Background=\"{StaticResource LayeredButtonBackground}\"  \n              SnapsToDevicePixels=\"True\"> \n              <Grid> \n                <Rectangle x:Name=\"Glow\" IsHitTestVisible=\"False\"\n                  RadiusX=\"2\" RadiusY=\"2\" \n                  Fill=\"{StaticResource GlowBrush}\" Opacity=\"0\" /> \n                <ContentPresenter Content=\"{TemplateBinding Content}\"\n                  Margin=\"{TemplateBinding Padding}\"\n                  HorizontalAlignment=\"Center\"\n                  VerticalAlignment=\"Center\" />\n              </Grid> \n            </Border> \n          </Border> \n          <Grid.Triggers> \n            <EventTrigger RoutedEvent=\"MouseEnter\"> \n              <BeginStoryboard> \n                <Storyboard> \n                  <DoubleAnimation Storyboard.TargetName=\"Glow\"\n                    Storyboard.TargetProperty=\"Opacity\" To=\"1.0\"\n                    Duration=\"0:0:0.5\" DecelerationRatio=\"1\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </EventTrigger> \n            <EventTrigger RoutedEvent=\"MouseLeave\"> \n              <BeginStoryboard> \n                <Storyboard> \n                  <DoubleAnimation Storyboard.TargetName=\"Glow\"\n                    Storyboard.TargetProperty=\"Opacity\" To=\"0.0\"\n                    Duration=\"0:0:1\" DecelerationRatio=\"1\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </EventTrigger> \n            <EventTrigger RoutedEvent=\"MouseDown\"> \n              <BeginStoryboard> \n                <Storyboard> \n                  <DoubleAnimation Storyboard.TargetName=\"ScaleTransform\"\n                    Storyboard.TargetProperty=\"ScaleX\" From=\"10.0\"\n                    To=\"1.0\" Duration=\"0:0:0.15\" AccelerationRatio=\"0.5\" /> \n                  <DoubleAnimation Storyboard.TargetName=\"ScaleTransform\"\n                    Storyboard.TargetProperty=\"ScaleY\" From=\"10.0\"\n                    To=\"1.8\" Duration=\"0:0:0.15\" AccelerationRatio=\"0.5\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </EventTrigger> \n          </Grid.Triggers> \n        </Grid> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<CustomControls:GlowButton Content=\"Glowing button\"  \n  GlowMode=\"NoCenterMovement\" GlowColor=\"Red\" FontSize=\"28\"  \n  Foreground=\"White\" Height=\"60\" Width=\"275\" /> \n```"]