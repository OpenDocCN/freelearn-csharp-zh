["```cs\nScaffold-DbContext \"Server=.;Database=FlixOneStore;Trusted_Connection=True;\" Microsoft.EntityFrameworkCore.SqlServer -OutputDir Models -Tables Customers \n```", "```cs\nusing System;\nnamespace DemoECommerceApp.Models\n{\n  public partial class Customers\n  {\n    public Guid Id { get; set; }\n    public string Gender { get; set; }\n    public string Firstname { get; set; }\n    public string Lastname { get; set; }\n    public DateTime Dob { get; set; }\n    public string Email { get; set; }\n    public Guid? Mainaddressid { get; set; }\n    public string Telephone { get; set; }\n    public string Fax { get; set; }\n    public string Password { get; set; }\n    public bool Newsletteropted { get; set; }\n  }\n}\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nnamespace DemoECommerceApp.Models\n{\n  public partial class FlixOneStoreContext : DbContext\n  {\n    public virtual DbSet<Customers> Customers { get; set; }\n    public FlixOneStoreContext(DbContextOptions<\n    FlixOneStoreContext> options)\n    : base(options)\n    { }\n    // Code is commented below, because we are applying\n    dependency injection inside startup.\n    // protected override void OnConfiguring(\n    DbContextOptionsBuilder optionsBuilder)\n    // {\n    // if (!optionsBuilder.IsConfigured)\n    // {\n    //#warning To protect potentially sensitive information\n    in your connection string, you should move it out of \n    source code. See http://go.microsoft.com/fwlink/?LinkId=723263 \n    for guidance on storing connection strings.\n    // optionsBuilder.UseSqlServer(@\"Server=.;\n    Database=FlixOneStore;Trusted_Connection=True;\");\n    // }\n    // }\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n      modelBuilder.Entity<Customers>(entity =>\n      {\n        entity.Property(e => e.Id)\n        .HasColumnName(\"id\")\n        .ValueGeneratedNever();\n        entity.Property(e => e.Dob)\n        .HasColumnName(\"dob\")\n        .HasColumnType(\"datetime\");\n        entity.Property(e => e.Email)\n        .IsRequired()\n        .HasColumnName(\"email\")\n        .HasMaxLength(110);\n        entity.Property(e => e.Fax)\n        .IsRequired()\n        .HasColumnName(\"fax\")\n        .HasMaxLength(50);\n        entity.Property(e => e.Firstname)\n        .IsRequired()\n        .HasColumnName(\"firstname\")\n        .HasMaxLength(50);\n        entity.Property(e => e.Gender)\n        .IsRequired()\n        .HasColumnName(\"gender\")\n        .HasColumnType(\"char(1)\");\n        entity.Property(e => e.Lastname)\n        .IsRequired()\n        .HasColumnName(\"lastname\")\n        .HasMaxLength(50);\n        entity.Property(e => e.Mainaddressid).HasColumnName\n        (\"mainaddressid\");\n        entity.Property(e => e.Newsletteropted).HasColumnName\n        (\"newsletteropted\");\n        entity.Property(e => e.Password)\n        .IsRequired()\n        .HasColumnName(\"password\")\n        .HasMaxLength(50);\n        entity.Property(e => e.Telephone)\n        .IsRequired()\n        .HasColumnName(\"telephone\")\n        .HasMaxLength(50);\n      });\n    }\n  }\n}\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n  services.AddSingleton<IProductService, ProductService>();\n  services.AddMvc();\n  var connection = @\"Server=.;Database=FlixOneStore;\n  Trusted_Connection=True\";\n  services.AddDbContext<FlixOneStoreContext>(\n  options => options.UseSqlServer(connection));\n}\n```", "```cs\n// Removed usings for brevity.\nnamespace DemoECommerceApp.Controllers\n{\n  [Produces(\"application/json\")]\n  [Route(\"api/Customers\")]\n  public class CustomersController : Controller\n  {\n    private readonly FlixOneStoreContext _context;\n    public CustomersController(FlixOneStoreContext context)\n    {\n      _context = context;\n    }\n    // GET: api/Customers\n    [HttpGet]\n    public IEnumerable<Customers> GetCustomers()\n    {\n      return _context.Customers;\n    }\n    // GET: api/Customers/5\n    [HttpGet(\"{id}\")]\n    public async Task<IActionResult> GetCustomers\n    ([FromRoute] Guid id)\n    {\n      if (!ModelState.IsValid)\n      {\n        return BadRequest(ModelState);\n      }\n      var customers = await \n      _context.Customers.SingleOrDefaultAsync(m => m.Id == id);\n      if (customers == null)\n      {\n        return NotFound();\n      }\n      return Ok(customers);\n    }\n\n    // You will also find PUT POST, DELETE methods.\n    // These action methods are removed to save space.\n  }\n}\n```", "```cs\nprivate readonly FlixOneStoreContext _context;\npublic CustomersController(FlixOneStoreContext context)\n{\n  _context = context;\n}\n```", "```cs\n<div class=\"container\">\n  <h2>Register for FlixOneStore</h2>\n  <div class=\"form-horizontal\">\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\n      \"txtFirstName\">First Name:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"text\" class=\"form-control\" id=\n        \"txtFirstName\" placeholder=\n        \"Enter first name\" name=\"firstname\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\n      \"txtLastName\">Last Name:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"text\" class=\"form-control\" id=\n        \"txtLastName\" placeholder=\n        \"Enter last name\" name=\"lastname\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"txtEmail\">\n      Email:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"email\" class=\"form-control\" id=\n        \"txtEmail\" placeholder=\n        \"Enter email\" name=\"email\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"gender\">\n      Gender:</label>\n      <div class=\"col-sm-3\">\n        <label class=\"radio-inline\"><input type=\"radio\" \n        value=\"M\" name=\"gender\">Male</label>\n        <lable class=\"radio-inline\"><input type=\"radio\" \n        value=\"F\" name=\"gender\">Female</lable>\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"txtDob\">\n      Date of Birth:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"date\" class=\"form-control\" id=\"txtDob\" />\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"txtMobile\">\n      Mobile Number:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"text\" class=\"form-control\" id=\"txtMobile\"\n        placeholder=\n        \"Enter mobile number\" />\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"txtFax\">Fax:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"text\" class=\"form-control\" id=\"txtFax\"\n        placeholder=\"Enter fax\" />\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"txtPassword\">\n      Password:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"password\" class=\"form-control\" id=\n        \"txtPassword\" placeholder=\n        \"Enter password\" name=\"pwd\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <label class=\"control-label col-sm-2\" for=\"txtConfirmPassword\">\n      Confirm Password:</label>\n      <div class=\"col-sm-3\">\n        <input type=\"password\" class=\"form-control\"\n        id=\"txtConfirmPassword\" placeholder=\n        \"Enter password again\" name=\"confirmpwd\">\n      </div>\n    </div>\n    <div class=\"form-group\">\n      <div class=\"col-sm-offset-2 col-sm-10\">\n        <button type=\"button\" class=\"btn btn-success\"\n        id=\"btnRegister\">Register</button>\n      </div>\n    </div>\n  </div>\n</div>\n```", "```cs\n$(document).ready(function () {\n  $('#btnRegister').click(function () {\n    // Check password and confirm password.\n    var password = $('#txtPassword').val(),\n    confirmPassword = $('#txtConfirmPassword').val();\n    if (password !== confirmPassword) {\n      alert(\"Password and Confirm Password don't match!\");\n      return;\n    }\n\n    // Make a customer object.\n    var customer = {\n      \"gender\": $(\"input[name='gender']:checked\").val(),\n      \"firstname\": $('#txtFirstName').val(),\n      \"lastname\": $('#txtLastName').val(),\n      \"dob\": $('#txtDob').val(),\n      \"email\": $('#txtEmail').val(),\n      \"telephone\": $('#txtMobile').val(),\n      \"fax\": $('#txtFax').val(),\n      \"password\": $('#txtPassword').val(),\n      \"newsletteropted\": false\n    };\n\n    $.ajax({\n      url: 'http://localhost:57571/api/Customers',\n      type: \"POST\",\n      contentType: \"application/json\",\n      data: JSON.stringify(customer),\n      dataType: \"json\",\n      success: function (result) {\n        alert(\"A customer record created for: \"\n        + result.firstname + \" \" + result.lastname);\n      },\n      error: function (err) {\n        alert(err.responseText);\n      }\n    });\n  });\n});\n```", "```cs\n// POST: api/Customers\n[HttpPost]\npublic async Task<IActionResult> PostCustomers([FromBody] Customers customers)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  // Unique mail id check.\n if (_context.Customers.Any(x => x.Email == customers.Email))\n {\n ModelState.AddModelError(\"email\", \"User with mail id already\n    exists!\");\n return BadRequest(ModelState);\n }\n  _context.Customers.Add(customers);\n  try\n  {\n    await _context.SaveChangesAsync();\n  }\n  catch (DbUpdateException ex)\n  {\n    if (CustomersExists(customers.Id))\n    {\n      return new StatusCodeResult(StatusCodes.Status409Conflict);\n    }\n    else\n    {\n      throw;\n    }\n  }\n  return CreatedAtAction(\"GetCustomers\", new { id = customers.Id },\n  customers);\n}\n```", "```cs\nreturn CreatedAtAction(\"GetCustomers\", new { id = customers.Id }, customers); \n```", "```cs\nFailed to load http://localhost:57571/api/Customers: Response to preflight request doesn't pass access control check: No 'Access-Control-Allow-Origin' header is present on the requested resource. Origin 'null' is therefore not allowed access. The response had HTTP status code 404.\n```", "```cs\nservices.AddCors(options =>\n{\n  options.AddPolicy(\"AllowAll\",\n    builder =>\n    {\n      builder\n      .AllowAnyOrigin()\n      .AllowAnyMethod()\n      .AllowAnyHeader();\n    });\n});\n```", "```cs\napp.UseCors(\"AllowAll\");\n```", "```cs\n[Authorize(AuthenticationSchemes = \"Basic\")]\npublic async Task<IActionResult> GetCustomers([FromRoute] Guid id)\n```", "```cs\nusing Microsoft.AspNetCore.Authentication;\nnamespace DemoECommerceApp.Security.Authentication\n{\n  public class BasicAuthenticationOptions : AuthenticationSchemeOptions {}\n}\n```", "```cs\npublic class BasicAuthenticationHandler : AuthenticationHandler<BasicAuthenticationOptions>\n```", "```cs\npublic BasicAuthenticationHandler(IOptionsMonitor<BasicAuthenticationOptions> options, ILoggerFactory logger, UrlEncoder encoder, ISystemClock clock, FlixOneStoreContext context)\n: base(options, logger, encoder, clock)\n{\n  _context = context;\n}\n```", "```cs\nprotected override Task<AuthenticateResult> HandleAuthenticateAsync()\n{\n  // 1\\. Verify if AuthorizationHeaderName present in the header.\n // AuthorizationHeaderName is a string with value \"Authorization\".\n  if (!Request.Headers.ContainsKey(AuthorizationHeaderName))\n  {\n    // Authorization header not found.\n    return Task.FromResult(AuthenticateResult.NoResult());\n  }\n  // 2\\. Verify if header is valid. \n  if (!AuthenticationHeaderValue.TryParse(Request.Headers\n  [AuthorizationHeaderName], out AuthenticationHeaderValue \n  headerValue))\n  {\n    // Authorization header is not valid.\n    return Task.FromResult(AuthenticateResult.NoResult());\n  }\n  // 3\\. Verify is scheme name is Basic. BasicSchemeName is a string\n // with value 'Basic'. \n  if (!BasicSchemeName.Equals(headerValue.Scheme, StringComparison.\n  OrdinalIgnoreCase))\n  {\n    // Authorization header is not Basic.\n    return Task.FromResult(AuthenticateResult.NoResult());\n  }\n  // 4\\. Fetch email and password from header.\n // If length is not 2, then authentication fails.\n  byte[] headerValueBytes = Convert.FromBase64String(headerValue.\n  Parameter);\n  string emailPassword = Encoding.UTF8.GetString(headerValueBytes);\n  string[] parts = emailPassword.Split(':');\n  if (parts.Length != 2)\n  {\n    return Task.FromResult(AuthenticateResult.Fail(\"Invalid Basic\n    Authentication Header\"));\n  }\n  string email = parts[0];\n  string password = parts[1];\n  // 5\\. Validate if email and password are correct.\n  var customer = _context.Customers.SingleOrDefault(x => \n  x.Email == email && x.Password == password);\n  if (customer == null)\n  {\n    return Task.FromResult(AuthenticateResult.Fail(\"Invalid email \n    and password.\"));\n  }\n  // 6\\. Create claims with email and id.\n  var claims = new[]\n  { \n    new Claim(ClaimTypes.Name, email),\n    new Claim(ClaimTypes.NameIdentifier, customer.Id.ToString())\n  };\n  // 7\\. ClaimsIdentity creation with claims.\n  var identity = new ClaimsIdentity(claims, Scheme.Name);\n  var principal = new ClaimsPrincipal(identity);\n  var ticket = new AuthenticationTicket(principal, Scheme.Name);\n  return Task.FromResult(AuthenticateResult.Success(ticket));\n}\n```", "```cs\n[HttpGet(\"{id}\")]\n[Authorize(AuthenticationSchemes = \"Basic\")]\npublic async Task<IActionResult> GetCustomers([FromRoute] Guid id)\n{\n  if (!ModelState.IsValid)\n  {\n    return BadRequest(ModelState);\n  }\n  var ident = User.Identity as ClaimsIdentity;\n var currentLoggeedInUserId = ident.Claims.FirstOrDefault\n  (c => c.Type == ClaimTypes.NameIdentifier)?.Value;\n if (currentLoggeedInUserId != id.ToString())\n {\n // Not Authorized\n return BadRequest(\"You are not authorized!\");\n }\n  var customers = await _context.Customers.SingleOrDefaultAsync\n  (m => m.Id == id);\n  if (customers == null)\n  {\n    return NotFound();\n  }\n  return Ok(customers);\n}\n```", "```cs\nservices.AddAuthentication(\"Basic\")\n.AddScheme<BasicAuthenticationOptions, BasicAuthenticationHandler>(\"Basic\", null);\nservices.AddTransient<IAuthenticationHandler, BasicAuthenticationHandler>();\n```", "```cs\n$.ajax({\n  url: 'http://localhost:57571/api/Customers/\n  910D4C2F-B394-4578-8D9C-7CA3FD3266E2',\n  type: \"GET\",\n  contentType: \"application/json\",\n  dataType: \"json\",\n  headers: { 'Authorization': 'Basic ' + btoa\n  (email + ':' + password)},\n  success: function (result) {\n    // Work with result. Code removed for brevity.\n  },\n  error: function (err) \n  {\n    if (err.status == 401) \n    {\n      alert(\"Either wrong email and password or you are \n      not authorized to access the data!\")\n    }\n  }\n});\n```", "```cs\nprotected override async Task HandleChallengeAsync(AuthenticationProperties properties)\n{\n  Response.Headers[\"WWW-Authenticate\"] = $\"Basic \n  realm=\\\"http://localhost:57571\\\", charset=\\\"UTF-8\\\"\";\n  await base.HandleChallengeAsync(properties);\n}\n```", "```cs\npublic class Config\n{\n  public static IEnumerable<ApiResource> GetApiResources()\n  {\n    return new List<ApiResource>\n    {\n      new ApiResource\n      (\n        \"FlixOneStore.ReadAccess\",\n        \"FlixOneStore API\", \n         new List<string> \n         {\n           JwtClaimTypes.Id,\n           JwtClaimTypes.Email,\n           JwtClaimTypes.Name,\n           JwtClaimTypes.GivenName,\n           JwtClaimTypes.FamilyName\n        }\n      ),\n\n      new ApiResource(\"FlixOneStore.FullAccess\", \"FlixOneStore API\")\n    }; \n  }\n}\n```", "```cs\npublic static IEnumerable<Client> GetClients()\n{\n  return new[]\n  {\n    new Client\n    {\n      Enabled = true,\n      ClientName = \"HTML Page Client\",\n      ClientId = \"htmlClient\",\n      AllowedGrantTypes = GrantTypes.ResourceOwnerPassword,\n\n      ClientSecrets =\n      {\n        new Secret(\"secretpassword\".Sha256())\n      },\n\n      AllowedScopes = { \"FlixOneStore.ReadAccess\" }\n    }\n  };\n}\n```", "```cs\nservices.AddIdentityServer()\n        .AddInMemoryApiResources(Config.GetApiResources())\n        .AddInMemoryClients(Config.GetClients())\n        .AddProfileService<ProfileService>()\n        .AddDeveloperSigningCredential();\n```", "```cs\nservices.AddAuthentication(options =>\n{\n  options.DefaultAuthenticateScheme = \n  JwtBearerDefaults.AuthenticationScheme;\n  options.DefaultChallengeScheme = \n  JwtBearerDefaults.AuthenticationScheme;\n})\n.AddJwtBearer(o =>\n{\n  o.Authority = \"http://localhost:57571\";\n  o.Audience = \"FlixOneStore.ReadAccess\";\n  o.RequireHttpsMetadata = false;\n});\n```", "```cs\n// GET: api/Customers/5\n[HttpGet(\"{id}\")]\n[Authorize]\npublic async Task<IActionResult> GetCustomers([FromRoute] Guid id)\n```", "```cs\ngrant_type=password&scope=FlixOneStore.ReadAccess&client_id=htmlClient&client_secret=secretpassword&username=taditdash@gmail.com&password=12345\n```", "```cs\npublic class ResourceOwnerPasswordValidator : IResourceOwnerPasswordValidator\n{\n  private readonly FlixOneStoreContext _context;\n  public ResourceOwnerPasswordValidator(FlixOneStoreContext context)\n  {\n    _context = context;\n  }\n  public async Task ValidateAsync(ResourceOwnerPassword\n  ValidationContext context)\n  {\n    try\n    {\n      var customer = await _context.Customers.SingleOrDefaultAsync\n      (m => m.Email == context.UserName);\n      if (customer != null)\n      {\n        if (customer.Password == context.Password)\n        {\n          context.Result = new GrantValidationResult(\n subject: customer.Id.ToString(),\n authenticationMethod: \"database\",\n claims: GetUserClaims(customer));\n          return;\n        }\n        context.Result = new GrantValidationResult\n        (TokenRequestErrors.InvalidGrant,\n        \"Incorrect password\");\n        return;\n      }\n      context.Result = new GrantValidationResult\n      (TokenRequestErrors.InvalidGrant,\n      \"User does not exist.\");\n      return;\n    }\n    catch (Exception ex)\n    {\n      context.Result = new GrantValidationResult\n      (TokenRequestErrors.InvalidGrant,\n      \"Invalid username or password\");\n    }\n  }\n  public static Claim[] GetUserClaims(Customers customer)\n  {\n    return new Claim[]\n    {\n      new Claim(JwtClaimTypes.Id, customer.Id.ToString() ?? \"\"),\n      new Claim(JwtClaimTypes.Name, (\n      !string.IsNullOrEmpty(customer.Firstname) &&  \n      !string.IsNullOrEmpty(customer.Lastname))\n      ? (customer.Firstname + \" \" + customer.Lastname)\n      : String.Empty),\n      new Claim(JwtClaimTypes.GivenName, customer.Firstname ?? \n      string.Empty),\n      new Claim(JwtClaimTypes.FamilyName, customer.Lastname ??       \n      string.Empty),\n      new Claim(JwtClaimTypes.Email, customer.Email ?? string.Empty)\n    };\n  }\n}\n```", "```cs\npublic class ProfileService : IProfileService\n{\n  private readonly FlixOneStoreContext _context;\n  public ProfileService(FlixOneStoreContext context)\n  {\n    _context = context;\n  }\n  public async Task GetProfileDataAsync(ProfileDataRequestContext \n  profileContext)\n  {\n    if (!string.IsNullOrEmpty(profileContext.Subject.Identity.Name))\n    {\n      var customer = await _context.Customers\n      .SingleOrDefaultAsync(m => m.Email == \n      profileContext.Subject.Identity.Name);\n      if (customer != null)\n      {\n        var claims = ResourceOwnerPasswordValidator.\n        GetUserClaims(customer);\n profileContext.IssuedClaims = claims.Where(x => \n        profileContext.RequestedClaimTypes.Contains(x.Type)).ToList();\n      }\n    }\n    else\n    {\n      var customerId = profileContext.Subject.Claims.FirstOrDefault\n      (x => x.Type == \"sub\");\n      if (!string.IsNullOrEmpty(customerId.Value))\n      {\n        var customer = await _context.Customers\n        .SingleOrDefaultAsync(u => u.Id == \n        Guid.Parse(customerId.Value));\n        if (customer != null)\n        {\n          var claims = \n          ResourceOwnerPasswordValidator.GetUserClaims(customer);\n profileContext.IssuedClaims = claims.Where(x => \n          profileContext.RequestedClaimTypes.Contains(x.Type)).\n          ToList();\n        }\n      }\n    } \n  }\n}\n```"]