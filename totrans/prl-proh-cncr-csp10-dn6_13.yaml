- en: '*Chapter 10*: Debugging Multithreaded Applications with Visual Studio'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：使用Visual Studio调试多线程应用程序'
- en: Visual Studio 2022 is the latest version of Visual Studio on Mac and Windows.
    In this chapter, we are going to learn how to leverage the power of Visual Studio
    when debugging multithreaded .NET applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2022是Mac和Windows上最新的Visual Studio版本。在本章中，我们将学习如何利用Visual Studio的强大功能来调试多线程.NET应用程序。
- en: Visual Studio provides several extremely useful tools for developers who need
    to debug parallel and concurrent .NET applications. This chapter will explore
    the tools in detail through concrete examples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio为需要调试并行和并发.NET应用程序的开发人员提供了几个极其有用的工具。本章将通过具体的示例详细探讨这些工具。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing multithreaded debugging
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍多线程调试
- en: Debugging threads and processes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试线程和进程
- en: Switching and flagging threads
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换和标记线程
- en: Debugging a parallel application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试并行应用程序
- en: By the end of this chapter, you will have the tools and knowledge you need to
    debug threading issues in your parallel and concurrent C# code.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将拥有调试并行和并发C#代码中线程问题的工具和知识。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, the following software is
    recommended for Windows developers:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，以下软件是推荐给Windows开发人员的：
- en: Visual Studio 2022 version 17.2 or later
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022版本17.2或更高版本
- en: .NET 6
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 6
- en: To complete any WinForms or WPF samples, you will need to install the .NET desktop
    development workload for Visual Studio. These projects will run only on Windows.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要完成任何WinForms或WPF示例，您需要为Visual Studio安装.NET桌面开发工作负载。这些项目只能在Windows上运行。
- en: All the code examples for this chapter can be found on GitHub at [https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在GitHub上找到：[https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10)。
- en: Note
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The concepts and tools in this chapter only work with Visual Studio on Windows.
    If you are building .NET applications on a Mac, the **Rider** IDE from JetBrains
    provides several tools for multithreaded debugging – a **Threads** pane, a **Frames**
    view to view frames on a selected thread, and a **Parallel Stacks** pane. Visual
    Studio for Mac doesn’t have this kind of support for debugging multithreaded applications
    yet. You can read more about JetBrains Rider’s multithreaded debugging in their
    documentation: https://www.jetbrains.com/help/rider/Debugging_Multithreaded_Applications.xhtml.
    Debugging on a Mac is beyond the scope of this chapter.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的概念和工具仅适用于Windows上的Visual Studio。如果您在Mac上构建.NET应用程序，JetBrains的**Rider** IDE提供了一些多线程调试工具——一个**线程**面板，一个用于查看选定线程的**帧**视图，以及一个**并行堆栈**面板。Visual
    Studio for Mac目前还没有为调试多线程应用程序提供此类支持。您可以在JetBrains Rider的文档中了解更多关于多线程调试的信息：https://www.jetbrains.com/help/rider/Debugging_Multithreaded_Applications.xhtml。本章不涉及在Mac上的调试。
- en: Let’s get started by learning some basics of multithreaded debugging with Visual
    Studio 2022.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从学习Visual Studio 2022的多线程调试基础知识开始。
- en: Introducing multithreaded debugging
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍多线程调试
- en: Debugging is a key component of every .NET developer’s skillset. Nobody ever
    writes bug-free code and introducing multithreaded constructs to your project
    only increases the chances of introducing bugs. As .NET and C# have added more
    support for parallel programming and concurrency, Visual Studio has added more
    debugging features to support those constructs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是每个.NET开发人员技能集的关键组成部分。没有人能写出没有错误的代码，将多线程结构引入项目只会增加引入错误的机会。随着.NET和C#增加了对并行编程和并发的更多支持，Visual
    Studio也增加了更多调试功能来支持这些结构。
- en: 'Today, Visual Studio provides the following multithreaded debugging features
    for the modern .NET developer:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，Visual Studio为现代.NET开发人员提供了以下多线程调试功能：
- en: '**Threads**: This window shows a list of the threads that are used by your
    application while debugging. It also indicates which thread is active when it
    stopped at a breakpoint in your code.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**线程**：此窗口显示在调试过程中应用程序使用的线程列表。它还指示在代码中的断点处停止时哪个线程是活动的。'
- en: '**Parallel Stacks**: This window allows developers to visualize the call stacks
    for each thread in their application in a single view. Selecting a thread in the
    window will display call stack information for the selected thread in the **Call
    Stack** window.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行堆栈**：此窗口允许开发者在一个视图中可视化应用程序中每个线程的调用堆栈。在窗口中选择一个线程将显示所选线程在**调用堆栈**窗口中的调用堆栈信息。'
- en: '**Parallel Watch**: This window works like the **Watch** window, except that
    you can see the value of a watch expression on each active thread in the application.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**并行监视**：此窗口的工作方式类似于**监视**窗口，不同之处在于您可以看到应用程序中每个活动线程上监视表达式的值。'
- en: '**Debug Location**: This toolbar allows you to narrow your focus while debugging
    multithreaded applications. It has fields to select a **Process**, **Thread**,
    and **Stack Frame**. There are also buttons on the toolbar so that you can **Flag**
    and **Unflag** threads to be monitored.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试位置**：此工具栏允许你在调试多线程应用程序时缩小关注范围。它有字段用于选择**进程**、**线程**和**堆栈帧**。工具栏上还有按钮，可以用来**标记**和**取消标记**要监视的线程。'
- en: '**Tasks**: This window displays each running task in the application and provides
    information about the thread that is running the task, the state of the task,
    and its call stack. You can also see the starting point for each task (the method
    or delegate that was passed to the task to be run).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：此窗口显示应用程序中每个正在运行的任务，并提供有关运行任务的线程、任务状态及其调用堆栈的信息。您还可以看到每个任务的起始点（传递给要运行的任务的方法或委托）。'
- en: '**Attach to Process**: This window allows you to attach the Visual Studio debugger
    to a process on the local machine or a remote machine. **Remote debugging** can
    be useful when working with multithreaded UI applications. It allows developers
    to debug their applications on systems with different numbers of processor cores
    than what’s on their machines. They can also attach to a remote process running
    on a system running other processes that will be present in a production environment.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加到进程**：此窗口允许您将Visual Studio调试器附加到本地机器或远程机器上的进程。**远程调试**在处理多线程UI应用程序时非常有用。它允许开发者在其机器上的处理器核心数量与系统上的不同时调试他们的应用程序。他们还可以附加到在运行其他进程的系统上运行的远程进程，这些进程将在生产环境中存在。'
- en: '**GPU Threads**: This window displays information about threads running on
    the GPU. This is used for C++ applications and is beyond the scope of this book.
    To learn more, you can read the documentation from Microsoft: [https://docs.microsoft.com/visualstudio/debugger/how-to-use-the-gpu-threads-window](https://docs.microsoft.com/visualstudio/debugger/how-to-use-the-gpu-threads-window).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GPU线程**：此窗口显示在GPU上运行的线程信息。这用于C++应用程序，超出了本书的范围。要了解更多信息，您可以阅读来自Microsoft的文档：[https://docs.microsoft.com/visualstudio/debugger/how-to-use-the-gpu-threads-window](https://docs.microsoft.com/visualstudio/debugger/how-to-use-the-gpu-threads-window)。'
- en: In the sections ahead, we will use these debugging tools to step through multithreaded
    code in projects from some of the previous chapters of this book. Let’s start
    by learning about the **Threads** and **Attach to Process** windows and the **Debug
    Location** toolbar.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将使用这些调试工具来逐步调试本书前几章项目中的多线程代码。让我们先了解**线程**和**附加到进程**窗口以及**调试位置**工具栏。
- en: Debugging threads and processes
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试线程和进程
- en: 'In this section, we are going to debug **BackgroundPingConsoleApp** from [*Chapter
    1*](B18552_01_ePub.xhtml#_idTextAnchor014). You can use your completed project
    from [*Chapter 1*](B18552_01_ePub.xhtml#_idTextAnchor014) or get the project from
    this chapter’s GitHub repository: [https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10).
    We will debug the application and discover some of the features of the **Debug
    Location** toolbar and the **Threads** window as we go.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将调试**BackgroundPingConsoleApp**，见[*第1章*](B18552_01_ePub.xhtml#_idTextAnchor014)。您可以使用您在第1章中完成的工程，见[*第1章*](B18552_01_ePub.xhtml#_idTextAnchor014)，或者从本章的GitHub仓库中获取项目：[https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10)。我们将调试应用程序，并在过程中发现**调试位置**工具栏和**线程**窗口的一些功能。
- en: Debugging a project with multiple threads
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试具有多个线程的项目
- en: The project we’ll be working this is a simple one that creates one background
    thread to check whether the network is available.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要工作的项目是一个简单的项目，它创建一个后台线程来检查网络是否可用。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The examples in this chapter will be run in the **Debug** configuration in
    Visual Studio. When you compile and run a .NET project, you can choose to run
    a **Debug** or **Release** build. While debugging, you will want to select **Debug**
    mode so that the project compiles w the symbolic debug information. This is not
    included in a **Release** build. For more information about build configurations,
    check out Microsoft Docs: https://docs.microsoft.com/visualstudio/ide/understanding-build-configurations.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的示例将在 Visual Studio 的**调试**配置下运行。当你编译并运行一个 .NET 项目时，你可以选择运行**调试**或**发布**构建。在调试时，你将想要选择**调试**模式，以便项目编译时包含符号调试信息。这不会包含在**发布**构建中。有关构建配置的更多信息，请参阅
    Microsoft Docs：https://docs.microsoft.com/visualstudio/ide/understanding-build-configurations。
- en: 'Let’s get started with our debugging example:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从调试示例开始：
- en: Start by opening `Program.cs` in the C# editor.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 C# 编辑器中打开`Program.cs`。
- en: Set a breakpoint on the `Thread.Sleep(100)` statement inside the `while` loop.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`while`循环内的`Thread.Sleep(100)`语句上设置断点。
- en: 'Select **View** | **Toolbars** | **Debug Location** to display the **Debug
    Location** toolbar:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**视图** | **工具栏** | **调试位置**以显示**调试位置**工具栏：
- en: '![Figure 10.1 – The Debug Location toolbar in Visual Studio ](img/Figure_10.1_B18552.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – Visual Studio 中的调试位置工具栏](img/Figure_10.1_B18552.jpg)'
- en: Figure 10.1 – The Debug Location toolbar in Visual Studio
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – Visual Studio 中的调试位置工具栏
- en: We will be using this toolbar when we start debugging. All the fields are disabled
    when there is no active debugging session in Visual Studio.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在开始调试时使用此工具栏。在 Visual Studio 中没有活动调试会话时，所有字段都将禁用。
- en: 'Start debugging the project. When Visual Studio breaks at your breakpoint,
    notice the state of the **Debug Location** toolbar:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试项目。当 Visual Studio 在你的断点处中断时，注意**调试位置**工具栏的状态：
- en: '![Figure 10.2 – Debugging with the Debug Location toolbar ](img/Figure_10.2_B18552.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 使用调试位置工具栏进行调试](img/Figure_10.2_B18552.jpg)'
- en: Figure 10.2 – Debugging with the Debug Location toolbar
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 使用调试位置工具栏进行调试
- en: The toolbar provides several dropdown controls to select the **Process**, **Thread**,
    and **Stack Frame** properties in scope. The **Process** dropdown will only contain
    a single process unless you explicitly debug multiple processes with the **Attach
    to Process** window. You can also set up multiple startup projects in Visual Studio
    to achieve this.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏提供了一些下拉控件，用于在作用域内选择**进程**、**线程**和**堆栈帧**属性。除非你使用**附加到进程**窗口显式调试多个进程，否则**进程**下拉菜单中只会包含一个进程。你还可以在
    Visual Studio 中设置多个启动项目来实现这一点。
- en: The **Threads** dropdown contains all the threads that belong to the selected
    process. The selected thread in this control is the background thread we created
    because the breakpoint was added within the code executed by that background thread.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程**下拉菜单包含属于所选进程的所有线程。在此控件中选中的线程是我们创建的后台线程，因为断点是在该后台线程执行的代码中添加的。'
- en: The **Stack Frame** dropdown contains the list of frames in the current thread’s
    call stack.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**堆栈帧**下拉菜单包含当前线程调用堆栈中的帧列表。'
- en: There is a **Toggle Current Thread Flagged State** button to the right of the
    **Threads** dropdown. We will learn about flagging threads later in the *Switching
    and flagging threads* section.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在**线程**下拉菜单的右侧有一个**切换当前线程标记状态**按钮。我们将在*切换和标记线程*部分学习标记线程。
- en: 'Next, select **Debug** | **Windows** | **Threads** to open the **Threads**
    window:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择**调试** | **窗口** | **线程**以打开**线程**窗口：
- en: '![Figure 10.3 – Debugging with the Threads window active ](img/Figure_10.3_B18552.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 线程窗口激活时的调试](img/Figure_10.3_B18552.jpg)'
- en: Figure 10.3 – Debugging with the Threads window active
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 线程窗口激活时的调试
- en: By default, the **Threads** window will open in the lower-left panel with the
    **Output**, **Locals**, and **Watch** debugging windows.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，**线程**窗口将在左下角面板中打开，包含**输出**、**局部变量**和**监视**调试窗口。
- en: 'Finally, expand the **Threads** window so that we can explore and discuss its
    features:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，展开**线程**窗口，以便我们可以探索和讨论其功能：
- en: '![Figure 10.4 – Taking a closer look at the Threads window ](img/Figure_10.4_B18552.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 仔细查看线程窗口](img/Figure_10.4_B18552.jpg)'
- en: Figure 10.4 – Taking a closer look at the Threads window
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 仔细查看线程窗口
- en: Exploring the Threads window
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索线程窗口
- en: 'The **Threads** window provides quite a bit of useful information in a small
    window. We will start by discussing the data that’s displayed for each thread
    in the list:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**线程**窗口在小型窗口中提供了大量有用的信息。我们将从讨论列表中每个线程显示的数据开始：'
- en: '**Process ID**: By default, the list of threads is grouped by **Process ID**.
    This grouping can be controlled by the **Group by** dropdown in the window’s toolbar.
    The **Process ID** grouping also displays the number of threads in its group.
    This can be useful when working with a large number of threads.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程 ID**：默认情况下，线程列表按**进程 ID**分组。此分组可以通过窗口工具栏中的**按**下拉菜单进行控制。**进程 ID**分组还会显示其组中的线程数量。当处理大量线程时，这可能很有用。'
- en: '**ID**: This is the ID for each thread in the list'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：这是列表中每个线程的 ID'
- en: '`Thread.ManagedThreadId` property of each thread'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Thread.ManagedThreadId`属性是每个线程的'
- en: '**Category**: This describes the type of thread (**Main Thread**, **Worker
    Thread**, and so on)'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类别**：这描述了线程的类型（**主线程**、**工作线程**等）'
- en: '`Thread.Name` property of each thread. If a thread has no name, then **<No
    Name>** will be displayed in this field.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Thread.Name`属性是每个线程的。如果一个线程没有名称，则在此字段中显示**无名称**。'
- en: '**Location**: This field contains the current stack frame of each thread in
    its call stack. You can click the dropdown in this field to display the full call
    stack for the thread.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：此字段包含每个线程调用栈中的当前堆栈帧。您可以通过单击此字段中的下拉菜单来显示线程的完整调用栈。'
- en: 'Some additional fields are hidden by default. You can hide or show columns
    by selecting the **Columns** button in the **Threads** window toolbar. Select
    or unselect the columns you would like to show or hide. These are the columns
    that are hidden initially:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一些额外的字段默认隐藏。您可以通过在**线程**窗口工具栏中选择**列**按钮来隐藏或显示列。以下是要隐藏的列：
- en: '**Priority**: This displays the priority assigned to the thread by the system'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优先级**：此操作显示系统分配给线程的优先级'
- en: '**Affinity Mask**: The affinity mask determines which processors a thread can
    run on. This is determined by the system'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亲和掩码**：亲和掩码确定线程可以在哪些处理器上运行。这是由系统决定的'
- en: '**Suspended Count**: This value is used by the system to decide whether the
    thread can be run'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**挂起计数**：此值由系统用于决定线程是否可以运行'
- en: '**Process Name**: This is the name of the process that the thread belongs to'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程名称**：这是线程所属进程的名称'
- en: '**Process ID**: This is the ID of the process that the thread belongs to'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**进程 ID**：这是线程所属进程的 ID'
- en: '**Transport Qualifier**: This identifies the machine that is connected to the
    debugger. This is useful for remote debugging'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输限定符**：这标识了连接到调试器的机器。这对于远程调试很有用'
- en: 'Now, let’s review the toolbar items available in the **Threads** window:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下**线程**窗口中可用的工具栏项：
- en: '**Search**: This allows you to search for threads. You can toggle the **Include
    call stacks in search** button on if you want the search results to encompass
    all call stack information'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**：此功能允许您搜索线程。如果您想使搜索结果包括所有调用栈信息，可以切换**包括调用栈在搜索中**按钮'
- en: '**Flag**: With this dropdown button, you can select either **Flag Just My Code**
    or **Flag Custom Module Selection**'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记**：使用此下拉按钮，您可以选择**标记我的代码**或**标记自定义模块选择**'
- en: '**Group by**: This dropdown allows you to group threads by different fields.
    By default, they are grouped by **Process ID**'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按**：此下拉菜单允许您根据不同的字段对线程进行分组。默认情况下，它们按**进程 ID**分组'
- en: '**Columns**: This opens the **Columns** selection window so that you can customize
    the columns displayed in the **Threads** window'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列**：此操作将打开**列**选择窗口，以便您自定义在**线程**窗口中显示的列'
- en: '**Expand/Collapse callstacks**: These two buttons expand or collapse the call
    stack in the **Location** column'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展开/折叠调用栈**：这两个按钮用于展开或折叠**位置**列中的调用栈'
- en: '**Expand/Collapse groups**: These two buttons expand or collapse the thread
    groupings'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展开/折叠组**：这两个按钮用于展开或折叠线程分组'
- en: '**Freeze Threads**: This freezes all selected threads in the window'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**冻结线程**：此操作将窗口中所有选定的线程冻结'
- en: '**Thaw Threads**: This unfreezes all selected threads in the window'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解冻线程**：此操作将窗口中所有选定的线程解冻'
- en: 'Let’s try the `Anon` in the **Search** field to find the thread whose call
    stack contains our anonymous method:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在**搜索**字段中尝试使用`Anon`来找到包含我们的匿名方法的线程的调用栈：
- en: '![Figure 10.5 – Searching in the Threads window ](img/Figure_10.5_B18552.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 在线程窗口中搜索](img/Figure_10.5_B18552.jpg)'
- en: Figure 10.5 – Searching in the Threads window
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 在线程窗口中搜索
- en: The **Threads** window should now only contain the row for our **Worker Thread**
    with the **Anon** part of **AnonymousMethod** highlighted in *yellow*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，“线程”窗口应仅包含具有 **Anon** 部分突出显示为黄色 **AnonymousMethod** 的 **Worker Thread** 行。
- en: Now that you have some familiarity with the **Threads** window, let’s learn
    how to use it to switch and flag threads.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对“线程”窗口有了些了解，让我们学习如何使用它来切换和标记线程。
- en: Switching and flagging threads
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换和标记线程
- en: The **Threads** window provides so much power when debugging a multithreaded
    application. We touched on some of these features in the previous section. In
    this section, we will learn how to switch threads, flag threads, and freeze or
    thaw a thread. Let’s start by switching between threads in our **BackgroundPingConsoleApp**
    project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试多线程应用程序时，“线程”窗口提供了很多功能。在前一节中，我们提到了一些这些功能。在本节中，我们将学习如何切换线程、标记线程以及冻结或解冻线程。让我们从在
    **BackgroundPingConsoleApp** 项目中切换线程开始。
- en: Switching threads
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切换线程
- en: 'You can switch context to a different thread by using the context menu in the
    `Console.ReadLine()` statement. This is where the main thread is waiting for the
    user to press any key in the console:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在 `Console.ReadLine()` 语句中的上下文菜单中切换上下文来切换到不同的线程。这是主线程等待用户在控制台中按下任何键的地方：
- en: '![Figure 10.6 – Switching threads in the Visual Studio debugger ](img/Figure_10.6_B18552.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 在 Visual Studio 调试器中切换线程](img/Figure_10.6_B18552.jpg)'
- en: Figure 10.6 – Switching threads in the Visual Studio debugger
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 在 Visual Studio 调试器中切换线程
- en: You can see how this function could be extremely useful when debugging a parallel
    operation with half a dozen active threads or more. Next, we will learn how to
    keep an eye on a specific thread with the **Flag Thread** feature.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，当调试具有六个或更多活动线程的并行操作时，这个功能可能非常有用。接下来，我们将学习如何使用“标记线程”功能来监视特定线程。
- en: Flagging threads
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标记线程
- en: 'In this section, you will learn how to narrow your field of view while debugging
    in the **Threads** window. By only flagging the threads that we care about, we
    can reduce the clutter in the window. Here’s how to flag threads:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学习如何在“线程”窗口中缩小您的视野。通过仅标记我们关心的线程，我们可以减少窗口中的杂乱。以下是标记线程的方法：
- en: If you aren’t still debugging the **BackgroundPingConsoleApp** project, start
    debugging it now and wait for it to stop at the breakpoint.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有调试 **BackgroundPingConsoleApp** 项目，请现在开始调试它并等待它停止在断点处。
- en: While the debugger is paused in the application, right-click the **Main Thread**
    row and select **Flag**. The flag icon should now be colored *orange* in that
    row.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调试器在应用程序中暂停时，右键单击 **Main Thread** 行并选择“标记”。现在，该行的标记图标应变为橙色。
- en: Do the same for the row containing **Worker Thread** with **AnonymousMethod**
    in the call stack
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对包含 **Worker Thread** 和调用堆栈中的 **AnonymousMethod** 的行执行相同的操作
- en: 'Next, click the **Show Flagged Threads Only** button in the window’s toolbar:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在窗口的工具栏中点击“仅显示标记的线程”按钮：
- en: '![Figure 10.7 – Showing flagged threads only in the Threads window ](img/Figure_10.7_B18552.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 仅在“线程”窗口中显示标记的线程](img/Figure_10.7_B18552.jpg)'
- en: Figure 10.7 – Showing flagged threads only in the Threads window
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 仅在“线程”窗口中显示标记的线程
- en: This makes it simpler to track only the threads that are important to our current
    debugging session. You can click the button again to toggle the button off and
    view all threads. It is also possible to flag threads in the **Parallel Watch**
    and **Parallel Stacks** windows. Their flagged state will persist across all of
    these windows and the **Debug Location** toolbar.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得仅跟踪对我们当前调试会话重要的线程变得更加简单。您还可以再次单击按钮来切换按钮关闭，并查看所有线程。您还可以在“并行监视”和“并行堆栈”窗口中标记线程。它们的标记状态将跨所有这些窗口和“调试位置”工具栏保持一致。
- en: There’s an even easier way to flag these two threads in our application. These
    are the only two threads that are part of our application’s code. So, we can use
    the **Flag Just My Code** button in the toolbar to flag them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，标记这两个线程有一个更简单的方法。这两个线程是应用程序代码的唯一两个部分。因此，我们可以使用工具栏中的“仅标记我的代码”按钮来标记它们。
- en: Unselect the **Show Flagged Threads Only** toolbar button
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择“仅显示标记的线程”工具栏按钮
- en: Right-click one of the flagged rows in the window and select **Unflag All**
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口中右键单击一个标记的行，并选择“取消标记所有”
- en: 'Now, click **Flag Just My Code** in the toolbar. The same two threads will
    be flagged again:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在工具栏中点击“仅标记我的代码”。相同的两个线程将被再次标记：
- en: '![Figure 10.8 – Flagging only the threads that belong to our code ](img/Figure_10.8_B18552.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 仅标记属于我们代码的线程](img/Figure_10.8_B18552.jpg)'
- en: Figure 10.8 – Flagging only the threads that belong to our code
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 仅标记属于我们代码的线程
- en: This is much easier than selecting threads one by one in the list. It may not
    always be as obvious which threads are part of our code. In the next section,
    we will learn how to freeze a thread.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这比在列表中逐个选择线程要容易得多。可能并不总是那么明显哪些线程是我们代码的一部分。在下一节中，我们将学习如何冻结线程。
- en: Freezing threads
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 冻结线程
- en: Freezing or thawing a thread in the `SuspendThread` or `ResumeThread` Windows
    functions. If a frozen thread is not executing any code yet, it will never start
    unless it is thawed. If a thread is currently executing, it will pause when the
    **Freeze** thread is called in Visual Studio.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `SuspendThread` 或 `ResumeThread` Windows 函数中冻结或解冻线程。如果冻结的线程尚未执行任何代码，则它将永远不会启动，除非它被解冻。如果线程正在执行，则在
    Visual Studio 中调用 **Freeze** 线程时它将暂停。
- en: 'Let’s try freezing and thawing the worker thread in our **BackgroundPingConsoleApp**
    project to see what happens in the debugger:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试在我们的 **BackgroundPingConsoleApp** 项目中冻结和解冻工作线程，看看在调试器中会发生什么：
- en: Before running the application, add new breakpoints at the `while` `(true)`
    and `Console.ReadKey()` statements. Keep the existing breakpoint at `Thread.Sleep(100)`
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行应用程序之前，在 `while` `(true)` 和 `Console.ReadKey()` 语句处添加新的断点。保留现有的 `Thread.Sleep(100)`
    断点。
- en: Start debugging the application
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试应用程序
- en: When the debugger breaks on the `while (true)` line, right-click the worker
    thread that contains **AnonymousMethod** and select **Freeze**
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当调试器在 `while (true)` 行上中断时，右键单击包含 **AnonymousMethod** 的工作线程并选择 **Freeze**
- en: 'Continue debugging; it should break on the `Console.ReadKey()` line instead
    of `Thread.Sleep(100)`. This is because the worker thread is not currently running:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续调试；它应该在 `Console.ReadKey()` 行上中断，而不是在 `Thread.Sleep(100)`。这是因为工作线程当前没有运行：
- en: '![Figure 10.9 – Freezing a worker thread in the Threads window ](img/Figure_10.9_B18552.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9 – 在线程窗口中冻结工作线程](img/Figure_10.9_B18552.jpg)'
- en: Figure 10.9 – Freezing a worker thread in the Threads window
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 在线程窗口中冻结工作线程
- en: Right-click the worker thread again and select **Thaw**
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次右键单击工作线程并选择 **Thaw**
- en: Now, continue debugging again. Visual Studio breaks on the `Thread.Sleep(100)`
    line inside the anonymous method.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次继续调试。Visual Studio 在匿名方法内的 `Thread.Sleep(100)` 行上中断。
- en: This shows how the functions of the **Threads** window could be extremely useful
    while debugging a multithreaded application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了在调试多线程应用程序时 **Threads** 窗口的函数可能非常有用。
- en: Now that we have learned how to debug our multithreaded application by switching,
    freezing, and flagging threads with the **Threads** window, let’s learn how we
    can leverage additional features such as the **Parallel Stacks** and **Parallel
    Watch** windows while debugging.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经学会了如何通过切换、冻结和标记线程来使用 **Threads** 窗口调试我们的多线程应用程序，让我们学习如何在调试时利用 **Parallel
    Stacks** 和 **Parallel Watch** 窗口等附加功能。
- en: Debugging a parallel application
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试并行应用程序
- en: Visual Studio provides several windows for parallel debugging. While the `Task`
    objects in our applications.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 为并行调试提供了几个窗口。当我们的应用程序中的 `Task` 对象。
- en: We will start our tour of these features with the **Parallel Stacks** window.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先从 **Parallel Stacks** 窗口开始浏览这些功能。
- en: Using the Parallel Stacks window
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Parallel Stacks 窗口
- en: 'The **Parallel Stacks** window provides a visual representation of the threads
    or tasks in the application. These are two distinct views in the window. You can
    switch between them by selecting **Threads** or **Tasks** in the **View** dropdown
    box. The following screenshot shows an example of the **Threads** view while debugging
    the **BackgroundPingConsoleApp** project:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**Parallel Stacks** 窗口提供了应用程序中线程或任务的视觉表示。这些是窗口中的两种不同视图。您可以通过在 **View** 下拉框中选择
    **Threads** 或 **Tasks** 在它们之间切换。以下屏幕截图显示了在调试 **BackgroundPingConsoleApp** 项目时
    **Threads** 视图的一个示例：'
- en: '![Figure 10.10 – Viewing the Parallel Stacks window in the Threads view ](img/Figure_10.10_B18552.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10 – 在线程视图中查看 Parallel Stacks 窗口](img/Figure_10.10_B18552.jpg)'
- en: Figure 10.10 – Viewing the Parallel Stacks window in the Threads view
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 在线程视图中查看 Parallel Stacks 窗口
- en: 'The **Parallel Stacks** window contains a toolbar with the following items
    from left to right. You can follow along by examining the tooltips for the toolbar
    items in the window in Visual Studio:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**Parallel Stacks** 窗口包含一个工具栏，从左到右有以下项目。您可以通过检查 Visual Studio 窗口中工具栏项的工具提示来跟随：'
- en: '**Search**: This allows the same type of search functionality that is available
    in the **Threads** window. It has the **Find Previous** and **Find Next** buttons
    to the right of the **Search** field.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索**：此选项允许在**线程**窗口中可用的相同类型的搜索功能。它具有位于**搜索**字段右侧的**查找上一个**和**查找下一个**按钮。'
- en: '**View**: This dropdown switches between the **Threads** and **Tasks** views'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图**：此下拉菜单在**线程**视图和**任务**视图之间切换。'
- en: '**Show Only Flagged**: This toggle will hide any threads that are not flagged'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仅显示标记**：此切换将隐藏任何未标记的线程。'
- en: '**Toggle Method View**: This will switch to a view of the currently selected
    method and its call stack'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换方法视图**：此选项将切换到当前选定方法及其调用堆栈的视图。'
- en: '**Auto Scroll to Current Stack Frame**: This will scroll the current stack
    frame into view in the diagram while stepping through the debugger. This option
    is toggled on by default.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动滚动到当前堆栈帧**：在通过调试器逐步执行时，此选项将当前堆栈帧滚动到图中。此选项默认开启。'
- en: '**Toggle Zoom Control**: This hides or shows the zoom control on the diagram’s
    surface. This option is turned on by default.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**切换缩放控制**：此选项将隐藏或显示图表面上的缩放控制。此选项默认开启。'
- en: '**Reverse Layout**: This option mirrors the layout of the current view'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反向布局**：此选项将当前视图的布局进行镜像。'
- en: '`.png` file'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.png`文件'
- en: 'To examine the `Task` objects. Let’s work with the **Tasks** view by opening
    a project from a previous chapter in the book:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查`Task`对象。让我们通过打开书中前一章的项目来与**任务**视图一起工作：
- en: 'Open your **TaskSamples** project from [*Chapter 5*](B18552_05_ePub.xhtml#_idTextAnchor082),
    or get a copy of this project from this chapter’s source code on GitHub: [https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10).'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[*第5章*](B18552_05_ePub.xhtml#_idTextAnchor082)打开您的**TaskSamples**项目，或者从本章源代码在GitHub上的此项目获取副本：[https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10](https://github.com/PacktPublishing/Parallel-Programming-and-Concurrency-with-C-sharp-10-and-.NET-6/tree/main/chapter10)。
- en: Open `Examples.cs` and set a breakpoint on the first line of the `ProcessOrders`
    method.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Examples.cs`并在`ProcessOrders`方法的第一行设置断点。
- en: Start debugging. When the debugger stops on the breakpoint, select **Debug**
    | **Windows** | **Parallel Stacks**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开始调试。当调试器在断点上停止时，选择**调试** | **窗口** | **并行堆栈**。
- en: 'Switch to the **Tasks** view in the **Parallel Stacks** window:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**并行堆栈**窗口中切换到**任务**视图：
- en: '![Figure 10.11 – The Parallel Stacks window in the Tasks view ](img/Figure_10.11_B18552.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![图10.11 – 任务视图中的并行堆栈窗口](img/Figure_10.11_B18552.jpg)'
- en: Figure 10.11 – The Parallel Stacks window in the Tasks view
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 – 任务视图中的并行堆栈窗口
- en: No tasks have been started yet, so there isn’t much to see here. There is a
    single **Async Logical Stack** block that looks like it is ready to start analyzing
    some async work.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 尚未启动任何任务，因此这里没有太多可看的。有一个看起来准备开始分析一些异步工作的单个**异步逻辑堆栈**块。
- en: Add a breakpoint on the `Tasks.WaitAll` statement and click **Continue**
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Tasks.WaitAll`语句上设置断点并点击**继续**
- en: Note
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'It is possible to configure breakpoints in Visual Studio by right-clicking
    on the breakpoint you want to modify and clicking `ThreadId` or `ThreadName` values.
    This will ensure that the debugger will only stop on the current breakpoint when
    the desired thread(s) are executing that line of code. To read more about breakpoint
    conditions and filters, check out this article on Microsoft Docs: [https://docs.microsoft.com/visualstudio/debugger/using-breakpoints#set-a-filter-condition](https://docs.microsoft.com/visualstudio/debugger/using-breakpoints#set-a-filter-condition).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在Visual Studio中右键单击要修改的断点并单击`ThreadId`或`ThreadName`值来配置断点。这将确保当所需的线程（线程）执行该行代码时，调试器仅在当前断点上停止。要了解更多关于断点条件和筛选器的信息，请查看Microsoft
    Docs上的这篇文章：[https://docs.microsoft.com/visualstudio/debugger/using-breakpoints#set-a-filter-condition](https://docs.microsoft.com/visualstudio/debugger/using-breakpoints#set-a-filter-condition)。
- en: 'Now, examine the **Parallel Stacks** window again:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次检查**并行堆栈**窗口：
- en: '![Figure 10.12 – The Parallel Stacks window while tasks are active ](img/Figure_10.12_B18552.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图10.12 – 任务活动时的并行堆栈窗口](img/Figure_10.12_B18552.jpg)'
- en: Figure 10.12 – The Parallel Stacks window while tasks are active
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12 – 任务活动时的并行堆栈窗口
- en: Note
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It can be challenging to catch the tasks in this window while they are still
    executing if they are fast-running methods. You may have to run the application
    several times to hit this breakpoint if one or more of the `Task` objects has
    not been completed yet.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是快速运行的方法，在它们仍在执行时捕捉这个窗口中的任务可能会很具挑战性。如果你有一个或多个`Task`对象尚未完成，你可能需要运行应用程序几次才能触碰到这个断点。
- en: 'In this case, the **Parallel Stacks** window has captured the execution of
    one running task and another preparing to run. There are some differences between
    this **Tasks** view and some of the thread analysis we have done in this chapter:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，**Parallel Stacks**窗口已捕获了一个正在运行的任务和另一个准备运行的任务的执行。与本章中我们进行的某些线程分析相比，这个**Tasks**视图有一些不同：
- en: Only actively running tasks are shown in the **Tasks** view
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tasks**视图中只显示正在运行的任务'
- en: The **Tasks** view’s stack attempts to display only the relevant call stack
    information. Stack frames may be trimmed from the top and bottom if they are not
    relevant. If you need to see the entire call stack, switch back to the **Threads**
    view.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tasks**视图的堆栈尝试仅显示相关的调用堆栈信息。如果堆栈帧不相关，则可能从顶部和底部进行裁剪。如果你需要查看整个调用堆栈，请切换回**Threads**视图。'
- en: A separate block is displayed for each active task in the **Tasks** view, even
    if they are assigned to the same thread.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tasks**视图中为每个活动任务显示一个单独的块，即使它们被分配到同一个线程。'
- en: 'You can hover over a line in a task’s call stack to view more information about
    its thread and stack frame:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以悬停在任务调用堆栈中的一行上，以查看有关其线程和堆栈帧的更多信息：
- en: '![Figure 12.13 – Viewing more information about a call stack frame ](img/Figure_10.13_B18552.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 查看调用堆栈帧的更多信息](img/Figure_12.13_B18552.jpg)'
- en: Figure 12.13 – Viewing more information about a call stack frame
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 查看调用堆栈帧的更多信息
- en: 'If you want to pivot the **Tasks** view to a particular method, you can use
    the **Toggle Method View** button:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将**Tasks**视图旋转到特定的方法，你可以使用**切换方法视图**按钮：
- en: Start a new debugging session in the **TaskSamples** project
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**TaskSamples**项目中启动一个新的调试会话
- en: Set a new breakpoint on the `return orders` statement in the `PrepareOrders`
    method
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PrepareOrders`方法中的`return orders`语句上设置一个新的断点
- en: Click `PrepareOrders` method.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`PrepareOrders`方法。
- en: 'Click the `PrepareOrders` method to get more call stack and thread information:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`PrepareOrders`方法以获取更多的调用堆栈和线程信息：
- en: '![Figure 10.14 – Leveraging the Method View area of the Parallel Stacks window
    ](img/Figure_10.14_B18552.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14 – 利用并行堆栈窗口的方法视图区域](img/Figure_10.14_B18552.jpg)'
- en: Figure 10.14 – Leveraging the Method View area of the Parallel Stacks window
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14 – 利用并行堆栈窗口的方法视图区域
- en: Next, we will learn how to view the state of variables across different threads
    by using the **Parallel Watch** window.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何通过使用**并行监视**窗口来查看不同线程中变量的状态。
- en: Using the Parallel Watch window
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用并行监视窗口
- en: The **Parallel Watch** window is similar to the **Watch** window in Visual Studio,
    but it displays additional information about the value of the watched expression
    across the threads with access to the data in the expression.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**Parallel Watch**窗口类似于Visual Studio中的**监视**窗口，但它显示有关监视表达式的值在具有访问表达式中数据的线程中的额外信息。'
- en: 'In this example, we will modify the `Examples` class in the **TaskSamples**
    project to add a state that will be available to multiple threads:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将修改**TaskSamples**项目中的`Examples`类以添加一个将可供多个线程使用的状态：
- en: 'Start by adding a private variable to the `Examples` class:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，向`Examples`类添加一个私有变量：
- en: '[PRE0]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add a line to `ProcessOrders` to assign orders to `_sharedOrders`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ProcessOrders`中添加一行代码以将订单分配给`_sharedOrders`：
- en: '[PRE1]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Keep the breakpoints from the previous example and start debugging. Continue
    until the debugger breaks on the `return orders` statement inside `ProcessOrders`.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持上一个示例中的断点并开始调试。继续直到调试器在`ProcessOrders`内部的`return orders`语句上中断。
- en: Select **Debug** | **Windows** | **Parallel Watch 1** to open the **Parallel
    Watch 1** window. You can open up to four **Parallel Watch** windows to separate
    your watched expressions.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**调试** | **窗口** | **并行监视1**以打开**并行监视1**窗口。你可以打开多达四个**并行监视**窗口来分离你的监视表达式。
- en: 'In the `_sharedOrders` private variable:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`_sharedOrders`私有变量中：
- en: '![Figure 10.15 – Adding a watched expression in Parallel Watch 1 window ](img/Figure_10.15_B18552.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15 – 在并行监视1窗口中添加监视表达式](img/Figure_10.15_B18552.jpg)'
- en: Figure 10.15 – Adding a watched expression in Parallel Watch 1 window
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15 – 在并行监视1窗口中添加监视表达式
- en: The window indicates that `_sharedOrders` in scope and that the count of orders
    in the variable is `0`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口指示作用域内的`_sharedOrders`以及变量中订单的数量为`0`。
- en: 'Right-click on **Main Thread** in the **Threads** window and select **Switch
    to Thread**. In the **Parallel Watch 1** window, a task is no longer in scope,
    so the header label has changed from **Task** to **Thread**, and the **ID** property
    of **Main Thread** will be displayed:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**线程**窗口中右键单击**主线程**并选择**切换到线程**。在**并行监视1**窗口中，任务不再在作用域内，因此标题标签已从**任务**更改为**线程**，并且**主线程**的**ID**属性将显示：
- en: '![Figure 10.16 – Viewing the watched variable on Main Thread ](img/Figure_10.16_B18552.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图10.16 – 在主线程上查看监视的变量](img/Figure_10.16_B18552.jpg)'
- en: Figure 10.16 – Viewing the watched variable on Main Thread
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16 – 在主线程上查看监视的变量
- en: 'Finally, select **Debug** | **Windows** | **Tasks** to open the **Tasks** window:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择**调试** | **窗口** | **任务**以打开**任务**窗口：
- en: '![Figure 10.17 – Viewing the Tasks window while debugging ](img/Figure_10.17_B18552.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图10.17 – 在调试时查看任务窗口](img/Figure_10.17_B18552.jpg)'
- en: Figure 10.17 – Viewing the Tasks window while debugging
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17 – 在调试时查看任务窗口
- en: 'The **Tasks** window will show information about the tasks in scope in the
    debugging session. The following columns are displayed in the window:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**任务**窗口将显示调试会话中作用域内的任务信息。以下列在窗口中显示：'
- en: '**Flag**: An icon indicating whether the current task has been flagged. You
    can click this field to flag or unflag a task.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记**：一个图标表示当前任务是否已被标记。您可以单击此字段来标记或取消标记任务。'
- en: '**ID**: The ID of the task'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ID**：任务的ID'
- en: '`Task.Status` properties of the task'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Task.Status`任务属性'
- en: '**Start Time (sec)**: This indicates how many seconds into the debugging session
    the task started'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开始时间（秒）**：这表示任务在调试会话中开始的时间'
- en: '**Duration (sec)**: This indicates how long the task has been running'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间（秒）**：这表示任务运行了多长时间'
- en: '**Location**: This shows the call stack’s position for the task on the thread'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：这显示了任务在线程上的调用栈位置'
- en: '**Task**: The initial method where the task started. Any parameters that have
    been passed will also be shown in this field.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：任务开始的初始方法。在此字段中也会显示已传递的任何参数。'
- en: 'Several other hidden fields can be shown by right-clicking in the window and
    selecting **Columns**:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在窗口中右键单击并选择**列**，可以显示几个其他隐藏字段：
- en: '![Figure 10.18 – Adding or removing columns from the Tasks window ](img/Figure_10.18_B18552.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图10.18 – 在任务窗口中添加或删除列](img/Figure_10.18_B18552.jpg)'
- en: Figure 10.18 – Adding or removing columns from the Tasks window
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.18 – 在任务窗口中添加或删除列
- en: You can sort and group the tasks in the **Tasks** window similar to how the
    **Threads** window works. The difference is that the **Tasks** window does not
    have a toolbar. All operations are performed with the right-click context menu.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**任务**窗口中对任务进行排序和分组，类似于**线程**窗口的工作方式。区别在于**任务**窗口没有工具栏。所有操作都通过右键单击上下文菜单执行。
- en: 'The other tool you can use while debugging parallel .NET code is the **Debug
    Location** toolbar. If it is not already displayed in Visual Studio, you can open
    it by going to **View** | **Toolbars** | **Debug Location**. While you’re debugging,
    the toolbar functionality lights up:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试并行.NET代码时，你可以使用的另一个工具是**调试位置**工具栏。如果它尚未在Visual Studio中显示，你可以通过转到**视图** |
    **工具栏** | **调试位置**来打开它。在调试过程中，工具栏功能会亮起：
- en: '![Figure 10.19 – Viewing the Debug Location toolbar while debugging  ](img/Figure_10.19_B18552.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图10.19 – 在调试时查看调试位置工具栏](img/Figure_10.19_B18552.jpg)'
- en: Figure 10.19 – Viewing the Debug Location toolbar while debugging
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.19 – 在调试时查看调试位置工具栏
- en: From the toolbar, you can select the active **Process**, **Thread**, and **Stack
    Frame**. It’s also easy to toggle the flagged state of the currently selected
    thread.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 从工具栏中，你可以选择活动的**进程**、**线程**和**堆栈帧**。切换当前所选线程的标记状态也很容易。
- en: That completes our tour of the debug windows available to .NET parallel programmers.
    Let’s wrap up by reviewing everything we learned in this chapter.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对.NET并行程序员可用的调试窗口的游览。让我们通过回顾本章所学内容来结束。
- en: Summary
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the Visual Studio features available to multithreaded
    application developers. We started by working with threads in the `Thread` objects.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了多线程应用程序开发者可用的Visual Studio功能。我们首先通过`Thread`对象处理线程。
- en: Next, we learned how to switch, flag, and freeze our threads while debugging.
    Finally, we looked at some of the advanced debugging tools for developers who
    are using `Task` objects or `async`/`await` in their code. The **Parallel Stacks**
    and **Parallel Watch** windows take task debugging to the next level. Finally,
    we took a quick look at the **Tasks** window and the **Debug Location** toolbar.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了如何在调试时切换、标记和冻结我们的线程。最后，我们查看了一些针对使用代码中的`Task`对象或`async`/`await`的开发者的高级调试工具。**并行堆栈**和**并行监视**窗口将任务调试提升到了新的水平。最后，我们快速浏览了**任务**窗口和**调试位置**工具栏。
- en: In the next chapter, [*Chapter 11*](B18552_11_ePub.xhtml#_idTextAnchor173),
    we will dive deeper into the different methods available to cancel concurrent
    and parallel work with .NET.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第11章*](B18552_11_ePub.xhtml#_idTextAnchor173)，我们将深入探讨使用.NET取消并发和并行工作的不同方法。
- en: Questions
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How can you debug multiple processes in Visual Studio?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在Visual Studio中调试多个进程？
- en: What is the default grouping of threads in the **Threads** window?
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**线程**窗口中线程的默认分组是什么？'
- en: How can you add more columns to the **Tasks** or **Threads** window?
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何向**任务**或**线程**窗口添加更多列？
- en: Which debug window displays a visual representation of the current threads or
    tasks?
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个调试窗口显示当前线程或任务的视觉表示？
- en: What file format can you export from the **Parallel Stacks** window?
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以从**并行堆栈**窗口导出哪种文件格式？
- en: How many **Parallel Watch** windows can you open?
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以打开多少个**并行监视**窗口？
- en: Which Visual Studio toolbar provides information about the processes and threads
    you are currently debugging?
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Visual Studio工具栏提供有关你当前正在调试的进程和线程的信息？
- en: How can you filter the **Threads** window to only show the threads that have
    been created for your code?
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何过滤**线程**窗口，只显示为你的代码创建的线程？
