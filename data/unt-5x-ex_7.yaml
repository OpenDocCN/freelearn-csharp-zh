- en: Chapter 7. Project D – Intelligent Enemies
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章项目D – 智能敌人
- en: 'In this chapter, we''ll start the final project, which will cover extensive
    ground. This project, unlike the previous three, will not be a fully completed
    game with a clear win and loss condition but will be a functional prototype and
    *proof of concept* style project that highlights a range of important coding techniques
    and ideas prevalent in games. Specifically, we''ll create a world with a terrain,
    first-person character, and some enemies. The enemies will have **Artificial Intelligence**
    (**AI**), patrol the level searching for the player, and attack the player when
    found. In this chapter, we will explore the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始最终项目，该项目将涵盖广泛的地面。与前面的三个项目不同，这个项目将不是一个完整的游戏，没有明确的胜负条件，而将是一个功能原型和*概念验证*风格的项目，突出显示游戏中普遍存在的一系列重要编码技术和思想。具体来说，我们将创建一个包含地形、第一人称角色和一些敌人的世界。敌人将具有**人工智能**（**AI**），在关卡中巡逻寻找玩家，并在找到玩家时攻击玩家。在本章中，我们将探讨以下主题：
- en: How to build levels and landscapes with the Terrain tools
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用地形工具构建关卡和景观
- en: How to generate and use navigation meshes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何生成和使用导航网格
- en: How to prepare for Artificial Intelligence development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何为人工智能开发做准备
- en: Note
  id: totrans-5
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The starting project and assets can be found in the book companion files in
    the `Chapter07/Start` folder. You can start here and follow along with this chapter
    if you do not have your own project already.
  id: totrans-6
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 起始项目和资产可以在本书配套文件中的`Chapter07/Start`文件夹中找到。如果您还没有自己的项目，可以从这里开始，并跟随本章进行。
- en: An overview of the project
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: 'The project to be created is a first-person prototype in which the player character
    can wander and explore a terrain environment. The terrain features hills, valleys,
    and varied terrain elements. Among the terrain will be scattered several enemy
    characters (NPCs). Each character features artificial intelligence. Specifically,
    each character will wander around (Patrol mode) searching for the player. If the
    player is sighted, the NPC will chase and pursue the player (Chase mode). If,
    during the chase, the enemy loses sight of the player, they will return to patrolling.
    On the other hand, if the enemy approaches the player during the chase, the enemy
    will attack the player (Attack mode). In short, therefore, the AI features three
    main states: Patrol, Chase, and Attack. This, in short, constitutes the enemy
    AI and represents the main challenge for the player on this project. See *Figure
    7.1* for the completed project:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建的项目是一个第一人称原型，玩家角色可以在其中漫步和探索地形环境。地形包括山丘、山谷和多种地形元素。在地形中会散布几个敌人角色（NPC）。每个角色都具备人工智能。具体来说，每个角色会在周围徘徊（巡逻模式）寻找玩家。如果发现玩家，NPC
    将会追逐和追击玩家（追逐模式）。如果在追逐过程中，敌人失去了玩家的视线，他们将会返回巡逻。另一方面，如果在追逐过程中敌人接近玩家，敌人将会攻击玩家（攻击模式）。简而言之，因此，AI
    具有三个主要状态：巡逻、追逐和攻击。这，简而言之，构成了敌人的 AI，并代表了玩家在这个项目中的主要挑战。参见*图7.1*中完成的项目：
- en: '![An overview of the project](img/B05118_07_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![项目概述](img/B05118_07_01.jpg)'
- en: 'Figure 7.1: Building a world of intelligent NPCs'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：构建智能NPC的世界
- en: Getting started
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始
- en: 'To get started from the beginning, create a new project. The details on this
    are covered amply in all previous chapters. Throughout this project, we''ll be
    using three main asset packages included with Unity. Specifically, these are Characters,
    Effects, and Environment. These can be imported via the application menu, through
    **Assets** | **Import Packages**. See *Figure 7.2*:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要从头开始，创建一个新的项目。关于这方面的详细信息在前面的所有章节中都有充分的介绍。在整个项目中，我们将使用 Unity 包含的三个主要资产包。具体来说，这些是角色、效果和环境。这些可以通过应用程序菜单导入，通过**资产**
    | **导入包**。参见*图7.2*：
- en: '![Getting started](img/B05118_07_02.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![开始](img/B05118_07_02.jpg)'
- en: 'Figure 7.2: Importing asset packages'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：导入资产包
- en: 'To start, we''ll need to create the game world itself (the terra firma), which
    will be an outdoor (exterior) environment. In other words, we''ll create a game
    world with grassy plains, hills, and mountains. Such a landscape can be made in
    3D modeling software, such as 3DS Max, Maya, or Blender, and then imported to
    Unity. However, Unity features native terrain design tools that, though limited
    in important ways (as we''ll see), are still powerful and versatile. To create
    a new terrain, navigate to **GameObject** | **3D Object** | **Terrain** from the
    application menu. See *Figure 7.3*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要创建游戏世界本身（即陆地），这将是一个户外（外部）环境。换句话说，我们将创建一个拥有草原、丘陵和山脉的游戏世界。这样的景观可以在3D建模软件中创建，例如3DS
    Max、Maya或Blender，然后导入到Unity中。然而，Unity具有本地的地形设计工具，尽管在某些重要方面有限（我们将在后面看到），但仍然功能强大且灵活。要创建新的地形，从应用程序菜单导航到**GameObject**
    | **3D Object** | **Terrain**。参见*图7.3*：
- en: '![Getting started](img/B05118_07_03.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![入门](img/B05118_07_03.jpg)'
- en: 'Figure 7.3: Creating a new terrain'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：创建新的地形
- en: 'Once created, a terrain object is added to the scene at the world origin (0,0,0).
    It may not immediately appear in the viewport due to its size. To address this,
    select the terrain in the **Hierarchy** panel and then press *F* on the keyboard
    to center it in the view. It initially looks like a flat plane object but, unlike
    planes, it can be reshaped and sculpted, as we''ll see soon. *See Figure 7.4*:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，地形对象将添加到场景中的世界原点（0,0,0）。由于其尺寸，它可能不会立即出现在视图中。要解决这个问题，在**层次结构**面板中选择地形，然后在键盘上按*F*键将其居中在视图中。它最初看起来像一个平坦的平面对象，但与平面不同，它可以被重塑和雕刻，正如我们很快将看到的。*参见图7.4*：
- en: '![Getting started](img/B05118_07_04.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![入门](img/B05118_07_04.jpg)'
- en: 'Figure 7.4: A terrain is added to the scene'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：将地形添加到场景中
- en: 'Before sculpting and shaping the terrain, you should first set some initial
    topological settings from the **Object Inspector** in order to ensure that terrain
    topology is appropriate and sized to support the kind of terrain you need. To
    do this, select the terrain in the viewport, and then click on the cog icon from
    the **Object Inspector** to display the terrain settings. See *Figure 7.5*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在雕刻和塑造地形之前，您应该首先从**对象检查器**中设置一些初始拓扑设置，以确保地形拓扑适合并且大小适中，以支持您所需的地形类型。为此，在视图中选择地形，然后点击**对象检查器**中的齿轮图标以显示地形设置。参见*图7.5*：
- en: '![Getting started](img/B05118_07_05.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![入门](img/B05118_07_05.jpg)'
- en: 'Figure 7.5: Viewing and editing the terrain settings'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：查看和编辑地形设置
- en: By default, the terrain is too large for most purposes (500 x 500 meters). Let's
    shrink this to 256 x 256, or even smaller, if you prefer! Simply enter `256` in
    the **Width** and **Length** fields. The **Height** field represents the maximum
    height that any terrain peak or mountain can possibly reach. For optimization
    reasons, the terrain should be no larger than needed, as terrain objects are highly
    tessellated and performance-intensive. See *Figure 7.6*. Be sure to set the terrain
    dimensions before sculpting as resizing afterward can invalidate or erase sculpting
    work.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，地形对于大多数用途来说太大（500 x 500米）。让我们将其缩小到256 x 256，或者如果您喜欢，甚至更小！只需在**宽度**和**长度**字段中输入`256`。**高度**字段表示任何地形山峰或山脉可能达到的最大高度。出于优化原因，地形不应超过所需的大小，因为地形对象高度细分且性能密集。参见*图7.6*。在雕刻之前务必设置地形尺寸，因为之后调整大小可能会使雕刻工作无效或被删除。
- en: '![Getting started](img/B05118_07_06.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![入门](img/B05118_07_06.jpg)'
- en: 'Figure 7.6: Setting terrain resolution in width and length'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：设置地形的宽度和长度分辨率
- en: Terrain construction
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 地形构建
- en: Now let's start sculpting the terrain. With the terrain object selected, click
    the leftmost palette icon from the **Object Inspector** (the Raise/Lower terrain
    tool), available from the Terrain component. This lets you select brush shapes
    to paint terrain details. Select a soft, round brush and use a large brush size
    (using the **Brush Size** slider), along with the **Opacity** setting to set brush
    strength. Click and drag over the terrain to paint landscape details. Create some
    hills and mountains for the landscape. See *Figure 7.7*. Remember, you can hold
    down the *Shift* key while clicking to reverse (or lower) the terrain painting,
    if needed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始雕刻地形。选择地形对象后，点击**对象检查器**中最左侧的调色板图标（提升/降低地形工具），该工具来自地形组件。这允许您选择画笔形状来绘制地形细节。选择一个柔软的圆形画笔，并使用大画笔尺寸（使用**画笔大小**滑块），以及**不透明度**设置来设置画笔强度。在地面上点击并拖动以绘制景观细节。为景观创建一些丘陵和山脉。参见*图7.7*。记住，如果您需要，可以在点击时按住*Shift*键来反转（或降低）地形绘制。
- en: '![Terrain construction](img/B05118_07_07.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_07.jpg)'
- en: 'Figure 7.7: Viewing and editing the terrain settings'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：查看和编辑地形设置
- en: If the terrain appears too rough to be natural, you can easily smooth out details
    by switching to the **Smooth Height** tool. To do this, click on the third button
    in the **Terrain** component. See *Figure 7.8*. When you select this tool, you
    can choose the **Brush Shape**, **Brush Size**, and **Opacity** as before, but
    clicking over the terrain will smooth out variations in terrain height.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果地形看起来过于粗糙而不自然，您可以通过切换到**平滑高度**工具轻松地平滑出细节。为此，点击**地形**组件中的第三个按钮。参见*图7.8*。当您选择此工具时，您可以选择与之前相同的**刷形**、**刷大小**和**不透明度**，但点击在地形上将会平滑出地形高度的变化。
- en: '![Terrain construction](img/B05118_07_08.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_08.jpg)'
- en: 'Figure 7.8: Accessing the Smooth Height tool'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：访问平滑高度工具
- en: 'Now that the terrain is sculpted, shaped, and smooth as needed, we''re ready
    to start painting it. As it stands, the terrain is grey, dull, and under-defined.
    It has no clear texture or *look*, such as grass or rock. We''ll fix this using
    the **Paint Texture** tool. To access this, click on the **Paint Texture** button
    (fourth button) in the **Terrain** component from the **Object Inspector**. When
    you do this for the first time, you''ll need to load in and prepare a set of textures
    for the painting. See *Figure 7.9*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在地形已经雕刻、塑形并达到所需的平滑度，我们准备开始绘制它。目前，地形是灰色、暗淡且定义不清晰。它没有清晰的纹理或*外观*，如草地或岩石。我们将使用**绘制纹理**工具来解决这个问题。要访问此工具，请从**对象检查器**中点击**地形**组件的**绘制纹理**按钮（第四个按钮）。当您第一次这样做时，您需要加载并准备一套纹理用于绘制。参见*图7.9*：
- en: '![Terrain construction](img/B05118_07_09.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_09.jpg)'
- en: 'Figure 7.9: Preparing textures for terrain painting'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9：为地形绘制准备纹理
- en: 'Click on the **Edit Textures** button, and then select **Add Texture…** from
    the context menu that appears. Afterward, a texture configuration dialog appears,
    allowing you to add new textures to a palette. See *Figure 7.10*:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**编辑纹理**按钮，然后从出现的上下文菜单中选择**添加纹理…**。之后，将出现一个纹理配置对话框，允许您将新纹理添加到调色板中。参见*图7.10*：
- en: '![Terrain construction](img/B05118_07_10.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_10.jpg)'
- en: 'Figure 7.10: Adding textures to the Texture Paint palette'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10：将纹理添加到纹理绘制调色板
- en: 'With the **Texture Selection** dialog open and ready to load our first texture,
    use the **Project** panel to find the native terrain textures included with the
    Unity Environment asset package. These can be found in the **Standard Assets**
    | **Environment** | **TerrainAssets** | **SurfaceTextures** folder. For this example,
    I''ll select a grassy texture. This texture will be used as a base texture to
    flood-fill the terrain. Click and drag the grass texture from the **Project**
    panel to the Albedo slot of the **Texture Selection** dialog. The normal channel
    can be left empty. See *Figure 7.11*:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在**纹理选择**对话框打开并准备好加载我们的第一个纹理时，使用**项目**面板查找Unity环境资产包中包含的本地地形纹理。这些可以在**标准资产**
    | **环境** | **地形资产** | **表面纹理**文件夹中找到。在这个例子中，我将选择一个草地纹理。这个纹理将被用作基础纹理来填充地形。将草地纹理从**项目**面板拖动到**纹理选择**对话框的Albedo槽中。法线通道可以留空。参见*图7.11*：
- en: '![Terrain construction](img/B05118_07_11.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_11.jpg)'
- en: 'Figure 7.11: Selecting a base texture'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11：选择基础纹理
- en: 'After adding the first texture to the **Texture Selection** dialog, be sure
    to set the texture size. This refers to the size (in meters) that a single tile
    of the texture should cover. Smaller values decrease texture tiling but make each
    tile seem larger. Larger values increase texture tiling but each tile seems smaller.
    Getting the tiling values correct is a process of trial and error—tweaking values
    until it looks correct on the terrain. For this example, I''ve used the values
    75 x 75\. Then, click on the **Add** button. See *Figure 7.12*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在**纹理选择**对话框中添加第一个纹理后，务必设置纹理大小。这指的是纹理单块应该覆盖的大小（以米为单位）。较小的值会减少纹理平铺，但会使每个纹理块看起来更大。较大的值会增加纹理平铺，但每个纹理块看起来更小。正确设置平铺值是一个试错的过程——调整值直到在地形上看起来正确。在这个例子中，我使用了75
    x 75的值。然后，点击**添加**按钮。参见*图7.12*：
- en: '![Terrain construction](img/B05118_07_12.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_12.jpg)'
- en: 'Figure 7.12: Setting texture tile Size'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：设置纹理平铺大小
- en: After clicking on the **Add** button, the base texture will be tiled across
    the terrain. From a distance, the tiling may look obvious and unpleasant in the
    scene viewport. You may be tempted, on the basis of this, to adjust the tiling
    settings. However, from a first-person perspective, the terrain will look very
    different. For this reason, use a First-person Controller prefab (from the native
    assets) to preview the terrain in first-person mode, seeing how texture tiling
    appears at ground-level.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在单击**添加**按钮后，基础纹理将平铺在地形上。从远处看，平铺在地景视图中可能看起来很明显且不愉快。基于这一点，您可能会想调整平铺设置。然而，从第一人称视角来看，地形看起来会非常不同。因此，使用来自原生资源的First-person
    Controller预制件（prefab）来以第一人称模式预览地形，查看纹理平铺在地面的外观。参见图7.15：
- en: '![Terrain construction](img/B05118_07_13.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_13.jpg)'
- en: 'Figure 7.13: Previewing texture tiling on a terrain'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：在地形上预览纹理平铺
- en: If you need to edit the existing texture tiling, simply select the texture thumbnail
    from the **Textures** palette in the **Terrain** component of the **Object Inspector**,
    and then choose the **Edit Textures** button. Refer to the preceding *Figure 7.10*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要编辑现有的纹理平铺，只需从**对象检查器**中的**地形**组件的**纹理**调色板中选择纹理缩略图，然后选择**编辑纹理**按钮。参见图7.10。
- en: 'At this stage, the terrain object features a grass texture, tiled seamlessly
    across the surface, which is the base texture. While this looks acceptable, it''d
    be great to include greater texture variety in the terrain, including some grassy,
    rocky, and maybe even desert style terrain. This is achieved by adding more textures
    via the **Terrain Selection** dialog. Just click on the **Edit Textures** button,
    and then choose **Add Texture** from the context menu. Then, drag and drop a new
    and different texture to the Albedo slot of the texture selection dialog, and
    finally repeat this process to add as many textures as needed. On closing the
    dialog, all added textures will appear in the **Textures Palette** from the **Object
    Inspector**. See *Figure 7.14*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，地形对象具有草地纹理，无缝地平铺在整个表面上，这是基础纹理。虽然这看起来可以接受，但包括更多纹理在地形中会更好，包括一些草地、岩石，甚至可能还有沙漠风格的纹理。这是通过通过**地形选择**对话框添加更多纹理来实现的。只需单击**编辑纹理**按钮，然后从上下文菜单中选择**添加纹理**。然后，将新的不同纹理拖放到纹理选择对话框的Albedo槽中，并最终重复此过程以添加所需的所有纹理。关闭对话框后，所有添加的纹理都将出现在**对象检查器**的**纹理调色板**中。参见图7.14：
- en: '![Terrain construction](img/B05118_07_14.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_14.jpg)'
- en: 'Figure 7.14: Adding textures to the Texture Palette'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：向纹理调色板添加纹理
- en: 'The active texture assigned to the painter brush is highlighted with a blue
    border in the **Inspector**. You can click on a texture thumbnail to select a
    different texture. When you do this, the selected texture is assigned to the painter
    brush and can be applied to the terrain just by clicking on it. Clicking and dragging
    on the terrain will paint the texture to the terrain. You can also use the **Brush
    Shape**, **Brush Size**, **Opacity**, and **Target Strength** values to control
    how strongly the texture is applied and how it is blended into the terrain beneath.
    See *Figure 7.15*:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给画笔刷的当前纹理在**检查器**中以蓝色边框突出显示。您可以通过单击纹理缩略图来选择不同的纹理。当您这样做时，所选纹理将被分配给画笔刷，并且只需单击即可将其应用于地形。在地面上单击并拖动将纹理绘制到地面上。您还可以使用**刷形状**、**刷大小**、**不透明度**和**目标强度**值来控制纹理的强度以及它如何与地下的地形混合。参见图7.15：
- en: '![Terrain construction](img/B05118_07_15.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_15.jpg)'
- en: 'Figure 7.15: Layered painting and blended textures'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：分层绘制和混合纹理
- en: 'Now, go ahead and complete terrain painting, creating a look and feel that
    you like. Once completed, select the scene **Directional Light** from the **Hierarchy**
    panel and change its rotation to position the sun wherever it looks good. As an
    aside, notice that you can control a complete day and night cycle (in terms of
    lighting and appearance) by rotating the light a complete 360 degrees. Therefore,
    you can create an easy day and night cycle for games just by animating a directional
    light using the **Animation** window, seen in earlier chapters. See *Figure 7.16*:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，继续完成地形绘制，创建一个您喜欢的视觉效果。完成后，从**层次结构**面板中选择场景的**方向光**，并更改其旋转以定位太阳的位置。顺便说一句，请注意，您可以通过旋转光线360度来控制完整的一天和夜晚周期（就光照和外观而言）。因此，您可以通过使用前面章节中看到的**动画**窗口来动画化方向光，为游戏创建一个简单的日夜周期。参见图7.16：
- en: '![Terrain construction](img/B05118_07_16.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_16.jpg)'
- en: 'Figure 7.16: Completed terrain'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.16：完成的地形
- en: 'Finally, take a tour of the terrain using a first-person controller asset.
    Press the play icon on the toolbar and explore around the level! Congratulations,
    you now have a game world with a terrain included. See *Figure 7.17*:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用第一人称控制器资产来游览地形。在工具栏上按下播放图标，并在关卡周围探索！恭喜你，你现在拥有了一个包含地形的游戏世界。参见*图7.17*：
- en: '![Terrain construction](img/B05118_07_17.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![地形构建](img/B05118_07_17.jpg)'
- en: 'Figure 7.17: First-person terrain exploration'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17：第一人称地形探索
- en: Before moving forward, let's consider the technical limitations of Unity terrains
    and the impact that this can potentially have for your games. Specifically, the
    Unity terrain is height map-based. This means that the elevation (ups and downs)
    of the terrain are generated internally based on grayscale pixels in an image
    file (the height map). When painting the terrain using the brushes from the **Inspector**,
    you are (under the hood) painting pixels onto the height map, which is used to
    deform the terrain. This is a clever and fascinating process, but it comes with
    an important limitation. Namely, a height map is a 2D topographical texture. The
    result is that Unity terrains are not truly 3D at a procedural level; they cannot
    contain caves, crevices, caverns, or any inward cutouts. The player cannot *go
    under* anything. Rather, it consists simply of up and down sections, none of which
    may have interior spaces. Now, in many cases, this won't be a problem. However,
    sometimes you'll need these internal spaces, and when you do, you'll want to consider
    alternatives to the native terrain system. Alternatives include Asset Store plugins,
    but also manual terrains in 3D modeling software such as 3DS Max, Maya, and Blender.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '在继续前进之前，让我们考虑Unity地形的技術限制以及这可能会对你游戏产生的潜在影响。具体来说，Unity地形是基于高度图。这意味着地形的 elevation（高低起伏）是基于图像文件中的灰度像素（高度图）内部生成的。当使用**检查器**中的刷子绘制地形时，你实际上是在高度图上绘制像素，该高度图用于变形地形。这是一个巧妙且迷人的过程，但它有一个重要的限制。即高度图是一个2D地形纹理。结果是，Unity地形在程序层面上并不是真正的3D；它们不能包含洞穴、裂缝、洞穴或任何内向的切割。玩家不能*进入*任何东西。相反，它只由上下部分组成，其中没有内部空间。现在，在许多情况下，这不会成为问题。然而，有时你需要这些内部空间，当你需要时，你会想要考虑替代原生地形系统的方案。替代方案包括Asset
    Store插件，但还包括在3D建模软件（如3DS Max、Maya和Blender）中的手动地形。 '
- en: Navigation and navigation meshes
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航和导航网格
- en: 'The world terrain is now fully created. In reaching this stage, we must now
    start thinking about the main aims of our project. Specifically, the level should
    be an AI experiment: we want to create enemy NPC characters that can wander freely
    around the terrain and will chase and attack the player whenever the player enters
    their field of view. To achieve this, the level must be properly configured for
    path-finding, which is considered here.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 世界地形现在已经完全创建完成。在达到这一阶段后，我们现在必须开始思考我们项目的核心目标。具体来说，这个关卡应该是一个AI实验：我们希望创建可以自由在地图上漫步的敌方NPC角色，并且当玩家进入他们的视野时，他们会追逐并攻击玩家。为了实现这一点，关卡必须正确配置以进行路径查找，这一点在此处被考虑。
- en: On thinking about NPC AI and NPC movement around the level, it's clear that
    the terrain is bumpy and features many hills, mountains, dips, and inclines. For
    an NPC character to navigate this terrain successfully, many complexities are
    involved. For example, an NPC cannot simply travel in only straight lines from
    point A to point B because doing so would cause the NPC to pass through solid
    objects and terrain. The NPC needs to maneuver intelligently around, under, and
    over appropriate parts of the terrain, just as human intelligence would. This
    is important to create believable characters. The computational processes involved
    in calculating appropriate paths for NPCs is called **Path-Finding**, and the
    processes to make a character travel those paths is termed **Navigation**. Unity
    comes with path-finding and navigation features built-in, making it easy for NPCs
    to calculate and travel paths.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在思考NPC AI和NPC在关卡中的移动时，很明显地形是崎岖的，有许多山丘、山脉、凹地和斜坡。为了使NPC角色能够成功穿越这片地形，涉及许多复杂性。例如，NPC不能简单地从A点到B点直线移动，因为这样做会导致NPC穿过固体物体和地形。NPC需要智能地在地形周围、下方和上方移动，就像人类智能一样。这对于创建可信的角色非常重要。计算NPC适当路径的计算过程称为**路径查找**，使角色沿着这些路径移动的过程称为**导航**。Unity内置了路径查找和导航功能，这使得NPC计算和穿越路径变得容易。
- en: 'To prepare for this, a Navigation Mesh must be generated. This is a special
    mesh asset included in the scene, which uses non-rendered geometry to approximate
    the total walkable surface of a scene. This is used by the path-finding and navigation
    processes to move a character around. To get started with generating a navigation
    mesh, select **Window** | **Navigation** from the application menu. See *Figure
    7.18*:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个，必须生成一个导航网格。这是一个特殊的网格资源，包含在场景中，它使用不可渲染的几何形状来近似场景的总可通行表面。路径查找和导航过程使用它来移动角色。要开始生成导航网格，从应用程序菜单中选择**窗口**
    | **导航**。参见*图7.18*：
- en: '![Navigation and navigation meshes](img/B05118_07_18.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_18.jpg)'
- en: 'Figure 7.18: Accessing the Navigation window'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18：访问导航窗口
- en: 'The purpose of the **Navigation** window is to generate a low-fidelity terrain
    mesh that actually approximates the level floor. For this process to work effectively,
    all non-movable floor meshes in the scene must be marked as **Navigation Static**.
    To do this, select the terrain in the **Hierarchy** panel and, from the **Inspector**,
    click on the **Static** drop-down and enable the **Navigation Static** option.
    See *Figure 7.19*:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**导航**窗口的目的是生成一个低保真度的地形网格，它实际上近似于水平地面。为了使此过程有效，场景中所有不可移动的地形网格都必须标记为**导航静态**。为此，在**层次**面板中选择地形，然后在**检查器**中点击**静态**下拉菜单并启用**导航静态**选项。参见*图7.19*：'
- en: '![Navigation and navigation meshes](img/B05118_07_19.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_19.jpg)'
- en: 'Figure 7.19: Marking non-movable floor objects as Static'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19：将不可移动的地形对象标记为静态
- en: 'Now access the **Navigation** window (which I typically dock into the **Inspector**).
    From here, click on the **Bake** tab to access the main **Navigation** settings.
    From this panel, you can control a range of settings to influence Navigation Mesh
    (NavMesh) generation. See *Figure 7.20*:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在访问**导航**窗口（我通常将其停靠在**检查器**中）。从这里，点击**烘焙**选项卡以访问主要的**导航**设置。从此面板，你可以控制一系列设置来影响导航网格（NavMesh）的生成。参见*图7.20*：
- en: '![Navigation and navigation meshes](img/B05118_07_20.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_20.jpg)'
- en: 'Figure 7.20: The Bake contains the main settings for Navigation Mesh generation'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20：烘焙包含导航网格生成的主要设置
- en: 'To get started, let''s just generate an initial Navigation Mesh to see how
    the default settings look. We can easily erase and regenerate the mesh under new
    settings if needed. To do this, click on the **Bake** button from the **Inspector**.
    When you do this, a default Navigation Mesh is generated and appears in blue above
    the terrain from the **Scene** viewport. See *Figure 7.21*:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们只需生成一个初始导航网格，看看默认设置看起来如何。如果需要，我们可以轻松擦除并在新设置下重新生成网格。为此，从**检查器**中点击**烘焙**按钮。当你这样做时，将生成一个默认的导航网格，并从**场景**视图中以蓝色显示在地形上方。参见*图7.21*：
- en: '![Navigation and navigation meshes](img/B05118_07_21.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_21.jpg)'
- en: 'Figure 7.21: A default Navigation Mesh'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.21：默认导航网格
- en: 'The default navigation mesh is problematic. It should represent the entire
    walkable regions of the level. It is, essentially, the area to which NPCs will
    be restricted when they move around. You''ll see from the navigation mesh in the
    preceding image that it''s fractured and broken in many places—some areas are
    totally isolated and disconnected from others. This is often undesirable because
    it means that any NPC walking within one isolated region cannot access or move
    to another as there is no connection between the two areas and the NPC can only
    move on the navigation mesh. To fix this properly, two settings must be adjusted.
    First, adjust the **Agent Radius** setting. This controls how large an average
    agent (NPC) is, and it affects how close the Navigation Mesh can expand toward
    the surrounding mesh floor and its edges. Lower (smaller) settings allow the mesh
    to encroach nearer to the mesh edges, resulting in an expanded navigation mesh.
    Try reducing **Agent Radius** and then clicking on **Bake** again to observe the
    result. See *Figure 7.22*:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的导航网格存在问题。它应该代表关卡的全部可行走区域。本质上，这是NPC在移动时将被限制的区域。您将从前面的图像中看到导航网格在许多地方是断裂和破碎的——一些区域完全孤立，与其他区域断开连接。这通常是不理想的，因为这意味着任何在一个孤立区域内行走的NPC无法访问或移动到另一个区域，因为这两个区域之间没有连接，NPC只能在地形网格上移动。为了正确修复这个问题，必须调整两个设置。首先，调整**代理半径**设置。这控制着平均代理（NPC）的大小，并影响导航网格可以扩展到周围网格地板及其边缘的接近程度。较低的（较小的）设置允许网格更接近网格边缘，从而扩展导航网格。尝试降低**代理半径**，然后再次点击**烘焙**以观察结果。见图7.22：
- en: '![Navigation and navigation meshes](img/B05118_07_22.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_22.jpg)'
- en: 'Figure 7.22: Refining the mesh via Agent Radius'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.22：通过代理半径细化网格
- en: 'This improves the meshes but we still have broken or fractured areas. This
    is also because of the **Max Slope** setting, which controls how steep a surface
    should be (such as the incline of a mountain) before it becomes unwalkable for
    an NPC. Increase this setting to expand the navigation mesh further, and click
    on **Bake**:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这提高了网格质量，但我们仍然有断裂或破碎的区域。这也是因为**最大坡度**设置，它控制着表面在变得对NPC不可行走之前应该有多陡（例如，山丘的倾斜度）。增加此设置可以进一步扩展导航网格，然后点击**烘焙**：
- en: '![Navigation and navigation meshes](img/B05118_07_23.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_23.jpg)'
- en: 'Figure 7.23: Increasing Max Slope to expand the navigation mesh over the terrain'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.23：增加最大坡度以在地面扩展导航网格
- en: 'Congratulations. You have now constructed a Navigation Mesh for the level.
    The NavMesh asset itself is stored in a folder matching the scene name. When selected
    in the **Project** panel, you can preview various read-only properties describing
    the Navigation Mesh, such as **Height** and **Walkable Radius** settings. See
    *Figure 7.24*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜。你现在已经为该关卡构建了一个导航网格。NavMesh资产本身存储在以场景名称命名的文件夹中。在**项目**面板中选择时，你可以预览描述导航网格的各种只读属性，例如**高度**和**可行走半径**设置。见图7.24：
- en: '![Navigation and navigation meshes](img/B05118_07_24.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![导航和导航网格](img/B05118_07_24.jpg)'
- en: 'Figure 7.24: Previewing Navigation Mesh properties from the Project panel'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.24：从项目面板预览导航网格属性
- en: Building an NPC
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建NPC
- en: 'Now we''ll build an NPC character that''ll display artificial intelligence.
    To get started, we''ll use the Ethan mesh included in the Unity native companion
    assets. This can be found in the **Project** panel under the **Standard Assets**
    | **Characters** | **ThirdPersonCharacter** | **Models** folder. From here, drag
    and drop the Ethan model to the scene and position it on the terrain. We''ll refine
    and edit this model and, eventually, create a prefab from it to represent an NPC
    character. See *Figure 7.25*:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将构建一个将展示人工智能的NPC角色。要开始，我们将使用Unity原生伴侣资产中包含的Ethan网格。这可以在**项目**面板的**标准资产**
    | **角色** | **第三人称角色** | **模型**文件夹下找到。从这里，将Ethan模型拖放到场景中，并将其放置在地面上。我们将细化并编辑此模型，并最终从它创建一个预制体来表示NPC角色。见图7.25：
- en: '![Building an NPC](img/B05118_07_25.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![创建NPC](img/B05118_07_25.jpg)'
- en: 'Figure 7.25: Starting an NPC character'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.25：开始创建NPC角色
- en: 'When adding the Ethan model to the level, ensure that the blue forward vector
    of the character is pointing forward, facing the direction in which the character
    is actually looking. If the forward vector is not front-aligned, then create an
    empty object and align the character model to that as a child object so that the
    forward vector of the parent is pointing straight ahead, along the character''s
    line of sight. That is, the blue forward vector should align with the character''s
    eye (be looking in the same direction). This is highly important to make your
    character move around believably. See *Figure 7.26*:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当将Ethan模型添加到关卡中时，确保角色的蓝色前向向量指向前方，面对角色实际注视的方向。如果前向向量没有对齐前方，则创建一个空对象，并将角色模型作为子对象对齐到该对象，以便父对象的前向向量指向正前方，沿着角色的视线方向。也就是说，蓝色前向向量应与角色的眼睛（朝同一方向看）对齐。这对于使你的角色移动起来更加逼真至关重要。参见*图7.26*：
- en: '![Building an NPC](img/B05118_07_26.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![构建NPC](img/B05118_07_26.jpg)'
- en: 'Figure 7.26: Forward vector (blue arrow) pointing forward at the character''s
    feet'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.26：前向向量（蓝色箭头）指向角色的脚下
- en: 'The NPC should navigate and walk around the terrain intelligently using the
    Navigation Mesh generated for the level. For this, a NavMesh agent component should
    be attached to the character. Select the Ethan model in the level and, from the
    application menu, choose **Component** | **Navigation NavMesh Agent**. The NavMesh
    Agent component contains both Path-Finding and Steering (Navigation) behaviors
    that allow a GameObject to move around a Navigation Mesh. See *Figure 7.27*:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: NPC应使用为关卡生成的导航网格智能导航和行走。为此，应将NavMesh agent组件附加到角色上。在关卡中选择Ethan模型，并从应用程序菜单中选择**Component**
    | **Navigation NavMesh Agent**。NavMesh Agent组件包含路径查找和转向（导航）行为，允许GameObject在导航网格中移动。参见*图7.27*：
- en: '![Building an NPC](img/B05118_07_27.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![构建NPC](img/B05118_07_27.jpg)'
- en: 'Figure 7.27: Attaching a NavMeshAgent component to an NPC'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.27：将NavMeshAgent组件附加到NPC
- en: 'By default, the Navigation Mesh assigns a Cylinder Collision volume to the
    Agent—the object that will navigate and move around. This is not a true collider
    that acts with the physics system but a pseudo-collider used to determine when
    the character nears the edge of a navigation mesh. Select the Ethan NPC and, from
    the **Inspector** in the NavMesh Agent component, set the **Height** to `1.66`
    and **Radius** to `0.22`. This approximates the mesh more closely. See *Figure
    7.28*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，导航网格将圆柱形碰撞体积分配给代理——即将在关卡中导航和移动的对象。这并不是一个与物理系统交互的真实碰撞体，而是一个用于确定角色何时接近导航网格边缘的伪碰撞体。选择Ethan
    NPC，并在NavMesh Agent组件的**Inspector**中设置**Height**为`1.66`和**Radius**为`0.22`。这更接近网格。参见*图7.28*：
- en: '![Building an NPC](img/B05118_07_28.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![构建NPC](img/B05118_07_28.jpg)'
- en: 'Figure 7.28: Sizing the Agent Collider'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.28：调整代理碰撞体大小
- en: For test purposes, let's make the mesh move; just to see that everything is
    working as it should be. To do this, we'll need to make a new script. First, create
    a new empty object, which will act as a *Destination*, that is, a target object
    that the NPC should reach, wherever it is. Select **GameObject** | **Create Empty**
    from the application menu. Name it `Destination`, and then assign it a Gizmo icon
    to make it visible in the viewport. See *Figure 7.29*. Simply click on the cube
    icon at the top left of the **Object Inspector** with the object selected, and
    then choose an icon representation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试目的，让我们让网格移动；只是为了看看一切是否按预期工作。为此，我们需要编写一个新的脚本。首先，创建一个新的空对象，它将作为*目标*，即NPC应该到达的目标对象，无论它在何处。从应用程序菜单中选择**GameObject**
    | **Create Empty**。将其命名为`Destination`，然后分配一个Gizmo图标以便在视图中可见。参见*图7.29*。只需在对象选择状态下点击**Object
    Inspector**左上角的立方体图标，然后选择图标表示。
- en: '![Building an NPC](img/B05118_07_29.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![构建NPC](img/B05118_07_29.jpg)'
- en: 'Figure 7.29: Creating a Destination object'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.29：创建目标对象
- en: 'Next, create a new C# script file (`FollowDestination.cs`) and attach it to
    the NPC object in the scene. The code is included in *Code Sample 7.1*, and comments,
    which is as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的C#脚本文件（`FollowDestination.cs`），并将其附加到场景中的NPC对象上。代码包含在*代码示例7.1*中，注释如下：
- en: '[PRE0]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Code Sample 7.1
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 代码示例7.1
- en: 'The following points summarize the code sample:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点总结了代码示例：
- en: The `FollowDestination` class can be attached to any object with a NavMeshAgent.
    This object should follow the destination object as it moves.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FollowDestination`类可以附加到任何具有NavMeshAgent的对象。该对象应随着目标对象的移动而跟随。'
- en: The `Destination` variable maintains the destination object to follow.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Destination`变量维护要跟随的目标对象。'
- en: 'Once attached to the NPC object, drag and drop the destination empty object
    to the **Destination** slot for the FollowDestination component in the **Inspector**.
    This assigns a destination for the script. See *Figure 7.30*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦附加到NPC对象，将目标空对象拖放到**检查器**中FollowDestination组件的**目标**槽中。这为脚本分配了一个目标。见图 *7.30*：
- en: '![Code Sample 7.1](img/B05118_07_30.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![代码示例 7.1](img/B05118_07_30.jpg)'
- en: 'Figure 7.30: Configuring a FollowDestination object'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.30：配置FollowDestination对象
- en: 'Now give the game a test run. During gameplay, move the destination object
    around via the **Scene** tab and see how the NPC responds. The NPC should continually
    chase the destination object. In addition, if you play the game with the **Navigation**
    window open in the **Inspector** and with the NPC selected in the **Hierarchy**
    panel, the **Scene** view will display diagnostic information and gizmos, allowing
    you to preview and visualize the route calculated by the NPC. See *Figure 7.31*:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在给游戏进行测试运行。在游戏过程中，通过**场景**标签移动目标对象，看看NPC如何响应。NPC应该持续追逐目标对象。此外，如果您在**检查器**中打开**导航**窗口，并在**层次结构**面板中选择NPC，**场景**视图将显示诊断信息和工具，让您预览并可视化NPC计算出的路线。见图
    *7.31*：
- en: '![Code Sample 7.1](img/B05118_07_31.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![代码示例 7.1](img/B05118_07_31.jpg)'
- en: 'Figure 7.31: Testing NPC Navigation'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.31：测试NPC导航
- en: Creating patrolling NPCs
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建巡逻NPC
- en: We now have an NPC that follows a destination object, which is valuable in itself
    as an exercise, but we'll need more sophisticated behavior than this. Specifically,
    we'll need the NPC to patrol, that is, move across multiple destinations in order
    via a waypoint system, moving from one destination to the next in sequence. There
    are multiple approaches that could be taken to achieve this. One method is through
    script. Through this method, we'd create an array of different waypoint objects
    and iterate through them on a loop such that when the NPC reaches one destination,
    they'll move on to the next one. Now, this approach can be very efficient and
    effective, but there's another method. Specifically, instead of using script,
    we can create an animation to move a single destination object to different waypoint
    locations over time, and because the NPC continually follows the destination wherever
    it moves, it will continually patrol.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个跟随目标对象的NPC，这本身就是一个有价值的练习，但我们还需要比这更复杂的行为。具体来说，我们需要NPC进行巡逻，即通过航点系统在多个目标之间移动，按顺序从一个目标移动到下一个目标。为了实现这一点，可以采取多种方法。一种方法是通过脚本。通过这种方法，我们会创建一个包含不同航点对象的数组，并在循环中遍历它们，这样当NPC到达一个目标时，它们就会移动到下一个目标。现在，这种方法可以非常高效和有效，但还有另一种方法。具体来说，我们不是使用脚本，而是可以创建一个动画，在一段时间内将单个目标对象移动到不同的航点位置，因为NPC始终跟随目标对象移动，所以它会持续巡逻。
- en: Let's take this second approach. Start by opening the **Animation** window by
    selecting **Window** | **Animation** from the application menu. See *Figure 7.32*.
    Dock the **Animation** window into a horizontal view in the **Project** panel,
    if you prefer, for ease of viewing.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们采用第二种方法。首先通过选择应用程序菜单中的**窗口** | **动画**来打开**动画**窗口。见图 *7.32*。如果您喜欢，可以将**动画**窗口停靠在**项目**面板中的水平视图中，以便于查看。
- en: '![Creating patrolling NPCs](img/B05118_07_32.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_32.jpg)'
- en: 'Figure 7.32: Accessing the Animation window'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.32：访问动画窗口
- en: 'Next, select the object to animate (the destination object) from the **Hierarchy**
    panel and, from the **Animation** window, click on the **Create** button. From
    here, you will be asked to name and save the animation. I''ve called the animation
    `anim_DestPatrol`. See *Figure 7.33*:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，从**层次结构**面板中选择要动画化的对象（目标对象），然后在**动画**窗口中点击**创建**按钮。从这里，您将被要求命名并保存动画。我将其命名为`anim_DestPatrol`。见图
    *7.33*：
- en: '![Creating patrolling NPCs](img/B05118_07_33.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_33.jpg)'
- en: 'Figure 7.33: Creating a new Animation'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.33：创建新的动画
- en: 'Once the animation is created you can proceed to define animation channels.
    For the destination object, we''ll need a channel for the position field as the
    object should change position around the scene. Click on the **Add Property**
    button from the **Animation** window, and then choose **Transform** | **Position**
    to add a new position channel. This will automatically create starting and ending
    key frames in the timeline, which are identical and hold the object position.
    See *Figure 7.34*:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了动画，您就可以继续定义动画通道。对于目标对象，我们需要一个用于位置字段的通道，因为对象应该在场景中改变位置。从**动画**窗口中点击**添加属性**按钮，然后选择**变换**|**位置**来添加一个新的位置通道。这将自动在时间轴上创建起始和结束关键帧，它们是相同的，并保持对象位置。参见*图
    7.34*：
- en: '![Creating patrolling NPCs](img/B05118_07_34.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_34.jpg)'
- en: 'Figure 7.34: Creating a new Animation'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.34：创建新的动画
- en: 'Now, simply click and drag the vertical, red time slider across the timeline
    in the **Animation** window, between the 0-1 range, and then change the position
    of the destination object in the **Scene** tab to a new position. When you do
    this, Unity records the object position for that key frame. Repeat this process
    across the timeline, moving the destination object to different positions each
    time, and this creates a complete patrol animation. See *Figure 7.35*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，只需在**动画**窗口的时间轴上点击并拖动垂直的红色时间滑块，在 0-1 范围内，然后在**场景**选项卡中将目标对象的位置更改为新位置。当你这样做时，Unity
    会记录该关键帧的对象位置。在整个时间轴上重复此过程，每次将目标对象移动到不同的位置，这样就创建了一个完整的巡逻动画。参见*图 7.35*：
- en: '![Creating patrolling NPCs](img/B05118_07_35.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_35.jpg)'
- en: 'Figure 7.35: Building a Patrol Animation..'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.35：构建巡逻动画...
- en: 'Play the animation back by pressing play from either the **Animation** window
    or via the toolbar. By default, the animation will probably play back too fast
    (that''s an easy fix, as we''ll see), but notice also that, as expected, the destination
    object is *tweened*. That is, the Unity Animation interpolates between the key
    frames in the timeline, causing the destination object to slide or move smoothly
    between waypoints. For animation like this, however, we just want the destination
    to teleport or snap between waypoints immediately without any transition. To achieve
    this, we need to adjust the interpolation mode of the animation curves. Click
    on the **Curves** button at the bottom left corner of the **Animation** window.
    By default, the **Animation** window is in the **DopeSheet** mode, allowing us
    to see key frames easily and reposition them. The Curve mode, however, lets us
    adjust the interpolation between key frames. See *Figure 7.36*:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从**动画**窗口或工具栏中按播放按钮来播放动画。默认情况下，动画可能会播放得太快（这是一个容易解决的问题，我们将在后面看到），但请注意，正如预期的那样，目标对象是**插值**的。也就是说，Unity
    动画在时间轴上的关键帧之间进行插值，导致目标对象在航点之间平滑滑动或移动。然而，对于这种动画，我们只想让目标对象在航点之间立即传送或瞬间移动，没有任何过渡。为了实现这一点，我们需要调整动画曲线的插值模式。点击**动画**窗口左下角的**曲线**按钮。默认情况下，**动画**窗口处于**DopeSheet**模式，允许我们轻松地看到关键帧并重新定位它们。然而，曲线模式允许我们调整关键帧之间的插值。参见*图
    7.36*：
- en: '![Creating patrolling NPCs](img/B05118_07_36.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_36.jpg)'
- en: 'Figure 7.36: Accessing Animation Curves'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.36：访问动画曲线
- en: 'Now, box-select (click and drag a selection box) across all key frames in the
    graph view to select them all. Then, right-click to display the key frame context
    menu and, from the menu, choose **Right Tangent** | **Constant** to change all
    handles to a flat constant shape, meaning all key frames retain their values over
    the destination object until the next key frame only. See *Figure 7.37*:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在图表视图中选择所有关键帧（点击并拖动选择框）。然后，右键单击以显示关键帧上下文菜单，并从菜单中选择**右切线**|**恒定**，将所有处理器更改为平坦的恒定形状，这意味着所有关键帧在目标对象上保留其值，直到下一个关键帧为止。参见*图
    7.37*：
- en: '![Creating patrolling NPCs](img/B05118_07_37.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_37.jpg)'
- en: 'Figure 7.37: Changing Key Frame handles for interpolation'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.37：更改关键帧处理器的插值
- en: 'When the **Constant** option is chosen from the menu, the curves between key
    frames will look very different in the graph—a straight line joining them. See
    *Figure 7.38*:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 当从菜单中选择**恒定**选项时，关键帧之间的曲线在图表中看起来会非常不同——连接它们的直线。参见*图 7.38*：
- en: '![Creating patrolling NPCs](img/B05118_07_38.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻NPC](img/B05118_07_38.jpg)'
- en: 'Figure 7.38: Constant interpolation'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.38：恒定插值
- en: 'Now test this by pressing play on the toolbar. When you do this, the Destination
    should jump between waypoints as the animation progresses, and the NPC will continually
    move and travel towards the destination. Due to the default speed of the animation,
    the NPC may seem confused or crazed as he is torn between rapidly changing destinations.
    To fix this, select the Destination object in the **Hierarchy** panel and, from
    the **Object Inspector**, double-click on the **Controller** field of the Animator
    component to open the animator graph attached to the object, which controls when
    specific animations should play. See *Figure 7.39*:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过工具栏上的播放按钮进行测试。当您这样做时，随着动画的进行，目的地应该在路点之间跳跃，NPC 将持续移动并朝着目的地前进。由于动画的默认速度，NPC
    可能看起来困惑或疯狂，因为他被快速变化的地点所撕裂。为了解决这个问题，在 **层次结构** 面板中选择目的地对象，并从 **对象检查器** 中双击 Animator
    组件的 **控制器** 字段，打开附加到对象的动画器图，该图控制特定动画何时播放。参见 *图 7.39*：
- en: '![Creating patrolling NPCs](img/B05118_07_39.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻 NPC](img/B05118_07_39.jpg)'
- en: 'Figure 7.39: Accessing the Animator asset'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.39：访问动画器资产
- en: 'You can also show the **Animator** window manually by choosing **Window** |
    **Animator** from the application menu. In the **Animator** window, the default
    node is highlighted in orange. This node (animation) will play when the object
    is first activated in the level, which is normally on level startup. See *Figure
    7.40*:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过从应用程序菜单中选择 **窗口** | **动画器** 来手动显示 **动画器** 窗口。在 **动画器** 窗口中，默认节点以橙色突出显示。此节点（动画）将在对象首次在关卡中激活时播放，这通常是在关卡启动时。参见
    *图 7.40*：
- en: '![Creating patrolling NPCs](img/B05118_07_40.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻 NPC](img/B05118_07_40.jpg)'
- en: 'Figure 7.40: The orange DestPatrol animation is the default in the Animator
    window'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.40：在动画器窗口中，默认的 DestPatrol 动画为橙色
- en: 'Select the **DestPatrol** node in the graph and reduce its **Speed** from the
    **Object Inspector**. In my case, I''ve used a value of `0.2`, which works well.
    Once the speed is changed, replay your game to observe the effect. See *Figure
    7.41*:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中选择 **DestPatrol** 节点，并在 **对象检查器** 中降低其 **速度**。在我的情况下，我使用了 `0.2` 的值，效果很好。一旦速度改变，重新播放您的游戏以观察效果。参见
    *图 7.41*：
- en: '![Creating patrolling NPCs](img/B05118_07_41.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻 NPC](img/B05118_07_41.jpg)'
- en: 'Figure 7.41: Reducing animation speed'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.41：降低动画速度
- en: 'On pressing play, the NPC should now move between destinations at a believable
    speed, moving from one waypoint to the next. If the NPC moves too fast or too
    slow between waypoints, increase or decrease the animation speed further to get
    the result you need. Congratulations! You now have a complete, animated waypoint
    system. See *Figure 7.42*:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 按下播放按钮后，NPC 应该现在以可信的速度在目的地之间移动，从一个路点移动到下一个。如果 NPC 在路点之间移动得太快或太慢，请进一步增加或减少动画速度，以获得您需要的成果。恭喜！您现在拥有了一个完整的、动画化的路点系统。参见
    *图 7.42*：
- en: '![Creating patrolling NPCs](img/B05118_07_42.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![创建巡逻 NPC](img/B05118_07_42.jpg)'
- en: 'Figure 7.42: Waypoint system in action'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.42：路点系统在行动中
- en: Summary
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'Great work! We''ve now completed the first part of the AI project: building
    a terrain, generating a navigation mesh, and creating a basic waypoint system
    in which the character can move between destinations. This is a good beginning
    to simulate intelligence, but there is a lot more code to work on to achieve the
    intended effect. We''ll be focusing on that in the next and final chapter.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们现在已经完成了 AI 项目的第一部分：构建地形、生成导航网格，并在其中创建一个基本的路点系统，角色可以在目的地之间移动。这是一个很好的开始来模拟智能，但为了达到预期的效果，还有很多代码需要工作。我们将在下一章和最后一章中关注这一点。
