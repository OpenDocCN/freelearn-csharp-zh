- en: Chapter 5. Making Use of Images – Loading and Displaying
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter we will learn the following:'
  prefs: []
  type: TYPE_NORMAL
- en: How to load an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to display it on the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About general asset handling in Cinder
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You might make use of photographs, illustrations, or different image databases
    in your applications. To do so, you will need a way to load an image into your
    application and most importantly, to display it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter we will learn the basics of Cinder file loading features and
    learn to load an image from the Web and local storage.
  prefs: []
  type: TYPE_NORMAL
- en: Loading an image
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open TinderBox and create a new project with the name `BasicImages`. Open `xcode/BasicImages.xcodeproj`
    project file. Windows users should open the project file `vc10\BasicImages.sln`.
    Open `BasicImagesApp.cpp` in the editor.
  prefs: []
  type: TYPE_NORMAL
- en: First we are going to include some header files that declare functionality that
    is required to perform the things we want to get done.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to a point in the code where there are `#include` statements and add
    the following lines of code just after `#include "cinder/gl/gl.h"`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first include statement loads code header that is responsible for the Cinder
    image input/output functionality, the second code header include allows us to
    use OpenGL textures for drawing images on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next we need to declare a variable of type `gl::Texture` that will contain
    the actual image data. You can chose your own name for that, but I will call it
    `imgTexture`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the highlighted line of code just after `void draw();` in the `BasicImagesApp`
    class declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Next, we need to select an image to be loaded into the application. So we are
    going to use some random image from the internet as it is the fastest way to get
    a visible image on the screen if you have an internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before compiling and running the following example, try to open this URL [http://rijnieks.lv/projects/cinder_begin_creative_coding/images/image.png](http://rijnieks.lv/projects/cinder_begin_creative_coding/images/image.png)
    in your browser. If you do not see an image, please find any other `*.png` or
    `*.jpg` image on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following highlighted line of code in the setup method declaration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The reason why we load it in the `setup()` is that we need to load the image
    just once. As loading images from the net takes some time, we don't want to delay
    our `draw()` or `update()` operations because the image is still loading. Cinder
    is about speed and we don't want to sacrifice it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to add some code that will take care of displaying the image. Go
    to the implementation of the `draw()` method and add this code just after the
    `gl::clear( Color( 0, 0, 0 ) );` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Here we tell Cinder that we want to draw our `imgTexture` within the application
    window bounds (the image will be stretched so its width equals the window's width
    and its height equals the window's height). Try to compile and run the application.
    After a short delay an image should appear. If you try to resize the window, you
    can see that the image is being resized with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The member function `getWindowBounds()` returns an `Area` object and instead
    of using this function we can define the drawing area by ourselves. Try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If you try to resize the window now, you will see that it does not affect the
    image as now it's display position and size is hardcoded in `Area(100,100,540,380)`.
  prefs: []
  type: TYPE_NORMAL
- en: Handling assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's see what we need to create an application that will be used on a computer
    without an internet connection. We have to store our image somewhere on the computer.
  prefs: []
  type: TYPE_NORMAL
- en: Cinder has a predefined way of handling images and similar assets. If you created
    your project with TinderBox, you may have noticed that you have an **assets**
    directory in your project folder. If not, create one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling assets](img/9564_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now copy your image file into the assets directory and change the `loadImage`
    code in the `setup()` implementation to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we changed `loadUrl()` to `loadAsset()` and it actually seems
    simpler than the `loadUrl( Url( "http://..." ) )` approach. It's just that we
    do need to take care of our assets by ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now try to move the assets directory one level up in the filesystem so it is
    next to the `BasicImages` folder as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Handling assets](img/9564_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Try to compile and run our project and you will be surprised that the image
    still loads! Some people may think that this is the magic of caching or something
    similar but no, Cinder just automatically searches for the `assets` directory
    up to five levels above the executable. So you can choose at what level you want
    to store your assets, but in a way the default way may be the best as it allows
    you to use the same assets for your Mac OS X and Windows projects. If you are
    working on more than one project with the same assets, then you may move your
    `assets` directory to the projects folder level as we just did.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is one small detail to it—if your image uses alpha transparency, you
    might get strange results. To draw images with alpha transparency, we have to
    enable alpha blending before drawing the image and disable it after it is drawn
    by adding the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'There is also a way of adding additional asset directories in case you have
    more than one group of projects using the same assets. The following line of code
    takes care of that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you have to use an absolute path here, so this is not too good for
    cross-platform projects. In windows you might write something similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If you use assets, you have to remember to deploy the assets directory with
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: There is a way that tells you how to include assets inside the application,
    but this topic is a bit outside the scope of this book. You should search the
    Internet for "Cinder resource management" if you want to know more about it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the full code of the application that we made in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Not a lot of code!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learned how to load an image from the Internet as well as
    from local storage, assign it to an OpenGL texture, and draw it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We gained a basic understanding on how asset management works in Cinder and
    that we don't have to worry about the location of the `assets` directory as long
    as it is less than five levels up from our application.
  prefs: []
  type: TYPE_NORMAL
- en: We also understood that we can use the `loadUrl()` and `loadAsset()` functions
    in the same way on Mac OS X and Windows.
  prefs: []
  type: TYPE_NORMAL
