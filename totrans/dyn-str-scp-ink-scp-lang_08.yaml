- en: '*Chapter 6*: Adding and Working with the ink-Unity Integration Plugin'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter begins with discussing how to add the `.ink`, and their compiled
    forms, `.json`, within a Unity project and its Project window. Then, we will review
    how to associate Inky with ink source files and use it to edit files directly
    from Unity. Finally, we will conclude by examining how to adjust the plugin's
    settings for a project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the ink-Unity Integration plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with ink files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adjusting plugin settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will find, import, and work with the ink-Unity Integration
    plugin. This will allow us to work with ink files and adjust the plugin settings.
    We cannot work with ink files without the plugin, and the steps outlined in this
    chapter will help developers set up the package for later chapters focused on
    working with ink files and the Story API available after installing the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Note on Unity versions
  prefs: []
  type: TYPE_NORMAL
- en: This chapter has been tested with **Unity 2020.3 (LTS)** and **Unity 2021.1
    (current)**. This chapter also covers *version 1.0.2* of the **ink-Unity Integration**
    plugin. Inkle reports that *version 1.0.2* of the ink-Unity Integration plugin
    is compatible with *2018.4* and later versions of Unity, but only *2020.3 (LTS)*
    and *2021.1 (current)* are recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub: [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter6](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter6).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding the ink-Unity Integration plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We cannot work with Ink files in Unity without a special package called the
    **ink-Unity Integration** plugin. Like other packages for Unity, it can only be
    added to an existing project and must be re-imported for any new project wanting
    to use its code and available API. In this topic, we will work through the steps
    required to find, import, and verify the plugin is ready for use in a project.
    Each section in this topic should be used with the same project as the first section,
    *Finding and importing the plugin*, beginning with instructions to create a new
    Unity project based on the 2D template.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The official name of the package is ink-Unity Integration. However, Inkle, the
    creators of ink, call this package a *plugin* in its own documentation. This book
    follows the same naming convention to avoid confusion.
  prefs: []
  type: TYPE_NORMAL
- en: Finding and importing the plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The process for finding and importing the ink-Unity Integration plugin requires
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity project using the built-in 2D template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Warning
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Inkle** does not recommend using the Unity Asset Store version of the ink-Unity
    Integration plugin because of the delays between updates. This book will use the
    installation method recommended by the developers of the plugin to get the most
    up-to-date version.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Navigate to the **OpenUPM** page for the ink-Unity Integration plugin: [https://openupm.com/packages/com.inklestudios.ink-unity-integration/](https://openupm.com/packages/com.inklestudios.ink-unity-integration/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Get installer.unitypackage** link on the right-hand side:![Figure
    6.1 – OpenUPM page for the ink-Unity Integration plugin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.1_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.1 – OpenUPM page for the ink-Unity Integration plugin
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Clicking on the **Get installer.unitypackage** link will prompt a file download.
    Once the download finishes, find the local file and run the installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the downloaded installer file while Unity is open. This will open the **Import
    Unity Package** window in Unity and load the contents of the installer file.![Figure
    6.2 – Import Unity Package window showing ink-Unity Integration
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.2_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.2 – Import Unity Package window showing ink-Unity Integration
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Import Unity Package** window, click on **All** and then **Import**.
    This will guarantee all files are selected and imported. Once the importing is
    done, Unity will give a message that a new scoped registry has been added to the
    project.![Figure 6.3 – Importing a scoped registry window in Unity](img/Figure_6.3_B17597.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.3 – Importing a scoped registry window in Unity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Close** button to close the **Importing a scoped registry** window.
    Unity also opened the **Project Settings** window. This can be closed as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As one final step, we will test that the package is installed and ready for
    use. In the next section, we will work with the **Package Manager** window.
  prefs: []
  type: TYPE_NORMAL
- en: Verifying the package is installed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Depending on the version of Unity, other packages in use, or developer settings,
    it can sometimes be unclear whether the ink-Unity Integration package has been
    installed and is ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: 'To verify the plugin is enabled and ready, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Package Manager** window by clicking on **Window** from the **File**
    menu and then click on **Package Manager**:![Figure 6.4 – Window menu with Package
    Manager selected in Unity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.4_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.4 – Window menu with Package Manager selected in Unity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the **Package Manager** window, click on the **Packages** drop-down menu
    and make sure **In Project** is selected:![Figure 6.5 – Package Manager with the
    In Project option selected
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.5_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.5 – Package Manager with the In Project option selected
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The ink-Unity Integration plugin is ready for usage if it is included in a listing
    of packages currently in use with the project and has a green checkmark next to
    its name indicating it is installed in the current project.![Figure 6.6 – Package
    manager showing the ink Unity Integration package installed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.6_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.6 – Package manager showing the ink Unity Integration package installed
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After verifying that the ink Unity Integration package is installed, the **Package
    Manager** window can be closed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the next section, we will move on to working with ink files. After installing
    the ink-Unity Integration Plugin, we will learn how to create ink files, edit
    them, and use the auto-compilation process built into the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Working with ink files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity is only aware of files inside of the folders it watches. To work with
    other files, they must be added as new assets to an existing project. With the
    ink-Unity Integration plugin installed, Unity will watch all new files with the
    `.ink` file type and will automatically compile them for usage in Unity projects
    based on its **Project Settings**. However, the first step is to add these Ink
    source files to an existing Unity project using the plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Adding ink source files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Files created with Inky are saved with the `.ink` file type. These are *source*
    files for projects. They are the code form of Ink stories. To work with ink in
    Unity, the first step is to create a new `.ink` file.
  prefs: []
  type: TYPE_NORMAL
- en: To create a new ink source file in Unity, open an existing project and make
    sure the **Project** window is open. (If not open, it can be re-opened using the
    **Window** menu by clicking on **General** and then **Project**.)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are often multiple ways of doing the same thing in Unity. This applies
    to creating new files in the **Project** window as well. One way to create new
    ink files is use the **Project** window''s toolbar and the **Create** menu and
    then the **Ink** option. They can also be created by right-clicking in the **Project**
    window and going to the **Create** menu and then down to **Ink**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Create menu in the Project window](img/Figure_6.7_B17597.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Create menu in the Project window
  prefs: []
  type: TYPE_NORMAL
- en: The created Ink source file can either be renamed or the default name of `New`
    `Ink` can be accepted by clicking outside of its filename area. Moments after
    being created, the ink-Unity Integration plugin will generate a new file matching
    the name of the created one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – ink-Unity Integration plugin generated file in Unity Project
    view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.8_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – ink-Unity Integration plugin generated file in Unity Project view
  prefs: []
  type: TYPE_NORMAL
- en: Auto-compilation setting
  prefs: []
  type: TYPE_NORMAL
- en: If Unity does not automatically generate a `.json` file based on the ink source
    file, the auto-compilation setting may be turned off. Consult the *Updating automatic
    re-compilation* section of the *Adjusting plugin settings* topic later in this
    chapter for how to change this setting.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the generated file will reveal it is a `.json` file. When ink runs
    a story, it runs what it calls a `.ink` file into a compiled `.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: With the ink-Unity Integration plugin installed, a new `.json` file will automatically
    be created for every existing `.ink` file. The plugin will also track changes
    and re-compile the project every time it detects new changes.
  prefs: []
  type: TYPE_NORMAL
- en: Editing source files with Inky
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: ink source files are best edited using Inky. However, new ink source files are
    often added to a Unity project using its `.ink` files can be associated with Inky
    for editing when open within Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the operating system, the instructions are different. The next
    two sections contain the steps for *Windows (10 and later)* and *macOS (11.1 and
    later)*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Windows: Associating Inky with ink source files'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To start to associate Inky with all `.ink` files in Windows 10 and later, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on a created file in the **Project** window of Unity. This will open it
    in the **Inspector** view:![Figure 6.9 – Inspector view of an ink source file](img/Figure_6.9_B17597.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.9 – Inspector view of an ink source file
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on `.ink` files.![Figure 6.10 – File association prompt in Windows 10](img/Figure_6.10_B17597.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.10 – File association prompt in Windows 10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **More apps** and scroll to the bottom of the listing:![Figure 6.11
    – Program listings in Windows 10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.11_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.11 – Program listings in Windows 10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on `Inky.exe` file is found and select it:![Figure 6.12 – Application
    chooser in Windows 10](img/Figure_6.12_B17597.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.12 – Application chooser in Windows 10
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click `.ink` files. After a few moments, Windows will then open the `.ink` file
    found in the **Project** window of Unity in Inky.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moving forward, assuming the `Inky.exe` file is not deleted, Unity will redirect
    all file opening actions for `.ink` files to Inky.
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS: Associating Inky with ink source files'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To start to associate Inky with all `.ink` files in macOS (11.1 and later),
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on a created file in the **Project** window of Unity. Click on **Reveal
    in Finder**:![Figure 6.13 – File context menu for Unity in macOS](img/Figure_6.13_B17597.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.13 – File context menu for Unity in macOS
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After Finder opens, right-click on the file and navigate to **Open With**:![Figure
    6.14 – Open With file context menu in macOS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.14_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.14 – Open With file context menu in macOS
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If `Inky.app` does not appear, click on **Other…**:![Figure 6.15 – Application
    chooser in macOS
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.15_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.15 – Application chooser in macOS
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Search for `Inky` in the `Inky.app` from the listing. Click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Moving forward, assuming the `Inky.app` file is not deleted, Unity will redirect
    all file opening actions for `.ink` files to Inky.
  prefs: []
  type: TYPE_NORMAL
- en: Updating ink source files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once Inky has been associated with ink source files, editing the files becomes
    much easier. Double-clicking on the files in the `.json` files, this means both
    the source and compiled files will always be up to date.
  prefs: []
  type: TYPE_NORMAL
- en: To see this process in action, double-click on the created ink file from the
    `Adding Ink source files` section to open it in Inky.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change its contents to the following `Example 1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save the file in Inky by clicking on `.json` file. The **Console** window will
    also show when this process started and was completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Console window showing ink compilation messages'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.16_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.16 – Console window showing ink compilation messages
  prefs: []
  type: TYPE_NORMAL
- en: With Inky associated with `.ink` files and the ink-Unity Integration plugin
    installed in a Unity project, new Ink source files can be added to a Unity project
    and then edited with Inky. Every time they are saved, the ink-Unity Integration
    plugin will re-compile them based on its **Project Settings**. Updating ink source
    files becomes as easy as adding them to a Unity project and then editing them
    in Inky.
  prefs: []
  type: TYPE_NORMAL
- en: With the ink-Unity Integration plugin ready, we move ahead in the next section
    to examining its settings and how to update the auto-compilation functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Adjusting plugin settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The ink-Unity Integration plugin comes with multiple settings that can be changed
    depending on the needs of the Unity project. This topic will review how to find
    the **Project Settings** window and update a common option – automatic re-compilation.
  prefs: []
  type: TYPE_NORMAL
- en: Finding ink-Unity Integration settings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Ink-Unity Integration plugin comes with default settings. These can be
    changed by editing them as part of **Project Settings**:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Edit and then **Project Settings**:![Figure 6.17 – Edit menu with Project
    Settings… selected](img/Figure_6.17_B17597.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Figure 6.17 – Edit menu with Project Settings… selected
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on **Ink** from the sidebar options to see the related settings for the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.18 – Ink Project Settings in Unity'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.18_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.18 – Ink Project Settings in Unity
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will use the **Project Settings** window to update a
    common setting, the automatic re-compilation of ink source files.
  prefs: []
  type: TYPE_NORMAL
- en: Updating automatic re-compilation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If a project has a large ink source file or many different smaller files each
    using the `INCLUDE` keyword in ink, the compilation process might take more than
    a few seconds each time files are changed. In these contexts, turning off the
    re-compilation of ink source files might prevent the ink-Unity Integration plugin
    from wasting time re-compiling the ink source files.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project Settings** window, click on **Ink**:![Figure 6.19 – Ink Project
    Settings in Unity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/Figure_6.19_B17597.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Figure 6.19 – Ink Project Settings in Unity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the checkbox next to **Compile All Ink Automatically** to disable the
    automatic compilation process. (This can be re-enabled by clicking on the checkbox
    again later.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this topic, we examined the Ink **Project Settings** window and updated the
    auto-compilation option. Depending on the size of the ink source and other factors,
    the compilation process can sometimes take too long between changes. Updating
    the automatic compilation of ink sources files can often be a very useful setting
    to be aware of and update, depending on the project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to find the ink-Unity Integration plugin online
    as part of the first topic. We reviewed how to import the package and then verify
    it was installed. This is an important step for all projects using the plugin,
    as it must be re-imported for any new project.
  prefs: []
  type: TYPE_NORMAL
- en: In the second topic, *Working with ink files*, we looked at how to create new
    ink files in Unity. We examined how to associate Inky with ink source files in
    both Windows 10 and macOS. We then learned how to edit ink files and how the ink-Unity
    Integration plugin will detect any changes and recreate the compiled JSON file
    if the option is enabled in the **Project Settings**.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the *Adjusting plugin settings* topic, we looked at the settings
    when using the ink-Unity Integration plugin. We first reviewed how to find the
    **Project Settings** for the plugin by selecting **Ink** from the available options.
    Next, we examined how to adjust the automatic re-compilation of ink files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll move ahead to use the Ink API to work with a running
    story. The ink-Unity Integration plugin helps to generate the JSON files based
    on the ink source files. We will use the JSON files in the next chapter, and we
    will learn how to load parts of a story as part of a larger Unity project.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Does Inkle recommend using the Unity Asset Store?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is at least one way to create an ink file using the ink-Unity Integration
    plugin in Unity?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What program is a good choice for editing ink files?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can the auto-compilation process of the ink-Unity Integration plugin be changed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
