- en: Chapter 7. Creating a Game with NGUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we will create a game using NGUI elements, and this will
    ensure that you understand them and know how to use them perfectly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Together, we will learn how to create these basic game rules, which are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Enemies fall down from the top of our scrollable viewport.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The player drops Barriers on the Viewport—if the enemy collides with a built
    Barrier, he or she is destroyed along with the Barrier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some enemies have encrypted self-destruct code. The player clicks on the enemy
    to hack it. When the hacking process is complete, its destruct code is displayed
    above it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The player must type in the code to destroy the enemy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will also add a health bar that will represent the player''s health points
    and will decrease when enemies hit the bottom of the screen. The game will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a Game with NGUI](img/8667OT_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Enemy spawning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want our enemies to spawn at the top of the viewport's background. At spawn,
    the Y value can be the same for each of the enemies, but we want a random X value.
  prefs: []
  type: TYPE_NORMAL
- en: First of all, let's open our **Game** scene.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the enemies container
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our enemies will be nested in a container placed at the top left-hand corner
    of our background in order to have the {0, 0} positioned at the top left-hand
    corner of the viewport.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, let''s create our enemies holder by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **Viewport** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child by pressing *Alt* + *Shift* + *N*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new child as `Enemies`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach **Anchor** to it by navigating to **NGUI** | **Attach**. Then perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Background** from Viewport into the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter to **TopLeft**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, we now have our enemies container in which we will instantiate our **Enemy**
    prefab.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Enemy prefab
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create the **Enemy** prefab that will be instantiated as child of the
    **Enemies** GameObject. You must add the `Enemy.png` file included in the `Assets.zip`
    file to the **Game** atlas before you continue or you may create your own 128
    x 160 sprite. We will use a **Rigidbody** to detect collisions between the enemies
    and our barriers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the `Enemy.png` sprite has been added to the **Game** atlas, follow the
    given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **Viewport** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child with *Alt* + *Shift* + *N*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new child as `Spaceship`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our new **Spaceship** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a collider to it by navigating to **NGUI** | **Attach a Collider** and
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck its **Is Trigger** Boolean to detect collisions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Size** to {`128`, `160`, `1`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Rigidbody** component to it by navigating to **Component** | **Physics**
    and then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck its **Use Gravity** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **Is Kinematic** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Freeze Position** and **Freeze Rotation** Booleans for all its **Constraints**
    in order to avoid any unwanted behavior.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With our selected **Spaceship** GameObject, create a new **Sprite** by navigating
    to **NGUI** | **Create** | **Sprite**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite** to our new **Enemy** sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Dimensions** to `128` x `160`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `1`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Spaceship** GameObject in your `Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete our **Spaceship** instance from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we now have our **Enemy** prefab ready. Let''s add a new script to it that
    will handle the enemy''s initialization and movement, and perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view, select our **Spaceship** prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `EnemyController.cs` C# script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this new `EnemyController.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create a new `Initialize()` method that will set the enemy''s position
    outside the game with a random X and a tween duration depending on the float value
    that is passed as a parameter in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We used `spriteSize.x * 0.5f` in the preceding code because our enemy has a
    centered pivot and we want to avoid spawning it outside the background's width.
  prefs: []
  type: TYPE_NORMAL
- en: The `_movementDuration` parameter is used to define how much time the enemy
    will take to cross our entire background; it is used as speed. But to balance
    the speed, a value of 10 is used, which means that the enemy will need 10 seconds
    to hit the bottom of the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this stage, your hierarchy should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the Enemy prefab](img/8667OT_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating the enemy spawn controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we can launch the game, we need to add an `EnemySpawnController.cs`
    script that will handle enemy spawn rates and instantiate enemies when needed.
    To add the script, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Enemies** GameObject from **Viewport**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and attach a new `EnemySpawnController.cs` C# script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this new `EnemySpawnController.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this new script, we need to add a `SpawnEnemy()` coroutine that will be
    called at random intervals to instantiate **Enemy** prefabs and initialize them
    with the correct position and tween duration. First, we need to declare these
    variables as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The variables declared in the previous code will be used to control our random
    values. You may change them in the **Inspector** view. We need to assign our `enemyPrefab`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, go back to Unity and follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Enemies** GameObject from **Viewport**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Spaceship** prefab from the **Project** view inside the **Enemy Prefab**
    field in **Enemy Spawn Controller**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, the necessary variables are initialized. Now, let''s go back to our `EnemySpawnController.cs`
    script and add a new `SpawnEnemy()` coroutine by using the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Our coroutine is ready. Let''s start it when the game starts running. We can
    use the `Start()` method for this. Add this method just below our `SpawnEnemy()`
    coroutine in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the script and click on the play button. The first enemy is spawned after
    the `firstEnemyDelay`. After the first enemy, new enemies are spawned at random
    X positions, at random intervals, and at a random speed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your **Hierarchy** view should look as follows when a few enemies have spawned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the enemy spawn controller](img/8667OT_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Spawned enemies move down and stop at the end of the Viewport''s background
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating the enemy spawn controller](img/8667OT_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Forwarding events to viewport
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ok, we now have our mobile enemies, but we still have a slight problem. You
    may have noticed that you cannot drag the viewport if you click on an enemy. We
    had the same problem before with the **ActiveBarrier** prefab.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to add a **UIForwardEvents** component to the **Spaceship** prefab
    by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view, select our **Spaceship** prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Forward Events** component to it by navigating to **Component**
    | **NGUI** | **Interaction**. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **OnPress** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check its **OnDrag** Boolean.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Open its attached `EnemyController.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following line at the end of the `Initialize()` method of `EnemyController.cs`
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You can now pan the viewport even if you click on an enemy. It is time to handle
    collisions with barriers.
  prefs: []
  type: TYPE_NORMAL
- en: Handling enemy collisions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need to handle collisions between our enemies and ActiveBarriers. Since we
    have a Rigidbody attached to our **Enemy** prefab, it will receive the `OnTriggerEnter()`
    event when it hits the collider of an **ActiveBarrier** GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: Once the collisions with ActiveBarriers are implemented, we'll add collisions
    with the bottom of the screen, which will reduce the player's health.
  prefs: []
  type: TYPE_NORMAL
- en: Collisions with active barriers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, we must disable the ActiveBarrier''s collider by default and
    enable it when the barrier is built in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view, select our **ActiveBarrier** prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable its **Box Collider** component using its checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `ActiveBarrierController.cs` script attached to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We will need a new `built` boolean that will help us know if the barrier has
    finished its building process. Along with our `UISlider` and `UILocalize` variables,
    declare the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, add the following two lines at the end of the `BuildFinished()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Ok, now the collider is enabled only when the barrier is built. We can add
    a `HitByEnemy()` method with the concerned `enemy` passed as a parameter that
    will destroy the barrier and the enemy in the following manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we start two coroutines: one to kill the enemy and another one to remove
    the barrier. Let''s add the `RemoveBarrier()` coroutine now with the following
    code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The coroutine in the previous code scales down the barrier before it is destroyed.
    We send a message to the parent (**Viewport**) because we need to decrease the
    `barrierCount` value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's add the `BarrierRemoved()` method in the `ViewportHolder.cs` script. In
    the **Hierarchy** view, select our **Viewport** GameObject and open the `ViewportHolder.cs`
    script attached to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In our `ViewportHolder.cs` script, add the following new `BarrierRemoved()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `barrierCount` value will be updated as soon as a barrier is destroyed.
    Now, let''s open the `EnemyController.cs` script and add the `Kill()` coroutine
    as shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Great! All of our coroutines and methods are ready. Now, we need to call the
    `HitByEnemy()` method of the concerned **ActiveBarrier** when a collision occurs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We just have to add the following `OnTriggerEnter()` method inside our `EnemyController.cs`
    script, which will call this method only if the collided object actually is a
    barrier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all of the scripts and click on the play button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you place a barrier on an enemy's trajectory, both of them will be destroyed
    when they collide! If the building process isn't over, nothing happens.
  prefs: []
  type: TYPE_NORMAL
- en: In the case where a barrier finishes its building process while an enemy is
    still inside it, a collision will occur. Perfect!
  prefs: []
  type: TYPE_NORMAL
- en: Now that the player can destroy his or her enemies, let's add a way for the
    enemies to destroy the player.
  prefs: []
  type: TYPE_NORMAL
- en: Colliding with the bottom of the screen
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can now add a collider at the bottom of the viewport's background that will
    destroy enemies and reduce the player's health. Before we do this, let's create
    a Healthbar with a HealthController script.
  prefs: []
  type: TYPE_NORMAL
- en: Healthbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To create this Healthbar, we need the `Button.png` file available in the `Assets.zip`
    file. If you haven't added it to the **Game** Atlas as a sliced sprite yet, please
    do so before you continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a Progress Bar to create a Healthbar on which we will add a `HealthController.cs`
    script to handle the display of damage and health points. Perform the following
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, select the **UI** GameObject from **Anchor**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Widget Tool** window by navigating to **NGUI** | **Create a Widget**.
    Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Game** Atlas.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Progress Bar** template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Button** sprite for the **Empty** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **Button** sprite for the **Full** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **UI** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the new **Progress Bar** GameObject and rename it as `Healthbar`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach an **Anchor** to it by navigating to **NGUI** | **Attach**. Then perform
    the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Viewport** GameObject in the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Side** parameter to **Top**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Pixel Offset** to {`-160`, `-30`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject from **Healthbar** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Color Tint** to {`255`, `120`, `120`, `140`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Dimensions** to `320` x `42`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Sprite Type** to **Sliced**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Edit** button next to the **Sprite** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set all four border values to `6` for slicing parameters.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Foreground** GameObject from **Healthbar** and then perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Color Tint** to {`25`, `245`, `255`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Dimensions** to `320` x `42`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Sprite Type** to **Sliced**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ok, we have a configured health bar centered at the top of the screen. We need
    to add a script to it that will handle health points and modify the value of **Slider**
    accordingly. The steps to do so are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, select our **Healthbar** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create and add a new `HealthController.cs` script to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open this new `HealthController.cs` script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this new script, we will save a static reference to the instance of the
    `HealthController` class so that its methods are easily accessible from other
    scripts. First, let''s declare necessary variables and initialize them on `Awake()`
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, our variables are now initialized correctly. Let''s create a `Damage()`
    method that will reduce the `hp` value and update the slider as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Great! The `Damage()` method is ready. Let's create the **EndOfScreen** widget
    that will collide with the enemies.
  prefs: []
  type: TYPE_NORMAL
- en: The EndOfScreen widget
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s create the **EndOfScreen** widget that will help detect enemy collisions
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Hierarchy** view, select our **Viewport** GameObject and perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child by pressing *Alt* + *Shift* + *N*.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new child as `EndOfScreen`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach a collider to it by navigating to **NGUI** | **Attach a Collider** and
    set **Size** to {`3840`, `43`, `1`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attach **Anchor** to it by navigating to **NGUI** | **Attach**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the **Background** GameObject from **Viewport** in the **Container** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter to **Bottom**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** to {`0`, `33`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Untagged / Add Tag…** button at the top of the **Inspector**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new `DamageZone` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select our **EndOfScreen** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set **Tag** to **DamageZone**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure our **EndOfScreen** GameObject is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new sprite by navigating to **NGUI** | **Create** | **Sprite** and
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Atlas** type to the **SciFi** Atlas.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Sprite** type to the **Honeycomb** sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Sprite Type** to **Tiled**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set its **Color Tint** values to **R**: `255`, **G**: `120`, **B**: `120`,
    and **A**: `255`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** parameter to `3840` x `43`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Good. We now have an **EndOfScreen** limit with a sprite and a collider. Now,
    we need to edit our `EnemyController.cs` script''s `OnTriggerEnter()` method to
    check if the collided object has the **DamageZone** tag and hurt the player if
    needed. Perform the following steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view, select our **SpaceShip** prefab and open the `EnemyController.cs`
    script attached to it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the `EnemyController.cs` script, at the very first line of the `OnTriggerEnter()`
    method, add the following lines to check if the collided object has a **DamageZone**
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save all of the scripts and click on the play button. Now, our enemies are destroyed
    when they collide with the end of the Viewport, and the player's health is decreased!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, let's add another way to destroy our enemies.
  prefs: []
  type: TYPE_NORMAL
- en: Creating self-destruct code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dropping barriers on the screen is not enough. We will use a self-destruct code
    to destroy enemies too.
  prefs: []
  type: TYPE_NORMAL
- en: Each enemy will get a chance to have a self-destruct code. If it has one, an
    empty slider with **Code Encrypted** displayed inside it will appear above the
    concerned enemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the player clicks on the enemy, the hacking process starts. When the hacking
    is complete, a word will appear as shown in the following screenshot, and the
    player will have to type it on his keyboard to destroy it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating self-destruct code](img/8667OT_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The hacking slider
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s start by creating the hacking slider indicator inside our **Spaceship**
    prefab by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** view, select our **Spaceship** prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it in the **Hierarchy** view as child of the **Viewport** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Wiget Tool** window by navigating to **NGUI** | **Create a Widget**
    and then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Game** Atlas.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Progress Bar** template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Button** sprite for the **Empty** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Button** sprite for the **Full** field.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With our **Spaceship** instance selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new **Progress Bar** GameObject and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `DestructCode`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Transform** position to {`-100`, `100`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the value of **UISlider** to `0`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject from **DestructCode**. Then perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Color Tint** values to {`255`, `140`, `140`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `2`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Foreground** GameObject from **DestructCode** and then perform
    the given steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Color Tint** to {`50`, `180`, `220`, `255`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** value to `3`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, the slider is ready. Let's add a label that will display **Code Encrypted**
    and will change to the self-destruct code when the hacking process is finished.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, select our **DestructCode** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the **Widget Tool** window by navigating to **NGUI** | **Create a Widget**
    and perform the given steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **SciFi Font – Normal** font.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** template.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the **Color** to **R**: `255`, **G**: `215`, **B**: `190`, and **A**:
    `255`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: With the **DestructCode** GameObject selected, click on the **Add To** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new **Label** GameObject from **DestructCode** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Transform** position to {`100`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its text to `Code Encrypted`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your **Hierarchy** view and **Spaceship** should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hacking slider](img/8667OT_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Great! Let''s apply these new modifications to our **Spaceship** prefab by
    performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** view, select our **Spaceship** GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button at the top of the **Inspector** view to update
    the prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **Spaceship** instance from our **Hierarchy** view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, we now have a slider that will indicate the hacking status and a label that
    will display the self-destruct code.
  prefs: []
  type: TYPE_NORMAL
- en: Self-destruct code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s add some self-destruct code and hacking status in the localization files.
    Open the `English.txt` and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the `French.txt` file and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Good! We now have our necessary localization strings.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning code to an enemy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now add a new `SetDestructCode()` method in our `EnemyController.cs`
    script that will assign a self-destruct code to our enemy during initialization.
    First, let's add the necessary global variables to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our `EnemyController.cs` script and add the following global variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We must set these variables. Add the following lines at the end of the `Initialize()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, now, let''s add the `SetDestructCode()` method that will assign a self-destruct
    code to the enemy. This method will have a string parameter containing the key
    of the self-destruct code to be assigned, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Ok, we have a method that sets the correct destruct code. Now, let's create
    a `Hack()` coroutine that will be called to start the hacking process.
  prefs: []
  type: TYPE_NORMAL
- en: The hacking process
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Hack()` coroutine will gradually fill the hacking slider and display the
    enemy's self-destruct code when the hacking is complete.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Hack()` coroutine to the `EnemyController.cs` script using the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add an `OnClick()` method that will actually launch the hacking
    process when the enemy is clicked on by the player. We do this in the following
    manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Ok, the methods are set for our enemy. Now, we can edit our `EnemySpawnController.cs`
    script to call the `SetDestructCode()` method when a new enemy is initialized
    and pass a random destruct code in parameter. First, we will add the necessary
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: We will need a `List` array to store the enemies in the scene. A `List` is like
    an array but easier to manage with useful methods, such as `Add()` and `Remove()`.
    In order to use a `List`, you need to include a specific library.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `EnemySpawnController.cs` script and simply add the following line
    at the very beginning of the file, along with the two other include lines already
    present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add these new global variables within our `EnemySpawnController` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Ok, now initialize some of these variables in the new `Awake()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Before we continue, let's assign the remaining variables in the **Inspector**
    view. Save the script, go back to Unity, and select our **Enemies** GameObject
    from **Viewport**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, set the **Word Keys** array and spawning values as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The hacking process](img/8667OT_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Good, our **Word Keys** array is now set up. Let''s return to our `EnemySpawnController.cs`
    script and add the following lines in the `SpawnEnemy()` coroutine at the very
    end of its `while()` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'When an enemy is initialized, the previous code adds it to the `List` of enemies
    and sets its self-destruct code. Now, using the following code, let''s create
    the `GetRandomWord()` method that will return one of our predefined words:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Good. Some of our enemies have a destruct code assigned. Let''s just add a
    method to remove an enemy from the `List`, which will be called each time an enemy
    is destroyed. The method is added as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `EnemyController.cs` script. Within the `Kill()` coroutine, just before
    the `Destroy(gameObject)` line, add the following line to remove the enemy from
    the `List`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Perfect. Save all of the scripts and hit the play button. If you click on an
    enemy that has the hacking slider, the hacking process starts and displays a destruct
    code when finished.
  prefs: []
  type: TYPE_NORMAL
- en: The last step is to handle the player's input in order to check if he or she
    types one of the enemies' self-destruct words.
  prefs: []
  type: TYPE_NORMAL
- en: Handling player input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `Update()` method of our `EnemySpawnController.cs` script to
    check which characters the player types with his or her keyboard. These characters
    will be stored one by one and will be compared to our enemies' destruct codes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open our `EnemySpawnController.cs` script and create a new `Update()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Save this script. Now, when you hack an enemy, you can destroy it by typing
    its self-destruct code! If multiple enemies have the same code, they will be destroyed
    simultaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Typing a word may scroll the viewport; this is because Q, A, S, and D are set
    as Horizontal and Vertical axes by default. Go to **Edit** | **Project Settings**
    | **Input** and delete (a, d) and (s, w) from the Horizontal and Vertical axes'
    Alt Positive Button and Alt Negative Button fields respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we used everything we learned in the earlier chapters with
    respect to creating a simple game.
  prefs: []
  type: TYPE_NORMAL
- en: We created an enemy spawning system, which instantiates enemies on the scene.
    Rigidbodies and colliders have been added to handle collisions between enemies
    in the barriers at the bottom of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: We also added a health bar widget that is linked to health points; if four enemies
    touch the end of the screen, the game restarts.
  prefs: []
  type: TYPE_NORMAL
- en: The `Update()` method was used to handle player input and compare the typed
    word with destruct codes in order to destroy enemies if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, the game is quite simple. Some ideas to enhance the game are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Add more self-destruct words
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display what the player types on the screen (visual feedback)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slowly increase the spawning rate as the player destroys enemies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slowly increase the enemy's speed as the player destroys enemies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a scoring system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Implement the Time power (hint: Time.timeScale)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement the Bomb power
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make the hack time depend on barrierCount (more barriers, faster hacking)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the possibility of removing an ActiveBarrier with a right click
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add clickable objects to regain health; some enemies leave them behind
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a combo reward if the player destroys multiple enemies within 3 seconds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include harder words for hard difficulty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Insert a visual indicator (arrow) to show the direction of the enemies outside
    the screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add more visual variety in the background (galaxies and so on) to help orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a game over screen with the main menu and restart buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create tutorial pop ups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you add some of the previous features, our game will become more interesting.
  prefs: []
  type: TYPE_NORMAL
- en: In order to improve your knowledge of NGUI, you can refer to more tutorials
    at [http://www.tasharen.com/forum/index.php?topic=6754](http://www.tasharen.com/forum/index.php?topic=6754).
  prefs: []
  type: TYPE_NORMAL
- en: The complete NGUI scripting documentation is available at [http://www.tasharen.com/ngui/docs/index.html](http://www.tasharen.com/ngui/docs/index.html).
  prefs: []
  type: TYPE_NORMAL
- en: That's it! We have now finished working with Unity and NGUI using this book.
    Thank you for your attention and I wish you all the best for your future projects.
  prefs: []
  type: TYPE_NORMAL
