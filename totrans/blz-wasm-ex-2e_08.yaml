- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Kanban Board Using Events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As developers, we strive to make our applications as dynamic as possible. For
    that, we use **events**. Events are messages sent by an object to indicate that
    an action has occurred. Razor components can handle many different types of events.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to handle different types of events in a
    Blazor WebAssembly app. We will learn how to use lambda expressions and how to
    prevent default actions. We will also learn how to use both **arbitrary** **parameters**
    and **attribute splatting** to simplify how we assign attributes to components.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we create in this chapter will be a Kanban board that uses
    the drag-and-drop API. Kanban boards visually depict work at various stages of
    a process. Our Kanban board will be comprised of three `Dropzone` components,
    with each one representing a different stage. Finally, we will use arbitrary parameters
    and attribute splatting to create a component to add new tasks to our Kanban board.
  prefs: []
  type: TYPE_NORMAL
- en: Events need handling.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Built-in event arguments
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: lambda expressions.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Event handling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attribute splatting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arbitrary parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Kanban board project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter08).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch8](https://packt.link/Ch8).'
  prefs: []
  type: TYPE_NORMAL
- en: Event handling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Razor components handle events by using an HTML element attribute named `@on{EVENT}`,
    where `EVENT` is the name of the event.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code calls the `OnClickHandler` method when the **Click Me**
    button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Event handlers automatically trigger a UI render. Therefore, we do not need
    to call `StateHasChanged` when processing them. Event handlers can reference any
    arguments that are associated with the event. Also, they can be used to call both
    synchronous and asynchronous methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code calls the asynchronous `OnChangeHandlerAsync` method when
    the checkbox is changed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `ChangeEventArgs` class is used to supply information
    about the change event. The `ChangeEventArgs` class only had one property. It
    is the `Value` property and for this object, it is either `true` or `false`.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The event arguments are optional and should only be included if they are used
    by the method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ChangeEventArgs` class inherits from the `EventArgs` class. All of the
    `EventArgs` classes that are supported by the ASP.NET Core framework are also
    supported by the Blazor WebAssembly framework. This is a list of the supported
    `EventArgs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ClipboardEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DragEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ErrorEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FocusEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChangeEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyboardEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MouseEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PointerEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WheelEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProgressEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TouchEventArgs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EventArgs` class is inherited by each of the preceding classes. We can
    create our own custom event data class by creating a class that derives from the
    `EventArgs` class.
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have looked at ways to call a method without any arguments or with
    arguments that are automatically supplied by the event. However, sometimes we
    need to provide our own arguments.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda expressions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we need to provide arguments to a method, we can use a lambda expression.
    Lambda expressions are used to create anonymous functions. They use the `=>` operator
    to separate the parameters from the body of the expression.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two forms that the body of a lambda expression can use. They can
    either use an expression or a statement block for their body. In the following
    example, the first button uses an expression and the second button uses a `statement`
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, when the **Who Is Awesome?** button is clicked, the lambda
    expression calls the `SetMessage` method to update the value of the `message`
    field. When the **Who Rocks?** button is clicked, the statement lambda expression
    uses a statement to update the value of the `message` field.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: If the body of a statement lambda only includes one statement, the parentheses
    are optional. Also, although you can include any number of statements in the body
    of a statement lambda, we recommend limiting the number of statements to two or
    three at most.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing default actions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Occasionally, we need to prevent the default action associated with an event.
    We can do that by using the `@on{EVENT}:preventDefault` directive attribute, where
    `EVENT` is the name of the event.
  prefs: []
  type: TYPE_NORMAL
- en: For example, when dragging an element, the default behavior prevents it from
    being dropped into another element. However, for the Kanban board project in this
    chapter, we will need to drop items into various dropzones. Therefore, we will
    need to prevent that default behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code prevents the `ondragover` default behavior from occurring.
    By preventing the default behavior, we will be allowed to drop elements into the
    `div` element that is being used as the dropzone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Focusing an element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are times when we need to programmatically give focus to an HTML element.
    In those cases, we use the `FocusAsync` method of the `ElementReference` type.
    The `ElementReference` is identified by adding an `@ref` attribute to the HTML
    element that we want to give focus to. To assign focus to the HTML element a field
    of type `ElementReference` must be defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code adds the value of the input element to the list of tasks
    and sets the focus back to the input element each time the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Focus.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, `taskInput` is defined as an `ElementReference`. It is
    associated with the `input` element via the `@ref` attribute. In the `OnClickHandlerAsync`
    event, the `FocusAsync` method is called. The result is that each time the button
    is clicked, the focus is returned to the `input` element.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Since the `FocusAsync` method relies on the DOM, it only works on elements after
    they have been rendered.
  prefs: []
  type: TYPE_NORMAL
- en: The Blazor WebAssembly framework makes it easy for us to access events by using
    the `@on{EVENT}` attribute. All the `EventArgs` that we are used to using in the
    ASP.NET framework are supported. We use lambda expressions to provide arguments
    for the methods that are called by the event. We use the `preventDefault` directive
    attribute to prevent default actions. Finally, the `FocusAsync` method of the
    `ElementReference` type is used to programmatically assign focus to an HTML element.
  prefs: []
  type: TYPE_NORMAL
- en: When working with components, we usually need to supply multiple attributes.
    Using attribute splatting, we can avoid assigning the attributes directly in the
    HTML markup.
  prefs: []
  type: TYPE_NORMAL
- en: Attribute splatting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When a child component has many parameters, it can be tedious to assign each
    of the values in HTML. To avoid having to do that, we can use attribute splatting.
  prefs: []
  type: TYPE_NORMAL
- en: With attribute splatting, the attributes are captured in a dictionary and then
    passed to the component as a unit. One attribute is added per dictionary entry.
    The dictionary must implement `IEnumerable<KeyValuePair<string,object>>` or `IReadOnlyDictionary<string``,
    object>` with string keys. We reference the dictionary using the `@attributes`
    directive.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the code for a component called `BweButton` that has a bunch of different
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BweButton.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is sample markup to render a `BweButton` component without using attribute
    splatting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the button that is rendered by the preceding markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B18471_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Rendered BweButton'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the CSS that we are using to style the buttons in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding CSS, all the elements in the `button` class will have white
    text and 2em of padding. The elements in the `button-red` class will have a background
    color of red, and the elements in the `button-black` class will have a background
    color of black.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using attribute splatting, we can simplify the preceding markup to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the definition of `InputAttributes` used by the preceding markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines the `InputAttributes` that are passed to `BweButton`.
    The resulting button is identical to the previous one where we set the attributes
    directly without using `InputAttributes`.
  prefs: []
  type: TYPE_NORMAL
- en: The real power of attribute splatting is realized when it is combined with arbitrary
    parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding example, we used explicitly defined parameters to assign the
    button’s attributes. A much more efficient way of assigning values to attributes
    is to use arbitrary parameters. An arbitrary parameter is a parameter that is
    not explicitly defined by the component. The `Parameter` attribute has a `CaptureUnmatchedValues`
    property that is used to allow the parameter to capture values that don’t match
    any of the other parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a new version of our button called `BweButton2`. It uses arbitrary
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**BweButton2.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code includes a parameter named `InputAttributes` that has its
    `CaptureUnmatchedValues` property set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: A component can only have one parameter with its `CaptureUnmatchedValues` property
    set to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the updated markup used to render the new version of our button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the definition of `InputAttributes2` used by the preceding markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Although none of the attributes in the dictionary have been explicitly defined
    in the new version of our button, `BweButton2` is still rendered. In the preceding
    example, the class attribute is set twice.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the button that is rendered by the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Rendered BweButton2 using arbitrary parameters'
  prefs: []
  type: TYPE_NORMAL
- en: The reason the button is now black is due to the position of the `@attributes`
    directive in the button’s markup. When attributes are splatted onto an element,
    they are processed from left to right. Therefore, if there are duplicate attributes
    assigned, the one that appears later in the order will be the one that is used.
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary parameters are used to allow previously undefined attributes to be
    rendered by the component. This is useful with components that support a large
    variety of customizations, such as a component that includes an `input` element.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Kanban board project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Blazor WebAssembly application that we are going to build in this chapter
    is a Kanban board. The Kanban board will have three dropzones: `High Priority`,
    `Mid` `Priority`, and `Low Priority`. We will be able to drag and drop tasks between
    the dropzones and add additional tasks. As each task is dragged to a different
    dropzone, the badge indicator on the task will be updated to match the dropzone’s
    priority.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Kanban board app'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 45 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `KanbanBoard` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will add `Bootstrap` to the project. Then, we will create both the `TaskItem`
    class and a `Dropzone` component. We will add three of the `Dropzone` components
    to the `Home` page to create the Kanban board. Finally, we will add the `NewTask`
    component so that we are able to add new tasks to the Kanban board.
  prefs: []
  type: TYPE_NORMAL
- en: Create the Kanban board project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the search for templates textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_08_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.4: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `KanbanBoard` in the **Project name** textbox and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_08_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.5: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `KanbanBoard` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_07_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.6: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created an empty `KanbanBoard` Blazor WebAssembly project. We will use
    Bootstrap’s grid system to lay out our board.
  prefs: []
  type: TYPE_NORMAL
- en: Install Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to install `Bootstrap` into our web app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot/css` folder and select the **Add**, **Client-Side Library**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Choose specific files**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select only the **css** files as shown in the following screenshot.![Graphical
    user interface, text, application, email  Description automatically generated](img/B18471_08_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.7: Add Client-Side Library dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Although the preceding screenshot has version 5.2.2 of `Bootstrap` selected,
    you can use any version of `Bootstrap` to complete this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Install** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `MainLayout.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `main` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code adds a `container` around the body of the page. In this project,
    we will be using Bootstrap’s grid system to lay out our content. It relies on
    a series of containers, rows, and columns. We will add the rows and columns later.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Kanban board to prioritize our tasks. But first, we need a way
    to define our tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Add the classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `TaskPriority` enum and a `TaskItem` class. We do this as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `KanbanBoard` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `TaskPriority`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the class with the following `TaskPriority` enum:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Right-click the `Models` folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `TaskItem`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following properties to the `TaskItem` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have added the `TaskPriority` enum and the `TaskItem` class to represent
    the tasks on the Kanban board. Next, we need to create the dropzones.
  prefs: []
  type: TYPE_NORMAL
- en: Create the Dropzone component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `Dropzone` component. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `KanbanBoard` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `Dropzone`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h3` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `@using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following parameters to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the `TaskItems` parameter is used to keep track of the
    tasks that have been dropped into the `Dropzone`. The `Priority` parameter is
    used to indicate the priority of the tasks that are in the `Dropzone`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `OnDrop` event indicates the event that is invoked when a task is dropped
    into the `Dropzone`, and the `OnStartDrag` event indicates the event that is invoked
    when a task is dragged from the `Dropzone`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup labels the `Dropzone` by its priority and allows elements
    to be dropped into it by preventing the default value of the `ondragover` event.
    The `OnDropHandler` method is called when an element is dropped into the `Dropzone`.
    Finally, it loops through all the items in the `TaskItems` class with the matching
    `Priority`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup within the `@foreach` loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup makes the `div` element draggable by setting the `draggable`
    attribute to `true`. The `OnDragStartHandler` method is called when the element
    is dragged.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `OnDropHandler` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code invokes the `OnDrop` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `OnDragStartHandler` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code invokes the `OnStartDrag` method.
  prefs: []
  type: TYPE_NORMAL
- en: We have added a `Dropzone` component. Now we need to add some styling to the
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Add a stylesheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a stylesheet to the `Dropzone` component using CSS isolation. We
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `css` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Style Sheet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the style sheet `Dropzone.razor.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can copy the `Dropzone.razor.css` file from the GitHub repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncomment the following `link` element at the bottom of the `head` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have finished styling the `Dropzone` component. Now we can put the Kanban
    board together.
  prefs: []
  type: TYPE_NORMAL
- en: Create the Kanban board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add three `Dropzone` components to create our Kanban board, one
    for each of the three types of tasks. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `_Imports.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages\Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h1` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code adds three `Dropzone` components, one for each priority.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code initializes the `TaskItems` object with three tasks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `OnStartDrag` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the value of `CurrentItem` to the item that is currently
    being dragged. We will use this value when the item is subsequently dropped. The
    `Dropzone` component invokes this method when the `@ondragstart` event is triggered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `OnDrop` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the `Priority` property of the `CurrentItem` to the
    priority associated with the `Dropzone` that `CurrentItem` is dropped into. The
    `Dropzone` component invokes this method when the `@ondrop` event is triggered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag all the tasks to the **High Priority** dropzone.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you drop each task into the **High Priority** dropzone, verify that the
    badge on the task is updated to **High**.
  prefs: []
  type: TYPE_NORMAL
- en: We have created a very simple Kanban board with three items. Let’s add the ability
    to add more items through the UI.
  prefs: []
  type: TYPE_NORMAL
- en: Create the NewTask component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `NewTask` component. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `NewTask`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h3` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup includes a label, a textbox, and a button. The textbox
    includes an `@ref` attribute that we will use later to set focus to the textbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is a screenshot of the `NewTask` component that we are working on:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18471_08_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 8.8: NewTask component'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code defines a parameter, `InputParameters`, that will be used
    for attribute splatting.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `OnClickHandlerAsync` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code invokes the `OnSubmit` method, sets the `taskName` field
    to `null`, and sets the focus to the `taskInput` object.
  prefs: []
  type: TYPE_NORMAL
- en: We have now created the `NewTask` component. Next, we need to start using it.
  prefs: []
  type: TYPE_NORMAL
- en: Use the NewTask component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the `NewTask` component to the `Home` page. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages\Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup below the `PageTitle` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, properties are being set without being explicitly defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the `AddTask` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the priority of the new item to `High` and adds it to
    the `TaskItems` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a new task and click the **Add Task** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the **Add Task** button of the `NewTask` component is clicked, the `AddTask`
    method is invoked. The textbox is cleared, and the focus is returned to the textbox.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter another new task and click the **Add Task** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop the tasks to change their priorities.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the ability to add new tasks to the Kanban board.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to handle events in your Blazor WebAssembly app. Also,
    you should be comfortable with using attribute splatting and arbitrary parameters.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced event handling. We explained how to use `EventArgs`
    and how to use lambda expressions to provide arguments to a method. We also explained
    how to prevent default actions and how to use the `@ref` attribute to programmatically
    set the focus to a particular element. Finally, we introduced both attribute splatting
    and arbitrary parameters.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project and added `Bootstrap` to the project. Next, we added a `Dropzone`
    component to the project and used it to create a Kanban board. Finally, we added
    the ability to add tasks to the Kanban board while demonstrating both attribute
    splatting and arbitrary parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to handle different types of events in your Blazor WebAssembly
    app, you can create more responsive applications. And, since you can use a dictionary
    to pass both explicitly declared attributes and implicit attributes to a component,
    you can create components faster since you do not need to explicitly define each
    parameter.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will create an application that can upload and read
    an Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: How can you update the Kanban board to allow the user to delete a task?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why would you want to include an attribute in the dictionary used for attribute
    splatting that is not defined on the component, either explicitly or implicitly?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the base class of the `DragEventArgs` class?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on **Document Object Model** (**DOM**) events, refer to
    [https://developer.mozilla.org/en-US/docs/Web/Events](https://developer.mozilla.org/en-US/docs/Web/Events).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `EventArgs` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.eventargs](https://learn.microsoft.com/en-us/dotnet/api/system.eventargs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `DragEventArgs` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.drageventargs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
