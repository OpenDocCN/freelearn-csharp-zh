["```cs\nGET http://ecommerce.packt.com/products\n```", "```cs\n{\n\"Products\": [\n{\n\"Id\": \"1\",\n\"Name\": \"Men's T-Shirt\",\n\"Category\": \"Clothing\"\n\"Uri\": \"http://ecommerce.packt.com/products/1\"\n}\n{\n\"Id\": \"2\",\n\"Name\": \"Mastering enterprise application development Book\",\n\"Category\": \"books\"\n\"Uri\": \"http://ecommerce.packt.com/products/2\"\n}\n]\n}\n```", "```cs\ndotnet new webapi -o TestApi\n```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddAuthentication() // To enable \n    //authentication.\n    builder.Services.AddControllers(); // To enable \n    //controllers like web API.\n    builder.Services.AddControllersWithViews(); // To \n    //enable controller with views.\n    builder.Services.AddDistributedMemoryCache(); // To enable distributed caching.\n    // App insights.\n    string appinsightsInstrumentationKey = builder.Configuration.GetValue<string>(\"ApplicationSettings:InstrumentationKey\");\n    builder.Services.AddApplicationInsightsTelemetry(appInsightInstrumentKey); // To enable application insights \n    //telemetry.\n    ```", "```cs\nvar app = builder.Build();\n// Endpoint that responds to /subscribe route.\napp.UseEndpoints(endpoints =>\n{\nendpoints.MapGet(\"/subscribe\", async context =>\n{   \n  await context.Response.WriteAsync(\"subscribed\");\n});\n});\n// removing any unwanted headers.\napp.Use(async (context, next) =>\n{\ncontext.Response.Headers.Remove(\"X-Powered-By\");\ncontext.Response.Headers.Remove(\"Server\");\nawait next().ConfigureAwait(false);\n});\n```", "```cs\npublic class ExceptionResponse\n```", "```cs\n{\n```", "```cs\n    public string ErrorMessage { get; set; }\n```", "```cs\n    public string CorrelationIdentifier { get; set; }\n```", "```cs\n    public string InnerException { get; set; }\n```", "```cs\n}\n```", "```cs\npublic class ApplicationSettings\n```", "```cs\n{\n```", "```cs\n    public bool IncludeExceptionStackInResponse { get; set; }\n```", "```cs\n}\n```", "```cs\npublic class ErrorHandlingMiddleware\n```", "```cs\n{\n```", "```cs\nprivate readonly RequestDelegate requestDelegate;\n```", "```cs\nprivate readonly ILogger logger;\n```", "```cs\nprivate readonly bool includeExceptionDetailsInResponse;\n```", "```cs\n}\n```", "```cs\npublic ErrorHandlingMiddleware(RequestDelegate, ILogger<ErrorHandlingMiddleware> logger, IOptions<ApplicationSettings> applicationSettings)\n```", "```cs\n{\n```", "```cs\n    NotNullValidator.ThrowIfNull(applicationSettings, \n```", "```cs\n      nameof(applicationSettings));\n```", "```cs\n    this.requestDelegate = requestDelegate;\n```", "```cs\n    this.logger = logger;\n```", "```cs\n    this.includeExceptionDetailsInResponse = applicationSettings.Value.IncludeExceptionStackInResponse;\n```", "```cs\n}\n```", "```cs\npublic async Task InvokeAsync(HttpContext context)\n```", "```cs\n{\n```", "```cs\n    try\n```", "```cs\n    {\n```", "```cs\n        if (this.requestDelegate != null)\n```", "```cs\n        {\n```", "```cs\n            // invoking next middleware.\n```", "```cs\n           this.requestDelegate.Invoke(context)\n```", "```cs\n             .ConfigureAwait(false);\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n    catch (Exception innerException)\n```", "```cs\n    {\n```", "```cs\n        this.logger.LogCritical(1001, innerException, \n```", "```cs\n          \"Exception captured in error handling \n```", "```cs\n           middleware\"); // logging.\n```", "```cs\n        ExceptionResponse currentException = new \n```", "```cs\n          ExceptionResponse()\n```", "```cs\n        {\n```", "```cs\n            ErrorMessage = Constants.ErrorMiddlewareLog, \n```", "```cs\n         // Exception captured in error handling middleware\n```", "```cs\n            CorrelationIdentifier = \n```", "```cs\n              System.Diagnostics.Activity.Current?.RootId,\n```", "```cs\n        };\n```", "```cs\n        if (this.includeExceptionDetailsInResponse)\n```", "```cs\n        {\n```", "```cs\n            currentException.InnerException = \n```", "```cs\n              $\"{innerException.Message} \n```", "```cs\n                {innerException.StackTrace}\";\n```", "```cs\n        }\n```", "```cs\n        context.Response.StatusCode = \n```", "```cs\n          StatusCodes.Status500InternalServerError;\n```", "```cs\n        context.Response.ContentType = \"application/json\";\n```", "```cs\n  await context.Response.WriteAsync(JsonSerializer.Serialize(innerException)).ConfigureAwait(false);\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\napp.UseMiddleware<GlobalExceptionHandlingMiddleware>();\n```", "```cs\nBuilder.Services.Configure<ApplicationSettings>(this.Configuration.GetSection(\"ApplicationSettings\"));\n```", "```cs\n\"ApplicationSettings\": {\n```", "```cs\n    \"IncludeExceptionStackInResponse\": true\n```", "```cs\n  }\n```", "```cs\n{\n```", "```cs\n\"ErrorMessage\": \"Exception captured in error handling middleware\",\n```", "```cs\n\"CorrelationIdentifier\": \"03410a51b0475843936943d3ae04240c \",\n```", "```cs\n\"InnerException\": \"No connection could be made because the target machine actively refused it.    at System.Net.Http.ConnectHelper.ConnectAsync(String host, Int32 port, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.HttpConnectionPool.ConnectAsync(HttpRequestMessage request, Boolean allowHttp2, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.HttpConnectionPool.CreateHttp11ConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.HttpConnectionPool.GetHttpConnectionAsync(HttpRequestMessage request, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.DiagnosticsHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\\r\\n   at Microsoft.Extensions.Http.Logging.LoggingHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\\r\\n   at Microsoft.Extensions.Http.Logging.LoggingScopeHttpMessageHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\\r\\n   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts, CancellationToken callerToken, Int64 timeoutTime)\\r\\n   at Packt.Ecommerce.Product.Services.ProductsService.GetProductsAsync(String filterCriteria) in src\\\\platform-apis\\\\services\\\\Packt.Ecommerce.Product\\\\Services\\\\ProductsService.cs:line 82\\r\\n   at Packt.Ecommerce.Product.Controllers.ProductsController.GetProductsAsync(String filterCriteria) in src\\\\platform-apis\\\\services\\\\Packt.Ecommerce.Product\\\\Controllers\\\\ProductsController.cs:line 46\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.TaskOfIActionResultExecutor.Execute(IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Logged|12_1(ControllerActionInvoker invoker)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeInnerFilterAsync>g__Awaited|13_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|19_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\\r\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)\\r\\n   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)\\r\\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\\r\\n   at Packt.Ecommerce.Common.Middlewares.ErrorHandlingMiddleware.InvokeAsync(HttpContext context) in src\\\\platform-apis\\\\core\\\\Packt.Ecommerce.Common\\\\Middlewares\\\\ErrorHandlingMiddleware.cs:line 65\"\n```", "```cs\n}\n```", "```cs\napp.UseRouting();\n```", "```cs\napp.UseEndpoints(endpoints =>\n```", "```cs\n{\n```", "```cs\n     endpoints.MapControllers();\n```", "```cs\n});\n```", "```cs\n    endpoints.MapGet(\"/aboutus\", async context =>\n    {\n    await context.Response.WriteAsync(\"Welcome to default products route\");\n    });\n    ```", "```cs\n    endpoints.MapControllerRoute(\n    name: \"default\",\n    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n    ```", "```cs\n[Route(\"api/[controller]\")]\n```", "```cs\n[ApiController]\n```", "```cs\npublic class ProductsController : ControllerBase\n```", "```cs\n{\n```", "```cs\n    [HttpGet]\n```", "```cs\n    [Route(\"{id}\")]\n```", "```cs\n    public IActionResult GetProductById(int id)\n```", "```cs\n    {\n```", "```cs\n        return Ok($\"Product {id}\");\n```", "```cs\n    }\n```", "```cs\n    [HttpGet]\n```", "```cs\n    public IActionResult GetProducts()\n```", "```cs\n    {\n```", "```cs\n        return Ok(\"Products\");\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\n    [Route(\"{id}\")]\n    public IActionResult GetProductById(int id)\n    {\n      return Ok($\"Product {id}\");\n    }\n    ```", "```cs\n    public IActionResult CreateProduct(Product product)\n    {\n    //\n    }\n    ```", "```cs\n    \"ApplicationSettings\": {\n```", "```cs\n    \"UseRedisCache\": false, // For in-memory\n```", "```cs\n    \"IncludeExceptionStackInResponse\": true,\n```", "```cs\n    \"DataStoreEndpoint\": \"\",\n```", "```cs\n    \"InstrumentationKey\": \"\"\n```", "```cs\n  },\n```", "```cs\n  \"ConnectionStrings\": {\n```", "```cs\n    \"Redis\": \"\"\n```", "```cs\n  }\n```", "```cs\n{\n```", "```cs\n  \"ApplicationSettings:InstrumentationKey\": \"\", //relevant \n```", "```cs\n                                                //key\n```", "```cs\n  \"ConnectionStrings:Redis\": \"\" //connection string\n```", "```cs\n}\n```", "```cs\npublic class ProductListViewModel\n```", "```cs\n{\n```", "```cs\n        [JsonProperty(PropertyName = \"id\")]\n```", "```cs\n        public string Id { get; set; }\n```", "```cs\n        public string Name { get; set; }\n```", "```cs\n        public int Price { get; set; }\n```", "```cs\n        public Uri ImageUrl { get; set; }\n```", "```cs\n        public double AverageRating { get; set; }\n```", "```cs\n}\n```", "```cs\npublic class ProductDetailsViewModel\n```", "```cs\n{\n```", "```cs\n        [Required]\n```", "```cs\n        public string Id { get; set; }\n```", "```cs\n        [Required]\n```", "```cs\n        public string Name { get; set; }\n```", "```cs\n        [Required]\n```", "```cs\n        public string Category { get; set; }\n```", "```cs\n        [Required]\n```", "```cs\n        [Range(0, 9999)]\n```", "```cs\n        public int Price { get; set; }\n```", "```cs\n        [Required]\n```", "```cs\n        [Range(0, 999, ErrorMessage = \"Large quantity, \n```", "```cs\n         please reach out to support to process request.\")]\n```", "```cs\n        public int Quantity { get; set; }\n```", "```cs\n        public DateTime CreatedDate { get; set; }\n```", "```cs\n        public List<string> ImageUrls { get; set; }\n```", "```cs\n        public List<RatingViewModel> Rating { get; set; }\n```", "```cs\n        public List<string> Format { get; set; }\n```", "```cs\n        public List<string> Authors { get; set; }\n```", "```cs\n        public List<int> Size { get; set; }\n```", "```cs\n        public List<string> Color { get; set; }\n```", "```cs\n        public string Etag { get; set; }\n```", "```cs\n}\n```", "```cs\npublic class RatingViewModel\n```", "```cs\n{\n```", "```cs\n        public int Stars { get; set; }\n```", "```cs\n        public int Percentage { get; set; }\n```", "```cs\n}\n```", "```cs\npublic interface IProductService\n```", "```cs\n    {\n```", "```cs\n        Task<IEnumerable<ProductListViewModel>> \n```", "```cs\n          GetProductsAsync(string filterCriteria = null);\n```", "```cs\n        Task<ProductDetailsViewModel> \n```", "```cs\n          GetProductByIdAsync(string productId, \n```", "```cs\n            string productName);\n```", "```cs\n        Task<ProductDetailsViewModel> \n```", "```cs\n          AddProductAsync(ProductDetailsViewModel product);\n```", "```cs\n        Task<HttpResponseMessage> \n```", "```cs\n          UpdateProductAsync(ProductDetailsViewModel \n```", "```cs\n            product);\n```", "```cs\n        Task<HttpResponseMessage> DeleteProductAsync(\n```", "```cs\n          string productId, string productName);\n```", "```cs\n    }\n```", "```cs\n    public class AutoMapperProfile : Profile\n```", "```cs\n    {\n```", "```cs\n        public AutoMapperProfile()\n```", "```cs\n        {\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\nprivate void MapEntity()\n```", "```cs\n{\n```", "```cs\n            this.CreateMap<Data.Models.Product, \n```", "```cs\n              DTO.Models.ProductDetailsViewModel>();\n```", "```cs\n            this.CreateMap<Data.Models.Rating, \n```", "```cs\n              DTO.Models.RatingViewModel>();\n```", "```cs\n            this.CreateMap<Data.Models.Product, \n```", "```cs\n              DTO.Models.ProductListViewModel>()\n```", "```cs\n                .ForMember(x => x.AverageRating, o => \n```", "```cs\n                  o.MapFrom(a => a.Rating != null ? \n```", "```cs\n                  a.Rating.Average(y => y.Stars) : 0));\n```", "```cs\n}\n```", "```cs\nBuilder.Services.AddAutoMapper(typeof(AutoMapperProfile));\n```", "```cs\n    builder.Services.AddHttpClient<IProductService, ProductsService>()\n           .SetHandlerLifetime(TimeSpan.FromMinutes(5))\n           .AddPolicyHandler(RetryPolicy()) // Retry \n                                            // policy.\n           .AddPolicyHandler(CircuitBreakerPolicy()); \n           // Circuit breakerpolicy\n    ```", "```cs\nstatic IAsyncPolicy<HttpResponseMessage> CircuitBreakerPolicy()\n```", "```cs\n{\n```", "```cs\n    return HttpPolicyExtensions\n```", "```cs\n        .HandleTransientHttpError()\n```", "```cs\n        .CircuitBreakerAsync(5, TimeSpan.FromSeconds(30));\n```", "```cs\n}\n```", "```cs\nprivate static IAsyncPolicy<HttpResponseMessage> RetryPolicy()\n```", "```cs\n{\n```", "```cs\n    Random random = new Random();\n```", "```cs\n    var retryPolicy = HttpPolicyExtensions\n```", "```cs\n        .HandleTransientHttpError()\n```", "```cs\n        .OrResult(msg => msg.StatusCode == \n```", "```cs\n          System.Net.HttpStatusCode.NotFound)\n```", "```cs\n        .WaitAndRetryAsync(\n```", "```cs\n        5,\n```", "```cs\n        retry => TimeSpan.FromSeconds(Math.Pow(2, retry))\n```", "```cs\n         + TimeSpan.FromMilliseconds(random.Next(0, 100)));\n```", "```cs\n    return retryPolicy;\n```", "```cs\n}\n```", "```cs\nprivate readonly IOptions<ApplicationSettings> applicationSettings;\n```", "```cs\nprivate readonly HttpClient httpClient;\n```", "```cs\nprivate readonly IMapper autoMapper;\n```", "```cs\nprivate readonly IDistributedCacheService cacheService;\n```", "```cs\npublic ProductsService(IHttpClientFactory httpClientFactory, IOptions<ApplicationSettings> applicationSettings, IMapper autoMapper, IDistributedCacheService cacheService)\n```", "```cs\n{\n```", "```cs\n    NotNullValidator.ThrowIfNull(applicationSettings, \n```", "```cs\n      nameof(applicationSettings));\n```", "```cs\n    IHttpClientFactory httpclientFactory = \n```", "```cs\n      httpClientFactory;\n```", "```cs\n    this.applicationSettings = applicationSettings;\n```", "```cs\n    this.httpClient = httpclientFactory.CreateClient();\n```", "```cs\n    this.autoMapper = autoMapper;\n```", "```cs\n    this.cacheService = cacheService;\n```", "```cs\n}\n```", "```cs\nprivate async Task ThrowServiceToServiceErrors(HttpResponseMessage response)\n```", "```cs\n{\n```", "```cs\n    var exceptionReponse = await response.Content.ReadFromJsonAsync<ExceptionResponse>().ConfigureAwait(false);\n```", "```cs\n    throw new Exception(exceptionReponse.InnerException);\n```", "```cs\n}\n```", "```cs\npublic async Task<IEnumerable<ProductListViewModel>> GetProductsAsync(string filterCriteria = null)\n```", "```cs\n{\n```", "```cs\n    var products = await this.cacheService\n```", "```cs\n      .GetCacheAsync<IEnumerable<Packt.Ecommerce\n```", "```cs\n      .Data.Models.Product>>($\"products{filterCriteria}\")\n```", "```cs\n      .ConfigureAwait(false);\n```", "```cs\n    if (products == null)\n```", "```cs\n    {\n```", "```cs\n        using var productRequest = new \n```", "```cs\n          HttpRequestMessage(HttpMethod.Get, \n```", "```cs\n          $\"{this.applicationSettings.Value\n```", "```cs\n           .DataStoreEndpoint}api/products\n```", "```cs\n           ?filterCriteria={filterCriteria}\");\n```", "```cs\n        var productResponse = await this.httpClient\n```", "```cs\n         .SendAsync(productRequest).ConfigureAwait(false);\n```", "```cs\n        if (!productResponse.IsSuccessStatusCode)\n```", "```cs\n        {\n```", "```cs\n            await this.ThrowServiceToServiceErrors(\n```", "```cs\n              productResponse).ConfigureAwait(false);\n```", "```cs\n        }\n```", "```cs\n        products = await productResponse.Content\n```", "```cs\n          .ReadFromJsonAsync<IEnumerable<Packt\n```", "```cs\n          .Ecommerce.Data.Models.Product>>()\n```", "```cs\n          .ConfigureAwait(false);\n```", "```cs\n        if (products.Any())\n```", "```cs\n        {\n```", "```cs\n            await this.cacheService.AddOrUpdateCacheAsync\n```", "```cs\n              <IEnumerable<Packt.Ecommerce.Data.Models\n```", "```cs\n             .Product>>($\"products{filterCriteria}\", \n```", "```cs\n             products).ConfigureAwait(false);\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n    var productList = this.autoMapper.Map<List\n```", "```cs\n      <ProductListViewModel>>(products);\n```", "```cs\n    return productList;\n```", "```cs\n}\n```", "```cs\nbuilder.Services.AddScoped<IProductService, ProductsService>();\n```", "```cs\n[HttpGet]\n```", "```cs\n[Route(\"{id}\")]\n```", "```cs\npublic async Task<IActionResult> GetProductById(string id, [FromQuery][Required]string name)\n```", "```cs\n{\n```", "```cs\n    // FromQuery supports reading parameters from query \n```", "```cs\n    // string, here the value of the query string parameter \n```", "```cs\n    // 'name' will be mapped to name parameter.\n```", "```cs\n    var product = await \n```", "```cs\n      this.productService.GetProductByIdAsync(id, \n```", "```cs\n      name).ConfigureAwait(false);\n```", "```cs\n    if (product != null)\n```", "```cs\n    {\n```", "```cs\n        return this.Ok(product);\n```", "```cs\n    }\n```", "```cs\n    else\n```", "```cs\n    {\n```", "```cs\n        return this.NoContent();\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\n[HttpPost]\n```", "```cs\npublic async Task<IActionResult> AddProductAsync(ProductDetailsViewModel product)\n```", "```cs\n{\n```", "```cs\n    // Product null check is to avoid null attribute \n```", "```cs\n    // validation error.\n```", "```cs\n    if (product == null || product.Etag != null)\n```", "```cs\n    {\n```", "```cs\n        return this.BadRequest();\n```", "```cs\n    }\n```", "```cs\n    var result = await this.productService\n```", "```cs\n      .AddProductAsync(product).ConfigureAwait(false);\n```", "```cs\n    return this.CreatedAtAction(nameof(\n```", "```cs\n      this.GetProductById), new { id = result.Id, name = \n```", "```cs\n      result.Name }, result); // HATEOS principle\n```", "```cs\n}\n```", "```cs\nservice Greeter {\n```", "```cs\n  // Sends a greeting\n```", "```cs\n  rpc SayHello (HelloRequest) returns (HelloReply);\n```", "```cs\n}\n```", "```cs\nmessage HelloRequest {\n```", "```cs\n  string name = 1;\n```", "```cs\n}\n```", "```cs\nmessage HelloReply {\n```", "```cs\n  string message = 1;\n```", "```cs\n}\n```", "```cs\npublic class GreeterService : Greeter.GreeterBase\n```", "```cs\n{\n```", "```cs\n    private readonly ILogger<GreeterService> _logger;\n```", "```cs\n    public GreeterService(ILogger<GreeterService> logger)\n```", "```cs\n    {\n```", "```cs\n        _logger = logger;\n```", "```cs\n    }\n```", "```cs\n    public override Task<HelloReply> SayHello(\n```", "```cs\n      HelloRequest request, ServerCallContext context)\n```", "```cs\n    {\n```", "```cs\n        return Task.FromResult(new HelloReply\n```", "```cs\n        {\n```", "```cs\n            Message = \"Hello \" + request.Name\n```", "```cs\n        });\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\napp.MapGrpcService<GreeterService>();\n```", "```cs\n        var channel = GrpcChannel.ForAddress(\"https://localhost:5001\");\n        var client = new Greeter.GreeterClient(channel);\n        HelloReply response = await client.SayHelloAsync(new HelloRequest { Name=\"Suneel\" });\n        Console.WriteLine(response.Message);\n    ```", "```cs\ngrpcurl -d \"{\\\"name\\\": \\\"World\\\"}\" localhost:5001 greet.Greeter/SayHello\n```"]