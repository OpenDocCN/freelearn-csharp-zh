- en: Chapter 3. Enhancing your UI
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 章。增强你的 UI
- en: 'In this chapter, we will learn how to enhance our UI experience by using more
    advanced features, which are as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何通过使用更高级的功能来增强我们的 UI 体验，具体如下：
- en: Draggable panels and animations
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可拖动面板和动画
- en: The drag-and-drop system
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖放系统
- en: Automatic content alignment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动内容对齐
- en: Clipping
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪切
- en: Scrollable text
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可滚动文本
- en: The localization system
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地化系统
- en: Let's start by talking about NGUI components and their overall behavior.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先谈谈 NGUI 组件及其整体行为。
- en: NGUI components
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NGUI 组件
- en: In [Chapter 2](ch02.html "Chapter 2. Creating Widgets"), *Creating Widgets*,
    we added the **UIStretch** and **UIAnchor** components to our widgets, and also
    the **Load Level On Click** component. There are many more components, and the
    purpose of this chapter is to discuss these components. We will use the most important
    ones in this chapter. It is possible to add a component to any kind of widget—considering
    it is logical of course.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 2 章](ch02.html "第 2 章。创建小部件")，*创建小部件*，我们向我们的小部件添加了 **UIStretch** 和 **UIAnchor**
    组件，以及 **点击加载级别** 组件。还有许多其他组件，本章的目的是讨论这些组件。我们将在本章中使用最重要的组件。当然，可以将组件添加到任何类型的小部件中。
- en: This component-oriented structure makes NGUI extremely flexible and modular.
    We will start by making our main menu a draggable window.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这种面向组件的结构使 NGUI 非常灵活和模块化。我们将从将我们的主菜单制作成可拖动窗口开始。
- en: The draggable panel
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可拖动面板
- en: 'We will now learn how to turn our menu into a draggable window. Let''s add
    the correct component to it and study its parameters, which are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何将我们的菜单转换成可拖动窗口。让我们添加正确的组件并研究其参数，如下所示：
- en: Select the **Panel** GameObject.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **面板** 游戏对象。
- en: Rename it as `MainMenu`.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 `MainMenu`。
- en: Attach the **Draggable Panel** component to it by navigating to **Component**
    | **NGUI** | **Interaction**.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **交互**，将 **可拖动面板** 组件附加到它上。
- en: The **MainMenu** GameObject now has a **UIDraggable Panel** component attached
    to it.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**MainMenu** 游戏对象现在已附加了一个 **UIDraggable Panel** 组件。'
- en: Parameters
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'The following are the 13 parameters for setting values in the **UIDraggable
    Panel**:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 **UIDraggable Panel** 中设置值的 13 个参数：
- en: '**Drag Effect**: This is the effect used while dragging the panel to have a
    smoother drag.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拖动效果**：这是在拖动面板时使用的效果，以实现更平滑的拖动。'
- en: '**Restrict Within Panel**: This uses the parent panel to restrain the draggable
    panel within its clipping bounds.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制在面板内**：这使用父面板来限制可拖动面板在其剪切边界内。'
- en: '**Disable Drag If Fits**: If the content fits the parent panel''s clipping
    bounds, dragging will be disabled.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果适合则禁用拖动**：如果内容适合父面板的剪切边界，则将禁用拖动。'
- en: '**Smooth Drag Start**: This avoids a "jump" effect on drag start.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑拖动开始**：这避免了拖动开始时的“跳跃”效果。'
- en: '**Reposition Clipping**: This repositions the **Clipping** to the **Top Left
    Corner** immediately.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重新定位剪切**：这立即将 **剪切** 重新定位到 **左上角**。'
- en: '**IOS Drag Emulation**: Dragging movement speed is reduced when overpassing
    the clipping edges.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS 拖动模拟**：当超过剪切边缘时，拖动移动速度会降低。'
- en: '**Scroll Wheel Factor**: If you want the scroll wheel to drag the panel on
    the y axis, set this value to greater than 0.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滚动轮因子**：如果你想使滚动轮在 y 轴上拖动面板，将此值设置为大于 0。'
- en: '**Momentum Amount**: This is the effect applied when the panel is dropped.
    The panel will keep moving after releasing the scroll wheel.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动量量**：这是当面板放下时应用的效果。释放滚动轮后，面板将继续移动。'
- en: '**Horizontal Scroll Bar**: This lets you drag a scroll bar to define it as
    the panel''s horizontal scroll bar.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**水平滚动条**：这允许你拖动一个滚动条来将其定义为面板的水平滚动条。'
- en: '**Vertical Scroll Bar**: This lets you drag another scroll bar to define it
    as the panel''s vertical scroll bar.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**垂直滚动条**：这允许你拖动另一个滚动条来将其定义为面板的垂直滚动条。'
- en: '**Show Scroll Bars**: This allows you to show scroll bars always, show them
    only if necessary, or show them while dragging.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示滚动条**：这允许你始终显示滚动条，仅在需要时显示它们，或者拖动时显示。'
- en: '**Scale**: This defines which axis the panel should drag on: `0` means no dragging,
    `1` allows full dragging on this axis.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩放**：这定义了面板应该拖动的轴：`0` 表示不允许拖动，`1` 允许在此轴上完全拖动。'
- en: '**Relative Position On Reset**: This is the offset relative to the mouse''s
    position. It is useful if you want an offset from the mouse''s position while
    dragging.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重置时的相对位置**：这是相对于鼠标位置的偏移量。如果你想在拖动时从鼠标位置偏移，这很有用。'
- en: Now that we have seen the component's parameters, let's use them to drag our
    main menu.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了组件的参数，让我们使用它们来拖动我们的主菜单。
- en: Dragging the MainMenu
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拖动主菜单
- en: We have added the **UIDraggable Panel** component that sets this **UIPanel**
    as a **Draggable Panel**. Now, we must mark our **MainMenu** as the GameObject
    that holds the draggable content.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了将此 **UIPanel** 设置为 **Draggable Panel** 的 **UIDraggable Panel** 组件。现在，我们必须标记我们的
    **MainMenu** 为包含可拖动内容的 GameObject。
- en: 'We will also add a **Box Collider** component to define where the user must
    click to drag the panel:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将添加一个 **Box Collider** 组件来定义用户必须点击以拖动面板的位置：
- en: 'Select our **MainMenu** GameObject and perform the following steps:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **MainMenu** GameObject 并执行以下步骤：
- en: Set the **Clipping** parameter of **UIPanel** to **Alpha Clip**.
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **UIPanel** 的 **Clipping** 参数设置为 **Alpha Clip**。
- en: Set the **Size** field in **Clipping** to `1920` x `1080`.
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Clipping** 中的 **Size** 字段设置为 `1920` x `1080`。
- en: Uncheck the **IOS Drag Emulation** Boolean.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择 **IOS Drag Emulation** 布尔值。
- en: Add the **Drag Panel Contents** component to it.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向它添加 **Drag Panel Contents** 组件。
- en: 'Add the **Box Collider** component to it and perform the following steps:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向它添加 **Box Collider** 组件并执行以下步骤：
- en: Check the **Is Trigger** Boolean—we don't need collisions, just a trigger to
    receive Raycasts from the **UICamera**.
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Is Trigger** 布尔值——我们不需要碰撞，只需要一个触发器来接收来自 **UICamera** 的射线投射。
- en: Set its **Center** coordinates to {`0`, `395`, `0`}.
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **中心** 坐标设置为 `{`0`, `395`, `0`}`。
- en: Set its **Size** coordinates to {`1300`, `62`, `1`}.
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **大小** 坐标设置为 `{`1300`, `62`, `1`}`。
- en: Click on the play button. By clicking on the window's title, you can drag the
    main menu. But still, it isn't configured correctly; you can only move it on the
    x axis.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮。通过点击窗口的标题，你可以拖动主菜单。但仍然配置不正确；你只能在 x 轴上移动它。
- en: 'Let''s change an important parameter of the **UIDraggable Panel** component
    of **MainMenu** to allow dragging on the x axis by performing the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过执行以下步骤更改 **MainMenu** 的 **UIDraggable Panel** 组件的一个重要参数，以允许在 x 轴上拖动：
- en: Select our **MainMenu** GameObject.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **MainMenu** GameObject。
- en: Set **Scale** in **UIDraggable Panel** to {`1`, `1`, `0`}.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **UIDraggable Panel** 中设置 **Scale** 为 `{`1`, `1`, `0`}`。
- en: And that's it! Our **MainMenu** is now draggable on both the axes. If you drag
    it outside the screen, it will move back inside when dropped. We had to define
    a clipping of the screen's size for this **Restrict Within Panel** function to
    work.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！我们的 **MainMenu** 现在可以在两个轴上拖动了。如果你将其拖出屏幕，放下时它会自动回到屏幕内。我们必须定义屏幕大小的剪辑，以便此 **Restrict
    Within Panel** 功能能够工作。
- en: The drag-and-drop system
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拖放系统
- en: 'We will now create our own **drag-and-drop** system that will enable the user
    to select a power. They will be able to drag one of the two available powers inside
    a selection box as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将创建自己的 **拖放** 系统，该系统将使用户能够选择一个能力。他们可以在以下截图所示的选框内拖动两个可用能力之一：
- en: '![The drag-and-drop system](img/8667OT_03_01.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![拖放系统](img/8667OT_03_01.jpg)'
- en: Powers selection
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 能力选择
- en: 'Let''s create a drag-and-drop system to select which of the two powers the
    player can choose: a **Bomb** power, which will explode or a **Time** power, which
    will slow down time for a few seconds.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个拖放系统来选择玩家可以选择的两个能力之一：一个 **炸弹** 能力，它将爆炸；或者一个 **时间** 能力，它将使时间慢几秒钟。
- en: Draggable items container
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可拖动物品容器
- en: 'Let''s start by creating a nice box for our powers and a draggable items container
    by performing the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先创建一个漂亮的盒子来放置我们的能力，并通过执行以下步骤创建一个可拖动物品容器：
- en: 'Select our **MainMenu** GameObject and perform the given steps:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **MainMenu** GameObject 并执行以下步骤：
- en: Create a new empty child GameObject by pressing *Alt* + *Shift* + *N*.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Alt* + *Shift* + *N* 创建一个新的空子 GameObject。
- en: Rename it as `Powers`.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 `Powers`。
- en: 'Select the **Background** and **Label** GameObjects from **Sound**:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Sound** 中选择 **Background** 和 **Label** GameObject：
- en: Duplicate them.
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制它们。
- en: Drag these new duplicates inside our **Powers** GameObject.
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这些新的副本拖放到我们的 **Powers** GameObject 内部。
- en: 'Select the **Background** GameObject in **Powers** and perform these steps:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Powers** 中选择 **Background** GameObject 并执行以下步骤：
- en: Set its **Dimensions** to `320` x `420`.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **尺寸** 设置为 `320` x `420`。
- en: Set the **Pixel Offset** in **UIAnchor** to {`0`, `-100`}.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **UIAnchor** 中设置 **像素偏移** 为 `{`0`, `-100`}`。
- en: 'Select the **Label** GameObject in **Powers**:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Powers** 中选择 **Label** GameObject：
- en: Rename it as `TitleLabel`.
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 `TitleLabel`。
- en: Change its text to `[AAFFFF]Powers`.
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为 `[AAFFFF]Powers`。
- en: 'Select the **Label** GameObject, which is a child of **Title**, and perform
    the following steps:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择作为 **Title** 的子对象的 **Label** GameObject 并执行以下步骤：
- en: Duplicate it.
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制它。
- en: Rename this new duplicate as `SelectedLabel`.
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our **Powers** GameObject.
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Background** GameObject in **Powers** to the **Container** field
    in its **UIAnchor**.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Side** parameter in **UIAnchor** to **Top**.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-95`}.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Font** to `SciFi Font – Normal`.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Selected`.
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **SelectedLabel** GameObject in **Powers** and perform the following
    steps:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `AvailableLabel`.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Available`.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-295`}.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **SelectedLabel GameObject** in **Powers** and perform these steps:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate it as `InstructionsLabel`.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change text to `[55AA99]Drag Power Here`—one word per line.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Overflow** parameter to **Shrink Content**.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `4`.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `128` x `45`.
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-175`}.
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Background** sprite GameObject in **Powers** and perform the following
    steps:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `PowersContainer`.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `215` x `90`.
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Color Tint** to {`100`, `100`, `100`, `255`}.
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `3`.
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **AvailableLabel** GameObject from **Powers** to the **Container**
    field in its **UIAnchor**.
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-60`}.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, we now have our powers box with the correct labels and a background.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: Draggable items
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that we have the PowersContainer, let''s create the following two draggable
    items:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '![Draggable items](img/8667OT_03_02.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
- en: 'Follow the ensuing steps to create them:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Select our **PowersContainer** GameObject in **Powers**.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new child GameObject with *Alt* + *Shift* + *N* and rename it as `Bomb`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Collider** object to it by navigating to **NGUI** | **Attach**.
    It will be used to detect the mouse and receive the correct messages for the drag-and-drop
    system by performing the following steps:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Is Trigger** Boolean.
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Size** field of new **Box Collider** to {`90`, `90`, `1`}.
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Drag Object** component to it by navigating to **Component** | **NGUI**
    | **Interaction**:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag our **Bomb** from **PowersContainer** in its **Target** field.
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Scale** to {`1`, `1`, `0`}.
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Momentum Amount** to `0`.
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select and duplicate the **Background** sprite GameObject in **Powers**. Then
    perform the following steps:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our new **Bomb** GameObject.
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `5`.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Dimensions** to `90` x `90`.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **UIAnchor** component.
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position values to {`0`, `0`, `0`}.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select and duplicate the **AvailableLabel** GameObject in **Powers**. Then
    perform these steps:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename that new duplicate as `Label`.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag it inside our new **Bomb** GameObject.
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its text to `[AAFFFF]Bomb`.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `6`.
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove its **UIAnchor** component.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position values to {`0`, `0`, `0`}.
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**变换**位置值重置为{`0`, `0`, `0`}。
- en: Select our **Bomb** GameObject.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中我们的**炸弹**GameObject。
- en: 'Attach a **Button Color** component to it by navigating to **Component** |
    **NGUI** | **Interaction** and perform these steps:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **交互**来将其附加一个**按钮颜色**组件，并执行以下步骤：
- en: Drag our **Background** GameObject from **Bomb** to the **Target** field.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**背景**GameObject从**炸弹**拖动到**目标**字段。
- en: Set its **Pressed**color to {`0`, `255`, `0`, `150`}.
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**按下**颜色设置为{`0`, `255`, `0`, `150`}。
- en: Create a new `DragItem.cs` C# script and attach this script to the **Button
    Color** component.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`DragItem.cs` C#脚本并将其附加到**按钮颜色**组件。
- en: 'We have one draggable Bomb power with a `DragItem.cs` script attached to it.
    Let''s create the second Time power by performing the following steps:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个带有`DragItem.cs`脚本附加的可拖动炸弹力量。让我们通过以下步骤创建第二个时间力量：
- en: Select and duplicate our **Bomb** GameObject in **PowersContainer**.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**PowersContainer**中选中并复制我们的**炸弹**GameObject。
- en: Rename that new duplicate as `Time`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为`Time`。
- en: Select our new **Label** GameObject, which is a child of **Time**.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中我们的新**标签**GameObject，它是**时间**的子对象。
- en: Change its text to `[AAFFFF]Time`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为`[AAFFFF]时间`。
- en: 'Ok, we now have our two draggable Powers, and they are on top of each other.
    Let''s correct this using Anchors and a Grid component, which will automatically
    align our items. We can do this using the following steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有两个可拖动的力量，并且它们重叠在一起。让我们使用锚点和网格组件来纠正这个问题，这将自动对齐我们的项目。我们可以使用以下步骤来完成：
- en: Select our **PowersContainer** GameObject.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中我们的**PowersContainer**GameObject。
- en: Create a new child by pressing *Alt* + *Shift* + *N* and rename this new child
    as `Grid`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Alt* + *Shift* + *N*创建一个新的子对象，并将其重命名为`Grid`。
- en: Attach a **Grid** component to it by navigating to **Component** | **NGUI**
    | **Interaction**.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **交互**来将其附加一个**网格**组件。
- en: Drag both our **Bomb** and **Time** GameObjects in our new **Grid** GameObject.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**炸弹**和**时间**GameObject拖动到我们新的**Grid**GameObject中。
- en: 'Select our **Grid** GameObject and perform the following steps:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中我们的**Grid**GameObject并执行以下步骤：
- en: Set its **Cell Width** to `105`.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**单元格宽度**设置为`105`。
- en: Check the **Sorted** Boolean.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中**排序**布尔值。
- en: Check the **Reposition Now** Boolean to update the table.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中**立即重置位置**布尔值以更新表格。
- en: Set its **Transform** position to {`-52`, `0`, `0`}.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**变换**位置设置为{`-52`, `0`, `0`}。
- en: 'The UIGrid component automatically aligns its children. We now have our two
    draggable powers aligned. If you click on play, you''ll see that you can drag
    them around as shown in the following screenshot:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: UIGrid组件自动对其子对象进行对齐。我们现在有两个可拖动的力量对齐。如果你点击播放，你会看到你可以像以下截图所示那样拖动它们：
- en: '![Draggable items](img/8667OT_03_03.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![可拖动物品](img/8667OT_03_03.jpg)'
- en: The drop surface
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 掉落表面
- en: We will create a new **Surface** GameObject with a `DropSurface.cs` script and
    a **Box Collider** component to define where the draggable items can be dropped.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个新的**Surface**GameObject，并附加一个`DropSurface.cs`脚本和一个**Box Collider**组件来定义可拖动物品可以放置的位置。
- en: When the user drops an object with a **DragItem** component on the **Surface**
    GameObject, the **DragItem** component will be destroyed, and a "dropped version"
    of the object will be instantiated as a child of the **Surface** GameObject.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将带有**DragItem**组件的对象拖放到**Surface**GameObject上时，**DragItem**组件将被销毁，并且将实例化一个“掉落版本”的对象，作为**Surface**GameObject的子对象。
- en: 'First, let''s create and configure the **Surface** GameObject by performing
    the following steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们通过以下步骤创建和配置**Surface**GameObject：
- en: Select and duplicate our **Background** GameObject from **Powers** and rename
    this new duplicate as `Surface`.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中并复制我们的**背景**GameObject从**Powers**，并将新副本重命名为`Surface`。
- en: 'Select our new **Surface** GameObject from **Powers** and perform these steps:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Powers**中选择我们的新**Surface**GameObject并执行以下步骤：
- en: Change its **Sprite** to **Highlight**.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**精灵**更改为**高亮**。
- en: Change its **Color Tint** to {`0`, `25`, `5`, `255`}.
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**颜色色调**更改为{`0`, `25`, `5`, `255`}。
- en: Set its **Depth** to `3`.
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**深度**设置为`3`。
- en: Set its **Dimensions** to `130` x `130`.
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**尺寸**设置为`130` x `130`。
- en: Drag our **SelectedLabel** GameObject from **Powers** to the **Container** field
    in its **UIAnchor**.
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**SelectedLabel**GameObject从**Powers**拖动到其**UIAnchor**中的**容器**字段。
- en: Set its **Pixel Offset** to {`0`, `-80`}.
  id: totrans-160
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**像素偏移**设置为{`0`, `-80`}。
- en: 'Attach a **Collider** object to it by navigating to **NGUI** | **Attach** |
    **Collider**. It will detect **DragItems**. Then perform the following steps:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **Collider**来将其附加一个**Collider**对象。它将检测**DragItems**。然后执行以下步骤：
- en: Check its **Is Trigger** Boolean.
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选中其**是否触发**布尔值。
- en: Set its **Size** to {`130`, `130`, `1`}.
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**大小**设置为`{`130`，`130`，`1`}`。
- en: Create and attach a new `DropSurface.cs` C# script to it.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并附加一个新的`DropSurface.cs` C#脚本。
- en: Good, our surface is now ready to detect our items.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们的表面现在已准备好检测我们的物品。
- en: Prefab instantiated on drop
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 放置时实例化的预制体
- en: 'Now, we need to create two prefabs for our powers that will be instantiated
    as children of the **Surface** GameObject when a **DragItem** component is dropped
    on it. They will look as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的能力创建两个预制体，当在**Surface**GameObject上放置**DragItem**组件时，它们将被实例化为该GameObject的子组件。它们将如下所示：
- en: '![Prefab instantiated on drop](img/8667OT_03_04.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![放置时实例化的预制体](img/8667OT_03_04.jpg)'
- en: 'Let''s create these prefabs by performing the following steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建这些预制体：
- en: 'Select the **Bomb** GameObject from **Grid** and the following steps:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**网格**中选择**炸弹**GameObject，然后按照以下步骤操作：
- en: Duplicate it.
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制它。
- en: Rename it as `SelectedBomb`.
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为`SelectedBomb`。
- en: 'Select our new **SelectedBomb** GameObject from **Grid**. Then perform the
    following steps:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**网格**中选择我们新的**SelectedBomb**GameObject。然后执行以下步骤：
- en: 'Change its **Normal** color tint to **R**: `0`, **G**: `145`, **B**: `60`,
    and **A**: `255`.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将其**正常**颜色色调更改为**R**: `0`，**G**: `145`，**B**: `60`，和**A**: `255`。'
- en: Remove its **Box Collider** component.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除其**盒子碰撞器**组件。
- en: Remove its **Drag Item** component.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除其**Drag Item**组件。
- en: Create and attach a new `Power.cs` C# script to it.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并附加一个新的`Power.cs` C#脚本。
- en: 'Select the **Background** sprite GameObject from **SelectedBomb**. Then perform
    the following steps:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**SelectedBomb**中选择**背景**sprite GameObject，然后执行以下步骤：
- en: Change the **Sprite** to **Light**.
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**精灵**更改为**光**。
- en: Set its **Depth** to `4`.
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**深度**设置为`4`。
- en: Set its **Dimensions** to `120` x `120`.
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**尺寸**设置为`120` x `120`。
- en: Select the **Label** GameObject from **SelectedBomb** and set its **Depth**
    to `5`.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**SelectedBomb**中选择**标签**GameObject，并将其**深度**设置为`5`。
- en: Drag our **SelectedBomb** GameObject into a folder of your choice in your **Project**
    view to create a prefab from it.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**SelectedBomb**GameObject拖放到项目视图中的您选择的文件夹中，以从它创建一个预制体。
- en: Once our **SelectedBomb** is a prefab (blue in the scene's **Hierarchy**), you
    may delete it from the scene.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们的**SelectedBomb**成为预制体（场景的**层次结构**中为蓝色）时，您可以将其从场景中删除。
- en: 'We now have our **SelectedBomb** prefab. Let''s declare a variable in our `DragItem.cs`
    script that will store the prefab to instantiate on drop. We can do this by following
    the ensuing steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了我们的**SelectedBomb**预制体。让我们在我们的`DragItem.cs`脚本中声明一个变量，该变量将存储在放置时实例化的预制体。我们可以通过以下步骤完成此操作：
- en: Select our **Bomb** GameObject from **Grid**.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**网格**中选择我们的**炸弹**GameObject。
- en: 'Open the `DragItem.cs` script attached to it and add this public variable using
    the following code:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开附加到其上的`DragItem.cs`脚本，并使用以下代码添加此公共变量：
- en: '[PRE0]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Save the script and go back to Unity.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回Unity。
- en: Select our **Bomb** GameObject from **Grid** and drag our **SelectedBomb** prefab
    from the Project view in the **Create On Drop** field in its **Drag Item**.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**网格**中选择我们的**炸弹**GameObject，并将项目视图中的**SelectedBomb**预制体拖放到其**Drag Item**的**创建时放置**字段中。
- en: 'Now let''s do the same for our **Time** power in the following manner:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们以以下方式为我们的**时间**能力做同样的事情：
- en: 'Select our **SelectedBomb** prefab in the **Project** view and perform the
    following steps:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**视图中选择我们的**SelectedBomb**预制体，并执行以下步骤：
- en: Duplicate it with *Ctrl* + *D*.
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Ctrl* + *D*复制它。
- en: Rename the new duplicate prefab as `SelectedTime`.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的副本预制体重命名为`SelectedTime`。
- en: Select its **Label** child GameObject and change its text to `[AAFFFF]Time`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择其**标签**子GameObject，并将其文本更改为`[AAFFFF]Time`。
- en: Select our **Time** GameObject from **Grid** in the scene's **Hierarchy**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景的**层次结构**中从**网格**中选择我们的**时间**GameObject。
- en: Drag our **SelectedTime** prefab from the **Project** view in the **Create On
    Drop** field in its **Drag Item**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图中的**Drag Item**的**创建时放置**字段中拖动我们的**SelectedTime**预制体。
- en: 'We can now add an `OnDrop()` method to our `DropSurface.cs` script to handle
    dropped objects in the following manner:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以向`DropSurface.cs`脚本添加一个`OnDrop()`方法来以以下方式处理放置的对象：
- en: Select our **Surface** GameObject from **Powers**.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Powers**中选择我们的**Surface**GameObject。
- en: Open its attached `DropSurface.cs` script.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开其附加的`DropSurface.cs`脚本。
- en: 'The `OnDrop()` event has one argument: the `dropped` GameObject. Let''s add
    this method to our script to handle the drop by using the following code snippet:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnDrop()`事件有一个参数：`dropped` GameObject。让我们将此方法添加到我们的脚本中，以使用以下代码片段处理拖放操作：'
- en: '[PRE1]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the script and click on the play button. When you drop a power on the **Surface**
    GameObject, nothing happens! Why?
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并点击播放按钮。当您将能力拖放到**Surface**GameObject上时，没有任何操作！为什么？
- en: That's because the `OnDrop()` event depends on the Raycast from `Camera`, and
    at the moment of the drop, our dragged power's **Box Collider** component is in
    the way of the mouse cursor and the **Surface** GameObject.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为 `OnDrop()` 事件依赖于从 `Camera` 发出的射线投射，并且在拖拽释放的瞬间，我们拖拽的能量的 **Box Collider**
    组件挡在了鼠标光标和 **Surface** 游戏对象之间。
- en: 'We just have to disable the collider of **Power** while it is dragged. We can
    do this in the following manner:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需在拖拽时禁用 **Power** 的碰撞器。我们可以通过以下方式完成：
- en: Select our **Bomb** GameObject from **Grid**.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Grid** 中选择我们的 **Bomb** 游戏对象。
- en: Open its attached `DragItem.cs` script.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开其附加的 `DragItem.cs` 脚本。
- en: 'We will use the `OnPress()` event to do this. The `OnPress()` method will take
    the object''s `pressed` state as an argument in the following manner:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `OnPress()` 事件来完成这个操作。`OnPress()` 方法将以以下方式将对象的 `pressed` 状态作为参数：
- en: '[PRE2]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Save the script and click on play. You can now drag-and-drop the powers on the
    surface!
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并点击播放。你现在可以在表面上拖拽和释放能量了！
- en: Handling an invalid drop
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理无效的释放
- en: Now, let's make sure power is repositioned to its default position if the user
    drops it outside the **Surface** GameObject.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们确保如果用户将能量拖拽到 **Surface** 游戏对象外部，能量会重新定位到默认位置。
- en: 'To achieve this, we can check the camera''s last hit when the `OnPress(false)`
    event occurs. Open our `DragItem.cs` and add the following lines after `collider.enabled
    = !pressed`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，我们可以在 `OnPress(false)` 事件发生时检查摄像机的最后击中点。打开我们的 `DragItem.cs` 并在 `collider.enabled
    = !pressed` 之后添加以下行：
- en: '[PRE3]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Save and click on play. If you drop a Power anywhere but on the **Surface**
    GameObject, our items will be repositioned automatically. Great!
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并点击播放。如果你在 **Surface** 游戏对象以外的任何地方释放能量，我们的项目将会自动重新定位。太棒了！
- en: 'A slight problem: you can drop both of them on the surface, and then you''re
    stuck. Let''s explore the solution in the following sections.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 一个小问题：你可以将它们两个都放在表面上，然后你就会陷入困境。让我们在下面的章节中探索解决方案。
- en: Replacing the current item
  id: totrans-217
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换当前项目
- en: We will now ensure that you can only have one power on the surface. If you drag
    a second one while the DropSurface is already occupied, the current power will
    be replaced by the new one and the drag item component will reappear in the **PowersContainer**
    GameObject.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将确保你只能有一个能量在表面上。如果你在 DropSurface 已经被占用的情况下拖拽第二个，当前的能量将被新的一个替换，并且拖拽项目组件将在
    **PowersContainer** 游戏对象中重新出现。
- en: 'We will need to know which power is currently dropped on the surface and which
    original drag Item component must be instantiated in **Grid** in **PowersContainer**:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道当前哪个能量被放置在表面上，以及哪个原始拖拽项目组件必须在 **PowersContainer** 中的 **Grid** 中实例化：
- en: Select our **SelectedBomb** prefab in the **Project** view.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Project** 视图中选择我们的 **SelectedBomb** 预制件。
- en: Open its attached `Power.cs` script.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开其附加的 `Power.cs` 脚本。
- en: 'This script will be used to contain information about the dropped item. Let''s
    declare a new `enum` to distinguish which type of power, and an `Object` variable
    to set which prefab will be instantiated to make the draggable item in power reappear
    when replaced:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将用于包含有关释放项目的信息。让我们声明一个新的 `enum` 来区分哪种类型的能量，以及一个 `Object` 变量来设置哪个预制件将被实例化以在替换时使可拖拽的能量项目重新出现：
- en: '[PRE4]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we need to go back to Unity and create prefabs for our `Bomb` and `Time`
    draggable items before we assign them to the `createOnDestroy` variables:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要回到 Unity 中，在将它们分配给 `createOnDestroy` 变量之前，为我们的 `Bomb` 和 `Time` 可拖拽项目创建预制件：
- en: Select our **Bomb** GameObject from **Powers** in the **Hierarchy** of **Scene**
    and drag it into a folder of your choice in your **Project** view to create a
    prefab from it.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Scene** 的 **Hierarchy** 中的 **Powers** 中选择我们的 **Bomb** 游戏对象，并将其拖拽到你在 **Project**
    视图中选择的任意文件夹中，以从它创建一个预制件。
- en: 'Select our **SelectedBomb** Prefab in the **Project** view and perform the
    following steps:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Project** 视图中选择我们的 **SelectedBomb** 预制件，并执行以下步骤：
- en: Set its **Power** component's **Type** variable to **Bomb**.
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **Power** 组件的 **Type** 变量设置为 **Bomb**。
- en: Drag our new **Bomb** Prefab from the Project view to the **Power** component's
    **Create On Destroy** field.
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们从 **Project** 视图中拖拽的新 **Bomb** 预制件拖拽到 **Power** 组件的 **Create On Destroy**
    字段。
- en: We assigned the **Type** parameter of **SelectedBomb** to **Bomb**, and it now
    has an assigned prefab that we will instantiate to recreate the draggable item
    when it gets replaced.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将 **SelectedBomb** 的 **Type** 参数赋值给 **Bomb**，现在它已经分配了一个预制件，我们将实例化它以在替换时重新创建可拖拽的项目。
- en: Note
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Repeat steps 1 and 2, replacing the word `Bomb` with `Time` to do the same for
    our Time power GameObject and prefab.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 重复步骤 1 和 2，将 `Bomb` 替换为 `Time` 以对我们的时间能量游戏对象和预制件执行相同的操作。
- en: 'Now, we have to code a system that will register which type of power is currently
    selected. We''ll use the `GameManager.cs` script in the following manner to store
    it:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须编写一个系统来注册当前选中的力量类型。我们将以下方式使用`GameManager.cs`脚本来存储它：
- en: 'Open our `GameManager.cs` script and declare this new static variable:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的`GameManager.cs`脚本并声明这个新的静态变量：
- en: '[PRE5]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add this new static method to set our `SelectedPower` from other scripts:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向其他脚本添加以下新的静态方法来设置我们的`SelectedPower`：
- en: '[PRE6]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Ok, we now have a method to register the currently selected power. It is time
    to modify our `DropSurface.cs` script:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有了注册当前选中力量的方法。现在是时候修改我们的`DropSurface.cs`脚本了：
- en: Select our **Surface** GameObject from **Powers** and open the `DropSurface.cs`
    script.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Powers**中选择我们的**Surface** GameObject，并打开`DropSurface.cs`脚本。
- en: 'Declare a new `GameObject` variable to store our **Grid** GameObject:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个新的`GameObject`变量来存储我们的**Grid** GameObject：
- en: '[PRE7]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Save the script, select our **Surface** GameObject from **Powers** in the **Hierarchy**
    view. Drag our **Grid** GameObject from **PowersContainer** in its **DropSurface**
    component's **Drag Items Container** field.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本，在**层次结构**视图中从**Powers**中选择我们的**Surface** GameObject。从其**DropSurface**组件的**Drag
    Items Container**字段中拖动**PowersContainer**中的**Grid** GameObject。
- en: 'Now, go back to our `DropSurface.cs` script. We will add these following lines
    to handle the fact that the user cannot drop two powers on the surface; it will
    replace the previous one and recreate its original `Drag Item`. In the `OnDrop()`
    method, just below the `if(dragItem == null) return` line, add the following:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，回到我们的`DropSurface.cs`脚本。我们将添加以下几行代码来处理用户不能在表面上放下两个力量的事实；它会替换先前的力量并重新创建其原始的`Drag
    Item`。在`OnDrop()`方法中，就在`if(dragItem == null) return`行下面，添加以下代码：
- en: '[PRE8]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, add a new `RecreateDragItem()` method to the file:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，向文件中添加一个新的`RecreateDragItem()`方法：
- en: '[PRE9]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Ok, we now have to inform the `GameManager.cs` script that the selected Power
    has changed. We can do this by calling our `SetPower()` static method.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在必须通知`GameManager.cs`脚本选中的力量已更改。我们可以通过调用我们的`SetPower()`静态方法来实现。
- en: 'Add the following line in the `OnDrop()` method just before the `Destroy(dropped)`
    line:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnDrop()`方法中，在`Destroy(dropped)`行之前添加以下行：
- en: '[PRE10]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Save all the scripts and click on the play button. You can drop the first Power
    on the **Surface** GameObject and then drop the second one. The first power is
    now replaced and will reappear in the **Available** power container.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 保存所有脚本并点击播放按钮。你现在可以在**Surface** GameObject上放下第一个力量，然后放下第二个。第一个力量现在被替换，并将重新出现在**可用**力量容器中。
- en: Unfortunately, we cannot simply remove the power. Let's correct this in the
    following sections.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，我们无法简单地删除力量。让我们在以下部分中纠正这一点。
- en: Removing the current item
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除当前项
- en: 'We want to remove the selected power by clicking on it. In our `DropSurface.cs`
    script, add this new `OnClick()` method that will be called when the user clicks
    on the surface:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望通过点击来删除选中的力量。在我们的`DropSurface.cs`脚本中，添加这个新的`OnClick()`方法，当用户点击表面时将被调用：
- en: '[PRE11]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now click on play. You can now remove the selected power by right- or left-clicking
    on it.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击播放。你现在可以通过右键或左键点击来删除选中的力量。
- en: Animations with NGUI
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用NGUI的动画
- en: One great aspect of NGUI is that you can use Unity's animation system on any
    kind of widget. There also are some Tween components that let you modify most
    values over time, such as dimensions, color, and scale. For example, you can change
    an object's color from color A to color B in 5 seconds.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: NGUI的一个优点是你可以将Unity的动画系统应用于任何类型的控件。还有一些Tween组件，允许你在一段时间内修改大多数值，例如尺寸、颜色和缩放。例如，你可以在5秒内将一个对象的颜色从颜色A变为颜色B。
- en: We have a nice main menu. But we actually have our options that are constantly
    displayed. That is not very user friendly.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个很好的主菜单。但实际上，我们的选项是持续显示的。这并不太友好。
- en: 'We will use animations and tweens to hide our options and show them only when
    the user clicks on the **Options** button. With options hidden, our menu will
    look as shown in the following screenshot:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用动画和tween来隐藏我们的选项，并在用户点击**选项**按钮时显示它们。当选项隐藏时，我们的菜单将看起来如下所示：
- en: '![Animations with NGUI](img/8667OT_03_05.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![使用NGUI的动画](img/8667OT_03_05.jpg)'
- en: But first, let's make our powers' apparition smoother.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，让我们使力量的出现更加平滑。
- en: Smooth powers apparition
  id: totrans-261
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平滑出现效果
- en: 'Let''s add **Scale Tweens** on our prefabs to make them appear smoothly by
    performing the following steps:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的预制体上添加**缩放Tween**，通过以下步骤使它们平滑出现：
- en: In the Project view, select our **SelectedBomb** prefab.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目视图中，选择我们的**SelectedBomb**预制体。
- en: 'Attach a **Scale Tween** component by navigating to **Component** | **NGUI**
    | **Tween** and perform the following steps:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **Tween**附加一个**Scale Tween**组件并执行以下步骤：
- en: Set its **From** parameter to {`0`, `0`, `0`,}.
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**From**参数设置为 `{`0`, `0`, `0`,}`。
- en: Set its **Duration** to `0.2`.
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**持续时间**设置为`0.2`。
- en: Right-click on the **Tween Scale** component and then click on **Copy Component**.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**Tween Scale**组件，然后单击**复制组件**。
- en: Select our **SelectedTime**, **Bomb**, and **Time** prefabs.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**SelectedTime**、**Bomb**和**Time**预制体。
- en: In the **Inspector** view, right-click on any existing component name and click
    on **Paste Component As New**.
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**视图中，右键单击任何现有的组件名称，然后单击**粘贴组件为新组件**。
- en: Now, as soon as these widgets are created, they scale from 0 to 1 in 0.2 seconds,
    which makes them appear smoothly.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一旦这些小部件被创建，它们将在0.2秒内从0缩放到1，这使得它们看起来平滑。
- en: We can now see how we'll hide and show options using a button.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以看到我们如何使用按钮来隐藏和显示选项。
- en: Clipping to hide options
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 裁剪以隐藏选项
- en: 'First, we have to hide our option boxes. To do that, we will use **Panel**
    **Clipping** and increase their width when we need to show them. Let''s set up
    the Clipping option:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须隐藏我们的选项框。为此，我们将使用**面板** **裁剪**并在需要显示它们时增加它们的宽度。让我们设置裁剪选项：
- en: Select our **Window** GameObject from **MainMenu** and set its **Dimensions**
    to `515` x `850`.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**MainMenu**中选择我们的**Window** GameObject，并将其**尺寸**设置为`515` x `850`。
- en: 'Select the **MainMenu** GameObject and perform the following steps:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**MainMenu** GameObject并执行以下步骤：
- en: Set its **Depth** in **UIPanel** to `-1`.
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**UIPanel**中将它的**深度**设置为 `-1`。
- en: Create a new child for **MainMenu** with *Alt* + *Shift* + *N*.
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Alt* + *Shift* + *N*创建**MainMenu**的新子项。
- en: Rename this new child as `Container`.
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新子项重命名为`Container`。
- en: Select our new **Container** GameObject.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们新的**Container** GameObject。
- en: 'Attach a **Panel** component to it by navigating to **Component** | **NGUI**
    | **UI**. Then perform the following steps:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **UI**将其附加一个**Panel**组件，然后执行以下步骤：
- en: Set its **Depth** to `0`.
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**深度**设置为`0`。
- en: Set its **Clipping** parameter to **Alpha Clip**.
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**裁剪**参数设置为**Alpha裁剪**。
- en: Set its **Size** to `515` x `1080`.
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**大小**设置为`515` x `1080`。
- en: Fold all the children of **MainMenu** using the arrow next to each of them.
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用每个旁边的箭头折叠**MainMenu**的所有子项。
- en: Select every child of **MainMenu**, except the new **Container** child, and
    drag them all inside our new **Container** GameObject.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**MainMenu**的每个子项（除了新的**Container**子项），并将它们全部拖入我们新的**Container** GameObject中。
- en: 'Good, our options are now hidden. Your **Hierarchy** should look as shown in
    the following screenshot:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们的选项已经隐藏了。你的**层次结构**应该看起来如下面的截图所示：
- en: '![Clipping to hide options](img/8667OT_03_06.jpg)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![裁剪以隐藏选项](img/8667OT_03_06.jpg)'
- en: 'Let''s add an **Options** button that will show or hide these options:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个**选项**按钮，它将显示或隐藏这些选项：
- en: Select and duplicate our **Play**GameObject from **Buttons** and rename this
    new duplicate as `Options`.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并复制我们的**Play** GameObject从**按钮**，并将这个新副本重命名为`选项`。
- en: 'Select our new **Options** GameObject from **Buttons** and perform the following
    steps:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**按钮**中选择我们新的**Options** GameObject并执行以下步骤：
- en: Set its **Side** parameter in **UIAnchor** to **Bottom**.
  id: totrans-291
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**UIAnchor**中将它的**侧边**参数设置为**底部**。
- en: Reset its **Pixel Offset** in **UIAnchor** to {`0`, `0`}.
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其在**UIAnchor**中的**像素偏移**重置为 `{`0`, `0`}`。
- en: Set its **Size** in **Box Collider** to {`140`, `40`, `0`}.
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Box Collider**中将它的**大小**设置为 `{`140`, `40`, `0`}`。
- en: Remove its **Load Level On Click** component.
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除其**点击时加载级别**组件。
- en: Select our **Background** GameObject from **Options** and set its **Dimensions**
    to `140` x `40`.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**选项**中选择我们的**Background** GameObject并设置其**尺寸**为`140` x `40`。
- en: 'Select our **Label** GameObject from **Options**:'
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**选项**中选择我们的**Label** GameObject：
- en: Change its text to `Options`.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为`选项`。
- en: Set its **Overflow** parameter to **Shrink Content**.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**溢出**参数设置为**收缩内容**。
- en: Set its **Dimensions** to `90` x `25`.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**尺寸**设置为`90` x `25`。
- en: 'Ok, so now we have an **Options** button. Next, we want it to enlarge our **Window**
    and the Panel Clipping `width` of **Container** when clicked. We can do this using
    code, but we will use tweens and animations in the following manner to see how
    they work:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以现在我们有一个**选项**按钮。接下来，我们希望它在点击时扩大我们的**Window**和**Container**的**面板裁剪宽度**。我们可以通过代码来做这件事，但我们将使用以下方式使用tweens和动画来查看它们是如何工作的：
- en: Select our **Window** GameObject in **Container**.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Container**中选择我们的**Window** GameObject。
- en: 'Attach a **Tween Width** component to it by navigating to **Component** | **NGUI**
    | **Tween**. Then perform the following steps:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **Tween**，将其附加一个**Tween Width**组件。然后执行以下步骤：
- en: Set its **From** parameter to `515`.
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **从** 参数设置为 `515`。
- en: Set its **To** parameter to `1300`.
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **到** 参数设置为 `1300`。
- en: Set **Duration** to `0.5`.
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **持续时间** 设置为 `0.5`。
- en: Reset **Dimensions** to `515` x `850`.
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **尺寸** 重置为 `515` x `850`。
- en: Disable the **Tween Width** component to prevent it from tweening at start.
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 禁用 **缓动宽度** 组件以防止它在开始时缓动。
- en: 'We have a **Tween** component that will resize the `width` of **Window** when
    activated. Let''s use the **UIPlay Tween** component to start it when the **Options**
    button is clicked on:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个 **缓动** 组件，当激活时，会调整 **窗口** 的 **宽度**。让我们使用 **UIPlay 缓动** 组件在点击 **选项** 按钮时启动它：
- en: Select our **Options** button GameObject.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **选项** 按钮GameObject。
- en: 'Attach a **Play Tween** component by navigating to **Component** | **NGUI**
    | **Interaction**. Then perform the following steps:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **交互**，附加一个 **播放缓动** 组件。然后执行以下步骤：
- en: Drag our **Window** GameObject from **Container** in the **Tween Target** field.
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的 **窗口** GameObject 从 **容器** 拖到 **缓动目标** 字段中。
- en: Set the **Play** direction to **Toggle**.
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **播放** 方向设置为 **切换**。
- en: 'Click on play. You will see that the window resizes as needed when **Options**
    is clicked. However, the **Clipping** parameter doesn''t. Let''s correct this
    using a Unity animation:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放。你会看到当点击 **选项** 时，窗口会按需调整大小。然而，**裁剪** 参数没有变化。让我们使用 Unity 动画来纠正这个问题：
- en: Select our **Container** GameObject from **MainMenu**.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **主菜单** 中选择我们的 **容器** GameObject。
- en: Open the **Animation** window by navigating to **Window** | **Animation**.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **窗口** | **动画** 打开 **动画** 窗口。
- en: Click the red record button.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击红色记录按钮。
- en: 'Save the animation as `ShowOptions.anim` and perform the following steps:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将动画保存为 `ShowOptions.anim` 并执行以下步骤：
- en: Re-enter `515` for the clipping **X Size** from **UIPanel** to add a key.
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次输入 `515` 作为裁剪的 **X 大小** 以添加一个关键帧。
- en: Move the time cursor in the **Animation** window to `0:30`.
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将时间指针移动到 **动画** 窗口的 `0:30`。
- en: Enter `1300` for the clipping **X Size** from **UIPanel** to add a key.
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **UIPanel** 中输入 `1300` 作为裁剪的 **X 大小** 以添加一个关键帧。
- en: Click on the red record button again to finish.
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击红色记录按钮以完成。
- en: Uncheck its **Play Automatically** Boolean in the **Animation** component.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **动画** 组件中取消选中其 **自动播放** 布尔值。
- en: 'We have our animation ready. Now, let''s link the button to the animation in
    the following manner:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的动画已经准备好了。现在，让我们以下述方式将按钮链接到动画：
- en: Select our **Options** GameObject from **Buttons**.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **按钮** 中选择我们的 **选项** GameObject。
- en: 'Attach a Play Animation component to it by navigating to **Component** | **NGUI**
    | **Interaction**. Then perform the following steps:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **交互**，向它附加一个 **播放动画** 组件。然后执行以下步骤：
- en: Drag our **Container** GameObject from **MainMenu** in the **Target** field.
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的 **容器** GameObject 从 **主菜单** 拖到 **目标** 字段中。
- en: For the **Clip Name** parameter, type in `ShowOptions`.
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **剪辑名称** 参数，输入 `ShowOptions`。
- en: Set the **Play** direction to **Toggle**.
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **播放** 方向设置为 **切换**。
- en: Click on play. Our window and clipping both resize perfectly in both directions
    when the **Options** button is clicked.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放。当点击 **选项** 按钮时，我们的窗口和裁剪在两个方向上都完美地调整大小。
- en: But you can see that our **Options** widgets aren't visible until you actually
    drag the main menu around; that's because the clipping is not refreshed after
    the animation.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可以看到，我们的 **选项** 小部件直到你实际拖动主菜单才可见；这是因为动画后裁剪没有被刷新。
- en: To solve this, we can simply force a **Drag at the end of the Animation** option.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以简单地强制一个 **动画结束时的拖动** 选项。
- en: 'Select our **MainMenu** GameObject and perform the following steps:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **主菜单** GameObject 并执行以下步骤：
- en: Create and add a new `UpdatePanel.cs` script to it.
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为它创建并添加一个新的 `UpdatePanel.cs` 脚本。
- en: Open our new `UpdatePanel.cs` script.
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的新 `UpdatePanel.cs` 脚本。
- en: 'Now, add this new `UpdateNow()` method to the script that will force a drag
    of (0, 0, 0) value on our **MainMenu**:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将这个新的 `UpdateNow()` 方法添加到将强制在 **主菜单** 上拖动 (0, 0, 0) 值的脚本中：
- en: '[PRE12]'
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Save the script and then perform the following steps:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本，然后执行以下步骤：
- en: Select our **Options** GameObject in **Buttons**.
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **按钮** 中选择我们的 **选项** GameObject。
- en: Drag our **MainMenu** GameObject in the **Notify** field of the **UIPlay Animation**
    component.
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的 **主菜单** GameObject 拖到 **UIPlay 动画** 组件的 **通知** 字段中。
- en: Choose our new `UpdatePanel.UpdateNow` method for the **Method** field.
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 **方法** 字段选择我们新的 `UpdatePanel.UpdateNow` 方法。
- en: Click on the play button. The **Options** boxes now appear after the animation!
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击播放按钮。动画播放后，**选项**框现在会出现！
- en: Great! We have used NGUI's **Tween** and **Play Animations** components to enhance
    our UI and make it nicer and more user friendly.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经使用了 NGUI 的 **缓动** 和 **播放动画** 组件来增强我们的 UI，使其更美观、更用户友好。
- en: Scrollable text
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可滚动文本
- en: 'Let''s add a welcome textbox with instructions for the user. This text will
    be scrollable using the mouse wheel or a simple click-and-drag. It will look as
    shown in the following screenshot:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个带有用户说明的欢迎文本框。此文本可以使用鼠标滚轮或简单的点击并拖动进行滚动。它将如下截图所示：
- en: '![Scrollable text](img/8667OT_03_07.jpg)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![可滚动文本](img/8667OT_03_07.jpg)'
- en: 'At the start, it will scroll automatically. Let''s create it now:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，它将自动滚动。现在让我们创建它：
- en: Select our **Nickname** container GameObject, duplicate it by pressing *Ctrl*
    + *D*.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **昵称** 容器 GameObject，通过按 *Ctrl* + *D* 复制它。
- en: Rename this new duplicate as `Help`.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新副本重命名为 `Help`。
- en: 'Select this **Help** GameObject and perform the following steps:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择此 **帮助** GameObject 并执行以下步骤：
- en: Drag our **Title** GameObject in the **Container** field in its **UIAnchor**.
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的 **标题** GameObject 拖到其 **UIAnchor** 的 **容器** 字段中。
- en: Set its **Side** parameter in **UIAnchor** to **Bottom**.
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **UIAnchor** 中将其 **侧** 参数设置为 **底部**。
- en: Set its **Pixel Offset** in **UIAnchor** to {`0`, `-50`}.
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **UIAnchor** 中将其 **像素偏移** 设置为 `{`0`, `-50`}`。
- en: 'Attach a Panel component by navigating to **Component** | **NGUI** | **UI**:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **UI** 附加一个面板组件：
- en: Set its **Depth** to `1`.
  id: totrans-354
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **深度** 设置为 `1`。
- en: Set its **Clipping** parameter to **Alpha Clip**.
  id: totrans-355
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **剪辑** 参数设置为 **Alpha Clip**。
- en: Set its **Clipping Size** to `440` x `85`.
  id: totrans-356
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **剪辑大小** 设置为 `440` x `85`。
- en: Attach a **Collider** object to it by navigating to **NGUI** | **Attach** and
    set its **Size** to {`440`, `85`, `0`}.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **NGUI** | **附加** 为其附加一个 **Collider** 对象，并将其 **大小** 设置为 `{`440`, `85`,
    `0`}`。
- en: Delete the **Input** GameObject from **Help**.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **帮助** 中删除 **输入** GameObject。
- en: 'Select our **Label** GameObject from **Help** and perform the following steps:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **帮助** 中选择我们的 **标签** GameObject 并执行以下步骤：
- en: Change its **Font** to **SciFi Font – Normal**.
  id: totrans-360
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **字体** 更改为 **SciFi Font – Normal**。
- en: Remove its **UIAnchor** component.
  id: totrans-361
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除其 **UIAnchor** 组件。
- en: 'Set its text to:'
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本设置为：
- en: '[PRE13]'
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Attach a **Tween Position** component to it by navigating to **Component**
    | **NGUI** | **Interaction**. Then perform the following steps:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **交互** 为其附加一个 **Tween Position** 组件。然后执行以下步骤：
- en: Set its **From** parameter to {`0`, `-50`, `0`}.
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **From** 参数设置为 `{`0`, `-50`, `0`}`。
- en: Set its **To** parameter to {`0`, `20`, `0`}.
  id: totrans-366
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **To** 参数设置为 `{`0`, `20`, `0`}`。
- en: Set its **Duration** value to `1.5`.
  id: totrans-367
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **持续时间** 值设置为 `1.5`。
- en: Set its **Start Delay** value to `3`.
  id: totrans-368
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **开始延迟** 值设置为 `3`。
- en: Set its **Transform** position to {`0`, `-50`, `0`}.
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **变换** 位置设置为 `{`0`, `-50`, `0`}`。
- en: 'Select the **Background** GameObject from **Help** and perform the following
    steps:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **帮助** 中的 **背景** GameObject 并执行以下步骤：
- en: Set its **Dimensions** to `440` x `85`.
  id: totrans-371
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **尺寸** 设置为 `440` x `85`。
- en: Set its **Color Tint** to {`150`, `255`, `255`, `255`}.
  id: totrans-372
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **颜色色调** 设置为 `{`150`, `255`, `255`, `255`}`。
- en: 'Click on the play button. We now have a welcome text that scrolls automatically
    by changing its Y coordinate inside a clipped Panel. Let''s enable the scroll
    wheel and mouse drag on this scrollable text:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮。我们现在有一个自动滚动的欢迎文本，通过在剪辑面板内部改变其 Y 坐标来实现。现在让我们启用可滚动文本的滚动轮和鼠标拖动：
- en: Select our **Help** GameObject.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **帮助** GameObject。
- en: 'Attach a **Drag Object** component to it by navigating to **Component** | **NGUI**
    | **Interaction**. Then perform the following steps:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **交互** 为其附加一个 **拖动对象** 组件。然后执行以下步骤：
- en: Drag our **Label** GameObject from **Help** to the **Target** field.
  id: totrans-376
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的 **标签** GameObject 从 **帮助** 拖到 **目标** 字段。
- en: Set the **Scale** to {`0`, `1`, `0`} to limit to vertical scrolling.
  id: totrans-377
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **缩放** 设置为 `{`0`, `1`, `0`}` 以限制垂直滚动。
- en: Set the **Scroll Wheel Factor** value to `1`.
  id: totrans-378
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **滚动轮因子** 值设置为 `1`。
- en: Check the **Restrict Within Panel** Boolean.
  id: totrans-379
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **限制在面板内** 布尔值。
- en: Click on play. You can now drag the text label manually with either a left-click
    and drag or the mouse wheel. The **Box Collider** component on the **Help** GameObject
    detects mouse events, and the **UIDrag Object** reacts accordingly by changing
    the Y position of our **Label**.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放。你现在可以使用左键点击并拖动或鼠标滚轮手动拖动文本标签。**帮助** GameObject 上的 **Box Collider** 组件检测鼠标事件，而
    **UIDrag Object** 则相应地通过改变 **标签** 的 Y 位置来做出反应。
- en: We had to add a **UIPanel** component to the **Help** GameObject in order to
    restrict movement within the clipping's bounds.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不在 **帮助** GameObject 中添加一个 **UIPanel** 组件，以便限制在剪辑边界内的移动。
- en: Localization system
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地化系统
- en: Now that we have a complete UI, let's configure the **localization** **system**
    and add a pop-up list to change our UI's language.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个完整的 UI，让我们配置 **本地化** **系统** 并添加一个弹出列表来更改 UI 的语言。
- en: Localization files
  id: totrans-384
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化文件
- en: All our localized text strings must be contained in a `.txt` file for each language.
    For the purpose of this book, we will have English and French, and we will need
    the `English.txt` file and the `French.txt` file.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的本地化文本字符串都必须包含在每个语言的 `.txt` 文件中。为了本书的目的，我们将有英语和法语，我们需要 `English.txt` 文件和
    `French.txt` 文件。
- en: 'Let''s create them right now in the following manner:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即以以下方式创建它们：
- en: Access your project's Assets folder with your file explorer and create a new
    folder named `Localization`.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的文件资源管理器访问项目文件夹的 Assets 文件夹，并创建一个名为 `Localization` 的新文件夹。
- en: Inside this new folder, create a new text document named `English.txt`.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新文件夹内，创建一个名为 `English.txt` 的新文本文件。
- en: Duplicate this new `English.txt` file and rename it as `French.txt`.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制这个新的 `English.txt` 文件并将其重命名为 `French.txt`。
- en: Open them both in your favorite IDE or text editor.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的 IDE 或文本编辑器中同时打开它们。
- en: Ok, now our localization files are ready to be used with the localization system.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在我们的本地化文件已准备好与本地化系统一起使用。
- en: Localization component
  id: totrans-392
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化组件
- en: 'We can now configure the localization system to work with our UI. We need to
    have the localization component attached to a GameObject in the scene:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以配置本地化系统以与我们的 UI 一起工作。我们需要在场景中的 GameObject 上附加本地化组件：
- en: Select our **GameManager** GameObject and attach a **Localization** component
    to it by navigating to **Component** | **NGUI** | **Internal**.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **GameManager** GameObject，并通过导航到 **组件** | **NGUI** | **内部** 来将其附加一个 **本地化**
    组件。
- en: In the **Project** view, navigate to Assets | Localization and drag our `English.txt`
    and `French.txt` files in the languages array.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目** 视图中，导航到 Assets | 本地化，并将我们的 `English.txt` 和 `French.txt` 文件拖入语言数组中。
- en: The **Starting Language** is set to **English**, and we also have **French**
    available in the array.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '**起始语言** 设置为 **英语**，我们还在数组中提供了 **法语**。'
- en: Language selection box
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语言选择框
- en: 'The next step is to create a **language selection box** as shown in the following
    screenshot:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个如图所示的语言选择框：
- en: '![Language selection box](img/8667OT_03_08.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![语言选择框](img/8667OT_03_08.jpg)'
- en: If we want to see what we're doing, we should first disable the Clipping of
    our **Container** by setting the **Clipping** parameter in its **UIPanel** to
    **None**.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想看到我们在做什么，我们首先应该通过将 **容器** 中的 **UIPanel** 的 **裁剪** 参数设置为 **无** 来禁用 **裁剪**。
- en: 'Once the Clipping is disabled, follow these steps:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦禁用裁剪，请按照以下步骤操作：
- en: 'Select the **Popup** GameObject from **Difficulty**:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **难度** 中选择 **弹出** GameObject：
- en: Check its **Localized** Boolean in **UIPopup List**.
  id: totrans-403
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **UIPopup List** 中检查其 **本地化** 布尔值。
- en: Rename its child **Label** GameObject as `CurrentDifficulty`.
  id: totrans-404
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其子 **标签** GameObject 重命名为 `CurrentDifficulty`。
- en: Select and duplicate our **Difficulty** GameObject in **Container**.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择并复制 **容器** 中的 **难度** GameObject。
- en: Rename the new duplicate as `Language`.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新副本重命名为 `Language`。
- en: Select our new **Background** GameObject in **Language** and set its **Pixel
    Offset** in **UIAnchor** to {`420`, -`90`}.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **语言** 中选择我们新的 **背景** GameObject 并将其 **UIAnchor** 中的 **像素偏移** 设置为 `{420, -90}`。
- en: Note
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sometimes, anchors don't update themselves. You may need to deactivate and then
    activate the **Language** GameObject for the Label's **UIAnchor** to update.
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 有时，锚点不会自动更新。您可能需要先禁用并重新激活 **语言** GameObject，以便更新标签的 **UIAnchor**。
- en: Select our **Label** GameObject from **Language** and change its text to `[AAFFFF]Language`.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **语言** 中选择我们的 **标签** GameObject 并将其文本更改为 `[AAFFFF]语言`。
- en: 'Select our **Popup** GameObject from `Language` and perform the following steps:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `语言` 中选择我们的 **弹出** GameObject 并执行以下步骤：
- en: 'Change the **Options** text value to have the following two options:'
  id: totrans-412
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **选项** 文本值更改为以下两个选项：
- en: '[PRE14]'
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Set its **Position** to **Below**.
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **位置** 设置为 **下方**。
- en: Check the **Localized** Boolean.
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查 **本地化** 布尔值。
- en: Attach a **Language Selection** component by navigating to **Component** | **NGUI**
    | **Interaction**.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **组件** | **NGUI** | **交互** 来附加一个 **语言选择** 组件。
- en: Rename the **Label**, which is a child of **Popup**, as `CurrentLanguage`.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Popup** 的子 **标签** 重命名为 `CurrentLanguage`。
- en: We can now reactivate **Clipping** in **Container** by setting the **Clipping**
    parameter in its **UIPanel** to **Alpha Clip**. The clipping **Size** has been
    saved.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过将 **容器** 中的 **UIPanel** 的 **裁剪** 参数设置为 **Alpha 裁剪** 来重新激活 **裁剪**。裁剪
    **大小** 已保存。
- en: That's it, our localization system is in place, and when the pop-up list changes
    value, the `Language Selection.cs` script automatically changes the localization's
    **Current Language** value.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 那就这样，我们的本地化系统已经到位，当弹出列表的值改变时，`Language Selection.cs`脚本会自动更改本地化的**当前语言**值。
- en: Localizing a Label
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地化标签
- en: 'We are now ready to localize our first Label using the **UILocalize** component
    and a `Key` that will define which string to use from our `.txt` files. Perform
    the following steps:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在准备好使用**UILocalize**组件和一个`Key`来本地化我们的第一个标签，这个`Key`将定义从我们的`.txt`文件中使用哪个字符串。执行以下步骤：
- en: Select our **Label** GameObject from **Title**.
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**标题**中选择我们的**标签**GameObject。
- en: Attach a **Localize** component to it by navigating to **Component** | **NGUI**
    | **UI**.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **UI**附加一个**Localize**组件到它上。
- en: Set its `Key` parameter by typing `MainMenu`.
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`MainMenu`设置其`Key`参数。
- en: 'Switch to our `English.txt` localization file and add the following line:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到我们的`English.txt`本地化文件，并添加以下行：
- en: '[PRE15]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Switch to our `French.txt` localization file and add the following line:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到我们的`French.txt`本地化文件，并添加以下行：
- en: '[PRE16]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save both the `.txt` files and click on the play button. If you access options
    and change the language to **French**, our window's title changes from **Main
    Menu** to **Menu Principal**. That's because the **UILocalize** component updates
    the **UILabel** component it's attached to using the string present after the
    `=` in our `.txt` localization file. If you exit the play mode, the language will
    be saved and the UI will be initialized with the last selected language.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这两个`.txt`文件，并点击播放按钮。如果你访问选项并更改语言为**法语**，我们的窗口标题将从**主菜单**变为**Menu Principal**。这是因为**UILocalize**组件使用我们`.txt`本地化文件中`=`后面的字符串更新它附加的**UILabel**组件。如果你退出播放模式，语言将被保存，UI将使用最后选择的语言初始化。
- en: Now, we must add a **UILocalize** component with its specific `Key` to every
    **Label** in the scene, then add a localization string for each of them in both
    of our `.txt` files.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须为场景中的每个**标签**添加一个具有特定`Key`的**UILocalize**组件，然后在我们的两个`.txt`文件中为它们中的每一个添加本地化字符串。
- en: 'Don''t be afraid; it isn''t that long, and it will train you to use the Localization
    System:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 不要害怕；它并不长，这将训练你使用本地化系统：
- en: In the **Hierarchy** view, type `Label` inside the search box.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中，在搜索框中输入`Label`。
- en: Select all the **Label** GameObjects matching the search by pressing *Ctrl*
    + *A* and attach a **Localize** component to the selection by navigating to **Component**
    | **NGUI** | **UI**.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *A*选择所有匹配搜索的**标签**GameObject，并通过导航到**组件** | **NGUI** | **UI**将一个**Localize**组件附加到选择上。
- en: Select our **Label** GameObject from **Title** and remove its second **UILocalize**
    component as it already had one!
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**标题**中选择我们的**标签**GameObject，并移除其第二个**UILocalize**组件，因为它已经有一个了！
- en: Now, all of our **Label** GameObjects have a **UILocalize** component attached
    to them. One by one, select them and set their `Key` parameter based on their
    text set in the **UILabel** component.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们所有的**标签**GameObject都附加了一个**UILocalize**组件。一个接一个地选择它们，并根据它们在**UILabel**组件中设置的文本设置它们的`Key`参数。
- en: 'You must ignore the Labels of **Popup List**; they don''t need a **UILocalize**
    component since we checked their **Localized** Booleans. Simply add localization
    strings for their **Options** with the same names: **Normal**, **Hard**, **English**,
    and **French**.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须忽略**弹出列表**的标签；由于我们已经检查了它们的**本地化**布尔值，它们不需要**UILocalize**组件。只需为它们的**选项**添加具有相同名称的本地化字符串：**正常**、**困难**、**英语**和**法语**。
- en: Note
  id: totrans-437
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Don''t forget to apply the same operations to labels included in our four different
    powers prefabs: **Time**, **Bomb**, **SelectedTime**, and **SelectedBomb**. New
    lines (return) are replaced by `\n` in the localization files. Colors work identically.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将相同的操作应用于我们四个不同的力量预制件中的标签：**时间**、**炸弹**、**选定时间**和**选定炸弹**。在本地化文件中，新行（回车）被`\n`替换。颜色工作方式相同。
- en: When you're done with setting their `Key` parameters, switch to our `English.txt`
    file and add every key you need, plus `=` followed by the corresponding localized
    text.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 当你设置完它们的`Key`参数后，切换到我们的`English.txt`文件，并添加你需要的每个键，然后加上`=`后面跟着相应的本地化文本。
- en: Now, copy all of these keys declarations and paste them in our `French.txt`
    file and then replace the English words with French words or any other language
    you choose.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，复制所有这些键声明，并将它们粘贴到我们的`French.txt`文件中，然后替换英语单词为法语单词或任何其他你选择的语言。
- en: By the time you're finished, our entire UI will be localized!
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，我们的整个UI将完成本地化！
- en: Summary
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we first learned how to set up a draggable panel. Then, we
    created and configured a drag-and-drop system to select which power we want using
    the **UIDrag Object** component and the custom code.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先学习了如何设置可拖拽的面板。然后，我们创建并配置了一个拖拽系统，使用 **UIDrag Object** 组件和自定义代码来选择我们想要的能量。
- en: Remember to use the **UIGrid** component often to automatically align objects—they
    are very powerful when used wisely with **UIAnchor** and **UIStretch** components.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 记得经常使用 **UIGrid** 组件来自动对齐对象——当与 **UIAnchor** 和 **UIStretch** 组件明智地结合使用时，它们非常强大。
- en: Using Unity's animations and NGUI's Tweens are no longer a secret for us—we
    used them to create a smooth apparition for these powers, and we combined them
    with Clipping to hide/show our Options menu.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Unity 的动画和 NGUI 的 Tweens 对我们来说不再是秘密——我们使用它们为这些能量创建平滑的显现效果，并将它们与裁剪结合使用，以隐藏/显示我们的选项菜单。
- en: Finally, we created scrollable text and learned how to use the Localization
    System to set up multiple languages.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们创建了可滚动的文本，并学习了如何使用本地化系统来设置多种语言。
- en: We can now take a look at using C# with NGUI in the next chapter and see what
    we can accomplish using code.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以查看下一章中如何使用 C# 与 NGUI，并看看我们可以通过代码实现什么。
