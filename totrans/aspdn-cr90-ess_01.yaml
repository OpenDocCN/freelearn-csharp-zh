- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Introducing ASP.NET Core 9 Concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to develop solutions using the ASP.NET Core 9 platform, we must
    learn the fundamentals and how to prepare the environment, as well as become accustomed
    to the main concepts that will be used during the development process.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we’ll learn about how to prepare our development environment,
    understand the differences between .NET and .NET Framework, and see what’s new
    in ASP.NET Core 9.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Why ASP.NET Core 9?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comparing .NET and . NET Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing our development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What’s new in ASP.NET Core 9?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: My purpose is to introduce you to the main concepts of ASP.NET Core 9 and how
    to use this powerful platform to deliver web-based applications. I will explain
    the fundamentals of the platform, giving you context about the difference between
    .NET and .NET Framework and how to prepare your own Windows, Mac, or Linux environment,
    which you are going to work on until the end of this book. Furthermore, we’ll
    learn the most important improvements on this platform that have seen an increase
    in new features over the years. Let’s start to learn the basics of ASP.NET Core
    9.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To take advantage of all the knowledge that will be shared in this book, it
    is important that you have access to a computer, with administrative privileges,
    and also access to the internet.
  prefs: []
  type: TYPE_NORMAL
- en: Other necessary software will be shared in this chapter and the rest of the
    book where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find all code examples and other materials used in this book in the
    following repository: [https://github.com/PacktPublishing/ASP.NET-Core-9.0-Essentials](https://github.com/PacktPublishing/ASP.NET-Core-9.0-Essentials)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Why ASP.NET Core 9?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET core is a platform that has existed since 2016 and has been constantly
    improved, allowing the development of high-performance, modern, and cloud-ready
    solutions.
  prefs: []
  type: TYPE_NORMAL
- en: A few years ago, it was only possible to develop solutions on the .NET platform
    using the Windows operating system. However, with the great market demand and
    the rapid evolution of technologies, Microsoft began a one-way process of restructuring
    and redesigning the platform, adopting the open source model, which gave the developer
    community the opportunity to adopt a robust development model, independent of
    the operating system.
  prefs: []
  type: TYPE_NORMAL
- en: The last major version of ASP.NET to run exclusively on the Windows operating
    system was 4.x, and after the redesign, the platform was renamed *ASP.NET Core*
    , which is currently in version 9 STS(Standard Term Support).
  prefs: []
  type: TYPE_NORMAL
- en: Recently, ASP.NET Core 9 has become an extremely rich platform, enabling the
    delivery of solutions for different types of purposes and, what’s more, with the
    full support and focus of the open source community.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using ASP.NET Core 9 provides us with a rich tool with the following benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: The ability to develop web UI solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to develop web APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interoperability of operating systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud-readiness
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrations with modern client-side frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The use of best practices and design standards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a complete platform that unifies everything necessary for the development
    of rich solutions using the best practices, technologies, and other aspects, which
    you will learn about throughout the chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Performance improvements
  prefs: []
  type: TYPE_NORMAL
- en: 'ASP.NET Core 9 features several important performance improvements over ASP.NET
    Core 7, making it the best-performing version to date. Some important improvement
    points are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**- Faster execution and startup** : ASP.NET Core 9 is faster than the previous
    version. Every version have been receiving many contributions from the technical
    community. The et runtime, responsible for the application execution, has some
    improvements like loop optimizations, many other code generation and Garbage Collector
    improvements.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- Minimal API Performance** : According to benchmarks, the new version of
    the Minimal API is 15% faster than the previous version and consumes 93% less
    memory.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- Native AOT (Ahead-of-Time) compilation** : Expanded support for native
    AOT in ASP.NET Core 9 allows applications to be compiled to native code, reducing
    disk footprint, improving startup times, and decreasing memory consumption, which
    is ideal for cloud-native environments.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- ML.NET** important improvements enabling integrations with machine-learning
    models with the version ML.NET 4.0, with additional tokenizer support, necessary
    for modern IA models.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- .NET Aspire** The .Net Aspire was introduced on the previous version .Net
    9 adding an improved cloud-ready stack for building observable, production ready,
    distributed applications in ASP.NET Core 9. Many concerns related to the cloud-native
    approach during the development phase was abstracted with .NET Aspire, combining
    a couple of Nuget Packages and projects templates.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- .NET MAUI** : The .Net MAUI (Multi-platform Application UI) which provides
    an unified way to develop applications for platforms like Web and Mobile, including
    IOS and Android. .NET MAUI has quality improvements like test coverage, end to
    end scenario test, and bug fixes. Now, as part of the project templates of ASP.NET
    Core 9 there is a hybrid project including MAUI integrated with Blazor. With this
    project software engineers are able to delivery applications not only for web,
    but also for mobile and windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- Entity Framework Core** : Entity Framework Core is one of the most powerful
    feature of .Net, providing a way to abstract the communication between applications
    and database, using an approach called ORM(Object Relational Model). In the new
    version some more features and improvements was added like a Azure Cosmos DB for
    NoSQL provider and capabilities to work with AOT.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- ASP.NET Core** : The entire ASP.NET Core platform has many improvements
    on Blazor, SignalR, minimal APIs, authentication and authorization and better
    support to the OpenAPI.'
  prefs: []
  type: TYPE_NORMAL
- en: '**- Swagger:** One of the most famous libraries for generating API documentation,
    Swagger, from the **Nuget** package **Swashbuckle.AspNetCore** will no longer
    be part of the default API template of ASP.NET Core 9. This is due to the fact
    of reducing the dependence on this library in .NET projects and improving support
    for Open API, a language-agnostic and platform-neutral of web based APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details, check out the following link: [https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/](https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-9/)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: However, before starting to prepare our environment and use the ASP.NET Core
    9, in the next section, let’s understand how the platform has been evolving with
    collaboration between Microsoft and the open source community, by comparing the
    .NET platform and the . NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing .NET and .NET Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Both .NET and .NET Framework (usually called *Full Framework* ) have similarities
    – that is, they are platforms that allow us to deliver great solutions.
  prefs: []
  type: TYPE_NORMAL
- en: In general, the platform is a framework with a set of features that allows us
    to develop different types of applications. In February 2002, .NET Framework brought
    a new development model using a centralized platform, allowing us to develop applications
    for Windows and the web through technologies such as Windows Forms, ASP.NET Web
    Forms, ASP.NET MVC, as well as console applications, among some other extensions.
  prefs: []
  type: TYPE_NORMAL
- en: Since the first versions, it was already possible to develop applications in
    different languages such as C#, Visual Basic, and any other languages that implemented
    the .NET Framework specifications. However, it depended on the Windows operating
    system and its system APIs.
  prefs: []
  type: TYPE_NORMAL
- en: The evolution and redesign of the .NET Core platform has brought many benefits
    to the Microsoft ecosystem, while maintaining the main idea of being a unified
    platform for the development of robust solutions. It is possible to develop in
    languages such as C#, F#, or even Visual Basic.
  prefs: []
  type: TYPE_NORMAL
- en: The structuring and redesign meant that the .NET core platform, now called just
    .NET, was developed in a modularized manner and independent of the operating system,
    with the support of the open source community.
  prefs: []
  type: TYPE_NORMAL
- en: Today, the entire .NET platform ecosystem is maintained by the .NET Foundation
    ( [https://dotnetfoundation.org/](https://dotnetfoundation.org/) ), a non-profit,
    independent organization that supports the entire open source platform ecosystem.
    With that, new possibilities were created for the .NET community, including the
    reduction in the lead time for delivery of new versions of the framework with
    new features and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: The new releases of the .NET platform are made available annually, every November,
    in STS( **Standard Term Support)** versions, launched in even years and receiving
    support for 18 months, or LTS( **Long Term Support)** , launched in odd years
    and receiving support for three years. There are also monthly patch updates, which
    speed up the agile correction of problems and vulnerabilities, maintaining compatibility
    between each patch and eliminating the greater risk of updates.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the platform update process brings great benefits to development
    times, as updates can cause non-conformities in applications, generating several
    problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft provides a complete roadmap of features that are added to the platform,
    as well as the implementation of improvements and, most importantly, fixes of
    bugs and vulnerabilities. Keep the roadmap link as a favorite in your browser:
    [https://github.com/MoienTajik/AspNetCore-Developer-Roadmap](https://github.com/MoienTajik/AspNetCore-Developer-Roadmap)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand some of the platform’s basics, let’s prepare our development
    environment on different operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing our development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The .NET platform has a set of tools available to offer the best experience
    to developers, regardless of the operating system used.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Core 9 applications can be developed and run on Windows, Linux, and
    macOS operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Code snippets will be presented throughout the book in order to demonstrate
    the concepts of ASP.NET Core 9 through practical examples. All supporting material
    for the book can be found in the GitHub repository, the link to which can be found
    in the *Technical* *requirements* section.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will configure our environment on the three operating systems
    and create our first ASP.NET Core 9 project, but first, let’s see what things
    we will require to get started.
  prefs: []
  type: TYPE_NORMAL
- en: The development tool
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can develop ASP.NET Core 9 applications using any text editor and then compile
    the developed code using the SDK( **Software Development Kit)** , which will be
    discussed in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft offers two code-editing tools, Visual Studio and Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code is a rich, extensible, and lightweight code editor that makes
    it possible to develop any type of application. It is a free tool, has several
    extensions, is widely used by the community, and can run on any operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, Visual Studio is a more robust version of the IDE, having several
    visual functionalities that support development, in addition to several tools
    such as application profiling and a rich debug tool. Visual Studio only runs on
    the Windows operating system and a license must be purchased. However, Microsoft
    offers a version of Visual Studio called Community that is free and, despite some
    limitations, offers an excellent development experience. For the remainder of
    this book, we use Visual Studio Code as the main code editor, because it is extensible
    and, most importantly, free.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio for Mac
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio for Mac will not be continued by Microsoft, and its support will
    end on August 31, 2024.
  prefs: []
  type: TYPE_NORMAL
- en: SDK and runtime
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When proceeding with the installation of the .NET platform on your machine,
    some questions may arise regarding the SDK and the runtime.
  prefs: []
  type: TYPE_NORMAL
- en: The SDK allows us to develop and run ASP.NET Core 9 applications, while the
    runtime only has the necessary dependencies to run the applications.
  prefs: []
  type: TYPE_NORMAL
- en: In general, we always choose to use the SDK on development machines; however,
    when hosting environments, only the runtime is required. We’ll discuss hosting
    applications in more detail in [*Chapter 10*](B21788_10.xhtml#_idTextAnchor162)
    .
  prefs: []
  type: TYPE_NORMAL
- en: CLI (Command-Line Interface)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with .NET and/or Visual Studio Code, a **CLI** will also be installed
    that will be used extensively throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The CLI is nothing more than software executed through the command line, allowing
    to you to execute tasks for different purposes, such as the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The CLI command here is called **dotnet** . This command has some parameters,
    responsible for determining the type of task that will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: In a nutshell, the previous command creates a new project ( **new** ) of type
    **webapp** with the name ( **--** **name** ) **hello-world** .
  prefs: []
  type: TYPE_NORMAL
- en: CLI tools bring great flexibility, avoid UI dependencies, are extensible, and
    allow us to use automation strategies through scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout the book, we will use some CLI commands to support solution development
    and learning.
  prefs: []
  type: TYPE_NORMAL
- en: In the next sections, we will look at installing the ASP.NET Core 9 SDKs for
    all three operating systems.
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Windows offers some options for installing the SDK for the . NET platform:'
  prefs: []
  type: TYPE_NORMAL
- en: Installation together with Visual Studio.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the Windows package manager, **Winget** . The SDK can be installed by
    running the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Via PowerShell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'However, we will proceed with the installation through Visual Studio, but if
    you prefer to use other installation options, check out this link: [https://learn.microsoft.com/en-us/dotnet/core/install/windows](https://learn.microsoft.com/en-us/dotnet/core/install/windows)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installation through Visual Studio is very simple and involves just a few steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [https://visualstudio.microsoft.com/](https://visualstudio.microsoft.com/)
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download Visual Studio for Windows and save it. After downloading it, run the
    following file: **VisualStudioSetup.exe** .'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installation, locate the **VisualStudioSetup.exe** file, run it, and then
    click on **Continue** .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – The Visual Studio Installer message](img/B21788_01_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – The Visual Studio Installer message
  prefs: []
  type: TYPE_NORMAL
- en: 'On the **Workloads** tab, select the **ASP.NET and web** **development** option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Visual Studio installation options](img/B21788_01_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – Visual Studio installation options
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on the install button and proceed with the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: macOS installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'macOS offers an executable that allows you to follow a simple installation
    process:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the .NET platform from [https://dotnet.microsoft.com/download/dotnet](https://dotnet.microsoft.com/download/dotnet)
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the version best suited to your processor (ARM64 or x64)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading, run the installer and complete the steps to complete the
    installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Supported versions
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft does not support .NET in versions before 6. From version 6 (LTS) onwards,
    current Apple processors are supported.
  prefs: []
  type: TYPE_NORMAL
- en: 'For more details on installing on macOS, refer to this link: https://learn.microsoft.com/en-us/dotnet/core/install/macos
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Linux installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '.NET supports several versions of Linux. For the next steps, we will focus
    on the Ubuntu 22.04 version, and we will run the process based on the script provided
    by Microsoft:'
  prefs: []
  type: TYPE_NORMAL
- en: Access the command terminal, and create a folder called **dotnet-install** in
    your home directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download the **sh** script, provided by Microsoft with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will need to add permission to the script before running it with the command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the installation command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will install the latest SDK version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dependencies
  prefs: []
  type: TYPE_NORMAL
- en: 'The .NET platform depends on some libraries that are specific to each version
    of Linux. For more details, see the following link: https://learn.microsoft.com/en-us/dotnet/core/install/linux-ubuntu#dependencies
    .'
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s install Visual Studio Code.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visual Studio Code is a great editor, and its installation is very simple.
  prefs: []
  type: TYPE_NORMAL
- en: Just go to [https://code.visualstudio.com/download](https://code.visualstudio.com/download)
    , download the version specific to your operating system, run the installer, and
    complete the steps.
  prefs: []
  type: TYPE_NORMAL
- en: Code command
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When installed, Visual Studio Code also installs its CLI. On Windows and Linux
    systems, the CLI is usually automatically added to the system *PATH environment
    variable* . On macOS, additional configuration will be required. To do this, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Press the *CMD* + *Shift* + *P* keys.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Enter* , and the CLI will be added to the *Path* *environment variable*
    .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The time has come to validate the functioning of the environment, and to do
    so, we will create our first project.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the development environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After installing the editor, code, and SDK, it’s time to create our first application
    and ensure that the environment is functional for the rest of the book.
  prefs: []
  type: TYPE_NORMAL
- en: In this step, we will use the Terminal or Bash, the dotnet CLI, and also Visual
    Studio Code as the IDE. We will create a simple web application using the command
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, open a command terminal or bash and follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your preferred directory, create a folder called **Projects** :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Access the created folder with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The **dotnet new** command needs some instructions for us to proceed with creating
    a project. When running it, the following instructions are displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Executing the dotnet new command](img/B21788_01_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – Executing the dotnet new command
  prefs: []
  type: TYPE_NORMAL
- en: 'As in Visual Studio, the .NET CLI has some templates that are used when creating
    projects. You will be able to see the templates installed on your machine by typing
    the highlighted command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The available dotnet templates](img/B21788_01_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – The available dotnet templates
  prefs: []
  type: TYPE_NORMAL
- en: 'We will continue with the creation of a web application in the MVC template.
    To do this, run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous command is basically a template for the type of project that will
    be created. In this case, we will use the MVC model, which is a project that uses
    the **Model-View-Controller** ( **MVC** ) architectural pattern. Don’t worry about
    these details at this point. We will learn more about the .NET CLI tool, project
    models, and the MVC model throughout the book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, access the directory of the created application with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s open Visual Studio Code to make some changes to the application’s
    source code with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous command will open a new instance of Visual Studio Code in the previously
    created application directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – My first app, opened on Visual Studio Code](img/B21788_01_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – My first app, opened on Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: In Visual Studio Code, locate the **index.cshtml** file in **Views** | the **Home**
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace line 6 of the **index.cshtml** file with the following code, and then
    select **File** | **ZSave** , or just press *Ctrl* + *S* :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Return to the terminal or bash and run the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.6 – Running the dotnet run command](img/B21788_01_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – Running the dotnet run command
  prefs: []
  type: TYPE_NORMAL
- en: If you can see a message like the one shown in *Figure 1* *.6* , then your environment
    is working correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Now, access the browser and type the address presented, as in the **http://localhost:5034**
    example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note the address on your terminal, as the application execution port number
    may be different.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The application running](img/B21788_01_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – The application running
  prefs: []
  type: TYPE_NORMAL
- en: If all the previous steps were executed successfully, it means that your code
    editor was correctly configured, as well as the . NET SDK.
  prefs: []
  type: TYPE_NORMAL
- en: If there is any problem, review the installation steps according to your operating
    system.
  prefs: []
  type: TYPE_NORMAL
- en: With our environment configured, we are ready to continue learning the platform
    and implementing the examples set out in the book.
  prefs: []
  type: TYPE_NORMAL
- en: What is new in ASP.NET Core 9?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As it is open source and independent of any operating system, the .NET platform
    has received several improvements in recent years, further improving the experience
    of developers and bringing several new features constantly requested by the community
    and, in addition, several improvements in performance and bug fixes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some improvements are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Native AOT** : This option was introduced in version 7.0 of the framework
    to create a self-contained application, in a single file, adding support for the
    x64 processors and ARM64 architectures of macOS and greatly reducing the size
    of the file, reaching up to 50% reduction in Linux environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Improvements in serialization libraries** : Applications constantly interact
    with data in JSON and the **System.Text.Json** API, native to .NET, has been constantly
    revised and improved, avoiding dependence on third-party libraries and considerably
    improving its performance and support.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance** : There has been a performance improvement of approximately
    15%. You can check this link for more performance improvement details: [https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-8.0?view=aspnetcore-8.0](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-8.0?view=aspnetcore-8.0)
    .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These and many other features can be consulted directly from the platform roadmap
    at the following link: [https://github.com/dotnet/aspnetcore/issues/44984](https://github.com/dotnet/aspnetcore/issues/44984)
    .'
  prefs: []
  type: TYPE_NORMAL
- en: The .NET roadmap is very well maintained and updated by the community, together
    with Microsoft and the .NET Foundation. It is exactly this great support from
    the community, as well as the other companies and organizations involved, that
    has turned .NET into a powerful development platform for different purposes. By
    following the other need of the market, it has considerably improved the options
    for the development of web-based solutions, using different approaches to meet
    different needs.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the .NET platform and ASP.NET Core 9, available
    in the main operating systems. We learned the differences between the .NET and
    .NET Framework, in addition to learning about the process of updating the framework
    versions and the difference between the STS and LTS versions. We also configured
    our development environment on different operating systems and developed an ASP.NET
    MVC application, validating the entire working environment .
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B21788_02.xhtml#_idTextAnchor031) , we’ll use our already configured
    environment to learn the different approaches and options available to develop
    UIs in ASP.NET Core 9.
  prefs: []
  type: TYPE_NORMAL
