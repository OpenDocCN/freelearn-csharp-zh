- en: Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: A library that displays an IP address and the name using sockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a classic Windows application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a library that sends mail
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a WPF application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a library to call a REST API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET MVC application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter07](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter07)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/Wj2VD9](https://goo.gl/Wj2VD9)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Microsoft .NET Framework provides you with a set of class libraries that make
    it easy to work with internet services. These libraries allow you to easily integrate
    services with your applications. In this chapter, we will be using a few of these
    classes within the System.Net namespace. We will be looking at how to get these
    into a .NET Standard 2.0 library, and use it across different flavors of .NET
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: A library that displays an IP address and the name using sockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a .NET Standard 2.0 class library that displays
    the IP address of the current machine you are on. Then, we will be creating an
    application that uses the library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest Visual Studio 2017 installed and configured for
    creating a .NET Standard 2.0 library before you start building the library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | Project to create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left
    pane and select Visual Studio Solutions. In the right pane, select Blank Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter7.Networking` and in the Location: textbox
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b9e3189-dc93-40b8-9d4e-caf36033eb12.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/838c1674-4e35-4551-94fd-6e6f5d7d6164.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click the right mouse button on the `Chapter7.Networking` label in the
    Solution Explorer and select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left pane and Class Library (.NET Standard) in
    the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/21c4f4da-9275-4c60-8a5b-5142ed401e7a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter7.Networking.ReadIPLib`, leave the other
    defaults as is, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77cd7188-bea5-46f5-b06a-e64fa211d5e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3be1d0b-3751-454c-98fe-19073dd02b04.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `IPReader.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes to the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `IPReader.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s create this `public` method inside the `IPReader` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 11, we added a blank solution and added a .NET Standard 2.0 class
    library to the solution. In these steps, we have given proper names to the solution
    and the project. Then, in step 12 we changed the name of the default `Class1.cs`
    generated from Visual Studio. In step 15, we added the required `using` directive
    to the code. We have mainly used `System.Net` and `System.Net.Sockets` to access
    the required classes and read the IP address, and then added the `System.Collecitons.Generic`
    namespace to create a generic `string List` to hold the IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we added a public method that will read all the available IP addresses
    of the local machine you are on. In the first line, we stored the host name of
    the system in a variable and in the second line we used it to get the host addresses.
    Then, we created an empty list to store the IP addresses.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used a `foreach` loop to go through all the IP addresses we found
    and store them in the list after checking whether it was an IP address on the
    internal network. Finally, we returned the list of IP addresses we stored.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we did a quick build to check syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a classic Windows application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a classic Windows application to use the
    library. We will be creating a UI using the Visual Studio designer, adding code
    to use the library, and displaying the list of IP addresses picked from the library
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017 and have completed
    the previous recipe. We will be using the solution we built in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution or
    press *Ctrl* + *Shift* + *O* and select the `Chapter7.Networkings` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the `Chapter7.Networking` solution label. Click File | Add | New
    Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and select Windows Forms App (.NET Framework) in
    the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2857fe40-c3c8-4da0-9238-566772d8e242.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter7.Networking.IPListWindows` as the name
    of the project. The rest of the fields can be left at the defaults:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1a83087-173a-46b6-8a26-000f925c4c92.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1aad3cd0-98bf-4ea6-985d-b94f311704f2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the right mouse button on the References label in `Chapter7.Networking.IPListWindows`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad375516-6a63-4fac-8ea3-555df7fdecca.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Chapter7.Networking.ReadIPLib` project in the left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the `Form1.cs` from the project list and rename it to `MainForm.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes to the confirmation dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the MainForm.cs[Design] tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the toolbox, add a Button control and a ListBox control to the MainWindow
    form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c3b684b-5859-46da-8353-f7f9fb3d5ccd.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the button and press *F4* to load the Properties window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now change the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Control** | **Property** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Form | Text | `IP List` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Name | `ShowButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Text | `Show IP List` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ListBox | Name | `IPListBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Double-click on the Show IP List button to reach the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll up till you reach the `using` directives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive to the last line of the directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, again scroll down till you reach the `ShowButton_Click()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code inside the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now press *F5* to debug the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Show IP List button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02f98440-554a-4201-bbbb-59898822dd99.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 10, we opened the previously built solution and did a quick build
    to check everything was intact. Then, we added a Classic Windows Forms application
    to the solution. In steps 11 to 14, we added the reference to the .NET Standard
    2.0 class library that we built in the previous recipe. In steps 15 to 20, we
    renamed the main window and then we added the UI. Finally, we changed the properties
    of the controls in a meaningful way.
  prefs: []
  type: TYPE_NORMAL
- en: In step 23, we referenced the class library in the code. In step 25, we created
    an instance of the `IPReader` class and then used the `GetMyIPAddress()` method.
    In the same line, we output the return `List<string>` as an array and used the
    `ListBox`, `AddRange` method to populate the list box.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 26 to 29, we executed the code and tested the results.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library that sends mail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at another area of the `System.Net` namespace.
    We will be using it to create and send an email. Mainly, we will be looking at
    the `SmptClient` class to do the hard work for us.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017 and all the updates
    installed. We will be building a .NET Standard 2.0 library to send an email.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project to create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left
    pane and select Visual Studio Solutions. In the right pane, select Blank Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter7.MailBox` and in the Location: textbox
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93cddef5-a4c6-4865-b65a-94eb88d7dd2e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5cd10dd-f7bd-49f3-827a-f8acf459cbb8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click the right mouse button on the `Chapter7.MailBox` label in the Solution
    Explorer and select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left pane and Class Library (.NET Standard) in
    the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f43fcd3-fcb5-4047-8fff-49de0e96d419.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: textbox, type `Chapter7.MailBox.MailerLib`, leave the other defaults
    as is, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5af711fc-96d5-4897-be09-8e4001ea0741.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b99018d5-a3eb-45eb-9804-a1ddfb0f9ce8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `SendMail.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes to the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the `SendMail.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following four properties to the `SendMail` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add this `public` method to create and send mail:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 11, we created a blank solution and added a .NET Standard 2.0
    class library project to it. Then, we properly named the solution and its project.
    In steps 12 to 14, we renamed the default class generated from Visual Studio.
    In step 15, we added the necessary namespaces to send a mail in the `using` directive
    section. In step 16, we added four properties to the main class. These properties
    will store the mail addresses, subject, and the body of the mail.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we wrote the actual code to prepare and send the mail. In the first
    two lines, we used the from and to addresses and converted them to `MailAddress`
    type. Then, we created a `MailMessage` and attached the body and the subject,
    along with the addresses. Then, we created the network credentials required to
    access the given SMTP server.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created an `SmtpClient` object, attached the credentials, and sent
    the mail. Finally, we did a quick build to check the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WPF application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a Windows Presentation Foundation application
    to use the library we have created. We will be creating a UI to send an email
    using the library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe for sending an email. If you
    have completed it, open it up and do a quick build to check everything works fine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution or
    press *Ctrl* + *Shift* + *O* and select the `Chapter7.MailBox` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Chapter7.MailBox` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and select WPF App (.NET Framework) in the right
    pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bb2b6901-75b8-4ee1-9fa1-81519d178fa5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox type `Chapter7.MailBox.WPFMail` as the name of the
    project. The rest of the fields can be left at the defaults:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/82fb0d48-1ada-4117-946f-012ea816ac81.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1fb688fa-0973-4347-9a75-36dfdb59b54a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the right mouse button on the References label in `Chapter7.MailBox.WPFMail`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/574883d9-dcd3-4406-90ff-e5d2a36efa34.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Chapter7.MailBox.MailerLib` project in the left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the `MainWindow.xaml` tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the toolbox, add four TextBox controls and a Button control to the MainWindow
    form. Arrange them as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58afb945-b867-48b4-bfc4-d8c2a4efca3b.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the TextBox and press *F4* to load the Properties window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now change the following properties (from the top as per the previous UI):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Control** | **Property** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Name | `FromTextBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Text | `From Address` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Name | `ToTextBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Text | `To Address` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Name | `SubjectTextBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Text | `Subject` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Name | `BodyTextBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Text | `Body` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | AcceptReturn (*turning on this property will make the text box
    multi-line*) | True |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Name | `SendButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Text | `Send` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Now your UI should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcb61820-7c21-481e-b69e-becef42cf0c5.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click on the Send button to open up the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll up till you reach the `using` directives.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directive to the last line of the directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Scroll down until you reach the `SendButton_Click()` method and add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Make sure you have changed the required credentials in the library for your
    SMTP server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s test our application by pressing *F5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1c961489-ef1a-4231-9c84-34e124f7920b.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK and close the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 14, we opened the solution with the library. Then, we added a
    WPF application project to the solution. Later, we added the reference to the
    class library. In steps 16 to 20, we built the UI and changed a few properties.
    In step 22, we created the reference to the library at the code level.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added the code for a button click, which is straightforward, created
    an instance of the `SendMail` class, and then populated the properties from the
    UI itself. Finally, in steps 24 and 25 we tested the output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library to call a REST API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at a .NET Standard 2.0 library that calls
    a REST API. RESTful APIs are services that allow you to access its functionality
    through HTTP. We will be using the `System.Net.Http` namespace inside the library
    to send a message to an API and get back the results.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017\. Also make sure
    you have a basic understanding of accessing a web service, what a `GET` method
    is, what a `POST` method is, and so on. We will be using a test API service provided
    by `JSONPlaceHolder`. It's a simple REST API test bed for developers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project to create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left
    pane and select Visual Studio Solutions. In the right pane, select Blank Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter7.RestAPI` and in the Location: textbox
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e66020c2-8865-4489-b4af-ae36a24d6f68.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/da4df78c-8fa1-4e53-9303-e29983c2f6c9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click the right mouse button on the `Chapter7.RestAPI` label in the Solution
    Explorer and select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left pane and Class Library (.NET Standard) in
    the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/59a03e8e-44af-4782-a237-64e336b958eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox type `Chapter7.RestAPI.RestLib`, leave the other
    defaults as they are, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/85f42896-0ce2-43ad-87c6-be4f6161438b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b97c05d-429c-4c5a-9158-ed5bbacf5b1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `PostsReader.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes to the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the `PostsReader.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create this class-wide `private` variable to hold the URL:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s create the default constructor to update the previous variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the method to read from the REST service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check the syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 11, we created an empty solution. Then we added a .NET Standard
    2.0 library to that solution. Again, as a good practice we properly named the
    solution and the class library project. In steps 12 and 13, we changed the name
    of the default `Class1.cs` created by Visual Studio. In step 15, we added `using`
    directives required for our task. In step 16, we created a class-wide private
    variable to hold the service URL. Then, in step 16 we created the default constructor
    with a `string` parameter that updates the private variable in step 15.
  prefs: []
  type: TYPE_NORMAL
- en: In step 18, we created the `public` method that did the actual work of reading
    the RESTful API. In the first line of code, we created a `string` variable that
    held the output from the service. Then, we created an instance of the `HttpClient`
    class inside a `using` statement. This is a good practice that will make sure
    the class is destroyed after we exit the `using` statement.
  prefs: []
  type: TYPE_NORMAL
- en: Then we populated the **Universal Resource Indicator** (**URI**) to the service.
    After that, we did the actual call to the service and stored it inside a `HttpResponseMessage`
    variable. Finally, we got the output from the response and returned the output.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASP.NET MVC application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating an ASP.NET MVC application to use the library
    we have created.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe. If not, you need to complete
    it before going through this one. If you have already done it, open it and do
    a quick build before we start.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it..
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution or
    press *Ctrl* + *Shift* + *O* and select the `Chapter7.RestAPI` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the `Chapter7.RestAPI` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Web and select ASP.NET Web Application (.NET Framework) in the right
    pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/faf4537a-9012-4a0b-90b3-6d565ab89c6a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox type `Chapter7.RestAPI.RestMVC` as the name and leave
    the Location: textbox at its default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5198b734-2d06-44ed-867f-cb7ca9c4d757.png)'
  prefs: []
  type: TYPE_IMG
- en: In the New ASP.NET Web Application dialog box, select Empty from the template
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select MVC for the Add folders and core references for: option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2536cab0-2ef4-4409-9fb6-b89acef01432.png)'
  prefs: []
  type: TYPE_IMG
- en: Leave the rest as is and click OK to create the default ASP.NET MVC Web application
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9812b404-a8a7-46c2-a28a-4ec6f9e397e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click the right mouse button on the References label under the `Chapter7.RestAPI.RestMVC`
    project and select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager dialog box, select Projects in the left pane and select
    `Chapter7.RestAPI.RestLib` in the right pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c72f1dd8-5969-4779-a36d-7bd41ffe9ce7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click the right mouse button on the `Controllers` folder inside the `Chapter7.RestAPI.RestMVC`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add | Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add Scaffold dialog box, select MVC 5 Controller - Empty from the template
    list and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/57bc63dd-4140-4a3e-9d76-35f34aa6fdd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Add Controller dialog box type `HomeController` in the Controller
    name: textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5b6a25b8-c003-4ece-b956-5cdfa3410f68.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `HomeController.cs` label under the `Controllers` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window, click the right mouse button on the `Index()` method name
    and select Add View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the defaults in the Add View dialog box and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/68ce1334-981b-46ac-a75b-5da006e03360.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the `HomeController.cs` tab in the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this `using` directive at the top of the code, next to the last line of
    all the directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now change the `default Index()` action to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code inside the `Index()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s open up the `Index.cshtml` file and add the following code beneath
    the `<h2>Index</h2>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Now, make sure you have set your MVC project as the default project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press *F5* and you should see an output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed71174e-1108-42fb-ad57-bb4071e63887.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 11, we opened the solution and added an ASP.NET MVC project. Then,
    we gave a proper name to the project. In steps 12 and 13, we added the reference
    to the library we built in the previous recipe. In steps 16 to 18, we added an
    empty controller to the project. Then, in steps 21 and 22 we added a view to the
    `Index()` action in the `HomeController`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 23, we added the code-level reference to the library itself and added
    two more namespaces required for our task. In step 24, we changed the `Index()`
    action to an `async` method. This is required since we will be using an `async`
    method from the library itself. In step 26, we created the service URL for our
    test bed. Then, we created an instance of the `PostsReader` class. In the third
    line, we used the `GetPostById()` method to get the result from the service. Again,
    in the fourth line of code, we used a method from the `JavaScriptSerializer` class
    to deserialize the output that came from the service to a Dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we stored the result in a `ViewBag` and passed it to the `Index` view.
    In step 27, we got the Dictionary out of the `ViewBag` and displayed the content
    using `Razor` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we tested the output in step 29.
  prefs: []
  type: TYPE_NORMAL
