- en: EventStorming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Discovering domain terminology is essential, and this terminology becomes a
    part of the Ubiquitous Language. However, the process of discovery can be rather
    lengthy and not always successful. When we discuss how the business works and
    what problems we are going to solve by writing software, too often the conversation
    comes down to discussing the features that the business is keen to implement.
    A set of features, of course, can be called **software**, but it does not necessarily
    form a system. Furthermore, to build a comprehensive solution for a particular
    problem, more system-level thinking is required.
  prefs: []
  type: TYPE_NORMAL
- en: Thinking in systems is only briefly covered in this book. To know the subject
    better, please refer to great books on this topic like the classic *An Introduction
    to General System Thinking* by Gerald Weinberg and *Thinking in Systems* by Donella
    H. Meadows, et al.
  prefs: []
  type: TYPE_NORMAL
- en: But who is going to tell us how the business operates as a system? Whom shall
    we talk to, and what format should this conversation take? We will uncover issues
    like these and try to find some answers in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is EventStorming?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The practical aspects of EventStorming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to facilitate a workshop yourself
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deciding what to do after the workshop ends
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EventStorming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, we learned how important it is to understand the actual
    problem. We also went deeper into the concept of Ubiquitous Language and explained
    that it is not only a glossary of terms but also the system's behavior described
    in words.
  prefs: []
  type: TYPE_NORMAL
- en: It remains unclear how to start the knowledge crunching and how to intensify
    our communication with domain experts to understand the problem space better and
    get a proper overview of what are we going to build.
  prefs: []
  type: TYPE_NORMAL
- en: Very often, we see that developers get to know the domain in the form of requirements.
    We have already been through this topic, and by now you should realize that requirements
    have their flaws. So, you want to improve your knowledge by talking directly to
    domain experts and organizing a workshop or meeting with them. Some people come,
    and you have a conversation for two or three hours; a lot of things get discussed,
    a lot of new insight comes to the surface, but there is a minimal outcome in the
    form of any modeling artifact. Sure, you could start drawing UML diagrams, but
    what business person would understand them? You could take notes to find out that
    you need a round or two of clarification workshops because there are too many
    vague and implicit concepts that form the foundation of your future system, and
    this makes it very hard to understand.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few fundamental issues we need to be solved here:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide visibility during the discussion. This should remove assumptions when
    many people are discussing the same thing with different terms. It also eliminates
    some of the ambiguity and brings it to the surface for further exploration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Have a modeling language that people understand. UML is not an option, and the
    usual boxes and arrows have no real notation, so people can get confused and start
    spending time trying to clarify the meaning of things.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Involve many people simultaneously. In traditional meetings, only one person
    can effectively deliver the message, while everyone else needs to shut up and
    listen. As soon as many people start talking at the same time there is no conversation
    anymore. But, assuming people with different interests and backgrounds are present
    in one session, they might show a lack of interest and get bored.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Find a way to express terms, behavior, model processes, and decisions, not features
    and data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Back in 2013, Alberto Brandolini formulated a method that he called **EventStorming**,
    where he tried to address these issues. We are going to learn about this method
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Modeling language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The basic idea behind EventStorming is that it gives a straightforward modeling
    notation that is used to visualize the behavior of the system in a way that everyone
    can understand. This approach creates visibility, increases engagement, and involves
    people who would otherwise be anxious about any participation in a modeling session
    at all, or putting anything on a whiteboard if they attend.
  prefs: []
  type: TYPE_NORMAL
- en: Considering behavior as the central aspect of the domain knowledge, the whole
    EventStorming exercise is about finding out how the business works. In general,
    we could postulate that each system at any given moment of time is found in a
    particular state. This state can change when actors that interact with the system
    do something. Actions of those actors cause the system to change state, so we
    can see that something has happened and now we need to deal with a new situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a simple example of someone paying their bill using internet
    banking:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/116ad4eb-fcd9-4f5c-9e42-6d1241407fda.png)'
  prefs: []
  type: TYPE_IMG
- en: The sequence of events for payment processing (simplified)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see here, from the person's point of view, the amount of money in
    their account decreased, the payment is complete, and the bill is considered paid
    and can be thrown away. From the recipient's point of view, however, the bill
    is considered paid when they get the money and can match this payment with an
    open bill by using an invoice number or some magic payment reference that was
    mentioned on the bill and the payment.
  prefs: []
  type: TYPE_NORMAL
- en: Each action performed by actors in these systems made some state transitions.
    The payment order was created and signed. The amount was deducted from the payer's
    account. The amount was then added to the payee's account. The bill was marked
    as paid. All these operations became *facts of life*, and, unless we have a time
    machine, we cannot reverse them. If the payee discovers that the bill has already
    been paid, they cannot just reverse everything. They need to send the money back
    by initiating a new payment.
  prefs: []
  type: TYPE_NORMAL
- en: These facts are known as **domain events**. It is the most basic and also the
    most important concept that EventStorming deals with. It is why it is called EventStorming.
    The idea of domain events is not alien to anyone. Facts of life are something
    that people can quickly grasp. They are something that happened; not something
    that someone wanted to do; not a feature; not a form or a button. Each domain
    event represents a fact, a change in the system we are trying to model.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the first part of our modeling language is to create the concept
    of domain events. Each concept in EventStorming is represented as a sticky note
    of a specific color. The color is essential because, as we go along and bring
    more thoughts to the model, we need colors to consistently represent the same
    ideas across the model to avoid confusion.
  prefs: []
  type: TYPE_NORMAL
- en: 'The original suggestion of Alberto is to use orange sticky notes to represent
    domain events. The simplest possible model could look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/089323e7-7db2-4d30-9a0c-238661c516c1.png)'
  prefs: []
  type: TYPE_IMG
- en: Start small and go from there
  prefs: []
  type: TYPE_NORMAL
- en: These are two domain events that occurred in sequence—first, a customer paid
    using a credit or debit card; then their order was confirmed. We can identify
    this as an e-commerce domain. There is nothing special about sentences written
    on sticky notes, except one crucial rule—events must have a subject (noun) and
    a predicate (verb). The verb must be in the past tense, indicating that something
    has happened and it became a fact.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we get back to the bill payment example, we could try figuring out what
    events we would find there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc0915e2-c754-4088-bdfa-365ad09fe429.png)'
  prefs: []
  type: TYPE_IMG
- en: Events are placed on the timeline
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of things that you might immediately notice. The first is
    that domain events follow a timeline. It is quite logical because facts represent
    subsequent changes in the system and therefore happen in a particular order. For
    example, the payment is not approved before it is signed. Some things can happen
    in parallel, such as debiting and crediting accounts at the same time, as soon
    as the payment order is approved, which might mean that the bank is confident
    that the payer has enough funds to complete the payment.
  prefs: []
  type: TYPE_NORMAL
- en: The second thing is that we do not have only one system here. Indeed, we are
    modeling the whole process, but there are at least three parts that we can clearly
    distinguish—the user-facing internet bank, which creates and signs payment orders;
    the banking back office, which completes the transaction; and the payee's own
    payment-to-bill matching system that, by the way, could be completely manual.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we can see, our simple model already provides quite a lot of value to people
    involved in the workshop. Not only did we try to identify what happens during
    the process of a bill being paid, but we put the whole flow on a timeline and
    were able to roughly identify parts of the process that can happen in different
    physical systems.
  prefs: []
  type: TYPE_NORMAL
- en: Visualization is one of the most powerful aspects of any modeling technique,
    and EventStorming is not an exception. As soon as we put something on our model,
    we can reason about it instead of just pronouncing words and waving hands.
  prefs: []
  type: TYPE_NORMAL
- en: When people see what is considered to be the whole picture, some might start
    asking *what if *questions*.* *What if* there is not enough money in the account?
    *What if* the bill reference number is wrong? *What if* the payee account is not
    correct? What if, what if, what if? It then appears that our simple process is
    not that simple at the end of the day. Remember the availability heuristic, **WYSIATI**
    (short for **What You See Is All There Is**)? We base our initial understanding
    on a simplified view of the world. Everything works as it should; there are no
    exceptions and no edge cases, people behave and don't plan to make mistakes, with
    or without intentions to do so. It might come as a surprise, but the real world
    is a bit more complicated. Most of the time the number of edge cases; exceeds
    what is considered to be a regular flow of events. All these edge cases and potential
    exceptions become much more visible when things are visualized and brought to
    light for everyone to observe.
  prefs: []
  type: TYPE_NORMAL
- en: There is one issue here, which can do a disservice to those who are trying their
    best to create a proper events model. You could imagine that such a workshop happens
    in a meeting room. Usually, people sit around a table and talk. As we have already
    suggested, this is not how EventStorming works. We expect people to move around
    the room and be actively engaged in conversations, which might happen simultaneously
    at different sides of the room. So, we need some space. But this is not all the
    space we need. Have a good look at the preceding simple process model. Although
    we all could agree that we just modeled the happy path and no edge cases and exceptions
    are covered, the real-life process is way more complicated; this diagram already
    takes some horizontal space. Now, imagine real-world scenarios being modeled like
    this. Indeed, a traditional two-three meter whiteboard would do a disservice for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine your model like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b48a021-c527-4039-9c06-f556fa3c7d99.png)'
  prefs: []
  type: TYPE_IMG
- en: For a reasonably complex system you need a bigger space
  prefs: []
  type: TYPE_NORMAL
- en: Here in the middle is your whiteboard. But the model is not that small. As Alberto
    says, *my problem is bigger!*
  prefs: []
  type: TYPE_NORMAL
- en: What happens when there is not enough space left on a whiteboard? People treat
    the space left as a sacred resource. It becomes precious, and people start saving
    space. Some events become **not important** and therefore not put on the whiteboard.
    Some ideas become secondary and not worth looking at. All in all, the modeling
    discussion suffers to save some whiteboard space.
  prefs: []
  type: TYPE_NORMAL
- en: It is normal, and this is how our brain works. If we see some limit, no matter
    how silly or artificial it will look in retrospect, we will feel its physical
    presence and will also set up our activities accordingly. If you have a limited
    modeling space, prepare to get a limited model. So, beware of this issue and provide
    as much modeling space as you can for participants of any modeling session and
    of EventStorming meetings in particular. We will get some more specific advice
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Facilitating an EventStorming workshop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section provides practical advice and shares some real-life experience
    for you as a facilitator of an EventStorming workshop. Remember that you do not
    need to **sell** DDD in your organization before doing EventStorming. This rather
    simple but very effective technique can help even if you have no plans to do DDD
    in your project. It will help you to build an understanding of the domain, for
    which you plan to create some software. It also creates a better relationship
    between developers and their potential users, since they will be openly discussing
    the problems that users have and showing empathy to these problems, while simultaneously
    seeking solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Who to invite
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the workshop, you will always need to have two types of people—people with
    questions and people with answers.
  prefs: []
  type: TYPE_NORMAL
- en: People with questions are developers and architects. Surprisingly, developers
    rarely attend any sessions that directly involve the potential users of the software
    they plan to develop. We touched upon this topic when we discussed the separation
    between problem space and solution space in [Chapter 1](948b7834-c47c-4321-a91c-2ba58068c52e.xhtml),
    *Why Domain-Driven Design?*. So again, having developers at these workshops is
    essential. Another group of people that some might expect to be those with answers,
    but who, in reality, have more questions are business analysts or requirements
    analysts, or whatever are they are called in your organization. Admittedly, they
    spend quite a lot of time together with potential users and customers, but usually,
    during the EventStorming workshop, they get new insights since this exercise is
    not one-to-one but for a group.
  prefs: []
  type: TYPE_NORMAL
- en: This group needs to study the information about the domain that is already available
    (general understanding, perhaps requirements or specifications if they have already
    been made) and prepare questions.
  prefs: []
  type: TYPE_NORMAL
- en: People with answers are usually those who we call **domain experts**.But remember
    that they do not know all the details, and they also can have an illusion of knowledge.
    This is why you need as many of them as you can get in the workshop since these
    people are usually not easy to gather together in one room because of their busy
    schedule. This indirectly suggests that these people are generally quite high
    in the organizational hierarchy, but not necessarily. You need to aim at getting
    the most people from each department. You should search for those who know how
    things are done instead of those who only know how things should be done, based
    on some fictitious descriptions and standards.
  prefs: []
  type: TYPE_NORMAL
- en: Both *people with questions* and *people with answers* groups would need to prepare
    for the workshop by formulating their questions better. Thinking about what issues
    need to be solved and being more specific about these issues, might help during
    the workshop. The preparation part doesn't only apply for developers. In the end,
    it is the business who needs their problems to be solved, so it would be helpful
    for them to be aware of their own needs and to have enough materials to be able
    to communicate these needs to the group of techies that supposedly will address
    those needs by writing code.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the space
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Very often you can observe people coming to a workshop held in a regular meeting
    room to find out that there is no whiteboard, the projector does not work, and
    the presenter has a video output socket that is incompatible with the video equipment
    in the room. Such things are all very frustrating because they take a lot of time
    to fix, leaving less time for the actual work. What's even worse, it's not just
    one person whose time is wasted on this kind of issue. Everyone in this room is
    effectively blocked from doing anything and has to wait. Sometimes it is best
    to cancel the meeting in order not to lose any more time.
  prefs: []
  type: TYPE_NORMAL
- en: This is the situation you want to avoid, and EventStorming workshops have some
    specific requirements that need to be addressed in advance, to avoid such confusion.
  prefs: []
  type: TYPE_NORMAL
- en: Materials
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well in advance, when you have agreed on a date and time when people with questions
    will finally meet people with answers, start preparing documents immediately.
  prefs: []
  type: TYPE_NORMAL
- en: The most important material is your future modeling space. Remember, your problem
    is way bigger than any whiteboard you can find in any meeting room (except maybe
    the one you designed to hold EventStorming sessions, but I doubt you have one).
    It means you will have to use walls as the modeling space. Sticky notes do not
    stay well on walls, except walls made of glass. You will also want to remove your
    model from the wall afterward in order not to frustrate people who use the room
    after you.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, you will need a paper roll. For guerilla-style EventStorming, you
    might use a simple paper roll from IKEA, the original purpose of which is to provide
    unlimited painting space for children. But it is too narrow, and the best option
    is to acquire a plotter paper roll. These rolls are wider (usually about one meter
    wide), longer, and made from higher quality paper.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing is to have something that you can use to fix the paper to the
    wall. You might need to inspect the wall's surface in the room where you plan
    to hold the workshop and try different fixing methods. Ensure that you have little
    or no obstacles for the paper roll, so the wall should not have paintings, holes,
    doors, or windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Of course, you need a lot of sticky notes. And I mean a lot. You never know
    how many domain events people are going to write, and the last thing you want
    to experience is when people start reconsidering events because there are no more
    sticky notes left. Stickies are cheap, and ideas are expensive, so take care to
    bring enough stickies to capture all ideas. You will need different sizes and
    colors; we will go through the color notation later in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7a2d2ac-3ca8-498b-822f-9be2e7169f19.png)'
  prefs: []
  type: TYPE_IMG
- en: This is the least you will need
  prefs: []
  type: TYPE_NORMAL
- en: The final part is stationary. It is too often forgotten as something that's
    obvious, and then you are left with a handful of highly paid, very busy people
    in the room and only one working pen. It can be very frustrating. So, buy enough
    permanent markers, preferably black, not very thin and not very thick. Ideally,
    you need one marker pen per person and some to spare.
  prefs: []
  type: TYPE_NORMAL
- en: The room
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, the place. EventStorming cannot be done when people are sitting. Quite
    the opposite—they need to stand and walk freely around the whole space. This is
    why the traditional meeting room set up with a large table in the center and lots
    of chairs around it does not work. So, the first thing you will need to ensure
    is that the walls where you plan to put the paper roll have enough space between
    them for people to move freely. Ideally, all chairs need to be removed, or at
    least moved to one place, far from the modeling space.
  prefs: []
  type: TYPE_NORMAL
- en: There should be some place where all the stationery will be placed. Therefore
    you will need at least a small table somewhere in the corner. Also, it is helpful
    to have the notation visible, so people use specific colors for specific concepts.
    Using different colors for one concept is very confusing and should be avoided.
  prefs: []
  type: TYPE_NORMAL
- en: EventStorming sessions are usually very intense and involve a lot of movement,
    thinking, and talking, and sometimes arguing. It is often fun but can be exhausting.
    So, as a facilitator, you need to keep the sugar level high and throats soothed.
    Prepare some snacks, drinks, and fruit—this helps. People also respect this kind
    of treatment and get a feeling of being invited to a special event.
  prefs: []
  type: TYPE_NORMAL
- en: The workshop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, now space is prepared, and you need to call people into the room. When you
    get them coming to your session, use the tips in this section to keep an eye on
    the time and make the session more productive. We will also be going through some
    tips on how to observe and interpret human behavior, and how to make the meeting
    constructive.
  prefs: []
  type: TYPE_NORMAL
- en: Timing and scheduling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Plan at least two hours for one session. It might not feel enough (and this
    is usually true), but it is tough for people to be productive for a more extended
    period in such an environment. A more extended workshop will exhaust discussions
    and create a feeling of going in circles. That might be the case just because
    almost everything that can be discussed has already been considered and put on
    the wall. Therefore, resist the urge to plan more extended workshops, such as
    whole-day sessions.
  prefs: []
  type: TYPE_NORMAL
- en: The first hour is usually very intense, but after that, you will see the energy
    levels dropping. Let people rest for ten minutes, have a coffee, and eat the fruit
    you got for them. Often, participants will keep chatting in small groups about
    what has been discussed, so their brains will still be processing the information,
    but in a more relaxed way. After a break, new insights are usually uncovered.
    Also, you will need to apply different techniques step by step, and a break after
    the first hour will give you an excellent opportunity to do something different
    from what you were doing during the first part of the workshop. We will discuss
    these techniques later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The beginning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The beginning of an EventStorming session with people who have never done it
    before can be quite awkward. You, as a facilitator, explain the rules and give
    people pens and stickies, then put up the first element of the notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fa1e7fd2-9e87-4e8c-a7c8-eedb4f277b08.png)'
  prefs: []
  type: TYPE_IMG
- en: The first element in the notation
  prefs: []
  type: TYPE_NORMAL
- en: 'After this is done, there will be this moment of silence and uncertain movements
    in the crowd. No one knows what to do, and people are usually uncomfortable with
    doing something they aren''t familiar with. It becomes especially obvious if such
    activity needs to be performed in front of the crowd:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5fa7cca3-df6f-4aba-a1eb-c5ce8decaeee.png)'
  prefs: []
  type: TYPE_IMG
- en: The random event in the middle—the icebreaker
  prefs: []
  type: TYPE_NORMAL
- en: This moment requires the facilitator to break the ice. It is not hard to do.
    When you organize such a session, you already know something about the organization
    and the domain. That allows you to imagine a domain event, or two, or more. Putting
    this on the wall is exactly what people need to learn by example. The whole thing
    is not hard to do, but without an example, people don't feel safe and secure.
    So, as a facilitator, you will need to put the first sticky note on the wall,
    or a few of them. Try making it relevant, or you can intentionally make them very
    silly, expecting people to react with laughter and sarcasm, fixing your error.
    Of course, the first reaction that you get is people speaking out loud what they
    think needs to be put on the wall, without taking any action at all and expecting
    you to write things down. This is how *traditional* meetings are done—people talk,
    and someone hopefully is taking notes. Resist this. As soon as you see someone
    explaining what you need to write on the next sticky or telling you that the stuff
    on the wall is wrong, just give them a pen and a stack of sticky notes. They will
    start writing. They will produce. They will discuss. Then, your job will be to
    observe and to guide, in case people get stuck.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are at least two techniques that I know of about how to start the workshop
    by putting the first sticky note on the wall. The first comes from Alberto Brandolini.
    He says that you can put anything you want anywhere you want, but not at the start.
    Starting at the *beginning* is something you want to avoid. It is very natural
    for us as human beings to seek structure, and in our view, each process starts
    and ends somewhere. So, logically speaking, we need to start at the beginning.
    The only issue here is that there is no beginning. First, we always spend a lot
    of time and energy discussing where the process starts, without producing anything.
    Second, there will be something before any identified start, guaranteed. Therefore,
    put the first sticky somewhere in the middle and work from there. Stuff that happens
    before that event will go to the left, and things that occur after, to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1811fe61-7886-41cc-aecf-e36d50d8e27f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now fill all the space in between
  prefs: []
  type: TYPE_NORMAL
- en: Dan North mentioned another technique in his talk at DDD Exchange 2016\. On
    one sticky he writes **Once upon a time** and puts it close to the left side of
    the paper roll, but not at the edge. On the second sticky, he writes **Happily
    ever after** and puts it close to the right side of the paper roll, but again,
    not at the edge. You need these gaps on both sides because, as mentioned earlier,
    there will be definitely something earlier than **Once upon a time** and later
    than **Happily ever after**, and you will need space to put it there. As you can
    see, you need to have exactly zero knowledge about the domain to produce these
    two stickies, and it works quite efficiently. People get a sense of time, and
    with something already on the wall with space in between for them to fill, it
    sparks their imagination.
  prefs: []
  type: TYPE_NORMAL
- en: During the workshop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a facilitator, your role is not to rule, but to observe and guide. The fewer
    rules you will set and enforce, the better your workshop is going to be. After
    the ice-breaking, some people will start putting stuff on the wall, and other
    people will start asking questions. At this stage, there are a few things to keep
    in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: People tend to ask the facilitator questions, as they see them as the meeting
    organizer and therefore as a person who has more information and authority. As
    a facilitator, direct them and their questions to other people in the room, in
    particular to those people with answers, whom you have invited.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be some confusion about domain events, especially if your audience
    are not native English speakers and the term **domain event** can be seen as technical
    (it isn't). As a result, there might be some who keep putting up stickies with
    features they desire to have (such as payment processing or a shopping cart),
    or imperative actions (such as process payment or register customer). It is the
    facilitator's job to prevent this and explain once again that, at this stage,
    the goal is to describe the flow of domain events, which are the facts of life
    and cannot be undone, removed, or changed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apart from what has been mentioned earlier, there are no real mistakes or errors
    that people can make, at least at the level of notation. Do not try to de-duplicate
    events or generalize, do not discourage people from doing stuff by saying they
    are doing something incorrectly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Usually, these three tips help to drive the workshop from the organizational
    point of view. But since we are dealing with people, there are always some behavioral
    and personal aspects. Several things usually happen that are essential for the
    facilitator to observe and sometimes intervene.
  prefs: []
  type: TYPE_NORMAL
- en: First, be prepared for complex discussions. If there are no discussions, then
    either the domain is too simple, or you got the wrong people, or there is something
    else that prevents people from speaking up. Disputes are inevitable since every
    person in the room has their point of view on the domain. Even developers quickly
    form their opinions after they understand the initial idea, or maybe read the
    specification. The critical thing here is that developers need to ask questions.
    There should be no assumptions about what happens and how it happens. It is the
    facilitator's job to encourage developers to participate since some of them are
    introverts and don't really like being in an open discussion. But since our goal
    is to give developers a better understanding of the domain, they need to participate.
  prefs: []
  type: TYPE_NORMAL
- en: Try to pay attention to edge cases. People always prefer to model the happy
    path, when no exceptions and errors occur. We always need to keep in mind that
    one event is a consequence of some other event under certain conditions. Yes,
    there could be some straight flows, but they aren't commonplace, especially if
    we are talking about business. For example, *payment processed* can logically
    lead to *order paid*, then *order shipped*, and then *order delivered*. But what
    if the payment has failed? What if the payment amount does not cover the full
    order total (partial payment)? What if goods aren't available in stock, although
    we think that they are? What if the parcel is lost in transit? All these things
    can and will happen. For developers, they might seem complicated, and usually,
    they don't know how to deal with these situations other than throwing an exception.
    But the business often has procedures in place to fix most of these situations,
    and these fixes can and should be modeled.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, discussions about edge cases will almost certainly create some ambiguity
    and uncertainty because not all exceptions are covered by business processes,
    or the people that you have available for the workshop don''t deal with such situations.
    If there are several domain experts in the room, they might disagree and argue
    with each other. For your short workshop, such circumstances are counterproductive.
    Therefore, if you observe that some heated discussion is taking place, or at some
    point, there are too many puzzled faces and no one can bring clarity to something,
    you can identify a hotspot. At this point, you need to introduce one more element
    to the notation. Hotspots are usually marked by bright sticky notes; for example,
    Alberto proposes bright pink. So, you might have something like this on the wall:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/90b8a5c4-b889-40d9-b80a-974d26dc815b.png)'
  prefs: []
  type: TYPE_IMG
- en: Bright colors help to bring attention
  prefs: []
  type: TYPE_NORMAL
- en: Identifying and characterizing hotspots allows you to postpone decisions and
    cut off arguments, effectively letting the group to move forward and not get stuck.
    You might find your wall full of hotspots by the end of the workshop, and this
    is entirely normal. It indicates that people that you have invited either need
    to come to some agreement about handling some situations, or you need to speak
    to someone else and collect missing information. Hotspots deserve close attention,
    but it should be after the workshop has finished. Try to cut off unproductive
    discussions and going in circles by putting up a pink sticky and asking people
    to move on.
  prefs: []
  type: TYPE_NORMAL
- en: The third thing to keep in mind is that, when you have a few domain experts
    who specialize in different parts of a larger domain, you will observe them grouping
    together by functional specialization area, forming islands or clouds of events
    that barely connect to other islands produced by other groups. It is very interesting
    to observe and essential to catch since you might be witnessing the first draft
    of your context map. We will discuss context maps later in the book. Do not discourage
    people from doing this, and go with the flow. Pay attention to how these islands
    interconnect. Usually, a minimal number of events belong to more than one group
    of domain events.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then finally, there is a chance that your business works with organizations
    and systems that are out of your control. Such entities can be called **external
    systems** and need to be put on the model. There are domain events that can go
    to such systems, and you might also receive some events from external systems.
    That introduces the new element in your notation, and in Alberto''s color scheme
    external systems are visualized using large pastel pink sticky notes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/584e5b87-0aeb-45b9-9bab-8864c470e7f7.png)'
  prefs: []
  type: TYPE_IMG
- en: Payment provider is an external system
  prefs: []
  type: TYPE_NORMAL
- en: Remember about the unlimited modeling space and ensure that people do not try
    to save space because there is not much space left. Reorganize events to make
    more space or, preferably, put more paper on the wall. Remember that paper is
    cheap and knowledge is precious. You don't want to lose understanding because
    someone is saving space on paper.
  prefs: []
  type: TYPE_NORMAL
- en: When people run out of ideas, and there will be some awkward moments of silence.
    You might need to ignite the fire again by offering to look at the model from
    a different perspective. There are at least two relatively easy ways to enrich
    the model by adding something that's missing. First, ask people to traverse the
    timeline backward. Very often, something that was considered not significant was
    not put on the wall, but this thing is essential for the next thing to happen.
    For example, someone might have forgotten that a packing list needs to be produced
    before the order is shipped. Another technique is to identify where the business
    creates value. Trivially, try following the money. Very often, developers get
    into discussing fancy nice-to-haves and forget that the business needs to earn
    something to pay their salary.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, as mentioned before, keep the time in mind and have at least one break
    per hour. Keep your promise and don't go overboard; don't keep people for longer
    than they have planned to stay. If you followed my advice and bought some fruit
    and drinks, some might even want to continue, but it is up to them to decide whether
    your workshop should take longer than expected.
  prefs: []
  type: TYPE_NORMAL
- en: After the workshop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When time is up, most probably you'll have a long paper roll with a lot of sticky
    notes in different colors. A lot of time and effort has been spent producing it,
    and this paper roll is often seen as a precious artifact. However, this is not
    exactly the case. You might want to keep evidence of what you have discussed and
    modeled, and especially the list of hotspots. But the main takeaway is the knowledge
    that developers and other participants just gained and will take to the bank.
    More domain knowledge and less ignorance are the most important, albeit invisible,
    artifacts of the EventStorming session.
  prefs: []
  type: TYPE_NORMAL
- en: 'That does not mean that you will throw away the paper roll. People that do
    it for the first time might see such action as a sign of disrespect. Keep the
    roll, take panoramic, pictures and send it to everyone. Yes, most probably you
    will never open the roll again. It is much more productive to create all these
    events from scratch should you need to do it again. People already know, and it
    will be even more beneficial for them to refine the model this way. But, for the
    sake of safety, keep the roll somewhere safe for a couple of weeks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a02271a4-04d4-4c3e-b42d-1bdc611cb079.png)'
  prefs: []
  type: TYPE_IMG
- en: Keep them, but you'll probably never look at them again
  prefs: []
  type: TYPE_NORMAL
- en: Remember to plan follow-up sessions to discuss hotspots. Usually, smaller groups
    might need to participate. Sometimes you will need to invite someone else because
    of the questions you have got. You might not need to repeat what has already been
    done and concentrate on discussing the issues you have discovered. Indeed, using
    EventStorming in such discussions is beneficial and will enrich the model.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will also discuss how to perform the design-level EventStorming,
    which is a bit more technical and can only be done on a smaller functional area
    of the domain. The outcome of such a session can be taken straight to your issue
    tracker.
  prefs: []
  type: TYPE_NORMAL
- en: Our first model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now let's try to practice and do an imaginary EventStorming session for our
    sample application domain. It is not easy to imagine how it would go since the
    most crucial aspect of any EventStorming workshop is the people and how they behave.
    We definitely cannot reproduce it here in writing, but we can imagine some discussions
    that can take place and the event flow that is produced.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be going through a fictitious EventStorming session, where a classified
    ads application will be discussed. A facilitator, let''s call her Ann, has invited
    the following people to the workshop:'
  prefs: []
  type: TYPE_NORMAL
- en: John, the company owner. He believes that the system will be the market leader
    due to its simplicity and unique features.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mary is the UX (user experience) designer, and she has done some research on
    existing systems and has talked to some potential users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nick and Eve are full-stack developers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ian executes the back office, dealing with finances and ensuring that the company
    is doing well.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It is time for the planned session, and people stream into the meeting room,
    trying to locate chairs, but there are none. There are two small tables in the
    room—on one they find some fruit and drinks; on the other one lies a bunch of
    sticky notes of different colors and a lot of marker pens, enough for a crowd
    double the size. Two walls are decorated with a long sheet of paper, about seven
    meters in length. There is also a flipchart and a whiteboard. People look a bit
    puzzled, and now it is time to provide some clarity:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"Welcome to our first, but hopefully not last, EventStorming workshop*,*"*
    says Ann. *"*W*e will be exploring how our company would like the business to
    run, and by the end of this session, everyone in this room should have a shared
    understanding of what we want to do*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*"To do this, we will describe what happens on our side when customers use
    our services,"* continues Ann, *"And we will be using sticky notes for that. To
    start with, we will just put up statements of fact, also known as domain events,
    on the wall. Imagine how stuff flows through the business, and when something
    happens, write a couple of words in the past tense on a sticky note and put it
    on the wall."*'
  prefs: []
  type: TYPE_NORMAL
- en: Ann writes the word *legend* on the flip chart and puts up an orange sticky
    note with the words *something happened—domain event* in the middle. Then she
    draws a horizontal arrow on top of the paper sheet on the wall and writes *time*
    underneath. *"**Since one fact follows another fact, they form sequences, or processes,
    which don't happen simultaneously, but in order, one after another. Therefore,
    we try to arrange these events on a timeline,"* she explains.
  prefs: []
  type: TYPE_NORMAL
- en: People in the room seem to get it, and Ann gives everyone a pile of sticky notes
    and a pen. Still, everyone seems reluctant to do anything and instead look at
    each other and feel a bit uncomfortable and nervous like they are afraid of doing
    something wrong. Then John says, *"Well, the best place to start is the start.
    What would be the first thing that happened? Maybe when a customer registers with
    us**."* Such uncertainty triggers a discussion that goes nowhere. There is still
    not a single sticky note placed on the wall. Noticing this, Ann writes **Classified
    Ad Published** on a sticky and puts it somewhere in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: A single sticky note on the wall sparks a discussion on what the primary element
    in the system should be called—would this be a *classified ad*, or just an *ad*,
    or something else? People start putting things that seem to happen before an *ad*
    is published, such as **Ad created** and **Ad updated**. After a glimpse, Mary
    expresses skepticism about these terms, since ads aren't updated. There are multiple
    independent properties of the ad, which change differently. For example, uploading
    a picture is done separately, then the ad title is updated. Changing the ad category
    can be restricted, and updating the price could trigger some interesting behaviors,
    such as informing people who have subscribed to a feed of classified ads for which
    the price recently decreased.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, John starts to discuss some advanced features, such as seller
    and buyer ratings, and eventually, they find out that, on the other part of the
    wall, there are no buyers or sellers, but *users*. This term seems to have meaning
    when talking about authentication and profiles but does not help during the selling
    and buying process.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this moment, the wall looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3d6854f6-0e1f-4eac-96dc-277ca5582f52.png)'
  prefs: []
  type: TYPE_IMG
- en: First model
  prefs: []
  type: TYPE_NORMAL
- en: Some work is done, and people need a little break to consume all the goodies
    that Ann has prepared for them, and to reflect on what has been discussed and
    discovered.
  prefs: []
  type: TYPE_NORMAL
- en: After the break, they continue.
  prefs: []
  type: TYPE_NORMAL
- en: Eve and John start to discuss the approval process, which was completely missing
    before. It seems that there is a large percentage of potentially fraudulent and
    generally malicious classified ads that are placed on competitor's sites, and
    all of them have some prevention mechanisms. Those who don't bother doing any
    reviewing at all quickly lose their credibility and trust, and are pushed out
    of business. But our company has no personnel to keep up with reviewing all ads
    manually, so the discussion keeps going in circles. Ann notices this and puts
    a bright pink sticky note on the wall that says *malicious ads detection*. *"We
    seem to need this, but we aren't sure how,"* she says. *"Let's just put it here
    as a reminder and get back to it later when we have discussed the rest."* The
    discussion on this topic then stops and constructively continues towards evolving
    the process before and after the detection takes place.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, the third element is added to the notation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/553ec1b6-516f-449a-b42e-57388e334de8.png)'
  prefs: []
  type: TYPE_IMG
- en: Final notation for the Big Picture workshop
  prefs: []
  type: TYPE_NORMAL
- en: Ian wasn't very active in the discussion and was walking around nodding and
    sometimes making a grimace of dissent. When Ann asked him what is wrong, Ian impatiently
    replies, *"N**o one has even thought about how are we going to earn any money.
    Without earning anything we will not survive. We don't have that much investment,
    and we better get some revenue as soon as we can*.*"* That sends a small shockwave
    through the team, and people start thinking about how they forgot to bring the
    money aspect to the picture. Then, John explains the original idea that the essential
    service is free, but some additional services, such as placing an ad at the top
    of the search results, showing larger pictures, and so on, will be offered for
    a small fee. He also explains that the free service is only available for private
    individuals, and if a company wants to sell something via the website, they need
    to have an exclusive agreement. Plus, he continues, selling cars and real estate
    should be an entirely different thing, since it requires advanced integration
    and some safety measures, and these services will never be free.
  prefs: []
  type: TYPE_NORMAL
- en: This new information sparks discussions, and after a short while everyone agrees
    that for the first version they need to target the largest audience and the most
    straightforward possible service. It means that they will only offer free ads
    with a couple of options, which should create the primary revenue stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re now at the end of the workshop, and the wall is covered in sticky notes.
    Here is what they produced:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43147c0d-ea06-41a3-9a13-68a35c848f87.png)'
  prefs: []
  type: TYPE_IMG
- en: Final big picture model
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see, the session uncovered several points that were either unknown
    or assumed by others but were never made clear. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: There is no such thing as *ad updated*, but rather a *picture uploaded* and *price
    decreased* and so on, which are more precise and trigger different logic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are different contexts where a person is known as a *user* and at the
    same time as a *seller* or *buyer*. The link between those contexts isn't stable,
    which might be an indication that these are at least different entities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **minimal viable product **(**MVP**) shrank to the bare minimum of free
    ads with small paid additions. Everything else will come later on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features such as seller and buyer ratings and smart suggestions are nice to
    have but do not bring immediate value to the users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There will be, however, a strong need for some malicious content detection system,
    since manual reviewing will work for an insufficient period, if we consider the
    expectations of the number of ads to be published per day.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developers got a much better understanding of what the business expects the
    system to do, and how their UX expert wants it to look. They made many adjustments
    and original ideas, and everyone seems to be on the same page. The ignorance level
    is much lower than before, and the risk of developers being busy solving the wrong
    problem is significantly mitigated.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned what EventStorming is, and why every team would
    benefit from organizing such a workshop with domain experts, that is, to gain
    domain knowledge and decrease ignorance. We also looked at some practical tips
    on how an EventStorming session can be arranged and facilitated.
  prefs: []
  type: TYPE_NORMAL
- en: The final part of this chapter is about the model for our sample business. We
    discussed the business flow, identified many events and some hotspots, gaining
    a significant amount of insight into what kind of system we are going to build
    during this book.
  prefs: []
  type: TYPE_NORMAL
- en: We have briefly touched on the behavioral aspect of EventStorming, but there
    is more to it, which we cannot cover in this book due to the broad nature of this
    topic. Check out the next section to find references to Alberto Brandolini's work,
    and study the referenced materials to learn more about people, their biases and
    behaviors, and why software development is a learning process.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look deeper into the modeling process, with more
    of a focus on artifacts that can help us to start writing code and deliver initial
    prototypes as soon as possible.
  prefs: []
  type: TYPE_NORMAL
- en: The EventStorming community has a lot of discussions about using the technique
    in distributed teams or when end users aren't directly available to participate
    in such sessions. Alberto points out that the body language is extremely important
    to get an overall feeling of how the session goes and to identify the roles of
    the participants in the session and in the business. In my view, that is true,
    but we often deal with situations when such a session is nearly impossible to
    organize. For distributed systems, I would personally recommend using online real-time
    tools, like Miro, which I used to create many diagrams for this book. It allows
    for people to participate in modeling sessions wherever they are located.
  prefs: []
  type: TYPE_NORMAL
- en: For SaaS businesses, the issue might be even harder because there's no single
    group of users that can be trusted to represent the whole user base. However,
    even with such a scenario, it is often possible to identify a group of the most
    engaged customers and invite them to be a part of your team. Not only you get
    great insights about how they use your system and how they want it to be improved,
    but also you get great free publicity by the word of mouth. People overall respect
    openness and greatly appreciate when their voice is heard by developers.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here is some information you can refer to:'
  prefs: []
  type: TYPE_NORMAL
- en: '*EventStorming* ([EventStorming.com](https://www.eventstorming.com/))—the place
    to get more information and links'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Introducing EventStorming*, Brandolini A. (2017), Leanpub ([https://leanpub.com/introducing_eventstorming](https://leanpub.com/introducing_eventstorming))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
