- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Based on what we covered in *Chapters 1* and *2*, the first steps of software
    development will direct you to create a software project. When it comes to software
    projects, the biggest challenge is how to organize them in a way where every single
    participant will understand what is needed. The best way to do so is to organize
    its requirements. But more than that, connecting these requirements to a code
    repository will deliver to everybody a fast and more collaborative view of the
    project that is being worked on. For years, Microsoft has invested in tools to
    help us to do this. Team Foundation Server and Visual Studio Teams Services are
    examples. Today, there are two good approaches we can use that we will discuss
    in this chapter: Azure DevOps and GitHub. Azure DevOps is an evolution of Visual
    Studio Team Services, and it offers a variety of new features that can help developers
    document and organize their software. GitHub is well known as an online code repository,
    but since Microsoft acquired it, a bunch of great tools for application lifecycle
    management have been integrated into it. For this reason, we can now find many
    different ways of using GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a DevOps project using your Azure account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the functionalities offered by Azure DevOps and GitHub to organize
    your project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Organizing and managing requirements using Azure DevOps and GitHub
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first two sections of this chapter summarize all the functionalities offered
    by these tools, while the remaining sections focus specifically on the tools for
    documenting requirements and supporting the overall development process. Most
    of the functionality introduced in the first two sections will be analyzed in
    more detail in other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter requires you to create a new free Azure account or use an existing
    one. The *Creating an Azure account* section in *Chapter 1*, *Understanding the
    Importance of Software Architecture*, explains how to create one.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure DevOps is a Microsoft **Software-as-a-Service** (**SaaS**) platform that
    enables you to deliver continuous value to your customers. By creating an account
    there, you will be able to easily plan your project, store your code safely, test
    it, publish the solution to a staging environment, and then publish the solution
    to the actual production infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: The automation of all the steps involved in software production ensures the
    continuous enhancement and improvement of an existing solution to adapt it to
    market needs.
  prefs: []
  type: TYPE_NORMAL
- en: You can start the process by accessing [https://dev.azure.com](https://dev.azure.com).
    There, you will be able to sign up using a new account or even sign in using your
    GitHub account. Once you have access to it, you will be asked to create an organization,
    as you can see in the following figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Creating an Azure DevOps organization'
  prefs: []
  type: TYPE_NORMAL
- en: After the organization is created, you will be able to create a new project,
    as we can see in the following screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Creating a project using Azure DevOps'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to mention that public projects can be used so long as you comply
    with the Azure DevOps code of conduct. Once you define the name of the project
    and its visibility, you will have the project created in seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.3: Azure DevOps project created'
  prefs: []
  type: TYPE_NORMAL
- en: DevOps itself will be discussed in detail in *Chapter 8*, *Understanding DevOps
    Principles and CI/CD*, but you need to understand it as a philosophy that is focused
    on delivering value to customers. It is the union of people, processes, and products,
    where the **Continuous Integration and Continuous Deployment** (**CI/CD**) methodology
    is used to apply continuous improvements to a software application delivered to
    the production environment. Azure DevOps is a powerful tool whose range of applications
    encompasses all the steps involved in both the initial development of an application
    and its subsequent CI/CD process.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps contains tools for collecting requirements and organizing the whole
    development process. They can be accessed by clicking the **Boards** menu option
    on the Azure DevOps page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface gráfica do usuário, Aplicativo  Descrição gerada automaticamente](img/B19820_03_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.4: Azure DevOps Boards menu'
  prefs: []
  type: TYPE_NORMAL
- en: All other functionalities available in Azure DevOps are briefly reviewed in
    the following subsections. They will be discussed in detail in other chapters.
    More specifically, DevOps principles and CI/CD are discussed in *Chapter 8*, *Understanding
    DevOps Principles and CI/CD*, and build/test pipelines can be reviewed in *Chapter
    9*, *Testing Your Enterprise Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Managing system requirements in Azure DevOps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Azure DevOps enables you to document system requirements using work items. Work
    items are stored in your project as chunks of information that can be assigned
    to a person. They are classified into various types and may contain a measure
    of the development effort required, a status, and the development stage (iteration)
    they belong to. Mainly, they are tasks or actions that need to be completed to
    deliver a product or service.
  prefs: []
  type: TYPE_NORMAL
- en: DevOps is usually combined with agile methodologies, so Azure DevOps uses iterations,
    and the whole development process is organized as a set of sprints. The work items
    available depend on the *work item process* you select while creating the Azure
    DevOps project.
  prefs: []
  type: TYPE_NORMAL
- en: You can check project types in Azure DevOps at [https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process).
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections contain a description of the most common work item
    types that appear when an **Agile** or **Scrum** work item process is selected
    (the default is **Agile**).
  prefs: []
  type: TYPE_NORMAL
- en: Epic work items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine you are developing a system comprising various subsystems. You are probably
    not going to conclude the whole system in a single iteration. Therefore, we need
    an umbrella spanning several iterations to encapsulate all features of each subsystem.
    Each Epic work item represents one of these umbrellas that can contain several
    features to be implemented in various development iterations.
  prefs: []
  type: TYPE_NORMAL
- en: In the Epic work item, you can define the state and acceptance criteria as well
    as the start date and target date. Besides this, you can also provide a priority
    and an effort estimate. All this detailed information helps the stakeholders to
    follow the development process. This is useful as a macro view of the project.
  prefs: []
  type: TYPE_NORMAL
- en: Feature work items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: All the information that you provide in an Epic work item can also be placed
    in a Feature work item. So, the difference between these two types of work items
    is not related to the kind of information they contain but rather to their respective
    roles and the goals your team aims to accomplish by completing. A feature is a
    shippable software component. Epics may span several iterations and are hierarchically
    above Features; that is, each Epic work item is linked to several children features,
    while each Feature work item is usually implemented in a few sprints and is part
    of a single Epic work item.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that all work items have sections for team discussions.
    There, you will be able to find a team member in the discussion area by typing
    the `@` character (as in many forums/social media applications). Inside each work
    item, you can link and attach various information. You may also check the history
    of the current work item in a specific section.
  prefs: []
  type: TYPE_NORMAL
- en: Feature work items are the places to start recording user requirements. For
    instance, you can write a Feature work item called **Access Control** to define
    the complete functionality needed to implement the system access control.
  prefs: []
  type: TYPE_NORMAL
- en: Product Backlog items/User Story work items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Which of these work items is available depends on the working item process selected.
    There are minor differences between them, but their purpose is essentially the
    same. They contain detailed requirements for the features, described by the Feature
    work items they are connected to. More specifically, each Product Backlog/User
    Story work item specifies the requirements of a single functionality that is part
    of the behavior described in its parent Feature work item.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, in a Feature work item for system access control, the maintenance
    of the users and the login interface should be two different User Story/Product
    Backlog items. These requirements will guide the creation of other child work
    items:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tasks**: These are important work items that describe the job that needs
    to be done to meet the requirements stated in the father Product Backlog items/User
    Story work item. Task work items can contain time estimates, which help with team
    capacity management and overall scheduling.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Test cases**: These items describe how to test the functionality described
    by the requirements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Considering that you will have many work items in a project, visualizing them
    is not an easy task. For this reason, you may consider **Work Item Visualization**
    to simplify your view. Check it out at [https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization).
  prefs: []
  type: TYPE_NORMAL
- en: The number of tasks and test cases you will create for each Product Backlog/User
    Story work item will vary according to the development and testing scenario you
    use.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There is no software without code, and the code that will be implemented according
    to a software requirement needs to be placed in a software repository. The **Repos**
    menu item gives you access to a default Git repository where you can place your
    project’s code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.5: Azure DevOps Repos menu'
  prefs: []
  type: TYPE_NORMAL
- en: By clicking the **Files** item, you enter the default repository initial page.
    It is empty and contains instructions on how to connect to this default repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add further repositories through the drop-down menu at the top of the
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Adding a new repository'
  prefs: []
  type: TYPE_NORMAL
- en: All repositories created are accessible through the same drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'As shown in the preceding screenshot, each repository’s initial page contains
    the repository address and a button to generate repository-specific credentials,
    so you can connect to your DevOps repositories with your favorite Git tools. However,
    you can also connect from inside Visual Studio in a very simple way:'
  prefs: []
  type: TYPE_NORMAL
- en: Start Visual Studio and ensure you are logged in to it with the same Microsoft
    account used to define your DevOps project (or that was used to add you as a team
    member).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the **Git Changes** window is not open, make it appear by going to the top
    menu in Visual Studio and selecting **View -> Git Changes**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Git Changes window'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **Create Git Repository**... button in the Git Changes window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the window that opens, select **Existing remote** and insert the URL of
    the DevOps repository you created. Then, click **Create and Push**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19820_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Connecting to the remote DevOps repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once connected to your DevOps remote repository, the Git Changes window will
    show several Git commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Git Changes window'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you have changes to commit, you can insert a message in the textbox at
    the top of the window and commit them locally by clicking the **Commit All** button,
    or you can click the dropdown next to this button to access more options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_03_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Commit options'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can commit and push or commit and sync, but you can also stage your changes.
    The three arrows in the top right of the Git Changes window trigger a fetch, pull,
    and push, respectively. Meanwhile, the dropdown at the top of the window takes
    care of operations on branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B19820_03_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: Branch operations'
  prefs: []
  type: TYPE_NORMAL
- en: Package feeds
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A great way to accelerate software development is by reusing code components
    that meet the user requirements. These components, in general, are placed into
    packages. We will discuss this further in *Chapter 5*, *Implementing Code Reusability
    in C# 12*. The **Artifacts** menu handles the software packages used or created
    by the project. There, you can define feeds for basically all types of packages,
    including NuGet, Node.js, and Python. Private feeds are required since commercial
    projects also use private packages, so you need a place to put them. Moreover,
    packages produced during builds are placed in these feeds, so other modules that
    have them as dependencies can immediately use them.
  prefs: []
  type: TYPE_NORMAL
- en: Once in the **Artifacts** area, you can create several feeds by clicking the
    **+ Create Feed** button, where each feed can handle several kinds of packages,
    as shown in *Figure 3.12*.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: Feed creation'
  prefs: []
  type: TYPE_NORMAL
- en: If you select the option to connect to packages from public sources, by default,
    the feed connects to `npmjs`, `nuget.org`, `pypi.org`, and `Maven`. However, you
    can go to the **Search Upstream sources** tab on the **Feed** settings page and
    remove/add package sources. The settings page can be reached by clicking the settings
    icon in the upper-right corner of the feed page.
  prefs: []
  type: TYPE_NORMAL
- en: 'A screenshot of the page of the newly created feed follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.13: Feed page'
  prefs: []
  type: TYPE_NORMAL
- en: The **Connect to Feed** button for each feed shows a window that explains how
    to connect to the feed for each package type.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.14: Feed connection information'
  prefs: []
  type: TYPE_NORMAL
- en: For NuGet packages, you should add all project feeds to your Visual Studio projects’/solutions’
    `nuget.config` file so that local machines can also use them; otherwise, your
    local build will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Test Plans
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Test Plans** section allows you to define the test plans you want to use
    and their settings. Tests are discussed in detail in *Chapter 9*, *Testing Your
    Enterprise Application*, but here, we would like to summarize the opportunities
    offered by Azure DevOps. Test-related operations and settings can be accessed
    through the **Test Plans** menu item.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.15: Test Plans menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you may define, execute, and track test plans made up of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Manual acceptance tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Load tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Automatic unit tests must be defined in test projects contained in the Visual
    Studio solution and based on a framework such as NUnit, xUnit, and MSTest (the
    .NET SDK has project templates for all of them, so you may find them in Visual
    Studio). Test Plans gives you the opportunity to execute these tests on Azure
    and to define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Several configuration settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to execute them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to track them and where to report their results in the overall project documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For manual tests, you may define complete instructions for the operator in the
    project documentation, covering the environment in which to execute them (for
    example, an operating system) and where to report their results. You can also
    define how to execute load tests and how to measure the results.
  prefs: []
  type: TYPE_NORMAL
- en: Pipelines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pipelines are automatic action plans that specify all steps from the code build
    until the software deployment is in production. They can be defined in the **Pipelines**
    area, which is accessible through the **Pipelines** menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.16: Pipelines menu'
  prefs: []
  type: TYPE_NORMAL
- en: There, you can define a complete pipeline of tasks to be executed alongside
    their triggering events, which encompass steps such as code building, launching
    test plans, and what to do after the tests have passed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Typically, after the tests have passed, the application is automatically deployed
    in a staging area where it can be beta-tested. You can also define the criteria
    for automatic deployment to production. Such criteria include, but are not limited
    to, the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The number of days during which the application was beta-tested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The number of bugs found during beta-testing and/or removed by the last code
    change
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manual approval by one or more managers/team members
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The criteria decision will depend on the way the company wants to manage the
    product that is being developed. You, as a software architect, must understand
    that when it comes to moving code to production, the safer, the better.
  prefs: []
  type: TYPE_NORMAL
- en: Usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see from the preceding screenshots, the process for creating an Azure
    DevOps account is extremely simple. It is worth mentioning that you can start
    using this fantastic tool at no cost if you have no more than five developers
    on your team, plus any number of stakeholders. However, it is worth mentioning
    that there is no limit on the number of users with a stakeholder role.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing GitHub projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Considering all the benefits of Azure DevOps presented, you may now be asking
    why we need to explore another tool. The reason is simple: GitHub has become,
    over the years, the main tool for the open-source world. So, we will find many
    initiatives and projects there that have changed the way we deliver software.'
  prefs: []
  type: TYPE_NORMAL
- en: The main objective of GitHub is to manage code and guarantee that its users
    can create solutions in a collaborative way. For this, the platform presents features
    like version control, pull requests, code reviews, issue tracking, and CI/CD.
  prefs: []
  type: TYPE_NORMAL
- en: However, it would be impossible to design great projects without a platform
    to support them. That is why we have GitHub projects as an initiative that delivers
    an adaptable, flexible tool for planning and tracking work on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about GitHub projects at [https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).
  prefs: []
  type: TYPE_NORMAL
- en: It is quite simple to set up a project on GitHub. Once you log in to the platform,
    you may find projects from your user menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.17: Accessing GitHub projects'
  prefs: []
  type: TYPE_NORMAL
- en: There, you will find the option to create a **New project**. When you decide
    to create it, you will find different templates already provided by GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.18: Creating a project on GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: The project needs to be linked to a repository. You can do this by accessing
    the **Projects** tab in your repo. There, you can also create a new project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Connecting a GitHub repository to a project'
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that GitHub is more flexible than Azure DevOps, so you
    will find tools like the ones presented on Azure DevOps, but with different names/definitions.
    For instance, any task that you will need to define will be called an **issue**.
    Each issue can be placed in a **milestone**, which is a good way to define a feature
    or user story since it will describe an achievement with a date to be finished.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.20: Setting milestones in a GitHub repository'
  prefs: []
  type: TYPE_NORMAL
- en: Check out more about using issues at [https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
    and milestones at [https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones).
  prefs: []
  type: TYPE_NORMAL
- en: The idea of projects on GitHub is to define useful information for each item
    that will be used, which is documented in an issue. By default, only *Title*,
    *Assignees*, and *Status* are required. But you can add labels, linked pull requests,
    reviewers, repositories, and milestones to them. You can also define custom fields,
    like **Iteration**. For this, you will need to access **Project settings**.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.21: Creating custom fields for a GitHub project'
  prefs: []
  type: TYPE_NORMAL
- en: In a GitHub project, you can also set different **Views**, such as **Table**,
    **Board**, or **Roadmap**. The Table view, in particular, offers a quick and efficient
    method for entering this project-related information, including the custom fields
    you’ve created, into the project. Once you’ve completed the design phase, you’re
    ready to create issues for each item planned in your project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.22: GitHub project Table view'
  prefs: []
  type: TYPE_NORMAL
- en: The **Board** view, together with a filter related to iteration, is a perfect
    way to conduct daily meetings because you will see exactly what is happening to
    the project.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.23: GitHub Board view'
  prefs: []
  type: TYPE_NORMAL
- en: To finish, the **Roadmap** view will give you a perspective of the entire project
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_03_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.24: GitHub Roadmap view'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, with GitHub projects, you will get almost the same results that
    we got when using Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered how you can create an Azure DevOps or GitHub account for
    a software development project and how to start managing your projects with Azure
    DevOps or GitHub projects.
  prefs: []
  type: TYPE_NORMAL
- en: It also gave a short review of all of Azure DevOps’ functionalities, explaining
    how to access them through the Azure DevOps main menu.
  prefs: []
  type: TYPE_NORMAL
- en: To finish, it presented the GitHub project view options to plan and manage a
    project.
  prefs: []
  type: TYPE_NORMAL
- en: The chapter also described in more detail how to manage system requirements
    and how to organize the work necessary with various kinds of work items or issues,
    along with how to plan and organize sprints that will deliver epic solutions with
    many features.
  prefs: []
  type: TYPE_NORMAL
- en: The decision of whether to use Azure DevOps or GitHub in a project will vary
    according to the expertise of the team and the objective of the project itself.
    If you are designing an open-source solution, GitHub will definitely be a better
    option. On the other hand, if you are designing an enterprise solution and need
    everything to be connected, Azure DevOps is a fantastic tool to do so.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter discusses important approaches while writing code.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is Azure DevOps only available for .NET projects?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kinds of test plans are available in Azure DevOps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can DevOps projects use private NuGet packages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why do we use work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between Epic and Feature work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What kind of relationship exists between Task and Product Backlog items/User
    Story work items?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can GitHub projects be useful?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which is the better option: Azure DevOps or GitHub?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the authors, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code175081751210902046.png)'
  prefs: []
  type: TYPE_IMG
