- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1 – Overview of OOP in .NET Core and C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What do the terms late and early binding refer to?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Early binding is established when the source code is compiled while late binding
    is established while the component is running.
  prefs: []
  type: TYPE_NORMAL
- en: '**Does C# support multiple inheritance?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. The reasoning is that multiple inheritance leads to more complex source
    code.
  prefs: []
  type: TYPE_NORMAL
- en: '**In C#, what level of encapsulation could be used to prevent access to a class
    from outside of the library?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `internal` access modifier can be used to limit the visibility of a class
    to only within the library.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the difference between aggregation and composition?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both are types of association and the easiest way to differentiate the two is
    by whether or not the classes involved can exist without being associated. In
    a composition association, the classes involved have a tight life cycle dependency.
    This implies that, when one class is deleted, the associated classes are also
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '**Can interfaces contain properties? (This is a bit of a tricky question)**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is possible for an interface to define properties, but as an interface does
    have a body...
  prefs: []
  type: TYPE_NORMAL
- en: '**Do dogs eat fish?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Dogs are lovely but they eat most things they can get in their mouth.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2 – Modern Software Design Patterns and Principles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**In SOLID, what does the S stand for? What is meant by a responsibility?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Single Responsibility Principle. Responsibility can be viewed as a reason for
    a change.
  prefs: []
  type: TYPE_NORMAL
- en: '**What SDLC method is built around cycles: Waterfall or Agile?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Agile is built around the concept of the development process being conducted
    in a collection of cycles.
  prefs: []
  type: TYPE_NORMAL
- en: '**Is the decorator pattern a creational or structural pattern?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The decorator pattern is a structural pattern that allows functionality to be
    divided between classes and is particularly useful to enhance classes at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: '**What does pub-sub integration stand for?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publish-Subscribe is a useful pattern where processes publish messages and other
    processes subscribe to receive the messages.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3 – Implementing Design Patterns – Basics Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**In developing software for an organization, why is it sometimes difficult
    to determine requirements?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many challenges to developing software for an organization. An example
    would be that changes in the organization's industry could cause the current requirements
    to need to be altered.
  prefs: []
  type: TYPE_NORMAL
- en: '**What are two advantages and disadvantages of waterfall software development
    versus agile software development?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Waterfall software development provides an advantage over agile software development
    as it is simpler to understand and implement. In some situations, where the complexity
    and size of the project is smaller, Waterfall Software Development could be a
    better option over Agile Software Development. Waterfall Software Development,
    though, does not handle change well and, by having a larger scope, has more chance
    of requirements changing before the project is completed.
  prefs: []
  type: TYPE_NORMAL
- en: '**How does dependency injection help when writing unit tests?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By injecting dependencies into a class, a class becomes easier to test as the
    dependencies are clearly known and more easily accessible.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why is the following statement false? With TDD, you no longer need people
    to test a new software deployment.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test-Driven Development helps to improve the quality of a solution by building
    a clear testing strategy into the software development life cycle. The tests defined,
    though, might not be complete, so there is still the need for additional resources
    to validate the delivered software.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4 – Implementing Design Patterns – Basics Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Provide an example to show why using a singleton would not be a good mechanism
    for limiting access to a shared resource?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A singleton intentionally creates a bottleneck in an application. It is also
    one of the first patterns developers learn to use and, because of this, it is
    often used in situations where limiting access to the shared resource is not required.
  prefs: []
  type: TYPE_NORMAL
- en: '**Is the following statement true? Why or why not? `ConcurrentDictionary` prevents
    items in the collection from being updated by more than one thread at a time.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For many C# developers, realizing that `ConcurrentDictionary` does not prevent
    items in the collection from being updated by more than one thread at a time is
    a painful lesson. `ConcurrentDictionary` protects a shared dictionary from being
    accessed and modified concurrently.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is a race condition and why should it be avoided?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A race condition is when the order of processing of multiple threads can culminate
    in different results.
  prefs: []
  type: TYPE_NORMAL
- en: '**How does the factory pattern help simplify code?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The factory pattern is an effective way to decouple the creation of objects
    within an application.
  prefs: []
  type: TYPE_NORMAL
- en: '**Do .NET Core applications require third-party IoC containers?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET Core has a powerful Inversion of Control built into the framework. It can
    be enhanced when required by other IoC containers, but is not required.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5 – Implementing Design Patterns – .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**If you are not sure what type of service lifetime to use, what type is it
    best to register a class as? Why?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Transient lifetime services are created each time they are requested. The majority
    of classes should be lightweight, stateless services, so this is the best service
    lifetime to use.
  prefs: []
  type: TYPE_NORMAL
- en: '**In .NET Core ASP .NET solutions, a scope is defined per web request or per
    session?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A scope is per web request (connection).
  prefs: []
  type: TYPE_NORMAL
- en: '**Does registering a class as a Singleton in the .NET Core DI framework make
    it thread-safe?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, the framework will provide the same instance for subsequent requests, but
    does not make a class thread-safe.
  prefs: []
  type: TYPE_NORMAL
- en: '**Is it true that the .NET Core DI framework can only be replaced with other
    Microsoft-supplied DI frameworks?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, there are many DI frameworks that can be used instead of the native DI
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6 – Implementing Design Patterns for Web Applications – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What is a web application?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It's a program that uses a web browser and can be accessible from anywhere if
    available over public network. This works on a client/server architecture and
    serves the client by taking an HTTP request and providing an HTTP response.
  prefs: []
  type: TYPE_NORMAL
- en: '**Craft a web application of your choice and depict a pictorial view of the
    working of web application.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the FlixOne application.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Inversion of Control?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inversion of Control** (**IoC**) is a container to invert or delegate the
    control. It is based on the DI framework. .NET Core has a built-in IoC container.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the UI/Architectural pattern? Which pattern you would like to use
    and why?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The UI Architectural pattern is designed to make a robust user interface to
    give user a better experience of the application. From the developer's point of
    view of point, MVC, MVP, and MVVM are the popular patterns.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7 – Implementing Design Patterns for Web Applications – Part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What are authentication and authorization?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authentication is a process in which a system verifies or identifies the incoming
    requests through credentials (generally a user ID and password). If the system
    finds that the provided credentials are wrong, then it notifies the user (generally
    via a message on the GUI screen) and terminates the authorization process.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization always comes after authentication. This is a process that allows
    the authenticated user who raised the request to access resources or data after
    verifying that they have access to the specific resources or data
  prefs: []
  type: TYPE_NORMAL
- en: '**Is it safe to use authentication at the first level of a request and then
    allow incoming requests for restricted areas?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is not always safe. As developers, we should take all necessary steps to
    make our application more secure. After first a level request, the authentication,
    the system should also check resource-level permissions.
  prefs: []
  type: TYPE_NORMAL
- en: '**How you will prove that authorization always comes after authentication?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a simple scenario of a web application, it first validates the user by asking
    for login credentials and then authorizes the user as per role to access specific
    resource.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Test-Driven Development and why do developers care about it?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test-Driven Development is a way to make sure that code is tested; it is like
    testing code by writing code. TDD is also known as Red/Blue/Green concepts. Developers
    should follow it to make their code/program work without any error.
  prefs: []
  type: TYPE_NORMAL
- en: '**Define TDD Katas. How does it help us to improve our TDD approach?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'TDD Katas are small scenarios or problems that help to learn to code by practice.
    You can take the example of Fizz Buzz Kata, where developers should apply coding
    to learn and practice TDD. If you want to practice TDD Katas, refer to this repository:
    [https://github.com/garora/TDD-Katas.](https://github.com/garora/TDD-Katas)'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8 – Concurrent Programming in .NET Core
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What is concurrent programming?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever things/tasks are happening at the same time, we say that tasks are
    happening concurrently. In our programming language, whenever any parts of our
    program run at the same time, it is concurrent programming.
  prefs: []
  type: TYPE_NORMAL
- en: '**How does true parallelism happen?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True parallelism is not possible on a single CPU machine because tasks are not
    switchable, as it has a single core. It only happens on a machine with multiple
    CPUs (multiple cores).
  prefs: []
  type: TYPE_NORMAL
- en: '**What is a race condition?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The potential for more than one thread to access the same shared data and update
    it with unpredictable results can be referred to as a race condition.
  prefs: []
  type: TYPE_NORMAL
- en: '**Why should we use `ConcurrentDictionary`?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A concurrent dictionary is a thread-safe collection class and stores key-value
    pairs. This class has implementation for a lock statement and provides a thread-safe
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9 – Functional Programming Practices – an Approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What is functional programming?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Functional programming is an approach to symbolic computation in the same way
    as we solve mathematical problems. Any functional programming is based on mathematical
    functions. Any functional programming style language works on solutions with two
    terms: what to solve and how to solve?'
  prefs: []
  type: TYPE_NORMAL
- en: '**What is referential transparency in functional programming?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In functional programs, once we define the variables, they do not change their
    value throughout the program. As functional programs do not have assignment statements,
    if we need to store value, there is no alternative; instead, we define new variables.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is `Pure` function?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Pure` functions are the ones that strengthen functional programming by
    saying that they are pure. These functions work on two conditions:'
  prefs: []
  type: TYPE_NORMAL
- en: The end result/output will always remain the same for the provided parameters.
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: These will not impact the behavior of the program or the execution path of the
    application, even if they are being called a hundred times.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 10 – Reactive Programming Patterns and Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What is a stream?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A sequence of events is called a stream. A stream can emit three things: a
    value, an error, and a signal for completion.'
  prefs: []
  type: TYPE_NORMAL
- en: '**What are reactive properties?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reactive properties are binding properties that react when an event triggers.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is a reactive system?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the basis of the Reactive Manifesto, we can conclude that reactive systems
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Responsive**: Reactive systems are event-based design systems because of
    this design approach; these systems are quick to respond to any request in a short
    time.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalable**: Reactive systems are reactive in nature. These systems can react
    to change the scalability rate by expanding or reducing the allocated resources.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resilient**: A resilient system is one that would not stop, even if there
    is any failure/exception. Reactive systems are designed in such a way that, despite
    any exception or failure, the system will never die; it remains working.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message-based**: Any data of an item represents a message and can be sent
    to a specific destination. When a message or data has arrived at a given state,
    an event that is a signal is emitted to notify that the message has been received.
    Reactive systems rely on this message-passing.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**What is meant by merging two reactive streams?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Merging two reactive steams is actually combining elements of two similar or
    different reactive streams into a new reactive stream. For example, if you have
    `stream1`, and `stream2` then `stream3 = stream1.merge(stream2)`, but the sequence
    of `stream3` would not be in order.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is the MVVM pattern?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Model-View-ViewModel** (**MVVM**) is one of the variations of **Model-View-Controller**
    (**MVC**) to meet the modern UI development approach, where UI development is
    the core responsibility of designer/UI-developers, rather than application developers.
    In this approach of development, a designer who is more of a graphical enthusiast
    and is focused on making the user interface more attractive may or may not bother
    about the development part of the application. Generally, designers (UI persons)
    use various tools to make the user interface more attractive. The MVVM is defined
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This is also called as a domain object and it holds data only; there
    is no business logic, validations, and so on.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This is a representation of data for the end user.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Model**: This separates View and Model; its main responsibility is to
    serve end users better stuff.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chapter 11 – Advanced Database Design and Application Techniques
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What is a ledger-style database?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This database is meant to insert operations only; there are no updates. Then,
    you create a view that aggregates the inserts together.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is CQRS?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Command Query Responsibility Segregation is a pattern that segregates the responsibilities
    between Query (to inserts) and Commands (to updates).
  prefs: []
  type: TYPE_NORMAL
- en: '**When should you use CQRS?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CQRS can be a good pattern to apply for task-based or event-driven systems,
    especially when the solution is composed of multiple applications and not a single
    monolithic website or application. It is **a pattern and not an architecture**,
    so it should be applied in specific cases and not in all business scenarios
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12 – Coding for the Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Is this a true statement? Most patterns have been developed recently and
    only apply to cloud-based applications.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, this is not true. Patterns have been evolving as software development changes
    but many of the core patterns have existed for decades.
  prefs: []
  type: TYPE_NORMAL
- en: '**What does an ESB stand for? What type of architecture can it be used in:
    EDA, SOA, or monolithic?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It stands for Enterprise Service Bus. It can be used effectively in event-driven
    architecture and service-oriented architecture.
  prefs: []
  type: TYPE_NORMAL
- en: '**Is queue-based load leveling is primarily used for DevOps, scalability, or
    availability?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Availability. Queue-based load leveling primarily used to handle large fluctuations
    in load by acting as a buffer to reduce the chance of an application becoming
    unavailable.
  prefs: []
  type: TYPE_NORMAL
- en: '**What are the benefits of CI/CD? Would it be more beneficial in a large number
    of globally dispersed teams or a single small team of collocated developers?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In general, CI/CD helps to identify issues early in the development life cycle
    by frequently performing merges and deployments. Larger, more complex solutions,
    tend to show the benefits more than smaller, simpler solutions.
  prefs: []
  type: TYPE_NORMAL
- en: '**In a website following static content hosting, does a browser retrieve images
    and static content directly through a CDN or does the web application retrieve
    the information on behalf of the browser?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A content delivery network can be used to improve performance and availability
    by caching static resources in multiple data centers, allowing for a browser to
    retrieve content directly from the closest data center.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A – Miscellaneous Best Practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**What is a practice? Give a few examples from our routine/daily life.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A practice may be one or more routine activities. To learn to drive, we should
    practice our driving. A practice is an activity that is not required to be memorized.
    There are a lot of examples of practice from our daily life: eating while watching
    TV shows, and so on. It does not break your rhythm to eat anything while you''re
    watching your favorite TV show.'
  prefs: []
  type: TYPE_NORMAL
- en: '**We can achieve a specific coding skill with practice. Explain this.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Yes, we can achieve a specific coding skill with practice. The practice needs
    attention and consistency. For example, you want to learn Test-Driven Development.
    To do so, you need to learn it first. You can learn it by practicing TDD-Katas.
  prefs: []
  type: TYPE_NORMAL
- en: '**What is Test-Driven Development and how does it help developers to practice?**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test-Driven Development is a way to make sure that code is tested; it is like
    we are testing code by writing code. TDD is also known as Red/Blue/Green concepts.
    Developers should follow it to make their code/program work without any error.
  prefs: []
  type: TYPE_NORMAL
