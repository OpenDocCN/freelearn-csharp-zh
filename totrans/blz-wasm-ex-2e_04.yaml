- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Modal Dialog Using Templated Components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A modal dialog is a dialog box that appears on top of all other content in a
    window and requires user interaction to close it. A templated component is a component
    that accepts one or more UI templates as parameters. The UI templates of a templated
    component can contain any Razor markup.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about **RenderFragment** parameters, **EventCallback**
    parameters, and CSS isolation. `RenderFragment` parameters are used when a parent
    component needs to share information with a child component, and conversely, `EventCallback`
    parameters are used when a child component needs to share information with its
    parent component. CSS isolation is used to scope CSS styles to a specific component.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a modal dialog component. The component will
    be a templated component that can render different HTML based on its parameters.
    It will use event callbacks to return events to the calling component. It will
    use CSS isolation to add the formatting that will make it behave like a modal
    dialog. We will test the modal dialog component by adding it to another component.
    Finally, we will move the component to a **Razor class library** so that it can
    be easily shared with other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Custom components
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: can be used over again.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Make a library!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `RenderFragment` parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `EventCallback` parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding CSS isolation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Razor class library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the modal dialog project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter04).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch4](https://packt.link/Ch4).'
  prefs: []
  type: TYPE_NORMAL
- en: Using RenderFragment parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `RenderFragment` parameter is a segment of UI content. It is used to communicate
    UI content from the parent to the child. The UI content can include plain text,
    HTML markup, Razor markup, or another component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is for the `Alert` component. The UI content of the `Alert`
    component is displayed when the value of its `Show` property is `true`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code, for the `Alert` component, includes three different types
    of parameters: simple type, `EventCallback`, and `RenderFragment`:'
  prefs: []
  type: TYPE_NORMAL
- en: The first parameter is the `Show` property. It is of type `Boolean`, which is
    a simple type. For more information on using simple types as parameters, see *Chapter
    2*, *Building Your First Blazor WebAssembly Application*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second parameter is the `OnOk` property. It is of type `EventCallback`.
    We will learn more about `EventCallback` parameters in the next section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last parameter is the `ChildContent` property. It is of type `RenderFragment`
    and is the subject of this section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following markup uses the `Alert` component to display the current day
    of the week in a dialog when the **Show Alert** button is clicked. The Razor markup
    between the opening tag and the closing tag of the `Alert` element is bound to
    the `ChildContent` property of the `Alert` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the dialog that is displayed when the **Show
    Alert** button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Sample alert'
  prefs: []
  type: TYPE_NORMAL
- en: 'The name of the `RenderFragment` parameter must be `ChildContent` to use the
    content of the element without explicitly specifying the parameter’s name. For
    example, the following markup results in the same output as the preceding markup
    that did not explicitly specify the `ChildContent` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `ChildContent` element is highlighted in the preceding markup.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: By convention, the name of the `RenderFragment` parameter used to capture the
    content of a parent element must be `ChildContent`.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to include multiple `RenderFragment` parameters in a component
    by explicitly specifying each parameter’s name in the markup. We will use multiple
    `RenderFragment` parameters to complete the project in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: A `RenderFragment` parameter enables a parent component to communicate the UI
    content to be used by its child component, while an `EventCallback` parameter
    is used to communicate from the child component back to the parent component.
    In the next section, we will explain how to use `EventCallback` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: Using EventCallback parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An event callback is a method that is passed to another method when a particular
    event occurs. For example, when the button on the `Alert` component is clicked,
    the `@onclick` event uses the `OnOk` parameter to determine the method that should
    be called. The method that the `OnOK` parameter references is defined in the parent
    component.
  prefs: []
  type: TYPE_NORMAL
- en: As previously stated, `EventCallback` parameters are used to share information
    from the child component to the parent component. They share information with
    their parent and notify their parent when something, such as a button click, has
    occurred. The parent component simply specifies the method to call when the event
    is triggered.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is an example of an `EventCallback` parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example uses a **lambda expression** for the `OnOk` method. When
    the `OnOk` method is called, the value of the `showAlert` property is set to `false`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A lambda expression is used to create an anonymous function. However, we do
    not need to use anonymous functions when using `EventCallback` parameters. The
    following example shows how to use a method for the `OnOk` method instead of an
    anonymous function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines a new `OkClickHandler` method that is called when
    the button is clicked.
  prefs: []
  type: TYPE_NORMAL
- en: When writing the `Alert` component, you might be tempted to update the `Show`
    parameter directly from the `OnOk` event on the component. You must not do so
    because if you update the values directly in the component and the component needs
    to be re-rendered, any state changes will be lost. If you need to maintain state
    in the component, you should add a private field to the component.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Components should never write to their own parameters.
  prefs: []
  type: TYPE_NORMAL
- en: For more information on using events, refer to *Chapter 8*, *Building a Kanban
    Board Using Events*.
  prefs: []
  type: TYPE_NORMAL
- en: The `Alert` component displays text on the page, but it does not yet work like
    a modal dialog. To make it work like a modal dialog, we need to update the style
    sheets that are used by the component. We can do that by using CSS isolation.
    In the next section, we will explain how to use CSS isolation.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding CSS isolation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The location of the **cascading style sheets** (**CSS**) used to style our Blazor
    WebAssembly apps is usually the `wwwroot` folder. Usually, the styles defined
    in those CSS files are applied to all the components in the web app. However,
    there are times when we want more control over the styles that are applied to
    a particular component. To achieve that, we use CSS isolation. With CSS isolation,
    the styles in the designated CSS file will override the global styles and will
    target only a specific component and its child components.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling CSS isolation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add a CSS file that is scoped to a specific component, create a CSS file
    in the same folder as the component with the same name as the component, but with
    a CSS file extension. For example, the CSS file for the `Alert.razor` component
    would be called `Alert.razor.css`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following markup is for an updated version of the `Alert` component. In
    this version, we have added the two highlighted classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The following `Alert.razor.css` file defines the styles used by the new classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alert.razor.css**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding CSS includes styles for both the `dialog-container` class and
    the `dialog` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog-container`: This class sets the background color of the element to
    black with 60% opacity and places it on top of the other elements, by setting
    its z-index to 2,000.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialog`: This class sets the background color of the element white, centers
    it horizontally within its parent, and sets its width to 15 REM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To enable the project to use the CSS, we need to add a link to the `wwwroot/index.html`
    file. By convention, the name of the CSS file that needs to be linked is the assembly’s
    name followed by `.styles.css`. For example, if the name of the project is `Demo4`,
    a link to `Demo4.styles.css` needs to be added to the `wwwroot/index.html` file.
    The following highlighted markup shows the link to apply the styles defined in
    the `Alert.razor.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the `Alert` component using the preceding `Alert.razor.css`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: Alert component'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, the linked `Demo4.style.css` file is created at build
    time. When it is created, the Blazor engine rewrites the CSS and HTML for each
    component by appending a string generated by the framework that is unique for
    each component. The rewritten CSS styles are bundled into one file and saved as
    a static resource.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a portion of the `Demo4.styles.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the rewritten HTML that references the rewritten styles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text  Description automatically generated](img/B18471_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: Rewritten HTML'
  prefs: []
  type: TYPE_NORMAL
- en: By convention, the contents of the `Demo4.styles.css` file are in the `obj/{CONFIGURATION}/{TARGET
    FRAMEWORK}/scopedcss/projectbundle/{ASSEMBLY NAME}.bundle.scp.css` file. In the
    preceding example, the file was in the `\Demo4\obj\Debug\net7.0\scopedcss\bundle`
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting child components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, when using CSS isolation, the CSS styles only apply to the current
    component. If we want the CSS styles to apply to a child component of the current
    component, we need to use the `::deep` pseudo-element within our style. This pseudo-element
    selects the elements that are descendants of the element’s identifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the following style will be applied to any `H1` headings within
    the current component, as well as any `H1` headings within the child components
    of the current component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: CSS isolation is useful if you don’t want your component to use the global styles
    or want to share your component via a Razor class library.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Scoped CSS does not apply to Razor components. It only applies to the HTML elements
    that are rendered by the Razor component.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s take a look at the project that we will be building in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the modal dialog project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will build a modal dialog component. We will enable both
    the `Title` and the `Body` of the modal dialog component to be customized using
    Razor markup. We will add the modal dialog component to another component.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the modal dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with low confidence](img/B18471_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: Modal dialog'
  prefs: []
  type: TYPE_NORMAL
- en: After we have completed the modal dialog component, we will move it into a Razor
    class library so that it can be shared with other projects.
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 90 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ModalDialog` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. We
    will add a `Dialog` component that includes multiple sections and use CSS isolation
    to apply styles that make it behave like a modal dialog. We will use `EventCallback`
    parameters to communicate from the component back to the parent when a button
    is clicked. We will use `RenderFragment` parameters to allow Razor markup to be
    communicated from the parent to the component. Finally, we will create a Razor
    class library and move the `Dialog` component into it so that the modal dialog
    can be shared with other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the search for the templates textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_04_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.5: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ModalDialog` in the **Project name** textbox and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B18471_04_06.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.6: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `ModalDialog` project into the `E:\Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is a screenshot of the dialog used to collect additional information about
    our new project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_04_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.7: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the `ModalDialog` Blazor WebAssembly project. However, it is
    practically empty. Let’s add the `Dialog` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Dialog component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Dialog` component will be shared. Therefore, we will add it to the `Shared`
    folder. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ModalDialog` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `Dialog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the markup in the `Dialog.razor` file with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the `Show` property is used to show and hide the contents
    of the component.
  prefs: []
  type: TYPE_NORMAL
- en: We have added a `Dialog` component, but it will not behave like a modal dialog
    box until the appropriate styles have been added to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Add a CSS file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding markup includes five classes that we will use to style the `Dialog`
    component to make it behave like a modal dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dialog-container`: This class is used to set the background color of the element
    to black with 60% opacity and place it on top of the other elements, by setting
    its z-index to 2,000.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialog`: This class is used to set the background color of the element to
    white, center it horizontally within its parent, and set its width to 25 REM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialog-title`: This class is used to set the background color to dark gray,
    set the text to white, and add some padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialog-body`: This class is used to add some padding to the body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialog-buttons`: This class is used to set the background color to silver
    and add some padding.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need to create a `CSS` file to define how to style each of these classes.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `css` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Style Sheet**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the style sheet `Dialog.razor.css`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following styles into the `Dialog.razor.css` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncomment the following `link` element to the bottom of the `head` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The styles in the `Dialog.razor.cs` file will only be used by the `Dialog` component
    due to CSS isolation. Next, let’s test the `Dialog` component.
  prefs: []
  type: TYPE_NORMAL
- en: Test the Dialog component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To test the `Dialog` component, we need to add it to another component. We
    will add it to the `Index` component that is used as the `Home` page of the application.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `_Imports.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h1` element from the `Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup to the `Index.razor` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Do not remove the `@page` directive from the top of the file while editing the
    `Index` component.
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Show Dialog** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the modal dialog that is displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Shape, rectangle  Description automatically generated with medium confidence](img/B18471_04_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.8: Sample modal dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Ok** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Nothing happens when you click the **Ok** button because we have not yet added
    an `@onclick` event.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will add a couple of `EventCallback` parameters to communicate from the `Dialog`
    component back to the `Index` component.
  prefs: []
  type: TYPE_NORMAL
- en: Add EventCallback parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add `@onclick` events for both the **Ok** button and the **Cancel**
    button. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Shared/Dialog.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `@onclick` events to each of the buttons as indicated by the following
    highlighted code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following parameters to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: The `Parameter` attribute does not need to be on the same line as the property
    that it applies to.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the markup for the `Dialog` element by adding the highlighted markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following methods to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Since `e` is not being used in the preceding methods, we do not need to specify
    `MouseEventArgs` in the method’s definition. We have included it for demonstration
    purposes.
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl+F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Show Dialog** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Ok** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The dialog box closes when you click the **Ok** button.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s update the `Dialog` component to allow us to customize both the `Title`
    and `Body` properties of the modal dialog that it creates.
  prefs: []
  type: TYPE_NORMAL
- en: Add RenderFragment parameters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use `RenderFragment` parameters for both the `Title` and `Body` properties
    of the `Dialog` component. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Shared/Dialog.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the markup for `dialog-title` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the markup for `dialog-body` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following parameters to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the markup for the `Dialog` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup will change the title of the dialog to `Quick List` and
    provide a textbox for the user to enter items for a list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup under the `Dialog` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will display each of the items in the `Items` list in an
    ordered list.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following variables to the top of the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `DialogCancelHandler` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will clear the textbox and hide the contents of the `Dialog`
    component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `DialogOkHandler` to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will add `NewItem` to the `Items` list, clear the textbox,
    and hide the contents of the `Dialog` component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Show Dialog** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter some text in the **Enter New Item** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Ok** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Each time the **Ok** button is clicked, the text in the **Enter New Item**
    field will be added to the list. The following screenshot shows a list where three
    items have already been added and a fourth item is about to be added using the
    modal dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_04_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.9: Sample Quick List'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To share this new component with other projects, we need to add it to a Razor
    class library.
  prefs: []
  type: TYPE_NORMAL
- en: Create a Razor class library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can share components across projects by using a Razor class library. To
    create a Razor class library, we will use the **Razor Class Library** project
    template. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the solution and select the **Add**, **New Project** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Razor Class Library` in the **Search for templates** textbox to locate
    the **Razor Class Library** project template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Razor Class Library** project template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, chat or text message  Description automatically
    generated](img/B18471_04_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.10: Razor Class Library project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Razor Class Library** project template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the project `MyComponents` and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Support pages and views** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `ModalDialog` project and select the **Add**, **Project Reference**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `MyComponents` checkbox and click the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the `MyComponents` Razor class library, and we have added a
    reference to it from the `ModalDialog` project. Let’s test it.
  prefs: []
  type: TYPE_NORMAL
- en: Test the Razor class library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `MyComponents` Razor class library that we have just created using the
    project template includes one component, called `Component1`. Before we continue,
    we need to test that the new Razor class library is working properly. We do this
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `ModalDialog.Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following using statement right below the `@page` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you will be using this project on multiple pages, you should consider adding
    the `using` statement to the `ModalDialog._Imports.razor` file so that you do
    not need to include it in every component that uses it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following markup below the `PageTitle` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the `Component1` component should render:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![A picture containing shape  Description automatically generated](img/B18471_04_11.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 4.11: Component1'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If the `Component1` component is missing its styling, it is because the CSS
    file is cached. Use the following key combination, *Ctrl*+*Shift*+*R*, to empty
    the cache and reload the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `Component1` element from the `Index` component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have finished testing the `MyComponents` Razor class library. Now it’s time
    to add our custom `Dialog` component to the `MyComponents` Razor class library.
  prefs: []
  type: TYPE_NORMAL
- en: Add a component to the Razor class library
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To share the `Dialog` component, we need to move it into the Razor class library
    that we just created and tested. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ModalDialog.Shared/Dialog.razor` file and select the **Copy**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `MyComponents` project and select the **Paste** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `MyComponents.Dialog.razor` file and select the **Rename** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the file `BweDialog.razor`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this case, `Bwe` stands for *Blazor WebAssembly by Example*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When naming components in a Razor class library, you should give them unique
    names to avoid ambiguous reference errors. Most organizations prefix all their
    shared components with the same text. For example, a company named **One Stop
    Designs** (**OSD**) might prefix all their shared components with `Osd`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `ModalDialog.Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `Dialog` element `BweDialog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Show Dialog** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter some text in the **Enter New Item** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Ok** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `BweDialog` component is now being used from the `MyComponents` Razor class
    library. Since the `BweDialog` component is included in a Razor class library,
    it can easily be shared with other projects.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to create a modal dialog and share it with multiple projects
    by using a Razor class library.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we introduced `RenderFragment` parameters, `EventCallback`
    parameters, and CSS isolation.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project. We created a `Dialog` component that acts like a modal dialog.
    The `Dialog` component uses both `RenderFragment` parameters and `EventCallback`
    parameters to share information between it and its parent. Also, it uses CSS isolation
    for its styles.
  prefs: []
  type: TYPE_NORMAL
- en: In the last part of the chapter, we created a Razor custom library and moved
    the `Dialog` component to the new library.
  prefs: []
  type: TYPE_NORMAL
- en: So far, in this book, we have avoided using JavaScript. Unfortunately, there
    are still some functions that we can only accomplish with JavaScript. In the next
    chapter of this book, we will learn how to use JavaScript interop to use JavaScript
    in a Blazor WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: How can you replace a table with a templated component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you add default values for the `Title` property and the `Body` property
    of the `Dialog` component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you determine which button was clicked when handling the `@onclick`
    event?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you distribute your `Dialog` component using a NuGet package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on CSS, refer to [https://www.w3schools.com/css/default.asp](https://www.w3schools.com/css/default.asp).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on lambda expressions, refer to [https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions](https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/operators/lambda-expressions).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on ASP.NET Core Razor components class libraries, refer
    to [https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries](https://learn.microsoft.com/en-us/aspnet/core/blazor/components/class-libraries).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on NuGet, refer to [https://www.nuget.org](https://www.nuget.org).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Discord_QR.png)'
  prefs: []
  type: TYPE_IMG
