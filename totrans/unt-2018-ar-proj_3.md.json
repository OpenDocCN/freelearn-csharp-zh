["```cs\nnamespace CSharpManagedPlugin\n{\n    public class Addition\n    {\n        public int Addify(int a, int b)\n        {\n            return a + b;\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class CSharpWrapper : MonoBehaviour\n{\n    private void Start()\n    {\n        var addition = new CSharpManagedPlugin.Addition();\n        var add = addition.Addify(5, 2);\n        print(add);\n    }\n }\n```", "```cs\nThe header will have the extern c and a preprocessor win32 define along with __declspec, dllexport functions to make sure that name mangling does not occur. Again, we will define our public function of addify, which will be our addition function. Your header should look like this.\n\n #pragma once\nextern \"C\" {\n#if (defined(WIN32) || defined(__WIN32__))\n       __declspec(dllexport) int addify(int a, int b);\n#else\n       int addify(int a, int b);\n#endif\n}\n```", "```cs\n#include \"stdafx.h\"\n#include \"NativeWindowsPlugin.h\"\nint addify(int a, int b)\n{\n       return a + b;\n}\n```", "```cs\nusing System.Runtime.InteropServices;\nusing UnityEngine;\npublic class CPlusPlusWrapper : MonoBehaviour {\n    [DllImport(\"CPlusPlusUnManagedPlugin\")]\n    public static extern int Addify(int a, int b);\n    private void Start()\n    {\n        var add = Addify(2, 4);\n        print(add);\n}\n }\n```", "```cs\n#import <Foundation/Foundation.h>\n@interface ObjectiveCPlugin : NSObject\nint Addition(int a, int b);\n@end\n```", "```cs\n#import \"ObjectiveCPlugin.h\"\n@implementation ObjectiveCPlugin\nint Addition(int a, int b)\n{\n return a + b;\n}\n@end\n```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ObjectiveCWrapper : MonoBehaviour\n{\n private Text text;\n#if UNITY_IOS && !UNITYEDITOR\n```", "```cs\n\n [DllImport(\"__Internal\")]\n public static extern int Addition(int a, int b);\n#else \n [DllImport(\"ObjectiveCPlugin\")]\n public static extern int Addition(int a, int b);\n #endif\nprivate void Start()\n {\n text = GetComponent<Text>();\n text.text = Addition(1,5).ToString();\n }\n}\n```", "```cs\npackage com.packtpub.Androidlibrary;\npublic class Additions {\n    public int AddMe(int a, int b)\n    {\n        return a + b;\n    }\n}\n```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class JavaWrapper : MonoBehaviour\n{\n       // Use this for initialization\n       void Start () {\n#if UNITY_Android && !UNITY_EDITOR\n        var javaClass = new AndroidJavaObject(\"Addition\");\n        javaClass.Call(\"Addification\", 2, 9);\n#endif\n}\n }\n```", "```cs\n// Convert latitude from DMS to decimal format\nprivate float parseLatitude(String latString, String hemisphere) {\n float lat = Float.parseFloat(latString.substring(2))/60.0f;\n lat += Float.parseFloat(latString.substring(0, 2));\n if (hemisphere.contains(\"S\")) {\n lat *= -1;\n }\n return lat;\n}\n```", "```cs\n// Convert longitude from DMS to decimal format\nprivate float parseLongitude(String longString, String hemisphere) {\n float lat = Float.parseFloat(longString.substring(3))/60.0f;\n lat += Float.parseFloat(longString.substring(0, 3));\n if (hemisphere.contains(\"W\")) {\n lat *= -1;\n }\n return lat;\n}\n```", "```cs\n// Return a location from an NMEA GPRMC string\npublic Location parseLocationFromString(String rawData) {\n // Tokenize the string input\n String[] nmea = rawData.split(\",\");\n```", "```cs\nLocation result = new Location(LocationManager.GPS_PROVIDER);\n // Create timestamp from the date + time tokens\n SimpleDateFormat format = new SimpleDateFormat(\"ddMMyyhhmmss.ss\");\n format.setTimeZone(TimeZone.getTimeZone(\"UTC\"));\n try {\n Date date = format.parse(nmea[9] + nmea[1]);\n result.setTime(date.getTime());\n } catch (ParseException e) {\n return null;\n }\n```", "```cs\n// Parse the fix information tokens\n result.setLatitude(parseLatitude(nmea[3], nmea[4]));\n result.setLongitude(parseLongitude(nmea[5], nmea[6]));\n result.setSpeed(Float.parseFloat(nmea[7]));\n```", "```cs\nreturn result;\n}\n```"]