- en: Working with Files
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文件操作
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: Setting up .NET Core in Ubuntu
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ubuntu中设置.NET Core
- en: Creating a log as text
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个文本日志
- en: Creating an ASP.NET Core application in Ubuntu to use the library
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Ubuntu中创建一个ASP.NET Core应用程序以使用库
- en: Setting up .NET Core in macOS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS中设置.NET Core
- en: Reading from a comma separated (CSV) text file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从逗号分隔（CSV）文本文件中读取
- en: Creating a .NET Core console application in macOS to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在macOS中创建一个.NET Core控制台应用程序以使用库
- en: Compressing? Why not?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩？为什么不呢？
- en: Creating a classic Windows application to use the library
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个经典Windows应用程序以使用库
- en: Encrypting and Decrypting content in a text file
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在文本文件中加密和解密内容
- en: Creating a classic Windows application to use the library
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个经典Windows应用程序以使用库
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备C#的基本知识。他们还应具备使用Visual Studio、使用NuGet安装包以及在其他项目中引用库的基本知识。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter03](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter03)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter03](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter03)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频以查看代码的实际操作：
- en: '[https://goo.gl/82FCEP](https://goo.gl/82FCEP)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/82FCEP](https://goo.gl/82FCEP)'
- en: Introduction
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: As a developer, at some point, we will have to write some data to the disk or
    read data from the disk. This may be a simple text file, or may be a log file
    in a system you have written. .NET Framework offers great support for working
    with files. Mainly, we will be looking at the `System.IO` namespace and its usage
    of it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，在某个时候，我们不得不将一些数据写入磁盘或从磁盘读取数据。这可能是一个简单的文本文件，或者可能是一个您所编写的系统中的日志文件。.NET
    Framework为与文件操作提供了强大的支持。主要，我们将关注`System.IO`命名空间及其使用。
- en: In this chapter, we will be looking at some cross-platform applications as well.
    Each recipe will go through setting up new environments, such as Ubuntu and macOS,
    as well as building a .NET Standard 2.0 library and an accompanying application
    that uses the library.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还将探讨一些跨平台应用程序。每个食谱将介绍如何设置新的环境，例如Ubuntu和macOS，以及构建.NET Standard 2.0库及其配套的应用程序。
- en: Setting up .NET Core in Ubuntu
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Ubuntu中设置.NET Core
- en: 'In this recipe, we will be going through how to set up .NET Core 2.x in an Ubuntu
    system. Ubuntu is a widely used Debian-based Linux environment. By visiting [https://www.ubuntu.com/desktop](https://www.ubuntu.com/desktop),
    you can easily download and install Ubuntu on your system. You may have to use
    a virtual PC to do this. There are two great free tools that you can use:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将介绍如何在Ubuntu系统中设置.NET Core 2.x。Ubuntu是一个广泛使用的基于Debian的Linux环境。通过访问[https://www.ubuntu.com/desktop](https://www.ubuntu.com/desktop)，您可以轻松地下载并在您的系统上安装Ubuntu。您可能需要使用虚拟PC来完成此操作。有两个出色的免费工具您可以使用：
- en: 'VMWare Workstation Player for Windows: [https://www.vmware.com/products/workstation-player.html](https://www.vmware.com/products/workstation-player.html)'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'VMWare Workstation Player for Windows: [https://www.vmware.com/products/workstation-player.html](https://www.vmware.com/products/workstation-player.html)'
- en: 'Oracle Virtual Box for Windows, Linux, and macOS: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 'Oracle Virtual Box for Windows, Linux, and macOS: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
- en: This chapter assumes you have already set up and installed the required operating
    systems.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设您已经设置并安装了所需的操作系统。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will have to download a virtual PC and install the latest version of Ubuntu.
    If you haven''t got a virtual PC that runs Ubuntu, make sure you have before continuing
    this recipe done it yet. I am using Ubuntu version 16.04 here. To find out which
    version you have, simply type the following command in the terminal:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要下载一个虚拟PC并安装最新版本的Ubuntu。如果您还没有运行Ubuntu的虚拟PC，在继续此食谱之前请确保已经完成。我在这里使用的是Ubuntu版本16.04。要找出您拥有哪个版本，只需在终端中输入以下命令：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You should get the following output:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该得到以下输出：
- en: '![](img/e7eaf634-8447-45a2-855d-e968604894f6.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e7eaf634-8447-45a2-855d-e968604894f6.png)'
- en: How to do it...
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open your favorite browser, type the following URL, and press *Enter*:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器，输入以下URL，然后按*Enter*键：
- en: '`https://www.microsoft.com/net/download/linux`'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`https://www.microsoft.com/net/download/linux`'
- en: '![](img/f6b55a07-898d-4e84-b273-abc73e4d7a40.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f6b55a07-898d-4e84-b273-abc73e4d7a40.png)'
- en: Select the Install .NET Core SDK 2.x Package button.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“安装 .NET Core SDK 2.x 包”按钮。
- en: From the Linux Distribution drop-down list, select Ubuntu 16.04**.**
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Linux 发行版下拉列表中选择 Ubuntu 16.04**。**
- en: '![](img/6224db25-34e2-4f7d-9d06-5b23744be9fd.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6224db25-34e2-4f7d-9d06-5b23744be9fd.png)'
- en: Follow the instructions on the page to install the current SDK or perform the
    following steps to install.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照页面上的说明安装当前 SDK 或执行以下步骤进行安装。
- en: 'Now open the terminal, type the following command, and press *Enter*:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开终端，输入以下命令并按 *Enter* 键：
- en: '[PRE1]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If  you have a fresh installation of Ubuntu you might not have curl installed.
    If not use the following command to install curl:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您有一个全新的 Ubuntu 安装，您可能没有安装 curl。如果没有，请使用以下命令安装 curl：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, again in the terminal type the following command and press *Enter* to
    get the list of files:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，再次在终端中输入以下命令并按 *Enter* 键以获取文件列表：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Type the following command and press *Enter* in the terminal:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令并按 *Enter* 键：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Let''s update the package list using this command:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用以下命令更新软件包列表：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Finally, let''s install the SDK using this command:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们使用以下命令安装 SDK：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we are done with installing the SDK, let''s test it using the following
    command:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经完成了 SDK 的安装，让我们使用以下命令来测试它：
- en: '[PRE7]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If it''s all OK, you should get the following output:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，您应该会看到以下输出：
- en: '![](img/1cad7b95-a4f3-47fb-a17d-9bd695ca1a55.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1cad7b95-a4f3-47fb-a17d-9bd695ca1a55.png)'
- en: How it works...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 3, we navigated through to find the required SDK version for our
    Ubuntu installation. These commands are straightforward. I have used Ubuntu 16.04
    as my operating system. In steps 4 and 5, we used `curl` to download the security
    key to the system and to tell Ubuntu that we will be downloading the SDKs from
    a trusted source. In a fresh Ubuntu installation, we might not have the `curl`
    command. So, if you ran into a `command not found` problem, you can just simply
    install `curl` first as in step 4.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 1 到 3 步中，我们导航以找到适合我们 Ubuntu 安装的所需 SDK 版本。这些命令很简单。我使用 Ubuntu 16.04 作为我的操作系统。在第
    4 和 5 步中，我们使用 `curl` 将安全密钥下载到系统中，并告诉 Ubuntu 我们将从受信任的源下载 SDK。在一个全新的 Ubuntu 安装中，我们可能没有
    `curl` 命令。所以，如果您遇到了“找不到命令”的问题，您可以直接按照第 4 步安装 `curl`。
- en: In step 6, we used an Ubuntu command to update its package list with Microsoft
    repositories. Then, in step 7, we updated the source list using the `apt-get`
    command. Finally, in step 8, we did the actual installation of .NET Core 2.0 SDK.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 6 步中，我们使用 Ubuntu 命令更新了其软件包列表以包含 Microsoft 仓库。然后，在第 7 步中，我们使用 `apt-get` 命令更新了源列表。最后，在第
    8 步中，我们实际安装了 .NET Core 2.0 SDK。
- en: In steps 9 and 10, we checked that our installation was all OK to move on.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 9 和 10 步中，我们检查了安装是否一切正常，以便继续。
- en: Creating a log as text
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建文本日志
- en: In this recipe, we will be creating a .NET Standard 2.0 library that writes
    a text file as a log file. This log file will contain simple text entries of operations
    we do in an application. It will also demonstrate the use of command-line tools
    that come under the .NET Core SDK to create a solution and add projects as we
    move on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个 .NET Standard 2.0 库，该库将作为日志文件写入文本文件。这个日志文件将包含我们在应用程序中执行的操作的简单文本条目。它还将演示如何使用
    .NET Core SDK 中的命令行工具来创建解决方案并添加项目，随着我们的进行。
- en: Getting ready
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have installed Ubuntu 16.04 and .NET Core 2.0 SDK. If not, please
    follow the previous recipe to do so. Assuming everything is installed and .NET
    Core 2.0 is up and running, let's get started on creating the library that writes
    logs as text.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装 Ubuntu 16.04 和 .NET Core 2.0 SDK。如果没有，请按照前面的菜谱进行操作。假设一切已安装且 .NET Core
    2.0 正在运行，让我们开始创建一个将日志作为文本写入的库。
- en: Make sure you have downloaded and installed Visual Studio Code from [https://code.visualstudio.com](https://code.visualstudio.com).
    It's a straightforward installation of a `.deb` file from the site.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已从 [https://code.visualstudio.com](https://code.visualstudio.com) 下载并安装了
    Visual Studio Code。这是一个从网站下载 `.deb` 文件的简单安装。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the terminal.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端。
- en: 'Now in your home directory or any other directory type the following command
    and press *Enter*:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在您的家目录或任何其他目录中输入以下命令并按 *Enter* 键：
- en: '[PRE8]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, change to the newly created directory, using the following command:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用以下命令切换到新创建的目录：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now you are inside the root of your solution. Let''s create the .NET Standard
    library project using the following command:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您已经处于解决方案的根目录。让我们使用以下命令创建.NET Standard库项目：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have created our `Class Library Project`, let's open the whole solution
    using Visual Studio Code.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的`Class Library Project`，让我们使用Visual Studio Code打开整个解决方案。
- en: 'Type the following command in the terminal and press *Enter*:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令并按*Enter*键：
- en: '[PRE11]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The previous command will open Visual Studio Code in the current directory
    and the IDE should look like this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之前的命令将在当前目录中打开Visual Studio Code，IDE应该看起来像这样：
- en: '![](img/4fd8eb18-8cc1-4128-9c60-7769677d1de8.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4fd8eb18-8cc1-4128-9c60-7769677d1de8.png)'
- en: Now, in the code tree, select `Class1.cs`, press *F2*, and change the name to
    `TextLog.cs` and press *Enter*.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在代码树中，选择`Class1.cs`，按*F2*键，将名称更改为`TextLog.cs`并按*Enter*键。
- en: Also in the code window, change the class name from `Class1` to `TextLog`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在代码窗口中，将类名从`Class1`更改为`TextLog`。
- en: 'Now your code should look like this:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在您的代码应该看起来像这样：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s add our new project to the solution. Make sure you are in the root of
    the project directory. Type the `ls` command and the output should look like this:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将我们的新项目添加到解决方案中。确保您位于项目目录的根目录。输入`ls`命令，输出应该像这样：
- en: '![](img/64c41bc2-6104-4786-9875-6dfc6b2c3395.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64c41bc2-6104-4786-9875-6dfc6b2c3395.png)'
- en: 'Type the following command in the terminal and press *Enter*:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入以下命令并按*Enter*键：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now, in the root directory of the solution, type the following command to build
    the solution and its attached projects:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案的根目录中，输入以下命令来构建解决方案及其关联的项目：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output window should look like this:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输出窗口应该看起来像这样：
- en: '![](img/eac5a56c-50ca-4739-a3dd-cde9718233a6.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eac5a56c-50ca-4739-a3dd-cde9718233a6.png)'
- en: 'Let''s add some code to our library. At the top of the `using` directives,
    add the following code:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在库中添加一些代码。在`using`指令的顶部添加以下代码：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'At the top of the class, next to the open curly bracket, add the following
    code:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类的顶部，紧邻开括号，添加以下代码：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s add a constructor. Add the following code next to the variables we have
    created:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个构造函数。在我们创建的变量旁边添加以下代码：
- en: '[PRE17]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Next to the constructor code, add the method to write the log file:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在构造函数代码旁边，添加写入日志文件的函数：
- en: '[PRE18]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s add the last method to the code:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码中添加最后一个方法：
- en: '[PRE19]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now that we have added all our code to the library, let''s go back to the terminal
    window and perform a build using the following command:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经将所有代码添加到库中，让我们回到终端窗口并使用以下命令进行构建：
- en: '[PRE20]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In the first step, we opened the terminal window in the Ubuntu system. This
    terminal is similar to the command window you use in Windows operating systems.
    A terminal helps you to execute shell commands supported by the .NET Core 2.0\.
    In step *2,* we created a blank solution. The `dotnet new` command creates a new
    solution file containing directories. In step *3*, we changed the directory to
    the root of the solution file. From this point onwards, we will be adding the
    projects to the solution.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们在Ubuntu系统中打开了终端窗口。这个终端类似于您在Windows操作系统中使用的命令窗口。终端可以帮助您执行由.NET Core 2.0支持的shell命令。在第*2*步中，我们创建了一个空白解决方案。`dotnet
    new`命令创建了一个包含目录的新解决方案文件。在第*3*步中，我们将目录更改为解决方案文件的根目录。从这一点开始，我们将向解决方案中添加项目。
- en: 'In step 4, we used the same `dotnet new` command to create the class library.
    By default, this class library will use the .NET Standard 2.0 library, so we don''t
    have to tell the command-line tool to create the .NET Standard 2.0 library. We
    can confirm this by expanding the `Chapter3.LogFile.LogLib` node in Visual Studio
    Code, then clicking on the `Chapter3.LogFile.LogLib.csproj` label. In the right-hand
    pane of Visual Studio Code, you will be able to see this XML code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在第4步中，我们使用了相同的`dotnet new`命令来创建类库。默认情况下，这个类库将使用.NET Standard 2.0库，因此我们不需要告诉命令行工具创建.NET
    Standard 2.0库。我们可以通过在Visual Studio Code中展开`Chapter3.LogFile.LogLib`节点，然后点击`Chapter3.LogFile.LogLib.csproj`标签来确认这一点。在Visual
    Studio Code的右侧窗格中，您将能够看到以下XML代码：
- en: '[PRE21]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In this code, `<TargetFramwork>` markup says it''s `netstandard2.0`and it''s
    confirmed, we have a .NET Standard 2.0 library on our hands. In steps 6 to 10,
    we used Visual Studio Code to open the current directory and make changes to the
    existing class. In step 11, we made sure we were in the root directory of the
    solution. In step 12, we added the Class Library project to the solution using
    the command-line tool. You will be able to list all the projects in the solution
    by executing the following command in the terminal:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，`<TargetFramwork>` 标记表示它是 `netstandard2.0`，并且已经确认，我们手头有一个 .NET Standard
    2.0 库。在第 6 步到第 10 步中，我们使用 Visual Studio Code 打开当前目录并对现有类进行了修改。在第 11 步中，我们确保我们处于解决方案的根目录。在第
    12 步中，我们使用命令行工具将类库项目添加到解决方案中。你可以在终端中执行以下命令来列出解决方案中的所有项目：
- en: '[PRE22]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The command will list all the available projects in the current solution file.
    In step 13, we performed a `build` command to make sure everything was intact
    and working fine. In step 15, we added the namespace for handing inputs and outputs
    to the system. The `System.IO` namespace contains all the file handling classes
    inside it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将列出当前解决方案文件中所有可用的项目。在第 13 步中，我们执行了一个 `build` 命令以确保一切完好且运行正常。在第 15 步中，我们添加了用于处理输入和输出的命名空间。`System.IO`
    命名空间包含其内部的所有文件处理类。
- en: In step 16, we created two `private` variables to hold the filename and `StreamWriter`
    class that helps you to write to text files. In step 17, we created a constructor
    method that checks whether the file, exists. If it doesn't exist, it will create
    a whole new text file and, if there is a file already, we will open the file to
    append text to it. This is a very good practice when you handle files for these
    sort of tasks.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 16 步中，我们创建了两个 `private` 变量来存储文件名和 `StreamWriter` 类，该类可以帮助你将文本写入文件。在第 17 步中，我们创建了一个构造函数方法，用于检查文件是否存在。如果文件不存在，它将创建一个新的文本文件；如果已经存在文件，我们将打开文件以追加文本。当你处理这类任务时，这是一个非常好的实践。
- en: In step 18, we created a method that takes a `string` parameter as the message
    and writes that message to the file. In step 19, we created a method to close
    the opened file. Finally, step 20 verified that the syntax is OK and builds correctly
    using a `build` command.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 18 步中，我们创建了一个方法，该方法接受一个 `string` 参数作为消息并将其写入文件。在第 19 步中，我们创建了一个方法来关闭打开的文件。最后，在第
    20 步中，我们使用 `build` 命令验证了语法正确且构建无误。
- en: Creating an ASP.NET Core application in Ubuntu to use the library
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Ubuntu 中创建 ASP.NET Core 应用程序以使用库
- en: We will be creating an ASP.NET Core application to use the library in this recipe.
    ASP.NET Core will be using the MVC design pattern, as well as working in Linux,
    macOS, and, of course, in Windows. We will be using Ubuntu as the operating system
    for building this small app to demonstrate the cross-platform capabilities of
    .NET Core.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 ASP.NET Core 应用程序来使用本配方中的库。ASP.NET Core 将使用 MVC 设计模式，并在 Linux、macOS
    以及当然，在 Windows 上工作。我们将使用 Ubuntu 作为操作系统来构建这个小应用程序，以展示 .NET Core 的跨平台能力。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipe that includes setting up the
    environment and building of the .NET Standard 2.0 library that creates a text
    file as a log. This recipe assumes you have basic knowledge of MVC architecture.
    In simple terms, MVC is a software architectural pattern that separates data models,
    controlling code, and user interfaces. Let's have a look at how to build this
    application and use our library.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了之前的配方，包括设置环境和构建用于创建日志文件的 .NET Standard 2.0 库。本配方假设你具备 MVC 架构的基本知识。简单来说，MVC
    是一种软件架构模式，它将数据模型、控制代码和用户界面分开。让我们看看如何构建这个应用程序并使用我们的库。
- en: How to do it..
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open the terminal and navigate to the root of your application built in the
    previous recipe.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并导航到之前配方中构建的应用程序的根目录。
- en: 'The directory structure should look like this:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目录结构应该看起来像这样：
- en: '![](img/e4aba8d1-f464-4b54-96bb-602b2aade0cb.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e4aba8d1-f464-4b54-96bb-602b2aade0cb.png)'
- en: 'Now type the following command and press *Enter* in the terminal to create
    the new ASP.NET Core MVC application:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在终端中输入以下命令并按 *Enter* 键以创建新的 ASP.NET Core MVC 应用程序：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let''s add this new project to the solution:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将这个新项目添加到解决方案中：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now let''s perform a build to check that everything is working fine:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们执行构建以检查一切是否正常工作：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now, navigate to the app we just created:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，导航到我们刚刚创建的应用程序：
- en: '[PRE26]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Execute the application with the following command:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令执行应用程序：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If everything is fine, open your browser and type `http://localhost:5000` in
    the address bar and hit *Enter*. The browser output should look like this:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，打开您的浏览器，在地址栏中输入 `http://localhost:5000` 并按 *Enter*。浏览器输出应该如下所示：
- en: '![](img/95b54e8d-b852-46bd-a113-16df7faf1103.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95b54e8d-b852-46bd-a113-16df7faf1103.png)'
- en: Let's close the browser and, in the terminal window, hit *Ctrl* + *C* to stop
    the web server.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们关闭浏览器，并在终端窗口中按 *Ctrl* + *C* 来停止网络服务器。
- en: 'We need to add the reference to our .NET Standard 2.0 library we built before.
    Let''s add it now using this command in the terminal:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要添加之前构建的 .NET Standard 2.0 库的引用。现在让我们使用终端中的此命令来添加它：
- en: '[PRE28]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let''s get back to the root folder by typing the following command:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过输入以下命令回到根文件夹：
- en: '[PRE29]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now, in the root of the solution directory, type the following command to open
    Visual Studio Code using the current directory:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案目录的根目录中，输入以下命令以使用当前目录打开 Visual Studio Code：
- en: '[PRE30]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In Visual Studio Code, expand the `Chapter3` label and expand `Chapter3.LogFile.LogAppMvc`**.**
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio Code 中，展开 `Chapter3` 标签，然后展开 `Chapter3.LogFile.LogAppMvc`**。**
- en: Again, expand the `Controllers` folder and click on `HomeController.cs`**:**
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，展开 `Controllers` 文件夹，并点击 `HomeController.cs`**:**
- en: '**![](img/63ad3193-1ff4-4793-a9a5-aafe9ff92d3d.png)**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**![](img/63ad3193-1ff4-4793-a9a5-aafe9ff92d3d.png)**'
- en: 'In `HomeController.cs`, add the following `using` directive to the last line
    of the `using` directives block:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HomeController.cs` 中，将以下 `using` 指令添加到 `using` 指令块的最后一行：
- en: '[PRE31]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, next to the starting curly bracket of the `Index` method of the `HomeController`
    class, add the following code:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `HomeController` 类的 `Index` 方法的起始大括号旁边，添加以下代码：
- en: '[PRE32]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Let''s add more code inside the `About` method too:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 `About` 方法内部也添加更多的代码：
- en: '[PRE33]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Do the same to the `Contact` method as well:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样对 `Contact` 方法也进行相同的操作：
- en: '[PRE34]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Now we are done with adding code, let''s navigate to `Chapter3.LogFile.LogAppMvc`:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了代码的添加，让我们导航到 `Chapter3.LogFile.LogAppMvc`：
- en: '[PRE35]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let''s run the application:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们运行应用程序：
- en: '[PRE36]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open your favorite browser, type `localhost:5000` in the address bar, and press
    *Enter*. Click on the navigation links for Home, About, and Contact a few times.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器，在地址栏中输入 `localhost:5000`，然后按 *Enter*。点击导航链接 Home、About 和 Contact 几次。
- en: Close the browser.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: 'Now go to Visual Studio Code, expand the `Chapter3` label, and expand `Chapter3.LogFile.LogAppMvc`**.** You
    should see a file named `server_log.txt` in the root:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，转到 Visual Studio Code，展开 `Chapter3` 标签，然后展开 `Chapter3.LogFile.LogAppMvc`**。** 您应该在根目录中看到一个名为
    `server_log.txt` 的文件：
- en: '![](img/022e2704-8de3-478a-8965-53fd86c6804f.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/022e2704-8de3-478a-8965-53fd86c6804f.png)'
- en: 'Now click on the `server_log.txt` filename to see the output:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击 `server_log.txt` 文件名以查看输出：
- en: '![](img/92b9b012-5ecd-42f9-aa55-14f13c4ed072.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/92b9b012-5ecd-42f9-aa55-14f13c4ed072.png)'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In steps 1 and 2, we opened the terminal and made sure we are in the correct
    directory, which is the root of the solution. After that, in step 3, we created
    the ASP.NET Core 2.0 MVC application. In step 4, we added that project to the
    solution. After this step, we have two projects in the solution and you will be
    able to see all projects in the solution by giving this command in the root of
    the solution directory:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 和 2 中，我们打开了终端并确保我们处于正确的目录，即解决方案的根目录。然后，在步骤 3 中，我们创建了 ASP.NET Core 2.0
    MVC 应用程序。在步骤 4 中，我们将该项目添加到解决方案中。完成此步骤后，解决方案中就有两个项目了，您可以通过在解决方案目录的根目录中输入以下命令来查看解决方案中的所有项目：
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In steps 5, 6, and 7, we built the project from the root to check that everything
    was fine. Then, we navigated to the newly created project folder and executed
    the project to test whether everything was OK. In step 8, we opened the default
    browser and gave the URL to test the ASP.NET Core 2.0 application. As you can
    see, the URL looked like `http://localhost:5000`. By default, the web server (which
    is kestrel) runs on port 5000.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 5、6 和 7 中，我们从根目录构建项目以检查一切是否正常。然后，我们导航到新创建的项目文件夹并执行项目以测试是否一切正常。在步骤 8 中，我们打开默认浏览器并给出测试
    ASP.NET Core 2.0 应用程序的 URL。如您所见，URL 看起来像 `http://localhost:5000`。默认情况下，网络服务器（即
    Kestrel）运行在端口 5000。
- en: Kestrel is a cross-platform web server for ASP.NET Core and is built using a
    cross-platform asynchronous I/O library called **libuv.**
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: Kestrel 是一个跨平台的 ASP.NET Core 网络服务器，它使用名为 **libuv** 的跨平台异步 I/O 库构建。
- en: So, we didn't change anything and kept the defaults as they are. In step 11,
    we navigated back to the root solution directory and then, in step 12, we opened
    Visual Studio Code using that directory.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们没有做任何更改，保留了默认设置。在步骤 11 中，我们导航回根解决方案目录，然后在步骤 12 中，我们使用该目录打开 Visual Studio
    Code。
- en: In step 14, we navigated to `HomeController.cs` and, in step 15, we added the
    first `using` statement to access the classes that allow you to use the file operations.
    In step 16, we created the `TextLog` class and used it in the `WriteLog()` method.
    Finally, we used the `CloseLog()` method to close the opened file. We did the
    same in steps 17 and 18\. In steps 19 and 20, we navigated to the ASP.NET Core
    2.0 application directory and executed the application.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 14 中，我们导航到 `HomeController.cs`，在步骤 15 中，我们添加了第一个 `using` 语句以访问允许您使用文件操作的类。在步骤
    16 中，我们创建了 `TextLog` 类并在 `WriteLog()` 方法中使用它。最后，我们使用 `CloseLog()` 方法关闭了打开的文件。我们在步骤
    17 和 18 中做了同样的事情。在步骤 19 和 20 中，我们导航到 ASP.NET Core 2.0 应用程序目录并执行了应用程序。
- en: In steps 21 and 22, we opened the browser and used the application to write
    some text to the disk. Then we closed the browser. Finally, in steps 23 and 24,
    we witnessed the file that was written to the disk while we were using the application.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 21 和 22 中，我们打开了浏览器并使用该应用程序将一些文本写入磁盘。然后我们关闭了浏览器。最后，在步骤 23 和 24 中，当我们使用应用程序时，我们见证了写入磁盘的文件。
- en: Setting up .NET Core in macOS
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 macOS 中设置 .NET Core
- en: In this recipe, we will be looking at how to set up things on macOS to run .NET
    Core 2.0 applications. At the time of writing, the macOS version is macOS High
    Sierra 10.13.2\. We need a device such as a MacBook or an iMac for running macOS,
    or else you can skip this recipe.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将探讨如何在 macOS 上设置以运行 .NET Core 2.0 应用程序。在撰写本文时，macOS 版本是 macOS High Sierra
    10.13.2。我们需要一台 MacBook 或 iMac 这样的设备来运行 macOS，否则您可以跳过本教程。
- en: Getting ready
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have macOS up and running on a device. Have your favorite browser
    open. Also, I assume you have experience of downloading and installing applications
    on a Mac device.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的设备上已安装并运行 macOS。打开您喜欢的浏览器。我还假设您在 Mac 设备上下载和安装应用程序有经验。
- en: How to do it...
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open your favorite browser and navigate to [https://www.microsoft.com/net/download/macos](https://www.microsoft.com/net/download/macos).
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的浏览器，导航到 [https://www.microsoft.com/net/download/macos](https://www.microsoft.com/net/download/macos)。
- en: Click on the `Download .NET Core 2.1.x SDK` (at the time of writing, the version
    is 2.1.105) button.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `Download .NET Core 2.1.x SDK`（在撰写本文时，版本是 2.1.105）按钮。
- en: '![](img/abc542de-4235-41b5-8236-6799ee2fd478.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/abc542de-4235-41b5-8236-6799ee2fd478.png)'
- en: Now, in the download dialog box, select Save.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在下载对话框中，选择“保存”。
- en: Now double-click on the file from the downloaded location (typically in the
    `Downloads` folder) and follow the instructions to install.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击下载位置（通常在 `Downloads` 文件夹中）的文件，并按照说明进行安装。
- en: After installation, you should be good to go. Let's open a terminal and test
    the installation. (Applications | Utilities | Terminal).
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，您应该可以开始了。让我们打开一个终端并测试安装。（应用程序 | 实用工具 | 终端）。
- en: 'Now, in the terminal, type the following command:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在终端中，输入以下命令：
- en: '[PRE38]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'If everything is OK, you should see output like this:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一切正常，您应该会看到如下输出：
- en: '![](img/8aa3723a-93b1-4a64-898d-ba2472140a8c.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8aa3723a-93b1-4a64-898d-ba2472140a8c.png)'
- en: Let's download Visual Studio Code for Mac at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在 [https://code.visualstudio.com/](https://code.visualstudio.com/) 下载 Visual
    Studio Code for Mac。
- en: In the dialog box, choose Save File to download.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框中，选择“保存文件”以下载。
- en: After downloading the file, locate it and double-click on it to extract. Then
    drag drop the file in the `Applications` folder and you are good to go with Visual
    Studio Code.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载文件后，找到它并双击以解压。然后将文件拖放到 `Applications` 文件夹中，您就可以使用 Visual Studio Code 了。
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Throughout these steps, we have downloaded and installed .NET Core 2.0 and Visual
    Studio Code. Each step is self-explanatory. After opening Visual Studio Code,
    you might have to install a few extensions such as C# to make things easier.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些步骤中，我们已经下载并安装了 .NET Core 2.0 和 Visual Studio Code。每一步都很直观。在打开 Visual Studio
    Code 后，您可能需要安装一些扩展，如 C#，以便使事情变得更容易。
- en: Reading from a comma separated (CSV) text file
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从逗号分隔（CSV）文本文件中读取
- en: In this recipe, will be using .NET Core 2.0 under macOS. I assume you are familiar
    with using a terminal and typing a few commands in it. We will be looking at command-line
    tools supplied with .NET Core 2.0 to create our .NET Standard 2.0 library that
    reads a **Comma Separated Values** (**CSV**) file and returns its data.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用 macOS 下的 .NET Core 2.0。我假设您熟悉使用终端并在其中输入一些命令。我们将查看 .NET Core 2.0
    提供的命令行工具，以创建我们的 .NET Standard 2.0 库，该库可以读取**逗号分隔值**（**CSV**）文件并返回其数据。
- en: Getting ready
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you have not already completed the previous recipe, make sure you have done
    it. It will help you to download .NET Core 2.0 and Visual Studio Code as an IDE.
    Let's fire up the terminal and get started.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有完成之前的菜谱，请确保您已经完成了。这将帮助您下载.NET Core 2.0和Visual Studio Code作为IDE。让我们启动终端并开始吧。
- en: How to do it...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open a terminal window (Applications | Utilities | Terminal).
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端窗口（应用程序 | 实用工具 | 终端）。
- en: 'Now, in your `home` directory, type the following command (you might have to
    create a separate directory for your projects and do the following command):'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在您的`home`目录中，输入以下命令（您可能需要为项目创建一个单独的目录并执行以下命令）：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now, type the following command to navigate to the newly created solution:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，输入以下命令以导航到新创建的解决方案：
- en: '[PRE40]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Again, type this command to create the .NET Standard 2.0 library project:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次输入此命令以创建.NET Standard 2.0库项目：
- en: '[PRE41]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now let''s add this project to our solution by typing this command:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们通过输入此命令将此项目添加到我们的解决方案中：
- en: '[PRE42]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Let's open Visual Studio Code and open the current solution directory (File
    | Open). (Visual Studio Code should normally list it under the Applications directory).
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开Visual Studio Code并打开当前解决方案目录（文件 | 打开）。（Visual Studio Code通常会在应用程序目录下列出它）。
- en: 'Visual Studio Code should look like this:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio Code应该看起来像这样：
- en: '![](img/829d3393-bfac-46d5-8baf-197754713df2.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/829d3393-bfac-46d5-8baf-197754713df2.png)'
- en: Visual Studio Code
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio Code
- en: Now, select the `Class1.cs` label in the file tree.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择文件树中的`Class1.cs`标签。
- en: Press the *Enter*key and rename the `Class1.cs` to `CsvFileLib.cs` and press
    *Enter* again.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键，将`Class1.cs`重命名为`CsvFileLib.cs`，然后再次按下*Enter*。
- en: Now, in the code editor, change the `Class1` class name to match the filename
    `CsvFileLib`.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在代码编辑器中，将`Class1`类名更改为与文件名`CsvFileLib`匹配。
- en: 'Let''s click on the CsvFileLib.cs tab and add some code. Add the `using` directive
    on the top of the code window next to the last line of the `using` directives:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击CsvFileLib.cs选项卡并添加一些代码。在代码窗口的最后一行`using`指令旁边添加`using`指令：
- en: '[PRE43]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'At the top of the class, after the open curly bracket of the `CsvFileLib`,
    class add the following code:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`CsvFileLib`的开放花括号上方，在类中添加以下代码：
- en: '[PRE44]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, next to the preceding line, add the following constructor code for the
    class:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在上一行旁边，添加以下类的构造函数代码：
- en: '[PRE45]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, let''s add the method to read all the lines in a CSV file:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们添加一个方法来读取CSV文件中的所有行：
- en: '[PRE46]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Now, type the following command in the terminal to build the solution (make
    sure you are in the root of the solutions directory):'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在终端中输入以下命令来构建解决方案（确保您位于解决方案目录的根目录）：
- en: '[PRE47]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will build and check the code for any syntax errors.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将构建并检查代码中的任何语法错误。
- en: How it works...
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we used .NET Core command-line tools to create a solution and
    then create a project. Then, we added the project to the solution. In steps 6
    and 7, we opened Visual Studio Code for macOS and opened the directory we just
    created. Visual Studio Code for macOS allows you to work with .NET-based applications
    on macOS. Also, by installing extensions, it allows you to work with other popular
    technologies as well.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到5中，我们使用了.NET Core命令行工具来创建解决方案和项目，然后将项目添加到解决方案中。在步骤6和7中，我们打开了macOS上的Visual
    Studio Code并打开了刚刚创建的目录。macOS上的Visual Studio Code允许您在macOS上使用基于.NET的应用程序。此外，通过安装扩展，它还允许您使用其他流行的技术。
- en: In steps 9 and 10, we renamed the default `Class1.cs` generated from the template
    and we renamed the file and the class to a meaningful name. In step 11, we added
    the necessary namespaces to work with files and collections. In step 12, we created
    a private variable to hold the filename. In step 13, we created a constructor
    that takes a filename with a path as a `string` parameter and then populated the
    variable we created in step 12.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤9和10中，我们将模板生成的默认`Class1.cs`重命名，并将文件和类重命名为有意义的名称。在步骤11中，我们添加了必要的命名空间来处理文件和集合。在步骤12中，我们创建了一个私有变量来保存文件名。在步骤13中，我们创建了一个构造函数，它接受一个包含路径的文件名作为`string`参数，然后填充了我们在步骤12中创建的变量。
- en: 'In step 14, we created a method that reads the entire file and stores each
    line of the text to a List collection. This collection stores its items as `string`,
    In the first line of the `ReadCsvFile()` method, we created a local variable to
    hold the handler of the CSV text file. The following part of the code opens the
    given text file and, in the next line, stores all the content in a variable as
    a stream. The third line loops through till the end of the file and stores each
    line on the previous list. Finally, it closes the stream and returns the list
    of content from the `ReadCsvFile()` Method:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在第14步中，我们创建了一个方法，该方法读取整个文件并将文本的每一行存储到一个列表集合中。这个集合将其项目存储为`string`，在`ReadCsvFile()`方法的第1行，我们创建了一个局部变量来保存CSV文本文件的句柄。代码的下一部分打开给定的文本文件，在下一行将所有内容存储在一个变量中作为一个流。第3行循环到文件末尾，并将每一行存储在之前的列表中。最后，它关闭流并从`ReadCsvFile()`方法返回内容列表：
- en: '[PRE48]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Creating a .NET Core console application in macOS to use the library
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在macOS上创建一个.NET Core控制台应用程序以使用库
- en: In this recipe, we will be creating a .NET Core console application to use the
    library built in the previous session. .NET Core is a cross-platform .NET flavor
    that runs on Windows, Linux, and macOS. This recipe focuses on .NET Core that
    runs under macOS.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个.NET Core控制台应用程序来使用之前会话中构建的库。.NET Core是一个跨平台的.NET版本，可以在Windows、Linux和macOS上运行。这个菜谱专注于在macOS下运行的.NET
    Core。
- en: Getting ready
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s open the terminal and make sure we are in the root of the solution built
    in the previous recipe. Perform a quick build command as follows to check that
    everything is working fine:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开终端并确保我们位于之前菜谱中构建的解决方案的根目录。执行以下快速构建命令以检查一切是否正常工作：
- en: '[PRE49]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How to do it...
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the terminal (Applications | Utilities | Terminal).
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端（应用程序 | 工具 | 终端）。
- en: 'Navigate to the root of the solution we built in the previous recipe and enter
    the following command:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到之前菜谱中构建的解决方案的根目录，并输入以下命令：
- en: '[PRE50]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Again, type this command to see the content of the directory:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，输入此命令以查看目录内容：
- en: '[PRE51]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Your terminal should look like this:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的终端应该看起来像这样：
- en: '![](img/7bfbbed8-a02c-4219-abc5-c5cc672fe3c1.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7bfbbed8-a02c-4219-abc5-c5cc672fe3c1.png)'
- en: 'Execute the following commands to add this project to the solution and to test
    build:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下命令将此项目添加到解决方案并测试构建：
- en: '[PRE52]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Let's open Visual Studio Code and open (File | Open) the full solution.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开Visual Studio Code并打开（文件 | 打开）完整的解决方案。
- en: 'Your Visual Studio Code should look like this:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Visual Studio Code应该看起来像这样：
- en: '![](img/1b308fc3-6669-406f-bf87-9bb1634c1e2c.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1b308fc3-6669-406f-bf87-9bb1634c1e2c.png)'
- en: Now expand the `Chapter3.CsvFile.Console` node and select the `Chapter3.CsvFile.Console`
    label.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在展开`Chapter3.CsvFile.Console`节点并选择`Chapter3.CsvFile.Console`标签。
- en: Click on the New File icon in the tab.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选项卡上点击新建文件图标。
- en: '![](img/8e467659-a848-4890-ba1f-14aa7aa0c0c6.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8e467659-a848-4890-ba1f-14aa7aa0c0c6.png)'
- en: Type `movies.txt` as the name and press *Enter*.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`movies.txt`作为名称并按*Enter*键。
- en: 'Now select the `movies.txt` file and add the following content:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在选择`movies.txt`文件并添加以下内容：
- en: '`1,X-Men: Apocalypse,2016`'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`1,X-Men: Apocalypse,2016`'
- en: '`2,The Secret Life of Pets,2016`'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`2,The Secret Life of Pets,2016`'
- en: '`3,Suicide Squad,2016`'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`3,Suicide Squad,2016`'
- en: '`4,Independence Day: Resurgence,2016`'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`4,Independence Day: Resurgence,2016`'
- en: '`5,Star Trek 3,2016`'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`5,Star Trek 3,2016`'
- en: '`6,Batman v Superman: Dawn of Justice,2016`'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`6,Batman v Superman: Dawn of Justice,2016`'
- en: '`7,The Jungle Book,2016`'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`7,The Jungle Book,2016`'
- en: '`8,Hail, Caesar!,2016`'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`8,Hail, Caesar!,2016`'
- en: '`9,Zoolander 2,2016`'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`9,Zoolander 2,2016`'
- en: '`10,How to Be Single,2016`'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`10,How to Be Single,2016`'
- en: 'You text file should look like this:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的文本文件应该看起来像这样：
- en: '![](img/79468c37-8a76-440c-a5cf-476a39f501e0.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79468c37-8a76-440c-a5cf-476a39f501e0.png)'
- en: Let's open the terminal (Applications | Utilities | Terminal) and navigate to
    the newly created console project.
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们打开终端（应用程序 | 工具 | 终端）并导航到新创建的控制台项目。
- en: 'Type the following command and press *Enter* to add our library to the console
    application as a reference:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下命令并按*Enter*键将我们的库添加到控制台应用程序作为引用：
- en: '[PRE53]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Let''s go back to Visual Studio Code, select `Program.cs`, and add this `using`
    directive after the last line of `using` directives:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回到Visual Studio Code，选择`Program.cs`，并在`using`指令的最后一行之后添加此`using`指令：
- en: '[PRE54]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now delete any existing code inside the `Main()` method and add this code between
    the curly brackets:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在删除`Main()`方法中任何现有的代码，并在大括号之间添加此代码：
- en: '[PRE55]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Save the current changes and go back to the terminal, type the following command,
    and press *Enter*:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存当前更改并回到终端，输入以下命令并按*Enter*键：
- en: '[PRE56]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Again, type the following code and press *Enter*:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次，输入以下代码并按*Enter*键：
- en: '[PRE57]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'You should see this output in your terminal window:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该在终端窗口中看到以下输出：
- en: '![](img/2c3eae69-b845-4ed5-9ee4-e40b6c488f53.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2c3eae69-b845-4ed5-9ee4-e40b6c488f53.png)'
- en: How it works...
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 4, we navigated to the previously built .NET Standard 2.0 library.
    Using the macOS terminal we reached the root of that solution. Also, we have created
    a new .NET Standard 2.0 library. When you create a library project in .NET Core
    2.0, by default it chooses .NET Standard 2.0 as the template. So we don't worry
    about telling the command-line tool to create the library as .NET Standard 2.0
    library.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在第1至4步中，我们导航到之前构建的 .NET Standard 2.0 库。使用 macOS 终端，我们到达该解决方案的根目录。此外，我们还创建了一个新的
    .NET Standard 2.0 库。当你创建 .NET Core 2.0 的库项目时，默认情况下它会选择 .NET Standard 2.0 作为模板。所以我们不用担心告诉命令行工具创建
    .NET Standard 2.0 库。
- en: In step 5, we added the newly created project to our solution and performed
    a build to check that everything was fine. In steps 6 to 9, we opened the current
    directory using Visual Studio Code and then, in steps 9 to 12, we created a sample
    text file with comma separated values for testing purposes. In step 14, we added
    the library to our console application as a reference.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在第5步中，我们将新创建的项目添加到我们的解决方案中，并执行构建以检查一切是否正常。在第6至9步中，我们使用 Visual Studio Code 打开当前目录，然后在第9至12步中，我们创建了用于测试目的的逗号分隔值样本文本文件。在第14步中，我们将库添加到我们的控制台应用程序中作为引用。
- en: In step 15, we added the reference for the library project in the `using` statements
    and then, in step 16, we created an instance of the `CsvFileLib` class and stored
    the output of the `ReadCsvFile()` method in a variable. Finally, we looped through
    the list, which is returned by the `ReadCsvFile()` method, and printed the output
    in the console window.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在第15步中，我们在`using`语句中添加了库项目的引用，然后在第16步中创建了一个`CsvFileLib`类的实例，并将`ReadCsvFile()`方法的输出存储在一个变量中。最后，我们遍历了由`ReadCsvFile()`方法返回的列表，并在控制台窗口中打印了输出。
- en: Compressing? Why not?
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 压缩？为什么不呢？
- en: In this recipe, we will be looking at file compression capabilities supported
    on .NET Framework and how to use them in a .NET Standard 2.0 library. File compression
    classes are supported inside the `System.IO.Compression` namespace. Classes inside
    this namespace are used to compress the file as well as decompress it. They are
    also used to read content inside a compressed file. Let's have a look and create
    a .NET Standard 2.0 library that compresses and decompresses a file.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨在 .NET Framework 上支持的文件压缩功能以及如何在 .NET Standard 2.0 库中使用它们。`System.IO.Compression`
    命名空间内支持文件压缩类。此命名空间内的类用于压缩文件以及解压缩文件。它们还用于读取压缩文件内的内容。让我们看看并创建一个可以压缩和解压缩文件的 .NET
    Standard 2.0 库。
- en: Getting ready
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017 up and running.
    As mentioned previously, we will be using classes inside `System.IO.Compression`**.**
    Mainly, we will be looking at the `ZipFile` class. Let's get going and build our
    library that compresses and decompresses a file.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Visual Studio 2017 是最新版本并正在运行。如前所述，我们将使用`System.IO.Compression`中的类。主要我们将关注`ZipFile`类。让我们开始构建我们的库，它可以压缩和解压缩文件。
- en: How to do it...
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open Visual Studio 2017.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”来创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane, and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择“Visual Studio 解决方案”。在右侧窗格中，选择“空白解决方案**。**”
- en: 'In the Name: textbox, type `Chapter3.Compress` and, in the Location: textbox,
    select path from the drop-down box or click on the Browse... button to locate
    a path.'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入`Chapter3.Compress`，并在“位置：”文本框中，从下拉框中选择路径或点击“浏览...”按钮来定位路径。
- en: '![](img/91ca9b7e-4c52-4010-8064-ce1b724a7512.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91ca9b7e-4c52-4010-8064-ce1b724a7512.png)'
- en: Click OK.
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的“解决方案资源管理器”(*Ctrl* + *Alt* + *L*)应该看起来像这样：
- en: '![](img/505303ba-f200-4eda-9bdb-c4d1b928fb1b.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/505303ba-f200-4eda-9bdb-c4d1b928fb1b.png)'
- en: Now, right-click on the `Chapter3.Compress` label in the Solution Explorer and
    select Add | New Project.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“解决方案资源管理器”中右键单击`Chapter3.Compress`标签，并选择“添加”|“新建项目”。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择类库 (.NET Standard)。
- en: '![](img/8eb776ce-df84-4fdd-b99f-0289dc1b8d4c.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8eb776ce-df84-4fdd-b99f-0289dc1b8d4c.png)'
- en: 'Now, in the Name: textbox, type `Chapter3.Compress.CompressLib`, leave the
    other defaults as they are, and click OK.'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在名称：文本框中，输入 `Chapter3.Compress.CompressLib`，保留其他默认设置，然后点击确定。
- en: '![](img/7e0e60a1-0de0-48ca-a0c2-46c395355fdd.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7e0e60a1-0de0-48ca-a0c2-46c395355fdd.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/9e26f41e-5f28-4a35-81c7-40d2d8e78924.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e26f41e-5f28-4a35-81c7-40d2d8e78924.png)'
- en: Now select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Zipper.cs`.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择 `Class1.cs` 并按 *F2* 键重命名文件为 `Zipper.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中回答是，以将类名也重命名。
- en: 'Now, in the `Zipper.cs` code window (double-click on the `Zipper.cs` label
    in Solution Explorer to open), type the following code next to the last line of
    the `using` directives:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `Zipper.cs` 代码窗口中（在解决方案资源管理器中双击 `Zipper.cs` 标签以打开），在 `using` 指令的最后一行旁边输入以下代码：
- en: '[PRE58]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Create a `private` class variable at the top of the class code (next to the
    starting curly bracket of the class):'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类代码顶部创建一个 `private` 类变量（紧挨着类的开始花括号）：
- en: '[PRE59]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Let''s add a constructor to our class by adding this code:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过添加以下代码向我们的类添加一个构造函数：
- en: '[PRE60]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now add this method next to the constructor code:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在构造函数代码旁边添加此方法：
- en: '[PRE61]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Finally, add the following code to list the zipped content:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加以下代码以列出压缩内容：
- en: '[PRE62]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Perform a quick build by pressing *Ctrl* + *Shift* + *B*, for syntax errors.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *Shift* + *B* 执行快速构建，以检查语法错误。
- en: How it works...
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we created a blank solution using Visual Studio 2017 and gave
    it a proper, meaningful name. In steps 7 to 10, we added a .NET Standard 2.0 class
    library to the project. We renamed the default `Class1.cs` generated by the template
    in step 12\. In step 14, we added two namespaces to the code. The `System.IO.Compression`
    namespace contains all the necessary classes for compressing and decompressing.
    In step 15, we added a private variable that holds the path to compress. In this
    case, it is a folder.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 5 中，我们使用 Visual Studio 2017 创建了一个空白解决方案，并给它一个合适、有意义的名称。在步骤 7 到 10 中，我们将一个
    .NET Standard 2.0 类库添加到项目中。我们在步骤 12 中模板生成的默认 `Class1.cs` 进行了重命名。在步骤 14 中，我们向代码中添加了两个命名空间。`System.IO.Compression`
    命名空间包含所有必要的类，用于压缩和解压缩。在步骤 15 中，我们添加了一个私有变量，用于存储压缩路径。在这种情况下，它是一个文件夹。
- en: 'Step 16 introduced the constructor with a source path parameter to zip. In
    step 17, we created a method that uses the `ZipFile` class and its method to compress
    a given source folder. And then, finally, we created a method that lists the name
    of a compressed archive. It takes a parameter as the compressed zip files path:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤 16 介绍了具有源路径参数的构造函数以进行压缩。在步骤 17 中，我们创建了一个使用 `ZipFile` 类及其方法压缩指定源文件夹的方法。然后，最终，我们创建了一个列出压缩存档名称的方法。它接受一个参数作为压缩
    zip 文件路径：
- en: '[PRE63]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The first line creates an empty list that populates `strings` as items. Then
    we created a `ZipArchive` instance. We have used the `using` keyword to wrap around
    that statement. It's a safe method of programming for this sort of item. The `using`
    keyword is a very convenient way of using an object that implements the `IDisposable`
    interface.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了一个空的列表，将 `strings` 作为项目填充。然后我们创建了一个 `ZipArchive` 实例。我们使用了 `using` 关键字来包围那个语句。这是一种安全的编程方法，用于此类项目。`using`
    关键字是使用实现 `IDisposable` 接口的对象的一种非常方便的方法。
- en: The `IDisposable` interface provides a mechanism for releasing unmanaged resources.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`IDisposable` 接口提供了一个释放非托管资源的机制。'
- en: And finally, we went through all the entries using a `foreach` and then returned
    the populated list.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用 `foreach` 遍历了所有条目，然后返回了填充后的列表。
- en: Creating a classic Windows application to use the library
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个经典 Windows 应用程序以使用库
- en: In this recipe, we will be looking at a classic Windows application that compresses
    a given folder using the library that we built in the previous recipe. Make sure
    you have completed the previous recipe that creates a .NET Standard 2.0 library.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看一个经典的 Windows 应用程序，该程序使用我们在上一个菜谱中构建的库来压缩指定的文件夹。确保你已经完成了创建 .NET Standard
    2.0 库的上一个菜谱。
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's open the previous solution for the library we built. Make sure you perform
    a quick build (*Ctrl* + *Shift* + *B*) to check for any syntax errors.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打开我们构建的库的先前解决方案。确保你执行快速构建 (*Ctrl* + *Shift* + *B*) 以检查任何语法错误。
- en: How to do it...
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution that we built from the previous recipe.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开从先前菜谱构建的解决方案。
- en: 'The Solution Explorer should look like this:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应该看起来像这样：
- en: '![](img/70bc46ff-6ae4-4e2f-91a5-dc0ebe30c75f.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70bc46ff-6ae4-4e2f-91a5-dc0ebe30c75f.png)'
- en: Now, let's select the solution name and right-click.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们选择解决方案名称并右键点击。
- en: From the menu, select Add | New Project.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择添加 | 新项目。
- en: In the New Project dialog box, expand the Visual C# node and select Windows
    Classic Desktop in the left-hand pane.
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开 Visual C# 节点，并在左侧窗格中选择 Windows Classic Desktop。
- en: 'In the right-hand pane, select Windows Forms App (.NET Framework):'
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择 Windows Forms App (.NET Framework)：
- en: '![](img/b195f446-7a46-4da2-9e4a-5e2ebf9505b4.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b195f446-7a46-4da2-9e4a-5e2ebf9505b4.png)'
- en: 'Now, in the Name: textbox, type `Chapter3.Compress.ZipperWinApp`, leave the
    Location: textbox as it is, and click OK.'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中输入 `Chapter3.Compress.ZipperWinApp`，保留“位置：”文本框的当前设置，然后点击确定。
- en: '![](img/dcbc0737-590f-4900-bf54-407906de5747.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dcbc0737-590f-4900-bf54-407906de5747.png)'
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/44558378-3ee4-47dc-b85a-407f35fca147.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44558378-3ee4-47dc-b85a-407f35fca147.png)'
- en: Let's rename the `Form1.cs` as `MainForm.cs` by selecting it and pressing *F2*.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过选择它并按 *F2* 将 `Form1.cs` 重命名为 `MainForm.cs`。
- en: Answer Yes in the confirmation box to confirm the changing of the main class
    name as well.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认框中点击是以确认更改主类名。
- en: Now, select the Windows form from the designer window.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从设计器窗口中选择 Windows 窗体。
- en: Drag drop a TextBox, a Button, and a ListBox in the form.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 TextBox、Button 和 ListBox 拖放到窗体中。
- en: Also drag drop a FolderDialogBox control in the Windows form.
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时将一个 FolderDialogBox 控件拖放到 Windows 窗体中。
- en: 'Change the properties of the previous controls as per this table:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据此表更改先前控件的属性：
- en: '| **Control** | **Property** | **Value** |'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控件** | **属性** | **值** |'
- en: '| TextBox | Name | `FolderTextBox` |'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文本框 | 名称 | `FolderTextBox` |'
- en: '| Button | Name | `BrowseButton` |'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `BrowseButton` |'
- en: '| Button | Text | `Browse...` |'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 文本 | `Browse...` |'
- en: '| ListBox | Name | `FileListBox` |'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 列表框 | 名称 | `FileListBox` |'
- en: '| Form | Text | `Zipper WinApp` |'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 窗体 | 文本 | `Zipper WinApp` |'
- en: '| FolderDialogBox | Name | `ZipFolder` |'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 文件夹对话框框 | 名称 | `ZipFolder` |'
- en: 'Now, your designer area should look like this:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的设计区域应该看起来像这样：
- en: '![](img/44fdfaf1-1b8f-434a-a372-e3dc73619749.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44fdfaf1-1b8f-434a-a372-e3dc73619749.png)'
- en: Now, select the `Chapter3.Compress.ZipperWinApp` label in the Solution Explorer
    and expand it.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择 `Chapter3.Compress.ZipperWinApp` 标签并展开它。
- en: Right-click on the References label and select Add Reference.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击“引用”标签并选择添加引用。
- en: Click on the Projects node in the Reference Manager dialog box.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器对话框中点击“项目”节点。
- en: Check the checkbox in front of `Chapter3.Compress.CompressLib` from the project
    list in the right-hand pane.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格的项目列表中，勾选 `Chapter3.Compress.CompressLib` 前面的复选框。
- en: '![](img/86241a4f-2080-43d0-8b57-157733bc3541.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](img/86241a4f-2080-43d0-8b57-157733bc3541.png)'
- en: Click OK.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now double-click on the Browse... button to open the code window.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在双击“浏览...”按钮以打开代码窗口。
- en: 'Scroll up in the code window and add the following `using` directive to the
    last line of all the `using` directives, at the top:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中向上滚动并添加以下 `using` 指令到所有 `using` 指令的最后一行，即在顶部：
- en: '[PRE64]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Now scroll down till you reach the button click event of the Browse... button
    and add the following code in between the curly brackets:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在向下滚动，直到到达“浏览...”按钮的按钮点击事件，并在大括号之间添加以下代码：
- en: '[PRE65]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Let''s press *F5* and test our code. Your output should look like this:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们按 *F5* 并测试我们的代码。你的输出应该看起来像这样：
- en: '![](img/0166d55e-3817-4cb2-9729-1b4cb204009b.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0166d55e-3817-4cb2-9729-1b4cb204009b.png)'
- en: 'Let''s click the Browse... button and navigate to a folder:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击“浏览...”按钮并导航到一个文件夹：
- en: '![](img/7662896a-fb9a-4830-9066-f5570ce3515d.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7662896a-fb9a-4830-9066-f5570ce3515d.png)'
- en: Click OK. Now, the folder will be compressed and the output file will be `result.zip`.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。现在，文件夹将被压缩，输出文件将是 `result.zip`。
- en: '![](img/3ec8c012-edd8-43ba-ac56-c011ac4dd396.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ec8c012-edd8-43ba-ac56-c011ac4dd396.png)'
- en: Click OK.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now you will see the list of files in the compressed ZIP file:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你将看到压缩 ZIP 文件中的文件列表：
- en: '![](img/1d79cbe3-df5d-4250-9357-b0d43cad2f70.png)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1d79cbe3-df5d-4250-9357-b0d43cad2f70.png)'
- en: 'Let''s browse to the folder selected using Windows Explorer and have a look
    (you can copy and paste the path from the textbox in the application itself):'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们使用 Windows 资源管理器浏览到选定的文件夹并查看（您可以从应用程序中的文本框中复制并粘贴路径）：
- en: '![](img/dadad59e-2bfc-4f17-a098-8a1eab594453.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dadad59e-2bfc-4f17-a098-8a1eab594453.png)'
- en: 'Double-click on the file and you will see that the content of the ZIP file
    matches the list we had in step 29:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击文件，你会看到 ZIP 文件的内容与我们在第 29 步中看到的列表相匹配：
- en: '![](img/8a5b65af-ba46-4bf0-804d-102058f5dfc1.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a5b65af-ba46-4bf0-804d-102058f5dfc1.png)'
- en: Now close the app.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在关闭应用程序。
- en: How it works...
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 作用原理...
- en: In steps 1 to 9, we opened the existing solution with the .NET Standard 2.0
    class library built in the previous recipe. Then we added a new Classic Windows
    Application project to that solution. We also gave it a proper name to match the
    solution. In steps 10 and 11, we renamed the default Windows form generated by
    Visual Studio. In steps 12 to 16, we added the necessary controls to build the
    user interface of our application.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到9中，我们打开了之前菜谱中构建的带有.NET Standard 2.0类库的现有解决方案。然后我们向该解决方案添加了一个新的经典Windows应用程序项目，并给它一个合适的名称以匹配解决方案。在步骤10和11中，我们将Visual
    Studio生成的默认Windows窗体重命名。在步骤12到16中，我们添加了必要的控件来构建我们应用程序的用户界面。
- en: In steps 18 to 21, we added the reference to the .NET Standard 2.0 library from
    our Classic Windows Application. This is a mandatory step, or else you will not
    have access to the library and its functionality. In step 23, we added a using
    statement that will tell the Windows application we have referenced the library
    and allow us to access its accessible methods.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤18到21中，我们将.NET Standard 2.0库的引用添加到我们的经典Windows应用程序中。这是一个强制性的步骤，否则你将无法访问库及其功能。在步骤23中，我们添加了一个using语句，这将告诉Windows应用程序我们已经引用了库，并允许我们访问其可访问的方法。
- en: 'In step 24, we added code to the button click event of the Browse... button.
    In the first line of that code, we have used an `if` statement to open the folder
    dialog box and checked whether the OK button is pressed in the dialog box. Then,
    the following two lines of code store the selected path in the textbox of our
    Windows application:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤24中，我们向浏览...按钮的点击事件中添加了代码。在该代码的第一行中，我们使用了一个`if`语句来打开文件夹对话框，并检查对话框中是否按下了OK按钮。然后，接下来的两行代码将选定的路径存储在我们的Windows应用程序的文本框中：
- en: '[PRE66]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Then we have a `string` variable that stores the destination ZIP filename:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有一个`string`变量，用于存储目标ZIP文件名：
- en: '[PRE67]'
  id: totrans-380
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In the first line, we have an instance of the `Zipper` class and, in the second
    line, we have used its `CompressFile()` method. Finally, we have displayed a notification
    to the end user by using the `MessageBox.Show()` method. Finally, in the following
    two lines of code, we used the `ListArchive()` method to extract the content of
    the ZIP file and added the output to the list box control:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一行，我们创建了一个`Zipper`类的实例，在第二行，我们使用了它的`CompressFile()`方法。最后，我们通过使用`MessageBox.Show()`方法向最终用户显示了一个通知。最后，在接下来的两行代码中，我们使用了`ListArchive()`方法来提取ZIP文件的内容，并将其添加到列表框控件中：
- en: '[PRE68]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Encrypting and decrypting content in a text file
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在文本文件中加密和解密内容
- en: In this recipe, we will be looking at another capability of the `System.IO`
    namespace. We will be creating a .NET Standard 2.0 library that encrypts an existing
    text file as well as decrypts it.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将查看`System.IO`命名空间的其他功能。我们将创建一个.NET Standard 2.0库，该库可以加密现有的文本文件，也可以解密它。
- en: Getting ready
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Encryption is a great way of securing your files. The `System.IO` namespace
    provides you with great functionality to encrypt and decrypt your content. Let's
    have a look at how to do it in a .NET Standard 2.0 library.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 加密是保护文件的一种很好的方式。`System.IO`命名空间为你提供了加密和解密内容的功能。让我们看看如何在.NET Standard 2.0库中实现它。
- en: How to do it...
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目来创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane, and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution.
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择Visual Studio解决方案。在右侧窗格中，选择空白解决方案。
- en: 'In the Name: textbox, type `Chapter3.SecureFile` and, in the Location: textbox,
    select the path from the drop-down box or click on the Browse... button to locate
    a path.'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入`Chapter3.SecureFile`，在“位置：”文本框中，从下拉框中选择路径或点击浏览...按钮来定位路径。
- en: '![](img/536217ac-e63e-4237-af11-4aad1fdac658.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![](img/536217ac-e63e-4237-af11-4aad1fdac658.png)'
- en: Click OK.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你的解决方案资源管理器（*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/e79e009a-6297-4ca2-87df-7311c48a3f7f.png)'
  id: totrans-395
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e79e009a-6297-4ca2-87df-7311c48a3f7f.png)'
- en: Now, right-click on the `Chapter3.SecureFile` label in the Solution Explorer
    and select Add | New Project**.**
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中右键单击`Chapter3.SecureFile`标签，并选择添加 | 新项目****。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择 .NET Standard，在右侧窗格中选择类库 (.NET Standard)。
- en: '![](img/dec30139-1060-461e-a10d-7180279c4786.png)'
  id: totrans-399
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dec30139-1060-461e-a10d-7180279c4786.png)'
- en: 'Now, in the Name: textbox, type `Chapter3.SecureFile.CryptLib`, leave the other
    defaults as they are, and click OK.'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称”文本框中，输入`Chapter3.SecureFile.CryptLib`，保留其他默认设置，然后点击确定。
- en: '![](img/ccc1044a-50d5-4bc6-b040-223d78062981.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ccc1044a-50d5-4bc6-b040-223d78062981.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/b69b197f-d1cb-42ed-abcd-a65bb49539e5.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b69b197f-d1cb-42ed-abcd-a65bb49539e5.png)'
- en: Now select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `CryptFile.cs`.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择 `Class1.cs` 并按 *F2* 将文件重命名为 `CryptFile.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在询问是否重命名类名的确认对话框中，回答是。
- en: Now double-click on`CryptFile.cs` to open the code window.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击 `CryptFile.cs` 以打开代码窗口。
- en: 'In the code window, scroll up to the top and add the following `using` directive
    to the last line of the `using` directives:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，向上滚动到顶部，并在 `using` 指令的最后一行添加以下 `using` 指令：
- en: '[PRE69]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Now add the following code next to the start curly bracket of the `CryptFile`
    class:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `CryptFile` 类的开始花括号旁边添加以下代码：
- en: '[PRE70]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Let''s add the default constructor method as follows:'
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下默认构造函数方法：
- en: '[PRE71]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now let''s add a method to encrypt the file:'
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个加密文件的方法：
- en: '[PRE72]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Also add this method to decrypt the file:'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还要添加以下解密文件的方法：
- en: '[PRE73]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Press *Ctrl* + *Shift* + *B* to perform a quick build to check for the correct
    syntax.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建以检查语法是否正确。
- en: How it works...
  id: totrans-418
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 5, we opened Visual Studio 2017, created an empty solution, and
    gave it a proper name. In steps 7 to 11, we added a .NET Standard 2.0 library
    to the solution. In steps 12 and 13, we changed the default name of the class
    generated from the template. In step 15, we added the `System.IO` namespace that
    contains the file encryption and decryption functionality.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 5 中，我们打开了 Visual Studio 2017，创建了一个空解决方案，并给它起了适当的名字。在步骤 7 到 11 中，我们将
    .NET Standard 2.0 库添加到解决方案中。在步骤 12 和 13 中，我们更改了由模板生成的类的默认名称。在步骤 15 中，我们添加了包含文件加密和解密功能的
    `System.IO` 命名空间。
- en: In step 16, we added a class-wide private `string` variable to hold the filename
    to encrypt and decrypt. In step 17, we added the default constructor that populates
    the private variable to hold the filename. In step 18, we added a method to encrypt
    the file. We used the `Encrypt()` method of the file class found in the `System.IO` namespace.
    We did the same in step 19 to decrypt the file.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 16 中，我们添加了一个类级别的私有 `string` 变量来保存要加密和解密的文件名。在步骤 17 中，我们添加了默认构造函数，用于填充私有变量以保存文件名。在步骤
    18 中，我们添加了一个加密文件的方法。我们使用了 `System.IO` 命名空间中找到的文件类的 `Encrypt()` 方法。在步骤 19 中，我们以相同的方式解密文件。
- en: Finally, we performed a quick build to check that all the syntax was intact.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们进行了快速构建以检查所有语法是否完整。
- en: Creating a classic Windows application to use the library
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个经典 Windows 应用程序以使用库
- en: This recipe will focus on building a classic Windows application to use the
    .NET Standard 2.0 library that we created in the previous recipe.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将专注于构建一个经典 Windows 应用程序来使用我们在上一个配方中创建的 .NET Standard 2.0 库。
- en: Getting ready
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipe where we built a .NET Standard
    2.0 library. It used the `System.IO` namespace to encrypt and decrypt a file.
    Open that solution and do a quick *Ctrl* + *Shift* + *B* to check that everything
    is fine.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了之前的配方，其中我们构建了一个 .NET Standard 2.0 库。它使用了 `System.IO` 命名空间来加密和解密文件。打开该解决方案，并快速按
    *Ctrl* + *Shift* + *B* 检查一切是否正常。
- en: How to do it...
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open Visual Studio 2017.
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now open the solution we built from the previous recipe.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开之前配方中构建的解决方案。
- en: 'The Solution Explorer should look like this:'
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决方案资源管理器应该看起来像这样：
- en: '![](img/57707bf4-4068-4cc0-a515-12579db36310.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/57707bf4-4068-4cc0-a515-12579db36310.png)'
- en: Now, let's select the solution name and right-click.
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们选择解决方案名称并右键单击。
- en: From the menu, select Add | New Project.
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择添加 | 新项目。
- en: In the New Project dialog box, expand the Visual C# node and select Windows
    Classic Desktop in the left-hand pane.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目对话框中，展开 Visual C# 节点，并在左侧窗格中选择 Windows Classic Desktop。
- en: 'In the right-hand pane, select Windows Forms App (.NET Framework):'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中，选择 Windows Forms App (.NET Framework)：
- en: '![](img/cb3a92e5-28de-4849-ab60-b87f8810b0b1.png)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cb3a92e5-28de-4849-ab60-b87f8810b0b1.png)'
- en: 'Now, in the Name: textbox, type `Chapter3.SecureFile.SecureWinApp`, leave the
    Location: textbox as it is, and click OK.'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在名称：文本框中，键入 `Chapter3.SecureFile.SecureWinApp`，保留位置：文本框的当前内容，并点击确定。
- en: '![](img/08c0e52a-d4c0-4684-b641-2905e9746458.png)'
  id: totrans-437
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c0e52a-d4c0-4684-b641-2905e9746458.png)'
- en: 'Now, the Solution Explorer should look like this:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器应该看起来像这样：
- en: '![](img/00413fb3-2716-4b11-aed2-1a43bada7dd5.png)'
  id: totrans-439
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00413fb3-2716-4b11-aed2-1a43bada7dd5.png)'
- en: Let's rename `Form1.cs` as `MainForm.cs`, by selecting it and pressing *F2*.
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们将 `Form1.cs` 重命名为 `MainForm.cs`，通过选中它并按 *F2* 键。
- en: Answer Yes in the confirmation box to confirm the changing of the main class
    name as well.
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认框中回答是，以确认更改主类名。
- en: Now select the Windows form from the designer window.
  id: totrans-442
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从设计窗口中选择 Windows 窗体。
- en: Drag and drop two Buttons in the form.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗体中拖放两个按钮。
- en: Also drag and drop an `OpenFileDialogBox` control in the Windows form.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同时将一个 `OpenFileDialogBox` 控件拖放到 Windows 窗体中。
- en: 'Change the properties of the previous controls as per this table:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据以下表格更改先前控件属性：
- en: '| **Control** | **Property** | **Value** |'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控件** | **属性** | **值** |'
- en: '| Button | Name | `EncryptButton` |'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `EncryptButton` |'
- en: '| Button | Text | `Encrypt` |'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 文本 | `加密` |'
- en: '| Button | Name | `DecryptButton` |'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 名称 | `DecryptButton` |'
- en: '| Button | Text | `Decrypt` |'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 按钮 | 文本 | `解密` |'
- en: '| OpenFileDialogBox | Name | `OpenDialog` |'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 打开文件对话框框 | 名称 | `OpenDialog` |'
- en: '| OpenFileDialogBox | Filter | `Text Files&#124;*.txt` |'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| 打开文件对话框框 | 过滤器 | `文本文件&#124;*.txt` |'
- en: 'Now, your designer area should look like this:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您的设计区域应该看起来像这样：
- en: '![](img/060b628e-8463-4a20-b2a8-599f8bcf9d65.png)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
  zh: '![](img/060b628e-8463-4a20-b2a8-599f8bcf9d65.png)'
- en: Now select the `Chapter3.SecureFile.SecureWinApp` label in the Solution Explorer
    and expand it.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在从解决方案资源管理器中选择 `Chapter3.SecureFile.SecureWinApp` 标签，并展开它。
- en: Right-click on the References label and select Add Reference.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击引用标签，并选择添加引用。
- en: Click on the Projects node in the Reference Manager dialog box.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器对话框中点击项目节点。
- en: Check the check box in front of the `Chapter3.SecureFile.CryptLib` label from
    the project list in the right-hand pane.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从右侧窗格的项目列表中，勾选 `Chapter3.SecureFile.CryptLib` 标签前面的复选框。
- en: '![](img/0912295c-c415-465c-a3a3-9a63fc2fdb8e.png)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0912295c-c415-465c-a3a3-9a63fc2fdb8e.png)'
- en: Click OK.
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Now switch back to the design window and double-click on the Encrypt button
    to open the code window.
  id: totrans-461
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在切换回设计窗口，双击加密按钮以打开代码窗口。
- en: 'In the code window, scroll up to the top and add the following `using` directive
    as the last line of the `using` block:'
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中，向上滚动到顶部，并将以下 `using` 指令作为 `using` 块的最后一行添加：
- en: '[PRE74]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'Now scroll down to the Encrypt button, click, and add the following code in
    between the curly brackets:'
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在向下滚动到加密按钮，点击，并在大括号之间添加以下代码：
- en: '[PRE75]'
  id: totrans-465
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: Now switch back to the designer window by clicking on the MainForm.cs [designer]
    tab.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过点击 MainForm.cs [设计器] 选项卡，切换回设计窗口。
- en: Double-click on the Decrypt button to reach the code for that button click.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击解密按钮，进入该按钮点击事件的代码。
- en: 'Add the following code in between the curly brackets of the button click code:'
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在按钮点击代码的大括号之间添加以下代码：
- en: '[PRE76]'
  id: totrans-469
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Now press *F5* to execute the code (make sure the classic Windows application
    project is the default project)
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在按 *F5* 执行代码（确保经典 Windows 应用程序项目是默认项目）
- en: 'Press the Encrypt button and select a file:'
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击加密按钮并选择一个文件：
- en: '![](img/b69b8519-f9d9-47de-a202-c485009ca1a7.png)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b69b8519-f9d9-47de-a202-c485009ca1a7.png)'
- en: Click Open and click OK in the information box.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击打开，并在信息框中点击确定。
- en: Now open Windows Explorer and navigate to the location of the file that you
    just encrypted.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在打开 Windows 资源管理器，导航到您刚刚加密的文件位置。
- en: You will notice a lock on the file.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会注意到文件上有一个锁。
- en: '![](img/6fe3a32c-4edb-45bb-95ec-bc81391a7471.png)'
  id: totrans-476
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fe3a32c-4edb-45bb-95ec-bc81391a7471.png)'
- en: Now switch back to your app, click on the Decrypt button, and follow the same
    steps as before.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在切换回您的应用程序，点击解密按钮，并按照之前的步骤进行。
- en: Now the lock is removed from the file.
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在文件上的锁已被移除。
- en: '![](img/329f4d76-d1e0-4ce4-801b-574f74a7851e.png)'
  id: totrans-479
  prefs: []
  type: TYPE_IMG
  zh: '![](img/329f4d76-d1e0-4ce4-801b-574f74a7851e.png)'
- en: How it works...
  id: totrans-480
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 4, we opened the existing solution with the library we built in
    the previous recipe. In steps 5 to 9, we added a classic Windows project to the
    solution. We have assigned proper names to the project to keep consistency and
    readability. In steps 10 to 15, we changed the name of the Windows form and then
    added necessary controls to the form. At the end, we changed the properties of
    those controls.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到4中，我们打开了包含我们在上一个菜谱中构建的库的现有解决方案。在步骤5到9中，我们将一个经典的Windows项目添加到解决方案中。我们为项目分配了适当的名称以保持一致性和可读性。在步骤10到15中，我们更改了Windows窗体的名称，并向窗体添加了必要的控件。最后，我们更改了这些控件的属性。
- en: In steps 18 to 21, we added a reference to the project that contains the library.
    This is a mandatory step, or else we won't be able to access the library functionality
    from our Windows application. Now, in step 23, we added the reference to a library
    project from the code level. This step will allow you to access all the methods
    available from the code level. In step 24, we used an `if` statement to open the
    File Open dialog box and to check whether the Open button is clicked. In the next
    lines of code, we created an instance of the `CryptFile` class and used the filename
    with the path as its parameter. Finally, we used the `EncryptFile()` method to
    start the encryption and `MessageBox.Show()` to display the information to the
    user. Again, in step 25, we used the Decrypt button of the application to use
    the other `DecryptFile()` method of the `CryptFile` class.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤18到21中，我们添加了对包含库的项目引用。这是一个强制性的步骤，否则我们无法从我们的Windows应用程序中访问库功能。现在，在步骤23中，我们从代码级别添加了对库项目的引用。这一步骤将允许您从代码级别访问所有可用的方法。在步骤24中，我们使用了一个`if`语句来打开文件打开对话框，并检查是否点击了打开按钮。在接下来的代码行中，我们创建了一个`CryptFile`类的实例，并使用带有路径的文件名作为其参数。最后，我们使用`EncryptFile()`方法开始加密，并使用`MessageBox.Show()`向用户显示信息。同样，在步骤25中，我们使用了应用程序的解密按钮来使用`CryptFile`类的另一个`DecryptFile()`方法。
- en: Finally, in steps 28 to 31, we executed our application and tested it. In steps
    32 and 34, we confirmed that encryption and decryption worked.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在步骤28到31中，我们执行了我们的应用程序并对其进行了测试。在步骤32和34中，我们确认了加密和解密功能正常工作。
