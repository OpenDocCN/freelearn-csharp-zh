["```cs\n   using UnityEngine;\n    using UnityEngine.UI;\n\n    public class ReadPublicTextAsset : MonoBehaviour {\n     public TextAsset dataTextFile;\n\n     private void Start() {\n         string textFromFile = dataTextFile.text;\n         Text textOnScreen = GetComponent<Text>();\n         textOnScreen.text = textFromFile;\n     }\n    } \n```", "```cs\nusing System;\nusing System.IO;\n\n public class FileReadWriteManager {\n     public void WriteTextFile(string pathAndName, string stringData) {\n         FileInfo textFile = new FileInfo( pathAndName );\n         if( textFile.Exists )\n              textFile.Delete();\n\n         StreamWriter writer;\n         writer = textFile.CreateText();\n\n         writer.Write(stringData);\n         writer.Close();\n     }\n\n     public string ReadTextFile(string pathAndName) {\n         string dataAsString = \"\";\n\n         try {\n             StreamReader textReader = File.OpenText( pathAndName );\n\n             dataAsString = textReader.ReadToEnd();\n             textReader.Close();\n         }\n         catch (Exception e) {\n             return \"error:\" + e.Message;\n         }\n\n         return dataAsString;\n     }\n } \n```", "```cs\nusing UnityEngine;\n using UnityEngine.UI;\n using System.IO;\n\n public class ReadWithStream : MonoBehaviour {\n     private string fileName = \"cities.txt\";\n\n     private string textFileContents = \"(file not found yet)\";\n     private FileReadWriteManager fileReadWriteManager = new FileReadWriteManager();\n\n     private void Start () {\n         string filePath = Path.Combine(Application.dataPath, \"Resources\");\n         filePath = Path.Combine(filePath, fileName);\n\n         textFileContents = fileReadWriteManager.ReadTextFile( filePath );\n\n         Text textOnScreen = GetComponent<Text>();\n         textOnScreen.text = textFileContents;\n     }\n } \n```", "```cs\nFileReadWriteManager.cs\n```", "```cs\nusing UnityEngine;\n using System.IO;\n\n public class SaveTextFile : MonoBehaviour {\n     public string fileName = \"hello.txt\";\n     public string folderName = \"Data\";\n     private string filePath = \"(no file path yet)\";\n     private FileReadWriteManager fileManager;\n\n     void Start () {\n         string textData = \"hello \\n and goodbye\";\n         fileManager = new FileReadWriteManager();\n         filePath = Path.Combine(Application.dataPath, folderName);\n         filePath = Path.Combine(filePath, fileName);\n         fileManager.WriteTextFile( filePath, textData );\n     }\n } \n```", "```cs\n<scoreRecordList>\n        <scoreRecord>\n            <player>matt</player>\n            <score>2200</score>\n            <date>\n                <day>1</day>\n                <month>Sep</month>\n                <year>2012</year>\n            </date>\n        </scoreRecord>\n        <scoreRecord>\n            <player>jane</player>\n            <score>500</score>\n            <date>\n                <day>12</day>\n                <month>May</month>\n                <year>2012</year>\n            </date>\n        </scoreRecord>\n    </scoreRecordList> \n```", "```cs\n    public class PlayerScoreDate\n     {\n         private string playerName;\n         private int score;\n         private string date;\n\n         public void SetPlayerName(string playerName)\n         { this.playerName = playerName; }\n\n         public void SetScore(int score)\n         { this.score = score; }\n\n         public void SetDate(string date)\n         { this.date = date; }\n\n         override public string ToString()\n         {\n             return \"Player = \" + this.playerName + \",\n             score = \" + this.score + \", date = \" + this.date;\n         }\n     } \n```", "```cs\nusing UnityEngine;\n using System;\n using System.Xml;\n using System.IO;\n\n public class ParseXML : MonoBehaviour {\n     public TextAsset scoreDataTextFile;\n     private PlayerScoreDate[] playerScores = new PlayerScoreDate[999];\n\n     private void Start() {\n         string textData = scoreDataTextFile.text;\n         int numberObjects = ParseScoreXML( textData );\n\n         for (int i = 0; i < numberObjects; i++)\n             print(playerScores[i]);\n     }\n\n     private int ParseScoreXML(string xmlData) {\n         XmlDocument xmlDoc = new XmlDocument();\n         xmlDoc.Load( new StringReader(xmlData) );\n\n         string xmlPathPattern = \"//scoreRecordList/scoreRecord\";\n         XmlNodeList myNodeList = xmlDoc.SelectNodes( xmlPathPattern );\n\n         int i = 0;\n         foreach(XmlNode node in myNodeList){\n             playerScores[i] = NodeToPlayerScoreObject(node);\n             i++;\n         }\n\n         return i;\n     }\n\n     private PlayerScoreDate NodeToPlayerScoreObject(XmlNode node) {\n         XmlNode playerNode = node.FirstChild;\n         string playerName = playerNode.InnerXml;\n\n         XmlNode scoreNode = playerNode.NextSibling;\n         string scoreString = scoreNode.InnerXml;\n         int score = Int32.Parse(scoreString);\n\n         XmlNode dateNode = scoreNode.NextSibling;\n         string date = NodeToDateString(dateNode);\n\n         PlayerScoreDate playerObject = new PlayerScoreDate();\n         playerObject.SetPlayerName(playerName);\n         playerObject.SetScore(score);\n         playerObject.SetDate(date);\n\n         return playerObject;\n\n     }\n\n     private string NodeToDateString(XmlNode dateNode) {\n         XmlNode dayNode = dateNode.FirstChild;\n         XmlNode monthNode = dayNode.NextSibling;\n         XmlNode yearNode = monthNode.NextSibling;\n\n         return dayNode.InnerXml + \"/\" + monthNode.InnerXml + \"/\" + yearNode.InnerXml;\n     }\n } \n```", "```cs\nusing UnityEngine;\n using System.Xml;\n using System.IO;\n\n public class CreateXMLString : MonoBehaviour {\n\n     private void Start () {\n         string output = BuildXMLString();\n         print(output);\n     }\n\n     private string BuildXMLString() {\n         StringWriter str = new StringWriter();\n         XmlTextWriter xml = new XmlTextWriter(str);\n\n         // start doc and root element\n         xml.WriteStartDocument();\n         xml.WriteStartElement(\"playerScoreList\");\n\n         // data element\n         xml.WriteStartElement(\"player\");\n         xml.WriteElementString(\"name\", \"matt\");\n         xml.WriteElementString(\"score\", \"200\");\n         xml.WriteEndElement();\n\n         // data element\n         xml.WriteStartElement(\"player\");\n         xml.WriteElementString(\"name\", \"jane\");\n         xml.WriteElementString(\"score\", \"150\");\n         xml.WriteEndElement();\n\n         // end root and document\n         xml.WriteEndElement();\n         xml.WriteEndDocument();\n\n         return str.ToString();\n     }\n } \n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-16\"?>\n   <playerScoreList>\n   <player>\n   <name>matt</name>\n   <score>200</score>\n   </player>\n   <player>\n   <name>jane</name>\n   <score>150</score>\n   </player>\n   </playerScoreList> \n```", "```cs\nxml.WriteWhitespace(\"\\n \");\n```", "```cs\nusing UnityEngine;\nusing System.Collections.Generic;\n\npublic class CreateXMLFromArray : MonoBehaviour {\n   private List<PlayerScore> playerScoreList;\n\n   private void Start () {\n       playerScoreList = new List<PlayerScore>();\n       playerScoreList.Add (new PlayerScore(\"matt\", 200) );\n       playerScoreList.Add (new PlayerScore(\"jane\", 150) );\n\n       string output = PlayerScore.ListToXML( playerScoreList );\n       print(output); \n   }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Xml;\nusing System.IO;\n\npublic class PlayerScore {\n   private string _name;\n   private int _score;\n\n   public PlayerScore(string name, int score) {\n       _name = name;\n       _score = score;\n   }\n\n   static public string ListToXML(List<PlayerScore> playerList) {\n       StringWriter str = new StringWriter();\n       XmlTextWriter xml = new XmlTextWriter(str);\n       xml.WriteStartDocument();\n       xml.WriteStartElement(\"playerScoreList\");\n       foreach (PlayerScore playerScoreObject in playerList) {\n          playerScoreObject.ObjectToElement( xml );\n       }\n\n       xml.WriteEndElement();\n       xml.WriteEndDocument();\n       return str.ToString();\n    }\n\n    private void ObjectToElement(XmlTextWriter xml) {\n       // data element\n       xml.WriteStartElement(\"player\");\n       xml.WriteElementString(\"name\", _name);\n       string scoreString = \"\" + _score; // make _score a string\n       xml.WriteElementString(\"score\", scoreString);\n       xml.WriteEndElement();\n    }\n }\n\n```", "```cs\n    using System.Xml.Serialization;\n\n     [System.Serializable]\n     public class PlayerScore\n     {\n         [XmlElement(\"Name\")]\n         public string name;\n\n         [XmlElement(\"Score\")]\n         public int score;\n\n         [XmlElement(\"Version\")]\n         public string version;\n     } \n```", "```cs\n    using System.Xml.Serialization;\n     using System.IO;\n\n     [XmlRoot(\"PlayerScoreCollection\")]\n     public class PlayerScoreCollection\n     {\n         [XmlArray(\"PlayerScores\"), XmlArrayItem(\"PlayerScore\")]\n         public PlayerScore[] playerScores;\n\n         public void Save(string path) {\n             var serializer = new XmlSerializer(typeof(PlayerScoreCollection));\n             using (var stream = new FileStream(path, FileMode.Create)) {\n                 serializer.Serialize(stream, this);\n             }\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using System.IO;\n\n     public class XmlWriter : MonoBehaviour {\n         public string fileName = \"playerData.xml\";\n         public string folderName = \"Data\";\n\n         private void Start() {\n             string filePath = Path.Combine(Application.dataPath, folderName);\n             filePath = Path.Combine(filePath, fileName);\n\n             PlayerScoreCollection psc = CreatePlayScoreCollection();\n             psc.Save(filePath);\n             print(\"XML file should now have been created at: \" + filePath);\n         }\n\n         private PlayerScoreCollection CreatePlayScoreCollection() {\n             PlayerScoreCollection playerScoreCollection = new PlayerScoreCollection();\n\n             // make 2 slot array\n             playerScoreCollection.playerScores = new PlayerScore[2];\n\n             playerScoreCollection.playerScores[0] = new PlayerScore();\n             playerScoreCollection.playerScores[0].name = \"matt\";\n             playerScoreCollection.playerScores[0].score = 22;\n             playerScoreCollection.playerScores[0].version = \"v0.5\";\n\n             playerScoreCollection.playerScores[1] = new PlayerScore();\n             playerScoreCollection.playerScores[1].name = \"joelle\";\n             playerScoreCollection.playerScores[1].score = 5;\n             playerScoreCollection.playerScores[1].version = \"v0.9\";\n\n             return playerScoreCollection;\n         }\n     } \n```", "```cs\n    <?xml version=\"1.0\" encoding=\"us-ascii\"?>\n     <PlayerScoreCollection\n\n         >\n       <PlayerScores>\n         <PlayerScore>\n           <Name>matt</Name>\n           <Score>22</Score>\n           <Version>v0.5</Version>\n         </PlayerScore>\n         <PlayerScore>\n           <Name>joelle</Name>\n           <Score>5</Score>\n           <Version>v0.9</Version>\n         </PlayerScore>\n       </PlayerScores>\n     </PlayerScoreCollection> \n```", "```cs\n    matt, 22, v0.5\n    joelle, 5, v.09 \n```", "```cs\n    [XmlElement(\"Name\")]\n    public string name; \n```", "```cs\n    public static PlayerScoreCollection Load(string path) {\n         var serializer = new XmlSerializer(typeof(PlayerScoreCollection));\n         using (var stream = new FileStream(path, FileMode.Open)) {\n             return serializer.Deserialize(stream) as PlayerScoreCollection;\n         }\n     } \n```", "```cs\n    public static PlayerScoreCollection LoadFromString(string text) {\n         var serializer = new XmlSerializer(typeof(PlayerScoreCollection));\n         return serializer.Deserialize(new StringReader(text)) as PlayerScoreCollection;\n     } \n```", "```cs\n    public TextAsset dataAsXmlString;\n\n     private void Start()\n     {\n         PlayerScoreCollection objectCollection =   \n         PlayerScoreCollection.LoadFromString(dataAsXmlString.text);\n\n         foreach(PlayerScore playerScore in objectCollection.playerScores){\n             print(\"name = \" + playerScore.name + \", score = \" + playerScore.score + \",\n                 version = \" + playerScore.version);\n         }\n     } \n```", "```cs\n    using System.Xml;\n     using System.IO;\n\n     public class PlayerXMLWriter {\n         private string filePath;\n         private XmlDocument xmlDoc;\n         private XmlElement elRoot;\n\n         public PlayerXMLWriter(string filePath) {\n             this.filePath = filePath;\n             xmlDoc = new XmlDocument();\n\n             if(File.Exists (filePath)) {\n                 xmlDoc.Load(filePath);\n                 elRoot = xmlDoc.DocumentElement;\n                 elRoot.RemoveAll();\n             }\n             else {\n                 elRoot  = xmlDoc.CreateElement(\"playerScoreList\");\n                 xmlDoc.AppendChild(elRoot);\n             }\n         }\n\n         public void AddXMLElement(string playerName, string playerScore) {\n             XmlElement elPlayer = xmlDoc.CreateElement(\"playerScore\");\n             elRoot.AppendChild(elPlayer);\n\n             XmlElement elName = xmlDoc.CreateElement(\"name\");\n             elName.InnerText = playerName;\n             elPlayer.AppendChild(elName);\n\n             XmlElement elScore = xmlDoc.CreateElement(\"score\");\n             elScore.InnerText = playerScore;\n             elPlayer.AppendChild(elScore);\n         }\n\n         public void SaveXMLFile() {\n            xmlDoc.Save(filePath);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using System.IO;\n\n     public class CreateXMLTextFile : MonoBehaviour {\n         public string fileName = \"playerData.xml\";\n         public string folderName = \"Data\";\n\n         private void Start() {\n             string filePath = Path.Combine( Application.dataPath, folderName);\n             filePath = Path.Combine( filePath, fileName);\n\n             PlayerXMLWriter playerXMLWriter = new PlayerXMLWriter(filePath);\n             playerXMLWriter.AddXMLElement(\"matt\", \"55\");\n             playerXMLWriter.AddXMLElement(\"jane\", \"99\");\n             playerXMLWriter.AddXMLElement(\"fred\", \"101\");\n             playerXMLWriter.SaveXMLFile();\n\n             print( \"XML file should now have been created at: \" + filePath);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     [System.Serializable]\n     public class PlayerScore {\n         public string name;\n         public int score;\n\n         public string ToJson() {\n             bool prettyPrintJson = true;\n             return JsonUtility.ToJson(this, prettyPrintJson);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using System.Collections.Generic;\n\n     [System.Serializable]\n     public class PlayerScoreList {\n         public List<PlayerScore> list = new List<PlayerScore>();\n\n         public string ToJson() {\n             bool prettyPrint = true;\n             return JsonUtility.ToJson(this, prettyPrint);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class ToJson : MonoBehaviour {\n         private PlayerScore playerScore1 = new PlayerScore();\n         private PlayerScore playerScore2 = new PlayerScore();\n         private PlayerScoreList playerScoreList = new PlayerScoreList();\n\n         private void Awake() {\n             playerScore1.name = \"matt\";\n             playerScore1.score = 800;\n\n             playerScore2.name = \"joelle\";\n             playerScore2.score = 901;\n\n             playerScoreList.list.Add(playerScore1);\n             playerScoreList.list.Add(playerScore2);\n         }\n\n         void Start() {\n             ObjectToJson();\n             CollectionToJson();\n         }\n\n         public void ObjectToJson() {\n             string objectAsString = playerScore1.ToJson();\n             print(\"1: Object to JSON \\n\" + objectAsString);\n         }\n\n         public void CollectionToJson() {\n             string objectListAsString = playerScoreList.ToJson();\n             print(\"2: List of objects to JSON \\n\" + objectListAsString);\n         }\n     } \n```", "```cs\n    1: Object to JSON\n     {\n         \"name\": \"matt\",\n         \"score\": 800\n     } \n```", "```cs\n    2: List of objects to JSON\n     {\n         \"list\": [\n             {\n                 \"name\": \"matt\",\n                 \"score\": 800\n             },\n             {\n                 \"name\": \"joelle\",\n                 \"score\": 901\n             }\n         ]\n     } \n```", "```cs\n    { \"name\": \"matt\", \"score\": 800 }. \n```", "```cs\n    {\n         \"list\": [\n             { \"name\": \"matt\", \"score\": 800 },\n             { \"name\": \"joelle\", \"score\": 901 }\n         ]\n     } \n```", "```cs\n    using UnityEngine;\n\n     [System.Serializable]\n     public class PlayerScore {\n         public string name;\n         public int score;\n\n         public static PlayerScore FromJSON(string jsonString) {\n             return JsonUtility.FromJson<PlayerScore>(jsonString);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n     using System.Collections.Generic;\n\n     [System.Serializable]\n     public class PlayerScoreList {\n         public List<PlayerScore> list = new List<PlayerScore>();\n\n         public static PlayerScoreList FromJSON(string jsonString) {\n             return JsonUtility.FromJson<PlayerScoreList>(jsonString);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class FromJson : MonoBehaviour {\n         private void Start() {\n             JsonToObject();\n             JsonToList();\n         }\n\n         public void JsonToObject() {\n             string playerScoreAsString = \"{ \\\"name\\\":\\\"matt\\\", \\\"score\\\":201}\";\n             PlayerScore playerScore = PlayerScore.FromJSON(playerScoreAsString);\n\n             print(playerScore.name + \", \" + playerScore.score);\n         }\n\n         public void JsonToList() {\n             string playerScorelistAsString = \"\";\n\n             playerScorelistAsString += \"{\";\n             playerScorelistAsString += \"\\\"list\\\": [\";\n             playerScorelistAsString += \"        {\";\n             playerScorelistAsString += \"            \\\"name\\\": \\\"matt\\\",\";\n             playerScorelistAsString += \"            \\\"score\\\": 800\";\n             playerScorelistAsString += \"        },\";\n             playerScorelistAsString += \"        {\";\n             playerScorelistAsString += \"            \\\"name\\\": \\\"joelle\\\",\";\n             playerScorelistAsString += \"            \\\"score\\\": 901\";\n             playerScorelistAsString += \"        }\";\n             playerScorelistAsString += \"    ]\";\n             playerScorelistAsString += \"}\";\n\n             PlayerScoreList playerScoreList = PlayerScoreList.FromJSON(playerScorelistAsString);\n\n             foreach (var playerScore in playerScoreList.list) {\n                 print(\"from list :: \" + playerScore.name + \", \" + playerScore.score);\n             }\n         }\n     } \n```", "```cs\n    matt, 201 \n```", "```cs\n    from list :: matt, 800\n    from list :: joelle, 901 \n```", "```cs\n{ \n   \"name\":\"matt\",  \n   \"score\":201 \n} \n```", "```cs\n{ \n   \"list\": [         \n         {             \n               \"name\": \"matt\",             \n               \"score\": 800         \n         },         \n         {             \n               \"name\": \"joelle\",            \n               \"score\": 901         \n         }     \n   ] \n} \n```"]