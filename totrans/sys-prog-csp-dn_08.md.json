["```cs\nusing var client = new HttpClient();\ntry\n{\n    string url =\n        \"https://jsonplaceholder.typicode.com/posts\";\n    HttpResponseMessage response =\n        await client.GetAsync(url);\n    response.EnsureSuccessStatusCode();\n    string responseBody =\n        await response.Content.ReadAsStringAsync();\n    responseBody.Dump(ConsoleColor.Cyan);\n}\ncatch(HttpRequestException ex)\n{\n    ex.Message.Dump(ConsoleColor.Red);\n}\n```", "```cs\npublic static void FetchDirectoryContents(string ftpUrl, string username, string password)\n{\n    var request = (FtpWebRequest) WebRequest.Create(ftpUrl);\n    request.Method = WebRequestMethods.Ftp.ListDirectoryDetails;\n    request.Credentials = new NetworkCredential(username, password);\n    try\n    {\n        using (var response = (FtpWebResponse) request.GetResponse())\n        {\n            using (var streamReader = new StreamReader(response.GetResponseStream()))\n            {\n                var line = string.Empty;\n                while ((line = streamReader.ReadLine()) != null)                   Console.WriteLine(line);\n            }\n            $\"Directory List Complete, status {response.               StatusDescription}\".Dump(ConsoleColor.Cyan);\n        }\n    }\n    catch (WebException ex)\n    {\n        var status = ((FtpWebResponse) ex.Response).StatusDescription;\n        $\"Error: {status}\".Dump(ConsoleColor.Red);\n    }\n}\n```", "```cs\nusing System.Net.Mail;\n// Create the mail message\nMailMessage mail = new MailMessage();\nmail.From = new MailAddress(\"dennis@vroegop.org\");\nmail.To.Add(\"dearreader@thisbook.com\");\nmail.Subject = \"Hi there System Programmer!\";\nmail.Body =\n    \"This is a test email from the System Programming\n      book.\";\n```", "```cs\n// Set up the connection to the SMTP server\n// And no, this is NOT a valid SMTP server. Use your own :)\nSmtpClient client =\n    new SmtpClient(\"smtp.vroegop.org\");\nclient.Port = 587;\nclient.EnableSsl = true;\nclient.Credentials =\n    new System.Net.NetworkCredential(\n        \"dennis@vroegop.org\",\n        \"MySuperSecretPassword\");\n```", "```cs\n// Send the email!\nclient.Send(mail);\n```", "```cs\nvar multipartMail = new MailMessage();\nmultipartMail.From = new MailAddress(\"dennis@vroegop.org\");\nmultipartMail.To.Add(\"dearreader@thisbook.com\");\nmultipartMail.Subject = \"Hi there System Programmer!\";\nvar htmlBody = \"<html><body><h1>Hi there System Programmer!</h1></body></html>\";\nvar htmlView =\n    AlternateView.CreateAlternateViewFromString(\n        htmlBody,\n        null,\n        \"text/html\");\nvar plainView =\n    AlternateView.CreateAlternateViewFromString(\n        \"This is a test email from the System Programming book.\",\n        null,\n        \"text/plain\");\nmultipartMail.AlternateViews.Add(plainView);\nmultipartMail.AlternateViews.Add(htmlView);\n```", "```cs\npublic DateTime GetNetworkTime(string ntpServer = \"pool.ntp.org\")\n{\n    // NTP message size - 16 bytes (RFC 2030)\n    var ntpData = new byte[48];\n    // Setting the Leap Indicator, Version Number and Mode values\n    ntpData[0] = 0x23; // LI, Version, Mode\n    var addresses = Dns.GetHostEntry(ntpServer);\n    var ipEndPoint = new IPEndPoint(addresses.AddressList[0], 123);       // NTP uses port 123\n    using (var socket = new Socket(AddressFamily.InterNetwork,       SocketType.Dgram, ProtocolType.Udp))\n    {\n        socket.Connect(ipEndPoint);\n        socket.Send(ntpData);\n        socket.Receive(ntpData);\n        socket.Close();\n    }\n    return ConvertNtpTimeToDateTime(ntpData);\n}\n```", "```cs\nvar addresses = await Dns.GetHostEntryAsync(ntpServer);\n```", "```cs\npublic async Task<DateTime> GetNetworkTimeAsync(string ntpServer = \"pool.ntp.org\")\n{\n    // NTP message size - 16 bytes (RFC 2030)\n    var ntpData = new byte[48];\n    // Setting the Leap Indicator, Version Number, and Mode values\n    ntpData[0] = 0x23; // LI, Version, Mode\n    var addresses = await Dns.GetHostEntryAsync(ntpServer);\n    var ipEndPoint = new IPEndPoint(addresses.AddressList[0], 123);       // NTP uses port 123\n    using (var socket = new Socket(\n               AddressFamily.InterNetwork,\n               SocketType.Dgram,\n               ProtocolType.Udp))\n    {\n        await socket.ConnectAsync(ipEndPoint);\n        await socket.SendAsync(\n            new ArraySegment<byte>(ntpData),\n            SocketFlags.None);\n        await socket.ReceiveAsync(\n            new ArraySegment<byte>(ntpData),\n            SocketFlags.None);\n    }\n    return ConvertNtpTimeToDateTime(ntpData);\n}\n```", "```cs\nvar client = new TcpClient(\"my.server.com\", 123);\n```", "```cs\ninternal class TcpClientConnectionPool : IAsyncDisposable{}\n```", "```cs\npublic TcpClient? GetConnection(){}\npublic void ReturnConnection(TcpClient? client) {}\npublic async ValueTask DisposeAsync(){}\n```", "```cs\nprivate readonly ConcurrentBag<TcpClient?> _availableConnections = new();\nprivate readonly int _maxPoolSize = 10; // Example pool size\n```", "```cs\npublic TcpClient? GetConnection()\n{\n    if (_availableConnections.TryTake(out TcpClient? client))\n        return client;\n    if (_availableConnections.Count < _maxPoolSize)\n    {\n        // Create a new connection if the pool is not full\n        client = new TcpClient(\"my.server.com\", 443);\n    }\n    else\n    {\n        // Pool is full; wait for an available connection or throw an         // exception\n        // This strategy depends on your specific requirements\n        throw new Exception(\"Connection pool limit reached.\");\n    }\n    return client;\n}\n```", "```cs\npublic void ReturnConnection(TcpClient? client)\n{\n    // Check the state of the connection to ensure it's still valid\n    if (client is { Connected: true })\n    {\n        _availableConnections.Add(client);\n    }\n    else\n    {\n        // Optionally, handle the case where the connection is no         // longer valid\n        // e.g., reconnect or simply discard this connection\n    }\n}\n```", "```cs\npublic async ValueTask DisposeAsync()\n{\n    foreach (var client in _availableConnections)\n    {\n        if (client is { Connected: true })\n        {\n            await client.GetStream().DisposeAsync();\n        }\n        client?.Close();\n        client?.Dispose();\n    }\n}\n```", "```cs\nawait using var connectionPool = new TcpClientConnectionPool();\nTcpClient? myConnection = connectionPool.GetConnection();\ntry\n{\n    var myBuffer = \"Hello, World!\"u8.ToArray();\n    // Use the connection\n    await myConnection.Client.SendAsync(myBuffer);\n}\nfinally\n{\n    connectionPool.ReturnConnection(myConnection);\n}\n```", "```cs\ninternal static class HttpClientFactory\n{\n    private static HttpClient? _instance;\n    public static HttpClient? Instance\n    {\n        get\n        {\n            if (_instance == null) CreateInstance();\n            return _instance;\n        }\n    }\n    private static void CreateInstance()\n    {\n        var handler = new HttpClientHandler()\n        {\n            UseCookies = true,\n            CookieContainer = new CookieContainer(),\n            UseProxy = false\n        };\n        _instance = new HttpClient(handler);\n        _instance.DefaultRequestHeaders.Clear();\n        _instance.DefaultRequestHeaders.Accept.Add(new           MediaTypeWithQualityHeaderValue(\"application/json\"));\n        _instance.DefaultRequestHeaders.Add(\"User-Agent\",           \"SystemProgrammersApp\");\n        _instance.Timeout = TimeSpan.FromSeconds(5);\n    }\n}\n```", "```cs\nvar client = HttpClientFactory.Instance;\nvar response = await client.GetAsync(\n       \"https://jsonplaceholder.typicode.com/posts\");\nif (response.IsSuccessStatusCode)\n{\n    string content = await response.Content.ReadAsStringAsync();\n    $\"Received: {content}\".Dump(ConsoleColor.Yellow);\n}\n```", "```cs\nInstall-Package Polly\n```", "```cs\nprivate static AsyncRetryPolicy<HttpResponseMessage> _retryPolicy;\n```", "```cs\nprivate static void SetupRetryPolicy()\n{\n    _retryPolicy = Policy\n        .Handle<HttpRequestException>()\n        .OrResult<HttpResponseMessage>(r => !r.IsSuccessStatusCode)\n        .WaitAndRetryAsync(\n            3,\n            retryAttempt => TimeSpan.FromSeconds(Math.Pow(2,               retryAttempt)),\n            (outcome, timeSpan, retryCount, context) =>\n            {\n                $\"Request failed with\n                 {outcome.Result.StatusCode}.\".Dump(ConsoleColor.Red);\n                $\"Waiting {timeSpan} before next\n                 retry.\".Dump(ConsoleColor.Red);\n                $\"Retry attempt\n                 {retryCount}.\".Dump(ConsoleColor.Red);\n            });\n}\n```", "```cs\npublic static async Task<HttpResponseMessage> GetAsync(string url)\n{\n    return await _retryPolicy.ExecuteAsync(\n        () => _instance.GetAsync(url));\n}\n```", "```cs\nvar client = HttpClientFactory.Instance;\nvar response = await HttpClientFactory.GetAsync(\n       \"https://jsonplaceholder.typicode.com/posts2\");\nif (response.IsSuccessStatusCode)\n{\n    string content = await response.Content.ReadAsStringAsync();\n    $\"Received: {content}\".Dump(ConsoleColor.Yellow);\n}\n```", "```cs\nbool isHealthy =     System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable();\n```", "```cs\nforeach (NetworkInterface ni in NetworkInterface.GetAllNetworkInterfaces())\n{\n    $\"Name: {ni.Name}\".Dump(ConsoleColor.DarkYellow);\n    $\"Type:{ni.NetworkInterfaceType}\".Dump(ConsoleColor.DarkYellow);\n    $\"Status: {ni.OperationalStatus}\".Dump(ConsoleColor.DarkYellow);\n}\n```"]