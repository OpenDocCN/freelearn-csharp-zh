["```cs\npublic string CanPassengerBoard(Passenger passenger) {\n  bool isMilitary = passenger.IsMilitary;\n  bool needsHelp = passenger.NeedsHelp;\n  int group = passenger.BoardingGroup;\n```", "```cs\n if (Status != BoardingStatus.PlaneDeparted) {\n   if (isMilitary && Status == BoardingStatus.Boarding) {\n      return \"Board Now via Priority Lane\";\n   } else if (needsHelp&&Status==BoardingStatus.Boarding) {\n      return \"Board Now via Priority Lane\";\n   } else if (Status == BoardingStatus.Boarding) {\n      if (CurrentBoardingGroup >= group) {\n         if (_priorityLaneGroups.Contains(group)) {\n            return \"Board Now via Priority Lane\";\n         } else {\n           return \"Board Now\";\n         }\n      } else {\n         return \"Please Wait\";\n      }\n   } else {\n      return \"Boarding Not Started\";\n   }\n } else {\n   return \"Flight Departed\";\n }\n}\n```", "```cs\nif (Status != BoardingStatus.PlaneDeparted) {\n  // 17 lines of additional if statements and conditions\n} else {\n  return \"Flight Departed\";\n}\n```", "```cs\nStatus == BoardingStatus.PlaneDeparted\n```", "```cs\nif (Status == BoardingStatus.PlaneDeparted) {\n  return \"Flight Departed\";\n} else {\n  // 17 lines of additional if statements and conditions\n}\n```", "```cs\nif (Status == BoardingStatus.PlaneDeparted) {\n  return \"Flight Departed\";\n}\n```", "```cs\nif (isMilitary && Status == BoardingStatus.Boarding) {\n  return \"Board Now via Priority Lane\";\n} else if (needsHelp&&Status == BoardingStatus.Boarding) {\n  return \"Board Now via Priority Lane\";\n} else if (Status == BoardingStatus.Boarding) {\n  if (CurrentBoardingGroup >= group) {\n     if (_priorityLaneGroups.Contains(group)) {\n        return \"Board Now via Priority Lane\";\n     } else {\n        return \"Board Now\";\n     }\n  } else {\n     return \"Please Wait\";\n  }\n} else {\n  return \"Boarding Not Started\";\n}\n```", "```cs\nif (isMilitary && Status == BoardingStatus.Boarding) {\n  return \"Board Now via Priority Lane\";\n} else if (needsHelp&&Status == BoardingStatus.Boarding) {\n  return \"Board Now via Priority Lane\";\n} else if (Status == BoardingStatus.Boarding) {\n  // Code omitted for brevity\n} else {\n  return \"Boarding Not Started\";\n}\n```", "```cs\nbool isBoarding = Status == BoardingStatus.Boarding;\nif (isMilitary && isBoarding) {\n  return \"Board Now via Priority Lane\";\n} else if (needsHelp && isBoarding) {\n  return \"Board Now via Priority Lane\";\n} else if (isBoarding) {\n  // Code omitted for brevity\n} else {\n  return \"Boarding Not Started\";\n}\n```", "```cs\nif (Status == BoardingStatus.Boarding) {\n  if (isMilitary) {\n     return \"Board Now via Priority Lane\";\n  } else if (needsHelp) {\n     return \"Board Now via Priority Lane\";\n  } else {\n     // Code omitted for brevity\n  }\n} else {\n  return \"Boarding Not Started\";\n}\n```", "```cs\nif (isMilitary || needsHelp) {\n  return \"Board Now via Priority Lane\";\n}\n```", "```cs\nif (CurrentBoardingGroup >= group) {\n  if (_priorityLaneGroups.Contains(group)) {\n     return \"Board Now via Priority Lane\";\n  } else {\n     return \"Board Now\";\n  }\n} else {\n  return \"Please Wait\";\n}\n```", "```cs\nif (CurrentBoardingGroup < group) {\n  return \"Please Wait\";\n}\nif (_priorityLaneGroups.Contains(group)) {\n  return \"Board Now via Priority Lane\";\n} else {\n  return \"Board Now\";\n}\n```", "```cs\nif (Status == BoardingStatus.PlaneDeparted) {\n  return \"Flight Departed\";\n}\nif (Status == BoardingStatus.Boarding) {\n  if (isMilitary || needsHelp) {\n     return \"Board Now via Priority Lane\";\n  }\n  if (CurrentBoardingGroup < group) {\n     return \"Please Wait\";\n  }\n  if (_priorityLaneGroups.Contains(group)) {\n     return \"Board Now via Priority Lane\";\n  } else {\n     return \"Board Now\";\n  }\n} else {\n  return \"Boarding Not Started\";\n}\n```", "```cs\nint value;\nif (someCondition) {\n  value = 1;\n} else {\n  value = 2;\n}\n```", "```cs\nint value = someCondition ? 1 : 2;\n```", "```cs\n  if (CurrentBoardingGroup < group) {\n     return \"Please Wait\";\n  }\n  if (_priorityLaneGroups.Contains(group)) {\n     return \"Board Now via Priority Lane\";\n  } else {\n     return \"Board Now\";\n  }\n```", "```cs\nif (CurrentBoardingGroup < group) {\n  return \"Please Wait\";\n}\nreturn _priorityLaneGroups.Contains(group)\n        ? \"Board Now via Priority Lane\"\n        : \"Board Now\";\n```", "```cs\nreturn (CurrentBoardingGroup < group)\n  ? \"Please Wait\"\n  : _priorityLaneGroups.Contains(group)\n     ? \"Board Now via Priority Lane\"\n     : \"Board Now\";\n```", "```cs\nvar myVar = booleanExpression\n                    ? valueIfTrue\n                    : valueIfFalse;\n```", "```cs\npublic enum BoardingStatus {\n  NotStarted = 0,\n  Boarding = 1,\n  PlaneDeparted = 2,\n}\n```", "```cs\nif (Status == BoardingStatus.PlaneDeparted) {\n  return \"Flight Departed\";\n} else if (Status == BoardingStatus.Boarding) {\n  if (isMilitary || needsHelp) {\n     return \"Board Now via Priority Lane\";\n  }\n  if (CurrentBoardingGroup < group) {\n     return \"Please Wait\";\n  }\n  return _priorityLaneGroups.Contains(group)\n           ? \"Board Now via Priority Lane\"\n           : \"Board Now\";\n} else {\n  return \"Boarding Not Started\";\n}\n```", "```cs\nswitch (Status) {\n  case BoardingStatus.PlaneDeparted:\n     return \"Flight Departed\";\n  case BoardingStatus.Boarding:\n     if (isMilitary || needsHelp) {\n        return \"Board Now via Priority Lane\";\n     }\n     if (CurrentBoardingGroup < group) {\n        return \"Please Wait\";\n     }\n     return _priorityLaneGroups.Contains(group)\n              ? \"Board Now via Priority Lane\"\n              : \"Board Now\";\n  default:\n     return \"Boarding Not Started\";\n}\n```", "```cs\nswitch (Status) {\n  case BoardingStatus.PlaneDeparted:\n     return \"Flight Departed\";\n  case BoardingStatus.Boarding:\n     if (isMilitary || needsHelp) {\n        return \"Board Now via Priority Lane\";\n     }\n     if (CurrentBoardingGroup < group) {\n        return \"Please Wait\";\n     }\n     return _priorityLaneGroups.Contains(group)\n              ? \"Board Now via Priority Lane\"\n              : \"Board Now\";\n  case BoardingStatus.NotStarted:\n  default:\n     return \"Boarding Not Started\";\n}\n```", "```cs\ncase BoardingStatus.NotStarted:\n  return \"Boarding Not Started\";\ndefault:\n throw new NotSupportedException($\"Unsupported: {Status}\");\n```", "```cs\nreturn Status switch {\n  BoardingStatus.PlaneDeparted => \"Flight Departed\",\n  BoardingStatus.NotStarted => \"Boarding Not Started\",\n  BoardingStatus.Boarding => \"Board Now\",\n  _ => \"Some other status\",\n};\n```", "```cs\nreturn Status switch {\n  BoardingStatus.PlaneDeparted => \"Flight Departed\",\n  BoardingStatus.NotStarted => \"Boarding Not Started\",\n  BoardingStatus.Boarding when isMilitary || needsHelp\n     => \"Board Now via Priority Lane\",\n  BoardingStatus.Boarding when CurrentBoardingGroup < group\n     => \"Please Wait\",\n  BoardingStatus.Boarding when\n   _priorityLaneGroups.Contains(group)\n     => \"Board Now via Priority Lane\",\n  BoardingStatus.Boarding => \"Board Now\",\n  _ => \"Some other status\",\n};\n```", "```cs\nvar p = Build(first, last);\n```", "```cs\nPassenger p = Build(first, last);\n```", "```cs\nprivate Passenger Build(string firstName, string lastName){\n     Passenger passenger = new Passenger();\n     passenger.FirstName = firstName;\n     passenger.LastName = lastName;\n     return passenger;\n}\n```", "```cs\nPassenger passenger = new();\n```", "```cs\nprivate Passenger Build(string firstName, string lastName){\n     Passenger passenger = new();\n     passenger.FirstName = firstName;\npassenger.LastName = lastName;\n     return passenger;\n}\n```", "```cs\nprivate Passenger Build(string firstName, string lastName){\n     Passenger passenger = new() {\n           FirstName = firstName,\nLastName = lastName\n     };\n     return passenger;\n}\n```", "```cs\npublic void DisplayBoardingStatus(\n  List<Passenger> passengers, bool? hasBoarded = null) {\n```", "```cs\n  List<Passenger> filteredPassengers = new();\n  for (int i = 0; i < passengers.Count; i++) {\n     Passenger p = passengers[i];\n     if (!hasBoarded.HasValue || p.HasBoarded==hasBoarded) {\n        filteredPassengers.Add(p);\n     }\n  }\n```", "```cs\n  DisplayBoardingHeader();\n  foreach (Passenger passenger in filteredPassengers) {\n     string statusMessage = passenger.HasBoarded\n        ? \"Onboard\"\n        : CanPassengerBoard(passenger);\n     Console.WriteLine($\"{passenger.FullName,-23} Group         {passenger.BoardingGroup}: {statusMessage}\");\n  }\n}\n```", "```cs\nList<Passenger> filteredPassengers = new();\nfor (int i = 0; i < passengers.Count; i++) {\n  Passenger p = passengers[i];\n  if (!hasBoarded.HasValue || p.HasBoarded == hasBoarded) {\n     filteredPassengers.Add(p);\n  }\n}\n```", "```cs\nList<Passenger> filteredPassengers = new();\nforeach (Passenger p in passengers) {\n  if (!hasBoarded.HasValue || p.HasBoarded == hasBoarded) {\n     filteredPassengers.Add(p);\n  }\n}\n```", "```cs\nList<Passenger> filteredPassengers = new();\nfilteredPassengers.AddRange(passengers.Where(p => !hasBoarded.HasValue || p.HasBoarded == hasBoarded));\n```", "```cs\nList<Passenger> filteredPassengers =\n  new(passengers.Where(p => !hasBoarded.HasValue ||\n      p.HasBoarded == hasBoarded));\n```", "```cs\npassengers = passengers.Where(p=>!hasBoarded.HasValue ||\n      p.HasBoarded==hasBoarded).ToList();\n```", "```cs\nforeach (Passenger passenger in passengers) {\n  string statusMessage = passenger.HasBoarded\n     ? \"Onboard\"\n     : CanPassengerBoard(passenger);\n  Console.WriteLine($\"{passenger.FullName,-23} Group \n     {passenger.BoardingGroup}: {statusMessage}\");\n}\n```", "```cs\nPassengerGenerator generator = new();\nList<Passenger> people = generator.GeneratePassengers(50);\nPassenger me =\n  people.FirstOrDefault(p => p.FullName == \"Matt Eland\");\nConsole.WriteLine($\"Matt is in group {me.BoardingGroup}\");\n```", "```cs\nbool anyBoarded =\n  people.Where(p => p.HasBoarded).Any();\nint numBoarded =\n  people.Where(p => p.HasBoarded).Count();\nPassenger firstBoarded =\n  people.Where(p => p.HasBoarded).First();\n```", "```cs\nbool anyBoarded = people.Any(p => p.HasBoarded);\nint numBoarded = people.Count(p => p.HasBoarded);\nPassenger firstBoarded = people.First(p => p.HasBoarded);\n```", "```cs\nList<string> names = new();\nforeach (Passenger p in people) {\n  if (!p.HasBoarded) {\n     names.Add($\"{p.FullName}-{p.BoardingGroup}\");\n  }\n}\n```", "```cs\nList<string> names =\n        people.Where(p => !p.HasBoarded)\n                 .Select(p => $\"{p.FullName}-{p.BoardingGroup}\")\n                 .ToList();\n```"]