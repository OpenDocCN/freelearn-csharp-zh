- en: To iOS with Xamarin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio for Mac
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello iOS – creating a Xamarin iOS app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the .NET Standard 2.0 library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Putting things together and testing the application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter08](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter08)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/fG1ErJ](https://goo.gl/fG1ErJ)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin is a development platform that allows you to build native applications
    for iOS, Android, and Windows. The most amazing thing about Xamarin is that you
    can use your existing C# skills to develop these applications. At the beginning,
    Xamarin was called Xamarin Studio and was used for building applications in both
    macOS and Windows. Windows users had the extra privilege of using Visual Studio.
    After its acquisition by Microsoft, Xamarin Studio became Visual Studio for Mac.
    In this chapter, we will be using Visual Studio for Mac to build our applications,
    throughout the recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Visual Studio for Mac
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at how to get Visual Studio for Mac and install
    it. We will also be looking at setting up a few other things.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have a Mac to complete this recipe. Currently, I am using macOS
    High Sierra version 10.13.3\. Also make sure you have already installed the latest
    version of XCode. XCode is required, alongside Visual Studio, for Mac to build
    iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's open up your favorite browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type [https://www.xamarin.com/download](https://www.xamarin.com/download) in
    the address bar and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a screen similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/14a6727e-719b-4e77-8f26-db4c38ef8f09.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, fill in your details and press the Download VS for Mac Communitybutton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will download a file to the `Downloads` directory by default, named  `VisualStudioForMacInstaller__215259590.1517557727.dmg`
    or something similar (the end numbers might change when you download it.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on that file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see a window similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b848f119-fae7-45d4-aa6e-15df9607ae24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the down arrow. In the next screen, choose the components to
    be installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f10758c4-2865-4038-8080-3b51658ac601.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Install button to install all the components. Make sure you have selected
    Android and iOS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After a successful installation, you should see this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/806dfbab-e7ba-4498-b11e-d29730d476fb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, you can click Done to exit and start Visual Studio for Mac to launch the
    IDE:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7d6ac192-bd59-465e-9f99-0d01c7beca64.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio for Mac
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These are simple steps for installing Visual Studio for Mac. In step 8, you
    should see Install instead of Update. This screen appeared because I already have
    a version of Visual Studio for Mac installed.
  prefs: []
  type: TYPE_NORMAL
- en: Hello iOS – Creating a Xamarin iOS app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating our first iOS application. This will be
    a `Hello World` type of application. Later on, we will change this application
    to use a .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe and installed Visual Studio
    for Mac. Also, make sure you have XCode installed alongside Visual Studio for
    Mac.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Finder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Applications in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the Visual Studio icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the New Project button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Choose a template for your project dialog box, scroll down till you reach
    the other section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Miscellaneous and, under Generic, select Blank Solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**![](img/a78f2955-3fb0-4626-9a15-e6c05a57b3a5.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: Now, click the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Solution Name: textbox, type `Chapter8.Xamarin`. Also make sure you
    have selected a proper location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dd1fadee-247e-46c8-bafd-40b18bbcdc11.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e4a4df0-0a42-4902-b963-9b16fff192f9.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, *Ctrl* + click on the Chapter8.Xamarin label and select Add  | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select App under the iOS section in the left-hand pane and select Single View
    App in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure C# is selected as the programming language:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7902ab69-3413-47d6-bc6f-bbebcb8ed5dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the Next button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The New Project dialog box will be displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `Chapter8.Xamarin.iOSApp` in the App Name: textbox, `com.chapter8` in
    the Organization Identifier: textbox, and uncheck iPad from the devices. Leave
    the Target: OS as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/846187d5-f89a-4900-a60e-2fc279bca039.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave everything as it is and click Create:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d2f89e6-fafc-4c71-bed9-9e5ec24fe000.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a3d87b1b-ba63-478d-8234-64268c4298d2.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution Explorer
  prefs: []
  type: TYPE_NORMAL
- en: Now, press the *command* + *return* to debug the application or press the Play
    button on top of the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you should see the iOS emulator kicking in, which displays the first screen
    of the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fa0a3cf1-187e-4a83-95f8-814cbebff80e.png)'
  prefs: []
  type: TYPE_IMG
- en: Congratulations! You have tested your first iOS application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, stop the debugger by pressing *shift* + *command* + *return*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 3, we opened Visual Studio for Mac and, in steps 6 to 9, we created
    a blank solution. We assigned a proper name to the solution as well. This blank
    solution will act as the base throughout this chapter. In steps 11 to 18, we added
    an iOS Single View app to the solution. In step 16, we added an Organization Identifier,
    which is a unique identifier for recognizing your app when you deploy to the app
    store. A single view app is a starter template to help developers build for iOS
    and has one custom `ViewController` to start with. We gave it a proper name too.
    At the end, in steps 20 to 23, we tested the default template generated by Visual
    Studio for Mac.
  prefs: []
  type: TYPE_NORMAL
- en: We will come back to this application in a later recipe and add a few controls
    and some code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the .NET Standard 2.0 library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a .NET Standard 2.0 library using Visual
    Studio for Mac. We will be using the same solution from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe that added an iOS project.
    If so, let's get started with adding the library and writing some code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Finder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Applications in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on the Visual Studio icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on Open, locate the `Chapter8.Xamarin` solution, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19ceee1b-11ea-491d-82fe-deef98f4065f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, *control (^)* + click on the `Chapter8.Xamarin` label and select Add |
    New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, scroll down the left-hand pane till you see the Multi
    Platform section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on Library and select .NET Standard Library under General in the right-hand
    pane. Also make sure C# is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad785431-3e8c-48a9-907c-14fb3dd26ede.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Target Framework: as .NET Standard 2.0 and click Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/baf09ab9-1b2e-42f0-b6ae-9e2f442746f6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Project Name: textbox, type `Chapter8.Xamarin.iOSLib` as the name and
    leave the rest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48bd28d9-b5d8-4753-9dee-3502097e6a8a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Create.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3f3a1b99-45b9-4af9-8133-6492e7c0b7d5.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the `Class1.cs` label and press *command* + *R* to rename.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it `HelloLib.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure you change the class name as well from `Class1` to `HelloLib`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, inside the `HelloLib` class, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Click Build | Build All to check that all syntax is correct.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 4, we opened the solution we created in the previous recipe. In
    steps 6 to 12, we added a .NET Standard 2.0 library to the solution. Now, the
    solution has two projects, an iOS project and a .NET Standard 2.0 library project.
    In steps 14 to 16, we renamed the class created by Visual Studio. We also renamed
    the actual class name to match the file name.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we added a public method that takes a `string` parameter and returns
    a string as a welcome message. Finally, we performed a quick build to check for
    the correct syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Putting things together and testing the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be adding some controls to the iOS application and using
    the .NET Standard 2.0 library created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous two recipes. They are required in
    order to continue. If you have already completed them, let's perform a quick build
    and start.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Finder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Applications in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the Visual Studio icon.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Open, locate the `Chapter8.Xamarin` solution, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e93c5d9-975e-4daf-8a02-c9d419caee84.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, expand the `Chapter8.Xamarin.iOSApp` project node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `Main.storyboard` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open the storyboard tab for your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the default layout of the iOS application as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/550a0a06-9990-46db-8536-d1b3cbdda88a.png)'
  prefs: []
  type: TYPE_IMG
- en: Default layout of the iOS application
  prefs: []
  type: TYPE_NORMAL
- en: Now, select the Toolbox window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click inside the `search` textbox and type `Button`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, drag a Button control to the main white area of the canvas, in the middle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the button. In the Properties window, type `Say Hello` under the Title
    label and type `HelloButton` in the Name property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your canvas should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dda17003-4a1c-4c10-8cf5-d19cf1f78f45.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the Solution Explorer, *control (^)* + click on the References label
    and select Edit References.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Edit References dialog box, click on the Projects tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check `Chapter8.Xamarin.iOSLib` in the list and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/985fa586-af0d-4e88-9397-bd7f5eba14a0.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, double-click on the `VeiwController.cs` file to open its code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up till you reach the `using` directives and add the following `using`
    directive to access the library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, scroll down till you reach the `ViewDidLoad()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code next to the `base.ViewDidLoad()` line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's press *command* + *return* to debug the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52649291-6cf4-4086-864c-c20a000cd5bc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click on the Say Hello button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4af51ea2-746b-4464-8710-19e027003a9d.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, click OK and stop debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 6, we opened an existing project solution. In steps 10 to 13,
    we added a simple button control to the canvas. After that, we changed the Title
    and Name properties of the button. In step 17, we added the reference to the library
    from the iOS project. Again, in step 19, we added a reference to the .NET Standard
    library from the code level.
  prefs: []
  type: TYPE_NORMAL
- en: In step 21, we added code to trigger the button touch up event. This event triggers
    when you touch and move up your finger on an actual device, but in the emulator
    it triggers when you click the button. We added the code inside the `ViewDidLoad()`
    method. This method triggers after the View is loaded. In the first two lines
    of the code, we created an instance of the `HelloLib` class from the library.
    Then, we executed the `SayHello` method and saved the return value in a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we created an alert box to display the Calcutta message with an OK button.
    Finally, in steps 23 and 24, we tested the iOS application we had just built.
  prefs: []
  type: TYPE_NORMAL
