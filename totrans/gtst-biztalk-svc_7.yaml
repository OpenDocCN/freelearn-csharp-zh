- en: Chapter 7. Tracking and Troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last few chapters, we looked at the artifacts used in building a BizTalk
    Services solution. By now, you must be wondering how to track the message flow
    or, still better, how to troubleshoot if things didn't go as expected. In this
    chapter, we will look at the tools and common patterns to troubleshoot issues
    in BizTalk Services.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, we will focus on troubleshooting the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Sources and destinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Schemas and transforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EAI bridges with custom code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: B2B agreements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messages and errors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, let's quickly summarize the basics. Bridges are message channels that
    don't persist messages. This means any failure in the message processing will
    be returned as an HTTP error to the caller in the case of EAI bridges, and the
    message will be pushed to the suspend endpoint in the case of B2B bridges. The
    suspend endpoint is important in the case of B2B as the error in configuration
    or message structure cannot be sent back to the business partner, but is meant
    for consumption by the IT operator. This means in both EAI and B2B scenarios,
    all retries and resubmissions of messages post failures have to be done outside
    the bridge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Errors can occur in any of the following three scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errors during deployment time**: This scenario includes all the errors associated
    with provisioning of the BizTalk Service deployment. In most cases, the error
    is self-explanatory and is shown in the Windows Azure Management Portal or sent
    back via the RDFE API. It is important to note that a BizTalk Service deployment
    name is unique. Custom domain merely serves to wrap a DNS name around the BizTalk
    Service deployment URL. The certificate of the domain needs to be uploaded in
    the Trusted Root Certification Authorities certificate store on the machine accessing
    the deployment. The storage and the Azure SQL Database used for tracking and archiving
    cannot be reused or deleted while the deployment is active.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Errors during design time**: This scenario includes all the errors during
    adding/updating/deleting a bridge, deploying a VS project, or adding/updating/deleting
    an agreement from the BizTalk Services Portal. These errors surface in the **Output**
    window or the **Error List** window in Visual Studio for the EAI scenarios and
    in the status bar of the BizTalk Services Portal for the B2B scenarios, respectively.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Errors during runtime**: This scenario includes all the errors during the
    actual flow of messages between two applications or partners. This scenario can
    be further broken down into four subcategories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors when the message is sent to an endpoint external to BizTalk Services
    is faulty.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors when the message is expected to be received from an endpoint external
    to BizTalk Services is faulty.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors when the message is malformed and does not conform to the schemas configured
    in the bridge.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors when components such as the bridge, transform, source, or hybrid destination
    in BizTalk Services do not function as expected. This usually classifies a bug
    in the product.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We will focus on runtime errors and the first three subcategories in particular.
    If tracking is enabled, tracking records are logged in the Windows Azure SQL Database.
    Tracking enables us to store interesting properties related to the message—from
    the header, body, or through lookup from another data source. Archiving persists
    the message data in a raw form in the case of EDI scenarios. For the EAI scenarios,
    archiving is possible by adding custom code as outlined in [Chapter 4](ch04.html
    "Chapter 4. Enterprise Application Integration"), *Enterprise Application Integration*.
    Data written into the Tracking and Archiving stores is carried out on a *best
    effort* basis, that is, if there is an error during the write operation to these
    stores, tracking and archiving will be skipped and message processing will continue
    in the bridge. The exception to this case is when the archiving of the AS2 messages
    is enabled with the **Enable NRR** option turned on in the AS2 agreement **General
    Settings** page. In these cases, the message processing fails if tracking/archiving
    cannot be completed successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Data for troubleshooting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll explore the different kinds of data available to troubleshoot
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every message that flows through the bridge is associated with a promoted property
    known as the **Request ID**, which is a GUID value on each incoming message. If
    the message is split into submessages, each submessage gets its own tracking ID,
    which is also a GUID. If the Request ID is the same as the tracking ID, the message
    flows without debatching. The bridge endpoint URI and timestamp should point to
    the bridge and timing of the message. Tracking can be enabled from the bridge
    properties in VS and from an agreement's **General Settings** page in the BizTalk
    Services Portal.
  prefs: []
  type: TYPE_NORMAL
- en: 'The BizTalk Services Portal exposes the tracking data in a user-friendly way.
    There are three tabs that reflect the messages processed in the deployment. They
    are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**MESSAGES**: This tab contains all the messages from sources, bridges, and
    agreements with errors or information-type entries. Each tracking entry details
    the message''s incoming URL, its Request ID and tracking ID, whether the processing
    was an error or a success, the stage where the track record was emitted, and the
    date and time when it occurred. Use this view for tracking all the EAI and B2B
    messages passing through bridges and agreements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PROTOCOL**: This tab lists the track records for B2B interactions. The view
    is also categorized into the EDI and AS2 protocol levels. EDI calls out a message
    status for X12 and EDIFACT records with sender, receiver, message type (such as
    PO), acknowledgments such as technical acknowledgment and functional acknowledgment,
    Request ID, ID of the interchanged envelope to correlate with the track records
    of batching, and the date and time when this record was written. The AS2 records
    contain similar information, except that the acknowledgment reflects the **Message
    Disposition Notification** (**MDN**) status. Use this view to track all the B2B
    protocol stage-specific tracking entries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**BATCHING**: Finally, the **BATCHING** tab tracks the list of ongoing and
    completed batches along with the individual message information. The view tracks
    the batch name, the agreement for which the batch is configured, and the sender
    and receiver of the batching transaction. The entry also shows the size, count,
    and time when the transaction was received using which the customer can relate
    to the expected release criteria of the batch. Use this view to track all the
    messages in a batch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of the tabs also has a **Search** option, which can help filter the result
    by date range, message type, status, sender, or receiver.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Without searching for any option, the search option displays all the track records
    sorted by the latest date. This can also be used to refresh the page during testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Tracking** view is shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking](img/7401EN_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tracking view in the BizTalk Services Portal
  prefs: []
  type: TYPE_NORMAL
- en: 'In some cases, it is required that you access the data directly from the Azure
    SQL Database tables. A common use case might be to build a notification system
    based on tracking events. The Azure SQL Database tracking tables used in tracking
    are as follows (note that none of these tables are supported or documented from
    Microsoft for issuing direct T-SQL queries):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Table | Data |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| [dbo].[PipelineTrackRecords] | Bridges tracking records |'
  prefs: []
  type: TYPE_TB
- en: '| [dbo].[SourceTrackRecords] | Sources tracking records |'
  prefs: []
  type: TYPE_TB
- en: '| [dbo].[EndpointAddressMap] | Stores the URL of a bridge or a source and maps
    the address to the Pipeline and Source track records using a foreign key reference,
    EndpointAddressID |'
  prefs: []
  type: TYPE_TB
- en: '| [dbo].[TrackRecordMessageProperties] | Name and value pair of promoted properties
    of the message |'
  prefs: []
  type: TYPE_TB
- en: '| [dbo].AS2*, [dbo].Batch*, [dbo].Functional*, [dbo].Interchange*, [dbo].TransactionSet*
    records | EDI tracking records for AS2, MDN, batching, Interchange, Group, Transaction
    set records, and functional or technical acknowledgments |'
  prefs: []
  type: TYPE_TB
- en: Traces and logfiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Besides tracking, trace statements are also recorded in the Azure tables as
    a message flows through a bridge. Traces are useful to look for exceptions when
    the time period of the message failure is known. The information from tracing
    can supplement the tracking information from the BizTalk Services Portal. These
    traces are similar to the **Event Trace Log** (**ETL**) traces, except that the
    BizTalk Services traces are text based and stored in the Azure tables.
  prefs: []
  type: TYPE_NORMAL
- en: For each deployment, traces are logged on the Azure table named **WADLogsTable**
    created in the storage account specified while provisioning the BizTalk Services
    deployment. You can use a tool such as **Azure Storage Explorer** from [azurestorageexplorer.codeplex.com](http://azurestorageexplorer.codeplex.com)
    or one of the commercial tools such as CloudBerry to connect to that Azure storage
    account and view the data in the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following three fields in WADLogsTable are interesting:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Timestamp**: The date and time when the traces were logged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message**: Information, exception, or error message with a component or activity
    information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Level**: Trace level varying among Fatal (1), Errors (2), Warnings (3), and
    Informational (4). The errors in level 2 are accompanied by the exception stack
    trace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Traces are extremely useful when troubleshooting custom code configured with
    bridges. As there can be hundreds of entries in a few minutes, you can filter
    the data in the table using one of the following commands in the **Azure Storage
    Explorer** tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Timestamp gt datetime''2013-12-07T16:00:00''`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Level = 2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the spacing as well as the casing is important in filtering the data.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the BizTalk Adapter Service, logfiles can be written by adding
    log interceptors in the service `.config` file. To troubleshoot the hybrid connectivity
    runtime, edit `web.config` in `C:\Program Files\Microsoft BizTalk Adapter Service\BAServiceRuntime`.
    The exact entries that must be added to generate logfiles are outlined in the
    *Troubleshooting hybrid connectivity* section.
  prefs: []
  type: TYPE_NORMAL
- en: Performance counters
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can use performance counters to assess the health of the system. Performance
    counters pertaining to the BizTalk Services deployment are stored in the storage
    account of the deployment and can be viewed from the Azure Management Portal''s
    **MONITOR** tab as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Performance counters](img/7401EN_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Performance counters in monitoring view of Azure Management Portal
  prefs: []
  type: TYPE_NORMAL
- en: 'The following performance counters are available for each deployment:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Performance counter name | Unit | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **CPU Usage** | % | Average CPU usage of all instances servicing the runtime
    messages |'
  prefs: []
  type: TYPE_TB
- en: '| **Failures at Source** | count | Count of messages that failed in the sources
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Failures in Process** | count | Count of messages that failed during pipeline
    processing |'
  prefs: []
  type: TYPE_TB
- en: '| **Messages in Process** | count | Count of messages currently in process
    by the deployment |'
  prefs: []
  type: TYPE_TB
- en: '| **Messages Processed** | count | Count of messages successfully processed
    by the deployment |'
  prefs: []
  type: TYPE_TB
- en: '| **Messages Received** | count | Count of messages received by the pipelines
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Messages Sent** | count | Count of messages sent or routed from each pipeline
    |'
  prefs: []
  type: TYPE_TB
- en: '| **Processing Latency** | milliseconds | Average time taken to process a message
    from the validate stage to route for one-way bridges |'
  prefs: []
  type: TYPE_TB
- en: '| **Round Trip Latency** | milliseconds | Average time taken to process a message
    round trip in two-way bridges |'
  prefs: []
  type: TYPE_TB
- en: These counters can be useful to make configuration changes to the deployment.
    For example, if **Messages Received** is trending higher and this correlates with
    an increase in **Failures in Process** and a corresponding increase in **Processing
    Latency**, then the system may not be scaling up with the incoming rate. The IT
    administrator could plan scaling the deployment and look for changes in the performance
    counters.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting sources and destinations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sources can be one of the following: HTTP, FTP(s), SFTP, or Service Bus Queue
    and Topic. If the source endpoint is HTTP, it is common to see HTTP error codes
    on the client side sending the message, as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Error scenario | HTTP error code | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Message to a nonexistent endpoint or wrong URL | 400, 500 | Bad Request,
    Internal Server Error, or Namespace cannot be resolved |'
  prefs: []
  type: TYPE_TB
- en: '| Endpoint with malformed message headers | 401 | Authentication failed or
    Unauthorized request |'
  prefs: []
  type: TYPE_TB
- en: '| Endpoint with malformed message body | 500 | Internal Server Error; see tracking
    or trace entries for more information |'
  prefs: []
  type: TYPE_TB
- en: '| Destination endpoint down | 500 | Internal Server Error |'
  prefs: []
  type: TYPE_TB
- en: '| Destination with incorrect credentials | 500 | Internal Server Error |'
  prefs: []
  type: TYPE_TB
- en: '| Bridge destination is configured for HTTP relay but receiver is listening
    on HTTPS | 500 | Internal Server Error |'
  prefs: []
  type: TYPE_TB
- en: In the case of FTP as source, if there are errors during the processing or at
    the destination, the message will not be deleted from the source. The polling
    interval would increase and the system would autoretry the submission of the message.
  prefs: []
  type: TYPE_NORMAL
- en: The following screenshots show the increase in the **NewPollInterval** field
    as seen in the **PORTAL TRACKING** view for the source name, **Poll Error**. Note
    that the poll interval increases by 1.5 times the current poll value for each
    new iteration. The next set of poll intervals would be around 227, 341, 512, and
    768 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting sources and destinations](img/7401EN_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tracking entries indicating exponential poll over an FTP source
  prefs: []
  type: TYPE_NORMAL
- en: 'Some error scenarios while using FTP are as shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Error scenario | HTTP error code | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Wrong FTP URL or incorrect username or password | 503 | Failed to connect
    to FTP server and/or not logged in |'
  prefs: []
  type: TYPE_TB
- en: '| Redeploy FTP while the existing service is active | 400 | One or more resources
    are in the started state; you can stop the source using `PSCmdlet` |'
  prefs: []
  type: TYPE_TB
- en: 'You can fix the issue based on the error message and use `PSCmdlet` `Stop-AzureBizTalkBridgeSource`
    and `Start-AzureBizTalkBridgeSource` to stop and start the source respectively.
    The following screenshot shows the execution of `Get-AzureBizTalkBridgeSource`
    to check the status of a source endpoint:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting sources and destinations](img/7401EN_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting source status using PSCmdlet
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting schemas and transforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Issues in schemas surface when a message fails validation against a schema.
    If the validation fails, say due to extra tags, then a tracking record is added
    for the XML validation stage, thus reporting an error.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the tracking entry indicates a schema validation error, the easiest way
    to test the schema is to generate a test message. For EAI/B2B schemas, Visual
    Studio provides a handy utility to generate an instance of the schema. After the
    schema is added to the project, right-click on the schema and choose **Generate
    Instance** of the file. From the **Properties** window of the schema, you can
    generate an instance in native (for flat file) or the XML format, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting schemas and transforms](img/7401EN_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Generating an instance of a schema from Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Similar to schemas, transforms can generate erroneous output due to incorrect
    mapping, or one of the functoids can fault against a particular input. Transforms
    also support testing with sample data in Visual Studio. Maps can be tested by
    right-clicking on the map and choosing **Test Map**, as shown in the following
    screenshot. Any errors during testing are indicated as transform runtime exceptions
    in the VS **Error List** window. If there are no errors, the output from the transform
    is indicated in the **Output** tab. If there are errors after the map is deployed
    during runtime, error tracking records with `xmlTransform` can be seen in the
    **Tracking** view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Troubleshooting schemas and transforms](img/7401EN_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Test Map functionality from Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting bridges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we saw how to troubleshoot two stages of bridges, namely the schema
    validation stage and the transform stage. While using custom code inside a bridge,
    things can get difficult if the message processing runs into errors. It is recommended
    that you use `IMessageInspectorContext.Tracer` to log the `System.Diagnostics.TraceEventType`
    error as part of the custom code. These statements would be surfaced in the WADLogsTable
    mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting agreements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Agreements can either be a transport-level agreement, such as AS2, or a protocol-level
    agreement, such as X12 or EDIFACT. In B2B scenarios with X12 and EDIFACT agreements,
    it can happen that the transport status returned to the client sending the message
    is an HTTP 200 OK, but the message landed in the suspend endpoint. This can happen
    if there are protocol-level errors. Such errors would be indicated by the acknowledgment
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some sample scenarios are shown in the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Configuration | Scenario | Outcome |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| AS2 standalone receive with sync MDN | Incorrect configuration, for example,
    certificate incorrect | HTTP 400 with error MDN |'
  prefs: []
  type: TYPE_TB
- en: '| AS2 standalone receive with async MDN | Incorrect configuration, for example,
    certificate incorrect | HTTP 200 OK for async and MDN with error |'
  prefs: []
  type: TYPE_TB
- en: '| AS2 standalone send | Incorrect configuration, for example, certificate incorrect
    | HTTP 500, AS2 Message Sender Activity error |'
  prefs: []
  type: TYPE_TB
- en: '| X12 or EDIFACT standalone receive | Identities mismatch in the incoming message
    | HTTP 200 for a client may indicate success, but see the **Tracking** view if
    the message has ended up in the suspend destination with the error, NACK, to be
    sent back if configured |'
  prefs: []
  type: TYPE_TB
- en: '| X12 or EDIFACT standalone send | Schema not found | HTTP 200 for a client
    may indicate success, but see the **Tracking** view if the message has ended up
    in the suspend destination with the error, NACK, to be sent back if configured
    |'
  prefs: []
  type: TYPE_TB
- en: Troubleshooting hybrid connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, we wrap up our discussion by looking at troubleshooting hybrid connectivity.
    Primarily, this involves looking at the BizTalk Adapter Service, which was introduced
    in [Chapter 4](ch04.html "Chapter 4. Enterprise Application Integration"), *Enterprise
    Application Integration*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To troubleshoot the hybrid connectivity runtime, add the following snippet
    to `web.config` in `C:\Program Files\Microsoft BizTalk Adapter Service\BAServiceRuntime`
    with administrator access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The listener configures the traces to be output to an XML file in the user's
    folder specified in the configuration. Post messaging, we can look at the trace
    log file to check for errors with the Line of Business access or service configuration
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have looked at the ways to collect data to troubleshoot
    BizTalk Services. This helps in maintaining the health of the service. We also
    looked at the error scenarios of the key components in BizTalk Services and ways
    to troubleshoot them.
  prefs: []
  type: TYPE_NORMAL
- en: Troubleshooting is as much an art as it is a science and usually involves a
    methodical approach to identify and fix a problem. In the next and final chapter,
    we will look at migration and also capabilities that could be added in the Integration
    platform.
  prefs: []
  type: TYPE_NORMAL
