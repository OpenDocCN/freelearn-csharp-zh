["```cs\n192.168.15.11, -, 01/01/22, 7:55:20, W3SVC2, -, 182.15.22.90, 4502, 163, 3223, 200, 0, GET, /Index, -,\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddRazorPages();\nvar app = builder.Build();\nif (!app.Environment.IsDevelopment())\n{\n    app.UseExceptionHandler(\"/Error\");\n    app.UseHsts();\n}\napp.UseHttpsRedirection();\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\napp.MapRazorPages();\napp.Run();\n```", "```cs\n<input type=\"text\"\n       placeholder=\"Enter a Columbus Phone Number\"\n       title=\"Enter either a 740 or 614 area code using this format: (740) 999-9999\"\n       pattern=\"^\\(?(740|614)\\)?(\\s+)?[0-9]{3}-?[0-9]{4}$\"\n       required />\n```", "```cs\n    public async Task<IActionResult> OnGet(\n        [FromServices] HtmlEncoder htmlEncoder,\n        string q = \"\")\n    {\n        PageResults = await PerformTheSearch(htmlEncoder.Encode(q));\n        return Page();\n    }\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.WebHost.UseKestrel(options => options.AddServerHeader = false);\n```", "```cs\napp.Use(async (context, next) =>\n{\n    context.Response.Headers.Remove(\"Server\");\n    context.Response.Headers.Remove(\"X-Powered-By\");\n    await next();\n});\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n  <system.webServer>\n    <httpProtocol>\n      <customHeaders>\n        <remove name=\"X-Powered-By\" />\n```", "```cs\ncontext.Response.Headers.Remove(\"X-Aspnet-version\");\ncontext.Response.Headers.Remove(\"X-AspnetMvc-version\");\n```", "```cs\ncontext.Response.Headers.Add(\"X-Content-Type-Options\", new\n   StringValues(\"nosniff\"));\n```", "```cs\ncontext.Response.Headers.Add(\"X-Frame-Options\", new\n    StringValues(\"DENY\"));\n```", "```cs\npublic class RemoveInsecureHeadersMiddleware\n{\n    private readonly RequestDelegate _next;\n    public RemoveInsecureHeadersMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n    public async Task Invoke(HttpContext httpContext)\n    {\n        httpContext.Response.OnStarting((state) =>\n        {\n            httpContext.Response.Headers.Remove(\"Server\");\n            httpContext.Response.Headers.Remove(\"X-Powered-By\");\n            httpContext.Response.Headers.Remove(\"X-Aspnet-version\");\n            httpContext.Response.Headers.Remove(\"X-AspnetMvc-                version\");\n            httpContext.Response.Headers.Add(\"X-Content-Type-Options\",\n                new StringValues(\"nosniff\"));\n            httpContext.Response.Headers.Add(\"X-Frame-Options\",\n                new StringValues(\"DENY\"));\n            return Task.CompletedTask;\n        }, null!);\n        await _next(httpContext);\n    }\n}\n```", "```cs\npublic static class RemoveInsecureHeadersMiddlewareExtensions\n{\n    public static IApplicationBuilder RemoveInsecureHeaders(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<RemoveInsecureHeadersMiddleware>();\n    }\n}\n```", "```cs\napp.RemoveInsecureHeaders();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services\n    .AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddMicrosoftIdentityWebApi(builder.Configuration.GetSection(“AzureAd”));\nbuilder.Services.AddAuthorization(); \n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n\n// Add services to the container.\nbuilder.Services\n    .AddAuthentication()\n    .AddBearerToken();\nbuilder.Services.AddAuthorization();\n```", "```cs\nservices.AddAntiforgery();\n```", "```cs\n@Html.AntiForgeryToken();\n```", "```cs\nservices.AddRazorPages(options =>\n{\n    options.Conventions.AuthorizeAreaFolder(\"Admin\", \"/Areas/Admin\");\n    options.Conventions.AllowAnonymousToFolder(\"/\");\n});\n```", "```cs\n[Authorize]\npublic class MySecretController : Controller\n{\n    public ActionResult Index()\n    {\n    }\n}\n```", "```cs\n[Authorize]\npublic ActionResult Index()\n{\n}\n```", "```cs\npublic static class StringExtensions\n{\n    public static string Sanitize(this string content)\n    {\n        // Replace the malicious tags with nothing.\n        var maliciousTagsPattern =\n            @\"<(applet|embed|frameset|head|noframes|noscript|object|            form|select|option|script|style|title)(.*?)>\"+\n            \"((.|\\n)*?)\"+\n            \"</(applet|embed|frameset|head|noframes|noscript|object|            select|form|option|script|style|title)>\";\n        var options = RegexOptions.IgnoreCase | RegexOptions.            Multiline;\n        var regex = new Regex(maliciousTagsPattern, options);\n        content = regex.Replace(content, @\"\");\n        // Remove the Javascript function on the tags (i.e.            OnChange=\"Javascript:<blah blah blah>\")\n        var inlinePattern = @\"<[^>]*=\"\"javascript:[^\"\"]*\"\"[^>]*>\";\n        options = RegexOptions.IgnoreCase;\n        var regex2 = new Regex(inlinePattern, options);\n        return regex2.Replace(content, @\"\");\n    }\n}\n```", "```cs\nvar sanitizedString = inputFromUser.Sanitize();\n```"]