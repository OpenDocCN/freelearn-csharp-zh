- en: Consuming Diagnostic Analyzers in .NET Projects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 .NET 项目中消费诊断分析器
- en: 'In the previous chapter, we showed you how to write diagnostic analyzers to
    analyze and report issues about the .NET source code and contribute them to the
    .NET developer community. In this chapter, we will show you how to search, install,
    view, and configure the analyzers that have already been published by various
    analyzer authors on NuGet and the VS extension gallery. We will cover the following
    recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们向您展示了如何编写诊断分析器来分析并报告有关 .NET 源代码的问题，并将它们贡献给 .NET 开发者社区。在本章中，我们将向您展示如何搜索、安装、查看和配置已在
    NuGet 和 VS 扩展库上发布的分析器。我们将涵盖以下食谱：
- en: Searching and installing analyzers through the NuGet package manager
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 NuGet 包管理器搜索和安装分析器
- en: Searching and installing VSIX analyzers through the VS extension gallery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过 VS 扩展库搜索和安装 VSIX 分析器
- en: Viewing and configuring analyzers in the solution explorer in Visual Studio
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 的解决方案资源管理器中查看和配置分析器
- en: Using the ruleset file and Rule Set editor to configure analyzers
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用规则集文件和规则集编辑器配置分析器
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Diagnostic analyzers are extensions to the Roslyn C# compiler and Visual Studio
    IDE to analyze user code and report diagnostics. The user will see these diagnostics
    in the error list after building the project from Visual Studio and even when
    building the project on the command line. They will also see the diagnostics live
    while editing the source code in the Visual Studio IDE. Analyzers can report diagnostics
    to enforce specific code styles, improve code quality and maintenance, recommend
    design guidelines, or even report very domain-specific issues, which cannot be
    covered by the core compiler.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 诊断分析器是 Roslyn C# 编译器和 Visual Studio IDE 的扩展，用于分析用户代码并报告诊断信息。用户在从 Visual Studio
    构建项目后，甚至在命令行构建项目时，都会在错误列表中看到这些诊断信息。当在 Visual Studio IDE 中编辑源代码时，他们也会实时看到诊断信息。分析器可以报告诊断信息，以强制执行特定的代码风格，提高代码质量和维护性，推荐设计指南，甚至报告非常特定于特定领域的问题，这些问题无法由核心编译器覆盖。
- en: Analyzers can be installed in a .NET project either as a NuGet package or as
    a VSIX. To get a better understanding of these packaging schemes and learn about
    the differences in the analyzer experience when installed as a NuGet package versus
    a VSIX, it is recommended that you read the introduction part of the recipe *Publishing
    NuGet package and VSIX for an analyzer project* in [Chapter 1](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml),
    *Writing Diagnostic Analyzers*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器可以以 NuGet 包或 VSIX 的形式安装到 .NET 项目中。为了更好地理解这些打包方案，并了解将分析器作为 NuGet 包或 VSIX 安装时的分析器体验差异，建议您阅读[第
    1 章](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml)中关于如何发布分析器项目的食谱的介绍部分 *Publishing
    NuGet package and VSIX for an analyzer project*。
- en: Analyzers are supported on various different flavors of .NET Standard, .NET
    Core, and .NET Framework projects, for example, class library, console app, and
    so on.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 分析器支持各种不同版本的 .NET Standard、.NET Core 和 .NET Framework 项目，例如类库、控制台应用程序等。
- en: Searching and installing analyzers through the NuGet package manager
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 NuGet 包管理器搜索和安装分析器
- en: In this recipe, we will show you how to search and install analyzer NuGet packages
    in the NuGet package manager in Visual Studio, and see the analyzer diagnostics
    from an installed NuGet package shown in project build and as live diagnostics
    during code editing in Visual Studio.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将向您展示如何在 Visual Studio 的 NuGet 包管理器中搜索和安装分析器 NuGet 包，并查看在项目构建中以及 Visual
    Studio 代码编辑期间的实时分析器诊断信息。
- en: Getting ready
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have Visual Studio 2017 installed on your machine for this
    recipe. You can install a free community version of Visual Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 才能完成此食谱。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
    安装 Visual Studio 2017 的免费社区版本。
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a C# class library project, say `ClassLibrary`*,* in Visual Studio 2017.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2017 中创建一个 C# 类库项目，例如 `ClassLibrary`*。
- en: 'In solution explorer, right-click on the solution or project node and execute
    the Manage NuGet Packages command:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中，右键单击解决方案或项目节点，并执行“管理 NuGet 包”命令：
- en: '![](img/217b4155-cf3f-49c4-bd05-5ab20c6c8722.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/217b4155-cf3f-49c4-bd05-5ab20c6c8722.png)'
- en: 'This brings up the NuGet Package Manager, which can be used to search and install
    NuGet packages to the solution or project:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开 NuGet 包管理器，您可以使用它来搜索和安装 NuGet 包到解决方案或项目：
- en: '![](img/f2f05852-6c78-4ebf-8e9b-351a05676076.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2f05852-6c78-4ebf-8e9b-351a05676076.png)'
- en: 'In the search bar, type the following text to find NuGet packages tagged as
    analyzers : `Tags:"analyzers"`.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索栏中输入以下文本以查找标记为分析器的 NuGet 包：`Tags:"analyzers"`。
- en: Note that some of the well-known packages are tagged as `analyzer`, so you may
    also want to search for `Tags:"analyzer"`**.**
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些知名包被标记为 `analyzer`，因此您可能还想搜索带有 `Tags:"analyzer"`**的标签**。
- en: 'Check or uncheck the Include prerelease checkbox to the right of the search
    bar to search or hide the pre-release analyzer packages, respectively. The packages
    are listed based on the number of downloads, with the highest downloaded package
    at the top:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过搜索栏右侧的 Include prerelease 复选框选择或取消选择以搜索或隐藏预发布分析器包。包根据下载次数列出，下载次数最高的包位于顶部：
- en: '![](img/5b076f43-300d-4792-abbf-4a033cd15b6d.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b076f43-300d-4792-abbf-4a033cd15b6d.png)'
- en: 'Select a package to install, say `System.Runtime.Analyzers`, and pick a specific
    version, say *1.1.0*, and click on Install:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择要安装的包，例如 `System.Runtime.Analyzers`，并选择一个特定版本，例如 *1.1.0*，然后点击安装：
- en: '![](img/1561fbb1-97cb-409f-9271-735374a8c9db.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1561fbb1-97cb-409f-9271-735374a8c9db.png)'
- en: Click on the I Accept button on the License Acceptance dialog to install the
    NuGet package.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在许可接受对话框中点击 I Accept 按钮，以安装 NuGet 包。
- en: 'Verify the installed analyzer(s) that shows up under the Analyzers node in
    the solution explorer:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证在解决方案资源管理器中的分析器节点下显示的已安装分析器：
- en: '![](img/b6a0894b-b946-47de-ae30-77b47a3b48f4.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b6a0894b-b946-47de-ae30-77b47a3b48f4.png)'
- en: 'Verify that the project file has a new `ItemGroup` with the following analyzer
    references from the installed analyzer package:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证项目文件是否包含一个包含以下分析器引用的新 `ItemGroup`，这些引用来自已安装的分析器包：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the following code to your C# project:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到您的 C# 项目中：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Verify the analyzer diagnostic from the installed analyzer that is shown in
    the error list:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证错误列表中显示的已安装分析器的分析器诊断：
- en: '![](img/4b52cd14-fc2c-4dfe-94a2-f8ce0879635f.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b52cd14-fc2c-4dfe-94a2-f8ce0879635f.png)'
- en: 'Open Developer Command Prompt for VS 2017 and build the project to verify that
    the analyzer is executed on the command-line build and that the analyzer diagnostic
    is reported:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 VS 2017 的开发者命令提示符并构建项目，以验证分析器是否在命令行构建上执行，并且分析器诊断是否被报告：
- en: '![](img/f8691f86-51bf-4e92-8c5b-8b42c11bd6ed.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f8691f86-51bf-4e92-8c5b-8b42c11bd6ed.png)'
- en: Create a new C# project in VS 2017 and add the same code to it as step 10\.
    Verify that no analyzer diagnostic shows up in the error list or command line,
    confirming that the analyzer package was only installed to the selected project
    in steps 1-6.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS 2017 中创建一个新的 C# 项目，并将与步骤 10 相同的代码添加到其中。验证错误列表或命令行中没有出现分析器诊断，以确认分析器包仅在步骤
    1-6 中安装到所选项目。
- en: Note that **CA1018** (*the custom attribute should have AttributeUsage defined*)
    has been moved to a separate analyzer assembly in future versions of the `FxCop/System.Runtime.Analyzers`
    package. It is recommended that you install the `Microsoft.CodeAnalysis.FxCopAnalyzers`
    NuGet package from ( [https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers))to
    get the latest group of Microsoft-recommended analyzers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，**CA1018**（自定义属性应该有 AttributeUsage 定义）在 `FxCop/System.Runtime.Analyzers`
    包的未来版本中已被移动到单独的分析器程序集中。建议您从（[https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers](https://www.nuget.org/packages/Microsoft.CodeAnalysis.FxCopAnalyzers)）安装
    `Microsoft.CodeAnalysis.FxCopAnalyzers` NuGet 包以获取最新的 Microsoft 推荐的分析器组。
- en: Searching and installing VSIX analyzers through the VS extension gallery
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 VS 扩展库搜索和安装 VSIX 分析器
- en: In this recipe, we will show you how to search and install analyzer VSIX packages
    in the Visual Studio extension manager and see how the analyzer diagnostics from
    an installed VSIX light up as live diagnostics during code editing in Visual Studio.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将向您展示如何在 Visual Studio 扩展管理器中搜索和安装分析器 VSIX 包，并查看安装的 VSIX 分析器诊断如何在 Visual
    Studio 代码编辑期间作为实时诊断亮起。
- en: Getting ready
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have Visual Studio 2017 installed on your machine to follow
    this recipe. You can install a free community version of Visual Studio 2017 from
    [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 以遵循此教程。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
    安装 Visual Studio 2017 的免费社区版本。
- en: How to do it...
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Create a C# class library project, say `ClassLibrary`, in Visual Studio 2017.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2017 中创建一个 C# 类库项目，例如 `ClassLibrary`。
- en: From the top-level menu, navigate to Tools | Extensions and Updates.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶级菜单中，导航到“工具”|“扩展和更新”。
- en: 'Navigate to Online | Visual Studio Marketplace on the left tab of the dialog
    to view the available VSIXes in the Visual Studio extension gallery/marketplace:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到对话框左侧选项卡上的“在线”|“Visual Studio 市场place”，以查看 Visual Studio 扩展库/市场中的可用 VSIX：
- en: '![](img/9c9fa7c2-ed74-4a3a-8e00-4afb02a276e0.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9c9fa7c2-ed74-4a3a-8e00-4afb02a276e0.png)'
- en: 'Search `analyzers` in the search textbox in the upper-right corner of the dialog
    and download an analyzer VSIX, say `Refactoring Essentials for Visual Studio`:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框右上角的搜索框中搜索 `analyzers`，下载一个分析器 VSIX，例如 `Refactoring Essentials for Visual
    Studio`：
- en: '![](img/2d49b014-886b-48cd-9623-7e0d5b00ee64.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d49b014-886b-48cd-9623-7e0d5b00ee64.png)'
- en: 'Once the download completes, you will get a message at the bottom of the dialog
    saying that the install will be scheduled to execute once Visual Studio and related
    windows are closed:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，你将在对话框底部收到一条消息，说明安装将在 Visual Studio 和相关窗口关闭后执行：
- en: '![](img/cc5ab730-f2a4-4b29-8e48-e8c17f7ef6c8.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc5ab730-f2a4-4b29-8e48-e8c17f7ef6c8.png)'
- en: Close the dialog and then close the Visual Studio instance to start the install.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭对话框，然后关闭 Visual Studio 实例以开始安装。
- en: 'In the VSIX Installer dialog, click on Modify to start installation:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VSIX 安装程序对话框中，单击“修改”以开始安装：
- en: '![](img/c5cf1340-e55e-4be3-a47f-080a5f6a4276.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5cf1340-e55e-4be3-a47f-080a5f6a4276.png)'
- en: 'The subsequent message prompts you to kill all the active Visual Studio and
    satellite processes. Save all your relevant work in all the open Visual Studio
    instances and click on End Task**s** to kill these processes and install the VSIX:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 随后的消息提示您终止所有活动的 Visual Studio 和辅助进程。保存所有相关工作，并在所有打开的 Visual Studio 实例中单击“结束任务**s**”以终止这些进程并安装
    VSIX：
- en: '![](img/721c1b49-0632-4dc6-8500-e1771bfe4a5d.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/721c1b49-0632-4dc6-8500-e1771bfe4a5d.png)'
- en: 'After installation, restart VS, click on Tools | Extensions And Updates, and
    verify that `Refactoring Essentials VSIX` is installed:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，重新启动 VS，点击“工具”|“扩展和更新”，并验证 `Refactoring Essentials VSIX` 是否已安装：
- en: '![](img/c54b8613-1557-4d94-9590-e72f8fac9394.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c54b8613-1557-4d94-9590-e72f8fac9394.png)'
- en: 'Create a new C# project with the following source code and verify analyzer
    diagnostic *RECS0085* (*Redundant array creation expression*) in the error list:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个具有以下源代码的新 C# 项目，并在错误列表中验证分析器诊断 *RECS0085* (*冗余数组创建表达式*)：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/f14cc430-4446-464b-a30a-766503551251.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f14cc430-4446-464b-a30a-766503551251.png)'
- en: Build the project from Visual Studio 2017 or the command line and confirm that
    no analyzer diagnostic shows up in the output window or the command line, respectively,
    confirming that the VSIX analyzer did not execute as a part of the build.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Visual Studio 2017 或命令行构建项目，并确认输出窗口或命令行中均未显示分析器诊断，从而确认 VSIX 分析器没有作为构建的一部分执行。
- en: Viewing and configuring analyzers in solution explorer in Visual Studio
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 的解决方案资源管理器中查看和配置分析器
- en: In this recipe, we will show you how to use the Solution explorer in Visual
    Studio 2017 to view the different analyzers installed in a project, view the implemented
    analyzer rules in these assemblies, as well as the rule properties (or the descriptor
    metadata), and configure the rule severity and persist the new severity settings.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将向您展示如何使用 Visual Studio 2017 中的解决方案资源管理器查看项目中安装的不同分析器，查看这些程序集实现的分析器规则，以及规则属性（或描述符元数据），并配置规则严重性和持久化新的严重性设置。
- en: Getting ready
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have created and opened a .NET project in Visual Studio 2017
    with NuGet-based analyzers installed in the project. Refer to the first recipe
    in this chapter for installing analyzers in a .NET project.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在 Visual Studio 2017 中创建并打开一个 .NET 项目，并在项目中安装基于 NuGet 的分析器。有关在 .NET 项目中安装分析器的信息，请参阅本章的第一个教程。
- en: How to do it...
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open a C# project, say `ClassLibrary`, with the analyzer NuGet package `System.Runtime.Analyzers.nupkg`
    pre-release version *1.2.0-beta2* installed in it.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个C#项目，例如 `ClassLibrary`，其中预发布版本 *1.2.0-beta2* 的分析器NuGet包 `System.Runtime.Analyzers.nupkg`
    已安装。
- en: 'In the solution explorer, expand References | Analyzers nodes to view the analyzer
    assemblies installed through the analyzer NuGet package(s). We should see two
    analyzer assemblies, `System.Runtime.Analyzers` and `System.Runtime.CSharp.Analyzers`:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中，展开引用 | 分析器节点以查看通过分析器NuGet包安装的分析器程序集。我们应该看到两个分析器程序集，`System.Runtime.Analyzers`
    和 `System.Runtime.CSharp.Analyzers`：
- en: '![](img/edd824d1-77d3-450a-8784-362baa1cf26d.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/edd824d1-77d3-450a-8784-362baa1cf26d.png)'
- en: 'Expand the System.Runtime.Analyzers node to view all the *CAXXXX* rules implemented
    in the assembly and click on a specific rule, say CA1813: Avoid unsealed attributes*,*
    to view the rule properties, such as *ID, Message, Title, Description, Category,
    Effective severity*, Enabled by default, and so on, in the Properties Window:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开System.Runtime.Analyzers节点以查看在程序集中实现的全部 *CAXXXX* 规则，并单击一个特定规则，例如 CA1813：避免未密封的属性*，*
    以查看规则属性，如 *ID、消息、标题、描述、类别、有效严重性*、默认启用，等等，在属性窗口中：
- en: '![](img/33e32c43-e569-41eb-8c96-072f642a43f9.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/33e32c43-e569-41eb-8c96-072f642a43f9.png)'
- en: 'Note that the *CA1813* rule''s Enabled by default is False, which means that
    the rule is turned off by default. We can confirm this by adding the following
    source code that violates this rule because we declared a public unsealed attribute,
    but *CA1813* is not reported for the violation:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，*CA1813* 规则的默认启用为False，这意味着规则默认是关闭的。我们可以通过添加以下违反此规则的源代码来确认这一点，因为我们声明了一个公共未密封的属性，但
    *CA1813* 没有报告违反：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Right-click on the rule node, click on Set Rule Set Severity, and change the
    severity from Default to Warning:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击规则节点，点击设置规则集严重性，并将严重性从默认更改为警告：
- en: '![](img/ad315b35-5562-4c3e-aacc-451dee5c064d.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ad315b35-5562-4c3e-aacc-451dee5c064d.png)'
- en: 'Confirm that *CA1813* is now reported for the preceding code:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认 *CA1813* 现在报告了前面的代码：
- en: '![](img/848047f4-f0aa-4ac2-9e3f-8a0b06c81b21.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/848047f4-f0aa-4ac2-9e3f-8a0b06c81b21.png)'
- en: Save the current project and then close and re-open the solution.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存当前项目，然后关闭并重新打开解决方案。
- en: Verify that the warning CA1813 still shows up for the preceding source code,
    confirming that the rule set severity change was persisted for the project.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证警告 CA1813 仍然出现在前面的源代码中，确认规则集严重性更改已持久化到项目中。
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The analyzers node in solution explorer gives a visual representation of the
    analyzer items defined in the project file, which correspond to analyzer assemblies
    added manually to the project or added via analyzer NuGet package(s). The rules
    in the assembly come from each type in the assembly that implements the `DiagnosticAnalyzer`
    type and has a `DiagnosticAnalyzerAttribute` applied to it. The rule properties
    shown in the properties window come from instantiating the analyzer types and
    requesting them for it's `SupportedDiagnostics`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案资源管理器中的分析器节点以可视方式表示在项目文件中定义的分析器项，这些项对应于手动添加到项目中的分析器程序集或通过分析器NuGet包添加的程序集。程序集中的规则来自实现
    `DiagnosticAnalyzer` 类型并对其应用了 `DiagnosticAnalyzerAttribute` 的程序集中的每个类型。属性窗口中显示的规则属性来自实例化分析器类型并请求其
    `SupportedDiagnostics`。
- en: Changing the rule severity in solution explorer and then persisting it for the
    project happens through an automatically generated ruleset file, which gets added
    to the project. Refer to the next recipe to get more details on ruleset-based
    analyzer configuration.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中更改规则严重性并将其持久化到项目是通过一个自动生成的规则集文件实现的，该文件被添加到项目中。请参阅下一道菜谱以获取有关基于规则集的分析器配置的更多详细信息。
- en: Using the ruleset file and Rule Set editor to configure analyzers
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用规则集文件和规则集编辑器配置分析器
- en: In this recipe, we will show you how to use the `ruleset` file and the Rule
    Set editor in Visual Studio to configure the per-project severity of analyzer
    rules, and illustrate how the severity changes are reflected in the live diagnostics
    in Visual Studio, as well as command-line builds.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将向您展示如何使用Visual Studio中的 `ruleset` 文件和规则集编辑器来配置分析器规则的每个项目严重性，并说明严重性更改如何在Visual
    Studio的实时诊断以及命令行构建中反映出来。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to have created and opened a .NET project in Visual Studio 2017
    with NuGet-based analyzers installed in the project. Refer to the first recipe
    in this chapter for installing analyzers in a .NET project.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在 Visual Studio 2017 中创建并打开一个 .NET 项目，并在项目中安装基于 NuGet 的分析器。请参阅本章的第一个配方，了解如何在
    .NET 项目中安装分析器。
- en: How to do it...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open a C# project, say `ClassLibrary`, with the analyzer NuGet package `System.Runtime.Analyzers.nupkg`
    prerelease version *1.2.0-beta2* installed in it.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个安装了分析器 NuGet 包 `System.Runtime.Analyzers.nupkg` 预发布版本 *1.2.0-beta2* 的 C#
    项目，例如 `ClassLibrary`。
- en: 'Add the following source code to the project and verify that no CA1813: Avoid
    unsealed attributes is fired:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下源代码添加到项目中并验证是否未触发 CA1813: 避免未密封的属性：'
- en: '[PRE4]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the solution explorer, navigate to ClassLibary | References | Analyzers,
    right-click on the Analyzers node and execute the context menu command Open Active
    Rule Set:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中，导航到 ClassLibary | 引用 | 分析器，右键单击分析器节点并执行上下文菜单命令“打开活动规则集”：
- en: '![](img/4149663d-c886-41f9-b0bc-957a3df23969.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4149663d-c886-41f9-b0bc-957a3df23969.png)'
- en: In the Rule Set editor, search *CA1813* in the textbox in the top-right corner.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在规则集编辑器中，在右上角的文本框中搜索 *CA1813*。
- en: 'For the *CA1813,* search the result listed under System.Runtime.Analyzers,
    change the Action from None to Warning, and hit save:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 *CA1813*，在 System.Runtime.Analyzers 下搜索列出的结果，将操作从 None 更改为警告，并保存：
- en: '![](img/d70d5cb8-7dd8-451a-a6c6-734c459f1210.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d70d5cb8-7dd8-451a-a6c6-734c459f1210.png)'
- en: We should now see a *CA1813* warning being reported on our attribute definition
    in the source code.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在应该在源代码中的属性定义上看到 *CA1813* 警告。
- en: 'In the solution explorer, verify that the project now contains that a new `ClassLibrary.ruleset`
    item, and a new `CodeAnalysisRuleset` property was added to the project file:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中验证，项目现在包含新的 `ClassLibrary.ruleset` 项，并在项目文件中添加了新的 `CodeAnalysisRuleset`
    属性：
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Open `ClassLibrary.ruleset` in a text editor outside of Visual Studio and verify
    that it has the following rule action specification for *CA1813*:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 外部的文本编辑器中打开 `ClassLibrary.ruleset` 并验证它是否具有以下针对 *CA1813* 的规则操作规范：
- en: '[PRE6]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Edit the ruleset file to change the `ruleset` Action for *CA1813* from Warning
    to Error and save the file.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑规则集文件，将 *CA1813* 的 `ruleset` 操作从警告更改为错误并保存文件。
- en: 'Switch back to Visual Studio and confirm that the source code editor now shows
    a red squiggle and that the error list also reports an error for *CA1813*:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回 Visual Studio 并确认源代码编辑器现在显示红色波浪线，并且错误列表也报告了 *CA1813* 错误：
- en: '![](img/27524615-8925-4e81-aa64-adfb4512323b.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/27524615-8925-4e81-aa64-adfb4512323b.png)'
- en: Double-click on *ClassLibrary.ruleset* in the solution explorer to open it with
    the Rule Set editor and verify that the rule severity entry for *CA1813* is now
    showing as Error.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中双击 *ClassLibrary.ruleset* 以使用规则集编辑器打开它，并验证 *CA1813* 的规则严重性条目现在显示为错误。
- en: Build the project and verify that the error *CA1813* is reported, confirming
    that the `ruleset` setting is preserved for command-line builds as well.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并验证是否报告了错误 *CA1813*，确认 `ruleset` 设置在命令行构建中也得到保留。
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `ruleset` file is essentially a grouping of a set of code-analysis rules
    that you can apply to a project to configure it''s analysis. It is specified in
    an XML format and is based on an XML schema that ships with Visual Studio. It
    is also open sourced, and can be found at [https://github.com/dotnet/roslyn/blob/version-2.0.0/src/Compilers/Core/Portable/RuleSet/RuleSetSchema.xsd](https://github.com/dotnet/roslyn/blob/version-2.0.0/src/Compilers/Core/Portable/RuleSet/RuleSetSchema.xsd).
    A `ruleset` can be specified for a project using the `CodeAnalysisRuleset` property
    in the project file. Each Rules node contains a collection of rule specifications
    with a common analyzer ID and namespace. Each Rule specification has the rule
    ID and the effective Action or the severity. The rule Action can take one of the
    following five values: None (suppressed), Hidden (non-visible in the IDE, primarily
    a code fix trigger), Info (informational message), Warning, and **Error**. These
    rule actions get converted into compilation options for the compiler and override
    the default severity of the diagnostic ID.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`ruleset` 文件本质上是一组代码分析规则的集合，您可以将这些规则应用于项目以配置其分析。它以 XML 格式指定，并基于 Visual Studio
    一起提供的 XML 架构。它也是开源的，可以在 [https://github.com/dotnet/roslyn/blob/version-2.0.0/src/Compilers/Core/Portable/RuleSet/RuleSetSchema.xsd](https://github.com/dotnet/roslyn/blob/version-2.0.0/src/Compilers/Core/Portable/RuleSet/RuleSetSchema.xsd)
    找到。可以使用项目文件中的 `CodeAnalysisRuleset` 属性为项目指定 `ruleset`。每个 Rules 节点包含一组具有公共分析器 ID
    和命名空间的规则规范。每个规则规范都有规则 ID 和有效的操作或严重性。规则操作可以取以下五个值之一：None（抑制）、Hidden（在 IDE 中不可见，主要是代码修复触发器）、Info（信息性消息）、Warning
    和 **Error**。这些规则操作被转换为编译器的编译选项，并覆盖了诊断 ID 的默认严重性。'
- en: The Rule Set editor is a powerful graphical user interface to search, filter,
    and bulk-edit rule configurations.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 规则集编辑器是一个强大的图形用户界面，用于搜索、过滤和批量编辑规则配置。
- en: Refer to [https://msdn.microsoft.com/en-us/library/dd264996.aspx](https://msdn.microsoft.com/en-us/library/dd264996.aspx)
    for a more detailed walk through, and for documentation for `ruleset` file schema
    and the Rule Set editor in Visual Studio.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [https://msdn.microsoft.com/en-us/library/dd264996.aspx](https://msdn.microsoft.com/en-us/library/dd264996.aspx)
    以获取更详细的说明，以及 Visual Studio 中 `ruleset` 文件架构和规则集编辑器的文档。
- en: There's more...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In Visual Studio 2017, built-in IDE analyzers for coding style rules can also
    be configured via the new *.editorconfig* format, which applies rule configurations
    at folder level. See the documentation at ([https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference)
    ) for further details.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 2017 中，可以通过新的 *.editorconfig* 格式配置内置的编码风格规则分析器，该格式在文件夹级别应用规则配置。有关更多详细信息，请参阅文档
    ([https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference](https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference)
    )。
