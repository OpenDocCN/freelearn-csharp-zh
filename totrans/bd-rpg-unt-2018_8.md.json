["```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\nusing System.Collections;\npublic class MyPlayerController : NetworkBehaviour\n{\npublic Transform mainCamera;\npublic float cameraDistance = 16f;\npublic float cameraHeight = 16f;\npublic Vector3 cameraOffset;\n[SyncVar]\npublic Color myColor;\npublic GameObject bulletPrefab;\npublic Transform bulletSpawn;\nprivate void Start()\n{\nGetComponent<MeshRenderer>().material.color = myColor;\ncameraOffset = new Vector3(0f, cameraHeight, -cameraDistance);\nmainCamera = Camera.main.transform;\nMoveCamera();\n}\nvoid Update()\n{\n// only execute the following code if local player ...\nif (!isLocalPlayer)\nreturn;\n#if UNITY_EDITOR\nvar x = Input.GetAxis(\"Horizontal\") * Time.deltaTime * 150.0f;\nvar z = Input.GetAxis(\"Vertical\") * Time.deltaTime * 3.0f;\n#else\nvar x = ETCInput.GetAxis(\"Horizontal\") * Time.deltaTime * 150.0f;\nvar z = ETCInput.GetAxis(\"Vertical\") * Time.deltaTime * 3.0f;\n#endif\ntransform.Rotate(0, x, 0);\ntransform.Translate(0, 0, z);\n#if UNITY_EDITOR\nif (Input.GetKeyDown(KeyCode.Space))\n{\nCmdFire();\n}\n#else\nif (ETCInput.GetButtonDown(\"ButtonFire\"))\n{\nCmdFire();\n}\n#endif\nMoveCamera();\n}\n[Command]\nvoid CmdFire()\n{\n// Create the Bullet from the Bullet Prefab\nvar bullet = Instantiate(\nbulletPrefab,\nbulletSpawn.position,\nbulletSpawn.rotation) as GameObject;\n// Add velocity to the bullet\nbullet.GetComponent<Rigidbody>().velocity = bullet.transform.forward *6;\nbullet.GetComponent<Bullet>().myColor = myColor;\n// Spawn the bullet on the Clients\nNetworkServer.Spawn(bullet);\n// Destroy the bullet after 2 seconds\nDestroy(bullet, 2.0f);\n}\nvoid MoveCamera()\n{\nmainCamera.position = transform.position;\nmainCamera.rotation = transform.rotation;\nmainCamera.Translate(cameraOffset);\nmainCamera.LookAt(transform);\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\npublic class Health : NetworkBehaviour\n{\npublic const int maxHealth = 100;\n[SyncVar(hook = \"OnChangeHealth\")]\npublic int currentHealth = maxHealth;\npublic RectTransform healthBar;\npublic bool destroyOnDeath;\npublic GameObject[] listOfPlayers;\nprivate void Start()\n{\nhealthBar.sizeDelta = new Vector2(currentHealth, healthBar.sizeDelta.y);\n}\npublic void TakeDamage(int amount)\n{\ncurrentHealth -= amount;\nif (currentHealth <= 0)\n{\nif (destroyOnDeath)\n{\nRpcDied();\nlistOfPlayers = GameObject.FindGameObjectsWithTag(\"Player\");\nif (listOfPlayers.Length < 1)\n{\nInvoke(\"BackToLobby\", 3.0f);\n}\n}\nelse\n{\ncurrentHealth = maxHealth;\n```", "```cs\n\n// called on the Server, will be invoked on the Clients\nRpcRespawn();\n}\n}\n}\nvoid OnChangeHealth(int health)\n{\nhealthBar.sizeDelta = new Vector2(health, healthBar.sizeDelta.y);\n}\n[ClientRpc]\nvoid RpcRespawn()\n{\nif (isLocalPlayer)\n{\n// move back to zero location\ntransform.position = Vector3.zero;\n}\n}\n[ClientRpc]\nvoid RpcDied()\n{\ngameObject.tag = \"Untagged\";\nGetComponent<Renderer>().material.color = Color.black;\nif (GetComponent<MyPlayerController>() != null)\n{\nGetComponent<MyPlayerController>().enabled = false;\n}\nif (GetComponent<EnemyController>() != null)\n{\nGetComponent<EnemyController>().enabled = false;\n}\n}\nvoid BackToLobby()\n{\nFindObjectOfType<NetworkLobbyManager>().ServerReturnToLobby();\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\npublic class Bullet : NetworkBehaviour\n{\n[SyncVar]\npublic Color myColor;\nprivate void Start()\n{\nGetComponent<MeshRenderer>().material.color = myColor;\n}\nvoid OnCollisionEnter(Collision collision)\n{\nvar hit = collision.gameObject;\nvar health = hit.GetComponent<Health>();\nif (health != null)\n{\nhealth.TakeDamage(10);\n}\nDestroy(gameObject);\n}\n}\n```", "```cs\n[SyncVar(hook = \"OnChangeHealth\")]\npublic int currentHealth = maxHealth;\n```", "```cs\nvoid OnChangeHealth(int health)\n{\nhealthBar.sizeDelta = new Vector2(health, healthBar.sizeDelta.y);\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\npublic class EnemyController : NetworkBehaviour\n{\npublic GameObject bulletPrefab;\npublic Transform bulletSpawn;\npublic float distance = 1000;\npublic GameObject[] listOfPlayers;\n[SyncVar(hook = \"OnChangePlayerToAttack\")\npublic GameObject playerToAttack;\nfloat coolOffTime = 0.0f;\nvoid Update()\n{\n// only execute the following code if local player ...\nif (!isServer)\nreturn;\nlistOfPlayers = GameObject.FindGameObjectsWithTag(\"Player\");\nif (listOfPlayers.Length > 0)\n{\nfloat distance = 100f;\nforeach (var player in listOfPlayers)\n{\nfloat d = Vector3.Distance(transform.position, player.transform.position);\nif (d < distance)\n{\ndistance = d;\nplayerToAttack = player;\n}\n}\nif (playerToAttack != null)\n{\nVector3 direction = playerToAttack.transform.position - transform.position;\ntransform.rotation =\nQuaternion.Slerp(transform.rotation,\nQuaternion.LookRotation(direction), 0.1f);\nfloat d = Vector3.Distance(transform.position, playerToAttack.transform.position);\nif (d < 15.0f)\n{\nif(coolOffTime<Time.time)\n{\nCmdFire();\ncoolOffTime = Time.time + 1.0f;\n}\n}\n}\n}\n}\nvoid OnChangePlayerToAttack(GameObject player)\n{\nplayerToAttack = player;\n}\n[Command]\nvoid CmdFire()\n{\n// Create the Bullet from the Bullet Prefab\nvar bullet = Instantiate(\nbulletPrefab,\nbulletSpawn.position,\nbulletSpawn.rotation) as GameObject;\n// Add velocity to the bullet\nbullet.GetComponent<Rigidbody>().velocity = bullet.transform.forward * 6;\n// Spawn the bullet on the Clients\nNetworkServer.Spawn(bullet);\n// Destroy the bullet after 2 seconds\nDestroy(bullet, 2.0f);\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\npublic class EnemySpawner : NetworkBehaviour {\npublic GameObject enemyPrefab;\npublic int numberOfEnemies;\npublic override void OnStartServer()\n{\nfor (int i = 0; i < numberOfEnemies; i++)\n{\nvar spawnPosition = new Vector3(\nRandom.Range(-20.0f, 20.0f),\n0.0f,\nRandom.Range(-20.0f, 20.0f));\nvar spawnRotation = Quaternion.Euler(\n0.0f,\nRandom.Range(0, 180),\n0.0f);\nvar enemy = (GameObject)Instantiate(enemyPrefab, spawnPosition, spawnRotation);\nNetworkServer.Spawn(enemy);\n}\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\nnamespace com.noorcon.rpg2e\n{\npublic class BarbarianCharacterNetworkController : NetworkBehaviour\n{\npublic Transform mainCamera;\npublic float cameraDistance = 16f;\npublic float cameraHeight = 16f;\npublic Vector3 cameraOffset;\npublic Animator animator;\npublic float directionDampTime;\npublic float speed = 6.0f;\npublic float h = 0.0f;\npublic float v = 0.0f;\nbool attack = false;\nbool punch = false;\nbool run = false;\nbool jump = false;\n[HideInInspector]\npublic bool die = false;\nbool dead = false;\n[SyncVar]\npublic bool EnemyInSight;\npublic GameObject EnemyToAttack;\nQuaternion StartingAttackAngle = Quaternion.AngleAxis(-25, Vector3.up);\nQuaternion StepAttackAngle = Quaternion.AngleAxis(5, Vector3.up);\nVector3 AttackDistance = new Vector3(0, 0, 2);\n// Use this for initialization\nvoid Start()\n{\ncameraOffset = new Vector3(0f, cameraHeight, -cameraDistance);\nmainCamera = Camera.main.transform;\nMoveCamera();\nanimator = GetComponent<Animator>() as Animator;\nEnemyInSight = false;\n}\n// Update is called once per frame\nprivate Vector3 moveDirection = Vector3.zero;\nvoid Update()\n{\nif (!isLocalPlayer)\nreturn;\nif (dead)\n{\nanimator.SetBool(\"Die\", false);\nreturn;\n}\nif (Input.GetKeyDown(KeyCode.C))\n{\nattack = true;\nthis.GetComponent<IKHandle>().enabled = false;\n}\nif (Input.GetKeyUp(KeyCode.C))\n{\nattack = false;\nthis.GetComponent<IKHandle>().enabled = true;\n}\nanimator.SetBool(\"Attack\", attack);\nif (Input.GetKeyDown(KeyCode.P))\n{\npunch = true;\nthis.GetComponent<IKHandle>().enabled = false;\n}\nif (Input.GetKeyUp(KeyCode.P))\n{\npunch = false;\nthis.GetComponent<IKHandle>().enabled = true;\n}\nanimator.SetBool(\"Punch\", punch);\nif (Input.GetKeyDown(KeyCode.LeftShift))\n{\nthis.run = true;\nthis.GetComponent<IKHandle>().enabled = false;\n}\nif (Input.GetKeyUp(KeyCode.LeftShift))\n{\nthis.run = false;\nthis.GetComponent<IKHandle>().enabled = true;\n}\nanimator.SetBool(\"Run\", run);\nif (Input.GetKeyDown(KeyCode.Space))\n{\njump = true;\nthis.GetComponent<IKHandle>().enabled = false;\n}\nif (Input.GetKeyUp(KeyCode.Space))\n{\n...\n```", "```cs\nif (!isLocalPlayer)\nreturn;\n```", "```cs\n[Command]\nvoid CmdEnemyToAttack(GameObject go)\n{\nthis.enemyInSight = true;\nthis.enemyToAttack = go;\n}\n```", "```cs\n[Command]\nvoid CmdEnemyTakeDamage(float value)\n{\nRpcEnemyTakeDamage(value);\n}\n[ClientRpc]\nvoid RpcEnemyTakeDamage(float value)\n{\nif(this.enemyToAttack != null)\nthis.enemyToAttack.GetComponent<NPC_Movement_Network>().Damage(value);\n}\n```", "```cs\n[Command]\nvoid CmdPlayerCharacterIsDead()\n{\nRpcPlayerCharacterIsDead();\n}\n[ClientRpc]\nvoid RpcPlayerCharacterIsDead()\n{\nthis.die = true;\nDestroy(this.gameObject, 2.0f);\n}\n```", "```cs\n// Var Sync hook function ...\nvoid OnChangePlayerHealth(float health)\n{\nthis.Health = health;\n}\n// Var Sync hook function\nvoid OnChangeEnemyToAttack(GameObject enemy)\n{\nthis.enemyToAttack = enemy;\n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.Networking; \n\nusing System.Collections; \n\npublic class NPC_Movement_Network : NetworkBehaviour { \n  // reference to the animator \n  public Animator animator; \n\n  public bool jump = false;     // used for jumping \n\n  [SyncVar(hook =\"OnNPCIsDead\")] \n  public bool die = false;      // are we alive? \n\n...\n\n  // what is the field of view for our NPC? \n  // currently set to 110 degrees \n  [SyncVar] \n  public float fieldOfViewAngle = 110.0f; \n\n  // calculate the angle between PC and NPC \n  [SyncVar] \n  public float calculatedAngle; \n\n  [SyncVar(hook = \"OnChangePlayerToAttackInNPC\")] \n  public GameObject playerToAttack; \n\n  [SyncVar(hook = \"OnChangeNPCHealth\")] \n  public float Health = 100.0f; \n\n  void Awake() \n  { \n    // get reference to the animator component \n    this.animator = GetComponent<Animator>() as Animator; \n\n    // get reference to nav mesh agent  \n    this.nav = GetComponent<NavMeshAgent>() as NavMeshAgent; \n\n    // get reference to the sphere collider \n    this.col = GetComponent<SphereCollider>() as SphereCollider; \n\n    // we don't see the player by default \n    this.playerInSight = false; \n  } \n\n  void Update() \n  { \n    // only execute the following code if local player ... \n    if (!isServer) \n      return; \n\n    this.CmdUpdateNetwork(); \n  } \n\n  [Command] \n  void CmdUpdateNetwork() \n  { \n    this.RpcUpdateNetwork(); \n  } \n\n  [ClientRpc] \n  void RpcUpdateNetwork() \n  { \n    // if player is in sight let's slerp towards the player \n    if(this.playerToAttack!=null) \n    { \n      if (playerInSight) \n      { \n        this.transform.rotation = \n            Quaternion.Slerp(this.transform.rotation, \n            Quaternion.LookRotation(direction), 0.1f); \n\n        if (this.playerToAttack.transform.GetComponent<CharacterController_Network>().die) \n        { \n          animator.SetBool(\"Attack\", false); \n          animator.SetFloat(\"Speed\", 0.0f); \n          animator.SetFloat(\"AngularSpeed\", 0.0f); \n          this.playerInSight = false; \n          this.playerToAttack = null; \n        } \n      } \n    } \n\n    if(this.Health<=0.0f) \n    { \n      this.die = true; \n      this.Health = 0.0f; \n\n      animator.SetBool(\"Attack\", false); \n      animator.SetFloat(\"Speed\", 0.0f); \n      animator.SetFloat(\"AngularSpeed\", 0.0f); \n      this.playerInSight = false; \n      this.playerToAttack = null; \n    }\n```", "```cs\n    animator.SetBool(\"Die\", die); \n  } \n...\n```", "```cs\n  void OnTriggerExit(Collider other) \n  { \n    if (other.transform.tag.Equals(\"Player\")) \n    { \n      distance = 0.0f; \n      angle = 0.0f; \n      this.attack1 = false; \n      this.playerInSight = false; \n\n      this.playerToAttack = null; \n    } \n  } \n\n  // this is a helper function at this point \n  // in the future we will use it to calculate distance around the corners \n  // it currently is also used to draw the path of the nav mesh agent in the  \n  // editor \n  float CalculatePathLength(Vector3 targetPosition) \n  { \n    // Create a path and set it based on a target position. \n    NavMeshPath path = new NavMeshPath(); \n    if (nav.enabled) \n      nav.CalculatePath(targetPosition, path); \n\n    // Create an array of points which is the length of the number of corners in the path + 2\\. \n    Vector3[] allWayPoints = new Vector3[path.corners.Length + 2]; \n\n    // The first point is the enemy's position. \n    allWayPoints[0] = transform.position; \n\n    // The last point is the target position. \n    allWayPoints[allWayPoints.Length - 1] = targetPosition; \n\n    // The points inbetween are the corners of the path. \n    for (int i = 0; i < path.corners.Length; i++) \n    { \n      allWayPoints[i + 1] = path.corners[i]; \n    } \n\n    // Create a float to store the path length that is by default 0\\. \n    float pathLength = 0; \n\n    // Increment the path length by an amount equal to the distance between each waypoint and the next. \n    for (int i = 0; i < allWayPoints.Length - 1; i++) \n    { \n      pathLength += Vector3.Distance(allWayPoints[i], allWayPoints[i + 1]); \n\n      if (DEBUG_DRAW) \n        Debug.DrawLine(allWayPoints[i], allWayPoints[i + 1], Color.red); \n    } \n\n    return pathLength; \n  } \n} \n```", "```cs\n// only execute the following code if server ...\nif (!isServer)\nreturn;\n```", "```cs\npublic void OnChangePlayerPlayerInSight(bool value)\n{\nthis.playerInSight = value;\n}\n// Var Sync hook function ...\nvoid OnChangeNPCHealth(float health)\n{\nthis.Health = health;\n}\nvoid OnNPCIsDead(bool value)\n{\ndie = true;\n}\nvoid OnChangePlayerToAttackInNPC(GameObject player)\n{\nthis.playerToAttack = player;\n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.Networking; \nusing System.Collections; \n\npublic class InventoryItemAgent_Network : NetworkBehaviour { \n\n  public InventoryItem ItemDescription; \n\n  public void OnTriggerEnter(Collider c) \n  { \n    // make sure we are colliding with the player \n    if (c.gameObject.tag.Equals(\"Player\")) \n    { \n      // Make a copy of the Inventory Item Object \n      InventoryItem myItem = new InventoryItem(); \n      myItem.CopyInventoryItem(this.ItemDescription); \n\n      c.gameObject.GetComponent<CharacterController_Network>().PlayerArmourChanged(myItem); \n    } \n  } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.Networking; // used for chapter 8 \n\nusing System.Collections; \n\npublic class EnemySpawn_Network : NetworkBehaviour \n{ \n  public GameObject enemyPrefab; \n  public Transform spawnLocation; \n\n  public GameObject inventoryItemPrefab; \n  public GameObject inventoryItemShield; \n\n  public override void OnStartServer() \n  { \n    GameObject go = GameObject.Instantiate(enemyPrefab, spawnLocation.position, Quaternion.identity) as GameObject; \n    NetworkServer.Spawn(go); \n\n    GameObject goInventoryItem1 = GameObject.Instantiate(inventoryItemPrefab, new Vector3(2, 1, 2), Quaternion.identity) as GameObject; \n    NetworkServer.Spawn(goInventoryItem1); \n\n    GameObject goInventoryItem2 = GameObject.Instantiate(inventoryItemShield, new Vector3(3, 1, 2), Quaternion.identity) as GameObject; \n    NetworkServer.Spawn(goInventoryItem2); \n\n  } \n} \n```"]