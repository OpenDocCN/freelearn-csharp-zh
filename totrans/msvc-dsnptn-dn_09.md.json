["```cs\ndotnet add package Microsoft.Extensions.Caching\n  .StackExchangeRedis\n```", "```cs\n// Register the RedisCache service\nservices.AddStackExchangeRedisCache(options =>\n{\n    options.Configuration = \"Configuration.GetSection\n        (\"Redis\")[\"ConnectionString\"]\n});\n```", "```cs\n\"Redis\": {\n  \"ConnectionString\": \"CONNECTION_STRING_HERE\"\n}\n```", "```cs\npublic interface ICacheProvider\n{\n    Task ClearCache(string key);\n    Task<T> GetFromCache<T>(string key) where T : class;\n    Task SetCache<T>(string key, T value,\n      DistributedCacheEntryOptions options) where T :\n        class;\n}\n```", "```cs\npublic class CacheProvider : ICacheProvider\n{\n    private readonly IDistributedCache _cache;\n    public CacheProvider(IDistributedCache cache)\n    {\n        _cache = cache;\n    }\n    public async Task<T> GetFromCache<T>(string key) where\n        T : class\n    {\n        var cachedResponse = await\n            _cache.GetStringAsync(key);\n        return cachedResponse == null ? null :\n            JsonSerializer.Deserialize<T>(cachedResponse);\n    }\n    public async Task SetCache<T>(string key, T value,\n        DistributedCacheEntryOptions options) where T :\n            class\n    {\n        var response = JsonSerializer.Serialize(value);\n        await _cache.SetStringAsync(key, response,\n            options);\n    }\n    public async Task ClearCache(string key)\n    {\n        await _cache.RemoveAsync(key);\n    }\n}\n```", "```cs\nInstall-Package Polly\nInstall-Package Microsoft.Extensions.Http.Polly\n```", "```cs\nbuilder.Services.AddHttpClient<IDocumentService,\n     DocumentService>()\n.AddPolicyHandler(GetRetryPolicy());\n```", "```cs\nstatic IAsyncPolicy<HttpResponseMessage> GetRetryPolicy()\n        {\n            return HttpPolicyExtensions\n                .HandleTransientHttpError()\n                .OrResult(r => !r.IsSuccessStatusCode)\n                .Or<HttpRequestException>()\n                .WaitAndRetryAsync(5, retryAttempt =>\n                   TimeSpan.FromSeconds(Math.Pow(2,\n                     retryAttempt)), (exception, timeSpan,\n                         context) => {\n                    // Add logic to be executed before each\n                    retry, such as logging or\n                      reauthentication\n                });\n        }\n```", "```cs\nbuilder.Services.AddHttpClient<IDocumentService,\n    DocumentService>().AddPolicyHandler(GetRetryPolicy())\n.AddPolicyHandler(GetCircuitBreakerPolicy());\n```", "```cs\nstatic IAsyncPolicy<HttpResponseMessage>\n    GetCircuitBreakerPolicy()\n{\n    return HttpPolicyExtensions\n        .HandleTransientHttpError()\n        .CircuitBreakerAsync(5, TimeSpan.FromSeconds(30));\n}\n```"]