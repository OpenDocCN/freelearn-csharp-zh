- en: Chapter 11. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 11 章。安全
- en: In the previous chapter, we saw some of the most applied and used principles
    about software design, design patterns, and the way they are implemented or can
    be used in the .NET Framework.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了一些关于软件设计、设计模式和它们在 .NET 框架中实现或使用方式的广泛应用和使用的原则。
- en: In this chapter, we're going to study security issues and recommendations; or
    measures to take in order to build and deploy secure applications. We'll also
    look at how these security problems affect .NET applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将研究安全问题和建议；或者构建和部署安全应用程序时应采取的措施。我们还将探讨这些安全问题如何影响 .NET 应用程序。
- en: Our starting point will be the **OWASP** (**Open Web Application Security Project**)
    proposal. OWASP is a security initiative that intends to offer, with a certain
    frequency, the latest on cyber security in terms of the types of possible flows,
    offering information about the best methods to deal with threats, prevention measures,
    and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的起点将是 **OWASP**（**开放网络应用安全项目**）的提案。OWASP 是一个安全倡议，旨在定期提供有关网络安全的最新的信息，包括可能的流量类型，提供关于处理威胁、预防措施等方面的最佳方法。
- en: We'll focus our analysis on the definitions and prevention measures for the
    top 10 security threats published by the OWASP organization, their implications
    for the developer, and in case it applies, how these measures can be implemented
    in .NET Framework solutions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的分析将集中在 OWASP 组织发布的十大安全威胁的定义和预防措施上，以及对于开发者的影响，以及在适用的情况下，这些措施如何在 .NET 框架解决方案中实施。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The OWASP initiative
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP 创新项目
- en: The OWASP top 10
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OWASP 前 10 大
- en: Injection
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注入
- en: Broken authentication and session management
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 破解认证和会话管理
- en: Cross-Site Scripting
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站脚本
- en: Insecure direct object references
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不安全直接对象引用
- en: Security misconfiguration
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全配置错误
- en: Sensitive data exposure
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏感数据泄露
- en: Missing function-level access control
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺少功能级访问控制
- en: Cross-site request forgery
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨站请求伪造
- en: Using components with known vulnerabilities
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用已知漏洞的组件
- en: Invalidated redirects and forwards.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无效的重定向和转发。
- en: The OWASP initiative
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP 创新项目
- en: 'The official definition of the **OWASP** is as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**OWASP** 的官方定义如下：'
- en: '"The Open Web Application Security Project (OWASP) is an open community dedicated
    to enabling organizations to develop, purchase, and maintain applications that
    can be trusted."'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “开放网络应用安全项目（OWASP）是一个开放的社区，致力于使组织能够开发、购买和维护可信赖的应用程序。”
- en: Initially, OWASP is thought to be a global set of guides and proposals about
    security, centralized and published by [OWASP.org](http://OWASP.org), a nonprofit
    organization focused on improving the security of software by making security
    visible, so organizations and individuals have a starting point that provides
    practical and impartial information about security issues.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，OWASP 被认为是一套关于安全的全球性指南和建议，由专注于通过使安全可见来提高软件安全性的非营利组织 [OWASP.org](http://OWASP.org)
    集中发布。
- en: Its official web page can be found at [https://www.owasp.org/index.php/Main_Page](https://www.owasp.org/index.php/Main_Page),
    and it offers guidelines about application security tools and standards as well
    as books, controls, and libraries, research on several security topics, worldwide
    conferences, mailing lists, and a long list of resources.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 它的官方网站可以在 [https://www.owasp.org/index.php/Main_Page](https://www.owasp.org/index.php/Main_Page)
    找到，它提供了关于应用安全工具和标准的指南，以及书籍、控件和库，多个安全主题的研究，全球会议，邮件列表以及一系列资源。
- en: 'OWASP official site announces itself as an entity:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 官方网站宣布自己是一个实体：
- en: '"free from commercial pressures", which –in their own words- allow them to
    "provide unbiased, practical, cost-effective information about application security".'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “摆脱商业压力”，用他们自己的话说，这使他们能够“提供无偏见、实用、成本效益的信息关于应用安全”。
- en: The OWASP Top 10
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OWASP Top 10
- en: Among the previously mentioned proposals, the so-called OWASP Top 10 is by far
    the most requested among programmers all over the world.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前提到的提案中，所谓的 OWASP Top 10 是全球程序员最需要的。
- en: Its main goal is to help developers identify the most critical security risks
    facing organizations. To help in the task, they publish a periodical bulletin
    which has been published since they started in 2010\. The current, updated version
    is the 2013 edition, although they're working on a version for 2017, which is
    not available at the time of writing this.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 它的主要目标是帮助开发者识别组织面临的最关键的安全风险。为了帮助完成这项任务，他们发布了一份定期公告，自2010年开始发布。当前的更新版本是2013年版，尽管他们正在为2017年版本工作，但撰写本文时该版本尚未可用。
- en: 'The top 10 vulnerabilities are presented in the following graphic. It assumes
    that the ordering is important, the first one being the most used or dangerous
    (or both, in many cases):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图形展示了前10个漏洞。它假设排序很重要，第一个是最常用或最危险的（在许多情况下两者都是）：
- en: '![The OWASP Top 10](img/image00645.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![OWASP Top 10](img/image00645.jpeg)'
- en: Also, keep in mind that often, an attack can be a compound of different steps,
    each step using some of these vulnerabilities (this happens in some of the most
    sophisticated attacks we know of).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，攻击通常可以由不同的步骤组成，每个步骤都使用这些漏洞中的某些（这种情况发生在我们知道的某些最复杂的攻击中）。
- en: 'In the diagram, OWASP explains a use case in which an actor gets access to
    a valuable resource and the elements involved in the process. Somehow, the vast
    majority of the attacks follow this sequence diagram:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中，OWASP解释了一个用例，其中某个行为者获得了对有价值资源的访问权限，以及涉及过程中的元素。不知何故，绝大多数攻击都遵循这个序列图：
- en: '![The OWASP Top 10](img/image00646.jpeg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![OWASP Top 10](img/image00646.jpeg)'
- en: 'As the paper states, the paths used by threat agents can be simple or tremendously
    complex. Often, they can be very difficult to identify and reproduce. They recommend
    the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 正如论文所述，威胁行为者使用的路径可以是简单的，也可以是非常复杂的。通常，它们很难识别和重现。他们建议以下做法：
- en: '"To determine the risk to your organization, you can evaluate the likelihood
    associated with each threat agent, attack vector, and security weakness and combine
    it with an estimate of the technical and business impact to your organization.
    Together, these factors determine the overall risk."'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “为了确定对您组织的风险，您可以评估每个威胁行为者、攻击向量和安全弱点相关的可能性，并将其与对您组织的技术和业务影响的估计相结合。这些因素共同决定了整体风险。”
- en: If you remember [Chapter 10](part0055.xhtml#aid-1KEEU1 "Chapter 10. Design Patterns"),
    *Design Patterns*, there is a relation to the Threat Model, that is, basically,
    the same message we mentioned when talking about threats.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得[第10章](part0055.xhtml#aid-1KEEU1 "第10章。设计模式")，*设计模式*，它与威胁模型有关，也就是说，基本上，这是我们讨论威胁时提到的相同信息。
- en: So, it seems that there's a consensus about security management and the principles
    that should be considered along the application's life cycle.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，似乎在安全管理及其应考虑的原则上已经达成共识。
- en: The top 10 list of threats that we are going to cover in this chapter explain
    the roots of every vulnerability, typical scenarios for attacks, and the recommended
    prevention measures. We'll review them and look at the ways in which they affect
    the C# and .NET programmers.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将要讨论的前10个威胁列表解释了每个漏洞的根源、攻击的典型场景以及推荐的预防措施。我们将回顾它们，并探讨它们如何影响C#和.NET程序员。
- en: 'Let''s start by quoting these ten definitions and establish them as the starting
    point of our analysis (there''s a free version of the document available at [http://www.owasp.org](http://www.owasp.org)):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先引用这十个定义，并将它们作为我们分析的开始点（文档的免费版本可在[http://www.owasp.org](http://www.owasp.org)找到）：
- en: '**A1 - Injection:** Injection flaws, such as SQL, OS, and LDAP injection occur
    when untrusted data is sent to an interpreter as part of a command or query. The
    attacker''s hostile data can trick the interpreter into executing unintended commands
    or accessing data without proper authorization.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A1 - 注入**：注入漏洞，如SQL、OS和LDAP注入，发生在不受信任的数据作为命令或查询的一部分发送到解释器时。攻击者的恶意数据可以欺骗解释器执行未授权的命令或访问数据。'
- en: '**A2 - Broken Authentication and Session Management Application**: Application
    functions related to authentication and session management are often not implemented
    correctly, allowing attackers to compromise passwords, keys, or session tokens,
    or to exploit other implementation flaws to assume other users'' identities.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A2 - 破解认证和会话管理应用**：与应用程序认证和会话管理相关的功能往往没有正确实现，这允许攻击者泄露密码、密钥或会话令牌，或者利用其他实现缺陷来冒充其他用户的身份。'
- en: '**A3 - Cross-Site Scripting (XSS)**: XSS flaws occur whenever an application
    takes untrusted data and sends it to a web browser without proper validation or
    escaping. XSS allows attackers to execute scripts in the victim''s browser which
    can hijack user sessions, deface web sites, or redirect the user to malicious
    sites.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A3 - 跨站脚本 (XSS)**：XSS漏洞发生在应用程序未经适当验证或转义就将不受信任的数据发送到Web浏览器时。XSS允许攻击者在受害者的浏览器中执行脚本，这可以劫持用户会话、篡改网站或将用户重定向到恶意网站。'
- en: '**A4 - Insecure Direct Object References**: A direct object reference occurs
    when a developer exposes a reference to an internal implementation object, such
    as a file, directory, or database key. Without an access control check or other
    protection, attackers can manipulate these references to access unauthorized data.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A4 - 不安全的直接对象引用**：直接对象引用发生在开发人员暴露对内部实现对象的引用时，例如文件、目录或数据库键。如果没有访问控制检查或其他保护措施，攻击者可以操纵这些引用以访问未经授权的数据。'
- en: '**A5 - Security Misconfiguration**: Good security requires having a secure
    configuration defined and deployed for the application, frameworks, application
    server, web server, database server, and platform. Secure settings should be defined,
    implemented, and maintained, as defaults are often insecure. Additionally, software
    should be kept up to date.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A5 - 安全配置错误**：良好的安全需要为应用程序、框架、应用程序服务器、Web服务器、数据库服务器和平台定义并部署安全的配置。应定义、实施和维护安全设置，因为默认设置通常是不安全的。此外，软件应保持更新。'
- en: '**A6 – Sensitive Data Exposure**: Many web applications do not properly protect
    sensitive data, such as credit cards, tax IDs, and authentication credentials.
    Attackers may steal or modify such weakly protected data to conduct credit card
    fraud, identity theft, or other crimes. Sensitive data deserves extra protection
    such as encryption at rest or in transit, as well as special precautions when
    exchanged with the browser.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A6 – 敏感数据泄露**：许多Web应用程序没有正确保护敏感数据，例如信用卡、税务ID和认证凭证。攻击者可能会窃取或修改这些薄弱保护的数据，以进行信用卡欺诈、身份盗窃或其他犯罪。敏感数据应得到额外保护，例如在静态或传输中加密，以及在与其他浏览器交换时采取特殊预防措施。'
- en: '**A7 – Missing Function Level Access Control**: Most web applications verify
    function level access rights before making that functionality visible in the UI.
    However, applications need to perform the same access control checks on the server
    when each function is accessed. If requests are not verified, attackers will be
    able to forge requests in order to access functionality without proper authorization.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A7 – 缺失的功能级别访问控制**：大多数Web应用程序在将功能可见于用户界面之前会验证功能级别的访问权限。然而，当每个功能被访问时，应用程序需要在服务器上执行相同的访问控制检查。如果请求未经验证，攻击者将能够伪造请求以未经授权的方式访问功能。'
- en: '**A8 - Cross-Site Request Forgery (CSRF)**: A CSRF attack forces a logged-on
    victim''s browser to send a forged HTTP request, including the victim''s session
    cookie and any other automatically included authentication information, to a vulnerable
    web application. This allows the attacker to force the victim''s browser to generate
    requests that the vulnerable application thinks are legitimate requests from the
    victim.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A8 - 跨站请求伪造 (CSRF)**：CSRF攻击迫使已登录受害者的浏览器发送一个伪造的HTTP请求，包括受害者的会话cookie和任何其他自动包含的认证信息，到易受攻击的Web应用程序。这允许攻击者强制受害者的浏览器生成易受攻击的应用程序认为是从受害者那里发出的合法请求。'
- en: '**A9 - Using Components with Known Vulnerabilities**: Components, such as libraries,
    frameworks, and other software modules, almost always run with full privileges.
    If a vulnerable component is exploited, such an attack can facilitate serious
    data loss or server takeover. Applications using components with known vulnerabilities
    may undermine application defenses and enable a range of possible attacks and
    impacts.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A9 - 使用已知漏洞的组件**：组件，如库、框架和其他软件模块，几乎总是以完全权限运行。如果易受攻击的组件被利用，此类攻击可以导致严重的数据丢失或服务器接管。使用已知漏洞组件的应用程序可能会削弱应用程序的防御，并启用一系列可能的攻击和影响。'
- en: '**A10 – Unvalidated Redirects and Forwards**: Web applications frequently redirect
    and forward users to other pages and websites, and use untrusted data to determine
    the destination pages. Without proper validation, attackers can redirect victims
    to phishing or malware sites, or use forwards to access unauthorized pages.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**A10 – 未经验证的跳转和转发**：Web应用程序经常将用户跳转到其他页面和网站，并使用不受信任的数据来确定目标页面。如果没有适当的验证，攻击者可以将受害者重定向到钓鱼或恶意网站，或使用转发来访问未经授权的页面。'
- en: As we can see, there are 10 distinct areas to care about, which we should consider
    as programmers, although the team in charge of envisioning and planning the application
    should also keep them in mind from the very beginning of any software project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，有10个不同的区域需要关注，作为程序员，我们应该考虑这些区域，尽管负责构思和规划应用程序的团队也应该从任何软件项目的开始就牢记这些。
- en: 'So, let''s go with the A1 threat, which is the mother of all evil for many
    programmers: injection in its many flavors.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们来看看A1威胁，这是许多程序员眼中所有邪恶的根源：各种形式的注入。
- en: A1 – injection
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A1 – 注入
- en: The injection threat is always based on input data from the user. An interpreter
    will take this information and, presumably, incorporate the data into the normal
    flow of a sentence that is to be executed behind the scenes.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注入威胁始终基于用户的输入数据。一个解释器将获取这些信息，并假设将这些数据纳入要执行的句子背后的正常流程中。
- en: So, the key here is that potential attacks should know the engine they're trying
    to surpass. However, the three main engines mentioned by A1 are SQL, OS, and LDAP,
    the first one being the most common (and that's why it's the most dangerous).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，关键在于潜在的攻击者应该知道他们试图超越的引擎。然而，A1提到的三个主要引擎是SQL、操作系统和LDAP，其中第一个是最常见的（这也是为什么它是最危险的）。
- en: SQL injection
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL注入
- en: 'SQL injection is, perhaps, the most well-known of them all. It''s based on
    some characteristics of the SQL language:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: SQL注入可能是其中最广为人知的。它基于SQL语言的一些特性：
- en: Several sentences can be linked together, separated by a semicolon (`;`)
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以用分号（`;`）分隔多个句子连接在一起
- en: You can insert an inline comment with a double dash (`--`)
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以使用双破折号（`--`）插入内联注释
- en: The programmer doesn't care about the contents introduced by the user and adds
    those contents to a string that is passed to the interpreter, which blindly executes
    the command:![SQL injection](img/image00647.jpeg)
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员不关心用户引入的内容，并将这些内容添加到传递给解释器的字符串中，解释器盲目地执行命令：![SQL注入](img/image00647.jpeg)
- en: As you can see in the figure, you just have to pass the sentence `or 1=1 --`
    to make it work. If the final sentence is something like `Select [User] from [Users]
    where [Password] = whatever`, although you don't include the right password, the
    following sentence is true, since `1 = 1` is true, and whatever the programmer
    put next to it is ignored due to the double dash comment. So, you're validated
    and you get into the system. Many other possibilities or variations are also possible
    but are always based on the same idea. The risk can be enormous, since they can
    even concatenate or delete sentences or even call stored procedures, such as `xp_cmsShell`,
    which executes sentences in the target system, thus getting total control over
    it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 正如图中所示，你只需传递句子`or 1=1 --`即可使其工作。如果最终句子类似于`Select [User] from [Users] where [Password]
    = whatever`，尽管你没有包括正确的密码，但由于`1 = 1`是真的，并且由于双破折号注释，程序员放在其旁边的任何内容都被忽略。因此，你被验证并通过了系统。还有许多其他可能性或变体也是可能的，但它们始终基于相同的思想。风险可能非常大，因为它们甚至可以连接或删除句子，甚至调用存储过程，如`xp_cmsShell`，它在目标系统中执行句子，从而完全控制它。
- en: 'In the worst case, it can even insert a Trojan inside the machine. Imagine
    the Trojan is called `xp_tr.dll` and that it''s located in our `C:\temp` directory.
    We can use a sentence like this (next to the previous code):'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在最坏的情况下，它甚至可以在机器中插入一个木马。想象一下，木马被命名为`xp_tr.dll`，并且它位于我们的`C:\temp`目录中。我们可以在之前的代码旁边使用这样的句子：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will register our Trojan as a stored procedure, which we will call using
    `xp_webserver`, from that moment obtaining the functionality installed therein.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 从那一刻起，我们将使用`xp_webserver`来调用我们的木马作为存储过程，从而获得其中安装的功能。
- en: Prevention
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: 'The defense? Don''t trust any input from the user and therefore utilize a parsing
    mechanism that forces the coming string to be what you expect. As you can see,
    the problem goes beyond the type of application: it could be a desktop application
    or a website: the problem is always the same.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 防御措施？不要信任任何来自用户的输入，因此利用一种解析机制，强制即将到来的字符串成为你期望的样子。正如你所见，问题不仅限于应用程序类型：它可能是桌面应用程序或网站：问题始终相同。
- en: So, any data input is potentially evil. It doesn't matter who's coming from
    or where. That's what OWASP calls a threat agent.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，任何数据输入都有可能是恶意的。无论数据来自何方或何人。这就是OWASP所说的威胁代理。
- en: 'The are three main strategies for defense against these kind of attacks:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 防御这类攻击主要有三种主要策略：
- en: Use parameterized queries, also called prepared statements
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用参数化查询，也称为预定义语句
- en: Use stored procedures
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用存储过程
- en: Escape all input coming from the user
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转义所有来自用户的输入
- en: 'Let''s take a look at how the first case looks:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看第一个案例是如何表现的：
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this case, the potential dangerous parameter is created as a new `OleDbParameter
    object`, and that would not be possible if the user inserts a string not suitable
    for the task. This can be said for other types of parameters, such as `SQLParameter`
    if the client is `SQLClient`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，潜在的危险参数被创建为一个新的 `OleDbParameter` 对象，如果用户插入一个不适合任务的字符串，这是不可能的。这同样适用于其他类型的参数，例如，如果客户端是
    `SQLClient`，则可能是 `SQLParameter`。
- en: The second solution is to use stored procedures. As long as the programmer doesn't
    include any unsafe stored procedure generation, the effect of parameterized queries
    is the same as in the previous case.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种解决方案是使用存储过程。只要程序员不包含任何不安全的存储过程生成，参数化查询的效果与上一个案例相同。
- en: 'The following code assumes that there is a `SQLConnection` object available
    and there''s a stored procedure object stored in the SQL server that the connection
    points to, named `sp_getAccountBalance`. The process of the creation of a new
    `SQLParameter` object goes through a similar check as the first case:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码假设存在一个 `SQLConnection` 对象，并且连接指向的 SQL 服务器中存储了一个名为 `sp_getAccountBalance`
    的存储过程对象。创建新的 `SQLParameter` 对象的过程与第一个案例类似：
- en: '[PRE2]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The third case deals with escaping the input (or **White List Input Validation**),
    which can be done in several ways. This could be the case when the table to be
    used is selected dynamically by the user. The best way to avoid risks in this
    scenario is to provide a white list of possible values, avoiding any other input.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个案例涉及输入的转义（或**白名单输入验证**），这可以通过几种方式完成。这可能是在用户动态选择要使用的表时的情况。在这种情况下避免风险的最佳方式是提供一个可能的值白名单，避免任何其他输入。
- en: 'This is equivalent to the usage of an `Enum` type, specifying the possible
    tables that the query is going to admit:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于使用 `Enum` 类型，指定查询将要接受的可能的表：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Besides the previous techniques, there are other specific solutions related
    to the distinct RDBMS. For SQL Server databases, a good article on the subject
    can be found at [https://blogs.msdn.microsoft.com/raulga/2007/01/04/dynamic-sql-sql-injection/](https://blogs.msdn.microsoft.com/raulga/2007/01/04/dynamic-sql-sql-injection/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了上述技术之外，还有其他与特定 RDBMS 相关的特定解决方案。对于 SQL Server 数据库，可以在 [https://blogs.msdn.microsoft.com/raulga/2007/01/04/dynamic-sql-sql-injection/](https://blogs.msdn.microsoft.com/raulga/2007/01/04/dynamic-sql-sql-injection/)
    找到一篇关于该主题的好文章。
- en: The case for NoSQL databases
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无SQL数据库的案例
- en: The official documentation offers some insights about possible attacks using
    SQL injection against non relational engines.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档提供了一些关于使用 SQL 注入攻击非关系型引擎的可能攻击的见解。
- en: In the case of the MongoDB engine we examined in [Chapter 7](part0039.xhtml#aid-1565U1
    "Chapter 7. NoSQL Database Programming"), *NoSQL Database Programming*, the problem
    arises when an attacker is able to operate on the information passed using the
    `$where` operator, including some JavaScript code that can be parsed as part of
    the MongoDB query.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们考察的 [第7章](part0039.xhtml#aid-1565U1 "第7章。无SQL数据库编程") 的 MongoDB 引擎案例中，当攻击者能够操作使用
    `$where` 操作符传递的信息时，包括一些可以解析为 MongoDB 查询一部分的 JavaScript 代码时，问题就出现了。
- en: 'Consider the following example in which the code is passed directly into the
    MongoDB query without any checking:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例，其中代码直接传递到 MongoDB 查询中，没有任何检查：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The trick here lies in using special characters with a special meaning to the
    API behind the engine. An attacker can observe if the application is sanitizing
    the input by checking the results on including certain characters to observe whether
    that triggers an error.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的技巧在于使用对引擎背后的 API 有特殊意义的特殊字符。攻击者可以通过检查包含某些字符的结果来确定应用程序是否正在清理输入。
- en: The injection of special characters relevant to the target API language and
    observation of the results may allow a tester to determine if the application
    correctly sanitized the input. For example, within MongoDB, if a string containing
    any of the following special characters (`'` `"` `\` `;` `{` `}`) was passed without
    control, it would trigger a database error.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 注入与目标 API 语言相关的特殊字符，并观察结果，可能允许测试人员确定应用程序是否正确清理了输入。例如，在 MongoDB 中，如果传递了一个包含以下特殊字符（`'`
    `"` `\` `;` `{` `}`）的字符串而没有控制，就会触发数据库错误。
- en: 'Nonetheless, since JavaScript is a fully featured language, it allows an attacker
    to manipulate data and also run arbitrary code. Imagine the following code being
    inserted into the `$userInput` variable mentioned in the previous code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，由于 JavaScript 是一种功能齐全的语言，它允许攻击者操纵数据并运行任意代码。想象以下代码被插入到之前代码中提到的 `$userInput`
    变量中：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The JavaScript code will be executed…
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 代码将被执行...
- en: 'The previously mentioned resource in OWASP will give you clues and advice about
    other types of injections: LDAP Injection, XML Injection, Command Injection, ORM
    Injection, SSI (Server-side includes) Injection, and so on.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的 OWASP 资源将为您提供有关其他类型注入的线索和建议：LDAP 注入、XML 注入、命令注入、ORM 注入、SSI（服务器端包含）注入等。
- en: In general, the *OWASP Testing Guide v4 Table of Contents* documentation([https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents](https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents))
    of the initiative is an exhaustive and updated source to analyze and look for
    guidance through the amazing number of attacks related to these types of security
    threats.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，*OWASP 测试指南 v4 目录*文档([https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents](https://www.owasp.org/index.php/OWASP_Testing_Guide_v4_Table_of_Contents))是该活动的详尽和更新资源，用于分析和寻找与这些类型安全威胁相关的众多攻击的指导。
- en: A2 – Broken Authentication and Session Management
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A2 – 破解认证和会话管理
- en: 'The problem here is related to identity and permissions. As the official definition
    states:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题与身份和权限相关。正如官方定义所述：
- en: '"Application functions related to authentication and session management are
    often not implemented correctly, allowing attackers to compromise passwords, keys,
    or session tokens, or to exploit other implementation flaws to assume other users''
    identities."'
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “与认证和会话管理相关的应用程序功能通常没有正确实现，这允许攻击者破坏密码、密钥或会话令牌，或者利用其他实现缺陷来假设其他用户的身份。”
- en: This is even worse when the false authenticated users are remote (the typical
    case) and therefore difficult to track.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚假认证的用户是远程的（典型情况）且因此难以追踪时，这甚至更糟。
- en: 'The problems here are multiple:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题有很多：
- en: We might accept unwanted users (information and operation disclosure)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能会接受不受欢迎的用户（信息和操作披露）
- en: A variant of this is when an unwanted user gets administrator privileges, thus
    putting the whole system at risk
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当不受欢迎的用户获得管理员权限，从而将整个系统置于风险之中时，这是一种这种攻击的变体。
- en: We might accept a user with credentials beyond the legitimate use of information
    for these credentials
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能会接受一个拥有超出合法信息使用凭证的用户
- en: Generally speaking, we can say this is a problem of impersonation or elevation
    of privileges (either because the attacker has no privilege at all or because
    it raises itself to a superior level than originally intended).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，我们可以将其视为一个模拟或提升权限的问题（无论是攻击者根本没有任何权限，还是它提升到了比原本意图更高的级别）。
- en: The causes
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原因
- en: 'There are several causes for this. The most widely recognized are as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这有几个原因。最广为人知的如下：
- en: User authentication is unprotected when stored (hashing or encryption should
    be used)
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户认证在存储时未受保护（应使用哈希或加密）
- en: Weakness of passwords may allow an attacker to gain access to a *brute force*
    procedure (usually trying to get in using a list of known passwords that are most
    commonly used)
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码的弱点可能允许攻击者通过*暴力破解*过程（通常尝试使用最常见的已知密码列表）获得访问权限
- en: Session IDs can be exposed via URLs, be vulnerable to session fixation, don't
    have a timeout, or they're not properly invalidated at logout time
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 会话ID可以通过URL暴露，容易受到会话固定的攻击，没有超时，或者在注销时没有正确失效
- en: Of course, all this information is not sent over an encrypted connection
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当然，所有这些信息都不是通过加密连接发送的
- en: This is perhaps the more popular attack of all, since it's very usual to find
    it in literature and movies about hacking (often over exaggerated, let's say).
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是所有攻击中最受欢迎的，因为它在关于黑客的文献和电影中非常常见（通常被过度夸张，比如说）。
- en: 'It is usually seen next to other techniques of the so-called *social engineering*,
    which is defined by Wikipedia as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常与其他所谓的*社会工程学*技术并列出现，Wikipedia 对其定义为如下：
- en: psychological manipulation of people into performing actions or divulging confidential
    information.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 心理操纵人们执行行动或泄露机密信息。
- en: Many well-known hackers, such as Kevin Mitnick, are considered real masters
    in this art (he runs a cyber security company of his own now).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 许多著名的黑客，如凯文·米特尼克（Kevin Mitnick），被认为是这一领域的真正大师（他现在自己经营着一家网络安全公司）。
- en: Of course, in the OWASP initiative, we can find abundant information about the
    best ways to cope with this threat depending on different scenarios.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在OWASP（开放网络应用安全项目）的倡议中，我们可以找到关于根据不同场景应对这种威胁的最佳方法的丰富信息。
- en: Prevention
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预防
- en: 'What can we do to proactively prevent this type of attack? There are some well
    established measures:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以采取哪些措施来积极预防这种攻击？有一些已建立的措施：
- en: First, developers should always have a single set of strong authentication and
    session management controls available. Thus, authentication and session management
    should comply with the requirements established in OWASP **Application Security
    and Verification Standard** (**ASVS**) and areas V2 (Authentication) and V3 (Session
    Management).
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，开发人员应始终提供一套强大的单一身份验证和会话管理控制。因此，身份验证和会话管理应符合OWASP **应用安全与验证标准**（**ASVS**）以及区域V2（身份验证）和V3（会话管理）中规定的需求。
- en: The document is available at [https://www.owasp.org/index.php/ASVS](https://www.owasp.org/index.php/ASVS)
    and has been recently updated (version 3.0.1 as of July 2016).
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该文档可在[https://www.owasp.org/index.php/ASVS](https://www.owasp.org/index.php/ASVS)找到，并已最近更新（截至2016年7月为版本3.0.1）。
- en: Developers should maintain a simple interface. Recommendations on this are widely
    explained in the ESAPI authenticator and user APIs.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员应保持一个简单的界面。关于这一点的建议在ESAPI身份验证器和用户API中得到了广泛解释。
- en: Although this belongs to the A3 type of threat, the consideration of possible
    Cross-Site Scripting should also be primordial in this case.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虽然这属于A3类型的威胁，但在这种情况下，考虑可能的跨站脚本攻击也应是最重要的。
- en: The ASVS has three levels of prevention, **opportunistic**, **standard**, and
    **advanced**.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: ASVS有三个级别的预防措施，**机会主义**、**标准**和**高级**。
- en: The first level is said to be achieved when an application adequately defends
    against application security vulnerabilities that are easy to discover, and included
    in the OWASP Top 10 and other similar checklists (as defined in the official documentation
    ([https://www.owasp.org/images/6/67/OWASPApplicationSecurityVerificationStandard3.0.pdf](https://www.owasp.org/images/6/67/OWASPApplicationSecurityVerificationStandard3.0.pdf)).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个应用程序充分防御易于发现的应用安全漏洞，并且包括在OWASP Top 10和其他类似清单中（如官方文档中定义的）时，据说已达到第一级水平。
- en: This type of protection seems adequate when there are no special risks in the
    assets the application manages or if the type of expected attacks will not go
    beyond the use of simple low effort techniques to identify easy-to-find and easy-to-exploit
    vulnerabilities.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序管理的资产没有特殊风险，或者预期的攻击类型不会超出使用简单低效技术来识别易于发现和利用的漏洞时，这种保护似乎足够了。
- en: Level 1 should be the minimum required for all applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 第1级应该是所有应用程序所需的最小要求。
- en: The second level (standard) is obtained when we are defending against most of
    the risks associated with software today. It's typically appropriate for applications
    that handle significant business-to-business transactions, including those that
    process healthcare information, implement business-critical or sensitive functions,
    or process other sensitive assets, indicating the ASVS.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们防御今天软件的大多数风险时，我们达到了第二级（标准）水平。这通常适用于处理大量企业对企业交易的应用程序，包括处理医疗信息、实施业务关键或敏感功能或处理其他敏感资产的应用程序，这表明了ASVS（应用安全验证标准）。
- en: Finally, level 3 is reserved for applications where significant levels of security
    verification are required, such as those found in the areas of military, health
    and safety, critical infrastructure, and so on.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，第3级是为需要高等级安全验证的应用程序保留的，例如军事、健康和安全、关键基础设施等领域。
- en: An organization could require ASVS level 3 in software that performs critical
    functions, where a failure might impact the operations and even the organization's
    survival.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 对于执行关键功能且故障可能影响运营甚至组织生存的软件，组织可能需要ASVS第3级。
- en: .NET coding for A2
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: A2的.NET编码
- en: In .NET programming, we have a bunch of possibilities to enforce security authentication
    and authorization as well as many other options, including special namespaces
    dedicated to security (`System.Security`) and cryptography (`System.Security.Cryptography`).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET编程中，我们有多种可能性来强制执行安全身份验证和授权，以及许多其他选项，包括专门用于安全性的命名空间（`System.Security`）和加密（`System.Security.Cryptography`）。
- en: Desktop applications
  id: totrans-127
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 桌面应用程序
- en: For desktop applications, the main security level is based on login, of course.
    This means that the only access to the application should be through a login window,
    launched at the beginning against a secure store system (preferably a database).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于桌面应用程序，主要的安全级别当然是基于登录。这意味着应用程序的唯一访问应该通过登录窗口，在开始时针对一个安全存储系统（最好是数据库）启动。
- en: There is not much to say in this case, since it's all about avoiding any SQL
    injection in the way we saw in the previous point.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下没有太多可说的，因为这都是关于避免我们在前一点看到的方式中的任何SQL注入。
- en: However, a couple of considerations should be measured. First, for those cases
    in which the application is simple and the password should be stored in the `app.config`
    file, the password needs encryption.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有几项考虑应该被衡量。首先，对于那些应用程序简单且密码应存储在`app.config`文件中的情况，密码需要加密。
- en: 'We can do this very easily, in many ways, using the .NET resources: for instance,
    we can access hashing and encryption classes already prepared for this usage.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用.NET资源非常容易地做到这一点，有很多种方法：例如，我们可以访问已经为这种用途准备好的哈希和加密类。
- en: 'The following sample code will give you an idea about how to use it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例代码将给你一个关于如何使用它的想法：
- en: '[PRE6]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, the algorithm used here is not the most secure one, since it seems
    to have been compromised lately. So, it would be better to use a more advanced
    version such as `SHA256Managed`, instead. Consequently, the initialization of
    the provider should be done using the following code:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这里使用的算法并不是最安全的，因为它最近似乎已经被破坏了。所以，最好使用更高级的版本，例如`SHA256Managed`。因此，提供者的初始化应该使用以下代码：
- en: '[PRE7]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Web applications
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络应用程序
- en: 'When talking about the old ASP.NET Web Forms applications, the truth is that
    they implement security pretty well (all in the server):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 当谈到旧的ASP.NET Web Forms应用程序时，事实是它们在服务器上实现了很好的安全性：
- en: 'To start with, there''s something that server components do automatically:
    encoding HTML values and attributes so that they prevent XSS attacks, which we
    will discuss in the next point (A3)'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，有一些服务器组件会自动执行的事情：对HTML值和属性进行编码，以防止XSS攻击，我们将在下一点（A3）中讨论。
- en: Besides, `ViewState` is also ciphered and validated in a way that it can avoid
    "tampering" form the post information
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，`ViewState`也被加密并验证，以避免来自发布信息的“篡改”。
- en: Programmers have a `validaterequest` attribute available in the `@page` declaration,
    which can be used to catch suspicious data
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 程序员在`@page`声明中有一个`validaterequest`属性可用，可以用来捕获可疑数据。
- en: Another way to prevent attacks through injection is event validation in order
    to control invalid posted information
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种防止通过注入攻击的方法是事件验证，以控制无效的已发布信息。
- en: However, in ASP.NET MVC, most of this functionality is not present. So, we have
    another set of choices to ensure these features.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在ASP.NET MVC中，这些功能中的大多数都不存在。因此，我们有另一组选择来确保这些功能。
- en: 'To start with, when you create a new ASP.NET MVC application, you are offered
    some choices about authentication:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，当你创建一个新的ASP.NET MVC应用程序时，你会得到一些关于身份验证的选择：
- en: No authentication
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无身份验证
- en: Individual user accounts
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 个人用户账户
- en: Work and school accounts
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作和学校账户
- en: Windows authentication
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows身份验证
- en: The second choice (individual accounts) allows the user to authenticate via
    Facebook, Twitter, or Google accounts (or even another security mechanism).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个选择（个人账户）允许用户通过Facebook、Twitter或Google账户（甚至另一个安全机制）进行身份验证。
- en: 'The third choice is for applications that authenticate users with Active Directory,
    Microsoft Azure Active Directory, or Office 365\. You can choose single or multiple
    organizations or on-premises infrastructure, as shown in the next screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个选择是为那些使用Active Directory、Microsoft Azure Active Directory或Office 365对用户进行身份验证的应用程序。你可以选择单个或多个组织或本地基础设施，如下一张截图所示：
- en: '![Web applications](img/image00648.jpeg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![网络应用程序](img/image00648.jpeg)'
- en: Of course, in **Windows Authentication**, all users logged into the system are
    allowed to get in.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在**Windows身份验证**中，所有登录到系统的用户都被允许进入。
- en: In case you opt for an individual authentication, the prototype project that
    Visual Studio creates for us gives us some clues about how to code it correctly.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择个人认证，Visual Studio为我们创建的原型项目给我们提供了一些关于如何正确编码的线索。
- en: If you take a look at the default project, you'll see there are several classes
    that implement all the management about identities, passwords, and so on. This
    is included in the `ManageControllers.cs` file, which is generated by the default
    project.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看默认项目，您会看到有几个类实现了关于身份、密码等方面的所有管理。这包含在由默认项目生成的`ManageControllers.cs`文件中。
- en: The preferred measure to take in this case is the use of attributes in those
    controllers that might compromise security. Attributes for authorization allow
    you to configure who's allowed to use the corresponding controller (or the action
    method if you want to get more granular control).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，采取的推荐措施是使用可能损害安全性的那些控制器中的属性。授权属性允许您配置谁可以使用相应的控制器（或者如果您想获得更细粒度的控制，可以使用动作方法）。
- en: 'This code explains how to implement several security features:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码解释了如何实现几个安全功能：
- en: On the one hand, these methods marked with the `[HttpPost]` attribute are also
    marked with another attribute, `[AntiForgeryToken]`. This is used to prevent a
    type of attack related to the OWASP A8 (Cross-Site Request Forgery), and we will
    go over it later.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一方面，这些带有`[HttpPost]`属性的标记方法也带有另一个属性，即`[AntiForgeryToken]`。这用于防止与OWASP A8（跨站请求伪造）相关的一种攻击，我们稍后会讨论。
- en: Besides, the entire `ManageController` class is marked with the `[Authorize]`
    attribute. This attribute stops any non authorized user to access this method,
    and if an attempt is made to access it, an exception will be thrown. `Authorize`
    forces the application to repudiate any user that is not—both—authenticated and
    authorized.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，整个`ManageController`类都带有`[Authorize]`属性。此属性阻止任何未经授权的用户访问此方法，如果尝试访问它，将抛出异常。`Authorize`强制应用程序拒绝任何既未认证也未授权的用户。
- en: 'This attribute allows some customization by the programmer: you can indicate
    specific roles, specific users, or both, as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性允许程序员进行一些自定义：您可以根据以下截图指示特定的角色、特定的用户或两者，如下所示：
- en: '![Web applications](img/image00649.jpeg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![Web应用程序](img/image00649.jpeg)'
- en: Besides these measures, a look at the `AccountController` class shows several
    methods that are marked with security attributes as well. The class itself is
    marked with `AuthorizeAttribute`, but we find some methods marked with `[AllowAnonymous]`
    too. The reason is because some actions and controllers are skipped by `AuthorizeAttribute`
    during authorization and are intended to allow initial access to these methods.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些措施之外，查看`AccountController`类可以看到几个带有安全属性标记的方法。该类本身带有`AuthorizeAttribute`标记，但我们还发现一些方法带有`[AllowAnonymous]`标记。原因是某些动作和控制器在授权过程中被`AuthorizeAttribute`跳过，目的是允许对这些方法进行初始访问。
- en: As for the second way to authenticate, that is, via external logins provided
    by Google, Twitter, or Facebook, this is now possible thanks to `OAuth` and `OpenID`,
    two standards for authentication widely used in social networks.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 至于第二种认证方式，即通过Google、Twitter或Facebook提供的外部登录，现在可以通过`OAuth`和`OpenID`实现，这两个标准是社交网络中广泛使用的认证标准。
- en: The protocols associated with these standards were not easy to implement in
    the past because they are complex; also, some top providers are used to implement
    them with some differences. Fortunately, the MVC project template eases the way
    we can manage these options.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 与这些标准相关的协议在过去不容易实现，因为它们很复杂；此外，一些顶级提供者习惯于以某些差异来实现它们。幸运的是，MVC项目模板简化了我们可以管理这些选项的方式。
- en: 'The following (commented) code appears just like this in the project in order
    to allow you to code these new options with these external providers (you''ll
    find them in the `Startup.Auth.cs` file):'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下（注释的）代码在项目中看起来就像这样，以便您可以使用这些外部提供者（您可以在`Startup.Auth.cs`文件中找到它们）来编写这些新选项：
- en: '[PRE8]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see, each provider requires some kind of user and password combination,
    which you can save in the storage media selected for this purpose.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个提供者都需要某种用户和密码组合，您可以将它们保存在为此目的选定的存储介质中。
- en: 'Finally, note that there are other attributes in relation to security that
    you might use: for example, you can force a callback from an external provider
    in order to use HTTPS instead of HTTP by adding the `[RequireHttps]` attribute,
    which is linked to the critical action method you want to protect.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意还有其他与安全相关的属性你可能可以使用：例如，你可以通过添加 `[RequireHttps]` 属性来强制从外部提供者回调以使用HTTPS而不是HTTP，该属性与你要保护的临界操作方法相关联。
- en: In this manner, you have an extra layer of security with just a single attribute.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，你只需一个属性就能增加一层额外的安全防护。
- en: A3 – Cross-Site Scripting (XSS)
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A3 – 跨站脚本（XSS）
- en: XSS is said to be one of the most problematic security issues due to the lack
    of knowledge about it and its lack of prevention among the developer's community.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 由于开发者社区对其缺乏了解以及缺乏预防措施，XSS被认为是最具问题的安全问题之一。
- en: 'This is quite simple in some of its implementations, though, and that''s why
    it is so dangerous. There are three known forms of XSS attacks: stored, reflected,
    and DOM based.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在某些实现中这很简单，但这也是为什么它如此危险。已知有三种XSS攻击形式：存储型、反射型和基于DOM的。
- en: 'One of the official examples of these attacks (reflected) presents the following
    code:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些攻击的官方示例之一（反射型）展示了以下代码：
- en: '[PRE9]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'That is, the pages build an input field based on a request. Also, an attacker
    can modify the page in this way:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 即，页面根据请求构建一个输入字段。此外，攻击者还可以以这种方式修改页面：
- en: '[PRE10]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'What happens? The inserted code reflects the requested information about a
    user to the attacker, or to say it as in the OWASP documentation:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么？插入的代码将请求的用户信息反射给攻击者，或者换句话说，就像OWASP文档中提到的：
- en: '"This causes the victim''s SessionID is sent to the attacker''s website, allowing
    the attacker to hijack the user''s current session."'
  id: totrans-176
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “这会导致受害者的SessionID被发送到攻击者的网站，允许攻击者劫持用户的当前会话。”
- en: The stored version of XSS (there are many, though) is a typical type of attack
    related to any possible user input, such as a blog with user comments, and so
    on. The attacker's response is saved in the website's storage system, and that's
    why the name.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 存储型XSS（虽然有很多种）是与任何可能的用户输入相关的典型攻击类型，例如带有用户评论的博客等。攻击者的响应被保存在网站的存储系统中，这就是为什么叫这个名字。
- en: In this scenario, the first thing that an attacker will do is insert into the
    answer, a character that should be escaped to see whether, indeed, it is escaped
    (something like a `<`, for example). If the character shows up (it is not escaped),
    it means that the programmer doesn't check input in the comments.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，攻击者首先会做的事情是在答案中插入一个应该被转义的字符，以查看它是否确实被转义（例如，像 `<` 这样的字符）。如果字符出现（没有被转义），这意味着程序员没有在注释中检查输入。
- en: 'Now comes the tricky part: instead of just a humble `<` sign, you can insert
    something like this:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是棘手的部分：你不仅可以插入一个简单的 `<` 符号，还可以插入类似这样的内容：
- en: '[PRE11]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Since this is to be rendered on the page with the rest of the contents, whatever
    you write will be inserted and shown also. Of course, it would be more evil if
    instead of using just an iframe, youinsert a script tag that loads some dangerous
    JavaScript:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这将在页面上与内容一起渲染，所以你写的任何内容都将被插入并显示。当然，如果你不是仅仅使用iframe，而是插入一个加载一些危险JavaScript的脚本标签，那就更邪恶了：
- en: '[PRE12]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will remain unnoticed to the users since the new anchor tag doesn't contain
    any text and is unseen. This script will now run when any user visits the Web,
    sending the attacker the information that the JavaScript code is prepared to send.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 由于新的锚点标签不包含任何文本且不可见，因此用户将不会注意到这一点。现在，当任何用户访问网站时，此脚本将运行，向攻击者发送JavaScript代码已准备发送的信息。
- en: Some authors call this technique passive injection as opposed to active injection,
    in which without knowing the risks, the user participates in the hacking process.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一些作者将这种技术称为被动注入，而不是主动注入，在主动注入中，用户在不知道风险的情况下参与了黑客攻击过程。
- en: 'Finally, the DOM-based version of XSS uses DOM tags to perform their actions.
    These attacks modify tags that are known to search and load external content:
    `img`, `link`, `script`, `input`, `iframe`, `object`, and even `body`, `div`,
    or `table` with the excuse of changing the background property.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，基于DOM的XSS版本使用DOM标签执行其操作。这些攻击修改了已知用于搜索和加载外部内容的标签：`img`、`link`、`script`、`input`、`iframe`、`object`，甚至`body`、`div`或`table`，以改变背景属性为借口。
- en: 'Here are some examples of these attacks:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些这些攻击的示例：
- en: '[PRE13]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Note that even *innocent* tags, such as `div`, `table`, or `body`, can be used
    for these purposes:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，即使是 `div`、`table` 或 `body` 这样的 *无辜* 标签，也可以用于这些目的：
- en: '[PRE14]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Prevention
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防措施
- en: 'In general, the documentation states that:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，文档中声明如下：
- en: Preventing XSS requires separation of untrusted data from active browser content.
  id: totrans-192
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 防止XSS需要将不受信任的数据与活动浏览器内容分离。
- en: 'Actually, to afford the problem, there are several suggestions:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，为了解决这个问题，有几种建议：
- en: 'We should start by properly escaping all untrusted data based on the HTML context
    (as we''ve seen: body, attributes, any JavaScript or CSS, or even URLs) taken
    from the user. The *XSS (Cross Site Scripting) Prevention Cheat Sheet* ([https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet))
    documentation contains details on how these data escaping techniques can be applied.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们应该首先根据HTML上下文（正如我们所看到的：body、属性、任何JavaScript或CSS，甚至是URL）正确转义所有不受信任的数据。*XSS（跨站脚本）预防备忘录*([https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet))）文档包含了如何应用这些数据转义技术的详细信息。
- en: The whitelist input validation technique we saw in the previous points is also
    recommended, but it is not a complete defense because some applications require
    the admission of special characters. For this scenario, we should validate the
    length, characters, format, and business rules before accepting any entry.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的要点中我们看到的白名单输入验证技术也建议使用，但它并不是完整的防御措施，因为某些应用程序需要接受特殊字符。对于这种情况，我们应该在接收任何输入之前验证长度、字符、格式和业务规则。
- en: Other measures include auto-sanitization libraries and even the use of a **Content
    Security Policy** (**CSP**) to defend your entire site against XSS.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他措施包括自动清理库，甚至使用**内容安全策略**（**CSP**）来保护您的整个网站免受XSS攻击。
- en: In .NET, some measures are taken by default, as we mentioned earlier. This includes
    the insertion of some JavaScript libraries by default, such as jQuery Validate
    and jQuery Validate Unobtrusive, in order to check the user's input prior to sending
    any data to the server.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET中，默认情况下采取了一些措施，正如我们之前提到的。这包括默认插入一些JavaScript库，例如jQuery Validate和jQuery
    Validate Unobtrusive，以便在向服务器发送任何数据之前检查用户的输入。
- en: As always, it is recommended that you consider the business value and also the
    business impact of the possibly affected areas of the application as well as the
    data that is processed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，建议您考虑应用程序可能受影响的区域以及处理的数据的商业价值和商业影响。
- en: Another resource to keep in mind would be the *DOM based XSS Prevention Cheat
    Sheet* ([https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet))
    documentation.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个需要记住的资源是*基于DOM的XSS预防备忘录*([https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet](https://www.owasp.org/index.php/DOM_based_XSS_Prevention_Cheat_Sheet))文档。
- en: A4 – Insecure Direct Object References
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A4 – 不安全直接对象引用
- en: 'Let''s remember this definition:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们记住这个定义：
- en: A direct object reference occurs when a developer exposes a reference to an
    internal implementation object, such as a file, directory, or database key. Without
    an access control check or other protection, attackers can manipulate these references
    to access unauthorized data.
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 直接对象引用发生在开发人员暴露对内部实现对象的引用时，例如文件、目录或数据库键。如果没有访问控制检查或其他保护措施，攻击者可以操纵这些引用以访问未经授权的数据。
- en: For some scenarios, this requires the attacker (who happens to be a legitimate
    user of the site) to know something about the resource to be attacked in order
    to substitute the expected information (such as their user account) for the victim's
    information (in this case, another account number, for example).
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些场景，这要求攻击者（碰巧是该网站的合法用户）了解要攻击的资源的一些信息，以便用预期的信息（例如他们的用户账户）替换受害者的信息（在这种情况下，另一个账户号码，例如）。
- en: 'The canonical example offered by OWASP recreates a scenario in which a query
    about an account is to be done using a SQL request:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP提供的典型示例重新创建了一个场景，在该场景中，使用SQL请求进行账户查询：
- en: '[PRE15]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The key is in `request.GetParameter("accountNo")`. An attacker can change this
    account number for another (once logged in) and try to have access to somebody
    else's information.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 关键在于`request.GetParameter("accountNo")`。攻击者可以更改这个账户号码为另一个（一旦登录）并尝试访问他人的信息。
- en: 'For example, if the account number is sent in the URL, it''s possible to recreate
    this request, including the intended, foreign account:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果账户号码在URL中发送，就有可能重新创建这个请求，包括预期的、外部的账户：
- en: '[PRE16]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This is a direct reference to a restricted resource, and the question is: should
    the user really have access to the `AnotherAccountNo` parameter included in the
    request?'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对受限资源的直接引用，问题是：用户是否真的应该有权访问请求中包含的`AnotherAccountNo`参数？
- en: 'Also, it may well happen that the reference is an indirect one. So, the question
    to answer here, as the OWASP reminds us, would be:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，引用可能是间接的。因此，正如OWASP提醒我们的，这里需要回答的问题是：
- en: If the reference is an indirect reference, does the mapping to the direct reference
    fail to limit the values to those authorized for the current user?
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 如果引用是间接引用，映射到直接引用是否未能限制值到当前用户授权的值？
- en: Note that automated tools don't usually look for these kind of flows just because
    they are not able to recognize what is to be protected and what is not. This type
    of vulnerability is quite common, but we find it in applications due to untested
    coding scenarios.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，自动化工具通常不会寻找这类流程，因为它们无法识别什么需要保护，什么不需要。这种类型的漏洞相当常见，但我们发现它在应用程序中是由于未经测试的编码场景。
- en: Prevention
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: The recommended prevention approach is to avoid insecure direct object references,
    protecting object numbers, filenames, and so on.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 建议的预防方法是避免不安全直接对象引用，保护对象编号、文件名等。
- en: Utilization of a per-user or session indirect object reference is recommended.
    This means, for instance, that a user is now allowed to manually introduce the
    account number to be requested, but, instead, a description, or even a reference
    to it.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议使用针对每个用户或会话的间接对象引用。这意味着，例如，现在允许用户手动输入要请求的账户号码，但，而不是直接输入，而是输入一个描述，甚至是对它的引用。
- en: This description (or reference) will be resolved at runtime, mapping it to the
    proper user's account.
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此描述（或引用）将在运行时解析，将其映射到适当的用户账户。
- en: Also, we are reminded that *Each use of a direct object reference from an untrusted
    source must include an access control check to ensure the user is authorized for
    the requested object*.
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此外，我们还被提醒，*从不受信任的来源使用直接对象引用的每次使用都必须包括访问控制检查，以确保用户有权访问请求的对象*。
- en: Solving this in .NET projects is easy using the corresponding procedure before
    establishing a connection or access to the requested resource.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在.NET项目中，通过在建立连接或访问请求的资源之前使用相应的程序来解决这个问题很容易。
- en: For instance, the program can internally store the list or the available resources
    for a logged user and only allow these resources before any attempt to access
    them is made
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，程序可以内部存储已登录用户的资源列表或可用资源，并在尝试访问它们之前只允许这些资源。
- en: OWASP **Enterprise Security API Project** (**ESAPI**) contains more information
    about how to manage these types of attacks ([https://www.owasp.org/index.php/Project_Information:_OWASP_Enterprise_Security_API_Project](https://www.owasp.org/index.php/Project_Information:_OWASP_Enterprise_Security_API_Project)).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP **企业安全API项目**（**ESAPI**）包含有关如何管理这些类型攻击的更多信息（[https://www.owasp.org/index.php/Project_Information:_OWASP_Enterprise_Security_API_Project](https://www.owasp.org/index.php/Project_Information:_OWASP_Enterprise_Security_API_Project)）。
- en: Note
  id: totrans-221
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Another official set of guidelines and recommendations are available on *Top
    10 2007-Insecure Direct Object Reference* at [https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference](https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 另一套官方的指南和建议可在*Top 10 2007-不安全直接对象引用*中找到，网址为[https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference](https://www.owasp.org/index.php/Top_10_2007-Insecure_Direct_Object_Reference)。
- en: Note that the user might also base their attack on files, requesting an already
    known resource file that contains protected information.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，用户也可能基于文件进行攻击，请求一个已知包含受保护信息的资源文件。
- en: Troy Hunt, an MVP developer for Pluralsight, exposes one of these attacks in
    detail using an ASP.NET application in which the details of a user account are
    available once the user has logged in (refer to [https://www.troyhunt.com/owasp-top-10-for-net-developers-part-4/](https://www.troyhunt.com/owasp-top-10-for-net-developers-part-4/)).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Pluralsight的MVP开发者Troy Hunt详细展示了一种攻击，使用ASP.NET应用程序，其中用户登录后即可获得用户账户的详细信息（参考[https://www.troyhunt.com/owasp-top-10-for-net-developers-part-4/](https://www.troyhunt.com/owasp-top-10-for-net-developers-part-4/)）。
- en: 'The following screenshot gives us the key to the attack:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图为我们提供了攻击的关键：
- en: '![Prevention](img/image00650.jpeg)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![预防](img/image00650.jpeg)'
- en: As you can see, the key is that using the debugger tools, we can check the format
    in which the information is sent to the server. In this case, there's a WCF service
    invoked (`CustomerService.svc`), and in that service, the `GetCustomer` method
    is called, passing it a JavaScript object containing the key of the customer.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，关键是使用调试工具，我们可以检查信息发送到服务器时的格式。在这种情况下，有一个WCF服务被调用（`CustomerService.svc`），在该服务中，调用了`GetCustomer`方法，并传递一个包含客户键的JavaScript对象。
- en: Well, that's all the attacker needs. Now, they can change the number with another
    one and use a tool such as Fiddler to prepare a request that includes the modified
    information, for example, about another `customerId`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这就是攻击者所需的一切。现在，他们可以用另一个数字来更改它，并使用像Fiddler这样的工具来准备一个包含修改信息的请求，例如，关于另一个`customerId`。
- en: One of the flaws, in this case, is that `customerId` is largely predictable
    since it's a number. Using a GUID here, as Hunt suggests in his article, is much
    more secure and doesn't give any extra clue to the attacker (remember that when
    we saw how to use MongoDB, one of the characteristics was that the `ObjectId`
    that MongoDB assigns to each document is, precisely, a GUID).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，一个缺陷是`customerId`在很大程度上是可以预测的，因为它是一个数字。正如Hunt在他的文章中建议的那样，在这里使用GUID要安全得多，并且不会给攻击者提供任何额外的线索（记住，当我们看到如何使用MongoDB时，其中一个特点是MongoDB分配给每个文档的`ObjectId`正好是一个GUID）。
- en: Of course, the other problem in this sample was that you could send a request
    by simply adding a request body just as if you were still using the application
    in an expected manner. I suggest that you read the previously mentioned article
    if you are interested in the details of this type of attack.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这个样本中的另一个问题是，你可以通过简单地添加请求体来发送请求，就像你仍然以预期的方式使用应用程序一样。如果你对这个攻击类型的细节感兴趣，我建议你阅读之前提到的文章。
- en: A5 – Security Misconfiguration
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A5 – 安全配置错误
- en: 'Again, the OWASP has been very precise in defining the goals and motivations
    behind this security issue:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，OWASP在定义这个安全问题的目标和动机方面非常精确：
- en: Good security requires having a secure configuration defined and deployed for
    the application, frameworks, application server, web server, database server,
    and platform. Secure settings should be defined, implemented, and maintained,
    as defaults are often insecure. Additionally, software should be kept up to date.
  id: totrans-233
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 良好的安全性需要为应用程序、框架、应用服务器、Web服务器、数据库服务器和平台定义并部署一个安全的配置。安全设置应该被定义、实施和维护，因为默认设置通常是不安全的。此外，软件应保持更新。
- en: 'There are many implications related to the previous definition; some of them
    were already mentioned in [Chapter 9](part0048.xhtml#aid-1DOR02 "Chapter 9. Architecture"),
    *Architecture*, when we discussed security in the ALM and mentioned S3: Secure
    by Design, Secure by Default, and Secure in Deployment.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的定义相关的许多含义；其中一些已经在[第9章](part0048.xhtml#aid-1DOR02 "第9章。架构")、*架构*中提到，当我们讨论ALM中的安全性和提到S3：设计安全、默认安全、部署安全时。
- en: S3 relates to this topic in a way. On the one hand, the design can come from
    a bad initial design, which doesn't relate to the Threat Model in a proper way,
    so security flaws are only discovered when it's too late and when they require
    patches.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: S3以某种方式与这个主题相关。一方面，设计可能来自一个糟糕的初始设计，它没有以适当的方式与威胁模型相关联，因此安全漏洞只有在太晚并且需要打补丁时才会被发现。
- en: The second point is also crucial. Only, the functionality needed to perform
    the required actions should be implemented (or made visible). This is one of the
    first principles to apply to any system in relation to security.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点同样关键。仅当需要执行所需操作的功能被实现（或变得可见）时，才应实现（或使可见）。这是与安全相关的任何系统应用的第一原则之一。
- en: 'With respect to the deployment, there are several considerations: perimeter
    security, which should be made in consensus with the development team, and everything
    related to configuration files and resources.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 关于部署，有几个考虑因素：外围安全，应与开发团队协商一致，以及与配置文件和资源相关的所有内容。
- en: Possible examples of attacks
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 攻击的可能示例
- en: 'Again, the documentation recreates four possible examples of attack scenarios
    related to misconfiguration:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，文档重现了四个与配置错误相关的攻击场景的可能示例：
- en: '**Scenario #1**: If any of the servers in production have left the admin console
    that''s installed and the default accounts are the same, an attacker might find
    out those pages, log in using the default passwords, and take over the system.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #1**：如果生产中的任何服务器都离开了安装的管理控制台，并且默认账户相同，攻击者可能会发现这些页面，使用默认密码登录，并接管系统。'
- en: '**Scenario #2**: The ability of directory listing should be removed from the
    server (or checked whether it is removed in case it''s a default feature of that
    server). If an attacker can list files, they can find the source code and study
    it in order to look for flaws and gain access to the system.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #2**：应从服务器中删除目录列出功能（或检查是否已删除，如果它是该服务器的默认功能）。如果攻击者可以列出文件，他们可以找到源代码并研究它，以寻找缺陷并获取对系统的访问权限。'
- en: '**Scenario #3**: Extra information related to error messages is an important
    source of information for any attacker: stack traces, ASP.NET yellow screens,
    and so on.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #3**：与错误消息相关的额外信息是任何攻击者的重要信息来源：堆栈跟踪、ASP.NET 黄色屏幕等等。'
- en: '**Scenario #4**: Sometimes during the development process, demo applications
    are used as proof of concept of certain features in the application. If they are
    not deleted, they might have security flaws.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #4**：有时在开发过程中，演示应用程序被用作应用程序中某些功能的证明概念。如果它们没有被删除，它们可能存在安全漏洞。'
- en: Prevention – aspects to consider
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预防措施 – 需要考虑的方面
- en: 'So, when establishing a strategy for configuration, the following points should
    be checked according to OWASP:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在制定配置策略时，应根据OWASP检查以下要点：
- en: 'Software obsolescence: This covers all aspects involved; the operating system,
    the servers, database management, third-party applications, and any other resource
    the solution might use. (There''s more about it in A9).'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件过时：这涵盖了所有相关方面；操作系统、服务器、数据库管理、第三方应用程序以及解决方案可能使用的任何其他资源。（更多内容请参阅A9）。
- en: 'Revise the Secure by default principle: Are all available features needed?
    In general, a review of the installed items is mandatory (privileges, accounts,
    ports, pages, services, and so on). This is also referred to as the principle
    of least privilege.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修订默认安全原则：所有可用的功能都是必需的吗？通常，对已安装项目的审查是强制性的（权限、账户、端口、页面、服务等等）。这也被称为最小权限原则。
- en: Have you canceled the resources enabled while the development process took place?
    These can include accounts (and their passwords), files, demos, and so on.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否取消了在开发过程中启用的资源？这可以包括账户（及其密码）、文件、演示等等。
- en: Did you change the default error pages used while developing? They can reveal
    informative error messages to potential attackers.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你是否更改了在开发过程中使用的默认错误页面？它们可能会向潜在的攻击者揭示有信息性的错误消息。
- en: What's the state of the security settings in TFS, IDEs, and libraries? Are they
    set to secure values?
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TFS、IDE和库的安全设置状态如何？它们是否设置为安全值？
- en: Prevention – measures
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 预防措施 – 措施
- en: 'For a complete set of features to keep in mind, the ASVS areas regarding Crypto,
    Data Protection, and SSL are helpful. However, there are some minimum measures
    that your sensitive data should comply with in order to be protected:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了记住完整的特性集，ASVS关于加密、数据保护和SSL的区域是有帮助的。然而，为了保护敏感数据，以下是一些最低限度的措施：
- en: Establish a hardening process (repeatable and automated) to make it easy and
    fast to deploy an application in a different environment with security in mind.
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建立一个加固过程（可重复和自动化），以便在考虑安全性的情况下轻松快速地将应用程序部署到不同的环境中。
- en: Make sure that the process of updating software in relation to the operating
    system and the application itself is easy and as automated as possible. Remember
    to also consider libraries (proper and external).
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保与操作系统和应用程序本身相关的软件更新过程简单且尽可能自动化。记住也要考虑库（合适的和外部库）。
- en: Think of the architecture from the beginning as a strong structure that provides
    a suitable separation between different components.
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一开始就将架构视为一个强大的结构，它为不同的组件提供了适当的分离。
- en: You should contemplate periodical scanning and audits to help in the detection
    of possible flaws in the configuration (in the system or the application).
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该考虑定期扫描和审计，以帮助检测配置（在系统或应用程序中）中可能存在的缺陷。
- en: Remember all we said up until this point in relation to sensitive information,
    its location, and availability.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 记住我们之前提到的关于敏感信息、其位置和可用性的所有内容。
- en: Also, remember that often, hosting applications in the cloud is an extra benefit
    for security since many of these operations are automatically carried on by the
    cloud's maintenance infrastructure.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，记住通常情况下，在云中托管应用程序是安全性的额外好处，因为这些操作中的许多都是由云的维护基础设施自动执行的。
- en: A6 – Sensitive Data Exposure
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A6 – 敏感数据泄露
- en: 'Data exposure deals with revelation of information or information disclosure.
    The OWASP document defines it saying that:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 数据泄露处理信息的泄露或信息泄露。OWASP文档定义了它，说：
- en: '"Many web applications do not properly protect sensitive data, such as credit
    cards, tax IDs, and authentication credentials. Attackers may steal or modify
    such weakly protected data to conduct credit card fraud, identity theft, or other
    crimes. Sensitive data deserves extra protection such as encryption at rest or
    in transit, as well as special precautions when exchanged with the browser."'
  id: totrans-261
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “许多Web应用程序没有正确保护敏感数据，如信用卡、税务识别号和身份验证凭证。攻击者可能窃取或修改这种薄弱保护的数据，以进行信用卡欺诈、身份盗窃或其他犯罪。敏感数据应得到额外保护，如静态或传输中的加密，以及在与浏览器交换时的特殊预防措施。”
- en: This topic relates to the disclosure of sensitive information when such information
    can be used not just in a cyber attack, but also in certain types of theft, such
    as what might happen when health records, credentials, personal data, or credit
    cards are at risk.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 这个话题与敏感信息泄露有关，当此类信息不仅可用于网络攻击，还可能用于某些类型的盗窃时，例如当健康记录、凭证、个人数据或信用卡处于风险之中时。
- en: 'The officially vulnerable scenarios presented by the documentation remind us
    that for such kind of data, we should confirm the following:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中官方提供的易受攻击场景提醒我们，对于此类数据，我们应该确认以下内容：
- en: Check whether any of this data is stored in clear text (for some time), including
    possible backups of this information.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查这些数据中是否有任何以明文形式存储（一段时间），包括此信息的可能备份。
- en: Make sure that this data is not transmitted in clear text, either internally
    or externally. Beware of the traffic on the Internet since it is dangerous by
    default.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保这些数据既不在内部也不在外部以明文形式传输。警惕互联网上的流量，因为它默认是危险的。
- en: How updated are the cryptographic algorithms? For instance, SHA1 has reported
    some vulnerabilities a few years ago (we've mentioned this earlier), which led
    some companies to switch to stronger versions, SHA256 or SHA512.
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加密算法更新得怎么样了？例如，SHA1几年前报告了一些漏洞（我们之前提到过），这导致一些公司转向更强的版本，SHA256或SHA512。
- en: Note
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: 'Wikipedia reminds us that:'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 维基百科提醒我们：
- en: In February 2005, an attack by Xiaoyun Wang, Yiqun Lisa Yin, and Hongbo Yu was
    announced. The attacks can find collisions in the full version of SHA-1, requiring
    fewer than 2e69 operations. (A brute-force search would require 2e80 operations.)
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2005年2月，王小云、尹毅群和李红波宣布了一种攻击。这些攻击可以在SHA-1的完整版本中找到碰撞，需要的操作次数少于2e69次。（暴力搜索需要2e80次操作。）
- en: How powerful are the generated crypto keys? Is the key management and rotation
    being used?
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的加密密钥有多强大？是否正在使用密钥管理和轮换？
- en: What about directives or headers for browser security? Are they missing when
    this special data is provided by or sent to the browser?
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器安全指令或头部如何？当这种特殊数据由浏览器提供或发送到浏览器时，它们是否缺失？
- en: For a complete set of problems to avoid, refer to ASVS areas Crypto (V7), Data
    Prot. (V9), and SSL (V10).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 对于要避免的完整问题集，请参阅ASVS区域加密（V7）、数据保护（V9）和SSL（V10）。
- en: 'The three canonical scenarios of attack that OWASP presents are as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP提出的三个典型攻击场景如下：
- en: '**Scenario #1**: An application encrypts credit card numbers in a database
    using automatic database encryption. However, this means that it also decrypts
    this data automatically when retrieved, allowing an SQL injection flaw to retrieve
    credit card numbers in clear text. The system should have encrypted the credit
    card numbers using a public key and only allowed backend applications to decrypt
    them with the private key.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #1**：一个应用程序使用自动数据库加密在数据库中加密信用卡号码。然而，这意味着当检索数据时，它也会自动解密这些数据，这允许SQL注入漏洞以明文形式检索信用卡号码。系统应该使用公钥加密信用卡号码，并且只允许后端应用程序使用私钥解密它们。'
- en: '**Scenario #2**: A site simply doesn''t use SSL for all authenticated pages.
    The attacker simply monitors network traffic (such as an open wireless network)
    and steals the user''s session cookie. The attacker then replays this cookie and
    hijacks the user''s session, accessing the user''s private data.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #2**：一个网站简单地没有对所有认证页面使用SSL。攻击者只需监控网络流量（例如开放的无线网络）并窃取用户的会话cookie。然后攻击者重放这个cookie并劫持用户的会话，访问用户的私人数据。'
- en: '**Scenario #3**: The password database uses unsalted hashes to store everyone''s
    passwords. A file upload flaw allows an attacker to retrieve the password file.
    All of the unsalted hashes can be exposed with a rainbow table of pre-calculated
    hashes.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #3**：密码数据库使用未加盐的散列来存储每个人的密码。一个文件上传漏洞允许攻击者检索密码文件。所有未加盐的散列都可以通过预先计算的散列的彩虹表暴露出来。'
- en: Moreover, sometimes, the new facilities provided by updated environments, if
    not used properly, can lead to security flaws. This is the case with some of the
    new attributes we find in HTML5 related to `<input>` tags.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，有时，更新环境提供的新功能如果使用不当，可能会导致安全漏洞。这种情况出现在我们在HTML5中找到的一些与`<input>`标签相关的新属性中。
- en: 'For example, we now have an `autocomplete` attribute (supported by most of
    browsers) that activates the caching of data in local storage. It''s quite simple
    to implement:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们现在有一个`autocomplete`属性（大多数浏览器都支持），它激活了在本地存储中的数据缓存。实现起来相当简单：
- en: '[PRE17]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This activates storage in the browser for that particular user, using that particular
    browser (each browser uses a distinct area), and associated with the page they're
    viewing at that moment.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这激活了特定用户在该特定浏览器中的存储，每个浏览器使用一个不同的区域，并与其当时查看的页面相关联。
- en: Every time a credit card number is introduced and later sent to the browser,
    that information is stored locally and persists for the later usage of the page.
    If any other person can access that computer, there's no need to know about the
    card number because just trying the first number in the sequence (1,2,3…) will
    make the browser suggest all entries starting with that number, including the
    last card number used.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 每次输入信用卡号码并将其发送到浏览器后，该信息都会在本地存储，并持续用于页面的后续使用。如果其他人可以访问该计算机，就没有必要知道卡号，因为只需尝试序列中的第一个数字（1,2,3…），浏览器就会建议所有以该数字开头的条目，包括最后使用的卡号。
- en: 'If you try this simple code (no external libraries or extensions are required),
    as soon as you press number 1 on the keyboard (in my sample), all entries starting
    with that number are shown in an attached combo box (refer to the next screenshot):'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试这段简单的代码（不需要外部库或扩展），当你按下键盘上的数字1（在我的示例中）时，所有以该数字开头的条目都会在一个附加的组合框中显示（参见图表下一张截图）：
- en: '![A6 – Sensitive Data Exposure](img/image00651.jpeg)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![A6 – 敏感数据泄露](img/image00651.jpeg)'
- en: So, for some sensitive information, we should not activate this feature (no
    matter how comfortable it is to the user) because it might incur a serious security
    flaw.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对于一些敏感信息，我们不应该激活这个功能（无论它对用户有多舒适），因为它可能引发严重的安全漏洞。
- en: Of course, this information can be deleted along with the history of navigation,
    cookies, and other cacheable information, as usual.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些信息可以像通常一样与导航历史、cookie和其他可缓存的缓存信息一起删除。
- en: A7 – Missing Function-level Access Control
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A7 – 缺少函数级访问控制
- en: 'This feature has to do with authorization, as it happened with other previous
    features. The problem here is accessing some parts of the application for which
    the user is not authorized, for instance, a non-administrator user accessing the
    private wage records of the rest of the company). As usual, the official documentation
    states the problem precisely:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能与授权有关，就像其他以前的功能一样。这里的问题是访问用户未授权的应用程序的部分，例如，非管理员用户访问公司其他人的私人工资记录）。通常，官方文档会精确地说明问题：
- en: Most web applications verify function level access rights before making that
    functionality visible in the UI. However, applications need to perform the same
    access control checks on the server when each function is accessed. If requests
    are not verified, attackers will be able to forge requests in order to access
    functionality without proper authorization.
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 大多数Web应用程序在将功能可见性显示在UI之前会验证函数级访问权限。然而，当每个功能被访问时，应用程序需要在服务器上执行相同的访问控制检查。如果请求未经验证，攻击者将能够伪造请求以访问未经适当授权的功能。
- en: 'The symptoms can vary: the UI showing links to unauthorized functionality,
    authentication, and/or authorization checks missing in the server or even the
    server not checking the identity of requests, and so on.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 症状可能各不相同：UI 显示指向未经授权的功能、身份验证和/或授权检查缺失在服务器上，甚至服务器没有检查请求的身份，等等。
- en: 'OWASP exemplifies this type of attack in two scenarios:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP 在两个场景中举例说明了这种攻击：
- en: '**Scenario #1**: The attacker simply forces browsers to target URLs. The following
    URLs require authentication. Admin rights are also required for access to the
    `admin_getappInfo` page.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #1**：攻击者简单地强制浏览器针对目标 URL。以下 URL 需要身份验证。访问 `admin_getappInfo` 页面也需要管理员权限。'
- en: '`http://example.com/app/getappInfo`'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://example.com/app/getappInfo`'
- en: '`http://example.com/app/admin_getappInfo`'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://example.com/app/admin_getappInfo`'
- en: If an unauthenticated user can access either page, that's a flaw. If an authenticated,
    non-admin user is allowed to access the `admin_getappInfo` page, that is also
    a flaw, and it may lead the attacker to more improperly protected admin pages.
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果未经身份验证的用户可以访问任一页面，则存在缺陷。如果经过身份验证的非管理员用户被允许访问 `admin_getappInfo` 页面，这也存在缺陷，可能会导致攻击者访问更多不适当保护的管理页面。
- en: '**Scenario #2**: A page provides an `action` parameter to specify the function
    being invoked, and different actions require different roles. If these roles aren''t
    enforced, that''s a flaw.'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #2**：一个页面提供了一个 `action` 参数来指定被调用的函数，不同的操作需要不同的角色。如果这些角色没有得到执行，则存在缺陷。'
- en: Access control implementation inside the code is also to be checked. If you
    follow a single privileged request, try to verify the authorization pattern. Then,
    you can search the code base trying to find a pattern and identifying when that
    pattern is not followed. Keep in mind that automated tools rarely find these issues.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码内部检查访问控制实现。如果您跟踪单个特权请求，请尝试验证授权模式。然后，您可以在代码库中搜索，尝试找到模式并确定何时没有遵循该模式。请记住，自动化工具很少发现这些问题。
- en: 'Perhaps one of the most typical examples of this attack is seen when a request
    shows the structure of information in the URL, allowing the user to guess the
    possible attacks. For instance, say, an attacker sees the following after a request:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 可能这种攻击最典型的例子之一是在请求显示 URL 中的信息结构时出现，使用户能够猜测可能的攻击。例如，攻击者在请求后看到以下内容：
- en: '[PRE18]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, it's easy to figure out the pattern to follow in order to obtain somebody
    else's information, just changing the number of the request at the end. If there
    are no proper procedures about authorization, the user can gain control over unauthorized
    data.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，很容易找出遵循的模式以获取他人的信息，只需更改请求末尾的数字即可。如果没有关于授权的适当程序，用户可以控制未经授权的数据。
- en: Prevention
  id: totrans-300
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: 'Prevention measures are well established, although they''re quite difficult
    to automate (most of them should be managed manually, although there are some
    tools):'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 预防措施已经建立，尽管它们相当难以自动化（大多数应该手动管理，尽管有一些工具）：
- en: Try to get information from administrative components with a regular user account.
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试使用普通用户帐户从管理组件获取信息。
- en: Use a proxy and access the application as an administrator. Then, try to get
    access to the restricted pages using the previous regular user credentials.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用代理并以管理员身份访问应用程序。然后，尝试使用之前的普通用户凭据访问受限页面。
- en: Find out as much as you can about how admins are validated in the system and
    make sure that proper security procedures are enforced.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽可能多地了解系统如何验证管理员，并确保实施适当的安全程序。
- en: If the function is part of a workflow, try to check whether the conditions are
    in a suitable state to allow access.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果该函数是工作流的一部分，请尝试检查条件是否处于合适的状态以允许访问。
- en: Try to audit failed attempts to access information in order to discover the
    possible paths for an attack.
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试审计尝试访问信息的失败尝试，以发现攻击的可能路径。
- en: Provide access based on roles on every action method (ASP.NET MVC and the classic
    ASP.NET). This means having to avoid granting access based on individual users.
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个操作方法（ASP.NET MVC 和经典 ASP.NET）中根据角色提供访问权限。这意味着必须避免根据单个用户授予访问权限。
- en: 'Finally, note that in relation to IIS, there are two execution modes: the classical
    one (and the only one until version IIS 6) and the integrated mode. In the integrated
    mode (in use from IIS 7), .NET sees any request, so a given `handler` can authorize
    each request, even if the request is addressed to a non-.NET resource (such as
    JavaScript or a multimedia file).'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，请注意，与IIS相关，有两种执行模式：经典模式（并且直到IIS 6版本只有这一种）和集成模式。在集成模式（从IIS 7开始使用）中，.NET看到任何请求，因此特定的`handler`可以授权每个请求，即使请求是针对非.NET资源（如JavaScript或多媒体文件）。
- en: So, if you are running IIS7+ versions, make sure that the integrated mode is
    active because otherwise, .NET only handles requests for files such as `.aspx`,
    `.ascx`, and the like, so other files can be unsecured.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你正在运行IIS7+版本，请确保集成模式是激活的，因为否则.NET只处理对`.aspx`、`.ascx`等文件的请求，因此其他文件可能是不安全的。
- en: A8 – Cross-Site Request Forgery
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A8 – 跨站请求伪造
- en: 'Given the nature of this threat, the official OWASP documentation defines it
    with a use case of an attack:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这种威胁的性质，官方OWASP文档用攻击用例来定义它：
- en: A CSRF attack forces a logged-on victim's browser to send a forged HTTP request,
    including the victim's session cookie and any other automatically included authentication
    information, to a vulnerable web application. This allows the attacker to force
    the victim's browser to generate requests the vulnerable application thinks are
    legitimate requests from the victim.
  id: totrans-312
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: CSRF攻击迫使已登录的受害者的浏览器发送一个伪造的HTTP请求，包括受害者的会话cookie和任何其他自动包含的认证信息，到易受攻击的Web应用程序。这允许攻击者迫使受害者的浏览器生成易受攻击的应用程序认为是从受害者发出的合法请求。
- en: Perhaps one of the most typical cases is the one the documentation exposes as
    the *canonical* attack of this kind.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 可能最典型的案例之一是文档中暴露的这种类型的*规范*攻击。
- en: The problem is an application that allows a user to send a request to a bank
    using plain text, without any cyphering, for instance, `http://example.com/app/transferFunds?amount=1500&destinationAccount=4673243243`.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是一个允许用户使用纯文本发送请求到银行的应用程序，没有任何加密，例如，`http://example.com/app/transferFunds?amount=1500&destinationAccount=4673243243`。
- en: 'In this case, an attacker builds another request that will transfer funds from
    the victim''s account to the attacker''s account. To make it work, the attacker
    embeds this code inside a request of a DOM-Based type, which we saw in previous
    issues, such as an `image` request or `iframe` stored on various sites that are
    under the control of the attacker:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，攻击者构建另一个请求，将资金从受害者的账户转移到攻击者的账户。为了使其生效，攻击者将此代码嵌入到DOM类型的请求中，就像我们在之前的问题中看到的，例如一个`image`请求或存储在攻击者控制的各个网站上的`iframe`：
- en: '[PRE19]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Now, if the potential victim visits any of the attacker's sites while they are
    already authenticated to `example.com`, this forged request is going to include
    the session information of the victim, thus authorizing the attacker's request.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果潜在的受害者在他们已经认证到`example.com`的情况下访问攻击者的任何网站，这个伪造的请求将包括受害者的会话信息，从而授权攻击者的请求。
- en: Prevention
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预防
- en: 'The OWASP recommends:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: OWASP建议：
- en: Preventing CSRF requires the inclusion of an unpredictable token in each HTTP
    request.
  id: totrans-320
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 预防CSRF需要在每个HTTP请求中包含一个不可预测的令牌。
- en: Also, these tokens should be unique per user session.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这些令牌应该对每个用户会话是唯一的。
- en: You can include them in a hidden field, for example. The value will be sent
    in the body of the HTTP request, so we don't compromise the process using the
    URL.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以将它们包含在一个隐藏字段中，例如。值将在HTTP请求的主体中发送，所以我们不会通过URL破坏这个过程。
- en: The URL (or a URL parameter) can also be used. However, as you can imagine,
    that supposes a higher risk because it can be analyzed.
  id: totrans-323
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL（或URL参数）也可以使用。然而，正如你可以想象的那样，这假设了更高的风险，因为它可以被分析。
- en: Another form of prevention is demanding the user to reauthenticate (something
    very common in e-commerce transactions) or even demonstrate that it is a human,
    using a CAPTCHA.
  id: totrans-324
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种预防措施是要求用户重新认证（这在电子商务交易中非常常见）或甚至使用CAPTCHA来证明是一个人类。
- en: In .NET, we've seen in A2 that our initial demo of ASP.NET will include an attribute
    called `[AntiForgeryToken]` for the methods marked with the `[HttpPost]` attribute.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET中，我们在A2中看到我们的ASP.NET初始演示将包括一个名为`[AntiForgeryToken]`的属性，用于标记带有`[HttpPost]`属性的函数。
- en: 'So, you''ll see the methods marked in this manner:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你会看到以这种方式标记的方法：
- en: '[PRE20]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you examine the view related to these action methods, you will see the presence
    of a Razor Helper:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你检查与这些操作方法相关的视图，你会看到Razor Helper的存在：
- en: '[PRE21]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This ensures that the user cannot submit the form from a remote site because
    they have no way to generate the token (and you can even add a **salt** to it).
    That provides enough protection against CSRF attacks.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 这确保了用户无法从远程站点提交表单，因为他们没有生成令牌的方法（而且你甚至可以向其中添加**盐**）。这为防止CSRF攻击提供了足够的保护。
- en: A9 – Using components with known vulnerabilities
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A9 – 使用已知漏洞的组件
- en: The problem here is external, somehow. There are libraries with vulnerabilities
    that can be identified and exploited using automated tools. In this way, the threat
    agent can be expanded beyond well-known forms of attacks, to include an unknown
    factor of risk.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是外部的，某种意义上。有一些带有漏洞的库可以使用自动化工具识别和利用。这样，威胁代理可以扩展到已知的攻击形式之外，包括未知的风险因素。
- en: 'The official definition defines A9, stating that:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 官方定义指出A9，表示：
- en: '"Components, such as libraries, frameworks, and other software modules, almost
    always run with full privileges. If a vulnerable component is exploited, such
    an attack can facilitate serious data loss or server takeover. Applications using
    components with known vulnerabilities may undermine application defenses and enable
    a range of possible attacks and impacts."'
  id: totrans-334
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “组件，如库、框架和其他软件模块，几乎总是以完全权限运行。如果一个有漏洞的组件被利用，这种攻击可以导致严重的数据丢失或服务器接管。使用已知漏洞组件的应用程序可能会削弱应用程序的防御，并使一系列可能的攻击和影响成为可能。”
- en: At first, it seems easy to find out whether a commercial or open source component
    has known vulnerabilities. However, different versions pose a factor of risk,
    especially the latest ones, which are supposed to be more secure and fix old problems
    on the one hand, but on the other hand, they might introduce new flaws. Not to
    mention that not all vulnerabilities are reported to the control sites.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 起初，似乎很容易找出商业或开源组件是否有已知漏洞。然而，不同版本的风险因素，尤其是最新版本，一方面被认为是更安全的，可以修复旧问题，但另一方面，它们可能引入新的缺陷。更不用说并非所有漏洞都报告给控制站点。
- en: There are places such as **CVE** (**Common Vulnerabilities and Exposures**),
    found at [https://cve.mitre.org/](https://cve.mitre.org/), or **National Vulnerability
    Database** (**NVD**), which can be accessed at [https://web.nvd.nist.gov/view/vuln/search](https://web.nvd.nist.gov/view/vuln/search),
    in which you can search for these kind of problems.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 有像**CVE**（**常见漏洞和暴露**）这样的地方，可以在[https://cve.mitre.org/](https://cve.mitre.org/)找到，或者可以在[https://web.nvd.nist.gov/view/vuln/search](https://web.nvd.nist.gov/view/vuln/search)访问的**国家漏洞数据库**（**NVD**），在这些地方你可以搜索这类问题。
- en: The question here is that vulnerabilities in components can potentially cause
    all types of trouble from the most simple to the most sophisticated ones, with
    attacks exclusively thought of for some type of component.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的问题是组件中的漏洞可能会引起各种各样的问题，从最简单的到最复杂的，针对某些类型组件的攻击被特别考虑。
- en: 'Examples are many, but let''s just think of a few common problems:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 例子很多，但让我们只考虑几个常见问题：
- en: For many years, Adobe Flash has been the most preferred extension for browsers
    that companies used in order to reproduce videos, insert advertising, play audio,
    and so on. Actually, there were so many that Adobe would release periodic updates
    to deal with the security problems.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多年来，Adobe Flash一直是公司用于在浏览器中重现视频、插入广告、播放音频等的最受欢迎的扩展。实际上，有那么多，Adobe不得不定期发布更新来处理安全问题。
- en: The situation got to a critical point when in 2010, Steve Jobs declared that
    no Apple mobile device would use Adobe Flash anymore. He published a letter explaining
    the six main reasons to do that ([http://www.apple.com/hotnews/thoughts-on-flash/](http://www.apple.com/hotnews/thoughts-on-flash/))
    and recommending the use of standards such as HTML5, instead.
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2010年，史蒂夫·乔布斯宣布苹果移动设备将不再使用Adobe Flash，这一情况达到了临界点。他发布了一封信件，解释了这样做的主要六个原因([http://www.apple.com/hotnews/thoughts-on-flash/](http://www.apple.com/hotnews/thoughts-on-flash/))，并推荐使用HTML5等标准。
- en: In the Windows world, there are many examples, but in order to give you an idea,
    let's think of a simple desktop application that uses some components of the control
    panel (which, on the other hand, is the recommended approach instead of reinventing
    the wheel).
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows世界中，有很多例子，但为了给你一个概念，让我们考虑一个简单的桌面应用程序，它使用了一些控制面板的组件（另一方面，这是推荐的方法，而不是重新发明轮子）。
- en: 'Now, imagine that we have a simple options menu that allows the user to select
    the configuration before printing a report. In .NET, we have several components
    available, which map the corresponding dialog boxes of the operating system: **Print
    Dialog**, **Print Preview**, **Print Document**, and so on.'
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，假设我们有一个简单的选项菜单，允许用户在打印报告之前选择配置。在.NET中，我们有几个组件可用，它们映射到操作系统的相应对话框：**打印对话框**、**打印预览**、**打印文档**等等。
- en: If we don't delimit the input values, we might end up in trouble. Let's say
    that the user is allowed to give any value in the font size (or even worse, any
    value in the number of copies). The user can establish a font size of, say, 900
    pt and a number of copies of 32564 for some configurations. The system can collapse
    or the printing server in the network can start using virtual memory to hold the
    huge amount of information sent. Here, we have a very simple way to build a **DoS**
    (**Denial of Service**) attack.
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们不限制输入值，我们可能会陷入麻烦。比如说，用户被允许在字体大小（或者更糟糕的是，在副本数量）中给出任何值。对于某些配置，用户可以设置字体大小为900
    pt，副本数量为32564。系统可能会崩溃，或者网络中的打印服务器可能会开始使用虚拟内存来存储发送的大量信息。在这里，我们有一个非常简单的方式来构建**DoS**（**服务拒绝**）攻击。
- en: We have to consider that often, components run with the complete privileges
    of the application, and we usually don't have the source code to prevent these
    attacks.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须考虑到，通常，组件以应用程序的完整权限运行，而我们通常没有源代码来防止这些攻击。
- en: 'Officially, we should do the following:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 正式来说，我们应该做以下事情：
- en: Identify all components and the versions you are using, including all dependencies
    (for example, the versions plugin).
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 识别您正在使用的所有组件及其版本，包括所有依赖项（例如，版本插件）。
- en: Monitor the security of these components in public databases, project mailing
    lists, and security mailing lists and keep them up to date.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 监控这些组件在公共数据库、项目邮件列表和安全邮件列表中的安全性，并保持它们更新。
- en: Establish security policies governing the component in use, such as requiring
    certain software development practices, passing security tests, and having acceptable
    licenses.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 制定管理正在使用的组件的安全策略，例如要求某些软件开发实践、通过安全测试以及拥有可接受的许可证。
- en: Where appropriate, consider adding security wrappers around components in order
    to disable unused functionalities and/or secure weak or vulnerable aspects of
    the component.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在适当的情况下，考虑在组件周围添加安全包装，以禁用未使用的功能以及/或保护组件的薄弱或易受攻击的方面。
- en: 'In .NET, a new document was created in OWASP in relation to this vulnerability:
    OWASP SafeNuGet, which is available at [https://www.owasp.org/index.php/OWASP_SafeNuGet](https://www.owasp.org/index.php/OWASP_SafeNuGet).
    However, if you need to test a given component, the code required is at your disposal
    in a GitHub project of the same name ([https://github.com/OWASP/SafeNuGet](https://github.com/OWASP/SafeNuGet)),
    where you''ll find an MSBuild project that can help you in the task, along with
    instructions and details.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET中，OWASP针对这一漏洞创建了一份新文档：OWASP SafeNuGet，可在[https://www.owasp.org/index.php/OWASP_SafeNuGet](https://www.owasp.org/index.php/OWASP_SafeNuGet)找到。然而，如果您需要测试某个组件，所需的代码在同名GitHub项目中可供使用（[https://github.com/OWASP/SafeNuGet](https://github.com/OWASP/SafeNuGet)），在那里您将找到一个MSBuild项目，可以帮助您完成任务，以及说明和细节。
- en: A10 – Invalidated redirects and forwards
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: A10 – 无效的重定向和转发
- en: Web applications frequently redirect and forward users to other pages and websites,
    and use untrusted data to determine the destination pages. Without proper validation,
    attackers can redirect victims to phishing or malware sites, or use forwards to
    access unauthorized pages.
  id: totrans-352
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 网络应用程序经常将用户重定向和转发到其他页面和网站，并使用不可信的数据来确定目标页面。如果没有适当的验证，攻击者可以将受害者重定向到钓鱼或恶意网站，或者使用转发来访问未经授权的页面。
- en: As you can see in the official definition, the issue here is redirection. Or,
    to be precise, the issue is redirection in a non secure manner.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在官方定义中看到的，这里的问题是重定向。或者，更准确地说，问题是非安全方式的重定向。
- en: 'The official documentation suggests that the best ways to find out whether
    some software includes dangerous forwarding of redirects are as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档建议，了解某些软件是否包含危险的转发重定向的最佳方法如下：
- en: Revise the code for any redirection or forwarding (transfer in .NET). Once identified,
    check whether the target URL is included in any parameter values. In case it is,
    the target URL is not being validated against a whitelist, and therefore, you
    are vulnerable.
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改任何重定向或转发（.NET中的传输）的代码。一旦确定，检查目标URL是否包含在任何参数值中。如果是，目标URL没有通过白名单进行验证，因此，你存在漏洞。
- en: The other possibility is that the site generates redirects, which correspond
    to HTTP response codes 300-307, and, typically a 302 code. Here, we should check
    the parameters supplied before redirection in order to see whether they look like
    a target URL or a fragment of a URL. If they do, you have to change the URL target
    and observe whether the site redirects to the new target.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一种可能性是网站生成重定向，这对应于HTTP响应代码300-307，通常是302代码。在这里，我们应该检查重定向之前提供的参数，以查看它们是否看起来像目标URL或URL的片段。如果是，你必须更改URL目标并观察网站是否重定向到新的目标。
- en: If there's no code to review, then you should check all the parameters in the
    search for the same URL patterns, testing those that really perform redirection.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有代码要审查，那么你应该检查所有参数，以寻找相同的URL模式，测试那些真正执行重定向的参数。
- en: 'The documentation includes a couple of samples of an attack, which we can adapt
    to a .NET environment:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 文档包括几个攻击示例，我们可以将其适应.NET环境：
- en: '**Scenario #1**: The application has a page called `redirect.aspx`, which takes
    a single parameter named `url`. The attacker crafts a malicious URL that redirects
    users to a malicious site that performs phishing and installs malware:'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #1**：应用程序有一个名为`redirect.aspx`的页面，它接受一个名为`url`的单个参数。攻击者构建一个恶意URL，将用户重定向到执行钓鱼和安装恶意软件的恶意网站：'
- en: '[PRE22]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this case, the problem is that next to the `url` parameter, the attacker
    might get redirected to a site of their own or another kind.
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这种情况下，问题在于在`url`参数旁边，攻击者可能会被重定向到他们自己的网站或其他类型的网站。
- en: '**Scenario #2**: The application uses forwards to route requests between different
    parts of the site. To facilitate this, some pages use a parameter to indicate
    where the user should be sent if a transaction is successful. In this case, the
    attacker crafts a URL that will pass the application''s access control check and
    then forwards the attacker to the administrative functionality for which the attacker
    isn''t authorized:'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景 #2**：应用程序使用转发在网站的各个部分之间路由请求。为了方便起见，一些页面使用一个参数来指示如果交易成功，用户应该被发送到何处。在这种情况下，攻击者构建一个URL，该URL将通过应用程序的访问控制检查，然后将攻击者转发到攻击者未经授权的行政功能：'
- en: '[PRE23]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Remember that this type of behavior is common in web development.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这种类型的行为在Web开发中很常见。
- en: Summary
  id: totrans-365
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we went through the OWASP Top 10 initiative, analyzing the
    risks and consequences of each of the threats, along with the possible prevention
    methods.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了OWASP Top 10倡议，分析了每种威胁的风险和后果，以及可能的预防方法。
- en: We also included some code for those threats that are either already addressed
    in Visual Studio templates or are easily implemented and are common in use.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还包含了一些针对那些已经在Visual Studio模板中解决或易于实现且在常用中常见的威胁的代码。
- en: In the next chapter, we will cover the optimization of applications and the
    different techniques that .NET offers for compilation to native code, optimization
    via the configuration of the assemblies, parallelism, and so on.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍应用程序的优化以及.NET提供的编译为本地代码的不同技术，例如通过配置程序集进行优化、并行性等。
