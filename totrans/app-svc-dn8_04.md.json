["```cs\n{\n  \"id\": \"1\",\n  \"productId\": \"1\",\n  \"productName\": \"Chai\",\n  \"supplier\": {\n    \"supplierId\": 1,\n    \"companyName\": \"Exotic Liquids\",\n    \"contactName\": \"Charlotte Cooper\",\n    \"Address\": \"49 Gilbert St.\",\n    \"City\": \"London\",\n    \"Country\": \"UK\",\n    \"Phone\": \"(171) 555-2222\"\n  },\n  \"category\": {\n    \"categoryId\": 1,\n    \"categoryName\": \"Beverages\",\n    \"description\": \"Soft drinks, coffees, teas, beers, and ales\",\n    \"image\": \"https://myaccount.blob.core.windows.net/categories/beverages.png\"\n  },\n  \"quantityPerUnit\": \"10 boxes x 20 bags\",\n  \"unitPrice\": 18.0000,\n  \"unitsInStock\": 39,\n  \"unitsOnOrder\": 0,\n  \"reorderLevel\": 10,\n  \"discontinued\": false\n} \n```", "```cs\n    {\n      \"productId\": 1,\n      \"productName\": \"Chai\",\n      \"supplier\": {\n        \"supplierId\": 1,\n        \"companyName\": \"Exotic Liquids\",\n        \"contactName\": \"Charlotte Cooper\",\n        \"Address\": \"49 Gilbert St.\",\n        \"City\": \"London\",\n        \"Country\": \"UK\",\n        \"Phone\": \"(171) 555-2222\"\n      },\n      \"category\": {\n        \"categoryId\": 1,\n        \"categoryName\": \"Beverages\",\n        \"description\": \"Soft drinks, coffees, teas, beers, and ales\"\n      },\n      \"quantityPerUnit\": \"10 boxes x 20 bags\",\n      \"unitPrice\": 18,\n      \"unitsInStock\": 39,\n      \"unitsOnOrder\": 0,\n      \"reorderLevel\": 10,\n      \"discontinued\": false\n    } \n    ```", "```cs\n    {\n        \"productId\": 1,\n        \"productName\": \"Chai\",\n        \"supplier\": {\n            \"supplierId\": 1,\n            ...\n        \"reorderLevel\": 10,\n        \"discontinued\": false,\n    **\"id\"****:****\"2ad4c71d-d0e4-4ebd-a146-bcf052f8d7d6\"****,**\n    **\"_rid\"****:****\"bmAuAJ9o6I8BAAAAAAAAAA==\"****,**\n    **\"_self\"****:****\"dbs/bmAuAA==/colls/bmAuAJ9o6I8=/docs/bmAuAJ9o6I8BAAAAAAAAAA==/\"****,**\n    **\"_etag\"****:****\"\\\"00000000-0000-0000-8fc2-ec4d49ea01d8\\\"\"****,**\n    **\"_attachments\"****:****\"attachments/\"****,**\n    **\"_ts\"****:****1656952035**\n    } \n    ```", "```cs\n    {\n      \"productId\": 2,\n      \"productName\": \"Chang\",\n      \"supplier\": {\n        \"supplierId\": 1,\n        \"companyName\": \"Exotic Liquids\",\n        \"contactName\": \"Charlotte Cooper\",\n        \"Address\": \"49 Gilbert St.\",\n        \"City\": \"London\",\n        \"Country\": \"UK\",\n        \"Phone\": \"(171) 555-2222\"\n      },\n      \"category\": {\n        \"categoryId\": 1,\n        \"categoryName\": \"Beverages\",\n        \"description\": \"Soft drinks, coffees, teas, beers, and ales\"\n      },\n      \"quantityPerUnit\": \"24 - 12 oz bottles\",\n      \"unitPrice\": 19,\n      \"unitsInStock\": 17,\n      \"unitsOnOrder\": 40,\n      \"reorderLevel\": 25,\n      \"discontinued\": false\n    } \n    ```", "```cs\n    {\n      \"productId\": 3,\n      \"productName\": \"Aniseed Syrup\",\n      \"supplier\": {\n        \"supplierId\": 1,\n        \"companyName\": \"Exotic Liquids\",\n        \"contactName\": \"Charlotte Cooper\",\n        \"Address\": \"49 Gilbert St.\",\n        \"City\": \"London\",\n        \"Country\": \"UK\",\n        \"Phone\": \"(171) 555-2222\"\n      },\n      \"category\": {\n        \"categoryId\": 2,\n        \"categoryName\": \"Condiments\",\n        \"description\": \"Sweet and savory sauces, relishes, spreads, and seasonings\"\n      },\n      \"quantityPerUnit\": \"12 - 550 ml bottles\",\n      \"unitPrice\": 10,\n      \"unitsInStock\": 13,\n      \"unitsOnOrder\": 70,\n      \"reorderLevel\": 25,\n      \"discontinued\": false\n    } \n    ```", "```cs\n    SELECT * FROM c WHERE c.supplier.companyName = \"Exotic Liquids\" \n    ```", "```cs\n    SELECT * FROM c WHERE c.category.categoryId = 2 \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference Include=****\"Microsoft.Azure.Cosmos\"** **Version=****\"3.37.0\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<ProjectReference Include=****\"..\\..\\Chapter03\\Northwind.Common.DataContext**\n    **.SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<Using Include=****\"System.Console\"** **Static=****\"true\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    // This is defined in the default empty namespace, so it merges with\n    // the SDK-generated partial Program class.\n    partial class Program\n    {\n      static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine(\"*\");\n        WriteLine($\"* {title}\");\n        WriteLine(\"*\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    using Microsoft.Azure.Cosmos; // To use CosmosClient and so on.\n    using System.Net; // To use HttpStatusCode.\n    // This is defined in the default empty namespace, so it merges with\n    // the SDK-generated partial Program class.\n    partial class Program\n    {\n      // To use Azure Cosmos DB in the local emulator.\n      private static string endpointUri = \"https://localhost:8081/\";\n      private static string primaryKey = \"C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHL M+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==\";\n      /* \n      // To use Azure Cosmos DB in the cloud.\n      private static string account = \"apps-services-book\"; // use your account\n      private static string endpointUri = \n        $\"https://{account}.documents.azure.com:443/\";\n      private static string primaryKey = \"LGrx7H...gZw==\"; // use your key\n      */\n      static async Task CreateCosmosResources()\n      {\n        SectionTitle(\"Creating Cosmos resources\");\n        try\n        {\n          using (CosmosClient client = new(\n            accountEndpoint: endpointUri,\n            authKeyOrResourceToken: primaryKey))\n          {\n            DatabaseResponse dbResponse = await client\n              .CreateDatabaseIfNotExistsAsync(\n                \"Northwind\", throughput: 400 /* RU/s */);\n            string status = dbResponse.StatusCode switch\n            {\n              HttpStatusCode.OK => \"exists\",\n              HttpStatusCode.Created => \"created\",\n              _ => \"unknown\"\n            };\n            WriteLine(\"Database Id: {0}, Status: {1}.\",\n              arg0: dbResponse.Database.Id, arg1: status);\n            IndexingPolicy indexingPolicy = new()\n            {\n              IndexingMode = IndexingMode.Consistent,\n              Automatic = true, // Items are indexed unless explicitly excluded.\n              IncludedPaths = { new IncludedPath { Path = \"/*\" } }\n            };\n            ContainerProperties containerProperties = new(\"Products\",\n              partitionKeyPath: \"/productId\")\n            {\n              IndexingPolicy = indexingPolicy\n            };\n            ContainerResponse containerResponse = await dbResponse.Database\n              .CreateContainerIfNotExistsAsync(\n                containerProperties, throughput: 1000 /* RU/s */);\n            status = dbResponse.StatusCode switch\n            {\n              HttpStatusCode.OK => \"exists\",\n              HttpStatusCode.Created => \"created\",\n              _ => \"unknown\",\n            };\n            WriteLine(\"Container Id: {0}, Status: {1}.\",\n              arg0: containerResponse.Container.Id, arg1: status);\n            Container container = containerResponse.Container;\n            ContainerProperties properties = await container.ReadContainerAsync();\n            WriteLine($\"  PartitionKeyPath: {properties.PartitionKeyPath}\");\n            WriteLine($\"  LastModified: {properties.LastModified}\");\n            WriteLine(\"  IndexingPolicy.IndexingMode: {0}\",\n              arg0: properties.IndexingPolicy.IndexingMode);\n            WriteLine(\"  IndexingPolicy.IncludedPaths: {0}\",\n              arg0: string.Join(\",\", properties.IndexingPolicy\n                .IncludedPaths.Select(path => path.Path)));\n            WriteLine($\"  IndexingPolicy: {properties.IndexingPolicy}\");\n          }\n        }\n        catch (HttpRequestException ex)\n        {\n          WriteLine($\"Error: {ex.Message}\");\n          WriteLine(\"Hint: If you are using the Azure Cosmos Emulator then please make sure that it is running.\");\n        }\n        catch (Exception ex)\n        {\n          WriteLine(\"Error: {0} says {1}\",\n            arg0: ex.GetType(),\n            arg1: ex.Message);\n        }\n      }\n    } \n    ```", "```cs\n    await CreateCosmosResources(); \n    ```", "```cs\n    *\n    * Creating Cosmos resources\n    *\n    Database Id: Northwind, Status: exists.\n    Container Id: Products, Status: exists.\n      PartitionKeyPath: /productId\n      LastModified: 04/07/2022 11:11:31\n      IndexingPolicy.IndexingMode: Consistent\n      IndexingPolicy.IncludedPaths: /* \n    ```", "```cs\n    *\n    * Creating Cosmos resources\n    *\n    Database Id: Northwind, Status: created.\n    Container Id: Products, Status: created.\n      PartitionKeyPath: /productId\n      LastModified: 04/07/2022 11:11:31\n      IndexingPolicy.IndexingMode: Consistent\n      IndexingPolicy.IncludedPaths: /* \n    ```", "```cs\n    namespace Northwind.CosmosDb.Items;\n    public class CategoryCosmos\n    {\n      public int categoryId { get; set; }\n      public string categoryName { get; set; } = null!;\n      public string? description { get; set; }\n    } \n    ```", "```cs\n    namespace Northwind.CosmosDb.Items;\n    public class SupplierCosmos\n    {\n      public int supplierId { get; set; }\n      public string companyName { get; set; } = null!;\n      public string? contactName { get; set; }\n      public string? contactTitle { get; set; }\n      public string? address { get; set; }\n      public string? city { get; set; }\n      public string? region { get; set; }\n      public string? postalCode { get; set; }\n      public string? country { get; set; }\n      public string? phone { get; set; }\n      public string? fax { get; set; }\n      public string? homePage { get; set; }\n    } \n    ```", "```cs\n    namespace Northwind.CosmosDb.Items;\n    public class ProductCosmos\n    {\n      public string id { get; set; } = null!;\n      public string productId { get; set; } = null!;\n      public string productName { get; set; } = null!;\n      public string? quantityPerUnit { get; set; }\n      public decimal? unitPrice { get; set; }\n      public short? unitsInStock { get; set; }\n      public short? unitsOnOrder { get; set; }\n      public short? reorderLevel { get; set; }\n      public bool discontinued { get; set; }\n      public CategoryCosmos? category { get; set; }\n      public SupplierCosmos? supplier { get; set; }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use NorthwindContext and so on.\n    using Northwind.CosmosDb.Items; // To use ProductCosmos and so on.\n    using Microsoft.EntityFrameworkCore; // To use Include extension method. \n    ```", "```cs\n    static async Task CreateProductItems()\n    {\n      SectionTitle(\"Creating product items\");\n      double totalCharge = 0.0;\n      try\n      {\n        using (CosmosClient client = new(\n          accountEndpoint: endpointUri,\n          authKeyOrResourceToken: primaryKey))\n        {\n          Container container = client.GetContainer(\n            databaseId: \"Northwind\", containerId: \"Products\");\n          using (NorthwindContext db = new())\n          {\n            if (!db.Database.CanConnect())\n            {\n              WriteLine(\"Cannot connect to the SQL Server database to \" +\n                \" read products using database connection string: \" +\n                db.Database.GetConnectionString());\n              return;\n            }\n            ProductCosmos[] products = db.Products\n              // Get the related data for embedding.\n              .Include(p => p.Category)\n              .Include(p => p.Supplier)\n              // Filter any products with null category or supplier\n              // to avoid null warnings.\n              .Where(p => (p.Category != null) && (p.Supplier != null))\n              // Project the EF Core entities into Cosmos JSON types.\n              .Select(p => new ProductCosmos\n              {\n                id = p.ProductId.ToString(),\n                productId = p.ProductId.ToString(),\n                productName = p.ProductName,\n                quantityPerUnit = p.QuantityPerUnit,\n                // If the related category is null, store null,\n                // // else store the category mapped to Cosmos model.\n                category = p.Category == null ? null : \n                  new CategoryCosmos\n                {\n                  categoryId = p.Category.CategoryId,\n                  categoryName = p.Category.CategoryName,\n                  description = p.Category.Description\n                },\n                supplier = p.Supplier == null ? null :\n                  new SupplierCosmos\n                {\n                  supplierId = p.Supplier.SupplierId,\n                  companyName = p.Supplier.CompanyName,\n                  contactName = p.Supplier.ContactName,\n                  contactTitle = p.Supplier.ContactTitle,\n                  address = p.Supplier.Address,\n                  city = p.Supplier.City,\n                  country = p.Supplier.Country,\n                  postalCode = p.Supplier.PostalCode,\n                  region = p.Supplier.Region,\n                  phone = p.Supplier.Phone,\n                  fax = p.Supplier.Fax,\n                  homePage = p.Supplier.HomePage\n                },\n                unitPrice = p.UnitPrice,\n                unitsInStock = p.UnitsInStock,\n                reorderLevel = p.ReorderLevel,\n                unitsOnOrder = p.UnitsOnOrder,\n                discontinued = p.Discontinued,\n              })\n              .ToArray();\n            foreach (ProductCosmos product in products)\n            {\n              try\n              {\n                // Try to read the item to see if it exists.\n                ItemResponse<ProductCosmos> productResponse =\n                  await container.ReadItemAsync<ProductCosmos>(\n                  id: product.id, new PartitionKey(product.productId));\n                WriteLine(\"Item with id: {0} exists. Query consumed {1} RUs.\",\n                  productResponse.Resource.id, productResponse.RequestCharge);\n                totalCharge += productResponse.RequestCharge;\n              }\n              catch (CosmosException ex) \n                when (ex.StatusCode == HttpStatusCode.NotFound)\n              {\n                // Create the item if it does not exist.\n                ItemResponse<ProductCosmos> productResponse =\n                  await container.CreateItemAsync(product);\n                WriteLine(\"Created item with id: {0}. Insert consumed {1} RUs.\",\n                  productResponse.Resource.id, productResponse.RequestCharge);\n                totalCharge += productResponse.RequestCharge;\n              }\n              catch (Exception ex)\n              {\n                WriteLine(\"Error: {0} says {1}\",\n                  arg0: ex.GetType(),\n                  arg1: ex.Message);\n              }\n            }\n          }\n        }\n      }\n      catch (HttpRequestException ex)\n      {\n        WriteLine($\"Error: {ex.Message}\");\n        WriteLine(\"Hint: If you are using the Azure Cosmos Emulator then please make sure it is running.\");\n      }\n      catch (Exception ex)\n      {\n        WriteLine(\"Error: {0} says {1}\",\n          arg0: ex.GetType(),\n          arg1: ex.Message);\n      }\n      WriteLine(\"Total requests charge: {0:N2} RUs\", totalCharge);\n    } \n    ```", "```cs\n    await CreateProductItems(); \n    ```", "```cs\n    *\n    * Creating product items\n    *\n    Created item with id: 1\\. Insert consumed 14.29 RUs.\n    Created item with id: 2\\. Insert consumed 14.29 RUs.\n    Created item with id: 3\\. Insert consumed 14.29 RUs.\n    ...\n    Created item with id: 76\\. Insert consumed 14.29 RUs.\n    Created item with id: 77\\. Insert consumed 14.48 RUs.\n    Total requests charge: 1,114.58 RUs \n    ```", "```cs\n    *\n    * Creating product items\n    *\n    Item with id: 1 exists. Query consumed 1 RUs.\n    Item with id: 2 exists. Query consumed 1 RUs.\n    Item with id: 3 exists. Query consumed 1 RUs.\n    ...\n    Item with id: 76 exists. Query consumed 1 RUs.\n    Item with id: 77 exists. Query consumed 1 RUs.\n    Total requests charge: 77.00 RUs \n    ```", "```cs\n    static async Task ListProductItems(string sqlText = \"SELECT * FROM c\")\n    {\n      SectionTitle(\"Listing product items\");\n      try\n      {\n        using (CosmosClient client = new(\n          accountEndpoint: endpointUri,\n          authKeyOrResourceToken: primaryKey))\n        {\n          Container container = client.GetContainer(\n            databaseId: \"Northwind\", containerId: \"Products\");\n          WriteLine(\"Running query: {0}\", sqlText);\n          QueryDefinition query = new(sqlText);\n          using FeedIterator<ProductCosmos> resultsIterator =\n            container.GetItemQueryIterator<ProductCosmos>(query);\n          if (!resultsIterator.HasMoreResults)\n          {\n            WriteLine(\"No results found.\");\n          }\n          while (resultsIterator.HasMoreResults)\n          {\n            FeedResponse<ProductCosmos> products =\n              await resultsIterator.ReadNextAsync();\n            WriteLine(\"Status code: {0}, Request charge: {1} RUs.\",\n              products.StatusCode, products.RequestCharge);\n            WriteLine($\"{products.Count} products found.\");\n            foreach (ProductCosmos product in products)\n            {\n              WriteLine(\"id: {0}, productName: {1}, unitPrice: {2}\",\n                arg0: product.id, arg1: product.productName, \n                arg2: product.unitPrice.ToString());\n            }\n          }\n        }\n      }\n      catch (HttpRequestException ex)\n      {\n        WriteLine($\"Error: {ex.Message}\");\n        WriteLine(\"Hint: If you are using the Azure Cosmos Emulator then please make sure it is running.\");\n      }\n      catch (Exception ex)\n      {\n        WriteLine(\"Error: {0} says {1}\",\n          arg0: ex.GetType(),\n          arg1: ex.Message);\n      }\n    } \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    using System.Text; // To use Encoding.\n    OutputEncoding = Encoding.UTF8; // To enable Euro symbol output.\n    // Simulate French culture to test Euro currency symbol output.\n    Thread.CurrentThread.CurrentCulture = CultureInfo.GetCultureInfo(\"fr-FR\");\n    //await CreateCosmosResources();\n    //await CreateProductItems();\n    await ListProductItems(); \n    ```", "```cs\n    *\n    * Listing product items\n    *\n    Running query: SELECT * FROM c\n    Status code: OK, Request charge: 3.93 RUs.\n    77 products found.\n    id: 1, productName: Chai, unitPrice: 18,00 €\n    id: 2, productName: Chang, unitPrice: 19,00 €\n    id: 3, productName: Aniseed Syrup, unitPrice: 10,00 €\n    ...\n    id: 76, productName: Lakkalikööri, unitPrice: 18,00 €\n    id: 77, productName: Original Frankfurter grüne Soße, unitPrice: 13,00 € \n    ```", "```cs\n    static async Task DeleteProductItems()\n    {\n      SectionTitle(\"Deleting product items\");\n      double totalCharge = 0.0;\n      try\n      {\n        using (CosmosClient client = new(\n          accountEndpoint: endpointUri,\n          authKeyOrResourceToken: primaryKey))\n        {\n          Container container = client.GetContainer(\n            databaseId: \"Northwind\", containerId: \"Products\");\n          string sqlText = \"SELECT * FROM c\";\n          WriteLine(\"Running query: {0}\", sqlText);\n          QueryDefinition query = new(sqlText);\n          using FeedIterator<ProductCosmos> resultsIterator =\n            container.GetItemQueryIterator<ProductCosmos>(query);\n          while (resultsIterator.HasMoreResults)\n          {\n            FeedResponse<ProductCosmos> products =\n              await resultsIterator.ReadNextAsync();\n            foreach (ProductCosmos product in products)\n            {\n              WriteLine(\"Delete id: {0}, productName: {1}\",\n                arg0: product.id, arg1: product.productName);\n              ItemResponse<ProductCosmos> response =\n                await container.DeleteItemAsync<ProductCosmos>(\n                id: product.id, partitionKey: new(product.id));\n              WriteLine(\"Status code: {0}, Request charge: {1} RUs.\",\n                response.StatusCode, response.RequestCharge);\n              totalCharge += response.RequestCharge;\n            }\n          }\n        }\n      }\n      catch (HttpRequestException ex)\n      {\n        WriteLine($\"Error: {ex.Message}\");\n        WriteLine(\"Hint: If you are using the Azure Cosmos Emulator then please make sure it is running.\");\n      }\n      catch (Exception ex)\n      {\n        WriteLine(\"Error: {0} says {1}\",\n          arg0: ex.GetType(),\n          arg1: ex.Message);\n      }\n      WriteLine(\"Total requests charge: {0:N2} RUs\", totalCharge);\n    } \n    ```", "```cs\n    await DeleteProductItems(); \n    ```", "```cs\n    *\n    * Deleting product items\n    *\n    Running query: SELECT * FROM c\n    Delete id: 1, productName: Chai\n    Status code: NoContent, Request charge: 14.29 RUs.\n    ...\n    Delete id: 77, productName: Original Frankfurter grüne Soße\n    Status code: NoContent, Request charge: 14.48 RUs.\n    Total requests charge: 1,128.87 RUs \n    ```", "```cs\nSELECT p.id, p.productName, p.unitPrice FROM Items p \n```", "```cs\n    //await CreateCosmosResources();\n    await CreateProductItems();\n    await ListProductItems(\"SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.category.categoryName = 'Beverages'\");\n    //await DeleteProductItems(); \n    ```", "```cs\n    *\n    * Listing product items\n    *\n    Running query: SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.category.categoryName = 'Beverages'\n    Status code: OK, Request charge: 3.19 RUs.\n    12 products found.\n    id: 1, productName: Chai, unitPrice: 18\n    id: 2, productName: Chang, unitPrice: 19\n    id: 24, productName: Guaraná Fantástica, unitPrice: 4.5\n    id: 34, productName: Sasquatch Ale, unitPrice: 14\n    id: 35, productName: Steeleye Stout, unitPrice: 18\n    id: 38, productName: Côte de Blaye, unitPrice: 263.5\n    id: 39, productName: Chartreuse verte, unitPrice: 18\n    id: 43, productName: Ipoh Coffee, unitPrice: 46\n    id: 67, productName: Laughing Lumberjack Lager, unitPrice: 14\n    id: 70, productName: Outback Lager, unitPrice: 15\n    id: 75, productName: Rhönbräu Klosterbier, unitPrice: 7.75\n    id: 76, productName: Lakkalikööri, unitPrice: 18 \n    ```", "```cs\nSELECT p.id, p.productName, p.unitPrice FROM Items p \nWHERE p.unitPrice > 50\nSELECT DISTINCT p.category FROM Items p\nSELECT DISTINCT p.category.categoryName FROM Items p\nWHERE p.discontinued = true\nSELECT p.productName, p.supplier.city FROM Items p\nWHERE p.supplier.country = 'Germany'\nSELECT COUNT(p.id) AS HowManyProductsComeFromGermany FROM Items p\nWHERE p.supplier.country = 'Germany'\nSELECT AVG(p.unitPrice) AS AverageUnitPrice FROM Items p \n```", "```cs\n    function salesTax(unitPrice){\n        return unitPrice * 0.2;\n    } \n    ```", "```cs\n    SELECT p.unitPrice cost, udf.salesTax(p.unitPrice) AS tax \n    FROM Items p WHERE p.unitPrice > 100 \n    ```", "```cs\n    [\n        {\n            \"cost\": 123.79,\n            \"tax\": 24.758000000000003\n        },\n        {\n            \"cost\": 263.5,\n            \"tax\": 52.7\n        }\n    ] \n    ```", "```cs\n    // To use StoredProcedureResponse and so on.\n    using Microsoft.Azure.Cosmos.Scripts; \n    ```", "```cs\n    static async Task CreateInsertProductStoredProcedure()\n    {\n      SectionTitle(\"Creating the insertProduct stored procedure\");\n      try\n      {\n        using (CosmosClient client = new(\n          accountEndpoint: endpointUri,\n          authKeyOrResourceToken: primaryKey))\n        {\n          Container container = client.GetContainer(\n            databaseId: \"Northwind\", containerId: \"Products\");\n          StoredProcedureResponse response = await container\n            .Scripts.CreateStoredProcedureAsync(new StoredProcedureProperties\n            {\n              Id = \"insertProduct\",\n              // __ means getContext().getCollection().\n              Body = \"\"\"\n    function insertProduct(product) {\n      if (!product) throw new Error(\n        \"product is undefined or null.\");\n      tryInsert(product, callbackInsert);\n      function tryInsert(product, callbackFunction) {\n        var options = { disableAutomaticIdGeneration: false };\n        // __ is an alias for getContext().getCollection()\n        var isAccepted = __.createDocument(\n          __.getSelfLink(), product, options, callbackFunction);\n        if (!isAccepted) \n          getContext().getResponse().setBody(0);\n      }\n      function callbackInsert(err, item, options) {\n        if (err) throw err;\n        getContext().getResponse().setBody(1);\n      }\n    }\n    \"\"\"\n            });\n          WriteLine(\"Status code: {0}, Request charge: {1} RUs.\",\n            response.StatusCode, response.RequestCharge);\n        }\n      }\n      catch (HttpRequestException ex)\n      {\n        WriteLine($\"Error: {ex.Message}\");\n        WriteLine(\"Hint: If you are using the Azure Cosmos Emulator then please make sure it is running.\");\n      }\n      catch (Exception ex)\n      {\n        WriteLine(\"Error: {0} says {1}\",\n          arg0: ex.GetType(),\n          arg1: ex.Message);\n      }\n    } \n    ```", "```cs\n    await CreateInsertProductStoredProcedure(); \n    ```", "```cs\n    *\n    * Creating the insertProduct stored procedure\n    *\n    Status code: Created, Request charge: 6.29 RUs. \n    ```", "```cs\n    static async Task ExecuteInsertProductStoredProcedure()\n    {\n      SectionTitle(\"Executing the insertProduct stored procedure\");\n      try\n      {\n        using (CosmosClient client = new(\n          accountEndpoint: endpointUri,\n          authKeyOrResourceToken: primaryKey))\n        {\n          Container container = client.GetContainer(\n            databaseId: \"Northwind\", containerId: \"Products\");\n          string pid = \"78\";\n          ProductCosmos product = new()\n          {\n            id = pid, productId = pid,\n            productName = \"Barista's Chilli Jam\",\n            unitPrice = 12M, unitsInStock = 10\n          };\n          StoredProcedureExecuteResponse<string> response = await container.Scripts\n            .ExecuteStoredProcedureAsync<string>(\"insertProduct\",\n            new PartitionKey(pid), new[] { product });\n          WriteLine(\"Status code: {0}, Request charge: {1} RUs.\",\n            response.StatusCode, response.RequestCharge);\n        }\n      }\n      catch (HttpRequestException ex)\n      {\n        WriteLine($\"Error: {ex.Message}\");\n        WriteLine(\"Hint: If you are using the Azure Cosmos Emulator then please make sure it is running.\");\n      }\n      catch (Exception ex)\n      {\n        WriteLine(\"Error: {0} says {1}\",\n          arg0: ex.GetType(),\n          arg1: ex.Message);\n      }\n    } \n    ```", "```cs\n    //await CreateInsertProductStoredProcedure();\n    await ExecuteInsertProductStoredProcedure();\n    await ListProductItems(\"SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.productId = '78'\"); \n    ```", "```cs\n    *\n    * Executing the insertProduct stored procedure\n    *\n    Status code: OK, Request charge: 10.23 RUs.\n    *\n    * Listing product items\n    *\n    Running query: SELECT p.id, p.productName, p.unitPrice FROM Items p WHERE p.productId = '78'\n    Status code: OK, Request charge: 2.83 RUs.\n    1 products found.\n    id: 78, productName: Barista's Chilli Jam, unitPrice: €12.00 \n    ```"]