["```cs\ndotnet new console -n SampleTcpClient\n```", "```cs\ndotnet new console -n SampleTcpServer\n```", "```cs\npublic static void Main(string[] args) {\n    int port = 54321;\n    IPAddress address = IPAddress.Any;\n    TcpListener server = new TcpListener(address, port);\n    ...\n}\n```", "```cs\nIPAddress address = IPAddress.Parse(\"127.0.0.1\");\n```", "```cs\nserver.Start();\n\nvar loggedNoRequest = false;\nvar loggedPending = false;\n\nwhile (true) {\n  if (!server.Pending()) {\n    if (!loggedNoRequest) {\n      Console.WriteLine(\"No pending requests as of yet\");\n      Console.WriteLine(\"Server listening...\");\n      loggedNoRequest = true;\n    }\n  } else {\n    if (!loggedPending) {\n      Console.WriteLine(\"Pending TCP request...\");\n      loggedPending = true;\n    }\n  }\n}\n```", "```cs\npublic static async Task Main(string[] args) {\n  int port = 54321;\n  IPAddress address = IPAddress.Parse(\"127.0.0.1\");\n  using (TcpClient client = new TcpClient()) {\n    client.Connect(address, port);\n    if (client.Connected) {\n      Console.WriteLine(\"We've connected from the client\");\n    }\n  }\n  Thread.Sleep(10000);\n}\n```", "```cs\nvar message = \"Hello server | Return this payload to sender!\";\nvar bytes = Encoding.UTF8.GetBytes(message);\nusing (var requestStream = client.GetStream()) {\n  requestStream.Write(bytes, 0, bytes.Length);\n}\n```", "```cs\nloggedNoRequest = false;\nbyte[] bytes = new byte[256];\n\nusing (var client = await server.AcceptTcpClientAsync()) {\n  using (var tcpStream = client.GetStream()) {\n    await tcpStream.ReadAsync(bytes, 0, bytes.Length);\n    var requestMessage = Encoding.UTF8.GetString(bytes);\n    Console.WriteLine(requestMessage);\n  }\n}\n```", "```cs\nbool done = false;\nstring DELIMITER = \"|\";\nstring TERMINATE = \"TERMINATE\";\n```", "```cs\n  ...\n  requestStream.Read(bytes, 0, bytes.Length);\n  var requestMessage = Encoding.UTF8.GetString(bytes).Replace(\"\\0\", string.Empty);\n\n  if (requestMessage.Equals(TERMINATE)) {\n    done = true;\n  } else {\n    Console.WriteLine(requestMessage);\n  }\n}\n```", "```cs\nwhile (!done) {\n    ...\n```", "```cs\n} else {\n  Console.WriteLine(requestMessage);\n  var payload = requestMessage.Split(DELIMITER).Last();\n  var responseMessage = $\"Greetings from the server! | {payload}\";\n  var responseBytes = Encoding.UTF8.GetBytes(responseMessage);\n  await tcpStream.WriteAsync(responseBytes, 0, responseBytes.Length);\n}\n```", "```cs\n  }\n  server.Stop();\n  Thread.Sleep(10000);\n}\n```", "```cs\nusing (var requestStream = client.GetStream()) {\n  await requestStream.WriteAsync(bytes, 0, bytes.Length);\n  var responseBytes = new byte[256];\n  await requestStream.ReadAsync(responseBytes, 0, responseBytes.Length);\n  var responseMessage = Encoding.UTF8.GetString(responseBytes);\n  Console.WriteLine(responseMessage);\n}\n```", "```cs\nvar messages = new string[] {\n  \"Hello server | Return this payload to sender!\",\n  \"To the server | Send this payload back to me!\",\n  \"Server Header | Another returned message.\",\n  \"Header Value | Payload to be returned\",\n  \"TERMINATE\"\n};\n```", "```cs\nvar i = 0;\nwhile (i < messages.Length) {\n  using (TcpClient client = new TcpClient()) {\n    ...\n```", "```cs\nvar bytes = Encoding.UTF8.GetBytes(messages[i++]);\n```", "```cs\n  ...\n  var sleepDuration = new Random().Next(2000, 10000);\n  Console.WriteLine($\"Generating a new request in {sleepDuration/1000} seconds\");\n  Thread.Sleep(sleepDuration);\n}\n```", "```cs\ndotnet new console -n SampleUdpClient\n```", "```cs\npublic static async Task Main(string[] args) {\n  using (var client = new UdpClient(34567)) {\n    var remoteEndpoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 45678);\n\n    var message = \"Testing UDP\";\n    byte[] messageBytes = Encoding.UTF8.GetBytes(message);\n    await client.SendAsync(messageBytes, messageBytes.Length, remoteEndpoint);\n    ...\n  }\n}\n```", "```cs\npublic static async Task Main(string[] args) {\n  using (var client = new UdpClient(34567)) {\n    var remoteEndpoint = new IPEndPoint(IPAddress.Parse(\"127.0.0.1\"), 45678);\n\n    client.Connect(remoteEndpoint);\n\n    var message = \"Testing UDP\";\n    byte[] messageBytes = Encoding.UTF8.GetBytes(message);\n    await client.SendAsync(messageBytes, messageBytes.Length);\n\n    var response = await client.ReceiveAsync();\n    var responseMessage = Encoding.UTF8.GetString(response.Buffer);\n Console.WriteLine(responseMessage);\n\n Thread.Sleep(10000);\n }\n}\n```"]