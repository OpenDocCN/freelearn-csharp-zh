- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Continuous Integration with GitHub Actions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub Actions进行持续集成
- en: Welcome to the chapter on **Continuous Integration** ( **CI** ) with GitHub
    Actions. As we delve into this chapter, we will gain a comprehensive understanding
    of how GitHub Actions can enhance our development workflow, streamline our processes,
    and ensure our code base remains robust and reliable, as well as how Visual Studio
    helps us with this.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到使用GitHub Actions进行**持续集成**（**CI**）的章节。随着我们深入本章，我们将全面了解GitHub Actions如何增强我们的开发工作流程，简化我们的流程，并确保我们的代码库保持稳健和可靠，以及Visual
    Studio如何帮助我们实现这一点。
- en: 'First, we will explore the fundamentals of GitHub Actions, a powerful CI/CD
    tool integrated directly into GitHub. Next, we will dive into configuring workflows
    in GitHub Actions. This section will guide you through setting up and managing
    workflows tailored to your project’s needs. Finally, we will focus on generating
    GitHub Actions files using Visual Studio. Visual Studio provides robust support
    for creating and managing GitHub Actions for Azure deployment, making it easier
    for us to integrate CI/CD into your development environment. We’ll cover the following
    topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将探索GitHub Actions的基础知识，这是一个直接集成到GitHub中的强大CI/CD工具。接下来，我们将深入了解在GitHub Actions中配置工作流程。本节将指导您设置和管理满足项目需求的工作流程。最后，我们将关注使用Visual
    Studio生成GitHub Actions文件。Visual Studio为创建和管理GitHub Actions以支持Azure部署提供了强大的支持，使我们能够更容易地将CI/CD集成到开发环境中。我们将涵盖以下主题：
- en: Understanding GitHub Actions for CI/CD
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解GitHub Actions在CI/CD中的作用
- en: Configuring workflows in GitHub Actions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在GitHub Actions中配置工作流程
- en: Generating GitHub Actions files with Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio生成GitHub Actions文件
- en: Mastering GitHub Actions for CI/CD is crucial for any modern developer. By the
    end of this chapter, you will have the knowledge and skills required to set up
    and manage automated workflows, significantly improving your development efficiency.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 精通GitHub Actions在CI/CD中的使用对于任何现代开发者来说至关重要。在本章结束时，您将掌握设置和管理自动化工作流程所需的知识和技能，这将显著提高您的开发效率。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本章时，我使用了以下版本的Visual Studio：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览1.0
- en: To fully follow the chapter, you will also need a valid GitHub account, which
    you can set up at [https://github.com/](https://github.com/) .
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全理解本章内容，您还需要一个有效的GitHub账户，您可以在[https://github.com/](https://github.com/)上创建。
- en: Understanding GitHub Actions for CI/CD
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GitHub Actions在CI/CD中的作用
- en: In this section, we will dive into GitHub Action to recognize its role in automating
    software workflows directly within GitHub repositories and facilitating CI and
    **continuous deployment** ( **CD** ) processes. CI/CD practices aim to accelerate
    development cycles, enhance code quality, and streamline application deployment
    processes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将深入探讨GitHub Action，了解其在GitHub仓库内直接自动化软件工作流程以及促进持续集成（**CI**）和**持续部署**（**CD**）过程中的作用。CI/CD实践旨在加速开发周期，提高代码质量，并简化应用程序部署流程。
- en: GitHub Actions enables the direct automation of software workflows within GitHub
    repositories, encompassing CI/CD processes. By automating these workflows, development
    cycles can be expedited, code quality can be ensured, and application deployment
    processes can be streamlined. An example of this automation could be running tests
    on code automatically upon pushing changes to the repository.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions允许在GitHub仓库内直接自动化软件工作流程，包括CI/CD过程。通过自动化这些工作流程，可以加快开发周期，确保代码质量，并简化应用程序部署流程。这种自动化的一个例子是在将更改推送到仓库时自动运行测试。
- en: In the context of CI/CD, CI involves regularly merging all developers’ working
    copies to a shared mainline several times a day. This helps to detect and address
    bugs quickly. By integrating code frequently, teams can identify and fix issues
    early in the development cycle, reducing the cost and effort required to resolve
    them later. For instance, we can set up a GitHub Action to run unit tests every
    time a pull request is merged into the main branch.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在CI/CD的背景下，CI涉及每天多次将所有开发者的工作副本合并到一个共享的主线上。这有助于快速检测和解决错误。通过频繁集成代码，团队可以在开发周期的早期识别并修复问题，从而降低后期解决这些问题的成本和努力。例如，我们可以设置一个GitHub
    Action，每次将拉取请求合并到主分支时都运行单元测试。
- en: CD takes CI one step further by automating the deployment of code changes to
    selected infrastructure environments after they pass through the CI pipeline.
    CD ensures that new features and fixes are released quickly and reliably, improving
    the overall efficiency of the software release process. GitHub allows us to automatically
    deploy a web application to a staging environment whenever there’s a successful
    build from the CI pipeline.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: CD 在 CI 的基础上进一步自动化，在代码变更通过 CI 管道后，将它们部署到选定的基础设施环境中。CD 确保新功能和修复能够快速且可靠地发布，从而提高软件发布过程的整体效率。GitHub
    允许我们在 CI 管道中成功构建后自动将 Web 应用程序部署到预发布环境中。
- en: GitHub Actions offers several benefits for implementing CI/CD pipelines, including
    ease of setup, integration with GitHub’s ecosystem, and the ability to customize
    workflows to fit specific project needs. These benefits make it accessible for
    teams of all sizes, from individuals working on personal projects to large organizations
    managing complex software products. A team can easily set up a CI/CD pipeline
    without needing extensive DevOps expertise, leading to faster development cycles
    and higher-quality releases.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 为实施 CI/CD 管道提供了多项好处，包括设置简便、与 GitHub 生态系统的集成以及定制工作流程以适应特定项目需求的能力。这些好处使得它适用于各种规模的团队，从个人在个人项目上工作到管理复杂软件产品的庞大组织。团队可以轻松设置
    CI/CD 管道，无需广泛的 DevOps 专业知识，从而加快开发周期并提高发布质量。
- en: GitHub Actions streamlines the setup of CI/CD pipelines, removing the need for
    manual configurations such as setting up webhooks, purchasing hardware, and managing
    security patches. Its seamless integration with GitHub allows it to respond to
    any webhook, enabling flexible event triggers for automation or CI/CD pipelines.
    The GitHub community contributes a vast array of pre-built CI/CD workflows through
    the GitHub Marketplace, making it easier for users to use existing solutions or
    share their own. Additionally, GitHub Actions supports any platform, language,
    and cloud, offering unparalleled flexibility for various technologies.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Actions 简化了 CI/CD 管道的设置，消除了手动配置的需求，例如设置网关、购买硬件和管理安全补丁。它与 GitHub 的无缝集成使其能够响应任何网关，从而实现自动化或
    CI/CD 管道的灵活事件触发。GitHub 社区通过 GitHub Marketplace 贡献了大量预构建的 CI/CD 工作流程，使用户能够更容易地使用现有解决方案或分享自己的解决方案。此外，GitHub
    Actions 支持任何平台、语言和云，为各种技术提供了无与伦比的灵活性。
- en: 'For a better understanding of the process, we will explore the different components
    of GitHub Actions:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解这个过程，我们将探讨 GitHub Actions 的不同组件：
- en: '**Workflows** : A workflow is a configurable automated process that you can
    set up in your repository to build, test, package, release, or deploy any project
    on GitHub. Workflows are defined using **YAML** files stored in the **.github/workflows**
    directory of your repository. YAML originally stood for **Yet Another Markup Language**
    , but it later became the recursive acronym **YAML Ain’t** **Markup Language**
    .'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作流程**：工作流程是一个可配置的自动化过程，您可以在您的存储库中设置它以构建、测试、打包、发布或部署 GitHub 上的任何项目。工作流程使用存储在您的存储库
    **.github/workflows** 目录中的 **YAML** 文件定义。YAML 最初代表 **Yet Another Markup Language**，但后来成为递归缩写
    **YAML Ain’t Markup Language**。'
- en: '**Events** : An event is something that happens in a GitHub repository, which
    can trigger a workflow. Examples include pushing code ( **push** ), opening a
    pull request ( **pull_request** ), and creating a new issue ( **issue_comment**
    ).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件**：事件是在 GitHub 存储库中发生的事情，可以触发工作流程。例如，包括代码推送（**push**）、打开拉取请求（**pull_request**）和创建新问题（**issue_comment**）。'
- en: '**Jobs** : A job is a set of steps that execute on the same runner. Each job
    runs in its own fresh instance of the virtual environment specified by **runs-on**
    .'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作业**：作业是一组在同一运行者上执行的步骤。每个作业都在由 **runs-on** 指定的虚拟环境的独立实例中运行。'
- en: '**Actions** : Actions are reusable units of code that perform a specific task,
    such as building a Docker image, running tests, or deploying to a server. They
    can be written in JavaScript (using Node.js) or TypeScript and can be hosted in
    GitHub Marketplace or self-hosted.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作**：操作是执行特定任务的代码的可重用单元，例如构建 Docker 镜像、运行测试或将内容部署到服务器。它们可以用 JavaScript（使用
    Node.js）或 TypeScript 编写，并可以托管在 GitHub Marketplace 或自托管。'
- en: '**Runners** : Runners are servers where the jobs live while they are being
    executed. There are two types of runners: GitHub-hosted runners and self-hosted
    runners.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行者**：运行者是作业执行期间作业所在的服务器。运行者有两种类型：GitHub托管运行者和自托管运行者。'
- en: After this overview of GitHub Actions, we will learn how to configure workflows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在对GitHub Actions的概述之后，我们将学习如何配置工作流程。
- en: Configuring workflows in GitHub Actions
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置GitHub Actions中的工作流程
- en: All components of GitHub can be configured through YAML file. In this section,
    I will explain how the GitHub Actions configuration file is organized to help
    you understand its functionality.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub的所有组件都可以通过YAML文件进行配置。在本节中，我将解释GitHub Actions配置文件的组织方式，以帮助您了解其功能。
- en: The YAML files are placed in the **.github/workflows** directory of our repository.
    These files, known as workflow files, define the scenarios of our CI/CD pipelines.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: YAML文件放置在我们仓库的 **.github/workflows** 目录中。这些文件被称为工作流程文件，定义了我们的CI/CD管道的场景。
- en: 'A typical GitHub Actions workflow configuration file consists of several key
    sections:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的GitHub Actions工作流程配置文件由几个关键部分组成：
- en: '**name** : A human-readable name for the workflow.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** : 为工作流程提供一个人可读的名称。'
- en: '**on** : Specifies the event(s) that trigger the workflow.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on** : 指定触发工作流程的事件（s）。'
- en: '**jobs** : Defines the jobs that make up the workflow. Each job runs on a runner
    environment specified by **runs-on** .'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jobs** : 定义组成工作流程的作业。每个作业都在由 **runs-on** 指定的运行器环境中运行。'
- en: '**steps** : Within each job, steps are executed sequentially. Steps can run
    commands, set up tasks, or perform an action in your repository, a public repository,
    or an action published in a Docker registry.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**steps** : 在每个作业中，步骤按顺序执行。步骤可以运行命令、设置任务或在您的仓库、公共仓库或Docker注册表中发布的操作中执行操作。'
- en: '**env** : Allows you to set environment variables for all steps in a job.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**env** : 允许您为作业中的所有步骤设置环境变量。'
- en: '**defaults** : Sets default behaviors for all jobs and steps in the workflow.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**defaults** : 为工作流程中所有作业和步骤设置默认行为。'
- en: '**permissions** : Controls the permissions granted to the GitHub Actions runner
    during the job execution.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**permissions** : 控制在作业执行期间授予GitHub Actions运行器的权限。'
- en: Let’s break down these key sections with a real-world CI workflow for a C# application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个针对C#应用程序的实际CI工作流程来分解这些关键部分。
- en: 'Here’s the content of a workflow file that we will name **CI.yaml** :'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个我们将命名为 **CI.yaml** 的工作流程文件的内容：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let’s understand how this workflow works and is articulated. There are
    four parts in this file, and they are organized as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解这个工作流程是如何工作以及如何表达的。此文件中有四个部分，它们按以下方式组织：
- en: '**Part 1: the** **Workflow Metadata** :'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Part 1: the** **Workflow Metadata** :'
- en: '**name** : **C# CI**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** : **C# CI**'
- en: This is a descriptive name for the workflow, making it easier to identify in
    the GitHub UI.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个描述性的工作流程名称，使其在GitHub UI中更容易识别。
- en: '**Part 2: the** **Trigger Conditions** :'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Part 2: the** **Trigger Conditions** :'
- en: '**on:**'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**on:**'
- en: '**push:**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**push:**'
- en: '**branches: [** **main ]**'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**branches: [** **main ]**'
- en: 'This means the workflow will run whenever there’s a push to the main branch.
    Similarly, the following workflow will run when a pull request is opened, synchronized,
    or reopened targeting the main branch:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这意味着每当向主分支推送时，工作流程就会运行。同样，以下工作流程将在针对主分支打开、同步或重新打开拉取请求时运行：
- en: '**pull_request:**'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**pull_request:**'
- en: '**branches: [** **main ]**'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**branches: [** **main ]**'
- en: '**Part 3:** **the Jobs** :'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**Part 3:** **the Jobs** :'
- en: '**jobs** :'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**jobs** :'
- en: '**build:**'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**build:**'
- en: '**runs-on** : **windows-latest**'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**runs-on** : **windows-latest**'
- en: This specifies that the job should run on the latest Windows environment provided
    by GitHub Actions. This is important because .NET Core/.NET 5+ applications often
    require a Windows environment to build and run correctly.
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这指定了作业应在GitHub Actions提供的最新Windows环境中运行。这很重要，因为.NET Core/.NET 5+应用程序通常需要Windows环境才能正确构建和运行。
- en: '**Part 4:** **the Steps** :'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**Part 4:** **the Steps** :'
- en: 'Each job consists of a sequence of steps that are executed in order. Here’s
    what each step does:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个作业由一系列按顺序执行的步骤组成。以下是每个步骤的作用：
- en: 'Checkout code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检出代码：
- en: '**uses** : **actions/checkout@v2**'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uses** : **actions/checkout@v2**'
- en: 'This action checks out our repository under **$GITHUB_WORKSPACE** , allowing
    subsequent steps in the job to access it. The **fetch-depth: 0** option ensures
    that all history for all tags and branches is fetched, not just the default branch.'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此操作检查我们的仓库位于 **$GITHUB_WORKSPACE** 下，允许作业中的后续步骤访问它。**fetch-depth: 0** 选项确保获取所有标签和分支的历史记录，而不仅仅是默认分支。'
- en: 'Set up .NET:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '设置.NET:'
- en: '**name** : **Setup.NET**'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**name** : **Setup.NET**'
- en: '**uses** : **actions/setup-dotnet@v1**'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**uses** : **actions/setup-dotnet@v1**'
- en: 'This action sets up the .NET environment. The **dotnet-version: ''3.1.x''**
    input specifies which version of .NET to use. We can adjust this to match the
    requirements of our project.'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此操作设置 .NET 环境。**dotnet-version: ''3.1.x''** 输入指定要使用哪个版本的 .NET。我们可以调整它以匹配我们项目的需求。'
- en: 'Build:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建：
- en: '**name** : **Build**'
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：**构建**'
- en: '**run** : **dotnet build --** **configuration Release**'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：**dotnet build --** **配置 Release**'
- en: This step compiles the application using the .NET CLI. The **--configuration
    Release** flag indicates that the build should produce a **release build** , optimizing
    the output for performance.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此步骤使用 .NET CLI 编译应用程序。**--configuration Release** 标志表示构建应生成 **发布构建**，优化输出以获得性能。
- en: 'Test:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试：
- en: '**name** : **Test**'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：**测试**'
- en: '**run** : **dotnet test --no-build --** **verbosity normal**'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运行**：**dotnet test --no-build --** **verbosity normal**'
- en: This step runs any unit tests in the project without rebuilding the project
    first ( **--no-build** ). The **--verbosity normal** option controls the amount
    of logging output. This helps keep the log clean and focused on essential information.
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此步骤在重建项目之前运行项目中的任何单元测试（**--no-build**）。**--verbosity normal** 选项控制日志输出的数量。这有助于保持日志清洁并专注于关键信息。
- en: This workflow provides a straightforward CI pipeline for a C# project, ensuring
    that every push or pull request to the main branch is built and tested automatically.
    By adjusting the .NET version and possibly adding more jobs or steps, we can tailor
    this workflow to fit the specific needs of our project.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 此工作流程为 C# 项目提供了一个简单的 CI 管道，确保对主分支的每次推送或拉取请求都会自动构建和测试。通过调整 .NET 版本并可能添加更多作业或步骤，我们可以调整此工作流程以适应我们项目的特定需求。
- en: After pushing our YAML file to GitHub, we might now go to the **Actions** tab
    in our GitHub repository to see our workflow running. When we push changes to
    the main branch or open a pull request, the workflow will automatically run.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在将我们的 YAML 文件推送到 GitHub 之后，我们现在可以转到 GitHub 仓库中的 **操作** 选项卡以查看我们的工作流程正在运行。当我们向主分支推送更改或打开拉取请求时，工作流程将自动运行。
- en: Generating GitHub Actions file with Visual Studio
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 生成 GitHub Actions 文件
- en: In this section, we will see how Visual Studio allows us to generate our GitHub
    Actions file for our Azure deployment. Please note that you will need a valid
    subscription, as mentioned in the *Technical requirements* section, to complete
    this section.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解 Visual Studio 如何帮助我们生成用于 Azure 部署的 GitHub Actions 文件。请注意，您需要有效的订阅，如
    *技术要求* 部分所述，才能完成本节。
- en: 'First, we need an application to deploy to Azure, and for that, I simply initiated
    a Blazor project, with the template provided by Visual Studio, which I named **BlazorServerApp**
    . After that, follow these steps:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个可以部署到 Azure 的应用程序，为此，我简单地启动了一个 Blazor 项目，使用 Visual Studio 提供的模板，我将其命名为
    **BlazorServerApp**。之后，按照以下步骤操作：
- en: 'Right-click on the top node of our project in order to launch the publish wizard
    and select **Azure** :'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目顶部的节点以启动发布向导并选择 **Azure**：
- en: '![Figure 10.1 – Publish Azure](img/B22218_10_1.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – 发布 Azure](img/B22218_10_1.jpg)'
- en: Figure 10.1 – Publish Azure
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 发布 Azure
- en: 'Then, select the type of target you want. It is up to you to choose the target
    that will suit your budget and company politics. For this example, we will choose
    **Azure App** **Service (Linux)** :'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择您想要的目标类型。选择适合您预算和公司政策的目标由您决定。对于本例，我们将选择 **Azure 应用服务（Linux）**：
- en: '![Figure 10.2 – Specific target](img/B22218_10_2.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – 特定目标](img/B22218_10_2.jpg)'
- en: Figure 10.2 – Specific target
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 特定目标
- en: Once we choose the target, we will jump to the selection of the new **App Service**
    . Here, we have to select an existing instance in our subscription.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们选择了目标，我们就会跳转到选择新的 **应用服务**。在这里，我们必须选择订阅中现有的实例。
- en: '![Figure 10.3 – App Service subscription](img/B22218_10_3.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.3 – 应用服务订阅](img/B22218_10_3.jpg)'
- en: Figure 10.3 – App Service subscription
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 应用服务订阅
- en: If none are available, you might need to create a new one by clicking on the
    **Create a new instance** link and following the instructions in the wizard.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有可用的实例，您可能需要通过单击 **创建一个新实例** 链接并按照向导中的说明创建一个新的实例。
- en: Finally, in the last step, we will determine the **Deployment type** .
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在最后一步，我们将确定 **部署类型**。
- en: 'Choose **CI/CD using GitHub Actions workflows (generates yml file)** , which
    will generate the appropriate YAML file according to our configuration:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **使用 GitHub Actions 工作流程进行 CI/CD（生成 yml 文件**），这将根据我们的配置生成相应的 YAML 文件：
- en: '![Figure 10.4 – Deployment type](img/B22218_10_4.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.4 – 部署类型](img/B22218_10_4.jpg)'
- en: Figure 10.4 – Deployment type
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 部署类型
- en: Now in the **Solution Explorer** , we can see the Blazor Server project and
    also the generated **BlazorServerApp.yml** file under a **GitHub** **Actions**
    node.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在 **解决方案资源管理器** 中，我们可以看到 Blazor Server 项目，以及位于 **GitHub** **Actions** 节点下的生成的
    **BlazorServerApp.yml** 文件。
- en: '![Figure 10.5 – GitHub Actions node](img/B22218_10_5.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – GitHub Actions 节点](img/B22218_10_5.jpg)'
- en: Figure 10.5 – GitHub Actions node
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – GitHub Actions 节点
- en: We have now seen how to generate a GitHub Actions file. We were able to customize
    it to add code quality to our pipeline, using external tools, for example SonarCloud,
    a widely used static analysis solution, among others. GitHub Actions is a powerful
    asset to explore, and I advise you to read the book *Mastering GitHub Actions*
    by Eric Chapman ( [https://www.packtpub.com/en-us/product/mastering-github-actions-9781805128625](https://www.packtpub.com/en-us/product/mastering-github-actions-9781805128625)
    ) to dig deeper into the subject.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何生成 GitHub Actions 文件。我们能够通过使用外部工具，例如广泛使用的静态分析解决方案 SonarCloud，来自定义它以添加代码质量到我们的管道中。GitHub
    Actions 是一个值得探索的强大工具，我建议您阅读 Eric Chapman 的书籍 *Mastering GitHub Actions* ([https://www.packtpub.com/en-us/product/mastering-github-actions-9781805128625](https://www.packtpub.com/en-us/product/mastering-github-actions-9781805128625))
    以深入了解该主题。
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the power of GitHub Actions for CI and CD, learning
    how to automate and streamline our development workflows. We began by understanding
    the fundamental concepts of GitHub Actions. Next, we moved on to configuring workflows
    in GitHub Actions. We then learned how to write and manage YAML files that define
    our CI/CD pipelines. In the final section, we focused on generating GitHub Actions
    files using Visual Studio. Visual Studio’s robust support for GitHub Actions for
    Azure’s deployment simplifies the process of integrating CI/CD into your development
    environment.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 GitHub Actions 在 CI/CD 中的强大功能，学习了如何自动化和简化我们的开发工作流程。我们首先理解了 GitHub
    Actions 的基本概念。接下来，我们转向配置 GitHub Actions 中的工作流程。然后我们学习了如何编写和管理定义我们的 CI/CD 管道的 YAML
    文件。在最后一节中，我们专注于使用 Visual Studio 生成 GitHub Actions 文件。Visual Studio 对 GitHub Actions
    的强大支持简化了将 CI/CD 集成到您的开发环境中的过程。
- en: Having established a strong foundation in automating CI/CD with GitHub Actions,
    it’s time to expand our collaborative capabilities. In the next chapter, we will
    explore how Azure DevOps can enhance team collaboration, streamline project management,
    and further optimize your development processes.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 GitHub Actions 自动化 CI/CD 建立了坚实的基础之后，现在是时候扩展我们的协作能力了。在下一章中，我们将探讨 Azure DevOps
    如何增强团队协作，简化项目管理，并进一步优化您的开发流程。
