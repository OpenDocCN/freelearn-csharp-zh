["```cs\n#define WM_LBUTTONDOWN    0x0201\n```", "```cs\nprotected override void WndProc(ref Message m)\n{\n    // Captures messages relative to left mouse button\n    if (m.Msg >= 513 && m.Msg <= 515)\n    {\n        MessageBox.Show(\"Processing message: \" + m.Msg);\n    }\n    base.WndProc(ref m);\n}\n```", "```cs\n[DllImport(\"user32.dll\", EntryPoint = \"FindWindow\", SetLastError = true)]\nstatic extern IntPtr FindWindowByCaption(IntPtr ZeroOnly, string lpWindowName);\n[DllImport(\"user32.dll\", EntryPoint = \"SetWindowPos\")]\npublic static extern IntPtr SetWindowPos(IntPtr hWnd, int hWndInsertAfter, \n    int x, int Y, int cx, int cy, int wFlags);\n[DllImport(\"user32.dll\", CharSet = CharSet.Auto)]\nstatic extern IntPtr SendMessage(IntPtr hWnd, UInt32 Msg, \n    IntPtr wParam, IntPtr lParam);\nIntPtr calcHandler;\nprivate const UInt32 WM_CLOSE = 0x0010;\n```", "```cs\nprivate void btnPosition_Click(object sender, EventArgs e)\n{\n  calcHandler =  FindWindowByCaption(IntPtr.Zero, \"Calculator\");\n  SetWindowPos(calcHandler, 0, 0, 0, 0, 0, 0x0001 | 0x0040);\n}\n```", "```cs\nprivate const UInt32 WM_CLOSE = 0x0010;\nprivate void btnClose_Click(object sender, EventArgs e)\n{\n  SendMessage(calcHandler, WM_CLOSE, IntPtr.Zero, IntPtr.Zero);\n}\n```", "```cs\nManagementObjectSearchermos = newManagementObjectSearcher\n(\"SELECT * FROM meta_class WHERE __CLASS LIKE 'Win32_%'\");\nforeach (ManagementObject obj in mos.Get())\nlistBox1.Items.Add(obj[\"__CLASS\"]);\n```", "```cs\nprivate void btnQueryOS_Click(object sender, EventArgs e)\n{\n    listBox1.Items.Clear();\n    listBox2.Items.Clear();\n\n    // First, we get some information about the Operating System:\n    // Name, Version, Manufacturer, Computer Name, and Windows Directory\n    // We call Get() to retrieve the collection of objects and loop through it\n    var osSearch = new ManagementObjectSearcher(\"SELECT * FROM Win32_OperatingSystem\");\n    listBox1.Items.Add(\"Operating System Info\");\n    listBox1.Items.Add(\"-----------------------------\");\n    foreach (ManagementObject osInfo in osSearch.Get())\n    {\n        listBox1.Items.Add(\"Name: \" + osInfo[\"name\"].ToString());\n        listBox1.Items.Add(\"Version: \" + osInfo[\"version\"].ToString());\n        listBox1.Items.Add(\"Manufacturer: \" + osInfo[\"manufacturer\"].ToString());\n        listBox1.Items.Add(\"Computer name: \" + osInfo[\"csname\"].ToString());\n        listBox1.Items.Add(\"Windows Directory: \" + osInfo[\"windowsdirectory\"].ToString());\n    }\n\n    // Now, some data about the processor and BIOS\n    listBox2.Items.Add(\"Processor Info\");\n    listBox2.Items.Add(\"------------------\");\n    var ProcQuery = new SelectQuery(\"Win32_processor\");\n    ManagementObjectSearcher ProcSearch = new ManagementObjectSearcher(ProcQuery);\n    foreach (ManagementObject ProcInfo in ProcSearch.Get())\n    {\n        listBox2.Items.Add(\"Processor: \" + ProcInfo[\"caption\"].ToString());\n    }\n\n    listBox2.Items.Add(\"BIOS Info\");\n    listBox2.Items.Add(\"-------------\");\n    var BiosQuery = new SelectQuery(\"Win32_bios\");\n    ManagementObjectSearcher BiosSearch = new ManagementObjectSearcher(BiosQuery);\n    foreach (ManagementObject BiosInfo in BiosSearch.Get())\n    {\n        listBox2.Items.Add(\"Bios: \" + BiosInfo[\"version\"].ToString());\n    }\n\n    // An enumeration of Win32_Environment instances\n    listBox2.Items.Add(\"Environment Instances\");\n    listBox2.Items.Add(\"-----------------------------\");\n    var envQuery = new SelectQuery(\"Win32_Environment\");\n    ManagementObjectSearcher envInstances = new ManagementObjectSearcher(envQuery);\n    foreach (ManagementBaseObject envVar in envInstances.Get())\n        listBox2.Items.Add(envVar[\"Name\"] + \" -- \" + envVar[\"VariableValue\"]);\n\n    // Finally, a list of shared units\n    listBox2.Items.Add(\"Shared Units\");\n    listBox2.Items.Add(\"------------------\");\n    var sharedQuery = new ManagementObjectSearcher(\"select * from win32_share\");\n    foreach (ManagementObject share in sharedQuery.Get())\n    {\n        listBox2.Items.Add(\"Share = \" + share[\"Name\"]);\n    }\n}\n```", "```cs\nvar mo = newManagementObject(@\"Win32_service='LSM'\");\nforeach (var o in mo.GetRelated(\"Win32_Service\", \"Win32_DependentService\",\nnull,null,\"Antecedent\",\"Dependent\", false, null))\n{\n  listBox1.Items.Add(o[\"__PATH\"]);\n}\n```", "```cs\nManagementObject disk = new\nManagementObject(\"win32_logicaldisk.deviceid='c:'\");\ndisk.Get();\nvar totalMb = long.Parse(disk[\"Size\"].ToString()) / (1024 * 1024);\nvar freeMb = long.Parse(disk[\"FreeSpace\"].ToString()) / (1024 * 1024);\nlistBox1.Items.Add(\"Logical Disk Size = \" + totalMb + \" Mb.\");\nlistBox1.Items.Add(\"Logical Disk FreeSpace = \" + freeMb + \" Mb.\");\n```", "```cs\npublic static class BaseTypeExtensions\n{\n  public static bool IsPrime(this int n)\n  {\n    if (n <= 1) return false;\n    if ((n & 1) == 0)\n    {\n      if (n == 2) return true;\n      else return false;\n    }\n    for (int i = 3; (i * i) <= n; i += 2)\n    {\n      if ((n % i) == 0) return false;\n    }\n    return n != 1;\n  }\n}\n```", "```cs\nStopwatch watch = new Stopwatch();\nIEnumerable <int> numbers = Enumerable.Range(1, 3000000);\nstring strLabel = \"Time Elapsed: \";\n```", "```cs\nprivate void btnGeneratePrimes_Click(object sender, EventArgs e)\n{\n  watch.Restart();\n  var query = numbers.Where(n => n.IsPrime());\n  var primes = query.ToList();\n  watch.Stop();\n  label1.Text = strLabel + watch.ElapsedMilliseconds.ToString(\"0,000\")+ \" ms.\";\n  listBox1.DataSource = primes.ToList();\n}\n```", "```cs\nvar query = numbers.AsParallel().AsOrdered()\n.WithDegreeOfParallelism(Environment.ProcessorCount/2)\n.Where(n => n.IsPrime());\n```", "```cs\npublic static bool IsPrime(this int n, Cancellation TokenSource cs)\n{\n  if (n == 1000) cs.Cancel();\n  return IsPrime(n);\n}\n```", "```cs\nprivate void btnPrimesWithCancel_Click(object sender, EventArgs e)\n{\n  List<int> primes;\n  using (var cs = newCancellationTokenSource())\n  {\n    watch.Restart();\n    var query = numbers.AsParallel().AsOrdered()\n    .WithCancellation(cs.Token)\n    .WithDegreeOfParallelism(Environment.ProcessorCount / 2)\n    .Where(n => n.IsPrime(cs));\n    try\n    {\n      primes = query.ToList();\n    }\n    catch (OperationCanceledException oc)\n    {\n      string msg1 = \"Query cancelled.\";\n      string msg2 = \"Cancel Requested: \" +\n      oc.CancellationToken.IsCancellationRequested.ToString();\n      listBox5.Items.Add(msg1);\n      listBox5.Items.Add(msg2);\n    }\n  }\n  watch.Stop();\n  lblCancel.Text = strLabel + watch.ElapsedMilliseconds.ToString(\"0,000\") + \" ms.\";\n}\n```", "```cs\nprivate void btnStandardFor_Click(object sender, EventArgs e)\n{\n  rtbOutput.ResetText();\n  watch.Start();\n  for (int i = 1; i < 1000; i++)\n  {\n    if (i.IsPrime())\n      rtbOutput.Text += string.Format(\"{0} is prime\", i) + cr;\n    else\n      rtbOutput.Text += string.Format(\"{0} is NOT prime\", i) + cr;\n  }\n  watch.Stop();\n  label1.Text = \"Elapsed Time: \" + watch.ElapsedMilliseconds.ToString(\"0,000\") + \" ms.\"; ;\n}\n```", "```cs\n// Previously, at class definition:\nStopwatch watch = newStopwatch();\nstring cr = Environment.NewLine;\nSynchronizationContext context;\n\npublic Form1()\n{\n  InitializeComponent();\n  //context = new SynchronizationContext();\n  context = SynchronizationContext.Current;\n}\n\nprivate void btnParallelFor_Click(object sender, EventArgs e)\n{\n  rtbOutput.ResetText();\n  watch.Restart();\n  Parallel.For(1, 1000, (i) =>\n  {\n    if (i.IsPrime())\n      context.Post(newSendOrPostCallback((x) =>\n    {\n      UpdateUI(string.Format(\"{0} is prime\", i));\n    }), null);\n    else\n      context.Post(newSendOrPostCallback((x) =>\n    {\n      UpdateUI(string.Format(\"{0} is NOT prime\", i));\n    }), null);\n  });\n  watch.Stop();\n  label2.Text = \"Elapsed Time: \" + watch.ElapsedMilliseconds.ToString(\"0,000\") + \" ms.\";\n}\nprivate void UpdateUI(string data)\n{\n  this.Invoke(newAction(() =>\n  {\n    rtbOutput.Text += data + cr;\n  }));\n}\n```", "```cs\nStopwatch watch = new Stopwatch();\nstring[] files = Directory.GetFiles(@\"<Your Images Directory Goes Here>\", \"*.png\");\nstring modDir = @\"<Images Directory>/Modified\";\n\npublic void ProcessImages()\n{\n  Directory.CreateDirectory(modDir);\n  watch.Start();\n\n  foreach (var file in files)\n  {\n    string filename = Path.GetFileName(file);\n    var bitmap = ne0wBitmap(file);\n    bitmap.MakeTransparent(Color.White);\n    bitmap.Save(Path.Combine(modDir, filename));\n  }\n  watch.Stop();\n\n  lblForEachStandard.Text += watch.ElapsedMilliseconds.ToString() + \" ms.\";\n  watch.Restart();\n\nParallel.ForEach(files, (file) =>\n  {\n    string filename = Path.GetFileName(file);\n    var bitmap = newBitmap(file);\n    bitmap.MakeTransparent(Color.White);\n    bitmap.Save(Path.Combine(modDir, \"T_\" + filename));\n  });\n  watch.Stop();\n  lblParallel.Text += watch.ElapsedMilliseconds.ToString() + \" ms.\";\n  MessageBox.Show(\"Finished\");\n}\n```", "```cs\nprivate void btnRead_Click(object sender, EventArgs e)\n{\nvar getFiles = newTask<List<string>>(() =>  getListOfIconsAsync());\n  getFiles.Start();\n  getFiles.ContinueWith((f) => UpdateUI(getFiles.Result));\n}\nprivate List<string> getListOfIconsAsync()\n{\n  string[] files = Directory.GetFiles(filesPath, \"*.png\");\n  return files.ToList();\n}\nprivate void UpdateUI(List<string> filenames)\n{\n  listBox1.Items.Clear();\n  listBox1.DataSource = filenames;\n}\n```", "```cs\ngetFiles.ContinueWith((f) => UpdateUI(getFiles.Result),\nTaskScheduler.FromCurrentSynchronizationContext());\n```", "```cs\nprivate void btnProcessImages_Click(object sender, EventArgs e)\n{\n  lblMessage.Text = \"Tasks finished:\";\n  var t1 = Task.Factory.StartNew(() => pictureBox1.Image =\n    Properties.Resources.Hockney_2FIGURES);\n  t1.ContinueWith((t) => lblMessage.Text += \" t1-\",\n    TaskScheduler.FromCurrentSynchronizationContext());\n  var t2 = Task.Factory.StartNew(() => pictureBox2.Image =\n    BitmapInvertColors(Properties.Resources.Hockney_2FIGURES));\n  t2.ContinueWith((t) => lblMessage.Text += \" t2-\",\n    TaskScheduler.FromCurrentSynchronizationContext());\n  var t3 = Task.Factory.StartNew(() => pictureBox3.Image =\n    MakeGrayscale(Properties.Resources.Hockney_2FIGURES));\n  t3.ContinueWith((t) => lblMessage.Text += \" t3-\",\n    TaskScheduler.FromCurrentSynchronizationContext());\n  var t4 = Task.Factory.StartNew(() => pictureBox4.Image =\n    CorrectGamma(Properties.Resources.Hockney_2FIGURES, 2.5m));\n  //var t6 = Task.Factory.StartNew(() => Loop());\n  t4.ContinueWith((t) => lblMessage.Text += \" t4-\",\n    TaskScheduler.FromCurrentSynchronizationContext());\n  var t5 = Task.Factory.ContinueWhenAll(new[] { t1, t2, t3, t4 }, (t) =>\n  {\n    Thread.Sleep(50);\n  });\n  t5.ContinueWith((t) => lblMessage.Text += \" –All finished\",\n    TaskScheduler.FromCurrentSynchronizationContext());\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n  Console.BackgroundColor = ConsoleColor.Gray;\n  Console.WindowWidth = 39;\n  Console.WriteLine(\"Operation started...\");\n  var cs = newCancellationTokenSource();\n  var t = Task.Factory.StartNew(\n    () => DoALongWork(cs)\n  );\n  Thread.Sleep(500);\n  cs.Cancel();\n  Console.Read();\n}\nprivate static void DoALongWork(CancellationTokenSource cs)\n{\n  try\n  {\n    for (int i = 0; i < 100; i++)\n    {\n      Thread.Sleep(10);\n      cs.Token.ThrowIfCancellationRequested();\n    }\n  }\n  catch (OperationCanceledException ex)\n  {\n    Console.WriteLine(\"Operation Cancelled. \\n Cancellation requested: \" + ex.CancellationToken.IsCancellationRequested);\n  }\n}\n```", "```cs\n{\n  \"projects\": [ \"src\", \"test\" ],\n  \"sdk\": {\n    \"version\": \"1.0.0-preview2-003121\"\n  }\n}\n```", "```cs\nstaticstring pathImages = @\"<Your Path to files>;\nstaticvoid Main(string[] args)\n{\n  Console.WriteLine(\" Largest number of Rows: \" + Console.LargestWindowHeight);\n  Console.WriteLine(\" Largest number of Columns: \" + Console.LargestWindowWidth);\n  Console.WriteLine(\" ------------------------------\\n\");\n  ReadFiles(pathImages);\n  Console.ReadLine();\n}\n\nprivatestaticvoid ReadFiles(string path)\n{\n  DirectoryInfo di = newDirectoryInfo(path);\n  var files = di.EnumerateFiles(\"*.txt\",\n  SearchOption.TopDirectoryOnly).ToArray();\n  foreach (var item in files)\n  {\n    Console.WriteLine(\" \"+ File.ReadAllText(item.FullName));\n  }\n}\n```", "```cs\n{\n  \"version\": \"1.0.0-*\",\n  \"buildOptions\": {\n    \"emitEntryPoint\": true\n  },\n\n  \"dependencies\": {\n    \"Microsoft.NETCore.App\": {\n      \"version\": \"1.0.0\"\n    }\n  },\n  \"runtimes\": {\n    \"win10-x64\": {}\n  },\n  \"frameworks\": {\n    \"netcoreapp1.0\": {\n      \"imports\": \"dnxcore50\"\n    }\n  }\n}\n```", "```cs\n// This method gets called by the runtime. Use this method to add \n// services to the container.\npublic void ConfigureServices(IServiceCollection services)\n{\n}\n// This method gets called by the runtime. Use this method to configure\n// the HTTP request pipeline.\npublic void Configure(IApplicationBuilder app, IHostingEnvironmentenv,\nILoggerFactory loggerFactory)\n{\n  loggerFactory.AddConsole();\n\n  if (env.IsDevelopment())\n  {\n    app.UseDeveloperExceptionPage();\n  }\n\n  app.Run(async (context) =>\n  {\n    await context.Response.WriteAsync(\"Hello World!\");\n  });\n}\n```", "```cs\napp.Run(async (context) =>\n{\n  string localPort = context.Connection.LocalPort.ToString();\n  await context.Response.WriteAsync(\"Hello World! - Local Port: \" + localPort);\n});\n```", "```cs\npublic static void Main(string[] args)\n{\n  var host = new WebHostBuilder()\n  .Use Kestrel()\n  .Use ContentRoot(Directory.GetCurrentDirectory())\n  .Use IIS Integration()\n  .Use Startup<Startup>()\n  .Build();\n  host.Run();\n}\n```", "```cs\napp.UseStaticFiles();\n```", "```cs\n<h2>ASP.NET Core 1.0 Demo</h2>\n<h4>This content is static</h4>\n<imgsrc=\"img/100\"alt=\"Random Image\"/>\n```", "```cs\npublic Startup(IHostingEnvironmentenv)\n{\n  var builder = newConfigurationBuilder()\n  .SetBasePath(env.ContentRootPath)\n  .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n  .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n  .AddEnvironmentVariables();\n  Configuration = builder.Build();\n}\n```", "```cs\npublic static void Main(string[] args)\n{\n  var host = new WebHostBuilder()\n  .Use Kestrel()\n  .Use ContentRoot(Directory.GetCurrentDirectory())\n  .Use IISIntegration()\n  .Use Startup<Startup>()\n  .Build();\n\n  host.Run();\n}\n```", "```cs\npublic IActionResult About()\n{\n  ViewData[\"Message\"] = \"Your application description page.\";\n\n  return View();\n}\n```", "```cs\npublic classPACKTAddress\n{\n  public string Company { get; set; }\n  public string Street { get; set; }\n  public string City { get; set; }\n  public string Country { get; set; }\n}\n```", "```cs\npublic IActionResult PACKTContact()\n{\n  ViewData[\"Message\"] = \"PACKT Company Data\";\n\n  var viewModel = new Models.PACKTAddress()\n  {\n    Company = \"Packt Publishing Limited\",\n    Street = \"2nd Floor, Livery Place, 35 Livery Street\",\n    City = \"Birmingham\",\n    Country = \"UK\"\n  };\n  return View(viewModel);\n}\n```", "```cs\n@model WebApplication1.Models.PACKTAddress\n<h2>PACKT Publishing office information</h2>\n<address>\n  @Model.Company<br/>\n  @Model.Street<br/>\n  @Model.City, @Model.Country <br/>\n  <abbrtitle=\"Phone\">P:</abbr>\n  0121 265 6484\n</address>\n```", "```cs\n<ulclass=\"nav navbar-nav\">\n  <li><aasp-controller=\"Home\"asp-action=\"Index\">Home</a></li>\n  <li><aasp-controller=\"Home\"asp-action=\"About\">About</a></li>\n  <li><aasp-controller=\"Home\"asp-action=\"Contact\">Contact</a></li>\n  <li><aasp-controller=\"Home\"asp-action=\"PACKTContact\">PACKT Information</a></li>\n</ul>\n```"]