- en: Contribute Simple Functionality to Roslyn C# Compiler Open Source Code
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向Roslyn C#编译器开源代码贡献简单功能
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Setting up Roslyn enlistment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Roslyn征募
- en: Implementing a new syntax error in the C# compiler code base
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C#编译器代码库中实现新的语法错误
- en: Implementing a new semantic error in the C# compiler code base
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在C#编译器代码库中实现新的语义错误
- en: Writing unit tests for a new error in C# compiler code base
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为C#编译器代码库中的新错误编写单元测试
- en: Using Roslyn Syntax Visualizer to view Roslyn syntax tokens and nodes for a
    source file
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Roslyn语法可视化器查看源文件的Roslyn语法标记和节点
- en: Sending a Roslyn Pull request to contribute to next version of C# compiler and
    VS IDE
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向Roslyn Pull request提交以贡献C#编译器和VS IDE的下一个版本
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter enables developers to add new functionality to the Roslyn C# compiler.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使开发者能够向Roslyn C#编译器添加新功能。
- en: 'Let''s briefly walk through the different parts of the Roslyn source tree.
    You can take a quick look at the topmost source folder of the Roslyn repo in the
    VS2017 branch: [https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src](https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简要地浏览一下Roslyn源代码树的不同部分。您可以在VS2017分支中快速查看Roslyn仓库的最顶层源文件夹：[https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src](https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src)
- en: '![](img/d251ab68-d073-46e3-b62c-658b8681a930.png) [](https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d251ab68-d073-46e3-b62c-658b8681a930.png) [](https://github.com/dotnet/roslyn/tree/Visual-Studio-2017/src)'
- en: 'The most important source folders and corresponding components are:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的源文件夹及其对应的组件如下：
- en: '`Compilers`: This implements the Roslyn C# and VB compilers and the core Microsoft
    Code Analysis layer, which exposes the rich-language agnostic API to perform syntactic
    and semantic analysis of source code. Core concepts of this layer are SyntaxTree
    (source file), SemanticModel (semantics of a source file), Symbol (declaration
    in source), and Compilation (collection of source files and options).'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Compilers`: 这实现了Roslyn C#和VB编译器以及核心Microsoft代码分析层，该层公开了丰富的语言无关API，用于对源代码进行语法和语义分析。此层的核心概念包括SyntaxTree（源文件）、SemanticModel（源文件的语义）、Symbol（源中的声明）和Compilation（源文件和选项的集合）。'
- en: '`Workspaces`**:** This implements the Workspaces layer and the corresponding
    APIs to do workspace-level code analysis and refactoring of projects and solutions.
    This layer is completely agnostic to the host operating on the workspace, such
    as Visual Studio or command-line tools. Core concepts of this layer are Document
    (syntax tree with an associated semantic model), Project (collection of documents
    and assembly references comprising a compilation and properties for configuring
    a compilation), Solution (collection of projects), and Workspace-level Options.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Workspaces`**:** 这实现了工作区层及其相应的API，用于对项目和解决方案进行工作区级别的代码分析和重构。此层对在工作区上运行的宿主操作系统（如Visual
    Studio或命令行工具）完全无关。此层的核心概念包括文档（带有相关语义模型的语法树）、项目（由文档和程序集引用组成的集合，构成编译，并具有配置编译的属性）、解决方案（项目的集合）和工作区级别的选项。'
- en: '`Features`**:** Extensible IDE features built on top of the Workspaces layer,
    such as Code fixes, refactorings, intellisense, completion, find references, navigate
    to definition, edit and continue (EnC), diagnostics, and so on, lie in this layer.
    This layer is not coupled to Visual Studio and can be hosted within different
    hosts or command-line tools.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Features`**:** 建立在Workspaces层之上的可扩展IDE功能，如代码修复、重构、IntelliSense、完成、查找引用、导航到定义、编辑并继续（EnC）、诊断等，都位于此层。此层与Visual
    Studio无关，可以托管在不同的宿主或命令行工具中。'
- en: '`VisualStudio`**:** Visual Studio-specific components built on top of the Features
    and Workspaces layers provide an end-to-end C# and VB IDE experience. Core concepts
    of this layer are the *Visual Studio* *Workspace*, Project system (component that
    bridges the gap between static program representation to a live IDE representation
    by populating the workspace and lighting up the above noted IDE features), and
    Language services (core language semantic services exposed to the project system).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VisualStudio`**:** 在功能和Workspaces层之上构建的Visual Studio特定组件提供了一个端到端的C#和VB IDE体验。此层的核心概念包括*Visual
    Studio* *工作区*、项目系统（组件通过填充工作区和启用上述提到的IDE功能，在静态程序表示和实时IDE表示之间架起桥梁）和语言服务（向项目系统公开的核心语言语义服务）。'
- en: '`ExpressionEvaluator`**:** C# and VB expression evaluators to parse and evaluate
    simple expressions and compute the runtime results.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ExpressionEvaluator`**:** 用于解析和评估简单表达式以及计算运行时结果的 C# 和 VB 表达式评估器。'
- en: '`Samples`**:** Samples and walkthroughs to demonstrate Roslyn API usage. You
    can read more details at [https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs](https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs).'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Samples`**:** 展示 Roslyn API 使用的示例和教程。您可以在[https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs](https://github.com/dotnet/roslyn/wiki/Samples-and-Walkthroughs)中阅读更多详细信息。'
- en: You can read a more detailed Roslyn overview at [https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview](https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview](https://github.com/dotnet/roslyn/wiki/Roslyn%20Overview)阅读更多关于
    Roslyn 的详细信息。
- en: Setting up Roslyn enlistment
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Roslyn 入队
- en: In this section, we will walk you through the steps to install the required
    tools, enlist in Roslyn, build the Roslyn compiler sources and deploy, debug,
    and run tests for the locally-built compiler toolset.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您介绍安装所需工具、加入 Roslyn、构建 Roslyn 编译器源代码以及部署、调试和运行本地构建的编译工具集测试的步骤。
- en: Getting Started
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
    Ensure that C#, VB, MSBuild, and Visual Studio Extensibility are included in the
    selected workloads. More specifically, add the .NET desktop development workload
    and Visual Studio Extensibility tools workloads to your VS install. [](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 以执行本章中的配方。您可以从[https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)安装免费的
    Visual Studio 2017 社区版本。请确保所选的工作负载包括 C#、VB、MSBuild 和 Visual Studio 扩展性。更具体地说，将
    .NET 桌面开发工作负载和 Visual Studio 扩展性工具工作负载添加到您的 VS 安装中。[](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
- en: How to do it...
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Install GitHub for desktop by following the steps at [https://desktop.github.com/](https://desktop.github.com/)
    and sign in to GitHub using your GitHub profile. If you do not have a profile,
    you can create one at [https://github.com/join](https://github.com/join).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤在[https://desktop.github.com/](https://desktop.github.com/)安装 GitHub for
    desktop 并使用您的 GitHub 个人资料登录 GitHub。如果您没有个人资料，您可以在[https://github.com/join](https://github.com/join)创建一个。
- en: 'Execute the following commands from the *Git Shell* to enlist and restore Roslyn
    compiler sources with VS2017 tag:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 *Git Shell* 执行以下命令以使用 VS2017 标签加入并恢复 Roslyn 编译器源代码：
- en: git clone https://github.com/dotnet/roslyn c:\Roslyn
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: git clone https://github.com/dotnet/roslyn c:\Roslyn
- en: cd c:\Roslyn
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: cd c:\Roslyn
- en: git checkout tags/Visual-Studio-2017
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: git checkout tags/Visual-Studio-2017
- en: Restore.cmd
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Restore.cmd
- en: 'Build the Roslyn compiler subtree from a VS2017 admin developer command prompt:
    `msbuild /m /v:m Compilers.sln`. You can also build the entire Roslyn source tree
    using either `Build.cmd` or `msbuild /m /v:m Roslyn.sln`. This step builds the
    sources and deploys the locally-built compiler toolset (or entire Roslyn IDE +
    compiler toolset) into the **RoslynDev** hive.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 VS2017 管理员开发命令提示符构建 Roslyn 编译器子树：`msbuild /m /v:m Compilers.sln`。您也可以使用 `Build.cmd`
    或 `msbuild /m /v:m Roslyn.sln` 构建整个 Roslyn 源树。此步骤构建源代码并将本地构建的编译工具集（或整个 Roslyn
    IDE + 编译工具集）部署到 **RoslynDev** hive。
- en: 'NOTE: If you get build errors due to strong name signing failures, execute
    the following command from an admin developer command prompt to disable strong
    name verification: `sn -Vr *` , and then execute the build.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：如果您由于强名称签名失败而遇到构建错误，请从管理员开发命令提示符执行以下命令以禁用强名称验证：`sn -Vr *`，然后执行构建。
- en: Open `Roslyn.sln` in VS2017 and set `Compilers\CompilerExtension.csproj` as
    the startup project.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS2017 中打开 `Roslyn.sln` 并将 `Compilers\CompilerExtension.csproj` 设置为启动项目。
- en: Click on *Ctrl* + *F5* to deploy the locally built compiler toolset into a separate
    Visual Studio hive and start a new Visual Studio instance from this hive (RoslynDev).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 *Ctrl* + *F5* 将本地构建的编译工具集部署到单独的 Visual Studio hive 并从这个 hive 启动一个新的 Visual
    Studio 实例（RoslynDev）。
- en: In the new instance of Visual Studio, create a new C# class library project.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新的 Visual Studio 实例中，创建一个新的 C# 类库项目。
- en: Change the msbuild output verbosity from *Minimal* to *Normal* by opening Tools
    | Options | Projects and Solutions | Build and Run | MSBuild project build output
    verbosity.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过打开“工具”|“选项”|“项目和解决方案”|“构建和运行”|“MSBuild项目构建输出详细程度”，将msbuild输出详细程度从“最小”更改为“正常”。
- en: 'Build the C# class library project and open the Output Window to confirm that
    locally built <q>csc.exe</q> was used to build the library and it was executed
    from the Visual Studio RoslynDev hive: `C:\USERS\<%USER_NAME%>\APPDATA\LOCAL\MICROSOFT\VISUALSTUDIO\15.0_XXXXXXXXROSLYNDEV\EXTENSIONS\MICROSOFT\ROSLYN
    COMPILERS\42.42.42.42424\csc.exe`'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建C#类库项目，并打开输出窗口以确认是否使用了本地构建的`<q>csc.exe</q>`来构建库，并且它是从Visual Studio RoslynDev存储库执行的：`C:\USERS\<%USER_NAME%>\APPDATA\LOCAL\MICROSOFT\VISUALSTUDIO\15.0_XXXXXXXXROSLYNDEV\EXTENSIONS\MICROSOFT\ROSLYN
    COMPILERS\42.42.42.42424\csc.exe`
- en: 'Right-click on `Compilers\CSharpCompilerSemanticTest.csproj` and open project
    Properties | Debug page. Execute the C# compiler semantic unit tests by executing
    the xunit console exe specified in the Start external program textbox with arguments
    from the Command line arguments textbox: `C:\Users\<%USER_NAME%>\.nuget\packages\xunit.runner.console\<%VERSION%>\tools\xunit.console.x86.exe
    "<%REPO_ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\\Roslyn.Compilers.CSharp.Semantic.UnitTests.dll"
    -html "<%REPO_ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\\xUnitResults\Roslyn.Compilers.CSharp.Semantic.UnitTests.html"
    -noshadow`'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Compilers\CSharpCompilerSemanticTest.csproj`并打开项目属性|调试页面。通过执行Start external
    program文本框中指定的xunit控制台exe文件，并使用命令行参数文本框中的参数执行C#编译器语义单元测试：`C:\Users\<%USER_NAME%>\.nuget\packages\xunit.runner.console\<%VERSION%>\tools\xunit.console.x86.exe
    "<%REPO_ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\\Roslyn.Compilers.CSharp.Semantic.UnitTests.dll"
    -html "<%REPO_ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\\xUnitResults\Roslyn.Compilers.CSharp.Semantic.UnitTests.html"
    -noshadow`
- en: You can get more detailed instructions on enlisting, building, and testing Roslyn
    sources at [https://github.com/dotnet/roslyn/blob/dev16/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md](https://github.com/dotnet/roslyn/blob/dev16/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/dotnet/roslyn/blob/dev16/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md](https://github.com/dotnet/roslyn/blob/dev16/docs/contributing/Building,%20Debugging,%20and%20Testing%20on%20Windows.md)获取有关注册、构建和测试Roslyn源代码的更详细说明。
- en: Implementing a new syntax error in the C# compiler code base
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C#编译器代码库中实现新的语法错误
- en: 'This section will enable Roslyn contributors to make changes to the C# parser
    to add a new syntax error. The C# parser reports a diagnostic *CS0106* (t*he modifier
    ''modifier'' is not valid for this* item) ([https://msdn.microsoft.com/en-us/library/3dd3ha66.aspx](https://msdn.microsoft.com/en-us/library/3dd3ha66.aspx))
    when an incorrect modifier is used in symbol declarations such as fields, methods,
    locals, and so on. For example, the following erroneous code generates three *CS0106*
    instances:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将使Roslyn贡献者能够修改C#解析器以添加新的语法错误。当在符号声明（如字段、方法、局部变量等）中使用不正确的修饰符时，C#解析器报告诊断*CS0106*（`t*he
    modifier 'modifier' is not valid for this* item`）([https://msdn.microsoft.com/en-us/library/3dd3ha66.aspx](https://msdn.microsoft.com/en-us/library/3dd3ha66.aspx))。例如，以下错误代码生成了三个*CS0106*实例：
- en: '[PRE0]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'However, if you declare a parameter with an incorrect modifier, say `readonly
    int param`, it doesn''t generate *CS0106*, instead it generates a large number
    of unhelpful syntax errors and squiggles related to missing tokens, invalid identifiers,
    and so on. Consider the following example:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您声明了一个具有不正确修饰符的参数，例如`readonly int param`，它不会生成*CS0106*错误，而是生成大量与缺失标记、无效标识符等相关的不太有用的语法错误和波浪线。考虑以下示例：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This generates the following set of errors and squiggles:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这会生成以下错误和波浪线集：
- en: '![](img/734e2d61-fb46-43a1-b916-acd118645928.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/734e2d61-fb46-43a1-b916-acd118645928.png)'
- en: In this section, we will modify the C# parser to implement a better error recovery
    mechanism for such invalid parameter modifiers and report a single *CS0106* syntax
    error, which is more helpful to the end user.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将修改C#解析器以实现更好的错误恢复机制，对于此类无效参数修饰符，将报告单个*CS0106*语法错误，这对最终用户更有帮助。
- en: Getting Started
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You need to ensure that you have installed *Git* tools, VS2017, with .NET development
    and VS Extensiblity workloads and have enlisted and built Roslyn sources with
    the VS2017 tag. For reference, see the recipe Setting up Roslyn enlistment, at
    the start of this chapter.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保已安装带有.NET开发和VS扩展性工作负载的Git工具、VS2017，并且已使用VS2017标签注册和构建了Roslyn源代码。有关参考，请参阅本章开头“设置Roslyn注册”的配方。
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open `Roslyn.sln` at the root of the Roslyn repo in VS2017.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS2017 中打开 Roslyn 仓库根目录下的 `Roslyn.sln`。
- en: Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Parser\LanguageParser.cs`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开源文件 `<%ROOT%>\src\Compilers\CSharp\Portable\Parser\LanguageParser.cs`。
- en: 'Navigate to private method `IsPossibleParameter` (line 4060) and add the highlighted
    `||` clause to the default case return statement:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到私有方法 `IsPossibleParameter`（第4060行）并将高亮的 `||` 子句添加到默认情况返回语句中：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Navigate to private method `ParseParameterModifiers` (line 4234), and replace
    the existing `while (IsParameterModifier(this.CurrentToken.Kind, allowThisKeyword))`
    with a `while (true)` loop, add the following if statement at the start of the
    while loop:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到私有方法 `ParseParameterModifiers`（第4234行），并将现有的 `while (IsParameterModifier(this.CurrentToken.Kind,
    allowThisKeyword))` 替换为 `while (true)` 循环，在 while 循环的开始处添加以下 if 语句：
- en: '[PRE3]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Build the solution.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建解决方案。
- en: Set `VisualStudio\VisualStudioSetup.Next.csproj` as the startup project and
    click on *Ctrl* + *F5* to start a new VS instance with the locally built compiler
    and IDE toolset.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `VisualStudio\VisualStudioSetup.Next.csproj` 设置为启动项目，然后按 *Ctrl* + *F5* 启动一个新的
    VS 实例，并使用本地构建的编译器和 IDE 工具集。
- en: 'Create a new C# class library project, say `ClassLibrary`, and add the following
    code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 C# 类库项目，例如 `ClassLibrary`，并添加以下代码：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Verify that there is a single *CS0106* diagnostic in the error list for the
    invalid `readonly` modifier and also that the editor has a single squiggle.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证错误列表中有一个 *CS0106* 诊断，用于无效的 `readonly` 修饰符，并且编辑器有一个单条波浪线。
- en: '![](img/8f4b6f12-be09-473a-af01-11f9f09e747d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8f4b6f12-be09-473a-af01-11f9f09e747d.png)'
- en: Build the project and verify that the build output has a single *CS0106* diagnostic.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并验证构建输出只有一个 *CS0106* 诊断。
- en: You can view all the parser changes made in this recipe at [https://github.com/mavasani/roslyn/commit/02b7be551b46fa9a8e054c3317bc2ae7957b563c.](https://github.com/mavasani/roslyn/commit/02b7be551b46fa9a8e054c3317bc2ae7957b563c)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://github.com/mavasani/roslyn/commit/02b7be551b46fa9a8e054c3317bc2ae7957b563c.](https://github.com/mavasani/roslyn/commit/02b7be551b46fa9a8e054c3317bc2ae7957b563c)
    查看在此配方中做出的所有解析器更改。
- en: How it works...
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Parsing, syntax analysis, or syntactic analysis is the process of analyzing
    a string of symbols, either in natural language or in computer languages, conforming
    to the rules of a formal grammar.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 解析、语法分析或句法分析是分析一串符号的过程，这些符号可以是自然语言或计算机语言中的，并符合形式语法的规则。
- en: The C# language parser is the first phase of the compiler tool chain that parses
    the source files according to the C# language specification to produce syntax
    trees. The primary entry point for parsing each source file is `SyntaxFactory.ParseCompilationUnit`
    ([http://source.roslyn.io/#q=SyntaxFactory.ParseCompilationUnit](http://source.roslyn.io/#q=SyntaxFactory.ParseCompilationUnit)),
    which transforms the given source text into a `CompilationUnitSyntax` with syntax
    nodes, tokens, and trivia.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: C# 语言解析器是编译器工具链的第一个阶段，它根据 C# 语言规范解析源文件以生成语法树。解析每个源文件的主要入口点是 `SyntaxFactory.ParseCompilationUnit`
    ([http://source.roslyn.io/#q=SyntaxFactory.ParseCompilationUnit](http://source.roslyn.io/#q=SyntaxFactory.ParseCompilationUnit))，它将给定的源文本转换为带有语法节点、标记和语法的
    `CompilationUnitSyntax`。
- en: Use [http://source.roslyn.io/](http://source.roslyn.io/) for a rich semantic
    search and navigation of Roslyn source code. Note that the version of source code
    indexed at this website corresponds to the latest sources in the *master* branch
    of the Roslyn repo and may differ from the sources for the *Visual-Studio-2017*
    tag.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [http://source.roslyn.io/](http://source.roslyn.io/) 进行丰富的语义搜索和导航 Roslyn
    源代码。请注意，该网站索引的源代码版本对应于 Roslyn 仓库 *master* 分支的最新源代码，可能与 *Visual-Studio-2017* 标签的源代码不同。
- en: '`LanguageParser.ParseCompilationUnitCore` ([http://source.roslyn.io/#q=LanguageParser.ParseCompilationUnitCore](http://source.roslyn.io/#q=LanguageParser.ParseCompilationUnitCore))
    is the core method of the LanguageParser that parses the outermost namespace declaration,
    if any, and then parses type and member declarations within the namespace body.
    It uses the **Lexer** ([http://source.roslyn.io/#q=Lexer.cs](http://source.roslyn.io/#q=Lexer.cs))
    to read the next token and uses a very sophisticated error recovery mechanism
    to provide meaningful syntax errors for erroneous code with misplaced or invalid
    tokens.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`LanguageParser.ParseCompilationUnitCore` ([http://source.roslyn.io/#q=LanguageParser.ParseCompilationUnitCore](http://source.roslyn.io/#q=LanguageParser.ParseCompilationUnitCore))
    是 LanguageParser 的核心方法，它解析最外层的命名空间声明（如果有的话），然后解析命名空间体内的类型和成员声明。它使用 **Lexer** ([http://source.roslyn.io/#q=Lexer.cs](http://source.roslyn.io/#q=Lexer.cs))
    来读取下一个标记，并使用非常复杂的错误恢复机制为错误代码提供有意义的语法错误，这些错误代码包含位置不当或无效的标记。'
- en: In this recipe, we identified a case of invalid modifiers on parameters, where
    the C# compiler doesn't perform optimal error recovery and changed the parser
    code to look for invalid modifiers on parameters and parse them with the *CS0601*
    diagnostic.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们确定了一个参数上无效修饰符的案例，其中C#编译器没有执行最佳错误恢复，并更改了解析器代码以查找参数上的无效修饰符，并使用*CS0601*诊断解析它们。
- en: The following highlighted change in step 3 to the default case return statement
    in `IsPossibleParameter` ensures that we don't completely skip over the parameter
    list when we encounter a member-level modifier such as readonly, public, private,
    and so on, in the modifier list of a parameter declaration. Instead, we associate
    the modifier with the parameter.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤3中对`IsPossibleParameter`默认情况返回语句的以下突出更改确保了当我们遇到参数声明修饰符列表中的成员级修饰符（如readonly、public、private等）时，不会完全跳过参数列表。相反，我们将修饰符与参数关联。
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `If` statement added in the while loop of the `ParseParameterModifiers`
    method in step 4 ensures that we parse both valid and invalid modifiers into the
    parameter modifier list (as opposed to just the valid modifiers in the original
    code) and generate appropriate *CS0106* syntax errors on the invalid modifiers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤4中添加到`ParseParameterModifiers`方法while循环中的`If`语句确保我们将有效和无效的修饰符都解析到参数修饰符列表中（与原始代码中仅解析有效修饰符相反），并在无效修饰符上生成适当的*CS0106*语法错误。
- en: Implementing a new semantic error in the C# compiler code base
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C#编译器代码库中实现新的语义错误
- en: This section will enable the Roslyn contributor to make changes to the C# binder/semantic
    analysis phase to add a new semantic diagnostic. Additionally, we will also show
    how to extend an existing semantic diagnostic reported during the local rewriting
    (lowering) phase to cover more cases.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将使Roslyn贡献者能够对C#绑定/语义分析阶段进行更改，以添加新的语义诊断。此外，我们还将展示如何扩展在本地重写（降低）阶段报告的现有语义诊断，以涵盖更多情况。
- en: 'Usage of implicitly typed declarations with the `var` keyword is a very subjective
    matter. The C# compiler only reports non-subjective semantic errors on implicitly
    typed declarations where the type cannot be inferred or is invalid. However, there
    are certain cases where the type of the initializer is valid and can be inferred,
    but not at all apparent due to conversions in the initializer expression. For
    example, consider the expressions `var x = 1 + 1.0, var y = "string" + 1`. The
    initializers for *x* and *y* contain implicit conversions on the left/right sides
    of the binary expression, which may also involve user defined implicit operator
    conversions, hence, the inferred type of the variables is not apparent. We will
    extend the C# binder to report a new warning **CS0823** for such cases: `Warning
    CS0823: Use an explicit type for declaration as the initializer type ''{0}'' is
    not apparent due to conversions`.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`var`关键字进行隐式类型声明的使用是一个非常主观的问题。C#编译器仅在无法推断类型或类型无效的隐式类型声明上报告非主观语义错误。然而，在某些情况下，初始化器的类型是有效的并且可以推断，但由于初始化器表达式的转换而不太明显。例如，考虑以下表达式`var
    x = 1 + 1.0, var y = "string" + 1`。*x*和*y*的初始化器包含二元表达式的左右两侧的隐式转换，这还可能涉及用户定义的隐式运算符转换，因此，变量的推断类型并不明显。我们将扩展C#绑定以报告针对此类情况的新警告**CS0823**：`警告
    CS0823：使用显式类型进行声明，因为初始化器类型'{0}'由于转换而不明显`。
- en: Additionally, in this recipe we will extend *CS1717* (Assignment made to same
    variable; did you mean to assign something else?) ([https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717))
    to be reported on self-assigning property access. Currently, it only covers self-assigning
    field, local, parameter, and event access.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在本配方中，我们将扩展*CS1717*（对同一变量进行赋值；您是想分配其他内容？）([https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717](https://docs.microsoft.com/en-us/dotnet/csharp/misc/cs1717))以报告在自赋值属性访问上的错误。目前，它仅涵盖自赋值字段、局部变量、参数和事件访问。
- en: 'With both the preceding changes, we will see the following new warnings for
    the code here:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个更改之后，我们将看到以下新的警告：
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Getting Started
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You need to ensure that you have installed *Git* tools, VS2017 with .NET development,
    and VS Extensiblity workloads, and have enlisted and built Roslyn sources with
    the VS2017 tag. For reference, see the recipe *Setting up Roslyn enlistment* at
    the start of this chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保已安装*Git*工具、VS2017以及.NET开发，并且已安装VS扩展性工作负载，并使用VS2017标签登记和构建Roslyn源代码。有关参考，请参阅本章开头处的配方*设置Roslyn登记*。
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open `Roslyn.sln` at the root of the Roslyn repo in VS2017.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS2017 中打开 Roslyn 仓库根目录下的`Roslyn.sln`。
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Errors\ErrorCode.cs`
    and add the following new Warning ID at line 566: `WRN_ImplicitlyTypedVariableNotRecommended
    = 823,`'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开源文件`<%ROOT%>\src\Compilers\CSharp\Portable\Errors\ErrorCode.cs`，在行566处添加以下新的警告
    ID：`WRN_ImplicitlyTypedVariableNotRecommended = 823,`
- en: 'Open the resx file `<q><%ROOT%>\src\Compilers\CSharp\Portable\CSharpResources.resx</q>`
    and add the following new resource strings for warning messages:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 resx 文件`<q><%ROOT%>\src\Compilers\CSharp\Portable\CSharpResources.resx</q>`，为警告消息添加以下新的资源字符串：
- en: '[PRE7]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Errors\ErrorFacts.cs`
    and add a new switch case in the method `GetWarningLevel` at line 320: `ErrorCode.WRN_ImplicitlyTypedVariableNotRecommended:`'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开开源文件`<%ROOT%>\src\Compilers\CSharp\Portable\Errors\ErrorFacts.cs`，在方法`GetWarningLevel`的第320行添加一个新的
    switch case：`ErrorCode.WRN_ImplicitlyTypedVariableNotRecommended:`
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs`
    and add the following if statement in method `BindInferredVariableInitializer`
    at line 702:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开源文件`<%ROOT%>\src\Compilers\CSharp\Portable\Binder\Binder_Statements.cs`，在方法`BindInferredVariableInitializer`的第702行添加以下
    if 语句：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Open source file `<%ROOT%>\src\Compilers\CSharp\Portable\Lowering\DiagnosticsPass_Warnings.cs`
    and add the following switch section in method `IsSameLocalOrField` at line 204:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开源文件`<%ROOT%>\src\Compilers\CSharp\Portable\Lowering\DiagnosticsPass_Warnings.cs`，在方法`IsSameLocalOrField`的第204行添加以下
    switch section：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Build the solution.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建解决方案。
- en: Set `VisualStudio\VisualStudioSetup.Next.csproj` as the startup project and
    click on *Ctrl* + *F5* to start a new VS instance with the locally built compiler
    and IDE toolset.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`VisualStudio\VisualStudioSetup.Next.csproj`设置为启动项目，然后按*Ctrl* + *F5*启动一个新的
    VS 实例，使用本地构建的编译器和 IDE 工具集。
- en: 'Create a new C# class library project, say `ClassLibrary`, and add the following
    code:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 C# 类库项目，例如`ClassLibrary`，并添加以下代码：
- en: '[PRE10]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Verify the new warnings *CS0823* and *CS1717* show up in the error list and
    squiggles appear in the editor:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证新的警告*CS0823*和*CS1717*出现在错误列表中，并在编辑器中出现波浪线：
- en: '![](img/35dfbc71-878b-48b1-aae6-38ac3ec9356e.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/35dfbc71-878b-48b1-aae6-38ac3ec9356e.png)'
- en: Build the project and verify that the build output also has the new diagnostics.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建项目并验证构建输出也包含新的诊断信息。
- en: You can view all the source changes made in this recipe for *CS0823* at [https://github.com/mavasani/roslyn/commit/a155824a41150414966c6f03493b0bb05a45a59e](https://github.com/mavasani/roslyn/commit/a155824a41150414966c6f03493b0bb05a45a59e)
    and for *CS1717* at [https://github.com/mavasani/roslyn/commit/9f33d6809202d9b2b7ef5e0fa79df0b56ea46110](https://github.com/mavasani/roslyn/commit/9f33d6809202d9b2b7ef5e0fa79df0b56ea46110)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/mavasani/roslyn/commit/a155824a41150414966c6f03493b0bb05a45a59e](https://github.com/mavasani/roslyn/commit/a155824a41150414966c6f03493b0bb05a45a59e)查看为*CS0823*所做的所有源代码更改，以及[https://github.com/mavasani/roslyn/commit/9f33d6809202d9b2b7ef5e0fa79df0b56ea46110](https://github.com/mavasani/roslyn/commit/9f33d6809202d9b2b7ef5e0fa79df0b56ea46110)为*CS1717*所做的更改。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Semantic analysis, also context sensitive analysis, is a process in compiler
    construction, usually after parsing, to gather necessary semantic information
    from the source code.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 语义分析，也称为上下文相关分析，是编译器构建过程中的一个步骤，通常在解析之后，从源代码中收集必要的语义信息。
- en: C# binder is the second phase of the compiler tool chain that operates on syntax
    trees, nodes, tokens, and trivia that comes out from the parser and analyzes the
    semantics of the code according to the C# language specification. This phase produces
    **BoundTrees** and reports semantic diagnostics. A bound tree is essentially an
    abstract syntax tree with rich semantic information associated with each node
    in the tree. All the semantic information provided by the **SemanticModel** APIs
    at the CodeAnalysis layer is from the bound nodes associated with the syntax.
    The primary entry points for binding statements and expressions are [Binder.BindStatement](http://source.roslyn.io/#q=Binder.BindStatement)
    and [Binder.BindExpression](http://source.roslyn.io/#q=Binder.BindExpression),
    respectively.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: C# 绑定器是编译器工具链的第二阶段，它操作于由解析器输出的语法树、节点、标记和 trivia，并根据 C# 语言规范分析代码的语义。此阶段生成**绑定树**并报告语义诊断。绑定树本质上是一个具有与树中每个节点相关联的丰富语义信息的抽象语法树。在
    CodeAnalysis 层提供的所有语义信息都来自与语法相关的绑定节点。绑定语句和表达式的入口点分别是[Binder.BindStatement](http://source.roslyn.io/#q=Binder.BindStatement)和[Binder.BindExpression](http://source.roslyn.io/#q=Binder.BindExpression)。
- en: Use [http://source.roslyn.io/](http://source.roslyn.io/) for rich semantic search
    and navigation of Roslyn source code. Note that the version of source code indexed
    at this website corresponds to the latest sources in the *master* branch of the
    Roslyn repo, and may differ from the sources for the *Visual-Studio-2017* tag.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[http://source.roslyn.io/](http://source.roslyn.io/)进行Roslyn源代码的丰富语义搜索和导航。请注意，该网站上索引的源代码版本对应于Roslyn仓库的*master*分支的最新源代码，可能与*Visual-Studio-2017*标签的源代码不同。
- en: 'In this recipe, we showed you how to make the following changes in the binder
    to add a new diagnostic *CS0823*:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们向您展示了如何在绑定器中做出以下更改以添加新的诊断*CS0823*：
- en: Add a new error code to the `ErrorCode` enum.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的错误代码添加到`ErrorCode`枚举中。
- en: Add new resource strings for the compiler diagnostic message.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为编译器的诊断消息添加新的资源字符串。
- en: Add a new semantic diagnostic to the method to bind the implicit variable initializer
    when the initializer is a binary expression involving non-apparent implicit conversions.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当初始化器是一个涉及非明显隐式转换的二进制表达式时，向方法添加一个新的语义诊断以绑定隐式变量初始化器。
- en: C# local rewriter or lowering is the third phase of the compiler tool chain
    that simplifies the bound trees into very simple bound nodes. Additionally, it
    also performs flow analysis and reports flow analysis diagnostics (such as unreachable
    code). Then output of the local rewriter is fed to the code generator that generates
    MSIL for the simplified bound tree.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: C#本地重写或降低是编译器工具链的第三阶段，它将绑定树简化为非常简单的绑定节点。此外，它还执行流分析并报告流分析诊断（如不可达代码）。然后本地重写器的输出被馈送到代码生成器，该生成器为简化的绑定树生成MSIL。
- en: In this recipe, we extended the existing local rewriting diagnostic pass to
    report *CS1717* for self-assigning property access expressions.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将现有的本地重写诊断传递扩展到报告自我赋值属性访问表达式的*CS1717*。
- en: Writing unit tests for a new error in the C# compiler code base
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在C#编译器代码库中为新错误编写单元测试
- en: 'This section will enable you to add unit tests to the C# compiler. This has
    the following set of unit test projects in Roslyn.sln:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将使您能够向C#编译器添加单元测试。Roslyn.sln中有以下一系列单元测试项目：
- en: '`CSharpCompilerSyntaxTest`: Unit tests for parsing and syntax errors'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSharpCompilerSyntaxTest`：解析和语法错误的单元测试'
- en: '`CSharpCompilerSemanticTest`: Unit tests for semantic errors and semantic model
    APIs'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSharpCompilerSemanticTest`：语义错误和语义模型API的单元测试'
- en: '`CSharpCompilerSymbolTest`: Unit tests for symbols defined in the compiler
    layer'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSharpCompilerSymbolTest`：编译器层定义的符号的单元测试'
- en: '`CSharpCommandLineTest`: Unit tests for the compiler''s command-line options'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSharpCommandLineTest`：编译器的命令行选项的单元测试'
- en: '`CSharpCompilerEmitTest`: Unit tests for the code generation phase that verify
    the generated MSIL'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CSharpCompilerEmitTest`：代码生成阶段的单元测试，用于验证生成的MSIL'
- en: In this section, we will add unit tests to `CSharpCompilerSemanticTest` for
    a newly added semantic error.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为新增的语义错误向`CSharpCompilerSemanticTest`添加单元测试。
- en: Getting Started
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: 'You need to ensure that you have executed the previous recipe in this chapter,
    *Implementing a new semantic error in the C# compiler code base,* to add a new
    semantic diagnostic to the C# compiler: `Warning CS0823: Use an explicit type
    for declaration as the initializer type ''{0}'' is not apparent due to conversions`.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要确保已执行本章中此前的配方，*在C#编译器代码库中实现新的语义错误*，以向C#编译器添加新的语义诊断：`警告 CS0823：由于初始化器类型 '{0}'
    由于转换而不明显，请使用显式类型进行声明`。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Open `Roslyn.sln` at the root of the Roslyn repo in VS2017.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VS2017中打开Roslyn仓库根目录下的`Roslyn.sln`。
- en: Open source file `<%ROOT%>\src\Compilers\CSharp\Test\Semantic\Semantics\ImplicitlyTypedLocalsTests.cs`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开源文件`<%ROOT%>\src\Compilers\CSharp\Test\Semantic\Semantics\ImplicitlyTypedLocalsTests.cs`。
- en: 'Add the following new unit test to the source file:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下新的单元测试添加到源文件中：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Build the test project and execute the unit test on a command-line console
    using the command line copied from the project''s `Debug` property page, appending
    `-method` switch for the newly added unit test:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建测试项目，并在命令行控制台中使用从项目的`Debug`属性页复制的命令行执行单元测试，为新增的单元测试添加`-method`开关：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Verify the unit test fails with the missing *CS0823* diagnostic:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证单元测试因缺少*CS0823*诊断而失败：
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add the missing diagnostic as an argument to the `VerifyDiagnostics` invocation
    in our unit test:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将缺失的诊断作为参数添加到我们的单元测试中的`VerifyDiagnostics`调用：
- en: '![](img/bee7e297-96e7-4734-bb36-8237213514ec.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bee7e297-96e7-4734-bb36-8237213514ec.png)'
- en: Re-execute the unit test by repeating step 4 and verify that the test passes
    now.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过重复步骤4重新执行单元测试，并验证测试现在是否通过。
- en: 'If you get a `DirectoryNotFoundException`, ensure that the test results directory
    exists on the machine: `<%ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\xUnitResults`.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到 `DirectoryNotFoundException`，请确保测试结果目录存在于机器上：`<%ROOT%>\Binaries\Debug\UnitTests\CSharpCompilerSemanticTest\xUnitResults`。
- en: 'Add another unit test to verify that the diagnostic does not fire for a case
    where the initializer binary expression has no implicit conversions:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个单元测试以验证诊断不会在初始化二进制表达式没有隐式转换的情况下触发：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Execute the new unit test and verify that it passes.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行新的单元测试并验证它是否通过。
- en: You can also execute the unit tests inside Visual Studio using the Test Explorer
    window, but the test discovery for `Roslyn.sln` is quite slow due to thousands
    of unit tests across the solution. Hence, you might have to wait for a few minutes
    before you can execute the first unit test.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用测试资源管理器窗口在 Visual Studio 中执行单元测试，但由于整个解决方案中有数千个单元测试，因此对 `Roslyn.sln` 的测试发现相当慢。因此，您可能需要等待几分钟才能执行第一个单元测试。
- en: Using Roslyn Syntax Visualizer to view Roslyn syntax tokens and nodes for a
    source file
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Roslyn 语法可视化器查看源文件的 Roslyn 语法标记和节点
- en: The Syntax Visualizer is a Visual Studio extension that facilitates the inspection
    and exploration of Roslyn syntax trees and can be used as a debugging aid when
    you develop your own applications atop the .NET Compiler Platform (Roslyn) APIs.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 语法可视化器是一个 Visual Studio 扩展，它简化了对 Roslyn 语法树的检查和探索，并在您使用 .NET 编译器平台 (Roslyn)
    API 开发自己的应用程序时可以作为调试辅助工具使用。
- en: In this section, we will show you how to install and use the Roslyn Syntax Visualizer
    to view the syntax tree, nodes, and properties of C# and Visual Basic source code
    in Visual Studio. You can also view the semantics associated with the syntax nodes,
    such as symbol information, type information, and compile time constant value
    of expressions.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何安装和使用 Roslyn 语法可视化器来查看 Visual Studio 中 C# 和 Visual Basic 源代码的语法树、节点和属性。您还可以查看与语法节点关联的语义，例如符号信息、类型信息和表达式的编译时常量值。
- en: Getting Started
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You need to install the `.NET Compiler Platform SDK` to install the Roslyn Syntax
    Visualizer. For guidance on installing the SDK, refer to the recipe, *Creating,
    debugging, and executing an analyzer project in Visual Studio*, in [Chapter 1](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml),
    *Writing Diagnostic Analyzers.*
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装 `.NET Compiler Platform SDK` 来安装 Roslyn 语法可视化器。有关安装 SDK 的说明，请参阅[第 1 章](9928750a-c427-42e6-b8a2-cf67eb5465af.xhtml)中的配方，“在
    Visual Studio 中创建、调试和执行分析器项目”，*编写诊断分析器*。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio and start the Roslyn Syntax Visualizer with the command View
    | Other Windows | Syntax Visualizer and dock it to the left side of the Visual
    Studio window.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio，使用命令“查看 | 其他窗口 | 语法可视化器”启动 Roslyn 语法可视化器，并将其停靠在 Visual Studio
    窗口的左侧。
- en: 'Create a new C# class library project, say `ClassLibrary`*,* and add the following
    method to `Class1.cs`:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 C# 类库项目，例如 `ClassLibrary`，并将以下方法添加到 `Class1.cs` 中：
- en: '[PRE15]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Select the code for the invocation `Console.WriteLine("Hello world!")` and
    view the Syntax Visualizer hierarchical tree view: `CompilationUnit` containing
    a `NamespaceDeclaration`, which contains a `ClassDeclaration`, which contains
    a `MethodDeclaration` with a `Block` whose first statement is an `ExpressionStatement`
    with an `InvocationExpression`:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择调用 `Console.WriteLine("Hello world!")` 的代码，并查看语法可视化器的层次树视图：`CompilationUnit`
    包含一个 `NamespaceDeclaration`，它包含一个 `ClassDeclaration`，它包含一个具有 `Block` 的 `MethodDeclaration`，其第一个语句是一个
    `ExpressionStatement`，该语句包含一个 `InvocationExpression`：
- en: '![](img/19dcd0d3-2887-4c1d-8792-dc9e435c813a.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/19dcd0d3-2887-4c1d-8792-dc9e435c813a.png)'
- en: Right-click on the InvocationExpression node in SyntaxTree pane of the Syntax
    Visualizer and click on View Symbol (if any) command.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在语法可视化器的 SyntaxTree 面板中右键单击 InvocationExpression 节点，然后单击“查看符号（如果有）”命令。
- en: '![](img/ddc2f5ea-28bd-4a91-8c5c-80ee77cd397c.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ddc2f5ea-28bd-4a91-8c5c-80ee77cd397c.png)'
- en: You can view the `Properties` of the PE metadata symbol `System.Console.WriteLine`
    that is bound to the invocation.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以查看绑定到调用的 PE 元数据符号 `System.Console.WriteLine` 的 `Properties`。
- en: '![](img/9468dced-3cca-420f-b500-6e576a9057d2.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9468dced-3cca-420f-b500-6e576a9057d2.png)'
- en: 'Add a new VB class library project to the solution, say `ClassLibrary1`, and
    add the following method to the existing class:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的 VB 类库项目添加到解决方案中，例如 `ClassLibrary1`，并将以下方法添加到现有类中：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Select the invocation expression `Console.Write("Hello World!")` in the editor
    and you can view the Syntax tree, nodes, and properties of the VB code in the
    Syntax Visualizer:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中选择调用表达式 `Console.Write("Hello World!")`，你可以在 Syntax Visualizer 中查看 VB 代码的语法树、节点和属性：
- en: '![](img/7ace532c-cde2-49ae-abdc-3a11eba9f7d8.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ace532c-cde2-49ae-abdc-3a11eba9f7d8.png)'
- en: You can read a more detailed overview of the Syntax Visualizer tool at [https://github.com/dotnet/roslyn/wiki/Syntax%20Visualizer](https://github.com/dotnet/roslyn/wiki/Syntax%20Visualizer).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 [https://github.com/dotnet/roslyn/wiki/Syntax%20Visualizer](https://github.com/dotnet/roslyn/wiki/Syntax%20Visualizer)
    阅读关于 Syntax Visualizer 工具的更详细概述。
- en: Sending a Roslyn pull request to contribute to next version of C# compiler and
    VS IDE
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 Roslyn 提交拉取请求以贡献下一个版本的 C# 编译器和 VS IDE
- en: In this section, we will walk you through the steps to follow to send a pull
    request to contribute to the next version of the Roslyn compilers and Visual Studio
    IDE.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将指导你完成发送拉取请求以贡献 Roslyn 编译器和 Visual Studio IDE 下一个版本的步骤。
- en: Getting Started
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You need to ensure that you have installed Git tools, VS2017 with .NET development
    and VS Extensiblity workloads and have enlisted and built Roslyn sources. For
    reference, see the recipe, *Setting up Roslyn enlistment*, at the start of this
    chapter.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要确保你已经安装了 Git 工具，VS2017 带有 .NET 开发和 VS 扩展工作负载，并且已经注册并构建了 Roslyn 源代码。有关参考，请参阅本章开头的配方，*设置
    Roslyn 注册*。
- en: How to do it...
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: It is recommended that you create a Roslyn issue at [https://github.com/dotnet/roslyn/issues](https://github.com/dotnet/roslyn/issues)
    for your planned work and also discuss it with Roslyn team members prior to coding
    to avoid any unnecessary or redundant work.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 建议你在 [https://github.com/dotnet/roslyn/issues](https://github.com/dotnet/roslyn/issues)
    上为你的计划工作创建一个 Roslyn 问题，并在编码之前与 Roslyn 团队成员讨论，以避免任何不必要的或重复的工作。
- en: Make the source changes that you would like to contribute to the Roslyn code
    base in your local enlistment. For example, execute the recipe, *Implementing
    a new semantic error in the C# compiler code base,* covered earlier in this chapter.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的本地注册中做出你想要贡献给 Roslyn 代码库的源代码更改。例如，执行本章前面提到的配方，*在 C# 编译器代码库中实现新的语义错误*。
- en: Add sufficient unit tests for your code changes. For example, execute the recipe,
    *Writing unit tests for a new error in C# compiler code base,* covered earlier
    in this chapter.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的代码更改添加足够的单元测试。例如，执行本章前面提到的配方，*为 C# 编译器代码库中的新错误编写单元测试*。
- en: Execute `Test.cmd` at the root of the repo to build and run all the tests to
    confirm that there are no regressions with your changes. For reference, see the
    recipe, *Setting up Roslyn enlistment* at the start of this chapter.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仓库根目录下执行 `Test.cmd` 以构建和运行所有测试，以确认你的更改没有出现回归。有关参考，请参阅本章开头的配方，*设置 Roslyn 注册*。
- en: Create a new git branch, add and commit your changes, and push them to the origin.
    For git help, search at [https://help.github.com/](https://help.github.com/).
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Git 分支，添加并提交你的更改，然后将它们推送到远程仓库。有关 Git 帮助，请搜索 [https://help.github.com/](https://help.github.com/).
- en: Sign the .NET **Contributor License Agreement** (**CLA**) at [http://cla2.dotnetfoundation.org/](http://cla2.dotnetfoundation.org/)
    before sending the pull request.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发送拉取请求之前，请在 [http://cla2.dotnetfoundation.org/](http://cla2.dotnetfoundation.org/)
    上签署 .NET **贡献者许可协议**（**CLA**）。
- en: Follow the steps at [https://help.github.com/articles/creating-a-pull-request/](https://help.github.com/articles/creating-a-pull-request/)
    to start a new pull request with your branch.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下步骤 [https://help.github.com/articles/creating-a-pull-request/](https://help.github.com/articles/creating-a-pull-request/)
    在你的分支上发起一个新的拉取请求。
- en: Fill out the pull request template in the description tab of the pull request.
    You can edit this information even after creating a pull request.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在拉取请求的描述标签中填写拉取请求模板。你可以在创建拉取请求后编辑此信息。
- en: 'After creating a pull request, add a new comment tagging the compiler and/or
    the IDE team to review the changes:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建拉取请求后，添加一条新评论标记编译器或/和 IDE 团队以审查更改：
- en: 'Compiler team: `@dotnet/roslyn-compiler`'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译器团队：`@dotnet/roslyn-compiler`
- en: 'IDE team: `@dotnet/roslyn-ide`'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: IDE 团队：`@dotnet/roslyn-ide`
- en: Make the requested code changes from the reviewers and ensure there are no merge
    conflicts in your branch.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据审阅者的要求进行代码更改，并确保你的分支中没有合并冲突。
- en: After you get at least two approvals and all the tests pass on the pull request,
    you can request your changes to be merged in by the team members.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你至少获得两个批准并且所有测试在拉取请求上通过后，你可以请求团队成员合并你的更改。
- en: You can read the Contributing Code guidelines for the Roslyn repo at [https://github.com/dotnet/roslyn/wiki/Contributing-Code](https://github.com/dotnet/roslyn/wiki/Contributing-Code)
    for further details.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/dotnet/roslyn/wiki/Contributing-Code](https://github.com/dotnet/roslyn/wiki/Contributing-Code)阅读关于Roslyn仓库贡献代码的指南以获取更多详细信息。
