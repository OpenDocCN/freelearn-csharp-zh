["```cs\n    class Program \n   { \n      static void Main(string[] args) \n      { \n         Console.WriteLine(\"Hello World!\"); \n      } \n   }  \n```", "```cs\n    using Microsoft.AspNetCore.Builder; \n    using Microsoft.AspNetCore.Hosting; \n    using Microsoft.AspNetCore.Http; \n\n    namespace WebApplication1 \n    { \n      public class Startup \n      { \n        public void Configure(IApplicationBuilder app, \n            IHostingEnvironment env) \n        { \n          if (env.IsDevelopment()) \n          { \n            app.UseDeveloperExceptionPage(); \n          } \n          app.Run(async (context) => \n          { \n            await context.Response.WriteAsync(\"This is a first\n                  web app...\"); \n          }); \n        } \n      } \n    } \n```", "```cs\n    using Microsoft.AspNetCore; \n    using Microsoft.AspNetCore.Hosting; \n\n    namespace WebApplication1 \n    { \n      public class Program \n      { \n        public static void Main(string[] args) \n        { \n            BuildWebHost(args).Run(); \n        } \n\n        public static IWebHost BuildWebHost(string[] args) => \n            WebHost.CreateDefaultBuilder(args) \n                .UseStartup<Startup>() \n                .Build(); \n      } \n    } \n```", "```cs\n    { \n      \"iisSettings\": { \n        \"windowsAuthentication\": false, \n        \"anonymousAuthentication\": true, \n        \"iisExpress\": { \n          \"applicationUrl\": \"http://localhost:57539/\", \n          \"sslPort\": 0 \n        } \n      }, \n      \"profiles\": { \n        \"IIS Express\": { \n          \"commandName\": \"IISExpress\", \n          \"launchBrowser\": true, \n          \"environmentVariables\": { \n            \"ASPNETCORE_ENVIRONMENT\": \"Development\" \n          } \n        }, \n        \"ASPNETCoreDemo1\": { \n          \"commandName\": \"Project\", \n          \"launchBrowser\": true, \n          \"environmentVariables\": { \n           \"ASPNETCORE_ENVIRONMENT\": \"Development\" \n          }, \n          \"applicationUrl\": \"http://localhost:57540\" \n        } \n      } \n```", "```cs\n     <Project Sdk=\"Microsoft.NET.Sdk.Web\"> \n     <PropertyGroup> \n      <TargetFramework>netcoreapp1.1</TargetFramework> \n     </PropertyGroup> \n\n     <ItemGroup> \n      <Folder Include=\"wwwroot\\\" /> \n    </ItemGroup> \n    <ItemGroup> \n      <PackageReference Include= \"Microsoft.ApplicationInsights.AspNetCore\" \n           Version=\"2.0.0\" /> \n      <PackageReference Include=\"Microsoft.AspNetCore\" Version=\"1.1.1\" /> \n    </ItemGroup> \n    </Project> \n```", "```cs\n    public static void Main(string[] args)\n    {\n      var host = new WebHostBuilder()\n      .UseKestrel()\n      .UseContentRoot(Directory.GetCurrentDirectory())\n      .UseIISIntegration()\n      .UseStartup<Startup>()\n      .UseApplicationInsights()\n      .Build();\n      host.Run();\n    }\n```", "```cs\n    // This method gets called by the runtime. Use this method to //\n    // configure the HTTP request pipeline. \n    public void Configure(IApplicationBuilder app, \n       IHostingEnvironment env, ILoggerFactory loggerFactory) \n    { \n      loggerFactory.AddConsole(); \n\n      if (env.IsDevelopment()) \n      { \n        app.UseDeveloperExceptionPage(); \n      } \n\n      app.Run(async (context) => \n      { \n        await context.Response.WriteAsync(\"Hello World!\"); \n      }); \n    } \n```", "```cs\n    app.Run(async (context) => \n    { \n       if (env.IsEnvironment(\"Packt\")) \n       { \n        await context.Response.WriteAsync(\"We're in PACKT \n             development mode!\"); \n       } \n       else await context.Response.WriteAsync(\"Hello World!\"); \n    }); \n```", "```cs\n    public class Startup \n    { \n      public Startup(IHostingEnvironment env) \n      { \n        var builder = new ConfigurationBuilder() \n            .SetBasePath(env.ContentRootPath) \n            .AddJsonFile(\"appsettings.json\", optional: false,  \n                         reloadOnChange: true) \n          .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\",  \n                         optional: true) \n            .AddEnvironmentVariables(); \n        Configuration = builder.Build(); \n      }   \n\n      public IConfigurationRoot Configuration { get; } \n\n      // This method gets called by the runtime. Use this method to  \n      // add services to the container. \n      public void ConfigureServices(IServiceCollection services) \n      { \n        // Add framework services. \n        services.AddMvc(); \n      } \n```", "```cs\n    // This method gets called by the runtime. Use this method to  \n    // configure  the HTTP request pipeline. \n    public void Configure(IApplicationBuilder app,  \n        IHostingEnvironment env, ILoggerFactory loggerFactory) \n    { \n        loggerFactory.AddConsole(Configuration.GetSection(\"Logging\")); \n        loggerFactory.AddDebug(); \n\n        if (env.IsDevelopment()) \n        { \n            app.UseDeveloperExceptionPage(); \n            app.UseBrowserLink(); \n        } \n        else \n        { \n            app.UseExceptionHandler(\"/Home/Error\"); \n        } \n\n        app.UseStaticFiles(); \n\n        app.UseMvc(routes => \n        { \n            routes.MapRoute( name: \"default\", \n                template:{controller=Home}/{action=Index}/{id?}\"); \n        }); \n     } \n```", "```cs\n    public static IServiceCollection _services { get; private set; } \n    public void ConfigureServices(IServiceCollection services) \n    { \n      // Add framework services. \n      services.AddMvc(); \n      _services = services; \n   } \n```", "```cs\n    public IActionResult ServicesAvailable() \n    { \n      ViewData[\"Services\"] = Startup._services; \n      return View(); \n    } \n```", "```cs\n    @using Microsoft.Extensions.DependencyInjection; \n    @{ \n      ViewData[\"Title\"] = \"Services Available\"; \n      var _services = @ViewData[\"Services\"]; \n    } \n    <h2>@ViewData[\"Title\"]</h2> \n    <h1>All Services</h1> \n```", "```cs\n    <table class=\"table table-bordered\"> \n    <thead> \n        <tr> \n            <th>Type</th> \n            <th>Lifetime</th> \n            <th>Instance</th> \n        </tr> \n    </thead> \n    <tbody> \n     @foreach (var svc in _services as IServiceCollection) \n     { \n       <tr> \n       <td>@svc.ServiceType.Name</td>           \n        <td>@svc.Lifetime</td>            \n        <td>@svc.ImplementationType?.Name</td> \n        </tr> \n     } \n    </tbody> \n    </table> \n```", "```cs\n    publicvoidConfigureServices(IServiceCollectionservices)\n {     // Add framework services\n     services.AddMvc();\n     // container will create the instance(s) of these types\n     // and will dispose themservices\n     AddScoped<Service1>();\n     // Here, the container did not create instance (we do it)\n     // so it will NOT dispose itservices\n     AddSingleton(newService2());\n }\n```", "```cs\n    publicvoidConfigureServices(IServiceCollectionservices)\n {    // Add framework services.\n    services.AddMvc();\n    // container will create the instance(s) of these types\n    // and will dispose them\n    services.AddScoped<ProgrammerSentenceSvc>();\n    // Here, the container did not create instance (we do it)\n    // so it will NOT dispose it\n    services.AddSingleton(newEngineerSentenceSvc());\n }\n```", "```cs\n    publicIActionResultSentences(ProgrammerSentenceSvcsvc,\n        EngineerSentenceSvcsvc2\n     {\n      Randomrnd = newRandom();ViewData[\"ProgSentence\"] = \n          svc.programmersSentences[rnd.Next(1,5)];\n      ViewData[\"EngSentence\"] = svc2.engineersSentences[rnd.Next(1,5)];\n      returnView();\n     }\n```", "```cs\n    @{ViewData[\"Title\"] = \"Random sentences about programmers\n       and engineers\";\n    }\n     <h1>@ViewData[\"Title\"].</h1>\n     < hr />\n     < h1 > Programmer's Sentence </ h1 >\n     <h2>@ViewData[\"ProgSentence\"]</h2>\n     < h1 > Engineers' Sentence </ h1 >\n     <h2>@ViewData[\"EngSentence\"]</h2>\n```", "```cs\n    namespaceASPNETCoreDisposeDemo.Helpers{\n      publicclassDateTimeHelpers\n      {\n        publicDateTimeHelpers()\n        {\n          LocalTime = DateTime.Now.TimeOfDay.ToString();\n        }\n          publicstringLocalTime { get; privateset; }\n      }\n    }\n```", "```cs\n    publicvoidConfigureServices(IServiceCollectionservices)\n    {\n      // Add framework services.\n      services.AddMvc();\n      // container will create the instance(s) of these types\n      // and will dispose them\n      services.AddScoped<ProgrammerSentenceSvc>();\n      // Here, the container did not create instance (we do it)\n      // so it will NOT dispose it\n      services.AddSingleton(newEngineerSentenceSvc());\n      services.AddTransient<DateTimeHelpers>();\n    }\n```", "```cs\n    [Route(\"SentencesDI\")]publicIActionResultSentencesDI()\n    {\n       returnView();\n    }\n```", "```cs\n    @usingASPNETCoreDisposeDemo.Helpers\n    @usingASPNETCoreDisposeDemo.Services\n    @inject DateTimeHelpersTimeHelpers\n    @inject ProgrammerSentenceSvcPSentences\n    @inject EngineerSentenceSvcESentences\n    @{\n      Randomrnd = newRandom();\n       ViewData[\"Title\"] = \"Random sentences obtained via\n            Dependency Injection\";\n     }\n     <h1>@ViewData[\"Title\"]</h1>\n     <h3>Local Time: @TimeHelpers.LocalTime</h3>\n     < hr />\n     < h2 > Programmer's Sentences (DI) </ h2 >\n     <h3>@PSentences.programmersSentences[rnd.Next(1,5)]</h3>\n     < h2 > Engineers' Sentences (DI) </ h2 >\n     <h3>@ESentences.engineersSentences[rnd.Next(1,5)]</h3>\n```", "```cs\n    @inject [Type] [Name/Alias]  \n```"]