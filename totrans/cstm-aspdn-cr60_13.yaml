- en: '*Chapter 13*: Managing Inputs with Custom ModelBinder'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter regarding `OutputFormatter`, we learned about sending data
    out to clients in different formats. In this chapter, we are going to do it the
    other way. This chapter is about data you get in your web API from outside; for
    instance, what to do if you get data in a special format, or if you get data you
    need to validate in a special way. **Model Binders** will help you to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing `ModelBinder`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preparing the test project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating `PersonsCsvBinder`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `ModelBinder`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing `ModelBinder`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The topics in this chapter refer to the WebAPI layer of the ASP.NET Core architecture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – ASP.NET Core architecture'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.1_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – ASP.NET Core architecture
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal, and change to
    your working directory. Use the following command to create a new MVC application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or, in VS Code, by typing the following command in the already open console:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the code samples in this chapter can be found in the GitHub repository
    for this book at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter13).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing ModelBinder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Model Binders are responsible for binding the incoming data to specific action
    method parameters. They bind the data sent with the request to the parameters.
    The default binders are able to bind data that is sent via the `QueryString`,
    or sent within the request body. Within the body, the data can be sent in URL
    or JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: The model binding tries to find the values in the request by parameter names.
    The form values, route data, and query string values are stored as a key-value
    pair collection and the binding tries to find the parameter name in the keys of
    the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Let's demonstrate how this works with a test project.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the test data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we're going to see how to send CSV data to a web API method.
    We will reuse the CSV data we created in [*Chapter 12*](B17996_12_ePub.xhtml#_idTextAnchor172),
    *Content Negotiation Using a Custom OutputFormatter*.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a snippet of the test data we want to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can find the full CSV test data on GitHub at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter13/testdata.csv](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter13/testdata.csv).'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the test project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s prepare the project by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the already created project (refer to the *Technical requirements* section),
    we will now create a new empty API controller with a small action inside:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This looks basically like any other action. It accepts a list of persons and
    returns an anonymous object that contains the number of persons as well as the
    list of persons. This action is pretty useless but helps us to debug `ModelBinder`
    using Postman.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need the `Person` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will actually work fine if we want to send JSON-based data to that action.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'As a last preparation step, we need to add the `CsvHelper` NuGet package to
    parse the CSV data more easily. The .NET CLI is also useful here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that this is all set up, we can try it out and create `PersonsCsvBinder`
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating PersonsCsvBinder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's build a binder.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create `ModelBinder`, add a new class called `PersonsCsvBinder`, which implements
    `IModelBinder`. In the `BindModelAsync` method, we get `ModelBindingContext` with
    all the information in it that we need in order to get the data and deserialize
    it. The following code snippets show a generic binder that should work with any
    list of models. We have split it into sections so that you can clearly see how
    each part of the binder works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see from the preceding code block, first, the context is checked
    against null. After that, we set a default argument name to the model, if none
    have already been specified. If this is done, we are able to fetch the value by
    the name we set previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next part, if there''s no value, we shouldn''t throw an exception in
    this case. The reason is that the next configured `ModelBinder` might be responsible.
    If we throw an exception, the execution of the current request is canceled and
    the next configured `ModelBinder` doesn''t have the opportunity to be executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'If we have the value, we can instantiate a new `StringReader` that needs to
    be passed to `CsvReader`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'With `CsvReader`, we can deserialize the CSV string value into a list of `Persons`.
    If we have the list, we need to create a new, successful `ModelBindingResult`
    that needs to be assigned to the `Result` property of `ModelBindingContext`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You might need to add the following `using` statements at the beginning of
    the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Next, we'll put `ModelBinder` to work.
  prefs: []
  type: TYPE_NORMAL
- en: Using ModelBinder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The binder isn't used automatically because it isn't registered in the dependency
    injection container and is not configured to be used within the MVC framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'The easiest way to use this model binder is to use `ModelBinderAttribute` on
    the argument of the action where the model should be bound:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, the type of our `PersonsCsvBinder` is set as `binderType` to that attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`ModelBinderProvider` to add the `ModelBinder` to the list of existing ones.'
  prefs: []
  type: TYPE_NORMAL
- en: I personally prefer the explicit declaration because most custom `ModelBinder`
    will be specific to an action or to a specific type, and it prevents hidden magic
    in the background.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's test out what we've built.
  prefs: []
  type: TYPE_NORMAL
- en: Testing ModelBinder
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test it, we need to create a new request in Postman:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the application by running `dotnet run` in the console or by pressing
    *F5* in Visual Studio or VS Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Postman, we will then set the request type to `https://localhost:5001/api/persons`
    in the address bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The port number might vary on your side.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to add the CSV data to the body of the request. Select `form-data`
    as the body type, add the `persons` key, and paste the following value lines in
    the value field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After pressing **Send**, we get the result, as shown in *Figure 13.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 13.2 – A screenshot of CSV data in Postman'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B17996.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – A screenshot of CSV data in Postman
  prefs: []
  type: TYPE_NORMAL
- en: Now, the clients will be able to send CSV-based data to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a good way to transform the input in a way that the action needs. You
    could also use `ModelBinder` to do some custom validation against the database
    or whatever you need to do before the model gets passed to the action.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see what you can do with `ActionFilter`.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To learn more about `ModelBinder`, you should have a look at the following
    reasonably detailed documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Steve Gordon, *Custom ModelBinding in ASP.NET MVC Core*: https://www.stevejgordon.co.uk/html-encode-string-aspnet-core-model-binding/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Model Binding in ASP.NET Core*: https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Custom Model Binding in ASP.NET Core*: https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
