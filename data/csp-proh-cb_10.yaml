- en: Chapter 10. Choosing and Using a Source Control Strategy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 选择和使用源控制策略
- en: 'Source control is an essential part of every developer''s toolkit. It doesn''t
    matter whether you are a hobbyist or professional programmer; when you get up
    from your desk to go home you better be sure your code is safe. In this chapter,
    we will be looking at choosing and using a source control strategy. Some of the
    topics we will be taking a look at are:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 源控制是每个开发者工具箱的一个基本部分。无论你是业余爱好者还是专业程序员；当你从办公桌起身回家时，你最好确保你的代码是安全的。在本章中，我们将探讨选择和使用源控制策略。我们将查看的一些主题包括：
- en: Setting up Visual Studio account management and determining which source control
    solution is best for you
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Visual Studio账户管理和确定最适合你的源控制解决方案
- en: Setting up Visual Studio GitHub integration, checking in code for the first
    time, and checking in changes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Visual Studio GitHub集成，首次提交代码，并提交更改
- en: Working as a team using GitHub, and handling and resolving conflicts in code
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GitHub进行团队合作，处理和解决代码冲突
- en: Introduction
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: During my career, I have used Visual SourceSafe, SVN, VSTS, Bitbucket, and GitHub.
    It really does not matter how you approach it, the important thing is that you
    keep your source code safe and versioned.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的职业生涯中，我使用过Visual SourceSafe、SVN、VSTS、Bitbucket和GitHub。实际上，你如何操作并不重要，重要的是你要确保你的源代码安全并进行了版本控制。
- en: Setting up Visual Studio account management and determining which source control
    solution is best for you
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Visual Studio账户管理和确定最适合你的源控制解决方案
- en: Visual Studio allows developers to create an account and sign in. This is particularly
    beneficial if you hot desk often or work in multiple locations on different machines
    (think work and home PCs), because Visual Studio will then automatically sync
    your settings between the machines you're signed in to.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio允许开发者创建账户并登录。如果你经常使用热桌或者在不同地点的多台机器上工作（比如工作场所和家用电脑），这尤其有益，因为Visual
    Studio会自动同步你在登录的机器上的设置。
- en: Getting ready
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe will assume that you have just completed installing Visual Studio
    2015 on your machine. It doesn't matter whether you have installed the trial or
    licensed version of Visual Studio 2015.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将假设你已经在你的机器上完成了Visual Studio 2015的安装。无论你是安装了Visual Studio 2015的试用版还是授权版本，这都不重要。
- en: How to do it...
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: After installation completes, open up Visual Studio:![How to do it...](img/B05391_10_27.jpg)
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，打开Visual Studio：![如何操作...](img/B05391_10_27.jpg)
- en: At the top right of Visual Studio, you will see that there is a **Sign in**
    link:![How to do it...](img/B05391_10_28.jpg)
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio的右上角，你会看到一个**登录**链接：![如何操作...](img/B05391_10_28.jpg)
- en: Clicking on the **Sign in** link, you will be allowed to enter your e-mail address
    here. I find it useful to just use my Outlook e-mail address. In my opinion, it
    is one of the best web e-mails available.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**登录**链接，你将被允许在这里输入你的电子邮件地址。我发现使用我的Outlook电子邮件地址很有用。在我看来，这是最好的网络电子邮件之一。
- en: Note
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Please note, I'm not endorsing Outlook for any reason other than I really think
    it is a great product. I also have a Gmail account as well as an iCloud e-mail
    account.
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，我并不是因为任何原因而推荐Outlook，我只是真的认为它是一个非常好的产品。我还有一个Gmail账户以及一个iCloud电子邮件账户。
- en: '![How to do it...](img/B05391_10_29.jpg)'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05391_10_29.jpg)'
- en: After adding your e-mail account, Visual Studio will redirect you to a sign-in
    page:![How to do it...](img/B05391_10_30.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加你的电子邮件账户后，Visual Studio会重定向你到一个登录页面：![如何操作...](img/B05391_10_30.jpg)
- en: Because I already have an Outlook account, Visual Studio simply allows me to
    sign in with it. If you don't have an account, you can create one here:![How to
    do it...](img/B05391_10_31.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我已经有一个Outlook账户，Visual Studio只需我使用它进行登录。如果你没有账户，你可以在这里创建一个：![如何操作...](img/B05391_10_31.jpg)
- en: Visual Studio will now ask you to enter some additional information. One part
    to note is that you can already link your Team Services account here if you have
    one. For now, leave it blank, as this will be dealt with in a later recipe:![How
    to do it...](img/B05391_10_32.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio现在会要求你输入一些额外的信息。需要注意的是，如果你有一个Team Services账户，你可以在这里将其链接。目前，请将其留空，因为这将稍后在另一个食谱中处理：![如何操作...](img/B05391_10_32.jpg)
- en: After your account is created, you can see that you have been signed in by looking
    at the account selected in the right-hand corner of the Visual Studio IDE:![How
    to do it...](img/B05391_10_33.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建账户后，你可以通过查看Visual Studio IDE右上角的所选账户来确认你已经登录：![如何操作...](img/B05391_10_33.jpg)
- en: Clicking on the down arrow next to your account name, you can view your **Account
    settings…**![How to do it...](img/B05391_10_34.jpg)
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您账户名称旁边的向下箭头，您可以看到您的**账户设置…**![如何操作...](img/B05391_10_34.jpg)
- en: This will show you a summary of your account, from where you can further personalize
    your account:![How to do it...](img/B05391_10_35.jpg)
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示您的账户概览，从这里您可以进一步个性化您的账户：![如何操作...](img/B05391_10_35.jpg)
- en: The choice of source control is a topic every developer has a strong opinion
    about. Unfortunately, if you work for a boss, that decision might not even be
    up to you. Many companies have already set up their source control system just
    the way they like it, and you will need to fall in with company procedure. That
    is just the way it is. It is however good to know about the options available
    to you as an indie developer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码控制的选择是每个开发者都有强烈意见的话题。不幸的是，如果您为老板工作，这个决定可能甚至不由您决定。许多公司已经按照他们喜欢的样子设置了源代码控制系统，您将需要遵循公司程序。事情就是这样。然而，了解作为独立开发者可用的选项是很好的。
- en: All good developers should be writing code on their own time too. You are not
    only a developer while you sit at work. We eat, breathe, sleep, and live code.
    It is part of who and what we are. I will say that in order for you to become
    better at your job as a developer, you must play with code on your own time. Start
    a pet project, get some friends together, and decide to write some software together.
    Not only will this make you all better at what you do, but you will learn a lot
    from each other.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所有优秀的开发者都应该在业余时间编写代码。您不仅在工作时是开发者。我们吃饭、呼吸、睡觉、生活都与代码息息相关。这是我们是谁和我们是什么的一部分。我要说的是，为了使您作为开发者的工作做得更好，您必须在业余时间玩代码。开始一个宠物项目，召集一些朋友，决定一起编写一些软件。这不仅会使你们在所做的事情上变得更好，而且你们会互相学到很多。
- en: If you are a remote developer that does not commute to, and work in, an office
    every day, you can still connect with the developer community. There are so many
    resources available to developers, and the developer community is more than happy
    to rally around newbies and help them grow. Starting a solo or pet project is
    useless if you don't commit (pun intended) to keeping your code safe. To do this,
    you don't have to pay a single dollar either. Visual Studio Online (now called
    Team Services) and GitHub both provide developers with a fantastic platform to
    keep your code safe.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您是一名远程开发者，每天都不通勤到办公室工作，您仍然可以与开发者社区保持联系。为开发者提供了如此多的资源，开发者社区也乐于帮助新手并帮助他们成长。如果您不承诺（字面意思）保持您的代码安全，那么开始一个个人或宠物项目是没有用的。为此，您甚至不需要支付一分钱。Visual
    Studio Online（现在称为团队服务）和GitHub都为开发者提供了一个绝佳的平台来保护您的代码。
- en: Let us start by looking at Team Services. The site can be found by pointing
    your browser to [https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs](https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从查看团队服务开始。您可以通过将浏览器指向[https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs](https://www.visualstudio.com/en-us/products/what-is-visual-studio-online-vs)来找到该网站。
- en: 'Here you will see that Microsoft has given developers a fantastic opportunity
    to use Team Services. It is absolutely free for up to five users. This means that
    you and your mates can collaboratively work on the next big thing while ensuring
    that your code remains secure. Signing up is as simple as clicking on the **Get
    started for free** link:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您将看到微软为开发者提供了一个使用团队服务的绝佳机会。对于最多五个用户，这是完全免费的。这意味着您和您的伙伴们可以协作完成下一个大项目，同时确保您的代码保持安全。注册就像点击**免费开始**链接一样简单：
- en: '![How to do it...](img/B05391_10_36.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B05391_10_36.jpg)'
- en: 'The second excellent option is GitHub. It differs slightly in its free offering
    by requiring developers to using a public repository on the free account. If you
    don''t mind your code being essentially open source, then GitHub is a great choice.
    With GitHub though, you can have unlimited collaborators and public repositories:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个出色的选择是GitHub。它在免费提供方面略有不同，要求开发者在使用免费账户时使用公共仓库。如果您不介意您的代码基本上是开源的，那么GitHub是一个不错的选择。然而，在GitHub上，您可以拥有无限的合作者和公共仓库：
- en: '![How to do it...](img/B05391_10_24.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B05391_10_24.jpg)'
- en: How it works...
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The choice of source control essentially comes down to the openness of your
    code. If you can afford to let other developers see and download your code, then
    GitHub is a great choice. If you need your code to remain private and only shared
    between specific people, then a paid GitHub account will be better suited. If
    you don't want to fork out money yet, then Team Services will be your best bet.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 选择源代码控制主要取决于您代码的开放性。如果您可以承担让其他开发者查看和下载您的代码，那么 GitHub 是一个很好的选择。如果您需要您的代码保持私密，并且只与特定的人共享，那么付费的
    GitHub 账户将更适合。如果您目前不想花钱，那么 Team Services 将是您的最佳选择。
- en: Setting up Visual Studio GitHub integration, checking in code for the first
    time, and checking in changes
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Visual Studio GitHub 集成，首次提交代码以及提交更改
- en: GitHub has been a tour de force for so many years. There are developers that
    swear by it. In fact, it is the default option when using Apple's Xcode IDE. For
    whatever reason you decide to use GitHub, rest assured that you and your code
    are in good hands.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 多年来一直是一个强大的工具。许多开发者对其深信不疑。实际上，当使用苹果的 Xcode IDE 时，它就是默认选项。无论您出于什么原因选择使用
    GitHub，请放心，您和您的代码都处于安全可靠的手中。
- en: Getting ready
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'The following recipe will assume that you have already signed up for GitHub
    and that you have enabled **Two-factor authentication**. If you have not signed
    up for a GitHub account, you can do so by going to [www.github.com](http://www.github.com)
    and creating a new account. To enable **Two-factor authentication** on your GitHub
    account (something I personally strongly advise), do the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将假设您已经注册了 GitHub，并且已经启用了**双因素认证**。如果您还没有注册 GitHub 账户，您可以通过访问 [www.github.com](http://www.github.com)
    并创建一个新账户来注册。要在您的 GitHub 账户上启用**双因素认证**（我强烈建议这样做），请按照以下步骤操作：
- en: Click on the down arrow next to your profile image, and select **Settings**:![Getting
    ready](img/B05391_10_22.jpg)
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击您的个人形象旁边的向下箭头，并选择**设置**：![准备工作](img/B05391_10_22.jpg)
- en: From the **Personal settings** menu that appears on the left of the next web
    page, select **Security**:![Getting ready](img/B05391_10_23.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页左侧出现的**个人设置**菜单中，选择**安全**：![准备工作](img/B05391_10_23.jpg)
- en: The first section on the security page will be your **Two-factor authentication**
    status. To get started with setting it up, click on the **Set up two-factor authentication**
    button:![Getting ready](img/B05391_10_25.jpg)
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安全页面上的第一个部分将是您的**双因素认证**状态。要开始设置，请点击**设置双因素认证**按钮：![准备工作](img/B05391_10_25.jpg)
- en: You will then be presented with a brief overview of what **Two-factor authentication**
    is and you will be given the choice of **Set up using an app** (which I recommend)
    or **Set up using SMS**. Using an app is by far the easiest, and if you have a
    smartphone or tablet you can download an authenticator application from the applicable
    app store. From there on, follow the prompts that GitHub gives you to complete
    the **Two-factor authentication** setup:![Getting ready](img/B05391_10_26.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到一个关于**双因素认证**的简要概述，并可以选择**使用应用程序设置**（我推荐）或**使用短信设置**。使用应用程序是最简单的，如果您有智能手机或平板电脑，您可以从相应的应用商店下载一个身份验证器应用程序。从那时起，按照
    GitHub 给您的提示完成**双因素认证**的设置：![准备工作](img/B05391_10_26.jpg)
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: If you are installing Visual Studio 2015 for the first time, have a look at
    the **Custom** installation option. Under **Common Tools**, when expanded you
    will see the option to add GitHub to your Visual Studio installation. After you
    have selected that and other options to install, click **Next** and finish the
    installation window wizard. Visual Studio 2015 will now begin to install. You
    can now take a break, and go have a cup of coffee because the installation can
    take a while, depending on the hardware of your machine and speed of your Internet
    connection:![How to do it...](img/B05391_10_01.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您是首次安装 Visual Studio 2015，请查看**自定义**安装选项。在**常用工具**下，展开后您将看到将 GitHub 添加到 Visual
    Studio 安装中的选项。在选择了该选项和其他安装选项后，点击**下一步**并完成安装向导窗口。现在 Visual Studio 2015 将开始安装。您可以现在休息一下，去喝杯咖啡，因为安装可能需要一段时间，具体取决于您的硬件和互联网连接速度：![如何操作...](img/B05391_10_01.jpg)
- en: 'If you have already installed Visual Studio 2015 without adding the GitHub
    extension, you can easily just download it from the following link and install
    it: [https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix](https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix).'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经安装了Visual Studio 2015但没有添加GitHub扩展，您可以从以下链接轻松下载并安装它：[https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix](https://visualstudio.github.com/downloads/GitHub.VisualStudio.vsix)。
- en: Assuming that you have an existing application you want to add to GitHub, the
    process of adding it to a new repository is quite simple. I have simply created
    a console application with nothing but the template code, but you can add any
    project type and size to GitHub:![How to do it...](img/B05391_10_02.jpg)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设您有一个想要添加到GitHub的现有应用程序，将其添加到新仓库的过程相当简单。我仅仅创建了一个只包含模板代码的控制台应用程序，但您可以将任何项目类型和大小添加到GitHub：![如何操作...](img/B05391_10_02.jpg)
- en: On the **View** menu in Visual Studio 2015, select the **Team Explorer** option:![How
    to do it...](img/B05391_10_03.jpg)
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio 2015的**视图**菜单中，选择**团队资源管理器**选项：![如何操作...](img/B05391_10_03.jpg)
- en: You will be presented with two options under the **Hosted Service Providers**
    section. For now, we will select **GitHub** and, seeing as we already have an
    account, we will click on **Connect…**![How to do it...](img/B05391_10_04.jpg)
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**托管服务提供商**部分，您将看到两个选项。目前，我们将选择**GitHub**，因为我们已经有了账户，所以我们将点击**连接…**![如何操作...](img/B05391_10_04.jpg)
- en: You will now be presented with the GitHub login page. You are also offered the
    chance to sign up from here if you do not have an existing GitHub account:![How
    to do it...](img/B05391_10_05.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将看到GitHub登录页面。如果您没有现有的GitHub账户，您也可以从这里注册：![如何操作...](img/B05391_10_05.jpg)
- en: Because I have **Two-factor authentication** set up on my GitHub account, I
    am prompted to use my authenticator application to enter the generated authentication
    code and authenticate myself:![How to do it...](img/B05391_10_06.jpg)
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我在GitHub账户上设置了**两步验证**，我需要使用我的认证器应用程序输入生成的认证码并验证自己：![如何操作...](img/B05391_10_06.jpg)
- en: After you have been authenticated, you will return to the **Manage Connections**
    screen:![How to do it...](img/B05391_10_07.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 经过认证后，您将返回到**管理连接**屏幕：![如何操作...](img/B05391_10_07.jpg)
- en: Next, you will want to click on the Home icon, which is a picture of a little
    house at the top of the **Team Explorer** window. From the **Home** screen, click
    on the **Sync** button:![How to do it...](img/B05391_10_08.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要点击顶部的**团队资源管理器**窗口中的Home图标，它是一个小房子的图片。从**主页**屏幕，点击**同步**按钮：![如何操作...](img/B05391_10_08.jpg)
- en: This will display the **Publish** window to you. Under GitHub, click on the
    **Get Started** link. This is going to publish your project to a new repository
    on GitHub.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将显示**发布**窗口。在GitHub下，点击**开始使用**链接。这将把您的项目发布到GitHub上的新仓库。
- en: Note
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Remember, if you are using the free GitHub, all your repositories are public.
    If you are writing code that can't be made public (is not open source), then sign
    up for one of the paid GitHub accounts that include private repositories.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 记住，如果您使用的是免费的GitHub，所有您的仓库都是公开的。如果您正在编写不能公开的代码（不是开源的），那么请注册一个包含私有仓库的付费GitHub账户。
- en: '![How to do it...](img/B05391_10_09.jpg)'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05391_10_09.jpg)'
- en: GitHub will then prompt you to add in the details for this publish. Because
    you connected to GitHub earlier, your username will already be selected in the
    drop-down menu. When you are ready, click **Publish**:![How to do it...](img/B05391_10_10.jpg)
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，GitHub将提示您添加此发布的详细信息。因为您之前已经连接到GitHub，所以您的用户名已经在下拉菜单中选中。准备好后，点击**发布**：![如何操作...](img/B05391_10_10.jpg)
- en: When the project has been published to GitHub, you will automatically be returned
    to the **Home** screen:![How to do it...](img/B05391_10_11.jpg)
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当项目发布到GitHub后，您将自动返回到**主页**屏幕：![如何操作...](img/B05391_10_11.jpg)
- en: Looking at your GitHub account online, you will see that the project has been
    added:![How to do it...](img/B05391_10_12.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在线查看您的GitHub账户，您会看到项目已经被添加：![如何操作...](img/B05391_10_12.jpg)
- en: Next, let us go and make some changes to the `CommandCentre` application. Just
    go ahead and add a new class to your project. I called mine `Dominion.cs`, but
    you can call yours whatever you like:![How to do it...](img/B05391_10_13.jpg)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们对`CommandCentre`应用程序进行一些修改。直接添加一个新类到您的项目中。我命名为`Dominion.cs`，但您可以根据自己的喜好命名：![如何操作...](img/B05391_10_13.jpg)
- en: You will notice that as soon as a change is made to your project, that the solution
    will mark the changed items with a red tick:![How to do it...](img/B05391_10_14.jpg)
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会注意到，一旦你对项目进行了更改，解决方案就会用红色勾号标记更改的项目：![如何操作...](img/B05391_10_14.jpg)
- en: To add the changes to your GitHub repository, you can follow two routes. The
    first option is to go to the **Team Explorer - Home** window and click on the
    **Changes** button:![How to do it...](img/B05391_10_15.jpg)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将更改添加到你的GitHub仓库，你可以遵循两条路径。第一个选项是进入**团队资源管理器 - 主页**窗口，然后点击**更改**按钮：![如何操作...](img/B05391_10_15.jpg)
- en: The second (and in my opinion more convenient) option, is to right-click the
    solution in **Solution** **Explorer** and click on the **Commit...** menu item
    from the context menu:![How to do it...](img/B05391_10_16.jpg)
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个（在我看来更方便的）选项是右键单击**解决方案资源管理器**中的解决方案，然后从上下文菜单中选择**提交...**菜单项：![如何操作...](img/B05391_10_16.jpg)
- en: GitHub might ask you for your user information the first time you perform a
    commit:![How to do it...](img/B05391_10_17.jpg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你第一次执行提交操作时，GitHub可能会要求你提供用户信息：![如何操作...](img/B05391_10_17.jpg)
- en: Before you are allowed to commit your changes, you must fill in the required
    commit message. In a real team project, be as descriptive as possible in your
    commit message. Consider using task item code (or backlog codes) to uniquely identify
    the code being added. This will save your (or another developer's) bacon sometime
    in the future, I guarantee it:![How to do it...](img/B05391_10_18.jpg)
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你被允许提交更改之前，你必须填写所需的提交信息。在一个真实的项目团队中，你的提交信息应该尽可能详细。考虑使用任务项代码（或待办事项代码）来唯一标识正在添加的代码。这将在未来某个时候为你（或另一位开发者）节省很多麻烦，我保证：![如何操作...](img/B05391_10_18.jpg)
- en: One important thing to note is that you have three commit options available
    to you if you click on the down arrow next to the **Commit All** button. The **Commit
    All** button will just record the changes you make on your local machine. In other
    words, the change will not be reflected in the remote repository. The **Commit
    All and Push** button will record the changes on your local machine and push those
    changes to your remote GitHub repository. The **Commit All and Sync** button will
    record the changes on your local machine, then it will pull any changes from the
    remote repository, and finally it will do the push. You will want to do this if
    you are working in a team. For this recipe, however, I will just do a **Commit
    All and Push**, seeing as I am the only developer working on this repo:![How to
    do it...](img/B05391_10_19.jpg)
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有一个重要的事情需要注意，那就是如果你点击**提交所有**按钮旁边的向下箭头，你有三个提交选项可供选择。**提交所有**按钮只会记录你在本地机器上所做的更改。换句话说，更改不会反映在远程仓库中。**提交所有并推送**按钮会记录你在本地机器上的更改，并将这些更改推送到你的远程GitHub仓库。**提交所有并同步**按钮会记录你在本地机器上的更改，然后它会从远程仓库拉取任何更改，最后进行推送。如果你在团队中工作，你会想要这样做。然而，对于这个配方，我只会进行**提交所有并推送**，因为我是这个仓库唯一的开发者：![如何操作...](img/B05391_10_19.jpg)
- en: When the commit has completed, the **Team Explorer** window will notify you
    of the successful commit:![How to do it...](img/B05391_10_20.jpg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当提交完成时，**团队资源管理器**窗口会通知你提交成功：![如何操作...](img/B05391_10_20.jpg)
- en: Heading over to GitHub online, you will see the newly pushed changes reflected
    in your GitHub repository, along with the commit message:![How to do it...](img/B05391_10_21.jpg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到GitHub在线，你会看到新推送的更改反映在你的GitHub仓库中，以及提交信息：![如何操作...](img/B05391_10_21.jpg)
- en: GitHub is a fantastic source control solution for any developer. Consider creating
    an open source project. It is more beneficial than you might imagine.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub是任何开发者的绝佳源代码管理解决方案。考虑创建一个开源项目。这比你想象的更有益。
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The free GitHub account allows you to create public repositories. This means
    that anyone is able to search for, view, and clone your project from GitHub to
    their own desktop. This is the central idea behind GitHub. This is obviously a
    key factor for indie developers and corporates that don't want to spend money.
    Corporates can afford it more though than an indie developer, but I think that
    some companies prefer to roll their own than use a service provider hosted in
    the cloud somewhere. This means that they prefer to keep the source control under
    their control by setting up a source control system on their own corporate servers.
    Having GitHub as an option for indie developers is an awesome solution. For those
    that require private repos, the fee isn't a stumbling block either.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 免费GitHub账户允许您创建公共仓库。这意味着任何人都可以在GitHub上搜索、查看和克隆您的项目到自己的桌面。这是GitHub的核心思想。这对不想花钱的独立开发者和企业来说显然是一个关键因素。然而，企业比独立开发者更有能力承担费用。但我认为，一些公司宁愿自己搭建而不是使用云中托管的服务提供商。这意味着他们更愿意通过在自己的企业服务器上设置源控制系统来保持源控制在自己手中。为独立开发者提供GitHub选项是一个绝佳的解决方案。对于那些需要私有仓库的人来说，费用也不是障碍。
- en: Working as a team using GitHub, and handling and resolving conflicts in code
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub团队合作，处理和解决代码冲突
- en: GitHub and Team Services really come into their own when working in teams. The
    effect of collaborative effort is quite powerful. Sometimes though, it can be
    a bit challenging. Let us have a look at using GitHub to work in a team setup.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当在团队中工作时，GitHub和团队服务真正发挥其优势。协作努力的效果非常强大。有时，这可能会有些挑战。让我们看看如何使用GitHub在团队环境中工作。
- en: Getting ready
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'We will be using the existing `CommandCentre` app checked in to GitHub. Before
    you can let other developers push code to your branch, you need to add them as
    a collaborator. To do this, log in to GitHub and click on the down arrow next
    to the plus sign. Click on **New collaborator** in the menu:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用已检查到GitHub的现有`CommandCentre`应用程序。在您允许其他开发者将代码推送到您的分支之前，您需要将他们添加为协作者。为此，登录GitHub并点击加号旁边的向下箭头。在菜单中点击**新建协作者**：
- en: '![Getting ready](img/B05391_10_50.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/B05391_10_50.jpg)'
- en: 'You can then search for collaborators to add by entering their GitHub username,
    full name, or e-mail address:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过输入他们的GitHub用户名、全名或电子邮件地址来搜索要添加的协作者：
- en: '![Getting ready](img/B05391_10_51.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/B05391_10_51.jpg)'
- en: 'When you are done, click on the **Add collaborator** button to add that user
    as a collaborator to your project:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，点击**添加协作者**按钮将该用户添加为项目的协作者：
- en: '![Getting ready](img/B05391_10_52.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![准备就绪](img/B05391_10_52.jpg)'
- en: How to do it...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let us assume that a new developer (let's call him John) has joined the team.
    You have already added the developer as a collaborator to your project. John goes
    about setting up his Visual Studio environment, including getting connected to
    GitHub. Click on **Team** in the menu and click on **Manage Connections…**![How
    to do it...](img/B05391_10_37.jpg)
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设一位新开发者（我们称他为John）加入了团队。您已经将开发者添加为项目的协作者。John开始设置他的Visual Studio环境，包括连接到GitHub。在菜单中点击**团队**，然后点击**管理连接…**![如何操作...](img/B05391_10_37.jpg)
- en: Presented with the options for the **Hosted Service Providers**, select **Connect…**
    under the GitHub service:![How to do it...](img/B05391_10_38.jpg)
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**托管服务提供商**选项中，选择GitHub服务下的**连接…**![如何操作...](img/B05391_10_38.jpg)
- en: Log in to GitHub with your e-mail address and password.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您的电子邮件地址和密码登录GitHub。
- en: Note
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Take note that if you have just signed up to GitHub, you will need to click
    on a verification e-mail sent to the e-mail address you specified when signing
    up. Without verifying your e-mail address, you will not be able to log in from
    Visual Studio.
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，如果您刚刚注册了GitHub，您需要点击发送到您注册时指定的电子邮件地址的验证电子邮件。如果不验证您的电子邮件地址，您将无法从Visual Studio登录。
- en: '![How to do it...](img/B05391_10_39.jpg)'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/B05391_10_39.jpg)'
- en: When you have connected, you will see your GitHub details loaded:![How to do
    it...](img/B05391_10_40.jpg)
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接后，您将看到GitHub详细信息已加载：![如何操作...](img/B05391_10_40.jpg)
- en: We now want to work on the `CommandCentre` application. You can find it on GitHub
    by searching for it by name:![How to do it...](img/B05391_10_41.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在想要在`CommandCentre`应用程序上工作。您可以通过按名称搜索在GitHub上找到它：![如何操作...](img/B05391_10_41.jpg)
- en: When you have found the correct project, copy the URL from the **HTTPS** text
    box on the page:![How to do it...](img/B05391_10_42.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您找到正确的项目时，从页面上的**HTTPS**文本框中复制URL：![如何操作...](img/B05391_10_42.jpg)
- en: Back in Visual Studio, expand the **Local Git Repositories** and click on **Clone**.
    Paste the copied URL to the Git Repository path and specify where the code should
    be cloned to on your hard drive. When you are ready, click on **Clone**:![How
    to do it...](img/B05391_10_43.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，展开**本地Git仓库**并点击**克隆**。将复制的URL粘贴到Git仓库路径中，并指定代码应在您的硬盘上克隆到的位置。准备好后，点击**克隆**：![如何操作...](img/B05391_10_43.jpg)
- en: When the code is cloned, you will see it in the folder path you specified earlier:![How
    to do it...](img/B05391_10_44.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当代码被克隆时，您将在之前指定的文件夹路径中看到它：![如何操作...](img/B05391_10_44.jpg)
- en: Time to make some changes to the code. Open the project in Visual Studio as
    normal. John decided to work on the `Dominion.cs` class and added a new function
    that returns a countdown integer:![How to do it...](img/B05391_10_45.jpg)
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是时候对代码进行一些更改了。以正常方式在Visual Studio中打开项目。John决定在`Dominion.cs`类上工作，并添加了一个返回倒计时整数的函数：![如何操作...](img/B05391_10_45.jpg)
- en: After the code change is complete, John commits the code he just added to the
    GitHub repository:![How to do it...](img/B05391_10_46.jpg)
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码更改完成后，John将刚刚添加的代码提交到GitHub仓库：![如何操作...](img/B05391_10_46.jpg)
- en: GitHub then asks for John's name and e-mail address for this commit:![How to
    do it...](img/B05391_10_47.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub随后要求输入John的姓名和电子邮件地址以进行此提交：![如何操作...](img/B05391_10_47.jpg)
- en: John adds a meaningful commit message to describe the change he made:![How to
    do it...](img/B05391_10_48.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: John添加了一个有意义的提交信息来描述他所作的更改：![如何操作...](img/B05391_10_48.jpg)
- en: He then clicks on **Commit All and Sync**.![How to do it...](img/B05391_10_49.jpg)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，他点击**全部提交并同步**：![如何操作...](img/B05391_10_49.jpg)
- en: John's changes are committed to the GitHub repository:![How to do it...](img/B05391_10_53.jpg)
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: John的更改已提交到GitHub仓库：![如何操作...](img/B05391_10_53.jpg)
- en: On the other side of the office, I am working on the same bit of code. The only
    problem is that I have added the same method with my own implementation of the
    `CountDown` logic:![How to do it...](img/B05391_10_54.jpg)
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在办公室的另一边，我正在处理同一块代码。唯一的问题是，我添加了与自己的`CountDown`逻辑实现相同的方法：![如何操作...](img/B05391_10_54.jpg)
- en: I get ready and commit my changes to GitHub:![How to do it...](img/B05391_10_55.jpg)
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我准备好并将我的更改提交到GitHub：![如何操作...](img/B05391_10_55.jpg)
- en: 'GitHub immediately prevents me from doing this. This is because if my code
    is pushed, the earlier commit by John will be lost. GitHub has a great help file
    on the subject in GitHub Help here: [https://help.github.com/articles/dealing-with-non-fast-forward-errors/](https://help.github.com/articles/dealing-with-non-fast-forward-errors/).![How
    to do it...](img/B05391_10_56.jpg)'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub立即阻止我这样做。这是因为如果我的代码被推送，John之前的提交将会丢失。GitHub在GitHub帮助中对此有很好的帮助文件：[https://help.github.com/articles/dealing-with-non-fast-forward-errors/](https://help.github.com/articles/dealing-with-non-fast-forward-errors/)。![如何操作...](img/B05391_10_56.jpg)
- en: To resolve this, click on **Pull** to get the latest commit that John did. Your
    code will then be in a conflicted state. This sounds bad, but it isn't. It is
    putting you in control of the decision on which code will be used. You can see
    that the pull shows that there are conflicted files and also the incoming commit
    message that John added:![How to do it...](img/B05391_10_57.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要解决这个问题，请点击**拉取**以获取John所做的最新提交。此时，您的代码将处于冲突状态。这听起来很糟糕，但并非如此。这使您能够控制决定使用哪段代码。您可以看到，拉取操作显示了有冲突的文件以及John添加的传入提交信息：![如何操作...](img/B05391_10_57.jpg)
- en: To view the conflicts, click on the **Resolve the conflicts** link in the message
    pop-up:![How to do it...](img/B05391_10_58.jpg)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要查看冲突，请点击消息弹出窗口中的**解决冲突**链接：![如何操作...](img/B05391_10_58.jpg)
- en: You will then see the **Resolve Conflicts** screen listing the conflicted files.
    Clicking on a file will expand it into a short summary and action options screen.
    It is always prudent to click on the **Compare Files** link to see the difference
    between the files in conflict:![How to do it...](img/B05391_10_59.jpg)
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到**解决冲突**屏幕上列出有冲突的文件。点击一个文件将展开为简短摘要和操作选项屏幕。始终点击**比较文件**链接以查看冲突文件之间的差异：![如何操作...](img/B05391_10_59.jpg)
- en: The differences in code are immediately evident. The process you follow from
    here on is subject to how you work together as a team. Usually, the conflict can
    be quite complex, and it is always a good idea to speak to the developer concerned
    about the way forward:![How to do it...](img/B05391_10_60.jpg)
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码中的差异立即显而易见。你接下来遵循的过程取决于你们团队合作的方式。通常，冲突可能相当复杂，与相关开发者讨论前进的方式总是一个好主意：![如何操作...](img/B05391_10_60.jpg)
- en: In this case, John and I decided that his code was simply better and more concise.
    So the decision was made to simply click on **Take Remote** and use John's code.
    When you have clicked on the link, you need to click on **Commit Merge**:![How
    to do it...](img/B05391_10_61.jpg)
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这种情况下，我和约翰决定他的代码更好、更简洁。因此，决定简单地点击**取远程**并使用约翰的代码。当你点击了链接后，你需要点击**提交合并**：![如何操作...](img/B05391_10_61.jpg)
- en: After adding a commit message, you can then push your code to the repo. In this
    case, I simply replaced all my code with John's, but there might be situations
    when you will be using some of your code and some of another developer's code.
    GitHub allows us to easily handle these conflicts:![How to do it...](img/B05391_10_62.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加提交信息后，你可以将你的代码推送到仓库。在这种情况下，我简单地用约翰的代码替换了我所有的代码，但可能存在你需要使用你自己的代码和另一位开发者的代码的情况。GitHub允许我们轻松地处理这些冲突：![如何操作...](img/B05391_10_62.jpg)
- en: After pushing the code to the remote, GitHub notifies you that the code has
    successfully been synchronised:![How to do it...](img/B05391_10_63.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将代码推送到远程后，GitHub会通知你代码已成功同步：![如何操作...](img/B05391_10_63.jpg)
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: GitHub takes the pain out of committing, resolving conflicts, and merging code.
    It is without a doubt an essential tool in any developer's toolkit and essential
    for development teams.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub简化了提交、解决冲突和合并代码的痛苦。毫无疑问，它是任何开发者工具箱中的必备工具，对于开发团队来说是必不可少的。
