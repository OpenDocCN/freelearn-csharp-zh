- en: AR for Manufacturing with ARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will create our first AR project using Google's ARCore tool. The
    main goal of this chapter is to introduce you to one of the latest and fastest-growing
    AR tools, ARCore. By the end of this chapter, you will have gained the necessary
    skills to create your own ARCore projects easily in Android Studio. At the same
    time, we present one of the uses of AR in manufacturing, that is, prototyping.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have created a prototype viewer app where
    users will place 3D designs of industrial pieces, machines, and so on over flat
    surfaces, navigate around and through them, and manipulate them (move, rotate,
    and scale) with their fingers. With this knowledge, you will also be able to improve
    the current project and adapt it to your needs in this field.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for manufacturing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring ARCore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a prototype AR viewer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Android Studio (3.5.2 version for Windows in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java Development Kit (1.8.0 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sceneform plugin (installed from inside Android Studio. 1.13.0 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An ARCore supporting mobile device (see the list here: [https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)).
    The project has been tested on a Samsung Galaxy A5 (2017) and a Pocophone F1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To install the Android Studio, the system requirements for Windows are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 4 GB RAM minimum, 8 GB RAM recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 2 GB of available disk space minimum, 4 GB recommended
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1280x800 minimum screen resolution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details on other operating systems, you can find the official requirements
    at the end of this page: [https://developer.android.com/studio](https://developer.android.com/studio).
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter03](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for manufacturing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Industry 4.0, also known as the 4th industrial revolution, makes reference to
    the inclusion of digitalization and interconnectivity tools inside factories,
    covering production processes to maintenance and training. Although the term has
    been around for some years now, in the last couple of years, this industry 4.0
    concept has taken on a new dimension thanks to the exponential growth (in quality
    and quantity) of technologies such as **Augmented Reality** (**AR**) and **Virtual
    Reality** (**VR**), **Internet of Things** (**IoT**), **Big Data Analytics** (**BDA**),
    **Additive Manufacturing** (**AM**), **Cyber-Physical Systems** (**CPS**), and
    **Artificial Intelligence** (**AI**).
  prefs: []
  type: TYPE_NORMAL
- en: The visual component of AR makes it the natural interface for users who can
    receive real-time information about processes, access remote systems for extra
    data, and control processes and machines, all with a mobile device or smart glasses.
  prefs: []
  type: TYPE_NORMAL
- en: AR in manufacturing has many uses in areas such as prototyping, production,
    and training. In this chapter, we will cover prototyping and, more specifically,
    where AR can help reduce costs in prototyping by visualizing a design in the real
    world. This allows designers, workers, and potential customers to manipulate a
    model in its three dimensions, scale it, interact with individual parts, and even
    walk through them together. ARCore is one of the examples of an AR tool that we
    can use for that.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring ARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In preview since 2017, the first version of ARCore was launched in February
    2018 and was Google''s platform for creating augmented reality applications for
    Android and iOS. It makes use of different capabilities, such as motion tracking,
    to estimate the position and orientation of the mobile device regarding the real
    world along with environmental location, to find and track horizontal surfaces
    such as the ground, tablets, or walls, and light estimation, to place 3D elements
    realistically into the real world. A more detailed explanation of these features
    can be found at [https://developers.google.com/ar/discover/concepts](https://developers.google.com/ar/discover/concepts).
    Targeted at Android 7.0 and above, not all devices in the market support this
    technology, although the number has increased greatly since the first SDK version.
    You can consult the currently supported device list here: [https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices).'
  prefs: []
  type: TYPE_NORMAL
- en: ARCore apps can be developed on different platforms such as Android Studio,
    Xcode for iOS, Unity3D, and Unreal Engine. When using Android Studio, developers
    can integrate Sceneform, a 3D engine that helps integrate 3D environments and
    models in an easier way than the OpenGL library. We will be using this plugin
    in our project to display 3D models.
  prefs: []
  type: TYPE_NORMAL
- en: 'When developing an app using ARCore, make sure you disclose it in your app:
    [https://developers.google.com/ar/distribute/privacy-requirements](https://developers.google.com/ar/distribute/privacy-requirements).'
  prefs: []
  type: TYPE_NORMAL
- en: For this project, we will develop a prototype viewing app that will show three
    different engine models. The engine models that we will be using for this project
    have been taken from[https://sketchfab.com/3d-models/rocket-engines-6fba4dbbb9444e99ba68425bcb3a7f70](https://sketchfab.com/3d-models/rocket-engines-6fba4dbbb9444e99ba68425bcb3a7f70).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have seen the basics of ARCore, let's start developing the app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a prototype AR viewer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we are going to develop our AR viewer for prototyping. First,
    we are going to install all the required software tools—JDK and Android Studio—and
    then we'll create our Android application, learn how to enable and use ARCore
    in it, and how to use the Sceneform plugin to display the 3D elements.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Java Development Kit (JDK)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Android Studio requires that we install JDK. It''s usually located in `C:\Program
    Files\Java\jdk_version`. If you don''t have it installed, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to [www.oracle.com](http://www.oracle.com) and download the latest Java SE
    Development Kit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once downloaded, run the installation file and let it install the JDK and JRE
    in their default folders.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If, during Android Studio's installation, it complains about not finding the
    JDK, you can solve this problem by going to Start menu|Computer|System Properties|Advanced
    System Properties, opening the Advanced|Environment Variables tab, and creating
    a `JAVA_HOME` system variable pointing to the JDK folder.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Android Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once the JDK is installed, we are going to do the same with Android Studio
    since it will be our main platform for developing our AR app:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download Android Studio from Android''s developer page: [https://developer.android.com/studio](https://developer.android.com/studio).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the studio with the default values and when you''re finished, run it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dccd2716-4de1-42c2-a482-5fc641eb5408.png)'
  prefs: []
  type: TYPE_IMG
- en: Launching Android Studio when the installation finishes
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time you open it after installation, the Android Studio setup wizard
    will launch to help you configure the last steps of the studio and download the
    Android SDK components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9aeb208-996e-44bd-999b-8c1e8a1abaf0.png)'
  prefs: []
  type: TYPE_IMG
- en: The setup wizard will appear the first time Android Studio is installed
  prefs: []
  type: TYPE_NORMAL
- en: 'Once finished, the Welcome window will be launched:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3b800d1-fcdb-4c3e-a672-d6d70ad8843e.png)'
  prefs: []
  type: TYPE_IMG
- en: Android Studio Welcome window
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the software ready, we can start developing our app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have the software installed, we are going to start creating our
    AR app. The first thing we have to do is launch a new Android Studio project and
    add the required libraries to it. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on Start a new Android Studio project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose to create an Empty Activity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7388c166-3608-46fc-8db5-514f5c76921e.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing an activity type
  prefs: []
  type: TYPE_NORMAL
- en: 'Give the project a Name, Package name, and Location. Set the Minimum API level to
    at least API 24: Android 7.0 (Nougat) since it''s the first that supports ARCore.
    Click on the Finish button to start the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b0db9ea2-4afd-4e9e-a30f-5e44b9530eae.png)'
  prefs: []
  type: TYPE_IMG
- en: Configuration parameters for the new project
  prefs: []
  type: TYPE_NORMAL
- en: The next thing we need to do is enable ARCore in our project.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling ARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In an AR project, ARCore can be set as optional or required. The former can
    work as a regular app on devices that don''t support ARCore, while the latter
    will only appear in the Google Play Store to devices that support ARCore. Our
    app is a full AR application, so we will select the second option. To achieve
    this we have to modify some of the project files. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project window, unfold `app` and inside the `manifests` folder, open
    the `AndroidManifest.xml` file, as shown in the following screenshot. If you want
    to open the manifest externally you can find the file in `app/src/main` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b89406c3-d05e-495e-985b-c7b44a6cdcd8.png)'
  prefs: []
  type: TYPE_IMG
- en: AndroidManifest.xml in the project
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following lines before the `<application>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first line is necessary in both cases (ARCore is optional and required)
    since it's the one giving permission to open the camera. The second line indicates
    the use of ARCore and is the one ensuring that only devices that support ARCore
    will have access to the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following line inside `<application>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This line sets ARCore as required and will make the Google Play Store download
    and install ARCore (if it's not already installed) when the app is installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your project''s `build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a447dba-b8ea-48b6-b835-237a067a6f82.png)'
  prefs: []
  type: TYPE_IMG
- en: The project's build.gradle file in the Project window
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure it includes Google''s Maven repository (it should be there; if not,
    add it):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open your app''s`build.gradle` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7edbb9cd-aa8a-48af-9952-a804e085db24.png)'
  prefs: []
  type: TYPE_IMG
- en: The app's build.gradle file in the Project window
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the latest ARCore library as a dependency (1.13.0, in this book):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Synchronize Gradle in order for these changes to be effective by clicking on Sync
    Now, which can be found at the top right of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24125073-9e11-45de-91c4-3ed7d109c492.png)'
  prefs: []
  type: TYPE_IMG
- en: Sync Now option to sync the project
  prefs: []
  type: TYPE_NORMAL
- en: If you intend to create an app that works both with and without AR, the steps
    to follow to enable ARCore will differ from the ones shown here. Please refer
    to [https://developers.google.com/ar/develop/java/enable-arcore](https://developers.google.com/ar/develop/java/enable-arcore)
    to see what changes you have to make. Also, take into account that you will have
    to check whether the mobile running the app supports ARCore. You can do this by
    looking at your code.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have ARCore enabled, let's introduce Sceneform.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Sceneform to the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned at the beginning of this chapter, Sceneform is an Android Studio
    plugin that will help us display 3D models in an easier and faster way than OpenGL.
  prefs: []
  type: TYPE_NORMAL
- en: Sceneform also provides ARFragment and other UX resources that will automatically
    handle the AR session after asking for the camera permission and checking if ARCore
    is installed and updated, without us having to include these verifications in
    our code.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, the Sceneform Tools were still in Beta mode.
    If you encounter any problems when following these steps, please head to their
    GitHub page ([https://github.com/google-ar/sceneform-android-sdk](https://github.com/google-ar/sceneform-android-sdk))
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import Sceneform into your project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open File|Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Plugins tab, search for `Google Sceneform Tools (Beta)`. At the time
    of writing this book, the current version is v1.13.0:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3abcc81e-c5ce-4d32-b22c-a0d1f10a5573.png)'
  prefs: []
  type: TYPE_IMG
- en: Google Sceneform Tools plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'Install it and press Restart IDE on the top right to activate the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97935c7d-81a0-4f0b-b0c8-b2da612c421b.png)'
  prefs: []
  type: TYPE_IMG
- en: Restart IDE button
  prefs: []
  type: TYPE_NORMAL
- en: 'Once installed, open your app''s `build.gradle` file and add the following
    compile options *inside *the `android` section. If we don''t, when building our
    `ModelRenderable`, errors will appear. This is only necessary if `minSdkVersion
    < 26` and we set the minimum to `24` (Android 7.0) when creating the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, inside the `dependencies` brackets, we are going to add the
    following `implementation` line to include Sceneform in our project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Your app''s `build.gradle` file should now look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcc17b1f-d0f4-4132-ac62-174b5937f5b4.png)'
  prefs: []
  type: TYPE_IMG
- en: The app's build.gradle file with the new lines added to it
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to use ARFragment in your app, open the `activity_main.xml` file in the `res/layout`
    folder and select Text mode at the bottom tabs of the view. By doing this, you
    can modify the elements in the text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74f58d58-f2a9-4e2d-bfd3-93701e610be5.png)'
  prefs: []
  type: TYPE_IMG
- en: The activity_main.xml file's text view and visual preview
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the `TextView` block and add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Sceneform is now ready to be used. Let's import our 3D model into the project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding 3D models to the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '3D models, also called renderables, can be added in different ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Created from basic shapes (sphere, cube, and so on) and materials and combined
    programmatically to generate more complex objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Created from standard Android widgets via ViewRenderable. They are rendered
    as interactive flat cards in the scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Imported from other programs as 3D assets. The supported formats include OBJ,
    FBX, and glTF (and glb). Animations are only supported in FBX.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We are going to use the first option and import a `.obj` file using Sceneform.
  prefs: []
  type: TYPE_NORMAL
- en: 'To import a model into our project, we have to create an external folder to
    contain the model (this folder won''t be compiled into the final app) and then
    import the model into the project using Sceneform. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `sampledata` folder in your project by right-clicking on the `app`
    folder of your project and selecting New|Sample Data Directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d173a00-28b2-4826-aca6-6763150e94b2.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Sample Data Directory to the project
  prefs: []
  type: TYPE_NORMAL
- en: If the `sampledata` folder doesn't appear automatically on your project, you
    can also create it manually from the file explorer, inside the `app` folder of
    your project. Call it `sampledata` and it will appear in Android Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the resources pack provided for this project, copy the `engine` folder
    into the `sampledata` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c973174-7c2b-4bab-97b1-8162f71ff8f0.png)'
  prefs: []
  type: TYPE_IMG
- en: The newly added engine folder containing the model and its resources
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will import the `.obj` file through Sceneform to include the 3D model
    as an asset.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click the `engine.obj` file and select Import Sceneform Asset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6d187b6-0635-4ecd-8508-b68e111d9264.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting Import Sceneform Asset for our .obj file
  prefs: []
  type: TYPE_NORMAL
- en: 'Leave the default values as they are. This will create a Sceneform asset (`.sfa`)
    file inside `sampledata` and a Sceneform binary asset (`.sfb`) inside the `assets`
    folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fae1677b-446e-4c9c-8a96-3f81e7973398.png)'
  prefs: []
  type: TYPE_IMG
- en: Default import values for the model
  prefs: []
  type: TYPE_NORMAL
- en: 'During the importing process, the following lines will automatically be added
    to the end of your app''s `build.gradle` by Sceneform:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Leave Gradle syncing. When it finishes, two windows will open: a text file
    with the model''s description and its 3D preview:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1205c2d5-e07d-43a0-8da5-bb01ca037249.png)'
  prefs: []
  type: TYPE_IMG
- en: Our newly imported model's text view and preview
  prefs: []
  type: TYPE_NORMAL
- en: The final step will be to merge all the elements into the AR scene.
  prefs: []
  type: TYPE_NORMAL
- en: Forming the AR scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we have ARCore and Sceneform enabled and our 3D model included in
    the project, let''s add the code that will make the model appear on the screen
    when a flat surface is detected and the user taps on the screen. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your `MainActivity.java` file from `app/java/com.banana.arprototype` and
    add the following imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside our class, create the following variables to control the AR scene and
    the 3D model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, inside the `OnCreate()` method, add the `ARFragment` initialization:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Still inside the `OnCreate()` method, build the model in the scene using `ModelRenderable`,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Here, we call the model from the `assets` folder using `Uri.parse`. It will
    launch an error message if it's unable to load it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, still in the `OnCreate()` method, we will place the model when the
    user taps the screen after a planar surface has been detected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Here, when the user taps on a plane and the model renderable has been successfully
    loaded, an anchor is created to keep the model in place. Then, a new node for
    the model is created and attached to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can run the app either in an Android emulator or on an actual device.
    To run it in an emulator, the device must meet some requirements, and you will
    have to download ARCore from the Play Store manually on it (take a look at the
    *Prepare your device or emulator* section at [https://developers.google.com/ar/develop/java/quickstart](https://developers.google.com/ar/develop/java/quickstart)).
    Here, we will directly run the app in our device by clicking on the play icon
    and then selecting our connected device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/682f9f26-75a7-4c5e-a687-fb679e564bf6.png)'
  prefs: []
  type: TYPE_IMG
- en: Running the app in a physical device
  prefs: []
  type: TYPE_NORMAL
- en: 'With this, the app will be installed on the mobile device. As we mentioned
    previously, the first time the app is run, it will check whether the latest ARCore
    version has been installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e62dc7fa-a0e8-462d-89d2-a42e8e146783.png)'
  prefs: []
  type: TYPE_IMG
- en: ARCore checking for the latest version of ARCore
  prefs: []
  type: TYPE_NORMAL
- en: 'You will have to install it through Google Play:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b57b02ba-80b0-45be-b266-13a8fc0db1d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Installing the ARCore app
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this initial step has been completed, you will be able to finish launching
    the app. Move the phone/tablet until a flat surface is detected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0a2e5991-d2bf-49e6-8763-ad40600294ba.png)'
  prefs: []
  type: TYPE_IMG
- en: The white dots form the plane surface where we can place the 3D objects
  prefs: []
  type: TYPE_NORMAL
- en: 'Tap on the screen to anchor your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58d69432-1376-41f7-b26a-8b9ee96c9116.png)'
  prefs: []
  type: TYPE_IMG
- en: The engine will appear standing in front of the camera
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also resize, rotate, and move the model with your fingers while moving
    around it to see it from different angles. If you tap again, a new engine will
    appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b51e550a-f4c0-4bdf-bb3f-20f96c1c3f0e.png)'
  prefs: []
  type: TYPE_IMG
- en: Tapping multiple times causes multiple instances
  prefs: []
  type: TYPE_NORMAL
- en: Play around with the app and get comfortable with using it. You will see that,
    depending on the capacity of the device, the recognition of a flat surface will
    be faster/slower. You will also see that if you rotate the device (portrait/landscape),
    the model will disappear because the anchor is lost. Therefore, now that we have
    the basic setup, we are going to make some changes to improve the overall performance
    and give the user the option to add more models to the current scene.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the basic app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Once we have the basic app ready, there are some things we can do to improve
    the overall working of the app:'
  prefs: []
  type: TYPE_NORMAL
- en: Make the screen orientation fixed. If we leave it in auto-rotation mode, rotating
    the screen will cause the phone to lose the anchor and the model will disappear
    from the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So far, we have seen that, for each screen tap, a new model appears. Since we
    are using the app for prototyping, the idea is that only one model is shown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also change the rotation and size of the model so that it's displayed
    better in the scene.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s change the code to add these features. For that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Force the screen orientation so that it''s in portrait mode by adding `AndroidManifest.xml` inside
    `<application>` and `<activity>`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This way, the screen will always be in portrait mode and won't autorotate and
    lose the anchor, even if the user rotates the phone by mistake.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a tablet or prefer to see the scene in landscape mode, change
    this to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'To display only one model for each tap on the screen, open `MainActivity.java`
    and create the following variables after the `ArFragment` and `ModelRenderable` variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside `setOnTapArPlaneListener()`, add the following lines after the
    `modelRenderable = null` check and before creating a new anchor, so that the previous
    one is released:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This way, when the users tap on different places of the screen, the model will
    *move* from one place to the next one, instead of appearing duplicated in each
    one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, remove the definition part of the `Anchor`, `AnchorNode`, and `TransformableNode` from
    the lines that follow, so that they make reference to the global variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, to rotate and scale the model, start by adding the following imports
    to the `MainActivity.java` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `arFragment.setOnTapArPlaneListener()` method, add the following
    code before `setParent()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, the model will appear lying down on one side so that we can see
    the inside of it. This can be seen in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80820c00-bd54-4bbf-9372-534ba7bdd36e.png)'
  prefs: []
  type: TYPE_IMG
- en: The engine in a rotated state
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have improved on the basics, let''s add two more prototypes and
    a simple UI so that we can switch between them. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `resources` folder of this project, copy the `engine2` and `engine3`
    folders into the `sampledata` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right-click on each of the `.obj` files and select Import Sceneform Asset to
    create the `.sfa` and `.sfb` files. Your `sampledata` folder should now look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea6e7892-2f95-4e26-a83c-e8b67e00882a.png)'
  prefs: []
  type: TYPE_IMG
- en: The sampledata folder with the new models
  prefs: []
  type: TYPE_NORMAL
- en: 'Your `assets` folder should have the three binary files for the models:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8fc0368c-684f-466e-960a-0616fd143a9b.png)'
  prefs: []
  type: TYPE_IMG
- en: The assets folder with the three binary files
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `resources` folder of this project, copy the three images corresponding
    to each of the engines into the `res`|`drawable` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08d372a7-7f26-4007-98e4-0768928cf26b.png)'
  prefs: []
  type: TYPE_IMG
- en: The res|drawable folder containing the new images
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `activity_main.xml` file located in res|layout in Text mode and add
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're using `layout_constraintBottom_toBottomOf` to anchor it to the bottom
    of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are in landscape mode, you will probably want to locate the buttons
    on the right-hand side of the screen so that you have more space to play around.
    Make the following changes to the preceding code to do so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the three buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The first button has a green background (selected), while the other two have
    a semi-transparent background. Each of them has its corresponding image from `res`|`drawable`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the closing tag for `LinearLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The preview should look similar to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/736db7c1-8415-4c63-90c8-ae8fa9fdc617.png)'
  prefs: []
  type: TYPE_IMG
- en: The activity_main.xml file's code on the left and the preview on the right in
    Portrait mode
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the Preview is in Portrait mode. To change it to Landscape click
    on the rotating phone icon and select Landscape:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f6f608d-a904-4bd1-94c8-ea6a3a7f5953.png)'
  prefs: []
  type: TYPE_IMG
- en: The activity_main.xml file's code on the left and the preview on the right in
    Landscape mode
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `MainActivity.java` file again and add the following libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Add three new `modelRenderables` below the preceding code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: We will use `currentRenderable` to find out which renderable is active every
    moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add three new image buttons at the end of the variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Copy `ModelRenderable.builder()` and paste it *twice* to build the two new models.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change their `Uri.parse` calls to `engine2.sfb` and `engine3.sfb`, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `.thenAccept` call, change the name of the `renderables` to the corresponding
    ones. The resulting code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first `ModelRenderable.builder()`, modify the `.thenAccept` call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Here, we're assigning `currentRenderable` to the first `renderable`. This way,
    the initial model that appears on the screen will be the first engine (remember
    that we have the first button highlighted as the selected one).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, in the `setOnTapArListener()` method, change `modelRenderable` to `currentRenderable`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'To add the button''s activities, we are going to make our `MainActivity` implement
    `OnClickListener`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'This way, we can simplify our buttons initialization like so, at the bottom
    of the `onCreate()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The first three lines initialize our buttons and the next three make a call
    (the same call in all three cases) when the user clicks on them.
  prefs: []
  type: TYPE_NORMAL
- en: 'To receive these clicks, create the `onClick()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This method will assign a different `modelRenderable` to the `currentRenderable`
    and highlight its corresponding button, depending on which button has been pressed,
    after the `onCreate()`. The last line swaps the current visible model to the newly
    selected one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the app and try the three different engines. Just select one of the engines
    and place it on the floor or a desk. The following image shows the yellow engine
    on the floor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fca9bca2-f08a-4ff0-9df2-198ac0192f22.png)'
  prefs: []
  type: TYPE_IMG
- en: Engine 2 is in view in the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the engine, just press another button and the current model will
    change. You can also find another spot and click on it to make it appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/71b4f55c-cbd9-49e5-9071-7b3df104781e.png)'
  prefs: []
  type: TYPE_IMG
- en: Engine 3 appearing on the surface
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you have learned how to create a simple interface to change
    the models that appear in AR. With this, you now have the basic skills to go further
    and build more complex apps so that you can show and manipulate your own prototypes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have made an introduction to AR using Google's ARCore to
    create a prototype viewer app. We learned how to integrate the capabilities of
    ARCore and the Sceneform library to make the task of generating an AR scene easier
    and we have included our own external 3D models. We also created a basic UI that
    allows us to switch between different models.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have the skills to create your own application with ARCore. You can
    improve the current project by adding your own prototype, or prototype pieces,
    make the model break down into smaller pieces when the user presses a button,
    or change the color of the model with another button. This chapter has given you
    the basis to explore the possibilities of AR that's displayed on flat surfaces.
  prefs: []
  type: TYPE_NORMAL
- en: You also have a better knowledge of how AR can be useful in the manufacturing
    field and you can explore the further possibilities it offers beyond the example
    that's been provided here.
  prefs: []
  type: TYPE_NORMAL
- en: In the chapters that follow, we will explore other AR tools and technologies.
    Some of them will be related to ARCore, such as WebAR, while others will be completely
    different, such as Augmented Class!, EasyAR, and Vuforia.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to go further with the project we completed in this chapter, we
    recommend that you explore the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: 'AR images: Instead of placing objects on surfaces, you can attach them to physical
    images (pictures, planes, and so on). You can find a starting point on how this
    works at [https://developers.google.com/ar/develop/java/augmented-images/](https://developers.google.com/ar/develop/java/augmented-images/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Explore the available samples using Sceneform, you will only have to download
    and open them with Android Studio: [https://developers.google.com/ar/develop/java/sceneform/samples](https://developers.google.com/ar/develop/java/sceneform/samples).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml), *Introduction to
    Unity for AR Development*, we introduced Unity 3D. ARCore can be used inside the
    Unity platform, which also makes the process of adding 3D models easier. It also
    accepts a greater number of extensions. You can find more information about how
    to get started here: [https://developers.google.com/ar/develop/unity/quickstart-android](https://developers.google.com/ar/develop/unity/quickstart-android).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
