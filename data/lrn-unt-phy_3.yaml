- en: Chapter 3. Overview of Collision Matrix
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章：碰撞矩阵概述
- en: In this chapter, you will learn types of different colliders in Unity3D, which
    define the collision shape of objects in scene and their Collision Matrix.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习Unity3D中不同碰撞体的类型，它们定义了场景中对象的碰撞形状及其碰撞矩阵。
- en: 'You will learn in detail about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 你将详细了解以下主题：
- en: Collision Matrix
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碰撞矩阵
- en: Trigger Matrix
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发矩阵
- en: Layer-based Collision Matrix
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于层的碰撞矩阵
- en: By the end of this chapter, you will get knowledge about the matrix of colliders
    and their types. Using a matrix configuration of two colliding game objects, we
    will see how we can define different actions.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解碰撞体矩阵及其类型的知识。通过两个碰撞游戏对象的矩阵配置，我们将看到我们如何定义不同的动作。
- en: 'During the development with Unity3D, you will encounter with the following
    terms:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Unity3D进行开发期间，你将遇到以下术语：
- en: '**Collision Matrix**: This represents a matrix that shows which collider type
    will show a collision'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**碰撞矩阵**：这表示一个矩阵，它显示了哪种碰撞类型将显示碰撞'
- en: '**Trigger Matrix**: This represents a matrix that shows which collider type
    will fire a trigger event'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发矩阵**：这表示一个矩阵，它显示了哪种碰撞类型将触发触发事件'
- en: '**Layer-based Collision Matrix**: This represents a matrix that shows layer-based
    collision'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于层的碰撞矩阵**：这表示一个矩阵，它显示了基于层的碰撞'
- en: 'The following figure will show you the different types of matrices:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表将向您展示不同类型的矩阵：
- en: '![Overview of Collision Matrix](img/00030.jpeg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![碰撞矩阵概述](img/00030.jpeg)'
- en: Let's take a look at them in detail.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看它们。
- en: Collision Matrix 3D
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞矩阵3D
- en: You will learn about Collision Matrix for 3D development; this matrix will define
    which collider type will show collision. We can define different actions by configuring
    two colliding game objects. The following table defines the collision status of
    two colliding game objects based on the attached components. To apply Physics,
    the game object must have Rigidbodies attached. Collision Matrix here represents
    a matrix that shows which collider type will show a collision.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你将学习关于3D开发的碰撞矩阵；这个矩阵将定义哪种碰撞类型将显示碰撞。我们可以通过配置两个碰撞游戏对象来定义不同的动作。以下表格定义了基于附加组件的两个碰撞游戏对象的碰撞状态。要应用物理，游戏对象必须附加刚体。在这里，碰撞矩阵表示一个矩阵，它显示了哪种碰撞类型将显示碰撞。
- en: 'On collision, the following events will be generated (for the description,
    please check the previous chapter):'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在碰撞时，将生成以下事件（有关描述，请参阅上一章）：
- en: '`OnCollsionEnter()`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCollsionEnter()`'
- en: '`OnCollisionStay()`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCollisionStay()`'
- en: '`OnCollisionExit()`'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnCollisionExit()`'
- en: Note
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Only the collider that possesses a Rigidbody will show reaction on collision.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有具有刚体的碰撞体在碰撞时才会产生反应。
- en: 'The following figure shows the table of the Collision Matrix for 3D objects:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了3D对象的碰撞矩阵表格：
- en: '![Collision Matrix 3D](img/00031.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![碰撞矩阵3D](img/00031.jpeg)'
- en: 'Let''s see how we read the preceding table with a few examples:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一些例子来看看如何读取前面的表格：
- en: A static collider will detect collision with a Rigidbody
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个静态碰撞体将检测与刚体的碰撞
- en: A Rigidbody Collider will detect collision with static, Rigidbody, and Kinematic
    Rigidbody Colliders
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个刚体碰撞体将检测与静态、刚体和运动学刚体碰撞体的碰撞
- en: A Kinematic Rigidbody will show reaction on collision with a Rigidbody
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个运动学刚体将在与刚体碰撞时产生反应
- en: In other conditions, no collision will be detected
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在其他条件下，不会检测到碰撞
- en: Trigger Matrix
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 触发矩阵
- en: 'Trigger Matrix here represents a matrix that shows which collider type will
    fire trigger events. On trigger, the following events will be generated (for the
    description, please check the previous chapter):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，触发矩阵表示一个矩阵，它显示了哪种碰撞类型将触发触发事件。在触发时，将生成以下事件（有关描述，请参阅上一章）：
- en: '`OnTiggerEnter()`'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTiggerEnter()`'
- en: '`OnTriggerStay()`'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTriggerStay()`'
- en: '`OnTriggerExit()`'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnTriggerExit()`'
- en: Note
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Only Trigger Collider will fire trigger events.
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 只有触发碰撞体才会触发触发事件。
- en: 'The following figure shows the table of the Trigger Matrix for 3D objects:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了3D对象的触发矩阵表格：
- en: '![Trigger Matrix](img/00032.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![触发矩阵](img/00032.jpeg)'
- en: 'Let''s see how we can read the preceding table with the following examples:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下例子来看看如何读取前面的表格：
- en: The static collider will fire trigger events on collision with a Rigidbody Trigger
    Collider and Kinematic Rigidbody Collider
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态碰撞体在与刚体触发碰撞体和运动学刚体碰撞体碰撞时将触发触发事件
- en: The Rigidbody Collider will fire trigger events on collision with a static Trigger
    Collider, Rigidbody Trigger Collider, and Kinematic Trigger Collider
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刚体碰撞体将与静态触发碰撞体、刚体触发碰撞体和运动学触发碰撞体触发触发事件
- en: The Kinematic Rigidbody Collider will fire trigger events on collision with
    a static Trigger Collider, Rigidbody Trigger Collider, and Kinematic Trigger Collider
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运动学刚体碰撞体将与静态触发碰撞体、刚体触发碰撞体和运动学触发碰撞体碰撞时触发触发事件
- en: The static Trigger Collider will fire trigger events on collision with a Rigidbody
    Collider, Kinematic Rigidbody Collider, Rigidbody Trigger and Kinematic Trigger
    Collider
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态触发碰撞体在与刚体碰撞体、运动学刚体碰撞体、刚体触发和运动学触发碰撞体碰撞时将触发触发事件
- en: Matrix for 2D Objects
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2D对象的矩阵
- en: Although in Unity3D, Physics for 2D objects and 3D objects are very similar,
    there are some differences in sending messages during collision.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然在Unity3D中，2D对象和3D对象的物理非常相似，但在碰撞过程中发送消息时有一些差异。
- en: There are some important differences that we will see in the following table.
    The matrix given in this table is based on the assumption that we are using 2D
    variants of colliders and Rigidbodies.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的表格中，我们将看到一些重要的差异。这个表格中的矩阵是基于我们使用碰撞体和刚体的2D变体的假设。
- en: The table is based on instances where collision detection occurs and Collision2D
    messages are sent.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 表格基于发生碰撞检测并发送Collision2D消息的实例。
- en: '![Matrix for 2D Objects](img/00033.jpeg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![2D对象的矩阵](img/00033.jpeg)'
- en: 'Let''s see how we can read the preceding table with the following examples:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例，如何阅读前面的表格：
- en: The static collider will fire collision events on collision with a Rigidbody
    only
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态碰撞体仅在与刚体碰撞时触发碰撞事件
- en: The Rigidbody will show collision with a static collider, Rigidbody, and Kinematic
    Rigidbody Collider
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刚体将与静态碰撞体、刚体和运动学刚体碰撞体显示碰撞
- en: The Kinematic Rigidbody will fire collision events with a Rigidbody
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运动学刚体将与刚体触发碰撞
- en: 'The following figure shows instances where Trigger2D messages are sent upon
    collision:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示显示了在碰撞时发送Trigger2D消息的实例：
- en: '![Matrix for 2D Objects](img/00034.jpeg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![2D对象的矩阵](img/00034.jpeg)'
- en: 'Let''s see how we can read the preceding table with the following examples:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例，如何阅读前面的表格：
- en: The static collider will fire trigger events on collision with a Rigidbody only
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 静态碰撞体仅在与刚体碰撞时触发触发事件
- en: The Rigidbody will show collision with a static Trigger and Rigidbody Trigger
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 刚体将与静态触发和刚体触发显示碰撞
- en: The Kinematic Rigidbody will fire collision events with a Rigidbody Trigger
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运动学刚体将与刚体触发触发碰撞事件
- en: Layers and Collision Matrix
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 层和碰撞矩阵
- en: By default, if multiple game objects are on the default layer, they will all
    collide with each other. In that case, we can say everything will collide with
    everything. In game development, often we need to decide which object will collide
    with which one. For this, we need to define a layer-specific division of game
    objects. We put each type of object in different layers. In Collision Matrix,
    for each new layer, a new column and row are added. Matrix defines the interaction
    between the layers. By default, a new layer collides with all the other layers.
    A developer needs to set up the interaction between the layers. Using a correct
    setup, we can avoid unwanted collision.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果多个游戏对象位于默认层上，它们将相互碰撞。在这种情况下，我们可以这样说，一切都会与一切碰撞。在游戏开发中，我们经常需要决定哪个对象将与哪个对象碰撞。为此，我们需要定义游戏对象层特定的划分。我们将每种类型的对象放在不同的层中。在碰撞矩阵中，对于每个新层，都会添加一个新的列和行。矩阵定义了层之间的交互。默认情况下，新层将与所有其他层碰撞。开发者需要设置层之间的交互。使用正确的设置，我们可以避免不必要的碰撞。
- en: An example of a layer-based Collision Matrix
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于层的碰撞矩阵的例子
- en: 'Let''s take a look at an example of setting Collision Matrix for layers:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一个设置层碰撞矩阵的例子：
- en: Create a new scene and name it `Layer Collision`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景，并将其命名为“层碰撞”。
- en: Create a box container game object, as shown in the following screenshot:![An
    example of a layer-based Collision Matrix](img/00035.jpeg)
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个盒子容器游戏对象，如下面的截图所示：![基于层的碰撞矩阵的例子](img/00035.jpeg)
- en: 'By default, all the objects will appear on the default layer, as shown in the
    following screenshot:'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 默认情况下，所有对象都将出现在默认层上，如下面的截图所示：
- en: '![An example of a layer-based Collision Matrix](img/00036.jpeg)'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![基于层的碰撞矩阵的例子](img/00036.jpeg)'
- en: Add and set up the Box layer for floor and wall game objects. As shown in the
    following screenshot, by clicking on **Layer**, we will see a drop-down list of
    existing layers. We can add a new layer by clicking on **Add Layer**.![An example
    of a layer-based Collision Matrix](img/00037.jpeg)
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为地板和墙壁游戏对象添加并设置盒子层。如以下截图所示，通过点击**层**，我们将看到一个现有层的下拉列表。我们可以通过点击**添加层**来添加一个新层。![基于层的碰撞矩阵示例](img/00037.jpeg)
- en: As shown in the following screenshot, we have created a new layer **Box**. By
    selecting **Box**, we can specify the layer for all the box game objects.![An
    example of a layer-based Collision Matrix](img/00038.jpeg)
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，我们已经创建了一个新的层**盒子**。通过选择**盒子**，我们可以指定所有盒子游戏对象所在的层。![基于层的碰撞矩阵示例](img/00038.jpeg)
- en: Inside the box container, add a red ball, green ball, and blue ball.![An example
    of a layer-based Collision Matrix](img/00039.jpeg)
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在盒子容器内添加一个红色球、绿色球和蓝色球。![基于层的碰撞矩阵示例](img/00039.jpeg)
- en: Similar to step 3, we add and set up different layers for the balls. As shown
    in the following screenshot, we have created layers for the red ball, green ball,
    and blue ball:![An example of a layer-based Collision Matrix](img/00040.jpeg)
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与步骤3类似，我们为球添加并设置不同的层。如以下截图所示，我们为红色球、绿色球和蓝色球创建了层：![基于层的碰撞矩阵示例](img/00040.jpeg)
- en: To set up collision rules for game objects, let's open **Matrix**. As shown
    in the following screenshot, navigate to **Edit** | **Project Settings** and select
    **Physics**:![An example of a layer-based Collision Matrix](img/00041.jpeg)
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要为游戏对象设置碰撞规则，让我们打开**矩阵**。如以下截图所示，导航到**编辑** | **项目设置**并选择**物理**：![基于层的碰撞矩阵示例](img/00041.jpeg)
- en: As shown in the following screenshot, a collision table will be shown in the
    **Inspector** panel. By default, every object will collide with every another
    object.![An example of a layer-based Collision Matrix](img/00042.jpeg)
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，将在**检查器**面板中显示一个碰撞表。默认情况下，每个对象都会与另一个对象发生碰撞。![基于层的碰撞矩阵示例](img/00042.jpeg)
- en: Check and uncheck the checkboxes of matrix to set up rules, as shown in the
    following screenshot. We have set up Collision Matrix for a green ball, red ball,
    blue ball, and a box.![An example of a layer-based Collision Matrix](img/00043.jpeg)
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查和取消检查矩阵中的复选框以设置规则，如以下截图所示。我们已经为绿色球、红色球、蓝色球和盒子设置了碰撞矩阵。![基于层的碰撞矩阵示例](img/00043.jpeg)
- en: Using the preceding steps, we can set up a layer-based Collision Matrix.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的步骤，我们可以设置基于层的碰撞矩阵。
- en: Create a new JavaScript and attach it to the main camera and run the test.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的JavaScript脚本并将其附加到主相机上，然后运行测试。
- en: 'Write the following code inside this JavaScript file:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在此JavaScript文件中编写以下代码：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Using the preceding script, you can check which objects are colliding with one
    another and for how long.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面的脚本，你可以检查哪些对象正在相互碰撞以及持续了多长时间。
- en: Collision Matrix and a script
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 碰撞矩阵和脚本
- en: Let's see how we can ignore collision for specific objects using a script. Often,
    in interactive development, we need to set up rules for collision between objects.
    For example, we need to set up a rule where projectiles should not collide with
    the objects shooting them. Although, using custom layer-based collision on GUI,
    we can define a layer-based game objects collision rule, we also can handle it
    using a script. We can use `IgnoreCollision` Physics of Unity3D for creating Collision
    Matrix.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用脚本忽略特定对象的碰撞。在交互式开发中，我们通常需要设置对象之间的碰撞规则。例如，我们需要设置一个规则，使弹射物不会与发射它们的对象发生碰撞。尽管使用基于自定义层的GUI碰撞，我们可以定义基于层的游戏对象碰撞规则，但我们也可以使用脚本处理它。我们可以使用Unity3D的`IgnoreCollision`物理功能来创建碰撞矩阵。
- en: Note
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Limitation of IgnoreCollision**'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**忽略碰撞的限制**'
- en: Collision Matrix does not store the state when saving the scene and we can apply
    only on active game objects.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 碰撞矩阵在保存场景时不会存储状态，我们只能应用于活动游戏对象。
- en: An example of a script-based Collision Matrix
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基于脚本的碰撞矩阵示例
- en: 'The following is the example of a script-based Collision Matrix:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是基于脚本的碰撞矩阵的示例：
- en: Create a new scene and name it `Script-Collision-Matrix`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的场景并将其命名为`Script-Collision-Matrix`。
- en: Create a wall using **Plane**.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**平面**创建一个墙壁。
- en: Create a **Bullet** game object.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个**子弹**游戏对象。
- en: Create a shooting object. Now, we need to set up a rule that a bullet should
    not collide with the shooting object.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个射击对象。现在，我们需要设置一个规则，使子弹不应与射击对象发生碰撞。
- en: 'Create a script and attach it to the main camera object. Add the following
    code to the script:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个脚本并将其附加到主摄像机对象上。将以下代码添加到脚本中：
- en: '[PRE1]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Run and test the script, you will see that a bullet is ignoring collision with
    the shooting object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 运行并测试脚本，你会看到子弹正在忽略与射击对象的碰撞。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about different Collision Matrix and Trigger Matrix
    for 2D and 3D game objects. You also learned how we can set up a layer-based Collision
    Matrix and how we handle it with the scripts. In the next chapter, you will learn
    about Rigidbodies and their behaviors. The next chapter serves as a detailed description
    and will give you the uses and types of different Rigidbodies in Unity3D, which
    will covering topics such as Physics Rigidbody, Kinematic Rigidbody, and the properties
    of a Rigidbody.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了关于2D和3D游戏对象的不同的碰撞矩阵和触发矩阵。你还学习了我们如何设置基于层的碰撞矩阵，以及我们如何通过脚本处理它。在下一章中，你将学习关于刚体及其行为的内容。下一章将作为详细描述，并会向你介绍Unity3D中不同刚体的用途和类型，这将涵盖如物理刚体、运动学刚体以及刚体的属性等主题。
