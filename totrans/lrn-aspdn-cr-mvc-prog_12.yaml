- en: Chapter 12. ASP.NET Core Identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is essential to all types of applications, including web applications.
    Would you use Facebook if anyone could update your status by impersonating you?
    If that were possible, then no one would come back to Facebook. From this example,
    we can see that security is not so much a feature as it is a necessity for all
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET Identity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement security in an ASP.NET Core application using ASP.NET Identity
    with Entity Framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we talk about the security of an application, we primarily want to prevent
    any unauthorized access, meaning that only the people who have access to the information
    should be able to access it—nothing more, nothing less.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding further, I would like to clarify some of the core concepts
    regarding security.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is the process of validating whether the user has access to the
    system. In any application, users will be authenticated first. This can be achieved
    by asking the user to enter their user ID and password.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authorization is the process where we verify whether the user has access to
    the requested resource. They might have legitimate access to the system, but they
    might not have access to the requested resource as they do not have the required
    access. For example, only the admin user can access the configuration page of
    the application, whereas normal users should not be allowed to use this page.
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Identity provides several features for securing the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us consider the following simple scenario where the user tries to access
    the **Secure Page** , a page to which only authorized people should have access.
    As the user is not logged in, they will be redirected to the **Login Page** so
    that we can authenticate and authorize the user. Upon successful authentication,
    the user is redirected to the **Secure Page** . If for any reason, we can not
    authenticate and authorize the user, we can redirect them to the **"Access denied"
    Page** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Authorization](img/Image00230.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'ASP.NET Core Identity is a membership system that enables you to secure the
    application easily, and which has features such as adding login functionality
    to your application. The following are the steps that we need to follow in order
    to use **ASP.NET Identity** (with Entity Framework) for our application:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the relevant dependencies to the `project.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `appsettings.json` file and store the database connection string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an `ApplicationUser` class and `ApplicationDbContext` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the application to use ASP.NET Identity.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create ViewModels for registration and login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create the necessary controller and associated action methods and Views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the relevant dependencies to the project.json file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to use ASP.NET Identity with Entity Framework in your application,
    you need to add the following dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Create an `appsettings.json` file and store the database connection string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file with the name `appsettings.json` at the root level of the project,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding the relevant dependencies to the project.json file](img/Image00231.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Store the following connection string in `appsettings.json` . This connection
    string will be used by ASP.NET Identity to store the data in relevant tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Adding ApplicationUser and ApplicationDbContext classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a **Models** folder and a couple of files— **ApplicationDbContext.cs**
    and **ApplicationUser.cs—** as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding ApplicationUser and ApplicationDbContext classes](img/Image00232.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `ApplicationUser` class inherits from the `IdentityUser` class (available
    at the `AspNet.Identity.EntityFramework6` namespace) as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can add properties to the user as per the needs of your application. I have
    not added any properties as I would like to keep things simple to show the features
    of ASP.NET Identity.
  prefs: []
  type: TYPE_NORMAL
- en: The `ApplicationDbContext` class inherits from the `IdentityDbContext` class
    of `ApplicationUser` . In the constructor method, we pass the `connectionstring`
    , which is eventually passed to the base class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even the `OnModelCreating` method is overridden. If you want to change any
    table names (to be generated by Identity), you can do so as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Once we create the `Models` file, we need to configure the application and services.
    You can configure these in `Configure` and `ConfigureServices` , which are found
    in the `Startup` class.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the application to use Identity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to use Identity, we just need to add the following line in the `Configure`
    method of the `Startup` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The complete `Configure` method is shown in the following code, along with
    the call of the `UseIdentity` method, which is `app.UseIdentity()` :'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `ConfigureServices` method, we will make the following changes:'
  prefs: []
  type: TYPE_NORMAL
- en: We will add the `ApplicationDbContext` class with the connection string taken
    from the `appsettings.json` file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will add Identity with `UserStore` and `RoleStore`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will ask ASP.NET Core to return `AuthMessageSender` whenever we
    ask for the `IEmailSender` and `ISMSSender` classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating ViewModels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we will be creating several ViewModels that we will be using in our Views
    model.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, we will create a `RegisterViewModel` class that contains three
    properties—`Email` , `Password` , and `ConfirmPassword` . We decorate the properties
    with appropriate attributes so that we can use client-side validation using an
    unobtrusive jQuery validation. We are making all the fields required as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we can create the `LoginViewModel model` , which the user can use to log
    in to your application. There is an additional property, `RememberMe` , which,
    when checked, will enable you to log in without having to enter the password again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Creating Controllers and associated action methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we need to create an `AccountController` class, where we will define the
    action methods for authentication and authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we are using services provided by different components.
    `UserManager` and `SignInManager` are provided by ASP.NET Identity. The `IEmailSender`
    and `ISmsSender` are custom classes that we have written which will be used for
    sending e-mails and SMS messages. We will look more at e-mail and SMS later in
    this chapter. Logging is provided by the Microsoft Logging extension. The following
    is a simple login `HTTPGET` method. It simply stores the URL from where the `Login`
    method is accessed and returns the login page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Creating Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create respective View page for the login. In this View page,
    we are just showing the following details:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![Creating Views](img/Image00233.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When the user logs into the application for the first time, they might not
    have any login credentials, so our application should provide a feature that they
    can use to create a login for themselves. We will create a simple `Register` action
    method that will just return a View with which the user can register themselves:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also create the corresponding View that contains input controls for
    e-mail, password, password confirmation, and a `Register` button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the corresponding `POST` action method for registration. Here,
    the program checks whether the model is valid, and, if it is valid, it will create
    an `ApplicationUser` object using the model data and call the Identity API (the
    `CreateAsync` method). If it can create the `user` variable, the user will log
    in using that user ID and be redirected to the `Home` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The log-out functionality is pretty simple. It just needs to call the `SignoutAsync`
    method of Identity API and be redirected to the `Index` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Coming back to the log-in functionality, the following is the respective action
    method. We are calling the `PasswordSignInAsync` method of Identity API. Upon
    a successful login, we redirect the URL from where the log-in functionality is
    accessed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: E-mail and SMS services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to add e-mail and SMS services to your application''s authentication
    capabilities, you can do so by creating the interfaces and classes shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Securing an action method in a Controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the sake of explanation, let us assume that the **About** page is a secure
    page and only authenticated users should be able to access it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We just have to decorate the `About` action method in the `Home` controller
    with an`[Authorize]` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Making the preceding change will redirect the user to the log-in page when
    the user tries to access the log-in page without logging in to the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing an action method in a Controller](img/Image00234.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the following screenshot, you will notice an additional query parameter,
    `ReturnURL,` in the URL. This `ReturnURL` parameter will redirect the application
    to that specific page (the value passed in the `ReturnURL` parameter— **Home**
    / **About** in our case).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you log in, you''ll be redirected to the page that you requested earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing an action method in a Controller](img/Image00235.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you register a new user, the details of the user will be stored in the
    relevant tables created by ASP.NET Identity.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the SQL Server Object Explorer window by selecting the option **View**
    | **SQL Server Object Explorer** , as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing an action method in a Controller](img/Image00236.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you select the **SQL Server Object Explorer** option, you will see a window
    similar to the following screenshot. ASP.NET Identity creates a database for us
    by using Entity Framework and the connection string that we provided earlier in
    the `appsettings.json` package.
  prefs: []
  type: TYPE_NORMAL
- en: 'ASP.NET Identity creates several tables to maintain identity-related information
    and the database migration history of Entity Framework. As we are using ASP.NET
    Identity at the basic level, none of the identity-related tables will get populated,
    apart from  **dbo.AspNetUsers** .:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing an action method in a Controller](img/Image00237.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can right-click on the **dbo.AspNetUsers** table and select **View Data**
    to see the data:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Securing an action method in a Controller](img/Image00238.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As only one user has been registered in our application, only one row has been
    created. Please note that the hashed password (marked by ASP.NET Identity for
    us) and no blank passwords will get stored in the table.
  prefs: []
  type: TYPE_NORMAL
- en: 读累了记得休息一会哦~
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**公众号：古德猫宁李**'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书单分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 书友学习交流
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**网站：**[沉金书屋 https://www.chenjin5.com](https://www.chenjin5.com)'
  prefs: []
  type: TYPE_NORMAL
- en: 电子书搜索下载
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 电子书打包资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 学习资源分享
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about authentication and authorization. We also
    learned how to implement ASP.NET Identity in an ASP.NET Core application by following
    a step-by-step process. We also discussed the tables involved in ASP.NET Identity
    and learned how to see the data created by ASP.NET Identity.
  prefs: []
  type: TYPE_NORMAL
