["```cs\npublic FlightInfo? GetFlight(string id, string apiKey) {\n  RestRequest request = new($\"/flights/{id.ToLower()}\");\n  request.AddHeader(\"x-api-key\", apiKey);\n  LogApiCall(request.Resource);\n  return _client.Get<FlightInfo?>(request);\n}\n```", "```cs\npublic FlightInfo? GetFlight(string id, string apiKey) {\n  if (string.IsNullOrEmpty(apiKey)) {\n    throw new ArgumentNullException(\"apiKey\");\n  }\n  if (string.IsNullOrEmpty(id)) {\n    throw new ArgumentNullException(\"id\");\n  }\n  if (!id.StartsWith(\"CSA\",\n                     StringComparison.OrdinalIgnoreCase)) {\n    throw new ArgumentOutOfRangeException(\"id\", \"Cannot\n        lookup non-CSA flights\");\n  }\n  RestRequest request = new($\"/flights/{id.ToLower()}\");\n  request.AddHeader(\"x-api-key\", apiKey);\n  LogApiCall(request.Resource);\n  return _client.Get<FlightInfo?>(request);\n}\n```", "```cs\nthrow new ArgumentNullException(\"apiKey\");\n```", "```cs\npublic FlightInfo? GetFlight(string id, string apiKey) {\n  if (string.IsNullOrEmpty(apiKey)) {\n    throw new ArgumentNullException(nameof(apiKey));\n  }\n```", "```cs\npublic FlightInfo? GetFlight(string id, string apiKey) {\n  ArgumentException.ThrowIfNullOrEmpty(id, nameof(id));\n```", "```cs\npublic Flights GetFlightsByMiles(int maxMiles,\n  string apiKey) {\n  Guard.Against.NegativeOrZero(maxMiles);\n  Guard.Against.NullOrWhiteSpace(apiKey);\n  // Other logic omitted…\n}\n```", "```cs\npublic static void LogApiCall(string url,\n  [CallerFilePath] string file = \"\",\n  [CallerLineNumber] int line = 0,\n  [CallerMemberName] string name = \"\",\n  [CallerArgumentExpression(nameof(url))] string expr = \"\")\n{\n  Console.WriteLine($\"Making API Call to {url}\");\n  Console.WriteLine(\"Called in:\");\n  Console.WriteLine($\"{file}:{line} at {name}\");\n  Console.WriteLine($\"Url expression: {expr}\");\n}\n```", "```cs\npublic IEnumerable<FlightInfo> GetFlightsByMiles(\n  int maxMiles, string apiKey) {\n  // Validation omitted...\n  string url = $\"/flights/uptodistance/{maxMiles}\";\n  RestRequest request = new(url);\n  request.AddHeader(\"x-api-key\", apiKey);\n  LogApiCall(request.Resource);\n  IEnumerable<FlightInfo>? response =\n    _client.Get<IEnumerable<FlightInfo>>(request);\n  return response ?? Enumerable.Empty<FlightInfo>();\n}\n```", "```cs\nMaking API Call to /flights/uptodistance/500\nCalled in:\nC:\\RefactorBook\\Chapter10\\CloudySkiesFlightProvider.cs:51\n  at GetFlightsByMiles\nUrl expression: request.Resource\n```", "```cs\nLogApiCall(request.Resource);\n```", "```cs\nif (flight != null) {\n Console.WriteLine($\"Flight {flight.Id}: {flight.Status}\");\n}\n```", "```cs\npublic FlightInfo? GetFlight(string id, string apiKey) {\n  ArgumentException.ThrowIfNullOrEmpty(id);\n  ArgumentException.ThrowIfNullOrEmpty(apiKey);\n  RestRequest request = new($\"/flights/{id.ToLower()}\");\n  request.AddHeader(\"x-Api-key\", apiKey);\n  LogApiCall(request.Resource);\n  return client.Get<FlightInfo?>(request);\n}\n```", "```cs\npublic FlightInfo GetFlight(string id, string apiKey) {\n  ArgumentException.ThrowIfNullOrEmpty(id);\n  ArgumentException.ThrowIfNullOrEmpty(apiKey);\n  RestRequest request = new($\"/flights/{id.ToLower()}\");\n  request.AddHeader(\"x-api-key\", apiKey);\n  LogApiCall(request.Resource);\n  FlightInfo? flightInfo=_client.Get<FlightInfo?>(request);\n  if (flightInfo == null) {\nstring message = $\"Could not find flight {id}\";\n    throw new InvalidOperationException(message);\n  }\n  return flightInfo;\n}\n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Library</OutputType>\n    <TargetFramework>net8.0</TargetFramework>\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n    <RootNamespace>Packt.CloudySkiesAir</RootNamespace>\n  </PropertyGroup>\n</Project>\n```", "```cs\n#nullable disable\npublic class FlightInfo {\n    public string Id { get; set; }\n    public FlightStatus Status { get; set; }\n    public string Origin { get; set; }\n    public string Destination { get; set; }\n    public DateTime DepartureTime { get; set; }\n    public DateTime ArrivalTime { get; set; }\n    public int Miles { get; set; }\n    public override string ToString() =>\n      $\"{Id} from {Origin} to {Destination} \" +\n      $\"on {DepartureTime}. Status: {Status}\";\n}\n#nullable restore\n```", "```cs\nConsole.WriteLine(\"Enter a flight #: \");\nstring id = Console.ReadLine()!;\n```", "```cs\npublic class BoardingPass {\n  public FlightInfo Flight { get; set; }\n  public string Passenger { get; set; }\n  public int Group { get; set; }\n  public string Seat { get; set; }\n}\n```", "```cs\npublic BoardingPass(FlightInfo flight, string passenger,\n  string seat, int group) {\n  ArgumentNullException.ThrowIfNull(flight);\n  ArgumentException.ThrowIfNullOrEmpty(passenger);\n  ArgumentException.ThrowIfNullOrEmpty(seat);\n  if (group < 1 || group > 8) {\n    throw new ArgumentOutOfRangeException(nameof(group));\n  }\n  Flight = flight;\n  Passenger = passenger;\n  Seat = seat;\n  Group = group;\n}\n```", "```cs\nBoardingPass p1 = new(myFlight, \"Amleth Hamlet\", \"2B\", 1);\nBoardingPass p2 = {\n  Flight = myFlight,\n  Passenger = \"Amleth Hamlet\",\n  Seat = \"2B\",\n  Group = 1\n};\n```", "```cs\npublic class BoardingPass {\n  public required FlightInfo Flight { get; init; }\n  public required string Passenger { get; init; }\n  public required int Group { get; init; }\n  public required string Seat { get; init; }\n}\n```", "```cs\npublic class BoardingPass(string Passenger) {\n  public required FlightInfo Flight { get; init; }\n  public required int Group { get; init; }\n  public required string Seat { get; init; }\n  public override string ToString() =>\n    $\"{Passenger} in group {Group} \" +\n    $\"for seat {Seat} of {Flight.Id}\";\n}\n```", "```cs\npublic class BoardingPass {\n  public BoardingPass(string passenger) {\n    this.Passenger = passenger;\n  }\n  public string Passenger {get; init; }\n  // Other members omitted for brevity...\n}\n```", "```cs\npublic class BoardingPass(string Passenger) {\n  public BoardingPass(FlightInfo flight, string passenger)\n: this(passenger) {\n    Flight = flight;\n  }\n  // other members omitted for brevity...\n}\n```", "```cs\nBoardingPass pass1 = new(\"Amleth Hamlet\") {\n    Flight = nextFlight,\n    Seat = \"2B\",\n    Group = 2\n};\nBoardingPass pass2 = new(\"Amleth Hamlet\") {\n    Flight = nextFlight,\n    Seat = \"2B\",\n    Group = 2\n};\nConsole.WriteLine(pass1 == pass2); // false\n```", "```cs\npublic record class BoardingPass(string Passenger) {\n  public required FlightInfo Flight { get; init; }\n  public required int Group { get; init; }\n  public required string Seat { get; init; }\n  public override string ToString() =>\n    $\"{Passenger} in group {Group} \" +\n    $\"for seat {Seat} of {Flight.Id}\";\n}\n```", "```cs\nBoardingPass pass1 = new(\"Amleth Hamlet\") {\n    Flight = nextFlight,\n    Seat = \"2B\",\n    Group = 2\n};\nBoardingPass pass2 = new(\"Amleth Hamlet\") {\n    Flight = nextFlight,\n    Seat = \"2B\",\n    Group = 2\n};\nConsole.WriteLine(pass1 == pass2); // true\n```", "```cs\nBoardingPass pass = new(\"Amleth Hamlet\") {\n    Flight = nextFlight,\n    Seat = \"2B\",\n    Group = 2\n};\nBoardingPass newPass = pass with { Seat = \"3B\" };\n```", "```cs\nBoardingPass newPass2 = pass with {Seat = \"3B\", Group = 1};\n```", "```cs\nList<BoardingPass> passes = PassGenerator.Generate();\nforeach (BoardingPass pass in passes) {\n  if (pass is { Group: 1 or 2 or 3,\n                Flight.Status: FlightStatus.Pending\n}) {\n    Console.WriteLine($\"{pass.Passenger} board now\");\n  } else if (pass is { Flight.Status: FlightStatus.Active\n                       or FlightStatus.Completed\n                     }) {\n    Console.WriteLine($\"{pass.Passenger} flight missed\");\n  } else {\n    Console.WriteLine($\"{pass.Passenger} please wait\");\n  }\n}\n```", "```cs\nList<BoardingPass> passes = PassGenerator.Generate();\nforeach (BoardingPass pass in passes) {\nstring message = pass switch {\n    { Flight.Status: FlightStatus.Pending,\n      Group: 1 or 2 or 3 }\n      => $\"{pass.passenger} board now\",\n    { Flight.Status: not FlightStatus.Pending }\n      => $\"{pass.passenger} flight missed\",\n      _ => $\"{pass.passenger} please wait\",\n  };\n  Console.WriteLine(message);\n}\n```", "```cs\npublic class FlightDictionary {\n  private readonly Dictionary<string, FlightInfo> _items =\n    new();\n  public bool Contains(string identifier)\n    => _items.ContainsKey(identifier);\n  public void AddItem(string id, FlightInfo item) {\n    Console.WriteLine($\"Adding {id}\");\n    _items[id] = item;\n  }\n  public FlightInfo? GetItem(string id) {\n    if (Contains(id)) {\n      Console.WriteLine($\"Found {id}\");\n      return _items[id];\n    }\n    Console.WriteLine($\"Could not find {id}\");\n    return null;\n  }\n}\n```", "```cs\npublic class BoardingPassDictionary {\n  private readonly Dictionary<string, BoardingPass> _items\n    = new();\n  public bool Contains(string identifier)\n    => _items.ContainsKey(identifier);\n  public void AddItem(string id, BoardingPass item) {\n    Console.WriteLine($\"Adding {id}\");\n    _items[id] = item;\n  }\n  public BoardingPass? GetItem(string id) {\n    if (Contains(id)) {\n      Console.WriteLine($\"Found {id}\");\n      return _items[id];\n    }\n    Console.WriteLine($\"Could not find {id}\");\n    return null;\n  }\n}\n```", "```cs\npublic class LoggingDictionary<TKey, TValue> {\n  private readonly Dictionary<TKey, TValue> _items\n    = new();\n  public bool Contains(TKey identifier)\n    => _items.ContainsKey(identifier);\n  public void AddItem(TKey id, TValue item) {\n    Console.WriteLine($\"Adding {id}\");\n    _items[id] = item;\n  }\n  public TValue? GetItem(TKey id) {\n    if (Contains(id)) {\n      Console.WriteLine($\"Found {id}\");\n      return _items[id];\n    }\n    Console.WriteLine($\"Could not find {id}\");\n    return default(TValue);\n  }\n}\n```", "```cs\nLoggingDictionary<string, BoardingPass> passDict = new();\nLoggingDictionary<string, FlightInfo> flightDict = new();\n```", "```cs\npublic IEnumerable<FlightInfo> GetFlightsByMiles(\n  int maxMiles, string apiKey) {\n  RestRequest request =\n    new($\"/flights/uptodistance/{maxMiles}\");\n  request.AddHeader(\"x-api-key\", apiKey);\n  LogApiCall(request.Resource);\n  IEnumerable<FlightInfo>? response =\n    _client.Get<IEnumerable<FlightInfo>>(request);\n  return response ?? Enumerable.Empty<FlightInfo>();\n}\n```", "```cs\nusing Flights = System.Collections.Generic.IEnumerable<\nPackt.CloudySkiesAir.Chapter10.FlightInfo>;\n```", "```cs\npublic Flights GetFlightsByMiles(int maxMiles,\n  string apiKey) {\n  RestRequest request =\n    new($\"/flights/uptodistance/{maxMiles}\");\n  request.AddHeader(\"x-api-key\", apiKey);\n  LogApiCall(request.Resource);\n  Flights? response = _client.Get<Flights>(request);\n  return response ?? Enumerable.Empty<FlightInfo>();\n}\n```"]