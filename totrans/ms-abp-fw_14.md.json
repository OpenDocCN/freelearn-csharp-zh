["```cs\npublic class EventAppService : ApplicationService,\n    IEventAppService\n{\n    ...\n    [Authorize]\n    public async Task AddSessionAsync(Guid id,\n                                      AddSessionDto input)\n    {\n        var @event = await _eventRepository.GetAsync(id);\n        @event.AddSession(\n            input.TrackId, GuidGenerator.Create(),\n            input.Title,\n            input.StartTime, input.EndTime,\n            input.Description, input.Language\n        );\n        await _eventRepository.UpdateAsync(@event);\n    }\n}\n```", "```cs\n[Authorize]\npublic async Task<EventDto> CreateAsync(CreateEventDto \n                                        input)\n{\n    var organization = await _organizationRepository\n        .GetAsync(input.OrganizationId);\n    if (organization.OwnerUserId != CurrentUser.GetId())\n    {\n        throw new AbpAuthorizationException(\n        L[“EventHub:\n          NotAuthorizedToCreateEventInThisOrganization”,\n          organization.DisplayName]\n        );\n    }\n    var @event = await _eventManager.CreateAsync(\n        organization, input.Title,\n        input.StartTime, input.EndTime, input.Description);\n    await _eventManager.SetLocationAsync(@event,\n        input.IsOnline, input.OnlineLink, input.CountryId,\n        input.City);\n    await _eventManager.SetCapacityAsync(@event,\n                                         input.Capacity);\n    @event.Language = input.Language;\n    if (input.CoverImageContent != null &&\n        input.CoverImageContent.Length > 0)\n    {\n        await SaveCoverImageAsync(\n            @event.Id, input.CoverImageContent);\n    }\n    await _eventRepository.InsertAsync(@event);\n    return ObjectMapper.Map<Event, EventDto>(@event);\n}\n```", "```cs\npublic class AddSessionDto\n{\n    [Required]\n    [StringLength(SessionConsts.MaxTitleLength,\n        MinimumLength = SessionConsts.MinTitleLength)]\n    public string Title { get; set; }\n    [Required]\n    [StringLength(SessionConsts.MaxDescriptionLength,\n        MinimumLength = \n            SessionConsts.MinDescriptionLength)]\n    public string Description { get; set; }\n    public Guid TrackId { get; set; }\n    public DateTime StartTime { get; set; }\n    public DateTime EndTime { get; set; }\n    public string Language { get; set; }\n}\n```", "```cs\npublic async Task<EventDto> GetAsync(Guid id)\n{\n    Event eventEntity = \n        await _eventRepository.GetAsync(id);\n    return ObjectMapper.Map<Event, EventDto>(eventEntity);\n}\n```", "```cs\npublic interface IEventAppService : IApplicationService\n{\n    Task<EventDto> GetAsync(Guid id);\n    Task CreateAsync(EventDto input);\n    Task UpdateEventTimeAsync(EventDto input);\n}\n```", "```cs\npublic interface IEventAppService : IApplicationService\n{\n    Task<EventDto> GetAsync(Guid id);\n    Task CreateAsync(EventCreationDto input);\n    Task UpdateEventTimeAsync(EventTimeUpdateDto input);\n}\n```", "```cs\npublic interface IEventAppService : IApplicationService\n{\n    Task<EventDto> CreateAsync(CreateEventDto input);\n    Task<EventDto> GetAsync(Guid id);\n    Task<List<EventDto>> GetListAsync(PagedResultRequestDto \n                                      input);\n    Task<EventDto> AddSessionAsync(Guid id, \n                                  AddSessionDto input);\n}\n```", "```cs\n[Authorize]\npublic async Task JoinAsync(Guid organizationId)\n{\n    var organization = await _organizationRepository\n        .GetAsync(organizationId);\n    var user = await\n        _userRepository.GetAsync(CurrentUser.GetId());    \n    await _organizationMembershipManager.JoinAsync(\n        organization, user);\n}\n```"]