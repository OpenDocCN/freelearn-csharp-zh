- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have worked on distributed applications, infrastructure, or client libraries,
    you’ve likely encountered numerous ways in which distributed systems can break.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a default retry policy on your service can bring it down along
    with all its dependencies. Race conditions can lead to deadlocks under certain
    load or result in data leak between user accounts. User operations that usually
    take milliseconds can significantly slow down, while service dashboards show no
    signs of other issues. Functional problems can cause obscure and inexplicable
    effects on the user’s end.
  prefs: []
  type: TYPE_NORMAL
- en: When working with distributed applications, we rely on telemetry to assess their
    performance and functionality. We need even more telemetry to identify and mitigate
    issues.
  prefs: []
  type: TYPE_NORMAL
- en: In the past, we relied on custom logs and metrics collected using vendor-specific
    SDKs. We built custom parsers, processing pipelines, and reporting tools to make
    telemetry usable.
  prefs: []
  type: TYPE_NORMAL
- en: However, as applications have become more complex, we require better and more
    user-friendly approaches to understand what is happening in our systems. Personally,
    I find it unproductive to read through megabytes of logs or visually detect anomalies
    in metrics.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed tracing is a technique that allows us to trace operations throughout
    the entire system. It provides correlation and causation to our telemetry, enabling
    us to retrieve all the relevant data describing a specific operation or find all
    operations based on the context, such as a requested resource or a user identifier.
  prefs: []
  type: TYPE_NORMAL
- en: Distributed tracing alone is not enough; we need other telemetry signals such
    as metrics, events, logs, and profiles, as well as libraries to collect and export
    them to observability backends. Fortunately, we have OpenTelemetry for this purpose.
    OpenTelemetry is a cloud-native, vendor-neutral telemetry platform available in
    multiple programming languages. It offers the core components necessary to collect
    custom data along with instrumentation libraries for common technologies. OpenTelemetry
    standardizes telemetry formats for different signals ensuring correlation, consistency,
    and structure in the collected data.
  prefs: []
  type: TYPE_NORMAL
- en: By leveraging consistent and structured telemetry, different observability vendors
    can provide tools such as service maps, trace visualizations, error classification,
    and detection of common properties contributing to failures. This essentially
    allows us to automate the error-prone and tedious parts of performance analysis
    that humans struggle with. Monitoring and debugging techniques can now become
    standardized practices across the industry, no longer relying on tribal knowledge,
    runbooks, or outdated documentation.
  prefs: []
  type: TYPE_NORMAL
- en: '*Modern Distributed Tracing in .NET* explores all aspects of telemetry collection
    in .NET applications, with a focus on distributed tracing and performance analysis.
    It begins with an overview of the observability challenges and solutions and then
    delves into the built-in monitoring capabilities offered by modern .NET applications.
    These capabilities become even more impressive when used alongside OpenTelemetry.
    While shared OpenTelemetry instrumentation libraries can take us a long way, sometimes
    we still need to write custom instrumentations. The book shows how to collect
    custom traces, metrics, and logs while considering performance impact and verbosity.
    It also covers the instrumentation of common cloud patterns such as network calls,
    messaging, and database interactions. Finally, it discusses the organizational
    and technical aspects of implementing and evolving observability in existing systems.'
  prefs: []
  type: TYPE_NORMAL
- en: The observability field is still relatively new and rapidly evolving, which
    means there are often multiple solutions available for almost any problem. This
    book aims to explain fundamental observability concepts and provides several possible
    solutions to common problems while highlighting the associated trade-offs. It
    also helps you gain practical skills to implement and leverage tracing and observability.
  prefs: []
  type: TYPE_NORMAL
- en: I hope you find the provided examples useful and use them as a playground for
    experimentation. I encourage you to explore new and creative approaches to making
    distributed systems more observable and to share your findings with the community!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for software developers, architects, and system operators running
    .NET services who want to use modern observability tools and standards. It offers
    a holistic approach to performance analysis and end-to-end debugging. Software
    testers and support engineers will also find this book useful. Basic knowledge
    of the C# programming language and the .NET platform is assumed for grasping the
    examples of manual instrumentation, but is not necessary.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19423_01.xhtml#_idTextAnchor016), *Observability Needs of Modern
    Applications*, provides an overview of common monitoring techniques and introduces
    distributed tracing. It covers OpenTelemetry – a vendor-agnostic telemetry platform
    and shows how it addresses observability challenges of distributed applications
    with correlated telemetry signals.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19423_02.xhtml#_idTextAnchor038), *Native Monitoring in .NET*,
    offers an overview of the diagnostic capabilities provided by .NET out-of-the-box.
    These capabilities include structured and correlated logs and counters along with
    ad-hoc monitoring with the dotnet-monitor tool. We’ll also instrument the first
    application with OpenTelemetry and get hands-on experience with distributed tracing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19423_03.xhtml#_idTextAnchor052), *The .NET Observability Ecosystem*,
    explores a broader set of tracing instrumentations and environments. We’ll learn
    how to find and evaluate instrumentation libraries, get traces from infrastructure
    such as Dapr, and finally instrument serverless applications using AWS Lambda
    and Azure Functions as examples.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19423_04.xhtml#_idTextAnchor068), *Low-Level Performance Analysis
    with Diagnostic Tools*, provides an introduction into lower-level .NET diagnostics
    and performance analysis. We’ll see how to collect and analyze runtime counters
    and performance traces to get more observability within the process when distributed
    tracing does not provide enough input.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19423_05.xhtml#_idTextAnchor083), *Configuration and Control
    Plane*, provides an overview of OpenTelemetry configuration and customization.
    We’ll explore different sampling strategies and learn how to enrich and filter
    spans or customize metrics collection. Finally, we’ll introduce OpenTelemetry
    Collector – an agent that can take care of many telemetry post-processing tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19423_06.xhtml#_idTextAnchor098), *Tracing Your Code*, dives
    into tracing instrumentation with .NET tracing APIs or OpenTelemetry shim. Here,
    we’ll learn about the `Activity` and `ActivitySource` classes used to collect
    spans, show how to leverage ambient context propagation within the process, and
    record events and exceptions. We’ll also cover integration testing for your instrumentation
    code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B19423_07.xhtml#_idTextAnchor115), *Adding Custom Metrics*, delves
    into the modern .NET metrics API. You’ll learn about available instruments - counters,
    gauges, and histograms used to aggregate measurements in different ways and get
    hands-on experience implementing and using metrics to monitor system health or
    to investigate performance issues.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B19423_08.xhtml#_idTextAnchor131), *Writing Structured and Correlated
    Logs*, provides an overview of logging in .NET focusing on `Microsoft.Extension.Logging`.
    We’ll learn to write structured and queryable logs efficiently and collect them
    with OpenTelemetry. We’ll also look into managing logging costs using OpenTelemetry
    Collector.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B19423_09.xhtml#_idTextAnchor148), *Best Practices*, provides
    guidance on choosing most suitable telemetry signals depending on application
    needs and scenarios, and shows how to control telemetry costs with minimal impact
    on observability. It also introduces OpenTelemetry semantic conventions – telemetry
    collection recipes for common patterns and technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B19423_10.xhtml#_idTextAnchor161), *Tracing Network Calls*,
    explores network call instrumentation using gRPC as an example. We’ll learn how
    to instrument simple request-response calls following RPC semantic conventions
    and propagate context. We’ll also cover challenges and possible solutions when
    instrumenting streaming calls.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B19423_11.xhtml#_idTextAnchor174), *Instrumenting Messaging
    Scenarios*, explores instrumentation for asynchronous processing scenarios. We’ll
    learn how to trace messages end-to-end, instrument batching scenarios, and introduce
    messaging-specific metrics allowing to detect scaling and performance issues.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B19423_12.xhtml#_idTextAnchor192), *Instrumenting Database Calls*,
    explores database and cache instrumentation with tracing and metrics. We’ll also
    cover forwarding external metrics from a Redis instance into our observability
    backend and use the collected telemetry for performance analysis and caching strategy
    optimization.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B19423_13.xhtml#_idTextAnchor206), *Driving Change*, covers
    organizational and planning aspects related to observability improvements. We’ll
    discuss the cost of low observability and suggest several ways to measure them.
    We’ll come up with an onboarding plan, talk about common pitfalls, and see how
    to benefit from better observability in daily development tasks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B19423_14.xhtml#_idTextAnchor220), *Creating Your Own Conventions*,
    provides suggestions on how to collect telemetry consistently across the system
    starting with a unified OpenTelemetry configuration. We’ll also learn to define
    custom semantic conventions and implement them in shared code, making it easy
    to follow them.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B19423_15.xhtml#_idTextAnchor233), *Instrumenting Brownfield
    Applications*, discusses challenges with instrumenting newer part of the system
    in presence of legacy services. We’ll suggest solutions that can minimize changes
    to legacy components and learn to leverage legacy correlation propagation formats,
    implement minimalistic pass-through context propagation, and forward telemetry
    from legacy services to the new backend.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples in this book were developed with .NET 7.0\. Most of them are cross-platform
    and run in Docker Linux containers or with the `dotnet` CLI tools. Examples were
    tested on Windows OS with OpenTelemetry version 1.4.0\. They should work with
    future versions of .NET and OpenTelemetry libraries. We use pinned versions of
    OpenTelemetry Collector, Prometheus, Jaeger, and other external images in the
    `docker-compose` files.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 3*](B19423_03.xhtml#_idTextAnchor052), *The .NET Observability
    Ecosystem*, we will experiment with AWS and Azure client libraries and serverless
    environments. AWS and/or Azure subscriptions are recommended, but not essential.
    We will stay within the free tier on AWS and within promotional credits amount
    available on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: '| **Software/hardware covered in** **the book** | **Operating** **system requirements**
    |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| .NET SDK 7.0 | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| OpenTelemetry for .NET version 1.4.0 | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| Docker and `docker-compose` tools | Windows, macOS, or Linux |'
  prefs: []
  type: TYPE_TB
- en: '| .NET Framework 4.6.2 (used in an example of a legacy system in [*Chapter
    15*](B19423_15.xhtml#_idTextAnchor233)) | Windows |'
  prefs: []
  type: TYPE_TB
- en: '| PerfView tool (in [*Chapter 4*](B19423_04.xhtml#_idTextAnchor068)) | Windows,
    cross-platform alternatives are available |'
  prefs: []
  type: TYPE_TB
- en: While OpenTelemetry guarantees API compatibility in future versions, the semantic
    conventions mentioned in this book are not stable. So spans, metrics, events,
    and attributes may be renamed or changed in a different way. Please refer to OpenTelemetry
    specification repo ([https://github.com/open-telemetry/opentelemetry-specification](https://github.com/open-telemetry/opentelemetry-specification))
    to find what’s new in the semantic conventions area.
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Modern-Distributed-Tracing-in-.NET](https://github.com/PacktPublishing/Modern-Distributed-Tracing-in-.NET).
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Code in Action
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Code in Action videos for this book can be viewed at [https://packt.link/O10rj](https://packt.link/O10rj).
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://packt.link/BBBNm](https://packt.link/BBBNm).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: “Another option is to pass the `traceparent` value
    in W3C Trace Context format to the `StartActivity` method as a string.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold:** Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    “Let’s open the trace file with PerfView and then click on the **Thread** **Time**
    option.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs: []
  type: TYPE_NORMAL
- en: Once you’ve read *Modern Distributed Tracing in .NET*, we’d love to hear your
    thoughts! Scan the QR code below to go straight to the Amazon review page for
    this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: '![ Share Your Thoughts](img/B19423_QR.jpg)'
  prefs: []
  type: TYPE_IMG
- en: https://packt.link/r/1-837-63613-3
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Download a free PDF copy of this book](img/B19423_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781837636136](https://packt.link/free-ebook/9781837636136)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Part 1: Introducing Distributed Tracing'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, we’ll introduce the core concepts of distributed tracing and demonstrate
    how it makes running cloud applications easier. We’ll auto-instrument our first
    service and explore the .NET approach to observability, built around OpenTelemetry.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B19423_01.xhtml#_idTextAnchor016), *Observability Needs of Modern
    Applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B19423_02.xhtml#_idTextAnchor038), *Native Monitoring in .NET*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19423_03.xhtml#_idTextAnchor052), *The .NET Observability Ecosystem*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19423_04.xhtml#_idTextAnchor068), *Low-Level Performance Analysis
    with Diagnostic Tools*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
