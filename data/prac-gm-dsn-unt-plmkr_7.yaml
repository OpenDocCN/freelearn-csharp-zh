- en: Chapter 7. Working with External APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。与外部API协同工作
- en: In previous chapters you created a multiplayer air hockey game. One way of expanding
    it would be making more levels and mechanics for it, but you already know how
    to do that. The other way would be integrating it with different external services,
    such as analytics, online scoring platforms, and leaderboards.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，你创建了一个多人制冰球游戏。扩展它的一个方法是为它添加更多关卡和机制，但你已经知道如何做到这一点。另一种方法是将它集成到不同的外部服务中，例如分析工具、在线得分平台和排行榜。
- en: 'In this chapter we are going to talk about **application programming interfaces**
    (**APIs**). We will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论**应用程序编程接口**（**APIs**）。我们将涵盖以下主题：
- en: API—what it is and what it's used for
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API——它是什么以及它用于什么
- en: Existing useful external APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现有的有用外部API
- en: The way Unity typically communicates with external APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity通常与外部API通信的方式
- en: Integrating a game with one of the existing APIs (Kongregate)
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将游戏与现有的一个API（Kongregate）集成
- en: We will look at some code snippets that you are going to use to integrate your
    game with Kongregate, test the game online, and save the number of times the player
    wins on Kongregate's servers.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看一些代码片段，你将使用这些代码片段将你的游戏与Kongregate集成，在线测试游戏，并在Kongregate的服务器上保存玩家获胜的次数。
- en: About external application programming interfaces
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于外部应用程序编程接口
- en: In simple terms and in the context of Unity, an external API is an external
    library of code that can be accessed from a Unity script and provides some additional
    functionality to your game. Some APIs let you access the JavaScript code of the
    page your WebPlayer game is on, while others provide a possibility of transferring
    game data and getting information to remote servers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，在Unity的上下文中，外部API是一个可以从Unity脚本访问的外部代码库，它为你的游戏提供一些额外的功能。一些API允许你访问WebPlayer游戏所在的页面的JavaScript代码，而其他API则提供将游戏数据传输到远程服务器并获得信息的能力。
- en: 'You have already used one API in your air hockey game in the previous chapter:
    that of Photon Unity Networking. Most of the calls to remote servers are buried
    deep inside of its source code, but it is nevertheless an API.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的冰球游戏中，你已经使用了一个API：Photon Unity Networking。大多数对远程服务器的调用都隐藏在其源代码的深处，但它仍然是一个API。
- en: Other APIs that you might encounter include online game platforms, such as Kongregate
    and Facebook; analytics tools, such as Google Analytics and Game Analytics; and
    online data storage platforms, such as Scoreoid and Steamworks.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会遇到的其他API包括在线游戏平台，如Kongregate和Facebook；分析工具，如Google Analytics和Game Analytics；以及在线数据存储平台，如Scoreoid和Steamworks。
- en: In addition to different functions, APIs use different ways to connect to the
    external code base and different ways to communicate with it later, which may
    seem like a hard task, but rarely is. There is generally a comprehensive guide
    to the API on its website, and even when there is not the Unity community often
    comes to the rescue, putting together its own guides, template files, and code
    snippets readily available in Unity answers or forums.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了不同的功能外，APIs使用不同的方式连接到外部代码库，并在之后以不同的方式与之通信，这可能看起来像是一项艰巨的任务，但实际上很少是这样。通常，API的官方网站上会有一个全面的指南，而且即使没有，Unity社区也经常伸出援手，整理出自己的指南、模板文件和代码片段，这些都可以在Unity问答或论坛中轻松获取。
- en: We are going to integrate our game with Kongregate to show how this works and
    what kind of code you need to use. Kongregate was chosen as a fairly straightforward,
    very common, and completely free API.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把我们的游戏与Kongregate集成，以展示这是如何工作的以及你需要使用什么样的代码。Kongregate被选为一个相当直接、非常常见且完全免费的API。
- en: Uploading your game to Kongregate
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将你的游戏上传到Kongregate
- en: Before starting to use the Kongregate API, you have to see that you can actually
    upload your game to the website. To do that, you are going to need a Kongregate
    account if you do not have one yet.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始使用Kongregate API之前，你必须确认你实际上可以将你的游戏上传到网站。为此，如果你还没有，你需要一个Kongregate账户。
- en: Go to [http://kongregate.com](http://kongregate.com) and near the top of the
    page find and click the **Register** link, as shown in the following screenshot:![Uploading
    your game to Kongregate](img/8108OT_07_01.jpg)
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[http://kongregate.com](http://kongregate.com)，然后在页面顶部附近找到并点击**注册**链接，如图所示：![将你的游戏上传到Kongregate](img/8108OT_07_01.jpg)
- en: A registration form should appear, offering you to either connect using Facebook
    or enter your account information manually. Do that and click on the **Sign Up**
    button.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应该会出现一个注册表单，提供你使用Facebook连接或手动输入账户信息的选择。这样做并点击**注册**按钮。
- en: 'Now, if you go to the Kongregate main page and hover over the **GAMES** button
    just under the sign-in block of the website, a submenu should appear, divided
    into three sections: **FEATURED**, **CATEGORIES**, and **DEVELOPERS**. It is the
    last one that is of interest to us. Find the **UPLOAD A GAME** button there and
    click on it.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你转到Kongregate主页并悬停在网站登录块下面的**GAMES**按钮上，应该会出现一个子菜单，分为三个部分：**特色**、**类别**和**开发者**。对我们来说，最后一个是感兴趣的。在那里找到**上传游戏**按钮并点击它。
- en: Open Unity and make a Web build, like you did to test multiplayer in [Chapter
    6](ch06.html "Chapter 6. Networking and Multiplayer"), *Networking and Multiplayer*;
    remember where you saved it.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Unity并创建一个Web构建，就像你在[第6章](ch06.html "第6章。网络和多人游戏")中测试多人游戏时做的那样，*网络和多人游戏*；记住你保存的位置。
- en: On the Kongregate website, you now should have the game information menu. Enter
    the game's name, category, and description, then click on **Continue**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Kongregate网站上，你现在应该有游戏信息菜单。输入游戏名称、类别和描述，然后点击**继续**。
- en: The next step asks you to choose game files and upload them to Kongregate's
    server. Click on the **Choose File** button next to **Game File**, navigate to
    the folder where you saved your Web build from Unity, select the file with the
    `unity3d` extension, and click on **Open**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步要求你选择游戏文件并将它们上传到Kongregate的服务器。点击**游戏文件**旁边的**选择文件**按钮，导航到你保存Unity Web构建的文件夹，选择具有`unity3d`扩展名的文件，然后点击**打开**。
- en: In the two text fields below, enter the game's resolution (width 960 and height
    600).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下面的两个文本框中，输入游戏的分辨率（宽度960和高度600）。
- en: Upload an image as an icon. You can test, but cannot publish a game that does
    not have an icon.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传一个图标作为图标。你可以测试，但不能发布没有图标的游戏。
- en: You can also upload images as screenshots. This is not necessary, and you can
    do this later.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以上传图片作为截图。这不是必需的，你可以稍后进行。
- en: Check **This game is exclusive to Kongregate** if you are not planning to upload
    the game anywhere else. This will ensure that you get more ad profits for people
    playing your game.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你计划不上传游戏到其他任何地方，请勾选**此游戏仅限Kongregate**。这将确保你从玩你游戏的人那里获得更多的广告利润。
- en: Read the **License Agreement** and check the four checkboxes below it.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 阅读**许可协议**并勾选其下的四个复选框。
- en: The **Statistics API** section is what we are going to be using the Kongregate
    API for. Click on **Add a statistic**.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**统计API**部分是我们将要使用Kongregate API的部分。点击**添加统计**。'
- en: Set **Statistic Name** to `Wins` and select the **Add Type** radio button. This
    is the statistic type, which determines how the statistic will behave. In our
    case, we will simply add the player's wins up. If your game had a scoring system,
    you could create another statistic of **Max** type for it.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**统计名称**设置为`Wins`并选择**添加类型**单选按钮。这是统计类型，它决定了统计将如何表现。在我们的例子中，我们将简单地累加玩家的胜利次数。如果你的游戏有一个得分系统，你可以为它创建另一个**最大值**类型的统计。
- en: Check **Display in leaderboards** to make sure that the statistic shows up on
    the game's public page.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**显示在排行榜上**以确保该统计信息显示在游戏的公共页面上。
- en: Click on **Save**, then click on **Upload** on the bottom of the form.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**，然后在表单底部点击**上传**。
- en: After a short waiting period, the game should show up on your screen, being
    completely functionally playable. You can test the multiplayer mode to make sure
    that nothing has changed since you uploaded it to the server.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 短暂等待后，游戏应该出现在你的屏幕上，完全可玩。你可以测试多人模式，以确保自你上传到服务器以来没有发生变化。
- en: If everything works correctly, we should integrate our **Wins** parameter with
    the game itself. To do that, we will need to write a couple of scripts.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，我们应该将我们的**Wins**参数与游戏本身集成。为此，我们需要编写几个脚本。
- en: Writing Kongregate API code
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Kongregate API代码
- en: There are two scripts that we are going to have to make in order to get our
    **Wins** scoring parameter saved and appearing in the leaderboards. The first
    one will set up Kongregate, make sure that the game is indeed on the Kongregate
    page, and inform the game about the API connection status.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要制作两个脚本，以便将我们的**Wins**得分参数保存并显示在排行榜上。第一个脚本将设置Kongregate，确保游戏确实在Kongregate页面上，并通知游戏API连接状态。
- en: The second script is going to be about incrementing a score for the player who
    wins based on the goal the puck hits.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个脚本将涉及根据球击中的目标来增加获胜玩家的分数。
- en: 'Without any further delay, the following is the code for the handshake script,
    which is called `KongregateAPI`:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 不再拖延，以下是对话脚本`KongregateAPI`的代码：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code is fairly straightforward and does not require much explanation on
    top of the comments already given within the script. Only two things should be
    noted: `Application.ExternalEval` is what makes your Unity game communicate with
    the JavaScript of the page it is on. Unity sends a message in the form of a string
    of text to the page, which is picked up by Kongregate and interpreted as code.
    The contents of this string are using the Kongregate API, the full version of
    which can be consulted here: [http://www.kongregate.com/developer_center/docs/en/using-the-api-with-unity3d](http://www.kongregate.com/developer_center/docs/en/using-the-api-with-unity3d).
    `ExternalEval` is a very common method for accessing external APIs.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码相当直接，不需要在脚本中已有的注释之外做太多解释。只需注意两点：`Application.ExternalEval`是使你的Unity游戏与所在页面的JavaScript通信的关键。Unity以文本字符串的形式发送消息到页面，该消息被Kongregate接收并解释为代码。这个字符串的内容使用了Kongregate
    API，其完整版本可以在此查阅：[http://www.kongregate.com/developer_center/docs/en/using-the-api-with-unity3d](http://www.kongregate.com/developer_center/docs/en/using-the-api-with-unity3d)。`ExternalEval`是访问外部API的一个非常常见的方法。
- en: It is imperative that the game object your script is attached to (as well as
    the script itself) is called **KongregateAPI**. Create an empty game object in
    the **demo_lobby** scene and attach the script to it, then save the scene.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是，你的脚本附加到的游戏对象（以及脚本本身）应被称为**KongregateAPI**。在**demo_lobby**场景中创建一个空的游戏对象，并将脚本附加到它上，然后保存场景。
- en: Once the JavaScript code on the page is executed, Kongregate sends a callback
    message back to Unity. This message always takes the form of the `OnKongregateAPILoaded(string
    userInfoString)` method. This, too, is part of the API. We then separate the string
    that it gives us using the `|` symbol and save parts of it into variables.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上的JavaScript代码执行后，Kongregate会向Unity发送一个回调消息。这个消息始终以`OnKongregateAPILoaded(string
    userInfoString)`方法的形式出现。这也是API的一部分。然后我们使用`|`符号将其给出的字符串分开，并将部分内容保存到变量中。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'There is really no point in making the Kongregate API script into a Playmaker
    action, unless you don''t want to use any components other that Playmaker in your
    game, in which case I will leave it up to you to do it: the process is similar
    to that which we used in [Chapter 5](ch05.html "Chapter 5. Scripting and Custom
    Actions"), *Scripting and Custom Actions*.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将Kongregate API脚本转换为Playmaker动作没有太大意义，除非你不想在游戏中使用除Playmaker之外的其他组件，在这种情况下，我将由你来决定是否这样做：过程与我们用于[第5章](ch05.html
    "第5章。脚本和自定义动作")中的类似，即*脚本和自定义动作*。
- en: Unless you have changed something in the winning condition, the game does not
    currently distinguish between player 1 and 2 winning, and simply restarts the
    game no matter what happens. However, due to the fact that we have a multiplayer
    mode and want to save each player's wins, this does not work for us anymore. We
    are going to need to make the goal trigger into prefabs and spawn them the way
    we already spawn the goals and the mallets; then, when the puck hits one of them,
    detect if it belongs to us, and, if it does not, send the win to Kongregate.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 除非你改变了获胜条件，否则游戏目前无法区分玩家1和玩家2的胜利，无论发生什么情况，游戏都会简单地重新开始。然而，由于我们有一个多人模式并且想要保存每个玩家的胜利次数，这不再适用于我们。我们需要将目标触发器制作成预制体，并按照我们之前制作目标和球棒的方式生成它们；然后，当球击中其中一个时，检测它是否属于我们，如果不是，就将胜利信息发送到Kongregate。
- en: To begin with, let us prepare a Playmaker action that sends wins to Kongregate.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们准备一个Playmaker动作，将胜利信息发送到Kongregate。
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here `Application.ExternalCall` is used. It calls an external function in the
    page as opposed to `ExternalEval`, which evaluates a code snippet that may or
    may not contain function calls.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的是`Application.ExternalCall`。它调用页面中的外部函数，而不是`ExternalEval`，后者评估一个可能包含或可能不包含函数调用的代码片段。
- en: Tip
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: '`ExternalCall` and `ExternalEval` both only work in Unity Webplayer.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExternalCall`和`ExternalEval`都只在Unity Webplayer中工作。'
- en: 'Follow these steps in order to increment the **Wins** statistic on Kongregate:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤来增加Kongregate上的**胜利**统计：
- en: Open the **demo_room** scene.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**demo_room**场景。
- en: Create a prefab called `GoalTrigger`, then drag the **GoalTriggerLeft** game
    object to it from **Hierarchy**.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`GoalTrigger`的预制件，然后从**Hierarchy**中将**GoalTriggerLeft**游戏对象拖到它上面。
- en: Delete both **GoalTriggerLeft** and **GoalTriggerRight** game objects from the
    scene; we are going to spawn them on startup.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从场景中删除**GoalTriggerLeft**和**GoalTriggerRight**游戏对象；我们将在启动时生成它们。
- en: Select the **Game** game object and, in its **Game Manager** FSM, add a **GameObject**
    variable called **goalTriggerRef**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Game**游戏对象，并在其**Game Manager** FSM中添加一个名为**goalTriggerRef**的**GameObject**变量。
- en: Navigate to this FSM's instantiate player state. Add a new **Photon Network
    Instantiate** action to this state. Set the **Game Object** property to **GoalTrigger**,
    **Position** to `(-9`, `0.42`, `0`), **Rotation** to (`0`, `90`, `0`), and **Store
    Object** to **goalTriggerRef**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到这个有限状态机（FSM）的实例化玩家状态。向此状态添加一个新的**Photon Network Instantiate**动作。将**游戏对象**属性设置为**GoalTrigger**，**位置**设置为`(-9`,
    `0.42`, `0`)，**旋转**设置为(`0`, `90`, `0`)，并将**存储对象**设置为**goalTriggerRef**。
- en: Open the **Create Puck** state and add a **Set Position** action to it. In this
    action, set the **Game Object** property to **Specify Game Object**, then set
    it to the **goalTriggerRef** variable. Set **Vector**, **Y**, and **Z** to **None**
    and **X** to `9`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**Create Puck**状态，并向其中添加一个**Set Position**动作。在这个动作中，将**游戏对象**属性设置为**指定游戏对象**，然后将其设置为**goalTriggerRef**变量。将**向量**、**Y**和**Z**设置为**无**，将**X**设置为`9`。
- en: Now that we have set up the instantiation of our goal triggers, we need to send
    our scores to Kongregate. Select the `GoalTrigger` prefab in the Project panel
    and add a **Photon View** component to it, then drag its **Transform** component
    into the **Observe** slot of **Photon View**.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经设置了目标触发器的实例化，我们需要将我们的分数发送到Kongregate。在项目面板中选择`GoalTrigger`预制件，并向其添加一个**Photon
    View**组件，然后将它的**Transform**组件拖到**Photon View**的**观察**槽中。
- en: Add a **PlayMaker Photon GameObject Proxy** component to the prefab.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**PlayMaker Photon GameObject Proxy**组件添加到预制件中。
- en: In the **playMaker** panel, make the FSM look as shown in the following figure,
    adding all the missing states, events, and transitions.![Writing Kongregate API
    code](img/8108OT_07_02.jpg)
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**playMaker**面板中，使FSM看起来如图所示，添加所有缺失的状态、事件和转换。![编写Kongregate API代码](img/8108OT_07_02.jpg)
- en: Add a **Photon View Get Is Mine** action to the **is mine?** state. Set **Is
    Mine Event** to **YES** and **Is Not Mine Event** to **NO**, provided that you
    have created the **YES** and **NO** events in the **Events** tab before. If you
    haven't, go ahead and do it now.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**is mine?**状态添加一个**Photon View Get Is Mine**动作。将**是我的事件**设置为**YES**，将**不是我的事件**设置为**NO**，前提是在**事件**选项卡中之前已经创建了**YES**和**NO**事件。如果没有，请现在就创建它们。
- en: Add **Kongregate Send Action** to the **KongregateSend** state. This is the
    action that we created earlier.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Kongregate Send Action**添加到**KongregateSend**状态。这是我们之前创建的动作。
- en: Save the scene.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存场景。
- en: Now, if you build the game, upload it to Kongregate, play, and win, a score
    will be added. You should see a **HIGH SCORE** tab appear on the right on your
    game's page.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你构建游戏，上传到Kongregate，玩游戏并获胜，将添加分数。你应该在你的游戏页面右侧看到一个**高分**标签。
- en: If it does not, don't worry, sometimes it can take some time for the first score
    to be submitted. If you feel like there is a problem, you can see exactly what
    commands Kongregate exchanges with your game by opening the JavaScript console
    of your internet browser while on the game's page.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有这样做，请不要担心，有时提交第一个分数可能需要一些时间。如果你觉得有问题，可以在游戏页面打开互联网浏览器的JavaScript控制台，查看Kongregate与你游戏交换的命令。
- en: Once you are sure that the game is working well and the **Wins** statistic is
    being submitted properly, you can either try adding some more stats or just publish
    the game by pressing the appropriate link near the top of the page. Then you can
    test it by either sending the public link to your friends or by opening it twice
    yourself and joining the same server.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定游戏运行良好，并且**胜利**统计信息被正确提交，你可以尝试添加更多统计信息，或者只需通过点击页面顶部的适当链接来发布游戏。然后你可以通过发送公共链接给你的朋友或者自己打开两次并加入同一个服务器来测试它。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned what an external API in Unity is and what kinds
    of external APIs there are, and then added one to your game. You uploaded your
    game to Kongregate and saved a game statistic for your multiplayer air hockey
    game on Kongregate's servers.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了Unity中的外部API是什么以及有哪些类型的API，然后将其添加到你的游戏中。你将游戏上传到Kongregate，并在Kongregate的服务器上保存了你的多人空中曲棍球游戏的统计信息。
