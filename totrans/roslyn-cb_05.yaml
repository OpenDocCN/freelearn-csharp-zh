- en: Catch Security Vulnerabilities and Performance Issues in C# Code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying configuration-related security vulnerabilities in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying cross-site scripting vulnerabilities in view markup files (`.cshtml`,
    .`aspx` files) in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying insecure method calls that can lead to SQL and LDAP injection attacks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying weak password protection and management in web applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying weak validation of data from external components to prevent attacks
    such as cross-site request forgery and path tampering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying performance improvements to source code using FxCop analyzers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover two very important and popular category of Roslyn
    analyzers: security and performance analyzers.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Security**: Given the extremely large domain of .NET applications, each of
    them with very domain-specific security vulnerabilities, it is critical that we
    have a domain-specific tools/extensions to catch these vulnerabilities. Roslyn-based
    security analyzers, such as **PUMA** scan analyzers, catch these vulnerabilities
    at compile time and report diagnostics. PUMA scan analyzer rules are classified
    into the following broad categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configuration ([https://www.pumascan.com/rules.html#overview](https://www.pumascan.com/rules.html#configuration)):
    Rules to catch vulnerabilities in ASP.NET Web configuration files'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cross-site Scripting ([https://www.pumascan.com/rules.html#cross-site-scripting](https://www.pumascan.com/rules.html#cross-site-scripting)):
    Rules to catch cross-site scripting (XSS) vulnerabilities'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Injection ([https://www.pumascan.com/rules.html#injection](https://www.pumascan.com/rules.html#injection)):
    Rules to catch calls to insecure method calls to external components that can
    cause SQL injection attacks'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password Management** ([https://www.pumascan.com/rules.html#password-management](https://www.pumascan.com/rules.html#password-management)):
    Rules to catch vulnerabilities in password management components'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Validation** ([https://www.pumascan.com/rules.html#validation](https://www.pumascan.com/rules.html#validation)):
    Rules to catch weak validation and authentication of external requests, which
    can lead to malicious attacks to other users'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Performance**: Runtime performance is important for all applications, and
    there are many different aspects to it. One of the important performance criteria
    for .NET applications is the quality of MSIL or CIL ([https://en.wikipedia.org/wiki/Common_Intermediate_Language](https://en.wikipedia.org/wiki/Common_Intermediate_Language))
    generated by the .NET compilers. The quality of MSIL is governed by both the quality
    of the user code and the compiler that produces MSIL. In this chapter, we will
    walk you through the performance rules in FxCop analyzers, which are the Microsoft
    code analysis rules (*CAXXXX*) written for identifying performance improvements
    in .NET applications to generate more efficient MSIL. These rules have been ported
    to the Roslyn analyzer framework and open sourced at [https://github.com/dotnet/roslyn-analyzers](https://github.com/dotnet/roslyn-analyzers).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying configuration-related security vulnerabilities in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ASP.NET enables you to specify configuration settings that affect all Web applications
    on a server, that affect only a single application, that affect individual pages,
    or that affect individual folders in a Web application. You can make configuration
    settings for features, such as compiler options, debugging, user authentication,
    error-message display, connection strings, and more. Configuration data is stored
    in XML files that are named Web.config.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more details about different kind of configuration settings in
    the Web.config files at [https://msdn.microsoft.com/en-us/library/ff400235.aspx](https://msdn.microsoft.com/en-us/library/ff400235.aspx).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will walk you through the rules in PUMA scan analyzers to
    catch security vulnerabilities in web configuration in an ASP.NET Web Forms project.
  prefs: []
  type: TYPE_NORMAL
- en: Note that Roslyn analyzers are fully supported on both .NET framework projects
    and .NET core projects, so the PUMA scan analyzers covered here work fine on both
    ASP.NET and ASP.Net core web projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start Visual Studio and click on File | New| Project... and create a new Visual
    C# | Web | ASP.NET Web Application with the Web Forms template, say `WebApplication`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad226c58-fa64-4869-b81d-39419887b541.png)'
  prefs: []
  type: TYPE_IMG
- en: Install the `Puma.Security.Rules` analyzers NuGet package (at the time of writing,
    the latest stable version is *1.0.4*). For guidance on how to search and install
    analyzer NuGet package to a project, refer to the recipe, *Searching and installing
    analyzers through the NuGet package manager*, in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Web.config in the solution explorer and change its build action from
    Content to AdditionalFiles using the Properties window and save the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9af8e7bd-1151-4fe8-9558-64f746c36a04.png)'
  prefs: []
  type: TYPE_IMG
- en: Open Web.config in the editor and replace existing `system.web` XML element
    with the following XML. You can read more about `system.web` XML element at [https://msdn.microsoft.com/en-us/library/dayb112d(v=vs.100).aspx](https://msdn.microsoft.com/en-us/library/dayb112d(v=vs.100).aspx).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Build the project in Visual Studio or command line and verify that you get
    following *SECXXXX* warnings from the PUMA scan analyzer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the `system.web` XML element in the `Web.config` file with the following
    contents (changes are highlighted in bold):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Build the project again and verify it compiles without any security warnings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PUMA scan analyzers catch security vulnerabilities in the web configuration
    files in C# ASP.NET web projects. In the preceding recipe, we showed you different
    kinds of security vulnerabilities that are caught by the PUMA scan analyzers,
    such as insecure forms authentication, http cookies configuration, header settings,
    and so on. You can read detailed description of all web configuration-related
    security vulnerabilities identified by the PUMA scan analyzers at [https://www.pumascan.com/rules.html#configuration](https://www.pumascan.com/rules.html#configuration).
  prefs: []
  type: TYPE_NORMAL
- en: These security analyzers are written as additional file analyzers that analyze
    non-source files in the project that have been marked as `AdditionalFiles` item
    type. Users must mark the `web.config` file as an additional file in their project
    to trigger security analysis during build. You can read more about how to write
    and consume additional file analyzers at [https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md](https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying cross-site scripting vulnerabilities in view markup files (.cshtml,
    .aspx files) in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Cross-site scripting** (**XSS**) is a type of computer security vulnerability
    typically found in web applications. XSS enables attackers to inject client-side
    scripts into web pages viewed by other users. A cross-site scripting vulnerability
    may be used by attackers to bypass access controls such as the same-origin policy.
    Cross-site scripting carried out on websites accounted for roughly 84% of all
    security vulnerabilities documented by Symantec as of 2007\. Their effect may
    range from a petty nuisance to a significant security risk, depending on the sensitivity
    of the data handled by the vulnerable site and the nature of any security mitigation
    implemented by the site''s owner.'
  prefs: []
  type: TYPE_NORMAL
- en: You can read more details about cross-site scripting at [https://en.wikipedia.org/wiki/Cross-site_scripting](https://en.wikipedia.org/wiki/Cross-site_scripting).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will walk you through the rules in PUMA scan analyzers to
    catch security vulnerabilities that can lead to cross-site scripting attacks in
    an ASP.NET web project.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start Visual Studio and click on File | New| Project... and create a new Visual
    C# | Web | ASP.NET Web Application with the MVC template, say `WebApplication`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66e98811-4b2c-4298-9ca3-338328939f7a.png)'
  prefs: []
  type: TYPE_IMG
- en: Install the `Puma.Security.Rules` analyzers NuGet package (at the time of writing,
    the latest stable version is *1.0.4*). For guidance on how to search and install
    analyzer NuGet package to a project, refer to the recipe *Searching and installing
    analyzers through the NuGet package manager* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Views | _ViewStart.cshtml file and add the following text at the end of
    the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Select `_ViewStart.cshtml` in the solution explorer and change its Build Action
    from Content to AdditionalFiles using the Properties window below and save the
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new Web Form to the project, say `WebForm.aspx`, and the following HTML
    heading with a raw inline expression to the form:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Select `WebForm.aspx` in the solution explorer and change its Build Action from
    Content to AdditionalFiles using the Properties window below and save the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the project in Visual Studio or command line and verify you get following
    *SECXXXX* warnings from the PUMA scan analyzer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/607af216-65fc-49d7-8f54-48ace4b2e2d6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Replace the HTML division element added to `_ViewStart.cshtml` in step 3 with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the HTML division element added to `WebForm.aspx` in step 5 with the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Build the project again and verify it compiles without any security warnings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PUMA scan analyzers catch cross-site scripting security vulnerabilities in the
    view markup files (`.cshtml`, `.aspx`, `.ascx`) in C# ASP.NET web projects. In
    the preceding recipe, we showed you different kinds of security vulnerabilities
    that are caught by the PUMA scan analyzers, such as data from untrusted data source
    written to the body of an HTML document using raw inline and binding expressions,
    raw razor helper, and raw `WriteLiteral` method, and so on. It is recommended
    that such data is HTML encoded before being written to the browser. You can read
    detailed description of all cross-site scripting related security vulnerabilities
    identified by the PUMA scan analyzers at [https://www.pumascan.com/rules.html#cross-site-scripting](https://www.pumascan.com/rules.html#cross-site-scripting).
  prefs: []
  type: TYPE_NORMAL
- en: These security analyzers are written as additional file analyzers that analyze
    non-source files in the project that have been marked as `AdditionalFiles` item
    type. Users must mark the view markup files as additional files in their project
    to trigger security analysis during build. You can read more about how to write
    and consume additional file analyzers at [https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md](https://github.com/dotnet/roslyn/blob/master/docs/analyzers/Using%20Additional%20Files.md).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying insecure method calls that can lead to SQL and LDAP injection attacks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: SQL injection is a code injection technique, used to attack data-driven applications,
    in which nefarious SQL statements are inserted into an entry field for execution
    (for example, to dump the database contents to the attacker). SQL injection attacks
    allow attackers to spoof identity, tamper with existing data, cause repudiation
    issues such as voiding transactions or changing balances, allow the complete disclosure
    of all data on the system, destroy the data or make it otherwise unavailable,
    and become administrators of the database server.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP injection is a code injection technique used to exploit web applications,
    which could reveal sensitive user information or modify information represented
    in the **Lightweight Directory Access Protocol** (**LDAP**) data stores. LDAP
    injection exploits a security vulnerability in an application by manipulating
    input parameters passed to internal search, add, or modify functions.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more details about SQL injection at ([https://en.wikipedia.org/wiki/SQL_injection](https://en.wikipedia.org/wiki/SQL_injection))
    and LDAP injection at [https://en.wikipedia.org/wiki/LDAP_injection](https://en.wikipedia.org/wiki/LDAP_injection).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will walk you through the rules in PUMA scan analyzers to
    catch security vulnerabilities that can lead to SQL injection and LDAP injection
    attacks in data driven .NET projects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio and click File | New | Project... and create a new Visual
    C# | Class Library, say `ClassLibrary`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Puma.Security.Rules` analyzers NuGet package (at the time of writing,
    the latest stable version is *1.0.4*). For guidance on how to search and install
    analyzer NuGet package to a project, refer to the recipe, *Searching and installing
    analyzers through the NuGet package manager* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add assembly references to the following framework assemblies: <q>System.Data.Linq.dll</q>
    and `System.DirectoryServices.dll`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the default `Class1` implementation in `Class1.cs` with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Verify you get following *SECXXX* diagnostics from PUMA scan analyzers in the
    error list and squiggles in the editor while editing code and also when invoking
    an explicit build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48965768-bfdc-4d65-9262-24e9f988ba8a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Fix *SEC0106* reported on `context.ExecuteCommand` in method `SQL_Injection`
    by passing *id* as the second argument to the invocation: `context.ExecuteCommand("SELECT
    * FROM Items WHERE ID = {0}", id);`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fix *SEC0107* by parameterizing the query passed to *new* `SqlCommand(...)`
    with a `*SqlParameter*`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Fix *SEC0114* diagnostics by encoding the domain and `userName` arguments using
    the Web Protection Library (also known as AntiXSS) LDAP encoding methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add NuGet package reference to AntiXSS library
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the domain argument passed to new `DirectoryEntry(...)` with `Microsoft.Security.Application.Encoder.LdapDistinguishedNameEncode(domain)`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `userName` argument passed to `string.Format` invocation in the
    initializer for filter with `Microsoft.Security.Application.Encoder.LdapFilterEncode(userName)`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify there are no diagnostics in the error list and the project builds without
    any errors or warnings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PUMA scan analyzers catch SQL injection and LDAP injection security vulnerabilities
    in the source code of data-driven applications. In the preceding recipe, we showed
    you couple of different kinds of security vulnerabilities that are caught by these
    analyzers, such as concatenating untrusted data with SQL query strings, Sql command,
    LDAP directory entry path and filter format.
  prefs: []
  type: TYPE_NORMAL
- en: SQL injection attacks can be prevented by using parameterized queries where
    the untrusted data is passed as an explicit format argument.
  prefs: []
  type: TYPE_NORMAL
- en: LDAP injection attacks can be prevented by using LDAP encoding methods to encode
    the untrusted data. You can read detailed description of all SQL and LDAP injection
    security vulnerabilities identified by the PUMA scan analyzers at [https://www.pumascan.com/rules.html#injection](https://www.pumascan.com/rules.html#injection).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying weak password protection and management in web applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Applications responsible for password management inherit a tremendous amount
    of risk and responsibility. User passwords must be created with sufficient length/complexity,
    stored securely, and protected from brute force and cracking attempts.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will walk you through the rules in PUMA scan analyzers
    to catch vulnerabilities related to weak password management vulnerabilities in
    ASP.NET web projects. The following password management rules are currently supported
    in PUMA scan analyzers:'
  prefs: []
  type: TYPE_NORMAL
- en: ASP.NET Identity Weak Password Complexity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ASP.NET Identity Missing Password Lockout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more details about these rules at [https://www.pumascan.com/rules.html#password-management](https://www.pumascan.com/rules.html#password-management).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Start Visual Studio and click on File | New | Project and create a new Visual
    C# | Web | ASP.NET Web Application with the Web Forms template, say `WebApplication`.
    Click on Change Authentication button and change the authentication to Individual
    User Accounts:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aa3dfea3-0f77-443c-a301-51dcd7a732b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Install the `Puma.Security.Rules` analyzers NuGet package (at the time ofwriting,
    the latest stable version is *1.0.4*). For guidance on how to search and install
    analyzer NuGet package to a project, refer to the recipe, *Searching and installing
    analyzers through the NuGet package manager* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build the project and verify that you get a bunch of *SECXXXX* diagnostics
    from the PUMA scan analyzers, including a couple of password protection related
    diagnostics (*SEC0017* and *SEC0018*):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `WebApplicationApp_StartIdentityConfig.cs` and change the required minimum
    password length to be `12`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `WebApplicationAccountLogin.aspx.cs` and change the `shouldLockout` argument
    to `PasswordSignIn` invocation to be true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Build the project and verify there are no *SEC0017* and *SEC0018* diagnostics.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Identifying weak validation of data from external components to prevent attacks
    such as cross-site request forgery and path tampering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will walk you through the rules in PUMA scan analyzers
    to catch security vulnerabilities that can lead to following types of security
    attacks due to insufficient validation of input:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Cross-Site request forgery** ([https://en.wikipedia.org/wiki/Cross-site_request_forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery)):
    Cross-site request forgery, also known as one-click attack or session riding and
    abbreviated as CSRF or XSRF, is a type of malicious exploit of a website where
    unauthorized commands are transmitted from a user that the web application trusts.
    Unlike cross-site scripting (XSS), which exploits the trust a user has for a particular
    site, CSRF exploits the trust that a site has in a user''s browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Path tampering** ([https://en.wikipedia.org/wiki/Directory_traversal_attack](https://en.wikipedia.org/wiki/Directory_traversal_attack)):
    A directory traversal (or path traversal) consists in exploiting insufficient
    security validation/sanitization of user-supplied input filenames, so that characters
    representing traverse to parent directory are passed through to the file APIs.
    The goal of this attack is to use an affected application to gain unauthorized
    access to the filesystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unvalidated redirect** ([https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet](https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet)):
    Unvalidated redirects and forwards are possible when a web application accepts
    untrusted input that could cause the web application to redirect the request to
    a URL contained within untrusted input. By modifying untrusted URL input to a
    malicious site, an attacker may successfully launch a phishing scam and steal
    user credentials'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio and click File | New | Project... and create a new Visual
    C# | Web | ASP.NET Web Application with the MVC template, say `WebApplication`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Puma.Security.Rules` analyzers NuGet package (at the time of writing,
    the latest stable version is *1.0.4*). For guidance on how to search and install
    analyzer NuGet package to a project, refer to the recipe, *Searching and installing
    analyzers through the NuGet package manager*, in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a new class `Class1` to the project and replace the file contents with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify you get following ***SECXXX*** diagnostics from PUMA scan analyzers
    in the error list and squiggles in the editor while editing code and also when
    invoking an explicit build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3b71eb8-5d9b-4ad0-a35e-4f530a1c744b.png)'
  prefs: []
  type: TYPE_IMG
- en: Fix the first two *SEC0019* diagnostics by applying the `[ValidateAntiForgeryToken]`
    attribute to methods `Missing_AntiForgeryToken` and `Path_Tampering`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix *SEC0022* by deleting the `[AllowHtml]` attribute on `AllowHtmlProperty`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix *SEC0023* by deleting the `[ValidateInput(false)]` attribute on `Missing_AntiForgeryToken`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix *SEC01111* by adding the following `ValidatedFileResult` type and replacing
    `return new FilePathResult(...)` with `return new ValidatedFileResult(...)` in
    `Path_Tampering` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Fix *SEC0113* by deleting the line `handler.ServerCertificateValidationCallback
    += (sender, cert, chain, sslPolicyErrors) => true;`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the project again and verify it compiles without any security warnings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can read further details about PUMA scan validation rules at [https://www.pumascan.com/rules.html#validation](https://www.pumascan.com/rules.html#validation).
  prefs: []
  type: TYPE_NORMAL
- en: Identifying performance improvements to source code using FxCop analyzers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will introduce you to a popular third-party analyzer package
    for C# projects, FxCop analyzers.
  prefs: []
  type: TYPE_NORMAL
- en: We will walk through how to install the FxCop analyzers NuGet package and give
    examples violations for different performance rules and show you how to automatically
    fix some of these issues with the code fixes that come along with the analyzers
    in the NuGet package.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 installed on your machine to execute
    the recipes in this chapter. You can install a free community version of Visual
    Studio 2017 from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start Visual Studio and click File | New | Project... and create a new C# class
    library project and replace the code in `Class1.cs` with code from the code sample
    at `ClassLibrary\Class1.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Microsoft.CodeAnalysis.FxCopAnalyzers` NuGet package (the latest
    prerelease version at the time of writing is *1.2.0-beta2)*. For guidance on how
    to search and install analyzer NuGet package to a project, refer to the recipe,
    *Searching and installing analyzers through the NuGet package manager*, in [Chapter
    2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml), *Consuming Diagnostic Analyzers
    in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unload the project file by right-clicking on `ClassLibrary1` in the solution
    explorer and then open the project file for editing in Visual Studio by right
    clicking on the unloaded project in the solution explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `PropertyGroup` to the project to enable the new Roslyn `IOperation`
    feature used by the FxCop analyzers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Reload the project and verify the following FxCop diagnostics show up in the
    error list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5da129c7-005b-4a2f-80b6-6727dc741eaf.png)'
  prefs: []
  type: TYPE_IMG
- en: Build the project from the command line or top level Build menu in Visual Studio
    and verify these diagnostics are also reported from build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double click on the warning *CA1815* (ValueType should override Equals) and
    verify lightbulb is offered in the editor to implement the overrides for equals,
    `GetHashCode` and `==` and `!=` operator methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f4f32f5a-4088-4a2d-97b4-a096ef87d070.png)'
  prefs: []
  type: TYPE_IMG
- en: Verify that applying the code fix by hitting the *Enter* key fixes *CA1815*
    diagnostics. Note that this introduces new *CAXXXX* diagnostics due to the default
    implementation of the overrides.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the content of `Class1.cs` with following code and verify all *CAXXXX*
    diagnostics are fixed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: FxCop analyzers are a port of the most important Microsoft code analysis rules
    (CAXXXX), which were implemented as an MSIL-based binary analysis. Compared to
    the post-build binary analysis, the FxCop analyzers have added advantage of live
    analysis and diagnostics while editing code, as well as rich code fixes to fix
    these issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'FxCop contains rules in various different categories such as performance, security,
    code style, API design, maintainability, and so on. In the example covered in
    this section, we focused on the following performance rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '*CA1801* (Review unused parameters) ([https://msdn.microsoft.com/en-us/library/ms182268.aspx](https://msdn.microsoft.com/en-us/library/ms182268.aspx)):
    A method signature includes a parameter that is not used in the method body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CA1810* (Initialize reference type static fields inline) ([https://msdn.microsoft.com/en-us/library/ms182275.aspx](https://msdn.microsoft.com/en-us/library/ms182275.aspx)):
    When a type declares an explicit static constructor, the just-in-time (JIT) compiler
    adds a check to each static method and instance constructor of the type to make
    sure that the static constructor was previously called. Static constructor checks
    can decrease performance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CA1814* (Prefer jagged arrays over multidimensional) ([https://msdn.microsoft.com/en-us/library/ms182277.aspx](https://msdn.microsoft.com/en-us/library/ms182277.aspx)):
    A jagged array is an array whose elements are arrays. The arrays that make up
    the elements can be of different sizes, which can result in less wasted space
    for some sets of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CA1815* (Override equals and operator equals on value types) ([https://msdn.microsoft.com/en-us/library/ms182276.aspx](https://msdn.microsoft.com/en-us/library/ms182276.aspx)):
    For value types, the inherited implementation of equals uses the Reflection library
    and compares the contents of all fields. Reflection is computationally expensive,
    and comparing every field for equality might be unnecessary. If you expect users
    to compare or sort instances, or to use instances as hash table keys, your value
    type should implement equals.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CA1816* (Call `GC.SuppressFinalize` correctly) ([https://msdn.microsoft.com/en-us/library/ms182269.aspx](https://msdn.microsoft.com/en-us/library/ms182269.aspx)):
    A method that is an implementation of `Dispose` does not call `GC.SuppressFinalize`,
    or a method that is not an implementation of `Dispose` calls `GC.SuppressFinalize`,
    or a method calls `GC.SuppressFinalize` and passes something other than this.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*CA1821* (Remove empty finalizers) ([https://msdn.microsoft.com/en-us/library/bb264476.aspx](https://msdn.microsoft.com/en-us/library/bb264476.aspx)):
    Whenever you can, avoid finalizers because of the additional performance overhead
    that is involved in tracking object lifetime. An empty finalizer incurs added
    overhead without any benefit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read detailed documentation about all the FxCop performance rules at
    [https://msdn.microsoft.com/en-us/library/ms182260(v=vs.140).aspx](https://msdn.microsoft.com/en-us/library/ms182260(v=vs.140).aspx).
  prefs: []
  type: TYPE_NORMAL
- en: Note that even though majority of Microsoft Code Analysis performance rules
    have been ported to FxCop analyzers package, not all rules are enabled by default
    in the NuGet package. You can view and configure the suppression state and severity
    of each FxCop rule by using the ruleset editor. For further guidance on using
    the ruleset editor, refer to recipe *Using ruleset file and ruleset editor to
    configure analyzers*, in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects.*
  prefs: []
  type: TYPE_NORMAL
