["```cs\nbuilder.Services.AddOpenTelemetry()\n  ...\n  .WithMetrics(meterProviderBuilder =>\n      meterProviderBuilder\n      .AddOtlpExporter()\n          .AddProcessInstrumentation()\n          .AddRuntimeInstrumentation()\n          .AddHttpClientInstrumentation()\n          .AddAspNetCoreInstrumentation());\n```", "```cs\nloadgenerator$ dotnet run -c Release memory-leak –-parallel 100 –-count 20000000\n```", "```cs\n$ dotnet-dump collect -–name issues\n```", "```cs\n$ dotnet-dump analyze <dump file name>\n```", "```cs\n$ dumpheap -mt 00007ffe53f5d488\n```", "```cs\n$ gcroot -all <controller-instance-address>\n```", "```cs\n_queue.Enqueue(() => _logger.LogInformation(\n    \"notification for {user}\",\n    new User(\"Foo\", \"leak@memory.net\")));\n```", "```cs\n$ dotnet run -c Release starve ––parallel 300\n```", "```cs\n$ dotnet-counters monitor --name issues\n```", "```cs\n_httpClient.GetAsync(\"/dummy/?delay=100\", token).Wait();\n```", "```cs\n$ dotnet run -c Release spin –-parallel 100\n```", "```cs\n$ dotnet-trace collect --name issues\n```", "```cs\n$ dotnet-trace report issues.exe_*.nettrace topN\n```", "```cs\ndotnet-trace convert --format speedscope\n  issues.exe_*.nettrace\n```", "```cs\n$dotnet run -c Release lock ––parallel 1000\n```", "```cs\nawait semaphoreSlim.WaitAsync(token);\ntry\n{\n    ThreadUnsafeOperation();\n    await _httpClient.GetAsync(\"/dummy/?delay=10\", token);\n}\nfinally\n{\n    semaphoreSlim.Release();\n}\n```"]