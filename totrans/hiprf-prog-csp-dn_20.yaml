- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: This section is for answers to questions from all chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本节用于回答所有章节的问题。
- en: '[*Chapter 1*](B16617_01_Final_SB_Epub.xhtml#_idTextAnchor014), Introducing
    C# 10.0 and .NET 6'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第一章*](B16617_01_Final_SB_Epub.xhtml#_idTextAnchor014)，介绍C# 10.0和.NET 6'
- en: Performance improvements in the garbage collector and JIT compiler, improved
    performance of text-based processing, faster regular expression processing, and
    performance of threading and asynchronous operations has been boosted. There have
    also been performance improvements to collections, LINQ, networking, and Blazor;
    plus, there are additional performance-based APIs and analyzers that are new to
    .NET 6.
  id: totrans-3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 垃圾收集器和JIT编译器的性能改进，基于文本处理的性能改进，正则表达式处理速度加快，以及线程和异步操作的性能得到提升。集合、LINQ、网络和Blazor的性能也得到了改进；此外，.NET
    6还引入了基于性能的API和分析器。
- en: You can now write top-level programs and use `init`-only properties and records.
    There are new pattern matching features and new expressions with targeted types.
    You can use covariant returns and perform native compilation.
  id: totrans-4
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在可以编写顶层程序并使用仅`init`属性和记录。有新的模式匹配功能和针对特定类型的表达式。你可以使用协变返回并进行原生编译。
- en: '`dotnet` and `ngen`.'
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dotnet`和`ngen`。'
- en: Run the Microsoft Store app performance assessment. Follow Microsoft’s advice
    based on the assessment to improve your app’s performance, and address each of
    the highlighted issues found with your app.
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Microsoft Store应用性能评估。根据评估结果遵循Microsoft的建议来提高你的应用性能，并解决应用中发现的每个突出显示的问题。
- en: Perform baseline measurements, begin optimizations by performing the refactoring
    with the largest overall impact, enable HTTP compression, reduce TCP/IP connection
    overheads, and use HTTP/2 over SSL.
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进行基线测量，通过执行具有最大整体影响的重构开始优化，启用HTTP压缩，减少TCP/IP连接开销，并使用SSL上的HTTP/2。
- en: Reading tasks to be completed by the reader at their discretion.
  id: totrans-8
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读者自行决定的阅读任务。
- en: Coding tasks to be completed by the reader at their discretion.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读者自行决定的编码任务。
- en: Benchmarking tasks to be completed by the reader at their discretion.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 读者自行决定的基准测试任务。
- en: '[*Chapter 2*](B16617_02_Final_SB_Epub.xhtml#_idTextAnchor040), Implementing
    C# Interoperability'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第二章*](B16617_02_Final_SB_Epub.xhtml#_idTextAnchor040)，实现C#互操作性'
- en: Platform invocation.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平台调用。
- en: Explain what `P/Invoke` is.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释`P/Invoke`是什么。
- en: It reminds the programmer that they are responsible for the safety of their
    code, since it is not managed by the .NET Framework.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它提醒程序员他们有责任确保其代码的安全性，因为.NET框架不对其进行管理。
- en: 'There are three generations of objects: zero, one, and two. Normally, objects
    are added to generation zero and garbage is collected. But if they survive generation
    zero, they are promoted to generation one. Objects that survive generation one
    are promoted to generation two. If generations zero, one, and two are completely
    full and new objects are added, then you end up with `OutOfMemoryException`, and
    your application will crash.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有三代对象：零代、一代和二代。通常，对象被添加到零代，并执行垃圾回收。但如果它们在零代中存活下来，它们将被提升到一代。在一代中存活下来的对象将被提升到二代。如果零代、一代和二代完全填满且添加了新对象，那么你将遇到`OutOfMemoryException`，你的应用程序将崩溃。
- en: The `fixed` keyword is used to ensure that objects referenced by pointers are
    not promoted by the garbage collector. Otherwise, the pointers would point to
    the wrong thing, causing bugs in the software.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fixed`关键字用于确保指针引用的对象不会被垃圾收集器提升。否则，指针将指向错误的对象，导致软件中的错误。'
- en: BSTR.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: BSTR。
- en: IronPython, although other packages also exist.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: IronPython，尽管也存在其他包。
- en: Implement the disposable design pattern.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现可处置的设计模式。
- en: Set large fields to `null` when the object is being disposed of. This makes
    them unreachable, and they are released faster than if they were reclaimed non-deterministically.
    You will do this outside of the `conditional` block. See [https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose).
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对象被处置时将大字段设置为`null`。这使得它们无法访问，并且它们比非确定性回收时释放得更快。你将在`conditional`块之外执行此操作。参见[https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose](https://docs.microsoft.com/en-us/dotnet/standard/garbage-collection/implementing-dispose)。
- en: '[*Chapter 3*](B16617_03_Final_SB_Epub.xhtml#_idTextAnchor053), Predefined Data
    Types and Memory Allocations'
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第三章*](B16617_03_Final_SB_Epub.xhtml#_idTextAnchor053)，预定义数据类型和内存分配'
- en: '`bool`, `byte`, `char`, `DateTime`, `decimal`, `double`, `enum`, `float`, `int`,
    `long`, `sbyte`, `short`, `struct`, `value tuple`, `uint`, and `ulong`.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bool`、`byte`、`char`、`DateTime`、`decimal`、`double`、`enum`、`float`、`int`、`long`、`sbyte`、`short`、`struct`、`value
    tuple`、`uint` 和 `ulong`。'
- en: '`object`, `string`, `delegate`, and `dynamic`.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`object`、`string`、`delegate` 和 `dynamic`。'
- en: Create an instance of the `static` type.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `static` 类型的实例。
- en: No. The same physical memory is used for both the stack and the heap.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。栈和堆都使用相同的物理内存。
- en: Items are simply popped onto the stack when they are in use and immediately
    popped off the stack when they are no longer needed. Objects added to the heap
    need to be managed and object reference counters maintained. Items placed on the
    stack use both the stack and the heap, as items on the heap have pointer variables
    on the stack. So, there is more overhead to using the heap compared to the stack.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当项目在使用时，它们简单地被推入栈中，当它们不再需要时，立即从栈中弹出。添加到堆中的对象需要被管理和维护对象引用计数。放置在栈上的项目同时使用栈和堆，因为堆上的项目在栈上有指针变量。因此，与栈相比，使用堆有更多的开销。
- en: A string is placed on the heap. A variable is placed on the stack with the string’s
    memory address. When another variable is assigned the same string, it is given
    the address of the string. So, multiple items on the stack will be pointing to
    the same string. However, if you append anything to the string, a new string is
    then created on the heap with a new memory address. The variable that is assigned
    the new string will have the memory address that points to the new string on the
    heap, so the original string is never updated.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串被放置在堆上。变量被放置在栈上，带有字符串的内存地址。当另一个变量被分配相同的字符串时，它将获得字符串的地址。因此，栈上的多个项目将指向相同的字符串。然而，如果你向字符串中添加任何内容，那么将在堆上创建一个新的字符串，并带有新的内存地址。分配新字符串的变量将具有指向堆上新字符串的内存地址，因此原始字符串永远不会更新。
- en: Less than 80,000 bytes.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小于 80,000 字节。
- en: 80,000 bytes or higher.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 80,000 字节或更高。
- en: '[*Chapter 4*](B16617_04_Final_SB_Epub.xhtml#_idTextAnchor072), Memory Management'
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 4 章*](B16617_04_Final_SB_Epub.xhtml#_idTextAnchor072)，内存管理'
- en: 'Three: generation 0, generation 1, and generation 2.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 三：0 代、1 代和 2 代。
- en: Objects less than 80,000 bytes are placed on the SOH.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 小于 80,000 字节的对象被放置在 SOH 上。
- en: Objects 80,000 bytes or more are placed on the LOH.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 80,000 字节或更大的对象被放置在 LOH 上。
- en: A strong reference is a reference that does not get garbage-collected.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 强引用是一种不会被垃圾回收的引用。
- en: A weak reference is a reference that does get garbage-collected.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 弱引用是一种会被垃圾回收的引用。
- en: Implement the `IDisposable` pattern.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现 `IDisposable` 模式。
- en: Unsubscribe event listeners when they are no longer used. Dispose of event publishers
    or set them to null when they are no longer used.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当不再使用时取消订阅事件监听器。不再使用时处置事件发布者或将它们设置为 null。
- en: '`Marshal.ReleaseComObject(object)`.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Marshal.ReleaseComObject(object)`。'
- en: Make sure that any allocated memory is deallocated. Use the `IDisposable` pattern
    to ensure that memory is cleaned up when the object is disposed of.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保任何分配的内存都被释放。使用 `IDisposable` 模式确保在对象被处置时清理内存。
- en: '[*Chapter 5*](B16617_05_Final_SB_Epub.xhtml#_idTextAnchor085), Application
    Profiling and Tracing'
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 5 章*](B16617_05_Final_SB_Epub.xhtml#_idTextAnchor085)，应用程序分析和跟踪'
- en: Applications, assemblies, namespaces, types, methods, and fields.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序、程序集、命名空间、类型、方法和字段。
- en: Maintainability index, cyclomatic complexity, depth of inheritance, class coupling,
    lines of source code, and lines of executable code.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可维护性指数、循环复杂度、继承深度、类耦合、源代码行数和可执行代码行数。
- en: Dump location and time, the name of the process, processor architecture, exception
    information, OS and CLR version, and the names, versions, and physical paths of
    the loaded modules.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 记录位置和时间、进程名称、处理器架构、异常信息、操作系统和 CLR 版本以及加载模块的名称、版本和物理路径。
- en: The name, path, optimized user code, symbol status, O (order), version, process,
    and AppDomain.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 名称、路径、优化后的用户代码、符号状态、O（顺序）、版本、进程和 AppDomain。
- en: Microsoft Visual Studio 2022, and JetBrains dotTrace, dotMemory, and dotnet-counters.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio 2022 和 JetBrains dotTrace、dotMemory 和 dotnet-counters。
- en: We were able to list the .NET processes that can be monitored and counters that
    can be used to collect data. We obtained the .NET process identifiers and monitored
    them, and we collected, saved, and viewed data that we collected from the running
    .NET processes.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能够列出可监控的 .NET 进程和可用于收集数据的计数器。我们获取了 .NET 进程标识符并对其进行了监控，并收集、保存和查看我们从运行中的 .NET
    进程中收集的数据。
- en: '[*Chapter 6*](B16617_06_Final_SB_Epub.xhtml#_idTextAnchor117), The .NET Collections'
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第6章*](B16617_06_Final_SB_Epub.xhtml#_idTextAnchor117)，.NET集合'
- en: '`System.Collections`, `System.Collections.Generic`, `System.Collections.Concurrent`,
    and `System.Collections.Specialized`.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.Collections`、`System.Collections.Generic`、`System.Collections.Concurrent`和`System.Collections.Specialized`。'
- en: Big O notation is used to determine algorithmic efficiency.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用大O符号来确定算法效率。
- en: Algorithmic efficiency determines how time scales with respect to input.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 算法效率决定了时间如何随输入量而变化。
- en: Benchmarking showed that using `IList<T>` was faster than using `List<T>`, and
    so using `IList<T>` is preferred over using `List<T>`.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基准测试表明，使用`IList<T>`比使用`List<T>`更快，因此优先使用`IList<T>`而不是`List<T>`。
- en: You can use either. What you choose depends upon your performance requirements
    and what you are trying to achieve. There are trade-offs between using collections
    and arrays. Understanding these trade-offs will help you choose which option you
    should apply to your code.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用任一方法。你的选择取决于你的性能需求和你要实现的目标。使用集合和数组之间存在权衡。理解这些权衡将帮助你选择应该应用到你的代码中的选项。
- en: Indexers enable objects in classes to be accessed in the same way as you access
    items in an array.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 索引器使得类中的对象可以像访问数组中的项一样被访问。
- en: '`IEnumerator<T>` is faster at iterating through in-memory collections than
    `IEnumerable<T>`.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IEnumerator<T>`在遍历内存集合时比`IEnumerable<T>`更快。'
- en: In terms of memory and speed performance, querying the database and obtaining
    the enumerator is the fastest way to query a database and iterate through the
    results according to the benchmarks.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据基准测试，在内存和速度性能方面，查询数据库并获取枚举器是查询数据库和遍历结果最快的方式。
- en: Use the `yield` keyword.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`yield`关键字。
- en: '[*Chapter 7*](B16617_07_Final_SB_Epub.xhtml#_idTextAnchor139), LINQ Performance'
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第7章*](B16617_07_Final_SB_Epub.xhtml#_idTextAnchor139)，LINQ性能'
- en: Use the index rather than the `Last()` call for direct access to the last element
    in a collection. Avoid using the `let` keyword in your LINQ queries. Convert a
    list to an array to perform group by, and then return an enumerator.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用索引而不是`Last()`调用直接访问集合中的最后一个元素。在LINQ查询中避免使用`let`关键字。将列表转换为数组以执行分组，然后返回枚举器。
- en: The compiler generates more lines of code that take longer to run, and more
    memory is allocated at runtime than when the `let` keyword is not used.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译器生成的代码行数更多，运行时间更长，并且当不使用`let`关键字时，运行时分配的内存更多。
- en: Filter items starting with objects that have the least number of items, followed
    by the objects with an increasing number of items. Also, avoid using the `let`
    keyword.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从具有最少项的对象开始过滤项，然后是具有递增项数的对象。此外，避免使用`let`关键字。
- en: Closures with parameters perform better than closures without parameters.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 带参数的闭包比不带参数的闭包性能更好。
- en: '[*Chapter 8*](B16617_08_Final_SB_Epub.xhtml#_idTextAnchor152), File and Stream
    I/O'
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第8章*](B16617_08_Final_SB_Epub.xhtml#_idTextAnchor152)，文件和流I/O'
- en: Absolute, relative, UNC, and DOS device.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 绝对路径、相对路径、UNC路径和DOS设备。
- en: In the registry editor, set `HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem\LongPathsEnabled`
    to `1`.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册表编辑器中，将`HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\FileSystem\LongPathsEnabled`设置为`1`。
- en: The most efficient way to calculate the size of a directory is to get `DirectoryInfo`
    for the directory, followed by the call to `GetFileSystemInfos()`. You then iterate
    through the result, adding the length of each `FileInfo` object to get the directory’s
    size.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最有效计算目录大小的方法是获取目录的`DirectoryInfo`，然后调用`GetFileSystemInfos()`。然后遍历结果，将每个`FileInfo`对象的长度添加到获取目录的大小。
- en: The most efficient method of moving files is to obtain `FileInfo` objects from
    the in-memory cache and then use the `FileInfo.MoveTo(string destination)` method
    to move the file.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动文件最高效的方法是从内存缓存中获取`FileInfo`对象，然后使用`FileInfo.MoveTo(string destination)`方法移动文件。
- en: When you encounter a non-recoverable exception before you exit the application.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在退出应用程序之前遇到不可恢复的异常。
- en: '`IOException`.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IOException`。'
- en: Local, Local Cache, Roaming, Temporary, and C:\ProgramData.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 本地、本地缓存、漫游、临时和C:\ProgramData。
- en: Users may only install the software for themselves when prompted. This will
    result in each logged-on person using the software having their own copy of the
    data, with the data located in the Microsoft VirtualStore under their logged-on
    account.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当被提示时，用户只能为自己安装软件。这将导致每个登录的人使用软件时都有自己的数据副本，数据位于他们的登录账户下的Microsoft VirtualStore中。
- en: When multiple users log onto the same computer, and an application has been
    installed for just one user rather than all users, instead of the application
    data being stored under the centralized location of `C:\ProgramData`, it will
    be stored under Microsoft Virtual Store.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当多个用户登录到同一台计算机，并且只安装了一个用户的应用程序而不是所有用户时，应用程序数据将存储在Microsoft虚拟存储中，而不是存储在`C:\ProgramData`的集中位置。
- en: '`C:\Users\%USERNAME%\AppData\Local\VirtualStore`.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`C:\Users\%USERNAME%\AppData\Local\VirtualStore`。'
- en: '[*Chapter 9*](B16617_09_Final_SB_Epub.xhtml#_idTextAnchor168), Enhancing the
    Performance of Networked Applications'
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第9章*](B16617_09_Final_SB_Epub.xhtml#_idTextAnchor168)，增强网络应用程序的性能'
- en: Application layer, presentation layer, session layer, transport layer, network
    layer, data link layer, and physical layer.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用层、表示层、会话层、传输层、网络层、数据链路层和物理层。
- en: HTTP, HTTPS, SSH, SSL, DHCP, DNS, FTP, TFTP, Telnet, SMTP, IMAP4, POP3, TCP,
    IP, UDP, Ethernet, and PPP.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTP、HTTPS、SSH、SSL、DHCP、DNS、FTP、TFTP、Telnet、SMTP、IMAP4、POP3、TCP、IP、UDP、以太网和PPP。
- en: TCP enables the transmitting and receiving of data that is guaranteed to be
    received. UDP only allows the transmission of data that is not guaranteed to be
    received.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TCP使数据传输和接收得到保证。UDP只允许传输无法保证接收的数据。
- en: Use the developer tools that are built into your browser.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用浏览器内置的开发者工具。
- en: gRPC is a cross-platform, cross-language, and cross-device framework for making
    remote procedure calls between applications. gRPC-Web is a proxy for browser-based
    RCP calls, as browser applications are unable to use gRPC directly.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: gRPC是一个跨平台、跨语言和跨设备的框架，用于在应用程序之间进行远程过程调用。gRPC-Web是浏览器基于RCP调用的代理，因为浏览器应用程序无法直接使用gRPC。
- en: Reduce the number of things the page is doing and the number of services the
    page calls. Reduce the size of images. Use file compression to reduce the size
    of files transmitted over a network. Cache network resources. Filter data on the
    server, divide it into pages, and return only the requested page of data.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减少页面执行的操作数量和页面调用的服务数量。减小图像大小。使用文件压缩减小通过网络传输的文件大小。缓存网络资源。在服务器上过滤数据，将其分成页面，并只返回请求的数据页面。
- en: '[*Chapter 10*](B16617_10_Final_SB_Epub.xhtml#_idTextAnchor189), Setting Up
    Our Database Project'
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第10章*](B16617_10_Final_SB_Epub.xhtml#_idTextAnchor189)，设置我们的数据库项目'
- en: N/A.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: N/A。
- en: '[*Chapter 11*](B16617_11_Final_SB_Epub.xhtml#_idTextAnchor205), Benchmarking
    Relational Data Access Frameworks'
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第11章*](B16617_11_Final_SB_Epub.xhtml#_idTextAnchor205)，基准测试关系型数据访问框架'
- en: Executing a stored procedure with Dapper.NET.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Dapper.NET执行存储过程。
- en: Executing a raw SQL statement with Dapper.NET.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Dapper.NET执行原始SQL语句。
- en: Executing a stored procedure with ADO.NET.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ADO.NET执行存储过程。
- en: Executing a stored procedure with ADO.NET.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ADO.NET执行存储过程。
- en: Executing a stored procedure with ADO.NET.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用ADO.NET执行存储过程。
- en: Not necessarily. A hybrid approach may be better because you can maximize your
    data access performance for the data operations in question by using the most
    performant method from the frameworks you have selected to work with.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不一定。混合方法可能更好，因为您可以通过使用您选择的框架中最高效的方法来最大化您所涉及的数据操作的性能。
- en: '[*Chapter 12*](B16617_12_Final_SB_Epub.xhtml#_idTextAnchor215), Responsive
    User Interfaces'
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第12章*](B16617_12_Final_SB_Epub.xhtml#_idTextAnchor215)，响应式用户界面'
- en: Configure the application for high-DPI awareness.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置应用程序以支持高DPI。
- en: Configure the application to be long file path-aware.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置应用程序以支持长文件路径。
- en: Add a splash screen to the start of your application.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序的开始处添加启动画面。
- en: Run the long-running task as a background task.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将长时间运行的任务作为后台任务运行。
- en: Memory caching and distributed caching.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内存缓存和分布式缓存。
- en: Use AJAX.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用AJAX。
- en: '`WebSockets` and SignalR.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`WebSockets`和SignalR。'
- en: '`SetSemanticFocus`, `Announce`, and `Font scaling`.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetSemanticFocus`、`Announce`和`字体缩放`。'
- en: Add the `BlazorWebView` component to a page and point it to the root of your
    Blazor application.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`BlazorWebView`组件添加到页面中，并将其指向Blazor应用程序的根目录。
- en: '`ProgressRing` and `ProgressBar`.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ProgressRing`和`ProgressBar`。'
- en: '[*Chapter 13*](B16617_13_Final_SB_Epub.xhtml#_idTextAnchor239), Distributed
    Systems'
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第13章*](B16617_13_Final_SB_Epub.xhtml#_idTextAnchor239)，分布式系统'
- en: Command query responsibility separation.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令查询责任分离。
- en: We may want to use one model for commands and another model for queries.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可能希望为命令使用一个模型，为查询使用另一个模型。
- en: Event-driven programming.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件驱动编程。
- en: We use events to trigger the execution of a serverless function, such as an
    Azure Durable Function.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们使用事件来触发无服务器函数的执行，例如Azure Durable Function。
- en: A piece of software that is used to package an application and its dependencies
    that can be deployed to and executed in the cloud or on-premises.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一种用于打包应用程序及其依赖项的软件，可以在云或本地部署和执行。
- en: To deploy third-party dependencies and legacy code.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于部署第三方依赖项和遗留代码。
- en: Microservices in the form of functions that only run when they are required
    and that usually run in response to an event trigger.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以函数形式存在的微服务，仅在需要时运行，并且通常在事件触发器响应下运行。
- en: Serverless functions can scale rapidly, and you only pay for the time the functions
    run. This can save money when compared to containers that need to be running most
    of the time.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无服务器函数可以快速扩展，并且您只需为函数运行的时间付费。与需要大部分时间运行容器的相比，这可以节省金钱。
- en: Extensions to Azure Functions that enable the writing of stateful functions
    in a serverless environment. We can also use them to define workflows.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure Functions的扩展，使您能够在无服务器环境中编写有状态函数。我们还可以使用它们来定义工作流程。
- en: Activity, Orchestrator, Entity, and Client.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 活动、编排器、实体和客户端。
- en: Aggregator (stateful entities), fan-out/fan-in, function chaining, human interaction,
    and monitoring (actors).
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 聚合器（有状态实体）、扇出/扇入、函数链、人工交互和监控（演员）。
- en: An infrastructure-as-code platform for managing microservices.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用于管理微服务的基础设施即代码平台。
- en: You can manage your microservices and their resources using C#, from creation
    to running, stopping, and deleting them.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用C#管理微服务和它们资源，从创建到运行、停止和删除。
- en: '[*Chapter 14*](B16617_14_Final_SB_Epub.xhtml#_idTextAnchor254), Multi-Threaded
    Programming'
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第14章*](B16617_14_Final_SB_Epub.xhtml#_idTextAnchor254)，多线程编程'
- en: '`Running`, `suspended`, `wait`, `sleep`, `join`, and `stop`.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`运行`、`挂起`、`等待`、`睡眠`、`加入`和`停止`。'
- en: You don’t – this API is now obsolete.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您不需要 – 这个API现在已过时。
- en: Foreground and background.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前台和后台。
- en: Use `CancellationToken` to raise `TaskCanceledException` when a `CancellationTokenSource`
    operation times out.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`CancellationToken`在`CancellationTokenSource`操作超时时引发`TaskCanceledException`。
- en: '`Thread.Start()` or `Thread.Start(object)`.'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Thread.Start()`或`Thread.Start(object)`。'
- en: '[*Chapter 15*](B16617_15_Final_SB_Epub.xhtml#_idTextAnchor266), Parallel Programming'
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第15章*](B16617_15_Final_SB_Epub.xhtml#_idTextAnchor266)，并行编程'
- en: Task Parallel Library.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务并行库。
- en: Parallel LINQ Library.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 并行LINQ库。
- en: Performance Monitor aka `perfmon`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 性能监控器即`perfmon`。
- en: No.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。
- en: Use `BenchmarkDotNet` to test the performance of various methods.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`BenchmarkDotNet`测试各种方法的性能。
- en: '[*Chapter 16*](B16617_16_Final_SB_Epub.xhtml#_idTextAnchor280), Asynchronous
    Programming'
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第16章*](B16617_16_Final_SB_Epub.xhtml#_idTextAnchor280)，异步编程'
- en: Task-based asynchronous pattern.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 基于任务的异步模式。
- en: '`CancellationToken`.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CancellationToken`。'
- en: '`IProgress<T>`.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IProgress<T>`。'
- en: An asynchronous method is declared, with the `async` keyword preceding the method
    name. The `await` keyword precedes an asynchronous operation and prevents the
    continuation of any further code until the asynchronous operation is complete.
    `Task` is what an asynchronous method returns. For `void` methods, the return
    type is `Task`, and for methods that return a value, the return type is `Task<T>`.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明了一个异步方法，`async`关键字位于方法名之前。`await`关键字位于异步操作之前，并阻止任何进一步代码的继续执行，直到异步操作完成。`Task`是异步方法返回的内容。对于`void`方法，返回类型是`Task`，而对于返回值的函数，返回类型是`Task<T>`。
- en: Create a new `CancelationTokenSource` and then set the method of cancelation,
    such as `CancelAfter(3000)`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的`CancelationTokenSource`，然后设置取消方法，例如`CancelAfter(3000)`。
- en: Pass an `IProgress<T>` type into an asynchronous method as a parameter and add
    event handlers for the `ProgressChanged` event. Alternatively, you can pass a
    single handler into the `Progress<T>` constructor.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`IProgress<T>`类型作为参数传递给异步方法，并为`ProgressChanged`事件添加事件处理器。或者，您也可以将单个处理器传递给`Progress<T>`构造函数。
