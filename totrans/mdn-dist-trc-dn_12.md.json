["```cs\nusing var act = StartMongoActivity(GetOperation);\ntry {\n  var rec = await _records.Find(r => r.Id == id)\n    .SingleOrDefaultAsync();\n  ...\n  return rec;\n} catch (Exception ex) {\n  act?.SetStatus(ActivityStatusCode.Error,\n    ex.GetType().Name);\n  ...\n}\n```", "```cs\nvar act = MongoSource.StartActivity(\n    $\"{operation} {_dbName}.{_collectionName}\",\n    ActivityKind.Client);\n  if (act?.IsAllDataRequested != true) return act;\n  return act.SetTag(\"db.system\", \"mongodb\")\n    .SetTag(\"db.name\", _dbName)\n    .SetTag(\"db.mongodb.collection\", _collectionName)\n    .SetTag(\"db.operation\", operation)\n    .SetTag(\"net.peer.name\", _host)\n    .SetTag(\"net.peer.port\", _port);\n```", "```cs\nprivate static void AddBulkAttributes<T>(\n  IEnumerable<WriteModel<T>> requests, Activity? act)\n{\n  if (act?.IsAllDataRequested == true)\n  {\n    act.SetTag(\"db.mongodb.bulk_operations\",\n      requests.Select(r => r.ModelType).ToArray());\n  }\n}\n```", "```cs\nusing var act = StartCacheActivity(GetOperationName);\ntry\n{\n  var record = await _cache.GetStringAsync(id);\n  act?.SetTag(\"cache.hit\", record != null);\n  ...\n}\ncatch (Exception ex)\n{\n  act?.SetStatus(ActivityStatusCode.Error,\n    ex.GetType().Name);\n  ...\n}\n```", "```cs\nvar act = RedisSource.StartActivity(operation,\n  ActivityKind.Client);\nif (act?.IsAllDataRequested != true) return act;\nreturn act.SetTag(\"db.operation\", operation)\n    .SetTag(\"db.system\", \"redis\")\n    .SetTagIfNotNull(\"db.redis.database_index\", _dbIndex)\n    .SetTagIfNotNull(\"net.peer.name\", _host)\n    .SetTagIfNotNull(\"net.peer.port\", _port)\n    .SetTagIfNotNull(\"net.sock.peer.addr\", _address)\n    .SetTagIfNotNull(\"net.sock.family\", _networkFamily);\n```", "```cs\nusing var act = Source.StartActivity(\"GetRecord\");\nact?.SetTag(\"app.record.id\", id);\ntry\n{\n  var recordStr = await _cache.GetRecord(id);\n  if (recordStr != null) return recordStr;\n  act?.SetTag(\"cache.hit\", false);\n  var record = await _database.Get(id);\n  if (record != null) return await Cache(record);\n}\ncatch (Exception ex)\n{\n  act?.SetStatus(ActivityStatusCode.Error,\n    ex.GetType().Name);\n  throw;\n}\nact?.SetStatus(ActivityStatusCode.Error, \"not found\");\n```", "```cs\nprivate static readonly Meter MongoMeter = new(\"MongoDb\");\nprivate readonly Histogram<double> _operationDuration;\n…\npublic DatabaseService(IOptions<MongoDbSettings> settings) {\n  ...\n  _operationDuration = MongoMeter.CreateHistogram<double>(\n    \"db.operation.duration\", \"ms\",\n    \"Database call duration\");\n}\n```", "```cs\nvar start = _operationDuration.Enabled ?\n    Stopwatch.StartNew() : null;\nusing var act = StartMongoActivity(GetOperation);\ntry\n{\n  var rec = await _records.Find(r => r.Id == id)\n    .SingleOrDefaultAsync();\n  TrackDuration(start, GetOperation);\n  return rec;\n}\ncatch (Exception ex)\n{\n  ...\n  TrackDuration(start, GetOperation, ex);\n  throw;\n}\n```", "```cs\nprivate void TrackDuration(Stopwatch? start,\n  string operation, Exception? ex = null)\n{\n  if (start == null) return;\n  string status = ex?.GetType()?.Name ?? \"ok\";\n  _operationDuration.Record(start.ElapsedMilliseconds,\n    new TagList() {\n      { \"db.name\", _dbName },\n      { \"db.mongodb.collection\", _collectionName },\n      { \"db.system\", \"mongodb\"},\n      { \"db.operation\", operation },\n      { \"db.mongodb.status\", status },\n      { \"net.peer.name\", _host },\n      { \"net.peer.port\", _port }});\n}\n```", "```cs\nreceivers:\n...\n  redis:\n    endpoint: \"redis:6379\"\n    collection_interval: 5s\n...\nservice:\n  pipelines:\n    ...\n    metrics:\n      receivers: [otlp, redis]\n...\n```", "```cs\n$ curl -X POST http://localhost:5051/records \\\n  -H \"Content-Type: application/json\" \\\n  -d '[{\"name\":\"foo\"},{\"name\":\"bar\"},{\"name\":\"baz\"}]'\n```", "```cs\nsum by (http_route, http_status_code)\n  (rate(http_server_duration_milliseconds_count[1m])\n)\n```", "```cs\nhistogram_quantile(0.50,\n  sum (rate(http_server_duration_milliseconds_bucket[1m]))\n  by (le, http_route, http_method))\n```", "```cs\n100 *\nsum by (net_peer_name) (\n  rate(db_operation_duration_milliseconds_count{cache_hit=\"true\",\n          db_operation=\"GetString\",\n          db_system=\"redis\"}[1m]))\n/\nsum by (net_peer_name) (\n  rate(\n      db_operation_duration_milliseconds_count{db_\n        operation=\"GetString\",\n      db_redis_status=\"ok\",\n      db_system=\"redis\"}[1m]))\n```", "```cs\nsum by (container_image_name)\n  (rate(container_network_io_usage_rx_bytes_total[1m]))\n```"]