- en: Chapter 4. Enterprise Application Integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A middleware system or service that enables applications to connect to each
    other to exchange data is known as Enterprise Application Integration or EAI.
    In BizTalk Services, EAI is oriented towards a developer persona and Visual Studio
    is the primary tool for development and deployment of services. Integration between
    applications is possible using a bridge for messaging. We will explore the e-commerce
    example from the first chapter in more detail as we look at the concepts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, we will focus on the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding EAI capabilities in Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding bridges, sources, and destinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding custom code using message inspectors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding hybrid connectivity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enterprise application integration scenarios
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider the following scenarios:'
  prefs: []
  type: TYPE_NORMAL
- en: Contoso is a movie ticketing company and sells tickets through Point-Of-Sale
    terminals across different cities. They wish to consolidate their end-of-day sales
    data from the terminals to their SAP Line-of-Business system. In the absence of
    any form of middleware, the POS data needs to be collected manually and the data
    has to be merged and converted to a format matching the target system. Using EAI,
    the entire process can be automated and set up in a matter of minutes with BizTalk
    Services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fabrikam is a software vendor and uses Salesforce to manage their customer pipeline
    and sales orders. All approved orders from Salesforce need to be managed centrally
    in their ERP system like Oracle, which resides on-premises. Using hybrid connectivity
    all connections to Oracle on-premises can be managed using BizTalk Adapter Services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Northwind is an online retailer who manages an e-commerce website for customer
    purchases. They also receive bulk orders from event firms and corporates for their
    goods. Northwind needs to develop a solution to validate orders and also route
    requests to the right inventory location for delivery of the goods. Using EAI
    in BizTalk Services, they develop a common solution to process purchase orders
    from consumers over XML as well as purchase orders in EDI from event firms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these scenarios can be modelled as an EAI solution on BizTalk Services.
    The incoming requests (ticketing sales, sales orders, and invoices) can be XML
    or flat file messages and need to be transformed into a target Line of Business
    format and routed to the on-premises systems. If the destination is on-premises,
    then relay endpoints are set up using hybrid connectivity.
  prefs: []
  type: TYPE_NORMAL
- en: EAI in BizTalk Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's look at each of the concepts in more detail and understand their capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Sources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sources receive a message from an external application. BizTalk Services v1
    supports five common out-of-the-box sources: **SFTP**, **FTP**, **HTTP**, **Service
    Bus Queue**, and **Service Bus Subscription**. By default, the bridge exposes
    the HTTPs endpoint secured by the Access Control service. The various sources
    of bridges are shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sources](img/7401EN_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Sources of bridges
  prefs: []
  type: TYPE_NORMAL
- en: Bridges and the VETER pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Bridges are composed of sources, pipelines, and destinations. Pipelines connect
    two messaging systems and are composed of a series of stages to process the messages
    flowing from source to destination. The stages perform decoding, validation, enrichment,
    transformation, and routing of the messages. Each stage can be enabled or disabled
    for deployment from the Visual Studio properties pane. The set of stages are fixed,
    and out of the box, BizTalk Services v1 enables the **VETER** pattern. This is
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bridges and the VETER pattern](img/7401EN_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bridges with VETER pattern
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the stages of the VETER pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Stage | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Validate (V) | Validate the incoming message against the schema |'
  prefs: []
  type: TYPE_TB
- en: '| Enrich (E) | Enrich the message with properties promoted from the message
    header, body, or lookup (see [Chapter 3](ch03.html "Chapter 3. Bridges"), *Bridges*)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Transform (T) | Map the message from one format to another (see [Chapter
    2](ch02.html "Chapter 2. Messages and Transforms"), *Messages and Transforms*)
    |'
  prefs: []
  type: TYPE_TB
- en: '| Enrich (E) | Enrich the new message post transform |'
  prefs: []
  type: TYPE_TB
- en: '| Route (R) | Route to one of the target destinations |'
  prefs: []
  type: TYPE_TB
- en: '| Decode | For flat file processing, decode the message |'
  prefs: []
  type: TYPE_TB
- en: Destinations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Destinations** are where messages are is submitted to after pipeline processing.
    In bridges, the route to a destination is based on the SQL-92 expression syntax.
    A message will be sent to only one destination whose route rule evaluates to true.
    The route stage is also explained in [Chapter 2](ch02.html "Chapter 2. Messages
    and Transforms"), *Messages and Transforms*. The various destinations are shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Destinations](img/7401EN_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Destinations with bridges
  prefs: []
  type: TYPE_NORMAL
- en: Attributes of bridges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here are some interesting attributes of bridges:'
  prefs: []
  type: TYPE_NORMAL
- en: '**State**: Pipelines as part of bridges are stateless, that is, at no point
    during the processing is the message persisted. If there is a crash or restart
    of the system while messages are inflight, the message would have to be resubmitted
    for processing. This also means message processing is synchronous.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Error handling**: If an error occurs during message processing, a fault is
    thrown back to the sender of the message to take action. As there is no separate
    suspend endpoint in EAI bridges, error must be handled at the client side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**One-way/Two-way**: Bridges support both one-way and two-way communication.
    In the case of one-way communication, only the HTTP codes are passed back to the
    sender of the message. However, in the case of two-way communication, a response
    message can be sent back. Two-way bridges in BizTalk Services support the VETER
    pattern on the request side and ETER on the response side. The message on the
    response side is assumed to be valid since this is coming from the target Line-of-Business
    system or service. Note that a pass-through-bridge is a special case of a one-way
    bridge that has only the E-R of the VETER pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Message formats**: Messages can be sent in plain old XML, SOAP, and flat
    file formats. Flat file messages can only be used with one-way bridges. Other
    formats such as JSON may be added in future, but those different formats need
    custom code to normalize the data to XML before processing. We will discuss custom
    code later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Chaining**: Multiple bridges can be chained by adding one bridge as the destination
    of another bridge. This may be used to centralize the processing of messages through
    a single bridge. For example, multiple bridges may pump messages from different
    sources all connecting to a single bridge that routes to an on-premises endpoint.
    Also, selectively disabling stages can enable newer messaging patterns. For example,
    ETEVR can be achieved by chaining two VETER bridges.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hybrid connectivity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Organizations that have made IT investments in ERPs and services on premises
    may not transition all of their IT assets to the cloud. There is a need to connect
    to those services and resources using hybrid connectivity from the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The BizTalk Adapter Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **BizTalk Adapter Service** (**BAS**) is a service which enables an application
    running on-premises to receive data from the cloud. The on-premises applications
    such as ERPs and BizTalk Server can be exposed outside of the corporate network
    using Service Bus relays for hybrid connectivity. The Service Bus Relay service
    on Azure acts as an intermediary where a client and an on-premises service can
    connect with each other. The client in this case is the BizTalk Services' bridge
    and the service running on-premises is the BizTalk Adapter Service talking to
    an ERP. Once the BizTalk Adapter Service and the bridge authenticate with the
    Service Bus Relay service, all messages from the bridge are forwarded to the BizTalk
    Adapter Service.
  prefs: []
  type: TYPE_NORMAL
- en: The BAS architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The overall BAS architecture is shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The BAS architecture](img/7401EN_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The BizTalk Adapter Service architecture
  prefs: []
  type: TYPE_NORMAL
- en: The BizTalk Adapter Service runs on the client machine and is hosted in IIS
    to handle management operations such as start/stop of endpoints as well as runtime
    operations to route messages from the cloud to the on-premises systems. There
    is one management service along with one or more runtime services that can be
    managed using the management service. The meta-data of the relay configurations
    is stored in the storage account of the BizTalk Services deployment specified
    during installation. The BizTalk Adapter Service relies on the BizTalk Adapter
    pack to connect to Line-of-Business (LOB) systems such as Oracle DB, Oracle EBS,
    SAP, Siebel, and SQL Server.
  prefs: []
  type: TYPE_NORMAL
- en: Management operations are exposed through Visual Studio Server Explorer or through
    PowerShell cmdlets, both of which talk to the **BAService**, the application hosting
    the `ManagementService.svc` service in IIS on the on-premises machine where BizTalk
    Adapter Service is installed.
  prefs: []
  type: TYPE_NORMAL
- en: Runtime operations are managed as per the Service Bus Relay by creating new
    applications in IIS hosting `RuntimeService.svc`. Each LOB can create a new relay
    or use an existing relay configured for another LOB. When there are more than
    one LOB per relay, the sub-paths in the runtime address beyond the relay URL help
    direct the calls to the right adapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the LOB relay is created, based on user configuration a new or existing
    application is used in IIS as the service host. The generated WSDL contains the
    message to be relayed as well as the operation action. Operations such as `INSERT`,
    `UPDATE`, `DELETE`, and `SELECT` are passed as part of the `SOAPAction` header
    in the following format: `TableOp/{Operation}/schema/Tablename`. The exact SOAP
    Action string can be determined from the relay configuration''s properties window
    in Visual Studio.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Every message passing via the relay needs to authenticate with the LOB. Authentication
    credentials are passed using one of the following four ways:'
  prefs: []
  type: TYPE_NORMAL
- en: Username and password preconfigured and stored in the BAS store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Active Directory domain credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SOAP header containing credentials of the LOB
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WS-Security credentials
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BAS installation and configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'BAS installation is part of the BizTalk Services SDK setup. During setup, the
    URL of the BizTalk Services deployment needs to be entered. This is added to `web.config`
    under `C:\Program Files\Microsoft BizTalk Adapter Service\BAService`. In Visual
    Studio Server Explorer, the on-premises management service URL along with the
    ACS credentials of the deployment need to be entered. Hybrid connectivity can
    now be set up for each of the following LOBs using a wizard-driven interface as
    shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![BAS installation and configuration](img/7401EN_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: BizTalk Adapter Service configuration in Visual Studio Server Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, setting up the relay connectivity with on-premises SQL Server
    Express running on localhost with DemoDB as the database involves the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Server Explorer** BAS view, right-click on **LOB Types** | **SQL**
    and choose **Add SQL Target**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the pop-up wizard, read the instructions and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter values for the server name, instance, and catalog (say `localhost`, `SQLExpress`,
    and `DemoDB`, respectively). Use Windows authentication or the username and password
    as configured and click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Tables** (or **Views**) is exposed via relay, choose the table,
    and select **Insert** as the operation. Click on **Properties** to see the WSDL
    generated. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the **Runtime security type** when the message passes via relay. These
    are the four options we mentioned earlier. Enter the credentials and click on
    **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Specify the LOB Relay URL**, choose **Create a new LOB relay** and enter
    the Service Bus credentials. Enter any name for **LOB relay path** and **LOB relay
    subpath**. Click on **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Create** to complete the creation of the relay and the BAS endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the relay has been successfully set up, each connection will appear under
    the corresponding LOB Type.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming BAS with bridges
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new BizTalk Services project or open an existing one. There are three
    parts to using the BAS configuration with a bridge:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Server Explorer, we can now right-click on the relay connection configured
    earlier and choose **Add Schemas to Project**. The relevant schemas to send and
    receive the target LOB are added in the project. These can be used for mapping
    and validation purposes within the bridge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag-and-drop the connection from the Server Explorer into the Bridge design
    surface. This will create the necessary icon to add a destination connection from
    the bridge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the relay connection and navigate to the **Operations** field in Visual
    Studio properties window. Expand the view and note down the values to the right
    of each of the index [0], [1]. Each of these are the SOAP Action values. To add
    this value, go the Route Action in VS properties and launch the **Route Actions**
    window. Click on **Add** and in the **Edit Route Action** pop up, enter Expression
    as the soap action value copied earlier. Choose **Type** as **Soap** and **Identifier**
    as **Action**. Click on **OK** to accept the changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom code in EAI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we understand hybrid connectivity, let's look at one more functionality
    of bridges, which is to support custom code. Not all capabilities will be available
    out of the box from BizTalk Services. Customization enables developers to plug
    in new functionality that augments the existing message flow. For example, we
    can choose to convert an incoming invoice XML to a user-readable PDF format as
    well as archive the same for legal reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Customization in a bridge is possible at the stage level, route configuration,
    or in transforms. Transforms and its customization were covered in [Chapter 2](ch02.html
    "Chapter 2. Messages and Transforms"), *Messages and Transforms*. In this section,
    we will look at bridge customization.
  prefs: []
  type: TYPE_NORMAL
- en: Message inspectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Message inspectors are custom code hooks for every entry or exit of a stage
    in a bridge. Custom code must implement the `IMessageInspector` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Message inspectors are implemented using the Task programming model in the .NET4
    Task Parallel Library. Traces in custom code can be emitted using the `ITracer`
    interface in the `IMessageInspectorContext` interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following are key points to remember when developing custom code:'
  prefs: []
  type: TYPE_NORMAL
- en: User code is expected to be resilient, but in some cases, it could throw an
    exception. In this case, this is treated as a stage level failure and the corresponding
    track record is generated.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User code in the VS project must have references to `Microsoft.BizTalk.Services.dll`
    from `C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\ide\Extensions`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User code assemblies must be added as reference in the BizTalk Services project
    with `Copy Local` set to true.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whenever the user code assemblies are deployed in BizTalk Services, the service
    must be restarted as the DLLs need to be reloaded in the .NET AppDomain. The restart
    option is available in the VS deploy and in the PS cmdlet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Artifacts of the bridge such as the schema or map are not accessible within
    the user code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties can be defined and promoted in the custom code. In code, they must
    be string property with C# attribute `PipelinePropertyAttribute` set with the
    `Name` attribute. This attribute is set in the VS Property Configuration in the
    Message Inspector configuration window as seen in the *Custom code configuration
    with bridges* figure in the *Configuring the bridge* section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Tracking helps in storing interesting properties of a message in the tracking
    store. The tracking store is an Azure SQL database configured during BizTalk Services
    provisioning time. All message properties are stored in the `PipelineTrackRecords`
    and `SourceTrackRecords` tables. Tracking for troubleshooting is detailed in [Chapter
    7](ch07.html "Chapter 7. Tracking and Troubleshooting"), *Tracking and Troubleshooting*.
  prefs: []
  type: TYPE_NORMAL
- en: To enable tracking at the EAI bridge, select the bridge in VS and choose **Track
    Properties** from the properties window. The tracked properties can be seen in
    the BizTalk Services portal's Tracking view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tracking](img/7401EN_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Configure tracking properties with bridges
  prefs: []
  type: TYPE_NORMAL
- en: Scenario walk-through
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's revisit the EAI scenario with the following changes.
  prefs: []
  type: TYPE_NORMAL
- en: Northwind is an online retailer who manages an e-commerce website for customer
    purchases. Instead of processing orders, let's say they now receive invoices from
    their suppliers for the goods sold. For readability and regulatory reasons, they
    need to store this in PDF format in an on-premises system.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It is assumed that the BizTalk Services SDK has been installed and Visual Studio
    shows the following projects:'
  prefs: []
  type: TYPE_NORMAL
- en: 'BizTalk Service project: Create/Deploy bridges, schemas, and maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'BizTalk Service artifacts project: Create/Deploy schemas, and maps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Northwind creates a new BizTalk Services deployment. See [Chapter 1](ch01.html
    "Chapter 1. Hello BizTalk Services"), *Hello BizTalk Services* on creating a BizTalk
    Services deployment and registering the BizTalk portal. We are going to use the
    PDFTemplate utility from [pdftemplate.codeplex.com](http://pdftemplate.codeplex.com)
    to generate PDF-formatted invoice messages. The utility is available under the
    GPLv2 license.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The solution would take the invoice XML and generate the PDF in a blob store.
    To get started, let's first create the schema, add the code to generate the PDF,
    and finally plug that logic into the bridge configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a schema
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Create a sample schema for use with the incoming message. The sample used in
    this flow is provided along with this chapter. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Visual Studio schema editor, create a simple schema called `InvoiceSchema.xsd`
    for the invoice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Visual Studio command prompt, run the following command to generate
    `InvoiceSchema.cs` for this xsd:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will load this `InvoiceSchema.cs` file in the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating custom code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s now add the custom code to generate the PDF for the invoice we just
    created:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a C# class library project and add a reference to `Microsoft.BizTalk.Services.dll`
    and the PDF dependencies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement a class for the `IMessageInspector` interface. In the example, we
    have extracted the message body to the `Order` message object as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'PDFGenerator describes the layout of the PDF structure in `layout.xml` as required
    by the codeplex tool. The XML itself is passed within the custom code DLL as an
    embedded resource and must be extracted before use as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Fill in the header, body, loop, and footer data of the PDF file using the data
    from the `Order` object. Use the PDFGenerator using the information shown in the
    following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write the PDF data back as a new message shown in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Sign the assembly output from the project. Note that all the DLL dependencies
    are needed to be signed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the bridge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure the bridge:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a BizTalk Services project to the same solution and add references to the
    signed custom code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a bridge, in this case, a **Pass-Through** bridge, and call it Invoice2PDF.
    Also add the route for the message to a Windows Azure blob destination. Let's
    call the blob storage **PDFArchiveBlobs** as shown in the following figure:![Configuring
    the bridge](img/7401EN_04_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Invoice2PDF bridge sample in BizTalk Services project
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the bridge properties, fill the required fields. For the bridge, add the
    BizTalk Services **Runtime Address** and **Routing Table** values. For the blob,
    add the **Shared Access Signature URL**. Click on the bridge, and from the properties
    window, open **Track Properties** on the bridge window to enable tracking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Get the full qualified assembly name of this custom code. If this is specified
    incorrectly, you will get an error during deployment. You can use the **GetAssemblyQualifiedTypeName**
    sample in MSDN Code Gallery, [http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-EAI-56915d1c/view/SourceCode](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-EAI-56915d1c/view/SourceCode),
    or alternatively, run `sn -T` on the DLL to determine the public key and determine
    the full qualified name. It should look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Double-click on the pass-through bridge and click on the Enrich stage. From
    the properties window, click on **On-Exit Message Inspector** and add the full
    qualified name in the **Specify Custom Code Inspector** pop-up window, as shown
    in the following screenshot:![Configuring the bridge](img/7401EN_04_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Custom code configuration with bridges
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Deploying the bridge
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can now deploy the bridge to the BizTalk Services deployment with the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Launch VS and select the **Deploy** command from the **Build** menu and enter
    the BizTalk Service deployment details.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the project is being deployed more than once, you need to check the **Refresh
    Service after deploy** checkbox so that the updated custom code DLLs are picked-up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The VS output block will be similar to the one shown as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Deploying the bridge](img/7401EN_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: VS output for bridge deployment
  prefs: []
  type: TYPE_NORMAL
- en: Sending messages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Use the Message Sender tool from MSDN Code Gallery samples for BizTalk Services
    to send messages to the bridge, or you can also download the BizTalk Services
    Explorer plugin for VS Server Explorer. This allows you to explore the deployment
    and also send test messages.
  prefs: []
  type: TYPE_NORMAL
- en: Once the messages are sent successfully, go to the container with the SAS URL
    and save the blob locally. Rename the file to a `.PDF` extension and you should
    be able to view the archived PDFs.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing tracking data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Click on the Tracking view in the navigation bar of the BizTalk Services portal
    to see the status of message flow on the bridge. It's also possible to view this
    information from the BizTalk Service Explorer in VS on a per-bridge basis.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started with the basic concepts of EAI on Azure, notably
    bridges, sources, destinations, hybrid connectivity, and custom code. We walked
    through a simple scenario in BizTalk Services generating PDF invoices and archiving
    in a blob store. It is possible to encounter an error while using custom code
    in bridges. We will cover aspects of troubleshooting in [Chapter 7](ch07.html
    "Chapter 7. Tracking and Troubleshooting"), *Tracking and Troubleshooting*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at another key scenario supported in BizTalk
    Services—integrating across businesses using B2B capabilities.
  prefs: []
  type: TYPE_NORMAL
