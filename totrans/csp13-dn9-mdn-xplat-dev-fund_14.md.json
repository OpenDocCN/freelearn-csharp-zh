["```cs\n    <ItemGroup Label=\"For Blazor.\">\n      <PackageVersion Include=\n        \"Microsoft.AspNetCore.Components.WebAssembly.Server\"\n        Version=\"9.0.0\" />\n      <PackageVersion Include=\n        \"Microsoft.AspNetCore.Components.WebAssembly\"\n        Version=\"9.0.0\" />\n    </ItemGroup> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net9.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n      <ItemGroup>\n        <ProjectReference Include=\"..\\Northwind.Blazor.Client\\Northwind.Blazor.Client.csproj\" />\n        <PackageReference Include=\"Microsoft.AspNetCore.Components.WebAssembly.Server\" />\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\">\n      <PropertyGroup>\n        <TargetFramework>net9.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n        <NoDefaultLaunchSettingsFile>true</NoDefaultLaunchSettingsFile>\n        <StaticWebAssetProjectMode>Default</StaticWebAssetProjectMode>\n      </PropertyGroup>\n      <ItemGroup>\n        <PackageReference Include=\"Microsoft.AspNetCore.Components.WebAssembly\" />\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    using Northwind.Blazor.Client.Pages;\n    using Northwind.Blazor.Components;\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    **builder.Services.AddRazorComponents()**\n     **.AddInteractiveServerComponents()**\n     **.AddInteractiveWebAssemblyComponents();**\n    var app = builder.Build(); \n    ```", "```cs\n    // Configure the HTTP request pipeline.\n    if (app.Environment.IsDevelopment())\n    {\n      app.UseWebAssemblyDebugging();\n    }\n    else\n    {\n      app.UseExceptionHandler(\n        \"/Error\", createScopeForErrors: true);\n      // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.\n      app.UseHsts();\n    }\n    app.UseHttpsRedirection();\n    app.UseAntiforgery();\n    app.MapStaticAssets();\n    **app.MapRazorComponents<App>()**\n     **.AddInteractiveServerRenderMode()**\n     **.AddInteractiveWebAssemblyRenderMode()**\n     **.AddAdditionalAssemblies(**\n     **typeof(Northwind.Blazor.Client._Imports).Assembly);**\n    app.Run(); \n    ```", "```cs\n    using Microsoft.AspNetCore.Components.WebAssembly.Hosting;\n    var builder = WebAssemblyHostBuilder.CreateDefault(args);\n    await builder.Build().RunAsync(); \n    ```", "```cs\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"utf-8\" />\n      <meta name=\"viewport\"\n            content=\"width=device-width, initial-scale=1.0 \" />\n      <base href=\"/\" />\n      <link rel=\"stylesheet\"\n            href=\"@Assets[\"bootstrap/bootstrap.min.css\"]\" />\n      <link rel=\"stylesheet\" href=\"@Assets[\"app.css\"]\" />\n      <link rel=\"stylesheet\"\n            href=\"@Assets[\"Northwind.Blazor.styles.css\"]\" />\n      **<ImportMap />**\n      <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\" />\n      **<****HeadOutlet** **/>**\n    </head>\n    <body>\n      **<****Routes** **/>**\n      **<****script****src****=****\"****_framework/blazor.web.js\"****></****script****>**\n    </body>\n    </html> \n    ```", "```cs\n    <Router AppAssembly=\"@typeof(Program).Assembly\"\n      AdditionalAssemblies=\"new[] {\n        typeof(Client._Imports).Assembly }\">\n      <Found Context=\"routeData\">\n        <RouteView RouteData=\"@routeData\"\n                   DefaultLayout=\"@typeof(Layout.MainLayout)\" />\n        <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\n      </Found>\n    </Router> \n    ```", "```cs\n    @using System.Net.Http\n    @using System.Net.Http.Json\n    @using Microsoft.AspNetCore.Components.Forms\n    @using Microsoft.AspNetCore.Components.Routing\n    @using Microsoft.AspNetCore.Components.Web\n    @using static Microsoft.AspNetCore.Components.Web.RenderMode\n    @using Microsoft.AspNetCore.Components.Web.Virtualization\n    @using Microsoft.JSInterop\n    @using Northwind.Blazor\n    @using Northwind.Blazor.Client\n    @using Northwind.Blazor.Components \n    ```", "```cs\n    @inherits LayoutComponentBase\n    <div class=\"page\">\n      <div class=\"sidebar\">\n        <NavMenu />\n      </div>\n      <main>\n        <div class=\"top-row px-4\">\n          <a href=\"https://learn.microsoft.com/aspnet/core/\"\n             target=\"_blank\">About</a>\n        </div>\n        <article class=\"content px-4\">\n          @Body\n        </article>\n      </main>\n    </div>\n    <div id=\"blazor-error-ui\" data-nosnippet>\n        An unhandled error has occurred.\n        <a href=\".\" class=\"reload\">Reload</a>\n        <span class=\"dismiss\">![](img/11.png)</span>\n    </div> \n    ```", "```cs\n    <div class=\"top-row ps-3 navbar navbar-dark\">\n      <div class=\"container-fluid\">\n        <a class=\"navbar-brand\" href=\"\">Northwind.Blazor</a>\n      </div>\n    </div>\n    <input type=\"checkbox\" title=\"Navigation menu\"\n           class=\"navbar-toggler\" />\n    <div class=\"nav-scrollable\" onclick=\n         \"document.querySelector('.navbar-toggler').click()\">\n      <nav class=\"flex-column\">\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"\"\n                   Match=\"NavLinkMatch.All\">\n            <span class=\"bi bi-house-door-fill-nav-menu\"\n                  aria-hidden=\"true\"></span> Home\n          </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"counter\">\n            <span class=\"bi bi-plus-square-fill-nav-menu\"\n                  aria-hidden=\"true\"></span> Counter\n          </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n          <NavLink class=\"nav-link\" href=\"weather\">\n            <span class=\"bi bi-list-nested-nav-menu\"\n                  aria-hidden=\"true\"></span> Weather\n          </NavLink>\n        </div>\n      </nav>\n    </div> \n    ```", "```cs\n    @page \"/\"\n    <PageTitle>Home</PageTitle>\n    <h1>Hello, world!</h1>\n    Welcome to your new app. \n    ```", "```cs\n    @page \"/weather\"\n    @attribute [StreamRendering]\n    <PageTitle>Weather</PageTitle>\n\n    <h1>Weather</h1>\n    <p>This component demonstrates showing data.</p>\n    @if (forecasts == null)\n    {\n      <p><em>Loading...</em></p>\n    }\n    else\n    {\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Date</th>\n            <th>Temp. (C)</th>\n            <th>Temp. (F)</th>\n            <th>Summary</th>\n          </tr>\n        </thead>\n        <tbody>\n        @foreach (var forecast in forecasts)\n        {\n          <tr>\n            <td>@forecast.Date.ToShortDateString()</td>\n            <td>@forecast.TemperatureC</td>\n            <td>@forecast.TemperatureF</td>\n            <td>@forecast.Summary</td>\n           </tr>\n        }\n        </tbody>\n      </table>\n    }\n    @code {\n      private WeatherForecast[]? forecasts;\n      protected override async Task OnInitializedAsync()\n      {\n        // Simulate asynchronous loading to demonstrate streaming rendering\n        await Task.Delay(500);\n        var startDate = DateOnly.FromDateTime(DateTime.Now);\n        var summaries = new[] { \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\",\n          \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\" };\n        forecasts = Enumerable.Range(1, 5).Select(index =>\n          new WeatherForecast\n          {\n            Date = startDate.AddDays(index),\n            TemperatureC = Random.Shared.Next(-20, 55),\n            Summary = summaries[Random.Shared.Next(summaries.Length)]\n          }).ToArray();\n      }\n      private class WeatherForecast\n      {\n        public DateOnly Date { get; set; }\n        public int TemperatureC { get; set; }\n        public string? Summary { get; set; }\n        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);\n      }\n    } \n    ```", "```cs\n    @page \"/counter\"\n    @rendermode InteractiveAuto\n    <PageTitle>Counter</PageTitle>\n    <h1>Counter</h1>\n    <p role=\"status\">Current count: @currentCount</p>\n    <button class=\"btn btn-primary\"\n      @onclick=\"IncrementCount\">Click me</button>\n    @code {\n      private int currentCount = 0;\n      private void IncrementCount()\n      {\n        currentCount++;\n      }\n    } \n    ```", "```cs\n@page \"/customers\" \n```", "```cs\napp.MapGet(\"/customers\", () => ...); \n```", "```cs\n@page \"/weather\"\n@page \"/forecast\" \n```", "```cs\n@page \"/customers/{country}\"\n<div>Country parameter as the value: @Country</div>\n@code {\n  [Parameter]\n  public string Country { get; set; }\n} \n```", "```cs\n@page \"/customers/{country?}\"\n<div>Country parameter as the value: @Country</div>\n@code {\n  [Parameter]\n  public string Country { get; set; }\n  protected override void OnParametersSet()\n  {\n    // If the automatically set property is null, then\n    // set its value to USA.\n    Country = Country ?? \"USA\";\n  }\n} \n```", "```cs\n<a href=\"/customers\">Customers</a> \n```", "```cs\n<NavLink href=\"/customers\">Customers</NavLink> \n```", "```cs\n/customers\n/customers/USA\n/customers/Germany/Berlin \n```", "```cs\n<NavLink href=\"/customers\" Match=\"NavLinkMatch.All\">Customers</NavLink> \n```", "```cs\nusing Microsoft.AspNetCore.Components;\npublic abstract class ComponentBase\n  : IComponent, IHandleAfterRender, IHandleEvent\n{\n  // Members not shown.\n} \n```", "```cs\n@inherits LayoutComponentBase\n<div>\n  ...\n  @Body\n  ...\n</div> \n```", "```cs\n@page \"/customers\"\n@layout AlternativeLayout\n<div>\n  ...\n</div> \n```", "```cs\n    \"applicationUrl\": \"https://localhost:**5141**;http://localhost:**5140**\", \n    ```", "```cs\n    <h3>\n      Customers **@(string.IsNullOrWhiteSpace(Country)**\n     **? \"Worldwide\" : \"in \" + Country)**\n    </h3>\n    @code {\n     **[Parameter]**\n     **public string? Country { get; set; }**\n    } \n    ```", "```cs\n    <Customers Country=\"Germany\" />\n    <Customers /> \n    ```", "```cs\n    .bi-house-door-fill-nav-menu {\n        background-image: url(\"data:image/svg+xml,...\");\n    }\n    .bi-plus-square-fill-nav-menu {\n        background-image: url(\"data:image/svg+xml,...\");\n    }\n    .bi-list-nested-nav-menu {\n        background-image: url(\"data:image/svg+xml,...\");\n    } \n    ```", "```cs\n    <link rel=\"stylesheet\" href=\"@Assets[\"icons.css\"]\" /> \n    ```", "```cs\n    @page \"/customers/{country?}\" \n    ```", "```cs\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"customers\"\n               Match=\"NavLinkMatch.All\">\n        <span class=\"bi bi-globe\" aria-hidden=\"true\"></span>\n        Customers Worldwide\n      </NavLink>\n    </div>\n    <div class=\"nav-item px-3\">\n      <NavLink class=\"nav-link\" href=\"customers/Germany\">\n        <span class=\"bi bi-globe-europe-africa\"\n              aria-hidden=\"true\"></span>\n        Customers in Germany\n      </NavLink>\n    </div> \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\..\\Northwind.DataContext.Sqlite\n    \\Northwind.DataContext.Sqlite.csproj\" />\n    </ItemGroup>\n    <ItemGroup>\n      <Using Include=\"Northwind.EntityModels\" />\n    </ItemGroup> \n    ```", "```cs\n    builder.Services.AddNorthwindContext(\n      relativePath: @\"..\\..\"); \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\Northwind.EntityModels.Sqlite\\\n    Northwind.EntityModels.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Northwind.EntityModels; // To use Customer.\n    namespace Northwind.Blazor.Services;\n    public interface INorthwindService\n    {\n      Task<List<Customer>> GetCustomersAsync();\n      Task<List<Customer>> GetCustomersAsync(string country);\n      Task<Customer?> GetCustomerAsync(string id);\n      Task<Customer> CreateCustomerAsync(Customer c);\n      Task<Customer> UpdateCustomerAsync(Customer c);\n      Task DeleteCustomerAsync(string id);\n    } \n    ```", "```cs\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\"..\\Northwind.DataContext.Sqlite\n    \\Northwind.DataContext.Sqlite.csproj\" />\n    **<****ProjectReference****Include****=****\"****..\\..\\Northwind.Blazor.Services\\**\n    **Northwind.Blazor.Services.csproj\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // To use ToListAsync<T>.\n    namespace Northwind.Blazor.Services;\n    public class NorthwindServiceServerSide : INorthwindService\n    {\n      private readonly NorthwindContext _db;\n      public NorthwindServiceServerSide(NorthwindContext db)\n      {\n        _db = db;\n      }\n      public Task<List<Customer>> GetCustomersAsync()\n      {\n        return _db.Customers.ToListAsync();\n      }\n      public Task<List<Customer>> GetCustomersAsync(string country)\n      {\n        return _db.Customers.Where(c => c.Country == country).ToListAsync();\n      }\n      public Task<Customer?> GetCustomerAsync(string id)\n      {\n        return _db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id);\n      }\n      public Task<Customer> CreateCustomerAsync(Customer c)\n      {\n        _db.Customers.Add(c);\n        _db.SaveChangesAsync();\n        return Task.FromResult(c);\n      }\n      public Task<Customer> UpdateCustomerAsync(Customer c)\n      {\n        _db.Entry(c).State = EntityState.Modified;\n        _db.SaveChangesAsync();\n        return Task.FromResult(c);\n      }\n      public Task DeleteCustomerAsync(string id)\n      {\n        Customer? customer = _db.Customers.FirstOrDefaultAsync\n          (c => c.CustomerId == id).Result;\n        if (customer == null)\n        {\n          return Task.CompletedTask;\n        }\n        else\n        {\n          _db.Customers.Remove(customer);\n          return _db.SaveChangesAsync();\n        }\n      }\n    } \n    ```", "```cs\n    using Northwind.Blazor.Services; // To use INorthwindService. \n    ```", "```cs\n    builder.Services.AddTransient<INorthwindService,\n      NorthwindServiceServerSide>(); \n    ```", "```cs\n    @using Northwind.Blazor.Services @* To use INorthwindService. *@\n    @using Northwind.EntityModels @* To use Northwind entities. *@ \n    ```", "```cs\n    @page \"/customers/{country?}\"\n    **@inject INorthwindService _service**\n    <h3>\n      Customers @(string.IsNullOrWhiteSpace(Country)\n        ? \"Worldwide\" : \"in \" + Country)\n    </h3>\n    **@if (customers is null)**\n    **{**\n    **<****p****><****em****>****Loading...****</****em****></****p****>**\n    **}**\n    **else**\n    **{**\n    **<****table****class****=****\"table\"****>**\n    **<****thead****>**\n    **<****tr****>**\n    **<****th****>****Id****</****th****>**\n    **<****th****>****Company Name****</****th****>**\n    **<****th****>****Address****</****th****>**\n    **<****th****>****Phone****</****th****>**\n    **<****th****></****th****>**\n    **</****tr****>**\n    **</****thead****>**\n    **<****tbody****>**\n     **@foreach (Customer c in customers)**\n     **{**\n    **<****tr****>**\n    **<****td****>****@c.CustomerId****</****td****>**\n    **<****td****>****@c.CompanyName****</****td****>**\n    **<****td****>**\n     **@c.Address****<****br****/>**\n     **@c.City****<****br****/>**\n     **@c.PostalCode****<****br****/>**\n     **@c.Country**\n    **</****td****>**\n    **<****td****>****@c.Phone****</****td****>**\n    **<****td****>**\n    **<****a****class****=****\"btn btn-info\"****href****=****\"editcustomer/@c.CustomerId\"****>**\n    **<****i****class****=****\"****bi bi-pencil\"****></****i****></****a****>**\n    **<****a****class****=****\"btn btn-danger\"**\n    **href****=****\"deletecustomer/@c.CustomerId\"****>**\n    **<****i****class****=****\"bi bi-trash\"****></****i****></****a****>**\n    **</****td****>**\n    **</****tr****>**\n     **}**\n    **</****tbody****>**\n    **</****table****>**\n    **}**\n    @code {\n      [Parameter]\n      public string? Country { get; set; }\n     **private IEnumerable****<****Customer****>****? customers;**\n     **protected override async Task OnParametersSetAsync()**\n     **{**\n     **if (string.IsNullOrWhiteSpace(Country))**\n     **{**\n     **customers = await _service.GetCustomersAsync();**\n     **}**\n     **else**\n     **{**\n     **customers = await _service.GetCustomersAsync(Country);**\n     **}**\n     **}**\n    } \n    ```", "```cs\n    @attribute [StreamRendering] \n    ```", "```cs\n    protected override async Task OnParametersSetAsync()\n    {\n      **await** **Task.Delay(****1000****);** **// Delay for one second.**\n      ...\n    } \n    ```", "```cs\n<EditForm Model=\"@customer\" OnSubmit=\"ExtraValidation\">\n  <DataAnnotationsValidator />\n  <ValidationSummary />\n  <InputText id=\"name\" @bind-Value=\"customer.CompanyName\" />\n  <button type=\"submit\">Submit</button>\n</EditForm>\n@code {\n  private Customer customer = new();\n  private void ExtraValidation()\n  {\n    // Perform any extra validation you want.\n  }\n} \n```", "```cs\n<ValidationMessage For=\"@(() => Customer.CompanyName)\" /> \n```", "```cs\n    <EditForm Model=\"@Customer\" OnValidSubmit=\"@OnValidSubmit\">\n      <DataAnnotationsValidator />\n      <div>\n        <label class=\"form-label\">Customer Id</label>\n        <div>\n          <InputText class=\"form-control\"\n                     @bind-Value=\"@Customer.CustomerId\" />\n          <ValidationMessage For=\"@(() => Customer.CustomerId)\" />\n        </div>\n      </div>\n      <div>\n        <label class=\"form-label\">Company Name</label>\n        <div>\n          <InputText class=\"form-control\"\n                     @bind-Value=\"@Customer.CompanyName\" />\n          <ValidationMessage For=\"@(() => Customer.CompanyName)\" />\n        </div>\n      </div>\n      <div>\n        <label class=\"form-label\">Address</label>\n        <div>\n          <InputText class=\"form-control\"\n                     @bind-Value=\"@Customer.Address\" />\n          <ValidationMessage For=\"@(() => Customer.Address)\" />\n        </div>\n      </div>\n      <div>\n        <label class=\"form-label\">Country</label>\n        <div>\n          <InputText class=\"form-control\"\n                     @bind-Value=\"@Customer.Country\" />\n          <ValidationMessage For=\"@(() => Customer.Country)\" />\n        </div>\n      </div>\n      <button type=\"submit\" class=\"btn btn-@ButtonStyle\">\n        @ButtonText\n      </button>\n    </EditForm>\n    @code {\n      [Parameter]\n      public Customer Customer { get; set; } = null!;\n      [Parameter]\n      public string ButtonText { get; set; } = \"Save Changes\";\n      [Parameter]\n      public string ButtonStyle { get; set; } = \"info\";\n      [Parameter]\n      public EventCallback OnValidSubmit { get; set; }\n    } \n    ```", "```cs\n    @rendermode RenderMode.InteractiveServer\n    @page \"/createcustomer\"\n    @inject INorthwindService _service\n    @inject NavigationManager _navigation\n    <h3>Create Customer</h3>\n    <CustomerDetail ButtonText=\"Create Customer\"\n                    Customer=\"@customer\"\n                    OnValidSubmit=\"@Create\" />\n    @code {\n      private Customer customer = new();\n      private async Task Create()\n      {\n        await _service.CreateCustomerAsync(customer);\n        _navigation.NavigateTo(\"customers\");\n      }\n    } \n    ```", "```cs\n    <div>\n      <a class=\"btn btn-info\" href=\"createcustomer\">\n      <i class=\"bi bi-plus-square\"></i> Create New</a>\n    </div> \n    ```", "```cs\n    @rendermode RenderMode.InteractiveServer\n    @page \"/editcustomer/{customerid}\"\n    @inject INorthwindService _service\n    @inject NavigationManager _navigation\n    <h3>Edit Customer</h3>\n    <CustomerDetail ButtonText=\"Update\"\n                    Customer=\"@customer\"\n                    OnValidSubmit=\"@Update\" />\n    @code {\n      [Parameter]\n      public string CustomerId { get; set; } = null!;\n      private Customer? customer = new();\n      protected override async Task OnParametersSetAsync()\n      {\n        customer = await _service.GetCustomerAsync(CustomerId);\n      }\n      private async Task Update()\n      {\n        if (customer is not null)\n        {\n          await _service.UpdateCustomerAsync(customer);\n        }\n        _navigation.NavigateTo(\"customers\");\n      }\n    } \n    ```", "```cs\n    @rendermode RenderMode.InteractiveServer\n    @page \"/deletecustomer/{customerid}\"\n    @inject INorthwindService _service\n    @inject NavigationManager _navigation\n    <h3>Delete Customer</h3>\n    <div class=\"alert alert-danger\">\n      Warning! This action cannot be undone!\n    </div>\n    <CustomerDetail ButtonText=\"Delete Customer\"\n                    ButtonStyle=\"danger\"\n                    Customer=\"@customer\"\n                    OnValidSubmit=\"@Delete\" />\n    @code {\n      [Parameter]\n      public string CustomerId { get; set; } = null!;\n      private Customer? customer = new();\n      protected override async Task OnParametersSetAsync()\n      {\n        customer = await _service.GetCustomerAsync(CustomerId);\n      }\n      private async Task Delete()\n      {\n        if (customer is not null)\n        {\n          await _service.DeleteCustomerAsync(CustomerId);\n        }\n        _navigation.NavigateTo(\"customers\");\n      }\n    } \n    ```", "```cs\n<TimesTable Number=\"6\" />\n<TimesTable Number=\"7\" Size=\"10\" /> \n```", "```cs\n    List<string?> GetCountries(); \n    ```", "```cs\n    public List<string?> GetCountries()\n    {\n      return _db.Customers.Select(c => c.Country)\n        .Distinct().OrderBy(country => country).ToList();\n    } \n    ```", "```cs\n    @inject INorthwindService _service\n    ...\n    @foreach(string? country in _service.GetCountries())\n    {\n        string countryLink = \"customers/\" + country;\n        <div class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"@countryLink\">\n            <span class=\"oi oi-people\" aria-hidden=\"true\"></span>\n            Customers in @country\n            </NavLink>\n        </div>\n    } \n    ```"]