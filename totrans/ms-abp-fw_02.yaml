- en: '*Chapter 1*: Modern Software Development and ABP Framework'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：现代软件开发与ABP框架'
- en: Building software systems has always been complicated. Especially in these modern
    times, there are many challenges while creating even a basic business solution.
    You often find yourself implementing standard non-business requirements and digging
    into infrastructure problems rather than implementing your business code, which
    is the actual valuable part of the system you are trying to build.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建软件系统一直都很复杂。特别是在这些现代时期，即使创建一个基本的企业解决方案也会遇到许多挑战。你常常发现自己正在实现标准非业务需求，而不是实现你试图构建的系统中的真正有价值的业务代码，而是深入到基础设施问题中。
- en: ABP Framework helps you focus on the code that adds value to the stakeholders
    by offering a robust software architecture, automating the repetitive details,
    and providing the necessary infrastructure to help build modern web solutions.
    It provides an end-to-end, consistent development experience and improves your
    productivity. ABP gets you and your team up to speed with all the modern software
    development best practices pre-applied.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: ABP框架通过提供强大的软件架构、自动化重复的细节并提供构建现代Web解决方案所需的基础设施，帮助你专注于为利益相关者增加价值的代码。它提供了一个端到端的、一致的开发体验，并提高了你的生产力。ABP通过预先应用所有现代软件开发最佳实践，让你和你的团队能够迅速跟上。
- en: This book is the ultimate guide to developing web applications and systems using
    ABP Framework by following modern software development approaches and best practices.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书是使用现代软件开发方法和最佳实践通过ABP框架开发Web应用程序和系统的终极指南。
- en: This first chapter introduces the challenges of building a well-architected
    enterprise solution and explains how ABP Framework addresses these challenges.
    I will also explain the purpose and the structure of this book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这第一章介绍了构建良好架构的企业解决方案的挑战，并解释了ABP框架如何解决这些挑战。我还会解释这本书的目的和结构。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Challenges of developing an enterprise web solution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发企业级Web解决方案的挑战
- en: Understanding what ABP Framework offers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解ABP框架提供的内容
- en: Challenges of developing an enterprise web solution
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发企业级Web解决方案的挑战
- en: 'Before digging into ABP Framework, I want to present the challenges of developing
    a modern enterprise web solution to understand why we need an application framework
    like ABP Framework. Let''s begin with the big picture: architecture.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入研究ABP框架之前，我想先介绍开发现代企业级Web解决方案的挑战，以便理解为什么我们需要像ABP框架这样的应用程序框架。让我们从大局开始：架构。
- en: Setting up the architecture
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置架构
- en: Before you start to write your code, you need to create a foundation for your
    solution. This is one of the most challenging phases of building a software system.
    You have a lot of options and need to make some fundamental decisions. Any decision
    you make at this stage will likely affect your application for the rest of its
    lifetime.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在你开始编写代码之前，你需要为你的解决方案创建一个基础。这是构建软件系统中最具挑战性的阶段之一。你有许多选择，需要做出一些基本的决定。在这个阶段你做出的任何决定都可能影响你的应用程序在其整个生命周期中的表现。
- en: There are some common, well-known, system-level architectural patterns, such
    as **monolithic architecture**, **modular architecture**, and **microservice architecture**.
    Applying one of these architectures determines how you develop, deploy, and scale
    your solution and should be decided based on your requirements.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些常见的、众所周知的系统级架构模式，例如**单体架构**、**模块化架构**和**微服务架构**。应用这些架构之一决定了你如何开发、部署和扩展你的解决方案，并且应该基于你的需求来决定。
- en: In addition to these system-level patterns, software development models such
    as **Command and Query Responsibility Segregation** (**CQRS**), **Domain-Driven
    Design** (**DDD**), **Layered Architecture**, and **Clean Architecture** determine
    how your code base is shaped.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些系统级模式之外，软件开发模型如**命令查询责任分离**（**CQRS**）、**领域驱动设计**（**DDD**）、**分层架构**和**整洁架构**决定了你的代码库是如何形成的。
- en: Once you decide on your architecture, you should create the fundamental solution
    structure to start development with that architecture. In this phase, you also
    need to decide which language, framework, tools, and libraries you will use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你决定了你的架构，你应该创建一个基本解决方案结构，以便使用该架构开始开发。在这个阶段，你还需要决定你将使用哪种语言、框架、工具和库。
- en: All these decisions need significant experience, so they are ideally done by
    experienced software architects and developers. However, not all the team members
    will have the same experience and knowledge level. You need to train them and
    determine the correct coding standards.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些决策都需要丰富的经验，因此最好由经验丰富的软件架构师和开发者来完成。然而，并非所有团队成员都有相同经验和知识水平。你需要对他们进行培训并确定正确的编码标准。
- en: After setting up your architecture and preparing the fundamental solution, your
    team can start the development process. The next section discusses the common
    aspects that are repeated by every software solution and how you can avoid repeating
    them in your development.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好架构和准备基本解决方案之后，你的团队可以开始开发过程。下一节将讨论每个软件解决方案都会重复的常见方面以及如何在开发中避免重复。
- en: Don't repeat yourself!
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 不要重复自己！
- en: '**Don''t Repeat Yourself** (**DRY**) is a key principle for software development.
    Computers automate the repetitive tasks of the real world to make people''s lives
    easier. So, why do we repeat ourselves while building software solutions?'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**不要重复自己**（**DRY**）是软件开发的一个关键原则。计算机通过自动化现实世界的重复性任务来使人们的生活更轻松。那么，为什么我们在构建软件解决方案时还要重复自己呢？'
- en: Authentication is a very common concern of every software solution – single
    sign-on, Active Directory integration, token-based authentication, social logins,
    two-factor authentication, forgot/reset password, email activation, and more.
    Are most of these requirements are familiar to you? You are not alone! Almost
    all software projects have more or less similar requirements for authentication.
    Instead of building all these from scratch, using an existing solution, such as
    a library or a cloud service, is better. Such pre-built solutions are mature and
    battle-tested, which is important for security.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 认证是每个软件解决方案都非常常见的问题——单点登录、Active Directory集成、基于令牌的认证、社交登录、双因素认证、忘记/重置密码、电子邮件激活等等。这些要求你熟悉吗？你不是一个人！几乎所有的软件项目都有或多或少的类似认证要求。与其从头开始构建所有这些，不如使用现有的解决方案，如库或云服务，这样更好。这些预先构建的解决方案是成熟且经过实战检验的，这对于安全性来说很重要。
- en: Some non-functional requirements, such as exception handling, validation, authorization,
    caching, audit logging, and database transaction management, are other sources
    of code repetition. These concerns are called cross-cutting concerns and should
    be handled in every web request. In a well-architected software solution, these
    concerns should be handled automatically by conventions in a central place in
    your code base, or you should have services to make them easier to implement.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一些非功能性需求，如异常处理、验证、授权、缓存、审计日志和数据库事务管理，是代码重复的另一个来源。这些问题被称为横切关注点，应该在每个网络请求中处理。在一个架构良好的软件解决方案中，这些问题应该通过代码库中的约定在中央位置自动处理，或者你应该有服务来使它们更容易实现。
- en: When you integrate to third-party systems, such as RabbitMQ and Redis, you typically
    want to create abstractions and wrappers around the code that interact with these
    systems. In this way, your business logic is isolated from these infrastructure
    components. Also, you don't repeat the same connection, retry, exception handling,
    and logging logic everywhere in your solution.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当你集成第三方系统，如RabbitMQ和Redis时，你通常希望在这些与系统交互的代码周围创建抽象和包装。这样，你的业务逻辑就可以与这些基础设施组件隔离。此外，你也不需要在解决方案的每个地方重复相同的连接、重试、异常处理和日志记录逻辑。
- en: Having a pre-built infrastructure to automate this repetitive work saves your
    development time so that you can focus on your business logic. The next section
    discusses another topic that takes up our time in every business application –
    the user interface.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个预先构建的基础设施来自动化这些重复性工作可以节省你的开发时间，这样你就可以专注于你的业务逻辑。下一节将讨论另一个占据每个业务应用时间的主题——用户界面。
- en: Building a UI base
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建UI基础
- en: One of the fundamental aspects of an application is its **user interface** (**UI**).
    An application with an unfashionable and unusable UI would not be as attractive
    at first glance, even if it has outstanding business value under the hood.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的一个基本方面是其**用户界面**（**UI**）。一个界面过时且难以使用的应用程序，即使在其内部具有出色的业务价值，也不会一开始就吸引人。
- en: While UI features and requirements vary for every application, some fundamental
    structures are common. Most applications need basic elements, such as alerts,
    buttons, cards, form elements, tabs, and data tables. You can use HTML/CSS frameworks
    such as Bootstrap, Bulma, and Ant Design instead of creating a design system for
    every application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个应用程序的UI功能和需求各不相同，但一些基本结构是共同的。大多数应用程序需要基本元素，如警报、按钮、卡片、表单元素、标签页和数据表。您可以使用HTML/CSS框架，如Bootstrap、Bulma和Ant
    Design，而不是为每个应用程序创建一个设计系统。
- en: Almost every web application has a responsive layout with the main menu, toolbar,
    header, and footer with custom colors and branding. You will need to determine
    all these and implement a base UI kit for your application's pages and components.
    In this way, UI developers can create a consistent UI without dealing with the
    common structures.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎每个Web应用程序都有一个响应式布局，包括主菜单、工具栏、页眉和页脚，具有自定义颜色和品牌。您需要确定所有这些，并为您的应用程序页面和组件实现一个基本的UI工具包。这样，UI开发者可以创建一个一致的UI，而无需处理常见的结构。
- en: Up to here, I've introduced some common infrastructure requirements, mostly
    independent from any business application. The next section discusses common business
    requirements for most enterprise systems.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我已经介绍了一些常见的基础设施要求，这些要求大多独立于任何业务应用程序。下一节将讨论大多数企业系统的常见业务需求。
- en: Implementing common business requirements
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现常见业务需求
- en: While every application and system is unique and their value comes from that
    uniqueness, every enterprise system has some fundamental supporting requirements.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然每个应用程序和系统都是独特的，它们的独特性是其价值的来源，但每个企业系统都有一些基本的支持性要求。
- en: A permission-based authorization system is one of these fundamental requirements.
    It is used to control the privileges of users and clients of the application.
    If you want to implement this yourself, you should create an end-to-end solution
    with database tables, authorization logic, permission caches, APIs, and UI pages
    to assign these permissions to your users and check them when needed. However,
    such a system is pretty generic and can be developed as a shared identity management
    functionality (a reusable module) and used by multiple applications.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 基于权限的授权系统是这些基本要求之一。它用于控制应用程序的用户和客户端的权限。如果您想自己实现，您应该创建一个端到端解决方案，包括数据库表、授权逻辑、权限缓存、API和UI页面，以便将这些权限分配给您的用户并在需要时进行检查。然而，这样的系统相当通用，可以作为一个共享的身份管理功能（一个可重用的模块）来开发，并由多个应用程序使用。
- en: Like identity management, many systems need functionalities such as audit log
    reporting, tenant and subscription management (for SaaS applications), language
    management, file uploading and sharing, multi-language management, and time zone
    management. In addition to the pre-built application functionalities (modules),
    there may be low-level requirements, such as implementing the soft-delete pattern
    and storing **Binary Large Object** (**BLOB**) data in your applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 就像身份管理一样，许多系统需要诸如审计日志报告、租户和订阅管理（对于SaaS应用程序）、语言管理、文件上传和共享、多语言管理和时区管理等功能。除了预构建的应用程序功能（模块）之外，还可能有低级要求，例如实现软删除模式以及在您的应用程序中存储**二进制大对象**（**BLOB**）数据。
- en: All these common requirements can be built from scratch, which can be the only
    solution for some enterprise systems. However, if these functionalities are not
    the main value that's provided by your application, you can consider using pre-built
    modules and libraries where they are available and customize them based on your
    requirements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些常见要求都可以从头开始构建，这可能是某些企业系统的唯一解决方案。然而，如果这些功能不是您应用程序提供的主要价值，您可以考虑使用可用的预构建模块和库，并根据您的需求进行定制。
- en: In the next section, you will learn how ABP Framework helps us with the common
    infrastructure and base requirements that were discussed in this section.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将了解ABP框架如何帮助我们实现本节讨论的常见基础设施和基本要求。
- en: Understanding what ABP Framework offers
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解ABP框架提供的功能
- en: ABP Framework offers an opinionated architecture to help you build enterprise
    software solutions with best practices on top of the .NET and ASP.NET Core platforms.
    It provides the fundamental infrastructure, production-ready modules, themes,
    tooling, guides, and documentation to implement that architecture properly and
    automate the details and repetitive work as much as possible.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ABP框架提供了一个有观点的架构，以帮助您在.NET和ASP.NET Core平台上构建企业级软件解决方案，并在此基础上采用最佳实践。它提供了基本的基础设施、生产就绪的模块、主题、工具、指南和文档，以正确实施该架构，并在可能的情况下自动化细节和重复性工作。
- en: In the next few sub-sections, I will explain how ABP does all these, starting
    with the architecture.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个子部分中，我将解释ABP是如何做到这些的，从架构开始。
- en: The ABP architecture
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ABP架构
- en: I mentioned that ABP offers an opinionated architecture. In other words, it
    is an opinionated framework. So, I should first explain what an unopinionated
    framework is and what an opinionated framework is.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到ABP提供了一个有观点的架构。换句话说，它是一个有观点的框架。因此，我首先应该解释什么是无观点的框架，以及什么是有观点的框架。
- en: As I stated in the *Setting up the architecture* section, preparing a foundation
    for a software solution requires a lot of decisions; you should decide on the
    system architecture, development model, techniques, patterns, tools, and libraries
    to use in your solution.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如我在*设置架构*部分所述，为软件解决方案打下基础需要做出许多决定；您应该决定使用哪种系统架构、开发模型、技术、模式、工具和库。
- en: Unopinionated frameworks, such as ASP.NET Core, don't say much about these decisions
    and mostly leave it up to you. For example, you can create a layered solution
    by separating your UI layer from the data access layer, or you can create a single-layered
    solution by directly accessing the database from your UI pages/views. You can
    use any library, so long as it is compatible with ASP.NET Core, and you can apply
    any architectural pattern. Being unopinionated makes ASP.NET Core flexible and
    usable in different scenarios. However, it assigns the responsibility to you to
    make all these decisions, set up the right architecture, and prepare your infrastructure
    to implement that architecture.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 无观点的框架，如ASP.NET Core，对这些决定说得不多，主要留给您自己决定。例如，您可以通过将UI层与数据访问层分离来创建分层解决方案，或者您可以直接从您的UI页面/视图中访问数据库来创建单层解决方案。只要它与ASP.NET
    Core兼容，您就可以使用任何库，并且您可以使用任何架构模式。无观点性使得ASP.NET Core灵活且适用于不同的场景。然而，它将责任分配给您，让您做出所有这些决定，建立正确的架构，并准备基础设施以实施该架构。
- en: I don't mean ASP.NET Core has no opinion at all. It assumes you are building
    a web application or API based on the HTTP specification. It clearly defines how
    your UI and API layers should be developed. It also offers some low-level infrastructure
    components such as dependency injection, caching, and logging (in fact, these
    components are usable in any .NET application and not specific to ASP.NET Core,
    but they are mainly developed alongside ASP.NET Core). However, it doesn't say
    much about how your business code is shaped and which architectural patterns you
    will use.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是说ASP.NET Core没有任何观点。它假设您正在基于HTTP规范构建Web应用程序或API。它明确定义了您的UI和API层应该如何开发。它还提供了一些低级基础设施组件，例如依赖注入、缓存和日志（实际上，这些组件在任何.NET应用程序中都是可用的，并不特定于ASP.NET
    Core，但它们主要是与ASP.NET Core一起开发的）。然而，它并没有太多关于您的业务代码如何构建以及您将使用哪种架构模式的内容。
- en: ABP Framework, on the other hand, is an opinionated framework. It believes that
    certain ways of approaching software development are inherently better and thus
    guide developers down those paths. It has opinions about the architecture, patterns,
    tools, and libraries you will use in your solution. Though ABP Framework is flexible
    enough to use different tools and libraries, and change your architectural decisions,
    you get the best value when you follow its opinions. But don't worry; it provides
    good, industry-accepted solutions to common architectures to help you build maintainable
    software solutions with best practices. The decisions it takes will save your
    time, increase your productivity, and make you focus on your business code rather
    than infrastructural problems.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: ABP 框架，另一方面，是一个有偏见的框架。它认为某些软件开发的方法本质上更好，因此引导开发者沿着这些路径前进。它对你的解决方案中使用的架构、模式、工具和库有自己的看法。尽管
    ABP 框架足够灵活，可以使用不同的工具和库，并改变你的架构决策，但当你遵循它的看法时，你会获得最佳的价值。但不用担心；它提供了良好的、行业认可的解决方案，以帮助您使用最佳实践构建可维护的软件解决方案。它所做的决策将节省您的时间，提高您的生产力，并使您专注于业务代码而不是基础设施问题。
- en: In the next few sections, I will introduce the four fundamental architectures
    ABP stands on.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我将介绍 ABP 所依赖的四个基本架构。
- en: Domain-driven design
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 领域驱动设计
- en: ABP's main goal is to provide a model to build maintainable solutions with clean
    code principles. ABP offers a layered architecture based on DDD patterns and practices.
    It provides a layered startup template (see *The startup templates* section),
    the necessary infrastructure, and guidance for applying that architecture properly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ABP 的主要目标是提供一个模型，以使用干净的代码原则构建可维护的解决方案。ABP 提供了一个基于 DDD 模式和实践的分层架构。它提供了一个分层启动模板（见“启动模板”部分），必要的基础设施以及如何正确应用该架构的指导。
- en: Since ABP is a software framework, it focuses on the technical implementation
    of DDD. *Part 3*, *Implementing Domain-Driven Design*, of this book explains the
    best practices of building a DDD-based solution using ABP Framework.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 ABP 是一个软件框架，它专注于 DDD 的技术实现。本书的第三部分，“实现领域驱动设计”，解释了使用 ABP 框架构建基于 DDD 的解决方案的最佳实践。
- en: Modularity
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模块化
- en: In software development, modularity is a technique that's used to split a system
    into isolated parts, called modules. The ultimate goal is to reduce complexity,
    increase reusability, and enable different teams to work on different sets of
    features in parallel without affecting each other.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，模块化是一种将系统分解为隔离部分（称为模块）的技术。最终目标是减少复杂性，提高可重用性，并使不同的团队能够并行工作在不同的功能集上，而不会相互影响。
- en: 'Modularity has two main challenges that are simplified with ABP Framework:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化有两个主要挑战，ABP 框架简化了这些挑战：
- en: The first challenge is to isolate modules. ASP.NET Core has some features (such
    as Razor component libraries) to support modular applications. Still, it is very
    limited because it is an unopinionated framework and has opinions only for the
    UI and API parts. On the other hand, ABP Framework provides a consistent model
    and infrastructure to build fully isolated, reusable application modules with
    its database, domain, application, and UI layers.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个挑战是隔离模块。ASP.NET Core 有一些功能（如 Razor 组件库）来支持模块化应用程序。然而，它非常有限，因为它是一个无偏见的框架，并且只有对
    UI 和 API 部分的看法。另一方面，ABP 框架提供了一致的模式和基础设施，以使用其数据库、领域、应用和 UI 层构建完全隔离、可重用的应用程序模块。
- en: The second challenge of modularity is dealing with how these isolated modules
    communicate and become a single, unified application at runtime. ABP offers concrete
    models for common requirements of a modular system, such as sharing a database
    among modules, communicating between the modules via events or API calls, and
    installing a module in an application.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模块化的第二个挑战是处理这些隔离的模块如何在运行时进行通信并成为一个单一、统一的应用程序。ABP 为模块化系统的常见需求提供了具体的模型，例如在模块之间共享数据库，通过事件或
    API 调用进行模块间的通信，以及在应用程序中安装模块。
- en: ABP provides many pre-built open source application modules that can be used
    in any application. Some examples include the Identity module, which provides
    user, role, and Permission Management, and the Account module, which provides
    login and register pages for your application. Reusing and customizing these modules
    saves your time. In addition, ABP provides a module startup template to help you
    build reusable application modules. An example of this can be found in [*Chapter
    15*](B17287_15_Epub_AM.xhtml#_idTextAnchor443), *Working with Modularity*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: ABP 提供了许多预构建的开源应用程序模块，可以在任何应用程序中使用。一些例子包括身份模块，它提供用户、角色和权限管理，以及账户模块，它为你的应用程序提供登录和注册页面。重用和定制这些模块可以节省你的时间。此外，ABP
    还提供了一个模块启动模板，帮助你构建可重用的应用程序模块。一个例子可以在[*第15章*](B17287_15_Epub_AM.xhtml#_idTextAnchor443)中找到，*与模块化一起工作*。
- en: Modularity is great for managing the complexity of a large monolithic system.
    However, ABP helps you create microservice solutions too.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化对于管理大型单体系统的复杂性来说非常好。然而，ABP 还可以帮助你创建微服务解决方案。
- en: Microservices
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 微服务
- en: Microservices and distributed architecture is the accepted approach to building
    scalable software systems. It allows different teams to work on different services
    and independently version, deploy, and scale their services.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务和分布式架构是构建可扩展软件系统的公认方法。它允许不同的团队在不同的服务上工作，并独立地版本控制、部署和扩展他们的服务。
- en: However, building a microservice system has some important challenges in terms
    of development, deployment, inter-microservice communication, data consistency,
    monitoring, and more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，构建微服务系统在开发、部署、微服务间通信、数据一致性、监控等方面存在一些重要的挑战。
- en: Microservice architecture is not a problem that a single software framework
    can solve. A microservice system is a solution that brings many different disciplines,
    approaches, technologies, and tools together to solve unique problems. Every microservice
    system has its requirements and restrictions. Each team has a level of expertise,
    knowledge, and skills.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构不是单个软件框架可以解决的问题。微服务系统是一个将许多不同的学科、方法、技术和工具结合在一起来解决独特问题的解决方案。每个微服务系统都有其特定的需求和限制。每个团队都有其专业水平、知识和技能。
- en: ABP Framework was designed to be microservice compatible from the beginning.
    It provides a distributed event bus for asynchronous communication between microservices
    with transaction support (as explained in the *Publishing domain events* section
    of [*Chapter 10*](B17287_10_Epub_AM.xhtml#_idTextAnchor316), *DDD – The Domain
    Layer*). It also provides C# client-side proxies to easily consume the REST APIs
    of remote services (as explained in the *Consuming HTTP APIs* section of [*Chapter
    14*](B17287_14_Epub_AM.xhtml#_idTextAnchor429), *Building HTTP APIs and Real-Time
    Services*).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ABP 框架从一开始就被设计成与微服务兼容。它提供了一个分布式事件总线，用于支持事务的微服务之间的异步通信（如[*第10章*](B17287_10_Epub_AM.xhtml#_idTextAnchor316)中“*发布领域事件*”部分所述，*领域驱动设计
    – 领域层*）。它还提供了 C# 客户端代理，以便轻松消费远程服务的 REST API（如[*第14章*](B17287_14_Epub_AM.xhtml#_idTextAnchor429)中“*消费
    HTTP API*”部分所述，*构建 HTTP API 和实时服务*）。
- en: All of the pre-built ABP application modules are designed so that you can convert
    them into microservices. ABP also provides a detailed guide ([https://docs.abp.io/en/abp/latest/Best-Practices/Index](https://docs.abp.io/en/abp/latest/Best-Practices/Index))
    to explain how you can create such microservice-compatible modules. In this way,
    you can start with a modular monolith, and then convert it into a microservice
    solution later.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的预构建 ABP 应用程序模块都设计得可以转换为微服务。ABP 还提供了一个详细的指南([https://docs.abp.io/en/abp/latest/Best-Practices/Index](https://docs.abp.io/en/abp/latest/Best-Practices/Index))，解释了如何创建这样的微服务兼容模块。这样，你可以从一个模块化的单体开始，然后稍后将其转换为微服务解决方案。
- en: The core ABP team has prepared an open source microservice reference solution
    built with ABP Framework. It demonstrates how you can create a solution with API
    Gateways, inter-microservice communication, distributed events, distributed caches,
    multiple database providers, and multiple UI applications with single sign-on.
    It also includes the Kubernetes and Helm configurations to run the solution on
    containers. See [https://github.com/abpframework/eShopOnAbp](https://github.com/abpframework/eShopOnAbp)
    to learn all the details about that solution.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 核心ABP团队已经准备了一个使用ABP框架构建的开源微服务参考解决方案。它展示了如何使用API网关、微服务间通信、分布式事件、分布式缓存、多个数据库提供者和多个具有单点登录的UI应用程序来创建解决方案。它还包括在容器上运行解决方案的Kubernetes和Helm配置。请参阅[https://github.com/abpframework/eShopOnAbp](https://github.com/abpframework/eShopOnAbp)以了解该解决方案的所有详细信息。
- en: The next section introduces the last fundamental architecture that ABP Framework
    provides out of the box – multi-tenancy.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节介绍了ABP框架提供的最后一个基本架构——多租户架构。
- en: SaaS/multi-tenancy
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: SaaS/multi-tenancy
- en: '**Software-as-a-Service** (**SaaS**) is a trending approach to building and
    selling software products. Multi-tenancy is a widely used architectural pattern
    for building SaaS systems. The following are the typical features of a multi-tenant
    system:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**软件即服务**（**SaaS**）是构建和销售软件产品的流行方法。多租户是构建SaaS系统的广泛使用的架构模式。以下是多租户系统的典型特征：'
- en: Shares the hardware and software resources between tenants.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在租户之间共享硬件和软件资源。
- en: Every tenant has users, roles, and permissions.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个租户都有用户、角色和权限。
- en: Isolates database, cache, and other resources between tenants.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在租户之间隔离数据库、缓存和其他资源。
- en: Can enable/disable application features per tenant.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以按租户启用/禁用应用程序功能。
- en: Can customize application configurations per tenant.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以按租户自定义应用程序配置。
- en: ABP Framework covers all these requirements and more. It helps you build a multi-tenant
    system while most of your code base is unaware of multi-tenancy.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: ABP框架涵盖了所有这些要求以及更多。它帮助您在大多数代码库不了解多租户的情况下构建多租户系统。
- en: '[*Chapter 16*](B17287_16_Epub_AM.xhtml#_idTextAnchor457), *Implementing Multi-Tenancy*,
    explains multi-tenancy and multi-tenant application development with ABP Framework.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第16章*](B17287_16_Epub_AM.xhtml#_idTextAnchor457)，*实现多租户*，解释了使用ABP框架的多租户和多租户应用程序开发。'
- en: So far, I've introduced the fundamental architectural patterns that ABP provides
    as pre-built solutions. However, ABP also provides startup templates to help you
    get started with a new solution easily.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我已经介绍了ABP提供的作为预构建解决方案的基本架构模式。然而，ABP还提供了启动模板，以帮助您轻松地开始一个新的解决方案。
- en: The startup templates
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动模板
- en: When you create a new solution using ASP.NET Core's standard startup templates,
    you get a single-project solution with minimal dependencies and no layers, which
    is not so production-ready. You usually spend a considerable amount of time setting
    up the solution structure to implement your software architecture properly, as
    well as to install and configure the fundamental tools and libraries.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用ASP.NET Core的标准启动模板创建新解决方案时，您将获得一个单项目解决方案，具有最小依赖项和无层结构，但这并不那么适合生产环境。您通常需要花费相当多的时间来设置解决方案结构以正确实现软件架构，以及安装和配置基本工具和库。
- en: 'ABP Framework provides a well-architected, layered, pre-configured, and production-ready
    startup solution template. The following screenshot shows the initial UI when
    you directly run the startup template that''s created with ABP Framework:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ABP框架提供了一个结构良好、分层、预先配置和现成的启动解决方案模板。以下截图显示了使用ABP框架直接运行创建的启动模板时的初始UI：
- en: '![Figure 1.1 – ABP application startup template'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.1 – ABP应用程序启动模板'
- en: '](img/Figure_1.1_B17287.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.1_B17287.jpg)'
- en: Figure 1.1 – ABP application startup template
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – ABP应用程序启动模板
- en: 'Let''s talk about this startup template in more detail:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地谈谈这个启动模板：
- en: The solution is layered. It is clear and tells you how to organize your code
    base.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案是分层的。它清晰明了，告诉您如何组织代码库。
- en: Some pre-built modules are already installed, such as the **Account** and **Identity**
    modules. You have *log in*, *register*, *user and role management,* and some other
    standard functionalities already implemented.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些预构建的模块已经安装，例如**账户**和**身份**模块。您已经有了*登录*、*注册*、*用户和角色管理*以及一些其他标准功能已经实现。
- en: '**Unit test** and **integration test** projects are pre-configured and ready
    to write your first test code.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单元测试**和**集成测试**项目已预先配置并准备好编写您的第一个测试代码。'
- en: It contains some utility applications to manage your database migrations and
    consume and test your HTTP APIs.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它包含一些实用应用程序来管理您的数据库迁移以及消费和测试您的HTTP API。
- en: ABP's application startup template comes with multiple options for the **UI
    Framework** and the **Database Provider**. You can start with **Angular**, **Blazor**,
    or **MVC** (**Razor Pages**) options as the UI framework, and use **Entity Framework
    Core** (with any database management system) or **MongoDB** as the database provider.
    You will learn how to create a new solution and run it in [*Chapter 2*](B17287_02_Epub_AM.xhtml#_idTextAnchor026),
    *Getting Started with ABP Framework*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ABP的应用程序启动模板提供了多个**UI框架**和**数据库提供者**选项。你可以选择**Angular**、**Blazor**或**MVC**（**Razor
    Pages**）作为UI框架，并使用**Entity Framework Core**（与任何数据库管理系统）或**MongoDB**作为数据库提供者。你将在[*第2章*](B17287_02_Epub_AM.xhtml#_idTextAnchor026)“使用ABP框架入门”中学习如何创建一个新的解决方案并运行它。
- en: In the next section, I will introduce some of ABP's infrastructure components.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我将介绍一些ABP的基础设施组件。
- en: The ABP infrastructure
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ABP的基础设施
- en: ABP is based on familiar tools and libraries you already know about. While it
    is a full-stack application framework, it doesn't introduce a new **Object-Relational
    Mapper** (**ORM**) and instead uses Entity Framework Core. Similarly, it uses
    Serilog, AutoMapper, IdentityServer, and Bootstrap instead of creating similar
    functionalities itself. It provides a solution that integrates these tools, fills
    the gaps, and implements common business application requirements.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ABP基于你已知的熟悉工具和库。虽然它是一个全栈应用程序框架，但它不引入新的**对象关系映射器**（**ORM**），而是使用Entity Framework
    Core。同样，它使用Serilog、AutoMapper、IdentityServer和Bootstrap，而不是自己创建类似的功能。它提供了一个集成这些工具、填补空白并实现常见业务应用程序需求的解决方案。
- en: ABP Framework simplifies exception handling, validation, authorization, caching,
    audit logging, and database transaction management by automating them by conventions
    and allowing you to fine-control when you need to. So, you don't repeat yourself
    for these cross-cutting and common concerns.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: ABP通过约定自动化异常处理、验证、授权、缓存、审计日志和数据库事务管理，简化了这些操作，并允许你在需要时进行精细控制。因此，你不需要为这些横切和常见问题重复自己。
- en: ABP is well integrated with IdentityServer for cookie and token-based authentication,
    as well as single-sign-on. It also provides a detailed, permission-based authorization
    system to help you control the privileges of the users and clients of the application.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: ABP与IdentityServer良好集成，用于基于cookie和令牌的认证以及单点登录。它还提供了一个基于权限的详细授权系统，帮助你控制应用程序的用户和客户的权限。
- en: Besides the basics, background jobs, BLOB storage, text templating, audit logging,
    and localization components provide built-in solutions for common business requirements.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 除了基础知识之外，后台作业、BLOB存储、文本模板、审计日志和本地化组件为常见的业务需求提供了内置解决方案。
- en: On the UI part, ABP provides a complete UI theming system to help you develop
    theme-unaware and modular applications and easily install a theme for an application.
    It also provides tons of features and helpers on the UI side to eliminate repetitive
    code and increase productivity.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI方面，ABP提供了一个完整的UI主题系统，帮助你开发无主题和模块化的应用程序，并轻松地为应用程序安装主题。它还在UI方面提供了大量的功能和辅助工具，以消除重复代码并提高生产力。
- en: The next section will talk about the community, which is important for an open
    source project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将讨论社区，这对于开源项目来说非常重要。
- en: The community
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社区
- en: When you set up your solution architecture in your company, no one knows your
    structure except the developers working on it. However, ABP has a large and active
    community. They are using the same architecture and infrastructure, applying similar
    best practices, and developing their application similarly. This has a great advantage
    when you are stuck with an infrastructure problem or want to get an idea or a
    suggestion for implementing a business problem. It is also easier to understand
    someone's code in another solution since ABP developers are applying the same
    or similar patterns.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在公司设置解决方案架构时，除了正在工作的开发者外，没有人知道你的结构。然而，ABP有一个庞大且活跃的社区。他们使用相同的架构和基础设施，应用类似的最佳实践，并以类似的方式开发他们的应用程序。当你遇到基础设施问题或想要获得实现业务问题的想法或建议时，这具有很大的优势。由于ABP开发者应用相同的或类似的模式，因此理解另一个解决方案中的代码也更容易。
- en: ABP Framework has been around and growing since 2016\. At the end of 2021, it
    has 7,000+ stars, 220+ contributors, 22,000+ commits, 5,700 closed issues on GitHub,
    and more than 4,000,000 downloads on NuGet with more than 110+ major and minor
    releases. I mean, it is a mature, accepted, and trusted open source project.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ABP框架自2016年以来一直存在并不断发展。截至2021年底，它拥有7,000+星标，220+贡献者，22,000+提交，GitHub上有5,700个已关闭的问题，并在NuGet上有超过4,000,000次下载，拥有超过110+个主要和次要版本。我的意思是，它是一个成熟、被接受和受信任的开源项目。
- en: 'The core ABP team and the contributors from the community are constantly writing
    articles, preparing video tutorials, and sharing on the ABP Community website:
    [https://community.abp.io](https://community.abp.io). The following screenshot
    has been taken from the ABP Community website:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 核心ABP团队和社区贡献者不断撰写文章，准备视频教程，并在ABP社区网站上分享：[https://community.abp.io](https://community.abp.io)。以下截图来自ABP社区网站：
- en: '![Figure 1.2 – The ABP Community website'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – ABP社区网站'
- en: '](img/Figure_1.2_B17287.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.2_B17287.jpg)'
- en: Figure 1.2 – The ABP Community website
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – ABP社区网站
- en: Check out the ABP Community website to see what others are doing with ABP Framework
    and closely follow ABP Framework's development.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 查看ABP社区网站，了解其他人如何使用ABP框架，并密切关注ABP框架的发展。
- en: Summary
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the problems of building a business solution
    and explained how ABP provides solutions to these common problems. ABP also increases
    developer productivity by providing a pre-built architectural solution and the
    necessary infrastructure to implement that architecture.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了构建业务解决方案的问题，并解释了ABP如何为这些常见问题提供解决方案。ABP还通过提供预构建的架构解决方案和实现该架构所需的基础设施来提高开发者的生产力。
- en: By the end of this book, you will be comfortable with ABP Framework and will
    have learned a lot of best practices and techniques regarding enterprise software
    development.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 到这本书的结尾，你将熟悉ABP框架，并将学习到许多关于企业级软件开发的最佳实践和技术。
- en: In the next chapter, you will learn how to create a new solution using ABP's
    **command-line interface** (**CLI**) tool and run it in your development environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用ABP的**命令行界面**（**CLI**）工具创建一个新的解决方案，并在你的开发环境中运行它。
