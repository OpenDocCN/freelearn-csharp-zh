["```cs\n    using System;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var stopWatch = new Stopwatch();\n    var random = new Random();\n    var numberList numberArray = Enumerable.Range(1, 10000000).OrderBy(i => random.Next(1, 10000000)).ToArray();\n    stopWatch.Start();\n    SequentialLoop(numberArraynumberList.ToArray());\n    stopWatch.Stop();\n    Console.WriteLine(\"Time in milliseconds for sequential loop: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n    stopWatch.Reset();\n    stopWatch.Start();\n    ParallelLoop(numberArraynumberList.ToArray());\n    stopWatch.Stop();\n    Console.WriteLine(\"Time in milliseconds for parallel loop: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n    Console.Write(\"Complete. Press <ENTER> to exit.\");\n    Console.ReadKey();\n    ```", "```cs\n    private static void SequentialLoop(Int32[] array)\n    {\n        for (var i = 0; i < array.Length; i++)\n        {\n            var temp = Math.Sqrt(array[i]);\n        }\n    }\n    ```", "```cs\n    private static void ParallelLoop(Int32[] array)\n    {\n        Parallel.For(0, array.Length, i =>\n        {\n            var temp = Math.Sqrt(array[i]);\n        });\n    }\n    ```", "```cs\nParallel.For(int fromInclusive, int toExclusive, Action<int> body );\n```", "```cs\nParallel.For(0, array.Length, i =>\n{\n    var temp = Math.Sqrt(array[i]);\n});\n```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var stopWatch = new Stopwatch();\n\n    var random = new Random()();\n    var numberList = Enumerable.Range(1, 10000000).OrderBy(i => random.Next(1, 10000000));\n    stopWatch.Start();\n    SequentialLoop(numberList);\n    stopWatch.Stop();\n    Console.WriteLine(\"Time in milliseconds for sequential loop: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n    stopWatch.Reset();\n    stopWatch.Start();\n    ParallelForLoop(numberList);\n    stopWatch.Stop();\n    Console.WriteLine(\"Time in milliseconds for parallel loop: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n    Console.Write(\"Complete. Press <ENTER> to exit.\");\n    Console.ReadKey();\n    ```", "```cs\n    private static void SequentialLoop(IEnumerable<int> numberList)\n    {\n        foreach (var currentNumber in numberList)\n        {\n            var temp = Math.Sqrt(currentNumber);\n        }\n    }\n    ```", "```cs\n    private static void ParallelForLoop(IEnumerable<int> numberList)\n    {\n        Parallel.ForEach(numberList, currentNumber =>\n        {\n            var temp = Math.Sqrt(currentNumber);\n        });\n    }\n    ```", "```cs\nForEach<TSource>(IEnumerable<TSource>, Action<TSource>)\n```", "```cs\nParallel.ForEach(numberList, currentNumber =>\n{\n    var temp = Math.Sqrt(currentNumber);\n});\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n     var client = new WebClient();\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    client.Headers.Add(\"user-agent\", headerText);\n    var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n     var wordList = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).ToList();\n    ```", "```cs\n    var loopResult = Parallel.ForEach(wordList, (currentWord,  loopState) =>\n    {\n        if (currentWord.Equals(\"immutability\"))\n        {\n            Console.WriteLine(currentWord);\n            loopState.Break();\n        }\n    });\n    ```", "```cs\n    Console.WriteLine(\"Loop LowestBreak Iteration : {0}\", loopResult.LowestBreakIteration.ToString());\n    Console.WriteLine(\"Loop Completed : {0}\", loopResult.IsCompleted.ToString());\n    Console.ReadLine();\n    ```", "```cs\nForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)\n```", "```cs\nvar loopResult = Parallel.ForEach(wordList, (currentWord,  loopState) =>\n{\n    if (currentWord.Equals(\"immutability\"))\n    {\n        Console.WriteLine(currentWord);\n        loopState.Break();\n    }\n});\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/','\"','(',')', '\\u000A' };\n    var client = new WebClient();\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    client.Headers.Add(\"user-agent\", headerText);\n    var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n    var wordList = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).Where(word => word.Length > 5).ToList();\n    wordList.Sort();\n    ```", "```cs\n    var loopResult = Parallel.ForEach(wordList, (currentWord, loopState) =>\n    {\n        if (!currentWord.Equals(\"immutability\"))\n            Console.WriteLine(currentWord);\n        else\n        {\n            loopState.Stop();\n            Console.WriteLine(currentWord);\n            Console.WriteLine(\"Loop stopped: {0}\", loopState.IsStopped.ToString());\n        }\n    });\n    ```", "```cs\n    Console.WriteLine(\"Loop Completed : {0}\", loopResult.IsCompleted.ToString());\n    Console.ReadLine();\n    ```", "```cs\nForEach<TSource>(IEnumerable<TSource>, Action<TSource, ParallelLoopState>)\n```", "```cs\nvar loopResult = Parallel.ForEach(wordList, (currentWord, loopState) =>\n{\n    if (!currentWord.Equals(\"immutability\"))\n        Console.WriteLine(currentWord);\n    else\n    {\n        loopState.Stop();\n        Console.WriteLine(currentWord);\n        Console.WriteLine(\"Loop stopped: {0}\", loopState.IsStopped.ToString());\n    }\n});\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var tokenSource = new CancellationTokenSource();\n    var options = new ParallelOptions\n    {\n        CancellationToken = tokenSource.Token\n    };\n    ```", "```cs\n    Task.Factory.StartNew(() =>\n    {\n        Thread.Sleep(new TimeSpan(0,0,5));\n        tokenSource.Cancel();\n    });\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\"', '(', ')', '\\u000A' };\n    var client = new WebClient();\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    client.Headers.Add(\"user-agent\", headerText);\n     var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n    var wordList = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).Where(word => word.Length > 5).ToList();\n    wordList.Sort();\n    ```", "```cs\n    try\n    {\n        var loopResult = Parallel.ForEach(wordList, options, (currentWord, loopState) => Console.WriteLine(currentWord));\n        Console.WriteLine(\"Loop Completed : {0}\", loopResult.IsCompleted.ToString());\n    }\n    catch (OperationCanceledException)\n    {\n        Console.WriteLine(\"Operation Cancelled\");\n    }\n    catch (AggregateException)\n    {\n        Console.WriteLine(\"Operation Cancelled\");\n    }\n    Console.ReadLine();\n    ```", "```cs\nForEach<TSource>(IEnumerable<TSource>, ParallelOptions, Action<TSource>)\n```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Threading.Tasks;\n    ```", "```cs\n    try\n    {\n        // Parallel for loop           \n    }\n    catch (AggregateException aggregate)\n    {\n        // Loop through the exceptions and display to console\n        foreach (var ex in aggregate.InnerExceptions)\n        {\n          Console.WriteLine(\"An exception was caught:  {0}\",ex.InnerException.Message);\n        }\n    }\n\n    // Wait for user input before exiting\n    Console.ReadLine();\n    ```", "```cs\n    var exceptionQueue = new ConcurrentQueue<Exception>();\n    ```", "```cs\n    Parallel.For(0, 100, number =>\n    {\n        try\n        {\n            if (number > 95)\n            {\n              throw new ArgumentException(String.Format(\"The number {0} is invalid. Must be smaller than 95.\",number.ToString()));\n            }\n            Console.WriteLine(number.ToString());\n        }\n        catch (Exception ex)\n        {\n            exceptionQueue.Enqueue(ex);  \n        }\n        if(exceptionQueue.Count > 0)\n            throw new AggregateException(exceptionQueue);\n    });\n    ```", "```cs\ncatch (AggregateException aggregate)\n{\n    foreach (var ex in aggregate.InnerExceptions)\n    {\n      Console.WriteLine(\"An exception was caught: {0}\",ex.InnerException.Message);\n    }\n}\n```", "```cs\ncatch (Exception ex)\n{\n    exceptionQueue.Enqueue(ex);  \n}\nif(exceptionQueue.Count > 0)\n    throw new AggregateException(exceptionQueue);\n```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static void DefaultParallelism(Int32[] array)\n    {\n        Parallel.For(0, array.Length, i =>\n        {\n            var temp = Math.Sqrt(array[i]);\n        });\n    }\n    ```", "```cs\n    private static void LimitedParallelism(Int32[] array)\n    {\n        var options = new ParallelOptions()\n        {\n            MaxDegreeOfParallelism = 4\n        };\n\n        Parallel.For(0, array.Length, options, i =>\n        {\n            var temp = Math.Sqrt(array[i]);\n        });\n    }\n    ```", "```cs\n    static void Main()\n    {\n        var stopWatch = new Stopwatch();\n\n        var random = new Random();\n        var numberList numberArray = Enumerable.Range(1, 1000000).OrderBy(i => random.Next(1, 1000000)).ToArray();\n\n        stopWatch.Start();\n        DefaultParallelism(numberListnumberArray.ToArray());\n        stopWatch.Stop();\n        Console.WriteLine(\"Time in milliseconds for default parallelism: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n        stopWatch.Reset();\n        stopWatch.Start();\n        LimitedParallelism(numberList.ToArray());\n        stopWatch.Stop();\n        Console.WriteLine(\"Time in milliseconds for MaxDegreeOfParallelism: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n        Console.Write(\"Complete. Press <ENTER> to exit.\");\n        Console.ReadKey();\n    }\n    ```", "```cs\nvar options = new ParallelOptions()\n{\n        MaxDegreeOfParallelism = 4\n};\n```", "```cs\nParallel.For(0, array.Length, options, i =>\n{\n    var temp = Math.Sqrt(array[i]);\n});\n```", "```cs\n    using System;\n    using System.Collections.Concurrent;\n    using System.Diagnostics;\n    using System.Linq;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static void NoPartitioning(Int32[] numbers)\n    {\n        Parallel.ForEach(numbers, currentNumber =>\n        {\n           var temp = Math.Sqrt(currentNumber);\n        });\n    }\n    ```", "```cs\n    private static void DefaultPartitioning(Int32[] numbers)\n    {\n        var partitioner = Partitioner.Create(numbers);\n        Parallel.ForEach(partitioner, currentNumber =>\n        {\n            var temp = Math.Sqrt(currentNumber);\n        });\n    }\n    ```", "```cs\n    private static void CustomPartitioning(Int32[] numbers)\n    {\n        var partitioner = Partitioner.Create(0, numbers.Count(), 100000);\n        Parallel.ForEach(partitioner, range =>\n        {\n            for (var index = range.Item1; index < range.Item2; index++)\n            {\n                var temp = Math.Sqrt(numbers[index]);\n            }\n        });\n    }\n    ```", "```cs\n    static void Main()\n    {\n        var stopWatch = new Stopwatch();\n\n        var random = new Random();\n        var numberArray = Enumerable.Range(1, 10000000).OrderBy(i => random.Next(1, 10000000)).ToArray();\n        stopWatch.Start();\n        NoPartitioning(numberArray);\n        stopWatch.Stop();\n        Console.WriteLine(\"Time in milliseconds for no partitioning: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n        stopWatch.Reset();\n        stopWatch.Start();\n        DefaultPartitioning(numberArray);\n        stopWatch.Stop();\n        Console.WriteLine(\"Time in milliseconds for default partitioning: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n        stopWatch.Reset();\n        stopWatch.Start();\n        CustomPartitioning(numberArray);\n        stopWatch.Stop();\n        Console.WriteLine(\"Time in milliseconds for custom partitioning: {0}\", stopWatch.ElapsedMilliseconds.ToString());\n\n        Console.Write(\"Complete. Press <ENTER> to exit.\");\n        Console.ReadKey();\n    }\n    ```", "```cs\nprivate static void DefaultPartitioning(Int32[] numbers)\n{\n    var partitioner = Partitioner.Create(numbers);\n    Parallel.ForEach(partitioner, currentNumber =>\n    {\n        var temp = Math.Sqrt(currentNumber);\n    });\n}\n```", "```cs\npublic static OrderablePartitioner<Tuple<int, int>> Create(\n    int fromInclusive,\n    int toExclusive,\n    int rangeSize\n)\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    var client = new WebClient();\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    client.Headers.Add(\"user-agent\", headerText);\n    var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n    var wordList = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries).ToList();\n\n    //word count total\n    Int32 total = 0;\n    ```", "```cs\n    Parallel.ForEach<String, Int32>(wordList, () => 0, \n        (word, loopstate, count) =>  // method invoked on each iteration of loop\n        {\n            if (word.Equals(\"species\"))\n            {\n                count++; // increment the count\n            }\n            return count;\n        },(result)=>Interlocked.Add(ref total, result));\n     // executed when all loops have completed\n    ```", "```cs\n    Console.WriteLine(\"The word species occured {0} times.\",total.ToString());\n    Console.ReadLine();\n    ```", "```cs\nForEach<TSource, TLocal>(IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)\n```", "```cs\n(word, loopstate, count) =>  // method invoked on each iteration of loop\n{\nif (word.Equals(\"species\"))\n{\n   count++; // increment the count\n}\nreturn count;\n}\n```", "```cs\n(result)=>Interlocked.Add(ref total, result));\n```"]