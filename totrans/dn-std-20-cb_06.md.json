["```cs\n      using System.Threading;\n      using System.Text\n```", "```cs\n      StringBuilder messages = new StringBuilder(); \n```", "```cs\n      public StringBuilder StartThreads()\n      {\n          var mainThread = Thread.CurrentThread;\n          mainThread.Name = \"MainThread\";\n\n          messages.Append($\"This is the {mainThread.Name}\\n\");\n\n          Thread anotherThread = new Thread(CountTo100);\n          messages.Append(\"Start a new thread\\n\");\n          anotherThread.Start();\n\n          messages.Append($\"Now call {mainThread.Name} will count to 50\\n\");\n\n          for (int j=0; j<50; j++)\n          {\n              messages.Append($\"MT-{j + 1}\\n\");\n              Thread.Sleep(80);\n          }\n\n          messages.Append($\"{mainThread.Name} finished\\n\");\n\n          return messages;\n      }\n```", "```cs\n      private void CountTo100()\n      {\n          for (int i=0; i<100; i++)\n          {\n              messages.Append($\"Thread 2 counting {i + 1}\\n\");\n              Thread.Sleep(100);\n          }\n      }\n```", "```cs\nvar mainThread = Thread.CurrentThread;\nmainThread.Name = \"MainThread\";\n\nmessages.Append($\"This is the {mainThread.Name}\\n\");\n```", "```cs\nprivate void CountTo100()\n{\n    for (int i=0; i<100; i++)\n    {\n        messages.Append($\"Thread 2 counting {i + 1}\\n\");\n        Thread.Sleep(100);\n    }\n}\n```", "```cs\nThread anotherThread = new Thread(CountTo100);\nmessages.Append(\"Start a new thread\\n\");\nanotherThread.Start();\n```", "```cs\n      using Chapter6.Threads.ThreadLib;\n```", "```cs\n      var threads = new ThreadGenerator();\n      var output = threads.StartThreads();\n\n      Console.WriteLine(output);\n      Console.ReadLine();\n```", "```cs\n      using System.Net.Http;\n      using System.Threading.Tasks;\n```", "```cs\n      private HttpClient _httpClient = new HttpClient();\n```", "```cs\n      public async Task<string> ReadSiteContent(string url)\n      {\n          var htmlContent = await _httpClient.GetStringAsync(url);\n\n          return htmlContent;\n      }\n```", "```cs\n      using Chapter6.AsyncTasks.AsyncLib;\n```", "```cs\n      private async void GoButton_Click(object sender, RoutedEventArgs e)\n```", "```cs\n      var url = UrlTextBox.Text;\n      var siteReader = new SiteReader();\n      var content = await siteReader.ReadSiteContent(url);\n\n      ContentBrowser.NavigateToString(content);\n```", "```cs\n      using System.Text;\n      using System.Threading;\n```", "```cs\n      StringBuilder messages = new StringBuilder();\n```", "```cs\n      public StringBuilder ProcessPool()\n      {\n          for (int i=0; i<5; i++)\n          {\n              ThreadPool.QueueUserWorkItem(new WaitCallback(Process));\n          }\n\n          for (int k=0; k<10; k++)\n          {\n              messages.AppendLine($\"Main Thread - {k + 1}\");\n          }\n\n          return messages;\n       }\n```", "```cs\nprivate void Process(object callback)\n{\n    for (int j=0; j<10; j++)\n    {\n        messages.AppendLine($\"Thread - {j + 1}\");\n    }\n}\n```", "```cs\n      using Chapter6.ThreadPools.PoolLib;\n```", "```cs\n      var pool = new ThreadList();\n      var output = pool.ProcessPool();\n\n      Console.WriteLine(output);\n\n      Console.ReadLine();\n```"]