- en: '*Chapter 8*: Testing in Solution Architecture'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：解决方案架构中的测试'
- en: In the previous chapter, we learned about how to secure an **ASP.NET** web solution.
    We also highlighted some key security recommendations to protect our web **application
    programming interface** (**API**), along with security best practices when it
    comes to hosting on **Azure**.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何确保 **ASP.NET** 网络解决方案的安全。我们还强调了保护我们的网络 **应用程序编程接口**（**API**）的一些关键安全建议，以及当在
    **Azure** 上托管时的安全最佳实践。
- en: In this chapter, we will become familiar with the most common testing types
    you need to know, and when to use them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将熟悉你需要了解的最常见的测试类型及其使用时机。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Highlighting key testing principles
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出关键测试原则
- en: Learning about the main types of software testing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解主要的软件测试类型
- en: Exploring testing in Azure
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Azure 中的测试
- en: By the end of this chapter, you will have learned about the various types of
    software testing that we can apply to test our software solution, with the aim
    of finding errors and then fixing them. We will also learn how to check whether
    the software works properly and whether it meets the requirements defined during
    the early stages of a project. We will also explore the testing mechanism offered
    by **Azure DevOps**.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解我们可以应用于测试我们的软件解决方案的各种软件测试类型，目的是找到错误并修复它们。我们还将学习如何检查软件是否正常工作以及它是否满足项目早期阶段定义的要求。我们还将探索
    **Azure DevOps** 提供的测试机制。
- en: Moving on to the next section, let's take a look at the key principles of software
    testing.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，让我们来看看软件测试的关键原则。
- en: Highlighting key testing principles
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 突出关键测试原则
- en: The main objective of conducting software testing is to eliminate possible bugs
    and to enhance the overall quality of the software in terms of many aspects, such
    as performance, **user experience** (**UX**), and security.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 进行软件测试的主要目标是消除可能的错误，并在许多方面提高软件的整体质量，例如性能、**用户体验**（**UX**）和安全。
- en: 'But before starting any testing activities, there must be some guidelines or
    principles in place to make sure that the outcome of these activities is aligned
    with the main objectives of testing. Here, in this section, we will highlight
    some of the key principles of software testing that we need to consider in our
    software solution, as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 但在开始任何测试活动之前，必须有一些指南或原则来确保这些活动的结果与测试的主要目标一致。在本节中，我们将强调我们在软件解决方案中需要考虑的一些关键软件测试原则，如下所述：
- en: All test cases should be prepared based on customer requirements; otherwise,
    we will be testing against the wrong requirements. Each feature or function in
    a system should be tested with one or multiple test cases.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有测试用例都应根据客户需求准备；否则，我们将针对错误的要求进行测试。系统中的每个功能或功能都应该使用一个或多个测试用例进行测试。
- en: Some types of software testing such as **performance testing** and **acceptance
    testing** should be performed by **subject-matter experts** (**SMEs**) such as
    **quality assurance** (**QA**) engineers or senior developers.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些类型的软件测试，如 **性能测试** 和 **验收测试**，应由 **领域专家**（**SMEs**）如 **质量保证**（**QA**）工程师或高级开发者执行。
- en: Plan to start testing the basic functionalities first, then extend to testing
    the advanced features.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计划首先测试基本功能，然后扩展到测试高级功能。
- en: It is recommended to start testing at the early stages of a project as, in this
    case, the cost of fixing defects is way less than when testing during later stages
    of the project.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议在项目的早期阶段开始测试，因为在这种情况下，修复缺陷的成本远低于在项目后期阶段进行测试。
- en: '**Defect clustering** is based on the **Pareto** principle, which states that
    80% of defects are caused by 20% of the system features. This means that during
    testing, a large number of defects detected are related to a small number of features.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺陷聚类**基于 **帕累托** 原则，该原则指出，80% 的缺陷是由 20% 的系统功能引起的。这意味着在测试过程中，检测到的大量缺陷都与少数功能相关。'
- en: It is not recommended to repeat the same test cases over and over because, after
    a certain time, we won't find any new defects. The best practice is to adjust
    the test cases, with the aim of finding new defects.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不建议反复执行相同的测试用例，因为经过一段时间后，我们不会找到任何新的缺陷。最佳实践是调整测试用例，目的是找到新的缺陷。
- en: Testing is context-dependent, which means we need to apply specific methodologies
    and techniques based on the context of the system we are testing. For instance,
    testing a **content management system** (**CMS**) is different from testing an
    **iOS** e-commerce app.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试是上下文相关的，这意味着我们需要根据我们测试的系统上下文应用特定的方法和技术。例如，测试内容管理系统（**CMS**）与测试iOS电子商务应用不同。
- en: Let's start exploring the various types of testing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始探索各种测试类型。
- en: Exploring the main types of software testing
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索软件测试的主要类型
- en: 'One of the major reasons for failure in software projects is a lack of product
    quality. Software testing is an integral part of the project life cycle, helping
    to ensure that a product is error-/defect-free and, in the same way, verifying
    the functionalities implemented to make sure they match the requirements defined
    with the client. There are two main categories of software testing, outlined as
    follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 软件项目失败的主要原因之一是产品质量不足。软件测试是项目生命周期的一个组成部分，有助于确保产品无错误/缺陷，并且同样验证实现的功能以确保它们与客户定义的要求相匹配。软件测试主要有两大类，如下所述：
- en: '**Functional testing**: This is used to validate each feature and function
    of the system to verify all functionalities.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能测试**：这是用来验证系统的每个功能和特性，以验证所有功能。'
- en: '**Non-functional testing**: This is used to validate non-functional aspects
    of the system, such as performance, usability, and compliance.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非功能测试**：这是用来验证系统的非功能性方面，如性能、可用性和合规性。'
- en: 'Here is a diagram showing the different types of testing we will discuss in
    this chapter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个展示我们将在本章中讨论的不同类型测试的图表：
- en: '![Figure 8.1: Types of testing](img/Figure_8.01_B17366.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1：测试类型](img/Figure_8.01_B17366.jpg)'
- en: 'Figure 8.1: Types of testing'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：测试类型
- en: We will look at all the different types of testing shown in the preceding diagram
    in the upcoming sections.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在接下来的章节中查看前面图中显示的所有不同类型的测试。
- en: Unit testing
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: '**Unit testing** is a type of testing performed to test every individual function
    or module of a system. Usually, it is performed by .NET developers who are working
    on a product because it requires some coding skills. That''s why it is considered
    a low-level type of testing since it is targeting the behavior of the code only.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**单元测试**是一种测试类型，用于测试系统的每个单独的功能或模块。通常，它是由正在开发产品的.NET开发者执行的，因为它需要一些编码技能。这就是为什么它被认为是一种低级测试类型，因为它只针对代码的行为。'
- en: 'Here is a diagram showing the unit-test level as an integral part of the entire
    testing life cycle:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个展示单元测试级别作为整个测试生命周期组成部分的图表：
- en: '![Figure 8.2: Unit-test level in the testing life cycle](img/Figure_8.02_B17366.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2：测试生命周期中的单元测试级别](img/Figure_8.02_B17366.jpg)'
- en: 'Figure 8.2: Unit-test level in the testing life cycle'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：测试生命周期中的单元测试级别
- en: In the preceding diagram, unit testing represents the first type of testing
    that should be conducted before starting any other testing activity, as the cost
    of fixing defects becomes higher at later levels of testing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，单元测试代表在开始任何其他测试活动之前应该进行的第一个测试类型，因为随着测试级别的提高，修复缺陷的成本也会增加。
- en: 'Here are some benefits of unit testing:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是单元测试的一些好处：
- en: Unit tests allow us to fix defects at the early stages of the development cycle.
    This will save time and costs to fix the same defects later on during the acceptance-testing
    stage.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试使我们能够在开发周期的早期阶段修复缺陷。这将节省在验收测试阶段修复相同缺陷的时间和成本。
- en: It helps to document the source code.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于记录源代码。
- en: It allows the developers to refactor the code and reuse available functions
    to eliminate any repetition in the API.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许开发者重构代码并重用现有函数来消除API中的任何重复。
- en: Unit testing is essential for testing dependencies if we are making changes
    to the API.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们对API进行更改，单元测试对于测试依赖项至关重要。
- en: It helps reduce code complexity.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于降低代码复杂性。
- en: 'For more details on automating unit tests, see the list of testing tools recommended
    by Microsoft: [https://docs.microsoft.com/en-us/dotnet/core/testing/#testing-tools.](https://docs.microsoft.com/en-us/dotnet/core/testing/#testing-tools'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 有关自动化单元测试的更多详细信息，请参阅微软推荐的测试工具列表：[https://docs.microsoft.com/en-us/dotnet/core/testing/#testing-tools.](https://docs.microsoft.com/en-us/dotnet/core/testing/#testing-tools)
- en: )
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Integration testing
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成测试
- en: '**Integration testing** is intended to test two or more modules of a solution
    to verify whether they work well together. For example, it can involve testing
    the behavior of the integration between the system we are building and **Azure
    Active Directory**, to verify the authentication mechanism.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成测试**旨在测试解决方案中的两个或多个模块，以验证它们是否能够良好地协同工作。例如，它可以涉及测试我们正在构建的系统与**Azure Active
    Directory**之间的集成行为，以验证认证机制。'
- en: Another example of this type of testing is when we need to verify the interaction
    between our system and the database layer. Integration testing should be performed
    after completing the development of two modules that are subject to the testing
    we are conducting.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型测试的另一个例子是我们需要验证我们的系统与数据库层之间的交互。集成测试应在完成我们正在进行的测试的两个模块的开发后进行。
- en: 'In the following diagram, we are showing that integration testing should target
    only the integration part between **Module A** and **Module B**:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们展示了集成测试应仅针对**模块A**和**模块B**之间的集成部分：
- en: '![Figure 8.3: Integration testing for two modules](img/Figure_8.03_B17366.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3：两个模块的集成测试](img/Figure_8.03_B17366.jpg)'
- en: 'Figure 8.3: Integration testing for two modules'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：两个模块的集成测试
- en: 'Here are some benefits of integration testing:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些集成测试的好处：
- en: Integration testing helps to ensure that the integrated modules are working
    properly as expected.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试有助于确保集成模块按预期正常工作。
- en: It allows for simulating the transition between various modules in the system.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许模拟系统内各个模块之间的转换。
- en: It also helps to detect errors that may occur in the interaction of the modules.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它还有助于检测模块交互中可能出现的错误。
- en: Regression testing
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回归测试
- en: It is normal to test new changes that we perform on a system, such as modifying
    an existing feature or adding a new one. However, this is not enough, because
    in most cases, the code we change or add will have a direct or indirect impact
    on other functionalities, and probably on other features in the system too. This
    is why we need to conduct **regression testing** to make sure that the new code
    didn't cause any new defects.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 测试我们对系统进行的任何新更改是很正常的，例如修改现有功能或添加新功能。然而，这还不够，因为在大多数情况下，我们更改或添加的代码将对其他功能产生直接或间接的影响，也许还会影响系统中的其他功能。这就是为什么我们需要进行**回归测试**，以确保新代码没有引起任何新的缺陷。
- en: 'In the following diagram, we are showing the three main steps of regression
    testing:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下图中，我们展示了回归测试的三个主要步骤：
- en: '![Figure 8.4: Main steps of regression testing](img/Figure_8.04_B17366.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4：回归测试的主要步骤](img/Figure_8.04_B17366.jpg)'
- en: 'Figure 8.4: Main steps of regression testing'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：回归测试的主要步骤
- en: 'Here are some benefits of regression testing:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些回归测试的好处：
- en: Regression testing ensures that existing features remain untouched in case of
    a change to a module or code.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回归测试确保在模块或代码发生更改的情况下，现有功能保持不变。
- en: Automated regression testing helps implement **continuous integration** (**CI**),
    which saves time and costs.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动回归测试有助于实现**持续集成**（**CI**），这可以节省时间和成本。
- en: It allows for the detection of defects caused by changes in the system environment.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许检测由系统环境变化引起的缺陷。
- en: It increases client trust and satisfaction, which may lead to expanding business.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它增加了客户信任和满意度，这可能导致业务扩张。
- en: Smoke testing
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 烟雾测试
- en: '**Smoke testing** is a technique that was adopted in the plumbing industry,
    where they usually used white smoke to identify any leaks in pipes.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**烟雾测试**是一种在管道行业中采用的技术，他们通常使用白烟来识别管道中的任何泄漏。'
- en: Today, the concept of smoke testing is used in software development to verify
    the basic functionality of a build. If a test fails, the build is considered unstable,
    and the system is not ready to perform any other type of testing activity.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，烟雾测试的概念在软件开发中被用来验证构建的基本功能。如果测试失败，构建被认为是不稳定的，系统尚未准备好执行任何其他类型的测试活动。
- en: 'The following diagram shows the main stages of smoke testing:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图展示了烟雾测试的主要阶段：
- en: '![Figure 8.5: The life cycle of smoke testing](img/Figure_8.05_B17366.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5：烟雾测试的生命周期](img/Figure_8.05_B17366.jpg)'
- en: 'Figure 8.5: The life cycle of smoke testing'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：烟雾测试的生命周期
- en: In the preceding diagram, we can see that the testing procedure starts by creating
    a new build with a version number. After that, we need to prioritize the test
    cases and decide what to test exactly to certify the new build before moving to
    functional testing. If the smoke testing fails, then we need to fix the defects
    and start over by creating a new build.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到测试过程是从创建一个带有版本号的新构建开始的。之后，我们需要优先考虑测试用例，并决定要确切测试什么，以便在功能测试之前认证新的构建。如果烟雾测试失败，那么我们需要修复缺陷，并通过创建一个新的构建重新开始。
- en: 'Here are some benefits of smoke testing:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是烟雾测试的一些好处：
- en: It helps to detect show-stopping issues in the early stages before starting
    any other type of testing.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于在开始任何其他类型的测试之前，在早期阶段检测到阻止问题。
- en: It improves the efficiency of the QA team by detecting defects that may take
    longer to be detected if they want to run functional testing.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过检测如果他们想要运行功能测试可能需要更长时间才能检测到的缺陷，从而提高了QA团队的效率。
- en: End-to-end testing
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端测试
- en: '**End-to-end** (**E2E**) **testing** is considered the full-fledged testing
    of an application. It is typically convenient to test the functionalities of the
    entire system; it is important to replicate the production environment to conduct
    this type of testing, and the testing scenarios should imitate the user behavior.
    The main goal of this type of testing is to certify that the different user flows
    are functioning properly with no errors and as per the requirements.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**端到端**（**E2E**）**测试**被认为是应用程序的全面测试。通常，测试整个系统的功能很方便；进行此类测试时，重要的是要复制生产环境，并且测试场景应该模仿用户行为。此类测试的主要目标是确保不同的用户流程在没有错误且符合要求的情况下正常工作。'
- en: 'In the following diagram, we show the three main steps of the E2E testing process:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，我们展示了端到端测试过程的三个主要步骤：
- en: '![Figure 8.6: The three main steps of E2E testing](img/Figure_8.06_B17366.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图8.6：端到端测试的三个主要步骤](img/Figure_8.06_B17366.jpg)'
- en: 'Figure 8.6: The three main steps of E2E testing'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：端到端测试的三个主要步骤
- en: In the preceding diagram, the user functions represent the actions performed
    in a particular functionality in the system, and the conditions represent the
    various input data and sequences that can be applied to each user function. As
    for the test cases, these are created based on the previous two actions—that is,
    the user functions along with the conditions.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，用户功能代表在系统特定功能中执行的操作，条件代表可以应用于每个用户功能的各种输入数据和序列。至于测试用例，这些是基于前两个动作创建的——即用户功能以及条件。
- en: 'Here are some major benefits of E2E testing:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是端到端测试的一些主要好处：
- en: It helps ensure complete readiness and the health of the system.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于确保系统的完全就绪和健康。
- en: It allows us to test the full system from a user's perspective.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们从用户的角度全面测试整个系统。
- en: It helps to test real-life scenarios that can be applied by end users.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于测试最终用户可以应用的现实场景。
- en: User interface testing
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用户界面测试
- en: The term **user interface** (**UI**) speaks for itself. **UI testing** is performed
    to test an application's **graphical user interface** (**GUI**), with the aim
    of making sure that the UI of the application is developed as per the requirements
    and is user-friendly.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 术语**用户界面**（**UI**）本身就说明了问题。**UI测试**是为了测试应用程序的**图形用户界面**（**GUI**），目的是确保应用程序的UI按照要求开发，并且用户友好。
- en: 'In the following diagram, we can see that the business layer and the data layer
    can be tested using unit tests. As for the UI, the only way to test it is through
    UI testing:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，我们可以看到业务层和数据层可以通过单元测试进行测试。至于UI，唯一的测试方式是通过UI测试：
- en: '![Figure 8.7: UI testing](img/Figure_8.07_B17366.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图8.7：UI测试](img/Figure_8.07_B17366.jpg)'
- en: 'Figure 8.7: UI testing'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：UI测试
- en: 'Here are some major benefits of UI testing:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是UI测试的一些主要好处：
- en: It helps to check the alignment of UI elements, along with checking the font
    style, the color, and the clarity of the text displayed.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于检查UI元素的排列，以及检查字体样式、颜色和显示文本的清晰度。
- en: It allows us to check whether a product is rendering correctly on all devices
    and screens that are supposed to be supported.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们检查产品是否在所有应支持的所有设备和屏幕上正确渲染。
- en: It helps to check error messages, along with warning messages.
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于检查错误信息和警告信息。
- en: Acceptance testing
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 接受测试
- en: '**Acceptance testing** (also known as **user acceptance testing**, or **UAT**)
    is considered the last phase of testing and is usually performed by the key users
    of the client to verify that all business requirements have been developed and
    that the system is working properly and efficiently as expected by the end users.
    Typically, acceptance testing is conducted based on test cases that are generated
    from user cases prepared during the analysis phase of a project.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**验收测试**（也称为**用户验收测试**，或**UAT**）被认为是测试的最后阶段，通常由客户的关键用户执行，以验证所有业务需求都已开发，并且系统按预期正常高效地运行。通常，验收测试是基于在项目分析阶段准备的用户案例生成的测试用例进行的。'
- en: 'In the following diagram, we show that UAT is the last testing phase before
    moving to a production environment:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，我们展示了UAT是迁移到生产环境前的最后一个测试阶段：
- en: '![Figure 8.8: UAT in the project life cycle](img/Figure_8.08_B17366.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图8.8：项目生命周期中的UAT](img/Figure_8.08_B17366.jpg)'
- en: 'Figure 8.8: UAT in the project life cycle'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：项目生命周期中的UAT
- en: 'Here are some benefits of UAT:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是UAT的一些好处：
- en: It helps to validate that all business requirements defined at the beginning
    of a project are correctly implemented and working properly without any errors.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于验证在项目开始时定义的所有业务需求都正确实施且运行正常，没有任何错误。
- en: It allows for the fixing of detected defects during development rather than
    in a production environment, which is less costly, especially in the case of solutions
    with online payment.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许在开发过程中而不是在生产环境中修复检测到的缺陷，这成本较低，尤其是在在线支付解决方案的情况下。
- en: It helps to increase users' trust in the new system before the go-live stage.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于在上线阶段之前增加用户对新系统的信任。
- en: Performance testing
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能测试
- en: '**Performance testing** is non-functional testing that is often used to check
    whether a system is working properly as per the performance requirements defined
    by the client and the standards.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能测试**是一种非功能性测试，通常用于检查系统是否按照客户定义的性能要求和标准正常工作。'
- en: 'The following four main elements are considered when carrying out performance
    testing:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在执行性能测试时，考虑以下四个主要元素：
- en: '**Bottlenecks** are major issues that bring down a system.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**瓶颈**是导致系统崩溃的主要问题。'
- en: The **load time** needed to load a page or a form.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加载页面或表单所需的**加载时间**。
- en: The **response time** of triggering an action or completing a process.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 触发动作或完成流程所需的**响应时间**。
- en: '**Scalability** is the ability of a system to handle a large number of requests
    without crashing.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**是指系统在不崩溃的情况下处理大量请求的能力。'
- en: 'The following diagram shows us the four main elements of carrying out performance
    testing:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了执行性能测试的四个主要元素：
- en: '![Figure 8.9: Performance-testing elements](img/Figure_8.09_B17366.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图8.9：性能测试元素](img/Figure_8.09_B17366.jpg)'
- en: 'Figure 8.9: Performance-testing elements'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9：性能测试元素
- en: 'Here are some benefits of performance testing:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是性能测试的一些好处：
- en: It helps to measure the response time, accuracy, and stability of the system.
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于衡量系统的响应时间、准确性和稳定性。
- en: It allows for the detection of issues that reduce the response time of the application
    or the overall hardware usage.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许检测到减少应用程序响应时间或整体硬件使用率的问题。
- en: It helps improve the load time of pages and increases user satisfaction.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有助于提高页面加载时间，并增加用户满意度。
- en: Stress testing
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 压力测试
- en: '**Stress testing** is a type of non-functional testing that certifies the stability
    and reliability of a system. The main target of stress testing is to measure the
    strength and error-handling capabilities of the system when it is under an extremely
    heavy load of requests that is way beyond the normal operating situation of the
    system. Its purpose is to understand how the system behaves under this heavy load.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**压力测试**是一种非功能性测试，用于验证系统的稳定性和可靠性。压力测试的主要目标是测量系统在超出正常操作情况下的极端高负载请求下的强度和错误处理能力。其目的是了解系统在这种高负载下的行为。'
- en: 'The following diagram describes the steps of stress testing:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图描述了压力测试的步骤：
- en: '![Figure 8.10: Stress-testing main steps](img/Figure_8.10_B17366.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图8.10：压力测试主要步骤](img/Figure_8.10_B17366.jpg)'
- en: 'Figure 8.10: Stress-testing main steps'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10：压力测试主要步骤
- en: Initially, the stress-testing process starts by planning and deciding on the
    test cases. After that, we should create scripts and execute them in an automated
    process. The results of the stress test should be analyzed carefully to identify
    the root cause of any issues. At the end, we need to fix issues by optimizing
    the code and then rerunning the whole stress-testing process until we have a stable
    build.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 初始阶段，压力测试过程从规划和决定测试用例开始。之后，我们应该创建脚本并在自动化过程中执行它们。应仔细分析压力测试的结果，以确定任何问题的根本原因。最后，我们需要通过优化代码来修复问题，然后重新运行整个压力测试过程，直到我们得到一个稳定的构建。
- en: 'Here are some benefits of stress testing:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些压力测试的好处：
- en: It allows us to check and handle error messages that may occur.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这允许我们检查和处理可能出现的错误消息。
- en: It helps to check whether the data was saved correctly before any failure was
    caused by a heavy load of requests.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何由大量请求引起的故障发生之前，这有助于检查数据是否正确保存。
- en: Compliance testing
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 合规性测试
- en: '**Compliance testing** (also known as **conformance testing**) is a type of
    audit-testing technique usually performed to verify whether a product meets a
    set of external and internal standards before deciding whether the system is ready
    to be released or not.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '**合规性测试**（也称为**一致性测试**）是一种审计测试技术，通常在决定系统是否准备好发布之前执行，以验证产品是否满足一系列外部和内部标准。'
- en: The internal standards are typically set by the organization. For example, a
    website should be designed for various devices and screens, therefore it should
    provide a responsive UI.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 内部标准通常由组织设定。例如，一个网站应该为各种设备和屏幕设计，因此它应该提供响应式用户界面。
- en: As for external standards, these are regulations that are set by a worldwide
    consortium or a third-party organization that specializes in this type of testing.
    An example of an external standard is the **General Data Protection Regulation**
    (**GDPR**) or the **Web Content Accessibility Guidelines** (**WCAG**).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 至于外部标准，这些是由全球联盟或专注于此类测试的第三方组织设定的规定。外部标准的一个例子是**通用数据保护条例**（**GDPR**）或**网络内容可访问性指南**（**WCAG**）。
- en: 'The following diagram shows the main system attributes that are usually assessed
    by compliance testing:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了合规性测试通常评估的主要系统属性：
- en: '![Figure 8.11: System attributes assessed by compliance testing](img/Figure_8.11_B17366.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图8.11：合规性测试评估的系统属性](img/Figure_8.11_B17366.jpg)'
- en: 'Figure 8.11: System attributes assessed by compliance testing'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11：合规性测试评估的系统属性
- en: 'As shown in the preceding diagram, each attribute is contributing to the overall
    compliance of the system. So, let''s get to know each of these attributes, as
    follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，每个属性都对系统的整体合规性做出了贡献。因此，让我们了解以下每个属性：
- en: '**Robustness**: This shows the ability of a system to function normally in
    the case of disturbance.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**鲁棒性**：这显示了系统在受到干扰时正常工作的能力。'
- en: '**Performance**: This represents the time needed by a system to complete a
    single task. Compliance testing should measure the performance of the main functions
    in the system and certify that they are performing well, based on predefined testing
    criteria.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：这代表系统完成单个任务所需的时间。合规性测试应衡量系统主要功能的表现，并基于预定义的测试标准证明它们表现良好。'
- en: '**Interoperability**: This shows the ability of a system to exchange information
    with other third-party systems. Moreover, it shows how well different functions
    in the system are interacting together to complete a process.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**互操作性**：这显示了系统与其他第三方系统交换信息的能力。此外，它还显示了系统中的不同功能如何相互作用以完成一个过程。'
- en: '**Functions**: This assesses the interfaces and functionalities provided by
    a system, along with confirming whether the requirements defined at the early
    stages of the project are met.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**：这评估了系统提供的接口和功能，并确认项目早期阶段定义的要求是否得到满足。'
- en: '**Behavior of system**: This assesses the behavior of a system with the environment
    in which it is hosted. It also assesses how the system behaves after executing
    every user story defined previously.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统行为**：这评估了系统与其托管环境的行为。它还评估了系统在执行之前定义的每个用户故事之后的行为。'
- en: Disaster recovery testing
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灾难恢复测试
- en: A **disaster recovery plan** (**DRP**) should be considered for enterprise solutions
    and mission-critical systems. It consists of a set of detailed guidelines and
    strategies that should be implemented to handle unplanned incidents that would
    disrupt the normal operations of a system. A good DRP should enable us to recover
    quickly from disruptive events such as cyber-attacks, power outages, hardware
    outages, or any other incidents. It should ensure the continuity of business processes
    and minimize damage as much as possible.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 对于企业解决方案和关键任务系统，应考虑**灾难恢复计划**（DRP）。它包括一系列详细的指南和策略，应实施以处理可能干扰系统正常运行的意外事件。一个好的DRP应使我们能够快速从网络攻击、停电、硬件故障或其他任何事件中恢复过来。它应确保业务流程的连续性，并尽可能减少损害。
- en: DR testing is the process of certifying a DRP by evaluating each step in the
    process to make sure that it will work as expected when an incident occurs.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: DR测试是通过评估过程中的每个步骤来验证DRP的过程，以确保在发生事件时能够按预期工作。
- en: So far, we have explored the main testing types and techniques, such as unit
    testing, smoke testing, performance testing, and acceptance testing. It is essential
    to know each of these testing types and when to use them to deliver high-quality
    software products. We should ensure that a product meets standards and requirements,
    all the way from coding to business functionalities of the product as a whole.
    Applying different testing types between functional and non-functional tests will
    boost quality, to achieve exceptional results.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经探讨了主要的测试类型和技术，例如单元测试、冒烟测试、性能测试和验收测试。了解每种测试类型及其何时使用对于交付高质量的软件产品至关重要。我们应该确保产品符合标准和要求，从编码到产品整体的企业功能。在功能测试和非功能测试之间应用不同的测试类型将提高质量，以实现卓越的结果。
- en: In the next section, we are going to explore the capabilities of test plans
    in Azure.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨Azure中测试计划的功能。
- en: Exploring testing in Azure
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Azure中的测试
- en: Manual testing can be a key testing technique to deliver a great UX and to certify
    a product before the go-live stage. **Azure Test Plans**, along with **Visual
    Studio 2019**, offers the features we need to manage our testing efforts, from
    manual and exploratory testing to load and stress testing.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 手动测试可以是提供出色UX和在生产前验证产品的一个关键测试技术。**Azure测试计划**与**Visual Studio 2019**一起提供了我们管理测试工作所需的功能，从手动和探索性测试到负载和压力测试。
- en: The starting point is to create a test plan made up of configurations, test
    suites, and test cases that can be broken down into shared test steps, and use
    the parameters that will allow us to repeat a test but with different input data.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 起始点是创建一个由配置、测试套件和测试用例组成的测试计划，这些测试用例可以分解为共享的测试步骤，并使用允许我们重复测试但使用不同输入数据的参数。
- en: 'Use the following link to sign in to Azure DevOps: [https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下链接登录Azure DevOps：[https://azure.microsoft.com/en-us/services/devops/](https://azure.microsoft.com/en-us/services/devops/)。
- en: 'After successful login, you can see **Test Plans** in the menu on the left
    side, as per the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 登录成功后，你可以在左侧菜单中看到**测试计划**，如下面的截图所示：
- en: '![Figure 8.12: Test Plans in Azure DevOps](img/Figure_8.12_B17366.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图8.12：Azure DevOps中的测试计划](img/Figure_8.12_B17366.jpg)'
- en: 'Figure 8.12: Test Plans in Azure DevOps'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12：Azure DevOps中的测试计划
- en: After creating a test plan, we need to set the configurations upon which we
    intend to run our tests—for example, we can specify the operating system and browser
    configurations if we are testing a web application. Test configurations can be
    assigned to an entire test plan or individual test suites, and even test cases.
    If we assigned the configurations to a test plan, this would ensure that all created
    test cases are automatically assigned to those configurations.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 创建测试计划后，我们需要设置测试的配置，例如，如果我们正在测试Web应用程序，我们可以指定操作系统和浏览器配置。测试配置可以分配给整个测试计划或单个测试套件，甚至测试用例。如果我们将配置分配给测试计划，这将确保所有创建的测试用例都自动分配到这些配置。
- en: 'When you click on **Test Plans**, a sliding submenu will be opened, showing
    more capabilities where we can create new test plans, set parameters, and modify
    configurations, as shown in the following screenshot:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**测试计划**时，将打开一个滑动子菜单，显示更多功能，例如我们可以创建新的测试计划、设置参数和修改配置，如下面的截图所示：
- en: '![Figure 8.13: Configurations under Test Plans](img/Figure_8.13_B17366.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图8.13：测试计划下的配置](img/Figure_8.13_B17366.jpg)'
- en: 'Figure 8.13: Configurations under Test Plans'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13：测试计划下的配置
- en: With our test configurations set, we can now start creating test suites, which
    are collections of test cases.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置测试配置后，我们现在可以开始创建测试套件，即测试用例的集合。
- en: 'There are three different types of test suites, outlined as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 有三种不同类型的测试套件，如下所述：
- en: '**Static test suite**: This is a logical container where we can add any test
    case we like.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态测试套件**：这是一个逻辑容器，我们可以添加任何我们喜欢的测试用例。'
- en: '**Requirement-based test suite**: This is where we associate our test case
    to a work item to define its acceptance criteria.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于需求的测试套件**：这是我们将测试用例关联到工作项以定义其验收标准的地方。'
- en: '**Query-based test suite**: This is where we create a work-item query to select
    which test cases to include. Any test case that meets the query criteria will
    be added automatically to the test suite.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于查询的测试套件**：这是我们创建工作项查询以选择要包含哪些测试用例的地方。任何符合查询标准的测试用例都将自动添加到测试套件中。'
- en: After we define our test suite, we need to start creating a test case and assigning
    it to the test team. Creating a test case is a very straightforward process. The
    main element is the steps to execute in any expected results. Steps that are repeated
    often can be extracted as shared steps to ease test maintenance. After preparing
    the test cases, we are ready to start the test run manually. Note that from the
    **Runs** page, we can review all our previous test runs, along with their results.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们定义测试套件后，我们需要开始创建测试用例并将其分配给测试团队。创建测试用例是一个非常直接的过程。主要元素是在任何预期结果中执行的步骤。经常重复的步骤可以提取为共享步骤以简化测试维护。在准备测试用例后，我们就可以开始手动进行测试运行了。请注意，从**运行**页面，我们可以查看所有之前的测试运行及其结果。
- en: Up to now, we have learned about manual testing in Azure, which has its benefits.
    But when we develop more features and our source code grows in size, testing all
    functionalities manually can become repetitive and time-consuming. Therefore,
    Azure offers us a mechanism to automate our tests in order to eliminate the burden
    of manual testing and to allow QA engineers to focus on delivering better quality
    and an improved **user experience** (**UX**).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了在Azure中进行手动测试的相关知识，它有其优势。但是，当我们开发更多功能并且源代码的规模增长时，手动测试所有功能可能会变得重复且耗时。因此，Azure为我们提供了一个机制来自动化我们的测试，以消除手动测试的负担，并允许质量保证工程师专注于提供更好的质量和改进的**用户体验**（**UX**）。
- en: With Azure DevOps, we can automate our tests from Azure Test Plans by using
    Azure pipelines. There are many types of testing that we can automate with Azure
    pipelines, such as unit testing, security testing, and code-coverage testing,
    which calculates the percentage of code that's covered by unit tests.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Azure DevOps，我们可以通过Azure管道来自动化从Azure测试计划中的测试。我们可以使用Azure管道自动化许多类型的测试，例如单元测试、安全测试和代码覆盖率测试，该测试计算单元测试覆盖的代码百分比。
- en: 'Here are some key recommendations when using Azure Test Plans for testing:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Azure测试计划进行测试时，以下是一些关键建议：
- en: Make sure the testing is serving a purpose and has a positive impact on the
    product, and try not to test for the sake of testing.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保测试是有目的的，并对产品有积极的影响，并尽量不为了测试而测试。
- en: Keep the tests straightforward, focused, and short. Tests should run quickly,
    especially if they are triggered on the build or release of a product.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持测试简单、专注且简短。测试应该快速运行，尤其是如果它们是在产品的构建或发布上触发的。
- en: Summary
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored some key principles that outline fundamental guidelines
    required to conduct proper testing. We also learned about the essential testing
    types that we must know as solution architects. Being aware of each of these testing
    types will help us decide which functional and non-functional tests we should
    apply to ensure high-quality software products and to deliver products that meet
    requirements. In the last section of this chapter, we explored the capabilities
    of test plans in Azure DevOps, along with the key benefits.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了概述进行适当测试所需的基本指南的一些关键原则。我们还了解了作为解决方案架构师我们必须知道的必要测试类型。了解每种测试类型将帮助我们决定应该应用哪些功能和非功能测试，以确保高质量的软件产品并交付满足要求的产品。在本章的最后部分，我们探讨了Azure
    DevOps中测试计划的功能以及关键优势。
- en: In the next chapter, we will dig deep into architecting modern web applications
    with **ASP.NET Core** and **Microsoft Azure**.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨使用 **ASP.NET Core** 和 **Microsoft Azure** 架构现代网络应用程序。
