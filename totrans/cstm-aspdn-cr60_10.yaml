- en: '*Chapter 10*: Customizing ASP.NET Core Identity'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*: 自定义 ASP.NET Core Identity'
- en: In this tenth chapter, we are going to learn how to customize ASP.NET Core Identity.
    Security is one of the most important aspects of an application. Microsoft ships
    ASP.NET Core Identity as part of the ASP.NET Core framework to add authentication
    and user management to ASP.NET Core applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何自定义 ASP.NET Core Identity。安全性是应用程序最重要的方面之一。Microsoft 将 ASP.NET Core
    Identity 作为 ASP.NET Core 框架的一部分提供，以向 ASP.NET Core 应用程序添加身份验证和用户管理。
- en: 'In this chapter, you will learn how to customize the basic implementation of
    the ASP.NET Core Identity UI and how to add custom information to **IdentityUser**.
    We''ll cover the following points:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何自定义 ASP.NET Core Identity 的基本实现，以及如何向 **IdentityUser** 添加自定义信息。我们将涵盖以下内容：
- en: Introducing ASP.Net Core Identity
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 ASP.Net Core Identity
- en: Customizing IdentityUser
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义 IdentityUser
- en: Customizing the Identity views
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义身份视图
- en: 'The topics of this chapter relate to the MVC layer of the ASP.NET Core architecture:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题与 ASP.NET Core 架构的 MVC 层相关：
- en: '![Figure 10.1 – ASP.NET Core architecture](img/Figure_10.1_B17996.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – ASP.NET Core 架构](img/Figure_10.1_B17996.jpg)'
- en: Figure 10.1 – ASP.NET Core architecture
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the exercises in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章的练习，您需要创建一个 ASP.NET Core MVC 应用程序。打开您的控制台、shell 或 Bash 终端，切换到您的工作目录。使用以下命令创建一个新的
    MVC 应用程序：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or open it in Visual Studio Code by typing the following command in the already-open
    console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件在 Visual Studio 中打开项目，或者通过在已打开的控制台中输入以下命令在 Visual Studio Code 中打开它：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All of the code samples for this chapter can be found in the GitHub repo for
    this book: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter10).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有代码示例都可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter10)。
- en: Introducing ASP.NET Core Identity
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 ASP.NET Core Identity
- en: An `writer` tells the application that the identity is allowed to write something.
    Identities can be nested as well. A user can be part of a group, and a group can
    be part of another group, and so forth.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `writer` 告诉应用程序身份允许写入某些内容。身份也可以嵌套。用户可以是某个组的成员，而组也可以是另一个组的成员，依此类推。
- en: ASP.NET Core Identity is a framework that structures this concept in .NET objects
    to help you store and read the user information. The framework also provides a
    mechanism to add a login form, a registration form, session handling, and so on.
    It also helps you to store the credentials in an encrypted and secure way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 是一个框架，它将此概念结构化为 .NET 对象，以帮助您存储和读取用户信息。该框架还提供了一个机制来添加登录表单、注册表单、会话处理等。它还帮助您以加密和安全的方式存储凭据。
- en: 'ASP.NET Core Identity provides multiple ways to authenticate your users:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Identity 提供了多种方式来验证您的用户：
- en: '**Individual**: The application manages the identities on its own. It has a
    database where user information is stored and manages the login, logout, registration,
    and so on on its own.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人**: 应用程序自行管理身份。它有一个数据库，其中存储用户信息，并自行管理登录、注销、注册等。'
- en: '**IndividualB2C**: Manages the user data on its own, but gets it from Azure
    B2C.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人B2C**: 自行管理用户数据，但从中获取 Azure B2C 的数据。'
- en: '**SingleOrg**: The identities get managed by Azure **Active Directory** (**AD**);
    the login, logout, and so on are done by Azure AD. The application just gets a
    ready-to-use identity from the web server.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单组织**: 身份由 Azure **活动目录**（**AD**）管理；登录、注销等由 Azure AD 完成。应用程序只需从网络服务器获取一个现成的身份。'
- en: '**MultiOrg**: Same as the previous but enabled for multiple Azure AD organizations.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多组织**: 与之前相同，但支持多个 Azure AD 组织。'
- en: '**Windows**: This means the classical Windows authentication, which is only
    available if the application is hosted with IIS. The user also gets a ready-to-use
    identity from the web server.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**: 这意味着传统的 Windows 身份验证，仅在应用程序与 IIS 一起托管时才可用。用户还可以从网络服务器获得一个现成的身份。'
- en: This chapter is not about the different ways to authenticate because this topic
    would fill an entire book.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章不是关于不同身份验证方式的内容，因为这个主题可以填满整本书。
- en: Let's explore an application with **individual** authentication enabled.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索一个启用了**个人**身份验证的应用程序。
- en: As you might remember from the technical requirements, the `--auth` flag is
    used to create the application. It is set to `Individual` to create an ASP.NET
    Core MVC application with individual authentication enabled. This means it comes
    with a database to store the users. The `--auth` flag adds all the relevant code
    and dependencies to enable authentication in your freshly created application.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能从技术要求中记得的那样，`--auth` 标志用于创建应用程序。它设置为 `Individual` 以创建一个启用了个人身份验证的 ASP.NET
    Core MVC 应用程序。这意味着它附带一个用于存储用户的数据库。`--auth` 标志将添加所有相关代码和依赖项，以启用您新创建的应用程序中的身份验证。
- en: '![Figure 10.2 – Layout reference for the ASP.NET Identity UI](img/Figure_10.2_B17996.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.2 – ASP.NET Identity UI 布局参考](img/Figure_10.2_B17996.jpg)'
- en: Figure 10.2 – Layout reference for the ASP.NET Identity UI
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – ASP.NET Identity UI 布局参考
- en: The `--auth` flag creates an area called `Identity` that contains a `_ViewStart.cshtml`
    file, which references the `_Layout.cshtml` file of the new project. The actual
    login or register screens are provided in a compiled library that is referenced
    to this project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`--auth` 标志创建一个名为 `Identity` 的区域，其中包含一个 `_ViewStart.cshtml` 文件，该文件引用了新项目的 `_Layout.cshtml`
    文件。实际的登录或注册屏幕由一个引用到此项目的编译库提供。'
- en: The AUTHSAMPLE contains a `Data` folder that contains an Entity Framework Core
    DbContext, as well as a database migration to create and update the database that
    is used here.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: AUTHSAMPLE 包含一个 `Data` 文件夹，其中包含一个 Entity Framework Core DbContext，以及用于创建和更新此处使用的数据库的数据库迁移。
- en: All the other parts, except `Program.cs`, are completely the same as in regular
    MVC applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Program.cs` 之外的所有其他部分都与常规 MVC 应用程序完全相同。
- en: If you created the application using the .NET CLI as shown in the technical
    requirements, a **SQLite** database is used. If you used Visual Studio to create
    this application, SQL Server is used to store the user data.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用技术要求中所示的方式使用 .NET CLI 创建了应用程序，则使用 **SQLite** 数据库。如果您使用 Visual Studio 创建此应用程序，则使用
    SQL Server 来存储用户数据。
- en: 'Before starting the application, call the following command in the terminal:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动应用程序之前，在终端中调用以下命令：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This will create and update the database.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建和更新数据库。
- en: 'If it doesn''t work, you might need to install the Entity Framework tool in
    the .NET CLI first:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不起作用，你可能需要首先在 .NET CLI 中安装 Entity Framework 工具：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, call the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，调用以下命令：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The application will now start up in watch mode with hot-reload enabled. It
    will also open a browser window and call the application:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在将以监视模式启动，并启用热重载。它还会打开一个浏览器窗口并调用应用程序：
- en: '![Figure 10.3 – AuthSample home page'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – AuthSample 主页'
- en: '](img/Figure_10.3_B17996.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.3_B17996.jpg)'
- en: Figure 10.3 – AuthSample home page
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – AuthSample 主页
- en: 'As you can see, there is a menu on the upper right-hand side with the **Register**
    and **Login** options for this application. A click on the **Login** link takes
    you to the following login screen:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在右上角有一个菜单，其中包含此应用程序的 **注册** 和 **登录** 选项。点击 **登录** 链接将带您到以下登录界面：
- en: '![Figure 10.4 – Login screen'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – 登录界面'
- en: '](img/Figure_10.4_B17996.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.4_B17996.jpg)'
- en: Figure 10.4 – Login screen
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 登录界面
- en: As mentioned, this view comes from a compiled Razor library that provides the
    necessary view to the Identity area. We automatically get this UI from the framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，此视图来自一个编译的 Razor 库，它为 Identity 区域提供必要的视图。我们从框架中自动获取此 UI。
- en: As the last thing in this section, we should have a quick look into `Program.cs`,
    which also differs from the files we saw in the last chapters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后，我们应该快速查看 `Program.cs` 文件，它也与我们之前章节中看到的文件不同。
- en: 'In the upper section, where the services are registered, there are lines of
    code to register `DbContext` as well as database exception pages:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务注册的上部区域，有注册 `DbContext` 以及数据库异常页面的代码行：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: There is also a registration for default identity that adds the `EntityFramework`
    store. It is also configured to only allow confirmed accounts, which means you
    as a user need to confirm your email address before you are allowed to log in.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个用于默认身份的注册，它添加了 `EntityFramework` 存储。它还配置为仅允许已确认的账户，这意味着您作为用户需要在登录之前确认您的电子邮件地址。
- en: 'In the lower section, where the middleware is used, we see that the authentication
    and authorization is used:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用中间件的较低部分，我们看到身份验证和授权被使用：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These two middleware enable authentication and authorization. The first tries
    to recognize the user by reading the authentication cookie. It also adds all the
    relevant information to the Identity object.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个中间件启用身份验证和授权。第一个通过读取身份验证cookie来尝试识别用户。它还将所有相关信息添加到 Identity 对象中。
- en: What you might need to do is to extend the user profile by adding some more
    properties to the user. Let's see how to do so in the next section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要通过向用户添加更多属性来扩展用户配置文件。让我们看看如何在下一节中这样做。
- en: Customizing IdentityUser
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 IdentityUser
- en: '`IdentityUser` has the following fields: `Id`, `Username`, `Password`, `Email`,
    and `Phonenumber`.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`IdentityUser` 有以下字段：`Id`、`Username`、`Password`、`Email` 和 `Phonenumber`。'
- en: Since the display name might differ from the username, we should add a `Name`
    property. Say we would like to send birthday wishes to the user; so, we would
    like to know their date of birth.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 由于显示名称可能与用户名不同，我们应该添加一个 `Name` 属性。比如说，如果我们想向用户发送生日祝福，我们就想了解他们的出生日期。
- en: 'To do so, a file called `WebAppUser.cs` is added to the `Data` folder that
    contains the following lines:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，需要在 `Data` 文件夹中添加一个名为 `WebAppUser.cs` 的文件，其中包含以下行：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As shown here, `WebAppUser` derives from `IdentityUser` and extends it with
    the two already-mentioned properties.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如此所示，`WebAppUser` 从 `IdentityUser` 继承并扩展了前面提到的两个属性。
- en: 'In `Program.cs`, we need to modify the service registration to use the new
    `WebAppUser`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，我们需要修改服务注册以使用新的 `WebAppUser`：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We also need to change `DbContext` in a way to use this `WebAppUser`, by changing
    the base class:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要以更改基类的方式更改 `DbContext` 以使用此 `WebAppUser`。
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: You might need to add a `using` statement to `Microsoft.AspNetCore.Identity`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要向 `Microsoft.AspNetCore.Identity` 添加一个 `using` 语句。
- en: 'That''s it for the first step. We now need to update the database:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步就到这里。我们现在需要更新数据库：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Once you have `IdentityUser` extended with the custom properties, you can start
    to use this in the user profile. This needs some customization in the ASP.NET
    Core Identity UI.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你将 `IdentityUser` 扩展了自定义属性，你就可以开始在用户配置文件中使用它。这需要在 ASP.NET Core Identity UI
    中进行一些自定义。
- en: Customizing the Identity views
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义 Identity 视图
- en: Even if the ASP.NET Core Identity views come from a compiled Razor library,
    you can customize those views to add more fields or change the layout. To do so,
    you just need to override the given views with custom ones in the predefined folder
    structure within the area.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 ASP.NET Core Identity 视图来自编译的 Razor 库，你也可以自定义这些视图以添加更多字段或更改布局。为此，你只需在预定义的文件夹结构中的区域内用自定义视图覆盖给定的视图即可。
- en: As mentioned, there is already an area called `Identity` in the project. Inside
    this area, there is a `Pages` folder. Here, a new folder called `Account` needs
    to be created, to match the route of the **Register** page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，项目中已经有一个名为 `Identity` 的区域。在这个区域内部，有一个 `Pages` 文件夹。在这里，需要创建一个新的名为 `Account`
    的文件夹，以匹配 **Register** 页面的路由。
- en: 'If this is done, place a new Razor page called `Register.cshtml` inside this
    folder and put the following content inside just to see whether the overriding
    of views is working:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果已经完成，请在这个文件夹内放置一个新的 Razor 页面，命名为 `Register.cshtml`，并将以下内容放入其中，以查看视图覆盖是否生效：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you now run the app and click on **Register** in the upper left-hand corner,
    you will see the following page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在运行应用程序并点击左上角的 **Register**，你会看到以下页面：
- en: '![Figure 10.5 – Register page](img/Figure_10.5_B17996.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.5 – 注册页面](img/Figure_10.5_B17996.jpg)'
- en: Figure 10.5 – Register page
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 注册页面
- en: It is working.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在工作。
- en: Actually, you don't need to override the views on your own. There is a code
    generator available to scaffold the views you'd like to override.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你不需要自己覆盖视图。有一个代码生成器可用于构建你想要覆盖的视图。
- en: 'Install the code generator by calling this command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通过调用以下命令安装代码生成器：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If not already done, you also need to install the following packages in your
    project:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还没有完成，你还需要在你的项目中安装以下包：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To learn what the code generator can do, run the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解代码生成器能做什么，请运行以下命令：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can scaffold the entire Identity UI as well as specific pages. If you don''t
    specify pages of the default UI, all pages will be generated in your project.
    To see which pages you can generate, type the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以构建整个身份 UI 以及特定的页面。如果你没有指定默认 UI 的页面，所有页面都将生成到你的项目中。要查看你可以生成的页面，请输入以下命令：
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The idea for the first change is to let the user fill in the name property on
    the registration page.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次更改的想法是让用户在注册页面上填写名称属性。
- en: 'So, let''s scaffold the **Register** page:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们生成**注册**页面：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This command tells the code generator to use the already-existing `ApplicationDbContext`
    and `Sqlite`. If you don't specify this, it will either create a new `DbContext`
    or register the existing `DbContext` to use with SQL Server instead of SQLite.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令告诉代码生成器使用已存在的`ApplicationDbContext`和`Sqlite`。如果你没有指定，它将创建一个新的`DbContext`或注册现有的`DbContext`以使用SQL
    Server而不是SQLite。
- en: 'If all is done right, the code generator should only add the `Register.cshtml`
    page as well as some infrastructure files:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确，代码生成器应该只添加`Register.cshtml`页面以及一些基础设施文件：
- en: '![Figure 10.6 – Files added by the code generator](img/Figure_10.6_B17996.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6 – 代码生成器添加的文件](img/Figure_10.6_B17996.jpg)'
- en: Figure 10.6 – Files added by the code generator
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6 – 代码生成器添加的文件
- en: The code generator also knows that the project is using a custom `WebAppUser`
    instead of `IdentityUser`, which means `WebAppUser` is used in the generated code.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 代码生成器也知道项目正在使用自定义的`WebAppUser`而不是`IdentityUser`，这意味着`WebAppUser`在生成的代码中使用。
- en: 'Now, you should change `Register.cshtml` to add the display name to the form.
    Add the following lines right before the form elements for the email field on
    line 15 and thereafter:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该将`Register.cshtml`更改为添加显示名称到表单中。在15行电子邮件字段之前的表单元素中添加以下行：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Also, `Regiser.cshtml.cs` need to be changed. The `ImportModel` class needs
    the `Name` property:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`Regiser.cshtml.cs`也需要更改。`ImportModel`类需要`Name`属性：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the `PostAsync` method, assign the `Name` property to the newly created
    user:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在`PostAsync`方法中，将`Name`属性分配给新创建的用户：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: That's it.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。
- en: 'After starting the application, you will see the following registration form:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 启动应用程序后，你会看到以下注册表单：
- en: '![Figure 10.7 – Registration form'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 注册表单'
- en: '](img/Figure_10.7_B17996.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/Figure_10.7_B17996.jpg)'
- en: Figure 10.7 – Registration form
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 注册表单
- en: Try it out and you will see that it is working.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下，你就会看到它正在工作。
- en: 'Since the user might need to update the name, we also need to change the view
    on the profile page. Here, the date of birth also needs to be added:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户可能需要更新名称，我们还需要更改个人资料页面的视图。在这里，还需要添加出生日期：
- en: '[PRE20]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Open the newly created `Index.cshtml.cs` that is located in the `/Areas/Identity/Pages/Account/Manage/`
    folder and place the following properties inside the `InputModel` class:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`/Areas/Identity/Pages/Account/Manage/`文件夹中的新创建的`Index.cshtml.cs`，并在`InputModel`类中放置以下属性：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can now use these properties in the corresponding `Index.cshtml`. The next
    snippet needs to be placed between the validation summary and the username:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在相应的`Index.cshtml`中使用这些属性。下一个代码片段需要放置在验证摘要和用户名之间：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'This would be enough to display the fields, but there are some more changes
    needed to fill the form with saved data. Within the `LoadAsync` method, the instantiation
    of `InputModel` needs to be extended with the new properties:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这足以显示字段，但还需要进行一些更改来填充保存的数据。在`LoadAsync`方法中，`InputModel`的实例化需要扩展到新属性：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The changed values also need to get saved when the user saves the form. Place
    the next snippet right before the third-from-last line of the `OnPostAsync` method:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户保存表单时，更改的值也需要保存。在`OnPostAsync`方法的倒数第三行之前放置以下代码片段：
- en: '[PRE24]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This sets the values of `InputModel` to the `WebAppUser` properties and saves
    the changes in the database.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将`InputModel`的值设置为`WebAppUser`属性，并在数据库中保存更改。
- en: Let's try it out by calling `dotnet watch` in the terminal.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在终端中调用`dotnet watch`来试一下。
- en: 'The profile page will now look similar to this:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在个人资料页面将看起来类似于这个：
- en: '![Figure 10.8 – Manage your account page'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.8 – 管理账户页面'
- en: '](img/Figure_10.8_B17996.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/Figure_10.8_B17996.jpg)'
- en: Figure 10.8 – Manage your account page
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 管理账户页面
- en: You can now change the display name and add your date of birth.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以更改显示名称并添加你的出生日期。
- en: If the user provides a display name, they might show it in the upper left-hand
    corner after the login.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户提供了显示名称，他们可能会在登录后左上角显示它。
- en: 'Open the `_LoginPartial.cshtml` that is in the `Views/Shared` folder and replace
    the first four lines with the following code snippet:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 打开位于`Views/Shared`文件夹中的`_LoginPartial.cshtml`，并将前四行替换为以下代码片段：
- en: '[PRE25]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This changes the generic type argument of `SignInManager` and `UserManager`
    from the `IdentityUser` type to the `WebAppUser` type. Inside the code block,
    the current `WebAppUser` is loaded via `UserManager` by passing the current user
    in.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `SignInManager` 和 `UserManager` 的泛型类型参数从 `IdentityUser` 类型更改为 `WebAppUser`
    类型。在代码块内部，通过传递当前用户，使用 `UserManager` 加载当前的 `WebAppUser`。
- en: 'Now, the output of the username on line 12 needs to be changed to write the
    display name:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，需要将第 12 行上用户名的输出更改为写入显示名称：
- en: '[PRE26]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When `dotnet watch` is still running, the application running in the browser
    should already be updated. Maybe you need to log in again. You should now see
    the display name in the upper right-hand corner:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `dotnet watch` 仍在运行时，浏览器中运行的应用程序应该已经更新。可能你需要重新登录。现在你应该在右上角看到显示名称：
- en: '![Figure 10.9 – Display name'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.9 – 显示名称'
- en: '](img/Figure_10.9_B17996.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.9_B17996.jpg](img/Figure_10.9_B17996.jpg)'
- en: Figure 10.9 – Display name
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 显示名称
- en: That's it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。
- en: Summary
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to extend ASP.NET Core Identity to enhance
    the user object by adding additional properties. You also learned how to enhance
    the Identity UI to load, save, and update the values of the new user properties.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何通过添加额外的属性来扩展 ASP.NET Core Identity，以增强用户对象。你还学习了如何增强 Identity UI
    以加载、保存和更新新用户属性的值。
- en: But how would you manage roles for the users of your application?
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 但你将如何管理你应用程序的用户角色？
- en: This is what you will learn in the next chapter, about configuring identity
    management.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是下一章你要学习的内容，关于配置身份管理。
