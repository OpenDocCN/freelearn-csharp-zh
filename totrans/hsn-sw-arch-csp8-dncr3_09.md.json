["```cs\n{\n    \"indexingMode\": \"consistent\",\n    \"automatic\": true,\n    ...\n```", "```cs\n{\n    ...\n    \"includedPaths\": [\n        {\n            \"path\": \"/*\",\n            \"indexes\": [\n                {\n                    \"kind\": \"Range\",\n                    \"dataType\": \"Number\",\n                    \"precision\": -1\n                },\n                {\n                    \"kind\": \"Range\",\n                    \"dataType\": \"String\",\n                    \"precision\": -1\n                },\n                {\n                    \"kind\": \"Spatial\",\n                    \"dataType\": \"Point\"\n                }\n            ]\n        }\n    ]\n},\n...\n```", "```cs\n    ...\n    \"excludedPaths\": [\n        {\n            \"path\": \"/\\\"_etag\\\"/?\"\n        }\n    ]\n```", "```cs\nvar client = new DocumentClient(new Uri(\"service endpoint\"), \"auth key\")\n```", "```cs\nDatabase db = client.CreateDatabaseIfNotExistsAsync(new Database { Id = \"MyDatabase\" }).Result;\n```", "```cs\nvar collection = client.CreateDocumentCollectionIfNotExistsAsync(\n    UriFactory.CreateDatabaseUri(\"MyDatabase\"), \n    new DocumentCollection { Id = \"MyCollection\" }).Result;\n```", "```cs\ncontext.Database.EnsureCreated();\n```", "```cs\nbuilder.Entity<MyEntity>()\n     .ToContainer(\"collection-name\");\n```", "```cs\nbuilder.Entity<Destination>()\n    .OwnsMany(m => m.Packages); \n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Design;\n\nnamespace WWTravelClubDB\n{\n    public class LibraryDesignTimeDbContextFactory\n        : IDesignTimeDbContextFactory<MainDBContext>\n    {\n        private const string endpoint = \"<your account endpoint>\";\n        private const string key = \"<your account key>\";\n        private const string datbaseName = \"packagesdb\";\n        public MainDBContext CreateDbContext(params string[] args)\n        {\n            var builder = new DbContextOptionsBuilder<Main\n            DBContext>();\n\n            builder.UseCosmos(endpoint, key, datbaseName);\n            return new MainDBContext(builder.Options);\n        }\n    }\n}\n```", "```cs\nvar context = new LibraryDesignTimeDbContextFactory()\n    .CreateDbContext();\ncontext.Database.EnsureCreated();\nvar firstDestination = new Destination\n{\n    Id = Guid.NewGuid().ToString(),\n    Name = \"Florence\",\n    Country = \"Italy\",\n    Packages = new List<Package>()\n    {\n    new Package\n    {\n        Id=Guid.NewGuid().ToString(),\n        Name = \"Summer in Florence\",\n        StartValidityDate = new DateTime(2019, 6, 1),\n        EndValidityDate = new DateTime(2019, 10, 1),\n        DuratioInDays=7,\n        Price=1000\n    },\n    new Package\n    {\n        Id=Guid.NewGuid().ToString(),\n        Name = \"Winter in Florence\",\n        StartValidityDate = new DateTime(2019, 12, 1),\n        EndValidityDate = new DateTime(2020, 2, 1),\n        DuratioInDays=7,\n        Price=500\n    }\n    }\n};\n```", "```cs\nvar list = context.Destinations\n    .AsEnumerable() // move computation on the client side\n    .SelectMany(m => m.Packages)\n    .Where(m => period >= m.StartValidityDate....)\n    ...\n```"]