["```cs\nint[] items = { 1, 2, 3, 42, 84, 37, 23 };\nvar filtered = new List<int>();\nforeach (var item in items)\n{\n    if( item >= 37 )\n    {\n        filtered.Add(item);\n    }\n}\nConsole.WriteLine(string.Join(',', filtered));\n```", "```cs\nint[] items = { 1, 2, 3, 42, 84, 37, 23 };\nvar selectedItems =\n    from i in items\n    where i >= 37\n    select i;\nConsole.WriteLine(string.Join(',', selectedItems));\n```", "```cs\nint[] items = { 1, 2, 3, 42, 84, 37, 23 };\nvar selectedItemsExpressions = items\n    .Where(i => i >= 37)\n    .Select(i => i);\nConsole.WriteLine(string.Join(',',\n  selectedItemsExpressions));\n```", "```cs\npublic static IEnumerable<TSource> Where<TSource>(this\n  IEnumerable<TSource> source, Func<TSource, bool>\n    predicate);\n```", "```cs\nint[] items = { 1, 2, 3, 42, 84, 37, 23 };\nvar selectedItemsExpressions = items\n    .AsQueryable()  // Making the array a queryable\n    .Where(i => i >= 37)\n    .Select(i => i);\nConsole.WriteLine(string.Join(',', selectedItems\n  Expressions));\n```", "```cs\npublic static IQueryable<TSource> Where<TSource>(this\n  IQueryable<TSource> source, Expression<Func<TSource,\n    bool>> predicate);\n```", "```cs\nint[] items = { 1, 2, 3, 42, 84, 37, 23 };\n// Extracted expression\nExpression<Func<int, bool>> filter = (i) => i >= 37;\nvar selectedItemsExpressions = items\n    .AsQueryable()\n    .Where(filter)\n    .Select(i => i);\nConsole.WriteLine(string.Join(',', selectedItems\n  Expressions));\n```", "```cs\n(input parameters) => expression\n```", "```cs\nExpression<Func<int, bool>> filter = (i) => i >= 37;\n```", "```cs\n(input parameters) => { <sequence of statements> }\n```", "```cs\n(string name) =>\n{\n    var message = $\"Hello {name}\";\n    Console.WriteLIne(message);\n}\n```", "```cs\nExpression<Func<int, bool>> filter = (i) => i >= 37;\n```", "```cs\npublic record Employee(string FirstName, string LastName);\n```", "```cs\nExpression<Func<Employee, bool>> employeeFilter =\n  (employee) => employee.FirstName == \"Jane\";\n```", "```cs\nExpression<Func<int, int>> addExpression = (i) => i + 42;\n```", "```cs\npublic class CustomerValidator : AbstractValidator<Customer>\n{\n  public CustomerValidator()\n  {\n    RuleFor(x => x.Surname).NotEmpty();\n    RuleFor(x => x.Forename).NotEmpty().WithMessage(\"Please\n      specify a first name\");\n    RuleFor(x => x.Discount).NotEqual(0).When(x =>\n      x.HasDiscount);\n    RuleFor(x => x.Address).Length(20, 250);\n    RuleFor(x => x.Postcode).Must(\n      BeAValidPostcode).WithMessage(\"Please specify a\n      valid postcode\");\n  }\n  private bool BeAValidPostcode(string postcode)\n  {\n    // custom postcode validating logic goes here\n  }\n}\n```", "```cs\npublic IRuleBuilderInitial<T, TProperty>\n  RuleFor<TProperty>(Expression<Func<T, TProperty>>\n    expression);\n```", "```cs\npublic static MemberExpression GetMemberExpression(this\n  Expression expression)\n{\n    var lambda = expression as LambdaExpression;\n    if (lambda?.Body is UnaryExpression)\n    {\n        var unaryExpression = lambda.Body as\n          UnaryExpression;\n        return (MemberExpression)unaryExpression!.Operand!;\n    }\n    return (MemberExpression)lambda?.Body!;\n}\n```", "```cs\npublic static PropertyInfo GetPropertyInfo(this Expression\n  expression)\n{\n    var memberExpression = GetMemberExpression(expression);\n    return (PropertyInfo)memberExpression.Member!;\n}\n```"]