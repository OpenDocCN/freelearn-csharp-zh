["```cs\nusing System.ComponentModel;\nThen we declare it in the code.\nBackgroundWorker Worker = new BackgroundWorker();\n```", "```cs\n    // The simulated code to be broken\n       private string Code;\n       // The list of Labels of the characters to be broken.\n       private List<TextBlock> OutputCharLabels;\n    ```", "```cs\n        private void SimulateCodeGeneration()\n        {\n            // A Random number generator.\n            Random loRandom = new Random();\n            // The char position being generated\n            int i;\n\n            Code = \"\";\n            for (i = 0; i <= 4; i++)\n            {\n                // Generate a Random Unicode char for each of \n                //the 4 positions\n                Code += (char)(loRandom.Next(65535));\n            }\n        }\n    ```", "```cs\n            private void setFishesVisibility(System.Windows.Visibility pbValue)\n            {\n                // Change the visibility of the controls \n                //related to the fishes game.\n                imgFish1.Visibility = pbValue;\n                imgFish2.Visibility = pbValue;\n                imgFish3.Visibility = pbValue;\n                txtFishGame.Visibility = pbValue;\n                btnGameOver.Visibility = pbValue;\n            }\n    ```", "```cs\n            private void setCodeBreakerVisibility(System.Windows.Visibility pbValue)\n            {\n                // Change the visibility of the controls related to the CodeBreaking procedure.\n                imgSkull.Visibility = pbValue;\n                imgAgent.Visibility = pbValue;\n                txtCodeBreaker.Visibility = pbValue;\n                txtNumber1.Visibility = pbValue;\n                txtNumber2.Visibility = pbValue;\n                txtNumber3.Visibility = pbValue;\n                txtNumber4.Visibility = pbValue;\n                txtOutput1.Visibility = pbValue;\n                txtOutput2.Visibility = pbValue;\n                txtOutput3.Visibility = pbValue;\n                txtOutput4.Visibility = pbValue;\n                btnStart.Visibility = pbValue;\n                btnHide.Visibility = pbValue;\n            }\n    ```", "```cs\n    private void showFishes()\n    {\n    // Hide all the controls related to the code \n    // breaking procedure.\n    setCodeBreakerVisibility(System.Windows.Visibility.Hidden);\n    // Change the window title\n    this.Title = \"Fishing game for Windows 1.0\";\n    // Make the fishes visible\n    setFishesVisibility(System.Windows.Visibility.Visible);\n\n    }\n    ```", "```cs\n            private void showCodeBreaker()\n            {\n                // Hide all the controls related to the fishes \n                // game\n                setFishesVisibility(System.Windows.Visibility.Hidden);\n                // Change the window title\n                this.Title = \"CodeBreaker Application\";\n                // Make the code breaker controls visible\n                setCodeBreakerVisibility(System.Windows.Visibility.Visible);\n\n            }\n    ```", "```cs\n            private bool checkCodeChar(char pcChar, int piCharNumber)\n            {\n                // Returns a bool value indicating whether the piCharNumber position of the code is the pcChar received.\n                return (Code[piCharNumber] == pcChar);\n            }\n    ```", "```cs\n                // Generate a random code to be broken\n                SimulateCodeGeneration();\n                // Create a new list of Label controls that show the characters of the code being broken.\n                OutputCharLabels = new List<TextBlock>(4);\n                // Add the Label controls to the List\n                OutputCharLabels.Add(txtOutput1);\n                OutputCharLabels.Add(txtOutput2);\n                OutputCharLabels.Add(txtOutput3);\n             OutputCharLabels.Add(txtOutput4);\n            // Hide the fishes game and show the CodeBreaker\n            showCodeBreaker();\n    ```", "```cs\n        // Hide the fishes game and show the CodeBreaker\n        showCodeBreaker();\n    ```", "```cs\n        // Hide the CodeBreaker and show the fishes game\n        showFishes();\n    ```", "```cs\n                    // This code will break the simulated code.\n                // This variable will hold a number to iterate from 1 to 65,535 - Unicode character set.\n                int i;\n                // This variable will hold a number to iterate from 0 to 3 (the characters positions in the code to be broken).\n                int liCharNumber;\n                // This variable will hold a char generated from the number in i\n                char lcChar;\n                // This variable will hold the current Label control that shows the char position being decoded.\n                TextBlock loOutputCharCurrentLabel;\n\n                for (liCharNumber = 0; liCharNumber < 4; liCharNumber++)\n                {\n                    loOutputCharCurrentLabel =\n                    OutputCharLabels[liCharNumber];\n                    // This loop will run 65,536 times\n                    for (i = 0; i <= 65535; i++)\n                    {\n                        // myChar holds a Unicode char\n                        lcChar = (char)(i);\n                        loOutputCharCurrentLabel.Text = lcChar.ToString();\n                        //Application.DoEvents();\n                        if (checkCodeChar(lcChar, liCharNumber))\n                        {\n                            // The code position was found\n                            break;\n                        }\n                    }\n                }\n                MessageBox.Show(\"The code has been decoded successfully.\", this.Title);\n    ```", "```cs\n    private readonly BackgroundWorker bakCodebreaker = new BackgroundWorker();\n    ```", "```cs\n    bakCodebreaker.DoWork += bakCodebreaker_DoWork;\n    ```", "```cs\n            private void bakCodebreaker_DoWork(object sender, DoWorkEventArgs e)\n            {\n                // This code will break the simulated code.\n                // This variable will hold a number to iterate from 1 to 65,535 - Unicode character set.\n                int i;\n                // This variable will hold a number to iterate from 0 to 3 (the characters positions in the code to be broken).\n                int liCharNumber;\n                // This variable will hold a char generated from the number in i\n                char lcChar;\n                // This variable will hold the current Label control that shows the char position being decoded.\n                TextBlock loOutputCharCurrentLabel;\n\n                for (liCharNumber = 0; liCharNumber < 4; liCharNumber++)\n                {\n                    loOutputCharCurrentLabel =\n                    OutputCharLabels[liCharNumber];\n                    // This loop will run 65,536 times\n                    for (i = 0; i <= 65535; i++)\n                    {\n\n                        // myChar holds a Unicode char\n                        lcChar = (char)(i);\n                        //loOutputCharCurrentLabel.Text = lcChar.ToString();\n\n                        if (checkCodeChar(lcChar, liCharNumber))\n                        {\n                            // The code position was found\n                            break;\n\n                        }\n                    }\n\n                   // MessageBox.Show(\"The code has been decoded successfully.\",\n                   //                  this.Title);\n                }\n          }\n    ```", "```cs\n        // loOutputCharCurrentLabel.Text = lcChar.ToString();\n        // MessageBox.Show(\"The code has been decoded successfully.\", this.Title);\n    ```", "```cs\n        // Start running the code programmed in \n        // BackgroundWorker DoWork event handler\n        // in a new independent thread and return control to \n        // the application's main thread\n        bakCodebreaker.RunWorkerAsync();\n    ```", "```cs\n    bakCodebreaker.ProgressChanged += bakCodebreaker_ProgressChanged;\n    ```", "```cs\n        // Change the visibility of the controls related to the \n        // progress of the CodeBreaking procedure\n        pgbProgressChar1.Visibility = pbValue;\n        pgbProgressChar2.Visibility = pbValue;\n        pgbProgressChar3.Visibility = pbValue;\n        pgbProgressChar4.Visibility = pbValue;\n    ```", "```cs\n       // The list of ProgressBar controls that show the \n       // progress of the character being decoded\n     private List<ProgressBar> prloProgressChar;\n    ```", "```cs\n      // Create a new list of ProgressBar controls that show \n      // the progress of each character of the code being \n      // broken\n        prloProgressChar = new List<ProgressBar>(4);\n        // Add the ProgressBar controls to the list\n        prloProgressChar.Add(pgbProgressChar1);\n        prloProgressChar.Add(pgbProgressChar2);\n        prloProgressChar.Add(pgbProgressChar3);\n        prloProgressChar.Add(pgbProgressChar4);\n    ```", "```cs\n        public class CodeBreakerProgress\n        {\n            // The char position in the 4 chars code\n            private int priCharNumber;\n            // The Unicode char code\n            private int priCharCode;\n            // The decoding process percentage completed\n            private int priPercentageCompleted;\n\n            public int CharNumber\n            {\n                get\n                {\n                    return priCharNumber;\n                }\n                set\n                {\n                    priCharNumber = value;\n                }\n            }\n\n            public int CharCode\n            {\n                get\n                {\n                    return priCharCode;\n                }\n                set\n                {\n                    priCharCode = value;\n                }\n            }\n\n            public int PercentageCompleted\n            {\n                get\n                {\n                    return priPercentageCompleted;\n                }\n                set\n                {\n                    priPercentageCompleted = value;\n                }\n            }\n        }\n    ```", "```cs\n        // This variable will hold a CodeBreakerProgress \n        // instance\n        CodeBreakerProgress loCodeBreakerProgress = new CodeBreakerProgress();\n        // This variable will hold the last percentage of the iteration completed\n        int liOldPercentageCompleted;\n\n        liOldPercentageCompleted = 0;\n    ```", "```cs\n        // The percentage completed is calculated and stored in \n        // the PercentageCompleted property\n        loCodeBreakerProgress.PercentageCompleted = (int)((i * 100) / 65535);\n        loCodeBreakerProgress.CharNumber = liCharNumber;\n        loCodeBreakerProgress.CharCode = i;\n\n        if (loCodeBreakerProgress.PercentageCompleted > liOldPercentageCompleted)\n        {\n            // The progress is reported only when it changes with regard to the last one (liOldPercentageCompleted)\n            bakCodebreaker.ReportProgress(loCodeBreakerProgress.PercentageCompleted, loCodeBreakerProgress);\n            // The old percentage completed is now the \n            // percentage reported\n            liOldPercentageCompleted = loCodeBreakerProgress.PercentageCompleted;\n        }\n    ```", "```cs\n        // The code position was found\n        loCodeBreakerProgress.PercentageCompleted = 100;\n        bakCodebreaker.ReportProgress(loCodeBreakerProgress.PercentageCompleted, loCodeBreakerProgress);\n    ```", "```cs\n        // This variable will hold a CodeBreakerProgress instance\n        CodeBreakerProgress loCodeBreakerProgress = (CodeBreakerProgress)e.UserState; \n\n        // Update the corresponding ProgressBar with the percentage received in the as a parameter\n        prloProgressChar[loCodeBreakerProgress.CharNumber].Value = loCodeBreakerProgress.PercentageCompleted;\n        // Update the corresponding Label with the character being processed\n        OutputCharLabels[loCodeBreakerProgress.CharNumber].Text = ((char)loCodeBreakerProgress.CharCode).ToString();\n    ```", "```cs\nSystem.Threading.Thread.Sleep(1);\n```", "```cs\n        // Change the visibility of the new stop button\n          btnStop.Visibility = pbValue;\n    ```", "```cs\n        if (bakCodebreaker.CancellationPending)\n        {\n            // The user requested to cancel the process\n            e.Cancel = true;\n            return;\n       }\n    ```", "```cs\n                    // Disable the Start button\n                btnStart.IsEnabled = false;\n                // Enable the Stop button\n                btnStop.IsEnabled = true;\n    ```", "```cs\n                    // Disable the Stop button\n                btnStop.IsEnabled = false;\n                // Enable the Start button\n                btnStart.IsEnabled = true;\n\n                //Call the CancelAsync method to cancel the \n                // process.\n                bakCodebreaker.CancelAsync();\n    ```", "```cs\n        public class CodeBreakerParameters\n        {\n            // The first char position in the 4 chars code to \n            // process\n               private int priFirstCharNumber;\n            // The last char position in the 4 chars code to \n            // process\n               private int priLastCharNumber;\n            // The maximum number of the Unicode character\n            private int priMaxUnicodeCharCode;\n\n            public int FirstCharNumber\n            {\n                get\n                {\n                    return priFirstCharNumber;\n                }\n                set\n                {\n                    priFirstCharNumber = value;\n                }\n            }\n\n            public int LastCharNumber\n            {\n                get\n                {\n                    return priLastCharNumber;\n                }\n                set\n                {\n                    priLastCharNumber = value;\n                }\n            }\n\n            public int MaxUnicodeCharCode\n            {\n                get\n                {\n                    return priMaxUnicodeCharCode;\n                }\n                set\n                {\n                    priMaxUnicodeCharCode = value;\n                }\n            }\n        }\n    ```", "```cs\n        public class CodeBreakerResult\n        {\n            // The first char position in the 4 chars code to \n            // process\n            private int priFirstCharNumber;\n            // The last char position in the 4 chars code to \n            // process\n            private int priLastCharNumber;\n            // The part of the broken code \n            private string prsBrokenCode;\n\n            public int FirstCharNumber\n            {\n                get\n                {\n                    return priFirstCharNumber;\n                }\n                set\n                {\n                    priFirstCharNumber = value;\n                }\n            }\n\n            public int LastCharNumber\n            {\n                get\n                {\n                    return priLastCharNumber;\n                }\n                set\n                {\n                    priLastCharNumber = value;\n                }\n            }\n\n            public string BrokenCode\n            {\n                get\n                {\n                    return prsBrokenCode;\n                }\n                set\n                {\n                    prsBrokenCode = value;\n                }\n            }\n        }\n    ```", "```cs\n        // Start running the code programmed in each \n        // BackgroundWorker DoWork event handler in a new \n        // independent thread and return control to the \n        // application's main thread\n        // First, create the CodeBreakerParameters for each \n        // BackgroundWorker and set its parameters\n        CodeBreakerParameters loParameters1 = new CodeBreakerParameters();\n        CodeBreakerParameters loParameters2 = new CodeBreakerParameters();\n        CodeBreakerParameters loParameters3 = new CodeBreakerParameters();\n        CodeBreakerParameters loParameters4 = new CodeBreakerParameters();\n        loParameters1.MaxUnicodeCharCode = 32000;\n        loParameters1.FirstCharNumber = 0;\n        loParameters1.LastCharNumber = 0;\n        loParameters2.MaxUnicodeCharCode = 32000;\n        loParameters2.FirstCharNumber = 1;\n        loParameters2.LastCharNumber = 1;\n        loParameters3.MaxUnicodeCharCode = 32000;\n        loParameters3.FirstCharNumber = 2;\n        loParameters3.LastCharNumber = 2;\n        loParameters4.MaxUnicodeCharCode = 32000;\n        loParameters4.FirstCharNumber = 3;\n        loParameters4.LastCharNumber = 3;\n        bakCodebreaker.RunWorkerAsync(loParameters1);\n        bakCodebreaker2.RunWorkerAsync(loParameters2);\n        bakCodebreaker3.RunWorkerAsync(loParameters3);\n        bakCodebreaker4.RunWorkerAsync(loParameters4);\n    ```", "```cs\n        bakCodebreaker2.CancelAsync();\n        bakCodebreaker3.CancelAsync();\n        bakCodebreaker4.CancelAsync();\n    ```", "```cs\n        private void DoWorkProcedure(object sender, DoWorkEventArgs e)\n    ```", "```cs\n        // This variable will hold the broken code\n        string lsBrokenCode = \"\";\n        CodeBreakerParameters loCodeBreakerParameters = (CodeBreakerParameters)e.Argument;\n    ```", "```cs\n        int liTotal = loCodeBreakerParameters.MaxUnicodeCharCode;\n    ```", "```cs\n        for (liCharNumber = loCodeBreakerParameters.FirstCharNumber; liCharNumber <= loCodeBreakerParameters.LastCharNumber; liCharNumber++)\n    ```", "```cs\n       if (((BackgroundWorker)sender).CancellationPending)\n    ```", "```cs\n    ((BackgroundWorker)sender).ReportProgress(loCodeBreakerProgress.PercentageCompleted, loCodeBreakerProgress);\n    ```", "```cs\n        ((BackgroundWorker)sender).ReportProgress(loCodeBreakerProgress.PercentageCompleted, loCodeBreakerProgress);\n    ```", "```cs\n        // Create a new instance of the CodeBreakerResult class \n        // and set its properties' values\n        CodeBreakerResult loResult = new CodeBreakerResult();\n        loResult.FirstCharNumber = loCodeBreakerParameters.FirstCharNumber;\n        loResult.LastCharNumber = loCodeBreakerParameters.LastCharNumber;\n        loResult.BrokenCode = lsBrokenCode;\n        // Return a CodeBreakerResult instance in the Result \n        // property\n        e.Result = loResult;\n    ```", "```cs\n        private void RunWorkerCompletedProcedure(object sender, RunWorkerCompletedEventArgs e)\n        {\n            if (!e.Cancelled)\n            {\n                // Obtain the CodeBreakerResult instance \n                // contained in the Result property of e \n                // parameter\n                CodeBreakerResult loResult = (CodeBreakerResult)e.Result;\n                int i;\n\n                // Iterate through the parts of the result \n                // resolved by this BackgroundWorker\n                for (i = loResult.FirstCharNumber; i <= loResult.LastCharNumber; i++)\n                {\n                    // The process has finishes, therefore the \n                    // ProgressBar control must show a 100%\n                    prloProgressChar[i].Value = 100;\n                    // Show the part of the broken code in the \n                    // label\n                    OutputCharLabels[i].Text = loResult.BrokenCode[i - loResult.FirstCharNumber].ToString();\n                }\n        }\n    ```", "```cs\n        private void ProgressChangedProcedure(object sender, ProgressChangedEventArgs e)\n        {\n            // This variable will hold a CodeBreakerProgress \n            // instance\n            CodeBreakerProgress loCodeBreakerProgress = (CodeBreakerProgress)e.UserState;\n            // Update the corresponding ProgressBar with the percentage received as a parameter\n            prloProgressChar[loCodeBreakerProgress.CharNumber].Value = loCodeBreakerProgress.PercentageCompleted;\n            // Update the corresponding Label with the character being processed\n            OutputCharLabels[loCodeBreakerProgress.CharNumber].Text = ((char)loCodeBreakerProgress.CharCode).ToString();\n        }\n    ```", "```cs\n        DoWorkProcedure(sender, e);\n    ```", "```cs\n        ProgressChangedProcedure(sender, e);\n    ```", "```cs\n        RunWorkerCompletedProcedure(sender, e);\n    ```"]