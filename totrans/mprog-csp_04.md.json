["```cs\n    dotnet new console\n    ```", "```cs\n    using System.Reflection;\n    var assembly = Assembly.GetEntryAssembly();\n      Console.WriteLine(assembly.FullName)\n    ```", "```cs\nAssemblyDiscovery, Version=1.0.0.0, Culture=neutral,\n  PublicKeyToken=null\n```", "```cs\nusing System.Reflection;\nvar assembly = Assembly.GetEntryAssembly();\nConsole.WriteLine(assembly!.FullName);\nvar assemblies = assembly!.GetReferencedAssemblies();\nvar assemblyNames = string.Join(\", \", assemblies.Select(_\n  => _.Name));\nConsole.WriteLine(assemblyNames);\n```", "```cs\nAssemblyDiscovery, Version=1.0.0.0, Culture=neutral,\n  PublicKeyToken=null\nSystem.Runtime, System.Console, System.Linq\n```", "```cs\n    dotnet new classlib\n    ```", "```cs\ndotnet add package\n  Microsoft.Extensions.DependencyModel\n```", "```cs\nnamespace Fundamentals;\npublic class Types\n{\n}\n```", "```cs\n    using System.Reflection;\n    using Microsoft.Extensions.DependencyModel;\n    ```", "```cs\n    IEnumerable<Type> DiscoverAllTypes()\n    {\n        var entryAssembly = Assembly.GetEntryAssembly();\n        var dependencyModel =\n          DependencyContext.Load(entryAssembly);\n        var projectReferencedAssemblies =\n          dependencyModel.RuntimeLibraries\n                            .Where(_ => _.Type.Equals\n                              (\"project\"))\n                            .Select(_ => Assembly.Load\n                              (_.Name))\n                            .ToArray();\n    }\n    ```", "```cs\n    IEnumerable<Type> DiscoverAllTypes(IEnumerable<string>\n      assemblyPrefixesToInclude)\n    {\n        // ... leave the content of this method as before\n    }\n    ```", "```cs\n    var assemblies = dependencyModel.RuntimeLibraries\n                        .Where(_ =>\n                      _.RuntimeAssemblyGroups.Count > 0 &&\n                        assemblyPrefixesToInclude.Any(asm\n                        => _.Name.StartsWith(asm)))\n                        .Select(_ =>\n                        {\n                            try\n                            {\n                                return Assembly.Load\n                                  (_.Name);\n                            }\n                            catch\n                            {\n                                return null!;\n                            }\n                        })\n                        .Where(_ => _ is not null)\n                        .Distinct()\n                        .ToList();\n    ```", "```cs\nassemblies.AddRange(projectReferencedAssemblies);\nreturn assemblies.SelectMany(_ => _.GetTypes())\n  .ToArray();\n```", "```cs\n    public IEnumerable<Type> All { get; }\n    ```", "```cs\n    public Types(params string[]\n        assemblyPrefixesToInclude)\n    {\n        All = DiscoverAllTypes(assemblyPrefixesToInclude);\n    }\n    ```", "```cs\ndotnet new classlib\n```", "```cs\ndotnet new console\n```", "```cs\ndotnet add reference ../../../Fundamentals/Fundamentals.csproj\ndotnet add reference ../Domain/Domain.csproj\n```", "```cs\nusing Fundamentals;\nvar types = new Types();\nvar typeNames = string.Join(\"\\n\", types.All.Select(_ =>\n  _.Name));\nConsole.WriteLine(typeNames);\n```", "```cs\nProgram\n<>c\nEmbeddedAttribute\nNullableAttribute\nNullableContextAttribute\nEmbeddedAttribute\nNullableAttribute\nNullableContextAttribute\nTypes\n```", "```cs\nnamespace Domain.Employees;\npublic class RegisterEmployee\n{\n    public string FirstName { get; set; } = string.Empty;\n    public string LastName { get; set; } = string.Empty;\n    public string SocialSecurityNumber { get; set; } =\n      string.Empty;\n}\n```", "```cs\nProgram\n<>c\nEmbeddedAttribute\nNullableAttribute\nNullableContextAttribute\nRegisterEmployee   <-- New\nEmbeddedAttribute\nNullableAttribute\nNullableContextAttribute\nTypes\n```", "```cs\npublic interface IContractToImplementorsMap\n{\n    IDictionary<Type, IEnumerable<Type>>\n      ContractsAndImplementors { get; }\n    IEnumerable<Type> All { get; }\n    void Feed(IEnumerable<Type> types);\n    IEnumerable<Type> GetImplementorsFor<T>();\n    IEnumerable<Type> GetImplementorsFor(Type contract);\n}\n```", "```cs\npublic Type FindSingle<T>();\npublic IEnumerable<Type> FindMultiple<T>();\npublic Type FindSingle(Type type);\npublic IEnumerable<Type> FindMultiple(Type type);\npublic Type FindTypeByFullName(string fullName);\n```", "```cs\nnamespace Domain.Employees;\npublic class SetSalaryLevelForEmployee\n{\n    public string SocialSecurityNumber { get; set; } =\n      string.Empty;\n    public decimal SalaryLevel { get; set; }\n}\n```", "```cs\nnamespace Fundamentals;\npublic interface ICommand\n{\n}\n```", "```cs\ndotnet add reference ../../../Fundamentals/\n  Fundamentals.csproj\n```", "```cs\nusing Fundamentals;\n```", "```cs\nusing Fundamentals;\nvar types = new Types();\nvar commands = types.FindMultiple<ICommand>();\nvar typeNames = string.Join(\"\\n\", commands.Select(_ => _.Name));\nConsole.WriteLine(typeNames);\n```", "```cs\nSetSalaryLevelForEmployee\nRegisterEmployee\n```", "```cs\nnamespace Fundamentals;\npublic record ConceptAs<T>\n{\n    public ConceptAs(T value)\n    {\n        ArgumentNullException.ThrowIfNull(value,\n          nameof(value));\n        Value = value;\n    }\n    public T Value { get; init; }\n    public static implicit operator T(ConceptAs<T> value)\n      => value.Value;\n}\n```", "```cs\npublic record FirstName(string Value) :\n  ConceptAs<string>(Value);\npublic record LastName(string Value) :\n  ConceptAs<string>(Value);\npublic record SocialSecurityName(string Value) :\n  ConceptAs<string>(Value);\n```", "```cs\nnamespace Domain.Employees;\npublic class RegisterEmployee\n{\n    public FirstName FirstName { get; set; } =\n      new(string.Empty)\n    public LastName LastName { get; set; } = new(string.Empty);\n    public SocialSecurityNumber SocialSecurityNumber { get;\n      set; } = new(string.Empty);\n}\n```", "```cs\nnamespace Fundamentals;\npublic record PIIConceptAs<T>(T Value) : ConceptAs<T>\n  (Value)\n{\n}\n```", "```cs\npublic record SocialSecurityName(string Value) :\nPIIConceptAs<string>(Value);\n```", "```cs\nConsole.WriteLine(\"GDPR Report\");\nvar typesWithConcepts = types.All\n                            .SelectMany(_ =>\n                                _.GetProperties()\n                                  .Where(p =>\n                                    p.PropertyType\n                                       .IsPIIConcept()))\n                            .GroupBy(_ => _.DeclaringType);\nforeach (var typeWithConcepts in typesWithConcepts)\n{\n    Console.WriteLine($\"Type: {typeWithConcepts\n      .Key!.FullName}\");\n    foreach (var property in typeWithConcepts)\n    {\n        Console.WriteLine($\"  Property : {property.Name}\");\n    }\n}\n```", "```cs\nGDPR Report\nType: Domain.Employees.RegisterEmployee\n  Property : FirstName\n  Property : LastName\n  Property : SocialSecurityNumber\n```"]