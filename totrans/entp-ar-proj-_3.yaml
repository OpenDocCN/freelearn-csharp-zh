- en: AR for Manufacturing with ARCore
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ARCore进行AR制造
- en: In this chapter, we will create our first AR project using Google's ARCore tool. The
    main goal of this chapter is to introduce you to one of the latest and fastest-growing
    AR tools, ARCore. By the end of this chapter, you will have gained the necessary
    skills to create your own ARCore projects easily in Android Studio. At the same
    time, we present one of the uses of AR in manufacturing, that is, prototyping.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Google的ARCore工具创建我们的第一个AR项目。本章的主要目标是向您介绍最新且增长最快的AR工具之一，ARCore。到本章结束时，您将掌握在Android
    Studio中轻松创建自己的ARCore项目的必要技能。同时，我们展示了AR在制造中的一个应用，即原型设计。
- en: By the end of this chapter, you will have created a prototype viewer app where
    users will place 3D designs of industrial pieces, machines, and so on over flat
    surfaces, navigate around and through them, and manipulate them (move, rotate,
    and scale) with their fingers. With this knowledge, you will also be able to improve
    the current project and adapt it to your needs in this field.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将创建一个原型查看器应用程序，用户可以在平面上放置工业部件、机器等3D设计，在它们周围和内部导航，并使用手指进行操作（移动、旋转和缩放）。有了这些知识，您还将能够改进当前项目，并适应该领域的需求。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Using AR for manufacturing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用AR进行制造
- en: Exploring ARCore
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索ARCore
- en: Creating a prototype AR viewer
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建原型AR查看器
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: Android Studio (3.5.2 version for Windows in this book).
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Android Studio（本书中为Windows的3.5.2版本）。
- en: Java Development Kit (1.8.0 in this book).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java开发工具包（本书中为1.8.0版本）。
- en: Sceneform plugin (installed from inside Android Studio. 1.13.0 in this book).
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sceneform插件（从Android Studio内部安装。本书中为1.13.0版本）。
- en: 'An ARCore supporting mobile device (see the list here: [https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)).
    The project has been tested on a Samsung Galaxy A5 (2017) and a Pocophone F1.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持ARCore的移动设备（请参阅此处列表：[https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)）。该项目已在三星Galaxy
    A5（2017）和Pocophone F1上进行了测试。
- en: 'To install the Android Studio, the system requirements for Windows are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Android Studio，Windows的系统要求如下：
- en: 4 GB RAM minimum, 8 GB RAM recommended
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小RAM 4 GB，建议8 GB
- en: 2 GB of available disk space minimum, 4 GB recommended
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小可用磁盘空间2 GB，建议4 GB
- en: 1280x800 minimum screen resolution
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小屏幕分辨率1280x800
- en: For more details on other operating systems, you can find the official requirements
    at the end of this page: [https://developer.android.com/studio](https://developer.android.com/studio).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于其他操作系统的更多详细信息，您可以在本页末尾找到官方要求：[https://developer.android.com/studio](https://developer.android.com/studio)。
- en: 'The code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter03](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter03).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在此处找到：[https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter03](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter03)。
- en: Using AR for manufacturing
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用AR进行制造
- en: Industry 4.0, also known as the 4th industrial revolution, makes reference to
    the inclusion of digitalization and interconnectivity tools inside factories,
    covering production processes to maintenance and training. Although the term has
    been around for some years now, in the last couple of years, this industry 4.0
    concept has taken on a new dimension thanks to the exponential growth (in quality
    and quantity) of technologies such as **Augmented Reality** (**AR**) and **Virtual
    Reality** (**VR**), **Internet of Things** (**IoT**), **Big Data Analytics** (**BDA**),
    **Additive Manufacturing** (**AM**), **Cyber-Physical Systems** (**CPS**), and
    **Artificial Intelligence** (**AI**).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 工业4.0，也称为第四次工业革命，指的是在工厂内包含数字化和互联工具，涵盖生产过程到维护和培训。尽管这个术语已经存在多年，但在过去几年里，由于**增强现实**（**AR**）、**虚拟现实**（**VR**）、**物联网**（**IoT**）、**大数据分析**（**BDA**）、**增材制造**（**AM**）、**网络物理系统**（**CPS**）和**人工智能**（**AI**）等技术的指数级增长（在质量和数量上），这个工业4.0概念已经获得了新的维度。
- en: The visual component of AR makes it the natural interface for users who can
    receive real-time information about processes, access remote systems for extra
    data, and control processes and machines, all with a mobile device or smart glasses.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: AR的视觉组件使其成为用户自然的接口，用户可以通过移动设备或智能眼镜接收有关流程的实时信息，访问远程系统以获取额外数据，并控制流程和机器。
- en: AR in manufacturing has many uses in areas such as prototyping, production,
    and training. In this chapter, we will cover prototyping and, more specifically,
    where AR can help reduce costs in prototyping by visualizing a design in the real
    world. This allows designers, workers, and potential customers to manipulate a
    model in its three dimensions, scale it, interact with individual parts, and even
    walk through them together. ARCore is one of the examples of an AR tool that we
    can use for that.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在制造业中，AR有许多用途，例如原型设计、生产和培训。在本章中，我们将介绍原型设计，特别是AR如何通过在真实世界中可视化设计来帮助减少原型设计成本。这允许设计师、工人和潜在客户在三维空间中操纵模型，对其进行缩放，与单个部件交互，甚至一起穿越它们。ARCore是我们可以用作该目的的AR工具之一。
- en: Exploring ARCore
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索ARCore
- en: 'In preview since 2017, the first version of ARCore was launched in February
    2018 and was Google''s platform for creating augmented reality applications for
    Android and iOS. It makes use of different capabilities, such as motion tracking,
    to estimate the position and orientation of the mobile device regarding the real
    world along with environmental location, to find and track horizontal surfaces
    such as the ground, tablets, or walls, and light estimation, to place 3D elements
    realistically into the real world. A more detailed explanation of these features
    can be found at [https://developers.google.com/ar/discover/concepts](https://developers.google.com/ar/discover/concepts).
    Targeted at Android 7.0 and above, not all devices in the market support this
    technology, although the number has increased greatly since the first SDK version.
    You can consult the currently supported device list here: [https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 自2017年开始预览，ARCore的第一个版本于2018年2月发布，它是谷歌为Android和iOS创建增强现实应用程序的平台。它利用不同的功能，如运动跟踪，来估计移动设备相对于真实世界的位置和方向，以及环境定位，以找到和跟踪水平表面，如地面、平板电脑或墙壁，以及光估计，以将3D元素真实地放置到真实世界中。这些功能的更详细解释可以在[https://developers.google.com/ar/discover/concepts](https://developers.google.com/ar/discover/concepts)找到。针对Android
    7.0及以上版本，市场上并非所有设备都支持这项技术，尽管自第一个SDK版本以来，支持的数量已经大幅增加。您可以通过此处查看当前支持的设备列表：[https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)。
- en: ARCore apps can be developed on different platforms such as Android Studio,
    Xcode for iOS, Unity3D, and Unreal Engine. When using Android Studio, developers
    can integrate Sceneform, a 3D engine that helps integrate 3D environments and
    models in an easier way than the OpenGL library. We will be using this plugin
    in our project to display 3D models.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ARCore应用程序可以在不同的平台上开发，例如Android Studio、iOS的Xcode、Unity3D和Unreal Engine。当使用Android
    Studio时，开发者可以将Sceneform集成，这是一个3D引擎，它可以帮助以比OpenGL库更简单的方式集成3D环境和模型。我们将在项目中使用这个插件来显示3D模型。
- en: 'When developing an app using ARCore, make sure you disclose it in your app:
    [https://developers.google.com/ar/distribute/privacy-requirements](https://developers.google.com/ar/distribute/privacy-requirements).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ARCore开发应用程序时，请确保在您的应用程序中披露：[https://developers.google.com/ar/distribute/privacy-requirements](https://developers.google.com/ar/distribute/privacy-requirements)。
- en: For this project, we will develop a prototype viewing app that will show three
    different engine models. The engine models that we will be using for this project
    have been taken from[https://sketchfab.com/3d-models/rocket-engines-6fba4dbbb9444e99ba68425bcb3a7f70](https://sketchfab.com/3d-models/rocket-engines-6fba4dbbb9444e99ba68425bcb3a7f70).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将开发一个原型查看应用程序，该应用程序将展示三种不同的引擎模型。我们将在项目中使用的引擎模型是从[https://sketchfab.com/3d-models/rocket-engines-6fba4dbbb9444e99ba68425bcb3a7f70](https://sketchfab.com/3d-models/rocket-engines-6fba4dbbb9444e99ba68425bcb3a7f70)获取的。
- en: Now that we have seen the basics of ARCore, let's start developing the app.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了ARCore的基础知识，让我们开始开发应用程序。
- en: Creating a prototype AR viewer
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建原型AR查看器
- en: In this section, we are going to develop our AR viewer for prototyping. First,
    we are going to install all the required software tools—JDK and Android Studio—and
    then we'll create our Android application, learn how to enable and use ARCore
    in it, and how to use the Sceneform plugin to display the 3D elements.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开发我们的 AR 查看器以进行原型设计。首先，我们将安装所有必需的软件工具——JDK 和 Android Studio——然后我们将创建我们的
    Android 应用程序，学习如何在其中启用和使用 ARCore，以及如何使用 Sceneform 插件来显示 3D 元素。
- en: Installing the Java Development Kit (JDK)
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Java 开发工具包 (JDK)
- en: 'Android Studio requires that we install JDK. It''s usually located in `C:\Program
    Files\Java\jdk_version`. If you don''t have it installed, follow these steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 需要我们安装 JDK。它通常位于 `C:\Program Files\Java\jdk_version`。如果您还没有安装，请按照以下步骤操作：
- en: Go to [www.oracle.com](http://www.oracle.com) and download the latest Java SE
    Development Kit.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [www.oracle.com](http://www.oracle.com) 并下载最新的 Java SE 开发工具包。
- en: Once downloaded, run the installation file and let it install the JDK and JRE
    in their default folders.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，运行安装文件，并让它在其默认文件夹中安装 JDK 和 JRE。
- en: If, during Android Studio's installation, it complains about not finding the
    JDK, you can solve this problem by going to Start menu|Computer|System Properties|Advanced
    System Properties, opening the Advanced|Environment Variables tab, and creating
    a `JAVA_HOME` system variable pointing to the JDK folder.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 Android Studio 安装过程中它抱怨找不到 JDK，您可以通过转到开始菜单|计算机|系统属性|高级系统属性，打开高级|环境变量选项卡，并创建一个指向
    JDK 文件的 `JAVA_HOME` 系统变量来解决此问题。
- en: Installing Android Studio
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Android Studio
- en: 'Once the JDK is installed, we are going to do the same with Android Studio
    since it will be our main platform for developing our AR app:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 JDK 安装完成，我们也将对 Android Studio 进行相同的操作，因为它是我们开发 AR 应用的主要平台：
- en: 'Download Android Studio from Android''s developer page: [https://developer.android.com/studio](https://developer.android.com/studio).'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Android 开发者页面下载 Android Studio：[https://developer.android.com/studio](https://developer.android.com/studio)。
- en: 'Install the studio with the default values and when you''re finished, run it:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认值安装工作室，完成后运行它：
- en: '![](img/dccd2716-4de1-42c2-a482-5fc641eb5408.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/dccd2716-4de1-42c2-a482-5fc641eb5408.png)'
- en: Launching Android Studio when the installation finishes
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后启动 Android Studio
- en: 'The first time you open it after installation, the Android Studio setup wizard
    will launch to help you configure the last steps of the studio and download the
    Android SDK components:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后首次打开它时，Android Studio 设置向导将启动，以帮助您配置工作室的最后几步并下载 Android SDK 组件：
- en: '![](img/a9aeb208-996e-44bd-999b-8c1e8a1abaf0.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a9aeb208-996e-44bd-999b-8c1e8a1abaf0.png)'
- en: The setup wizard will appear the first time Android Studio is installed
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Android Studio 首次运行时会出现设置向导
- en: 'Once finished, the Welcome window will be launched:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成，欢迎窗口将会启动：
- en: '![](img/e3b800d1-fcdb-4c3e-a672-d6d70ad8843e.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e3b800d1-fcdb-4c3e-a672-d6d70ad8843e.png)'
- en: Android Studio Welcome window
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Android Studio 欢迎窗口
- en: Now that we have the software ready, we can start developing our app.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好了软件，我们可以开始开发我们的应用程序。
- en: Creating the application
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序
- en: 'Now that we have the software installed, we are going to start creating our
    AR app. The first thing we have to do is launch a new Android Studio project and
    add the required libraries to it. Follow these steps to do so:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了软件，我们将开始创建我们的 AR 应用。我们首先要做的是启动一个新的 Android Studio 项目，并向其中添加所需的库。按照以下步骤操作：
- en: Click on Start a new Android Studio project.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“开始一个新的 Android Studio 项目”。
- en: 'Choose to create an Empty Activity:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择创建一个空活动：
- en: '![](img/7388c166-3608-46fc-8db5-514f5c76921e.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7388c166-3608-46fc-8db5-514f5c76921e.png)'
- en: Choosing an activity type
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 选择活动类型
- en: 'Give the project a Name, Package name, and Location. Set the Minimum API level to
    at least API 24: Android 7.0 (Nougat) since it''s the first that supports ARCore.
    Click on the Finish button to start the project:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目命名、包名和位置。将最小 API 级别设置为至少 API 24：Android 7.0 (Nougat)，因为它是第一个支持 ARCore 的版本。点击完成按钮以启动项目：
- en: '![](img/b0db9ea2-4afd-4e9e-a30f-5e44b9530eae.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b0db9ea2-4afd-4e9e-a30f-5e44b9530eae.png)'
- en: Configuration parameters for the new project
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 新项目的配置参数
- en: The next thing we need to do is enable ARCore in our project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步我们需要做的是在我们的项目中启用 ARCore。
- en: Enabling ARCore
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启用 ARCore
- en: 'In an AR project, ARCore can be set as optional or required. The former can
    work as a regular app on devices that don''t support ARCore, while the latter
    will only appear in the Google Play Store to devices that support ARCore. Our
    app is a full AR application, so we will select the second option. To achieve
    this we have to modify some of the project files. Let''s get started:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在 AR 项目中，ARCore 可以设置为可选或必需。前者可以在不支持 ARCore 的设备上作为普通应用运行，而后者将只出现在支持 ARCore 的设备的
    Google Play 商店中。我们的应用是一个完整的 AR 应用，因此我们将选择第二个选项。为了实现这一点，我们需要修改一些项目文件。让我们开始吧：
- en: 'In the project window, unfold `app` and inside the `manifests` folder, open
    the `AndroidManifest.xml` file, as shown in the following screenshot. If you want
    to open the manifest externally you can find the file in `app/src/main` folder:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目窗口中，展开 `app`，然后在 `manifests` 文件夹内部打开 `AndroidManifest.xml` 文件，如下面的截图所示。如果你想在外部打开清单文件，你可以在
    `app/src/main` 文件夹中找到该文件：
- en: '![](img/b89406c3-d05e-495e-985b-c7b44a6cdcd8.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b89406c3-d05e-495e-985b-c7b44a6cdcd8.png)'
- en: AndroidManifest.xml in the project
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中的 AndroidManifest.xml
- en: 'Add the following lines before the `<application>` tag:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<application>` 标签之前添加以下行：
- en: '[PRE0]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line is necessary in both cases (ARCore is optional and required)
    since it's the one giving permission to open the camera. The second line indicates
    the use of ARCore and is the one ensuring that only devices that support ARCore
    will have access to the app.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下（ARCore 可选和必需）第一行都是必要的，因为它提供了打开摄像头的权限。第二行指示了 ARCore 的使用，并确保只有支持 ARCore
    的设备才能访问应用。
- en: 'Now, add the following line inside `<application>`:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 `<application>` 内部添加以下行：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This line sets ARCore as required and will make the Google Play Store download
    and install ARCore (if it's not already installed) when the app is installed.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码将 ARCore 设置为必需，并在应用安装时（如果尚未安装）从 Google Play 商店下载和安装 ARCore。
- en: 'Open your project''s `build.gradle` file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的项目 `build.gradle` 文件：
- en: '![](img/8a447dba-b8ea-48b6-b835-237a067a6f82.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a447dba-b8ea-48b6-b835-237a067a6f82.png)'
- en: The project's build.gradle file in the Project window
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目窗口中，找到项目的 build.gradle 文件
- en: 'Make sure it includes Google''s Maven repository (it should be there; if not,
    add it):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保它包括 Google 的 Maven 仓库（它应该在那里；如果不是，请添加它）：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open your app''s`build.gradle` file:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开你的应用 `build.gradle` 文件：
- en: '![](img/7edbb9cd-aa8a-48af-9952-a804e085db24.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7edbb9cd-aa8a-48af-9952-a804e085db24.png)'
- en: The app's build.gradle file in the Project window
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目窗口中，找到应用的 build.gradle 文件
- en: 'Now, add the latest ARCore library as a dependency (1.13.0, in this book):'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将最新的 ARCore 库作为依赖项添加（本书中为 1.13.0）：
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Synchronize Gradle in order for these changes to be effective by clicking on Sync
    Now, which can be found at the top right of the screen:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击屏幕右上角的“立即同步”来同步 Gradle，以便使这些更改生效：
- en: '![](img/24125073-9e11-45de-91c4-3ed7d109c492.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24125073-9e11-45de-91c4-3ed7d109c492.png)'
- en: Sync Now option to sync the project
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 同步项目选项以同步项目
- en: If you intend to create an app that works both with and without AR, the steps
    to follow to enable ARCore will differ from the ones shown here. Please refer
    to [https://developers.google.com/ar/develop/java/enable-arcore](https://developers.google.com/ar/develop/java/enable-arcore)
    to see what changes you have to make. Also, take into account that you will have
    to check whether the mobile running the app supports ARCore. You can do this by
    looking at your code.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算创建一个既支持又不需要 AR 的应用，启用 ARCore 的步骤将与这里展示的不同。请参阅 [https://developers.google.com/ar/develop/java/enable-arcore](https://developers.google.com/ar/develop/java/enable-arcore)
    了解你需要做出哪些更改。此外，请注意，你将需要检查运行应用的移动设备是否支持 ARCore。你可以通过查看你的代码来完成这项工作。
- en: Now that we have ARCore enabled, let's introduce Sceneform.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启用了 ARCore，让我们介绍 Sceneform。
- en: Adding Sceneform to the project
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Sceneform 添加到项目
- en: As we mentioned at the beginning of this chapter, Sceneform is an Android Studio
    plugin that will help us display 3D models in an easier and faster way than OpenGL.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述，Sceneform 是一个 Android Studio 插件，它将帮助我们以比 OpenGL 更简单、更快捷的方式显示 3D 模型。
- en: Sceneform also provides ARFragment and other UX resources that will automatically
    handle the AR session after asking for the camera permission and checking if ARCore
    is installed and updated, without us having to include these verifications in
    our code.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Sceneform 还提供了 ARFragment 和其他 UX 资源，这些资源在请求摄像头权限并检查 ARCore 是否已安装和更新后，将自动处理 AR
    会话，而无需我们在代码中包含这些验证。
- en: At the time of writing this book, the Sceneform Tools were still in Beta mode.
    If you encounter any problems when following these steps, please head to their
    GitHub page ([https://github.com/google-ar/sceneform-android-sdk](https://github.com/google-ar/sceneform-android-sdk))
    for more information.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写这本书的时候，Sceneform 工具仍然处于测试版阶段。如果您在按照这些步骤操作时遇到任何问题，请访问他们的 GitHub 页面（[https://github.com/google-ar/sceneform-android-sdk](https://github.com/google-ar/sceneform-android-sdk)）获取更多信息。
- en: 'To import Sceneform into your project, follow these steps:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 Sceneform 导入到您的项目中，请按照以下步骤操作：
- en: Open File|Settings.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件|设置。
- en: 'In the Plugins tab, search for `Google Sceneform Tools (Beta)`. At the time
    of writing this book, the current version is v1.13.0:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在插件选项卡中，搜索 `Google Sceneform Tools (Beta)`。在撰写这本书的时候，当前版本是 v1.13.0：
- en: '![](img/3abcc81e-c5ce-4d32-b22c-a0d1f10a5573.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3abcc81e-c5ce-4d32-b22c-a0d1f10a5573.png)'
- en: Google Sceneform Tools plugin
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Google Sceneform Tools 插件
- en: 'Install it and press Restart IDE on the top right to activate the changes:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装它，然后点击右上角的“重启 IDE”以激活更改：
- en: '![](img/97935c7d-81a0-4f0b-b0c8-b2da612c421b.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/97935c7d-81a0-4f0b-b0c8-b2da612c421b.png)'
- en: Restart IDE button
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 重启 IDE 按钮
- en: 'Once installed, open your app''s `build.gradle` file and add the following
    compile options *inside *the `android` section. If we don''t, when building our
    `ModelRenderable`, errors will appear. This is only necessary if `minSdkVersion
    < 26` and we set the minimum to `24` (Android 7.0) when creating the project:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，打开您的应用程序的 `build.gradle` 文件，并在 `android` 部分内添加以下编译选项。如果我们不这样做，当构建我们的 `ModelRenderable`
    时，将出现错误。这仅在 `minSdkVersion < 26` 且我们在创建项目时将最小值设置为 `24`（Android 7.0）时才是必要的：
- en: '[PRE4]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the same file, inside the `dependencies` brackets, we are going to add the
    following `implementation` line to include Sceneform in our project:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，在 `dependencies` 括号内，我们将添加以下 `implementation` 行以将 Sceneform 包含到我们的项目中：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Your app''s `build.gradle` file should now look similar to this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序的 `build.gradle` 文件现在应该看起来像这样：
- en: '![](img/fcc17b1f-d0f4-4132-ac62-174b5937f5b4.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fcc17b1f-d0f4-4132-ac62-174b5937f5b4.png)'
- en: The app's build.gradle file with the new lines added to it
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了新行的应用程序的 `build.gradle` 文件
- en: 'Now, to use ARFragment in your app, open the `activity_main.xml` file in the `res/layout`
    folder and select Text mode at the bottom tabs of the view. By doing this, you
    can modify the elements in the text:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，为了在您的应用程序中使用 ARFragment，请打开 `res/layout` 文件夹中的 `activity_main.xml` 文件，并在视图底部的选项卡中选择文本模式。通过这样做，您可以修改文本中的元素：
- en: '![](img/74f58d58-f2a9-4e2d-bfd3-93701e610be5.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/74f58d58-f2a9-4e2d-bfd3-93701e610be5.png)'
- en: The activity_main.xml file's text view and visual preview
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`activity_main.xml` 文件中的文本视图和视觉预览'
- en: 'Remove the `TextView` block and add the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `TextView` 块并添加以下内容：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Sceneform is now ready to be used. Let's import our 3D model into the project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Sceneform 现在已准备好使用。让我们将我们的 3D 模型导入到项目中。
- en: Adding 3D models to the project
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 3D 模型添加到项目中
- en: '3D models, also called renderables, can be added in different ways:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 3D 模型，也称为可渲染对象，可以通过不同的方式添加：
- en: Created from basic shapes (sphere, cube, and so on) and materials and combined
    programmatically to generate more complex objects.
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过基本形状（球体、立方体等）和材料创建，并通过编程组合以生成更复杂的对象。
- en: Created from standard Android widgets via ViewRenderable. They are rendered
    as interactive flat cards in the scene.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过标准 Android 小部件（ViewRenderable）创建。它们在场景中以交互式平面卡片的形式渲染。
- en: Imported from other programs as 3D assets. The supported formats include OBJ,
    FBX, and glTF (and glb). Animations are only supported in FBX.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其他程序作为 3D 资产导入。支持的格式包括 OBJ、FBX 和 glTF（以及 glb）。动画仅在 FBX 中受支持。
- en: We are going to use the first option and import a `.obj` file using Sceneform.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第一个选项，并使用 Sceneform 导入一个 `.obj` 文件。
- en: 'To import a model into our project, we have to create an external folder to
    contain the model (this folder won''t be compiled into the final app) and then
    import the model into the project using Sceneform. Follow these steps to do so:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要将模型导入到我们的项目中，我们必须创建一个外部文件夹来包含模型（这个文件夹不会被编译到最终应用程序中），然后使用 Sceneform 将模型导入到项目中。按照以下步骤操作：
- en: Create a `sampledata` folder in your project by right-clicking on the `app`
    folder of your project and selecting New|Sample Data Directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在项目的 `app` 文件夹上右键单击并选择 New|Sample Data Directory 创建一个 `sampledata` 文件夹。
- en: '![](img/2d173a00-28b2-4826-aca6-6763150e94b2.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2d173a00-28b2-4826-aca6-6763150e94b2.png)'
- en: Adding a Sample Data Directory to the project
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 将样本数据目录添加到项目中
- en: If the `sampledata` folder doesn't appear automatically on your project, you
    can also create it manually from the file explorer, inside the `app` folder of
    your project. Call it `sampledata` and it will appear in Android Studio.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`sampledata`文件夹没有自动出现在您的项目中，您也可以从文件资源管理器中手动创建它，在项目的`app`文件夹内。命名为`sampledata`，它将在Android
    Studio中显示。
- en: 'From the resources pack provided for this project, copy the `engine` folder
    into the `sampledata` folder:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从为该项目提供的资源包中，将`engine`文件夹复制到`sampledata`文件夹中：
- en: '![](img/2c973174-7c2b-4bab-97b1-8162f71ff8f0.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c973174-7c2b-4bab-97b1-8162f71ff8f0.png)'
- en: The newly added engine folder containing the model and its resources
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 包含模型及其资源的新的引擎文件夹
- en: Now, we will import the `.obj` file through Sceneform to include the 3D model
    as an asset.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过Sceneform导入.obj文件，将3D模型作为资产包含进来。
- en: 'Right-click the `engine.obj` file and select Import Sceneform Asset:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`engine.obj`文件并选择导入Sceneform资产：
- en: '![](img/d6d187b6-0635-4ecd-8508-b68e111d9264.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d6d187b6-0635-4ecd-8508-b68e111d9264.png)'
- en: Selecting Import Sceneform Asset for our .obj file
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为我们的.obj文件选择导入Sceneform资产
- en: 'Leave the default values as they are. This will create a Sceneform asset (`.sfa`)
    file inside `sampledata` and a Sceneform binary asset (`.sfb`) inside the `assets`
    folder:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持默认值不变。这将创建一个位于`sampledata`中的Sceneform资产（`.sfa`）文件和一个位于`assets`文件夹中的Sceneform二进制资产（`.sfb`）：
- en: '![](img/fae1677b-446e-4c9c-8a96-3f81e7973398.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fae1677b-446e-4c9c-8a96-3f81e7973398.png)'
- en: Default import values for the model
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 模型的默认导入值
- en: 'During the importing process, the following lines will automatically be added
    to the end of your app''s `build.gradle` by Sceneform:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入过程中，以下行将自动添加到您的应用`build.gradle`文件的末尾，由Sceneform完成：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Leave Gradle syncing. When it finishes, two windows will open: a text file
    with the model''s description and its 3D preview:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持Gradle同步。当它完成后，将打开两个窗口：一个包含模型描述和3D预览的文本文件：
- en: '![](img/1205c2d5-e07d-43a0-8da5-bb01ca037249.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1205c2d5-e07d-43a0-8da5-bb01ca037249.png)'
- en: Our newly imported model's text view and preview
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们新导入的模型的文本视图和预览
- en: The final step will be to merge all the elements into the AR scene.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将所有元素合并到AR场景中。
- en: Forming the AR scene
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建AR场景
- en: 'Now that we have ARCore and Sceneform enabled and our 3D model included in
    the project, let''s add the code that will make the model appear on the screen
    when a flat surface is detected and the user taps on the screen. Let''s get started:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启用了ARCore和Sceneform，并将3D模型包含在项目中，让我们添加代码，当检测到平面表面并且用户点击屏幕时，模型将出现在屏幕上。让我们开始吧：
- en: 'Open your `MainActivity.java` file from `app/java/com.banana.arprototype` and
    add the following imports:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`app/java/com.banana.arprototype`打开您的`MainActivity.java`文件并添加以下导入：
- en: '[PRE8]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Inside our class, create the following variables to control the AR scene and
    the 3D model:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的类中，创建以下变量以控制AR场景和3D模型：
- en: '[PRE9]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, inside the `OnCreate()` method, add the `ARFragment` initialization:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`OnCreate()`方法中，添加`ARFragment`的初始化：
- en: '[PRE10]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Still inside the `OnCreate()` method, build the model in the scene using `ModelRenderable`,
    as shown in the following code:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`OnCreate()`方法中，使用`ModelRenderable`在场景中构建模型，如下代码所示：
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Here, we call the model from the `assets` folder using `Uri.parse`. It will
    launch an error message if it's unable to load it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`Uri.parse`从`assets`文件夹中调用模型。如果无法加载它，将会显示错误信息。
- en: 'Finally, still in the `OnCreate()` method, we will place the model when the
    user taps the screen after a planar surface has been detected:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，仍然在`OnCreate()`方法中，当检测到平面表面后用户点击屏幕时，我们将放置模型：
- en: '[PRE12]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, when the user taps on a plane and the model renderable has been successfully
    loaded, an anchor is created to keep the model in place. Then, a new node for
    the model is created and attached to it.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，当用户点击一个平面并且模型可渲染已成功加载时，将创建一个锚点以保持模型的位置。然后，创建一个新的模型节点并将其附加到它上。
- en: 'Now, you can run the app either in an Android emulator or on an actual device.
    To run it in an emulator, the device must meet some requirements, and you will
    have to download ARCore from the Play Store manually on it (take a look at the
    *Prepare your device or emulator* section at [https://developers.google.com/ar/develop/java/quickstart](https://developers.google.com/ar/develop/java/quickstart)).
    Here, we will directly run the app in our device by clicking on the play icon
    and then selecting our connected device:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以在Android模拟器或实际设备上运行该应用。要在模拟器中运行它，设备必须满足一些要求，并且您必须手动从Play Store在该设备上下载ARCore（请参阅[https://developers.google.com/ar/develop/java/quickstart](https://developers.google.com/ar/develop/java/quickstart)中的“准备您的设备或模拟器”部分）。在这里，我们将通过点击播放图标并选择我们的连接设备来直接在我们的设备上运行该应用：
- en: '![](img/682f9f26-75a7-4c5e-a687-fb679e564bf6.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/682f9f26-75a7-4c5e-a687-fb679e564bf6.png)'
- en: Running the app in a physical device
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在物理设备上运行应用
- en: 'With this, the app will be installed on the mobile device. As we mentioned
    previously, the first time the app is run, it will check whether the latest ARCore
    version has been installed:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，应用就会安装在移动设备上。正如我们之前提到的，第一次运行应用时，它会检查是否已安装最新的ARCore版本：
- en: '![](img/e62dc7fa-a0e8-462d-89d2-a42e8e146783.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e62dc7fa-a0e8-462d-89d2-a42e8e146783.png)'
- en: ARCore checking for the latest version of ARCore
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ARCore正在检查ARCore的最新版本
- en: 'You will have to install it through Google Play:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您必须通过Google Play安装它：
- en: '![](img/b57b02ba-80b0-45be-b266-13a8fc0db1d4.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b57b02ba-80b0-45be-b266-13a8fc0db1d4.png)'
- en: Installing the ARCore app
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 安装ARCore应用
- en: 'Once this initial step has been completed, you will be able to finish launching
    the app. Move the phone/tablet until a flat surface is detected:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦完成这个初始步骤，您将能够完成应用的启动。移动手机/平板电脑，直到检测到平坦表面：
- en: '![](img/0a2e5991-d2bf-49e6-8763-ad40600294ba.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0a2e5991-d2bf-49e6-8763-ad40600294ba.png)'
- en: The white dots form the plane surface where we can place the 3D objects
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 白色圆点形成我们可以放置3D对象的平面表面
- en: 'Tap on the screen to anchor your model:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在屏幕上轻触以锚定您的模型：
- en: '![](img/58d69432-1376-41f7-b26a-8b9ee96c9116.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58d69432-1376-41f7-b26a-8b9ee96c9116.png)'
- en: The engine will appear standing in front of the camera
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎将出现在相机前方
- en: 'You can also resize, rotate, and move the model with your fingers while moving
    around it to see it from different angles. If you tap again, a new engine will
    appear:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以在移动模型的同时用手指调整模型的大小、旋转和移动，以便从不同的角度观察它。如果您再次点击，将出现一个新的引擎：
- en: '![](img/b51e550a-f4c0-4bdf-bb3f-20f96c1c3f0e.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b51e550a-f4c0-4bdf-bb3f-20f96c1c3f0e.png)'
- en: Tapping multiple times causes multiple instances
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 多次点击会导致多个实例
- en: Play around with the app and get comfortable with using it. You will see that,
    depending on the capacity of the device, the recognition of a flat surface will
    be faster/slower. You will also see that if you rotate the device (portrait/landscape),
    the model will disappear because the anchor is lost. Therefore, now that we have
    the basic setup, we are going to make some changes to improve the overall performance
    and give the user the option to add more models to the current scene.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用中玩耍并熟悉使用它。您会看到，根据设备的容量，平面表面的识别速度会更快或更慢。您还会看到，如果您旋转设备（纵向/横向），模型将消失，因为锚点丢失。因此，现在我们已经有了基本设置，我们将对应用进行一些更改以改进整体性能，并给用户添加更多模型到当前场景的选项。
- en: Improving the basic app
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 改进基本应用
- en: 'Once we have the basic app ready, there are some things we can do to improve
    the overall working of the app:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们准备好了基本应用，我们可以做一些事情来改进应用的整体工作：
- en: Make the screen orientation fixed. If we leave it in auto-rotation mode, rotating
    the screen will cause the phone to lose the anchor and the model will disappear
    from the screen.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将屏幕方向设置为固定。如果我们将其留在自动旋转模式下，旋转屏幕将导致手机丢失锚点，模型将从屏幕上消失。
- en: So far, we have seen that, for each screen tap, a new model appears. Since we
    are using the app for prototyping, the idea is that only one model is shown.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到，对于每一次屏幕点击，都会出现一个新的模型。由于我们使用该应用进行原型设计，我们的想法是只显示一个模型。
- en: We will also change the rotation and size of the model so that it's displayed
    better in the scene.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还将更改模型的旋转和大小，以便它在场景中显示得更好。
- en: 'Let''s change the code to add these features. For that, follow these steps:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改代码以添加这些功能。为此，请按照以下步骤操作：
- en: 'Force the screen orientation so that it''s in portrait mode by adding `AndroidManifest.xml` inside
    `<application>` and `<activity>`:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在`AndroidManifest.xml`中的`<application>`和`<activity>`内添加代码来强制屏幕方向为纵向模式：
- en: '[PRE13]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This way, the screen will always be in portrait mode and won't autorotate and
    lose the anchor, even if the user rotates the phone by mistake.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，屏幕将始终保持在纵向模式，不会自动旋转并丢失锚点，即使用户不小心旋转了手机。
- en: 'If you are using a tablet or prefer to see the scene in landscape mode, change
    this to the following:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你使用平板电脑或更喜欢在横幅模式下查看场景，将其更改为以下内容：
- en: '[PRE14]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To display only one model for each tap on the screen, open `MainActivity.java`
    and create the following variables after the `ArFragment` and `ModelRenderable` variables:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在屏幕上每次点击只显示一个模型，打开 `MainActivity.java` 并在 `ArFragment` 和 `ModelRenderable`
    变量之后创建以下变量：
- en: '[PRE15]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, inside `setOnTapArPlaneListener()`, add the following lines after the
    `modelRenderable = null` check and before creating a new anchor, so that the previous
    one is released:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 `setOnTapArPlaneListener()` 内部，在 `modelRenderable = null` 检查之后和创建新锚点之前添加以下行，以便释放上一个锚点：
- en: '[PRE16]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This way, when the users tap on different places of the screen, the model will
    *move* from one place to the next one, instead of appearing duplicated in each
    one.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当用户在屏幕的不同位置点击时，模型将 *移动* 到下一个位置，而不是在每个位置都重复出现。
- en: 'Now, remove the definition part of the `Anchor`, `AnchorNode`, and `TransformableNode` from
    the lines that follow, so that they make reference to the global variables:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，从下面的行中删除 `Anchor`、`AnchorNode` 和 `TransformableNode` 的定义部分，以便它们引用全局变量：
- en: '[PRE17]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, to rotate and scale the model, start by adding the following imports
    to the `MainActivity.java` file:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为了旋转和缩放模型，首先将以下导入添加到 `MainActivity.java` 文件中：
- en: '[PRE18]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Inside the `arFragment.setOnTapArPlaneListener()` method, add the following
    code before `setParent()`:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `arFragment.setOnTapArPlaneListener()` 方法内部，在 `setParent()` 之前添加以下代码：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'With this, the model will appear lying down on one side so that we can see
    the inside of it. This can be seen in the following image:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，模型将出现在一侧，以便我们可以看到其内部。这可以在以下图片中看到：
- en: '![](img/80820c00-bd54-4bbf-9372-534ba7bdd36e.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/80820c00-bd54-4bbf-9372-534ba7bdd36e.png)'
- en: The engine in a rotated state
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转状态的引擎
- en: 'Now that we have improved on the basics, let''s add two more prototypes and
    a simple UI so that we can switch between them. Follow these steps to do so:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经改进了基础知识，让我们添加两个更多原型和一个简单的用户界面，这样我们就可以在它们之间切换。按照以下步骤操作：
- en: From the `resources` folder of this project, copy the `engine2` and `engine3`
    folders into the `sampledata` folder.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本项目的 `resources` 文件夹中，将 `engine2` 和 `engine3` 文件夹复制到 `sampledata` 文件夹中。
- en: 'Right-click on each of the `.obj` files and select Import Sceneform Asset to
    create the `.sfa` and `.sfb` files. Your `sampledata` folder should now look like
    this:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击每个 `.obj` 文件，并选择导入 Sceneform 资产以创建 `.sfa` 和 `.sfb` 文件。现在，你的 `sampledata`
    文件夹应该看起来像这样：
- en: '![](img/ea6e7892-2f95-4e26-a83c-e8b67e00882a.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ea6e7892-2f95-4e26-a83c-e8b67e00882a.png)'
- en: The sampledata folder with the new models
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 包含新模型的 sampledata 文件夹
- en: 'Your `assets` folder should have the three binary files for the models:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你的 `assets` 文件夹应该包含模型的三个二进制文件：
- en: '![](img/8fc0368c-684f-466e-960a-0616fd143a9b.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8fc0368c-684f-466e-960a-0616fd143a9b.png)'
- en: The assets folder with the three binary files
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 包含三个二进制文件的资源文件夹
- en: 'From the `resources` folder of this project, copy the three images corresponding
    to each of the engines into the `res`|`drawable` folder:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从本项目的 `resources` 文件夹中，将每个引擎对应的三个图像复制到 `res`|`drawable` 文件夹中：
- en: '![](img/08d372a7-7f26-4007-98e4-0768928cf26b.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/08d372a7-7f26-4007-98e4-0768928cf26b.png)'
- en: The res|drawable folder containing the new images
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 包含新图像的 res|drawable 文件夹
- en: 'Open the `activity_main.xml` file located in res|layout in Text mode and add
    the following code:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以文本模式打开位于 res|layout 的 `activity_main.xml` 文件，并添加以下代码：
- en: '[PRE20]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, we're using `layout_constraintBottom_toBottomOf` to anchor it to the bottom
    of the screen.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 `layout_constraintBottom_toBottomOf` 将其锚定到屏幕底部。
- en: 'If you are in landscape mode, you will probably want to locate the buttons
    on the right-hand side of the screen so that you have more space to play around.
    Make the following changes to the preceding code to do so:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你处于横幅模式，你可能希望将按钮定位在屏幕的右侧，以便有更多空间进行操作。对前面的代码进行以下更改：
- en: '[PRE21]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, add the three buttons:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加三个按钮：
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The first button has a green background (selected), while the other two have
    a semi-transparent background. Each of them has its corresponding image from `res`|`drawable`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个按钮有绿色背景（选中），而其他两个有半透明背景。每个按钮都有其对应的 `res`|`drawable` 中的图片。
- en: 'Finally, add the closing tag for `LinearLayout`:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加 `LinearLayout` 的关闭标签：
- en: '[PRE23]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The preview should look similar to the following:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 预览应该看起来类似于以下：
- en: '![](img/736db7c1-8415-4c63-90c8-ae8fa9fdc617.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/736db7c1-8415-4c63-90c8-ae8fa9fdc617.png)'
- en: The activity_main.xml file's code on the left and the preview on the right in
    Portrait mode
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 竖屏模式下，左侧是activity_main.xml文件的代码，右侧是预览
- en: 'By default, the Preview is in Portrait mode. To change it to Landscape click
    on the rotating phone icon and select Landscape:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，预览处于竖屏模式。要将其更改为横屏，请点击旋转的手机图标并选择横屏：
- en: '![](img/2f6f608d-a904-4bd1-94c8-ea6a3a7f5953.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f6f608d-a904-4bd1-94c8-ea6a3a7f5953.png)'
- en: The activity_main.xml file's code on the left and the preview on the right in
    Landscape mode
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 竖屏模式下，左侧是activity_main.xml文件的代码，右侧是预览
- en: 'Open the `MainActivity.java` file again and add the following libraries:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次打开`MainActivity.java`文件并添加以下库：
- en: '[PRE24]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add three new `modelRenderables` below the preceding code:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码下方添加三个新的`modelRenderables`：
- en: '[PRE25]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: We will use `currentRenderable` to find out which renderable is active every
    moment.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`currentRenderable`来找出每一刻哪个可渲染对象是活动的。
- en: 'Now, add three new image buttons at the end of the variables:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在变量的末尾添加三个新的图像按钮：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Copy `ModelRenderable.builder()` and paste it *twice* to build the two new models.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ModelRenderable.builder()`复制并粘贴两次以构建两个新的模型。
- en: Change their `Uri.parse` calls to `engine2.sfb` and `engine3.sfb`, respectively.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们的`Uri.parse`调用分别更改为`engine2.sfb`和`engine3.sfb`。
- en: 'In the `.thenAccept` call, change the name of the `renderables` to the corresponding
    ones. The resulting code should look like this:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.thenAccept`调用中，将`renderables`的名称更改为相应的名称。生成的代码应如下所示：
- en: '[PRE27]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the first `ModelRenderable.builder()`, modify the `.thenAccept` call:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个`ModelRenderable.builder()`中，修改`.thenAccept`调用：
- en: '[PRE28]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Here, we're assigning `currentRenderable` to the first `renderable`. This way,
    the initial model that appears on the screen will be the first engine (remember
    that we have the first button highlighted as the selected one).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将`currentRenderable`赋值给第一个`renderable`。这样，屏幕上最初出现的模型将是第一个引擎（记住我们已将第一个按钮突出显示为选中的按钮）。
- en: 'Finally, in the `setOnTapArListener()` method, change `modelRenderable` to `currentRenderable`:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`setOnTapArListener()`方法中，将`modelRenderable`更改为`currentRenderable`：
- en: '[PRE29]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'To add the button''s activities, we are going to make our `MainActivity` implement
    `OnClickListener`:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加按钮的活动，我们将使我们的`MainActivity`实现`OnClickListener`：
- en: '[PRE30]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This way, we can simplify our buttons initialization like so, at the bottom
    of the `onCreate()` method:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这样，我们可以在`onCreate()`方法的底部简化按钮的初始化，如下所示：
- en: '[PRE31]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The first three lines initialize our buttons and the next three make a call
    (the same call in all three cases) when the user clicks on them.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 前三条线初始化我们的按钮，接下来的三条线在用户点击时进行调用（所有三个情况下的调用相同）。
- en: 'To receive these clicks, create the `onClick()` method:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要接收这些点击，创建`onClick()`方法：
- en: '[PRE32]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This method will assign a different `modelRenderable` to the `currentRenderable`
    and highlight its corresponding button, depending on which button has been pressed,
    after the `onCreate()`. The last line swaps the current visible model to the newly
    selected one.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将在`onCreate()`之后根据哪个按钮被按下，将不同的`modelRenderable`分配给`currentRenderable`并突出显示其对应的按钮。最后一行将当前可见的模型切换到新选中的模型。
- en: 'Run the app and try the three different engines. Just select one of the engines
    and place it on the floor or a desk. The following image shows the yellow engine
    on the floor:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行应用并尝试三个不同的引擎。只需选择一个引擎并将其放置在地板或桌子上。以下图片显示了地板上的黄色引擎：
- en: '![](img/fca9bca2-f08a-4ff0-9df2-198ac0192f22.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fca9bca2-f08a-4ff0-9df2-198ac0192f22.png)'
- en: Engine 2 is in view in the scene
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 场景中显示引擎2
- en: 'To change the engine, just press another button and the current model will
    change. You can also find another spot and click on it to make it appear:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改引擎，只需按下另一个按钮，当前模型将更改。您还可以找到另一个位置并点击它以使其出现：
- en: '![](img/71b4f55c-cbd9-49e5-9071-7b3df104781e.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/71b4f55c-cbd9-49e5-9071-7b3df104781e.png)'
- en: Engine 3 appearing on the surface
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎3出现在表面
- en: In this section, you have learned how to create a simple interface to change
    the models that appear in AR. With this, you now have the basic skills to go further
    and build more complex apps so that you can show and manipulate your own prototypes.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您已经学习了如何创建一个简单的界面来更改AR中出现的模型。有了这个，您现在有了进一步发展并构建更复杂应用的基本技能，以便您可以展示和操作自己的原型。
- en: Summary
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have made an introduction to AR using Google's ARCore to
    create a prototype viewer app. We learned how to integrate the capabilities of
    ARCore and the Sceneform library to make the task of generating an AR scene easier
    and we have included our own external 3D models. We also created a basic UI that
    allows us to switch between different models.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了如何使用Google的ARCore创建原型查看器应用程序来使用AR。我们学习了如何集成ARCore和Sceneform库的功能，使生成AR场景的任务变得更容易，并且我们包含了我们自己的外部3D模型。我们还创建了一个基本的用户界面，使我们能够在不同模型之间切换。
- en: Now, you have the skills to create your own application with ARCore. You can
    improve the current project by adding your own prototype, or prototype pieces,
    make the model break down into smaller pieces when the user presses a button,
    or change the color of the model with another button. This chapter has given you
    the basis to explore the possibilities of AR that's displayed on flat surfaces.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经拥有了使用ARCore创建自己应用程序的技能。您可以通过添加自己的原型或原型部件来改进当前项目，例如，当用户按下按钮时使模型分解成更小的部件，或者通过另一个按钮改变模型的颜色。这一章节为您探索在平坦表面上显示的AR可能性奠定了基础。
- en: You also have a better knowledge of how AR can be useful in the manufacturing
    field and you can explore the further possibilities it offers beyond the example
    that's been provided here.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 您还更了解AR在制造领域的应用，并且可以探索它提供的进一步可能性，而不仅仅是这里提供的示例。
- en: In the chapters that follow, we will explore other AR tools and technologies.
    Some of them will be related to ARCore, such as WebAR, while others will be completely
    different, such as Augmented Class!, EasyAR, and Vuforia.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将探索其他AR工具和技术。其中一些将与ARCore相关，如WebAR，而其他则完全不同，如Augmented Class!、EasyAR和Vuforia。
- en: Further reading
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'If you want to go further with the project we completed in this chapter, we
    recommend that you explore the following options:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想进一步探索本章中完成的项目，我们建议您探索以下选项：
- en: 'AR images: Instead of placing objects on surfaces, you can attach them to physical
    images (pictures, planes, and so on). You can find a starting point on how this
    works at [https://developers.google.com/ar/develop/java/augmented-images/](https://developers.google.com/ar/develop/java/augmented-images/).'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AR图像：您不必将物体放置在表面上，而是可以将它们附加到物理图像（图片、平面等）上。您可以在[https://developers.google.com/ar/develop/java/augmented-images/](https://developers.google.com/ar/develop/java/augmented-images/)找到有关如何实现这一功能的起点。
- en: Explore the available samples using Sceneform, you will only have to download
    and open them with Android Studio: [https://developers.google.com/ar/develop/java/sceneform/samples](https://developers.google.com/ar/develop/java/sceneform/samples).
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Sceneform探索可用的示例，您只需下载并使用Android Studio打开它们：[https://developers.google.com/ar/develop/java/sceneform/samples](https://developers.google.com/ar/develop/java/sceneform/samples)。
- en: 'In [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml), *Introduction to
    Unity for AR Development*, we introduced Unity 3D. ARCore can be used inside the
    Unity platform, which also makes the process of adding 3D models easier. It also
    accepts a greater number of extensions. You can find more information about how
    to get started here: [https://developers.google.com/ar/develop/unity/quickstart-android](https://developers.google.com/ar/develop/unity/quickstart-android).'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml)，*Unity AR开发入门*中，我们介绍了Unity
    3D。ARCore可以在Unity平台内部使用，这也使得添加3D模型的过程变得更简单。它还接受更多的扩展。您可以在[https://developers.google.com/ar/develop/unity/quickstart-android](https://developers.google.com/ar/develop/unity/quickstart-android)找到有关如何开始的更多信息。
