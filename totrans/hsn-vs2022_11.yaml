- en: 'Chapter 9: Styling and Cleanup Tools'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you are a frontend developer or a backend developer, having tools that
    help you maintain clean code is essential to move projects forward in an efficient
    manner.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, having tools that allow you to edit CSS files quicker makes a development
    team move faster on a project. Fortunately, Visual Studio has several tools that
    you can use while working with CSS files that will allow you to write and complete
    your styles quickly and in a user-friendly way.
  prefs: []
  type: TYPE_NORMAL
- en: If you are a backend programmer and you use C# or Visual Basic, you should also
    know that there are code analysis tools, both to maintain good quality and to
    follow nomenclature that you can define.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the main topics we will cover in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Working with CSS styling tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cleaning code with code analysis tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To perform the tests explored throughout this chapter, you must have installed
    the workload shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013), *Getting
    Started with Visual Studio 2022*.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition, to follow along with the *Working with images* section, you must
    install an additional component called **Image and 3D model editors**, as shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 – The Image and 3D model editors individual component selection](img/Figure_9.01_B17873.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – The Image and 3D model editors individual component selection
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the pieces of code that have been added to the project in the
    following repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter09](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/tree/main/Chapter09)'
  prefs: []
  type: TYPE_NORMAL
- en: Woking with CSS styling tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Having tools for editing CSS files is an advantage for frontend web developers,
    as it allows them to edit these files in a fast and easy way. That is why Visual
    Studio contains several tools that can be of great help in creating and editing
    these files.
  prefs: []
  type: TYPE_NORMAL
- en: Let's start by examining CSS3 snippets.
  prefs: []
  type: TYPE_NORMAL
- en: CSS3 snippets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Even today, there are still cross-browser compatibility issues for the display
    of styles. Surely it must have happened to you that when implementing a CSS property,
    it looks different on each of the browsers.
  prefs: []
  type: TYPE_NORMAL
- en: It is for this reason that Visual Studio has implemented a CSS3 snippet completion
    system that allows cross-browser compatibility without having to write code for
    each browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this in a practical way, we can open the `SPAProject` | `ClientApp`
    | `src` | `components` | `NavMenu.css` file and locate the `.box-shadow` style.
    Within this style, we can start typing the term `border-radius`, which will display
    the list of IntelliSense recommendations, as shown in *Figure 9.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – Recommendations for the term border-radius'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.02_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.2 – Recommendations for the term border-radius
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see that there are two types of icons in this list, some with a blue
    geometric shape and others with a square white figure. Among these icons, we are
    interested in those of white color, since they are the CSS3 snippets. We can scroll
    through the list with the keys on the keyboard, and once we have selected the
    snippet we are interested in, just press the *tab* key twice, which will result
    in the implementation of the cross-browser-compatible CSS3 snippet, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Among the most common multi-browser CSS3 styles, we can find the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Alignment styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animation styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Border styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Box styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Column styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flex styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grid styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mask styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transition styles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, these snippets can help you in the creation of styles by attacking
    cross-browser compatibility in an effective way. Let's see now how Visual Studio
    can help us understand CSS styles more quickly through indentation.
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchical CSS indentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Style indentation is a visual aid that can increase productivity considerably
    by showing the content of a style through spaces at the beginning of a line, as
    well as the sub-styles belonging to a parent style.
  prefs: []
  type: TYPE_NORMAL
- en: 'Visual Studio allows you to create a quick indentation in the style files.
    Suppose, for example, you want to create a style called `.main` and a sub-style
    that affects all `div` elements within the `.main` style, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In principle, if you have written the styles at the same indentation level,
    you can apply the indentation by going to the **Edit** | **Advanced** | **Format
    Document** menu to perform a hierarchical indentation of the whole document, as
    shown in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: If, on the other hand, you only want to apply the indentation on a specifically
    selected set of styles, you can select the **Edit** | **Advanced** | **Format
    Selection** option.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to customize the indentation values through the **Tools** | **Options**
    | **Text Editor** | **CSS** | **Tabs** option.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's look at the color picker feature in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Color picker
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One feature that is extremely useful when working with styles is the ability
    to select a color for an element. Fortunately, Visual Studio has a built-in color
    picker that, although looking very simple, does its job very well.
  prefs: []
  type: TYPE_NORMAL
- en: 'To test it, let''s edit the `.main` style we created in the *Hierarchical CSS
    indentation* section. Type the `background-color:` attribute, which will show
    you a vertical display of predefined colors with an assigned name that you can
    select. Ignore this list and instead type the `#` symbol. Immediately, you will
    see a new horizontal list of predefined colors, as shown in *Figure 9.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – A horizontal list of predefined colors'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.03_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.3 – A horizontal list of predefined colors
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to set a custom color, you can click on the button at the end of
    the color list, which will display the color picker, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – The CSS color picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.04_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.4 – The CSS color picker
  prefs: []
  type: TYPE_NORMAL
- en: 'This way, it is possible to select a color from the color selection, change
    the color hue, add opacity or transparency to the selected color, and even use
    the eyedropper tool to select the color from an external source, such as an image.
    For this demonstration, I have selected the color with the `#1b0b8599` code, as
    seen in *Figure 9.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.5 – Selecting a custom color from the color picker'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.05_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.5 – Selecting a custom color from the color picker
  prefs: []
  type: TYPE_NORMAL
- en: 'A great advantage of this tool is that it will store the custom-selected colors
    internally, so you can reuse them over and over again throughout your CSS files.
    For example, if we go to the `.main div` style and want to assign a custom color
    to the `color` attribute, we will see that in the horizontal color list, the custom
    color that we have used in *Figure 9.5* is listed, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.6 – A stored list of previously used custom colors'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.6 – A stored list of previously used custom colors
  prefs: []
  type: TYPE_NORMAL
- en: The color picker, without a doubt, is a tool that can help us a lot when we
    need to assign a custom color. Now, let's find out how IntelliSense can help us
    write faster in CSS files.
  prefs: []
  type: TYPE_NORMAL
- en: IntelliSense in style files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Just as IntelliSense can be an extraordinary help when creating source code,
    it can also be very useful when creating style files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at some practical examples of IntelliSense usage. Let''s go to
    the `ClientApp` | `src` | `components` | `NavMenu.css` file. Inside this file,
    let''s proceed to create a new style called `.intellisense`, as we can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If we position ourselves inside the style and press the *Ctrl* + *spacebar*
    key combination, the list of all the attributes that we can add to the newly created
    style will be displayed. If we start typing the name of an attribute, it will
    start filtering the list with the matches of what we type, as shown in *Figure
    9.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.7 – IntelliSense showing recommendations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.07_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.7 – IntelliSense showing recommendations
  prefs: []
  type: TYPE_NORMAL
- en: Also, it is possible to select an item from the list and complete the item name
    by pressing the *tab* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this demonstration, let''s assume that we need to use the `background`
    attribute, but we do not know the possible values we can assign to it. IntelliSense
    can help us in a visual way by showing us an example of the use of each attribute,
    as we can see in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – IntelliSense showing a possible use of the background attribute'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.8 – IntelliSense showing a possible use of the background attribute
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only that, but IntelliSense also adapts the results to the context of the
    selected attribute. For example, suppose we need to assign a set of fonts to the
    `font-family` attribute of a style. If we type the `font-family` attribute, Visual
    Studio will provide us with the list of values corresponding to the `font-family`
    attribute, as shown in *Figure 9.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.9 – Recommended values for the font-family attribute by IntelliSense'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.09_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.9 – Recommended values for the font-family attribute by IntelliSense
  prefs: []
  type: TYPE_NORMAL
- en: 'If, on the other hand, we want to assign a value to the `font-weight` attribute,
    we will see results according to this attribute, as shown in *Figure 9.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.10 – Recommended values for the font-weight attribute by IntelliSense'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.10 – Recommended values for the font-weight attribute by IntelliSense
  prefs: []
  type: TYPE_NORMAL
- en: Undoubtedly, IntelliSense is an excellent aid for the creation of styles. Now,
    let's move on to analyze the image editor.
  prefs: []
  type: TYPE_NORMAL
- en: Working with images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A tool that is not very well known in Visual Studio is the image editor. This
    tool must be installed as specified in the *Technical requirements* section, and
    without a doubt, it can help us in the basic editing of the images of our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some of the situations in which the image editor is useful:'
  prefs: []
  type: TYPE_NORMAL
- en: When we need to rescale an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we need to change the color of a section to another color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we need to rotate an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we need to add text to an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we need to apply a filter to an image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the repository mentioned in the *Technical requirements* section, I have
    added an image located at `SPAProject` | `ClientApp` | `public` | `visualstudiologo.png`
    to perform different tests with the image editor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we open an image (in this case, `visualstudiologo.png`), we will see two
    toolbars – one located on the left side, called the *image editor* toolbar, and
    the second one on the top, called the image editor mode toolbar, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.11 – The Visual Studio image editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.11 – The Visual Studio image editor
  prefs: []
  type: TYPE_NORMAL
- en: First, let's analyze the image editor toolbar. This is a bar that appears on
    the left side of the editor and contains tools that allow you to perform some
    action on the image, such as adding geometric shapes or rotating the image.
  prefs: []
  type: TYPE_NORMAL
- en: At the top, we have the image editor mode toolbar. This toolbar contains buttons
    that execute advanced commands, such as irregular selection, wand selection, pan,
    zoom, and image properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a practical example. Suppose we need to execute the following
    tasks on the image:'
  prefs: []
  type: TYPE_NORMAL
- en: Convert the image to grayscale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flip the image horizontally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write the text `Visual Studio Logo` on the image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To execute these tasks, we must perform the following steps in order:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the image editor mode toolbar, select the **Advanced** | **Filters** | **Black
    and White** option, as shown in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.12 – Converting the image to grayscale'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.12 – Converting the image to grayscale
  prefs: []
  type: TYPE_NORMAL
- en: 'In the image editor toolbar, double-click the rotate image button, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.13 – Rotating the image'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.13 – Rotating the image
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the text tool, as shown in *Figure 9.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.14 – Selecting the text tool'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.14_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.14 – Selecting the text tool
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the text `Visual Studio Logo` in the **Properties** window, as shown in
    *Figure 9.15*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.15 – Changing the Text value in the Properties window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.15 – Changing the Text value in the Properties window
  prefs: []
  type: TYPE_NORMAL
- en: 'With these edits applied, we will have the result shown in *Figure 9.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.16 – The result after applying the changes'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.16_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.16 – The result after applying the changes
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to do is to save the image so that the changes are permanently
    applied to it. With this example, we have been able to see how the image editor
    can be very useful if we need to make edits to our images.
  prefs: []
  type: TYPE_NORMAL
- en: In the next part, let's understand how code analysis can help .NET developers
    to have clean and quality code.
  prefs: []
  type: TYPE_NORMAL
- en: Cleaning code with code analysis tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Visual Studio 2022 includes a series of C# or Visual Basic code analyzers that
    allow us to maintain good code quality and consistent style in the source code.
    To use this feature by default, projects must be configured on a framework version
    of .NET 5 or higher. To differentiate compilation errors, analysis violations
    will appear with the **CA** prefix in the case of a code quality analysis violation
    and **IDE** in the case of a style analysis violation.
  prefs: []
  type: TYPE_NORMAL
- en: The code analysis tools correspond to code quality analysis and code style analysis,
    so we will see what they are, how they can help us, and learn how to set up and
    run with code cleanup profiles. Let's first look at how to take advantage of code
    quality analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Code quality analysis
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code quality consists of having a source code that is secure, with the best
    possible performance and good design, among other characteristics. Fortunately,
    Visual Studio can help us to maintain high-quality code through rules enabled
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'To visualize one of these violations in a practical way, let''s go to the `Program.cs`
    file and add the following line at the end of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to compile the project, right-click on the project name and click on the
    **Build** option, as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.17 – Compiling the project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.17_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.17 – Compiling the project
  prefs: []
  type: TYPE_NORMAL
- en: 'When performing the compilation, we do not see errors immediately; however,
    if you go to the `int` to the `ReferenceEquals` method because it will always
    return a *false* value due to the *boxing* operation (conversion from a *value*
    type to a *reference* type) of the value:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.18 – A code quality warning'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.18_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.18 – A code quality warning
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'Occasionally, Visual Studio may suggest code fixes to fix warnings in the code,
    through a light bulb icon appearing on the error. Also, you can see the complete
    list of code quality rules at the following URL: [https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md](https://github.com/dotnet/roslyn-analyzers/blob/main/src/NetAnalyzers/Core/AnalyzerReleases.Shipped.md).'
  prefs: []
  type: TYPE_NORMAL
- en: Let's now look at the rules applied to the code style.
  prefs: []
  type: TYPE_NORMAL
- en: Working with code styles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Code styles are configurations that can be quite useful for C# and Visual Basic
    developers to keep a project with correct nomenclature, especially if the project
    is used by several members of a team.
  prefs: []
  type: TYPE_NORMAL
- en: Code styles can be created for a specific project or Visual Studio instance
    installed on a machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'The way to use code styles is by opening the **Tools** | **Options** | **Text
    Editor** | **C# or Visual Basic** | **Code Style** | **General** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.19 – The code style configuration window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.19_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.19 – The code style configuration window
  prefs: []
  type: TYPE_NORMAL
- en: Once we are in this window, we will be able to see the code style configuration
    for the current machine. We can change any of these options to fit the code nomenclature
    we need.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we need to specify a configuration file to be applied as part of the solution,
    even if it is opened on another machine, we can modify the configuration values.
    Once we have the settings we want to follow throughout the solution, we should
    click on the **Generate .editorconfig file from settings** button, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.20 – The button to generate a configuration file'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.20_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.20 – The button to generate a configuration file
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open a dialog, asking for the name and path where the configuration
    file will be saved. In this example, it has been saved as `config.editorconfig`,
    as shown in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.21 – The configuration file created'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.21_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.21 – The configuration file created
  prefs: []
  type: TYPE_NORMAL
- en: If we proceed to open the file we have created, the text editor will open. Here,
    we will be able to see the applied configuration in text format, being able to
    change the preselected parameters quickly. Once again, these changes will accompany
    the solution so that all source files that are part of the project and have the
    same code nomenclature.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's talk about code cleanup profiles that will control which aspects
    should be applied when code is cleaned.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a code cleanup profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The code cleanup profiles are a configuration in which you can indicate what
    type of code cleanup you want to apply to your project. There are several ways
    to access the profile configuration window, but the general way is to go to the
    **Tools** | **Options** | **Text Editor** | **Code Cleanup** | **Configure Code
    Cleanup** menu. This will display the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.22 – The Configuration Code Cleanup window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.22_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.22 – The Configuration Code Cleanup window
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, two cleaning profiles can be configured with different options,
    with **Profile 1** the one that will be executed by default. Likewise, inside
    the window we have two sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Included fixers** list contains the specific active actions that we want
    to apply throughout the project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Available fixers** list contains the actions that are currently disabled,
    but at any time, we could add them to the active actions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fixers can be enabled or disabled easily, with the arrow buttons marked in *Figure
    9.22*.
  prefs: []
  type: TYPE_NORMAL
- en: Executing code cleanup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have created the code cleanup file and established the fixers that will
    be applied for the cleanup, let's see how we can apply this cleanup.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do this, we are going to the bottom of the editor, where we will press the
    button with the broom icon, as shown in *Figure 9.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.23 – The button to execute code cleanup'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.23_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.23 – The button to execute code cleanup
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned in the *Configuring a code cleanup profile* subsection, this will
    apply only the rules configured in the active cleaning profile. For example, suppose
    we have the following configuration in the default configuration profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.24 – A set of selected test fixers'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_9.24_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 9.24 – A set of selected test fixers
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we decide to modify the `WeatherForecast.cs` file with the following
    code without indentation, and with an unused `using System.Data.Common` namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, when we apply code cleanup, it will result in clean code, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Undoubtedly, this tool can be of great help to maintain a consistent and clean
    style, whether we work individually or with a development team.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to configure Visual Studio to perform a code cleanup every time
    a file is saved through the **Run Code Cleanup profile on Save** option, located
    in **Tools** | **Configuration** | **Text Editor** | **Code Cleanup**.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned about the different tools that Visual Studio
    has for frontend and backend developers.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how CSS3 snippets can help create cross-browser compatible styles
    quickly. Likewise, hierarchical CSS indentation helps to keep styles readable.
    Also, the color picker can help to select colors quickly, and we have also seen
    how IntelliSense is present when we need to edit CSS files, and finally, how the
    image editor provides useful tools if we need to make basic edits to our images.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of code analysis, we have learned how code quality analysis can
    help us to have safe and reliable code, while code style analysis helps us to
    maintain a nomenclature whether we are working individually or with a team of
    developers.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 10*](B17873_10_ePub.xhtml#_idTextAnchor122), *Publishing Projects*,
    you will learn the most common ways to publish web projects on different platforms.
  prefs: []
  type: TYPE_NORMAL
