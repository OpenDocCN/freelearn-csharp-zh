["```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 //-----------------------------------------------------\n04 public class MyCustomComponent : MonoBehaviour\n05 {\n06   //Reference to transform of object\n07   private Transform ThisTransform = null;\n08 //-----------------------------------------------------\n09   // Use this for initialization\n10   void Start ()\n11   {\n12     //Get cached reference to transform\n13     ThisTransform = GetComponent<Transform>();\n14   }\n15 //-----------------------------------------------------\n16   // Update is called once per frame\n17   void Update ()\n18   {\n19     //Update position\n\n20     if(ThisTransform !=null) {ThisTransform.localPosition += Time.deltaTime * 10.0f * ThisTransform.forward;}\n\n21   }\n22 //-----------------------------------------------------\n23 }\n24 //-----------------------------------------------------\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 //-----------------------------------------------------\n04 public class MyCustomComponent : MonoBehaviour\n05 {\n06   //Reference to all components as array\n07   private Component[] AllComponents = null;\n08   //-----------------------------------------------------\n09   // Use this for initialization\n10   void Start ()\n11   {\n12     //Gets a list of all components attached to this object\n13     AllComponents = GetComponents<Component>();\n14\n15     //Loops through each and list it to the console\n16     foreach(Component C in AllComponents)\n17     {\n18       //Print to console\n19       Debug.Log (C.ToString());\n20     }\n21   }\n22 }\n23 //-----------------------------------------------------\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 //-----------------------------------------------------\n04 public class MyCustomComponent : MonoBehaviour\n05 {\n06   //Reference to component on which function must be called\n07   public MonoBehaviour Handler = null;\n08\n09   //-----------------------------------------------------\n10   // Use this for initialization\n11   void Start ()\n12   {\n13     //Call function immediately\n14     Handler.Invoke(\"OnSave\",0.0f);\n15   }\n16 }\n17 //-----------------------------------------------------\n```", "```cs\n//Find Object with the name of player\nObjPlayer = GameObject.Find (\"Player\");\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//-----------------------------------------------------\npublic class ObjectFinder : MonoBehaviour\n{\n  //Tag name of objects to find\n  public string TagName = \"Enemy\";\n  //Array of found objects matching tag\n  public GameObject[] FoundObjects;\n\n  //-----------------------------------------------------\n  // Use this for initialization\n  void Start ()\n  {\n    //Find objects of matching tag\n\n    FoundObjects = GameObject.FindGameObjectsWithTag(TagName);\n\n  }\n}\n//-----------------------------------------------------\n```", "```cs\n//Compares tag of this object with another Obj_Y\nbool bMatch = gameObject.CompareTag(Obj_Y.tag);\n```", "```cs\n01 //Find objects of matching tag\n02 FoundObjects = GameObject.FindGameObjectsWithTag(TagName);\n03\n04 //Search through all objects and exclude ourselves\n05 foreach(GameObject O in FoundObjects)\n06 {\n07   //If two objects are the same\n08   if(O.GetInstanceID() == gameObject.GetInstanceID())\n09     continue; //Skip this iteration\n10\n11   //[...] Do stuff here\n12 }\n```", "```cs\n//Returns the nearest game object\nGameObject GetNearestGameObject(GameObject Source, GameObject[] DestObjects)\n{\n  //Assign first object\n  GameObject Nearest = DestObjects[0];\n\n  //Shortest distance\n  float ShortestDistance = Vector3.Distance(Source.transform.position, DestObjects[0].transform.position);\n\n  //Loop through all objects\n  foreach(GameObject Obj in DestObjects)\n  {\n    //Calculate distance\n    float Distance = Vector3.Distance(Source.transform.position, Obj.transform.position);\n    //If this is shortest, then update\n    if(Distance < ShortestDistance)\n    {\n      //Is shortest, now update\n      Nearest = Obj;\n      ShortestDistance = Distance;\n    }\n  }\n\n  //Return nearest\n  return Nearest;\n}\n```", "```cs\nvoid Start()\n{\n  //Get a list of all colliders in the scene\n  Collider[] Cols = Object.FindObjectsOfType<Collider>();\n}\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 //Determines if a clear line or path exists between two objects\n04 public class ObjectPath : MonoBehaviour\n05 {\n06   //Reference to sample enemy object\n07   public GameObject Enemy = null;\n08\n09   //Layer mask to limit line detection\n10   public LayerMask LM;\n11   //----------------------------------------------------\n12   // Update is called once per frame\n13   void Update ()\n14   {\n15     //Check if clear path between objects\n\n16     if(!Physics.Linecast(transform.position, Enemy.transform.position, LM))\n\n17     {\n18       //There is clear path\n19       Debug.Log (\"Path clear\");\n20     }\n21   }\n22   //----------------------------------------------------\n23   //Show helper debug line in viewport\n24   void OnDrawGizmos()\n25   {\n26     Gizmos.DrawLine(transform.position, Enemy.transform.position);\n27   }\n28   //----------------------------------------------------\n29 }\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//----------------------------------------------------\npublic class Parenter : MonoBehaviour\n{\n  //Reference to child object in scene\n  private GameObject Child;\n  //Reference to parent object in scene\n  private GameObject Parent;\n  //----------------------------------------------------\n  // Use this for initialization\n  void Start ()\n  {\n    //Get parent and child objects\n    Child = GameObject.Find(\"Child\");\n    Parent = GameObject.Find(\"Parent\");\n\n    //Now parent them\n    Child.transform.parent = Parent.transform;\n  }\n  //----------------------------------------------------\n}\n//----------------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//------------------------------------------\npublic class CycleChildren : MonoBehaviour\n{\n  //------------------------------------------\n  // Use this for initialization\n  void Start ()\n  {\n    //Cycle though children of this object\n    for(int i=0; i<transform.childCount; i++)\n    {\n      //Print name of child to console\n      Debug.Log (transform.GetChild(i).name);\n    }\n  }\n  //------------------------------------------\n}\n//------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class Mover : MonoBehaviour\n{\n  //Amount to move cube per frame\n  public float AmountToMove = 1.0f;\n\n  // Update is called once per frame\n  void Update ()\n  {\n    //Move cube along x axis\n    transform.localPosition += new Vector3(AmountToMove,0,0);\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class Mover : MonoBehaviour\n{\n  //Speed of cube\n  public float Speed = 1.0f;\n\n  // Update is called once per frame\n  void Update ()\n  {\n    //Move cube along forward direction by speed\n transform.localPosition += transform.forward * Speed * Time.deltaTime;\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//-------------------------------------------\n//This object will survive scene changes\npublic class PersistentObj : MonoBehaviour\n{\n  //-------------------------------------------\n  // Use this for initialization\n  void Start ()\n  {\n    //Make this object survive\n DontDestroyOnLoad(gameObject);\n  }\n}\n//-------------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//-----------------------------------------\n//Sample Game Manager class\npublic class GameManager : MonoBehaviour\n{\n  //-----------------------------------------\n  //High score\n  public int HighScore = 0;\n\n  //Is game paused\n  public bool IsPaused = false;\n\n  //Is player input allowed\n  public bool InputAllowed = true;\n  //-----------------------------------------\n  // Use this for initialization\n  void Start ()\n  {\n    //Make game manager persistent\n    DontDestroyOnLoad(gameObject);\n  }\n  //-----------------------------------------\n}\n//-----------------------------------------\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 //-----------------------------------------\n04 //Sample Game Manager class - Singleton Object\n05 public class GameManager : MonoBehaviour\n06 {\n07   //-----------------------------------------\n08   //C# Property to get access to singleton instance\n09   //Read only - only has get accessor\n10   public static GameManager Instance\n11   {\n12     //return reference to private instance\n13     get\n14     {\n15       return instance;\n16     }\n17   }\n18\n19   //-----------------------------------------\n20   private static GameManager instance = null;\n21   //-----------------------------------------\n22   //High score\n23   public int HighScore = 0;\n24\n25   //Is game paused\n26   public bool IsPaused = false;\n27\n28   //Is player input allowed\n29   public bool InputAllowed = true;\n30   //-----------------------------------------\n31   // Use this for initialization\n32   void Awake ()\n33   {\n34     //Check if existing instance of class exists in scene\n35     //If so, then destroy this instance\n36     if(instance)\n37     {\n38       DestroyImmediate(gameObject);\n39       return;\n40     }\n41\n42     //Make this active and only instance\n43     instance = this;\n44\n45     //Make game manager persistent\n46     DontDestroyOnLoad(gameObject);\n47   }\n48   //-----------------------------------------\n49 }\n50 //-----------------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//-------------------------------------------\npublic class ScoreSetter : MonoBehaviour\n{\n  //-------------------------------------------\n  // Use this for initialization\n  void Start ()\n  {\n    //Set score on GameManager\n    GameManager.Instance.HighScore = 100;\n  }\n  //-------------------------------------------\n}\n//-------------------------------------------\n```"]