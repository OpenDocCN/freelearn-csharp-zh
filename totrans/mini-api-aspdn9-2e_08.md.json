["```cs\nCREATE TABLE dbo.Employees\n    (\n    Id int NOT NULL IDENTITY (1, 1),\n    Name varchar(MAX) NOT NULL,\n    Salary decimal(10, 2) NOT NULL,\n    Address varchar(MAX) NOT NULL,\n    City varchar(50) NOT NULL,\n    Region varchar(50) NOT NULL,\n    Country varchar(50) NOT NULL,\n    Phone varchar(200) NOT NULL,\n    PostalCode varchar(10) NOT NULL\n    )\n```", "```cs\n//Windows Auth (Trusted Connection)\nServer=myServerAddress;\nDatabase=myDataBase;\nTrusted_Connection=True;\n// SQL Server Authentication\nServer=myServerAddress;\nDatabase=myDataBase;\nUser Id=myUsername;\nPassword=myPassword;\n```", "```cs\n{\n  \"ConnectionStrings\": {\n      \"DefaultConnection\":\n          \"Server=localhost;Database=MyCompany;\n          User Id=your_user;Password=your_password;\"\n  }\n}\n```", "```cs\npublic interface IDatabaseService\n{\n    Task<IEnumerable<Employee>> GetEmployeesAsync();\n    Task AddEmployeeAsync(Employee employee);\n}\n```", "```cs\npublic class SqlService : IDatabaseService\n{\n    private readonly string _connectionString;\n    public SqlService(IConfiguration configuration)\n    {\n        _connectionString =\n             configuration.GetConnectionString(\n                 \"DefaultConnection\"\n             );\n    }\n}\n```", "```cs\n    public class Employee\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public decimal Salary { get; set; }\n        public string Address { get; set; }\n        public string City { get; set; }\n        public string Region { get; set; }\n        public string PostalCode { get; set; }\n        public string Country { get; set; }\n        public string Phone { get; set; }\n    }\n```", "```cs\npublic async Task<IEnumerable<Employee>>\n    GetEmployeesAsync()\n{\n    var employees = new List<Employee>();\n}\n```", "```cs\ndotnet add package Microsoft.Data.SqlClient\n```", "```cs\nusing (var connection = new\n    SqlConnection(_connectionString))\n{\n    await connection.OpenAsync();\n}\n```", "```cs\nusing (var command = new\n    SqlCommand(\"SELECT * FROM Employees\", connection))\n{\n}\n```", "```cs\nusing (var reader = await command.ExecuteReaderAsync())\n{\n    while (await reader.ReadAsync())\n    {\n        var employee = new Employee\n        {\n            Id = reader.GetInt32(0),\n            Name = reader.GetString(1),\n            Salary = reader.GetDecimal(2),\n            Address = reader.GetString(3),\n            City = reader.GetString(4),\n            Region = reader.GetString(5),\n            PostalCode = reader.GetString(6),\n            Country = reader.GetString(7),\n            Phone = reader.GetString(8)\n        };\n        employees.Add(employee);\n    }\n}\n```", "```cs\npublic async Task<IEnumerable<Employee>>\n    GetEmployeesAsync()\n{\n    var employees = new List<Employee>();\n    using (var connection = new\n        SqlConnection(_connectionString))\n    {\n        await connection.OpenAsync();\n        using (var command = new SqlCommand(\n            \"SELECT * FROM Employees\", connection))\n        {\n            using (var reader = await\n                command.ExecuteReaderAsync())\n            {\n                while (await reader.ReadAsync())\n                {\n                    var employee = new Employee\n                    {\n                        Id = reader.GetInt32(0),\n                        Name = reader.GetString(1),\n                        Salary = reader.GetDecimal(2),\n                        Address = reader.GetString(3),\n                        City = reader.GetString(4),\n                        Region = reader.GetString(5),\n                        PostalCode = reader.GetString(6),\n                        Country = reader.GetString(7),\n                        Phone = reader.GetString(8)\n                    };\n                    employees.Add(employee);\n                }\n            }\n        }\n    }\n    return employees;\n}\n```", "```cs\npublic async Task AddEmployeeAsync(Employee employee)\n{\n    using (var connection = new\n        SqlConnection(_connectionString))\n    {\n        await connection.OpenAsync();\n        using (var command = new SqlCommand(\n            \"INSERT INTO Employees (Name, Salary, \" +\n            Address, City, Region, Country, Phone, \" +\n            PostalCode) VALUES (@Name, @Salary, \" +\n            @Address, @City, @Region, @Country, \" +\n            @Phone, @PostalCode)\", \" +\n            connection))\n        {\n            command.Parameters.AddWithValue(\n                \"@Name\", employee.Name);\n            command.Parameters.AddWithValue(\n                \"@Salary\", employee.Salary);\n            command.Parameters.AddWithValue(\n                \"@Address\", employee.Address);\n            command.Parameters.AddWithValue(\n                \"@City\", employee.City);\n            command.Parameters.AddWithValue(\n                \"@Region\", employee.Region);\n            command.Parameters.AddWithValue(\n                \"@Country\", employee.Country);\n            command.Parameters.AddWithValue(\n                \"@Phone\", employee.Phone);\n            command.Parameters.AddWithValue(\n                \"@PostalCode\", employee.PostalCode);\n            await command.ExecuteNonQueryAsync();\n        }\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddSingleton<IDatabaseService,\nSqlLService>(); var app = builder.Build();\n```", "```cs\napp.MapGet(\n    \"/employees\",\n    async (IDatabaseService dbService) =>\n{\n    var employees = await dbService.GetEmployeesAsync();\n    return Results.Ok(employees);\n});\napp.MapPost(\n    \"/employees\",\n    async (IDatabaseService dbService,\n           Employee employee) =>\n{\n    await dbService.AddEmployeeAsync(employee);\n    return Results.Created(\n        $\"/employees/{employee.Id}\", employee);\n});\n```", "```cs\n[\n    {\n        \"Id\": 1,\n        \"Name\": \"John Doe\",\n        \"Salary\": 55000.75,\n        \"Address\": \"123 Elm Street\",\n        \"City\": \"Springfield\",\n        \"Region\": \"IL\",\n        \"PostalCode\": \"62701\",\n        \"Country\": \"USA\",\n        \"Phone\": \"555-1234\"\n    },\n    {\n        \"Id\": 2,\n        \"Name\": \"Jane Smith\",\n        \"Salary\": 62000.50,\n        \"Address\": \"456 Oak Avenue\",\n        \"City\": \"Metropolis\",\n        \"Region\": \"NY\",\n        \"PostalCode\": \"10001\",\n        \"Country\": \"USA\",\n        \"Phone\": \"555-5678\"\n    }\n]\n```", "```cs\ndotnet add package MongoDB.Driver\n```", "```cs\nusing MongoDB.Bson;\nusing MongoDB.Driver;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\npublic class MongoDbService : IDatabaseService\n{\n}\n```", "```cs\nprivate readonly IMongoCollection<Employee>\n    _employeesCollection;\n    public MongoDbService(IConfiguration configuration)\n    {\n        var connectionString =\n            configuration.GetConnectionString(\n                \"MongoDbConnection\");\n        var mongoClient = new\n            MongoClient(connectionString);\n        var mongoDatabase =\n            mongoClient.GetDatabase(\"MyCompany\");\n        _employeesCollection =\n            mongoDatabase.GetCollection<Employee>(\n                \"Employees\");\n    }\n```", "```cs\npublic async Task<IEnumerable<Employee>>\n    GetEmployeesAsync()\n    {\n        return await _employeesCollection\n            .Find(new BsonDocument())\n            .ToListAsync();\n    }\n    public async Task AddEmployeeAsync(Employee employee)\n    {\n        await _employeesCollection\n            .InsertOneAsync(employee);\n    }\n```", "```cs\nmongodb://localhost:27017/MyCompany\n```", "```cs\n\"UseMongoDB\": true,\n\"ConnectionStrings\": {\n    \"DefaultConnection\":\n        \"Server=.\\\\SQLEXPRESS;Database=MyCompany;\n        Trusted_Connection=True;\n        TrustServerCertificate=True;\",\n    \"MongoDbConnection\":\n        \"mongodb://localhost:27017/MyCompany\"\n  }\n```", "```cs\nbuilder.Services.AddSingleton<MongoDbService>();\n```", "```cs\nbuilder.Services.AddSingleton<IDatabaseService>(sp =>\n{\n    var config = sp.GetRequiredService<IConfiguration>();\n    var useMongoDB = config.GetValue<bool>(\"UseMongoDB\");\n    if (useMongoDB)\n    {\n        return sp.GetRequiredService<MongoDbService>();\n    }\n    else\n    {\n        return sp.GetRequiredService<SqlService>();\n    }\n});\n```", "```cs\npublic interface IEmployee\n{\n}\n```", "```cs\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Attributes;\n{\n    public class EmployeeMongoDb : IEmployee\n    {\n        [BsonId]\n        [BsonRepresentation(\n            MongoDB.Bson.BsonType.ObjectId)]\n        public string Id { get; set; }\n        public string Name { get; set; }\n        public decimal Salary { get; set; }\n        public string Address { get; set; }\n        public string City { get; set; }\n        public string Region { get; set; }\n        public string PostalCode { get; set; }\n        public string Country { get; set; }\n        public string Phone { get; set; }\n    }\n}\n```", "```cs\nprivate readonly IMongoCollection<EmployeeMongoDb>\n    _employeesCollection;\npublic MongoDbService(IConfiguration configuration)\n{\n    var connectionString =\n        configuration.GetConnectionString(\n            \"MongoDbConnection\");\n    var mongoClient = new MongoClient(connectionString);\n    var mongoDatabase =\n        mongoClient.GetDatabase(\"MyCompany\");\n    _employeesCollection =\n        mongoDatabase.GetCollection<EmployeeMongoDb>(\n            \"Employees\");\n}\n```", "```cs\npublic async Task<IEnumerable<IEmployee>>\n    GetEmployeesAsync()\n{\n    var result = await _employeesCollection\n        .Find(new BsonDocument())\n        .ToListAsync();\n    return result;\n}\npublic async Task AddEmployeeAsync(IEmployee employee)\n{\n    var employeeToAdd = new EmployeeMongoDb\n{\n    Name = employee.Name,\n    Salary = employee.Salary,\n    Address = employee.Address,\n    City = employee.City,\n    Region = employee.Region,\n    PostalCode = employee.PostalCode,\n    Country = employee.Country,\n    Phone = employee.Phone\n};\n    await _employeesCollection\n        .InsertOneAsync(employeeToAdd);\n}\n```", "```cs\n// GetEmployeesAsync only needs the return type to be\n// changed\npublic async Task<IEnumerable<IEmployee>>\n    GetEmployeesAsync()\npublic async Task AddEmployeeAsync(IEmployee employee)\n{\n    var employeeToAdd = (Employee)employee;\n    using (var connection = new\n        SqlConnection(_connectionString))\n    {\n        await connection.OpenAsync();\n        using (var command = new SqlCommand(\n            \"INSERT INTO Employees (Name, Salary, \" +\n            Address, City, Region, Country, Phone, \" +\n            PostalCode) VALUES (@Name, @Salary, \" +\n            @Address, @City, @Region, @Country, \" +\n            @Phone, @PostalCode)\", \" +\n            connection))\n        {\n            command.Parameters.AddWithValue(\n                \"@Name\", employeeToAdd.Name);\n            command.Parameters.AddWithValue(\n                \"@Salary\", employeeToAdd.Salary);\n            command.Parameters.AddWithValue(\n                \"@Address\", employeeToAdd.Address);\n            command.Parameters.AddWithValue(\n                \"@City\", employeeToAdd.City);\n            command.Parameters.AddWithValue(\n                \"@Region\", employeeToAdd.Region);\n            command.Parameters.AddWithValue(\n                \"@Country\", employeeToAdd.Country);\n            command.Parameters.AddWithValue(\n                \"@Phone\", employeeToAdd.Phone);\n            command.Parameters.AddWithValue(\n                \"@PostalCode\", employeeToAdd.PostalCode);\n            await command.ExecuteNonQueryAsync();\n        }\n    }\n}\n```"]