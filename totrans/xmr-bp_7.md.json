["```cs\npublic interface IStorable\n    {\n       string Key { get; set; }\n    }\n```", "```cs\npublic class FileStorable : IStorable\n    {\n        #region Public Properties\n        [PrimaryKey] public string Key { get; set; }\n        public string Contents { get; set; }\n        #endregion \n    }\n```", "```cs\nCreateTable<FileStorable>(CancellationToken.None);\n```", "```cs\npublic interface ISQLiteStorage\n    {\n         void CreateSQLiteAsyncConnection();\n         Task CreateTable<T>(CancellationToken token) where T : class, IStorable, new();\n         Task InsertObject<T>(T item, CancellationToken token) where T : class, IStorable, new();\n         Task<IList<T>> GetTable<T>(CancellationToken token) where T : class, IStorable, new();\n         Task<T> GetObject<T>(string key, CancellationToken token) where T : class, IStorable, new();\n         Task ClearTable<T>(CancellationToken token) where T : class, IStorable, new();\n         Task DeleteObjectByKey<T>(string key, CancellationToken token) where T : class, IStorable, new();\n         void CloseConnection();\n    }\n```", "```cs\nprivate Object lockObject = new Object();\n```", "```cs\nlock (thisLock)\n        {\n            ...\n        }\n```", "```cs\npublic class AsyncSemaphore\n    {\n        private readonly static Task s_completed = Task.FromResult(true);\n        private readonly Queue<TaskCompletionSource<bool>> m_waiters = new Queue<TaskCompletionSource<bool>>();\n        private int m_currentCount;\n        public AsyncSemaphore(int initialCount)\n        {\n           if (initialCount < 0) throw new ArgumentOutOfRangeException(\"initialCount\");\n           m_currentCount = initialCount; \n        }\n        public Task WaitAsync()\n        {\n           lock (m_waiters)\n            {\n               if (m_currentCount > 0)\n                 {\n                    --m_currentCount;\n                    return s_completed;\n                 }\n               else\n                {\n                   var waiter = new TaskCompletionSource<bool>();\n                   m_waiters.Enqueue(waiter); return waiter.Task;\n                }\n         }\n      }\n}\n```", "```cs\npublic class AsyncLock\n    {\n        private readonly AsyncSemaphore m_semaphore;\n        private readonly Task<Releaser> m_releaser;\n        public AsyncLock()\n          {\n              m_semaphore = new AsyncSemaphore(1);\n              m_releaser = Task.FromResult(new Releaser(this));\n          }\n        public Task<Releaser> LockAsync()\n         {\n              var wait = m_semaphore.WaitAsync();\n              return wait.IsCompleted ?\n              m_releaser :\n              wait.ContinueWith((_, state) =>\n              new Releaser((AsyncLock)state),\n                this, CancellationToken.None,\n                TaskContinuationOptions.ExecuteSynchronously, TaskScheduler.Default);\n     }\n       public struct Releaser : IDisposable\n         {\n             private readonly AsyncLock m_toRelease;\n             internal Releaser(AsyncLock toRelease) { m_toRelease = toRelease; }\n             public void Dispose()\n               {\n                   if (m_toRelease != null)\n                       m_toRelease.m_semaphore.Release();\n               }\n        }\n  }\n```", "```cs\npublic interface ISQLiteSetup\n    {\n       string DatabasePath { get; set; }\n       ISQLitePlatform Platform { get; set; }\n    }\n```", "```cs\npublic class SQLiteSetup : ISQLiteSetup\n    { \n        public string DatabasePath { get; set; }\n        public ISQLitePlatform Platform { get; set; }\n        public SQLiteSetup(ISQLitePlatform platform)\n          {\n              DatabasePath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Personal), \"filestorage.db3\");;\n              Platform = platform; \n          }\n    }\n```", "```cs\npublic class IOSModule : IModule \n    { \n        #region Public Methods\n        public void Register(ContainerBuilder builder)\n        {\n           builder.RegisterType<SQLiteSetup>().As<ISQLiteSetup>().SingleInstance();\n           builder.RegisterType<SQLitePlatformIOS>().As<ISQLitePlatform>().SingleInstance();\n        }\n        #endregion \n    }\n```", "```cs\npublic class DroidModule : IModule\n    {\n        #region Public Methods\n        public void Register(ContainerBuilder builder) \n        {\n            builder.RegisterType<SQLiteSetup>().As<ISQLiteSetup>().SingleInstance();\n            builder.RegisterType<SQLitePlatformAndroid>().As<ISQLitePlatform>().SingleInstance();\n        }\n    #endregion \n}\n```", "```cs\npublic interface ILogger \n    { \n        #region Methods\n        void WriteLine(string message);\n        void WriteLineTime(string message, params object[] args);\n        #endregion \n    }\n```", "```cs\npublic class LoggeriOS : ILogger \n    { \n        #region Public Methods\n        public void WriteLine(string text) \n        { \n            Debug.WriteLine(text);\n        }\n        public void WriteLineTime(string text, params object[] args)\n        {\n            Debug.WriteLine(DateTime.Now.Ticks + \" \" + String.Format(text, args));\n        }\n        #endregion\n    }\n```", "```cs\npublic class LoggerDroid : ILogger\n    {\n        #region Public Methods\n        public void WriteLine(string text)\n        { \n            Log.WriteLine(LogPriority.Info, text, null);\n        }\n        public void WriteLineTime(string text, params object[] args)\n        { \n            Log.WriteLine(LogPriority.Info, DateTime.Now.Ticks + \" \" + \n            String.Format(text, args), null);\n        }\n        #endregion \n    }\n```", "```cs\npublic class SQLiteStorage : ISQLiteStorage \n    {\n        #region Private Properties\n        private readonly AsyncLock asyncLock = new AsyncLock();\n        private readonly object lockObject = new object();\n        private SQLiteConnectionWithLock _conn;\n        private SQLiteAsyncConnection _dbAsyncConn;\n        private readonly ISQLitePlatform _sqlitePlatform;\n        private string _dbPath;\n        private readonly ILogger _log;\n        private readonly string _tag;\n        #endregion\n    }\n```", "```cs\npublic SQLiteStorage(ISQLiteSetup sqliteSetup, ILogger log) \n    {\n         _dbPath = sqliteSetup?.DatabasePath;\n         _sqlitePlatform = sqliteSetup?.Platform;\n         _log = log; _tag = $\"{GetType()} \";\n    }\n```", "```cs\nIf (sqliteSetup != null)\n    _dbPath = sqliteSetup?.DatabasePath;\n```", "```cs\n_tag = $\"{GetType()} \";\n```", "```cs\npublic void CreateSQLiteAsyncConnection() \n    { \n        var connectionFactory = new Func<SQLiteConnectionWithLock>(() =>\n        {\n            if (_conn == null)\n            {\n                _conn = new SQLiteConnectionWithLock(_sqlitePlatform, new SQLiteConnectionString(_dbPath, true));\n            }\n            return _conn;\n        });\n        _dbAsyncConn = new SQLiteAsyncConnection(connectionFactory);\n     }\n        public async Task CreateTable<T>(CancellationToken token) where T : class, IStorable, new()\n        {\n             using (var releaser = await asyncLock.LockAsync())\n             {\n                 await _dbAsyncConn.CreateTableAsync<T>(token);\n             }\n        }\n```", "```cs\nSELECT * FROM {TableName};\n\n```", "```cs\npublic async Task<IList<T>> GetTable<T>(CancellationToken token) where T : class, IStorable, new()\n    { \n        var items = default(IList<T>);\n        using (var releaser = await asyncLock.LockAsync()) \n        {\n            try\n            { \n                items = await _dbAsyncConn.QueryAsync<T>(string.Format(\"SELECT * FROM {0};\", typeof(T).Name));\n            }\n            catch (Exception error)\n            {\n                var location = string.Format(\"GetTable<T>() Failed to 'SELECT *' from table {0}.\", typeof(T).Name);\n                _log.WriteLineTime(_tag + \"\\n\" + location + \"\\n\" + \"ErrorMessage: \\n\" + error.Message + \"\\n\" + \"Stacktrace: \\n \" + error.StackTrace);\n             }\n        }\n        return items; \n    }\n```", "```cs\npublic async Task InsertObject<T>(T item, CancellationToken token) where T : class, IStorable, new()\n   { \n        using (var releaser = await asyncLock.LockAsync())\n        { \n            try\n            {\n                var insertOrReplaceQuery = item.CreateInsertOrReplaceQuery();\n                await _dbAsyncConn.QueryAsync<T>(insertOrReplaceQuery);\n            }\n           catch (Exception error)\n           {\n               var location = string.Format(\"InsertObject<T>() Failed to insert \n               or replace object with key {0}.\", item.Key);\n               _log.WriteLineTime(_tag + \"\\n\" + location + \"\\n\" + \"ErrorMessage: \n               \\n\" + error.Message + \"\\n\" + \"Stacktrace: \\n \" + \n               error.StackTrace);\n           }\n      }\n   }\n```", "```cs\npublic static class StorableExtensions\n    {\n        #region Public Methods\n        public static string CreateInsertOrReplaceQuery(this IStorable storable)\n        {\n           var properties = storable.GetType().GetRuntimeProperties();\n           var tableName = storable.GetType().Name;\n           string propertiesString = \"\";\n           string propertyValuesString = \"\";\n           var index = 0;\n           foreach (var property in properties) \n           { \n              propertiesString += (index == (properties.Count() - 1)) ?\n              property.Name : property.Name + \", \";\n              var value = property.GetValue(storable);\n              var valueString = value == null ? \"null\" : value is bool ? \"'\"\n              + ((bool)value ? 1 : 0) + \"'\" : \"'\" + value + \"'\";\n             // if data is serialized if (property.Name.Equals(\"Data\") && \n             !valueString.Equals(\"null\"))\n             {\n                 valueString = valueString.Replace(\"\"\", \"\"\"); \n             }\n             propertyValuesString += valueString + \n             ((index == (properties.Count() - 1)) ? string.Empty : \", \");\n             index++;\n          }\n             return string.Format(\"INSERT OR REPLACE INTO {0}({1})\n             VALUES ({2});\", tableName, propetiesString, propertyValuesString);\n       }\n        #endregion\n    }\n```", "```cs\n    INSERT OR REPLACE INTO names (prop1, prop2, ...) VALUES (val1, val2, ...)\n\n```", "```cs\npublic async Task DeleteObjectByKey<T>(string key, CancellationToken token) where T : class, IStorable, new()\n    { \n        using (var releaser = await asyncLock.LockAsync()) \n          {\n            try\n            {\n                await _dbAsyncConn.QueryAsync<T>(string.Format(\"DELETE FROM {0} WHERE Key='{1}';\", typeof(T).Name, key));\n             }\n            catch (Exception error)\n             {\n                 var location = string.Format(\"DeleteObjectByKey<T>() Failed to \n                 delete object from key {0}.\", key);\n                 _log.WriteLineTime(_tag + \"\\n\" + location + \"\\n\" + \n                 \"ErrorMessage: \\n\" + error.Message + \"\\n\" + \"Stacktrace: \\n \" + \n                 error.StackTrace);\n             }\n          }\n     }\n```", "```cs\npublic class PortableModule : IModule\n    {\n         #region Public Methods\n         public void Register(ContainerBuilder builder)\n          {\n              builder.RegisterType<SQLiteStorage>().As<ISQLiteStorage>().SingleInstance();\n          }\n         #endregion\n    }\n```", "```cs\npublic class ViewModelBase : INotifyPropertyChanged \n    {\n        #region Public Events\n          public event PropertyChangedEventHandler PropertyChanged;\n          public event EventHandler<string> Alert;\n        #endregion\n        #region Private Properties\n          private IMethods _methods;\n        #endregion\n        #region Public Properties\n          public INavigationService Navigation;\n        #endregion\n        #region Constructors\n          public ViewModelBase(INavigationService navigation, IMethods methods) \n          {\n              Navigation = navigation;\n              _methods = methods; \n          }\n        #endregion\n    }\n```", "```cs\n#region Protected Methods\nprotected virtual void OnPropertyChanged([CallerMemberName] string propertyName = null)\n {\n    PropertyChangedEventHandler handler = PropertyChanged;\n    if (handler != null) \n      {\n          handler(this, new PropertyChangedEventArgs(propertyName));\n      }\n  }\n  protected virtual async Task LoadAsync(IDictionary<string, object> parameters) \n  {\n  }\n#endregion\n```", "```cs\n#region Public Methods\npublic Task<string> ShowEntryAlert(string message)\n  {\n    var tcs = new TaskCompletionSource<string>();\n    _methods.DisplayEntryAlert(tcs, message);\n    return tcs.Task; \n  }\npublic void NotifyAlert(string message)\n  {\n    if (Alert != null)\n    { \n      Alert(this, message);\n    }\n  }\npublic void OnShow(IDictionary<string, object> parameters) \n  {\n    LoadAsync(parameters).ToObservable().Subscribe( result =>\n      { \n         // we can add things to do after we load the view model }, ex =>\n          {\n            // we can handle any areas from the load async function });\n          }\n#endregion\n```", "```cs\npublic interface IMethods \n  {\n    #region Methods\n    void Exit();\n    void DisplayEntryAlert(TaskCompletionSource<string> tcs, string message);\n    #endregion \n  }\n```", "```cs\npublic class IOSMethods : IMethods\n  {\n    #region Public Methods\n    public void Exit()\n     {\n       UIApplication.SharedApplication.PerformSelector(new ObjCRuntime.Selector(\"terminateWithSuccess\"), null, 0f);\n     }\n    public void DisplayEntryAlert(TaskCompletionSource<string> tcs, string message)\n    { \n      UIAlertView alert = new UIAlertView(); alert.Title = \"Title\"; \n      alert.AddButton(\"OK\");\n      alert.AddButton(\"Cancel\"); \n      alert.Message = message;\n      alert.AlertViewStyle = UIAlertViewStyle.PlainTextInput; \n      alert.Clicked += (object s, UIButtonEventArgs ev) =>\n        {\n          if (ev.ButtonIndex == 0)\n            {\n              tcs.SetResult(alert.GetTextField(0).Text); \n            } \n          else\n            {\n              tcs.SetResult(null);\n            }\n        };\n      alert.Show(); \n    }\n  #endregion \n}\n```", "```cs\npublic class DroidMethods : IMethods \n  { \n    #region Public Methods\n    public void Exit() \n      { \n        Android.OS.Process.KillProcess(Android.OS.Process.MyPid());\n      }\n     public void DisplayEntryAlert(TaskCompletionSource<string> tcs, string message)\n      {\n        var context = Forms.Context;\n        LayoutInflater factory = LayoutInflater.From(context);\n        var view = factory.Inflate(Resource.Layout.EntryAlertView, null);\n        var editText = view.FindViewById<EditText>(Resource.Id.textEntry);\n        new AlertDialog.Builder(context)\n         .SetTitle(\"Chat\") \n         .SetMessage(message) \n         .SetPositiveButton(\"Ok\", (sender, e) =>\n           {\n             tcs.SetResult(editText.Text); \n           })\n         .SetNegativeButton(\"Cancel\", (sender, e) =>\n           { \n             tcs.SetResult(null);\n           })\n         .SetView(view)\n          .Show(); \n        }\n    #endregion \n  }\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<EditText  \n    android:id=\"@+id/textEntry\" android:layout_height=\"wrap_content\" \n    android:layout_width=\"250px\" android:layout_centerHorizontal=\"true\"\n    android:singleLine=\"true\" />\n```", "```cs\npublic class ExtendedContentPage : ContentPage\n  {\n    #region Private Properties\n      private ViewModelBase _model;\n    #endregion\n    #region Constructors\n      public ExtendedContentPage(ViewModelBase model)\n      {\n        _model = model;\n        _model.Alert -= HandleAlert;\n        _model.Alert += HandleAlert;\n      }\n    #endregion\n    #region Private Methods\n      private async void HandleAlert(object sender, string message) \n      {\n        await DisplayAlert(\"FileStorage\", message, \"OK\");\n      }\n    #endregion \n  }\n```", "```cs\npublic class CarouselLayout : Layout<View>\n  {\n    #region Private Properties\n      private IDisposable dataChangesSubscription;\n      public double LayoutWidth;\n    #endregion\n  }\n```", "```cs\n#region Public Properties\npublic Object this[int index] \n  {\n    get\n    {\n      return index < ItemsSource.Count() ? ItemsSource.ToList()[index] : null;\n    }\n  }\npublic DataTemplate ItemTemplate { get; set; }\npublic IEnumerable<Object> ItemsSource { get; set; }\n#endregion\n```", "```cs\nprotected override void LayoutChildren(double x, double y, double width, double height)\n  { \n    var layout = ComputeLayout(width, height);\n    var i = 0;\n    foreach (var region in layout)\n      { \n        var child = Children[i];\n        i++;\n        LayoutChildIntoBoundingRegion(child, region);\n      }\n    }\n```", "```cs\nprotected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint)\n  {\n    List<Row> layout = ComputeNiaveLayout(widthConstraint, heightConstraint);\n    var last = layout[layout.Count - 1];\n    var width = (last.Count > 0) ?\n    last[0].X + last.Width : 0; var height = (last.Count > 0) ? last[0].Y + \n    last.Height : 0;\n    return new SizeRequest(new Size(width, height)); \n  }\n```", "```cs\npublic IEnumerable<Rectangle> ComputeLayout(double widthConstraint, double heightConstraint)\n  {\n    List<Row> layout = ComputeNiaveLayout(widthConstraint, heightConstraint);\n    return layout.SelectMany(s => s); \n  }\n```", "```cs\nprivate List<Row> ComputeNiaveLayout(double widthConstraint, double heightConstraint) \n  {\n    var result = new List<Row>();\n    var row = new Row();\n    result.Add(row);\n    var spacing = 20;\n    double y = 0;\n    foreach (var child in Children) \n    {\n       var request = child.Measure(double.PositiveInfinity,\n       double.PositiveInfinity);\n       if (row.Count == 0)\n       {\n         row.Add(new Rectangle(0, y, LayoutWidth, Height));\n         row.Height = request.Request.Height; continue; \n       }\n       var last = row[row.Count - 1];\n       var x = last.Right + spacing;\n       var childWidth = LayoutWidth;\n       var childHeight = request.Request.Height;\n       row.Add(new Rectangle(x, y, childWidth, Height));\n       row.Width = x + childWidth; row.Height = Math.Max(row.Height, Height); \n       }\n    return result; \n }\n```", "```cs\npublic class CarouselScroll : ScrollView \n  { \n    #region Private Properties\n      private CarouselLayout _carouselLayout;\n    #endregion\n    public DataTemplate ItemTemplate\n    {\n      set\n      {\n        _carouselLayout.ItemTemplate = value;\n      }\n    }\n    public CarouselScroll()\n    {\n      Orientation = ScrollOrientation.Horizontal;\n      _carouselLayout = new CarouselLayout();\n      Content = _carouselLayout;\n     }\n   }\n```", "```cs\n    public static readonly BindableProperty ItemsSourceProperty = BindableProperty.Create<CarouselLayout, IEnumerable<Object>>(o => o.ItemsSource,\n    default(IEnumerable<Object>), propertyChanged: (bindable, oldvalues, newValues) =>\n    {\n      ((CarouselScroll)bindable)._carouselLayout.ItemsSource = newValues;\n    });\n```", "```cs\n    public static readonly BindableProperty DataChangesProperty = BindableProperty.Create(\"DataChanges\", \n    typeof(IObservable<DataChange>), typeof(CarouselLayout), null, propertyChanged: (bindable, oldvalue, newValue) =>\n    {\n         ((CarouselScroll)bindable)._carouselLayout.SubscribeDataChanges((IObservable<DataChange>)newValue);\n    });\n```", "```cs\nprotected override void LayoutChildren(double x, double y, double width, double height)\n  { \n    base.LayoutChildren(x, y, width, height);\n    if (_carouselLayout != null)\n      {\n         if (width > _carouselLayout.LayoutWidth)\n          { \n             _carouselLayout.LayoutWidth = width; \n          }\n         _carouselLayout.ComputeLayout(width, height); \n      }\n   }\n```", "```cs\npublic Object GetSelectedItem(int selected)\n  {\n     return _carouselLayout[selected]; \n  }\n```", "```cs\npublic class GestureView : View \n  {\n    public event EventHandler SwipeLeft;\n    public event EventHandler SwipeRight;\n    public event EventHandler Touch;\n    public void NotifySwipeLeft()\n      {\n        if (SwipeLeft != null)\n        {\n          SwipeLeft (this, EventArgs.Empty); \n        }\n      }\n    public void NotifySwipeRight()\n     {\n        if (SwipeRight != null)\n         {\n           SwipeRight (this, EventArgs.Empty);\n         }\n     }\n    public void NotifyTouch()\n     {\n        if (Touch != null)\n         {\n           Touch(this, EventArgs.Empty); \n         }\n      }\n  }\n```", "```cs\n[Register(\"GestureViewiOS\")]\n  public sealed class GestureViewiOS : UIView\n   { \n     private UIView _mainView;\n     private UISwipeGestureRecognizer _swipeLeftGestureRecognizer;\n     private UISwipeGestureRecognizer _swipeRightGestureRecognizer;\n     private UITapGestureRecognizer _tapGestureRecognizer;\n     public GestureViewiOS()\n     {\n       _mainView = new UIView ()\n       {\n         TranslatesAutoresizingMaskIntoConstraints = false \n        };\n       _mainView.BackgroundColor = UIColor.Clear;\n      Add (_mainView);\n     // set layout constraints for main view AddConstraints\n     (NSLayoutConstraint.FromVisualFormat(\"V:|[mainView]|\", \n      NSLayoutFormatOptions.DirectionLeftToRight, null,\n      new NSDictionary(\"mainView\", _mainView)));\n     AddConstraints (NSLayoutConstraint.FromVisualFormat(\"H:|[mainView]|\", NSLayoutFormatOptions.AlignAllTop, null, new NSDictionary (\"mainView\", _mainView)));\n     }\n   }\n```", "```cs\npublic void InitGestures(GestureView swipeView)\n  {\n     _swipeLeftGestureRecognizer = new UISwipeGestureRecognizer (swipeView.NotifySwipeLeft);\n     _swipeLeftGestureRecognizer.Direction = UISwipeGestureRecognizerDirection.Left; \n     _swipeRightGestureRecognizer = new UISwipeGestureRecognizer (swipeView.NotifySwipeRight); \n     _swipeRightGestureRecognizer.Direction = UISwipeGestureRecognizerDirection.Right;\n     _tapGestureRecognizer = new UITapGestureRecognizer(swipeView.NotifyTouch);\n     _tapGestureRecognizer.NumberOfTapsRequired = 1;\n     _mainView.AddGestureRecognizer (_swipeLeftGestureRecognizer);\n     _mainView.AddGestureRecognizer (_swipeRightGestureRecognizer);\n     _mainView.AddGestureRecognizer (_tapGestureRecognizer);\n  }\n```", "```cs\npublic class GestureLayoutRenderer : ViewRenderer<GestureView, GestureViewiOS>\n  {\n    private GestureViewiOS _swipeViewIOS;\n    private bool gesturesAdded;\n    public GestureLayoutRenderer()\n      {\n        _swipeViewIOS = new GestureViewiOS (); \n      }\n    protected override void OnElementChanged (ElementChangedEventArgs<GestureView> e)\n     {\n        base.OnElementChanged (e);\n        if (Control == null) \n          {\n             SetNativeControl(_swipeViewIOS); \n          }\n        if (Element != null && !gesturesAdded) \n          {\n             _swipeViewIOS.InitGestures(Element); \n             gesturesAdded = true;\n          }\n      }\n   }\n```", "```cs\n[assembly: Xamarin.Forms.ExportRenderer(typeof(FileStorage.Controls.GestureView), typeof(FileStorage.iOS.Renderers.GestureView.GestureLayoutRenderer))]\n   namespace FileStorage.iOS.Renderers.GestureView\n```", "```cs\npublic class GestureListener : GestureDetector.SimpleOnGestureListener\n  {\n     private const int SWIPE_THRESHOLD = 50;\n     private const int SWIPE_VELOCITY_THRESHOLD = 50;\n     private GestureView _swipeView;\n     public void InitCoreSwipeView(GestureView swipeView)\n     {\n        _swipeView = swipeView;\n     }\n   }\n```", "```cs\npublic override void OnLongPress (MotionEvent e)\n  {\n    base.OnLongPress (e); \n  }\npublic override bool OnDoubleTap (MotionEvent e)\n  {\n    return base.OnDoubleTap (e);\n  }\npublic override bool OnDoubleTapEvent (MotionEvent e)\n  { \n    return base.OnDoubleTapEvent (e);\n  }\npublic override bool OnDown (MotionEvent e) \n  {\n    return base.OnDown (e); \n  }\npublic override bool OnScroll (MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)\n  { \n    return base.OnScroll (e1, e2, distanceX, distanceY);\n  }\npublic override void OnShowPress (MotionEvent e)\n  { \n     base.OnShowPress (e);\n  }\npublic override bool OnSingleTapConfirmed (MotionEvent e)\n  { \n     return base.OnSingleTapConfirmed (e);\n  }\n```", "```cs\npublic override bool OnSingleTapUp (MotionEvent e)\n   {\n    _swipeView.NotifyTouch(); \n    return base.OnSingleTapUp (e);\n   }\n```", "```cs\npublic override bool OnFling (MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) \n  { \n    try \n      { \n        float diffY = e2.GetY() - e1.GetY(); \n        float diffX = e2.GetX() - e1.GetX();\n        if (Math.Abs(diffX) > Math.Abs(diffY)) \n          {\n            if (Math.Abs(diffX) > SWIPE_THRESHOLD && Math.Abs(velocityX) > SWIPE_VELOCITY_THRESHOLD)\n          {\n            if (_swipeView != null)\n              {\n                if (diffX > 0)\n                  {\n                    _swipeView.NotifySwipeRight ();\n                  }\n                else\n                  {\n                    _swipeView.NotifySwipeLeft ();\n                  }\n              }\n         }\n      }\n    }\n    catch (Exception) { }\n    return base.OnFling (e1, e2, velocityX, velocityY); \n  }\n```", "```cs\npublic class GestureViewRenderer : ViewRenderer<GestureView, LinearLayout>\n  {\n    private LinearLayout _layout;\n    private readonly GestureListener _listener;\n    private readonly GestureDetector _detector;\n    public GestureViewRenderer ()\n      {\n         _listener = new GestureListener ();\n         _detector = new GestureDetector (_listener);\n         _layout = new LinearLayout (Context); \n      }\n   }\n```", "```cs\nprotected override void OnElementChanged (ElementChangedEventArgs<GestureView> e)\n  {\n    base.OnElementChanged (e);\n    if (e.NewElement == null) \n      {\n        GenericMotion -= HandleGenericMotion;\n        Touch -= HandleTouch;\n      }\n    if (e.OldElement == null)\n      {\n        GenericMotion += HandleGenericMotion;\n        Touch += HandleTouch;\n      }\n    if (Element != null)\n      {\n        _listener.InitCoreSwipeView(Element); \n      }\n    SetNativeControl (_layout); \n    }\n    private void HandleTouch (object sender, TouchEventArgs e) \n      {\n        _detector.OnTouchEvent (e.Event);  \n      }\n    private void HandleGenericMotion (object sender, GenericMotionEventArgs e)\n      {\n        _detector.OnTouchEvent (e.Event);  \n      }\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentView  \n\n  x:Class=\"FileStorage.Controls.CarouselView\">\n<ContentView.Content>\n  <Grid x:Name=\"Container\">\n  <Grid.RowDefinitions>\n  <RowDefinition Height=\"*\"/> \n  </Grid.RowDefinitions> \n  <Grid.ColumnDefinitions>\n  <ColumnDefinition Width=\"*\"/>\n  </Grid.ColumnDefinitions>\n  <controls:CarouselScroll x:Name=\"CarouselScroll\" ItemsSource=\"{Binding Cells}\" \n   ItemTemplate=\"{StaticResource CarouselTemplate}\" \n   DataChanges=\"{Binding DataChanges}\" Grid.Row=\"0\" Grid.Column=\"0\"/>\n  <controls:GestureView x:Name=\"GestureView\" Grid.Row=\"0\" Grid.Column=\"0\"/>\n  </Grid>\n </ContentView.Content>\n </ContentView>\n```", "```cs\npublic partial class CarouselView : ContentView \n  {\n    private bool _animating;\n    public int SelectedIndex = 0;\n    public static readonly BindableProperty SelectedCommandProperty = BindableProperty.Create<CarouselView, ICommand>(w => w.SelectedCommand, default(ICommand),\n    propertyChanged: (bindable, oldvalue, newvalue) => { });\n\n    public ICommand SelectedCommand \n      {\n        get\n        {\n          return (ICommand)GetValue(SelectedCommandProperty); \n        }\n        set\n        {\n          SetValue(SelectedCommandProperty, value);\n        }\n      }\n    public CarouselView() \n      {\n         InitializeComponent();\n         GestureView.SwipeLeft += HandleSwipeLeft;\n         GestureView.SwipeRight += HandleSwipeRight;\n         GestureView.Touch += HandleTouch;\n       }\n }\n```", "```cs\npublic void HandleTouch(object sender, EventArgs e)\n  {\n    if (SelectedCommand != null)\n     {\n        var cell = CarouselScroll.GetSelectedItem(SelectedIndex); \n        SelectedCommand.Execute(cell);\n     }\n   }\npublic async void HandleSwipeLeft(object sender, EventArgs e)\n   { \n     if (((CarouselScroll.ScrollX + CarouselScroll.Width) < (CarouselScroll.Content.Width - CarouselScroll.Width)) && !_animating)\n      {\n        _animating = true;\n        SelectedIndex++;\n        await CarouselScroll.ScrollToAsync(CarouselScroll.ScrollX + Width + 20, 0, true);\n        _animating = false;\n      } \n   }\npublic async void HandleSwipeRight(object sender, EventArgs e)\n   {\n     if (CarouselScroll.ScrollX > 0 && !_animating)\n      {\n         _animating = true;\n         SelectedIndex--;\n         await CarouselScroll.ScrollToAsync(CarouselScroll.ScrollX - Width - 20, 0, true);\n         _animating = false;\n      }\n   }\n }\n```", "```cs\npublic class MainPageViewModel : ViewModelBase\n  {\n     #region Private Properties\n     private string _descriptionMessage = \"Welcome to the Filing Room\";\n     private string _FilesTitle = \"Files\";\n     private string _exitTitle = \"Exit\";\n     private ICommand _locationCommand;\n     private ICommand _exitCommand;\n     private ISQLiteStorage _storage;\n     #endregion\n  }\n```", "```cs\n#region Public Properties\npublic ICommand LocationCommand\n  {\n    get\n     {\n       return _locationCommand; \n     }\n    set\n     {\n       if (value.Equals(_locationCommand))\n         {\n            return;\n         }\n       _locationCommand = value; OnPropertyChanged(\"LocationCommand\"); \n      }\n   }\npublic ICommand ExitCommand\n  {\n    get\n      {\n        return _exitCommand;\n      }\n    set\n      {\n       if (value.Equals(_exitCommand))\n         {\n            return; \n         }\n       _exitCommand = value; OnPropertyChanged(\"ExitCommand\");\n      }\n    }\n#endregion\n```", "```cs\n#region Constructors\npublic MainPageViewModel (INavigationService navigation, Func<Action, ICommand> commandFactory,\nIMethods methods, ISQLiteStorage storage) : base (navigation, methods)\n  {\n     _exitCommand = commandFactory (() => methods.Exit());\n     _locationCommand = commandFactory (async () => await Navigation.Navigate(PageNames.FilesPage, null));\n     _storage = storage;\n     SetupSQLite().ConfigureAwait(false); \n  }\n#endregion\nprivate async Task SetupSQLite()\n  {\n    // create Sqlite connection _storage.CreateSQLiteAsyncConnection();\n    // create DB tables await _storage.CreateTable<FileStorable>\n    CancellationToken.None);\n  }\n}\n```", "```cs\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ui:ExtendedContentPage  \n\n    x:Class=\"FileStorage.Pages.MainPage\"\n    BackgroundColor=\"White\"\n    Title=\"Welcome\">\n<ui:ExtendedContentPage.Content>\n      <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\" VerticalOptions=\"Center\">\n      <Grid.RowDefinitions> \n          <RowDefinition Height=\"*\"/>\n          <RowDefinition Height=\"Auto\"/>\n          <RowDefinition Height=\"Auto\"/>\n          <RowDefinition Height=\"Auto\"/>\n      </Grid.RowDefinitions>\n      <Grid.ColumnDefinitions>\n          <ColumnDefinition Width=\"*\"/>\n      </Grid.ColumnDefinitions>\n      <Image x:Name=\"Image\" Source=\"files.png\" HeightRequest=\"120\" \n          WidthRequest=\"120\" Grid.Row=\"0\" Grid.Column=\"0\"/>\n      <Label x:Name=\"DesciptionLabel\" Text=\"{Binding DescriptionMessage}\" \n          TextColor=\"Black\" HorizontalOptions=\"Center\" Font=\"Arial, 20\" \n          Grid.Row=\"1\" Grid.Column=\"0\"/>\n      <Button x:Name=\"LocationButton\" Text=\"{Binding FilesTitle}\"\n          Command=\"{Binding LocationCommand}\" \n          Style=\"{StaticResource ButtonStyle}\" Grid.Row=\"2\" Grid.Column=\"0\"/>\n      <Button x:Name=\"ExitButton\" Text=\"{Binding ExitTitle}\"\n          Command=\"{Binding ExitCommand}\" Style=\"{StaticResource ButtonStyle}\" \n          Grid.Row=\"3\" Grid.Column=\"0\"/>\n      </Grid>\n   </ui:ExtendedContentPage.Content>\n</ui:ExtendedContentPage>\n```", "```cs\nWe have to declare a new `ExtendedContentPage` like the following:\n\n```", "```cs\n\nThe rest of the page is the same as previous projects. A simple **Grid** contains an image, label, and two buttons. Now implement the following for `MainPage.xaml.cs`:\n\n```", "```cs\n\nWe are able to assign the `BindingContext` property through the constructor because we are registering this item inside the IoC container.Now we move on to the next page, where we will be including the `CarouselView`. We will also be loading in our files that are saved locally in our database. Our first step is to create a new view-model for each view that is going to appear in the `CarouselView`. Add a new file to the `ViewModels` folder called `FileItemViewModel.cs` and implement the following:\n\n```", "```cs\n\nIt is very simple, just two properties to contain the filename and text contents of the file. These two items will be saved in a `FileStorable` object in our local database. We have an `Apply` function that will take a `FileStorable` object to load the properties of the view-model.Now let's build the page. Inside the `ViewModels` folder, add a new file called `FilesPageViewModel.cs` and implement the following:\n\n```", "```cs\n\nWe have two commands for editing a file, which will be bound to the custom binding `SelectCommandProperty` on the `CarouselView`. When a user touches the current child on the `CarouselLayout`, this command will be invoked.Notice the `SynchronizationContext` property?This will be used for threading purposes to ensure we update the `ObservableCollection` on the main UI thread.Now let's add the public properties as follows:\n\n```", "```cs\n\n### Tip\n\nDon't forget that we only need a `public` property for the properties that are going to be bound to the view.\n\nWe have an `ObservableCollection` of type `FileItemViewModel;` so, for every file we pull from the database, a new view-model will be created to show the details on the child view of the `CarouselView`. We also have an `IObservable` property called `DataChanges`; every time we update the `ObservableCollection`, we will publish a new event through the stream, and because we will be binding this property to the `CarouselView`, the list of children will be structured accordingly.Now let's add the constructor as follows:\n\n```", "```cs\n\n```", "```cs\n#region Private Methods\nprivate void UpdateFiles() \n  { \n    _context.Post(async (obj) =>\n      {\n        Cells.Clear(); \n        var files = await _storage.GetTable<FileStorable>(CancellationToken.None);\n        foreach (var file in files) \n          { \n            var fileModel = _fileFactory(); \n            fileModel.Apply(file);\n            Cells.Add(fileModel);\n          }\n        AnyFiles = Cells.Any();\n        DataChanges.OnNext(new DataChange()\n          { \n            SizeChanged = true\n          });\n       }, null);\n    }\n#endregion\n```", "```cs\n#region Public Methods\npublic void OnAppear() \n  {\n    UpdateFiles(); \n  }\n#endregion\n```", "```cs\n<ui:ExtendedContentPage.Content>\n  <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\"> \n  <Grid.RowDefinitions>\n  <RowDefinition Height=\"*\"/>\n  <RowDefinition Height=\"60\"/>\n  </Grid.RowDefinitions>\n  <Grid.ColumnDefinitions> \n  <ColumnDefinition Width=\"*\"/>\n  </Grid.ColumnDefinitions>\n  <Label x:Name=\"NoFilesLabel\" \n     IsVisible=\"{Binding AnyFiles, Converter={StaticResource notConverter}}\" \n     HorizontalTextAlignment=\"Center\" VerticalTextAlignment=\"Center\" Grid.Row=\"0\" \n     Grid.Column=\"0\">\n  <Label.FormattedText>\n  <FormattedString>\n  <Span Text=\"{x:Static resx:LabelResources.NoFilesLabel}\" FontFamily=\"Arial\" \n  FontSize=\"24\" ForegroundColor=\"Black\"/> </FormattedString> \n  </Label.FormattedText> \n  </Label>\n  <controls:CarouselView x:Name=\"CarouselView\" SelectedCommand=\"{Binding \n  EditFileCommand}\" Grid.Row=\"0\" Grid.Column=\"0\"/>\n  <Button x:Name=\"CreateFileButton\" Command=\"{Binding CreateFileCommand}\" \n  Text=\"{x:Static resx:LabelResources.CreateFileLabel}\" Style=\"{StaticResource \n  ButtonStyle}\" Grid.Row=\"1\" Grid.Column=\"0\"/> \n  </Grid>\n</ui:ExtendedContentPage.Content>\n```", "```cs\nNotice our custom binding property on the CarouselView with the SelectCommand?Every time we click the current child, this will execute the EditFileCommand from the view-model.The page has also been set up to hide the CarouselView and display the NoFilesLabel if there are no files in local storage. Then, if we want to create a new file, we click on the CreateFileButton.\n```", "```cs\n<ui:ExtendedContentPage.Content> \n  <Grid x:Name=\"Grid\" RowSpacing=\"10\" Padding=\"10, 10, 10, 10\"> \n    <Grid.RowDefinitions>\n      <RowDefinition Height=\"60\"/>\n      <RowDefinition Height=\"*\"/>\n      <RowDefinition Height=\"60\"/> \n      <RowDefinition Height=\"60\"/> \n    </Grid.RowDefinitions>\n    <Grid.ColumnDefinitions>\n      <ColumnDefinition Width=\"*\"/> \n    </Grid.ColumnDefinitions>\n    <Entry x:Name=\"FileNameLabel\" Text=\"{Binding FileName, Mode=TwoWay}\" \n        BackgroundColor=\"Silver\" \n        Grid.Row=\"0\"\n        Grid.Column=\"0\">\n     <Entry.Behaviors> \n    <beh:LowercaseEntryBehaviour/> \n    </Entry.Behaviors>\n  </Entry>\n    <Editor x:Name=\"ContentsEditor\" Text=\"{Binding Contents, Mode=TwoWay}\"\n        BackgroundColor=\"Silver\" Grid.Row=\"1\" Grid.Column=\"0\"/>\n    <Button x:Name=\"SaveFileButton\" Command=\"{Binding SaveFileCommand}\" \n        Text=\"{x:Static resx:LabelResources.SaveFileLabel}\" \n        Style=\"{StaticResource ButtonStyle}\" Grid.Row=\"2\" Grid.Column=\"0\"/>\n    <Button x:Name=\"DeleteFileButton\" Command=\"{Binding DeleteFileCommand}\"\n        Text=\"{x:Static resx:LabelResources.DeleteFileLabel}\"\n        Style=\"{StaticResource ButtonStyle}\" Grid.Row=\"3\" Grid.Column=\"0\"/>\n    </Grid>\n </ui:ExtendedContentPage.Content>\n```", "```cs\npublic class LowercaseEntryBehaviour : Behavior<Entry> \n  {\n    protected override void OnAttachedTo(Entry entry)\n     { \n       entry.TextChanged += OnEntryTextChanged; \n       base.OnAttachedTo(entry);\n     }\n    protected override void OnDetachingFrom(Entry entry)\n     {\n       entry.TextChanged -= OnEntryTextChanged;\n       base.OnDetachingFrom(entry);\n     }\n    void OnEntryTextChanged(object sender, TextChangedEventArgs args)\n      { \n         ((Entry)sender).Text = args.NewTextValue.ToLower();\n      } \n    }\n```", "```cs\npublic class EditFilePageViewModel : ViewModelBase\n  { \n    #region Private Properties\n    private readonly ISQLiteStorage _storage;\n    private ICommand _saveFileCommand;\n    private ICommand _deleteFileCommand;\n    private string _contents;\n    private string _fileName;\n    #endregion \n  }\n```", "```cs\n#region Public Properties\npublic ICommand SaveFileCommand \n  { \n    get \n      { \n        return _saveFileCommand; \n      }\n    set\n     { \n       if (value.Equals(_saveFileCommand)) \n         { \n           return;\n         }\n       _saveFileCommand = value; OnPropertyChanged(\"FileEditCommand\");\n     }\n  }\npublic ICommand DeleteFileCommand \n  { \n    get \n      {\n        return _deleteFileCommand;\n      }\n    set \n      { \n        if (value.Equals(_deleteFileCommand)) \n          { \n            return;\n          }\n        _deleteFileCommand = value; OnPropertyChanged(\"CreateFileCommand\");\n      }\n  }\npublic string Contents \n  {\n    get\n      { \n        return _contents; \n      }\n    set { if (value.Equals(_contents)) \n      { \n        return;\n      }\n     _contents = value; OnPropertyChanged(\"Contents\"); \n   }\n}\npublic string FileName \n  { \n    get \n      { \n        return _fileName; \n      }\n    set\n      { \n        if (value.Equals(_fileName)) \n          { \n            return; \n          }\n        _fileName = value; OnPropertyChanged(\"FileName\"); \n      } \n    }\n#endregion\n```", "```cs\n#region Constructors\n  public EditFilePageViewModel (INavigationService navigation, Func<Action, ICommand> commandFactory,\n     IMethods methods, ISQLiteStorage storage)\n       : base (navigation, methods)\n         { \n            _storage = storage;\n            _saveFileCommand = commandFactory(async () => \n            {\n               await _storage.InsertObject(new FileStorable()\n               {  \n                 Key = FileName, Contents = Contents }, CancellationToken.None);\n               NotifyAlert(\"File saved.\"); \n            });\n            _deleteFileCommand = commandFactory(async () =>\n             {\n                await _storage.DeleteObjectByKey<FileStorable>(FileName, CancellationToken.None);\n                await Navigation.Pop();\n              });\n          }\n#endregion\n```", "```cs\n#region Public Methods\npublic void OnDisppear()\n  {\n    FileName = string.Empty;\n    Contents = string.Empty;\n  }\nprotected override async Task LoadAsync (IDictionary<string, object> parameters)\n  {\n    if (parameters.ContainsKey(\"filename\")) \n      { \n        FileName = (parameters[\"filename\"] as string).ToLower(); \n      }\n    if (parameters.ContainsKey(\"contents\")) \n      { \n        Contents = parameters[\"contents\"] as string; \n      } \n   }\n#endregion \n }\n```", "```cs\npublic class SQLiteSetup : ISQLiteSetup \n  { \n    #region Public Properties\n    public string DatabasePath { get; set; }\n    public ISQLitePlatform Platform { get; set; }\n    #endregion\n    #region Constructors\n    public SQLiteSetup(ISQLitePlatform platform)\n      { \n        DatabasePath = Path.Combine(ApplicationData.Current.LocalFolder.Path, \n        \"mycaremanager.db3\")\n        Platform = platform; \n      }\n    #endregion \n}\n```"]