- en: '*Chapter 7*: Using IHostedService and BackgroundService'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 7 章*：使用 IHostedService 和 BackgroundService'
- en: This seventh chapter isn't really about customization; it's more about a feature
    you can use to create background services to run tasks asynchronously inside your
    application. I use this feature to regularly fetch data from a remote service
    in a small ASP.NET Core application.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这第七章并不是真的关于定制；它更多的是关于你可以用来创建后台服务以在应用程序内部异步运行任务的特性。我在一个小型的 ASP.NET Core 应用程序中定期从远程服务获取数据时使用了这个特性。
- en: 'We''ll examine the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将探讨以下主题：
- en: Introducing `IHostedService`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 `IHostedService`
- en: Introducing `BackgroundService`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 `BackgroundService`
- en: Implementing the new Worker Service projects
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现新的 Worker Service 项目
- en: 'The topics of this chapter refer to the Host layer of the ASP.NET Core architecture:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主题涉及 ASP.NET Core 架构的宿主层：
- en: '![Figure 7.1 – ASP.NET Core architecture](img/Figure_7.1_B17996.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.1 – ASP.NET Core 架构](img/Figure_7.1_B17996.jpg)'
- en: Figure 7.1 – ASP.NET Core architecture
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core application. Open your console, shell, or Bash terminal, and change to your
    working directory. Use the following command to create a new MVC application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的描述，你需要创建一个 ASP.NET Core 应用程序。打开你的控制台、shell 或 Bash 终端，切换到你的工作目录。使用以下命令创建一个新的
    MVC 应用程序：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now open the project in Visual Studio by double-clicking the project file or
    in VS Code by changing the folder to the project and typing the following command
    in the already open console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过双击项目文件或在 VS Code 中更改文件夹到项目，并在已经打开的控制台中输入以下命令来在 Visual Studio 中打开项目：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All of the code samples in this chapter can be found in the GitHub repo for
    this book: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter07).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的代码示例都可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter07).
- en: Introducing IHostedService
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 IHostedService
- en: Hosted services have been a thing since ASP.NET Core 2.0 and can be used to
    run tasks asynchronously in the background of your application. They can be used
    to fetch data periodically, do some calculations in the background, or do some
    cleanup. You can also use them to send preconfigured emails – or whatever you
    need to do in the background.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 ASP.NET Core 2.0 以来，托管服务一直是一个东西，可以用来在应用程序的后台异步运行任务。它们可以用来定期获取数据，后台进行一些计算，或者进行一些清理。你还可以使用它们来发送预配置的电子邮件——或者你需要在后台做的任何事情。
- en: 'Hosted services are basically simple classes that implement the `IHostedService`
    interface. You call them with the following code:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 托管服务基本上是实现了 `IHostedService` 接口的简单类。你可以用以下代码调用它们：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`IHostedService` needs to implement a `StartAsync()` method and a `StopAsync()`
    method. The `StartAsync()` method is the place where you implement the logic to
    execute. This method gets executed once, immediately after the application starts.
    The `StopAsync()` method, on the other hand, gets executed just before the application
    stops. This also means that to start a scheduled service, you will need to implement
    it on your own. You will need to implement a loop that executes the code regularly.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`IHostedService` 需要实现一个 `StartAsync()` 方法和一个 `StopAsync()` 方法。`StartAsync()`
    方法是执行逻辑的地方。该方法在应用程序启动后立即执行一次。另一方面，`StopAsync()` 方法在应用程序停止前执行。这也意味着要启动一个计划中的服务，你需要自己实现它。你需要实现一个循环，定期执行代码。'
- en: 'To execute a `IHostedService`, you will need to register it in the ASP.NET
    Core dependency injection container as a singleton instance:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行一个 `IHostedService`，你需要将其注册到 ASP.NET Core 依赖注入容器中作为一个单例实例：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The next sample shows you how hosted services work. It writes a log message
    to the console on start, on stop, and every 2 seconds:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了托管服务的工作原理。它在启动时、停止时以及每2秒向控制台写入一条日志消息：
- en: 'First, write the class skeleton that retrieves `ILogger` via `DependencyInjection`:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，编写一个通过 `DependencyInjection` 获取 `ILogger` 的类骨架：
- en: '[PRE4]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next step is to implement the `StopAsync` method. This method is used to
    clean up in case you need to close connections, streams, and so on:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是实现 `StopAsync` 方法。该方法用于清理，以防你需要关闭连接、流等：
- en: '[PRE5]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The actual work will be done in the `StartAsync` method:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实际工作将在 `StartAsync` 方法中完成：
- en: '[PRE6]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To test this, start the application by calling the following command in the
    console:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试这一点，请在控制台中调用以下命令来启动应用程序：
- en: '[PRE7]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Or press *F5* in Visual Studio or VS Code. This results in the following console
    output:'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者，在Visual Studio或VS Code中按*F5*。这将产生以下控制台输出：
- en: '![Figure 7.2 – A screenshot of the dotnet run output](img/Figure_7.2_B17996.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – dotnet run输出的截图](img/Figure_7.2_B17996.jpg)'
- en: Figure 7.2 – A screenshot of the dotnet run output
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – dotnet run输出的截图
- en: As you can see, the log output is written to the console every 2 seconds.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，日志输出每2秒写入控制台。
- en: In the next section, we will look at `BackgroundService`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨`BackgroundService`。
- en: Introducing BackgroundService
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍BackgroundService
- en: The `BackgroundService` class was introduced in ASP.NET Core 3.0 and is basically
    an abstract class that implements the `IHostedService` interface. It also provides
    an abstract method, called `ExecuteAsync()`, which returns a `Task`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`BackgroundService`类是在ASP.NET Core 3.0中引入的，它基本上是一个实现`IHostedService`接口的抽象类。它还提供了一个名为`ExecuteAsync()`的抽象方法，该方法返回一个`Task`。'
- en: 'If you want to reuse the hosted service from the last section, the code will
    need to be rewritten. Follow these steps to learn how:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想重用上一节中的托管服务，则需要重写代码。按照以下步骤学习如何操作：
- en: 'First, write the class skeleton that retrieves `ILogger` via `DependencyInjection`:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，编写通过`DependencyInjection`检索`ILogger`的类骨架：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The next step would be to override the `StopAsync` method:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步将是重写`StopAsync`方法：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the final step, we will override the `ExecuteAsync` method that does all
    the work:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最后一步，我们将重写`ExecuteAsync`方法，该方法执行所有工作：
- en: '[PRE10]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Even the registration is new.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 甚至注册也是新的。
- en: 'Additionally, in ASP.NET Core 3.0 and later, the `ServiceCollection` has a
    new extension method to register hosted services or a background worker:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在ASP.NET Core 3.0及以后版本中，`ServiceCollection`有一个新的扩展方法来注册托管服务或后台工作线程：
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To test this, start the application by calling the following command in the
    console:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这一点，请在控制台中调用以下命令来启动应用程序：
- en: '[PRE12]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Or press *F5* in Visual Studio or VS Code. It should show almost the same output
    as the `SampleHostedService` you created in the previous section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在Visual Studio或VS Code中按*F5*。它应该显示与您在上一节中创建的`SampleHostedService`几乎相同的输出。
- en: Next, let's take a look at Worker Service projects.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看Worker Service项目。
- en: Implementing the new Worker Service projects
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现新的Worker Service项目
- en: The **worker services** and the generic hosting in ASP.NET Core 3.0 and later
    make it pretty easy to create simple service-like applications that can do some
    stuff without the full-blown ASP.NET stack – and without a web server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core 3.0及以后版本中，**工作服务**和通用托管使得创建简单的服务类应用程序变得非常容易，这些应用程序可以做一些事情，而不需要完整的ASP.NET堆栈
    – 以及不需要Web服务器。
- en: 'You can create this project with the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令创建此项目：
- en: '[PRE13]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Basically, this creates a console application with a `Program.cs` and a `Worker.cs`
    file in it. The `Worker.cs` file contains the `Worker` class that inherits from
    the `BackgroundService` class. In ASP.NET 5.0 and earlier, the `Program.cs` file
    looks pretty familiar to what we saw in the previous versions of ASP.NET Core
    but without a `WebHostBuilder`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，这会创建一个包含`Program.cs`和`Worker.cs`文件的控制台应用程序。`Worker.cs`文件包含继承自`BackgroundService`类的`Worker`类。在ASP.NET
    5.0及更早版本中，`Program.cs`文件看起来与我们在ASP.NET Core的早期版本中看到的样子非常相似，但没有`WebHostBuilder`：
- en: '[PRE14]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In ASP.NET Core 6.0, `Program.cs` is pretty simplified in the same way as the
    minimal APIs. It looks like this:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core 6.0中，`Program.cs`与最小API一样简化了。它看起来像这样：
- en: '[PRE15]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This creates an `IHost` with dependency injection enabled. This means we can
    use dependency injection in any kind of .NET Core application, and not only in
    ASP.NET Core applications.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个启用依赖注入的`IHost`。这意味着我们可以在任何类型的.NET Core应用程序中使用依赖注入，而不仅仅是ASP.NET Core应用程序。
- en: Then the worker is added to the service collection.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将工作线程添加到服务集合中。
- en: Where is this useful? You can run this app as a Windows service or as a background
    application in a Docker container, which doesn't need an HTTP endpoint.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这有什么用？您可以将此应用程序作为Windows服务运行，或者作为Docker容器中的后台应用程序运行，该容器不需要HTTP端点。
- en: Summary
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You can now start to do some more complex things with an `IHostedService` and
    the `BackgroundService`. Be careful with background services because they all
    run in the same application; if you use too much CPU or memory, this could slow
    down your application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以使用`IHostedService`和`BackgroundService`开始做一些更复杂的事情。请注意，后台服务因为它们都在同一个应用程序中运行；如果您使用过多的CPU或内存，这可能会减慢您的应用程序。
- en: 'For bigger applications, I would suggest running such tasks in a separate application
    that is specialized for executing background tasks: a separate Docker container,
    a `BackgroundWorker` on Azure, Azure Functions, or something like that. However,
    it should be separate from the main application in that case.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更大的应用程序，我建议在一个专门用于执行后台任务的应用程序中运行此类任务：一个单独的Docker容器、Azure上的`BackgroundWorker`、Azure
    Functions或类似的东西。然而，在这种情况下，它应该与主应用程序分开。
- en: In the next chapter, we will learn about middleware, and how you can use them
    to implement special logic on the request pipeline or serve specific logic on
    different paths.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习中间件，以及如何使用它们在请求管道上实现特殊逻辑或在不同的路径上提供特定逻辑。
