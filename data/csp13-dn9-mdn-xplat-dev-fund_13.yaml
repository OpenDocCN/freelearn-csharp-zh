- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Building Websites Using ASP.NET Core
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 构建网站
- en: This chapter is about building websites with a modern HTTP architecture on the
    server side using ASP.NET Core.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于在服务器端使用现代 HTTP 架构构建网站。
- en: ASP.NET Core is a free, open-source, and cross-platform web framework developed
    by Microsoft for building modern, cloud-based, and internet-connected applications.
    It is a significant redesign of the previous ASP.NET framework, focusing on flexibility,
    modularity, and performance.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 是一个由微软开发的免费、开源和跨平台的 Web 框架，用于构建现代、基于云和互联网连接的应用程序。它是先前 ASP.NET 框架的重大重构，侧重于灵活性、模块化和性能。
- en: ASP.NET Core provides a unified programming model for building web **user interface**
    (**UI**) and web APIs, which means you can use the same framework for both server-side
    and client-side logic.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 提供了一个统一的编程模型，用于构建 Web **用户界面**（**UI**）和 Web API，这意味着您可以使用相同的框架进行服务器端和客户端逻辑。
- en: ASP.NET Core is optimized for high performance and can handle a significant
    number of requests per second. It has a lightweight, modular architecture that
    allows developers to include only the necessary components, reducing the overall
    footprint.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 是一个由微软开发的免费、开源和跨平台的 Web 框架，用于构建现代、基于云和互联网连接的应用程序。它是先前 ASP.NET 框架的重大重构，侧重于灵活性、模块化和性能。
- en: You will learn about building simple websites using the Blazor static **Server-Side
    Rendering** (**SSR**) feature introduced with ASP.NET Core 8.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您将了解如何使用 ASP.NET Core 8 中引入的 Blazor 静态 **服务器端渲染**（**SSR**）功能构建简单的网站。
- en: 'This chapter covers the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Exploring ASP.NET Core
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 ASP.NET Core
- en: History of Blazor
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor 的历史
- en: Exploring Blazor static SSR
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 Blazor 静态 SSR
- en: Using Entity Framework Core with ASP.NET Core
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Entity Framework Core 与 ASP.NET Core
- en: Exploring ASP.NET Core
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 ASP.NET Core
- en: Before we explore an example ASP.NET Core project, let’s review its architecture.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们探索示例 ASP.NET Core 项目之前，让我们回顾其架构。
- en: Architecture of ASP.NET Core
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ASP.NET Core 的架构
- en: 'The architecture of ASP.NET Core is composed of several key components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 的架构由几个关键组件组成：
- en: '**Middleware**: Middleware components are used to handle requests and responses.
    They are chained together in a pipeline, where each piece of middleware processes
    the request and passes it to the next component in the chain. In an optional online
    section for this chapter, you can learn how to customize this pipeline.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中间件**：中间件组件用于处理请求和响应。它们在管道中串联在一起，其中每个中间件处理请求并将其传递给链中的下一个组件。在本章的可选在线部分，您可以学习如何自定义此管道。'
- en: '**Routing**: The routing component is responsible for mapping incoming requests
    to appropriate endpoints and Blazor components.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路由**：路由组件负责将传入的请求映射到适当的端点和 Blazor 组件。'
- en: '**Dependency Injection (DI) container**: This is built-in and used for managing
    service object lifetimes and dependencies.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**依赖注入（DI）容器**：这是一个内置的容器，用于管理服务对象的生命周期和依赖关系。'
- en: '**Configuration**: ASP.NET Core uses a flexible configuration system that supports
    various sources like JSON files, environment variables, and command-line arguments.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置**：ASP.NET Core 使用一个灵活的配置系统，支持各种来源，如 JSON 文件、环境变量和命令行参数。'
- en: '**Logging**: The framework has a logging API that supports various logging
    providers, allowing you to capture and store log data in a consistent manner.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志记录**：框架有一个日志 API，支持各种日志提供程序，允许您以一致的方式捕获和存储日志数据。'
- en: Now we will create an empty ASP.NET Core project and explore how to enable it
    to serve simple web pages.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个空的 ASP.NET Core 项目，并探索如何使其能够服务简单的网页。
- en: Creating an empty ASP.NET Core project
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个空的 ASP.NET Core 项目
- en: We will create an ASP.NET Core project that will show a list of suppliers from
    the `Northwind` database.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 ASP.NET Core 项目，该项目将展示来自 `Northwind` 数据库的供应商列表。
- en: 'The `dotnet` tool has many project templates that do a lot of work for you,
    but it can be difficult to know which works best for a given situation, so we
    will start with the empty website project template and then add features step
    by step so that you can understand all the pieces:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet` 工具提供了许多项目模板，这些模板为您做了很多工作，但可能很难知道哪个最适合特定情况，因此我们将从空网站项目模板开始，然后逐步添加功能，以便您了解所有组件：'
- en: 'Use your preferred code editor to open the `ModernWeb` solution and then add
    a new project, as defined in the following list:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您首选的代码编辑器打开 `ModernWeb` 解决方案，然后添加一个新项目，如下列所示：
- en: '**Project template**: **ASP.NET Core Empty [C#]** / `web`. For Rider, select
    the project template named **ASP.NET Core Web Application**, and then set **Type**
    to **Empty**.'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目模板**：**ASP.NET Core Empty [C#]** / `web`。对于 Rider，选择名为**ASP.NET Core Web
    Application**的项目模板，然后将**类型**设置为**Empty**。'
- en: '**Project file and folder**: `Northwind.Web`.'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**项目文件和文件夹**：`Northwind.Web`。'
- en: '**Solution file and folder**: `ModernWeb`.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解决方案文件和文件夹**：`ModernWeb`。'
- en: For Visual Studio, leave all other options as their defaults.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Visual Studio，保留所有其他选项的默认设置。
- en: 'For example:'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如：
- en: '**Framework**: .NET 9.0 **(**Standard TermSupport)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**框架**：.NET 9.0 **(**标准术语支持**)'
- en: '**Configure for HTTPS**: Selected'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**配置 HTTPS**：已选择'
- en: '**Enable Docker**: Cleared'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启用 Docker**：已清除'
- en: '**Do not use top-level statements**: Cleared'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不使用顶层语句**：已清除'
- en: For VS Code and the `dotnet new web` command, the defaults are the options we
    want. In future projects, if you want to change from top-level statements to the
    old `Program` class style, then specify the switch `--use-program-main`.
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 VS Code 和 `dotnet new web` 命令，默认选项是我们想要的选项。在未来的项目中，如果您想从顶层语句更改为旧的 `Program`
    类样式，请指定开关 `--use-program-main`。
- en: 'Summaries of Visual Studio and `dotnet new` options when creating new projects
    can be found in the GitHub repository at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新项目时，Visual Studio 和 `dotnet new` 选项的摘要可以在以下 GitHub 仓库链接中找到：[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md)。
- en: Build the `Northwind.Web` project.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建 `Northwind.Web` 项目。
- en: 'In `Northwind.Web.csproj`, note that the project is like a class library except
    that the SDK is `Microsoft.NET.Sdk.Web`, as shown highlighted in the following
    markup:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Web.csproj` 中，注意项目类似于类库，除了 SDK 是 `Microsoft.NET.Sdk.Web`，如下所示，高亮显示的标记：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add an element to import the `System.Console` class globally and statically,
    as shown in the following markup:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个元素以全局和静态地导入 `System.Console` 类，如下所示，高亮显示的标记：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are using Visual Studio, in **Solution Explorer**, toggle **Show All
    Files**. If you are using Rider, then move the cursor over the **Solution** pane,
    and then click the “eyeball” icon.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您正在使用 Visual Studio，在 **解决方案资源管理器** 中，切换 **显示所有文件**。如果您正在使用 Rider，则将光标移至 **解决方案**
    窗格，然后单击“眼睛”图标。
- en: 'Expand the `obj` folder, expand the `Debug` folder, expand the `net9.0` folder,
    and select the `Northwind.Web.GlobalUsings.g.cs` file. Note how the implicitly
    imported namespaces include all the ones for a console app or class library, as
    well as some ASP.NET Core ones, such as `Microsoft.AspNetCore.Builder`, as shown
    in the following code:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开文件夹 `obj`，展开文件夹 `Debug`，展开文件夹 `net9.0`，并选择文件 `Northwind.Web.GlobalUsings.g.cs`。注意隐式导入的命名空间包括控制台应用程序或类库的所有命名空间，以及一些
    ASP.NET Core 命名空间，例如 `Microsoft.AspNetCore.Builder`，如下所示，代码如下：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Close the file and collapse the `obj` folder.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭文件并折叠 `obj` 文件夹。
- en: 'In the `Northwind.Web` project/folder, expand the folder named `Properties`,
    open the file named `launchSettings.json`, and note the profiles named `http`
    and `https`. They have randomly assigned port numbers that you will change in
    the next step so, for now, just note their locations, as shown highlighted in
    the following configuration:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Web` 项目/文件夹中，展开名为 `Properties` 的文件夹，打开名为 `launchSettings.json`
    的文件，并注意名为 `http` 和 `https` 的配置文件。它们具有随机分配的端口号，您将在下一步中更改，因此现在只需注意它们的位置，如下所示，高亮显示的配置：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `launchSettings.json` file is only for use during development. It has no
    effect on the build process. It is not deployed with the compiled website project,
    so it has no effect on the production runtime. It is only processed by code editors
    like Visual Studio and Rider to set up environment variables and define URLs for
    the web server to listen on when the project is started by a code editor.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`launchSettings.json` 文件仅在开发期间使用。它对构建过程没有影响。它不会与编译的网站项目一起部署，因此对生产运行时没有影响。它仅由代码编辑器（如
    Visual Studio 和 Rider）处理，以设置环境变量并定义当项目由代码编辑器启动时，网络服务器要监听的 URL。'
- en: 'For the `https` profile, for its `applicationUrl`, change the assigned port
    numbers for `http` to `5130` and `https` to `5131`, and swap the order so `http`
    is first in the list and will be used by default, as shown highlighted in the
    following markup:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `https` 配置文件，将其 `applicationUrl` 中分配的 `http` 端口号更改为 `5130`，`https` 端口号更改为
    `5131`，并交换顺序，使 `http` 在列表中排在第一位，默认使用，如下所示，高亮显示的标记：
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `http` and `https` launch profiles have a `commandName` of `Project`, meaning
    they use the web server configured in the project to host the website, which is
    Kestrel by default. There is also a profile and settings for **IIS**, which is
    a Windows-only web server. In this book, we will only use Kestrel as the web server
    since it is cross-platform. To declutter your `launchSettings.json` file, you
    could even delete the `iisSettings` and `IIS Express` sections.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`http` 和 `https` 启动配置文件具有 `commandName` 为 `Project`，这意味着它们使用项目中配置的 web 服务器来托管网站，默认情况下是
    Kestrel。还有一个针对 **IIS** 的配置文件和设置，这是一个仅适用于 Windows 的 web 服务器。在这本书中，我们将只使用 Kestrel
    作为 web 服务器，因为它支持跨平台。为了清理你的 `launchSettings.json` 文件，你甚至可以删除 `iisSettings` 和 `IIS
    Express` 部分。'
- en: Save the changes to `launchSettings.json` and close the file.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将更改保存到 `launchSettings.json` 并关闭文件。
- en: 'In `Program.cs`, note the following:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，请注意以下内容：
- en: An ASP.NET Core project is like a top-level console app, with a hidden `<Main>$`
    method as its entry point that has an argument passed using the name `args`.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 ASP.NET Core 项目就像一个顶级控制台应用程序，它有一个隐藏的 `<Main>$` 方法作为其入口点，该入口点通过名称 `args` 传递参数。
- en: It calls `WebApplication.CreateBuilder`, which creates a host for the website
    using defaults for a web host that is then built.
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它调用 `WebApplication.CreateBuilder`，这使用默认的 web 服务器创建网站宿主，然后构建。
- en: 'The website will respond to all HTTP `GET` requests to the root path of the
    website with this plain text: `Hello World!`.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网站将对所有指向网站根路径的 HTTP `GET` 请求做出响应，显示以下纯文本：`Hello World!`。
- en: The call to the `Run` method is a blocking call, so the hidden `<Main>$` method
    does not return until the web server stops running.
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `Run` 方法的调用是一个阻塞调用，因此隐藏的 `<Main>$` 方法不会在 web 服务器停止运行之前返回。
- en: 'The contents of `Program.cs` are shown in the following code:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`Program.cs` 的内容如下所示：'
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After the existing call to `MapGet`, add two calls to define an endpoint that
    returns an anonymous C# object as JSON, and an endpoint that returns a web page,
    as shown in the following code:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现有的 `MapGet` 调用之后，添加两个调用以定义一个返回匿名 C# 对象的 JSON 的端点，以及一个返回网页的端点，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As well as `Json` and `Content`, the `Results` class has many more methods,
    like `BadRequest`, `Bytes`, `Created`, `File`, `NoContent`, `NotFound`, `Ok`,
    `Problem`, `Redirect`, and so on. You can learn more at the following link: [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `Json` 和 `Content`，`Results` 类还有许多其他方法，如 `BadRequest`、`Bytes`、`Created`、`File`、`NoContent`、`NotFound`、`Ok`、`Problem`、`Redirect`
    等。你可以在以下链接中了解更多信息：[https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.http.results)。
- en: 'At the bottom of `Program.cs`, add a comment to explain the `Run` method and
    a statement to write a message to the console after `Run` and, therefore, after
    the web server has stopped, as shown highlighted in the following code:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 的底部，添加一个注释来解释 `Run` 方法，并在 `Run` 之后、因此是在 web 服务器停止后，向控制台写入一条消息，如下面的代码所示（高亮显示）：
- en: '[PRE7]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Testing and securing the website
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和保障网站安全
- en: We will now test the functionality of the ASP.NET Core Empty website project.
    We will also enable the encryption of all traffic between the browser and web
    server for privacy by switching from HTTP to HTTPS. HTTPS is the secure encrypted
    version of HTTP.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将测试 ASP.NET Core 空项目网站的功能。我们还将通过从 HTTP 切换到 HTTPS 来启用浏览器和 web 服务器之间所有流量的加密，以保障隐私。HTTPS
    是 HTTP 的安全加密版本。
- en: 'For Visual Studio:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Visual Studio：
- en: In the toolbar, make sure that the **https** profile is selected (rather than
    **http**, **IIS Express**, or **WSL**), and then change **Web Browser** to **Google
    Chrome**, as shown in *Figure 13.1*:![](img/B22322_13_01.png)
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工具栏中，确保选择了 **https** 配置文件（而不是 **http**、**IIS Express** 或 **WSL**），然后将 **Web
    Browser** 更改为 **Google Chrome**，如图 *13.1* 所示：![](img/B22322_13_01.png)
- en: 'Figure 13.1: Selecting the https profile with its Kestrel web server in Visual
    Studio'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 13.1：在 Visual Studio 中选择具有 Kestrel web 服务器的 https 配置文件
- en: Navigate to **Debug** | **Start Without Debugging…**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **调试** | **不调试启动…**。
- en: In Windows, if you see a **Windows Security Alert** saying **Windows Defender
    Firewall has blocked some features of this app**, then click the **Allow access**
    button.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 中，如果你看到一个 **Windows 安全警报**，显示 **Windows Defender 防火墙已阻止此应用程序的一些功能**，那么请点击
    **允许访问** 按钮。
- en: The first time you start a secure website, you might be notified that your project
    is configured to use SSL, and to avoid warnings in the browser, you can choose
    to trust the self-signed certificate that ASP.NET Core has generated. Click **Yes**.
    When you see the **Security Warning** dialog box, click **Yes** again.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次启动安全网站时，您可能会收到通知，表示您的项目配置为使用 SSL，为了避免浏览器中的警告，您可以选择信任 ASP.NET Core 生成的自签名证书。点击
    **是**。当您看到 **安全警告** 对话框时，再次点击 **是**。
- en: 'For VS Code, enter the command to start the project with the `https` profile,
    like this: `dotnet run --launch-profile https`. Then start Chrome.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 VS Code，输入启动具有 `https` 配置文件的项目命令，如下所示：`dotnet run --launch-profile https`。然后启动
    Chrome。
- en: 'For Rider:'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Rider：
- en: Navigate to **Run** | **Edit Configurations…**.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **运行** | **编辑配置…**。
- en: 'In the **Run/Debug Configurations** dialog box, select **Northwind.Web: https**.'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 **运行/调试配置** 对话框中，选择 **Northwind.Web: https**。'
- en: At the bottom of the dialog box, to the right of the **After launch** check
    box, select **Chrome** and then click **OK**.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在对话框底部，**启动后** 复选框的右侧，选择 **Chrome** 然后点击 **确定**。
- en: 'Navigate to **Run** | **Run ‘Northwind.Web: https’**.'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '导航到 **运行** | **运行‘Northwind.Web: https’**。'
- en: 'In either Visual Studio’s command prompt window or VS Code’s terminal, note
    the following, as shown in the following output:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 的命令提示符窗口或 VS Code 的终端中，注意以下内容，如图所示输出：
- en: The web server has started listening on the ports we assigned for HTTP and HTTPS.
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务器已经开始监听我们分配的 HTTP 和 HTTPS 端口。
- en: You can press *Ctrl* +*C* to shut down the Kestrel web server.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以按 *Ctrl* + *C* 关闭 Kestrel 网络服务器。
- en: The hosting environment is `Development`.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 托管环境是 `开发`。
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Visual Studio will also start your chosen browser automatically and navigate
    to the first URL. If you are using VS Code, you will have to start Chrome manually.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 还会自动启动您选择的浏览器并导航到第一个 URL。如果您使用 VS Code，您将需要手动启动 Chrome。
- en: Leave the Kestrel web server running in the command prompt or terminal.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中保持 Kestrel 网络服务器运行。
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，显示 **开发者工具**，并点击 **网络** 选项卡。
- en: 'Request the home page for the website project:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求网站项目的首页：
- en: If you are using Visual Studio and Chrome launched automatically with the URL
    already entered for you, then click the **Reload this page** button or press *F5*.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用 Visual Studio 并且 Chrome 自动启动并为您输入了 URL，那么请点击 **重新加载此页面** 按钮或按 *F5*。
- en: If you are using VS Code and the command prompt or terminal, then in the Chrome
    address bar, manually enter the address `http://localhost:5130/`.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用 VS Code 和命令提示符或终端，那么在 Chrome 地址栏中，手动输入地址 `http://localhost:5130/`。
- en: 'In the **Network** tab, click **localhost**, and note the response is **Hello
    World!** in plain text from the cross-platform Kestrel web server, as shown in
    *Figure 13.2*:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **网络** 选项卡中，点击 **localhost**，并注意来自跨平台 Kestrel 网络服务器的响应是纯文本中的 **Hello World!**，如图
    *13.2* 所示：
- en: '![](img/B22322_13_02.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_02.png)'
- en: 'Figure 13.2: Plain text response from the website project'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.2：网站项目的纯文本响应
- en: 'Browsers like Chrome might also request a `favicon.ico` file to show in their
    browser window or tab, but this file does not exist in our project, so it shows
    as a `404 Not Found` error. If this annoys you, then you can generate a `favicon.ico`
    file for free at the following link and put it in the project folder: [https://favicon.io/](https://favicon.io/).
    On a web page, you can also specify one in the meta tags, for example, a blank
    one using Base64 encoding, as shown in the following markup:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 像Chrome这样的浏览器可能还会请求一个 `favicon.ico` 文件以在浏览器窗口或标签页中显示，但这个文件在我们的项目中不存在，因此显示为 `404
    Not Found` 错误。如果您觉得这很烦人，那么您可以在以下链接免费生成一个 `favicon.ico` 文件并将其放入项目文件夹：[https://favicon.io/](https://favicon.io/)。在网页中，您也可以在元标签中指定一个，例如，使用
    Base64 编码的一个空白标签，如下所示：
- en: '`<link rel="icon" href="data:;base64,iVBORw0KGgo=">`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`<link rel="icon" href="data:;base64,iVBORw0KGgo=">`'
- en: Enter the address `https://localhost:5131/` and note that if you are not using
    Visual Studio or if you clicked **No** when prompted to trust the SSL certificate,
    then the response is a privacy error. You will see this error when you have not
    configured a certificate that the browser can trust to encrypt and decrypt HTTPS
    traffic (if you do not see this error, it is because you have already configured
    a certificate). In a production environment, you would want to pay a company such
    as Verisign for an SSL certificate because they provide liability protection and
    technical support. During development, you can tell your OS to trust a temporary
    development certificate provided by ASP.NET Core.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址 `https://localhost:5131/` 并注意，如果你没有使用 Visual Studio 或者当被提示信任 SSL 证书时点击了
    **否**，那么响应将是一个隐私错误。当你没有配置浏览器可以信任的证书来加密和解密 HTTPS 流量时，你会看到这个错误（如果你没有看到这个错误，那是因为你已经配置了证书）。在生产环境中，你可能希望支付像
    Verisign 这样的公司以获取 SSL 证书，因为它们提供责任保护和技术支持。在开发过程中，你可以告诉你的操作系统信任 ASP.NET Core 提供的临时开发证书。
- en: Visual Studio will also start your chosen browser automatically and navigate
    to the first URL. If you are using VS Code, you will have to start Chrome manually.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 也会自动启动你选择的浏览器并导航到第一个 URL。如果你使用 VS Code，你必须手动启动 Chrome。
- en: Enter the address `https://localhost:5131/data` and note that some JSON is returned.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址 `https://localhost:5131/data` 并注意返回了一些 JSON。
- en: Enter the address `https://localhost:5131/welcome` and note that a web page
    is returned.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址 `https://localhost:5131/welcome` 并注意返回了一个网页。
- en: 'At the command prompt or terminal, press *Ctrl*+ *C* to shut down the web server,
    and note the message that is written, as shown highlighted in the following output:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，按 *Ctrl*+ *C* 关闭 web 服务器，并注意输出的消息，如下所示：
- en: '[PRE9]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you need to trust a local self-signed SSL certificate, then at the command
    line or terminal, enter the following command: `dotnet dev-certs https --trust`.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你需要信任一个本地自签名 SSL 证书，那么在命令行或终端中，输入以下命令：`dotnet dev-certs https --trust`。
- en: Note the message **Trusting the HTTPS development certificate was requested**.
    You might be prompted to enter your password, and a valid HTTPS certificate may
    already be present.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意消息 **请求信任 HTTPS 开发证书**。你可能需要输入密码，并且可能已经存在一个有效的 HTTPS 证书。
- en: Enabling stronger security and redirecting to a secure connection
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用更强的安全性和重定向到安全连接
- en: It is good practice to enable stricter security and automatically redirect requests
    for HTTP to HTTPS.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 启用更严格的安全性和自动将 HTTP 请求重定向到 HTTPS 是一种良好的实践。
- en: '**Good Practice**: An optional but recommended security enhancement is **HTTP
    Strict Transport Security** (**HSTS**), which you should always enable. If a website
    specifies it and a browser supports it, then it forces all communication over
    HTTPS and prevents the visitor from using untrusted or invalid certificates.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：一个可选但推荐的安全增强是 **HTTP 严格传输安全**（**HSTS**），你应该始终启用。如果一个网站指定了它并且浏览器支持它，那么它将强制所有通信都通过
    HTTPS，并防止访问者使用不受信任或无效的证书。'
- en: 'Let’s do that now:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即这样做：
- en: 'In `Program.cs`, after the statement that builds the `app`, add a region and
    an `if` statement to enable HSTS when *not* in development, and redirect HTTP
    requests to HTTPS, as shown highlighted in the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在构建 `app` 的语句之后，添加一个区域和一个 `if` 语句，以在 **非开发** 时启用 HSTS，并将 HTTP
    请求重定向到 HTTPS，如下所示：
- en: '[PRE10]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Start the `Northwind.Web` website project without debugging using the `https`
    launch profile.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置文件，不进行调试启动 `Northwind.Web` 网站项目。
- en: If Chrome is still running, close and restart it.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 Chrome 仍在运行，请关闭并重新启动它。
- en: In Chrome, show **Developer Tools**, and click the **Network** tab.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，显示 **开发者工具**，并点击 **网络** 选项卡。
- en: 'Enter the address `http://localhost:5130/`, and note how the server responds
    with a **307 Temporary Redirect** to `https://localhost:5131/`, and that the certificate
    is valid and trusted, as shown in *Figure 13.3*:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入地址 `http://localhost:5130/`，注意服务器如何响应一个 **307 临时重定向** 到 `https://localhost:5131/`，以及证书是有效且受信任的，如
    *图 13.3* 所示：
- en: '![](img/B22322_13_03.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_03.png)'
- en: 'Figure 13.3: The connection is now secured using a valid certificate and a
    307 redirect'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.3：现在使用有效的证书和 307 重定向来确保连接安全
- en: Close Chrome and shut down the web server.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: '**Good Practice**: Remember to shut down the Kestrel web server by switching
    to the command prompt or terminal and pressing *Ctrl* + *C* whenever you have
    finished testing a website.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：记住，每次完成网站测试后，通过切换到命令提示符或终端并按*Ctrl* + *C*来关闭Kestrel web服务器。'
- en: Controlling the hosting environment
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制托管环境
- en: 'In ASP.NET Core 5 and earlier, the project template sets a rule to say that
    while in development mode, any unhandled exceptions will be shown in the browser
    window for the developer to see the details of the exception, as shown in the
    following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core 5及更早版本中，项目模板设置了一个规则，即在开发模式下，任何未处理的异常都会在浏览器窗口中显示，以便开发者可以看到异常的详细信息，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With ASP.NET Core 6 and later, this code is configured by default by the `WebApplication`
    builder and therefore executed automatically so it is no longer needed in the
    project template `Program.cs` source code.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core 6及更高版本中，此代码默认由`WebApplication`构建器配置，因此会自动执行，因此不再需要在项目模板`Program.cs`源代码中包含它。
- en: How does ASP.NET Core know when we are running in development mode so that the
    `IsDevelopment` method returns `true`, and this extra code executes to set up
    the developer exception page? Let’s find out.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core是如何知道我们在开发模式下运行的，以便`IsDevelopment`方法返回`true`，并且执行额外的代码来设置开发者异常页面？让我们来了解一下。
- en: ASP.NET Core can read from settings files and environment variables to determine
    what hosting environment to use, for example, `DOTNET_ENVIRONMENT` or `ASPNETCORE_ENVIRONMENT`.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core可以从设置文件和环境变量中读取，以确定要使用哪种托管环境，例如`DOTNET_ENVIRONMENT`或`ASPNETCORE_ENVIRONMENT`。
- en: 'You can override these settings during local development:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在本地开发期间覆盖这些设置：
- en: 'In the `Northwind.Web` folder, expand the folder named `Properties`, and open
    the file named `launchSettings.json`. Note that the `https` launch profile sets
    the environment variable for the hosting environment to `Development`, as shown
    highlighted in the following configuration:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`文件夹中，展开名为`Properties`的文件夹，并打开名为`launchSettings.json`的文件。请注意，`https`启动配置文件将托管环境的环境变量设置为`Development`，如下面的配置中突出显示所示：
- en: '[PRE12]'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Change the `ASPNETCORE_ENVIRONMENT` environment variable from `Development`
    to `Production`.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`ASPNETCORE_ENVIRONMENT`环境变量从`Development`更改为`Production`。
- en: If you are using Visual Studio, optionally, change `launchBrowser` to `false`
    to prevent Visual Studio from automatically launching a browser. This setting
    is ignored when you start a website project using `dotnet run` or Rider.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio，可选地，将`launchBrowser`更改为`false`以防止Visual Studio自动启动浏览器。当你使用`dotnet
    run`或Rider启动网站项目时，此设置将被忽略。
- en: 'In `Program.cs`, modify the first `MapGet` statement to return the name of
    the environment instead of `Hello World`, as shown highlighted in the following
    code:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，修改第一个`MapGet`语句，使其返回环境名称而不是`Hello World`，如下面的代码中突出显示所示：
- en: '[PRE13]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Start the website project using the `https` launch profile and note that the
    hosting environment is `Production`, as shown in the following output:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`启动配置文件启动网站项目，并注意托管环境是`Production`，如下面的输出所示：
- en: '[PRE14]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In Chrome, note that the plain text is `Environment is Production`.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Chrome中，请注意纯文本是`Environment is Production`。
- en: Shut down the web server.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭web服务器。
- en: In `launchSettings.json`, change the environment variable back to `Development`,
    and save the changes to the file.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`launchSettings.json`中，将环境变量改回`Development`，并保存更改到文件。
- en: '**More Information**: You can learn more about environments at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于环境的信息：[https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/environments)。'
- en: Enabling a website to serve static content
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用网站以服务静态内容
- en: A website that only ever returns a single plain text message isn’t very useful!
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 只返回单个纯文本消息的网站并不很有用！
- en: At a minimum, it ought to return static HTML pages, CSS that the web pages will
    use for styling, and any other static resources, such as images and videos.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 至少，它应该返回静态HTML页面、网页将用于样式的CSS以及任何其他静态资源，例如图片和视频。
- en: By convention, these files should be stored in a directory named `wwwroot` to
    keep them separate from the dynamically executing parts of your website project.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，这些文件应该存储在名为`wwwroot`的目录中，以将它们与网站项目的动态执行部分分开。
- en: Creating a folder for static files and a web page
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建静态文件和网页的文件夹
- en: 'You will now create a folder for your static website resources and a basic
    index page that uses Bootstrap for styling:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在将创建一个用于您的静态网站资源的文件夹和一个使用 Bootstrap 进行样式的基本索引页面：
- en: In the `Northwind.Web` project/folder, create a folder named `wwwroot`. Note
    that Visual Studio recognizes it as a special type of folder by giving it a globe
    icon, ![](img/global_icon.png).
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`项目/文件夹中，创建一个名为`wwwroot`的文件夹。请注意，Visual Studio 通过为其提供一个地球图标来识别它作为一个特殊类型的文件夹，![](img/global_icon.png)。
- en: In the `wwwroot` folder, add a new file named `index.html`. (In Visual Studio,
    the project item template is named **HTML Page**.)
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot`文件夹中，添加一个名为`index.html`的新文件。（在Visual Studio中，项目项模板的名称为**HTML页面**。）
- en: 'In `index.html`, modify its markup to link to CDN-hosted Bootstrap for styling,
    and use modern good practices such as setting the viewport, as shown in the following
    markup:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`index.html`中，修改其标记以链接到 CDN 托管的 Bootstrap 进行样式设置，并使用现代的良好实践，例如设置视口，如下面的标记所示：
- en: '[PRE15]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '**Good Practice**: Check out the latest version at the following link: [https://getbootstrap.com/docs/versions/](https://getbootstrap.com/docs/versions/).
    Click the latest version to go to its **Get started with Bootstrap** page. Scroll
    down the page to step 2 to find the latest `<link>` element (and later in this
    chapter, the `<script>` element), which you can then copy and paste.'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：查看最新版本，请访问以下链接：[https://getbootstrap.com/docs/versions/](https://getbootstrap.com/docs/versions/)。点击最新版本进入其**Bootstrap
    入门**页面。滚动到页面底部找到第2步，找到最新的`<link>`元素（以及在本章后面的`<script>`元素），然后您可以复制并粘贴。'
- en: 'Bootstrap is the world’s most popular framework for building responsive, mobile-first
    websites. You can read an online-only section introducing some of Bootstrap’s
    most important features at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是构建响应式、移动优先网站的全球最受欢迎的框架。您可以在以下链接中阅读一个仅在线部分，介绍 Bootstrap 的一些最重要的功能：[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md)。
- en: 'In the `wwwroot` folder, add a file named `site.css` and modify its content,
    as shown in the following markup:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot`文件夹中，添加一个名为`site.css`的文件，并修改其内容，如下面的标记所示：
- en: '[PRE16]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `wwwroot` folder, add a file named `categories.jpeg`. You can download
    it from the following link: [https://github.com/markjprice/cs13net9/blob/main/code/images/Categories/categories.jpeg](https://github.com/markjprice/cs13net9/blob/main/code/images/Categories/categories.jpeg).'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot`文件夹中，添加一个名为`categories.jpeg`的文件。您可以从以下链接下载它：[https://github.com/markjprice/cs13net9/blob/main/code/images/Categories/categories.jpeg](https://github.com/markjprice/cs13net9/blob/main/code/images/Categories/categories.jpeg)。
- en: 'In the `wwwroot` folder, add a file named `about.html` and modify its content,
    as shown in the following markup:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`wwwroot`文件夹中，添加一个名为`about.html`的文件，并修改其内容，如下面的标记所示：
- en: '[PRE17]'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Enabling static and default files
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用静态和默认文件
- en: If you were to start the website now and enter `http://localhost:5130/index.html`
    or `https://localhost:5131/index.html` in the address box, the website would return
    a `404 Not Found` error saying no web page was found. To enable the website to
    return static files such as `index.html`, we must explicitly configure that feature.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在启动网站并在地址框中输入`http://localhost:5130/index.html`或`https://localhost:5131/index.html`，网站将返回一个`404
    Not Found`错误，表示未找到网页。为了使网站能够返回静态文件，例如`index.html`，我们必须明确配置该功能。
- en: Even if we enable static files stored in `wwwroot`, if you were to start the
    website and enter `http://localhost:5130/` or `https://localhost:5131/` in the
    address box, the website would still return a `404 Not Found` error because the
    web server does not know what to return by default if no named file is requested.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您启用了存储在`wwwroot`中的静态文件，如果您现在启动网站并在地址框中输入`http://localhost:5130/`或`https://localhost:5131/`，网站仍然会返回一个`404
    Not Found`错误，因为如果未请求任何命名文件，则默认情况下，Web 服务器不知道要返回什么。
- en: 'You will now enable static files, explicitly configure default files like `index.html`,
    and change the URL path registered that returns the plain text response:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在将启用静态文件，明确配置默认文件如`index.html`，并更改返回纯文本响应的注册 URL 路径：
- en: 'In `Program.cs`, add statements after enabling HTTPS redirection to enable
    static files and default files. Also, modify the statement that maps a `GET` request
    to return the plain text response containing the environment name to only respond
    to the URL path `/env`, as shown highlighted in the following code:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在启用 HTTPS 重定向后添加语句以启用静态文件和默认文件。同时，修改将 `GET` 请求映射到包含环境名称的纯文本响应的语句，使其仅对
    URL 路径 `/env` 响应，如下面代码中突出显示所示：
- en: '[PRE18]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'ASP.NET Core 9 introduced the `MapStaticAssets` method that automatically compresses
    the static files, which reduces bandwidth requirements. For ASP.NET Core 8 and
    earlier, you must call the `UseStaticFiles` method instead. You can learn more
    at the following link: [https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0#optimizing-static-web-asset-delivery](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0#optimizing-static-web-asset-delivery).'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ASP.NET Core 9 引入了自动压缩静态文件的 `MapStaticAssets` 方法，这减少了带宽需求。对于 ASP.NET Core 8
    及更早版本，你必须调用 `UseStaticFiles` 方法。你可以在以下链接中了解更多信息：[https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0#optimizing-static-web-asset-delivery](https://learn.microsoft.com/en-us/aspnet/core/release-notes/aspnetcore-9.0#optimizing-static-web-asset-delivery)。
- en: '**Warning!** The call to `UseDefaultFiles` must come before the call to `MapStaticAssets`
    or `UseStaticFiles`, or it will not work! You will learn more about the ordering
    of middleware and endpoint routing in an online section linked at the end of this
    chapter.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 在调用 `MapStaticAssets` 或 `UseStaticFiles` 之前，必须先调用 `UseDefaultFiles`，否则将不会生效！你可以在本章末尾链接的在线部分了解更多关于中间件和端点路由的顺序。'
- en: Start the website.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动网站。
- en: Start Chrome and show **Developer Tools**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Chrome 并显示 **开发者工具**。
- en: In Chrome, enter `http://localhost:5130/`. Note that you are redirected to the
    HTTPS address on port `5131`, and the `index.html` file is now returned over that
    secure connection because it is one of the possible default files for this website
    and it was the first match found in the `wwwroot` folder.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中输入 `http://localhost:5130/`。注意你被重定向到端口 `5131` 上的 HTTPS 地址，并且 `index.html`
    文件现在通过该安全连接返回，因为它是此网站的可能默认文件之一，并且是在 `wwwroot` 文件夹中找到的第一个匹配项。
- en: '**Warning!** If you still see the environment name as plain text, make sure
    that you mapped the relative path `/env` to that endpoint instead of just `/`,
    otherwise that will override the default request for the `index.html` file.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 如果你仍然看到环境名称为纯文本，请确保你将相对路径 `/env` 映射到该端点，而不是仅仅映射到 `/`，否则这将覆盖对 `index.html`
    文件的默认请求。'
- en: In Chrome, enter `http://localhost:5131/about.html` and note that the web page
    is returned, and it requests the `site.css` file, which applies additional styles.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中输入 `http://localhost:5131/about.html` 并注意网页被返回，并且它请求 `site.css` 文件，该文件应用了额外的样式。
- en: In **Developer Tools**, note the request for the Bootstrap stylesheet.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **开发者工具** 中，注意对 Bootstrap 样式表的请求。
- en: In Chrome, enter `http://localhost:5130/env` and note that it returns the plain
    text environment name as before.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中输入 `http://localhost:5130/env` 并注意它返回与之前相同的纯文本环境名称。
- en: Close Chrome and shut down the web server.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: Understanding MapStaticAssets
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 MapStaticAssets
- en: Introduced in .NET 9, `MapStaticAssets` works by integrating build and publish-time
    processes to gather data about all the static resources in an application. This
    data is then used by the runtime library to serve these files efficiently to the
    browser.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 9 中引入的 `MapStaticAssets` 通过整合构建和发布时过程来收集应用程序中所有静态资源的数据。然后，运行时库使用这些数据高效地向浏览器提供这些文件。
- en: While `MapStaticAssets` can often directly replace `UseStaticFiles`, it is specifically
    optimized for serving assets known to the app at build and publish time. For assets
    served from other locations, such as disk or embedded resources, `UseStaticFiles`
    should still be used.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `MapStaticAssets` 通常可以直接替换 `UseStaticFiles`，但它专门针对在构建和发布时已知的应用程序资源进行优化。对于从其他位置（如磁盘或嵌入式资源）提供的资源，仍然应使用
    `UseStaticFiles`。
- en: '`MapStaticAssets` provides the following benefits compared to `UseStaticFiles`:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `UseStaticFiles` 相比，`MapStaticAssets` 提供以下好处：
- en: 'Build time compression for all the assets in the app:'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对应用中所有资源进行构建时压缩：
- en: '`gzip` during development and `gzip` + `brotli` during publishing.'
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发期间使用 `gzip`，在发布期间使用 `gzip` + `brotli`。
- en: All assets are compressed with the goal of reducing the size of the assets to
    the minimum.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有资源都经过压缩，目的是将资源的大小减少到最小。
- en: The ETags for each resource are the Base64-encoded string of the SHA-256 hash
    of the content. This ensures that the browser only redownloads a file if its contents
    have changed.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个资源的ETags是内容SHA-256哈希的Base64编码字符串。这确保了浏览器只有在文件内容发生变化时才会重新下载文件。
- en: 'As an example, *Table 13.1* shows the original and compressed sizes using the
    Fluent UI Blazor components library, with a total of 478 KB uncompressed to 84
    KB compressed:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*表13.1*展示了使用Fluent UI Blazor组件库的原始和压缩大小，总共478 KB未压缩到84 KB压缩。
- en: '| **File** | **Original** | **Compressed** | **% Reduction** |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| **文件** | **原始** | **压缩** | **% 减少** |'
- en: '| `fluent.js` | 384 | 73 | 80.99% |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `fluent.js` | 384 | 73 | 80.99% |'
- en: '| `fluent.css` | 94 | 11 | 88.30% |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `fluent.css` | 94 | 11 | 88.30% |'
- en: '| Total | 478 | 84 | 82.43% |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 总计 | 478 | 84 | 82.43% |'
- en: 'Table 13.1: How MapStaticAssets compresses Fluent UI Blazor components'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.1：MapStaticAssets如何压缩Fluent UI Blazor组件
- en: If all web pages are static (that is, they only get changed manually by a web
    editor), then our website programming work is complete. But almost all websites
    need dynamic content, which means a web page that is generated at runtime by executing
    code.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有网页都是静态的（即，它们只能通过网页编辑器手动更改），那么我们的网站编程工作就完成了。但几乎所有的网站都需要动态内容，这意味着网页是在运行时通过执行代码生成的。
- en: The easiest way to do that is to use a feature of ASP.NET Core named Blazor
    staticSSR. But before that, let’s understand why you might see additional requests
    in tools like **Developer Tools** that you don’t expect.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的最简单方法是使用ASP.NET Core的一个名为Blazor staticSSR的功能。但在那之前，让我们了解一下为什么您可能会在**开发者工具**等工具中看到额外的请求，而这些请求并不是您预期的。
- en: Understanding browser requests during development
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发期间理解浏览器请求
- en: 'In **Developer Tools**, we can see all the requests made by the browser. Some
    will be requests that you expect, for example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在**开发者工具**中，我们可以看到浏览器发出的所有请求。其中一些将是您预期的请求，例如：
- en: '`localhost`: This is the request for the home page in the website project.
    For our current project, the address will be `http://localhost:5130/` or `https://localhost:5131/`.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`localhost`: 这是网站项目中主页的请求。对于我们的当前项目，地址将是`http://localhost:5130/`或`https://localhost:5131/`。'
- en: '`bootstrap.min.css`: This is the request for Bootstrap’s styles. We added a
    reference to this on the home page, so the browser then made this request for
    the stylesheet.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bootstrap.min.css`: 这是Bootstrap样式的请求。我们在主页上添加了对这个的引用，因此浏览器随后请求了这个样式表。'
- en: 'Some of the requests are made only during development and are determined by
    the code editor that you use. You can usually ignore them if you see them in **Developer
    Tools**. For example:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一些请求仅在开发期间进行，并由您使用的代码编辑器决定。如果您在**开发者工具**中看到它们，通常可以忽略它们。例如：
- en: '`browserLink` and `aspnetcore-browser-refresh.js`: These are requests made
    by Visual Studio to connect the browser to Visual Studio for debugging and Hot
    Reload. For example, `https://localhost:5131/_vs/browserLink` and `https://localhost:5131/_framework/aspnetcore-browser-refresh.js`.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`browserLink`和`aspnetcore-browser-refresh.js`：这些是Visual Studio为连接浏览器进行调试和热重载而发出的请求。例如，`https://localhost:5131/_vs/browserLink`和`https://localhost:5131/_framework/aspnetcore-browser-refresh.js`。'
- en: '`negotiate?requestUrl`, `connect?transport`, `abort?Transport`, and so on:
    These are additional requests used to connect Visual Studio with the browser.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`negotiate?requestUrl`、`connect?transport`、`abort?Transport`等：这些都是用于将Visual
    Studio与浏览器连接的额外请求。'
- en: '`Northwind.Web/`: This is a secure WebSockets request related to SignalR used
    to connect Visual Studio with the browser: `wss://localhost:44396/Northwind.Web/`.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Northwind.Web/`: 这是一个与SignalR相关的安全WebSockets请求，用于将Visual Studio与浏览器连接：`wss://localhost:44396/Northwind.Web/`。'
- en: Now that you have seen how to set up a basic website with support for static
    files like HTML web pages and CSS, let’s make it more interesting by adding support
    for dynamically generated static web pages (once the web page arrives at the browser
    client, it is static).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经看到了如何设置一个支持静态文件（如HTML网页和CSS）的基本网站，让我们通过添加对动态生成静态网页的支持（一旦网页到达浏览器客户端，它就是静态的）来让它更有趣。
- en: ASP.NET Core has multiple technologies for dynamically generating static web
    pages, including Razor Pages and **Model View Controller** (**MVC**) Razor views.
    The most modern technology for dynamic web pages is Blazor static SSR pages. But
    let’s first review Blazor and why it was created.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core有多个技术用于动态生成静态网页，包括Razor Pages和**模型-视图-控制器**（**MVC**）Razor视图。最现代的动态网页技术是Blazor静态SSR页面。但让我们首先回顾Blazor及其创建的原因。
- en: History of Blazor
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Blazor的历史
- en: Blazor lets you build interactive web UI components using C# instead of JavaScript.
    Blazor is supported on all modern browsers.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 允许您使用 C# 而不是 JavaScript 来构建交互式 Web UI 组件。Blazor 支持所有现代浏览器。
- en: JavaScript and friends
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 及相关技术
- en: Traditionally, any code that needs to be executed in a web browser must be written
    using the JavaScript programming language or a higher-level technology that **transpiles**
    (transforms or compiles) into JavaScript. This is because all browsers have supported
    JavaScript for over two decades, so it is the lowest common denominator for implementing
    business logic in the client.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，任何需要在网络浏览器中执行的字节码都必须使用 JavaScript 编程语言或更高层次的技术编写，这些技术可以将代码**转换**（转换或编译）为
    JavaScript。这是因为所有浏览器都支持 JavaScript 超过二十年，因此它是实现客户端业务逻辑的最低共同标准。
- en: JavaScript does have some issues, however. Although it has superficial similarities
    to C-style languages like C# and Java, it is actually very different once you
    dig beneath the surface. It is a dynamically typed pseudo-functional language
    that uses prototypes instead of class inheritance for object reuse. It might look
    human, but you will get a surprise when it’s revealed to be a Skrull.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 JavaScript 与 C# 和 Java 等类似 C 风格的语言在表面上有些相似，但一旦深入挖掘，它实际上非常不同。它是一种动态类型伪函数式语言，使用原型而不是类继承来实现对象重用。它可能看起来很人性化，但当你发现它其实是一个
    Skrull 时，你可能会感到惊讶。
- en: It’d be great if we could use the same language and libraries in a browser as
    we do on the server.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能在浏览器中使用与服务器上相同的语言和库，那就太好了。
- en: Even Blazor cannot replace JavaScript completely. For example, some parts of
    the browser are only accessible to JavaScript. Blazor provides an interop service
    so that your C# code can call JavaScript code, and vice versa. You will see this
    in the online-only *Interop with JavaScript* section in *Chapter 14*, *Building
    Interactive Web Components Using Blazor*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 即使 Blazor 也无法完全取代 JavaScript。例如，浏览器的一些部分只能通过 JavaScript 访问。Blazor 提供了一个互操作服务，以便您的
    C# 代码可以调用 JavaScript 代码，反之亦然。您将在第 14 章“使用 Blazor 构建交互式 Web 组件”的在线仅有的 *与 JavaScript
    互操作* 部分中看到这一点。
- en: Silverlight – C# and .NET using a plugin
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Silverlight – 使用插件进行 C# 和 .NET 开发
- en: Microsoft made a previous attempt at achieving this goal with a technology named
    Silverlight. When Silverlight 2 was released in 2008, a C# and .NET developer
    could use their skills to build libraries and visual components that were executed
    in the web browser by the Silverlight plugin.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 微软曾尝试通过名为 Silverlight 的技术来实现这一目标。当 2008 年发布 Silverlight 2 时，C# 和 .NET 开发者可以使用他们的技能来构建由
    Silverlight 插件在 Web 浏览器中执行的库和可视化组件。
- en: By 2011 and Silverlight 5, Apple’s success with the iPhone and Steve Jobs’ hatred
    of browser plugins like Flash eventually led to Microsoft abandoning Silverlight
    since, like Flash, Silverlight is banned from iPhones and iPads.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 到 2011 年和 Silverlight 5 时，苹果在 iPhone 上的成功以及史蒂夫·乔布斯对像 Flash 这样的浏览器插件的反感最终导致微软放弃了
    Silverlight，因为像 Flash 一样，Silverlight 被禁止在 iPhone 和 iPad 上运行。
- en: WebAssembly – a target for Blazor
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: WebAssembly – Blazor 的目标
- en: 'Another development in web browsers has given Microsoft the opportunity to
    make another attempt. In 2017, the **WebAssembly Consensus** was completed, and
    all major browsers now support it: Chromium (Chrome, Edge, Opera, and Brave),
    Firefox, and WebKit (Safari).'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 网络浏览器的发展又给了微软一次尝试的机会。2017 年，**WebAssembly 协议**完成，现在所有主流浏览器都支持它：Chromium（Chrome、Edge、Opera
    和 Brave）、Firefox 以及 WebKit（Safari）。
- en: '**WebAssembly** (**Wasm**) is a binary instruction format for a virtual machine
    that provides a way to run code written in multiple languages on the web at near-native
    speed. Wasm is designed as a portable target for the compilation of high-level
    languages like C#.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**WebAssembly**（**Wasm**）是一种虚拟机的二进制指令格式，它提供了一种在网络上以接近原生速度运行多种语言编写代码的方式。Wasm
    被设计为 C# 等高级语言的编译目标。'
- en: Blazor hosting models in .NET 7 and earlier
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 7 及更早版本中的 Blazor 托管模型
- en: 'Blazor is a single programming or app model. For .NET 7 and earlier, a developer
    had to choose one hosting model for each project:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor 是一个单一的编程或应用模型。对于 .NET 7 及更早版本，开发者必须为每个项目选择一个托管模型：
- en: A **Blazor Server** project runs on the server side, so the C# code has full
    access to all resources that your business logic might need without needing to
    supply credentials to authenticate. It uses SignalR to communicate UI updates
    to the client side. The server must keep a live SignalR connection to each client
    and track the current state of every client. This means that Blazor Server does
    not scale well if you need to support lots of clients. It first shipped as part
    of ASP.NET Core 3 in September 2019.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Server** 项目在服务器端运行，因此 C# 代码可以完全访问业务逻辑可能需要的所有资源，而无需提供凭证进行身份验证。它使用 SignalR
    与客户端通信 UI 更新。服务器必须保持与每个客户端的实时 SignalR 连接，并跟踪每个客户端的当前状态。这意味着如果需要支持大量客户端，Blazor
    Server 的扩展性不佳。它首次作为 ASP.NET Core 3 的一部分于 2019 年 9 月发布。'
- en: A **Blazor Wasm** project runs on the client side, so the C# code only has access
    to resources in the browser. It must make HTTP calls (which might require authentication)
    before it can access resources on the server. It first shipped as an extension
    to ASP.NET Core 3.1 in May 2020 and was versioned 3.2 because it was a current
    release and therefore not covered by ASP.NET Core 3.1’s Long-Term Support. The
    Blazor Wasm 3.2 version used the Mono runtime and Mono libraries. .NET 5 and later
    use the Mono runtime and the .NET libraries.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor Wasm** 项目在客户端运行，因此 C# 代码只能访问浏览器中的资源。在它能够访问服务器上的资源之前，它必须进行 HTTP 调用（可能需要身份验证）。它首次作为
    ASP.NET Core 3.1 的扩展于 2020 年 5 月发布，并标记为 3.2，因为它是一个当前版本，因此不受 ASP.NET Core 3.1 长期支持的影响。Blazor
    Wasm 3.2 版本使用了 Mono 运行时和 Mono 库。.NET 5 及以后的版本使用 Mono 运行时和 .NET 库。'
- en: A **.NET MAUI Blazor app**, aka **Blazor Hybrid**, project renders its web UI
    to a web view control using a local interop channel and is hosted in a .NET MAUI
    app. It is conceptually like an Electron app.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET MAUI Blazor 应用**，也称为 **Blazor 混合应用**，项目使用本地互操作通道将其 Web UI 渲染到 Web 视图控件，并在
    .NET MAUI 应用中托管。从概念上讲，它类似于 Electron 应用。'
- en: Unification of Blazor hosting models in .NET 8
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 8 中 Blazor 托管模型的统一
- en: 'With .NET 8, the Blazor team has created a unified hosting model where each
    individual component can be set to execute using a different rendering model:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 8 中，Blazor 团队创建了一个统一的托管模型，其中每个组件都可以设置为使用不同的渲染模型：
- en: '**SSR**: Executes code on the server side like Razor Pages and MVC do. The
    complete response is then sent to the browser to display to the visitor and there
    is no further interaction between the server and client until the browser makes
    a new HTTP request. As far as the browser is concerned, the web page is static
    just like any other HTML file.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSR（服务器端渲染）**：像 Razor Pages 和 MVC 一样在服务器端执行代码。然后将完整的响应发送到浏览器以显示给访客，直到浏览器发起新的
    HTTP 请求之前，服务器和客户端之间没有进一步的交互。从浏览器的角度来看，网页就像任何其他 HTML 文件一样是静态的。'
- en: '**Streaming rendering**: Executes code on the server side. HTML markup can
    be returned and displayed in the browser, and while the connection is still open,
    any asynchronous operations can continue to execute. When all asynchronous operations
    are complete, the final markup is sent by the server to update the contents of
    the page. This improves the experience for the visitor because they see some content
    like a “Loading…” message while waiting for the rest.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**流式渲染**：在服务器端执行代码。HTML 标记可以返回并在浏览器中显示，并且在连接仍然打开的情况下，任何异步操作都可以继续执行。当所有异步操作完成后，服务器通过发送最终标记来更新页面内容。这改善了访客的体验，因为他们可以在等待其余内容时看到一些内容，如“正在加载...”消息。'
- en: '**Interactive server rendering**: Executes code on the server side during live
    interactions, which means the code has full and easy access to server-side resources
    like databases. This can simplify implementing functionality. Interactive requests
    are made using SignalR, which is more efficient than a full request. A permanent
    connection is needed between the browser and server, which limits scalability.
    This is a good choice for intranet websites where there are a limited number of
    clients and high bandwidth networking.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式服务器渲染**：在实时交互期间在服务器端执行代码，这意味着代码可以完全且容易地访问服务器端资源，如数据库。这可以简化功能的实现。交互式请求使用
    SignalR 进行，比完整请求更高效。浏览器和服务器之间需要一个永久连接，这限制了可扩展性。这对于客户端数量有限且网络带宽高的内网网站来说是一个不错的选择。'
- en: '**Interactive Wasm rendering**: Executes code on the client side, which means
    the code only has access to resources within the browser. This can complicate
    the implementation because a callback to the server must be made whenever new
    data is required. A good choice for public websites where there are potentially
    a large number of clients and low bandwidth connections for some of them.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式 Wasm 渲染**：在客户端执行代码，这意味着代码只能访问浏览器内的资源。这可能会使实现复杂化，因为每当需要新数据时，必须对服务器进行回调。对于可能存在大量客户端且部分客户端带宽较低的公共网站来说，这是一个不错的选择。'
- en: '**Interactive automatic rendering**: Starts by rendering on the server for
    faster initial display, downloads Wasm components in the background, and then
    switches to Wasm for subsequent interactivity.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**交互式自动渲染**：首先在服务器上渲染以实现更快的初始显示，然后在后台下载 Wasm 组件，然后切换到 Wasm 以实现后续的交互性。'
- en: This unified model means that, with careful planning, a developer can write
    Blazor components once and then choose to run them on the web server side, or
    the web client side, or dynamically switch. This gives the best of all worlds.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这种统一模型意味着，经过仔细规划，开发者可以编写一次 Blazor 组件，然后选择在 web 服务器端、web 客户端或动态切换上运行。这提供了所有最佳方案。
- en: Understanding Blazor components
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 Blazor 组件
- en: It is important to understand that Blazor is used to create **UI components**.
    Components define how to render the UI and react to user events, and can be composed,
    nested, and compiled into a Razor class library for packaging and distribution.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要理解 Blazor 用于创建 **UI 组件**。组件定义了如何渲染 UI 以及如何响应用户事件，并且可以组合、嵌套并编译成一个 Razor
    类库以进行打包和分发。
- en: 'For example, to provide a UI for star ratings of products on a commerce site,
    you might create a component named `Rating.razor`, as shown in the following markup:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了在电子商务网站上提供产品星级评级的用户界面，您可能创建一个名为 `Rating.razor` 的组件，如下面的标记所示：
- en: '[PRE19]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You could then use the component on a web page, as shown in the following markup:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以在网页上使用该组件，如下面的标记所示：
- en: '[PRE20]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The markup for creating an instance of a component looks like an HTML tag, where
    the name of the tag is the component type. Components can be embedded in a web
    page using an element, for example, `<Rating Value="5" />`, or they can be routed
    to, like a mapped endpoint.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 创建组件实例的标记看起来像 HTML 标签，其中标签的名称是组件类型。组件可以通过元素嵌入到网页中，例如 `<Rating Value="5" />`，或者它们可以被路由到，就像一个映射的端点。
- en: Instead of a single file with both markup and an `@code` block, the code can
    be stored in a separate code-behind file named `Rating.razor.cs`. The class in
    this file must be `partial` and have the same name as the component.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 与包含标记和 `@code` 块的单个文件不同，代码可以存储在名为 `Rating.razor.cs` 的单独的后台代码文件中。该文件中的类必须是 `partial`
    的，并且与组件具有相同的名称。
- en: There are many built-in Blazor components, including ones to set elements like
    `<title>` in the `<head>` section of a web page, and plenty of third parties who
    will sell you components for common purposes.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多内置的 Blazor 组件，包括用于设置网页 `<head>` 部分中的 `<title>` 等元素的组件，以及许多第三方供应商会出售用于常见目的的组件。
- en: What is the difference between Blazor and Razor?
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Blazor 和 Razor 之间的区别是什么？
- en: You might wonder why Blazor components use `.razor` as their file extension.
    Razor is a template markup syntax that allows the mixing of HTML and C#. Older
    technologies that support Razor syntax use the `.cshtml` file extension to indicate
    the mix of C# and HTML.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会想知道为什么 Blazor 组件使用 `.razor` 作为它们的文件扩展名。Razor 是一种模板标记语法，允许混合 HTML 和 C#。支持
    Razor 语法的旧技术使用 `.cshtml` 文件扩展名来表示 C# 和 HTML 的混合。
- en: 'Razor syntax is used for:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Razor 语法用于：
- en: ASP.NET Core MVC **views** and **partial views** that use the `.cshtml` file
    extension. The business logic is separated into a controller class that treats
    the view as a template to push the view model to, which then outputs it to a web
    page.
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ASP.NET Core MVC **视图**和**部分视图**使用 `.cshtml` 文件扩展名。业务逻辑被分离到一个控制器类中，该类将视图作为模板来推送视图模型，然后将其输出到网页。
- en: '**Razor Pages** that use the `.cshtml` file extension. The business logic can
    be embedded or separated into a file that uses the `.cshtml.cs` file extension.
    The output is a web page.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `.cshtml` 文件扩展名的 **Razor Pages**。业务逻辑可以嵌入或分离到一个使用 `.cshtml.cs` 文件扩展名的文件中。输出是一个网页。
- en: '**Blazor components** that use the `.razor` file extension. The output is rendered
    as part of a web page, although layouts can be used to wrap a component so it
    outputs as a web page, and the `@page` directive can be used to assign a route
    that defines the URL path to retrieve the component as a page.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blazor 组件** 使用 `.razor` 文件扩展名。输出作为网页的一部分渲染，尽管可以使用布局将组件包装起来，使其输出为网页，并且可以使用
    `@page` 指令来分配一个路线，该路线定义了检索组件的 URL 路径。'
- en: 'Now that you understand the background of Blazor, let’s see something more
    practical: how to add Blazor support to an existing ASP.NET Core project.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经了解了 Blazor 的背景知识，让我们看看一些更实用的内容：如何将 Blazor 支持添加到现有的 ASP.NET Core 项目中。
- en: Exploring Blazor static SSR
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 Blazor 静态 SSR
- en: ASP.NET Core Blazor static SSR allows a developer to easily mix C# code statements
    with HTML markup to make the generated web page dynamic.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core Blazor 静态 SSR 允许开发人员轻松地将 C# 代码语句与 HTML 标记混合，以使生成的网页动态化。
- en: Enabling Blazor static SSR
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用 Blazor 静态 SSR
- en: 'Here is a summary of the tasks that you must complete to enable Blazor and
    its static SSR capability in an existing ASP.NET Core project:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是您必须完成的任务摘要，以在现有的 ASP.NET Core 项目中启用 Blazor 和其静态 SSR 功能：
- en: Create a `Components` folder to contain your Blazor components.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `Components` 文件夹来存放您的 Blazor 组件。
- en: Create a `Components\Pages` folder to contain your Blazor page components.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `Components\Pages` 文件夹来存放您的 Blazor 页面组件。
- en: 'In the `Components` folder, create three `.razor` files:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中创建三个 `.razor` 文件：
- en: '`_Imports.razor`: This file imports namespaces for all `.razor` files so that
    you do not need to import them at the top of every `.razor` file. At a minimum,
    you will want to import the namespace for Blazor routing and your local project
    Blazor components.'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_Imports.razor`：此文件导入所有 `.razor` 文件所需的命名空间，这样您就不需要在每个 `.razor` 文件的顶部导入它们。至少，您将想要导入
    Blazor 路由和您本地项目的 Blazor 组件的命名空间。'
- en: '`App.razor`: This file contains HTML for the web page that will contain all
    your Blazor components. It also needs to reference your Blazor `Routes` component
    somewhere in the `<body>` of the web page.'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`App.razor`：此文件包含网页的 HTML，其中将包含所有您的 Blazor 组件。它还需要在网页的 `<body>` 中某处引用您的 Blazor
    `Routes` 组件。'
- en: '`Routes.razor`: This file defines a `<Router>` component that scans the current
    assembly for page components and their registered routes.'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Routes.razor`：此文件定义了一个 `<Router>` 组件，该组件扫描当前程序集以查找页面组件及其注册的路线。'
- en: 'In `Components\Pages`, create an `Index.razor` file, a Blazor page component
    that will be your home page shown by default by the Blazor router. It will need
    a directive at the top of the file to define a route for the root path: `@page
    "/"`.'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components\Pages` 目录下创建一个 `Index.razor` 文件，这是一个 Blazor 页面组件，它将由 Blazor 路由器默认显示为您的首页。它需要在文件顶部添加一个指令来定义根路径的路线：`@page
    "/"`。
- en: In `Program.cs`, you must call `AddRazorComponents()` to register Blazor aka
    Razor components (`*.razor`) files with ASP.NET Core’s dependency services collection,
    and then call `MapRazorComponents<App>()` to map endpoints for all the found Blazor
    routes. You must also call `UseAntiforgery()` because Blazor components automatically
    check for anti-forgery tokens; therefore, the HTTP pipeline must enable middleware
    to support them.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，您必须调用 `AddRazorComponents()` 来将 Blazor（即 Razor 组件，`*.razor`）文件注册到
    ASP.NET Core 的依赖项服务集合中，然后调用 `MapRazorComponents<App>()` 来映射所有找到的 Blazor 路由的端点。您还必须调用
    `UseAntiforgery()`，因为 Blazor 组件会自动检查反伪造令牌；因此，HTTP 管道必须启用中间件以支持它们。
- en: 'You will now add and enable the Blazor static SSR service, and then copy and
    change the static HTML page into a Blazor static SSR file:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在将添加并启用 Blazor 静态 SSR 服务，然后复制并更改静态 HTML 页面为 Blazor 静态 SSR 文件：
- en: In the `Northwind.Web` project folder, create a folder named `Components`.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Northwind.Web` 项目文件夹中创建一个名为 `Components` 的文件夹。
- en: In the `Components` folder, create a folder named `Pages`.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中创建一个名为 `Pages` 的文件夹。
- en: In the `Components` folder, create a file named `_Imports.razor`.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中创建一个名为 `_Imports.razor` 的文件。
- en: 'In `_Imports.razor`, add statements to import the namespaces for Blazor components
    routing, and for your `Northwind.Web` project and its components, as shown in
    the following markup:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `_Imports.razor` 中添加语句以导入 Blazor 组件路由的命名空间，以及您的 `Northwind.Web` 项目及其组件，如下面的标记所示：
- en: '[PRE21]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the `Components` folder, create a file named `Routes.razor`.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中创建一个名为 `Routes.razor` 的文件。
- en: 'In `Routes.razor`, add statements to define a router that scans the current
    assembly for Blazor page components that have been registered with a route, as
    shown in the following markup:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Routes.razor` 中，添加定义路由器的语句，该路由器扫描当前程序集以查找已注册路由的 Blazor 页面组件，如下面的标记所示：
- en: '[PRE22]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Copy the `index.html` file into the `Components\Pages` folder. (In Visual Studio
    or Rider, hold down *Ctrl* while dragging and dropping.)
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `index.html` 文件复制到 `Components\Pages` 文件夹中。（在 Visual Studio 或 Rider 中，按住 *Ctrl*
    键同时拖放。）
- en: For the file in the `Components\Pages` folder (not the original file), rename
    the file extension from `index.html` to `Index.razor`. Make sure the “I” is uppercase.
    (Blazor components must start with an uppercase letter or you will get a compiler
    error!)
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `Components\Pages` 文件夹中的文件（不是原始文件），将文件扩展名从 `index.html` 更改为 `Index.razor`。确保“I”是大写的。（Blazor
    组件必须以大写字母开头，否则你会得到编译器错误！）
- en: In the `Components` folder, create a file named `App.razor`.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，创建一个名为 `App.razor` 的文件。
- en: 'In `App.razor`, cut and paste the root markup, including head and body elements
    from `Index.razor`, and then add elements to insert a page title using `<HeadOutlet
    />` and for your `<Routes>` component, as shown in the following markup:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App.razor` 中，剪切并粘贴来自 `Index.razor` 的根标记，包括 head 和 body 元素，然后添加使用 `<HeadOutlet
    />` 插入页面标题的元素，以及为你的 `<Routes>` 组件添加元素，如下面的标记所示：
- en: '[PRE23]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In `Index.razor`, add the `@page` directive to the top of the file and set
    its route to `/`, add a `<PageTitle>` component to set the web page `<title>`,
    remove the `<h2>` element that says that this is a static HTML page, and note
    the result, as shown in the following markup:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Index.razor` 中，将 `@page` 指令添加到文件顶部，并将其路由设置为 `/`，添加一个 `<PageTitle>` 组件来设置网页
    `<title>`，删除说这是一个静态 HTML 页面的 `<h2>` 元素，并注意结果，如下面的标记所示：
- en: '[PRE24]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Warning!** If you have installed ReSharper for Visual Studio, or you use
    Rider, then they might give warnings like “Cannot resolve symbol” in your Razor
    Pages, Razor views, and Blazor components. This does not always mean there is
    an actual problem. If the file compiles, then you can ignore their errors. Sometimes
    these tools get confused and needlessly worry developers.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 如果你为 Visual Studio 安装了 ReSharper，或者你使用 Rider，那么它们可能会在你的 Razor 页面、Razor
    视图和 Blazor 组件中给出类似“无法解析符号”的警告。这并不总是意味着存在实际的问题。如果文件可以编译，那么你可以忽略它们的错误。有时这些工具会困惑并无谓地让开发者担忧。'
- en: 'In `Program.cs`, after the statement that creates the `builder`, add a statement
    to add ASP.NET Core Blazor components and their related services, and optionally
    define a `#region`, as shown in the following code:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在创建 `builder` 的语句之后，添加一个添加 ASP.NET Core Blazor 组件及其相关服务的语句，并可选地定义一个
    `#region`，如下面的代码所示：
- en: '[PRE25]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In `Program.cs`, after calling the method to use HTTPS redirection, add a statement
    to use anti-forgery middleware, as shown highlighted in the following code:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在调用使用 HTTPS 重定向的方法之后，添加一个使用反伪造中间件的语句，如下面的代码所示：
- en: '[PRE26]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In `Program.cs`, at the top of the file, add a statement to import your project
    components, as shown in the following code:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 文件的顶部，添加一个导入你的项目组件的语句，如下面的代码所示：
- en: '[PRE27]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In `Program.cs`, before the statement that maps an HTTP `GET` request for the
    path `/env`, add a statement to call the `MapRazorComponents` method, as shown
    highlighted in the following code:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，在映射路径 `/env` 的 HTTP `GET` 请求的语句之前，添加一个调用 `MapRazorComponents`
    方法的语句，如下面的代码所示：
- en: '[PRE28]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Start the website project using the `https` launch profile.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置文件启动网站项目。
- en: 'In Chrome, enter `https://localhost:5131/` and note that the element that says
    this is a static HTML page is gone. If it is still there, then you might have
    to empty the browser cache. View **Developer Tools**, click and hold on the **Reload
    this page** button, and then select **Empty cache and hard reload**, as shown
    in *Figure 13.4*:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，输入 `https://localhost:5131/` 并注意说这是一个静态 HTML 页面的元素已经消失。如果它仍然存在，那么你可能需要清空浏览器缓存。查看
    **开发者工具**，点击并按住 **重新加载此页面** 按钮，然后选择 **清空缓存并强制重新加载**，如图 13.4 所示：
- en: '![](img/B22322_13_04.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_04.png)'
- en: 'Figure 13.4: View Developer Tools, then click and hold the Reload this page
    button to see more commands'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.4：查看开发者工具，然后点击并按住重新加载此页面按钮以查看更多命令
- en: Adding code to a Blazor static SSR page
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向 Blazor 静态 SSR 页面添加代码
- en: 'In the HTML markup of a web page, Razor syntax is indicated by the `@` symbol.
    Blazor static SSR pages can be described as follows:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页的 HTML 标记中，Razor 语法由 `@` 符号表示。Blazor 静态 SSR 页面可以描述如下：
- en: Blazor static SSR pages require the `@page` directive at the top of the file
    with a route specified as a string value like `"/"` or `"/customers"`.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor 静态 SSR 页面需要在文件顶部使用 `@page` 指令并指定一个字符串值作为路由，例如 `"/"` 或 `"/customers"`。
- en: '**Warning!** *Blazor static SSR pages* are different from *Razor Pages* and
    *Razor views* (used in ASP.NET Core MVC) but they share the same Razor syntax.
    Blazor components have the `.razor` file extension. *Razor Pages* and *Razor views*
    have the `.cshtml` file extension. *Razor Pages* must have the `@page` directive.
    *Razor views* must **not** use the `@page` directive.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** *Blazor 静态 SSR 页面* 与 *Razor Pages* 和 *Razor 视图*（用于 ASP.NET Core MVC）不同，但它们共享相同的
    Razor 语法。Blazor 组件具有 `.razor` 文件扩展名。*Razor Pages* 必须有 `@page` 指令。*Razor 视图* 必须**不**使用
    `@page` 指令。'
- en: Blazor static SSR pages can optionally have an `@code` section that defines
    properties for storing data values, like in a class definition. You can then get
    the property values in the HTML.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor 静态 SSR 页面可以可选地包含一个 `@code` 部分，用于定义存储数据值的属性，就像在类定义中一样。然后你可以在 HTML 中获取属性值。
- en: 'Blazor static SSR pages’ markup can have comments using `@*` and `*@`, as shown
    in the following code: `@* This is a comment. *@`.'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Blazor 静态 SSR 页面的标记可以使用 `@*` 和 `*@` 进行注释，如下面的代码所示：`@* 这是一个注释。 *@`。
- en: 'Let’s now add some dynamic content to the Blazor static SSR page using an `@code`
    block:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们使用 `@code` 块向 Blazor 静态 SSR 页面添加一些动态内容：
- en: 'In the `Components/Pages` folder, in `Index.cshtml`, after the `@page` directive,
    add an `@code` statement block to define a property to store the name of the current
    day as a `string` value, as shown in the following code:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components/Pages` 文件夹中的 `Index.cshtml` 文件中，在 `@page` 指令之后，添加一个 `@code` 语句块来定义一个属性，用于存储当前日期的
    `string` 值，如下面的代码所示：
- en: '[PRE29]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'In the second HTML paragraph, `<p>`, render the day name, as shown highlighted
    in the following markup:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个 HTML 段落 `<p>` 中，渲染日期名称，如下面的标记所示：
- en: '[PRE30]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Start the website project using the `https` profile.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 配置文件启动网站项目。
- en: 'In Chrome, if necessary, enter `https://localhost:5131/`, and note that the
    current day name is output on the page, as shown in *Figure 13.5*:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，如果需要，输入 `https://localhost:5131/`，并注意页面输出了当前日期名称，如图 *13.5* 所示：
- en: '![](img/B22322_13_05.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_05.png)'
- en: 'Figure 13.5: Welcome to the Northwind page showing the current day'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.5：欢迎来到 Northwind 页面，显示当前日期
- en: In Chrome, enter `https://localhost:5131/index.html`, which exactly matches
    the static filename, and note that it returns the static HTML page as before.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，输入 `https://localhost:5131/index.html`，这正好匹配静态文件名，并注意它返回了之前的静态 HTML
    页面。
- en: In Chrome, enter `https://localhost:5131/env`, which exactly matches the endpoint
    route that returns plain text, and note that it returns the plain textas before.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Chrome 中，输入 `https://localhost:5131/env`，这正好匹配返回纯文本的端点路由，并注意它返回了之前的纯文本。
- en: Close Chrome and shut down the web server.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: Using shared layouts with Blazor static SSR pages
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Blazor 静态 SSR 页面与共享布局
- en: Most websites have more than one page. The boilerplate markup for the body of
    the web page that is currently in `Index.razor` is minimal. Usually, there will
    be common markup in the body that needs to be visible on every page. If each page
    had to duplicate that markup, then it would become a pain to manage. So, ASP.NET
    Core has a feature named **layouts**.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网站都有多个页面。当前在 `Index.razor` 中网页主体的样板标记是最小的。通常，在主体中会有一些常见的标记需要在每个页面上可见。如果每个页面都需要重复这些标记，那么管理起来就会变得很麻烦。因此，ASP.NET
    Core 有一个名为 **布局** 的功能。
- en: To use layouts, we must create a Razor file to define the default layout for
    all Blazor components and specify it in the `Routes` component. By convention,
    we store it in a `Layout` folder. The name of this file can be anything, as we
    will specify it, but `MainLayout.razor` is good practice.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用布局，我们必须创建一个 Razor 文件来定义所有 Blazor 组件的默认布局，并在 `Routes` 组件中指定它。按照惯例，我们将其存储在
    `Layout` 文件夹中。这个文件的名称可以是任何东西，因为我们将会指定它，但 `MainLayout.razor` 是一个好习惯。
- en: Typically, your main layout will include a navigation menu with links to all
    the other Blazor page components. The naming convention for this file is `NavMenu.razor`.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你的主要布局将包括一个导航菜单，其中包含链接到所有其他 Blazor 页面组件。这个文件的命名惯例是 `NavMenu.razor`。
- en: 'Let’s see layouts in action:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看布局的实际应用：
- en: In the `Components` folder, add a new folder named `Layout`.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Components` 文件夹中，添加一个名为 `Layout` 的新文件夹。
- en: In the `Layout` folder, add a file named `NavMenu.razor`.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Layout` 文件夹中，添加一个名为 `NavMenu.razor` 的文件。
- en: 'In `NavMenu.razor`, modify the content, as shown in the following markup:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NavMenu.razor` 中修改内容，如下面的标记所示：
- en: '[PRE31]'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '**More Information**: This markup uses a Bootstrap feature called `navbar`,
    which you can read about at the following link: [https://getbootstrap.com/docs/5.3/components/navbar/](https://getbootstrap.com/docs/5.3/components/navbar/).'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：此标记使用 Bootstrap 的 `navbar` 功能，您可以在以下链接中了解更多信息：[https://getbootstrap.com/docs/5.3/components/navbar/](https://getbootstrap.com/docs/5.3/components/navbar/)。'
- en: In the `Layout` folder, add a file named `MainLayout.razor`.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Layout` 文件夹中，添加一个名为 `MainLayout.razor` 的文件。
- en: 'In `MainLayout.razor`, modify the content, as shown in the following markup:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainLayout.razor` 中修改内容，如下所示：
- en: '[PRE32]'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下内容：
- en: '`@Body` marks the insertion point for the Blazor page component being requested.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`@Body` 标记了请求的 Blazor 页面组件的插入点。'
- en: At the bottom of the layout is a script to implement some cool features of Bootstrap
    that we can use later, such as a carousel of images.
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在布局的底部有一个脚本，用于实现一些我们以后可以使用的 Bootstrap 的酷炫功能，例如图片轮播。
- en: 'In `Routes.razor`, add an attribute to set the class name for the default layout,
    as shown highlighted in the following markup:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Routes.razor` 中，添加一个属性来设置默认布局的类名，如下所示：
- en: '[PRE33]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Start the website using the `https` launch profile.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置文件启动网站。
- en: 'Visit it with Chrome and note that it now has a navigation menu at the top
    of every page, as shown in *Figure 13.6*:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Chrome 访问它，并注意现在每个页面的顶部都有一个导航菜单，如图 *图 13.6* 所示：
- en: '![](img/B22322_13_06.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_06.png)'
- en: 'Figure 13.6: Navigation menu in the shared layout component'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.6：共享布局组件中的导航菜单
- en: '**Warning!** Clicking the navigation menu for suppliers will give a `404 Not
    Found` error because we have not created that Blazor page component yet.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 点击供应商的导航菜单将导致 `404 Not Found` 错误，因为我们还没有创建那个 Blazor 页面组件。'
- en: Close Chrome and shut down the web server.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Chrome 并关闭 web 服务器。
- en: Creating a suppliers page
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建供应商页面
- en: 'You will now create a Blazor static SSR page component that shows a list of
    suppliers. In the next topic, we will load the list of suppliers from a database,
    but for now, we will simulate that with a hardcoded array of `string` values:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将创建一个显示供应商列表的 Blazor 静态 SSR 页面组件。在下一个主题中，我们将从数据库中加载供应商列表，但现在是使用硬编码的 `string`
    值数组来模拟：
- en: In the `Pages` folder, add a new Blazor page component named `Suppliers.razor`.
    If you are using Visual Studio or Rider, then the project item template is named
    **Razor Component**.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Pages` 文件夹中，添加一个名为 `Suppliers.razor` 的新 Blazor 页面组件。如果您使用 Visual Studio 或
    Rider，则项目项模板名为 **Razor Component**。
- en: 'In `Suppliers.razor`, replace the existing contents with markup to render an
    HTML table containing supplier company names, as shown in the following markup:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Suppliers.razor` 中，用以下标记替换现有内容以渲染包含供应商公司名称的 HTML 表格：
- en: '[PRE34]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'While reviewing the preceding markup, note the following:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 在审查前面的标记时，请注意以下内容：
- en: The `Suppliers` property is populated with some example supplier company names
    from an array of `string` values. Later, we will populate this from the `Northwind`
    database.
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Suppliers` 属性使用从 `string` 值数组中的一些示例供应商公司名称填充。稍后，我们将从 `Northwind` 数据库中填充它。'
- en: The page outputs an HTML table with Bootstrap styles.
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面输出一个具有 Bootstrap 样式的 HTML 表格。
- en: The page uses Razor syntax `@if` and `@for` statements to embed C# code in HTML.
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 页面使用 Razor 语法 `@if` 和 `@for` 语句将 C# 代码嵌入到 HTML 中。
- en: The data rows in the table are generated by looping through the `Suppliers`
    property if it is not `null`.
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 `Suppliers` 属性不是 `null`，则表中的数据行是通过遍历该属性生成的。
- en: Start the website using the `https` launch profile and visit it using Chrome.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `https` 启动配置文件启动网站，并使用 Chrome 访问它。
- en: 'Click on the button to learn more about suppliers, and note the table of suppliers,
    as shown in *Figure 13.7*:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击按钮了解更多关于供应商的信息，并注意供应商表，如图 *图 13.7* 所示：
- en: '![](img/B22322_13_07.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_07.png)'
- en: 'Figure 13.7: The table of suppliers loaded from an array of strings'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.7：从字符串数组加载的供应商表
- en: Configuring files included in an ASP.NET Core project
  id: totrans-334
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 ASP.NET Core 项目中包含的文件
- en: Until now, most of our projects have been simple console apps and class libraries
    with a few C# class files. By default, when we compiled those projects, all `.cs`
    files in the project folder or subfolders were automatically included in the build
    at compile time.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的大多数项目都是简单的控制台应用程序和具有几个 C# 类文件的类库。默认情况下，当我们编译这些项目时，项目文件夹或子文件夹中的所有 `.cs`
    文件都会在编译时自动包含在构建中。
- en: ASP.NET Core projects get more complicated. There are many more file types;
    some of them can be compiled at runtime instead of compile time, and some of them
    are just content that does not need to be compiled but does need to be deployed
    along with the compiled assemblies.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core项目变得更加复杂。有更多文件类型；其中一些可以在运行时而不是在编译时编译，还有一些只是内容，不需要编译但需要与编译后的程序集一起部署。
- en: You can control how files are processed during a build, and which are included
    or excluded from a deployment, by putting elements in the project file. These
    are processed by **MS Build** and other tools during builds and deployments.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在项目文件中放置元素来控制文件在构建过程中的处理方式，以及哪些文件被包含或排除在部署之外。这些在构建和部署期间由**MS Build**和其他工具处理。
- en: 'You declare items in the project file as child elements of an `<ItemGroup>`
    element. For example:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 你在项目文件中将项目项声明为`<ItemGroup>`元素的子元素。例如：
- en: '[PRE35]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: You can have as many `<ItemGroup>` elements as you want, so it is good practice
    to use them to logically divide elements by type. They are merged automatically
    by build tools.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以拥有任意多的`<ItemGroup>`元素，因此使用它们按类型逻辑划分元素是良好的实践。它们会被构建工具自动合并。
- en: Usually, you manually add these elements when you know you need to use them,
    but unfortunately, Visual Studio and other code editors sometimes mess things
    up by trying to be helpful.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，当你知道你需要使用它们时，你会手动添加这些元素，但不幸的是，Visual Studio和其他代码编辑器有时会试图提供帮助，结果却弄糟了事情。
- en: In one scenario, you might have added a new Blazor component in the `Components\Pages`
    folder named `Customers.razor`. You start the web server, but the page does not
    appear. Or, you are working on a GraphQL service, and you add a file named `seafoodProducts.graphql`,
    but when you run the GraphQL tool to auto-generate client-side proxies, it fails.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在一种场景中，你可能在`Components\Pages`文件夹中添加了一个名为`Customers.razor`的新Blazor组件。你启动了Web服务器，但页面没有出现。或者，你正在处理一个GraphQL服务，并添加了一个名为`seafoodProducts.graphql`的文件，但当你运行GraphQL工具来自动生成客户端代理时，它失败了。
- en: These are both common indications that your code editor has decided that the
    new file should not be part of the project. It has automatically added an element
    to the project file to remove the file from the build process without telling
    you.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这都是你的代码编辑器决定新文件不应成为项目一部分的常见迹象。它已自动向项目文件添加了一个元素，以在不通知你的情况下从构建过程中删除该文件。
- en: 'To solve this type of problem, review the project file for unexpected entries
    like the following, and delete them:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决此类问题，请检查项目文件中如下的意外条目，并删除它们：
- en: '[PRE36]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '**Good Practice**: When using tools that automatically “fix” problems without
    telling you, review your project file for unexpected elements when unexpected
    results happen.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当使用自动“修复”问题而不通知你的工具时，当出现意外结果时，请检查你的项目文件以查找意外元素。'
- en: '**More Information**: You can read more about managing MS Build items at the
    following link: [https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items).'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可以在以下链接中了解更多关于管理MS Build项目项的信息：[https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items](https://learn.microsoft.com/en-us/visualstudio/msbuild/msbuild-items)。'
- en: Project file build actions
  id: totrans-348
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目文件构建操作
- en: As we have just seen, it is important that ASP.NET Core developers understand
    how project build actions affect compilation.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们刚才看到的，对于ASP.NET Core开发者来说，了解项目构建操作如何影响编译非常重要。
- en: All files in a .NET SDK project have a build action. Most are set implicitly
    based on their file extension. You can override the default behavior by explicitly
    setting a build action. You can do this either by directly editing the `.csproj`
    project file or by using your code editor’s **Properties** window.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK项目中的所有文件都有一个构建操作。大多数都是基于它们的文件扩展名隐式设置的。你可以通过显式设置构建操作来覆盖默认行为。你可以直接编辑`.csproj`项目文件或使用你的代码编辑器的**属性**窗口来完成此操作。
- en: 'Common build actions for ASP.NET Core project files are shown in *Table 13.2*:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core项目文件的常见构建操作如*表13.2*所示：
- en: '| **Build action** | **Description** |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| **构建操作** | **描述** |'
- en: '| **Compile** or **C# compiler** | Passed to the compiler as a source file.
    |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| **编译**或**C#编译器** | 作为源文件传递给编译器。 |'
- en: '| **Content** | Included as part of the website when it’s deployed. |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| **内容** | 在部署网站时作为网站的一部分包含。 |'
- en: '| **Embedded Resource** | Passed to the compiler as a resource to be embedded
    in the assembly. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| **嵌入式资源** | 作为资源传递给编译器以嵌入到程序集。 |'
- en: '| **None** | Not part of the build. This value can be used for documentation
    and other files that should not be deployed with the website. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| **None** | 不属于构建的一部分。此值可用于文档和其他不应与网站一起部署的文件。|'
- en: 'Table 13.2: Common build actions for ASP.NET Core project files'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 表13.2：ASP.NET Core项目文件的常见构建操作
- en: '**More Information**: You can learn more about **build actions** and `.csproj`
    entries at the following link: [https://learn.microsoft.com/en-us/visualstudio/ide/build-actions](https://learn.microsoft.com/en-us/visualstudio/ide/build-actions).'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可以在以下链接中了解更多关于**构建操作**和`.csproj`条目的信息：[https://learn.microsoft.com/en-us/visualstudio/ide/build-actions](https://learn.microsoft.com/en-us/visualstudio/ide/build-actions)。'
- en: Using Entity Framework Core with ASP.NET Core
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Entity Framework Core与ASP.NET Core
- en: Entity Framework Core is a natural way to get real data onto a website. In *Chapter
    12*, *Introducing Modern Web Development Using .NET*, you created a pair of class
    libraries (one for the entity models and one for the `Northwind` database context)
    using SQLite as the data provider (or SQL Server). You will now use them in your
    website project.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: Entity Framework Core是将真实数据引入网站的一种自然方式。在*第12章*中，使用.NET进行现代Web开发的介绍中，你创建了一对类库（一个用于实体模型，一个用于`Northwind`数据库上下文）使用SQLite作为数据提供程序（或SQL
    Server）。你现在将在你的网站项目中使用它们。
- en: Configuring Entity Framework Core as a service
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Entity Framework Core作为服务
- en: Functionality that is needed by an ASP.NET Core project, such as Entity Framework
    Core database contexts, should be registered as a dependency service during website
    startup. The code in the GitHub repository solution and below uses SQLite, but
    you can easily use SQL Server if you prefer.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core项目需要的功能，例如Entity Framework Core数据库上下文，应在网站启动时注册为依赖服务。GitHub仓库解决方案中的代码使用SQLite，但如果你更喜欢，可以轻松地使用SQL
    Server。
- en: 'Let’s see how:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何：
- en: 'In the `Northwind.Web` project, add a project reference to the `Northwind.DataContext`
    project for either SQLite or SQL Server, as shown in the following markup:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Northwind.Web`项目中，添加对`Northwind.DataContext`项目的项目引用，无论是SQLite还是SQL Server，如下面的标记所示：
- en: '[PRE37]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '**Warning!** The project reference must go all on one line with no line break.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**项目引用必须全部在一行中，不能有换行。'
- en: Build the `Northwind.Web` project.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建`Northwind.Web`项目。
- en: 'In `Program.cs`, import the namespace to work with your entity model types,
    as shown in the following code:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，导入用于处理你的实体模型类型的命名空间，如下面的代码所示：
- en: '[PRE38]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In `Program.cs`, after the statement that adds Razor components to the registered
    services, add a statement to register the `Northwind` database context class,
    as shown in the following code:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在添加Razor组件到已注册服务的语句之后，添加一个语句来注册`Northwind`数据库上下文类，如下面的代码所示：
- en: '[PRE39]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'In the `Components` folder, in `_Imports.razor`, import the namespace for our
    database context, as shown in the following code:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components`文件夹中，在`_Imports.razor`中导入数据库上下文的命名空间，如下面的代码所示：
- en: '[PRE40]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In the `Components\Pages` folder, in `Suppliers.razor`, inject an instance
    of the Northwind context service, as shown in the following code:'
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Components\Pages`文件夹中，在`Suppliers.razor`中注入Northwind上下文服务的实例，如下面的代码所示：
- en: '[PRE41]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Change the `Companies` property to be declared as a sequence of `Supplier`
    objects instead of `string` values, as shown highlighted in the following code:'
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Companies`属性改为声明为`Supplier`对象的序列，而不是`string`值，如下面的代码高亮所示：
- en: '[PRE42]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Define an `OnInitialized` method to set the `Companies` property using data
    from the Northwind `Suppliers` tables, as shown in the following code:'
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个`OnInitialized`方法，使用来自Northwind `供应商`表的数据设置`Companies`属性，如下面的代码所示：
- en: '[PRE43]'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Modify the markup to render multiple columns for each supplier, as shown highlighted
    in the following markup:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改标记以渲染每个供应商的多个列，如下面的代码高亮所示：
- en: '[PRE44]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Start the website using the `https` launch profile and go to the website home
    page.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`https`启动配置文件启动网站并转到网站主页。
- en: 'Click **Learn more about our suppliers** and note that the `Suppliers` table
    now loads from the database and the data is sorted first by country and then by
    company name, as shown in *Figure 13.8*:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**了解更多关于我们的供应商**，并注意现在`供应商`表是从数据库加载的，并且数据首先按国家排序，然后按公司名称排序，如图*13.8*所示：
- en: '![](img/B22322_13_08.png)'
  id: totrans-384
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_13_08.png)'
- en: 'Figure 13.8: The Suppliers table loaded from the Northwind database'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8：从Northwind数据库加载的供应商表
- en: In the next chapter, we will implement a Blazor website with interactivity so
    we can easily modify data as well as display it.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将实现一个具有交互性的Blazor网站，这样我们就可以轻松地修改数据以及显示它。
- en: Practicing and exploring
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回答一些问题、进行一些动手实践和深入探索本章主题来测试您的知识和理解。
- en: Exercise 13.1 – online material
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.1 – 在线材料
- en: Online material could be material created by Microsoft or third parties, or
    extra content for this book.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在线材料可以是微软或第三方创建的材料，或者本书的额外内容。
- en: Configuring services and the HTTP request pipeline
  id: totrans-391
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置服务和 HTTP 请求管道
- en: 'This online section reviews how services and the HTTP request pipeline work
    in more detail:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 本在线章节详细介绍了服务和 HTTP 请求管道的工作原理：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-http-pipeline.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-http-pipeline.md)'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-http-pipeline.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-http-pipeline.md)'
- en: Enabling HTTP/3 and request decompression support
  id: totrans-394
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 启用 HTTP/3 和请求解压缩支持
- en: HTTP/3 brings benefits to all internet-connected apps, but especially mobile.
    I have written an online-only section introducing HTTP/3 and showing how to enable
    it in an ASP.NET Core project like `Northwind.Web` when targeting .NET 7 or later.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP/3 为所有互联网连接的应用程序带来了好处，尤其是移动应用。我编写了一个仅在线的章节，介绍了 HTTP/3 并展示了如何在针对 .NET 7 或更高版本的
    `Northwind.Web` ASP.NET Core 项目中启用它。
- en: 'In previews of .NET 8, HTTP/3 was enabled by default, but the Microsoft team
    decided to revert to disabling HTTP/3 by default. They did this due to a bad experience
    caused by some antivirus software. Hopefully, in ASP.NET Core 9, they will resolve
    this issue and re-enable HTTP/3 by default. You can read more about their decision
    at the following link:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 8 的预览版中，HTTP/3 默认启用，但微软团队决定恢复默认禁用 HTTP/3。他们这样做是因为一些杀毒软件带来的不良体验。希望在未来
    ASP.NET Core 9 中，他们能够解决这个问题并默认重新启用 HTTP/3。您可以在以下链接中了解更多关于他们决定的信息：
- en: '[https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default](https://devblogs.microsoft.com/dotnet/asp-net-core-updates-in-dotnet-8-rc-1/#http-3-disabled-by-default)'
- en: 'The page also includes a section about enabling request decompression support.
    You can read the page at the following link:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 页面还包括一个关于启用请求解压缩支持的章节。您可以通过以下链接阅读页面：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-enabling-http3.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-enabling-http3.md)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-enabling-http3.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-enabling-http3.md)'
- en: Introducing Bootstrap
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍 Bootstrap
- en: 'Bootstrap is the world’s most popular framework for building responsive, mobile-first
    websites. You can read an online-only section introducing some of Bootstrap’s
    most important features at the following link:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是构建响应式、移动优先网站的世界最流行框架。您可以在以下链接中阅读一个仅在线的章节，介绍 Bootstrap 的一些最重要的功能：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch13-bootstrap.md)'
- en: Exercise 13.2 – practice exercises
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.2 – 实践练习
- en: Practice exercises go deeper into the topics for this chapter.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 实践练习深入探讨了本章的主题。
- en: Build a data-driven web page
  id: totrans-405
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建数据驱动的网页
- en: Add a Razor Page to the `Northwind.Web` website that enables the user to see
    a list of customers grouped by country. When the user clicks on a customer record,
    they should then see a page showing the full contact details of that customer
    and a list of their orders.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 向 `Northwind.Web` 网站添加一个 Razor 页面，使用户能够查看按国家分组的客户列表。当用户点击客户记录时，他们应该看到显示该客户完整联系信息和订单列表的页面。
- en: 'My suggested solution can be found at the following links:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议的解决方案可以在以下链接中找到：
- en: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Customers.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Customers.razor)'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Customers.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Customers.razor)'
- en: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/CustomerOrders.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/CustomerOrders.razor)'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/CustomerOrders.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/CustomerOrders.razor)'
- en: Build web pages for functions
  id: totrans-410
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 为函数构建网页
- en: Reimplement some of the console apps from earlier chapters as Razor Pages; for
    example, from *Chapter 4**, Writing, Debugging, and Testing Functions*, provide
    a web UI to output times tables, calculate tax, and generate factorials and the
    Fibonacci sequence.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面章节中的一些控制台应用程序作为 Razor Pages 重新实现；例如，从 *第 4 章*，编写、调试和测试函数，提供一个输出乘法表、计算税费和生成阶乘与斐波那契序列的
    Web UI。
- en: 'My suggested solution can be found at the following links:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 我的建议解决方案可以在以下链接中找到：
- en: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Functions.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Functions.razor)'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Functions.razor](https://github.com/markjprice/cs13net9/blob/main/code/ModernWeb/Northwind.Web/Components/Pages/Functions.razor)'
- en: Exercise 13.3 – test your knowledge
  id: totrans-414
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.3 – 测试你的知识
- en: 'Answer the following questions:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 回答以下问题：
- en: List six method names that can be specified in an HTTP request.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六个可以在 HTTP 请求中指定的方法名。
- en: List six status codes and their descriptions that can be returned in an HTTP
    response.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六个可以在 HTTP 响应中返回的状态码及其描述。
- en: In ASP.NET Core, what is the `Program` class used for?
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中，`Program` 类有什么用途？
- en: What does the acronym HSTS stand for and what does it do?
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HSTS 这个缩写代表什么？它有什么作用？
- en: How do you enable static HTML pages for a website?
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何为网站启用静态 HTML 页面？
- en: How do you mix C# code into the middle of HTML to create a dynamic page?
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何将 C# 代码混合到 HTML 中以创建动态页面？
- en: How can you define shared layouts for Blazor components?
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何为 Blazor 组件定义共享布局？
- en: In a Blazor project, what three files do you typically create in a `Components`
    folder and what do they do?
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Blazor 项目中，你通常在 `Components` 文件夹中创建哪三个文件，它们分别做什么？
- en: How do you configure an Entity Framework Core data context for use with an ASP.NET
    Core website?
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何配置 Entity Framework Core 数据上下文以用于 ASP.NET Core 网站？
- en: What are the tasks that you must complete to enable Blazor and its static SSR
    capability in an existing ASP.NET Core Empty project?
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你必须完成哪些任务才能在现有的 ASP.NET Core Empty 项目中启用 Blazor 及其静态 SSR 功能？
- en: Exercise 13.4 – explore topics
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 13.4 – 探索主题
- en: 'Use the links on the following page to learn more about the topics covered
    in this chapter:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下页面上的链接了解更多关于本章涵盖的主题：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-13---building-websites-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-13---building-websites-using-aspnet-core)'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-13---building-websites-using-aspnet-core](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-13---building-websites-using-aspnet-core)'
- en: Summary
  id: totrans-429
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, you learned:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了：
- en: About the foundations of web development using HTTP
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于使用 HTTP 进行 Web 开发的基础
- en: How to build a simple website that returns static files
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何构建一个返回静态文件的简单网站？
- en: How to use ASP.NET Core with Entity Framework Core to create web pages that
    are dynamically generated from information in a database
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Entity Framework Core 与 ASP.NET Core 结合来创建从数据库信息动态生成的网页
- en: In the next chapter, you will learn how to build interactive UI using Blazor.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 Blazor 构建交互式 UI。
