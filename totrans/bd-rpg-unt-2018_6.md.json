["```cs\nusing System;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\n[Serializable]\npublic class BaseItem\n{\npublic enum ItemCatrgory\n{\nWeapon = 0,\nArmour = 1,\nClothing = 2,\nHealth = 3,\nPotion = 4\n}\n[SerializeField]\nprivate string name;\n[SerializeField]\nprivate string description;\npublic string Name\n{\nget { return name; }\nset { name = value; }\n}\npublic string Description\n{\nget { return description; }\nset { description = value; }\n}\n}\n}\n```", "```cs\nusing System;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\n[Serializable]\npublic class InventoryItem : BaseItem\n{\n[SerializeField]\nprivate ItemCatrgory category;\n[SerializeField]\nprivate float strength;\n[SerializeField]\nprivate float weight;\npublic ItemCatrgory Category\n{\nget { return category; }\nset { category = value; }\n}\npublic float Strength\n{\nget { return strength; }\nset { strength = value; }\n}\npublic float Weight\n{\nget { return weight; }\nset { weight = value; }\n}\n}\n}\n```", "```cs\nusing System.Collections.Generic;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\npublic class InventorySystem\n{\n[SerializeField]\nprivate List<InventoryItem> weapons = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> armour = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> clothing = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> health = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> potion = new List<InventoryItem>();\nprivate InventoryItem selectedWeapon;\nprivate InventoryItem selectedArmour;\npublic InventoryItem SelectedWeapon\n{\nget { return selectedWeapon; }\nset { selectedWeapon = value; }\n}\npublic InventoryItem SelectedArmour\n{\nget { return selectedArmour; }\nset { selectedArmour = value; }\n}\npublic InventorySystem()\n{\nClearInventory();\n}\npublic void ClearInventory()\n{\nweapons.Clear();\narmour.Clear();\nclothing.Clear();\nhealth.Clear();\npotion.Clear();\n}\n// this function will add an inventory item\npublic void AddItem(InventoryItem item)\n{\nswitch (item.Category)\n{\ncase BaseItem.ItemCatrgory.Armour:\n{\narmour.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Clothing:\n{\nclothing.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Health:\n{\nhealth.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Potion:\n{\npotion.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Weapon:\n{\nweapons.Add(item);\nbreak;\n}\n}\n}\n```", "```cs\n// this function will remove an inventory item\npublic void DeleteItem(InventoryItem item)\n{\nswitch (item.Category)\n{\ncase BaseItem.ItemCatrgory.Armour:\n{\narmour.Remove(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Clothing:\n{\nclothing.Remove(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Health:\n{\nhealth.Remove(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Potion:\n{\npotion.Remove(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Weapon:\n{\nweapons.Remove(item);\nbreak;\n}\n}\n}\n}\n}\n```", "```cs\npublic static GameMaster instance;\n// let's have a reference to the player character\n// and start position of player character\npublic GameObject PlayerCharacterGameObject;\npublic GameObject StartPosition;\npublic GameObject CharacterCustomization;\npublic PlayerCharacter PlayerCharacterData;\npublic InventorySystem Inventory;\npublic GameLevelController LevelController;\npublic GameAudioController AudioController;\n// Ref to UI Elements ...\npublic bool DisplaySettings = false;\npublic UiController Ui;\nvoid Awake()\n{\n// simple singlton\nif (instance == null)\n{\ninstance = this;\n// initialize level controller\ninstance.LevelController = new GameLevelController();\n// initialize audio controller\ninstance.AudioController = new GameAudioController();\ninstance.AudioController.audioSource = instance.GetComponent<AudioSource>();\ninstance.AudioController.SetDefaultVolume();\n// initialize Inventory System\ninstance.Inventory = new InventorySystem();\nInventoryItem tmpInvItem = new InventoryItem();\ntmpInvItem.Category = BaseItem.ItemCatrgory.Clothing;\ntmpInvItem.Name = \"Testing\";\ntmpInvItem.Description = \"Testing clothing item type\";\ntmpInvItem.Strength = 0.5f;\ntmpInvItem.Weight = 0.2f;\ninstance.Inventory.AddItem(tmpInvItem);\n}\nelse if (instance != this)\n{\nDestroy(this);\n}\n// keep the game object when moving from\n// one scene to the next scene\nDontDestroyOnLoad(this);\n}\n```", "```cs\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\npublic class InventoryItemAgent : MonoBehaviour\n{\npublic InventoryItem Item;\n}\n}\n```", "```cs\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\npublic class InventoryItemAgent : MonoBehaviour\n{\npublic InventoryItem Item;\npublic void OnTriggerEnter(Collider c)\n{\n// make sure we are colliding with the player\nif (c.gameObject.tag.Equals(\"Player\"))\n{\n// Make a copy of the Inventory Item Object\nInventoryItem myItem = new InventoryItem();\nmyItem.CopyInventoryItem(Item);\n// Add the item to our inventory\nGameMaster.instance.Inventory.AddItem(myItem);\n// Destroy the GameObject from the scene\nGameMaster.instance.RpgDestroy(gameObject);\n}\n}\n}\n}\n```", "```cs\npublic void CopyInventoryItem(InventoryItem item)\n{\nCategory = item.Category;\nDescription = item.Description;\nName = item.Name;\nStrength = item.Strength;\nWeight = item.Weight;\n}\n```", "```cs\npublic void RpgDestroy(GameObject obj)\n{\nDestroy(obj);\n}\n```", "```cs\n      public void DisplayInventory() \n      { \n         InventoryCanvas.gameObject.SetActive(GameMaster.instance.DisplayInventory); \n         Debug.Log(\"Display Inventory Function\"); \n      } \n```", "```cs\n         if (GameObject.FindGameObjectWithTag(\"Ui\")) \n         { \n            GameMaster.instance.Ui  \n               = GameObject.FindGameObjectWithTag(\"Ui\").GetComponent<UiController>(); \n         } \n```", "```cs\nvoid Update()\n{\nif (instance.LevelController.CurrentScene.name != SceneName.MainMenu)\n{\nif (Input.GetKeyUp(KeyCode.I))\n{\ninstance.DisplayInventory = !DisplayInventory;\ninstance.Ui.DisplayInventory();\n}\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\n    public class InventoryItemUi : MonoBehaviour\n    {\n        public Text txtItemElement;\n    }\n}\n```", "```cs\npublic Transform InventoryPanelItem\npublic GameObject InventoryItemElement;\n```", "```cs\npublic void Update()\n{\nif (Input.GetKeyUp(KeyCode.H))\n{\nGameObject newButton\n= Instantiate(InventoryItemElement) as GameObject;\nInventoryItemUi txtItem\n= newButton.GetComponent<InventoryItemUi>();\ntxtItem.txtItemElement.text\n= string.Format(\"New Item {0}\", Time.time);\nnewButton.transform.SetParent(InventoryPanelItem);\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\npublic class InventoryItemUi : MonoBehaviour\n{\npublic Image ItemElementImage;\npublic Text ItemElementText;\npublic Button AddButton;\npublic Button DeleteButton;\n}\n}\n```", "```cs\npublic void Update()\n{\nif (Input.GetKeyUp(KeyCode.H))\n{\nGameObject newItem\n= Instantiate(InventoryItemElement) as GameObject;\nInventoryItemUi txtItem\n= newItem.GetComponent<InventoryItemUi>();\ntxtItem.ItemElementText.text\n= string.Format(\"Adding New Item {0}\", Time.time);\n// button triggers\ntxtItem.AddButton.GetComponent<Button>().onClick.AddListener(() => {\nDebug.Log(string.Format(\"You have clicked ADD Button for {0}\",\ntxtItem.ItemElementText.text));\n});\ntxtItem.DeleteButton.GetComponent<Button>().onClick.AddListener(() =>\n{\nDebug.Log(string.Format(\"You have clicked DELETE Button for {0}\",\ntxtItem.ItemElementText.text));\nDestroy(newItem);\n});\n```", "```cs\nnewItem.transform.SetParent(InventoryPanelItem);\n}\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\npublic class UiController : MonoBehaviour\n{\n[Header(\"Settings Window\")]\npublic RectTransform OptionsPanel;\npublic Slider ControlMainVolume;\npublic Slider ControlFXVolume;\n[Header(\"Inventory Window\")]\npublic RectTransform InventoryCanvas;\n[Tooltip(\"root for inventory items\")]\npublic Transform InventoryPanelItem;\n[Tooltip(\"prefab representing invenotry item UI\")]\npublic GameObject InventoryItemElement;\npublic void Update()\n{\nif (Input.GetKeyUp(KeyCode.H))\n{\nGameObject newItem\n= Instantiate(InventoryItemElement) as GameObject;\nInventoryItemUi txtItem\n= newItem.GetComponent<InventoryItemUi>();\ntxtItem.ItemElementText.text\n= string.Format(\"Adding New Item {0}\", Time.time);\n// button triggers\ntxtItem.AddButton.GetComponent<Button>().onClick.AddListener(() => {\nDebug.Log(string.Format(\"You have clicked ADD Button for {0}\",\ntxtItem.ItemElementText.text));\n});\ntxtItem.DeleteButton.GetComponent<Button>().onClick.AddListener(() =>\n{\nDebug.Log(string.Format(\"You have clicked DELETE Button for {0}\",\ntxtItem.ItemElementText.text));\nDestroy(newItem);\n});\nnewItem.transform.SetParent(InventoryPanelItem);\n}\n}\npublic void DisplaySettings()\n{\nGameMaster.instance.DisplaySettings = !GameMaster.instance.DisplaySettings;\nOptionsPanel.gameObject.SetActive(GameMaster.instance.DisplaySettings);\n}\npublic void MainVolume()\n{\nGameMaster.instance.MasterVolume(ControlMainVolume.vale);\n}\npublic void FXVolume()\n{\nGameMaster.instance.SoundFxVolume(ControlFXVolume.value);\n}\n#region INVENTORY UI FUNCTIONS\npublic void DisplayInventory()\n{\nInventoryCanvas.gameObject.SetActive(GameMaster.instan\ne.DisplayInventory);\nDebug.Log(\"Display Inventory Function\");\n}\npublic void DisplayWeaponsCategory()\n{\nif (GameMaster.instance.DisplayInventory)\n{\nClearInventoryPanelItems();\nforeach (InventoryItem item in GameMaster.instance.Inventory.Weapons)\n{\nGameObject newItem\n= Instantiate(InventoryItemElement) as GameObject;\nInventoryItemUI txtItem\n= newItem.GetComponent<InventoryItemUI>();\ntxtItem.txtItemElement.text =\nstring.Format(\"Name: {0}, Description: {1}, Strength: {2}, Weight: {3}\",\nitem.Name,\nitem.Description,\nitem.Strength,\nitem.Weight);\n...\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\n[Serializable]\npublic class InventorySystem\n{\n[SerializeField]\nprivate List<InventoryItem> weapons = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> armour = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> clothing = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> health = new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> potion = new List<InventoryItem>();\npublic List<InventoryItem> Weapons\n{\nget { return weapons; }\n}\npublic List<InventoryItem> Armour\n{\nget { return armour; }\n}\npublic List<InventoryItem> Clothing\n{\nget { return clothing; }\n}\npublic List<InventoryItem> Health\n{\nget { return health; }\n}\npublic List<InventoryItem> Potion\n{\nget { return potion; }\n}\nprivate InventoryItem selectedWeapon;\nprivate InventoryItem selectedArmour;\npublic InventoryItem SelectedWeapon\n{\nget { return selectedWeapon; }\nset { selectedWeapon = value; }\n}\npublic InventoryItem SelectedArmour\n{\nget { return selectedArmour; }\nset { selectedArmour = value; }\n}\npublic InventorySystem()\n{\nClearInventory();\n}\npublic void ClearInventory()\n{\nweapons.Clear();\narmour.Clear();\nclothing.Clear();\nhealth.Clear();\npotion.Clear();\n}\n// this function will add an inventory item\npublic void AddItem(InventoryItem item)\n{\nswitch (item.Category)\n{\ncase BaseItem.ItemCatrgory.Armour:\n{\narmour.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Clothing:\n{\nclothing.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Health:\n{\nhealth.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Potion:\n...\n```", "```cs\nusing System;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\n[Serializable]\npublic class InventoryItem : BaseItem\n{\npublic enum ItemType\n{\nHelmet = 0,\nShield = 1,\nShoulderPad = 2,\nKneePad = 3,\nBoots = 4,\nWeapon = 5\n}\n[SerializeField]\nprivate ItemCatrgory category;\n[SerializeField]\nprivate ItemType type;\n[SerializeField]\nprivate float strength;\n[SerializeField]\nprivate float weight;\npublic ItemCatrgory Category\n{\nget { return category; }\nset { category = value; }\n}\npublic ItemType Type\n{\nget { return type; }\nset { type = value; }\n}\npublic float Strength\n{\nget { return strength; }\nset { strength = value; }\n}\npublic float Weight\n{\nget { return weight; }\nset { weight = value; }\n}\npublic void CopyInventoryItem(InventoryItem item)\n{\nCategory = item.Category;\nDescription = item.Description;\nName = item.Name;\nStrength = item.Strength;\nWeight = item.Weight;\n}\n}\n}\n```", "```cs\nusing System;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\npublic delegate void WeaponChangedEventHandler(PlayerCharacter.WeaponType weapon);\n[Serializable]\npublic class PlayerCharacter : BaseCharacter\n{\npublic enum ShoulderPad\n{\nnone = 0,\nSP01 = 1,\nSP02 = 2,\nSP03 = 3,\nSP04 = 4\n};\n// Older version of the model\npublic enum BodyType { normal = 1, BT01 = 2, BT02 = 3 };\n// New support for character model\npublic float BodyFat = 0.0f;\npublic float BodySkinny = 0.0f;\n// Shoulder Pad\npublic ShoulderPad selectedShoulderPad = ShoulderPad.none;\npublic BodyType selectedBodyType = BodyType.normal;\npublic bool kneePad = false;\npublic bool legPlate = false;\npublic enum WeaponType\n{\nnone = 0,\naxe1 = 1,\naxe2 = 2,\nclub1 = 3,\nclub2 = 4,\nfalchion = 5,\ngladius = 6,\nmace = 7,\nmaul = 8,\nscimitar = 9,\nspear = 10,\nsword1 = 11,\nsword2 = 12,\nsword3 = 13\n};\n[SerializeField]\nprivate WeaponType selectedWeapon = WeaponType.none;\npublic WeaponType SelectedWeapon\n{\nget { return selectedWeapon; }\nset { selectedWeapon = value; }\n}\npublic enum HelmetType { none = 0, HL01 = 1, HL02 = 2, HL03 = 3, HL04 = 4 };\n[SerializeField]\nprivate HelmetType selectedHelmet = HelmetType.none;\npublic HelmetType SelectedHelmet\n{\nget { return selectedHelmet; }\nset { selectedHelmet = value; }\n}\npublic enum ShieldType { none = 0, SL01 = 1, SL02 = 2 };\n[SerializeField]\nprivate ShieldType selectedShield = ShieldType.none;\npublic ShieldType SelectedShield\n{\nget { return selectedShield; }\nset { selectedShield = value; }\n}\npublic int SkinId = 1;\npublic enum ClothingType { none=0, CT01=1, CT02=2, CT03=3, CT04=4 };\n[SerializeField]\nprivate ClothingType selectedClothing = ClothingType.none;\npublic ClothingType SelectedClothing\n{\nget { return selectedClothing; }\nset { selectedClothing = value; }\n}\npublic enum ShoeType { none = 0, BT01 = 1, BT02 = 2 };\n[SerializeField]\nprivate ShoeType selectedShoe = ShoeType.none;\npublic ShoeType SelectedShoe\n{\nget { return selectedShoe; }\nset { selectedShoe = value; }\n}\n[SerializeField]\nprivate InventoryItem selectedArmour;\npublic InventoryItem SelectedArmour\n{\nget { return selectedArmour; }\nset { selectedArmour = value; }\n}\n}\n}\n```", "```cs\n        void DisableWeapons()\n        {\n            AXE_01LOD0.SetActive(false);\n            AXE_02LOD0.SetActive(false);\n            CLUB_01LOD0.SetActive(false);\n            CLUB_02LOD0.SetActive(false);\n            FALCHION_LOD0.SetActive(false);\n            GLADIUS_LOD0.SetActive(false);\n            MACE_LOD0.SetActive(false);\n            MAUL_LOD0.SetActive(false);\n            SCIMITAR_LOD0.SetActive(false);\n            SPEAR_LOD0.SetActive(false);\n            SWORD_BASTARD_LOD0.SetActive(false);\n            SWORD_BOARD_01LOD0.SetActive(false);\n            SWORD_SHORT_LOD0.SetActive(false);\n        }\n\n    public void SetWeaponType(Slider id)\n    {\n      try\n      {\n        PlayerCharacter.WeaponType weapon = (PlayerCharacter.WeaponType)Convert.ToInt32(id.value);\n\n        PlayerCharacterData.SelectedWeapon = weapon;\n      }\n      catch\n      {\n        PlayerCharacterData.SelectedWeapon = PlayerCharacter.WeaponType.none;\n      }\n\n            // disable weapons\n            DisableWeapons();\n\n      switch (Convert.ToInt32(id.value))\n      {\n        case 0:\n          {\n                        DisableWeapons();\n            break;\n          }\n        case 1:\n          {\n            AXE_01LOD0.SetActive(true);\n            break;\n          }\n        case 2:\n          {\n            AXE_02LOD0.SetActive(true);\n            break;\n          }\n        case 3:\n          {\n            CLUB_01LOD0.SetActive(true);\n            break;\n          }\n        case 4:\n          {\n            CLUB_02LOD0.SetActive(true);\n            break;\n          }\n        case 5:\n          {\n            FALCHION_LOD0.SetActive(true);\n            break;\n          }\n        case 6:\n          {\n            GLADIUS_LOD0.SetActive(true);\n            break;\n          }\n        case 7:\n          {\n            MACE_LOD0.SetActive(true);\n            break;\n          }\n        case 8:\n          {\n            MAUL_LOD0.SetActive(true);\n            break;\n          }\n        case 9:\n          {\n            SCIMITAR_LOD0.SetActive(true);\n            break;\n          }\n        case 10:\n          {\n            SPEAR_LOD0.SetActive(true);\n            break;\n          }\n        case 11:\n          {\n            SWORD_BASTARD_LOD0.SetActive(true);\n            break;\n          }\n        case 12:\n          {\n            SWORD_BOARD_01LOD0.SetActive(true);\n            break;\n          }\n        case 13:\n          {\n            SWORD_SHORT_LOD0.SetActive(true);\n            break;\n          }\n      }\n    }\n```", "```cs\n  public void DisplayWeaponsCategory() \n  { \n    if(GameMaster.instance.DISPLAY_INVENTORY) \n    { \n      this.ClearInventoryItemsPanel(); \n\n      foreach (InventoryItem item in GameMaster.instance.INVENTORY.WEAPONS) \n      { \n        GameObject objItem = GameObject.Instantiate(this.InventoryItemElement) as GameObject; \n        InventoryItemUI invItem = objItem.GetComponent<InventoryItemUI>(); \n        invItem.txtItemElement.text = \n          string.Format(\"Name: {0}, Description: {1}, Strength: {2}, Weight: {3}\", \n                                  item.NAME, \n                                  item.DESCRIPTION, \n                                  item.STRENGTH, \n                                  item.WEIGHT); \n\n        invItem.item = item; \n\n        // add button triggers \n        invItem.butAdd.GetComponent<Button>().onClick.AddListener(() => \n        { \n          Debug.Log(string.Format(\"You have clicked button add for {0}, {1}\", invItem.txtItemElement.text, invItem.item.NAME)); \n\n          // let's apply the selected item to the player character \n          GameMaster.instance.PC_CC.SELECTED_WEAPON = (PC.WEAPON_TYPE)Enum.Parse(typeof(PC.WEAPON_TYPE), invItem.item.NAME); \n          GameMaster.instance.PlayerWeaponChanged(); \n        }); \n\n        // delete button triggers \n        invItem.butDelete.GetComponent<Button>().onClick.AddListener(() => \n        { \n          Debug.Log(string.Format(\"You have clicked button delete for {0}\", invItem.txtItemElement.text)); \n          Destroy(objItem); \n        }); \n\n        objItem.transform.SetParent(this.PanelItem); \n      } \n\n    } \n  }  \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \nusing UnityEngine.SceneManagement; \n\nusing System.Collections; \nusing System; \n\npublic class GameMaster : MonoBehaviour \n{ \n  public static GameMaster instance; \n\n  // let's have a reference to the player character GameObject \n  public GameObject PC_GO; \n\n  // reference to player Character Customization \n  public PC PC_CC; \n  public InventorySystem INVENTORY; \n\n  public GameObject START_POSITION; \n\n  public GameObject CHARACTER_CUSTOMIZATION; \n\n  public LevelController LEVEL_CONTROLLER; \n  public AudioController AUDIO_CONTROLLER; \n\n  // Ref to UI Elements ... \n  public bool DISPLAY_SETTINGS = false; \n  public bool DISPLAY_INVENTORY = false; \n\n  public UIController UI; \n\n  void Awake() \n  { \n    // simple singlton \n    if (instance == null) \n    { \n      instance = this; \n\n      instance.DISPLAY_INVENTORY = false; \n      instance.DISPLAY_SETTINGS = false; \n\n      // initialize Level Controller \n      instance.LEVEL_CONTROLLER = new LevelController(); \n\n      // initialize Audio Controller \n      instance.AUDIO_CONTROLLER = new AudioController(); \n      instance.AUDIO_CONTROLLER.AUDIO_SOURCE = GameMaster.instance.GetComponent<AudioSource>(); \n      instance.AUDIO_CONTROLLER.SetDefaultVolume(); \n\n      // initialize Inventory System \n      instance.INVENTORY = new InventorySystem(); \n\n    } \n    else if (instance != this) \n    { \n      Destroy(this); \n    } \n\n    // keep the game object when moving from \n    // one scene to the next scene \n    DontDestroyOnLoad(this); \n  } \n\n....\n```", "```cs\n  // for each level/scene that has been loaded \n  // do some of the preparation work \n  void OnLevelWasLoaded() \n  { \n    GameMaster.instance.LEVEL_CONTROLLER.OnLevelWasLoaded(); \n  } \n\n  // Use this for initialization \n  void Start() \n  { \n    // let's find a reference to the UI controller of the loaded scene \n    if (GameObject.FindGameObjectWithTag(\"UI\") != null) \n    { \n      GameMaster.instance.UI = GameObject.FindGameObjectWithTag(\"UI\").GetComponent<UIController>(); \n    } \n\n    GameMaster.instance.UI.SettingsCanvas.gameObject.SetActive(GameMaster.instance.DISPLAY_SETTINGS); \n  } \n\n  // Update is called once per frame \n  void Update() \n  { \n    // only when we are in the game level \n    if(instance.LEVEL_CONTROLLER.CURRENT_SCENE.name==SceneName.Level_1) \n    { \n      if (Input.GetKeyUp(KeyCode.J)) \n      { \n        //Debug.Log(\"Pressing J\"); \n        instance.DISPLAY_INVENTORY = !instance.DISPLAY_INVENTORY; \n        instance.UI.DisplayInventory(); \n      } \n    } \n  } \n\n  public void MasterVolume(float volume) \n  { \n    GameMaster.instance.AUDIO_CONTROLLER.MasterVolume(volume); \n  } \n\n  public void StartGame() \n  { \n    GameMaster.instance.LoadLevel(); \n  } \n\n  public void LoadLevel() \n  { \n    GameMaster.instance.LEVEL_CONTROLLER.LoadLevel(); \n  } \n\n  public void RPG_Destroy(GameObject obj) \n  { \n    Destroy(obj); \n  } \n} \n```"]