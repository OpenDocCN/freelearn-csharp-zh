["```cs\napp.MapGet(\"/todoitems/{id}\", (int id) =>\n{\n    TodoItem item = GetById(id);\n    if(item != null)\n    {\n        return Results.Ok(item);\n    }\n    return Results.NotFound();\n});\n```", "```cs\napp.MapGet(\n    \"/todoitems/{id}\",\n    (HttpRequest request) =>\n{\n    if(int.TryParse(\n        request.RouteValues[\"id\"].ToString(),\n        out var id) == false)\n    {\n        return Results.BadRequest(\n            \"Could not convert id to integer\");\n    }\n    TodoItem item = GetById(id);\n    return Results.Ok(item);\n});\n```", "```cs\n  app.MapGet(\n      \"/todoitems/{id}\",\n      (int id, string? assignee) =>\n  {\n      var index = TodoItems.FindIndex(x => x.Id == id);\n      if (index == -1)\n      {\n          return Results.NotFound();\n      }\n      var todoItem = TodoItems[index];\n      if (assignee != null)\n      {\n          if(todoItem.Assignee != assignee)\n          {\n              return Results.NotFound();\n          }\n      }\n      return Results.Ok(ToDoItems[index]);\n  });\n```", "```cs\napp.MapGet(\"/todoItems\", (HttpRequest request) =>\n{\n    bool pastDue = false;\n    int priority = 0;\n    var todoItemsQuery = ToDoItems.AsQueryable();\n    if (request.Query.ContainsKey(\"pastDue\"))\n    {\n        var parsedDueDate = bool.TryParse(\n            request.Query[\"pastDue\"],\n            out pastDue\n        );\n        if (parsedDueDate) {\n            todoItemsQuery = todoItemsQuery.Where(\n                x => x.DueDate <= DateTime.Now\n            );\n        }\n    }\n    if (request.Query.ContainsKey(\"priority\"))\n    {\n        var parsedPriority = int.TryParse(\n            request.Query[\"priority\"],\n            out priority\n        );\n        if (parsedPriority) {\n            todoItemsQuery = todoItemsQuery.Where(\n                x => x.Priority == priority\n            );\n        }\n    }\n    var result = todoItemsQuery.ToList();\n    return Results.Ok(result);\n});\n```", "```cs\napp.MapGet(\"/todoItems\", (HttpRequest request) =>\n{\n    var customHeader = request.Headers[\"SomeCustomHeader\"];\n    var result = todoItemsQuery.ToList();\n    return Results.Ok(result);\n});\n```", "```cs\napp.MapPost(\"/todoitems\", (TodoItem item) =>\n{\n    var validationContext = new ValidationContext(item);\n    var validationResults = new List<ValidationResult>();\n    var isValid = Validator.TryValidateObject(\n        item, validationContext, validationResults, true);\n    if (isValid)\n    {\n        TodoItems.Add(item);\n        return Results.Created();\n    }\n    return Results.BadRequest(validationResults);\n});\n```", "```cs\napp.MapPatch(\n    \"/updateTodoItemDueDate\",\n    async (HttpRequest request) =>\n{\n    var formData = await request.ReadFormAsync();\n    var id = int.Parse(formData[\"Id\"]);\n    var newDueDate =\n        DateTime.Parse(formData[\"newDueDate\"]);\n    var index = TodoItems.FindIndex(x => x.Id == id);\n    if (index == -1)\n    {\n        return Results.NotFound();\n    }\n    TodoItems[index].DueDate = newDueDate;\n    return Results.NoContent();\n});\n```", "```cs\napp.MapGet(\n    \"/todoItems\",\n    ([FromQuery(Name = \"pastDue\")] bool pastDue,\n     [FromQuery(Name = \"priority\")] int priority  ) =>\n{\n    var todoItemsQuery = ToDoItems.AsQueryable();\n    if (pastDue)\n    {\n        todoItemsQuery = todoItemsQuery.Where(\n            x => x.DueDate <= DateTime.Now\n        );\n    }\n    if (priority > 0)\n    {\n        todoItemsQuery = todoItemsQuery.Where(\n            x => x.Priority == priority\n        );\n    }\n    var result = todoItemsQuery.ToList();\n    return Results.Ok(result);\n});\n```", "```cs\napp.MapPost(\n    \"/todoitems\",\n    (TodoItem item,\n      [FromHeader(Name =\"TriggerBackgroundTask\")]\n      bool triggerBackgroundTaskHeader ) =>\n{\n    if ( triggerBackgroundTaskHeader)\n    {\n        // do something else in the background\n    }\n    ToDoItems.Add(item);\n    return Results.Created();\n});\n```", "```cs\npublic class TodoItemService\n{\n    List<TodoItem> todoItems = new List<TodoItem>();\n    public TodoItem GetById(int id)\n    {\n        return todoItems.FirstOrDefault(x => x.Id == id);\n    }\n    public List<TodoItem> GetTodoItems(\n        bool pastDue, int priority)\n    {\n        var todoItemsQuery = todoItems.AsQueryable();\n        if (pastDue)\n        {\n            todoItemsQuery = todoItemsQuery.Where(\n                x => x.DueDate <= DateTime.Now\n            );\n        }\n        if (priority > 0)\n        {\n            todoItemsQuery = todoItemsQuery.Where(\n                x => x.Priority == priority);\n        }\n        return todoItemsQuery.ToList();\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<TodoItemService>();\n```", "```cs\napp.MapGet(\n    \"/todoItems\",\n    ([FromQuery(Name = \"pastDue\")] bool pastDue,\n     [FromQuery(Name = \"priority\")] int priority,\n     [FromServices] TodoService todoItemService) =>\n{\n    var todoItemsQuery =\n        todoItemService.TodoItems.AsQueryable();\n    if (pastDue)\n    {\n        todoItemsQuery = todoItemsQuery.Where(\n            x => x.DueDate <= DateTime.Now\n        );\n    }\n    if (priority > 0)\n    {\n        todoItemsQuery = todoItemsQuery.Where(\n            x => x.Priority == priority\n        );\n    }\n    var result =\n        todoItemService.GetTodoItems(todoItemsQuery);\n    return Results.Ok(result);\n});\n```", "```cs\npublic static async ValueTask<TodoItem> BindAsync(\n    HttpContext context, ParameterInfo parameter)\n{\n}\n```", "```cs\npublic static async ValueTask<TodoItem> BindAsync(\n    HttpContext context, ParameterInfo parameter)\n{\n    try\n    {\n    }\n    catch (JsonException)\n    {\n}\n}\n```", "```cs\nvar requestBody = await new StreamReader(\n    context.Request.Body\n).ReadToEndAsync();\nvar todoItem = JsonSerializer.Deserialize<TodoItem>(\n    requestBody,\n    new JsonSerializerOptions\n    {\n        PropertyNameCaseInsensitive = true\n    }\n);\nif (todoItem == null)\n{\n    context.Response.StatusCode = 400;\n    await context.Response.WriteAsync(\"Invalid JSON\");\n    return new TodoItem();\n}\n```", "```cs\nvar validationResults = new List<ValidationResult>();\nvar validationContext = new ValidationContext(\n    todoItem,\n    serviceProvider: null,\n    items: null\n);\nif (!Validator.TryValidateObject(\n    todoItem,\n    validationContext,\n    validationResults,\n    validateAllProperties: true\n))\n{\n    context.Response.StatusCode = 400;\n    var errorMessages = string.Join(\n        \"; \",\n        validationResults.Select(x => x.ErrorMessage)\n    );\n    await context.Response.WriteAsync(errorMessages);\n    return new TodoItem();\n}\nreturn todoItem;\n```", "```cs\n  context.Response.StatusCode = 400;\n  await context.Response.WriteAsync(\"Invalid JSON\");\n  return new TodoItem();\n```"]