- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to *C# Multithreaded and Parallel Programming*. This book will take
    you through all of the ways to perform multithreaded and concurrent programming
    using the C# programming language and the .NET Framework. We will start with a
    description of what concurrent and parallel programming is, why it is important,
    and when you should implement it. We will then go through the different classes
    provided by the .NET Framework and the different design patterns commonly used
    when developing multithreaded applications.
  prefs: []
  type: TYPE_NORMAL
- en: Most modern machines have dual-core processors. This means that the present-day
    computer has the ability to multitask. Using multiple cores means your applications
    can process data faster and be more responsive to users. However, to fully exploit
    this in your applications, you need to write multithreaded code.
  prefs: []
  type: TYPE_NORMAL
- en: This will take us on a journey from the BackgroundWorker component, the Thread
    class, the Task Parallel Library, to the async and await keywords. We will also
    explore common design patterns such as Pipelining, producer-consumer, and the
    IAsyncResult interface.
  prefs: []
  type: TYPE_NORMAL
- en: Using the concurrent and parallel classes provided by .NET allows you to easily
    write powerful multithreaded applications. In the latest version of .NET, Microsoft
    has added the Task Parallel Library and the async keyword to make concurrent programming
    functionality much easier than using threads.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover all aspects of developing multithreaded applications using the
    latest version of .NET in this book.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Understanding Multiprocessing and Multiple
    Cores"), *Understanding Multiprocessing and Multiple Cores*, covers the evolution
    of computer hardware from single-processor systems to multiprocessor and multiple-core
    systems. It will also discuss how the Windows Scheduler allots time to threads.
    This chapter then discusses design considerations for concurrency, how to take
    advantage of multiprocessor/multiple core systems, and the expected performance
    improvements these designs can realize. During this chapter, we will walk through
    a simple single-threaded and then multithreaded example to show how performance
    is improved.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Looking at Multithreaded Classes – BackgroundWorker"),
    *Looking at Multithreaded Classes – BackgroundWorker*, enables us to examine the
    basics of multithreaded programming with the BackgroundWorker class. We will go
    through a WPF example showing how we can update a UI while processing is going
    on in the background. This chapter will discuss the basics of coordinating work
    between multiple processes and the concept of concurrency.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Thread Class – Heavyweight Concurrency in
    C#"), *Thread Class – Heavyweight Concurrency in C#*, allows us to examine and
    work with the Thread class and namespace. We will learn how to create threads,
    coordinate between threads, share data between threads, and stop threads. This
    chapter will explore the idea of heavyweight concurrency versus lightweight concurrency,
    which will be explained in detail later in the book. We will focus on manually
    using and coordinating multiple threads in an application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Advanced Thread Processing"), *Advanced Thread
    Processing*, explains in detail the concept of heavyweight concurrency and working
    with multiple threads using the Thread class. This chapter will further expand
    the image processing application to demonstrate how to coordinate between threads
    and wait on threads to complete by avoiding deadlocks, locking, and error handling.
    This chapter will leave the reader with a clear understanding of how to develop
    applications with multiple threads and have complete control over their execution
    and interaction.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Lightweight Concurrency – Task Parallel Library
    (TPL)"), *Lightweight Concurrency – Task Parallel Library (TPL)*, introduces the
    Task Parallel Library and the next evolution of multithreaded programming in C#/.NET.
    Now that we have a full understanding of how to develop, manage, and control applications
    with many threads, we will learn how to take advantage of the Parallel namespace
    in .NET to do a lot of the heavy lifting for us. We will introduce the idea of
    lightweight concurrency by leveraging the Parallel classes that .NET now provides.
    This will allow us to focus more on designing an efficient and powerful application
    and less on coordinating individual threads.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Task-based Parallelism"), *Task-based Parallelism*,
    enables us to examine the Task Parallel Library and task parallelism. A task is
    an asynchronous set of operations that can be run concurrently with other tasks.
    We will examine designing an application as a series of tasks that can be performed
    in parallel. With the help of examples, we will demonstrate how to create, manage,
    and coordinate tasks. We will further examine additional topics with the Task
    Parallel Library and task parallelism. We will learn how to perform exception
    handling when running multiple tasks, how to schedule tasks under certain conditions,
    and how to cancel running tasks before they complete when needed.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Data Parallelism"), *Data Parallelism*, explores
    the concept of data parallelism. We will see how to perform the same operations
    on elements of a collection concurrently using the Task Parallel Library. The
    Parallel class has the For and ForEach loops, and we will show examples of each
    to demonstrate how they handle concurrent data processing. We will convert our
    image processing application from heavyweight to lightweight concurrency using
    the Task Parallel Library instead of the Thread class.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Debugging Multithreaded Applications with
    Visual Studio"), *Debugging Multithreaded Applications with Visual Studio*, teaches
    us how to take full advantage of Visual Studio 2012 to debug our multithreaded
    applications. We will demonstrate using the Threads view, and the Tasks, Parallel
    Stacks, and Parallel Watch windows. We will finish with debugging our image processing
    application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Pipeline and Producer-consumer Design Patterns"),
    *Pipeline and Producer-consumer Design Patterns*, helps us explore two of the
    most popular parallel patterns for development—Pipelining and producer-consumer.
    In Pipelining, we will see how to accomplish a parallel task where a simple parallel
    loop will not work due to data dependencies. The producer-consumer pattern allows
    a producer, which is generating results, to run along with the consumer so that
    the consumer can consume the results concurrently. We will expand our image processing
    application to implement these two patterns in combination.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Parallel LINQ – PLINQ"), *Parallel LINQ
    – PLINQ*, details the benefits and functionality provided by Parallel LINQ (PLINQ).
    We will see how PLINQ speeds up traditional LINQs by separating the data source
    into sections and executing the query on each section. We will also discuss what
    kind of queries to use PLINQ for because not all queries will run faster using
    PLINQ.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](ch11.html "Chapter 11. The Asynchronous Programming Model"), *The
    Asynchronous Programming Model*, explains the Asynchronous Programming Model (APM),
    which is a design pattern that is based on classes implementing the IAsyncResult
    interface. We will see how to begin and end asynchronous operations and use delegates
    to call methods asynchronously. This chapter will also cover the new async and
    await keywords and how to use them to implement an asynchronous design in your
    custom classes.'
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this book, you will need a working knowledge of C#, .NET, and Visual Studio,
    and a desire to learn all of the different methods and techniques .NET provides
    to improve application performance through parallel multithreaded techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for developers who have a working knowledge of C# and
    the .NET Framework. We assume that you understand the basics of C# programming
    and the Visual Studio development environment.
  prefs: []
  type: TYPE_NORMAL
- en: This book is for developers looking to expand their toolbox with all of the
    techniques and methods available in .NET to develop and transition the existing
    code into multithreaded and concurrent programs. If you are looking for ways to
    increase the performance and scalability of your applications using today's multiple
    CPU and multicore processors, then this is the book for you.
  prefs: []
  type: TYPE_NORMAL
- en: This book is also designed for developers with knowledge of the original multithreaded
    techniques used in the earlier versions of .NET and who want to update their knowledge
    with all of the new classes that the latest versions of .NET provide, most notably
    the Task Parallel Library and the async and await keywords. If you need to update
    older applications with today's latest .NET parallel techniques, then this is
    a good guide for you.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "This
    will require us to work with the `BackgroundWorker` component."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Create a new WPF application C# project in Visual Studio (**File** | **New**
    | **Project** | **Visual C#** | **WPF Application**)."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
