["```cs\n[ExecuteInEditMode]\npublic class RenderOldFilm : MonoBehaviour {\n```", "```cs\n#region Variables \npublic Shader curShader; // old film shader\n\npublic float OldFilmEffectAmount = 1.0f;\n\npublic Color sepiaColor = Color.white;\npublic Texture2D vignetteTexture;\npublic float vignetteAmount = 1.0f;\n\npublic Texture2D scratchesTexture;\npublic float scratchesYSpeed = 10.0f;\npublic float scratchesXSpeed = 10.0f;\n\npublic Texture2D dustTexture;\npublic float dustYSpeed = 10.0f;\npublic float dustXSpeed = 10.0f;\n\nprivate Material screenMat;\nprivate float randomValue;\n#endregion\n```", "```cs\nvoid OnRenderImage(RenderTexture sourceTexture, RenderTexture destTexture)\n{\n    if (curShader != null)\n    {\n        ScreenMat.SetColor(\"_SepiaColor\", sepiaColor);\n        ScreenMat.SetFloat(\"_VignetteAmount\", vignetteAmount);\n        ScreenMat.SetFloat(\"_EffectAmount\", OldFilmEffectAmount);\n\n        if (vignetteTexture)\n        {\n            ScreenMat.SetTexture(\"_VignetteTex\", vignetteTexture);\n        }\n\n        if (scratchesTexture)\n        {\n            ScreenMat.SetTexture(\"_ScratchesTex\", scratchesTexture);\n            ScreenMat.SetFloat(\"_ScratchesYSpeed\", scratchesYSpeed);\n            ScreenMat.SetFloat(\"_ScratchesXSpeed\", scratchesXSpeed);\n        }\n\n        if (dustTexture)\n        {\n            ScreenMat.SetTexture(\"_DustTex\", dustTexture);\n            ScreenMat.SetFloat(\"_dustYSpeed\", dustYSpeed);\n            ScreenMat.SetFloat(\"_dustXSpeed\", dustXSpeed);\n            ScreenMat.SetFloat(\"_RandomValue\", randomValue);\n        }\n\n        Graphics.Blit(sourceTexture, destTexture, ScreenMat);\n    }\n    else\n    {\n        Graphics.Blit(sourceTexture, destTexture);\n    }\n}\n```", "```cs\nvoid Update()\n{\n    vignetteAmount = Mathf.Clamp01(vignetteAmount);\n    OldFilmEffectAmount = Mathf.Clamp(OldFilmEffectAmount, 0f, 1.5f);\n    randomValue = Random.Range(-1f, 1f);\n}\n```", "```cs\nProperties \n{ \n    _MainTex (\"Base (RGB)\", 2D) = \"white\" {} \n    _VignetteTex (\"Vignette Texture\", 2D) = \"white\"{} \n    _ScratchesTex (\"Scratches Texture\", 2D) = \"white\"{} \n    _DustTex (\"Dust Texture\", 2D) = \"white\"{} \n    _SepiaColor (\"Sepia Color\", Color) = (1,1,1,1) \n    _EffectAmount (\"Old Film Effect Amount\", Range(0,1)) = 1.0 \n    _VignetteAmount (\"Vignette Opacity\", Range(0,1)) = 1.0 \n    _ScratchesYSpeed (\"Scratches Y Speed\", Float) = 10.0 \n    _ScratchesXSpeed (\"Scratches X Speed\", Float) = 10.0 \n    _dustXSpeed (\"Dust X Speed\", Float) = 10.0 \n    _dustYSpeed (\"Dust Y Speed\", Float) = 10.0 \n    _RandomValue (\"Random Value\", Float) = 1.0 \n    _Contrast (\"Contrast\", Float) = 3.0 \n} \n```", "```cs\nPass\n{\n  CGPROGRAM \n  #pragma vertex vert_img \n  #pragma fragment frag \n  #pragma fragmentoption ARB_precision_hint_fastest \n  #include \"UnityCG.cginc\" \n\n  uniform sampler2D _MainTex; \n  uniform sampler2D _VignetteTex; \n  uniform sampler2D _ScratchesTex; \n  uniform sampler2D _DustTex; \n  fixed4 _SepiaColor; \n  fixed _VignetteAmount; \n  fixed _ScratchesYSpeed; \n  fixed _ScratchesXSpeed; \n  fixed _dustXSpeed; \n  fixed _dustYSpeed; \n  fixed _EffectAmount; \n  fixed _RandomValue; \n  fixed _Contrast; \n```", "```cs\nfixed4 frag(v2f_img i) : COLOR \n{ \n    //Get the colors from the RenderTexture and the uv's \n    //from the v2f_img struct \n    fixed4 renderTex = tex2D(_MainTex, i.uv); \n\n    //Get the pixels from the Vignette Texture \n    fixed4 vignetteTex = tex2D(_VignetteTex, i.uv); \n```", "```cs\n//Process the Scratches UV and pixels \nhalf2 scratchesUV = half2(i.uv.x + (_RandomValue * _SinTime.z * _ScratchesXSpeed), i.uv.y + (_Time.x * _ScratchesYSpeed)); \nfixed4 scratchesTex = tex2D(_ScratchesTex, scratchesUV); \n\n//Process the Dust UV and pixels \nhalf2 dustUV = half2(i.uv.x + (_RandomValue * (_SinTime.z * _dustXSpeed)), i.uv.y + (_RandomValue * (_SinTime.z * _dustYSpeed))); \nfixed4 dustTex = tex2D(_DustTex, dustUV); \n```", "```cs\n// get the luminosity values from the render texture using the YIQ values. \nfixed lum = dot (fixed3(0.299, 0.587, 0.114), renderTex.rgb); \n\n//Add the constant color to the lum values \nfixed4 finalColor = lum + lerp(_SepiaColor, _SepiaColor + \n fixed4(0.1f,0.1f,0.1f,1.0f), _RandomValue); \nfinalColor = pow(finalColor, _Contrast); \n```", "```cs\n  //Create a constant white color we can use to adjust opacity of effects \n  fixed3 constantWhite = fixed3(1,1,1); \n\n  //Composite together the different layers to create finsl Screen Effect \n  finalColor = lerp(finalColor, finalColor * vignetteTex, _VignetteAmount); \n  finalColor.rgb *= lerp(scratchesTex, constantWhite, (_RandomValue)); \n  finalColor.rgb *= lerp(dustTex.rgb, constantWhite, (_RandomValue * _SinTime.z)); \n  finalColor = lerp(renderTex, finalColor, _EffectAmount); \n\n  return finalColor; \n}\n```", "```cs\nfixed4 frag(v2f_img i) : COLOR \n{ \n    //Get the colors from the RenderTexture and the uv's \n    //from the v2f_img struct \n    fixed4 renderTex = tex2D(_MainTex, i.uv); \n\n    //Get the pixels from the Vignette Texture \n    fixed4 vignetteTex = tex2D(_VignetteTex, i.uv); \n```", "```cs\nfrag() function:\n```", "```cs\n//Process the Scratches UV and pixels \nhalf2 scratchesUV = half2(i.uv.x + (_RandomValue * _SinTime.z * _ScratchesXSpeed), \n        i.uv.y + (_Time.x * _ScratchesYSpeed)); \nfixed4 scratchesTex = tex2D(_ScratchesTex, scratchesUV); \n\n//Process the Dust UV and pixels \nhalf2 dustUV = half2(i.uv.x + (_RandomValue * (_SinTime.z * _dustXSpeed)),  \n        i.uv.y + (_RandomValue * (_SinTime.z * _dustYSpeed))); \nfixed4 dustTex = tex2D(_DustTex, dustUV); \n```", "```cs\n// get the luminosity values from the render texture using the YIQ values \nfixed lum = dot (fixed3(0.299, 0.587, 0.114), renderTex.rgb); \n\n//Add the constant color to the lum values \nfixed4 finalColor = lum + lerp(_SepiaColor, _SepiaColor +\n     fixed4(0.1f,0.1f,0.1f,1.0f), _RandomValue);\n```", "```cs\n//Create a constant white color we can use to adjust opacity of effects \nfixed3 constantWhite = fixed3(1,1,1); \n\n//Composite together the different layers to create finsl Screen Effect \nfinalColor = lerp(finalColor, finalColor * vignetteTex, _VignetteAmount); \nfinalColor.rgb *= lerp(scratchesTex, constantWhite, (_RandomValue)); \nfinalColor.rgb *= lerp(dustTex.rgb, constantWhite, (_RandomValue * _SinTime.z)); \nfinalColor = lerp(renderTex, finalColor, _EffectAmount); \n\nreturn finalColor \n```", "```cs\n[ExecuteInEditMode]\npublic class RenderNightVision : MonoBehaviour {\n```", "```cs\n#region Variables \n    public Shader curShader; \n\n    public float contrast = 3.0f; \n    public float brightness = 0.1f; \n    public Color nightVisionColor = Color.green; \n\n    public Texture2D vignetteTexture; \n\n    public Texture2D scanLineTexture; \n    public float scanLineTileAmount = 4.0f; \n\n    public Texture2D nightVisionNoise; \n    public float noiseXSpeed = 100.0f; \n    public float noiseYSpeed = 100.0f; \n\n    public float distortion = 0.2f; \n    public float scale = 0.8f; \n\n    private float randomValue = 0.0f; \n    private Material screenMat; \n    #endregion \n```", "```cs\nvoid OnRenderImage(RenderTexture sourceTexture, RenderTexture destTexture)\n{\n    if (curShader != null)\n    {\n        ScreenMat.SetFloat(\"_Contrast\", contrast);\n        ScreenMat.SetFloat(\"_Brightness\", brightness);\n        ScreenMat.SetColor(\"_NightVisionColor\", nightVisionColor);\n        ScreenMat.SetFloat(\"_RandomValue\", randomValue);\n        ScreenMat.SetFloat(\"_distortion\", distortion);\n        ScreenMat.SetFloat(\"_scale\", scale);\n\n        if (vignetteTexture)\n        {\n            ScreenMat.SetTexture(\"_VignetteTex\", vignetteTexture);\n        }\n\n        if (scanLineTexture)\n        {\n            ScreenMat.SetTexture(\"_ScanLineTex\", scanLineTexture);\n            ScreenMat.SetFloat(\"_ScanLineTileAmount\", scanLineTileAmount);\n        }\n\n        if (nightVisionNoise)\n        {\n            ScreenMat.SetTexture(\"_NoiseTex\", nightVisionNoise);\n            ScreenMat.SetFloat(\"_NoiseXSpeed\", noiseXSpeed);\n            ScreenMat.SetFloat(\"_NoiseYSpeed\", noiseYSpeed);\n        }\n\n        Graphics.Blit(sourceTexture, destTexture, ScreenMat);\n    }\n    else\n    {\n        Graphics.Blit(sourceTexture, destTexture);\n    }\n}\n```", "```cs\nvoid Update()\n{\n    contrast = Mathf.Clamp(contrast, 0f, 4f);\n    brightness = Mathf.Clamp(brightness, 0f, 2f);\n    randomValue = Random.Range(-1f, 1f);\n    distortion = Mathf.Clamp(distortion, -1f, 1f);\n    scale = Mathf.Clamp(scale, 0f, 3f);\n}\n```", "```cs\nProperties \n{ \n    _MainTex (\"Base (RGB)\", 2D) = \"white\" {} \n    _VignetteTex (\"Vignette Texture\", 2D) = \"white\"{} \n    _ScanLineTex (\"Scan Line Texture\", 2D) = \"white\"{} \n    _NoiseTex (\"Noise Texture\", 2D) = \"white\"{} \n    _NoiseXSpeed (\"Noise X Speed\", Float) = 100.0 \n    _NoiseYSpeed (\"Noise Y Speed\", Float) = 100.0 \n    _ScanLineTileAmount (\"Scan Line Tile Amount\", Float) = 4.0 \n    _NightVisionColor (\"Night Vision Color\", Color) = (1,1,1,1) \n    _Contrast (\"Contrast\", Range(0,4)) = 2 \n    _Brightness (\"Brightness\", Range(0,2)) = 1 \n    _RandomValue (\"Random Value\", Float) = 0 \n    _distortion (\"Distortion\", Float) = 0.2 \n    _scale (\"Scale (Zoom)\", Float) = 0.8 \n} \n```", "```cs\nPass\n{\n  CGPROGRAM \n  #pragma vertex vert_img \n  #pragma fragment frag \n  #pragma fragmentoption ARB_precision_hint_fastest \n  #include \"UnityCG.cginc\" \n\n  uniform sampler2D _MainTex; \n  uniform sampler2D _VignetteTex; \n  uniform sampler2D _ScanLineTex; \n  uniform sampler2D _NoiseTex; \n  fixed4 _NightVisionColor; \n  fixed _Contrast; \n  fixed _ScanLineTileAmount; \n  fixed _Brightness; \n  fixed _RandomValue; \n  fixed _NoiseXSpeed; \n  fixed _NoiseYSpeed; \n  fixed _distortion; \n  fixed _scale; \n```", "```cs\n    float2 barrelDistortion(float2 coord)  \n    { \n        // lens distortion algorithm \n        // See http://www.ssontech.com/content/lensalg.htm \n\n        float2 h = coord.xy - float2(0.5, 0.5); \n        float r2 = h.x * h.x + h.y * h.y; \n        float f = 1.0 + r2 * (_distortion * sqrt(r2)); \n\n        return f * _scale * h + 0.5; \n    } \n```", "```cs\n    fixed4 frag(v2f_img i) : COLOR \n    { \n        //Get the colors from the RenderTexture and the uv's \n        //from the v2f_img struct \n        half2 distortedUV = barrelDistortion(i.uv); \n        fixed4 renderTex = tex2D(_MainTex, distortedUV); \n        fixed4 vignetteTex = tex2D(_VignetteTex, i.uv); \n```", "```cs\n//Process scan lines and noise \nhalf2 scanLinesUV = half2(i.uv.x * _ScanLineTileAmount, i.uv.y * _ScanLineTileAmount); \nfixed4 scanLineTex = tex2D(_ScanLineTex, scanLinesUV); \n\nhalf2 noiseUV = half2(i.uv.x + (_RandomValue * _SinTime.z * _NoiseXSpeed), \n                  i.uv.y + (_Time.x * _NoiseYSpeed)); \nfixed4 noiseTex = tex2D(_NoiseTex, noiseUV); \n```", "```cs\n// get the luminosity values from the render texture using the     //YIQ values. \n        fixed lum = dot (fixed3(0.299, 0.587, 0.114), renderTex.rgb); \n        lum += _Brightness; \n        fixed4 finalColor = (lum *2) + _NightVisionColor; \n```", "```cs\n  //Final output \n  finalColor = pow(finalColor, _Contrast); \n  finalColor *= vignetteTex; \n  finalColor *= scanLineTex * noiseTex; \n\n  return finalColor; \n}\n```", "```cs\nSynthEyes, and the code is freely available to use in your own effects:\n```", "```cs\nfloat2 barrelDistortion(float2 coord)  \n{ \n    // lens distortion algorithm \n    // See http://www.ssontech.com/content/lensalg.htm \n    float2 h = coord.xy - float2(0.5, 0.5); \n    float r2 = h.x * h.x + h.y * h.y; \n    float f = 1.0 + r2 * (_distortion * sqrt(r2)); \n\n    return f * _scale * h + 0.5; \n} \n```", "```cs\nusing UnityEngine; \n\npublic class ReplacedShader : MonoBehaviour { \n\n    public Shader shader; \n    void Start () { \n        GetComponent<Camera>().SetReplacementShader(shader, \"Heat\"); \n    } \n} \n```"]