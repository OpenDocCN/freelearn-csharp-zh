- en: Chapter 11. Creating a Mobile Application in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Visual Studio is the tour de force of **integrated development environments**
    (**IDEs**). There is no doubt about that. You as a developer are able to be as
    versatile as you like by creating applications for a wide range of platforms.
    One of these platforms is mobile development. Developers are starting to create
    mobile applications, but don''t want to use a different IDE. With Visual Studio
    2015, you don''t have to. It will allow you to create Android and (now with **Xamarin**)
    iOS applications too. This chapter will therefore take a look at the following
    concepts:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xamarin and other required components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Android Visual Studio project using Apache Cordova
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an iOS application using Xamarin Forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have not heard about Xamarin, we encourage you to do a Google search
    for this tool. Traditionally, developers needed to use **Xcode** or **NetBeans**
    to create iOS and Android applications. The challenge for developers was that
    it meant learning a new programming language. If you, for example, created an
    application that you wanted to deploy to iOS, Android, and Windows, you needed
    to know Objective-C or Swift, Java, and a .NET language.
  prefs: []
  type: TYPE_NORMAL
- en: This also created additional challenges for development, because it meant having
    to maintain multiple code bases. If a change was to be made in the Windows version
    of the application, it also had to be made to the iOS and Android code base. Sometimes
    companies would manage different development teams for each platform. You can
    imagine the complications involved in managing a change across multiple teams
    on multiple platforms. This is especially true if you are dealing with a large
    code base.
  prefs: []
  type: TYPE_NORMAL
- en: Xamarin solves this problem by allowing .NET developers to use standard .NET
    libraries to create iOS and Android applications using Visual Studio. You, as
    a .NET developer, can now use the skills you already have to accomplish this.
    In a nutshell, you would create a shared library for your applications and then
    have different facades for the different platforms. A second option is to use
    Xamarin Forms to create one Visual Studio project and target all three platforms.
    This makes it very easy for developers to target multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xamarin and other required components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Xamarin can be installed during custom Visual Studio installation. For now,
    let's assume that Xamarin has not been installed and that you need to do that
    now, after you have installed Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing to be aware of if you want to target iOS is that you will need to
    use a Mac to build your iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the **Control Panel**, click on **Programs and Features**. Right-click on
    your Visual Studio installation and click on **Change**:![How to do it…](img/B05391_11_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will display the Visual Studio installer for you. Here you can modify your
    current Visual Studio installation by adding and removing components at will.
    Notice that we have selected **C#/.NET (Xamarin v4.0.3)** and **HTML/JavaScript
    (Apache Cordova) Update 8.1** to install. If you have no interest in using Xamarin,
    then leave off the Xamarin component and just keep the Apache Cordova option selected.
    This will still allow you to create Android applications using Apache Cordova
    instead of using Xamarin. Similarly, if you have no interest in Apache Cordova
    and simply want to create Android applications and iOS applications using Visual
    Studio, select the Xamarin component to install. The rest of the installation
    is straightforward:![How to do it…](img/B05391_11_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is also a second step we need to take if we want to use Xamarin to target
    iOS applications. We have to install the required software on a Mac. Head on over
    to Xamarin's website on your Mac. The URL is [https://www.xamarin.com/](https://www.xamarin.com/).
    Click on the **Products** dropdown and select **Xamarin Platform** from the list:![How
    to do it…](img/B05391_11_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can also access the required page by going to [https://www.xamarin.com/platform](https://www.xamarin.com/platform).
    Clicking on the **Download now for free** button will install something called
    Xamarin Studio on your Mac. You need to be aware that when installed on a Mac,
    Xamarin Studio cannot create Windows Apps. It will only allow you to create iOS
    and Android apps on a Mac. Along with Xamarin Studio, you will also get the Xamarin
    Mac Agent (previously called the Xamarin Build Host). This is a required component
    so that you can link your PC to your Mac in order to build your iOS application.
    Lastly, the PC and Mac must also be able to connect to each other over a network
    (more on this later):![How to do it…](img/B05391_11_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading the installer on the Mac, the installation is straightforward.
    Just follow the screen prompts to complete the installation:![How to do it…](img/B05391_11_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The steps we took previously when installing Xamarin and Apache Cordova will
    allow us to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Install Apache Cordova**: If you only want to target Android, iOS, and Windows
    but don''t want to use Xamarin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Install Xamarin**: If you want to target Android, iOS, Windows, or all three
    and use a single solution to do so'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio is extremely flexible and offers developers a wide variety of
    choice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an Android Visual Studio project using Apache Cordova
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an Android application using Apache Cordova is extremely easy. This
    recipe, however, will only show you how to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have Apache Cordova installed as part of the custom installation
    options during Visual Studio setup. To see how to do this, refer to the *Installing
    Xamarin and other required components* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the **New Project** dialog screen, select **Apache Cordova Apps** and select
    the **Blank App (Apache Cordova)** as the template to use. Choose a location for
    your project and click on the **OK** button:![How to do it…](img/B05391_11_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Visual Studio has created your application, you will notice that it has
    a very specific structure to it. From the project, you will notice that you can
    target Android, iOS, Windows, or Windows Phone 8.1\. This is the framework you
    will be using to create your Android application:![How to do it…](img/B05391_11_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you are ready to debug, you can choose an emulator from the **Debug** menu.
    This will deploy your application to the selected emulator and allow you to test
    your application:![How to do it…](img/B05391_11_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Being able to target different mobile devices from a single solution using Visual
    Studio allows developers the freedom to experiment and find what solution fits
    them and their development style the best.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an iOS application using Xamarin Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many developers want to try their hand at writing an iOS application. The big
    drawback has always been learning a new programming language and a new IDE. For
    some, it is probably not an issue as they want to learn something new. But for
    many .NET developers, being able to stick to an IDE and programming language they
    know is immensely empowering. Well, this is exactly what Xamarin Forms and Visual
    Studio achieve. It gives .NET developers the ability to use Visual Studio to write
    applications that can be run cross-platform easily, without having a separate
    code base for each.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to have a Mac running OS X. You will only need this for debugging
    iOS applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Visual Studio 2015, create a new project. From the installed templates, choose
    **Cross-Platform** and select **Blank App (Xamarin.Forms.Portable)**. This will
    allow us to create an application that will be cross-platform and not specific
    to a single platform (Android or iOS, for example):![How to do it…](img/B05391_11_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project creation can take a few minutes to complete. Along the way, you might
    see a message telling you that **Developer Mode** is not enabled for Windows 10
    (assuming you are running Windows 10):![How to do it…](img/B05391_11_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling this is easy enough. You can click on the **settings for developers**
    link in the message that popped up, or you can type in `Developer mode` in the
    **Find a setting** search box in Windows 10 **Settings**:![How to do it…](img/B05391_11_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clicking on the **Developer mode** option will display the **Use developer features**
    confirmation dialog. Just click on **Yes** to continue:![How to do it…](img/B05391_11_12.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the project is created, you will be presented with a **Get started with
    Xamarin.Forms** screen:![How to do it…](img/B05391_11_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Looking at your **Solution Explorer** you will notice that several projects
    have been created. We will only focus on the iOS project:![How to do it…](img/B05391_11_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Taking a look at the debug targets, you will notice that as you change your
    target to Droid, for example, the Android project is set as the start-up project.
    The same happens if you set it to iOS:![How to do it…](img/B05391_11_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As it stands now, before you can go ahead and debug your iOS application, you
    need to connect Visual Studio to the Xamarin Mac Agent on your Mac. In Visual
    Studio, hover over the **Xamarin Mac Agent** button on the iOS toolbar. It will
    show as disconnected:![How to do it…](img/B05391_11_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: See the *Installing Xamarin and other required components* recipe earlier in
    this chapter for how to install the Xamarin Mac Agent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To connect to the Xamarin Mac Agent, click on this button. The **Xamarin Mac
    Agent Instructions** window will be displayed. You can follow the instructions
    on this screen, which are as follows:![How to do it…](img/B05391_11_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On your Mac, open up **System Preferences**. Look for and click on the **Sharing**
    icon:![How to do it…](img/B05391_11_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will display the **Sharing** window. Select **Remote Login** from the menu
    on the left and, under **Only these users**, select or add your current Mac user
    to this list:![How to do it…](img/B05391_11_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you have added your current Mac user to the **Remote Login** list, click
    the back button to return to the previous screen. Then look for and click on **Network**:![How
    to do it…](img/B05391_11_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open up the **Network** screen. Look where it shows the current status
    as **Connected**. Underneath that, you will see an IP address. Make a note of
    the IP address displayed, because you will need to use it to connect Visual Studio
    to the Xamarin Mac Agent:![How to do it…](img/B05391_11_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Just note that I have purposefully masked my IP address in the screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Back in Windows, in Visual Studio click **OK** to dismiss the **Xamarin Mac
    Agent Instructions** screen. The **Xamarin Mac Agent** screen will now be visible.
    At the bottom of this screen, click on the **Add Mac…** button:![How to do it…](img/B05391_11_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will display the **Add Mac** screen, where you need to enter the IP address
    you noted from the **Network** screen in your Mac's **System Preferences**. Click
    on the **Add** button:![How to do it…](img/B05391_11_22.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Just note that I have purposefully masked my IP address in the screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You will now be asked to provide the username and password for the Mac user
    you added on the **Remote Login** screen earlier. Click on the **Login** button:![How
    to do it…](img/B05391_11_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Just note that I have purposefully masked IP addresses and GUID in the screenshot.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After clicking **Login**, you should automatically be connected to your Xamarin
    Mac Agent from Visual Studio:![How to do it…](img/B05391_11_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can now select the iOS device you want to debug on. As you can see, there
    are a wide variety of iOS devices to choose from:![How to do it…](img/B05391_11_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the purposes of this recipe, we have just chosen an **iPhone 4S iOS 9.3**.
    Click on the **Debug** button to start the app:![How to do it…](img/B05391_11_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will now build your application and send that information over the network
    connection to the Xamarin Mac Agent. This will then fire up the simulator on your
    Mac. The first time you do this, it might take a few minutes to spin up the simulator,
    but once it is done, successive debug sessions will go much quicker:![How to do
    it…](img/B05391_11_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the simulator is started on the Mac, the Xamarin application will be launched:![How
    to do it…](img/B05391_11_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the Xamarin splash screen closes, you will see the **Welc****ome to Xamarin
    Forms!** text:![How to do it…](img/B05391_11_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Back in Visual Studio, stop debugging. You will notice that the app closes in
    the simulator app on the Mac, and that debugging stops in Visual Studio. The simulator,
    however, remains open on your Mac.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now let''s change some text. Look at the portable project in your Visual Studio
    solution. This is the shared project that all the other projects in the solution
    will use. In the portable project, click on the `App.cs` file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/B05391_11_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The default code is displayed. Here you can see the `Welcome to Xamarin Forms!`
    text we saw in the application we debugged earlier:![How to do it…](img/B05391_11_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the code to look as follows. All we are doing is adding the date and
    time. A few things to note here are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are using the standard .NET `DateTime` library here
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are using string interpolation to create our text to display on the form:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: When you have done that, debug your application again. When the simulator displays
    your iOS application on the Mac, you will see that the date and time are shown:![How
    to do it…](img/B05391_11_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One thing to note is that we are not doing anything different here than we would
    do in any other standard .NET application. We are writing C# code and compiling
    it to run on an iOS operating system. We can also easily change the application
    to debug on any iOS device. We didn't need to learn Objective-C or Swift (although
    Swift is an awesome language and well worth learning). We also didn't need to
    get to grips with learning a new IDE (Xcode, which is used to develop iOS and
    Mac applications). We didn't have to tweak any constraints, modify any playground
    elements, or learn how to use any new controls. Xamarin Forms and Visual Studio
    take care of all of this for us out of the box. Best of all, Xamarin is now free
    with Visual Studio. There is no reason why you shouldn't try your hand at writing
    an iOS application.
  prefs: []
  type: TYPE_NORMAL
