["```cs\napp.MapPost(\"/people\", (Person person) =>\n{\n    return Results.NoContent();\n});\npublic class Person\n{\n    [Required]\n    [MaxLength(30)]\n    public string FirstName { get; set; }\n    [Required]\n    [MaxLength(30)]\n    public string LastName { get; set; }\n    [EmailAddress]\n    [StringLength(100, MinimumLength = 6)]\n    public string Email { get; set; }\n}\n```", "```cs\n    dotnet add package MiniValidation --prerelease\n    ```", "```cs\napp.MapPost(\"/people\", (Person person) =>\n{\n    var isValid = MiniValidator.TryValidate(person, \n      out var errors);\n    if (!isValid)\n    {\n        return Results.ValidationProblem(errors);\n    }\n    return Results.NoContent();\n});\n```", "```cs\n{\n  \"lastName\": \"MyLastName\",\n  \"email\": \"email\"\n}\n```", "```cs\n{\n  \"type\": \n    \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"errors\": {\n    \"FirstName\": [\n      \"The FirstName field is required.\"\n    ],\n    \"Email\": [\n      \"The Email field is not a valid e-mail address.\",\n      \"The field Email must be a string with a minimum\n       length of 6 and a maximum length of 100.\"\n    ]\n  }\n}\n```", "```cs\n    dotnet add package FluentValidation.DependencyInjectionExtensions\n    ```", "```cs\npublic class PersonValidator : AbstractValidator<Person>\n{\n    public PersonValidator() \n    {\n        RuleFor(p =>\n          p.FirstName).NotEmpty().MaximumLength(30);\n        RuleFor(p => \n          p.LastName).NotEmpty().MaximumLength(30);\n        RuleFor(p => p.Email).EmailAddress().Length(6,\n          100);\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n//...\nbuilder.Services.AddValidatorsFromAssemblyContaining<Program>();\n```", "```cs\napp.MapPost(\"/people\", async (Person person, IValidator<Person> validator) =>\n{\n    var validationResult = \n      await validator.ValidateAsync(person);\n    if (!validationResult.IsValid)\n    {\n        var errors = validationResult.ToDictionary();\n        return Results.ValidationProblem(errors);\n    }\n    return Results.NoContent();\n});\n```", "```cs\n{\n  \"lastName\": \"MyLastName\",\n  \"email\": \"email\"\n}\n```", "```cs\n{\n  \"type\": \n    \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"errors\": {\n    \"FirstName\": [\n      \"'First Name' non può essere vuoto.\"\n    ],\n    \"Email\": [\n      \"'Email' non è un indirizzo email valido.\",\n      \"'Email' deve essere lungo tra i 6 e 100 caratteri.\n        Hai inserito 5 caratteri.\"\n    ]\n  }\n}\n```", "```cs\nRuleFor(p => p.FirstName).NotEmpty().WithMessage(\"You must provide the first name\");\n```", "```cs\napp.MapPost(\"/people\", (Person person) =>\n{\n    //...\n})\n.Produces(StatusCodes.Status204NoContent)\n.ProducesValidationProblem();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n//...\nbuilder.Services.AddFluentValidationRulesToSwagger();\n```", "```cs\npublic class PersonEntity\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public DateTime BirthDate { get; set; }\n    public string City { get; set; }\n}\n```", "```cs\napp.MapGet(\"/people/{id:int}\", (int id) =>\n{\n    // In a real application, this entity could be\n    // retrieved from a database, checking if the person\n    // with the given ID exists.\n    var person = new PersonEntity();\n    return Results.Ok(person);\n})\n.Produces(StatusCodes.Status200OK, typeof(PersonEntity));\n```", "```cs\npublic class PersonDto\n{\n    public int Id { get; set; }\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public DateTime BirthDate { get; set; }\n    public string City { get; set; }\n}\n```", "```cs\npublic class PersonProfile : Profile\n{\n    public PersonProfile()\n    {\n        CreateMap<PersonEntity, PersonDto>();\n    }\n}\n```", "```cs\npublic class PersonProfile : Profile\n{\n    public PersonProfile()\n    {\n        CreateMap<PersonEntity, PersonDto>()\n            .ForMember(dst => dst.Age, opt =>\n           opt.MapFrom(src => CalculateAge(src.BirthDate)))\n            .ForMember(dst => dst.City, opt => \n              opt.MapFrom(src => src.Address.City));\n    }\n    private static int CalculateAge(DateTime dateOfBirth)\n    {\n        var today = DateTime.Today;\n        var age = today.Year - dateOfBirth.Year;\n        if (today.DayOfYear < dateOfBirth.DayOfYear)\n        {\n            age--;\n        }\n        return age;\n    }\n}\n```", "```cs\nbuilder.Services.AddAutoMapper(typeof(Program).Assembly);\n```", "```cs\napp.MapGet(\"/people/{id:int}\", (int id, IMapper mapper) =>\n{\n    var personEntity = new PersonEntity();\n    //...\n    var personDto = mapper.Map<PersonDto>(personEntity);\n    return Results.Ok(personDto);\n})\n.Produces(StatusCodes.Status200OK, typeof(PersonDto));\n```"]