- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Getting Started with GraphQL
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 GraphQL
- en: 'In [*Chapter 11*](B18971_11.xhtml#_idTextAnchor438), we explored how to create
    a gRPC service in ASP.NET Core. gRPC is a high-performance RPC framework that
    facilitates communication between services. We discussed the field types used
    in protobuf messages, and how to define four types of gRPC services: unary, server
    streaming, client streaming, and bidirectional streaming. Additionally, we learned
    how to configure gRPC services in ASP.NET Core and how to call gRPC services from
    a client application.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 11 章*](B18971_11.xhtml#_idTextAnchor438) 中，我们探讨了如何在 ASP.NET Core 中创建 gRPC
    服务。gRPC 是一种高性能 RPC 框架，它促进了服务之间的通信。我们讨论了 protobuf 消息中使用的字段类型，以及如何定义四种类型的 gRPC 服务：单例、服务器端流、客户端端流和双向流。此外，我们还学习了如何在
    ASP.NET Core 中配置 gRPC 服务以及如何从客户端应用程序调用 gRPC 服务。
- en: 'Next, we will explore another shape of web APIs: GraphQL. GraphQL is a query-based
    API that allows clients to specify the data they need, which solves the problem
    of over-fetching and under-fetching data. Besides, GraphQL supports **mutations**,
    which allow clients to modify data. In this chapter, we will learn about some
    basic concepts of GraphQL and how to create a GraphQL API in ASP.NET Core. We
    will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨另一种网络 API 的形状：GraphQL。GraphQL 是一种基于查询的 API，允许客户端指定他们需要的数据，从而解决了过度获取和不足获取数据的问题。此外，GraphQL
    支持 **变更**，允许客户端修改数据。在本章中，我们将学习 GraphQL 的基本概念以及如何在 ASP.NET Core 中创建 GraphQL API。本章将涵盖以下主题：
- en: Recap of GraphQL
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GraphQL 概述
- en: Setting up a GraphQL API using HotChocolate
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 HotChocolate 设置 GraphQL API
- en: Adding mutations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加变更
- en: Using variables in queries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在查询中使用变量
- en: Defining a GraphQL schema
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义 GraphQL 模式
- en: Retrieving related objects using resolvers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用解析器检索相关对象
- en: Using data loaders
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据加载器
- en: Dependency injection
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依赖注入
- en: Interfaces and union types
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接口和联合类型
- en: Filtering, sorting, and paging
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤、排序和分页
- en: Visualizing the GraphQL schema
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可视化 GraphQL 模式
- en: After reading this chapter, you will be able to understand the basic concepts
    of GraphQL and how to create a GraphQL API in ASP.NET Core. You will also learn
    how to use Apollo Federation to build a microservices-based GraphQL API.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读本章后，您将能够理解 GraphQL 的基本概念以及如何在 ASP.NET Core 中创建 GraphQL API。您还将学习如何使用 Apollo
    Federation 构建基于微服务的 GraphQL API。
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code examples in this chapter can be found at [https://github.com/PacktPublishing/Web-API-Development-with-ASP.NET-Core-8/tree/main/samples/chapter12](https://github.com/PacktPublishing/Web-API-Development-with-ASP.NET-Core-8/tree/main/samples/chapter12).
    You can use VS 2022 or VS Code to open the solutions.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的代码示例可以在 [https://github.com/PacktPublishing/Web-API-Development-with-ASP.NET-Core-8/tree/main/samples/chapter12](https://github.com/PacktPublishing/Web-API-Development-with-ASP.NET-Core-8/tree/main/samples/chapter12)
    找到。您可以使用 VS 2022 或 VS Code 打开解决方案。
- en: Recap of GraphQL
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GraphQL 概述
- en: GraphQL offers a flexible way to query and mutate data. The main difference
    between GraphQL and REST is that GraphQL allows clients to specify the data they
    need, whereas REST APIs return a fixed set of data. GraphQL treats data as a graph,
    and it uses a query language to define the shape of the data. This addresses the
    issues of over-fetching and under-fetching data by enabling clients to specify
    their data requirements. Additionally, it supports mutations, empowering clients
    to modify data as needed.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 提供了一种灵活的方式来查询和变更数据。GraphQL 与 REST 的主要区别在于，GraphQL 允许客户端指定他们需要的数据，而 REST
    API 返回一组固定的数据。GraphQL 将数据视为图，并使用查询语言来定义数据的形状。这通过允许客户端指定他们的数据需求来解决过度获取和不足获取数据的问题。此外，它还支持变更，使客户端能够根据需要修改数据。
- en: While REST APIs have multiple endpoints for different resources, GraphQL is
    typically served over a single endpoint, usually `/graphql`, which exposes a schema
    that describes the data. All queries and mutations are sent to this endpoint.
    The schema is defined using a GraphQL Schema Definition Language, which is the
    contract between the client and the server. The schema defines the types of data
    and the operations that can be performed on the data. The client can use the schema
    to validate the query and mutation requests.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 REST API 为不同的资源提供了多个端点，但 GraphQL 通常通过单个端点提供服务，通常是 `/graphql`，该端点暴露了一个描述数据的模式。所有查询和变更都发送到这个端点。该模式使用
    GraphQL 模式定义语言定义，这是客户端和服务器之间的合同。该模式定义了数据的类型和可以在数据上执行的操作。客户端可以使用该模式来验证查询和变更请求。
- en: GraphQL can solve the problem of over-fetching and under-fetching data for clients.
    However, the backend development is more complex than REST APIs. GraphQL uses
    resolvers to fetch data from different levels of the graph. If the implementation
    of the resolvers is not efficient, it can lead to performance issues. GraphQL
    also has a steep learning curve for developers who are not familiar with it.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL可以解决客户端数据过取和不足取的问题。然而，后端开发比REST API更复杂。GraphQL使用解析器从图的不同层级获取数据。如果解析器的实现效率不高，可能会导致性能问题。对于不熟悉GraphQL的开发者来说，GraphQL的学习曲线也很陡峭。
- en: 'ASP.NET Core does not have built-in support for GraphQL. However, several third-party
    libraries can be used to create GraphQL APIs:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core没有内置对GraphQL的支持。然而，可以使用几个第三方库来创建GraphQL API：
- en: '**HotChocolate**: HotChocolate is an open-source GraphQL server for .NET. It
    is built on top of ASP.NET Core and supports the newest GraphQL October 2021 specification.
    It is supported by ChilliCream, a company that provides GraphQL tooling and consulting
    services. ChilliCream also provides other products, such as Banana Cake Pop, which
    is a GraphQL IDE to create and test GraphQL queries, and Strawberry Shake, which
    is a GraphQL client library for .NET. You can find more information about HotChocolate
    at [https://chillicream.com/docs/hotchocolate/](https://chillicream.com/docs/hotchocolate/).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HotChocolate**：HotChocolate是一个开源的.NET GraphQL服务器。它建立在ASP.NET Core之上，并支持最新的2021年10月的GraphQL规范。它由提供GraphQL工具和咨询服务公司的ChilliCream支持。ChilliCream还提供其他产品，如Banana
    Cake Pop，这是一个用于创建和测试GraphQL查询的GraphQL IDE，以及Strawberry Shake，这是一个.NET的GraphQL客户端库。您可以在[https://chillicream.com/docs/hotchocolate/](https://chillicream.com/docs/hotchocolate/)找到有关HotChocolate的更多信息。'
- en: '**GraphQL.NET**: GraphQL.NET is another open-source GraphQL implementation
    for .NET. It provides a set of libraries that can be used to create GraphQL APIs
    and clients. You can find more information about GraphQL.NET at [https://graphql-dotnet.github.io/](https://graphql-dotnet.github.io/).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GraphQL.NET**：GraphQL.NET是.NET的另一个开源GraphQL实现。它提供了一组库，可用于创建GraphQL API和客户端。您可以在[https://graphql-dotnet.github.io/](https://graphql-dotnet.github.io/)找到有关GraphQL.NET的更多信息。'
- en: In this chapter, we will use HotChocolate to create a GraphQL API in ASP.NET
    Core.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用HotChocolate在ASP.NET Core中创建一个GraphQL API。
- en: Setting up a GraphQL API using HotChocolate
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用HotChocolate设置GraphQL API
- en: 'To begin with, you can download the code example named `SchoolManagement` for
    this chapter from the `chapter12\start` folder. This sample project has some basic
    code for an `AppDbContext` class and a `Teacher` class, as well as some seed data.
    The `Teacher` class has the following properties:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您可以从`chapter12\start`文件夹中下载本章名为`SchoolManagement`的代码示例。这个示例项目包含一个`AppDbContext`类和一个`Teacher`类的基本代码，以及一些种子数据。`Teacher`类具有以下属性：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can open the project in VS Code or VS 2022\. We will integrate `HotChocolate`
    into the project to create a GraphQL API following these steps:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用VS Code或VS 2022打开项目。我们将按照以下步骤将`HotChocolate`集成到项目中以创建GraphQL API：
- en: 'Add the `HotChocolate.AspNetCore` NuGet package to the project. This package
    contains the ASP.NET Core integration for HotChocolate. It also contains the GraphQL
    IDE, which is a GraphQL client that can be used to create and test GraphQL queries.
    You can use the following command to add the package to the project:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`HotChocolate.AspNetCore` NuGet包添加到项目中。此包包含HotChocolate的ASP.NET Core集成。它还包含GraphQL
    IDE，这是一个可以用于创建和测试GraphQL查询的GraphQL客户端。您可以使用以下命令将包添加到项目中：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: public class Query{    public async Task<List<Teacher>> GetTeachers([Service]
    AppDbContext context) =>        await context.Teachers.ToListAsync();}
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public class Query{    public async Task<List<Teacher>> GetTeachers([Service]
    AppDbContext context) =>        await context.Teachers.ToListAsync();}`'
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, we need to register the query root type in the `Program.cs` file. Add
    the following code after the `AddDbContext()` method:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在`Program.cs`文件中注册查询根类型。在`AddDbContext()`方法之后添加以下代码：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Next, we need to map the GraphQL endpoint to expose the GraphQL schema. Add
    the following code to the `Program.cs` file:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将GraphQL端点映射以公开GraphQL模式。将以下代码添加到`Program.cs`文件中：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the project using `dotnet run` and open the GraphQL IDE at `https://localhost:7208/graphql/`.
    You should see the following screen:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`dotnet run`运行项目，并在`https://localhost:7208/graphql/`打开GraphQL IDE。您应该看到以下屏幕：
- en: '![Figure 12.1 – The Banana Cake Pop GraphQL IDE](img/B18971_12_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – Banana Cake Pop GraphQL IDE](img/B18971_12_01.jpg)'
- en: Figure 12.1 – The Banana Cake Pop GraphQL IDE
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – Banana Cake Pop GraphQL IDE
- en: The GraphQL IDE allows you to create and test GraphQL queries.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL IDE 允许你创建和测试 GraphQL 查询。
- en: Important note
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The default launch URL is `swagger` for ASP.NET Core web API projects. You can
    change the launch URL in the `launchSettings.json` file to `graphql` to open the
    GraphQL IDE directly.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 默认启动 URL 是 `swagger`，用于 ASP.NET Core Web API 项目。你可以在 `launchSettings.json` 文件中将启动
    URL 更改为 `graphql` 以直接打开 GraphQL IDE。
- en: 'Click the **Browse Schema** button, then click the **Schema Definition** tab
    to view the GraphQL schema. You should see the following schema:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **浏览模式** 按钮，然后点击 **模式定义** 选项卡来查看 GraphQL 模式。你应该看到以下模式：
- en: '[PRE5]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The preceding schema defines a query root type, `Query`, and a `Teacher` type.
    The `Query` type has one field named `teachers`, which returns a `[Teacher!]!`
    object. GraphQL uses `!` to indicate that the field is non-nullable. By default,
    all fields are nullable. `[Teacher!]!` means that this field is a non-nullable
    array of non-nullable `Teacher` objects. When there is no data, the field will
    return an empty array.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的模式定义了一个查询根类型 `Query` 和一个 `Teacher` 类型。`Query` 类型有一个名为 `teachers` 的字段，它返回一个
    `[Teacher!]!` 对象。GraphQL 使用 `!` 来表示该字段是非空白的。默认情况下，所有字段都是可空白的。`[Teacher!]!` 表示该字段是一个非空白的
    `Teacher` 对象数组。当没有数据时，该字段将返回一个空数组。
- en: 'The `Teacher` type has a few fields: `id`, `firstName`, `lastName`, `email`,
    `phone`, and `bio`. The `id` field is of the `UUID` type, which is a scalar type
    that represents a 128-bit `firstName`, `lastName`, `email`, `phone`, and `bio`
    fields are of the `String` type. The client can specify which fields to be returned
    in the query.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Teacher` 类型有几个字段：`id`、`firstName`、`lastName`、`email`、`phone` 和 `bio`。`id`
    字段是 `UUID` 类型，它是一个表示 128 位数字的标量类型。`firstName`、`lastName`、`email`、`phone` 和 `bio`
    字段是 `String` 类型。客户端可以指定查询中要返回的字段。'
- en: 'Let us try to query the data. Click the **Create Document** button to create
    a new query. You can use the following query to get all teachers:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们尝试查询数据。点击 **创建文档** 按钮来创建一个新的查询。你可以使用以下查询来获取所有教师：
- en: '[PRE6]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding query will return all teachers in the database, as follows:'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的查询将返回数据库中的所有教师，如下所示：
- en: '![Figure 12.2 – Querying all teachers](img/B18971_12_02.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.2 – 查询所有教师](img/B18971_12_02.jpg)'
- en: Figure 12.2 – Querying all teachers
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2 – 查询所有教师
- en: 'You can add or remove fields in the query to specify the data to be returned.
    For example, to show a list of teachers on a web page, we do not need to return
    the `id` field and the `bio` field. We can remove the `bio` field from the query
    as follows:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在查询中添加或删除字段以指定要返回的数据。例如，为了在网页上显示教师列表，我们不需要返回 `id` 字段和 `bio` 字段。我们可以从查询中移除
    `bio` 字段，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding query will return those four fields only, which reduces the payload
    size.
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的查询将仅返回这四个字段，从而减少了有效负载的大小。
- en: So far, we have created a GraphQL API using HotChocolate. We have also learned
    how to query data using GraphQL queries. Next, we will learn how to modify data
    using mutations.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经使用 HotChocolate 创建了一个 GraphQL API。我们还学习了如何使用 GraphQL 查询来查询数据。接下来，我们将学习如何使用突变来修改数据。
- en: Adding mutations
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加突变
- en: In the previous section, we learned how to create a GraphQL API using HotChocolate.
    We added a query root type to query data. In this section, we will discuss how
    to modify data using mutations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，我们学习了如何使用 HotChocolate 创建一个 GraphQL API。我们添加了一个查询根类型来查询数据。在本节中，我们将讨论如何使用突变来修改数据。
- en: 'Mutations are used to modify data in GraphQL. A mutation consists of three
    parts:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GraphQL 中，突变（mutations）用于修改数据。一个突变由三个部分组成：
- en: '`Input` suffix following the convention, such as `AddTeacherInput`.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照惯例，在 `Input` 后缀之后，例如 `AddTeacherInput`。
- en: '`Payload` suffix following the convention, such as `AddTeacherPayload`.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按照惯例，在 `Payload` 后缀之后，例如 `AddTeacherPayload`。
- en: '`AddTeacherAsync`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AddTeacherAsync`。'
- en: 'Let us add a mutation to create a new teacher. We will use the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个突变来创建一个新的教师。我们将使用以下步骤：
- en: 'Create an `AddTeacherInput` class in the `GraphQL/Mutations` folder, as shown
    here:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GraphQL/Mutations` 文件夹中创建一个 `AddTeacherInput` 类，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `AddTeacherInput` class is a record type that defines the input data for
    the `AddTeacherAsync` mutation. The `Id` property is not included in the input
    data because it will be generated by the code.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AddTeacherInput` 类是一个记录类型，它定义了 `AddTeacherAsync` 突变的输入数据。`Id` 属性不包括在输入数据中，因为它将由代码生成。'
- en: 'Add an `AddTeacherPayload` class in the `GraphQL/Mutations` folder, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `GraphQL/Mutations` 文件夹中添加一个 `AddTeacherPayload` 类，如下所示：
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `AddTeacherPayload` class defines the data that will be returned after the
    mutation is executed. It has a `Teacher` property of the `Teacher` type.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`AddTeacherPayload` 类定义了突变执行后返回的数据。它有一个 `Teacher` 属性，类型为 `Teacher`。'
- en: 'Next, we need to add the actual mutation to execute the operation. Add the
    `Mutation` class to the `GraphQL/Mutations` folder, as shown here:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加实际的突变来执行操作。将 `Mutation` 类添加到 `GraphQL/Mutations` 文件夹中，如下所示：
- en: '[PRE10]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `Mutation` class has one method named `AddTeacherAsync`, which takes an
    `AddTeacherInput` object as the input data and returns an `AddTeacherPayload`
    object. The `AddTeacherAsync()` method creates a new `Teacher` object and adds
    it to the database. Then, it returns an `AddTeacherPayload` object that contains
    the newly created `Teacher` object.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Mutation` 类有一个名为 `AddTeacherAsync` 的方法，它接受一个 `AddTeacherInput` 对象作为输入数据，并返回一个
    `AddTeacherPayload` 对象。`AddTeacherAsync()` 方法创建一个新的 `Teacher` 对象并将其添加到数据库中。然后，它返回一个包含新创建的
    `Teacher` 对象的 `AddTeacherPayload` 对象。'
- en: 'Next, we need to register the mutation in the `Program.cs` file. Add the `AddMutationType`
    method after the `AddQueryType()` method, as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在 `Program.cs` 文件中注册突变。在 `AddQueryType()` 方法之后添加 `AddMutationType` 方法，如下所示：
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the project using `dotnet run` and open the GraphQL IDE. Check the schema
    definition and you should see the following mutation:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `dotnet run` 运行项目并打开 GraphQL IDE。检查模式定义，你应该会看到以下突变：
- en: '[PRE12]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding schema defines a mutation named `addTeacher`, which reflects the
    types and methods we defined in the `Mutation` class. Note that the `AddTeacherInput`
    type is an input type, so it uses the `input` keyword instead of `type`.
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述模式定义了一个名为 `addTeacher` 的突变，它反映了我们在 `Mutation` 类中定义的类型和方法。请注意，`AddTeacherInput`
    类型是一个输入类型，因此它使用 `input` 关键字而不是 `type`。
- en: 'Click the **Create Document** button to create a new query. You can use the
    following mutation to create a new teacher:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建文档**按钮创建一个新的查询。你可以使用以下突变来创建一个新的教师：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding mutation will create a new teacher and return the `id` property
    of the newly created teacher, as follows:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述突变将创建一个新的教师并返回新创建教师的 `id` 属性，如下所示：
- en: '![Figure 12.3 – Creating a new teacher](img/B18971_12_03.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.3 – 创建新的教师](img/B18971_12_03.jpg)'
- en: Figure 12.3 – Creating a new teacher
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3 – 创建新的教师
- en: Then, you can query the data to verify that the new teacher has been added to
    the database.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以查询数据以验证新教师是否已添加到数据库中。
- en: Using variables in queries
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在查询中使用变量
- en: In the previous section, we learned how to query data and modify data using
    GraphQL queries and mutations. In this section, we will discuss how to use variables
    in queries.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用 GraphQL 查询和突变查询和修改数据。在本节中，我们将讨论如何在查询中使用变量。
- en: 'GraphQL allows you to use variables in queries. This is useful when you want
    to pass parameters to the query. We can create a query that accepts an `id` parameter
    and returns the teacher with the specified ID. Follow these steps to create the
    query:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL 允许你在查询中使用变量。当你想要向查询传递参数时，这非常有用。我们可以创建一个接受 `id` 参数并返回具有指定 ID 的教师的查询。按照以下步骤创建查询：
- en: 'Add a `GetTeacher()` method in the `Query` class, as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Query` 类中添加一个 `GetTeacher()` 方法，如下所示：
- en: '[PRE14]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code adds a `GetTeacher()` method to the `Query` class. It takes
    an `id` parameter and returns the teacher with the specified ID.
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码向 `Query` 类添加了一个 `GetTeacher()` 方法。它接受一个 `id` 参数并返回具有指定 ID 的教师。
- en: 'Now, you can use the `$` sign to define a variable in the query. For example,
    you can use the following query to get a teacher by ID:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以在查询中使用 `$` 符号来定义变量。例如，你可以使用以下查询通过 ID 获取教师：
- en: '[PRE15]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The preceding query defines a variable named `id` of the `UUID!` type. The
    `!` sign indicates that the variable is non-nullable. The `teacher` field takes
    the `id` variable as the parameter and returns the teacher with the specified
    ID. In the `id` variable to pass the value to the query, as follows:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述查询定义了一个名为 `id` 的 `UUID!` 类型的变量。`!` 符号表示该变量不可为空。`teacher` 字段接受 `id` 变量作为参数，并返回具有指定
    ID 的教师。在 `id` 变量中传递值到查询，如下所示：
- en: '[PRE16]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can define multiple variables in the query. Note that variables must be
    scalars, enums, or input object types.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在查询中定义多个变量。请注意，变量必须是标量、枚举或输入对象类型。
- en: Defining a GraphQL schema
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义 GraphQL 模式
- en: Usually, a system has multiple types of data. For example, a school management
    system has teachers, students, departments, and courses. A department has multiple
    courses, and a course has multiple students. A teacher can teach multiple courses,
    and a course can be taught by multiple teachers as well. In this section, we will
    discuss how to define a GraphQL schema with multiple types of data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一个系统有多种数据类型。例如，学校管理系统有教师、学生、部门和课程。一个部门有多个课程，一个课程有多个学生。一位教师可以教授多个课程，一个课程也可以由多位教师教授。在本节中，我们将讨论如何定义具有多种数据类型的GraphQL模式。
- en: Scalar types
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标量类型
- en: 'Scalar types are the primitive types in GraphQL. The following table lists
    the scalar types in GraphQL:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 标量类型是GraphQL中的基本类型。以下表格列出了GraphQL中的标量类型：
- en: '| **Scalar type** | **Description** | **.****NET type** |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| **标量类型** | **描述** | **.NET类型** |'
- en: '| --- | --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `Int` | Signed 32-bit integer | `int` |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `Int` | 有符号32位整数 | `int` |'
- en: '| `Float` | Signed double-precision floating-point value specified in IEEE
    754 | `float` or `double` |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `Float` | 根据IEEE 754指定的有符号双精度浮点值 | `float`或`double` |'
- en: '| `String` | UTF‐8 character sequence | `string` |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `String` | UTF-8字符序列 | `string` |'
- en: '| `Boolean` | `true` or `false` | `bool` |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `Boolean` | `true`或`false` | `bool` |'
- en: '| `ID` | A unique identifier, serialized as a string | `string` |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `ID` | 一个唯一的标识符，序列化为字符串 | `string` |'
- en: Table 12.1 – Scalar types in GraphQL
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 表12.1 – GraphQL中的标量类型
- en: 'Besides the preceding scalar types, `HotChocolate` also supports the following
    scalar types:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 除了前面的标量类型之外，`HotChocolate`还支持以下标量类型：
- en: '`Byte`: Unsigned 8-bit integer'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Byte`：无符号8位整数'
- en: '`ByteArray`: Byte array that is encoded as a Base64 string'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ByteArray`：编码为Base64字符串的字节数组'
- en: '`Short`: Signed 16-bit integer'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Short`：有符号16位整数'
- en: '`Long`: Signed 64-bit integer'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Long`：有符号64位整数'
- en: '`Decimal`: Signed decimal value'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Decimal`：有符号十进制值'
- en: '`Date`: ISO-8601 date'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`：ISO-8601日期'
- en: '`TimeSpan`: ISO-8601 time duration'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TimeSpan`：ISO-8601时间持续时间'
- en: '`DateTime`: A custom GraphQL scalar defined by the community at [https://www.graphql-scalars.com/](https://www.graphql-scalars.com/).
    It is based on RFC3339\. Note that this `DateTime` scalar uses an offset to UTC
    instead of a time zone'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DateTime`：由社区在[https://www.graphql-scalars.com/](https://www.graphql-scalars.com/)定义的GraphQL自定义标量。它基于RFC3339。请注意，此`DateTime`标量使用偏移量而不是时区来表示UTC'
- en: '`Url`: URL'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Url`：URL'
- en: '`Uuid`: GUID'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Uuid`：GUID'
- en: '`Any`: A special type that is used to represent any literal or output type'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Any`：一个特殊类型，用于表示任何字面量或输出类型'
- en: There are more scalar types that are not listed here. You can find more information
    about the scalar types at [https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/scalars](https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/scalars).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有列出更多标量类型。您可以在[https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/scalars](https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/scalars)找到有关标量类型的更多信息。
- en: 'GraphQL supports enumerations as well. Enumeration types in GraphQL are a special
    kind of scalar type. They are used to represent a fixed set of values. .NET supports
    enumeratiopn types very well so that you can use the .NET `enum` type directly
    in GraphQL. You can define an enumeration type as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL还支持枚举。GraphQL中的枚举类型是一种特殊的标量类型。它们用于表示一组固定的值。.NET很好地支持枚举类型，因此您可以直接在GraphQL中使用.NET
    `enum`类型。您可以如下定义枚举类型：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The preceding code defines an enumeration type named `CourseType` with three
    values: `Core`, `Elective`, and `Lab`. The generated GraphQL schema is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码定义了一个名为`CourseType`的枚举类型，包含三个值：`Core`、`Elective`和`Lab`。生成的GraphQL模式如下：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: HotChocolate automatically converts the enumeration values to uppercase according
    to the GraphQL specification.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: HotChocolate会自动根据GraphQL规范将枚举值转换为大写。
- en: Object types
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象类型
- en: 'The object type is the most common type in GraphQL. It can contain simple scalar
    types such as `Int`, `String`, and `Boolean`, as well as other object types. For
    example, a `Teacher` type can contain the `Department` type, as shown here:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型是GraphQL中最常见的类型。它可以包含简单的标量类型，如`Int`、`String`和`Boolean`，以及其他对象类型。例如，一个`Teacher`类型可以包含`Department`类型，如下所示：
- en: '[PRE19]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The preceding code defines a `Teacher` type and a `Department` type. The `Teacher`
    type has a `Department` property of the `Department` type. HotChocolate will generate
    the schema as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码定义了一个`Teacher`类型和一个`Department`类型。`Teacher`类型有一个`Department`属性，其类型为`Department`。HotChocolate将生成如下模式：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As we mentioned in the previous section, all the fields in GraphQL are nullable
    by default. If we want to make a field non-nullable, we can use the `!` sign.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，GraphQL 中的所有字段默认都是可空的。如果我们想使一个字段不可空，可以使用 `!` 符号。
- en: 'The object type can contain a list of other object types. For example, a `Department`
    type can contain a list of `Teacher` objects, as shown here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类型可以包含其他对象类型的列表。例如，`Department` 类型可以包含一个 `Teacher` 对象的列表，如下所示：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The generated schema is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的模式如下：
- en: '[PRE22]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `teachers` field is a non-nullable array of non-nullable `Teacher` objects.
    If we want to make the `teachers` field nullable, we can use the `?` sign as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`teachers` 字段是一个包含不可空 `Teacher` 对象的不可空数组。如果我们想使 `teachers` 字段可空，可以使用以下方式使用
    `?` 符号：'
- en: '[PRE23]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The generated schema is as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的模式如下：
- en: '[PRE24]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding schema means that the `teachers` field is a nullable array of
    non-nullable `Teacher` objects. When there is no data, the `teachers` field will
    return `null`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模式意味着 `teachers` 字段是一个可空的、包含不可空 `Teacher` 对象的数组。当没有数据时，`teachers` 字段将返回 `null`。
- en: 'Let''s look back at the `Query` type and the `Mutation` type we defined in
    the previous sections:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下在前几节中定义的 `Query` 类型与 `Mutation` 类型：
- en: '[PRE25]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: These two types look like regular object types, but they have special meanings
    in GraphQL. The `Query` type and the `Mutation` type are two special object types
    in GraphQL, as they define the entry points of the GraphQL API. Every GraphQL
    service must have a `Query` type, but may or may not have a `Mutation` type. So
    the `teachers` query is actually a field of the `Query` type, just like the `department`
    field in the `teacher` type. Mutations work in the same way.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种类型看起来像常规对象类型，但在 GraphQL 中有特殊含义。`Query` 类型与 `Mutation` 类型是 GraphQL 中的两种特殊对象类型，因为它们定义了
    GraphQL API 的入口点。每个 GraphQL 服务都必须有一个 `Query` 类型，但可能有一个或没有 `Mutation` 类型。所以 `teachers`
    查询实际上是 `Query` 类型的字段，就像 `teacher` 类型中的 `department` 字段一样。变更操作以相同的方式工作。
- en: So far, the GraphQL types are similar to C# types. If you are familiar with
    object-oriented programming, you should be able to understand the GraphQL types
    easily. Similar to C#, GraphQL supports interfaces as well. But before we delve
    into interfaces, Let's discuss how to retrieve the `Department` object when querying
    the `Teacher` object.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，GraphQL 类型与 C# 类型相似。如果你熟悉面向对象编程，你应该能够轻松理解 GraphQL 类型。类似于 C#，GraphQL 也支持接口。但在我们深入接口之前，让我们讨论一下在查询
    `Teacher` 对象时如何检索 `Department` 对象。
- en: Retrieving related objects using resolvers
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用解析器检索相关对象
- en: In the previous section, we defined a `Teacher` type and a `Department` type.
    The `Teacher` type has a `Department` property of the `Department` type. When
    querying the `Teacher` object, we may also want to retrieve the `Department` object.
    How can we do that?
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几节中，我们定义了一个 `Teacher` 类型和一个 `Department` 类型。`Teacher` 类型有一个 `Department` 属性，其类型为
    `Department`。在查询 `Teacher` 对象时，我们可能还想检索 `Department` 对象。我们该如何做呢？
- en: 'You may think that we can use the `Include()` method to retrieve the `Department`
    object, as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为我们可以使用 `Include()` 方法来检索 `Department` 对象，如下所示：
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Then, you can query the `Department` object as follows:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以按照以下方式查询 `Department` 对象：
- en: '[PRE27]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'It does work and you will see the following result:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实可行，你将看到以下结果：
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: But this is not the best way to do it. Remember that GraphQL allows clients
    to specify the data they need. If the query does not specify the `department`
    field, the `Department` object will still be retrieved from the database. This
    is not efficient. We should only retrieve the `Department` object when the `department`
    field is specified in the query. That leads us to the concept of resolvers.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是最好的方法。记住，GraphQL 允许客户端指定他们需要的数据。如果查询没有指定 `department` 字段，`Department` 对象仍然会从数据库中检索。这并不高效。我们只应在查询中指定了
    `department` 字段时才检索 `Department` 对象。这引出了解析器的概念。
- en: A resolver is a function that is used to retrieve data from somewhere for a
    specific field. The resolver is executed when the field is requested in the query.
    The resolver can fetch data from a database, a web API, or any other data source.
    It will drill down the graph to retrieve the data for the field. For example,
    when the `department` field is requested in the `teachers` query, the resolver
    will retrieve the `Department` object from the database. But when the query does
    not specify the `department` field, the resolver will not be executed. This can
    avoid unnecessary database queries.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 解析器是一个函数，用于从某个地方检索特定字段的数据。当查询中请求字段时，解析器将被执行。解析器可以从数据库、Web API或任何其他数据源获取数据。它将钻入图以检索字段的数据。例如，当在`teachers`查询中请求`department`字段时，解析器将从数据库中检索`Department`对象。但是，当查询未指定`department`字段时，解析器将不会执行。这可以避免不必要的数据库查询。
- en: Field resolvers
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段解析器
- en: 'HotChocolate supports three ways to define schemas:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: HotChocolate支持三种定义模式的方式：
- en: '`Get` prefix or an `Async` suffix, these prefixes or suffixes will be removed
    from the name.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Get`前缀或`Async`后缀，这些前缀或后缀将从名称中移除。'
- en: '**Code-first**: This approach allows you to define the schema using explicit
    types and resolvers. It uses the Fluent API to define the details of the schema.
    This approach is more flexible when you need to customize the schema.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码优先**：这种方式允许你使用显式类型和解析器来定义模式。它使用Fluent API来定义模式的详细信息。当你需要自定义模式时，这种方法更加灵活。'
- en: '**Schema-first**: This approach allows you to define the schema using the GraphQL
    schema definition language. If you are familiar with GraphQL, you can use this
    approach to define the schema directly.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模式优先**：这种方式允许你使用GraphQL模式定义语言来定义模式。如果你熟悉GraphQL，你可以使用这种方法直接定义模式。'
- en: As you, our readers, are mostly .NET developers, we will use the code-first
    approach to define the schema in the rest of this chapter, so we can benefit from
    the Fluent API to fine-tune the schema.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的读者大多是.NET开发者，我们将在本章的其余部分使用代码优先的方法来定义模式，这样我们可以利用Fluent API来微调模式。
- en: 'Let us look back at the `teacher` query we defined in the previous section:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下上一节中定义的`teacher`查询：
- en: '[PRE29]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The preceding is the annotation-based approach. HotChocolate automatically
    converts the `GetTeacher()` method to a resolver named `teacher`. Next, we want
    to retrieve the `Department` object when the `department` field is requested.
    Let us make some changes by following these steps:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的方法是基于注解的。HotChocolate自动将`GetTeacher()`方法转换为名为`teacher`的解析器。接下来，我们希望在请求`department`字段时检索`Department`对象。让我们按照以下步骤进行一些更改：
- en: 'First, we need to define `TeacherType` class as a GraphQL object. Create a
    `TeacherType` class in the `Types` folder. The code is shown here:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将`TeacherType`类定义为GraphQL对象。在`Types`文件夹中创建一个`TeacherType`类。代码如下：
- en: '[PRE30]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `TeacherType` class inherits from the `ObjectType<Teacher>` class, which
    has a `Configure()` method to configure the GraphQL object and specify how to
    resolve the fields. In the preceding code, we use the code-first approach to define
    the `Department` field of `TeacherType`. The `Name` method is used to specify
    the name of the field. If the name of the field is the same as the name of the
    property following the convention, we can omit the `Name` method. By convention,
    the `Department` field will be converted to the `department` field in the schema.
    Then, we use the `Description` method to define the description of the field.
    The description will be shown in the GraphQL IDE.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`TeacherType`类继承自`ObjectType<Teacher>`类，该类有一个`Configure()`方法来配置GraphQL对象并指定如何解析字段。在上面的代码中，我们使用代码优先的方法来定义`TeacherType`的`Department`字段。`Name`方法用于指定字段的名称。如果字段的名称与遵循约定的属性名称相同，我们可以省略`Name`方法。按照约定，`Department`字段将转换为模式中的`department`字段。然后，我们使用`Description`方法来定义字段的描述。描述将在GraphQL
    IDE中显示。'
- en: Then, we use the `Resolve()` method to define the resolver. The resolver retrieves
    the `Department` object from the database using the `DepartmentId` property of
    the `Teacher` object. Note that we use the `context.Parent<Teacher>()` method
    to get the `Teacher` object because the `Teacher` object is the parent object
    of the `Department` object.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，我们使用`Resolve()`方法来定义解析器。解析器通过使用`Teacher`对象的`DepartmentId`属性从数据库中检索`Department`对象。请注意，我们使用`context.Parent<Teacher>()`方法来获取`Teacher`对象，因为`Teacher`对象是`Department`对象的父对象。
- en: As we know the `Query` type is a special object type, we will create a `QueryType`
    class as well. Create a new `Types` folder in the `GraphQL` folder and move the
    `Query.cs` file to this `Types` folder.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如我们所知，`Query` 类型是一个特殊对象类型，因此我们也将创建一个 `QueryType` 类。在 `GraphQL` 文件夹中创建一个新的 `Types`
    文件夹，并将 `Query.cs` 文件移动到这个 `Types` 文件夹中。
- en: 'Remove the `GetTeacher()` method and add a property as follows:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `GetTeacher()` 方法并添加一个属性，如下所示：
- en: '[PRE31]'
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Create a new class named `QueryType`, as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `QueryType` 的新类，如下所示：
- en: '[PRE32]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code defines the root query type. In this query type, we specify
    the type of the field to be `TeacherType`. Next, we use the `Argument()` method
    to define the `id` argument, which is a non-nullable `UUID` type. Then, we use
    the `Resolve()` method to define the resolver. The resolver takes the `id` argument
    and retrieves the `Teacher` object from the database. Note that `AppDbContext`
    is injected into the resolver from the `context` object.
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码定义了根查询类型。在这个查询类型中，我们指定字段的类型为 `TeacherType`。接下来，我们使用 `Argument()` 方法定义 `id`
    参数，它是一个不可为空的 `UUID` 类型。然后，我们使用 `Resolve()` 方法定义解析器。解析器接收 `id` 参数并从数据库中检索 `Teacher`
    对象。请注意，`AppDbContext` 是从 `context` 对象注入到解析器中的。
- en: 'Next, we need to update the `Program.cs` file to register `QueryType`. Update
    the `Program.cs` file as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要更新 `Program.cs` 文件以注册 `QueryType`。按照以下方式更新 `Program.cs` 文件：
- en: '[PRE33]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We use `QueryType` to replace the `Query` type we defined previously so that
    we can use the resolver to retrieve the `Department` object when the `department`
    field is requested.
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们使用 `QueryType` 替换了之前定义的 `Query` 类型，这样我们就可以在请求 `department` 字段时使用解析器来检索 `Department`
    对象。
- en: Now, we can test the resolvers. Run the application using `dotnet run` and send
    the following request to query a teacher.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以测试解析器。使用 `dotnet run` 运行应用程序，并发送以下请求来查询一个教师。
- en: 'This is the GraphQL request:'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是 GraphQL 请求：
- en: '[PRE34]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: You will see the department information in the response. Also, if you check
    the log, you will see that the `Department` object is retrieved from the database.
    If you remove the `department` field from the query, you will only see one database
    query in the log, which means that GraphQL does not fetch the `Department` object
    from the database.
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将在响应中看到部门信息。此外，如果你检查日志，你将看到从数据库中检索了 `Department` 对象。如果你从查询中移除 `department`
    字段，你将只在日志中看到一个数据库查询，这意味着 GraphQL 不会从数据库中获取 `Department` 对象。
- en: 'In this example, we defined a resolver using a delegate method. We can also
    define a resolver in a separate class. For example, we can define a `TeacherResolver`
    class as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用委托方法定义了一个解析器。我们也可以在单独的类中定义解析器。例如，我们可以定义一个 `TeacherResolver` 类，如下所示：
- en: '[PRE35]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The preceding code defines a `GetDepartment()` method that takes a `Teacher`
    object as the parent object and returns the `Department` object. Then, we can
    use the `ResolveWith``()` method to define the resolver in the `TeacherType` class,
    as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定义了一个 `GetDepartment()` 方法，它接受一个 `Teacher` 对象作为父对象并返回 `Department` 对象。然后，我们可以使用
    `ResolveWith()` 方法在 `TeacherType` 类中定义解析器，如下所示：
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now, the logic of the resolver is moved to a separate class. This approach is
    more flexible when the resolver is complex. But for simple resolvers, we can use
    the delegate method directly.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，解析器的逻辑被移动到了一个单独的类中。当解析器复杂时，这种方法更加灵活。但对于简单的解析器，我们可以直接使用委托方法。
- en: So far, it works well. Let us try to update the `GetTeachers` method using the
    same approach in the next section.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，一切运行良好。让我们在下一节尝试使用相同的方法更新 `GetTeachers` 方法。
- en: Resolver for a list of objects
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象列表的解析器
- en: 'Similarly, we can use `ListType<TeacherType>` to define the `teachers` field
    and then use the `Resolve()` method to define the resolver. The `ListType` class
    is a wrapper type for the fluent code-first API. It is used to define a list of
    objects. Remove the `GetTeachers()` method in the `Query` class and add a `Teachers`
    field, as shown here:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们可以使用 `ListType<TeacherType>` 来定义 `teachers` 字段，然后使用 `Resolve()` 方法定义解析器。`ListType`
    类是用于流畅的代码优先 API 的包装类型。它用于定义对象列表。在 `Query` 类中移除 `GetTeachers()` 方法，并添加一个属性，如下所示：
- en: '[PRE37]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Then, configure the `Teachers` field in the `QueryType` class as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下方式在 `QueryType` 类中配置 `Teachers` 字段：
- en: '[PRE38]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The preceding code defines the `Teachers` field of `QueryType`. It uses `ListType<TeacherType>`
    to define a list of `TeacherType`. Then, it uses the `Resolve()` method to define
    the resolver. The resolver retrieves all the `Teacher` objects from the database.
    This code is similar to the `teacher` field we defined previously. However, it
    retrieves a list of `TeacherType` objects instead of a single `TeacherType` object.
    As `TeacherType` has a resolver for the `Department` field, we can retrieve the
    `Department` object for each `TeacherType` object.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码定义了 `QueryType` 的 `Teachers` 字段。它使用 `ListType<TeacherType>` 来定义一个 `TeacherType`
    的列表。然后，它使用 `Resolve()` 方法来定义解析器。解析器从数据库中检索所有 `Teacher` 对象。这段代码与之前定义的 `teacher`
    字段类似。然而，它检索的是 `TeacherType` 对象的列表而不是单个 `TeacherType` 对象。由于 `TeacherType` 对 `Department`
    字段有一个解析器，我们可以为每个 `TeacherType` 对象检索 `Department` 对象。
- en: 'Now, we can test the `teachers` field using the following query:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用以下查询测试 `teachers` 字段：
- en: '[PRE39]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'However, you may encounter an error in the response. Some teachers can be retrieved
    correctly, but some may not. The error message is like this:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能会在响应中遇到错误。一些教师可以正确检索，但一些可能无法检索。错误信息如下：
- en: '[PRE40]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This is because we have multiple resolvers that execute database queries concurrently.
    However, `AppDbContext` is registered as a scoped service, and the `AppDbContext`
    class is not thread-safe. When multiple resolvers try to query the database in
    parallel, they will use the same `AppDbContext` instance, which causes the error.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们有多個解析器会并发执行数据库查询。然而，`AppDbContext` 被注册为作用域服务，并且 `AppDbContext` 类不是线程安全的。当多个解析器尝试并行查询数据库时，它们将使用相同的
    `AppDbContext` 实例，这会导致错误。
- en: 'To fix this issue, we need to make sure that the resolvers do not access the
    same `AppDbContext` instance concurrently. There are two ways to do that. One
    is to execute the resolvers sequentially, and the other is to use separate `AppDbContext`
    instances for each resolver. HotChocolate provides a `RegisterDbContext<TDbContext>()`
    method to manage `DbContext` for resolvers. In order to use this feature, we need
    to install a NuGet package named `HotChocolate.Data.EntityFramework` using the
    following command:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们需要确保解析器不会并发访问相同的 `AppDbContext` 实例。有两种方法可以实现这一点。一种是将解析器顺序执行，另一种是为每个解析器使用单独的
    `AppDbContext` 实例。HotChocolate 提供了一个 `RegisterDbContext<TDbContext>()` 方法来管理解析器的
    `DbContext`。为了使用这个功能，我们需要使用以下命令安装一个名为 `HotChocolate.Data.EntityFramework` 的 NuGet
    包：
- en: '[PRE41]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: builder.Services    .AddGraphQLServer()
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services    .AddGraphQLServer()
- en: .RegisterDbContext<AppDbContext>()
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: .RegisterDbContext<AppDbContext>()
- en: // Omitted for brevity
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: // 省略以节省篇幅
- en: '[PRE42]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: builder.Services.AddPooledDbContextFactory<AppDbContext>(options =>    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));//
    Register the GraphQL servicesbuilder.Services    .AddGraphQLServer()    .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)    //
    Omitted for brevity
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services.AddPooledDbContextFactory<AppDbContext>(options =>    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));//
    注册 GraphQL 服务
- en: '[PRE43]'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: descriptor.Field(x => x.Teachers)    // Omitted for brevity    .Type<ListType<TeacherType>>()    .Resolve(async
    context =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    teachers = await dbContext.Teachers.ToListAsync();        return teachers;    });
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Teachers)    // 省略以节省篇幅    .Type<ListType<TeacherType>>()    .Resolve(async
    context =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    teachers = await dbContext.Teachers.ToListAsync();        return teachers;    });
- en: '[PRE44]'
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: descriptor.Field(x => x.Department)    .Description("This is the department
    to which the teacher belongs.")    .Resolve(async context =>    {        var dbContextFactory
    = context.Service<IDbContextFactory<AppDbContext>>();        await using var dbContext
    = await dbContextFactory.CreateDbContextAsync();        var department = await
    dbContext.Departments            .FindAsync(context.Parent<Teacher>().DepartmentId);        return
    department;    });
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Department)    .Description("这是教师所属的部门。")    .Resolve(async
    context =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    department = await dbContext.Departments            .FindAsync(context.Parent<Teacher>().DepartmentId);        return
    department;    });
- en: '[PRE45]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: public class Department{    public Guid Id { get; set; }    public string Name
    { get; set; } = string.Empty;    public string? Description { get; set; }    public
    List<Teacher> Teachers { get; set; } = new();}
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class Department{    public Guid Id { get; set; }    public string Name
    { get; set; } = string.Empty;    public string? Description { get; set; }    public
    List<Teacher> Teachers { get; set; } = new();}
- en: '[PRE46]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'public class DepartmentType : ObjectType<Department>{    protected override
    void Configure(IObjectTypeDescriptor<Department> descriptor)    {        descriptor.Field(x
    => x.Teachers)            .Description("This is the list of teachers in the department.")            .Type<ListType<TeacherType>>()            .ResolveWith<DepartmentResolvers>(x
    => x.GetTeachers(default, default));    }}public class DepartmentResolvers{    public
    async Task<List<Teacher>> GetTeachers([Parent] Department department,        [Service]
    IDbContextFactory<AppDbContext> dbContextFactory)    {        await using var
    dbContext = await dbContextFactory.CreateDbContextAsync();        var teachers
    = await dbContext.Teachers.Where(x => x.DepartmentId == department.Id).ToListAsync();        return
    teachers;    }}'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class DepartmentType : ObjectType<Department>{    protected override
    void Configure(IObjectTypeDescriptor<Department> descriptor)    {        descriptor.Field(x
    => x.Teachers)            .Description("这是该部门教师列表的描述.")            .Type<ListType<TeacherType>>()            .ResolveWith<DepartmentResolvers>(x
    => x.GetTeachers(default, default));    }}public class DepartmentResolvers{    public
    async Task<List<Teacher>> GetTeachers([Parent] Department department,        [Service]
    IDbContextFactory<AppDbContext> dbContextFactory)    {        await using var
    dbContext = await dbContextFactory.CreateDbContextAsync();        var teachers
    = await dbContext.Teachers.Where(x => x.DepartmentId == department.Id).ToListAsync();        return
    teachers;    }}'
- en: '[PRE47]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: public class Query{    // Omitted for brevity    public List<DepartmentType>
    Departments { get; set; } = new();}
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class Query{    // 省略以节省篇幅    public List<DepartmentType> Departments
    { get; set; } = new();}
- en: '[PRE48]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: descriptor.Field(x => x.Departments)    .Description("This is the list of departments
    in the school.")    .Type<ListType<DepartmentType>>()    .Resolve(async context
    =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    departments = await dbContext.Departments.ToListAsync();        return departments;    });
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Departments)    .Description("这是该学校部门列表的描述.")    .Type<ListType<DepartmentType>>()    .Resolve(async
    context =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    departments = await dbContext.Departments.ToListAsync();        return departments;    });
- en: query{   departments{    id    name    description    teachers{      id      firstName      lastName      bio    }   }}
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query{   departments{    id    name    description    teachers{      id      firstName      lastName      bio    }   }}
- en: '[PRE49]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (3ms) [Parameters=[@__department_Id_0=''?'' (DbType = Guid)], CommandType=''Text'',
    CommandTimeout=''30'']      SELECT [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email],
    [t].[FirstName], [t].[LastName], [t].[Phone]      FROM [Teachers] AS [t]      WHERE
    [t].[DepartmentId] = @__department_Id_0'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (3ms) [Parameters=[@__department_Id_0=''?'' (DbType = Guid)], CommandType=''Text'',
    CommandTimeout=''30'']      SELECT [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email],
    [t].[FirstName], [t].[LastName], [t].[Phone]      FROM [Teachers] AS [t]      WHERE
    [t].[DepartmentId] = @__department_Id_0'
- en: '[PRE50]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'public class DepartmentByTeacherIdBatchDataLoader(       IDbContextFactory<AppDbContext>
    dbContextFactory,       IBatchScheduler batchScheduler,       DataLoaderOptions?
    options = null)       : BatchDataLoader<Guid, Department>(batchScheduler, options){    protected
    override async Task<IReadOnlyDictionary<Guid, Department>> LoadBatchAsync(IReadOnlyList<Guid>    keys,        CancellationToken
    cancellationToken)    {        await using var dbContext = await dbContextFactory.CreateDbContextAsync(cancellationToken);        var
    departments = await dbContext.Departments.Where(x => keys.Contains(x.Id))            .ToDictionaryAsync(x
    => x.Id, cancellationToken);        return departments;    }}'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class DepartmentByTeacherIdBatchDataLoader(       IDbContextFactory<AppDbContext>
    dbContextFactory,       IBatchScheduler batchScheduler,       DataLoaderOptions?
    options = null)       : BatchDataLoader<Guid, Department>(batchScheduler, options){    protected
    override async Task<IReadOnlyDictionary<Guid, Department>> LoadBatchAsync(IReadOnlyList<Guid>    keys,        CancellationToken
    cancellationToken)    {        await using var dbContext = await dbContextFactory.CreateDbContextAsync(cancellationToken);        var
    departments = await dbContext.Departments.Where(x => keys.Contains(x.Id))            .ToDictionaryAsync(x
    => x.Id, cancellationToken);        return departments;    }}'
- en: '[PRE51]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: public class TeacherResolvers{    public async Task<Department> GetDepartment([Parent]
    Teacher teacher,        DepartmentByTeacherIdBatchDataLoader departmentByTeacherIdBatchDataLoader,
    CancellationToken cancellationToken)    {        var department = await departmentByTeacherIdBatchDataLoader.LoadAsync(teacher.DepartmentId,    cancellationToken);        return
    department;    }}
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class TeacherResolvers{    public async Task<Department> GetDepartment([Parent]
    Teacher teacher,        DepartmentByTeacherIdBatchDataLoader departmentByTeacherIdBatchDataLoader,
    CancellationToken cancellationToken)    {        var department = await departmentByTeacherIdBatchDataLoader.LoadAsync(teacher.DepartmentId,    cancellationToken);        return
    department;    }}
- en: '[PRE52]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (108ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email], [t].[FirstName], [t].[LastName],
    [t].   [Phone]      FROM [Teachers] AS [t]info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed
    DbCommand (73ms) [Parameters=[@__keys_0=''?'' (Size = 4000)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [d].[Id], [d].[Description], [d].[Name]      FROM [Departments] AS [d]      WHERE
    [d].[Id] IN (          SELECT [k].[value]          FROM OPENJSON(@__keys_0) WITH
    ([value] uniqueidentifier ''$'') AS [k]      )'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (108ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email], [t].[FirstName], [t].[LastName],
    [t].[Phone]      FROM [Teachers] AS [t]info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed
    DbCommand (73ms) [Parameters=[@__keys_0=''?'' (Size = 4000)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [d].[Id], [d].[Description], [d].[Name]      FROM [Departments] AS [d]      WHERE
    [d].[Id] IN (          SELECT [k].[value]          FROM OPENJSON(@__keys_0) WITH
    ([value] uniqueidentifier ''$'') AS [k]      )'
- en: '[PRE53]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'public class TeachersByDepartmentIdDataLoader(       IDbContextFactory<AppDbContext>
    dbContextFactory,       IBatchScheduler batchScheduler,       DataLoaderOptions?
    options = null)       : GroupedDataLoader<Guid, Teacher>(batchScheduler, options){    protected
    override async Task<ILookup<Guid, Teacher>> LoadGroupedBatchAsync(IReadOnlyList<Guid>
    keys,        CancellationToken cancellationToken)    {        await using var
    dbContext = await dbContextFactory.CreateDbContextAsync(cancellationToken);        var
    teachers = await dbContext.Teachers.Where(x => keys.Contains(x.DepartmentId))            .ToListAsync(cancellationToken);        return
    teachers.ToLookup(x => x.DepartmentId);    }}'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class TeachersByDepartmentIdDataLoader(       IDbContextFactory<AppDbContext>
    dbContextFactory,       IBatchScheduler batchScheduler,       DataLoaderOptions?
    options = null)       : GroupedDataLoader<Guid, Teacher>(batchScheduler, options){    protected
    override async Task<ILookup<Guid, Teacher>> LoadGroupedBatchAsync(IReadOnlyList<Guid>
    keys,        CancellationToken cancellationToken)    {        await using var
    dbContext = await dbContextFactory.CreateDbContextAsync(cancellationToken);        var
    teachers = await dbContext.Teachers.Where(x => keys.Contains(x.DepartmentId))            .ToListAsync(cancellationToken);        return
    teachers.ToLookup(x => x.DepartmentId);    }}'
- en: '[PRE54]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: public class DepartmentResolvers{    public async Task<List<Teacher>> GetTeachers([Parent]
    Department department,        TeachersByDepartmentIdDataLoader teachersByDepartmentIdDataLoader,
    CancellationToken cancellationToken)    {        var teachers = await teachersByDepartmentIdDataLoader.LoadAsync(department.Id,
    cancellationToken);        return teachers.ToList();    }}
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public class DepartmentResolvers{    public async Task<List<Teacher>> GetTeachers([Parent]
    Department department,        TeachersByDepartmentIdDataLoader teachersByDepartmentIdDataLoader,
    CancellationToken cancellationToken)    {        var teachers = await teachersByDepartmentIdDataLoader.LoadAsync(department.Id,
    cancellationToken);        return teachers.ToList();    }}
- en: '[PRE55]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (38ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [d].[Id], [d].[Description], [d].[Name]      FROM [Departments] AS [d]info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed
    DbCommand (36ms) [Parameters=[@__keys_0=''?'' (Size = 4000)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email], [t].[FirstName], [t].[LastName],
    [t].[Phone]      FROM [Teachers] AS [t]      WHERE [t].[DepartmentId] IN (          SELECT
    [k].[value]          FROM OPENJSON(@__keys_0) WITH ([value] uniqueidentifier ''$'')
    AS [k]      )'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (38ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [d].[Id], [d].[Description], [d].[Name]      FROM [Departments] AS [d]info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed
    DbCommand (36ms) [Parameters=[@__keys_0=''?'' (Size = 4000)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email], [t].[FirstName], [t].[LastName],
    [t].[Phone]      FROM [Teachers] AS [t]      WHERE [t].[DepartmentId] IN (          SELECT
    [k].[value]          FROM OPENJSON(@__keys_0) WITH ([value] uniqueidentifier ''$'')
    AS [k]      )'
- en: '[PRE56]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: public interface ITeacherService{
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: public interface ITeacherService{
- en: Task<Department> GetDepartmentAsync(Guid departmentId);
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: Task<Department> GetDepartmentAsync(Guid departmentId);
- en: Task<List<Teacher>> GetTeachersAsync();
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: Task<List<Teacher>> GetTeachersAsync();
- en: Task<Teacher> GetTeacherAsync(Guid teacherId);
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: // Omitted for brevity
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'public class TeacherService(IDbContextFactory<AppDbContext> contextFactory)
    : ITeacherService'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<Department> GetDepartmentAsync(Guid departmentId)
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: var department = await dbContext.Departments.FindAsync(departmentId);
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: return department ?? throw new ArgumentException("Department not found", nameof(departmentId));
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<List<Teacher>> GetTeachersAsync()
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: var teachers = await dbContext.Teachers.ToListAsync();
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: return teachers;
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<Teacher> GetTeacherAsync(Guid teacherId)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: var teacher = await dbContext.Teachers.FindAsync(teacherId);
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: return teacher ?? throw new ArgumentException("Teacher not found", nameof(teacherId));
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: // Omitted for brevity
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: builder.Services.AddScoped<ITeacherService, TeacherService>();
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: public async Task<List<Teacher>> GetTeachersWithDI([Service] ITeacherService
    teacherService) =>    await teacherService.GetTeachersAsync();
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: builder.Services    .AddGraphQLServer()
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterService<ITeacherService>()
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: .AddQueryType<QueryType>()
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: .AddMutationType<Mutation>();
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: public async Task<List<Teacher>> GetTeachersWithDI(ITeacherService teacherService)
    =>    await teacherService.GetTeachersAsync();
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: public async Task<List<Teacher>> GetTeachersWithDI([Service(ServiceKind.Resolver)]
    ITeacherService teacherService) =>    await teacherService.GetTeachersAsync();
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: builder.Services    .AddGraphQLServer()
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterService<ITeacherService>(ServiceKind.Resolver)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: .AddQueryType<QueryType>()
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: .AddMutationType<Mutation>();
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: descriptor.Field(x => x.Teachers)    .Description("This is the list of teachers
    in the school.")
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: .Type<ListType<TeacherType>>()
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: .Resolve(async context =>
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: var teacherService = context.Service<ITeacherService>();
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: var teachers = await teacherService.GetTeachersAsync();
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: return teachers;
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: public interface ISchoolRoom{
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: Guid Id { get; set; }
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: string Name { get; set; }
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: string? Description { get; set; }
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: public int Capacity { get; set; }
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: 'public class LabRoom : ISchoolRoom'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: public string Name { get; set; } = string.Empty;
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: public string? Description { get; set; }
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: public int Capacity { get; set; }
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: public string Subject { get; set; } = string.Empty;
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: public string Equipment { get; set; } = string.Empty;
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasChemicals { get; set; }
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: 'public class Classroom : ISchoolRoom'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: public string Name { get; set; } = string.Empty;
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: public string? Description { get; set; }
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: public int Capacity { get; set; }
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasComputers { get; set; }
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasProjector { get; set; }
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasWhiteboard { get; set; }
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: public interface ISchoolRoomService{
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`public interface ISchoolRoomService{`'
- en: Task<List<ISchoolRoom>> GetSchoolRoomsAsync();
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 异步获取学校教室列表：`Task<List<ISchoolRoom>> GetSchoolRoomsAsync();`
- en: Task<List<LabRoom>> GetLabRoomsAsync();
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 异步获取实验室教室列表：`Task<List<LabRoom>> GetLabRoomsAsync();`
- en: Task<List<Classroom>> GetClassroomsAsync();
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 异步获取教室列表：`Task<List<Classroom>> GetClassroomsAsync();`
- en: Task<LabRoom> GetLabRoomAsync(Guid labRoomId);
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 异步获取实验室教室：`Task<LabRoom> GetLabRoomAsync(Guid labRoomId);`
- en: Task<Classroom> GetClassroomAsync(Guid classroomId);
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 异步获取教室：`Task<Classroom> GetClassroomAsync(Guid classroomId);`
- en: '}'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'public class SchoolRoomService(IDbContextFactory<AppDbContext> contextFactory)
    : ISchoolRoomService'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`public class SchoolRoomService(IDbContextFactory<AppDbContext> contextFactory)
    : ISchoolRoomService`'
- en: '{'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public async Task<List<ISchoolRoom>> GetSchoolRoomsAsync()
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`public async Task<List<ISchoolRoom>> GetSchoolRoomsAsync()`'
- en: '{'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`await using var dbContext = await contextFactory.CreateDbContextAsync();`'
- en: var labRooms = await dbContext.LabRooms.ToListAsync();
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`var labRooms = await dbContext.LabRooms.ToListAsync();`'
- en: var classrooms = await dbContext.Classrooms.ToListAsync();
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`var classrooms = await dbContext.Classrooms.ToListAsync();`'
- en: var schoolRooms = new List<ISchoolRoom>();
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`var schoolRooms = new List<ISchoolRoom>();`'
- en: schoolRooms.AddRange(labRooms);
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`schoolRooms.AddRange(labRooms);`'
- en: schoolRooms.AddRange(classrooms);
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`schoolRooms.AddRange(classrooms);`'
- en: return schoolRooms;
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`return schoolRooms;`'
- en: '}'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Omitted for brevity
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: // 省略以节省篇幅
- en: '}'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE66]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: builder.Services.AddScoped<ISchoolRoomService, SchoolRoomService>();
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`builder.Services.AddScoped<ISchoolRoomService, SchoolRoomService>();`'
- en: '[PRE67]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'public class SchoolRoomType : InterfaceType<ISchoolRoom>{    protected override
    void Configure(IInterfaceTypeDescriptor<ISchoolRoom> descriptor)    {        descriptor.Name("SchoolRoom");    }}'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public class SchoolRoomType : InterfaceType<ISchoolRoom>{    protected override
    void Configure(IInterfaceTypeDescriptor<ISchoolRoom> descriptor)    {        descriptor.Name("SchoolRoom");    }}`'
- en: '[PRE68]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'public class LabRoomType : ObjectType<LabRoom>{    protected override void
    Configure(IObjectTypeDescriptor<LabRoom> descriptor)    {        descriptor.Name("LabRoom");        descriptor.Implements<SchoolRoomType>();    }}public
    class ClassroomType : ObjectType<Classroom>{    protected override void Configure(IObjectTypeDescriptor<Classroom>
    descriptor)    {        descriptor.Name("Classroom");        descriptor.Implements<SchoolRoomType>();    }}'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public class LabRoomType : ObjectType<LabRoom>{    protected override void
    Configure(IObjectTypeDescriptor<LabRoom> descriptor)    {        descriptor.Name("LabRoom");        descriptor.Implements<SchoolRoomType>();    }}public
    class ClassroomType : ObjectType<Classroom>{    protected override void Configure(IObjectTypeDescriptor<Classroom>
    descriptor)    {        descriptor.Name("Classroom");        descriptor.Implements<SchoolRoomType>();    }}`'
- en: '[PRE69]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: public List<SchoolRoomType> SchoolRooms { get; set; } = new();
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`public List<SchoolRoomType> SchoolRooms { get; set; } = new();`'
- en: '[PRE70]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: descriptor.Field(x => x.SchoolRooms)    .Description("This is the list of school
    rooms in the school.")    .Type<ListType<SchoolRoomType>>()    .Resolve(async
    context =>    {        var service = context.Service<ISchoolRoomService>();        var
    schoolRooms = await service.GetSchoolRoomsAsync();        return schoolRooms;    });
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`descriptor.Field(x => x.SchoolRooms)    .Description("This is the list of
    school rooms in the school.")    .Type<ListType<SchoolRoomType>>()    .Resolve(async
    context =>    {        var service = context.Service<ISchoolRoomService>();        var
    schoolRooms = await service.GetSchoolRoomsAsync();        return schoolRooms;    });`'
- en: '[PRE71]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: builder.Services    .AddGraphQLServer()    .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)    .RegisterService<ITeacherService>(ServiceKind.Resolver)    .AddQueryType<QueryType>()    .AddType<LabRoomType>()    .AddType<ClassroomType>()    .AddMutationType<Mutation>();
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`builder.Services    .AddGraphQLServer()    .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)    .RegisterService<ITeacherService>(ServiceKind.Resolver)    .AddQueryType<QueryType>()    .AddType<LabRoomType>()    .AddType<ClassroomType>()    .AddMutationType<Mutation>();`'
- en: '[PRE72]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'type Query {  """  This is the list of school rooms in the school.  """  schoolRooms:
    [SchoolRoom]}type LabRoom implements SchoolRoom {  id: UUID!  name: String!  description:
    String  capacity: Int!  subject: String!  equipment: String!  hasChemicals: Boolean!}type
    Classroom implements SchoolRoom {  id: UUID!  name: String!  description: String  capacity:
    Int!  hasComputers: Boolean!  hasProjector: Boolean!  hasWhiteboard: Boolean!}'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '类型查询：`type Query {  """  This is the list of school rooms in the school.  """  schoolRooms:
    [SchoolRoom]}type LabRoom implements SchoolRoom {  id: UUID!  name: String!  description:
    String  capacity: Int!  subject: String!  equipment: String!  hasChemicals: Boolean!}type
    Classroom implements SchoolRoom {  id: UUID!  name: String!  description: String  capacity:
    Int!  hasComputers: Boolean!  hasProjector: Boolean!  hasWhiteboard: Boolean!}`'
- en: '[PRE73]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: query {  schoolRooms {    __typename    id    name    description    capacity    ...
    on LabRoom {      subject      equipment      hasChemicals    }    ... on Classroom
    {      hasComputers      hasProjector      hasWhiteboard    }  }}
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询：`query {  schoolRooms {    __typename    id    name    description    capacity    ...
    on LabRoom {      subject      equipment      hasChemicals    }    ... on Classroom
    {      hasComputers      hasProjector      hasWhiteboard    }  }}`
- en: '{  "data": {    "schoolRooms": [      {        "__typename": "LabRoom",        "id":
    "00000000-0000-0000-0000-000000000501",        "name": "Chemistry Lab",        "description":
    "Chemistry Lab",        "capacity": 20,        "subject": "Chemistry",        "equipment":
    "Chemicals, Beakers, Bunsen Burners",        "hasChemicals": true      },      {        "__typename":
    "Classroom",        "id": "00000000-0000-0000-0000-000000000601",        "name":
    "Classroom 1",        "description": "Classroom 1",        "capacity": 20,        "hasComputers":
    true,        "hasProjector": false,        "hasWhiteboard": true      },      ...    ]  }}'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "data": {    "schoolRooms": [      {        "__typename": "LabRoom",        "id":
    "00000000-0000-0000-0000-000000000501",        "name": "Chemistry Lab",        "description":
    "Chemistry Lab",        "capacity": 20,        "subject": "Chemistry",        "equipment":
    "Chemicals, Beakers, Bunsen Burners",        "hasChemicals": true      },      {        "__typename":
    "Classroom",        "id": "00000000-0000-0000-0000-000000000601",        "name":
    "Classroom 1",        "description": "Classroom 1",        "capacity": 20,        "hasComputers":
    true,        "hasProjector": false,        "hasWhiteboard": true      },      ...    ]  }}'
- en: '[PRE74]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: public class Equipment{
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: public class 设备{
- en: public Guid Id { get; set; }
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: public Guid Id { get; set; }
- en: public string Name { get; set; } = string.Empty;
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: public string 名称 { get; set; } = string.Empty;
- en: public string? Description { get; set; }
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: public string? 描述 { get; set; }
- en: public string Condition { get; set; } = string.Empty;
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: public string 状态 { get; set; } = string.Empty;
- en: public string Brand { get; set; } = string.Empty;
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: public string 品牌 { get; set; } = string.Empty;
- en: public int Quantity { get; set; }
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: public int 数量 { get; set; }
- en: '}'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public class Furniture
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: public class 家具
- en: '{'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public Guid Id { get; set; }
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: public Guid Id { get; set; }
- en: public string Name { get; set; } = string.Empty;
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: public string 名称 { get; set; } = string.Empty;
- en: public string? Description { get; set; }
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: public string? 描述 { get; set; }
- en: public string Color { get; set; } = string.Empty;
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: public string 颜色 { get; set; } = string.Empty;
- en: public string Material { get; set; } = string.Empty;
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: public string 材质 { get; set; } = string.Empty;
- en: public int Quantity { get; set; }
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: public int 数量 { get; set; }
- en: '}'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE75]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: public interface IEquipmentService{
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: public interface IEquipmentService{
- en: Task<List<Equipment>> GetEquipmentListAsync();
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: Task<List<设备>> 获取设备列表Async();
- en: Task<Equipment> GetEquipmentAsync(Guid equipmentId);
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: Task<设备> 获取设备Async(Guid equipmentId);
- en: '}'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'public class EquipmentService(IDbContextFactory<AppDbContext> contextFactory)
    : IEquipmentService'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 'public class 设备服务(IDbContextFactory<AppDbContext> contextFactory) : IEquipmentService'
- en: '{'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public async Task<List<Equipment>> GetEquipmentListAsync()
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: public async Task<List<设备>> 获取设备列表Async()
- en: '{'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: await using var dbContext = await contextFactory.CreateDbContextAsync();
- en: var equipment = await dbContext.Equipment.ToListAsync();
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: var equipment = await dbContext.Equipment.ToListAsync();
- en: return equipment;
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: return equipment;
- en: '}'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public async Task<Equipment> GetEquipmentAsync(Guid equipmentId)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: public async Task<设备> 获取设备Async(Guid equipmentId)
- en: '{'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: await using var dbContext = await contextFactory.CreateDbContextAsync();
- en: var equipment = await dbContext.Equipment.FindAsync(equipmentId);
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: var equipment = await dbContext.Equipment.FindAsync(equipmentId);
- en: return equipment ?? throw new ArgumentException("Equipment not found", nameof(equipmentId));
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: return equipment ?? throw new ArgumentException("设备未找到", nameof(equipmentId));
- en: '}'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE76]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: public interface IFurnitureService{
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: public interface IFurnitureService{
- en: Task<List<Furniture>> GetFurnitureListAsync();
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: Task<List<家具>> 获取家具列表Async();
- en: Task<Furniture> GetFurnitureAsync(Guid furnitureId);
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: Task<家具> 获取家具Async(Guid furnitureId);
- en: '}'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'public class FurnitureService(IDbContextFactory<AppDbContext> contextFactory)
    : IFurnitureService'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 'public class 家具服务(IDbContextFactory<AppDbContext> contextFactory) : IFurnitureService'
- en: '{'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: public async Task<List<Furniture>> GetFurnitureListAsync()
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: public async Task<List<家具>> 获取家具列表Async()
- en: '{'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: await using var dbContext = await contextFactory.CreateDbContextAsync();
- en: var furniture = await dbContext.Furniture.ToListAsync();
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: var furniture = await dbContext.Furniture.ToListAsync();
- en: return furniture;
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: return furniture;
- en: '}'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: public async Task<Furniture> GetFurnitureAsync(Guid furnitureId)
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: public async Task<家具> 获取家具Async(Guid furnitureId)
- en: '{'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: await using var dbContext = await contextFactory.CreateDbContextAsync();
- en: var furniture = await dbContext.Furniture.FindAsync(furnitureId);
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: var furniture = await dbContext.Furniture.FindAsync(furnitureId);
- en: return furniture ?? throw new ArgumentException("Furniture not found", nameof(furnitureId));
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: return furniture ?? throw new ArgumentException("家具未找到", nameof(furnitureId));
- en: '}'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE77]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: builder.Services.AddScoped<IEquipmentService, EquipmentService>();builder.Services.AddScoped<IFurnitureService,
    FurnitureService>();
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: builder.Services.AddScoped<IEquipmentService, 设备服务>();builder.Services.AddScoped<IFurnitureService,
    家具服务>();
- en: '[PRE78]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'public class EquipmentType : ObjectType<Equipment>{    protected override void
    Configure(IObjectTypeDescriptor<Equipment> descriptor)    {        descriptor.Name("Equipment");    }}public
    class FurnitureType : ObjectType<Furniture>{    protected override void Configure(IObjectTypeDescriptor<Furniture>
    descriptor)    {        descriptor.Name("Furniture");    }}'
  id: totrans-416
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '公共类 EquipmentType : ObjectType<Equipment>{    protected override void Configure(IObjectTypeDescriptor<Equipment>
    descriptor)    {        descriptor.Name("Equipment");    }}public class FurnitureType
    : ObjectType<Furniture>{    protected override void Configure(IObjectTypeDescriptor<Furniture>
    descriptor)    {        descriptor.Name("Furniture");    }}'
- en: '[PRE79]'
  id: totrans-417
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'public class SchoolItemType : UnionType{    protected override void Configure(IUnionTypeDescriptor
    descriptor)    {        descriptor.Name("SchoolItem");        descriptor.Type<EquipmentType>();        descriptor.Type<FurnitureType>();    }}'
  id: totrans-418
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '公共类 SchoolItemType : UnionType{    protected override void Configure(IUnionTypeDescriptor
    descriptor)    {        descriptor.Name("SchoolItem");        descriptor.Type<EquipmentType>();        descriptor.Type<FurnitureType>();    }}'
- en: '[PRE80]'
  id: totrans-419
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: public List<SchoolItemType> SchoolItems { get; set; } = new();
  id: totrans-420
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 公共 List<SchoolItemType> SchoolItems { get; set; } = new();
- en: '[PRE81]'
  id: totrans-421
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: descriptor.Field(x => x.SchoolItems)    .Description("This is the list of school
    items in the school.")    .Type<ListType<SchoolItemType>>()    .Resolve(async
    context =>    {        var equipmentService = context.Service<IEquipmentService>();        var
    furnitureService = context.Service<IFurnitureService>();        var equipmentTask
    = equipmentService.GetEquipmentListAsync();        var furnitureTask = furnitureService.GetFurnitureListAsync();        await
    Task.WhenAll(equipmentTask, furnitureTask);        var schoolItems = new List<object>();        schoolItems.AddRange(equipmentTask.Result);        schoolItems.AddRange(furnitureTask.Result);        return
    schoolItems;    });
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.SchoolItems)    .Description("这是学校中物品列表.")    .Type<ListType<SchoolItemType>>()    .Resolve(async
    context =>    {        var equipmentService = context.Service<IEquipmentService>();        var
    furnitureService = context.Service<IFurnitureService>();        var equipmentTask
    = equipmentService.GetEquipmentListAsync();        var furnitureTask = furnitureService.GetFurnitureListAsync();        await
    Task.WhenAll(equipmentTask, furnitureTask);        var schoolItems = new List<object>();        schoolItems.AddRange(equipmentTask.Result);        schoolItems.AddRange(furnitureTask.Result);        return
    schoolItems;    });
- en: '[PRE82]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'union SchoolItem = Equipment | Furnituretype Equipment {  id: UUID!  name:
    String!  description: String  condition: String!  brand: String!  quantity: Int!}type
    Furniture {  id: UUID!  name: String!  description: String  color: String!  material:
    String!  quantity: Int!}'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '联合 SchoolItem = Equipment | Furnituretype Equipment {  id: UUID!  name: String!  description:
    String  condition: String!  brand: String!  quantity: Int!}type Furniture {  id:
    UUID!  name: String!  description: String  color: String!  material: String!  quantity:
    Int!}'
- en: '[PRE83]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: query {  schoolItems {    __typename    ... on Equipment {      id      name      description      condition      brand      quantity    }    ...
    on Furniture {      id      name      description      color      material      quantity    }  }}
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询 `{  schoolItems {    __typename    ... on Equipment {      id      name      description      condition      brand      quantity    }    ...
    on Furniture {      id      name      description      color      material      quantity    }  }}
- en: '{  "data": {    "schoolItems": [      {        "__typename": "Equipment",        "id":
    "00000000-0000-0000-0000-000000000701",        "name": "Bunsen Burner",        "description":
    "Bunsen Burner",        "condition": "Good",        "brand": "Bunsen",        "quantity":
    10      },      {        "__typename": "Furniture",        "id": "00000000-0000-0000-0000-000000000801",        "name":
    "Desk",        "description": "Desk",        "color": "Brown",        "material":
    "Wood",        "quantity": 20      },      ...    ]  }}'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "data": {    "schoolItems": [      {        "__typename": "Equipment",        "id":
    "00000000-0000-0000-0000-000000000701",        "name": "Bunsen Burner",        "description":
    "Bunsen Burner",        "condition": "Good",        "brand": "Bunsen",        "quantity":
    10      },      {        "__typename": "Furniture",        "id": "00000000-0000-0000-0000-000000000801",        "name":
    "Desk",        "description": "Desk",        "color": "Brown",        "material":
    "Wood",        "quantity": 20      },      ...    ]  }}'
- en: '[PRE84]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: query {  schoolItems {    __typename    id    name   }}
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询 `{  schoolItems {    __typename    id    name   }}
- en: '[PRE85]'
  id: totrans-430
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '{  "errors": [    {      "message": "A union type cannot declare a field directly.
    Use inline fragments or fragments instead.",      "locations": [        {          "line":
    2,          "column": 15        }      ],      "path": [        "schoolItems"      ],      "extensions":
    {        "type": "SchoolItem",        "specifiedBy": "http://spec.graphql.org/October2021/   #sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types"      }    }  ]}'
  id: totrans-431
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "errors": [    {      "message": "联合类型不能直接声明字段。请使用内联片段或片段代替。",      "locations":
    [        {          "line": 2,          "column": 15        }      ],      "path":
    [        "schoolItems"      ],      "extensions": {        "type": "SchoolItem",        "specifiedBy":
    "http://spec.graphql.org/October2021/   #sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types"      }    }  ]}'
- en: '[PRE86]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: public class Student{
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 公共类 Student{
- en: public Guid Id { get; set; }
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 公共 Guid Id { get; set; }
- en: public string FirstName { get; set; } = string.Empty;
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: public string FirstName { get; set; } = string.Empty;
- en: public string LastName { get; set; } = string.Empty;
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: public string LastName { get; set; } = string.Empty;
- en: public string Email { get; set; } = string.Empty;
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: public string Email { get; set; } = string.Empty;
- en: public string? Phone { get; set; }
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: public string? Phone { get; set; }
- en: public string Grade { get; set; } = string.Empty;
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: public string Grade { get; set; } = string.Empty;
- en: public DateOnly? DateOfBirth { get; set; }
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: public DateOnly? DateOfBirth { get; set; }
- en: public Guid GroupId { get; set; }
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: public Guid GroupId { get; set; }
- en: public Group Group { get; set; } = default!;
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: public Group Group { get; set; } = default!;
- en: public List<Course> Courses { get; set; } = new();
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: public List<Course> Courses { get; set; } = new();
- en: public List<StudentCourse> StudentCourses { get; set; } = new();
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: public List<StudentCourse> StudentCourses { get; set; } = new();
- en: '}'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE87]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: dotnet add package HotChocolate.Data
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: dotnet add package HotChocolate.Data
- en: '[PRE88]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: builder.Services    .AddGraphQLServer()    // Omitted for brevity    .AddFiltering()    .AddMutationType<Mutation>();
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services    .AddGraphQLServer()    // Omitted for brevity    .AddFiltering()    .AddMutationType<Mutation>();
- en: '[PRE89]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: public List<Student> Students { get; set; } = new();
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public List<Student> Students { get; set; } = new();
- en: '[PRE90]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering()    .Resolve(async context =>    {        var
    dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        var
    dbContext = await dbContextFactory.CreateDbContextAsync();        var students
    = dbContext.Students.AsQueryable();        return students;    });
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering()    .Resolve(async context =>    {        var
    dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        var
    dbContext = await dbContextFactory.CreateDbContextAsync();        var students
    = dbContext.Students.AsQueryable();        return students;    });
- en: '[PRE91]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'students(where: StudentFilterInput): [Student!]!'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'students(where: StudentFilterInput): [Student!]!'
- en: 'input StudentFilterInput {  and: [StudentFilterInput!]  or: [StudentFilterInput!]  id:
    UuidOperationFilterInput  firstName: StringOperationFilterInput  lastName: StringOperationFilterInput  email:
    StringOperationFilterInput  phone: StringOperationFilterInput  grade: StringOperationFilterInput  dateOfBirth:
    DateOperationFilterInput}'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'input StudentFilterInput {  and: [StudentFilterInput!]  or: [StudentFilterInput!]  id:
    UuidOperationFilterInput  firstName: StringOperationFilterInput  lastName: StringOperationFilterInput  email:
    StringOperationFilterInput  phone: StringOperationFilterInput  grade: StringOperationFilterInput  dateOfBirth:
    DateOperationFilterInput}'
- en: '[PRE92]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'query {  students(where: { firstName: { eq: "John" } }) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query {  students(where: { firstName: { eq: "John" } }) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
- en: '{  "data": {    "students": [      {        "id": "00000000-0000-0000-0000-000000000901",        "firstName":
    "John",        "lastName": "Doe",        "email": "",        "phone": null,        "grade":
    "",        "dateOfBirth": "2000-01-01"      }    ]  }}'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "data": {    "students": [      {        "id": "00000000-0000-0000-0000-000000000901",        "firstName":
    "John",        "lastName": "Doe",        "email": "",        "phone": null,        "grade":
    "",        "dateOfBirth": "2000-01-01"      }    ]  }}'
- en: '[PRE93]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (36ms) [Parameters=[@__p_0=''?'' (Size = 32)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId],
    [s].   [LastName], [s].[Phone]      FROM [Students] AS [s]      WHERE [s].[FirstName]
    = @__p_0'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (36ms) [Parameters=[@__p_0=''?'' (Size = 32)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId],
    [s].   [LastName], [s].[Phone]      FROM [Students] AS [s]      WHERE [s].[FirstName]
    = @__p_0'
- en: '[PRE94]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'query ($where: StudentFilterInput) {  students(where: $where) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query ($where: StudentFilterInput) {  students(where: $where) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
- en: '{  "where": {    "firstName": {      "eq": "John"    }  }}'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "where": {    "firstName": {      "eq": "John"    }  }}'
- en: '[PRE95]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '{  "where": {    "firstName": {      "in": ["John", "Jane"]    }  }}'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "where": {    "firstName": {      "in": ["John", "Jane"]    }  }}'
- en: '[PRE96]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '{  "where": {    "dateOfBirth": {      "gt": "2001-01-01"    }  }}'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "where": {    "dateOfBirth": {      "gt": "2001-01-01"    }  }}'
- en: '[PRE97]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: 'public class StudentFilterType : FilterInputType<Student>{    protected override
    void Configure(IFilterInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Field(t
    => t.Id);        descriptor.Field(t => t.GroupId);        descriptor.Field(t =>
    t.FirstName);        descriptor.Field(t => t.LastName);        descriptor.Field(t
    => t.DateOfBirth);    }}'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class StudentFilterType : FilterInputType<Student>{    protected override
    void Configure(IFilterInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Field(t
    => t.Id);        descriptor.Field(t => t.GroupId);        descriptor.Field(t =>
    t.FirstName);        descriptor.Field(t => t.LastName);        descriptor.Field(t
    => t.DateOfBirth);    }}'
- en: '[PRE98]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering<StudentFilterType>()    // Omitted for brevity
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Students)    .Description("这是学校中学生的列表.")    .UseFiltering<StudentFilterType>()    //
    省略以节省篇幅
- en: '[PRE99]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: 'input StudentFilterInput {  and: [StudentFilterInput!]  or: [StudentFilterInput!]  id:
    UuidOperationFilterInput  groupId: UuidOperationFilterInput  firstName: StringOperationFilterInput  lastName:
    StringOperationFilterInput  dateOfBirth: DateOperationFilterInput}'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '输入 StudentFilterInput {  and: [StudentFilterInput!]  or: [StudentFilterInput!]  id:
    UuidOperationFilterInput  groupId: UuidOperationFilterInput  firstName: StringOperationFilterInput  lastName:
    StringOperationFilterInput  dateOfBirth: DateOperationFilterInput}'
- en: '[PRE100]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: override protected void Configure(IFilterInputTypeDescriptor<Student> descriptor){    descriptor.BindFieldsImplicitly();    descriptor.Ignore(t
    => t.Group);    descriptor.Ignore(t => t.Courses);}
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: override protected void Configure(IFilterInputTypeDescriptor<Student> descriptor){    descriptor.BindFieldsImplicitly();    descriptor.Ignore(t
    => t.Group);    descriptor.Ignore(t => t.Courses);}
- en: 'public class StudentStringOperationFilterInputType : StringOperationFilterInputType{    protected
    override void Configure(IFilterInputTypeDescriptor descriptor)    {        descriptor.Operation(DefaultFilterOperations.Equals).Type<StringType>();        descriptor.Operation(DefaultFilterOperations.Contains).Type<StringType>();    }}'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class StudentStringOperationFilterInputType : StringOperationFilterInputType{    protected
    override void Configure(IFilterInputTypeDescriptor descriptor)    {        descriptor.Operation(DefaultFilterOperations.Equals).Type<StringType>();        descriptor.Operation(DefaultFilterOperations.Contains).Type<StringType>();    }}'
- en: '[PRE101]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: override protected void Configure(IFilterInputTypeDescriptor<Student> descriptor){    //
    Omitted for brevity    descriptor.Field(t => t.FirstName).Type<StudentStringOperationFilterInputType>();    descriptor.Field(t
    => t.LastName).Type<StudentStringOperationFilterInputType>();}
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: override protected void Configure(IFilterInputTypeDescriptor<Student> descriptor){    //
    省略以节省篇幅    descriptor.Field(t => t.FirstName).Type<StudentStringOperationFilterInputType>();    descriptor.Field(t
    => t.LastName).Type<StudentStringOperationFilterInputType>();}
- en: '[PRE102]'
  id: totrans-480
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'query {  students(where: { and: [{ firstName: { eq: "John" } }, { dateOfBirth:
    { gt: "2001-01-01" } }] }) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  id: totrans-481
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '查询 {  students(where: { and: [{ firstName: { eq: "John" } }, { dateOfBirth:
    { gt: "2001-01-01" } }] }) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
- en: 'query ($where: StudentFilterInput) {  students(where: $filter) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  id: totrans-482
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '查询 ($where: StudentFilterInput) {  students(where: $filter) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
- en: '[PRE103]'
  id: totrans-483
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '{  "where": {    "or": [      {        "firstName": {          "eq": "John"        }      },      {        "lastName":
    {          "eq": "Doe"        }      }    ]  }}'
  id: totrans-484
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "where": {    "or": [      {        "firstName": {          "eq": "John"        }      },      {        "lastName":
    {          "eq": "Doe"        }      }    ]  }}'
- en: '[PRE104]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: public interface IStudentService{    // Omitted for brevity    Task<List<Student>>
    GetStudentsByGroupIdAsync(Guid groupId);    Task<List<Student>> GetStudentsByGroupIdsAsync(List<Guid>
    groupIds);}
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public interface IStudentService{    // 省略以节省篇幅    Task<List<Student>> GetStudentsByGroupIdAsync(Guid
    groupId);    Task<List<Student>> GetStudentsByGroupIdsAsync(List<Guid> groupIds);}
- en: '[PRE105]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'public class CustomStudentFilterType : FilterInputType<Student>{    protected
    override void Configure(IFilterInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Name("CustomStudentFilterInput");        descriptor.AllowAnd(false).AllowOr(false);        descriptor.Field(t
    => t.GroupId).Type<CustomStudentGuidOperationFilterInputType>();    }}public class
    CustomStudentGuidOperationFilterInputType : UuidOperationFilterInputType{    protected
    override void Configure(IFilterInputTypeDescriptor descriptor)    {        descriptor.Name("CustomStudentGuidOperationFilterInput");        descriptor.Operation(DefaultFilterOperations.Equals).Type<IdType>();        descriptor.Operation(DefaultFilterOperations.In).Type<ListType<IdType>>();    }}'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class CustomStudentFilterType : FilterInputType<Student>{    protected
    override void Configure(IFilterInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Name("CustomStudentFilterInput");        descriptor.AllowAnd(false).AllowOr(false);        descriptor.Field(t
    => t.GroupId).Type<CustomStudentGuidOperationFilterInputType>();    }}public class
    CustomStudentGuidOperationFilterInputType : UuidOperationFilterInputType{    protected
    override void Configure(IFilterInputTypeDescriptor descriptor)    {        descriptor.Name("CustomStudentGuidOperationFilterInput");        descriptor.Operation(DefaultFilterOperations.Equals).Type<IdType>();        descriptor.Operation(DefaultFilterOperations.In).Type<ListType<IdType>>();    }}'
- en: '[PRE106]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: public List<Student> StudentsWithCustomFilter { get; set; } = new();
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public List<Student> StudentsWithCustomFilter { get; set; } = new();
- en: '[PRE107]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: descriptor.Field(x => x.StudentsWithCustomFilter)    .Description("This is the
    list of students in the school.")    .UseFiltering<CustomStudentFilterType>()    .Resolve(async
    context =>    {        var service = context.Service<IStudentService>();        //
    The following code uses the custom filter.        var filter = context.GetFilterContext()?.ToDictionary();        if
    (filter != null && filter.ContainsKey("groupId"))        {            var groupFilter
    = filter["groupId"]! as Dictionary<string, object>;            if (groupFilter
    != null && groupFilter.ContainsKey("eq"))            {                if (!Guid.TryParse(groupFilter["eq"].ToString(),
    out var groupId))                {                    throw new ArgumentException("Invalid
    group id", nameof(groupId));                }                var students = await
    service.GetStudentsByGroupIdAsync(groupId);                return students;            }            if
    (groupFilter != null && groupFilter.ContainsKey("in"))            {                if
    (groupFilter["in"] is not IEnumerable<string> groupIds)                {                    throw
    new ArgumentException("Invalid group ids", nameof(groupIds));                }                groupIds
    = groupIds.ToList();                if (groupIds.Any())                {                    var
    students =                        await service.GetStudentsByGroupIdsAsync(groupIds                            .Select(x
    => Guid.Parse(x.ToString())).ToList());                    return students;                }                return
    new List<Student>();            }        }        var allStudents = await service.GetStudentsAsync();        return
    allStudents;    });
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.StudentsWithCustomFilter)    .Description("这是学校中学生的列表.")    .UseFiltering<CustomStudentFilterType>()    .Resolve(async
    context =>    {        var service = context.Service<IStudentService>();        //
    以下代码使用自定义过滤器。        var filter = context.GetFilterContext()?.ToDictionary();        if
    (filter != null && filter.ContainsKey("groupId"))        {            var groupFilter
    = filter["groupId"]! as Dictionary<string, object>;            if (groupFilter
    != null && groupFilter.ContainsKey("eq"))            {                if (!Guid.TryParse(groupFilter["eq"].ToString(),
    out var groupId))                {                    throw new ArgumentException("无效的组ID",
    nameof(groupId));                }                var students = await service.GetStudentsByGroupIdAsync(groupId);                return
    students;            }            if (groupFilter != null && groupFilter.ContainsKey("in"))            {                if
    (groupFilter["in"] is not IEnumerable<string> groupIds)                {                    throw
    new ArgumentException("无效的组ID列表", nameof(groupIds));                }                groupIds
    = groupIds.ToList();                if (groupIds.Any())                {                    var
    students =                        await service.GetStudentsByGroupIdsAsync(groupIds                            .Select(x
    => Guid.Parse(x.ToString())).ToList());                    return students;                }                return
    new List<Student>();            }        }        var allStudents = await service.GetStudentsAsync();        return
    allStudents;    });
- en: '[PRE108]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'input CustomStudentFilterInput {  groupId: CustomStudentGuidOperationFilterInput}input
    CustomStudentGuidOperationFilterInput {  and: [CustomStudentGuidOperationFilterInput!]  or:
    [CustomStudentGuidOperationFilterInput!]  eq: ID  in: [ID]}'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'input CustomStudentFilterInput {  groupId: CustomStudentGuidOperationFilterInput}input
    CustomStudentGuidOperationFilterInput {  and: [CustomStudentGuidOperationFilterInput!]  or:
    [CustomStudentGuidOperationFilterInput!]  eq: ID  in: [ID]}'
- en: 'query ($where: CustomStudentFilterInput) {  studentsWithCustomFilter(where:
    $where) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query ($where: CustomStudentFilterInput) {  studentsWithCustomFilter(where:
    $where) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
- en: '[PRE109]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '{  "where": {    "groupId": {      "eq": "00000000-0000-0000-0000-000000000201"    }  }}'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "where": {    "groupId": {      "eq": "00000000-0000-0000-0000-000000000201"    }  }}'
- en: '[PRE110]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '{  "where": {    "groupId": {      "in": ["00000000-0000-0000-0000-000000000201",
    "00000000-0000-0000-0000-000000000202"]    }  }}'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "where": {    "groupId": {      "in": ["00000000-0000-0000-0000-000000000201",
    "00000000-0000-0000-0000-000000000202"]    }  }}'
- en: '[PRE111]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: builder.Services    .AddGraphQLServer()    // Omitted for brevity    .AddSorting()    .AddMutationType<Mutation>();
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: builder.Services    .AddGraphQLServer()    // 省略以节省空间    .AddSorting()    .AddMutationType<Mutation>();
- en: '[PRE112]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering<StudentFilterType>()    .UseSorting()    //
    Omitted for brevity
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Students)    .Description("这是学校中学生的列表.")    .UseFiltering<StudentFilterType>()    .UseSorting()    //
    省略以节省空间
- en: '[PRE113]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'students(where: StudentFilterInput, order: [StudentSortInput!]): [Student!]!'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'students(where: StudentFilterInput, order: [StudentSortInput!]): [Student!]!'
- en: 'input StudentSortInput {  id: SortEnumType  firstName: SortEnumType  lastName:
    SortEnumType  email: SortEnumType  phone: SortEnumType  grade: SortEnumType  dateOfBirth:
    SortEnumType  groupId: SortEnumType  group: GroupSortInput}'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'input StudentSortInput {  id: SortEnumType  firstName: SortEnumType  lastName:
    SortEnumType  email: SortEnumType  phone: SortEnumType  grade: SortEnumType  dateOfBirth:
    SortEnumType  groupId: SortEnumType  group: GroupSortInput}'
- en: '[PRE114]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: enum SortEnumType {  ASC  DESC}
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: enum SortEnumType {  ASC  DESC}
- en: '[PRE115]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'query ($order: [StudentSortInput!]) {  students(order: $order) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query ($order: [StudentSortInput!]) {  students(order: $order) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
- en: '{  "order": [    {      "firstName": "ASC"    }  ]}'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "order": [    {      "firstName": "ASC"    }  ]}'
- en: '[PRE116]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '{  "order": [     {        "firstName": "ASC"     },     {        "lastName":
    "ASC"     }  ]}'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "order": [     {        "firstName": "ASC"     },     {        "lastName":
    "ASC"     }  ]}'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (3ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId],
    [s].   [LastName], [s].[Phone]      FROM [Students] AS [s]      ORDER BY [s].[FirstName],
    [s].[LastName]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (3ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId],
    [s].   [LastName], [s].[Phone]      FROM [Students] AS [s]      ORDER BY [s].[FirstName],
    [s].[LastName]'
- en: '[PRE117]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'public class StudentSortType : SortInputType<Student>{    protected override
    void Configure(ISortInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Field(x
    => x.FirstName);        descriptor.Field(x => x.LastName);        descriptor.Field(x
    => x.DateOfBirth);    }}'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'public class StudentSortType : SortInputType<Student>{    protected override
    void Configure(ISortInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Field(x
    => x.FirstName);        descriptor.Field(x => x.LastName);        descriptor.Field(x
    => x.DateOfBirth);    }}'
- en: '[PRE118]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: descriptor.Field(x => x.Students)    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Students)    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
- en: '[PRE119]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: 'input StudentSortInput {  firstName: SortEnumType  lastName: SortEnumType  dateOfBirth:
    SortEnumType}'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'input StudentSortInput {  firstName: SortEnumType  lastName: SortEnumType  dateOfBirth:
    SortEnumType}'
- en: '[PRE120]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UsePaging()    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Students)    .Description("这是学校学生列表。")    .UsePaging()    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    省略以节省篇幅
- en: '[PRE121]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'students(  first: Int  after: String  last: Int  before: String  where: StudentFilterInput  order:
    [StudentSortInput!]): StudentsConnection'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'students(  first: Int  after: String  last: Int  before: String  where: StudentFilterInput  order:
    [StudentSortInput!]): StudentsConnection'
- en: 'type StudentsConnection {  pageInfo: PageInfo!  edges: [StudentsEdge!]  nodes:
    [Student!]}'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'type StudentsConnection {  pageInfo: PageInfo!  edges: [StudentsEdge!]  nodes:
    [Student!]}'
- en: '[PRE122]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: 'type StudentsEdge {  cursor: String!  node: Student!}type PageInfo {  hasNextPage:
    Boolean!  hasPreviousPage: Boolean!  startCursor: String  endCursor: String}'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'type StudentsEdge {  cursor: String!  node: Student!}type PageInfo {  hasNextPage:
    Boolean!  hasPreviousPage: Boolean!  startCursor: String  endCursor: String}'
- en: '[PRE123]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: query {  students {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query {  students {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}
- en: '{  "data": {    "students": {      "edges": [        {          "cursor": "MA==",          "node":
    {            "id": "00000000-0000-0000-0000-000000000901",            "firstName":
    "John",            "dateOfBirth": "2000-01-01"          }        },        ...        {          "cursor":
    "OQ==",          "node": {            "id": "00000000-0000-0000-0000-000000000910",            "firstName":
    "Jack",            "dateOfBirth": "2000-01-10"          }        }      ],      "pageInfo":
    {        "hasNextPage": true,        "hasPreviousPage": false      }    }  }}'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "data": {    "students": {      "edges": [        {          "cursor": "MA==",          "node":
    {            "id": "00000000-0000-0000-0000-000000000901",            "firstName":
    "John",            "dateOfBirth": "2000-01-01"          }        },        ...        {          "cursor":
    "OQ==",          "node": {            "id": "00000000-0000-0000-0000-000000000910",            "firstName":
    "Jack",            "dateOfBirth": "2000-01-10"          }        }      ],      "pageInfo":
    {        "hasNextPage": true,        "hasPreviousPage": false      }    }  }}'
- en: '[PRE124]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'query {  students(after: "OQ==") {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query {  students(after: "OQ==") {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (11ms) [Parameters=[@__p_0=''?'' (DbType = Int32), @__p_1=''?'' (DbType = Int32)],    CommandType=''Text'',
    CommandTimeout=''30'']      SELECT [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName],
    [s].[Grade], [s].[GroupId], [s].   [LastName], [s].[Phone]      FROM [Students]
    AS [s]      ORDER BY (SELECT 1)      OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS
    ONLY'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (11ms) [Parameters=[@__p_0=''?'' (DbType = Int32), @__p_1=''?'' (DbType = Int32)],    CommandType=''Text'',
    CommandTimeout=''30'']      SELECT [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName],
    [s].[Grade], [s].[GroupId], [s].   [LastName], [s].[Phone]      FROM [Students]
    AS [s]      ORDER BY (SELECT 1)      OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS
    ONLY'
- en: '[PRE125]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'query {  students(before: "MA==") {     edges {        cursor        node {          id          firstName          dateOfBirth        }     }     pageInfo
    {        hasNextPage        hasPreviousPage     }  }}'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query {  students(before: "MA==") {     edges {        cursor        node {          id          firstName          dateOfBirth        }     }     pageInfo
    {        hasNextPage        hasPreviousPage     }  }}'
- en: '[PRE126]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UsePaging(options: new PagingOptions()    {        MaxPageSize
    = 20,        DefaultPageSize = 5,        IncludeTotalCount = true    })    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UsePaging(options: new PagingOptions()    {        MaxPageSize
    = 20,        DefaultPageSize = 5,        IncludeTotalCount = true    })    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity'
- en: query {  students {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query {  students {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}
- en: '[PRE127]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'query ($where: StudentFilterInput, $order: [StudentSortInput!]) {  students(where:
    $where, order: $order) {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query ($where: StudentFilterInput, $order: [StudentSortInput!]) {  students(where:
    $where, order: $order) {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
- en: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ]}'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ]}'
- en: '[PRE128]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: 'query ($where: StudentFilterInput, $order: [StudentSortInput!]) {  students(where:
    $where, order: $order, after: "NA==") {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  id: totrans-543
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query ($where: StudentFilterInput, $order: [StudentSortInput!]) {  students(where:
    $where, order: $order, after: "NA==") {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
- en: '[PRE129]'
  id: totrans-544
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ],   "after":"NA=="}'
  id: totrans-545
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ],   "after":"NA=="}'
- en: '[PRE130]'
  id: totrans-546
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseOffsetPaging()    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
  id: totrans-547
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseOffsetPaging()    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
- en: '[PRE131]'
  id: totrans-548
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'students(  skip: Int  take: Int  where: StudentFilterInput  order: [StudentSortInput!]):
    StudentsCollectionSegmenttype StudentsCollectionSegment {  pageInfo: CollectionSegmentInfo!  items:
    [Student!]}type CollectionSegmentInfo {  hasNextPage: Boolean!  hasPreviousPage:
    Boolean!}'
  id: totrans-549
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'students(  skip: Int  take: Int  where: StudentFilterInput  order: [StudentSortInput!]):
    StudentsCollectionSegmenttype StudentsCollectionSegment {  pageInfo: CollectionSegmentInfo!  items:
    [Student!]}type CollectionSegmentInfo {  hasNextPage: Boolean!  hasPreviousPage:
    Boolean!}'
- en: '[PRE132]'
  id: totrans-550
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: query {   students {     items {       id       firstName       dateOfBirth     }     pageInfo
    {       hasNextPage       hasPreviousPage     }   } }
  id: totrans-551
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query {   students {     items {       id       firstName       dateOfBirth     }     pageInfo
    {       hasNextPage       hasPreviousPage     }   } }
- en: '[PRE133]'
  id: totrans-552
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'query {  students(skip: 5, take: 5) {    items {      id      firstName      dateOfBirth    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  id: totrans-553
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query {  students(skip: 5, take: 5) {    items {      id      firstName      dateOfBirth    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
- en: '[PRE134]'
  id: totrans-554
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '{  "skip": 5,  "take": 5}'
  id: totrans-555
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{  "skip": 5,  "take": 5}'
- en: '[PRE135]'
  id: totrans-556
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: 'descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseOffsetPaging(options: new PagingOptions()    {        MaxPageSize
    = 20,        DefaultPageSize = 5,        IncludeTotalCount = true    })    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity'
  id: totrans-557
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'descriptor.Field(x => x.Students)    .Description("这是学校的学生名单。")    .UseOffsetPaging(options:
    new PagingOptions()    {        MaxPageSize = 20,        DefaultPageSize = 5,        IncludeTotalCount
    = true    })    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    省略以节省篇幅'
- en: '[PRE136]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: 'query ($where: StudentFilterInput, $order: [StudentSortInput!], $skip: Int!,
    $take: Int!) {     students(where: $where, order: $order, skip: $skip, take: $take)
    {       items {         id         firstName         dateOfBirth       }       totalCount       pageInfo
    {         hasNextPage         hasPreviousPage       }     }   }'
  id: totrans-559
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '查询（$where: StudentFilterInput, $order: [StudentSortInput!], $skip: Int!, $take:
    Int!）{     students(where: $where, order: $order, skip: $skip, take: $take) {       items
    {         id         firstName         dateOfBirth       }       totalCount       pageInfo
    {         hasNextPage         hasPreviousPage       }     }   }'
- en: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ],   "skip":5,   "take":5}'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ],   "skip":5,   "take":5}'
- en: '[PRE137]'
  id: totrans-561
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (2ms) [Parameters=[@__p_0=''?'' (DbType = Date), @__p_1=''?'' (DbType = Int32),    @__p_2=''?''
    (DbType = Int32)], CommandType=''Text'', CommandTimeout=''30'']      SELECT [s].[Id],
    [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId], [s].   [LastName],
    [s].[Phone]      FROM [Students] AS [s]      WHERE [s].[DateOfBirth] > @__p_0      ORDER
    BY [s].[FirstName], [s].[LastName]      OFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS
    ONLY'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (2ms) [Parameters=[@__p_0=''?'' (DbType = Date), @__p_1=''?'' (DbType = Int32),    @__p_2=''?''
    (DbType = Int32)], CommandType=''Text'', CommandTimeout=''30'']      SELECT [s].[Id],
    [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId], [s].   [LastName],
    [s].[Phone]      FROM [Students] AS [s]      WHERE [s].[DateOfBirth] > @__p_0      ORDER
    BY [s].[FirstName], [s].[LastName]      OFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS
    ONLY'
- en: '[PRE138]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: 'Program.cs file:'
  id: totrans-564
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Program.cs文件：
- en: '[PRE139]'
  id: totrans-565
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: 'The preceding code adds a middleware that maps the Voyager UI to the default
    URL `ui/voyager`. If you want to specify a different URL, you can pass the URL
    as a parameter, as in this example:'
  id: totrans-566
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码添加了一个中间件，将Voyager UI映射到默认URL `ui/voyager`。如果您想指定不同的URL，可以将URL作为参数传递，如下例所示：
- en: '[PRE140]'
  id: totrans-567
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-568
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
