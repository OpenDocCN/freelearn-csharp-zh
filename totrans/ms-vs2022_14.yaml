- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Writing Your Own Visual Studio Extensions
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写您自己的 Visual Studio 扩展
- en: In this chapter, we will delve into the world of Visual Studio extension development,
    where we’ll learn how to create tools that will enhance our development environment.
    **Visual Studio** extensions are powerful, enabling the addition of custom features,
    automation of repetitive tasks, and creation of tailored workflows that meet specific
    needs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入 Visual Studio 扩展开发的领域，我们将学习如何创建能够增强我们的开发环境的工具。**Visual Studio** 扩展功能强大，能够添加自定义功能、自动化重复性任务以及创建满足特定需求的定制工作流程。
- en: We will begin by breaking down the Visual Studio extension architecture, which
    will provide us with a solid understanding of its core components and how they
    function within the **integrated development environment** ( **IDE** ). With this
    foundation, we’ll proceed to build and test our first extension using the provided
    item template. As we advance, we’ll explore more sophisticated features, examining
    the capabilities offered by preload templates. Finally, we’ll cover the deployment
    and sharing process, ensuring we can distribute our extensions efficiently, whether
    for personal use, within our team, or to the broader developer community.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先分解 Visual Studio 扩展架构，这将为我们提供一个对其核心组件及其在 **集成开发环境**（**IDE**）中如何工作的坚实基础。有了这个基础，我们将使用提供的项目模板构建和测试我们的第一个扩展。随着我们的进步，我们将探索更复杂的功能，检查预加载模板提供的功能。最后，我们将介绍部署和共享过程，确保我们能够有效地分发我们的扩展，无论是用于个人使用、团队内部还是更广泛的开发者社区。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding Visual Studio extension architecture
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Visual Studio 扩展架构
- en: Building your first extension
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建您的第一个扩展
- en: Advanced extension features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级扩展功能
- en: Deploying and sharing your extension
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署和共享您的扩展
- en: By the end of this chapter, you’ll possess the knowledge and practical skills
    needed to create, refine, and share Visual Studio extensions that will significantly
    boost your productivity.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将掌握创建、优化和共享 Visual Studio 扩展所需的知识和实践技能，这将显著提高您的生产力。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写这一章时，我使用了以下版本的 Visual Studio：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览 1.0
- en: Understanding Visual Studio extension architecture
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 Visual Studio 扩展架构
- en: '**Visual Studio extensions** are powerful tools that enhance the capabilities
    of Microsoft Visual Studio, allowing developers to customize and extend the IDE
    to better suit their development needs. This section delves into the underlying
    architecture of Visual Studio extensions, highlighting key components, their interactions,
    and the broader ecosystem they operate within.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio 扩展** 是增强 Microsoft Visual Studio 功能的强大工具，允许开发者自定义和扩展 IDE，以更好地满足他们的开发需求。本节深入探讨了
    Visual Studio 扩展的底层架构，突出了关键组件、它们之间的交互以及它们所运行的更广泛生态系统。'
- en: Visual Studio extensions are built upon a robust foundation known as the **Visual
    Studio Shell** , which serves as the core environment for interactions with the
    IDE. This shell is highly customizable, providing a framework that allows us to
    create and integrate new features seamlessly. The process of developing an extension
    begins with the **extension manifest** , a crucial file that contains essential
    metadata, such as the extension’s name, version, description, and dependencies.
    This manifest is vital for the installation process within Visual Studio and plays
    a significant role in managing updates once the extension is deployed.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 扩展建立在称为 **Visual Studio Shell** 的强大基础之上，该 Shell 作为与 IDE 交互的核心环境。这个
    Shell 具有高度的可定制性，提供了一个框架，使我们能够无缝地创建和集成新功能。开发扩展的过程始于 **扩展清单**，这是一个包含基本元数据的关键文件，例如扩展的名称、版本、描述和依赖项。这个清单对于
    Visual Studio 中的安装过程至关重要，一旦扩展部署，它在管理更新中也发挥着重要作用。
- en: At the heart of the extension lies the **package** component, which encapsulates
    all the necessary functionalities and assets, including **Dynamic Link Library**
    ( **DLL** ) and images, into a single, deployable unit. This packaging ensures
    that all required files are correctly installed and configured within the Visual
    Studio environment. For extensions that need to interact with the **user interface**
    ( **UI** ), the inclusion of menu commands and tool windows is necessary. These
    elements, defined using XML, can be dynamically enabled or disabled based on specific
    conditions or events occurring within the IDE.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展的核心是**包**组件，它封装了所有必要的功能性和资产，包括**动态链接库**（**DLL**）和图像，成为一个单一的、可部署的单元。这种打包确保所有必需的文件都正确安装在Visual
    Studio环境中。对于需要与**用户界面**（**UI**）交互的扩展，包含菜单命令和工具窗口是必要的。这些元素使用XML定义，可以根据IDE内发生的特定条件或事件动态启用或禁用。
- en: When an extension operates at the project level, **project system integration**
    becomes essential. This involves working with the **project system object model**
    ( **PSOM** ), which represents the project’s structure and properties within Visual
    Studio. Extensions that offer code generation and analysis tools leverage APIs
    provided by Visual Studio to generate boilerplate code, refactor existing code,
    or perform comprehensive code analysis. Finally, the success of an extension often
    hinges on effectively utilizing various **integration points** offered by Visual
    Studio, such as event handlers that allow the extension to respond to specific
    IDE operations, such as opening documents or building solutions. These integration
    points enable extensions to automate tasks and enhance the user experience by
    responding to actions taken within the IDE.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当扩展在项目级别运行时，**项目系统集成**变得至关重要。这涉及到与**项目系统对象模型**（**PSOM**）一起工作，它在Visual Studio中表示项目的结构和属性。提供代码生成和分析工具的扩展利用Visual
    Studio提供的API生成样板代码，重构现有代码或执行全面的代码分析。最后，扩展的成功往往取决于有效地利用Visual Studio提供的各种**集成点**，例如允许扩展响应特定IDE操作的事件处理器，如打开文档或构建解决方案。这些集成点使扩展能够通过响应IDE内的操作来自动化任务并增强用户体验。
- en: In addition to the core components that make up a Visual Studio extension, **Visual
    Studio Marketplace** plays a pivotal role in the ecosystem. This platform serves
    as the primary distribution hub for extensions, enabling developers to easily
    find, install, and manage a wide array of third-party tools. Visual Studio Marketplace
    not only streamlines the process of accessing extensions but also fosters community
    engagement by providing a space for feedback and interaction between developers
    and users.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了构成Visual Studio扩展的核心组件外，**Visual Studio Marketplace**在生态系统中发挥着关键作用。这个平台作为扩展的主要分发中心，使开发者能够轻松地找到、安装和管理各种第三方工具。Visual
    Studio Marketplace不仅简化了访问扩展的过程，而且还通过提供一个反馈和开发者与用户之间互动的空间来促进社区参与。
- en: To support the creation of these extensions, the Visual Studio **Software Development
    Kit** ( **SDK** ) provides all the necessary tools and documentation. The SDK
    includes libraries, sample code, and comprehensive tutorials designed to help
    us get started with building our own extensions. This toolkit is essential for
    navigating the complexities of extension development and ensuring that new tools
    integrate smoothly with the Visual Studio environment.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持这些扩展的创建，Visual Studio **软件开发工具包**（**SDK**）提供了所有必要的工具和文档。SDK包括库、示例代码和全面的教程，旨在帮助我们开始构建自己的扩展。这个工具包对于导航扩展开发的复杂性并确保新工具与Visual
    Studio环境顺利集成至关重要。
- en: 'With a solid understanding of the foundational components and the supportive
    ecosystem surrounding Visual Studio extensions, you’re now well equipped to take
    the next step: building your first extension. In the following section, we’ll
    go through the process of creating a basic Visual Studio extension from scratch,
    demonstrating how to leverage the tools and resources provided by the Visual Studio
    SDK to bring your ideas to life.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在对Visual Studio扩展的基础组件及其支持生态系统有充分理解之后，你现在已经准备好迈出下一步：构建你的第一个扩展。在下一节中，我们将从头开始创建一个基本的Visual
    Studio扩展，展示如何利用Visual Studio SDK提供的工具和资源将你的想法变为现实。
- en: Building your first extension
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建你的第一个扩展
- en: Let’s create a simple Visual Studio extension that adds a new menu item under
    the **Tools** menu. When clicked, this menu item will display a message box. This
    example will guide us through setting up a basic extension project.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的Visual Studio扩展，该扩展在**工具**菜单下添加一个新的菜单项。当点击时，这个菜单项将显示一个消息框。这个示例将指导我们设置一个基本的扩展项目。
- en: Before diving into extension development, it’s crucial to set up your environment
    properly. The first step is to ensure that we have the right tools installed.
    Begin by opening the **Visual Studio Installer** and modifying the current Visual
    Studio installation. Within the installer, we’ll want to check that the Visual
    Studio extension development workload is installed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入扩展开发之前，正确设置你的环境至关重要。第一步是确保我们安装了正确的工具。首先打开**Visual Studio安装程序**并修改当前的Visual
    Studio安装。在安装程序中，我们需要检查Visual Studio扩展开发工作负载是否已安装。
- en: '![Figure 14.1 – The Visual Studio extension development workload](img/B22218_14_1.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – Visual Studio扩展开发工作负载](img/B22218_14_1.jpg)'
- en: Figure 14.1 – The Visual Studio extension development workload
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – Visual Studio扩展开发工作负载
- en: This workload includes the Visual Studio SDK and other essential tools required
    for building extensions. Having these components in place is the foundation for
    a smooth development process, ensuring that you have access to all the libraries,
    templates, and resources necessary to create and test our extension effectively.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作负载包括Visual Studio SDK和其他构建扩展所需的必需工具。拥有这些组件是顺利开发过程的基础，确保你可以访问创建和测试我们的扩展所需的所有库、模板和资源。
- en: 'To begin building our extension, follow these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始构建我们的扩展，请按照以下步骤操作：
- en: Start by opening Visual Studio and selecting the **Create a new project** option
    for any sort of project.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先打开Visual Studio，为任何类型的项目选择**创建新项目**选项。
- en: In the project creation window, search for **VSIX Project** . This template
    is specifically designed for creating Visual Studio extensions. Once we’ve found
    it, select the template and click **Next** to proceed.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目创建窗口中，搜索**VSIX项目**。这个模板专门用于创建Visual Studio扩展。一旦找到，选择模板并点击**下一步**继续。
- en: '![Figure 14.2 – Create a new VSIX project](img/B22218_14_2.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2 – 创建新的VSIX项目](img/B22218_14_2.jpg)'
- en: Figure 14.2 – Create a new VSIX project
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 – 创建新的VSIX项目
- en: Next, we’ll be prompted to name your project. Choose a name that reflects the
    purpose of our extension, for our example, we will choose **MyFirstExtension**
    , and specify the location where you want to save the project files.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，系统会提示我们为项目命名。选择一个能反映我们扩展功能的名字，以我们的示例为例，我们将选择**MyFirstExtension**，并指定你想要保存项目文件的路径。
- en: '![Figure 14.3 – Configure VSIX Project](img/B22218_14_3.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3 – 配置VSIX项目](img/B22218_14_3.jpg)'
- en: Figure 14.3 – Configure VSIX Project
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 – 配置VSIX项目
- en: After we’ve configured these settings, click on **Create** to generate the project
    structure. This step sets up the basic framework for our extension, allowing us
    to start customizing and adding functionality to our project.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们配置了这些设置之后，点击**创建**以生成项目结构。这一步为我们的扩展设置了基本框架，使我们能够开始自定义和添加项目功能。
- en: The first step to creating a good extension is to add an entry point to our
    new feature. The most convenient way is to add a new command. Here, we will leverage
    the item template offered by the Visual Studio SDK by right-clicking on our project
    node, selecting **Add | New Item** , and then looking for **Command** under **C#
    Items** | **Extensibility** .
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个好的扩展的第一步是为我们的新功能添加一个入口点。最方便的方式是添加一个新的命令。在这里，我们将通过在项目节点上右键点击，选择**添加 | 新项**，然后在**C#项**
    | **可扩展性**下查找**命令**来利用Visual Studio SDK提供的项目模板。
- en: '![Figure 14.4 – Add New Item | Command](img/B22218_14_4.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4 – 添加新项 | 命令](img/B22218_14_4.jpg)'
- en: Figure 14.4 – Add New Item | Command
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – 添加新项 | 命令
- en: 'For this example, we choose the name **MyCustomTemplate** . This item template
    adds all we need to our first command:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们选择名字**MyCustomTemplate**。这个项目模板为我们第一个命令添加了所有需要的内容：
- en: The **.vsct** file, short for **Visual Studio Command Table** file, is an XML
    file used in Visual Studio extensions to define the structure and behavior of
    menus, commands, and other UI elements that the extension adds to the Visual Studio
    environment. It acts as a blueprint for how the extension integrates with the
    Visual Studio UI, specifying details such as where menus and buttons should be
    placed, what icons they should use, and how they should behave when clicked.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.vsct** 文件，即 **Visual Studio 命令表**文件，是一个 XML 文件，用于在 Visual Studio 扩展中定义扩展添加到
    Visual Studio 环境中的菜单、命令和其他 UI 元素的结构和行为。它充当扩展如何与 Visual Studio UI 集成的蓝图，指定菜单和按钮应放置的位置、它们应使用的图标以及它们在点击时的行为。'
- en: The **MyCustomCommand.cs** file is added to your project; you’ll need to replace
    its content with the appropriate code to define the desired functionality. For
    now, it’s defining a command to display a message box when executed.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MyCustomCommand.cs** 文件被添加到您的项目中；您需要用适当的代码替换其内容以定义所需的功能。目前，它定义了一个在执行时显示消息框的命令。'
- en: Now, when we are launching the debug mode, that will open an experiment instance
    of Visual Studio. In this instance, we will retrieve our installed package from
    the **Extensions** | **Manage** **Extension** window.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，当我们启动调试模式时，它将打开一个 Visual Studio 的实验实例。在这个实例中，我们将从**扩展** | **管理扩展**窗口检索我们安装的包。
- en: '![Figure 14.5 – MyFirstExtension installed](img/B22218_14_5.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.5 – MyFirstExtension 已安装](img/B22218_14_5.jpg)'
- en: Figure 14.5 – MyFirstExtension installed
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.5 – MyFirstExtension 已安装
- en: Plus, in the **Tools** menu, we find the **Invoke MyCustomCommand** option.
    For now, this command simply opens a message box displaying a basic message.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在**工具**菜单中，我们找到了**调用 MyCustomCommand**选项。目前，此命令仅简单地打开一个显示基本消息的消息框。
- en: '![Figure 14.6 – Invoke MyCustomCommand](img/B22218_14_6.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.6 – 调用 MyCustomCommand](img/B22218_14_6.jpg)'
- en: Figure 14.6 – Invoke MyCustomCommand
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.6 – 调用 MyCustomCommand
- en: We have now built our first extension. Let’s explore the features we can add
    to customize our Visual Studio extension in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经构建了我们的第一个扩展。让我们在下一节中探索我们可以添加的功能，以自定义我们的 Visual Studio 扩展。
- en: Advanced extension features
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级扩展功能
- en: As we saw, we can easily add new commands to the menu of Visual Studio that
    allow us to interact with our IDE and even open external tools. In this section,
    we will explore the pre-set template we can leverage to extend Visual Studio.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，我们可以轻松地向 Visual Studio 的菜单中添加新命令，使我们能够与我们的 IDE 交互，甚至打开外部工具。在本节中，我们将探讨我们可以利用的预设模板来扩展
    Visual Studio。
- en: So, if we go back to the **Add Item** window, by right-clicking on the project
    node and selecting **Add | New Items…** , you can find those kickstart ordered
    in four categories.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们回到**添加项目**窗口，通过右键单击项目节点并选择**添加 | 新项…**，我们可以找到按四个类别排序的 kickstart 命令。
- en: First, the **Editor** category encompasses templates that allow for the modification
    and enhancement of the Visual Studio editor itself. These modifications can range
    from changing how text is highlighted to adding interactive elements within the
    editor pane.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，**编辑器**类别包括模板，允许修改和增强 Visual Studio 编辑器本身。这些修改可以从更改文本的突出显示到在编辑器面板内添加交互式元素。
- en: '![Figure 14.7 –  Add a new Editor item](img/B22218_14_7.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.7 – 添加新的编辑器项](img/B22218_14_7.jpg)'
- en: Figure 14.7 – Add a new Editor item
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – 添加新的编辑器项
- en: 'The following is an overview of the subcategories within the **Editor** category:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对**编辑器**类别内子类别的概述：
- en: '**Editor Classifier** : An **Editor Classifier** item allows us to classify
    text within the editor based on custom rules. This can be used for syntax highlighting,
    identifying specific patterns in the code, or even providing real-time feedback
    on coding standards. For example, we can create a classifier that highlights all
    to-do comments in a bright color to ensure they catch the developer’s attention.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器分类器**：一个**编辑器分类器**项允许我们根据自定义规则对编辑器中的文本进行分类。这可以用于语法突出显示、识别代码中的特定模式，甚至提供关于编码标准的实时反馈。例如，我们可以创建一个分类器，用鲜艳的颜色突出显示所有待办事项注释，以确保它们引起开发者的注意。'
- en: '**Editor Margin** : The **Editor Margin** template enables the creation of
    custom margins around the **Editor** pane. These margins can display additional
    information or controls related to the code being viewed. A use case could be
    implementing a margin that shows a mini-map of the code file, allowing users to
    quickly navigate through large files.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器边距**：**编辑器边距**模板允许创建围绕**编辑器**面板的定制边距。这些边距可以显示与正在查看的代码相关的额外信息或控件。一个用例是实现一个显示代码文件迷你图的边距，使用户能够快速导航大型文件。'
- en: '**Editor Text Adornment** : **Text adornments** allow for the decoration of
    text within the editor. This can include underlining, strikethroughs, background
    colors, or even inserting images or icons in line with the text. That allows us
    to add a red squiggly underline to deprecated methods to visually indicate they
    should not be used, for instance.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器文本装饰**：**文本装饰**允许在编辑器中对文本进行装饰。这可以包括下划线、删除线、背景颜色，甚至可以在文本中插入图像或图标。这允许我们为已弃用的方法添加红色波浪下划线，以视觉上指示它们不应被使用，例如。'
- en: '**Editor Viewport Adornment** : Similar to text adornments but focused on the
    viewport (the visible area of the editor), **viewport adornments** can overlay
    graphics or UI elements on top of the editor content. For example, displaying
    a watermark or banner over the editor when viewing read-only files.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编辑器视口装饰**：类似于文本装饰，但专注于视口（编辑器的可见区域），**视口装饰**可以在编辑器内容之上叠加图形或UI元素。例如，在查看只读文件时，在编辑器上显示水印或横幅。'
- en: An **extension pack** is essentially a collection of extensions bundled together
    to provide a comprehensive set of functionalities around a specific theme or purpose.
    Creating an extension pack allows developers to distribute a suite of tools that
    work seamlessly together, enhancing productivity and streamlining workflows for
    specific development scenarios.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**扩展包**实际上是一组扩展的组合，旨在提供围绕特定主题或目的的全面功能集。创建扩展包允许开发者分发一套无缝协作的工具，增强特定开发场景的生产力并简化工作流程。'
- en: Then, the **Toolbox** category encompasses templates designed for creating controls
    that can be added to Windows Forms or **Windows Presentation Foundation** ( **WPF**
    ) design surfaces within Visual Studio. These controls can range from simple UI
    elements to complex components that encapsulate specific functionalities.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，**工具箱**类别包括为在Visual Studio中创建可以添加到Windows Forms或**Windows Presentation Foundation**（**WPF**）设计表面的控件而设计的模板。这些控件可以从简单的UI元素到封装特定功能的复杂组件不等。
- en: Furthermore, **VSPackages** represent a deeper level of extensibility within
    Visual Studio, allowing for the creation of extensions that can modify or add
    to the IDE’s core functionalities. These packages can range from simple commands
    to complex tool windows and services.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，**VSPackages**代表了Visual Studio中更深层次的扩展性，允许创建可以修改或添加到IDE核心功能的扩展。这些包可以从简单的命令到复杂的工具窗口和服务不等。
- en: '![Figure 14.8 –  Add new VSPackage Item](img/B22218_14_8.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图14.8 – 添加新的VSPackage项目](img/B22218_14_8.jpg)'
- en: Figure 14.8 – Add new VSPackage Item
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 – 添加新的VSPackage项目
- en: 'In this section, we can find the following items template:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们可以找到以下项目模板：
- en: '**Async Package** : This provides a foundation for creating asynchronous operations
    within Visual Studio extensions. This is particularly useful for operations that
    may take a significant amount of time to complete, such as fetching data from
    an external service or performing intensive computations.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步包**：这为在Visual Studio扩展中创建异步操作提供了一个基础。这对于可能需要很长时间才能完成的操作特别有用，例如从外部服务获取数据或执行密集型计算。'
- en: '**Command** : As discussed in the previous section, commands allow for adding
    new actions to Visual Studio menus, toolbars, or even context menus. This template
    facilitates the creation of commands that can interact with the IDE or external
    tools, enabling a wide range of custom functionalities.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命令**：如前节所述，命令允许向Visual Studio菜单、工具栏或甚至上下文菜单中添加新操作。此模板便于创建可以与IDE或外部工具交互的命令，从而实现广泛的定制功能。'
- en: '**Async Tool Window** : This is like **Async Package** but specifically tailored
    to creating asynchronous tool windows within Visual Studio. These tool windows
    can perform background operations without blocking the UI, enhancing the responsiveness
    of the IDE.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步工具窗口**：这与**异步包**类似，但专门针对在Visual Studio中创建异步工具窗口。这些工具窗口可以执行后台操作而不阻塞UI，从而提高IDE的响应性。'
- en: '**Tool Window** : This template enables the creation of custom tool windows
    within Visual Studio. Tool windows can dock within the IDE and serve various purposes,
    such as displaying project properties, search results, or even custom controls
    and visualizations relevant to your workflow.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工具窗口**：此模板允许在 Visual Studio 中创建自定义工具窗口。工具窗口可以在 IDE 中停靠，并服务于各种目的，例如显示项目属性、搜索结果，甚至与您的流程相关的自定义控件和可视化。'
- en: 'Additionally, you can find examples and samples in the official Visual Studio
    SDK repository on GitHub: [https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master](https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master)
    .'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以在 GitHub 上的官方 Visual Studio SDK 仓库中找到示例和样本：[https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master](https://github.com/microsoft/VSSDK-Extensibility-Samples/tree/master)。
- en: Remember that when developing extensions using these templates, like in other
    developments, it’s important to consider the end-user experience, ensuring that
    the added functionalities integrate seamlessly with the existing Visual Studio
    environment. Testing and iteration are key to refining these extensions and delivering
    value to the developer community. Once our extension is tailored and well tested,
    the next step is to package and deploy it for general availability.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当使用这些模板开发扩展时，与其他开发一样，考虑最终用户的使用体验非常重要，确保添加的功能能够无缝集成到现有的 Visual Studio 环境中。测试和迭代是完善这些扩展并向开发者社区提供价值的关键。一旦我们的扩展经过定制和充分测试，下一步就是打包和部署它以供普遍使用。
- en: Deploying and sharing your extensions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和分享您的扩展
- en: Deploying and sharing Visual Studio extensions with the community is an exciting
    step in the extension development process. It allows us to contribute to the ecosystem,
    potentially improving the development experience for thousands of Visual Studio
    users worldwide. In this section, we will walk through a comprehensive guide on
    deploying and sharing our extensions, including signing your VSIX (a **.vsix**
    file contains one or more Visual Studio extensions) packages for added security
    and trustworthiness.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Visual Studio 扩展部署和分享给社区是扩展开发过程中的一个令人兴奋的步骤。这使我们能够为生态系统做出贡献，有可能改善全球成千上万的 Visual
    Studio 用户的使用体验。在本节中，我们将详细介绍部署和分享我们的扩展的指南，包括为增强安全性和可信度对 VSIX（一个 **.vsix** 文件包含一个或多个
    Visual Studio 扩展）包进行签名。
- en: Once we ensure it is thoroughly tested and ready for public release, we can
    start the deploying phase. This includes testing across different versions of
    Visual Studio, handling edge cases, and ensuring compatibility with various project
    types and configurations.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确保它经过彻底测试并准备好公开发布，我们就可以开始部署阶段。这包括在不同版本的 Visual Studio 上进行测试、处理边缘情况，并确保与各种项目类型和配置的兼容性。
- en: 'First, in order to prevent tampering and build trust with the end user, we
    sign our VSIX with **Sign CLI** . You need to purchase a code signing certificate
    from a trusted **certificate authority** ( **CA** ). I used the .NET CLI to install
    Sign CLI. Notice that at the time of writing, Sign CLI is still pre-released;
    so, we need to include the **-prerelease** tag when we need to get the latest:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了防止篡改并与最终用户建立信任，我们使用 **Sign CLI** 对我们的 VSIX 进行签名。您需要从受信任的 **证书颁发机构**（**CA**）购买代码签名证书。我使用
    .NET CLI 安装 Sign CLI。请注意，在撰写本文时，Sign CLI 仍处于预发布阶段；因此，当我们需要获取最新版本时，我们需要包含 **-prerelease**
    标签：
- en: '[PRE0]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once installed, Sign CLI could be accessed in a Developer PowerShell instance
    using **sign code <command> <option>** . You can find more details in the official
    documentation: [https://learn.microsoft.com/en-us/visualstudio/extensibility/dotnet-sign-cli-reference-vsix?view=vs-2022](https://learn.microsoft.com/en-us/visualstudio/extensibility/dotnet-sign-cli-reference-vsix?view=vs-2022)
    .'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，Sign CLI 可以在开发者 PowerShell 实例中使用 **sign code <command> <option>** 命令访问。您可以在官方文档中找到更多详细信息：[https://learn.microsoft.com/en-us/visualstudio/extensibility/dotnet-sign-cli-reference-vsix?view=vs-2022](https://learn.microsoft.com/en-us/visualstudio/extensibility/dotnet-sign-cli-reference-vsix?view=vs-2022)。
- en: 'After signing your extension, the next step is deploying it to Visual Studio
    Marketplace, where it can be accessed by Visual Studio users worldwide. The process
    involves several key steps to ensure your extension is properly showcased and
    ready for installation:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在对您的扩展进行签名后，下一步是将它部署到 Visual Studio Marketplace，这样全球的 Visual Studio 用户都可以访问。这个过程涉及几个关键步骤，以确保您的扩展得到适当的展示并准备好安装：
- en: First, create a publisher account on Visual Studio Marketplace.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 Visual Studio Marketplace 上创建一个发布者账户。
- en: Sign in with your Microsoft account and follow the prompts to set up your publisher
    profile if you haven’t done so already. This account will allow you to manage
    and track your extensions on the platform.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您尚未这样做，请使用您的 Microsoft 账户登录并按照提示设置发布者配置文件。此账户将允许您在平台上管理和跟踪您的扩展。
- en: 'Next, create a new extension by navigating to the **Publishers** dashboard
    and selecting the **New Extension** option (here is the link to the Visual Studio
    Marketplace dashboard: [https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true](https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true)
    ). Here, you’ll need to provide essential details about your extension, including
    the title, description, and relevant visuals, such as an icon and screenshots.
    These elements help potential users understand what your extension offers.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过导航到 **发布者** 控制台并选择 **新建扩展** 选项（这里是 Visual Studio 市场控制台的链接：[https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true](https://marketplace.visualstudio.com/manage/createpublisher?managePageRedirect=true)）来创建一个新的扩展。在这里，您需要提供有关您扩展的基本信息，包括标题、描述以及相关的视觉元素，如图标和截图。这些元素有助于潜在用户了解您的扩展提供的内容。
- en: Once we’ve filled out the details, upload your signed VSIX package. Visual Studio
    Marketplace will automatically validate the package and its digital signature,
    ensuring everything is in order before proceeding.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦填写完详细信息，请上传您已签名的 VSIX 包。Visual Studio 市场将自动验证该包及其数字签名，确保一切就绪后再继续。
- en: After uploading, submit your extension for review. Microsoft will carefully
    evaluate your submission to ensure it adheres to the Marketplace’s policies and
    guidelines.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传后，提交您的扩展以供审查。微软将仔细评估您的提交，以确保其符合市场政策和指南。
- en: This review process is crucial for maintaining the quality and security of the
    extensions available to users.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 此审查过程对于维护用户可用的扩展的质量和安全至关重要。
- en: Finally, upon approval, your extension will be published on Visual Studio Marketplace.
    It will then be available for installation directly through the Visual Studio
    IDE or as a download from the Visual Studio Marketplace website, allowing developers
    worldwide to benefit from your contribution.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在批准后，您的扩展将在 Visual Studio 市场发布。然后，它将可以通过 Visual Studio IDE 直接安装，或从 Visual
    Studio 市场网站下载，让全球的开发者都能从您的贡献中受益。
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: As we conclude this chapter on Visual Studio extension development, you’ve acquired
    the knowledge and skills to create, refine, and distribute your own powerful extensions.
    From understanding the core architecture to building your first extension and
    exploring advanced features, you’ve learned how to enhance Visual Studio to better
    meet your needs and those of your team. By mastering the deployment and sharing
    process, you’re now equipped to contribute to the broader developer community,
    offering tools that can streamline workflows and boost productivity.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束关于 Visual Studio 扩展开发的这一章时，您已经获得了创建、精炼和分发您自己的强大扩展所需的知识和技能。从理解核心架构到构建您的第一个扩展，再到探索高级功能，您已经学会了如何增强
    Visual Studio 以更好地满足您和您团队的需求。通过掌握部署和共享过程，您现在可以贡献给更广泛的开发者社区，提供可以简化工作流程并提高生产力的工具。
- en: With this solid foundation in place, we’re now ready to transition to the final
    chapter of the book. In this concluding chapter, we’ll delve into the world of
    NuGet package creation, where you’ll learn how to package and distribute reusable
    code libraries.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个坚实的基础之上，我们现在准备过渡到本书的最后一章。在这一章的结尾，我们将深入探讨 NuGet 包的创建世界，您将学习如何打包和分发可重用的代码库。
