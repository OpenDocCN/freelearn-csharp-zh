- en: Appendix A. Basic Cinder Functionality Reference
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 A. Cinder 基本功能参考
- en: This part of the book will help you find some basic Cinder functionalities used
    in this book for later reference. This reference is very basic, so if you are
    an experienced developer searching for detailed and in-depth function reference,
    you should take a look at the reference on the Cinder website ([http://libcinder.org](http://libcinder.org)),
    or as Cinder is open-source, at the actual source code of Cinder.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的这一部分将帮助您找到本书中使用的 Cinder 基本功能，以便日后参考。这个参考非常基础，所以如果您是一位经验丰富的开发者，正在寻找详细和深入的功能参考，您应该查看
    Cinder 网站上的参考（[http://libcinder.org](http://libcinder.org)），或者由于 Cinder 是开源的，查看
    Cinder 的实际源代码。
- en: Basic types
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型
- en: These are the basic types consumed by many other Cinder functions. This assumes
    that you are already familiar with `int`, `float`, and other basic data types
    in C++.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是许多 Cinder 函数所消耗的基本类型。这假设您已经熟悉 C++ 中的 `int`、`float` 和其他基本数据类型。
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The preceding code represents a two-dimensional vector of `float` values (`x`
    and `y`). This is usually used to represent location or size in two-dimensional
    space.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码表示一个由 `float` 值组成的二维向量（`x` 和 `y`）。这通常用于表示二维空间中的位置或大小。
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding code represents a two-dimensional vector of `int` values (`x`
    and `y`). This is usually used to represent location or size in two-dimensional
    space.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码表示一个由 `int` 值组成的二维向量（`x` 和 `y`）。这通常用于表示二维空间中的位置或大小。
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding code represents a three-dimensional vector of `float` values (
    `x`, `y`, and `z`). This is usually used to represent location or size in three-dimensional
    space.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码表示一个由 `float` 值组成的三个维度的向量（`x`、`y` 和 `z`）。这通常用于表示三维空间中的位置或大小。
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code represents an abstract rectangle that is defined by the top-left
    and bottom-right corner coordinates.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码表示一个由左上角和右下角坐标定义的抽象矩形。
- en: '[PRE4]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code, the Color object or class represents color in the Cinder
    environment—`r` is for red, `g` is for green, `b` is for blue, and `a` is for
    alpha in range form `0.0f` to `1.0f`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，颜色对象或类代表 Cinder 环境中的颜色——`r` 代表红色，`g` 代表绿色，`b` 代表蓝色，`a` 代表 alpha，范围从 `0.0f`
    到 `1.0f`。
- en: Applications
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序
- en: 'The following functions form the base of your Cinder application:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数构成了您的 Cinder 应用程序的基础：
- en: '`setup()`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`setup()`'
- en: '`update()`'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`update()`'
- en: '`draw()`'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`draw()`'
- en: We use `setup()` for the preparation, `update()` for calculations in the run
    loop, and `draw()` for drawing on the screen. You can use the `shutdown()` method
    to do something (clear memory, store data, or communicate with remote server)
    before our application closes. Remember that your main Cinder application class
    should derive from the `BaseApp` class and that you should implement the methods
    in the class declaration first.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `setup()` 进行准备，`update()` 在运行循环中进行计算，`draw()` 用于在屏幕上绘制。您可以使用 `shutdown()`
    方法在我们应用程序关闭之前做一些事情（清除内存、存储数据或与远程服务器通信）。请记住，您的 Cinder 主应用程序类应该从 `BaseApp` 类派生，并且您应该首先在类声明中实现这些方法。
- en: '[PRE5]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If you want to change the initial window size or other initial parameters of
    the application, use the `prepareSettings()` method (do not forget to declare
    this method first):'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更改应用程序的初始窗口大小或其他初始参数，请使用 `prepareSettings()` 方法（不要忘记首先声明此方法）：
- en: '[PRE6]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Then, there are a couple of useful functions that you can use during setup and
    runtime.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，有一些有用的函数，您可以在设置和运行时使用。
- en: '[PRE7]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding function returns the application window width as an `int` value.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数返回应用程序窗口宽度作为一个 `int` 值。
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding function returns the application window height as an `int` value.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数返回应用程序窗口高度作为一个 `int` 值。
- en: '[PRE9]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding function returns the application window size as a `Vec2i` value.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数返回应用程序窗口大小作为一个 `Vec2i` 值。
- en: '[PRE10]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Sometimes, it is necessary to know the current frame rate of the application.
    The preceding function returns it as a `float` value.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，有必要知道应用程序的当前帧率。上述函数以 `float` 值返回它。
- en: '[PRE11]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The preceding function returns the number of seconds that have passed since
    the application has started as a `double` value.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数返回自应用程序开始以来经过的秒数，作为一个 `double` 值。
- en: '[PRE12]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding function returns the number of frames that have elapsed since
    the start of the application as an `int` value.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数返回自应用程序开始以来经过的帧数，作为一个 `int` 值。
- en: '[PRE13]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Use the preceding function for debugging, for example, `console() << "debug
    text" << std::endl;`.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上述函数进行调试，例如，`console() << "debug text" << std::endl;`。
- en: '[PRE14]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding function returns `true`, if the application is in the `fullscreen`
    mode, `false` if not.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数如果应用程序处于 `fullscreen` 模式则返回 `true`，否则返回 `false`。
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code sets the `fullscreen` state by passing `true` or `false`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码通过传递 `true` 或 `false` 设置 `fullscreen` 状态。
- en: 'To make these functions work, you have to import the `AppBasic` header file
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这些函数正常工作，你必须按照以下方式导入 `AppBasic` 头文件：
- en: '[PRE16]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Basic graphics
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本图形
- en: These functions are usually used within the `draw()` method implementation.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数通常在 `draw()` 方法实现中使用。
- en: '[PRE17]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code clears the screen with the color specified in `Color`.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码使用在 `Color` 中指定的颜色清除屏幕。
- en: '[PRE18]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code draws a line from a point defined in `from` to a point defined
    in `to`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码从 `from` 定义的点绘制到 `to` 定义的点绘制一条线。
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding code sets the color that is then used in drawing shapes and lines.
    Color is defined as the separate `r`, `g`, `b`, and `a` (optional) float values.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码设置了用于绘制形状和线条的颜色。颜色定义为单独的 `r`、`g`、`b` 和 `a`（可选）浮点值。
- en: '[PRE20]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code sets the line width of Cinder line drawing functions.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码设置了 Cinder 线绘制函数的线宽。
- en: '[PRE21]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code draws filled circle at the position defined in `center` and
    radius defined in `radius`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在 `center` 定位处绘制了一个填充的圆，半径由 `radius` 定义。
- en: '[PRE22]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code draws just the outline of a circle whose position is defined
    in `center` and radius in `radius`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码仅绘制了圆的轮廓，其位置由 `center` 定义，半径由 `radius` 定义。
- en: '[PRE23]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding code draws a solid filled rectangle that is defined in `rect`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码绘制了一个在 `rect` 中定义的实心填充矩形。
- en: '[PRE24]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding code draws an outline of a rectangle defined in `rect`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码绘制了 `rect` 中定义的矩形轮廓。
- en: '[PRE25]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The preceding code draws a solid filled ellipse at the position defined in `position`.
    Radius along x axis is defined in `radiusX` and radius along y axis is defined
    in `radiusY`. `numSegments` is optional; that defines how many triangles are used
    for drawing the ellipse as this shape is drawn using OpenGL triangle fans. If
    it is `0`, the number of fans is decided automatically.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码在 `position` 定位处绘制了一个实心填充的椭圆。x 轴上的半径由 `radiusX` 定义，y 轴上的半径由 `radiusY` 定义。`numSegments`
    是可选的；它定义了用于绘制椭圆的三角形数量，因为此形状使用 OpenGL 三角形扇形绘制。如果为 `0`，扇形的数量将自动决定。
- en: '[PRE26]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding code draws just the outline of an ellipse whose position is defined
    in `position`, radius along x axis in `radiusX`, radius along y axis in `radiusY`.
    and optionally, number of segments in `numSegments`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码仅绘制了椭圆的轮廓，其位置由 `position` 定义，x 轴上的半径由 `radiusX` 定义，y 轴上的半径由 `radiusY` 定义。并且可选地，在
    `numSegments` 中定义段数。
- en: '[PRE27]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code draws a solid filled rectangle with rounded corners. Rectangle
    is defined in `rect`, its corner radius in `cornerRadius`, and it is possible
    to optionally define the number of segments that are used for drawing each corner
    in `numSegmentsPerCorner`. If it is set to `0`, the number of segments is decided
    automatically.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码绘制了一个具有圆角的实心填充矩形。矩形由 `rect` 定义，其圆角半径由 `cornerRadius` 定义，并且可以在 `numSegmentsPerCorner`
    中可选地定义用于绘制每个角落的段数。如果设置为 `0`，段数将自动决定。
- en: '[PRE28]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The preceding code draws just the outline of a rectangle with rounded corners.
    Rectangle is defined in `rect`, its corner radius in `cornerRadius`, and it is
    possible to optionally define the number of segments that are used for drawing
    each corner in `numSegmentsPerCorner`. If it is set to `0`, the number of segments
    is decided automatically.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码仅绘制了具有圆角的矩形轮廓。矩形由 `rect` 定义，其圆角半径由 `cornerRadius` 定义，并且可以在 `numSegmentsPerCorner`
    中可选地定义用于绘制每个角落的段数。如果设置为 `0`，段数将自动决定。
- en: 'To make these functions work, you have to import the OpenGL header file as
    follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 要使这些函数正常工作，你必须按照以下方式导入 OpenGL 头文件：
- en: '[PRE29]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Images
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片
- en: 'The following is the basic code that loads an image into a texture:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将图像加载到纹理中的基本代码：
- en: '[PRE30]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This texture then is drawn within the `draw()` function by using the following
    code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此纹理随后在 `draw()` 函数中使用以下代码进行绘制：
- en: '[PRE31]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The first parameter is the texture that contains the loaded image, and the second
    parameter is rectangle that is drawn within the texture.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是包含加载图像的纹理，第二个参数是在纹理中绘制的矩形。
- en: 'To make this code example work, you have to import the following header files:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要使此代码示例正常工作，你必须导入以下头文件：
- en: '[PRE32]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Other functions
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他函数
- en: Please refer to all the chapters in this book, if you are interested in 3D,
    video, sound, or other kinds of function reference as this kind of functionality
    makes use of classes, and the reference and explanation of these functions would
    take the same amount of space as the chapters.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 3D、视频、声音或其他类型的函数参考感兴趣，请参阅本书的所有章节，因为这类功能使用类，这些函数的参考和解释将占用与章节相同的空间。
- en: If you want more of Cinder and you can't find what you are searching for in
    this book, please refer to the original Cinder function reference available at
    [http://libcinder.org](http://libcinder.org) or one of many C++ or OpenGL language
    references. Another great place to look for help is the friendly *libcinder.org*
    forum.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要更多关于 Cinder 的信息，但在这本书中找不到你想要的内容，请参考在 [http://libcinder.org](http://libcinder.org)
    可用的原始 Cinder 函数参考，或者许多 C++ 或 OpenGL 语言参考之一。另一个寻找帮助的好地方是友好的 *libcinder.org* 论坛。
- en: As Cinder is open source, it is a good idea to look at the Cinder source code
    if you are in trouble and feel experienced enough to be able to find what you
    are searching for, or fix issues that are standing in your way.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Cinder 是开源的，如果你遇到麻烦并且觉得自己经验足够，能够找到你想要的东西，或者修复挡在你道路上的问题，查看 Cinder 的源代码是个不错的选择。
- en: This book is just a brief introduction of what is actually possible with Cinder.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书只是对 Cinder 实际能做什么的一个简要介绍。
