- en: Chapter 5. Create Microservices on Azure Service Fabric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter deals with the exciting world of microservices and **Azure Service
    Fabric**. In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Service Fabric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Service Fabric application with a stateless actor service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Service Fabric Explorer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Traditionally, developers wrote applications in a monolithic manner. This means
    one single executable that is broken up into components via classes and so on.
    Monolithic applications require a great deal of testing, and deployment is tedious
    due to the bulkiness of the monolithic application. Even though you might have
    multiple developer teams, they all need to have a solid understanding of the application
    as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Microservices is a technology that aims to address the issues surrounding monolithic
    applications and the traditional way of developing applications. With microservices,
    you can break the application into smaller bits (services) that can function on
    their own without being dependent on any of the other services. These smaller
    services can be stateless or stateful and are also smaller in scale in terms of
    functionality, making them easier to develop, test, and deploy. You can also version
    each microservice independently from the others. If one microservice is receiving
    more load than the others, you can scale only that service up to meet the demands
    placed on it. With monolithic applications, you would have to try and scale the
    whole application up in order to meet the demands for a single component within
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: Take, for example, the workings of a popular online web store. It could consist
    of a shopping cart, shopper profile, order management, backend login, inventory
    management, billing, returns, and much more. Traditionally, a single web application
    is created to provide all these services. With microservices, you can isolate
    each service as a standalone, self-contained bit of functionality and code base.
    You can also dedicate a team of developers to work on a single portion of the
    web store. If this team is responsible for the inventory-management microservice,
    they would handle every aspect of it. This, for example, means everything from
    writing code and enhancing functionality, to testing and deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Another excellent side effect of microservices is that it allows you to easily
    isolate any faults you might come across. Finally, you can also create microservices
    in any technology you want (C#, Java, VB.NET), as they are language independent.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Service Fabric allows you to scale your microservices easily and increases
    application availability because it implements failover. When microservices are
    used with Fabric, microservices become a very powerful technology. Think of Azure
    Service Fabric as a **Platform as a Service** (**PaaS**) solution, on top of which
    your microservices sit. We call the collection that the microservices live on
    a Service Fabric cluster. Each microservice lives on a virtual machine, which
    is referred to as a node in the Service Fabric cluster. This Service Fabric cluster
    can live in the cloud or on a local machine. If a node becomes unavailable for
    any reason, the Service Fabric cluster will automatically redistribute the microservices
    to the other nodes so that the application remains available.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, here is a word on the differences between stateful and stateless microservices.
    You are able to create a microservice as stateless or stateful. When a microservice
    relies on an external data store to persist data, it is stateless in nature. This
    simply means that the microservice does not maintain its state internally. A stateful
    microservice, on the other hand, maintains its own state by storing it locally
    on the server it resides on.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Service Fabric
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have to install and set up a local Service Fabric cluster on your PC
    before you can create and test Service Fabric applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will download and install the **software development kit** (**SDK**) from
    the Azure site. This will allow us to create a local Service Fabric cluster on
    your local development machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From the Microsoft Azure site, download the SDK and access other resources,
    such as documentation, via the Service Fabric learning path, from [https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/](https://azure.microsoft.com/en-us/documentation/learning-paths/service-fabric/):![How
    to do it…](img/B05391_05_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will need to accept the license terms before the installation begins:![How
    to do it…](img/B05391_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The web platform installer then starts downloading the Microsoft Azure Service
    Fabric runtime. Allow this process to complete:![How to do it…](img/B05391_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the download has completed, the install process will begin:![How to do
    it…](img/B05391_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the installation has completed, the following products would have been
    installed, which is also evident in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Microsoft Azure Service Fabric Runtime
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure Service Fabric Core SDK Preview
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure Service Fabric Visual Studio 2015 Tools Preview
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Azure Service Fabric SDK Preview
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B05391_05_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The next task is to open PowerShell as the administrator. In the Windows 10
    Start menu, type the word `PowerShell`, and the search will immediately return
    the desktop application as a result. Right-click on the desktop application and
    select **Run as administrator** from the context menu:![How to do it…](img/B05391_05_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once Windows PowerShell has opened up, run the `Set-ExecutionPolicy -ExecutionPolicy
    Unrestricted -Force -Scope CurrentUser` command. The reason for this is that Service
    Fabric uses PowerShell scripts for the creation of the local development cluster.
    It is also used for the deployment of Visual Studio developed apps. Running this
    command prevents Windows from blocking those scripts:![How to do it…](img/B05391_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, create the local Service Fabric cluster. Enter the `& "$ENV:ProgramFiles\Microsoft
    SDKs\Service Fabric\ClusterSetup\DevClusterSetup.ps1"` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will create the local cluster needed to host Service Fabric applications:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/B05391_05_08.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: After the cluster is created, PowerShell will start the service:![How to do
    it…](img/B05391_05_09.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The process might take several minutes. Be sure to let it complete:![How to
    do it…](img/B05391_05_10.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the naming service is ready, you can close PowerShell:![How to do it…](img/B05391_05_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To view the created cluster, you can navigate to `http://localhost:19080/Explorer`
    on your local machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will give you a snapshot of the cluster''s health and state. It will also
    show any applications running in the cluster:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it…](img/B05391_05_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you can see, the Service Fabric cluster is essential for creating and running
    applications created in Visual Studio. This will allow us to test applications
    directly on your local machine before publishing them to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Service Fabric application with a stateless actor service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As part of the introduction to this chapter, we looked at the difference between
    stateful and stateless microservices. The Service Fabric application templates
    available are then further divided into **Reliable Services** (stateful/stateless)
    and **Reliable Actors** (stateful/stateless). When to use which one is something
    that will depend on the specific business requirement of your application.
  prefs: []
  type: TYPE_NORMAL
- en: To put it simply though, if you wanted to create a service that should be exposed
    to many users of your application at any one time, a Reliable Service would probably
    be a good fit. Think of a service exposing the latest exchange rates that can
    be consumed by many users or applications at once.
  prefs: []
  type: TYPE_NORMAL
- en: Again, looking back to the introduction of this chapter, we used the example
    of an online web store with a shopping cart. A Reliable Actor could be a good
    fit for every customer buying items, so you could have a shopping cart actor.
    The Reliable Actor as part of the Service Fabric framework is based on the Virtual
    Actor pattern. Have a look at the article on the Virtual Actor pattern at [http://research.microsoft.com/en-us/projects/orleans/](http://research.microsoft.com/en-us/projects/orleans/).
  prefs: []
  type: TYPE_NORMAL
- en: To show you how easy it is to create a microservice using a stateless actor
    service as an example, we will use Visual Studio to publish a service to the Service
    Fabric cluster and call that service from a console (client) application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To complete this recipe, you must ensure that you have installed your local
    Service Fabric cluster on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Visual Studio, create a new project by going to **File** | **New** | **Project**:![How
    to do it…](img/B05391_05_13.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Visual C#** node, expand the nodes until you see the **Cloud** node.
    When you click on it, you will see that Visual Studio now lists a new **Service
    Fabric Application** template. Select the **Service Fabric Application** template,
    call it `sfApp`, and click on **OK**:![How to do it…](img/B05391_05_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, select **Stateless Reliable** **Actor** from the **Create a Service**
    window that pops up. We just called ours `UtilitiesActor`:![How to do it…](img/B05391_05_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once your solution is created, you will notice that it consists of three projects.
    These are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`sfApp`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UtilitiesActor`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UtilitiesActor.Interfaces`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it…](img/B05391_05_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'We will start off by modifying the `IUtilitiesActor` interface. This interface
    will simply require that `UtilitiesActor` implements a method called `ValidateEmailAsync`
    that takes an e-mail address as a parameter and returns a Boolean value indicating
    whether it is a valid email address or not:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Next, open up your `UtilitiesActor` project and view the class. It will be underlined
    with a red squiggly line because it does not implement the interface member `ValidateEmailAsync()`:![How
    to do it…](img/B05391_05_16.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using *Ctrl* + *.* (period), implement the interface. Remove all the other unnecessary
    default code (if any):![How to do it…](img/B05391_05_17.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The implemented interface code inserted for you should look like this. At the
    moment, it only contains `NotImplementedException`. It is here that we will implement
    the code to validate the e-mail address:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will use a regular expression to validate the e-mail address passed to this
    method via the parameter. Regular expressions are very powerful. I have, however,
    in all my years of programming, never written my own expression. These are readily
    available on the Internet, and you can create a utilities class (or extension
    methods class) for your own projects to reuse. You can make use of regular expressions
    and other code that is often used.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, you will notice the `ActorEventSource` code. This is simply just to
    create **Event Tracing for Windows** (**ETW**) events that will help you see what
    is happening in your application from the diagnostic events window in Visual Studio.
    To open the diagnostic events window, go to **View**, **Other Windows** and click
    on **Diagnostic Events Viewer**:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Be sure to add a reference to the `System.Text.RegularExpressions` namespace.
    Without it, you will not be able to use the regular expressions. If you added
    the regular expression in your code without adding the reference, Visual Studio
    will display a red squiggly line under the `Regex` method:![How to do it…](img/B05391_05_18.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using *Ctrl* + *.* (period), add the `using` statement to your project. This
    will bring the regular expression namespace into scope:![How to do it…](img/B05391_05_19.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have created the interface and also added the implementation of
    that interface, it is time to add a client application that we will use for testing.
    Right-click on your solution and add a new project:![How to do it…](img/B05391_05_20.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The easiest way is to add a simple console application. Call your client application
    `sfApp.Client` and click on the **OK** button:![How to do it…](img/B05391_05_21.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have added your console application to your solution, your solution
    should look like this:![How to do it…](img/B05391_05_23.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now need to add references to your client application. Right-click
    the **References** node in your `sfApp.Client` project and select **Add Reference**
    from the context menu:![How to do it…](img/B05391_05_24.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start off by adding a reference to the `UtilitiesActor.Interfaces` project:![How
    to do it…](img/B05391_05_25.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also need to add references to several Service Fabric **dynamic link
    libraries** (**DLLs**). When you created your Service Fabric application, it should
    have added a folder called `packages` to your project folder structure. Browse
    to this folder and add your Service Fabric DLLs from there. After you have added
    the required DLLs, your project should look like this:![How to do it…](img/B05391_05_29.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Program.cs` file of your console application, you need to add the following
    code to the `Main` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All we are doing is creating a proxy for our actor and writing the output of
    the e-mail validation to the console window. Your client application is now ready.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before we can run the client application, however, we need to publish our service
    first. In **Solution Explorer**, right-click on the `sfApp` service and click
    on **Publish** from the context menu:![How to do it…](img/B05391_05_26.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Publish** **Service Fabric Application** window will now be displayed.
    Click on the **Select…** button next to the **Connection endpoint** text box:![How
    to do it…](img/B05391_05_27.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Local Cluster** as your **Connection endpoint** and click on **OK**:![How
    to do it…](img/B05391_05_28.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change **Target profile** and **Application** **Parameters File** to `Local.xml`.
    When you are done, click on the **Publish** button:![How to do it…](img/B05391_05_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you navigate to `http://localhost:19080/Explorer`, you will notice that the
    service you created has been published to your local Service Fabric cluster:![How
    to do it…](img/B05391_05_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now ready to run your client application. Right-click on the `sfApp.Client`
    project, and select **Debug** and **Start new instance** from the context menu:![How
    to do it…](img/B05391_05_32.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The console application calls the validate method to check the e-mail addresses,
    and displays the results to the console window. The results are as expected:![How
    to do it…](img/B05391_05_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can, however, be more specific when creating the actor ID. We can give it
    a specific name. Modify your proxy code and create a new `ActorId` method, and
    give it any string value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ActorId` method can take a parameter of type `Guid`, `long` or `string`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When you debug your client application again, you will notice that `Utilities
    Actor` now has a logical name (the same name you passed as a string value when
    creating a new `ActorId` method):![How to do it…](img/B05391_05_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating your Service Fabric application and publishing it locally is a perfect
    solution for testing your application before publishing it to the cloud. Creating
    small independent microservices allows developers many benefits related to testing,
    debugging, and deploying efficient and robust code that your applications can
    leverage to ensure maximum availability.
  prefs: []
  type: TYPE_NORMAL
- en: Using Service Fabric Explorer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There is another tool that you can use to visualize the Service Fabric cluster.
    It is a standalone tool that you can find by navigating to the local installation
    path at `%Program Files%\Microsoft SDKs\Service Fabric\Tools\ServiceFabricExplorer`
    and clicking on `ServiceFabricExplorer.exe`. When you run the application, it
    will automatically connect to your local Service Fabric cluster. It can display
    rich information regarding the applications on the cluster, the cluster nodes,
    the heath status of the applications and nodes, and any load on the applications
    in the cluster.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You must have already completed the installation of Service Fabric on your local
    machine for the Service Fabric Explorer to work. If you have not done so yet,
    follow the *Downloading and installing Service Fabric* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you start the Service Fabric Explorer, the following window will appear:![How
    to do it…](img/B05391_05_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the tree view to the left displays **Application View** and **Node
    View**:![How to do it…](img/B05391_05_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The pane on the right-hand side will display information regarding the local
    cluster. This makes it easy for you to see the overall health of the local Service
    cluster:![How to do it…](img/B05391_05_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you expand **Application View**, you will notice that our `sfApp` service
    has been published. Expanding it even further, you will see that the `sfApp` service
    has been published on **Node.2**. Expand **Node View** and **Node.2** to see the
    service active on that node:![How to do it…](img/B05391_05_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To illustrate the scalability of microservices, right-click on **Node.2**, and
    from the context menu, stop the node. Then, click on the Refresh button at the
    top of the window to refresh the nodes and applications.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you now had to go ahead and expand **Application View**, and looked at the
    service again, you will notice that the Service Fabric cluster noticed that **Node.2**
    was down. It then automatically pushed the service on to a new, healthy node (in
    this case, **Node.5**):![How to do it…](img/B05391_05_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The local cluster nodes view in the right panel of the Service Fabric Explorer
    also reports that **Node.2** is down:![How to do it…](img/B05391_05_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Service Fabric Explorer will allow you to see information on the selected
    node, and you will be able to drill down and see a rich amount of information
    regarding the Service Fabric cluster applications.
  prefs: []
  type: TYPE_NORMAL
