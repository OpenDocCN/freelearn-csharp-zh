- en: '*Chapter 3*: Customizing Dependency Injection'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 3 章*：自定义依赖注入'
- en: In this third chapter, we'll take a look at ASP.NET Core **dependency injection**
    (**DI**) and how to customize it to use a different DI container, if needed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的第三部分，我们将探讨 ASP.NET Core **依赖注入**（**DI**）以及如何根据需要自定义它以使用不同的 DI 容器。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using a different DI container
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的 DI 容器
- en: Exploring the `ConfigureServices` method
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索 `ConfigureServices` 方法
- en: Using a different `ServiceProvider`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用不同的 `ServiceProvider`
- en: Introducing Scrutor
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Scrutor
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的主题涉及 ASP.NET Core 架构的宿主层：
- en: '![Figure 3.1 – ASP.NET Core architecture](img/Figure_2.1_B17996.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.1 – ASP.NET Core 架构](img/Figure_2.1_B17996.jpg)'
- en: Figure 3.1 – ASP.NET Core architecture
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal and change to
    your working directory. Use the following command to create a new MVC application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的描述，您需要创建一个 ASP.NET Core MVC 应用程序。打开您的控制台、shell 或 Bash 终端，切换到您的工作目录。使用以下命令创建一个新的
    MVC 应用程序：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file,
    or in Visual Studio Code by typing the following command in the already-open console:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件或在 Visual Studio Code 中在已打开的控制台中输入以下命令来在 Visual Studio 中打开项目：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All of the code samples in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter03).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter03)。
- en: Using a different DI container
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的 DI 容器
- en: 'In most projects, you don''t really need to use a different DI container. The
    existing DI implementation in ASP.NET Core supports the main basic features and
    works both effectively and quickly. However, some other DI containers support
    a number of interesting features you might want to use in your application:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数项目中，您实际上并不需要使用不同的 DI 容器。ASP.NET Core 中现有的 DI 实现支持主要的基本功能，并且既有效又快速。然而，一些其他
    DI 容器支持您可能在应用程序中想要使用的许多有趣功能：
- en: Create an application that supports modules as lightweight dependencies using
    Ninject, for example, modules you might want to put into a specific directory
    and have them be automatically registered in your application.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Ninject 创建一个支持模块作为轻量级依赖项的应用程序，例如，您可能希望将其放入特定目录并自动在应用程序中注册的模块。
- en: Configure the services in a configuration file outside the application, in an
    XML or JSON file instead of in C# only. This is a common feature in various DI
    containers, but not yet supported in ASP.NET Core.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在应用程序外部的配置文件中配置服务，在 XML 或 JSON 文件中而不是仅使用 C#。这是各种 DI 容器中的常见功能，但 ASP.NET Core
    中尚未支持。
- en: Add services at runtime, probably because you don't want to have an immutable
    DI container. This is also a common feature in some DI containers.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在运行时添加服务，可能是因为您不希望有一个不可变的 DI 容器。这也是一些 DI 容器中的常见功能。
- en: Let's now see how the `ConfigureServices` method enables you to use alternative
    DI containers.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看 `ConfigureServices` 方法如何使您能够使用替代的 DI 容器。
- en: Exploring the ConfigureServices method
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索 ConfigureServices 方法
- en: 'Let''s compare the current `ConfigureServices` method with a previous long-term
    support version to see what has changed. If you created a new ASP.NET Core project
    using version 3.1 and open `Startup.cs`, you will find the method to configure
    the services, which looks like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们比较当前的 `ConfigureServices` 方法与之前的长期支持版本，看看有什么变化。如果您使用版本 3.1 创建了新的 ASP.NET
    Core 项目并打开 `Startup.cs`，您将找到配置服务的函数，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In contrast, in ASP.NET Core 6.0, there is no `Startup.cs` anymore, and the
    configuring of the services is done in `Program.cs`, which looks like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，在 ASP.NET Core 6.0 中，已经不再有 `Startup.cs`，服务的配置是在 `Program.cs` 中完成的，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In both cases, the method gets `IServiceCollection`, which is already filled
    with a bunch of services that are required by ASP.NET Core. This service was added
    by the hosting services and parts of ASP.NET Core that are executed before the
    `ConfigureServices` method was called.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，方法都会获取 `IServiceCollection`，它已经包含了一堆 ASP.NET Core 所需的服务。这个服务是由托管服务和在调用
    `ConfigureServices` 方法之前执行的 ASP.NET Core 的部分添加的。
- en: Inside the method, some more services are added. First, a configuration class
    that contains cookie policy options is added to `ServiceCollection`. After that,
    the `AddMvc()` method adds another bunch of services required by the MVC framework.
    So far, we have around 140 services registered to `IServiceCollection`. However,
    the service collection isn't the actual DI container.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在方法内部，还会添加一些更多的服务。首先，添加一个包含 cookie 策略选项的配置类到 `ServiceCollection`。之后，`AddMvc()`
    方法添加了 MVC 框架所需的另一堆服务。到目前为止，我们已经将大约 140 个服务注册到了 `IServiceCollection`。然而，服务集合并不是实际的
    DI 容器。
- en: 'The actual DI container is wrapped in the so-called `IServiceCollection` has
    an extension method registered to create an `IServiceProvider` out of the service
    collection, which you can see in the following code snippet:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的 DI 容器被所谓的 `IServiceCollection` 包装，并注册了一个扩展方法来从服务集合中创建 `IServiceProvider`，如下面的代码片段所示：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`ServiceProvider` contains the immutable container that cannot be changed at
    runtime. With the default `ConfigureServices` method, `IServiceProvider` is created
    in the background after this method is called.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`ServiceProvider` 包含一个不可变的容器，在运行时无法更改。使用默认的 `ConfigureServices` 方法，在调用此方法之后，会在后台创建
    `IServiceProvider`。'
- en: Next, we'll learn more about applying an alternative `ServiceProvider` as part
    of the DI customization process.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何在 DI 自定义过程中应用替代的 `ServiceProvider`。
- en: Using a different ServiceProvider
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用不同的 ServiceProvider
- en: 'Changing to a different or custom DI container is relatively easy if the other
    container already supports ASP.NET Core. Usually, the other container will use
    `IServiceCollection` to feed its own container. The third-party DI containers
    move the already-registered services to the other container by looping over the
    collection:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果其他容器已经支持 ASP.NET Core，那么切换到不同的或自定义的 DI 容器相对容易。通常，其他容器会使用 `IServiceCollection`
    来填充自己的容器。第三方 DI 容器通过遍历集合将已注册的服务移动到其他容器中：
- en: 'Let''s start by using `Autofac` as a third-party container. Type the following
    command into your command line to load the NuGet package:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们首先使用 `Autofac` 作为第三方容器。在你的命令行中输入以下命令来加载 NuGet 包：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: To register a custom IoC container, you need to register a different `IServiceProviderFactory`.
    In that case, you'll want to use `AutofacServiceProviderFactory` if you use `Autofac`.
    `IServiceProviderFactory` will create a `ServiceProvider` instance. The third-party
    container should provide one, if it supports ASP.NET Core.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要注册自定义的 IoC 容器，你需要注册不同的 `IServiceProviderFactory`。在这种情况下，如果你使用 `Autofac`，你将想要使用
    `AutofacServiceProviderFactory`。`IServiceProviderFactory` 将创建一个 `ServiceProvider`
    实例。如果第三方容器支持 ASP.NET Core，它应该提供一个。
- en: 'You should place this small extension method in `Program.cs` to register `AutofacServiceProviderFactory`
    with `IHostBuilder`:'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你应该将这个小的扩展方法放在 `Program.cs` 中，以将 `AutofacServiceProviderFactory` 注册到 `IHostBuilder`：
- en: '[PRE6]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Don't forget to add using statements to `Autofac` and `Autofac.Extensions.DependencyInjection`.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记添加 `Autofac` 和 `Autofac.Extensions.DependencyInjection` 的 using 语句。
- en: 'To use this extension method, you can use `AutofacServiceProvider` in `Program.cs`:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用这个扩展方法，你可以在 `Program.cs` 中使用 `AutofacServiceProvider`：
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This adds the `AutofacServiceProviderFactory` function to `IHostBuilder` and
    enables the `Autofac` IoC container. If you have this in place, you will use `Autofac`
    if you add services to `IServiceCollection` using the default way.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这将 `AutofacServiceProviderFactory` 函数添加到 `IHostBuilder` 并启用 `Autofac` IoC 容器。如果你已经设置了它，那么在默认方式下向
    `IServiceCollection` 添加服务时，你将使用 `Autofac`。
- en: Introducing Scrutor
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Scrutor
- en: You don't always need to replace the existing .NET Core DI container to get
    and use some cool features. At the beginning of this chapter, I mentioned the
    autoregistration of services, which can be done with other DI containers. This
    can also be done with a nice NuGet package called `IServiceCollection` to automatically
    register services with the .NET Core DI container.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你并不总是需要替换现有的 .NET Core DI 容器来获取和使用一些酷炫的功能。在本章的开头，我提到了服务的自动注册，这可以通过其他 DI 容器来完成。这也可以通过一个名为
    `IServiceCollection` 的不错的 NuGet 包来实现，该包可以自动将服务注册到 .NET Core DI 容器中。
- en: Note
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Andrew Lock has published a pretty detailed blog post relating to Scrutor.
    Rather than just repeating what he said, I suggest that you just go ahead and
    read that post to learn more about it: *Using Scrutor to automatically register
    your services with the ASP.NET Core DI container*, available at [https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/](https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安德鲁·洛克（Andrew Lock）发布了一篇相当详细的关于 Scrutor 的博客文章。与其重复他的话，我建议您直接阅读那篇文章来了解更多信息：*使用
    Scrutor 自动将服务注册到 ASP.NET Core DI 容器*，可在[https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/](https://andrewlock.net/using-scrutor-to-automatically-register-your-services-with-the-asp-net-core-di-container/)找到。
- en: Summary
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Using the approaches we have demonstrated in this chapter, you will be able
    to use any .NET Standard-compatible DI container to replace the existing one.
    If the container of your choice doesn't include `ServiceProvider`, create your
    own that implements `IServiceProvider` and uses the DI container inside. If the
    container of your choice doesn't provide a method to populate the registered services
    in the container, create your own method. Loop over the registered services and
    add them to the other container.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本章中展示的方法，您将能够使用任何 .NET Standard 兼容的 DI 容器来替换现有的容器。如果您选择的容器不包含 `ServiceProvider`，请创建自己的实现
    `IServiceProvider` 并在内部使用 DI 容器。如果您选择的容器不提供填充容器中注册的服务的方法，请创建自己的方法。遍历注册的服务并将它们添加到其他容器中。
- en: Actually, the last step sounds easy but can be a hard task, because you need
    to translate all the possible `IServiceCollection` registrations into registrations
    of the other container. The complexity of that task depends on the implementation
    details of the other DI container.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，最后一步听起来很简单，但可能是一项艰巨的任务，因为您需要将所有可能的 `IServiceCollection` 注册转换为其他容器的注册。这项任务的复杂性取决于其他
    DI 容器的实现细节。
- en: Anyway, you have the choice to use any DI container that is compatible with
    .NET Standard. You can change a lot of the default implementations in ASP.NET
    Core.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，您可以选择使用任何与 .NET Standard 兼容的 DI 容器。您可以在 ASP.NET Core 中更改很多默认实现。
- en: This is also something you can do with the default HTTPS behavior on Windows,
    which we will learn more about in the next chapter.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是您可以在 Windows 上默认的 HTTPS 行为中完成的事情，我们将在下一章中了解更多。
