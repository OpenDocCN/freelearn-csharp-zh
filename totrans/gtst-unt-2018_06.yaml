- en: Creating and Importing 3D Objects for Our Game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we explored cameras and lighting. We started by looking
    at cameras, as well as the concepts of perspectives, frustums, and skyboxes. Next,
    we learned the possible uses of multiple cameras in Unity games. We also covered
    the different types of lighting, explored reflection probes, and concluded with
    a look at shadows.
  prefs: []
  type: TYPE_NORMAL
- en: We are ready to start making our game environment more robust. We will do that
    by adding trees and other objects to our scene. In this chapter, we will create
    3D objects using Unity's native modeling tools. We will also import and use assets
    from two sources. Our first source will be the Unity Asset Store where we will
    download free-to-use assets for our game. We will also import 3D assets prepared
    specifically for our *Cucumber Beetle* game. As we obtain the assets, we will
    incorporate them into the game project and watch our game start to take shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following concepts in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding assets and GameObjects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating 3D objects in Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Unity Asset Store
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporating custom assets in our game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with imported assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to use the same Unity project featured in this chapter, you can
    download the `Starting-Chapter-06.zip` file from the publisher's companion site.
    Once you download the file, decompress it, and then open the project in Unity.
    It contains the completed work from the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding assets and GameObjects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Assets are defined as useful or valuable things. In Unity, assets are things
    you will use in our game in conjunction with GameObjects. We''ll discuss GameObjects
    later in this section. There are three basic categories of asset based on their
    source: Unity, user created, and third party. The Unity game engine comes with
    free assets and offers a library of premium (not free) assets. User-created assets
    are those that you create yourself. We will create our own assets later in this
    chapter. The final asset type is third party, meaning that someone other than
    you or Unity created it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we select the Assets drop-down menu, as shown in the following screenshot,
    we have several options available to us. You will become familiar with the Create,
    Import New Asset, and Import Package options in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3da45d6a-3a19-41da-b412-b6251c1908b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Regardless of the asset source, Unity, user-created, and third-party, assets
    can be of several types. As you can see in the following screenshot, these asset
    types include scripts, scenes, prefabs, materials, animations and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1bcd289a-9c63-464d-911d-4b705f7feec3.png)'
  prefs: []
  type: TYPE_IMG
- en: Asset packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Asset packages are bundles of assets grouped together. We can create packages
    to share our assets with others, or to save them for use in another game or Unity
    application. We can even create asset bundles to sell in Unity's Asset Store.
  prefs: []
  type: TYPE_NORMAL
- en: To create an `asset` package, you simply select all the assets you want in the
    package using the Project panel. Then you have two options. Your first option
    is to right-click and select Export Package. The second option is to select Assets
    | Export Package from the top menu. Both options result in the same outcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the ability to export packages from Unity, we can also import
    `asset` packages into our Unity games. To import an `asset` package, we simply
    select the Assets | Import Package menu option. That reveals the options shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eccc8f5d-79a8-4498-bc3c-e13ea792efc2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When importing `asset` packages, we can select from one of the standard asset
    packages listed: 2D, Cameras, Characters, CrossPlatformInput, Effects, Environment,
    ParticleSystems, Prototyping, Utility, and Vehicles. We can also import a custom
    package from our computer''s filesystem.'
  prefs: []
  type: TYPE_NORMAL
- en: When a package is selected, Unity will decompress the package and then display
    the package contents to you. We will perform this operation later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GameObjects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GameObjects are things we use in our game, such as 2D objects, 3D objects, audio,
    cameras, lights, user interfaces, and visual effects. GameObjects have properties,
    which vary based on their type, and components. Components can consist of things
    such as scripts, animations, and more. You will learn a lot about GameObjects
    and how to work with them as we continue to work on our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'GameObjects are composed of components. As you can see in the following screenshot
    of the Inspector panel, our game''s Main Camera has four components: Transform,
    Camera, GUI Layer, Flare Layer, and Audio Listener:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4d6df247-701f-4a1f-af2e-7a84fed42f4a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of the Inspector panel is the Add Component button. That button
    gives us access to Unity''s components using the following categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Mesh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physics 2D
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Playables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Event
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New Script
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating 3D objects in Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned in the previous section, GameObjects can include 3D objects with
    properties and components. In this section, we will create a 3D object to represent
    a blood droplet that we can use when the Cucumber Man is battling with a Cucumber
    Beetle. Before we create the object, let''s create a material so that our blood
    droplet can have a realistic red color. Follow these steps to create the material:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, click Materials, and then right-click in the folder and
    select Create | Material
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new material red
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the new material selected, click the color box in the Main Maps section
    of the Inspector panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the color selector window that pops-up, select a red color and then close
    the selection box
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your new material, when viewed in the Inspector panel, should look similar
    to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8c22f3e2-591c-45f1-b303-4248c94c17cc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, let''s create the sphere:'
  prefs: []
  type: TYPE_NORMAL
- en: From the top menu, select GameObject | 3D Object | Sphere.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the transform tools to position the new sphere so that you can see it in
    the Scene view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Transform section of the Inspector panel to increase the Scale to 5
    for the X, Y, and Z Scale parameters. This will help make the sphere larger and
    easier to work with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will assign the red material to the sphere. With the sphere selected
    in the Hierarchy panel and the `Materials` folder selected in the project panel,
    drag the red material from the `Materials` folder to the Inspector panel Mesh
    Renderer component, in the Materials | Element 0 parameter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see that the sphere in the Scene view is red.
  prefs: []
  type: TYPE_NORMAL
- en: If we intend on using this sphere to simulate blood droplets, we might need
    several dozen of them. We will explore our options in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using prefabs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, you created a sphere to simulate a blood droplet. You
    also created a red material and applied it to your sphere. In the game, we might
    want to simulate a great battle and have multiple blood droplets visible at once.
    In Unity, we can make as many copies of our master as we want. For example, let's
    assume we have 100 spheres, all copied from our master. What happens when we want
    to alter them, perhaps changing the size or material? It would be a laborious
    task to edit each one.
  prefs: []
  type: TYPE_NORMAL
- en: 'An alternative is to use a prefab. In Unity, a prefab is an asset type that
    serves as a shell for a GameObject along with properties and components. The sphere
    we created is a GameObject, and, as you can see in the following screenshot, our
    sphere has several components and properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d8bb87cf-5f49-4705-8666-de1265ee8210.png)'
  prefs: []
  type: TYPE_IMG
- en: 'So, let''s create a prefab to hold our sphere. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, select the `Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Prefabs` folder and select Create | Prefab. Alternatively,
    you could have selected, from the top menu, Assets | Create | Prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the prefab `bloodDroplet`. You will notice that there are no components
    or properties visible in the Inspector panel for the new prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, drag the `Sphere` GameObject from the Hierarchy panel to the new `bloodDroplet`
    prefab in the Project panel. Now, when you view the prefab in the Inspector panel,
    you can see the components and properties that our sphere had.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We no longer need the original sphere, so delete that in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have a `bloodDroplet` prefab, we can drag it into our scene as many
    times as we want. We can also add them to our scene using scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'To experience the power of prefabs in Unity, try the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `bloodDroplet` prefab in the Project panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag several copies of the `bloodDroplet` prefab into your scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, change the color. You will notice that all the `bloodDroplets`
    in your scene were changed based on the change you made to the prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return the color of the prefab to the red material.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete any `bloodDroplets` from your scene. This is most easily done in the
    Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deleting the `bloodDroplets` from your scene does not remove all `bloodDroplets`
    from your game. Because we have the `bloodDroplet` prefab, we can add `bloodDroplets`
    to our scene at any time.
  prefs: []
  type: TYPE_NORMAL
- en: Using additional 3D objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, you created a sphere. Unity also allows us to natively
    create other 3D objects: cubes, capsules, cylinders, planes, quads, rag dolls,
    terrain, trees, wind zones, and 3D text. The basic shapes—cube, sphere, capsule,
    cylinder, plane, and quad—may not be what you need for your game, and we certainly
    do not need them for our *Cucumber Beetle* game. These 3D objects are great for
    testing components and scripts in Unity projects. We can delete them even more
    easily than we can create them, so they make great and expendable testing assets.
    We can use them in our games to experiment with before we spend any time on final
    graphics.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Unity Asset Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity operates a store called the Unity Asset Store. There are a great number
    of assets available to Unity developers. The store is accessible directly on the
    web at [http://assetstore.unity3d.com](http://assetstore.unity3d.com). You can
    also open a window within Unity to display the Asset Store. This is done by selecting
    Window | Asset Store.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of how you connect to the Unity Asset Store, you will see a hierarchical
    category listing in the top-right-hand corner of the store. As you can see in
    the following screenshot, there are eleven asset categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc557571-5952-4ac8-9aee-0cf39a31fa2f.png)'
  prefs: []
  type: TYPE_IMG
- en: Clicking on the triangular icons to the left of each category reveals subcategories.
    Some categories have multiple subcategories, which helps you find what you are
    looking for quickly. You can also use the Asset Store's search functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on a category, its contents will be viewable. Clicking on a
    specific asset will display several characteristics of that asset. These characteristics
    include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Title
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publisher
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rating
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Price
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add to Cart button, or, in the case of free assets, a Download button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version of Unity required
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Release date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Description
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Package contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: File size
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Version number (of the asset)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Videos (not always available)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link to publisher's website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User reviews
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are a couple of things to consider regarding obtaining assets from the
    Unity Asset Store. First, you will want to make sure you have the requisite rights
    to use the asset as you plan to. For example, if you do not have commercial use
    rights, you will not want to use that particular asset in your commercial game.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing to consider before selecting assets from the Asset Store is how
    large the files are. Fortunately, this information is part of the metadata displayed
    when you preview an asset.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will visit the Unity Asset Store, select an asset, and
    add that asset to our game project.
  prefs: []
  type: TYPE_NORMAL
- en: Hands-on with the Unity Asset Store
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will go through the necessary steps to acquire assets from
    the Unity Asset Store. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the top menu, select Window | Asset Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search box, enter `Unity Particle Pack` and hit your keyboard's return
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the results, find the Unity Particle Pack item by Unity Technologies. It
    will be a free asset package. Select that package by clicking on the title.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the Unity Particle Pack displayed in the Asset Store, click the Download
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will be prompted to accept the License Agreement. Click the Accept button
    if you agree with the terms. This will start the download process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the download completes, the Import button will appear. Click that button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will now see the Import Unity Package dialog window. By default, all assets
    in the package will be selected. Click the Import button at the bottom of the
    interface. The import progress will be displayed in a pop-up window and will automatically
    close when the process completes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the import process completes, close the Asset Store by right-clicking the
    tab and selecting Close tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see from the following screenshot, there will be a new `EffectExamples`
    folder under Assets in your Project panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f363dec4-f8f6-4c8b-a816-d89335b35245.png)'
  prefs: []
  type: TYPE_IMG
- en: We now have a nice set of special effects we can use in our game. We will incorporate
    some of them in [Chapter 12](f7abb907-5397-4668-972e-e69acb441421.xhtml), *Adding
    Audio and Visual Effects to Our Game*.
  prefs: []
  type: TYPE_NORMAL
- en: Incorporating custom assets in our game
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far in this chapter, we have created our own game asset and downloaded an
    asset package from the Unity Asset Store. In this section, we will download assets
    from the publisher's companion website for use in our game.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the following steps to obtain the asset packages that were created
    specifically for our *Cucumber Beetle* game:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the publisher''s website and download the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CherriesAndTree.unitypackage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CucumberAndPatches.unitypackage`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From the top menu, select Assets | Import Package | Custom Package and navigate
    to the `CherriesAndTree.unitypackage` file. Click the Open button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, the Import Unity Package dialog window
    will have the necessary files for our Cherry Tree and the cherries. Click the
    Import button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/598ca92f-db91-498e-8297-9da676720360.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will import the cucumber and two Cucumber Patches. These are contained
    in the `CucumberAndPatches.unitypackage` asset package. Follow the preceding steps
    to import this asset package into your game.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, there are several files in this
    asset package relating to the cucumber and both Cucumber Patches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8cf23172-31dd-40ed-bb3b-58f58fa6cbb5.png)'
  prefs: []
  type: TYPE_IMG
- en: In [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml), *Implementing Our
    Player Character*, and [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml),
    *Implementing Our Non-Player Character*, you will download additional asset packages.
  prefs: []
  type: TYPE_NORMAL
- en: Working with imported assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous section, you added the following listed assets to your game:'
  prefs: []
  type: TYPE_NORMAL
- en: Cherry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cherry Tree
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber Patches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will incorporate the cherry and cucumber assets in [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml),
    *Scripting Our Points System*. In this section, we will plant our Cherry Trees
    and Cucumber Patches.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you will recall from [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml),
    *Designing the Game*, we created spawn points in four corners and the center of
    our game environment. We also selected four areas in which to plant our Cherry
    Trees. Now that we have actual terrain, we can be more specific with our design.
    Look at the following diagram to determine where to plant our Cherry Trees and
    Cucumber Patches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2e3d6e61-bda3-4ded-a4ec-31fcc5191ae1.png)'
  prefs: []
  type: TYPE_IMG
- en: We will refer to this diagram in the next two sections as we plant our Cherry
    Trees and Cucumber Patches.
  prefs: []
  type: TYPE_NORMAL
- en: Planting Cherry Trees
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 4](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml), *Creating Our Terrain*,
    we created a tree to demonstrate how to create one from scratch. Since we downloaded
    a Cherry Tree in the last section, we no longer need our experimental tree. In
    the hierarchy panel, delete the three we previously created. Next, delete any
    tree assets and tree-related texture folders in the project panel. This will help
    us stay organized and minimize the size of our Unity game project.
  prefs: []
  type: TYPE_NORMAL
- en: Basic trees in Unity can be painted on a terrain. To accomplish this, you start
    by orienting the scene view so that you have a top-down view of your terrain.
    Then, in the Hierarchy panel, select your terrain. You then use the Place Trees
    button in the Terrain component of the Inspector panel to paint the trees on your
    terrain.
  prefs: []
  type: TYPE_NORMAL
- en: Because our Cherry Trees are special and contain multiple meshes, we cannot
    use the terrain painting tool. Instead, we will make multiple copies of our Cherry
    Tree prefab and place them where we want them to be in our game world using the
    previously provided diagram as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a few preparatory steps to take prior to planting our Cherry Trees.
    Follow these steps to prepare the prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, right-click on the `Prefabs` folder and select Create
    | Prefab. Name the prefab `CherryTreeCollider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, drag the `CherryTree.prefab` that you imported in the
    previous section into the Scene view. It doesn't matter where.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the Cherry Tree you just added to the Scene view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Is Trigger checkbox in the Box Collider component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Still in the Inspector panel, click the Add Component button and then select
    Physics | Box Collider. We will use this collider to help us determine when the
    Cucumber Man is collecting cherries from a Cherry Tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will edit the collider to ensure it encapsulates the entire tree. In
    the Box Collider area of the Inspector panel, click the Edit Collider button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As you can see from the following screenshot, the collider is at the base of
    the `Cherry Tree` prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee68b387-d63b-4c75-8067-d5e78fbebbf2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Using the the squares of the box collider in the Scene view, enlarge the collider
    so that it encompasses the majority of the Cherry Tree. It does not need to include
    the tree trunk. An example configuration is shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a13305e1-e734-4f67-a43b-aaa6f2b98b40.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Project panel, ensure that the `Prefabs` folder is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Cherry Tree from the Hierarchy panel to the `CherryTreeCollider` prefab
    in the `Prefabs` folder. This establishes a `Cherry Tree` prefab with a box collider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, delete the Cherry Tree, unless it is in a place that
    you want it to be in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `CherryTreeCollider` prefab in the `Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the pull-down menu next to Tag. Select the Add
    Tag button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As indicated by the arrow in the following screenshot, click the + icon at
    the bottom of the empty list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6fb37a09-0ed0-4cf4-9dbf-39e0951b87ca.png)'
  prefs: []
  type: TYPE_IMG
- en: In the pop-up window, enter `CherryTree` as the tag name and click the Save
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `CherryTreeCollider` prefab in the `Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the pull-down menu next to Tag. Select the `CherryTree` tag.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you are ready to start planting your Cherry Trees. Simply drag the prefab
    to each area where you want a Cherry Tree. You can create as many or as few as
    you want. The example provided with this book contains 25 Cherry Trees.
  prefs: []
  type: TYPE_NORMAL
- en: Once your Cherry Trees are where you want them, your hierarchy panel will probably
    be disorganized. A quick trick to make things more organized is to right-click
    inside the Hierarchy panel and select Create Empty. Then, rename the GameObject
    to `Cherry Trees`. Lastly, in the Hierarchy panel, select all the Cherry Trees
    and place them in that GameObject. Now that GameObject serves as a folder for
    viewing purposes. You can collapse and expand the folder as needed.
  prefs: []
  type: TYPE_NORMAL
- en: If you placed your Cherry Trees using a top-down view in the Scene view, some
    of your trees might need to be raised or lowered based on your terrain. You can
    double-click a Cherry Tree in the Hierarchy view to auto-zoom in on the Scene
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Once you complete your work on the Cherry Trees, save your scene and your project.
  prefs: []
  type: TYPE_NORMAL
- en: Planting Cucumber Patches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We previously identified six areas for our Cucumber Patches. We can follow the
    same approach in placing Cucumber Patches in our game environment as we used for
    our Cherry Trees. If we took an auto-planting approach to planting our Cucumber
    Patches, we would likely end up with a lot more Cucumber Patches than we want.
    So, we will take a manual approach.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have prefabs in the `Cucumber Patch` folder from our early import. Let''s
    do a few things to prepare these prefabs for our use. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, right-click in the `Prefabs` folder and select Create
    | Prefab. Name the prefab `CucumberPatch1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat step 1 and name this second prefab `CucumberPatch2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, drag the `Patch1prefab` that you imported in the previous
    section into the Scene view. It doesn't matter where.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the Cucumber Patch you just added to the Scene
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, ensure that the `Prefabs` folder is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Cucumber Patch from the Hierarchy panel to the `CucumberPatch1` prefab
    in the `Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the Cucumber Patch from the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, drag the `Patch2prefab` that you imported in the previous
    section into the Scene view. It doesn't matter where.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select the Cucumber Patch you just added to the Scene
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Project panel, ensure that the `Prefabs` folder is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the Cucumber Patch from the Hierarchy view to the `CucumberPatch2` prefab
    in the `Prefabs` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the Cucumber Patch from the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We could have just moved the prefabs we imported to the `Prefabs` folder. Our
    approach was to duplicate them so that we have the originals available should
    we need them.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will prepare the six areas in our game world for the Cucumber Patches.
    Our goal is to identify the rectangular areas, each with a flat area of ground.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the following reference image and the Unity skills you used to create
    your terrain, we need to flatten the six areas and record their rectangle boundaries:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/938896a2-8310-4ed9-9e2f-8a9774d0d954.png)'
  prefs: []
  type: TYPE_IMG
- en: 'To prepare our Cucumber Patch areas, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Use the Paint Height tool to flatten a Cucumber Patch area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select GameObject | 3D Object | Plane from the top menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the plane so that it is on the ground, specifically in the flattened
    area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector view, set the Materials | Element 0 parameter to SpatialMappingOcclusion.
    This will make the plane transparent.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the plane is in place, make note of the transform information.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat steps 1 through 5 for the remaining Cucumber Patches.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the planes so that you have `CucumberPatchArea1`, `CucumberPatchArea2`, `CucumberPatchArea3`, `CucumberPatchArea4`, `CucumberPatchArea5`,
    and `CucumberPatchArea6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are completed, you should have six defined areas for your Cucumber
    Patches. For reference, the six areas used in the book''s example are shown in
    the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Plane** | **Transform** |'
  prefs: []
  type: TYPE_TB
- en: '| `CucumberPatchArea1` |'
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Position &#124; 7373 &#124; 40.03 &#124; 1689 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Rotation &#124; 0 &#124; 10.082 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CucumberPatchArea2` |'
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Position &#124; 1211 &#124; 40.03 &#124; 1142 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Rotation &#124; 0 &#124; 53.984 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CucumberPatchArea3` |'
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Position &#124; 1160 &#124; 40.03 &#124; 831 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Rotation &#124; 0 &#124; 87.876 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CucumberPatchArea4` |'
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Position &#124; 892 &#124; 40.03 &#124; 849 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Rotation &#124; 0 &#124; 120.877 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CucumberPatchArea5` |'
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Position &#124; 1200 &#124; 40.03 &#124; 568 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Rotation &#124; 0 &#124; 143.801 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '| `CucumberPatchArea6` |'
  prefs: []
  type: TYPE_TB
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Position &#124; 1184 &#124; 40.03 &#124; 330 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; Rotation &#124; 0 &#124; 103.911 &#124; 0 &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: Our last step is to group the six Cucumber Patches in the Hierarchy panel to
    help stay organized. As we did with the Cherry Trees, we will right-click inside
    the Hierarchy panel and select Create Empty. Then rename the GameObject as `Cucumber
    Patch Areas`. Lastly, in the Hierarchy panel, select all six Cucumber Patch panes
    and place them in that GameObject.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing Our
    Non-Player Characters*, we will use the panes to add Cucumber Patches, Cucumbers,
    and beetles.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we spent considerable time making our game environment more
    robust. We imported and used several assets. We added trees and other objects
    to our scene. We created 3D objects using Unity's native modeling tools and imported
    assets from the Unity Asset Store, as well as from the publisher's companion site.
    Specifically, we added our game's Cherry Trees, and prepared areas for Cucumber
    Patches.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml), *Implementing Our
    Player Character*, we will incorporate our game's player character, the Cucumber
    Man. We will import the character, review the controls, examine the animations,
    and make the necessary configuration changes to fully use our character in the
    game. By the end of the chapter, you will be able to start testing the game.
  prefs: []
  type: TYPE_NORMAL
