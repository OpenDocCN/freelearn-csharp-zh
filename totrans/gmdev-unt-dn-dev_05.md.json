["```cs\nusing UnityEngine;\nusing UnityEngine.EventSystems;\npublic class DragAndDropExample : MonoBehaviour,\n  IPointerDownHandler, IDragHandler\n{\n    private RectTransform _rectTransform;\n    public void OnPointerDown(PointerEventData eventData)\n    {\n        Debug.Log(\"This UI image is clicked!!!\");\n        _rectTransform = GetComponent<RectTransform>();\n    }\n    public void OnDrag(PointerEventData eventData)\n    {\n        Debug.Log(\"This UI image is being dragged!!!\");\n\n            if (RectTransformUtility\n             .ScreenPointToWorldPointInRectangle\n             (_rectTransform, eventData.position,\n             eventData.pressEventCamera, \n             out var cursorPos))\n            {\n                  _rectTransform.position = cursorPos;\n            }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ImageAndRawImage : MonoBehaviour\n{\n[SerializeField] \nprivate Image _image;\n[SerializeField] \nprivate Sprite _sprite;\n[SerializeField] \nprivate RawImage _rawImage;\n[SerializeField] \nprivate Texture _texture;\n    void Start()\n    {\n        _image.sprite = _sprite;\n        _rawImage.texture = _texture;\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ButtonClickExample : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        var button = GetComponent<Button>();\n        button.onClick.AddListener(() =>\n        {\n            Debug.Log(You have clicked the button!);\n        });\n    }\n}\n```", "```cs\n    using UnityEngine;\n    using UnityEngine.UI;\n    using Loxodon.Framework.Views;\n    using Loxodon.Framework.Binding;\n    using Loxodon.Framework.Binding.Builder;\n    using Loxodon.Framework.ViewModels;\n    using TMPro;\n    public class SampleView : Window\n    {\n        [SerializeField]\n        private Button _submitButton;\n        [SerializeField]\n        private TextMeshProUGUI _message;\n        private SampleViewModel _viewModel;\n        protected override void OnCreate(IBundle bundle)\n        {\n            _viewModel = new SampleViewModel();\n            BindingSet<SampleView, SampleViewModel>\n    bindingSet =\n              this.CreateBindingSet(_viewModel);\n            bindingSet.Bind(_message).For(v =>\n              v.text).To(vm => vm.Message).OneWay();\n            bindingSet.Bind(_submitButton).For(v =>\n              v.onClick).To(vm => vm.Submit);\n            bindingSet.Build();\n        }\n    }\n    ```", "```cs\n    using Loxodon.Framework.ViewModels;\n    public class SampleViewModel : ViewModelBase\n    {\n        private string _message;\n        private int _count;\n        public SampleViewModel() { }\n        public string Message\n        {\n            get { return _message; }\n            set => Set<string>(ref _message, value,\n              Message);\n        }\n        public void Submit()\n        {\n            _count++;\n            Message = $The number of times the button is\n              clicked: {_count};\n        }\n    }\n    ```", "```cs\n    public class Startup : MonoBehaviour\n    {\n        private container.Register<IUIViewLocator>(new\n              ResourcesViewLocator ());\n            var bundle = new\n              BindingServiceBundle\n              (_context.GetContainer());\n            bundle.Start();\n        }\n        private IEnumerator Start()\n        {\n            // Create a window container\n            var winContainer =\n              WindowContainer.Create(MAIN);\n            yield return null;\n            IUIViewLocator locator =\n              _context.GetService<IUIViewLocator>();\n            var sampleView =\n              locator.LoadWindow<SampleView>(winContainer,\n              SampleUI);\n            sampleView.Create();\n            ITransition transition =\n              sampleView.Show().OnStateChanged((w, state)\n              =>\n            {\n            });\n            yield return transition.WaitForDone();\n        }\n    }\n    ```"]