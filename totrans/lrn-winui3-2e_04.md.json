["```cs\n    public static IHost HostContainer { get; private set;\n    }\n    ```", "```cs\n    using Microsoft.Extensions.DependencyInjection;\n    using Microsoft.Extensions.Hosting;\n    ```", "```cs\n    private void RegisterComponents()\n    {\n        HostContainer = Host.CreateDefaultBuilder()\n            .ConfigureServices(services =>\n        {\n            services.AddTransient<MainViewModel>();\n        }).Build();\n    }\n    ```", "```cs\n    protected override void\n    OnLaunched(LaunchActivatedEventArgs args)\n    {\n        RegisterComponents();\n        m_window = new MainWindow();\n        m_window.Activate();\n    }\n    ```", "```cs\npublic MainWindow()\n{\n    ViewModel = App.HostContainer.Services\n      .GetService<MainViewModel>();\n    this.InitializeComponent();\n}\npublic MainViewModel ViewModel;\n```", "```cs\n    public void ListViewDoubleTapped(object sender,\n    DoubleTappedRoutedEventArgs args)\n    {\n        AddEdit();\n    }\n    ```", "```cs\n    <ListView Grid.Row=\"1\" ItemsSource=\"{x:Bind\n        ViewModel.Items}\"\n        SelectedItem=\"{x:Bind\n        ViewModel.SelectedMediaItem,\n        Mode=TwoWay}\"\n        DoubleTapped=\"{x:Bind ViewModel\n    Grid inside ListView.ItemTemplate to set the IsHitTestVisible property to False:\n\n    ```", "```cs\n\n    ```", "```cs\n    xmlns:model=\"using:MyMediaCollection.Model\"\n    ```", "```cs\n    public MainPage()\n    {\n        ViewModel = App.HostContainer.Services.GetService\n          <MainViewModel>();\n        this.InitializeComponent();\n    }\n    public MainViewModel ViewModel;\n    ```", "```cs\n    protected override void OnLaunched\n      (LauchActivatedEventArgs args)\n    {\n        m_window = new MainWindow();\n        var rootFrame = new Frame();\n        RegisterComponents();\n        rootFrame.NavigationFailed +=\n          RootFrame_NavigationFailed;\n        rootFrame.Navigate(typeof(MainPage), args);\n        m_window.Content = rootFrame;\n        m_window.Activate();\n    }\n    private void RootFrame_NavigationFailed(object sender,\n      NavigationFailedEventArgs e)\n    {\n        throw new Exception($\"Error loading page\n          {e.SourcePageType.FullName}\");\n    }\n    ```", "```cs\n    using System;\n    using Microsoft.UI.Xaml;\n    using Microsoft.UI.Xaml.Controls;\n    using Microsoft.UI.Xaml.Navigation;\n    using MyMediaCollection.Views;\n    ```", "```cs\n    <Page.Resources>\n        <Style x:Key=\"AttributeTitleStyle\"\n          TargetType=\"TextBlock\">\n            <Setter Property=\"HorizontalAlignment\"\n              Value=\"Right\"/>\n            <Setter Property=\"VerticalAlignment\"\n              Value=\"Center\"/>\n        </Style>\n        <Style x:Key=\"AttributeValueStyle\"\n           TargetType=\"TextBox\">\n            <Setter Property=\"HorizontalAlignment\"\n              Value=\"Stretch\"/>\n            <Setter Property=\"Margin\" Value=\"8\"/>\n        </Style>\n        <Style x:Key=\"AttributeComboxValueStyle\"\n           TargetType=\"ComboBox\">\n            <Setter Property=\"HorizontalAlignment\"\n              Value=\"Stretch\"/>\n            <Setter Property=\"Margin\" Value=\"8\"/>\n        </Style>\n    </Page.Resources>\n    ```", "```cs\n    <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\"/>\n        <RowDefinition Height=\"*\"/>\n        <RowDefinition Height=\"Auto\"/>\n    </Grid.RowDefinitions>\n    ```", "```cs\n    <TextBlock Text=\"Item Details\" FontSize=\"18\"\n    Margin=\"8\"/>\n    ```", "```cs\n    <Grid Grid.Row=\"1\">\n        <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"Auto\"/>\n            <RowDefinition Height=\"Auto\"/>\n        </Grid.RowDefinitions>\n        <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"200\"/>\n            <ColumnDefinition Width=\"*\"/>\n        </Grid.ColumnDefinitions>\n        <TextBlock Text=\"Name:\" Style=\"{StaticResource\n          AttributeTitleStyle}\"/>\n        <TextBox Grid.Column=\"1\"\n            Style=\"{StaticResource AttributeValueStyle}\"\n            Text=\"{x:Bind ViewModel.ItemName, Mode=TwoWay,\n    UpdateSourceTrigger=PropertyChanged}\"/>\n        <TextBlock Text=\"Media Type:\" Grid.Row=\"1\"\n            Style=\"{StaticResource AttributeTitleStyle}\"/>\n        <ComboBox Grid.Row=\"1\" Grid.Column=\"1\"\n            Style=\"{StaticResource AttributeCombox\n              ValueStyle}\"\n            ItemsSource=\"{x:Bind ViewModel.ItemTypes}\"\n            SelectedValue=\"{x:Bind ViewModel\n              .SelectedItemType, Mode=TwoWay}\"/>\n        <TextBlock Text=\"Medium:\" Grid.Row=\"2\"\n            Style=\"{StaticResource AttributeTitleStyle}\"/>\n        <ComboBox Grid.Row=\"2\" Grid.Column=\"1\"\n            Style=\"{StaticResource\n              AttributeComboxValueStyle}\"\n            ItemsSource=\"{x:Bind ViewModel.Mediums}\"\n            SelectedValue=\"{x:Bind ViewModel\n              .SelectedMedium, Mode=TwoWay}\"/>\n        <TextBlock Text=\"Location:\" Grid.Row=\"3\"\n            Style=\"{StaticResource AttributeTitleStyle}\"/>\n        <ComboBox Grid.Row=\"3\" Grid.Column=\"1\"\n            Style=\"{StaticResource\n              AttributeComboxValueStyle}\"\n            ItemsSource=\"{x:Bind ViewModel.LocationTypes}\"\n            SelectedValue=\"{x:Bind ViewModel\n              .SelectedLocation,Mode=TwoWay}\"/>\n    </Grid>\n    ```", "```cs\n    <StackPanel Orientation=\"Horizontal\"\n            Grid.Row=\"2\" HorizontalAlignment=\"Right\">\n        <Button Content=\"Save\" Margin=\"8,8,0,8\"\n            Command=\"{x:Bind ViewModel.SaveCommand}\"/>\n        <Button Content=\"Cancel\" Margin=\"8\"\n            Command=\"{x:Bind ViewModel.CancelCommand}\"/>\n    </StackPanel>\n    ```", "```cs\npublic interface INavigationService\n{\nstring CurrentPage { get; }\nvoid NavigateTo(string page);\nvoid NavigateTo(string page, object parameter);\nvoid GoBack();\n}\n```", "```cs\nprivate readonly IDictionary<string, Type> _pages = new\nConcurrentDictionary<string, Type>();\n```", "```cs\npublic void Configure(string page, Type type)\n{\n    if (_pages.Values.Any(v => v == type))\n    {\n        throw new ArgumentException($\"The {type.Name} view\n          has already been registered under another\n            name.\");\n    }\n    _pages[page] = type;\n}\n```", "```cs\npublic void NavigateTo(string page)\n{\n    NavigateTo(page, null);\n}\npublic void NavigateTo(string page, object parameter)\n{\n    if (!_pages.ContainsKey(page))\n    {\n        throw new ArgumentException($\"Unable to find a page\n          registered with the name {page}.\");\n    }\n    AppFrame.Navigate(_pages[page], parameter);\n}\npublic void GoBack()\n{\n    if (AppFrame?.CanGoBack == true)\n    {\n        AppFrame.GoBack();\n    }\n}\n```", "```cs\npublic interface IDataService\n{\n    IList<MediaItem> GetItems();\n    MediaItem GetItem(int id);\n    int AddItem(MediaItem item);\n    void UpdateItem(MediaItem item);\n    IList<ItemType> GetItemTypes();\n    Medium GetMedium(string name);\n    IList<Medium> GetMediums();\n    IList<Medium> GetMediums(ItemType itemType);\n    IList<LocationType> GetLocationTypes();\n    int SelectedItemId { get; set; }\n}\n```", "```cs\nprivate IList<MediaItem> _items;\nprivate IList<ItemType> _itemTypes;\nprivate IList<Medium> _mediums;\nprivate IList<LocationType> _locationTypes;\npublic int SelectedItemId { get; set; }\n```", "```cs\nvar cd = new MediaItem\n{\n    Id = 1,\n    Name = \"Classical Favorites\",\n    MediaType = ItemType.Music,\n    MediumInfo = _mediums.FirstOrDefault(m => m.Name ==\n      \"CD\"),\n    Location = LocationType.InCollection\n};\nvar book = new MediaItem\n{\n    Id = 2,\n    Name = \"Classic Fairy Tales\",\n    MediaType = ItemType.Book,\n    MediumInfo = _mediums.FirstOrDefault(m => m.Name ==\n      \"Hardcover\"),\n    Location = LocationType.InCollection\n};\nvar bluRay = new MediaItem\n{\n    Id = 3,\n    Name = \"The Mummy\",\n    MediaType = ItemType.Video,\n    MediumInfo = _mediums.FirstOrDefault(m => m.Name ==\n      \"Blu Ray\"),\n    Location = LocationType.InCollection\n};\n```", "```cs\n_items = new List<MediaItem>\n{\n    cd,\n    book,\n    bluRay\n};\n```", "```cs\npublic IList<Medium> GetMediums(ItemType itemType)\n{\n    return _mediums\n        .Where(m => m.MediaType == itemType)\n        .ToList();\n}\n```", "```cs\npublic int AddItem(MediaItem item)\n{\n    item.Id = _items.Max(i => i.Id) + 1;\n    _items.Add(item);\n    return item.Id;\n}\npublic void UpdateItem(MediaItem item)\n{\n    var idx = -1;\n    var matchedItem = (from x in _items\n                       let ind = idx++\n                       where x.Id == item.Id\n                       select ind).FirstOrDefault();\n    if (idx == -1)\n    {\n        throw new Exception(\"Unable to update item. Item\n          not found in collection.\");\n    }\n    _items[idx] = item;\n}\n```", "```cs\nprivate IServiceProvider RegisterServices(Frame rootFrame)\n{\nvar navigationService = new NavigationService(rootFrame);\nnavigationService.Configure(nameof(MainPage),\ntypeof(MainPage));\nnavigationService.Configure(nameof(ItemDetailsPage),\ntypeof(ItemDetailsPage));\nHostContainer = Host.CreateDefaultBuilder()\n    .ConfigureServices(services =>\n    {\n        services.AddSingleton<INavigationService>\n          (navigationService);\n        services.AddSingleton<IDataService, DataService>();\n        services.AddTransient<MainViewModel>();\n        services.AddTransient<ItemDetailsViewModel>();\n    }).Build();\n}\n```", "```cs\n    private INavigationService _navigationService;\n    private IDataService _dataService;\n    ```", "```cs\n    public MainViewModel(INavigationService\n    navigationService, IDataService dataService)\n    {\n        _navigationService = navigationService;\n        _dataService = dataService;\n        PopulateData();\n    }\n    ```", "```cs\n    public void PopulateData()\n    {\n        items.Clear();\n        foreach(var item in _dataService.GetItems())\n        {\n            items.Add(item);\n        }\n        allItems = new\n        ObservableCollection<MediaItem>(Items);\n        mediums = new ObservableCollection<string>\n        {\n            AllMediums\n        };\n        foreach(var itemType in _dataService\n          .GetItemTypes())\n        {\n            mediums.Add(itemType.ToString());\n        }\n        selectedMedium = Mediums[0];\n    }\n    ```", "```cs\n    private void AddEdit()\n    {\n        var selectedItemId = -1;\n        if (SelectedMediaItem != null)\n        {\n            selectedItemId = SelectedMediaItem.Id;\n        }\n        _navigationService.NavigateTo(\"ItemDetailsPage\",\n          selectedItemId);\n    }\n    ```", "```cs\nprotected override void OnNavigatedTo(NavigationEventArgs\ne)\n{\n    base.OnNavigatedTo(e);\n    var itemId = (int)e.Parameter;\n    if (itemId > 0)\n    {\n        ViewModel.InitializeItemDetailData(itemId);\n    }\n}\n```", "```cs\npublic ItemDetailsViewModel(INavigationService\n  navigationService, IDataService dataService)\n{\n    _navigationService = navigationService;\n    _dataService = dataService;\n    PopulateLists();\n}\n```", "```cs\npublic void InitializeItemDetailData(int itemId)\n{\n    _selectedItemId = itemId;\n    PopulateExistingItem(_dataService);\n    IsDirty = false;\n}\n```", "```cs\nprivate void PopulateExistingItem(IDataService dataService)\n{\n    if (_selectedItemId > 0)\n    {\n        var item = _dataService.GetItem(_selectedItemId);\n        Mediums.Clear();\n        foreach (string medium in dataService.GetMediums\n          (item.MediaType).Select(m => m.Name))\n            Mediums.Add(medium);\n        _itemId = item.Id;\n        ItemName = item.Name;\n        SelectedMedium = item.MediumInfo.Name;\n        SelectedLocation = item.Location.ToString();\n        SelectedItemType = item.MediaType.ToString();\n    }\n}\nprivate void PopulateLists()\n{\n    ItemTypes.Clear();\n    foreach (string iType in Enum.GetNames\n      (typeof(ItemType)))\n        ItemTypes.Add(iType);\n    LocationTypes.Clear();\n    foreach (string lType in Enum.GetNames\n      (typeof(LocationType)))\n        LocationTypes.Add(lType);\n    Mediums = new TestObservableCollection<string>();\n}\n```", "```cs\npartial void OnSelectedItemTypeChanged(string value)\n{\n    IsDirty = true;\n    Mediums.Clear();\n    if (!string.IsNullOrWhiteSpace(value))\n    {\n        foreach (string med in _dataService.GetMediums\n          ((ItemType)Enum.Parse(typeof(ItemType),\n            SelectedItemType)).Select(m => m.Name))\n            Mediums.Add(med);\n    }\n}\n```", "```cs\nprivate void Save()\n{\n    MediaItem item;\n    if (_itemId > 0)\n    {\n        item = _dataService.GetItem(_itemId);\n        item.Name = ItemName;\n        item.Location = (LocationType)Enum.Parse\n          (typeof(LocationType), SelectedLocation);\n        item.MediaType = (ItemType)Enum.Parse(typeof\n          (ItemType), SelectedItemType);\n        item.MediumInfo = _dataService.GetMedium\n          (SelectedMedium);\n        _dataService.UpdateItem(item);\n    }\n    else\n    {\n        item = new MediaItem\n        {\n            Name = ItemName,\n            Location = (LocationType)Enum.Parse\n              (typeof(LocationType), SelectedLocation),\n            MediaType = (ItemType)Enum.Parse(typeof\n              (ItemType), SelectedItemType),\n            MediumInfo = _dataService.GetMedium\n              (SelectedMedium)\n        };\n        _dataService.AddItem(item);\n    }\n    _navigationService.GoBack();\n}\nprivate void Cancel()\n{\n    _navigationService.GoBack();\n}\n```", "```cs\npublic ItemDetailsPage()\n{\n    ViewModel = App.HostContainer.Services.GetService\n      <ItemDetailsViewModel>();\n    this.InitializeComponent();\n}\npublic ItemDetailsViewModel ViewModel;\n```"]