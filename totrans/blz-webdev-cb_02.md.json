["```cs\n    @page \"/ch02r01\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    @code {\n        protected string User = string.Empty;\n    }\n    ```", "```cs\n    <h3>What's your name?</h3>\n    <input class=\"form-control w-50\" @bind=\"@User\" />\n    ```", "```cs\n    @if (string.IsNullOrWhiteSpace(User)) return;\n    <hr />\n    <h1>Hello @User!</h1>\n    ```", "```cs\n    protected string User = string.Empty,\n                     Greeting = string.Empty;\n    ```", "```cs\n    private bool IsGreetingReady\n        => !string.IsNullOrWhiteSpace(Greeting);\n    private bool IsUserFilled\n        => !string.IsNullOrWhiteSpace(User);\n    ```", "```cs\n    private void SayHello() => Greeting = $\"Hello {User}\";\n    ```", "```cs\n    <input class=\"form-control w-50\"\n           @bind=\"@User\"\n           @bind:event=\"oninput\" />\n    ```", "```cs\n    <input class=\"form-control w-50\" @bind=\"@User\"\n           @bind:event=\"oninput\"\n           @onfocusout=\"@SayHello\" />\n    ```", "```cs\n    @if (IsGreetingReady)\n    {\n        <h1>@Greeting</h1>\n        return;\n    }\n    @if (IsUserFilled)\n    {\n        <h1>Introducing @User...</h1>\n    }\n    ```", "```cs\npublic void OnDragging(DragEventArgs args) { /*...*/ }\n```", "```cs\npublic void OnFileInput(InputFileChangeEventArgs args)\n{\n    var droppedFile = args.File;\n    // ...\n}\n```", "```cs\n    builder.Services.AddTransient<SuggestionsApi>();\n    ```", "```cs\n    @code {\n        protected string User = string.Empty;\n    }\n    ```", "```cs\n    [Inject] private SuggestionsApi Api { get; init; }\n    protected IList<string> Suggestions = [];\n    ```", "```cs\n    private async Task AutocompleteAsync()\n    {\n        Suggestions = string.IsNullOrWhiteSpace(User) ?\n            [] : await Api.FindAsync(User);\n        await InvokeAsync(StateHasChanged);\n    }\n    ```", "```cs\n    <input class=\"form-control w-50\" @bind=@User\n           @bind:event=\"oninput\"\n           @bind:after=\"@AutocompleteAsync\" />\n    ```", "```cs\n    <hr />\n    @if (!Suggestions.Any()) return;\n    ```", "```cs\n    <h5>Did you mean?</h5>\n    @foreach (var name in Suggestions)\n    {\n        <div>@name</div>\n    }\n    ```", "```cs\n    @code {\n        [Inject] private SuggestionsApi Api { get; init; }\n    }\n    ```", "```cs\n    public partial class IntroduceYourself\n    {\n        [Inject] private SuggestionsApi Api { get; init; }\n    }\n    ```", "```cs\n    public partial class IntroduceYourself(\n        SuggestionsApi Api) { }\n    ```", "```cs\n    @page \"/ch02r01\"\n    @inject SuggestionsApi Api\n    ```", "```cs\n    <input class=\"form-control w-50\" @bind:event=\"oninput\"\n           @bind:get=\"@User\"\n           @bind:set=\"@AutocompleteAsync\" />\n    ```", "```cs\n    private async Task AutocompleteAsync(string value)\n    {\n        User = value;\n        Suggestions = string.IsNullOrWhiteSpace(User) ?\n            [] : await Api.FindAsync(User);\n        await InvokeAsync(StateHasChanged);\n    }\n    ```", "```cs\nprivate string _userName;\npublic string UserName\n{\n    get => _userName;\n    set => _userName = value;\n}\n```", "```cs\n    @using BlazorCookbook.App.Client.Chapters.Chapter02.Data\n    ```", "```cs\n    [Parameter]\n    public string Name { get; set; }\n    [Parameter]\n    public EventCallback<string> NameChanged { get; set; }\n    ```", "```cs\n    [Parameter]\n    public SkillLevel Skill { get; set; }\n    [Parameter]\n    public EventCallback<SkillLevel> SkillChanged { get; set; }\n    ```", "```cs\n    private Task OnNameChanged()\n        => NameChanged.InvokeAsync(Name);\n    ```", "```cs\n    private Task OnSkillChanged(ChangeEventArgs args)\n    {\n        var id = int.Parse(args.Value.ToString());\n        var skill = DataSeed.SkillLevels\n            .SingleOrDefault (it => it.Id == id);\n        return SkillChanged.InvokeAsync(skill);\n    }\n    ```", "```cs\n    <h5>What's your name?</h5>\n    <input class=\"form-control w-50 mb-1\" @bind=\"@Name\"\n           @bind:event=\"oninput\"\n           @bind:after=@OnNameChanged />\n    ```", "```cs\n    <h5>What's your skill level?</h5>\n    <select class=\"form-control w-50 mb-1\"\n            @onchange=\"@OnSkillChanged\">\n        <option value=\"0\">-</option>\n        @foreach (var level in DataSeed.SkillLevels)\n        {\n            <option value=\"@level.Id\">\n                @level.Title\n            </option>\n        }\n    </select>\n    ```", "```cs\n    @using BlazorCookbook.App.Client.Chapters.Chapter02.Data\n    @page \"/ch02r05\"\n    @rendermode InteractiveWebAssembly\n    ```", "```cs\n    protected string Name { get; set; }\n    protected SkillLevel Skill { get; set; }\n    ```", "```cs\n    private bool IsGreetingReady\n        => !string.IsNullOrWhiteSpace(Name)\n        && Skill is not null;\n    ```", "```cs\n    <IntroductionForm @bind-Name=\"@Name\"\n                      @bind-Skill=\"@Skill\" />\n    ```", "```cs\n    <hr />\n    @if (!IsGreetingReady) return;\n    <h5>Welcome @Name on level @Skill.Title!</h5>\n    ```", "```cs\n    builder.Services.AddTransient<SuggestionsApi>();\n    ```", "```cs\n    @rendermode InteractiveWebAssembly\n    @implements IDisposable\n    ```", "```cs\n    private Timer _debounceTimer;\n    private readonly TimeSpan\n        _throttle = TimeSpan.FromMilliseconds(500),\n        _timeout = TimeSpan.FromMinutes(1);\n    ```", "```cs\n    private void OnUserInput()\n    {\n        _debounceTimer?.Dispose();\n        _debounceTimer = new Timer(\n            _ => InvokeAsync(AutocompleteAsync),\n            null, _throttle, _timeout);\n    }\n    ```", "```cs\n    public void Dispose() => _debounceTimer?.Dispose();\n    ```", "```cs\n    <input class=\"form-control w-50\" @bind=@User\n           @bind:event=\"oninput\"\n           @bind:after=\"@OnUserInput\" />\n    ```"]