- en: Chapter 4. Prepare Your Brushes – Drawing Basic Shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to use Cinder for drawing different basic
    shapes. The shapes are basic but you can create fairly complicated images by combining
    these shapes. We will go through the available drawing methods one by one and
    try them out.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing your workspace
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open TinderBox (`yourCinderPath/tools/TinderBox`) and create a new project
    with the name `BasicShapes`. This time enter `BasicShapes` as **Naming Prefix**.
    Create it somewhere safe and open up `xcode/BasicShapes.xcodeproj`. Windows users
    should open the project file from `vc10\BasicShapes.sln`. Open `BasicShapesApp.cpp`
    in the editor and navigate to a place in code that looks similar to the following
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is the implementation of the main drawing method of the application. Just
    one line of code is executed here (`gl::clear( Color( 0, 0, 0 ) );`) and as it
    is already said in the comment preceding it that it clears out the color buffer
    with black, and it essentially means everything that has been drawn before in
    the previous `draw()` loop is replaced with black.
  prefs: []
  type: TYPE_NORMAL
- en: The `draw()` method is being executed once per frame. The default frame rate
    in Cinder is 30 frames per second. So the background is cleared 30 times per second.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s try to change the color of the background! As you can see, you have
    to pass a `Color` parameter to the `gl::clear()` function. In this case the `Color`
    object consists of three parameters that define the color in the RGB color system.
    In the `Color( 0, 0, 0 )` parameter there are three zeroes inside the brackets.
    The first one defines the amount of red color, second is for green, and third
    is for blue respectively. Let''s say we want the background to be red. Then, we
    have to pass `1` as the first parameter for the color. It should look similar
    to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile and run the project to see if we succeeded. You should see a window
    with a bright-red background. Colors in Cinder are defined as numbers from 0 to
    1\. So if you don''t want the background to be so bright, try this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Compile and run the project again. You should see a lesser bright-red background
    now. Nice! Now let's give yellow color to the background. We will need to change
    two of the `Color` parameters to do this as there is no separate parameter for
    the amount of yellow color in the RGB color system. When we look at the color
    wheel, we can see that yellow resides there between red and green. When we examine
    the space between these colors closely, you will see that, red becomes orange,
    orange becomes yellow, and yellow becomes green.
  prefs: []
  type: TYPE_NORMAL
- en: 'So we have to mix the two colors in the same amount to get the yellow color.
    In code it will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile and run the project. Good work! You will now see a nice, bright yellow
    background. Let''s do one last adjustment to it and change it to white. To do
    so, we have to set all the RGB components to their maximum values. As we know
    from the world of physics that white color consists of all the visible light wavelengths
    and when we shoot a white light beam through a glass prism, we get a rainbow—a
    full visible color spectrum. When we combine all the colors of the spectrum together
    in the same amount, we get white:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, we have a nice white background. Let's draw something on it!
  prefs: []
  type: TYPE_NORMAL
- en: Drawing lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s change our background to black again and add the following lines of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile and run the project to see what happens. You should see a relatively
    short white line on the screen. This is what the function `gl::drawLine()` just
    did. As we can see, there are two parameters that have to be passed to it. The
    first one represents the start coordinates of the line, the second one defines
    the end coordinates of the line. These two points are defined as `Vec2f` objects.
    It is possible to tell from the name of these objects that they are vectors that
    store two float values. These are vectors that can be used in a two-dimensional
    space. `Vec2f(0,0)` represents a point in the two-dimensional space that resides
    at the top-left corner of the screen. Let''s draw two diagonal lines across the
    whole window. Add the following code instead of `gl::drawLine( Vec2f(0,0), Vec2f(100,100)
    );`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: As you can see we used two new methods here, `getWindowWidth()` and `getWindowHeight()`,
    which are meant for determining the window size while the application is running.
    It is a very handy way of drawing graphics that can be independent from the window
    size. Instead of changing the parameters manually each time we decide to change
    our application window size. We can just place the `getWindowWidth()` and `getWindowHeight()`
    methods in place of the parameters and the graphics will be adjusted automatically
    whenever the application window is being resized.
  prefs: []
  type: TYPE_NORMAL
- en: Compile and run the application and try to change the size of the window by
    dragging its lower-right corner—the lines should adjust to the new window size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Doing this is good but what if we need the lines to be in a color other than
    white? How about cyan? No problem! Add the following line of code before the `drawLine()`
    calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com) . If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/](http://www.packtpub.com/)support
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'That was not so hard. We just have to remember to change the color (if we want
    to) before we call a function that is supposed to draw something. So if we want
    to draw one line in red and another in cyan, we do it in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'So now we know how to change the color of the lines. How about changing the
    thickness? No problem! Place the following line of code before the line draw calls:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'So now our lines are being drawn with the thickness of `10` pixels. Compile
    and run the project to see how it looks. Now you should see the lines as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing lines](img/9564_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is the full draw method, if you failed to understand something
    before (I have changed the line width to `2` in the following code):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Drawing circles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'How about adding some circles to the composition? Add the following lines after
    the last `drawLine` call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: After you compile and run the application, you should see a circle in the middle
    of the screen. The `drawSolidCircle()` function takes two parameters. First is
    the position of the center of the circle. Second is the radius of the circle.
    We define the position by using the `Vec2f` object again. As you can see, we use
    `getWindowWidth()` and `getWindowHeight()` again. This time we need them to get
    the center coordinates of the screen. We get it by dividing the window's width
    and height by `2`. Again, by using these methods we make sure that our circle
    will be drawn in the middle of the screen no matter what size the window is.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a shorter way to do this though that is by using the `getWindowCenter()`
    method. If we use it, we get the same result but the code looks a bit more clear:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s change the color of the circle to something else. You can chose your
    own color, but I will use magenta this time. Add the following line of code right
    before the `drawSolidCircle()` function call:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Try to experiment with the position, radius, and color of the circle. Try to
    draw more than one shape and also try giving them different colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'What if we want to draw just the outline of the circle? Cinder has a separate
    function for this called `drawStrokedCircle()`. After the `drawSolidCircle()`
    function add another line of code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Similar to the `drawSolidCircle()` function, `drawStrokedCircle()` also takes
    two parameters—position and radius. The difference is just that it draws just
    the outline. The outline has the same thickness that we defined earlier with the
    help of the `glLineWidth()` function. Let''s change it to something else by adding
    the following line of code just before the `drawStrokedCircle()` line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Compile and run the project, and see what happens. You should see a screen
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Drawing circles](img/9564_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is a hidden third parameter for the `drawSolidCircle()` and `drawStrokedCircle()`
    functions. As the circles are drawn by using triangles, each time a circle is
    being drawn, it has to be decided how many triangles to use. Cinder does it automatically
    but it is possible to define the triangle count by ourselves. So let''s change
    the amount of triangle segments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Note the highlighted parts of the code. We told the circle drawing functions
    to draw circles by using just five triangles. By doing this we get pentagons instead
    of circles. Compile and run the project to see it yourself!
  prefs: []
  type: TYPE_NORMAL
- en: Try to experiment with all the properties to get the most out of it. You can
    draw almost any kind of regular polygon shape with this function.
  prefs: []
  type: TYPE_NORMAL
- en: Drawing rectangles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we know how to draw lines and circles, let's move to another geometric
    primitive that we can use—the rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: As in the case of a circle, there is one function for drawing a filled rectangle
    and one function for drawing just the outline. They are `drawSolidRect()` and
    `drawStrokedRect()` respectively.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Here we draw two rectangles, one filled (or solid) and one as an outline. Note
    that we pass just one parameter of the type `Rectf` to both the functions. The
    simplest version of `Rectf` is being constructed by using the coordinates of top-left
    and bottom-right corners of the rectangle. Most of the drawing APIs use x and
    y coordinates of the top-left corner and the width and height of the rectangle,
    so it could be a bit difficult to get used to this.
  prefs: []
  type: TYPE_NORMAL
- en: Other useful drawing functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the very basic drawing functions, and actually you can do a lot with
    them if you use them in a creative way. But here are a couple of other functions
    that are worth checking out. They are given in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Experiment with the properties of these functions to fully understand what
    they mean. Compile and run the project and you should see an image similar to
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Other useful drawing functions](img/9564_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Try to re-size the window by dragging the bottom right corner. You will see
    the difference between graphics that are drawn relative to the window's size and
    the ones that are not. Keep this in mind when creating your own application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the full code for drawing all the shapes, in case you did
    not understand which line of code goes where:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: That's it! This is one of the simplest way to draw basic shapes with Cinder.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we went through the most essential drawing functions in Cinder.
    You can draw a lot with these. However, there are limitations of what can be done
    with them. If you need to draw something really complex and it has to perform
    well or extremely well, consider obtaining some OpenGL knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Here you can find a full list of drawing functions that are currently available
    in Cinder at [http://libcinder.org/docs/v0.8.4/namespacecinder_1_1gl.html](http://libcinder.org/docs/v0.8.4/namespacecinder_1_1gl.html).
    On the web page, scroll down to the functions section and look at functions that
    start with "draw".
  prefs: []
  type: TYPE_NORMAL
- en: We will use some of the functions from this list in the next chapters, so this
    is not the only place where we use drawing.
  prefs: []
  type: TYPE_NORMAL
