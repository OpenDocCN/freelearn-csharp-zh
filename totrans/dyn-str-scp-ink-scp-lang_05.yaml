- en: '*Chapter 4*: Variables, Lists, and Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第四章*：变量、列表和函数'
- en: This chapter builds on multiple concepts that were introduced in [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*,*
    *Knots, Diverts, and Looping Patterns*. In the first topic, we will examine how
    the keyword `VAR` works with a single value in ink, and how it can be combined
    with `LIST` keyword.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于在[*第二章*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*、*结、转向和循环模式*中引入的多个概念。在第一个主题中，我们将检查关键字
    `VAR` 在墨水中与单个值的结合方式，以及它如何与 `LIST` 关键字结合使用。
- en: In ink, we can group variables into a concept called a list. We will also examine
    how to create and change the values that are part of a list. We will then review
    when they are best used in a project and situations where multiple, single variables
    might work better. This discussion will move us on to the next topic, where we
    will look at working with functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在墨水中，我们可以将变量组合成一个称为列表的概念。我们还将检查如何创建和更改列表中的值。然后，我们将回顾它们在项目中最佳的使用情况以及可能更适合多个单独变量的情况。这次讨论将引导我们进入下一个主题，我们将探讨如何使用函数。
- en: Values that are part of a list can be changed by other concepts called **functions**.
    In the third topic, we will *call* some of the built-in functions to work with
    different list values. These will allow us to perform actions across a list, such
    as determining the number of entries or picking one out at random. Working with
    functions will help us prepare for the next step, which is creating functions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的值可以通过称为**函数**的其他概念进行更改。在第三个主题中，我们将调用一些内置函数来处理不同的列表值。这将允许我们在列表上执行操作，例如确定条目数量或随机选择一个。使用函数将帮助我们为下一步做准备，即创建函数。
- en: In the last topic, we will explore how to create our functions in ink. As we
    will see, functions allow us to define small tasks or series of actions we can
    use multiple times by calling the created function. Functions, as we will learn,
    are special forms of **knots** in ink. This means we can send data to a function
    as well as a knot. However, only functions can return data.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个主题中，我们将探讨如何在墨水中创建我们的函数。正如我们将看到的，函数允许我们定义小任务或一系列动作，我们可以通过调用创建的函数多次使用。我们将了解到，函数是墨水中**结**的特殊形式。这意味着我们可以向函数以及结发送数据。然而，只有函数可以返回数据。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Storing values using `VAR`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `VAR` 存储值
- en: Working with `LIST`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `LIST`
- en: Calling functions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用函数
- en: Making new functions and calling knots
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新函数和调用结
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub: [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter4](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter4).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例，在 `*.ink` 文件中，可以在GitHub上找到：[https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter4](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter4)。
- en: Storing values using VAR
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VAR 存储值
- en: 'In [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031), *Knots, Diverts,
    and Looping Patterns*, variables were introduced as a part of using labeled options
    within the weaves of looping structures in ink. By creating a label, an option
    could record whether it had been shown before. This allowed us to keep track of
    the number of loops within a knot easily. Within ink, labeled options are one
    form of a more general concept for storing and changing any kind of value. This
    more general form uses a special keyword: **VAR**.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第二章*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)“结、转向和循环模式”中，变量作为在墨水循环结构编织中使用标记选项的一部分被引入。通过创建一个标签，一个选项可以记录它是否之前已经被展示过。这使得我们能够轻松地跟踪结内的循环数量。在墨水中，标记选项是存储和更改任何类型值的一般概念的一种形式。这种更一般的形式使用一个特殊的关键字：**VAR**。
- en: 'The `VAR` keyword creates a variable that''s capable of storing different types
    of data. Variables created with the `VAR` keyword can store numbers (including
    decimal values), `true` or `false` values), and even diverts. Variables created
    using the `VAR` keyword are also *global*: they can be accessed by any code that
    is part of the overall project.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`VAR` 关键字创建了一个能够存储不同类型数据的变量。使用 `VAR` 关键字创建的变量可以存储数字（包括小数）、`true` 或 `false`
    值，甚至转向。使用 `VAR` 关键字创建的变量也是**全局的**：它们可以被任何属于整体项目的代码访问。'
- en: 'Variable names that use the `VAR` keyword in ink follow the same rules as that
    of knots and stitches:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ink 中使用 `VAR` 关键字的变量名遵循结和针的相同规则：
- en: They can contain numbers.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以包含数字。
- en: They can contain uppercase and lowercase letters.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们可以包含大写和小写字母。
- en: The only special symbol that's allowed is an underscore.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用的唯一特殊符号是下划线。
- en: 'Like the naming conventions for knots and stitches, an underscore is often
    used between words within the name of the variable:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于结和针的命名规范，变量名中的单词之间通常使用下划线分隔：
- en: 'Example 1 (Example1.ink):'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 1 (Example1.ink):'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Variables are given values by an operation called `=`) to assign the variable
    the value following the sign on the same line. It is common to include a single
    space between the name of the variable, the equals sign (`=`), and the value being
    assigned to the variable.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的值通过称为 `=` 的操作来赋予，将变量赋值为同一行上的符号之后的值。在变量名、等号（`=`）和分配给变量的值之间包含一个空格是常见的。
- en: 'There is one explicit rule that must always be followed when using the `VAR`
    keyword and assigning a variable its initial value: whatever the value is, it
    must be static. In ink, this means that the first assignment of any variable cannot
    be a combination of other, existing values or the result of code performing mathematical
    operations.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `VAR` 关键字和为变量分配初始值时，必须始终遵循的一个明确规则是：无论值是什么，它都必须是静态的。在 ink 中，这意味着任何变量的第一次赋值不能是其他现有值的组合或执行数学运算的代码的结果。
- en: Once created, however, the value of the variable can be changed, but the initial
    assignment must always exist first and not be the result of any computation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一旦创建，变量的值可以更改，但初始赋值必须始终存在，并且不能是任何计算的任何结果。
- en: In this topic, we will learn how to show and change variable values. Because
    alternatives (covered in [*Chapter 3*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048),
    *Sequences, Cycles, and Shuffling Text*) produce values, we will also explore
    how to save what they produce and use that value as part of additional code.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将学习如何显示和更改变量值。因为替代方案（在第 [*第 3 章*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048)，*序列、循环和文本洗牌*）产生值，我们还将探讨如何保存它们产生的值，并将该值作为附加代码的一部分使用。
- en: Showing variables
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示变量
- en: 'The use of opening, `{`, and closing, `}`, curly brackets in ink signals the
    use of code. When combined with the name of a variable, ink will substitute the
    value of the variable as part of the surrounding text. This allows an author to
    use variables as part of the text and have ink switch the name of the variable
    with its value in its final output:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ink 中使用开括号 `{` 和闭括号 `}` 花括号表示代码的使用。当与变量名结合使用时，ink 将将变量的值替换为周围文本的一部分。这允许作者将变量作为文本的一部分使用，并在
    ink 的最终输出中将变量的名称与其值进行替换：
- en: 'Example 2 (Example2.ink):'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 2 (Example2.ink):'
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the code in *Example 2* is run, ink creates a variable named `reader_name`.
    Next, it sets the variable to the value of `"Dan"`. When it encounters the text,
    ink understands that the curly brackets are code and switches the name of the
    variable for its value:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当 *示例 2* 中的代码运行时，ink 创建一个名为 `reader_name` 的变量。接下来，它将变量设置为 `"Dan"` 的值。当它遇到文本时，ink
    理解花括号是代码，并将变量的名称替换为其值：
- en: '![Figure 4.1 – Screenshot of ink''s output for Example 2'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.1 – 示例 2 的 ink 输出截图'
- en: '](img/Figure_4.1_B17597.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.1_B17597.jpg)'
- en: Figure 4.1 – Screenshot of ink's output for Example 2
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1 – 示例 2 的 ink 输出截图
- en: 'The use of curly brackets signals the use of *any* code in ink. This means
    that mathematical operations can also be performed inside curly brackets on variables.
    ink will substitute the resulting value as part of the final output, as shown
    in the following example:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 使用花括号表示 ink 中使用任何代码。这意味着数学运算也可以在变量中的花括号内执行。ink 将将结果值作为最终输出的一部分替换，如下例所示：
- en: 'Example 3 (Example3.ink):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 3 (Example3.ink):'
- en: '[PRE2]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In *Example 3*, there are two variables. Each holds a separate, numerical value.
    When ink encounters the use of curly brackets, it substitutes the value of each
    variable with its name. Next, because the curly brackets also contain the addition
    symbol, ink adds the two numbers together:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *示例 3* 中有两个变量。每个变量都持有不同的数值。当 ink 遇到花括号的使用时，它将每个变量的值替换为其名称。接下来，因为花括号还包含加号，ink
    将两个数字相加：
- en: '![Figure 4.2 – Screenshot of ink''s output for Example 3'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.2 – 示例 3 的 ink 输出截图'
- en: '](img/Figure_4.2_B17597.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.2_B17597.jpg)'
- en: Figure 4.2 – Screenshot of ink's output for Example 3
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2 – 示例 3 的 ink 输出截图
- en: 'Depending on the types of data involved, mathematical operations may not always
    produce the expected output based on experiences with other programming and scripting
    languages. For example, operations such as addition (using the plus symbol, `+`),
    subtraction (using the hyphen, `-`), multiplication (using the asterisk, `*`),
    and division (using the forward slash, `/`) will all work on numerical values:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 根据涉及的数据类型，数学运算可能不会总是根据在其他编程和脚本语言中的经验产生预期的输出。例如，加法（使用加号 `+`）、减法（使用连字符 `-`）、乘法（使用星号
    `*`）和除法（使用正斜杠 `/`）都将作用于数值：
- en: 'Example 4 (Example4.ink):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 4 (Example4.ink):'
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Using mathematical operations with numerical and string values will produce
    errors. The only valid way to use mathematic symbols with string values is to
    use the plus symbol (`+`). This performs the **concatenation** operation: when
    a numerical or string value is *added* to an existing string value, it produces
    a new string value, as shown in the following example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数值和字符串值进行数学运算会产生错误。使用数学符号与字符串值的唯一有效方式是使用加号 (`+`)。这执行的是 **连接** 操作：当一个数值或字符串值被
    *添加* 到现有的字符串值时，它会产生一个新的字符串值，如下面的示例所示：
- en: 'Example 5 (Example5.ink):'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 5 (Example5.ink):'
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When the code in *Example 5* is run, ink creates a variable with a string value.
    However, when it encounters text and curly brackets, it does not perform mathematics.
    Instead, it *concatenates* the value of the `example_string` variable with the
    number `3`. This produces a combination of both values in its output:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行 *示例 5* 中的代码时，ink 会创建一个具有字符串值的变量。然而，当它遇到文本和大括号时，它不会执行数学运算。相反，它 *连接* `example_string`
    变量的值和数字 `3`。这在其输出中产生了这两个值的组合：
- en: '![Figure 4.3 – Screenshot of ink''s output for Example 5](img/Figure_4.3_B17597.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3 – ink 为示例 5 生成的输出截图](img/Figure_4.3_B17597.jpg)'
- en: Figure 4.3 – Screenshot of ink's output for Example 5
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3 – ink 为示例 5 生成的输出截图
- en: Let's now move to the next part and understand how to update variables.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在转到下一部分，了解如何更新变量。
- en: Updating variables
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新变量
- en: 'Variables can change values. Once a variable is created in ink using the `VAR`
    keyword, it can be accessed and its value can be changed at any point within the
    same code. However, while ink understands that the initial assignment of a variable
    must be separate from text, we must use a special symbol when changing the value
    of a variable: a tilde (`~`). For example, we can create a variable using the
    `VAR` keyword and then change its value later in the same code:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的值可以改变。一旦在 ink 中使用 `VAR` 关键字创建了一个变量，就可以在任何代码点访问它并更改其值。然而，虽然 ink 理解变量的初始赋值必须与文本分开，但在更改变量值时，我们必须使用一个特殊符号：波浪号
    (`~`)。例如，我们可以使用 `VAR` 关键字创建一个变量，然后在同一代码的稍后部分更改其值：
- en: 'Example 6 (Example6.ink):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 6 (Example6.ink):'
- en: '[PRE5]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If a line of code starts with a tilde (`~`), this lets ink know that some type
    of code will occur on this single line. For example, when an initial value is
    assigned to the variable, ink understands something code-related will be following
    the tilde (`~`).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一行代码以波浪号 (`~`) 开头，这会让 ink 知道该行将发生某种类型的代码。例如，当为变量分配初始值时，ink 理解波浪号 (`~`) 后将跟随与代码相关的某些内容。
- en: We can create variables using the `VAR` keyword and update them with code lines
    starting with a tilde (`~`). However, as we saw in [*Chapter 3*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048),
    *Sequences, Cycles, and Shuffling Text*, **alternatives** allow us to generate
    a value from a set. As we will see in the next section, we can save the generated
    value in variables and use it in later parts of the same code.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `VAR` 关键字创建变量，并使用以波浪号 (`~`) 开头的代码行来更新它们。然而，正如我们在 [*第 3 章*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048)
    *序列、循环和文本洗牌* 中所看到的，**替代方案**允许我们从一组值中生成一个值。正如我们将在下一节中看到的，我们可以将生成的值保存在变量中，并在同一代码的后续部分使用它。
- en: Storing the current values of alternatives
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储替代方案当前值
- en: '**Alternatives** were introduced in [*Chapter 3*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048),
    *Sequences, Cycles, and Shuffling Text*. They are used to generate *alternative*
    text content based on the number of times they had been accessed during looping
    structures. Because alternatives generate text, their output can also be saved
    in variables:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**替代方案**在 [*第 3 章*](B17597_03_Final_PG_ePub.xhtml#_idTextAnchor048) *序列、循环和文本洗牌*
    中被引入。它们用于根据循环结构中它们被访问的次数生成 *替代* 文本内容。因为替代方案生成文本，它们的输出也可以保存在变量中：'
- en: 'Example 7 (Example7.ink):'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 7 (Example7.ink):'
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Instead of needing to rerun an alternative to generate new text, a **shuffle**
    can have its output saved for future use. This allows the value to be incorporated
    into other code without the need to recreate the alternative.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是需要重新运行替代方案来生成新的文本，**洗牌**可以将其输出保存以供将来使用。这允许将值纳入其他代码，而无需重新创建替代方案。
- en: Alternatives generate content when they're run. This means that they cannot
    be used as part of the initial assignment of a variable in ink. The reason for
    this is that ink handles the creation of variables *before* it runs any alternatives.
    The generated values of any alternative do not exist when variables are created
    initially. Because of this, a common pattern is to create a variable with an initial
    value and then overwrite this value with the generated output of an alternative
    later in the code.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 替代方案在运行时生成内容。这意味着它们不能用作ink中变量的初始赋值的一部分。原因在于ink在运行任何替代方案之前处理变量的创建。任何替代方案的生成值在变量最初创建时并不存在。因此，一个常见的模式是创建一个具有初始值的变量，然后在代码的后面用替代方案的生成输出覆盖这个值。
- en: In *Example 7*, quotation marks enclose the use of a shuffle alternative to
    create a string value. When run, the shuffle will generate a value that will then
    become a string, based on the quotation marks around it. As a string value, it
    will then be able to be used with the assignment line with the tilde (`~`).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在*示例7*中，引号包围了使用洗牌替代方案来创建字符串值的使用。当运行时，洗牌将生成一个值，然后根据其周围的引号成为字符串。作为一个字符串值，它将能够与带有波浪号(`~`)的赋值行一起使用。
- en: Saving the output of an alternative in ink always requires at least two lines
    of code. The first is used to create a variable using the `VAR` keyword with its
    initial value, while the second is reassigned its value to what is generated by
    the alternative when the code is run. As was explained in the introduction to
    the *Storing values using VAR* topic, the explicit rule for using the `VAR` keyword
    is that the initial value must exist when the variable is created. The output
    that's produced by an alternative is considered dynamic, and the initial value
    of a variable using the `VAR` keyword must be static.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将替代方案的输出保存到墨迹中通常需要至少两行代码。第一行用于使用`VAR`关键字创建一个变量并赋予其初始值，而第二行则在代码运行时将变量的值重新赋值为替代方案生成的结果。正如在*使用VAR存储值*主题的介绍中所解释的，使用`VAR`关键字的显式规则是变量创建时初始值必须存在。替代方案产生的输出被认为是动态的，使用`VAR`关键字创建的变量的初始值必须是静态的。
- en: In this topic, we worked with single values. We started by creating new variables
    using the `VAR` keyword and then learned how to update their values with lines
    beginning with tildes (`~`). We also explored how the output from an alternative
    can be saved, but that the variable must be set to an initial value and then updated
    to the dynamic output produced by the alternative. In the next topic, we will
    build on the use of variables and create a collection of them using a new keyword
    called `LIST`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们处理了单一值。我们首先使用`VAR`关键字创建新变量，然后学习了如何使用以波浪号(`~`)开头的行来更新它们的值。我们还探讨了如何保存替代方案的输出，但变量必须被设置为初始值，然后更新为替代方案产生的动态输出。在下一个主题中，我们将基于变量的使用，并使用一个新的关键字`LIST`创建它们的集合。
- en: Working with LIST
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '**处理LIST**'
- en: Each use of the `VAR` keyword creates a single value. In many projects, a handful
    of single values would be enough to track anything needed while running. However,
    there are contexts where a set of values might be needed. For these cases, ink
    has a special keyword called **LIST** that creates a *list* of possible values.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每次使用`VAR`关键字都创建一个单一值。在许多项目中，一些单一值就足以在运行时跟踪所需的一切。然而，在某些情况下，可能需要一组值。对于这些情况，ink有一个特殊的名为**LIST**的关键字，它可以创建一个*列表*的可能值。
- en: The values of a list can be thought of as possible *states* of its variable.
    For example, for a `LIST` named `days_of_week`, possible values might be the 7
    days of the week. These could be defined with `LIST` itself and then assigned
    as needed instead of the need to use string values for each day of the week.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的值可以被视为其变量的可能*状态*。例如，对于名为`days_of_week`的`LIST`，可能值可能是每周的7天。这些可以用`LIST`本身定义，然后按需分配，而不是需要为每周的每一天使用字符串值。
- en: In ink, a list defines a new collection of values within the context of the
    project. Once created, the values of a list can act as possible values for other
    variables using the `VAR` keyword.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在ink中，列表在项目上下文中定义了一个新的值集合。一旦创建，列表的值可以作为其他使用`VAR`关键字创建的变量的可能值。
- en: However, while powerful in its ability to create new possible values for variables,
    the values that are created have some limitations and often need extra functionality
    to perform some common operations that are available to other types of data in
    ink. (`LIST` functions will be covered in the *Using LIST functions* section,
    later in this chapter.)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，尽管在创建变量的新可能值方面功能强大，但创建的值有一些限制，并且通常需要额外的功能来执行 ink 中其他数据类型可用的某些常见操作。（`LIST`
    函数将在本章后面的 *使用 LIST 函数* 部分介绍。）
- en: In this topic, we will begin by creating a list of values. We will explore how
    to use the `LIST` keyword to create this collection. Then, we will change the
    values that are part of the collection by following the same pattern that we learned
    about for working with single values.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将从创建一个值列表开始。我们将探讨如何使用 `LIST` 关键字创建这个集合。然后，我们将通过遵循我们学习到的处理单个值的相同模式来更改集合中的值。
- en: Making a LIST
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 LIST
- en: A new list can be created by using the `LIST` keyword. On a line starting with
    the `LIST` keyword, the name of the list is followed by the equals sign (`=`),
    and its values are separated by commas. The name of a list, as with other variables
    in ink, must only contain numbers, letters, and an underscore character. It cannot
    contain other special symbols or spaces.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `LIST` 关键字创建一个新的列表。在以 `LIST` 关键字开头的行上，列表的名称后面跟着等号（`=`），其值由逗号分隔。列表的名称，就像
    ink 中的其他变量一样，只能包含数字、字母和下划线字符。它不能包含其他特殊符号或空格。
- en: 'Unlike the use of the `VAR` keyword, when values are assigned to a list, spaces
    are ignored, including additional new, empty lines between one value and the next.
    Variables that are created by the `VAR` keyword must be defined on a single line.
    The values of a list can be spread across multiple lines:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 `VAR` 关键字不同，当值分配给列表时，空格会被忽略，包括一个值和下一个值之间额外的空行。使用 `VAR` 关键字创建的变量必须在单行上定义。列表的值可以分布在多行上：
- en: 'Example 8 (Example8.ink):'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8（Example8.ink）：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In *Example 8*, a list was created with seven possible values. Next, one of
    its values, `Monday`, was assigned to the variable that was created with the `VAR`
    keyword. Finally, the last line of code shows the value of `day`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *示例 8* 中，创建了一个包含七个可能值的列表。接下来，将其中的一个值，`Monday`，分配给了使用 `VAR` 关键字创建的变量。最后，代码的最后一行显示了
    `day` 的值：
- en: '![Figure 4.4 – Screenshot of ink''s output for Example 8'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.4 – 示例 8 的 ink 输出截图'
- en: '](img/Figure_4.4_B17597.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_4.4_B17597.jpg)'
- en: Figure 4.4 – Screenshot of ink's output for Example 8
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.4 – 示例 8 的 ink 输出截图
- en: Like with a variable created with the `VAR` keyword, the values of a list, once
    created, can also be updated. This follows the pattern that we introduced as part
    of the *Updating variables* section. To update a list or one of its values, as
    we will learn in the next section, a line starting with a tilde (`~`) is needed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用 `VAR` 关键字创建的变量一样，一旦创建，列表的值也可以更新。这遵循我们在 *更新变量* 部分介绍的模式。要更新列表或其值，正如我们将在下一节中学习的，需要以波浪线（`~`）开头的行。
- en: Updating LIST values
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 LIST 值
- en: 'While values, as shown in *Example 8*, can seemingly be shown, the output that
    was created was the name of the value, `Monday`, and not the string, `"Monday"`.
    Regarding the output of a project, this is a small but important difference between
    a variable using the `VAR` keyword and those as part of a collection using the
    `LIST` keyword: only `LIST` values can be added to a list. To add a new value
    to an existing list, it must have been created by itself or another list:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然，如 *示例 8* 所示，值似乎可以显示，但创建的输出是值的名称，`Monday`，而不是字符串，`"Monday"`。关于项目的输出，这是使用 `VAR`
    关键字和作为 `LIST` 关键字集合一部分的变量之间的小但重要的区别：只有 `LIST` 值可以添加到列表中。要向现有列表添加新值，它必须是由自身或其他列表创建的：
- en: 'Example 9 (Example9.ink):'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 9（Example9.ink）：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In *Example 9*, the `Fish` value could be *added* to `current_pets` because
    it was created as part of another list, `all_pets`. This illustrates one of the
    major problems with using values from a list: while they can be very useful for
    introducing new possible values to a project, they must be defined before they
    can be accessed. Any new list is dependent on values that were previously defined
    or created within its assignment. However, it is possible to change the value
    to another type of data in ink:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在*示例 9*中，`Fish`值可以被添加到`current_pets`中，因为它作为另一个列表`all_pets`的一部分被创建。这说明了使用列表中值的一个主要问题：虽然它们对于向项目中引入新的可能值非常有用，但它们必须在可以访问之前被定义。任何新的列表都依赖于之前定义或在其赋值内创建的值。然而，在ink中，可以将值更改为另一种数据类型：
- en: 'Example 10 (Example10.ink):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 10 (Example10.ink):'
- en: '[PRE9]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In *Example 10*, each of the values of the `standing_with_family_members` list
    is also assigned a number. This is allowed in ink and can be a useful way to create
    specific values of a list associated with numerical values in a project. However,
    accessing these numbers requires understanding another ink concept: **functions**.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在*示例 10*中，`standing_with_family_members`列表的每个值也被分配了一个数字。在ink中允许这样做，并且可以是一种创建与项目中的数值相关联的特定列表值的有用方式。然而，访问这些数字需要理解ink的另一个概念：**函数**。
- en: Calling functions
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用函数
- en: '**Functions** are a foundational part of most programming languages. In ink,
    a function is a subset of code that can accept input separated by commas, may
    produce output, and can be accessed through an operation called **calling**.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**函数**是大多数编程语言的基础部分。在ink中，函数是一组代码，可以接受由逗号分隔的输入，可能产生输出，并且可以通过称为**调用**的操作来访问。'
- en: A function is *called* by using its name and then opening (`(`) and closing
    (`)`) parentheses. The operation of calling a function in ink temporarily moves
    the flow of the story to the code of a function and then returns it when the code
    finishes.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 函数通过使用其名称，然后打开(`(`)和关闭(`)`)括号来调用。在ink中调用函数的操作会暂时将故事的流程移动到函数的代码中，并在代码完成后返回。
- en: Note
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Functions can only be called when used within code in ink. This means they either
    appear within opening and closing curly brackets or on lines starting with the
    tilde (~) as part of variable reassignment.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 函数只能在ink中的代码内调用。这意味着它们要么出现在开闭花括号内，要么出现在以波浪号(~)开头的行上，作为变量重新赋值的组成部分。
- en: In this topic, we will start by reviewing some functions that are built into
    ink and how they can help us with common operations. Next, we will look at functions
    that have been designed to work exclusively with values created with the `LIST`
    keyword. These functions perform common operations on a list, such as letting
    us know the number of entries within it or picking a random entry from its collection.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将首先回顾ink中内置的一些函数以及它们如何帮助我们进行常见操作。接下来，我们将查看专门设计用于与使用`LIST`关键字创建的值一起工作的函数。这些函数在列表上执行常见操作，例如告诉我们列表中的条目数量或从其集合中随机选择一个条目。
- en: Common mathematics functions
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见数学函数
- en: One of the most used functions in ink is `RANDOM()`. It accepts a minimum and
    a maximum whole number. It then picks a random number within the range specified.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: ink中最常用的函数之一是`RANDOM()`。它接受一个最小值和一个最大整数值。然后它从这个指定的范围内选择一个随机数字。
- en: 'For many role-playing games, a common need is a number within a certain range,
    such as between 1 and 4 or 1 and 20\. The `RANDOM()` function allows us to set
    a range and then view the outcome:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多角色扮演游戏，一个常见的需求是在一定范围内的数字，例如1到4或1到20。`RANDOM()`函数允许我们设置一个范围，然后查看结果：
- en: 'Example 11 (Example11.ink):'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 11 (Example11.ink):'
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When the *Example 11* code is run, ink will encounter a set of curly brackets.
    It will then see the `RANDOM()` function with a minimum of 1 and a maximum of
    20\. Each time it is run, a different number in this range will be chosen:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行*示例 11*代码时，ink将遇到一组花括号。然后它会看到具有最小值1和最大值20的`RANDOM()`函数。每次运行时，都会选择这个范围内的不同数字：
- en: '![Figure 4.5 – Screenshot of ink''s output for Example 11](img/Figure_4.5_B17597.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5 – ink输出示例 11 的截图](img/Figure_4.5_B17597.jpg)'
- en: Figure 4.5 – Screenshot of ink's output for Example 11
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5 – ink输出示例 11 的截图
- en: 'ink also has functions for converting between different types of numbers. The
    `INT()` function converts a decimal number into a whole (integer) number, while
    the `FLOAT()` function converts an integer into a decimal (float) number. Each
    accepts a single number and produces the output of a different type of number:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: ink 还具有用于在不同类型数字之间进行转换的函数。`INT()` 函数将十进制数字转换为整数（整数）数字，而 `FLOAT()` 函数将整数转换为十进制（浮点）数字。每个函数都接受一个数字并产生不同类型的数字输出：
- en: 'Example 12 (Example12.ink):'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 12 (Example12.ink):'
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The values that are produced by functions can be saved in variables. This allows,
    for example, the use of the `RANDOM()` function and its value, which has been
    saved as part of a variable:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 函数产生的值可以保存在变量中。这允许，例如，使用 `RANDOM()` 函数及其值，该值已作为变量的一部分保存：
- en: 'Example 13 (Example13.ink):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 13 (Example13.ink):'
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The *Example 13* code contains two variables and two uses of the same function.
    As was mentioned at the start of the *Storing values using VAR* topic, variables
    must start with a static value. In the *Example 13* code, each variable is initially
    assigned a value of `0`. They are immediately reassigned a value that's generated
    by the `RANDOM()` function. However, as part of the explicit rule with variables
    that are created using the `VAR` keyword, they must be set to a static value before
    they can be reassigned a dynamic variable that's been generated by a function
    such as `RANDOM()`.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例 13* 代码包含两个变量和两次对同一函数的使用。正如在 *使用 VAR 存储值* 主题开头所提到的，变量必须以静态值开头。在 *示例 13*
    代码中，每个变量最初被赋予 `0` 的值。它们立即被赋予由 `RANDOM()` 函数生成的值。然而，作为使用 `VAR` 关键字创建的变量的显式规则的一部分，它们必须在重新分配由
    `RANDOM()` 等函数生成的动态变量之前被设置为静态值。'
- en: 'When run, the *Example 13* code creates the necessary variables and reassigns
    their values from a call to the `RANDOM()` function with a minimum of `1` and
    a maximum of `6`. When ink encounters the text and use of curly brackets, it adds
    the two values:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行时，*示例 13* 代码创建了必要的变量，并从 `RANDOM()` 函数的调用中重新分配它们的值，最小值为 `1`，最大值为 `6`。当 ink
    遇到文本和大括号的使用时，它会将这两个值相加：
- en: '![Figure 4.6 – Screenshot of ink''s output for Example 13'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 示例 13 的 ink 输出截图](img/Figure_4.6_B17597.jpg)'
- en: '](img/Figure_4.6_B17597.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 4.6 – 示例 13 的 ink 输出截图](img/Figure_4.6_B17597.jpg)'
- en: Figure 4.6 – Screenshot of ink's output for Example 13
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.6 – 示例 13 的 ink 输出截图
- en: Reminder
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Like using a shuffle alternative and the `VAR` keyword, the output of the `RANDOM()`
    function cannot be used as the initial value of a variable. It must be created
    first, and then reassigned the value produced by `RANDOM()`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用洗牌替代方案和 `VAR` 关键字一样，`RANDOM()` 函数的输出不能用作变量的初始值。它必须首先创建，然后才能重新分配 `RANDOM()`
    生成的值。
- en: As we have seen, there are multiple built-in functions in ink for working with
    single values. This is also true of values that are created using the `LIST` keyword.
    In the next section, we will review some of the functions that have been designed
    specifically for lists and their values.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，ink 中有多个内置函数用于处理单个值。这也适用于使用 `LIST` 关键字创建的值。在下一节中，我们将回顾一些专门为列表及其值设计的函数。
- en: Using LIST functions
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 LIST 函数
- en: 'While there are functions that have been designed for a single value, most
    built-in functions in ink are used with a list. These all start with the  `LIST_`
    prefix and have the action or operation they perform or access as the second word.
    For example, to count the number of included values within a list, the `LIST_COUNT()`
    function can be used:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然有针对单个值设计的函数，但 ink 中的大多数内置函数都是与列表一起使用的。这些函数都以 `LIST_` 前缀开头，并且它们执行的操作或访问的内容作为第二个单词。例如，要计算列表中包含的值的数量，可以使用
    `LIST_COUNT()` 函数：
- en: 'Example 14 (Example14.ink):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '示例 14 (Example14.ink):'
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'When run, the *Example 14* code creates a list containing seven values. In
    the curly brackets is a call to the `LIST_COUNT()` function. This function is
    then passed the `days_of_week` list. Based on the lines that were used in the
    assignment of the list, the default assumption would be that the output will be
    `7` based on the number of days in the list. However, this is not the case. Its
    output is `0`:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行时，*示例 14* 代码创建了一个包含七个值的列表。在大括号中是对 `LIST_COUNT()` 函数的调用。然后，该函数将 `days_of_week`
    列表作为参数传递。根据列表赋值中使用的行，默认假设输出将是 `7`，基于列表中的天数。然而，情况并非如此。它的输出是 `0`：
- en: '![Figure 4.7 – Screenshot of ink''s output for Example 14](img/Figure_4.7_B17597.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7 – 示例 14 的 ink 输出截图](img/Figure_4.7_B17597.jpg)'
- en: Figure 4.7 – Screenshot of ink's output for Example 14
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: The output produced by *Example 14* shows a hidden aspect of working with values
    from a list. Technically, all the values for creating a list are known as a `true`
    or `false` and by default, all values are set to `false`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of the `LIST_COUNT()` function *counts* the number of `true` values
    within the list. In *Example 14*, there are none. The count that was produced
    by the function is correct. To change a value from its default of `false` to `true`,
    it needs to be enclosed in opening (`(`) and closing (`)`) parentheses:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 15 (Example15.ink):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In *Example 15*, the output includes the number `7`. This is correct. Each value
    within the list from *Example 14* is now enclosed within its own set of parentheses,
    changing its value from `false` to `true` for each.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: 'For the cases where every value, regardless of being `true` or `false`, is
    wanted from a list, the `LIST_ALL()` function returns *all* values:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 16 (Example16.ink):'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'In *Example 16*, the use of the `LIST_ALL()` function returns all the values
    that are currently part of the `days_of_week` list:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Screenshot of ink''s output for Example 16'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_4.8_B17597.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.8 – Screenshot of ink's output for Example 16
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'The `LIST_RANDOM()` function returns a random entry regarding the total number
    of `true` values in a list, as shown in the following example:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 17 (Example17.ink):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In *Example 17*, only the `Monday`, `Tuesday`, and `Wednesday` values are set
    to `true`. The other values of `days_of_week`, because they are set to `false`
    by default, cannot be accessed by `LIST_RANDOM()`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to the code from *Example 10*, the `LIST_VALUE()` function can be
    used to access any data that''s been assigned to a value as part of a list:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 18 (Example18.ink):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this improved version of *Example 10*, known as *Example 18*, the `LIST_VALUE()`
    function can be used to access the data that's been assigned to the `sister` value.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: While ink has many functions for performing different options, both mathematically
    and with the values of a list, it also provides authors with the ability to create
    their own. In the next topic, we will review how to create and call functions.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: Making new functions and calling knots
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The *Calling functions* topic introduced functions for accepting input, possibly
    producing output, and explained how ink's built-in functions can be called.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: It is also possible to create new functions in ink using the `function` keyword.
    Any new functions created in ink can be used like any others, and they are often
    a useful way to create separate lines of code that can be used across a project
    or multiple times without the need to write the same code again.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we will explore how to create new functions using the `function`
    keyword. We will learn how they can be called, perform a small task, and even
    potentially return data. In [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*,*
    *Knots, Diverts, and Looping Patterns*, we discussed knots initially. Different
    sections of a story are defined by a name. In ink, functions, as we will learn,
    are special types of knots. This relationship means knots can also be *called*
    and *passed* data.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将探讨如何使用`function`关键字创建新的函数。我们将学习它们如何被调用，执行小任务，甚至可能返回数据。在[*第2章*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*，*“结、转向和循环模式”，我们最初讨论了结。故事的不同部分由名称定义。在ink中，函数，正如我们将学习的，是特殊的结类型。这种关系意味着结也可以*被调用*并*传递*数据。
- en: 'A function is created in ink using at least two equals signs (`=`), the `function`
    keyword, the name of the function, and then the opening (`(`) and closing (`)`)
    parentheses, which are put around its input (if any). The name of a function follows
    the same rules as variables and knots: they can contain numbers, letters, and
    an underscore character. They cannot contain other special symbols or spaces.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 函数使用至少两个等号（`=`）、`function`关键字、函数名称，然后是括号（`(` 和 `)`），括号围绕其输入（如果有）。函数的名称遵循与变量和结相同的规则：它们可以包含数字、字母和下划线字符。它们不能包含其他特殊符号或空格。
- en: 'Like variables, functions are also *global* in ink. They can be accessed by
    any other code within the project once they have been created. Because both variables
    and functions are global, a common pattern is to design a function that changes
    a single variable. This allows an author to define an action that takes place
    when calling the function, such as increasing or decreasing its current value:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 与变量一样，函数在ink中也是*全局的*。一旦创建，它们就可以被项目中的任何其他代码访问。由于变量和函数都是全局的，因此常见的模式是设计一个改变单个变量的函数。这允许作者定义在调用函数时发生的行为，例如增加或减少其当前值：
- en: 'Example 19 (Example19.ink):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 示例19（Example19.ink）：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '*Example 19* uses three different functions. The first, `decreaseMoney()`,
    accepts a value called `amount`. This is an example of a **parameter**. When creating
    a function, different variables can be defined within its open and closing parentheses.
    These are known as its *parameters*, and they affect how it performs calculations
    or processes.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '*示例19*使用了三个不同的函数。第一个，`decreaseMoney()`，接受一个名为`amount`的值。这是一个**参数**的例子。在创建函数时，可以在其开括号和闭括号内定义不同的变量。这些被称为其*参数*，它们影响其执行计算或处理的方式。'
- en: When a function is called, the data that's passed to it is called its `decreaseMoney()`,
    that has a parameter and receives a single argument, and two functions, `increaseApples()`
    and `increaseOranges()`, that do not accept arguments.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用函数时，传递给它的数据被称为其`decreaseMoney()`，它有一个参数并接收一个单一的参数，以及两个不接受参数的函数，`increaseApples()`和`increaseOranges()`。
- en: The placement of the `increaseApples()` and `increaseOranges()` functions also
    matches a common pattern in ink where functions for adjusting the values of variables
    are found at the bottom of the code. Because both are global, which means they
    can be accessed from anywhere in the project, functions can be defined anywhere
    in the project.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`increaseApples()`和`increaseOranges()`函数的位置也符合ink中的一种常见模式，即在代码底部找到用于调整变量值的函数。因为它们都是全局的，这意味着可以从项目的任何地方访问它们，所以函数可以在项目的任何地方定义。'
- en: However, functions, like their sister concept knots, define themselves as being
    all the lines between when they start and the next knot or function. Placing them
    at the bottom of a file prevents issues where code might be confused or considered
    part of another knot or function.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，函数，就像它们的姐妹概念结（knots）一样，定义自己为从开始到下一个结或函数之间的所有线条。将它们放在文件底部可以防止代码可能被混淆或被认为是另一个结或函数的一部分的问题。
- en: 'Functions are not the only concepts able to define parameters and accept arguments.
    In ink, **knots** can also be called as if they were functions. This is because
    functions are special types of knots that can return data. This also marks the
    difference between them. A knot can accept data, but only a function can return
    data. However, using knots in this way allows us to easily track values within
    a looping structure:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 函数不是唯一能够定义参数和接受参数的概念。在ink中，**结**也可以像函数一样被调用。这是因为函数是特殊的结类型，可以返回数据。这也标志着它们之间的区别。结可以接受数据，但只有函数可以返回数据。然而，以这种方式使用结可以让我们轻松跟踪循环结构中的值：
- en: 'Example 20 (Example20.ink):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 示例20（Example20.ink）：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: There is a single variable within *Example 20* that's created as a parameter
    of the `time_machine` knot. Before the loop starts, the `RANDOM()` function is
    used to select a value within the range of `20` to `80`. This value is passed
    to the knot in the first loop. Whenever the player selects the `loop` value is
    increased by one and its current value is passed to the `time_machine` knot. On
    any future loops, the `loop` variable is increased by one, and it sends its current
    value into the next loop.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在**示例 20**中，存在一个变量，它是作为`time_machine`节点的参数创建的。在循环开始之前，使用`RANDOM()`函数从`20`到`80`的范围内选择一个值。这个值在第一次循环中传递给节点。每当玩家选择`loop`值增加一个，并将当前值传递给`time_machine`节点。在未来的任何循环中，`loop`变量增加一个，并将它的当前值发送到下一个循环。
- en: The code in *Example 20* also shows how variables can be used without the `VAR`
    keyword. Within the knot, the `loop` variable exists as a parameter. This means
    it exists as a variable, but only within the `time_machine` knot. When used in
    this way, the `loop` variable will not be global. As a part of the `time_machine`
    knot, the `loop` variable cannot be used outside of its code.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '**示例 20**中的代码还展示了如何在不使用`VAR`关键字的情况下使用变量。在节点内部，`loop`变量作为一个参数存在。这意味着它作为一个变量存在，但仅限于`time_machine`节点内部。以这种方式使用时，`loop`变量将不是全局的。作为`time_machine`节点的一部分，`loop`变量不能在其代码之外使用。'
- en: Functions are a powerful concept in ink. However, they do have two major limitations
    compared to working with knots. The first is that functions cannot use choices
    of any kind. Functions cannot branch a story and must *return* to where they were
    called when they are finished. The second limitation is that functions cannot
    divert to another section of a story. Like the first limitation, a function should
    only perform a small task or change a value.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 函数是墨水中的一个强大概念。然而，与使用节点相比，它们确实有两个主要的限制。第一个限制是函数不能使用任何类型的选项。函数不能分支故事，并且在完成时必须*返回*到它们被调用的位置。第二个限制是函数不能偏离到故事的另一个部分。就像第一个限制一样，函数应该只执行一个小任务或更改一个值。
- en: Calling knots as if they were functions can be very useful for many projects.
    However, unlike functions, knots cannot return values. As shown in *Example 20*,
    it is possible to use knots for some, but not all, of the same purposes as functions
    in ink. Authors must consider whether a function or a knot is a better way to
    complete a task or present information. If the goal is to process data and return
    a value, a function is best. If data is to be passed, options must be presented,
    or the story may divert in some way, a knot is the better way to organize your
    code and data.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 将节点调用得像函数一样非常有用，对于许多项目来说都是如此。然而，与函数不同，节点不能返回值。正如**示例 20**所示，可以使用节点来完成一些与墨水中的函数相同的目的，但不是所有。作者必须考虑使用函数或节点来完成任务或展示信息哪种方式更好。如果目标是处理数据并返回值，函数是最好的选择。如果需要传递数据、提供选项或故事以某种方式偏离，节点是组织代码和数据更好的方式。
- en: Summary
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned more about how variables work, and how they can
    be created using the `VAR` keyword. With multiple types of data, variables must
    be created using static values. They can then be changed through an operation
    called assignment using lines starting with a tilde (`~`) for writing a single
    line of code.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们更多地了解了变量是如何工作的，以及如何使用`VAR`关键字来创建它们。使用多种类型的数据，必须使用静态值来创建变量。然后可以通过使用以波浪号（`~`）开头的行进行赋值操作来更改它们。
- en: In the second topic, for the cases where we needed multiple values, we saw that
    the `LIST` keyword can be used. This keyword allows us to create values other
    variables can use, but also comes with the limitations that only values created
    with `LIST` can be used with a list. We also examined how all the values of a
    list are part of a Boolean set and have either `true` or `false` values upon creation.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个主题中，对于需要多个值的情况，我们看到了可以使用`LIST`关键字。这个关键字允许我们创建其他变量可以使用的值，但也带来了限制，即只有使用`LIST`创建的值才能与列表一起使用。我们还研究了列表的所有值都是一个布尔集合的一部分，并且在创建时具有`true`或`false`值。
- en: Next, in the third topic, we investigated how functions work in ink. With several
    built-in functions, we can create random numbers or convert between types of numbers.
    With `LIST` values, we compared the results of `LIST_COUNT()` and `LIST_ALL()`
    by examining how to change the values of a list from `true` to `false` when they
    are created.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，在第三个主题中，我们研究了函数在墨水中的工作方式。通过几个内置函数，我们可以创建随机数或在不同类型的数字之间进行转换。使用`LIST`值，我们通过检查如何将列表的值从创建时的`true`更改为`false`，比较了`LIST_COUNT()`和`LIST_ALL()`的结果。
- en: Finally, in the last topic, we wrote some functions with the `function` keyword
    to perform simple tasks, such as adjusting the value of a variable. Because both
    variables were created using the `VAR` keyword and functions are global, we saw
    that a common pattern is to use a function to change the value of a variable.
    As part of this topic, we also revisited knots and learned that functions are
    special types of knots. This allows both to receive data using parameters, though
    only a function can return data.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在最后一个主题中，我们使用`function`关键字编写了一些函数来执行简单的任务，例如调整变量的值。因为两个变量都是使用`VAR`关键字创建的，而函数是全局的，所以我们看到一种常见的模式是使用函数来改变变量的值。作为这个主题的一部分，我们还回顾了节点，并了解到函数是特殊的节点类型。这允许它们都通过参数接收数据，尽管只有函数可以返回数据。
- en: As we will see in the coming chapters on combining ink and Unity, understanding
    how values are stored and accessed in ink will be vital to creating a unified
    project. We must understand how ink works with different values across both those
    created using the `VAR` keyword and the `LIST` keyword before we can work with
    code in Unity. By understanding the relationship between variables and functions,
    we can begin to write ink code and, much later, run it alongside C# code in Unity.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将在接下来的章节中看到，结合ink和Unity，理解值在ink中的存储和访问方式对于创建统一的项目至关重要。在我们能够在Unity中处理代码之前，我们必须了解ink如何与使用`VAR`关键字和`LIST`关键字创建的不同值一起工作。通过理解变量和函数之间的关系，我们可以开始编写ink代码，并且可以在Unity中与C#代码一起运行，这要晚得多。
- en: 'In the next chapter, [*Chapter 5*](B17597_05_Final_PG_ePub.xhtml#_idTextAnchor077)*,*
    *Tunnels and Threads*, we will look at the last two major concepts in ink: **tunnels**
    and **threads**. Using many of the concepts introduced over the last four chapters,
    we will use tunnels to create advanced structures in ink with very little code.
    With threads, we will break up a digital story into even more parts and have ink
    combine everything for us as a reader is diverted from one knot to another. This
    will create an intricate narrative experience based on understanding and managing
    story flow between sections of a story.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '在下一章，[*第五章*](B17597_05_Final_PG_ePub.xhtml#_idTextAnchor077)*，* *隧道和线程*，我们将探讨ink中的最后两个主要概念：**隧道**和**线程**。利用上一章介绍的大多数概念，我们将使用隧道在ink中创建具有非常少代码的高级结构。使用线程，我们将把数字故事分成更多部分，并让ink为我们这个读者将一切组合起来，当我们从一个节点被引导到另一个节点时。这将创建一个复杂的叙事体验，基于理解和管理故事段落之间的故事流程。 '
- en: Questions
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the operation called where a variable gets a value?
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 变量获得值的操作叫什么？
- en: What is the operation called when a string is created by "adding" two other
    strings or a string and a number together?
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当通过“添加”两个其他字符串或一个字符串和一个数字来创建字符串时，这个操作叫什么？
- en: How is the tilde (`~`) used with variables and code in ink?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ink中，波浪号（`~`）是如何与变量和代码一起使用的？
- en: What kind of set are the values of a list?
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表值的类型是什么？
- en: What is the technical term for a variable that's created as part of a function
    or knot and defined within its parentheses?
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是作为函数或节点的一部分创建并在其括号内定义的变量的技术术语？
