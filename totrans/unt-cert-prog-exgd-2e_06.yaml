- en: '*Chapter 6*: Purchasing In-Game Items and Advertisements'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：购买游戏内物品和广告'
- en: In this chapter, we will continue with building our shop scene by adding functionality
    such as introducing the player's in-game currency and looking at how to deduct
    and increase it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续构建我们的商店场景，通过添加功能，例如引入玩家的游戏内货币，并查看如何扣除和增加它。
- en: Monetization is when a game is free to download (typically titled **free-to-play**)
    and the developer encourages or offers the player to buy items, such as the latest
    weapon, extra art modification visuals, and more, with the player's real money
    (with a bank/debit card). Another way of creating profit from a free-to-play game
    is by offering adverts that are incorporated into the game. For example, if the
    player wants a new ship or an extra life, they can watch a 30-second advert at
    no real monetary cost to them, but as the developer, we can receive revenue when
    an advert is watched. Of course, a balance must be considered when a game is made,
    and some companies will use all sorts of addictive psychology to encourage the
    player to buy upgrades or watch as many adverts as possible. This could lead a
    single player to sometimes pay well into the thousands of their real money. It
    is up to you how you want to plan and make your own game outside of this book;
    but for this chapter, we will create our own shop that offers players the chance
    to watch an advert to gain extra in-game credits.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 赚钱是指游戏可以免费下载（通常称为**免费游玩**），开发者鼓励或提供玩家用真实货币（使用银行卡/借记卡）购买物品，例如最新的武器、额外的艺术修改视觉效果等。从免费游玩游戏中创造利润的另一种方式是提供融入游戏中的广告。例如，如果玩家想要一艘新船或额外的生命，他们可以观看30秒的广告，而无需支付任何真实货币，但作为开发者，我们可以在广告被观看时获得收入。当然，在制作游戏时必须考虑平衡，一些公司会使用各种上瘾心理学来鼓励玩家购买升级或观看尽可能多的广告。这可能导致单个玩家有时支付数千真实货币。如何规划并制作自己的游戏取决于你，但就本章而言，我们将创建自己的商店，为玩家提供观看广告以获得额外游戏币的机会。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Buying upgrades for our player's ship
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们玩家的飞船购买升级
- en: Buying items, watching adverts, and preparing to start a game
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买物品、观看广告以及准备开始游戏
- en: Extending the `PlayerSpawner` script
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展`PlayerSpawner`脚本
- en: By the end of this chapter, we will understand the process of when to trigger
    an advert and how we can reward the player, while giving constant feedback. We
    will make use of the asset store and Unity's online dashboard system.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将了解何时触发广告以及如何奖励玩家，同时提供持续的反馈。我们将利用资产商店和Unity的在线仪表板系统。
- en: Let's get started!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧！
- en: The core exam skills covered in this chapter
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章涵盖的核心考试技能
- en: '*We will cover programming core interactions in this chapter*:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '*在本章中，我们将涵盖编程核心交互*：'
- en: Implementing and configuring game object behavior and physics
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和配置游戏对象行为和物理
- en: Implementing and configuring inputs and controls
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现和配置输入和控制
- en: '*We will also cover developing application systems*:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们还将涵盖应用程序系统的开发*：'
- en: Interpreting scripts for the application interface flow, such as menu systems,
    UI navigation, and application settings
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释应用程序界面流程的脚本，例如菜单系统、UI 导航和应用程序设置
- en: Interpreting scripts for user-controlled customization, such as character creators,
    inventories, storefronts, and in-app purchases
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释用户控制的定制的脚本，例如角色创建器、库存、店面和在应用内购买
- en: Analyzing scripts for user progression features, such as scoring, leveling,
    and in-game economies, utilizing technologies such as Unity Analytics and PlayerPrefs
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析用于用户进度功能的脚本，例如得分、等级和游戏内经济，利用Unity Analytics和PlayerPrefs等技术
- en: Analyzing scripts for two-dimensional overlays, such as **Heads-Up Displays**
    (**HUDs**), minimaps, and advertisements
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析二维叠加的脚本，例如**抬头显示**（**HUDs**）、小地图和广告
- en: Identifying scripts for saving and retrieving application and user data
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别用于保存和检索应用程序和用户数据的脚本
- en: '*We will also cover programming for scene and environment design*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们还将涵盖场景和环境设计的编程*：'
- en: Identifying methods for implementing game object instantiation, destruction,
    and management
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别实现游戏对象实例化、销毁和管理的方法
- en: '*Finally, we will cover working in professional software development teams*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*最后，我们将涵盖在专业软件开发团队中的工作*：'
- en: Recognizing techniques for structuring scripts for modularity, readability,
    and reusability
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别用于构建模块化、可读性和可重用性的脚本结构技术
- en: Technical requirements
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The project content for this chapter can be found at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_06](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_06).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目内容可以在[https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_06](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_06)找到。
- en: You can download the entirety of each chapter's project files at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以下载每个章节的项目文件的全部内容，地址为[https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition)。
- en: All of the content for this chapter is held in the chapter's `unitypackage`
    file. There is no `Complete` folder for this chapter.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有内容都存储在该章节的`unitypackage`文件中。本章节没有`Complete`文件夹。
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3MASWFJ](https://bit.ly/3MASWFJ).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频，查看*代码执行情况*：[https://bit.ly/3MASWFJ](https://bit.ly/3MASWFJ)。
- en: Buying upgrades for our player's ship
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的玩家船只购买升级
- en: 'In this section, we will cover the process of buying upgrades for our player''s
    ship. This includes the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍为我们的玩家船只购买升级的过程。这包括以下内容：
- en: Credit balance
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信用余额
- en: Option to buy
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 购买选项
- en: Letting the player know the item has been sold
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让玩家知道物品已被售出
- en: 'The following screenshot shows our shop scene with its selection grid and two
    purchased items marked as **SOLD**. Above the selection grid, to the left, is
    the user''s current in-game bank balance and an image showing what the player''s
    ship currently looks like with the two upgrades applied. Lastly, to the right
    is the option to buy the currently selected item, which is **C. Bomb**:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的商店场景及其选择网格和两个标记为**已售**的已购买物品。在选择网格上方左侧是用户的当前游戏内银行余额，以及显示玩家船只应用两个升级后的外观的图片。最后，在右侧是购买当前选中物品的选项，该物品为**C.炸弹**：
- en: '![Figure 6.1 – Our shop scene with currency, a sold sign, and an option to
    buy'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.1 – 我们的商店场景，包含货币、售罄标志和购买选项'
- en: '](img/Figure_6.01_B18381.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.01_B18381.jpg)'
- en: Figure 6.1 – Our shop scene with currency, a sold sign, and an option to buy
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 我们的商店场景，包含货币、售罄标志和购买选项
- en: In this section, we will return to the script that is responsible for purchasing
    upgrades and applying them to the player's ship. In the `PlayerShipBuild` script,
    we will add global variables that will hold the player's weapon upgrades in an
    array, as well as game object buttons and the player's in-bank balance.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将回到负责购买升级并将其应用于玩家船只的脚本。在`PlayerShipBuild`脚本中，我们将添加全局变量，这些变量将持有玩家的武器升级数组、游戏对象按钮以及玩家的银行余额。
- en: We will then hook up each of these new variables to the text and game object
    buttons in our scene and from there, we will add our own methods to turn buttons
    on or off and to determine whether the player has enough in-game credits to make
    purchases.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将将这些新变量连接到场景中的文本和游戏对象按钮，并从那里添加我们自己的方法来开启或关闭按钮，并确定玩家是否有足够的游戏内信用额进行购买。
- en: 'Let''s start by entering these new variables into our shop scene by going to
    the `PlayerShipBuild` script in the `Assets/Script` folder:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将这些新变量输入我们的商店场景开始，方法是进入`Assets/Script`文件夹中的`PlayerShipBuild`脚本：
- en: 'Enter the following variables to our `PlayerShipBuild` script:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下变量输入到`PlayerShipBuild`脚本中：
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We have mainly added game objects that hold the visualization of our shop scene,
    but we have also added a scriptable object that's used to give the player's ship
    its own property values, such as speed, health, what type of bullets are used,
    and more. We will make use of some of these variables in the next code block.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们主要添加了包含商店场景可视化表示的游戏对象，但我们还添加了一个可脚本化的对象，用于为玩家的船只提供其自己的属性值，例如速度、健康、使用的子弹类型等。我们将在下一个代码块中使用一些这些变量。
- en: 'Next, we will update the `PlayerShipBuild` script by adding code to the `Start`
    function by getting a reference to the bank game object and the **BUY?** button
    in our shop scene:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将通过在`Start`函数中获取银行游戏对象和商店场景中的**购买？**按钮来更新`PlayerShipBuild`脚本：
- en: '[PRE1]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This code resets or assigns the variables to game objects in the **Hierarchy**
    window of the Unity Editor. I will explain these variables briefly here and go
    into more detail when we use them:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码在Unity编辑器的**层次结构**窗口中重置或分配变量到游戏对象。我将在这里简要解释这些变量，并在使用它们时进行更详细的说明：
- en: '`purchaseMade` is a Boolean variable that will only accept a `true` or `false` value.
    We are setting it to `false` here as a form of reset.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`purchaseMade`是一个布尔变量，它只接受`true`或`false`值。我们在这里将其设置为`false`作为重置的一种形式。'
- en: '`bankObj`: In the `bank`. We are assigning that game object of this variable
    for later.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bankObj`：在`bank`中。我们将为此变量分配该游戏对象，以供以后使用。'
- en: We then take the `bank` integer, which currently contains a value of `600`,
    and we cast (assign) it as a `string` value so that it displays the value in our
    shop scene under the three-dimensional model of the player's ship.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们取`bank`整数，当前包含的值为`600`，并将其转换为`string`值，以便在商店场景中显示在玩家飞船的三维模型下方。
- en: The last variable is then assigned the `BUY ?` game object so that we can activate
    and deactivate the buy functionality whenever required in the **Scene** or **Game** window.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个变量被分配给`BUY ?`游戏对象，这样我们就可以在**场景**或**游戏**窗口中随时激活和停用购买功能。
- en: '`TurnOffPlayerShipVisuals`: This method will reset the visuals of the player''s
    ship.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TurnOffPlayerShipVisuals`：此方法将重置玩家的飞船的视觉效果。'
- en: '`PreparePlayerShipForUpgrade`: This method creates a player''s ship so that
    when it has all the upgrades applied, it can be sent into the game to be played.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PreparePlayerShipForUpgrade`：此方法创建玩家的飞船，以便当它应用了所有升级后，可以发送到游戏中进行游玩。'
- en: 'Now that we have our variables made and assigned, we can move on to the conditions
    of the code. Scroll down in the script until you get to the following line:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经创建了变量并分配了它们，我们可以继续到代码的条件部分。在脚本中向下滚动，直到你到达以下行：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Within the `if` statement, we are going to check whether the item we are attempting
    to buy has not already sold out in the shop (the only reason for an item to be
    sold out is because we have already bought it) and that we can afford it:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`if`语句中，我们将检查我们试图购买的商品是否在商店中未售罄（商品售罄的唯一原因是我们已经购买了它），并且我们是否有能力购买：
- en: '[PRE3]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We start by entering a comment to notify ourselves or any other programmer that
    at this point in the code, we are going to check whether the item we are attempting
    to buy is not already sold out. From here, we add an `if` statement condition
    that checks the `target` variable (the item we raycasted, as mentioned in the
    *Selecting game objects with raycasts* section of the previous chapter) to see
    whether it contains a `TextMesh` component holding a `string` (text) value that
    doesn't already hold the `"SOLD"` value. If it does, then we run the `SoldOut`
    method.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先输入一条注释来通知自己或任何其他程序员，在代码的这个位置，我们将检查我们试图购买的商品是否已经售罄。从这里，我们添加一个`if`语句条件，检查`target`变量（如前一章中*使用射线选择游戏对象*部分所述的射线投射的商品）是否包含一个持有`string`（文本）值的`TextMesh`组件，且该值不是`"SOLD"`。如果是，那么我们运行`SoldOut`方法。
- en: If the item hasn't already sold out, then we run two methods—the first is `Affordable`,
    which means we're going to check whether we can buy the item with the current
    amount of credit we have. If we don't have enough credit, the `LackOfCredits`
    method is run.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果商品尚未售罄，那么我们将运行两个方法——第一个是`Affordable`，这意味着我们将检查我们是否可以用当前拥有的信用额度购买该商品。如果我们没有足够的信用额度，将运行`LackOfCredits`方法。
- en: We have created three new methods, called `Affordable`, `LackOfCredits`, and
    `SoldOut`; let's now go through each one, starting with `Affordable`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了三个新方法，分别称为`Affordable`、`LackOfCredits`和`SoldOut`；现在让我们逐一介绍它们，从`Affordable`开始。
- en: 'Outside of the `AttemptSelection` method, add the following code:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AttemptSelection`方法外部，添加以下代码：
- en: '[PRE4]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `Affordable` method checks whether the `bank` integer (which currently contains
    the value `600`) is equal or greater than the value of the button that we have
    selected (`target`).
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`Affordable`方法检查`bank`整数（当前包含的值为`600`）是否等于或大于我们已选中的按钮的值（`target`）。'
- en: Next is an `if` statement that checks whether the `bank` integer value is greater
    than or equal to the `string cost` value of the selected item. Because we can't
    compare the value of a `string` variable to an `int` variable, we need to convert
    the `string` variable to an `int` variable. To do this, we use `System.Int32.Parse()`
    and enter the `ShopSelection.cost` string value in the parse brackets.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一个`if`语句，用于检查`bank`整数值是否大于或等于所选项目的`string cost`值。因为我们不能将`string`变量的值与`int`变量的值进行比较，所以我们需要将`string`变量转换为`int`变量。为此，我们使用`System.Int32.Parse()`并将`ShopSelection.cost`字符串值输入到解析括号中。
- en: If we can buy the item, then we set `buyButton` to active, which is a button
    the player can press to buy the item. Above `buyButton.SetActive(true)` is a log
    to Unity's **Console** window to confirm that a purchase is being made for bug-checking
    purposes.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以购买该物品，则将`buyButton`设置为活动状态，这是一个玩家可以按下来购买物品的按钮。在`buyButton.SetActive(true)`之上是对Unity的**控制台**窗口的记录，以确认正在进行的购买，用于错误检查。
- en: The second method we wrote earlier was the `LackOfCredits` method, which checks
    in a similar way by casting the `TextMesh` component value if it's less than the
    `bank` integer value. If it is, we send a `"CAN'T BUY"` message to Unity's `.Find` is
    much slower compared to something like `.GetComponent` used on its own. `.Find` has
    to go through each game object until it finds the matching string—if it even exists.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们之前编写的第二个方法是`LackOfCredits`方法，它以类似的方式检查，通过将`TextMesh`组件值强制转换为小于`bank`整数值。如果是这样，我们向Unity的`.Find`发送`"CAN'T
    BUY"`消息。与单独使用`.GetComponent`相比，`.Find`要慢得多。`.Find`必须遍历每个游戏对象，直到找到匹配的字符串——如果它甚至存在。
- en: We could also compare performance versus flexibility as well—for example, `transform.GetChild` ([https://docs.unity3d.com/ScriptReference/Transform.GetChild.html](https://docs.unity3d.com/ScriptReference/Transform.GetChild.html))
    will get the child that is specific to the number given to it in its parameter,
    which is also faster than using `.Find`. However, if the game object's hierarchy
    has changed during development, this would cause an error as it is no longer able
    to find the game object. The same could be said for `.GetComponent`, which can
    cause errors if it doesn't exist in the code.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还可以比较性能与灵活性——例如，`transform.GetChild`([https://docs.unity3d.com/ScriptReference/Transform.GetChild.html](https://docs.unity3d.com/ScriptReference/Transform.GetChild.html))将获取其参数中指定的特定子对象，这比使用`.Find`更快。然而，如果在开发过程中游戏对象层次结构发生了变化，这会导致错误，因为它将无法找到游戏对象。同样，对于`.GetComponent`也可以说，如果它在代码中不存在，它会导致错误。
- en: 'The third is the `SoldOut` method, which is currently set to log to the Unity
    Editor `SOLD OUT`, but yet again, we could add other functionality to this at
    a later date, such as applying a sound effect or playing an animation:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个是`SoldOut`方法，目前设置为将`SOLD OUT`记录到Unity编辑器，但同样，我们可以在稍后添加其他功能，例如应用音效或播放动画：
- en: '[PRE5]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Make two empty methods. We will fill their content in later on in the chapter:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建两个空方法。我们将在本章稍后填充它们的内容：
- en: '[PRE6]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Save the script and return to the Unity Editor.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回到Unity编辑器。
- en: Reflecting on this section, we have coded in our variables and assigned them
    when the script begins with the `Start` function. We have also coded in a few
    methods that check the balance credit compared to the selected value.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 反思本节，我们在脚本开始时使用`Start`函数编码了我们的变量并分配了它们。我们还编写了一些方法，用于检查余额与所选值之间的比较。
- en: We can now move on to updating our player ship's visuals in the shop scene and
    we can also see what the player's ship looks like in the game.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续更新商店场景中玩家的飞船视觉效果，并且我们还可以看到玩家在游戏中的飞船外观。
- en: Updating visual representations of our player's ship
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新玩家飞船的视觉表示
- en: In this section, we are going to code in capability so that the player's ship
    visuals update when a purchase is made and create and update another ship behind
    the scenes so that it can be sent on to the next scene to play.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用能力进行编码，以便在购买时更新玩家的飞船视觉效果，并在幕后创建和更新另一艘飞船，以便将其发送到下一个场景进行游戏。
- en: In the *Selecting game objects with raycasts* section of the previous chapter,
    we dragged and dropped our `SelectionQuad` game objects from the **Hierarchy**
    window into the **Inspector** window.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章的*使用射线选择游戏对象*部分，我们将`SelectionQuad`游戏对象从**层次结构**窗口拖放到**检查器**窗口。
- en: 'The following screenshot shows the majority of the `shop` game objects grayed
    out on the **Inspector** window so that we can focus on the new variable entries
    under **Visual Weapons**:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示**检查器**窗口上的大多数`shop`游戏对象被灰色显示，这样我们就可以专注于**视觉武器**下的新变量条目：
- en: '![Figure 6.2 – Visual Weapons displaying what will be attached to the player''s
    ship'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.2 – 显示将附加到玩家飞船上的视觉武器]'
- en: '](img/Figure_6.02_B18381.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.02_B18381.jpg](img/Figure_6.02_B18381.jpg)'
- en: Figure 6.2 – Visual Weapons displaying what will be attached to the player's
    ship
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 显示将附加到玩家飞船上的视觉武器
- en: 'To update the housing of the potential player ship upgrades, we need to apply
    the following to the `Visual Weapons` game object array using the previous screenshot
    as reference:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新潜在玩家飞船升级的住房，我们需要将以下内容应用于`Visual Weapons`游戏对象数组，并参考前面的截图：
- en: Change the `3`.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变`3`。
- en: For the three empty game object fields, click on the circle on the right of
    the field, and in the dropdown, begin typing `energy +1` into the search bar.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于三个空的游戏对象字段，点击字段右侧的圆圈，并在下拉菜单中，开始在搜索栏中输入`energy +1`。
- en: As soon as you see **energy + 1**, double-click it.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦看到**energy + 1**，双击它。
- en: Repeat this process for `c. Bomb`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`c. Bomb`重复此过程。
- en: Repeat this process for `b. Shot`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`b. Shot`重复此过程。
- en: Lastly, update the `Player_Default` asset file via the small remote circle to
    the right of it. We will go into more detail about this when we put it into practice
    in code.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过它右侧的小远程圆圈更新`Player_Default`资产文件。当我们将其应用于代码实践时，我们将对此进行更详细的说明。
- en: Save the scene and return to the `PlayerShipBuild` script.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存场景并返回到`PlayerShipBuild`脚本。
- en: 'We can now enter the content for our `TurnOffPlayerShipVisuals` method. This
    method is implemented in the `Start` function to simply reset the scene so that
    the only visual representation is the three-dimensional model of the player''s
    ship:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以输入我们的`TurnOffPlayerShipVisuals`方法的内容。此方法在`Start`函数中实现，以简单地重置场景，使得唯一的视觉表示就是玩家的飞船的三维模型：
- en: '[PRE7]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The code runs a `for` loop that goes through each of the game objects in the
    array of the `Visual Weapons` object that we dragged and dropped into the **Inspector**
    window.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 代码运行一个`for`循环，遍历我们拖放到**检查器**窗口的`Visual Weapons`对象数组中的每个游戏对象。
- en: We have updated our player's ship model so that when we buy an item, it will
    update in the **Scene**/**Game** window by simply manipulating the activity of
    our game objects.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了玩家的飞船模型，以便在购买物品时，只需通过操纵游戏对象的活动，它就会在**场景**/**游戏**窗口中更新。
- en: We are now going to focus more on the player's ship code and the two other buttons
    on the selection grid—**BUY?** and **WATCH AD**.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更多地关注玩家的飞船代码以及选择网格上的另外两个按钮——**购买？**和**观看广告**。
- en: Preparing our player's ship to be used in the game
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备玩家的飞船以便在游戏中使用
- en: This section is aimed at preparing our player's ship so that it can be sent
    to the next scene to play. We will create a standard ship first that the player
    will not be able to see, apart from a visual representation of it (there are two
    ships in the scene but the player can only see one).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在准备我们的玩家飞船，以便它可以被发送到下一个场景进行游戏。我们首先创建一个标准的飞船，玩家除了看到它的视觉表示外（场景中有两艘飞船，但玩家只能看到一艘）将看不到它。
- en: So, if the player makes some purchases in our shop, we need to create a ship
    and add its visual and physical upgrades so that we can see it in action in the
    next scene.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果玩家在我们的商店中进行了某些购买，我们需要创建一艘飞船，并添加其视觉和物理升级，以便我们可以在下一个场景中看到它的实际效果。
- en: 'We need to return to the `PlayerShipBuild` script and add the content to our
    empty `PreparePlayerShipForUpgrade` method to help support making a player''s
    ship with its new upgrades:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要回到`PlayerShipBuild`脚本，并将内容添加到我们的空`PreparePlayerShipForUpgrade`方法中，以帮助支持制作带有新升级的玩家飞船：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The method creates (`instantiates`) a `Player_Ship` game object from the `Resources`
    folder. We then turn off (`enabled` = `false`) its own script attachment; otherwise,
    we would be able to move and shoot with it in the shop scene.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法从`Resources`文件夹创建（实例化）一个`Player_Ship`游戏对象。然后我们关闭（`enabled` = `false`）其自身的脚本附加；否则，我们将在商店场景中能够移动和射击它。
- en: We then move the `Player_Ship` object completely out of the **Scene**/**Game**
    window view.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将`Player_Ship`对象完全移出**场景**/**游戏**窗口视图。
- en: Finally, we assign it the `defaultPlayerShip` asset file that we dragged and
    dropped into the scriptable object field in the **Inspector** window in the previous
    section.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将它分配给我们在上一节中拖放到**检查器**窗口脚本对象字段中的`defaultPlayerShip`资产文件。
- en: In this section, we revisited the `PlayerShipBuild` script and added more global
    variables and functionality to support the shop scene. Our game now has an in-game
    credit score and works out whether the player can afford a game item or not; the
    rest of the code in this section was for hiding game objects and preparing our
    player's ship to be carried over into the game scene.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们重新访问了`PlayerShipBuild`脚本，并添加了更多全局变量和功能来支持商店场景。现在我们的游戏有一个游戏内信用分数，并计算出玩家是否能够负担得起游戏物品；本节中其余的代码是为了隐藏游戏对象并准备玩家的飞船以便将其带入游戏场景。
- en: In the next section, we will carry on with the `PlayerShipBuild` script and
    look into actually starting a game to play with the player's ship. We will also
    look at how the player can buy in-game credits by watching adverts with the use
    of the Unity dashboard and Unity Monetization from the Asset store.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续编写`PlayerShipBuild`脚本，并探讨实际上开始游戏与玩家的飞船一起玩。我们还将查看玩家如何通过使用Unity仪表板和Unity
    Monetization从资源商店观看广告来购买游戏内信用。
- en: Buying items, watching adverts, and preparing to start a game
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购买物品、观看广告并准备开始游戏
- en: In this section, we will look at adding three more buttons to our shop scene.
    The first is `BUY?` for when we want to purchase an item. The second is `Watch
    Ad`—as soon as the player presses this button, an advert will load; once it's
    finished, the player is rewarded with `300` credits. Lastly, we'll add the `START`
    button, which will take the player to the `testLevel` scene with the upgrades
    they have purchased (if any).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看向我们的商店场景添加三个更多按钮。第一个是“购买？”当我们想要购买物品时使用。第二个是“观看广告”——一旦玩家按下此按钮，就会加载广告；一旦完成，玩家将获得`300`信用。最后，我们将添加“开始”按钮，该按钮将玩家带到他们已购买的升级（如果有）的`testLevel`场景。
- en: We need to head back to the `PlayerShipBuild` script and scroll down to the
    `AttemptSelection` method, where we will add three `else if` statements to launch
    three different types of methods. The reason for this is that the three selections
    don't follow on from the scriptable object buttons; therefore, these items will
    never have outcomes such as `SOLD` or `itemText`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要回到`PlayerShipBuild`脚本，并滚动到`AttemptSelection`方法，在那里我们将添加三个`else if`语句以启动三种不同类型的方法。这样做的原因是这三个选择并不跟随可脚本化对象按钮；因此，这些物品永远不会出现`已售出`或`itemText`等结果。
- en: 'The following screenshot shows the complete `AttemptSelection` method with
    the focus drawn to the other three non-scriptable object buttons:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了完整的`AttemptSelection`方法，重点放在其他三个非脚本化对象按钮上：
- en: '![Figure 6.3 – Our shop buttons with three alternative methods to load when
    pressed'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – 当按下时，我们的商店按钮有三种不同的加载方法'
- en: '](img/Figure_6.03_B18381.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.03_B18381.jpg)'
- en: Figure 6.3 – Our shop buttons with three alternative methods to load when pressed
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 当按下时，我们的商店按钮有三种不同的加载方法
- en: We are going to look at the `BUY?` button first as it relates to what we are
    covering in this section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将查看“购买？”按钮，因为它与我们本节要讨论的内容相关。
- en: Setting up the BUY? button
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置“购买？”按钮
- en: In this section, we will be hooking up the **BUY?** button so that it appears
    at the right time in the description panel. This button will only be displayed
    if the player hasn't already bought the item and if they have enough credits.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将连接**购买？**按钮，使其在描述面板中正确的时间出现。此按钮仅在玩家尚未购买物品并且有足够的信用时才会显示。
- en: 'The following screenshot shows our shop scene with the **BUY?** button highlighted:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的商店场景，其中**购买？**按钮被突出显示：
- en: '![Figure 6.4 – BUY? button'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – “购买？”按钮'
- en: '](img/Figure_6.04_B18381.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.04_B18381.jpg)'
- en: Figure 6.4 – BUY? button
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – “购买？”按钮
- en: 'Let''s make a start by coding the `PlayerShipBuild` script:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从编写`PlayerShipBuild`脚本开始：
- en: Open the `PlayerShipBuild` script.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`PlayerShipBuild`脚本。
- en: 'Scroll down to the `AttemptSelection` method after the curly brace, as in the
    following snippet:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在大括号之后滚动到`AttemptSelection`方法，如下面的片段所示：
- en: '[PRE9]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following `else if` code, as indicated in the preceding code. We can
    also use the screenshot from the previous section as a reference:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`else if`代码，如前述代码所示。我们也可以使用前一小节的截图作为参考：
- en: '[PRE10]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'So, if the player clicks on the `target.name` equals the name of `BuyItem`
    method is called. Inside this method, the following code is executed:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，如果玩家点击`target.name`等于`BuyItem`方法，就会调用该方法。在该方法内部，执行以下代码：
- en: '[PRE11]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We message the `purchaseMade` to `true`. This Boolean value is used later when
    we leave the shop scene to start the game. If `purchaseMade` is `true`, a set
    of procedures follows. The next line turns off the `buyButton` function as we
    no longer need to display the results. Finally, we remove the selection from the
    grid at the bottom of the screen as a refresh.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将`purchaseMade`设置为`true`。这个布尔值在离开商店场景开始游戏时会被使用。如果`purchaseMade`是`true`，则会执行一系列程序。下一行代码关闭了`buyButton`功能，因为我们不再需要显示结果。最后，我们从屏幕底部的网格中移除选择，以刷新页面。
- en: Following on from the `BuyItem` method, we now turn our focus to the `visualWeapons`
    game object, which, if you remember from earlier in this chapter, covers the visual
    representation of what we have bought and what our player ship will look like
    when playing in a game.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 从`BuyItem`方法继续，我们现在将注意力转向`visualWeapons`游戏对象，如果您记得本章前面的内容，它涵盖了我们所购买的内容以及玩家飞船在游戏中看起来会是什么样子。
- en: 'Continuing on inside the `BuyItem` method, add the following code to name and
    make all cases of `visualWeapons` active:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BuyItem`方法中继续操作，添加以下代码以命名并使所有`visualWeapons`案例生效：
- en: '[PRE12]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We run a `for` loop to count how many `visualWeapons` objects we have in the
    array. Within the `if` statement, we check each `visualWeapon` name from the array
    to see whether it matches with the selection made in the selection grid's name.
    If it does, then we turn that particular `visualWeapon` object on so that we can
    see it in the shop selection.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行一个`for`循环来计算数组中有多少`visualWeapons`对象。在`if`语句中，我们检查数组中的每个`visualWeapon`名字，看它是否与选择网格的名字匹配。如果匹配，则打开特定的`visualWeapon`对象，以便在商店选择中看到它。
- en: 'Continuing on in the `BuyItem` method, we add another method to send our upgrades
    to our player''s ship, along with our `bank` credit, with the following code:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BuyItem`方法中继续操作，我们添加另一个方法来将我们的升级和`bank`信用额发送到玩家的飞船上，以下代码如下：
- en: '[PRE13]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We run another method, called `UpgradeToShip`. This method will load the game
    object of the item purchased to the player ship we play in our game; we will go
    into further detail about this method shortly.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行另一个名为`UpgradeToShip`的方法。这个方法将加载我们游戏中购买的项目游戏对象到玩家飞船上；我们将在稍后详细介绍这个方法。
- en: Next, we deduct from the `bank` value (using `System.Int32.Parse`, so it reads
    the `string` value as an `int` value) with the selection's `cost` scriptable object.
    We then represent the deduction by grabbing the reference from the bank's game
    object, called `bankText`, and updating its `text` value in the `TextMesh` component.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从`bank`值中扣除（使用`System.Int32.Parse`，因此它将`string`值读取为`int`值）选择的项目`cost`脚本对象。然后，我们通过从银行的游戏对象获取引用，称为`bankText`，并在`TextMesh`组件中更新其`text`值来表示扣除。
- en: Finally, we update the selection from the selection grid that the item has been
    sold. This is updated to the button's value text.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们更新选择网格中的选择，表示该项目已被售出。这更新到按钮的值文本。
- en: That brings us to the end of the `BuyItem` method. But, as mentioned, we run
    the `UpgradeToShip` method, which loads the game object of that particular ship
    part and attaches it to a ship that is away from the screen.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了`BuyItem`方法。但是，如前所述，我们运行了`UpgradeToShip`方法，该方法加载特定船部件的游戏对象并将其附加到一个屏幕外的飞船上。
- en: 'Still, in the `PlayerShipBuild` script, let''s add the `UpgradeToShip` method:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`PlayerShipBuild`脚本中，让我们添加`UpgradeToShip`方法：
- en: '[PRE14]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `UpgradeToShip` method takes a `string` parameter titled `upgrade`. Earlier,
    we sent it the following line of code:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpgradeToShip`方法接受一个名为`upgrade`的`string`参数。之前，我们发送了以下代码行：'
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This line of code came from the selection's scriptable object item name. This
    item's name (`ShopSelection.iconName`) is sent to `UpgradeToShip` as a `string`
    name (`upgrade`).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码来自选择的脚本对象项目名字。这个项目的名字（`ShopSelection.iconName`）作为一个`string`名字（`upgrade`）发送到`UpgradeToShip`。
- en: Inside the `UpgradeToShip` method, we create (`instantiate`) a game object in
    the resources folder from the name of the shop's selection icon and store it in
    a game object variable, `shipItem`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UpgradeToShip`方法内部，我们从资源文件夹中根据商店选择图标的名字创建（实例化）一个游戏对象，并将其存储在一个游戏对象变量`shipItem`中。
- en: We then attach this `shipItem` game object to our `playerShip` object. This
    is the `playerShip` object that is not in the **Game** window view but will be
    sent to the next scene—the game-playing scene.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将这个`shipItem`游戏对象附加到我们的`playerShip`对象上。这是不在**Game**窗口视图中的`playerShip`对象，但它将被发送到下一个场景——游戏场景。
- en: The `shipItem` game object's local position (its position compared to its parent
    game object, `playerShip`) is set to `0` (that is, its *x*, *y*, and *z* positions
    are set to `0`).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`shipItem` 游戏对象的本地位置（与其父游戏对象 `playerShip` 相比的位置）被设置为 `0`（即其 *x*、*y* 和 *z* 位置被设置为
    `0`）。'
- en: Save the script and return to the Unity Editor.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回到 Unity 编辑器。
- en: Click on the **Play** button to begin play mode, and in the **Game** window,
    select the first item in the selection grid.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Play** 按钮开始游戏模式，并在 **Game** 窗口中选择选择网格中的第一个项目。
- en: We should now have the ability to buy this item. If we click on buy, the button
    will no longer say the value, but instead will display **SOLD**, and the **BUY?**
    button will disappear if we attempt to select the same item again.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在应该能够购买此物品。如果我们点击购买，按钮将不再显示值，而是显示 **SOLD**，并且如果我们再次尝试选择相同的物品，**BUY?** 按钮将消失。
- en: We have two buttons left to hook up and then we will have a fully functioning
    shop. Let's continue with the **START** button.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还剩下两个按钮需要连接，然后我们将拥有一个完全运行的商店。让我们继续处理 **START** 按钮。
- en: Setting up the START button
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 START 按钮
- en: '**START** is the button the player presses when they want to leave the shop
    scene and move on to playing the game.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**START** 是玩家按下以离开商店场景并继续玩游戏时按下的按钮。'
- en: 'The following screenshot shows where the **START** button is located in the
    shop scene:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了商店场景中 **START** 按钮的位置：
- en: '![Figure 6.5 – START button'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.5 – START button](img/Figure_6.05_B18381.jpg)'
- en: '](img/Figure_6.07_B18381.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.07_B18381.jpg](img/Figure_6.07_B18381.jpg)'
- en: Figure 6.5 – START button
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – START 按钮
- en: So, we can recall that in the previous section, we were coding in our `AttemptSelection`
    method, which runs when the player presses one of the buttons on the selection
    grid in the shop.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以回忆起在前一节中，我们正在 `AttemptSelection` 方法中编码，该方法在玩家按下商店选择网格上的一个按钮时运行。
- en: 'At the bottom of this method are three `else if` statements. We have already
    set up one of the three buttons, the `else if` statement, which is the `AttemptSelection`
    method:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法的底部有三个 `else if` 语句。我们已经设置了一个按钮，即 `else if` 语句，它是 `AttemptSelection` 方法：
- en: '![Figure 6.6 – START button will load the StartGame() method'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.6 – START button will load the StartGame() method](img/Figure_6.06_B18381.jpg)'
- en: '](img/Figure_6.06_B18381.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.06_B18381.jpg](img/Figure_6.06_B18381.jpg)'
- en: Figure 6.6 – START button will load the StartGame() method
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – START 按钮，将加载 StartGame() 方法
- en: 'Next, we will be making sure that our player has purchased an item or upgrade
    from the shop (if anything) and load our first level:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将确保我们的玩家从商店（如果有的话）购买了物品或升级，并加载我们的第一个关卡：
- en: 'So, at the bottom of the `AttemptSelection` method in our `PlayerBuild` script,
    enter the following `if` statement:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，在 `PlayerBuild` 脚本中 `AttemptSelection` 方法的底部，输入以下 `if` 语句：
- en: '[PRE16]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When our `target` game object selection carries the `START` game object name,
    we fall into the `else if` statement and run the `StartGame` method. This method
    is small and the majority of its code depends on whether a purchase has been made.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的 `target` 游戏对象选择带有 `START` 游戏对象名称时，我们将进入 `else if` 语句并运行 `StartGame` 方法。此方法很小，其大部分代码取决于是否进行了购买。
- en: 'Continuing on in our `PlayerShipBuild` script, add the `StartGame` method:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的 `PlayerShipBuild` 脚本中继续，添加 `StartGame` 方法：
- en: '[PRE17]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If `purchaseMade` is set to `true`, we fall into the `if` statement and name
    our `playerShip` game object `"UpgradedShip"`. We then check whether the `playerShip`
    object has made a purchase for more health (`"energy +1(Clone)"`). If the player
    has bought more health, we will set our `playerShip` object's `health` value to
    `2`. This means that our player can get hit twice before dying.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `purchaseMade` 设置为 `true`，我们将进入 `if` 语句，并将我们的 `playerShip` 游戏对象命名为 `"UpgradedShip"`。然后我们检查
    `playerShip` 对象是否为更多健康购买了 (`"energy +1(Clone)"`)。如果玩家购买了更多健康，我们将我们的 `playerShip`
    对象的 `health` 值设置为 `2`。这意味着我们的玩家可以在死亡前被击中两次。
- en: The `DontDestroyOnLoad` function takes the argument of `playerShip`, which means
    when the next scene loads, the `playerShip` game object will be carried over to
    the next scene.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`DontDestroyOnLoad` 函数接受 `playerShip` 参数，这意味着当下一个场景加载时，`playerShip` 游戏对象将被带到下一个场景。'
- en: Finally, we start our `testLevel` scene.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们开始我们的 `testLevel` 场景。
- en: Save the script.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: So, after a purchase (or no purchase) is made, our shop scene will close and
    our `testLevel` will open with or without any purchases made. However we will
    not see the visual upgrades until we update our `PlayerSpawner` script later on
    in the chapter.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在购买（或未购买）之后，我们的商店场景将关闭，我们的 `testLevel` 将打开，无论是否进行了购买。然而，我们将在本章稍后更新我们的 `PlayerSpawner`
    脚本后才能看到视觉升级。
- en: Return to the Unity Editor and run **Play** mode to check whether the player
    ship upgrade is carried over.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 返回Unity编辑器并运行**播放**模式以检查玩家飞船升级是否保留。
- en: Let's now move on to the final `if else` statement—the **WATCH AD** button.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在继续到最后一个`if else`语句——**观看广告**按钮。
- en: Setting up the WATCH AD button
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置观看广告按钮
- en: The last button we will be covering in this chapter is the **WATCH AD** button.
    In a lot of mobile devices' (Android's/iOS') free-to-play games (the game is free
    to play but makes money back with in-game purchases or adverts), the option for
    the player to enhance their experience with the game is to receive upgrades and
    modifications, gain in-game credits, and more if the player watches a 30-second
    advert. After watching the advert, the player is rewarded with credit. In this
    section, we are going to create this functionality with our code and Unity's online
    dashboard.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中我们将要介绍的最后一个按钮是**观看广告**按钮。在许多移动设备（Android和iOS）的免费游戏（游戏免费玩，但通过游戏内购买或广告赚钱）中，玩家可以通过观看30秒的广告来获得升级和修改、获得游戏内积分以及更多。观看广告后，玩家将获得积分。在本节中，我们将使用我们的代码和Unity的在线仪表板创建这个功能。
- en: 'The following screenshot shows the location of the **WATCH AD** button in the
    selection grid:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了选择网格中**观看广告**按钮的位置：
- en: '![](img/Figure_6.07_B183811.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图6.07_B183811.jpg](img/Figure_6.07_B183811.jpg)'
- en: Figure 6.7 – WATCH AD button
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 观看广告按钮
- en: 'We need to turn on Unity''s ad services in the Unity Editor and follow these
    steps:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在Unity编辑器中打开Unity的广告服务并遵循以下步骤：
- en: 'As before, if the **Services** tab isn''t available, we can find it under the
    Unity Editor **Window** tab | **General**, followed by **Services**, as in the
    following screenshot:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，如果**服务**选项卡不可用，我们可以在Unity编辑器**窗口**选项卡下的**通用**，然后是**服务**，如下面的截图所示：
- en: '![Figure 6.8 – Services location'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – 服务位置'
- en: '](img/Figure_6.08_B18381.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.08_B18381.jpg](img/Figure_6.08_B18381.jpg)'
- en: Figure 6.8 – Services location
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 服务位置
- en: 'Click on the **Services** tab and select **Ads**, as in the following screenshot:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**服务**选项卡并选择**广告**，如下面的截图所示：
- en: '![Figure 6.9 – Turning Ads ON'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 – 打开广告'
- en: '](img/Figure_6.09_B18381.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.09_B18381.jpg](img/Figure_6.09_B18381.jpg)'
- en: Figure 6.9 – Turning Ads ON
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 打开广告
- en: In the previous screenshot, you may have a warning notification at the top of
    the **Services** window saying you don't have a project ID (marked with an *****
    in the screenshot). If you don't have this warning, you can skip the next set
    of instructions and set up the Ads service.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，您可能在**服务**窗口的顶部看到一个警告通知，说明您没有项目ID（在截图中标有*****）。如果您没有这个警告，您可以跳过下一组说明并设置广告服务。
- en: 'To fix the issue with no project ID set up, we need to attach ours by doing
    the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要解决未设置项目ID的问题，我们需要通过以下方式附加我们的ID：
- en: 'When we click the **Ads** section in the **Services** window, the **Project
    Settings** window appears. In the **Project Settings** window, **Services** would
    be expanded out from the list and **Ads** will be selected, as shown in the following
    screenshot:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在**服务**窗口中点击**广告**部分时，会出现**项目设置**窗口。在**项目设置**窗口中，**服务**将从列表中展开，并选择**广告**，如下面的截图所示：
- en: '![Figure 6.10 – Project Settings with no project ID'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10 – 无项目ID的项目设置'
- en: '](img/Figure_6.10_B18381.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10_B18381.jpg](img/Figure_6.10_B18381.jpg)'
- en: Figure 6.10 – Project Settings with no project ID
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – 无项目ID的项目设置
- en: Click on **Select organization** under the **Create a Unity Project ID** heading.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建Unity项目ID**标题下点击**选择组织**。
- en: Your organization will be on the list. Click on it (this was created when you
    created your account with Unity. Mine is called retrophil).
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 您的组织将在列表中。点击它（这是您使用Unity创建账户时创建的。我的名字叫retrophil）。
- en: Click the **Create project ID** button.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建项目ID**按钮。
- en: It's likely the **Console** window will give off a few warnings, errors, and
    so on. Do not worry about these for now. Keep your attention on the **Project
    Settings** window.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能**控制台**窗口会发出一些警告、错误等。现在请不要担心这些，请将注意力集中在**项目设置**窗口上。
- en: 'Next, you will be presented with the following update to the **Project Settings**
    window:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将看到以下**项目设置**窗口的更新：
- en: '![Figure 6.11 – Project linked successfully'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11 – 项目链接成功'
- en: '](img/Figure_6.11_B18381.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.11_B18381.jpg](img/Figure_6.11_B18381.jpg)'
- en: Figure 6.11 – Project linked successfully
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – 项目成功链接
- en: 'Let''s continue setting up **Ads** in our project:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续在我们的项目中设置**广告**：
- en: We are asked if our app is targeted at children under age 13\. Our project isn't
    targeted for children in that range, so select **No** from the drop-down list.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们会被问及我们的应用是否针对13岁以下的儿童。我们的项目不是针对这个年龄段的儿童，所以从下拉列表中选择**否**。
- en: Click **Save**.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**。
- en: Our project is now ready to have **Ads** turned on.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目现在已准备好开启**广告**。
- en: 'Click **OFF** to turn our **Ads** service **ON**, as shown in the following
    screenshot:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**关闭**以将我们的**广告**服务**开启**，如下截图所示：
- en: '![Figure 6.12 – Ads Package'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.12 – Ads Package'
- en: '](img/Figure_6.12_B18381.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.12_B18381.jpg]'
- en: Figure 6.12 – Ads Package
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12 – 广告包
- en: Finally, we need to activate the **Monetization** service via **Dashboard**.
    To do that, click the **Dashboard** link in the **Ads** section. This will load
    the Unity Dashboard in a browser. In the **Monetization** section click **Complete
    Activation**, then **Unity Ads**. You will then be allocated your Game Ids. Return
    to the Unity Editor.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要通过**仪表板**激活**货币化**服务。为此，在**广告**部分点击**仪表板**链接。这将在一个浏览器中加载Unity仪表板。在**货币化**部分点击**完成激活**，然后**Unity
    Ads**。您将获得您的游戏ID。返回到Unity编辑器。
- en: 'By the time you''re reading this book, it is likely there will be an update
    for the Ads Package; if possible, install 3.7.5 still as it''s likely the later
    version will have a different/unfinished setup, meaning the following instructions
    will likely not relate or there might be unfinished methods. But if you want to
    (or have to) install the latest version, be sure to follow the Unity Ads documentation:
    [https://docs.unity.com/ads/UnityAdsHome.html](https://docs.unity.com/ads/UnityAdsHome.html).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读这本书的时候，很可能会对广告包进行更新；如果可能的话，仍然安装3.7.5版本，因为较晚的版本可能会有不同的/未完成的设置，这意味着以下说明可能不再适用或可能存在未完成的方法。但如果您想（或必须）安装最新版本，请确保遵循Unity广告文档：[https://docs.unity.com/ads/UnityAdsHome.html](https://docs.unity.com/ads/UnityAdsHome.html)。
- en: We are now at the point where Unity Ads is connected to our project. The **Project
    Settings** window also displays our Game Id for Android and iOS operating systems.
    These IDs are references for our game that the Google Play and Apple App Store
    will use to identify our game when it comes to sending adverts.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将Unity Ads连接到我们的项目。**项目设置**窗口还显示了Android和iOS操作系统的游戏ID。这些ID是Google Play和Apple
    App Store在发送广告时用来识别我们游戏的参考。
- en: Each game ID will be different, so your game ID will be different from mine.
    When it comes to entering your game ID code, make sure you refer to yours, not
    mine.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 每个游戏ID都是不同的，所以你的游戏ID将不同于我的。当涉及到输入你的游戏ID代码时，确保你参考的是你的，而不是我的。
- en: We can now return to our `PlayerShipBuild` script and make a start with hooking
    up our **WATCH AD** button to display adverts.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以回到我们的`PlayerShipBuild`脚本，开始将我们的**观看广告**按钮连接到显示广告。
- en: Attaching Unity reward adverts to our script
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将Unity奖励广告附加到我们的脚本
- en: 'In this section, we are going to take placement information and extra functionality
    from the **Advertisement** library to create our reward adverts:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从**广告**库获取放置信息和额外功能来创建我们的奖励广告：
- en: In the Unity Editor, from the `Assets/Script` folder, then take the following
    steps.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中，从`Assets/Script`文件夹开始，然后按照以下步骤操作。
- en: 'Open the `PlayerShipBuild` script and at the top of the code that we need,
    import two extra libraries alongside our `UnityEngine` library:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`PlayerShipBuild`脚本，在需要修改的代码顶部，与我们的`UnityEngine`库一起导入两个额外的库：
- en: '[PRE18]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`System.Collections` contain extra tools, such as `IEnumerator`, which is used
    for the `StartCoroutine` functions, which we will cover shortly.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.Collections`包含额外的工具，例如`IEnumerator`，它用于`StartCoroutine`函数，我们将在稍后介绍。'
- en: The other line of code imports Unity's **Advertisement** library, which we downloaded
    from our Ads Service, which will also be displayed in our Package Manager. Also,
    make sure you have Android selected as your platform in Build Settings.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 另一行代码导入了Unity的**广告**库，这是我们从广告服务下载的，它也会在包管理器中显示。同时，确保你在构建设置中选择了Android作为你的平台。
- en: What Is the Package Manager?
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是包管理器？
- en: 'Unity holds most of its add-ons/extra software and updates for components in
    the Package Manager. We can also check for updates for these packages. If you
    would like to know more about the Package Manager, check out the following link:
    [https://docs.unity3d.com/Manual/Packages.html](https://docs.unity3d.com/Manual/Packages.html).'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will add two interfaces to our `PlayerShipBuild` script as they are
    required for the Ads Services to work, `IUnityAdsInitializationListener` and `IUnityAdsListener`,
    and implement these in our class. These interfaces will give us callback (a callback
    is a method that runs when a process is done executing a specific task) methods
    to tell us what state our ads are in and when we can add code, such as rewards.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: Further Information
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to know more about the Ads content, you can check out the
    Unity Documentation here: [https://docs.unity.com/ads/UnityAPI.html](https://docs.unity.com/ads/UnityAPI.html).'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Carrying on with the `PlayerShipBuild` script, we declare our class as follows:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Our script will underline these interfaces with error lines because we haven't
    implemented their methods. We can do this now and fill them out correctly later.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead of typing the required methods out, we can highlight one of the interfaces
    in Visual Studio and let it type out the methods for us:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Continuing with the `PlayerShipBuild` script, highlight one of the interfaces
    with your mouse.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Highlighted interface'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.13_B18381.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Highlighted interface
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: A dropdown will appear with what needs adding to our class. Click on **Show
    potential fixes**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Show potential fixes dialog box'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.14_B18381.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – Show potential fixes dialog box
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: We will then be presented with a list of methods (A). Click `PlayerShipBuild`
    class.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a box appears asking to confirm the changes, click **Apply**.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat this process for the other interface.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once done, scroll down to the bottom of the `PlayerShipBuild` script to see
    our extra methods.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned, we will return to these methods and fill them out with regard
    to adding debug messages if an error occurs. The main method will be the `OnUnityAdsDidFinish`
    method, because that's where we will be rewarding the player with credit to their
    bank after watching an advert.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now continue adding the variables that will hold the ids to distinguish
    what platform we are running on:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll back up to the top of the `PlayerShipBuild` script and add the following
    global variables with the others:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`androidGameId` and `iOSGameId` will hold the game IDs that we saw earlier
    when setting up the Ads Service in the **Project Settings** folder.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '`testMode` is set to `true`. On an actual device under test mode, you''ll get
    a proper Unity video test ad. You can test skipping or watching it in full. When
    you disable test mode for release, live video ads from Unity Ads advertisers will
    appear.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '`adId` will hold a string that will be an ID for what type of advert you want
    to load. We will go into this a bit more shortly.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`adId` 将保存一个字符串，该字符串将是你想要加载的广告类型的 ID。我们将在稍后对此进行更多说明。'
- en: Seeing as we have made our new variables accessible from the `SerializeField`
    attribute, we can add our Android and iOS Game Ids to these variables next.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经通过 `SerializeField` 属性使新变量可访问，我们可以将这些 Android 和 iOS 游戏 ID 添加到这些变量中。
- en: Before we add any more code, save your `PlayerShipBuild` script and return to
    the Editor.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们添加更多代码之前，保存你的 `PlayerShipBuild` 脚本并返回到编辑器。
- en: In your shop scene, expand out the **ShopManager** game object in the **Hierarchy**
    window.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的商店场景中，在 **Hierarchy** 窗口中展开 **ShopManager** 游戏对象。
- en: Expand out **BuyingSelection** as well.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 也要展开 **BuyingSelection**。
- en: Select the **shop** game object.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **shop** 游戏对象。
- en: In the **Inspector** window, we can see blank spaces for our Ids.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Inspector** 窗口中，我们可以看到为我们的 ID 留出的空白空间。
- en: So, all we need to do is open our **Project Settings** window.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，我们所需做的就是打开我们的 **Project Settings** 窗口。
- en: Select **Services** then **Ads** from the list.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从列表中选择 **Services**，然后选择 **Ads**。
- en: Copy the **Android** ID and paste it into the **Android Game Id** field in the
    **Inspector** window.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **Android** ID 并将其粘贴到 **Inspector** 窗口的 **Android Game Id** 字段中。
- en: Copy the **iOS** ID and paste that into the **IOS Game Id** field in the **Inspector**
    window.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **iOS** ID 并将其粘贴到 **Inspector** 窗口的 **IOS Game Id** 字段中。
- en: '![Figure 6.15 – Copy Game id from Project Settings to Inspector'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.15 – 从项目设置复制 Game id 到检查器'
- en: '](img/Figure_6.15_B18381.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.15_B18381.jpg)'
- en: Figure 6.15 – Copy Game id from Project Settings to Inspector
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.15 – 从项目设置复制 Game id 到检查器
- en: 'We now need to add a function in our `PlayerShipBuild` script, that checks
    which device (iPhone/Samsung) is running our game. When we know which device is
    running, we can add the correct game ID and reward id to our advertisement initializer:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要在 `PlayerShipBuild` 脚本中添加一个函数，该函数检查运行我们游戏的是哪种设备（iPhone/Samsung）。当我们知道运行游戏的设备时，我们可以将正确的游戏
    ID 和奖励 ID 添加到我们的广告初始化器中：
- en: 'So, we can add an `Awake` function and inside it, we will call a function that
    we haven''t added yet:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，我们可以添加一个 `Awake` 函数，并在其中调用我们尚未添加的函数：
- en: '[PRE21]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can move on to declaring the `CheckPlatform` function; in the next
    line down from the `Awake` function, we can add the following:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以继续声明 `CheckPlatform` 函数；在 `Awake` 函数下一行，我们可以添加以下内容：
- en: '[PRE22]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: We've declared our function name and added a `gameId` variable that defaults
    to null.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经声明了函数名并添加了一个默认为 null 的 `gameId` 变量。
- en: 'Next, we will use conditional compilation to differentiate between what platform
    we are playing our game on so we can hook up the correct ids:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用条件编译来区分我们在哪个平台上玩游戏，这样我们就可以连接正确的 ID：
- en: '[PRE23]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'So, if we are using an iPhone/iPad device, we will assign the iOS game id to
    the variable called `gameId`. We will also be assigning the iOS reward to `adId`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果我们使用 iPhone/iPad 设备，我们将 iOS 游戏 ID 分配给名为 `gameId` 的变量。我们还将 iOS 奖励分配给 `adId`：
- en: '[PRE24]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: And, as you've probably guessed, we have an "else if" (it is spelled `elif`)
    that checks for an Android operating system (Samsung, Google Pixel devices, and
    so on).
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 并且，正如你可能猜到的，我们有一个 "else if"（拼写为 `elif`）来检查 Android 操作系统（三星、谷歌像素设备等）。
- en: 'Finally, we send the chosen `gameId` and its test mode condition and receive
    our Unity Ads callback:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们发送选定的 `gameId` 和测试模式条件，并接收 Unity Ads 回调：
- en: '[PRE25]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Further Information
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'If you would like to know more about conditional compilation, check out this
    link: [https://docs.unity3d.com/Manual/PlatformDependentCompilation.html](https://docs.unity3d.com/Manual/PlatformDependentCompilation.html).'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你想要了解更多关于条件编译的信息，请查看这个链接：[https://docs.unity3d.com/Manual/PlatformDependentCompilation.html](https://docs.unity3d.com/Manual/PlatformDependentCompilation.html)。
- en: As you can imagine, when we load up our `SHOP` scene, our game checks to see
    whether it's being played through a portable device. If it is being played through
    a portable device, it will send the correct ids out to Unity. Next, we will need
    to load the advert so if the player does request an advert, we have it ready to
    show.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所想，当我们加载 `SHOP` 场景时，我们的游戏会检查是否通过便携设备进行游戏。如果是通过便携设备进行游戏，它将发送正确的 ID 到 Unity。接下来，我们需要加载广告，以便如果玩家请求广告，我们可以准备好显示它。
- en: 'The next step is to load our advert with a small function. First, we need to
    check to see whether the Advertisement has finished initializing:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是使用一个小函数加载我们的广告。首先，我们需要检查广告是否已初始化完成：
- en: 'To check and load an advert for our game scroll up to the `Start` function
    and enter the following:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查和加载游戏中的广告，请滚动到`Start`函数并输入以下内容：
- en: '[PRE26]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: A coroutine will give us the ability to wait until the advert is initialized.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 一个协程将给我们等待广告初始化的能力。
- en: 'Outside of the `Start` function, enter the following code to check for when
    our advert can begin to load ready for the player:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Start`函数之外，输入以下代码以检查我们的广告何时可以开始加载，为玩家准备：
- en: '[PRE27]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The code will loop until our `Advertisement` is initialized. Once it is initialized,
    the `LoadAd` method will run.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 代码将循环，直到我们的`Advertisement`初始化完成。一旦初始化完成，`LoadAd`方法将运行。
- en: The `LoadAd` method will add an event listener, which will callback to our methods
    when specific tasks have been completed (when an advert is ready to be viewed,
    if there was an error, if the advert has started playing) that we've implemented
    from our two interfaces. The other thing the `LoadAd` method will do is take whichever
    advert id has been sent to it and load an advert specifically for the platform.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoadAd`方法将添加事件监听器，当特定任务完成时（当广告准备好查看时，如果有错误，如果广告已经开始播放）将回调到我们实现的两个接口中的方法。`LoadAd`方法还将做的一件事是接收发送给它的任何广告ID并加载特定于平台的广告。'
- en: The next method is for our `PlayerShipBuild` script to load the advert ready.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法是我们的`PlayerShipBuild`脚本加载广告准备。
- en: 'Type the following:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下内容：
- en: '[PRE28]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: It's important to note, whenever a Listener is added, remember to remove it
    when it's no longer required. If a listener is made, and the object is destroyed,
    this can cause issues as the listener may still be active. Also, if another listener
    is added that is doing the same job, you would be doubling or tripling callbacks,
    which in our case would mean doubling and tripling players' shop credits.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，每次添加监听器时，记得在不再需要时将其移除。如果创建了一个监听器，并且对象被销毁，这可能会导致问题，因为监听器可能仍然处于活动状态。此外，如果添加了另一个执行相同工作的监听器，你将加倍或三倍回调，在我们的情况下，这意味着加倍和三倍玩家的商店信用。
- en: 'We can now move on to setting up the `WatchAdvert` function, which will be
    the beginning of our advert to trigger on mobile devices when the player presses
    the **WATCH AD** button:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续设置`WatchAdvert`函数，这将是我们在玩家按下**观看广告**按钮时在移动设备上触发的广告的开始：
- en: 'Still in the `PlayerShipBuild` script, scroll down to the `AttemptSelection`
    method, where we already have the two `else if` statements, and enter the final
    `else if` statement to trigger an advert when the player presses the **WATCH**
    **AD** button in our shop scene:'
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在`PlayerShipBuild`脚本中，向下滚动到`AttemptSelection`方法，在那里我们已经有两个`else if`语句，并添加最后的`else
    if`语句以触发广告，当玩家在我们的商店场景中按下**观看** **广告**按钮时：
- en: '[PRE29]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If this button is pressed, we run a method called `WatchAdvert`. We will talk
    about this method next.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个按钮被按下，我们将运行一个名为`WatchAdvert`的方法。我们将在下一节讨论这个方法。
- en: 'Scroll to some space outside of all the other methods/functions and enter the
    following method to set up an advert for the player:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到所有其他方法/函数之外的空间，并输入以下方法来为玩家设置广告：
- en: '[PRE30]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `WatchAdvert` method is very simple. It runs the static `Advertisement.Show`
    method and takes the reward id.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`WatchAdvert`方法非常简单。它运行静态的`Advertisement.Show`方法并获取奖励ID。'
- en: Our Advert is nearly hooked up. We can now go down to the bottom of the script
    and fill in our callback methods.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的广告几乎已经连接好了。现在我们可以向下到脚本的底部并填写我们的回调方法。
- en: 'The methods and their purposes, in no particular order, are as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 方法及其目的，不分先后，如下所示：
- en: '`OnInitializationComplete()`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInitializationComplete()`'
- en: This method will run when our advert service has been initialized.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们的广告服务初始化时，此方法将运行。
- en: '`OnInitializationFailed(UnityAdsInitializationError error, string message)`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnInitializationFailed(UnityAdsInitializationError error, string message)`'
- en: If the advert service initialization has failed.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 如果广告服务初始化失败。
- en: '`OnUnityAdsReady(string placementId)`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnUnityAdsReady(string placementId)`'
- en: When a Unity advert is ready to play.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 当Unity广告准备好播放时。
- en: '`OnUnityAdsDidError(string message)`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnUnityAdsDidError(string message)`'
- en: An error happened with loading the advert.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 加载广告时发生了一个错误。
- en: '`OnUnityAdsDidStart(string placementId)`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnUnityAdsDidStart(string placementId)`'
- en: The advert has started playing.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 广告已经开始播放。
- en: '`OnUnityAdsDidFinish(string placementId, ShowResult showResult)`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`OnUnityAdsDidFinish(string placementId, ShowResult showResult)`'
- en: The advert has finished playing.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 广告已经播放完毕。
- en: Each of these methods has a line of code that fires an exception error because
    we haven't filled the methods in. It doesn't mean anything is wrong, it works
    more as a reminder.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法中的每一个都有一行代码会引发异常错误，因为我们还没有填充这些方法。这并不意味着有什么问题，它更像是一个提醒。
- en: 'Delete all lines of code that have this code in the following methods:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除以下方法中包含此代码的所有代码行：
- en: '[PRE31]'
  id: totrans-312
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This will stop our errors. If you want to add a `Debug.Log()` to each of these
    methods, you can, so you know either of these methods fire. I will focus only
    on three of the methods, two of them for Initialization and one to add the reward
    to the shop's bank.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这将停止我们的错误。如果你想在每个这些方法中添加`Debug.Log()`，你可以，这样你知道这些方法是否被触发。我将只关注三个方法，其中两个用于初始化，一个用于将奖励添加到商店的银行。
- en: 'Scroll to the method called `OnInitializationComplete()` and within its curly
    braces, enter the following:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到名为`OnInitializationComplete()`的方法，并在其大括号内输入以下内容：
- en: '[PRE32]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'For the second method, direct yourself to `OnInitializationFailed(UnityAdsInitializationError
    error, string message)` and enter the following code within its curly braces:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于第二个方法，直接导航到`OnInitializationFailed(UnityAdsInitializationError error, string
    message)`，并在其大括号内输入以下代码：
- en: '[PRE33]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `$` is used as an interpolation expression, which basically means whatever
    follows within curly braces will also be logged with the rest of the `string`.
    `error` will be the type of error, while `message` will carry a description of
    the error.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`$`用作插值表达式，这意味着大括号内跟随的内容也将与`string`中的其余部分一起记录。`error`将是错误的类型，而`message`将包含错误的描述。'
- en: Information
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: 'If you would like to know more about interpolation expressions, check out the
    following link: [https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated).'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于插值表达式的信息，请查看以下链接：[https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated).
- en: The last method is our reward given to the player. Navigate to the `OnUnityAdsDidFinish(string
    placementId, ShowResult showResult)` method.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个方法是给玩家提供的奖励。导航到`OnUnityAdsDidFinish(string placementId, ShowResult showResult)`方法。
- en: 'We will have three possible outcomes for if an advert is viewed. The possibilities
    are as follows:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 如果广告被观看，我们将有三个可能的结果。可能性如下：
- en: '`Finished`: Full advert has been watched.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`Finished`: 完整广告已观看。'
- en: '`Skipped`: The advert was skipped.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`Skipped`: 广告被跳过。'
- en: '`Failed`: Advert failed to load.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`Failed`: 广告加载失败。'
- en: 'These states will come from the `showResult` variable. Let''s enter the three
    possible `if` statements and then we can fill the rest of the method in:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这些状态将来自`showResult`变量。让我们输入三个可能的`if`语句，然后我们可以填充方法的其余部分：
- en: 'Within the `OnUnityAdsDidFinish(string placementId, ShowResult showResult)`
    method''s curly braces, enter the following:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`OnUnityAdsDidFinish(string placementId, ShowResult showResult)`方法的大括号内，输入以下内容：
- en: '[PRE34]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For our game, we only need to add content to the `ShowResult.Finished` statement.
    Replace `// REWARD PLAYER` with the following code to reward the player with `300`
    credits to their bank:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于我们的游戏，我们只需要向`ShowResult.Finished`语句添加内容。将`// REWARD PLAYER`替换为以下代码，以向玩家的银行账户奖励`300`积分：
- en: '[PRE35]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The first line we entered is a simple log to say the advert has landed in the
    `Finished` state. Next, we add `300` credits to our existing bank. Finally, we
    send the value to the `bankObj` `TextMesh` `text` value.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们输入的第一行是一个简单的日志，表示广告已进入`Finished`状态。接下来，我们向现有的银行账户中添加`300`积分。最后，我们将值发送到`bankObj`的`TextMesh``text`值。
- en: After the last `else if` in the `OnUnityAdsDidFinish` method, we finish by adding
    two lines of code. The first line loads another advert using the same reward id.
    The second line is a method that deselects all buttons in the shop (we covered
    this method in the last chapter).
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 在`OnUnityAdsDidFinish`方法中的最后一个`else if`之后，我们通过添加两行代码来完成。第一行使用相同的奖励ID加载另一个广告。第二行是一个方法，用于取消选择商店中的所有按钮（我们在上一章中介绍了这个方法）。
- en: 'So, still just outside the last `else if` curly brace, enter the following
    two lines:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，仍然在最后一个`else if`大括号之外，输入以下两行：
- en: '[PRE36]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We are now in a position to test our **WATCH AD** button in our shop scene
    to see whether our advert template will load:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以测试我们的商店场景中的**观看广告**按钮，看看我们的广告模板是否可以加载：
- en: Save the `PlayerShipBuild` script and return to the Unity Editor.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`PlayerShipBuild`脚本并返回到Unity编辑器。
- en: Make sure your **Build Settings** are pointing to an Android build. Click the
    **Play** button in the Editor.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的**构建设置**指向Android构建。在编辑器中点击**播放**按钮。
- en: 'In the **Game** window, click on the **WATCH AD** button. We should be presented
    with the following screen:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**游戏**窗口中，点击**观看广告**按钮。我们应该看到以下屏幕：
- en: '![Figure 6.16 – Unity''s advert placeholder screen'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.16 – Unity的广告占位符屏幕'
- en: '](img/Figure_6.16_B18381.jpg)'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.16_B18381.jpg](img/Figure_6.16_B18381.jpg)'
- en: Figure 6.16 – Unity's advert placeholder screen
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16 – Unity的广告占位符屏幕
- en: Click on the **Close** button in the top-right corner.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**关闭**按钮。
- en: Hopefully, your on-screen credit should have gone from `600` to `900`.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 希望你的屏幕上的信用值已经从`600`增加到`900`。
- en: That is the end of adding the functionality for the **WATCH AD** button. Save
    the script.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这就是添加**观看广告**按钮功能的结束。保存脚本。
- en: Our shop scene is complete and fully functioning with the ability to watch an
    advert to gain credits so that the player can purchase items to use in their game.
    We now need to expand the `PlayerSpawner` script to support new items that can
    potentially be added to the player ship.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的商店场景现在已经完成并完全功能化，玩家可以通过观看广告来获得信用，以便购买游戏中的物品。我们现在需要扩展`PlayerSpawner`脚本以支持可以添加到玩家飞船中的新物品。
- en: Extending the PlayerSpawner script
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展`PlayerSpawner`脚本
- en: 'If an item is purchased from our shop scene, this will affect what happens
    to our game scene when our player''s ship loads into the game. Our current `PlayerSpawner`
    script will not accommodate the `shop` scene ship, so we need to revisit this
    script to update its `CreatePlayer` method:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从我们的商店场景购买了一个物品，这将影响我们的游戏场景在玩家飞船加载到游戏中的行为。我们当前的`PlayerSpawner`脚本无法容纳`shop`场景的飞船，因此我们需要重新审查此脚本以更新其`CreatePlayer`方法：
- en: In the Unity Editor's `PlayerSpawner` script (`Assets/Script`).
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器的`PlayerSpawner`脚本中（`Assets/Script`）。
- en: 'At the top of the `PlayerSpawner` script, with the other variables, add a `bool`
    value:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PlayerSpawner`脚本的顶部，与其他变量一起，添加一个`bool`值：
- en: '[PRE37]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `upgradedShip` Boolean will switch to `true` if a modified player ship is
    found in the level.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在关卡中找到一个修改过的玩家飞船，`upgradedShip`布尔值将切换到`true`。
- en: 'Scroll down to the `Start` function in the `PlayerSpawner` script and add this
    as the last line with the `Start` function:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到`PlayerSpawner`脚本中的`Start`函数，并将以下内容作为`Start`函数的最后一行添加：
- en: '[PRE38]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Currently, our `PlayerShipBuild` script disables the `Player` script in the
    `shop` scene, to stop the player from shooting in the `shop`. When we start our
    `testLevel`, we need to turn the `Player` script back on so they can move and
    shoot We also add the camera setup from being close up to the shop's display from
    all the way back on it's z-axis for our `testLevel` as a temporary fix.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的`PlayerShipBuild`脚本在`shop`场景中禁用了`Player`脚本，以阻止玩家在`shop`中射击。当我们开始我们的`testLevel`时，我们需要将`Player`脚本重新启用，以便他们可以移动和射击。我们还添加了相机设置，从近距离的商店展示到整个z轴上的商店展示，作为对`testLevel`的临时修复。
- en: 'Replace the content of the `CreatePlayer` method with the following code to
    update detection of what ship is in our scene:'
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`CreatePlayer`方法的内文替换为以下代码以更新场景中飞船的检测：
- en: '[PRE39]'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: We first need to confirm that the `PlayerSpawner` script can see whether an
    upgrade has been purchased in the scene. If a purchase has been made, the modified
    player ship will carry over to the level scene. If this is the case, we set the
    `upgradedShip` variable to `true`.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先需要确认`PlayerSpawner`脚本可以看到场景中是否购买了升级。如果已经进行了购买，修改过的玩家飞船将携带到关卡场景中。如果是这种情况，我们将`upgradedShip`变量设置为`true`。
- en: 'Continuing on with the `PlayerSpawner` script, and still within the `CreatePlayer`
    method, we add an `if` statement, which instantiates the player:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续使用`PlayerSpawner`脚本，并且仍然在`CreatePlayer`方法中，我们添加一个`if`语句，实例化玩家：
- en: '[PRE40]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Continuing on inside the `CreatePlayer` method, we will now need to check whether
    there is a player ship in the scene or whether the player has died. If there hasn't
    been an upgrade or the player has died, we will create a default player ship with
    the following code.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CreatePlayer`方法内部继续，我们现在需要检查场景中是否有玩家飞船或者玩家是否已经死亡。如果没有升级或者玩家已经死亡，我们将使用以下代码创建一个默认玩家飞船。
- en: 'Inside the `if` statement, we create our default player ship by doing the following:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在`if`语句内部，我们通过以下方式创建默认玩家飞船：
- en: Set the `Died` property to `false` to stop the `if` statement repeating if the
    player has died.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Died`属性设置为`false`以停止如果玩家已经死亡时`if`语句的重复。
- en: Instantiate the `Player_Default` scriptable object, which contains all the standard
    properties for our player's ship, and store it in a variable named `actorModel`.
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实例化包含我们玩家飞船所有标准属性的`Player_Default`可脚本对象，并将其存储在名为`actorModel`的变量中。
- en: Next, we instantiate our player's ship, position it, and rotate it in the correct
    direction.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们实例化玩家的飞船，将其定位并旋转到正确的方向。
- en: Finally, in this `if` statement, we issue the `actorModel` variable containing
    all the properties that the player ship game object needs.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在这个`if`语句中，我们发出包含所有玩家飞船游戏对象所需属性的`actorModel`变量。
- en: However, if our player has been shopping and bought one or more upgrades, this
    will fall into the `else` condition, where we will find a game object called `UpgradedShip`.
    We will attach this game object to our `playerShip` game object variable.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果我们的玩家已经购物并购买了一个或多个升级，这将进入`else`条件，在那里我们将找到一个名为`UpgradedShip`的游戏对象。我们将此游戏对象附加到我们的`playerShip`游戏对象变量。
- en: 'Enter the following code to set a store reference to `playerShip`:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码以设置商店引用到`playerShip`：
- en: '[PRE41]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With our `playerShip` game object stored as an instance, we can now set it up
    so that it's in the correct position and has the correct size, rotation, and so
    on.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的`playerShip`游戏对象存储为一个实例后，我们现在可以设置它使其处于正确的位置和大小，旋转等等。
- en: 'Enter the following functions to set our `playerShip` object up for the start
    of a game:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下函数以设置我们的`playerShip`对象以开始游戏：
- en: '[PRE42]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We then move on to the last bit of code for the `PlayerSpawner` script where
    our player's ship is set up ready to start. Take note that even if the player
    purchases an upgrade, this won't create any complications with regard to getting
    the reference of the player ship.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们继续编写`PlayerSpawner`脚本的最后一段代码，其中我们的玩家飞船被设置好以准备开始。请注意，即使玩家购买了升级，这也不会在获取玩家飞船引用方面引起任何问题。
- en: Set the rotation so the player's ship faces the correct way.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置旋转，使玩家的飞船面向正确的方向。
- en: Scale the player's ship correctly.
  id: totrans-374
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正确缩放玩家的飞船。
- en: Turn the `Player` script off so the player can't control the ship while it carries
    out its intro animation.
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭`Player`脚本，以便在执行开场动画时玩家无法控制飞船。
- en: Name the player's ship `Player`.
  id: totrans-376
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将玩家的飞船命名为`Player`。
- en: Finally, set the player's ship as a child to the `playerSpawner` game object
    as it belongs to the `playerSpawner` game object.
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将玩家的飞船设置为`playerSpawner`游戏对象的子对象，因为它属于`playerSpawner`游戏对象。
- en: Go back to the `GameManager` script, scroll down to `void CameraSetup()` and
    change it's access modifier to `public`. So it reads `public void CameraSetup()`.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到`GameManager`脚本，滚动到`void CameraSetup()`并将它的访问修饰符更改为`public`。因此它读作`public
    void CameraSetup()`。
- en: Save the script.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: We have updated the player's ship so that it is created for a default ship or
    as a customized one from the shop scene. Also, we have made it aware of the `PlayerTransition`
    script so that when the player's ship is created, it won't get stuck in the screen
    boundaries or the player won't be in a position where they aren't able to control
    the ship until its introductory animation has finished.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经更新了玩家的飞船，使其可以创建为默认飞船或从商店场景中定制的飞船。我们还使其意识到`PlayerTransition`脚本，以便当玩家的飞船被创建时，它不会卡在屏幕边界内，或者玩家不会处于无法控制飞船的位置，直到其开场动画完成。
- en: Finally, we now need to create and add our `b. Shot` weapon asset to our game.
    The majority of the scripting has already been done; it just needs to be attached
    to the correct components.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们现在需要创建并添加我们的`b. Shot`武器资产到游戏中。大多数脚本编写工作已经完成；它只需要附加到正确的组件上。
- en: 'To give our `b. Shot` prefab weapon its behavior, we need to do the following:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 为了给我们的`b. Shot`预制武器赋予行为，我们需要做以下事情：
- en: In the `Assets/Resources` and select `b. Shot`.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Assets/Resources`中，选择`b. Shot`。
- en: Now, in the `BShot Component` until it appears in the drop-down list, and then
    select it.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`BShot Component`中，直到它出现在下拉列表中，然后选择它。
- en: We now need to apply our `bShotComponent` to the script.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要将我们的`bShotComponent`应用到脚本上。
- en: 'Click the small, round remote circle next to the `player_BshotBullet`, as shown
    in the following screenshot:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`player_BshotBullet`旁边的那个小、圆形的遥控圈，如下面的截图所示：
- en: '![Figure 6.17 – B Shot Component script with player_BshotBullet game object'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.17 – B Shot Component script with player_BshotBullet game object]'
- en: '](img/Figure_6.17_B18381.jpg)'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.17_B18381.jpg]'
- en: Figure 6.17 – B Shot Component script with player_BshotBullet game object
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17 – B射击组件脚本与`player_BshotBullet`游戏对象
- en: Our `b. Shot` weapon will now fire. Next, we need to make the bullet travel,
    following a similar process as we did in *Chapter 2*, *Adding and Manipulating
    Objects*, where we made our first player bullet fire and travel across the screen.
    This means we can use the script we've already made and attach it to the `player_BshotBullet`
    prefab.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`b. Shot`武器现在将发射。接下来，我们需要让子弹移动，遵循与我们在*第2章*中相同的流程，*添加和操作对象*，在那里我们让第一个玩家子弹发射并穿越屏幕。这意味着我们可以使用我们已编写的脚本并将其附加到`player_BshotBullet`预制件上。
- en: 'To attach and customize the `player_BshotBullet` prefab, we need to do the
    following:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 要附加并自定义`player_BshotBullet`预制件，我们需要执行以下操作：
- en: In the `Assets/Prefab/Player` and select `player_BshotBullet`.
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Assets/Prefab/Player`中，选择`player_BshotBullet`。
- en: In the `PlayerBullet` until you see it in the drop-down list, and then select
    it.
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PlayerBullet`中找到它，直到它在下拉列表中显示，然后选择它。
- en: Back in the `Assets/ScriptableObject`.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到`Assets/ScriptableObject`。
- en: Right-click in the open space on the right side of the **Project** window and
    select **Create** | **Create Actor**.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**窗口右侧的空白区域右键单击，然后选择**创建** | **创建演员**。
- en: Name the new file in the `bShotBullet` and select it.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bShotBullet`中命名新文件并选择它。
- en: 'Give it the following values in the **Inspector** window:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中给它以下值：
- en: '![Figure 6.18 – ShotBullet Scriptable Object and its properties'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.18 – ShotBullet Scriptable Object及其属性'
- en: '](img/Figure_6.18_B18381.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.18_B18381.jpg](img/Figure_6.18_B18381.jpg)'
- en: Figure 6.18 – ShotBullet Scriptable Object and its properties
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.18 – ShotBullet Scriptable Object及其属性
- en: 'We are approaching the end of this chapter. Now is the time to check everything
    out to see how it all plays out for us:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在接近本章的结尾。现在是检查一切以查看它如何为我们发挥作用的时候了：
- en: Save all the open scripts.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有打开的脚本。
- en: Save the **Shop** scene.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存**商店**场景。
- en: Click on **Play** mode in the Unity Editor.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中点击**播放**模式。
- en: Try and buy all three ship upgrades (you will need to watch a couple of the
    Unity notification advert displays to get them all).
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试购买所有三个飞船升级（你需要观看几个Unity通知广告以获得它们）。
- en: 'Click on the **START** button and you should see a screen such as the following
    one with our ship holding all three upgrades:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始**按钮，你应该会看到一个类似于以下屏幕的界面，我们的飞船持有所有三个升级：
- en: '![Figure 6.19 – Our player ship with all the upgrades'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 6.19 – 我们带有所有升级的玩家飞船'
- en: '](img/Figure_6.19_B18381.jpg)'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.19_B18381.jpg](img/Figure_6.19_B18381.jpg)'
- en: Figure 6.19 – Our player ship with all the upgrades
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.19 – 我们带有所有升级的玩家飞船
- en: Our player is fully equipped! If the player gets hit, they will lose a shield
    and the front cover on the ship will disappear. If the ship fires with the firepower
    upgrade, it will wipe out all the enemies. The atom bomb currently isn't programmed
    to do anything.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的玩家现在全副武装！如果玩家被击中，他们将失去护盾，飞船的前部覆盖物将消失。如果飞船使用火力升级，它将消灭所有敌人。目前原子弹尚未编程执行任何操作。
- en: If you have come across any issues with this final section, you can check the
    official Unity guide, which also contains other information about adverts and
    rewards, if you are interested ([https://unityads.unity3d.com/help/unity/integration-guide-unity](https://unityads.unity3d.com/help/unity/integration-guide-unity)).
    Or compare our script and scene with the `Complete` folder of `Chapter6` from
    the downloaded project files link at the beginning of this chapter.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在本节的最后遇到了任何问题，你可以查看官方Unity指南，其中还包含有关广告和奖励的其他信息，如果你感兴趣的话（[https://unityads.unity3d.com/help/unity/integration-guide-unity](https://unityads.unity3d.com/help/unity/integration-guide-unity)）。或者将我们的脚本和场景与本章开头提供的下载项目文件的链接中的`Chapter6`的`Complete`文件夹进行比较。
- en: Congratulations, you have reached the end of this chapter and also the end of
    the shop scene! Hopefully, you found this beneficial and can appreciate how Unity
    is keen to encourage developers to look at alternative ways of making money from
    a game with adverts instead of simply selling the games they develop. We will
    now summarize what we covered in this chapter and look at how we will build our
    game even further.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜你，你已经到达了本章的结尾，也到达了商店场景的结尾！希望你觉得这很有益，并能欣赏Unity如何热衷于鼓励开发者寻找从游戏中通过广告赚钱的替代方法，而不是简单地销售他们开发的游戏。我们现在将总结本章涵盖的内容，并探讨我们将如何进一步构建我们的游戏。
- en: Summary
  id: totrans-413
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we created a scene that we can interact with to modify our
    player with in-app purchases and that we can also use to gain more in-game credits
    by watching adverts on an iPhone or Android phone to buy more items to further
    upgrade the player. We will look at building the game on mobile in the [*Appendix*](B18381_Appendix_Epub.xhtml#_idTextAnchor245)
    section of this book, as well as how to hide the **AD** button on PC/macOS platforms.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们创建了一个可以与之交互的场景，以便通过应用内购买来修改我们的玩家，同时我们还可以通过在iPhone或Android手机上观看广告来获得更多游戏内积分，从而购买更多物品以进一步升级玩家。我们将在本书的[*附录*](B18381_Appendix_Epub.xhtml#_idTextAnchor245)部分查看如何在移动设备上构建游戏，以及如何在PC/macOS平台上隐藏**广告**按钮。
- en: Finally, we carried all the items we bought over into the game, because of which
    the player's gameplay has been altered thanks to the modifications.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将所有购买的物品都带到了游戏中，因此玩家的游戏玩法因修改而改变。
- en: As mentioned a few times in this chapter, the scene had already been made for
    us in terms of the art. The reason for this was to allow you to experience raycasting
    objects and to understand that this is an alternative way of interacting in a
    scene. But what if the platform we are playing this game on is an iPad? An iPad
    is more of a square shape, compared to the letterbox shape of an iPhone or Android
    phone. If this is the case, our game camera would clip parts of our shop scene
    out.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章中提到的几次，从艺术角度来看，场景已经为我们准备好了。这样做的原因是让你体验射线投射对象，并理解这是在场景中交互的另一种方式。但如果我们在上面玩游戏的平台是iPad呢？与iPhone或Android手机的信封形状相比，iPad更接近方形。如果是这种情况，我们的游戏摄像头会裁剪掉商店场景的一部分。
- en: You could also think of a more efficient way of using things such as `.Find`
    in your coding. If this is a concern of yours, don't worry—we address these issues
    in [*Chapter 9*](B18381_09_Epub.xhtml#_idTextAnchor161), *Creating a 2D Shop Interface
    and In-Game HUD*, where we implement Unity's own event system. For now, however,
    let's look at what we will cover in the next chapter.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以考虑在编码中使用诸如`.Find`之类的功能的一种更有效的方法。如果这是你的担忧，请不要担心——我们在[*第9章*](B18381_09_Epub.xhtml#_idTextAnchor161)中解决了这些问题，即*创建2D商店界面和游戏内HUD*，在那里我们实现了Unity自己的事件系统。然而，现在，让我们看看下一章我们将要涵盖的内容。
- en: In the next chapter, we are going to link up all of our scenes to create what
    we refer to as a game loop. This will help us understand the actual game layout
    as a whole.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将把所有场景连接起来，创建我们所说的游戏循环。这将帮助我们理解整个游戏布局。
