["```cs\nuse Personal\ndb.Personal.help()\n\n```", "```cs\nmongoimport --jsonArray --db Cyclists --collection Ranking16 < c:\\data\\db\\Ranking15.json\n2016-05-06T13:57:49.755+0200    connected to: localhost\n2016-05-06T13:57:49.759+0200    imported 40 documents\n\n```", "```cs\n> db.Ranking16.find( {\"Nation\": \"Great Britain\"} )\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f000019\"), \"Rank\" : \"25 (24)\", \"Name\" : \"Geraint THOMAS\", \"Nation\" : \"Great Britain\", \"Team\" : \"SKY\", \"Age*\" : 30, \"Points\" : 743 }\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f000022\"), \"Rank\" : \"34 (32)\", \"Name\" : \"Ian STANNARD\", \"Nation\" : \"Great Britain\", \"Team\" : \"SKY\", \"Age*\" : 29, \"Points\" : 601 }\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f000025\"), \"Rank\" : \"37 (35)\", \"Name\" : \"Ben SWIFT\", \"Nation\" : \"Great Britain\", \"Team\" : \"SKY\", \"Age*\" : 29, \"Points\" : 556 }\n\n```", "```cs\n> db.Ranking16.find( {\"Nation\": \"Great Britain\"} )[0]\n{\n \"_id\" : ObjectId(\"572c8b77e8200fb42f000019\"),\n \"Rank\" : \"25 (24)\",\n \"Name\" : \"Geraint THOMAS\",\n \"Nation\" : \"Great Britain\",\n \"Team\" : \"SKY\",\n \"Age*\" : 30,\n \"Points\" : 743\n}\n\n```", "```cs\n> db.Ranking16.find( {\"Nation\": \"Spain\"}, {\"Name\":1, \"Age*\":1} )\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f000006\"), \"Name\" : \"Alberto CONTADOR VELASCO\", \"Age*\" : 34 }\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f00000a\"), \"Name\" : \"Alejandro VALVERDE BELMONTE\", \"Age*\" : 36 }\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f00000e\"), \"Name\" : \"Jon IZAGUIRRE INSAUSTI\", \"Age*\" : 27 }\n{ \"_id\" : ObjectId(\"572c8b77e8200fb42f00001c\"), \"Name\" : \"Samuel SANCHEZ GONZALEZ\", \"Age*\" : 38 }\n\n```", "```cs\n> db.Ranking16.find( {\"Nation\": \"Italy\"}, {\"Name\":1, \"Team\":1, \"_id\": 0 } )\n{ \"Name\" : \"Sonny COLBRELLI\", \"Team\" : \"BAR\" }\n{ \"Name\" : \"Enrico GASPAROTTO\", \"Team\" : \"WGG\" }\n{ \"Name\" : \"Diego ULISSI\", \"Team\" : \"LAM\" }\n{ \"Name\" : \"Giovanni VISCONTI\", \"Team\" : \"MOV\" }\n\n```", "```cs\n> var fellows = db.Ranking16.find({\"Nation\":\"Australia\"} , { \"Name\":1 , \"Nation\":1, \"_id\":0 });\n> fellows\n{ \"Name\" : \"Richie PORTE\", \"Nation\" : \"Australia\" }\n{ \"Name\" : \"Simon GERRANS\", \"Nation\" : \"Australia\" }\n{ \"Name\" : \"Michael MATTHEWS\", \"Nation\" : \"Australia\" }\n\n```", "```cs\n> db.Ranking16.find( {\"Points\": {$gt:1000, $lte: 1300}}, {\"Name\":1, \"_id\": 0 } )\n{ \"Name\" : \"Alexander KRISTOFF\" }\n{ \"Name\" : \"Sep VANMARCKE\" }\n{ \"Name\" : \"Ilnur ZAKARIN\" }\n{ \"Name\" : \"Alejandro VALVERDE BELMONTE\" }\n{ \"Name\" : \"Sergio Luis HENAO MONTOYA\" }\n{ \"Name\" : \"Richie PORTE\" }\n{ \"Name\" : \"Wouter POELS\" }\n\n```", "```cs\n{ $or: [ {\"Nation\" : \"Great Britain\"}, { \"Nation\": \"Ireland\" }, {\"Nation\" : \"Australia\"} ] }\n\n```", "```cs\n> db.Ranking16.find( { $or : [ {\"Nation\": \"Great Britain\"}, { \"Nation\" : \"Ireland\"}, { \"Nation\": \"Australia\" } ] } , {\"Name\":1, \"_id\": 0 } )\n{ \"Name\" : \"Richie PORTE\" }\n{ \"Name\" : \"Simon GERRANS\" }\n{ \"Name\" : \"Geraint THOMAS\" }\n{ \"Name\" : \"Michael MATTHEWS\" }\n{ \"Name\" : \"Daniel MARTIN\" }\n{ \"Name\" : \"Ian STANNARD\" }\n{ \"Name\" : \"Ben SWIFT\" }\n\n```", "```cs\n> var newCyclist = {\n... \"Rank\" : 139,\n... \"Name\": \"Lawson CRADDOCK\",\n... \"Nation\": \"United States\",\n... \"Team\" : \"CPT\",\n... \"Age*\": 24,\n... \"Points\": 208\n... }\n> db.Ranking16.insert(newCyclist)\nWriteResult({ \"nInserted\" : 1 })\n\n```", "```cs\n> newCyclist\n{\n \"Rank\" : 139,\n \"Name\" : \"Lawson CRADDOCK\",\n \"Nation\" : {\n \"Name\" : \"United States\",\n \"State\" : \"Washington\",\n \"City\" : \"Tacoma\"\n },\n \"Team\" : \"CPT\",\n \"Age*\" : 24,\n \"Points\" : 208\n}\n\n```", "```cs\n> db.Ranking16.update({ \"Name\": \"Lawson CRADDOCK\" }, { \"Name\" : \"Tejay VAN GARDEREN\"})\nWriteResult({ \"nMatched\" : 1, \"nUpserted\" : 0, \"nModified\" : 1 })\n\n```", "```cs\n> db.Ranking16.createIndex( { Name: \"text\", Nation: \"text\"} )\n{\n \"createdCollectionAutomatically\" : false,\n \"numIndexesBefore\" : 1,\n \"numIndexesAfter\" : 2,\n \"ok\" : 1\n}\n\n```", "```cs\n> db.Ranking16.find( { $text: { $search: \"Tejay Lawson\" } }).pretty()\n{\n \"_id\" : ObjectId(\"572cdb8c03caae1d2e97b8f1\"),\n \"Rank\" : 52,\n \"Name\" : \"Tejay VAN GARDEREN\",\n \"Nation\" : {\n \"Name\" : \"United States\",\n \"State\" : \"Washington\",\n \"City\" : \"Tacoma\"\n },\n \"Team\" : \"BMC\",\n \"Age*\" : 28,\n \"Points\" : 437\n}\n{\n \"_id\" : ObjectId(\"572cdcc103caae1d2e97b8f2\"),\n \"Rank\" : 139,\n \"Name\" : \"Lawson CRADDOCK\",\n \"Nation\" : \"United States\",\n \"Team\" : \"CPT\",\n \"Age*\" : 24,\n \"Points\" : 308\n}\n\n```", "```cs\n{ field: { $in: [<value1>, <value2>, ... <valueN> ] } }\n\n```", "```cs\n> db.Ranking16.find( {\"Nation\": { $in: [\"France\", \"Spain\"] }}, {\"_id\":0, \"Rank\":0, \"Points\":0, \"Age*\":0, \"Team\":0})\n{ \"Name\" : \"Thibaut PINOT\", \"Nation\" : \"France\" }\n{ \"Name\" : \"Alberto CONTADOR VELASCO\", \"Nation\" : \"Spain\" }\n{ \"Name\" : \"Alejandro VALVERDE BELMONTE\", \"Nation\" : \"Spain\" }\n{ \"Name\" : \"Jon IZAGUIRRE INSAUSTI\", \"Nation\" : \"Spain\" }\n{ \"Name\" : \"Arnaud DEMARE\", \"Nation\" : \"France\" }\n{ \"Name\" : \"Bryan COQUARD\", \"Nation\" : \"France\" }\n{ \"Name\" : \"Nacer BOUHANNI\", \"Nation\" : \"France\" }\n{ \"Name\" : \"Samuel SANCHEZ GONZALEZ\", \"Nation\" : \"Spain\" }\n{ \"Name\" : \"Romain BARDET\", \"Nation\" : \"France\" }\n{ \"Name\" : \"Julian ALAPHILIPPE\", \"Nation\" : \"France\" }\n\n```", "```cs\npublic class Customer\n{\n  public ObjectId _id { get; set; }\n  public string CustomerID { get; set; }\n  public string CompanyName { get; set; }\n  public string ContactName { get; set; }\n  public string ContactTitle { get; set; }\n  public string Address { get; set; }\n  public string City { get; set; }\n  public object Region { get; set; }\n  public string PostalCode { get; set; }\n  public string Country { get; set; }\n  public string Phone { get; set; }\n  public string Fax { get; set; }\n}\n```", "```cs\nclass Program\n{\n  static IMongoClient client;\n  static IMongoDatabase db;\n  static void Main(string[] args)\n  {\n    BasicQuery();\n  }\n  private static void BasicQuery()\n  {\n    client = new MongoClient();\n    db = client.GetDatabase(\"NorthWind\");\n    var coll = db.GetCollection<Customer>(\"Customers\");\n\n    var americanCustomers = coll.Find(c => c.Country == \"USA\")\n    .ToListAsync().Result;\n    string title = \"Customers from United States\";\n    Console.WriteLine(title);\n    Console.WriteLine(string.Concat(Enumerable.Repeat(\"-\", title.Length)));\n    foreach (var c in americanCustomers)\n    {\n      Console.WriteLine($\"Name: {c.ContactName}, \\t City: {c.City} \");\n    }\n    Console.Read();\n  }\n}\n```", "```cs\nasync private static void CustomerQueryAsync()\n{\n  client = new MongoClient();\n  db = client.GetDatabase(\"NorthWind\");\n  var coll = db.GetCollection<Customer>(\"Customers\");\n  var owners = await coll.FindAsync(c =>\n    (c.Country == \"USA\" || c.Country == \"UK\") && c.ContactTitle == \"Owner\")\n  .Result.ToListAsync();\n  string title = \"Owners from USA or UK\";\n  Console.WriteLine(title);\n  Console.WriteLine(string.Concat(Enumerable.Repeat(\"-\", title.Length)));\n  foreach (var c in owners)\n  {\n    Console.WriteLine($\"Name: {c.ContactName}, \\t City: {c.City} \");\n  }\n}\n```", "```cs\nasync private static void DeleteCustomerAsync()\n{\n  var CustDel = await coll.FindOneAndDeleteAsync(c => c.CustomerID == \"CHOPS\");\n  // List customers from Switzerland to check deletion\n  BasicQuery(\"Switzerland\");\n}\n```", "```cs\nasync private static void InsertCustomerAsync()\n{\n  Customer newCustomer = new Customer()\n  {\n    CustomerID = \"ZZZZZ\",\n    CompanyName = \"The Z Company\",\n    ContactName = \"Zachary Zabek\",\n    City = \"Zeeland\",\n    Region = \"Michigan\",\n    Country = \"USA\"\n  };\n  await coll.InsertOneAsync(newCustomer);\n  BasicQuery(\"USA\");\n  Console.Read();\n}\n```", "```cs\nasync private static void ModifyCustomerAsync()\n{\n  var filter = Builders<Customer>.Filter.Eq(\"CompanyName\", \"The Z Company\");\n  var update = Builders<Customer>.Update\n  .Set(\"CompanyName\", \"ZZZZZ Enterprises\");\n  var result = await coll.UpdateOneAsync(filter, update);\n  BasicQueryByCompany(\"USA\");\n}\n```"]