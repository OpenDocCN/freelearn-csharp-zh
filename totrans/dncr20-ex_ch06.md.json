["```cs\n@{ var i = 0; }\n@do {\n  }while(i< array.Length)\n```", "```cs\n@functions { public string GetTime(){\n  return     DateTime.Now.ToString();\n}}\n```", "```cs\n<a asp-action=\"Read\" asp-controller=\"Book\">Read my book</a>\n```", "```cs\n@page\n<h1>Hello from .NET Core 2.0 By Example</h1>\n```", "```cs\n    /// <summary>\n    /// The class to hold the user information.\n    /// </summary>\n    public class UserInformation\n    {\n        /// <summary>\n        /// Initializes a new instance of the <see \n            cref=\"UserInformation\"/> class.\n        /// </summary>\n        /// <param name=\"connectionId\">The connection identifier.\n            </param>\n        /// <param name=\"name\">The name of user.</param>\n        /// <param name=\"imageUrl\">The url of user's profile picture.\n            </param>\n        public UserInformation(string connectionId, string name, string \n        imageUrl)\n        {\n            this.ConnectionId = connectionId;\n            this.Name = name;\n            this.ImageUrl = imageUrl;\n        }\n\n        /// <summary>\n        /// Gets the image path of the user\n        /// </summary>\n        public string ImageUrl { get; }\n\n        /// <summary>\n        /// Gets the connection identifier.\n        /// </summary>\n        public string ConnectionId { get; }\n\n        /// <summary>\n        /// Gets the name of user.\n        /// </summary>\n        public string Name { get; }\n    }\n```", "```cs\n    /// <summary>\n    /// Contract for user tracking.\n    /// </summary>\n    public interface IUserTracker\n    {\n        /// <summary>\n        /// Gets all the online users (connected to chat hub)\n        /// </summary>\n        /// <returns>A collection of online user information</returns>\n        Task<IEnumerable<UserInformation>> GetAllOnlineUsersAsync();\n\n        /// <summary>\n        /// Add user to User Tracker data store. This would be called \n            when a user joins the chat hub.\n        /// </summary>\n        /// <param name=\"connection\">The hub connection context.\n            </param>\n        /// <param name=\"userInfo\">The user information</param>\n        /// <returns>The task.</returns>\n        Task AddUserAsync(HubConnectionContext connection, \n        UserInformation userInfo);\n\n        /// <summary>\n        /// Removes user from User Tracker data store. This would be \n            called when a user leaves the chat hub.\n        /// </summary>\n        /// <param name=\"connection\">The hub connection context.\n            </param>\n        /// <returns>The task.</returns>\n        Task RemoveUserAsync(HubConnectionContext connection);\n    }\n```", "```cs\nnamespace Microsoft.AspNetCore.SignalR\n{\n    public class HubConnectionContext\n    {\n        public HubConnectionContext(WritableChannel<HubMessage> output, \n        ConnectionContext connectionContext);\n\n        public virtual string ConnectionId { get; }\n        public virtual ClaimsPrincipal User { get; }\n        public virtual IFeatureCollection Features { get; }\n        public virtual IDictionary<object, object> Metadata { get; }\n        public virtual HubProtocolReaderWriter ProtocolReaderWriter {  \n        get; set; }\n        public virtual WritableChannel<HubMessage> Output { get; }\n    }\n}\n```", "```cs\n    /// <summary>\n    /// The User Tracker class for tracking users that are connected to  \n        chat.\n    /// </summary>\n    public class UserTracker : IUserTracker\n    {\n        /// <summary>\n        /// The private storage for keeping the track of online users \n            connected to chat hub.\n        /// We are going to register the User Tracker as singleton, so    \n            no need to make it as static as it would be resued once the   \n            class is initialized.\n        /// </summary>\n        private readonly ConcurrentDictionary<HubConnectionContext, \n        UserInformation> onlineUserStore = new \n        ConcurrentDictionary<HubConnectionContext, UserInformation>();\n\n        /// <summary>\n        /// Add user to User Tracker data store. This would be called \n            when a user joins the chat hub.\n        /// </summary>\n        /// <param name=\"connection\">The hub connection context.\n            </param>\n        /// <param name=\"userInfo\">The user information</param>\n        /// <returns>The task.</returns>\n        public async Task AddUserAsync(HubConnectionContext connection, \n        UserInformation userInfo)\n        {\n            //// Add the connection and user to the local storage.\n            onlineUserStore.TryAdd(connection, userInfo);\n            await Task.CompletedTask;\n        }\n\n        /// <summary>\n        /// Gets all the online users (connected to chat hub)\n        /// </summary>\n        /// <returns>A collection of online user information</returns>\n        public async Task<IEnumerable<UserInformation>> \n        GetAllOnlineUsersAsync() => await \n        Task.FromResult(onlineUserStore.Values.AsEnumerable());\n\n        /// <summary>\n        /// Removes user from User Tracker data store. This would be \n            called when a user leaves the chat hub.\n        /// </summary>\n        /// <param name=\"connection\">The hub connection context.\n            </param>\n        /// <returns>The task.</returns>\n        public async Task RemoveUserAsync(HubConnectionContext \n        connection)\n        {\n            //// Remove the connection and user from the local storage.\n            if (onlineUserStore.TryRemove(connection, out var \n            userInfo))\n            {\n                await Task.CompletedTask;\n            }\n        }\n    }\n```", "```cs\n//// Register IUserTracker as singleton.\nservices.AddSingleton(typeof(IUserTracker), typeof(UserTracker));\n\nservices.AddSignalR();   //// Adds SignalR goodness in the container.  \n```", "```cs\n    /// <summary>\n    /// The Chat hub class.\n    /// </summary>\n    [Authorize]\n    public class ChatHub : Hub\n    {\n        /// <summary>\n        /// The user tracker to keep track of online users.\n        /// </summary>\n        private IUserTracker userTracker;\n\n        /// <summary>\n        /// Initializes a new instance of the <see cref=\"ChatHub\"/> \n            class.\n        /// </summary>\n        /// <param name=\"userTracker\">The user tracker.</param>\n        public ChatHub(IUserTracker userTracker) \n        {\n            this.userTracker = userTracker;\n        }\n    }\n```", "```cs\n    /// <summary>\n    /// The Helper class.\n    /// </summary>\n    public static class Helper\n    {\n        /// <summary>\n        /// Gets the user information from the Hub caller context.\n        /// </summary>\n        /// <param name=\"context\">The Hub Caller Context.</param>\n        /// <returns>The user Information.</returns>\n        public static UserInformation \n        GetUserInformationFromContext(HubCallerContext context)\n        {\n            Claim nameIdentifierClaim = \n            context.User.Claims.FirstOrDefault(j => j.Type ==   \n            \"http://schemas.xmlsoap.org/ws/2005/05/\n            identity/claims/nameidentifier\")\n            ; //// Make it a constant.\n            var userId = nameIdentifierClaim.Value; //// Get user Id.\n            var imageUrl = \n            $\"https://graph.facebook.com/{userId}/picture?type=square\"; \n            //// Get FB image.\n            return new UserInformation(context.ConnectionId, \n            context.User.Identity.Name, imageUrl);\n        }\n    }\n```", "```cs\n        /// <summary>\n        /// Gets all the connected user list.\n        /// </summary>\n        /// <returns>The collection of online users.</returns>\n        public async Task<IEnumerable<UserInformation>> \n        GetOnlineUsersAsync()\n        {\n            return await userTracker.GetAllOnlineUsersAsync();\n        }\n\n        /// <summary>\n        /// Fires on client connected.\n        /// </summary>\n        /// <returns>The task.</returns>\n        public override async Task OnConnectedAsync()\n        {\n            var user = Helper.GetUserInformationFromContext(Context);\n            await this.userTracker.AddUserAsync(Context.Connection, \n            user);\n            await Clients.All.InvokeAsync(\"UsersJoined\", new \n            UserInformation[] { user });\n            //// On connection, refresh online list.\n            await Clients.All.InvokeAsync(\"SetUsersOnline\", await \n            GetOnlineUsersAsync());\n\n            await base.OnConnectedAsync();\n        }\n\n        /// <summary>\n        /// Fires when client disconnects.\n        /// </summary>\n        /// <param name=\"exception\">The exception.</param>\n        /// <returns>The task.</returns>\n        public override async Task OnDisconnectedAsync(Exception \n        exception)\n        {\n            var user = Helper.GetUserInformationFromContext(Context);\n            await Clients.All.InvokeAsync(\"UsersLeft\", new \n            UserInformation[] { user });\n            await this.userTracker.RemoveUserAsync(Context.Connection);\n            //// On disconnection, refresh online list.\n            await Clients.All.InvokeAsync(\"SetUsersOnline\", await \n            GetOnlineUsersAsync());\n            await base.OnDisconnectedAsync(exception);\n        }\n\n        /// <summary>\n        /// Sends the message to all the connected clients.\n        /// </summary>\n        /// <param name=\"message\">The message to be sent.</param>\n        /// <returns>A task.</returns>\n        public async Task Send(string message)\n        {\n            UserInformation user = \n            Helper.GetUserInformationFromContext(Context);\n            await Clients.All.InvokeAsync(\"Send\", user.Name, message, \n            user.ImageUrl);\n        }\n```", "```cs\n//// Use - SignalR & let it know to intercept and map any request having chatHub.\napp.UseSignalR(routes =>\n{\n   routes.MapHub<ChatHub>(\"chatHub\");\n});\n```", "```cs\n<script src=\"img/jquery.js\"></script>\n<link href=\"~/css/site.css\" rel=\"stylesheet\" />\n<script src=\"img/signalr-client-1.0.0-alpha1-final.js\"></script>\n<script src=\"img/signalr-clientES5-1.0.0-alpha1-final.js\"></script>\n<script src=\"img/signalr-msgpackprotocol-1.0.0-alpha1-final.js\"></script>\n```", "```cs\n<script type=\"text/javascript\">\n    let hubUrl = '/chatHub';\n    let httpConnection = new signalR.HttpConnection(hubUrl);\n    let hubConnection = new signalR.HubConnection(httpConnection);\n</script>\n```", "```cs\n hubConnection.on('SetUsersOnline', usersOnline => {\n        if (usersOnline.length > 0) {\n            $('#onlineUsers').innerText = '';\n            $.each(usersOnline, function (i, user) {\n                //// Display users in the panel.\n            });\n        }\n    });\n\n    hubConnection.on('UsersJoined', users => {\n        if (users != null && typeof (users) != undefined) {\n            appendLine(users.name + ' joined the chat room', 'green');\n            //// Display that user joined the chat room.\n        }\n    });\n\n    hubConnection.on('UsersLeft', users => {\n        if (users != null && typeof (users) != undefined) {\n            appendLine(users.name + ' left the chat room', 'red');\n            //// Display that user left the chat room.\n            document.getElementById(users.connectionId).outerHTML = '';\n        }\n    });\n```", "```cs\n// This package contains dependencies to ASP.NET Core \n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.0\" />\n// This package is useful for the integration testing, to build a test host for the project to test.\n<PackageReference Include=\"Microsoft.AspNetCore.TestHost\" Version=\"2.0.0\" />\n// Moq is used to create fake objects\n<PackageReference Include=\"Moq\" Version=\"4.7.63\" />\n```", "```cs\n    public class AuthenticationController : Controller\n    {\n        private readonly ILogger<AuthenticationController> logger;\n\n        public \n        AuthenticationController(ILogger<AuthenticationController> \n        logger)\n        {\n            this.logger = logger;\n        }\n\n        [Route(\"signin\")]\n        public IActionResult SignIn()\n        {\n            logger.LogInformation($\"Calling {nameof(this.SignIn)}\");\n            return Challenge(new AuthenticationProperties { RedirectUri \n            = \"/\" });\n        }\n    }\n```", "```cs\n    /// <summary>\n    /// Authentication Controller Unit Test - Notice the naming \n        convention {ControllerName}Test\n    /// </summary>\n    public class AuthenticationControllerTest\n    {\n        /// <summary>\n        /// Mock the dependency needed to initialize the controller.\n        /// </summary>\n        private Mock<ILogger<AuthenticationController>> mockedLogger = \n        new Mock<ILogger<AuthenticationController>>();\n\n        /// <summary>\n        /// Tests the SignIn action.\n        /// </summary>\n        [Fact]\n        public void SignIn_Pass_Test()\n        {\n            // Arrange - Initialize the controller. Notice the mocked \n               logger object passed as the parameter.\n            var controller = new \n            AuthenticationController(mockedLogger.Object);\n\n            // Act - Invoke the method to be tested.\n            var actionResult = controller.SignIn();\n\n            // Assert - Make assertions if actual output is same as \n               expected output.\n            Assert.NotNull(actionResult);\n            Assert.IsType<ChallengeResult>(actionResult);           \n            Assert.Equal(((ChallengeResult)actionResult).    \n            Properties.Items.Count, 1);\n        } \n    }\n```", "```cs\n[AllowAnonymous]\n public class FaqController : Controller\n {\n     // GET: Faq\n     public ActionResult Index()\n     {\n         return this.View();\n     }\n }\n```", "```cs\n@{\n     ViewData[\"Title\"] = \"Let's Chat\";\n     ViewData[\"UserName\"] = \"Guest\";\n     if(User.Identity.IsAuthenticated)\n     {\n         ViewData[\"UserName\"] = User.Identity.Name;\n     }\n }\n <h1>\n   Hello @ViewData[\"UserName\"]! Welcome to FAQ page of Let's Chat\n </h1>\n <br />\n```", "```cs\nprivate static string knowledgeBaseId = ConfigurationManager.AppSettings[\"KnowledgeBaseId\"]; //// Knowledge base id of QnA Service.\n\n private static string qnamakerSubscriptionKey = \n ConfigurationManager.AppSettings[\"SubscriptionKey\"]; ////Subscription \n key.\n\n private static string hostUrl = \n ConfigurationManager.AppSettings[\"HostUrl\"];\n\n private async Task MessageReceivedAsync(IDialogContext context, \n IAwaitable<object> result)\n {\n     var activity = await result as Activity;\n     // return our reply to the user\n     await \n     context.PostAsync(this.GetAnswerFromService(activity.Text));\n     context.Wait(MessageReceivedAsync);\n }\n\n private string GetAnswerFromService(string inputText)\n {\n     //// Build the QnA Service URI\n     Uri qnamakerUriBase = new Uri(hostUrl);\n     var builder = new UriBuilder($\"{qnamakerUriBase}/knowledgebases    \n     /{knowledgeBaseId}/generateAnswer\");\n     var postBody = $\"{{\\\"question\\\": \\\"{inputText}\\\"}}\";\n     //Add the subscription key header\n     using (WebClient client = new WebClient())\n     {\n         client.Headers.Add(\"Ocp-Apim-Subscription-Key\",  \n         qnamakerSubscriptionKey);\n         client.Headers.Add(\"Content-Type\", \"application/json\");\n         try\n         {\n             var response = client.UploadString(builder.Uri,   \n             postBody);\n             var json = JsonConvert.DeserializeObject<QnAResult>\n             (response);\n             return json?.answers?.FirstOrDefault().answer;\n         }\n         catch (Exception ex)\n         {\n             return ex.Message;\n         }\n     }\n }\n```"]