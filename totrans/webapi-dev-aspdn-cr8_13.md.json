["```cs\n    ChatApp.Server using the dotnet new webapi command and add it to the solution:\n\n    ```", "```cs\n    Hubs in the project and add a new class called ChatHub:\n\n    ```", "```cs\n\n    The preceding code creates a new SignalR hub class called `ChatHub` that inherits from the `Hub` class. The `ChatHub` class contains a method called `SendMessage()`, which is used to send a message to all connected clients. The `SendMessage()` method takes two parameters, `user` and `message`, which are used to identify the username and the message. This method uses the `Clients.All.SendAsync()` method to broadcast the message to all connected clients when the `SendMessage()` method is invoked by clients. Note the first parameter of the `SendAsync()` method (for example, `ReceiveMessage()`) is the name of the method for clients to receive the message.\n    ```", "```cs\n\n    ```", "```cs\n    using ChatApp.Server.Hubs; statement to the top of the file.\n    ```", "```cs\n    https URL to run the application. Take note of the URL (for example, https://localhost:7159). We will use it in the next section.\n    ```", "```cs\nnpm install -g typescript\n```", "```cs\ntsc -v\n```", "```cs\n    <!DOCTYPE html><html lang=\"en\"><head>    <meta charset=\"UTF-8\">    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">    <title>Chat App</title></head><body>    <div id=\"divChat\">        <label for=\"txtUsername\">User Name</label>        <input type=\"text\" id=\"txtUsername\" />        <label for=\"txtMessage\">Message</label>        <input type=\"text\" id=\"txtMessage\" />        <button id=\"btnSend\">Send</button>        <ul id=\"messages\"></ul>    </div></body></html>\n    ```", "```cs\n    {  \"compilerOptions\": {    \"noEmitOnError\": true,    \"noImplicitAny\": true,    \"sourceMap\": true,    \"target\": \"es6\",    \"moduleResolution\":\"node\"  },  \"files\": [\"src/app.ts\"],  \"compileOnSave\": true}\n    ```", "```cs\n    package.json file in the ChatApp.TypeScriptClient folder. The package.json file is used to manage the dependencies of the project. It also contains other information about the project, such as the name, version, description, and so on.\n    ```", "```cs\n    @microsoft/signalr package is the official SignalR JavaScript client library. The @types/node package is used to provide type definitions for Node.js.\n    ```", "```cs\n    import * as signalR from \"@microsoft/signalr\";const txtUsername: HTMLInputElement = document.getElementById(  \"txtUsername\") as HTMLInputElement;const txtMessage: HTMLInputElement = document.getElementById(  \"txtMessage\") as HTMLInputElement;const btnSend: HTMLButtonElement = document.getElementById(  \"btnSend\") as HTMLButtonElement;btnSend.disabled = true;const connection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\")  .build();connection.on(\"ReceiveMessage\", (username: string, message: string) => {  const li = document.createElement(\"li\");  li.textContent = `${username}: ${message}`;  const messageList = document.getElementById(\"messages\");  messageList.appendChild(li);  messageList.scrollTop = messageList.scrollHeight;});connection  .start()  .then(() => (btnSend.disabled = false))  .catch((err) => console.error(err.toString()));txtMessage.addEventListener(\"keyup\", (event) => {  if (event.key === \"Enter\") {    sendMessage();  }});btnSend.addEventListener(\"click\", sendMessage);function sendMessage() {  connection    .invoke(\"SendMessage\", txtUsername.value, txtMessage.value)    .catch((err) => console.error(err.toString()))    .then(() => (txtMessage.value = \"\"));}\n    ```", "```cs\n    gulp and gulp-typescript in the project:\n\n    ```", "```cs\n    const gulp = require('gulp');const browserify = require('browserify');const source = require('vinyl-source-stream');const buffer = require('vinyl-buffer');const sourcemaps = require('gulp-sourcemaps');const tsify = require('tsify');// Bundle TypeScript with SignalRgulp.task('bundle', () => {  return browserify({    basedir: '.',    debug: true,    entries: ['src/app.ts'], // Replace with your TypeScript entry file    cache: {},    packageCache: {},  })    .plugin(tsify)    .bundle()    .pipe(source('bundle.js'))    .pipe(buffer())    .pipe(sourcemaps.init({ loadMaps: true }))    .pipe(sourcemaps.write('./'))    .pipe(gulp.dest('dist'));});// Copy HTMLgulp.task('copy-html', () => {  return gulp.src('src/**/*.html')    .pipe(gulp.dest('dist'));});// Main build taskgulp.task('default', gulp.series('bundle', 'copy-html'));\n    ```", "```cs\n\n    ```", "```cs\n    \"scripts\": {  \"gulp\": \"gulp\"}\n    ```", "```cs\n    {  \"name\": \"chatapp.typescriptclient\",  \"version\": \"1.0.0\",  \"description\": \"\",  \"main\": \"index.js\",  \"scripts\": {    \"gulp\": \"gulp\"  },  \"keywords\": [],  \"author\": \"\",  \"license\": \"ISC\",  \"dependencies\": {    \"@microsoft/signalr\": \"^8.0.0\",    \"@types/node\": \"^20.9.0\"  },  \"devDependencies\": {    \"@microsoft/signalr\": \"^8.0.0\",    \"browserify\": \"^17.0.0\",    \"gulp\": \"^4.0.2\",    \"gulp-sourcemaps\": \"^3.0.0\",    \"gulp-typescript\": \"^6.0.0-alpha.1\",    \"tsify\": \"^5.0.4\",    \"vinyl-buffer\": \"^1.0.1\",    \"vinyl-source-stream\": \"^2.0.0\"  }}\n    ```", "```cs\n    <!-- Omitted -->    <script src=\"img/bundle.js\"></script></body></html>\n    ```", "```cs\n    dist folder. It will also copy the HTML files to the dist folder. If the command is executed successfully, you should see three files in the dist folder: bundle.js, bundle.js.map, and index.html. In the next sections, if you make any changes to the TypeScript code, you need to run this command again to compile the TypeScript code.The development of the TypeScript client is now complete. To test it, we need to run a web server to host the HTML page. VS Code has some extensions that can be used to run a web server. For example, you can use the `index.html` file in the `dist` folder and select the **Show Preview** menu to run the web server. You will see VS Code opens a new tab and displays the HTML page, as shown next:\n    ```", "```cs\n    Program.cs file:\n\n    ```", "```cs\n\n    The preceding code allows cross-origin requests from `http://127.0.0.1:3000`, which is the URL of the **Live Preview** web server. You can change it to the URL of your web server if you are using a different web server. Note that this example is a very basic configuration that does not restrict any HTTP headers or HTTP methods. In a real-world application, you may need to restrict HTTP requests to improve the security of the application. For more details about CORS, you can refer to the official documentation at [https://learn.microsoft.com/en-us/aspnet/core/security/cors](https://learn.microsoft.com/en-us/aspnet/core/security/cors).\n    ```", "```cs\n    ChatApp.BlazorClient folder and run the following command to install the SignalR client library:\n\n    ```", "```cs\n    @using Microsoft.AspNetCore.SignalR.Client@implements IAsyncDisposable\n    ```", "```cs\n\n    ```", "```cs\n    @code {    private HubConnection? _hubConnection;    private readonly List<string> _messages = new ();    private string? _username;    private string? _message;    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;    protected override async Task OnInitializedAsync()    {        _hubConnection = new HubConnectionBuilder()        .WithUrl(\"https://localhost:7159/chatHub\")        .Build();        _hubConnection.On<string, string>(\"ReceiveMessage\", (username, message) =>        {            var encodedMessage = $\"{username}: {message}\";            _messages.Add(encodedMessage);            StateHasChanged();        });        await _hubConnection.StartAsync();    }    private async Task SendMessage()    {        if (_hubConnection != null && IsConnected)        {            await _hubConnection!.InvokeAsync(\"SendMessage\", _username, _message);            _message = string.Empty;        }    }    public async ValueTask DisposeAsync()    {        if (_hubConnection is not null)        {            await _hubConnection.DisposeAsync();        }    }}\n    ```", "```cs\n    <div id=\"username-group\">    <label>User Name</label>    <input type=\"text\" @bind=\"_username\" /></div><div id=\"message-group\">    <label>Message</label>    <input type=\"text\" @bind=\"_message\" /></div><input type=\"button\" value=\"Send\" @onclick=\"SendMessage\" disabled=\"@(!IsConnected)\" /><ul>    @foreach (var message in _messages)    {        <li>@message</li>    }</ul>\n    ```", "```cs\n    var corsPolicy = new CorsPolicyBuilder()    .AllowAnyHeader()    .AllowAnyMethod()    .AllowCredentials()    .WithOrigins(\"http://127.0.0.1:3000\", \"https://localhost:7093\")    .Build();\n    ```", "```cs\n    Data in the ChatApp.Server project. Then, create a new class called AppbContext in the Data folder. As we introduced DbContext in previous chapters, we will not show the code here. You can find the code in the sample application.\n    ```", "```cs\n    \"ConnectionStrings\": {  \"DefaultConnection\": \"Server=(localdb)\\\\mssqllocaldb;Database=ChatAppDb;Trusted_Connection=True;MultipleActiveResultSets=true\"}\n    ```", "```cs\n    \"JwtConfig\": {  \"ValidAudiences\": \"http://localhost:7159\",  \"ValidIssuer\": \"http://localhost:7159\",  \"Secret\": \"c1708c6d-7c94-466e-aca3-e09dcd1c2042\"}\n    ```", "```cs\n    using Microsoft.AspNetCore.SignalR;namespace ChatApp.Server.Services;public class NameUserIdProvider : IUserIdProvider{    public string GetUserId(HubConnectionContext connection)    {        return connection.User?.Identity?.Name ?? string.Empty;    }}\n    ```", "```cs\n    using System.Security.Claims;using Microsoft.AspNetCore.SignalR;namespace ChatApp.Server.Services;public class EmailBasedUserIdProvider : IUserIdProvider{    public string GetUserId(HubConnectionContext connection)    {        return connection.User?.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Email)?.Value ??    string.Empty;    }}\n    ```", "```cs\n    builder.Services.AddDbContext<AppDbContext>();builder.Services.AddIdentityCore<IdentityUser>()    .AddEntityFrameworkStores<AppDbContext>()    .AddDefaultTokenProviders();builder.Services.AddAuthentication(options =>{    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;}).AddJwtBearer(options =>{    var secret = builder.Configuration[\"JwtConfig:Secret\"];    var issuer = builder.Configuration[\"JwtConfig:ValidIssuer\"];    var audience = builder.Configuration[\"JwtConfig:ValidAudiences\"];    if (secret is null || issuer is null || audience is null)    {        throw new ApplicationException(\"Jwt is not set in the configuration\");    }    options.SaveToken = true;    options.RequireHttpsMetadata = false;    options.TokenValidationParameters = new TokenValidationParameters()    {        ValidateIssuer = true,        ValidateAudience = true,        ValidAudience = audience,        ValidIssuer = issuer,        IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secret))    };    // Hook the SignalR event to check for the token in the query string    options.Events = new JwtBearerEvents    {        OnMessageReceived = context =>        {            var accessToken = context.Request.Query[\"access_token\"];            var path = context.HttpContext.Request.Path;            if (!string.IsNullOrEmpty(accessToken) && path.StartsWithSegments(\"/chatHub\"))            {                context.Token = accessToken;            }            return Task.CompletedTask;        }    };});// Use the name-based user ID providerbuilder.Services.AddSingleton<IUserIdProvider, NameUserIdProvider>();\n    ```", "```cs\n    Authorize attribute to the ChatHub class, as shown next:\n\n    ```", "```cs\n\n    The `Authorize` attribute can be applied to the `Hub` class or methods of the `Hub` class. It also supports policy-based authorization. For example, you can use the `Authorize(Policy = \"Admin\")` attribute to restrict access to the `ChatHub` class to administrators.\n    ```", "```cs\nvar tokenDescriptor = new SecurityTokenDescriptor{\n    Subject = new ClaimsIdentity(new[]\n    {\n        // SignalR requires the NameIdentifier claim to map the user to the connection\n        new Claim(ClaimTypes.NameIdentifier, userName),\n        new Claim(ClaimTypes.Name, userName),\n        // If you use the email-based user ID provider, you need to add the email claim from the database\n    }),\n    Expires = DateTime.UtcNow.AddDays(1),\n    Issuer = issuer,\n    Audience = audience,\n    SigningCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256Signature)\n};\n```", "```cs\n{  \"userName\": \"user1\",\n  \"email\": \"user1@example.com\",\n  \"password\": \"Passw0rd!\"\n}\n```", "```cs\n    <body>    <div id=\"divLogin\">        <label for=\"txtUsername\">User Name</label>        <input type=\"text\" id=\"txtUsername\" />        <label for=\"txtPassword\">Password</label>        <input type=\"password\" id=\"txtPassword\" />        <button id=\"btnLogin\">Login</button>    </div>    <div id=\"divChat\">        <label>User Name</label>        <label id=\"lblUsername\" ></label>        <label for=\"txtMessage\">Message</label>        <input type=\"text\" id=\"txtMessage\" />        <button id=\"btnSend\">Send</button>        <ul id=\"messages\"></ul>    </div>    <script type=\"module\" src=\"img/bundle.js\"></script></body>\n    ```", "```cs\n    import * as signalR from \"@microsoft/signalr\";divChat.style.display = \"none\";btnSend.disabled = true;btnLogin.addEventListener(\"click\", login);let connection: signalR.HubConnection = null;async function login() {  const username = txtUsername.value;  const password = txtPassword.value;  if (username && password) {    try {      // Use the Fetch API to login      const response = await fetch(\"https://localhost:7159/account/login\", {        method: \"POST\",        headers: { \"Content-Type\": \"application/json\" },        body: JSON.stringify({ username, password }),      });      const json = await response.json();      localStorage.setItem(\"token\", json.token);      localStorage.setItem(\"username\", username);      txtUsername.value = \"\";      txtPassword.value = \"\";      lblUsername.textContent = username;      divLogin.style.display = \"none\";      divChat.style.display = \"block\";      txtMessage.focus();      // Start the SignalR connection      connection = new signalR.HubConnectionBuilder()        .withUrl(\"https://localhost:7159/chatHub\", {          accessTokenFactory: () => {           var localToken = localStorage.getItem(\"token\");           // You can add logic to check if the token is valid or expired           return localToken;         },        })        .build();      connection.on(\"ReceiveMessage\", (username: string, message: string) => {        const li = document.createElement(\"li\");        li.textContent = `${username}: ${message}`;        const messageList = document.getElementById(\"messages\");        messageList.appendChild(li);        messageList.scrollTop = messageList.scrollHeight;      });      await connection.start();      btnSend.disabled = false;    } catch (err) {      console.error(err.toString());    }  }}txtMessage.addEventListener(\"keyup\", (event) => {  if (event.key === \"Enter\") {    sendMessage();  }});btnSend.addEventListener(\"click\", sendMessage);function sendMessage() {  connection    .invoke(\"SendMessage\", lblUsername.textContent, txtMessage.value)    .catch((err) => console.error(err.toString()))    .then(() => (txtMessage.value = \"\"));}\n    ```", "```cs\n    npm run gulp\n    ```", "```cs\n@inject HttpClient Httpprivate async Task Login()\n{\n    if (!string.IsNullOrWhiteSpace(_username) && !string.IsNullOrWhiteSpace(_password))\n    {\n        var response = await Http.PostAsJsonAsync(\"Account/login\", new { Username = _username, Password = _password });\n        if (response.IsSuccessStatusCode)\n        {\n            var jsonString = await response.Content.ReadAsStringAsync();\n            var data = System.Text.Json.JsonSerializer.Deserialize<Dictionary<string, string>>(jsonString);\n            _token = data[\"token\"];\n            if (string.IsNullOrWhiteSpace(_token))\n            {\n                throw new Exception(\"Invalid token.\");\n            }\n            else\n            {\n                _showLogin = false;\n                _showChat = true;\n                StateHasChanged();\n                // Set the token to the hub connection.\n                _hubConnection = new HubConnectionBuilder()\n                .WithUrl(\"https://localhost:7159/chatHub\", options =>\n                {\n                    options.AccessTokenProvider = () => Task.FromResult<string?>(_token);\n                })\n                .Build();\n                _hubConnection.On<string, string>(\"ReceiveMessage\", (username, message) =>\n                {\n                    var encodedMessage = $\"{username}: {message}\";\n                    _messages.Add(encodedMessage);\n                    StateHasChanged();\n                });\n                await _hubConnection.StartAsync();\n            }\n        }\n    }\n}\n```", "```cs\npublic override async Task OnConnectedAsync(){\n    await Clients.All.SendAsync(\"UserConnected\", Context.User.Identity.Name);\n    await base.OnConnectedAsync();\n}\n```", "```cs\npublic override async Task OnDisconnectedAsync(Exception? exception){\n    await Clients.All.SendAsync(\"UserDisconnected\", Context.User.Identity.Name);\n    await base.OnDisconnectedAsync(exception);\n}\n```", "```cs\nconnection.on(\"UserConnected\", (username: string) => {  const li = document.createElement(\"li\");\n  li.textContent = `${username} connected`;\n  const messageList = document.getElementById(\"messages\");\n  messageList.appendChild(li);\n  messageList.scrollTop = messageList.scrollHeight;\n});\nconnection.on(\"UserDisconnected\", (username: string) => {\n  const li = document.createElement(\"li\");\n  li.textContent = `${username} disconnected`;\n  const messageList = document.getElementById(\"messages\");\n  messageList.appendChild(li);\n  messageList.scrollTop = messageList.scrollHeight;\n});\n```", "```cs\n_hubConnection.On<string>(\"UserConnected\", (username) =>{\n    var encodedMessage = $\"{username} connected.\";\n    _messages.Add(encodedMessage);\n    StateHasChanged();\n});\n_hubConnection.On<string>(\"UserDisconnected\", (username) =>\n{\n    var encodedMessage = $\"{username} disconnected.\";\n    _messages.Add(encodedMessage);\n    StateHasChanged();\n});\n```", "```cs\npublic Task SendMessageToUser(string user, string toUser, string message){\n    return Clients.User(toUser).SendAsync(\"ReceiveMessage\", user, message);\n}\n```", "```cs\n<label for=\"txtToUser\">To</label><input type=\"text\" id=\"txtToUser\" />\n```", "```cs\nfunction sendMessage() {  // If the txtToUser field is not empty, send the message to the user\n  if (txtToUser.value) {\n    connection\n      .invoke(\"SendMessageToUser\", lblUsername.textContent, txtToUser.value, txtMessage.value)\n      .catch((err) => console.error(err.toString()))\n      .then(() => (txtMessage.value = \"\"));\n  } else {\n    connection\n      .invoke(\"SendMessage\", lblUsername.textContent, txtMessage.value)\n      .catch((err) => console.error(err.toString()))\n      .then(() => (txtMessage.value = \"\"));\n  }\n}\n```", "```cs\nprivate async Task SendMessage(){\n    if (_hubConnection != null && IsConnected)\n    {\n        if (!string.IsNullOrWhiteSpace(_toUser))\n        {\n            await _hubConnection.InvokeAsync(\"SendMessageToUser\", _username, _toUser, _message);\n        }\n        else\n        {\n            await _hubConnection.InvokeAsync(\"SendMessage\", _username, _message);\n        }\n        _message = string.Empty;\n    }\n}\n```", "```cs\npublic Task SendMessage(string user, string message){\n    await Clients.All.SendAsync(\"ReceiveMessage\", user, message);\n}\npublic Task SendMessageToUser(string user, string toUser, string message)\n{\n    return Clients.User(toUser).SendAsync(\"ReceiveMessage\", user, message);\n}\npublic override async Task OnConnectedAsync()\n{\n    await Clients.All.SendAsync(\"UserConnected\", Context.User.Identity.Name);\n    await base.OnConnectedAsync();\n}\npublic override async Task OnDisconnectedAsync(Exception? exception)\n{\n    await Clients.All.SendAsync(\"UserDisconnected\", Context.User.Identity.Name);\n    await base.OnDisconnectedAsync(exception);\n}\n```", "```cs\npublic interface IChatClient{\n    Task ReceiveMessage(string user, string message);\n    Task UserConnected(string user);\n    Task UserDisconnected(string user);\n}\n```", "```cs\npublic class ChatHub : Hub<IChatClient>{\n    public Task SendMessage(string user, string message)\n    {\n        return Clients.All.ReceiveMessage(user, message);\n    }\n    public Task SendMessageToUser(string user, string toUser, string message)\n    {\n        return Clients.User(toUser).ReceiveMessage(user, message);\n    }\n    public override async Task OnConnectedAsync()\n    {\n        await Clients.All.UserConnected(Context.User.Identity.Name);\n        await base.OnConnectedAsync();\n    }\n    public override async Task OnDisconnectedAsync(Exception? exception)\n    {\n        await Clients.All.UserDisconnected(Context.User.Identity.Name);\n        await base.OnDisconnectedAsync(exception);\n    }\n}\n```", "```cs\npublic async Task AddToGroup(string user, string group){\n    await Groups.AddToGroupAsync(Context.ConnectionId, group);\n    await Clients.Group(group).ReceiveMessage(Context.User.Identity.Name,\n        $\"{user} has joined the group {group}. Connection Id: {Context.ConnectionId}\");\n}\npublic async Task RemoveFromGroup(string user, string group)\n{\n    await Groups.RemoveFromGroupAsync(Context.ConnectionId, group);\n    await Clients.Group(group).ReceiveMessage(Context.User.Identity.Name,\n                   $\"{user} has left the group {group}. Connection Id: {Context.ConnectionId}\");\n}\n```", "```cs\n<label id=\"lblToGroup\">Group</label><input type=\"text\" id=\"txtToGroup\" />\n<button id=\"btnJoinGroup\">Join Group</button>\n<button id=\"btnLeaveGroup\">Leave Group</button>\n```", "```cs\nbtnJoinGroup.addEventListener(\"click\", joinGroup);btnLeaveGroup.addEventListener(\"click\", leaveGroup);\nfunction joinGroup() {\n  if (txtToGroup.value) {\n    connection\n      .invoke(\"AddToGroup\", lblUsername.textContent, txtToGroup.value)\n      .catch((err) => console.error(err.toString()))\n      .then(() => {\n        btnJoinGroup.disabled = true;\n        btnJoinGroup.style.display = \"none\";\n        btnLeaveGroup.disabled = false;\n        btnLeaveGroup.style.display = \"inline\";\n        txtToGroup.readOnly = true;\n      });\n  }\n}\nfunction leaveGroup() {\n  if (txtToGroup.value) {\n    connection\n      .invoke(\"RemoveFromGroup\", lblUsername.textContent, txtToGroup.value)\n      .catch((err) => console.error(err.toString()))\n      .then(() => {\n        btnJoinGroup.disabled = false;\n        btnJoinGroup.style.display = \"inline\";\n        btnLeaveGroup.disabled = true;\n        btnLeaveGroup.style.display = \"none\";\n        txtToGroup.readOnly = false;\n      });\n  }\n}\n```", "```cs\npublic async Task SendMessageToGroup(string user, string group, string message){\n    await Clients.Group(group).ReceiveMessage(user, message);\n}\n```", "```cs\nprivate async Task SendMessage(){\n    if (_hubConnection != null && IsConnected)\n    {\n        if (!string.IsNullOrWhiteSpace(_group) && _isJoinedGroup)\n        {\n            await _hubConnection.InvokeAsync(\"SendMessageToGroup\", _username, _group, _message);\n        }\n        // Omitted for brevity\n    }\n}\n```", "```cs\n    public class SendToAllMessageModel{    public string FromUser { get; set; } = string.Empty;    public string Message { get; set; } = string.Empty;}public class SendToUserMessageModel{    public string FromUser { get; set; } = string.Empty;    public string ToUser { get; set; } = string.Empty;    public string Message { get; set; } = string.Empty;}public class SendToGroupMessageModel{    public string FromUser { get; set; } = string.Empty;    public string GroupName { get; set; } = string.Empty;    public string Message { get; set; } = string.Empty;}\n    ```", "```cs\n    [Route(\"api/[controller]\")][ApiController]public class ChatController(IHubContext<ChatHub, IChatClient> hubContext) : ControllerBase{}\n    ```", "```cs\n     [HttpPost(\"/all\")] public async Task<IActionResult> SendToAllMessage([FromBody] SendToAllMessageModel model) {     if (ModelState.IsValid)     {         await hubContext.Clients.All.ReceiveMessage(model.FromUser, model.Message);         return Ok();     }     return BadRequest(ModelState); } [HttpPost(\"/user\")] public async Task<IActionResult> SendToUserMessage([FromBody] SendToUserMessageModel model) {     if (ModelState.IsValid)     {         await hubContext.Clients.User(model.ToUser).ReceiveMessage(model.FromUser, model.Message);         return Ok();     }     return BadRequest(ModelState); } [HttpPost(\"/group\")] public async Task<IActionResult> SendToGroupMessage([FromBody] SendToGroupMessageModel model) {     if (ModelState.IsValid)     {         await hubContext.Clients.Group(model.GroupName).ReceiveMessage(model.FromUser, model.Message);         return Ok();     }     return BadRequest(ModelState); }\n    ```", "```cs\nbuilder.Services.AddSignalR(options =>{\n    options.KeepAliveInterval = TimeSpan.FromSeconds(10);\n    options.ClientTimeoutInterval = TimeSpan.FromSeconds(20);\n    options.EnableDetailedErrors = true;\n});\n```", "```cs\nbuilder.Services.AddSignalR().AddHubOptions<ChatHub>(options =>{\n    options.KeepAliveInterval = TimeSpan.FromSeconds(10);\n    options.ClientTimeoutInterval = TimeSpan.FromSeconds(20);\n    options.EnableDetailedErrors = true;\n});\n```", "```cs\nconnection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\", {\n    // Omitted for brevity\n  })\n  .build();\n// The following configuration must match the configuration in the server project\nconnection.keepAliveIntervalInMilliseconds = 10000;\nconnection.serverTimeoutInMilliseconds = 20000;\n```", "```cs\n_hubConnection = new HubConnectionBuilder()    .WithUrl(\"https://localhost:7159/chatHub\", options =>\n    {\n        // Omitted for brevity\n    })\n    .Build();\n_hubConnection.KeepAliveInterval = TimeSpan.FromSeconds(10);\n_hubConnection.ServerTimeout = TimeSpan.FromSeconds(20);\nYou can also configure these properties on the HubConnectionBuilder object as shown below:\n_hubConnection = new HubConnectionBuilder()\n    .WithUrl(\"https://localhost:7159/chatHub\", options =>\n    {\n        // Omitted for brevity\n    })\n    .WithKeepAliveInterval(TimeSpan.FromSeconds(10))\n    .WithServerTimeout(TimeSpan.FromSeconds(20))\n    .Build();\n```", "```cs\napp.MapHub<ChatHub>(\"/chatHub\", options =>{\n    options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;\n    options.WebSockets.CloseTimeout = TimeSpan.FromSeconds(10);\n    options.LongPolling.PollTimeout = TimeSpan.FromSeconds(120);\n});\n```", "```cs\nconnection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\", {\n    transport: signalR.HttpTransportType.WebSockets | signalR.HttpTransportType.LongPolling,\n  })\n  .build();\n```", "```cs\n_hubConnection = new HubConnectionBuilder()    .WithUrl(\"https://localhost:7159/chatHub\", options =>\n    {\n        options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;\n    })\n    .Build();\n```", "```cs\n    connection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\", {    // Omitted for brevity  })  .withAutomaticReconnect()  .build();\n    ```", "```cs\n    _hubConnection = new HubConnectionBuilder()    .WithUrl(\"https://localhost:7159/chatHub\", options =>    {        // Omittted for brevity    })    .WithAutomaticReconnect()    .Build();\n    ```", "```cs\n    connection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\", {    // Omittted for brevity  })  .withAutomaticReconnect([0, 5, 20])  .build();\n    ```", "```cs\n    _hubConnection = new HubConnectionBuilder()    .WithUrl(\"https://localhost:7159/chatHub\", options =>    {        // Omitted for brevity    })    .WithAutomaticReconnect(new[] { TimeSpan.FromSeconds(0), TimeSpan.FromSeconds(5), TimeSpan.FromSeconds(20) })    .Build();\n    ```", "```cs\n    <div class=\"form-group mb-3\">  <label>Status</label>  <label id=\"lblStatus\"></label></div>\n    ```", "```cs\n    connection.onclose(() => {  lblStatus.textContent = \"Disconnected.\";});connection.onreconnecting((error) => {  lblStatus.textContent = `${error} Reconnecting...`;});connection.onreconnected((connectionId) => {  lblStatus.textContent = `Connected. ${connectionId}`;});await connection.start();lblStatus.textContent = `Connected. ${connection.connectionId}`;\n    ```", "```cs\n    connection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\", {    // Omitted for brevity  })  .configureLogging(signalR.LogLevel.Debug)  // Omitted for brevity\n    ```", "```cs\n    app.MapHub<ChatHub>(\"/chatHub\", options =>{    // Omitted for brevity    options.AllowStatefulReconnects = true;});\n    ```", "```cs\n    builder.Services.AddSignalR(options =>{    // Omitted for brevity    options.StatefulReconnectBufferSize = 200000;});\n    ```", "```cs\n    connection = new signalR.HubConnectionBuilder()  .withUrl(\"https://localhost:7159/chatHub\", {    // Omitted for brevity  })  .withAutomaticReconnect()  .withStatefulReconnect({ bufferSize: 200000 })  .build();\n    ```", "```cs\n    _hubConnection = new HubConnectionBuilder()    .WithUrl(\"https://localhost:7159/chatHub\", options =>    {        // Omitted for brevity    })    .WithAutomaticReconnect()    .WithStatefulReconnect()    .Build();\n    ```", "```cs\n    var builder = new HubConnectionBuilder()    .WithUrl(\"https://localhost:7159/chatHub\", options =>    {        // Omitted for brevity    })    .WithAutomaticReconnect()    .WithStatefulReconnect();builder.Services.Configure<HubConnectionOptions>(options =>{    options.StatefulReconnectBufferSize = 200000;});_hubConnection = builder.Build();\n    ```"]