- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Sharing Code and Resources
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享代码和资源
- en: Throughout the book, we have been building a project that can run in many different
    hosting models. This is a great way to build our projects if we want to switch
    technologies further down the road or, as we do at work, share components between
    the customer portal and our internal **customer relationship management** (**CRM**)
    system.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们一直在构建一个可以在许多不同的托管模型中运行的项目。如果我们想在将来进一步切换技术，或者像我们在工作中做的那样，在客户门户和我们的内部**客户关系管理**（**CRM**）系统之间共享组件，这是一个构建项目的绝佳方式。
- en: Always think about if there might be a sharable part of the component we are
    building; that way, we can reuse it, and if we add something to the component,
    we get that benefit for all our components.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 总是考虑我们正在构建的组件中是否可能有一个可共享的部分；这样，我们可以重用它，如果我们向组件中添加了某些内容，我们就可以为所有组件获得这种好处。
- en: But it’s not only about sharing components inside our own projects. What if
    we want to create a library that can be shared with other departments, or even
    an open-source project sharing components with the world?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不仅仅是我们自己项目内部共享组件的问题。如果我们想创建一个可以与其他部门共享的库，或者甚至是一个与世界共享组件的开源项目，那会怎样？
- en: In this chapter, we will look at some of the things we already use when sharing
    components, and also at sharing CSS and other static files.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些我们在共享组件时已经使用的内容，以及共享CSS和其他静态文件。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Adding static files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加静态文件
- en: CSS isolation
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CSS隔离
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Make sure you have followed the previous chapters or use the `Chapter08` folder
    as a starting point.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已经遵循了前面的章节，或者以`Chapter08`文件夹作为起点。
- en: You can find the source code for this chapter’s result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter09).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter09)找到本章结果的源代码。
- en: If you are jumping into this chapter using the code from GitHub, make sure you
    have added `Auth0` account information in the settings files. You can find the
    instructions in *Chapter 8*, *Authentication and Authorization*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用GitHub上的代码跳转到本章，请确保您已在设置文件中添加了`Auth0`账户信息。您可以在*第8章*，*身份验证和授权*中找到说明。
- en: Adding static files
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加静态文件
- en: Blazor can use static files, such as images, CSS, and JavaScript. If we put
    our files in the `wwwroot` folder, they will automatically be exposed to the internet
    and be accessible from the root of our site. The nice thing about Blazor is that
    we can do the same with a library; it is super easy to distribute static files
    within a library.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor可以使用静态文件，如图片、CSS和JavaScript。如果我们把我们的文件放在`wwwroot`文件夹中，它们将自动暴露给互联网，并可以从我们网站的根目录访问。Blazor的好处在于，我们也可以用库来做同样的事情；在库内分发静态文件非常简单。
- en: At work, we share components between all of our Blazor projects, and the shared
    library can also depend on other libraries. By sharing components and building
    our own components (sometimes on top of other libraries), we ensure we have the
    same look and feel throughout a site. We also share static content like images
    and CSS, and this makes it simple and fast if we need to change something and
    we want all of our sites to be affected.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在工作中，我们在所有的Blazor项目中共享组件，共享库也可以依赖于其他库。通过共享组件和构建我们自己的组件（有时是在其他库之上），我们确保整个网站具有相同的视觉和感觉。我们还共享静态内容，如图片和CSS，这使得如果我们需要更改某些内容并且希望所有网站都受到影响时，变得简单快捷。
- en: To link to a resource in another library/assembly, we can use the `_content`
    folder.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要链接到另一个库/程序集的资源，我们可以使用`_content`文件夹。
- en: 'Take a look at this example:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下这个例子：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The HTML `link` tag, `rel`, and `href` are ordinary HTML tags and attributes,
    but adding the URL that starts with `_content` tells us that the content we want
    to access is in another library. The name of the library (assembly name), in our
    case, `SharedComponents`, is followed by the file we want to access, which is
    stored in the `wwwroot` folder in our library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: HTML的`link`标签、`rel`和`href`是普通的HTML标签和属性，但添加以`_content`开头的URL告诉我们，我们想要访问的内容位于另一个库中。在我们的例子中，库（程序集名称）是`SharedComponents`，后面是我们想要访问的文件，该文件存储在我们的库中的`wwwroot`文件夹中。
- en: Blazor is, in the end, just HTML, and HTML can be styled using CSS. As mentioned,
    the Blazor templates are using Bootstrap by default, and we will continue to use
    that as well.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor最终只是HTML，而HTML可以使用CSS进行样式化。正如之前提到的，Blazor模板默认使用Bootstrap，我们也将继续使用它。
- en: There is an excellent site with easy-to-use Bootstrap themes ready to be downloaded,
    which can be found at [https://bootswatch.com/](https://bootswatch.com/).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个优秀的网站，提供了易于使用的Bootstrap主题，可供下载，网址为[https://bootswatch.com/](https://bootswatch.com/)。
- en: I like the Darkly theme, so that’s the one we’ll use, but feel free to experiment
    with this later on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢Darkly主题，所以我们将使用这个，但你可以自由地稍后尝试其他主题。
- en: Choosing between frameworks
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择框架
- en: I often get asked about how to style Blazor apps, and the truth is you can use
    all the things you are used to. In the end, Blazor will output HTML. There are
    many languages and frameworks we can use to write our CSS.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常被问到如何样式化Blazor应用程序，事实是你可以使用你习惯的所有工具。最终，Blazor会输出HTML。我们可以使用许多语言和框架来编写我们的CSS。
- en: We can use CSS, **Syntactically Awesome Stylesheets** (**SASS**), and **Leaner
    CSS** (**LESS**). As long as the output is CSS, we can use it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用CSS、**语法优美的样式表**（**SASS**）和**更简洁的CSS**（**LESS**）。只要输出是CSS，我们就可以使用它。
- en: In this chapter, we will stick with Bootstrap and continue using CSS. SASS and
    LESS are beyond the scope of this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用Bootstrap和CSS。SASS和LESS超出了本书的范围。
- en: Tailwind is a popular framework for Blazor, and it is absolutely possible to
    use it together with Blazor. Tailwind is very component focused and needs a bit
    of configuration to start, but if it is something you have worked with and like,
    you can use it together with Blazor.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Tailwind是Blazor的一个流行框架，绝对可以与Blazor一起使用。Tailwind非常注重组件，并且需要一些配置才能开始，但如果它是你熟悉并喜欢的，你可以与Blazor一起使用它。
- en: Adding a new style
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加新的样式
- en: Many templates use Bootstrap as a base, so if you are looking for a design for
    your website, using a Bootstrap-based template will be an easy implementation.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 许多模板以Bootstrap为基础，所以如果你在寻找网站的设计，使用基于Bootstrap的模板将是一个易于实现的方案。
- en: The problem with Bootstrap (and why some people don’t like it) is that many
    sites use Bootstrap and “all sites look the same.” This can be good if we are
    building a **line of business** (**LOB**), but it can be bad if we are trying
    to be innovative. Bootstrap is also quite large when it comes to downloading,
    so that is also an argument against it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap的问题（以及为什么有些人不喜欢它）在于许多网站使用Bootstrap，导致“所有网站看起来都一样”。如果我们正在构建一个**业务线**（**LOB**），这可能是个好事，但如果我们试图创新，这可能是个坏事。Bootstrap在下载时也相当大，这也是反对它的一个论点。
- en: This chapter is about making our blog look a bit nicer, so we will stick with
    Bootstrap, but we should know that if we use something else to handle our CSS,
    it will work with Blazor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于让我们的博客看起来更美观，所以我们将继续使用Bootstrap，但我们应该知道，如果我们使用其他东西来处理我们的CSS，它也会与Blazor一起工作。
- en: 'One of these template sites is `Bootswatch`, which gives us some nice variations
    from the traditional Bootstrap themes:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模板网站之一是`Bootswatch`，它为我们提供了从传统Bootstrap主题中的一些美好变化：
- en: Navigate to [https://bootswatch.com/darkly/](https://bootswatch.com/darkly/).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到[https://bootswatch.com/darkly/](https://bootswatch.com/darkly/)。
- en: In the top menu called `Darkly`, there are some links. Download `bootstrap.min.css`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部菜单`Darkly`中，有一些链接。下载`bootstrap.min.css`。
- en: In the `SharedComponents` project, in the `wwwroot` folder, add the `bootstrap.min.css`
    file.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SharedComponents`项目中，在`wwwroot`文件夹中，添加`bootstrap.min.css`文件。
- en: We have all the prerequisites and CSS that we can add to our site.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为我们的网站添加所有必要的CSS。
- en: Adding CSS
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加CSS
- en: 'Now, it’s time to add a new style to our site:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候为我们网站添加新的样式了：
- en: In the `BlazorWebApp` project, open `Components/App.razor`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BlazorWebApp`项目中，打开`Components/App.razor`文件。
- en: 'Locate this row:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到这一行：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Replace the preceding row with the following:'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将前面的行替换为以下内容：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Run the project by pressing *Ctrl* + *F5*.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *F5*来运行项目。
- en: Great! Our Blazor project is now updated to use the new style. The main color
    should now be dark, but there is still some work to do.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们的Blazor项目现在已更新为使用新的样式。主色调现在应该是深色，但仍有一些工作要做。
- en: Making the admin interface more usable
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使管理界面更易于使用
- en: 'Let’s now clean it up some more. We have only started with the admin functionality,
    so let’s make it more accessible. The menu on the left is no longer required,
    so let’s change it so that it is only visible if you are an administrator:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在进一步清理。我们刚刚开始实现管理功能，所以让我们让它更容易访问。左侧的菜单不再需要，所以让我们将其改为仅在您是管理员时才可见：
- en: 'Open `Components/Layout/MainLayout.razor` and put `AuthorizeView` around the
    `sidebar` `div` like this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Components/Layout/MainLayout.razor`文件，并将`AuthorizeView`放在`sidebar` `div`周围，如下所示：
- en: '[PRE3]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In this case, we are not specifying `Authorized` or `NotAuthorized`. The default
    behavior is `Authorized`, so if we are only looking for an authorized state, we
    don’t need to specify it by name.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们没有指定`Authorized`或`NotAuthorized`。默认行为是`Authorized`，所以如果我们只寻找授权状态，我们不需要通过名称指定它。
- en: Start the project to see it in action. The menu should not be shown if we are
    not logged in.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 启动项目以查看其效果。如果我们未登录，菜单不应显示。
- en: Now, we need to make the menu look better. Even though the counter is really
    fun to click on, it doesn’t make much sense regarding our blog.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要让菜单看起来更好。尽管计数器点击起来很有趣，但它对我们博客来说意义不大。
- en: Making the menu more useful
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使菜单更实用
- en: 'We should replace the links with links to our admin pages instead:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该将链接替换为指向我们管理页面的链接：
- en: In the `BlazorWebApp` project, open the `Components/Layout/Navmenu.razor` file.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`BlazorWebApp`项目中，打开`Components/Layout/Navmenu.razor`文件。
- en: 'Edit the code so that it looks like this:'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编辑代码，使其看起来像这样：
- en: '[PRE4]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If we start the project and resize the screen, we will notice that the menu
    shows up on large screens but is hidden on smaller ones. One thing worth noticing
    is that `NavMenu` doesn’t contain code, so the menu hiding and showing up depending
    on screen size is all done using CSS.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们启动项目并调整屏幕大小，我们会注意到菜单在大屏幕上显示，但在小屏幕上隐藏。值得注意的是，`NavMenu`不包含代码，所以菜单的隐藏和显示完全依赖于CSS。
- en: Great! Our blog is looking more like a blog, but we can do more!
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们的博客看起来更像一个博客了，但我们还可以做得更多！
- en: Making the blog look like a blog
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使博客看起来更像一个博客
- en: 'The admin interface is done (at least, for now), and we should focus on the
    front page of our blog. The front page should have the title of the blog post
    and some descriptions:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 管理界面已经完成（至少，目前是这样），我们应该专注于我们博客的首页。首页应该包含博客文章的标题和一些描述：
- en: In the `SharedComponents` project, open the `Pages/Home.razor` file.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`SharedComponents`项目中，打开`Pages/Home.razor`文件。
- en: 'Add a `using` statement for `Markdig` at the top of the file:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文件顶部添加一个`using`语句用于`Markdig`：
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add an `OnInitializedAsync` method to handle the instantiation of the `Markdig`
    pipeline (this is the same code we have in the `Post.razor` file):'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`OnInitializedAsync`方法来处理`Markdig`管道的实例化（这是我们在`Post.razor`文件中有的相同代码）：
- en: '[PRE6]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Inside the `Virtualize` component, change the content (`RenderFragment`) to
    the following:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Virtualize`组件内部，将内容（`RenderFragment`）更改为以下内容：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Also, remove the `<ul>` tags.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，删除`<ul>`标签。
- en: Now, run the project using *Ctrl* + *F5* and look at our new front page. Our
    blog is starting to take form, but we still have work to do.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用*Ctrl* + *F5*运行项目，查看我们新的首页。我们的博客开始成形，但我们还有工作要做。
- en: CSS isolation
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSS隔离
- en: In .NET 5, Microsoft added something called isolated CSS. This is something
    that many other frameworks have as well. The idea is to write CSS specifically
    for one component. The upside, of course, is that the CSS that we create won’t
    impact any of the other components.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 5中，Microsoft添加了一个名为隔离CSS的功能。许多其他框架也有类似的功能。这个想法是为一个组件编写特定的CSS。当然，好处是我们创建的CSS不会影响其他任何组件。
- en: The template for Blazor uses isolated CSS for `Components/Layout/MainLayout.razor`
    and `NavMenu.Razor`. If we expand `MainLayout.razor`, we’ll see a file called
    `MainLayout.razor.css`. The tree is made possible thanks to using the same naming.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Blazor的模板使用隔离的CSS为`Components/Layout/MainLayout.razor`和`NavMenu.Razor`。如果我们展开`MainLayout.razor`，我们会看到一个名为`MainLayout.razor.css`的文件。这个树状结构是通过使用相同的命名方式实现的。
- en: We can also use SASS here by adding a file called `MainLayout.razor.scss`. The
    important thing is that the file we add should generate a file called `MainLayout.razor.css`
    for the compiler to pick up.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过添加一个名为`MainLayout.razor.scss`的文件来使用SASS。重要的是，我们添加的文件应该生成一个名为`MainLayout.razor.css`的文件，以便编译器可以识别。
- en: This naming convention will make sure to rewrite CSS and the HTML output.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个命名约定将确保重写CSS和HTML输出。
- en: 'CSS has the following naming convention:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: CSS具有以下命名约定：
- en: '[PRE8]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'It will be rewritten as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被重写如下：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This means the elements need to have an attribute called `b-bfl5h5967n` (in
    this case) for the style to be applied. This is a randomly generated string for
    this component.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着元素需要有一个名为 `b-bfl5h5967n` 的属性（在这个例子中），以便应用该样式。这是一个为该组件随机生成的字符串。
- en: 'The `div` tag that has the `CSS` tag within the `MainLayout` component will
    be outputted like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MainLayout` 组件内部包含 `CSS` 标签的 `div` 标签将被输出如下：
- en: '[PRE10]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For all of this to happen, we also need to have a link to the CSS (which is
    provided by the template), and it looks like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让所有这些发生，我们还需要有一个指向 CSS 的链接（由模板提供），它看起来是这样的：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This becomes useful for component libraries. We have components that have isolated
    CSS in our shared library (`NavMenu` and `MainLayout`), and the CSS for the `NavMenu`
    component is included in the `{Assemblyname}.styles.css` file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于组件库来说很有用。在我们的共享库（`NavMenu` 和 `MainLayout`）中，组件的 CSS 被包含在 `{Assemblyname}.styles.css`
    文件中。
- en: We don’t have to do anything extra to include our shared CSS. If we are creating
    a library for anyone, we should consider using the isolated CSS approach if our
    components need some CSS to work correctly.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要做任何额外的事情来包含我们的共享 CSS。如果我们为任何人创建库，我们应该考虑在组件需要一些 CSS 才能正确工作的情况下使用隔离的 CSS
    方法。
- en: If we are starting our Blazor project from an empty template, we need to add
    a link to the isolated CSS.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从空模板开始创建 Blazor 项目，我们需要添加一个指向隔离 CSS 的链接。
- en: This way, our users won’t have to add a reference to our CSS, and there is no
    risk of our CSS breaking something in the user’s app (since it’s isolated). The
    important thing is that we use the right approach when it makes sense.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的用户就不需要添加对 CSS 的引用，并且没有风险在我们的 CSS 会破坏用户的 app（因为它被隔离）。重要的是，我们在需要的时候使用正确的方法。
- en: Suppose we are creating a component that has very specific styles, which only
    that component will use. In that case, isolated CSS is a great way to go, it is
    easier to find (right by the component), and we can use CSS variables for colors
    and such.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们正在创建一个具有非常特定样式的组件，这个样式只由该组件使用。在这种情况下，使用隔离的 CSS 是一个很好的选择，因为它更容易找到（紧挨着组件），并且我们可以使用
    CSS 变量来设置颜色等。
- en: We should be careful when styling similar things inside of the isolated CSS,
    so we don’t end up having a bunch of different CSS files styling a button, for
    example.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在隔离 CSS 中对类似事物进行样式设计时应该小心，以免最终出现一堆不同的 CSS 文件来设计按钮等。
- en: As mentioned, the isolated CSS only affects the HTML tags inside the component,
    but what if we have a component inside our component?
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，隔离的 CSS 只影响组件内部的 HTML 标签，但如果我们组件内部有其他组件呢？
- en: If we open `Component/Layout/NavMenu.razor.css`, we can see that for the `.nav-item`
    styles, some of them are using the `::deep` keyword;this is to say that even child
    components should also be affected by this style.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打开 `Component/Layout/NavMenu.razor.css`，我们可以看到，对于 `.nav-item` 样式，其中一些使用了
    `::deep` 关键字；这意味着即使是子组件也应该受到这种样式的影响。
- en: 'Take a look at this code:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 看看以下代码：
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'It is targeting the `<a>` tag, but the Razor code looks like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 它针对的是 `<a>` 标签，但 Razor 代码看起来是这样的：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: It is the `NavLink` component that renders the `<a>` `t`ag; by adding `::deep`,
    we are saying we want to apply this style to all elements with the `.nav-item`
    class and all the `<a>` `t`ags inside that element.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 是 `NavLink` 组件渲染了 `<a>` 标签；通过添加 `::deep`，我们表示我们希望将此样式应用于具有 `.nav-item` 类的所有元素以及该元素内部的所有
    `<a>` 标签。
- en: There is one more thing we need to know about – `::deep`; it makes sure to share
    the ID of the attribute (`b-bfl5h5967n`, for example), and it needs an HTML tag
    to do so. So, if we have a component that consists of other components (not adding
    any HTML tags at all), we need to add an HTML tag around the content to make `::deep`
    work.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要了解的另一件事是 `::deep`；它确保共享属性的 ID（例如 `b-bfl5h5967n`），并且需要一个 HTML 标签来实现这一点。因此，如果我们有一个由其他组件组成的组件（完全不添加任何
    HTML 标签），我们需要在内容周围添加一个 HTML 标签，以便 `::deep` 能够工作。
- en: Before we summarize this chapter, let us do one more thing.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们总结本章内容之前，让我们再做一些事情。
- en: 'Let’s fix the background color of the menu:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复菜单的背景颜色：
- en: Open `Components/Layout/MainLayout.razor.css`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Components/Layout/MainLayout.razor.css`。
- en: 'Look for the `.sidebar` style and replace it with the following code:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找 `.sidebar` 样式并将其替换为以下代码：
- en: '[PRE14]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Replace the `.top-row` style with the following code:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `.top-row` 样式替换为以下代码：
- en: '[PRE15]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We replaced the background color and removed a border.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们替换了背景颜色并移除了边框。
- en: 'In the `.top-row ::deep a, .top-row ::deep .btn-link` style, add the following:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `.top-row ::deep a, .top-row ::deep .btn-link` 样式下，添加以下内容：
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now, we are able to see the login/logout link a bit better.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们能够更好地看到登录/登出链接。
- en: We now have a working admin interface and a good-looking site.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个工作的管理界面和一个看起来不错的网站。
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have added shared CSS.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们添加了共享 CSS。
- en: We saw how to create shared libraries (for others to use). This is also a great
    way to structure our in-house projects (so that it is easy to change from Blazor
    Server to Blazor WebAssembly, or the other way around).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何创建共享库（供他人使用）。这也是结构化我们内部项目的一个很好的方法（这样就可以轻松地从 Blazor Server 转换到 Blazor
    WebAssembly，或者反过来）。
- en: If you have a site already, you can build your Blazor components in a shared
    library, which we have done throughout the book.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有了网站，你可以在共享库中构建你的 Blazor 组件，我们在整本书中都这样做过。
- en: Using components as part of your site (using Blazor Server), you can get started
    with Blazor bit by bit until you have converted the whole thing. When that is
    done, you can decide whether or not to keep using Blazor Server (as I mentioned,
    we use Blazor Server at my workplace) or move to Blazor WebAssembly, or use both
    as our project does.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将组件作为你网站的一部分（使用 Blazor Server），你可以逐步开始使用 Blazor，直到你将整个网站转换完成。当这一切都完成时，你可以决定是否继续使用
    Blazor Server（如我提到的，我们在我的工作场所使用 Blazor Server）或者转向 Blazor WebAssembly，或者像我们的项目一样两者都使用。
- en: We talked about how we can use SASS and CSS in our site, both *regular* CSS
    and *isolated* CSS.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了如何在我们的网站上使用 SASS 和 CSS，包括*常规* CSS 和*隔离* CSS。
- en: In the next chapter, we will learn about the one thing we are trying to avoid
    (at least, I am) as Blazor developers – JavaScript.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将了解我们试图避免的一件事（至少，我是这样）——作为 Blazor 开发者——JavaScript。
