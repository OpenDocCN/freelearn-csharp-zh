["```cs\n    dotnet new webapi -minimal -o Chapter07\n    ```", "```cs\ncd Chapter07\ncode.\n```", "```cs\nnamespace Chapter07.Models;\npublic class Icecream\n{\n    public int Id { get; set; }\n    public string? Name { get; set; }\n    public string? Description { get; set; }\n}\n```", "```cs\n    dotnet add package Microsoft.EntityFrameworkCore.InMemory\n    ```", "```cs\nclass IcecreamDb : DbContext\n{\n    public IcecreamDb(DbContextOptions options) :\n      base(options) { }\n    public DbSet<Icecream> Icecreams { get; set; } = null!;\n}\n```", "```cs\nbuilder.Services.AddDbContext<IcecreamDb>(options => options.UseInMemoryDatabase(\"icecreams\"));\n```", "```cs\napp.MapPost(\"/icecreams\", async (IcecreamDb db, Icecream icecream) =>\n{\n    await db.Icecreams.AddAsync(icecream);\n    await db.SaveChangesAsync();\n    return Results.Created($\"/icecreams/{icecream.Id}\",\n                           icecream);\n});\n```", "```cs\napp.MapGet(\"/icecreams\", async (IcecreamDb db) => await db.Icecreams.ToListAsync());\n```", "```cs\n{\n  \"id\": 0,\n  \"name\": \"icecream 1\",\n  \"description\": \"description 1\"\n}\n```", "```cs\n    app.MapGet(\"/icecreams/{id}\", async (IcecreamDb db, int id) => await db.Icecreams.FindAsync(id));\n    ```", "```cs\n    {\n      \"id\": 1,\n      \"name\": \"icecream 1\",\n      \"description\": \"description 1\"\n    }\n    ```", "```cs\napp.MapPut(\"/icecreams/{id}\", async (IcecreamDb db, Icecream updateicecream, int id) =>\n{\n    var icecream = await db.Icecreams.FindAsync(id);\n    if (icecream is null) return Results.NotFound();\n    icecream.Name = updateicecream.Name;\n    icecream.Description = updateicecream.Description;\n    await db.SaveChangesAsync();\n    return Results.NoContent();\n});\n```", "```cs\napp.MapDelete(\"/icecreams/{id}\", async (IcecreamDb db, int id) =>\n{\n    var icecream = await db.Icecreams.FindAsync(id);\n    if (icecream is null)\n    {\n        return Results.NotFound();\n    }\n    db.Icecreams.Remove(icecream);\n    await db.SaveChangesAsync();\n    return Results.Ok();\n});\n```", "```cs\nCREATE TABLE [dbo].[Icecreams](\n     [Id] [int] IDENTITY(1,1) NOT NULL,\n     [Name] [nvarchar](50) NOT NULL,\n     [Description] [nvarchar](255) NOT NULL)\nGO\nINSERT [dbo].[Icecreams] ([Name], [Description]) VALUES ('Icecream 1','Description 1')\nINSERT [dbo].[Icecreams] ([Name], [Description]) VALUES ('Icecream 2','Description 2')\nINSERT [dbo].[Icecreams] ([Name], [Description]) VALUES ('Icecream 3','Description 3')\n```", "```cs\nInstall-Package Dapper\nInstall-Package Microsoft.Data.SqlClient\n```", "```cs\n    public class Icecream\n    {\n        public int Id { get; set; }\n        public string? Name { get; set; }\n        public string? Description { get; set; }\n    }\n    ```", "```cs\n    \"ConnectionStrings\": {\n        \"SqlConnection\": \n          \"Data Source=(localdb)\\\\MSSQLLocalDB;\n           Initial Catalog=Chapter07;\n           Integrated Security=True;\n           Connect Timeout=30;\n           Encrypt=False;\n           TrustServerCertificate=False;\"\n    }\n    ```", "```cs\n    public class DapperContext\n    {\n        private readonly IConfiguration _configuration;\n        private readonly string _connectionString;\n        public DapperContext(IConfiguration configuration)\n        {\n            _configuration = configuration;\n            _connectionString = _configuration\n              .GetConnectionString(\"SqlConnection\");\n        }\n        public IDbConnection CreateConnection()\n            => new SqlConnection(_connectionString);\n    }\n    ```", "```cs\n    public interface IIcecreamsRepository\n    {\n    }\n    public class IcecreamsRepository : IIcecreamsRepository\n    {\n        private readonly DapperContext _context;\n        public IcecreamsRepository(DapperContext context)\n        {\n            _context = context;\n        }\n    }\n    ```", "```cs\n    builder.Services.AddSingleton<DapperContext>();\n    builder.Services.AddScoped<IIcecreamsRepository, IcecreamsRepository>();\n    ```", "```cs\npublic Task<IEnumerable<Icecream>> GetIcecreams();\n```", "```cs\npublic async Task<IEnumerable<Icecream>> GetIcecreams()\n{\n    var query = \"SELECT * FROM Icecreams\";\n    using (var connection = _context.CreateConnection())\n    {\n        var result = \n          await connection.QueryAsync<Icecream>(query);\n        return result.ToList();\n    }\n}\n```", "```cs\npublic interface IIcecreamsRepository\n{\n    public Task<IEnumerable<Icecream>> GetIcecreams();\n}\npublic class IcecreamsRepository : IIcecreamsRepository\n{\n    private readonly DapperContext _context;\n    public IcecreamsRepository(DapperContext context)\n    {\n        _context = context;\n    }\n    public async Task<IEnumerable<Icecream>> GetIcecreams()\n    {\n        var query = \"SELECT * FROM Icecreams\";\n        using (var connection =\n              _context.CreateConnection())\n        {\n            var result = \n              await connection.QueryAsync<Icecream>(query);\n            return result.ToList();\n        }\n    }\n}\n```", "```cs\npublic Task CreateIcecream(Icecream icecream);\n```", "```cs\npublic async Task CreateIcecream(Icecream icecream)\n{\n    var query = \"INSERT INTO Icecreams (Name, Description)\n      VALUES (@Name, @Description)\";\n    var parameters = new DynamicParameters();\n    parameters.Add(\"Name\", icecream.Name, DbType.String);\n    parameters.Add(\"Description\", icecream.Description,\n                    DbType.String);\n    using (var connection = _context.CreateConnection())\n    {\n        await connection.ExecuteAsync(query, parameters);\n    }\n}\n```", "```cs\napp.MapPost(\"/icecreams\", async (IIcecreamsRepository repository, Icecream icecream) =>\n{\n    await repository.CreateIcecream(icecream);\n    return Results.Ok();\n});\napp.MapGet(\"/icecreams\", async (IIcecreamsRepository repository) => await repository.GetIcecreams());\n```"]