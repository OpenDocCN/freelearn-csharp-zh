- en: '*Chapter 1*: Hello Unity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we get started with using Unity to develop games, I think it's good to
    first understand Unity itself. Many people, especially those who are interested
    in games and game development, know that Unity is a widely used game engine, and
    you may have played many games developed with Unity. But you may not be familiar
    with how to use Unity to develop games. For example, there are many different
    Unity versions available, so how do you choose the version that suits you? Unity
    provides different subscription plans, but which subscription plan is right for
    your situation?
  prefs: []
  type: TYPE_NORMAL
- en: If you have never used Unity before, it is necessary for you to learn how to
    use the Unity Editor first. In addition to the Unity Editor, what features does
    the Unity engine provide to help game developers develop games? It is also important
    to know the features in Unity. If you are a .NET developer, then it's likely that
    you are familiar with Visual Studio. You need to know how to use Visual Studio
    to develop a Unity game. But developing a Unity game is different from developing
    a .NET application.
  prefs: []
  type: TYPE_NORMAL
- en: Am I asking too many questions? Don't worry – this chapter will help you answer
    them.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will introduce how to choose the right release of Unity
    and provide an overview of how to download and install Unity via the Unity Hub
    or the Unity installer. Then, we will choose the right subscription plan for your
    situation. At this point, you should have installed Unity and opened the Unity
    Editor.
  prefs: []
  type: TYPE_NORMAL
- en: If you have only just started using the Unity Editor, you may not know how to
    use it. We will first explore the Unity Editor and then discuss the different
    features provided by Unity. We will then introduce the .NET profiles in Unity
    and the scripting backend offered by Unity. Finally, we will present how to use
    Visual Studio to develop Unity games.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following key topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the Unity Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with different features in Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET/C# and scripting in Unity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building Unity games with Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before starting, I highly recommend you first check whether your system can
    run the Unity Editor. The following table gives the minimum requirements to run
    the Unity Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B17146_01_Table_1.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting started with the Unity Editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Whether you are an independent game developer or work in a team for a company,
    you need to do two things before installing or even downloading Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Choose the right Unity release for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choose the right subscription plan for you.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, before introducing how to install Unity and exploring the Unity Editor,
    let's first introduce the Unity release and subscription plans. We hope that by
    reading these contents, you can find the right release for you and choose a suitable
    subscription plan.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right Unity release for you
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Nowadays, Unity offers two different release versions each year. They are as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Tech Stream releases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Long-Term Support** (**LTS**) releases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Unity releases'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.01_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.1 – Unity releases
  prefs: []
  type: TYPE_NORMAL
- en: You may not be quite sure which version of Unity is best to use in your project,
    so I will explain these two different releases so that you can get an idea of
    how to choose the right release for you.
  prefs: []
  type: TYPE_NORMAL
- en: LTS releases provide developers with maximum stability and full support for
    their projects, and they are the last Tech Stream releases of each year. With
    LTS releases, there are no new features or API changes. The updates of LTS releases
    address crashes, and fix bugs and any minor issues. As I mentioned at the beginning
    of this section, each year, Unity releases new versions of the LTS release, and
    each one is supported for 2 full years from the date of the announcement.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, if you are looking for performance and stability, or your project
    is already in production or in the middle of development, it is a good idea to
    use the latest LTS release version to ensure best performance and stability.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing (April 2022), there are two LTS releases, namely Unity
    2020 LTS and Unity 2019.4\. Unity 2020 LTS is the latest LTS release and has the
    same feature set as the Unity 2020.2 Tech Stream release. Alternatively, Unity
    2019.4 is the legacy LTS release now.
  prefs: []
  type: TYPE_NORMAL
- en: The Tech Stream releases give developers who want to explore the latest in-progress
    features an option to use them to prepare for future projects. Unlike the LTS
    releases, a Tech Stream release will be released twice a year (typically published
    in the first and last quarters) and will only be supported until the next Tech
    Stream release is officially published.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, if you are preparing for your next project or working on prototyping
    and experimentation, you should try the Tech Stream releases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing (April 2022), the latest Tech Stream release is Unity
    2021.2\.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this section, I hope you have gained an understanding of the Unity
    releases, and you should be able to choose the right Unity release according to
    your situation.
  prefs: []
  type: TYPE_NORMAL
- en: When writing this book, I chose the latest LTS version, Unity 2020.3.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing the right subscription plan for you
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Unity is a widely used game engine, and many independent game developers use
    Unity to develop their games. But technically speaking, Unity is not a free game
    engine. In this section, I will introduce several different subscription plans
    offered by Unity. I hope that after reading this section, you can choose a subscription
    plan that suits your situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity offers a range of plans, from the free Personal plan for individual learners
    to Enterprise plans used by large organizations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – The Plans and pricing page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.02_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.2 – The Plans and pricing page
  prefs: []
  type: TYPE_NORMAL
- en: 'Because each Unity plan has different eligibility requirements, you should
    choose the right plan for your project. Next, I will introduce the subscription
    plans:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Personal plan** is free and includes all the basic functionality of Unity.
    You can choose this plan if you work as an individual and have earned less than
    $100,000 in revenue or funding for your Unity project in the past 12 months. In
    addition, if you are a student or educator, you can get additional benefits, but
    before that, you need to join the **GitHub Student Developer Pack** to be verified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Plus plan** is a paid plan and offers more functionality and training
    resources, such as advanced cloud diagnostics and splash screen customization.
    If you have earned more than $100,000 but less than $200,000 in revenue from using
    Unity in the past 12 months, you should choose this plan.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Pro plan** is also a paid plan. Compared with the Plus plan, you can get
    more technical support from Unity by using the Pro plan. If your organization
    has earned more than $200,000 in the last 12 months from any source, you must
    use the Pro plan or the **Enterprise plan**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Enterprise plan** is specifically for teams with at least 20 members and
    provides more support than the Pro plan. For example, a customer success manager
    from Unity will be assigned to your organization to provide guidance, orchestrate
    resources, and serve as an internal advocate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I hope this section was helpful for you in choosing the right Unity plan for
    your situation. Next, let's download and install the Unity Editor!
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing the Unity Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two different ways to download and install the Unity Editor. The first
    and recommended way to download and install Unity is to use the **Unity Hub**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity Hub is a management tool that can be used to manage all your Unity
    projects and Unity installations. We can take the following steps to install the
    Unity Hub and the Unity Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Unity Hub, visit the **Download Unity** page at [https://unity3d.com/get-unity/download](https://unity3d.com/get-unity/download):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.3 – The Download Unity page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.03_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.3 – The Download Unity page
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the **System requirements** section in the preceding screenshot,
    the Unity Hub supports **Windows**, **Mac OS X**, **Ubuntu**, and **CentOS**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the Unity Hub is very easy; you just need to choose the folder where
    the Unity Hub is installed. Then, click on the **Install** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.4 – Unity Hub Setup'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.04_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.4 – Unity Hub Setup
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the Unity Hub, select the **Run Unity Hub** option and click
    on the **Finish** button to launch the Unity Hub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.5 – Completing Unity Hub Setup'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.05_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.5 – Completing Unity Hub Setup
  prefs: []
  type: TYPE_NORMAL
- en: I am using the latest version of Unity Hub (*version 3.0.0*) at the time of
    writing. If you have used previous versions of Unity Hub, you will find that the
    launch page of the new version of Unity Hub is completely different.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need a Unity account to access the Unity Editor and the Unity Hub. If you
    don''t have a Unity account yet, then you need to create a new one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.6 – Unity Hub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.06_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.6 – Unity Hub
  prefs: []
  type: TYPE_NORMAL
- en: 'When you sign into the Unity Hub for the first time, you will be asked to add
    an active license, as you can see at the top of the following screenshot. Click
    on the **Manage licenses** button to open the **Licenses** setting panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.7 – Click the Manage licenses button'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.07_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.7 – Click the Manage licenses button
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two buttons available for you to add a new license. You can click
    either the **Add** button at the top-right corner or the **Add license** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The Licenses setting panel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.08_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.8 – The Licenses setting panel
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you have different options to activate the license. We have discussed
    the different Unity subscription plans in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – Add new license'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.09_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.9 – Add new license
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the new license, we can start exploring the Unity Hub. From the
    **Projects** view, you can find a list of Unity projects that are tracked by the
    Unity Hub. You can also create a brand-new project by clicking the **New project**
    button at the upper-right corner of the **Projects** view, or you can import an
    existing project by clicking the **Open** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.10 – The Projects view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.10_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.10 – The Projects view
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the Unity Editor, open the **Installs** view, where you can manage
    the installation of multiple versions of the Unity Editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – The Installs view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.11_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.11 – The Installs view
  prefs: []
  type: TYPE_NORMAL
- en: There is a list of the Unity Editors that are installed and managed by the Unity
    Hub. Similar to the **Projects** view, you can download and install a new Unity
    Editor, or you can import an existing Unity Editor that is not managed by the
    Unity Hub, such as the Unity Editor that we installed using the Unity installer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Install Unity Editor** panel by clicking the **Install Editor**
    button on the **Installs** view. Then, you will see the latest version of each
    release:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – Install Unity Editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.12_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.12 – Install Unity Editor
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Unity 2018 LTS has reached the end of its support cycle, so you should not install
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the latest version of the Unity 2020 LTS release, so we need to
    install Unity **2020.3.13f1** here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.13 – Install Unity 2020.3.13f1'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.13_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.13 – Install Unity 2020.3.13f1
  prefs: []
  type: TYPE_NORMAL
- en: Then, we need to select the modules that need to be installed. As you can see
    in the preceding screenshot, **Microsoft Visual Studio Community 2019** will be
    installed by default, which will be our **Integrated Development Environment**
    (**IDE**) to develop games in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to change the installation location, you can change it in the **Installs**
    settings of the **Preferences** panel.
  prefs: []
  type: TYPE_NORMAL
- en: Once it has been downloaded and installed, we are ready to start exploring the
    Unity Editor!
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you may need a specific version that is not available through the
    Unity Hub, such as some older Unity versions. At this point, you can also install
    the Unity Editor a second way, which is through the **Unity installer**. You can
    use the Unity installer to download the previous versions of Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.14 – The Unity download archive page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.14_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.14 – The Unity download archive page
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, follow these steps to install the Unity Editor through the Unity installer:'
  prefs: []
  type: TYPE_NORMAL
- en: To download a previous version of Unity, you should access the Unity download
    archive page at [https://unity3d.com/get-unity/download/archive](https://unity3d.com/get-unity/download/archive).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Next** button and choose the components of Unity that you want
    to download and install. The Unity installer should resemble the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.15 – The Unity installer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.15_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.15 – The Unity installer
  prefs: []
  type: TYPE_NORMAL
- en: 'The Unity Editor is selected by default; in order to build games for different
    platforms, you also need to select the corresponding **build support** components.
    For example, if you want to build an Android game running on Android devices,
    you need to download and install the **Android Build Support** component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.16 – Choosing components'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.16_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.16 – Choosing components
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Next** button, and then you need to choose **download and install
    locations**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.17 – Choose Download and Install locations'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.17_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.17 – Choose Download and Install locations
  prefs: []
  type: TYPE_NORMAL
- en: 'After specifying where to download and install these files, click the **Next**
    button to download Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.18 – Downloading and Installing'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.18_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.18 – Downloading and Installing
  prefs: []
  type: TYPE_NORMAL
- en: After the download and installation are complete, the Unity Editor icon will
    appear on your desktop.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the Unity Editor
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do is use the Unity Hub to create a new Unity project.
    As I mentioned in the previous section, we will create a brand-new project by
    clicking the **New Project** button at the upper-right corner of the **Projects**
    view.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.19 – Creating a new project'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.19_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.19 – Creating a new project
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, we can choose different Unity Editor versions
    for this new project, and Unity provides us with some built-in project templates,
    such as the **2D**, **3D**, **HDRP**, and **URP** templates. You can also download
    and install more templates from Unity, such as the **VR** template and the **AR**
    template. In the **PROJECT SETTINGS** section, you can set the name of the project
    and the location of the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we will choose the default `UnityBook`. Then, click on the **Create project**
    button. After that, the Unity Editor you previously selected will launch and open
    a new project for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.20 – The Unity Editor'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.20_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.20 – The Unity Editor
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding screenshot, the Unity Editor layout organizes
    the most important windows for you. Specifically, the default layout divides the
    editor interface into five key areas. From top to bottom, they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Toolbar**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Hierarchy window**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scene view and Game view**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inspector window**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Project window**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, I will introduce these UI areas in order.
  prefs: []
  type: TYPE_NORMAL
- en: The Toolbar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Toolbar is always at the top of the Unity Editor interface, and it consists
    of several groups of controls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.21 – The Toolbar'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.21_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.21 – The Toolbar
  prefs: []
  type: TYPE_NORMAL
- en: 'From left to right, the first tool in the Toolbar is the **transform tools
    set**. The transform tools are used in the **Scene** view and allow you to pan
    around the Scene and move, rotate, and scale individual GameObjects in the Scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.22  – The transform tools set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.22_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.22 – The transform tools set
  prefs: []
  type: TYPE_NORMAL
- en: 'The next tool is the **Gizmo handle position toggles set**, which is used to
    define the position of any transform tool Gizmo in the **Scene** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.23 – The Gizmo handle position toggles set'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.23_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.23 – The Gizmo handle position toggles set
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, you can find the **Play, Pause, and Step buttons** in the center. You
    can use these buttons in the **Game** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.24 – The Play, Pause, and Step buttons'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.24_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.24 – The Play, Pause, and Step buttons
  prefs: []
  type: TYPE_NORMAL
- en: On the right side, let's take a look at the **Unity Plastic SCM** button first,
    which allows you to access the Plastic SCM version control and source code management
    tool in the Unity Editor directly. You can click the **cloud** button to open
    the **Unity Services** window, where you are able to access a lot of cloud services
    provided by Unity, such as the **Cloud Build** service, the **Analytics** service,
    and the **Ads** service.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also access your Unity account from the **Account** drop-down menu.
    There are two other drop-down menus on the right, namely **Layers** and **Layout**;
    you can control which objects in the **Scene** view appear using the **Layers**
    drop-down menu and change or create a new layout of your Unity Editor using the
    **Layout** drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.25 – The Unity Collaborate and Unity Services buttons and'
  prefs: []
  type: TYPE_NORMAL
- en: the Unity Account, Layers, and Layout dropdowns
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.25_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.25 – The Unity Collaborate and Unity Services buttons and the Unity
    Account, Layers, and Layout dropdowns
  prefs: []
  type: TYPE_NORMAL
- en: The Hierarchy window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second area is the **Hierarchy** window. As you can see in the following
    screenshot, the **Hierarchy** window in the Unity Editor displays everything in
    a **Scene**; the things in the Scene, such as **Main Camera**, **Directional Light**,
    and the 3D cube, are called **GameObjects**.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also organize all the objects in the game world in the **Hierarchy**
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.26 – The Hierarchy window'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.26_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.26 – The Hierarchy window
  prefs: []
  type: TYPE_NORMAL
- en: 'It is very easy to create a new GameObject in a Scene. You only need to right-click
    on the **Hierarchy** window, and a menu will pop up where you can select the object
    you want to create:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.27 – Creating a new GameObject'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.27_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.27 – Creating a new GameObject
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth noting that Unity uses parent-child hierarchies to organize GameObjects,
    so you can create one object as a child of another. If you want to create a new
    GameObject as a child of another GameObject, then you only need to select the
    parent GameObject first and then right-click to create the child GameObject:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.28 – The parent-child hierarchy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.28_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.28 – The parent-child hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: 'Another way to create a parent-child hierarchy is to directly drag an existing
    GameObject onto the parent GameObject in the **Hierarchy** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.29 – The parent-child hierarchy'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.29_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.29 – The parent-child hierarchy
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, we dragged the GameObject named
    **Cube** onto the GameObject named **Child** to create a parent-child hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.30 – Hiding and showing GameObjects'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.30_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.30 – Hiding and showing GameObjects
  prefs: []
  type: TYPE_NORMAL
- en: Another feature of the **Hierarchy** window is that it allows you to hide and
    show GameObjects in the **Scene** view without changing their visibility in the
    **Game** view or the final application.
  prefs: []
  type: TYPE_NORMAL
- en: The Scene view and the Game view
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The center of the default Unity Editor layout is the **Scene** view and the
    **Game** view, which is the most important window in the Unity Editor. The **Scene**
    view is an interactive view of the game world you are creating:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.31 – The Scene view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.31_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.31 – The Scene view
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the **Scene** view to manipulate GameObjects and view them from
    various angles. Also, there are some useful tools available in the **Scene** view,
    such as the **Scene** Gizmo tool at the upper-right corner of the **Scene** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.32 – The Scene Gizmo tool'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.32_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.32 – The Scene Gizmo tool
  prefs: []
  type: TYPE_NORMAL
- en: It shows the current orientation of the **Scene** view camera and allows you
    to quickly modify the angle of the view and projection mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to modify the settings of the **Scene** view camera, you can click
    the **Camera** button next to the **Gizmos** button to open the **Scene Camera**
    settings window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.33 – The Scene Camera settings'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.33_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.33 – The Scene Camera settings
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can adjust some settings of the **Scene** view camera, such as **Field
    of View** and **Camera Speed**.
  prefs: []
  type: TYPE_NORMAL
- en: 'A visual grid is another useful tool that you can use in the **Scene** view
    to help you align GameObjects by moving them to the nearest grid location:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.34 – Toggle the visibility of the grid'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.34_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.34 – Toggle the visibility of the grid
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, you can also move a GameObject to
    a grid projected along the **X**, **Y**, or **Z** axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The last useful tool in the **Scene** view that I want to introduce is **draw
    mode** used in the Scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.35 – The draw mode in the Scene'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.35_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.35 – The draw mode in the Scene
  prefs: []
  type: TYPE_NORMAL
- en: This is useful if your project uses the built-in render pipeline of Unity because
    a different draw mode in the Scene can help you understand and debug the lighting
    in it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the default layout, the **Game** view also appears in the same area as the
    **Scene** view. You can click the **Game** button to switch to the **Game** view
    from the **Scene** view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.36 – Click the Game button to switch to the Game view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.36_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.36 – Click the Game button to switch to the Game view
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Game** view represents your final published game. The content of the
    **Game** view is rendered from the camera(s) in your game. In the **Game** view,
    you cannot modify the viewing angle and projection mode at will, as with the **Scene**
    view. You need to modify the settings of the camera object to achieve this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.37 – The Game view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_1.37_B17146.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 1.37 – The Game view
  prefs: []
  type: TYPE_NORMAL
- en: You can run your game directly inside the **Game** view by clicking the **Play**
    button on the Toolbar. It's important to note that in **Play** mode, any changes
    you make are temporary and will be reset when you exit it; therefore, it is not
    a good idea to make lots of changes in play mode.
  prefs: []
  type: TYPE_NORMAL
- en: I want to introduce three tools in the **Game** view, namely **Aspect**, **Maximize
    On Play**, and **Stats**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Aspect** drop-down menu is very useful when you develop games for different
    screens with different aspect ratios. You can select different values to test
    how your game looks on these screens, and you even can add custom values by clicking
    the **plus** button at the bottom of the menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.38_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.38 – The Free Aspect drop-down menu
  prefs: []
  type: TYPE_NORMAL
- en: 'The second feature is called **Maximize On Play**, which can maximize the **Game**
    view for a full-screen preview when you enter play mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.39_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.39 – The Maximize On Play button
  prefs: []
  type: TYPE_NORMAL
- en: 'The third feature is called **Stats**. This feature is useful because it can
    display the **rendering statistics** about your game''s audio and graphics. Therefore,
    you can use it for monitoring the performance of your game while in play mode:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.40_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.40 – The Stats window
  prefs: []
  type: TYPE_NORMAL
- en: In the **Scene** view, you can view and adjust the game world you are creating.
    In the **Game** view, you can see your final game. So, this area is very important
    in the Editor. Next, let's take a look at the UI area related to a specific GameObject
    in the Scene.
  prefs: []
  type: TYPE_NORMAL
- en: The Inspector window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to modify the properties of a GameObject or a component on a GameObject,
    you need to use the **Inspector** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can select a GameObject in the **Scene** view or the **Hierarchy** window,
    and then you will see the properties and the components of it in the **Inspector**
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.41_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.41 – The Inspector window of a GameObject
  prefs: []
  type: TYPE_NORMAL
- en: You can modify these properties directly in the **Inspector** window, which
    also provides some useful tools that can help you modify your GameObjects.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if you want to copy the values of a component on a GameObject,
    you can right-click on the component, and then a menu will pop up; from there,
    you can select the **Copy Component** command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.42_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.42 – Copy Component
  prefs: []
  type: TYPE_NORMAL
- en: 'Not only can the GameObjects in the **Scene** view be inspected but also the
    digital assets in the **Project** window. You can select a digital asset in the
    **Project** window, and the **Inspector** window will display the settings that
    control how Unity imports and uses the asset at runtime:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.43_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.43 – The Inspector window of an asset
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to view and modify the properties of a GameObject
    and asset through the **Inspector** window.
  prefs: []
  type: TYPE_NORMAL
- en: The Project window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The final window I will introduce is the `assets` files in folders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.44_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.44 – The Project window
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Project** window is the main way to navigate and find assets in your
    game. It provides two ways to search assets, by type or label:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.45_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.45 – Searching assets by type
  prefs: []
  type: TYPE_NORMAL
- en: 'It is very easy to import external digital assets or create an asset inside
    the Unity Editor directly. You just need to right-click on the Project window
    and a menu will pop up where you can create a new asset or import an existing
    asset:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.46_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.46 – Creating an asset
  prefs: []
  type: TYPE_NORMAL
- en: I hope you now have a good understanding of the Unity Editor by reading this
    section. Next, I will introduce what a game engine is and what important features
    Unity provides as a game engine.
  prefs: []
  type: TYPE_NORMAL
- en: Working with different features in Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Nowadays, Unity is no longer just a game engine but also a creative tool widely
    used in various industries. However, Unity still retains its game engine roots,
    and it remains one of the most popular game engines. To learn how to use Unity
    to develop games, you must first understand what features Unity provides for game
    developers as a game engine.
  prefs: []
  type: TYPE_NORMAL
- en: In fact, almost all game engines provide similar functional modules to Unity
    to game developers. So, the first question is, what exactly is a game engine?
  prefs: []
  type: TYPE_NORMAL
- en: What is a game engine?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The term **game engine** is widely used in the game industry, but not everyone
    knows what this term means, especially new game developers. So, I will explain
    what a game engine is and, at the same time, introduce the corresponding functions
    in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: A game engine is not just a computer graphics renderer. Of course, rendering
    is an important function of a game engine, but the process of creating a game
    is much more complicated than just rendering.
  prefs: []
  type: TYPE_NORMAL
- en: As a game developer, you need to import different types of **digital assets**,
    such as 3D models, 2D textures, and audio, and most of these digital assets are
    not created inside a game engine. Therefore, a game engine should provide the
    function of managing digital assets. In addition to digital assets, you also need
    to use **scripts** to add game logic to guide these assets to perform correct
    behaviors, such as character interactions.
  prefs: []
  type: TYPE_NORMAL
- en: '**UI** is another integral part of a game, and even some gameplay is based
    on UI. Therefore, a good game engine should provide an easy-to-use and powerful
    UI toolkit to develop user interfaces for games.'
  prefs: []
  type: TYPE_NORMAL
- en: You can use other software to develop animation files and import them into a
    game engine, but in order for animation files to be played and controlled correctly
    in the game, the game engine needs to provide an **animation** feature.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, a **physical** effect is a common function in modern games,
    so a powerful game engine should provide a physical function so that game developers
    do not need to implement a physical effect from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: There is no doubt that adding **video and audio** to your game can make your
    game livelier and more interesting. With audio especially, suitable background
    music and some appropriate sound effects can make your game feel completely different.
    Even if it is just a prototype, background music and sound effects can make the
    game more complete and more professional. Therefore, although many people often
    ignore the functions of video and sound when talking about game engines, I don't
    think that a game engine without video and audio functions is a good one.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, there are many features in a game engine for game developers
    to develop their games. A game engine integrates all aspects of creating a game
    to create a complete game user experience. So, in game development, you will deal
    with different functions. For example, you may need to properly manage digital
    assets and create appropriate digital assets for your game engine to optimize
    performance at runtime, or you may need to know how to use the scripting function
    provided by the game engine you are using to develop logic for your game.
  prefs: []
  type: TYPE_NORMAL
- en: As one of the most popular game engines, Unity also provides the aforementioned
    functions. In the following subsection, I will introduce these functions in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Features in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like other excellent game engines, Unity also provides many functions for game
    developers. You will be introduced to these functions in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Graphics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The first feature I want to introduce is **graphics** in Unity. You can use
    Unity''s graphics features to create beautiful, optimized graphics on various
    platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.47_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.47 – A Unity HDRP template Scene
  prefs: []
  type: TYPE_NORMAL
- en: 'A render pipeline performs a series of operations that render the contents
    of a Scene on a screen. There are three render pipelines available in Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Built-in Render Pipeline**, which is the default render pipeline in Unity.
    You cannot modify this render pipeline.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Universal Render Pipeline** (**URP**), which allows developers to customize
    and create optimized graphics for different platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **High Definition Render Pipeline** (**HDRP**), which focuses on cutting-edge,
    high-fidelity graphics on high-end platforms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, you can also create your own render pipeline by using the **Scriptable
    Render Pipeline API** in Unity. We will introduce it in detail in [*Chapter 8*](B17146_08_Final_ASB_ePub.xhtml#_idTextAnchor143),
    *The Scriptable Render Pipeline in Unity*.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Scripting** is another essential feature of Unity. You need scripts to implement
    the game logic in your games.'
  prefs: []
  type: TYPE_NORMAL
- en: The Unity engine is built with native C/C++ internally, but it offers scripting
    APIs in C#, so you do not have to learn C/C++ to create a game. In the following
    sections and chapters, you will learn more about the concepts of scripting.
  prefs: []
  type: TYPE_NORMAL
- en: UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'UI is very important for a game, and Unity offers three different UI solutions
    for game developers:'
  prefs: []
  type: TYPE_NORMAL
- en: The **Immediate Mode Graphical User Interface** (**IMGUI**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Unity UI** (**uGUI**) package
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **UI Toolkit**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The IMGUI is a relatively old UI solution in Unity, and it is not recommended
    for building a runtime UI. The UI Toolkit is the latest UI solution; however,
    it is still missing some features that you can find in the uGUI package and the
    IMGUI. The uGUI package is a mature UI solution in Unity, which is widely used
    in the game industry. We will introduce the uGUI package in detail in [*Chapter
    3*](B17146_03_Final_ASB_ePub.xhtml#_idTextAnchor046), *Developing UI with the
    Unity UI System*.
  prefs: []
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Animation can make your game more vivid. Unity provides a powerful animation
    feature called **Mecanim** that allows you to retarget an animation, control the
    weight of it at runtime, and call events from the animation playback.
  prefs: []
  type: TYPE_NORMAL
- en: We will introduce Unity's animation system in [*Chapter 4*](B17146_04_Final_ASB_ePub.xhtml#_idTextAnchor062),
    *Creating Animations with the Unity Animation System*.
  prefs: []
  type: TYPE_NORMAL
- en: Physics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Physical simulation** is an indispensable feature in certain types of games,
    and some gameplays are even based entirely on physical simulation. There are different
    physics engine implementations in Unity, and you can select one according to your
    game needs.'
  prefs: []
  type: TYPE_NORMAL
- en: We will introduce Unity's physics engine implementations in [*Chapter 5*](B17146_05_Final_ASB_ePub.xhtml#_idTextAnchor078),
    *Working with the Unity Physics System*.
  prefs: []
  type: TYPE_NORMAL
- en: Video and audio
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Good background music, sound effects, and video can make your game stand out.
    This is a feature that cannot be ignored. Unity provides **video and audio** features,
    allowing your game to play videos on different platforms, and supports real-time
    mixing and full 3D spatial sound effects.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss video and audio more in [*Chapter 6*](B17146_06_Final_ASB_ePub.xhtml#_idTextAnchor095),
    *Integrating Audio and Video in a Unity Project*.
  prefs: []
  type: TYPE_NORMAL
- en: Assets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can import your digital asset files into the Unity Editor, such as 3D models
    and 2D textures. Unity offers an Asset Import Pipeline to process these imported
    assets. You can also customize the import settings to control how Unity imports
    and uses the assets at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: We will introduce **assets management** and **serialization** in [*Chapter 10*](B17146_10_Final_ASB_ePub.xhtml#_idTextAnchor181),
    *Serialization System and Assets Management In Unity and Azure*.
  prefs: []
  type: TYPE_NORMAL
- en: We've briefly introduced the functions that a game engine needs to provide and
    the functions provided by Unity. Next, let's introduce .NET/C# and scripting in
    Unity.
  prefs: []
  type: TYPE_NORMAL
- en: .NET/C# and scripting in Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity is a game engine written in C/C++, but in order to make it easier for
    game developers to develop games, Unity provides C# (*pronounced C-sharp*) as
    a scripting programming language to write game logic in Unity. This is because
    compared with C/C++, C# is easier to learn. In addition, it is a "managed language,"
    which means that it will automatically manage memory for you – allocate release
    memory, cover memory leaks, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will introduce .NET/C# and scripting in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: .NET profiles in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Unity game engine uses **Mono**, an open source ECMA CLI, C#, and .NET
    implementation, for scripting. You can follow the development of Unity''s fork
    of Mono on GitHub: [https://github.com/Unity-Technologies/mono/tree/unity-master-new-unitychanges](https://github.com/Unity-Technologies/mono/tree/unity-master-new-unitychanges).'
  prefs: []
  type: TYPE_NORMAL
- en: Unity provides different .NET profiles. If you are using the legacy version
    of Unity, which is before Unity 2018, you may find that it provides two API compatibility
    levels in the **Player** settings panel (**Edit** | **Project Settings** | **Player**
    | **Other Settings**), which are **.NET 2.0 Subset** and **.NET 2.0**. First of
    all, if you are using a legacy version of Unity, then I strongly recommend that
    you update your Unity version. Secondly, both the **.NET 2.0 Subset** and **.NET
    2.0** profiles in Unity are closely aligned with the .NET 2.0 profile from Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a modern version of Unity, which is Unity 2019 or later, you
    will find another two .NET profiles supported by Unity, which are **.NET Standard
    2.0** and **.NET 4.x**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.48_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.48 – The Api Compatibility Level settings
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The name of the .NET Standard 2.0 profile can be a bit misleading because it
    is not related to the **.NET 2.0** and **.NET 2.0 Subset** profiles from the legacy
    versions of Unity.
  prefs: []
  type: TYPE_NORMAL
- en: '.NET Standard is a formal specification of the .NET APIs that all .NET platforms
    have to implement. These .NET platforms include .NET Framework, .NET Core, Xamarin,
    and Mono. You can find the .NET Standard repository on GitHub: [https://github.com/dotnet/standard](https://github.com/dotnet/standard).'
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, the .NET 4.x profile in Unity matches the .NET 4 series (.NET
    4.5, .NET 4.6, .NET 4.7, and so on) of profiles from the .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, it is a good idea to use the .NET Standard 2.0 profile in Unity,
    and you should choose the .NET 4.x profile only for compatibility reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting backends in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In addition to the .NET profiles, Unity also provides two different **scripting
    backends**, which are **Mono** and **IL2CPP** (which stands for **Intermediate
    Language To C++**):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.49_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.49 – The Scripting Backend settings
  prefs: []
  type: TYPE_NORMAL
- en: You can change the scripting backend of your project in the same settings panel,
    which can be found by going to **Edit** | **Project Settings** | **Player** |
    **Other Settings**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The key difference between the two scripting backends is how they compile your
    Unity scripting API code (C# code):'
  prefs: []
  type: TYPE_NORMAL
- en: The Mono scripting backend uses **Just-in-Time** (**JIT**) compilation and compiles
    code on demand at runtime. It will compile your Unity scripting API code to regular
    .NET DLLs. And, as I mentioned in the previous sections, Unity uses an implementation
    of the standard Mono runtime for scripting that natively supports C#.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternatively, the IL2CPP scripting backend uses **Ahead-of-Time** (**AOT**)
    compilation and compiles your entire application before it is run. And it not
    only compiles your Unity scripting API code into .NET DLL but also converts all
    managed assemblies into standard C++ code. In addition, the runtime of IL2CPP
    is developed by Unity, which is an alternative to the Mono runtime:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Figure_1.50_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.50 – The IL2CPP scripting backend
  prefs: []
  type: TYPE_NORMAL
- en: As shown in *Figure 1.50*, IL2CPP not only compiles C# code into managed assemblies
    but also further converts assemblies into C++ code, and then compiles the C++
    code into the native binary format.
  prefs: []
  type: TYPE_NORMAL
- en: Clearly, IL2CPP takes more time to compile code compared to Mono, so why do
    we still need IL2CPP?
  prefs: []
  type: TYPE_NORMAL
- en: Well, first, IL2CPP uses AOT compilation, which takes longer to compile, but
    when you ship the game for a specific platform, the binary files are fully specified,
    which means that compared to Mono, code generation is greatly improved.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, it is worth noting that IL2CPP is the only scripting backend available
    when building for **iOS** and **WebGL**. In addition to iOS and WebGL, Unity has
    added support for **Android 64-bit** in Unity 2018.2 to comply with the **Google
    Play** **Store** policy, which requires that starting from August 1, 2019, your
    apps published on Google Play need to support 64-bit architectures:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.51_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.51 – The Android 64-bit ARM architecture is not supported on the Mono
    scripting backend
  prefs: []
  type: TYPE_NORMAL
- en: And as you can see in the preceding screenshot, the Android 64-bit ARM architecture
    is not supported on the Mono scripting backend. In this situation, you have to
    choose the IL2CPP scripting backend.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, whether we use IL2CPP for better code generation or some specific platforms
    or architectures, spending more compilation time is still a disadvantage of IL2CPP.
    So, how should we optimize the compilation time of IL2CPP? I think the following
    tips will help:'
  prefs: []
  type: TYPE_NORMAL
- en: Don't delete the previous `build` folder, and build your project with the IL2CPP
    scripting backend at the same location as the folder. This is because we can use
    incremental building, which means the C++ compiler only recompiles files that
    have changed since the last build.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Store your project and target build folder on a **Solid-State Drive** (**SSD**).
    This is because when IL2CPP is selected, the compilation process will convert
    the IL code into C++ and compile it, which involves a lot of read/write operations.
    A faster storage device will speed up this process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Disable anti-malware software before building the project. Of course, this depends
    on your security strategy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well, I hope that by reading this section, you now have a general understanding
    of Unity's scripting system, such as the .NET profiles in Unity, the two scripting
    backends, and some optimization tips for IL2CPP.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will learn how to set up your development environment
    and use the widely used Visual Studio to develop games in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: Building Unity games with Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you start writing any code, it is important to choose suitable development
    tools. Microsoft''s **Visual Studio** is not only a widely used IDE but also the
    development environment that is installed by default when you install Unity on
    Windows or macOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.52_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.52 – Visual Studio Installer
  prefs: []
  type: TYPE_NORMAL
- en: While installing Visual Studio, **Visual Studio Tools for Unity** will also
    be installed. It is a free extension that provides support for writing and debugging
    C# in Unity.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you do not install Visual Studio through the Unity Hub, please make sure
    you installed this extension. You can check it in the **Visual Studio Installer**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.53_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.53 – Installing Visual Studio Tools for Unity
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing the Unity Editor and Visual Studio Community 2019, you can
    check the **External Script Editor** settings in the **Preferences** window of
    the Unity Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.54_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.54 – The External Script Editor settings
  prefs: []
  type: TYPE_NORMAL
- en: In addition, you can also select other script editors by modifying this setting,
    such as **Visual Studio Code** and **JetBrains Rider**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can create a new C# script file named `NewBehaviourScript` in the
    Unity Editor and double-click to open it in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.55_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.55 – IntelliSense for the Unity APIs
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding screenshot, there are two built-in methods
    in the script file by default, namely `Start` and `Update`. Visual Studio supports
    **IntelliSense** for Unity APIs, so we can write code quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.56_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.56 – Debugging your code
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also very easy to debug your code in Visual Studio. In the preceding
    screenshot, I set a breakpoint inside the `Start` method and clicked the **Attach
    to Unity** button in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.57_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.57 – Clicking the Attach to Unity button
  prefs: []
  type: TYPE_NORMAL
- en: In order to run this code, I attach this script to a GameObject in the Scene
    and click on the **Play** button in the Unity Editor to run the game in the **Game**
    view.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_1.58_B17146.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.58 – The debugger stopping at the breakpoint
  prefs: []
  type: TYPE_NORMAL
- en: Then, the debugger will stop at the breakpoint, and you can look at the current
    state of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we started by choosing the Unity release and subscription plan
    that suits your needs. Then, you learned how to install and manage the Unity Editor
    by using the Unity Hub and explored the five important areas of the Unity Editor
    – the Toolbar, the **Hierarchy** window, the **Scene** view and the **Game** view,
    the **Inspector** window, and the **Project** window. You were then introduced
    to the Unity Editor toolbars and the windows provided by Unity. We also discussed
    what a game engine is and explored the different features provided by Unity for
    developers to develop games. We then introduced the .NET profiles in Unity and
    the scripting backends offered by Unity; you should now know the difference between
    the Mono scripting backend and the IL2CPP scripting backend. Finally, we demonstrated
    how to set up Visual Studio for Unity Editor to write code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start with a detailed introduction to the basic
    concepts of scripting in Unity, such as GameObjects, components, and some special,
    important components such as **Transform**. We will also introduce you to the
    life cycle of a script instance. Then, we will discuss how to create objects from
    scripts and how to access GameObjects or components through C# code. Some best
    practices for scripting in Unity will also be introduced. Finally, we will introduce
    **packages** and the **Package Manager** in Unity.
  prefs: []
  type: TYPE_NORMAL
