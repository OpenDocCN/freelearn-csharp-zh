["```cs\nusing (var context = new MyDbContext())\n{\n    using (var transaction = context.Database.BeginTransaction())\n    {\n        try\n        {\n            context.Entities.Add(new Entity { Name = \"Entity1\" });\n            context.SaveChanges();\n            context.Entities.Add(new Entity { Name = «Entity2» });\n            context.SaveChanges();\n            transaction.Commit();\n        }\n        catch (Exception)\n        {\n            transaction.Rollback();\n        }\n    }\n}\n```", "```cs\npublic async Task InvokeAsync(HttpContext context, RequestDelegate next)\n{\n    // Do work that can't be done by the next middleware\n    await next(context); // Call the next middleware in the pipeline\n    // Do other work that can happen after the next middleware\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app)\n{\n    app.UseMiddleware<YourMiddlewareClass>();\n    // Other middleware\n}\n```", "```cs\napp.Use(async (context, next) =>\n{\n    // Custom middleware logic before calling the next middleware\n    await next();\n    // Custom middleware logic after calling the next middleware\n});\n```", "```cs\napp.UseMiddleware<YourMiddlewareClass>();\n```"]