- en: '*Chapter 10*: Setting Up Our Database Project'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 10 章*：设置我们的数据库项目'
- en: In this and the following two chapters, we will be improving the performance
    of your database-based applications. In this chapter, we will be setting up our
    relational database and the code to access that database. In the next chapter,
    we will write benchmarks to test the performance of the different frameworks,
    which consist of Entity Framework, Dapper, and ADO.NET. Finally, in [*Chapter
    12*](B16617_12_Final_SB_Epub.xhtml#_idTextAnchor215), *Responsive User Interfaces*,
    we will learn how to improve the performance of SQL Server and Cosmos DB.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和接下来的两章中，我们将提高基于数据库的应用程序的性能。在本章中，我们将设置我们的关系数据库和访问该数据库的代码。在下一章中，我们将编写基准测试来测试不同框架的性能，这些框架包括
    Entity Framework、Dapper 和 ADO.NET。最后，在[*第 12 章*](B16617_12_Final_SB_Epub.xhtml#_idTextAnchor215)
    *响应式用户界面*中，我们将学习如何提高 SQL Server 和 Cosmos DB 的性能。
- en: Data is extensively used in all aspects of our daily lives. In today's world
    of big data, the volume of data being collected and stored for all kinds of analysis
    is phenomenal. When working with data, performance can slow down exponentially
    as the size of your data grows. And depending on how much data you have to process,
    time is often critical.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据在我们的日常生活中被广泛使用。在当今大数据的世界中，收集和存储用于各种分析的数据量是巨大的。当处理数据时，随着数据量的增长，性能会呈指数级下降。而且，根据你需要处理的数据量，时间往往是关键因素。
- en: In this chapter, we will create a database and populate it, and we will write
    the code to access the database and perform insert, update, select, and delete
    operations. Our database access code will consist of Entity Framework, Dapper.NET,
    and ADO.NET.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中，我们将创建一个数据库并填充它，并编写代码以访问数据库并执行插入、更新、选择和删除操作。我们的数据库访问代码将包括 Entity Framework、Dapper.NET
    和 ADO.NET。
- en: Note
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: No code performance improvements will be discussed in this chapter. We are only
    concerned with setting up our database and source code in preparation for the
    benchmarking that we will be doing in the next chapter.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将不讨论代码性能改进。我们只关注为下一章将要进行的基准测试设置数据库和源代码。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating and populating a SQL Server database
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建和填充 SQL Server 数据库
- en: Writing code to access the database using Entity Framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写使用 Entity Framework 访问数据库的代码
- en: Writing code to access the database using Dapper.NET
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写使用 Dapper.NET 访问数据库的代码
- en: Writing code to access the database using ADO.NET
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写使用 ADO.NET 访问数据库的代码
- en: 'After completing this chapter, you will be able to do the following:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 完成本章后，你将能够做到以下：
- en: Log on to SQL Server Management Studio and execute database creation and seeding
    scripts
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录 SQL Server Management Studio 并执行数据库创建和初始化脚本
- en: Store secrets in `secrets.json` when developing so that secrets don't get stored
    in version control
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发时将秘密存储在 `secrets.json` 中，以确保秘密不会存储在版本控制中
- en: Access SQL Server databases and perform **Create/Insert, Read/Select, Update,
    and Delete** (**CRUD**) operations using Entity Framework
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Entity Framework 访问 SQL Server 数据库并执行 **创建/插入、读取/选择、更新和删除** （**CRUD**）操作
- en: Access SQL Server databases and perform CRUD operations using Dapper.NET
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Dapper.NET 访问 SQL Server 数据库并执行 CRUD 操作
- en: Access SQL Server databases and perform CRUD operations using ADO.NET
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 ADO.NET 访问 SQL Server 数据库并执行 CRUD 操作
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with this chapter, you will need to ensure that you have the
    following:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你需要确保以下条件：
- en: SQL Server 2019 Express Edition or higher
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server 2019 Express Edition 或更高版本
- en: SQL Server Management Studio
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server Management Studio
- en: Visual Studio 2022
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022
- en: 'This book''s source code: [https://github.com/PacktPublishing/High-Performance-Programming-in-CSharp-and-.NET/tree/master/CH10](https://github.com/PacktPublishing/High-Performance-Programming-in-CSharp-and-.NET/tree/master/CH10)'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书源代码：[https://github.com/PacktPublishing/High-Performance-Programming-in-CSharp-and-.NET/tree/master/CH10](https://github.com/PacktPublishing/High-Performance-Programming-in-CSharp-and-.NET/tree/master/CH10)
- en: Setting up our database
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的数据库
- en: 'In this section, we will set up our database and get our project ready for
    benchmarking. We will be benchmarking different methods of inserting, updating,
    selecting, and deleting data. Let''s start with setting up our database:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置我们的数据库并使我们的项目准备好进行基准测试。我们将基准测试不同的插入、更新、选择和删除数据的方法。让我们从设置数据库开始：
- en: Visit [https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs](https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs](https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs)。
- en: Download the `instnwnd.sql` file.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `instnwnd.sql` 文件。
- en: Once the file has been downloaded, open it in SQL Server Management Studio.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦文件下载完成，在 SQL Server Management Studio 中打开它。
- en: Execute the file. This will install the database.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行文件。这将安装数据库。
- en: 'Open a new query window and enter the following SQL code:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个新的查询窗口，并输入以下 SQL 代码：
- en: '[PRE0]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Once the code has been entered, execute the script. This code generates the
    `InsertProduct` stored procedure. This stored procedure inserts a product into
    the `Products` table of the `Northwind` database.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦输入代码，执行脚本。此代码生成 `InsertProduct` 存储过程。此存储过程将产品插入到 `Northwind` 数据库的 `Products`
    表中。
- en: 'Replace the existing SQL with the following SQL:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 SQL 替换为以下 SQL：
- en: '[PRE1]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Execute the SQL to generate the `GetProductName` stored procedure. A product
    name can have different variations. This stored procedure gets the top 1 name
    for the given product.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 生成 `GetProductName` 存储过程。产品名称可能有不同的变体。此存储过程获取给定产品的顶级 1 个名称。
- en: 'Replace the existing SQL code with the following SQL:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 SQL 代码替换为以下 SQL：
- en: '[PRE2]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Execute the SQL to generate the `FilterProducts` stored procedure. The stored
    procedure returns all the products whose names contain the search term.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 SQL 生成 `FilterProducts` 存储过程。该存储过程返回所有名称包含搜索词的产品。
- en: 'Now, replace the existing SQL with this SQL:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将现有的 SQL 替换为以下 SQL：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Execute this SQL to generate the `UpdateProductName` stored procedure. This
    procedure updates a product name from its current name to a new name.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此 SQL 生成 `UpdateProductName` 存储过程。此过程将产品名称从当前名称更新为新名称。
- en: 'Replace the existing SQL with the following:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的 SQL 替换为以下内容：
- en: '[PRE4]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Execute this code to generate the `DeleteProduct` stored procedure. This deletes
    products from the database that match the given product name.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此代码以生成 `DeleteProduct` 存储过程。此过程从数据库中删除与给定产品名称匹配的产品。
- en: Once the database has been installed and all the procedures have been written
    and executed, you can close SQL Server Management Studio.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦数据库安装完成，所有存储过程都已编写并执行，您可以关闭 SQL Server Management Studio。
- en: Now that we have set up our database, we will set up our database access project.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了数据库，我们将设置数据库访问项目。
- en: Setting up our database access project
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的数据库访问项目
- en: 'In this section, we will be creating our database access project and classes.
    In the next chapter, we will be writing some benchmarks that reference the classes
    that we will write in this chapter. Create the project as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建我们的数据库访问项目和类。在下一章中，我们将编写一些基准测试，这些基准测试将引用我们在本章中编写的类。按照以下方式创建项目：
- en: Open Visual Studio and create a new .NET 6.0 console application called `CH10_DataAccessBenchmarks`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并创建一个名为 `CH10_DataAccessBenchmarks` 的 .NET 6.0 控制台应用程序。
- en: Add the latest version of the `Microsoft.EntityFrameworkCore.SqlServer` NuGet
    package.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `Microsoft.EntityFrameworkCore.SqlServer` NuGet 包的最新版本。
- en: Add the latest version of the `Dapper` NuGet package.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `Dapper` NuGet 包的最新版本。
- en: Add the latest version of the `System.Data.SqlClient` NuGet package.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `System.Data.SqlClient` NuGet 包的最新版本。
- en: Add a new folder called `Configuration`, and add two classes called `DatabaseSettings`
    and `SecretsManager`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Configuration` 的新文件夹，并添加两个类名为 `DatabaseSettings` 和 `SecretsManager`。
- en: Add a folder called `Data`, and add three classes called `AdoDotNetData`, `DapperDotNet`,
    and `EntityFrameworkCoreData`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Data` 的文件夹，并添加三个类名为 `AdoDotNetData`、`DapperDotNet` 和 `EntityFrameworkCoreData`。
- en: Add a folder called `Models`, and add three classes called `Product`, `SqlCommandModel`,
    and `SqlCommandParameterModel`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Models` 的文件夹，并添加三个类名为 `Product`、`SqlCommandModel` 和 `SqlCommandParameterModel`。
- en: Add a folder called `Reflection`, and add a class called `Properties`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `Reflection` 的文件夹，并添加一个名为 `Properties` 的类。
- en: On the main root, add a class called `BenchmarkTests`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主根目录下添加一个名为 `BenchmarkTests` 的类。
- en: Save the project.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存项目。
- en: With that, we have created and updated our database with the stored procedures
    we will be calling, and we have also put in place the project, folders, and class
    files that we will be using to benchmark the various types of data operations
    we normally perform on a database from code. Let's start by writing the `Properties`
    class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经创建并更新了我们的数据库，其中包含了我们将要调用的存储过程，我们还建立了项目、文件夹和类文件，我们将使用这些文件来基准测试我们在数据库上从代码中通常执行的各种数据操作。让我们先从编写`Properties`类开始。
- en: Writing the Properties class
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写`Properties`类
- en: 'As part of our benchmarking, we need to obtain the `FieldCount` value of a
    `DbDataRecord`. But the property is not readily accessible without using reflection.
    Therefore, to make our lives easier, we will write a class called `Properties`
    that helps us get the values of properties using reflection easily. Follow these
    steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 作为基准测试的一部分，我们需要获取`DbDataRecord`的`FieldCount`值。但是，没有使用反射，该属性无法直接访问。因此，为了使我们的工作更简单，我们将编写一个名为`Properties`的类，帮助我们通过反射轻松获取属性的值。按照以下步骤操作：
- en: 'Open the `Properties` class and add the following `using` statements:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Properties`类并添加以下`using`语句：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: We need both these namespaces to be imported as we are using reflection and
    need access to the `DbDataRecord` class.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要导入这两个命名空间，因为我们使用反射并需要访问`DbDataRecord`类。
- en: 'Add the `GetProperty` method:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`GetProperty`方法：
- en: '[PRE6]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This method takes a generic type and a property name. Then, it obtains the property
    and returns it as a `PropertyInfo` instance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个泛型类型和一个属性名称。然后，它获取该属性并将其作为`PropertyInfo`实例返回。
- en: 'Now, add the `GetValue` method:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加`GetValue`方法：
- en: '[PRE7]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This method takes a generic object type, return type, and property name. Then,
    it calls the `GetProperty` method by passing in the generic object type and property
    name. The `GetValue` method is then called, passing in the source object. The
    result is cast to the generic return type and returned to the caller.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个泛型对象类型、返回类型和属性名称。然后，它通过传递泛型对象类型和属性名称调用`GetProperty`方法。然后调用`GetValue`方法，传递源对象。结果被转换为泛型返回类型并返回给调用者。
- en: 'Add the `GetFieldCount` method:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`GetFieldCount`方法：
- en: '[PRE8]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This method accepts a `DbDataRecord` object. It calls our `GetValue` method
    by passing in the return type, our `DbDataRecord`, and our `FieldCount` property
    name. An integer is returned that contains the number of fields that our `DbDataRecord`
    object has.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个`DbDataRecord`对象。它通过传递返回类型、我们的`DbDataRecord`和我们的`FieldCount`属性名称调用我们的`GetValue`方法。返回一个整数，包含我们的`DbDataRecord`对象具有的字段数。
- en: With that, we have created our `Properties` class. As part of our benchmarking,
    we will be inserting, reading, editing, and deleting data from a SQL Server database.
    And so, in the next section, we will update our `DatabaseSettings` class.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经创建了我们的`Properties`类。作为基准测试的一部分，我们将从SQL Server数据库中插入、读取、编辑和删除数据。因此，在下一节中，我们将更新我们的`DatabaseSettings`类。
- en: Writing the DatabaseSettings class
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写`DatabaseSettings`类
- en: 'Our `DatabaseSettings` class is really simple: it contains a single property.
    Open the database and add the following property:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`DatabaseSettings`类非常简单：它包含一个单一属性。打开数据库并添加以下属性：
- en: '[PRE9]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This property holds our connection string for the SQL Server database. We will
    be setting this property in each of our benchmark methods. Then, it will be passed
    to the constructors of our data access classes.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性持有我们的SQL Server数据库的连接字符串。我们将在每个基准测试方法中设置此属性。然后，它将被传递到我们的数据访问类的构造函数中。
- en: Because database connection strings are a sensitive form of data that should
    be kept very private, we will be storing our database connection strings in a
    `secrets.json` file during the development process. But in production, we will
    obtain the connection string from an `appsettings.json` file. And so, in the next
    section, we will be writing a `SecretsManager` class.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于数据库连接字符串是一种敏感的数据形式，应该非常私密地保存，我们在开发过程中将数据库连接字符串存储在`secrets.json`文件中。但在生产中，我们将从`appsettings.json`文件中获取连接字符串。因此，在下一节中，我们将编写一个`SecretsManager`类。
- en: Writing the SecretsManager
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写`SecretsManager`
- en: In this section, we are going to update our `SecretsManager` class so that we
    can safely obtain secrets.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更新我们的`SecretsManager`类，以便我们可以安全地获取秘密。
- en: Note
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Our development environment will use a `secrets.json` file. This is very serious
    as private credentials have been found and accessed on source code hosting sites
    such as GitHub before now, and we don't want to be the ones responsible for checking
    in code that contains secrets that should be kept private.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的开发环境将使用`secrets.json`文件。这非常重要，因为之前已经在源代码托管网站上发现了并访问了私有凭证，我们不希望成为检查包含应保持私密的密钥的代码的责任人。
- en: 'Follow these steps:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Add the following NuGet packages:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下NuGet包：
- en: '[PRE10]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need these packages so that we can configure the project for user secrets
    and `appsettings.json`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要这些包，以便我们可以为用户密钥和`appsettings.json`配置项目。
- en: 'Open the `SecretsManager` class and add the following `using` statements:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`SecretsManager`类，并添加以下`using`语句：
- en: '[PRE11]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We need these `using` statements for our property, filesystem, and environment
    variable access, and for access to the Microsoft `IConfiguration` interface.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要这些`using`语句来访问我们的属性、文件系统、环境变量以及访问Microsoft的`IConfiguration`接口。
- en: 'Add the `Configuration` property:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`Configuration`属性：
- en: '[PRE12]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This property will hold the correct configuration object, which depends on whether
    we are in development or production mode.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性将保存正确的配置对象，这取决于我们是在开发模式还是生产模式。
- en: 'Now, add the `GetSecrets` method:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加`GetSecrets`方法：
- en: '[PRE13]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This method determines whether we are in development or non-development mode.
    If we are in development mode, then we use the secrets configuration mode. Otherwise,
    we obtain secrets from the `appsettings.json` file. The method accepts a section
    name, which is the name of the secret we want to retrieve, and it returns the
    value of that secret.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法确定我们是在开发模式还是非开发模式。如果我们处于开发模式，则使用密钥配置模式。否则，我们从`appsettings.json`文件中获取密钥。该方法接受一个部分名称，这是我们想要检索的密钥的名称，并返回该密钥的值。
- en: With that, we have finished writing our `secrets` class. For our data manipulation
    benchmarks, we will be focusing on a single table – the `Products` table of the
    `Northwind` database. We will need a class that will act as a model for the data.
    So, in the next section, we'll write the `Product` class.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们已经完成了`secrets`类的编写。对于我们的数据操作基准，我们将专注于单个表——`Northwind`数据库的`Products`表。我们需要一个充当数据模型的类。因此，在下一节中，我们将编写`Product`类。
- en: Writing the Product class
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写Product类
- en: 'In this section, we will update our `Product` class. It is a simple object
    that is used for data manipulation benchmarks and contains properties that match
    the `Products` table in the `Northwind` database. Follow these steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更新我们的`Product`类。它是一个用于数据操作基准的简单对象，包含与`Northwind`数据库中`Products`表相对应的属性。按照以下步骤操作：
- en: 'Open the `Product` class and update it as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Product`类，并按以下方式更新它：
- en: '[PRE14]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we annotated our class with the `Table` annotation, passing the name of
    the table in the `Northwind` database that this class maps to into the annotation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`Table`注解注解了我们的类，将此类映射到`Northwind`数据库中表的名称传递给注解。
- en: 'Add the following properties and annotations:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下属性和注解：
- en: '[PRE15]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These properties match the columns of the `Product` table in the `Northwind`
    database. The `[Key]` annotation identifies the `ProductID` property as the table's
    primary key. Two foreign keys are identified by the `[ForeignKey]` annotation.
    We pass the name of the table into this annotation, which contains the primary
    key.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性与`Northwind`数据库中`Product`表的列相对应。`[Key]`注解将`ProductID`属性标识为表的主键。两个外键通过`[ForeignKey]`注解进行标识。我们将表名传递给此注解，其中包含主键。
- en: "And that's it – we've finished writing our `Product` class. We will be using\
    \ several commands \Land parameters when accessing data. To make life easy, we\
    \ will have a `SqlCommandModel`class for defining our commands, and a `SqlCommandParameterModel`\
    \ class for defining our command parameters. Let's begin by writing the `SqlCommandModel`\
    \ class."
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样——我们已经完成了`Product`类的编写。在访问数据时，我们将使用多个命令和参数。为了简化操作，我们将有一个`SqlCommandModel`类来定义我们的命令，以及一个`SqlCommandParameterModel`类来定义我们的命令参数。让我们先编写`SqlCommandModel`类。
- en: Writing the SqlCommandModel class
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写SqlCommandModel类
- en: 'In this section, we write a simple class that models a SQL command. Follow
    these steps:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写一个简单的类来模拟SQL命令。按照以下步骤操作：
- en: Open the `SqlCommandModel` class, define the class as public, and add the `System.Data`
    namespace.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`SqlCommandModel`类，将其定义为公共类，并添加`System.Data`命名空间。
- en: 'Now, add the following three properties:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下三个属性：
- en: '[PRE16]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `CommandText` property holds our SQL command. This may be the name of a
    stored procedure or a SQL statement. The `CommandType` property determines whether
    the command is a `Text` command or a `StoredProcedure` command, while the `CommandParameters`
    property contains an array of SQL command parameters.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`CommandText` 属性包含我们的 SQL 命令。这可能是一个存储过程的名称或 SQL 语句。`CommandType` 属性确定命令是 `Text`
    命令还是 `StoredProcedure` 命令，而 `CommandParameters` 属性包含 SQL 命令参数的数组。'
- en: Now that we have written `SqlCommandModel`, let's write the `SqlCommandParameterModel`
    class.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了 `SqlCommandModel`，接下来让我们编写 `SqlCommandParameterModel` 类。
- en: Writing the SqlCommandParameterModel class
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 SqlCommandParameterModel 类
- en: In this section, we'll write our `SqlCommandParameterModel` class. This class
    is simply a SQL parameter definition model.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写我们的 `SqlCommandParameterModel` 类。这个类仅仅是一个 SQL 参数定义模型。
- en: Open the `SqlCommandParameterModel` class, make the class public, and add the
    `System.Data` namespace.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `SqlCommandParameterModel` 类，将其设置为公共类，并添加 `System.Data` 命名空间。
- en: 'Now, add the following three parameters:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加以下三个参数：
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This class models a standard parameter that consists of the name of the parameter,
    its database type, and its value.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 此类模拟了一个标准参数，包括参数的名称、其数据库类型和其值。
- en: With that, we have created the core functionality that we need in place for
    our data access classes. In the following sections, we will be writing data access
    classes to access data using Entity Framework, Dapper, and ADO.NET.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样，我们已经创建了数据访问类中所需的核心功能。在接下来的章节中，我们将编写数据访问类，以使用 Entity Framework、Dapper 和
    ADO.NET 访问数据。
- en: The reason behind choosing SQL Server for the database server is that it is
    one of the most common database servers and is used in many business scenarios
    the world over. In professional environments where SQL Server is employed, the
    three most common data access methods are Entity Framework, Dapper, and ADO.NET.
    That is why we will be benchmarking them in this chapter. Let's start by writing
    our ADO.NET data access class.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 SQL Server 作为数据库服务器的原因是它是最常见的数据库服务器之一，并且在全球许多商业场景中被使用。在采用 SQL Server 的专业环境中，最常用的三种数据访问方法是
    Entity Framework、Dapper 和 ADO.NET。这就是为什么我们将在本章中对其进行基准测试。让我们先编写我们的 ADO.NET 数据访问类。
- en: Writing the AdoDotNet class
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 AdoDotNet 类
- en: 'In this section, we will be writing our data insertion methods. However, we
    will not be running our benchmarks, which will be performed in the next chapter
    as we analyze our results. Follow these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写我们的数据插入方法。但是，我们不会运行基准测试，这些基准测试将在下一章中进行分析时进行。请按照以下步骤操作：
- en: 'Update the `AdoDotNetData` class, as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `AdoDotNetData` 类，如下所示：
- en: '[PRE20]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we implemented the `IDisposable` pattern. When we have
    finished with our class, we dispose of our class, which also disposes of disposable
    objects that it holds in memory.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们实现了 `IDisposable` 模式。当我们完成我们的类时，我们销毁我们的类，这也销毁了它所持有的内存中的可处置对象。
- en: 'Add the `ExecuteNonQuery` method:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `ExecuteNonQuery` 方法：
- en: '[PRE21]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This method takes a `SqlCommandModel` object. A new instance of the `SqlCommand`
    object is created. We pass the SQL command and SQL connection into the constructor
    during instantiation. Then, we loop through the command parameters, instantiating
    and adding a `SqlParameter` for each `model.CommandParameter` to the `sqlCommand`
    object. Next, we open a connection to the database, execute the query, and close
    the connection.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个 `SqlCommandModel` 对象。在实例化过程中创建了一个新的 `SqlCommand` 对象实例。我们将 SQL 命令和 SQL
    连接传递给构造函数。然后，我们遍历命令参数，为每个 `model.CommandParameter` 实例化并添加一个 `SqlParameter` 到 `sqlCommand`
    对象中。接下来，我们打开数据库连接，执行查询，并关闭连接。
- en: 'Add the following code:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE22]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code executes the non-query SQL code that's been passed in via
    the `sql` string.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码执行通过 `sql` 字符串传入的非查询 SQL 代码。
- en: 'Add the following generic scalar method:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下通用标量方法：
- en: '[PRE23]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This method takes a SQL command as a string. A connection to the database is
    opened, and a new `SqlCommand` is instantiated. The `ExecuteScalar` command is
    executed, which returns a single value from the database. Before the value is
    returned, it is cast to the generic type specified by the caller and returned
    as that type. The connection is then closed.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个 SQL 命令作为字符串。打开数据库连接，并实例化一个新的 `SqlCommand`。执行 `ExecuteScalar` 命令，从数据库返回单个值。在返回值之前，将其转换为调用者指定的泛型类型，并以该类型返回。然后关闭连接。
- en: 'Add the following scalar method:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下标量方法：
- en: '[PRE24]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This method takes a `SqlCommandModel` and uses it to build up a `SqlCommand`.
    The `SqlCommand` class is executed by calling the `ExecuteScalar` method and is
    cast to the generic type before being returned.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接收一个 `SqlCommandModel` 并使用它来构建一个 `SqlCommand`。通过调用 `ExecuteScalar` 方法执行 `SqlCommand`
    类，并在返回之前将其转换为泛型类型。
- en: 'Add the following reader method:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下读取方法：
- en: '[PRE25]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This method takes a SQL statement and executes it by calling the `ExecuteReader`
    method. Once the method has been executed, we obtain the reader's enumerator.
    Then, we iterate through the enumerator and build up an object for the current
    iteration and yield the result.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接收一个 SQL 语句并通过调用 `ExecuteReader` 方法来执行它。一旦方法执行完毕，我们就获得读者的枚举器。然后，我们遍历枚举器并构建当前迭代的对象，并产生结果。
- en: 'Add the following reader method:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下读取方法：
- en: '[PRE26]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This reader method takes a `SqlCommandModel` and builds up a `SqlCommand`. It
    executes the reader and obtains `SqlDataReader`. It iterates through the reader
    and builds up an instance of the generic type that is then yielded to the user.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此读取方法接收一个 `SqlCommandModel` 并构建一个 `SqlCommand`。它执行读取操作并获取 `SqlDataReader`。它遍历读取器并构建一个泛型类型的实例，然后将其传递给用户。
- en: That's our ADO.NET data access class completed. Now, let's learn how to write
    the Entity Framework data access class.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们的 ADO.NET 数据访问类就完成了。现在，让我们学习如何编写 Entity Framework 数据访问类。
- en: Writing the EntityFrameworkCoreData class
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 EntityFrameworkCoreData 类
- en: 'In this section, we will be writing the methods for our Entity Framework data
    access class. The code we will write in this section will be executed in the next
    chapter. Follow these steps:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写我们的 Entity Framework 数据访问类的相关方法。在本节中编写的代码将在下一章中执行。请按照以下步骤操作：
- en: 'Open the `EntityFrameworkCoreData` class and edit it as follows:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `EntityFrameworkCoreData` 类并按以下方式编辑它：
- en: '[PRE27]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Our class inherits from the `DbContext` class of the `Microsoft.EntityFrameworkCore`
    library. We declare a variable to hold our database connection string, and a variable
    to hold a collection of `Products`. In our constructor, we set the connection
    string and call the base constructor.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的类继承自 `Microsoft.EntityFrameworkCore` 库中的 `DbContext` 类。我们声明一个变量来保存我们的数据库连接字符串，以及一个变量来保存
    `Products` 集合。在我们的构造函数中，我们设置连接字符串并调用基类构造函数。
- en: 'Add the `OnConfiguring` method:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `OnConfiguring` 方法：
- en: '[PRE28]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This method determines that we will be using SQL Server and passes in the SQL
    Server connection string that we will be using.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法确定我们将使用 SQL Server，并传递我们将使用的 SQL Server 连接字符串。
- en: 'Add the following method, which executes raw SQL:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，它执行原始 SQL：
- en: '[PRE29]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This method takes a SQL statement and executes it against the database as raw
    SQL. The returned value is the number of records affected by the execution of
    the statement.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接收一个 SQL 语句并将其作为原始 SQL 在数据库中执行。返回值是受该语句执行影响的记录数。
- en: 'Add the following method for executing a stored procedure as a non-query:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以执行存储过程作为非查询：
- en: '[PRE30]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: In this method, we build up a `SqlParameter` array from our `SqlCommandModel`.
    Then, we execute raw SQL by passing in each of the parameters to the stored procedure.
    This execution is a non-query and returns the number of rows affected by running
    the procedure.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，我们从 `SqlCommandModel` 构建一个 `SqlParameter` 数组。然后，通过将每个参数传递给存储过程来执行原始 SQL。此执行是非查询操作，并返回运行该过程影响的行数。
- en: 'The following method will execute and return a scalar value of the `string`
    type:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下方法将执行并返回一个 `string` 类型的标量值：
- en: '[PRE31]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This method executes a stored procedure with a single parameter. We obtain the
    enumerable return object and filter it to get the first record. The name of the
    product is then returned as a string.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法执行一个带有单个参数的存储过程。我们获取可枚举的返回对象并过滤它以获取第一条记录。然后返回产品名称作为字符串。
- en: 'Add the final method to our class, which returns an enumerator:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向我们的类中添加最终的方法，该方法返回一个枚举器：
- en: '[PRE32]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This executes a stored procedure with a single parameter and returns an enumerator
    full of filtered products.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作执行一个带有单个参数的存储过程，并返回一个充满过滤产品的枚举器。
- en: With that, we have written all our Entity Framework classes. Now, it's time
    to write our Dapper.NET methods.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经编写了所有的 Entity Framework 类。现在，是时候编写我们的 Dapper.NET 方法了。
- en: Writing the DapperDotNet class
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 DapperDotNet 类
- en: 'In this section, we''ll write our Dapper.NET methods. This is the last section
    before we write our benchmarking methods. We will run the code we write in this
    section in the next chapter. Follow these steps:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写我们的 Dapper.NET 方法。这是在编写基准测试方法之前的最后一节。我们将运行本节中编写的代码。请按照以下步骤操作：
- en: 'Open the `DapperDotNet` class, add the `SimpleCRUD` package, and modify it
    as follows:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `DapperDotNet` 类，添加 `SimpleCRUD` 包，并按如下方式修改：
- en: '[PRE33]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We implement the `IDisposable` pattern in this class and set the SQL dialect
    to the SQL Server.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这个类中实现了 `IDisposable` 模式，并将 SQL 方言设置为 SQL Server。
- en: 'Add the following non-query method:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下非查询方法：
- en: '[PRE34]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: This method executes raw SQL and returns the number of records affected by the
    SQL statement.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法执行原始 SQL 并返回受 SQL 语句影响的记录数。
- en: 'Add the following method to execute a non-query:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法以执行非查询操作：
- en: '[PRE35]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This method takes a `SqlCommandModel` instance and builds up a `DynamicParameter`
    bag. Then, it executes a stored procedure defined by the model's `CommandText`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个 `SqlCommandModel` 实例，并构建一个 `DynamicParameter` 包。然后，它执行由模型 `CommandText`
    定义的存储过程。
- en: 'Add the following generic scalar method:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下泛型标量方法：
- en: '[PRE36]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This method takes a SQL statement and executes it, returning a single value
    of the required type.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个 SQL 语句并执行它，返回所需类型的单个值。
- en: 'Add the following method, which executes a stored procedure and returns a string:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，该方法执行存储过程并返回字符串：
- en: '[PRE37]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This method takes a `SqlCommandModel` instance and uses it to execute a stored
    procedure. Remember to add the missing `using` statements for `SqlCommandModel`
    to the class. The stored procedure execution returns a type of `IEnumerable<Product>`.
    So, we obtain the first product in the list and return its `ProductName`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个 `SqlCommandModel` 实例，并使用它来执行存储过程。请记住将缺少的 `using` 语句 `SqlCommandModel`
    添加到类中。存储过程执行返回 `IEnumerable<Product>` 类型的数据。因此，我们获取列表中的第一个产品并返回其 `ProductName`。
- en: 'Add the following method, which executes raw SQL and returns a type of `IEnumerator<T>`:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，该方法执行原始 SQL 并返回 `IEnumerator<T>` 类型的数据：
- en: '[PRE38]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This method executes a raw SQL string and returns a type of `IEnumerable<T>`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法执行原始 SQL 字符串并返回 `IEnumerable<T>` 类型的数据。
- en: 'Add the following method, which executes a stored procedure and returns a type
    of `IEnumerator<Product>`:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下方法，该方法执行存储过程并返回 `IEnumerator<Product>` 类型的数据：
- en: '[PRE39]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This method takes a `SqlCommandModel` instance and builds up a parameterized
    stored procedure that is executed. A type of `IEnumerator<Product>` is returned.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个 `SqlCommandModel` 实例，并构建一个要执行的参数化存储过程。返回 `IEnumerator<Product>` 类型的数据。
- en: 'Add our final dapper method, which will obtain the first product name that
    matches the `productName` parameter:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加我们的最终 dapper 方法，该方法将获取与 `productName` 参数匹配的第一个产品名称：
- en: '[PRE40]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This method takes a product name and executes the `GetProductName` stored procedure.
    The stored procedure matches all the products in the database whose product names
    are like the product name argument. Then, it gets the first product in the returned
    list and returns its product name.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个产品名称并执行 `GetProductName` 存储过程。存储过程匹配所有数据库中产品名称与产品名称参数相似的产品。然后，它获取返回列表中的第一个产品并返回其产品名称。
- en: That concludes our database and data access project setup in preparation for
    the benchmarking work we will be doing in the next chapter. Let's review what
    we have accomplished in this chapter.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们为下一章将要进行的基准测试工作所做的数据库和数据访问项目设置。让我们回顾一下本章我们取得了哪些成果。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we downloaded the `Products` table.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们下载了 `Products` 表。
- en: After making sure that we have our database in place with the required stored
    procedures, we started a .NET 6.0 console application. We added our model class
    and data access classes for performing data access operations in Entity Framework,
    Dapper, and ADO.NET.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在确保我们已设置好所需的存储过程后，我们启动了一个 .NET 6.0 控制台应用程序。我们添加了我们的模型类和数据访问类，以在 Entity Framework、Dapper
    和 ADO.NET 中执行数据访问操作。
- en: In the next chapter, we will be benchmarking the data access methods for each
    of these frameworks. In the *Further reading* section, you can further your knowledge
    of Entity Framework, Dapper, and ADO.NET using the links provided.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将对每个框架的数据访问方法进行基准测试。在 *进一步阅读* 部分中，您可以通过提供的链接进一步了解 Entity Framework、Dapper
    和 ADO.NET。
- en: Further reading
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涉及的主题，请查看以下资源：
- en: 'Entity Framework Core: [https://docs.microsoft.com/ef/core/](https://docs.microsoft.com/ef/core/'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Entity Framework Core: [https://docs.microsoft.com/ef/core/](https://docs.microsoft.com/ef/core/)'
- en: )
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'Dapper: [https://dapper-tutorial.net/dapper](https://dapper-tutorial.net/dapper'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Dapper: [https://dapper-tutorial.net/dapper](https://dapper-tutorial.net/dapper)'
- en: )
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: 'ADO.NET: [https://dotnettutorials.net/course/ado-net-tutorial-for-beginners-and-professionals/](https://dotnettutorials.net/course/ado-net-tutorial-for-beginners-and-professionals/)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ADO.NET: [https://dotnettutorials.net/course/ado-net-tutorial-for-beginners-and-professionals/](https://dotnettutorials.net/course/ado-net-tutorial-for-beginners-and-professionals/)'
