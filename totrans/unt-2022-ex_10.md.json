["```cs\npublic virtual void Init(Vector2 direction,\n    UnityAction<ProjectileBase> collisionCallback)\n{\n    // If there is a Trail Renderer component on\n    // this GameObject then reset it.\n    if (TryGetComponent<TrailRenderer>(out var tr))\n        tr.Clear();\n    …\n}\n```", "```cs\nusing UnityEngine;\n[CreateAssetMenu(fileName = \"New EnemyConfigData\",\n    menuName =\"ScriptableObjects/EnemyConfigData\")]\npublic class EnemyConfigData : ScriptableObject\n{\n    public float Speed, AttackRange,\n        FireRange, FireCooldown;\n    public bool CanJump;\n    public float JumpForce;\n}\n```", "```cs\nPublic class EnemyController : MonoBehaviour\n{\n    [SerializeField]\n    private EnemyConfigData _config;\n}\n```", "```cs\npublic class EnemyController : MonoBehaviour\n{\n    …\n    public enum State { Idle, Patrol, Attack, Dead }\n    private State _currentState;\n    private void Start() => ChangeState(State.Idle);\n    void Update()\n    {\n        switch (_currentState)\n        {\n            case State.Idle:\n                // UNDONE: Do stuff --> change state?\n                break;\n            case State.Patrol:\n                // UNDONE: Do stuff --> change state?\n                break;\n            // And so on.\n        }\n    }\n    public void ChangeState(State state) =>\n        _currentState = state;\n}\n```", "```cs\npublic class EnemyConfigData : ScriptableObject\n{\n    …\n    [Header(\"Behavior Properties\")]\n    public float TimeIdle = 5f;\n    public float TimePatrol = 15f;\n}\n```", "```cs\nprivate float _timeStateStart;\npublic void ChangeState(State state)\n{\n    _currentState = state;\n    _timeStateStart = Time.time;\n}\n```", "```cs\n…\nvoid Update()\n{\n    switch (_currentState)\n    {\n        case State.Idle:\n            // UNDONE: Do stuff.\n            // Change state?\n            if (Time.time - _timeStateStart\n                >= _config.TimeIdle)\n                    ChangeState(State.Patrol);\n            break;\n        case State.Patrol:\n            // UNDONE: Do stuff.\n            if (Time.time - _timeStateStart\n                >= _config.TimePatrol)\n                    ChangeState(State.Idle);\n            break;\n        …\n```", "```cs\npublic interface IBehaviorPatrolWaypoints\n{\n    Transform WaypointPatrolLeft { get; }\n    Transform WaypointPatrolRight { get; }\n    void Init(Rigidbody2D rb, Vector2 direction,\n        float acceleration, float speedMax);\n    void TickPhysics();\n}\n```", "```cs\n// Implemented behaviors.\nprivate IBehaviorPatrolWaypoints _behaviorPatrol;\nprivate void Awake()\n{\n    …\n    // Get behaviors and initialize.\n    if (TryGetComponent<IBehaviorPatrolWaypoints>(\n        out _behaviorPatrol))\n    {\n        _behaviorPatrol.Init(_rb, _movementDirection,\n            _config.Acceleration, _config.SpeedMax);\n    }\n}\n```", "```cs\nprivate void FixedUpdate()\n{\n    if (_currentState == State.Patrol)\n        _behaviorPatrol?.TickPhysics();\n    else\n        _rb.velocity = Vector2.zero;\n}\n```", "```cs\npublic class PatrolWaypoints\n    : MonoBehaviour, IBehaviorPatrolWaypoints\n{\n     // Do move between waypoints stuff.\n}\n```", "```cs\nprivate GameObject _player;\nprivate void Awake() =>\n    _player = GameObject.FindWithTag(Tags.Player);\nprivate bool IsPlayerInRange(float rangeAttack)\n{\n    var distance =\n        Vector2.Distance(transform.position,\n            _player.transform.position);\n    return distance <= rangeAttack;\n}\n```", "```cs\nvoid Update()\n{\n    switch (_currentState)\n    {\n        case State.Idle:\n            // UNDONE: Do stuff.\n            // Change state?\n            if (IsPlayerInRange(_config.AttackRange))\n                ChangeState(State.Attack);\n            else if (Time.time - _timeStateStart\n                >= _config.TimeIdle)\n                    ChangeState(State.Patrol);\n            break;\n        …\n        case State.Attack:\n            // UNDONE: Do stuff.\n            if (!IsPlayerInRange(_config.AttackRange))\n                ChangeState(State.Patrol);\n            break;\n        …\n```", "```cs\nvoid Update()\n{\n    switch (_currentState)\n    {\n        …\n        case State.Dead:\n            Destroy(gameObject);\n            break;\n    }\n}\n```", "```cs\nvoid Update()\n{\n    switch (_currentState)\n    …\n    // Any state.\n    if (_health <= 0)\n    {\n        ChangeState(State.Dead);\n    }\n}\n```"]