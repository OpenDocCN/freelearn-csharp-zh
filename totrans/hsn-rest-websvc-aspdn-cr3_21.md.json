["```cs\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    [JsonException]\n    [Authorize]\n    public class ItemController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n        private readonly IEndpointInstance _messageEndpoint;\n        private readonly ILogger<ItemController> _logger;\n\n        public ItemController(IItemService itemService, \n        IEndpointInstance messageEndpoint,\n            IDistributedCache distributedCache, \n ILogger<ItemController> logger)\n        {\n            _itemService = itemService;\n            _messageEndpoint = messageEndpoint;\n            _logger = logger;\n        }\n...\n\n```", "```cs\n_logger.LogInformation, _logger.LogWarning, _logger.LogError, _logger.LogCritical\n```", "```cs\npublic static void LogInformation(\n  this ILogger logger,\n  EventId eventId,\n  Exception exception,\n  string message,\n  params object[] args)\n{\n  logger.Log(LogLevel.Information, eventId, exception, message, args);\n}\n```", "```cs\nnamespace Microsoft.Extensions.Logging\n{\n  public enum LogLevel\n  {\n    Debug,\n    Warning,\n    Error,\n    Critical,\n    None,\n  }\n}\n```", "```cs\nnamespace Catalog.API\n{\n    public class LoggingEvents\n    {\n            public const int Get = 1000;\n            public const int GetById = 1001;\n            public const int Create = 1002;\n            public const int Update = 1003;\n            public const int Delete = 1004;\n    }\n}\n```", "```cs\n _logger.LogInformation(LoggingEvents.GetById, \"Getting item\");\n```", "```cs\n _logger.LogInformation(LoggingEvents.GetById, \"GetById {id} \", id);\n```", "```cs\nnamespace Catalog.Domain.Logging\n{\n    public class Events\n    {\n        public const int Get = 1000;\n        public const int GetById = 1001;\n        public const int Add = 1002;\n        public const int Edit = 1003;\n        public const int Delete = 1004;\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Logging\n{\n    public class Messages\n    {\n        public const string NumberOfRecordAffected_modifiedRecords = \n            \"Number of record affected {records}\";\n        public const string ChangesApplied_id = \"Changes applied to the \n            following entity id ({id})\";\n        public const string TargetEntityChanged_id = \"Target entity id \n            ({id})\";\n    }\n}\n```", "```cs\nusing Microsoft.Extensions.Logging; using Catalog.Domain.Logging;\n...\n\nnamespace Catalog.Domain.Services\n{\n    public class ItemService : IItemService\n    {\n        private readonly IItemMapper _itemMapper;\n        private readonly IItemRepository _itemRepository;\n        private readonly ILogger<IItemService> _logger;\n\n        public ItemService(IItemRepository itemRepository, \n        IItemMapper itemMapper, ILogger<IItemService> logger)\n        {\n            _itemRepository = itemRepository;\n            _itemMapper = itemMapper;\n            _logger = logger;\n        }\n\n        ...\n\n        public async Task<ItemResponse> AddItemAsync(AddItemRequest \n            request)\n        {\n            var item = _itemMapper.Map(request);\n            var result = _itemRepository.Add(item);\n\n            var modifiedRecords = await _itemRepository. \n                UnitOfWork.SaveChangesAsync();\n\n            _logger.LogInformation(Events.Add, Messages.\n            NumberOfRecordAffected_modifiedRecords, modifiedRecords);\n _logger.LogInformation(Events.Add, Messages.\n            ChangesApplied_id, result?.Id);\n\n            return _itemMapper.Map(result);\n        }\n\n        ...\n    } \n}\n```", "```cs\npublic class ItemService : IItemService\n{\n    ...\n\n    public async Task<ItemResponse> GetItemAsync(GetItemRequest \n        request)\n    {\n        if (request?.Id == null) throw new ArgumentNullException();\n        var entity = await _itemRepository.GetAsync(request.Id);\n\n        _logger.LogInformation(Events.GetById, \n            Messages.TargetEntityChanged_id, entity?.Id);\n\n        return _itemMapper.Map(entity);\n    }\n```", "```cs\nusing System.Net;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.Extensions.Logging;\nusing Catalog.API.Exceptions;\n\nnamespace Catalog.API.Filters\n{\n    public class JsonExceptionAttribute : TypeFilterAttribute\n    {\n        public JsonExceptionAttribute() : base(typeof(HttpCustomExceptionFilterImpl))\n        {\n        }\n\n        public class HttpCustomExceptionFilterImpl : IExceptionFilter\n        {\n            private readonly IHostingEnvironment _env;\n            private readonly ILogger _logger;\n\n            public HttpCustomExceptionFilterImpl(IHostingEnvironment \n                env,\n                ILogger<HttpCustomExceptionFilterImpl> logger)\n            {\n                _env = env;\n                _logger = logger;\n            }\n\n            public void OnException(ExceptionContext context)\n            {\n                var eventId = new EventId(context.Exception.HResult);\n\n                _logger.LogError(eventId, context.Exception, context.Exception.Message);\n\n                var json = new JsonErrorPayload\n                {\n                    EventId = eventId.Id\n                };\n\n                json.DetailedMessage = context.Exception;\n\n                var exceptionObject = new ObjectResult(json) { \n                    StatusCode = 500 };\n\n                context.Result = exceptionObject;\n                context.HttpContext.Response.StatusCode = (int) \n                HttpStatusCode.InternalServerError;\n            }\n        }\n    }\n}\n```", "```cs\nusing Microsoft.Extensions.Logging.Internal;\nusing System;\n\nnamespace Microsoft.Extensions.Logging\n{\n  /// <summary>ILogger extension methods for common scenarios.</summary>\n  public static class LoggerExtensions\n  {\n        public static void LogInformation(this ILogger logger, \n           Exception exception, string message, params object[] args)\n        {\n              logger.Log(LogLevel.Information, exception, message, \n                   args);\n        }\n}\n```", "```cs\nusing System;\nusing Microsoft.Extensions.Logging;\n\nnamespace Catalog.Fixtures\n{\n    public abstract class LoggerAbstraction<T> : ILogger<T>\n    {\n        public IDisposable BeginScope<TState>(TState state) => throw \n            new NotImplementedException();\n\n        public bool IsEnabled(LogLevel logLevel) => true;\n\n        public void Log<TState>(LogLevel logLevel, EventId eventId, \n            TState state, Exception exception, Func<TState, Exception,\n             string> formatter)\n            => Log(logLevel, exception, formatter(state, exception));\n\n       public abstract void Log(LogLevel logLevel, Exception ex, \n            string information);\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Tests.Services\n{\n    public class ItemServiceTests : IClassFixture<CatalogContextFactory>\n    {\n        private readonly ItemRepository _itemRepository;\n        private readonly IItemMapper _mapper;\n        private readonly Mock<LoggerAbstraction<IItemService>> _logger;\n\n              public ItemServiceTests(CatalogContextFactory \n                catalogContextFactory, ITestOutputHelper outputHelper)\n        {\n            _itemRepository = new ItemRepository\n\n            (catalogContextFactory.ContextInstance);\n            _mapper = catalogContextFactory.ItemMapper;\n            _logger = new Mock<LoggerAbstraction<IItemService>>();\n\n            _logger.Setup(x => x.Log(It.IsAny<LogLevel>(),It.IsAny      \n                <Exception>(), It.IsAny<string>()))\n .Callback((LogLevel logLevel, Exception exception, \n                        string information) => \n outputHelper.WriteLine($\"{logLevel}:\n                            {information}\"));\n        }\n\n        ...\n\n        [Theory]\n        [LoadData(\"item\")]\n        public async Task additem_should_log_information(AddItemRequest \n            request)\n        {\n            var sut = new ItemService(_itemRepository, _mapper, \n                _logger.Object);\n\n            await sut.AddItemAsync(request);\n\n            _logger\n .Verify(x => x.Log(It.IsAny<LogLevel>(), It.IsAny\n                <Exception>(), It.IsAny<string>()), Times.AtMost(2));\n        }\n        ...\n    }\n}\n```", "```cs\n _logger.Setup(x => x.Log(It.IsAny<LogLevel>(),It.IsAny<Exception>(), \n    It.IsAny<string>()))\n        .Callback((LogLevel logLevel, Exception exception, string \n            information) => \n                       outputHelper.WriteLine($\"{logLevel}:\n                          {information}\"));\n```", "```cs\n    _logger\n     .Verify(x => x.Log(It.IsAny<LogLevel>(),It.IsAny<Exception>(), \n        It.IsAny<string>()), Times.AtMost(2));\n```", "```cs\nusing Microsoft.AspNetCore;\nusing Microsoft.AspNetCore.Hosting;\n\nnamespace Catalog.API\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateWebHostBuilder(args).Build().Run();\n        }\n\n        public static IWebHostBuilder CreateWebHostBuilder(string[] \n            args)\n        {\n            return WebHost.CreateDefaultBuilder(args)\n                .UseStartup<Startup>();\n        }\n    }\n}\n\n```", "```cs\n...\n.ConfigureLogging((Action<WebHostBuilderContext, ILoggingBuilder>) ((hostingContext, logging) =>\n{\n  logging.AddConfiguration((IConfiguration) \n  hostingContext.Configuration.GetSection(\"Logging\"));\n  logging.AddConsole();\n  logging.AddDebug();\n  logging.AddEventSourceLogger();\n}))\n```", "```cs\n...\n    public class Program\n    {\n          ...\n        public static IWebHostBuilder CreateWebHostBuilder(string[] \n            args)\n        {\n            return WebHost.CreateDefaultBuilder(args)\n                .ConfigureLogging(builder =>\n {\n builder.[...]\n })\n                .UseStartup<Startup>();\n        }\n    }\n```", "```cs\n\n    public class Startup\n    {\n       ...\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n            services.AddLogging(builder => builder.AddConsole());\n        }\n\n       ...\n    }\n}\n```", "```cs\npublic class ItemController : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        ...\n\n        [Fact]\n        public async Task update_should_returns_not_found\n            _when_item_is_not_present()\n        {\n            var client = _factory.CreateClient();\n\n            var httpContent = new StringContent(jsonPayload.ToString(), \n            Encoding.UTF8, \"application/json\");\n            var response = await client.PutAsync($\"/api/items/\n              {Guid.NewGuid()}\", httpContent);\n\n            response.StatusCode.ShouldBe(HttpStatusCode.NotFound);\n        }\n        ..\n    }\n```", "```cs\n...\nShouldly.ShouldAssertException : response.StatusCode\n should be\nHttpStatusCode.NotFound\n but was\nHttpStatusCode.InternalServerError ...\n```", "```cs\nusing System;\nusing Microsoft.Extensions.Logging;\nusing Xunit.Abstractions;\n\nnamespace Catalog.Fixtures\n{\n    public class TestOutputLogger : ILogger\n    {\n        private readonly ITestOutputHelper _output;\n\n        public TestOutputLogger(ITestOutputHelper output) =>\n            _output = output;\n\n        public IDisposable BeginScope<TState>(TState state) => null;\n\n        public bool IsEnabled(LogLevel logLevel) =>\n             logLevel == LogLevel.Error;\n\n        public void Log<TState>(LogLevel logLevel, EventId eventId, \n             TState state, Exception exception, Func<TState,\n             Exception, string> formatter)\n        {\n            if (!IsEnabled(logLevel))\n                return;\n\n            _output.WriteLine($\"{logLevel.ToString()} - \n                {exception.Message} - {exception.StackTrace}\");\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Concurrent;\nusing Microsoft.Extensions.Logging;\nusing Xunit.Abstractions;\nnamespace Catalog.Fixtures\n{\n    public class TestOutputLoggerProvider : ILoggerProvider\n    {\n        private readonly ConcurrentDictionary<string, TestOutputLogger> \n            _loggers = new ConcurrentDictionary\n            <string, TestOutputLogger>();\n\n        private readonly ITestOutputHelper _testOutputHelper;\n\n        public TestOutputLoggerProvider(ITestOutputHelper \n            testOutputHelper) => _testOutputHelper = testOutputHelper;\n\n        public ILogger CreateLogger(string categoryName) => \n            _loggers.GetOrAdd(categoryName, name =>  new \n            TestOutputLogger(_testOutputHelper));\n\n        public void Dispose() => _loggers.Clear();\n    }\n}\n```", "```cs\nusing Xunit.Abstractions; ...\n\nnamespace Catalog.Fixtures\n{\n    public class InMemoryApplicationFactory<TStartup>\n        : WebApplicationFactory<TStartup> where TStartup : class\n    {\n        private ITestOutputHelper _testOutputHelper;\n public void SetTestOutputHelper(ITestOutputHelper \n            testOutputHelper)\n {\n _testOutputHelper = testOutputHelper;\n }\n        protected override void ConfigureWebHost(IWebHostBuilder \n            builder)\n        {\n            builder\n                .UseEnvironment(\"Testing\")\n                .ConfigureTestServices(services =>\n                {\n                    ...\n                    if (_testOutputHelper != null)\n {\n services.AddLogging(cfg => cfg.AddProvider(new \n                        TestOutputLoggerProvider(_testOutputHelper)));\n }\n                   ...\n                });\n        }\n    }\n}\n```", "```cs\n...\nnamespace Catalog.API.Tests.Controllers\n{\n    public class ItemControllerTests : \n        IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        private readonly InMemoryApplicationFactory<Startup> _factory;   \n        public ItemControllerTests(InMemoryApplicationFactory<Startup> \n        factory, ITestOutputHelper outputHelper)\n {\n _factory = factory;\n _factory.SetTestOutputHelper(outputHelper);\n } ...\n```", "```cs\ndotnet add package AspNetCore.HealthChecks.SqlServer\n```", "```cs\nnamespace Catalog.API\n{\n    public class Startup\n    {\n        ...\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n            services\n .AddHealthChecks()\n .AddSqlServer(Configuration.GetSection\n                (\"DataSource:ConnectionString\").Value);\n            ...\n        }\n\n        public void Configure(IApplicationBuilder app, \n            IWebHostEnvironment env)\n        {\n            if (!env.IsTesting())\n                app.ApplicationServices.GetService<CatalogContext>()\n                .Database.Migrate();\n\n            app.UseAuthentication();\n            app.UseAuthorization();\n            app.UseResponseCaching();\n            app.UseHealthChecks(\"/health\");\n            ...\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.Extensions.Diagnostics.HealthChecks;\nusing Microsoft.Extensions.Options;\nusing StackExchange.Redis;\nusing Catalog.Domain.Settings;\n\nnamespace Catalog.API.HealthChecks\n{\n    public class RedisCacheHealthCheck : IHealthCheck\n    {\n        private readonly CacheSettings _settings;\n\n        public RedisCacheHealthCheck(IOptions<CacheSettings> settings)\n {\n _settings = settings.Value;\n }\n\n        public async Task<HealthCheckResult> \n        CheckHealthAsync(HealthCheckContext context, \n            CancellationToken cancellationToken = default)\n        {\n            try\n            {\n                var redis = ConnectionMultiplexer.Connect\n                (_settings.ConnectionString);\n                var db = redis.GetDatabase();\n\n                var result =  await db.PingAsync();\n                if (result < TimeSpan.FromSeconds(5))\n                {\n                    return await Task.FromResult(\n                        HealthCheckResult.Healthy());\n                }\n\n                return await Task.FromResult(\n                    HealthCheckResult.Unhealthy());\n            }\n            catch (Exception e)\n            {\n                return await Task.FromResult(\n                    HealthCheckResult.Unhealthy(e.Message));\n            }\n        }\n    }\n}\n```", "```cs\n...\n            services\n                .AddHealthChecks()\n                .AddCheck<RedisCacheHealthCheck>(\"cache_health_check\")\n                .AddSqlServer(Configuration.GetSection\n                (\"DataSource:ConnectionString\").Value);\n..\n```"]