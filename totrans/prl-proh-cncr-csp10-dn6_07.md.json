["```cs\n    public async Task<List<string>> GetDataAsync\n        (string filePath)\n    {\n        using var file = File.OpenText(filePath);\n        var data = await file.ReadToEndAsync();\n        return data.Split(new[] { Environment.NewLine },\n            StringSplitOptions.RemoveEmptyEntries)\n                .ToList();\n    }\n    ```", "```cs\n    public async Task<List<string>> GetOnlineDataAsync\n        (string url)\n    {\n        var httpClient = new HttpClient();\n        var data = await httpClient.GetStringAsync(url);\n        return data.Split(new[] { Environment.NewLine },\n            StringSplitOptions.RemoveEmptyEntries)\n                .ToList();\n    }\n    ```", "```cs\n[Serializable]\n```", "```cs\npublic class JournalEntry\n```", "```cs\n{\n```", "```cs\n    public string Title { get; set; }\n```", "```cs\n    public string Description { get; set; }\n```", "```cs\n    public DateTime EntryDate { get; set; }\n```", "```cs\n    public string EntryText { get; set; }\n```", "```cs\n}\n```", "```cs\nprivate List<JournalEntry> DeserializeEntries(List<string> \n```", "```cs\n    journalData)\n```", "```cs\n{\n```", "```cs\n    var deserializedEntries = new List<JournalEntry>();\n```", "```cs\n    var serializer = new XmlSerializer(typeof\n```", "```cs\n        (JournalEntry));\n```", "```cs\n    foreach (var xmlEntry in journalData)\n```", "```cs\n    {\n```", "```cs\n        if (xmlEntry == null) continue;\n```", "```cs\n        using var reader = new StringReader(xmlEntry);\n```", "```cs\n        var entry = (JournalEntry)serializer.Deserialize\n```", "```cs\n            (reader)!;\n```", "```cs\n        if (entry == null) continue;\n```", "```cs\n        deserializedEntries.Add(entry);\n```", "```cs\n    }\n```", "```cs\n    return deserializedEntries;\n```", "```cs\n}\n```", "```cs\npublic async Task<List<JournalEntry>> \n```", "```cs\n    DeserializeJournalDataAsync(List<string> journalData)\n```", "```cs\n{\n```", "```cs\n    return await Task.Run(() => DeserializeEntries\n```", "```cs\n        (journalData));\n```", "```cs\n}\n```", "```cs\npublic List<JournalEntry> DeserialzeJsonEntries\n```", "```cs\n    (List<string> journalData)\n```", "```cs\n{\n```", "```cs\n    var deserializedEntries = new List<JournalEntry>();\n```", "```cs\n    foreach (var jsonEntry in journalData)\n```", "```cs\n    {\n```", "```cs\n        if (string.IsNullOrWhiteSpace(jsonEntry)) continue;\n```", "```cs\n        deserializedEntries.Add(JsonSerializer.Deserialize\n```", "```cs\n            <JournalEntry>(jsonEntry)!);\n```", "```cs\n    }\n```", "```cs\n    return deserializedEntries;\n```", "```cs\n}\n```", "```cs\npublic async Task<List<JournalEntry>> Deserialize\n```", "```cs\n     JsonEntriesAsync(List<string> journalData)\n```", "```cs\n{\n```", "```cs\n    var deserializedEntries = new List<JournalEntry>();\n```", "```cs\n    foreach (var jsonEntry in journalData)\n```", "```cs\n    {\n```", "```cs\n        if (string.IsNullOrWhiteSpace(jsonEntry)) continue;\n```", "```cs\n        using var stream = new MemoryStream(Encoding\n```", "```cs\n            .Unicode.GetBytes(jsonEntry));\n```", "```cs\n        deserializedEntries.Add((await JsonSerializer\n```", "```cs\n            .DeserializeAsync<JournalEntry>(stream))!);\n```", "```cs\n    }\n```", "```cs\n    return deserializedEntries;\n```", "```cs\n}\n```", "```cs\npublic async Task<List<JournalEntry>> \n```", "```cs\n    GetJournalEntriesAsync(List<string> journalData)\n```", "```cs\n{\n```", "```cs\n    var journalTasks = journalData.Select(entry => \n```", "```cs\n        DeserializeJsonEntryAsync(entry));\n```", "```cs\n    return (await Task.WhenAll(journalTasks)).ToList();\n```", "```cs\n}\n```", "```cs\nprivate async Task<JournalEntry> DeserializeJsonEntryAsync\n```", "```cs\n    (string jsonEntry)\n```", "```cs\n{\n```", "```cs\n    if (string.IsNullOrWhiteSpace(jsonEntry)) return new \n```", "```cs\n        JournalEntry();\n```", "```cs\n    using var stream = new MemoryStream\n```", "```cs\n        (Encoding.Unicode.GetBytes(jsonEntry));\n```", "```cs\n    return (await JsonSerializer.DeserializeAsync\n```", "```cs\n        <JournalEntry>(stream))!;\n```", "```cs\n}\n```", "```cs\nprivate async void saveButton_Click(object sender, \n```", "```cs\n    EventArgs e)\n```", "```cs\n{\n```", "```cs\n    await SaveData();\n```", "```cs\n}\n```", "```cs\n    dotnet new console –framework net6.0\n    ```", "```cs\n    public async Task DoThingsAsync()\n    {\n        Console.WriteLine($\"Doing things in \n            {nameof(DoThingsAsync)}\");\n        await DoFirstThingAsync();\n        await DoSecondThingAsync();\n        Console.WriteLine($\"Did things in \n            {nameof(DoThingsAsync)}\");\n    }\n    private async Task DoFirstThingAsync()\n    {\n        Console.WriteLine($\"Doing something in \n            {nameof(DoFirstThingAsync)}\");\n        await DoAnotherThingAsync();\n        Console.WriteLine($\"Did something in \n            {nameof(DoFirstThingAsync)}\");\n    }\n    private async Task DoSecondThingAsync()\n    {\n        Console.WriteLine($\"Doing something in \n            {nameof(DoSecondThingAsync)}\");\n        await Task.Delay(500);\n        Console.WriteLine($\"Did something in \n            {nameof(DoSecondThingAsync)}\");\n    }\n    private async Task DoAnotherThingAsync()\n    {\n        Console.WriteLine($\"Doing something in \n            {nameof(DoAnotherThingAsync)}\");\n        await Task.Delay(1500);\n        Console.WriteLine($\"Did something in \n            {nameof(DoAnotherThingAsync)}\");\n    }\n    ```", "```cs\n    using AsyncSamples;\n    Console.WriteLine(\"Start processing\"…\");\n    var taskSample = new TaskSample();\n    await taskSample.DoThingsAsync();\n    Console.WriteLi\"e(\"Done processing\"..\");\n    ```", "```cs\n    public async Task DoingThingsWrongAsync()\n    {\n        Console.WriteLine($\"Doing things in \n            {nameof(DoingThingsWrongAsync)}\");\n        DoFirstThingAsync();\n        await DoSecondThingAsync();\n        Console.WriteLine($\"Did things in \n            {nameof(DoingThingsWrongAsync)}\");\n    }\n    public async Task DoBlockingThingsAsync()\n    {\n        Console.WriteLine($\"Doing things in \n            {nameof(DoBlockingThingsAsync)}\");\n        DoFirstThingAsync().Wait();\n        await DoSecondThingAsync();\n        Console.WriteLine($\"Did things in \n            {nameof(DoBlockingThingsAsync)}\");\n    }\n    ```", "```cs\n    using AsyncSamples;\n    Console.WriteLine(\"Start processing...\");\n    var taskSample = new TaskSample();\n    await taskSample.DoThingsAsync();\n    Console.WriteLine(\"Continue processing...\");\n    await taskSample.DoingThingsWrongAsync();\n    Console.WriteLine(\"Continue processing...\");\n    await taskSample.DoBlockingThingsAsync();\n    Console.WriteLine(\"Done processing...\");\n    ```", "```cs\npublic interface IAsyncExamples\n```", "```cs\n{\n```", "```cs\n    void ProcessOrders(List<Order> orders);\n```", "```cs\n    Task ProcessOrdersAsync(List<Order> orders);\n```", "```cs\n    List<Order> GetOrders(int customerId);\n```", "```cs\n    Task<List<Order>> GetOrdersAsync(int customerId);\n```", "```cs\n}\n```", "```cs\npublic void ProcessOrders(List<Order> orders, int \n```", "```cs\n    customerId)\n```", "```cs\n{\n```", "```cs\n    Task<List<Order>> processOrdersTask = Task.Run(() => \n```", "```cs\n        PrepareOrders(orders));\n```", "```cs\n    Task labelTask = Task.Factory.StartNew(() => \n```", "```cs\n        CreateLabels(orders), TaskCreationOptions\n```", "```cs\n            .LongRunning);\n```", "```cs\n    Task sendTask = processOrdersTask.ContinueWith(task => \n```", "```cs\n        SendOrders(task.Result));\n```", "```cs\n    Task.WaitAll(new[] { labelTask, sendTask });\n```", "```cs\n    SendConfirmation(customerId);\n```", "```cs\n}\n```", "```cs\npublic void ProcessData(object data, bool uiRequired)\n```", "```cs\n{\n```", "```cs\n    Task processTask = new(() => DoDataProcessing(data));\n```", "```cs\n    if (uiRequired)\n```", "```cs\n    {\n```", "```cs\n        // Run on current thread (UI thread assumed for \n```", "```cs\n            example)\n```", "```cs\n        processTask.RunSynchronously();\n```", "```cs\n    }\n```", "```cs\n    else\n```", "```cs\n    {\n```", "```cs\n        // Run on ThreadPool thread in background\n```", "```cs\n        processTask.Start();\n```", "```cs\n    }\n```", "```cs\n}\n```", "```cs\nTask ordersTask = Task.Run(() => ProcessOrders(orders, \n```", "```cs\n    123));\n```", "```cs\ntry\n```", "```cs\n{\n```", "```cs\n    ordersTask.Wait();\n```", "```cs\n    Console.WriteLine($\"ordersTask Status: \n```", "```cs\n        {ordersTask.Status}\");\n```", "```cs\n} \n```", "```cs\ncatch (AggregateException)\n```", "```cs\n{\n```", "```cs\n    Console.WriteLine($\"Exception in ordersTask! Error \n```", "```cs\n        message: {ordersTask.Exception.Message}\");\n```", "```cs\n}   \n```", "```cs\n    public class Medication\n    {\n        public int Id { get; set; }\n        public string? Name { get; set; }\n    }\n    public class Provider\n    {\n        public int Id { get; set; }\n        public string? Name { get; set; }\n    }\n    public class Patient\n    {\n        public int Id { get; set; }\n        public string? Name { get; set; }\n        public List<Medication>? Medications { get; set; }\n        public Provider? PrimaryCareProvider { get; set; }\n    }\n    ```", "```cs\n    public async Task<Patient> GetPatientInfoAsync\n        (int patientId)\n    {\n        await Task.Delay(2000);\n        Patient patient = new()\n        {\n            Id = patientId,\n            Name = \"Smith, Terry\",\n            PrimaryCareProvider = new Provider\n            {\n                Id = 999,\n                Name = \"Dr. Amy Ng\"\n            },\n            Medications = new List<Medication>\n            {\n                new Medication { Id = 1, Name = \n                    \"acetaminophen\" },\n                new Medication { Id = 2, Name = \n                    \"hydrocortisone cream\" }\n            }\n        };\n        return patient;\n    }\n    ```", "```cs\n    public class MedicationLoader\n    {\n        private HealthcareService _healthcareService;\n        public MedicationLoader()\n        {\n            _healthcareService = new HealthcareService();\n        }\n        public Patient? GetPatientAndMedications(int \n            patientId)\n        {\n            Patient? patient = null;\n            try\n            {\n                patient = _healthcareService\n                   .GetPatientInfoAsync(patientId).Result;\n            }\n            catch (AggregateException ae)\n            {\n                Console.WriteLine($\"Error loading patient. \n                    Message: {ae.Flatten().Message}\");\n            }\n            if (patient != null)\n            {\n                patient = ProcessPatientInfo(patient);\n                return patient;\n            }\n            else\n            {\n                return null;\n            }\n        }\n        private Patient ProcessPatientInfo(Patient \n            patient)\n        {\n            // Add additional processing here.\n            return patient;\n        }\n    }\n    ```", "```cs\n    using SyncAndAsyncSamples.Models;\n    using SyncAndAsyncSamples.SyncToAsync;\n    Console.WriteLine(\"Hello, sync to async world!\");\n    var medLoader = new MedicationLoader();\n    Patient? patient = medLoader.GetPatientAndMedications\n        (123);\n    Console.WriteLine($\"Loaded patient: {patient.Name} \n        with {patient.Medications.Count} medications.\");\n    ```", "```cs\nHello, sync to async world!\nLoaded patient: Smith, Terry with 2 medications.\n```", "```cs\n    public Patient GetPatientInfo(int patientId)\n    {\n        Thread.Sleep(2000);\n        Patient patient = new()\n        {\n            Id = patientId,\n            Name = \"Smith, Terry\",\n            PrimaryCareProvider = new Provider\n            {\n                Id = 999,\n                Name = \"Dr. Amy Ng\"\n            },\n            Medications = new List<Medication>\n            {\n                new Medication { Id = 1, Name = \n                    \"acetaminophen\" },\n                new Medication { Id = 2, Name = \n                    \"hydrocortisone cream\" }\n            }\n        };\n        return patient;\n    }\n    ```", "```cs\n    private PatientService _patientService = new \n        PatientService();\n    ```", "```cs\n    private async Task<Patient> ProcessPatientInfoAsync\n        (Patient patient)\n    {\n        await Task.Delay(100);\n        // Add additional processing here.\n        return patient;\n    }\n    ```", "```cs\n    public async Task<Patient?> GetPatientAndMedsAsync\n        (int patientId)\n    {\n        Patient? patient = null;\n        try\n        {\n            patient = await Task.Run(() => \n               _patientService.GetPatientInfo(patientId));\n        }\n        catch (Exception e)\n        {\n            Console.WriteLine($\"Error loading patient. \n                Message: {e.Message}\");\n        }\n        if (patient != null)\n        {\n            patient = await ProcessPatientInfoAsync\n                (patient);\n            return patient;\n        }\n        else\n        {\n            return null;\n        }\n    }\n    ```", "```cs\n    using SyncAndAsyncSamples.AsyncToSync;\n    using SyncAndAsyncSamples.Models;\n    Console.WriteLine(\"Hello, async to sync world!\");\n    var loader = new PatientLoader();\n    Patient? patient = await loader.GetPatientAndMedsAsync\n        (123);\n    Console.WriteLine($\"Loaded patient: {patient.Name} \n        with {patient.Medications.Count} medications.\");\n    ```", "```cs\nHello, async to sync world!\nLoaded patient: Smith, Terry with 2 medications.\n```", "```cs\npublic async Task<Patient> LoadPatientAsync(int patientId)\n```", "```cs\n{\n```", "```cs\n    var taskList = new List<Task>\n```", "```cs\n    {\n```", "```cs\n        LoadPatientInfoAsync(patientId),\n```", "```cs\n        LoadProviderAsync(patientId),\n```", "```cs\n        LoadMedicationsAsync(patientId)\n```", "```cs\n    };\n```", "```cs\n    await Task.WhenAll(taskList.ToArray());\n```", "```cs\n    _patient.Medications = _medications;\n```", "```cs\n    _patient.PrimaryCareProvider = _provider;\n```", "```cs\n    return _patient;\n```", "```cs\n}\n```", "```cs\npublic Patient LoadPatient(int patientId)\n```", "```cs\n{\n```", "```cs\n    var taskList = new List<Task>\n```", "```cs\n    {\n```", "```cs\n        LoadPatientInfoAsync(patientId),\n```", "```cs\n        LoadProviderAsync(patientId),\n```", "```cs\n        LoadMedicationsAsync(patientId)\n```", "```cs\n    };\n```", "```cs\n    Task.WaitAll(taskList.ToArray());\n```", "```cs\n    _patient.Medications = _medications;\n```", "```cs\n    _patient.PrimaryCareProvider = _provider;\n```", "```cs\n    return _patient;\n```", "```cs\n}\n```"]