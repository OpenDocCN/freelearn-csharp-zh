- en: '*Chapter 13*: Managing Inputs with Custom ModelBinder'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 13 章*：使用自定义 ModelBinder 管理输入'
- en: In the last chapter regarding `OutputFormatter`, we learned about sending data
    out to clients in different formats. In this chapter, we are going to do it the
    other way. This chapter is about data you get in your web API from outside; for
    instance, what to do if you get data in a special format, or if you get data you
    need to validate in a special way. **Model Binders** will help you to handle this.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章关于 `OutputFormatter` 的内容中，我们学习了如何以不同的格式向客户端发送数据。在本章中，我们将反向操作。本章是关于从外部获取的数据；例如，如果你以特殊格式接收到数据，或者如果你需要以特殊方式验证接收到的数据时，**Model
    Binder** 将帮助你处理这种情况。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing `ModelBinder`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 `ModelBinder`
- en: Preparing the test project
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备测试项目
- en: Creating `PersonsCsvBinder`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 `PersonsCsvBinder`
- en: Using `ModelBinder`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `ModelBinder`
- en: Testing `ModelBinder`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试 `ModelBinder`
- en: 'The topics in this chapter refer to the WebAPI layer of the ASP.NET Core architecture:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的主题涉及 ASP.NET Core 架构的 WebAPI 层：
- en: '![Figure 13.1 – ASP.NET Core architecture'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.1 – ASP.NET Core 架构'
- en: '](img/Figure_13.1_B17996.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.1_B17996.jpg)'
- en: Figure 13.1 – ASP.NET Core architecture
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core MVC application. Open your console, shell, or Bash terminal, and change to
    your working directory. Use the following command to create a new MVC application:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章的描述，你需要创建一个 ASP.NET Core MVC 应用程序。打开你的控制台、shell 或 Bash 终端，切换到你的工作目录。使用以下命令创建一个新的
    MVC 应用程序：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or, in VS Code, by typing the following command in the already open console:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件或在 VS Code 中输入以下命令来在 Visual Studio 中打开项目：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'All of the code samples in this chapter can be found in the GitHub repository
    for this book at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter13).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中所有的代码示例都可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter13](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter13)。
- en: Introducing ModelBinder
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 ModelBinder
- en: Model Binders are responsible for binding the incoming data to specific action
    method parameters. They bind the data sent with the request to the parameters.
    The default binders are able to bind data that is sent via the `QueryString`,
    or sent within the request body. Within the body, the data can be sent in URL
    or JSON format.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Model Binder 负责将传入的数据绑定到特定的操作方法参数。它们将请求中发送的数据绑定到参数。默认绑定器能够绑定通过 `QueryString`
    发送或请求正文中发送的数据。在正文中，数据可以以 URL 或 JSON 格式发送。
- en: The model binding tries to find the values in the request by parameter names.
    The form values, route data, and query string values are stored as a key-value
    pair collection and the binding tries to find the parameter name in the keys of
    the collection.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 模型绑定尝试通过参数名称在请求中查找值。表单值、路由数据和查询字符串值存储为一个键值对集合，绑定尝试在集合的键中查找参数名称。
- en: Let's demonstrate how this works with a test project.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个测试项目来演示这是如何工作的。
- en: Preparing the test data
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备测试数据
- en: In this section, we're going to see how to send CSV data to a web API method.
    We will reuse the CSV data we created in [*Chapter 12*](B17996_12_ePub.xhtml#_idTextAnchor172),
    *Content Negotiation Using a Custom OutputFormatter*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何将 CSV 数据发送到 Web API 方法。我们将重用我们在 [*第 12 章*](B17996_12_ePub.xhtml#_idTextAnchor172)，*使用自定义
    OutputFormatter 进行内容协商* 中创建的 CSV 数据。
- en: 'This is a snippet of the test data we want to use:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们想要使用的测试数据片段：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can find the full CSV test data on GitHub at: [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter13/testdata.csv](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter13/testdata.csv).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 GitHub 上找到完整的 CSV 测试数据：[https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter13/testdata.csv](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/blob/main/Chapter13/testdata.csv)。
- en: Preparing the test project
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备测试项目
- en: 'Let''s prepare the project by following these steps:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤准备项目：
- en: 'In the already created project (refer to the *Technical requirements* section),
    we will now create a new empty API controller with a small action inside:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在已经创建的项目（参考*技术要求*部分），我们现在将创建一个新的空API控制器，其中包含一个小操作：
- en: '[PRE3]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This looks basically like any other action. It accepts a list of persons and
    returns an anonymous object that contains the number of persons as well as the
    list of persons. This action is pretty useless but helps us to debug `ModelBinder`
    using Postman.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个看起来基本上和任何其他操作一样。它接受人员列表并返回一个包含人员数量以及人员列表的匿名对象。这个操作相当无用，但帮助我们使用Postman调试`ModelBinder`。
- en: 'We also need the `Person` class:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要`Person`类：
- en: '[PRE4]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will actually work fine if we want to send JSON-based data to that action.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们想向该操作发送基于JSON的数据，这将实际上工作得很好。
- en: 'As a last preparation step, we need to add the `CsvHelper` NuGet package to
    parse the CSV data more easily. The .NET CLI is also useful here:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为最后的准备步骤，我们需要添加`CsvHelper` NuGet包以更轻松地解析CSV数据。.NET CLI在这里也很有用：
- en: '[PRE5]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that this is all set up, we can try it out and create `PersonsCsvBinder`
    in the next section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些都设置好了，我们可以在下一节尝试它并创建`PersonsCsvBinder`。
- en: Creating PersonsCsvBinder
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建`PersonsCsvBinder`
- en: Let's build a binder.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个绑定器。
- en: 'To create `ModelBinder`, add a new class called `PersonsCsvBinder`, which implements
    `IModelBinder`. In the `BindModelAsync` method, we get `ModelBindingContext` with
    all the information in it that we need in order to get the data and deserialize
    it. The following code snippets show a generic binder that should work with any
    list of models. We have split it into sections so that you can clearly see how
    each part of the binder works:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`ModelBinder`，添加一个名为`PersonsCsvBinder`的新类，该类实现`IModelBinder`接口。在`BindModelAsync`方法中，我们获取包含所有所需信息的`ModelBindingContext`，以便获取数据和反序列化。以下代码片段显示了一个通用的绑定器，它应该适用于任何模型列表。我们将其分为几个部分，以便您可以清楚地看到绑定器的每个部分是如何工作的：
- en: '[PRE6]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As you can see from the preceding code block, first, the context is checked
    against null. After that, we set a default argument name to the model, if none
    have already been specified. If this is done, we are able to fetch the value by
    the name we set previously:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的代码块中看到的，首先检查上下文是否为null。之后，如果尚未指定，我们将设置默认参数名称给模型。如果这样做，我们就可以通过之前设置的名称获取值：
- en: '[PRE7]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the next part, if there''s no value, we shouldn''t throw an exception in
    this case. The reason is that the next configured `ModelBinder` might be responsible.
    If we throw an exception, the execution of the current request is canceled and
    the next configured `ModelBinder` doesn''t have the opportunity to be executed:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一部分，如果没有值，在这种情况下我们不应该抛出异常。原因是下一个配置的`ModelBinder`可能负责。如果我们抛出异常，当前请求的执行将被取消，下一个配置的`ModelBinder`就没有机会被执行：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If we have the value, we can instantiate a new `StringReader` that needs to
    be passed to `CsvReader`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有值，我们可以实例化一个新的`StringReader`，需要将其传递给`CsvReader`：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'With `CsvReader`, we can deserialize the CSV string value into a list of `Persons`.
    If we have the list, we need to create a new, successful `ModelBindingResult`
    that needs to be assigned to the `Result` property of `ModelBindingContext`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`CsvReader`，我们可以将CSV字符串值反序列化为`Persons`列表。如果我们有列表，我们需要创建一个新的、成功的`ModelBindingResult`，并将其分配给`ModelBindingContext`的`Result`属性：
- en: '[PRE10]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You might need to add the following `using` statements at the beginning of
    the file:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要在文件开头添加以下`using`语句：
- en: '[PRE11]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Next, we'll put `ModelBinder` to work.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`ModelBinder`。
- en: Using ModelBinder
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用模型绑定器
- en: The binder isn't used automatically because it isn't registered in the dependency
    injection container and is not configured to be used within the MVC framework.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定器不会自动使用，因为它没有在依赖注入容器中注册，并且没有配置在MVC框架中使用。
- en: 'The easiest way to use this model binder is to use `ModelBinderAttribute` on
    the argument of the action where the model should be bound:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此模型绑定器的最简单方法是，在模型应绑定到的操作的参数上使用`ModelBinderAttribute`：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, the type of our `PersonsCsvBinder` is set as `binderType` to that attribute.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将我们的`PersonsCsvBinder`的类型设置为`binderType`属性。
- en: Note
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`ModelBinderProvider` to add the `ModelBinder` to the list of existing ones.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ModelBinderProvider`将`ModelBinder`添加到现有列表中。
- en: I personally prefer the explicit declaration because most custom `ModelBinder`
    will be specific to an action or to a specific type, and it prevents hidden magic
    in the background.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人更喜欢显式声明，因为大多数自定义`ModelBinder`将特定于某个操作或特定类型，并且可以防止在后台隐藏魔法。
- en: Now, let's test out what we've built.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试一下我们所构建的内容。
- en: Testing ModelBinder
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试ModelBinder
- en: 'To test it, we need to create a new request in Postman:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，我们需要在Postman中创建一个新的请求：
- en: Start the application by running `dotnet run` in the console or by pressing
    *F5* in Visual Studio or VS Code.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在控制台运行`dotnet run`或按*F5*在Visual Studio或VS Code中启动应用程序来启动应用程序。
- en: In Postman, we will then set the request type to `https://localhost:5001/api/persons`
    in the address bar.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Postman中，我们将在地址栏中将请求类型设置为`https://localhost:5001/api/persons`。
- en: The port number might vary on your side.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 端口号可能因您的环境而异。
- en: 'Next, we need to add the CSV data to the body of the request. Select `form-data`
    as the body type, add the `persons` key, and paste the following value lines in
    the value field:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将CSV数据添加到请求体中。选择`form-data`作为请求体类型，添加`persons`键，并在值字段中粘贴以下值行：
- en: '[PRE13]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After pressing **Send**, we get the result, as shown in *Figure 13.2*:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下**发送**后，我们得到的结果，如图*图13.2*所示：
- en: '![Figure 13.2 – A screenshot of CSV data in Postman'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.2 – Postman中的CSV数据截图'
- en: '](img/Figure_13.2_B17996.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.2 – Postman中的CSV数据截图](img/Figure_13.2_B17996.jpg)'
- en: Figure 13.2 – A screenshot of CSV data in Postman
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – Postman中的CSV数据截图
- en: Now, the clients will be able to send CSV-based data to the server.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，客户端将能够向服务器发送基于CSV的数据。
- en: Summary
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This is a good way to transform the input in a way that the action needs. You
    could also use `ModelBinder` to do some custom validation against the database
    or whatever you need to do before the model gets passed to the action.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种将输入转换为动作所需的方式的好方法。您也可以使用`ModelBinder`对数据库或您需要在模型传递给动作之前完成的任何操作进行一些自定义验证。
- en: In the next chapter, we will see what you can do with `ActionFilter`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到您可以使用`ActionFilter`做什么。
- en: Further reading
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about `ModelBinder`, you should have a look at the following
    reasonably detailed documentation:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于`ModelBinder`的信息，您应该查看以下相对详细的文档：
- en: 'Steve Gordon, *Custom ModelBinding in ASP.NET MVC Core*: https://www.stevejgordon.co.uk/html-encode-string-aspnet-core-model-binding/'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Steve Gordon，*ASP.NET MVC Core中的自定义模型绑定*: https://www.stevejgordon.co.uk/html-encode-string-aspnet-core-model-binding/'
- en: '*Model Binding in ASP.NET Core*: https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ASP.NET Core中的模型绑定*: https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding'
- en: '*Custom Model Binding in ASP.NET Core*: https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ASP.NET Core中的自定义模型绑定*: https://docs.microsoft.com/en-us/aspnet/core/mvc/advanced/custom-model-binding'
