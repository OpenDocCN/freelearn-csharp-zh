- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Understanding DevOps Principles and CI/CD
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解DevOps原则和CI/CD
- en: Although many people define DevOps as a process, the more you work with it,
    the better you understand it as a philosophy. This chapter will cover the main
    concepts, principles, and tools you need to develop and deliver your software
    with DevOps.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多人将DevOps定义为一种流程，但当你与它一起工作时，你会更好地理解它是一种哲学。本章将涵盖你需要开发和使用DevOps来交付软件的主要概念、原则和工具。
- en: By considering the DevOps philosophy, this chapter will focus on **service design
    thinking**, that is, keeping in mind that the software you design is a service
    offered to an organization or part of an organization. The main takeaway of this
    approach is that the highest priority is the value your software gives to the
    target organization. Moreover, you are not just offering working code and an agreement
    to fix bugs but also a solution for all the needs that your software was conceived
    for. In other words, your job includes everything it needs to satisfy those needs,
    such as monitoring users’ satisfaction and quickly adapting the software when
    the user needs change, due to issues or new requirements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过考虑DevOps哲学，本章将重点关注**服务设计思维**，即牢记你设计的软件是提供给组织或组织的一部分的服务。这种方法的核心理念是，最高优先级是软件为目标组织带来的价值。此外，你不仅提供可工作的代码和修复错误的协议，还提供满足软件构思的所有需求的解决方案。换句话说，你的工作包括满足这些需求所需的一切，例如监控用户满意度，并在用户需求因问题或新要求而变化时快速调整软件。
- en: Service design thinking is strictly tied to the **Software as a Service** (**SaaS**)
    model, which is discussed in *Chapter 10*, *Deciding on the Best Cloud-Based Solution*.
    In fact, the simplest way to offer solutions based on web services is to offer
    the usage of web services as a service, instead of selling the software that implements
    them.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 服务设计思维与**软件即服务**（**SaaS**）模型紧密相连，这在第10章“选择最佳云解决方案”中有讨论。事实上，提供基于Web服务的解决方案最简单的方法是提供Web服务的使用作为一项服务，而不是销售实现它们的软件。
- en: '**Continuous Integration** (**CI**) and **Continuous Delivery** (**CD**) are
    sometimes stated as prerequisites for DevOps. So, the purpose of this chapter
    is also to discuss how to enable CI/CD in a real scenario, considering the challenges
    that you, as a software architect, will need to deal with.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）和**持续交付**（**CD**）有时被列为DevOps的先决条件。因此，本章的目的也是讨论如何在实际场景中启用CI/CD，考虑到作为软件架构师，你需要应对的挑战。'
- en: 'The following topics will be covered in this chapter:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: 'Understanding DevOps principles: CI, CD, and continuous feedback'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解DevOps原则：CI、CD和持续反馈
- en: Understanding how to implement DevOps using Azure DevOps and GitHub
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解如何使用Azure DevOps和GitHub实现DevOps
- en: Understanding the risks and challenges when using CI/CD
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解使用CI/CD时的风险和挑战
- en: The `WWTravelClub` project case, presented in *Chapter 21**, Case Study*, will
    be discussed during these topics, giving you the opportunity to understand how
    the DevOps philosophy can be implemented. All the screenshots exemplifying the
    DevOps principles come from the main use case of the book, so you will be able
    to understand the DevOps principles easily.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在第21章“案例研究”中介绍的`WWTravelClub`项目案例将在这些主题中讨论，这将为你提供了解DevOps哲学如何实施的机会。所有展示DevOps原则的截图都来自本书的主要用例，因此你将能够轻松理解DevOps原则。
- en: By the end of this chapter, you will be able to design software according to
    service design thinking principles and use Azure Pipelines to deploy your application.
    You will be able to decide whether to use CI/CD in your project environment. Additionally,
    you will be able to define the tools needed for the successful use of this approach.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够根据服务设计思维原则设计软件，并使用Azure Pipelines部署你的应用程序。你将能够决定是否在你的项目环境中使用CI/CD。此外，你将能够定义成功使用此方法所需的工具。
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2022 Community Edition or better, with all
    the Azure tools installed. You may also need an Azure DevOps account, as described
    in *Chapter 3*, *Managing Requirements*. It requires a free Azure account too.
    If you have not already created one, the *Creating an Azure account* subsection
    of *Chapter 1*, *Understanding the Importance of Software Architecture*, explains
    how to do so. This chapter uses the same code as *Chapter 9*, *Testing Your Enterprise
    Application*.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要Visual Studio 2022 Community Edition或更高版本，并安装所有Azure工具。你可能还需要一个Azure DevOps账户，如第3章*管理需求*中所述。还需要一个免费的Azure账户。如果你还没有创建一个，第1章*理解软件架构的重要性*中的*创建Azure账户*小节解释了如何创建。本章使用与第9章*测试你的企业应用*相同的代码。
- en: Describing DevOps
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述DevOps
- en: DevOps is a term that is derived from the combination of the words *Development*
    and *Operations*, and the DevOps process simply unifies actions in these two areas.
    However, when you start to study a little bit more about it, you will realize
    that just connecting these two areas is not enough to achieve the true goals of
    this philosophy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps是一个由单词*开发（Development）*和*运维（Operations）*组合而成的术语，DevOps过程简单地将这两个领域的行动统一起来。然而，当你开始更深入地了解它时，你会意识到仅仅连接这两个领域是不够的，无法实现这种哲学的真正目标。
- en: We can also say that DevOps is the process that answers the current needs of
    people, regarding software delivery.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以说，DevOps是满足人们对软件交付当前需求的过程。
- en: 'Donovan Brown has a spectacular definition of what DevOps is: *DevOps is the
    union of people, process, and products to enable continuous delivery of value
    to our end users* ([http://donovanbrown.com/post/what-is-devops](http://donovanbrown.com/post/what-is-devops)).'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Donovan Brown对DevOps有一个精彩的定义：*DevOps是将人员、流程和产品结合在一起，以实现向最终用户持续交付价值的过程* ([http://donovanbrown.com/post/what-is-devops](http://donovanbrown.com/post/what-is-devops))。
- en: 'A way to deliver value continuously to our end users, using processes, people,
    and products: this is the best description of the DevOps philosophy. We need to
    develop and deliver customer-oriented software. As soon as all areas of a company
    understand that the key point is the end user, your task as a software architect
    is to present the technology that will facilitate the process of delivery.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用流程、人员和产品持续地向我们的最终用户交付价值：这是对DevOps哲学的最佳描述。我们需要开发和交付面向客户的软件。一旦公司的所有领域都明白关键点是最终用户，作为软件架构师的你，任务就是展示将促进交付过程的技术。
- en: All the content in this book is connected to this approach. It is never a matter
    of knowing a bunch of tools and technologies. As a software architect, you must
    understand that there is always a way to bring faster solutions to your end user
    easily, linked to their real needs. For this reason, you need to learn the DevOps
    principles, which will be discussed in this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有内容都与这种方法相关联。这从来不是仅仅知道一堆工具和技术的问题。作为一名软件架构师，你必须明白，总有办法轻松地将更快解决方案带给最终用户，并与他们的实际需求相联系。因此，你需要学习DevOps原则，这些原则将在本章中讨论。
- en: Understanding DevOps principles
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解DevOps原则
- en: Considering DevOps as a philosophy, there are some principles that enable the
    process to work well in your team. These principles are **CI**, **CD**, and **continuous
    feedback**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 将DevOps视为一种哲学，有一些原则使得这个过程在你的团队中能够良好地运作。这些原则是**持续集成（CI**）、**持续部署（CD**）和**持续反馈**。
- en: Microsoft has a specific web page for defining the DevOps overview, culture,
    practices, tools, and its relation to the cloud. Please check this out at [https://azure.microsoft.com/en-us/overview/what-is-devops/](https://azure.microsoft.com/en-us/overview/what-is-devops/).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有一个专门的网页来定义DevOps概述、文化、实践、工具及其与云的关系。请在此查看：[https://azure.microsoft.com/en-us/overview/what-is-devops/](https://azure.microsoft.com/en-us/overview/what-is-devops/)。
- en: DevOps is represented by the symbol of infinity in many books and technical
    articles. This represents the necessity for a continuous approach in the software
    development life cycle. During the cycle, you will need to plan, build, continuously
    integrate, deploy, operate, and get feedback, and then start all over again. The
    process must be a collaborative one since everybody has the same focus—to deliver
    value to the end user. Together with these principles, you “as a software architect”
    will need to decide on the best software development process that fits this approach.
    We discussed these processes in *Chapter 1*, *Understanding the Importance of
    Software Architecture*.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多书籍和技术文章中，DevOps被表示为无限符号。这代表了在软件开发生命周期中持续方法的必要性。在这个过程中，你需要计划、构建、持续集成、部署、运营、获取反馈，然后从头开始。这个过程必须是协作的，因为每个人都有相同的焦点——为最终用户提供价值。与这些原则一起，“作为一名软件架构师”，你需要决定最适合这种方法的最佳软件开发流程。我们在*第1章*，*理解软件架构的重要性*中讨论了这些流程。
- en: CI
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CI
- en: When you start building enterprise solutions, collaboration is the key to getting
    things done faster and meeting the users’ needs. Version control systems, as we
    discussed in *Chapter 4*, *Best Practices in Coding C# 12*, are essential for
    this process, but these tools do not do the job by themselves, especially if they
    are not well configured.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始构建企业级解决方案时，协作是更快完成任务和满足用户需求的关键。正如我们在*第4章*，*C#编码最佳实践12*中讨论的那样，版本控制系统对于这个过程至关重要，但这些工具并不能自行完成任务，尤其是如果它们没有良好配置的话。
- en: As a software architect, you must know that **CI** will help you to adopt a
    concrete approach to software development collaboration. When you implement it,
    as soon as a developer commits their code, the main code is automatically compiled
    and tested, according to unit and functional tests available in the project.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件架构师，你必须知道**持续集成（CI**）将帮助你采用具体的软件开发协作方法。当你实施它时，一旦开发者提交代码，主代码就会根据项目中的单元测试和功能测试自动编译和测试。
- en: The good thing when you apply CI is that you can motivate developers to merge
    their changes as fast as they can to minimize merge conflicts. They can also share
    unit tests, which will improve the quality of software. This will make your master
    branch stable and safe after every commit from your team.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你应用CI时，好处是你可以激励开发者尽可能快地合并他们的更改，以最小化合并冲突。他们还可以共享单元测试，这将提高软件的质量。这将使你的主分支在每次团队提交后都稳定且安全。
- en: The key point of CI is the ability to identify problems faster. You will have
    this opportunity when you allow code to be tested and analyzed by others. The
    only thing the DevOps approach helps with is making sure this happens as quickly
    as possible.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: CI的关键点是能够更快地识别问题。当你允许代码被他人测试和分析时，你将有机会这样做。DevOps方法唯一能帮助的就是确保这一切尽可能快地发生。
- en: CD
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CD
- en: Once every single commit of your application is built and this code is tested
    with both unit tests and functional tests, you may also want to enable **CD**.
    Doing this is not just a matter of configuring the tool. As a software architect,
    you need to be sure that the team and the process are ready to go to this step.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的应用程序的每个提交都构建完成，并且这段代码已经通过单元测试和功能测试进行测试，你可能还想要启用**持续交付（CD**）。这样做不仅仅是配置工具的问题。作为一名软件架构师，你需要确保团队和流程已经准备好进入这一步。
- en: The CD approach needs to guarantee that the production environment will be kept
    safe in each new deployment. To do so, a multi-stage pipeline is a great practice
    to be adopted.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付的方法需要保证在每次新部署时生产环境的安全。为此，采用多阶段管道是一个很好的实践。
- en: 'The following screenshot shows an approach with common stages, using this book’s
    use case, **WWTravelClub**, as a demonstration:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的屏幕截图展示了使用本书用例**WWTravelClub**作为演示的常见阶段的方法：
- en: '![A screenshot of a computer  Description automatically generated](img/B19820_08_01.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图 自动生成描述](img/B19820_08_01.png)'
- en: 'Figure 8.1: Release stages using Azure DevOps'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1：使用Azure DevOps的发布阶段
- en: 'As you can see, these stages were configured using the Azure DevOps release
    pipeline, which will be explained soon. Each stage has its own purpose, which
    will affect the quality of the product ultimately delivered. Let’s look at the
    stages:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，这些阶段是使用Azure DevOps发布管道配置的，这将在稍后解释。每个阶段都有自己的目的，这最终会影响交付产品的质量。让我们看看这些阶段：
- en: '**Development/tests**: This stage is used by developers and testers to build
    new functionality. This environment will certainly be the one that is most exposed
    to bugs and incomplete functions.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发/测试**：这个阶段由开发人员和测试人员用来构建新功能。这个环境肯定会是暴露于错误和不完整功能最多的环境。'
- en: '**Staging**: This environment gives a brief version of new functionalities
    to areas of the team not related to development and tests. Program managers, marketing,
    vendors, and others can use it as an area of study, validation, and even preproduction.
    Additionally, quality assurance teams can guarantee that the new releases are
    correctly deployed, considering both functionality and infrastructure.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预发布环境**：这个环境向与开发和测试无关的团队区域提供新功能的一个简短版本。项目经理、市场营销、供应商和其他人可以使用它作为研究、验证甚至预生产的区域。此外，质量保证团队可以确保新发布正确部署，考虑到功能和基础设施。'
- en: '**Production**: This is the stage where customers have their solution running.
    The goal for a good production environment, according to CD, is to have it updated
    as quickly as possible. The frequency will vary according to team size, but there
    are some approaches where this process happens more than once a day.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生产环境**：这是客户运行解决方案的阶段。根据 CD 的观点，一个良好的生产环境的目标是尽可能快地更新。频率将根据团队规模而变化，但有一些方法，这个过程一天内会发生多次以上。'
- en: The adoption of these three stages of deploying your application will positively
    impact the quality of the solution. It will also enable the team to have a safer
    deployment process, with fewer risks and better product stability. This approach
    may look a bit expensive at first sight, but without it, the results of bad deployment
    will generally be more expensive than this investment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这三个部署应用阶段将积极影响解决方案的质量。它还将使团队能够拥有更安全的部署流程，风险更少，产品稳定性更好。这种做法一开始可能看起来有点昂贵，但如果没有它，不良部署的结果通常会比这个投资更昂贵。
- en: Risks and challenges when using CI/CD
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CI/CD 时的风险和挑战
- en: Now that we have an idea of how useful CI/CD is, it would be nice to think about
    the risks and challenges you may encounter while implementing it. The goal of
    this section is to help you, as a software architect, mitigate the risks and find
    a better way to overcome the challenges, using good processes and techniques.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 CI/CD 的有用性，那么考虑在实施过程中可能遇到的风险和挑战将是个不错的选择。本节的目标是帮助你们作为软件架构师，通过良好的流程和技术来降低风险，找到克服挑战的更好方法。
- en: 'The list of risks and challenges that will be discussed in this section are
    as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将讨论的风险和挑战列表如下：
- en: Continuous production deployment
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续生产部署
- en: Incomplete features in production
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境中的不完整功能
- en: Unstable solutions for testing
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试中的不稳定解决方案
- en: Once you have the techniques and the processes defined to deal with them, there
    is no reason not to use CI/CD.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了处理它们的技术和流程，就没有理由不使用 CI/CD。
- en: Remember that DevOps does not depend on CI/CD. You can use a process where code
    integration and software deployment are human-based. However, CI/CD does make
    DevOps work more smoothly.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，DevOps 并不依赖于 CI/CD。你可以使用一个基于人类操作的过程，其中代码集成和软件部署都是人工完成的。然而，CI/CD 确实可以使 DevOps
    的工作更加顺畅。
- en: Now, let us have a look at them.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看它们。
- en: Disabling continuous production deployment
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 禁用持续生产部署
- en: Continuous production deployment is a process where, after a commit of a new
    piece of code and some pipeline steps, you will have this code in the **production**
    environment. This is not impossible, but it is hard and expensive to do. Besides,
    you need to have well-established, sophisticated processes, as well as a team
    with substantial experience and expertise to enable it. The problem is that most
    of the demos and samples you will find on the internet presenting CI/CD will show
    you a fast track to deploying code. The demonstrations of CI/CD make it look so
    simple! This *simplicity* might suggest that you should implement it as soon as
    possible. However, if you think a little more, this scenario can be dangerous
    if you deploy directly into production! In a solution that needs to be available
    24 hours a day, 7 days a week, this is impractical. So you will need to worry
    about that and think of different solutions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 持续生产部署是一个过程，在该过程中，在提交新代码片段和一些管道步骤之后，您将在**生产**环境中拥有这段代码。这并非不可能，但很难且成本高昂。此外，您需要拥有良好建立、复杂的流程，以及一个经验丰富、专业知识丰富的团队来实现它。问题是，您在网上找到的大多数演示和示例都会展示CI/CD的快速部署路径。CI/CD的演示使其看起来如此简单！这种**简单性**可能会让您认为应该尽快实施它。然而，如果您再思考一下，如果直接部署到生产中，这种场景可能会很危险！对于需要每天24小时、每周7天都可用的问题解决方案来说，这是不切实际的。因此，您需要担心这一点，并考虑不同的解决方案。
- en: The first one is the use of a multi-stage scenario, as we described before.
    The multi-stage scenario can bring more security to the ecosystem of the deployment
    you are building. Besides, you will get more options to avoid incorrect deployments
    into production, such as pre-deployment approvals,
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法是使用多阶段场景，正如我们之前所描述的。多阶段场景可以为您正在构建的部署生态系统带来更多安全性。此外，您将获得更多选项来避免错误地将部署部署到生产环境中，例如预部署审批。
- en: You can build a deployment pipeline where all your code and software structure
    will be updated by this tool. However, if you have something outside of this scenario,
    such as database scripts and environment configurations, an incorrect publication
    into production may cause damage to end users. Besides, the decision of when the
    production environment will be updated needs to be planned, and in many scenarios,
    all the platform users need to be notified of the upcoming change. It is worth
    mentioning that, in these hard-to-decide cases, it is a good idea to use a **change
    management** procedure, based on the **Information Technology Infrastructure Library**
    (**ITIL**) or ISO 20000.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以构建一个部署管道，其中所有代码和软件结构都将由这个工具更新。然而，如果您有这个场景之外的东西，比如数据库脚本和环境配置，错误的发布到生产中可能会对最终用户造成损害。此外，何时更新生产环境需要提前规划，在许多情况下，所有平台用户都需要被告知即将到来的变更。值得一提的是，在这些难以决定的案例中，使用基于**信息技术基础设施库**（**ITIL**）或ISO
    20000的**变更管理**程序是个好主意。
- en: So the challenge of delivering code to production will make you think about
    a schedule to do so. It does not matter whether your cycle is monthly, daily,
    or even at each commit. The key point here is that you need to create a process
    and a pipeline that guarantees that only good and approved software is at the
    production stage. It is worth noting, however, that the longer you leave deployments,
    the scarier they are, as the deviation between the previously deployed version
    and the new one will be greater, and more changes will be pushed out in one go.
    The more frequently you can deploy, the better.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将代码交付到生产的挑战将使您考虑一个计划来执行它。无论是按月、按日，甚至每次提交，这都无关紧要。关键点在于您需要创建一个过程和管道，以确保只有良好且经过批准的软件处于生产阶段。然而，值得注意的是，您部署的时间越长，它们就越可怕，因为之前部署的版本和新的版本之间的偏差会更大，并且会有更多的更改一次性推出。您能更频繁地部署，那就越好。
- en: Incomplete features
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不完整的功能
- en: While a developer of your team is creating a new feature or fixing a bug, you
    will probably consider generating a branch, which means they can avoid the use
    of the branch designed for CD. A branch can be considered a feature available
    in code repositories to enable the creation of an independent line of development,
    since it isolates code.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的团队中的开发人员正在创建新功能或修复错误时，您可能会考虑创建一个分支，这意味着他们可以避免使用为CD设计的分支。分支可以被视为代码库中的一项功能，它允许创建一个独立的开发线路，因为它可以隔离代码。
- en: 'As you can see in the following screenshot, creating a branch for **wwtravelclub**
    using Visual Studio is quite simple:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在下面的屏幕截图中所见，使用Visual Studio为**wwtravelclub**创建分支相当简单：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_08_02.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_02.png)'
- en: 'Figure 8.2: Creating a branch in Visual Studio'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2：在Visual Studio中创建分支
- en: This seems to be a good approach, but let us suppose that the developer has
    considered the implementation ready for deployment and has just merged the code
    into the master branch, although this is also considered a bad practice. What
    if this feature is not ready yet, just because a requirement was omitted? What
    if the bug has caused incorrect behavior? The result could be a release with an
    incomplete feature or an incorrect fix.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一个好的方法，但让我们假设开发者已经认为实现准备就绪可以部署，并且刚刚将代码合并到主分支，尽管这也被认为是一种不好的做法。如果因为这个要求被遗漏，这个功能还没有准备好怎么办？如果这个错误导致了不正确的行为呢？结果可能是带有不完整功能或错误修复的发布。
- en: One of the good practices to avoid broken features and even incorrect fixes
    in the master branch is the use of **Pull Requests** (**PRs**). PRs will let other
    team developers know that the code you developed is ready to be merged. The following
    screenshot shows how you can use the Azure DevOps WWTravelClub repository to create
    a **New pull request** for a change you have made.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在主分支中出现损坏的功能甚至错误的修复，一个好的做法是使用**拉取请求**（**PRs**）。PRs将让其他团队成员知道你开发的代码已经准备好合并。以下截图显示了如何使用Azure
    DevOps WWTravelClub存储库为你所做的更改创建一个**新的拉取请求**。
- en: '![Interface gráfica do usuário, Texto, Aplicativo, Email  Descrição gerada
    automaticamente](img/B19820_08_03.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_03.png)'
- en: 'Figure 8.3: Creating a PR'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3：创建PR
- en: Once the PR is created and the reviewers are defined, each reviewer will be
    able to analyze the code and decide whether it is healthy enough to be in the
    master branch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了PR并定义了审阅者，每个审阅者都将能够分析代码并决定它是否足够健康，可以放入主分支。
- en: 'The following screenshot shows a way to check the code, by using the compare
    tool to analyze the change in the **WWTravelClub** code:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用比较工具分析**WWTravelClub**代码更改以检查代码的方法：
- en: '![Interface gráfica do usuário, Texto, Aplicativo, Email  Descrição gerada
    automaticamente](img/B19820_08_04.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_04.png)'
- en: 'Figure 8.4: Analyzing the PR'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4：分析PR
- en: 'Once all approvals are done, you will be able to safely merge the code to the
    master branch, as you can see in the following screenshot. To merge the code,
    you will need to click on **Complete merge**. It is important to mention that
    you can also do this in Visual Studio, which has a better user interface. If the
    CI trigger is enabled in the WWTravelClub project, as we will show in this chapter,
    Azure DevOps will start a build pipeline:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有审批完成，你将能够安全地将代码合并到主分支，正如你在下面的截图中所见。要合并代码，你需要点击**完成合并**。重要的是要提到，你也可以在Visual
    Studio中这样做，它有一个更好的用户界面。如果WWTravelClub项目启用了CI触发器，正如我们将在本章中展示的，Azure DevOps将启动一个构建管道：
- en: '![Interface gráfica do usuário, Texto, Aplicativo, Email  Descrição gerada
    automaticamente](img/B19820_08_05.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_05.png)'
- en: 'Figure 8.5: Merging the PR'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5：合并PR
- en: Without a process like this, there is a great chance of having a master branch
    with a lot of bad code, and this code being deployed there may cause damage together
    with CD. A code review is an excellent practice in CI/CD scenarios, and it is
    considered a wonderful practice to create good quality software in general.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 没有这样的流程，主分支中很可能会有很多糟糕的代码，并且这些代码部署到那里可能会与CD一起造成损害。代码审查在CI/CD场景中是一种优秀的实践，并且通常被认为是一种创建高质量软件的绝佳实践。
- en: The challenge that you need to focus on here is guaranteeing that only entire
    features will appear to your end users. You can use the **feature flag** principle
    to solve this, which is a technique that makes sure only features that are ready
    are presented to end users.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要关注这里的挑战是确保只有完整的功能会出现在你的最终用户面前。你可以使用**功能标志**原则来解决这个问题，这是一种确保只有准备就绪的功能呈现给最终用户的技巧。
- en: In the **Feature Flag** or **Feature Toggle** technique, you must create a solution
    that has, in each feature, the possibility to test it in a setup to see whether
    it is enabled or not. According to this, all the functionalities will be presented
    to the user.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在**功能标志**或**功能切换**技术中，你必须创建一个解决方案，在每个功能中都有可能在设置中测试它，以查看它是否启用。根据这一点，所有功能都将向用户展示。
- en: It is worth mentioning that to control feature availability in an environment,
    feature flags are much safer than using branching/PRs. Both have their place,
    but PRs are about controlling the quality of code at the CI stage, and feature
    flags are for controlling feature availability at the CD stage.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，为了在一个环境中控制功能可用性，功能标志比使用分支/PRs要安全得多。两者都有其位置，但PRs是关于在CI阶段控制代码质量，而功能标志是关于在CD阶段控制功能可用性。
- en: Again, we are not talking about CI/CD as a *tool* but as a *process*, to be
    defined and used every single time you need to deliver code for production.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们不是在谈论CI/CD作为一个*工具*，而是在谈论一个*过程*，每次你需要为生产交付代码时都需要定义和使用。
- en: An unstable solution for testing
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一个不稳定的测试解决方案
- en: If you have already mitigated the two other risks presented in this section,
    you may find it uncommon to have bad code after CI/CD. It is true that the worries
    presented earlier will certainly reduce if you work with a multi-stage scenario
    and PRs before pushing to the final stage. But the risk of having unstable code,
    especially when it comes to business logic rules, remains even if you apply all
    the recommendations we will discuss later.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经缓解了本节中提到的其他两种风险，你可能会发现CI/CD之后出现糟糕的代码是不常见的。确实，如果你在推送到最后阶段之前与多阶段场景和PRs一起工作，之前提出的担忧肯定会减少。但即使你应用了我们后面将要讨论的所有建议，不稳定代码的风险，尤其是在业务逻辑规则方面，仍然存在。
- en: But is there a way to accelerate the evaluation of a release while being sure
    that this new release is ready for your stakeholders’ tests? Yes, there is! Technically,
    the way you can do so is by automating unit and functional testing. This technique
    is explained in more detail in *Chapter 9*, *Testing Your Enterprise Application*.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 但有没有一种方法可以在确保新版本已准备好供利益相关者测试的同时加速发布评估？是的，有！从技术上讲，你可以这样做的方法是通过自动化单元和功能测试。这种技术在第9章“测试您的企业应用程序”中进行了更详细的解释。
- en: However, it is worth saying that it is impracticable to automate every single
    part of a piece of software, considering the efforts needed to do so. Besides,
    the maintenance of automation can be more expensive in scenarios where the user
    interface or the business rules change a lot. Although this is a tough decision,
    as a software architect, you must always incentivize the usage of automated testing.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，值得指出的是，考虑到实现这一目标所需的努力，自动化的每一个部分都是不切实际的。此外，在用户界面或业务规则变化很大的场景中，自动化的维护可能更加昂贵。尽管这是一个艰难的决定，但作为一个软件架构师，你必须始终鼓励使用自动化测试。
- en: 'To exemplify it, let us have a look at the following screenshot, which shows
    the unit and functional test samples for WWTravelClub, created by an Azure DevOps
    project template:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了举例说明，让我们看一下以下屏幕截图，它显示了由Azure DevOps项目模板创建的WWTravelClub的单元和功能测试样本：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_08_06.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_06.png)'
- en: 'Figure 8.6: Unit and functional tests projects'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.6：单元和功能测试项目
- en: There are some architectural patterns, such as SOLID, presented in *Chapter
    6*, and quality assurance approaches, such as peer review, that will give you
    better results than software testing. However, these approaches do not invalidate
    automation practice. The truth is that all of them will be useful for getting
    a stable solution, especially when you run a CI scenario. In this environment,
    the best thing you can do is to detect errors and incorrect behaviors as fast
    as you can. Both unit and functional tests, as shown earlier, will help you with
    this.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6章中介绍了一些架构模式，如SOLID，以及一些质量保证方法，如同行评审，这些方法可以比软件测试提供更好的结果。然而，这些方法并不否定自动化实践。事实是，所有这些都将有助于获得稳定的解决方案，尤其是在你运行CI场景时。在这种情况下，你能做的最好的事情就是尽可能快地检测错误和不正确的行为。正如之前所展示的，单元测试和功能测试都将帮助你做到这一点。
- en: 'Unit tests will help you a lot in discovering business logic errors before
    deployment, during the build pipeline. For instance, in the following screenshot
    from the WWTravelClub build process, you will find a simulated error that canceled
    the build, since the unit test did not pass:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试将在部署前，在构建管道期间帮助你大量发现业务逻辑错误。例如，在以下来自WWTravelClub构建过程的屏幕截图，你会找到一个模拟错误，它取消了构建，因为单元测试没有通过：
- en: Certain free services on Azure may be deactivated due to the possibility of
    misuse. However, you have the option to request the reactivation of these services
    by submitting a request.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由于可能存在滥用风险，Azure上的一些免费服务可能会被停用。然而，您可以通过提交请求来选择重新激活这些服务。
- en: '![](img/B19820_08_07.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_07.png)'
- en: 'Figure 8.7: Unit test result'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.7：单元测试结果
- en: The way to get this error is quite simple. You need to code something that does
    not respond according to what the unit tests are checking. Once you commit it,
    assuming you have the trigger for CD on, you will build the code in the pipeline.
    So after the build of the code, the unit tests will run. If the code does not
    match the tests anymore, you will get an error.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 获取这个错误的方法相当简单。您需要编写一些代码，这些代码不会根据单元测试进行检查。一旦您提交它，假设您已经开启了CD触发器，您将在管道中构建代码。因此，在代码构建之后，单元测试将会运行。如果代码不再匹配测试，您将得到一个错误。
- en: 'The following screenshot shows an error during the functional tests in the
    **Development/Tests** stage of the WWTravelClub project. In this instance, the
    **Development/Tests** environment has a bug that was rapidly detected by functional
    tests:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了WWTravelClub项目在**开发/测试**阶段的**功能测试**中出现的错误。在这个例子中，**开发/测试**环境有一个错误，功能测试迅速检测到了这个错误：
- en: '![](img/B19820_08_08.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_08.png)'
- en: 'Figure 8.8: Functional test result'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.8：功能测试结果
- en: 'But this is not the only good thing about applying functional tests during
    CI/CD. Let us look at the following screenshot from the **Releases** pipeline
    interface in Azure DevOps. If you look at **Release-9**, you will realize that,
    since this error happened after the publication in the **Development/Tests** environment,
    the multi-stage environment will protect the other stages of the wrong deployment,
    especially the WWTravelClub production stage:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 但在CI/CD过程中应用功能测试的好处不止于此。让我们看看以下从Azure DevOps的**发布**管道界面中的截图。如果您查看**Release-9**，您会意识到，由于这个错误是在**开发/测试**环境发布之后发生的，多阶段环境将保护错误部署的其他阶段，特别是WWTravelClub的生产阶段：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_08_09.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B19820_08_09.png)'
- en: 'Figure 8.9: Multi-stage environment protection'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.9：多阶段环境保护
- en: The key point for success in the CI process is to think about it as a useful
    tool to accelerate the delivery of software and to not forget that a team always
    needs to deliver value to its end users. With this approach, the techniques presented
    earlier will provide incredible ways to achieve the results that your team aims
    for.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: CI过程中成功的关键点是将其视为一个有用的工具，以加速软件的交付，并且不要忘记团队始终需要为其最终用户提供价值。采用这种方法，前面提出的技巧将提供实现团队目标结果的惊人方式。
- en: Continuous feedback
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续反馈
- en: Once you have a solution that runs perfectly in the deployment scenario described
    in the previous section, feedback will be essential for your team to understand
    the results of the release and how the version works for customers. To get this
    feedback, there are some tools that can help both developers and customers, bringing
    them together to fast-track the process of feedback.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您拥有在前一节描述的部署场景中运行完美的解决方案，反馈对于您的团队理解发布结果以及版本如何为顾客工作至关重要。为了获取这些反馈，有一些工具可以帮助开发者和顾客，将他们聚集在一起以加速反馈过程。
- en: The main purpose of continuous feedback is to enable developers to get information
    about the application running in production, enabling the team to improve the
    infrastructure of the environment deployed and, at the same time, detect improvements
    that can be made in the source code and user interface.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 持续反馈的主要目的是让开发者能够获取有关在生产环境中运行的应用程序的信息，使团队能够改进部署的环境基础设施，同时，检测出可以在源代码和用户界面中进行的改进。
- en: Tools to facilitate DevOps implementation
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 便于DevOps实施的工具
- en: Considering that DevOps is a philosophy, there are many tools that can be used
    to help you with its implementation. The following topics will present some of
    the most-used ones in a Microsoft environment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到DevOps是一种哲学，有许多工具可以帮助您实施它。以下主题将介绍在Microsoft环境中使用的一些最常用的工具。
- en: Azure DevOps
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure DevOps
- en: As soon as you start working with a platform such as Azure DevOps, enabling
    CI/CD will be easy when it comes to clicking on the options to do so. So technology
    is not the Achilles’ heel for implementing this process.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您开始使用像Azure DevOps这样的平台，在点击相应的选项时开启CI/CD将变得容易。所以技术并不是实施这一过程的阿喀琉斯之踵。
- en: 'The following screenshot shows an example of how easy it is to turn on CI/CD
    using the Azure DevOps WWTravelClub pipeline. By clicking in the **Pipelines**
    and editing it, you will be able to set a trigger that enables CI/CD after some
    clicks:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用Azure DevOps WWTravelClub管道开启CI/CD的示例，非常简单。通过点击**管道**并编辑它，您将能够设置一个触发器，在几次点击后启用CI/CD：
- en: '![A screenshot of a computer  Description automatically generated](img/B19820_08_10.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![计算机截图，描述自动生成](img/B19820_08_10.png)'
- en: 'Figure 8.10: Enabling the CI trigger'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.10：开启CI触发器
- en: CI/CD will help you solve some problems. For instance, it will force you to
    test your code, since you will need to commit the changes faster so that other
    developers can make use of the code you are programming.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD将帮助您解决一些问题。例如，它将迫使您测试您的代码，因为您需要更快地提交更改，以便其他开发者可以使用您正在编写的代码。
- en: Conversely, you will not do CI/CD just by enabling a CI build in Azure DevOps.
    For sure, you will turn on the possibility of starting a build as soon as you
    get a commit done and the code is complete, but this is far from saying you have
    CI/CD available in your solution.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，您不会仅仅通过在Azure DevOps中开启CI构建来执行CI/CD。当然，您会在提交完成并且代码完整后立即开启构建的可能性，但这远不能说明您在解决方案中已经有了CI/CD。
- en: The reason you, as a software architect, need to worry a bit more about it is
    related to a real understanding of what DevOps is. The need to deliver value to
    the end user will always be a good way to decide how the development life cycle
    will work. So even if turning on CI/CD is easy, what is the real business impact
    of this feature being enabled for your end users? Once you have all the answers
    to this question and you know how to reduce the risks of its implementation, then
    you will be able to say that you have a CI/CD process implemented.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件架构师，您需要对此多加关注的原因与对DevOps的真正理解有关。向最终用户提供价值始终是决定开发生命周期如何运作的好方法。因此，即使开启CI/CD很简单，但这一功能对您的最终用户真正产生的业务影响是什么？一旦您对这个问题的所有答案都弄清楚了，并且您知道如何降低其实施的风险，那么您就可以说您已经实施了一个CI/CD流程。
- en: CI/CD is a principle that will make DevOps work better and faster. However,
    DevOps can live without it, if you are not sure if your process is mature enough
    to enable code to be continuously delivered.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: CI/CD是一个原则，它将使DevOps工作得更好、更快。然而，如果您的流程还不够成熟以启用代码的持续交付，DevOps可以没有它而生存。
- en: Moreover, if you turn on CI/CD in a team that is not mature enough to deal with
    its complexity, you will probably cause a bad understanding of DevOps, since you
    will start incurring some risks while deploying your solution. The point is that
    CI/CD is not a prerequisite for DevOps.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果您在一个不够成熟以处理其复杂性的团队中开启CI/CD，您可能会在部署解决方案时产生对DevOps的误解，因为您将开始承担一些风险。关键是CI/CD不是DevOps的先决条件。
- en: When you have CI/CD enabled, you can make things faster in DevOps. However,
    you can practice DevOps without it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当您启用了CI/CD，您可以在DevOps中使事情变得更快。然而，您可以在没有它的情况下实践DevOps。
- en: 'Deployments and other release artifacts are added to different pipelines, called
    release pipelines, to decouple them from build-related artifacts. With Release
    Pipelines, you cannot edit a `.yaml` file, but you will work with a graphic interface,
    as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 部署和其他发布工件被添加到不同的管道中，这些管道被称为发布管道，以将它们与构建相关工件解耦。使用发布管道，您不能编辑`.yaml`文件，但您将使用图形界面进行操作，如下所示：
- en: Click the **Releases** left menu tab to create a new **Release Pipeline**. As
    soon as you click **Add a new pipeline**, you will be prompted to add the first
    task of the first pipeline stage. In fact, the whole release pipeline is composed
    of different stages, each grouping sequences of tasks. While each stage is just
    a sequence of tasks, the stages diagram can branch, and we can add several branches
    after each stage. This way, we can deploy to different platforms that each require
    different tasks. In our simple example, we will use a single stage.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单的**发布**选项卡以创建一个新的**发布管道**。一旦点击**添加新管道**，系统会提示您添加第一个管道阶段的第一个任务。实际上，整个发布管道由不同的阶段组成，每个阶段都包含一系列任务。虽然每个阶段只是一系列任务，但阶段图可以分支，我们可以在每个阶段之后添加几个分支。这样，我们可以部署到需要不同任务的不同平台。在我们的简单示例中，我们将使用单个阶段。
- en: Select the **Azure App Service Deployment** task. As soon as you add this task,
    you will be prompted to fill in the missing information.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Azure App Service 部署**任务。一旦添加此任务，系统会提示您填写缺失的信息。
- en: Select your subscription, and then, if an **Authorization** button appears,
    click it to authorize Azure Pipelines to access your subscription. Then, select
    **Windows** as the deployment platform, and finally, select the app service you
    created from the **App service name** drop-down list. Task settings are automatically
    saved while you write them, so you just need to click the **Save** button for
    the whole pipeline.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的订阅，然后，如果出现**授权**按钮，点击它以授权 Azure Pipelines 访问您的订阅。然后，选择**Windows**作为部署平台，并最后从**应用服务名称**下拉列表中选择您创建的应用服务。在您编写任务设置时，任务设置会自动保存，因此您只需点击**保存**按钮即可保存整个管道。
- en: 'Now, we need to connect this pipeline to a source artifact. Click the **Add
    Artifact** button and then select **Build** as the source type, because we need
    to connect the new release pipeline with the ZIP file created by our build pipeline.
    A settings window appears:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将此管道连接到一个源工件。点击**添加工件**按钮，然后选择**构建**作为源类型，因为我们需要将新的发布管道与构建管道创建的 ZIP 文件连接起来。会出现一个设置窗口：
- en: '![](img/B19820_08_11.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_11.png)'
- en: 'Figure 8.11: Defining the artifact to publish'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.11：定义要发布的工件
- en: Select our previous build pipeline from the drop-down list, and keep **Latest**
    as the version. Accept the suggested name under **Source alias**.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择您之前的构建管道，并将版本保留为**最新**。接受**源别名**下建议的名称。
- en: 'Our release pipeline is ready and can be used as-is. The image of the source
    artifact you just added contains a trigger icon in its top-right corner, as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的发布管道已准备就绪，可以直接使用。您刚刚添加的源工件图像在其右上角有一个触发图标，如下所示：
- en: '![](img/B19820_08_12.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_12.png)'
- en: 'Figure 8.12: Artifact ready to publish'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.12：准备发布的工件
- en: 'If you click on the trigger icon, you are given the option to automatically
    trigger the release pipeline as soon as a new build is available:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您点击触发图标，您可以选择在新构建可用时自动触发发布管道：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B19820_08_13.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，团队  自动生成描述](img/B19820_08_13.png)'
- en: 'Figure 8.13: Enabling the continuous deployment trigger'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.13：启用持续部署触发器
- en: Keep it disabled; we can enable it after we have completed and manually tested
    the release pipeline.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持禁用状态；我们可以在完成并手动测试发布管道后启用它。
- en: 'As we mentioned earlier, in preparation for an automatic trigger, we need to
    add a human approval task before the application is deployed. Let’s add it with
    the following steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，为了准备自动触发，在应用程序部署之前，我们需要添加一个人工审批任务。让我们按照以下步骤添加它：
- en: 'Click the three dots on the right of the **Stage 1** header:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**阶段1**标题右侧的三个点：
- en: '![](img/B19820_08_14.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_14.png)'
- en: 'Figure 8.14: Adding human approval to a stage'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.14：将人工审批添加到阶段
- en: Then, select **Add an agentless job**. Once the agentless job has been added,
    click the **Add** button and add a **Manual intervention** task. The following
    screenshot shows the **Manual intervention** settings:![](img/B19820_08_15.png)
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**添加无代理作业**。一旦添加了无代理作业，点击**添加**按钮并添加一个**手动干预**任务。以下截图显示了**手动干预**设置：![](img/B19820_08_15.png)
- en: 'Figure 8.15: Configuring human approval for a stage'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.15：配置阶段的审批
- en: Add instructions for the operator, and select your account in the **Notify users**
    field.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 添加操作员的说明，并在**通知用户**字段中选择您的账户。
- en: 'Now, drag the whole **Agentless job** with the mouse, and place it before the
    application deployment task. It should look like this:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用鼠标拖动整个**无代理作业**，并将其放置在应用程序部署任务之前。它应该看起来像这样：
- en: '![](img/B19820_08_16.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_16.png)'
- en: 'Figure 8.16: Setting the human approval deployment tasks list'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.16：设置人工审批部署任务列表
- en: Finished! Click the **Save** button in the top-left corner to save the pipeline.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成！点击左上角的**保存**按钮以保存管道。
- en: 'Now, everything is ready to create our first automatic release. And to do so,
    a new release can be prepared and deployed as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切准备就绪，可以创建我们的第一个自动发布版本。为此，可以按照以下步骤准备和部署新版本：
- en: 'Click the **Create release** button to start the creation of a new release,
    as shown in the following screenshot:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建发布**按钮以开始创建新版本，如下面的截图所示：
- en: '![](img/B19820_08_17.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_17.png)'
- en: 'Figure 8.17: Creating a new release'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.17：创建新版本
- en: 'Verify that the **Source alias** is the last available one, add a **Release
    description**, and then click **Create**. In a short time, you should receive
    an email for release approval. Click the link it contains and go to the approval
    page:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认**源别名**是最后一个可用的，添加**发布描述**，然后点击**创建**。在短时间内，你应该会收到一个用于发布审批的电子邮件。点击其中的链接并转到审批页面：
- en: '![](img/B19820_08_18.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_18.png)'
- en: 'Figure 8.18: Approving a release'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.18：批准发布
- en: 'Click the **Approve** button to approve the release. Wait for the deployment
    to complete. You should have all the tasks successfully completed, as shown in
    the following screenshot:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**批准**按钮以批准发布。等待部署完成。你应该看到所有任务都成功完成，如下面的截图所示：
- en: '![](img/B19820_08_19.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_19.png)'
- en: 'Figure 8.19: Release deployed'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.19：已部署的发布
- en: You have run your first successful release pipeline!
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经成功运行了第一个发布管道！
- en: In a real-life project, the release pipeline would contain more tasks. In fact,
    applications (before being deployed in the actual production environment) are
    deployed in a **staging environment** where they are beta-tested. Hence, after
    this first deployment, there would probably be some manual tests, manual authorization
    for the deployment in production, and the final deployment in production.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际项目中，发布管道将包含更多任务。实际上，应用程序（在部署到实际生产环境之前）是在**预发布环境**中部署的，在那里它们进行beta测试。因此，在这次首次部署之后，可能会进行一些手动测试，手动授权生产部署，以及最终的生产部署。
- en: 'Considering the multistage scenario, you can set up the pipeline in a way where
    only with defined authorizations will you be able to move from one stage to another:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到多阶段场景，你可以设置管道，使得只有通过定义的授权才能从一个阶段移动到另一个阶段：
- en: '![](img/B19820_08_20.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_20.png)'
- en: 'Figure 8.20: Defining pre-deployment conditions'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.20：定义预部署条件
- en: As you can see in the preceding screenshot, it is quite simple to set up pre-deployment
    conditions, and there is more than a single option to customize the authorization
    method. This allows you to refine the CD approach, exactly meeting the needs of
    the project you are dealing with.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，设置预部署条件非常简单，并且有多种选项可以自定义授权方法。这允许你细化持续交付方法，正好满足你正在处理的项目需求。
- en: 'The following screenshot shows the options provided by Azure DevOps for pre-deployment
    approval. You can define the people who can approve the stage and set policies
    for them, that is, revalidate the approver identity before completing the process.
    You, as a software architect, will need to identify the configuration that fits
    the project you are creating with this approach:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了Azure DevOps提供的预部署审批选项。你可以定义可以批准阶段的个人，并为他们设置策略，即在进行过程之前重新验证审批者身份。作为软件架构师，你需要确定适合你使用这种方法创建的项目配置：
- en: '![](img/B19820_08_21.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_21.png)'
- en: 'Figure 8.21: Pre-deployment approval options'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.21：预部署审批选项
- en: It is worth mentioning that although this approach is far better than a single-stage
    deployment, a DevOps pipeline will direct you, as a software architect, to another
    stage of monitoring. App Insights, which will be presented later, is an incredible
    tool for this.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，尽管这种方法比单阶段部署要好得多，但DevOps管道会引导你，作为软件架构师，进入另一个监控阶段。稍后将要介绍的App Insights是这一阶段的强大工具。
- en: GitHub
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub
- en: Since GitHub’s acquisition by Microsoft, many features have evolved and new
    options have been delivered, enhancing the power of this powerful tool. These
    integrations can be explored using the Azure portal and, particularly, GitHub
    Actions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 自从GitHub被微软收购以来，许多功能已经演变，并提供了新的选项，增强了这个强大工具的能力。这些集成可以通过Azure门户进行探索，尤其是GitHub
    Actions。
- en: '**GitHub Actions** is a set of tools that helps with the automation of software
    development. It enables a fast CI/CD service on any platform, using YAML files
    to define its workflows. You can consider GitHub Actions a new approach presented
    by Microsoft as a substitute for Azure DevOps Pipelines. You can automate any
    GitHub event using GitHub Actions, with thousands of actions available on GitHub
    Marketplace:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Actions**是一套帮助自动化软件开发工具的工具。它能够在任何平台上启用快速的CI/CD服务，使用YAML文件来定义其工作流程。您可以将GitHub
    Actions视为微软提出的一种新方法，作为Azure DevOps Pipelines的替代品。您可以使用GitHub Actions自动化任何GitHub事件，GitHub
    Marketplace上有数千个动作可供选择：'
- en: '![](img/B19820_08_22.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_22.png)'
- en: 'Figure 8.22: GitHub Actions'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.22：GitHub Actions
- en: Creating a workflow to build a .NET web app is quite simple via the GitHub Actions
    interface. As you can see in the preceding screenshot, there are some workflows
    that have already been created to help us out.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 通过GitHub Actions界面创建构建.NET Web应用程序的工作流程相当简单。如您在先前的屏幕截图中所见，已经创建了一些工作流程来帮助我们。
- en: 'The YAML we have below was generated by clicking the **Set up this workflow**
    option in the **Configure** options under **.NET**:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的YAML是通过在**.NET**下的**配置**选项中点击**设置此工作流程**选项生成的：
- en: '[PRE0]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'With the adaptations made below, it can build the application specifically
    created for this chapter:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下所做的调整，它可以构建专门为这一章创建的应用程序：
- en: '[PRE1]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'As you can see below, once the script is updated, it is possible to check the
    result of the workflow. It is also possible to enable CD if you want to. It is
    just a matter of defining the correct script:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，一旦脚本更新，就可以检查工作流程的结果。如果您想的话，也可以启用CD。这只是一个定义正确脚本的问题：
- en: '![](img/B19820_08_23.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_23.png)'
- en: 'Figure 8.23: Simple application compilation using GitHub Actions'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.23：使用GitHub Actions进行简单应用程序编译
- en: Microsoft provides documentation specifically covering Azure and GitHub integration.
    Check this out at [https://docs.microsoft.com/en-us/azure/developer/github](https://docs.microsoft.com/en-us/azure/developer/github).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 微软提供了专门涵盖Azure和GitHub集成的文档。请查看[https://docs.microsoft.com/en-us/azure/developer/github](https://docs.microsoft.com/en-us/azure/developer/github)。
- en: As a software architect, you need to understand which tool best fits your development
    team. Azure DevOps has a wonderful environment for enabling CI/CD, and so does
    GitHub. The key point here is that no matter the option you decide on, there are
    risks and challenges that you will face once CI/CD is enabled. Let’s check them
    out in the next topic.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件架构师，您需要了解哪种工具最适合您的开发团队。Azure DevOps提供了一个出色的环境来启用CI/CD，GitHub也是如此。关键点是，无论您选择哪种选项，一旦启用CI/CD，您都将面临风险和挑战。让我们在下一个主题中探讨这些问题。
- en: Application Insights
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序洞察
- en: '**Application Insights** is a feature that any software architect must have
    for continuous feedback on their solution. Application Insights is part of **Azure
    Monitor**, a wider suite of monitoring features that also includes alerting, dashboards,
    and workbooks. As soon as you connect your app to it, you start receiving feedback
    on each request made to the software. This enables you to monitor not only the
    requests made but also your database performance, the errors that the application
    may be suffering from, and the calls that take the most time to process.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序洞察**是任何软件架构师都必须拥有的功能，以便对他们的解决方案进行持续反馈。应用程序洞察是**Azure Monitor**的一部分，这是一个更广泛的监控功能套件，还包括警报、仪表板和工作簿。一旦您将应用程序连接到它，您就开始接收对每个软件请求的反馈。这使得您不仅可以监控请求，还可以监控数据库性能、应用程序可能遇到的错误以及处理时间最长的调用。'
- en: Obviously, you will have costs relating to having this tool plugged into your
    environment, but the facilities that the tool provides will be worth it. It might
    be worth noting that, for simple applications, it could even be free because you
    pay for data ingested, for which there is a free quota. Aside from financial cost,
    you need to understand that there is a very small performance cost, since all
    the requests to store data in **Application Insights** run in a separate thread.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，您将会有与这个工具集成到您的环境中的相关成本，但这个工具提供的功能将是值得的。值得注意的是，对于简单的应用程序，这甚至可能是免费的，因为您只需为导入的数据付费，而对于这部分数据，有一个免费配额。除了财务成本之外，您还需要了解，由于所有存储在**应用程序洞察**中的请求数据都在一个单独的线程中运行，因此性能成本非常小。
- en: Several services, such as App Services, Functions, and so on, will give you
    the option to add Application Insights as part of the initial creation process,
    so you may have already created it while following along with this book.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 几个服务，如应用服务、函数等，将为您提供在初始创建过程中添加应用程序洞察的选项，因此您可能已经在阅读这本书的过程中创建了它。
- en: 'The following screenshot shows how easily you can create a tool in your environment:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了您如何轻松地在环境中创建一个工具：
- en: '![Interface gráfica do usuário, Texto, Aplicativo, Email  Descrição gerada
    automaticamente](img/B19820_08_24.png)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_24.png)'
- en: 'Figure 8.24: Creating Application Insights resources in Azure'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.24：在Azure中创建应用程序洞察资源
- en: 'For instance, let’s suppose you need to analyze the requests that are taking
    more time in your application. The process of attaching Application Insights to
    your web app is quite simple: it can be done as soon as you set it up. If you
    are not sure whether Application Insights is configured for your web app, you
    can find out using the Azure portal. Navigate to **App Services** and look at
    the **Application Insights** settings, as shown in the following screenshot:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您需要分析应用程序中耗时较长的请求。将应用程序洞察附加到您的Web应用的过程相当简单：您可以在设置时立即完成。如果您不确定应用程序洞察是否已为您的Web应用配置，您可以使用Azure门户进行查找。导航到**应用服务**并查看**应用程序洞察**设置，如下面的截图所示：
- en: '![](img/B19820_08_25.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_25.png)'
- en: 'Figure 8.25: Enabling Application Insights in App Services'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.25：在应用服务中启用应用程序洞察
- en: The interface will give you the opportunity to create or attach an already-created
    monitoring service to your web app. You can connect more than one web app to the
    same **Application Insights** component.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 界面将为您提供创建或附加已创建的监控服务到您的Web应用的机会。您可以将多个Web应用连接到同一个**应用程序洞察**组件。
- en: 'The following screenshot shows how to add a web app to an already-created **Application
    Insights** resource:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了如何将一个Web应用添加到已创建的**应用程序洞察**资源中：
- en: '![](img/B19820_08_26.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_26.png)'
- en: 'Figure 8.26: Enabling App Insights in App Services'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.26：在应用服务中启用应用洞察
- en: 'Once you have Application Insights configured for your web app, you will see
    the following screen in App Services:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您为您的Web应用配置了应用程序洞察，您将在App Services中看到以下屏幕：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_08_27.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_27.png)'
- en: 'Figure 8.27: Application Insights in App Services'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.27：应用服务中的应用洞察
- en: 'Once it is connected to your solution, the data collection will happen continuously,
    and you will see the results in the dashboard provided by the component. You can
    find this screen in two places:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它连接到您的解决方案，数据收集将连续进行，您将在组件提供的仪表板上看到结果。您可以在两个地方找到这个屏幕：
- en: In the same place where you configured Application Insights, inside the web
    app portal
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您配置应用程序洞察的同一位置，在Web应用门户内
- en: In the Azure portal, after navigating through the Application Insights resource
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Azure门户中，导航到应用程序洞察资源后
- en: '![](img/B19820_08_28.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_28.png)'
- en: 'Figure 8.28: Application Insights in action'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.28：应用洞察在实际中的应用
- en: This dashboard gives you an idea of failed requests, server response time, and
    server requests. You can also turn on the availability check, which will make
    requests to your selected URL from any of the Azure data centers.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此仪表板为您提供了关于失败请求、服务器响应时间和服务器请求的概览。您还可以开启可用性检查，这将从Azure的任何数据中心向您选择的URL发送请求。
- en: The beauty of Application Insights is in how deeply it analyzes your system.
    In the following screenshot, for instance, it gives you feedback on the number
    of requests made on the website. You can analyze this feedback by ranking the
    requests by the ones that took more time to process or the ones that were called
    more often.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: Application Insights 的美在于它如何深入分析你的系统。例如，在下面的截图中，它提供了关于网站请求数量的反馈。你可以通过按处理时间较长或调用频率较高的请求对反馈进行分析。
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_08_29.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_08_29.png)'
- en: 'Figure 8.29: Analyzing app performance using Application Insights'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.29：使用 Application Insights 分析应用程序性能
- en: Considering this view can be filtered in different ways and you receive the
    information just after it happens in your web app, this is certainly a tool that
    defines continuous feedback. This is one of the best ways you can use DevOps principles
    to achieve exactly what your customer needs.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这个视图可以以不同的方式过滤，并且你可以在你的网络应用程序中立即收到信息，这确实是一个定义持续反馈的工具。这是你可以使用 DevOps 原则来实现客户确切需求的最佳方式之一。
- en: Test and Feedback
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试和反馈
- en: Another useful tool in the process of continuous feedback is the **Test and
    Feedback** tool, designed by Microsoft to help product owners and quality assurance
    users with the process of analyzing new features.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续反馈的过程中，另一个有用的工具是**测试和反馈**工具，由微软设计，旨在帮助产品所有者和质量保证用户分析新功能的过程。
- en: 'Using Azure DevOps, you can ask for feedback from your team by selecting an
    option inside each work item, as you can see in the following screenshot:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps，你可以通过在每个工作项内部选择一个选项来向你的团队请求反馈，如下面的截图所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B19820_08_30.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  自动生成的描述](img/B19820_08_30.png)'
- en: 'Figure 8.30: Requesting feedback using Azure DevOps'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.30：使用 Azure DevOps 请求反馈
- en: Once someone receives a feedback request, they can use the **Test and Feedback**
    tool to analyze and give the correct feedback to the team. They will be able to
    connect the tool to your Azure DevOps project, giving you more features while
    analyzing the feedback request.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦有人收到反馈请求，他们可以使用**测试和反馈**工具来分析和向团队提供正确的反馈。他们可以将工具连接到你的 Azure DevOps 项目，在分析反馈请求的同时提供更多功能。
- en: You can download this tool from [https://marketplace.visualstudio.com/items?itemName=ms.vss-exploratorytesting-web](https://marketplace.visualstudio.com/items?itemName=ms.vss-exploratorytesting-web).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从[https://marketplace.visualstudio.com/items?itemName=ms.vss-exploratorytesting-web](https://marketplace.visualstudio.com/items?itemName=ms.vss-exploratorytesting-web)下载此工具。
- en: 'This tool is a web browser extension that you will need to install before use.
    The following screenshot shows how to set up an Azure DevOps project URL for the
    **Test and Feedback** tool:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具是一个需要在使用前安装的网页浏览器扩展。下面的截图显示了如何为**测试和反馈**工具设置 Azure DevOps 项目 URL：
- en: '![](img/B19820_08_31.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_31.png)'
- en: 'Figure 8.31: Connecting Test and Feedback to an Azure DevOps organization'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.31：将测试和反馈连接到 Azure DevOps 组织
- en: 'The tool is quite simple. You can take screenshots, record a process, or even
    make a note. The following screenshot shows how easily you can write a message
    inside a screenshot:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 工具非常简单。你可以截图、记录一个过程，甚至做笔记。下面的截图显示了如何在截图内轻松地写消息：
- en: '![Graphical user interface  Description automatically generated](img/B19820_08_32.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面  自动生成的描述](img/B19820_08_32.png)'
- en: 'Figure 8.32: Giving feedback with the Test and Feedback tool'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.32：使用测试和反馈工具提供反馈
- en: 'The good thing is that you record all this analysis in a session timeline.
    As you can see in the next screenshot, you can have multiple pieces of feedback
    in the same session, which is good for the analysis process:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 好处在于你可以在会话时间线中记录所有这些分析。正如你在下一个截图中所看到的，你可以在同一个会话中拥有多个反馈项，这对分析过程很有帮助：
- en: '![](img/B19820_08_33.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_33.png)'
- en: 'Figure 8.33: Giving feedback with the Test and Feedback tool'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.33：使用测试和反馈工具提供反馈
- en: 'Once you have done the analysis and you are connected to Azure DevOps, you
    will be able to report a bug (as shown in the following screenshot), create a
    task, or even start a new test case:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了分析并且连接到 Azure DevOps，你将能够报告一个错误（如下面的截图所示），创建一个任务，甚至开始一个新的测试案例：
- en: '![](img/B19820_08_34.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_34.png)'
- en: 'Figure 8.34: Opening a bug in Azure DevOps'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.34：在 Azure DevOps 中打开一个错误
- en: The result of the bug created can be checked on the **Work items** board in
    Azure DevOps. It is worth mentioning that you do not need an Azure DevOps developer
    license to have access to this area of the environment. This enables you, as a
    software architect, to share this basic and useful tool with as many key users
    of the solution as you have.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在Azure DevOps的**工作项**板上检查创建的错误的后果。值得一提的是，你不需要Azure DevOps开发者许可证就可以访问这个环境区域。这使得你，作为软件架构师，能够将这个基本而有用的工具与尽可能多的解决方案关键用户共享。
- en: 'The following screenshot shows the bug created by the tool once you have connected
    it to your Azure DevOps project:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了将工具连接到你的Azure DevOps项目后创建的错误：
- en: '![](img/B19820_08_35.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_08_35.png)'
- en: 'Figure 8.35: New reported bug in Azure DevOps'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.35：Azure DevOps中新的报告错误
- en: It is important to have a tool like this to get good feedback on your project.
    But, as a software architect, you may have to find the best solutions to hasten
    the feedback process.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这样一个工具来获取你项目的好反馈是很重要的。但是，作为一名软件架构师，你可能需要找到最佳解决方案来加速反馈过程。
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned that DevOps is not only a bunch of techniques
    and tools used together to deliver software continuously but also a philosophy
    to enable continuous delivery of value to the end user of the project you are
    developing.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到DevOps不仅是一系列技术和工具的组合，用于持续交付软件，而且是一种哲学，旨在使你正在开发的项目的最终用户能够持续获得价值。
- en: Considering this approach, we saw how CI/CD and continuous feedback are essential
    to the purpose of DevOps. We also saw how Azure, Azure DevOps, GitHub, and Microsoft
    tools help you to achieve your goals.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到这种方法，我们看到了CI/CD和持续反馈对于DevOps目标的重要性。我们还看到了Azure、Azure DevOps、GitHub和Microsoft工具如何帮助你实现目标。
- en: The chapter also covered the importance of understanding when you can enable
    CI/CD in the software development life cycle, considering the risks and challenges
    you will take as a software architect once you decide to use it for your solution.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还涵盖了在软件开发生命周期中何时可以启用CI/CD的重要性，考虑到一旦你决定将其用于你的解决方案，作为软件架构师你将面临的风险和挑战。
- en: Additionally, the chapter introduced some solutions and concepts that can make
    this process easier, such as multi-stage environments, PR reviews, feature flags,
    peer reviews, and automated tests. Understanding these techniques and processes
    will enable you to guide your project toward safer behavior when it comes to CI/CD
    in a DevOps scenario.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，本章介绍了一些可以使此过程更简单的解决方案和概念，例如多阶段环境、PR审查、功能标志、同行评审和自动化测试。理解这些技术和流程将使你能够在DevOps场景中引导你的项目朝着更安全的行为发展，进行CI/CD。
- en: We also described *service design thinking* principles. Now, you should be able
    to analyze all the implications of these approaches for an organization, and you
    should be able to adapt pre-existing software development processes and hardware/software
    architectures to take advantage of the opportunities they offer.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还描述了*服务设计思维*原则。现在，你应该能够分析这些方法对于一个组织的影响，你应该能够调整现有的软件开发流程和硬件/软件架构，以利用它们提供的机会。
- en: We also explained the need for, and the techniques involved in, the automation
    of the software cycle, cloud hardware infrastructure configuration, and application
    deployment.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还解释了软件周期自动化、云硬件基础设施配置和应用程序部署的自动化需求和技术。
- en: Once you have implemented the examples shown, you should be able to use Azure
    Pipelines to automate infrastructure configuration and application deployment.
    This chapter elucidated this approach using WWTravelClub as an example, enabling
    CI/CD inside Azure DevOps, and using Application Insights and the Test and Feedback
    tool for both technical and functional feedback. In real life, these tools will
    enable you to understand the current behavior of the system you are developing
    more quickly, as you will have continuous feedback on it.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你实现了所展示的示例，你应该能够使用Azure Pipelines来自动化基础设施配置和应用程序部署。本章以WWTravelClub为例阐述了这种方法，在Azure
    DevOps内部实现CI/CD，并使用Application Insights和测试与反馈工具进行技术和功能反馈。在现实生活中，这些工具将使你能够更快地了解你正在开发的系统的当前行为，因为你将对其有持续的反馈。
- en: In the next chapter, we will see how automation for software testing works.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到软件测试自动化的工作方式。
- en: Questions
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is DevOps?
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是DevOps？
- en: What is continuous integration (CI)?
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是持续集成（CI）？
- en: What is continuous delivery (CD)?
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是持续交付（CD）？
- en: Can you have DevOps without CI/CD?
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 没有CI/CD可以实施DevOps吗？
- en: What are the risks of enabling CI/CD in a non-mature team?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个不成熟的团队中启用CI/CD有哪些风险？
- en: How can a multi-stage environment help CI/CD?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多阶段环境如何帮助CI/CD？
- en: How can automated tests help CI/CD?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 自动化测试如何帮助CI/CD？
- en: How can PRs help CI/CD?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PRs如何帮助CI/CD？
- en: Do PRs only work with CI/CD?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: PRs是否仅与CI/CD一起工作？
- en: What is continuous feedback?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是持续反馈？
- en: What is the difference between the build and release pipelines?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建和发布管道之间的区别是什么？
- en: What is the main purpose of Application Insights in the DevOps approach?
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在DevOps方法中，Application Insights的主要目的是什么？
- en: How can the Test and Feedback tool help in the process of DevOps?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试和反馈工具如何帮助DevOps流程？
- en: What is the main goal of service design thinking?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务设计思维的主要目标是什么？
- en: What is the preferred Azure tool for the automation of the whole application
    life cycle?
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 适用于整个应用程序生命周期自动化的首选Azure工具是什么？
- en: Learn more on Discord
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the authors, and learn about new releases – follow the QR code
    below:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的Discord社区——在那里您可以分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
- en: '![](img/QR_Code175081751210902046.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code175081751210902046.png)'
