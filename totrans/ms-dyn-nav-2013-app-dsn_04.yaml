- en: Chapter 4. Relationship Management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Relationship management software is typically a result of what ERP applications
    have achieved.
  prefs: []
  type: TYPE_NORMAL
- en: In earlier days, everyone had a rolodex on their desk with phone numbers and
    addresses and salespeople would always know by heart who was a good customer and
    which customers were always late paying or had bad margins.
  prefs: []
  type: TYPE_NORMAL
- en: The introduction of RM software completely changed that, allowing us to maintain
    all companies' contacts in a single place and analyze sales data very easily.
  prefs: []
  type: TYPE_NORMAL
- en: Relationship management has been part of Microsoft Dynamics since Version 2.0
    and was dramatically changed and improved in Version 3.0\. The current Microsoft
    Dynamics NAV RM software is mostly the same as in that version, except for the
    Microsoft Outlook integration that keeps changing in every version.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will deep dive into this module, which is very complete.
    After reading this chapter, you will have a good understanding of the concepts
    and how to maintain master data and analyze transaction data.
  prefs: []
  type: TYPE_NORMAL
- en: We will also perform some application changes in the relationship management
    part.
  prefs: []
  type: TYPE_NORMAL
- en: How companies work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In traditional accounting software, we differentiate customers and vendors as
    business relations for invoices, but companies have many more relations we would
    like to register in our system.
  prefs: []
  type: TYPE_NORMAL
- en: Also, a company or person can have multiple relations with our company. The
    best example is my relationship with Microsoft. As everyone, I use the software
    so I am a customer, both in my business and personal life. On the other hand,
    Microsoft hires me to teach workshops and do presentations, which makes me a vendor.
    As an MVP, I have a totally different relationship with them. They give me an
    award and invite me to special events and allow me to access the company store.
    They also ask for my advice in future versions, so to them, I am their consultant.
  prefs: []
  type: TYPE_NORMAL
- en: So one person or company can have different roles in RM. Microsoft Dynamics
    NAV is able to handle all that while maintaining a single point of data entry
    and maintenance.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike financial applications, RM is much more flexible. The functionality and
    rules of financial applications are defined by government regulations and are
    mandatory for companies to comply with. Companies are not forced to use RM but
    once implemented, everyone understands the benefits and never want to do without
    it.
  prefs: []
  type: TYPE_NORMAL
- en: Contacts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The starting point of the RM application is the **Contact** table. This is where
    we store the address, phone numbers, e-mail addresses, and so on of everyone we
    know.
  prefs: []
  type: TYPE_NORMAL
- en: When we open the **Contact list**, we see that companies and persons are grouped
    for an easy overview.
  prefs: []
  type: TYPE_NORMAL
- en: '![Contacts](img/0365EN_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cut-off text is not important for reference in this screenshot
  prefs: []
  type: TYPE_NORMAL
- en: As we learned in the previous chapters, a page in Microsoft Dynamics NAV is
    based on a single table, so that must mean that companies and persons are stored
    in the same table.
  prefs: []
  type: TYPE_NORMAL
- en: When we open the contact card, we can clearly see that this is the case. The
    **Type** field indicates whether the contact is a business or a person and whether
    the person belongs to a company. The **Company No.** field refers to a contact
    with type **Company**. This is a one-to-many relationship meaning that if a physical
    person has a relationship with more than one company, he or she needs to be maintained
    for each company with a relation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is from the contact card in Microsoft Dynamics NAV:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Contacts](img/0365EN_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s step through the tabs and look at some important fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No.**: This is a unique key value determined by a Number Series. Companies
    and persons have the same numbering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: This indicates whether this contact is a person or a company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Company Name**: When the contact is a person and connected to a company,
    it is automatically populated with that company''s name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: This is the name of the contact. If the contact is a person, we can
    click on the **AssistEdit** button next to the name to open the name details.
    The name is automatically broken down in to first, middle, and last name depending
    on the number of words we enter. However, if our contact has a more complex name
    like "Walter van den Broek", which is typical for Dutch people, the system is
    unable to break it down.![Contacts](img/0365EN_04_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Address**: Enter the street where the contact lives or has an office.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: It is always best practice to enter the postal address here since this will
    be used on all documents. For a visiting address, use the **Alternative Address**
    feature.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Post Code & City**: These fields are connected via the **Post Code** table
    and one can populate the other if that table is maintained, which is an optional
    feature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Most companies maintain the **Post Code** table for their country and manually
    enter the post codes for foreign countries. Most countries offer a post code/city
    list for sale or as a web service, which will speed up data entry and keep people
    from entering the wrong master data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Search Name**: This is automatically populated with the **Name** field and
    lets you search for contacts faster, as you can enter this field instead of the
    **No.** field when referencing to a contact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(Mobile) Phone, Fax**, and **Telex No.**: This is a reference to the phone
    and fax numbers of this company. The (mobile) phone field also allows you to start
    an interaction with this contact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sales Person**: This is the main salesperson for this contact. If this contact
    is promoted to a customer, the salespersons'' name will be printed on the order
    form and invoices.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Salutation Code**: This special field refers to how this contact should be
    addressed. The salutation code table allows you to build phrases such as "Dear
    Mrs. Brown". We''ll see more about salutation codes in segments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E-Mail**: This field contains the e-mail address of the contact. By pressing
    the **E-Mail** button [![Contacts](img/0365EN_04_04.jpg)], we can send an e-mail
    directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Homepage**: Here is where the URL of the contacts website goes. We can access
    the website by clicking on the **URL** button [![Contacts](img/0365EN_04_05.jpg)].'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Correspondence Type**: This field is used when we create a Microsoft Word
    document in an interaction. It indicates whether we send a hardcopy, e-mail, or
    fax.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Currency Code & VAT Registration No.**: When this contact is promoted to
    a customer or vendor, the currency code and VAT registration no. are inherited
    from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Territory Code**: This field can be used in segments to filter on geographic
    regions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Salutation codes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we perform mail merge, we want the letters to start nicely with "Dear Harry"
    or dear "Mrs. Brown". This can be done using salutation codes.
  prefs: []
  type: TYPE_NORMAL
- en: We can create as many codes as we like but a contact can only use one. This
    is the list in the CRONUS demo database.
  prefs: []
  type: TYPE_NORMAL
- en: '![Salutation codes](img/0365EN_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There is one salutation code for companies but most are for persons. When we
    look at the formulas for **Female Married** or **Unmarried**, we see this screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Salutation codes](img/0365EN_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can enter a formal and informal code. The salutation can have up to five
    variables pointing to **Job Title**, **First Name**, **Middle Name**, **Surname**,
    **Initials**, and **Company Name**.
  prefs: []
  type: TYPE_NORMAL
- en: When we look at the result for Karen Friske, it will be "Dear Ms. Karen Friske"
    or "Hi Karen".
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, we will look at how to create extra salutation types.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative addresses
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Like we said earlier in this chapter, it is best practice to use the address
    fields in the contact table for the postal address since this will be printed
    on all documents.
  prefs: []
  type: TYPE_NORMAL
- en: In the **Contact Alt. Address Card** table, we can add as many other addresses
    to a contact as we want.
  prefs: []
  type: TYPE_NORMAL
- en: '![Alternative addresses](img/0365EN_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although the codes are not related to anything, it is best practice to have
    a rule here. Always use the same code for home or office addresses. We can later
    use this when printing labels or segments.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative address can also have a valid to and valid end date to control
    which alternative address is currently active.
  prefs: []
  type: TYPE_NORMAL
- en: Relationships with customer and vendor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Chapter 2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*,
    you saw that the contact table is the umbrella data of the customer, vendor, and
    bank account master data tables.
  prefs: []
  type: TYPE_NORMAL
- en: Each contact of the type **Company** can be promoted as one of these tables.
    The benefit is that all address information fields have a single place of maintenance
    and are inherited. It also allows us to analyze sales data into relationship management
    as we will see later in this chapter when discussing segments.
  prefs: []
  type: TYPE_NORMAL
- en: When we create master data, a different Number Series is used. At the end of
    this chapter, we will look at how to change that in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'A contact of **Type: Person** cannot be created as the **Customer**, **Vendor**,
    or **Bank Account**.'
  prefs: []
  type: TYPE_NORMAL
- en: Duplicates
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When entering new contacts, the system can search for duplicate contacts. In
    the Duplicate Search String Setup table, we can enable the filtering on eight
    fields: **Name**, **Name2**, **Address**, **Address2**, **Post Code**, **City**,
    **Phone No.**, and **VAT Registration No**.'
  prefs: []
  type: TYPE_NORMAL
- en: For each field, we can set up which part should be used when searching for a
    duplicate. We can use the option **First** and **Last** and a length, which is
    useful for the **Name**, **Address**, and **City** fields. Using **First** with
    the full length of the field will search for an exact match, which is useful for
    **Post Code**, **Phone No.**, and **VAT Registration No**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Marketing Setup** table, we can specify the percentage of matching
    criteria that should result in a warning, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Duplicates](img/0365EN_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For each contact, the system will save these values in `Cont. Duplicate Search
    String table (5086)`.
  prefs: []
  type: TYPE_NORMAL
- en: When we enter a new contact, the system will also generate the same strings
    and compare these to the ones in the database. When there is a match, the system
    will show a warning with the duplicate contacts.
  prefs: []
  type: TYPE_NORMAL
- en: Profiles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The contact table has a very limited number of fields and does not allow much
    creativity for us to add flexible information. This is where profiles are used.
  prefs: []
  type: TYPE_NORMAL
- en: Profiles allow the users to create an unlimited number of extra information
    sources that can be manually or automatically populated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at an example profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Profiles](img/0365EN_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This profile is for contacts of type **Company**. It has **Question** and **Answer**
    lines. A question can have one or multiple answers and we can define as many questions
    and answers as we want. The last column shows how many contacts have this profile
    answer.
  prefs: []
  type: TYPE_NORMAL
- en: A profile is used from the **Contact Card**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Profiles](img/0365EN_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When we click on this, a new page opens where we can select the required profile
    and answer the questions.
  prefs: []
  type: TYPE_NORMAL
- en: '![Profiles](img/0365EN_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The answers are displayed in the **Lines** subpage of the **Contact Card** window.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic profiles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Profiles can also be automatically answered based on formulas. This is done
    using the **Auto Contact Classification** option and setting up the **Question
    Details**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic profiles](img/0365EN_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Profile Question Details** are fixed and hardcoded. They depend on the
    relationship between a contact and a customer or vendor as discussed earlier in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic profiles](img/0365EN_04_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will not describe all the possibilities as this is very well covered in the
    online help.
  prefs: []
  type: TYPE_NORMAL
- en: When the questions are set up, the answers should have a **From Value** and
    **To Value** to allow the system to pick the right one.
  prefs: []
  type: TYPE_NORMAL
- en: To generate the answers, a batch job is used called **Update Contact Classification**
    where we can filter on a profile.
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic profiles](img/0365EN_04_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interactions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have all kinds of interaction moments with our contacts. Whether they are
    phone calls, mailings, or sending an invoice, we can register them in Microsoft
    Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: As with profiles, there are interactions that are generated automatically and
    manually. Manual interactions are created using a wizard.
  prefs: []
  type: TYPE_NORMAL
- en: All interactions relate to an **Interaction Template Code**. The system allows
    an unlimited amount of code we can define ourselves. The interaction code will
    also determine how the rest of wizard will behave.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interactions](img/0365EN_04_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Interactions can be **Inbound** or **Outbound** and initiated by us or them.
    These are informative fields.
  prefs: []
  type: TYPE_NORMAL
- en: The **Wizard Action** field determines whether the wizard will generate a mail
    merge document, allow us to attach a previously created document, or do nothing.
    Mail merge allows us to create a Word document with all fields from the contact
    table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an interaction and look at how that is done. To create an interaction,
    we choose **Create Interaction** on the contact card or list and click on the
    **Create Interaction** button from the **Process Actions**. This will open the
    following wizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interactions](img/0365EN_04_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first page asks us what type of interaction we would like to start. Let''s
    make a memo:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interactions](img/0365EN_04_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the next step as our interaction code defines that we will generate
    a mail merge:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Interactions](img/0365EN_04_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can now create the memo in Microsoft Word with all necessary fields already
    filled in.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interactions](img/0365EN_04_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After closing Microsoft Word, we move on to the next step and when we populate
    all fields, we can finish the wizard. This will save the interaction in the database
    and print the memo since we choose **Hard Copy** as **Correspondence Type**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is also possible to postpone interactions and restart them later.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some interactions can also be automatically generated, for example, each time
    we print an invoice or shipment.
  prefs: []
  type: TYPE_NORMAL
- en: Which interaction code is used for each transaction is defined in the **Interaction
    Template Setup**. For every print, we want an interaction log entry to be generated
    and we need to set up a code.
  prefs: []
  type: TYPE_NORMAL
- en: '![Automatic interactions](img/0365EN_04_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Be careful when printing a lot of documents, as the interaction log entry table
    can be locked for a longer period forcing other users in the database to wait
    until the process is completed. To avoid this, enable auto-increment on this table
    as described in this blog at [http://markbrummel.wordpress.com/2014/05/25/tip-14-autoincrement-interaction-log-entries/](http://markbrummel.wordpress.com/2014/05/25/tip-14-autoincrement-interaction-log-entries/).
  prefs: []
  type: TYPE_NORMAL
- en: Other automatically created interaction log entries are created by segments,
    which we will look at later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Finished interactions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When completed, the interactions are connected to a contact and can be used
    for analysis purposes. It is also possible to start a To-do from an interaction.
    We'll look at that in the next paragraph.
  prefs: []
  type: TYPE_NORMAL
- en: To-do's
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The To-do's are the lowest level of activities in the relationship management
    model. They are best compared to Masks or Meetings in Microsoft Outlook.
  prefs: []
  type: TYPE_NORMAL
- en: To-do's can be created directly in the system or from another event. We can
    create a To-do from the interaction we just created. Let's do this.
  prefs: []
  type: TYPE_NORMAL
- en: '![To-do''s](img/0365EN_04_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The reference here is the tab, Create To-do, and hence the cut-off text at the
    side is fine
  prefs: []
  type: TYPE_NORMAL
- en: When we click on **Create To-do** form the **Interaction Log Entries**, the
    system shows us a wizard that will guide us through the process, just like the
    **Interaction** wizard.
  prefs: []
  type: TYPE_NORMAL
- en: '![To-do''s](img/0365EN_04_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There are three types of To-do's, **Standard** (blank), **Meeting**, and **Phone
    Call**. The steps in the wizard depend on the type we select. Let's select a **Meeting**.
  prefs: []
  type: TYPE_NORMAL
- en: The next step asks the attendees for the meeting and allows a template for the
    invitation, which then again will create an Interaction Log Entry.
  prefs: []
  type: TYPE_NORMAL
- en: '![To-do''s](img/0365EN_04_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To perform this step, the To-do organizer should have a valid e-mail address.
    This can be set up in the sales persons.
  prefs: []
  type: TYPE_NORMAL
- en: The next step only asks for a location so we will click on **Finish**.
  prefs: []
  type: TYPE_NORMAL
- en: When we now open the To-do's from the **Sales & Marketing Department**, we can
    open the **Sales Person** per day matrix, which shows us the meeting we just created.
  prefs: []
  type: TYPE_NORMAL
- en: '![To-do''s](img/0365EN_04_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cut-off text is not a part of the referenced section in the screenshot
  prefs: []
  type: TYPE_NORMAL
- en: We'll see more of To-do's when we discuss **Opportunities** and **Outlook Integration**.
  prefs: []
  type: TYPE_NORMAL
- en: Opportunities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we discussed profiles, we could already see that relationship management
    is tightly integrated with the ERP part of the application. This is also the case
    for opportunities.
  prefs: []
  type: TYPE_NORMAL
- en: Opportunities allow us to manage all the quote requests we get from our prospects,
    creating a workflow that will guide us to a deal that is won or lost. This then
    allows us to analyze the win and lose deals and change our business based on this
    information.
  prefs: []
  type: TYPE_NORMAL
- en: We can analyze the sales pipeline and make a proper judgement of our future
    order position allowing us to schedule capacity in time.
  prefs: []
  type: TYPE_NORMAL
- en: Workflow
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each opportunity we create will follow a sales cycle in the system. This will
    guide us step by step though the process.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a look at the sales cycles in the CRONUS database.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are four sales cycles defined. The most important field is the **Probability
    Calculation** formula. This will determine how the system calculates the current
    value of all opportunities with this code. We can see the **Calculated Current
    Value** by opening the **Statistics** window of a sales cycle, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Workflow](img/0365EN_04_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are four options to choose from: `Multiply`, `Add`, `Chances of Success
    %`, and `Completed %`. The function `UpdateEstimates` in the `Opportunity Entry
    (5093)` table calculates this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `Probability Calculation` first calculates a `Probability %` field, which
    will then lead to the required `Calculated Current Value`.
  prefs: []
  type: TYPE_NORMAL
- en: Sales stages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each sales cycle has different stages that will guide us through the sales process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales stages](img/0365EN_04_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The current sales stage of an opportunity defines the `Completed %` field. We
    can decide with **Allow Skip** option whether a sales stage is mandatory. The
    quote required will force us to assign a sales quote to this opportunity as we
    will see later when we create an opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: Activity codes
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Each sales stage has an activity code. This will define which To-do's are created
    to support us in the sales process.
  prefs: []
  type: TYPE_NORMAL
- en: '![Activity codes](img/0365EN_04_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is a very powerful tool, enabling sales people to create a workflow for
    each sales process.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an opportunity and see what happens in the system.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an opportunity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: An opportunity starts by selecting an existing contact or creating a new one.
    From the **Contact Card**, we can navigate to **Related Information** | **Contact**
    | **Opportunities** | **List**.
  prefs: []
  type: TYPE_NORMAL
- en: This leads us to a filtered lists of opportunities linked to this contact.
  prefs: []
  type: TYPE_NORMAL
- en: Here we can select **Create Opportunity**.![Creating an opportunity](img/0365EN_04_30.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This opens the wizard that will guide us though the process. In the first window,
    we enter the description `Sell Chairs` and click on **Next** to take us to the
    second step.![Creating an opportunity](img/0365EN_04_31.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, we choose **Sales Cycle** code **FIRSTSMALL** and select **Finish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Selecting **Next** will allow us to enter additional information, such as assigning
    a sales campaign, and activating the first stage. We will skip that now and discuss
    campaigns later in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we now open the created opportunity, the information should look like the
    following screenshot. There are no activity lines as we have not yet activated
    the first stage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Creating an opportunity](img/0365EN_04_32.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The cut-off text is not a part of the reference in this screenshot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Let's activate the first stage and see what happens. We do that by navigating
    to **Actions** | **Functions** | **Update**. We enter a wizard where we select
    **First**.![Creating an opportunity](img/0365EN_04_33.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll click on **Next** twice and enter step three of the wizard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this step, we should enter the estimated sales value and **chance of success
    (%)** of getting this deal. This is important to calculate the **calculated estimated
    value** we discussed earlier.![Creating an opportunity](img/0365EN_04_34.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we click on **Finish**, we come back to the **Opportunity** page and see
    that the current value is **260,00**.![Creating an opportunity](img/0365EN_04_35.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cut-off text is not a part of the reference in this screenshot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since the probability calculation of this sales cycle is **Add**, the formula
    is:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will lead to `(50 + 2) / 2 = 26 and 1000 * 26 / 100 = 260`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now we navigate to **Related Information** | **Opportunity** | **To-Dos** and
    see that the system has created two To-do's for us that we have to complete.![Creating
    an opportunity](img/0365EN_04_36.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The cut-off text is not a part of the reference in this screenshot
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This will help us remember our daily tasks and allow management to see nothing
    is forgotten. The next stages in this sales cycle are **Qualification** and **Presentation**.![Creating
    an opportunity](img/0365EN_04_37.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can enter these stages by entering the wizard again and selecting **Next**.![Creating
    an opportunity](img/0365EN_04_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After selecting the **Next** button twice, we hit step three. Since one of our
    To-do's was verifying the quality of the opportunity, we can now say for example
    that the chance of success is 80 percent.![Creating an opportunity](img/0365EN_04_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We'll select the **Cancel existing open to-dos** Checkbox to make sure our workflow
    is updated. You will see that the **Calculated Current Value** has increased to
    **425,00**:![Creating an opportunity](img/0365EN_04_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we enter the next stage, we will get the following error message telling
    us that assigning a quote is mandatory to enter the next step:![Creating an opportunity](img/0365EN_04_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sales quote
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: To assign a sales quote to an opportunity, we navigate to **Actions** | **Functions**
    | **Assign Sales Quote** from the **Opportunity Card**. This will open a new sales
    quote with all fields populated from the opportunity.
  prefs: []
  type: TYPE_NORMAL
- en: '![Sales quote](img/0365EN_04_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To assign a quote to a contact without a **Sell-to Customer No.**, we need to
    use the **Sell-to Customer Template Code**. This can be used when the **Show more
    fields** option is activated on the **General** fast tab.
  prefs: []
  type: TYPE_NORMAL
- en: We will select two furniture items and populate the **Quantity** and **Line
    Discount %** fields.
  prefs: []
  type: TYPE_NORMAL
- en: When we now update the opportunity, we can use the quote amount of 796,80 which
    will lead to a **Calculated Current Value** of 478,08 in step three and 557,76
    in step four.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To update the opportunity to step 4, the sales person should have a valid e-mail
    address, which can be set up in the sales persons.
  prefs: []
  type: TYPE_NORMAL
- en: Closing the deal
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Step five is the final step in the sales cycle stages we used in our example.
    Now we need to tell the system whether the deal is won or lost. To do this, we
    navigate to **Actions** | **Functions** | **Close** from the **Opportunity Card**.
    We will select **Won** and click on **Next**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Closing the deal](img/0365EN_04_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After selecting a valid reason and the sales amount, we can close the deal.
  prefs: []
  type: TYPE_NORMAL
- en: '![Closing the deal](img/0365EN_04_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The system now creates a customer for this contact and updates the quote with
    this number. We need to promote the quote to an order manually.
  prefs: []
  type: TYPE_NORMAL
- en: Creating segments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Segments allow us to slice and dice the data in our system to create a filtered
    list of contacts. This information can then be used to create an interaction such
    as a mailing or start a sales campaign.
  prefs: []
  type: TYPE_NORMAL
- en: Since Microsoft Dynamics NAV relationship management is integrated with the
    ERP system, we can filter on both RM and ERP data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a new segment and look at the possibilities:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating segments](img/0365EN_04_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The segment has a **No.** and **Description field**. The no. can be defined
    using the Number Series.
  prefs: []
  type: TYPE_NORMAL
- en: On the **Interaction** tab, we select **Interaction Template Code**. We will
    select an interaction that generates a Word document so we can use the mail merge
    capabilities of segments.
  prefs: []
  type: TYPE_NORMAL
- en: The **Unit Cost (LCY)** is important to determine the total cost of this segment
    especially when we use it with campaigns, as we will see later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Adding contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With our segment defined, we can now start filtering the system for contact
    information by navigating to **Actions** | **Functions** | **Contacts** | **Add
    Contacts**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding contacts](img/0365EN_04_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This opens a selection window, allowing us to filter on different parts of
    the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Options**: This is further divided into four categories:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow Existing Contacts**: If you run multiple selections and check this
    option, the system will create new segment lines each time a contact is within
    the selection.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Expand Companies**: When you select this option, the system will add the
    persons related to the companies in the selection.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Allow Related Companies**: When **Expand Companies** is selected, this option
    will delete the company record if a company has one or more persons in the filter.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ignore Exclusion**: A contact can be ignored on segments. Checking this flag
    will ignore this field.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contact**: Here we can filter directly on all fields in the contact table.
    For example, all contacts in the country NL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Profile**: This allows us to filter on any profile answer. When we use automatic
    profile answers, we can for example filter on customers with a specific turnover
    or profit value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mailing Group**: We can save any segment to a mailing group allowing easy
    reuse of previously generated filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Interaction Log Entry**: We can filter on contacts who have had specific
    interaction codes. For example, everyone who had a sales invoice in the last year.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Job Responsibility**: If we want to send out a mail to all managers, we select
    the matching job responsibility code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Industry Group**: This allows us to filter out companies in specific industries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Business Relation**: This is by default used to integrate with customers,
    vendors, and bank accounts but can also be expanded with extra information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Value Entry**: This is probably the most powerful filter where we can filter
    on specific item numbers and posting dates from the related contact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Refine/reduce contacts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: After adding all contacts from The Netherlands, we might want to refine or reduce
    this, which can be done with the same filtering as adding contacts. Refining will
    check whether the contacts in the segments match the specific filter criteria
    and reducing will remove all contacts in the segment that match the criteria.
  prefs: []
  type: TYPE_NORMAL
- en: We will reduce the segment with City Waalwijk.
  prefs: []
  type: TYPE_NORMAL
- en: Segment criteria
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can now ask the system what criteria we used by navigating to **Related Information**
    | **Segments** | **Criteria**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Segment criteria](img/0365EN_04_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This allows us to see what we did, but also to undo the last actions or save
    the criteria.
  prefs: []
  type: TYPE_NORMAL
- en: '![Segment criteria](img/0365EN_04_48.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mailing groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another option to reuse a segment is to apply a mailing group to all contacts
    in a segment. To start this, we click on **Apply Mailing Group** in the **ACTIONS**
    tab from the **Segment Card**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Mailing groups](img/0365EN_04_49.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This will create a record in the Contact Mailing Group table for each contact
    in the segment.
  prefs: []
  type: TYPE_NORMAL
- en: Log segment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the segment is finished, it should be logged. Logging the segment will
    start the mail merge process in our segment and create the.
  prefs: []
  type: TYPE_NORMAL
- en: '![Log segment](img/0365EN_04_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using this option will also print the letters in this example. For an exercise
    it might be useful to enable a PDF printer or turn of your printer and remove
    the print job.
  prefs: []
  type: TYPE_NORMAL
- en: If required, the system can directly generate a follow up segment if we wanted
    to use this segment with a campaign.
  prefs: []
  type: TYPE_NORMAL
- en: Campaigns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most big companies with marketing departments have sales campaigns to improve
    their sales. These are typically periods where some items are more interesting
    for customers to buy.
  prefs: []
  type: TYPE_NORMAL
- en: With the campaigns in Microsoft Dynamics NAV, we can manage the sales prices
    and see the results of a specific campaign both from a cost and profit viewpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s open a campaign and see what information it contains:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Campaigns](img/0365EN_04_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each campaign has a unique **No.** field that can be created using Number Series
    and **Description**. The **No.** field should be carefully chosen since it will
    be used throughout the application where this campaign is used.
  prefs: []
  type: TYPE_NORMAL
- en: The **Status Code** options can be custom defined but do not impact business
    logic. The **Starting Date** and **Ending Date** fields are important for the
    pricing information. The special price and discounts will only be valid within
    these periods.
  prefs: []
  type: TYPE_NORMAL
- en: Via the **Invoicing** tab, we can see that campaigns are integrated with dimensions.
    This gives us the powerful option to define a dimension code for each campaign
    and create an analysis view to analyze the results in the financial part of Microsoft
    Dynamics NAV, like we discussed in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Pricing
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV allows special item pricing for campaigns. If a sales
    order is generated from a campaign, the system will use the special price automatically.
  prefs: []
  type: TYPE_NORMAL
- en: By navigating to **Related Information** | **Campaign** | **Sales Prices**,
    we can enter the pricing information for this campaign.
  prefs: []
  type: TYPE_NORMAL
- en: '![Pricing](img/0365EN_04_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This price table is filtered exactly the same way as discussed in our example
    application in [Chapter 2](ch02.html "Chapter 2. A Sample Application"), *A Sample
    Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Segments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To select customers or prospects for a campaign, we need to create one or more
    segments. These segments should be connected to the campaign using the **Campaign
    No.** field. Everyone related to these segments will get the specific prices and
    discounts.
  prefs: []
  type: TYPE_NORMAL
- en: The segments are also used to create the interaction log entries and To-do's
    for this campaign. We need to make our target group aware that this campaign exists
    by sending them a letter, fax, e-mail, or even a phone call.
  prefs: []
  type: TYPE_NORMAL
- en: Activate
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By activating the campaign, the system will add all contacts to the campaign
    group and create interaction log entries.
  prefs: []
  type: TYPE_NORMAL
- en: The interaction log entries will be used to calculate the cost of a campaign.
    Each interaction has a specific cost and all costs add up to the total amount
    on the campaign.
  prefs: []
  type: TYPE_NORMAL
- en: When an opportunity comes in, we can point this to a specific campaign. The
    value of this opportunity is also used in estimating the success of the campaign.
  prefs: []
  type: TYPE_NORMAL
- en: The campaign is also copied into the sales documents using the dimensions attached
    to the campaign. This allows us to further analyze the results.
  prefs: []
  type: TYPE_NORMAL
- en: Outlook integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Salespeople are often on the road without online access to the ERP system, and
    Microsoft Dynamics NAV does not have an offline mode. To solve this problem, Microsoft
    Dynamics NAV is integrated with Microsoft Outlook. This allows salespeople to
    view contacts and tasks offline and replicate with the back office system when
    possible.
  prefs: []
  type: TYPE_NORMAL
- en: If salespeople use a Windows Mobile phone with Microsoft Outlook, they can even
    have all their Microsoft Dynamics NAV information on their device.
  prefs: []
  type: TYPE_NORMAL
- en: Using user-defined views will also enable us to synchronize other Microsoft
    Dynamics NAV data to Microsoft Outlook, for example, the customer table with the
    current value of the **Balance** field or the item table with the current inventory.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss the possibilities of interfacing with Microsoft Outlook in [Chapter
    9](ch09.html "Chapter 9. Interfacing"), *Interfacing*.
  prefs: []
  type: TYPE_NORMAL
- en: E-mail logging
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Microsoft Dynamics NAV also has a capability to read exchange shared folders
    such as `info@ mailboxes`. For each e-mail, the system can generate Interaction
    Log Entries and To-do's.
  prefs: []
  type: TYPE_NORMAL
- en: The setup
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before implementing relationship management, we should properly set up the options.
    This can be done in the **Marketing Setup**.
  prefs: []
  type: TYPE_NORMAL
- en: '![The setup](img/0365EN_04_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at all the fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Attachment Storage Type**: The attachments in the interaction log entries
    can either be stored in the database (embedded) or on the filesystem (disk file).
    It is highly recommended to store them on the filesystem.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Attachment Storage Location**: If we chose to store the attachments on file
    system, this is where we specify the path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Index Mode**: When using a contact search, this should be set to **Auto**.
    It might have a small drawback on performance and cause the database to become
    bigger.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Inheritance**: When entering a person''s profile, it can inherit the salesperson
    code, territory code, country/region code, language code, address details, and
    communication details from the company it belongs to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Defaults**: A new contact can get a default salesperson code, territory code,
    country/region code, language code, or correspondence type. There is a different
    default salutation code for companies and persons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Default Sales Cycle Code**: Every new opportunity will automatically get
    this code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mergefield Language ID**: This defines if the Word merge fields are in the
    local language or in English.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Synchronization**: Here, we enter the default business relation code for
    customers, vendors, and bank accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintain Dupl. Search strings**: Check this field if duplicate contact functions
    are used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Autosearch for Duplicates**: Use this option if the system should automatically
    search when entering new contacts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Hit %**: This determines the percentage of matching lines from the
    duplicate search string setup should have to qualify as a duplicate contact.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing relationship management
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RM is a complete module that is not often highly customized or verticalized.
    However, we will describe some possible changes and how to integrate an add-on,
    in our case the squash application with relationship management.
  prefs: []
  type: TYPE_NORMAL
- en: All examples in this chapter are part of the objects downloaded for [Chapter
    2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Salutation formula types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, the system has two salutation formula types, formal and informal,
    allowing us to print Dear Mrs. Brown, or Dear Angela, but what if we want to print
    Attn. Mrs. Brown?
  prefs: []
  type: TYPE_NORMAL
- en: For this, we need to first add an option to the **Salutation Type** field in
    the **Salutation Formula** table.
  prefs: []
  type: TYPE_NORMAL
- en: '![Salutation formula types](img/0365EN_04_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Support the formula
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next, we want to use the formula when printing a Contact Cover Sheet. This uses
    the **Format Address** functionality from codeunit 365.
  prefs: []
  type: TYPE_NORMAL
- en: This codeunit is the single point in Dynamics NAV where all the address formatting
    is done.
  prefs: []
  type: TYPE_NORMAL
- en: 'The formatting of contact persons is done in the `ContactAddrAlt` function.
    We should make the following change:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always comment out the original line of code before you make a change. This
    will enable you to always go back to standard code and help when upgrading this
    solution to a newer version.
  prefs: []
  type: TYPE_NORMAL
- en: Most NAV partners and developers have their own way of documenting and commenting.
    The example in here is the minimum comment requirement. We will discuss versioning
    objects in [Chapter 10](ch10.html "Chapter 10. Application Design"), *Application
    Design*.
  prefs: []
  type: TYPE_NORMAL
- en: The GetSalutation function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our modification, we use the `GetSalutation` function in `Contact table
    (5050)` instead of the **Name** field. Let''s have a look at that function and
    analyze what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The function uses two parameters: `SalutationType` and `LanguageCode`. With
    these values and the salutation code of the contact, it checks whether there is
    a valid formula. Since we only added a new option, the code still works because
    at database level, the **Option** field is translated to an **Integer**.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For documentation purposes, we could also implement the new option value in
    this function. The downside of this would be that we do a modification that is
    not technically necessary but needs to be maintained and upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the order of the formula, the necessary name fields are combined
    and used as the return value of the function.
  prefs: []
  type: TYPE_NORMAL
- en: Setup the salutation formula
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If we want to use our new salutation formula, we need to set it up first. We
    will do this for F-MAR to test it with CT100191 Megan Sherman from American Wood
    Exports.
  prefs: []
  type: TYPE_NORMAL
- en: '![Setup the salutation formula](img/0365EN_04_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Test the solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After adding the new formula, we print a cover sheet from the contact card
    using the **Contact Cover Sheet** option from the **Report** actions. The result
    will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test the solution](img/0365EN_04_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Customer and vendor numbering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another common requirement from end users is to maintain the same number when
    creating a customer or vendor from a contact.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be done by adding one line of code to the `CreateCustomer` function
    in the contact table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This works because by populating the `No.` field, the Number Series functionality
    in the `OnInsert` trigger does not start:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Disabling the direct creation of customers and vendors
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When using this option, it should be disabled to directly create a customer
    or vendor. This can be done easily by removing the `No. Series` from the **Sales
    & Receivables Setup** and **Purchases & Payables Setup**. This results in a runtime
    error message when creating the customer or vendor.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing contact information across companies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When more companies have their administration in Microsoft Dynamics NAV, they
    most often have the same owner or group of owners that want their contact data
    to span across their companies.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved by sharing some tables across all companies and changing
    some business logic.
  prefs: []
  type: TYPE_NORMAL
- en: Share tables
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Microsoft Dynamics NAV will create a separate instance of each table
    for each company. This can be changed with the `DataPerCompany` property in the
    table designer.
  prefs: []
  type: TYPE_NORMAL
- en: '![Share tables](img/0365EN_04_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following lists should be shared across the database since they contain
    the main contact information and the link to the customer and vendor data:'
  prefs: []
  type: TYPE_NORMAL
- en: 5050 - Contact
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5051 - Contact Alt. Address
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5052 - Contact Alt. Addr. Date Range
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5053 - Business Relation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 5054 - Contact Business Relation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will allow us to reuse contact data in all companies. Other tables are
    optional to share but might be useful.
  prefs: []
  type: TYPE_NORMAL
- en: By sharing the **Contact Profile Answer** table, other companies can see how
    a customer is doing within the group.
  prefs: []
  type: TYPE_NORMAL
- en: The segment tables could be shared in order to slice and dice information across
    the company. This also requires the criteria tables to be shared.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you share the profile or segment tables, the reports that calculate them
    should be started for each company individually in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Campaigns and opportunities should not be shared since that interfaces with
    the ERP system. Never share financial tables such as the value entry or document
    tables.
  prefs: []
  type: TYPE_NORMAL
- en: Interaction log entries could be shared but we should realize that most table
    relations to sales and purchase documents will not work when we are in the wrong
    company.
  prefs: []
  type: TYPE_NORMAL
- en: Business relation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When sharing the contacts across the companies, we are interested to see in
    which company contacts are customer and vendor. We also want to maintain those
    tables when the contact information changes.
  prefs: []
  type: TYPE_NORMAL
- en: This means that besides sharing the Contact Business Relation table, we should
    also add a field indicating the company and add this field to the primary key.
  prefs: []
  type: TYPE_NORMAL
- en: '![Business relation](img/0365EN_04_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: C/AL code modifications
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To make this customization work, we need the C/AL code to understand what we
    want to do. It needs to understand that we added the company. Let's go through
    all the functions we need to change to make this work.
  prefs: []
  type: TYPE_NORMAL
- en: The functions that create the customer and vendor records we saw in [Chapter
    2](ch02.html "Chapter 2. A Sample Application"), *A Sample Application*, should
    also be checked, for example, the function `CreateCustomer` in the contact table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'And a little bit further up in the C/AL code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'We should also check the code that maintains data integrity, which is the `CustVendBank-Update
    Codeunit (5055)` that we discussed in [Chapter 2](ch02.html "Chapter 2. A Sample
    Application"), *A Sample Application*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use the `CHANGECOMPANY` C/AL command to change the company for a specific
    instance of a variable.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are more functions impacted such as the `UpdateQuotes` function in the
    contact table. Analyze your database before implementing this feature.
  prefs: []
  type: TYPE_NORMAL
- en: Number Series
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The last change we should do for a properly working system is create a new instance
    of the Number Series functionality.
  prefs: []
  type: TYPE_NORMAL
- en: This can be achieved relatively easily since the Number Series are an isolated
    set of objects.
  prefs: []
  type: TYPE_NORMAL
- en: In the object designer, we should filter on this set of objects and export them
    to a `.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Table (308): No. Series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Table (309): No. Series Line'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Table (310): No. Series Relationship'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Report (21): No. Series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Report (22): No. Series Check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Codeunit (396): NoSeriesManagement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page (456): No. Series'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page (457): No. Series Lines'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page (458): No. Series Relationships'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this file, we can renumber them and rename them so we get something like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Table (123456721): No. Series (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Table (123456722): No. Series Line (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Table (123456723): No. Series Rel. (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Report (123456721): No. Series (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Report (123456722): No. Series Check (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Codeunit (123456721): NoSeriesManagement (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page (123456721): No. Series (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page (123456722): No. Series Lines (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page (123456723): No. Series Rel. (Shared)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where, the tables should be `DataPerCompany` No.
  prefs: []
  type: TYPE_NORMAL
- en: Final steps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When we have shared Number Series functionality, we can implement this in the
    existing objects.
  prefs: []
  type: TYPE_NORMAL
- en: The **Contact Nos.** field in the marketing setup table should change the table
    relation to the Shared No. Series table as well as the **No. Series** field in
    the contact table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `NoSeriesMgt` variable in the contact table should move from `NoSeriesManagement`
    to `SharedNoSeriesMgt`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Alternative approaches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Sharing the contact information across companies is a change that has been implemented
    by many companies and can be considered safe. Other tables in Microsoft Dynamics
    NAV are more difficult to share because of financial or operational information.
  prefs: []
  type: TYPE_NORMAL
- en: A typical example in the standard application is `Item table (27)`. This contains
    a field `Cost is Adjusted (29)`, which is used when running cost adjustment. If
    this table will be shared across all companies, it would create a major issue
    with running this function. We will discuss cost adjustment in [Chapter 5](ch05.html
    "Chapter 5. Production"), *Production*.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this issue, there are two commonly implemented solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Shared Master Items**: We can create a new table called master item. This
    table is shared across all companies and contains the information we share like
    descriptions and pricing. When the data in this table is changed, it should enable
    a mechanism comparable to the `CustVendBank-Update Codeunit (5055)`, which updates
    the items in the other companies using the `CHANGECOMPANY` C/AL function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**External Synchronization**: We could implement something that will export
    the changes done in one company into an XML file. An Application Server can run
    in the background and read this xml file and implement these changes to other
    companies in the database or even other databases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first solution with master items looks a lot like the way contacts work
    in the standard application and is a perfect example of look, learn, and love
    using proven data structures in customized solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Adding contacts to segments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last change we are implementing in relationship management is adding a table
    to the **Add Contacts** functionality in segments.
  prefs: []
  type: TYPE_NORMAL
- en: We have seen that it is already complete but a vertical solution might want
    to integrate its ledger entry tables here.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will make it possible to filter in the squash ledger entries
    from the example application in [Chapter 2](ch02.html "Chapter 2. A Sample Application"),
    *A Sample Application*.
  prefs: []
  type: TYPE_NORMAL
- en: Expanding report
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The first step is to add the squash ledger entries as `DataItem` to the Add
    Contacts report (5198). We will copy the functionality from the Value Entries
    as this is comparable functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Always find comparable standard application functionality to learn from. Never
    just copy and paste this but learn how it's done and apply your own knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: '![Expanding report](img/0365EN_04_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We cannot copy and paste the table relation from the other contact business
    relation `DataItem` since squash players are contact persons, not companies. Our
    table relation should be `Contact No.=FIELD(No.)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code in our Contact Business Relation table tells us that we need two new
    variables or the type Boolean, `SquashFilters` and `SkipSquashLedgerEntry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `SquashFilters` is determined in the `OnPreReport` trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The code in the Squash Ledger Entry `DataItem` should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Make sure we filter on our instance of Contact Business Relation and that we
    filter on our link to the squash player table.
  prefs: []
  type: TYPE_NORMAL
- en: The `ContactOK` indicates that all contact persons connected to this squash
    ledger entry will be inserted.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing criteria filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To support the criteria filter functionality, we need to make two changes, one
    to the **Add Contacts** report and the other to the `SegCriteriaManagement` codeunit.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Add Contacts** report, we add this C/AL code to the `OnPreReport`
    trigger. This will make a call to the `SegCriteriaManagement Codeunit (5062)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `SegCriteriaManagement` codeunit, we add this code to the `SegCriteriaFilter`
    function, which will require a new local variable for `Squash Ledger Entry`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Test solution
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, we can test the solution by trying to add all squash player of type **Member**
    to a **Segment**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test solution](img/0365EN_04_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The result is a segment with the required squash players.
  prefs: []
  type: TYPE_NORMAL
- en: '![Test solution](img/0365EN_04_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This change also needs to be implemented to the reduce/refine functionality,
    which works similar to the add contacts report.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a deep dive into the Microsoft Dynamics NAV relationship
    management functionality. We learned how it is integrated with the ERP part of
    the system. Relationship management can be very useful to analyze sales data.
    With profiles, we can filter on turnover and profit figures and use them in segments.
  prefs: []
  type: TYPE_NORMAL
- en: Interaction Log Entries allow us to keep track of all the contact moments with
    the people we do business with. Outlook integration can be used for salespeople
    to work remotely and synchronize with the system.
  prefs: []
  type: TYPE_NORMAL
- en: Campaigns and opportunities help us to keep track of the quote process and make
    our sales working more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we looked at some common requirements to change the relationship management
    system to meet our company's specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapters, we will look at the ERP part of Microsoft Dynamics NAV
    starting with the process in [Chapter 5](ch05.html "Chapter 5. Production"), *Production*,
    and [Chapter 6](ch06.html "Chapter 6. Trade"), *Trade*.
  prefs: []
  type: TYPE_NORMAL
