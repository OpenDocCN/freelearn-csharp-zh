["```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Chapter.Observer\n{\n    public abstract class Subject : MonoBehaviour\n    {\n        private readonly \n            ArrayList _observers = new ArrayList();\n\n        public void Attach(Observer observer)\n        {\n            _observers.Add(observer);\n        }\n\n        public void Detach(Observer observer)\n        {\n            _observers.Remove(observer);\n        }\n\n        public void NotifyObservers()\n        {\n            foreach (Observer observer in _observers)\n            {\n                observer.Notify(this);\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Observer\n{\n    public abstract class Observer : MonoBehaviour\n    {\n        public abstract void Notify(Subject subject);\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Observer\n{\n    public class BikeController : Subject\n    {\n        public bool IsTurboOn\n        {\n            get; private set;\n        }\n\n        public float CurrentHealth\n        {\n            get { return health; }\n        } \n\n        private bool _isEngineOn;\n        private HUDController _hudController;\n        private CameraController _cameraController;\n\n        [SerializeField]\n        private float health = 100.0f;\n\n        void Awake()\n        {\n            _hudController = \n                gameObject.AddComponent<HUDController>();\n\n            _cameraController = \n                (CameraController) \n                FindObjectOfType(typeof(CameraController));\n        }\n\n        private void Start()\n        {\n            StartEngine();\n        }\n\n```", "```cs\nvoid OnEnable()\n{\n    if (_hudController) \n        Attach(_hudController);\n\n    if (_cameraController) \n        Attach(_cameraController);\n}\n\nvoid OnDisable()\n{\n    if (_hudController) \n        Detach(_hudController);\n\n    if (_cameraController) \n        Detach(_cameraController);\n}\n```", "```cs\n        private void StartEngine()\n        {\n            _isEngineOn = true;\n\n            NotifyObservers();\n        }\n\n        public void ToggleTurbo()\n        {\n            if (_isEngineOn) \n                IsTurboOn = !IsTurboOn;\n\n            NotifyObservers();\n        }\n\n        public void TakeDamage(float amount)\n        {\n            health -= amount;\n            IsTurboOn = false;\n\n            NotifyObservers();\n\n            if (health < 0)\n                Destroy(gameObject);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Observer {\n    public class HUDController : Observer {\n\n        private bool _isTurboOn;\n        private float _currentHealth;\n        private BikeController _bikeController;\n\n        void OnGUI() {\n            GUILayout.BeginArea (\n                new Rect (50,50,100,200));\n            GUILayout.BeginHorizontal (\"box\");\n            GUILayout.Label (\"Health: \" + _currentHealth);\n            GUILayout.EndHorizontal ();\n\n            if (_isTurboOn) {\n                GUILayout.BeginHorizontal(\"box\");\n                GUILayout.Label(\"Turbo Activated!\");\n                GUILayout.EndHorizontal();\n            }\n\n            if (_currentHealth <= 50.0f) {\n                GUILayout.BeginHorizontal(\"box\");\n                GUILayout.Label(\"WARNING: Low Health\");\n                GUILayout.EndHorizontal();\n            }\n\n            GUILayout.EndArea ();\n        }\n\n        public override void Notify(Subject subject) {\n            if (!_bikeController)\n                _bikeController = \n                    subject.GetComponent<BikeController>();\n\n            if (_bikeController) {\n                _isTurboOn = \n                    _bikeController.IsTurboOn;\n\n                _currentHealth = \n                    _bikeController.CurrentHealth;\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Observer\n{\n    public class CameraController : Observer\n    {\n        private bool _isTurboOn;\n        private Vector3 _initialPosition;\n        private float _shakeMagnitude = 0.1f;\n        private BikeController _bikeController;\n\n        void OnEnable()\n        {\n            _initialPosition = \n                gameObject.transform.localPosition;\n        }\n\n        void Update()\n        {\n            if (_isTurboOn)\n            {\n                gameObject.transform.localPosition =\n                    _initialPosition + \n                    (Random.insideUnitSphere * _shakeMagnitude);\n            }\n            else\n            {\n                gameObject.transform.\n                    localPosition = _initialPosition;\n            }\n        }\n\n        public override void Notify(Subject subject)\n        {\n            if (!_bikeController)\n                _bikeController =\n                    subject.GetComponent<BikeController>();\n\n            if (_bikeController)\n                _isTurboOn = _bikeController.IsTurboOn;\n        }\n    }\n}\n\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Observer\n{\n    public class ClientObserver : MonoBehaviour\n    {\n        private BikeController _bikeController;\n\n        void Start()\n        {\n            _bikeController = \n                (BikeController) \n                FindObjectOfType(typeof(BikeController));\n        }\n\n        void OnGUI()\n        {\n            if (GUILayout.Button(\"Damage Bike\"))\n                if (_bikeController) \n                    _bikeController.TakeDamage(15.0f);\n\n            if (GUILayout.Button(\"Toggle Turbo\"))\n                if (_bikeController) \n                    _bikeController.ToggleTurbo();\n        }\n    }\n}\n```"]