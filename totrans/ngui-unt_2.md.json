["```cs\n        public void ExitPressed()\n        {\n          //Exit Now\n          Application.Quit();\n        }\n        ```", "```cs\n//We will need the Slider\nUISlider slider;\n\nvoid Awake ()\n{\n  //Get the Slider\n  slider = GetComponent<UISlider>();\n  //Set the Slider's value to last saved volume\n slider.value = NGUITools.soundVolume;\n}\n```", "```cs\npublic void OnVolumeChange ()\n{\n  //Change NGUI's UI Sounds volume\n  NGUITools.soundVolume = UISlider.current.value;\n  //Change the Game AudioListener's volume\n  AudioListener.volume = UISlider.current.value;\n}\n```", "```cs\npublic void OnSoundToggle()\n{\n  float newVolume = 0;\n  //If sound toggled ON, set new volume to slider value\n  if(UIToggle.current.value)\n  newVolume = slider.value;\n  //Apply newVolume to volumes\n  AudioListener.volume = newVolume;\n  NGUITools.soundVolume = newVolume;\n}\n```", "```cs\n    //If volume is at 0, uncheck the Sound Checkbox\n    if(NGUITools.soundVolume == 0) soundToggle.value = false;\n    ```", "```cs\n    public enum Difficulties\n    {\n      Normal,\n      Hard\n    }\n    ```", "```cs\n    public static Difficulties Difficulty = Difficulties.Normal;\n    ```", "```cs\npublic void OnDifficultyChange()\n{\n  //If Difficulty changes to Normal, set Difficulties.Normal\n  if(UIPopupList.current.value == \"Normal\")\n  Difficulty = Difficulties.Normal;\n  //Otherwise, set it to Hard\n  else Difficulty = Difficulties.Hard;\n}\n```"]