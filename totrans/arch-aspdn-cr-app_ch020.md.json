["```cs\n{\n    \"id\": \"some id\",\n    \"name\": \"Device 1\",\n    \"other\": \"properties go here...\"\n}\n```", "```cs\n{\n    \"deviceId\": \"some id\",\n    \"type\": \"MQTT\",\n    \"other\": \"networking properties...\"\n}\n```", "```cs\n{\n    \"id\": \"some id\",\n    \"patches\": [\n        { \"op\": \"replace\", \"path\": \"/name\", \"value\": \"Kitchen Thermostat\" },\n    ]\n}\n```", "```cs\n{\n    \"device\": {\n        \"id\": \"some id\",\n        \"name\": \"Device 1\"\n    },\n    \"networking\": {},\n    \"location\": {...}\n}\n```", "```cs\n{\n    \"device\": {\n        \"id\": \"some id\",\n        \"name\": \"Device 1\"\n    },\n    \"networking\": {\n        \"type\": \"MQTT\"\n    },\n    \"location\": {...}\n}\n```", "```cs\n{\n    \"device\": {\n        \"id\": \"some id\",\n        \"name\": \"Kitchen Thermostat\"\n    },\n    \"networking\": {\n        \"type\": \"MQTT\"\n    },\n    \"location\": {...}\n}\n```", "```cs\ncd REPR.Baskets\ndotnet run\n# In a second terminal\ncd REPR.Products\ndotnet run\n# In a third terminal\ncd REPR.BFF\ndotnet run\n```", "```cs\ndotnet dev-certs https -ep \"$env:APPDATA\\ASP.NET\\Https\\adpg-net8-chapter-19.pfx\" -p devpassword\ndotnet dev-certs https --trust\n```", "```cs\ndocker compose build\n```", "```cs\ndocker compose up\n```", "```cs\n[+] Running 3/0\n ✔ Container c19-repr.products-1  Created    0.0s\n ✔ Container c19-repr.baskets-1   Created    0.0s\n ✔ Container c19-repr.bff-1       Created    0.0s\nAttaching to c19-repr.baskets-1, c19-repr.bff-1, c19-repr.products-1\nc19-repr.baskets-1   | info: Microsoft.Hosting.Lifetime[14]\nc19-repr.baskets-1   |       Now listening on: http://[::]:80\nc19-repr.baskets-1   | info: Microsoft.Hosting.Lifetime[14]\nc19-repr.baskets-1   |       Now listening on: https://[::]:443\n...\n```", "```cs\ndocker compose down\n```", "```cs\n@Web_HostAddress = https://localhost:60280\n@ProductId = 3\n@CustomerId = 1\nGET {{Web_HostAddress}}/baskets/{{CustomerId}}\n###\nPOST {{Web_HostAddress}}/baskets\nContent-Type: application/json\n{\n    \"customerId\": {{CustomerId}}, \n    \"productId\": {{ProductId}}, \n    \"quantity\": 10\n}\n...\n```", "```cs\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n[\n  {\n    \"productId\": 3,\n    \"quantity\": 10\n  }\n]\n```", "```cs\nusing Refit;\nusing Web.Features;\nnamespace REPR.BFF;\npublic interface IBasketsClient\n{\n    [Get(\"/baskets/{query.CustomerId}\")]\n    Task<IEnumerable<Baskets.FetchItems.Item>> FetchCustomerBasketAsync(\n        Baskets.FetchItems.Query query,\n        CancellationToken cancellationToken);\n    [Post(\"/baskets\")]\n    Task<Baskets.AddItem.Response> AddProductToCart(\n        Baskets.AddItem.Command command,\n        CancellationToken cancellationToken);\n    [Delete(\"/baskets/{command.CustomerId}/{command.ProductId}\")]\n    Task<Baskets.RemoveItem.Response> RemoveProductFromCart(\n        Baskets.RemoveItem.Command command,\n        CancellationToken cancellationToken);\n    [Put(\"/baskets\")]\n    Task<Baskets.UpdateQuantity.Response> UpdateProductQuantity(\n        Baskets.UpdateQuantity.Command command,\n        CancellationToken cancellationToken);\n}\n```", "```cs\nusing Refit;\nusing Web.Features;\nnamespace REPR.BFF;\npublic interface IProductsClient\n{\n    [Get(\"/products/{query.ProductId}\")]\n    Task<Products.FetchOne.Response> FetchProductAsync(\n        Products.FetchOne.Query query,\n        CancellationToken cancellationToken);\n    [Get(\"/products\")]\n    Task<Products.FetchAll.Response> FetchProductsAsync(\n        CancellationToken cancellationToken);\n}\n```", "```cs\npublic interface IWebClient\n{\n    IBasketsClient Baskets { get; }\n    IProductsClient Catalog { get; }\n}\n```", "```cs\npublic class DefaultWebClient : IWebClient\n{\n    public DefaultWebClient(IBasketsClient baskets, IProductsClient catalog)\n    {\n        Baskets = baskets ?? throw new ArgumentNullException(nameof(baskets));\n        Catalog = catalog ?? throw new ArgumentNullException(nameof(catalog));\n    }\n    public IBasketsClient Baskets { get; }\n    public IProductsClient Catalog { get; }\n}\n```", "```cs\n{\n  \"Downstream\": {\n    \"Baskets\": {\n      \"BaseAddress\": \"https://localhost:60280\"\n    },\n    \"Products\": {\n      \"BaseAddress\": \"https://localhost:57362\"\n    }\n  }\n}\n```", "```cs\nusing Refit;\nusing REPR.BFF;\nusing System.Collections.Concurrent;\nusing System.Net;\nvar builder = WebApplication.CreateBuilder(args);\nvar basketsBaseAddress = builder.Configuration\n    .GetValue<string>(\"Downstream:Baskets:BaseAddress\") ?? throw new NotSupportedException(\"Cannot start the program without a Baskets base address.\");\nvar productsBaseAddress = builder.Configuration\n    .GetValue<string>(\"Downstream:Products:BaseAddress\") ?? throw new NotSupportedException(\"Cannot start the program without a Products base address.\");\n```", "```cs\nbuilder.Services\n    .AddRefitClient<IBasketsClient>()\n    .ConfigureHttpClient(c => c.BaseAddress = new Uri(basketsBaseAddress))\n;\nbuilder.Services\n    .AddRefitClient<IProductsClient>()\n    .ConfigureHttpClient(c => c.BaseAddress = new Uri(productsBaseAddress))\n;\n```", "```cs\nbuilder.Services.AddTransient<IWebClient, DefaultWebClient>();\n```", "```cs\npublic interface ICurrentCustomerService\n{\n    int Id { get; }\n} \n```", "```cs\npublic class FakeCurrentCustomerService : ICurrentCustomerService\n{\n    public int Id => 1;\n}\n```", "```cs\nbuilder.Services.AddScoped<ICurrentCustomerService, FakeCurrentCustomerService>();\n```", "```cs\napp.MapGet(\n    \"api/catalog\",\n    (IWebClient client, CancellationToken cancellationToken)\n        => client.Catalog.FetchProductsAsync(cancellationToken)\n);\n```", "```cs\nGET https://localhost:7254/api/catalog\n```", "```cs\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n{\n  \"products\": [\n    {\n      \"id\": 2,\n      \"name\": \"Apple\",\n      \"unitPrice\": 0.79\n    },\n    {\n      \"id\": 1,\n      \"name\": \"Banana\",\n      \"unitPrice\": 0.30\n    },\n    {\n      \"id\": 3,\n      \"name\": \"Habanero Pepper\",\n      \"unitPrice\": 0.99\n    }\n  ]\n}\n```", "```cs\napp.MapGet(\n    \"api/catalog/{productId}\",\n    (int productId, IWebClient client, CancellationToken cancellationToken)\n        => client.Catalog.FetchProductAsync(new(productId), cancellationToken)\n);\n```", "```cs\napp.MapGet(\n    \"api/cart\",\n    async (IWebClient client, ICurrentCustomerService currentCustomer, CancellationToken cancellationToken) =>\n    {\n        var basket = await client.Baskets.FetchCustomerBasketAsync(\n            new(currentCustomer.Id),\n            cancellationToken\n        );\n        var result = new ConcurrentBag<BasketProduct>();\n        await Parallel.ForEachAsync(basket, cancellationToken, async (item, cancellationToken) =>\n        {\n            var product = await client.Catalog.FetchProductAsync(\n                new(item.ProductId),\n                cancellationToken\n            );\n            result.Add(new BasketProduct(\n                product.Id,\n                product.Name,\n                product.UnitPrice,\n                item.Quantity\n            ));\n        });\n        return result;\n    }\n);\n```", "```cs\npublic record class BasketProduct(int Id, string Name, decimal UnitPrice, int Quantity)\n{\n    public decimal TotalPrice => UnitPrice * Quantity;\n}\n```", "```cs\ntrce: GetCart[0]\n      Fetching product '3'.\ntrce: GetCart[0]\n      Fetching product '2'.\ntrce: GetCart[0]\n      Found product '2'(Apple).\ntrce: GetCart[0]\n      Found product '3'(Habanero Pepper).\n```", "```cs\nGET https://localhost:7254/api/cart\n```", "```cs\nHTTP/1.1 200 OK\nContent-Type: application/json; charset=utf-8\n[\n  {\n    \"id\": 3,\n    \"name\": \"Habanero Pepper\",\n    \"unitPrice\": 0.99,\n    \"quantity\": 10,\n    \"totalPrice\": 9.90\n  },\n  {\n    \"id\": 2,\n    \"name\": \"Apple\",\n    \"unitPrice\": 0.79,\n    \"quantity\": 5,\n    \"totalPrice\": 3.95\n  }\n]\n```", "```cs\napp.MapPost(\n    \"api/cart\",\n    async (UpdateCartItem item, IWebClient client, ICurrentCustomerService currentCustomer, CancellationToken cancellationToken) =>\n    {\n        if (item.Quantity <= 0)\n        {\n            await RemoveItemFromCart(\n                item,\n                client,\n                currentCustomer,\n                cancellationToken\n            );\n        }\n        else\n        {\n            await AddOrUpdateItem(\n                item,\n                client,\n                currentCustomer,\n                cancellationToken\n            );\n        }\n        return Results.Ok();\n    }\n);\n```", "```cs\nstatic async Task RemoveItemFromCart(UpdateCartItem item, IWebClient client, ICurrentCustomerService currentCustomer, CancellationToken cancellationToken)\n{\n    try\n    {\n        var result = await client.Baskets.RemoveProductFromCart(\n            new Web.Features.Baskets.RemoveItem.Command(\n                currentCustomer.Id,\n                item.ProductId\n            ),\n            cancellationToken\n        );\n    }\n    catch (ValidationApiException ex)\n    {\n        if (ex.StatusCode != HttpStatusCode.NotFound)\n        {\n            throw;\n        }\n    }\n}\n```", "```cs\nstatic async Task AddOrUpdateItem(UpdateCartItem item, IWebClient client, ICurrentCustomerService currentCustomer, CancellationToken cancellationToken)\n{\n    try\n    {\n        // Add the product to the cart\n        var result = await client.Baskets.AddProductToCart(\n            new Web.Features.Baskets.AddItem.Command(\n                currentCustomer.Id,\n                item.ProductId,\n                item.Quantity\n            ),\n            cancellationToken\n        );\n    }\n    catch (ValidationApiException ex)\n    {\n        if (ex.StatusCode != HttpStatusCode.Conflict)\n        {\n            throw;\n        }\n        // Update the cart\n        var result = await client.Baskets.UpdateProductQuantity(\n            new Web.Features.Baskets.UpdateQuantity.Command(\n                currentCustomer.Id,\n                item.ProductId,\n                item.Quantity\n            ),\n            cancellationToken\n        );\n    }\n}\n```", "```cs\nPOST https://localhost:7254/api/cart\nContent-Type: application/json\n{\n    \"productId\": 3, \n    \"quantity\": 10\n}\n```", "```cs\nPOST https://localhost:7254/api/cart\nContent-Type: application/json\n{\n    \"productId\": 2, \n    \"quantity\": 5\n}\n```", "```cs\nPOST https://localhost:7254/api/cart\nContent-Type: application/json\n{\n    \"productId\": 3, \n    \"quantity\": 20\n}\n```", "```cs\nPOST https://localhost:7254/api/cart\nContent-Type: application/json\n{\n    \"productId\": 2, \n    \"quantity\": 0\n}\n```", "```cs\n[\n  {\n    \"id\": 3,\n    \"name\": \"Habanero Pepper\",\n    \"unitPrice\": 0.99,\n    \"quantity\": 20,\n    \"totalPrice\": 19.80\n  }\n]\n```"]