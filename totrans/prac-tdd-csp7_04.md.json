["```cs\nAs a visitor to the site \n I want to receive a time-appropriate greeting \n So that I may plan the submission of my talks \n\nGiven it is before noon \n When greeting is requested \n Then morning message is returned\n\nGiven it is afternoon \n When greeting is requested \n Then afternoon message is returned\n```", "```cs\npublic string GetGreeting()\n{\n  if (DateTime.Now.Hour < 12)\n    return \"Good morning\";\n\n  return \"Good afternoon\";\n}\n```", "```cs\n[Fact]\npublic void GivenEvening_ThenAfternoonMessage()\n{\n  // Arrange\n  // Act\n  var message = GetGreeting();\n\n  // Assert\n  Assert.Equal(\"Good afternoon\", message);\n}\n```", "```cs\npublic interface ITimeManager\n{\n  DateTime Now { get; }\n}\n```", "```cs\npublic class TestTimeManager : ITimeManager\n{\n  public Func<DateTime> CurrentTime = () => DateTime.Now;\n\n  public void SetDateTime(DateTime now)\n  {\n    CurrentTime = () => now;\n  }\n\n  public DateTime Now => CurrentTime();\n}\n```", "```cs\n[Theory]\n[InlineData(12)]\n[InlineData(13)]\n[InlineData(14)]\n[InlineData(15)]\n[InlineData(16)]\n[InlineData(17)]\n[InlineData(18)]\n[InlineData(19)]\n[InlineData(20)]\n[InlineData(21)]\n[InlineData(22)]\n[InlineData(23)]\npublic void GivenAfternoon_ThenAfternoonMessage(int hour)\n{\n  // Arrange\n  var afternoonTime = new TestTimeManager();\n  afternoonTime.SetDateTime(new DateTime(2017, 7, 13, hour, 0, 0));\n  var messageUtility = new MessageUtility(afternoonTime);\n\n  // Act\n  var message = messageUtility.GetGreeting();\n\n  // Assert\n  Assert.Equal(\"Good afternoon\", message);\n}\n\n[Theory]\n[InlineData(0)]\n[InlineData(1)]\n[InlineData(2)]\n[InlineData(3)]\n[InlineData(4)]\n[InlineData(5)]\n[InlineData(6)]\n[InlineData(7)]\n[InlineData(8)]\n[InlineData(9)]\n[InlineData(10)]\n[InlineData(11)]\npublic void GivenMorning_ThenMorningMessage(int hour)\n{\n  // Arrange\n  var morningTime = new TestTimeManager();\n  morningTime.SetDateTime(new DateTime(2017, 7, 13, hour, 0, 0));\n  var messageUtility = new MessageUtility(morningTime);\n\n  // Act\n  var message = messageUtility.GetGreeting();\n\n  // Assert\n  Assert.Equal(\"Good morning\", message);\n}\n```", "```cs\npublic class MessageUtility\n{\n  private readonly ITimeManager _timeManager;\n\n  public MessageUtility(ITimeManager timeManager)\n  {\n    _timeManager = timeManager;\n  }\n\n  public string GetMessage()\n  {\n    if (_timeManager.Now.Hour < 12)\n      return \"Good morning\";\n\n    return \"Good afternoon\";\n  }\n}\n```", "```cs\nenum LogLevel\n{\n  None = 0,\n  Error = 1,\n  Warning = 2,\n  Success = 3,\n  Info = 4\n}\n\ninterface ILogger\n{\n  void Log(LogLevel type, string message);\n}\n\nclass DummyLogger: ILogger\n{ \n  public void Log(LogLevel type, string message)\n  {\n    // Do Nothing\n  }       \n}\n```", "```cs\nexport class DummyLogger {\n   info(message) {\n   }\n\n   warn(message) {\n   }\n\n   error(message) {\n   }\n\n   success(message) {\n   }\n }\n```", "```cs\nclass StubSpeakerContactServiceError : ISpeakerContactService\n{\n  public void MessageSpeaker(string message) \n  {\n    throw new UnableToContactSpeakerException();\n  } \n}\n```", "```cs\n import { SpeakerErrors } from './errors';\n import { SpeakerFilters } from './actions';\n\n const initialState = {\n   speakerFilter: SpeakerActions.SHOW_ALL,\n   speakers: [],\n   errors: []\n };\n\n export function *stubSpeakerReducer*(state, action) {\n   state = state || initialState;\n\n   state.speakerFilter = action.filter || SpeakerFilters.SHOW_ALL;\n   state.errors.push(SpeakerErrors.UNABLE_TO_RETRIEVE_SPEAKERS);\n\n   return state;\n }\n```", "```cs\nclass SpySpeakerContactService : ISpeakerContactService\n{\n  public bool MessageSpeakerHasBeenCalled { get; private set; }\n\n  public int MessageSpeakerCallCount { get; private set; }\n\n  public void MessageSpeaker(string message)\n  {\n    MessageSpeakerHasBeenCalled = true;\n    MessageSpeakerCallCount++;\n  }\n}\n```", "```cs\nimport { speakerReducer as original_speakerReducer } from './reducers';\n\n export let callCounter = 0;\n\n export function *spySpeakerReducer*(state, action) {\n   callCounter++;\n\n   return original_speakerReducer(state,action);\n } \n```", "```cs\nclass MockDateTimeService\n{\n  public DateTime CurrentDateTime { get; set; } = new DateTime();\n\n  public DateTime UTCNow()\n  {\n    return CurrentDateTime.ToUniversalTime();\n  }\n}\n```", "```cs\nexport class MockDateTimeService {\n   constructor() {\n     this.currentDateTime = new Date(2000, 0, 1);\n   }\n\n   now() {\n     return this.currentDateTime;\n   }\n }\n```", "```cs\npublic interface IRepository<T>\n{\n  T Get(Func<T, bool> predicate);\n  IQueryable<T> GetAll();\n  T Save(T item);\n  IRepository<T> Include(Expression<Func<T, object>> path);\n}\n\npublic interface IIdentity\n{\n  int Id {get;set;}\n}\n\npublic class FakeRepository<T> : IRepository<T> where T : IIdentity\n{\n  private int _identityCounter = 0;\n  public IList<T> DataSet { get; set; } = new List<T>();\n\n  public T Get(Func<T, bool> predicate)\n  {\n    return GetAll().Where(predicate).FirstOrDefault();\n  }\n\n  public IQueryable<T> GetAll()\n  {\n    return DataSet.AsQueryable();\n  }\n\n  public T Save(T item)\n  {\n    return item.Id == default(int) ? Create(item) : Update(item);\n  }           \n\n  public IRepository<T> Include(Expression<Func<T, object>> path)\n  {\n    // Nothing to do here since this function is for EntityFramework\n    // We are using Linq to Objects so there is not need for Include\n    return this;\n  }\n\n  private T Create(T item)\n  { \n    item.Id = ++_identityCounter;\n    DataSet.Add(item);\n    return item;\n  }\n\n  private T Update(T item)\n  {\n    var found = Get(x => x.Id == item.Id);\n\n    if(found == null)\n    {\n      throw new KeyNotFoundException($\"Item with Id {item.Id} not    \n        found!\");\n    }\n\n    DataSet.Remove(found);\n    DataSet.Add(item);\n\n    return item;\n  }\n}\n```", "```cs\nexport class FakeDataContext {\n   _identityCounter = 1;\n   _dataSet = [];\n\n   get DataSet() {\n     return this._dataSet;\n   }\n\n   set DataSet(value) {\n     this._dataSet = value;\n   }\n\n   get(predicate) {\n     if (typeof(predicate) !== 'function') {\n       throw new Error('Predicate must be a function');\n     }\n\n     const resultSet = this_dataSet.filter(predicate);\n\n     return resultSet.length >= 1 ? {...resultSet[0]} : null;\n   }\n\n   getAll() {\n     return this._dataSet.map((x) => {\n       return {...x};\n     });\n   }\n\n   save(item) {\n     return item.id ? this.update(item) : this.create(item);\n   }\n\n   update(item) {\n     if (!this._dataSet.some(x => x.id === item.id)) {\n       this._dataSet.push({...item});\n     } else {\n       let itemIndex = this._dataSet.findIndex(x => x.id === item.id);\n       this._dataSet[itemIndex] = {...item};\n     }\n\n     return {...item};\n   }\n\n   create(item) {\n     let newItem = {...item};\n     newItem.id = this._identityCounter++;\n     this._dataSet.push({...newItem});\n\n     return {...newItem};\n   }\n } \n```", "```cs\n[Fact]\npublic void ItAcceptsInterface()\n{\n  // Arrange \n  ISpeakerService testSpeakerService = new TestSpeakerService();\n\n  // Act\n  var controller = new SpeakerController(testSpeakerService);\n\n  // Assert\n  Assert.NotNull(controller);\n}\n```", "```cs\npublic SpeakerController(ISpeakerService speakerService)\n{\n}\n```", "```cs\npublic SpeakerControllerSearchTests()\n{\n  var testSpeakerService = new TestSpeakerService();\n\n  _controller = new SpeakerController(testSpeakerService);\n}\n```", "```cs\n[Fact]\npublic void ItCallsSearchServiceOnce()\n{ \n  // Arrange\n  // Act\n  _controller.Search(\"jos\");\n\n  // Assert\n  _speakerServiceMock.Verify(mock => mock.Search(It.IsAny<string>()), \n      Times.Once());\n}\n```", "```cs\nprivate readonly SpeakerController _controller;\nprivate static Mock<ISpeakerService> _speakerServiceMock;\n\npublic SpeakerControllerSearchTests()\n{\n  var speaker = new Speaker\n  {\n    Name = \"test\"\n  };\n\n  // define the mock\n  _speakerServiceMock = new Mock<ISpeakerService>();\n\n  // when search is called, return list of speakers containing speaker\n  _speakerServiceMock.Setup(x => x.Search(It.IsAny<string>()))\n      .Returns(() => new List<Speaker> { speaker });\n\n  // pass mock object as ISpeakerService\n  _controller = new SpeakerController(_speakerServiceMock.Object);\n}\n```", "```cs\npublic interface ISpeakerService\n{\n  IEnumerable<Speaker> Search(string searchString);\n}\n```", "```cs\nprivate readonly ISpeakerService _speakerService;\n\npublic SpeakerController(ISpeakerService speakerService)\n{\n  _speakerService = speakerService;\n}\n\n[Route(\"search\")]\npublic IActionResult Search(string searchString)\n{\n  var hardCodedSpeakers = new List<Speaker>\n  {\n    new Speaker{Name = \"Josh\"},\n    new Speaker{Name = \"Joshua\"},\n    new Speaker{Name = \"Joseph\"},\n    new Speaker{Name = \"Bill\"},\n  };\n\n  _speakerService.Search(\"foo\");\n\n  var speakers = hardCodedSpeakers.Where(x =>   \n                       x.Name.StartsWith(searchString,  \n                       StringComparison.OrdinalIgnoreCase)).ToList();\n\n  return Ok(speakers);\n}\n```", "```cs\n[Fact]\npublic void GivenSearchStringThenSpeakerServiceSearchCalledWithString(){\n  // Arrange\n  var searchString = \"jos\";\n\n  // Act\n  _controller.Search(searchString);\n\n  // Assert\n  _speakerServiceMock.Verify(mock => mock.Search(searchString),   \n      Times.Once());\n}\n```", "```cs\n  _speakerService.Search(searchString);\n```", "```cs\n[Fact]\npublic void GivenSpeakerServiceThenResultsReturned()\n{\n  // Arrange\n  var searchString = \"jos\";\n\n  // Act \n  var result = _controller.Search(searchString) as OkObjectResult;\n\n  // Assert\n  Assert.NotNull(result);\n  var speakers = ((IEnumerable<Speaker>)result.Value).ToList();\n  Assert.Equal(_speakers, speakers);\n}\n```", "```cs\nprivate readonly SpeakerController _controller;\nprivate static Mock<ISpeakerService> _speakerServiceMock;\nprivate readonly List<Speaker> _speakers;\n\npublic SpeakerControllerSearchTests()\n{\n  _speakers = new List<Speaker> { new Speaker\n  {\n    Name = \"test\"\n  } };\n\n  _speakerServiceMock = new Mock<ISpeakerService>();\n  _speakerServiceMock.Setup(x => x.Search(It.IsAny<string>()))\n                .Returns(() => _speakers);\n\n  _controller = new SpeakerController(_speakerServiceMock.Object);\n}\n```", "```cs\nxUnit\n [Fact(Skip=\"Reason for skipping\")]\nMSTest\n [Skip]\n```", "```cs\nSpeakerService -> Search\n```", "```cs\n[Fact]\npublic void ItExists()\n{\n  var speakerService = new SpeakerService();\n}\n```", "```cs\n[Fact]\npublic void ItHasSearchMethod()\n{\n  var speakerService = new SpeakerService();\n\n  speakerService.Search(\"test\");\n}\n```", "```cs\n[Fact]\npublic void ItImplementsISpeakerService()\n{\n  var speakerService = new SpeakerService();\n\n  Assert.True(speakerService is ISpeakerService);\n}\n```", "```cs\npublic class SpeakerService : ISpeakerService\n{\n  public IEnumerable<Speaker> Search(string searchString)\n  {\n    return new List<Speaker>();\n  }\n}\n```", "```cs\n[Fact]\npublic void GivenExactMatchThenOneSpeakerInCollection()\n{\n  // Arrange\n  // Act\n  var result = _speakerService.Search(\"Joshua\");\n\n  // Assert\n  var speakers = result.ToList();\n  Assert.Equal(1, speakers.Count);\n  Assert.Equal(\"Joshua\", speakers[0].Name);\n}\n```", "```cs\n[Theory]\n[InlineData(\"Joshua\")]\n[InlineData(\"joshua\")]\n[InlineData(\"JoShUa\")]\npublic void GivenCaseInsensitveMatchThenSpeakerInCollection(string searchString)\n{\n  // Arrange\n  // Act\n  var result = _speakerService.Search(searchString);\n\n  // Assert\n  var speakers = result.ToList();\n  Assert.Equal(1, speakers.Count);\n  Assert.Equal(\"Joshua\", speakers[0].Name);\n}\n```", "```cs\n[Fact]\npublic void GivenNoMatchThenEmptyCollection()\n{\n  // Arrange\n  // Act\n  var result = _speakerService.Search(\"ZZZ\");\n\n  // Assert\n  var speakers = result.ToList();\n  Assert.Equal(0, speakers.Count);\n}\n\n[Fact]\npublic void Given3MatchThenCollectionWith3Speakers()\n{\n  // Arrange\n  // Act\n  var result = _speakerService.Search(\"jos\");\n\n  // Assert\n  var speakers = result.ToList();\n  Assert.Equal(3, speakers.Count);\n  Assert.True(speakers.Any(s => s.Name == \"Josh\"));\n  Assert.True(speakers.Any(s => s.Name == \"Joshua\"));\n  Assert.True(speakers.Any(s => s.Name == \"Joseph\"));\n}\n```", "```cs\npublic class SpeakerService : ISpeakerService\n{\n  public IEnumerable<Speaker> Search(string searchString)\n  {\n    var hardCodedSpeakers = new List<Speaker>\n    {\n      new Speaker{Name = \"Josh\"},\n      new Speaker{Name = \"Joshua\"},\n      new Speaker{Name = \"Joseph\"},\n      new Speaker{Name = \"Bill\"},\n    };\n\n    var speakers = hardCodedSpeakers.Where(x => \n                        x.Name.StartsWith(searchString, \n                        StringComparison.OrdinalIgnoreCase)).ToList();\n\n    return speakers;\n  }\n}\n```"]