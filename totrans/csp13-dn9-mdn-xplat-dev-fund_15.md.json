["```cs\nGET /path/to/resource\nAccept: application/json \n```", "```cs\nHTTP/1.1 103 Early Hints\nLink: </style.css>; rel=preload; as=style\nLink: </script.js>; rel=preload; as=script \n```", "```cs\nPOST /path/to/resource\nContent-Length: 123\nContent-Type: application/json \n```", "```cs\nPUT /path/to/resource\nContent-Length: 123\nContent-Type: application/json \n```", "```cs\nPATCH /path/to/resource\nContent-Length: 123\nContent-Type: application/json \n```", "```cs\nDELETE /path/to/resource \n```", "```cs\n    dotnet new webapi -o Northwind.WebApi \n    ```", "```cs\n    <PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" /> \n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    // Add services to the container.\n    // Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi\n    builder.Services.AddOpenApi();\n    var app = builder.Build();\n    // Configure the HTTP request pipeline.\n    if (app.Environment.IsDevelopment())\n    {\n      app.MapOpenApi();\n    }\n    app.UseHttpsRedirection();\n    var summaries = new[]\n    {\n        \"Freezing\", \"Bracing\", \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\", \"Sweltering\", \"Scorching\"\n    };\n    app.MapGet(\"/weatherforecast\", () =>\n    {\n      var forecast = Enumerable.Range(1, 5).Select(index =>\n        new WeatherForecast\n        (\n          DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n          Random.Shared.Next(-20, 55),\n          summaries[Random.Shared.Next(summaries.Length)]\n        ))\n        .ToArray();\n      return forecast;\n    })\n    .WithName(\"GetWeatherForecast\");\n    app.Run();\n    internal record WeatherForecast(DateOnly Date,\n      int TemperatureC, string? Summary)\n    {\n      public int TemperatureF => 32 +\n        (int)(TemperatureC / 0.5556);\n    } \n    ```", "```cs\n    public partial class Program\n    {\n      static string[] summaries = { \"Freezing\", \"Bracing\",\n        \"Chilly\", \"Cool\", \"Mild\", \"Warm\", \"Balmy\", \"Hot\",\n        \"Sweltering\", \"Scorching\" };\n      internal static WeatherForecast[]? GetWeather(int days)\n      {\n        WeatherForecast[]? forecast = Enumerable.Range(1, days)\n          .Select(index => new WeatherForecast\n          (\n            DateOnly.FromDateTime(DateTime.Now.AddDays(index)),\n            Random.Shared.Next(-20, 55),\n            summaries[Random.Shared.Next(summaries.Length)]\n          ))\n          .ToArray();\n        return forecast;\n      }\n      internal record WeatherForecast(DateOnly Date,\n        int TemperatureC, string? Summary)\n      {\n        public int TemperatureF => 32 +\n          (int)(TemperatureC / 0.5556);\n      }\n    } \n    ```", "```cs\n    app.UseHttpsRedirection();\n    **app****.MapGet(****\"/weatherforecast/{days:int?}\"****,**\n     **(int days = 5) => GetWeather(days))**\n     **.WithName(****\"GetWeatherForecast\"****);**\n    app.Run(); \n    ```", "```cs\n    \"https\": {\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n    **\"launchBrowser\"****:****true****,**\n    **\"launchUrl\"****:****\"weatherforecast\"**, \n    ```", "```cs\n    \"applicationUrl\": \"https://localhost:**5151**;http://localhost:**5150**\", \n    ```", "```cs\napp.MapGet(\"/weatherforecast/{days:int?}\", ... \n```", "```cs\n**app****.MapGet****(\"/weatherforecast/{days:int:****min****(****5****)}\", ...** \n```", "```cs\napp.MapGet(\"/\", () => \"Hello World\").ShortCircuit(); \n```", "```cs\napp.MapShortCircuit(404, \"robots.txt\", \"favicon.ico\"); \n```", "```cs\napp.MapGet(\"/hello\", () => \"Hello World\"); \n```", "```cs\napp.MapGet(\"/user\", () => new {\n  FirstName = \"Bob\",\n  Age = 45 }); \n```", "```cs\n{\"firstName\":\"Bob\",\"age\":45} \n```", "```cs\n    <ItemGroup Label=\"To simplify use of WriteLine.\">\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup>\n    <ItemGroup>\n      <!-- change Sqlite to SqlServer if you prefer -->\n      <ProjectReference Include=\n    \"..\\Northwind.DataContext.Sqlite\\Northwind.DataContext.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Northwind.EntityModels; // To use AddNorthwindContext method. \n    ```", "```cs\n    builder.Services.AddNorthwindContext(); \n    ```", "```cs\nbuilder.Services.AddKeyedsingleton<IMemoryCache, BigCache>(\"big\");\nbuilder.Services.AddKeyedSingleton<IMemoryCache, SmallCache>(\"small\");\nclass BigCacheConsumer([FromKeyedServices(\"big\")] IMemoryCache cache)\n{\n  public object? GetData() => cache.Get(\"data\");\n}\nclass SmallCacheConsumer(IKeyedServiceProvider keyedServiceProvider)\n{\n  public object? GetData() => keyedServiceProvider\n    .GetRequiredKeyedService<IMemoryCache>(\"small\");\n} \n```", "```cs\nservices.AddMemoryCache(); \n```", "```cs\nprivate readonly IMemoryCache _cache; \n```", "```cs\n_cache.Set(key, data); \n```", "```cs\nreturn _cache.TryGetValue(key, out var data) ? data : null; \n```", "```cs\nservices.AddStackExchangeRedisCache(options =>\n  options.Configuration = \"localhost:6379\";\n  options.InstanceName = \"SampleInstance\";\n}); \n```", "```cs\nprivate readonly IDistributedCache _cache; \n```", "```cs\nawait _cache.SetStringAsync(key, value); \n```", "```cs\nreturn await _cache.GetStringAsync(key); \n```", "```cs\n    <PackageReference Include=\n      \"Microsoft.Extensions.Caching.Hybrid\" /> \n    ```", "```cs\n    using Microsoft.Extensions.Caching.Hybrid; // To use HybridCacheEntryOptions. \n    ```", "```cs\n    builder.Services.AddHybridCache(options =>\n    {\n      options.DefaultEntryOptions = new HybridCacheEntryOptions\n      {\n        Expiration = TimeSpan.FromSeconds(60),\n        LocalCacheExpiration = TimeSpan.FromSeconds(30)\n      };\n    }); \n    ```", "```cs\n    using Northwind.EntityModels; // To use Customer.\n    namespace Northwind.WebApi.Repositories;\n    public interface ICustomerRepository\n    {\n      Task<Customer?> CreateAsync(Customer c);\n      Task<Customer[]> RetrieveAllAsync();\n      Task<Customer?> RetrieveAsync(string id,\n        CancellationToken token);\n      Task<Customer?> UpdateAsync(Customer c);\n      Task<bool?> DeleteAsync(string id);\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore.ChangeTracking; // To use EntityEntry<T>.\n    using Northwind.EntityModels; // To use Customer.\n    using Microsoft.EntityFrameworkCore; // To use ToArrayAsync.\n    using Microsoft.Extensions.Caching.Hybrid; // To use HybridCache.\n    namespace Northwind.WebApi.Repositories;\n    public class CustomerRepository : ICustomerRepository\n    {\n      private readonly HybridCache _cache;\n      // Use an instance data context field because it should not be\n      // cached due to the data context having internal caching.\n      private NorthwindContext _db;\n      public CustomerRepository(NorthwindContext db,\n        HybridCache hybridCache)\n      {\n        _db = db;\n        _cache = hybridCache;\n      }\n    } \n    ```", "```cs\n    public Task<Customer[]> RetrieveAllAsync()\n    {\n      return _db.Customers.ToArrayAsync();\n    } \n    ```", "```cs\n    public async Task<Customer?> RetrieveAsync(string id,\n      CancellationToken token = default)\n    {\n      id = id.ToUpper(); // Normalize to uppercase.\n      return await _cache.GetOrCreateAsync(\n        key: id, // Unique key to the cache entry.\n        factory: async cancel => await _db.Customers\n          .FirstOrDefaultAsync(c => c.CustomerId == id, token),\n        cancellationToken: token);\n    } \n    ```", "```cs\n    public async Task<Customer?> CreateAsync(Customer c)\n    {\n      c.CustomerId = c.CustomerId.ToUpper(); // Normalize to uppercase.\n      // Add to database using EF Core.\n      EntityEntry<Customer> added =\n        await _db.Customers.AddAsync(c);\n      int affected = await _db.SaveChangesAsync();\n      if (affected == 1)\n      {\n        // If saved to database then store in cache.\n        await _cache.SetAsync(c.CustomerId, c);\n        return c;\n      }\n      return null;\n    } \n    ```", "```cs\n    public async Task<Customer?> UpdateAsync(Customer c)\n    {\n      c.CustomerId = c.CustomerId.ToUpper();\n      _db.Customers.Update(c);\n      int affected = await _db.SaveChangesAsync();\n      if (affected == 1)\n      {\n        await _cache.SetAsync(c.CustomerId, c);\n        return c;\n      }\n      return null;\n    } \n    ```", "```cs\n    public async Task<bool?> DeleteAsync(string id)\n    {\n      id = id.ToUpper();\n      Customer? c = await _db.Customers.FindAsync(id);\n      if (c is null) return null;\n      _db.Customers.Remove(c);\n      int affected = await _db.SaveChangesAsync();\n      if (affected == 1)\n      {\n        await _cache.RemoveAsync(c.CustomerId);\n        return true;\n      }\n      return null;\n    } \n    ```", "```cs\n    using Northwind.WebApi.Repositories; // To use ICustomerRepository. \n    ```", "```cs\n    builder.Services.AddScoped<ICustomerRepository,\n      CustomerRepository>(); \n    ```", "```cs\n    using Microsoft.AspNetCore.Mvc; // To use ProblemDetails.\n    using Northwind.EntityModels; // To use Customer.\n    using Northwind.WebApi.Repositories; // To use ICustomerRepository.\n    static partial class Program\n    {\n      internal static void MapCustomers(this WebApplication app)\n      {\n        // GET: /customers\n        app.MapGet(pattern: \"/customers\", handler:\n          async (ICustomerRepository repo) =>\n        {\n          return await repo.RetrieveAllAsync();\n        });\n        // GET: customers/in/[country]\n        app.MapGet(pattern: \"/customers/in/{country}\", handler:\n          async (string country, ICustomerRepository repo) =>\n        {\n          return (await repo.RetrieveAllAsync())\n            .Where(customer => customer.Country == country);\n        });\n      }\n    } \n    ```", "```cs\n    // GET: customers/[id]\n    app.MapGet(\"/customers/{id:regex(^[A-Z]{{5}}$)}\",\n      async Task<IResult> (string id, ICustomerRepository repo,\n        CancellationToken token = default) =>\n    {\n      Customer? c = await repo.RetrieveAsync(id, token);\n      if (c is null)\n      {\n        return TypedResults.NotFound(); // 404 Resource not found.\n      }\n      return TypedResults.Ok(c); // 200 OK with customer in body.\n    }); \n    ```", "```cs\n    // POST: /customers\n    // BODY: Customer (JSON)\n    app.MapPost(pattern: \"/customers\", handler:\n      async Task<IResult> (Customer c,\n        ICustomerRepository repo) =>\n    {\n      if (c is null)\n      {\n        return TypedResults.BadRequest(); // 400 Bad request.\n      }\n      Customer? addedCustomer = await repo.CreateAsync(c);\n      if (addedCustomer is null)\n      {\n        return TypedResults.BadRequest(\"Repository failed to create customer.\");\n      }\n      else\n      {\n        return TypedResults.CreatedAtRoute( // 201 Created.\n          routeName: \"GetCustomer\",\n          routeValues: new { id = addedCustomer\n            .CustomerId.ToLower() },\n          value: addedCustomer);\n      }\n    }); \n    ```", "```cs\n    // PUT: /customers/[id]\n    // BODY: Customer (JSON)\n    app.MapPut(pattern: \"/customers/{id}\", handler:\n      async Task<IResult> (Customer c,\n        string id, ICustomerRepository repo,\n        CancellationToken token = default) =>\n    {\n      id = id.ToUpper();\n      c.CustomerId = c.CustomerId.ToUpper();\n      if (c is null || c.CustomerId != id)\n      {\n        return TypedResults.BadRequest(); // 400 Bad request.\n      }\n      Customer? existing = await repo.RetrieveAsync(id, token);\n      if (existing is null)\n      {\n        return TypedResults.NotFound(); // 404 Resource not found.\n      }\n      await repo.UpdateAsync(c);\n      return new TypedResults.NoContent(); // 204 No content.\n    }); \n    ```", "```cs\n    // DELETE: /customers/[id]\n    app.MapDelete(pattern: \"/customers/{id}\", handler:\n      async Task<IResult> (string id, ICustomerRepository repo,\n        CancellationToken token = default) =>\n    {\n      Customer? existing = await repo.RetrieveAsync(id, token);\n      if (existing is null)\n      {\n        return TypedResults.NotFound(); // 404 Resource not found.\n      }\n      bool? deleted = await repo.DeleteAsync(id);\n      if (deleted.HasValue && deleted.Value) // Short circuit AND.\n      {\n        return TypedResults.NoContent(); // 204 No content.\n      }\n      else\n      {\n        return TypedResults.BadRequest( // 400 Bad request.\n          $\"Customer {id} was found but failed to delete.\");\n      }\n    }); \n    ```", "```cs\n    **app****.MapCustomers();**\n    app.Run(); \n    ```", "```cs\n// Take control of problem details.\nif (id == \"bad\")\n{\n  ProblemDetails problemDetails = new()\n  {\n    Status = StatusCodes.Status400BadRequest,\n    Type = \"https://localhost:5151/customers/failed-to-delete\",\n    Title = $\"Customer ID {id} found but failed to delete.\",\n    Detail = \"More details like Company Name, Country and so on.\"\n  };\n  return TypedResults.BadRequest(problemDetails); // 400 Bad Request\n} \n```", "```cs\n    ### Configure a variable for the web service base address.\n    @base_address = https://localhost:5151/customers/\n    ### Make a GET request to the base address.\n    GET {{base_address}} \n    ```", "```cs\n    ### Get customers in Germany\n    GET {{base_address}}in/Germany\n    ### Get customers in USA\n    GET {{base_address}}in/USA\n    ### Get Alfreds Futterkiste\n    GET {{base_address}}ALFKI\n    ### Get a non-existent customer\n    GET {{base_address}}abcxy \n    ```", "```cs\n    ### Configure a variable for the web service base address.\n    @base_address = https://localhost:5151/customers/\n    ### Make a POST request to the base address.\n    POST {{base_address}}\n    Content-Type: application/json\n    {\n      \"customerID\": \"ABCXY\",\n      \"companyName\": \"ABC Corp\",\n      \"contactName\": \"John Smith\",\n      \"contactTitle\": \"Sir\",\n      \"address\": \"Main Street\",\n      \"city\": \"New York\",\n      \"region\": \"NY\",\n      \"postalCode\": \"90210\",\n      \"country\":  \"USA\",\n      \"phone\": \"(123) 555-1234\"\n    } \n    ```", "```cs\n{{$processEnv [%]envVarName}} \n```", "```cs\n{{$processEnv MY_SQL_PWD}} \n```", "```cs\n    <PackageReference Include=\"Microsoft.AspNetCore.OpenApi\" /> \n    ```", "```cs\n    // Learn more about configuring OpenAPI at https://aka.ms/aspnet/openapi\n    builder.Services.AddOpenApi(); \n    ```", "```cs\n    builder.Services.AddOpenApi(documentName: \"v2\"); \n    ```", "```cs\n    // Configure the HTTP request pipeline.\n    if (builder.Environment.IsDevelopment())\n    {\n      **app****.MapOpenApi****();**\n    } \n    ```", "```cs\napp.MapGet(\"/helloUsingMethods\", () => \"Hello world!\")\n  .WithSummary(\"This is a summary.\")\n  .WithDescription(\"This is a description.\");\napp.MapGet(\"/helloUsingAttributes\",\n  [EndpointSummary(\"This is a summary.\")]\n  [EndpointDescription(\"This is a description.\")]\n  () => \"Hello world!\"); \n```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Warning\"**,**\n    **\"Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware\"****:****\"Information\"**\n        }\n      }\n    } \n    ```", "```cs\n    using Microsoft.AspNetCore.HttpLogging; // To use HttpLoggingFields. \n    ```", "```cs\n    builder.Services.AddHttpLogging(options =>\n    {\n      options.LoggingFields = HttpLoggingFields.All;\n      options.RequestBodyLogLimit = 4096; // Default is 32k.\n      options.ResponseBodyLogLimit = 4096; // Default is 32k.\n    }); \n    ```", "```cs\n    app.UseHttpLogging(); \n    ```", "```cs\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[1]\n          Request:\n          Protocol: HTTP/2\n          Method: GET\n          Scheme: https\n          PathBase:\n          Path: /weatherforecast\n          Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7\n          Host: localhost:5151\n          User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36\n          Accept-Encoding: gzip, deflate, br\n          Accept-Language: en-US,en-GB;q=0.9,en;q=0.8,fr-FR;q=0.7,fr;q=0.6\n          Upgrade-Insecure-Requests: [Redacted]\n    ...\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\n          Response:\n          StatusCode: 200\n          Content-Type: application/json; charset=utf-8\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4]\n          ResponseBody: [{\"date\":\"2024-08-06\",\"temperatureC\":50,\"summary\":\"Freezing\",\"temperatureF\":121},{\"date\":\"2024-08-07\",\"temperatureC\":53,\"summary\":\"Scorching\",\"temperatureF\":127},{\"date\":\"2024-08-08\",\"temperatureC\":40,\"summary\":\"Mild\",\"temperatureF\":103},{\"date\":\"2024-08-09\",\"temperatureC\":8,\"summary\":\"Bracing\",\"temperatureF\":46},{\"date\":\"2024-08-10\",\"temperatureC\":-10,\"summary\":\"Freezing\",\"temperatureF\":15}]\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[8]\n          Duration: 6.8678ms \n    ```", "```cs\nvar builder = Host.CreateApplicationBuilder();\n// Option 1\nbuilder.Services.AddLogging(logging =>\n{\n  logging.AddEventLog();\n});\n// Option 2\nbuilder.Host.ConfigureLogging(logging =>\n{\n  logging.AddEventLog();\n});\n// Option 3: .NET 6 or later. Concise and recommended by Microsoft.\nbuilder.Logging.AddEventLog(); \n```", "```cs\nusing System.Runtime.InteropServices; // To use RuntimeInformation. \n```", "```cs\nif (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n{\n  // Call the AddEventLog method.\n} \n```", "```cs\nservices.AddW3CLogging(options =>\n{\n  options.AdditionalRequestHeaders.Add(\"x-forwarded-for\");\n  options.AdditionalRequestHeaders.Add(\"x-client-ssl-protocol\");\n}); \n```", "```cs\n    \"applicationUrl\": \"https://localhost:**5152**;http://localhost:**5153**\", \n    ```", "```cs\n    builder.Services.AddScoped(sp => new HttpClient {\n      BaseAddress = new Uri(\"https://localhost:5151/\") }); \n    ```", "```cs\n    const string corsPolicyName = \"allowWasmClient\"; \n    ```", "```cs\n    builder.Services.AddCors(options =>\n    {\n      options.AddPolicy(name: corsPolicyName,\n        policy =>\n        {\n          policy.WithOrigins(\"https://localhost:5152\",\n            \"http://localhost:5153\");\n        });\n    }); \n    ```", "```cs\n    app.UseCors(corsPolicyName); \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n    \"..\\Northwind.EntityModels.Sqlite\\Northwind.EntityModels.Sqlite.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    @using Northwind.EntityModels @* To use Customer. *@ \n    ```", "```cs\n    @attribute [StreamRendering]\n    @page \"/customers/{country?}\"\n    @inject HttpClient Http\n    <h3>\n      Customers @(string.IsNullOrWhiteSpace(Country)\n        ? \"Worldwide\" : \"in \" + Country)\n    </h3>\n    @if (customers is null)\n    {\n      <p><em>Loading...</em></p>\n    }\n    else\n    {\n      <table class=\"table\">\n        <thead>\n          <tr>\n            <th>Id</th>\n            <th>Company Name</th>\n            <th>Address</th>\n            <th>Phone</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n          @foreach (Customer c in customers)\n          {\n            <tr>\n              <td>@c.CustomerId</td>\n              <td>@c.CompanyName</td>\n              <td>\n                @c.Address<br />\n                @c.City<br />\n                @c.PostalCode<br />\n                @c.Country\n              </td>\n              <td>@c.Phone</td>\n            </tr>\n          }\n        </tbody>\n      </table>\n    }\n    @code {\n      [Parameter]\n      public string? Country { get; set; }\n      private IEnumerable<Customer>? customers;\n      protected override async Task OnParametersSetAsync()\n      {\n        if (string.IsNullOrWhiteSpace(Country))\n        {\n          customers = await Http.GetFromJsonAsync\n            <Customer[]>(\"/customers\");\n        }\n        else\n        {\n          customers = await Http.GetFromJsonAsync\n            <Customer[]>($\"/customers/in/{Country}\");\n        }\n      }\n    } \n    ```", "```cs\n    <NavLink class=\"nav-link\" href=\"customers\">\n      <span class=\"bi bi-list-nested-nav-menu\" aria-hidden=\"true\"></span> Customers\n    </NavLink> \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:5151\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5150 \n    ```", "```cs\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:5152\n    info: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5153 \n    ```", "```cs\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]\n          Executed DbCommand (20ms) [Parameters=[], CommandType='Text', CommandTimeout='30']\n          SELECT \"c\".\"CustomerId\", \"c\".\"Address\", \"c\".\"City\", \"c\".\"CompanyName\", \"c\".\"ContactName\", \"c\".\"ContactTitle\", \"c\".\"Country\", \"c\".\"Fax\", \"c\".\"Phone\", \"c\".\"PostalCode\", \"c\".\"Region\"\n          FROM \"Customers\" AS \"c\"\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[2]\n          Response:\n          StatusCode: 200\n          Content-Type: application/json; charset=utf-8\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[4]\n          ResponseBody: [{\"customerId\":\"ALFKI\",\"companyName\":\"Alfreds Futterkiste\",\"contactName\":\"Maria Anders\",\"contactTitle\":\"Sales Representative\",\"address\":\"Obere Str. 57\",\"city\":\"Berlin\",\"region\":null,\"postalCode\":\"12209\",\"country\":\"Germany\",\"phone\":\"030-0074321\",\"fax\":\"030-0076545\",\"orders\":[]},...\n    info: Microsoft.AspNetCore.HttpLogging.HttpLoggingMiddleware[8]\n          Duration: 1039.4409ms \n    ```"]