["```cs\ninterface Modem\n{\n  public void dial(String phoneNumber);\n  public void hangup();\n  public void send(char c);\n  public char recv();\n}\n```", "```cs\ninterfaceISportCar\n{\n  bool Accelerate();\n  System.Drawing.Bitmap Photo { get; }\n  string Brand { get; }\n  int Speed { get; }\n  int MaxSpeed { get; }\n}\n```", "```cs\npublic class SportsCar : ISportCar\n{\n  public string Brand { get; }\n  public int MaxSpeed { get; }\n  public Bitmap Photo { get; }\n  public int Speed { get;privateset; }\n  public virtual bool Accelerate()\n  {\n    throw new NotImplementedException();\n  }\n}\n```", "```cs\nstring[] availableBrands = new string[] { \"Ferrari\", \"Mercedes\", \"BMW\" };\npublic SportsCar(string brand)\n{\n  if (!availableBrands.Contains(brand)) return;\n  else Brand = brand;\n  switch (brand)\n  {\n    case \"Ferrari\":\n      MaxSpeed = 350;\n      Photo = Properties.Resources.Ferrari;\n    break;\n    case \"Mercedes\":\n      MaxSpeed = 300;\n      Photo = Properties.Resources.Mercedes;\n    break;\n    case \"BMW\":\n      MaxSpeed = 270;\n      Photo = Properties.Resources.BMW;\n    break;\n  }\n}\n```", "```cs\nSportsCar theCar;\nprivate void cboPickUpCar_SelectedIndexChanged(object sender, EventArgs e)\n{\n  theCar = new SportsCar(cboPickUpCar.Text);\n  // refresh car's properties\n  txtMaxSpeed.Text = theCar.MaxSpeed.ToString();\n  pbPhoto.Image = theCar.Photo;\n}\n```", "```cs\npublic virtual bool Accelerate()\n{\n  bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n  Speed = (speedExceeded) ? Speed: Speed + SpeedIncr;\n  return speedExceeded;\n}\n```", "```cs\nprivate void btnAccelerate_Click(object sender, EventArgs e)\n{\n  theCar.Accelerate();\n  updateUI();\n}\nprivate void updateUI()\n{\n  txtSpeed.Text = theCar.Speed.ToString();\n}\n```", "```cs\npublic virtual bool Accelerate(bool advise)\n{\n  bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n  Speed = (speedExceeded) ? Speed : Speed + SpeedIncr;\n  if (speedExceeded && advise && (SpeedLimit!= null))\n  {\n    SpeedLimit(this, newEventArgs());\n  }\n  return speedExceeded;\n}\npublic event EventHandler SpeedLimit;\n```", "```cs\nprivate void btnAccelerate_Click(object sender, EventArgs e)\n{\n  if (theCar.Brand == \"Mercedes\")\n  {\n    theCar.Accelerate(true);\n  }\n  else { theCar.Accelerate(); }\n  updateUI();\n}\n```", "```cs\ntheCar.SpeedLimit += TheCar_SpeedLimit;\nprivate void TheCar_SpeedLimit(object sender, EventArgs e)\n{\n  MessageBox.Show(\"Speed limit attempted\");\n}\n```", "```cs\npublic class SpeedLimitData : EventArgs\n{\n  public DateTime moment { get; set; }\n  public int resultingSpeed { get; set; }\n}\n```", "```cs\npublic virtual bool Accelerate(bool advise)\n{\n  bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n  Speed = (speedExceeded) ? Speed : Speed + SpeedIncr;\n  if (speedExceeded && advise && (SpeedLimit!= null))\n  {\n    SpeedLimitData data = newSpeedLimitData()\n    {\n      moment = DateTime.Now,\n      resultingSpeed = Speed + SpeedIncr\n    };\n    SpeedLimit(this, data);\n  }\n  return speedExceeded;\n}\n```", "```cs\nprivate void TheCar_SpeedLimit(object sender, EventArgs e)\n{\n  var eventData = e as SpeedLimitData;\n  MessageBox.Show(\"Attempt to obtain \" + eventData.resultingSpeed +\n  \" Miles//hr at: \" + eventData.moment.ToLongTimeString(), \"Warning\",\n  MessageBoxButtons.OK, MessageBoxIcon.Warning);\n}\n```", "```cs\npublic eventEventHandler<int> LegalLimitCondition;\n```", "```cs\nconst int MaxLegal = 80;\n```", "```cs\npublic virtual bool Accelerate()\n{\n  bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n  bool legalExceeded = Speed + SpeedIncr >MaxLegal;\n  if (legalExceeded && LegalLimitCondition != null)\n  {\n    LegalLimitCondition(this, (Speed + SpeedIncr) - MaxLegal);\n  }\n  Speed = (speedExceeded) ? Speed: Speed + SpeedIncr;\n  return speedExceeded;\n}\npublic virtual bool Accelerate(bool advise)\n{\n  bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n  bool legalExceeded = Speed + SpeedIncr > MaxLegal;\n  if (legalExceeded && LegalLimitCondition != null)\n  {\n    LegalLimitCondition(this, (Speed + SpeedIncr) - MaxLegal);\n  }\n  if (speedExceeded && advise && (SpeedLimit!= null))\n  {\n    SpeedLimitData data = newSpeedLimitData()\n    {\n      moment = DateTime.Now,\n      resultingSpeed = Speed + SpeedIncr\n    };\n    SpeedLimit(this, data);\n  }\n  Speed = (speedExceeded) ? Speed : Speed + SpeedIncr;\n  return speedExceeded;\n}\n```", "```cs\ntheCar.LegalLimitCondition += TheCar_LegalLimitCondition;\nprivate void TheCar_LegalLimitCondition(object sender, int e)\n{\n  updateUI(e);\n}\n```", "```cs\nprivate void updateUI(int speedExcess = 0)\n{\n  txtSpeed.Text = theCar.Speed.ToString();\n  if (speedExcess > 0)\n  {\n    MessageBox.Show( \"Legal limit exceeded by \" + speedExcess + \" mi/h\");\n  }\n}\n```", "```cs\ninterface ISportCar\n{\n  bool Accelerate();\n  System.Drawing.Bitmap Photo { get; }\n  string Brand { get; }\n  int Speed { get; }\n  int MaxSpeed { get; }\n  eventEventHandler<int> LegalLimitCondition;\n}\n```", "```cs\npublic virtualbool Accelerate()\n{\n  bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n  bool legalExceeded = Speed + SpeedIncr > MaxLegal;\n  if (legalExceeded && LegalLimitCondition != null)\n  {\n    LegalLimitCondition(this, (Speed + SpeedIncr) - MaxLegal);\n  }\n  Speed = (speedExceeded) ? Speed: Speed + SpeedIncr;\n  return speedExceeded;\n}\n```", "```cs\npublic class SportsCarWithN : SportsCar, ISportCar\n{\n  public SportsCarWithN(string brand): base(brand) {}\n  public new bool Accelerate()\n  {\n    base.Accelerate();\n    bool speedExceeded = Speed + SpeedIncr > MaxSpeed;\n    if (speedExceeded && (SpeedLimit!= null))\n    {\n      SpeedLimitData data = new SpeedLimitData()\n      {\n        moment = DateTime.Now,\n        resultingSpeed = Speed + SpeedIncr\n      };\n      SpeedLimit(this, data);\n    }\n    Speed = (speedExceeded) ? Speed : Speed + SpeedIncr;\n    return speedExceeded;\n  }\n  public event EventHandler SpeedLimit;\n}\n```", "```cs\nISportCar theCar;\nprivate void cboPickUpCar_SelectedIndexChanged(object sender, EventArgs e)\n{\n  if (cboPickUpCar.Text == \"Mercedes\")\n  {\n    theCar = new SportsCarWithN(\"Mercedes\");\n    // subscription to SpeedLimit depends on type\n    ((SportsCarWithN)theCar).SpeedLimit += TheCar_SpeedLimit;\n  }\n  else\n  {\n    theCar = new SportsCar(cboPickUpCar.Text);\n  }\n  theCar.LegalLimitCondition += TheCar_LegalLimitCondition;\n  // refresh car's properties\n  txtMaxSpeed.Text = theCar.MaxSpeed.ToString();\n  pbPhoto.Image = theCar.Photo;\n  updateUI();\n}\n```", "```cs\nprivate void btnAccelerate_Click(object sender, EventArgs e)\n{\n  theCar.Accelerate();\n  updateUI();\n}\n```", "```cs\npublic class CarFactory\n{\n  SportsCar carInstance;\n  public SportsCar CreateCar(string car)\n  {\n    switch (car)\n    {\n      case \"Ferrari\":\n        carInstance = new SportsCar(car);\n        carInstance.MaxSpeed = 230;\n        carInstance.Photo = Properties.Resources.BMW;\n        break;\n      case \"BMW\":\n        carInstance = new SportsCar(car);\n        carInstance.MaxSpeed = 180;\n        carInstance.Photo = Properties.Resources.BMW;\n        break;\n      case \"Mercedes\":\n        carInstance = new SportsCarWithN(car);\n        carInstance.MaxSpeed = 200;\n        carInstance.Photo = Properties.Resources.Mercedes;\n        break;\n      default:\n        break;\n    }\n    return carInstance;\n  }\n}\n```", "```cs\nprivate void cboPickUpCar_SelectedIndexChanged(object sender, EventArgs e)\n{\n  var factory = new CarFactory();\n  theCar = factory.CreateCar(cboPickUpCar.Text);\n  // Event common to all cars\n  theCar.LegalLimitCondition += TheCar_LegalLimitCondition;\n  // Event specific to cars of type SportsCarWithN\n  if (theCar is SportsCarWithN) {\n    ((SportsCarWithN)theCar).SpeedLimit += TheCar_SpeedLimit;\n  }\n  // refresh car's properties\n  txtMaxSpeed.Text = theCar.MaxSpeed.ToString();\n  pbPhoto.Image = theCar.Photo;\n  updateUI();\n}\n```", "```cs\ncase\"Ford\":\n  carInstance = new SportsCarWithN(car);\n  carInstance.MaxSpeed = 210;\n  carInstance.Photo = Properties.Resources.Ford;\n  break;\n```", "```cs\npublic class UserInfoSingleton\n{\n  // A static variable for the instance, requires a lambda function,\n  // since the constructor is private.\n  private static readonly Lazy<UserInfoSingleton> instance =\n  new Lazy<UserInfoSingleton>(() =>newUserInfoSingleton());\n\n  // Private Constructor to avoid direct instantiation\n  private UserInfoSingleton() {\n    UserName = System.Environment.UserName;\n    CarBuyingTime = DateTime.Now;\n  }\n\n  // Property to access the instance\n  public static UserInfoSingleton Instance\n  {\n    get { return instance.Value; }\n  }\n  private string UserName { get; }\n  private DateTime CarBuyingTime { get; }\n}\n```", "```cs\nclass ShoppingCarsPortal\n{\n  static void Main(string[] args)\n  {\n    Console.Title = \"Demo of the Adapter Pattern\";\n    ITarget adapter = new VendorAdapter();\n    foreach (string brand in adapter.GetCars())\n    {\n      Console.WriteLine(\"Brand: \" + brand);\n    }\n    Console.ReadLine();\n  }\n}\n```", "```cs\npublic class ListOfCarsProvider\n{\n  public List<string> GetListOfCars()\n  {\n    List<string> carsList = newList<string>();\n    carsList.Add(\"Ferrari\");\n    carsList.Add(\"Mercedes\");\n    carsList.Add(\"BMW\");\n    carsList.Add(\"Ford\");\n    return carsList;\n  }\n}\n```", "```cs\ninterface ITarget\n{\n  List<string> GetCars();\n}\n```", "```cs\nclass VendorAdapter : ITarget\n{\n  public List<string> GetCars()\n  {\n    ListOfCarsProvider adaptee = new ListOfCarsProvider();\n    return adaptee.GetListOfCars();\n  }\n}\n```", "```cs\nSortingStrategy shell = newSortingClass(newShell());\nSortingStrategy quick = newSortingClass(newQuickSort());\nSortingStrategy bubble = newSortingClass(newBubble());\n```"]