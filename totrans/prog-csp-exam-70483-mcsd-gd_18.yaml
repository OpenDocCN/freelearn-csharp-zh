- en: Mock Test 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You need to write an application in which you create a class that establishes
    a connection with SQL Server and reads records in a certain table. We need to
    ensure the following in the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The class should automatically release all the connections after the operation
    is complete.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The class should support iteration.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of the following interfaces would you implement in the class?
  prefs: []
  type: TYPE_NORMAL
- en: '`IEnumerator`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IEquatable`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IComparable`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`IDisposable`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If you need to write a function that could be called with a varying number of
    parameters, what would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Interface
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Method overriding
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Method overloading
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lamda expressions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are writing an application in which you need to reverse a string. Which
    of the following code snippets would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`char[] characters = str.ToCharArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for (int start = 0, end = str.Length - 1; start < end; start++, end--)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[end] = str[start];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[start] = str[end];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string reversedstring = new string(characters);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(reversedstring);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`char[] characters = str.ToCharArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for (int start = 0, end = str.Length - 1; start < end; start++, end--)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[start] = str[end];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[end] = str[start];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string reversedstring = new string(characters);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(reversedstring);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`char[] characters = str.ToCharArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for (int start = 0, end = str.Length; start < end; start++, end--)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[start] = str[end];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[end] = str[start];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string reversedstring = new string(characters);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(reversedstring);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`char[] characters = str.ToCharArray();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`for (int start = 0, end = str.Length; start < end; ++start, end--)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[start] = str[end];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`characters[end] = str[start];`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string reversedstring = new string(characters);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`` `Console.WriteLine(reversedstring);` ``'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Which of the following features of Visual Studio would you use if you needed
    to compare the memory usage of different builds of the application?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IntelliSense
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the CPU usage from the performance profiler
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the memory usage from the performance profiler
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use UI analysis from the performance profiler
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following regex expressions would you use to ensure that the input
    being validated is a non-negative decimal number?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`^(?!\D+$)\+?\d*?(?:\.\d*)?$`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`^(?:[1-9]\d*|0)?(?:\.\d+)?$`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`^\d+(\.\d\d)?$`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`^(-)?\d+(\.\d\d)?$`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are developing an application in which we are using an assembly called X.
    If we need to debug the code in the assembly, which of the following should we
    do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the application, in Project Build Properties, set the Allow unsafe code
    property.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the application, in the Debug pane, in Debugging, set Enable native code
    and Continue.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the application, in the Debug pane, in Debugging, uncheck Enable Just My
    Code.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: For the application, in Project Debug Properties, select the Start external
    program radio button and select assembly X.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are creating an application with a `Student` class. We also have a variable
    called `students` declared in the application. Which of the following statements
    would you use to check whether the `students` variable is of a List of objects
    of type `Student`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(students.GetType() is List<Student>[])`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(students.GetType() is List<Student>)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(students is List<Student>[])`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `if(students is List<Student>)` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following code segments will not result in any loss of data?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance(Convert.ToDouble(deposit));`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(Double deposit)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance(Convert.ToDecimal(deposit));`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(Decimal deposit)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance(Convert.ToInt32(deposit));`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(int deposit)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance((Decimal)(deposit));`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(Decimal deposit)`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are writing an application in which we need to write some text to a file.
    The code syntax for this is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Which of the following lines would you insert in the preceding code to ensure
    the execution is not stopped until the file operation is in progress?
  prefs: []
  type: TYPE_NORMAL
- en: '`async stream.Write(encodedBits, 0, encodedBits.Length);`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await stream.Write(encodedBits,0, encodedBits.Length);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`async stream.WriteAsync(encodedBits,0, encodedBits.Length);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await stream.WriteAsync(encodedBits,0, encodedBits.Length);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are writing an application in which we have written the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: What would be the output of the program?
  prefs: []
  type: TYPE_NORMAL
- en: Compile-time error
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Runtime error
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside Acceleration of Ferrari`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside Acceleration of Car`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have an application in which we have written the following logic in a `while`
    loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: What would you do to convert it into the equivalent of a `for` loop?
  prefs: []
  type: TYPE_NORMAL
- en: '`for (int i = 0; i < 10 ; i++)`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`for (int i = 1; i < 10 ; i++)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`for (int i = 1; i < 10 ; ++i)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`for (int i = 1; i <= 10 ; i++)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`` `}` ``'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: What would be the output of the following program?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`01234`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1234`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`An error has occurred in collection operation`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`1234` `An error has occurred in collection operation` `Error logged for the
    application`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1234` `An error has occurred in collection operation` `An error has occurred
    in null reference operation` `Error logged for the application`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delegates can be instantiated by:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anonymous methods
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lambda expressions
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Named methods
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What action needs to be performed to move a thread to the run state when suspended?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resume
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Interrupt
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Abort
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Suspended
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What would be the output of the following program?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '`Creating object of DisposeImplementation`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside the dispose of class DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Inside the finalizer of class DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Creating object of DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside the dispose of class DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Runtime error in the application
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Creating object of DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside the finalizer of class DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Inside the dispose of class DisposeImplementation`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Look at the following program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: What would be the output when it is called using the following syntax?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`-7`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`7`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Run time error
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of these can be used to authenticate user input?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Symmetric algorithm
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Asymmetric algorithm
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hash values
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Digital signatures
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: We are working with a large group of student objects. You need to use a data
    structure that allows access to elements in any order and also allows duplicate
    values without needing to group them under a particular key. What would you choose?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Stack
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Dictionary
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Queue
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Your application is running multiple worker threads. How do you make sure your
    application waits for all threads to complete their execution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.Sleep()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.WaitAll()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.Join()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In an application, we are writing a method in a class that should be accessible
    to classes in the same class and in classes that are present in the same assembly
    that inherit from the class. What do you need?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Private protected
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Protected internal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Protected
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Internal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
