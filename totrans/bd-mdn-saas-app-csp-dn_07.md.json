["```cs\n\"kevin-chatham.aspnetcorerazor-html-css-class-completion\",\n\"syncfusioninc.blazor-vscode-extensions\",\n\"ms-dotnettools.vscode-dotnet-runtime\",\n\"ms-dotnettools.blazorwasm-companion\"\n```", "```cs\nFeature: Add a new habit to the list\nScenario: User adds a new habit to the list\nGiven Sara is on the Good Habits page\nAnd there is a button labeled \"Add new\"\nWhen Sara clicks the \"Add new\" button\nThen a form for adding a new habit should appear\nAnd the form should have input fields for the habit name, description, and category\nAnd the form should have a \"Save\" button\nAnd the form should have a \"Cancel\" button\nScenario: User saves a new habit to the list\nGiven Sara has filled out the form for adding a new habit\nWhen she clicks the \"Save\" button\nThen the new habit should be added to the list\nAnd the list should show the habit name, description, and category\nAnd the new habit should be displayed at the top of the list\nAnd the new habit should be highlighted to indicate it has been added successfully\nAnd the form for adding a new habit should disappear\n```", "```cs\ndotnet new blazorwasm -o GoodHabits.Client\ncd GoodHabits.Client\n```", "```cs\nusing Microsoft.AspNetCore.Components.Web;\nusing Microsoft.AspNetCore.Components.WebAssembly.Hosting;\nusing GoodHabits.Client;\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\nvar apiBaseAddress = \"http://localhost:5300/gateway/\";\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(apiBaseAddress) });\nawait builder.Build().RunAsync();\n```", "```cs\n@page \"/goodhabits\"\n@inject HttpClient httpClient\n<div class=\"row\">\n    <div class=\"col-md-4\">\n        <h3>Good Habits</h3>\n    </div>\n    <div class=\"col-md-8\">\n        <h3>Habit Details</h3>\n    </div>\n</div>\n@code {\n    private List<Habit> GoodHabits { get; set; } = new\n      List<Habit>()\n    {\n        new Habit { Name = \"Drink water\", Description =\n          \"Drink at least 8 glasses of water every day.\" },\n        new Habit { Name = \"Exercise\", Description = \"Do at\n          least 30 minutes of exercise every day.\" },\n        new Habit { Name = \"Meditation\", Description =\n          \"Meditate for at least 10 minutes every day.\" },\n    };\n    private class Habit\n    {\n        public int Id { get; set; }\n        public string Name { get; set; } = default!;\n        public string Description { get; set; } = default!;\n    }\n}\n```", "```cs\n<div class=\"@NavMenuCssClass nav-scrollable\" @onclick=\"ToggleNavMenu\">\n    <nav class=\"flex-column\">\n        <div class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"\"\n              Match=\"NavLinkMatch.All\">\n                <span class=\"oi oi-home\" aria-\n                  hidden=\"true\"></span> Home\n            </NavLink>\n        </div>\n        <div class=\"nav-item px-3\">\n            <NavLink class=\"nav-link\" href=\"goodhabits\">\n                <span class=\"oi oi-plus\" aria-\n                  hidden=\"true\"></span> Good Habits\n            </NavLink>\n        </div>\n    </nav>\n</div>\n```", "```cs\nprivate Habit? SelectedHabit { get; set; }\nprivate Habit? EditingHabit { get; set; }\nprivate Habit? AddingHabit { get; set; }\nprivate bool IsEditing { get; set; } = false;\n```", "```cs\nprivate void ShowDetails(Habit habit)\n{ SelectedHabit = habit;\n  IsEditing = false;\n}\n```", "```cs\nprivate void AddHabit()\n{\n  Habit newHabit = new Habit()\n  {\n    Name = \"New Habit\",\n    Description = \"Enter a description here\"\n  };\n  GoodHabits.Add(newHabit);\n  SelectedHabit = newHabit;\n}\n```", "```cs\nprivate void EditHabit(Habit habit)\n{\n  SelectedHabit = habit;\n  ShowEditForm();\n}\n```", "```cs\nprivate void DeleteHabit(Habit habit)\n{\n  GoodHabits.Remove(habit);\n  if (SelectedHabit == habit)\n  {\n    SelectedHabit = null;\n  }\n}\n```", "```cs\nprivate void ShowEditForm()\n{\n  IsEditing = true;\n  EditingHabit = new Habit() {\n    Id = SelectedHabit!.Id,\n    Name = SelectedHabit!.Name,\n    Description = SelectedHabit!.Description};\n}\n```", "```cs\nprivate void SaveHabit()\n{\n  GoodHabits.Add(EditingHabit!);\n  GoodHabits.Remove(SelectedHabit!);\n  IsEditing = false;\n  SelectedHabit = null;\n}\n```", "```cs\nprivate void CancelEdit()\n{\n  IsEditing = false;\n  EditingHabit = null;\n  SelectedHabit = null;\n}\n```", "```cs\n<ul class=\"list-group\">\n    @foreach (var habit in GoodHabits)\n    {\n        <li class=\"list-group-item d-flex justify-content-\n          between align-items-center\">\n            <span @onclick=\"() =>\n              ShowDetails(habit)\">@habit.Name</span>\n            <div>\n                <i class=\"oi oi-eye mr-2 text-primary\"\n                  @onclick=\"() => ShowDetails(habit)\"></i>\n                <i class=\"oi oi-pencil mr-2 text-primary\"\n                  @onclick=\"() => EditHabit(habit)\"></i>\n                <i class=\"oi oi-trash text-danger\"\n                  @onclick=\"() => DeleteHabit(habit)\"></i>\n            </div>\n        </li>\n    }\n</ul>\n<button class=\"btn btn-primary mt-3\" @onclick=\"AddHabit\">Add Habit</button>\n```", "```cs\n@if (SelectedHabit != null)\n{\n    <div class=\"card\">\n        <div class=\"card-body\">\n            @if (!IsEditing)\n            {\n                <h5 class=\"card-\n                  title\">@SelectedHabit.Name</h5>\n                <p class=\"card-\n                  text\">@SelectedHabit.Description</p>\n                <button class=\"btn btn-danger mt-3\"\n                  @onclick=\"() => DeleteHabit\n                  (SelectedHabit)\">Delete Habit</button>\n                <button class=\"btn btn-primary mt-3\"\n                  @onclick=\"() => ShowEditForm()\">Edit\n                  Habit</button>\n            }\n            else\n            {\n                <form>\n                    <div class=\"form-group\">\n                        <label for=\"edit-habit-\n                          name\">Name</label>\n                        <input type=\"text\" class=\"form-\n                          control\" id=\"edit-habit-name\"\n                          placeholder=\"Enter habit name\"\n                          @bind-value=\"EditingHabit.Name\"\n                          />\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"edit-habit-\n                          description\">Description</label>\n                        <textarea class=\"form-control\"\n                          id=\"edit-habit-description\"\n                          rows=\"3\" @bind=\n                          \"EditingHabit.Description\">\n                          </textarea>\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-\n                      primary mt-3\" @onclick=\"() =>\n                      SaveHabit()\">Save</button>\n                    <button type=\"button\" class=\"btn btn-\n                      secondary mt-3\" @onclick=\"() =>\n                      CancelEdit()\">Cancel</button>\n                </form>\n            }\n        </div>\n    </div>\n}\n```", "```cs\nif (app.Environment.IsDevelopment())\n{…}\n```", "```cs\n    app.UseCors(policy =>\n        policy.AllowAnyOrigin()\n              .AllowAnyHeader()\n              .AllowAnyMethod()\n              );\n```", "```cs\n    private const string ServiceEndpoint = \"http://localhost:5300/gateway/habits\";\n```", "```cs\nprivate List<Habit> GoodHabits { get; set; } = new List<Habit>();\n```", "```cs\nprotected override async Task OnInitializedAsync()\n{\n    httpClient.DefaultRequestHeaders.Add(\"tenant\",\n      \"CloudSphere\");\n    GoodHabits = await\n      httpClient.GetFromJsonAsync<List<Habit>>($\"\n      {ServiceEndpoint}\");\n}\n```", "```cs\n    private class CreateHabit\n    {\n        public string Name { get; set; } = default!;\n        public string Description { get; set; } = default!;\n        public int UserId { get; set; }\n    }\n    private class UpdateHabit\n    {\n        public string Name { get; set; } = default!;\n        public string Description { get; set; } = default!;\n    }\n```", "```cs\nprivate async Task AddHabit()\n{\n    var newHabit = new CreateHabit()\n    {\n        Name = \"New Habit\",\n        Description = \"Enter a description here\",\n        UserId = 101\n    };\n    var response = await httpClient\n      .PostAsJsonAsync(ServiceEndpoint, newHabit);\n    var habit = await response\n      .Content.ReadFromJsonAsync<Habit>();\n    // Add the new habit to the list of habits\n    GoodHabits.Add(habit!);\n    SelectedHabit = habit;\n}\n```", "```cs\n    private void DeleteHabit(Habit habit)\n    {\n        httpClient.DeleteAsync($\"{ServiceEndpoint}/\n          {habit.Id}\");\n        GoodHabits.Remove(habit);\n        if (SelectedHabit == habit)\n        {\n            SelectedHabit = null;\n        }\n    }\n```", "```cs\n    private void SaveHabit()\n    {\n        httpClient.PutAsJsonAsync($\"{ServiceEndpoint}/\n          {EditingHabit!.Id}\",\n                EditingHabit);\n        GoodHabits.Add(EditingHabit!);\n        GoodHabits.Remove(SelectedHabit!);\n        IsEditing = false;\n        SelectedHabit = null;\n    }\n```"]