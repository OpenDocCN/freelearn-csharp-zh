["```cs\nWWW-Authenticate: Basic realm=\"{description of the access-controlled area}\", charset=\"UTF-8\"\n```", "```cs\n https://aesop_rock:A3hw4s9f0cjeC@test-domain.com/test/url\n```", "```cs\nAuthorization: Basic <base64-encoded-credentials>\n```", "```cs\nj_public:A3r9f0cjeC\n```", "```cs\nAuthorization: Basic al9wdWJsaWM6QTNyOWYwY2plQw==\n```", "```cs\nAuthorization: Bearer <token>\n```", "```cs\nWWW-Authenticate: Digest\n    realm=\"http-auth@example.org\",\n    qop=\"auth, auth-int\",\n    algorithm=SHA-256,\n    nonce=\"7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v\",\n    opaque=\"FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS\"\n```", "```cs\nHA1 = SHA256(username:realm:password)\n```", "```cs\nHA2 = SHA256(method:resourceURI)\n```", "```cs\nresponse = SHA256(HA1:nonce:HA2)\n```", "```cs\nAuthorization: Digest username=\"Mufasa\",\n   realm=\"testrealm@host.com\",\n   uri=\"/dir/secured.html\",\n   response=\"6629fae49393a05397450978507c4ef1\",\n   nonce=\"7ypf/xlj9XXwfDPEoM4URrv/xwf94BcCAzFZH4GiTo0v\",\n   opaque=\"FQhe/qaU925kfnzjCev0ciny7QMkPqMAFRtzCUYo5tdS\"\n```", "```cs\ndotnet new webapi -n AuthSample\n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class AuthController : ControllerBase {\n\n  [HttpGet(\"secret\")]\n  public ActionResult<string> GetRestrictedResource() {\n    return \"This message is top secret!\";\n  }\n\n  [HttpPost(\"authenticate\")]\n  public void AuthenticateUser([FromBody] Credentials creds) {\n  }\n}\n```", "```cs\n[Authorize]\n[HttpGet(\"secret\")]\npublic ActionResult<string> GetRestrictedResource() {\n    return \"This message is top secret!\";\n}\n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\n[Authorize]\npublic class AuthController : ControllerBase {\n```", "```cs\n[HttpPost]\n[AllowAnonymous]\npublic void AuthenticateUser([FromBody] Credentials creds) {\n}\n```", "```cs\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n```", "```cs\nservices.AddAuthorization(options => {\n  options.AddPolicy(\"RequireManagerRole\", \n    policy => policy.RequireRole(\"Manager\"));\n});\n```", "```cs\n[Authorize(Policy = \"RequireManagerRole\")]\n```", "```cs\npublic static class SecurityService {\n  public static SymmetricSecurityKey GetSecurityKey() {\n      string key = \"0125eb1b-0251-4a86-8d43-8ebeeeb39d9a\";\n      return new SymmetricSecurityKey(Encoding.ASCII.GetBytes(key));\n  }\n\n  public static string GetIssuer() {\n      return \"https://our-issuer.com/oauth\";\n  }\n\n  public static string GetAudience() {\n      return \"we_the_audience\";\n  }\n}\n```", "```cs\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n  .AddJwtBearer(options => {\n    options.TokenValidationParameters = new TokenValidationParameters {\n      IssuerSigningKey = SecurityService.GetSecurityKey(),\n      RequireSignedTokens = true,\n      ValidateActor = false,\n      ValidateAudience = true,\n      ValidAudience = SecurityService.GetAudience(),\n      ValidateIssuer = true,\n      ValidIssuer = SecurityService.GetIssuer()\n    };\n  });\n```", "```cs\napp.UseAuthentication();\n```", "```cs\n{\n    \"aladdin\": \"open_sesame\",\n    \"dr_suess\": \"green_eggs_and_ham\",\n    \"jack_skellington\": \"halloween\"\n}\n```", "```cs\nprivate static Dictionary<string, string> _users { get; set; }\nstatic UserVault() {\n  try {\n    using (var sr = new StreamReader(\"user_vault.json\")) {\n      var json = sr.ReadToEnd();\n      _users = JsonConvert.DeserializeObject<Dictionary<string, string>>(json);\n    }\n  } catch (Exception e) {\n    throw e;\n  }\n}\n```", "```cs\npublic static bool ContainsCredentials(string userName, string password) {\n  if (_users.ContainsKey(userName)) {\n    string storedPassword;\n    if(_users.TryGetValue(userName, out storedPassword)){\n      return storedPassword.Equals(password);\n    }\n  }\n  return false;\n}\n```", "```cs\n[HttpPost]\n[AllowAnonymous]\npublic ActionResult<string> AuthenticateUser([FromBody] Credentials creds) {\n  if (UserVault.ContainsCredentials(creds.UserName, creds.Password)) {\n    var key = SecurityService.GetSecurityKey();\n    var signingCredentials = new SigningCredentials(key, SecurityAlgorithms.HmacSha256);\n    var identity = new ClaimsIdentity(new GenericIdentity(creds.UserName, \"username\"));\n```", "```cs\nprivate IEnumerable<Claim> GetClaims() {\n  return new List<Claim>() {\n    new Claim(\"secret_access\", \"true\"),\n    new Claim(\"excellent_code\", \"true\")\n  };\n}\n```", "```cs\nidentity.AddClaims(GetClaims());\n```", "```cs\n[HttpGet(\"secret\")]\npublic ActionResult<string> GetRestrictedResource() {\n    var validClaims = GetClaims().Select(x => x.Type);\n    var userClaims = HttpContext.User.Claims.Select(x => x.Type);\n    if (validClaims.Intersect(userClaims).Count() < 1) {\n        return StatusCode(403);\n    }\n    return \"This message is top secret!\";\n}\n```", "```cs\nvar handler = new JwtSecurityTokenHandler();\nvar token = handler.CreateToken(new SecurityTokenDescriptor() {\n  Issuer = SecurityService.GetIssuer(),\n  Audience = SecurityService.GetAudience(),\n  SigningCredentials = signingCredentials,\n  Subject = identity,\n  Expires = DateTime.Now.AddMinutes(10),\n  NotBefore = DateTime.Now\n});\n```", "```cs\n[HttpPost]\n[AllowAnonymous]\npublic ActionResult<string> AuthenticateUser([FromBody] Credentials creds) {\n  if (UserVault.ContainsCredentials(creds.UserName, creds.Password)) {\n    ... // Build and generate JWT token\n    return handler.WriteToken(token);\n  } else {\n    return StatusCode(401);\n}\n```"]