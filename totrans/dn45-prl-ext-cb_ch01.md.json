["```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n\n    Parallel.Invoke(() =>\n        {\n        Console.WriteLine(\"Starting first task using Parallel.Invoke\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words =client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Origin of Species word count: {0}\", wordArray.Count());\n        client.Dispose();\n        }\n    );\n    ```", "```cs\n    var secondTask = new Task(() =>\n        {\n        Console.WriteLine(\"Starting second task using Task.Start\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/16328/16328-8.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Beowulf word count: {0}\", wordArray.Count());\n        client.Dispose();\n        } \n      );\n    secondTask.Start();\n    ```", "```cs\n    Task.Factory.StartNew(() =>\n        {\n        Console.WriteLine(\"Starting third task using Task.Factory.StartNew\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/4300/4300.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Ulysses word count: {0}\", wordArray.Count());\n        client.Dispose();\n        }\n    );\n    //wait for Enter key to exit\n    Console.ReadLine();\n    ```", "```cs\nParallel.Invoke(( )=>DoSomething( ), ( )=>DoSomethingElse( ));\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    ```", "```cs\n    var task1 = Task.Factory.StartNew(() =>\n        {\n        Console.WriteLine(\"Starting first task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Origin of Species word count: {0}\", wordArray.Count());\n        }\n    );\n    ```", "```cs\n    task1.Wait();\n    Console.WriteLine(\"Task 1 complete. Creating Task 2 and Task 3.\");\n    ```", "```cs\n    var task2 = Task.Factory.StartNew(() =>\n    {\n      Console.WriteLine(\"Starting second task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/16328/16328-8.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Beowulf word count: {0}\", wordArray.Count());\n     });\n\n    var task3 = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Starting third task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/4300/4300.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Ulysses word count: {0}\", wordArray.Count());\n    });\n    ```", "```cs\n    Task.WaitAll(task2,task3);\n    Console.WriteLine(\"All tasks complete.\");\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";  \n    ```", "```cs\n    Task<int> task1 = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Starting first task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n    });\n\n    Task<int> task2 = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Starting second task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/16328/16328-8.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n    });\n\n     Task<int> task3 = Task.Factory.StartNew(()\n     {\n        Console.WriteLine(\"Starting third task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/4300/4300.txt\");\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n    });\n    ```", "```cs\n    Console.WriteLine(\"task1 is complete. Origin of Species word count: {0}\",task1.Result);\n    Console.WriteLine(\"task2 is complete. Beowulf word count: {0}\", task2.Result);\n    Console.WriteLine(\"task3 is complete. Ulysses word count: {0}\", task3.Result);\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    using System.Collections.Generic;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    ```", "```cs\n    var dictionary = new Dictionary<string, string>\n    {\n        {\"Origin of Species\", \"http://www.gutenberg.org/files/2009/2009.txt\"},\n        {\"Beowulf\", \"http://www.gutenberg.org/files/16328/16328-8.txt\"},\n        {\"Ulysses\", \"http://www.gutenberg.org/files/4300/4300.txt\"}\n    };\n    ```", "```cs\n    var tasks = new List<Task>();\n    ```", "```cs\n    foreach (var  pair in dictionary)\n    {\n    }\n    ```", "```cs\n    tasks.Add( Task.Factory.StartNew((stateObj) =>\n    {\n        var taskData = (KeyValuePair<string, string>)stateObj;\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(taskData.Value);\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        Console.WriteLine(\"Word count for {0}: {1}\", taskData.Key, wordArray.Count());\n    },pair));\n    ```", "```cs\n    Task.WaitAll(tasks.ToArray());\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nvar dictionary = new Dictionary<string, string>\n{\n    {\"Origin of Species\", \"http://www.gutenberg.org/files/2009/2009.txt\"},\n    {\"Beowulf\", \"http://www.gutenberg.org/files/16328/16328-8.txt\"},\n    {\"Ulysses\", \"http://www.gutenberg.org/files/4300/4300.txt\"}\n};\n```", "```cs\nvar tasks = new List<Task>();\n\nforeach (var pair in dictionary)\n{\n    tasks.Add( //TASK DECLARATION HERE   ));\n}\n```", "```cs\nTask.Factory.StartNew((stateObj) =>\n{\n    // TASK Body\n},pair ));}\n```", "```cs\nvar taskData = (KeyValuePair<string, string>)stateObj;\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    ```", "```cs\n    Task parent = Task.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Parent task starting\");\n        const string uri = \"http://www.gutenberg.org/files/2009/2009.txt\";\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var book = client.DownloadString(uri);\n        var wordArray = book.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        // Child Task will go here\n    });\n    ```", "```cs\n    Task.Factory.StartNew(()=>\n    {\n        Console.WriteLine(\"Child task starting\");\n        Console.WriteLine(\"Word count for Origin of Species: {0}\",wordArray.Count());\n        Console.WriteLine(\"Attached child task completed.\");\n    },TaskCreationOptions.AttachedToParent);\n    ```", "```cs\n    parent.Wait();\n    Console.WriteLine(\"Parent task completed.\");\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    var lazyCount = new Lazy<Task<int>>(()=\n    {\n      //Task declaration and body go here\n    });\n    ```", "```cs\n    Task<int>.Factory.StartNew(() =>\n    {\n        Console.WriteLine(\"Executing the task.\");\n        char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n        const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n        const string uri = \"http://www.gutenberg.org/files/2009/2009.txt\";\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(uri);\n        var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n    }));\n    ```", "```cs\n    Console.WriteLine(\"Calling the lazy variable\");\n    Console.WriteLine(\"Origin of species word count: {0}\",lazyCount.Value.Result );\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading.Tasks;\n    ```", "```cs\n    Task<int> task1 = Task.Factory.StartNew(() =>\n    {\n        const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n        Console.WriteLine(\"Starting the task.\");\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n        var ex = new WebException(\"Unable to download book contents\");\n        throw ex;\n        return 0;\n    });\n    ```", "```cs\n    try\n    {\n    }\n    catch (AggregateException aggEx)\n    { \n    }\n    ```", "```cs\n    try\n    {\n        task1.Wait();\n        if (!task1.IsFaulted)\n        {\n         Console.WriteLine(\"Task complete. Origin of Species word count: {0}\",task1.Result);\n        }\n    }\n    ```", "```cs\n    catch (AggregateException aggEx)\n    {\n        foreach (var ex in aggEx.InnerExceptions)\n        {\n          Console.WriteLine(\"Caught exception: {0}\", ex.Message);\n        }\n    }\n    ```", "```cs\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\n    private static bool HandleWebExceptions(Exception ex)\n    {\n        if (ex is WebException)\n        {\n          Console.WriteLine((\"Caught WebException: {0}\", ex.Message);\n          return true;\n        }\n        else\n        {\n          Console.WriteLine(\"Caught exception: {0}\", ex.Message);\n          return false;\n        }\n    }\n    ```", "```cs\n    try\n    {\n        task1.Wait();   \n        if (!task1.IsFaulted)\n        {\n          Console.WriteLine(\"Task complete. Origin of Species word count: {0}\",task1.Result);\n        }\n    }\n    catch (AggregateException aggEx)\n    {\n        aggEx.Handle(HandleWebExceptions);                \n    }\n    ```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    //Create a cancellation token source\n    CancellationTokenSource tokenSource = new CancellationTokenSource();\n    //get the cancellation token\n    CancellationToken token = tokenSource.Token;\n    ```", "```cs\n    Task<int> task1 = Task.Factory.StartNew(() =>\n    {\n        // The body of the task goes here                \n    }, token);  \n    ```", "```cs\n    //wait a bit for the cancellation\n    Thread.Sleep(2000);\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n    var client = new WebClient();\n    client.Headers.Add(\"user-agent\", headerText);\n    if(token.IsCancellationRequested)\n    {\n        client.Dispose();\n        throw new OperationCanceledException(token);\n    }\n    else\n    {\n        var book = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n        char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n        Console.WriteLine(\"Starting the task.\");\n        var wordArray = book.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n        return wordArray.Count();\n    }\n    ```", "```cs\n    Console.WriteLine(\"Has the task been cancelled?: {0}\", task1.IsCanceled);\n    //Cancel the token source\n    tokenSource.Cancel();\n    ```", "```cs\n    if (!task1.IsCanceled || !task1.IsFaulted)\n    {\n        try\n        {\n            if (!task1.IsFaulted)\n            {\n              Console.WriteLine(\"Origin of Specied word count: {0}\", task1.Result);\n            }\n        }\n        catch (AggregateException aggEx)\n        {\n        foreach (Exception ex in aggEx.InnerExceptions)\n        {\n              Console.WriteLine(\"Caught exception: {0}\", ex.Message);\n        }\n        }\n    }\n    else\n    {\n        Console.WriteLine(\"The task has been cancelled\");\n    }\n    ```", "```cs\n    Console.WriteLine(\"Press <Enter> to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nvar source = new CancellationTokenSource();\nsource.Token.Register(()=>\n{\n  Console.WriteLine(\"The operation has been cancelled.\");\n});\n```", "```cs\nvar source1 = new CancellationTokenSource();\nvar source2 = new CancellationTokenSource();\nvar linkedSource = CancellationTokenSource.CreateLinkedTokenSource(source1.Token, source2.Token);\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Net;\n    using System.Threading;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static void DisplayException(Task task, AggregateException outerEx, string bookName)\n    {\n        foreach (Exception innerEx in outerEx.InnerExceptions)\n        {\n          Console.WriteLine(\"Handled exception for {0}:{1}\",bookName,innerEx.Message);\n        }\n        Console.WriteLine(\"Cancellation status for book {0}: {1}\", bookName, task.IsCanceled);\n    }\n    ```", "```cs\n    //Create a cancellation token source\n    CancellationTokenSource tokenSource = new CancellationTokenSource();\n    //get the cancellation token\n    CancellationToken token = tokenSource.Token;\n    ```", "```cs\n    char[] delimiters = { ' ', ',', '.', ';', ':', '-', '_', '/', '\\u000A' };\n    const string headerText = \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.1; Trident/6.0)\";\n\n     Task<int> task1 = Task.Factory.StartNew(() =>\n    {\n        // wait for the cancellation to happen\n        Thread.Sleep(2000);\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        if (token.IsCancellationRequested)\n        {\n          client.Dispose();\n          throw new OperationCanceledException(token);\n        }\n        else\n        {\n          var words = client.DownloadString(@\"http://www.gutenberg.org/files/2009/2009.txt\");\n          Console.WriteLine(\"Starting the task for Origin of Species.\");\n          var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n          return wordArray.Count();\n        }\n    },token);\n\n     Task<int> task2 = Task.Factory.StartNew(() =>\n    {\n        // wait for the cancellation to happen\n        Thread.Sleep(2000);\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        if (token.IsCancellationRequested)\n        {\n          client.Dispose();\n          throw new OperationCanceledException(token);\n        }\n        else\n        {\n          var words = client.DownloadString(@\"http://www.gutenberg.org/files/16328/16328-8.txt\");\n          Console.WriteLine(\"Starting the task for Beowulf.\");\n          var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n          return wordArray.Count();\n        };\n    },token);\n\n    Task<int> task3 = Task.Factory.StartNew(() =>\n    {\n        // wait for the cancellation to happen\n        Thread.Sleep(2000);\n        var client = new WebClient();\n        client.Headers.Add(\"user-agent\", headerText);\n        if (token.IsCancellationRequested)\n        {\n          client.Dispose();\n          throw new OperationCanceledException(token);\n        }\n        else\n        {\n          var words = client.DownloadString(@\"http://www.gutenberg.org/files/4300/4300.txt\");\n          Console.WriteLine(\"Starting the task for Ulysses.\");\n          var wordArray = words.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);\n          return wordArray.Count();\n        };\n    },token);\n    ```", "```cs\n    //Cancel the token source\n    tokenSource.Cancel();\n    try\n    {\n        if (!task1.IsFaulted || !task1.IsCanceled)\n        {\n          Console.WriteLine(\"Origin of Specied word count: {0}\", task1.Result);\n        }\n    }\n    catch(AggregateException outerEx1)\n    {\n        DisplayException(task1, outerEx1, \"Origin of Species\");\n    }\n    try\n    {\n        if (!task2.IsFaulted || !task2.IsCanceled)\n        {\n          Console.WriteLine(\"Beowulf word count: {0}\", task2.Result);\n        }\n    }\n    catch (AggregateException outerEx2)\n    {\n        DisplayException(task2, outerEx2, \"Beowulf\");\n    }\n    try\n    {\n        if (!task3.IsFaulted || !task3.IsCanceled)\n        {\n          Console.WriteLine(\"Ulysses word count: {0}\", task3.Result);\n        }\n    }\n    catch (AggregateException outerEx3)\n    {\n       DisplayException(task3, outerEx3, \"Ulysses\");\n    }\n    Console.ReadLine();\n    ```", "```cs\nCancellationTokenSource tokenSource = new CancellationTokenSource();\nCancellationToken token = tokenSource.Token;\n\nTask<int> task1 = Task.Factory.StartNew(() =>\n{\n  ...\n},token);\nTask<int> task, = Task.Factory.StartNew(() =>\n{\n  ...\n},token);\n\ntokenSource.Cancel();\n```"]