["```cs\n<a1:KeyValueOfstringanyType>\n   <a1:Key>Id</a1:Key>\n   <a1:Value i:type=\"xs:int\">13</a1:Value>\n</a1:KeyValueOfstringanyType>\n```", "```cs\nstring nameSpace = \"<your WABS  namespace>\"; // WABS namespace\nstring defaultIssuer = \"owner\"; // WABS issuer - usually \"owner\"\nstring defaultKey = \"<your WABS key>\"; // WABS issuer key\nstring serviceName = \"gettingstartedwabs\";\nstring address = string.Format((IFormatProvider)CultureInfo.InvariantCulture, \"https://{0}.{1}/{2}/\",\nnameSpace, \"accesscontrol.windows.net\", \"WRAPv0.9\");\nstring payload = string.Format((IFormatProvider) CultureInfo.InvariantCulture,\n\"wrap_name={0}&wrap_password={1}&wrap_scope={2}\", defaultIssuer,\n                Uri.EscapeDataString(defaultKey),\n                Uri.EscapeDataString(\"http://\" + serviceName + \".biztalk.windows.net/default/$PartnerManagement/Partners\"));\n            HttpContent content = new StringContent(payload);\n            content.Headers.ContentType.MediaType = \"application/x-www-form-urlencoded\";\nusing (var client = new HttpClient())\n{\n   // get WRAP token\n   var response = await client.PostAsync(address, content);\n   response.EnsureSuccessStatusCode();\n   string token = await response.Content.ReadAsStringAsync();\n   token = Uri.UnescapeDataString(token.Split('&')[0]);\n}\n```", "```cs\n// get partner list\nclient.DefaultRequestHeaders.Add(\"x-ms-version\", \"1.0\");\nclient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"WRAP\", \"access_token=\\\"\" + token.Substring(18) + \"\\\"\");\nresponse = await client.GetAsync(\"https://\" + serviceName + \".biztalk.windows.net/default/$PartnerManagement/Partners\");\n// write out partner list\nConsole.WriteLine(\"Partners:\");\nSystem.Xml.XmlDocument doc = new XmlDocument();\ndoc.LoadXml(await response.Content.ReadAsStringAsync());\nforeach (XmlElement node in doc.SelectNodes(\"//*[local-name()='feed']//*[local-name()='entry']//*[local-name()='content']//*[local-name()='properties']//*[local-name()='Name']\"))\n{\n   Console.WriteLine(node.InnerText);\n}\nConsole.ReadLine(); // wait\n```"]