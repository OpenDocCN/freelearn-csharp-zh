["```cs\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Main(string[] _)\n    {\n      RunSingleProcessorExample();\n    }\n    ```", "```cs\n    static void RunSingleProcessorExample()\n    {\n      Thread thread = new(SingleProcessorExample);\n      thread.Start();\n    }\n    ```", "```cs\n    static void SingleProcessorExample()\n    {\n    string output = “Index: “;\n        for (int index = 0; index < 1000000; index++)\n    {\n          Console.WriteLine($”{output}{index}”);\n    }\n        Console.ReadKey();\n    }\n    ```", "```cs\n    Parallel.For(\n        0, 1000000, x => MultipleProcessorExample(x)\n    );\n    ```", "```cs\nvar productNames = GetProductNames();\n```", "```cs\nvar names = from name in productNames\n```", "```cs\n           where name.Length > 8\n```", "```cs\n           select name;\n```", "```cs\nvar productNames = GetProductNames();\n```", "```cs\nvar names = from name in productNames.AsParallel()\n```", "```cs\n           where name.Length > 8\n```", "```cs\n           select name;\n```", "```cs\nvar productNames = GetProductNames();\n```", "```cs\nvar names = from name in productNames\n```", "```cs\n             .AsParallel().AsOrdered()\n```", "```cs\n           where name.Length > 8\n```", "```cs\n           select name;\n```", "```cs\nvar productNames = GetProductNames();\n```", "```cs\nvar names = from name in productNames\n```", "```cs\n             .AsParallel()\n```", "```cs\n             .WithDegreeOfParallelism(2)\n```", "```cs\n           where name.Length > 8\n```", "```cs\n           select name;\n```", "```cs\n    BenchmarkRunner.Run<Benchmarks>();\n    ```", "```cs\n    private short[] data;\n    [GlobalSetup]\n    public void GlobalSetup()\n    {\n         integers = new Int16[Int16.MaxValue];\n         for (short x = 1; x <= integers.Length - 1; x++)\n         { \n         integers[x] = x; \n         }\n    }\n    ```", "```cs\n    [Benchmark]\n    public void StandardForEachLoopExample()\n    {\n         foreach (int x in integers)\n                 Console.WriteLine($”Item {x}: {x}”);\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ParallelForEachLoopExample()\n    {\n         Parallel.ForEach(integers, x => {\n             Console.WriteLine($”Item {x}: {x}”);\n         });\n    }\n    ```", "```cs\n     public List<string> DownloadWebsites1()\n            {\n                List<string> websitesContent = new();\n                HttpClient httpClient = new();\n\n                string[]? websites = new[]\n                {\n                “https://docs.microsoft.com”,      \n                 “https://ownCloud.com”,       \n                 “https://www.oanda.com/uk-en/”,     \n                 “https://azure.microsoft.com/en-gb/”  \n                };\n\n                foreach (string? website in websites)\n                {\n                    Console.WriteLine($”Downloading of \n                        {website} content has started.”);\n                    string websiteContent = \n                    httpClient.GetStringAsync(website)\n                    .GetAwaiter().GetResult();\n                    websitesContent.Add(websiteContent);\n                    Console.WriteLine($”Downloading of \n                        {website} content has finished.”);\n                }\n\n                httpClient.Dispose();\n\n                return websitesContent;\n            }\n    ```", "```cs\n [Benchmark]\n```", "```cs\n        public List<string> DownloadWebsites2()\n```", "```cs\n        {\n```", "```cs\n            List<string> websitesContent = new();\n```", "```cs\n            string[]? websites = new[]\n```", "```cs\n                {\n```", "```cs\n            \"https://docs.microsoft.com\",              \n```", "```cs\n            \"https://ownCloud.com\",\n```", "```cs\n            \"https://www.oanda.com/uk-en/\",        \n```", "```cs\n            \"https://azure.microsoft.com/en-gb/\"\n```", "```cs\n                };\n```", "```cs\n            Task[]? downloadJobs = websites\n```", "```cs\n                .Select(jobs => Task.Factory.StartNew(\n```", "```cs\n                    state =>\n```", "```cs\n                    {\n```", "```cs\n                        using HttpClient? httpClient = new \n```", "```cs\n                            HttpClient();\n```", "```cs\n                        string? website = state == null ? \n```", "```cs\n                            String.Empty : (string)state;\n```", "```cs\n                        Console.WriteLine($\"Downloading of \n```", "```cs\n                          {website} content has started.\");\n```", "```cs\n                        string result = \n```", "```cs\n                        httpClient.GetStringAsync(website)\n```", "```cs\n                        .GetAwaiter().GetResult();\n```", "```cs\n                        websitesContent.Add(result);\n```", "```cs\n                        Console.WriteLine($\"Downloading of \n```", "```cs\n                        {website} content has finished.\");\n```", "```cs\n                    }, jobs)\n```", "```cs\n                )\n```", "```cs\n                .ToArray();\n```", "```cs\n            Task.WaitAll(downloadJobs);\n```", "```cs\n            return websitesContent;\n```", "```cs\n        }\n```", "```cs\n [Benchmark]\n```", "```cs\n        public List<string> DownloadWebsites3()\n```", "```cs\n        {\n```", "```cs\n            List<string> websitesContent = new();\n```", "```cs\n            HttpClient httpClient = new();\n```", "```cs\n            List<string> websites = new()\n```", "```cs\n            {\n```", "```cs\n            \"https://docs.microsoft.com\",           \n```", "```cs\n            \"https://ownCloud.com\",\n```", "```cs\n             \"https://www.oanda.com/uk-en/\",               \n```", "```cs\n             \"https://azure.microsoft.com/en-gb/\"\n```", "```cs\n            };\n```", "```cs\n            websites.ForEach(website =>\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine($\"Downloading of \n```", "```cs\n                    {website} content has started.\");\n```", "```cs\n                string result = \n```", "```cs\n                  httpClient.GetStringAsync(website)\n```", "```cs\n                    .GetAwaiter().GetResult();\n```", "```cs\n                websitesContent.Add(result);\n```", "```cs\n                Console.WriteLine($\"Downloading of \n```", "```cs\n                    {website} content has finished.\");\n```", "```cs\n            });\n```", "```cs\n            httpClient.Dispose();\n```", "```cs\n            return websitesContent;\n```", "```cs\n        }\n```", "```cs\n        static void FuncAction()\n```", "```cs\n        {\n```", "```cs\n            int[] numbers = { 15, 10, 12, 17, 11, 13, 16, \n```", "```cs\n                14, 18 };\n```", "```cs\n            int additionResult = 0;\n```", "```cs\n            try\n```", "```cs\n            {\n```", "```cs\n                Parallel.ForEach(\n```", "```cs\n                    numbers,\n```", "```cs\n                    () => 0,\n```", "```cs\n                    (number, currentState, addition) =>\n```", "```cs\n                    {\n```", "```cs\n                        addition += number;\n```", "```cs\n                        Console.WriteLine($\"Thread: \n```", "```cs\n                       {Thread.CurrentThread.\n```", "```cs\n                        ManagedThreadId}, Number: \n```", "```cs\n                        {number}, Addition: {addition}\");\n```", "```cs\n                        return addition;\n```", "```cs\n                    },\n```", "```cs\n                    (addition) => Interlocked.Add(ref \n```", "```cs\n                         additionResult, addition)\n```", "```cs\n                );\n```", "```cs\n                Console.WriteLine($\"Addition Result: \n```", "```cs\n                    {additionResult}\");\n```", "```cs\n            }\n```", "```cs\n            catch (AggregateException e)\n```", "```cs\n            {\n```", "```cs\n                Console.WriteLine($\"Aggregate Exception: \n```", "```cs\n                    FuncAction.\\n{e.Message}\");\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n]Parallel.ForEach<TSource,TLocal>(IEnumerable<TSource>, \n```", "```cs\n    Func<TLocal>, Func<TSource,ParallelLoopState,Tlocal\n```", "```cs\n        ,TLocal>, Action<TLocal>).\n```", "```cs\nC:\\Program Files\\Microsoft Visual \n```", "```cs\nStudio\\2022\\Preview\\Common7\\IDE\\Extensions\\rf2nfg00.o0t\\CVC\n```", "```cs\nollectionCmd.exe\" /launch D:\\dev\\CH15_ParallelProgrammingDe\n```", "```cs\nbuggingAndProfilingSample\\CH15_ParallelProgrammingDebugging\n```", "```cs\nAndProfilingSample\\bin\\Debug\\net6.0\\CH15_ParallelProgrammin\n```", "```cs\ngDebuggingAndProfilingSample.exe /outdir D:\\Debugging\n```", "```cs\n    \\TraceData\n```"]