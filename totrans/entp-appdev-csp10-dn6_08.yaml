- en: '*Chapter 6*: Configuration in .NET 6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 6 章*：.NET 6 中的配置'
- en: A configuration in .NET 6 comprises the default settings as well as the runtime
    settings for your application; a configuration is a very powerful feature. We
    can update settings such as feature flags to enable or disable features, dependent
    service endpoints, database connection strings, logging levels, and much more,
    and control application behavior at runtime without recompilation.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6 中的配置包括默认设置以及应用程序的运行时设置；配置是一个非常强大的功能。我们可以更新设置，如功能标志以启用或禁用功能、依赖服务端点、数据库连接字符串、日志级别等，并在不重新编译的情况下控制应用程序的运行时行为。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解配置
- en: Leveraging built-in configuration providers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用内置配置提供程序
- en: Building a custom configuration provider
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义配置提供程序
- en: By the end of this chapter, you'll have a good grasp of configuration concepts,
    configuration providers, and how to leverage them in your projects, as well as
    being able to identify the configurations and configuration sources that are appropriate
    for your applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将很好地掌握配置概念、配置提供程序以及如何在项目中利用它们，以及能够识别适合你应用程序的配置和配置源。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You will need a basic understanding of.NET and Azure. The code for the chapter
    can be found here: https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/tree/main/Chapter06.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要对 .NET 和 Azure 有基本的了解。本章的代码可以在以下位置找到：https://github.com/PacktPublishing/Enterprise-Application-Development-with-C-10-and-.NET-6-Second-Edition/tree/main/Chapter06。
- en: Understanding configuration
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解配置
- en: 'A configuration is generally stored as `Program.cs`), you will get a default
    configuration provided by .NET 6\. In addition, you can configure different built-in
    and custom configuration sources, and then read them using different configuration
    providers whenever you need them anywhere in an application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 配置通常存储为 `Program.cs`（），你将获得 .NET 6 提供的默认配置。此外，你可以配置不同的内置和自定义配置源，并在需要时使用不同的配置提供程序读取它们：
- en: '![Figure 6.1 – Application and configuration'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – 应用和配置'
- en: '](img/Figure_6.1_B18507.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.1_B18507.jpg)'
- en: Figure 6.1 – Application and configuration
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – 应用和配置
- en: The preceding diagram shows a high-level relationship between an application,
    a configuration provider, and a configuration file. The application uses the configuration
    provider to read the configuration from the configuration source; the configuration
    can be environment-specific. **Env A** could be your development environment and
    **Env B** could be your production environment. At runtime, the application will
    read the right configurations based on the runtime context and environment where
    it's running.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图示显示了应用程序、配置提供程序和配置文件之间的高级关系。应用程序使用配置提供程序从配置源读取配置；配置可以是环境特定的。**Env A** 可能是你的开发环境，而
    **Env B** 可能是你的生产环境。在运行时，应用程序将根据其运行时的上下文和环境读取正确的配置。
- en: In the next section, we will see how a default configuration works and how to
    add and read configurations from the `appsettings.json` file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解默认配置的工作原理以及如何从 `appsettings.json` 文件中添加和读取配置。
- en: Default configuration
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认配置
- en: 'To understand how a default configuration works, let''s create a new .NET 6
    web API, set the project name as `TestConfiguration`, and open `Program.cs`. The
    following is a code snippet from the `Program.cs` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解默认配置的工作原理，让我们创建一个新的 .NET 6 Web API，将项目名称设置为 `TestConfiguration`，并打开 `Program.cs`
    文件。以下是从 `Program.cs` 文件中的代码片段：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: From the preceding code, we see that `WebApplication.CreateBuilder` takes care
    of providing the default configuration for the application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们看到 `WebApplication.CreateBuilder` 负责为应用程序提供默认配置。
- en: 'The loading of the configuration is done in the following order:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 配置的加载顺序如下：
- en: '`MemoryConfigurationProvider`: This loads configurations from in-memory collection
    as configuration key-value pairs.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`MemoryConfigurationProvider`：此提供程序从内存集合中加载配置，作为配置键值对。'
- en: '`ChainedConfigurationProvider`: This adds the host configuration and sets it
    as the first source. For more details on the host configuration, you can use this
    link: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0).'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ChainedConfigurationProvider`: 这添加主机配置并将其设置为第一个来源。有关主机配置的更多详细信息，您可以参考此链接：[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-6.0)。'
- en: '`JsonConfigurationProvider`: This loads the configurations from the `appsettings.json`
    file.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`JsonConfigurationProvider`: 这将从 `appsettings.json` 文件中加载配置。'
- en: '`JsonConfigurationProvider`: This loads the configurations from the `appsettings.Environment.json`
    file; `Environment` in `appsettings.Environment.json` can be set to refer to development,
    staging, or production.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`JsonConfigurationProvider`: 这将从 `appsettings.Environment.json` 文件中加载配置；在 `appsettings.Environment.json`
    中的 `Environment` 可以设置为开发、测试或生产。'
- en: '`EnvironmentVariablesConfigurationProvider`: This loads environment variable
    configurations.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`EnvironmentVariablesConfigurationProvider`: 这将加载环境变量配置。'
- en: As mentioned at the beginning of this section, a configuration is specified
    as key-value pairs in sources. Configuration providers that are added later (in
    terms of order) override previous key-value pair settings. For example, if you
    have a `DbConnectionString` key in `MemoryConfigurationProvider` as well as in
    `JsonConfigurationProvider`, the value of the `DbConnectionString` key in `JsonConfigurationProvider`
    will override the key-value pair settings of `MemoryConfigurationProvider`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如本节开头所述，配置在来源中指定为键值对。后来添加的配置提供程序（按顺序）覆盖了之前的键值对设置。例如，如果您在 `MemoryConfigurationProvider`
    和 `JsonConfigurationProvider` 中都有 `DbConnectionString` 键，则 `JsonConfigurationProvider`
    中的 `DbConnectionString` 键的值将覆盖 `MemoryConfigurationProvider` 的键值对设置。
- en: 'When you debug the `Program.cs` code, you can see the default configuration
    provided by `CreateDefaultBuilder` being injected into the configuration as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当您调试 `Program.cs` 代码时，您可以看到由 `CreateDefaultBuilder` 提供的默认配置被注入到配置中，如下所示：
- en: '![Figure 6.2 – Default configuration sources'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – 默认配置来源'
- en: '](img/Figure_6.2_B18507.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.2_B18507.jpg)'
- en: Figure 6.2 – Default configuration sources
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – 默认配置来源
- en: Let's see how we can add the configurations required for our application in
    the next section.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看看如何添加我们应用程序所需的配置。
- en: Adding configurations
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加配置
- en: As we saw in the previous section, there are multiple configuration sources
    available. The `appsettings.json` file is what is most widely used in real-world
    projects to add the configuration required for an application unless it's a secret
    and cannot be stored as plain text.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一小节所示，有多种配置来源可用。在现实世界的项目中，`appsettings.json` 文件是最广泛使用的，用于添加应用程序所需的配置，除非它是秘密信息，不能以纯文本形式存储。
- en: 'Let''s take a couple of common scenarios where we need configurations:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看在需要配置的几个常见场景：
- en: If we need an `ApplicationInsights` instrumentation key to add application telemetry,
    which can be part of our configuration
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们需要一个 `ApplicationInsights` 仪表化密钥来添加应用程序遥测，这可以是配置的一部分
- en: If we have dependent services that need to be invoked, which can be part of
    our configuration
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们有需要调用的依赖服务，这些服务可以是配置的一部分
- en: These can change from environment to environment (the values differ between
    development environments and production environments).
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这些配置可能因环境而异（开发环境和生产环境中的值不同）。
- en: 'You can add the following configurations to the `appsettings.json` file so
    that you can update it directly when there is a change and start consuming it
    without recompilation and deployment:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将以下配置添加到 `appsettings.json` 文件中，以便在发生更改时直接更新它，并在无需重新编译和部署的情况下开始使用它：
- en: '[PRE16]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: From the preceding code, we see that we have added a key-value pair for the
    `ApplicationInsights` instrumentation key, where the key is the `InstrumentationKey`
    string, and the value is the actual instrumentation key that the application needs
    to instrument telemetry in `ApplicationInsights`. In the `ApiConfigs` section,
    we have added multiple key-value pairs in hierarchical order with the configuration
    required to invoke our dependent services.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们看到我们为 `ApplicationInsights` 仪表化密钥添加了一个键值对，其中键是 `InstrumentationKey`
    字符串，值是应用程序需要用于在 `ApplicationInsights` 中仪表化遥测的实际仪表化密钥。在 `ApiConfigs` 部分，我们以分层顺序添加了多个键值对，包括调用我们的依赖服务所需的配置。
- en: In the next section, we will see how to read the configuration we have added.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何读取我们已添加的配置。
- en: Reading configurations
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 读取配置
- en: We have seen how we can add configurations to `appsettings.json`. In this section,
    we will see how we can read them inside our projects using the different options
    that are available.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何将配置添加到 `appsettings.json`。在本节中，我们将看到如何使用不同的选项在我们的项目中读取它们。
- en: 'The `builder.Configuration` object that you get in `Program.cs` provided by
    `WebApplication.CreateBuilder` implements the `Microsoft.Extensions.Configuration.IConfiguration`
    type, and you have the following options available to read in `IConfiguration`:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中由 `WebApplication.CreateBuilder` 提供的 `builder.Configuration`
    对象实现了 `Microsoft.Extensions.Configuration.IConfiguration` 类型，您有以下选项可用于读取 `IConfiguration`：
- en: '[PRE49]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Let's see how we can leverage these options from `Iconfiguration` to read the
    configurations that we added in the previous section, *Adding configurations*.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何利用 `Iconfiguration` 中的这些选项来读取我们在上一节中添加的配置，*添加配置*。
- en: 'To read the `ApplicationInsights` instrumentation key from `appsettings.json`,
    we can use the `string this[string key] { get; set; }` option using the following
    code in `Program.cs`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 `appsettings.json` 中读取 `ApplicationInsights` 仪表化密钥，我们可以在 `Program.cs` 中使用以下代码使用
    `string this[string key] { get; set; }` 选项：
- en: '[PRE79]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'To read `ApiConfigs`, we can use the following code. We can use a delimiter
    in the configuration keys for the configuration API to read the hierarchical configuration:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取 `ApiConfigs`，我们可以使用以下代码。我们可以使用分隔符在配置键中读取层次化配置：
- en: '[PRE80]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Note
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Reading this way using a delimiter is error-prone and difficult to maintain.
    The preferred approach is to use the **options** pattern provided in ASP.NET Core.
    Instead of reading each key/setting value one by one, the options pattern uses
    classes, which will also give you strongly typed access to the related settings.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 使用分隔符这种方式读取容易出错且难以维护。首选的方法是使用 ASP.NET Core 提供的 **options** 模式。而不是逐个读取每个键/设置值，选项模式使用类，这也会为您提供对相关设置的强类型访问。
- en: 'When configuration settings are isolated by scenarios into strongly typed classes,
    the application adheres to two important design principles:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 当配置设置通过场景隔离到强类型类中时，应用程序遵循两个重要的设计原则：
- en: The **interface segregation principle** (**ISP**), or encapsulation principle
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**接口隔离原则**（**ISP**）或封装原则'
- en: Separation of concerns
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关注点分离
- en: With ISP or encapsulation, you read the configuration through a well-defined
    interface or contract and depend only on the configuration settings you need.
    Also, if there is a huge configuration file, this will help in the separation
    of concerns, as different parts of the application won't be dependent on the same
    configuration, thus allowing them to be decoupled. Let's see how we can leverage
    the options pattern in our code.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ISP 或封装，您通过一个定义良好的接口或契约读取配置，并且只依赖于您需要的配置设置。此外，如果有一个非常大的配置文件，这将有助于关注点分离，因为应用程序的不同部分不会依赖于相同的配置，从而允许它们解耦。让我们看看我们如何利用代码中的选项模式。
- en: 'You can create the following `ApiConfig` and `ApiUrl` classes and add them
    to your project:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以创建以下 `ApiConfig` 和 `ApiUrl` 类并将它们添加到您的项目中：
- en: '[PRE81]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Add the following code in `Program.cs` to read the configuration using the
    `GetSection` method, and then call `Bind` to have the configuration bound to the
    strongly-typed class that we have:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中添加以下代码以使用 `GetSection` 方法读取配置，然后调用 `Bind` 以将配置绑定到我们已有的强类型类：
- en: '[PRE92]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '`GetSection` will read the specific section from `appsettings.json` with the
    specified key. `Bind` will attempt to bind the given object instance to the configuration
    values by matching property names to the configuration keys. `GetSection(string
    sectionName)` will return `null` if the requested section does not exist. In real-world
    programs, please ensure that you add null checks.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`GetSection` 将会读取 `appsettings.json` 中指定的特定部分。`Bind` 将尝试通过匹配属性名到配置键来将给定的对象实例绑定到配置值。`GetSection(string
    sectionName)` 如果请求的部分不存在，将返回 `null`。在实际的程序中，请确保您添加了空值检查。'
- en: In this section, we saw how we can add and read data from `appsettings.json`
    by using a configuration API. I also mentioned that we should use `appsettings.json`
    for plain text and not for secrets. In the next section, we will look at built-in
    configuration providers as well as how to add and read secrets using the Azure
    Key Vault configuration provider.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们看到了如何通过使用配置 API 添加和读取 `appsettings.json` 中的数据。我还提到我们应该使用 `appsettings.json`
    用于纯文本，而不是用于机密。在下一节中，我们将探讨内置配置提供程序以及如何使用 Azure Key Vault 配置提供程序添加和读取机密。
- en: Leveraging built-in configuration providers
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用内置配置提供程序
- en: 'There are multiple configuration sources available other than `appsettings.json`,
    and .NET 6 provides several built-in configuration providers to read from them.
    The following are built-in providers available for .NET 6:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 `appsettings.json` 之外，还有多个配置源可用，.NET 6 提供了多个内置配置提供程序来读取它们。以下是为 .NET 6 可用的内置提供程序：
- en: The Azure Key Vault configuration provider reads configurations from Azure Key
    Vault.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Key Vault 配置提供程序从 Azure Key Vault 中读取配置。
- en: The file configuration provider reads configurations from INI, JSON, and XML
    files.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件配置提供程序从 INI、JSON 和 XML 文件中读取配置。
- en: The command-line configuration provider reads configuration from command-line
    parameters.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 命令行配置提供程序从命令行参数中读取配置。
- en: The environment variable configuration provider reads configurations from environment
    variables.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境变量配置提供程序从环境变量中读取配置。
- en: The memory configuration provider reads configurations from in-memory collections.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内存配置提供程序从内存集合中读取配置。
- en: The Azure App Configuration provider reads configuration from Azure App configuration.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure 应用配置提供程序从 Azure 应用配置中读取配置。
- en: The key-per-file configuration provider reads configurations from a directory's
    files.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按文件密钥配置提供程序从目录的文件中读取配置。
- en: Let's see how we can leverage the Azure Key Vault configuration provider and
    the file configuration provider, as both are important and more widely used when
    compared to others.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何利用 Azure Key Vault 配置提供程序和文件配置提供程序，因为与其它提供程序相比，它们更为重要且更广泛地被使用。
- en: Note
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'You can use the following link to learn about other configuration providers
    that we are not covering in detail here: https://docs.microsoft.com/en-us/dotnet/core/extensions/configuration-providers.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下链接了解我们在此处未详细介绍的其它配置提供程序：https://docs.microsoft.com/en-us/dotnet/core/extensions/configuration-providers。
- en: Azure Key Vault configuration provider
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure Key Vault 配置提供程序
- en: Azure Key Vault is a cloud-based service that provides a centralized configuration
    source for securely storing passwords, certificates, API keys, and other secrets.
    This helps to keep our application secured and compliant from a security breach.
    Let's see how we can create a key vault, add a secret to it, and access it from
    an application using the Azure Key Vault configuration provider.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Key Vault 是一种基于云的服务，它提供了一个集中的配置源，用于安全地存储密码、证书、API 密钥和其他机密。这有助于确保我们的应用程序安全并符合安全漏洞的合规性。让我们看看如何创建一个密钥库，向其中添加一个机密，并使用
    Azure Key Vault 配置提供程序从应用程序中访问它。
- en: Creating a key vault and adding secrets
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建密钥库并添加机密
- en: 'In this section, we will use Azure Cloud Shell to create a key vault and add
    a secret. Azure Cloud Shell is browser-based and can be used to manage Azure resources.
    The following is the list of steps you need to take:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用 Azure Cloud Shell 创建一个密钥库并添加一个机密。Azure Cloud Shell 是基于浏览器的，可以用来管理
    Azure 资源。以下是需要您采取的步骤列表：
- en: 'Sign in to the Azure portal using [https://portal.azure.com](https://portal.azure.com).
    Select the Cloud Shell icon on the portal page:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 [https://portal.azure.com](https://portal.azure.com) 登录到 Azure 门户。在门户页面上选择云
    Shell 图标：
- en: '![Figure 6.3 – Azure Cloud Shell'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.3 – Azure 云 Shell'
- en: '](img/Figure_6.3_B18507.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.3_B18507.jpg)'
- en: Figure 6.3 – Azure Cloud Shell
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – Azure 云 Shell
- en: 'You will get the option to select **Bash** or **PowerShell**. Choose **PowerShell**.
    You can change shells at any time:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将获得选择 **Bash** 或 **PowerShell** 的选项。选择 **PowerShell**。您可以在任何时候更改外壳：
- en: '![Figure 6.4 – Azure Cloud Shell options – PowerShell and Bash'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.4 – Azure 云 Shell 选项 – PowerShell 和 Bash'
- en: '](img/Figure_6.4_B18507.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.4_B18507.jpg)'
- en: Figure 6.4 – Azure Cloud Shell options – PowerShell and Bash
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.4 – Azure 云 Shell 选项 – PowerShell 和 Bash
- en: 'Create a resource group with the following command:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令创建一个资源组：
- en: '[PRE94]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The actual command I ran for this demonstration is this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这个演示实际运行的命令如下：
- en: '[PRE95]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '`{RESOURCE GROUP NAME}` stands for the resource group name for the new resource
    group, and `{LOCATION}` stands for the Azure region (for your data center).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`{RESOURCE GROUP NAME}` 代表新资源组的资源组名称，而`{LOCATION}`代表Azure区域（数据中心）。'
- en: 'Create a key vault in the resource group with the following command:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在资源组中创建密钥保管库：
- en: '[PRE96]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: 'Here''s the actual command I ran for this demonstration:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我在此演示中实际运行的命令：
- en: '[PRE97]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '`{KEY VAULT NAME}` is the unique name for the new key vault.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`{KEY VAULT NAME}` 是新密钥保管库的唯一名称。'
- en: '`{RESOURCE GROUP NAME}` is the resource group name for the new resource group
    created in the prior step.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`{RESOURCE GROUP NAME}` 是在上一步骤中创建的新资源组的资源组名称。'
- en: '`{LOCATION}` is the Azure region (data center).'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`{LOCATION}` 是Azure区域（数据中心）。'
- en: 'Create secrets in the key vault as name-value pairs with the following command:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在密钥保管库中以名称-值对的形式创建密钥：
- en: '[PRE98]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: 'Here''s the actual command I ran for this demonstration:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我在此演示中实际运行的命令：
- en: '[PRE99]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '`{KEY VAULT NAME}` is the same key vault name that you created in the prior
    step.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`{KEY VAULT NAME}` 与您在上一步骤中创建的密钥保管库名称相同。'
- en: '`SecretName` is the name of your secret.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecretName` 是您的密钥名称。'
- en: '`SecretValue` is the value of your secret.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`SecretValue` 是您的密钥值。'
- en: 'We have now successfully created a key vault named `TestKeyVaultForConfig`
    and have added a secret with the key as `TestKey` and the value as `TestValue`
    using Azure Cloud Shell:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已成功创建了一个名为`TestKeyVaultForConfig`的密钥保管库，并使用Azure Cloud Shell添加了一个密钥为`TestKey`、值为`TestValue`的密钥：
- en: '![Figure 6.5 – Azure Key Vault secrets'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – Azure密钥保管库密钥'
- en: '](img/Figure_6.5_B18507.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – 图6.5_B18507.jpg](img/Figure_6.5_B18507.jpg)'
- en: Figure 6.5 – Azure Key Vault secrets
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – Azure密钥保管库密钥
- en: 'You can also use the Azure **command-line interface** (**CLI**) to create and
    manage Azure resources. You can read more about the Azure CLI here: https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用Azure **命令行界面**（**CLI**）创建和管理Azure资源。您可以在以下位置了解更多关于Azure CLI的信息：https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest。
- en: In the next section, we will see how to give our application access to Key Vault.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到如何让我们的应用程序访问密钥保管库。
- en: Granting application access to Key Vault
  id: totrans-199
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 授予应用程序访问密钥保管库的权限
- en: 'In this section, let''s see how our `TestConfiguration` web API can get access
    to Key Vault using the following steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看我们的`TestConfiguration` Web API如何通过以下步骤访问密钥保管库：
- en: Register the `TestConfiguration` application in **Azure Active Directory** (**AAD**)
    and create an identity. Sign in to the Azure portal using https://portal.azure.com.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Azure Active Directory**（**AAD**）中注册`TestConfiguration`应用程序并创建一个身份。使用https://portal.azure.com登录Azure门户。
- en: 'Navigate to **Azure Active Directory** | **App Registrations**. Click on **New
    registration**:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**Azure Active Directory** | **应用程序注册**。点击**新建注册**：
- en: '![Figure 6.6 – AAD new application registration'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – AAD新应用程序注册'
- en: '](img/Figure_6.6_B18507.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – 图6.6_B18507.jpg](img/Figure_6.6_B18507.jpg)'
- en: Figure 6.6 – AAD new application registration
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – AAD新应用程序注册
- en: 'Fill in the defaults and click on **Register**, as shown in the following screenshot,
    and note down the **Application (client) ID** value. This will be required later
    to access Key Vault:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写默认值并点击**注册**，如图下所示截图，并记下**应用程序（客户端）ID**值。稍后访问密钥保管库时需要使用此值：
- en: '![Figure 6.7 – AAD registration completion'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – AAD注册完成'
- en: '](img/Figure_6.7_B18507.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – 图6.7_B18507.jpg](img/Figure_6.7_B18507.jpg)'
- en: Figure 6.7 – AAD registration completion
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – AAD注册完成
- en: 'Click on **Certificates & secrets** (**1**) | **New client secret** (**2**)
    and enter a **Description** (**3**) value, then click on **Add** (**4**), as shown
    in the following screenshot. Note down the **AppClientSecret** value showing under
    **New client secret**, which is what the application can use to prove its identity
    when requesting a token:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**证书和密钥**（**1**） | **新建客户端密钥**（**2**），输入**描述**（**3**）值，然后点击**添加**（**4**），如图下所示截图。记下在**新客户端密钥**下显示的**AppClientSecret**值，这是应用程序在请求令牌时用来证明其身份的：
- en: '![Figure 6.8 – AAD new application secret creation for its identity'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – 为其身份创建AAD新应用程序密钥'
- en: '](img/Figure_6.8_B18507.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – 图6.8_B18507.jpg](img/Figure_6.8_B18507.jpg)'
- en: Figure 6.8 – AAD new application secret creation for its identity
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – 为其身份创建AAD新应用程序密钥
- en: 'Give the application access to Key Vault using an access policy. Search for
    the key vault you just created and select it:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用访问策略授予应用程序访问密钥保管库的权限。搜索您刚刚创建的密钥保管库并选择它：
- en: '![Figure 6.9 – Key vault search'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 – 密钥保管库搜索'
- en: '](img/Figure_6.9_B18507.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 – 图6.9_B18507.jpg](img/Figure_6.9_B18507.jpg)'
- en: Figure 6.9 – Key vault search
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – 密钥保管库搜索
- en: 'In the key vault properties, select **Access policies** under **Settings**
    and click on **Add Access Policy**:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Key Vault access policies'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B18507.jpg)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Key Vault access policies
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Select principal** field, search for your application and select the
    required permissions for your application to access Key Vault, then click on **Add**:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Add access policy'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.11_B18507.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – Add access policy
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: After adding the policy, you must save it. This will complete the process of
    granting your application access to Key Vault.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now given our application access to Key Vault. In the next section,
    we will see how to access Key Vault from our application using the Azure Key Vault
    configuration provider.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging the Azure Key Vault configuration provider
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we will make configuration and code changes in our application
    to leverage the Azure Key Vault configuration provider and access secrets from
    Key Vault, as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Accessing Key Vault during development'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.12_B18507.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – Accessing Key Vault during development
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the list of changes:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the key vault name, the `AppClientId` value that you noted down from *Figure
    6.7*, and the `AppClientSecret` value that you noted down from AAD from *Figure
    6.8* to the `appsettings.json` file in your `TestConfiguration` web API:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Key Vault section in appsettings.json'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.13_B18507.jpg)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Key Vault section in appsettings.json
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the following NuGet packages:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Microsoft.Azure.KeyVault`'
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.Extensions.Configuration.AzureKeyVault`'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Microsoft.Azure.Services.AppAuthentication`'
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update `Program.cs` to leverage the Azure Key Vault configuration provider
    to use your key vault. The following code will add Azure Key Vault as another
    configuration source and get all configurations using the Azure Key Vault configuration
    provider:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'Update `WeatherForecastController.cs` to read the secret from Key Vault, as
    follows:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: 'Include all references as per the code sample shared here. You can run the
    application and see the results:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Results from Key Vault'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.14_B18507.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – Results from Key Vault
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: The application will be able to access the key vault using the Azure Key Vault
    configuration provider and fetch the secrets. It is very simple, as all the heavy
    lifting is done by .NET 6, and we just need to install the NuGet packages and
    add a few lines of code. However, you will now probably be thinking about how
    `AppClientId` and `AppClientSecret` have been added to the `appsettings.json`
    config file and about how this is not very secure. You are 100% correct.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: 'We can fix this in two ways:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: One option is to encrypt and store these values in `appsettings.json`; they
    can then be read and decrypted in the code.
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reference
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For safe storage of app secrets in development, please refer to https://docs.microsoft.com/en-us/aspnet/core/security/app-secrets?view=aspnetcore-6.0&tabs=windows.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The other option is to use managed identities to access Azure resources, which
    allows the application to authenticate with Azure Key Vault using AAD authentication
    without credentials (the application ID and password/client secret).
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Your application can be authenticated using its identity by any service that
    supports AAD authentication, such as Azure Key Vault, and this will help us in
    getting rid of credentials from code:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Accessing Key Vault in production after deploying an application'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.15_B18507.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – Accessing Key Vault in production after deploying an application
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: This is the best practice we follow for applications that are deployed to production.
    Managing credentials in code is a common challenge and keeping credentials safe
    and secure is an important security requirement. Managed identities for Azure
    resources in AAD help in solving this challenge. Managed identities provide Azure
    services with an automatically managed identity in AAD. You can use this identity
    to authenticate any service that supports AAD authentication, including Key Vault,
    without any credentials in your code.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'You can read more about managed identities here: https://docs.microsoft.com/en-us/azure/active-directory/managed-identities-azure-resources/overview.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we saw how to create a key vault, how to add secrets to Key
    Vault, how to register our `TestConfiguration` web API in AAD, how to create a
    secret or identity, how to give the `TestConfiguration` web API access to Key
    Vault, and how to access Key Vault from our code using the Azure Key Vault configuration
    provider. You can also add Key Vault to your web application by using Visual Studio
    Connected Services, as described at https://docs.microsoft.com/en-us/azure/key-vault/general/vs-key-vault-add-connected-service:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Azure Key Vault as a connected service'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.16_B18507.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.16 – Azure Key Vault as a connected service
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will see how we can leverage the file configuration
    provider.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: File configuration provider
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The file configuration provider helps us to load a configuration from the filesystem.
    The JSON configuration provider and XML configuration provider derive their inheritance
    from the file configuration provider class and are used to read key-value pair
    configurations from JSON files and XML files, respectively. Let's see how we can
    add them to configuration sources as part of `CreateHostBuilder`.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: JSON configuration provider
  id: totrans-270
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The JSON configuration provider can be configured using the following code
    in `Program.cs`:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: In this case, the JSON configuration provider will load the `AdditionalConfig.json`
    file, and three parameters to the `AddJsonFile` method provide us with options
    to specify the filename, whether the file is optional, and whether the file must
    be reloaded when any changes are made to the file.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，JSON 配置提供者将加载 `AdditionalConfig.json` 文件，`AddJsonFile` 方法的三个参数为我们提供了指定文件名、文件是否可选以及文件在文件被修改时是否必须重新加载的选项。
- en: 'The following is the `AdditionalConfig.json` sample file:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `AdditionalConfig.json` 示例文件：
- en: '[PRE107]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'Then, we update `WeatherForecastController.cs` to read key-value pairs from
    the configurations loaded from the `AdditionalConfig.json` config file, as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将更新 `WeatherForecastController.cs` 以从加载自 `AdditionalConfig.json` 配置文件的配置中读取键值对，如下所示：
- en: '[PRE108]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: You can run the application and see the results. The application will be able
    to access the `AdditionalConfig.json` file and read the configuration. In the
    next section, we will look at the XML configuration provider.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行应用程序并查看结果。应用程序将能够访问 `AdditionalConfig.json` 文件并读取配置。在下一节中，我们将探讨 XML 配置提供者。
- en: XML configuration provider
  id: totrans-291
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: XML 配置提供者
- en: 'We will add a new file to the project with the name `AdditionalXMLConfig.xml`
    and the required configurations. The XML configuration provider can then be configured
    using the following code in `Program.cs` to read from the file we added:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在项目中添加一个名为 `AdditionalXMLConfig.xml` 的新文件和所需的配置。然后，可以使用以下代码在 `Program.cs`
    中配置 XML 配置提供者，以从我们添加的文件中读取：
- en: '[PRE117]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: In this case, the XML configuration provider will load the `AdditionalXMLConfig.xml`
    file and the three parameters provide us with options to specify the XML file,
    whether the file is optional or not, and whether the file must be reloaded when
    any changes are made.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，XML 配置提供者将加载 `AdditionalXMLConfig.xml` 文件，三个参数为我们提供了指定 XML 文件、文件是否可选以及文件在发生任何更改时是否必须重新加载的选项。
- en: 'The `AdditionalXMLConfig.xml` sample file is as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 `AdditionalXMLConfig.xml` 示例文件：
- en: '[PRE122]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'Next, we update `WeatherForecastController.cs` to read key-value pairs from
    the configuration loaded from `AdditionalXMLConfig.xml` as follows:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更新 `WeatherForecastController.cs` 以从 `AdditionalXMLConfig.xml` 加载的配置中读取键值对，如下所示：
- en: '[PRE127]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: You can run the application and see the results. The application will be able
    to access `AdditionalXMLConfig.xml` and read the configuration. With the JSON
    config file and the JSON configuration provider available in .NET 6, you don't
    need the XML config file and the XML configuration provider. That said, what we
    just covered is for folks who like XML files and open and close tags, for example.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以运行应用程序并查看结果。应用程序将能够访问 `AdditionalXMLConfig.xml` 并读取配置。在 .NET 6 中，JSON 配置文件和
    JSON 配置提供者可用，因此您不需要 XML 配置文件和 XML 配置提供者。话虽如此，我们刚才讨论的内容是针对那些喜欢 XML 文件和开闭标签的人来说的，例如。
- en: In the next section, we will see why a custom configuration provider is required
    and how to build one.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨为什么需要自定义配置提供者以及如何构建一个。
- en: Building a custom configuration provider
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义配置提供者
- en: In the previous section, we looked at built-in or pre-existing configuration
    providers in .NET 6\. There are scenarios where many systems maintain application
    configuration settings in a database. These could be managed by the admin from
    the portal or by the support engineer by running database scripts to create/update/delete
    application configuration settings as needed.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们讨论了 .NET 6 中的内置或现有配置提供者。存在一些场景，许多系统在数据库中维护应用程序配置设置。这些设置可以由管理员通过门户管理，或者由支持工程师通过运行数据库脚本来创建/更新/删除应用程序配置设置。
- en: '.NET 6 doesn''t come with a built-in provider to read configurations from a
    database. Let''s see how to build a custom configuration provider to read from
    a database with the following steps:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 6 并没有内置的提供者来从数据库中读取配置。让我们看看如何通过以下步骤构建一个自定义配置提供者来从数据库中读取：
- en: '**Implement configuration source**: To create an instance of the configuration
    provider'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现配置源**：为了创建配置提供者的实例'
- en: '**Implement configuration provider**: To load the configuration from the appropriate
    source'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现配置提供者**：为了从适当的源加载配置'
- en: '**Implement configuration extension**: To add the configuration source to the
    configuration builder'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现配置扩展**：为了将配置源添加到配置构建器中'
- en: Let's begin with the configuration source.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从配置源开始。
- en: Configuration source
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置源
- en: The responsibility of the configuration source is to create an instance of the
    configuration provider and return it to the source. It needs to inherit from the
    `IConfigurationSource` interface, which requires us to implement the `ConfigurationProvider
    Build(IConfigurationBuilder builder)` method.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 配置源的责任是创建配置提供者的一个实例并将其返回到源。它需要继承自`IConfigurationSource`接口，这要求我们实现`ConfigurationProvider
    Build(IConfigurationBuilder builder)`方法。
- en: 'Inside the `Build` method implementation, we need to create an instance of
    the custom configuration provider and return the same. There should also be the
    parameters needed to build the builder. In this case, as we are building a custom
    SQL configuration provider, the important parameters are the connection string
    and the SQL query. The following code snippet shows an example implementation
    of a `SqlConfigurationSource` class:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Build`方法实现中，我们需要创建自定义配置提供者的一个实例并返回它。还应该有构建构建器所需的参数。在这种情况下，因为我们正在构建自定义SQL配置提供者，所以重要的参数是连接字符串和SQL查询。以下代码片段展示了`SqlConfigurationSource`类的一个示例实现：
- en: '[PRE134]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: It is very simple and easy to implement this, as you can see. You get the parameters
    required to build the provider and create a new instance of the provider, then
    return the parameters. Let's see how we can build a SQL configuration provider
    in the next section.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，实现这个方法非常简单且容易。您获取构建提供者所需的参数，然后创建提供者的新实例，然后返回这些参数。让我们看看如何在下一节中构建一个SQL配置提供者。
- en: Configuration provider
  id: totrans-342
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置提供者
- en: The responsibility of the configuration provider is to load the required configuration
    from the appropriate source and return the same. It needs to inherit from the
    `IConfigurationProvider` interface, which requires us to implement the `Load()`
    method. The configuration provider class can instead inherit from the `ConfigurationProvider`
    base class as it has already implemented all the methods in the `IConfigurationProvider`
    interface. This will help us save time as we don't need to implement unused methods
    and can, instead, implement just the `Load` method.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 配置提供者的责任是从适当的位置加载所需的配置并返回相同的配置。它需要继承自`IConfigurationProvider`接口，这要求我们实现`Load()`方法。配置提供者类可以继承自`ConfigurationProvider`基类，因为它已经实现了`IConfigurationProvider`接口中的所有方法。这将帮助我们节省时间，因为我们不需要实现未使用的方法，而只需实现`Load`方法即可。
- en: 'Inside the `Load` method implementation, we need to have the logic to fetch
    the configuration data from the source. In this case, we will execute a query
    to fetch the data from the SQL store. The following code snippet shows an example
    implementation of a `SqlConfigurationProvider` class:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Load`方法实现中，我们需要有从源获取配置数据的逻辑。在这种情况下，我们将执行一个查询从SQL存储中获取数据。以下代码片段展示了`SqlConfigurationProvider`类的一个示例实现：
- en: '[PRE150]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: Let's see how to build a configuration extension in the next section.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在下一节中构建配置扩展。
- en: Configuration extension
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置扩展
- en: As with other providers, we can use an extension method to add the configuration
    source to the configuration builder.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他提供者一样，我们可以使用扩展方法将配置源添加到配置构建器中。
- en: Note
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Extension methods are static methods in which you can add methods to existing
    classes without modifying or recompiling the original class.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展方法是静态方法，您可以在不修改或重新编译原始类的情况下向现有类中添加方法。
- en: 'The following code snippet shows an example implementation of a `SqlConfigurationExtensions`
    class in the configuration builder:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了在配置构建器中`SqlConfigurationExtensions`类的一个示例实现：
- en: '[PRE184]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-386
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: '[PRE193]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: The extension method will reduce the code in our application startup.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展方法将减少我们应用程序启动时的代码量。
- en: 'We can add bootstrapping code to `Program.cs` just as we added it for other
    configuration providers, as shown in the following code:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`Program.cs`中添加引导代码，就像我们为其他配置提供者添加的那样，如下所示：
- en: '[PRE197]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: 'The following screenshot shows some sample configuration settings in a database.
    You can pass the appropriate connection string and SQL query in `config.AddSql()`
    and load the following configuration from the database. The SQL query may be a
    simple `select` statement to read all key-value pairs, as it is in the following
    screenshot:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了数据库中的一些示例配置设置。您可以在`config.AddSql()`中传递适当的连接字符串和SQL查询，并从数据库加载以下配置。SQL查询可能是一个简单的`select`语句，用于读取所有键值对，就像以下截图所示：
- en: '![Figure 6.17 – Database configuration settings'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.17 – 数据库配置设置'
- en: '](img/Figure_6.17_B18507.jpg)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.17_B18507.jpg)'
- en: Figure 6.17 – Database configuration settings
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: 'Update `WeatherForecastController.cs` as follows to read key-value pairs from
    the configuration loaded from the SQL configuration provider:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE198]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: You can run the application and see the results. The application will be able
    to access the SQL configuration and read the configuration.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: This is an example of just one custom configuration provider. You may be able
    to think of different scenarios where you would build other different custom configuration
    providers, such as when reading from CSV files or reading encrypted values from
    JSON or XML files and decrypting them.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we saw how configuration works in .NET 6, how the default configuration
    is provided to the application, how to add key-value pair configurations in a
    hierarchical order, how to read a configuration, how to leverage the Azure Key
    Vault configuration provider and the file configuration provider, and how to build
    a custom configuration provider to read from a SQL database. You now have the
    knowledge that's needed to implement different configurations in your project
    depending on the specific needs.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about logging and how it works in .NET 6.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-418
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After reading this chapter, you should be able to answer the following questions:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: What takes care of providing the default configuration for an application in
    .NET 6?
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `CreateDefaultBuilder`
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: b. `ChainedConfigurationProvider`
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: c. `JsonConfigurationProvider`
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: d. All of the above
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: a**'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following is not correct?
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. The Azure Key Vault configuration provider reads configurations from Azure
    Key Vault.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: b. The file configuration provider reads configurations from INI, JSON, and
    XML files.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: c. The command-line configuration provider reads configurations from a database.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: d. The memory configuration provider reads configurations from in-memory collections.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: c**'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: Which interface is used to access a configuration at runtime and is injected
    via dependency injection?
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. `IConfig`
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: b. `IConfiguration`
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: c. `IConfigurationSource`
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: d. `IConfigurationProvider`
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: b**'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Which provider/source is recommended for storing secrets in production?
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a. JSON from `appsettings.json`
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: b. `FileConfiguration` from an XML file
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: c. `AzureKeyVaultProvider` from `AzureKeyVault`
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: d. The command-line configuration provider from the command line
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '**Answer: c**'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-444
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: https://docs.microsoft.com/en-us/aspnet/core/blazor/fundamentals/configuration?view=aspnetcore-6.0
  id: totrans-445
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: https://docs.microsoft.com/en-us/aspnet/core/fundamentals/configuration/options?view=aspnetcore-6.0
  id: totrans-446
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
