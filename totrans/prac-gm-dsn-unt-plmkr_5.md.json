["```cs\n// Automatically added, compiler =directive \n// that makes JavaScript more explicit\n#pragma strict\n\n// Global variables available from Inspector\nvar pushMag : float = 20f;\n\nvar collisionTag : String = String.Empty;\n\n// Function that will detect the collision with \n// controller and apply force in point of the collision\nfunction OnControllerColliderHit (hit : ControllerColliderHit) \n{\n  if (hit.gameObject.tag == collisionTag)\n  {\n    // Get the position of the object we collided with\n    var hitObjectPos : Vector3 = hit.transform.position;\n\n    // Get the position of the collision\n    var hitPointPos : Vector3 = hit.point;\n\n    // Calculate the direction of the force, \n    // multiply it by magnitude\n    var pushForce : Vector3 = Vector3.Normalize(hitObjectPos - hitPointPos) * pushMag;\n\n    // Finally, apply force in position\n    hit.rigidbody.AddForceAtPosition(pushForce, hitPointPos);\n\n    // Print a message in Console saying that \n    //the collision did happen and force was indeed applied\n    Debug.Log(\"Detected hit with \" + collisionTag + \", applying force of \" + pushForce + \" in \" + hitPointPos + \".\");\n  }\n}\n@script RequireComponent(CharacterController)\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n[RequireComponent (typeof (CharacterController))]\n\npublic class PushPuckAction : MonoBehaviour \n{\n  // Global variables available from Inspector\n  public float pushMag = 20f;\n\n  public string collisionTag = string.Empty;\n\n  // Function that will detect the collision with \n  // controller and apply force in point of the collision\n  void OnControllerColliderHit (ControllerColliderHit hit) \n  {\n    if (hit.gameObject.tag == collisionTag)\n    {\n      // Get the position of the object we collided with\n      Vector3 hitObjectPos = hit.transform.position;\n\n      // Get the position of the collision\n      Vector3 hitPointPos = hit.point;\n\n      // Calculate the direction of the force, \n      // multiply it by magnitude\n      Vector3 pushForce = Vector3.Normalize(hitObjectPos - hitPointPos) * pushMag;\n\n      // Finally, apply force in position\n      hit.rigidbody.AddForceAtPosition(pushForce, hitPointPos);\n\n      // Print a message in Console saying that \n      //the collision did happen and force was indeed applied\n      Debug.Log(\"Detected hit with \" + collisionTag + \", applying force of \" + pushForce + \" in \" + hitPointPos + \".\");\n    }\n  }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace HutongGames.PlayMaker.Actions\n{\n  [ActionCategory(ActionCategory.Character)]\n  [Tooltip(\"Detect collision with CharacterController, then push the other object into the opposite direction.\")]\n  public class PushPuckAction : FsmStateAction \n  {\n    [Tooltip(\"Push magnitude\")]\n    public FsmFloat pushMag;\n\n    [Tooltip(\"Object with this tag will be pushed\")]\n    public FsmString collisionTag;\n\n    public override void Reset ()\n    {\n      pushMag = 20f;\n      collisionTag = string.Empty;\n    }\n\n    public override void DoControllerColliderHit(ControllerColliderHit hit)\n    {\n      if (hit.gameObject.tag == collisionTag.Value)\n      {\n        FsmVector3 hitObjectPos = hit.transform.position;\n\n        FsmVector3 hitPointPos = hit.point;\n\n        FsmVector3 pushForce = (hitObjectPos.Value - hitPointPos.Value).normalized * pushMag.Value;\n\n        hit.rigidbody.AddForceAtPosition(pushForce.Value, hitPointPos.Value);\n\n        Debug.Log(\"Detected hit with \" + collisionTag.Value + \", applying force of \" + pushForce.Value + \" in \" + hitPointPos.Value + \".\");\n      }\n    }\n  }\n}\n```"]