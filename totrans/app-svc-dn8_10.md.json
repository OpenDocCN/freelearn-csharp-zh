["```cs\n`* * * * * *`\n`- - - - - -`\n`| | | | | |`\n`| | | | | +--- day of week (0 - 6) (Sunday=0)`\n`| | | | +----- month (1 - 12)`\n`| | | +------- day of month (1 - 31)`\n`| | +--------- hour (0 - 23)`\n`| +----------- min (0 - 59)`\n`+------------- sec (0 - 59)` \n```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"NCrontab.Signed\" Version=\"3.3.3\" />\n    </ItemGroup> \n    ```", "```cs\n    using NCrontab; // To use CrontabSchedule and so on.\n    DateTime start = new(year: 2023, month: 1, day: 1);\n    DateTime end = start.AddYears(1);\n    WriteLine($\"Start at:   {start:ddd, dd MMM yyyy HH:mm:ss}\");\n    WriteLine($\"End at:     {end:ddd, dd MMM yyyy HH:mm:ss}\");\n    WriteLine();\n    string sec = \"0,30\";\n    string min = \"*\";\n    string hour = \"*\";\n    string dayOfMonth = \"*\";\n    string month = \"*\";\n    string dayOfWeek = \"*\";\n    string expression = string.Format(\n      \"{0,-3} {1,-3} {2,-3} {3,-3} {4,-3} {5,-3}\",\n      sec, min, hour, dayOfMonth, month, dayOfWeek);\n    WriteLine($\"Expression: {expression}\");\n    WriteLine(@\"            \\ / \\ / \\ / \\ / \\ / \\ /\");\n    WriteLine($\"             -   -   -   -   -   -\");\n    WriteLine($\"             |   |   |   |   |   |\");\n    WriteLine($\"             |   |   |   |   |   +--- day of week (0 - 6) (Sunday=0)\");\n    WriteLine($\"             |   |   |   |   +------- month (1 - 12)\");\n    WriteLine($\"             |   |   |   +----------- day of month (1 - 31)\");\n    WriteLine($\"             |   |   +--------------- hour (0 - 23)\");\n    WriteLine($\"             |   +------------------- min (0 - 59)\");\n    WriteLine($\"             +----------------------- sec (0 - 59)\");\n    WriteLine();\n    CrontabSchedule schedule = CrontabSchedule.Parse(expression, \n      new CrontabSchedule.ParseOptions { IncludingSeconds = true });\n    IEnumerable<DateTime> occurrences = schedule.GetNextOccurrences(start, end);\n    // Output the first 40 occurrences.\n    foreach (DateTime occurrence in occurrences.Take(40))\n    {\n      WriteLine($\"{occurrence:ddd, dd MMM yyyy HH:mm:ss}\");\n    } \n    ```", "```cs\n    Start at:   Sun, 01 Jan 2023 00:00:00\n    End at:     Mon, 01 Jan 2024 00:00:00\n    Expression: 0,30 *   *   *   *   *\n                \\ / \\ / \\ / \\ / \\ / \\ /\n                 -   -   -   -   -   -\n                 |   |   |   |   |   |\n                 |   |   |   |   |   +--- day of week (0 - 6) (Sunday=0)\n                 |   |   |   |   +------- month (1 - 12)\n                 |   |   |   +----------- day of month (1 - 31)\n                 |   |   +--------------- hour (0 - 23)\n                 |   +------------------- min (0 - 59)\n                 +----------------------- sec (0 - 59)\n    Sun, 01 Jan 2023 00:00:30\n    Sun, 01 Jan 2023 00:01:00\n    Sun, 01 Jan 2023 00:01:30\n    ...\n    Sun, 01 Jan 2023 00:19:30\n    Sun, 01 Jan 2023 00:20:00 \n    ```", "```cs\n    Start at:   Sun, 01 Jan 2023 00:00:00\n    End at:     Mon, 01 Jan 2024 00:00:00\n    Expression: 0   0   */4 *   *   *\n                \\ / \\ / \\ / \\ / \\ / \\ /\n                 -   -   -   -   -   -\n                 |   |   |   |   |   |\n                 |   |   |   |   |   +--- day of week (0 - 6) (Sunday=0)\n                 |   |   |   |   +------- month (1 - 12)\n                 |   |   |   +----------- day of month (1 - 31)\n                 |   |   +--------------- hour (0 - 23)\n                 |   +------------------- min (0 - 59)\n                 +----------------------- sec (0 - 59)\n    Sun, 01 Jan 2023 04:00:00\n    Sun, 01 Jan 2023 08:00:00\n    Sun, 01 Jan 2023 12:00:00\n    Sun, 01 Jan 2023 16:00:00\n    Sun, 01 Jan 2023 20:00:00\n    Mon, 02 Jan 2023 00:00:00\n    Mon, 02 Jan 2023 04:00:00\n    Mon, 02 Jan 2023 08:00:00\n    Mon, 02 Jan 2023 12:00:00\n    Mon, 02 Jan 2023 16:00:00\n    Mon, 02 Jan 2023 20:00:00\n    Tue, 03 Jan 2023 00:00:00\n    ...\n    Sat, 07 Jan 2023 12:00:00\n    Sat, 07 Jan 2023 16:00:00 \n    ```", "```cs\n    npm install -g azurite \n    ```", "```cs\n    dotnet build \n    ```", "```cs\n    func init --csharp \n    ```", "```cs\n    func new --name NumbersToWordsFunction --template \"HTTP trigger\" --authlevel \"anonymous\" \n    ```", "```cs\n    func start \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <AzureFunctionsVersion>v4</AzureFunctionsVersion>\n        <OutputType>Exe</OutputType>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n      </PropertyGroup>\n      <ItemGroup>\n        <PackageReference Version=\"1.19.0\" \n          Include=\"Microsoft.Azure.Functions.Worker\" />\n        <PackageReference Version=\"3.0.13\" \n          Include=\"Microsoft.Azure.Functions.Worker.Extensions.Http\" />\n        <PackageReference Version=\"1.14.0\"\n          Include=\"Microsoft.Azure.Functions.Worker.Sdk\" />\n      </ItemGroup>\n      <ItemGroup>\n        <None Update=\"host.json\">\n          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n        </None>\n        <None Update=\"local.settings.json\">\n          <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n          <CopyToPublishDirectory>Never</CopyToPublishDirectory>\n        </None>\n      </ItemGroup>\n      <ItemGroup>\n        <Using Include=\"System.Threading.ExecutionContext\" \n               Alias=\"ExecutionContext\" />\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    {\n      \"version\": \"2.0\",\n      \"logging\": {\n        \"applicationInsights\": {\n          \"samplingSettings\": {\n            \"isEnabled\": true,\n            \"excludedTypes\": \"Request\"\n          },\n          \"enableLiveMetricsFilters\": true\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"IsEncrypted\": false,\n      \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\"\n      }\n    } \n    ```", "```cs\n    {\n      \"profiles\": {\n        \"Northwind.AzureFunctions.Service\": {\n          \"commandName\": \"Project\",\n          \"commandLineArgs\": \"--port 7274\",\n          \"launchBrowser\": false\n        }\n      }\n    } \n    ```", "```cs\n    <PackageReference Include=\"Humanizer\" Version=\"2.14.1\" /> \n    ```", "```cs\n    using Humanizer; // To use ToWords extension method.\n    using Microsoft.Azure.Functions.Worker; // To use [HttpTrigger].\n    using Microsoft.Azure.Functions.Worker.Http; // To use HttpResponseData.\n    using Microsoft.Extensions.Logging; // To use ILogger.\n    namespace Northwind.AzureFunctions.Service;\n    public class NumbersToWordsFunction\n    {\n      private readonly ILogger _logger;\n      public NumbersToWordsFunction(ILoggerFactory loggerFactory)\n      {\n        _logger = loggerFactory.CreateLogger<NumbersToWordsFunction>();\n      }\n      [Function(nameof(NumbersToWordsFunction))]\n      public HttpResponseData Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous, \n          \"get\", \"post\", Route = null)] HttpRequestData req)\n      {\n        _logger.LogInformation(\"C# HTTP trigger function processed a request.\");\n        string? amount = req.Query[\"amount\"];\n        HttpResponseData response;\n        if (long.TryParse(amount, out long number))\n        {\n          response = req.CreateResponse(System.Net.HttpStatusCode.OK);\n          response.WriteString(number.ToWords());\n        }\n        else\n        {\n          response = req.CreateResponse(System.Net.HttpStatusCode.BadRequest);\n          response.WriteString($\"Failed to parse: {amount}\");\n        }\n        return response;\n      }\n    } \n    ```", "```cs\n    Azure Functions Core Tools\n    Core Tools Version:       4.0.5390 Commit hash: N/A  (64-bit)\n    Function Runtime Version: 4.25.3.21264\n    [2023-10-01T11:42:05.319Z] Found C:\\apps-services-net8\\Chapter10\\Northwind.AzureFunctions.Service\\Northwind.AzureFunctions.Service.csproj. Using for user secrets file configuration.\n    Functions:\n            NumbersToWordsFunction: [GET,POST] http://localhost:5101/api/NumbersToWordsFunction\n    For detailed output, run func with --verbose flag.\n    [2023-06-05T11:42:14.265Z] Host lock lease acquired by instance ID '00000000000000000000000011150C3D'. \n    ```", "```cs\n    [2023-101-01T11:32:51.574Z] Executing 'NumbersToWordsFunction' (Reason='This function was programmatically called via the host APIs.', Id=234d3122-ff3d-4896-94b3-db3c8b5013d8)\n    [2023-10-01T11:32:51.603Z] C# HTTP trigger function processed a request.\n    [2023-10-01T11:32:51.629Z] Executed 'NumbersToWordsFunction' (Succeeded, Id=234d3122-ff3d-4896-94b3-db3c8b5013d8, Duration=96ms) \n    ```", "```cs\n    <PackageReference Include=\"Microsoft.Azure.Functions.Extensions\" \n                      Version=\"1.1.0\" />\n    <PackageReference Version=\"4.2.0\" \n      Include=\"Microsoft.Azure.Functions.Worker.Extensions.Timer\" /> \n    ```", "```cs\n    using Microsoft.Extensions.DependencyInjection; // To use AddHttpClient().\n    using System.Net.Http.Headers; // To use MediaTypeWithQualityHeaderValue. \n    ```", "```cs\n    var host = new HostBuilder()\n      .ConfigureFunctionsWorkerDefaults()\n     **.ConfigureServices(services =>**\n     **{** \n     **services.AddHttpClient(name:** **\"Amazon\"****,** \n     **configureClient: options =>**\n     **{**\n     **options.BaseAddress =** **new** **Uri(****\"https://www.amazon.com\"****);**\n    **// Pretend to be Chrome with US English.**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"****text/html\"****));**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"application/xhtml+xml\"****));**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"application/xml\"****,** **0.9****));**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"image/avif\"****));**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"image/webp\"****));**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"image/apng\"****));**\n     **options.DefaultRequestHeaders.Accept.Add(**\n    **new** **MediaTypeWithQualityHeaderValue(****\"*/*\"****,** **0.8****));**\n\n     **options.DefaultRequestHeaders.AcceptLanguage.Add(**\n    **new** **StringWithQualityHeaderValue(****\"en-US\"****));**\n     **options.DefaultRequestHeaders.AcceptLanguage.Add(**\n    **new** **StringWithQualityHeaderValue(****\"en\"****,****0.8****));**\n     **options.DefaultRequestHeaders.UserAgent.Add(**\n    **new****(productName:** **\"Chrome\"****, productVersion:** **\"114.0.5735.91\"****));**\n     **});**\n     **})**\n      .Build();\n    host.Run(); \n    ```", "```cs\n    using Microsoft.Azure.Functions.Worker; // To use [Function].\n    using Microsoft.Extensions.Logging; // To use ILogger.\n    using System.IO.Compression; // To use GZipStream, CompressionMode.\n    namespace Northwind.AzureFunctions.Service;\n    public class ScrapeAmazonFunction\n    {\n      private const string relativePath = \n        \"12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\";\n      private readonly IHttpClientFactory _clientFactory;\n      private readonly ILogger _logger;\n      public ScrapeAmazonFunction(IHttpClientFactory clientFactory,\n        ILoggerFactory loggerFactory)\n      {\n        _clientFactory = clientFactory;\n        _logger = loggerFactory.CreateLogger<ScrapeAmazonFunction>();\n      }\n      [Function(nameof(ScrapeAmazonFunction))]\n      public async Task Run( // Every hour.\n        [TimerTrigger(\"0 0 * * * *\")] TimerInfo timer)\n      {\n        _logger.LogInformation($\"C# Timer trigger function executed at {\n          DateTime.UtcNow}.\");\n        _logger.LogInformation(\n          $\"C# Timer trigger function next three occurrences at: {\n            timer.ScheduleStatus?.Next}.\");\n        HttpClient client = _clientFactory.CreateClient(\"Amazon\");\n        HttpResponseMessage response = await client.GetAsync(relativePath);\n        _logger.LogInformation(\n          $\"Request: GET {client.BaseAddress}{relativePath}\");\n        if (response.IsSuccessStatusCode)\n        {\n          _logger.LogInformation(\"Successful HTTP request.\");\n          // Read the content from a GZIP stream into a string.\n          Stream stream = await response.Content.ReadAsStreamAsync();\n          GZipStream gzipStream = new(stream, CompressionMode.Decompress);\n          StreamReader reader = new(gzipStream);\n          string page = reader.ReadToEnd();\n          // Extract the Best Sellers Rank.\n          int posBsr = page.IndexOf(\"Best Sellers Rank\");\n          string bsrSection = page.Substring(posBsr, 45);\n          // bsrSection will be something like:\n          //   \"Best Sellers Rank: </span> #22,258 in Books (\"\n          // Get the position of the # and the following space.\n          int posHash = bsrSection.IndexOf(\"#\") + 1;\n          int posSpaceAfterHash = bsrSection.IndexOf(\" \", posHash);\n          // Get the BSR number as text.\n          string bsr = bsrSection.Substring(\n            posHash, posSpaceAfterHash - posHash);\n          bsr = bsr.Replace(\",\", null); // remove commas\n          // Parse the text into a number.\n          if (int.TryParse(bsr, out int bestSellersRank))\n          {\n            _logger.LogInformation(\n              $\"Best Sellers Rank #{bestSellersRank:N0}.\");\n          }\n          else\n          {\n            _logger.LogError(\n              $\"Failed to extract BSR number from: {bsrSection}.\");\n          }\n        }\n        else\n        {\n          _logger.LogError(\"Bad HTTP request.\");\n        }\n      }\n    } \n    ```", "```cs\n    Functions:\n            NumbersToWordsFunction: [GET,POST] http://localhost:5101api/NumbersToWordsFunction\n            ScrapeAmazonFunction: timerTrigger\n    For detailed output, run func with --verbose flag. \n    ```", "```cs\n    ### Configure a variable for the Azure Functions service base address.\n    @base_address = http://localhost:5101/\n    ### Get information about the NumbersToWordsFunction function.\n    {{base_address}}admin/functions/NumbersToWordsFunction\n    ### Get information about the ScrapeAmazonFunction function.\n    {{base_address}}admin/functions/ScrapeAmazonFunction \n    ```", "```cs\n    HTTP/1.1 200 OK\n    Content-Length: 918\n    Connection: close\n    Content-Type: application/json; charset=utf-8\n    Date: Mon, 05 Jun 2023 13:32:11 GMT\n    Server: Kestrel\n    {\n      \"name\": \"NumbersToWordsFunction\",\n      \"script_root_path_href\": null,\n      \"script_href\": \"http://localhost:5101/admin/vfs/bin/Northwind.AzureFunctions.Service.dll\",\n      \"config_href\": null,\n      \"test_data_href\": null,\n      \"href\": \"http://localhost:5101/admin/functions/NumbersToWordsFunction\",\n      \"invoke_url_template\": \"http://localhost:5101/api/numberstowordsfunction\",\n      \"language\": \"dotnet-isolated\",\n      \"config\": {\n        \"name\": \"NumbersToWordsFunction\",\n        \"entryPoint\": \"Northwind.AzureFunctions.Service.NumbersToWordsFunction.Run\",\n        \"scriptFile\": \"Northwind.AzureFunctions.Service.dll\",\n        \"language\": \"dotnet-isolated\",\n        \"functionDirectory\": null,\n        \"bindings\": [\n          {\n            \"name\": \"req\",\n            \"direction\": \"In\",\n            \"type\": \"httpTrigger\",\n            \"authLevel\": \"Anonymous\",\n            \"methods\": [\n              \"get\",\n              \"post\"\n            ],\n            \"properties\": {}\n          },\n          {\n            \"name\": \"$return\",\n            \"type\": \"http\",\n            \"direction\": \"Out\"\n          }\n        ]\n      },\n      \"files\": null,\n      \"test_data\": null,\n      \"isDisabled\": false,\n      \"isDirect\": true,\n      \"isProxy\": false\n    } \n    ```", "```cs\n    \"bindings\": [\n      {\n        \"name\": \"timer\",\n        \"direction\": \"In\",\n        \"type\": \"timerTrigger\",\n        \"schedule\": \"0 0 * * * *\",\n        \"properties\": {}\n      }\n    ], \n    ```", "```cs\n    ### Make a manual request to the Timer function.\n    POST {{base_address}}admin/functions/ScrapeAmazonFunction\n    Content-Type: application/json\n    {} \n    ```", "```cs\n    HTTP/1.1 202 Accepted \n    ```", "```cs\n    HTTP/1.1 400 Bad Request \n    ```", "```cs\n    [2023-10-01T13:49:53.939Z] Executing 'Functions.ScrapeAmazonFunction' (Reason='This function was programmatically called via the host APIs.', Id=1df349a1-79c5-4b52-a7f1-d0f8f0d5cd9c)\n    [2023-10-01T13:49:54.095Z] C# Timer trigger function executed at 01/10/2023 13:49:54.\n    [2023-10-01T13:49:54.095Z] C# Timer trigger function next occurrence at: 01/10/2023 14:00:00.\n    [2023-10-01T13:49:54.105Z] Start processing HTTP request GET https://www.amazon.com/12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\n    [2023-10-01T13:49:54.106Z] Sending HTTP request GET https://www.amazon.com/12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\n    [2023-10-01T13:49:54.520Z] Received HTTP response after 407.4353ms - OK\n    [2023-10-01T13:49:54.521Z] End processing HTTP request after 420.1273ms - OK\n    [2023-10-01T13:49:56.212Z] Successful HTTP request.\n    [2023-10-01T13:49:56.212Z] Request: GET https://www.amazon.com/12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\n    [2023-10-01T13:49:56.251Z] Best Sellers Rank #384,269.\n    [2023-10-01T13:49:56.275Z] Executed 'Functions.ScrapeAmazonFunction' (Succeeded, Id=1df349a1-79c5-4b52-a7f1-d0f8f0d5cd9c, Duration=2362ms) \n    ```", "```cs\n    [2023-10-01T14:00:00.023Z] Executing 'Functions.ScrapeAmazonFunction' (Reason='Timer fired at 2023-10-01T15:00:00.0220351+01:00', Id=aa9f7495-6066-4b0a-ba81-42582d677321)\n    [2023-10-01T14:00:00.027Z] C# Timer trigger function executed at 01/10/2023 14:00:00.\n    [2023-10-01T14:00:00.028Z] Start processing HTTP request GET https://www.amazon.com/12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\n    [2023-10-01T14:00:00.027Z] C# Timer trigger function next occurrence at: 01/10/2023 15:00:00.\n    [2023-10-01T14:00:00.028Z] Sending HTTP request GET https://www.amazon.com/12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\n    [2023-10-01T14:00:00.337Z] Received HTTP response after 305.1877ms - OK\n    [2023-10-01T14:00:00.339Z] End processing HTTP request after 305.5222ms - OK\n    [2023-10-01T14:00:01.899Z] Successful HTTP request.\n    [2023-10-01T14:00:01.899Z] Request: GET https://www.amazon.com/12-NET-Cross-Platform-Development-Fundamentals/dp/1837635870/\n    [2023-10-01T14:00:01.931Z] Best Sellers Rank #387,339.\n    [2023-10-01T14:00:01.931Z] Executed 'Functions.ScrapeAmazonFunction' (Succeeded, Id=aa9f7495-6066-4b0a-ba81-42582d677321, Duration=1909ms) \n    ```", "```cs\n    [2023-10-01T16:19:31.369Z] Trigger Details: UnscheduledInvocationReason: IsPastDue, OriginalSchedule: 2023-10-01T15:00:00.0000000+01:00 \n    ```", "```cs\n    <ItemGroup>\n     **<None Update=****\"fonts\\Caveat\\static\\Caveat-Regular.ttf\"****>**\n     **<CopyToOutputDirectory>Always</CopyToOutputDirectory>**\n     **</None>**\n      <None Update=\"host.json\">\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n      </None>\n      <None Update=\"local.settings.json\">\n        <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n        <CopyToPublishDirectory>Never</CopyToPublishDirectory>\n      </None>\n    </ItemGroup> \n    ```", "```cs\n    <PackageReference Version=\"5.2.0\" Include=\n      \"Microsoft.Azure.Functions.Worker.Extensions.Storage.Queues\" />\n    <PackageReference Version=\"6.2.0\" Include=\n      \"Microsoft.Azure.Functions.Worker.Extensions.Storage.Blobs\" />\n    <PackageReference Include=\"SixLabors.ImageSharp\" Version=\"3.0.2\" />\n    <PackageReference Include=\"SixLabors.ImageSharp.Drawing\" \n                      Version=\"2.0.0\" /> \n    ```", "```cs\n    using Humanizer; // To use ToWords extension method.\n    using Microsoft.Azure.Functions.Worker; // To use [Function] and so on.\n    using Microsoft.Azure.Functions.Worker.Http; // To use HttpRequestData.\n    using Microsoft.Extensions.Logging; // To use ILogger.\n    namespace Northwind.AzureFunctions.Service;\n    public class NumbersToChecksFunction\n    {\n      private readonly ILogger _logger;\n      public NumbersToChecksFunction(ILoggerFactory loggerFactory)\n      {\n        _logger = loggerFactory.CreateLogger<NumbersToChecksFunction>();\n      }\n      [Function(nameof(NumbersToChecksFunction))]\n      [QueueOutput(\"checksQueue\")] // Return value is written to this queue.\n      public string Run(\n        [HttpTrigger(AuthorizationLevel.Anonymous,\n          \"get\", \"post\", Route = null)] HttpRequestData request)\n      {\n        _logger.LogInformation(\"C# HTTP trigger function processed a request.\");\n        string? amount = request.Query[\"amount\"];\n        if (long.TryParse(amount, out long number))\n        {\n          return number.ToWords();\n        }\n        else\n        {\n          return $\"Failed to parse: {amount}\";\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"IsEncrypted\": false,\n      \"Values\": {\n        \"AzureWebJobsStorage\": \"UseDevelopmentStorage=true\",\n        \"FUNCTIONS_WORKER_RUNTIME\": \"dotnet-isolated\"**,**\n    **\"IS_LOCAL\"****:****true**\n      }\n    } \n    ```", "```cs\n    using Microsoft.Azure.Functions.Worker; // To use [Function] and so on.\n    using Microsoft.Extensions.Logging; // To use ILogger.\n    using SixLabors.Fonts; // To use Font.\n    using SixLabors.ImageSharp.Drawing; // To use IPath.\n    using SixLabors.ImageSharp.Drawing.Processing; // To use Brush, Pen.\n    namespace Northwind.AzureFunctions.Service;\n    public class CheckGeneratorFunction\n    {\n      private readonly ILogger _logger;\n      public CheckGeneratorFunction(ILoggerFactory loggerFactory)\n      {\n        _logger = loggerFactory.CreateLogger<NumbersToWordsFunction>();\n      }\n      [Function(nameof(CheckGeneratorFunction))]\n      [BlobOutput(\"checks-blob-container/check.png\")]\n      public byte[] Run(\n        [QueueTrigger(\"checksQueue\")] string message)\n      {\n        _logger.LogInformation(\"C# Queue trigger function executed.\");\n        _logger.LogInformation($\"Body: {message}.\");\n        // Create a new blank image with a white background.\n        using (Image<Rgba32> image = new(width: 1200, height: 600,\n          backgroundColor: new Rgba32(r: 255, g: 255, b: 255, a: 100)))\n        {\n          // Load the font file and create a large font.\n          FontCollection collection = new();\n          FontFamily family = collection.Add(\n            @\"fonts\\Caveat\\static\\Caveat-Regular.ttf\");\n          Font font = family.CreateFont(72);\n          string amount = message.Body.ToString();\n          DrawingOptions options = new()\n          {\n            GraphicsOptions = new()\n            {\n              ColorBlendingMode = PixelColorBlendingMode.Multiply\n            }\n          };\n          // Define some pens and brushes.\n          Pen blackPen = Pens.Solid(Color.Black, 2);\n          Pen blackThickPen = Pens.Solid(Color.Black, 8);\n          Pen greenPen = Pens.Solid(Color.Green, 3);\n          Brush redBrush = Brushes.Solid(Color.Red);\n          Brush blueBrush = Brushes.Solid(Color.Blue);\n          // Define some paths and draw them.\n          IPath border = new RectangularPolygon(\n            x: 50, y: 50, width: 1100, height: 500);\n          image.Mutate(x => x.Draw(options, blackPen, border));\n          IPath star = new Star(x: 150.0f, y: 150.0f, \n            prongs: 5, innerRadii: 20.0f, outerRadii: 30.0f);\n          image.Mutate(x => x.Fill(options, redBrush, star)\n                             .Draw(options, greenPen, star));\n          IPath line1 = new Polygon(new LinearLineSegment(\n            new PointF(x: 100, y: 275), new PointF(x: 1050, y: 275)));\n\n          image.Mutate(x => x.Draw(options, blackPen, line1));\n          IPath line2 = new Polygon(new LinearLineSegment(\n            new PointF(x: 100, y: 365), new PointF(x: 1050, y: 365)));\n          image.Mutate(x => x.Draw(options, blackPen, line2));\n          RichTextOptions textOptions = new(font)\n          {\n            Origin = new PointF(100, 200),\n            WrappingLength = 1000,\n            HorizontalAlignment = HorizontalAlignment.Left\n          };\n          image.Mutate(x => x.DrawText(\n            textOptions, amount, blueBrush, blackPen));\n          string blobName = $\"{DateTime.UtcNow:yyyy-MM-dd-hh-mm-ss}.png\";\n          _logger.LogInformation($\"Blob filename: {blobName}.\");\n          try\n          {\n            if (Environment.GetEnvironmentVariable(\"IS_LOCAL\") == \"true\")\n            {\n              // Create blob in the local filesystem.\n              string folder = $@\"{System.Environment.CurrentDirectory}\\blobs\";\n              if (!Directory.Exists(folder))\n              {\n                Directory.CreateDirectory(folder);\n              }\n              log.LogInformation($\"Blobs folder: {folder}\");\n              string blobPath = $@\"{folder}\\{blobName}\";\n              image.SaveAsPng(blobPath);\n            }\n            // Create BLOB in Blob Storage via a memory stream.\n            MemoryStream stream = new();\n            image.SaveAsPng(stream);\n            stream.Seek(0, SeekOrigin.Begin);\n            return stream.ToArray();\n          }\n          catch (System.Exception ex)\n          {\n            log.LogError(ex.Message);\n          }\n          return Array.Empty<byte>();\n        }\n      }\n    } \n    ```", "```cs\n    Functions:\n            NumbersToChecksFunction: [GET,POST] http://localhost:5101/api/NumbersToChecksFunction\n            NumbersToWordsFunction: [GET,POST] http://localhost:5101/api/NumbersToWordsFunction\n            CheckGeneratorFunction: queueTrigger\n            ScrapeAmazonFunction: timerTrigger \n    ```", "```cs\n    ### Configure a variable for the Azure Functions base address.\n    @base_address = http://localhost:5101/\n    ### Trigger the NumbersToChecksFunction function.\n    GET {{base_address}}api/NumbersToChecksFunction?amount=123456 \n    ```", "```cs\n    Response time: 2524 ms\n    Status code: OK (200)\n    Transfer-Encoding: chunked\n    Date: Mon, 05 Jun 2023 13:53:11 GMT\n    Server: Kestrel\n    Content-Type: text/plain; charset=utf-8\n    Content-Length: 64\n    ------------------------------------------------\n    Content:\n    one hundred and twenty-three thousand four hundred and fifty-six \n    ```", "```cs\n    [2023-06-05T13:53:12.175Z] Executing 'NumbersToWordsFunction' (Reason='This function was programmatically called via the host APIs.', Id=b6a49d34-edbf-4c2a-97f2-195f8d06cd13)\n    [2023-06-05T13:53:12.195Z] C# HTTP trigger function processed a request.\n    [2023-06-05T13:53:12.262Z] Executed 'NumbersToWordsFunction' (Succeeded, Id=b6a49d34-edbf-4c2a-97f2-195f8d06cd13, Duration=104ms)\n    [2023-06-05T13:53:14.302Z] Executing 'CheckGeneratorFunction' (Reason='New queue message detected on 'checksqueue'.', Id=2697ddc0-46dd-4c06-b960-fb5a443ec929)\n    [2023-06-05T13:53:14.305Z] Trigger Details: MessageId: 229e4961-bfaf-46da-bb17-040ffc2bbf91, DequeueCount: 1, InsertedOn: 2023-06-05T13:53:12.000+00:00\n    [2023-06-05T13:53:14.313Z] C# Queue trigger function executed.\n    [2023-06-05T13:53:14.314Z] MessageId: 229e4961-bfaf-46da-bb17-040ffc2bbf91.\n    [2023-06-05T13:53:14.316Z] InsertedOn: 05/06/2023 13:53:12 +00:00.\n    [2023-06-05T13:53:14.317Z] ExpiresOn: 12/06/2023 13:53:12 +00:00.\n    [2023-06-05T13:53:14.318Z] Body: one hundred and twenty-three thousand four hundred and fifty-six.\n    [2023-06-05T13:53:14.845Z] Blob name: 2023-06-05-01-53-14.png.\n    [2023-06-05T13:53:14.848Z] Blobs folder: C:\\apps-services-net8\\Chapter10\\Northwind.AzureFunctions.Service\\bin\\Debug\\net8.0\\blobs\n    [2023-06-05T13:53:15.057Z] Blob sequence number: 0.\n    [2023-06-05T13:53:15.060Z] Executed 'CheckGeneratorFunction' (Succeeded, Id=2697ddc0-46dd-4c06-b960-fb5a443ec929, Duration=776ms)\n    [2023-06-05T13:53:20.979Z] Host lock lease acquired by instance ID '00000000000000000000000011150C3D'. \n    ```", "```cs\n    Build started...\n    1>------ Build started: Project: Northwind.AzureFunctions.Service, Configuration: Release Any CPU ------\n    1>Northwind.AzureFunctions.Service -> C:\\apps-services-net8\\Chapter10\\Northwind.AzureFunctions.Service\\bin\\Release\\net8.0\\Northwind.AzureFunctions.Service.dll\n    2>------ Publish started: Project: Northwind.AzureFunctions.Service, Configuration: Release Any CPU ------\n    2>Northwind.AzureFunctions.Service -> C:\\apps-services-net8\\Chapter10\\Northwind.AzureFunctions.Service\\bin\\Release\\net8.0\\Northwind.AzureFunctions.Service.dll\n    2>Northwind.AzureFunctions.Service -> C:\\apps-services-net8\\Chapter10\\Northwind.AzureFunctions.Service\\obj\\Release\\net8.0\\PubTmp\\Out\\\n    2>Publishing C:\\apps-services-net8\\Chapter10\\Northwind.AzureFunctions.Service\\obj\\Release\\net8.0\\PubTmp\\Northwind.AzureFunctions.Service - 20230605152148071.zip to https://northwindazurefunctionsservice20230605151137.scm.azurewebsites.net/api/zipdeploy...\n    2>Zip Deployment succeeded.\n    ========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========\n    ========== Build started at 3:21 PM and took 03:34.100 minutes ==========\n    ========== Publish: 1 succeeded, 0 failed, 0 skipped ==========\n    ========== Publish started at 3:21 PM and took 03:34.100 minutes ==========\n    Waiting for Function app to be ready...\n    Function app is ready \n    ```"]