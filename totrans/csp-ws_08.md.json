["```cs\ndotnet add package Octokit\n```", "```cs\nvar github = new GitHubClient(new ProductHeaderValue(\"Packt\"));\n```", "```cs\nconst string username = \"github-user\";\nvar user = await github.User.Get(username);\n```", "```cs\nConsole.WriteLine($\"{username} created profile at {user.CreatedAt}\");\n```", "```cs\ngithub-user created profile at 2018-06-22 07:51:56 +00:00\n```", "```cs\n    public static class EnvironmentVariable\n    {\n        public static string GetOrThrow(string environmentVariable)\n        {\n            var variable = Environment.GetEnvironmentVariable(environmentVariable, EnvironmentVariableTarget.User);\n            if (string.IsNullOrWhiteSpace(variable))\n            {\n                throw new ArgumentException($\"Environment variable {environmentVariable} not found.\");\n            }\n            return variable;\n        }\n    }\n```", "```cs\n    dotnet add package Azure.AI.TextAnalytics\n    ```", "```cs\n    public class Demo\n    {\n        private static string TextAnalysisApiKey { get; } = EnvironmentVariable.GetOrThrow(\"TextAnalysisApiKey\");\n        private static string TextAnalysisEndpoint { get; } = EnvironmentVariable.GetOrThrow(\"TextAnalysisEndpoint\");\n    ```", "```cs\n    static TextAnalyticsClient BuildClient()\n    {\n        var credentials = new AzureKeyCredential(TextAnalysisApiKey);\n        var endpoint = new Uri(TextAnalysisEndpoint);\n        var client = new TextAnalyticsClient(endpoint, credentials);\n        return client;\n    }\n    ```", "```cs\n    private static async Task<DocumentSentiment> PerformSentimentalAnalysis(TextAnalyticsClient client, string text)\n    {\n        var options = new AnalyzeSentimentOptions { IncludeOpinionMining = true };\n        DocumentSentiment documentSentiment = await client.AnalyzeSentimentAsync(text, options: options);\n        return documentSentiment;\n    }\n    ```", "```cs\n    private static void DisplaySentenceSummary(SentenceSentiment sentence)\n    {\n        Console.WriteLine($\"Text: \\\"{sentence.Text}\\\"\");\n        Console.WriteLine($\"Sentence sentiment: {sentence.Sentiment}\");\n        Console.WriteLine($\"Positive score: {sentence.ConfidenceScores.Positive:0.00}\");\n        Console.WriteLine($\"Negative score: {sentence.ConfidenceScores.Negative:0.00}\");\n        Console.WriteLine($\"Neutral score: {sentence.ConfidenceScores.Neutral:0.00}{Environment.NewLine}\");\n    }\n    ```", "```cs\n    private static void DisplaySentenceOpinions(SentenceSentiment sentence)\n    {\n        if (sentence.Opinions.Any())\n        {\n            Console.WriteLine(\"Opinions: \");\n            foreach (var sentenceOpinion in sentence.Opinions)\n            {\n                Console.Write($\"{sentenceOpinion.Target.Text}\");\n                var assessments = sentenceOpinion\n                    .Assessments\n                    .Select(a => a.Text);\n                Console.WriteLine($\" is {string.Join(',', assessments)}\");\n                Console.WriteLine();\n            }\n        }\n    }\n    ```", "```cs\n    static async Task SentimentAnalysisExample(TextAnalyticsClient client, string text)\n    {\n        DocumentSentiment documentSentiment = await PerformSentimentalAnalysis(client, text);\n        Console.WriteLine($\"Document sentiment: {documentSentiment.Sentiment}\\n\");\n        foreach (var sentence in documentSentiment.Sentences)\n        {\n            DisplaySentenceSummary(sentence);\n            DisplaySentenceOpinions(sentence);\n        }\n    }\n    ```", "```cs\n    public static Task Run()\n    {\n        var client = BuildClient();\n        string text = \"Today is a great day. \" +\n                           \"I had a wonderful dinner with my family!\";\n        return SentimentAnalysisExample(client, text);\n    }\n    ```", "```cs\nDocument sentiment: Positive\nText: \"Today is a great day.\"\nSentence sentiment: Positive\nPositive score: 1,00\nNegative score: 0,00\nNeutral score: 0,00\nText: \"I had a wonderful dinner with my family!\"\nSentence sentiment: Positive\nPositive score: 1,00\nNegative score: 0,00\nNeutral score: 0,00\nOpinions:\ndinner is wonderful\n```", "```cs\n    public static async Task GetUser()\n    ```", "```cs\n    client = new HttpClient { BaseAddress = new Uri(\"https://api.github.com\") };\n    client.DefaultRequestHeaders.Add(\"User-Agent\", \"Packt\");\n    ```", "```cs\n    const string username = \"github-user\"; //replace with your own\n    var request = new HttpRequestMessage(HttpMethod.Get, new Uri($\"users/{username}\", UriKind.Relative));\n    ```", "```cs\n    var response = await client.SendAsync(request);\n    ```", "```cs\n    var content = await response.Content.ReadAsStringAsync();\n    var user = JsonConvert.DeserializeObject<User>(content);\n    ```", "```cs\npublic class User\n{\n    public string Name { get; set; }\n    [JsonProperty(\"created_at\")]\n    public DateTime CreatedAt { get; set; }\n}\n```", "```cs\n    {\n       \"login\":\"github-user\",\n       \"id\":40486932,\n       \"node_id\":\"MDQ6VXNlcjQwNDg2OTMy\",\n       \"name\":\"Kaisinel\",\n       \"created_at\":\"2018-06-22T07:51:56Z\",\n       \"updated_at\":\"2021-08-12T14:55:29Z\"\n    }\n    ```", "```cs\n    public class Root\n    {\n        public string login { get; set; }\n        public int id { get; set; }\n        public string node_id { get; set; }\n        public string name { get; set; }\n        public DateTime created_at { get; set; }\n        public DateTime updated_at { get; set; }\n    }\n    ```", "```cs\n    public record User\n    ```", "```cs\n    Console.WriteLine($\"{user.Name} created profile at {user.CreatedAt}\");\n    ```", "```cs\nKaisinel created profile at 2018-06-22 07:51:56\n```", "```cs\n    private static string GitHubClientId { get; } = Environment.GetEnvironmentVariable(\"GithubClientId\", EnvironmentVariableTarget.User);\n    private static string GitHubSecret { get; } = Environment.GetEnvironmentVariable(\"GithubSecret\", EnvironmentVariableTarget.User);\n    ```", "```cs\npublic static async Task GetUser61Times()\n{\n    const int rateLimit = 60;\n    for (int i = 0; i < rateLimit + 1; i++)\n    {\n        const string username = \"github-user\";\n        var request = new HttpRequestMessage(HttpMethod.Get, new Uri($\"users/{username}\", UriKind.Relative));\n        request.Headers.CacheControl = new CacheControlHeaderValue(){NoCache = true};\n\n        var response = await client.SendAsync(request);\n        if (!response.IsSuccessStatusCode)\n        {\n            throw new Exception(response.ReasonPhrase);\n        }\n```", "```cs\n60) Kaisinel created profile at 2018-06-22 07:51:56\nUnhandled exception. System.Exception: rate limit exceeded\n```", "```cs\nGitHttp.cs\npublic static async Task GetUser61Times(string authHeader)\n{\n    const int rateLimit = 60;\n            for (int i = 0; i < rateLimit + 1; i++)\n            {\n                const string username = \"github-user\"; // replace with your own\n                var request = new HttpRequestMessage(HttpMethod.Get, new Uri($\"users/{username}\", UriKind.Relative));\n               request.Headers.CacheControl = new CacheControlHeaderValue(){NoCache = true};\n               request.Headers.Add(\"Authorization\", authHeader);\n               var response = await client.SendAsync(request);\n                if (!response.IsSuccessStatusCode)\n                {\n                    throw new Exception(response.ReasonPhrase);\n                }\nThe complete code can be found here: https://packt.link/1C5wb.\n```", "```cs\nBasic username:password\n```", "```cs\npublic static string GetBasicToken()\n{\n    var id = GitHubClientId;\n    var secret = GitHubSecret;\n    var tokenRaw = $\"{id}:{secret}\";\n    var tokenBytes = Encoding.UTF8.GetBytes(tokenRaw);\n    var token = Convert.ToBase64String(tokenBytes);\n    return \"Basic \" + token;\n}\n```", "```cs\nvar basicToken = GitExamples.GetBasicToken();\nawait GitExamples.GetUser61Times(basicToken);\n```", "```cs\n    private static string GitHubPersonAccessToken { get; } = Environment.GetEnvironmentVariable(\"GitHubPersonalAccess\", EnvironmentVariableTarget.User);\n    ```", "```cs\n    await GetUser61Times(GitHubPersonAccessToken);\n    ```", "```cs\n    https://github.com/login/oauth/authorize?client_id={{ClientId}}&redirect_uri={{RedirectUrl}}\n    ```", "```cs\n    {tokenUrl}?client_id={clientId}&redirect_uri={redirectUri}&client_secret={secret}&code={code}:\n    ```", "```cs\nprivate static HttpRequestMessage CreateGetAccessTokenRequest()\n{\n    const string tokenUrl = \"https://github.com/login/oauth/access_token\";\n    const string code = \"2ecab6ecf412f28f7d4d\";\n    const string redirectUri = \"https://www.google.com/\";\n    var uri = new Uri($\"{tokenUrl}?client_id={GitHubClientId}&redirect_uri={redirectUri}&client_secret={GitHubSecret}&code={code}\");\n    var request = new HttpRequestMessage(HttpMethod.Post, uri);\n    return request;\n}\n```", "```cs\naccess_token=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&scope=user&token_type=bearer\n```", "```cs\n    private static Dictionary<string, string> ConvertToDictionary(string content)\n    {\n        return content\n            .Split('&')\n            .Select(kvp => kvp.Split('='))\n            .Where(kvp => kvp.Length > 1)\n            .ToDictionary(kvp => kvp[0], kvp => kvp[1]);\n    }\n    ```", "```cs\n    private static async Task<string> GetToken()\n    {\n        HttpRequestMessage request = CreateGetAccessTokenRequest();\n        var response = await client.SendAsync(request);\n        var content = await response.Content.ReadAsStringAsync();\n        Dictionary<string, string> tokenResponse = ConvertToDictionary(content);\n        // ValidateNoError(tokenResponse);\n        var token = $\"{tokenResponse[\"token_type\"]} {tokenResponse[\"access_token\"]}\";\n        return token;\n    }\n    ```", "```cs\nbearer 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\n```", "```cs\n    public static async Task UpdateEmploymentStatus(bool isHireable, string authToken)\n    {\n        var user = new UserFromWeb\n        {\n            hireable = isHireable\n        };\n        var request = new HttpRequestMessage(HttpMethod.Patch, new Uri(\"/user\", UriKind.Relative));\n        request.Headers.Add(\"Authorization\", authToken);\n        var requestContent = JsonConvert.SerializeObject(user, new JsonSerializerSettings { NullValueHandling = NullValueHandling.Ignore });\n        request.Content = new StringContent(requestContent, Encoding.UTF8, \"application/json\");\n        var response = await client.SendAsync(request);\n        var responseContent = await response.Content.ReadAsStringAsync();\n        Console.WriteLine(responseContent);\n    }\n    ```", "```cs\ntype/subtype\n```", "```cs\npublic static async Task Run()\n{\n    var oathAccessToken = await GitExamples.GetToken();\n    await GitExamples.UpdateEmploymentStatus(true, oathAccessToken);\n}\n```", "```cs\nerror=bad_verification_code&error_description=The+code+passed+is+incorrect+or+expired.&error_uri=https%3A%2F%2Fdocs.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-oauth-app-access-token-request-errors%2F%23bad-verification-code\n```", "```cs\nprivate static void ValidateNoError(Dictionary<string, string> tokenResponse)\n{\n    if (tokenResponse.ContainsKey(\"error\"))\n    {\n        throw new Exception(\n            $\"{tokenResponse[\"error\"].Replace(\"_\", \" \")}. \" +\n            $\"{tokenResponse[\"error_description\"].Replace(\"+\", \" \")}\");\n    }\n}\n```", "```cs\nbad verification code. The code passed is incorrect or expired.\n```", "```cs\n    public class StarWarsClient\n        {\n            private readonly HttpClient _client;\n            public StarWarsClient()\n            {\n                _client = new HttpClient {BaseAddress = new Uri(\"https://swapi.dev/api/\")};\n            }\n    ```", "```cs\n    Film.cs\n    public record Film\n    {\n        public string Title { get; set; }\n        public int EpisodeId { get; set; }\n        public string OpeningCrawl { get; set; }\n        public string Director { get; set; }\n        public string Producer { get; set; }\n        [JsonProperty(\"release_date\")]\n        public string ReleaseDate { get; set; }\n        public string[] Characters { get; set; }\n        public string[] Planets { get; set; }\n        public string[] Starships { get; set; }\n        public string[] Vehicles { get; set; }\n        public string[] Species { get; set; }\n        public DateTime Created { get; set; }\n    ```", "```cs\nThe complete code can be found here: https://packt.link/tjHLa.\n```", "```cs\n    public record ApiResult<T>\n    {\n        public int Count { get; set; }\n        public string Next { get; set; }\n        public string Previous { get; set; }\n        [JsonProperty(\"results\")]\n        public T Data { get; set; }\n    }\n    ```", "```cs\n    public async Task<ApiResult<IEnumerable<Film>>> GetFilms()\n    {\n    ```", "```cs\n    var request = new HttpRequestMessage(HttpMethod.Get, new Uri(\"films\", UriKind.Relative));\n    ```", "```cs\n    var response = await _client.SendAsync(request);\n    ```", "```cs\n    if (!response.IsSuccessStatusCode)\n    {\n          throw new HttpRequestException(response.ReasonPhrase);\n    }\n    ```", "```cs\n    var content = await response.Content.ReadAsStringAsync();\n    var films = JsonConvert.DeserializeObject<ApiResult<Film>>(content);\n        return films;\n    }\n    ```", "```cs\n    public static class Demo\n    {\n        public static async Task Run()\n        {\n            var client = new StarWarsClient();\n            var filmsResponse = await client.GetFilms();\n            var films = filmsResponse.Data;\n            foreach (var film in films)\n            {\n                Console.WriteLine($\"{film.ReleaseDate} {film.Title}\");\n            }\n        }\n    }\n    ```", "```cs\n1977-05-25 A New Hope\n1980-05-17 The Empire Strikes Back\n1983-05-25 Return of the Jedi\n1999-05-19 The Phantom Menace\n2002-05-16 Attack of the Clones\n2005-05-19 Revenge of the Sith\n```", "```cs\n    1977-05-25 A New Hope\n    1980-05-17 The Empire Strikes Back\n    1983-05-25 Return of the Jedi\n    1999-05-19 The Phantom Menace\n    2002-05-16 Attack of the Clones\n    2005-05-19 Revenge of the Sith\n    ```", "```cs\ndotnet add package RestSharp\n```", "```cs\n    public class StarWarsClient\n    {\n        private readonly RestClient _client;\n        public StarWarsClient()\n        {\n            _client = new RestClient(\"https://swapi.dev/api/\");\n        }\n```", "```cs\n        public async Task<ApiResult<IEnumerable<Film>>> GetFilms()\n        {\n            var request = new RestRequest(\"films\");\n            var films = await _client.GetAsync<ApiResult<IEnumerable<Film>>>(request);\n            return films;\n        }\n    }\n```", "```cs\n        public StarWarsClient()\n        {\n            _client = new RestClient(\"https://swapi.dev/api/\");\n            _client.UseSerializer(() => new JsonNetSerializer());\n        }\n```", "```cs\n1977-05-25 A New Hope\n1980-05-17 The Empire Strikes Back\n1983-05-25 Return of the Jedi\n1999-05-19 The Phantom Menace\n2002-05-16 Attack of the Clones\n2005-05-19 Revenge of the Sith\n```", "```cs\nAll:\nAruba Americas Oranjestad\nAfghanistan Asia Kabul\nLithuanian:\nLithuania Europe Vilnius\nVilnius:\nLithuania Europe Vilnius\n```", "```cs\n    dotnet add package Refit\n    ```", "```cs\n    public interface IStarWarsClient\n    {\n        [Get(\"/films\")]\n        public Task<ApiResult<IEnumerable<Film>>> GetFilms();\n    }\n    ```", "```cs\n    var client = RestService.For<IStarWarsClient>(\"https://swapi.dev/api/\");\n    ```", "```cs\n1977-05-25 A New Hope\n1980-05-17 The Empire Strikes Back\n1983-05-25 Return of the Jedi\n1999-05-19 The Phantom Menace\n2002-05-16 Attack of the Clones\n2005-05-19 Revenge of the Sith\n```", "```cs\nAll:\nAruba Americas Oranjestad\nAfghanistan Asia Kabul\nLithuanian:\nLithuania Europe Vilnius\nVilnius:\nLithuania Europe Vilnius\n```", "```cs\n    public static string PayPalClientId { get; } = EnvironmentVariable.GetOrThrow(\"PayPalClientId\");\n    public static string PayPalSecret { get; } = EnvironmentVariable.GetOrThrow(\"PayPalSecret\");\n    ```", "```cs\n    public const string BaseAddress = \"https://api.sandbox.paypal.com/\";\n    ```", "```cs\n    public interface IPayPalClient\n    {\n        [Post(\"/v2/checkout/orders\")]\n        public Task<CreatedOrderResponse> CreateOrder(Order order);\n        [Get(\"/v2/checkout/orders/{id}\")]\n        public Task<Order> GetOrder(string id);\n    }\n    ```", "```cs\n{\n   \"intent\":\"CAPTURE\",\n   \"purchase_units\":[\n      {\n         \"amount\":{\n            \"currency_code\":\"USD\",\n            \"value\":\"100.00\"\n         }\n      }\n   ]\n}\n```", "```cs\n    IPayPalClient.cs\n    public record Order\n    {\n        public string intent { get; set; }\n        public Purchase_Units[] purchase_units { get; set; }\n    }\n    public record Name\n    {\n        public string name { get; set; }\n    }\n    public record Purchase_Units\n    {\n        public Amount amount { get; set; }\n        public Payee payee { get; set; }\n    ```", "```cs\nThe complete code can be found here: https://packt.link/GvEZ8.\n```", "```cs\n    {\n        \"id\": \"7XS70547FW3652617\",\n        \"intent\": \"CAPTURE\",\n        \"status\": \"CREATED\",\n        \"purchase_units\": [\n            {\n                \"reference_id\": \"default\",\n                \"amount\": {\n                    \"currency_code\": \"USD\",\n                    \"value\": \"100.00\"\n                },\n                \"payee\": {\n                    \"email_address\": \"sb-emttb7510335@business.example.com\",\n                    \"merchant_id\": \"7LSF4RYZLRB96\"\n                }\n            }\n        ],\n        \"create_time\": \"2021-09-04T13:01:34Z\",\n        \"links\": [\n            {\n                \"href\": \"https://api.sandbox.paypal.com/v2/checkout/orders/7XS70547FW3652617\",\n                \"rel\": \"self\",\n                \"method\": \"GET\"\n            }\n         ]\n    }\n    ```", "```cs\n    public class CreateOrderResponse\n    {\n        public string id { get; set; }\n    }\n    ```", "```cs\n    public class AuthHeaderHandler : DelegatingHandler\n    {\n    ```", "```cs\n    protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)\n    {\n                    var accessToken = await GetAccessToken(CreateBasicAuthToken());\n                    request.Headers.Authorization = new AuthenticationHeaderValue(\"Bearer\", accessToken);\n                    return await base.SendAsync(request, cancellationToken).ConfigureAwait(false);\n    }\n    ```", "```cs\n     private static string CreateBasicAuthToken()\n          {\n                    var credentials = Encoding.GetEncoding(\"ISO-8859-1\").GetBytes(PayPalClientId + \":\" + PayPalSecret);\n                    var authHeader = Convert.ToBase64String(credentials);\n                    return \"Basic \" + authHeader;\n          }\n    ```", "```cs\n                private static async Task<string> GetAccessToken(string authToken)\n                {\n                    var request = new RestRequest(\"v1/oauth2/token\");\n                    request.AddHeader(\"Authorization\", authToken);\n                    request.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\n                    request.AddParameter(\"application/x-www-form-urlencoded\", \"grant_type=client_credentials\", ParameterType.RequestBody);\n    ```", "```cs\n                    var response = await RestClient.ExecuteAsync<Response>(request, Method.POST);\n                    return response.Data.access_token;\n                }\n            private class Response\n            {\n                public string access_token { get; set; }\n            }\n          }\n    ```", "```cs\n    private static readonly RestClient RestClient = new RestClient(baseAddress);\n    ```", "```cs\n    public static async Task Run()\n            \t{\n    ```", "```cs\n                var authHandler = new AuthHeaderHandler {InnerHandler = new HttpClientHandler() };\n                var payPalClient = RestService.For<IPayPalClient>(new HttpClient(authHandler)\n                    {\n                        BaseAddress = new Uri(baseAddress)\n                    });\n    ```", "```cs\n    var order = new Order\n                {\n                    intent = \"CAPTURE\",\n                    purchase_units = new[]\n                    {\n                        new Purchase_Units\n                        {\n                            amount = new Amount\n                            {\n                                currency_code = \"EUR\", value = \"100.00\"\n                            }\n                        }\n                    }\n                };\n    ```", "```cs\n    var createOrderResponse = await payPalClient.CreateOrder(order);\n    var payment = await payPalClient.GetOrder(createOrderResponse.id);\n    var pay = payment.purchase_units.First();\n    Console.WriteLine($\"{pay.payee.email_address} - \" +\n                                  $\"{pay.amount.value}\" +\n                                  $\"{pay.amount.currency_code}\");\n    ```", "```cs\nsb-emttb7510335@business.example.com - 100.00EUR\n```"]