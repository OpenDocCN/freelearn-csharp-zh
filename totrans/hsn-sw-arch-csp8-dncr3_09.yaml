- en: How to Choose Your Data Storage in the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure, like other clouds, offers a wide range of storage devices. The simplest
    approach is to define a scalable set of virtual machines hosted in the cloud where
    we can implement our custom solutions. For instance, we can create a SQL Server
    cluster on our cloud-hosted virtual machines to increase reliability and computational
    power. However, usually, custom architectures aren't the optimal solution and
    don't take full advantage of the opportunities offered by the cloud infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, this chapter will not discuss such custom architectures but will
    focus mainly on the various **Storage as a Service** (**SaaS**) offerings that
    are available in the cloud and, in particular, on Azure. These offers include
    scalable solutions based on plain disk space, relational databases, NoSQL databases,
    and in-memory data stores such as Redis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a more adequate storage type is based not only on the application's
    functional requirements but also on performance and scaling-out requirements.
    In fact, while scaling-out when processing resources causes a linear increase
    in performance, scaling-out storage resources doesn't necessarily imply an acceptable
    increase in performance. In a few words, no matter how much you duplicate your
    data storage devices, if several requests affect exactly the same chunk of data,
    they will always queue the same amount of time to access it!
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Scaling-out data causes linear increases of read operation throughput since
    each copy can serve a different request, but it doesn't imply the same increase
    in the throughput for write operations since all copies of the same chunk of data
    must be updated! Accordingly, more sophisticated techniques are required to scale-out
    storage devices, and not all storage engines scale equally well.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: In particular, relational databases don't scale well in all scenarios. Therefore,
    scaling needs and the need to distribute data geographically play a fundamental
    role in the choice of a storage engine, as well as in the choice of a SaaS offering.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the different repositories for different purposes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between structure or NoSQL storage
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Cosmos DB – an opportunity to manage a multi-continental database
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use case – storing data
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s get started:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter requires that you have the following:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2017 or 2019 free Community Edition or better with all its database
    tools installed.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A free Azure account. The *Creating an Azure account* subsection in [Chapter
    1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml), *Understanding the Importance
    of Software Architecture*, explains how to create one.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a better development experience, we advise that you also install the local
    emulator of Cosmos DB, which can be found at [https://aka.ms/cosmosdb-emulator](https://aka.ms/cosmosdb-emulator).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the different repositories for different purposes
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section describes the functionalities that are offered by the most popular
    data storage techniques. Mainly, we will focus on the functional requirements
    they are able to satisfy. Performance and scaling-out features will be analyzed
    in the next section, which is dedicated to comparing relational and NoSQL databases.
    In Azure, the various offerings can be found by typing product names into the
    search bar at the top of all Azure portal pages.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections describe the various kinds of database that we can
    use in our C# projects.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: Relational databases
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, clouds offer several database engines. Azure offers a variety of popular
    database engines, such as SQL Server (Azure SQL Server), MySQL, and Oracle.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: With regard to the Oracle database engine, Azure offers configurable virtual
    machines with various Oracle editions installed on them, which you can easily
    verify by the suggestions you get after typing `Oracle` into the Azure portal
    search bar. Azure fees don't include Oracle licenses; they just bring computation
    time, so you must bring your own license to Azure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'With MySQL on Azure, you pay to use a private server instance. The fees you
    incur depend on the number of cores you have, how much memory has to be allocated,
    and on backup retention time. MySQL instances are redundant and you can choose
    between a local or geographically distributed redundancy:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3a871e4b-5bbe-4c0f-906e-5e2a3377be2d.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
- en: 'Azure SQL Server is the most flexible offer. Here, you can configure resources
    that are used by every single database. When you create a database, you have the
    option to place it on an existing server instance or create a new instance. Fees
    are based on the database memory that''s been reserved and on the required **Database
    Transaction Units** (**DTUs**). Here, a DTU is a linear combination of I/O operations,
    CPU usage, and memory usage that''s determined by a reference workload. Roughly,
    maximal DB performance increases linearly when you increase DTUs:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04490184-bfc4-4eec-9eee-281af77ed4d3.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
- en: You can also configure data replication by enabling Read scale-out. This way,
    you can improve the performance of read operations. Backup retention is fixed
    for each offering level (basic, standard, and premium).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: If you select Yes for Want to use SQL elastic pool?, the database will be added
    to an elastic pool. Databases that are added to the same elastic pool will share
    their resources, so resources that aren't used by a database can be used during
    the *usage peaks* of other databases. Elastic pools can contain databases hosted
    on different server instances. Elastic pools are an efficient way to optimize
    resource usage in order to reduce costs.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In NoSQL databases, relational tables are replaced with more general collections
    that can contain heterogeneous JSON objects. That is, collections have no predefined
    structure and no predefined fields with length constraints (in the case of strings)
    but can contain any type of object. The only structural constraint associated
    with each collection is the name of the property that acts as a primary key.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: More specifically, each collection entry can contain nested objects and object
    collections nested in object properties, that is, related entities that, in relational
    databases, are contained in different tables and connected through external keys.
    In NoSQL, databases can be nested in their father entities. Since collection entries
    contain complex nested objects instead of simple property/value pairs, as is the
    case with relational databases, entries aren't called tuples or rows, but *documents*.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: No relations and/or external key constraints can be defined between documents
    that belong to the same collection or to different collections. If a document
    contains the primary key of another document in one of its properties, it does
    so at its own risk. The developer has the responsibility of maintaining and keeping
    these coherent references.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Finally, since NoSQL storage is quite cheap, whole binary files can be stored
    as the values of document properties as Base64 strings. The developer can define
    rules to decide what properties to index in a collection. Since documents are
    nested objects, properties are actually tree paths. Usually, by default, all the
    paths are indexed, but you can specify which collection of paths and subpaths
    to index.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases are queried either with a subset of SQL or with a JSON-based
    language where queries are JSON objects whose paths represent the properties to
    query, and whose values represent the query constraints that have been applied
    to them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: The possibility of nesting children objects inside documents can be simulated
    in relational databases with the help of one-to-many relationships. However, with
    relational databases, we are forced to redefine the exact structure of all the
    related tables, while NoSQL collections don't impose any predefined structure
    on the objects they contain. The only constraint is that each document must provide
    a unique value for the primary key property. Therefore, NoSQL databases are the
    only option when the structure of our objects is extremely variable. However,
    often they are chosen for the way they scale-out read and write operations and,
    more generally, for their performance advantages in distributed environments.
    Their performance features will be discussed in the next section, which compares
    them to relational databases.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: The graph data model is an extreme case of a completely unstructured document.
    The whole database is a graph where queries can add, change, and delete graph
    documents.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we have two kinds of document: nodes and relations. While relationships
    have a well-defined structure (the primary key of the nodes connected by the relationship,
    plus the relationship''s name), nodes have no structure at all since properties
    and their values are added together during node update operations. Graph data
    models were conceived to represent the features of people and the objects they
    manipulate (media, posts, and so on), along with their relationships in *social
    applications*. The Gremlin language was conceived specifically to query graph
    data models. We won''t discuss this in this chapter, but references are available
    in the *Further reading* section.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases will be analyzed in detail in the remaining sections of this
    chapter, which are dedicated to describing Azure Cosmos DB and comparing it with
    relational databases.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: Redis
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Redis is a distributed concurrent in-memory storage based on key-value pairs
    and supports distributed queuing. It can be used as permanent in-memory storage
    and as a web application cache for database data. Alternatively, it can render
    pages whose content doesn't change very often.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: Redis can also be used to store a web application's user session data. In fact,
    ASP.NET MVC, Pages, and WebForms support session data to overcome the fact that
    the HTTP protocol is stateless. More specifically, user data that's kept between
    page changes is maintained in server-side stores such as Redis and indexed by
    a session key stored in cookies.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Interaction with the Redis server in the cloud is typically based on a REST
    interface; that is, each Redis resource is accessed via HTTP GET at a URI and
    commands are passed in the query string, while answers are returned in JSON format.
    However, clients that offer an easy-to-use interface are available in all popular
    languages. The client for .NET and .NET Core is available through the `StackExchange.Redis` NuGet
    package. The basic operations of the `StackExchange.Redis` client have been documented
    at [https://stackexchange.github.io/StackExchange.Redis/Basics](https://stackexchange.github.io/StackExchange.Redis/Basics),
    while the full documentation can be found at [https://stackexchange.github.io/StackExchange.Redis](https://stackexchange.github.io/StackExchange.Redis).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'The user interface for defining a Redis server on Azure is quite simple:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df820d64-6224-4523-94ef-2c30f6a9e50d.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
- en: The Pricing tier dropdown allows us to select one of the available memory/replication
    options. A quick-start guide that explains how to use Azure Redis credentials
    and the URI with the `StackExchange.Redis` .NET Core client can be found at [https://docs.microsoft.com/en-us/azure/azure-cache-for-redis/cache-dotnet-core-quickstart](https://docs.microsoft.com/en-us/azure/azure-cache-for-redis/cache-dotnet-core-quickstart).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: Disk memory
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All clouds offer scalable and redundant general-purpose disk memory that you
    can use as virtual disks in virtual machines and/or as external file storage.
    Azure *storage account* disk space can also be structured in Tables and Queues.
    However, these two storage options are only supported for backward compatibility
    since Azure NoSQL databases are a better option than tables and Azure Redis is
    a better option than Azure storage queues:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/67b90062-5d45-4cec-8625-9fa827a64189.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
- en: In the rest of this chapter, we will focus on NoSQL databases and how they differ from
    relational databases. Next, we will look at how to choose one over the other.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between structured or NoSQL storage
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we stated that NoSQL databases should be preferred
    when data has almost no predefined structure. Actually, unstructured data can
    be represented in relational databases since variable properties of a tuple, `t`,
    can be placed in a connected table containing the property name, property value,
    and the external key of `t`. However, the problem is performance. In fact, property
    values that belong to a single object would be spread all over the available memory
    space. In a small database, *all over the available memory space* means far away
    but on the same disk; in a bigger database, this means far away but in different
    disk units; in a distributed cloud environment, this means far away but in different –
    and possibly geographically distributed – servers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, NoSQL databases not only keep variable attributes close to
    their owners, but they also keep some related objects close since they allow related
    objects to be nested inside properties and collections.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, we can conclude that relational databases perform well when tables
    that are usually accessed together can be stored close in memory. NoSQL databases,
    on the other hand, automatically ensure that related data is kept close since
    each entry keeps most of the data it is related to inside it as nested objects.
    Therefore, NoSQL databases perform better when they are distributed to a different
    memory and also to different geographically distributed servers.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the only way to scale out storage write operations is to split
    collection entries across several servers according to the values of *shard keys*.
    For instance, we can place all the records containing usernames that start with
    A in a server, the records containing usernames that start with B on another server,
    and so on. This way, write operations for usernames with different start letters
    may be executed in parallel, ensuring that the write throughput increases linearly
    with the number of servers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: However, if a *shard* collection is related to several other collections, there
    is no guarantee that related records will be placed on the same server. Also,
    putting different collections on different servers without using collection sharding
    increases write throughput linearly until we reach the limit of a single collection
    per server, but it doesn't solve the issue of being forced to perform several
    operations on different servers to retrieve or update data that's usually processed
    together.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: This issue becomes catastrophic for performance if access to related distributed
    objects must be transactional and/or must ensure structural constraints (such
    as external key constraints) aren't violated. In this case, all related objects
    must be blocked during the transaction, preventing other requests from accessing
    them during the whole lifetime of a time-consuming distributed operation.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL databases don't suffer from this problem and perform better with sharding
    and consequently with write-scaled output. This is because they don't distribute
    related data to different storage units and instead store them as nested objects
    of the same database entry.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In NoSQL database design, we always try to put all related objects that are
    likely to be processed together into a single entry. Related objects that are
    accessed less frequently are placed in different entries. Since external key constraints
    aren't enforced automatically and NoSQL transactions are very flexible, the developer
    can choose the best compromise between performance and coherence.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that there are situations where relational databases
    perform well with sharding. A typical instance is a multi-tenant application.
    In a multi-tenant application, all entries collections can be partitioned into
    non-overlapping sets called **tenants**. Only entries belonging to the same tenant
    can refer to each other, so if all the collections are sharded in the same way
    according to their object tenants, all related records end up in the same shard,
    that is, in the same server, and can be navigated efficiently.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Multi-tenant applications aren't rare in the cloud since all applications that
    offer the same services to several different users are often implemented as multi-tenant
    applications, where each tenant corresponds to a user subscription. Accordingly,
    relational databases are conceived to work in the cloud, such as Azure SQL Server,
    and usually offer sharding options for multi-tenant applications. Typically, sharding
    isn't a cloud service and must be defined with database engine commands. Here,
    we won't describe how to define shards with Azure SQL Server, but the *Further
    reading* section contains a link to the official Microsoft documentation.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: In conclusion, relational databases offer a pure, logical view of data that's
    independent of the way they are actually stored, and use a declarative language
    to query and update them. This simplifies development and system maintenance,
    but it may cause performance issues in a distributed environment that requires
    write scale-out. In NoSQL databases, you must handle more details about how to
    store data, as well as some procedural details for all the update and query operations,
    manually, but this allows you to optimize performance in distributed environments
    that require both read and write scale-out.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at Azure Cosmos DB, the main Azure NoSQL offering.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Azure Cosmos DB – an opportunity to manage a multi-continental database
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Cosmos DB is Azure's main NoSQL offering. Azure Cosmos DB has its own
    interface that is a subset of SQL, but it can be configured with a MongoDB interface.
    It can be also configured as a graph data model that can be queried with Gremlin. Cosmos
    DB allows replication for fault tolerance and read scale-out, and replicas can
    be distributed geographically to optimize communication performance. Moreover,
    you can specify which data center all the replicas are placed in. The user also
    has the option to write-enable all the replicas so that writes are immediately
    available in the geographical area where they are done. Write scale-up is achieved
    with sharding, which the user can configure by defining which properties to use
    as shard keys.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: 'You can define a Cosmos DB account by typing Cosmos DB into the Azure portal
    search bar and clicking Add. The following page will appear:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/83d9ca9f-5a23-4509-8a8a-5487e31c2409.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
- en: The account name you choose is used in the resource URI as `{account name}.documents.azure.com`.
    The API dropdown lets you choose the kind of interface you prefer (SQL, MongoDB,
    or Gremlin). Then, you can decide which data center the main database will be
    placed in and whether you want to enable geographically distributed replication.
    Once you've enabled geographically distributed replication, you can choose the
    number of replicas you want to use and where to place them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Finally, the Multi-region Writes toggle lets you enable writes on geographically
    distributed replicas. If you don't do this, all write operations will be routed
    to the main data center.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: '**Going to the resource**: Once you''ve created your account, select Data Explorer
    to create your databases and collections inside of them:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3893d21f-a74e-491d-9845-4563487b5afb.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
- en: '**Creating a collection**: Since databases just have a name and no configuration,
    you can directly add a collection and then the database where you wish to place
    it:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e63a071-b4a1-48b4-80b2-db48df1aff90.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: Here, you can decide on database and collection names and the property to use
    for sharding (partition key). Since NoSQL entries are object trees, property names
    are specified as paths. You can also add properties whose values are required
    to be unique. However, uniqueness IDs are checked inside each shard, so this option
    is only useful in certain situations, such as multi-tenant applications (where
    each tenant is included in a single shard). The fees depend on the collection
    throughput that you choose.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '**Targeting all resource parameters to your needs**: Throughput is expressed
    in Request Unit per second, where Request Unit per second is defined as the throughput
    we have when performing a read of 1 KB per second. Hence, if you check the Provision
    database throughput option, the chosen throughput is shared with the whole database,
    instead of being reserved as a single collection.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Getting connection information**: By selecting the Keys menu, you will see
    all the information you need in order to connect with your Cosmos DB account from
    your application:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2d565e3b-bb79-41aa-aa36-09615968a7c7.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
- en: '**Connection information page**: Here, you will find the account URI and two
    connection keys, which can be used interchangeably to connect with the account:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/503dcd27-b61c-450e-871a-0232bedf3cab.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
- en: There are also keys with read-only privileges. Every key can be regenerated
    and each account has two equivalent keys so that this operation can be handled
    efficiently; that is, when a key is changed, the other one is kept. Therefore,
    existing applications can continue using the other key before upgrading to the
    new key.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '**Selecting the default consistency level**: By selecting the Default consistency,
    you can choose the default replication consistency that you wish to apply to all
    of your collections:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32f7d541-7f05-4246-962b-6f83293c0d75.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
- en: This default can be overridden in each collection, either from the Data Explorer
    or programmatically. Consistency problems in read/write operations are a consequence
    of data replication. More specifically, the results of various read operations
    may be incoherent if the read operations are executed on different replicas that
    have received different partial updates.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the available consistency levels. These have been ordered
    from the weakest to the strongest:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '**Eventual**: After enough time has passed, if no further write operations
    are done, all the reads converge and apply all the writes.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Consistent Prefix**: All the writes are executed in the same order on all
    the replicas. So, if there are `n` write operations, each read is consistent with
    the result of applying the first `m` writes for some `m` less or equal to `n`.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Session**: This is the same as the consistency prefix but also guarantees
    that each writer sees the result of its own writes in all subsequent read operations
    and that subsequent reads of each reader are coherent (either the same database
    or a more updated version of it).'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bounded Staleness**: This is associated either with a delay time, `Delta`,
    or with a number of operations, `N`. Each read sees the results of all the write
    operations that were performed before a time `Delta` (or before the last `N` operations).
    That is, its reads converge with the result of all the writes with a maximum time
    delay of `Delta` (or a maximum operations delay of `N`).'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strong**: This is bounded staleness combined with `Delta = 0`. Here, each
    read reflects the result of all previous write operations.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The strongest consistency can be obtained to the detriment of performance. By
    default, the consistency is set to Session, which is a good compromise between
    coherence and performance. A lower level of consistency is difficult to handle
    in applications and is only usually acceptable if sessions are either read-only
    or write-only.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'If you select the Scale & settings option in the Data Explorer, you can configure
    which paths to index and which kind of indexing to apply to each data type of
    each path. The configuration consists of a JSON object. Let''s analyze its various
    properties:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you set `indexingMode` to `none` instead of `consistent`, no index is generated
    and the collection can be used as a key-value dictionary that''s indexed by the
    collection primary key. When `automatic` is set to `true`, all document properties
    are automatically indexed:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Each entry in the *Included paths* specifies a path pattern such as `/subpath1/subpath2/?`
    (settings apply just to the `/subpath1/subpath2/` property) or `/subpath1/subpath2/*`
    (settings apply to all the paths starting with `/subpath1/subpath2/`).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: Patterns contain the `[]` symbol when settings must be applied to child objects
    contained in collection properties; for example, `/subpath1/subpath2/[]/?`, `/subpath1/subpath2/[]/childpath1/?`,
    and so on. Settings specify the index type to apply to each data type (string,
    number, geographic point, and so on). Range indexes are needed for comparison
    operations, while hash indices are more efficient if we need equality comparisons.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'It is possible to specify a precision, that is, the maximum number of characters
    or digits to use in all the index keys. `-1` means no limit. `-1` is acceptable
    for strings, while a finite precision should be used for numbers. On the other
    hand, using finite precision with strings may result in unexpected behavior since
    string keys are truncated. In hash indexes, precision may vary from 1 to 8, while
    in range indexes, it may vary from 1 to 100:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Paths contained in `excludedPaths` aren't indexed at all. Index settings can
    also be specified programmatically.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you have two options to connect to Cosmos DB: use a version of its official
    client for your preferred programming language or use Cosmos DB''s Entity Framework
    Core provider, which at the time of writing this book, is still in preview. In
    the following subsections, we will have a look at both options. Then, we will
    describe how to use Cosmos DB''s Entity Framework Core provider with a practical
    example.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: Cosmos DB client
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Cosmos DB client for .NET Core is available through the `Microsoft.Azure.DocumentDB.Core`
    NuGet package. It offers full control of all Cosmos DB features, while the Cosmos
    DB Entity Framework provider is easier to use but hides some Cosmos DB peculiarities.
    Follow these steps to interact with Cosmos DB through the official Cosmos DB client
    for .NET Core:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Any operation requires the creation of a client object:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Don't forget that the client must be disposed of by calling its `Dispose` method
    (or by enclosing the code that references it in a `using` statement) when you
    don't need it anymore.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, you can get a reference to a database and create it if it doesn''t exist
    with the following code:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Finally, you can get a reference to a collection or create it if it doesn''t
    exist with the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: During collection creation, you can pass an `option` object, where you can specify
    the consistency level, how to index properties, and all the other collection features.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you must define the .NET classes that correspond to the structure of the
    JSON document you need to manipulate in your collections. You can also use the `JsonProperty`
    attribute to map class property names to JSON names if they aren't equal.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have all the necessary classes, you can use client methods to add,
    update, and write collection entries, as well as the client `CreateDocumentQuery`
    method, which returns an `IQueryable` value that you can query with LINQ.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you read a document, apply some modifications, and then try to upload
    your modified version of the document, someone else may have modified the same
    document. Often, you only need to perform an update if no one else has modified
    the same document. This can be done using the `_etag` property, which Cosmos DB
    automatically attaches to each document. This property value changes after each
    update, so you need to follow these steps:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: Map the `_etag` JSON property to a property on your .NET class so that you get
    its value when you read a document.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the original value of the `_etag` property as the value of the `AccessCondition`
    property of the `option` object you pass to the `ReplaceDocumentAsync` client
    method.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the `_etag` has changed `ReplaceDocumentAsync`, abort the operation and return
    an exception.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There is also the `MvcControlsToolkit.Business.DocumentDB` NuGet package, which
    simplifies and automates all operations that are required by the `Microsoft.Azure.DocumentDB.Core`
    library and overcomes some limitations of Cosmos DB SQL. The *Further reading*
    section contains references to tutorials for `Microsoft.Azure.DocumentDB.Core`
    and `MvcControlsToolkit.Business.DocumentDB`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Cosmos DB Entity Framework Core provider
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Cosmos DB provider for Entity Framework Core is contained in the `Microsoft.EntityFrameworkCore.Cosmos`
    NuGet package. Once you''ve added this to your project, you can proceed in a similar
    way to when you used the SQL Server provider in [Chapter 6](8c8a9dbc-3bfc-4291-866f-fdd1a62c16ef.xhtml),
    *Interacting with Data in C# - Entity Framework Core*, but with a few differences.
    Let''s take a look:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'There are no migrations since Cosmos DB databases have no structure to update.
    Instead, they have a method that ensures that the database, along with all the
    necessary collections, is created:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`DbSet<T>` `DBContext` properties don''t map one-to-one to database collections,
    but several `DbSet<T>` properties can map to the same collection since collections
    can contain objects with different structures. Moreover, by default, all `DbSet<T>`
    properties are mapped to a unique collection since this is the cheapest option,
    but you can override this default by explicitly specifying which collection you
    want to map some entities to by using the following configuration instruction:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The only useful annotation on entity classes is the `Key` attribute, which becomes
    obligatory when the principal keys are is called `Id`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Principal keys must be strings and can't be auto-incremented to avoid synchronization
    issues in a distributed environment. The uniqueness of primary keys can be ensured
    by generating GUIDs and transforming them into strings.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When defining relationships between entities, you can specify that an entity
    or a collection of entities is owned by another entity, in which case it is stored
    together with the father entity.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will look at the usage of Cosmos DB's Entity Framework provider in the next
    section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: Use case – storing data
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we''ve learned how to use NoSQL, we have to decide whether NoSQL databases
    are adequate for our WWTravelClub application. We need to store the following
    families of data:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '**Information about available destinations and packages**: Relevant operations
    for this data are reads since packages and destinations don''t change very often.
    However, they must be accessed as fast as possible from all over the World in
    order to ensure a pleasant user experience when users browse the available options.
    Therefore, a distributed relational database with geographically distributed replicas
    is possible, but not necessary, since packages can be stored inside their destinations
    in a cheaper NoSQL database.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destination reviews**: In this case, distributed write operations have a
    non-negligible impact. Moreover, most writes are additions, since reviews aren''t
    usually updated. Additions benefit a lot from sharding and don''t cause consistency
    issues like updates do. Accordingly, the best option for this data is a NoSQL
    collection.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reservations**: In this case, consistency errors aren''t acceptable because
    they may cause overbooking. Reads and writes have a comparable impact, but we
    need reliable transactions and good consistency checks. Luckily, data can be organized
    in a multi-tenant database where tenants are destinations since reservation information
    belonging to different destinations is completely unrelated. Accordingly, we may
    use sharded SQL Azure database instances.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In conclusion, the best option for data in the first and second bullet points
    is Cosmos DB, while the best option for the third point is Azure SQL Server. Actual
    applications may require a more detailed analysis of all data operations and their
    frequencies. In some cases, it is worth implementing prototypes for various possible
    options and executing performance tests with typical workloads on all of them.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: In the remainder of this section, we will migrate the destinations/packages
    data layer we looked at in [Chapter 6](8c8a9dbc-3bfc-4291-866f-fdd1a62c16ef.xhtml),
    *Interacting with Data in C# - Entity Framework Core*, to Cosmos DB.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the destinations/packages database with Cosmos DB
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s move on to the database example we built in [Chapter 6](8c8a9dbc-3bfc-4291-866f-fdd1a62c16ef.xhtml), *Interacting
    with Data in C# – Entity Framework Core*, to Cosmos DB by following these steps:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: First of all, we need to make a copy of the WWTravelClubDB project and make
    `WWTravelClubDBCosmo` the new root folder.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the project and delete the migrations folder since migrations aren't required
    anymore.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need to replace the SQL Server Entity Framework provider with the Cosmos
    DB provider. To do this, go to Manage NuGet Packages and uninstall the `Microsoft.EntityFrameworkCore.SqlServer`
    NuGet package. Then, install the `Microsoft.EntityFrameworkCore.Cosmos` NuGet
    package.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, do the following on the `Destination` and `Package` entities:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove all data annotations.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Add the `[Key]` attribute to their `Id` properties since this is obligatory
    for Cosmos DB providers.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Transform the type of the `Id` properties of both `Package` and `Destination`,
    and the `PackagesListDTO` classes from `int` to `string`. We need to turn into
    `string` also the `DestinationId` external references in the `Package`, and in
    the `PackagesListDTO` classes.  In fact, the best option for keys in distributed
    databases is a string generated from a GUID, because it is hard to maintain an
    identity counter when table data is distributed among several servers.
  id: totrans-142
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `MainDBContext` file, we need to specify that packages related to a
    destination must be stored inside the destination document itself. This can be
    achieved by replacing the Destination-Package relation configuration in the `OnModelCreatingmethod`
    method with the following code:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we must replace `HasMany` with `OwnsMany`. There is no equivalent to `WithOne`
    since once an entity is owned, it must have just one owner, and the fact that
    the `MyDestination` property contains a pointer to the father entity is evident
    from its type. Cosmos DB also allows the use of `HasMany`, but in this case, the
    two entities aren't nested one in the other. There is also an `OwnOne` configuration
    method for nesting single entities inside other entities.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Actually, both `OwnsMany` and `OwnsOne` are available for relational databases,
    but in this case, the difference between `HasMany` and `HasOne` is that children
    entities are automatically included in all queries that return their father entities,
    with no need to specify an `Include` LINQ clause. However, child entities are
    still stored in separate tables.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`LibraryDesignTimeDbContextFactory` must be modified to use Cosmos DB connection
    data, as shown in the following code:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, in our test console, we must explicitly create all entity principal
    keys using GUIDS:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, we call `context.Database.EnsureCreated()` instead of applying migrations
    since we only need to create the database. Once the database and collections have
    been created, we can fine-tune their settings from the Azure Portal. Hopefully,
    future versions of Cosmos DB Entity Framework Core provider will allow us to specify
    all collection options.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the final query that starts with `context.Packages.Where...` must
    be modified since queries can''t start from entities that are nested in other
    documents (in our case, `Package` entities). Therefore, we must start our query
    from the unique root `DbSet<T>` property we have in our `DBContext`, that is,
    `Destinations`. We can move from listing the external collection to listing all
    the internal collections with the help of the `SelectMany` method, which performs
    a logical merge of all nested `Packages` collections. However, since `CosmosDB`
    SQL doesn''t support `SelectMany`, we must force `SelectMany` to be simulated
    on the client with `AsIenumerable()`, as shown in the following code:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The remainder of the query remains unchanged. If you run the project now, you
    should see the same outputs that were received in the case of SQL Server (with
    the exception of the primary key values).
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After executing the program, go to your Cosmos DB account. You should see something
    like the following:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/32c20c41-6c2d-466e-9048-f45ae8d0d406.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
- en: The packages have been nested inside their destinations as required and Entity
    Framework Core creates a unique collection that has the same name as the `DBContext`
    class.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'If you would like to continue experimenting with Cosmos DB development without
    wasting all your free Azure Portal credit, you can install the Cosmos DB emulator
    available at this link: [https://aka.ms/cosmosdb-emulator](https://aka.ms/cosmosdb-emulator).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the main storage options available in Azure and
    learned when to use them. Then, we compared relational and NoSQL databases. We
    pointed out that relational databases offer automatic consistency checking and
    transaction isolation, but NoSQL databases are cheaper and offer better performance,
    especially when distributed writes form a high percentage of the average workload.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Then, we described Azure's main NoSQL option, Cosmos DB, and explained how to
    configure it and how to connect with a client.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned how to interact with Cosmos DB with Entity Framework Core and looked
    at a practical example based on the WWTravelClubDB use case. Here, we learned
    how to decide between relational and NoSQL databases for all families of data
    involved in an application. This way, you can choose the kind of data storage
    that ensures the best compromise between data coherence, speed, and parallel access
    to data in each of your applications.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn all about Serverless and Azure Functions.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Is Redis a valid alternative to relational databases?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Are NoSQL databases a valid alternative to relational databases?
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What operation is more difficult to scale out in relational databases?
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the main weakness of NoSQL databases? What is their main advantage?
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you list all Cosmos DB consistency levels?
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can we use auto-increment integer keys with Cosmos DB?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which Entity Framework configuration method is used to store an entity inside
    its related father document?
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can nested collections be searched efficiently with Cosmos DB?
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we didn't talk about how to define sharding with SQL Azure.
    Here is the link to the official documentation if you want to find out more: [https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-introduction](https://docs.microsoft.com/en-us/azure/sql-database/sql-database-elastic-scale-introduction).
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cosmos DB was described in detail in this chapter, but further details can be
    found in the official documentation: [https://docs.microsoft.com/en-us/azure/cosmos-db/](https://docs.microsoft.com/en-us/azure/cosmos-db/).
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following is a reference to the Gremlin language, which is supported by
    Cosmos DB: [http://tinkerpop.apache.org/docs/current/reference/#graph-traversal-steps](http://tinkerpop.apache.org/docs/current/reference/#graph-traversal-steps).
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a general description of the Cosmos DB Graph Data Model: [https://docs.microsoft.com/en-us/azure/cosmos-db/graph-introduction](https://docs.microsoft.com/en-us/azure/cosmos-db/graph-introduction).'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Details on how to use Cosmos DB's official .NET client can be found at [https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-dotnetcore-get-started](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-dotnetcore-get-started).
    A good introduction to the `MvcControlsToolkit.Business.DocumentDB` NuGet package
    we mentioned in this chapter is the *Fast Azure Cosmos DB Development with the
    DocumentDB Package* article contained in Issue 34 of DNCMagazine. This can be
    downloaded from [http://www.dotnetcurry.net/s/dnc-mag-34th-single](http://www.dotnetcurry.net/s/dnc-mag-34th-single).
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 Cosmos DB 的官方 .NET 客户端的详细信息可以在 [https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-dotnetcore-get-started](https://docs.microsoft.com/en-us/azure/cosmos-db/sql-api-dotnetcore-get-started)
    找到。关于本章中提到的 `MvcControlsToolkit.Business.DocumentDB` NuGet 包的良好介绍是 DNCMagazine
    第 34 期中的 *Fast Azure Cosmos DB Development with the DocumentDB Package* 文章。这可以从
    [http://www.dotnetcurry.net/s/dnc-mag-34th-single](http://www.dotnetcurry.net/s/dnc-mag-34th-single)
    下载。
