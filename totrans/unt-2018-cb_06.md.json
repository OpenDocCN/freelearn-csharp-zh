["```cs\nusing UnityEngine;\n     using UnityEngine.Video;\n\n     [RequireComponent(typeof(VideoPlayer))]\n     [RequireComponent(typeof(AudioSource))]\n\n     public class PlayPauseMainTexture : MonoBehaviour {\n         public VideoClip videoClip;\n\n         private VideoPlayer videoPlayer;\n         private AudioSource audioSource;\n\n         void Start() {\n             videoPlayer = GetComponent&lt;VideoPlayer&gt;();\n             audioSource = GetComponent&lt;AudioSource&gt;();\n\n             videoPlayer.playOnAwake = false;\n             audioSource.playOnAwake = false;\n\n             videoPlayer.source = VideoSource.VideoClip;\n             videoPlayer.clip = videoClip;\n\n             videoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\n             videoPlayer.SetTargetAudioSource(0, audioSource);\n\n             videoPlayer.renderMode = VideoRenderMode.MaterialOverride;\n             videoPlayer.targetMaterialRenderer = GetComponent&lt;Renderer&gt;();\n             videoPlayer.targetMaterialProperty = \"_MainTex\";\n         }\n\n         void Update() {\n             if (Input.GetButtonDown(\"Jump\"))\n                 PlayPause();\n         }\n\n         private void PlayPause() {\n             if (videoPlayer.isPlaying)\n                     videoPlayer.Pause();\n             else\n                 videoPlayer.Play();\n         }\n     } \n```", "```cs\nvideoPlayer.renderMode = VideoRenderMode.MaterialOverride;\n videoPlayer.targetMaterialRenderer = GetComponent&lt;Renderer&gt;();\n videoPlayer.targetMaterialProperty = \"_MainTex\";\n\n```", "```cs\nvideoPlayer = GetComponent&lt;VideoPlayer&gt;();\n audioSource = GetComponent&lt;AudioSource&gt;();\n```", "```cs\nvideoPlayer.playOnAwake = false;\n audioSource.playOnAwake = false; \n```", "```cs\nvideoPlayer.source = VideoSource.VideoClip;\n videoPlayer.clip = videoClip; \n```", "```cs\nvideoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\n videoPlayer.SetTargetAudioSource(0, audioSource); \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.UI;\n     using UnityEngine.Video;\n\n     public class PrepareCompleted: MonoBehaviour {\n         public RawImage image;\n         public VideoClip videoClip;\n\n         private VideoPlayer videoPlayer;\n         private AudioSource audioSource;\n\n         void Start() {\n             SetupVideoAudioPlayers();\n             videoPlayer.prepareCompleted += PlayVideoWhenPrepared;\n             videoPlayer.Prepare();\n             Debug.Log(\"A - PREPARING\");\n         }\n\n         private void SetupVideoAudioPlayers() {\n             videoPlayer = gameObject.AddComponent&lt;VideoPlayer&gt;();\n             audioSource = gameObject.AddComponent&lt;AudioSource&gt;();\n\n             videoPlayer.playOnAwake = false;\n             audioSource.playOnAwake = false;\n\n             videoPlayer.source = VideoSource.VideoClip;\n             videoPlayer.clip = videoClip;\n\n             videoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\n             videoPlayer.SetTargetAudioSource(0, audioSource);\n         }\n\n         private void PlayVideoWhenPrepared(VideoPlayer theVideoPlayer) {\n             Debug.Log(\"B - IS PREPARED\");\n\n             image.texture = theVideoPlayer.texture;\n\n             Debug.Log(\"C - PLAYING\");\n             theVideoPlayer.Play();\n         }\n     } \n```", "```cs\nvideoPlayer.prepareCompleted += PlayVideoWhenPrepared;\n videoPlayer.Prepare(); \n```", "```cs\n  public VideoClip videoClip;\n   public RenderTexture renderTexture; \n```", "```cs\n    videoPlayer.renderMode = VideoRenderMode.RenderTexture;\n     videoPlayer.targetTexture = renderTexture; \n```", "```cs\n    private void PlayVideoWhenPrepared(VideoPlayer theVideoPlayer) {\n         Debug.Log(\"B - IS PREPARED\");\n\n         // Play video\n         Debug.Log(\"C - PLAYING\");\n         theVideoPlayer.Play();\n     } \n```", "```cs\n    using System.Collections; \n```", "```cs\n    private IEnumerator Start() {\n         SetupVideoAudioPlayers();\n         videoPlayer.Prepare();\n\n         while (!videoPlayer.isPrepared)\n             yield return null;\n\n         videoPlayer.Play();\n     } \n```", "```cs\n    public string[] urls = {\n         \"http://mirrors.standaloneinstaller.com/video-sample/grb_2.mov\",\n         \"http://mirrors.standaloneinstaller.com/video-sample/lion-sample.mov\"\n     }; \n```", "```cs\n    public string RandomUrl(string[] urls)\n     {\n         int index = Random.Range(0, urls.Length);\n         return urls[index];\n     } \n```", "```cs\n    private void SetupVideoAudioPlayers()\n     {\n         ... as before\n\n         // assign video clip\n         string randomUrl = RandomUrl(urls);\n         videoPlayer.url = randomUrl;\n\n         ... as before\n     } \n```", "```cs\n    using UnityEngine;\n     using UnityEngine.Video;\n\n     public class VideoSequenceRenderTexture : MonoBehaviour {\n         public RenderTexture renderTexture;\n         public VideoClip[] videoClips;\n\n         private VideoPlayer[] videoPlayers;\n         private int currentVideoIndex;\n\n         void Start() {\n             SetupObjectArrays();\n             currentVideoIndex = 0;\n             videoPlayers[currentVideoIndex].prepareCompleted += PlayNextVideo;\n             videoPlayers[currentVideoIndex].Prepare();\n             Debug.Log(\"A - PREPARING video: \" + currentVideoIndex);\n         }\n\n         private void SetupObjectArrays() {\n             videoPlayers = new VideoPlayer[videoClips.Length];\n             for (int i = 0; i &lt; videoClips.Length; i++)\n                 SetupVideoAudioPlayers(i);\n         }\n\n         private void PlayNextVideo(VideoPlayer theVideoPlayer) {\n             VideoPlayer currentVideoPlayer = videoPlayers[currentVideoIndex];\n\n             Debug.Log(\"B - PLAYING Index: \" + currentVideoIndex);\n             currentVideoPlayer.Play();\n\n             currentVideoIndex++;\n             bool someVideosLeft = currentVideoIndex &lt; videoPlayers.Length;\n\n             if (someVideosLeft) {\n                 VideoPlayer nextVideoPlayer = videoPlayers[currentVideoIndex];\n                 nextVideoPlayer.Prepare();\n                 Debug.Log(\"A - PREPARING video: \" + currentVideoIndex);\n                 currentVideoPlayer.loopPointReached += PlayNextVideo;\n             } else {\n                 Debug.Log(\"(no videos left)\");\n             }\n         }\n\n         private void SetupVideoAudioPlayers(int i) {\n             string newGameObjectName = \"videoPlayer_\" + i;\n             GameObject containerGo = new GameObject(newGameObjectName);\n             containerGo.transform.SetParent(transform);\n             containerGo.transform.SetParent(transform);\n\n             VideoPlayer videoPlayer = containerGo.AddComponent&lt;VideoPlayer&gt;();\n             AudioSource audioSource = containerGo.AddComponent&lt;AudioSource&gt;();\n\n             videoPlayers[i] = videoPlayer;\n\n             videoPlayer.playOnAwake = false;\n             audioSource.playOnAwake = false;\n\n             videoPlayer.source = VideoSource.VideoClip;\n             videoPlayer.clip = videoClips[i];\n\n             videoPlayer.audioOutputMode = VideoAudioOutputMode.AudioSource;\n             videoPlayer.SetTargetAudioSource(0, audioSource);\n\n             videoPlayer.renderMode = VideoRenderMode.RenderTexture;\n             videoPlayer.targetTexture = renderTexture;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class GlowManager : MonoBehaviour {\n         private string powerId = \"Vector1_AA07C639\";\n         private string colorId = \"Color_466BE55E\";\n\n         void Update () {\n             if (Input.GetKeyDown(\"0\"))\n                 GetComponent&lt;Renderer&gt;().material.SetFloat(powerId, 0);\n\n             if (Input.GetKeyDown(\"1\"))\n                 SetGlowColor(Color.red);\n\n             if (Input.GetKeyDown(\"2\"))\n                 SetGlowColor(Color.blue);\n         }\n\n         private void SetGlowColor(Color c) {\n             GetComponent&lt;Renderer&gt;().material.SetFloat(powerId, 5);\n             GetComponent&lt;Renderer&gt;().material.SetColor(colorId, c);\n         }\n     } \n```", "```cs\n    private string powerId = \"Vector1_AA07C639\";\n    private string colorId = \"Color_466BE55E\"; \n```", "```cs\nShader \"graphs/glowShaderGraph\" {\n    Properties { \n\n     [NoScaleOffset]  Texture_C5AA766B (\"Texture\", 2D) = \"white\" { }\n      Vector1_AA07C639 (\"Power\", Range(0.000,5.000)) = 5.000 \n\n     Color_466BE55E (\"Color\", Color) = (1.000,0.000,0.038368,0.000)\n    } \n\n   etc. \n```"]