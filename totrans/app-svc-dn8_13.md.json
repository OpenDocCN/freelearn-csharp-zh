["```cs\n// Setting the syntax must be first non-comment line.\nsyntax = \"proto3\"; // proto2 is the default.\n/* When this .proto file is used in a .NET project, it will use the\n   following C# namespace for the auto-generated code files. */\noption csharp_namespace = \"Northwind.Grpc.Service\";\nenum SearchType {\n  SEARCHTYPE_UNSPECIFIED = 0;\n  SEARCHTYPE_STARTSWITH = 1;\n  SEARCHTYPE_CONTAINS = 2;\n  SEARCHTYPE_ENDSWITH = 3;\n}\nmessage SearchRequest {\n  string query = 1; // Fields must have order numbers.\n  SearchType search_type = 2;\n  int32 page = 3;\n  int32 page_size = 4;\n}\nmessage SearchResponse {\n  /* Message types can be nested and/or repeated to create the \n     equivalent of collections or arrays. */\n  repeated SearchResult results = 1;\n}\nmessage SearchResult {\n  string url = 1;\n  string title = 2;\n  repeated string authors = 3;\n}\nservice Searcher {\n  rpc PerformSearch (SearchRequest) returns (SearchResponse);\n} \n```", "```cs\n    syntax = \"proto3\";\n    option csharp_namespace = \"Northwind.Grpc.Service\";\n    package greet;\n    // The greeting service definition.\n    service Greeter {\n      // Sends a greeting\n      rpc SayHello (HelloRequest) returns (HelloReply);\n    }\n    // The request message containing the user's name.\n    message HelloRequest {\n      string name = 1;\n    }\n    // The response message containing the greetings.\n    message HelloReply {\n      string message = 1;\n    } \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk.Web\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <InvariantGlobalization>true</InvariantGlobalization>\n     **<PublishAot>****true****</PublishAot>**\n      </PropertyGroup>\n      <ItemGroup>\n     **<Protobuf Include=****\"Protos\\greet.proto\"** **GrpcServices=****\"Server\"** **/>**\n      </ItemGroup>\n      <ItemGroup>\n     **<PackageReference Include=****\"Grpc.AspNetCore\"** **Version=****\"2.59.0\"** **/>**\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    <InvariantGlobalization>false</InvariantGlobalization> \n    ```", "```cs\n    using Grpc.Core;\n    using Northwind.Grpc.Service\n    namespace Northwind.Grpc.Service.Services\n    {\n      public class GreeterService : Greeter.GreeterBase\n      {\n        private readonly ILogger<GreeterService> _logger;\n        public GreeterService(ILogger<GreeterService> logger)\n        {\n          _logger = logger;\n        }\n        public override Task<HelloReply> SayHello(\n          HelloRequest request, ServerCallContext context)\n        {\n          return Task.FromResult(new HelloReply\n          {\n            Message = \"Hello \" + request.Name\n          });\n        }\n      }\n    } \n    ```", "```cs\n    builder.Services.AddGrpc(); \n    ```", "```cs\n    app.MapGrpcService<GreeterService>(); \n    ```", "```cs\n    {\n      \"$schema\": \"http://json.schemastore.org/launchsettings.json\",\n      \"profiles\": {\n        \"http\": {\n          \"commandName\": \"Project\",\n          \"dotnetRunMessages\": true,\n          \"launchBrowser\": false,\n    **\"****applicationUrl\"****:****\"http://localhost:5132\"****,**\n          \"environmentVariables\": {\n            \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n          }\n        },\n        \"https\": {\n          \"commandName\": \"Project\",\n          \"dotnetRunMessages\": true,\n          \"launchBrowser\": false,\n    **\"applicationUrl\"****:****\"https://localhost:5131;http://localhost:5132\"****,**\n          \"environmentVariables\": {\n            \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n          }\n        }\n      }\n    } \n    ```", "```cs\n<Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Client\" /> \n```", "```cs\n<Protobuf>\n  <Include>Protos\\greet.proto</Include>\n  <GrpcServices>Client</>\n  <Access>Public</Access>\n  <ProtoCompile>True</ProtoCompile>\n  <CompileOutputs>True</CompileOutputs>\n  <OutputDir>obj\\Debug\\net8.0\\</OutputDir>\n  <Generator>MSBuild:Compile</Generator>\n<Protobuf> \n```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Google.Protobuf\" Version=\"3.24.4\" />\n      <PackageReference Include=\"Grpc.Net.ClientFactory\" Version=\"2.57.0\" />\n      <PackageReference Include=\"Grpc.Tools\" Version=\"2.58.0\">\n        <PrivateAssets>all</PrivateAssets>\n        <IncludeAssets>runtime; build; native; contentfiles; \n          analyzers; buildtransitive</IncludeAssets>\n      </PackageReference>\n    </ItemGroup> \n    ```", "```cs\n    \"profiles\": {\n      ...\n    **\"https\"****:****{**\n        \"commandName\": \"Project\",\n        \"dotnetRunMessages\": true,\n        \"launchBrowser\": true,\n    **\"applicationUrl\"****:****\"https://localhost:5133;http://localhost:5134\"****,**\n        \"environmentVariables\": {\n          \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n        } \n    ```", "```cs\n    option csharp_namespace = \"Northwind.Grpc.Client.Mvc\"; \n    ```", "```cs\n    <ItemGroup>\n      <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"**Client**\" />\n    </ItemGroup> \n    ```", "```cs\n    public static partial class Greeter\n    { \n      ...\n      public partial class GreeterClient : grpc::ClientBase<GreeterClient>\n      { \n    ```", "```cs\n    using Northwind.Grpc.Client.Mvc; // To use Greeter.GreeterClient. \n    ```", "```cs\n    builder.Services.AddGrpcClient<Greeter.GreeterClient>(\"Greeter\",\n      options =>\n      {\n        options.Address = new Uri(\"https://localhost:5131\");\n      }); \n    ```", "```cs\n    namespace Northwind.Grpc.Client.Mvc.Models;\n    public class HomeIndexViewModel\n    {\n      public string? Greeting { get; set; }  \n      public string? ErrorMessage { get; set; }\n    } \n    ```", "```cs\n    using Grpc.Net.ClientFactory; // To use GrpcClientFactory. \n    ```", "```cs\n    public class HomeController : Controller\n    {\n      private readonly ILogger<HomeController> _logger;\n    **private****readonly** **Greeter.GreeterClient _greeterClient;**\n      public HomeController(ILogger<HomeController> logger**,**\n     **GrpcClientFactory factory**)\n      {\n        _logger = logger;\n        _**greeterClient = factory.CreateClient<Greeter.GreeterClient>(****\"Greeter\"****);**\n      } \n    ```", "```cs\n    public **async** **Task<**IActionResult**>** Index(**string** **name =** **\"Henrietta\"**)\n    {\n     **HomeIndexViewModel model =** **new****();**\n    **try**\n     **{**\n     **HelloReply reply =** **await** **_greeterClient.SayHelloAsync(**\n    **new** **HelloRequest { Name = name });**\n     **model.Greeting =** **\"Greeting from gRPC service: \"** **+ reply.Message;**\n     **}**\n    **catch** **(Exception ex)**\n     **{**\n     **_logger.LogWarning(****$\"Northwind.Grpc.Service is not responding.\"****);**\n     **model.ErrorMessage = ex.Message;**\n     **}**\n     return View(model);\n    } \n    ```", "```cs\n    **@using Northwind.Grpc.Client.Mvc.Models**\n    **@model HomeIndexViewModel**\n    @{\n      ViewData[\"Title\"] = \"Home Page\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">Welcome</h1>\n     **<div** **class****=****\"alert alert-secondary\"****>**\n     **<form>**\n     **<input name=****\"name\"** **placeholder=****\"Enter your name\"** **/>**\n     **<input type=****\"submit\"** **/>**\n     **</form>**\n     **</div>**\n     **@if (Model.Greeting** **is****not****null****)**\n     **{**\n     **<p** **class****=****\"alert alert-primary\"****>@Model.Greeting</p>**\n     **}**\n     **@if (Model.ErrorMessage** **is****not****null****)**\n     **{**\n     **<p** **class****=****\"alert alert-danger\"****>@Model.ErrorMessage</p>**\n     **}**\n    </div> \n    ```", "```cs\n    info: System.Net.Http.HttpClient.Greeter.LogicalHandler[100]\n          Start processing HTTP request POST https://localhost:5131/greet.Greeter/SayHello\n    info: System.Net.Http.HttpClient.Greeter.ClientHandler[100]\n          Sending HTTP request POST https://localhost:5131/greet.Greeter/SayHello\n    info: System.Net.Http.HttpClient.Greeter.ClientHandler[101]\n          Received HTTP response headers after 60.5352ms - 200\n    info: System.Net.Http.HttpClient.Greeter.LogicalHandler[101]\n          End processing HTTP request after 69.1623ms - 200 \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.DataContext\n    .SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    syntax = \"proto3\";\n    option csharp_namespace = \"Northwind.Grpc.Service\";\n    package shipper;\n    service Shipper {\n      rpc GetShipper (ShipperRequest) returns (ShipperReply);\n    }\n    message ShipperRequest {\n      int32 shipper_id = 1;\n    }\n    message ShipperReply {\n      int32 shipper_id = 1;\n      string company_name = 2;\n      string phone = 3;\n    } \n    ```", "```cs\n    <ItemGroup>\n      <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Server\" />\n     **<Protobuf Include=****\"Protos\\shipper.proto\"** **GrpcServices=****\"Server\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    using Grpc.Core; // To use ServerCallContext.\n    using Northwind.EntityModels; // To use NorthwindContext.\n    using ShipperEntity = Northwind.EntityModels.Shipper;\n    namespace Northwind.Grpc.Service.Services;\n    public class ShipperService : Shipper.ShipperBase\n    {\n      private readonly ILogger<ShipperService> _logger;\n      private readonly NorthwindContext _db;\n      public ShipperService(ILogger<ShipperService> logger,\n        NorthwindContext context)\n      {\n        _logger = logger;\n        _db = context;\n      }\n      public override async Task<ShipperReply?> GetShipper(\n        ShipperRequest request, ServerCallContext context)\n      {\n        ShipperEntity? shipper = await _db.Shippers\n          .FindAsync(request.ShipperId);\n        return shipper is null ? null : ToShipperReply(shipper);\n      }\n      // A mapping method to convert from a Shipper in the\n      // entity model to a gRPC ShipperReply.\n      private ShipperReply ToShipperReply(ShipperEntity shipper)\n      {\n        return new ShipperReply\n        {\n          ShipperId = shipper.ShipperId,\n          CompanyName = shipper.CompanyName,\n          Phone = shipper.Phone\n        };\n      }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use AddNorthwindContext method. \n    ```", "```cs\n    builder.Services.AddNorthwindContext(); \n    ```", "```cs\n    app.MapGrpcService<ShipperService>(); \n    ```", "```cs\n    option csharp_namespace = \"Northwind.Grpc.**Client.Mvc**\"; \n    ```", "```cs\n    <ItemGroup>\n      <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Client\" />\n      <Protobuf Include=\"Protos\\shipper.proto\" GrpcServices=\"**Client**\" />\n    </ItemGroup> \n    ```", "```cs\n    builder.Services.AddGrpcClient<Shipper.ShipperClient>(\"Shipper\",\n      options =>\n      {\n        options.Address = new Uri(\"https://localhost:5131\");\n      }); \n    ```", "```cs\n    public string? ShipperSummary { get; set; } \n    ```", "```cs\n    public class HomeController : Controller\n    {\n      private readonly ILogger<HomeController> _logger;\n      private readonly Greeter.GreeterClient _greeterClient;\n    **private****readonly** **Shipper.ShipperClient _shipperClient;**\n      public HomeController(ILogger<HomeController> logger,\n        GrpcClientFactory factory)\n      {\n        _logger = logger;\n        _greeterClient = factory.CreateClient<Greeter.GreeterClient>(\"Greeter\");\n        _**shipperClient = factory.CreateClient<Shipper.ShipperClient>(****\"Shipper\"****);**\n      } \n    ```", "```cs\n    public async Task<IActionResult> Index(\n      string name = \"Henrietta\"**,** **int** **id =** **1**)\n    {\n      HomeIndexViewModel model = new();\n      try\n      {\n        HelloReply reply = await greeterClient.SayHelloAsync(\n          new HelloRequest { Name = name });\n        model.Greeting = \"Greeting from gRPC service: \" + reply.Message;\n     **ShipperReply shipperReply =** **await** **_shipperClient.GetShipperAsync(**\n    **new** **ShipperRequest { ShipperId = id });**\n     **model.ShipperSummary =** **\"Shipper from gRPC service: \"** **+** \n    **$\"ID:** **{shipperReply.ShipperId}****, Name:** **{shipperReply.CompanyName}****,\"**\n     **+** **$\" Phone:** **{shipperReply.Phone}****.\"****;**\n      }\n      catch (Exception ex)\n      {\n        _logger.LogWarning($\"Northwind.Grpc.Service is not responding.\");\n        model.ErrorMessage = ex.Message;\n      }\n      return View();\n    } \n    ```", "```cs\n    @using Northwind.Grpc.Client.Mvc.Models\n    @model HomeIndexViewModel\n    @{\n      ViewData[\"Title\"] = \"Home Page\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">Welcome</h1>\n      <div class=\"alert alert-secondary\">\n        <form>\n          <input name=\"name\" placeholder=\"Enter your name\" />\n          <input type=\"submit\" />\n        </form>\n    **<****form****>**\n    **<****input****name****=****\"id\"****placeholder****=****\"****Enter a shipper id\"** **/>**\n    **<****input****type****=****\"submit\"** **/>**\n    **</****form****>**\n      </div>\n      @if (Model.Greeting is not null)\n      {\n        <p class=\"alert alert-primary\">@Model.Greeting</p>\n      }\n      @if (Model.ErrorMessage is not null)\n      {\n        <p class=\"alert alert-danger\">@Model.ErrorMessage</p>\n      }\n     **@if (Model.ShipperSummary is not null)**\n     **{**\n    **<****p****class****=****\"alert alert-primary\"****>****@Model.ShipperSummary****</****p****>**\n     **}**\n    </div> \n    ```", "```cs\n    fail: Grpc.AspNetCore.Server.ServerCallHandler[6]\n          Error when executing service method 'GetShipper'.\n          System.PlatformNotSupportedException: Dynamic code generation is not supported on this platform.\n             at System.Reflection.Emit.AssemblyBuilder.ThrowDynamicCodeNotSupported()\n    ...\n             at Microsoft.EntityFrameworkCore.Storage.Database.CompileQuery[TResult](Expression query, Boolean async)\n    ...\n             at Northwind.Grpc.Service.Services.ShipperService.GetShipper(ShipperRequest request, ServerCallContext context) in C:\\apps-services-net8\\Chapter13\\Northwind.Grpc.Service\\Services\\ShipperService.cs:line 22\n    ... \n    ```", "```cs\n    <!--<PublishAot>true</PublishAot>--> \n    ```", "```cs\n    <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.1.2\" /> \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnection and so on.\n    using System.Data; // To use CommandType. \n    ```", "```cs\n    public override async Task<ShipperReply?> GetShipper(\n      ShipperRequest request, ServerCallContext context)\n    {\n    **// We cannot use EF Core in a native AOT compiled project.**\n      **//** ShipperEntity? shipper = await _db.Shippers\n      **//**   .FindAsync(request.ShipperId);\n     **SqlConnectionStringBuilder builder =** **new****();**\n     **builder.InitialCatalog =** **\"Northwind\"****;**\n     **builder.MultipleActiveResultSets =** **true****;**\n     **builder.Encrypt =** **true****;**\n     **builder.TrustServerCertificate =** **true****;**\n     **builder.ConnectTimeout =** **10****;** **// Default is 30 seconds.**\n     **builder.DataSource =** **\".\"****;** **// To use local SQL Server.**\n     **builder.IntegratedSecurity =** **true****;**\n    **/***\n     **// To use SQL Server Authentication:**\n     **builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");**\n     **builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");**\n     **builder.PersistSecurityInfo = false;**\n     ***/**\n     **SqlConnection connection =** **new****(builder.ConnectionString);**\n    **await** **connection.OpenAsync();**\n     **SqlCommand cmd = connection.CreateCommand();**\n     **cmd.CommandType = CommandType.Text;**\n     **cmd.CommandText =** **\"SELECT ShipperId, CompanyName, Phone\"**\n     **+** **\" FROM Shippers WHERE ShipperId = @id\"****;**\n     **cmd.Parameters.AddWithValue(****\"id\"****, request.ShipperId);**\n     **SqlDataReader r =** **await** **cmd.ExecuteReaderAsync(**\n     **CommandBehavior.SingleRow);**\n     **ShipperReply? shipper =** **null****;**\n    **// Read the expected single row.**\n    **if** **(****await** **r.ReadAsync())**\n     **{**\n     **shipper =** **new****()**\n     **{**\n     **ShipperId = r.GetInt32(****\"ShipperId\"****),**\n     **CompanyName = r.GetString(****\"CompanyName\"****),**\n     **Phone = r.GetString(****\"Phone\"****)**\n     **};**\n     **}**\n    **await** **r.CloseAsync();**\n    **return** **shipper;**\n    } \n    ```", "```cs\n    // Use the slim builder to reduce the size of the application\n    // when using the publish AOT project option.\n    // var builder = WebApplication.CreateSlimBuilder(args); \n    ```", "```cs\n    <PropertyGroup>\n      <TargetFramework>net8.0</TargetFramework>\n      ...\n     **<EmitCompilerGeneratedFiles>****true****</EmitCompilerGeneratedFiles>**\n    </PropertyGroup> \n    ```", "```cs\n    dotnet publish \n    ```", "```cs\n    Generating native code\n    ...\n    C:\\Users\\markj\\.nuget\\packages\\microsoft.data.sqlclient\\5.1.1\\runtimes\\win\\lib\\net6.0\\Microsoft.Data.SqlClient.dll : warning IL2104: Assembly 'Microsoft\n    .Data.SqlClient' produced trim warnings. For more information see https://aka.ms/dotnet-illink/libraries [C:\\apps-services-net8\\Chapter13\\Northwind.Grpc.Service\\Northwind.Grpc.Service.csproj]\n    ... \n    ```", "```cs\n    Northwind.Grpc.Service.exe --urls \"https://localhost:5131\" \n    ```", "```cs\n    using Grpc.Core; // To use AsyncUnaryCall<T>. \n    ```", "```cs\n    **//** ShipperReply shipperReply = await _shipperClient.GetShipperAsync(\n    **//**   new ShipperRequest { ShipperId = id });\n    **// The same call as above but not awaited.**\n    **AsyncUnaryCall<ShipperReply> shipperCall = _shipperClient.GetShipperAsync(**\n    **new** **ShipperRequest { ShipperId = id });**\n    **Metadata metadata =** **await** **shipperCall.ResponseHeadersAsync;**\n    **foreach** **(Metadata.Entry entry** **in** **metadata)**\n    **{**\n    **// Not really critical, just doing this to make it easier to see.**\n     **_logger.LogCritical(****$\"Key:** **{entry.Key}****, Value:** **{entry.Value}****\"****);**\n    **}**\n    **ShipperReply shipperReply =** **await** **shipperCall.ResponseAsync;**\n    ViewData[\"shipper\"] = \"Shipper from gRPC service: \" + \n      $\"ID: {shipperReply.ShipperId}, Name: {shipperReply.CompanyName},\"\n      + $\" Phone: {shipperReply.Phone}.\"; \n    ```", "```cs\n    public override async Task<ShipperReply> GetShipper(\n      ShipperRequest request, ServerCallContext context)\n    {\n     **_logger.LogCritical(****$\"This request has a deadline of** **{**\n     **context.Deadline:T}****. It is now** **{DateTime.UtcNow:T}****.\"****);**\n    **await** **Task.Delay(TimeSpan.FromSeconds(****5****));**\n      ...\n    } \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"**Information**\"\n        }\n      }\n    } \n    ```", "```cs\n    AsyncUnaryCall<ShipperReply> shipperCall = shipperClient.GetShipperAsync(\n      new ShipperRequest { ShipperId = id }**,**\n    **// Deadline must be a UTC DateTime.**\n      **deadline: DateTime.UtcNow.AddSeconds(****3****)**); \n    ```", "```cs\n    **catch** **(RpcException rpcex)** **when** **(rpcex.StatusCode ==** \n    **global****::Grpc.Core.StatusCode.DeadlineExceeded)**\n    **{**\n     **_logger.LogWarning(****\"Northwind.Grpc.Service deadline exceeded.\"****);**\n     **model.ErrorMessage = rpcex.Message;**\n    **}**\n    catch (Exception ex)\n    {\n      _logger.LogWarning($\"Northwind.Grpc.Service is not responding.\");\n      model.ErrorMessage = ex.Message;\n    } \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"**Information**\"\n        }\n      }\n    } \n    ```", "```cs\n    crit: Northwind.Grpc.Service.Services.ShipperService[0]\n          This request has a deadline of 14:56:30\\. It is now 14:56:27. \n    ```", "```cs\n    info: System.Net.Http.HttpClient.Shipper.LogicalHandler[100]\n          Start processing HTTP request POST https://localhost:5131/shipper.Shipper/GetShipper\n    info: System.Net.Http.HttpClient.Shipper.ClientHandler[100]\n          Sending HTTP request POST https://localhost:5131/shipper.Shipper/GetShipper\n    warn: Grpc.Net.Client.Internal.GrpcCall[7]\n          gRPC call deadline exceeded.\n    info: Grpc.Net.Client.Internal.GrpcCall[3]\n          Call failed with gRPC error status. Status code: 'DeadlineExceeded', Message: ''. \n    ```", "```cs\n    **//** await Task.Delay(TimeSpan.FromSeconds(5)); \n    ```", "```cs\nsyntax = \"proto3\";\nimport \"google/protobuf/duration.proto\";  \nimport \"google/protobuf/timestamp.proto\";\nmessage Employee {\n  int32 employeeId = 1;\n  google.protobuf.Timestamp birth_date = 2;\n  google.protobuf.Duration earned_vacation_time = 3;\n  ...\n} \n```", "```cs\npublic class Employee\n{\n  public int EmployeeId;\n  public Timestamp BirthDate;\n  public Duration EarnedVacationTime;\n} \n```", "```cs\nEmployee employee = new()\n{\n  EmployeeId = 1,\n  BirthDate = Timestamp.FromDateTimeOffset(new DateTimeOffset(\n    year: 1998, month: 11, day: 30, hour: 0, minute: 0, second: 0,\n    offset: TimeSpan.FromHours(-5)),\n  EarnedVacationTime = Duration.FromTimeSpan(TimeSpan.FromDays(15))\n};\nDateTimeOffset when = employee.BirthDate.ToDateTimeOffset();\nTimeSpan daysoff = employee.EarnedVacationTime.ToTimeSpan(); \n```", "```cs\n    syntax = \"proto3\";\n    option csharp_namespace = \"Northwind.Grpc.Service\";\n    package decimal;\n    // Example: 12345.6789 -> { units = 12345, nanos = 678900000 }\n    message DecimalValue {\n        // To store the whole units part of the amount.\n        int64 units = 1;\n        // To store the nano units of the amount (10^-9).\n        // Must be same sign as units.\n        sfixed32 nanos = 2;\n    } \n    ```", "```cs\n    syntax = \"proto3\";\n    option csharp_namespace = \"Northwind.Grpc.Service\";\n    import \"Protos/decimal.proto\";\n    package product;\n    service Product {\n      rpc GetProduct (ProductRequest) returns (ProductReply);\n      rpc GetProducts (ProductsRequest) returns (ProductsReply);\n      rpc GetProductsMinimumPrice (ProductsMinimumPriceRequest) \n          returns (ProductsReply);\n    }\n    message ProductRequest {\n      int32 product_id = 1;\n    }\n    message ProductsRequest {\n    }\n    message ProductsMinimumPriceRequest {\n      decimal.DecimalValue minimum_price = 1;\n    }\n    message ProductReply {\n      int32 product_id = 1;\n      string product_name = 2;\n      int32 supplier_id = 3;\n      int32 category_id = 4;\n      string quantity_per_unit = 5;\n      decimal.DecimalValue unit_price = 6;\n      int32 units_in_stock = 7;\n      int32 units_on_order = 8;\n      int32 reorder_level = 9;\n      bool discontinued = 10;\n    }\n    message ProductsReply {\n      repeated ProductReply products = 1;\n    } \n    ```", "```cs\n    syntax = \"proto3\";\n    option csharp_namespace = \"Northwind.Grpc.Service\";\n    import \"google/protobuf/duration.proto\";\n    import \"google/protobuf/timestamp.proto\";\n    package employee;\n    service Employee {\n      rpc GetEmployee (EmployeeRequest) returns (EmployeeReply);\n      rpc GetEmployees (EmployeesRequest) returns (EmployeesReply);\n    }\n    message EmployeeRequest {\n      int32 employee_id = 1;\n    }\n    message EmployeesRequest {\n    }\n    message EmployeeReply {\n      int32 employee_id = 1;\n      string last_name = 2;\n      string first_name = 3;\n      string title = 4;\n      string title_of_courtesy = 5;\n      google.protobuf.Timestamp birth_date = 6;\n      google.protobuf.Timestamp hire_date = 7;\n      string address = 8;\n      string city = 9;\n      string region = 10;\n      string postal_code = 11;\n      string country = 12;\n      string home_phone = 13;\n      string extension = 14;\n      bytes photo = 15;\n      string notes = 16;\n      int32 reports_to = 17;\n      string photo_path = 18;\n    }\n    message EmployeesReply {\n      repeated EmployeeReply employees = 1;\n    } \n    ```", "```cs\n    <ItemGroup>\n      <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Server\" />\n      <Protobuf Include=\"Protos\\shipper.proto\" GrpcServices=\"Server\" />\n     **<Protobuf Include=****\"Protos\\decimal.proto\"** **GrpcServices=****\"Server\"** **/>**\n     **<Protobuf Include=****\"Protos\\product.proto\"** **GrpcServices=****\"Server\"** **/>**\n     **<Protobuf Include=****\"Protos\\employee.proto\"** **GrpcServices=****\"Server\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    namespace Northwind.Grpc.Service;\n    // This will merge with the DecimalValue type generated by the\n    // gRPC tools in the obj\\Debug\\net8.0\\Protos\\Decimal.cs file.\n    public partial class DecimalValue\n    {\n      private const decimal NanoFactor = 1_000_000_000;\n      public DecimalValue(long units, int nanos)\n      {\n        Units = units;\n        Nanos = nanos;\n      }\n      public static implicit operator decimal(DecimalValue grpcDecimal)\n      {\n        return grpcDecimal.Units + (grpcDecimal.Nanos / NanoFactor);\n      }\n      public static implicit operator DecimalValue(decimal value)\n      {\n        long units = decimal.ToInt64(value);\n        int nanos = decimal.ToInt32((value - units) * NanoFactor);\n        return new DecimalValue(units, nanos);\n      }\n    } \n    ```", "```cs\n    app.MapGrpcService<ProductService>();\n    app.MapGrpcService<EmployeeService>(); \n    ```", "```cs\n    option csharp_namespace = \"Northwind.Grpc.Client.Mvc\"; \n    ```", "```cs\n    <ItemGroup>\n      <Protobuf Include=\"Protos\\greet.proto\" GrpcServices=\"Client\" />\n      <Protobuf Include=\"Protos\\shipper.proto\" GrpcServices=\"Client\" />\n     **<Protobuf Include=****\"Protos\\decimal.proto\"** **GrpcServices=****\"Client\"** **/>**\n     **<Protobuf Include=****\"Protos\\employee.proto\"** **GrpcServices=****\"Client\"** **/>**\n     **<Protobuf Include=****\"Protos\\product.proto\"** **GrpcServices=****\"Client\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    namespace Northwind.Grpc.**Client.Mvc**; \n    ```", "```cs\n    builder.Services.AddGrpcClient<Product.ProductClient>(\"Product\",\n      options =>\n      {\n        options.Address = new Uri(\"https://localhost:5131\");\n      });\n    builder.Services.AddGrpcClient<Employee.EmployeeClient>(\"Employee\",\n      options =>\n      {\n        options.Address = new Uri(\"https://localhost:5131\");\n      }); \n    ```", "```cs\n    public async Task<IActionResult> Products(decimal minimumPrice = 0M)\n    {\n      ProductsReply reply = await _productClient.GetProductsMinimumPriceAsync(\n        new ProductsMinimumPriceRequest() { MinimumPrice = minimumPrice });\n      return View(reply.Products);\n    }\n    public async Task<IActionResult> Employees()\n    {\n      EmployeesReply reply = await _employeeClient.GetEmployeesAsync(\n        new EmployeesRequest());\n      return View(reply.Employees);\n    } \n    ```", "```cs\n    <li class=\"nav-item\">\n      <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\">Home</a>\n    </li>\n    **<****li****class****=****\"nav-item\"****>**\n    **<****a****class****=****\"nav-link text-dark\"****asp-area****=****\"\"****asp-controller****=****\"Home\"****asp-action****=****\"Products\"****>****Products****</****a****>**\n    **</****li****>**\n    **<****li****class****=****\"nav-item\"****>**\n    **<****a****class****=****\"****nav-link text-dark\"****asp-area****=****\"\"****asp-controller****=****\"Home\"****asp-action****=****\"Employees\"****>****Employees****</****a****>**\n    **</****li****>** \n    ```", "```cs\n    @using Google.Protobuf.Collections\n    @using Northwind.Grpc.Client.Mvc\n    @model RepeatedField<ProductReply>\n    @{\n      ViewData[\"Title\"] = \"Products\";\n      decimal price = 0;\n    }\n    <h1>@ViewData[\"Title\"]</h1>\n    <table class=\"table table-primary table-bordered\">\n      <thead>\n        <tr>\n          <th>Product ID</th>\n          <th>Product Name</th>\n          <th>Unit Price</th>\n          <th>Units In Stock</th>\n          <th>Units On Order</th>\n          <th>Reorder Level</th>\n          <th>Discontinued</th>\n        </tr>\n      </thead>\n      <tbody>\n        @foreach (ProductReply p in Model)\n        {\n          <tr>\n            <td>@p.ProductId</td>\n            <td>@p.ProductName</td>\n            @{ price = p.UnitPrice; }\n            <td>@price.ToString(\"C\")</td>\n            <td>@p.UnitsInStock</td>\n            <td>@p.UnitsOnOrder</td>\n            <td>@p.ReorderLevel</td>\n            <td>@p.Discontinued</td>\n          </tr>\n        }\n      </tbody>\n    </table> \n    ```", "```cs\n    @using Google.Protobuf.Collections\n    @using Northwind.Grpc.Client.Mvc\n    @model RepeatedField<EmployeeReply>\n    @{\n      ViewData[\"Title\"] = \"Employees\";\n    }\n    <h1>@ViewData[\"Title\"]</h1>\n    <table class=\"table table-primary table-bordered\">\n      <thead>\n        <tr>\n          <th>Employee ID</th>\n          <th>Full Name</th>\n          <th>Job Title</th>\n          <th>Address</th>\n          <th>Birth Date</th>\n          <th>Photo</th>\n        </tr>\n      </thead>\n      <tbody>\n        @foreach (EmployeeReply e in Model)\n        {\n          <tr>\n            <td>@e.EmployeeId</td>\n            <td>@e.TitleOfCourtesy @e.FirstName @e.LastName</td>\n            <td>@e.Title</td>\n            <td>@e.Address<br />@e.City<br />@e.Region<br />\n                @e.PostalCode<br />@e.Country</td>\n            <td>@e.BirthDate.ToDateTimeOffset().ToString(\"D\")</td>\n            <td><img src=\"data:image/jpg;base64,\n              @Convert.ToBase64String(e.Photo.ToByteArray())\" />\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table> \n    ```", "```cs\n    using Grpc.Core.Interceptors; // To use Interceptor and so on.\n    using Grpc.Core; // To use AsyncUnaryCall<T>.\n    namespace Northwind.Grpc.Client.Mvc.Interceptors;\n    public class ClientLoggingInterceptor : Interceptor\n    {\n      private readonly ILogger _logger;\n      public ClientLoggingInterceptor(ILoggerFactory loggerFactory)\n      {\n        _logger = loggerFactory.CreateLogger<ClientLoggingInterceptor>();\n      }\n      public override AsyncUnaryCall<TResponse> \n        AsyncUnaryCall<TRequest, TResponse>(TRequest request,\n        ClientInterceptorContext<TRequest, TResponse> context,\n        AsyncUnaryCallContinuation<TRequest, TResponse> continuation)\n      {\n        _logger.LogWarning(\"Starting call. Type: {0}. Method: {1}.\",\n          context.Method.Type, context.Method.Name);\n        return continuation(request, context);\n      }\n    } \n    ```", "```cs\n    // Register the interceptor before attaching it to a gRPC client.\n    builder.Services.AddSingleton<ClientLoggingInterceptor>(); \n    ```", "```cs\n    builder.Services.AddGrpcClient<Product.ProductClient>(\"Product\",\n      options =>\n      {\n        options.Address = new Uri(\"https://localhost:5131\");\n      })\n      **.AddInterceptor<ClientLoggingInterceptor>()**; \n    ```", "```cs\n    warn: Northwind.Grpc.Client.Mvc.Interceptors.ClientLoggingInterceptor[0]\n          Starting call. Type: Unary. Method: GetProductsMinimumPrice. \n    ```", "```cs\n    public override **async** Task<HelloReply> SayHello(\n      HelloRequest request, ServerCallContext context)\n    {\n    **await** **Task.Delay(****1000****);**\n    **if** **(Random.Shared.Next(****1****,** **4****) ==** **1****)**\n     **{**\n        return new HelloReply\n        {\n          Message = \"Hello \" + request.Name\n        };\n     **}**\n    **else**\n     **{**\n    **throw****new** **RpcException(****new** **Status(StatusCode.Unavailable,**\n    **\"Service is temporarily unavailable. Try again later.\"****));**\n     **}**\n    } \n    ```", "```cs\n    **MethodConfig configForAllMethods =** **new****()** \n    **{**\n     **Names = { MethodName.Default },**\n     **RetryPolicy =** **new** **RetryPolicy**\n     **{**\n     **MaxAttempts =** **5****,**\n     **InitialBackoff = TimeSpan.FromSeconds(****1****),**\n     **MaxBackoff = TimeSpan.FromSeconds(****5****),**\n     **BackoffMultiplier =** **1.5****,**\n     **RetryableStatusCodes = { StatusCode.Unavailable }**\n     **}**\n    **};**\n    builder.Services.AddGrpcClient<Greeter.GreeterClient>(\"Greeter\",\n      options =>\n      {\n        options.Address = new Uri(\"https://localhost:5131\");\n      })\n     **.ConfigureChannel(channel =>**\n     **{**\n     **channel.ServiceConfig =** **new** **ServiceConfig**\n     **{**\n     **MethodConfigs = { configForAllMethods }**\n     **};**\n     **})**; \n    ```", "```cs\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\n          Request starting HTTP/2 POST https://localhost:5131/greet.Greeter/SayHello - application/grpc -\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\n          Executing endpoint 'gRPC - /greet.Greeter/SayHello'\n    info: Grpc.AspNetCore.Server.ServerCallHandler[7]\n          Error status code 'Unavailable' with detail 'Service is temporarily unavailable. Try again later.' raised.\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\n          Executed endpoint 'gRPC - /greet.Greeter/SayHello'\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\n          Request finished HTTP/2 POST https://localhost:5131/greet.Greeter/SayHello - 200 0 application/grpc 1039.4626ms\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\n          Request starting HTTP/2 POST https://localhost:5131/greet.Greeter/SayHello - application/grpc -\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\n          Executing endpoint 'gRPC - /greet.Greeter/SayHello'\n    info: Grpc.AspNetCore.Server.ServerCallHandler[7]\n          Error status code 'Unavailable' with detail 'Service is temporarily unavailable. Try again later.' raised.\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\n          Executed endpoint 'gRPC - /greet.Greeter/SayHello'\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\n          Request finished HTTP/2 POST https://localhost:5131/greet.Greeter/SayHello - 200 0 application/grpc 1008.1375ms\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\n          Request starting HTTP/2 POST https://localhost:5131/greet.Greeter/SayHello - application/grpc -\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\n          Executing endpoint 'gRPC - /greet.Greeter/SayHello'\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\n          Executed endpoint 'gRPC - /greet.Greeter/SayHello'\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\n          Request finished HTTP/2 POST https://localhost:5131/greet.Greeter/SayHello - 200 - application/grpc 1016.4590ms \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Grpc.AspNetCore\" Version=\"2.59.0\" />\n      <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.1.2\" />\n     **<PackageReference Include=****\"Microsoft.AspNetCore.Grpc.JsonTranscoding\"**\n     **Version=****\"8.0.0\"** **/>**\n    </ItemGroup> \n    ```", "```cs\n    {\n      \"Logging\": {\n        \"LogLevel\": {\n          \"Default\": \"Information\",\n          \"Microsoft.AspNetCore\": \"Warning\"\n        }\n      },\n      \"AllowedHosts\": \"*\",\n      \"Kestrel\": {\n        \"EndpointDefaults\": {\n          \"Protocols\": \"**Http1AndHttp2**\"\n        }\n      }\n    } \n    ```", "```cs\n    builder.Services.AddGrpc()**.AddJsonTranscoding()**; \n    ```", "```cs\n    syntax = \"proto3\";\n    option csharp_namespace = \"Northwind.Grpc.Service\";\n    import \"google/protobuf/duration.proto\";\n    import \"google/protobuf/timestamp.proto\";\n    **import** **\"google/api/annotations.proto\"****;**\n    package employee;\n    service Employee {\n      rpc GetEmployee (EmployeeRequest) returns (EmployeeReply) **{**\n     **option (google.api.http) = {**\n    **get****:** **\"/v1/employee/{employee_id}\"**\n     **};**\n     **}**;\n      rpc GetEmployees (EmployeesRequest) returns (EmployeesReply);\n    } \n    ```", "```cs\n    ### Configure a variable for the gRPC service base address.\n    @base_address = https://localhost:5131/\n    ### Get Nancy Davolio.\n    GET {{base_address}}v1/employee/1\n    ### Get Andrew Fuller Davolio.\n    GET {{base_address}}v1/employee/2 \n    ```", "```cs\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[1]\n          Request starting HTTP/1.1 GET https://localhost:5131/v1/employee/2 - - -\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[0]\n          Executing endpoint 'gRPC - /v1/employee/{employee_id}'\n    info: Microsoft.AspNetCore.Routing.EndpointMiddleware[1]\n          Executed endpoint 'gRPC - /v1/employee/{employee_id}'\n    info: Microsoft.AspNetCore.Hosting.Diagnostics[2]\n          Request finished HTTP/1.1 GET https://localhost:5131/v1/employee/2 - 200 - application/json;+charset=utf-8 7.9328ms \n    ```"]