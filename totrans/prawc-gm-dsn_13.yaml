- en: Balancing
  prefs: []
  type: TYPE_NORMAL
- en: Gather your notes! We will now combine the knowledge from several previous chapters
    and explore the ways in which we can plan, structure, and adjust the rules and
    content of our games in order to create an experience that captures and holds
    the interest of our audience.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you'll be armed with practical techniques and methods
    used to adjust the game difficulty, set the pace of the experience, and tune the
    game's balance to perfection. Let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: Gameplay balancing
  prefs: []
  type: TYPE_NORMAL
- en: The concept of gameplay balancing goes far beyond the qualities of individual
    objects and characters, and into the nature of play itself. Take a look at the
    classic example of a flawed game design, tic-tac-toe. Why is it flawed? The starting
    player can never lose. All they need to do is put their mark in the middle. This
    is a failure of both the design of the rules and the game's balance itself. The
    game has a single, dominant strategy, and once you figure it out or run into it,
    you're incentivized to replicate it. The presence of a dominant strategy drastically
    reduces a player's options. Once introduced into the play pattern, the game loses
    most of its appeal. Therefore, a wide possibility space is a defining feature
    of a well-balanced game.
  prefs: []
  type: TYPE_NORMAL
- en: '"Given the opportunity, players will optimize the fun out of a game."'
  prefs: []
  type: TYPE_NORMAL
- en: –Soren Johnson, lead designer of Civilization IV, 2011.
  prefs: []
  type: TYPE_NORMAL
- en: Players are naturally inclined to fall into the safety of senseless repetition,
    a single move or combo in a fighting game, an optimized building order in an RTS,
    or the strongest known character class in an RPG. It's our job to make this kind
    of choice as hard as possible. Speaking of choices, why don’t you make one now?
  prefs: []
  type: TYPE_NORMAL
- en: 'You''re stopped by a group of bandits. Pick your weapon: a rusty dagger or
    the Excalibur sword?'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s not kid ourselves, this is not a compelling choice; it does nothing to
    expand your possibilities with an interesting (viable) strategy. And strategies
    are choices.
  prefs: []
  type: TYPE_NORMAL
- en: Ask yourself, are you designing a puzzle or a game? Puzzles can be great fun,
    but they rely on a limited set of solutions. Once a puzzle is solved, it offers
    little replayability. Games that rely on puzzles often require a constant stream
    of new challenges. Non-puzzle games, on the other hand, are at their best when
    they are nearly impossible to solve. To get the most out of your game mechanics,
    you want solutions that are imperfect and shift depending on the situation. When
    asked "which weapon/gadget/car/character is the best?", the answer you should
    aim for is it depends.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, it's perfectly valid to have an optimal tool for a specific job, but
    what you should stay clear from is the perfect tool for every job. A compelling
    choice always comes with a trade-off of some sorts. The trade-off doesn't have
    to be the cost, time, reliability, or a risk of some sorts, it may just be the
    inability to do something equally interesting instead.
  prefs: []
  type: TYPE_NORMAL
- en: Game balancing is a war of attrition. It often comes down to thousands of little
    changes, be it to the level design, the mechanics, or the game's data. In the
    beginning, everything you do will be an estimation, a ballpark. In these early
    phases, it's more important to set your data's structure than to achieve the best
    possible balance. Only after extensive playtesting, and with the help of subjective
    player feedback and objective analytics, will you be able to move towards true
    balance. And still, true balance, is more of an aspiration than a guaranteed result.
  prefs: []
  type: TYPE_NORMAL
- en: Balancing methods and tips
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list of tips and tricks should help build an understanding of
    how to approach the process of game balancing. Right after that, we’ll share some
    of the actual balancing techniques that you can apply to your project!:'
  prefs: []
  type: TYPE_NORMAL
- en: Start somewhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is 200 or 2,000 the right number of hit points? Well… that depends. When it
    comes to game balance, everything is relative. Plant a stake in the ground by
    setting one element that feels right, and then use it as a reference point for
    everything else.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Narrow your options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid iterating in small increments. It's better to overshoot by a large margin
    to eliminate that option and increase the resolution of changes as you go along.
    First balancing attempts should be bold; the time for tiny 5% tweaks comes much
    later.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use big integers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If possible, try to base data around values with at least a couple of digits.
    Numbers in their hundreds and thousands are easier to read and operate on than
    tens of millions or fractions. They also allow for the right level of in-game
    granularity; you can deal 25 damage instead of being forced to choose between
    the large gaps that exists between 2 or 3.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Round up/down smartly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using multipliers on your data will often create numbers with lots of digits
    after the decimal point. On top of that, exponential growth in many game economies
    can easily turn your starting values in the hundreds into endgame values in the
    tens of millions. In these scenarios, you'll need to use clever rounding methods
    based on the factor of the number.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Spreadsheet formulas are an invaluable tool for any game designer! To achieve
    good rounding, you can try the following formula: = Floor(A1,10^(Floor(log10(A1))-1)))'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: It takes the value (A1) and rounds it down (Floor) to just two significant digits,
    creating a set of clean and readable numbers that maintain the right level of
    detail. This way, 5,421 becomes 5,400, and 1,437,938 turns into 1,400,000\. If
    you'd like to show more significant digits, simply change the -1 at the end into
    -2 and so on. You can also use Ceiling instead of Floor to round values up.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Perception matters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Are you familiar with the weak assault rifle anecdote? A rumor has it that,
    in Halo: Combat Evolved, playtesters were avoiding the assault rifle like wildfire.
    They claimed it was too weak, even when the balancing was taken to the extreme,
    making it completely overpowered. Turns out, all the weapon needed was a louder
    sound effect with an increased amount of bass. Remember, balance is subjective!
    If players believe a tool is weak and avoid using it, it is weak, just not from
    the data point of view. If attempts to popularize a certain strategy with data
    alone fails, make sure to look for issues in perception. Perhaps all you need
    to do is work on the feedback including animation, camera, sounds, visual effects,
    and physical attributes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Self-balancing strategies and countering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rock-paper-scissors is a classic example of a self-balancing system; each choice
    is valid but comes with a clear strength and weakness. It's also a system built
    on hard-counters, that is, choices that guarantee success against a particular
    strategy. Most interesting power relationships are usually a bit more subtle,
    since they come down to a series of advantages and disadvantages, rather than
    absolutes. When designing the dynamics of different units and strategies, make
    sure that the power relationships make sense in the context of the game. The more
    grounded in reality and less ambiguous your strengths and weaknesses (trade-offs)
    are, the lower the learning curve.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For example, in a medieval strategy, the equivalent to the rock-paper-scissors
    (but with a less binary result) game would be the relationship between archers,
    pikemen, and cavalry. Archers are strong against pikemen, pikemen counter the
    cavalry, and cavalry can easily defeat the archers. Another highly popular power
    relationship is the one of opposing elements, as seen in Pokémon, which started
    simple with fire burning grass, grass absorbing water, and water putting out fire.
    Relationships of this kind can be a bit confusing though, especially if more ambiguous
    elements join the mix. Put the likes of metal, life, death, light, ice, poison,
    darkness, and electricity into the mix, and you’ll have a potential cluster of
    confusion on your hands. To make a system with such a high level of complexity
    work, you'll need to introduce it gradually, and ensure a good level of visibility
    that helps guide the players (in Pokémon, a clear efficacy report is given after
    each attack).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Feedback loops
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unbalanced systems often spiral out of control due to feedback loops. What are
    those? Let's start by examining a scenario from a fictional city management game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Due to an unforeseen event, the population in your town shrinks, resulting in
    a decreased tax income. This, in turn, sabotages your budget and further lowers
    the satisfaction of your people, making them leave, reducing the tax income even
    further. Not long after, your town is desolate and out of funds to pick itself
    up.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is an example of a positive feedback loop, where an event creates a ripple
    effect, which propelled its impact even further. Whenever the penalty for failure
    or reward for success is not carefully managed, there is a strong chance of having
    your game balance spiral out of control. Stay vigilant and investigate the systems
    you create by paying close attention to how player's power grows and shrinks with
    each outcome, and whether there's anything stopping them from raising or falling
    completely out of balance. A well-designed game is less of a nuclear reactor and
    more of a thermostat, keeping the temperature within a desired range.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Try Fermi estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Back in [`Chapter 3`](index_split_070.html#filepos210445), Scoping a Game Project,
    we introduced you to the estimation techniques attributed to Enrico Fermi. The
    same method can be utilized in game balancing. The initial values are almost always
    more or less educated guesses, and you can improve your results by considering
    the minimum and maximum acceptable values, then shooting straight for the average.
    Is five million the right amount of XP when going from level 49 to 50? I don’t
    know, but I do know that by framing this problem in an approachable way, we can
    better understand the implications of picking that number. Break it down!:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How much experience can a player on level 49 get in an hour?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if he's quite bad, and what if he's an expert?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How many hours will people spend on the game a day?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the minimum, and what's the maximum?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for some divisions! Do these numbers look right?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you're happy with the time required for different types of players to level
    up, you've got yourself a great starting point!
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Unify your units
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In complex economies with many resources at play, a shared frame of reference
    empowers you to make more natural comparisons and more informed balancing decisions.
    Don’t compare apples to oranges... just make sure everything is counted in carrots
    instead!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To start with, determine your unit! You can pick one of the resources that is
    already in the game, or you can use a completely imaginary one. I usually create
    a new one and call it UU for short. Next up, you have to set up a cost relationship
    matrix inside your balancing spreadsheets. This matrix states how much of the
    other resources goes towards one unified unit. For example, 1 UU equals 200 gold,
    350 wood, 100 sulfur, and five minutes of playtime. The breakdown immediately
    settles that sulfur is twice as valuable as gold. The question is, is it twice
    as hard to obtain? And is that a conscious decision or an accident? A unified
    unit is highly effective at helping you assess and tune the taps (production)
    and sinks (spend) of multiple resources.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Quantities and relative power
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who'll win the fight between (A) one tank with 80 health and 50 damage and (B)
    two tanks with 50 health and 25 damage? The sum of the attributes favors (B),
    but the relative power does not. In this case, after (A) destroys one of the two
    tanks, it effectively lowers enemy damage potential by half, securing the margin
    it needs to win. This is a trivial example, but it goes to show that there’s more
    to balancing than raw attributes.The number of units in play can be either advantageous
    (the ability to move independently and attack two targets at once, enemy damage
    can be wasted due to overkilling, and so on) as well as disadvantageous (harder
    to maneuver or engage all enemies at once, requires more space or storage, easily
    countered by area of effect abilities). Always pay attention to how these factors
    affect your game!
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Use analytics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Parts of your game will be nearly impossible to balance without the help of
    analytics. Once the game is in the hands of playtesters, in beta or live, you
    should be able to gather data on the most and least popular choices and strategies,
    as well as win/loss ratios associated with them. More information on analytics
    awaits you in [`Chapter 15`](index_split_443.html#filepos1012825), Games As a
    Service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Lost opportunity is a cost
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Saving money for a single big unit or item? The process of saving resources
    and withholding actions is part of the cost in itself. This cost varies depending
    on the game's mechanics and individual circumstances, but it may mean that you’re
    unable to scout ahead, capture ground, or defend against an incoming attack. Make
    sure that build times, limits, cooldowns, and building or research requirements
    are all taken into account, and treat them as part of the unit cost, allowing
    you to scale its power more accurately.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Make everything feel powerful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A common pitfall for many inexperienced designers is to put absolute trust in
    their spreadsheet formulas and move everything towards an uninspiring mediocrity.
    The most rewarding games are those in which most tools, gadgets, abilities, and
    weapons are not only fun to use, but when applied in the correct scenario, they
    feel absolutely overpowered. Above all, your game should be exciting, and it’s
    hard to pull that off if differences between strategies are minuscule, and the
    outcome of the balancing dull.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Minimize the iteration time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having to rebuild the entire game just to see a few modified parameters in action
    is not only a huge waste of time but it also makes the balancing tasks much harder
    to pull off. After all, it's hard to follow your ideas through if you have to
    put your thought process on hold for minutes or hours at a time. Before production
    begins, make sure that the team knows your plans and intentions regarding game
    balancing. In an ideal world, basic tuning operations are done in the game editor
    or by using a debugged in-game interface and are immediately reflected in the
    game. Quick iteration times will help you enter the flow-state and apply your
    creativity in a more natural manner, with experimental edits that are in direct
    response to immediate observations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Focus on the end-user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you grow more and more adept at playing your own game (and solving your own
    puzzles), everything you create begins to feel easy and straightforward. The more
    experience you have with your game, the higher the risk of creating inaccessible
    content. Keep track of your target audience and determine who’s going to interact
    with the feature or content that you're tuning. When testing your work, you can
    try to put an artificial handicap on yourself, for example, by restricting yourself
    from using more than a few special abilities, or making purposefully sub-optimal
    decisions and seeing how the gameplay scenario evolves from there.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: MBT balancing
  prefs: []
  type: TYPE_NORMAL
- en: The MBT approach takes root in the old real-time strategy games like Command
    and Conquer, where the pillar unit of the army (usually the main battle tank,
    hence the MBT) is served as the centerpiece for unit balancing. It’s a simple
    but effective technique that can be applied to medium amounts of content (25-100
    units).
  prefs: []
  type: TYPE_NORMAL
- en: 'To start with, pick a well-rounded unit, the focal point of the content. In
    the case of a real-time strategy game such as CC: Red Alert, it would be the main
    battle tank—the backbone of most armies. Set the stats of your MBT, and tie everything
    else in the game right back to it. If your game features multiple factions, balancing
    the MBTs of each faction serves as a cross-faction anchor.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of final in-game values, you want your initial MBT''s stats to be
    as easy to read as possible: Speed 10, Health 100, Damage Per Second 10, Attack
    Speed 1, Range 10, Cost 100\. The simple, round numbers make every other unit
    in the game instantly comparable to the common denominator.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the base data for most units is plugged inside the spreadsheets, you can
    use simple formulas to calculate things such as:'
  prefs: []
  type: TYPE_NORMAL
- en: Health per resource spent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DPS (damage per second) per resource spent
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to kill an MBT (derived from using attack speed and DPS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time to be killed by an MBT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you're happy with the balance on paper, you can apply multiplications and
    be rounding to the data to make the numbers work (and look) good in-game.
  prefs: []
  type: TYPE_NORMAL
- en: This technique can get you very far, very quickly, but its value goes down with
    the amount of complexity in play. Once you introduce elements such as special
    attacks, the area of effect abilities, different armor types, status resistances,
    and whole new categories such as flying or melee units, the MBT approach becomes
    much harder to pull off in an efficient and effective manner.
  prefs: []
  type: TYPE_NORMAL
- en: Layered Modifiers
  prefs: []
  type: TYPE_NORMAL
- en: The titular Layered Modifiers are as much of a balancing method as they are
    a way of structuring and thinking about your data. It is a powerful and highly
    scalable approach that can help you manage huge amounts of content and variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Case in point, I have used this method in a mobile strategy game called Transformers:
    Earth Wars to establish and maintain balance with over 20,000 building and character
    variants. In terms of combat balancing alone, our data spreadsheets were in control
    of:'
  prefs: []
  type: TYPE_NORMAL
- en: 9 defensive buildings (with up to 15 upgrade levels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 13 utility and production buildings (with up to 15 upgrade levels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 6 Combiners (super-units composed of 5-6 other robots; each Combiner had 2 upgrade
    versions and 10 to 20 power levels)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Over 120 Transformers characters, equally divided into two playable factions
    - Autobots and Decepticons:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autobot and Decepticon characters were paired against one another. Some pairings
    were equal, and some were slightly asymmetric. Early on we pushed for variation,
    but after several months of live operations, we moved towards a near 100 percent
    equality within each pairing, mostly to maintain the community's sentiment on
    fairness.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each character was given a star rating (from 1 to 5 stars). The higher the rating,
    the more rare and powerful the character. We usually released between 3 and 5
    versions of each character.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All characters had from 20 to 60 levels of experience (20 for 1-star, 40 for
    2-star, 50 for 3-star, 60 for 4 and 5-star characters).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each character had a special ability with 10 upgrade levels (most abilities
    were unique within your faction, and were only shared with a bot's counterpart
    on the opposite side).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Dozens of unique (and upgradable) pieces of equipment that change the stats
    and abilities of characters and defenses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few dozens of battle boosts (single use power-ups)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, how do you deal with over 20,000 moving parts? By starting from the very
    top and creating layers of modifiers that help differentiate, scale, and distinguish
    between your units.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Transformers: Earth Wars, we were able to master our data in Google Sheets
    and used an in-house plugin to import data from the sheets into files for use
    in-game. Let''s break down the organization of character data and how various
    parts were multiplied and inherited at different levels. Note that a similar (but
    less complicated) approach was used for buildings, game economy, and other data-heavy
    aspects of the game.'
  prefs: []
  type: TYPE_NORMAL
- en: Tier 1 – Globals sheet
  prefs: []
  type: TYPE_NORMAL
- en: 'Globals are the very top level of our data structure. By changing values here,
    you can change the balance of all units in the game. Once established, these values
    almost never change. The Globals sheet contains:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Base stats: HP (health), DPS (damage), and movement speed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Level up bonuses: Set percentage increase to HP and DPS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Star-rating multipliers: Table of multiplications to base HP and DPS depending
    on the star rating'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Post-battle cooldown values: Characters go on cooldown after each battle, and
    the length grows with character level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tier 2 – Character Classes sheet
  prefs: []
  type: TYPE_NORMAL
- en: 'This is another high-level sheet, which is established and iterated early on.
    There were 18 character classes in the data, which is far too many for an average
    player to keep in their heads. This is why some of the classes get merged when
    imported, allowing us to maintain six easily distinguishable in-game character
    classes. For example, Melee DPS exists as a separate class inside the sheets but
    gets put under the umbrella of the Warrior class later down the line. All in all,
    the Character Classes sheet contains:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Class-based stat multipliers: HP (health), DPS (damage), and movement speed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Starting abilities: Basic and special attacks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Common passive effects: For example, Warriors get immunity to stun effects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Default weapons: For example, Gunners usually use the same grenade launcher,
    unless it gets overwritten later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Base in-game size: Warriors are bigger than Gunners, while Minions are even
    smaller'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And more!: There''s a variety of additional parameters and tags, which are
    used in battle to tell classes apart, both visually and functionally'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tier 3 – Character Archetype sheet
  prefs: []
  type: TYPE_NORMAL
- en: 'With foundations set by Globals and Character Classes, we can now define the
    characteristics of a single, bespoke unit. The Character Archetype sheet is the
    starting point for any designer who wishes to add a new character to the game.
    It is the place where the most specific qualities are set, including:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Character class and faction: Pick one of the 18 classes from the class sheet
    and select the faction for your new robot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Individual stat modifiers: Characters can be customized within each class by
    giving them various modifiers. For example, 1.08x HP and 0.96x DPS or additional
    movement speed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Attack overwrites: Many attacks are shared between characters, but it''s up
    to the designer to hand-pick the most suitable ones. For example, a Warrior with
    a melee weapon will use sword attacks rather than punches. Additional attacks
    and abilities are also added on a case-by-case basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Special ability: Some special abilities are shared between a few bots in the
    same class, but most characters receive a bespoke special ability that''s been
    handcrafted by the designer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional passive effects: You can customize the character further by including
    passive effects such as immunity to stun.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Weapon overwrites and other cosmetic data: We have the full ability to supply
    the character with a different (or an additional) weapon as well as to change
    its size and other cosmetic attributes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tier 4 – Character Upgrade Path sheet
  prefs: []
  type: TYPE_NORMAL
- en: With the character's class and archetype largely defined, it's time to decide
    what star-ratings will be available. The Upgrade Path sheet contains little bespoke
    data, but is often imported and referenced across many sheets to build a list
    of available characters and their star-ratings.
  prefs: []
  type: TYPE_NORMAL
- en: Tier 5 – Troop Level Data sheet
  prefs: []
  type: TYPE_NORMAL
- en: There are tens of thousands of character level files, but none of them have
    to be managed by hand. The Troop Level Data sheet uses the data and multipliers
    from other sheets to assemble a long list with stats and parameters for each level
    and a star rating of a character. All you have to do is to import the new parameters
    from the sheet and into the game files!
  prefs: []
  type: TYPE_NORMAL
- en: Use case summary
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s sum up our multi-layered setup and extract its key learnings:'
  prefs: []
  type: TYPE_NORMAL
- en: Globals are the foundations for everything; they allow us to make sweeping changes
    to the entire balance from a single place.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Classes allow us to group similar content together and balance different categories
    of content against one another. For example, ranged characters against melee ones.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Archetypes give us the option to personalize each individual piece of content
    and retain the control over the minute details.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upgrade Paths is where we clone a single character into several variants. They
    let us determine which variants of the characters we'll have in the game and whether
    there are any special changes between different versions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Troop Level Data is a data sheet, which uses everything we defined to automatically
    assemble thousands of character files. All we need to do is to import the data
    into the game!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This might seem like a lot of spreadsheet work, but the time we'd save on balancing
    and setting up game data could be counted in hundreds of man-hours. Layered Modifiers
    allow us to hand-craft and personalize each character and building while retaining
    the flexibility to make sweeping changes to the game's balance on a grand scale.
    Consider a similar approach whenever faced with a large game economy with thousands
    of moving parts.
  prefs: []
  type: TYPE_NORMAL
- en: 'While big spreadsheets are great for handling heaps of game data, new mechanics
    and abilities are best tuned on a real-time basis. In Transformers: Earth Wars,
    we created and balanced character abilities directly inside Unity Editor, which
    allowed for a quick, and in some cases instant, iteration. As for game mechanics,
    camera controls, and certain game rules, we built a simple debug menu that gave
    us control over default parameters and allowed us to switch (flag) components
    of different features ON and OFF. This level of control enables live experimentation
    with game features and is invaluable when prototyping new gameplay.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Game difficulty
  prefs: []
  type: TYPE_NORMAL
- en: It's up to the game and level designers to create an experience that's optimal
    for as many players as possible, and if that seems like a simple task, trust us
    when we say it's not!
  prefs: []
  type: TYPE_NORMAL
- en: As we have already established in [`Chapter 12`](index_split_353.html#filepos796656),
    Accessibility, our audience varies greatly in their level of gaming experience,
    real-world knowledge, physical and mental capacity, and even language proficiency.
    From pattern recognition and memory to spatial navigation, reflexes, and hand-eye
    coordination, there are many skills at play, and in some departments, the gap
    between players can be huge. Moreover, some players like to be challenged, and
    others have little time and patience for a serious struggle, preferring to breeze
    through levels and experience the story with relative ease.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways of addressing the difficulty gap. Some rely on pre-set attributes
    and redesigning the game content, while others are fully automatic and respond
    to player’s performance. No matter which solution you go for, it's important to
    remember that as the designer of the game, you're sure to know it inside out.
    By default, you'll make the game too difficult for the average player.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s paramount to playtest early, and playtest often, even if the sessions
    end up being quick, informal, and undocumented. Try to expose your work to players
    on both ends of the spectrum. Looking at how low-skilled and extremely proficient
    people react to new in-game challenges will help you assess what is and isn''t
    difficult, and where the difficulty is coming from. Is it the number of variables
    at play, input frequency, accuracy or timing, or is it the game knowledge and
    mastery over game mechanics? After several sessions of this type, you''ll gain
    insight into the main sources of difficulty in your game. You can use this knowledge
    in two ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To develop a set of rules to adhere to: For example, in an RTS on easy difficulty,
    we shouldn''t have the AI attack the player in the first 6 minutes as they are
    unlikely to be ready.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To help you score your encounters: Try assigning artificial difficulty points
    and multipliers to various parts of your gameplay challenges. For example, a shielded
    enemy is 5, a shotgun troop is 3 (but 7 when fought up-close), having at least
    two enemies at once adds +20 percent to overall encounter difficulty, and so on.
    These calculations will be very rough at first, but you can make them more accurate
    by using them on fragments that are known to be easy or hard and adjusting the
    scoring criteria afterward. After a few days of iteration, you''ll be able to
    measure how easy or hard each part of the game is, even before it''s made!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static difficulty settings
  prefs: []
  type: TYPE_NORMAL
- en: Presenting a set of difficulty settings for players to choose from at the beginning
    of the game is one of the most common practices for tackling the initial skill
    gap. If possible, you should allow for this setting to be changed on-the-fly from
    within the options screen. This ensures that players are not entirely constrained
    by their initial choice, should they find themselves mismatched to the gameplay
    challenges at hand.
  prefs: []
  type: TYPE_NORMAL
- en: Difficulty settings may seem like a trivial system at first, but determining
    what to change and how to change it without sacrificing playability is the hard
    part (pun intended). The most common and often the easiest approach is to create
    multipliers for basic game parameters such as time or move limit, player and enemy
    health, damage and accuracy, cost of equipment, and so on. This practice can often
    get you quite far, but it can also result in weird and immersion-breaking scenarios
    where, for example, enemies operate with spot-on accuracy and require a ridiculous
    amount of hits, while players themselves perish after a single shot in the foot.
  prefs: []
  type: TYPE_NORMAL
- en: A hard difficulty setting should challenge all types of skills. Be careful of
    reducing your gameplay to a memory challenge, where players have to endure constant
    failure until they develop a bespoke solution to a particular encounter, only
    to fail repeatedly on the next one. By the same account, playing on an easy or
    casual setting should still involve making gameplay choices and require an understanding
    of basic game mechanics.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: By modifying attributes, costs, and rewards, you manipulate not only the game's
    difficulty but also player behavior. For example, by making things like health
    and ammo pick-ups extremely scarce, you are sure to encourage an overly slow and
    safe play. On the other hand, make these resources overly abundant and players
    will stop caring about them altogether and resort to the easiest, most powerful
    solution (no matter how boringly repetitive).
  prefs: []
  type: TYPE_NORMAL
- en: 'A step up from simple multipliers is to modify the gameplay challenges themselves
    by:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bespoke challenge variations: Adding, removing, and swapping out enemies across
    the whole game can be a tedious task. If possible, strive for a system where you
    can flag different parts of in-game challenges (such as enemies or obstacles)
    and toggle them ON/OFF based on the flag. For example, out of 7 enemies that can
    spawn in an encounter, enemy #5 will only spawn on the hard setting, and enemy
    #3 will be swapped out for a weaker one when playing on easy. Be careful when
    making drastic changes, as you can accidentally break the performance (too many
    actors on the screen), or create an encounter that''s so short it feels redundant
    or so long it gets tedious.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modifying starting states: This involves changing player''s initial units/equipment/abilities/tools
    and so on, as well as modifying the default state of the world. Now, changing
    the entire map layout may seem a bit extreme, but making certain traps or pick-ups
    appear/disappear depending on the difficulty setting is not unfeasible!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changing the winning and losing conditions: Setting different score requirements,
    turn and time limits, or adding/removing requirements altogether is usually easy
    to pull off but requires individual tuning and additional playtesting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Needless to say, difficulty-specific content variations can add a lot of workload
    across the whole project, which is why it often pays off to invest time in modifying
    your game systems and mechanics instead. Let''s take a look at a few examples!:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving the information horizon: Information is power! You can affect a player''s
    decision-making capabilities by changing the rules around the fog of war or by
    unveiling/obscuring information about enemy strength, position, strategy, and
    weaknesses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Toggling player assisting features: Depending on the difficulty setting, you
    can vary the amount of gameplay assistance offered to players. This includes anything
    from enabling or disabling hints and aim to assist, to toggling various elements
    of the user interface such as the mini-map, objective and enemy markers, target
    reticle, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adapting major game systems: Gameplay stretches far beyond the scope of your
    level design and mechanics. Any optional rules and restrictions can be toggled
    based on the difficulty. For example, in a puzzle game, the time limit could be
    turned off on easy, while the move undo feature is unavailable on hard. Moreover,
    you can make your in-game challenges more thrilling (but also potentially frustrating)
    by limiting the quantity of game saves or restricting them to a particular place
    or point in time (be it outside of combat, or in a special shrine). That said,
    changes to the base rules and systems can be controversial and leave an undesirable
    impact on some of your mechanics and the structure of the average game session.
    Apply them with great care.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Modifying the Artificial Intelligence: Look for parts of enemy behavior that
    can be tweaked across difficulty settings without making the enemies seem either
    totally incompetent or godlike. For example, modify the likelihood of flanking
    or aggressive pursuit behaviors, or the chances of using special moves and throwing
    grenades. Another good trick is to provide the enemies with low initial accuracy,
    that is, the first few shots are unlikely to hit (and perhaps they even deal lowered
    damage), giving players more time to react while still feeling threatened.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Changing the consequences of failure: Lowering or increasing the consequences
    of failure will dramatically change the feel of the game. To increase the tension
    and make your gameplay more impactful, you can experiment with the loss of progress
    (experience, items, resources, and so on) or even more extreme features such as
    permanent death—a defining feature of modern rogue-like games like Faster Than
    Light or Rogue Legacy. Negative consequences are not for everyone though, so be
    very careful as to how and when you apply them. You''re at a real risk of infuriating
    your players and throwing them into a feedback loop fueled by failure, where each
    death makes them weaker and even more likely to fail again. Consider serving these
    features on an opt-in basis. In XCOM2, players can toggle the Ironman mode when
    starting a new game. On Ironman, players are restricted to a single save file,
    which gets overwritten on each turn, making every action and decision irreversible
    (and by extension, much more thrilling).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember, making any changes to game difficulty will cause the ripple on effects
    in the game's balance (by promoting or diminishing the effectiveness of certain
    strategies) and the pacing of the experience (by encouraging more reckless or
    careful play). Do not venture into extremes; try mixing several solutions and
    observe their effects.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Embracing mono-difficulty
  prefs: []
  type: TYPE_NORMAL
- en: Multiple difficulty settings are a long-accepted practice among players and
    the industry, but not every game requires them. Even if you normalize your game
    towards the average player, you can still cater to the far ends of the skill spectrum.
  prefs: []
  type: TYPE_NORMAL
- en: A great way to maintain a single difficulty mode, yet prevent players from getting
    stuck, is to offer help once they meet a certain condition. For example, being
    stuck on a puzzle for 15 minutes triggers a hint, or failing to complete the stage
    five times in a row gives you a power-up.
  prefs: []
  type: TYPE_NORMAL
- en: Successful (and very explicit) examples of such systems can be found in many
    Nintendo products. Super Mario 3D World gives you access to a powerful power-up
    after several deaths, while New Super Mario Bros. U – features a Super Guide Block—an
    auto-play mode that can complete the troubling area (or even the entire stage)
    for the player. These systems are opt-in (players can ignore the help offering)
    and often have some kind of consequence such as a reduced score.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, to cater to the highly skilled players, you’ll need to create
    ample ways for them to show off and receive recognition. The most popular features
    include optional objectives (in Super Mario 3D World, that would be collecting
    all of the special coins) and difficult side missions, optional bosses, high-score
    tables, maliciously hidden secrets, accolades, and achievements. Reaching the
    end of a game may be relatively easy, but mastering it - completing all challenges
    and unlocking an alternative ending - should be a far harder endeavor!
  prefs: []
  type: TYPE_NORMAL
- en: Mono-difficulty is a great option for story-driven experiences and puzzle or
    adventure games. Puzzle challenges are not only difficult to grade accurately
    (what's hard for me may be trivially easy for you), but also pose a challenge
    to the creation of more discrete difficulty settings - how can you scale your
    puzzles without giving away the solution? A fixed difficulty setting is also a
    suitable choice for products with innovative mechanics that do not rely on physical
    prowess or strong gaming experience—we all start in a similar spot. Budget and
    time constraints are also valid, though far less glamorous reasons.
  prefs: []
  type: TYPE_NORMAL
- en: Automatic difficulty adjustment
  prefs: []
  type: TYPE_NORMAL
- en: Regardless of whether your game has one or six difficulty settings, there are
    ways in which you can cleverly adapt individual challenges to a player's current
    progress or performance.
  prefs: []
  type: TYPE_NORMAL
- en: Rubberbanding
  prefs: []
  type: TYPE_NORMAL
- en: Rubberbanding systems are designed to keep contestants close together, to wrap
    an imaginary rubber band around them. They try to maintain an optimal level of
    challenge for each player by creating a negative feedback loop and adjusting in-game
    variables in real time. You can view rubberbanding as a systematic equivalent
    of Robin Hood; it helps those who struggle while providing an extra challenge
    to those who dominate. It can be done with players being well aware of the process
    or in total secret.
  prefs: []
  type: TYPE_NORMAL
- en: Most racing games do their best to cover their tracks and create an illusion
    of a tight and fair race. In Burnout, Need for Speed and countless other games,
    an invisible rubber band controls the speed of NPC drivers, linking their performance
    to a player's position. Get ahead and the rivals will soon follow to contest your
    position, fall behind and the whole pack of AI drivers will slow down to let you
    catch up and get within a fighting range.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, item box mechanics in Nintendo's Mario Kart serve as a good
    example of rubberbanding that's almost explicit. The game features boxes that
    can be picked up during the race, and each box gives out a seemingly random item
    from a selection of several weapons and power-ups. However, players are quick
    to realize that participants at the front of the pack receive far inferior items
    than those at the end. The gap in item quality between positions 1 and 8 is huge,
    and the game never tries to obscure it—some items are simply unavailable to well-performing
    drivers.
  prefs: []
  type: TYPE_NORMAL
- en: The item box modifiers in Mario Kart serve as proof that the use of rubberbanding
    reaches far beyond the racing genre. Bonuses and penalties based on a player's
    standing (be it against the NPCs as well as other players) can be introduced to
    almost any game system.
  prefs: []
  type: TYPE_NORMAL
- en: Once you determine what to adjust, you'll also need to decide whether to be
    explicit about it or keep it a secret. As a rule of thumb, any game that tries
    to maintain a level of credibility and fairness in its competitive play should
    be crystal clear about the benefits and pitfalls of holding a certain place. In
    case of single player games, the options are wider and you may employ any tricks
    you wish. However, bear in mind that enforcing optimal difficulty across the board
    can make for a poorly paced and highly predictable game (we'll speak more about
    pacing later in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer matchmaking
  prefs: []
  type: TYPE_NORMAL
- en: 'Multiplayer games are at their best when played between equal opponents. This
    is easier said than done, but there are several criteria you can consider when
    pitting players against one another:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inexperience: You may want to safeguard newcomers and have them play against
    one another until they reach a certain stage. Avoid applying it to the entire
    population.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Progression: If players get more powerful over time (for example, by gaining
    experience levels or building up their kingdom), you might want to calculate their
    power and use it to match between players who are not too far apart.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Past performance: This is often done by introducing an Elo rating system, which
    gives each player a skill rating. This rating can be shown directly as is, translated
    into a title/medal/league of some sort, or kept invisible (to prevent players
    from trying to game the system and lower their ratings in anticipation of big
    events). Regardless, after each game, rating points are attributed to the winner
    and are detracted from the loser depending on their standings. In an uneven match,
    the higher rated player has more to lose and less to gain and vice-versa.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Current performance: In some scenarios, the easiest approach might be to match
    players based on their most recent standing or a winning streak. For example,
    let''s say that the players are to play a total of 10 games; all you need is to
    match people with similar win rates together. This will make it harder and harder
    to go on undefeated while giving the players who are below average an increasing
    chance to win over time. This works best when players start at a similar entry
    point.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Self-determined matchmaking: You can also try to offload the burden of matchmaking
    by letting the players pick their own opponent. Put your players into several
    categories based on their skill or power, and then let them choose what kind of
    opponent they wish to fight. Make sure to incentivize punching above your weight
    while providing an insignificant reward for smashing someone far weaker.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Progression-driven difficulty
  prefs: []
  type: TYPE_NORMAL
- en: Certain games aspire to offer both extensive character progression systems and
    vast worlds with seemingly unrestricted exploration. This offering creates a balancing
    risk where players are likely to run into a whole array of encounters, from trivial
    to impossibly difficult.
  prefs: []
  type: TYPE_NORMAL
- en: To counter this risk, game developers often create systems that automatically
    adjust game difficulty based on a particular indicator, such as the critical vector
    of progression (which we introduced as a concept in [`Chapter 3`](index_split_070.html#filepos210445),
    Scoping a Game Project). This could be a player’s experience level, the state
    of the main storyline, or even the elapsed time since the game began.
  prefs: []
  type: TYPE_NORMAL
- en: The aforementioned difficulty changes often focus on scaling the power of encountered
    enemies or even replacing them with entirely different ones. Some rewards are
    also adjusted to remain meaningful, which means that with the very same enemy,
    the quest or loot chest will offer more impressive rewards once your character
    has progressed. Difficulty scaling does not have to be linear; the average encounter
    may get progressively more difficult as players grow more accustomed to the game
    and master its mechanics.
  prefs: []
  type: TYPE_NORMAL
- en: Progression-driven difficulty scaling does not address the differences in skill
    and capabilities between different players. You may still need to resort to the
    classic difficulty settings in addition to your scaling.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In some cases, progression-based difficulty management is a very appealing
    and effective tool by allowing you to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open up the game world: There''s no right or wrong place to be. Explore! Go
    wherever you want, whenever you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Avoid backtracking: No need to run away from a difficult fight, only to return
    to the very same spot later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reduce frustration in combat encounters: There''s little risk of getting stuck
    or killed by a single hit from a powerful foe.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Reward player''s time accordingly: No longer do you have to face the boring
    grind of pushing through a swarm of completely inferior foes and tasks, with nothing
    but meaningless rewards to offset your time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Provide life to the entirety of the game''s content: Since the challenges and
    rewards scale, the entirety of your game content remains viable, so there’s no
    risk of devaluing a large chunk of the game by advancing your characters beyond
    the relevant range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Help with economy balancing: Costs that inflate and deflate based on player''s
    status and income help keep things in an acceptable and relevant range.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nevertheless, employing an auto-balancing system on a wide scale comes with
    significant pitfalls. By constantly scaling the challenges, you effectively remove
    the frame of reference between the power of players'' avatars and the obstacles
    they face. This lack of contrast and static difficulty space hurts your game in
    several ways:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Diminished motivation to progress: Getting killed by a powerful enemy can be
    annoying, but it can also inspire players to better themselves. Setting your sights
    on becoming worthy of this seemingly impossible challenge is an amazing motivator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lack of visible growth: From time to time, it’s best we stop and appreciate
    how far you''ve come. It feels great to crush an enemy that used to be a real
    challenge.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A lessened thrill of exploration: Once you realize that no matter where you
    go you’ll get a fair fight and a fair reward (nothing more, nothing less), the
    motivation to venture into faraway lands fizzles away.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These cons are something that the designers at Bethesda (creators of the games
    in the Fallout and Elder Scrolls series) have realized and tried to address in
    some of their more recent games. While most quest-driven challenges appear to
    scale with player level, there seems to be a limit to how much the things within
    the game world can bend. This modified system helps maintain the feeling of progression
    in the outside world while keeping the core of the experience within a player’s
    ability range and comfort zone.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pacing
  prefs: []
  type: TYPE_NORMAL
- en: Pacing is all about setting the tempo of your game and keeping the players engaged;
    it's the heartbeat of your game. Our ultimate goal is to utterly captivate our
    audience, to suspend their disbelief, and keep them in the state of flow.
  prefs: []
  type: TYPE_NORMAL
- en: 'The psychological concept of flow or the zone has been recognized and named
    by Mihaly Csikszentmihalyi in 1975, and refers to the mental state of being fully
    immersed in the task at hand, even to the point of losing the sense of time and
    space:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00139.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The basic flow graph represents the relationship between difficulty and skill.
    As players grow more experienced and competent, they require more challenging
    tasks.
  prefs: []
  type: TYPE_NORMAL
- en: However, there's more to pacing than matching a player's skill and task difficulty!
    As you may remember, back in the midst of the chapter on level design, we mentioned
    that the pace of the game is often dictated by the intensity of the levels you
    create. The aforementioned intensity stems not only from task difficulty but also
    from mental and sensory stimulation. By this standard, game designers, level designers,
    writers, and artists are all responsible for invoking and maintaining the flow
    state in their own regard.
  prefs: []
  type: TYPE_NORMAL
- en: If you were to look at your game as if it was a dish or a musical composition,
    every bit of content and functionality you have would become an ingredient or
    an instrument; they all play an important part in something bigger. Exciting plot
    twists and a whole new planet to explore both stimulate your audience and raise
    your overall intensity without affecting game difficulty at all.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, novel content and difficult sections raise your intensity
    while repetitive segments and low difficulty lower it. Prolonged periods of low
    intensity lead to boredom, while long, overly intense sections can exhaust your
    players. However, this is just scratching the surface. Before we understand how
    to set and control the pace, let's unpack the meaning of mental and sensory stimulation
    in the context of games.
  prefs: []
  type: TYPE_NORMAL
- en: Mental and sensory stimulation
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the role of pacing to simply manage difficulty would make us disregard
    a whole range of more complex aspects of video games. For example, most humans
    find great joy in exploring uncharted lands, experimenting with new tools, and
    diving deep into captivating stories. These types of experiences are unarguably
    useful in making our games more immersive and engaging, and thus should be paced
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin with, any part of the game that encourages thinking and decision-making
    can be considered as cognitively and mentally stimulating. Actions that stimulate
    our players include (but are not limited to):'
  prefs: []
  type: TYPE_NORMAL
- en: Learning and mastering gameplay mechanics and controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing new and unfamiliar content, building world knowledge
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Predicting consequences of story developments and reminiscing about past events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making meaningful decisions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculating risks and rewards, planning your moves
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sensory stimulation, on the other hand, is all about the visceral experience
    of inhabiting, observing, and listening to the game world, as well as interacting
    with it outside the context of game challenges. Sensory stimulation stems from:'
  prefs: []
  type: TYPE_NORMAL
- en: The theme and mood of the game
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visuals such as 2D and 3D art, animation, visual effects, environments, graphical
    user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UI interactions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Background actors and NPCs (animals or people going about their day)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: World interaction and physics (some of us spent hours using the Gravity Gun
    to throw bathroom sinks in Half-Life 2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio music, sound effects, voice-overs, ambient noises
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Passive (non-interactive) storytelling via text, cutscenes, and audio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding mentioned sources of mental and sensory stimulation are often
    heavily intertwined and impossible to break down without extensive research, but
    attempting to list them may help us appreciate the roles of various parts of the
    game in pacing.
  prefs: []
  type: TYPE_NORMAL
- en: To effectively use mental and sensory stimulation in this context, you need
    to be aware of the inherent diminishing returns. Repeated exposure to any element
    (be it a type of puzzle, musical piece, animation, or background) reduces its
    impact and effectiveness. Overly familiar elements get parsed by our brains as
    a simple background. Just like strangers on the bus, they are rarely memorable
    or worthy of prolonged attention. There is comfort in familiarity, but too much
    of it leads to the feelings of stagnation. Every game world needs background noise,
    but it's up to you to make sure that there is enough going on to maintain a player's
    interest.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, adding more content and mechanics is not a sure-fire way of making
    your game more engaging. To start with, piling up more elements will make quality
    assurance, playtesting, and any gameplay iterations much more expensive. Even
    then, your attempts at enriching the experience can backfire. The same elements
    used to inspire the feelings of awe, anticipation, curiosity, and artistic satisfaction
    can end up overwhelming the player. The story can get diluted by unnecessary plot
    points and the entire game can get too big to manage, too difficult to balance,
    and too long to play through. Prepare a content lifespan document, set your pacing
    early on, and only keep what works!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: How to approach pacing
  prefs: []
  type: TYPE_NORMAL
- en: Challenging and stimulating experiences are powerful weapons against boredom,
    but using them to their best effect is a difficult art. Even in a game with a
    set, unchanging difficulty setting, the intensity of moment to moment gameplay
    is rarely constant.
  prefs: []
  type: TYPE_NORMAL
- en: Instead, we ought to steadily escalate the physical and mental difficulty but
    also remember to give players a moment to catch their breath, plan their next
    moves, invest resources, and start anticipating the next big thing. Moments of
    lower intensity do not need to be empty; they can be populated by scripted events,
    storytelling, socializing, and sensory stimulation.
  prefs: []
  type: TYPE_NORMAL
- en: Contrast applies to pacing as much as it applies to art. If everything explodes,
    nothing really does. A game that's all-out intense has no highlights, no ups,
    and no downs. Flatly paced gameplay and storytelling make up for a series of experiences
    that easily clump together into an indistinguishable mash.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: To put things into a more practical perspective, we'll explore the methods used
    to pace linear content, follow them with more systemic solutions, and close off
    with some loose tips!
  prefs: []
  type: TYPE_NORMAL
- en: Pacing linear content
  prefs: []
  type: TYPE_NORMAL
- en: Linear game content is driven by the combined efforts of level design and the
    narrative, making it expensive and time-consuming to iterate on, but giving you
    the ability to control gameplay on a very granular, moment-by-moment basis. One
    of the best ways of exercising this control is to work with a timeline.
  prefs: []
  type: TYPE_NORMAL
- en: This timeline is a long graph spanning the entire length of a single, self-contained
    fragment of the game that we're about to pace. Gradually, your timeline will be
    populated with more and more precise details, creating a solid action plan and
    reducing iteration times dramatically. It's best to start this process early on,
    during the outline or blockout period, when there's still a potentially high degree
    of flexibility in terms of gameplay, story, intensity, and structure.
  prefs: []
  type: TYPE_NORMAL
- en: Even though we're working on a single area or level, the pace and progression
    of the entire game have to be taken into consideration. Make note of what happens
    before and after your stage, and how your plan fits the overall structure of the
    game.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Since it''s much easier to work on a trusted and effective storytelling structure,
    try dividing your timeline (and thus, your stage) into three or four distinct
    acts:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Escalation
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Twist (optional)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'These acts will help you govern the overall flow of intensity in the level
    and help you provide a sense of progression and closure. They are also a useful
    scaffolding for framing the narrative. Let''s take a look at a fictional example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00121.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, use the content lifespan, the script, level sketch, or any other design
    document to make a list of any elements that you absolutely must have on your
    level. This includes things like plot twists, puzzle ideas, new content, and mechanics
    you plan to introduce and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Place these elements on the timeline, and pinpoint the desired intensity and
    its trend at that point in time:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00084.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is a good starting point, but our acts consist of more than a few key
    points! We can divide them further into areas or chunks of various types, such
    as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Gameplay chunks may include various types, for example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combat
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Puzzle-solving
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Platforming
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploration
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stealth
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Narrative chunks for important story elements, cutscenes, dialogue sections,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tutorials and scripted events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Populate the graph with various chunks and try to maintain a level of variety
    within gameplay tasks and their intensity. Keep refining the curve as you go along!
    Even though the intensity may seem ambiguous at first, it will provide a meaningful
    target to hit during gray boxing and implementation phases and enforce a degree
    of self-control:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00165.jpg)'
  prefs: []
  type: TYPE_IMG
- en: With a complete timeline on hand, you can plan your work more effectively, build
    up to big events, vary the tasks, and deliver an emotional impact. Do not rush
    your timelines; a solid plan can help you save lots of time later on!
  prefs: []
  type: TYPE_NORMAL
- en: Pacing via rules and mechanics
  prefs: []
  type: TYPE_NORMAL
- en: 'By adding and modifying the rules and mechanics, you can evolve your gameplay
    scenarios, setting the pace and intensity in a highly efficient and repeatable
    way. Let''s look at some examples of using game system pacing:'
  prefs: []
  type: TYPE_NORMAL
- en: Time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time limits are often used to raise the pace and keep players on the task at
    hand. Even if things start slow and calculated, the action is sure to pick up
    as any indecision and inaction slowly accumulate towards an incredibly tense finale.
    Furthermore, by using mechanics such as overtime (where the game does not end
    for as long as a losing team is contesting the objective), you can make the game
    more exciting and give the underdogs a chance to come back from their previous
    mistakes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On a different note, the games in the Warrioware series are an extreme example
    of using time in pacing. Players are presented with a series of quick and silly
    micro-games, simple tasks that test your reaction time and ask for a few precise
    inputs. Things start slow, but after a series of several micro-games, the game
    speeds up and raises the difficulty by reducing the time limits for all tasks.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Score
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Getting close to beating a high score is sure to raise the stakes, but the
    use of scoring systems extends beyond rankings or the leaderboard, and has great
    effects on pacing in scenarios involving direct competition. For example, in Rainbow
    Six: Siege, as in many eSports games, two teams compete in games that are divided
    into multiple, individually scored rounds. As the opposing team starts winning
    points, the intensity naturally grows higher for the losing team. For the leading
    side, on the other hand, the effect is the opposite. If you need 5 points to win,
    dropping from 4-0 to 4-1 is still a low-intensity scenario (after all, you have
    plenty of room for error). As always, the key to sustaining an engaging pacing
    across both teams is to provide the means for the losing side to come back, and
    by extension, keep the winning team on their toes.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Resource escalation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking control over resource generation is one of the most effective ways a
    game designer can raise or lower the intensity of any gameplay scenario. In this
    context, the resources (minerals, coins, fuel, mana, and so on) are anything that
    players can use to introduce new elements and options to the game (units, moves,
    combinations, special abilities, and so on). Resource escalation can be done linearly,
    exponentially, or in distinct stages. For example, in Hearthstone and Magic the
    Gathering, the possibilities for combos and the potential impact of each card
    grows steadily with the rise mana. Clash Royale, on the other hand, has 3-minute-long
    matches, where resource production is kept still for the first 2 minutes. After
    that, the game goes into overdrive and doubles the resource generation, and thus
    multiplies the speed and intensity of the gameplay. This practice also increases
    the chances of resolving the match in 3 minutes without triggering overtime.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pacing in MOBA games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Games in the MOBA genre like League of Legends or DOTA 2 are great examples
    of using rules and systems to manipulate pacing. It pays off to investigate these
    games, even if you are not a fan. In both cases, the game starts slow, with players
    largely sticking to their area of the map and methodically accumulating resources
    and unlocking new abilities. As players grow in power, their options increase
    and so does the intensity. After several minutes, players are more able to withstand
    enemy defenses and secure kills. This shifts the dynamic and encourages players
    to group up, enforcing intense team fights.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: However, the higher your character level, the longer you need to wait to respawn.
    This may provide a nice break from an increasingly stressful game, but it also
    increases the consequences of failure. Near the end of a match, the intensity
    spikes from each encounter can become enormous, especially since both teams are
    constantly damaging each other's defenses and coming ever closer to securing a
    victory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Pacing tips
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have an understanding of what pacing is and how to approach it,
    let's look at some more concrete examples and tips, starting with the role of
    actor removal.
  prefs: []
  type: TYPE_NORMAL
- en: Investigating actor removal
  prefs: []
  type: TYPE_NORMAL
- en: Strategy games have a natural pace based on the slow accumulation of power and
    the results of exercising it. In many cases, the intensity grows as you amass
    the army, peaks when you go into battle, and either raise through a lost encounter
    (as you scramble to recover and are left feeling exposed) or lowers with a win
    (as the threat is reduced).
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the higher the number of cards, units, or resources under a player's
    disposal, the more actions and choices they have to make or at least consider.
    Having little to do is far more relaxing than having to analyze hundreds of combinations
    and spread the attention across multiple actors and possible locations.
  prefs: []
  type: TYPE_NORMAL
- en: In team-based games, player elimination is sure to put more pressure on the
    remaining players, especially if there's still a remote chance of winning. In
    fact, increasing the chance to recover from a losing scenario is a great way of
    making the game more fun for both sides.
  prefs: []
  type: TYPE_NORMAL
- en: These are just a few simple examples, but hopefully, you'll look at actor removal
    and player elimination in your games. Analyze the effects they have on pacing,
    and look for improvements that can be made to address or increase these effects.
  prefs: []
  type: TYPE_NORMAL
- en: High-intensity and storytelling
  prefs: []
  type: TYPE_NORMAL
- en: As things start to blow up and the tempo picks up, the plot might need to take
    a backseat. Most Hollywood action movies deliberately pause major plot developments
    for the duration of intense action sequences (car chases, fights, shootouts, and
    so on). These scenes can be great for light characterization, but suffer when
    trying to express complex motives, deep emotions, and intertwined storylines.
    The viewer will be too distracted by everything that’s going on to pay attention
    to more intricate and subtle aspects of the narrative.
  prefs: []
  type: TYPE_NORMAL
- en: Consider applying the same principle to your game and avoid putting heavily
    involved story elements in very intense sections of your game.
  prefs: []
  type: TYPE_NORMAL
- en: Multiplayer pacing and level design
  prefs: []
  type: TYPE_NORMAL
- en: The layout of your maps is a great tool to modify pacing. You may remember from
    the level design chapter that providing effective cover will encourage more careful
    and static play, while rich flanking opportunities and pick-ups will promote movement.
    However, to further control your pacing, you must look at how gameplay evolves
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, in the Battlefield series, the Rush game mode has one team defending
    two objectives (radio transmitters or similar) from the attackers who try to successfully
    detonate them before running out of time or respawns. Upon the successful destruction
    of both objectives, a new set becomes available and the entire action shifts to
    a new part of the map. There may be up to 5 different sets of fresh targets, and
    each set may offer new gameplay opportunities, vehicles, and strategies. In Rush,
    the evolving map layout is constantly shifting the pace.
  prefs: []
  type: TYPE_NORMAL
- en: The map layouts in an RTS like Starcraft 2 are equally as important. For instance,
    you can increase or lower the pace of the match entirely by modifying the number
    of resources available in the starting location, thus changing resource production
    rates and encouraging or discouraging early expansion efforts. Increasing map
    size and surrounding players with destructible obstacles or water would further
    modify the tempo, but at the cost of possibly invalidating certain strategies—ones
    we worked so hard to enable with careful game balancing.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing threat and anxiety
  prefs: []
  type: TYPE_NORMAL
- en: In games that revolve around challenge and skill, threat and anxiety play a
    dominant role in setting the intensity, a role that's often mismanaged or misunderstood.
    The threat itself does not depend entirely on the actual difficulty of the gameplay
    scenario. Instead, it is based on the perception of adversity and fueled by the
    negative consequences of failure.
  prefs: []
  type: TYPE_NORMAL
- en: If the stakes are high, a relatively trivial gameplay encounter can be a source
    of an immense level of threat. For example, when players die in Dark Souls (and
    other games in the Souls series), they drop any Souls they've amassed but not
    spent. Souls are a crucial resource that relates to a character's overall progression.
    If players fail to collect the dropped souls within their next life, the souls
    disappear forever, and with them, potentially hours of character and world progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'By raising the stakes and tapping into the loss aversion bias (it''s in our
    nature to absolutely hate losing or missing out on things) this mechanic can turn
    even the most trivial and previously mastered part of the stage into an immensely
    stressful endeavor. However, there is a positive flipside to this inarguably extreme
    mechanic. The high game difficulty and consequences of repeated failure are not
    only raising the intensity and reinvigorating completed content; the successful
    collection of dropped Souls is accompanied by a great sense of satisfaction, pride,
    and relief. Moreover, even if you were to fail twice in a row, the souls may be
    gone forever but so is the pressure and tension built around trying to reclaim
    them. For an average Dark Souls player, repeated death is as frustrating as it
    is motivating:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00158.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Against all odds, the Dark Souls series has popularised the emotional rollercoaster
    of high-stakes gameplay in the west
  prefs: []
  type: TYPE_NORMAL
- en: Dark Souls aside, an intense game does not need to be a severely punishing one.
    In BioShock, difficult battles often end up with close calls and hard-fought victories.
    This is no accident. According to the developers, the game is designed to tip
    the scale in the player’s favor in times of great need. When the player is about
    to die, the game instead leaves them with a small percentage of health and turns
    them invulnerable for a short period of time. This gives the player a chance to
    shoot back and finish the fight with just a tiny portion of their health left.
    It sure feels great to repeatedly escape death by a razor-thin margin!
  prefs: []
  type: TYPE_NORMAL
- en: There are many more examples of such trickery in the world of game development.
    Just because we expect our players to play fair, doesn't mean we can't cheat a
    little to ensure they are having a good time. If done right, these tricks will
    remain invisible to the players and keep them inside the flow channel, but if
    done badly, they will backfire and break the immersion we worked so hard to build.
  prefs: []
  type: TYPE_NORMAL
- en: A game with no failure states and no punishment is one that poses no direct
    threat to the player, and some can argue that it is not even a real game, but
    an interactive experience. In such scenarios, it's very difficult to maintain
    a player’s interest by directly challenging their abilities. Instead, the game
    has to rely on other emotions and control pacing by rewarding progress, aspirational
    goals (difficult puzzles and challenges), as well as mental and sensory stimulation
    (new mechanics, inspiring art, a captivating story, and so on). Note that having
    to replay even the smallest part of the game is a form of punishment—repeating
    tasks without making progress in the game is rarely fun.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend that you to misuse these in any way. For more information, please
    consult the terms and conditions of the publishers mentioned in the Disclaimer
    section of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned about three interconnected subjects which come together
    to help you make a game full of varied and exciting gameplay scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: To start with, game balancing helped us increase the possibility space by addressing
    dominant strategies, tuning mechanics, and changing the parameters of game content.
    Following that, we explored the methods of setting and adjusting the overall difficulty
    of the game, helping us match it with the capabilities of our audience. Finally,
    we looked at pacing, which allows us to maintain a player's interest and keep
    them in the flow by manipulating the structure and relative intensity of each
    gameplay session.
  prefs: []
  type: TYPE_NORMAL
- en: Next up, we'll dive into the Final 10 Percent, which covers practical tips and
    guidelines on how to raise the quality of your games and turn every interaction
    into a delightful experience.
  prefs: []
  type: TYPE_NORMAL
