["```cs\n    <Grid Name=\"Grid\" Background=\"{StaticResource  ApplicationPageBackgroundThemeBrush}\">\n    ```", "```cs\n    using System;\n    using Windows.UI.Xaml;\n    using Windows.UI.Xaml.Controls;\n    using Windows.UI.Xaml.Navigation;\n    ```", "```cs\n    private readonly DispatcherTimer _timer;\n    private int _ticks;\n    ```", "```cs\n    public MainPage()\n    {\n      InitializeComponent();\n      _timer = new DispatcherTimer();\n      _ticks = 0;\n    }\n    ```", "```cs\n    protected override void OnNavigatedTo(NavigationEventArgs e)\n    {\n    }\n    ```", "```cs\n    base.OnNavigatedTo(e);Grid.Children.Clear();\n    var commonPanel = new StackPanel\n    {\n      Orientation = Orientation.Vertical,\n      HorizontalAlignment = HorizontalAlignment.Center\n    };\n\n    var buttonPanel = new StackPanel\n    {\n      Orientation = Orientation.Horizontal,\n      HorizontalAlignment = HorizontalAlignment.Center\n    };\n\n    var textBlock = new TextBlock\n    {\n      Text = \"Sample timer application\",\n      FontSize = 32,\n      HorizontalAlignment = HorizontalAlignment.Center,\n      Margin = new Thickness(40)\n    };\n\n    var timerTextBlock = new TextBlock\n    {\n      Text = \"0\",\n      FontSize = 32,\n      HorizontalAlignment = HorizontalAlignment.Center,\n      Margin = new Thickness(40)\n    };\n\n    var timerStateTextBlock = new TextBlock\n    {\n      Text = \"Timer is enabled\",\n      FontSize = 32,\n      HorizontalAlignment = HorizontalAlignment.Center,\n      Margin = new Thickness(40)\n    };\n\n    var startButton = new Button { Content = \"Start\",FontSize = 32};\n    var stopButton = new Button { Content = \"Stop\",FontSize = 32};\n\n    buttonPanel.Children.Add(startButton);\n    buttonPanel.Children.Add(stopButton);\n\n    commonPanel.Children.Add(textBlock);\n    commonPanel.Children.Add(timerTextBlock);\n    commonPanel.Children.Add(timerStateTextBlock);\n    commonPanel.Children.Add(buttonPanel);\n\n    _timer.Interval = TimeSpan.FromSeconds(1);\n    _timer.Tick += (sender, eventArgs) =>\n    {\n      timerTextBlock.Text = _ticks.ToString(); _ticks++;\n    };\n    _timer.Start();\n\n    startButton.Click += (sender, eventArgs) =>\n    {\n      timerTextBlock.Text = \"0\";\n      _timer.Start();\n      _ticks = 1;\n      timerStateTextBlock.Text = \"Timer is enabled\";\n    };\n\n    stopButton.Click += (sender, eventArgs) =>\n    {\n      _timer.Stop();\n      timerStateTextBlock.Text = \"Timer is disabled\";\n    };\n\n    Grid.Children.Add(commonPanel);\n    ```", "```cs\n    <TargetPlatformVersion>10.0</TargetPlatformVersion>\n    ```", "```cs\n    using System;\n    using System.IO;\n    using System.Threading.Tasks;\n    using Windows.Storage;\n    ```", "```cs\n    async static Task AsynchronousProcessing()\n    {\n      StorageFolder folder = KnownFolders.DocumentsLibrary;\n\n      if (await folder.DoesFileExistAsync(\"test.txt\"))\n      {\n        var fileToDelete = await folder.GetFileAsync(\"test.txt\");\n        await fileToDelete.DeleteAsync(StorageDeleteOption.PermanentDelete);\n      }\n\n      var file = await folder.CreateFileAsync(\"test.txt\",CreationCollisionOption.ReplaceExisting);\n      using (var stream = await file.OpenAsync(FileAccessMode.ReadWrite))\n      using (var writer = new StreamWriter(stream.AsStreamForWrite()))\n      {\n        await writer.WriteLineAsync(\"Test content\");\n        await writer.FlushAsync();\n      }\n\n      using (var stream = await file.OpenAsync(FileAccessMode.Read))\n      using (var reader = new StreamReader(stream.AsStreamForRead()))\n      {\n        string content = await reader.ReadToEndAsync();\n        Console.WriteLine(content);\n      }\n\n      Console.WriteLine(\"Enumerating Folder Structure:\");\n\n      var itemsList = await folder.GetItemsAsync();\n      foreach (var item in itemsList)\n      {\n        if (item is StorageFolder)\n        {\n          Console.WriteLine(\"{0} folder\", item.Name);\n        }\n        else\n        {\n          Console.WriteLine(item.Name);\n        }\n      }\n    }\n    ```", "```cs\n    var t = AsynchronousProcessing();\n    t.GetAwaiter().GetResult();\n    Console.WriteLine();\n    Console.WriteLine(\"Press ENTER to continue\");\n    Console.ReadLine();\n    ```", "```cs\n    static class Extensions\n    {\n      public static async Task<bool> DoesFileExistAsync(thisStorageFolder folder, string fileName)\n      {\n        try\n        {\n          await folder.GetFileAsync(fileName);\n          return true;\n        }\n        catch (FileNotFoundException)\n        {\n          return false;\n        }\n      }\n    }\n    ```", "```cs\n    <StackPanel Margin=\"50\">\n      <TextBlock Name=\"Clock\"\n                 Text=\"HH:mm\"\n                 HorizontalAlignment=\"Center\"\n                 VerticalAlignment=\"Center\"\n                 Style=\"{StaticResource HeaderTextBlockStyle}\"/>\n    </StackPanel>\n    ```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Globalization;\n    using System.Linq;\n    using System.Xml.Linq;\n    using Windows.ApplicationModel.Background;\n    using Windows.Data.Xml.Dom;\n    using Windows.System.UserProfile;\n    using Windows.UI.Notifications;\n    using Windows.UI.Xaml;\n    using Windows.UI.Xaml.Controls;\n    using Windows.UI.Xaml.Navigation;\n    ```", "```cs\n    private const string TASK_NAME_USERPRESENT =\"TileSchedulerTask_UserPresent\";\n    private const string TASK_NAME_TIMER =\"TileSchedulerTask_Timer\";\n\n    private readonly CultureInfo _cultureInfo;\n    private readonly DispatcherTimer _timer;\n    ```", "```cs\n    public MainPage()\n    {\n    InitializeComponent();\n\n    string language = GlobalizationPreferences.Languages.First();\n    _cultureInfo = new CultureInfo(language);\n\n    _timer = new DispatcherTimer();\n    _timer.Interval = TimeSpan.FromSeconds(1);\n    _timer.Tick += (sender, e) => UpdateClockText();\n    }\n    ```", "```cs\n    private void UpdateClockText()\n    {\n      Clock.Text = DateTime.Now.ToString(_cultureInfo.DateTimeFormat.FullDateTimePattern);\n    }\n\n    private static async void CreateClockTask()\n    {\n      BackgroundAccessStatus result = awaitBackgroundExecutionManager.RequestAccessAsync();\n      if (result == BackgroundAccessStatus.AllowedMayUseActiveRealTimeConnectivity ||result == BackgroundAccessStatus.AllowedWithAlwaysOnRealTimeConnectivity)\n      {\n        TileSchedulerTask.CreateSchedule();\n\n        EnsureUserPresentTask();\n        EnsureTimerTask();\n      }\n    }\n\n    private static void EnsureUserPresentTask()\n    {\n      foreach (var task in BackgroundTaskRegistration.AllTasks)\n        if (task.Value.Name == TASK_NAME_USERPRESENT)\n          return;\n\n      var builder = new BackgroundTaskBuilder();\n      builder.Name = TASK_NAME_USERPRESENT;\n      builder.TaskEntryPoint =(typeof(TileSchedulerTask)).FullName;\n      builder.SetTrigger(new SystemTrigger(SystemTriggerType.UserPresent, false));\n      builder.Register();\n    }\n\n    private static void EnsureTimerTask()\n    {\n      foreach (var task in BackgroundTaskRegistration.AllTasks)\n        if (task.Value.Name == TASK_NAME_TIMER)\n          return;\n\n      var builder = new BackgroundTaskBuilder();\n      builder.Name = TASK_NAME_TIMER;\n      builder.TaskEntryPoint = (typeof(TileSchedulerTask)).FullName;\n      builder.SetTrigger(new TimeTrigger(180, false));\n      builder.Register();\n    }\n    ```", "```cs\n    _timer.Start();\n    UpdateClockText();\n    CreateClockTask();\n    ```", "```cs\n    public sealed class TileSchedulerTask : IBackgroundTask\n    {\n      public void Run(IBackgroundTaskInstance taskInstance)\n      {\n        var deferral = taskInstance.GetDeferral();\n        CreateSchedule();\n        deferral.Complete();\n      }\n\n      public static void CreateSchedule()\n      {\n        var tileUpdater = TileUpdateManager.CreateTileUpdaterForApplication();\n        var plannedUpdated = tileUpdater.GetScheduledTileNotifications();\n\n        DateTime now = DateTime.Now;\n        DateTime planTill = now.AddHours(4);\n\n        DateTime updateTime = new DateTime(now.Year, now.Month,now.Day, now.Hour, now.Minute, 0).AddMinutes(1);\n        if (plannedUpdated.Count > 0)\n          updateTime = plannedUpdated.Select(x =>x.DeliveryTime.DateTime).Union(new[] { updateTime}).Max();\n        XmlDocument documentNow = GetTilenotificationXml(now);\n\n        tileUpdater.Update(new TileNotification(documentNow) {ExpirationTime = now.AddMinutes(1) });\n\n        for (var startPlanning = updateTime;startPlanning < planTill; startPlanning =startPlanning.AddMinutes(1))\n        {\n          Debug.WriteLine(startPlanning);\n          Debug.WriteLine(planTill);\n\n          try\n          {\n            XmlDocument document = GetTilenotificationXml(startPlanning);\n\n            var scheduledNotification = newScheduledTileNotification(document,new DateTimeOffset(startPlanning))\n            {\n              ExpirationTime = startPlanning.AddMinutes(1)\n            };\n\n            tileUpdater.AddToSchedule(scheduledNotification);\n          }\n          catch (Exception ex)\n          {\n            Debug.WriteLine(\"Error: \" + ex.Message);\n          }\n        }\n      }\n\n      private static XmlDocument GetTilenotificationXml(DateTime dateTime)\n      {\n        string language =GlobalizationPreferences.Languages.First();\n        var cultureInfo = new CultureInfo(language);\n\n        string shortDate = dateTime.ToString(cultureInfo.DateTimeFormat.ShortTimePattern);\n        string longDate = dateTime.ToString(cultureInfo.DateTimeFormat.LongDatePattern);\n\n        var document = XElement.Parse(string.Format(@\"<tile>\n        <visual>\n          <binding template=\"\"TileSquareText02\"\">\n            <text id=\"\"1\"\">{0}</text>\n            <text id=\"\"2\"\">{1}</text>\n          </binding>\n          <binding template=\"\"TileWideText01\"\">\n            <text id=\"\"1\"\">{0}</text>\n            <text id=\"\"2\"\">{1}</text>\n            <text id=\"\"3\"\"></text>\n            <text id=\"\"4\"\"></text>\n          </binding>  \n        </visual>\n      </tile>\", shortDate, longDate));\n\n        return document.ToXmlDocument();\n      }\n    }\n\n    public static class DocumentExtensions\n    {\n      public static XmlDocument ToXmlDocument(thisXElement xDocument)\n      {\n        var xmlDocument = new XmlDocument();\n        xmlDocument.LoadXml(xDocument.ToString());\n        return xmlDocument;\n      }\n    }\n    ```", "```cs\n    /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n    ```", "```cs\n    brew install openssl\n\n    ```", "```cs\n    sudo sysctl -w kern.maxfiles=20480\n    sudo sysctl -w kern.maxfilesperproc=18000\n    sudo ulimit -S -n 2048\n\n    ```", "```cs\n    mkdir HelloWorld\n    cd HelloWorld\n    dotnet new\n\n    ```", "```cs\n    dotnet restore\n    dotnet run\n\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    namespace OSXConsoleApplication\n    {\n      class Program\n      {\n        static void Main(string[] args)\n        {\n          WriteLine(\".NET Core app on OS X\");\n          RunCodeAsync().GetAwaiter().GetResult();\n        }\n        static async Task RunCodeAsync()\n        {\n          try\n          {\n            string result = await GetInfoAsync(\"Async 1\");\n            WriteLine(result);\n            result = await GetInfoAsync(\"Async 2\");\n            WriteLine(result);\n          }\n          catch (Exception ex)\n          {\n            WriteLine(ex);\n          }\n        }\n        static async Task<string> GetInfoAsync(string name)\n        {\n          WriteLine($\"Task {name} started!\");\n          await Task.Delay(TimeSpan.FromSeconds(2));\n          if(name == \"Async 2\")\n            throw new Exception(\"Boom!\");\n          return\n              $\"Task {name} completed successfully!\"\n    // + $\"Thread id {System.Threading.Thread.CurrentThread.ManagedThreadId}.\"\n                        ;\n        }\n      }\n    }\n    ```", "```cs\n    sudo sh -c 'echo \"deb [arch=amd64] http://apt-mo.trafficmanager.net/repos/dotnet/ trusty main\" > /etc/apt/sources.list.d/dotnetdev.list'\n    sudo apt-key adv --keyserver apt-mo.trafficmanager.net --recv-keys 417A0893\n    sudo apt-get update\n\n    ```", "```cs\n    sudo apt-get install dotnet=1.0.0.001331-1\n\n    ```", "```cs\n    mkdir HelloWorld\n    cd HelloWorld\n    dotnet new\n\n    ```", "```cs\n    dotnet restore\n    dotnet run\n\n    ```", "```cs\n    using System;\n    using System.Threading.Tasks;\n    using static System.Console;\n    namespace OSXConsoleApplication\n    {\n      class Program\n      {\n        static void Main(string[] args)\n        {\n          WriteLine(\".NET Core app on Ubuntu\");\n          RunCodeAsync().GetAwaiter().GetResult();\n        }\n        static async Task RunCodeAsync()\n        {\n          try\n          {\n            string result = await GetInfoAsync(\"Async 1\");\n            WriteLine(result);\n            result = await GetInfoAsync(\"Async 2\");\n            WriteLine(result);\n          }\n          catch (Exception ex)\n          {\n            WriteLine(ex);\n          }\n        }\n        static async Task<string> GetInfoAsync(string name)\n        {\n          WriteLine($\"Task {name} started!\");\n          await Task.Delay(TimeSpan.FromSeconds(2));\n          if(name == \"Async 2\")\n            throw new Exception(\"Boom!\");\n          return\n              $\"Task {name} completed successfully!\"\n    // + $\"Thread id {System.Threading.Thread.CurrentThread.ManagedThreadId}.\"\n                        ;\n        }\n      }\n    }\n    ```"]