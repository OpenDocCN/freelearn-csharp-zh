["```cs\n    CreateLineCreateLine()\n\n    FindOrCreateStorageHdr;\n    Region2.SETRANGE(\"Warehouse Code\");\n    Region2.SETRANGE(\"Put-Away\", TRUE);\n    Region2.FINDFIRST;\n\n    WITH StorageEntry DO BEGIN\n      NextLineNo := NextLineNo + 10000;\n      StorageLn.\"Document Type\" := StorageHdr.\"Document Type\";\n      StorageLn.\"Document No.\" := StorageHdr.\"No.\";\n      StorageLn.\"Line No.\" := NextLineNo;\n      StorageLn.\"No.\" := \"Product No.\";\n      StorageLn.\"Warehouse Code\" := \"Warehouse Code\";\n      StorageLn.\"Region Code\" := Region2.Code;\n    ```", "```cs\n    Storage Line - OnAfterGetRecord()\n\n    Counter := Counter + 1;\n    Window.UPDATE(1,\"Document No.\");\n    Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));\n\n    Shelf.SETRANGE(\"Warehouse Code\", \"Storage Line\".\"Warehouse Code\");\n    Shelf.SETRANGE(\"Region Code\", \"Region Code\");\n    Shelf.SETRANGE(Inventory, 0);\n    Shelf.SETRANGE(\"Blocked by Storage\", FALSE);\n    Shelf.FINDFIRST;\n\n    \"Shelf No.\" := Shelf.\"No.\";\n    MODIFY;\n    ```", "```cs\nStorage Line - OnAfterGetRecord()\n\nCounter := Counter + 1;\nWindow.UPDATE(1,\"Document No.\");\nWindow.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));\n\nProduct.GET(\"No.\");\nProduct.SETRANGE(\"Warehouse Filter Code\", \"Warehouse Code\");\nProduct.CALCFIELDS(Inventory);\nIF Quantity > Product.Inventory THEN\n  ERROR(Text001, Quantity, Product.Inventory, \"No.\");\n\nQtyToPick := Quantity;\n\nStorageEntry.SETCURRENTKEY(\"Product No.\");\nStorageEntry.SETRANGE(\"Warehouse Code\", \"Storage Header\".\"Warehouse Code\");\nStorageEntry.SETRANGE(\"Product No.\", \"No.\");\nStorageEntry.SETRANGE(Open, TRUE);\nIF StorageEntry.FINDSET(TRUE) THEN REPEAT\n  StorageEntry.CALCFIELDS(\"Blocked by Storage\");\n  IF NOT StorageEntry.\"Blocked by Storage\" THEN BEGIN\n    IF QtyToPick >= StorageEntry.Quantity THEN\n      QtyToPick := QtyToPick - StorageEntry.Quantity\n    ELSE BEGIN\n      StorageEntry.Quantity := QtyToPick;\n      QtyToPick := 0;\n    END;\n    CreateLine(StorageEntry);\n  END;\nUNTIL (StorageEntry.NEXT = 0) OR (QtyToPick = 0);\n\nIF QtyToPick > 0 THEN\n  ERROR(Text002, \"No.\");\n```", "```cs\nShipment - OnAfterGetRecord()\n\nIF Route.Description <> Warehouse.Name THEN BEGIN\n  Route.\"No.\" := '';\n  Route.Description := Warehouse.Name;\n  Route.\"Shipment Date\" := WORKDATE;\n  Route.Status := Route.Status::Planned;\n\n  Route.\"Bill-to Customer No.\" := \"Bill-to Customer No.\";\n  Route.\"Bill-to Name\" := \"Bill-to Name\";\n\n  Route.INSERT(TRUE);\n  i := 0;\nEND;\n\ni := i + 10000;\n\nRouteStop.\"Route No.\" := Route.\"No.\";\nRouteStop.\"Line No.\" := i;\nRouteStop.Type := RouteStop.Type::Pickup;\nRouteStop.VALIDATE(\"Shipment No.\", \"No.\");\nRouteStop.INSERT;\n\ni := i + 10000;\n\nRouteStop.\"Route No.\" := Route.\"No.\";\nRouteStop.\"Line No.\" := i;\nRouteStop.Type := RouteStop.Type::Delivery;\nRouteStop.VALIDATE(\"Shipment No.\", \"No.\");\nRouteStop.INSERT;\n```", "```cs\nRouteStopPickup.SETRANGE(\"Route No.\", Route.\"No.\");\nRouteStopPickup.SETRANGE(Type, RouteStopPickup.Type::Pickup);\nRouteStopPickup.FINDFIRST;\n\nRouteStopDelivery.SETRANGE(\"Route No.\", Route.\"No.\");\nRouteStopDelivery.SETRANGE(Type, RouteStopDelivery.Type::Delivery);\nRouteStopDelivery.FINDSET;\nREPEAT\n  Window.UPDATE(2, RouteStopDelivery.\"Shipment No.\");\n\n  IF NOT Optimizer.GET(RouteStopDelivery.Name) THEN BEGIN\n    CLEAR(BingMapMgt);\n    BingMapMgt.CalculateRoute('', RouteStopPickup.Latitude, RouteStopPickup.Longitude,'', RouteStopDelivery.Latitude,\n      RouteStopDelivery.Longitude, Optimizer.\"Distance (Distance)\",Optimizer.\"Activity Time\", Optimize::Distance);\n\n    Optimizer.Name := RouteStopDelivery.Name;\n    Optimizer.Latitude := RouteStopDelivery.Latitude;\n    Optimizer.Longitude := RouteStopDelivery.Longitude;\n    Optimizer.INSERT;\n  END;\n\nUNTIL RouteStopDelivery.NEXT = 0;\n```", "```cs\nRouteStopGroup.INIT;\nRouteStopGroup.\"Route No.\" := Route.\"No.\";\nRouteStopGroup.\"Line No.\" := 10;\nRouteStopGroup.Type := RouteStopGroup.Type::\"Pickup Group\";\nRouteStopGroup.\"Sequence No.\" := 10;\nRouteStopGroup.Name := RouteStopPickup.Name;\nRouteStopGroup.INSERT;\n\nRouteStopPickup.MODIFYALL(\"Sequence No.\", 10);\n```", "```cs\nOptimizer.SETCURRENTKEY(\"Distance (Distance)\");\nOptimizer.ASCENDING(FALSE);\nOptimizer.FIND('-');\nREPEAT\n  RouteStopGroup.INIT;\n  RouteStopGroup.\"Route No.\" := Route.\"No.\";\n  RouteStopGroup.\"Line No.\" := Sequence;\n  RouteStopGroup.Type := \n    RouteStopGroup.Type::\"Delivery Group\";\n  RouteStopGroup.\"Sequence No.\" := Sequence;\n  RouteStopGroup.Name := Optimizer.Name;\n  RouteStopGroup.INSERT;\n\n  RouteStopDelivery.SETRANGE(Name, Optimizer.Name);\n  RouteStopDelivery.MODIFYALL(\"Sequence No.\", Sequence);\n\n  Sequence := Sequence + 10;\n  IF (xLongitude <> Optimizer.Longitude) OR \n    (xLatitude <> Optimizer.Latitude) \n  THEN BEGIN\n    IF xLongitude + xLatitude <> 0 THEN BEGIN\n      CLEAR(BingMapMgt);\n      BingMapMgt.CalculateRoute('', xLatitude, xLongitude,'', \n        Optimizer.Latitude, Optimizer.Longitude, \n        RouteStopGroup.Distance, RouteStopGroup.Time, \n        Optimize::Distance);\n      RouteStopGroup.MODIFY;\n    END;\n    xLongitude := Optimizer.Longitude;\n    xLatitude := Optimizer.Latitude;\n  END;\nUNTIL Optimizer.NEXT = 0;\n```", "```cs\nOnRun()\n\n        ...\n        SalesLine.Type::Income:          //* Chapter 7\n          PostIncome;\n\nPostIncome()\n\nIF SalesLine.\"Qty. to Invoice\" = 0 THEN \n  EXIT;\n\nWITH IncExpJnlLn DO BEGIN\n  INIT;\n  \"Posting Date\" := \"Posting Date\";\n  ...\n  \"Source Code\" := SrcCode;\n  \"Posting No. Series\" := \"Posting No. Series\";\n  \"Dimension Set ID\" := SalesLine.\"Dimension Set ID\";\n  IncExpJnlPostLine.RunWithCheck(IncExpJnlLn);\nEND;\n```", "```cs\nFindStorageLinePrice\n\nWITH StorageLine DO BEGIN\n  Product.GET(\"No.\");\n  StorageLinePriceExists(StorageHeader, StorageLine);\n  CreateIncExp(StorageHeader,StorageLine,TempStoragePrice);\n\nEND;\n```", "```cs\nCreateIncExp()\n\nIncExp.SETRANGE(\"Applies-to Document Type\", IncExp.\"Applies-to Document Type\"::\"Storage Header\");\nIncExp.SETRANGE(\"Applies-to Document No.\", StorageHeader.\"No.\");\nIncExp.SETRANGE(\"Applies-to Document Line No.\", StorageLine.\"Line No.\");\nIncExp.DELETEALL;\n\nWITH StoragePrice DO BEGIN\n  FoundStoragePrice := FINDSET;\n  IF FoundStoragePrice THEN BEGIN\n    REPEAT\n      IncExpCode.GET(StoragePrice.\"Income & Expense Code\");\n      IncExp.INIT;\n      IncExp.\"Entry No.\" := 0;           //* For Autoincrement\n      IncExp.Type := IncExpCode.Type;\n      IncExp.\"Income & Expense Code\" := \n        \"Income & Expense Code\";\n      IncExp.Description := Description;\n      IncExp.Quantity := StorageLine.Quantity;\n      IncExp.\"Unit Cost\" := IncExpCode.\"Unit Cost\";\n      IncExp.\"Total Cost\" := IncExp.Quantity * \n        IncExp.\"Unit Cost\";\n      IncExp.\"Unit Price\" := StoragePrice.\"Unit Price\";\n      IncExp.\"Total Price\" := IncExp.Quantity * \n        IncExp.\"Unit Price\";\n      IncExp.\"Applies-to Document Type\" := \n        IncExp.\"Applies-to Document Type\"::\"Storage Header\";\n      IncExp.\"Applies-to Document No.\" := StorageHeader.\"No.\";\n      IncExp.\"Applies-to Document Line No.\" := \n        StorageLine.\"Line No.\";\n      IncExp.\"Bill-to Customer No.\" := \n        StorageHeader.\"Bill-to Customer No.\";\n      IncExp.\"Gen. Prod. Posting Group\" := \n        IncExpCode.\"Gen. Prod. Posting Group\";\n      IncExp.\"VAT Prod. Posting Group\" := \n        IncExpCode.\"VAT Prod. Posting Group\";\n      IncExp.INSERT;\n    UNTIL NEXT = 0;\n  END;\nEND;\n```", "```cs\nProcessBuffer()\n\nStorageInvEntry.LOCKTABLE;\n\nWITH TempStorageInvEntry DO\n  IF FIND('-') THEN REPEAT\n    StorageInvEntry.GET(\"Entry No.\");\n\n    IF \"Last Invoice Date\" <> 0D THEN\n      FromDate := \"Last Invoice Date\"\n    ELSE\n      FromDate := \"From Storage Date\";\n\n    IF \"To Storage Date\" <> 0D THEN\n      StorageInvEntry.\"Last Invoice Date\" := \"To Storage Date\"\n    ELSE\n      StorageInvEntry.\"Last Invoice Date\" := WORKDATE;\n\n    Date.SETRANGE(\"Period Type\", Date.\"Period Type\"::Datum);\n    Date.SETRANGE(\"Period No.\", 1, 5);\n    Date.SETRANGE(\"Period Start\", FromDate, \n      StorageInvEntry.\"Last Invoice Date\");\n    IncExp.\"Entry No.\" := 0;\n    IncExp.\"Income & Expense Code\" := \"Income & Expense Code\";\n    IncExp.Type := IncExp.Type::Income;\n    IncExp.Description := STRSUBSTNO(Text000, FromDate, \n      StorageInvEntry.\"Last Invoice Date\");\n    IncExp.Quantity := Date.COUNT;\n    IncExp.\"Unit Cost\" := \"Unit Cost\";\n    IncExp.\"Total Cost\" := IncExp.Quantity * \"Total Cost\";\n    IncExp.\"Unit Price\" := \"Unit Price\";\n    IncExp.\"Total Price\" := IncExp.Quantity * \"Unit Price\";\n    IncExp.\"Global Dimension 1 Code\" := \n      \"Global Dimension 1 Code\";\n    IncExp.\"Global Dimension 2 Code\" := \n      \"Global Dimension 2 Code\";\n    IncExp.\"Bill-to Customer No.\" := \"Bill-to Customer No.\";\n    IncExpCode.GET(IncExp.\"Income & Expense Code\");\n    IncExp.\"Gen. Prod. Posting Group\" := \n      IncExpCode.\"Gen. Prod. Posting Group\";\n    IncExp.\"VAT Prod. Posting Group\" := \n      IncExpCode.\"VAT Prod. Posting Group\";\n    IncExp.\"Unit of Measure Code\" := \n       IncExpCode.\"Unit of Measure Code\";\n    IncExp.\"Applies-to Entry No.\" := \"Entry No.\";\n    IncExp.INSERT;\n\n    StorageInvEntry.Open := \"To Storage Date\" <> 0D;\n    StorageInvEntry.MODIFY;\n  UNTIL NEXT = 0;\n```"]