["```cs\n----------------------/*Line which needs to be filled*/\n{\n    ------------------/*Line which needs to be filled*/\n    {\n         Regex regex = new Regex(@\"^([\\w\\.\\-]+)@([\\w\\-]+)((\\.(\\w){2,3})+)$\");\n         return regex.IsMatch(str);\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    List<string> states = new List<string>()\n    {\n        \"Delhi\", \"Haryana\", \"Assam\", \"Punjab\", \"Madhya Pradesh\"\n    };\n}\n\nprivate bool GetMatchingStates(List<string> states, string stateName)\n{\n    var findState = states.Exists(delegate(\n    string stateNameToSearch)\n    {\n        return states.Equals(stateNameToSearch);\n    });\n    return findState;\n}\n```", "```cs\n{\n  \"StudentFirstName\" : \"James\",\n  \"StudentLastName\" : \"Donohoe\",\n  \"StudentScores\" : [45, 80, 68]\n}\n```", "```cs\npublic class Student\n{ \n   public string StudentFirstName {get; set;}\n   public string StudentLastName {get; set;}\n   public int[] StudentScores {get; set;}\n}\n\npublic static Student ConvertFromJSON(string json)\n{\n  var ser = new JavaScriptSerializer();\n  ----------------/*Insert a line here*/\n}\n```", "```cs\nprivate static IEnumerable<Country> ReadCountriesFromDB(string sqlConnectionString)\n{\n    List countries = new List<Country>();\n    SqlConnection conn = new SqlConnection();\n    using (sqlConnectionString)\n    {\n        SqlCommand sqlCmd = new SqlCommand(\"Select name, continent \n        from Counties\", sqlConnectionString);\n        conn.Open();\n        using (SqlDataReader reader = sqlCmd.ExecuteReader())\n        {\n            // Insert the Line Here\n            {\n                Country con = new Country();\n                con.CountryName = (String)reader[\"name\"];\n                con.ContinentName = (String)reader[\"continent\"];\n                counties.Add(con);\n            }\n        }\n    }\n    return countries;\n}\n```", "```cs\npublic class StudentCollection //Insert Code Here\n{\n    private Student[] students;\n    public StudentCollection(Student[] student)\n    {\n        students = new Student[student.Length];\n\n        for (int i=0; i< student.Length; i++)\n        {\n            students[i] = student[i];\n        }\n    }\n\n    //Insert Code Here\n    {\n        //Insert Code Here\n    }\n}\n```", "```cs\npublic enum CarCategory\n{\n     Luxury,\n     Sports,\n     Family,\n     CountryDrive\n}\n\n[DataContract]\npublic class Car\n{\n     [DataMember]\n     public string CarName { get; set; }\n     [DataMember]\n     public enum CarCategory { get; set; }\n}\n\nvoid ShareCareDetails()\n{\n     var car = new Car { CarName = \"Mazda\", CarCategory = CarCategory.Family };\n     var serializedCar = /// Insert the code here \n}\n```", "```cs\n1   private static decimal CalculateBankAccountInterest(decimal initialAmount, int numberOfMonths)\n2   {\n3        decimal interestAmount;\n4        decimal interest;\n5        if(numberOfMonths > 0 && numberOfMonths < 6 && initialAmount < 5000)\n6        {\n7            interest = 0.05m;\n8        }\n9        else if(numberOfMonths > 6 && initialAmount > 5000)\n10       {\n11           interest = 0.065m;\n12       } \n13       else\n14       {\n15           interest = 0.06m;\n16       }\n17    \n18       interestAmount = interest * initialAmount * numberOfMonths / 12;\n19       return interestAmount;\n20  }\n```", "```cs\npublic async Task ExecuteMultipleRequestsInParallel() \n{ \n    HttpClient client = new HttpClient(); \n    Task task1 = client.GetStringAsync(\"ServiceUrlA\"); \n    Task task2 = client.GetStringAsync(\"ServiceUrlB\"); \n    Task task3 = client.GetStringAsync(\"ServiceUrlC\"); \n    // Insert the call here \n}\n```", "```cs\nList<int> scores = new List<int>()\n{\n    90,\n    55,\n    80,\n    65\n};\n```"]