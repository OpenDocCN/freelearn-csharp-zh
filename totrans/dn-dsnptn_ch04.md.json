["```cs\n    public static void TestAdoNetSpecificInterface() \n    { \n      string connectionString = @\"Data Source=./Logstorage.db\"; \n      //----- Create a Connection Object \n      //----- and open it \n      SQLiteConnection dbcon= \n        new SQLiteConnection(connectionString); \n      dbcon.Open(); \n      //----------- Create a Command Object \n      //----------- to issue SQL Query \n      SQLiteCommand dbcmd = dbcon.CreateCommand(); \n      string sql = \"SELECT * from logs\"; \n      dbcmd.CommandText = sql; \n\n      //----------- Create a Reader Object  \n      //----------- And Iterate through it \n      SQLiteDataReader reader = dbcmd.ExecuteReader(); \n      while (reader.Read()) \n      { \n        string logentry = reader.GetString(0); \n        Console.WriteLine(logentry); \n      } \n      // clean up \n      reader.Close(); \n      reader = null; \n      dbcmd.Dispose(); \n      dbcmd = null; \n      dbcon.Close(); \n      dbcon = null; \n    } \n\n```", "```cs\n    public static void TestAdoNetWithGenericInterface() \n    { \n      string connectionString = @\"Data Source=./Logstorage.db\"; \n      //------ Open a connection and assign the connection object  \n      //------ to the IDbconnection interface. SQliteConnection, \n      //------ OracleConnection,SQLConnection etc. implements the  \n      //------ IDbConnection Interface \n      IDbConnection dbcon \n        = (IDbConnection)new SQLiteConnection(connectionString); \n      dbcon.Open(); \n      //------------ IDbCommand is the interface for  \n      //------------ Command Object . Every ADO.net  \n      //------------ Interface (for Oracle,SQL server etc) \n      //------------ supports it  \n      IDbCommand dbcmd = dbcon.CreateCommand(); \n      string sql = \"SELECT * from logs\"; \n      dbcmd.CommandText = sql; \n      //------- Create a Data Reader and Assign  \n      //------- it to IDataReader Interface \n      IDataReader reader = dbcmd.ExecuteReader(); \n      while (reader.Read()) \n      { \n        string logentry = reader.GetString(0); \n        Console.WriteLine(logentry); \n      } \n      // clean up \n      reader.Close(); \n      reader = null; \n      dbcmd.Dispose(); \n      dbcmd = null; \n      dbcon.Close(); \n      dbcon = null; \n    } \n\n```", "```cs\n    public abstract class DbAbstractFactory \n    { \n      public abstract IDbConnection CreateConnection(string connstr); \n      public abstract IDbCommand CreateCommand(IDbConnection con,    \n      string cmd); \n      public abstract IDbDataAdapter CreateDbAdapter(IDbCommand cmd); \n      public abstract IDataReader CreateDataReader(IDbCommand cmd); \n    } \n\n```", "```cs\n    [Serializable()] \n    public class SQLServerDbFactory : DbAbstractFactory,ISerializable \n    { \n      private string drivertype { get; set; } \n      public SQLServerDbFactory() { this.drivertype = null; } \n      //------------------ Create a Connection Object \n      //------------------ returns a reference to  \n      //------------------- a IDbConnection Interface \n      public override IDbConnection CreateConnection(string connstr) \n      { \n        if (connstr == null || connstr.Length == 0) \n          return null; \n        return new SqlConnection(connstr); \n      } \n      public override IDbCommand CreateCommand(IDbConnection con,    \n      string cmd) \n      { \n        if (con == null || cmd == null || cmd.Length == 0) \n        return null; \n        if (con is SqlConnection) \n        return new SqlCommand(cmd, \n        (SqlConnection)con); \n        return null; \n      } \n      public override IDbDataAdapter CreateDbAdapter(IDbCommand cmd) \n      { \n        if (cmd == null) { return null; } \n        if (cmd is SqlCommand) \n        return new \n        SqlDataAdapter((SqlCommand)cmd); \n        return null; \n      } \n      public override IDataReader CreateDataReader(IDbCommand cmd) \n      { \n        if (cmd == null) { return null; } \n        if (cmd is SqlCommand) \n          return (SqlDataReader)cmd.ExecuteReader(); \n        return null; \n      } \n      public void GetObjectData(SerializationInfo info,  \n      StreamingContext ctxt) \n      { \n      } \n      protected SQLServerDbFactory(SerializationInfo info,  \n      StreamingContext context) \n      { \n      } \n    } \n\n```", "```cs\n    [Serializable()] \n    public class SQLiteDbFactory : DbAbstractFactory,ISerializable \n    { \n      private string drivertype { get; set; } \n      public SQLiteDbFactory() { this.drivertype = null; } \n      public override IDbConnection CreateConnection(string connstr) \n      { \n        if (connstr == null || connstr.Length == 0) \n        return null; \n        return new SQLiteConnection(connstr); \n      } \n\n      public override IDbCommand CreateCommand(IDbConnection    \n      con,string cmd) \n      { \n        if (con == null || cmd == null || cmd.Length == 0) \n        return null; \n        if (con is SQLiteConnection ) \n        return  new SQLiteCommand(cmd,  \n        (SQLiteConnection)con); \n        return null; \n      } \n\n      public override IDbDataAdapter CreateDbAdapter(IDbCommand cmd) \n      { \n        if (cmd == null) { return null; } \n        if (cmd is SQLiteCommand) \n        return new  \n        SQLiteDataAdapter((SQLiteCommand)cmd); \n        return null; \n      } \n\n      public override IDataReader CreateDataReader(IDbCommand cmd) \n      { \n        if (cmd == null) { return null; } \n        if (cmd is SQLiteCommand) \n        return (SQLiteDataReader)cmd.ExecuteReader(); \n        return null; \n      } \n\n      public void GetObjectData(SerializationInfo info,  \n      StreamingContext ctxt) \n      { \n      } \n\n      protected SQLiteDbFactory(SerializationInfo info,  \n      StreamingContext context) \n      { \n      } \n    } \n\n```", "```cs\n    public interface IDbEngineAdapter \n    { \n      bool Open(); \n      DataSet Execute(string SQL); \n      IDataReader ExecuteQuery(string SQL); \n      bool ExecuteNonQuery(string SQL);     \n      Boolean Close(); \n    } \n\n```", "```cs\n    public class DbEngineAdapter : IDbEngineAdapter \n    { \n      static  ObjectFactory of = new ObjectFactory(\"DbDrivers.xml\"); \n      private IDbConnection _con = null; \n      private IDbCommand _cmd = null; \n      private DbAbastractFactory df = null; \n      private string _constr; \n      private string _driver; \n\n```", "```cs\n    public DbEngineAdapter(string constr, string driver) \n    { \n      _constr = constr; \n      _driver = driver; \n      //----- Instantiate the correct concrete class \n      //----- based on the driver \n      df = (DbAbastractFactory)of.Get(driver, \"prototype\"); \n    } \n\n```", "```cs\n    public bool Open() \n    { \n      try \n      { \n        if (_con != null || df == null || _constr == null) \n        { \n          return false; \n        } \n        //------ Create Connection Object  \n        _con = df.CreateConnection(_constr); \n        if (_con == null) \n        return false; \n        _con.Open(); \n        return true; \n      } \n      catch (Exception e) \n      { \n        e.ToString(); \n        return false; \n      } \n    } \n\n```", "```cs\n    public DataSet Execute(string SQL) \n    { \n      try \n      { \n        if (_con == null || df == null || _cmd != null)  \n        {  \n          return null;  \n        } \n        _cmd = df.CreateCommand(_con, SQL); \n        IDbDataAdapter da = df.CreateDbAdapter(_cmd); \n        if (da == null) { return null; } \n        DataSet ds = new DataSet(); \n        da.Fill(ds); \n        return ds; \n      } \n      catch (Exception e) \n      { \n        e.ToString(); \n        return null; \n      } \n    } \n\n```", "```cs\n    public IDataReader ExecuteQuery(string SQL) \n    { \n      try \n      { \n        if (_con == null || df == null || _cmd != null) { return      \n        null;} \n        _cmd = df.CreateCommand(_con, SQL); \n        if (_cmd == null) { return null; } \n        IDataReader rs = df.CreateDataReader(_cmd); \n        return rs; \n      } \n      catch (Exception e) \n      { \n        e.ToString(); \n        return null; \n      } \n    } \n\n```", "```cs\n    public bool ExecuteNonQuery(string SQL) \n    { \n      try \n      { \n        if (_con == null || df == null || _cmd != null)  \n        return false;  \n        _cmd = df.CreateCommand(_con,SQL); \n        if (_cmd == null) { return false; } \n        _cmd.ExecuteNonQuery(); \n        return true; \n      } \n      catch (Exception e) \n      { \n        e.ToString(); \n        return false; \n      } \n    } \n\n```", "```cs\n    public Boolean Close() \n    { \n      if (_con != null) \n      { \n        _con.Close(); \n        _con = null; \n        return true; \n      } \n      return false; \n    } \n  }\n```", "```cs\n    DbEngineAdapter db =  \n    new DbEngineAdapter(connstr,driver); \n    if (db.Open()) \n    { \n      bool result = db.ExecuteNonQuery(query); \n    } \n    db.Close(); \n\n```", "```cs\n    <?xml version=\"1.0\"?> \n    <entries> \n      <entry key =\"SQLITE\" value=\"Chapter4_Example.SQLiteDbFactory\"/> \n      <entry key=\"SQLSERVER\"      \n      value=\"Chapter4_Exanple.SQLServerDbFactory\"/> \n      <entry key=\"NULL\" value =\"Chapter4_Example.NULLDbFactory\"/> \n    </entries> \n\n```", "```cs\n    static void TestInsert(string connstr, string driver) \n    { \n      DbEngineAdapter db =  \n      new DbEngineAdapter(connstr,driver); \n      //----- a Test Log Entry \n      string test = \"Log value is \" + Math.PI * 1999; \n      if (db.Open()) \n      { \n        string query = \"INSERT INTO logs VALUES('\" + \n        test + \"');\"; \n        bool result = db.ExecuteNonQuery(query); \n      } \n      db.Close(); \n      return; \n    } \n\n```", "```cs\n    static void TestDataSet(string connstr, string driver) \n    { \n      IDbEngineAdapter db = \n      new DbEngineAdapter(connstr,driver); \n      if (db.Open()) \n      { \n        string query = \"SELECT * from logs\"; \n        DataSet ds = db.Execute(query); \n        DataTable dt = ds.Tables[0]; \n        int i = 0; \n        int max = dt.Rows.Count; \n        while (i < max) \n        { \n          DataRow dr = dt.Rows[i]; \n          Console.WriteLine(dr[0]); \n          i++; \n        } \n      } \n      db.Close(); \n      return; \n    } \n\n```", "```cs\n    static void TestDataReader(string connstr, string driver) \n    { \n      IDbEngineAdapter db = \n      new DbEngineAdapter(connstr,driver); \n      string query = \"select * from logs\"; \n      if (db.Open()) \n      { \n        IDataReader reader = db.ExecuteQuery(query); \n        while(reader.Read()) \n        { \n          Console.WriteLine(reader.GetString(1)); \n        } \n      } \n      db.Close(); \n    } \n\n```", "```cs\n    static void Main(string[] args) \n    { \n      TestInsert(@\"Data Source=./Logstorage.db\", \"SQLITE\"); \n      TestDataSet(@\"Data Source=./Logstorage.db\", \"SQLITE\"); \n      TestDataReader(@\"Data Source=./Logstorage.db\", \"SQLITE\"); \n    } \n\n```", "```cs\n    static void Main(string[] args) \n    { \n      TestInsert(@\"sqlserverconnstring\", \"SQLSERVER\"); \n      TestDataSet(@\"sqlserverconnstring\", \"SQLSERVER\"); \n      TestDataReader(@\"sqlserverconnstring\", \"SQLSERVER\"); \n    } \n\n```"]