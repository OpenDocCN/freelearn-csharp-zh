- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging and Deploying a Blazor WebAssembly App
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging is not always fun, but it is an important aspect of software development.
    When debugging a Blazor WebAssembly app, Microsoft Visual Studio provides most
    of the functionality we need. However, since apps built with Blazor WebAssembly
    run on the client, we also need to learn how to use the browser’s **developer
    tools** (**DevTools**) to debug the app. After we finish debugging a Blazor WebAssembly
    app, we can use Microsoft Visual Studio to deploy it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will create a simple game that we will use to practice both
    debugging and deploying a Blazor WebAssembly app. We will debug the app using
    both Visual Studio and `DevTools`. We will learn how to log errors using the ILogger
    interface and we will examine different ways to handle exceptions. After we have
    completed the debugging, we will apply **ahead-of-time** (**AOT**) compilation
    to the app before deploying it to Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Shift+Alt+D
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: debugging in the browser.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Knowledge is power!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a Blazor WebAssembly app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using **ahead-of-time** (**AOT**) compilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying a Blazor WebAssembly app to Microsoft Azure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the “guess the number” project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Microsoft Visual Studio 2022 installed
    on your PC. For instructions on how to install the free community edition of Microsoft
    Visual Studio 2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
    Since we will be deploying this project to Microsoft Azure, you will need an account
    on Microsoft Azure. If you do not have an account on Microsoft Azure, refer to
    *Chapter 1*, *Introduction to Blazor WebAssembly*, to create a free account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter03).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch3](https://packt.link/Ch3).'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging a Blazor WebAssembly.app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Debugging is an important and useful skill. You can debug a Blazor WebAssembly
    app by using the debugging tools within Visual Studio or by using `DevTools`.
    To debug on the browser, you must use one of the following browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Edge (version 80 or later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Chrome (version 70 or later)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All the usual debugging scenarios are supported by both Visual Studio and `DevTools`:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting and removing breakpoints.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressing *F10* to single-step through the code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressing *F11* to step into the next function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pressing *F5* in Visual Studio and *F8* in the browser to resume code execution.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the value of local variables in the `Locals` display.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Viewing the `Call Stack`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting `Watch` values.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following scenarios are not currently supported. But, since Microsoft is
    continuing to make large improvements to the debugging process, they will be supported
    in the future:'
  prefs: []
  type: TYPE_NORMAL
- en: Breaking on unhandled exceptions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hitting the breakpoints during startup.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, we will look at debugging in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have any experience with using Visual Studio, you probably have used
    the debugging tools. To start debugging, select **Debug**, **Start Debugging**
    from the Visual Studio menu, or press *F5*.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have started debugging, you can use any of the scenarios listed above
    to debug the code. For example, to set a breakpoint on a line of code, simply
    click in the margin to the left of the line code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows a breakpoint that has been set on line 36:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_03_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Breakpoint in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in Visual Studio is as easy as pressing *F5*. Debugging in the browser
    requires a bit more effort.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in the browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Debugging a Blazor WebAssembly app on the browser takes a few steps. The following
    image shows the steps required to start debugging an app in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18471_03_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Enabling debugging in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the steps to enable debugging in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Shift*+*Alt*+*D* to start debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To successfully start debugging, make sure that your application has focus before
    pressing *Shift*+*Alt*+*D*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Since your browser is not yet running with remote debugging enabled, after
    you press *Shift*+*Alt*+*D*, you will receive the following warning:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18471_03_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.3: Unable to find debuggable browser tab warning'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The **Unable to find debuggable browser tab** warning gives instructions on
    how to proceed for both Google Chrome and Microsoft Edge. Since we are using Microsoft
    Edge for these screenshots, we have highlighted the instructions for Microsoft
    Edge in the preceding image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To enable debugging in the browser, we need to copy the provided text from the
    **Unable to find debuggable browser tab** warning to the Windows run command dialog
    box. Press *Win*+*R* to open the run command dialog box, paste the text, and press
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This process will launch another browser window that has debugging enabled.
    If you are asked to sync your devices, you can select **No**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the previous browser window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This step is not required. We have included it because it can be confusing to
    have multiple browsers open.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Shift*+*Alt*+*D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have enabled debugging on the browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are now two tabs open in the browser. The first tab is running the app
    and the second tab is running `DevTools`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.4: Browser with debugging enabled'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The preceding image shows the `DevTools` tab. The area on the left is inactive.
    It is used to display the screen contents from the other tab. The **Console**
    tab in `DevTools` is selected. However, the **Sources** tab is the one that we
    will use for debugging.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once we have started debugging, we can use any of the scenarios listed above
    to debug the code. For example, to set a breakpoint on a line of code, we simply
    click in the margin to the left of the line code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following screenshot shows a breakpoint that has been set on line 36:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.5: Source tab of DevTools'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is possible to debug a Blazor WebAssembly app using Visual Studio or directly
    in the browser. Enabling debugging in the browser takes a little more effort,
    but offers the same robust features as found in Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: By efficiently using logging, debugging can be more efficient. Next, we will
    learn how to use logging in a Blazor WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Logging is an essential tool for troubleshooting any application. It helps to
    identify and solve problems. Logging is enabled by default in the Blazor WebAssembly
    project templates provided by Microsoft. However, the only logging provider that
    is enabled is the **Console** provider.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The **Console** provider does not store the logs, it only displays them. If
    you need to retain your logs, you will need to use a different provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code sample does the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Injects an `ILogger<Counter>` object into the page. It uses the fully qualified
    name of the class type as the log category. The log category is included with
    each log message that is created by that instance of `ILogger`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calls `LogInformation` to log the indicated string at the `Information` log
    level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code writes to the log each time the button is clicked:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Counter.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot of the **Console** tab within `DevTools` shows the
    results of clicking the **Click me** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.6: Logging example'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding log levels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever we log an item to the logger, we must provide the log level. The log
    level indicates the severity of the message.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table lists the log level values from the lowest to the highest
    level of severity:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Log Level | Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| Trace | `LogTrace` | These messages are extremely detailed and may contain
    sensitive data. They are disabled by default and should never be enabled in production.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Debug | `LogDebug` | These messages are used only during debugging and development.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Information | `LogInformation` | These messages track the general flow of
    the application. |'
  prefs: []
  type: TYPE_TB
- en: '| Warning | `LogWarning` | These messages are for unexpected or abnormal events.
    |'
  prefs: []
  type: TYPE_TB
- en: '| Error | `LogError` | These messages are for errors in the current operation,
    such as a failed save. |'
  prefs: []
  type: TYPE_TB
- en: '| Critical | `LogCritical` | These messages are for critical errors that cause
    the entire application to fail. |'
  prefs: []
  type: TYPE_TB
- en: 'Table 3.1: Log levels'
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You should use `ILogger` rather than `System.Console.WriteLine` or `System.Diagnostics.Debug.WriteLine`
    since those methods only allow you to send text to the console and they do not
    include the name of the class that originated the message. Also, they must be
    either removed or hidden before the app is deployed.
  prefs: []
  type: TYPE_NORMAL
- en: When using logging, try to log using the appropriate log level and try to make
    your messages as short as possible without rendering them meaningless. Use a consistent
    format for your messages so that they can be easily filtered. Finally, avoid logging
    redundant or irrelevant information because logging is not free; it consumes some
    resources.
  prefs: []
  type: TYPE_NORMAL
- en: You can adjust the minimum log level as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following `Logging` component demonstrates how to use each of the various
    log levels:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The following screenshot shows how each of the different log levels is rendered
    in `DevTools`.
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18471_03_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.7: Log levels'
  prefs: []
  type: TYPE_NORMAL
- en: Setting the minimum log level
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the project is configured to display all the logged items with
    a minimum log level of `Information`. You can adjust this setting by completing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Tools** menu, select **NuGet Package Manager**, **Package Manager
    Console** to open the **Package Manager Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following text into the **Package Manager Console** and press the
    *Enter* key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will add the **Microsoft.Extenstions.Logging.Configuration**
    NuGet package to the project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*E* to enter the **Search** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `app settings file` in the **Search** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `appsettings.json` in the **Name** textbox and click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the default JSON with the following JSON:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following line to the `Main` method of the `Client/Program.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The proceeding code will configure the browser to only log items that have a
    log level of at least `Debug`.
  prefs: []
  type: TYPE_NORMAL
- en: Logging is an essential tool for understanding the flow of a Blazor WebAssembly
    app. There are different log levels depending on the type of message. The minimum
    log level displayed can be adjusted with an `appsetting.json` file.
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s look at some different ways to handle exceptions.
  prefs: []
  type: TYPE_NORMAL
- en: Handling exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As part of the template, when an unhandled exception occurs in a Blazor WebAssembly
    app, a yellow bar is displayed at the bottom of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_03_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.8: Sample unhandled exception'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can modify the text and style of the error message that is displayed by
    modifying the `index.html` file. The UI for the yellow bar is defined in the `wwwroot/index.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You can modify the style of the error message that is displayed in the `wwwroot/css/app.css`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, clicking the **Throw Exception** button throws
    an unhandled exception. This is the code for the `ThrowException` component that
    we used to create the **Throw Exception** button in the preceding screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To view the exception, we need to open `DevTools` by pressing *F12* and selecting
    the **Console** tab. By default, unhandled exceptions are logged to the **Console**.
    The following screenshot shows the **Console** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18471_03_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.9: Sample critical log'
  prefs: []
  type: TYPE_NORMAL
- en: In a perfect world, there are not any unhandled exceptions. In our world, there
    are error boundaries and custom error components.
  prefs: []
  type: TYPE_NORMAL
- en: Setting error boundaries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Error boundaries can be used to handle exceptions. The **ErrorBoundary** component
    is a built-in component used to handle unhandled errors at the UI level. It includes
    a **ChildContent** property that renders when an error has not occurred and an
    **ErrorContent** property that renders when an error has occurred. The `ErrorBoundary`
    component can be wrapped around any other component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code wraps an `ErrorBoundary` component around the `ThrowException`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'When the **Throw Exception** button is pressed, the following information will
    be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated](img/B18471_03_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.10: Default ErrorBoundary UI'
  prefs: []
  type: TYPE_NORMAL
- en: 'The default UI for the `ErrorBoundary` component is defined in the `wwwroot/css/app.css`
    file. The default message is very generic. We can add our own custom error message
    by using the `ErrorContent` property of the `ErrorBoundary` component. This is
    the updated `ErrorBoundary` component that includes the `ErrorContent` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the result of the custom `ErrorContent`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Word  Description automatically generated](img/B18471_03_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.11: Custom ErrorContent'
  prefs: []
  type: TYPE_NORMAL
- en: The `ErrorBoundary` component only handles errors on the UI level. It allows
    the developer to catch the error at a single point in the UI. To handle the errors
    programmatically, we need to create a custom error component.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom error component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A custom error component can be passed to each child component. The following
    `ErrorHandler` component writes to the log when an error is encountered:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ErrorHandler.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The `ErrorHandler` needs to be added as a `CascadingParameter` into the component
    that will use it. This is the `ThrownExceptionHandled` component:'
  prefs: []
  type: TYPE_NORMAL
- en: '**ThrownExceptionHandled.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When the `ThrownExceptionHandled` component is wrapped in the `ErrorHandler`
    component, all the unhandled errors are logged to the **Console**:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows how the error is rendered to the **Console**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_03_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.12: Handled error'
  prefs: []
  type: TYPE_NORMAL
- en: The Blazor WebAssembly project templates provided by Microsoft render a generic
    yellow bar at the bottom of the page when an unhandled exception is encountered.
    We can use an `ErrorBoundary` component to customize the UI. Even better, we can
    create a custom error component for more control over how errors are handled.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to handle errors, let’s learn how to prepare our application
    for deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Using ahead-of-time (AOT) compilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Blazor WebAssembly apps use a .NET **Intermediate Language** (**IL**)
    interpreter when running on the browser. **Ahead-of-time** (**AOT**) compilation
    allows you to compile your .NET code into WebAssembly before deployment. Since
    compiled code is more performant than interpreted code, your app will run faster.
    The only downside to using AOT is that the app may be larger and, therefore, will
    take more time to load during application startup.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the steps to enable AOT:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the project in the **Solution Explorer** and select **Properties**
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `AOT` in the **Search properties** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Use ahead-of-time (AOT) compilation on publish** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once AOT is enabled, AOT compilation will occur every time the project is published.
    It takes much longer to publish an app using AOT compilation, but it can make
    the Blazor WebAssembly app run much faster. This is especially true for CPU-intensive
    apps.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: 'You must have `wasm-tools` installed to use AOT. To install `wasm-tools`, run
    the following command and restart Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dotnet workload install wasm-tools`'
  prefs: []
  type: TYPE_NORMAL
- en: Now we are ready to deploy the Blazor WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Blazor WebAssembly app to Microsoft Azure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Deploying a Blazor WebAssembly app using Visual Studio is quite simple. There
    is an easy-to-follow wizard that is included in Visual Studio. These are the steps
    for deploying a Blazor WebAssembly app to Microsoft Azure using Visual Studio
    2022:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the project and select **Publish** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the first page of the **Publish** wizard:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_03_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.13: First page of Publish wizard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As you can see, there are many options provided. For this project, we will be
    publishing the application to the Microsoft cloud.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Azure** and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the second page of the **Publish** wizard:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_03_14.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.14: Second page of Publish wizard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Azure App Service (Windows)** and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is the last page of the **Publish** wizard. This page is used to select
    the **Azure App Service** to use for the application. You can also use this page
    to create an **Azure App Service**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_15.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.15: Last page of Publish wizard'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create an **Azure App Service** if you do not have one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the **Create New App Service** dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, email  Description automatically generated](img/B18471_03_16.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.16: Create New App Service dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you do not already have a Hosting Plan, we recommend that you create a **Free**
    hosting plan for this project. The following screenshot shows the **Create New
    Hosting Plan** dialog with the **Free** option selected:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, table  Description automatically generated](img/B18471_03_17.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.17: Create New Hosting Plan dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Close** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The application is now ready to be published.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_18.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.18: Publish dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Publish** button and wait.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The browser will automatically open once the app is published.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying a Blazor WebAssembly app to Microsoft Azure is as simple as following
    the steps in a wizard.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the “guess the number” project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will build a simple number-guessing game. The game will
    allow for multiple guesses and will alert us when we win.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_03_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.19: Guess the Number game'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `GuessTheNumber` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will add the components needed for the project. Then, we will add logging.
    We will debug the app in both Visual Studio and the browser. We will add an `ErrorBoundary`
    component. Finally, we will deploy the project to Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with the project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_03_20.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.20: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty**project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `GuessTheNumber` in the **Project name** textbox and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_21.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.21: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `GuessTheNumber` project into the `E:\Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the **Additional information** dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_03_22.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.22: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created the `GuessTheNumber` Blazor WebAssembly project. Now we need
    to add a component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a Game component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add a `Game` component that includes a Razor page, a code-behind
    page, and a cascading style sheet. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `GuessTheNumber` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `Game`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the default code in the `Game` component with the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code creates the framework for the game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following code in the `guesses` div:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code loops through each of the `guesses` to render them on the
    screen.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following code beneath the `@foreach` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code checks to see if the player is a winner. If they are a winner,
    it displays the **Play Again** button. If they are not a winner, it provides them
    with an `input` element for them to enter another guess.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have added the markup, we need to add the code.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the code for the project in a separate file. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Game.razor.cs` and click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `partial` keyword to the `Game` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the `Game` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code defines the properties and methods we will use in the `Game`
    component. It also defines the `Row` class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `OnParametersSet` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the value of `digitCount`. After it has determined the
    value of `digitCount`, it calls the `CalculateAnswer` method.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `CalculateAnswer` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code calculates the `answer` based on the number of digits specified
    by `digitCount`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `GuessAnswer` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code compares each digit in the answer with each digit in the
    guess. If the guess is equal to the answer, they are a winner.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `PlayAgain` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code resets the game.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We are almost done creating the `Game` component. We just need to add some styling.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a style sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a style sheet using CSS isolation. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl*+*E* to enter the **Search** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `css` in the **Search** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Game.razor.css` in the **Name** textbox and click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following styles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The style sheet sets the font to a monospaced font for both the list of past
    guesses and the current guess. Also, the classes used to designate the color are
    defined.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Uncomment the link to the `GuessTheNumber.styles.css` style sheet in the `head`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let’s test the app by playing the game.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and playing the game
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the `Game` component to the `Index` component to play the game.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `_Imports.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By adding the preceding `using` statement to the `_Imports.razor` file, it is
    automatically imported into the other `.razor` files within the same folder and
    its subfolders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `h1` element with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a 4-digit number and click the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a digit is in the answer, it will appear in red. If the digit is in the answer
    and it is in the correct position, it will appear in green. The goal is to guess
    the answer.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter another 4-digit number and click the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try to win the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It is impossible to win the game because there is a bug in our code. Let’s add
    some logging to try and find the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Adding logging
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add logging to the application. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Game.razor.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement to the top of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the top of the `Game` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code injects an `ILogger` object into the `Game` component to
    create a logger.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the end of the `CalculateAnswer` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to the end of the `GuessAnswer` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F12* to open `DevTools`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Console** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a 4-digit number and click the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter another 4-digit number and click the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the messages that have been logged to the **Console**
    tab:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B18471_03_23.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.23: Logged information'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: By using logging, we can determine that our guesses are being correctly evaluated.
    Let’s try debugging our code to find the issue.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will debug the Blazor WebAssembly app using Visual Studio. We do
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Game.razor.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a breakpoint to the first line of the `GuessAnswer` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F5* to run the application with debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a 4-digit number and click the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hover over `curGuess` to view its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the **Locals** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set a **Watch** on `guess`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F10* to step through the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the code is working correctly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'View the **Output** window in Visual Studio to help understand the flow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_03_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.24: Output window in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: The problem is that `guess` is being set to an empty string before its value
    is compared to the answer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move the following code to the end of the `GuessAnswer` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *F5* to run the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the game until you win.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a winning game:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Text, application  Description automatically generated with medium confidence](img/B18471_03_25.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 3.25: Guess the Number – Winner'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When your guess matches the answer, you win the game. Let’s make the game harder
    by varying the number of digits.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make the game harder, we will allow the player to decide how many digits
    they need to guess. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Game.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace `@digitCount` with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Game.razor.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `RestartGame` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code resets the game every time the number of digits is changed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the updated game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we will use the browser to debug our updates.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging in the browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will debug the new code in the browser. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Shift*+*Alt*+*D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the indicated text into your clipboard that corresponds with the browser
    that you are using.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Win*+*R*, paste the text that you copied, and click the **OK** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Shift*+*Alt*+*D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A second tab opens in the browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Sources** tab and view the files in the `file://` node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the `Shared` folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_03_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.26: Folders in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: Add a breakpoint in the `GuessAnswer` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the first tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the number of digits to 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a 5-digit number and click the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the second tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: View the `Scope`, `Local` value of `curGuess`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F10* multiple times to step through the function call.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F8* to resume script execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the first tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a 3-digit number and press the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *F8* to resume script execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **reload** link at the bottom of the page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We encountered an unhandled error when we entered a guess with fewer digits
    than the answer. Let’s address that issue by adding an `ErrorBoundary` component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an ErrorBoundary component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to wrap the `Game` component in an `ErrorBoundary` component. We do
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the `Game` element with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a 3-digit number and press the **Guess** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the message defined by the `ErrorContent` property is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added an `ErrorBoundary` component to update the UI when an unhandled
    exception is encountered. The `ErrorContent` property is used to define the UI.
    Now that the application is tested, it’s time to deploy it.
  prefs: []
  type: TYPE_NORMAL
- en: Deploying the application to Microsoft Azure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will enable AOT compilation and deploy the app to Microsoft Azure. We do
    this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `GuessTheNumber` project and select **Properties** from the
    menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `AOT` in the **Search properties** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Use ahead-of-time (AOT) compilation on publish** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `GuessTheNumber` project and select the **Publish** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure** and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Azure App Service (Windows)** and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select an existing Azure App Service or create a new one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Finish** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Be patient, it will take some time to deploy the app to Microsoft Azure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Play the game.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have deployed the `Guess the Number` web app to Microsoft Azure.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: After you have finished testing your application, don’t forget to remove the
    resources that you added to your Azure account.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to debug and deploy a Blazor WebAssembly app.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned about debugging in both Visual Studio and `DevTools`.
    We learned about the different levels of logging and how to write to the log.
    We learned how to handle exceptions. Finally, we learned how to use AOT compilation
    before deploying a Blazor WebAssembly app to Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we created a new project using the **Blazor WebAssembly App Empty**
    project template in Visual Studio. We added a simple `Game` component. We added
    some logging to the app. We added a breakpoint to the app using both Visual Studio
    and `DevTools`. We added an `ErrorBoundary` component to capture the unhandled
    errors. Finally, we enabled AOT compilation and deployed the application to Microsoft
    Azure.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a modal dialog using templated components.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: How would you rewrite the `Guess the Number` game to use a custom error component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What types of applications benefit the most from AOT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the different log levels and when should you use each one?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you debug a Blazor WebAssembly app in the browser?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can you deploy a Blazor WebAssembly app to Microsoft Azure for free?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on debugging C# code in Visual Studio, refer to [https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-debugger](https://learn.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-debugger).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on `DevTools`, refer to [https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/overview](https://learn.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium/overview).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on logging, refer to [https://learn.microsoft.com/en-us/dotnet/core/extensions/logging](https://learn.microsoft.com/en-us/dotnet/core/extensions/logging).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on Microsoft Azure, refer to [https://azure.microsoft.com](https://azure.microsoft.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
