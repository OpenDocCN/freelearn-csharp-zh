- en: Lights, Cameras, and Shadows
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 灯光、摄像机和阴影
- en: In the previous chapter, we created our game's terrain and made several customizations
    to the terrain, based on our design mock-up in [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml),
    *Designing the Game*. We used shaping tools, painted the terrain, and added water.
    We even created our own tree from scratch. In addition, we created a material
    and imported a texture file.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们创建了我们的游戏地形，并根据我们在第3章[设计游戏](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml)中的设计草图对地形进行了自定义。我们使用了造型工具，绘制了地形，并添加了水。我们甚至从头开始创建了自己的树。此外，我们还创建了一个材质并导入了一个纹理文件。
- en: In this chapter, we will explore cameras and lighting in Unity. We will start
    with a look at cameras to include perspectives, frustums, and Skyboxes. Next,
    we will learn a few uses of multiple cameras to include mini-maps. We will also
    cover the different types of lighting, explore reflection probes, and conclude
    with a look at shadows.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Unity中的摄像机和灯光。我们将从查看摄像机开始，包括透视、视锥体和Skybox。接下来，我们将学习一些使用多个摄像机的用途，包括迷你地图。我们还将涵盖不同类型的灯光，探索反射探针，并以查看阴影结束。
- en: 'Specifically, we will cover the following concepts:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将涵盖以下概念：
- en: Working with cameras
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与摄像机协同工作
- en: Using multiple cameras
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用多个摄像机
- en: Working with lighting
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与灯光协同工作
- en: Implementing reflection probes
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现反射探针
- en: Understanding shadows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解阴影
- en: If you want to use the same Unity project featured in this chapter, you can
    download the `Starting-Chapter-05.zip` file from the publisher's companion site.
    Once you download the file, decompress it and then open the project in Unity.
    It contains the completed work from the previous chapters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要使用本章中介绍的相同Unity项目，你可以从出版商的配套网站上下载`Starting-Chapter-05.zip`文件。下载文件后，解压缩它，然后在Unity中打开项目。它包含了前几章的完成工作。
- en: Working with cameras
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与摄像机协同工作
- en: Cameras render scenes so that the user can view them. Think about the hidden
    complexity in that statement. Our games are 3D, but people playing our games view
    them on 2D displays such as a televisions, computer monitors, or mobile devices.
    Fortunately for us, Unity makes implementing cameras easy work.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 摄像机渲染场景，以便用户可以查看。考虑一下这个陈述中隐藏的复杂性。我们的游戏是3D的，但玩我们游戏的人是在2D显示设备上查看的，如电视、计算机显示器或移动设备。幸运的是，Unity使实现摄像机变得容易。
- en: Cameras are GameObjects and can be edited using transform tools in the Scene
    view as well as in the Inspector panel. Every scene must have at least one camera.
    In fact, when a new scene is created, Unity creates a camera named Main Camera.
    As you will see later in this chapter, a scene can have multiple cameras.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 摄像机是GameObject，可以使用场景视图和检查器面板中的变换工具进行编辑。每个场景至少必须有一个摄像机。实际上，当创建新场景时，Unity会创建一个名为Main
    Camera的摄像机。正如你将在本章后面看到的那样，一个场景可以有多个摄像机。
- en: 'In the Scene view, cameras are indicated with a white camera silhouette, as
    shown in the following screenshot:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景视图中，摄像机用白色摄像机轮廓表示，如下面的截图所示：
- en: '![](img/faa1fe2a-b7bc-4675-9c0d-8a32d1c5f608.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faa1fe2a-b7bc-4675-9c0d-8a32d1c5f608.png)'
- en: 'When we click our Main Camera in the Hierarchy panel, we are provided with
    a Camera Preview in the Scene view. This gives us a preview of what the camera
    sees as if it were in game mode. We will change this in [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml),
    *Implementing Our Player Character*. We also have access to several parameters
    via the Inspector panel. The Camera component in the Inspector panel is shown
    here:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在层次结构面板中点击主摄像机时，我们在场景视图中提供了一个摄像机预览。这让我们可以看到摄像机在游戏模式下的视图。我们将在第7章[实现我们的玩家角色](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml)中更改这一点。我们还可以通过检查器面板访问几个参数。检查器面板中的摄像机组件如下所示：
- en: '![](img/da4c15dd-68d8-4608-bf05-6d17aac6bc79.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da4c15dd-68d8-4608-bf05-6d17aac6bc79.png)'
- en: 'Let''s look at each of these parameters with relation to our *Cucumber Beetle*
    game:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们根据我们的*Cucumber Beetle*游戏来查看每个参数：
- en: The Clear Flags parameter lets you switch between Skybox, Solid Color, Depth
    Only, and Don't Clear. The selection here informs Unity which parts of the screen
    to clear. We will leave this setting as Skybox. You will learn more about Skyboxes
    later in this chapter.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Clear Flags参数允许你在Skybox、纯色、深度只清除和不清除之间切换。这里的选项告诉Unity要清除屏幕的哪些部分。我们将保持此设置为Skybox。你将在本章后面的内容中了解更多关于Skybox的信息。
- en: The Background parameter is used to set the default background fill (color)
    of your game world. This will only be visible after all game objects have been
    rendered and if there is no Skybox. Our *Cucumber Beetle* game will have a Skybox,
    so this parameter can be left with the default color.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 背景参数用于设置游戏世界的默认背景填充（颜色）。此设置仅在所有游戏对象渲染完毕且没有天空盒的情况下可见。我们的*Cucumber Beetle*游戏将包含天空盒，因此此参数可以保留默认颜色。
- en: The Culling Mask parameter allows you to select and deselect the layers you
    want the camera to render. The default selection options are Nothing, Everything,
    Default, TransparentFX, Ignore Raycast, Water, and UI. For our game, we will select
    Everything. If you are not sure which layer a game object is associated with,
    select it and look at the Layer parameter in the top section of the Inspector
    panel. There you will see the assigned layer. You can easily change the layer
    as well as create your own unique layers. This gives you finite rendering control.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪裁遮罩参数允许您选择和取消选择相机要渲染的层。默认选择选项包括无、所有、默认、透明FX、忽略射线投射、水和其他UI。对于我们的游戏，我们将选择所有。如果您不确定游戏对象关联的层，请选择它，并在检查器面板顶部的层参数中查看。在那里您将看到分配的层。您可以轻松更改层以及创建自己的独特层。这为您提供了有限的渲染控制。
- en: The Projection parameter allows you to select which projection, perspective
    or orthographic, you want for your camera. We will cover both of those projections
    later in this chapter. When *perspective* projection is selected, we are given
    access to the Field of View parameter. This is for the width of the camera's angle
    of view. The value range is 1-179°. You can use the slider to change the values
    and see the results in the Camera Preview window. When orthographic projection
    is selected, an additional Size parameter is available. This refers to the viewport
    size. For our game, we will select perspective projection with the Field of View
    set to `60`.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影参数允许您选择相机所需的投影类型，是透视还是正交。我们将在本章后面讨论这两种投影。当选择透视投影时，我们将获得访问视场参数的权限。这是指相机视场角度的宽度。值范围是1-179°。您可以使用滑块更改值，并在相机预览窗口中查看结果。当选择正交投影时，将可用一个额外的尺寸参数。这指的是视口大小。对于我们的游戏，我们将选择透视投影，并将视场设置为`60`。
- en: The Clipping Planes parameters include Near and Far. These settings set the
    closest and furthest points, relative to the camera, that rendering will happen
    at. For now, we will leave the default settings of `0.3` and `1000` for the Near
    and Far parameters, respectively.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 剪裁平面参数包括近剪裁和远剪裁。这些设置确定了相对于相机，渲染将发生的最近和最远点。目前，我们将保留近剪裁参数的默认值`0.3`和远剪裁参数的默认值`1000`。
- en: The Viewport Rect parameter has four components – X, Y, W, and H – that determine
    where the camera will be drawn on the screen. As you would expect, the X and Y
    components refer to horizontal and vertical positions, and the W and H components
    refer to width and height. You can experiment with these values and see the changes
    in the Camera Preview. For our game, we will leave the default settings.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视口矩形参数有四个组件——X、Y、W和H——它们确定相机将在屏幕上的哪个位置绘制。正如您所期望的，X和Y组件指的是水平和垂直位置，而W和H组件指的是宽度和高度。您可以尝试这些值，并在相机预览中查看变化。对于我们的游戏，我们将保留默认设置。
- en: The Depth parameter is used when we implement more than one camera. We can set
    a value here to determine the camera's priority in relation to others. Larger
    values indicate a higher priority. The default setting is sufficient for our game.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 深度参数在实现多个相机时使用。我们可以在此设置一个值以确定相机相对于其他相机的优先级。较大的值表示更高的优先级。对于我们的游戏，默认设置是足够的。
- en: The Rendering Path parameter defines what rendering methods our camera will
    use. The options are Use Graphics Settings, Forward, Deferred, Legacy Vertex Lit,
    and Legacy Deferred (light prepass). We will use the Use Graphics Settings option
    for our game, which also uses the default setting.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染路径参数定义了我们的相机将使用哪些渲染方法。选项包括使用图形设置、前向渲染、延迟渲染、旧版顶点着色和旧版延迟（光预渲染）。我们将为我们的游戏使用使用图形设置选项，这也使用了默认设置。
- en: The Target Texture parameter is not something we will use in our game. When
    a render texture is set, the camera is not able to render to the screen.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标纹理参数在我们的游戏中不会使用。当设置渲染纹理时，相机无法将渲染输出到屏幕。
- en: The Occlusion Culling parameter is a powerful setting. If enabled, Unity will
    not render objects that are occluded, or not seen by the camera. An example would
    be objects inside a building. If the camera can currently only see the external
    walls of the building, then none of the objects inside those walls can be seen.
    So, it makes sense to not render those. We only want to render what is absolutely
    necessary to help ensure our game has smooth gameplay and no lag. We will leave
    this as enabled for our game.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消隐裁剪参数是一个强大的设置。如果启用，Unity将不会渲染被遮挡或未被相机看到的对象。一个例子是建筑物内的对象。如果相机目前只能看到建筑物的外部墙壁，那么那些墙壁内的所有对象都不可见。因此，不渲染这些对象是有意义的。我们只想渲染绝对必要的对象，以确保我们的游戏有流畅的游戏体验和没有延迟。我们将保持这个设置为启用，用于我们的游戏。
- en: The Allow HDR parameter is a checkbox that toggles a camera's **High Dynamic
    Range** (**HDR**) rendering. We will leave the default setting of enabled for
    our game.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许HDR参数是一个复选框，用于切换相机的**高动态范围**（**HDR**）渲染。我们将保持游戏的默认设置为启用。
- en: The Allow MSAA parameter is a toggle that determines whether our camera will
    use a **Multisample Anti-Aliasing** (**MSAA**) render target. MSAA is a computer
    graphics optimization technique and we want this enabled for our game.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许MSAA参数是一个切换，用于确定我们的相机是否将使用**多采样抗锯齿**（**MSAA**）渲染目标。MSAA是一种计算机图形优化技术，我们希望为我们的游戏启用它。
- en: Understanding camera projections
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解相机投影
- en: 'There are two camera projections used in Unity: perspective and orthographic.
    With perspective projection, the camera renders a scene based on the camera angle,
    as it exists in the scene. Using this projection, the further away an object is
    from the camera, the smaller it will be displayed. This mimics how we see things
    in the real world. Because of the desire to produce realistic games, or games
    that approximate the realworld, perspective projection is the most commonly used
    in modern games. It is also what we will use in our *Cucumber Beetle* game.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中使用了两种相机投影：透视和正交。使用透视投影，相机根据场景中的相机角度渲染场景。使用这种投影，离相机越远，对象显示得越小。这模仿了我们现实世界中看到事物的样子。由于制作逼真游戏或近似现实世界的游戏的愿望，透视投影在现代游戏中是最常用的。它也是我们将在我们的*Cucumber
    Beetle*游戏中使用的投影。
- en: The other projection is orthographic. An orthographic perspective camera renders
    a scene uniformly without any perspective. This means that objects further away
    will not be displayed smaller than objects closer to the camera. This type of
    camera is commonly used for top-down games and is the default camera projection
    used in 2D and Unity's UI system.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种投影是正交投影。正交透视相机以均匀的方式渲染场景，没有任何透视。这意味着远离相机的对象不会比靠近相机的对象显示得更小。这种类型的相机通常用于俯视游戏，并且在2D和Unity的UI系统中是默认使用的相机投影。
- en: We will use perspective projection for our *Cucumber Beetle* game.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的*Cucumber Beetle*游戏使用透视投影。
- en: Orientating your frustum
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位你的视锥体
- en: 'When a camera is selected in the Hierarchy view, its frustum is visible in
    the Scene view. A frustum is a geometric shape that looks like a pyramid that
    has had its top cut off, as illustrated here:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当在层次视图中选择相机时，其视锥体在场景视图中可见。视锥体是一种几何形状，看起来像被切掉顶部的金字塔，如图所示：
- en: '![](img/62ef6855-c538-4da0-949d-806725dc3d31.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/62ef6855-c538-4da0-949d-806725dc3d31.png)'
- en: The near, or top, plane is parallel to its base. The base is also referred to
    as the far plane. The frustum's shape represents the viable region of your game.
    Only objects in that region are rendered. Using the camera object in Scene view,
    we can change our camera's frustum shape.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 近平面或顶部平面与其底部平行。底部也被称为远平面。视锥体的形状代表了你游戏的可视区域。只有该区域内的对象会被渲染。使用场景视图中的相机对象，我们可以改变我们相机的视锥体形状。
- en: Creating a Skybox
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建天空盒
- en: When we create game worlds, we typically create the ground, buildings, characters,
    trees, and other game objects. What about the sky? By default, there will be a
    textured blue sky in your Unity game projects. That sky is sufficient for testing
    but does not add to an immersive gaming experience. We want a bit more realism,
    such as clouds, and that can be accomplished by creating a Skybox.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建游戏世界时，我们通常会创建地面、建筑物、角色、树木和其他游戏对象。那么天空呢？默认情况下，你的Unity游戏项目中将有一个纹理化的蓝色天空。那个天空对于测试来说是足够的，但不会增加沉浸式游戏体验。我们想要更多的现实感，比如云彩，这可以通过创建天空盒来实现。
- en: A Skybox is a six-sided cube visible to the player beyond all other objects.
    So, when a player looks beyond your objects, what they see is your Skybox. As
    we said, Skyboxes are six-sided cubes, which means you will need six separate
    images that can essentially be clamped to each other to form the cube.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Skybox是一个六面立方体，玩家可以看到它，而其他所有对象都看不到。因此，当玩家看向您的对象之外时，他们看到的是您的Skybox。正如我们所说的，Skyboxes是六面立方体，这意味着您将需要六个单独的图像，这些图像基本上可以相互夹紧以形成立方体。
- en: 'The following screenshot shows the **Default Skybox** that Unity projects start
    with as well as the completed **Custom Skybox** you will create in this section:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了Unity项目开始时的**默认Skybox**以及您将在本节中创建的**自定义Skybox**：
- en: '![](img/7773dbf4-8633-4200-a584-64c150d43ef4.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7773dbf4-8633-4200-a584-64c150d43ef4.png)'
- en: To follow along, you will need the six images located in the `Chapter5-Skybox.zip`
    file on the publisher's companion site.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 为了跟随，您将需要位于出版商配套网站上的`Chapter5-Skybox.zip`文件中的六个图像。
- en: 'Perform the following steps to create a Skybox:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以创建Skybox：
- en: In the Project panel, create a `Skybox` subfolder in the `Assets` folder. We
    will use this folder to store our textures and materials for the Skybox.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，在`Assets`文件夹中创建一个`Skybox`子文件夹。我们将使用此文件夹来存储我们的Skybox纹理和材质。
- en: Drag the provided six Skybox images, or your own, into the new `Skybox` folder.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提供的六个Skybox图像或您自己的图像拖放到新的`Skybox`文件夹中。
- en: Ensure the `Skybox` folder is selected in the `Project` panel.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在`Project`面板中选择了`Skybox`文件夹。
- en: From the top menu, select Assets | Create | Material. In the Project panel,
    name the material `Skybox`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中选择Assets | Create | Material。在项目面板中，将材质命名为`Skybox`。
- en: With the Skybox material selected, turn your attention to the Inspector panel.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择Skybox材质后，将注意力转向检查器面板。
- en: Select the Shader drop-down menu and select SkyBox | 6 Sided.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择着色器下拉菜单，然后选择SkyBox | 6 Sided。
- en: Use the Select button for each of the six images and navigate to the images
    you added in step 2\. Be sure to match the appropriate texture to the appropriate
    cube face. For example, the `SkyBox_Front` texture matches the `Front[+Z]` cube
    face on the Skybox Material.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用每个图像的“选择”按钮，导航到步骤2中添加的图像。务必将适当的纹理匹配到相应的立方面。例如，`SkyBox_Front`纹理与Skybox材料的`Front[+Z]`立方面相匹配。
- en: In order to assign our new Skybox to our scene, select Window | Lighting | Settings
    from the top menu. This will bring up the Lighting settings dialog window.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了将我们的新Skybox分配到场景中，从顶部菜单中选择Window | Lighting | Settings。这将打开照明设置对话框窗口。
- en: 'In the Lighting settings dialog window, click on the small circle to the right
    of the Skybox Material input field. Then, close the selection window and the Lighting
    window. Refer to the following screenshot:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在照明设置对话框窗口中，单击Skybox材质输入字段右侧的小圆圈。然后，关闭选择窗口和照明窗口。参见图表：
- en: '![](img/d35925b2-1a99-424e-a187-5024c1d10830.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d35925b2-1a99-424e-a187-5024c1d10830.png)'
- en: You will now be able to see your Skybox in the Scene view. When you click on
    the Camera in the Hierarchy panel, you will also see the Skybox as it will appear
    from the camera's perspective.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您将在场景视图中看到您的Skybox。当您在层次结构面板中单击相机时，您也将看到从相机视角看到的Skybox。
- en: Be sure to save your scene and your project.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 请务必保存您的场景和项目。
- en: Using multiple cameras
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用多个相机
- en: Our Unity games must have a least one camera, but we are not limited to using
    just one. As you will see in [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml),
    *Implementing Our Player Character*, we will attach our main camera, or primary
    camera, to our player character. It will be as if the camera is following the
    character around the game environment. This will become the eyes of our character.
    We will play the game through our character's view.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Unity游戏必须至少有一个相机，但我们并不局限于只使用一个。正如您将在[第7章](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml)中看到的，*实现我们的玩家角色*，我们将把我们的主相机或主要相机连接到我们的玩家角色上。这将意味着相机将跟随角色在游戏环境中移动。这将成为我们角色的眼睛。我们将通过角色的视角玩游戏。
- en: A common use of a second camera is to create a mini-map that can be seen in
    a small window on top of the game display. These mini-maps can be made to toggle
    on and off or be permanent/fixed display components. Implementations might consist
    of a fog-of-war display, a radar showing enemies, or a global top-down view of
    the map for orientation purposes. You are only limited by your imagination. In
    [Chapter 9](6e2e628c-4c81-4ec3-bd4f-2ae0f2a29aab.xhtml), *Adding a Heads-Up Display*,
    we will create a mini-map as a radar showing where beetles are in relation to
    the Cucumber Man's current position.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个摄像头的常见用途是在游戏显示顶部的窗口中创建一个迷你地图。这些迷你地图可以设置为可切换的或永久/固定的显示组件。实现方式可能包括战争迷雾显示、显示敌人的雷达，或用于定位的全局俯视图。你受到的限制仅限于你的想象力。在[第9章](6e2e628c-4c81-4ec3-bd4f-2ae0f2a29aab.xhtml)，*添加抬头显示*中，我们将创建一个迷你地图，作为一个雷达，显示甲虫相对于黄瓜人的当前位置。
- en: Another use of multiple cameras is to provide the player with the ability to
    switch between third-person and first-person views. You will remember from [Chapter
    1](f4fba83f-4f23-4537-a130-ed8dab8f3815.xhtml), *Downloading and Installing Unity*,
    that the first-person view puts the player's arms in view, while in the third-person
    view, the player's entire body is visible. We can use two cameras in the appropriate
    positions to support viewing from either camera. In a game, you might make this
    a toggle—say, with the *C* keyboard key—that switches from one camera to the other.
    Depending on what is happening in the game, the player might enjoy this ability.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 多个摄像头的另一个用途是给玩家提供在第三人称和第一人称视角之间切换的能力。你会记得从[第1章](f4fba83f-4f23-4537-a130-ed8dab8f3815.xhtml)，*下载和安装Unity*中，第一人称视角将玩家的手臂放入视野，而在第三人称视角中，玩家的整个身体都是可见的。我们可以使用两个摄像头在适当的位置来支持从任一摄像头观看。在游戏中，你可能会将其设置为切换——比如使用*C*键盘键——从一台摄像头切换到另一台。根据游戏中的情况，玩家可能会享受这种能力。
- en: Some single-player games feature multiple playable characters. Giving the player
    the ability to switch between these characters gives them greater control over
    the game strategy. To achieve this, we would need to have cameras attached to
    each playable character and then give the player the ability to swap characters.
    We would do this through scripting. This is a pretty advanced implementation of
    multiple characters.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 一些单人游戏具有多个可玩角色。给玩家切换这些角色的能力，使他们能够更好地控制游戏策略。为了实现这一点，我们需要为每个可玩角色安装摄像头，并给玩家切换角色的能力。我们会通过脚本来实现。这是多角色的高级实现方式。
- en: Another use of multiple cameras is adding specialty views in a game. These specialty
    views might include looking through a door's peep-hole, looking through binoculars
    at the top of a skyscraper, or even looking through a periscope. We can attach
    cameras to objects and change their viewing parameters to create unique camera
    use in our games. We are only limited by our own game designs and imagination.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 多个摄像头的另一个用途是在游戏中添加特殊视角。这些特殊视角可能包括通过门上的猫眼观察，通过高楼顶部的双筒望远镜观察，甚至通过潜望镜观察。我们可以将摄像头附着在物体上，并改变它们的观看参数，以在我们的游戏中创建独特的摄像头使用方式。我们受到的限制仅限于我们自己的游戏设计和想象力。
- en: We can also use cameras as cameras. That's right! We can use the camera game
    object to simulate actual in-game cameras. One example is implementing security
    cameras in a prison-escape game.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将摄像头用作摄像头。没错！我们可以使用摄像头游戏对象来模拟实际游戏中的摄像头。一个例子是在越狱游戏中实现安全摄像头。
- en: Working with lighting
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与照明工作
- en: In the previous sections, we explored the uses of cameras for Unity games. Just
    like in the real world, cameras need lights to show us objects. In Unity games,
    we use multiple lights to illuminate the game environment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们探讨了Unity游戏中使用摄像头的作用。就像在现实世界中一样，摄像头需要灯光来显示物体。在Unity游戏中，我们使用多个灯光来照亮游戏环境。
- en: In Unity, we have both dynamic lighting techniques as well as light baking options
    for better performance. We can add numerous light sources throughout our scenes
    and selectively enable or disable an object's ability to cast or receive shadows.
    This level of specificity gives us tremendous opportunity to create realistic
    game scenes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，我们既有动态照明技术，也有光照烘焙选项，以获得更好的性能。我们可以在场景中添加多个光源，并选择性地启用或禁用对象投射或接收阴影的能力。这种具体性为我们提供了巨大的机会来创建逼真的游戏场景。
- en: Perhaps the secret behind Unity's ability to so realistically render light and
    shadows is that Unity models the actual behavior of lights and shadows. Real-time
    global illumination gives us the ability to instantiate multiple lights in each
    scene, each with the ability to directly or indirectly impact objects in the scene
    that are within range of the light sources.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Unity能够如此真实地渲染光线和阴影的秘密可能在于Unity对光线和阴影的实际行为进行了建模。实时全局光照使我们能够在每个场景中实例化多个光源，每个光源都有能力直接或间接影响场景中光线源范围内的物体。
- en: Indirect light refers to lights bouncing off objects and reflecting on other
    objects.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 间接光照指的是光线从物体上弹跳并反射到其他物体上。
- en: 'We can also add and manipulate ambient light in our game scenes. This is often
    done with Skyboxes, a tri-colored gradient, or even a single color. Each new scene
    in Unity has default ambient lighting, which we can control by editing the values
    in the the Lighting window. In that window, you have access to the following settings:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在我们的游戏场景中添加和操作环境光。这通常是通过Skyboxes、三色渐变或甚至单色来实现的。在Unity中，每个新的场景都有默认的环境光照，我们可以通过编辑光照窗口中的值来控制它。在那个窗口中，你可以访问以下设置：
- en: Environment
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 环境
- en: Real-time Lighting
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时光照
- en: Mixed Lighting
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 混合光照
- en: Lightmapping Settings
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光照贴图设置
- en: Other Settings
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他设置
- en: Debug Settings
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试设置
- en: No changes to these are required for our game at this time. We have already
    set the environmental lighting to our Skybox. In [Chapter 12](f7abb907-5397-4668-972e-e69acb441421.xhtml),
    *Adding Audio and Visual Effects to Our Game*, we will look at Fog, which is available
    under the Other Settings section of the Lighting window.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们的游戏不需要对这些设置进行更改。我们已经将环境光照设置到了Skybox中。在[第12章](f7abb907-5397-4668-972e-e69acb441421.xhtml)“为我们的游戏添加音频和视觉效果”中，我们将探讨雾气，这是在光照窗口的其他设置部分中可用的。
- en: When we create our scenes in Unity, we have three options for lighting. We can
    use real-time dynamic light, use the baked lighting approach, or use a mixture
    of the two. Our games perform more efficiently with baked lighting, compared to
    real-time dynamic lighting, so if performance is a concern, try using baked lighting
    where you can.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Unity中创建场景时，我们有三种光照选项。我们可以使用实时动态光照，使用烘焙光照方法，或者使用两者的混合。与实时动态光照相比，烘焙光照在性能上表现更佳，所以如果性能是考虑因素，尝试使用烘焙光照会更好。
- en: 'In addition to ambient lighting, there are four types of light: directional,
    point, spot, and area. We will look at each of these in the following sections.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 除了环境光照外，还有四种类型的光：方向性、点光源、聚光灯和区域光。我们将在以下章节中探讨每种类型。
- en: Directional lighting
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方向性光照
- en: When we create a new scene in Unity, a directional light is automatically created
    for us. This emphasizes the importance of directional lights. This type of light
    provides illumination in a specific direction. Using transform tools, we have
    full control over the direction of these lights.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Unity中创建一个新的场景时，会自动为我们创建一个方向性光源。这强调了方向性光源的重要性。这种类型的光源在特定方向上提供照明。使用变换工具，我们可以完全控制这些光源的方向。
- en: 'An example of directional lighting is generating sunlight in our scenes. Although
    the light from directional lights is similar to that of the sun, there is no actual
    sun-like object that the light comes from. As shown in the following screenshot,
    Directional Lights, when selected, indicate the direction of its illumination
    with yellow rays:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 方向性光照的一个例子是在场景中生成阳光。尽管方向性光源的光线与阳光相似，但并没有实际类似太阳的光源物体。如图所示，当选择方向性光源时，黄色光线指示其照明的方向：
- en: '![](img/2ae83abf-dfc6-4dca-b7fc-6a901b483150.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ae83abf-dfc6-4dca-b7fc-6a901b483150.png)'
- en: One of the great aspects of using directional lighting is that illumination
    strength is not dependent on an object's distance from the Directional Light object.
    This type of lighting defines the direction of the light, and distance has no
    impact on the illumination.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用方向性光照的一个优点是光照强度不依赖于物体与方向性光源对象的距离。这种类型的光照定义了光线的方向，距离对光照没有影响。
- en: With a Directional Light selected, you have access to several parameters in
    the Inspector panel. In addition to the Transform section, there is a Light section
    where you can change several settings to include the light color and intensity.
    The remaining parameters are worth exploring and no changes are required to complete
    our game.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 选择方向光后，您可以在检查器面板中访问几个参数。除了变换部分外，还有一个灯光部分，您可以在其中更改几个设置，包括灯光颜色和强度。其余参数值得探索，并且不需要更改以完成我们的游戏。
- en: To add additional directional lights, you would select, from the top menu, GameObject
    | Light | Directional Light.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加额外的方向光，您可以从顶部菜单中选择GameObject | Light | Directional Light。
- en: For the *Cucumber Beetle* game, we will keep the default Directional Light.
    You can use the transform tools to modify the location, rotation, and light direction.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*Cucumber Beetle*游戏，我们将保持默认的方向光。您可以使用变换工具修改位置、旋转和光方向。
- en: Point lighting
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 点光源照明
- en: 'Point lights get their name from the fact that they are lights sources emanating
    from a specific point. These light objects, as indicated in the following diagram,
    emit light in all directions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 点光源的名字来源于它们是从一个特定点发出的光源。如图所示，这些灯光对象向所有方向发射光线：
- en: '![](img/3a86bee4-295d-4e8f-838f-f023d65aca92.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a86bee4-295d-4e8f-838f-f023d65aca92.png)'
- en: 'These lights are typically used to simulate fireballs or light bulbs. They
    can also be used to simulate some magic or special lighting effects. As you can
    see in the following screenshot, point lights have several properties that affect
    how they impact the game environment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些灯光通常用于模拟火球或灯泡。它们也可以用来模拟一些魔法或特殊灯光效果。正如您可以从以下屏幕截图中所见，点光源有几个属性会影响它们对游戏环境的影响：
- en: '![](img/efc38960-980e-4b4e-b690-362249b3e8c3.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/efc38960-980e-4b4e-b690-362249b3e8c3.png)'
- en: The Range is the distance between the center of the light to the outside arc
    of the light. We can also change the Color and Intensity to produce the results
    we desire.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 范围是指光源中心到光线外侧弧的距离。我们还可以更改颜色和强度以产生我们想要的结果。
- en: To create a point light, we select GameObject | Light | Directional Light from
    the top menu.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建点光源，我们从顶部菜单中选择GameObject | Light | Directional Light。
- en: Spot lighting
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 聚光灯照明
- en: 'Spot lights are another type of lighting in Unity. They are meant to provide
    lighting on a specific spots. Common examples are flashlights and vehicle headlights.
    As you can see from the following screenshot, the light originates from the source
    in an outward cone shape:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 聚光灯是Unity中另一种类型的灯光。它们旨在为特定区域提供照明。常见的例子包括手电筒和车辆车头灯。正如您可以从以下屏幕截图中所见，光线从光源以向外锥形形状发出：
- en: '![](img/cca867e9-6bab-453f-a451-5dc20a4d9e6b.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cca867e9-6bab-453f-a451-5dc20a4d9e6b.png)'
- en: In the Inspector panel, we can change the Range, Spot Angle, Color and Intensity.
    Range, in this context, refers to the distance between the light source and the
    furthest point in the cone. The Spot Angle is the angle of the outward exterior
    edge of the cone shape. The Spot Angle range is 1-179°. The larger the value is,
    the larger the cone face will be.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器面板中，我们可以更改范围、聚光角度、颜色和强度。在这个上下文中，范围指的是光源与锥形最远点之间的距离。聚光角度是锥形外边缘的角度。聚光角度范围是1-179°。数值越大，锥形面就越大。
- en: To create a spotlight, we select GameObject | Light | Spot Light from the top
    menu.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建聚光灯，我们从顶部菜单中选择GameObject | Light | Spot Light。
- en: Area lighting
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区域照明
- en: 'To use an area light, we define a rectangle using the transform tools or the
    Inspector panel. Area lights emit light from one side of their rectangle. The
    following screenshot shows what an area light object looks like in the Unity editor:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用区域灯光，我们使用变换工具或检查器面板定义一个矩形。区域灯光从其矩形的侧面发射光线。以下屏幕截图显示了在Unity编辑器中区域灯光对象的外观：
- en: '![](img/42e8ea41-a204-4319-bce7-1ada809160e6.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/42e8ea41-a204-4319-bce7-1ada809160e6.png)'
- en: Area lights are unique from the other types of light as they can only be baked.
    This means that real-time rendering will not take place during gameplay. The reason
    for this is to conduct all the processing regarding area lights prior to gameplay.
    This processing, if accomplished in real time in a game, would likely result in
    sufficient lag.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 区域灯光与其他类型的灯光不同，因为它们只能烘焙。这意味着在游戏过程中不会进行实时渲染。这样做的原因是在游戏开始之前完成所有关于区域灯光的处理。如果在游戏中实时完成这些处理，很可能会产生足够的延迟。
- en: 'As you can see in the following screenshot, the Type is set as Area (baked
    only) and cannot be changed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可以从以下屏幕截图中所见，类型设置为区域（仅烘焙）且无法更改：
- en: '![](img/59474f91-f7c8-4f9f-9667-9e715f25310a.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/59474f91-f7c8-4f9f-9667-9e715f25310a.png)'
- en: Area lights can be used instead of point lights when baked lighting is okay
    and you desire software shadows.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当烘焙光照可以接受且你希望使用软件阴影时，可以使用面光源代替点光源。
- en: To create an area light, we select GameObject | Light | Area Light from the
    top menu.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建面光源，我们从顶部菜单中选择GameObject | Light | Area Light。
- en: Implementing reflection probes
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现反射探针
- en: Reflection probes capture a 360° spherical view of their surroundings. In this
    sense, it is somewhat like a camera. That captured image is used by nearby objects
    that have reflective materials.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 反射探针捕捉其周围环境的360°球形视图。在这方面，它有点像相机。捕获的图像被附近具有反射材料的物体使用。
- en: To create a reflection probe, we select GameObject | Light | Reflection Probe from
    the top menu.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建反射探针，我们从顶部菜单中选择GameObject | Light | Reflection Probe。
- en: 'As you can see from the following screenshot, the reflection probe is a sphere
    and has captured the view of its surroundings. When objects are placed in close
    proximity to the reflection probe, the reflections will be visible on the object:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，你可以看到反射探针是一个球体，并捕捉了其周围环境的视图。当物体放置在反射探针附近时，反射将出现在物体上：
- en: '![](img/869cbf2e-a76c-4ead-934b-0690abce3f28.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/869cbf2e-a76c-4ead-934b-0690abce3f28.png)'
- en: 'A review of a reflection probe in the Inspector panel, shown as follows, reveals
    several settings that we can change to affect how the probe works and how it impacts
    our game environment:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如下所示的检查器面板中的反射探针审查，揭示了我们可以更改的几个设置，以影响探针的工作方式和它对我们游戏环境的影响：
- en: '![](img/eb3bf621-160c-45a6-b05d-9ec934a0a8bf.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb3bf621-160c-45a6-b05d-9ec934a0a8bf.png)'
- en: 'The following list of properties highlights the ones you are most likely to
    change in the Unity games you create:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性列表突出了你可能在创建的Unity游戏中最有可能更改的属性：
- en: 'Type: You can select Baked, Custom, or Realtime. Remember, we can improve game
    performance if we bake our lighting whenever possible.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型：你可以选择烘焙、自定义或实时。记住，如果我们尽可能烘焙光照，我们可以提高游戏性能。
- en: 'Importance: When there are multiple rendering probes in the area, you can set
    the importance of each of them. The higher the value, the greater the importance.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重要性：当区域中有多个渲染探针时，你可以设置每个探针的重要性。值越高，重要性越大。
- en: 'Intensity: The lowest value is zero. You can experiment with the results of
    changing this setting.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强度：最低值是零。你可以尝试改变此设置的结果。
- en: 'Resolution: You can select 16, 32, 64, 128, 256, 512, 1024, or 2048 for the
    resolution of the captured image reflection.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分辨率：你可以选择16、32、64、128、256、512、1024或2048作为捕获图像反射的分辨率。
- en: Understanding shadows
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解阴影
- en: As indicated earlier in this chapter, our game scenes can have numerous light
    sources, and we can enable or disable an object's ability to cast or receive shadows.
    We have shadows in the real world and it is important to consider, for our Unity
    games, what objects cast shadows and what objects receive shadows.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章前面所述，我们的游戏场景可以有多个光源，我们可以启用或禁用对象投射或接收阴影的能力。在现实世界中我们有阴影，对于我们的Unity游戏来说，考虑哪些物体投射阴影以及哪些物体接收阴影是很重要的。
- en: 'The following screenshot shows the Mesh Renderer component of an object in
    the Inspector panel. Let''s review the key settings of this component:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了检查器面板中对象的网格渲染器组件。让我们回顾一下此组件的关键设置：
- en: '![](img/13a70f50-0219-4806-84bf-3b33d32695df.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/13a70f50-0219-4806-84bf-3b33d32695df.png)'
- en: 'Light Probes: It can be set to Blend Probes, Use Proxy Volume, or Off. You
    will most likely use the default Blend Probes for simple Unity games.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光探针：可以设置为混合探针、使用代理体积或关闭。对于简单的Unity游戏，你很可能会使用默认的混合探针。
- en: 'Reflection Probes: This setting can be turned off or set to Blend Probes, Blend
    Probes And Skybox, or Simple.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反射探针：此设置可以关闭或设置为混合探针、混合探针和天空盒或简单。
- en: 'Cast Shadows: This setting can be set to On, Off, Two-Sided, or Shadows Only.
    The default is On, so you should disable this for all objects that do not need
    to cast shadows.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 投影阴影：此设置可以设置为开启、关闭、双面或仅阴影。默认是开启，所以你应该为所有不需要投射阴影的对象禁用此设置。
- en: 'Receive Shadows: This setting is a toggle that tells Unity whether you want
    that object to receive shadows or not. As you would expect, this takes extra processing
    to display during the game. So, if you do not need an object to receive shadows,
    deselect this for greater performance.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接收阴影：此设置是一个切换，告诉Unity是否希望该对象接收阴影。正如你所期望的，这需要额外的处理来在游戏期间显示。因此，如果你不需要对象接收阴影，取消选择此选项以获得更好的性能。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored cameras and lighting. We started with a look at
    cameras that included perspectives, frustums, and Skyboxes. Next, we learned possible
    uses of multiple cameras in Unity games. We also covered the different types of
    lighting, explored reflection probes, and concluded with a look at shadows.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了摄像机和照明。我们从观察包括透视、视锥体和Skyboxes在内的摄像机开始。接下来，我们学习了Unity游戏中多个摄像机的可能用途。我们还涵盖了不同类型的照明，探讨了反射探针，并以观察阴影结束。
- en: In the next chapter, we will create 3D objects using Unity's native toolset.
    We will also import several objects into our game to complete our game environment,
    including the tree we made in [Chapter 4](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml),
    *Creating Our Terrain*.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用Unity的内置工具集创建3D对象。我们还将导入几个对象到我们的游戏中，以完成我们的游戏环境，包括我们在[第4章](04be4d7b-8c85-4d9e-baf2-43965183f99f.xhtml)中制作的树，*创建我们的地形*。
