["```cs\n    using UnityEngine;\n    using UnityEngine.XR.Management;\n    public class VRSetup : MonoBehaviour\n    {\n        void Start()\n        {\n            if (XRGeneralSettings.Instance == null)\n            {\n                Debug.LogError(\"XRGeneralSettings instance is\n                    null.\");\n                return;\n            }\n            if (XRGeneralSettings.Instance.Manager == null)\n            {\n                Debug.LogError(\"XR Manager is null.\");\n                return;\n            }\n            XRGeneralSettings.Instance.Manager.\n                 InitializeLoaderSync();\n            if (XRGeneralSettings.Instance.Manager.activeLoader ==\n                 null)\n            {\n                Debug.LogError(\"Initializing XR failed.\");\n            }\n            else\n            {\n                XRGeneralSettings.Instance.Manager\n                  .StartSubsystems(); \n                Debug.Log(\"XR Initialized.\");\n            }\n        }\n        void OnDisable()\n        {\n            if (XRGeneralSettings.Instance == null ||\n                XRGeneralSettings.Instance.Manager == null)\n            {\n                Debug.LogError(\"Cannot stop XR subsystems:\n                    XRGeneralSettings or XR Manager is null.\");\n                return;\n            }\n            XRGeneralSettings.Instance.Manager.StopSubsystems();\n            XRGeneralSettings.Instance.Manager.DeinitializeLoader();\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.Interaction.Toolkit;\n    public class GrabObject : MonoBehaviour\n    {\n        public XRBaseInteractable interactable;\n        void Start()\n        {\n            if (interactable == null)\n            {\n                Debug.LogError(\"Interactable is null. Please assign\n                    an XRBaseInteractable.\");\n                return;\n            }\n            interactable.onSelectEntered.AddListener(OnGrab);\n        }\n        void OnGrab(XRBaseInteractor interactor)\n        {\n            Debug.Log(\"Object grabbed!\");\n        }\n    }\n    ```", "```cs\nusing UnityEngine;\nusing UnityEngine.XR.ARFoundation;\nusing UnityEngine.XR.ARSubsystems;\npublic class ARSetup : MonoBehaviour\n{\n    private ARSession arSession;\n    private XROrigin xrOrigin;\n    void Start()\n    {\n        arSession = GetComponent<ARSession>();\n        xrOrigin = GetComponent<XROrigin>();\n        if (arSession == null)\n        {\n            Debug.LogError(\"ARSession component is missing.\");\n            return;\n        }\n        if (xrOrigin == null)\n        {\n            Debug.LogError(\"XROrigin component is missing.\");\n            return;\n        }\n        if (ARSession.state == ARSessionState.None)\n        {\n            arSession.enabled = true;\n        }\n    }\n}\n```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    using UnityEngine.XR.ARSubsystems;\n    public class ARSceneSetup : MonoBehaviour\n    {\n        private ARSession arSession;\n        private XROrigin xrOrigin;\n        private ARPlaneManager arPlaneManager;\n        void Start()\n        {\n            arSession = FindObjectOfType<ARSession>();\n            xrOrigin = FindObjectOfType<XROrigin>();\n            if (arSession == null)\n            {\n                Debug.LogError(\"ARSession component not found.\");\n                return;\n            }\n            if (xrOrigin == null)\n            {\n                Debug.LogError(\"XROrigin component not found.\");\n                return;\n            }\n            arPlaneManager = xrOrigin\n              .GetComponent<ARPlaneManager>();\n            if (arPlaneManager == null)\n            {\n                Debug.LogError(\"ARPlaneManager component not found on XROrigin.\");\n            }\n        }\n        void Update()\n        {\n            if (arPlaneManager != null &&\n                    arPlaneManager.trackables.count > 0)\n            {\n                Debug.Log(\"Planes detected.\");\n            }\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    using UnityEngine.XR.ARSubsystems;\n    using System.Collections.Generic;\n    public class ARInteraction : MonoBehaviour\n    {\n        public GameObject objectToPlace;\n        private ARRaycastManager arRaycastManager;\n        private List<ARRaycastHit> hits = new List<ARRaycastHit>();\n        void Start()\n        {\n            arRaycastManager = FindObjectOfType<ARRaycastManager>();\n            if (arRaycastManager == null)\n            {\n                Debug.LogError(\"ARRaycastManager component not\n                    found.\");\n            }\n        }\n        void Update()\n        {\n            if (arRaycastManager == null)\n            {\n                return; // Exit if arRaycastManager is not found\n            }\n            if (Input.touchCount > 0)\n            {\n                Touch touch = Input.GetTouch(0);\n                if (touch.phase == TouchPhase.Began)\n                {\n                    if (arRaycastManager.Raycast(touch.position,\n                           hits, TrackableType.PlaneWithinPolygon))\n                    {\n                        Pose hitPose = hits[0].pose;\n                        Instantiate(objectToPlace, hitPose.position,\n                            hitPose.rotation);\n                    }\n                }\n            }\n        }\n    }\n    ```", "```cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.Networking;\npublic class AssetBundleLoader : MonoBehaviour\n{\n    public string bundleURL;\n    public string assetName;\n    void Start()\n    {\n        if (string.IsNullOrEmpty(bundleURL) || string\n          .IsNullOrEmpty(assetName))\n        {\n            Debug.LogError(\"Bundle URL or Asset Name is not set.\");\n            return;\n        }\n        StartCoroutine(LoadAssetBundle());\n    }\n    IEnumerator LoadAssetBundle()\n    {\n        using (UnityWebRequest www =\n                 UnityWebRequestAssetBundle.GetAssetBundle(bundleURL))\n        {\n            yield return www.SendWebRequest();\n            if (www.result == UnityWebRequest.Result.Success)\n            {\n                AssetBundle bundle =\n                    DownloadHandlerAssetBundle.GetContent(www);\n                if (bundle != null)\n                {\n                    Object asset = bundle.LoadAsset(assetName);\n                    if (asset != null)\n                    {\n                        Instantiate(asset);\n                    }\n                    else\n                    {\n                        Debug.LogError($\"Error loading asset:\n                            {assetName}\");\n                    }\n                    bundle.Unload(false);\n                }\n                else\n                {\n                    Debug.LogError($\"Error loading AssetBundle:\n                        {www.error}\");\n                }\n            }\n            else\n            {\n                Debug.LogError($\"Error downloading AssetBundle:\n                    {www.error}\");\n            }\n        }\n    }\n}\n```"]