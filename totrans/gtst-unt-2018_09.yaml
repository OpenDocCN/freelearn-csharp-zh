- en: Adding a Heads-Up Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we configured our non-player character, the Cucumber Beetle,
    and reviewed its 11 animations. We significantly reconfigured the non-player character's
    animation controller. We also planned and wrote scripts to control the non-player
    character's in-game behaviors, which included patrolling, cucumber consumption,
    fighting on the ground, and fighting on hind legs. In addition, we added cucumber
    patches, cucumbers, and cherries to our game world.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will design, develop, and incorporate a **Heads-Up Display**
    (**HUD**) in our game. We will use a canvas to create text and graphics that provide
    visual indicators of points, health, and additional information to help the player
    maintain situational awareness during gameplay. We will also implement a mini-map
    using a Unity camera.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Designing our HUD
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with a canvas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a mini-map
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scripting for dynamic content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing our Heads-Up Display
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you will remember from [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml),
    *Designing the Game*, we determined that we would have six on-screen components:
    health, lives, score, cherries, cucumbers, and Cucumber Beetles. That design will
    now be modified to include a mini-map in the lower-right-hand corner of the screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/372e008e-8a7a-42e9-b442-654462b2a902.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that there will be seven components to our HUD, let''s review each of them,
    organized by region:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Top-left**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Player Health**: This will consist of a text label indicating *Health* and
    a health meter tied to the Cucumber Man''s health.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lives**: We will have a visual indication of the Cucumber Man''s remaining
    lives. The player will start with three lives.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Top-right**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Score**: We will add a text label indicating the score and then have the
    player''s actual score updated here.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cherries**: The number of cherries the Cucumber Man has will be updated and
    displayed here.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottom-right**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mini-Map**: This will be a mini-map that shows an overview of the game map
    with indicators of where the Cucumber Beetles are.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottom-left**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cucumbers**: We will include a text label, along with the number of cucumbers
    left in the game.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cucumber Beetles**: This final area of the HUD will feature a text label
    and the number of Cucumber Beetles left in the game.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a clear design for our HUD, we are ready to create it. Before
    you move on to the next section, you should open your Unity game project. Alternatively,
    you can download the `Starting-Chapter-09` Unity project available from the publisher's
    companion site.
  prefs: []
  type: TYPE_NORMAL
- en: Working with a canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Unity, we can use a canvas as a container for UI components. Canvases are
    GameObjects, and the UI components are the visual components we want on the screen
    during gameplay. In this section, we will create a canvas and then add and configure
    the necessary UI components to match our HUD's design from the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the canvas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are the steps for adding a canvas for our UI:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click in an empty area of the Hierarchy panel and select UI | Canvas.
    You can review the details of the canvas in the Inspector panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will note, in the Hierarchy panel, that Unity created an `EventSystem` when
    you created your canvas. This system is used to manage user input.
  prefs: []
  type: TYPE_NORMAL
- en: Change the new canvas GameObject's name from `Canvas` to `HUD_Canvas`. Using
    self-descriptive names for our GameObjects is considered good development practice.
    No other changes to any of the canvas properties are necessary.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding the health bar UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will create the UI components to display the Cucumber Man''s health:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
    This will create a text object subordinate to the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the text component as `Health_Label`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Slider.
    This will create a slider object subordinate to the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the slider component as `Health_Slider`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So far, we have created a canvas with text and slider components. Next, we
    will orient the UI components on the canvas to match the placement in our HUD
    design from the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, double-click the HUD_Canvas. This will focus the canvas
    in the Scene view, and this will give you an overview of how your canvas looks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, double-click the Health_Label. Now, you can see both
    the text and slider components we created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Zoom out until you can see the entire canvas in the Scene view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Toggle the 2D view on in the Scene view. This will make orientating our UI
    components on our canvas much easier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/befb6074-f83c-4f5c-b009-593f209f10cb.png)'
  prefs: []
  type: TYPE_IMG
- en: Ensure that the Health_Label is selected in the Hierarchy panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, change the Text value of the Text (Script) component
    to `Health`. See the following screenshot for details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41fbe239-3c53-4828-a1fa-922d72aab249.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag the Health_Label to the top-left corner of the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Text (Script) component, make the following changes, or select other
    settings to your liking. You can experiment with the game in game-mode to see
    how this will look during the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Property** | **Value** |'
  prefs: []
  type: TYPE_TB
- en: '| Font | Arial |'
  prefs: []
  type: TYPE_TB
- en: '| Font Style | Bold |'
  prefs: []
  type: TYPE_TB
- en: '| Font Size | 16 |'
  prefs: []
  type: TYPE_TB
- en: '| Color | Dark Blue |'
  prefs: []
  type: TYPE_TB
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    of your Health_Label UI text component so that there is not excessive blank space
    above, below, or to the right of the text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Relocate the Health_Slider so that it is immediately to the right of the Health_Label
    text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector panel, make the following changes to the  Slider (Script)
    component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deselect the Interactable checkbox
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the Max Value to `100`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Select the Whole Numbers checkbox
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the Hierarchy panel, expand the Health_Slider object to reveal the subordinate
    parts as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e203a08-112e-41b1-82c0-232c94818852.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider | Background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, select Image (Script) | Color  and change the color
    to red. This will serve as our health meter's background.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider | Fill Area | Fill.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, select Image (Script) | Color  and change the color
    to green. This will serve as our health meter's fill area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The final two steps for our health meter will be to increase the height and
    to remove the slider handle:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, select Rect Transform | Height and change the height
    to `30`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider | Handle Slide Area | Handle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deselect the Image (Script) component. This will remove the slider's handle
    from the UI.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, adjust the Health_Label and Health_Slider so that they are
    aligned with each other in the top-left-hand corner of the canvas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your finished work should look similar to the following screenshot from the
    Game view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/decb2c42-f444-43b7-b4b9-b089d5acd41f.png)'
  prefs: []
  type: TYPE_IMG
- en: Make any necessary adjustments before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Lives Remaining UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will add three images of the Cucumber Man''s head beneath
    the health label and meter, each image representing a life remaining:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `cmLives.png` file from the publisher's website
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag that image into the `Assets` | `Cucumber Man` folder in the Project panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the imported image and, in the Inspector panel, change the Texture Type
    to Sprite (2D and UI)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, right-click the `HUD_Canvas` and select UI | Image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the small circle to the right of the setting under Image
    (Script) | Source Image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `cmLives.png` image you added in step 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, rename this image as `Life1`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Rect Transform | Scale  and change the scale of Life1 to `0.4` for X,
    Y, and Z
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the Life1 image so that it is directly preceding
    the health label
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, right-click and duplicate Life1 twice, and rename the
    copies `Life2` and `` `Life3` ``
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the three images so that they are in sequential
    order and aligned in a visually pleasing manner
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your finished work should look similar to the following screenshot from the
    Game view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/909e1b99-777a-4171-ab08-ea14918c7618.png)'
  prefs: []
  type: TYPE_IMG
- en: Make any necessary adjustments before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the scoring UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The upper-right corner of our game''s interface and canvas, will contain the
    scoring information. This section demonstrates how to create the necessary UI
    components:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
    We will use this text object for our score label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the text component as `Score_Label`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, change the Text value of the Text (Script) component
    to `Score`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Text (Script) component, make the following changes or select other
    settings as you wish. You can experiment with the game in game mode to see how
    this will look during the game:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Font Style: Bold'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Font Size: 16'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Color: Dark Blue'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Either in the Inspector panel or in Scene view, resize the rectangle encasing
    your `Score_Label` UI text component so that there is no excessive blank space
    above, below, or to the right of the text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
    We will use this text object to display the current score.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the text component as `Score_Value`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, change the Text value of the Text (Script`)` component
    to `000000000`. This will help us determine the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either in the Inspector panel or in Scene view, resize the rectangle encasing
    your `Score_Value` UI text component so that there is no excessive blank space
    above, below, or to the right of the text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat step 4 for the `Score_Value` text component.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you have the two score-related UI text components have been added to
    your canvas, you are ready to reposition them on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In the Scene view, adjust the Score_Label and Score_Value text objects so that
    their rect transform is sized to encase the text values
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Lastly, reposition the two text objects in Scene view so that they are aligned
    with each other in the top-right corner of the canvas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Your finished work should look similar to the following screenshot from the
    Game view.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8d09c2e2-5c57-4768-b2f4-6c9a493593cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Make any necessary adjustments before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the cherry UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will add an image of cherries and a text object for displaying
    the number of cherries the Cucumber Man has.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start by adding the cherry image:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the `Cherries.png` file from the publisher's website
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag that image into the `Assets` | `Cherry` folder in the Project panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the imported image and, in the Inspector panel, change the Texture Type
    to Sprite (2D and UI)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Hierarchy panel, right-click the HUD_Canvas and select UI | Image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the small circle to the right of the setting under Image
    (Script) | Source Image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Cherries.png` image you added in step 2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, rename this as `Cherries`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click  Rect Transform | Scale and change the scale of Cherries to `0.4` for
    x, y, and z
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the Cherries image directly below the start of
    the Score_Value text object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will add the text object to hold the cherry count:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the text component as `Cherries_Count`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, change the Text value of the Text (Script) component
    to `0000`. This will help us determine the layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Text (Script) component, change the Font Style to Bold, the Font Size to
    16, and the Color to Red, or select other settings to your liking.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your `Cherries_Count` UI text component so that there is no excessive blank space
    above, below, or to the right of the text.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the `Cherry_Count` text object to the right of
    the `Cherries` image object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your finished work should look similar to the following screenshot from the
    game view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/918bb5e8-c3cc-4868-b076-9c715d412bca.png)'
  prefs: []
  type: TYPE_IMG
- en: Make any necessary adjustments before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the cucumber and Cucumber Beetle UI components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will add four UI text components to the lower-left-hand
    corner of our canvas. These text components will be used for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber count value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber Beetles label
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cucumber Beetles count value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point, you should be comfortable with adding UI text components to
    your canvas, so this section will be brief. Feel free to consult previous sections
    to review the steps involved:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a text object for the cucumber label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the text component as `Cucumbers_Label`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Text value of the Text (Script) component to Cucumbers
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Text (Script) component, change the Font Style to Bold, the Font Size to
    16, and the Color to Blue
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your Cucumbers_Label UI text component so that there is no excessive blank space
    above, below, or to the right of the text
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the Cucumbers_Label text object to reflect the
    HUD design from earlier in this chapter
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a text object for the Cucumber Beetles label:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas | Cucumbers_Label GameObject in the Hierarchy panel
    and select Duplicate
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicated text component to `Beetles_Label`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Text value of the Text (Script) component to `Cucumber Beetles`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your Beetles_Label UI text component to ensure it is wide enough to display the
    entire text
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the Beetles_Label text object to reflect the HUD
    design from earlier in this chapter
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a text object for the cucumber count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas | Cucumbers_Label GameObject in the Hierarchy panel
    and select Duplicate
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicated text component as `Cucumber_Count`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Text value of the Text (Script) component to `0000`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your Cucumber_Count UI text component so that there is no excessive blank space
    above, below, or to the right of the text
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Text (Script) component, change the Color to Red
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the Cucumber_Count text object to reflect the
    HUD design from earlier in this chapter
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a text object for the Cucumber Beetle count:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas | Cucumber_Count GameObject in the Hierarchy panel
    and select Duplicate
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicated text component as `Beetle_Count`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, reposition the Beetle_Count text object to reflect the HUD
    design from earlier in this chapter
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your finished work should look similar to the following screenshot from the
    Game view:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3fe5aef5-ed93-4ab8-a8a1-62d6620ae858.png)'
  prefs: []
  type: TYPE_IMG
- en: Make any necessary adjustments before moving on to the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a mini-map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 5](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml), *Lights, Cameras,
    and Shadows*, you learned about how to use cameras for mini-maps. In this section,
    we will implement a mini-map for our game. This mini-map will provide a top-down
    view of our game, centered on the sandbox area you created in [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing
    Our Non-Player Character*. The player can use this mini-map as a radar to help
    find Cucumber Beetles in the sandbox.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to turn the Scene view 2D toggle off. This will put the Scene
    view back into 3D mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps for creating a mini-map in our game:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on an empty area of the Hierarchy panel and select Camera
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `camera` as `Camera_Minimap`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the Camera_Minimap camera in the Hierarchy panel to focus on that
    object in the Scene view
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Transform | Rotation | X value to `90`, so it is looking at the ground
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, use the transform tools to position the camera so that it
    covers your sandbox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use the Camera Preview to help determine what will be visible during
    gameplay
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows a Camera Preview that covers the entire sandbox
    area, bordered with white rectangular walls:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9a14312f-572e-44ad-8fbf-e52938cfabc8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now that the Camera_MiniMap camera has been added to our scene, we need to
    ensure it is not treated like our main camera. Here are the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project panel, under Assets, right-click the `Textures` folder and select
    Create | Render Texture
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new render texture `Render_Texture_Minimap`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Camera_Minimap camera in the Hierarchy panel
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the small circle to the right of the Camera |
    Target Texture property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Render_Texture_Minimap` texture you created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The minimap camera is now properly configured. Our next set of steps require
    us to modify our HUD_Canvas. We will accomplish this with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, drag the Camera_Minimap object so that it is subordinate
    to the HUD_Canvas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the HUD_Canvas and select UI | Raw Image
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new raw image UI component as `RawImage_Minimap`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the small circle to the right of the Raw Image
    (Script) | Texture property
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Render_Texture_Minimap` texture you created
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Toggle the Scene view 2D toggle on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click the HUD_Canvas in the Hierarchy panel, then zoom in so you can
    see a close-up of the canvas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Relocate the RawImage_Minimap so that it is in the lower-right-hand corner of
    the canvas
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the Rect Transform | Scale to `2` for X, Y, and Z
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You are now ready to test your game in game mode. You should see the mini-map
    in the bottom-right-hand corner of the screen, illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cc8baf32-3c0a-4f04-ac74-a5c10fb0b0d4.png)'
  prefs: []
  type: TYPE_IMG
- en: You can use this mini-map as a great starting point as you work to refine how
    it looks in the game. Some options for refinement include giving the mini-map
    more contrast with the game world and showing red dots for Cucumber Beetles instead
    of only showing the entire terrain.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting for dynamic content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that your HUD has been completed, it is time to consider how the information
    on the HUD is updated. The following elements of our HUD require scripting so
    that they are dynamically updated during the game:'
  prefs: []
  type: TYPE_NORMAL
- en: Cucumber Man's health
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of Cucumber Man lives remaining
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Points
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of cherries in Cucumber Man's inventory
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of cucumbers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Number of Cucumber Beetles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will lay the groundwork for updating the HUD information.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting the cucumber count
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s start with our cucumber count:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Hierarchy panel, select HUD_Canvas | Cucumber_Count
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Inspector panel, click the Add Component button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select New Script and name the script `CucumberManager`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the script
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the script open, make the necessary modifications to match the script
    provided, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, we are using the `UnityEngine.UI` namespace. Inside the `CucumberManager`
    class, we declare three variables, establish an initial count of zero in the `Awake()`
    method, and then count the amount of cucumbers every frame in `Update()`, providing
    an on-screen update of the number of cucumbers left in the game. The ease with
    which we were able to program this was partially due to our assigning of the `Cucumber`
    tag to all of our cucumbers.
  prefs: []
  type: TYPE_NORMAL
- en: Scripting the beetle count
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you might imagine, the script for counting beetles will be very similar
    to the method we used for counting cucumbers. This time, we will add a `BeetleManager`
    script to our `Beetle_Count` UI component. Here is the required script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This code is very similar to our `CucumberManager` script. The only difference
    is the GameObject tag and our variable names.
  prefs: []
  type: TYPE_NORMAL
- en: If this script does not work for you, ensure that your beetles are assigned
    the `Beetle` tag.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining scripting of our HUD will be accomplished in subsequent chapters. In
    [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our Points
    System,* we will write scripts for the points and number of cherries in Cucumber
    Man's inventory. In [Chapter 11](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml),
     *Scripting Victory and Defeat*, we will write the necessary scripts to update
    the health slider and the number of Cucumber Man lives that remain.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to save your Unity scene and project!
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we designed, developed, and incorporated a HUD in our game.
    We used a canvas GameObject to create text and graphics that provide visual indicators
    of points, health, and additional information to help the player maintain situational
    awareness during gameplay. In addition to this, we wrote scripts to update key
    components of the HUD. We also implemented a mini-map using a Unity camera.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we will design, script, and implement our game's point system.
    This will include providing frame-by-frame updates to key on-screen components
    of the game's HUD.
  prefs: []
  type: TYPE_NORMAL
