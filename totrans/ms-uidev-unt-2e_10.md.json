["```cs\nusing UnityEngine.UI;\n```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class AddSprite : MonoBehaviour {\n     Image theImage;\n     public Sprite theSprite;\n     void Awake(){\n          theImage = GetComponent<Image>();\n     }\n     void Start () {\n          theImage.sprite = theSprite;\n          theImage.preserveAspect = true;\n     }\n}\n```", "```cs\nvoid Update () {\n     if (Input.GetButtonDown(\"Submit\")){\n          Debug.Log(\"You pressed a submit key/button!\");\n     }\n}\n```", "```cs\nvoid Update () {\n     float horizontalValue = Input.GetAxis(\"Horizontal\");\n     if (horizontalValue != 0){\n          Debug.Log(\"You're holding down a horizontal button!\");\n     }\n}\n```", "```cs\nvoid Update () {\n     if (Input.GetKeyDown(KeyCode.Alpha8)){\n          Debug.Log(\"You pressed the 8 key for some reason!\");\n     }\n}\n```", "```cs\nvoid Update () {\n     if (Input.GetMouseButtonDown(2)){\n          Debug.Log(\"You pressed the middle mouse button!\");\n     }\n}\n```", "```cs\ntransform.Translate(Input.acceleration.x, 0, -Input.acceleration.y);\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.EventSystems;\npublic class ClassName : MonoBehaviour, InterfaceName{\n     public void EventName(EventDataTypeName eventData){\n          //what happens after event triggers\n     }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nusing UnityEngine.EventSystems;\npublic class ClassName : MonoBehaviour, IPointerEnterHandler\n     public void OnePointerEnter(PointerEventData eventData){\n         //what happens after the event triggers\n     }\n}\n```", "```cs\n    using System.Collections;\n    using System.Collections.Generic;\n    using UnityEngine;\n    public class ShowHidePanels : MonoBehaviour {\n        public CanvasGroup inventoryPanel;\n    }\n    ```", "```cs\n    bool inventoryUp = false;\n    ```", "```cs\n    using System;\n    ```", "```cs\n    public void TogglePanel(CanvasGroup Panel, bool show)\n    {\n        Panel.alpha = Convert.ToInt32(show);\n        Panel.interactable = show;\n        Panel.blocksRaycasts = show;\n    }\n    ```", "```cs\n    void Start () {\n        TogglePanel(inventoryPanel, inventoryUp);\n    }\n    ```", "```cs\n    void Update () {\n        //inventory Panel\n        if(Input.GetKeyDown(KeyCode.I)){\n        }\n    }\n    ```", "```cs\n    void Update()\n    {\n        // Inventory Panel\n        if (Input.GetKeyDown(KeyCode.I))\n        {\n            inventoryUp = !inventoryUp;\n            TogglePanel(inventoryPanel, inventoryUp);\n        }\n    }\n    ```", "```cs\n    public CanvasGroup pausePanel;bool pauseUp = false;\n    ```", "```cs\n    TogglePanel(pausePanel, pauseUp);\n    ```", "```cs\n    // pause Panel\n    if(Input.GetButtonDown(\"Pause\")){\n         pauseUp = !pauseUp;\n         TogglePanel(pausePanel, pauseUp);\n    }\n    ```", "```cs\n    // pause Panel\n    if(Input.GetButtonDown(\"Pause\")){\n         pauseUp = !pauseUp;\n         TogglePanel(pausePanel, pauseUp);\n         Time.timeScale = Convert.ToInt32(pauseUp);\n    }\n    ```", "```cs\n    if(Input.GetKeyDown(KeyCode.I) Inventory Panel cannot be activated or deactivated. If the Inventory Panel is activated when the Pause Panel is already up, it cannot be deactivated until after the game is unpaused.\n    ```", "```cs\n    using UnityEngine.UI;\n    ```", "```cs\n    public GameObject dragItem;¶public Canvas dragCanvas;\n    ```", "```cs\n    public void StartDrag(GameObject selectedObject){\n        dragItem = Instantiate(selectedObject, Input.mousePosition, selectedObject.transform.rotation) as GameObject;\n        dragItem.transform.SetParent(dragCanvas.transform);\n        dragItem.GetComponent<Image>().SetNativeSize();\n        dragItem.transform.localScale = 1.1f * dragItem.transform.localScale;\n    }\n    ```", "```cs\n    public void Drag(){\n         dragItem.transform.position = Input.mousePosition;\n    }\n    ```", "```cs\n    public void StopDrag(){\n         Destroy(dragItem);\n    }\n    ```", "```cs\n    public void Drop(Image dropSlot){\n         GameObject droppedItem = dragCanvas.transform.GetChild(0).gameObject;\n         dropSlot.sprite = droppedItem.GetComponent<Image>().sprite;\n    }\n    ```", "```cs\n    dragItem.GetComponent<Image>().raycastTarget = false;\n    ```", "```cs\n    void HandleMouse() {\n         if (Input.GetMouseButtonDown(0)) {\n              lastPanPosition = Input.mousePosition;\n         } else if (Input.GetMouseButton(0)) {\n              PanCamera(Input.mousePosition);\n         }\n         float scroll = Input.GetAxis(\"Mouse ScrollWheel\");\n         ZoomCamera(scroll, zoomSpeedMouse);\n    }\n    ```", "```cs\n    switch(Input.touchCount returns how many *fingers* are currently touching the screen.\n    ```", "```cs\n    Touch touch = Input.GetTouch(0);\n    if (touch.phase == TouchPhase.Began) {\n         lastPanPosition = touch.position;\n         panFingerId = touch.fingerId;\n    } else if (touch.fingerId == panFingerId && touch.phase == TouchPhase.Moved) {\n         PanCamera(touch.position);\n    }\n    ```", "```cs\n    Vector2[] newPositions = new Vector2[]{Vector2 array. It then uses some fancy vector math to see whether the fingers are getting closer to each other or further away from each other, creating a pinch-to-zoom effect.\n    ```", "```cs\n    Vector3 offset = theCamera.DragCamera() and StopCameraDrag() methods, so it will know when to get the inputs. We’ll do this with Event Triggers on the Background Canvas. Add an Background Canvas with the following events:\n    ```", "```cs\n    CameraHandler cameraHandler;\n    ```", "```cs\n    void Awake() {¶    cameraHandler = GetComponent<CameraHandler>();¶}\n    ```", "```cs\n    if (inventoryUp || pauseUp)\n    {\n        cameraHandler.TurnOffPanAndZoom();\n    }\n    else\n    {\n        cameraHandler.TurnOnPanAndZoom();\n    }\n    ```"]