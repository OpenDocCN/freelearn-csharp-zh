- en: Scoping a Game Project
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll teach you the concepts and relationships between a game's
    overall scope, its structure, and its content. We'll explore real-world examples
    and help you build an understanding of how to better document the size, complexity,
    and dependencies in your game, as well as to help you estimate your tasks.
  prefs: []
  type: TYPE_NORMAL
- en: The game's scope is a term used to define the project's perceived size and complexity.
    Without knowing the scope in advance, any production scheduling, costing, and
    staffing would be nigh on impossible. The scope is usually well defined by the
    time you wrap up the first version of the game design document.
  prefs: []
  type: TYPE_NORMAL
- en: As a game designer working on establishing the initial scope, it's your responsibility
    to list all of the game's features, functionalities, and systems, as well as to
    approximate the entirety of the game's content. This includes the quantity and
    complexity of gameplay mechanics, playable levels, missions, cutscenes, storylines
    and dialog, sound effects and music, playable and unplayable characters, weapons,
    power-ups, items, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Once the project enters production, you're likely to keep using your scoping
    expertize whenever you work on a new feature proposal or design revision.
  prefs: []
  type: TYPE_NORMAL
- en: It's always good to make sure your ideas are not too costly or beyond the possibilities
    of the technology or the team (constraints can channel and boost your creativity)
    but do not overthink the scope too early! Writing down the scope only makes sense
    once the structure and core gameplay ideas are well defined.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Beware of feature creep! Sometimes less is more; deciding what to remove is
    harder but more important than dreaming of new features. The term feature creep
    is often used when describing scenarios (or even whole projects) in which we attempt
    to resolve our problems and make the game more compelling by adding more and more
    features and content, rather than working out the issues living deep within the
    base game systems and mechanics. Knowing what to keep and what to cut is an essential
    skill for any game designer. Changes on paper and during prototyping are the easiest
    and cheapest to make. Don't be afraid to propose cuts early on, as later may end
    up being too late.
  prefs: []
  type: TYPE_NORMAL
- en: After the first drafts of the GDD (game design document) and TDD (technical
    design document, usually maintained by the lead developer) are finalized, the
    representatives of various disciplines from your team and studio will be able
    to estimate the amount of time needed to deliver on the project. This, in turn,
    allows the producer to create and agree upon the schedule and budget.
  prefs: []
  type: TYPE_NORMAL
- en: Since game development is highly unpredictable, you can expect the scope and
    estimations to be frequently revised and a 20-40% uncertainty buffer added to
    each estimation (some people go as far as to double their initial estimates).
  prefs: []
  type: TYPE_NORMAL
- en: On a side note, it's important to acknowledge that in certain projects you could
    deal with continuous iteration. This means that your scope will stay relatively
    undefined and flexible for the duration of the project. Such scenarios are rare,
    require clear short-and mid-term objectives, and should not become an excuse to
    generate an unsustainable amount of work for yourself or others. After all, even
    if time and resources are not an issue, you rarely want to spend ten years on
    a single game, only to have the entire industry move towards a different direction,
    distribution platform, and technology.
  prefs: []
  type: TYPE_NORMAL
- en: Game structure
  prefs: []
  type: TYPE_NORMAL
- en: To have any chance of scoping and sizing your game accurately, you first need
    to define its structure. For the purpose of this book, the structure refers to
    the way different segments of the game all link together and the journey players
    take during play.
  prefs: []
  type: TYPE_NORMAL
- en: With the structure defined, it becomes much easier to divide the game into independent
    sections and assess the size, complexity, and dependencies of various parts of
    your game.
  prefs: []
  type: TYPE_NORMAL
- en: As a designer, you need to decide on the player's journey and the experience
    you're offering. Do you foresee a single predestined path through your game? Is
    it branching? Or perhaps you only want to provide the players with various tools
    and let them take things from there? Is the experience designed to be highly replayable,
    or is it simply a puzzle to solve or a fixed story to be told and experienced?
    Answering these questions will tell you a lot about the structure of the game
    you're making.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: The structure of games not only depends on the desired gameplay experience,
    but also on the applied business model.
  prefs: []
  type: TYPE_NORMAL
- en: Video games might have found popularity in arcades, but they soon made their
    way into our homesâ€”filling them with dedicated consoles and adding to the reasons
    for owning a PC. Most games gradually drifted away from high score-driven challenges
    and sports-like competitions, and towards more defined experiences that told a
    story or posed a challenge that can be solved, mastered, and exhausted. Limited
    replay value was not necessarily an outcome of basic game mechanics, but rather
    of a desire to raise the quality of games, control their difficulty with predefined
    challenges, and thoroughly utilize all assets and playable content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finite experiences provided by console and PC titles not only made for more
    balanced games, they were also perfectly in sync with the available business model:'
  prefs: []
  type: TYPE_NORMAL
- en: Buy a new game
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finish the game
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Buy another game
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In such a world, having a product with incredibly high replay value might have
    been used to generate word-of-mouth recommendations, but was not particularly
    good for long-term business. Nowadays, thanks to a highly competitive market,
    improved digital delivery methods, and the possibility of monetizing customers
    repeatedly, we have highly connected games that often offer endlessly replayable
    experiences, deep multiplayer interactions, and a huge variety of user-generated
    content. Some argue that games were better in the old days; I'd say they were
    definitely simpler to produce...
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways of dissecting and classifying video games. Many products
    blur the lines with their expansive game modes and complex structures. Before
    we delve into some examples, we'll need to take a peek at some of the most common
    terms and tools used when planning the game's structure, its relationship with
    content, and the effects of individual decisions on the scope and lifetime of
    the end product.
  prefs: []
  type: TYPE_NORMAL
- en: Game content
  prefs: []
  type: TYPE_NORMAL
- en: In the context of scope and structure, game content refers to games that are
    designed to be experienced (or consumed). This would include things such as game
    levels, items, characters, abilities, vehicles, achievements, weapons, missions,
    and storylines. Since the main gameplay mechanics and rules are the essential
    foundations upon which everything is built, you generally do not treat them as
    parts of the game content. Instead, you focus on anything that builds upon your
    foundations, adds value, and increases the lifetime of your game.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of a simple racing title, the content would include all of the tracks,
    cars, and car parts (including cosmetic items such as paint colors and stickers
    you can put on your car), as well as the breadth of available game modes (such
    as time-trial, single-race, tournament, multiplayer head-to-head, and so on).
    Sounds, music, and the story would also be included, but these components are
    admittedly less likely to make or break the product. After all, it's safe to assume
    that many players will quickly lose interest once they master the game mechanics
    and familiarize themselves with all tracks, cars, and modes, no matter how much
    story and music we put into the product.
  prefs: []
  type: TYPE_NORMAL
- en: 'A game designer is often faced with important decisions on the relationships
    between rules and content. Try to look well ahead and predict the areas that might
    change and expand. Think carefully about the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: Is everything hand-crafted by the development team? Or will you use randomization
    and/or procedural generation?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Will you expand game content after the game is released? Which parts? How often
    and to what extent?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you plan to use user-generated content? How will you ensure its quality?
    How will you moderate it?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: That's a lot to think about, so let's unpack the content-specific terminology
    and help you answer these questions!
  prefs: []
  type: TYPE_NORMAL
- en: Always disclose your intentions within the design specification of each game
    feature. Let's say you're working on a collection feature. Not knowing that the
    initial set of 10 collectible items will be later expanded to 100 can have very
    dangerous consequences. The entire user interface around the feature might need
    to be remade and the code for creating, storing and displaying these items rewritten.
    In a sample scenario with only 10 items, your User Interface designer may opt
    for using large, animated objects, but as soon as that number grows to 100 the
    inventory becomes hard to navigate and the game's performance suffers and all
    because the rest of the team were not prepared to support your final intentions.
    The art assets themselves might even go through an entirely different (and more
    systemic) pipeline once the aspirations for a large quantity are known. You could
    even end up using an art outsourcer or automating large parts of the creation
    and implementation processes!
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Content burn
  prefs: []
  type: TYPE_NORMAL
- en: As players interact with your game, they will not only gain mastery over game
    mechanics and systems, they will also grow more familiar with the contents of
    your game. Humans love to learn, and good learning opportunities are rewarded
    with feelings of accomplishment and satisfaction. We easily get excited by anything
    newâ€”a fresh challenge, an untold story, an undiscovered land. While this part
    of the human condition leads to our players seeking out and enjoying our games,
    it also leads to them being bored by repetitive and unchallenging tasks or familiar
    stories. Boredom is what we try to avoid, and unfortunately for we designers,
    people are as good at learning as they are at spotting patterns. The same brain
    that can spot animals in the shapes of clouds, or a human face within a picture
    of a Martian rock, will be exposed to seeing your gameâ€”often for hours on end.
    The sole act of exposure to the same set of 3D props and art pieces used to create
    a seemingly unique dungeon will lead to a feeling of fatigue and boredom. The
    same fate befalls any content that players interact with repeatedly, including
    mechanics and systems that do not seem to hold any secrets and potential learning.
    All of this means that our players don't just enjoy the content of our games,
    they burn through it, permanently diminishing its value.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding content furnace
  prefs: []
  type: TYPE_NORMAL
- en: The term content furnace is often used when describing games that heavily rely
    on fresh content to sustain the interest of their players.
  prefs: []
  type: TYPE_NORMAL
- en: There's nothing wrong with creating highly focused, hand-crafted stories, but
    unless you're consciously aiming to deliver an experience with highly limited
    replay value, you'll have to plan for ways to keep the game seem fresh for longer.
    There are several ways in which you can limit content burn (or increase the amount
    of content to burn through) and hopefully keep your players' interest for longer.
  prefs: []
  type: TYPE_NORMAL
- en: Depth and possibility space
  prefs: []
  type: TYPE_NORMAL
- en: You have probably heard about some games being described as deep. Depth in this
    context means that a game has a lot of complex systems and interesting choices
    hidden beneath the surface. Remember hearing about games that are easy to learn
    but hard to master? This cliche refers to a perfect-world scenario in which a
    game is accessible and understandable, yet filled with intricacies that take years
    of practice and offer near limitless replay value.
  prefs: []
  type: TYPE_NORMAL
- en: To create a game with a wide possibility space is to create a game with potentially
    endless combinations of interesting and unique scenarios to explore. Do games
    like that exist? Wouldn't they require an enormous amount of content to begin
    with? The answers are yes and no.
  prefs: []
  type: TYPE_NORMAL
- en: Think of classic games such as Chess or Go, these games rely entirely on their
    elegant rule sets. These rules enable an incredibly deep set of gameplay scenarios
    that can entertain players for years. There are 20 ways in which you can open
    up a game of Chess. By the time your opponent responds, the number of possible
    board states skyrockets to 400â€”each being more or less a valid and meaningful
    move. These games rely not on supplying new content but on the availability of
    interesting move sets and challenging opponents to play against (you can play
    chess against an AI, but it's arguably much less fun without a human opponent).
    You can say that, through a wide possibility space provided by the rules, these
    games have avoided becoming a content furnace.
  prefs: []
  type: TYPE_NORMAL
- en: 'Does that translate into modern video games? Yes, it does! At the time of writing
    of this book, I have amassed over 2,000 hours of playtime in DOTA2, Valve''s famous
    MOBA (multiplayer online battle arena), not to mention several years spent playing
    League of Legends beforehand. In these games, the level design stays largely fixed.
    It becomes an unchanging avenue for the moment-to-moment displays of skill, short-term
    decisions, and long-term strategy. These are games that achieve replayability
    via deep choices and a wide possibility space, an outcome of:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Interconnected content that creates millions of combinations:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large number of playable characters with unique abilities. Given that these
    games are played in teams of five, the number of possible team combinations is
    enormous.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A large number of items to purchase in-game that can have a meaningful impact
    on your character's (and your team's) performance.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rules and mechanics that test a variety of skills:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Physical skill tests such as timing, aiming, and reaction times
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tactics and short-term decision-making, including environmental awareness, item
    and skill development decisions and enemy movement prediction
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The long-term strategy, often based on spotting play-patterns and predicting
    enemy team behavior
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Communication, coordination, and leadership
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The challenge and satisfaction of playing against human opponents. These games
    wouldn't be as engaging and popular if they were played against AI opponents.
    It's incredibly difficult to create effective but seemingly natural AI opponents,
    and even harder to have them work together and make interesting choices.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An ever-changing metaâ€”the way in which the game is being played by the community
    evolves with the game itself. If a certain strategy becomes dominant, the community
    naturally evolves by learning to expect and counter it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I am just scratching the surface of what makes these two games replayable,
    though now you may be wondering do I need 100 items and 100 characters to create
    a replayable game? The short answer is no, you don''t! The slightly longer answer
    is, look at games such as Rocket Leagueâ€”a game that could be described as football
    played with cars. The rules and victory conditions are simple and elegant: get
    the ball to the enemy goal by hitting it with your car. The amount of content
    required for this gameplay to work is impressively smallâ€”one arena, one car, a
    boost pad, and a ball. The game is played in small teams (from 2 to 4 players
    per team), where each player controls a single car that drives in a familiar way,
    but players can also jump and steer their car in the air and use a rocket boost
    to propel themselves. Hit the ball with your car and try to get it to the opponent''s
    goal andâ€¦ that''s it! Simple, right? Yet, for many, the replayability is through
    the roof! The way Rocket League achieved its elusive easy-to-learn, hard-to-master
    status is all down to the simplicity of the rules paired with the incredibly high
    skill ceiling of precisely controlling the movements of your car in relation to
    the ball and each of the surrounding players. It''s a highly kinetic game where
    great timing and team play are absolutely essential.'
  prefs: []
  type: TYPE_NORMAL
- en: Even though the human factor can hugely help in providing fresh challenges,
    depth and a wide possibility space are not exclusive to multiplayer arena games.
    Think of strategy games such as Sid Meier's Civilization and the Total War series,
    or simulations such as SimCity and Dwarf Fortress. One could argue that even if
    you removed most of the visual assets and reduced the amount of content, the effect
    of interactions between the player and the systems powering the game could still
    provide dozens of hours of fun, filled with interesting decisions and engaging
    outcomes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating deep games is a very difficult craft and can take more time and expertize
    than crafting heaps of content surrounded by more shallow mechanics. As you increase
    the number of combinations and possibilities within your core gameplay mechanics,
    you expose your systems to a range of extreme (and potentially game-breaking)
    scenarios. Before you add any new rule or feature in the hopes of extending the
    game's lifespan/depth/complexity, your team will need to make a set of important
    decisions. Widening the possibility space can (and almost surely will) bring currently
    unforeseen consequences. Will you have the time to explore these new options?
    How certain are you that the new addition will be a positive one and make the
    game more fun to play for longer? Would your time be better spent by simply adding
    more consumable content to the already working systems?
  prefs: []
  type: TYPE_NORMAL
- en: Weâ€™ll delve into ways of creating engaging mechanics and broadening your possibility
    space in later sections of the book; for now, let's look at other ways of limiting
    your content burn!
  prefs: []
  type: TYPE_NORMAL
- en: Randomization and procedural generation
  prefs: []
  type: TYPE_NORMAL
- en: Randomization and procedural generation are two interconnected terms. While
    randomization is mainly concerned with the application of chance-based mechanics
    (think card shuffling, critical hit chance, and randomized loot drops), procedural
    generation is focused on creating new content based on carefully crafted rules.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s focus on looking at the effects of randomization first!
  prefs: []
  type: TYPE_NORMAL
- en: To be effective at prolonging your game's lifespan, randomization has to be
    constrained and applied in a careful, deliberate way. If done right, it can add
    thrills and make the game slightly less predictable, without undermining the player's
    ability to plan ahead. Do it badly and you'll end up with an unplayable mess where
    player actions seem to have little influence over the end result and it's impossible
    to predict and prepare for what's going to happen next.
  prefs: []
  type: TYPE_NORMAL
- en: Anything that becomes randomized is at risk of making the game rules less understandable,
    as well as breaking the balance of the game (making it either too easy or impossible
    to win). Moreover, due to negativity bias, most humans pay significantly more
    attention to negative outcomes of randomization than to positive ones. This means
    that fully randomized effects can lead to players feeling cheated by the game
    and losing the sense of agency.
  prefs: []
  type: TYPE_NORMAL
- en: 'A fellow designer, Keith Burgun, makes interesting points on randomness that
    are worth sharing at [`https://www.youtube.com/watch?v=2qfFEP_-LkI`](https://www.youtube.com/watch?v=2qfFEP_-LkI).
    Keith distinguishes between two types of randomness: input randomness and output
    randomness. Input randomness is described as one that informs playerâ€™s decisions,
    for example, map generation. Players cannot affect or predict it in advance, but
    will able to make decisions based on what they''ve been served. On the other hand,
    we have output randomness, which defines the outcome of a player''s actions, for
    example, a die roll that determines whether the action (which you''ve already
    committed to) was successful or not. Be very careful when you inject your game
    with output randomness! The feedback on the player''s actions can become confusing
    and may limit satisfaction from performing good decisions, as well as the opportunity
    to learn from one''s mistakes. A valid move can be met with a failed result, while
    a mistake on the player''s part could yield a positive outcome.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: There are many great examples of using randomization. Some games use it to prolong
    the lifespan of the game's content; others put it at the heart of their game mechanics.
    Card games such as Magic The Gathering or Hearthstone would lose most of their
    appeal if the decks always produced the cards in a predefined sequence. As for
    Hearthstone itself, the designers have added a wide selection of cards that provide
    randomized effects after they're played â€“ a great example of using the aforementioned
    output randomness. It's a polarizing set of cards that can result in both moments
    of great elevation (Oh my, I got so lucky!), as well as ones of great frustration
    (This? Really? I quit!). Unless you can provide your players with a clear indication
    of risk and uncertainty, you should shy away from using output randomness in key
    areas of the game.
  prefs: []
  type: TYPE_NORMAL
- en: Another great use of randomization is within reward systems. In games such as
    World of Warcraft, groups of players would often replay the same dungeon several
    times in order to get a chance at the desired item. An extreme version of reward
    randomization is found in a game that uses a Gacha-based (Gacha, from the Japanese
    word gachapon, refers to capsules sold in vending machines and containing random
    toys inside) business model. In such games, the most important items in the game
    that gate player progression are stashed away in randomized loot boxes. It's important
    to know that not every implementation of gacha rewards is the same (and therefore
    always fully randomized). A so-called box-gacha refers to a reward set with random
    chances but no duplicate rewards. Imagine a box with a strictly defined set of
    10 items. Even if one of these items has a tiny 0.1% chance of dropping, you can
    be sure that you'll get the item within 10 tries. The worst case scenario is that
    you'll need to pull out 9 other items first.
  prefs: []
  type: TYPE_NORMAL
- en: If you rely on reward randomization, make sure you carefully prepare to handle
    filler content and duplicate rewardsâ€”there's nothing more demotivating than getting
    a useless reward or no reward at all. In case of duplicates of unique items, perhaps
    you can convert them into useful resources? More on this type of rewarding and
    Gacha-based business model can be found in [`Chapter 15`](index_split_443.html#filepos1012825),
    Games As a Service.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: An outstanding example of smartly utilizing randomization can be observed in
    Valve's 2008 first-person shooter Left 4 Dead. In Left 4 Dead, four players work
    together across one of several campaigns. A campaign is a predefined string of
    levels, and each level has a mostly linear path, with a fixed entrance and exit.
    The game offers just a handful of weapons and items, a few special enemy types,
    and no differences between characters. On first glance, it does not seem like
    a hugely replayable game. However, the makers of the game made some very smart
    design decisionsâ€¦
  prefs: []
  type: TYPE_NORMAL
- en: 'Left 4 Dead features an AI Director. The Director''s role is to provide the
    survivors (players) with a varied and exciting experience that matches the chosen
    difficulty level. To do that, the director will track a variety of attributes
    for each player such as health, state, skill level (accuracy, kills, and so on)
    and position (are they in a group or alone, ahead or behind). Based on this information,
    the AI Director is capable of making each play-through unique through a variety
    of gameplay adjustments, the most prominent being:'
  prefs: []
  type: TYPE_NORMAL
- en: Spawning hordes of common infected (think fast-moving zombies). The director
    picks one of the available spawn zones. The quantity and frequency all operate
    within set limits and are decided by the director.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spawning special enemies. Types and locations vary and there are limits as to
    how many special foes can be alive at a time. Some very difficult foes are set
    to only spawn a set amount of times per map, in one of a few predefined locations,
    no matter the state of the survivors.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spawning weapons, health, and ammo in one of several predefined locations. Again,
    there are upper and lower limits, but if your team is hurt they are much more
    likely to find life-saving medkits rather than temporary painkillers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Director also takes care of much more subtle features, such as triggering
    weather effects or dynamic dialogs between survivors (these often refer to their
    current location or the enemies they face).
  prefs: []
  type: TYPE_NORMAL
- en: Since the AI Director plans some elements of the level before the game starts,
    you could say it dabbles in procedural generation, but the true powers of using
    procedural generation to create new content go way beyond that!
  prefs: []
  type: TYPE_NORMAL
- en: We can delve into the fully procedural worlds of Minecraft and Terraria, as
    well as No Man's Sky, which not only assembles an entire universe full of planets
    but also populates it with living creatures! It's important to acknowledge that
    such extensive procedural generation is an art form in itself, and requires immense
    technical expertize.
  prefs: []
  type: TYPE_NORMAL
- en: On the less extreme (and more controllable) end, we've got the cult action-RPG
    Diablo, an RPG shooter Borderlands, and countless modern examples of Roguelikes
    (Enter the Gungeon, Nuclear Throne, and Rogue Legacy to name a few). Looking a
    bit closer at Diablo, it uses procedural generation to create its special monsters,
    magical items, and even assemble dungeon layouts, but the designers chose to retain
    a much higher level of control over the most important aspects of the game. The
    best gear in Diablo, all of the bosses, the overall story, objectives, and order
    of dungeons and environments are all handcrafted and pre-planned.
  prefs: []
  type: TYPE_NORMAL
- en: When designing your game, try to find parts of it that would naturally benefit
    from randomization and procedural generation, but remember there are tradeoffs!
    Writing good procedural generation code will take a lot of time (and it will take
    even longer to test and fine-tune it), and this can have a huge impact on the
    scope of the game. Moreover, procedurally generated worlds/items/stories rarely
    feel as special as handcrafted ones. There's a lot you can do by simply randomizing
    a few elements rather than creating them from scratch. If your game requires a
    high quantity of content and you need to rely on procedural generation, think
    of ways in which you can maintain a level of control over the critical parts of
    it.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: User-generated content
  prefs: []
  type: TYPE_NORMAL
- en: Do you want a lot of content but don't want it to come from a soulless algorithm?
    Encourage your players to create and provide new content for each other!
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways in which you can do this. In the past, PC games have often
    come with a set of map editors and content creation tools some of the best maps
    in games such as StarCraft and Heroes of Might and Magic were made by fans. Empowering
    and supporting an active modding community can also be a valid solution for prolonging
    your game's lifespan and appeal. However, it can also be very time-consuming and
    expensive to run, support, and moderate. Therefore, it makes the most sense for
    big, premium games such as Fallout and Elder Scrolls.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, the online architecture can enable player generated content to be
    immediately and seamlessly integrated into the core experience. We've got Super
    Mario Maker featuring thousands of great maps and the likes of Little Big Planet
    that let players create and share entirely new types of gameplay experiences that
    can play nothing like the main game. However, the quality of such free-flowing
    player creations is often questionable. Without proper moderation tools, as well
    as ways of promoting quality content, things can go south pretty quickly. As much
    as you'd want things to run themselves, such features will surely require constant
    oversight and inflate your game's scope significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Maps and mods are great! Unfortunately, not every player wants to spend hours
    crafting content for others. Fortunately, there are ways in which you could make
    your players produce high-quality content unintentionally! All you need is to
    turn that content creation into a significant part of your game. In games like
    the mobile smash-hit Clash of Clans, player generated maps are used front and
    center for everything (apart from a relatively short and insignificant single-player
    campaign). The game has dominated what we now call a build and battle genre, a
    mix of a real-time strategy and a tower defense game. In these games, players
    build and upgrade their bases (carefully placing their defenses to protect themselves),
    recruit troops, and attack other players to take their resources. Incentivizing
    players to protect their resources drives each and every player to create a new,
    highly playable map for everyone else. Moderation impact is minimal for the developer,
    and since players are ranked and match-made against each other, the difficulty
    is properly maintained.
  prefs: []
  type: TYPE_NORMAL
- en: Managing content treadmill
  prefs: []
  type: TYPE_NORMAL
- en: Teams working on live games often have to resort to adding new content in order
    to maintain their current audience engaged. We sometimes call such situations
    as being stuck on a content treadmillâ€”if you stop putting out new content, then
    you run the risk of losing your players.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways of addressing such situations and it''s often up to the
    whole team to come up with solutions of the streamlining production process or
    lowering the reliance on new content. Still, this is a practical book and we aim
    to provide some practical ideas, such as:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remixing: Content does not need to be entirely new to still feel fresh. Mirrored
    tracks in racing games are a great example. Another one would be using old bosses
    as late-game enemiesâ€”players only fought them once, why not give them a second
    life? Recoloring and resizing your assets can also be a very powerful tool!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replaying: Systems such as prestige levels (reset your progression in exchange
    for a token or badge of elite status that can be seen and highly admired by other
    players) and New Game+ (replay the game at a higher difficulty but keep your progress)
    are both great ways of giving your players an excuse to keep playing once they
    reach the end.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Resurfacing: Why not encourage players to play with content they long grew
    out of? Special objectives and challenges or game modes/custom rule sets can do
    just that!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Increasing depth or altering rules: Another way to answer the need for content
    is to provide more variation outside the content, giving it new life by limiting
    the repetitiveness of the main game loop. Think of The Arena mode in Hearthstone;
    it uses exactly the same cards as the main game but allows players to draw randomized
    cards and create custom decks that always feel fresh and unique. For many players,
    this mode has prolonged the lifespan of the game greatly!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Improving your pipeline: Sometimes it''s okay to be stuck on a treadmill, as
    long as you can identify the bottleneck and invest in tools or outsourcing that
    will make the teamâ€™s life more pleasant.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Common game structures
  prefs: []
  type: TYPE_NORMAL
- en: Games are a medium for interaction and storytelling. While both of these elements
    often go hand in hand, there are times in which the story crafted by the developer
    and the player's personal story (as told by their actions and experiences) differ
    widely. Our medium is great at creating interactive systems and letting players
    loose within them, yet the stories we tell in our games often fall back onto the
    tropes, conventions, and static structures found in books or movies.
  prefs: []
  type: TYPE_NORMAL
- en: While it's possible to implement heavily interactive storylines with dozens
    of branching paths, and even systems that create and assemble the story procedurally,
    the same development effort is much better placed with core gameplay mechanics.
    After all, everyone will interact with gameplay systems, but only a small minority
    will explore all story branches. This is why in most cases, our games can provide
    a lot more freedom in their gameplay than in their storytelling.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at the possible structures for our games, noting that in many cases,
    the gameplay and storytelling can either go hand in hand or diverge widely. In
    cases like that, it's often best to first focus your efforts on the more interactive
    elements of the game (as they are usually the most difficult to iterate and redesign).
  prefs: []
  type: TYPE_NORMAL
- en: Linear
  prefs: []
  type: TYPE_NORMAL
- en: 'Linear games are likely the closest our medium can get to traditional, non-interactive
    media such as books or movies. The experience is pre-planned, carefully paced,
    and delivered in a fixed sequence, with little room for sweeping decisions or
    branching paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00180.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A simplified portrayal of the player journey in a linear game
  prefs: []
  type: TYPE_NORMAL
- en: The biggest and most obvious benefit of making your games linear is having the
    ultimate level of control over the combined storytelling and gameplay experience.
    If you know how to exert such control, you can grab your audience and take them
    through an experience they will never forget.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, games with a fully linear gameplay and story are hard to find. Even
    the most restrictive ones often offer a few decision points, alternative solutions,
    optional paths, multiple endings, and at least a small degree of freedom in approaching
    the gameplay scenarios. A few examples of games I'd consider very linear (across
    the years, platforms, and genres) include Super Mario Brothers, Uncharted, Heavy
    Rain, Portal, and Inside.
  prefs: []
  type: TYPE_NORMAL
- en: If you're working on a linear game, you'll need to keep the highest standards
    of quality across the entirety of the game, possibly reworking whole sections
    of the game repeatedly. In linear games, pacing and balancing are much more controllable,
    but also even more important. Your players cannot ignore the parts they don't
    like, or easily distract themselves by doing side missions or exploring other
    parts of the gameâ€”if you fail to keep their interest (or get them stuck) you put
    them at great risk of leaving, permanently.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Structured nonlinear
  prefs: []
  type: TYPE_NORMAL
- en: 'Nonlinear games take players off the rails and take advantage of the interactive
    nature of games - players no longer have to follow a single predefined path from
    start to finish. In such titles, players are asked to make meaningful choices
    and have a sense of agency in either gameplay, storyline, or both. However, designers
    of structured nonlinear games still retain a level of oversight and control over
    the gameplay experience. They prepare for a series of possible gameplay or storytelling
    scenarios and prepare the solutions and endings. The final result is a carefully
    balanced and structured experience that gives a level of freedom to the players,
    increasing replayability and allowing players to play in a way they enjoy the
    most:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00167.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Nonlinear games with carefully planned branches, side paths, and multiple endings
  prefs: []
  type: TYPE_NORMAL
- en: There are obvious drawbacks and challenges with nonlinear games. The alternative
    paths should be as fun and rewarding as the main one, as the moment you encourage
    certain play styles is the moment you take away the choice and force many players
    to play the game in the optimal (but potentially less fun) way. Your scope will
    also grow substantially, especially if hand-crafted stories branch in multiple
    directions. You'll also create a lot of potentially time-consuming content that
    most players will never explore, so take that into consideration if you plan to
    put the coolest bits of the game behind an unlikely branch.
  prefs: []
  type: TYPE_NORMAL
- en: It's much more manageable to provide a level of expression in your gameplay
    while keeping the story going in a roughly similar direction. You can then rely
    on the player's play style and choices, and reflect them either at the end of
    the game or throughout it (but not in a way that derails the main branch of the
    story).
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: In games such as Hitman, Thief, Deus Ex, or Dark Souls, players are presented
    with a great degree of freedom in the way they approach gameplay situations, but
    ultimately the structure follows an order that can be predicted and planned for.
  prefs: []
  type: TYPE_NORMAL
- en: Open nonlinear
  prefs: []
  type: TYPE_NORMAL
- en: Some nonlinear games open up their structure and let the players loose. They
    provide a very wide possibility space and make it nearly impossible to predict
    how the player will reach the end. Such titles still come with a defined set of
    winning and losing states, and often a carefully crafted main storyline, but any
    attempts at plotting the player journey are futile.
  prefs: []
  type: TYPE_NORMAL
- en: 'In such games, players are set free to roam and explore the content and gameplay
    systems, making each playthrough unique. Some series, such as Fallout, Elder Scrolls,
    Just Cause, or Grand Theft Auto, do it by providing an open world and filling
    it full of optional activities and missions that can immerse their players for
    hundreds of hours. Others, such as Civilization and the Total War series, make
    their players miss on sleep by offering deep, interconnected systems and simulations
    with countless moving parts. Another worthy example would be the interactive fiction
    80 Days, which is a unique take on an open nonlinear game with amazing, highly
    adaptive storytelling and a definite ending:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00179.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A game with a defined beginning and ending, but a wide and unpredictable possibility
    space
  prefs: []
  type: TYPE_NORMAL
- en: 'There are no absolutes in game design; it''s perfectly possible to retain a
    level of control over the structure and story of the game, while still allowing
    for free-form exploration. Most open-world games assume a hybrid form. They do
    not want players to be overwhelmed or venture too far too soon. In order to do
    that, you can create a set of artificial requirements that players have to meet
    in order to access an additional portion of the game. This unlock mechanism will
    let you pace the experience better and let your players focus on a more manageable
    amount of content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Rather than opening your structure fully, you can divide the game into a series
    of hubs with players progressing through them in a controllable manner
  prefs: []
  type: TYPE_NORMAL
- en: The scope implications of an open world game can be huge, making tools for content
    creation and testing of paramount importance. You'll need to create a lot of content
    to make the world feel interesting, often with a risk of having to throw it all
    away as you modify and polish your gameplay mechanics. And as always, without
    solid second-to-second gameplay, no amount of content will save your game!
  prefs: []
  type: TYPE_NORMAL
- en: Thereâ€™s always an option of going after a wide possibility space through the
    depth of gameplay. In such case, you'll require countless hours of prototyping,
    playtesting, and bug fixing to ensure the system is fun and performing as intended.
    Deep systems and simulations can be very hard to create and especially hard to
    balance, as a single change can have unforeseen repercussions across the entire
    long-term playthrough.
  prefs: []
  type: TYPE_NORMAL
- en: Endless and sandbox
  prefs: []
  type: TYPE_NORMAL
- en: 'Some games do not have a defined end or victory state and can be considered
    endless. This does not stop at the endless runner genre (very popular a few years
    ago, and includes the likes of Temple Run, Subway Surfers, and Despicable Me:
    Minion Rush). There are multiplayer games such as World of Warcraft, The Sims,
    or Clash of Clans that have a finite amount of content but never really end. In
    these games, you can win a battle, but you can never end the war...'
  prefs: []
  type: TYPE_NORMAL
- en: Sandbox games are not only endless, they are also mostly devoid of goals. Many
    designers argued that due to its endless and directionless nature, Minecraft is
    a toy and not a game (that was before Minecraft added some structure and goals
    via adventure mode).
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s easy to mistake games that support sandbox play, such as Grand Theft
    Auto or Fallout, for sandbox games. It''s true that GTA allows a huge degree of
    freedom and supports undirected, exploratory play, but there is always a storyline,
    progression gates, and a potential victory state. Even if players are free to
    choose their path, they are often confined and locked in certain states by the
    game''s story. A true sandbox game is free-form and often endless; it''s a vehicle
    for player expression, a virtual world, a simulation to get lost in. This structure
    rose to popularity with games such as Terraria, DayZ, and Rust (and of course
    Minecraft) selling millions of copies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00136.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Uhâ€¦ Plotting a player journey? Oh well... There might be progression milestones
    and technology trees, but you can't really predict what your players will do next
  prefs: []
  type: TYPE_NORMAL
- en: Sandbox games are not easy to create and even harder to test. However, by adding
    multiplayer features, one can get away with a seemingly shallow game as long as
    players can express and entertain themselves by interacting with each other. Just
    make sure there's something to work towards, to aspire toâ€”a fantasy that players
    can spend long hours trying to fulfill.
  prefs: []
  type: TYPE_NORMAL
- en: Notes on structure
  prefs: []
  type: TYPE_NORMAL
- en: As with any classification, the reality is often putting things on a sliding
    scale, and one product can have game modes or chapters that belong to wildly different
    categories. It's also possible for players to completely ignore the structure,
    step outside the path we laid out, and even make up their own goals. For example,
    some players in GTA 5 may completely ignore the tight sequence of story missions
    concerning the main characters, and instead explore the world, set records in
    longest car jumps, and try to attract as much police attention as possible and
    get away with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Settling for a particular style of game structure within any part of your game
    is an important part of the design process. You need to consider:'
  prefs: []
  type: TYPE_NORMAL
- en: Do you have the expertize required to pull off this type of experience? Opening
    up the possibilities comes with risks and can multiply your budget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do you know from the outset what kind of game you're making and what kind of
    play styles will you support?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Is there a set of expectations to be met on the structure of the game? These
    can be internal (team) or external (your audience).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scoping practices
  prefs: []
  type: TYPE_NORMAL
- en: The best way to approach scoping is by deconstructing the game from the top
    and defining the critical progression path of the player. Think of the final experience
    you want to deliver or the story you want to tell. Thinking about levels or any
    other units of player progress, can you define the minimal, optimal, and nice
    to have quantities? How much new content (obstacles, NPCs, game mechanics, and
    so on) you'll need on each part of the critical path to keep things interesting?
    By dividing player experience into chunks, you'll be able to easily estimate the
    amount of all interdependent elements.
  prefs: []
  type: TYPE_NORMAL
- en: Content lifespan
  prefs: []
  type: TYPE_NORMAL
- en: The content lifespan is a document that lists every significant piece of content
    and maps it against a player's journey in the game. It allows people to plan the
    production, estimate which elements are needed first, and identify the areas that
    have too many or too few new elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unless you''re working on a very open-ended game or a sandbox experience, it
    should be possible to define a player''s vector of progression. This vector will
    serve as the reference point in the lifespan document. To give a couple of examples:
    in an open world RPG, the vector of progression might be the player''s experience
    level; in a linear puzzle-platformer, it would be the stages themselves; and in
    an adventure game, it could all come down to the place in the storyline.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Content lifespan documentation can be used to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examine the progression path: If you''re focusing on improving the first hour
    of the game, you''ll want to focus your efforts on only the relevant parts'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pace the end-user experience: It''s arguably the easiest way of ensuring that
    fresh content and game mechanics are properly spread out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plan content deliveries: You always want artists and programmers to work on
    things that you''ll need next'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Identify dependencies: No need to work on that new power-up if the gameplay
    mechanics for it are half a year away!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Real-world examples
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, my content lifespan document would take the form of a long table
    with a single row for each element in the game (it would include buildings, obstacles,
    playable and non-playable characters, interactive objects, cutscenes, weapons,
    abilities, scenery, level design, and so on). I''d then add columns that contained
    the following: a short description, the first time an element is used, priority,
    and dependency (an obstacle that requires a special gadget obviously has to be
    created after said gadget).'
  prefs: []
  type: TYPE_NORMAL
- en: Games have differing structures and their relationship with content varies wildly,
    therefore every game should be approached in a fitting way.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Transformers: Earth Wars, we already had an art production spreadsheet and
    lists of robots and buildings; there was little point in listing all of the assets
    again. Therefore, I opted for a simplified graph followed by a more complex and
    integrated progression matrix, which I''ll demonstrate further on.'
  prefs: []
  type: TYPE_NORMAL
- en: The game is a mobile, multiplayer, build and battle title. For the critical
    vector of progression, I chose the most important building, the player's Command
    Center. Unlike the player's robot collection (which is the most important thing
    in the game, but can vary wildly), buildings follow a linear path and are strictly
    tied to the Command Center Level. Upgrading the CC becomes a big investment in
    the base and is a visible milestone. Treating it as a main vector of progression
    also meant we assigned and locked all of the game features and technologies directly
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Player progression flow
  prefs: []
  type: TYPE_NORMAL
- en: First, I mapped known features and milestones in the game against Command Center
    levels. This diagram has been created as a drawing inside our game design document
    (the GDD itself was a Google Docs text file). Once we were happy with it, I printed
    several copies, stuck one of them on the wall and gave out the rest to the people
    responsible for planning the production (producer and art director), as well as
    to every single programmer on the team.
  prefs: []
  type: TYPE_NORMAL
- en: 'Interestingly enough, we all knew that the game would go beyond Command Center
    11 (we actually made data for 16 CC levels and held some back, releasing the first
    14 on game launch), but we also knew no new features would be locked by or planned
    for that late in:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00074.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Simplified player progression flow allows to plan feature delivery and control
    the added complexity, ensuring we don't overwhelm our audience
  prefs: []
  type: TYPE_NORMAL
- en: Unlock matrix
  prefs: []
  type: TYPE_NORMAL
- en: Following the progression map, the unlock matrix was created; this table was
    also printed and handed out around the office. It may look a bit confusing and
    hard to read, but that's because it wasn't just a reference point. It also served
    a much bigger purposeâ€¦
  prefs: []
  type: TYPE_NORMAL
- en: We've integrated the unlock matrix into our economy spreadsheets. Through multiple
    lookup and match formulas, we have ended up with a single sheet that directly
    amended and influenced game data for our entire economy. Making changes in the
    unlock matrix would result in corrected resource costs, building times, and unlock
    requirements being filled in automatically for all the other sheets such an approach
    makes it much easier to balance and refactor player progression (more tips on
    how to set things up can be found in the balancing chapter of the book).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00196.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first part of the matrix lists the maximum number of buildings you can build
    per type
  prefs: []
  type: TYPE_NORMAL
- en: 'Anything going from 0 to 1 in the matrix given in the preceding screenshot
    signifies a new type of building being unlocked. The data looks a bit hard to
    read but can be processed by spreadsheet formulas with ease. You can look at the
    flow as well as each CC level individually. For example, I was able to add a column
    to the footprint of each building and use it to calculate the size of the building
    required to fit the base. This was of tremendous help when trying to figure out
    how many removable obstacles (rocks, trees and so on) should be placed on the
    map:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00141.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The second part of the matrix shows maximum upgrade level per CC level
  prefs: []
  type: TYPE_NORMAL
- en: When it comes to upgrade levels, most defenses and production buildings simply
    increase by 1 for each Command Center level. But that's not the case for everything;
    things like the Workshop (a research center that restricts the maximum experience
    level for your bots) and Attack Shuttle (controlling the total number of robots
    you can deploy in battle) are very carefully crafted.
  prefs: []
  type: TYPE_NORMAL
- en: On a side note, the confusing pink numbers were added when I was implementing
    the 3D models for buildings. We've only created six visually different versions
    of each building (apart from walls, as combined they leave a very large visual
    footprint on the base). So to make my life easier, I put the visually different
    levels in pink to help in data input. I made sure there's always a visual upgrade
    from level 1 to 2 (the first time you upgrade something), but I also made sure
    we don't use up all of the building upgrades too early (some upgrades for the
    most advanced buildings were left for the future).
  prefs: []
  type: TYPE_NORMAL
- en: I might have gone into quite a lot of potentially unnecessary detail here, but
    there is an important lesson to take away from the process. As a designer, you
    need to define the kinds of data you want to control and adjust, and this can
    be difficult if you're breaking new ground. Once you have defined your parameters,
    use spreadsheets, graphs, post-it notesâ€”anything that will help you visualize
    and operate on the data from a new angle.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Game flow
  prefs: []
  type: TYPE_NORMAL
- en: Flow charts and diagrams are a very powerful tool that every designer has to
    learn to utilize. They can be used for anything from explaining the ins and outs
    of your game economy and gameplay mechanics, to portraying technology and skill
    trees.
  prefs: []
  type: TYPE_NORMAL
- en: 'Unless your game is trivially simple (or a near-direct copy of something existing),
    you''ll need to create a flowchart of sorts to explain where various options and
    features fit in and how they are connected. Even a simple game of Rock-Paper-Scissors
    could have its flow represented by a chart:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00193.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Flowchart for a game of Rock-Paper-Scissors with multiple rounds.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding example, we can see the structure of play as well as some
    of the rules that decide the outcome of a round. For those not familiar with the
    symbology:'
  prefs: []
  type: TYPE_NORMAL
- en: Rounded squares represent terminal blocks (beginnings and ends of processes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A parallelogram is used for user input/output
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Diamonds portray decisions. Use these for simple yes/no or true/false forks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rectangles are used for processes and operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Arrow connectors are used to join parts of the diagram and portray the direction
    of transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On-page connectors (the circles with letters inside) allow us to avoid long
    and confusing arrows by connecting two remote parts of the flow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may be a lot to take in, but for experienced people, reading such diagrams
    is much easier than reading paper rulesets.
  prefs: []
  type: TYPE_NORMAL
- en: Nevertheless, do not overthink the flow diagramsâ€”we're not creating blueprints
    of factory processes, we're making games! It doesn't matter how many different
    shapes and connectors you use. As long as you do not confuse people, you can opt
    for a set of simple arrows and boxes.
  prefs: []
  type: TYPE_NORMAL
- en: Going to the lengths of putting a rhomboid decision box with forking outcomes
    for every single thing will likely end up as a waste of your time and potentially
    overwhelm the rest of your team (no one wants to read a flow with hundreds of
    nodes).
  prefs: []
  type: TYPE_NORMAL
- en: Ultimately, the game flow will evolve and change over time; the purpose of the
    initial diagrams is to help you visualize the structure of the gameâ€”do it by whatever
    means necessary. You can inject screenshots from reference games or earlier prototypes,
    comments, wireframes (rough sketches of the user interface and content)â€”everything
    flies as long as it helps you communicate effectively. If you really need a diamond
    decision box with forking pathsâ€”use it! But, if you're going to write up a detailed
    explanation of that part of the game anyway (with potentially its very own flow
    chart), opt for simplicity and put it all in a simple box.
  prefs: []
  type: TYPE_NORMAL
- en: These days, you rarely need to install specialist software such as Microsoft
    Visio or Inkscape. There are countless online solutions such as draw.io or Lucidchart,
    and you can always fall back on something even simpler; unless you're doing something
    large and complex, Google Slides and Powerpoint can easily satisfy most of your
    needs. Some people even use pictures of whiteboards or post-it notes.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Example of a menu flow
  prefs: []
  type: TYPE_NORMAL
- en: As an example, I choose to create a simple menu flow for the PC version of Blizzard's
    digital card game Hearthstone. A few details about the game were simplified (in
    order to fit it on a single page), but it should still prove as a useful example!
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using a conservative flow diagram iconography, I've opted for a very
    loose and accessible approach. Each area of the game is portrayed by a rectangle
    that explains available options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Even a simplified menu flow like that, combined with the information contained
    in the GDD, paints a good picture of how the game can be put together, helping
    the whole team see the connections between the different areas of the game and
    empowering user interface artists to start working on wireframes, visualization
    of various options, and polishing the end-user experience:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/00023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bear in mind that in modern, collaborative teams, any flows and documents you
    create are not supposed to be a final directive of how the game will be made.
    Instead, treat them as a great way to present your vision, a solid starting point
    that enables the team to spot flaws early on and allows for a more informed discussion
    to take place. Do not over-explain too early and be prepared to edit and re-work
    everything. Again, the more changes you make on paper, the better and more efficient
    your team can be!
  prefs: []
  type: TYPE_NORMAL
- en: Planning design work
  prefs: []
  type: TYPE_NORMAL
- en: In the games industry, it's usually the project manager who creates and enforces
    production schedules. To do that, a list of task and assets to produce is assembled
    based on the design documentation. These tasks are then paired with estimates
    that (in the best-case scenario) come from the people who will actually end up
    doing said tasks. If the project is highly inventive and/or staff members inexperienced,
    more senior employees might get involved in helping with the initial schedule.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, in the words of strategist Helmuth von Moltke, "No battle plan
    ever survives contact with the enemy." First production schedules are likely to
    be very, very wrong. In the beginning, things will usually take longer than anticipated,
    and a lot of unknown problems, changes in direction, and missed tasks will emerge.
    Fortunately, as time goes on, your team's experience with the product grows and
    your tools are likely to improve, making the creation of future game content much
    quicker than initially anticipated. Good development studios and publishers acknowledge
    that games are very hard to plan accurately, and are prepared to be reasonably
    flexible.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Agile game development, you''re likely to encounter different levels of
    detail when it comes to planning and task preparation. Long-term plans tend to
    be loose and based on rough estimations; the game might have a shipping date from
    the beginning, but it''s very unlikely to be the actual one. Mid-term plans (next
    few months), usually focus on clear goals that the team is striving to achieve
    for example: getting the first level playable, finishing the character customization
    system, testing network code. Short-term plans (next two sprints, that is, development
    cycles) are the most detailed and least likely to change, as they contain lists
    of detailed tasks, order by priority, which is either worked on right now or will
    be assessed for inclusion in the next development cycle.'
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: No matter how fragile and changeable, plans need to be made right before the
    game can enter the production period. As a representative (or at least a valued
    member) of the design team, you're likely to be involved in the process. While
    deliverable tasks for artists (such as character models, animations, environments,
    and so on) are relatively easy to put into numbers and estimate, design tasks
    tend to be much more elusive. We'll cover some tips that might help you in tackling
    this problem!
  prefs: []
  type: TYPE_NORMAL
- en: Estimation techniques
  prefs: []
  type: TYPE_NORMAL
- en: Estimating the entire project upfront can be a daunting task, but there's a
    technique you can use when faced with any big problem - break it down into many
    small problems!
  prefs: []
  type: TYPE_NORMAL
- en: 'Your first step would be to look at a list of all features and pieces of content.
    Think of any design tasks that could go on that list. For example, if you''re
    working on a first-person shooter, you''d not treat level design, weapon design,
    and enemy design as just three huge tasks; instead, weapon design could be broken
    down and estimated as a set of smaller, more manageable tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: 'High-level design of all weapons (quantity, when are they unlocked): 2 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Design and implementation tasks for each weapon: 3-4 days (per weapon)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ideation and prototyping (desired role and feel): 4 hours'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Art brief and references: 1 hour'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Initial gameplay implementation: 2-4 hours'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Initial balancing pass: 2-3 hours'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Art implementation and sound brief: 2-4 hours'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Playtesting and polishing time: 6-8 hours'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bug fixing: 2-8 hours'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Playtesting for all weapons: 5 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Final balancing of all weapons: 3 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Final polish pass for all weapons: 5 days'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you break things down, look at the combined time taken and see if there
    are any obvious mishaps, then add some contingency budget (usually at least 20%)
    and make sure to revisit and re-estimate the tasks in the future, based on acquired
    experience.
  prefs: []
  type: TYPE_NORMAL
- en: You'd be surprised how effective such breakdowns can be, especially if you approach
    the unknown quantities in the same way as the famous nuclear physicist Enrico
    Fermi...
  prefs: []
  type: TYPE_NORMAL
- en: 'Fermi was known for his ability to make very good approximate calculations
    with very little to no actual data. Instead, he relied on making justified guesses
    in which he replaced any unknown quantities with averages of possible lower and
    upper values. How does that translate into practice? A famous example of a Fermi
    problem is How many piano tuners are there in Chicago? In order to answer that
    question, we''d break the problem down into smaller chunks asking following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: How many people live in Chicago? Let's say we have no idea, but we know it's
    a big city, more than 4 million but less than 15 million. An average of these
    two values would be 9.5 million.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many people are in each household on average? Surely more than 1, but probably
    less than 3\. Let's take 2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How many households have a piano that requires regular tuning? Probably more
    than it 1 in 35, but less than 1 in 5\. Let's say it's 1 in 20!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can also guess that regularly tuned pianos need around once a year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How long does it take to travel to the customer and tune a piano? More than
    an hour, but probably less than 4\. Shall we say 2.5?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each tuner works 8 hours a day, five days a week. 50 weeks in a year.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With these assumptions we can do the following calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: (9,500,000 people in Chicago) Ã· (2 persons/household) Ã— (1 piano/20 households)
    Ã— (1 piano tuning a year) = 237,500 piano tuning tasks every year in Chicago.
  prefs: []
  type: TYPE_NORMAL
- en: Now, how many piano tunings can a tuner perform in a year?
  prefs: []
  type: TYPE_NORMAL
- en: (50 weeks/year) Ã— (5 days/week) Ã— (8 hours/day) Ã· (2.5 hours to tune a piano)
    = 800 piano tunings per year.
  prefs: []
  type: TYPE_NORMAL
- en: Now for the final calculation!
  prefs: []
  type: TYPE_NORMAL
- en: (237,500 piano tunings per year in Chicago) Ã· (800 piano tunings per year for
    each piano tuner) = 297 piano tuners in Chicago.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Your best work on nearly any game is the work you'll do last, built upon the
    breadth of experience with the product. The middle of the game is very much such
    as the middle of a book or a movie, no matter how good it is, if the beginning
    is bad no one will reach it, and if the ending sucks, that's the only thing they'll
    remember. Almost all games benefit from starting the development partway through
    the player journey, no matter how annoying it is to not have the game playable
    from the start for a long period of time. If you're to create a platform game
    with 10 stages, start on level 3 or 4, followed by more work on the middle chunk,
    then do the start and finally the end.
  prefs: []
  type: TYPE_NORMAL
- en: If for some reason you cannot start in the middle (say you want to do play-testing
    of core mechanics), make sure to set aside some time to revisit, iterate, and
    potentially rebuild the initial areas later on.
  prefs: []
  type: TYPE_NORMAL
- en: Remember, the very same technique of starting in the middle works on any scale
    and applies to individual features. For example, you're working on multiple campaigns,
    but you must deliver them in order, perhaps you can start each campaign in the
    middle? What also helps is the extra frame of reference that you gain as you start
    in the middle. It's more convenient to aim for medium difficulty level, then dial
    it up and down as needed, than to start easy and keep escalating up.
  prefs: []
  type: TYPE_NORMAL
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend you to misuse these in any way. For more information please consult
    the terms and conditions of the publishers mentioned in the Disclaimer section
    of this book.
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: This has been quite a chapter! By now, you should have a better idea of how
    to analyze the structure of games and better predict their scope. We spoke at
    length about game content and your role in helping to define it. We've accustomed
    ourselves to the content treadmill (and how it can be avoided), and looked at
    the differences between games that rely on the content burn and those that aim
    to deliver a deep possibility space. We've also analyzed popular game structures
    and explored ways in which you can document the scope and plan of your work.
  prefs: []
  type: TYPE_NORMAL
- en: Armed with all this knowledge, we should be ready for the part you're anticipating
    (or dreading) the most. It's time to delve deep into the art and craft of writing
    design documentation!
  prefs: []
  type: TYPE_NORMAL
