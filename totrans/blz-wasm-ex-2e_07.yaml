- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Building a Shopping Cart Using Application State
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用应用程序状态构建购物车
- en: Sometimes, we need our applications to maintain their state between different
    pages. We can accomplish this by using **dependency injection** (**DI**). DI is
    used to access services that are configured in a central location.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们需要我们的应用程序在不同的页面之间保持其状态。我们可以通过使用 **依赖注入**（**DI**）来实现这一点。DI 用于访问在中央位置配置的服务。
- en: In this chapter, we will create a shopping cart. As we add and delete items
    from the shopping cart, the application will maintain a list of the items in the
    shopping cart. The contents of the shopping cart will be retained when we navigate
    to another page and then return to the page with the shopping cart. Also, the
    shopping cart’s total will be displayed on all the pages.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个购物车。当我们从购物车中添加和删除项目时，应用程序将维护购物车中项目的列表。当我们导航到另一个页面然后再返回到带有购物车的页面时，购物车的内容将被保留。此外，购物车的总额将在所有页面上显示。
- en: Application state,
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 应用程序状态，
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: dependency injection
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 依赖注入
- en: ''
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a team built on trust!
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一个建立在信任基础上的团队！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introducing the application state
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍应用程序状态
- en: Understanding DI
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 DI
- en: Creating the shopping cart project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建购物车项目
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的电脑上安装 Visual Studio 2022。有关如何安装 Visual Studio 2022 免费社区版的说明，请参阅
    *第 1 章*，*Blazor WebAssembly 简介*。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter07).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下 GitHub 仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter07](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter07)。
- en: 'The Code in Action video is available here: [https://packt.link/Ch7](https://packt.link/Ch7).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 代码实战视频在此处提供：[https://packt.link/Ch7](https://packt.link/Ch7)。
- en: Introducing the application state
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍应用程序状态
- en: In a Blazor WebAssembly app, the browser’s memory is used to hold the application’s
    state. This means that when the user navigates between pages, the state is lost
    unless we preserve it. We will be using the `AppState` pattern to preserve the
    application’s state.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Blazor WebAssembly 应用中，浏览器的内存用于保存应用程序的状态。这意味着当用户在页面之间导航时，除非我们保留它，否则状态会丢失。我们将使用
    `AppState` 模式来保留应用程序的状态。
- en: In the `AppState` pattern, a service is added to a DI container to coordinate
    the state between related components. The service contains all the states that
    need to be maintained. Because the service is managed by the DI container, it
    can outlive individual components and retain the state of the application as the
    UI changes.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `AppState` 模式中，一个服务被添加到 DI 容器中，以协调相关组件之间的状态。该服务包含所有需要维护的状态。因为服务由 DI 容器管理，所以它可以比单个组件存活更久，并且可以在
    UI 发生变化时保留应用程序的状态。
- en: The service can be a simple class or a complex class. One service can be used
    to manage the state of multiple components across the entire application. One
    benefit of the `AppState` pattern is that it leads to a greater separation between
    presentation logic and business logic.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 该服务可以是一个简单的类或一个复杂的类。一个服务可以用来管理整个应用程序中多个组件的状态。`AppState` 模式的优点之一是它导致了展示逻辑和业务逻辑之间更大的分离。
- en: '**IMPORTANT NOTE**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: The application state that is held in the browser’s memory is lost when the
    user reloads the page.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户重新加载页面时，保存在浏览器内存中的应用程序状态会丢失。
- en: For the project in this chapter, we will use a DI service instance to preserve
    the application’s state.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的项目，我们将使用 DI 服务实例来保留应用程序的状态。
- en: Understanding DI
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 DI
- en: DI is a technique in which an object accesses services that have been configured
    in a central location. The central location is the DI container. When using DI,
    each consuming class does not need to create its own instance of the injected
    class that it has a dependency on. It is provided by the framework and is called
    a service. In a Blazor WebAssembly application, the services are defined in the
    `program.cs` file.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: DI（依赖注入）是一种技术，其中对象访问在中央位置配置的服务。中央位置是DI容器。在使用DI时，每个消费类不需要创建它所依赖的注入类的实例。它由框架提供，并被称为服务。在Blazor
    WebAssembly应用程序中，服务在`program.cs`文件中定义。
- en: 'We have already used DI in this book with the following services:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这本书中已经使用了DI（依赖注入），以下是一些使用的服务：
- en: '`HttpClient`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpClient`'
- en: '`IJSRuntime`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IJSRuntime`'
- en: '`NavigationManager`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NavigationManager`'
- en: DI containers
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DI容器
- en: 'When a Blazor WebAssembly application starts, it configures a DI container.
    The DI container is responsible for building the instances of the service and
    it lives until the user closes the tab in the browser that is running the web
    app. In the following example, the `CartService` implementation is registered
    for `ICartService`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当Blazor WebAssembly应用程序启动时，它配置一个DI容器。DI容器负责构建服务的实例，并且它一直存在，直到用户关闭运行web应用的浏览器标签页。在以下示例中，`CartService`实现被注册为`ICartService`：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After a service has been added to a DI container, we use the @inject directive
    to inject the service into any classes that depend on it. The `@inject` directive
    takes two parameters, `Type` and `Property`:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务被添加到DI容器后，我们使用`@inject`指令将服务注入到任何依赖它的类中。`@inject`指令接受两个参数，`类型`和`属性`：
- en: '`Type`: This is the type of service.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`类型`：这是服务的类型。'
- en: '`Property`: This is the name of the property that is receiving the service.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`属性`：这是接收服务的属性的名称。'
- en: 'The following example shows how to use the `@inject` directive to reference
    the `CartService` that was registered in the preceding code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何使用`@inject`指令来引用在前面代码中注册的`CartService`：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Dependencies are injected after the component instance has been created, but
    before the `OnInitialized` or `OnInitializedAsync` life cycle events are executed.
    This means that you cannot use the injected class in the component’s constructor,
    but you can use it in either the `OnInitialized` or `OnInitializedAsync` method.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入在组件实例创建后、`OnInitialized`或`OnInitializedAsync`生命周期事件执行之前进行。这意味着你无法在组件的构造函数中使用注入的类，但你可以在`OnInitialized`或`OnInitializedAsync`方法中使用它。
- en: The lifetime of each service is designated when it is registered.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务在其注册时指定其生命周期。
- en: Service lifetimes
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务生命周期
- en: 'The lifetime of a service that is injected using DI can be any of the following
    values:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用DI注入的服务生命周期可以是以下任何值之一：
- en: '**Singleton**'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单例**'
- en: '**Scoped**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围限定**'
- en: '**Transient**'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**短暂**'
- en: Singleton
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单例
- en: If the service’s lifetime is defined as `Singleton`, this means that a single
    instance of the class will be created and that instance will be shared throughout
    the application. Any components that use the service will receive an instance
    of the same service. In a Blazor WebAssembly application, this is true for the
    lifetime of the current application that is running in the current tab of the
    browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务的生命周期被定义为`Singleton`，这意味着将创建一个类的单个实例，并且该实例将在整个应用程序中共享。任何使用该服务的组件都将收到相同服务的实例。在Blazor
    WebAssembly应用程序中，这适用于当前在浏览器当前标签页中运行的当前应用程序的生命周期。
- en: 'The following code will create a shared instance of the `ICartService` class:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建`ICartService`类的共享实例：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is the lifetime of the service that we will use to manage the application’s
    state in this chapter’s project.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在本章的项目中用来管理应用程序状态的服务的生命周期。
- en: Scoped
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围限定
- en: If the service’s lifetime is defined as `Scoped`, this means that a new instance
    of the class will be created for each scope. Since a Blazor WebAssembly application’s
    concept of the scope coincides with the life cycle of the application, `Scoped`-registered
    services are treated like `Singleton` services.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务的生命周期被定义为`Scoped`，这意味着将为每个范围创建类的新的实例。由于Blazor WebAssembly应用程序的范围概念与应用程序的生命周期相一致，因此注册为`Scoped`的服务被当作`Singleton`服务处理。
- en: 'The following code will create a shared instance of the `ICartService` class:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建`ICartService`类的共享实例：
- en: '[PRE3]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The instance created by the preceding code is identical to the instance created
    by using the `AddSingleton` method.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建的实例与使用`AddSingleton`方法创建的实例相同。
- en: '**IMPORTANT NOTE**'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: In the Blazor WebAssembly project templates provided by Microsoft, they use
    a `Scoped` service to create the `HttpClient` instance for data access. This is
    because Microsoft’s project templates use the `Scoped` service lifetime for their
    services for symmetry with server-side Blazor.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Microsoft提供的Blazor WebAssembly项目模板中，他们使用`Scoped`服务来创建数据访问的`HttpClient`实例。这是因为Microsoft的项目模板使用`Scoped`服务生命周期来与服务器端Blazor保持对称。
- en: Transient
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 瞬时
- en: If the service lifetime of the service is defined as `Transient`, this means
    that a new instance of the class will be created every time an instance of the
    service is requested. When using `Transient` services, the DI container acts as
    a factory that creates unique instances of the class. Once the instance is created
    and injected into the dependent component, the container has no further interest
    in it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果服务的生命周期被定义为`Transient`，这意味着每次请求服务实例时都会创建该类的新实例。当使用`Transient`服务时，DI容器充当工厂，创建类的唯一实例。一旦实例创建并注入到依赖组件中，容器就不再对它感兴趣。
- en: 'The following code will create a transient instance of the `OneUseService`
    class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将创建`OneUseService`类的瞬时实例：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The service’s lifetime is defined in the DI container. A service instance can
    be either scoped or transient.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 服务的生命周期在DI容器中定义。服务实例可以是作用域的或瞬时的。
- en: We can use DI to inject the same service instance into multiple components.
    DI is used by the `AppState` pattern to allow the application to maintain the
    state between components.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用DI将相同的服务实例注入到多个组件中。DI被`AppState`模式使用，以允许应用程序在组件之间保持状态。
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速了解一下我们将在本章中构建的项目。
- en: Creating the shopping cart project
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建购物车项目
- en: In this chapter, we will build a Blazor WebAssembly app that includes a shopping
    cart. We will be able to add and remove different products from the shopping cart.
    The cart’s total will be displayed on each of the pages in the app.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个包含购物车的Blazor WebAssembly应用。我们将能够向购物车添加和删除不同的产品。购物车的总价将在应用的每个页面上显示。
- en: 'The following is a screenshot of the completed application:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下为完成的应用程序的截图：
- en: '![Graphical user interface  Description automatically generated](img/B18471_07_01.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面  自动生成的描述](img/B18471_07_01.png)'
- en: 'Figure 7.1: Shopping cart app'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：购物车应用
- en: The build time for this project is approximately 60 minutes.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为60分钟。
- en: Project overview
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `ShoppingCart` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will add logic to add and remove products from the shopping cart. Then, we
    will demonstrate that the cart’s state is lost when we navigate between pages.
    To maintain the cart’s state, we will register a service in the DI container that
    uses the `AppState` pattern. Finally, we will demonstrate that by injecting the
    new service into the relevant components, the cart’s state is not lost.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用Microsoft的**Blazor WebAssembly App Empty**项目模板创建一个空的Blazor WebAssembly项目来创建`ShoppingCart`项目。首先，我们将添加逻辑以向购物车添加和删除产品。然后，我们将演示在页面之间导航时购物车的状态会丢失。为了保持购物车的状态，我们将在DI容器中注册一个使用`AppState`模式的服务。最后，我们将演示通过将新服务注入相关组件，购物车的状态不会丢失。
- en: Creating the shopping cart project
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建购物车项目
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的Blazor WebAssembly应用。我们这样做如下：
- en: Open Visual Studio 2022.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2022。
- en: Click on the **Create a new project** button.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新项目**按钮。
- en: Press *Alt*+*S* to enter the search for templates textbox.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Alt*+*S*键进入搜索模板文本框。
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Blazor`并按**Enter**键。
- en: The following screenshot shows the **Blazor WebAssembly App Empty** project
    template.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了**Blazor WebAssembly App Empty**项目模板。
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_07_02.png)'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  自动生成的描述](img/B18471_07_02.png)'
- en: 'Figure 7.2: Blazor WebAssembly App Empty project template'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图7.2：Blazor WebAssembly App Empty项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click on the
    **Next** button.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Blazor WebAssembly App Empty**项目模板并点击**下一步**按钮。
- en: Enter `ShoppingCart` in the **Project name** textbox and click on the **Next**
    button.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目名称**文本框中输入`ShoppingCart`并点击**下一步**按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于配置我们新项目的对话框截图：
- en: '![](img/B18471_07_03.png)'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![](img/B18471_07_03.png)'
- en: 'Figure 7.3: Configure your new project dialog'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.3：配置新项目对话框
- en: '**TIP**'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `ShoppingCart` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将 `ShoppingCart` 项目放置在 `E:/Blazor` 文件夹中。然而，此项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**.NET 7.0**作为要使用的**框架**版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置为 HTTPS**复选框。
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**ASP.NET Core 托管**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**渐进式 Web 应用**复选框。
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于收集有关我们新项目额外信息的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_07_04.png)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_07_04.png)'
- en: 'Figure 7.4: Additional information dialog'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.4：额外信息对话框
- en: Click on the **Create** button.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: We have created an empty `ShoppingCart` Blazor WebAssembly project. We will
    use `Bootstrap` to style our frontend.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建了一个空的 `ShoppingCart` Blazor WebAssembly 项目。我们将使用 `Bootstrap` 来样式化我们的前端。
- en: Installing Bootstrap
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Bootstrap
- en: 'We need to install `Bootstrap` into our web app. We do this as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的 Web 应用中安装 `Bootstrap`。我们这样做如下：
- en: Right-click on the `wwwroot/css` folder and select the **Add**, **Client-Side
    Library** option from the menu.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `wwwroot/css` 文件夹，从菜单中选择**添加**、**客户端库**选项。
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**库**搜索文本框中输入`bootstrap`并按*Enter*键。
- en: Select **Choose specific files**.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**选择特定文件**。
- en: Select `css` files only, as shown in the following screenshot:![Graphical user
    interface, text, application, email  Description automatically generated](img/B18471_07_05.png)
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仅选择**css**文件，如图下所示：![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_07_05.png)
- en: 'Figure 7.5: Add Client-Side Library dialog'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.5：添加客户端库对话框
- en: '**TIP**'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Although the preceding screenshot has version 5.2.2 of `Bootstrap` selected,
    you can use any version of `Bootstrap` to complete this project.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管前面的截图选择了 `Bootstrap` 版本 5.2.2，但你可以使用任何版本的 `Bootstrap` 来完成此项目。
- en: Click on the **Install** button.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。
- en: '**IMPORTANT NOTE**'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装 `Bootstrap` 后，将在 `wwwroot/css` 文件夹中添加一个新文件夹。这个新文件夹包含 `Bootstrap` 所需的所有 CSS
    文件。在这个项目中，我们只会使用 `bootstrap.min.css` 文件。
- en: Open the `wwwroot/index.html` file.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `wwwroot/index.html` 文件。
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `css/app.css` 样式表链接之前，将以下标记添加到 `head` 元素中：
- en: '[PRE5]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Open the `MainLayout.razor` file.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MainLayout.razor` 文件。
- en: 'Update the `main` element to the following:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `main` 元素更新为以下内容：
- en: '[PRE6]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code uses `Bootstrap` to add padding around the body of the page.
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用 `Bootstrap` 在页面主体周围添加填充。
- en: Open the `Pages/Index.razor` file.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Pages/Index.razor` 文件。
- en: Delete the `h1` element.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `h1` 元素。
- en: 'Add the following markup:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下标记：
- en: '[PRE7]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding code includes a breadcrumb that will be styled by using `Bootstrap`.
    A breadcrumb indicates the page’s current location within a navigational hierarchy.
    The code also includes a button. However, the button does not yet do anything.
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码包含一个面包屑，该面包屑将使用`Bootstrap`进行样式化。面包屑指示页面在导航层次结构中的当前位置。代码还包括一个按钮。然而，该按钮目前还没有任何功能。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以不带调试启动应用程序。
- en: 'This is a screenshot of the **Home** page:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是**主页**的截图：
- en: '![A picture containing text  Description automatically generated](img/B18471_07_06.png)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![包含文本的图片  自动生成的描述](img/B18471_07_06.png)'
- en: 'Figure 7.6: Home page of the ShoppingCart project'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 7.6：ShoppingCart 项目的首页
- en: Click on the **Start Shopping** button to verify that nothing happens.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始购物**按钮以验证没有任何操作发生。
- en: Close the browser.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: When the user clicks the **Start Shopping** button, they should navigate to
    the **Store** page. However, the **Store** page does not yet exist.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击**开始购物**按钮时，他们应该导航到**商店**页面。然而，**商店**页面目前还不存在。
- en: Adding a Store component
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Store 组件
- en: 'We need to add a `Store` component. We do this as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个`Store`组件。我们这样做：
- en: Right-click on the `Pages` folder and select the **Add**, **Razor Component**
    option from the menu.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Pages`文件夹，从菜单中选择**添加**、**Razor组件**选项。
- en: Name the new component `Store`.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为`Store`。
- en: Click on the **Add** button.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: Delete the `H3` element.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`H3`元素。
- en: 'Add the following markup before the code block:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码块之前添加以下标记：
- en: '[PRE8]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The preceding code includes a breadcrumb that we can use to navigate to the
    **Home** page.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码包含一个面包屑，我们可以使用它来导航到**首页**。
- en: Open the `Pages/Index.razor` file.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Index.razor`文件。
- en: 'Add the following `@inject` directive:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`@inject`指令：
- en: '[PRE9]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `NavigationManager` service is provided by the framework to manage URI navigation.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`NavigationManager`服务由框架提供，用于管理URI导航。'
- en: 'Add the following code block:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码块：
- en: '[PRE10]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, when `OpenStore` is called, the `NavigationManager` will
    navigate to the `Store` page. Since this is a SPA, the page will not need to be
    reloaded.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上述代码中，当调用`OpenStore`时，`NavigationManager`将导航到`Store`页面。由于这是一个SPA，页面不需要重新加载。
- en: 'Add the following `@onclick` event to the **Start Shopping** button:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**开始购物**按钮添加以下`@onclick`事件：
- en: '[PRE11]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*启动应用程序，不进行调试。
- en: Click on the **Start Shopping** button to navigate to the **Store** page.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始购物**按钮以导航到**商店**页面。
- en: Click on the **Home** breadcrumb to return to the **Home** page.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**首页**面包屑以返回**首页**。
- en: Close the browser.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We have added the **Store** page. However, it is blank.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了**商店**页面。然而，它是空的。
- en: Adding a Product class
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Product类
- en: 'We need to add the products that are for sale. We do this as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加可供销售的产品。我们这样做：
- en: Right-click on the `ShoppingCart` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`ShoppingCart`项目，从菜单中选择**添加**、**新建文件夹**选项。
- en: Name the new folder `Models`.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Models`。
- en: Right-click on the `Models` folder and select the **Add**, **Class** option
    from the menu.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Models`文件夹，从菜单中选择**添加**、**类**选项。
- en: Name the new class `Product`.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为`Product`。
- en: Click on the **Add** button.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Add the following properties to the `Product` class:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加到`Product`类中：
- en: '[PRE12]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Right-click on the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`wwwroot`文件夹，从菜单中选择**添加**、**新建文件夹**选项。
- en: Name the new folder `sample-data`.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`sample-data`。
- en: Right-click on the `sample-data` folder and select the **Add**, **New Item**
    option from the menu.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`sample-data`文件夹，从菜单中选择**添加**、**新建项**选项。
- en: Enter `json` in the **Search** box.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入`json`。
- en: Select **JSON File**.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**JSON文件**。
- en: Name the file `products.json`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`products.json`。
- en: Click on the **Add** button.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Update the file to the following:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件更新为以下内容：
- en: '[PRE13]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**TIP**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: You can copy the `products.json` file from the GitHub repository.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从GitHub仓库复制`products.json`文件。
- en: Right-click on the `wwwroot` folder and select the **Add**, **New Folder** option
    from the menu.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`wwwroot`文件夹，从菜单中选择**添加**、**新建文件夹**选项。
- en: Name the new folder `images`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`images`。
- en: 'Copy the following images from the GitHub repository to the `images` folder:
    `Charger.jpg`, `Earbuds.jpg`, `KeyChain.jpg`, `TravelMug.jpg`, and `Tshirt.jpg`.'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从GitHub仓库复制以下图片到`images`文件夹：`Charger.jpg`、`Earbuds.jpg`、`KeyChain.jpg`、`TravelMug.jpg`和`Tshirt.jpg`。
- en: We have added a collection of products to our web app. Next, we need to finish
    the `Store` page.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将产品集合添加到我们的Web应用中。接下来，我们需要完成`Store`页面。
- en: Finishing the Store component
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成Store组件
- en: 'We need to add a list of the items that are for sale in our store, and we need
    to add the ability to select the items that we would like to purchase. We do this
    as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加我们商店中可供销售的项目列表，并且我们需要添加选择我们想要购买的项目的能力。我们这样做：
- en: Open the `Pages/Store.razor` file.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages/Store.razor`文件。
- en: 'Add the following directives:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下指令：
- en: '[PRE14]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code to the code block:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向代码块添加以下代码：
- en: '[PRE15]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code uses `HttpClient` to populate the list of products from the
    `products.json` file.
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用`HttpClient`从`products.json`文件中填充产品列表。
- en: 'Add the following `if` statement before the code block:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码块之前添加以下`if`语句：
- en: '[PRE16]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding code displays the **Loading...** message until the list of products
    is loaded. Once the list of products has loaded, it displays the products and
    the cart.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码在产品列表加载前显示**加载中...**消息。一旦产品列表加载完成，它将显示产品和购物车。
- en: 'Add the following markup to the `products` element:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到`products`元素中：
- en: '[PRE17]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding markup adds a table that displays all the products that are for
    sale.
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的标记添加了一个显示所有销售产品的表格。
- en: 'Add the following markup to the `cart` element:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到`cart`元素中：
- en: '[PRE18]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding markup displays all the items in our cart.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的标记显示了购物车中的所有项目。
- en: 'Add the `AddProduct` method to the code block:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddProduct`方法添加到代码块：
- en: '[PRE19]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The preceding code adds the indicated product to the cart and increments the
    total by the product’s price.
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码将指定的产品添加到购物车，并按产品的价格增加总额。
- en: 'Add the `DeleteProduct` method to the code block:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DeleteProduct`方法添加到代码块：
- en: '[PRE20]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding code removes the indicated product from the cart and decrements
    the total by the product’s price.
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码从购物车中删除指定的产品，并按产品的价格减少总额。
- en: 'Add the following `@onlclick` event to the **Add to Cart** button:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`@onlclick`事件添加到**添加到购物车**按钮：
- en: '[PRE21]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code calls the `AddProduct` method when the button is clicked.
    For more information on handling events, refer to *Chapter 8*, *Building a Kanban
    Board Using Events*.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前面的代码在按钮点击时调用`AddProduct`方法。有关事件处理的更多信息，请参阅*第8章*，*使用事件构建看板*。
- en: 'Add the following `@onlclick` event to the **Delete** button:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`@onlclick`事件添加到**删除**按钮：
- en: '[PRE22]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code calls the `DeleteProduct` method when the button is clicked.
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的代码在按钮点击时调用`DeleteProduct`方法。
- en: We have finished updating the **Store** page. Now we need to test it.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对**Store**页面的更新。现在我们需要测试它。
- en: Demonstrating that the application state has been lost
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展示应用程序状态已丢失
- en: 'We need to run our web app in order to test the `Store` page. We do this as
    follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要运行我们的Web应用程序以测试`Store`页面。我们这样做如下：
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*启动应用程序，不进行调试。
- en: Click on the **Start Shopping** button.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始购物**按钮。
- en: Add a few products to the cart using the **Add to Cart** button.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**添加到购物车**按钮添加几个产品。
- en: Delete a product from the cart using the **Delete** button.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**删除**按钮从购物车中删除产品。
- en: Select the **Home** option on the navigation menu.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航菜单中选择**主页**选项。
- en: Return to the **Store** page by clicking on the **Start Shopping** button.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始购物**按钮返回**Store**页面。
- en: Confirm that the cart is now empty.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认购物车现在为空。
- en: When we navigate between the pages in our web app, the state is lost.
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们在Web应用程序中的页面之间导航时，状态会丢失。
- en: Close the browser.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We can maintain the state by using DI to enable the `AppState` pattern. We will
    add a `CartService` to our project that we will manage using DI.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用DI来启用`AppState`模式来维护状态。我们将在项目中添加一个`CartService`，我们将使用DI来管理它。
- en: Creating the the ICartService interface
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建ICartService接口
- en: 'We need to create an `ICartService` interface. We do this as follows:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个`ICartService`接口。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Right-click on the `ShoppingCart` project and select the **Add**, **New Folder**
    option from the menu.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ShoppingCart`项目，从菜单中选择**添加**、**新建文件夹**选项。
- en: Name the new folder `Services`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Services`。
- en: Right-click on the `Services` folder and select the **Add**, **New Item** option
    from the menu.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Services`文件夹，从菜单中选择**添加**、**新建项**选项。
- en: Enter `interface` in the **Search** box.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**搜索**框中输入`interface`。
- en: Select **Interface**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**接口**。
- en: Name the file `ICartService`.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件命名为`ICartService`。
- en: Click on the **Add** button.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Enter the following code:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码：
- en: '[PRE23]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**IMPORTANT NOTE**'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: 'Visual Studio will automatically add the following `using` statement:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Visual Studio将自动添加以下`using`语句：
- en: '`using ShoppingCart.Models;`'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`using ShoppingCart.Models;`'
- en: We have created the `ICartService` interface. Now we need to create a class
    that inherits from it.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了`ICartService`接口。现在我们需要创建一个继承它的类。
- en: Creating the CartService class
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建CartService类
- en: 'We need to create the `CartService` class. We do this as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建`CartService`类。我们这样做如下：
- en: Right-click the `Services` folder and select the **Add**, **Class** option from
    the menu.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Services`文件夹，从菜单中选择**添加**、**类**选项。
- en: Name the class `CartService`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类命名为`CartService`。
- en: Click on the **Add** button.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Update the class to the following:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新类如下：
- en: '[PRE24]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `CartService` class inherits from the `ICartService` interface.
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`CartService`类继承自`ICartService`接口。'
- en: 'Add the `NotifyStateChanged` method to the class:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NotifyStateChanged`方法添加到类中：
- en: '[PRE25]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the preceding code, the `OnChange` event is invoked when the `NotifyStateChanged`
    method is called.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在之前的代码中，当调用`NotifyStateChanged`方法时，会触发`OnChange`事件。
- en: 'Add the `AddProduct` method to the class:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`AddProduct`方法添加到类中：
- en: '[PRE26]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding code adds the indicated product to the list of products and increments
    the total. It also calls the `NotifyStateChanged` method.
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将指定的产品添加到产品列表中并增加总数。它还调用了`NotifyStateChanged`方法。
- en: 'Add the `DeleteProduct` method to the class:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`DeleteProduct`方法添加到类中：
- en: '[PRE27]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code removes the indicated product from the list of products and
    decrements the total. It also calls the `NotifyStateChanged` method.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码从产品列表中移除了指定的产品并减少了总数。它还调用了`NotifyStateChanged`方法。
- en: We have completed the `CartService` class. Now we need to register `CartService`
    in the DI container.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了`CartService`类的编写。现在我们需要在DI容器中注册`CartService`。
- en: Registering CartService in the DI container
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在DI容器中注册CartService
- en: 'We need to register `CartService` in the DI container before we can inject
    it into our `Store` component. We do this as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在将`CartService`注入到我们的`Store`组件之前，我们需要在DI容器中注册`CartService`。我们这样做如下：
- en: Open the `Program.cs` file.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Program.cs`文件。
- en: 'Add the following code after the code that registers `HttpClient`:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在注册`HttpClient`的代码之后添加以下代码：
- en: '[PRE28]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We have registered `CartService`. Now we need to update the `Store` page to
    use it.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注册了`CartService`。现在我们需要更新`Store`页面以使用它。
- en: Injecting CartService into the Store component
  id: totrans-257
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将`CartService`注入到Store组件中
- en: 'We need to inject the `CartService` into the `Store` component. We do this
    as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`CartService`注入到`Store`组件中。我们这样做如下：
- en: Open the `Pages\Store.razor` file.
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Pages\Store.razor`文件。
- en: 'Add the following directives:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下指令：
- en: '[PRE29]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Update the `@onclick` event of the **Add to Cart** button to the following:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**添加到购物车**按钮的`@onclick`事件更新如下：
- en: '[PRE30]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The preceding markup uses `cartService` to add products to the cart.
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的标记使用`cartService`将产品添加到购物车中。
- en: 'Update the `cart` element to the following:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新`cart`元素如下：
- en: '[PRE31]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code replaces references to the `cart` property with references
    to the `cartService`.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将`cart`属性的引用替换为`cartService`的引用。
- en: 'Add the following `@onclick` event to the **Delete** button:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向**删除**按钮添加以下`@onclick`事件：
- en: '[PRE32]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding markup uses `cartService` to delete products from the cart.
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的标记使用`cartService`从购物车中删除产品。
- en: Delete the `cart` property, the `total` property, the `AddProduct` method, and
    the `DeleteProduct` method from the code block.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从代码块中删除`cart`属性、`total`属性、`AddProduct`方法和`DeleteProduct`方法。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*以无调试模式启动应用程序。
- en: Click on the **Start Shopping** button.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始购物**按钮。
- en: Add a few products to the cart using the **Add to Cart** button.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**添加到购物车**按钮添加一些产品。
- en: Delete a product from the cart using the **Delete** button.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**删除**按钮从购物车中删除一个产品。
- en: Select the **Home** option on the navigation menu.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航菜单中选择**主页**选项。
- en: Return to the **Store** page by clicking on the **Start Shopping** button.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**开始购物**按钮返回**商店**页面。
- en: Confirm that the cart is not empty.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认购物车不为空。
- en: We have confirmed that `CartService` is working. Now we need to add the cart
    total to all the pages.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经确认`CartService`正在工作。现在我们需要将购物车总额添加到所有页面。
- en: Adding the cart total to all the pages
  id: totrans-280
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将购物车总额添加到所有页面
- en: 'To view the cart total on all the pages, we need to add the cart total to a
    component that is used on all the pages. Since the `MainLayout` component is used
    by all the pages, we will add the cart total to it. We do this as follows:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 要在所有页面上查看购物车总额，我们需要将购物车总额添加到一个在所有页面上都使用的组件中。由于`MainLayout`组件被所有页面使用，我们将购物车总额添加到其中。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Open the `Shared\MainLayout.razor` file.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`Shared\MainLayout.razor`文件。
- en: 'Add the following `@using` directive:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`@using`指令：
- en: '[PRE33]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following `@inject` directive:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`@inject`指令：
- en: '[PRE34]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following markup above the `main` element:'
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`main`元素上方添加以下标记：
- en: '[PRE35]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*以无调试模式启动应用程序。
- en: Add a few items to the cart.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向购物车添加一些商品。
- en: Confirm that the **Cart Total** field at the top of the page does not update.
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认页面顶部的**购物车总额**字段没有更新。
- en: The cart total at the top of the page is not being updated as we add new items
    to the cart. We need to deal with this.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们向购物车添加新项目时，页面顶部的购物车总额没有更新。我们需要处理这个问题。
- en: Using the OnChange method
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用OnChange方法
- en: 'We need to notify the component when it needs to be updated. We do this as
    follows:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要通知组件何时需要更新。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `Shared\MainLayout.razor` file.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `Shared\MainLayout.razor` 文件。
- en: 'Add the following `@implements` directive:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `@implements` 指令：
- en: '[PRE36]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add the following `@code` block:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `@code` 块：
- en: '[PRE37]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the preceding code, the component’s `StateHasChanged` method is subscribed
    to the `cartService.OnChange` method in the `OnInitialized` method and unsubscribed
    in the `Dispose` method.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，组件的 `StateHasChanged` 方法在 `OnInitialized` 方法中订阅了 `cartService.OnChange`
    方法，并在 `Dispose` 方法中取消订阅。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 启动应用程序，不进行调试。
- en: Add a few products to the cart using the **Add to Cart** button.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **添加到购物车** 按钮添加一些产品到购物车。
- en: Confirm that the **Cart Total** field at the top of the page updates.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认页面顶部的 **购物车总计** 字段已更新。
- en: Delete a product from the cart using the **Delete** button.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **删除** 按钮从购物车中删除一个产品。
- en: Confirm that the **Cart Total** field at the top of the page updates.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认页面顶部的 **购物车总计** 字段已更新。
- en: Select the **Home** option on the navigation menu.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导航菜单中选择 **首页** 选项。
- en: Confirm that the **Cart Total** field is correctly displayed at the top of the
    **Home** page.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认 **首页** 顶部的 **购物车总计** 字段正确显示。
- en: We have updated the component to call the `StateHasChanged` method whenever
    the `OnChange` method of `CartService` is invoked.
  id: totrans-310
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已更新组件，使其在 `CartService` 的 `OnChange` 方法被调用时调用 `StateHasChanged` 方法。
- en: '**TIP**'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Do not forget to unsubscribe from the event when you dispose of the component.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在销毁组件时取消订阅事件。
- en: You must unsubscribe from the event to prevent the `StateHasChanged` method
    from being invoked every time the `cartService.OnChange` event is raised. Otherwise,
    your application will experience resource leaks.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须取消订阅事件，以防止每次 `cartService.OnChange` 事件被触发时 `StateHasChanged` 方法被调用。否则，你的应用程序将经历资源泄漏。
- en: Summary
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to use DI to apply the `AppState` pattern to a Blazor
    WebAssembly app.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该能够使用 DI 将 `AppState` 模式应用到 Blazor WebAssembly 应用程序中。
- en: In this chapter, we introduced the application state and DI. We explained how
    to use a DI container and how to inject a service into a component. We also discussed
    the differences between the singleton, scoped, and transient service lifetimes.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了应用程序状态和 DI。我们解释了如何使用 DI 容器以及如何将服务注入到组件中。我们还讨论了单例、作用域和瞬态服务生命周期的区别。
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project. We installed `Bootstrap` to style the frontend. We added
    a `Store` component to the project and demonstrated that the application state
    is lost when we navigate between pages. To maintain the application’s state, we
    registered the `CartService` service in the DI container. Finally, we demonstrated
    that by using the `AppState` pattern, we can maintain the shopping cart’s state.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们使用了 **Blazor WebAssembly App Empty** 项目模板来创建一个新的项目。我们安装了 `Bootstrap` 来美化前端。我们将一个
    `Store` 组件添加到项目中，并演示了在页面间导航时应用程序状态会丢失。为了保持应用程序的状态，我们在 DI 容器中注册了 `CartService`
    服务。最后，我们演示了通过使用 `AppState` 模式，我们可以保持购物车的状态。
- en: We can apply our new skills with DI to maintain the application state for any
    Blazor WebAssembly app.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的新技能与 DI 结合起来，以维护任何 Blazor WebAssembly 应用的应用程序状态。
- en: In the next chapter, we will build a Kanban board using events.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用事件构建一个看板板。
- en: Questions
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供你思考：
- en: Can `localStorage` be used to maintain the cart’s state when the page is reloaded?
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当页面重新加载时，可以使用 `localStorage` 来维护购物车的状态吗？
- en: Why don’t we need to call the `StateHasChanged` method in the `Store` component?
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们不需要在 `Store` 组件中调用 `StateHasChanged` 方法？
- en: How would you update the cart to allow for the addition of more than one of
    each type of product at a time?
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何更新购物车，以便一次可以添加多种类型的产品？
- en: When using DI, what is the difference between the various service lifetimes?
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 DI 时，各种服务生命周期之间有什么区别？
- en: Further reading
  id: totrans-326
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了有关本章涵盖主题的更多信息：
- en: For more information on DI, refer to [https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0).
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于依赖注入（DI）的信息，请参阅[https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-7.0)。
- en: For more information on events, refer to [https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/).
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 想了解更多关于事件的信息，请参阅[https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/](https://learn.microsoft.com/en-us/dotnet/csharp/programming-guide/events/)。
- en: Join our community on Discord
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
- en: '![](img/Discord_QR.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![Discord 二维码](img/Discord_QR.png)'
