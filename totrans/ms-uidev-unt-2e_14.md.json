["```cs\n    public uint health;\n    [SerializeField] uint totalHealth;\n    [SerializeField] float percentHealth;\n    [SerializeField] RectTransform healthBar;\n    ```", "```cs\n    void Update()\n    {\n        // Cap health\n        if (health > totalHealth)\n        {\n            health = totalHealth;\n        }\n        // Calculate health percentage\n        percentHealth = (float)health / totalHealth;\n        // Update horizontal health bar\n        healthBar.localScale = new Vector2(percentHealth, 1f);\n    }\n    ```", "```cs\n    [SerializeField] Image progressMeter;\n    ```", "```cs\n    // Circular progress meter\n    progressMeter.fillAmount = percentHealth;\n    ```", "```cs\n    public class MuteUnmute : MonoBehaviour\n    {\n        [SerializeField] Button musicButton;\n        private Image musicImage;\n        [SerializeField] private Sprite[] musicSprites = new Sprite[2];\n        private bool musicOn = true;\n        [SerializeField] Button soundButton;\n        private Image soundImage;\n        [SerializeField] private Sprite[] soundSprites = new Sprite[2];\n        private bool soundOn = true;\n        void Awake()\n        {\n            musicImage = musicButton.GetComponent<Image>();\n            soundImage = soundButton.GetComponent<Image>();\n        }\n        public void ToggleMusic()\n        {\n            musicOn = !musicOn;\n            musicImage.sprite = musicSprites[Convert.ToInt32(musicOn)];\n        }\n        public void ToggleSound()\n        {\n            soundOn = !soundOn;\n            soundImage.sprite = soundSprites[Convert.ToInt32(soundOn)];\n        }\n    }\n    ```", "```cs\n    using UnityEngine.UI;\n    ```", "```cs\n    private bool buttonPressed = false;\n    private float startTime = 0f;\n    private float holdTime = 0f;\n    [SerializeField] private float longHoldTime = 1f;\n    ```", "```cs\n    [SerializeField] private Image radialFillImage;\n    ```", "```cs\n    public void PressAndRelease(bool pressStatus)\n    {\n        buttonPressed = pressStatus;\n        if (!buttonPressed)\n        {\n            holdTime = 0;\n            radialFillImage.fillAmount = 0;\n        }\n        else\n        {\n            startTime = Time.time;\n        }\n    }\n    ```", "```cs\n    public void LongPressCompleted()\n    {\n        radialFillImage.fillAmount = 0;\n        Debug.Log(\"Do something after long press\");\n    }\n    ```", "```cs\n    void Update()\n    {\n        if (buttonPressed)\n        {\n            holdTime = Time.time - startTime;\n            if (holdTime >= longHoldTime)\n            {\n                buttonPressed = false;\n                LongPressCompleted();\n            }\n            else\n            {\n                radialFillImage.fillAmount = holdTime / longHoldTime;\n            }\n        }\n    }\n    ```", "```cs\n    using UnityEngine.UI;\n    ```", "```cs\n    [SerializeField] private RectTransform theStick;\n    private Vector2 mouseStartPosition;\n    private Vector2 mouseCurrentPosition;\n    [SerializeField] private int dragPadding = 30;\n    ```", "```cs\n    public void MovingLeft()\n    {\n        Debug.Log(\"move left\");\n    }\n    public void MovingRight()\n    {\n        Debug.Log(\"move right\");\n    }\n    public void MovingUp()\n    {\n        Debug.Log(\"move up\");\n    }\n    public void MovingDown()\n    {\n        Debug.Log(\"move down\");\n    }\n    ```", "```cs\n    public void StartDrag()\n    {\n        mouseStartPosition = Input.mousePosition;\n    }\n    ```", "```cs\n    public void Dragging()\n    {\n        float xPos;\n        float yPos;\n        mouseCurrentPosition = Input.mousePosition;\n        if (mouseCurrentPosition.x < mouseStartPosition.x - dragPadding)\n        {\n            MovingLeft();\n            xPos = -10;\n        }\n        else if (mouseCurrentPosition.x > mouseStartPosition.x + dragPadding)\n        {\n            MovingRight();\n            xPos = 10;\n        }\n        else\n        {\n            xPos = 0;\n        }\n        if (mouseCurrentPosition.y > mouseStartPosition.y + dragPadding)\n        {\n            MovingUp();\n            yPos = 10;\n        }\n        else if (mouseCurrentPosition.y < mouseStartPosition.y - dragPadding)\n        {\n            MovingDown();\n            yPos = -10;\n        }\n        else\n        {\n            yPos = 0;\n        }\n        theStick.anchoredPosition = new Vector2(xPos, yPos);\n    }\n    ```", "```cs\n    public void StoppedDrag()\n    {\n        theStick.anchoredPosition = Vector2.zero;\n    }\n    ```", "```cs\n    [SerializeField] private RectTransform theBase;\n    [SerializeField] private bool stickAdded = false;\n    ```", "```cs\n    public void AddTheStick()\n    {\n        theBase.anchoredPosition = Input.mousePosition;\n        theStick.anchoredPosition = Vector2.zero;\n        mouseStartPosition = Input.mousePosition;\n        stickAdded = true;\n    }\n    ```", "```cs\n    void Update()\n    {\n        if (stickAdded == true)\n        {\n            Dragging();\n            if (Input.GetMouseButtonUp(0))\n            {\n                // ToggleBaseCanvasGroup(false);  // This line is commented out as ToggleBaseCanvasGroup is not defined in the provided code\n                stickAdded = false;\n                StoppedDrag();\n            }\n        }\n    }\n    ```", "```cs\n    private CanvasGroup theBaseVisibility;\n    ```", "```cs\n    void Awake()\n    {\n        theBaseVisibility = theBase.GetComponent<CanvasGroup>();\n    }\n    ```", "```cs\n    public void ToggleBaseCanvasGroup(bool visible)\n    {\n        theBaseVisibility.alpha = Convert.ToInt32(visible);\n        theBaseVisibility.interactable = visible;\n        theBaseVisibility.blocksRaycasts = visible;\n    }\n    ```", "```cs\n    ToggleBaseCanvasGroup(true);\n    ```", "```cs\n    ToggleBaseCanvasGroup(false);\n    ```"]