["```cs\nusing UnityEngine.XR.ARFoundation;\npublic class GameManager : MonoBehaviour\n{\n    [SerializeField]\n    private ARPlaneManager _planeManager;\n    private IEnumerator Start()\n    {\n        yield return new WaitForSeconds(2f);\n        EnablePlaneManager();\n    }\n    public void EnablePlaneManager()\n        => _planeManager.enabled = true;\n}\n```", "```cs\n    _planeManager.enabled = true;\n```", "```cs\npublic void EnablePlaneManager()\n{\n    _planeManager.enabled = true;\n    _planeManager.planesChanged += OnPlanesChanged;\n}\n```", "```cs\nprivate void OnPlanesChanged(ARPlanesChangedEventArgs args)\n{\n    foreach (var plane in args.added)\n    {\n        switch (plane.classification)\n        {\n            case PlaneClassification.Table:\n                if (!_hasSpawnedPrefab_Reactor)\n                {\n                    SpawnPrefab(plane, _prefabReactor);\n                    _hasSpawnedPrefab_Reactor = true;\n                }\n                break;\n        }\n    }\n}\n```", "```cs\nprivate void SpawnPrefab(ARPlane plane, GameObject prefab)\n{\n    Instantiate(prefab,\n        plane.transform.position,\n        plane.transform.rotation);\n}\n```", "```cs\n    case PlaneClassification.Floor:\n        if (!_hasSpawnedPrefab_Console)\n        {\n            SpawnPrefab(plane,\n                _prefabConsole,\n                new Vector3(-1f, 0f, 0f));\n            _hasSpawnedPrefab_Console = true;\n        }\n        break;\n```", "```cs\nprivate void SpawnPrefab(\n    ARPlane plane, GameObject prefab, Vector3 playerOffset)\n{\n    var playerTransform = Camera.main.transform;\n    playerTransform.position = new Vector3(\n        playerTransform.position.x,\n        plane.transform.position.y,\n        playerTransform.position.z);\n    var worldOffset =\n        playerTransform.TransformDirection(playerOffset);\n    var spawnPosition = playerTransform.position\n        + worldOffset;\n    var directionToPlayer =\n        (playerTransform.position\n            - spawnPosition).normalized;\n    var spawnRotation =\n        Quaternion.LookRotation(-directionToPlayer,\n            Vector3.up);\n    Instantiate(prefab, spawnPosition, spawnRotation);\n}\n```", "```cs\n    case PlaneClassification.Wall:\n        if (!_hasSpawnedPrefab_Corridor)\n        {\n            SpawnPrefabAtWallBase(\n                plane, _prefabCorridorDoorway);\n            _hasSpawnedPrefab_Corridor = true;\n        }\n        break;\n```", "```cs\nprivate void SpawnPrefabAtWallBase(\n    ARPlane plane, GameObject prefab)\n{\n    var planeCenter = plane.transform.position;\n    var heightOffset = plane.extents.y;\n    var basePosition =\n        new Vector3(planeCenter.x, planeCenter.y\n            - heightOffset, planeCenter.z);\n    var prefabRotation =\n        Quaternion.LookRotation(-plane.normal, Vector3.up);\n    Instantiate(prefab, basePosition, prefabRotation);\n}\n```", "```cs\nusing UnityEngine.Events;\nusing UnityEngine.XR.ARFoundation;\npublic class SceneController : MonoBehaviour\n{\n    [Header(\"Triggered Events\")]\n    public UnityEvent<bool> OnTogglePassthrough;\n}\n```", "```cs\npublic void TogglePassthrough()\n{\n    _isPassthroughVisible = !_isPassthroughVisible;\n    SetPassthroughVisible(_isPassthroughVisible);\n}\npublic void SetPassthroughVisible(bool visible)\n{\n    _isPassthroughVisible = visible;\n    OnTogglePassthrough.Invoke(_isPassthroughVisible);\n}\n```", "```cs\n[SerializeField]\nprivate ARPlaneManager _planeManager;\npublic void TogglePlaneVisibility()\n{\n    _arePlanesVisible = !_arePlanesVisible;\n    SetPlaneVisible(_arePlanesVisible);\n}\npublic void SetPlaneVisible(bool visible)\n{\n    _arePlanesVisible = visible;\n    foreach (var plane in _planeManager.trackables)\n    {\n        if (plane.gameObject.\n            TryGetComponent<FadePlaneMaterial>(\n                out var planeFader))\n        {\n            planeFader.FadePlane(_arePlanesVisible);\n        }\n    }\n}\n```", "```cs\nprivate SceneController _sceneController;\nprivate void Awake()\n    => _sceneController = GetComponent<SceneController>();\n```", "```cs\npublic void StartGame()\n{\n    EnablePlaneManager();\n    StartCoroutine(DelayStartGame());\n    IEnumerator DelayStartGame()\n    {\n        yield return new WaitForSeconds(1.5f);\n        _sceneController.SetPlaneVisible(false);\n        _sceneController.SetPassthroughVisible(true);\n    }\n}\n```", "```cs\n[SerializeField]\nprivate GameObject[] _prefabModules;\n```", "```cs\nprivate void SpawnPrefab(GameObject[] prefabs,\n    Vector3 playerOffset,\n    Vector3 forceDirection, float force)\n{\n    var playerTransform = Camera.main.transform;\n    var spawnPosition = new Vector3(\n        playerTransform.position.x\n            + (playerTransform.right * playerOffset.x).x,\n        playerTransform.position.y\n            + (playerTransform.up * playerOffset.y).y,\n        playerTransform.position.z\n            + (playerTransform.forward * playerOffset.z).z\n    );\n    foreach (var item in prefabs)\n    {\n        var module = Instantiate(item,\n            spawnPosition, Quaternion.identity);\n    }\n}\n```", "```cs\n    case PlaneClassification.Floor:\n        if (!_hasSpawnedPrefab_Console)\n        {\n            …\n            SpawnPrefab(_prefabModules,\n                new Vector3(0f, 1.5f, 0.8f),\n                Vector3.up, 0.05f);\n        }\n        break;\n```", "```cs\n    // Existing line in foreach body.\n    var module = Instantiate(item,\n        spawnPosition, Quaternion.identity);\n    // Added lines.\n    if (forceDirection != Vector3.zero || force != 0)\n    {\n        if (module.TryGetComponent<Rigidbody>(out var rb))\n        {\n            ApplyForce(rb);\n        }\n    }\n```", "```cs\n    void ApplyForce(Rigidbody rb)\n    {\n        rb.AddForce(forceDirection * force, ForceMode.Impulse);\n        var torqueMultiplier = 3f;\n        var randomRotation = new Vector3(\n            Random.Range(-1f, 1f),\n            Random.Range(-1f, 1f),\n            Random.Range(-1f, 1f)).normalized\n                * (force * torqueMultiplier);\n        rb.AddTorque(randomRotation, ForceMode.Impulse);\n    }\n```", "```cs\npublic class ConsoleSlot : MonoBehaviour\n{\n    [SerializeField] private char _slotID;\n    private ConsoleController _controller;\n    private XRSocketInteractor _socketInteractor;\n    private void Awake()\n    {\n        _controller =\n            GetComponentInParent<ConsoleController>();\n        _socketInteractor = GetComponent<XRSocketInteractor>();\n        _socketInteractor.selectEntered.\n            AddListener(HandleModuleInserted);\n        _socketInteractor.selectExited.\n            AddListener(HandleModuleRemoved);\n    }\n}\n```", "```cs\nprivate char _moduleID;\nprivate void HandleModuleInserted(SelectEnterEventArgs arg)\n{\n    _moduleID = arg.interactableObject.transform.\n        GetComponent<Module>().ModuleID;\n    if (!char.IsWhiteSpace(_moduleID))\n    {\n        _controller.InsertModule(_slotID, _moduleID);\n    }\n}\nprivate void HandleModuleRemoved(SelectExitEventArgs arg)\n    => _controller.ResetSlots();\n```", "```cs\n[SerializeField] private GameObject _prefabGun;\n```", "```cs\n    case PlaneClassification.Floor:\n        if (!_hasSpawnedPrefab_Console)\n        {\n            …\n            SpawnPrefab(_prefabGun,\n                new Vector3(0.5f, 1.2f, 0.15f));\n        }\n        break;\n```", "```cs\nprivate void SpawnPrefab(GameObject prefab, Vector3 playerOffset)\n    => SpawnPrefab(new GameObject[] { prefab },\n        playerOffset, Vector3.zero, 0f);\n```", "```cs\npublic class ConsoleController : MonoBehaviour\n{\n    [SerializeField] private string _consoleCode = \"CBA\";\n    …\n    public void InsertModule(char slotID, char moduleID)\n    {\n        // TODO: Solve module sequence logic.\n        ConsoleEnergized();\n    }\n}\n```", "```cs\nTextMeshProUGUI and .text = \"string\"; either approach is acceptable (i.e., developer style).\n```", "```cs\npublic void ConsoleEnergized()\n{\n    _consoleScreen.SetText(MSG_SOLVED);\n    EventSystem.Instance.TriggerEvent(\n        EventConstants.OnConsoleEnergized, true);\n}\n```", "```cs\npublic class Reactor : MonoBehaviour\n{\n    …\n    private void OnEnable()\n        => EventSystem.Instance.AddListener<bool>(\n            EventConstants.OnConsoleEnergized, Energize);\n    public void Energize(bool energize)\n        => _renderer.material = _matEnergized;\n}\n```", "```cs\npublic class Player : MonoBehaviour, IHaveHealth\n{\n    …\n    public void Died()\n        => EventSystem.Instance.TriggerEvent(\n            EventConstants.OnPlayerDied, true);\n}\n```", "```cs\nprivate void OnEnable()\n{\n    EventSystem.Instance.AddListener<bool>(\n        EventConstants.OnPlayerDied, SetLoseCondition);}\n}\nprivate void SetLoseCondition(bool value)\n    => _isConditionMetLose = value;\n```", "```cs\nprivate void Update()\n{\n    switch (_currentState)\n    {\n        case State.Playing:\n            if (_isConditionMetLose || _isConditionMetWin)\n                ChangeState(State.GameOver);\n            break;\n    }\n}\n```", "```cs\nprivate void OnEnable()\n{\n    …\n    EventSystem.Instance.AddListener<bool>(\n        EventConstants.OnConsoleEnergized, SetWinCondition);\n}\nprivate void SetWinCondition(bool value)\n    => _isConditionMetWin = value;\n```"]