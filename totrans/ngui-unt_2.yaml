- en: Chapter 2. Creating Widgets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。创建小部件
- en: In this chapter, we will create our first sprite widget and understand how it
    works. Then we will create one sample of each important widget template, and analyze
    their corresponding parameters so that you know how to create and configure them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建我们的第一个精灵小部件，并了解它是如何工作的。然后我们将创建每个重要小部件模板的一个示例，并分析它们相应的参数，以便您知道如何创建和配置它们。
- en: At the end of this chapter, we will have a functional main menu with most of
    NGUI's widgets.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将拥有一个功能齐全的主菜单，其中包含NGUI的大部分小部件。
- en: Creating our first widget
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个小部件
- en: We will create our first sprite widget to display our main menu's background
    window. In order to do that easily, NGUI has a **Widget Wizard** with a few templates
    for us.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建我们的第一个精灵小部件来显示主菜单的背景窗口。为了轻松完成此操作，NGUI为我们提供了一个带有几个模板的**Widget Wizard**。
- en: Widget Wizard
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小部件向导
- en: 'The Widget Wizard can be opened by navigating to **NGUI** | **Open** | **Widget
    Wizard**. It will look like the following screenshot:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过导航到**NGUI** | **Open** | **Widget Wizard**来打开小部件向导。它看起来如下截图所示：
- en: '![Widget Wizard](img/8667OT_02_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![小部件向导](img/8667OT_02_01.jpg)'
- en: As you can see in the previous screenshot, to create a widget, you require **Atlas**
    and **Font** to be configured. As said in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with NGUI"), *Getting Started with NGUI*, an atlas is a large texture
    containing the sprites that you need to create your UI. For the rest of this chapter,
    we will use the default atlas named **SciFi Atlas** , which is included in the
    plugin.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的截图中所见，要创建一个小部件，您需要配置**Atlas**和**Font**。正如[第1章](ch01.html "第1章。NGUI入门")中所述，“NGUI入门”，一个atlas是一个包含您需要创建UI的精灵的大纹理。在本章的其余部分，我们将使用默认的atlas，名为**SciFi
    Atlas**，它包含在插件中。
- en: Selecting an atlas
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择纹理图集
- en: 'Let''s select our default SciFi atlas, which contains the necessary sprites,
    as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们选择我们的默认SciFi纹理图集，它包含必要的精灵，如下所示：
- en: In the **Project** view, navigate to **Assets** | **NGUI** | **Examples** |
    **Atlases** | **SciFi**.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**Project**视图中，导航到**Assets** | **NGUI** | **Examples** | **Atlases** | **SciFi**。
- en: Drag-and-drop the prefab `SciFi Atlas.prefab` in the **Atlas** field.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预制件`SciFi Atlas.prefab`拖放到**Atlas**字段中。
- en: Drag-and-drop the prefab `SciFi Font – Header.prefab` in the **Font** field.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预制件`SciFi Font – Header.prefab`拖放到**Font**字段中。
- en: We have our **Atlas** and **Font** prefabs selected. We can now create a widget
    from a template.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经选择了**Atlas**和**Font**预制件。现在我们可以从模板创建一个小部件。
- en: Creating a widget from a template
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从模板创建小部件
- en: 'Let''s create a widget from a template by performing the following steps:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤从模板创建一个小部件：
- en: Click on the drop-down menu next to the **Template** field.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Template**字段旁边的下拉菜单。
- en: Select the **Sprite** option as **Template**.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Sprite**选项选择为**Template**。
- en: Click on the drop-down menu next to the **Sprite** field.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Sprite**字段旁边的下拉菜单。
- en: Select the sprite named **Dark**.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择名为**Dark**的精灵。
- en: Leave the **Pivot** option as **Center**.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Pivot**选项保留为**Center**。
- en: Make sure you have selected **Panel** in the **Hierarchy** view.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您已在**Hierarchy**视图中选择了**Panel**。
- en: Click on the **Add To** button.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**Add To**按钮。
- en: Ok, our sprite widget has been created!
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们的精灵小部件已经创建完成了！
- en: Note
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The widget wizard adds the new widget as the child of the selected GameObject
    or panel. If you have selected the wrong GameObject, you can still drag-and-drop
    the new widget into the right GameObject after it is created.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件向导将新小部件添加为所选GameObject或面板的子项。如果您选择了错误的GameObject，您仍然可以在创建后将其拖放到正确的GameObject中。
- en: Transforming widgets
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小部件变换
- en: 'We have created our first widget: **Sprite (Dark)**. Select it in the **Hierarchy**
    view and try the following manipulations to change its transform values.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了第一个小部件：**Sprite (Dark**)。在**Hierarchy**视图中选择它，并尝试以下操作来更改其变换值。
- en: Moving widgets
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 移动小部件
- en: 'In the **Scene** view, you can use the **handles** to move your widget or you
    may enter coordinates directly in the **Inspector** view''s **X**, **Y**, or **Z**
    parameters. The following screenshot is of the **Scene** view with the three parameters
    visible:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Scene**视图中，您可以使用**句柄**移动小部件，或者您可以直接在**Inspector**视图的**X**、**Y**或**Z**参数中输入坐标。以下截图是带有三个参数可见的**Scene**视图：
- en: '![Moving widgets](img/8667OT_02_02.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![移动小部件](img/8667OT_02_02.jpg)'
- en: You should always leave the **Z** coordinates at 0\. If you need to place a
    widget behind or in front of another, use the **Back** and **Forward** buttons
    in the **Inspector** view to control your widget's depth.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该始终将**Z**坐标保留在0。如果你需要将小部件放置在另一个小部件之后或之前，请使用**检查器**视图中的**后退**和**前进**按钮来控制小部件的深度。
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may move your widget on only one axis by pressing *Shift* before you click
    on the axis's handle.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在点击轴的手柄之前按住*Shift*来仅在一个轴上移动你的小部件。
- en: Rotating widgets
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 旋转小部件
- en: On the **Scene** view, place your mouse cursor on the outside of any blue circle
    surrounding your widget. Your cursor will have a rotation icon next to it. You
    can now keep your left mouse button pressed and move your mouse to rotate the
    widget.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在**场景**视图中，将鼠标光标放在围绕小部件的任何蓝色圆圈的外侧。你的光标旁边将出现一个旋转图标。现在你可以按住左鼠标按钮并移动鼠标来旋转小部件。
- en: Tip
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: By default, rotation is set to have a 15 degrees step. If you wish to have a
    more precise rotation—a 1 degree step—just hold *Shift* while rotating.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，旋转设置为15度步长。如果你希望有更精确的旋转——1度步长——旋转时请按住*Shift*键。
- en: Scaling widgets
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 缩放小部件
- en: You may have noticed that in the **Inspector** view, the scale value is grayed
    out. That's because you should use the **Dimensions** parameter of the **UISprite**
    component instead.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，在**检查器**视图中，缩放值被灰色显示。这是因为你应该使用**UISprite**组件的**尺寸**参数。
- en: On the **Scene** view, place your mouse cursor on any blue circle surrounding
    your widget. Your cursor will have a resize icon next to it. You can now click
    and drag your mouse to resize the widget.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在**场景**视图中，将鼠标光标放在围绕小部件的任何蓝色圆圈上。你的光标旁边将出现一个调整大小图标。现在你可以点击并拖动鼠标来调整小部件的大小。
- en: Tip
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Using the blue handles will *not* keep your widget centered to its current position.
    If you want to resize your widget proportionally on both sides, click on the space
    in front of the **X** or **Y** parameter of **Dimensions** of the **UISprite**
    component and drag your mouse left or right.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用蓝色手柄**不会**保持你的小部件相对于当前位置居中。如果你想在小部件的两侧按比例调整大小，请点击**尺寸**组件的**X**或**Y**参数前面的空间，并左右拖动鼠标。
- en: To keep everything pixel perfect, you should avoid scaling widgets up or down
    with Unity's scale tool. Try to do everything with **Dimensions**. Let's see what
    other parameters we have for widgets.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持像素完美，你应该避免使用Unity的缩放工具上下调整小部件的大小。尽量使用**尺寸**来做所有事情。让我们看看我们还有哪些小部件参数。
- en: Common widget parameters
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见小部件参数
- en: 'Select **Sprite (Dark)** and you will find the parameters seen in the following
    screenshot in the **Inspector** view:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**（暗色）精灵**，你将在**检查器**视图中找到以下截图中的参数：
- en: '![Common widget parameters](img/8667OT_02_03.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![常见小部件参数](img/8667OT_02_03.jpg)'
- en: 'These parameters exist for any type of widget. Let''s see what they are:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数适用于任何类型的小部件。让我们看看它们是什么：
- en: '**Color Tint**: This is the widget''s alpha-enabled color.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色色调**：这是小部件的启用alpha颜色。'
- en: '**Clipboard**: If you click on the **Copy** button, the current **Color Tint**
    selection is copied to this parameter. If you click on the **Paste** button, the
    **Clipboard** parameter''s selection will be pasted to **Color Tint**.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**剪贴板**：如果你点击**复制**按钮，当前的**颜色色调**选择将被复制到这个参数。如果你点击**粘贴**按钮，**剪贴板**参数的选择将被粘贴到**颜色色调**。'
- en: '**Pivot**: This presents two sets of buttons that can be used to choose which
    corner or side you want the widget''s pivot to be placed.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**枢轴**：这显示了两组按钮，可以用来选择你希望小部件枢轴放置的角落或侧面。'
- en: '**Depth**: This can be used to display your widget in front or behind others.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**深度**：这可以用来显示你的小部件在其他人之前或之后。'
- en: '**Dimensions**: This can be used to display size in pixels instead of scaling.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尺寸**：这可以用来以像素为单位显示大小而不是缩放。'
- en: 'Now that we have seen the widget parameters, please enter these **Dimensions**
    for our newly created **Sprite (Dark)**: `1300` x `850`.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了小部件参数，请为我们的新创建的**（暗色）精灵**输入以下**尺寸**：`1300` x `850`。
- en: Our sprite window just got enormous and ugly. Why? Because it's a 15 x 15 sprite
    stretched to 1300 x 850! Let's talk about sprites and see how we can correct this.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的小部件窗口变得非常大且丑陋。为什么？因为它是一个15 x 15的精灵被拉伸到1300 x 850！让我们谈谈精灵，看看我们如何纠正这个问题。
- en: Sprites
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精灵
- en: We have created our first sprite and understood how to move, rotate, and change
    its dimensions. We actually scaled it up massively compared to its original size.
    But this 15 x 15 sprite has something special.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了第一个精灵，并了解了如何移动、旋转和更改其尺寸。实际上，我们将其与原始尺寸相比放大了很多。但这个15 x 15的精灵有一些特别之处。
- en: 'If you select the **Sprite (Dark)** GameObject, you will see it has four dotted
    lines inside the **Preview** window in the **Inspector** view. This means it''s
    a **sliced** **sprite**:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择**精灵（暗色）**GameObject，您将在**检查器**视图中的**预览**窗口内看到四条虚线。这意味着它是一个**切片****精灵**：
- en: '![Sprites](img/8667OT_02_04.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![精灵](img/8667OT_02_04.jpg)'
- en: Sliced sprites
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 切片精灵
- en: A **sliced** sprite is an image divided in nine sections, making it resizable
    while conserving its corners' proportions. Sliced sprites may be scaled as you
    wish—they still look beautiful.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**切片**精灵是将图像分成九个部分，使其可调整大小同时保持其角落的比例。切片精灵可以按需缩放——它们仍然看起来很美。'
- en: 'Since **Sprite (Dark)** is a 9-slice sprite, we must tell our **UISprite**
    component to treat it as such. Perform the following steps to do so:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于**精灵（暗色）**是9切片精灵，我们必须告诉我们的**UISprite**组件将其视为此类。执行以下步骤：
- en: Select the **Sprite (Dark)** GameObject.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**精灵（暗色）**GameObject。
- en: Click on the drop-down menu next to its **Sprite Type** field.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击其**精灵类型**字段旁边的下拉菜单。
- en: Select **Sliced**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**切片**。
- en: Notice how the sprite looks good now—it's not stretched anymore!
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 注意精灵现在看起来有多好——它不再拉伸了！
- en: Note
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: The **Fill Center** parameter allows you to only show the sprite's borders and
    leave only transparency inside.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**填充中心**参数允许您只显示精灵的边缘，并在内部留下透明度。'
- en: Even though sliced sprites are perfect for windows and variable size boxes,
    you may display regular sprites by leaving **Sprite Type** as **Simple**.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管切片精灵非常适合窗口和可变大小的盒子，但您可以通过将**精灵类型**保留为**简单**来显示常规精灵。
- en: Tiled sprites
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 平铺精灵
- en: 'A tiling sprite is a pattern meant to be repeated indefinitely—it can be used
    to cover a large surface by repeating the same texture. Let''s try it right now:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 平铺精灵是一种旨在无限重复的图案——它可以用来通过重复相同的纹理覆盖大面积。现在让我们试试：
- en: In the **Hierarchy** view, rename **Sprite (Dark)** as `Window`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中，将**精灵（暗色）**重命名为`Window`。
- en: 'Select our **Window** GameObject and perform the following steps:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**窗口**GameObject并执行以下步骤：
- en: Make sure it is at {`0`, `0`, `0`} position and has a scale of {`1`, `1`, `1`}.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保它位于`{`0`, `0`, `0`}`位置，并且具有`{`1`, `1`, `1`}`的比例。
- en: Make sure **Depth** is set to `0`.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保深度设置为`0`。
- en: In the **Color Tint** parameter, change **R** to `115`, **G** to `240`, **B**
    to `255`, and **A** to `255`.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**更改为`115`，**G**更改为`240`，**B**更改为`255`，**A**更改为`255`。
- en: 'Ok, we have our window. Let''s create a tiled background to make it look better
    by performing the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有了我们的窗口。让我们通过以下步骤创建一个平铺背景，使其看起来更好：
- en: Select our **Window** GameObject and duplicate it with *Ctrl* + *D*.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**窗口**GameObject并使用*Ctrl* + *D*进行复制。
- en: Rename the duplicate as `Background`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将副本重命名为`Background`。
- en: 'Select the new **Background** GameObject and perform the following steps:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新的**背景**GameObject并执行以下步骤：
- en: Set its UISprite's **Depth** parameter to `1`.
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其UISprite的**深度**参数设置为`1`。
- en: Click on the drop-down menu next to the **Sprite Type** field.
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**精灵类型**字段旁边的下拉菜单。
- en: Select **Tiled**. It doesn't look good because our sprite is not a tiling sprite.
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**平铺**。因为它看起来不好，因为我们的精灵不是平铺精灵。
- en: Click on the **Sprite** button.
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**精灵**按钮。
- en: Select the **Honeycomb** sprite, which is a tiling sprite.
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**蜂窝**精灵，它是一个平铺精灵。
- en: In the **Color Tint** parameter, change **R** to `115`, **G** to `240`, **B**
    to `255`, and **A** to `255`.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**更改为`115`，**G**更改为`240`，**B**更改为`255`，**A**更改为`255`。
- en: 'Attach a component to it by navigating to **Component** | **NGUI** | **UI**
    | **Stretch** and perform the following steps:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **UI** | **拉伸**并执行以下步骤，为它附加一个组件：
- en: Drag-and-drop our **Window** GameObject inside the **Container** field.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**窗口**GameObject拖放到**容器**字段中。
- en: Set the **Style** field to **Both**.
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**样式**字段设置为**两者**。
- en: Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and drag-and-drop our **Window** GameObject inside the **Container** field.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**并拖放到**容器**字段中，为它附加一个组件。
- en: 'That looks better! We now have a tiling sprite for our window''s background,
    and it looks as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来更好了！我们现在有一个用于窗口背景的平铺精灵，它看起来如下：
- en: '![Tiled sprites](img/8667OT_02_05.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![平铺精灵](img/8667OT_02_05.jpg)'
- en: We used the **UIStretch** component to avoid setting dimensions manually; if
    you change the window's **Dimensions**, the background will resize itself automatically.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了**UIStretch**组件来避免手动设置尺寸；如果您更改窗口的**尺寸**，背景将自动调整大小。
- en: The **UIAnchor** component is used to make sure the background also moves with
    the window.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**UIAnchor**组件用于确保背景也随窗口移动。'
- en: Filled sprites
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 填充精灵
- en: 'A filled sprite is useful to create life bars or progress bars; with this,
    you can set a sprite and change the **Fill Amount** parameter between 0 and 1
    to hide a part of it. The following screenshot shows a partially hidden progress
    bar:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个填充的精灵对于创建生命条或进度条很有用；使用这个功能，你可以设置一个精灵并改变**填充量**参数在0到1之间来隐藏其一部分。以下截图显示了一个部分隐藏的进度条：
- en: '![Filled sprites](img/8667OT_02_06.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![填充精灵](img/8667OT_02_06.jpg)'
- en: 'Let''s create this effect with the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建这个效果：
- en: Select our **Background** GameObject and set **Sprite Type** to **Filled**.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**背景**GameObject并将**精灵类型**设置为**填充**。
- en: Set **Fill Dir** to **Horizontal**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**填充方向**设置为**水平**。
- en: Move the **Fill Amount** slider and you can see what it does on the game view.
    You've understood the filled sprite system. Now set the **Sprite Type** field
    back to **Tiled**.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 移动**填充量**滑块，你可以在游戏视图中看到它所做的工作。你已经理解了填充精灵系统。现在将**精灵类型**字段设置回**平铺**。
- en: Ok, we've seen different sprite widgets and parameters. Let's learn how to add
    text.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们已经看到了不同的小部件和参数。让我们学习如何添加文本。
- en: Labels
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签
- en: 'Labels are used to display text on the screen with a specific font as shown
    in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 标签用于在屏幕上显示具有特定字体的文本，如下面的截图所示：
- en: '![Labels](img/8667OT_02_07.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![标签](img/8667OT_02_07.jpg)'
- en: 'Let''s create a label widget with the following steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤创建一个带有标签的小部件：
- en: Select the **Panel** GameObject.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**面板**GameObject。
- en: Navigate to **NGUI** | **Open** | **Widget Wizard**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**NGUI** | **打开** | **小部件向导**。
- en: Select the **Label** template.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**标签**模板。
- en: We have already selected a font; it will be used for this label.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经选择了一个字体；它将用于此标签。
- en: Click on the **Add To** button.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加到**按钮。
- en: A new label has been added to the panel and placed at the center of the screen.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 已在面板中添加了一个新的标签并将其放置在屏幕中央。
- en: Parameters
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'With **Label** selected, the `UILabel` parameters are shown in the **Inspector**
    view. They are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**标签**后，`UILabel`参数将在**检查器**视图中显示。它们如下所示：
- en: '**Text**: This is a large textbox that lets you type the text to be displayed.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文本**：这是一个大文本框，允许你输入要显示的文本。'
- en: '**Overflow**: This offers four different behaviors for the widget when the
    text is larger than the label''s **Dimensions**. The four behaviors are as follows:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**溢出**：当文本大于标签的**尺寸**时，这为小部件提供了四种不同的行为。这四种行为如下：'
- en: '**Shrink Content**: This shrinks the text in order to fit'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩小内容**：这会缩小文本以适应'
- en: '**Clamp Content**: This ensures overflow will never happen'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**限制内容**：这确保溢出永远不会发生'
- en: '**Resize Freely**: This resizes to display all the content and overflow'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自由调整大小**：这会调整大小以显示所有内容及其溢出'
- en: '**Resize Height**: This resizes height only—column style'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调整高度**：这仅调整高度——列样式'
- en: '**Encoding**: This must be checked if you want to change the characters'' color
    by inserting the `[RRGGBB]` hexadecimal values.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**编码**：如果你想通过插入[RRGGBB]十六进制值来更改字符的颜色，必须勾选此选项。'
- en: '**Effect**: This will help you add a shadow or outline effect to your label.
    You can adjust the **Distance** and **Color** values.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效果**：这将帮助你为标签添加阴影或轮廓效果。你可以调整**距离**和**颜色**值。'
- en: '**Max Lines**: This is the maximum number of lines assigned for the label.
    For unlimited lines, leave it as **0**.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大行数**：这是分配给标签的最大行数。对于无限行，请将其保留为**0**。'
- en: '**Pivot**: The pivot also defines how the text is aligned.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**锚点**：锚点还定义了文本的对齐方式。'
- en: Creating the title bar
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建标题栏
- en: 'Let''s add a title for our window that will look like the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个标题，它将看起来像下面的截图：
- en: '![Creating the title bar](img/8667OT_02_08.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![创建标题栏](img/8667OT_02_08.jpg)'
- en: 'Please proceed with the following steps to create this title bar for our window:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤继续创建这个窗口的标题栏：
- en: Select **Panel** and create a new child with *Alt* + *Shift* + *N*.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**面板**并使用*Alt* + *Shift* + *N*创建一个新的子项。
- en: Rename that new child as `Title`. It will be our Title bar container.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新子项重命名为`标题`。它将成为我们的标题栏容器。
- en: Drag-and-drop the **Label** GameObject into the **Title** GameObject.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**标签**GameObject拖放到**标题**GameObject中。
- en: Select our **Title** GameObject.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**标题**GameObject。
- en: Navigate to **NGUI** | **Open** | **Widget Wizard**.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**NGUI** | **打开** | **小部件向导**。
- en: 'Create a new sprite using the **Highlight** sprite and perform the following
    steps:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用**高亮**精灵创建一个新的精灵并执行以下步骤：
- en: Rename this new sprite (**Highlight**) as `Background`.
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新的精灵（**高亮**）重命名为`背景`。
- en: Set **Sprite Type** to **Sliced**.
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**精灵类型**设置为**切片**。
- en: Change the **Pivot** option to **Top** (the button with the up arrow).
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**枢轴**选项更改为**顶部**（带有向上箭头的按钮）。
- en: Reset its **Transform** position to {`0`, `0`, `0`}.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**变换**位置重置为 `{`0``, `0`, `0`}`。
- en: In the **Color Tint** parameter, change **R** to `95`, **G** to `255`, **B**
    to `150`, and **A** to `200`.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**更改为`95`，**G**更改为`255`，**B**更改为`150`，**A**更改为`200`。
- en: Enter **Depth** as `2`.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**深度**设置为`2`。
- en: 'Attach a component to it by navigating to **Component** | **NGUI** | **UI**
    | **Stretch** and perform the following steps:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **UI** | **拉伸**并执行以下步骤来为其附加组件：
- en: Drag our **Window** GameObject into the **Container** field.
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**窗口**GameObject拖放到**容器**字段中。
- en: Set **Style** to **Horizontal**.
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**样式**设置为**水平**。
- en: Enter its UISprite's **Y** dimension as `62`.
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其UISprite的**Y**维度设置为`62`。
- en: 'Select the **Label** GameObject from **Title** and perform the following steps:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**标题**中选择**标签**GameObject并执行以下步骤：
- en: Change its text to `[AAFFFF]Main Menu`.
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为 `[AAFFFF]主菜单`。
- en: Set its **Overflow** parameter to **Resize Freely**.
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**溢出**参数设置为**自由调整大小**。
- en: Enter **Depth** as `3`.
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**深度**为`3`。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**并执行以下步骤来为其附加组件：
- en: Drag-and-drop the **Background** GameObject from **Title** in the **Container**
    field.
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**标题**中的**背景**GameObject拖放到**容器**字段中。
- en: Set the **Side** parameter to **Center**.
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**侧边**参数设置为**居中**。
- en: Select our **Title** GameObject in the **Hierarchy** view.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中选择我们的**标题**GameObject。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**并执行以下步骤来为其附加组件：
- en: Drag our **Window** GameObject into the **Container** field.
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**窗口**GameObject拖放到**容器**字段中。
- en: Set the **Side** parameter to **Top**.
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**侧边**参数设置为**顶部**。
- en: 'The **Hierarchy** and **Inspector** views of our **Title** GameObject should
    look like the ones in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们**标题**GameObject的**层次结构**和**检查器**视图应该看起来像以下截图中的那样：
- en: '![Creating the title bar](img/8667OT_02_09.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![创建标题栏](img/8667OT_02_09.jpg)'
- en: We now have a window that actually looks like a window. We used anchors to avoid
    setting positions manually. Now let's add some buttons!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个看起来真的像窗口的窗口。我们使用了锚点来避免手动设置位置。现在让我们添加一些按钮！
- en: Buttons
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮
- en: With NGUI, buttons are easy to create and configure.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 使用NGUI，按钮易于创建和配置。
- en: 'Let''s create our first one by performing the following steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下步骤创建第一个：
- en: Select the **Panel** GameObject.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**面板**GameObject。
- en: 'Create a new child with *Alt* + *Shift* + *N* and perform the following steps:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Alt* + *Shift* + *N*创建一个新的子项并执行以下步骤：
- en: Rename it as `Buttons`. It will be our buttons container.
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为`Buttons`。它将成为我们的按钮容器。
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**NGUI** | **打开** | **小部件向导**并执行以下步骤：
- en: Select the **Button** Template.
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**视图中选择**按钮**模板。
- en: For the **Background** field, select the sprite named **Button**.
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**背景**字段，选择名为**按钮**的精灵。
- en: With the **Buttons** GameObject selected, click on the **Add To** button.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**按钮**GameObject，然后点击**添加到**按钮。
- en: 'A button has just been created and centered on the screen. If you look at the
    **Hierarchy** view, you will see that a button is composed of a container GameObject
    named **Button** and two children: a **Background** sprite and **Label**. That''s
    how NGUI works; templates are simply assembled components and widgets. If you
    wanted to, you could build a button from scratch using the right components on
    empty GameObjects.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 一个按钮已经被创建并居中在屏幕上。如果你查看**层次结构**视图，你会看到按钮由一个名为**按钮**的容器GameObject和两个子项组成：一个**背景**精灵和一个**标签**。这就是NGUI的工作方式；模板只是简单地组装组件和小部件。如果你想的话，你可以使用正确的组件在空GameObject上从头开始构建一个按钮。
- en: Click on the Play button. You can see that hover and click are already set!
    Turn off the Play mode, select the new **Button** GameObject, and look at the
    **Inspector** view.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮。你可以看到悬停和点击已经设置好了！关闭播放模式，选择新的**按钮**GameObject，并查看**检查器**视图。
- en: Interactive widgets have a box collider attached to them, and that is the case
    with this button. The collider is used to detect collisions with the cursor.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 交互式小部件附有一个盒子碰撞体，这个按钮也是如此。碰撞体用于检测与光标的碰撞。
- en: Parameters
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'A button has a `UIButton` component that handles seven button parameters:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 一个按钮有一个`UIButton`组件，它处理七个按钮参数：
- en: '**Target**: This GameObject is transformed and modified when the user hovers
    or presses the button. By default, this is **Background**.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：当用户悬停或按下按钮时，此 GameObject 将被转换和修改。默认情况下，这是 **背景**。'
- en: '**Normal**: This is the color tint when nothing is happening.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正常状态**：这是没有任何操作发生时的颜色渐变。'
- en: '**Hover**: This is the color tint when the user''s cursor is over the button.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**悬停状态**：这是用户的光标在按钮上时的颜色渐变。'
- en: '**Pressed**: This is the color tint when the user clicks on the button.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按下状态**：这是用户点击按钮时的颜色渐变。'
- en: '**Disabled**: This is the color tint when the button is disabled (can''t be
    clicked).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**禁用状态**：这是按钮被禁用（无法点击）时的颜色渐变。'
- en: '**Duration**: This is the duration of transitions between states.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续时间**：这是状态之间转换的持续时间。'
- en: '**Notify**: This is the parameter that lets you choose a method to call when
    the button is clicked. You must first drag a GameObject into the **Notify** field.
    A **Method** field will then appear, listing the GameObject''s attached script
    methods, as shown in the following screenshot:![Parameters](img/8667OT_02_10.jpg)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：这是允许你选择在按钮点击时调用的方法的参数。你必须首先将一个 GameObject 拖动到 **通知** 字段中。然后，将出现一个 **方法**
    字段，列出 GameObject 附加的脚本方法，如下截图所示：![参数](img/8667OT_02_10.jpg)'
- en: In the previous example, I dragged the **Panel** GameObject into the **Notify**
    field. My **Panel** GameObject has a `ButtonManager.cs` script attached to it—this
    script has a `ButtonClicked()` method. I can now select it in the **Method** field.
    It will be called on click.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我将 **面板** GameObject 拖动到 **通知** 字段中。我的 **面板** GameObject 附加了一个 `ButtonManager.cs`
    脚本——此脚本有一个 `ButtonClicked()` 方法。我现在可以在 **方法** 字段中选择它。它将在点击时被调用。
- en: Note
  id: totrans-182
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Only **public** methods without arguments will show in the **Method** field
    of the **Notify** parameter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 只有 **公共** 方法且没有参数的才会显示在 **通知** 参数的 **方法** 字段中。
- en: There is also a **PlaySound** component attached to this button. It lets you
    choose an audio clip to play when the selected event occurs. You can edit the
    **Pitch** and **Volume** parameters.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 此按钮还附加了一个 **PlaySound** 组件。它允许你在选定的事件发生时选择要播放的音频剪辑。你可以编辑 **音调** 和 **音量** 参数。
- en: Note
  id: totrans-185
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can add as many **PlaySound** components as you want if you need a sound
    to be played whenever the user hovers or clicks on something, for example.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要，你可以添加任意数量的 **PlaySound** 组件，以便在用户悬停或点击某个东西时播放声音，例如。
- en: The play and exit buttons
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 播放和退出按钮
- en: 'We will now add two buttons to our window that will exit or launch the game.
    They will appear as shown in the following screenshot:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将在窗口中添加两个按钮，用于退出或启动游戏。它们将显示如下截图所示：
- en: '![The play and exit buttons](img/8667OT_02_11.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![播放和退出按钮](img/8667OT_02_11.jpg)'
- en: 'We need a GameObject that will manage the game. It will contain the `GameManager.cs`
    script attached in order to manage generic behaviors such as exiting or launching
    the game. Let''s create it first; follow these steps to do so:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个将管理游戏的 GameObject。它将包含用于管理通用行为（如退出或启动游戏）的 `GameManager.cs` 脚本。让我们首先创建它；按照以下步骤进行操作：
- en: 'Create a new GameObject at the root of **Hierarchy** with *Ctlr* + *Shift*
    + *N* and perform the following steps:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 根目录处创建一个新的 GameObject，使用 *Ctlr* + *Shift* + *N* 并执行以下步骤：
- en: Rename it as `GameManager`.
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 `GameManager`。
- en: 'Create and attach a new `GameManager.cs` C# script to it and perform the following
    steps:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并附加一个新的 `GameManager.cs` C# 脚本到它，并执行以下步骤：
- en: Open this new `GameManager.cs` script.
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开这个新的 `GameManager.cs` 脚本。
- en: 'Inside this new script, add this new method called `ExitPressed()` with the
    following code lines:'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个新脚本内部，添加一个名为 `ExitPressed()` 的新方法，代码行如下：
- en: '[PRE0]'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-197
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从你购买的所有 Packt 书籍的账户中下载示例代码文件。[http://www.packtpub.com](http://www.packtpub.com)。如果你在其他地方购买了这本书，你可以访问
    [http://www.packtpub.com/support](http://www.packtpub.com/support) 并注册以将文件直接通过电子邮件发送给你。
- en: 'Now that the exit method is ready, let''s create and configure the two buttons
    as shown in the following steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 现在退出方法已经准备好了，让我们按照以下步骤创建和配置两个按钮：
- en: 'Select the **Button** GameObject and perform the following steps:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **按钮** GameObject 并执行以下步骤：
- en: Rename it as `Exit`.
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 `Exit`。
- en: Drag the **GameManager** GameObject into the **Notify** field.
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **GameManager** GameObject 拖动到 **通知** 字段中。
- en: Choose **GameManager.ExitPressed** in the **Method** field.
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**方法**字段中选择**GameManager.ExitPressed**。
- en: In the **Normal** color tint parameter, change **R** to `185`, **G** to `255`,
    **B** to `255`, and **A** to `255`.
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**正常**颜色色调参数中，将**R**更改为`185`，**G**更改为`255`，**B**更改为`255`，并将**A**更改为`255`。
- en: In the **Hover** color tint parameter, change **R** to `0`, **G** to `220`,
    **B** to `255`, and **A** to `255`.
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**悬停**颜色色调参数中，将**R**更改为`0`，**G**更改为`220`，**B**更改为`255`，并将**A**更改为`255`。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**，将其附加一个组件，并执行以下步骤：
- en: Drag our **Window** GameObject into the **Container** field.
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**窗口**GameObject拖入**容器**字段。
- en: Set the **Side** parameter to **BottomLeft**.
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**边**参数设置为**左下角**。
- en: Set **Pixel Offset** to {`135`, `60`}.
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**像素偏移**设置为{`135`, `60`}。
- en: 'Select our **Exit** button''s child **Background** GameObject and perform the
    following steps:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**退出**按钮的子**背景**GameObject，并执行以下步骤：
- en: Enter **Depth** as `2`.
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**深度**为`2`。
- en: 'Select our **Exit** button''s child **Label** GameObject and perform the following
    steps:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**退出**按钮的子**标签**GameObject，并执行以下步骤：
- en: Change its text to `Exit`.
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为`退出`。
- en: Enter **Depth** as `3`.
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**深度**为`3`。
- en: 'Ok, we have our **Exit** button. Let''s create our **Play** button as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有了**退出**按钮。让我们按照以下步骤创建我们的**播放**按钮：
- en: 'Duplicate the **Exit** button and perform the following steps:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制**退出**按钮并执行以下步骤：
- en: Rename this new duplicate as `Play`.
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个新复制的名称重命名为`播放`。
- en: Click on the **Minus** button next to the UIButton's **Notify** field to remove
    the **GameManager** GameObject from it.
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击UIButton旁边**通知**字段的**减号**按钮，从其中移除**GameManager**GameObject。
- en: Set its **Side** parameter to **BottomRight**.
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**边**参数设置为**右下角**。
- en: Set **Pixel Offset** to {`-135`, `60`}.
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**像素偏移**设置为{`-135`, `60`}。
- en: Attach a Component to it by navigating to **Component** | **NGUI** | **Examples**
    | **Load Level On Click**, and set its **Level Name** string parameter to **Game**.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **NGUI** | **示例** | **点击加载关卡**，将其附加一个组件，并将其**关卡名称**字符串参数设置为**游戏**。
- en: Select our **Play** button's child **Label** GameObject, and change its text
    to `Play`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**播放**按钮的子**标签**GameObject，并将其文本更改为`播放`。
- en: Perfect, now if you build your scene, you will have a functional **Exit** button
    with only one line of code! The **Pixel Offset** parameter maintains our buttons
    at the same distance from the window's borders even if you change resolutions
    or the window's dimensions. We will create our game scene later.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 完美，现在如果您构建场景，您将拥有一个仅用一行代码即可工作的功能**退出**按钮！**像素偏移**参数保持按钮与窗口边界的相同距离，即使您更改分辨率或窗口尺寸。我们将在稍后创建游戏场景。
- en: Note
  id: totrans-225
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 备注
- en: '**Image buttons** can also be created with the Widget Wizard. They are identical
    to normal buttons, except that they use images for the **Normal**, **Hover**,
    **Pressed**, and **Disabled** states instead of color and scale tweens.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像按钮**也可以使用小部件向导创建。它们与普通按钮相同，只是它们使用图像来代替**正常**、**悬停**、**按下**和**禁用**状态的颜色和缩放缓动。'
- en: Text input
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文本输入
- en: 'Now we will learn how to add a text input to create a nickname box. Perform
    the following steps to do so:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何添加文本输入以创建昵称框。执行以下步骤：
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*. Then rename this new child as `Nickname`. It will be our nickname box container.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**面板**GameObject，并使用*Alt* + *Shift* + *N*创建一个新的子项。然后将这个新子项重命名为`昵称`。它将成为我们的昵称框容器。
- en: Navigate to **NGUI** | **Open** | **Widget Wizard**.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**NGUI** | **打开** | **小部件向导**。
- en: From the **Project** view, navigate to **NGUI** | **Examples** | **Atlases**
    | **SciFi**.
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**视图，导航到**NGUI** | **示例** | **图集** | **SciFi**。
- en: Drag the **SciFi Font – Normal** prefab into the **Font** field.
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**SciFi Font – Normal**预制件拖入**字体**字段。
- en: Select the **Input** template.
  id: totrans-233
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**输入**模板。
- en: Set **Sprite (Dark)** as the **Background** parameter.
  id: totrans-234
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**精灵（暗色）**设置为**背景**参数。
- en: With the **Nickname** GameObject selected, click on the **Add To** button.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**昵称**GameObject后，单击**添加到**按钮。
- en: A new widget named **Input** has been added to the scene.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 已向场景中添加了一个名为**输入**的新小部件。
- en: Parameters
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'An **Input** GameObject has been created. Let''s look at its **Inspector**
    parameters:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建一个**输入**GameObject。让我们看看它的**检查器**参数：
- en: '**Input Label**: This is the text label that is to be used for this input.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入标签**：这是用于此输入的文本标签。'
- en: '**Inactive Color**: This is the text color while the text is not selected.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**非活动颜色**：这是文本未选中时的文本颜色。'
- en: '**Active Color**: This is the text color while the text is being edited.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活动颜色**：这是文本正在编辑时的文本颜色。'
- en: '**Default Text**: This is either **Blank** or with the label''s default text.
    **Blank** will delete the label''s text when the **Input** GameObject is selected.'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**默认文本**：这是 **空白** 或带有标签的默认文本。**空白** 将在选择 **输入** GameObject 时删除标签的文本。'
- en: '**Keyboard Type**: This allows the different sets of characters to be authorized.
    This will also change the keyboard layout on mobile platforms.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**键盘类型**：这允许授权不同的字符集。这也会更改移动平台上的键盘布局。'
- en: '**Select on Tab**: Drag into this field the GameObject that you want to be
    selected when the *Tab* key is pressed while editing the input.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**按 Tab 选择**：将想要在按 *Tab* 键编辑输入时被选择的 GameObject 拖入此字段。'
- en: '**Auto-save Key**: This enables the label''s text to be automatically saved
    to the specified `PlayerPrefs()` key.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动保存键**：这使标签的文本能够自动保存到指定的 `PlayerPrefs()` 键。'
- en: '**Max Characters**: This is the number of maximum characters allowed. `0` means
    infinite.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**最大字符数**：这是允许的最大字符数。`0` 表示无限。'
- en: '**Carat Character**: This is the end of text character.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光标字符**：这是文本的末尾字符。'
- en: '**Password**: If you activate this Boolean, the label''s characters will be
    replaced by ***** on the screen.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**密码**：如果您激活此布尔值，标签的字符将在屏幕上被 ***** 替换。'
- en: '**Auto-correct**: This enables or disables autocorrection on mobile platforms.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动更正**：这可以在移动平台上启用或禁用自动更正。'
- en: Creating a nickname box
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个昵称框
- en: 'Let''s use this text input to create a nickname box that will look like the
    following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用这个文本输入来创建一个看起来像以下截图的昵称框：
- en: '![Creating a nickname box](img/8667OT_02_12.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![创建昵称框](img/8667OT_02_12.jpg)'
- en: 'Let''s create the nickname box seen in the preceding screenshot. Perform the
    following steps to do so:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建前面截图中所见的昵称框。执行以下步骤以创建：
- en: 'Duplicate the **Window** GameObject and perform the following steps:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 **窗口** GameObject 并执行以下步骤：
- en: Rename the new duplicate as `Background`.
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新复制的名称重命名为 `Background`。
- en: Drag it into the **Nickname** container GameObject.
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其拖入 **昵称** 容器 GameObject。
- en: Enter **Depth** as `2`.
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **深度** 为 `2`。
- en: Set **Dimensions** to `440` x `120`.
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **尺寸** 设置为 `440` x `120`。
- en: 'Select our **Input** GameObject and perform the following steps:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的 **输入** GameObject 并执行以下步骤：
- en: Reset its **Box Collider** component's center to {`0`, `0`, `0`}.
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其 **盒式碰撞器** 组件的中心重置为 `{`0`, `0`, `0`}`。
- en: Type in `Nickname` for the **Auto-save Key** parameter.
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **自动保存键** 参数中输入 `Nickname`。
- en: Enter **Max Characters** as `25`.
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **最大字符数** 为 `25`。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **NGUI** | **附加** | **锚点** 来将其附加到组件上，并执行以下步骤：
- en: Drag the **Background** GameObject from **Nickname** inside the **Container**
    field.
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Background** GameObject 从 **昵称** 内拖动到 **容器** 字段中。
- en: Set the **Pixel Offset** to {`0`, `-17`}.
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **像素偏移** 设置为 `{`0`, `-17`}`。
- en: 'Duplicate the **Label** child GameObject from **Title** and perform the following
    steps:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **标题** 复制 **标签** 子 GameObject 并执行以下步骤：
- en: Drag it inside the **Nickname** GameObject.
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其拖入 **昵称** GameObject 内。
- en: Change its text to `[AAFFFF]Nickname`.
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为 `[AAFFFF]昵称`。
- en: Drag the **Background** GameObject from **Nickname** inside the **Container**
    field.
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **背景** GameObject 从 **昵称** 内拖动到 **容器** 字段中。
- en: Set the **Side** parameter to **Top**.
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **侧边** 参数设置为 **顶部**。
- en: Set **Pixel Offset** to {`0`, `-32`}.
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **像素偏移** 设置为 `{`0`, `-32`}`。
- en: 'Select the **Background** child GameObject from **Input** and perform the following
    steps:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **输入** 选择 **背景** 子 GameObject 并执行以下步骤：
- en: Enter **Depth** as `3`.
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **深度** 为 `3`。
- en: Set **Pivot** to **Center** (middle button + middle button).
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **轴点** 设置为 **中心**（中间按钮 + 中间按钮）。
- en: Reset the **Transform** field's position to {`0`, `0`, `0`}.
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **变换** 字段的定位重置为 `{`0`, `0`, `0`}`。
- en: In the **Color Tint** parameter, change **R** to `100`, **G** to `230`, **B**
    to `255`, and **A** to `255`.
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **颜色色调** 参数中，将 **R** 设置为 `100`，**G** 设置为 `230`，**B** 设置为 `255`，**A** 设置为 `255`。
- en: 'Select the **Label** child GameObject from **Input** and perform the following
    steps:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **输入** 选择 **标签** 子 GameObject 并执行以下步骤：
- en: Enter **Depth** as `4`.
  id: totrans-278
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **深度** 为 `4`。
- en: Set **Pivot** to **Center** (middle button + middle button).
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **轴点** 设置为 **中心**（中间按钮 + 中间按钮）。
- en: Reset the **Transform** field's position to {`0`, `0`, `0`}.
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**变换**字段的定位重置为 `{`0`, `0`, `0`}`。
- en: Change the **Label** GameObject's text to `Enter your Name Here`.
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **标签** GameObject 的文本更改为 `在此处输入您的姓名`。
- en: Select the **Nickname** container GameObject.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **昵称** 容器 GameObject。
- en: 'Attach a component to it and navigate to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为其附加一个组件并导航到**NGUI** | **附加** | **锚点**并执行以下步骤：
- en: Drag-and-drop our **Window** GameObject inside the **Container** field.
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**窗口**游戏对象拖入**容器**字段。
- en: Set the **Side** parameter to **Top**.
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**侧边**参数设置为**顶部**。
- en: Set **Pixel Offset** to {`0`, `-220`}.
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**像素偏移**设置为 `{`0`, `-220`}`。
- en: 'Ok, we have a **Nickname** box. Your **Hierarchy** view should look like the
    following screenshot:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们有了**昵称**框。你的**层次结构**视图应该看起来像以下截图：
- en: '![Creating a nickname box](img/8667OT_02_13.jpg)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![创建昵称框](img/8667OT_02_13.jpg)'
- en: The user can enter his nickname, up to 25 characters. If you move or change
    the window's dimensions, our box will move to stay at the same place.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以输入他的昵称，最多25个字符。如果你移动或更改窗口的尺寸，我们的框将移动以保持在同一位置。
- en: Slider
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 滑块
- en: Now let's add a volume slider for the user to move and select his/her volume
    level.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为用户添加一个可以移动和选择音量级别的音量滑块。
- en: 'A slider template is available, enabling you to adjust parameters easily by
    sliding a thumb along a bar. Perform the following steps to create a volume slider:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 可用滑块模板，允许你通过在条上滑动滑块手柄轻松调整参数。按照以下步骤创建音量滑块：
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*.
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**面板**游戏对象并使用*Alt* + *Shift* + *N*创建一个新的子对象。
- en: Rename that new child as `Volume`. It will be our volume settings container.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新子对象重命名为`Volume`。它将成为我们的音量设置容器。
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**NGUI** | **打开** | **小部件向导**并执行以下步骤：
- en: Select the **Slider** template.
  id: totrans-296
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**滑块**模板。
- en: Set the **Dark** Sprite to **Empty**.
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**暗**精灵设置为**空**。
- en: Set the **Light** Sprite to **Full**.
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**光**精灵设置为**全开**。
- en: Set **Highlight** to **Thumb**.
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**高亮**设置为**滑块手柄**。
- en: With the **Volume** GameObject selected, click on the **Add To** button.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**音量**游戏对象后，点击**添加到**按钮。
- en: Parameters
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'A slider has been created. It has 6 parameters as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 已创建滑块。它有6个参数，如下所示：
- en: '**Value**: This is the slider''s current value, which is between 0 and 1.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**值**：这是滑块的当前值，介于0和1之间。'
- en: '**Steps**: This is the number of steps to completely fill or empty the slider.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**步骤**：这是完全填充或清空滑块的步骤数。'
- en: '**Direction**: This is the slider''s fill direction, either **Horizontal**
    or **Vertical**.'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方向**：这是滑块的填充方向，可以是**水平**或**垂直**。'
- en: '**Foreground**: This is the sprite used to fill the slider.'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**前景**：这是用于填充滑块的精灵。'
- en: '**Thumb**: This is the sprite used for the handle to change the slider''s value.
    By leaving this as **null**, a simple progress bar will be created (user cannot
    interact).'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滑块手柄**：这是用于改变滑块值的精灵。通过将其设置为**null**，将创建一个简单的进度条（用户无法交互）。'
- en: '**Notify**: This is the GameObject that lets you choose a method to call when
    there is a change in the slider''s value. When a GameObject is assigned, you may
    choose a method to call on the value change.'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：这是允许你选择在滑块值变化时调用的方法的游戏对象。当分配了游戏对象时，你可以选择在值变化时调用的方法。'
- en: Creating a volume slider
  id: totrans-309
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建音量滑块
- en: 'We can use this slider to create our volume slider, which will look like the
    following screenshot:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个滑块来创建我们的音量滑块，它将看起来像以下截图：
- en: '![Creating a volume slider](img/8667OT_02_14.jpg)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![创建音量滑块](img/8667OT_02_14.jpg)'
- en: 'Proceed with the following steps to create it:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建它：
- en: 'Duplicate the **Background** GameObject from **Nickname** and perform the following
    steps:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**昵称**复制**背景**游戏对象并执行以下步骤：
- en: Drag the duplicate inside the **Volume** container GameObject.
  id: totrans-314
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的对象拖入**音量**容器游戏对象内部。
- en: Set its **Dimensions** to `320` x `135`.
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其**尺寸**设置为`320` x `135`。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**附加一个组件并执行以下步骤：
- en: Drag our **Window** GameObject inside the **Container** field.
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**窗口**游戏对象拖入**容器**字段。
- en: Set the **Pixel Offset** to {`-420`, `-90`}.
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**像素偏移**设置为 `{`-420`, `-90`}`。
- en: 'Duplicate the **Label** GameObject from **Nickname** and perform the following
    steps:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**昵称**复制**标签**游戏对象并执行以下步骤：
- en: Drag it inside the **Volume** GameObject.
  id: totrans-320
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其拖入**音量**游戏对象内部。
- en: Drag our Volume's **Background** GameObject inside the **Container** field.
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的音量**背景**游戏对象拖入**容器**字段。
- en: Change its text to `[AAFFFF]Volume`.
  id: totrans-322
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为`[AAFFFF]音量`。
- en: Select the **Slider** GameObject.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**滑块**游戏对象。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**来将其附加到组件上，并执行以下步骤：
- en: Drag the **Background** GameObject from **Volume** inside the **Container**
    field.
  id: totrans-325
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**背景**GameObject从**音量**拖动到**容器**字段内。
- en: Set **Pixel Offset** to {`-100`, `-23`}.
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**像素偏移**设置为`{-100, -23}`。
- en: 'Select the **Background** GameObject from **Slider** and perform the following
    steps:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**滑块**中选择**背景**GameObject并执行以下步骤：
- en: Enter **Depth** as `3`.
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**深度**设置为`3`。
- en: In the **Color Tint** parameter, change **R** to `80`, **G** to `220`, **B**
    to `85`, and **A** to `255`.
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**改为`80`，**G**改为`220`，**B**改为`85`，并将**A**改为`255`。
- en: 'Select the **Foreground** GameObject from **Slider** and perform the following
    steps:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**滑块**中选择**前景**GameObject并执行以下步骤：
- en: Enter **Depth** as `4`.
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**深度**设置为`4`。
- en: In the **Color Tint** parameter, change **R** to `95`, **G** to `255`, **B**
    to `190`, and **A** to `255`.
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**改为`95`，**G**改为`255`，**B**改为`190`，并将**A**改为`255`。
- en: 'Select the **Thumb** GameObject from the **Slider** and perform the following
    steps:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**滑块**中选择**滑块手柄**GameObject并执行以下步骤：
- en: Enter **Depth** as `5`.
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**深度**设置为`5`。
- en: In the **Color Tint** parameter, change **R** to `100`, **G** to `255`, **B**
    to `250`, and **A** to `255`.
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**改为`100`，**G**改为`255`，**B**改为`250`，并将**A**改为`255`。
- en: 'Ok, we now have a nice volume slider! Your **Hierarchy** view should look like
    the following screenshot:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有一个漂亮的音量滑块！你的**层次结构**视图应该看起来像以下截图：
- en: '![Creating a volume slider](img/8667OT_02_15.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![创建音量滑块](img/8667OT_02_15.jpg)'
- en: 'We will now link it to the game''s volume with a new script. Let''s add some
    music to our main menu. First, add an audio file of your choice to your Unity
    project as shown in the following steps:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用一个新的脚本将其链接到游戏音量。让我们向主菜单添加一些音乐。首先，按照以下步骤将你选择的音频文件添加到Unity项目中：
- en: Select our **Main Camera** GameObject.
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们的**主摄像机**GameObject。
- en: 'Attach a component to it by navigating to **Component** | **Audio** | **AudioSource**
    and perform the following steps:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**组件** | **音频** | **音频源**来将其附加到组件上，并执行以下步骤：
- en: Drag a music file from the **Project** view to the **AudioSource** parameter's
    **Audio Clip** field.
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将音乐文件从**项目**视图拖动到**音频源**参数的**音频剪辑**字段。
- en: 'Select the **Slider** GameObject from **Volume** and perform the following
    steps:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**音量**中选择**滑块**GameObject并执行以下步骤：
- en: Create and attach a new `VolumeManager.cs` C# script to it.
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建并附加一个新的`VolumeManager.cs` C#脚本。
- en: Open this new `VolumeManager.cs` script.
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开这个新的`VolumeManager.cs`脚本。
- en: 'In this new script, we will first need to declare and initialize the necessary
    variables. Add the following variable declarations and the `Awake()` method:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个新脚本中，我们首先需要声明和初始化必要的变量。添加以下变量声明和`Awake()`方法：
- en: '[PRE1]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here we initialized the slider's value to `NGUITools.soundVolume` because this
    float is persistent and will be saved across scenes—even if you exit the game.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将滑块的值初始化为`NGUITools.soundVolume`，因为这个浮点数是持久的，并且将在场景间保存——即使你退出游戏。
- en: 'Now let''s create an `OnVolumeChange()` method that will modify our AudioListener
    method''s volume each time the slider''s value is changed:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个`OnVolumeChange()`方法，每次滑块的值改变时，都会修改我们的AudioListener方法的音量：
- en: '[PRE2]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Ok, the method is ready. We just need to call it each time the slider''s value
    changes. Let''s use the **UISlider** component''s **Notify** field as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，方法已经准备好了。我们只需要在滑块的值每次改变时调用它。让我们使用**UISlider**组件的**通知**字段如下：
- en: 'Select the **Slider** GameObject from **Volume** and perform the following
    steps:'
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**音量**中选择**滑块**GameObject并执行以下步骤：
- en: Drag-and-drop the **Slider** GameObject from **Volume** into the **Notify**
    field.
  id: totrans-352
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**滑块**GameObject从**音量**拖动到**通知**字段。
- en: For the **Method** field, select `VolumeManager.OnVolumeChange`.
  id: totrans-353
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**方法**字段，选择`VolumeManager.OnVolumeChange`。
- en: Now, each time the slider's value is modified, our method will be called.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每次滑块的值被修改时，我们的方法将被调用。
- en: You can hit the Play button; the game's volume will change with the slider.
    The volume is saved even when you exit the game and restart!
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击播放按钮；游戏音量会随着滑块的变化而变化。音量即使在退出游戏并重新启动时也会保存！
- en: Toggle
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换
- en: Now that we have a volume slider, let's add an enable/disable sound checkbox,
    which will turn down the volume to 0 and hide our volume slider.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了音量滑块，让我们添加一个启用/禁用声音的复选框，这将把音量调至0并隐藏我们的音量滑块。
- en: 'First, create a toggle widget as follows:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个如下所示的切换小部件：
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**面板**GameObject并使用*Alt* + *Shift* + *N*创建一个新的子组件。
- en: Rename that new child as `Sound`. It will be our sound toggle container.
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新子对象重命名为`Sound`。它将成为我们的声音切换容器。
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**NGUI** | **打开** | **小部件向导**并执行以下步骤：
- en: Select **Toggle** as **Template**.
  id: totrans-362
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Toggle**作为**模板**。
- en: Select the **Dark** Sprite as **Background**.
  id: totrans-363
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**深色**精灵作为**背景**。
- en: Select the **X** Sprite as **Checkmark**.
  id: totrans-364
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**X**精灵作为**勾选标记**。
- en: With the **Sound** container selected, click on the **Add To** button.
  id: totrans-365
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**声音**容器后，点击**添加到**按钮。
- en: 'A checkbox with a label has just been created as shown in the following screenshot:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 如下截图所示，已创建了一个带有标签的复选框：
- en: '![Toggle](img/8667OT_02_16.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![Toggle](img/8667OT_02_16.jpg)'
- en: Parameters
  id: totrans-368
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'Select our new **Toggle** GameObject. Let''s look at the UIToggle''s **Inspector**
    parameters:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 选择我们新的**Toggle**游戏对象。让我们看看UIToggle的**检查器**参数：
- en: '**Group**: This is the toggle''s group. Toggles of the same group will act
    as radio buttons; only one of them can be checked at once.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分组**：这是切换的分组。同一分组的切换将作为单选按钮操作；一次只能选择其中一个。'
- en: '**Start State**: This defines in which state the toggle will be at the start.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**起始状态**：这定义了切换在开始时的状态。'
- en: '**Animation**: This is the animation that will play when the checkbox changes
    state.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：这是当复选框状态改变时播放的动画。'
- en: '**Sprite**: This lets us choose the widget to be used as a checkmark; we should
    use our **X** sprite here.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**精灵**：这让我们可以选择用作勾选标记的部件；在这里我们应该使用我们的**X**精灵。'
- en: '**Transition**: This is either **Smooth** or **Instant**; uses alpha fade in
    / fade out.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过渡**：这可以是**平滑**或**立即**；使用alpha淡入/淡出。'
- en: '**Notify**: This is the GameObject to notify on when toggled. When a GameObject
    is assigned, you may choose a public method to call on a toggle event.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**通知**：这是在切换时通知的GameObject。当分配GameObject时，您可以选择在切换事件上调用公共方法。'
- en: Creating a sound toggle
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建声音切换
- en: 'We have seen the UIToggle''s parameters. Now we will create this sound toggle
    as shown in the following screenshot:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了UIToggle的参数。现在我们将创建如下截图所示的这个声音切换：
- en: '![Creating a sound toggle](img/8667OT_02_17.jpg)'
  id: totrans-378
  prefs: []
  type: TYPE_IMG
  zh: '![创建声音切换](img/8667OT_02_17.jpg)'
- en: 'Let''s use our recently added **Toggle** GameObject to create the window shown
    here. Follow these steps to do so:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用最近添加的**Toggle**游戏对象来创建这里显示的窗口。按照以下步骤操作：
- en: 'Select both the **Background** and **Label** GameObjects from **Volume** and
    perform the following steps:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**音量**中选择**背景**和**标签**游戏对象并执行以下步骤：
- en: Duplicate them.
  id: totrans-381
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制它们。
- en: Drag-and-drop those new duplicates inside our **Sound** container.
  id: totrans-382
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将那些新复制的副本拖放到我们的**声音**容器内。
- en: Select the **Background** GameObject from **Sound** and enter its UIAnchor's
    **Pixel Offset** parameter as {`-420`, `43`}.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**声音**中选择**背景**游戏对象并输入其UIAnchor的**像素偏移**参数为`{-420, 43}`。
- en: Select the **Label** GameObject from **Sound** and change its text to `[AAFFFF]Sound`.
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**声音**中选择**标签**游戏对象并将其文本更改为`[AAFFFF]声音`。
- en: Select the **Toggle** GameObject and check the **Start State** Boolean in **UIToggle**.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Toggle**游戏对象并检查**UIToggle**中的**起始状态**布尔值。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **附加** | **锚点**附加组件并执行以下步骤：
- en: Drag the **Background** GameObject from **Sound** inside the **Container** field.
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**声音**中的**背景**游戏对象拖放到**容器**字段中。
- en: Enter its **Pixel Offset** parameter as {`-38`, `-20`}.
  id: totrans-388
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其**像素偏移**参数中输入`{-38, -20}`。
- en: Add a component to it by navigating to **NGUI** | **Interaction** | **Toggled
    Objects**, and drag our **Volume** container GameObject into the **Activate**
    array.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到**NGUI** | **交互** | **切换对象**并添加组件，将我们的**音量**容器游戏对象拖放到**激活**数组中。
- en: 'Select the **Background** sprite GameObject from **Toggle** and perform the
    following steps:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Toggle**中选择**背景**精灵游戏对象并执行以下步骤：
- en: Enter **Depth** as `3`.
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**深度**为`3`。
- en: In the **Color Tint** parameter, change **R** to `130`, **G** to `255`, **B**
    to `130`, and **A** to `255`.
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**更改为`130`，**G**更改为`255`，**B**更改为`130`，**A**更改为`255`。
- en: 'Select the **Checkmark** sprite GameObject from **Toggle** and perform the
    following steps:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Toggle**中选择**勾选标记**精灵游戏对象并执行以下步骤：
- en: Enter **Depth** as `4`.
  id: totrans-394
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**深度**为`4`。
- en: In the **Color Tint** parameter, change **R** to `50`, **G** to `255`, **B**
    to `70`, and **A** to `255`.
  id: totrans-395
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**参数中，将**R**更改为`50`，**G**更改为`255`，**B**更改为`70`，**A**更改为`255`。
- en: 'Select the **Label** GameObject from **Toggle** and perform the following steps:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**Toggle**中选择**标签**游戏对象并执行以下步骤：
- en: Enter **Depth** as `3`.
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入**深度**为`3`。
- en: Change its text to `[AAFFFF]Enabled`.
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其文本更改为 `[AAFFFF]Enabled`。
- en: In the **Color Tint** parameter, change **R** to `200`, **G** to `255`, **B**
    to `250`, and **A** to `255`.
  id: totrans-399
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Color Tint** 参数中，将 **R** 更改为 `200`，**G** 更改为 `255`，**B** 更改为 `250`，**A**
    更改为 `255`。
- en: Hit the Play button. We have a nice sound box with a sound toggle checkbox that
    hides/shows the **Volume** box when needed. But it does not turn off the sound
    yet.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮。我们有一个带声音切换复选框的漂亮的声音框，当需要时可以隐藏/显示 **Volume** 框。但它还没有关闭声音。
- en: We need to make some changes to our `VolumeManager.cs` script to correct this.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要对 `VolumeManager.cs` 脚本进行一些修改以纠正这个问题。
- en: 'First, open our `VolumeManager.cs` script. We will add a new `OnSoundToggle()`
    method that will be called when the toggle changes state. It will set the volume
    directly to 0, or to the slider''s value. Add this new method to `VolumeManager.cs`
    as shown in the following code lines:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开我们的 `VolumeManager.cs` 脚本。我们将添加一个新的 `OnSoundToggle()` 方法，当切换状态改变时将被调用。它将直接将音量设置为
    0，或设置为滑块的值。将此新方法添加到 `VolumeManager.cs` 中，如下代码行所示：
- en: '[PRE3]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ok, the previous method will set both our volumes to `0` or the slider's value,
    depending on the toggle's state. Let's link it to our sound's toggle by selecting
    our **Toggle** GameObject and dragging the **Slider** GameObject from **Volume**
    inside the **Notify** field in **UIToggle**, below the **On Value Change** section.
    Then, for the **Method** field, select `VolumeManager.OnSoundToggle`.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，前面的方法将根据切换的状态将我们的音量设置为 `0` 或滑块的值。让我们通过选择我们的 **Toggle** GameObject 并将 **Volume**
    中的 **Slider** GameObject 拖到 **UIToggle** 的 **Notify** 字段中，在 **On Value Change**
    部分下面，将其链接到我们的声音切换。然后，对于 **Method** 字段，选择 `VolumeManager.OnSoundToggle`。
- en: Hit the Play button. That's it. When we click on the **Toggle** checkbox from
    **Volume**, the volume reacts accordingly.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮。就这样。当我们点击 **Volume** 中的 **Toggle** 复选框时，音量会相应地反应。
- en: But if we turn the sound off using the toggle and stop running, when we hit
    Play again, the checkbox is still checked and the volume slider is displayed,
    but the volume is at `0`.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我们使用切换关闭声音并停止运行，当我们再次点击播放时，复选框仍然被选中，音量滑块显示，但音量在 `0`。
- en: 'That''s because our volume is set to 0, but the checkbox is still checked at
    start. Let''s add a simple line of code that will set the start state to `false`
    if the volume is at `0`:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们的音量设置为 `0`，但复选框在开始时仍然被选中。让我们添加一行简单的代码，将起始状态设置为 `false`，如果音量在 `0`：
- en: Open our `VolumeManager.cs` script.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的 `VolumeManager.cs` 脚本。
- en: Declare a new global variable named `public UIToggle soundToggle`.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个新的全局变量 `public UIToggle soundToggle`。
- en: 'At the end of the `Awake()` method, add the following lines of code:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Awake()` 方法的末尾添加以下代码行：
- en: '[PRE4]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the script and return to Unity.
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回到 Unity。
- en: Select the **Slider** GameObject from **Volume**.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Volume** 中选择 **Slider** GameObject。
- en: Drag the**Toggle** GameObject from **Volume** in the volume manager's **Sound
    Toggle** field.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 将 **Volume** 中的 **Toggle** GameObject 拖到音量管理器的 **Sound Toggle** 字段中。
- en: Hit the Play button. That's it. If you disable sound using the toggle and exit
    the Play mode and then launch it again, the checkbox stays unchecked and the volume
    slider is not displayed. Perfect!
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放按钮。就这样。如果你使用切换禁用声音并退出播放模式然后再次启动，复选框保持未选中状态，音量滑块不显示。完美！
- en: Popup list
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹出列表
- en: We will now learn how to create the popup list, see its parameters, and create
    a difficulty selector for our game.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将学习如何创建弹出列表，查看其参数，并为我们的游戏创建一个难度选择器。
- en: Select the **Panel** GameObject and create a new child with *Alt* + *Shift*
    + *N*.
  id: totrans-418
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Panel** GameObject 并使用 *Alt* + *Shift* + *N* 创建一个新的子项。
- en: Rename that new child as `Difficulty`. It's our difficulty box container.
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新子项重命名为 `Difficulty`。它是我们的难度框容器。
- en: 'Navigate to **NGUI** | **Open** | **Widget Wizard** and perform the following
    steps:'
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **NGUI** | **Open** | **Widget Wizard** 并执行以下步骤：
- en: Select **Popup List** as **Template**
  id: totrans-421
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Popup List** 作为 **Template**
- en: Select **Dark** as **Foreground**.
  id: totrans-422
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Foreground** 选择为 **Dark**。
- en: Select **Dark** as **Background**.
  id: totrans-423
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Background** 选择为 **Dark**。
- en: Select the **Highlight** sprite as **Highlight**.
  id: totrans-424
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Highlight** 精灵作为 **Highlight**。
- en: With our **Difficulty** GameObject selected, click on the **Add To** button.
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择我们的 **Difficulty** GameObject 后，点击 **Add To** 按钮。
- en: Parameters
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参数
- en: 'A **Popup List** GameObject has just been created. Let''s look at its parameters:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚创建了一个 **Popup List** GameObject。让我们看看它的参数：
- en: '**Atlas**: This is the atlas used for the popup list''s sprites.'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atlas**：这是用于弹出列表精灵的图集。'
- en: '**Font**: This is the font used for the popup list''s options.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Font**：这是用于弹出列表选项的字体。'
- en: '**Text Label**: This is the label to update when **Popup List** changes selection.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Text Label**：这是在 **Popup List** 更改选择时更新的标签。'
- en: '**Options**: This is the list of options that will pop up—one per line.'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选项**：这是将要弹出的选项列表——每行一个。'
- en: '**Default**: This is the option selected at start.'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Default**：这是启动时选择的选项。'
- en: '**Position**: You may force the list of options to appear `Above` or `Below`
    the Popup List''s button. If this parameter is set to `Auto`, NGUI will choose
    one of both depending on the available space.'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**位置**：您可以强制选项列表出现在弹窗列表按钮的 **Above** 或 **Below**。如果此参数设置为 `Auto`，NGUI 将根据可用空间选择其中之一。'
- en: '**Localized**: This enables localization on options.'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Localized**：这启用了选项的本地化。'
- en: '**Background**: This is the background sprite for the popup list''s options
    container.'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Background**：这是弹窗列表选项容器的背景精灵。'
- en: '**Highlight**: This is the sprite for the currently hovered option.'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Highlight**：这是当前悬停选项的精灵。'
- en: '**Text Color**: This is the options list''s text color tint.'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Text Color**：这是选项列表的文本颜色色调。'
- en: '**Background**: This is the popup list''s background color tint.'
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Background**：这是弹窗列表的背景颜色色调。'
- en: '**Highlight**: This is the hovered option''s background color tint.'
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Highlight**：这是悬停选项的背景颜色色调。'
- en: '**Padding**: This is the padding of the **X** and **Y** options.'
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**填充**：这是 **X** 和 **Y** 选项的填充。'
- en: '**Text Scale**: This is the options'' text scale.'
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Text Scale**：这是选项的文本缩放。'
- en: '**Animated**: If this is unchecked, the options'' display will be instantaneous.'
  id: totrans-442
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Animated**：如果未勾选，选项的显示将是瞬间的。'
- en: '**Notify**: This is the GameObject that lets you choose a method to call when
    the selected option changes.'
  id: totrans-443
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Notify**：这是允许您选择在所选选项更改时调用的方法的 GameObject。'
- en: Below the `UIPopup List` component, we have the usual `UIButton` and `UIPlay
    Sound` components that we have already seen before.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `UIPopup List` 组件下方，我们有之前已经见过的 `UIButton` 和 `UIPlay Sound` 组件。
- en: Note
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A Popup Menu template is also available in the Widget Wizard. The only difference
    is that the menu does not indicate which choice you have selected; the button's
    label is not updated.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: Widget Wizard 中也提供了一个弹窗菜单模板。唯一的区别是，菜单不会指示您已选择了哪个选项；按钮的标签不会更新。
- en: Creating a difficulty selector
  id: totrans-447
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建难度选择器
- en: 'We will now use our new **Popup List** GameObject to select the game''s difficulty
    level as shown in the following screenshot:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将使用我们新的 **Popup List** GameObject 来选择游戏难度，如下截图所示：
- en: '![Creating a difficulty selector](img/8667OT_02_18.jpg)'
  id: totrans-449
  prefs: []
  type: TYPE_IMG
  zh: '![创建难度选择器](img/8667OT_02_18.jpg)'
- en: 'Let''s create this difficulty selector as shown in the following steps:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建此难度选择器：
- en: 'Select the **Background** and **Label** GameObjects from **Sound** and perform
    the following steps:'
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Sound** 中选择 **Background** 和 **Label** GameObject 并执行以下步骤：
- en: Duplicate them.
  id: totrans-452
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制它们。
- en: Drag-and-drop them into our **Difficulty** container.
  id: totrans-453
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们拖放到我们的 **Difficulty** 容器中。
- en: Select the **Background** GameObject from **Difficulty** and enter its **Pixel
    Offset** parameter to {`420`, `43`}.
  id: totrans-454
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Difficulty** 中选择 **Background** GameObject，并输入其 **Pixel Offset** 参数为 `{`420`,
    `43`}`。
- en: Select the **Label** GameObject from **Difficulty** and change its text to `[AAFFFF]Difficulty.`
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **Difficulty** 中选择 **Label** GameObject 并将其文本更改为 `[AAFFFF]Difficulty.`。
- en: 'Select our **Popup List** in the **Hierarchy** view and perform the following
    steps:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 视图中选择我们的 **Popup List** 并执行以下步骤：
- en: Rename it as `Popup`.
  id: totrans-457
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其重命名为 `Popup`。
- en: Type in `Normal` and `Hard` separated by a line.
  id: totrans-458
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `Normal` 和 `Hard`，用一行分隔。
- en: In **Text Color**, change **R** to `190`, **G** to `250`, **B** to `255`, and
    **A** to `255`.
  id: totrans-459
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Text Color** 中，将 **R** 改为 `190`，**G** 改为 `250`，**B** 改为 `255`，**A** 改为 `255`。
- en: In **Background**, change **R** to `70`, **G** to `250`, **B** to `255`, and
    **A** to `255`.
  id: totrans-460
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Background** 中，将 **R** 改为 `70`，**G** 改为 `250`，**B** 改为 `255`，**A** 改为 `255`。
- en: In **Highlight**, change **R** to `70`, **G** to `255`, **B** to `150`, and
    **A** to `255`.
  id: totrans-461
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Highlight** 中，将 **R** 改为 `70`，**G** 改为 `255`，**B** 改为 `150`，**A** 改为 `255`。
- en: In **Hover**, change **R** to `70`, **G** to `255`, **B** to `150`, and **A**
    to `255`.
  id: totrans-462
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hover** 中，将 **R** 改为 `70`，**G** 改为 `255`，**B** 改为 `150`，**A** 改为 `255`。
- en: 'Attach a component to it by navigating to **NGUI** | **Attach** | **Anchor**
    and perform the following steps:'
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到 **NGUI** | **Attach** | **Anchor** 为其附加一个组件，并执行以下步骤：
- en: Drag the **Background** GameObject from **Difficulty** in the **Container**
    field.
  id: totrans-464
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **Difficulty** 中的 **Background** GameObject 拖放到 **Container** 字段。
- en: Enter **Pixel Offset** as {`-76`, `-20`}.
  id: totrans-465
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 **Pixel Offset** 为 `{`-76`, `-20`}`。
- en: 'Select our popup''s **Sprite** GameObject and perform the following steps:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们弹窗的 **Sprite** GameObject 并执行以下步骤：
- en: In **Color Tint**, change **R** to `170`, **G** to `255`, **B** to `190`, and
    **A** to `255`.
  id: totrans-467
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**中，将**R**改为`170`，**G**改为`255`，**B**改为`190`，**A**改为`255`。
- en: Enter **Depth** as `3`.
  id: totrans-468
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**深度**设置为`3`。
- en: 'Select our popup''s **Label** GameObject and perform the following steps:'
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们弹窗的**标签**GameObject并执行以下步骤：
- en: In **Color Tint**, change **R** to `135`, **G** to `255`, **B** to `170`, and
    **A** to `255`.
  id: totrans-470
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**颜色色调**中，将**R**改为`135`，**G**改为`255`，**B**改为`170`，**A**改为`255`。
- en: Enter **Depth** as `4`.
  id: totrans-471
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**深度**设置为`4`。
- en: 'Ok, we now have a **Popup List** GameObject that lets us select the game''s
    difficulty level. Your **Hierarchy** panel should look like the following screenshot:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在有一个**弹窗列表**GameObject，它允许我们选择游戏的难度级别。你的**层次结构**面板应该看起来像以下截图：
- en: '![Creating a difficulty selector](img/8667OT_02_19.jpg)'
  id: totrans-473
  prefs: []
  type: TYPE_IMG
  zh: '![创建难度选择器](img/8667OT_02_19.jpg)'
- en: 'Now it''s time to link it to a method that will take that difficulty into account.
    Do this by performing the following steps:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候将其链接到一个考虑难度级别的方法了。通过执行以下步骤来实现：
- en: Open our `GameManager.cs` script.
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们的`GameManager.cs`脚本。
- en: 'Declare a new enum for our difficulty levels as follows:'
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式声明一个新的枚举来存储我们的难度级别：
- en: '[PRE5]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Declare a new `Difficulty` variable to store the current difficulty as follows:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个新的`Difficulty`变量来存储当前的难度级别，如下所示：
- en: '[PRE6]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We used a static variable because it won't be destroyed when loading the game
    scene. By default, the difficulty level is set to **Normal**.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了一个静态变量，因为它在加载游戏场景时不会被销毁。默认情况下，难度级别设置为**正常**。
- en: 'Now we need to add the `OnDifficultyChange()` method that will change our `Difficulty`
    variable when **Popup List** changes state as follows:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要添加一个`OnDifficultyChange()`方法，当**弹窗列表**状态改变时，它会更改我们的`难度`变量，如下所示：
- en: '[PRE7]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Our method is ready; we need to call it when **Popup List** changes state.
    Do so by performing the following steps:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方法已经准备好了；我们需要在**弹窗列表**状态改变时调用它。通过执行以下步骤来实现：
- en: Save all the modified scripts and return to Unity.
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存所有修改后的脚本并返回Unity。
- en: 'Select the **Popup List** GameObjectfrom **Difficulty** and perform the following
    steps:'
  id: totrans-485
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**难度**中选择**弹窗列表**GameObject并执行以下步骤：
- en: Drag our **GameManager** GameObject into the **Notify** field.
  id: totrans-486
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将我们的**GameManager**GameObject拖入**通知**字段。
- en: For the **Method** field, select `GameManager.OnDifficultyChange`.
  id: totrans-487
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**方法**字段，选择`GameManager.OnDifficultyChange`。
- en: Now, the **Popup List** GameObject will change the `Difficulty` variable according
    to its value. We will be able to access this static variable once we're in the
    game.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，**弹窗列表**GameObject将根据其值更改`难度`变量。一旦我们进入游戏，我们就能访问这个静态变量。
- en: Summary
  id: totrans-489
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to create and configure most of NGUI's
    widgets—sprites, labels, buttons, text inputs, sliders, toggles, and popup lists.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何创建和配置NGUI的大多数小部件——精灵、标签、按钮、文本输入、滑块、切换和弹窗列表。
- en: We now have a main menu with interactive elements. We also used NGUI's notification
    event system to change variables in code and register the user's choices.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个带有交互元素的主菜单。我们还使用了NGUI的通知事件系统来在代码中更改变量并注册用户的选项。
- en: 'We used **UIAnchors** and **UIStretch** components to properly position our
    widgets—we just have to move each box''s background sprite to move the entire
    element. This is much more effective than having to move each GameObject manually!
    You should have a main menu that looks like the following screenshot:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了**UI锚点**和**UI拉伸**组件来正确地定位我们的小部件——我们只需要移动每个框的背景精灵就可以移动整个元素。这比手动移动每个GameObject要有效得多！你应该有一个看起来像以下截图的主菜单：
- en: '![Summary](img/8667OT_02_20.jpg)'
  id: totrans-493
  prefs: []
  type: TYPE_IMG
  zh: '![总结](img/8667OT_02_20.jpg)'
- en: Ok, now it is time to enhance our UI experience and make this better. Let's
    move on to [Chapter 3](ch03.html "Chapter 3. Enhancing your UI"), *Enhancing your
    UI*.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在是我们增强UI体验并使其变得更好的时候了。让我们继续到[第3章](ch03.html "第3章。增强你的UI")，*增强你的UI*。
