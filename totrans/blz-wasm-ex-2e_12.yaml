- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Building an Expense Tracker Using the EditForm Component
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用EditForm组件构建费用跟踪器
- en: Most applications require some data input by the user. The Blazor WebAssembly
    framework includes a component that makes it easy to create data input forms and
    validate the data on those forms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序都需要用户输入一些数据。Blazor WebAssembly框架包含一个组件，可以轻松创建数据输入表单并验证这些表单上的数据。
- en: In this chapter, we will learn how to use the **EditForm** component and the
    various built-in input components. We will also learn how to use the built-in
    input validation components in conjunction with **Data Annotations** to validate
    the data on the form. Finally, we will learn how to use the **NavigationLock**
    component to prevent users from losing their edits if they navigate away from
    the form before they have saved their updates.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用**EditForm**组件和多种内置输入组件。我们还将学习如何结合**数据注释**使用内置输入验证组件来验证表单上的数据。最后，我们将学习如何使用**NavigationLock**组件来防止用户在未保存更新之前离开表单时丢失他们的编辑。
- en: The project that we’ll create in this chapter will be a travel expense tracker.
    We will use a multi-project architecture to separate the Blazor WebAssembly app
    from the ASP.NET Web API endpoints. The page used to add and edit expenses will
    use the `EditForm` component as well as many of the built-in input components.
    It will also use the built-in validation components to validate the data on the
    form. Finally, we will add a `NavigationLock` component to remind the user to
    save their data before navigating to another page.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将创建的项目将是一个旅行费用跟踪器。我们将使用多项目架构将Blazor WebAssembly应用程序与ASP.NET Web API端点分离。用于添加和编辑费用的页面将使用`EditForm`组件以及许多内置输入组件。它还将使用内置的验证组件来验证表单上的数据。最后，我们将添加`NavigationLock`组件，以提醒用户在导航到另一个页面之前保存他们的数据。
- en: Editing data?
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 正在编辑数据？
- en: ''
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The EditForm component
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: EditForm组件
- en: ''
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: makes it effortless!
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 让它变得轻而易举！
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Creating a data entry form
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数据输入表单
- en: Using the built-in input components
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用内置输入组件
- en: Using the validation components
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用验证组件
- en: Locking navigation
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 锁定导航
- en: Creating the expense tracker project
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建费用跟踪器项目
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*. You will also
    need access to a version of SQL Server. For instructions on how to install the
    free edition of SQL Server 2022, refer to *Chapter 1*, *Introduction to Blazor
    WebAssembly*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成此项目，您需要在您的PC上安装Visual Studio 2022。有关如何安装Visual Studio 2022免费社区版的说明，请参阅*第1章*，*Blazor
    WebAssembly简介*。您还需要访问SQL Server的一个版本。有关如何安装SQL Server 2022免费版的说明，请参阅*第1章*，*Blazor
    WebAssembly简介*。
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12).'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在以下GitHub仓库中找到：[https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter12).
- en: 'The Code in Action video is available here: [https://packt.link/Ch12](https://packt.link/Ch12).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: “代码在行动”视频在此处提供：[https://packt.link/Ch12](https://packt.link/Ch12).
- en: Creating a data entry form
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建数据输入表单
- en: In the previous chapters of this book, we used the standard HTML `form` element
    to collect user input. However, the Blazor WebAssembly framework provides an enhanced
    version of the standard HTML `form` element called the `EditForm` component.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们使用了标准的HTML `form`元素来收集用户输入。然而，Blazor WebAssembly框架提供了一个增强版的HTML `form`元素，称为`EditForm`组件。
- en: 'The `EditForm` component not only manages forms but also coordinates both validation
    and submission events. The following code shows a simple `EditForm` element:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm`组件不仅管理表单，还协调验证和提交事件。以下代码展示了简单的`EditForm`元素：'
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This is the HTML that is rendered by the proceeding `EditForm` component:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是前一个`EditForm`组件渲染的HTML：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In the preceding `EditForm` component, the `Model` property specifies the top-level
    model object for the form. The `OnValidSubmit` property specifies the callback
    that will be invoked when the form is submitted without any validation errors.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的 `EditForm` 组件中，`Model` 属性指定了表单的顶级模型对象。`OnValidSubmit` 属性指定了当表单提交且没有验证错误时将被调用的回调函数。
- en: Binding a form
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 绑定表单
- en: 'The `EditContext` property of the `EditForm` class is used to track the metadata
    about the editing process. The metadata includes the fields that have been modified
    and the current validation messages. There are two ways to assign the `EditContext`
    property:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm` 类的 `EditContext` 属性用于跟踪编辑过程中的元数据。元数据包括已修改的字段和当前的验证消息。有两种方式来分配 `EditContext`
    属性：'
- en: Assign the `Model` property of the `EditForm` class. If we use the `Model` property,
    the edit context will be automatically constructed using the model.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配 `EditForm` 类的 `Model` 属性。如果我们使用 `Model` 属性，编辑上下文将自动使用模型构建。
- en: Assign the `EditContext` property of the `EditForm` class.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配 `EditForm` 类的 `EditContext` 属性。
- en: 'The following code shows how to render the preceding `EditForm` component using
    the `EditContext` property instead of the `Model` property:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何使用 `EditContext` 属性而不是 `Model` 属性来渲染前面的 `EditForm` 组件：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '**IMPORTANT NOTE**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: If we attempt to assign both the `Model` property and the `EditContext` property
    of an `EditForm` component, a runtime error will be generated.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试为 `EditForm` 组件的 `Model` 属性和 `EditContext` 属性赋值，将会生成运行时错误。
- en: Submitting a form
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提交表单
- en: 'There are three properties of the `EditForm` component that are involved with
    form submission:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm` 组件有三个属性与表单提交相关：'
- en: '`OnValidSubmit`: The callback that is invoked when the form is submitted and
    the `EditContext` property is valid.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnValidSubmit`：当表单提交且 `EditContext` 属性有效时被调用的回调函数。'
- en: '`OnInvalidSubmit`: The callback that is invoked when the form is submitted
    and the `EditContext` property is invalid.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnInvalidSubmit`：当表单提交且 `EditContext` 属性无效时被调用的回调函数。'
- en: '`OnSubmit`: The callback that is invoked when the form is submitted. When we
    use this property, we need to manually trigger validation by using the Validate
    method of the `EditContext` property of the `EditForm`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnSubmit`：当表单提交时被调用的回调函数。当我们使用此属性时，我们需要手动通过使用 `EditForm` 的 `EditContext` 属性的
    Validate 方法来触发验证。'
- en: We can use the `OnValidSubmit` and `OnInvalidSubmit` callbacks together or separately,
    or we can use the `OnSubmit` callback by itself. If we use the `OnSubmit` callback,
    we are responsible for performing the form validation. Otherwise, the form validation
    is performed by the `EditForm` component.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `OnValidSubmit` 和 `OnInvalidSubmit` 回调一起或单独使用，或者我们可以单独使用 `OnSubmit` 回调。如果我们使用
    `OnSubmit` 回调，我们负责执行表单验证。否则，表单验证将由 `EditForm` 组件执行。
- en: '**IMPORTANT NOTE**'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: If we set an `OnSubmit` callback, any callbacks set using `OnValidSubmit` or
    `OnInvalidSubmit` are ignored.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们设置了 `OnSubmit` 回调，使用 `OnValidSubmit` 或 `OnInvalidSubmit` 设置的任何回调都将被忽略。
- en: There are quite a few built-in input components that we can use in conjunction
    with the `EditForm` component.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用许多内置的输入组件与 `EditForm` 组件一起使用。
- en: Using the built-in input components
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用内置的输入组件
- en: 'The following table lists the built-in input components along with the HTML
    that they render:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格列出了内置的输入组件及其渲染的 HTML：
- en: '| Input Component | HTML Rendered |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 输入组件 | HTML 渲染 |'
- en: '| `InputCheckbox` | `<input type="checkbox">` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `InputCheckbox` | `<input type="checkbox">` |'
- en: '| `InputDate<TValue>` | `<input type="date">` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| `InputDate<TValue>` | `<input type="date">` |'
- en: '| `InputFile` | `<input type="file">` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| `InputFile` | `<input type="file">` |'
- en: '| `InputNumber<TValue>` | `<input type="number">` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| `InputNumber<TValue>` | `<input type="number">` |'
- en: '| `InputRadio<TValue>` | `<input type="radio">` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| `InputRadio<TValue>` | `<input type="radio">` |'
- en: '| `InputRadioGroup<TValue>` | Group of child `InputRadio<TValue>` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| `InputRadioGroup<TValue>` | 子 `InputRadio<TValue>` 组 |'
- en: '| `InputSelect<TValue>` | `<select>` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| `InputSelect<TValue>` | `<select>` |'
- en: '| `InputText` | `<input>` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| `InputText` | `<input>` |'
- en: '| `InputTextArea` | `<textarea>` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| `InputTextArea` | `<textarea>` |'
- en: 'Table 12.1: Built-in input components'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 表 12.1：内置输入组件
- en: All the built-in input components can receive and validate user inputs when
    placed within an `EditForm` element. The `EditForm` cascades its `EditContext`
    to its descendants. Also, all of the built-in input components support arbitrary
    attributes. Therefore, any attribute that does not match a component parameter
    is added to the HTML element that is rendered by the component.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所有内置输入组件都可以在`EditForm`元素内接收和验证用户输入。`EditForm`将其`EditContext`级联到其子元素。此外，所有内置输入组件都支持任意属性。因此，任何不匹配组件参数的属性都将添加到组件渲染的HTML元素中。
- en: InputCheckbox
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputCheckbox
- en: The `InputCheckbox` component is for editing Boolean values. It does not allow
    binding to a nullable property.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputCheckbox`组件用于编辑布尔值。它不允许绑定到可空属性。'
- en: InputDate
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputDate
- en: The `InputDate` component is for editing date values. The supported date types
    are `DateTime` and `DateTimeOffset`. If a datatype that is not supported is entered
    into this component, the framework will create a validation error.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputDate`组件用于编辑日期值。支持的日期类型是`DateTime`和`DateTimeOffset`。如果输入了不支持的数据类型，框架将创建一个验证错误。'
- en: InputFile
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputFile
- en: The `InputFile` component is for uploading files.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputFile`组件用于上传文件。'
- en: '**TIP**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: The project in this chapter does not use the `InputFile` component. For more
    information on using the `InputFile` component, refer to *Chapter 9*, *Uploading
    and Reading an Excel File*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目不使用`InputFile`组件。有关使用`InputFile`组件的更多信息，请参阅*第9章*，*上传和读取Excel文件*。
- en: InputNumber
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputNumber
- en: The `InputNumber` component is for editing numeric values. The supported numeric
    types are `Int32`, `Int64`, `Single`, `Double`, and `Decimal`. If a datatype that
    is not supported is entered into this component, the framework will create a validation
    error unless the target property is nullable. In that case, the invalid input
    will be considered `null` and the text in the input will be cleared.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputNumber`组件用于编辑数值。支持的数值类型是`Int32`、`Int64`、`Single`、`Double`和`Decimal`。如果输入了不支持的数据类型，框架将创建一个验证错误，除非目标属性是可空的。在这种情况下，无效的输入将被视为`null`，并且输入框中的文本将被清除。'
- en: InputRadio
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputRadio
- en: The `InputRadio` component is for selecting a value from a group of choices.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputRadio`组件用于从一组选项中选择一个值。'
- en: InputRadioGroup
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputRadioGroup
- en: The `InputRadioGroup` component is for grouping `InputRadio` components.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputRadioGroup`组件用于对`InputRadio`组件进行分组。'
- en: InputSelect
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputSelect
- en: The `InputSelect` component is for rendering a dropdown selection. The `InputSelect`
    component includes a `ChildContent` property for rendering the content inside
    of the `select` element.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputSelect`组件用于渲染下拉选择。`InputSelect`组件包括一个`ChildContent`属性，用于在`select`元素内部渲染内容。'
- en: If the option you select does not have a value attribute since its value is
    null, the text content is treated as the value. This is standard HTML. However,
    when using two-way binding with Blazor, you must provide a `string.Empty` as the
    value for null values to prevent the value of the text from being returned.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择的选项没有值属性，因为其值为null，则文本内容被视为值。这是标准的HTML。然而，当使用Blazor的双向绑定时，您必须提供`string.Empty`作为null值的值，以防止文本的值被返回。
- en: InputText
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputText
- en: The `InputText` component is for editing string values. The `InputText` component
    does not specify a type. This allows you to use any of the available input types
    for the HTML input element, such as `password`, `tel`, or `color`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputText`组件用于编辑字符串值。`InputText`组件没有指定类型。这允许您使用HTML输入元素的所有可用输入类型，例如`password`、`tel`或`color`。'
- en: The default type for an HTML input element is `text`.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: HTML输入元素的默认类型是`text`。
- en: InputTextArea
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: InputTextArea
- en: The `InputTextArea` component is for editing string values using multiline input.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`InputTextArea`组件用于使用多行输入编辑字符串值。'
- en: By using the various built-in input components in conjunction with their parent
    `EditForm`, we can easily add an input form to a Blazor WebAssembly app.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过结合使用各种内置输入组件及其父组件`EditForm`，我们可以轻松地将输入表单添加到Blazor WebAssembly应用中。
- en: The input data is validated both when the form is submitted and when the data
    is changed. To communicate the validation status of the input form, we can use
    the built-in validation components.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 输入数据在表单提交时和数据更改时都会进行验证。为了传达输入表单的验证状态，我们可以使用内置的验证组件。
- en: Using the validation components
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用验证组件
- en: 'Input validation is an important aspect of every application since it prevents
    users from entering invalid data. The Blazor WebAssembly framework uses data annotations
    for input validation. There are over 30 built-in Data Annotation attributes. This
    is a list of the ones that we will be using in this project:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 输入验证是每个应用程序的重要方面，因为它可以防止用户输入无效数据。Blazor WebAssembly 框架使用数据注释进行输入验证。有超过 30 个内置的数据注释属性。以下是本项目将使用到的属性列表：
- en: '`Required`: This attribute specifies that a value is required.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Required`：此属性指定值是必需的。'
- en: '`Display`: This attribute specifies the string to display in error messages.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Display`：此属性指定错误消息中显示的字符串。'
- en: '`MaxLength`: This attribute specifies the maximum string length allowed.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MaxLength`：此属性指定允许的最大字符串长度。'
- en: '`Range`: This attribute specifies the maximum and minimum values.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Range`：此属性指定最大和最小值。'
- en: 'The following code demonstrates the use of a few data annotations:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了几个数据注释的使用：
- en: '[PRE3]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the preceding example, both the `Date` field and the `Amount` field are required.
    Also, the `Amount` field must be a value between 0 and 500 inclusive, or the indicated
    error message is displayed.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`日期` 字段和 `金额` 字段都是必需的。此外，`金额` 字段必须是一个介于 0 到 500（含）之间的值，否则将显示指示的错误消息。
- en: 'There are two built-in validation components:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 有两个内置的验证组件：
- en: '`ValidationMessage`: This component displays all the validation messages for
    the indicated field within the `EditContext`.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ValidationMessage`：此组件在 `EditContext` 中显示指示字段的全部验证消息。'
- en: '`ValidationSummary`: This component displays all the validation messages for
    all the fields within the `EditContext`. It provides a summary of the validation
    messages.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ValidationSummary`：此组件在 `EditContext` 中显示所有字段的全部验证消息。它提供了验证消息的摘要。'
- en: The location of the validation component within the page determines where it
    will be rendered. In the following example, the `ValidationMessage` is placed
    after each related input component and the `ValidationSummary` is placed after
    the **Save** button.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 验证组件在页面中的位置决定了它将被渲染的位置。在以下示例中，`ValidationMessage` 放置在每个相关输入组件之后，而 `ValidationSummary`
    放置在 **保存** 按钮之后。
- en: 'This is a sample `ValidationMessage` component:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 `ValidationMessage` 组件：
- en: '[PRE4]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is a sample `ValidationSummary` component:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 `ValidationSummary` 组件：
- en: '[PRE5]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: An `EditForm` component can include both types of validation components. However,
    to use either type of validation component, we must add `DataAnnotationsValidator`
    to the `EditForm` component.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`EditForm` 组件可以包含两种类型的验证组件。然而，要使用任何类型的验证组件，我们必须将 `DataAnnotationsValidator`
    添加到 `EditForm` 组件中。'
- en: 'The following screenshot shows the results of both a `ValidationSummary` component
    and individual `ValidationMesssage` components:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了 `ValidationSummary` 组件和单个 `ValidationMesssage` 组件的结果：
- en: '![Shape  Description automatically generated with medium confidence](img/B18471_12_01.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![形状描述自动生成，中等置信度](img/B18471_12_01.png)'
- en: 'Figure 12.1: Validation components'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：验证组件
- en: The validation components make it easy to add validation to a Blazor WebAssembly
    app.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 验证组件使得向 Blazor WebAssembly 应用程序添加验证变得容易。
- en: Locking navigation
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 锁定导航
- en: How many times have you completed a form and forgotten to save it before navigating
    to another page? It happens to everyone. The `NavigationLock` component can be
    used to notify the user that they are about to navigate away from the current
    page and allow them to cancel that action. It does that by intercepting navigation
    events.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你完成表单后忘记在导航到另一页之前保存它的次数有多少？这种情况每个人都可能遇到。`NavigationLock` 组件可以用来通知用户他们即将离开当前页面，并允许他们取消该操作。它是通过拦截导航事件来做到这一点的。
- en: 'This is a sample `NavigationLock`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个示例 `NavigationLock`：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `NavigationLock` class includes two properties:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`NavigationLock` 类包含两个属性：'
- en: '`ConfirmExternalNavigation` – gets or sets whether the user should be asked
    to confirm external navigations. The default value is `false`.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfirmExternalNavigation` – 获取或设置是否应要求用户确认外部导航。默认值是 `false`。'
- en: '`OnBeforeInternalNavigation` – gets or sets the callback that is invoked when
    an internal navigation event occurs.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`OnBeforeInternalNavigation` – 获取或设置在发生内部导航事件时调用的回调。'
- en: 'This is a sample method that is invoked from the `OnBeforeInternalNavigation`
    property:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个从 `OnBeforeInternalNavigation` 属性调用的示例方法：
- en: '[PRE7]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding code, the `IsNavigationIntercepted` method is used to determine
    whether the navigation was intercepted from a link. If it was intercepted from
    a link, a JavaScript `confirm` dialog is displayed. If the user does not confirm
    that they want to leave the page, the `PreventNavigation` method prevents the
    navigation from occurring.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`IsNavigationIntercepted`方法用于确定导航是否被链接拦截。如果是从链接拦截的，则显示一个 JavaScript
    `confirm` 对话框。如果用户未确认他们想要离开页面，则`PreventNavigation`方法将阻止导航发生。
- en: '**TIP**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**提示**'
- en: For more information on invoking JavaScript functions from .NET methods, refer
    to *Chapter 5*, *Building a Local Storage Service Using JavaScript Interoperability
    (JS Interop).*
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 有关从 .NET 方法调用 JavaScript 函数的更多信息，请参阅*第 5 章*，*使用 JavaScript 互操作性 (JS Interop)
    构建本地存储服务*。
- en: Now let’s get a quick overview of the project that we are going to build in
    this chapter.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们快速了解一下本章将要构建的项目。
- en: Creating the expense tracker project
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建支出跟踪项目
- en: In this chapter, we will build a project to track travel expenses. We will be
    able to view, add, and edit expenses. The expenses will be stored in a Microsoft
    SQL Server database.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将构建一个用于跟踪旅行支出的项目。我们将能够查看、添加和编辑支出。支出将存储在 Microsoft SQL Server 数据库中。
- en: 'This is a screenshot of the `Home` page from the completed application:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是已完成的应用程序的“主页”截图：
- en: '![Table  Description automatically generated](img/B18471_12_02.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![表格  自动生成的描述](img/B18471_12_02.png)'
- en: 'Figure 12.2: Home page of the expenses tracker'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.2：支出跟踪器的主页
- en: 'This is a screenshot of the `Add Expense` page from the completed application:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是已完成应用程序的“添加支出”页面截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_03.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_03.png)'
- en: 'Figure 12.3: Add Expense page of expense tracker'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.3：支出跟踪器的添加支出页面
- en: The build time for this project is approximately 60 minutes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的构建时间大约为 60 分钟。
- en: Project overview
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目概述
- en: The `ExpenseTracker` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create a hosted Blazor WebAssembly project. First,
    we will add Bootstrap and a tabbed menu. Then, we will add the classes and API
    controllers needed for our project. We will add a table to the `Home` page to
    display the current list of expenses. We will use the `EditForm` component in
    conjunction with many of the built-in input components to add and edit the expenses.
    Finally, we will add a `NavigationLock` component to prevent the user from losing
    their edits by navigating to another page.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 将使用 Microsoft 的**Blazor WebAssembly App Empty**项目模板创建`ExpenseTracker`项目，以创建一个托管的
    Blazor WebAssembly 项目。首先，我们将添加 Bootstrap 和选项卡菜单。然后，我们将添加项目所需的类和 API 控制器。我们将在“主页”上添加一个表格来显示当前的支出列表。我们将使用`EditForm`组件与许多内置输入组件一起添加和编辑支出。最后，我们将添加一个`NavigationLock`组件以防止用户在导航到另一个页面时丢失他们的编辑。
- en: Create the expense tracker project
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建支出跟踪项目
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个新的 Blazor WebAssembly 应用程序。我们按照以下步骤进行：
- en: Open Visual Studio 2022.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2022。
- en: Click the **Create a new project** button.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新项目**按钮。
- en: Press *Alt*+*S* to enter the search for templates textbox.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Alt*+*S*键进入搜索模板文本框。
- en: Enter `Blazor` and press the *Enter* key.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`Blazor`并按*Enter*键。
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了**Blazor WebAssembly App Empty**项目模板：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_12_04.png)'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息  自动生成的描述](img/B18471_12_04.png)'
- en: 'Figure 12.4: Blazor WebAssembly App Empty project template'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.4：Blazor WebAssembly App Empty 项目模板
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Blazor WebAssembly App Empty**项目模板并点击**下一步**按钮。
- en: Enter `ExpenseTracker` in the **Project name** textbox and click the **Next**
    button.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目名称**文本框中输入`ExpenseTracker`并点击**下一步**按钮。
- en: 'This is a screenshot of the dialog used to configure our new project:'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是配置我们新项目的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_05.png)'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_05.png)'
- en: 'Figure 12.5: Configure your new project dialog'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.5：配置新项目对话框
- en: '**TIP**'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: In the preceding example, we placed the `ExpenseTracker` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们将`ExpenseTracker`项目放置在`E:/Blazor`文件夹中。然而，此项目的位置并不重要。
- en: Select **.NET 7.0** as the version of the `Framework` to use.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**.NET 7.0**作为要使用的`Framework`版本。
- en: Check the **Configure for HTTPS** checkbox.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**配置为HTTPS**复选框。
- en: Check the **ASP.NET Core Hosted** checkbox.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**ASP.NET Core Hosted**复选框。
- en: Uncheck the **Progressive Web Application** checkbox.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择**渐进式Web应用程序**复选框。
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是用于收集有关我们新项目附加信息的对话框截图：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_06.png)'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_06.png)'
- en: 'Figure 12.6: Additional Information Dialog'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.6：附加信息对话框
- en: Click the **Create** button.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: We have now created a hosted **ExpenseTracker** Blazor WebAssembly project.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们现在已创建了一个托管的**ExpenseTracker** Blazor WebAssembly项目。
- en: 'The **ExpenseTracker** solution comprises three different projects. The following
    screenshot of Visual Studio’s **Solution Explorer** shows the three projects that
    are in the solution:'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**ExpenseTracker**解决方案包含三个不同的项目。以下Visual Studio的**解决方案资源管理器**截图显示了解决方案中的三个项目：'
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_07.png)'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_07.png)'
- en: 'Figure 12.7: Solution Explorer'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.7：解决方案资源管理器
- en: Right-click the **ExpenseTracker.Server** project and select the **Set as Startup
    Project** option from the menu.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击**ExpenseTracker.Server**项目，从菜单中选择**设置为启动项目**选项。
- en: We have created the **ExpenseTracker** solution and set the **ExpenseTracker.Server**
    project as the startup project. Now we need to work on our UI. We will use `Bootstrap`
    to style our controls.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已创建**ExpenseTracker**解决方案，并将**ExpenseTracker.Server**项目设置为启动项目。现在我们需要处理我们的UI。我们将使用`Bootstrap`来设计我们的控件。
- en: Install Bootstrap
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Bootstrap
- en: 'We need to install `Bootstrap` into our web app. We do this as follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在我们的Web应用程序中安装`Bootstrap`。我们这样做如下：
- en: Right-click the `ExpenseTracker.Client/wwwroot/css` folder and select the **Add**,
    **Client-Side Library** option from the menu.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ExpenseTracker.Client/wwwroot/css`文件夹，从菜单中选择**添加**，**客户端库**选项。
- en: Enter `bootstrap` into the **Library** search textbox and press the *Enter*
    key.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**库**搜索文本框中输入`bootstrap`并按*Enter*键。
- en: Select **Choose specific files**.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**选择特定文件**。
- en: Select only the **css** files, as shown in the following screenshot:![Graphical
    user interface, application, email  Description automatically generated](img/B18471_12_08.png)
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只选择如图所示的**css**文件：![图形用户界面，应用程序，电子邮件  自动生成的描述](img/B18471_12_08.png)
- en: 'Figure 12.8: Add Client-Side Library dialog'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.8：添加客户端库对话框
- en: '**TIP**'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**提示**'
- en: Although the preceding screenshot has version 5.2.3 of Bootstrap selected, you
    can use any version of Bootstrap 5 to complete this project.
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然前面的截图选择了Bootstrap的5.2.3版本，但您可以使用Bootstrap 5的任何版本来完成此项目。
- en: Click the **Install** button.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**按钮。
- en: '**IMPORTANT NOTE**'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: After you install `Bootstrap`, a new folder will be added to the `wwwroot/css`
    folder. This new folder contains all the CSS files needed for `Bootstrap`. We
    will only be using the `bootstrap.min.css` file in this project.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装`Bootstrap`后，将在`wwwroot/css`文件夹中添加一个新文件夹。这个新文件夹包含所有用于`Bootstrap`的CSS文件。在本项目中，我们只将使用`bootstrap.min.css`文件。
- en: Open the `ExpenseTracker.Client/wwwroot/index.html` file.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ExpenseTracker.Client/wwwroot/index.html`文件。
- en: 'Add the following markup to the `head` element before the link to the `css/app.css`
    stylesheet:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在链接到`css/app.css`样式的`head`元素之前添加以下标记：
- en: '[PRE8]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have installed `Bootstrap`. Now we will add the classes to store the expense
    information.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已安装`Bootstrap`。现在我们将添加类来存储费用信息。
- en: Add the classes
  id: totrans-174
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加以下类
- en: 'We need to add both an `ExpenseType` class and an `Expense` class. We do this
    as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个`ExpenseType`类和一个`Expense`类。我们这样做如下：
- en: Right-click the `ExpenseTracker.Shared` folder and select the **Add**, **Class**
    option from the menu.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ExpenseTracker.Shared`文件夹，从菜单中选择**添加**，**类**选项。
- en: Name the new class `ExpenseType`.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为`ExpenseType`。
- en: Click the **Add** button.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Make the class public by adding the `public` modifier:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`public`修饰符使类公开：
- en: '[PRE9]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following properties to the `ExpenseType` class:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`ExpenseType`类添加以下属性：
- en: '[PRE10]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Right-click the `ExpenseTracker.Shared` folder and select the **Add**, **Class**
    option from the menu.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ExpenseTracker.Shared`文件夹，从菜单中选择**添加**，**类**选项。
- en: Name the new class `Expense`.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新类命名为`Expense`。
- en: Click the **Add** button.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'Make the class public by adding the `public` modifier:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过添加`public`修饰符使类公开：
- en: '[PRE11]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the following `using` statement:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`using`语句：
- en: '[PRE12]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add the following properties to the `Expense` class:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下属性添加到`Expense`类中：
- en: '[PRE13]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In the preceding code, we have used data annotations to add some simple data
    validation. `Date`, `Vendor`, `ExpenseTypeId`, and `Amount` are all required.
    The maximum length of `Vendor` is 100 characters. The display name for `ExpenseTypeId`
    is `ExpenseType`. The `Amount` of the expense is capped at 500.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用了数据注释来添加一些简单的数据验证。`Date`、`Vendor`、`ExpenseTypeId`和`Amount`都是必需的。`Vendor`的最大长度为100个字符。`ExpenseTypeId`的显示名称为`ExpenseType`。费用的`Amount`上限为500。
- en: From the **Build** menu, select the **Build Solution** option.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**构建**菜单中选择**构建解决方案**选项。
- en: We have now added both the `ExpenseType` class and the `Expense` class and built
    our application. Now we need to configure the ASP.NET Web API endpoints.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已添加了`ExpenseType`类和`Expense`类，并构建了我们的应用程序。现在我们需要配置ASP.NET Web API端点。
- en: Add the API controllers
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加API控制器
- en: 'We need to add an API controller for each of the new classes. We do this as
    follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要为每个新类添加一个API控制器。我们这样做如下：
- en: Right-click the `ExpenseTracker.Server` project and select the **Add**, **New
    Folder** option from the menu.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ExpenseTracker.Server`项目，从菜单中选择**添加**，**新建文件夹**选项。
- en: Name the new folder `Controllers`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件夹命名为`Controllers`。
- en: Right-click the `ExpenseTracker.Server.Contollers` folder and select the **Add**,
    **Controller** option from the menu.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ExpenseTracker.Server.Controllers`文件夹，从菜单中选择**添加**，**控制器**选项。
- en: Select the **API Controller with actions, using Entity Framework** option.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用Entity Framework的API控制器和操作**选项。
- en: 'The following screenshot of the **Add New Scaffolded Item** dialog has the
    **API Controller with actions, using Entity Framework** option highlighted:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了**添加新模板项**对话框，其中**使用Entity Framework的API控制器和操作**选项被突出显示：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18471_12_09.png)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，团队  自动生成的描述](img/B18471_12_09.png)'
- en: 'Figure 12.9: Add New Scaffolded Item dialog'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.9：添加新模板项对话框
- en: Click the **Add** button.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: Set **Model class** to **ExpenseType (ExpenseTracker.Shared)**.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**模型类**设置为**ExpenseType (ExpenseTracker.Shared)**。
- en: 'Click the **Add data context** button to open the **Add Data Context** dialog:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加数据上下文**按钮以打开**添加数据上下文**对话框：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_10.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_10.png)'
- en: 'Figure 12.10: Add API Controller with actions, using the Entity Framework dialog'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：添加API控制器和操作，使用Entity Framework对话框
- en: Click the **Add** button to accept the default values.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮以接受默认值。
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_11.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_11.png)'
- en: 'Figure 12.11: Add Data Context dialog'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11：添加数据上下文对话框
- en: Click the **Add** button on the **Add API Controller with actions, using Entity
    Framework** dialog.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加API控制器和操作，使用Entity Framework**对话框中点击**添加**按钮。
- en: We have created the `ExpenseTypeController` class. Now we need to repeat the
    preceding steps to create the `ExpenseController` class.
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们已创建了`ExpenseTypeController`类。现在我们需要重复前面的步骤来创建`ExpenseController`类。
- en: Right-click the `ExpenseTracker.Server.Controllers` folder and select the **Add**,
    **Controller** option from the menu.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`ExpenseTracker.Server.Controllers`文件夹，从菜单中选择**添加**，**控制器**选项。
- en: Select the **API Controller with actions**, **using Entity Framework** option.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**使用Entity Framework的API控制器和操作**选项。
- en: Click the **Add** button.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: Set **Model class** to **Expense (ExpenseTracker.Shared)**.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**模型类**设置为**Expense (ExpenseTracker.Shared)**。
- en: Click the **Add** button.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: We have added two new controllers to provide the API endpoints that our application
    will use. For more information on using ASP.NET Web API, refer to *Chapter 11*,
    *Building a Task Manager Using ASP.NET Web API*.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已添加了两个新的控制器，以提供应用程序将使用的API端点。有关使用ASP.NET Web API的更多信息，请参阅*第11章*，*使用ASP.NET
    Web API构建任务管理器*。
- en: Next, we need to create the SQL Server database.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建SQL Server数据库。
- en: Create the SQL Server database
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建SQL Server数据库
- en: 'We need to create the SQL Server database and add a table for the expenses
    and a table for the expense types. We do this as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建 SQL Server 数据库并为支出和支出类型添加一个表。我们这样做如下：
- en: Open the `ExpenseTracker.Server/appsettings.json` file.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ExpenseTracker.Server/appsettings.json` 文件。
- en: 'Update the connection string to the following:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新连接字符串如下：
- en: '[PRE14]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Replace the `{Server name}` placeholder with the name of your SQL Server.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `{Server name}` 占位符替换为你的 SQL Server 名称。
- en: '**IMPORTANT NOTE**'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**重要提示**'
- en: Although we are using SQL Server Express 2022, it does not matter what version
    of SQL Server you use for this project.
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 虽然我们正在使用 SQL Server Express 2022，但对于此项目来说，你使用什么版本的 SQL Server 都无关紧要。
- en: Open the `ExpenseTracker.Server.Data/ExpenseTrackerServerContext.cs` file.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ExpenseTracker.Server.Data/ExpenseTrackerServerContext.cs` 文件。
- en: 'Add the following `OnModelCreating` method:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下 `OnModelCreating` 方法：
- en: '[PRE15]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding code will seed the `ExpenseType` table.
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将为 `ExpenseType` 表添加种子数据。
- en: From the **Tools** menu, select the **NuGet Package Manager**, **Package Manager
    Console** option.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **工具** 菜单中选择 **NuGet 包管理器**，**包管理控制台** 选项。
- en: In the **Package Manager Console**, verify that the **Default project** is set
    to **ExpenseTracker.Server**.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **包管理控制台** 中，验证 **默认项目** 是否设置为 **ExpenseTracker.Server**。
- en: 'Execute the following commands in the **Package Manager Console**:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **包管理控制台** 中执行以下命令：
- en: '[PRE16]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The preceding commands use `Entity Framework` `migrations` to update SQL Server.
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的命令使用 `Entity Framework` `迁移` 来更新 SQL Server。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 组合键以不带调试模式启动应用程序。
- en: Add `/api/expensetypes` to the address bar and press *Enter*.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在地址栏中添加 `/api/expensetypes` 并按 *Enter* 键。
- en: 'The following screenshot shows the JSON that is returned by `ExpenseTypesController`:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 `ExpenseTypesController` 返回的 JSON：
- en: '![A picture containing text  Description automatically generated](img/B18471_12_12.png)'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![包含文本的图片 描述由自动生成](img/B18471_12_12.png)'
- en: 'Figure 12.12: JSON returned by the ExpenseTypes API controller'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.12：ExpenseTypes API 控制器返回的 JSON
- en: Close the browser.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: We have created a new database on SQL Server, added two tables, and populated
    one of the tables with seed data. After we finished setting up SQL Server, we
    tested that `ExpenseTypesController` works. Finally, we are ready to create a
    component to display the expenses that are stored in SQL Server.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在 SQL Server 上创建了一个新数据库，添加了两个表，并使用种子数据填充了一个表。在完成设置 SQL Server 后，我们测试了 `ExpenseTypesController`
    是否正常工作。最后，我们准备创建一个组件来显示存储在 SQL Server 中的支出。
- en: View the expenses
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看支出
- en: 'We need to add a table to the **Home** page to display the list of expenses.
    We do this as follows:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 **主页** 中添加一个表格来显示支出列表。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `ExpenseTracker.Client.Pages/Index.razor` page.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ExpenseTracker.Client.Pages/Index.razor` 页面。
- en: Remove the `h1` element.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除 `h1` 元素。
- en: 'Add the following code:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE17]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code defines `expenses` as a `List<Expense>` and checks to see
    if it is null or empty. If it is null, it renders the loading message, and if
    it is empty, it renders the **None Found** message.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码将 `expenses` 定义为 `List<Expense>` 并检查它是否为空或为空。如果是空的，它将渲染加载信息；如果是空的，它将渲染
    **未找到** 信息。
- en: 'Add the following `OnInitializedAsync` method to the code block:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向代码块中添加以下 `OnInitializedAsync` 方法：
- en: '[PRE18]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The preceding code populates the `expenses` object by using the `GetFromJsonAsync`
    method of the `HttpClient`. For more information on the `HttpClient` refer to
    *Chapter 11*, *Building a Task Manager User ASP.NET Web API*.
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码通过使用 `HttpClient` 的 `GetFromJsonAsync` 方法来填充 `expenses` 对象。有关 `HttpClient`
    的更多信息，请参阅 *第11章*，*构建任务管理器用户 ASP.NET Web API*。
- en: 'Add the following `table` element to the `else` statement:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `else` 语句中添加以下 `table` 元素：
- en: '[PRE19]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the following `thead` element to the `table` element:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `table` 元素中添加以下 `thead` 元素：
- en: '[PRE20]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the following `tbody` element to the `table` element after the `thead`
    element:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `thead` 元素之后添加以下 `tbody` 元素到 `table` 元素中：
- en: '[PRE21]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding code loops through each of the `Expense` objects in the collection
    and displays them as rows in a table. If the expense is not yet paid, the row
    is highlighted in red by using the `table-danger` class.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 之前的代码遍历集合中的每个 `Expense` 对象，并将它们作为表格中的行显示。如果支出尚未支付，则该行将使用 `table-danger` 类突出显示为红色。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 组合键以不带调试模式启动应用程序。
- en: 'This is a screenshot of our application:'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是我们的应用程序的截图：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_12_13.png)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、聊天或文本消息  描述自动生成](img/B18471_12_13.png)'
- en: 'Figure 12.13: Home page of the ExpenseTracker'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 12.13：ExpenseTracker 的主页
- en: Close the browser window.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器窗口。
- en: We have added the ability to display the expenses in a table on the `Home` page.
    Next, we need to add the ability to add expenses.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了在 `Home` 页面上以表格形式显示费用的功能。接下来，我们需要添加添加费用的功能。
- en: Add the edit expense component
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加编辑费用组件
- en: 'We need to add a component to enable us to add and edit expenses. We do this
    as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个组件以使我们能够添加和编辑费用。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio。
- en: Open the `ExpenseTracker.Client.MainLayout.razor` page.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ExpenseTracker.Client.MainLayout.razor` 页面。
- en: 'Add the following markup before the `main` element:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main` 元素之前添加以下标记：
- en: '[PRE22]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding markup uses `Bootstrap` to render a tabbed interface with two
    options: **Home** and **Add Expense**.'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上述标记使用 `Bootstrap` 渲染具有两个选项的选项卡界面：**主页** 和 **添加费用**。
- en: 'Update the main element to the following to add some padding to the rendered
    element:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新主元素如下以添加一些填充到渲染元素：
- en: '[PRE23]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Right-click the `ExpenseTracker.Client.Pages` folder and select the **Add**,
    **Razor Component** option from the menu.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击 `ExpenseTracker.Client.Pages` 文件夹，并从菜单中选择 **添加**、**Razor 组件** 选项。
- en: Name the new component `ExpenseEdit`.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新组件命名为 `ExpenseEdit`。
- en: Click the **Add** button.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **添加** 按钮。
- en: 'Update the markup to the following:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新标记如下：
- en: '[PRE24]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding code displays `EditForm` if the component is ready. It uses the
    value of the `id` parameter to determine if the form is performing an add or an
    edit.
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码在组件准备就绪时显示 `EditForm`。它使用 `id` 参数的值来确定表单是在执行添加操作还是编辑操作。
- en: 'Add the following code to the code block:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块中：
- en: '[PRE25]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add the following `OnInitializedAsync` method to the code block:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `OnInitializedAsync` 方法添加到代码块中：
- en: '[PRE26]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The preceding code initializes both the `types` object and the `expense` object.
    Once they have both been initialized, the value of `ready` is set to `true`.
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码初始化了 `types` 对象和 `expense` 对象。一旦它们都被初始化，`ready` 的值被设置为 `true`。
- en: 'Add the following code to the `try` block:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `try` 块中：
- en: '[PRE27]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The preceding code initializes the expense object.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码初始化了费用对象。
- en: 'Add the following `HandleValidSubmit` method to the code block:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下 `HandleValidSubmit` 方法添加到代码块中：
- en: '[PRE28]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The preceding code adds new expenses by using the `PostAsJsonAsync` method and
    updates existing expenses by using the `PutAsJsonAsync` method. If the relevant
    method is successful, the user is returned to the **Home** page. Otherwise, an
    error message is displayed.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码通过使用 `PostAsJsonAsync` 方法添加新费用，并通过使用 `PutAsJsonAsync` 方法更新现有费用。如果相关方法成功，用户将被返回到
    **主页**。否则，将显示错误消息。
- en: We have completed the code for this component, but `EditForm` is still empty.
    We now need to add some markup to `EditForm`.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了此组件的代码，但 `EditForm` 仍然为空。我们现在需要向 `EditForm` 添加一些标记。
- en: Add the input components
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加输入组件
- en: 'We need to add input components to the `EditForm` element. We do this as follows:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在 `EditForm` 元素中添加输入组件。我们这样做如下：
- en: 'Add the following markup to `EditForm` to input the `Date` property:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以输入 `Date` 属性：
- en: '[PRE29]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the following markup to `EditForm` to input the `Vendor` property:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以输入 `Vendor` 属性：
- en: '[PRE30]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add the following markup to `EditForm` to input the `Description` property:'
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以输入 `Description` 属性：
- en: '[PRE31]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add the following markup to `EditForm` to input the `ExpenseTypeId` property:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以输入 `ExpenseTypeId` 属性：
- en: '[PRE32]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following markup to `EditForm` to input the `Amount` property:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以输入 `Amount` 属性：
- en: '[PRE33]'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add the following markup to `EditForm` to input the `Paid` property:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以输入 `Paid` 属性：
- en: '[PRE34]'
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Add the following markup to `EditForm` for the `Submit` button:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 的 `Submit` 按钮中：
- en: '[PRE35]'
  id: totrans-311
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Add the following markup to `EditForm` to add the validation summary:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下标记添加到 `EditForm` 中以添加验证摘要：
- en: '[PRE36]'
  id: totrans-313
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Open the `ExpenseTracker.Client.wwroot/css/app.css` file.
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `ExpenseTracker.Client.wwroot/css/app.css` 文件。
- en: 'Add the following styles:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下样式：
- en: '[PRE37]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding styles provide validation styling for the related elements and
    change the color of the `h2` elements to dark blue.
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述样式为相关元素提供验证样式，并将 `h2` 元素的颜色更改为深蓝色。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl*+*F5* 以不带调试启动应用程序。
- en: Select the **Add Expense** link.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **添加费用** 链接。
- en: Click the **Save** button.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存** 按钮。
- en: 'The following screenshot shows the validation errors:'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了验证错误：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_12_14.png)'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18471_12_14.png)'
- en: 'Figure 12.14: Data validation for the ExpenseEdit component'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.14：ExpenseEdit组件的数据验证
- en: Test the edit expense component
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试编辑支出组件
- en: Add a valid expense.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个有效的支出。
- en: Click the **Save** button.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。
- en: If the expense is valid, clicking the **Save** button will save the expense
    to the SQL Server database and return the user to the **Home** page.
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果支出有效，点击**保存**按钮将支出保存到SQL Server数据库，并将用户返回到**主页**。
- en: Click the **Edit** link next to the new expense.
  id: totrans-328
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击新支出旁边的**编辑**链接。
- en: Modify the expense.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改支出。
- en: Click the **Save** button.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。
- en: Click the **Add Expense** link.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加支出**链接。
- en: Add another valid expense.
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个有效的支出。
- en: Click the **Save** button.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。
- en: Click the **Add Expense** link.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加支出**链接。
- en: Add another valid expense but do not click the **Save** button.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个有效的支出，但不要点击**保存**按钮。
- en: Click the **Home** link.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主页**链接。
- en: Click the **Add Expense** link.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加支出**链接。
- en: The valid expense is gone.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的支出已消失。
- en: If the user enters data and navigates away from the page before they click the
    **Save** button, all their data entry is lost. To help prevent this from happening,
    we can lock their navigation by using the `NavigationLock` component.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户在点击**保存**按钮之前离开页面，他们所有的数据输入都会丢失。为了防止这种情况发生，我们可以通过使用`NavigationLock`组件来锁定他们的导航。
- en: Lock navigation
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 锁定导航
- en: 'We need to add a `NavigationLock` component. We do this as follows:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要添加一个`NavigationLock`组件。我们这样做如下：
- en: Return to Visual Studio.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Visual Studio。
- en: Open the `ExpenseTracker.Client.Pages/ExpenseEdit.razor` page.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`ExpenseTracker.Client.Pages/ExpenseEdit.razor`页面。
- en: 'Add the following `@inject` directive:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下`@inject`指令：
- en: '[PRE38]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the following `NavigationLock` below the `@inject` directives:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`@inject`指令下方添加以下`NavigationLock`：
- en: '[PRE39]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Add the following code to the code block:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到代码块中：
- en: '[PRE40]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The preceding code uses JavaScript to display a confirm dialog when the user
    uses a link to navigate away from the current page.
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码使用JavaScript在用户使用链接离开当前页面时显示确认对话框。
- en: Press *Ctrl*+*F5* to start the application without debugging.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl*+*F5*启动应用程序，不进行调试。
- en: Select the **Add Expense** link.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**添加支出**链接。
- en: Add a valid expense.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个有效的支出。
- en: Click the **Home** link.
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**主页**链接。
- en: 'The following `confirm` dialog will be displayed:'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将显示以下`确认`对话框：
- en: '![Graphical user interface, text, application, Word  Description automatically
    generated](img/B18471_12_15.png)'
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，Word  自动生成的描述](img/B18471_12_15.png)'
- en: 'Figure 12.15: Confirm dialog'
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图12.15：确认对话框
- en: Click the **Cancel** button to cancel navigation.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**取消**按钮取消导航。
- en: We have completed the expense tracker project.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了支出跟踪项目。
- en: Summary
  id: totrans-360
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: You should now be able to use the `EditForm` component in conjunction with the
    built-in input components to create an input data form. You should also be comfortable
    with the built-in validation components. Finally, you should understand how to
    lock the navigation.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您应该能够使用`EditForm`组件与内置输入组件一起创建输入数据表单。您还应该熟悉内置验证组件。最后，您应该了解如何锁定导航。
- en: In this chapter, we introduced the built-in `EditForm` component, various input
    components, and the validation components. We also introduced a component that
    can be used to lock the user’s navigation. After that, we used the **Blazor WebAssembly
    App** project template to create a multi-project solution. We added a couple of
    classes and a couple of API controllers. Next, we configured SQL Server by updating
    the connection string to the database and using **Entity Framework** migrations.
    We updated the `Home` page to display the list of expenses. We added a new page
    that included an `EditForm` component and many of the built-in input components
    to input, validate, and submit the expenses. Finally, we added a `NavigationLock`
    component.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了内置的`EditForm`组件、各种输入组件和验证组件。我们还介绍了一个可以用来锁定用户导航的组件。之后，我们使用**Blazor
    WebAssembly App**项目模板创建了一个多项目解决方案。我们添加了一些类和一些API控制器。接下来，我们通过更新数据库的连接字符串和使用**Entity
    Framework**迁移来配置SQL Server。我们更新了`Home`页面以显示支出列表。我们添加了一个包含`EditForm`组件和许多内置输入组件的新页面，用于输入、验证和提交支出。最后，我们添加了一个`NavigationLock`组件。
- en: We can apply our new skills to add data input and validation to any Blazor WebAssembly
    app.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将我们的新技能应用到任何 Blazor WebAssembly 应用程序中，以添加数据输入和验证。
- en: The next step is to start building your own web apps. To stay up to date and
    learn more about Blazor WebAssembly, visit [https://blazor.net](https://blazor.net),
    and read the *ASP.NET Blog* at [https://devblogs.microsoft.com/dotnet/category/aspnet/](https://devblogs.microsoft.com/dotnet/category/aspnet/).
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是开始构建您自己的 Web 应用程序。为了保持最新状态并了解更多关于 Blazor WebAssembly 的信息，请访问 [https://blazor.net](https://blazor.net)，并阅读
    [https://devblogs.microsoft.com/dotnet/category/aspnet/](https://devblogs.microsoft.com/dotnet/category/aspnet/)
    上的 *ASP.NET 博客*。
- en: We hope you enjoyed the book and wish you every success!
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望您喜欢这本书，并祝您一切顺利！
- en: Questions
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions are provided for your consideration:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题供您考虑：
- en: What are the advantages of using the built-in input components?
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置输入组件的优点是什么？
- en: How would you update the `HandleBeforeInternalNav` method to only display the
    confirm dialog if there are unsaved changes?
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会如何更新 `HandleBeforeInternalNav` 方法，以便只有在存在未保存的更改时才显示确认对话框？
- en: What is the purpose of the `EditForm` component?
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`EditForm` 组件的目的是什么？'
- en: Further reading
  id: totrans-371
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following resources provide more information concerning the topics in this
    chapter:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了关于本章主题的更多信息：
- en: For more information on ASP.NET Core component forms, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms).
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 ASP.NET Core 组件表单的更多信息，请参阅[https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.forms)。
- en: For more information on data annotations, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations).
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于数据注释的更多信息，请参阅[https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations](https://learn.microsoft.com/en-us/dotnet/api/system.componentmodel.dataannotations)。
- en: For more information on routing, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing).
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于路由的更多信息，请参阅[https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.routing)。
- en: Join our community on Discord
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的 Discord 社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们社区的 Discord 空间，与作者和其他读者进行讨论：
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
- en: '![](img/Discord_QR.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Discord_QR.png)'
