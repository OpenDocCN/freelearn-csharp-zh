- en: What AR is and How to Get Set up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book begins with some introductory information and theory regarding **Augmented
    Reality** (**AR**). Unfortunately, we can't just jump right into programming without
    first properly tackling the fundamentals. Without knowing the fundamentals and
    theory behind how AR projects work, we would not be able to fully understand how
    the technology works or how to take advantage of some of the more abstract features
    of the technology. This doesn't mean that you wouldn't be able to use the technology,
    just that there are many underlying features that would be difficult to grasp
    at more advanced levels.
  prefs: []
  type: TYPE_NORMAL
- en: This book and its code files are set up with the experienced programmer in mind.
    There are optimization strategies employed and esoteric language constructs used
    that beginner programmers may not immediately understand. If you have not been
    studying programming for at least two years and have not used C# extensively during
    that period, I suggest having a reference manual or two at hand in order to clarify
    any programming terms or syntax usage that you are unfamiliar with. Some of the
    best sources for really diving into the C# language are the C# Language Specification ([https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf](https://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf))
    and *Learning C# By Developing Games with Unity 2017* ([https://www.packtpub.com/game-development/learning-c-7-developing-games-unity-2017-third-edition](https://www.packtpub.com/game-development/learning-c-7-developing-games-unity-2017-third-edition)).
  prefs: []
  type: TYPE_NORMAL
- en: Please be aware that at least two projects in this book will require the use
    of Xcode and will require a macOS and iOS device to compile and run properly.
    If you do not have, at the bare minimum, a 2011 model or later macOS, you should
    skip implementing the examples in the chapters and sections that deal with ARKit
    entirely, as you will not be able to follow along with the book. Feel free to
    read the sections, though, as there is always something to learn, even if you
    can't follow the examples.
  prefs: []
  type: TYPE_NORMAL
- en: The version of Unity3D we will be using for this book is Unity 2017.2.0f3 (64-bit)
    for both Windows 10 and macOS. We will be using Windows 10 version 1703 build
    number 15063.726 to build for Android, and macOS High Sierra (version 10.13) for
    building for iOS, as these are the latest versions of both operating systems at
    the time of writing this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'The core information we will go over is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Which AR toolkits are available for usage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get started with each toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the pros and cons of each toolkit are
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reasons for developing AR applications and games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Available AR packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity3D has several options readily available via plugins for creating AR applications
    and games:'
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia AR Starter Kit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARCore (Tango)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARToolKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ARKit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It should be noted that Vuforia Starter Kit has been fully integrated into Unity3D
    and is quite easy to jump right into creating projects with. ARKit and ARCore,
    however, are slightly different. Because they are still in the experimental and
    early developmental phases, Apple and Google have not released full and proper
    SDKs for Unity Technologies to incorporate into the engine.
  prefs: []
  type: TYPE_NORMAL
- en: There is a plugin that exists for both of them that you will have to compile
    to get it to work with your project for Apple and Android devices, and we will
    go into how to compile and integrate into Unity3D to get it to work appropriately
    later in this chapter. For now, it is good to know that there is a little bit
    more setup involved with getting AR to work with iOS and Android.
  prefs: []
  type: TYPE_NORMAL
- en: With the introduction out of the way, we can finally begin to really talk about
    AR, what it is exactly, and how to set up Unity3D to take advantage of the SDKs
    available to create your own AR games and applications. Without further ado, let's
    define what AR actually is.
  prefs: []
  type: TYPE_NORMAL
- en: Defining AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'AR is augmented reality. Augmented reality is taking some form of reality and
    changing it in a specific way to enhance the experience. What augmented reality
    typically refers to is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sound:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96fb24bc-8ff9-4f95-a150-34c0fc7ecc28.png)'
  prefs: []
  type: TYPE_IMG
- en: Sound perception
  prefs: []
  type: TYPE_NORMAL
- en: 'Video:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf81cab4-6b43-4f2c-9108-45d30769ecd1.png)'
  prefs: []
  type: TYPE_IMG
- en: The text in this image is not important. We are just showcasing the video perception
    overlay
  prefs: []
  type: TYPE_NORMAL
- en: 'Graphics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/849c7abc-735f-4321-b04d-96b7cc32c5fd.png)'
  prefs: []
  type: TYPE_IMG
- en: The text in this image is not important. We are just showcasing the Graphic
    perception overlay
  prefs: []
  type: TYPE_NORMAL
- en: 'Haptics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1ea208f7-4d11-4c87-92c9-be14c5f44aa1.png)'
  prefs: []
  type: TYPE_IMG
- en: Haptic perception
  prefs: []
  type: TYPE_NORMAL
- en: 'GPS data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0fc552b5-7eec-4dfa-8bd7-7ee3ee4d4ffe.jpg)'
  prefs: []
  type: TYPE_IMG
- en: GPS perception
  prefs: []
  type: TYPE_NORMAL
- en: This means that we could boost visual graphics of an object and view it in a
    different perspective than what we are accustomed to, or we could add something
    that isn't there. The video is a little bit different, as it requires the software
    to interface with specialized hardware, such as glasses, cell phones, HUDs, and
    other devices.
  prefs: []
  type: TYPE_NORMAL
- en: We could boost the auditory aspect of the world around us. We could take words
    we see in one language and have it say those words in another, or we could pick
    up those faint sounds that we always hear and tune out, then amplify them and
    really bring them to the forefront.
  prefs: []
  type: TYPE_NORMAL
- en: Haptic perception is a little more difficult, but it could be achieved with
    sensors that emulate touch. We could make something vibrate softly or harshly
    to simulate various effects, or we could make the game or application entirely
    touch- or motion-sensor-based. There are many other things we could use for haptic
    perception in applications or games. It is a field that is constantly being researched
    and expanded upon.
  prefs: []
  type: TYPE_NORMAL
- en: For GPS data, we can use the user's location to know where the user is in the
    app or game world. Another use for GPS data would be to know if something of interest
    to the user should be shown to them.
  prefs: []
  type: TYPE_NORMAL
- en: Because Unity3D loves to take care of most of the finer details of implementation
    for us, we don't have to worry too much about incorporating DLLs (dynamic-link
    libraries) or writing the wrapper classes to work with the majority of the popular
    AR and VR devices. There are exceptions to this rule, depending on the platform
    and whether the engine has been updated to specifically work with those devices.
  prefs: []
  type: TYPE_NORMAL
- en: Android and iOS are the most popular devices for applications and games to have
    AR incorporated into them, however, the various tech giants have been working
    hard to add more and more devices into the mix, with varying amounts of success.
    Some of these will obviously not have implementation with Unity3D, although you
    can write wrapper classes as previously mentioned, however, that is outside the
    scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: An incomplete list of AR devices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s take a quick look at some AR-capable devices. This should give us a
    slightly better idea of the different types of devices we can use and deploy to:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Meta 2** is a head-mounted display headset that uses a sensory array
    for hand interactions and positional tracking, it has a visual field view of 90
    degrees, and a resolution of 2560 x 1440:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6956d511-e8e6-4216-9186-822a5b45a92b.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Meta 2
  prefs: []
  type: TYPE_NORMAL
- en: 'AR displays can be rendered on devices resembling eyeglasses, such as the **Google
    Glass**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/1964ae84-2b2c-45b5-bee9-a6d87a0a9a4e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Google Glass
  prefs: []
  type: TYPE_NORMAL
- en: 'Another such device is the HoloLens:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c8de6845-b156-46e4-abe9-310f8fa3e13d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HoloLens
  prefs: []
  type: TYPE_NORMAL
- en: 'There is something called a **head-up display**, which is commonly referred
    to as a **HUD**. It is an alternate implementation of AR displays:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4e252c51-b4e7-4e8c-b601-778c56f8e469.jpg)'
  prefs: []
  type: TYPE_IMG
- en: HUD
  prefs: []
  type: TYPE_NORMAL
- en: There are many new devices being researched on and created all the time. Augmented
    reality is still in its infancy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All throughout this book, we will create applications and games that are inspired
    by the definition of AR. Since there are four main aspects of AR, we will use
    those four aspects and create a specific application or game for that chapter.
    Since we have a finite number of sensors that are available for Android and iOS
    devices, some sensors will be utilized in multiple projects.
  prefs: []
  type: TYPE_NORMAL
- en: Advantages and disadvantages of the different AR toolkits available
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the advantages and disadvantages of ARCore,
    Vuforia, ARToolKit, and ARKit.
  prefs: []
  type: TYPE_NORMAL
- en: ARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ARCore is a platform for building augmented reality apps for Android devices.
    ARCore uses three key technologies to integrate virtual content with the world
    through the camera. It uses motion tracking, environmental understanding, and
    light estimation. ARCore works by tracking the position of the device as it moves
    and builds its own understanding of the real world. It is able to identify interesting
    points and readings from the phone''s sensors and has the ability to determine
    both the position and the orientation of the phone as it moves. ARCore only has
    a few supported devices at the present time, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Google Pixel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel XL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixel 2 XL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Samsung Galaxy S8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you don't own one of these devices, you are stuck using the Android Emulator
    for testing purposes. This is a very obvious downside, since not everyone owns
    one of these specific phones; additionally, the Android Emulator is an experimental
    piece of software and is subject to change often. The upside is that ARCore works
    with Unity3D and Unreal Engine as well as native to Android devices using the
    Java programming language.
  prefs: []
  type: TYPE_NORMAL
- en: ARKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ARKit, which was introduced in iOS 11, is a framework for easily creating augmented
    reality projects for the iPhone and iPad. ARKit''s features include:'
  prefs: []
  type: TYPE_NORMAL
- en: TrueDepth Camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Inertial Odometry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scene Understanding
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lighting Estimation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering Optimizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The downsides to ARKit are that it is an experimental software and subject to
    change often, and that it requires the use of the Apple iPhone X to take full
    advantage of the TrueDepth Camera. You cannot compile this on Windows for Mac,
    so it is a requirement to have a macOS to even test the code properly. The pros,
    however, are that ARKit works with Unity3D and Unreal Engine and can utilize the
    A9, A10, and A11 Apple processors. In other words, it works with the iPhone 6S
    and beyond.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vuforia is one of the most popular platforms to help you work with augmented
    reality development. It supports the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Android
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: UWP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity3D Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vuforia is able to do many different things, such as recognition of different
    types of visual objects (such as boxes, cylinders, and planes), text and environment
    recognition, and VuMark, which is a combination of picture and QR code. Also,
    using the Vuforia Object Scanner, you can scan and create object targets. The
    recognition process can be implemented using the database (local or cloud storage).
    The Unity plugin is simple to integrate and very powerful. All plugins and functionalities
    of the platform are free to use but include the Vuforia watermarks.
  prefs: []
  type: TYPE_NORMAL
- en: 'The limitations just relate to the number of VuMarks and the amount of Cloud
    recognition:'
  prefs: []
  type: TYPE_NORMAL
- en: Paid plan without watermarks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1,000 Cloud recognitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 100,000 targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Costs $99 per month
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The obvious downside is that this is not 100% free software, although they do
    have a developer tier with 1,000 cloud recognitions and 1,000 targets for free
    per month.
  prefs: []
  type: TYPE_NORMAL
- en: ARToolKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ARToolKit is an open source tracking library for AR projects. It is supported
    on Android, iOS, Linux, and macOS. ARToolKit has the functionality to utilize
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Single or stereo camera for position/orientation tracking
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking of simple black squares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking of planar images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera calibration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optical stereo calibration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optical head-mounted display support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is fast enough for real-time AR applications. It is also free and open source
    software, with plugins for Unity and OpenSceneGraph. The downside to this software
    is that it has a huge variety of functions, so it is difficult to integrate the
    library, and it takes more time to explore all the available options and settings.
  prefs: []
  type: TYPE_NORMAL
- en: Building our first AR applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section will define all the main points of each of the different SDKs available
    to us, and we will build our first program with them. This will be in a step-by-step
    and very in-depth tutorial design sort of way, since this is a lot of information
    to package and condense into a small section without needing to reiterate the
    information in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is now time to set up a Unity3D project for each of the different SDKs that
    will serve as the basis for later chapters when we use each of them to build an
    application or a game. Let''s start with Vuforia, since it is the simplest one
    to set up:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to register with Vuforia. Navigate to [https://developer.vuforia.com/vui/user/register](https://developer.vuforia.com/vui/user/register)
    in order to go to the registration landing page. If you live in a country in which
    Google is blocked, you should use a VPN, because the registration page uses the
    Google-powered reCAPTCHA and you can''t continue without it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/42ef57f4-6936-45af-99a2-8835027edf52.png)'
  prefs: []
  type: TYPE_IMG
- en: Registering on Vuforia
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you can log in, navigate to the Develop tab; alternatively, follow this
    link: [https://developer.vuforia.com/targetmanager/licenseManager/licenseListing](https://developer.vuforia.com/targetmanager/licenseManager/licenseListing).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see two main items, License Manager and Target Manager. The License
    Manager will allow you to create a free Development Key or purchase a Development
    Key. We want to create a free one. Click on Get Development Key. Enter a name
    for the app, which you can change at any time. I shall call mine `VuforiaIntro`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5348c09-268f-40d4-aca4-c3b1c7e42fc4.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Vuforia key
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have our key with Vuforia. In order to see the license key, we need
    to click on the name of our app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f14c744-5628-440b-bcb1-7cae4163f781.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia key info
  prefs: []
  type: TYPE_NORMAL
- en: 'This next page gives us two very important pieces of information: License Key
    and Usage details. The Usage details tells us how many Cloud recognitions, Cloud
    databases, Recognitions used, Cloud targets used, VuMarks generated, VuMark databases,
    VuMark templates, and VuMarks we have used or currently have remaining:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a2f8d584-ccc2-48aa-a8e0-8026eb04dccd.png)'
  prefs: []
  type: TYPE_IMG
- en: The License Key details tell us our key (which is easy to copy to the clipboard),
    the type of key it is, the status of the key, the date it was created, and the
    history of the key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are ready to set up Vuforia and get the demo project working appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: As stated previously, Vuforia is fully integrated into Unity3D as of 2017.2,
    and is a dream to work with once you learn the basics of the SDK. Vuforia is made
    to strictly deal with the graphics portion of AR. It can recognize images and
    objects, and it has the ability to interact with the real world, because it uses
    computer vision. Since Vuforia is built into Unity3D, we will do the installation
    of Unity with Vuforia all in one go.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have Unity3D installed on your computer now, let''s go ahead
    and do that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to [http://www.Unity3D.com](http://www.Unity3D.com) and download the
    latest Personal edition (or one of the others, if you are a high roller) installer
    for Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/427eebe8-abe7-4fca-8bd7-8cfe4eba6fe4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'When you get to the components section of the installer, make sure to select
    all the platforms you want to support. I typically select Android Build Support,
    Linux Build Support, SamsungTV Build Support, Tizen Build Support, WebGL Build
    Support, and UWP (Universal Windows Platform) Build Support. There is one additional
    one you need to make sure you select, and that is Vuforia Augmented Reality Support:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e13d0f1-b6ab-4f09-9747-79e26e33775f.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia Unity installation
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that Unity3D has been installed, let''s create a brand new Unity project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia recommends that you use a 3D project setup for their AR apps, so, with
    that in mind, I will keep it as a 3D project with Enable Unity Analytics disabled,
    and the name of the project shall be `VuforiaIntro`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/097c1e9b-7582-40fe-a104-05647ea4d036.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the project has loaded, we can take a look at some of the additional editor
    items we have access to now. In the toolbar at the top of the Unity Editor, we
    will see File, Edit, Assets, GameObject, Component, Window, and Help:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/87806eac-3350-404a-b6d7-9a710d06c191.png)'
  prefs: []
  type: TYPE_IMG
- en: 'GameObject, Component, Window, and Help have additional items added to them.
    Looking at GameObject, we can see that the additional item is Vuforia. Inside
    the Vuforia item, we have AR Camera, Image, Multi Image, Cylindrical Image, Cloud
    Image, Camera Image, VuMark, and 3D Scan:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/153a0985-9590-493f-967d-e084f5ec7c9d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Cloud Image has some additional items, so let''s take a look at that. We have
    Cloud Provider and Cloud Image Target available to us:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4d76e26-6a62-481a-a92c-9a0d452c2f6c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Camera Image also has some additional items, so we should also be familiar
    with those options. The options available are Camera Image Builder and Camera
    Image Target:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d753d3b8-c918-4172-ad29-1e8ce625d59d.png)'
  prefs: []
  type: TYPE_IMG
- en: Before we go any further, we should know exactly what these options do and how
    they look when added to the project prior to the license being applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'AR Camera replaces the standard camera, as it has the base camera component
    and Audio Listener components. We also see that it has two scripts attached, Vuforia
    Behavior and Default Initialization Error Handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/94a1ced0-7f64-4e3d-9852-e6c5210ec383.png)'
  prefs: []
  type: TYPE_IMG
- en: Image is what allows you to add a trackable object into your AR project and
    serves as the basis for allowing you to have a mount point for bringing models
    into the camera feed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi Image allows you to add multiple trackable objects into your AR project
    and serves as the anchor for bringing models into the camera feed in real time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cylindrical Image is an anchor for images wrapped onto objects that are cylindrical
    in shape.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VuMark is a custom barcode made by the Vuforia team. It allows you to encode
    data into it as well as act as an AR target like the Image, Multi Image, and Cylindrical
    Image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Provider is a direct link to your cloud database for specialized AR-designed
    branding. It is supposed to be used for publications (catalogs, magazines, newspapers,
    and so on), retailers (product visualization and in-store traffic generation),
    advertisers (multi-branded content, coupons, and promotions), and product recognition
    (wine labels/ bottles, cereal boxes, and so on).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Image Target is what allows you to add a trackable object into the AR
    project and serves as the anchor for the app to send the recognized data to the
    cloud database to retrieve the information and display it as you wish.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera Image Builder is what allows you to define a target image to be stored
    in a database for retrieval and usage in an AR application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Camera Image Target serves as the anchor for which to use the self-defined target
    image to display what you want on screen when recognized.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next set of items to talk about is in the Component toolbar. The special
    components lie within the AR, Scripts, and XR portions of the Component window,
    as marked in the following screenshot for reference. In order to use them, you
    have to have a GameObject in the scene and add the component from the toolbar
    to it. We have World Anchor, Tracked Pose Driver, Spatial Mapping Collider, and
    Spatial Mapping Renderer available. We should do a deep dive in so that we can
    know exactly what these items do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0f518a8d-3c6f-4e7f-a4ac-d3be6035f706.png)'
  prefs: []
  type: TYPE_IMG
- en: World Anchor is a component that represents a link between an exact point in
    the physical world and the parent GameObject of the World Anchor. Once added,
    a GameObject with a World Anchor component remains locked in place to locations
    in the real world.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracked Pose Driver is a component that applies the current Pose value of a
    tracked device to the transform of the Game Object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial Mapping Collider allows for holographic content (or character) interaction,
    such as physics, with the spatial mapping mesh.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spatial Mapping Renderer is a component that gives a visual representation of
    Spatial Mapping surfaces. This is useful for visually debugging surfaces and adding
    visual effects to the environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It should be noted that there are items related to Vuforia in the Scripts section,
    however, we will not cover those here. But, just for the sake of making sure that
    the items are listed, they are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/86b579d2-222a-4af3-88c1-02c0853d7b6b.png)'
  prefs: []
  type: TYPE_IMG
- en: Background Plane Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud Reco Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cylinder Target Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GL Error Handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image Target Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mask Out Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi Target Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Object Target Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prop Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconstruction Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reconstruction From Target Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Surface Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text Reco Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn Off Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Turn off Word Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User Defined Target Building Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Video Background Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual Button Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vuforia Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vuforia Deinit Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vu Mark Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireframe Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wireframe Trackable Event Handler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Word Behaviour
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the Inspector pane, we have Vuforia Configuration. The following is a screenshot
    of it; next, we will define what it does:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47d00b0a-4e6a-45dd-ad49-111fdf64371d.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia Configuration allows you to enter your License Key. Clicking on Add
    License will load the Vuforia Developer landing page. It also allows you to specify
    what you want Vuforia to be configured to work for, such as a HUD, smartglasses,
    a webcam, or a smartphone.
  prefs: []
  type: TYPE_NORMAL
- en: I also want to note that Smart Terrain Tracker has been deprecated and will
    be removed in the next release of Vuforia. If you are reading this book and that
    screenshot does not look the same, you now know why and should not be worried.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we are here, let''s go ahead and add our app key to Vuforia (see Vuforia
    Add License for its location):'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should create your own app key, since my app key will not be valid by the
    time of the release of this book. After copying and pasting your key into the
    license key box, just press the *Return*/*Enter* key and you are done:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e872ac45-8076-49d8-a532-f5658dffdf3a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we are testing on PC and if you have a webcam that works for said PC,
    make sure that the Camera Device selects the proper webcam for usage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b82e4567-c824-497c-92d0-bd3eee7c6106.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next, we need to go into the Unity Player Settings and fix some options. Navigate
    to File and click on Build Settings. The Build Settings box should appear. Make
    sure you change the project type to build to Android, and then click on Player
    Settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9806882d-c6b9-4892-8221-37167940367b.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia does not support FAT device filter or Android TV, so we need to change
    those two options. Device Filter, which is located in Other Settings, needs to
    be changed to ARMv7, and Android TV Compatibility needs to be unchecked.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can finally build our "Hello World" AR application for testing to make
    sure Vuforia and Unity3D are working well together. If you haven''t done so already,
    remove the regular camera component from the Hierarchy Pane and replace it with
    the ARCamera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d834ac02-5ca4-4c53-8ad9-935b0dea81a8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to add the Vuforia Image to the scene, which is also known
    as the ImageTarget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2eea5ee4-a9e6-4cef-8f15-a13b02c178d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We now need to download and add a 3D model to the scene. So, let''s go with
    the easy route and just add a sphere to the scene with the *x*, *y*, and *z* scale
    set to `0.3`. Take extra special care to make sure that the sphere is a child
    of the ImageTarget. *This is very important*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/41ff3c37-203b-4822-82ad-63c8c992c19a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The next step is to navigate to Editor | Vuforia | ForPrint | ImageTargets,
    and print out on a piece of paper `target_images_A4` or `target_images_USLetter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4b57d8ba-9bd2-4472-935f-68c90d96b536.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have it printed, we can begin the final portion of the test, which
    is to run the program and hold the printout of the drone in front of the webcam:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/017131ff-49f0-4855-b513-2a565087ef72.png)'
  prefs: []
  type: TYPE_IMG
- en: The text in this screenshot is not important. It shows a sphere that appears
    on the camera feed when the image is recognized.
  prefs: []
  type: TYPE_NORMAL
- en: Vuforia has now been properly configured and tested appropriately, so we can
    move on to the next SDK to set up and configure.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up ARToolKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARToolKit is a bit more difficult to set up and get started with.
  prefs: []
  type: TYPE_NORMAL
- en: ARToolKit has been depreciated and is now part of the Daqri Vos API. which you
    can view at [https://developer.daqri.com/#!/content/develop](https://developer.daqri.com/#!/content/develop)
    This section has been kept in for incase you want to utilize ARToolkit from the
    github link [https://github.com/artoolkit/arunity5](https://github.com/artoolkit/arunity5)
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two different ways you can get ARToolKit in a project and ready to
    develop with. The first option is the easiest, and that is through the Asset Store:
    [https://assetstore.unity.com/packages/tools/artoolkit-6-unitypackage-94863](https://assetstore.unity.com/packages/tools/artoolkit-6-unitypackage-94863).
    This is the latest version of ARToolKit in the Asset Store and it will be imported
    directly into Unity for you. The other option is to go to the main website of
    ARToolKit: [https://github.com/artoolkit/artoolkit5](https://github.com/artoolkit/artoolkit5).
    This allows you to get additional tools and the actual SDK, along with the Unity
    Package.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For installation into Unity3D, we will go with the second option, since it
    is less intuitive than the first option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d709223b-b1f8-437c-9f72-48f71ba776d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the main website for ARToolKit and click on DOWNLOAD SDK. The macOS,
    Windows, iOS, Android, Linux, Windows 8.1, and Source Dependencies don''t need
    to be downloaded, but they can be if you want to go deeper into how ARToolKit
    works under the hood or if you want to use it in a non-Unity capacity. Instead,
    head toward the bottom of the page and click on the DOWNLOAD UNITY PACKAGE button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/edaadbbf-a509-4305-9adf-f212a60700ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Unless you are doing something more involved, you don't need the additional
    Unity tools at the present time if you are on a macOS, but if you are on a PC,
    I suggest getting the Windows Tools, since ARToolKit needs them to debug on PC
    without using the Android Emulator or testing on Linux.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the package has been downloaded, we need to open Unity3D and create
    a new project. I will call mine `ARToolKitIntro`. Keep the settings as default
    for simplicity''s sake:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08d97be7-c52e-4d55-bce6-b5adf40d3f9f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to import the Unity Package into Unity. This is pretty straightforward.
    Right-click the `Assets` folder, highlight Import Package, and select Custom Package:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bf186f82-bc85-40c2-883f-2bc81d12bb81.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to the folder that houses the downloaded Unity Package, click on it,
    and select Open. You should see a dialog box with checkboxes inside. Click on
    All and then click on Import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f3f48703-e106-4dca-81d6-cc616436db90.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see three folders after the import is complete (`ARToolKit5-Unity`,
    `Plugins`, and `StreamingAssets`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d90b7e9-875c-4578-9a0d-8ea218d8c857.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `ARToolKit5-Unity` folder, there are the `Example Scenes`, `Examples`,
    `Materials`, `Resources`, `Scripts`, `Changelog`, and `Readme` files and folders:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside `Scripts`, we have an `Editor` folder with the features shown in the
    following screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/4c9ea14e-a1b1-4f10-a956-a58f7c2c14e1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Inside the `Editor` folder, we have the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/fe4afda0-b719-4760-8101-023eab765ed3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up is the `Plugins` folder. It has folders listed as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/8f6c3434-1803-4e77-8348-98a3317c977b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the menu bar at the top of the Unity Editor, you will see an
    additional toolbar item: ARToolKit. The drop-down menu shows several options:
    ARToolKit for Unity Version 5.3.2, Download Tools, Build, Support, and Source
    Code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c41b9582-5808-4e48-8565-367a60e3809f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Support has Home Page, Documentation, and Community Forums:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/b2b8d760-6bc3-4f9b-8594-52910b0762c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Source Code has View ARToolKit Source and View Unity Plugin Source:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7b496bc3-c529-478c-9e6d-78da16c9b79c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The basics are out of the way, so we can begin building our "Hello World" with
    ARToolKit:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is create an empty game object in the Hierarchy
    pane and rename it `ARToolKit`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to add the `ARController` script to the game object and delete
    the Camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96f4b489-3f87-455f-91dc-94603db0280c.png)'
  prefs: []
  type: TYPE_IMG
- en: The `ARController` script handles the creation and management of AR tracking.
    It automatically adds a camera at runtime and is controlled by the user layers
    that we provide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With this latest version of ARToolKit, the basic user layers are provided for
    you already: `AR background`, `AR background 2`, and `AR foreground` for User
    Layer 8, User Layer 9, and User Layer 10, respectively:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ddc63854-e8c8-4305-ba0b-814a91a2cc89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The AR Controller script has a Video Options drop-down menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0ee00050-1788-443f-b966-0812347dee1a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Since we have so many different options for video, we need to set it up properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1406686a-b73f-4dd7-86cc-e1f31819dfc1.png)'
  prefs: []
  type: TYPE_IMG
- en: If you get errors in the console of the Unity Editor, then you don't have the
    latest version of ARToolKit with the version of Unity we are using in this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since I am building for Windows, I will go to the first option of Video config
    and input the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, since my computer does not presently have a webcam attached to it, I get
    an in-game error message, but the code compiles and runs as expected. If you have
    a webcam attached and it is recognized appropriately, you should have a direct
    feed from your webcam.
  prefs: []
  type: TYPE_NORMAL
- en: This concludes the Hello World for ARToolKit; we will be revisiting this one
    later on for more in-depth and fun usage of this SDK.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ARCore
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARCore and ARKit are fundamentally very similar, but you can't compile ARKit
    on a Windows environment, which is what I'm presently using. Not to worry; when
    we get to ARKit, I will be using a macOS to give you a proper view and feel of
    how things are when using it.
  prefs: []
  type: TYPE_NORMAL
- en: That being said, it is now time to take a deeper look at ARCore.
  prefs: []
  type: TYPE_NORMAL
- en: ARCore was made by Google and is currently in the early preview stages; it hasn't
    even reached release 1.0 yet, so there are bound to be many changes, some of which
    could be extremely damaging to existing apps or games.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to get the SDK preview for Unity. The first is through a
    Unity Package file ([https://developers.google.com/ar/develop/unity/quickstart-android](https://developers.google.com/ar/develop/unity/quickstart-android))
    and the other is through GitHub ([https://github.com/google-ar/arcore-unity-sdk](https://github.com/google-ar/arcore-unity-sdk)).
    Now, since I have been having an issue with downloading from Amazon Web Services
    lately, I will use the second link:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7c948f4e-8581-4f83-8b47-dc9720b032b6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'It is key to remember that, if you don''t have a Samsung Galaxy 8 or a Google
    Pixel phone, you will not be able to run proper tests on your device. However,
    if you also install Android Studio, you do get access to the Android Emulator:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To begin, create a new project in Unity and call it `ARCoreTutorial`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6458da9-0c13-4874-9676-993cff72a989.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to change the Build Settings to Android before doing anything else:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ad527667-325b-4418-baa0-d47b963d7a7e.png)'
  prefs: []
  type: TYPE_IMG
- en: Next up, we need to change the Player Settings. The main settings we need to
    change are within the Other Settings tab, so let's take a look at what needs to
    be changed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other Settings: We want Multithreaded Rendering unchecked; Minimum API Level
    should be Android 7.0 ‘Nougat'' API level 24; and Target API Level should be Android
    7.0 ‘Nougat'' API level 24 or Android 7.1 ‘Nougat'' API level 25:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3cd5530e-792e-432e-bac4-9d7dd54cab45.png)'
  prefs: []
  type: TYPE_IMG
- en: '5\. XR Settings: We want ARCore Supported to be checked:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3dbe4f63-b3db-4e6e-9096-47290aa3d33b.png)'
  prefs: []
  type: TYPE_IMG
- en: '6\. Next up, we want to unzip the SDK or import the package into Unity3D:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/35d4f040-e69e-4ed4-8075-29f8e447d78e.png)'
  prefs: []
  type: TYPE_IMG
- en: Right away, we should see a DLLNotFoundException for `tango_client_api2`. This
    is normal and is well-known by the community. It should not cause any errors at
    runtime, though; it should be fixed in a later release.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up ARKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ARKit requires the usage of macOS High Sierra, because of the XCode 9 and above
    requirement for compiling and making changes to the API itself. So, I would highly
    suggest having a macOS from late 2011 or newer. I am utilizing a Mac Mini 2011
    model with 8 GB of RAM, although the standard 4 GB should be plenty. Unity3D does
    utilize OpenCL/OpenGL extensively, which requires a GFX card capable of utilizing
    Metal. 2011 and earlier macOSs do not have this ability natively; this could be
    circumvented by having an external GPU (Radeon RX 480 is currently the only GPU
    supported officially for this).
  prefs: []
  type: TYPE_NORMAL
- en: With that out of the way, we can begin with installing and configuring ARKit
    for Unity3D on our macOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a couple of ways you can install ARKit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can navigate to the plugin page on the Asset Store ([https://www.assetstore.unity3d.com/en/#!/content/92515](https://www.assetstore.unity3d.com/en/#!/content/92515)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e41fe61f-88e4-45c8-a1a9-77184326328e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Or we can download the plugin directly from the Bitbucket repository ([https://bitbucket.org/Unity-Technologies/unity-arkit-plugin/overview](https://bitbucket.org/Unity-Technologies/unity-arkit-plugin/overview)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e1c37ed-a2cc-45d0-ab1f-7ca3d4b7a624.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If we go the first route and install from the Asset Store, we don''t have to
    worry about copying the files into our project ourselves, but either way it is
    simple enough to do, so take your pick on the method you want to go with and create
    a new project called `ARKitTutorial`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb3ae1f0-ff4b-4b82-b769-fda7386cbf48.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up, we have quite a bit to unpack regarding what is actually in this package:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOs/UnityARKit/NativeInterface/ARsessionNative.mm` – This
    is the Objective-C code that is the actual interfaces with the ARKit SDK.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/NativeInterface/UnityARSessionNativeInterface.cs`
    – This is the scripting API that glues the native code to ARKit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/NativeInterface/AR*.cs` – These are the equivalents
    of the data structures exposed by ARKit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/Utility/UnityARAnchorManager.cs` – This is
    a utility script that tracks the anchor updates from ARKit and can create the
    proper corresponding GameObjects in Unity for them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/Editor/UnityARBuildPostprocessor.cs` – This
    is an editor script that runs at build time on iOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/UnityARCameraManager.cs` – This is the component
    that should be placed on a GameObject in the scene that references the camera
    that you want to control. It will position and rotate the camera as well as provide
    the correct projection matrix based on updates from ARKit. This component also
    initializes as ARKit Session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/UnityARVideo.cs` – This is the component that
    should be placed on the camera and grabs the textures needed for rendering the
    video. It sets the material needed for blitting to the backbuffer and sets up
    the command buffer for blitting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/Assets/Plugins/iOS/UnityARKit/UnityARUserAnchorComponent.cs` – This is the
    component that adds and removes Anchors from ARKit based on the life cycle of
    the GameObject it is added to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Before we build our own "Hello World" example, we should build the `UnityARKitScene.unity`
    to iOS to get a taste of what ARKit is capable of, as it demonstrates all of the
    basic functionality of ARKit in that scene.
  prefs: []
  type: TYPE_NORMAL
- en: '`UnityARKitScene` is included in the plugin as well as a couple of other example
    projects. We will compile the `UnityARKitScene` as our Hello World application.'
  prefs: []
  type: TYPE_NORMAL
- en: However, before we do that, we need to talk about the file structure, because
    those who are not well-versed with compiling to iOS will have some serious issues
    compiling without further clarification. You may have noticed quite a few items
    that we have not mentioned that are in the plugin, so let's go ahead and discuss
    what all of them do before moving on.
  prefs: []
  type: TYPE_NORMAL
- en: '`\UnityARKitPlugin` main directory files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ARKitRemote` – Allows you to send remote commands from your device to the
    Unity3D editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Examples` – This directory houses example scripts and scenes to showcase various
    things you can do with ARKit and this plugin'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Plugins` – Houses the directories required to run ARKit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resources` – Houses the resource files required for ARKit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Plugins\iOS\UnityARKit\NativeInterface` cs files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ARAnchor` – Anchors an object to a location in the world from the camera feed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARCamera` – Tracks the camera''s position.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARErrorCode` – Error codes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARFaceAnchor` – Face tracking anchor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARFrame` – Returns data about the camera, anchors, and light estimates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARHitTestResult` –Returns any collision results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARHitTestResultType` – Enumeration for the hit test types available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARLightEstimate` – Calculates how much luminosity is in the image or video.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARPlaneAnchor` – Anchors a plane to a specific 4x4 matrix.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARPlaneAnchorAlignment` – Aligns the anchor horizontally with respect to gravity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARPoint` – A point struct for x and y values as a double.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARRect` – A struct that takes `ARPoint` as the origin and `ARSize` as the
    size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARSessionNative` – Native plugin used to specify framework dependencies and
    the platforms the plugin should work for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARSize` –A struct that takes a width and height value as a double.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARTextureHandles` – A native Metal texture handler for the camera buffer which
    takes an `IntPtr`  (`int pointer`) for both `textureY` and `textureCbCr` values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARTrackingQuality` – Enumeration for tracking qualities available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARTrackingState` –Enumeration for tracking states. Limited, Normal, and NoAvailable
    are the options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARTrackingStateReason` – Enumeration for the state reasons. Options are Excessive
    Motion, Insufficient Features, and Initializing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARUserAnchor` – Defines this anchor''s transformation matrix for rotation,
    translation, and scale in world coordinates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARSessionNativeInterface` – Native plugin wrapper code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Plugins\iOS\UnityARKit\Helpers` cs files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AR3DOFCameraManager` – A helper class for 3D objects with the AR Camera'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARPlaneAnchorGameObject` – A class that attaches a GameObject with the `ARPlaneAnchor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DontDestroyOnLoad` – Makes sure the GameObject doesn''t get destroyed on load'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PointCloudParticleExample` – Creates a point cloud particle system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARAmbient` – A helper function for ambient lighting'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARAnchorManager` – A manager for `ARPlaneAnchorGameObjects`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARCameraManager` – A helper class for the `` `ARCamera` ``'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARCameraNearFar` – Sets the Near Far distance of the camera appropriately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARGeneratePlane` – Creates an `ARPlaneAnchorGameObject`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARHitTestExample` – Tests collisions with various amounts of planes,
    from few to infinite'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARKitControl` – A helper class designed for creating a test `ARSession`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARKitLightManager` – A helper class for managing the various lighting
    possibilities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARMatrixOps` – A class for converting a 4x4 matrix to Euclidean space
    for quaternion rotation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARUserAnchorComponent` – A helper class for creating Anchor added and
    removed events'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARUtility` – A helper class to do coordinate conversions from ARKit to
    Unity'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARVideo` – A helper function to render the video texture to the scene'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityPointCloudExamples` – A helper function to draw a point cloud using particle
    effects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\Plugins\iOS\UnityARKit\Shaders` shader files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`YUVShader` – A gamma Unlit Shader for rendering Textures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`YUVShaderLinear` – A linear Unlit Shader for rendering Textures'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`\UnityARKitPlugin\Resources` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UnityARKitPluginSettings.cs` – Is a scriptable object that toggles whether
    ARKit is required for the app and toggles Facetracking for the iPhone X.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARKitPlugin\ARKitRemote` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ARKitRemote.txt` – A text file that explains how to set up and use ARKitRemote'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditorTestScene.unity` – Test scene that should run when running `ARKitRemote`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARKitRemote.unity` – Scene that should be compiled and installed on an
    applicable device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ARKitRemoteConnection.cs` – Used to send data from the device to the UnityEditor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConnectionMessageIds` – GUIDs for the Editor Session Message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ConnectToEditor.cs` – Creates a network connection between the editor and
    the device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EditorHitTest` – Returns collision data from device to editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ObjectSerializationExtension.cs` – An extension to convert an object to a
    byte array'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SerializableObjects.cs` – Serializes Vector 4 data and a 4x4 matrix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityRemoteVideo.cs` – Connects to the editor and transfers a video feed from
    the device to the editor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARKitPlugin\Examples` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AddRemoveAnchorExample` – An example program to add and remove anchors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Common` – Has common materials, models, prefabs, shaders, and textures that
    are used in various projects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FaceTracking` – Face tracking example application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FocusSquare` – An example scene where it finds a specific anchor'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARBallz` – An example scene where you play a game with balls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARKitScene` – A basic scene with minimal scripts attached to test if
    ARKit works appropriately'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityAROcclusion` – An example project that showcases various lighting conditions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityARShadows` – An example project that handles low lighting conditions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UnityParticlePainter` – An example project that lets you paint with particles'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have a fundamental understanding of everything inside this package,
    let's build our Hello World with ARKit.
  prefs: []
  type: TYPE_NORMAL
- en: Building Hello World in ARKit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first thing we need to do after we open the UnityARKitScene is to set up
    the build settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c796f255-e848-4868-901d-400e50a6ea56.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Build Settings and select Player Settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We want to scroll down to Identification. The Bundle Identifier should be set
    to `com.unity.ARKitHelloTutorial`, Version to `0.1`, and Build to `10.1`. The
    Automatically Sign checkbox should be checked. Leave the Automatic Signing Team
    ID settings blank:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7ce47936-e44a-4789-8c1e-44a6b6694b95.png)'
  prefs: []
  type: TYPE_IMG
- en: Build the `UnityARKitScene` for iOS only. Run Xcode in Debug mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Only the Development Build checkbox should be checked; everything else should
    be left as default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click Build. I will save the file as `iOSTest` in my data drive within a folder
    called `iOS`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/38c5dcf3-bde3-4dee-8268-8dd48b753997.png)'
  prefs: []
  type: TYPE_IMG
- en: Building should not take very long at all, perhaps around two minutes for a
    first build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next thing we want to do is open the folder we saved the project in and
    open the `.xcodeproj` file in Xcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6694395-d086-41f5-835c-535953fbf81b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s take a look at the Base project you will see in Xcode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b3447925-d649-4d2f-9d84-76c6237e5f27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing we want to check is the Identity tab to make sure that these
    settings are the same as in Unity3D:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c10deef1-0f4a-4d08-92b3-65eec326bd75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we need to look at the Signing subsection:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23b01e02-0038-4703-b98d-5112fbeb94e7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to make sure to add our Personal Team name to it, which you can get
    by signing in to your Apple Developer account and clicking on the arrow for the
    team you want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ffe0a41b-5f2d-4096-82a6-a17a23a06261.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Deployment Info is next. The Deployment Target needs to be changed to `11.2`.
    Devices should be set to iPhone only. The Main Interface is `LaunchScreen-iPhone.xib`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ed9d47b-3096-4a57-879d-12e83f7bc9c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Build Settings at the top, as there are a few settings we need to change
    here as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Architectures, ARCHS for iPhone should be set to Standard. SDKROOT should
    be Latest iOS (iOS 11.2). SUPPORTED_PLATFORMS should be iOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d3ed973-b87f-4768-b67e-64ccda3099bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Next up, scroll down to look at signing, and the values should be already set
    to the correct ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46da1605-6d20-4344-95e7-179124c130a7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on Product and Build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07508ad8-52bb-4298-9bf2-fa3e11310a57.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The build should have completed successfully with roughly 47 warnings, which
    is normal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a16962a-3078-4c83-babe-1c1f97bdf320.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we can build and test in the simulator. What we want to do is change from
    the iPhone to one of the simulators in the list, so click on the device list next
    to your iPhone or whatever device you have:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4d37cb8-72ef-48e3-8d91-90a0e52f20dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You will see a big list of devices you want to use. This will range from simulations
    of devices to the iOS device you have connected to your macOS:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6dde950c-a669-4df6-b021-caa4506d4d6d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the simulation you want to use, and then build and run the application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Congratulations! We have completed this Hello World application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We learned the basics of the four main AR SDKs made available to us from many
    companies. We installed and compiled a working example in each one of the SDKs
    with minimal effort, and we can now move on to utilizing these SDKs to their full
    potential, as they currently stand in their respective stages of development.
  prefs: []
  type: TYPE_NORMAL
- en: We can see that all four SDKs are simple enough to use and are relatively easy
    to install. In my opinion, the best SDK to use at the moment is Vuforia. It has
    the most robust API and is extremely well-documented for usage and further learning.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will focus on learning the history of GIS and how that
    history has shaped the way we use GIS in AR applications and games today.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ARView is an SDK that you can use to make AR applications in Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'ARKit is specifically designed for iOS devices only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'ARCore is specifically designed for Windows devices only:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia is designed for iOS, Windows, and Android devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Haptic perception is all about using the sense of touch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Sound perception is what you see with your eyes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'GPS data lets the application specify the user''s location by random guessing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'DLL files are required for Windows and Android plugins with Unity:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Meta 2, HoloLens, HUD, and Google Glass are all considered AR devices:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
- en: 'Vuforia is not a free SDK to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A.) True
  prefs: []
  type: TYPE_NORMAL
- en: B.) False
  prefs: []
  type: TYPE_NORMAL
