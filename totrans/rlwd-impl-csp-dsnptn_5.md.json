["```cs\npublic interface ICommand\n{\n    public void Execute();\n}\n```", "```cs\npublic class BuildFrameCommand : ICommand\n{\n    private AssemblyLineReceiver _assemblyLineReceiver;\n```", "```cs\n    private IPaintableBicycle _bicycle;\n```", "```cs\n    public BuildFrameCommand(AssemblyLineReceiver \n        assemblyLineReceiver, IPaintableBicycle bicycle)\n    {\n        _assemblyLineReceiver = assemblyLineReceiver;\n        _bicycle = bicycle;\n    }\n```", "```cs\n    public void Execute()\n    {\n        _assemblyLineReceiver.DoBusinessLogic(_bicycle);\n    }\n}\n```", "```cs\npublic class Sender\n{\n    private ICommand _command;\n    public Sender(ICommand command)\n    {\n        _command = command;\n    }\n    public void DoCommand()\n    {\n        _command.Execute();\n    }\n}\n```", "```cs\npublic class AssemblyLineReceiver\n{\n    private readonly RobotArmFacade _robotArmFacade;\n    private const int NumberOfAssemblyStations = 20;\n    private const float ConsistentY = 52.0f;\n    private const float ConsistentZ = 128.0f;\n    private const float ConsistentW = 90.0f;\n    private readonly Quaternion[] _assemblyStations;\n```", "```cs\n    public AssemblyLineReceiver(RobotArmFacade \n        robotArmFacade)\n    {\n        _robotArmFacade = robotArmFacade;\n        _assemblyStations = new Quaternion\n            [NumberOfAssemblyStations];\n\n        for (var i = 0; i < NumberOfAssemblyStations; i++)\n        {\n            var xPosition = i * 25.0f;\n            _assemblyStations[i] = new Quaternion\n                (xPosition, ConsistentY, ConsistentZ, \n                    ConsistentW);\n        }\n    }\n```", "```cs\n    public void DoBusinessLogic(IPaintableBicycle bicycle)\n    {\n        // Now let's follow an abbreviated imaginary \n        // assembly of a bicycle frame by controlling a robot \n        // arm.\n        // grabber gets the frame parts and takes them to \n        // station 1\n        _robotArmFacade.ActiveAttachment = \n            ArmAttachments.Grabber;\n        _robotArmFacade.MoveTo(_assemblyStations[0]);\n        _robotArmFacade.Actuate();\n        _robotArmFacade.MoveTo(_assemblyStations[1]);\n… see the rest in the sample code.\n```", "```cs\nvar blackPaintJob = new BlackPaintJob();\nvar standardMountainBike = new PaintableMountainBike\n    (blackPaintJob);\n```", "```cs\nvar robotArmFacade = new RobotArmFacade(new \n    WelderAttachmentApi(), new BuffingApi(), new \n        GrabbingApi());\n```", "```cs\nvar cmd = new BuildFrameCommand(new AssemblyLineReceiver\n    (robotArmFacade), standardMountainBike);\n```", "```cs\nvar sender = new Sender(cmd);\nsender.DoCommand();\n```", "```cs\npublic class BicycleOrder\n{\n    public Customer Customer { get; set; }\n    public IPaintableBicycle Bicycle { get; set; }\n    public BicycleOrder(Customer customer, \n        IPaintableBicycle bicycle)\n    {\n        Customer = customer;\n        Bicycle = bicycle;\n    }\n}\n```", "```cs\npublic class Customer\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string CompanyName { get; set; }\n    public MailAddress Email { get; set; }\n    public string ShippingAddress { get; set; }\n    public string ShippingCity { get; set; }\n    public string ShippingState { get; set; }\n    public string ShippingZipCode { get; set; }\n\n}\n```", "```cs\npublic abstract class Iterator : IEnumerator\n{\n    object IEnumerator.Current => Current();\n    public abstract int Key();\n    public abstract bool MoveNext();\n    public abstract void Reset();\n    protected abstract object Current();\n}\n```", "```cs\npublic abstract class IteratorAggregate : IEnumerable\n{\n    public abstract IEnumerator GetEnumerator();\n}\n```", "```cs\npublic class OrdersCollection : IteratorAggregate\n{\n    public List<BicycleOrder> Orders { get; set; }\n```", "```cs\n    public OrdersCollection()\n    {\n        Orders = new List<BicycleOrder>();\n    }\n```", "```cs\n    public void AddOrder(BicycleOrder order)\n    {\n        Orders.Add(order);\n    }\n```", "```cs\n    public override IEnumerator GetEnumerator()\n    {\n        return new PaintOrderIterator(this);\n    }\n}\n```", "```cs\npublic class PaintOrderIterator : Iterator\n{\n```", "```cs\n    private readonly OrdersCollection _orders;\n```", "```cs\n    private int _position;\n```", "```cs\n    public PaintOrderIterator(OrdersCollection orders)\n    {\n        _orders = SeparateCustomPaintJobOrders(orders);\n        _position = -1;\n    }\n```", "```cs\n    public override int Key()\n    {\n        return _position;\n    }\n```", "```cs\n    public override bool MoveNext()\n    {\n        var updatedPosition = _position + 1;\n        if (updatedPosition < 0 || updatedPosition >= \n            _orders.Orders.Count) return false;\n        _position = updatedPosition;\n        return true;\n    }\n```", "```cs\n    public override void Reset()\n    {\n        _position = 0;\n    }\n```", "```cs\n    protected override object Current()\n    {\n        return _orders.Orders[_position];\n    }\n```", "```cs\n    private OrdersCollection SeparateCustomPaintJobOrders \n        (OrdersCollection orders)\n    {\n        var customPaintJobOrders = new List\n            <BicycleOrder>();\n        var standardPaintJobOrders = new List\n            <BicycleOrder>();\n        foreach (var order in orders.Orders)\n        {\n            var paintJob = order.Bicycle.PaintJob;\n```", "```cs\n            bool isCustom = paintJob.GetType().IsSubclassOf\n                (typeof(CustomGradientPaintJob));\n            if(isCustom)\n            {\n                customPaintJobOrders.Add(order);\n            }\n            else\n            {\n                standardPaintJobOrders.Add(order);\n            }\n        }\n```", "```cs\n        orders.Orders.Clear();\n```", "```cs\n        orders.Orders.AddRange(standardPaintJobOrders);\n```", "```cs\n        orders.Orders.AddRange(customPaintJobOrders);\n        return orders;\n    }\n}\n```", "```cs\nusing System.Net.Mail;\nusing BumbleBikesLibrary.PaintableBicycle;\nusing BumbleBikesLibrary.PaintableBicycle.CommonPaintJobs;\nusing IteratorExample;\n```", "```cs\nvar orders = new OrdersCollection();\n```", "```cs\nvar dealership = new Customer\n{\n    FirstName = \"John\",\n    LastName = \"Galt\",\n    CompanyName = \"Atlas Cycling\",\n    Email = new MailAddress(\"johngalt@whois.com\"),\n    ShippingAddress = \"123 Singleton Drive\",\n    ShippingCity = \"Dallas\",\n    ShippingState = \"Tx\",\n    ShippingZipCode = \"75248\"\n};\n```", "```cs\nvar amarilloPeacockPaintjob = new \n     AmarilloPeacockPaintJob();\nvar bicycle0 = new PaintableMountainBike\n    (amarilloPeacockPaintjob);\n```", "```cs\nvar order0 = new BicycleOrder(dealership, bicycle0);\norders.AddOrder(order0);\n```", "```cs\nvar turquoisePaintJob = new BluePaintJob();\nvar bicycle1 = new PaintableCruiser(turquoisePaintJob);\nvar order1 = new BicycleOrder(dealership, bicycle1);\norders.AddOrder(order1);\n```", "```cs\nvar whitePaintJob = new WhitePaintJob();\nvar bicycle2 = new PaintableRoadBike(whitePaintJob);\nvar order2 = new BicycleOrder(dealership, bicycle2);\norders.AddOrder(order2);\n```", "```cs\nvar bicycle3 = new PaintableRecumbent\n    (amarilloPeacockPaintjob);\nvar order3 = new BicycleOrder(dealership, bicycle3);\norders.AddOrder(order3);\n```", "```cs\nvar redPaintJob = new RedPaintJob();\nvar bicycle4 = new PaintableRoadBike(redPaintJob);\nvar order4 = new BicycleOrder(dealership, bicycle4);\norders.AddOrder(order4);\n```", "```cs\nforeach (BicycleOrder order in orders)\n{\n    Console.WriteLine(order.Bicycle.PaintJob.Name);\n}\n```", "```cs\npublic interface ILogisticsObserver\n{\n    public void SchedulePickup();\n}\n```", "```cs\npublic class ExFedObserver : ILogisticsObserver\n{\n    public void SchedulePickup()\n    {\n        Console.WriteLine(\"ExFed has been notified that a \n            shipment is ready for pick up.\");\n    }\n}\n```", "```cs\npublic class LogisticsSubject\n{\n```", "```cs\n    private readonly List<ILogisticsObserver> \n        _logisticsObservers;\n    public LogisticsSubject()\n    {\n        _logisticsObservers = new \n            List<ILogisticsObserver>();\n    }\n```", "```cs\n    public void Attach(ILogisticsObserver observer)\n    {\n        _logisticsObservers.Add(observer);\n        PrintObserversCount();\n    }\n```", "```cs\n    public void Detach(ILogisticsObserver observer)\n    {\n        _logisticsObservers.Remove(observer);\n        PrintObserversCount();\n    }\n```", "```cs\n    private void PrintObserversCount()\n    {\n        switch (_logisticsObservers.Count)\n        {\n            case < 1:\n                Console.WriteLine(\"There are no \n                    observers.\");\n                break;\n            case 1:\n                Console.WriteLine(\"There is 1 observer\");\n                break;\n            default:\n                Console.WriteLine(\"There are \" + \n                    _logisticsObservers.Count + \" \n                        observers.\");\n                break;\n        }\n    }\n```", "```cs\n    public void NotifyPickupAvailable()\n    {\n        foreach (var observer in _logisticsObservers)\n        {\n            observer.SchedulePickup();\n        }\n    }\n}\n```", "```cs\nvar logisticsSubject = new LogisticsSubject();\n```", "```cs\nvar exFed = new ExFedObserver();\nlogisticsObserver.Attach(exFed);\n```", "```cs\nvar pickupOrder = new List<Bicycle>();\nfor (var i = 0; i < 99; i++)\n{\n    var bike = new MountainBike();\n```", "```cs\n    Thread.Sleep(3000);\n    Console.WriteLine(bike.ToString());\n    pickupOrder.Add(bike);\n```", "```cs\n    if (pickupOrder.Count > 9)\n    {\n        logisticsSubject.NotifyPickupAvailable();\n```", "```cs\n        pickupOrder.Clear();\n    }\n}\n```", "```cs\nlogisticsSubject.Detach(exFed);\n```", "```cs\npublic interface INavigationRoute\n{\n    public string RouteDetails { get; set; }\n}\n```", "```cs\npublic class NavigationRoute : INavigationRoute\n{\n    public string RouteDetails { get; set; }\n}\n```", "```cs\npublic interface InavigationStrategy\n{\n    public InavigationRoute FindRoute(string parameters);\n}\n```", "```cs\npublic class RoadNavigationStrategy : INavigationStrategy\n{\n    public INavigationRoute FindRoute(string parameters)\n    {\n        // This is where your amazing algorithm goes.  But \n        // since this is a book on patterns and not \n        // algorithms...\n        return new NavigationRoute\n        {\n            RouteDetails = \"I'm a road route.\"\n        };\n    }\n}\n```", "```cs\npublic class GravelNavigationStrategy : INavigationStrategy\n{\n    public INavigationRoute FindRoute(string parameters)\n    {\n        // This is where your amazing algorithm goes.  But \n        // since this is a book on patterns and not \n        // algorithms...\n        return new NavigationRoute\n        {\n            RouteDetails = \"I'm a gravel route.\"\n        };\n    }\n}\n```", "```cs\npublic class MountainNavigationStrategy : \n    INavigationStrategy\n{\n    public INavigationRoute FindRoute(string parameters)\n    {\n        // This is where your amazing algorithm goes.  But \n        // since this is a book on patterns and not \n        // algorithms...\n        return new NavigationRoute\n        {\n            RouteDetails = \"I'm a mountain route.\"\n        };\n    }\n\n}\n```", "```cs\npublic class NavigationContext\n{\n```", "```cs\n    public INavigationStrategy NavigationStrategy { get; \n        set; }\n```", "```cs\n    public NavigationContext()\n    {\n        NavigationStrategy = new RoadNavigationStrategy();\n    }\n```", "```cs\n    public void StartNavigation()\n    {\n```", "```cs\n        var route = NavigationStrategy.FindRoute\n            (\"parameters go here\");\n        Console.WriteLine(route.RouteDetails);\n    }\n}\n```"]