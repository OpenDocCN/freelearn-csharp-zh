- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: Packaging and Deploying WinUI Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打包和部署 WinUI 应用程序
- en: WinUI developers have several options to package and deploy their applications.
    Developers can create an account on **Microsoft Store** and upload a packaged
    app to be released for public consumption through **Microsoft Partner Center**.
    App packages can also be created to be distributed by organizations through **Microsoft
    Endpoint Manager** and **Microsoft Intune**, or sideloaded by individuals on Windows
    PCs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: WinUI 开发者有几种选项来打包和部署他们的应用程序。开发者可以在 **Microsoft Store** 上创建一个账户，并将打包的应用程序上传到
    **Microsoft Partner Center** 以供公众消费。应用程序包也可以创建，以便通过 **Microsoft Endpoint Manager**
    和 **Microsoft Intune** 由组织分发，或者由个人在 Windows PC 上侧载。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Discovering application packaging and **MSIX** basics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索应用程序打包和 **MSIX** 基础知识
- en: Getting started with application packaging in Visual Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中开始应用程序打包
- en: Deploying applications with **Windows** **Package Manager**
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Windows** **Package Manager** 部署应用程序
- en: Distributing applications with the Microsoft Store
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Microsoft Store 分发应用程序
- en: Sideloading WinUI applications with MSIX
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 MSIX 侧载 WinUI 应用程序
- en: By the end of this chapter, you will understand the methods available to package
    and distribute your WinUI applications and how to use each of them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解可用于打包和分发 WinUI 应用程序的方法，以及如何使用每种方法。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，需要以下软件：
- en: Windows 10 version 1809 (build 17763) or newer, or Windows 11
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10 版本 1809（构建 17763）或更高版本，或 Windows 11
- en: Visual Studio 2022 or later, with the **.NET Desktop Development** workload
    configured for Windows App SDK development
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2022 或更高版本，已配置 **.NET Desktop Development** 工作负载以进行 Windows App
    SDK 开发
- en: 'The source code for this chapter is available on GitHub at this URL: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在 GitHub 上通过此 URL 获取：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14)。
- en: Discovering application packaging and MSIX basics
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索应用程序打包和 MSIX 基础知识
- en: For most of this book, we have built and run our WinUI 3 applications locally.
    Now, it’s time to learn the concepts of packaging and deploying WinUI applications
    and put that knowledge to use.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的大部分内容中，我们都在本地构建和运行我们的 WinUI 3 应用程序。现在，是时候学习打包和部署 WinUI 应用程序的概念，并将这些知识付诸实践。
- en: 'Why package your application? Well, an application package is the easiest way
    for WinUI applications and their dependencies to be installed in Windows. Today,
    when you run a WinUI project in Visual Studio, the **integrated development environment**
    (**IDE**) creates a package and deploys it locally. Packaging serves several other
    important purposes, outlined as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么要打包应用程序？嗯，应用程序包是 WinUI 应用程序及其依赖项在 Windows 上安装的最简单方式。今天，当你在 Visual Studio
    中运行 WinUI 项目时，**集成开发环境**（**IDE**）会创建一个包并将其本地部署。打包还有其他几个重要的用途，如下所述：
- en: '**Providing a clean uninstall**: A packaging system ensures that any files
    installed or updated with an application are removed or restored to their previous
    state when the application is uninstalled'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提供干净的卸载**：打包系统确保在应用程序卸载时，任何由应用程序安装或更新的文件都会被删除或恢复到其之前的状态'
- en: '**Bundling dependencies**: The application package will bundle and deliver
    all your application’s dependencies, optimizing disk space by sharing files across
    installed applications when possible'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**捆绑依赖项**：应用程序包将捆绑并交付所有应用程序的依赖项，通过在可能的情况下共享安装应用程序中的文件来优化磁盘空间'
- en: '**Facilitating updates**: Differential updates are optimized to only deliver
    files that require updating, based on the manifest of the original package and
    the updated one'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**简化更新**：差异更新已优化，仅根据原始包和更新包的清单交付需要更新的文件'
- en: '**Declaring capabilities**: By declaring your application’s capabilities in
    the manifest, users know what types of access your app requires before they choose
    to install it'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**声明能力**：通过在清单中声明应用程序的能力，用户在选择安装之前就会知道应用程序需要哪些类型的访问权限'
- en: '**Verifying integrity and authenticity**: In order to install a Windows application
    on someone else’s device, the application package must be digitally signed with
    a valid certificate from a **trusted** **signing authority**'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证完整性和真实性**：为了在其他人的设备上安装 Windows 应用程序，应用程序包必须使用来自 **受信任**的 **签名机构**的有效证书进行数字签名。'
- en: If you are going to distribute your WinUI applications, the packaging format
    you will use is **MSIX**. What is MSIX? Let’s find out.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打算分发你的 WinUI 应用程序，你将使用的打包格式是 **MSIX**。什么是 MSIX？让我们来了解一下。
- en: MSIX
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MSIX
- en: MSIX is the latest standard introduced by Microsoft to package applications.
    It is not only for Windows. The **MSIX SDK** ([https://learn.microsoft.com/windows/msix/msix-sdk/sdk-overview](https://learn.microsoft.com/windows/msix/msix-sdk/sdk-overview))
    is an open source project that can be used to create application packages for
    any platform. You can use the SDK for Windows, Linux, macOS, iOS, Android, and
    even web browsers. We will focus on delivering WinUI applications to Windows users
    in this chapter, but you can learn more about the MSIX SDK on its GitHub repository
    at [https://github.com/Microsoft/msix-packaging](https://github.com/Microsoft/msix-packaging).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MSIX 是 Microsoft 引入的最新打包应用程序的标准。它不仅限于 Windows。**MSIX SDK**（[https://learn.microsoft.com/windows/msix/msix-sdk/sdk-overview](https://learn.microsoft.com/windows/msix/msix-sdk/sdk-overview)）是一个开源项目，可以用于为任何平台创建应用程序包。您可以使用
    SDK 为 Windows、Linux、macOS、iOS、Android 以及甚至网页浏览器创建应用程序包。在本章中，我们将专注于向 Windows 用户提供
    WinUI 应用程序，但您可以在其 GitHub 仓库 [https://github.com/Microsoft/msix-packaging](https://github.com/Microsoft/msix-packaging)
    上了解更多关于 MSIX SDK 的信息。
- en: 'On Windows, the following platforms currently support the MSIX format:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，以下平台目前支持 MSIX 格式：
- en: Windows 10, version 1709 and later, and Windows 11
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10 版本 1709 及以后的版本，以及 Windows 11
- en: Windows Server 2019 **Long-Term Servicing Channel** (**LTSC**) and later
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Server 2019 **长期服务渠道**（**LTSC**）及以后的版本
- en: Windows Enterprise 2019 LTSC and later
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Enterprise 2019 LTSC 及以后的版本
- en: Earlier versions of Windows 10 required **APPX** packages, which were the predecessor
    to MSIX packages. However, all Windows 10 versions supported by WinUI 3 also support
    MSIX packages. Microsoft introduced MSIX packages in 2018 as an evolution of APPX,
    intending to fill the needs of APPX as well as legacy **Windows Installer** (**MSI**)
    packages. MSIX is an open standard, and as such, it can be used to distribute
    applications to any platform. MSI has been the standard to package and install
    Windows desktop applications since 1999\. Installing Windows applications with
    MSI packages is supported in Windows 95 and later operating systems.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 10 的早期版本需要 **APPX** 包，它是 MSIX 包的前身。然而，WinUI 3 支持的所有 Windows 10 版本也支持
    MSIX 包。Microsoft 于 2018 年引入了 MSIX 包，作为 APPX 的发展，旨在满足 APPX 以及传统的 **Windows 安装程序**（**MSI**）包的需求。MSIX
    是一个开放标准，因此它可以用于向任何平台分发应用程序。自 1999 年以来，MSI 一直是打包和安装 Windows 桌面应用程序的标准。在 Windows
    95 及以后的操作系统上支持使用 MSI 包安装 Windows 应用程序。
- en: With the new MSIX packaging standard, **Universal Windows Platform** (**UWP**)
    applications delivered to Windows users run inside a lightweight app container.
    WinUI 3 applications can also be configured to run in an app container for additional
    security. The **Windows App Container** provides a sandbox for the execution of
    an application, restricting access to the registry, filesystem, and other system
    capabilities, such as the camera. Any capabilities that an application needs to
    access must be specified in the manifest file. Applications packaged to run in
    an app container and installed with MSIX have *read access* to the Windows registry
    by default. In this configuration, any data written to the virtualized registry
    will be completely removed if the application is uninstalled or reset. The same
    is true of data written to the virtual filesystem.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的 MSIX 打包标准，发送给 Windows 用户的 **通用 Windows 平台**（**UWP**）应用程序将在一个轻量级的应用容器内运行。WinUI
    3 应用程序也可以配置为在应用容器中运行，以提供额外的安全性。**Windows 应用容器**为应用程序的执行提供了一个沙箱，限制了对其注册表、文件系统和其他系统功能（如摄像头）的访问。任何应用程序需要访问的功能都必须在清单文件中指定。打包为在应用容器中运行并使用
    MSIX 安装的程序默认具有对 Windows 注册表的 **读取访问**权。在这种配置下，如果应用程序被卸载或重置，写入虚拟注册表中的任何数据都将被完全删除。对写入虚拟文件系统的数据也是如此。
- en: 'As documented on Microsoft Learn ([https://learn.microsoft.com/windows/msix/overview#inside-an-msix-package](https://learn.microsoft.com/windows/msix/overview#inside-an-msix-package)),
    an MSIX package’s contents are grouped into *application files* and *footprint
    files*, as illustrated in the following diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如 Microsoft Learn 上所述（[https://learn.microsoft.com/windows/msix/overview#inside-an-msix-package](https://learn.microsoft.com/windows/msix/overview#inside-an-msix-package)），MSIX
    包的内容被分为 *应用程序文件* 和 *脚印文件*，如下面的图示所示：
- en: '![Figure 14.1 – The contents of an MSIX package](img/B20908_14_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.1 – MSIX 包的内容](img/B20908_14_01.jpg)'
- en: Figure 14.1 – The contents of an MSIX package
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1 – MSIX 包的内容
- en: 'The application files are the payload of code files and other assets delivered
    to a user. The footprint files are the metadata and other resources that a package
    needs to ensure the application files are delivered as intended. This metadata
    includes the following:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序文件是代码文件和其他资产的有效负载，这些文件被交付给用户。脚印文件是包需要的元数据和其它资源，以确保应用程序文件按预期交付。此元数据包括以下内容：
- en: '`AppManifest`: The manifest (`AppxManifest.xml`) includes information about
    the application’s identity, dependencies, capabilities, extensibility points,
    and visual elements. This is generated from the `Package.appxmanifest` file in
    your WinUI project.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppManifest`：清单（`AppxManifest.xml`）包括有关应用程序标识、依赖项、功能、扩展点和视觉元素的信息。这是从 WinUI
    项目的 `Package.appxmanifest` 文件生成的。'
- en: '`AppBlockmap`: The `AppxBlockMap.xml` file includes an indexed and cryptographically
    hashed list of the files in the package, digitally signed to ensure its integrity
    when the package is signed.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppBlockmap`：`AppxBlockMap.xml` 文件包括一个索引和加密散列的文件列表，这些文件位于包中，并在签名时进行数字签名，以确保包签名时的完整性。'
- en: '`AppSignature`: The `AppxSignature.p7x` file in the package is generated when
    the package is signed. This allows the operating system to validate the signature
    during installation.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AppSignature`：当包被签名时，包中的 `AppxSignature.p7x` 文件被生成。这允许操作系统在安装过程中验证签名。'
- en: '`CodeIntegrity`: Code integrity is ensured by verifying information about the
    package in `AppxManifest.xml`, `AppxBlockMap.xml`, and `AppxSignature.p7x`.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CodeIntegrity`：通过验证 `AppxManifest.xml`、`AppxBlockMap.xml` 和 `AppxSignature.p7x`
    中的包信息来确保代码完整性。'
- en: 'The application files in the package will be installed to `C:\Program Files\WindowsApps``     \<package_name>`, with the application executable found at `C:\Program Files\WindowsApps\<package_name>\<app_name>.exe`.
    Note that you can’t directly execute this `EXE` file, and access to the `WindowsApps`
    folder is restricted by Windows. Data created by the application during and after
    installation will be stored under `C:\Users\<user_name>\AppData\Local\Packages\<package_name>`.
    All the application files, dependencies, and data will be removed when the application
    is uninstalled.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 包中的应用程序文件将被安装到 `C:\Program Files\WindowsApps`\<package_name>，应用程序的可执行文件位于 `C:\Program
    Files\WindowsApps\<package_name>\<app_name>.exe`。请注意，您不能直接执行此 `EXE` 文件，并且对 `WindowsApps`
    文件夹的访问受到 Windows 的限制。应用程序在安装期间和安装后创建的数据将存储在 `C:\Users\<user_name>\AppData\Local\Packages\<package_name>`
    下。当应用程序被卸载时，所有应用程序文件、依赖项和数据都将被删除。
- en: Now that we know the background and history of MSIX, let’s review a few of the
    tools available to developers and IT pros.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 MSIX 的背景和历史，让我们回顾一下可供开发者和 IT 专业人员使用的工具。
- en: Reviewing MSIX tools and resources
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查 MSIX 工具和资源
- en: 'Before we start using MSIX to package our own application, we will review a
    couple of other available tools and resources, as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 MSIX 打包自己的应用程序之前，我们将回顾一些其他可用的工具和资源，如下所示：
- en: '**MSIX Toolkit**: The MSIX Toolkit is an open source collection of MSIX tools
    and scripts maintained by Microsoft on GitHub: [https://github.com/microsoft/MSIX-Toolkit](
    https://github.com/microsoft/MSIX-Toolkit).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSIX 工具包**：MSIX 工具包是由 Microsoft 在 GitHub 上维护的 MSIX 工具和脚本的开源集合：[https://github.com/microsoft/MSIX-Toolkit](https://github.com/microsoft/MSIX-Toolkit)。'
- en: '**MSIX Labs**: Microsoft maintains a set of hands-on tutorials for developers
    and IT pros interested in leveraging MSIX, to package and distribute their applications:
    [https://github.com/Microsoft/msix-labs](https://github.com/Microsoft/msix-labs).'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSIX 实验室**：Microsoft 为对利用 MSIX 感兴趣的开发者和 IT 专业人员维护了一套动手教程，用于打包和分发他们的应用程序：[https://github.com/Microsoft/msix-labs](https://github.com/Microsoft/msix-labs)。'
- en: '**MSIX Packaging Tool**: The MSIX Packaging Tool is an application to repackage
    classic applications in the MSIX format. Existing EXE, MSI, and **Application
    Virtualization** (**App-V**) installation packages can be converted to MSIX packages
    with the tool via its interactive UI or command-line tooling. It is available
    on the Microsoft Store at [https://apps.microsoft.com/store/detail/msix-packaging-tool/9N5LW3JBCXKF](https://apps.microsoft.com/store/detail/msix-packaging-tool/9N5LW3JBCXKF).'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSIX 打包工具**：MSIX 打包工具是一个用于将经典应用程序重新打包为 MSIX 格式的应用程序。现有的 EXE、MSI 和**应用程序虚拟化**（**App-V**）安装包可以通过工具的交互式用户界面或命令行工具转换为
    MSIX 包。它可在 Microsoft Store 中找到：[https://apps.microsoft.com/store/detail/msix-packaging-tool/9N5LW3JBCXKF](https://apps.microsoft.com/store/detail/msix-packaging-tool/9N5LW3JBCXKF)。'
- en: '**MSIX videos**: Microsoft Learn has a series of introductory videos on MSIX
    packaging here: [https://learn.microsoft.com/windows/msix/resources#msix-videos](https://learn.microsoft.com/windows/msix/resources#msix-videos).
    This is a great way to get started on your MSIX journey.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSIX 视频教程**：Microsoft Learn 在这里提供了一系列关于 MSIX 打包的入门视频：[https://learn.microsoft.com/windows/msix/resources#msix-videos](https://learn.microsoft.com/windows/msix/resources#msix-videos)。这是开始您的
    MSIX 之旅的好方法。'
- en: '**MSIX community**: **Microsoft Tech Community** has a group of discussion
    spaces dedicated to MSIX packaging and deployment. Join the community and get
    involved here: [https://techcommunity.microsoft.com/t5/msix/bd-p/MSIX-Discussions](https://techcommunity.microsoft.com/t5/msix/bd-p/MSIX-Discussions).'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSIX 社区**：**Microsoft Tech Community** 有一个专门讨论 MSIX 打包和部署的讨论空间。加入社区并参与其中：[https://techcommunity.microsoft.com/t5/msix/bd-p/MSIX-Discussions](https://techcommunity.microsoft.com/t5/msix/bd-p/MSIX-Discussions)。'
- en: These tools and resources will assist you in your journey while learning the
    ins and outs of WinUI application deployment. It is important to remember that
    MSIX is an area of continual investment by Microsoft. It is the go-forward strategy
    and recommendation to package all applications. WinUI developers don’t need to
    have a deep understanding of MSIX. You will only need a basic knowledge of MSIX
    and the properties that are relevant to our applications. Before we get hands-on,
    we’ll briefly discuss the concepts of **packaged applications**, **package identity**,
    and **app containers** in Windows.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工具和资源将帮助您在学习 WinUI 应用程序部署的细节过程中。重要的是要记住，MSIX 是微软持续投资的一个领域。它是打包所有应用程序的向前策略和推荐。WinUI
    开发者不需要对 MSIX 有深入的了解。您只需要对 MSIX 以及与我们应用程序相关的属性有基本的知识。在我们动手操作之前，我们将简要讨论 Windows
    中 **打包应用程序**、**包标识**和**应用容器**的概念。
- en: Packaged applications and application identity
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 打包应用程序和应用程序标识
- en: There are a few deployment concepts that are specific to the Windows App SDK.
    Let’s cover the basics here before we start to package and deploy our own applications.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows App SDK 中有一些特定的部署概念。在我们开始打包和部署自己的应用程序之前，让我们先在这里介绍这些基础知识。
- en: One of the most important concepts to understand is packaged applications. The
    concepts we have discussed so far apply to packaged WinUI applications. These
    applications are packaged and installed with MSIX, they have package identity,
    and by default, they are **framework-dependent**. We just touched on some important
    concepts in that sentence; let’s start by examining package identity.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 需要理解的最重要概念之一是打包应用程序。我们迄今为止讨论的概念适用于打包的 WinUI 应用程序。这些应用程序使用 MSIX 打包和安装，具有包标识，并且默认情况下是**框架依赖**的。我们在那个句子中提到了一些重要的概念；让我们首先检查包标识。
- en: 'All packaged applications, whether they are WinUI, UWP, or some other desktop
    Windows application type, benefit from package identity. Package identity is the
    unique identifier used by Windows to distinguish and validate the identity of
    your application. There are some Windows App SDK features that are only available
    to applications with package identity. The new Windows App SDK notifications APIs
    that we used in [*Chapter 8*](B20908_08.xhtml#_idTextAnchor197), *Add**ing* *Windows
    Notifications to WinUI Applications*, are available to any packaged application
    because those apps have package identity. For a current list of other features
    that require package identity, see this Microsoft Learn topic: [https://learn.microsoft.com/windows/apps/desktop/modernize/modernize-packaged-apps](https://learn.microsoft.com/windows/apps/desktop/modernize/modernize-packaged-apps).'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有打包的应用程序，无论是WinUI、UWP还是其他桌面Windows应用程序类型，都受益于包标识符。包标识符是Windows用来区分和验证应用程序身份的唯一标识符。有一些Windows
    App SDK功能仅适用于具有包标识符的应用程序。我们在[*第8章*](B20908_08.xhtml#_idTextAnchor197)，*添加* *Windows通知到WinUI应用程序*中使用的新的Windows
    App SDK通知API，对任何打包应用程序都可用，因为这些应用程序具有包标识符。有关需要包标识符的其他功能的当前列表，请参阅此Microsoft Learn主题：[https://learn.microsoft.com/windows/apps/desktop/modernize/modernize-packaged-apps](https://learn.microsoft.com/windows/apps/desktop/modernize/modernize-packaged-apps)。
- en: 'Now, let’s discuss packaged applications and **unpackaged applications**. We
    already reviewed some aspects of packaged apps. Most packaged apps are both packaged
    and installed with MSIX. However, there is a particular variation of a packaged
    application called a **packaged app with an external location**. These applications
    are packaged with MSIX, thus having package identity, but they are installed with
    a different installer mechanism. We won’t deploy a packaged app with an external
    location, but you can read more about them on Microsoft Learn: [https://learn.microsoft.com/windows/apps/desktop/modernize/grant-identity-to-nonpackaged-apps](https://learn.microsoft.com/windows/apps/desktop/modernize/grant-identity-to-nonpackaged-apps).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们讨论打包应用程序和**未打包应用程序**。我们已经审查了打包应用程序的一些方面。大多数打包应用程序都是通过MSIX打包和安装的。然而，有一种打包应用程序的特殊变体，称为**具有外部位置的打包应用程序**。这些应用程序使用MSIX打包，因此具有包标识符，但它们使用不同的安装程序机制进行安装。我们不会部署具有外部位置的打包应用程序，但你可以在Microsoft
    Learn上了解更多关于它们的信息：[https://learn.microsoft.com/windows/apps/desktop/modernize/grant-identity-to-nonpackaged-apps](https://learn.microsoft.com/windows/apps/desktop/modernize/grant-identity-to-nonpackaged-apps)。
- en: Unpackaged applications don’t have package identity, so there are limits on
    the APIs they can access, as previously discussed. In most cases, you will only
    choose this route for legacy applications that don’t require any of the features
    that require package identity and often require fewer restrictions on their capabilities,
    such as filesystem or registry access. UWP applications cannot be unpackaged,
    but WinUI applications can be.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 未打包的应用程序没有包标识符，因此它们可以访问的API受到限制，正如之前所讨论的。在大多数情况下，你只会选择这条路线来处理不需要任何需要包标识符的功能的旧版应用程序，并且通常对它们的功能限制较少，例如文件系统或注册表访问。UWP应用程序不能进行解包，但WinUI应用程序可以。
- en: The final concept to review is that of framework-dependent applications and
    **self-contained** applications. WinUI applications that are framework-dependent
    rely on the Windows App SDK runtime to be installed on the target machine. This
    reduces the size of your application’s installer and allows apps to receive security
    bug fix updates during runtime, without each application updating. The downsides
    are having to check for the presence of the runtime during installation and the
    potential risk of users uninstalling the runtime after your application has been
    installed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个要审查的概念是框架依赖型应用程序和**自包含**应用程序。依赖框架的WinUI应用程序依赖于Windows App SDK运行时在目标机器上安装。这减少了应用程序安装程序的大小，并允许应用程序在运行时接收安全漏洞修复更新，而无需每个应用程序都进行更新。缺点是在安装期间必须检查运行时的存在，以及用户在应用程序安装后卸载运行时的潜在风险。
- en: Self-contained deployments bundle the Windows App SDK runtime with the MSIX.
    This increases the size of the installer but provides complete control over the
    version of the runtime that the application uses. Self-contained applications
    also enable **Xcopy deployment**. You can copy the application and its dependencies
    from the project’s output folder to any supported PC. Other than the package size,
    the primary downside to this option is performance. Self-contained applications
    are slower to load, and they use more system memory because their dependencies
    are not shared with other WinUI applications on the system. They are isolated
    to your application’s process.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 自包含部署将 Windows App SDK 运行时与 MSIX 打包在一起。这增加了安装程序的大小，但提供了对应用程序使用的运行时版本的完全控制。自包含应用程序还支持
    **Xcopy 部署**。你可以将应用程序及其依赖项从项目的输出文件夹复制到任何支持的 PC。除了包大小之外，此选项的主要缺点是性能。自包含应用程序加载较慢，并且由于它们的依赖项不与其他
    WinUI 应用程序共享，因此它们使用更多的系统内存。它们被隔离在你的应用程序进程中。
- en: 'For more detailed information on these concepts, there are two excellent topics
    on Microsoft Learn:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些概念的更详细信息，Microsoft Learn 上有两个优秀主题：
- en: The *Windows App SDK deployment overview* ([https://learn.microsoft.com/windows/apps/package-and-deploy/deploy-overview](https://learn.microsoft.com/windows/apps/package-and-deploy/deploy-overview))
    discusses the pros and cons of self-contained deployment
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Windows App SDK 部署概述* ([https://learn.microsoft.com/windows/apps/package-and-deploy/deploy-overview](https://learn.microsoft.com/windows/apps/package-and-deploy/deploy-overview))
    讨论了自包含部署的优缺点'
- en: The *Deployment overview* topic ([https://learn.microsoft.com/windows/apps/package-and-deploy/](https://learn.microsoft.com/windows/apps/package-and-deploy/))
    dives deeper into packaged apps versus unpackaged apps
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*部署概述* 主题 ([https://learn.microsoft.com/windows/apps/package-and-deploy/](https://learn.microsoft.com/windows/apps/package-and-deploy/))
    深入探讨了打包应用与未打包应用之间的区别'
- en: Now, let’s get started and go hands-on, creating our MSIX package in Visual
    Studio.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们开始动手，在 Visual Studio 中创建我们的 MSIX 包。
- en: Getting started with application packaging in Visual Studio
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中开始应用程序打包
- en: 'In this section, we’ll see how we can package our applications with MSIX in
    Visual Studio. Visual Studio 2022 includes two WinUI project templates capable
    of creating MSIX deployment packages, outlined as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何使用 Visual Studio 将我们的应用程序打包为 MSIX。Visual Studio 2022 包含两个能够创建 MSIX
    部署包的 WinUI 项目模板，具体如下：
- en: '`package.appxmanifest` file to generate an MSIX package'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `package.appxmanifest` 文件生成 MSIX 包
- en: '`package.appxmanifest` file'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.appxmanifest` 文件'
- en: 'We will work with the completed **MyMediaCollection** solution from [*Chapter
    8*](B20908_08.xhtml#_idTextAnchor197). You can either use your own solution from
    that chapter or download a copy from this chapter’s GitHub repository at [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14).
    Let’s see how to generate an MSIX package for the application, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用来自 [*第 8 章*](B20908_08.xhtml#_idTextAnchor197) 的完成后的 **MyMediaCollection**
    解决方案。你可以使用该章节中自己的解决方案，或者从该章节的 GitHub 仓库下载副本，网址为 [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter14)。让我们看看如何为应用程序生成
    MSIX 包，如下所示：
- en: Start by opening the solution in Visual Studio.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在 Visual Studio 中打开解决方案。
- en: 'If you want to review the manifest data for the project, you can open the `Package.appxmanifest`
    file and review the settings on each tab, as illustrated in the following screenshot:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想查看项目的清单数据，可以打开 `Package.appxmanifest` 文件并查看每个选项卡上的设置，如图所示：
- en: "![Figure 14.2 – Reviewing the applicati\uFEFFon manifest](img/B20908_14_02.jpg)"
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.2 – 查看应用程序清单](img/B20908_14_02.jpg)'
- en: Figure 14.2 – Reviewing the application manifest
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2 – 查看应用程序清单
- en: 'Then, right-click the `MyMediaCollection` project in **Solution Explorer**
    and select **Package and Publish** | **Create App Packages**. The **Create App
    Packages** window will appear, as illustrated in the following screenshot:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 **解决方案资源管理器** 中右键单击 `MyMediaCollection` 项目，并选择 **包和发布** | **创建应用包**。将出现
    **创建应用包** 窗口，如图所示：
- en: '![Figure 14.3 – The Create App Packages window](img/B20908_14_03.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.3 – 创建应用包窗口](img/B20908_14_03.jpg)'
- en: Figure 14.3 – The Create App Packages window
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3 – 创建应用包窗口
- en: Select **Sideloading**, leave **Enable automatic updates** selected, and click
    **Next**. This is the MSIX equivalent of **ClickOnce** **deployment** ([https://learn.microsoft.com/visualstudio/deployment/clickonce-security-and-deployment](https://learn.microsoft.com/visualstudio/deployment/clickonce-security-and-deployment)).
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**侧载**，保留**启用自动更新**选项选中，并点击**下一步**。这是MSIX的**ClickOnce** **部署**（[https://learn.microsoft.com/visualstudio/deployment/clickonce-security-and-deployment](https://learn.microsoft.com/visualstudio/deployment/clickonce-security-and-deployment)）的等效操作。
- en: 'On the **Select signing method** page, remove the current certificate if one
    appears. You will see options to add a certificate from **Azure Key Vault**, the
    Store, or a local file, or create a new one, as illustrated in the following screenshot:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择签名方法**页面，如果出现当前证书，请将其删除。您将看到从**Azure Key Vault**、存储或本地文件添加证书的选项，或者创建一个新的证书，如以下截图所示：
- en: '![Figure 14.4 – Selecting a signing method for the package](img/B20908_14_04.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4 – 选择包的签名方法](img/B20908_14_04.jpg)'
- en: Figure 14.4 – Selecting a signing method for the package
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – 选择包的签名方法
- en: We will create a self-signed certificate here. If you wanted to create a package
    with a certificate from a trusted authority, you would choose one of the `.pfx`
    file. For this exercise, select **Create**.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在这里将创建一个自签名证书。如果您想使用受信任机构的证书创建一个包，您可以选择一个`.pfx`文件。对于这个练习，请选择**创建**。
- en: Enter and confirm a secure password on the **Create a Self-Signed Test Certificate**
    dialog, and click **OK**. If you are prompted to overwrite an existing certificate,
    you can do that. Select **Yes** to continue. You will also receive a message about
    the certificate being imported to the certificate store for package signing. You
    can click **OK** on that message dialog.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建自签名测试证书**对话框中输入并确认一个安全密码，然后点击**确定**。如果您被提示覆盖现有证书，您可以这样做。选择**是**以继续。您还将收到一条关于证书被导入到证书存储以进行包签名存储的消息。您可以在该消息对话框中点击**确定**。
- en: When you return to the **Select signing method** page, the new certificate details
    will appear. Make sure you click the **Trust** button on the page to trust the
    certificate on your machine before continuing. Click **Next**.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您返回到**选择签名方法**页面时，新的证书详细信息将出现。确保在继续之前，您点击页面上的**信任**按钮以信任您机器上的证书。然后点击**下一步**。
- en: On the **Select and configure packages** page, there are options to change the
    version number, generate an app bundle, or add, remove, and change solution configuration
    mappings. There is also a checkbox to include public symbol files with your package.
    Leave all the defaults and click **Next**.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择和配置包**页面，有选项可以更改版本号、生成应用程序包，或者添加、删除和更改解决方案配置映射。还有一个复选框可以包含与您的包一起的公共符号文件。保留所有默认设置并点击**下一步**。
- en: 'On the **Configure update settings** page, an **Installer location** path is
    required. For applications where you will install a workstation on an internal
    network, you could enter the network path to the package here. For our test purposes,
    we will enter a local path, as illustrated in the following screenshot. For an
    application to update correctly on other machines, the same local path to the
    installer would need to exist:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置更新设置**页面，需要一个**安装位置**路径。对于您将在内部网络上安装工作站的程序，您可以在此处输入包的网络路径。对于我们测试的目的，我们将输入一个本地路径，如以下截图所示。为了使应用程序在其他机器上正确更新，需要存在相同的本地路径到安装程序：
- en: '![Figure 14.5 – Configuring update settings for the package](img/B20908_14_05.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图14.5 – 配置包的更新设置](img/B20908_14_05.jpg)'
- en: Figure 14.5 – Configuring update settings for the package
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 – 配置包的更新设置
- en: Click **Create**. The solution will be built, and the package will be created.
    When it completes, click the **Copy and Close** button to copy the installer to
    your selected installer location.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。解决方案将被构建，包将被创建。当它完成后，点击**复制并关闭**按钮将安装程序复制到您选择的安装位置。
- en: 'Open the `MyMediaCollection_1.0.0.0_x64_Debug_Test` folder to see the generated
    MSIX file, as illustrated in the following screenshot:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`MyMediaCollection_1.0.0.0_x64_Debug_Test`文件夹以查看生成的MSIX文件，如以下截图所示：
- en: '![Figure 14.6 – The MSIX package created for MyMediaCollection](img/B20908_14_06.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图14.6 – 为MyMediaCollection创建的MSIX包](img/B20908_14_06.jpg)'
- en: Figure 14.6 – The MSIX package created for MyMediaCollection
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 – 为MyMediaCollection创建的MSIX包
- en: 'Navigate to the `MyMediaCollection` parent folder and double-click the `index.html`
    file to install the package. It will open the file in your default browser and
    present you with options to install any of the configurations selected during
    packaging. Note, in the following screenshot, I packaged the application a second
    time, so the version number has been automatically incremented to `1.0.1.0`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 `MyMediaCollection` 的父文件夹，并双击 `index.html` 文件来安装软件包。它将在你的默认浏览器中打开文件，并显示在打包过程中选择的任何配置的安装选项。注意，在下面的屏幕截图中，我已经第二次打包了应用程序，因此版本号已自动增加到
    `1.0.1.0`：
- en: '![Figure 14.7 – The installation page for MyMediaCollection](img/B20908_14_07.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.7 – MyMediaCollection 的安装页面](img/B20908_14_07.jpg)'
- en: Figure 14.7 – The installation page for MyMediaCollection
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.7 – MyMediaCollection 的安装页面
- en: If you try to install the package on the same machine where it has already been
    installed and run, you will be prompted to update the application. Continue to
    install or update the application on your system.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试在已经安装并运行软件包的同一台机器上安装该软件包，系统会提示你更新应用程序。继续在你的系统上安装或更新应用程序。
- en: 'Creating a package with Visual Studio is how most IDE users will choose to
    generate their installers. There are also tools to create MSIX packages and bundles
    at the command line, which are described in the Microsoft Learn documentation:
    [https://learn.microsoft.com/windows/msix/package/manual-packaging-root](https://learn.microsoft.com/windows/msix/package/manual-packaging-root).'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 创建软件包是大多数 IDE 用户选择生成安装程序的方式。还有命令行工具可以创建 MSIX 软件包和捆绑包，这些工具在微软学习文档中有描述：[https://learn.microsoft.com/windows/msix/package/manual-packaging-root](https://learn.microsoft.com/windows/msix/package/manual-packaging-root)。
- en: Now, let’s look at an alternative distribution method, Windows Package Manager.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看另一种替代的发行方法，Windows 软件包管理器。
- en: Deploying applications with Windows Package Manager
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Windows 软件包管理器部署应用程序
- en: Windows Package Manager, also referred to by its command name `WinGet` command
    to install published packages and the steps to add your own MSIX packages to the
    `WinGet` finds available packages to install. The Microsoft Store is one of the
    package sources available to `WinGet`. So, if you plan to publish your application
    to the store, it is not necessary to also publish it to the WinGet repository.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 软件包管理器，也被称为其命令名 `WinGet` 命令来安装已发布的软件包以及将你的 MSIX 软件包添加到 `WinGet` 的步骤。微软商店是
    `WinGet` 可用的软件包源之一。因此，如果你计划将你的应用程序发布到商店，就没有必要将其也发布到 WinGet 仓库。
- en: Let’s start by reviewing the steps to add a package to the community repository.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们回顾一下将软件包添加到社区仓库的步骤。
- en: Adding a package to the community repository
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将软件包添加到社区仓库
- en: To make your applications available to Windows users with the `WinGet` command,
    they must be published to Microsoft’s Package Manager community repository or
    the Microsoft Store. Any application published to the community repository can
    be discovered and installed through the `WinGet` command in Windows.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 `WinGet` 命令使你的应用程序可供 Windows 用户使用，它们必须发布到微软的软件包管理器社区仓库或微软商店。任何发布到社区仓库的应用程序都可以通过
    Windows 中的 `WinGet` 命令被发现和安装。
- en: Note
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This method of distribution is inherently less secure than distribution through
    the Microsoft Store. In theory, anyone with access to the public repository could
    extract the package and de-compile your application.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与通过微软商店的发行方式相比，这种发行方式在本质上要安全得多。理论上，任何能够访问公共仓库的人都可以提取软件包并反编译你的应用程序。
- en: 'To add your existing MSIX bundle to the repository, we will need to make it
    publicly available, create a WinGet manifest, and submit a GitHub **pull request**
    (**PR**) to have the manifest added to the community repository, as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 要将你的现有 MSIX 捆绑包添加到仓库，我们需要使其公开可用，创建一个 WinGet 清单，并向 GitHub 提交一个 **pull request**
    (**PR**) 以将清单添加到社区仓库，具体操作如下：
- en: 'Start by pushing the contents of the installer folder we created (`C:\Installers\MyMediaCollection`)
    to a public URL. To do this, you could create a static website in Azure. This
    Microsoft Learn topic walks through the process: [https://learn.microsoft.com/azure/static-web-apps/get-started-portal](https://learn.microsoft.com/azure/static-web-apps/get-started-portal).
    This would require a GitHub or Azure DevOps repository to host the files to be
    deployed.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将我们创建的安装程序文件夹（`C:\Installers\MyMediaCollection`）的内容推送到一个公开的 URL。为此，你可以在 Azure
    中创建一个静态网站。这个 Microsoft Learn 主题将介绍这个过程：[https://learn.microsoft.com/azure/static-web-apps/get-started-portal](https://learn.microsoft.com/azure/static-web-apps/get-started-portal)。这将需要一个
    GitHub 或 Azure DevOps 仓库来托管要部署的文件。
- en: The files can be made available on any public URL. Another option is to host
    the files in **Azure Blob Storage** ([https://learn.microsoft.com/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal](https://learn.microsoft.com/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal)).
    We will choose this option.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 文件可以被放在任何公开的 URL 上。另一个选项是将文件托管在 **Azure Blob Storage** 中（[https://learn.microsoft.com/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal](https://learn.microsoft.com/azure/storage/blobs/storage-blob-static-website-how-to?tabs=azure-portal)）。我们将选择这个选项。
- en: 'After the `index.html` filename that we’ll upload as the index document name.
    After you save the file, the **Primary endpoint** field will appear, as seen in
    the following screenshot:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们将上传为索引文档名称的 `index.html` 文件名之后。保存文件后，将出现 **主端点** 字段，如下面的截图所示：
- en: '![Figure 14.8 – Setting up a static website in Azure Blob Storage](img/B20908_14_08.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.8 – 在 Azure Blob 存储中设置静态网站](img/B20908_14_08.jpg)'
- en: Figure 14.8 – Setting up a static website in Azure Blob Storage
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.8 – 在 Azure Blob 存储中设置静态网站
- en: Click the **$web** link on that page to navigate to the portal page, where you
    can upload files to the static web app folder.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击该页面上的 **$web** 链接以导航到门户页面，在那里你可以上传文件到静态网站文件夹。
- en: Click `C:\Installers\MyMediaCollection` folder.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `C:\Installers\MyMediaCollection` 文件夹。
- en: Once your package is in the cloud, you are ready to create your manifest file
    for the community repository. The file is created in the **YAML** format. YAML
    files are the current standard for **DevOps** workflows.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你的包在云端，你就可以为社区仓库创建你的清单文件了。该文件以 **YAML** 格式创建。YAML 文件是当前 **DevOps** 工作流程的标准。
- en: 'For detailed instructions on creating a manifest and links to learn more about
    YAML, check out this Microsoft Learn topic: [https://learn.microsoft.com/windows/package-manager/package/manifest](https://learn.microsoft.com/windows/package-manager/package/manifest):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '有关创建清单的详细说明以及有关 YAML 的更多信息，请查看此 Microsoft Learn 主题：[https://learn.microsoft.com/windows/package-manager/package/manifest](https://learn.microsoft.com/windows/package-manager/package/manifest):'
- en: 'Name your YAML file `YourCompany.MyMediaCollection.yaml`; the contents should
    look something like this:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的 YAML 文件命名为 `YourCompany.MyMediaCollection.yaml`；内容应该看起来像这样：
- en: '[PRE0]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To get the `Sha256` information for your `.msix` file, you can use this command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取你的 `.msix` 文件的 `Sha256` 信息，你可以使用此命令：
- en: '[PRE1]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Then, test your manifest with WinGet. To install WinGet, you can install the
    **App Installer** app from the Microsoft Store at [https://apps.microsoft.com/store/detail/app-installer/9NBLGGH4NNS1](https://apps.microsoft.com/store/detail/app-installer/9NBLGGH4NNS1).
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用 WinGet 测试你的清单。要安装 WinGet，你可以从 Microsoft Store 安装 **App Installer** 应用程序，链接为
    [https://apps.microsoft.com/store/detail/app-installer/9NBLGGH4NNS1](https://apps.microsoft.com/store/detail/app-installer/9NBLGGH4NNS1)。
- en: 'After the application is installed from the store, test the syntax in your
    manifest with the following command:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序从商店安装后，使用以下命令测试你的清单中的语法：
- en: '[PRE2]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, test installing the app from your manifest with this command:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用此命令测试从你的清单中安装应用程序：
- en: '[PRE3]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: manifests\<letter of alphabet>\<publisher>\<package>\<version>\<filename>.yaml
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: manifests\<字母表中的字母>\<发布者>\<包>\<版本>\<文件名>.yaml
- en: '[PRE4]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you’re unfamiliar with the GitHub forking and PR workflow, the Package Manager
    documentation has more detailed steps: [https://learn.microsoft.com/windows/package-manager/package/repository#step-3-clone-the-repository](https://learn.microsoft.com/windows/package-manager/package/repository#step-3-clone-the-repository).'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对 GitHub 分支和 PR 工作流程不熟悉，Package Manager 文档中有更详细的步骤：[https://learn.microsoft.com/windows/package-manager/package/repository#step-3-clone-the-repository](https://learn.microsoft.com/windows/package-manager/package/repository#step-3-clone-the-repository).
- en: After the PR has been approved and merged, any users with WinGet will be able
    to install your application from the command line. Let’s see how to use WinGet
    next.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PR 被批准并合并后，任何拥有 WinGet 的用户都将能够从命令行安装你的应用程序。让我们看看如何使用 WinGet。
- en: Using WinGet for package management
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用WinGet进行包管理
- en: WinGet is the command-line client for Windows Package Manager. If you are familiar
    with other application package managers, such as **Chocolatey** for Windows ([https://chocolatey.org/](https://chocolatey.org/))
    or **Homebrew** for macOS ([https://brew.sh/](https://brew.sh/)), WinGet will
    feel familiar to you. A package manager allows you to install, list, and update
    applications on your operating system and to script the installation of multiple
    applications, such as when you’re setting up a new computer. In this section,
    we will see how to use WinGet to install **Windows Terminal**, Microsoft’s modern
    command-line app, built with WinUI!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: WinGet是Windows包管理器的命令行客户端。如果你熟悉其他应用程序包管理器，例如Windows的**Chocolatey**（[https://chocolatey.org/](https://chocolatey.org/))或macOS的**Homebrew**（[https://brew.sh/](https://brew.sh/))，WinGet会让你感到熟悉。包管理器允许你在操作系统中安装、列出和更新应用程序，并可以编写脚本安装多个应用程序，例如在设置新电脑时。在本节中，我们将了解如何使用WinGet安装**Windows
    Terminal**，这是微软使用WinUI构建的现代命令行应用程序！
- en: Note
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To read about how the Windows Terminal team created the application with WinUI,
    check out this blog post: [https://devblogs.microsoft.com/commandline/building-windows-terminal-with-winui/](https://devblogs.microsoft.com/commandline/building-windows-terminal-with-winui/).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解Windows Terminal团队如何使用WinUI创建应用程序，请查看这篇博客文章：[https://devblogs.microsoft.com/commandline/building-windows-terminal-with-winui/](https://devblogs.microsoft.com/commandline/building-windows-terminal-with-winui/)。
- en: 'Let’s now look at the steps:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看一下步骤：
- en: You already have the App Installer preview installed, so open **Command Prompt**.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你已经安装了应用程序安装器预览版，因此请打开**命令提示符**。
- en: 'Test WinGet with the following command:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令测试WinGet：
- en: '[PRE5]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: winget search windowsterminal
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: winget search windowsterminal
- en: '[PRE6]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '![Figure 14.9 – Performing a search with WinGet](img/B20908_14_09.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图14.9 – 使用WinGet进行搜索](img/B20908_14_09.jpg)'
- en: Figure 14.9 – Performing a search with WinGet
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9 – 使用WinGet进行搜索
- en: Note
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You may have to agree to the Microsoft Store *terms of transaction* before continuing.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，你可能需要同意Microsoft Store的**交易条款**。
- en: 'To get more information about the package, use the `show` command, as follows:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取有关包的更多信息，请使用`show`命令，如下所示：
- en: '[PRE7]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This will return the following from the application’s manifest:'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将返回应用程序清单中的以下信息：
- en: '![Figure 14.10 – Viewing manifest information for a WinGet package](img/B20908_14_10.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图14.10 – 查看WinGet包的清单信息](img/B20908_14_10.jpg)'
- en: Figure 14.10 – Viewing manifest information for a WinGet package
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.10 – 查看WinGet包的清单信息
- en: 'Then, enter this command to install Windows Terminal:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入以下命令来安装Windows Terminal：
- en: '[PRE8]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'That’s all there is to using WinGet. Because it is a command-line tool, you
    can build scripts that install all the software you need to get a new PC or **virtual
    machine** (**VM**) up and running. Get more information about scripting with WinGet
    on Microsoft Learn: [https://learn.microsoft.com/windows/package-manager/winget/#scripting-winget](https://learn.microsoft.com/windows/package-manager/winget/#scripting-winget).'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用WinGet的全部内容。因为它是一个命令行工具，你可以构建脚本，安装所有需要的软件，以便在新电脑或**虚拟机**（**VM**）上运行。在Microsoft
    Learn上获取有关使用WinGet进行脚本编写的更多信息：[https://learn.microsoft.com/windows/package-manager/winget/#scripting-winget](https://learn.microsoft.com/windows/package-manager/winget/#scripting-winget)。
- en: Let’s move along to our final section, where we will learn about distributing
    applications in the Microsoft Store.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续到最后一个部分，我们将学习如何在Microsoft Store中分发应用程序。
- en: Distributing applications with the Microsoft Store
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Microsoft Store分发应用程序
- en: We have seen how to deliver WinUI applications to users through packages that
    can be sideloaded and with WinGet. There are a couple of other distribution channels
    available to Windows developers – **Microsoft Intune** for enterprise application
    distribution, and the **Microsoft Store** for consumer apps.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到如何通过可以侧载的包将WinUI应用程序传递给用户，以及如何使用WinGet。对于Windows开发者来说，还有其他几个分发渠道可用——**Microsoft
    Intune**用于企业应用程序分发，以及**Microsoft Store**用于消费类应用程序。
- en: 'A deeper dive into **Microsoft Endpoint Configuration Manager** and Intune
    is beyond the scope of this book, but if you are interested in learning how to
    distribute **line of business** (**LOB**) applications through them, you can read
    this Microsoft Learn topic: [https://learn.microsoft.com/windows/apps/publish/distribute-lob-apps-to-enterprises](https://learn.microsoft.com/windows/apps/publish/distribute-lob-apps-to-enterprises).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 对**Microsoft Endpoint Configuration Manager**和Intune的深入探讨超出了本书的范围，但如果您想了解如何通过它们分发**业务线**（**LOB**）应用程序，您可以阅读这个Microsoft
    Learn主题：[https://learn.microsoft.com/windows/apps/publish/distribute-lob-apps-to-enterprises](https://learn.microsoft.com/windows/apps/publish/distribute-lob-apps-to-enterprises)。
- en: The Microsoft Store is the consumer app store for Windows users. The store accepts
    submissions for free and paid apps. Additional monetization options such as in-app
    purchases, sale pricing, and paid apps with a free trial period can also be configured.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft商店是Windows用户的消费应用商店。商店接受免费和付费应用的提交。还可以配置额外的货币化选项，例如应用内购买、销售定价和带免费试用期的付费应用。
- en: 'In this section, we will cover the basics of submitting a free application
    to the store. If you want to learn more about monetizing your app, you can start
    here: [https://learn.microsoft.com/windows/apps/publish/publish-your-app/price-and-availability](https://learn.microsoft.com/windows/apps/publish/publish-your-app/price-and-availability).'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍提交免费应用程序到商店的基本知识。如果您想了解更多关于货币化您的应用的信息，您可以从这里开始：[https://learn.microsoft.com/windows/apps/publish/publish-your-app/price-and-availability](https://learn.microsoft.com/windows/apps/publish/publish-your-app/price-and-availability)。
- en: Let’s see how to submit **MyMediaCollection** to the Microsoft Store.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何将**MyMediaCollection**提交到Microsoft商店。
- en: Preparing a free application for the Microsoft Store
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备免费应用程序提交到Microsoft商店
- en: 'In this section, we will use Visual Studio to prepare and submit the **MyMediaCollection**
    application to the Microsoft Store. The Microsoft Store is the primary delivery
    outlet for consumer applications. Before you start this process, you will need
    to have a developer account on the store. Let’s do this now, as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Visual Studio准备和提交**MyMediaCollection**应用程序到Microsoft商店。Microsoft商店是消费应用程序的主要分发渠道。在开始此过程之前，您需要在商店中拥有一个开发者账户。我们现在就来做，如下所示：
- en: First, visit the sign-up page for the Microsoft Store ([https://developer.microsoft.com/microsoft-store/register/](https://developer.microsoft.com/microsoft-store/register/))
    and click **SIGN UP**.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问Microsoft商店的注册页面([https://developer.microsoft.com/microsoft-store/register/](https://developer.microsoft.com/microsoft-store/register/))并点击**注册**。
- en: Sign in with a Microsoft account, and select the country or region where you
    or your company is located.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Microsoft账户登录，并选择您或您的公司所在的国家或地区。
- en: Note
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: This account will be the owner of the Store account and cannot easily be changed.
    If you create a Store account for an organization, it is recommended to use a
    separate Microsoft account that is not tied to any individual at the organization
    or company.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此账户将是商店账户的所有者，并且无法轻易更改。如果您为组织创建商店账户，建议使用一个与组织或公司中任何个人无关的单独的Microsoft账户。
- en: Choose **Individual** or **Company** as your account type.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的账户类型为**个人**或**公司**。
- en: Enter your publisher display name. This is the name that will be seen by users
    on your public application store listings, so choose this carefully.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的发布者显示名称。这是用户在您的公共应用商店列表中看到的名称，因此请仔细选择。
- en: Enter your contact details – this information will be used by Microsoft to contact
    you if there are any issues or updates with your store listings. Click **Next**
    to continue and enter payment information.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您的联系信息——如果您的商店列表有任何问题或更新，Microsoft将使用这些信息与您联系。点击**下一步**继续并输入付款信息。
- en: Pay a one-time store registration fee. Microsoft charges a small fee the first
    time you register for an account on the store. This helps to prevent fraudulent
    and malicious accounts from being created. In most countries, the fee is approximately
    *$19 US Dollars (USD) for individuals* and *$99 USD for a* *company account*.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 支付一次性的商店注册费。Microsoft在您首次在商店注册账户时收取少量费用。这有助于防止欺诈和恶意账户的创建。在大多数国家，费用大约为**个人**约*19美元（USD）*和**公司账户**约*99美元（USD）*。
- en: 'The full listing of fees by country is available here: [https://learn.microsoft.com/windows/apps/publish/partner-center/account-types-locations-and-fees#developer-account-and-app-submission-markets](https://learn.microsoft.com/windows/apps/publish/partner-center/account-types-locations-and-fees#developer-account-and-app-submission-markets).'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 各国的完整费用列表可在以下链接查看：[https://learn.microsoft.com/windows/apps/publish/partner-center/account-types-locations-and-fees#developer-account-and-app-submission-markets](https://learn.microsoft.com/windows/apps/publish/partner-center/account-types-locations-and-fees#developer-account-and-app-submission-markets)。
- en: When you are finished, click **Review**.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成后，点击**审查**。
- en: Review the details for your account and the app developer agreement, and click
    **Finish** to confirm your registration. Payment will be processed at this time,
    and you will receive a confirmation email.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看您的账户详情和应用开发者协议，然后点击**完成**以确认您的注册。此时将处理付款，并且您将收到确认电子邮件。
- en: 'Now that you have an account on the Microsoft Store, we can proceed to submit
    our first app, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经在 Microsoft Store 上有了账户，我们可以继续提交我们的第一个应用，具体步骤如下：
- en: Return to Visual Studio and right-click on the `MyMediaCollection` project in
    **Solution Explorer**.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio，在**解决方案资源管理器**中右键单击`MyMediaCollection`项目。
- en: Select **Package and Publish** | **Create App Packages**. This process starts
    out the same as when creating a package for sideloading.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**包和发布** | **创建应用包**。这个过程与创建用于旁加载的包的过程相同。
- en: On the **Select distribution method** screen, select **Microsoft Store under
    a new app name**, and click **Next**.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择分发方式**屏幕上，选择**以新应用名称在 Microsoft Store 下**，然后点击**下一步**。
- en: 'On the **Select an app name** screen, ensure the Microsoft account linked to
    your store account is selected, and enter your desired application name in the
    **Reserve a new app name** field. Click **Reserve** to check whether the name
    is available. Each app name must be unique across the Microsoft Store. The app
    name will appear in your list of apps, as illustrated in the following screenshot:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择应用名称**屏幕上，确保选择与您的商店账户链接的 Microsoft 账户，并在**预留新应用名称**字段中输入您希望的应用名称。点击**预留**以检查名称是否可用。每个应用名称在
    Microsoft Store 中必须是唯一的。应用名称将出现在您的应用列表中，如以下截图所示：
- en: '![Figure 14.11 – Selecting an app name for the Microsoft Store listing](img/B20908_14_11_new.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.11 – 为 Microsoft Store 列表选择应用名称](img/B20908_14_11_new.jpg)'
- en: Figure 14.11 – Selecting an app name for the Microsoft Store listing
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.11 – 为 Microsoft Store 列表选择应用名称
- en: Select the app name in your **Existing app names** list, and click **Next**.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的**现有应用名称**列表中选择应用名称，然后点击**下一步**。
- en: 'You can leave the default values on the **Select and configure packages** screen
    unless you want to update the version or the solution configuration mappings.
    Click **Create** at the bottom of the screen, as illustrated in the following
    screenshot:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在**选择和配置包**屏幕上保留默认值，除非您想更新版本或解决方案配置映射。如以下截图所示，在屏幕底部点击**创建**：
- en: "![Figure 14.12 – T\uFEFFhe Select and confi\uFEFFgure packages screen](img/B20908_14_12.jpg)"
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.12 – 选择和配置包屏幕](img/B20908_14_12.jpg)'
- en: Figure 14.12 – The Select and configure packages screen
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.12 – 选择和配置包屏幕
- en: Visual Studio will build your project and prepare the package for the store.
    It will also do some validation of your app manifest data. If you receive any
    errors during packaging, fix them and try again. If you feel your submission is
    ready to go after reviewing the submission checklist ([https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission#app-submission-checklist](https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission#app-submission-checklist)),
    you can check the **Automatically submit to the Microsoft Store after Windows
    App Certification Kit validation** checkbox on the **Finished creating package**
    screen. This will submit your package to the store upon a successful validation
    run.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio 将构建您的项目并为商店准备包。它还将对您的应用清单数据进行一些验证。如果在打包过程中遇到任何错误，请修复它们并再次尝试。如果您在审查提交清单（[https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission#app-submission-checklist](https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission#app-submission-checklist)）后认为您的提交已准备好，您可以在**完成创建包**屏幕上勾选**在
    Windows 应用认证工具包验证后自动提交到 Microsoft Store**复选框。这将使您的包在验证运行成功后提交到商店。
- en: 'Click the **Launch Windows App Certification Kit** button. When the certification
    kit launches, keep all the tests selected, and then click **Next**. The tests
    will take several minutes to complete, and the application may launch several
    times during the validation process. The following screenshot illustrates the
    **Validating** **App** progress:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**启动Windows应用程序认证工具包**按钮。当认证工具包启动时，保留所有测试，然后点击**下一步**。测试可能需要几分钟才能完成，应用程序在验证过程中可能会启动几次。以下截图说明了**验证****应用程序**的进度：
- en: '![Figure 14.13 – The Microsoft Store application validation in process](img/B20908_14_13.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图14.13 – 微软商店应用程序验证过程](img/B20908_14_13.jpg)'
- en: Figure 14.13 – The Microsoft Store application validation in process
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.13 – 微软商店应用程序验证过程
- en: 'The process should provide a **PASSED** result on the **View Final Report**
    page. Upon completion, you can click the **Click here to view the results** option
    to see which tests passed or failed. All failures should be addressed before continuing
    with the store submission. These tests will be run during the Microsoft Store
    approval process, and any failures here are likely to cause the submission to
    be rejected. For details on the tests and corrective actions that can be taken
    for failures, you can review this Microsoft Learn topic: [https://learn.microsoft.com/windows/uwp/debug-test-perf/windows-app-certification-kit-tests](https://learn.microsoft.com/windows/uwp/debug-test-perf/windows-app-certification-kit-tests).'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此过程应在**查看最终报告**页面上提供**通过**结果。完成后，您可以点击**点击此处查看结果**选项，以查看哪些测试通过或失败。在继续商店提交之前，应解决所有失败。这些测试将在微软商店的审批过程中运行，任何失败都可能导致提交被拒绝。有关测试和针对失败可以采取的纠正措施的详细信息，您可以查看此微软学习主题：[https://learn.microsoft.com/windows/uwp/debug-test-perf/windows-app-certification-kit-tests](https://learn.microsoft.com/windows/uwp/debug-test-perf/windows-app-certification-kit-tests)。
- en: When you have a validated application ready to submit to the store, you can
    continue the process. Let’s walk through how to submit a WinUI application through
    the Microsoft Partner Center website.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 当您有一个准备提交到商店的验证应用程序时，您可以继续此过程。让我们通过微软合作伙伴中心网站来了解如何提交WinUI应用程序。
- en: Uploading a package to the Store
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上传包到商店
- en: 'In this section, we will walk through submitting a package created by Visual
    Studio to the Microsoft Store using the Partner Center dashboard. To do this,
    proceed as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过合作伙伴中心仪表板将Visual Studio创建的包提交到微软商店。为此，请按照以下步骤操作：
- en: 'Start by logging in to the Partner Center with your Microsoft account at the
    following URL: [https://partner.microsoft.com/dashboard/home](https://partner.microsoft.com/dashboard/home).'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在以下URL使用您的微软账户登录到合作伙伴中心：[https://partner.microsoft.com/dashboard/home](https://partner.microsoft.com/dashboard/home)。
- en: Click **Apps and Games**, and you will be taken to the **Overview** page to
    submit apps and games to Windows and Xbox.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用程序和游戏**，您将被带到**概览**页面，以将应用程序和游戏提交到Windows和Xbox。
- en: 'You will see a list of reserved app names and submitted apps on your account
    here. If you do not yet have an app name reserved, you can click **New product**
    | **MSIX or PWA app**. I am going to select **My Media Collection** from my apps
    to submit an initial version of this application. The following screenshot illustrates
    how you would start to reserve a new name:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里，您将看到您账户中预留的应用程序名称和提交的应用程序列表。如果您还没有预留应用程序名称，您可以点击**新产品** | **MSIX或PWA应用程序**。我将从我的应用程序中选择**我的媒体收藏**来提交此应用程序的初始版本。以下截图说明了您如何开始预留新名称：
- en: '![Figure 14.14 – Reserving a new name for your application](img/B20908_14_14.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图14.14 – 为您的应用程序预留新名称](img/B20908_14_14.jpg)'
- en: Figure 14.14 – Reserving a new name for your application
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.14 – 为您的应用程序预留新名称
- en: 'On the **Application overview** page for your selected app, click **Start your
    submission**, as illustrated in the following screenshot:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您所选应用程序的**应用程序概览**页面，点击**开始您的提交**，如图下所示：
- en: '![Figure 14.15 – Starting your new application submission](img/B20908_14_15.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图14.15 – 开始您的新的应用程序提交](img/B20908_14_15.jpg)'
- en: Figure 14.15 – Starting your new application submission
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.15 – 开始您的新的应用程序提交
- en: Begin the submission by selecting the **Pricing and** **availability** section.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**定价和可用性**部分开始提交。
- en: We will keep all the default settings in this section, except for the **Base
    price** option. A selection must be made here. Choose the **Free** option or select
    a base price from the list. When you are done, select **Save draft**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将在这个部分保留所有默认设置，除了**基础价格**选项。这里必须进行选择。请选择**免费**选项或从列表中选择一个基础价格。完成后，选择**保存草稿**。
- en: Then, select the **Properties** section. Select a category and sub-category,
    if necessary, and enter your **Support info** data. Enter any relevant data for
    your app in the **Display mode**, **Product declarations**, and **System requirements**
    sections, and click **Save**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择**属性**部分。选择一个类别和子类别（如果需要），并输入您的**支持信息**数据。在**显示模式**、**产品声明**和**系统要求**部分输入您应用的任何相关数据，然后点击**保存**。
- en: 'The **Properties** section can be seen in the following screenshot:'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**属性**部分可以在以下屏幕截图中看到：'
- en: '![Figure 14.16 – The Properties section of the application submission](img/B20908_14_16.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![图14.16 – 应用提交的属性部分](img/B20908_14_16.jpg)'
- en: Figure 14.16 – The Properties section of the application submission
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.16 – 应用提交的属性部分
- en: Complete the questionnaire on the **Age ratings** page and click **Preview ratings**.
    This page determines whether your app should be restricted to certain age groups,
    based on the data it collects or exchanges with other users. If everything looks
    good after generation, click **Save**, followed by **Continue**.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**年龄分级**页面上完成问卷并点击**预览分级**。此页面根据收集或与其他用户交换的数据确定您的应用是否应限制在特定年龄组。如果生成后一切看起来都很好，点击**保存**，然后点击**继续**。
- en: Select the `.msixupload` or `.msix` file and upload it to the site for submission.
    Choose the compatible device families and click **Save**.
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`.msixupload`或`.msix`文件并将其上传到提交网站。选择兼容的设备系列并点击**保存**。
- en: Then, select a language under the **Store listings** section. Supporting multiple
    languages and specifying them here makes it more likely that your application
    will be installed in different countries. Add an application description and at
    least one screenshot of your application. The remaining fields are optional, but
    the more you complete, the easier it will be for customers to find your app, and
    the more likely they are to try it. When everything is completed, click **Save**.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在**商店列表**部分下选择一种语言。支持多种语言并在此处指定它们会使您的应用在不同国家安装的可能性更大。添加应用描述和至少一张应用截图。其余字段是可选的，但您完成的越多，客户找到您的应用就越容易，他们尝试它的可能性也越大。完成所有内容后，点击**保存**。
- en: 'Some example language options are shown in the following screenshot:'
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下屏幕截图中显示了某些示例语言选项：
- en: '![Figure 14.17 – Selecting languages for the application submission](img/B20908_14_17.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图14.17 – 选择应用提交的语言](img/B20908_14_17.jpg)'
- en: Figure 14.17 – Selecting languages for the application submission
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.17 – 选择应用提交的语言
- en: Completing the **Submission options** page is optional. By default, your app
    will be published immediately after passing certification. I will select **Don’t
    publish this submission until I select publish now** because I do not want this
    app to be available in the store until I make some additional changes.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成提交选项页面是可选的。默认情况下，您的应用在通过认证后将被立即发布。我将选择**在我选择现在发布之前不发布此提交**，因为我希望在做出一些额外更改之前不希望此应用在商店中可用。
- en: Finally, click **Submit to the Store**. Your app will be submitted for certification.
    If it passes, it will be available in the Microsoft Store when you have indicated
    this on the **Submission options** page. If your app fails validation, you will
    receive a list of issues to address before attempting another submission.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**提交到商店**。您的应用将提交进行认证。如果通过认证，当您在提交选项页面上指定时，它将在Microsoft Store中可用。如果您的应用未通过验证，您将收到一个问题列表，您需要在尝试另一次提交之前解决这些问题。
- en: 'Those are the basic steps to submit a new application to the Microsoft Store.
    For more detailed scenarios, and information about updates and add-ons, you can
    review the Microsoft Learn *app submission* documentation: [https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission](https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission).'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是将新应用提交到Microsoft Store的基本步骤。有关更详细的情况，以及有关更新和附加信息的说明，您可以查看Microsoft Learn的*应用提交*文档：[https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission](https://learn.microsoft.com/windows/apps/publish/publish-your-app/create-app-submission)。
- en: Now, we will cover how to sideload applications in Windows with MSIX.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将介绍如何在Windows中使用MSIX侧载应用。
- en: Sideloading WinUI applications with MSIX
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MSIX旁路加载WinUI应用
- en: In this section, we will create an MSIX package for a WinUI project and learn
    how to sideload it on Windows 10\. When you sideload an application, you install
    it directly with the MSIX UI or PowerShell commands. This method of installation
    is important to understand, as it is frequently used by enterprises to distribute
    applications internally.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为WinUI项目创建一个MSIX包，并学习如何在Windows 10上旁路加载它。当您旁路加载一个应用时，您可以直接使用MSIX UI或PowerShell命令来安装它。这种安装方法非常重要，因为企业经常用它来内部分发应用。
- en: Note
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You could also create a self-contained application package and use Xcopy deployment
    for distribution, but this method has some performance drawbacks, which we covered
    earlier in the chapter.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以创建一个自包含的应用程序包，并使用Xcopy部署进行分发，但这种方法有一些性能缺点，我们已在本章前面讨论过。
- en: We are going to start by creating a package for sideloading.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个用于旁路加载的包。
- en: Creating an MSIX package for sideloading
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建用于旁路加载的MSIX包
- en: 'In this section, we will create a package for a WinUI project with Visual Studio.
    You can start by either opening an existing WinUI project or by creating a new,
    empty one. I have created a new project named `ProjectTracker`. Proceed as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Visual Studio创建一个WinUI项目的包。您可以从打开一个现有的WinUI项目或创建一个新的、空的开始。我已创建了一个名为`ProjectTracker`的新项目。按照以下步骤操作：
- en: First, right-click the project in **Solution Explorer**, and select **Package
    and Publish** | **Create** **App Packages**.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在**解决方案资源管理器**中右键单击项目，然后选择**打包和发布** | **创建** **应用包**。
- en: On the **Select distribution method** screen of the **Create App Packages**
    window, leave the **Sideloading** radio button and the **Enable automatic updates**
    checkbox selected. Click **Next**.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建应用包**窗口的**选择分发方法**屏幕上，保持**旁路加载**单选按钮和**启用自动更新**复选框选中状态。点击**下一步**。
- en: 'On the following page, select a signing method. Select **Yes, select a certificate**,
    and click the **Create** button. Here, you will create a self-signed certificate.
    By using a self-signed certificate, any users who install the app will need to
    trust your package and import the certificate from the MSIX package. We will explain
    this process in the following section, when we sideload the package. Enter a name
    and password for the certificate, as illustrated in the following screenshot:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一页上，选择签名方法。选择**是，选择一个证书**，然后点击**创建**按钮。在这里，您将创建一个自签名证书。使用自签名证书，任何安装应用的用户都需要信任您的包并从MSIX包中导入证书。我们将在下一节中解释此过程，当我们在旁路加载包时。输入证书的名称和密码，如下截图所示：
- en: "![Figure 14.18 – Creating a self-signed certificate for th\uFEFFe package](img/B20908_14_18.jpg)"
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![图14.18 – 为包创建自签名证书](img/B20908_14_18.jpg)'
- en: Figure 14.18 – Creating a self-signed certificate for the package
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.18 – 为包创建自签名证书
- en: Select **Trust** to trust the certificate, and click **Next**.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**信任**以信任证书，然后点击**下一步**。
- en: Leave the default settings on the **Select and configure packages** page. Click
    **Next**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选择和配置包**页面上保留默认设置。点击**下一步**。
- en: Enter the installer path. This can be a local file path or a network location.
    Click **Create**. Your project will compile, and the package will be created in
    the specified location.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入安装程序路径。这可以是一个本地文件路径或网络位置。点击**创建**。您的项目将编译，包将在指定位置创建。
- en: Now that we have an MSIX package for our project, we’re ready to sideload it.
    Let’s walk through this process.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了项目的MSIX包，我们准备旁路加载它。让我们一步步来走这个过程。
- en: Sideloading an MSIX package
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 旁路加载MSIX包
- en: 'In this section, we will learn how to sideload a WinUI application with MSIX.
    We created a new MSIX package in the previous section. Navigate to the folder
    where the package was created inside your project’s folder, and review the files
    in the package folder – named `ProjectTracker_1.0.0.0_x64_Test`, in my case. The
    following screenshot illustrates this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用MSIX旁路加载WinUI应用。在前一节中，我们已创建了一个新的MSIX包。导航到项目文件夹内创建包的文件夹，并检查包文件夹中的文件——在我的例子中，文件名为`ProjectTracker_1.0.0.0_x64_Test`。以下截图展示了这一过程：
- en: '![Figure 14.19 – Reviewing the package files](img/B20908_14_19.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图14.19 – 查看包文件](img/B20908_14_19.jpg)'
- en: Figure 14.19 – Reviewing the package files
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.19 – 查看包文件
- en: 'Now, let’s look at the steps to sideload the application:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看旁路加载应用程序的步骤：
- en: 'To install this package on another Windows device, start by copying the `Project``     Tracker_1.0.0.0_x64.msix` file to the machine. This file contains all of the necessary
    information and files to install the application.'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在另一台 Windows 设备上安装此包，首先将 `Project` Tracker_1.0.0.0_x64.msix` 文件复制到机器上。此文件包含安装应用程序所需的所有信息和文件。
- en: Then, we need to install the self-signed certificate used to sign the package.
    You can install it by running the `Install.ps1` **PowerShell** script, but you
    can also install it at the time it was created if you are installing it on the
    same machine. We will install it by right-clicking the MSIX file and selecting
    **Properties**.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要安装用于签名包的自签名证书。您可以通过运行 `Install.ps1` **PowerShell** 脚本来安装它，但如果您在同一台机器上安装，您也可以在创建时安装它。我们将通过右键单击
    MSIX 文件并选择 **属性** 来安装它。
- en: 'Click the **Digital Signatures** tab, and select the certificate in the **Signature
    list** box, as illustrated in the following screenshot:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **数字签名** 选项卡，并在 **签名列表** 框中选中证书，如图所示以下屏幕截图：
- en: "![Figure 14.20 – Selecting the\uFEFF certificate in the MSIX package properties](img/B20908_14_20.jpg)"
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.20 – 在 MSIX 包属性中选择证书](img/B20908_14_20.jpg)'
- en: Figure 14.20 – Selecting the certificate in the MSIX package properties
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.20 – 在 MSIX 包属性中选择证书
- en: Click **Details** to open the **Digital Signature** **Details** screen.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **详细信息** 以打开 **数字签名** **详细信息** 屏幕。
- en: Click the **View Certificate** button. On the **Certificate** page that opens,
    click **Install Certificate**.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **查看证书** 按钮。在打开的 **证书** 页面上，点击 **安装证书**。
- en: 'When completing **Certificate Import Wizard**, import the certificate to the
    local machine, and on the **Certificate Store** page, select **Place all certificates
    in the following store**, as illustrated in the following screenshot:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在完成 **证书导入向导** 时，将证书导入到本地计算机，并在 **证书存储** 页上选择 **将所有证书放置在以下存储中**，如图所示以下屏幕截图：
- en: '![Figure 14.21 – Importing the package certificate](img/B20908_14_21.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.21 – 导入包证书](img/B20908_14_21.jpg)'
- en: Figure 14.21 – Importing the package certificate
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.21 – 导入包证书
- en: Click **Browse**, and select the **Trusted Root Certification Authorities**
    folder. Click **OK** on the dialog and click **Next** on the wizard.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **浏览**，然后选择 **受信任的根证书颁发机构** 文件夹。在对话框中点击 **确定**，并在向导中点击 **下一步**。
- en: After clicking **Finish**, the certificate will be imported. If all goes well,
    you will receive a message that the certificate was successfully imported. You
    can close the **Properties** page and continue with the package installation.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **完成** 后，证书将被导入。如果一切顺利，您将收到一条消息，表明证书已成功导入。您可以关闭 **属性** 页面并继续安装包。
- en: 'Now, double-click the `MSIX` package file. The installer will open a window
    with some of the application’s manifest information. Click **Install**, and leave
    the **Launch when ready** checkbox selected, as illustrated in the following screenshot:'
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击 `MSIX` 包文件。安装程序将打开一个窗口，显示应用程序的一些清单信息。点击 **安装**，并选中 **准备就绪时启动** 复选框，如图所示：
- en: '![Figure 14.22 – Installing a trusted application from its MSIX package](img/B20908_14_22.jpg)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![图 14.22 – 从 MSIX 包安装受信任的应用程序](img/B20908_14_22.jpg)'
- en: Figure 14.22 – Installing a trusted application from its MSIX package
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.22 – 从其 MSIX 包安装受信任的应用程序
- en: The application will install and launch, and you’re ready to go. Note that the
    package is trusted because we imported the certificate to the **Trusted Root Certification**
    **Authorities** folder.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序将安装并启动，您就可以开始了。请注意，由于我们已将证书导入到 **受信任的根证书颁发机构** 文件夹，因此包是受信任的。
- en: 'This installation can be automated with PowerShell if the MSIX certificate
    is already trusted on the target machines. Use the `Add-AppPackage` command to
    install an MSIX package or MSIX bundle from a PowerShell prompt, as illustrated
    in the following command:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果目标机器上已经信任了 MSIX 证书，则可以使用 PowerShell 自动化此安装。使用 `Add-AppPackage` 命令从 PowerShell
    提示符安装 MSIX 包或 MSIX 打包，如图所示以下命令：
- en: '[PRE9]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you have several packages to distribute, you can create a custom PowerShell
    script to iterate over all of the MSIX packages in a given folder. For more information
    about PowerShell scripting with MSIX, check out the following Microsoft Learn
    topic: [https://learn.microsoft.com/windows/msix/desktop/powershell-msix-cmdlets](https://learn.microsoft.com/windows/msix/desktop/powershell-msix-cmdlets).'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有多份软件包要分发，你可以创建一个自定义 PowerShell 脚本来遍历给定文件夹中的所有 MSIX 软件包。有关 MSIX 的 PowerShell
    脚本信息，请参阅以下 Microsoft Learn 主题：[https://learn.microsoft.com/windows/msix/desktop/powershell-msix-cmdlets](https://learn.microsoft.com/windows/msix/desktop/powershell-msix-cmdlets)。
- en: Let’s wrap up and review what we have learned in this chapter.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结并回顾一下本章学到的内容。
- en: Summary
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed various methods of delivering WinUI applications
    to consumers. We learned the basics of MSIX packages and how to create packages
    to sideload our applications. We also covered the process of creating an account
    on Microsoft Partner Center to create application submissions on the Microsoft
    Store.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了将 WinUI 应用程序提供给消费者的各种方法。我们学习了 MSIX 软件包的基础知识以及如何创建软件包以侧载我们的应用程序。我们还介绍了在
    Microsoft Partner Center 上创建账户以在 Microsoft Store 上创建应用程序提交的过程。
- en: Then, we validated and submitted an MSIX application package to the Store. Finally,
    we learned how to manually sideload MSIX packages and how PowerShell can be leveraged
    to automate the sideloading process. These concepts will help you when you are
    ready to create your own WinUI applications for enterprise or consumer use.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们验证并提交了一个 MSIX 应用程序包到商店。最后，我们学习了如何手动侧载 MSIX 软件包以及如何利用 PowerShell 自动化侧载过程。这些概念将帮助你在准备创建自己的
    WinUI 应用程序用于企业或消费者使用时。
- en: This is the final chapter of our book. I hope that the concepts covered in each
    chapter will help you succeed in your quest to become a WinUI application developer.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本书的最后一章。我希望每一章中涵盖的概念能帮助你成功实现成为 WinUI 应用程序开发者的目标。
- en: Questions
  id: totrans-256
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are some of the application installer formats that preceded MSIX?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 MSIX 之前，有哪些应用程序安装格式？
- en: Is MSIX only for UWP and WinUI apps?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MSIX 是否仅适用于 UWP 和 WinUI 应用程序？
- en: In a WinUI project, which file contains the application manifest data?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个 WinUI 项目中，哪个文件包含应用程序清单数据？
- en: Which command is used to install packages with Windows Package Manager?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Windows 包管理器安装软件包时，使用哪个命令？
- en: How can you make your application available with WinGet?
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用 WinGet 使你的应用程序可用？
- en: What is the name of the online portal to submit applications to the Microsoft
    Store?
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交应用程序到 Microsoft Store 的在线门户名称是什么？
- en: How many screenshots are required in a Microsoft Store listing?
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Microsoft Store 列表中需要多少张截图？
