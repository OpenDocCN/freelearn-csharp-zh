["```cs\n[SerializeField] private UIDocument uiDocument;\nprivate Label dogLabel;\nprivate Button catButton;\n```", "```cs\nvoid Start(){\n      var root = uiDocument.rootVisualElement;\n      dogLabel = root.Q<Label>(\"DogLabel\");\n      catButton = root.Query<Button>(\"CatButton\");\n}\n```", "```cs\nprivate void OnCatButtonClicked() {\n     Debug.Log(\"CatButtonClicked\");\n}\n```", "```cs\ncatButton.clicked += OnCatButtonClicked;\n```", "```cs\nprivate void OnDisable() {\n     catButton.clicked -= OnCatButtonClicked;\n}\n```", "```cs\npublic Camera theCamera;\nvoid Update()\n{\n    transform.LookAt(2 * transform.position - theCamera.transform.position);\n}\n```", "```cs\n    public class IdleCat : EditorWindow {\n    ```", "```cs\n    [MenuItem(\"Tools/I'm Lonely _%#K\")]\n     public static void ShowIdleCat() {\n         EditorWindow window = GetWindow<IdleCat>();\n         window.titleContent = new GUIContent(\"Kitty\");\n    }\n    ```", "```cs\n    EditorWindow window = GetWindow<IdleCat>();\n    window.titleContent = new GUIContent(\"Kitty\");\n    ```", "```cs\n    window.maxSize = new Vector2(100, 100);\n    window.minSize = window.maxSize;\n    ```", "```cs\n    private void CreateGUI() {\n         var root = rootVisualElement;\n         var quickToolVisualTree = Resources.Load<VisualTreeAsset>(\"IdleCat\");\n         quickToolVisualTree.CloneTree(root);\n    }\n    ```", "```cs\n    private Button catButton;\n    ```", "```cs\n    catButton = root.Q<Button>(\"CatButton\");\n    ```", "```cs\n    catButton.tooltip = \"meow\";\n    ```", "```cs\n    private void OnCatButtonClicked()\n    {\n        Debug.Log(\"You're doing great!\");\n    }\n    ```", "```cs\n    catButton.clicked += OnCatButtonClicked;\n    ```", "```cs\n    private void OnDisable()\n    {\n        catButton.clicked -= OnCatButtonClicked;\n    }\n    ```", "```cs\n    using Unity.EditorCoroutines.Editor;\n    ```", "```cs\n    private List<StyleBackground> idleBackgrounds = new List<StyleBackground>();\n    private List<StyleBackground> pettingBackgrounds = new List<StyleBackground>();\n    ```", "```cs\n    Sprite[] allSprites = Resources.LoadAll<Sprite>(\"idleCat\");\n    ```", "```cs\n    for (int i = 0; i <= allSprites.Length - 1; i++)\n    {\n        StyleBackground backgroundImage = new StyleBackground(allSprites[i]);\n        if (i < 11)\n        {\n            pettingBackgrounds.Add(backgroundImage);\n        }\n        if (i >= 10)\n        {\n            idleBackgrounds.Add(backgroundImage);\n        }\n    }\n    ```", "```cs\n    private int animationIndex = 0;\n    ```", "```cs\n    private void IdleAnimation()\n    {\n        animationIndex++;\n        if (animationIndex >= idleBackgrounds.Count)\n        {\n            animationIndex = 0;\n        }\n\n        catButton.style.backgroundImage = idleBackgrounds[animationIndex];\n    }\n    ```", "```cs\n    private void PettingAnimation()\n    {\n        animationIndex++;\n        if (animationIndex >= pettingBackgrounds.Count)\n        {\n            animationIndex = 0;\n        }\n\n        catButton.style.backgroundImage = pettingBackgrounds[animationIndex];\n    }\n    ```", "```cs\n    IEnumerator NextAnimationFrame()\n    {\n        var waitForOneSecond = new EditorWaitForSeconds(1f);\n\n        while (true)\n        {\n            yield return waitForOneSecond;\n            IdleAnimation();\n        }\n    }\n    ```", "```cs\n    EditorCoroutineUtility.StartCoroutine(NextAnimationFrame(), this);\n    ```", "```cs\n    private bool idle = true;\n    ```", "```cs\n    idle = false;\n    ```", "```cs\n    IEnumerator NextAnimationFrame()\n    {\n        var waitForOneSecond = new EditorWaitForSeconds(1f);\n        while (true)\n        {\n            yield return waitForOneSecond;\n            if (idle)\n            {\n                IdleAnimation();\n            }\n            else\n            {\n                PettingAnimation();\n            }\n        }\n    }\n    ```", "```cs\n    private bool windowOpen = true;\n    ```", "```cs\n    while (windowOpen) {\n    ```", "```cs\n    windowOpen = false;\n    ```", "```cs\n{\"string\":\"HelloWorld\",\"boolean\":false,\"number\":123,\"array\":[1,2,3],\"object\":{\"prop1\":\"a\",\"prob2\":\"b\"}}\n```", "```cs\n{\n  \"string\": \"HelloWorld\",\n  \"boolean\": false,\n  \"number\": 123,\n  \"array\": [\n    1,\n    2,\n    3\n  ],\n  \"object\": {\n    \"prop1\": \"a\",\n    \"prob2\": \"b\"\n  }\n}\n```", "```cs\n    private UIDocument uiDocument;\n    void Start()\n    {\n        uiDocument = GetComponent<UIDocument>();\n    }\n    ```", "```cs\n    var root = uiDocument.rootVisualElement;\n    ```", "```cs\n    private Button charmButton;\n    ```", "```cs\n    charmButton = root.Q<Button>(\"CharmButton\");\n    ```", "```cs\n    public class InspriationalPanel : MonoBehaviour\n    {\n        private UIDocument uiDocument;\n        private Button charmButton;\n        void Start()\n        {\n            uiDocument = GetComponent<UIDocument>();\n            var root = uiDocument.rootVisualElement;\n            charmButton = root.Q<Button>(\"CharmButton\");\n            charmButton.clicked += OnCharmClicked;\n        }\n        private void OnCharmClicked()\n        {\n            // Handle charm button click\n        }\n        private void OnDisable()\n        {\n            charmButton.clicked -= OnCharmClicked;\n        }\n    }\n    ```", "```cs\n    VisualElement catPic = root.Q<VisualElement>(\"CatPic\");\n    ```", "```cs\n    private IStyle catPicStyle;\n    ```", "```cs\n    catPicStyle = catPic.style;\n    ```", "```cs\n    IEnumerator GetCatPic()\n    {\n        // Implement coroutine logic here\n    }\n    ```", "```cs\nusing System.Collections;\n```", "```cs\n    int randomWidth = Random.Range(150, 300);\n    int randomHeight = Random.Range(150, 300);\n    catPicStyle.width = randomWidth;\n    catPicStyle.height = randomHeight;\n    ```", "```cs\n    string uri = \"https://placekitten.com/\" + randomWidth + \"/\" + randomHeight;\n    ```", "```cs\n    UnityWebRequest request = UnityWebRequestTexture.GetTexture(uri);\n    yield return request.SendWebRequest();\n    if (request.result != UnityWebRequest.Result.Success){\n         Debug.Log(request.error);\n    } else {\n         // Do stuff here with returned data\n    }\n    ```", "```cs\n    using UnityEngine.Networking;\n    ```", "```cs\n    Texture2D myTexture = ((DownloadHandlerTexture)request.downloadHandler).texture;\n    Debug.Log(\"Texture Acquired\");\n    catPicStyle.backgroundImage = new StyleBackground(myTexture);\n    ```", "```cs\n    private void OnCharmClicked()\n    {\n        StartCoroutine(GetCatPic());\n    }\n    ```", "```cs\n    catPicStyle.backgroundImage = null;\n    ```", "```cs\n    private Button inspireButton;\n    private Label inspirationalQuote;\n    ```", "```cs\n    private void OnInspireClicked()\n    {\n        // Implement functionality for when the inspireButton is clicked\n    }\n    ```", "```cs\n    inspireButton = root.Q<Button>(\"InspireButton\");\n    inspireButton.clicked += OnInspireClicked;\n    inspirationalQuote = root.Q<Label>(\"InspirationalQuote\");\n    ```", "```cs\n    IEnumerator GetInspiringQuote() {\n         UnityWebRequest request = UnityWebRequest.Get(\"https://zenquotes.io/api/random\");\n         yield return request.SendWebRequest();\n         if (request.result != UnityWebRequest.Result.Success) {\n              Debug.Log(request.error);\n         } else {\n              Debug.Log(\"Quote Acquired\");\n              string response = request.downloadHandler.text;\n              Debug.Log(response.ToString());\n              // more code will go here\n         }\n    }\n    ```", "```cs\n    private void OnInspireClicked()\n    {\n        StartCoroutine(GetInspiringQuote());\n    }\n    ```", "```cs\n    using Newtonsoft.Json.Linq;\n    ```", "```cs\n    JArray jArray = JArray.Parse(response);\n    ```", "```cs\n    JObject jObject = JObject.Parse(jArray[0].ToString());\n    ```", "```cs\n    string quote = (string)jObject[\"q\"];\n    string author = (string)jObject[\"a\"];\n    ```", "```cs\n    inspirationalQuote.text = \"\\\"\" + quote + \"\\\" \\n~\" + author;\n    ```"]