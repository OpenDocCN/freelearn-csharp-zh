["```cs\nusing UnityEngine;\n using UnityEngine.AI;\n\npublic class ArrowNPCMovement : MonoBehaviour {\n public GameObject targetGo;\n private NavMeshAgent navMeshAgent;\n\nvoid Start() {\n navMeshAgent = GetComponent<NavMeshAgent>();\n HeadForDestintation();\n }\n\nprivate void HeadForDestintation () {\n Vector3 destination = targetGo.transform.position;\n navMeshAgent.SetDestination (destination);\n }\n }\n```", "```cs\nusing UnityEngine;\n\n public class SimplePlayerControl : MonoBehaviour {\n public float speed = 1000;\n private Rigidbody rigidBody;\n private Vector3 newVelocity;\n\n private void Start() {\n rigidBody = GetComponent<Rigidbody>();\n }\n\n void Update() {\n   float xMove = Input.GetAxis(\"Horizontal\") * speed * Time.deltaTime;\n   float zMove = Input.GetAxis(\"Vertical\") * speed * Time.deltaTime;\n   newVelocity = new Vector3(xMove, 0, zMove);\n }\n\n void FixedUpdate() {\n   rigidBody.velocity = newVelocity;\n }\n}\n```", "```cs\nvoid Start() {\n     navMeshAgent = GetComponent<NavMeshAgent>();\n }\n\n private void Update() {\n     HeadForDestintation();\n } \n```", "```cs\nusing UnityEngine;\n\npublic class UsefulFunctions : MonoBehaviour {\n public static void DebugRay(Vector3 origin, Vector3 destination, Color c) {\n Vector3 direction = destination - origin;\n Debug.DrawRay(origin, direction, c);\n }\n }\n```", "```cs\nprivate void HeadForDestintation () {\nVector3 destination = targetGo.transform.position;\nnavMeshAgent.SetDestination (destination);\n// show yellow line from source to target\n UsefulFunctions.DebugRay(transform.position, destination, Color.yellow);\n }\n```", "```cs\n using UnityEngine;\n using UnityEngine.AI;\n\n public class ArrowNPCMovement : MonoBehaviour {\n public float runAwayDistance = 10;\n public GameObject targetGO;\n private NavMeshAgent navMeshAgent;\n\nvoid Start() {\n navMeshAgent = GetComponent<NavMeshAgent>();\n }\n\nvoid Update() {\n Vector3 targetPosition = targetGO.transform.position;\n float distanceToTarget = Vector3.Distance(transform.position, targetPosition);\n if (distanceToTarget < runAwayDistance)\n FleeFromTarget(targetPosition);\n }\n\nprivate void FleeFromTarget(Vector3 targetPosition) {\n Vector3 destination = PositionToFleeTowards(targetPosition);\n HeadForDestintation(destination);\n }\n\nprivate void HeadForDestintation (Vector3 destinationPosition) {\n navMeshAgent.SetDestination (destinationPosition);\n }\n\nprivate Vector3 PositionToFleeTowards(Vector3 targetPosition) {\n transform.rotation = Quaternion.LookRotation(transform.position - targetPosition);\n Vector3 runToPosition = targetPosition + (transform.forward * runAwayDistance);\n return runToPosition;\n }\n }\n```", "```cs\nvoid Update() {\n Vector3 targetPosition = targetGO.transform.position;\n float distanceToTarget = Vector3.Distance(transform.position, targetPosition);\n FleeFromTarget(targetPosition);\n }\n```", "```cs\nusing UnityEngine;\n\npublic class ClickMeToSetDestination : MonoBehaviour\n {\n private UnityEngine.AI.NavMeshAgent playerNavMeshAgent;\n\nvoid Start() {\n GameObject playerGO = GameObject.FindGameObjectWithTag(\"Player\");\n playerNavMeshAgent = playerGO.GetComponent<UnityEngine.AI.NavMeshAgent>();\n }\n\nprivate void OnMouseDown() {\n playerNavMeshAgent.SetDestination(transform.position);\n }\n }\n```", "```cs\nusing UnityEngine;\n\npublic class MouseOverHighlighter : MonoBehaviour\n {\n private MeshRenderer meshRenderer;\n private Material originalMaterial;\n\nvoid Start() {\n meshRenderer = GetComponent<MeshRenderer>();\n originalMaterial = meshRenderer.sharedMaterial;\n }\n\nvoid OnMouseOver() {\n meshRenderer.sharedMaterial = NewMaterialWithColor(Color.yellow);\n }\n\nvoid OnMouseExit() {\n meshRenderer.sharedMaterial = originalMaterial;\n }\n\nprivate Material NewMaterialWithColor(Color newColor) {\n Shader shaderSpecular = Shader.Find(\"Specular\");\n Material material = new Material(shaderSpecular);\n material.color = newColor;\n\nreturn material;\n }\n }\n```", "```cs\nusing UnityEngine;\n\npublic class TileManager : MonoBehaviour {\n public int rows = 50;\n public int cols = 50;\n public GameObject prefabClickableTile;\n\nvoid Start () {\n for (int r = 0; r < rows; r++) {\n for (int c = 0; c < cols; c++) {\n float y = 0.01f;\n Vector3 pos = new Vector3(r - rows/2, y, c - cols/2);\n Instantiate(prefabClickableTile, pos, Quaternion.identity);\n }\n }\n }\n }\n```", "```cs\nusing UnityEngine;\n using UnityEngine.AI;\n\npublic class DebugRaySourceDestination : MonoBehaviour {\n void Update() {\n Vector3 origin = transform.position;\n Vector3 destination = GetComponent<NavMeshAgent>().destination;\n Vector3 direction = destination - origin;\n Debug.DrawRay(origin, direction, Color.yellow);\n }\n }\n```", "```cs\nusing UnityEngine;\n using UnityEngine.AI;\n\npublic class MoveToClickPoint : MonoBehaviour {\n public GameObject sphereDestination;\n private NavMeshAgent navMeshAgent;\n private RaycastHit hit;\n\nvoid Start() {\n navMeshAgent = GetComponent<NavMeshAgent>();\n sphereDestination.transform.position = transform.position;\n }\n\nvoid Update() {\n Ray rayFromMouseClick = Camera.main.ScreenPointToRay(Input.mousePosition);\n\nif (FireRayCast(rayFromMouseClick)){\n Vector3 rayPoint = hit.point;\n ProcessRayHit(rayPoint);\n }\n }\n\nprivate void ProcessRayHit(Vector3 rayPoint) {\n if(Input.GetMouseButtonDown(0)) {\n navMeshAgent.destination = rayPoint;\n sphereDestination.transform.position = rayPoint;\n }\n }\n\nprivate bool FireRayCast(Ray rayFromMouseClick) {\n return Physics.Raycast(rayFromMouseClick, out hit, 100);\n }\n }\n```", "```cs\npublic class MoveToClickPoint : MonoBehaviour {\npublic GameObject sphereDestination;\npublic GameObject sphereDestinationCandidate;\n```", "```cs\nprivate void ProcessRayHit(Vector3 rayPoint) {\n if(Input.GetMouseButtonDown(0)) {\n navMeshAgent.destination = rayPoint;\n sphereDestination.transform.position = rayPoint;\n } else {\n sphereDestinationCandidate.transform.position = rayPoint;\n }\n }\n```", "```cs\nprivate bool FireRayCast(Ray rayFromMouseClick) {\n LayerMask layerMask = ~LayerMask.GetMask(\"UISpheres\");\n return Physics.Raycast(rayFromMouseClick, out hit, 100, layerMask.value);\n }\n```", "```cs\nusing UnityEngine;\n using UnityEngine.AI;\n\npublic class ArrowNPCMovement : MonoBehaviour {\n private GameObject targetGo = null;\n private WaypointManager waypointManager;\n private NavMeshAgent navMeshAgent;\n\nvoid Start () {\n navMeshAgent = GetComponent<NavMeshAgent>();\n waypointManager = GetComponent<WaypointManager>();\n HeadForNextWayPoint();\n }\n\nvoid Update () {\n float closeToDestinaton = navMeshAgent.stoppingDistance * 2;\n if (navMeshAgent.remainingDistance < closeToDestinaton) {\n HeadForNextWayPoint ();\n }\n }\n\nprivate void HeadForNextWayPoint () {\n targetGo = waypointManager.NextWaypoint (targetGo);\n navMeshAgent.SetDestination (targetGo.transform.position);\n }\n }\n```", "```cs\nusing UnityEngine;\n\n public class WaypointManager : MonoBehaviour {\n public GameObject wayPoint0;\n public GameObject wayPoint3;\n\npublic GameObject NextWaypoint(GameObject current) {\n if(current == wayPoint0)\n return wayPoint3;\n\nreturn wayPoint0;\n }\n }\n```", "```cs\nusing UnityEngine;\n using System;\n\npublic class WaypointManager : MonoBehaviour {\n public GameObject[] waypoints;\n\npublic GameObject NextWaypoint (GameObject current) {\n if( waypoints.Length < 1)\n Debug.LogError (\"WaypointManager:: ERROR - no waypoints have been added to array!\");\n\nint currentIndex = Array.IndexOf(waypoints, current);\n int nextIndex = (currentIndex + 1) % waypoints.Length;\n\nreturn waypoints[nextIndex];\n }\n }\n```", "```cs\n using UnityEngine;\n using System.Collections;\n\n public class ArrowNPCMovement : MonoBehaviour {\n public Waypoint waypoint;\n private bool firstWayPoint = true;\n private NavMeshAgent navMeshAgent;\n\n void Start (){\n navMeshAgent = GetComponent<NavMeshAgent>();\n HeadForNextWayPoint();\n }\n\n void Update () {\n float closeToDestinaton = navMeshAgent.stoppingDistance * 2;\n if (navMeshAgent.remainingDistance < closeToDestinaton){\n HeadForNextWayPoint ();\n }\n }\n\n private void HeadForNextWayPoint (){\n if(firstWayPoint)\n firstWayPoint = false;\n else\n waypoint = waypoint.GetNextWaypoint();\n\n Vector3 target = waypoint.transform.position;\n navMeshAgent.SetDestination (target);\n }\n }\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class Waypoint: MonoBehaviour {\npublic Waypoint[] waypoints;\n\npublic Waypoint GetNextWaypoint () {\nreturn waypoints[ Random.Range(0, waypoints.Length) ];\n }\n }\n```", "```cs\n using UnityEngine;\n using UnityEngine.AI;\n\n public class Drone : MonoBehaviour {\n private NavMeshAgent navMeshAgent;\n\n void Start() {\n navMeshAgent = GetComponent<NavMeshAgent>();\n }\n\n public void SetTargetPosition(Vector3 swarmCenterAverage, Vector3 swarmMovementAverage) {\n Vector3 destination = swarmCenterAverage + swarmMovementAverage;\n navMeshAgent.SetDestination(destination);\n }\n }\n```", "```cs\nusing UnityEngine;\n using System.Collections.Generic;\n\npublic class Swarm : MonoBehaviour {\n public int droneCount = 20;\n public GameObject dronePrefab;\n\nprivate List<Drone> drones = new List<Drone>();\n\nvoid Awake() {\n for (int i = 0; i < droneCount; i++)\n AddDrone();\n }\n\nvoid FixedUpdate() {\n Vector3 swarmCenter = SwarmCenterAverage();\n Vector3 swarmMovement = SwarmMovementAverage();\n\nforeach(Drone drone in drones )\n drone.SetTargetPosition(swarmCenter, swarmMovement);\n }\n\nprivate void AddDrone()\n {\n GameObject newDroneGo = Instantiate(dronePrefab);\n Drone newDrone = newDroneGo.GetComponent<Drone>();\n drones.Add(newDrone);\n }\n\nprivate Vector3 SwarmCenterAverage() {\n Vector3 locationTotal = Vector3.zero;\n foreach(Drone drone in drones )\n locationTotal += drone.transform.position;\n\nreturn (locationTotal / drones.Count);\n }\n\nprivate Vector3 SwarmMovementAverage() {\n Vector3 velocityTotal = Vector3.zero;\n foreach(Drone drone in drones )\n velocityTotal += drone.GetComponent<Rigidbody>().velocity;\n\nreturn (velocityTotal / drones.Count);\n }\n }\n```"]