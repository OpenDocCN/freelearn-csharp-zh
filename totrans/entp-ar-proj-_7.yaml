- en: AR for Automation with Vuforia and AR Glasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will go deeper into Vuforia, the SDK we introduced previously
    in [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml), *AR for Retail with
    Vuforia*. You will learn how to use the framework along with AR glasses, more
    specifically, the Epson Moverio BT-350 model, and you will learn how to use the
    Vuforia image recognition features to create an app to guide operators, step by
    step, in industrial works, and how to modify a scene so that you can integrate
    it into your AR glasses.
  prefs: []
  type: TYPE_NORMAL
- en: It's important to note that to complete this chapter, you will need to have
    the AR glasses to build upon them. Although we have structured the content so
    that you can follow most of the process using a mobile Android device, you will
    only be able to see the final result, the differences in the mobile device view,
    and the possibilities that the AR see-through devices offer if you can launch
    the project on the real glasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter has three main goals: first of all, to acquire a fuller understanding
    of how Vuforia works so that you can extend and improve the current example beyond
    the scope of this book. The second goal is to understand the possibilities AR
    offers in the industrial field and, specifically, in automation. You will see
    that AR is not only a visually attractive technology but that it can guide operators
    in their work, reducing training time and possible errors during operations. The
    idea is to provide you with the necessary skills to reproduce and adapt the current
    project to your needs. The final goal is to introduce an AR headset, such as the
    Epson Moverio AR glasses, to explain how they work and to easily integrate Vuforia
    with them.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Using AR glasses instead of tablets can be a valuable asset in the industrial
    field as it allows operators to have both hands free while they are working. The
    following image shows a pair of AR glasses:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16d3c4e6-e5ff-4ffb-9fe7-49d9b0fd310e.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The Epson Moverio BT-350 AR glasses
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using AR in automation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Vuforia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing image-based AR in Vuforia
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an industrial guide for AR glasses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The technical requirements for this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A Unity 3D supporting computer (see the latest requirements here: [https://unity3d.com/es/unity/system-requirements](https://unity3d.com/es/unity/system-requirements)).
    This chapter's example project has been developed on a Windows 10 x64 computer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unity 3D (2019.1.2f1 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Microsoft Visual Studio Community 2017 (included in the Unity installation).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The latest version of Vuforia included with Unity 3D (8.3.8 in this book).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Epson Moverio BT-350 AR glasses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources and code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter07](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter07).
  prefs: []
  type: TYPE_NORMAL
- en: Other AR glasses (from Moverio and other companies) might work with this example.
    However, some points have to be taken into account, for example, their operating
    system must be Android 4.1 or above (required by Unity 3D v2019).
  prefs: []
  type: TYPE_NORMAL
- en: Let's get started with AR in automation.
  prefs: []
  type: TYPE_NORMAL
- en: Using AR in automation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The arrival of the fourth industrial revolution, also called **industry 4.0**,
    has boosted the use of AR in industrial environments. Industry 4.0 revolves around
    digitalization and interconnectivity, and technologies such as **Augmented Reality**
    (**AR**), **Virtual Reality** (**VR**), the **Internet of Things** (**IoT**),
    **Big Data Analytics** (**BDA**), **Additive Manufacturing** (**AM**), **Cyber-Physical
    Systems** (**CPS**), and **Artificial Intelligence** (**AI**) have become the
    base of this industrial revolution.
  prefs: []
  type: TYPE_NORMAL
- en: AR is the natural interface and connection to IoT and big data. It allows workers
    to visualize and interact with the data coming from the and sensors of a factory
    in an easy and attractive way, either using mobile devices or AR headsets.
  prefs: []
  type: TYPE_NORMAL
- en: AR use in automation can go from the facial recognition of an employee to getting
    access to a concrete machine, to real-time on-site surveillance of the production
    process or remote access to and control of the system through AR glasses.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the scenario and process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this project, we will be creating a step-by-step guide that can be used
    in production, maintenance, and training. Users performing a task will receive
    guidance on how to do it correctly, as well as have access to useful information
    such as blueprints drawings, or pdf documents.
  prefs: []
  type: TYPE_NORMAL
- en: For that, we will use a Volkswagen Beetle (car) as an example. We will work
    with three pictures as targets (side, back view with the trunk closed, and back
    view with the trunk open) to simulate an operator that starts from the side of
    the car and then moves to check the state of the car engine, all while receiving
    information from the AR glasses. In a real environment, these pictures would correspond
    with the real car (or industrial equipment).
  prefs: []
  type: TYPE_NORMAL
- en: 'The images we are going to use in this project have been retrieved from the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: A 3D model of the Beetle car: [https://sketchfab.com/3d-models/beetlefusca-version-2-2f3bea70178345c8b7cc4424886f9386](https://sketchfab.com/3d-models/beetlefusca-version-2-2f3bea70178345c8b7cc4424886f9386)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A blueprint: [https://getoutlines.com/blueprints/6826/1968-volkswagen-beetle-sedan-blueprints](https://getoutlines.com/blueprints/6826/1968-volkswagen-beetle-sedan-blueprints)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An image in a PDF file: [https://getoutlines.com/blueprints/6943/1972-volkswagen-beetle-1500-sedan-blueprints](https://getoutlines.com/blueprints/6943/1972-volkswagen-beetle-1500-sedan-blueprints)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, we will introduce Vuforia briefly before starting to develop
    the guide project.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we discussed in [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml),
    *AR for Retail with Vuforia*, Vuforia is one of the oldest and most well-known
    AR SDKs that has been integrated in Unity since its 2017.2 version. It provides
    multiple AR features such as image recognition, ground plane recognition, model
    detection, and so on. You can find all the available features at [https://engine.vuforia.com/features.html](https://engine.vuforia.com/features.html).
    For this project, we will focus on image recognition.
  prefs: []
  type: TYPE_NORMAL
- en: 'In [Chapter 6](3ef942da-7d11-444e-b3e9-ddbf24bb2d09.xhtml), *AR for Retail
    with Vuforia*, in the *Exploring Vuforia* section,we explained the steps to integrate
    Vuforia for the first time in a Unity project. Please follow *steps 1-7* in that section
    but change the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity project name (*step 3*): `AR_Automation`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scene name (*step 4*): `ARGuide`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Product name (*step 6*, *player settings*): `AR Guide`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, set the light''s Rotation points or axes to X:`20`, Y:`0`, and Z:`0` and
    place it inside the ARCamera (as a child) to maintain its directionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/032bc32d-2358-4629-8468-19fa77960aa7.png)'
  prefs: []
  type: TYPE_IMG
- en: The Directional Light with its new values and child of the ARCamera
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the Vuforia engine ready in our project, let's start with the
    AR creation process.
  prefs: []
  type: TYPE_NORMAL
- en: Developing image-based AR in Vuforia
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most powerful features of Vuforia is image recognition. The Vuforia
    engine can process any `.jpeg` or `.png` image (our AR marker or target) and extract
    its main features. It will later compare those features to the real-time images
    coming from the camera of a mobile device or AR glasses to find that marker in
    the real world and overlap the virtual elements on it to create the AR. In our
    case, we will be working with three images of a Beetle car that have been extracted
    from a 3D model. The images, however, can come from any source, such as real-life
    pictures or computer designed images.
  prefs: []
  type: TYPE_NORMAL
- en: The next section will show us how to create targets in Vuforia.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Vuforia offers two different options when working with images:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Device databases* are groups of image targets that are created through the
    Vuforia Target Manager and then downloaded and included *locally* in the project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Cloud recognition *makes reference to the hosting and managing of the image
    targets groups directly *online*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this project, we will be using the first option. Databases, also known as
    **datasets** in the SDK, are groups of targets. They help with the classification
    of large amounts of targets, as well as memory and CPU usage. Databases can be
    dynamically loaded/unloaded at runtime and all the targets inside a loaded database
    will be added to the AR search. At the time of writing this book, there is no
    hard limit to the number of targets inside a database, although Vuforia recommends
    no more than 1,000 for performance reasons.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our own database and targets, we will have to log into the Vuforia
    development portal and head to the Target Manager, as shown in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the Target Manager page at [https://developer.vuforia.com/vui/develop/databases](https://developer.vuforia.com/vui/develop/databases).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Log In or Register (if you don''t have an account) to enter the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/77b3402a-6465-419a-a9b6-3c4a04675d03.png)'
  prefs: []
  type: TYPE_IMG
- en: The Target Manager page
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on Add Database at the top right to create a new database. Because we
    will be using the Beetle images as targets, give the database the name `Beetle`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df940284-d82b-4199-ad08-bb100bcf6545.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new database
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on the created database and click on Add Target.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Browse button and select the `Side.jpg` image from the `Targets`
    folder of the project''s resources. Once it''s been uploaded, you will see that
    the Name field at the bottom will automatically be filled. Give it a Width value
    of `1` and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4863b319-ff50-4dd0-ae80-4b8c1e89d53b.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new target
  prefs: []
  type: TYPE_NORMAL
- en: The target will automatically be created, and next to it, you will see a number
    of stars, as depicted in the following screenshot. These stars indicate how recognizable
    the image will be by the AR software. Four or five stars are good targets.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you have any doubt or you want to know more about the other options that
    appear when you create a target, you can take a look at [https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html](https://library.vuforia.com/articles/Solution/How-To-Work-with-Device-Databases.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Repeat *steps 4* and *step* *5* with the `Back_closed.jpg` and `Back_open.jpg` images
    and with the same Width of `1` so that all of them will have a similar scale in
    the Unity editor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5918d141-6923-4072-bb92-8755da508942.png)'
  prefs: []
  type: TYPE_IMG
- en: The Target Manager page with the Beetle database and its targets
  prefs: []
  type: TYPE_NORMAL
- en: Once the three targets have been created, click on Download Database (All),
    select Unity Editor, and click Download. It will download a `Beetle.unitypackage`
    file that we will import into the project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Double-click on the `Beetle.unitypackage` file to import it in Unity. You can
    also import it from the Unity editor by clicking on Assets|Import Package|Custom
    Package… and selecting the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d5b4b0f4-cf56-4938-a6fb-7dee167bd536.png)'
  prefs: []
  type: TYPE_IMG
- en: The target database files to be imported in Unity
  prefs: []
  type: TYPE_NORMAL
- en: This will add the database to a newly created `StreamingAssets/Vuforia` folder
    and the compressed images of the three targets to the `Editor/Vuforia/ImageTargetTextures/Beetle`
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now that we have the database included in our project, we are going to add
    the three targets to the scene by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the Hierarchy window and click on Vuforia Engine|Image. This
    will create an ImageTarget object in our scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6086d01-8591-470b-bae8-7b1e68594484.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Vuforia ImageTarget to the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the ARCamera and ImageTarget will be in the same position and nothing
    will appear on camera. Using the Rotation tab, rotate the camera by `90` in the
    X axis and move it upwards `3` units until the target is in view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0534e307-2fe9-48d1-af6e-2503e69d59fd.png)'
  prefs: []
  type: TYPE_IMG
- en: ARCamera Transform values
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the other two ImageTargets and move them until the three are in view.
    Name them `Target_Side`, `Target_Close`, and `Target_Open` so that you can differentiate
    between them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ca32c4c-5b67-4266-8a6f-9bf6ad1d69de.png)'
  prefs: []
  type: TYPE_IMG
- en: The three targets in the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the ImageTarget represents the first target found in the first
    database, sorted alphabetically. To change it, select the Target_Side in the Hierarchy
    window, and in the Inspector window, under the Image Target Behavior component,
    select its image. Do the same with Target_Open. If you want, scale the targets
    up/down using the scale tab and move them until they look similar and take up
    all the camera width for a better view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5030841a-2d07-4fac-ae79-08451c58524f.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the image reference for the targets
  prefs: []
  type: TYPE_NORMAL
- en: We'll learn how to add test cubes in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some test cubes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To quickly test our scene, let''s create three different objects to visualize
    on top of each target:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on Target_Side and select 3D Object|Cube.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale it down so it doesn't hide the target completely.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Target_Close, create a 3D Object|Sphere instead of a cube, and for Target_Open,
    create a 3D Object|Capsule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scale them down as well so that the targets are partially in view. As it''s
    only for testing purposes, we are not going to add any material or texture to
    these objects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/74c31f19-ea11-4f97-ad56-20f101af0f73.png)'
  prefs: []
  type: TYPE_IMG
- en: Testing the 3D objects inside each target
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's obtain our Vuforia key so that we can test the app.
  prefs: []
  type: TYPE_NORMAL
- en: Obtaining the key
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to test the app or run it on a device, we need to provide a license
    key in the VuforiaConfiguration object. As we already logged into the Vuforia
    page to create the targets, we are now going to obtain the required key. Let''s
    get started:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the license manager page at [https://developer.vuforia.com/vui/develop/licenses](https://developer.vuforia.com/vui/develop/licenses).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the License Manager tab, select Get Development Key to obtain a free key
    to use while developing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give it the name of your app, `AR Guide`, read and accept the terms, and press
    Confirm.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select your newly created license and copy the key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, go to the Unity editor and select the ARCamera from the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the Open Vuforia Engine configuration button in the Inspector window
    to open the general Vuforia configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e7454376-9010-4c51-b3bc-b402a4907e29.png)'
  prefs: []
  type: TYPE_IMG
- en: Opening the Vuforia Engine configuration button
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste your key into the App License Key field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12cec8bb-19d7-4155-870f-3ac6cfc22f3a.png)'
  prefs: []
  type: TYPE_IMG
- en: Vuforia license key field in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's test the app to check that our AR scene has been set up properly.
  prefs: []
  type: TYPE_NORMAL
- en: Testing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the scene has been configured and the key has been added, click on the
    play button in the top Toolbar and point to the three target images with the webcam.
    You will see the different 3D objects appearing in each target when pointing at
    them.
  prefs: []
  type: TYPE_NORMAL
- en: You will be able to see the scene better if you select Maximize on Play in the
    Game view's top-right corner.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next image shows the cube appearing over the car side when the camera points
    at it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8975d5a8-9fa7-4500-8ed6-1630ed83f790.png)'
  prefs: []
  type: TYPE_IMG
- en: In the Game view, the cube object appears over the Target_Side target
  prefs: []
  type: TYPE_NORMAL
- en: You can find the pictures in the Project window inside the `Assets/ Editor/Vuforia/ImageTargetTextures/Beetle`
    folder. Double-click on them to open them in the computer, and either print them
    or directly point to them using the webcam.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the basic functionality set up, let's create the full app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an industrial guide for AR glasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have the basic setup ready, we are going to create a guide that
    will instruct workers on how to proceed, step by step, with the maintenance process
    of a car. The app will show them instructions with visual aids such as colored
    pictures and arrows that mark which part of the car they have to look at. It will
    also provide a help PDF file that they will be able to open to consult if needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The general working of the app will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the app starts, it will ask the worker to point at the car''s side to
    start the process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/824cbc07-0b03-464d-a8e0-9608725f9ca0.png)'
  prefs: []
  type: TYPE_IMG
- en: The initial message
  prefs: []
  type: TYPE_NORMAL
- en: 'When pointing with the camera at the side of the car (Target_Side), a blueprint
    of it will appear over the top of it, indicating a problem in the engine in red:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/02584604-8c51-41db-9f4c-8d657d24d0e6.png)'
  prefs: []
  type: TYPE_IMG
- en: The blueprint over the marker with the engine in red
  prefs: []
  type: TYPE_NORMAL
- en: 'When the operator touches the red square, the app will instruct them to go
    to the back of the car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81a7e52f-0333-4f2a-a226-2c8106de7075.png)'
  prefs: []
  type: TYPE_IMG
- en: The message when the user touches the engine
  prefs: []
  type: TYPE_NORMAL
- en: 'When pointing with the camera at the back of the car (Target_Close), the app
    will indicate to open the trunk via a blinking arrow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13eb829e-685a-4a21-9fa4-1370b8eee40c.png)'
  prefs: []
  type: TYPE_IMG
- en: The message to open the trunk
  prefs: []
  type: TYPE_NORMAL
- en: Once the worker has opened the trunk and is pointing at the engine (Target_Open),
    the app will indicate that the user needs to remove and change the top left spark
    plug.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On one side of the screen, a help PDF file with the instructions will be available
    in case the worker needs them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the operator has finished replacing the piece, they will press a button
    to confirm that they''ve completed the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f2a6144-4095-48bb-9842-eda5c1df344f.png)'
  prefs: []
  type: TYPE_IMG
- en: The arrow pointing at the spark to replace and the UI buttons of this step
  prefs: []
  type: TYPE_NORMAL
- en: 'Note: The content we are going to use is just for demonstration purposes and
    doesn''t correspond to the real instructions of this procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we are going to add the required material to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this project, we are going to use some media content that has to be imported
    into the project and customized. We have to put it inside the project and then
    use it in our scene. For that, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create your own folder inside the `Assets` folder on the Project window and
    name it `@MyAssets`. Then, create two other folders inside it called `Images` and `Scripts`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9245a600-84c8-4d4f-9bf6-e2c1e1221c66.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new folder in the Project window
  prefs: []
  type: TYPE_NORMAL
- en: From the resources of this chapter, drag the `arrow.png`, `blueprint.png`, `icon_file.png`, and
    `icon_home.png` image files into the `Images` folder you just created.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the images called icons and in the Inspector window, change their Texture
    Type to Sprite (2D and UI) so that we can use them inside the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a55925b-1421-4ac0-bba4-bb6b9f30d9c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the icon texture type
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new folder in the `Assets/StreamingAssets` folder of the Project window,
    call it `PDF`, and drag the `WorkOrder_0021.pdf` PDF file to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9358354-4d5c-437f-a393-a08b39dea584.png)'
  prefs: []
  type: TYPE_IMG
- en: The PDF file in the StreamingAssets/PDF folder
  prefs: []
  type: TYPE_NORMAL
- en: Adding the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An important thing to take into account for this project is that the target
    device is not a phone or tablet, but AR glasses. When working with glasses, the
    scene view is duplicated (for each eye) and is smaller than that of a tablet or
    phone. Thus, the UI and the size of its elements have to be adapted accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a summary, for this guide, we are going to need the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Main message**: Some text that occupies most of the screen to provide the
    main instructions (point at the side of the car, go to the back, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bottom message**: Some indication text placed at the bottom of the screen
    to give secondary instructions combined with AR elements (touch the red elements
    to see instructions, open the trunk, replace a piece, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PDF button**: A button for the extra information in PDF format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Home button**: To return to the initial screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s create all of them step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by creating a Canvas object in the Hierarchy window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a56469f7-5217-4023-b264-63b5475afe5b.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Canvas to the scene
  prefs: []
  type: TYPE_NORMAL
- en: When creating the Canvas object (parent to any other UI element), an Event System object,
    which is in charge of the user events that connect with the UI, is automatically
    created. If you try to create any UI component (for example, text, button, and
    so on) before creating the Canvas, Unity will create a Canvas element (with its
    EventSystem object) and make the new component a child of it.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Inspector window, change the Canvas component''s Render Mode from Screen
    Space - Overlay to World Space and select the ARCamera as Event Camera. This way,
    the Canvas is placed in the 3D world instead of fixed and can be moved/scaled.
    In the Rect Transform component, enter the values of the image so that the Canvas
    is in front of the camera:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/25726091-1150-4e7a-b5c2-d4aa48180366.png)'
  prefs: []
  type: TYPE_IMG
- en: Values of the Canvas gameobject
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the main message. Right-click on the Canvas element in the Hierarchy
    window and select UI|Text. Name it `Main_message`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4dfe761e-cf4a-4342-9c10-36587277316c.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating new text inside the Canvas element
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Hierarchy window, change the values on the Rect Transform component
    to match the following screenshot. Remove the default text, change the Alignment so
    it''s centered in the screen, check the Best Fit checkbox so that the text fills
    the container, set the Max Size to `80` to ensure it''s big enough, and change
    the Color to white:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7a6e678c-160b-4cd1-8b03-011538ddda85.png)'
  prefs: []
  type: TYPE_IMG
- en: Values of the Rect Transform and Text components in the Main_message
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to create a secondary message panel. As it''s going to be
    very similar to the previous one, we can directly right-click on the previous
    and select Duplicate:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4209f63-47bd-4f32-9c9b-aa7052873595.png)'
  prefs: []
  type: TYPE_IMG
- en: Duplicating the message
  prefs: []
  type: TYPE_NORMAL
- en: 'Change its name to `Bottom_message` and change its Rect Transform values so
    its place is at the bottom of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1fa5fbf3-4b73-4f9d-8e78-b99b8a62f641.png)'
  prefs: []
  type: TYPE_IMG
- en: New message's values
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the buttons, right-click on the Canvas element and select UI|Button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/66093bf4-df8a-430e-b8cb-f9768580572d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a button element on the Canvas
  prefs: []
  type: TYPE_NORMAL
- en: Remove the text from it and change the button name to `Home_button`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the Rect Transform, select anchoring it to the bottom left and copy the values
    from the image to place it at the bottom left of the screen with an appropriate
    size for the glasses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the Image component, select the `icon_home` image as the Source Image, and
    on the Button component, change the Pressed Color. This way, when the button is
    clicked, it will change from white to blue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f224bd8-1ce3-4456-8b2a-30d6387bb2fe.png)'
  prefs: []
  type: TYPE_IMG
- en: Home_button's values on the Inspector
  prefs: []
  type: TYPE_NORMAL
- en: 'Duplicate the button to create a copy of it and call it `File_button`. Change
    its Rect Transform so that you can locate it at the top-right corner of the screen
    and change its Source Image to icon_file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c39a164-6b4c-4373-aca9-fc5a336adff7.png)'
  prefs: []
  type: TYPE_IMG
- en: The values of the File_button
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create the last button from scratch, call it `OK_button`, and place it
    at the bottom-right corner of the screen. Change its Normal Color to light green:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e664f7a-b6af-4c83-be17-a5fdfd43d1ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Values of the Ok_button element
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Text child on the button and change the Rect Transform and Text
    component parameters so that they match what''s shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fcab318e-0d9c-4cc8-a006-f3758fe9d3e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Values of the Text element inside the Ok_button
  prefs: []
  type: TYPE_NORMAL
- en: 'Your Scene and Game views should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0139bb46-cee4-4242-af5f-0c740167874b.png)'
  prefs: []
  type: TYPE_IMG
- en: Scene and Game views with the created UI
  prefs: []
  type: TYPE_NORMAL
- en: Note that if you press the play button in the Toolbar, you will see that when
    the real camera feed is launched, the UI disappears. Don't worry about it at this
    point as we will be adjusting it later in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the UI elements are ready, we are going to add the virtual elements,
    which will appear in AR, and the logic attached to them.
  prefs: []
  type: TYPE_NORMAL
- en: Mounting the AR scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we are going to do is modify the `DefaultTrackableEventHandler.cs`
    script attached to each of the targets in the scene. This script determines the
    actions to perform whenever a target is found or lost in the real world; by default,
    it shows and hides the Renderer, Collider, and Canvas elements attached to any
    child of that target.
  prefs: []
  type: TYPE_NORMAL
- en: For our app, we need to know whenever a target has been found, and for that,
    we are going to add a variable to the script.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, we only need to make a slight change in the script. However,
    if you want to add more code to control when targets are found or lost, it's better
    to create a new class that inherits from `ITrackableEventHandler` like `DefaultTrackableEventHandler`
    does so that you always have a reference class to come back to in case anything
    fails in your code.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Project window, double-click on this script, which you can find in Vuforia|Scripts.
    When the Visual Studio window opens, we need to add the `public bool found = false;` variable
    to the variables:'
  prefs: []
  type: TYPE_NORMAL
- en: Then, *inside* the `OnTrackingFound()` method, add `found = true;` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: And *inside* the `OnTrackingLost()` method, add `found = false;` at the end.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we can use this variable from any other class to know if a target
    has been found.
  prefs: []
  type: TYPE_NORMAL
- en: Back in Unity, let's start adding the AR elements. For that, first of all, remove
    the test 3D cube, sphere, and capsule.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are going to look at the first target:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the Target_Side and create a 3D Object|Plane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/faca1576-afb8-4387-9b2f-eb31dd00f713.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a new plane
  prefs: []
  type: TYPE_NORMAL
- en: 'From the Project window, drag the blueprint image over the plane to make it
    its texture:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cf264ca-dec4-436c-b6db-2ec89cb7f1aa.png)'
  prefs: []
  type: TYPE_IMG
- en: Assigning the blueprint image as texture of the plane
  prefs: []
  type: TYPE_NORMAL
- en: 'In the Inspector window, change its name to `Blueprint`. On the material panel
    at the bottom, change the Rendering Mode to Fade to make it transparent and smooth.
    Now rotate, scale, and move the plane until the blueprint matches the car beneath,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78c60e66-c0ac-4510-87c1-a7a81ac99a1f.png)'
  prefs: []
  type: TYPE_IMG
- en: The blueprint over the target and its values in the Inspector window
  prefs: []
  type: TYPE_NORMAL
- en: Important! Keep the Y position value to `0.01` so the drawing is placed over
    the target but not too far away from it. This is to ensure the AR works correctly
    and the blueprint won't flicker for being too separated from the target.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to create another plane that covers the engine area so that when
    the user touches it, it gives them directions. Create another plane child of the
    Blueprint and call it `Engine`. Move and resize it until it fits the engine area
    (marked in red in the blueprint):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Important!** Keep it *on top* of the blueprint (Y Position `0.015` or `0.02`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next image shows the new grey plane placed over the engine area:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/74e7e747-3bd2-459f-8ad2-9bcc09e85239.png)'
  prefs: []
  type: TYPE_IMG
- en: The new plane located over the engine area
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to make this plane invisible as it''s only going to act as an
    activator. In the Inspector panel, remove its Mesh Renderer component by clicking
    on the gear at the top right and selecting Remove Component. Now, you will only
    see the plane if you select it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/634c0af9-cf1d-4d1d-a74a-a429411c9c00.png)'
  prefs: []
  type: TYPE_IMG
- en: Removing the Mesh Renderer component from the plane
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s move to the second target. This target will show an arrow to indicate
    to the user to open the trunk:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on Target_Close, create a new 3D Object|Plane, and place it in the
    middle of the trunk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the arrow image to the plane to make it its texture.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Inspector window, call the plane `Arrow`. Remember to set the Y Position
    to `0.01`. In the Material field, set Rendering Mode to Fade and change the Albedo
    color to a light blue:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/365b6b00-92bd-4871-94da-9947ad160de4.png)'
  prefs: []
  type: TYPE_IMG
- en: The values of the Arrow plane
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the blinking effect of the arrow, create a new C# script in the `@MyAssets/Script`
    folder and call it `Blinking.cs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6cec223a-bd64-4a7e-82ef-234f8aa4fd08.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding a new script to the @MyAssets/Scripts folder
  prefs: []
  type: TYPE_NORMAL
- en: 'Double-click on it to open it in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/108ead84-ef53-44fe-83ae-44b90eb5aaf4.png)'
  prefs: []
  type: TYPE_IMG
- en: Blinking script in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following lines to create the blinking effect. First, declare
    the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`coroutine` is a special function in Unity that pauses the execution and gives
    control back to the calling method until a certain condition is completed, and
    then resumes the execution where it left off. We will use it to blink every half
    a second.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, *inside* the `Start()` method, include the following initialization lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `coroutine` *after* the `Update()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The usual pausing command for a `coroutine` is `yield return null;`, which pauses
    the execution for a frame. For this `coroutine`, we have used `yield return new
    WaitForSeconds(0.5f);` to tell the `coroutine` to wait half a second before executing
    the following line. With this code, we are making the `MeshRenderer` component
    of the GameObject the script is attached to (the arrow) appear and disappear every
    half a second.
  prefs: []
  type: TYPE_NORMAL
- en: '*Inside* the `Update()` method, we are going to use the `coroutine` so that
    the arrow blinks only while the target is being detected and is hidden otherwise.
    With the blinking Boolean, we will verify that the `coroutine` is only launched
    once:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Back in the Unity editor, go to the Inspector window, click on Add Component,
    and add the Blinking script to the Arrow plane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2774b5c1-4a02-49bd-97e1-33981c9ec254.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding the new script to the plane
  prefs: []
  type: TYPE_NORMAL
- en: 'To finish, let''s go to the third target, which will have another arrow:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the Arrow game object and press Copy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, right-click on the Target_Open game object and paste it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Move and rotate it until it''s pointing at the top left of the trunk:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0e20e4f3-095f-459b-83e8-e3049c1078a7.png)'
  prefs: []
  type: TYPE_IMG
- en: The two arrows pointing to different places on the trunk
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, if we press the Play button on the top Toolbar, we will see
    the blueprint and arrows appearing when we point at each marker. However, we need
    to convert them into a step-by-step guide that will only show an instruction when
    the previous one is completed. We are going to add that logic in another script:'
  prefs: []
  type: TYPE_NORMAL
- en: In the Project window, in the `@MyAssets/Scripts` folder, right-click and create
    another C# script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Call it `MainHandler.cs` and double-click on it to open it in Visual Studio:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58656cbf-172b-480f-9415-20dd3f6f6434.png)'
  prefs: []
  type: TYPE_IMG
- en: MainHandler script in VisualStudio
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding Vuforia''s `UnityEngine.UI` to the libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: They are all `public` because we will initialize them from the Unity editor.
    They make references to the different scene elements we are going to play with,
    the targets, and the UI elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add this property *after* the variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: It's also `public` because we are going to assign it from the editor as well
    when the user presses the Done button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the following private variable, which is an enumeration to control
    each of the states of the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add some methods *after* the `Update()` method. Create a new method
    called `ShowElements()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: It will be used privately inside the class to show or hide the different components,
    depending on the state the app is in. This method will also control which markers
    show information in each step.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a `switch` call *inside* `ShowElements()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, we will tell the method to perform a different action, depending on which
    state the app is in at the time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `State.Init` case, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are only showing the `targetSide` target. To ensure the user will not
    be able to see the instructions for the other two, we activate only the main message
    and add the text to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `State.Side` case, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When the user has found the `targetSide` with the camera, we enter this state,
    where we deactivate the main message and show the bottom message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `State.Engine` case, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: If the user has touched the red component, we activate the next target and show
    the main message with instructions on how to find it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `State.Close` case, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The user has found `targetClose` so we deactivate the previous one and activate
    the next one. We also add a bottom message to open the trunk.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `State.Open` case, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Here, we activate the two buttons: `fileButton` to see the PDF, and `okButton`
    to finish the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `State.Plug` case, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This is the final step, so we will hide the buttons and targets and only leave
    the end message visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create another method called `NextStep()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: We will call this method to change from one step to the next one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add another method called `ResetInstructions()`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This method is `public` because it will be called from the editor by the Home
    button. It will go to the initial state of the app.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s modify the `Start()` method to convert it into a `coroutine` that
    waits until Vuforia is initialized before hiding the second and third targets
    with `ShowElements()`. Otherwise, it might not recognize them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, inside the `Update()` method, enter the logic to change from one step
    to the next one. Thus, the app will jump from one step to the next when the following
    happens:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Init`, `Engine`, and `Close` states, the app detects the corresponding
    target (side, close, open)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `Side` state, the user touches the screen over the engine area of the
    car
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Open` state, the user has touched the Done button:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we have finished with the script, go back to Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Drag the script from the Project window to the ARCamera game object in the
    Hierarchy window. Alternatively, click on the ARCamera and in the Inspector window,
    click Add Component and select the script. Fill in each of the fields in the Main
    Handler script with the elements from our scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d103765-8f38-47bc-b18b-10ab70a44987.png)'
  prefs: []
  type: TYPE_IMG
- en: Main Handler with its fields in the ARCamera GameObject
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the Home_button. Then, in the Inspector window, in the On Click () panel,
    add a new event, select the ARCamera, and then select the ResetInstructions()
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/81e91934-449e-4f96-95b2-186a1a58222a.png)'
  prefs: []
  type: TYPE_IMG
- en: On Click () event in the Home_button
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the OK_button. Then, in the Inspector window, in the On Click () panel,
    add a new event, select the ARCamera, and then the Finished property. Mark the
    checkbox so that whenever the button is pressed, the Finished property will be
    set to true:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e5e52a05-c001-4463-a6c3-fb4dbeb6dff8.png)'
  prefs: []
  type: TYPE_IMG
- en: On Click () event in the OK_button
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the main functionalities ready, let's configure the scene so
    that we can build it in the glasses.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AR for glasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This step is an important one so that we understand how the glasses work*.*
  prefs: []
  type: TYPE_NORMAL
- en: If, at this point, we compile the app in the Moverio glasses, we will see the
    video feed over the glasses screens, as if we were using a phone. This is not
    the best way of working with AR; what we want is for the background to remain
    transparent and only the UI elements and AR elements appear over the screens.
  prefs: []
  type: TYPE_NORMAL
- en: However, to see the effect and some characteristics of the AR in the glasses,
    we are going to compile the app and then make the relevant modifications.
  prefs: []
  type: TYPE_NORMAL
- en: Turn on the Moverio glasses and connect them to your computer via USB.
  prefs: []
  type: TYPE_NORMAL
- en: As you have already defined the settings, switched the platform to Android,
    and added the current scene to the building list in the introduction, just click
    *Ctrl* + *B* or click on File|Build And Run (if you skipped any of these steps,
    or if you are not sure, go to File|Build Settings… and check if everything is
    correct). Give the `.apk` file a name and build it.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we''ve discussed, you will see the video feed on your glasses, and the UI
    will be larger than expected. For now, forget about the UI and take a look at
    the video feed. If you compare the video feed to the real-world image behind it,
    you will see that the video feed is smaller and slightly displaced compared to
    the real world (take into account that the camera is placed on one side of the
    glasses). The following image shows this displacement (take into account the picture
    is taken only from the left screen of the glasses, so the displacement is even
    greater than when the left- and right-hand sides are combined):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e5f9d1b9-1e61-4c2d-a6c5-201fc40f9163.png)'
  prefs: []
  type: TYPE_IMG
- en: The AR view from the glasses
  prefs: []
  type: TYPE_NORMAL
- en: We have to take this into account because when we take the video feed out, the
    AR elements will look smaller and displaced on the targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first of all, let''s take the video feedback. This is a very easy step
    in Vuforia as in the latest versions, they have taken it out from the code and
    placed it as a checkbox in the Vuforia Engine configuration. Follow these steps
    to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the ARCamera and in the Inspector window, click on Open Vuforia Engine
    configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Video Background component, uncheck Enable video background:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a7ae644c-1054-4f23-aefa-77642c3c87c2.png)'
  prefs: []
  type: TYPE_IMG
- en: Disabling the video feed in the Vuforia Engine configuration
  prefs: []
  type: TYPE_NORMAL
- en: And that's it! Build the app again by pressing *Ctrl* + *B* and you will see
    how the video doesn't appear this time and that when you point at the side target
    with the glasses, only the AR element is shown. You will also see how, without
    the video feed, the UI will be of the correct size.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before the Video Background component, there is also a Digital Eyewear component.
    In the beginning, when Vuforia first enabled the AR glasses, the configuration
    of the scene went through this component. However, now, it is only valuable for
    HoloLens users to select the configuration for those glasses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, let''s make the AR elements match the real elements that can be seen
    through the glasses. Unfortunately, at the moment, there is not an exact method
    to do this. Therefore, we will take the displacement and size parameters out by
    trial and error and apply them to the rest of the elements. For this project,
    those values are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Displacement: `+0.5f` in the x axis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Scale: `*2.5` in all axes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instead of applying them one by one, create a new script called `GlassesHandler.cs`
    in your `@MyAssets/Scripts` folder and open it in Visual Studio. Add the following
    lines *inside* the `Start()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Position, rotation, and scale parameters can't be added directly; an intermediate
    variable has to be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Your code should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d5c93256-0063-4fd8-9ac0-35d07159fc27.png)'
  prefs: []
  type: TYPE_IMG
- en: GlassesHandler script in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Drag this script to the three targets or add it by selecting each target, pressing
    Add Component in the Inspector window, and selecting the script.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *B* to build your app and see how the elements now appear over
    the real elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To finish our app, we will add the PDF functionality to help the operator with
    their work.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the PDF file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PDF files are a slightly difficult task; since Unity doesn't open them internally,
    an external application must be used. In this section, we are going to learn about
    a simple call that we can use for opening the PDF files but that can also be used
    for other types of extensions (such as videos) and opening server files through
    a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Important! First, you must install an app in the glasses that can open PDF files,
    such as Adobe Reader. Please head to the Moverio website to learn where to find
    and how to install these kinds of applications.
  prefs: []
  type: TYPE_NORMAL
- en: As you may remember, we have not placed the video and PDF files inside the `@MyAssets`
    folder but in the `StreamingAssets/PDF` folder. This folder is a special folder
    inside Unity, and all the files in it are copied verbatim to the destination device,
    meaning they are not processed by Unity at all. We can't load them directly from
    this path, so we will copy them to an accessible path first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to Visual Studio and in the `MainHandler.cs` script, let''s add some code
    to handle these files. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `System.IO` library:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following variables at the beginning to indicate the paths of the PDF
    file inside the device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Initialize them *inside* the `Start()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following `coroutine`, which copies the PDF file from the `StreamingAssets`
    location to an accessible path and opens it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the following `public` method to open the PDF file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: If the file already exists in an accessible location, it opens it. Otherwise,
    it copies first and opens it from the coroutine.
  prefs: []
  type: TYPE_NORMAL
- en: '`Application.OpenURL()` opens the given path, regardless of whether it''s a
    URL or an internal path.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Back in Unity editor, select the File_button, and in the Inspector window,
    add the OpenPDFfile() call to its On Click () event:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3455961d-a978-4328-99ea-d6400134df4f.png)'
  prefs: []
  type: TYPE_IMG
- en: On Click () event in the File_button
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl* + *B* one last time to see the full app in the glasses.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about another of Vuforia's features, `ImageTargets`*,*
    and how to create your own image target and add virtual content to it. You have
    also learned about how to work with the Unity interface and scripts in order to
    create messages and buttons, as well as sequenced instructions.
  prefs: []
  type: TYPE_NORMAL
- en: With all this, you have acquired the skills you need to use Vuforia to create
    an industrial AR guide that can be implemented in mounting, maintenance, or training
    processes. You have also learned how to customize a step with extra PDF or even
    video and data files that have been taken either locally (like in this project)
    or from a remote server by using the OpenURL method with a URL inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can use this knowledge to create your own guide for your processes
    and use the current project as a template for it. You can also improve and extend
    it by using real-life pictures, linking some of the steps to your instruction
    PDF files or triggering the change from one step to another using signals or information
    coming from your servers.
  prefs: []
  type: TYPE_NORMAL
- en: As you have seen, the project is also easily deployed in mobile devices, and
    from here, you can try to migrate it to other types of glasses and see the results.
    You have also acquired the skills to try the rest of the Vuforia examples, which
    can be found in the Unity Asset Store, which has been published by PTC: [https://assetstore.unity.com/publishers/24484](https://assetstore.unity.com/publishers/24484).
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will completely change the scope and learn how to create
    an AR portal to transport the user into a virtual 3D world with ARKit for the
    tourism sector.
  prefs: []
  type: TYPE_NORMAL
