- en: '8'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '8'
- en: Adding Windows Notifications to WinUI Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将Windows通知添加到WinUI应用程序
- en: The Windows App SDK provides developers with the ability to implement **raw
    push notifications** and **app notifications** in their WinUI apps. It’s important
    to understand the use case for each of these notification types. They have different
    implementations, and each has its own set of advantages and limitations. Push
    notifications can be surfaced to the user or received by the app to perform internal
    operations. App notifications, on the other hand, are used to communicate with
    the user. We’ll cover examples of when you would want to use a particular notification
    type and add an app notification to the **My Media Collection** sample application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Windows App SDK为开发者提供了在WinUI应用程序中实现**原始推送通知**和**应用程序通知**的能力。了解每种通知类型的使用案例非常重要。它们有不同的实现方式，每种都有其自身的优点和局限性。推送通知可以显示给用户或由应用程序接收以执行内部操作。另一方面，应用程序通知用于与用户通信。我们将介绍何时使用特定通知类型的示例，并将应用程序通知添加到**我的媒体收藏**示例应用程序中。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding the different notification types in the Windows App SDK and the
    use case for each type
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Windows App SDK中不同通知类型及其使用案例
- en: Discovering how to leverage push notifications in a WinUI application
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发现如何在WinUI应用程序中利用推送通知
- en: Exploring how to use app notifications with WinUI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索如何使用WinUI中的应用程序通知
- en: By the end of this chapter, you will understand the differences between push
    notifications and other app notifications exposed by the Windows App SDK. You
    will understand when to choose each notification type and how they are handled
    in a WinUI 3 project.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将了解推送通知与Windows App SDK公开的其他应用程序通知之间的区别。您将了解何时选择每种通知类型以及它们在WinUI 3项目中是如何处理的。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章中的示例，需要以下软件：
- en: Windows 10 version 1809 (build 17763) or newer
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows 10版本1809（构建17763）或更高版本
- en: Visual Studio 2022 or later with the .NET Desktop Development workload configured
    for Windows App SDK development
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置了.NET桌面开发工作负载的Visual Studio 2022或更高版本，用于Windows App SDK开发
- en: 'The source code for this chapter is available on GitHub at this URL: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter08](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter08).'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可在GitHub上通过此URL获取：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter08](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter08)。
- en: Overview of push notifications in the Windows App SDK
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Windows App SDK中推送通知概述
- en: WinUI applications can leverage different types of notifications in the Windows
    App SDK. The notifications APIs were added in Windows App SDK 1.3 and can be either
    sent locally or through a cloud service, depending on the notification type. We
    most often associate notifications with the small, pop-up windows in the corner
    of the screen, called **toast notifications**, in Windows. However, a visual indicator
    isn’t required for all notifications. They can also be used to signal your app
    to activate and perform an action or sync data from a remote service without relying
    on a timer in the app.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: WinUI应用程序可以利用Windows App SDK中的不同类型的通知。通知API是在Windows App SDK 1.3中添加的，可以根据通知类型选择本地发送或通过云服务发送。我们通常将通知与屏幕角落的小弹出窗口联系起来，这些窗口被称为**托盘通知**，在Windows中。然而，并非所有通知都需要视觉指示器。它们也可以用来指示应用程序激活并执行操作或从远程服务同步数据，而不依赖于应用程序中的计时器。
- en: Raw push notifications
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始推送通知
- en: These internal notifications are known as **raw push notifications**. They require
    no user interaction and don’t signal the user with a **toast notification**. Push
    notifications leverage the **Windows Push Notification Services** (**WNS**), which
    is part of the **Microsoft Store** services. To publish an application in the
    Store or leverage any of its services, a Store account is required, and your app
    must be registered in the Store’s dashboard.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内部通知被称为**原始推送通知**。它们不需要用户交互，并且不会通过**托盘通知**向用户发出信号。推送通知利用**Windows推送通知服务**（**WNS**），这是**Microsoft
    Store**服务的一部分。要在商店发布应用程序或利用其任何服务，需要一个商店账户，并且您的应用程序必须在商店仪表板中注册。
- en: Note
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We will discuss publishing apps to the Microsoft Store in [*Chapter 14*](B20908_14.xhtml#_idTextAnchor582),
    *Packaging and Deploying WinUI Applications*. We won’t cover the Store registration
    process in this chapter, but you can skip ahead to review the process in [*Chapter
    14*](B20908_14.xhtml#_idTextAnchor582) if it’s new to you.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[*第14章*](B20908_14.xhtml#_idTextAnchor582)“打包和部署 WinUI 应用程序”中讨论将应用发布到 Microsoft
    Store，*第14章*。本章不会涵盖商店注册过程，但如果您对此不熟悉，可以跳到[*第14章*](B20908_14.xhtml#_idTextAnchor582)查看过程。
- en: Push notifications from WNS can be received directly by the app to signal the
    app to perform some action. In fact, your app doesn’t need to be active to receive
    a notification. Windows will activate the app so it can process the notification
    and perform the requested action. Using notifications saves device resources and
    can reduce or eliminate the need for polling and timers.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 WNS 的推送通知可以直接由应用接收，以指示应用执行某些操作。实际上，您的应用不需要处于活动状态即可接收通知。Windows 将激活应用，以便它可以处理通知并执行请求的操作。使用通知可以节省设备资源，并可以减少或消除轮询和计时器的需求。
- en: Notifications from WNS may also notify the user. This is one type of app notification.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: WNS 的通知也可能通知用户。这是一种应用通知类型。
- en: Cloud-based app notifications
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于云的应用通知
- en: App notifications involve notifying the user that some event has occurred or
    action is required. App notifications can be local or originate from the cloud.
    The cloud-based notifications, like raw notifications, leverage WNS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 应用通知涉及通知用户某些事件已发生或需要采取行动。应用通知可以是本地的，也可以来自云端。基于云的通知，类似于原始通知，利用 WNS。
- en: The process for creating and sending these app notifications is similar to creating
    raw push notifications. The header and content types will distinguish the app
    notifications and signal Windows to display a visible, transient notification.
    Any notifications that haven’t been dismissed or cleared by the user can be viewed
    in Windows settings in **Notification Center**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和发送这些应用通知的过程与创建原始推送通知的过程类似。头部和内容类型将区分应用通知，并通知 Windows 显示一个可见的、短暂的提示。任何未被用户取消或清除的通知都可以在
    Windows 设置中的**通知中心**查看。
- en: Note
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Certain types of self-contained apps or apps running with admin privileges
    may not be eligible to receive notifications. To view more information about these
    limitations, you can review this section of the push notifications documentation
    on Microsoft Learn: [https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/#limitations](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/#limitations).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 某些类型的自包含应用或具有管理员权限运行的应用可能不符合接收通知的资格。要查看有关这些限制的更多信息，您可以查看 Microsoft Learn 上推送通知文档的此部分：[https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/#limitations](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/#limitations)。
- en: App notifications can also be local to the user’s PC. Let’s discuss this type
    of notification next.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 应用通知也可以是用户 PC 本地的。让我们接下来讨论这种类型的通知。
- en: Local app notifications
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本地应用通知
- en: Local app notifications do not involve the cloud and WNS is not involved in
    sending the notification. They originate from your app, are displayed to the user,
    and are handled by your app when the user acts on the toast notification. Users
    are familiar with these types of notifications from using Microsoft apps such
    as Outlook, Teams, and even the Microsoft Store app.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本地应用通知不涉及云和 WNS，发送通知时不涉及 WNS。它们来自您的应用，显示给用户，并在用户对 toast 通知进行操作时由您的应用处理。用户通过使用
    Microsoft 的应用，如 Outlook、Teams，甚至 Microsoft Store 应用，熟悉这些类型的通知。
- en: Sometimes, these notifications are informational, such as when the Store app
    displays a message after an app has been updated. The notifications can also prompt
    the user to take an action, such as snoozing an Outlook calendar reminder. In
    this case, the notification window contains a drop-down control that allows the
    user to select the snooze duration.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，这些通知是信息性的，例如当商店应用在应用更新后显示消息时。通知还可以提示用户采取行动，例如暂停 Outlook 日历提醒。在这种情况下，通知窗口包含一个下拉控件，允许用户选择暂停的持续时间。
- en: Later in this chapter, we’ll add a local app notification to the **My Media
    Collection** app to prompt our users to add a new book to their collection. Now,
    we’ll dive a little deeper into the implementation of raw push notifications and
    how they can be used to quietly receive a notification from the cloud.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面部分，我们将向 **My Media Collection** 应用添加本地应用通知，提示用户将新书添加到他们的收藏中。现在，我们将更深入地探讨原始推送通知的实现以及它们如何被用来静默地接收来自云的通知。
- en: Using raw push notifications in WinUI applications
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 WinUI 应用中使用原始推送通知
- en: 'As we discussed in the previous section, push notifications that are handled
    by the app without notifying the user are generated through WNS and Azure. In
    this section, we will briefly examine how these notifications can be leveraged
    in WinUI applications. The Azure configuration needed to get started is somewhat
    lengthy and not very interesting. Because the Azure Notification Hubs configuration
    for WNS is already well documented in the Azure docs on Microsoft Learn, you should
    review them before we get started: [https://learn.microsoft.com/azure/notification-hubs/notification-hubs-windows-store-dotnet-get-started-wns-push-notification](https://learn.microsoft.com/azure/notification-hubs/notification-hubs-windows-store-dotnet-get-started-wns-push-notification).
    It’s also a good idea to familiarize yourself with the WNS overview in the Windows
    design documentation on Microsoft Learn: [https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/windows-push-notification-services--wns--overview](https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/windows-push-notification-services--wns--overview).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，未经用户通知由应用处理的推送通知是通过 WNS 和 Azure 生成的。在本节中，我们将简要探讨如何在 WinUI 应用中利用这些通知。要开始，所需的
    Azure 配置相对较长且不太有趣。由于 Azure 通知中心对 WNS 的配置已在 Microsoft Learn 上的 Azure 文档中详细说明，您应该在开始之前查看它们：[https://learn.microsoft.com/azure/notification-hubs/notification-hubs-windows-store-dotnet-get-started-wns-push-notification](https://learn.microsoft.com/azure/notification-hubs/notification-hubs-windows-store-dotnet-get-started-wns-push-notification)。了解
    Windows 设计文档中 WNS 概述也是一个好主意：[https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/windows-push-notification-services--wns--overview](https://learn.microsoft.com/windows/apps/design/shell/tiles-and-notifications/windows-push-notification-services--wns--overview)。
- en: Note
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Azure documentation was written for UWP apps, but the configuration instructions
    work just as well for a WinUI 3 application.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 文档是为 UWP 应用编写的，但配置说明同样适用于 WinUI 3 应用。
- en: 'Once the Azure configuration is complete, the steps to use notifications in
    a WinUI 3 app are similar to UWP but not exactly the same. For a detailed example
    of working with push notifications from the cloud, you can read this Microsoft
    Learn article: [https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/push-quickstart](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/push-quickstart).
    In this chapter, we are focusing on app notifications, and will add those to our
    sample app in the next section. The high-level steps you will need to complete
    are as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 完成Azure配置后，在 WinUI 3 应用中使用通知的步骤与 UWP 类似，但并不完全相同。有关从云中处理推送通知的详细示例，您可以阅读这篇 Microsoft
    Learn 文章：[https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/push-quickstart](https://learn.microsoft.com/windows/apps/windows-app-sdk/notifications/push-notifications/push-quickstart)。在本章中，我们专注于应用通知，将在下一节中将这些通知添加到我们的示例应用中。您需要完成的概述步骤如下：
- en: 'Add the COM activation information to your `Package.appxmanifest` file. Here’s
    an example:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 COM 激活信息添加到您的 `Package.appxmanifest` 文件中。以下是一个示例：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Register with `PushNotificationManager` in the `Microsoft.Windows.Push``     Notifications` namespace and subscribe to `PushNotificationChannel` for the notification
    type.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Microsoft.Windows.PushNotifications` 命名空间中注册 `PushNotificationManager` 并订阅
    `PushNotificationChannel` 以接收通知类型。
- en: Add code to the `App` class to check whether the application was launched or
    activated from the background as a result of a push notification.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `App` 类中添加代码以检查应用是否因推送通知而从后台启动或激活。
- en: Create a WNS channel and register that channel with the WNS service. These are
    the HTTP endpoints that will receive the notification data to be pushed to your
    app.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 WNS 通道并将该通道注册到 WNS 服务。这些是接收要推送到您应用的推送通知数据的 HTTP 端点。
- en: 'Use a tool such as `POST` request with the push notification data. You will
    need to get an access token for the request with your Azure tenant ID, app ID,
    and client secret. For more information, see this page: [https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-tenant-and-app-id-values-for-signing-in](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-tenant-and-app-id-values-for-signing-in).'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用像`POST`请求这样的工具，并带上推送通知数据。你需要为请求获取一个包含你的Azure租户ID、应用ID和客户端密钥的访问令牌。更多信息请参阅此页面：[https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-tenant-and-app-id-values-for-signing-in](https://learn.microsoft.com/azure/active-directory/develop/howto-create-service-principal-portal#get-tenant-and-app-id-values-for-signing-in)。
- en: Those are the basic steps, but there’s much more to be learned. Make sure you
    read all of the articles linked in this section to learn about the nuances of
    using raw push notifications in a WinUI application.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是基本步骤，但还有更多要学习。确保阅读本节中链接的所有文章，以了解在WinUI应用程序中使用原始推送通知的细微差别。
- en: Now, let’s learn more about app notifications and adding send-and-receive capabilities
    to our sample application.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更深入地了解应用通知，以及如何将发送和接收功能添加到我们的示例应用中。
- en: Adding Windows app notifications with the Windows App SDK
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Windows App SDK添加Windows应用通知
- en: 'In this section, we’re going to add some local app notifications to the **My
    Media Collection** project. The code we’ll add to the project is based on the
    Windows App SDK local app notification sample app created by the Microsoft Learn
    team. You can download the code for that project on GitHub: [https://github.com/microsoft/WindowsAppSDK-Samples/tree/main/Samples/Notifications/App/CsUnpackagedAppNotifications](https://github.com/microsoft/WindowsAppSDK-Samples/tree/main/Samples/Notifications/App/CsUnpackagedAppNotifications).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向**我的媒体收藏**项目添加一些本地应用通知。我们将添加到项目中的代码基于微软学习团队创建的Windows App SDK本地应用通知示例应用。你可以在GitHub上下载该项目的代码：[https://github.com/microsoft/WindowsAppSDK-Samples/tree/main/Samples/Notifications/App/CsUnpackagedAppNotifications](https://github.com/microsoft/WindowsAppSDK-Samples/tree/main/Samples/Notifications/App/CsUnpackagedAppNotifications)。
- en: We are adding two buttons to the MainPage in the app to trigger two types of
    notifications. One will have an image and some text. The second will add a text
    entry field to demonstrate how we can receive input from a user in the notification
    toast and act on it within our application.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在应用的`MainPage`中添加了两个按钮，用于触发两种类型的通知。一个将包含一个图像和一些文本。第二个将添加一个文本输入字段，以展示我们如何从通知托盘中接收用户输入并在我们的应用程序中对其做出反应。
- en: Note
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'There is a lot of configuration and code required to implement notification
    handling. If you would like to open the completed solution and follow along, the
    code is available on GitHub: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 实现通知处理需要大量的配置和代码。如果你想要打开完成的解决方案并跟随操作，代码可以在GitHub上找到：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete)。
- en: 'To get started, open your **MyMediaCollection** solution from the previous
    chapter or the starter solution for [*Chapter 8*](B20908_08.xhtml#_idTextAnchor197)
    on GitHub: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Start](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Start):'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，打开上一章中的**MyMediaCollection**解决方案或GitHub上[*第8章*](B20908_08.xhtml#_idTextAnchor197)的起始解决方案：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Start](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Start)。
- en: 'The first step is to add some configuration to the `Package.appxmanifest` file
    to enable notification handling in the app. Start by adding two namespace declarations
    to the `Package` element:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一步是在`Package.appxmanifest`文件中添加一些配置以启用应用中的通知处理。首先向`Package`元素添加两个命名空间声明：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, add an `Extensions` section inside the `Application` node, immediately
    after the `uap:VisualElements` section:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`Application`节点内部添加一个`Extensions`部分，紧接在`uap:VisualElements`部分之后：
- en: '[PRE2]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Generate a new `Helpers`.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 生成一个新的`Helpers`。
- en: 'Now create a new class named `NotificationShared` in the `Helpers` folder.
    Start by adding a constant and a struct to this class:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在`Helpers`文件夹中创建一个名为`NotificationShared`的新类。首先向这个类添加一个常量和结构体：
- en: '[PRE3]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `Notification` struct will represent the data received in an app notification.
    `scenarioTag` is a constant that will be needed when each notification to send
    is being constructed.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Notification`结构体将表示应用程序通知中接收到的数据。`scenarioTag`是一个常量，在构建要发送的每个通知时将需要。'
- en: 'Next, add the following static methods to the `NotificationShared` class. These
    will be used by the app to notify the UI when notifications are sent or received:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向`NotificationShared`类添加以下静态方法。这些方法将由应用程序用于在发送或接收通知时通知UI：
- en: '[PRE4]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`MainPage` doesn’t have a `Current` property, so this code won’t compile yet.
    We’ll take care of that soon. If Visual Studio didn’t add the necessary `using`
    statements, make sure these are present in `NotificationShared`:'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MainPage`没有`Current`属性，所以这段代码目前还不能编译。我们很快就会解决这个问题。如果Visual Studio没有添加必要的`using`语句，请确保在`NotificationShared`中存在这些语句：'
- en: '[PRE5]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we are going to create two classes to represent the two types of notifications
    that the app will send and receive. First, create a new class named `ToastWithAvatar`
    and start by adding two constants to the class:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将创建两个类来表示应用程序将发送和接收的两种类型的通知。首先，创建一个名为`ToastWithAvatar`的新类，并首先向类中添加两个常量：
- en: '[PRE6]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, add a method named `SendToast` to the class. This method will construct
    and show a Windows notification toast containing some text, an avatar image, and
    a button to display our app:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向类中添加一个名为`SendToast`的方法。这个方法将构建并显示一个包含一些文本、头像图像和显示我们应用程序的按钮的Windows通知托盘：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now add a `NotificationReceived` method, which will be invoked when this type
    of notification is received from Windows by our app. This method creates a `Notification`
    struct and calls a `NotificationReceived` method on `MainPage`, which we will
    create later in this section. We will also create the `ToForeground` method to
    bring our app to the front if it’s hidden behind other windows or minimized:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加一个`NotificationReceived`方法，当我们的应用程序从Windows接收到此类通知时，该方法将被调用。这个方法创建一个`Notification`结构体，并在稍后本节中创建的`MainPage`上调用`NotificationReceived`方法。我们还将创建`ToForeground`方法，以便将我们的应用程序带到前台，如果它被其他窗口隐藏或最小化了：
- en: '[PRE8]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The `ToastWithText` class will be similar to `ToastWithAvatar`, but it will
    add a call to `AddTextBox` in `AppNotificationBuilder` to create the input field
    in the Windows toast. It also adds the result of that user input to the `Notification`
    class created in `NotificationReceived`. To view the full code for this class,
    check out the completed solution on GitHub: [https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete/MyMediaCollection/Helpers/ToastWithText.cs](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete/MyMediaCollection/Helpers/ToastWithText.cs).'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ToastWithText`类将与`ToastWithAvatar`类似，但它将在`AppNotificationBuilder`中添加对`AddTextBox`的调用以创建Windows托盘中的输入字段。它还将用户输入的结果添加到在`NotificationReceived`中创建的`Notification`类中。要查看此类的完整代码，请查看GitHub上的完成解决方案：[https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete/MyMediaCollection/Helpers/ToastWithText.cs](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/main/Chapter08/Complete/MyMediaCollection/Helpers/ToastWithText.cs)。'
- en: 'Now it’s time to create the `NotificationManager` class. This class will do
    exactly that – manage notifications. It will initialize and unregister notification
    receiving. It will do the actual sending and receiving of notifications. Create
    the `NotificationManager` class in the `Helpers` folder and start by adding the
    constructor and finalization code:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是时候创建`NotificationManager`类了。这个类将正好做到这一点——管理通知。它将初始化和注销通知接收。它将执行实际的通知发送和接收。在`Helpers`文件夹中创建`NotificationManager`类，并首先添加构造函数和析构代码：
- en: '[PRE9]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Next, add the `Init` method that we’ll call from the `App` class:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加`Init`方法，我们将从`App`类中调用它：
- en: '[PRE10]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`OnNotificationInvoked` is hooked up in the `Init` method. This will fire when
    notifications are received by the app. It makes different calls to `NotificationShared`,
    depending on whether the notification is recognized or not:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`OnNotificationInvoked`在`Init`方法中被连接。当应用程序接收到通知时，这将触发。它根据通知是否被识别对`NotificationShared`进行不同的调用：'
- en: '[PRE11]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you have any unhandled exceptions in your code that process incoming notifications,
    they will also trigger this call to `NotificationShared.UnrecognizedToastOriginator`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的代码中有处理传入通知的未处理异常，它们也会触发对`NotificationShared.UnrecognizedToastOriginator`的此调用。
- en: 'Finally, create the `ProcessLaunchActivationArgs` and `DispatchNotification`
    methods in `NotificationManager`:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在`NotificationManager`中创建`ProcessLaunchActivationArgs`和`DispatchNotification`方法：
- en: '[PRE12]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now let’s add the code to `App.xaml.cs` to initialize `NotificationManager`
    and handle some of the common calls. Let’s start by adding the `using` statements
    that we’ll need for the new code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们将向 `App.xaml.cs` 添加代码以初始化 `NotificationManager` 并处理一些常见的调用。让我们首先添加新代码所需的
    `using` 语句：
- en: '[PRE13]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, add a private `notificationManager` object, add `DllImport` to help bring
    the window to the foreground, and make `m_window` static:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一个私有的 `notificationManager` 对象，添加 `DllImport` 以帮助将窗口带到前台，并使 `m_window`
    静态：
- en: '[PRE14]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Note
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'Be careful when choosing which Win32 APIs to use in your production WinUI applications.
    The `SwitchToThisWindow` API is documented as “*not suitable for general use*,”
    but it works for our purposes in a sample app. There are other APIs you can explore,
    including `ShowWindow`: [https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-showwindow](https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-showwindow).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择在生产 WinUI 应用中使用哪些 Win32 API 时要小心。`SwitchToThisWindow` API 被文档标记为“*不适用于通用用途*”，但在我们的示例应用中它适用于我们的目的。还有其他
    API 可以探索，包括 `ShowWindow`：[https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-showwindow](https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-showwindow)。
- en: 'Next, add the following code to `OnLaunched` right before calling `m_window.Activate`.
    This gets the arguments passed to the app from the Windows notification:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在调用 `m_window.Activate` 之前，向 `OnLaunched` 添加以下代码。这获取传递给应用的 Windows 通知参数：
- en: '[PRE15]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next, add some code to the `App` constructor to initialize `NotificationManager`
    and handle the `AppDomain.CurrentDomain.ProcessExit` event to unregister the manager
    when the app closes:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `App` 构造函数中添加一些代码以初始化 `NotificationManager` 并处理 `AppDomain.CurrentDomain.ProcessExit`
    事件，以便在应用关闭时注销管理器：
- en: '[PRE16]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The final items to be added to the `App` class are three static helper methods
    to get some application-related paths and the `ToForeground` method to bring the
    app to the front when it’s hidden or minimized:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加到 `App` 类中的最后几项是三个静态辅助方法，用于获取一些应用程序相关的路径，以及 `ToForeground` 方法，当应用隐藏或最小化时将应用带到前台：
- en: '[PRE17]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now let’s work on `MainPage`. Start in `MainPage.xaml`. We’re going to add
    two buttons to send notifications and an `InfoBar` control to display messages
    at the bottom of the page when notifications are sent or received. Add another
    `RowDefinition` to the outermost `Grid` control:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们来处理 `MainPage`。从 `MainPage.xaml` 开始。我们将添加两个按钮来发送通知，以及一个 `InfoBar` 控件，在发送或接收通知时在页面底部显示消息。向最外层的
    `Grid` 控件添加另一个 `RowDefinition`：
- en: '[PRE18]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add two buttons to the beginning of `StackPanel` that contains the existing
    `Button` controls:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向包含现有 `Button` 控件的 `StackPanel` 的开头添加两个按钮：
- en: '[PRE19]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add an `InfoBar` control just before the closing tag for the outer `Grid`:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在最外层 `Grid` 的关闭标签之前添加一个 `InfoBar` 控件：
- en: '[PRE20]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Next, open the `MainPage.xaml.cs` file, in which we need to add some code to
    handle the incoming notifications. The first thing we’ll do is add a `using` statement
    for `MyMediaCollection.Helpers`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开 `MainPage.xaml.cs` 文件，我们需要添加一些代码来处理传入的通知。我们首先要做的是添加 `MyMediaCollection.Helpers`
    的 `using` 语句。
- en: 'Next, add the code to expose the current instance of `MainPage` so the notifications
    can be routed properly:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加代码以公开 `MainPage` 的当前实例，以便正确路由通知：
- en: '[PRE21]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, add some code to update `InfoBar` whenever notifications are sent or
    received. This is the code that will be called by the methods in the `NotificationShared`
    class:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加一些代码，在发送或接收通知时更新 `InfoBar`。这是由 `NotificationShared` 类中的方法调用的代码：
- en: '[PRE22]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `DispatcherQueue` methods check whether the code has access to the UI thread.
    If not, `TryEnqueue` is used to queue the work to be performed when the UI thread
    is available. Otherwise, errors will be encountered when accessing UI elements
    from a background thread.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`DispatcherQueue` 方法检查代码是否可以访问 UI 线程。如果不能，则使用 `TryEnqueue` 将工作排队，以便在 UI 线程可用时执行。否则，从后台线程访问
    UI 元素时将遇到错误。'
- en: 'Create a `NotificationReceived` method to handle incoming notification information.
    This method parses through the incoming data and builds a message string to display:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `NotificationReceived` 方法来处理传入的通知信息。此方法解析传入数据并构建要显示的消息字符串：
- en: '[PRE23]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The final code to add to `MainPage` is a simple method to display `ContentDialog`
    with the notification data:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要添加到 `MainPage` 的最后一段代码是一个简单的显示 `ContentDialog` 的方法，其中包含通知数据：
- en: '[PRE24]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '`MainViewModel` is the final class to be updated. We need to create two command
    methods for the new buttons to invoke when sending app notifications. Create two
    methods named `SendToast` and `SendToastWithText`:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MainViewModel` 是需要更新的最后一个类。我们需要为发送应用通知时新按钮调用的两个命令方法创建两个方法：`SendToast` 和 `SendToastWithText`：'
- en: '[PRE25]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Don’t forget to add `using MyMediaCollection.Helpers;` to the list of using
    statements in `MainViewModel`.
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 不要忘记将 `using MyMediaCollection.Helpers;` 添加到 `MainViewModel` 中的 using 语句列表中。
- en: 'We’re ready to run the app and test the notifications. Start debugging and
    click the **Send Notification** button. You should see a toast appear in the lower-right
    portion of the main screen:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好运行应用程序并测试通知。开始调试并点击 **发送通知** 按钮。你应该在主屏幕的右下角看到 toast 出现：
- en: '![Figure 8.1 – A Windows toast notification](img/B20908_08_01.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.1 – Windows toast 通知](img/B20908_08_01.jpg)'
- en: Figure 8.1 – A Windows toast notification
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.1 – Windows toast 通知
- en: 'Bring another window in front of **My Media Collection** and then click **Open
    App** on the toast. The app should be brought back to the front of the screen
    and **ContentDialog** will display a message with information about the notification
    received:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 将另一个窗口置于 **我的媒体收藏** 前面，然后点击 toast 上的 **打开应用**。应用应该被带到屏幕的前面，**ContentDialog**
    将显示有关接收到的通知的信息：
- en: '![Figure 8.2 – Receiving an app notification](img/B20908_08_02.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.2 – 接收应用程序通知](img/B20908_08_02.jpg)'
- en: Figure 8.2 – Receiving an app notification
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.2 – 接收应用程序通知
- en: Note
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you click one of the buttons to send a notification multiple times without
    acknowledging the toast window, the toasts will not stack. The subsequent toasts
    will go straight to Windows’ **Notifications Center**. Once they go there, it’s
    not possible to use interactive fields such as a text box. In addition, if the
    user has *Do Not Disturb* or *Focus* mode enabled, all notifications will be suppressed
    and sent directly to **Notifications Center**.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击其中一个按钮多次发送通知而不确认 toast 窗口，toast 不会堆叠。后续的 toast 将直接发送到 Windows 的 **通知中心**。一旦它们到达那里，就无法使用文本框等交互式字段。此外，如果用户已启用
    *勿扰* 或 *专注* 模式，所有通知都将被抑制并直接发送到 **通知中心**。
- en: 'Now click the **Send Notification with Text** button. When this toast appears,
    it will have a text box where you can **Enter** **a reply**:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击 **发送带文本的通知** 按钮。当这个 toast 出现时，它将有一个文本框，你可以 **输入** **一个回复**：
- en: '![Figure 8.3 – Displaying a toast window with a text box](img/B20908_08_03.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.3 – 显示带有文本框的 toast 窗口](img/B20908_08_03.jpg)'
- en: Figure 8.3 – Displaying a toast window with a text box
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.3 – 显示带有文本框的 toast 窗口
- en: 'Type `Hello world` and click the **Reply** button. Now, when **My Media Collection**
    displays **ContentDialog**, it will include the reply that was entered in the
    toast window:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 输入 `Hello world` 并点击 **回复** 按钮。现在，当 **我的媒体收藏** 显示 **ContentDialog** 时，它将包括在
    toast 窗口中输入的回复：
- en: '![Figure 8.4 – Displaying the reply text from the toast window in our app](img/B20908_08_04.jpg)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![图 8.4 – 在我们的应用程序中显示 toast 窗口的回复文本](img/B20908_08_04.jpg)'
- en: Figure 8.4 – Displaying the reply text from the toast window in our app
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.4 – 在我们的应用程序中显示 toast 窗口的回复文本
- en: Now you’re ready to start building notifications into your own WinUI applications.
    Let’s wrap up the chapter and discuss what we’ve learned.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好开始将通知构建到自己的 WinUI 应用程序中。让我们总结本章内容并讨论我们学到的知识。
- en: Summary
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the types of Windows notifications available
    to WinUI developers in the Windows App SDK. We discussed how notifications can
    be used to save Windows resources, reduce the need for timers, and prompt users
    to act. We explored how to configure raw push notifications and added a local
    app notification to the **My Media Collection** sample app. You should now feel
    prepared to add any of these types of notifications to your own WinUI applications.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了 Windows App SDK 中可供 WinUI 开发者使用的 Windows 通知类型。我们讨论了如何使用通知来节省 Windows
    资源、减少对计时器的需求并提示用户采取行动。我们探讨了如何配置原始推送通知，并将本地应用通知添加到 **我的媒体收藏** 示例应用程序中。你现在应该准备好将任何这些类型的通知添加到自己的
    WinUI 应用程序中。
- en: In the next chapter, we’ll explore the **Windows Community Toolkit** (**WCT**)
    and learn how, together with the .NET Community Toolkit, you can save development
    time by leveraging existing helpers, styles, and controls.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 **Windows Community Toolkit**（**WCT**）以及如何通过利用现有的助手、样式和控制来与 .NET
    Community Toolkit 一起节省开发时间。
- en: Questions
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What type of Windows notification can be used to initiate a data sync from the
    cloud?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种Windows通知类型可以用来从云端启动数据同步？
- en: Which type of notification doesn’t rely on WNS?
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪种通知类型不依赖于WNS？
- en: Where do you register your app before configuring notification services in Azure?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Azure中配置通知服务之前，您在哪里注册您的应用程序？
- en: Which Windows App SDK namespace contains the objects for working with app notifications?
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个Windows App SDK命名空间包含用于处理应用通知的对象？
- en: Which class has methods to register and unregister your app for handling app
    notifications?
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个类提供了注册和注销应用程序以处理应用通知的方法？
- en: Which property can be set if you would like notifications from your app to disappear
    after a system reboot?
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您希望应用程序的通知在系统重启后消失，可以设置哪个属性？
- en: Can notifications from WNS prompt the user with a toast notification?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: WNS的通知能否通过托盘通知提示用户？
