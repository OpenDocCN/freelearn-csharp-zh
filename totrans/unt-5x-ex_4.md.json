["```cs\n//------------------------------\nusing UnityEngine;\nusing System.Collections;\n//------------------------------\npublic class Ammo : MonoBehaviour\n{\n  public float Damage = 100f;\n  public float LifeTime = 2f;\n  //------------------------------\n  void OnEnable()\n  {\n    CancelInvoke();\n    Invoke(\"Die\", LifeTime);\n  }\n  //------------------------------\n  // Update is called once per frame\n  void OnTriggerEnter(Collider Col)\n  {\n    //Get health component\n      Health H = Col.gameObject.GetComponent<Health>();\n\n    if(H == null)return;\n\n    H.HealthPoints -= Damage;\n  }\n  //------------------------------\n  void Die()\n  {\n    gameObject.SetActive(false);\n  }\n\n  //------------------------------\n}\n//------------------------------\n```", "```cs\n//------------------------------\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\n//------------------------------\npublic class AmmoManager : MonoBehaviour\n{\n  //------------------------------\n  //Reference to ammo prefab\n  public GameObject AmmoPrefab = null;\n\n  //Ammo pool count\n  public int PoolSize = 100;\n\n  public Queue<Transform> AmmoQueue = new Queue<Transform>();\n\n  //Array of ammo objects to generate\n  private GameObject[] AmmoArray;\n\n  public static AmmoManager AmmoManagerSingleton = null;\n  //------------------------------\n  // Use this for initialization\n  void Awake ()\n  {\n    if(AmmoManagerSingleton != null)\n    {\n      Destroy(GetComponent<AmmoManager>());\n      return;\n    }\n\n    AmmoManagerSingleton = this;\n    AmmoArray = new GameObject[PoolSize];\n\n    for(int i=0; i<PoolSize; i++)\n    {\n      AmmoArray[i] = Instantiate(AmmoPrefab, Vector3.zero, Quaternion.identity) as GameObject;\n      Transform ObjTransform = AmmoArray[i].GetComponent<Transform>();\n      ObjTransform.parent = GetComponent<Transform>();\n      AmmoQueue.Enqueue(ObjTransform);\n      AmmoArray[i].SetActive(false);\n    }\n  }\n  //------------------------------\n  public static Transform SpawnAmmo(Vector3 Position, Quaternion Rotation)\n  {\n    //Get ammo\n    Transform SpawnedAmmo = AmmoManagerSingleton.AmmoQueue.Dequeue();\n\n    SpawnedAmmo.gameObject.SetActive(true);\n    SpawnedAmmo.position = Position;\n    SpawnedAmmo.localRotation = Rotation;\n\n    //Add to queue end\n    AmmoManagerSingleton.AmmoQueue.Enqueue(SpawnedAmmo);\n\n    //Return ammo\n    return SpawnedAmmo;\n  }\n  //------------------------------\n}\n//------------------------------\n```", "```cs\n//------------------------------\nusing UnityEngine;\nusing System.Collections;\n//------------------------------\npublic class PlayerController : MonoBehaviour\n{\n  //------------------------------\n  private Rigidbody ThisBody = null;\n  private Transform ThisTransform = null;\n\n  public bool MouseLook = true;\n  public string HorzAxis = \"Horizontal\";\n  public string VertAxis = \"Vertical\";\n  public string FireAxis = \"Fire1\";\n\n  public float MaxSpeed = 5f;\n  public float ReloadDelay = 0.3f;\n  public bool CanFire = true;\n\n  public Transform[] TurretTransforms;\n  //------------------------------\n  // Use this for initialization\n  void Awake ()\n  {\n    ThisBody = GetComponent<Rigidbody>();\n    ThisTransform = GetComponent<Transform>();\n  }\n  //------------------------------\n  // Update is called once per frame\n  void FixedUpdate ()\n  {\n    //Update movement\n    float Horz = Input.GetAxis(HorzAxis);\n    float Vert = Input.GetAxis(VertAxis);\n    Vector3 MoveDirection = new Vector3(Horz, 0.0f, Vert);\n    ThisBody.AddForce(MoveDirection.normalized * MaxSpeed);\n\n    //Clamp speed\n    ThisBody.velocity = new Vector3(Mathf.Clamp(ThisBody.velocity.x, -MaxSpeed, MaxSpeed),\n    Mathf.Clamp(ThisBody.velocity.y, -MaxSpeed, MaxSpeed),\n    Mathf.Clamp(ThisBody.velocity.z, -MaxSpeed, MaxSpeed));\n\n    //Should look with mouse?\n    if(MouseLook)\n    {\n      //Update rotation - turn to face mouse pointer\n      Vector3 MousePosWorld = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, 0.0f));\n      MousePosWorld = new Vector3(MousePosWorld.x, 0.0f, MousePosWorld.z);\n\n      //Get direction to cursor\n      Vector3 LookDirection = MousePosWorld - ThisTransform.position;\n\n      //FixedUpdate rotation\n      ThisTransform.localRotation = Quaternion.LookRotation(LookDirection.normalized,Vector3.up);\n    }\n\n    //Check fire control\n    if(Input.GetButtonDown(FireAxis) && CanFire)\n    {\n      foreach(Transform T in TurretTransforms)\n        AmmoManager.SpawnAmmo(T.position, T.rotation);\n\n      CanFire = false;\n      Invoke (\"EnableFire\", ReloadDelay);\n    }\n  }\n  //------------------------------\n  void EnableFire()\n  {\n    CanFire = true;\n  }\n  //------------------------------\n  public void Die()\n  {\n    Destroy(gameObject);\n  }\n}\n//------------------------------\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.UI;\n//------------------------------\npublic class GameController : MonoBehaviour\n{\n  //Game score\n  public static int Score;\n\n  //Prefix\n  public string ScorePrefix = string.Empty;\n\n  //Score text object\n  public Text ScoreText = null;\n\n  //Game over text\n  public Text GameOverText = null;\n\n  public static GameController ThisInstance = null;\n  //------------------------------\n  void Awake()\n  {\n    ThisInstance = this;\n  }\n  //------------------------------\n  void Update()\n  {\n    //Update score text\n    if(ScoreText!=null)\n      ScoreText.text = ScorePrefix + Score.ToString();\n  }\n  //------------------------------\n  public static void GameOver()\n  {\n    if(ThisInstance.GameOverText!=null)\n    ThisInstance.GameOverText.gameObject.SetActive(true);\n  }\n  //------------------------------\n}\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n//------------------------------\npublic class ScoreOnDestroy : MonoBehaviour\n{\n  //------------------------------\n  public int ScoreValue = 50;\n  //------------------------------\n  void OnDestroy()\n  {\n    GameController.Score += ScoreValue;\n  }\n  //------------------------------\n}\n//------------------------------\n```"]