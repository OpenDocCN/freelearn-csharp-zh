- en: Chapter 6. Atlas and Font Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create a new atlas and add our own assets.
    At the end of this chapter, you will know how to handle normal, sliced, and tiled
    sprites.
  prefs: []
  type: TYPE_NORMAL
- en: We will use these new assets to add icons to our powers and selected powers.
    We will also change the backgrounds of our different windows, and add a new font
    to our project.
  prefs: []
  type: TYPE_NORMAL
- en: A small exercise will let you customize your main menu as you see fit before
    we move on to the final chapter. First, we need to learn how to create our own
    **Game** atlas.
  prefs: []
  type: TYPE_NORMAL
- en: The Atlas prefab
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With NGUI, an Atlas prefab is used to contain sprites and fonts. It is composed
    of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A large texture file containing all sprites and fonts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A material with this texture file assigned, and a specific shader
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Atlas prefab has a **UIAtlas** component attached to it. Its purpose is
    to contain information about your sprites' positions and sizes in the large texture.
  prefs: []
  type: TYPE_NORMAL
- en: It is much more efficient to use only one large texture that holds all our sprites,
    instead of having separate multiple small textures.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new Atlas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create our own Atlas to hold our sprites and new fonts. First, open our
    **Menu** scene. In order to do this, we will use the **Atlas Maker** wizard.
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **NGUI** | **Atlas Maker**, or press *Alt* + *Shift* + *M* to bring
    up the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating a new Atlas](img/8667OT_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'To create the Atlas, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the first field, type in the new atlas' name as `Game`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our new **Game** atlas has been created, and it is selected in the **Atlas Maker**
    wizard. It is empty for now. Let's change this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may have as many Atlases as you want, but remember that rendering multiple
    Atlases simultaneously will increase the number of draw calls.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sprites to Atlas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add some sprites to our new **Game** atlas. We will add the following
    three different types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Simple** sprite: As its name suggests, it is simply an image displayed on
    screen'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sliced** sprite: In this, the image is sliced in nine parts and it is resizable
    without stretching corners'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tiled** sprite: In this, the tiling pattern is repeatable indefinitely'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start with the **Simple** sprites.
  prefs: []
  type: TYPE_NORMAL
- en: Simple sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is time to create two sprites, Bomb and Time, which will illustrate our
    powers. First, we need to create the sprites and add them to our **Game** atlas.
    They will look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Simple sprites](img/8667OT_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You may either create them yourself, or download the `Assets.zip` file from
    [http://goo.gl/bZu4mF](http://goo.gl/bZu4mF).
  prefs: []
  type: TYPE_NORMAL
- en: If you wish to create your own sprites, a size of 128 x 128 will be enough.
    You can save them either as `.png` to support transparency, or as `.psd` files—they
    will be converted to the correct format when they will be imported in the Unity
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sprites to Atlas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When your Bomb and Time sprites are ready, or downloaded from the previous
    link, place them in a new `Assets`/`Textures` folder in your project. Then, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Atlas Maker** from **NGUI**, or *Alt* + *Shift* + *M*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Make sure that our new **Game** Atlas is selected, as shown in the following
    screenshot:![Adding sprites to Atlas](img/8667OT_06_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** view, select both our new **Bomb** and **Time** textures.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add/Update All** button in **Atlas Maker**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Good. Our two new sprites have been added to the **Game** atlas.
  prefs: []
  type: TYPE_NORMAL
- en: Available powers icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s add the icons to our **Time** and **Bomb** prefabs on the scene and
    perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Hierarchy** view, select **Background** by navigating to **PowersContainer**
    | **Grid** | **Bomb** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename this new duplicate as `Icon`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite Type** parameter in **UISprite** to **Simple**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `6` so that it can be displayed over the background.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Atlas** button in **UISprite** and in the pop-up window, select
    our new **Game** atlas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If the new **Game** Atlas is not visible in the list, drag it from the **Project**
    view in the field next to the **Atlas** button.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Sprite** button in **UISprite** and in the pop-up window, select
    our **Bomb** sprite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject from **Bomb** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete it—the icon and tool tip are enough!
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up window appears, asking you if you want to continue because you will
    lose the prefab connection. Click on **Continue**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Bomb** GameObject from our **Grid**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the **Inspector** view to update the prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Good, our **Bomb** prefab is up to date with its new icon. Let''s add the icon
    for the **Time** prefab by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **Icon** GameObject **Bomb** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag this duplicate inside the **Time** GameObject.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite** parameter to our own **Time** sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Dimensions** to `75` x `75`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Label** GameObject from **Time** and then perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete it—the icon and tool tip are enough!
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A pop-up window appears, asking you if you want to continue because you will
    lose the prefab connection. Click on **Continue**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Time** GameObject from **Grid**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the **Inspector** view to update the prefab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, our draggable powers prefabs now have their own icons.
  prefs: []
  type: TYPE_NORMAL
- en: Selected powers icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s also add icons for our **SelectedBomb** and **SelectedTime** prefabs
    so that they look nicer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selected powers icons](img/8667OT_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform the following steps to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Project** view, drag the **SelectedBomb** prefab in our **Surface**
    GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Hierarchy** view, select our **Icon** GameObject from **Grid**/**Bomb**
    and perform the given steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag this duplicate inside our new **SelectedBomb** instance.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `5`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Dimensions** to `120` x `120`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** GameObject from **SelectedBomb** and delete it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **SelectedBomb** GameObject from **Surface** and perform the given
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the **Inspector** view to update the prefab.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **SelectedBomb** instance from the scene.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s follow the same steps for our **SelectedTime** prefab:'
  prefs: []
  type: TYPE_NORMAL
- en: From the **Project** view, drag the **SelectedTime** prefab in our **Surface**
    GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Hierarchy** view, select our **Icon** GameObject from **Time** and
    perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Duplicate it.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag this duplicate inside our new **SelectedTime** instance.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Reset its **Transform** position to {`0`, `0`, `0`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Depth** to `5`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Dimensions** to `100` x `100`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Label** GameObject from **SelectedTime**, and delete it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **SelectedTime** GameObject from **Surface** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Apply** button in the **Inspector** view to update the prefab.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the **SelectedTime** instance from the scene.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it. We have our own two icons for our powers. Now, we can learn how to
    create and configure our own nine-sliced sprite.
  prefs: []
  type: TYPE_NORMAL
- en: Sliced sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We used the dark sliced sprite all along this book. Let''s create our own.
    Then, we will change the power selection box and the background sprites of **Main
    Menu**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Sliced sprites](img/8667OT_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a sprite to Atlas
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can use a 16 x 16 square sprite, such as the dark sprite. If you wish to
    have larger corners or add more details, simply use a larger texture size. You
    can also use the 64 x 64 `Window.png` file available in my `Assets.zip` archive.
  prefs: []
  type: TYPE_NORMAL
- en: 'When your new Window sprite is ready, place it in the `Assets/Textures` folder
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **Atlas Maker** by navigating to **NGUI** | **Atlas Maker**, or *Alt* +
    *Shift* + *M* and make sure our new **Game** atlas is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the new `Window.png` sprite file from **Textures** in the **Project**
    view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green **Add/Update All** button in the **Atlas Maker** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, `Window.png` has been added to our **Game** atlas, but it isn't configured.
    Yet.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a sliced sprite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Window sprite has been added to the atlas, but we still need to indicate
    the **UIAtlas** component where the slicing must occur on the sprite. Let's replace
    our **Background** of **Powers**, and configure its slicing parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the **Hierarchy** view, select the **Background** GameObject from **Powers**
    and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Change its **Atlas** parameter in **UISprite** to our **Game** Atlas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite** to our new **Window** sprite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Edit** button next to the **Sprite** field, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Configuring a sliced sprite](img/8667OT_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We are now in the sprite''s parameter window. Here, we can configure its **Dimensions**,
    **Border**, and **Padding**. Set these **Border** values to define the slicing
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a sliced sprite](img/8667OT_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The values shown in the previous screenshot might be different if you created
    your own sprite.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you change the **Border** values, dotted lines appear on the sprite at the
    bottom of the **Inspector** view in the **Preview** window.
  prefs: []
  type: TYPE_NORMAL
- en: 'The **Window** sprite should be sliced (as shown in the following screenshot)
    in the **Preview** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Configuring a sliced sprite](img/8667OT_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you have entered your four values, you can click on the green **Return
    to Background** button in order to go back to where we were.
  prefs: []
  type: TYPE_NORMAL
- en: We now have a functional sliced sprite, but we need to adjust the title position
    of the powers. In the **Hierarchy** view, select our **TitleLabel** GameObject
    from **Powers**, and change its **Pixel Offset** in **UIAnchor** to {`0`, `-18`}.
  prefs: []
  type: TYPE_NORMAL
- en: Good! We configured our first sliced sprite and changed the power selection
    box's background sprite with it.
  prefs: []
  type: TYPE_NORMAL
- en: The Main Menu window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s change our **Window** sprite **Main Menu** too. In the **Hierarchy**
    view, select our **Window** GameObject from **Container** and perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Change its **Atlas** to our **Game** Atlas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite** to our new **Window** sprite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Main Menu** title is not placed exactly inside the title bar. Let's change
    this by performing the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Title** GameObject from **Container**, and change its **Pixel Offset**
    value in **UIAnchor** to {`0`, `10`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Background** GameObject from **Title** and deactivate it for now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **Background** GameObject from **Container** and then perform the
    following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Relative Size** in **UIStretch** to {`1`, `0.95`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Pixel Offset** in **UIAnchor** to {`0`, `-17`}.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Great. That looks better. If you wish, you may change the nickname box's background
    sprites with our new Window sprite. You can even change the buttons by using the
    sliced sprite `Button.png` included in the `Assets.zip` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `Button.png` file can be used for non-button backgrounds too, such as the
    notification or tool tip backgrounds. Try it out!
  prefs: []
  type: TYPE_NORMAL
- en: Tiled sprites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's add a tiled sprite to create a space background for our **Game** scene.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the `Space.jpg` file from the `Assets.zip` archive, or you may
    create a 256 x 256 tiling sprite representing stars in space. Place the `Space.jpg`
    sprite in the `Assets/Textures` folder, and then perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our **Game** scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open **Atlas Maker** by navigating to **NGUI** | **Atlas Maker**, or *Alt*
    + *Shift* + *M*. Then perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** view, select our new `Space.jpg` file from **Textures**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add/Update All** button of the **Atlas Maker** window.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Ok, the new `Space.jpg` sprite has now been added to our **Game** Atlas. Let's
    change our **Game** scene's background to make it look like we're in space.
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Background** GameObject from **Viewport**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Atlas** to our **Game** Atlas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Sprite** to our new **Space** sprite.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change its **Color Tint** to {`140`, `200`, `200`, `255`}.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's it! Small stars are now tiling in the background. Now, it is time to
    add a font.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a font
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For optimization, NGUI uses bitmaps instead of true type fonts. We need to export
    our `.ttf` or `.otf` fonts to a bitmap using a free third-party tool called **BMFont**
    , which was created by **AngelCode**.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will need a `.txt` file that will contain information about where each
    glyph is located in the exported font's bitmap. You can download the BMFont from
    [www.angelcode.com/products/bmfont/](http://www.angelcode.com/products/bmfont/).
    Free-to-use fonts are available at [www.openfontlibrary.org/](http://www.openfontlibrary.org/).
  prefs: []
  type: TYPE_NORMAL
- en: For our first font, we will use the Pacaya font created by *Daniel Johnson*—it
    is included in the `Assets.zip` archive. Download, install, and launch BMFont.
    Install the font now by right-clicking on the `Pacaya.otf` file and then selecting
    **Install**.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting a font using BMFont
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once BMFont is launched and the Pacaya font is installed, go to **Options**
    | **Font Settings**. You can now select the Pacaya font in the **Font** field.
    The **Size(px)** field defines the font's size at export in pixels—set it to `24`
    and click on **OK**.
  prefs: []
  type: TYPE_NORMAL
- en: Our `.otf` file is loaded, and we can visualize and select the characters that
    we want to export with a left-click or click-and-drag. Select them all with *Ctrl*
    + *A*.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to export a selection of characters, don't forget to select the
    empty character—it's your space character.
  prefs: []
  type: TYPE_NORMAL
- en: Go to **Options** | **Export** options. Here, you must set the **Bit** depth
    to `32`. Now, the only thing you need to check is the **Width** and **Height**
    value of the bitmap.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see if it''s currently big enough, click on **OK** and go to **Options**
    | **Visualize**. The window shown in the following screenshot appears:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a font using BMFont](img/8667OT_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The red space represents wasted space. As you can see, we have a large amount
    of wasted space. You must try to set the bitmap size to reduce this red space
    as much as possible, while making sure you have enough space for all characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'If your bitmap size is too small and can''t hold all your characters, the **Preview**
    window''s title will show **Preview : 1/2** instead of **Preview : 1/1**, as shown
    in the following screenshot. Then, you should increase the bitmap size utile it
    displays **Preview : 1/1**. For the Pacaya font with all characters selected,
    enter `256` x `128`. It should look as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a font using BMFont](img/8667OT_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For optimization, you should keep its dimensions as powers of two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have set the correct bitmap size, go back to **Options** | **Export
    Options**. Then, make sure the **Presets** field is set to **White text with alpha**
    in order to have **R**, **G**, and **B** channel values at **one** and the **glyph**
    in channel **A**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Exporting a font using BMFont](img/8667OT_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you've done that, go to **Options** | **Save bitmap font as…** and name
    it `Pacaya`. The `.fnt` file extension will be added automatically. Inside the
    output folder you selected, you should have a `Pacaya_0.tga` file—the actual font
    bitmap—and a `.fnt` file.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You must have only one `.tga` file along with your `.fnt` file. Otherwise, your
    bitmap size is too small, and you need to make it larger before you re-export.
  prefs: []
  type: TYPE_NORMAL
- en: Ok, now copy these two files in a new `Assets/Fonts/Sources` folder.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a font in Unity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have our new font files. We must now create a new font for NGUI using these
    files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Unity, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **Font Maker** window by navigating to **NGUI** | **Font Maker**, or
    *Alt* + *Shift* + *F*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** view, browse to your `Assets/Fonts/Sources` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag your `Pacaya.fnt` file in the **Font Data** field in **Font Maker**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Pacaya_0.tga` file in the **Texture** field in **Font Maker**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Pacaya` in the **Font Name** field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Atlas** button and choose our **Game** Atlas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: This means the font's texture will be added to the **Game** Atlas, resulting
    in no supplementary draw call when a label is displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select any file in the `Sources` folder in the path `Assets/Fonts/` of our **Project**
    view—our font will then be added to the current folder, but you need to actually
    select a file inside the desired destination for it to work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the green **Create the Font** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A new Pacaya prefab has been created in the `Sources` folder in the path `Assets/Fonts/`.
    That's the prefab NGUI needs to display the font.
  prefs: []
  type: TYPE_NORMAL
- en: Select it in the **Project** view, and drag it inside our `Fonts` folder in
    `Assets`. If you cannot find it, simply type your font's name in the **Project**
    view's search bar.
  prefs: []
  type: TYPE_NORMAL
- en: Assigning a new font to Label
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we have added a new font to our project, let''s assign it to a Label:'
  prefs: []
  type: TYPE_NORMAL
- en: Open our **Menu** scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select our **Label** GameObject by navigating to **MainMenu** | **Container**
    | **Nickname** | **Input** and perform the following steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Font** button in **UILabel**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose our new **Pacaya** font.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If the new font does not appear in recent fonts, find it in your **Project**
    view and drag it manually in the **Font** field in **UILabel**.
  prefs: []
  type: TYPE_NORMAL
- en: Ok. We have added a new font to our project and assigned it to a label!
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the MainMenu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The blue background of our menu''s main camera is not very nice. Let''s set
    a black background for the camera, and add our space tiling sprite to make this
    better:'
  prefs: []
  type: TYPE_NORMAL
- en: Select our **MainMenu** GameObject from **Anchor**, and create a new sprite
    by navigating to **NGUI** | **Create** | **Sprite**, or press *Alt* + *Shift*
    + *S*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the new **Sprite** GameObject from **MainMenu** and perform the following
    steps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename it as `Space`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Atlas** type to our **Game** atlas.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Sprite** to our **Space** tiling sprite.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Sprite Type** parameter to **Tiled**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attach a **Stretch** component to it by navigating to **Component** | **NGUI**
    | **UI**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its **Style** parameter to **Both**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may notice that we have ugly lines between each repetition of the Space
    sprite. That is simply because there is a 1-pixel-wide border on the sprite. We
    can easily correct this by reducing the sprite's border value of 1 pixel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select our **Space** GameObject from **MainMenu**, and click on the **Edit**
    button next to the **Sprite** field, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the MainMenu](img/8667OT_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Set a value of `1` for each of the four **Border** parameters as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the MainMenu](img/8667OT_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: That's better; our tiling sprite now tiles correctly without any lines between
    each pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have learned how to add sprites and fonts, I would like you to
    change our **Main Menu** elements' backgrounds to make it look better. You may
    proceed as you wish—add more sprites if you want, change colors, and use your
    imagination!
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example of what you can achieve with the **Window** and
    **Button** sprites:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Customizing the MainMenu](img/8667OT_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You might have to move or resize the UI elements. Don't forget to use **Pixel
    Offset** in **UIAnchor** to move or resize instead of positions. Same for **Dimensions**—don't
    use the scale tool of Unity if you want to keep the widgets pixel perfect.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to create a new Atlas and add simple, sliced,
    and tiled sprites. Using these new sprites, we made our **Powers**, **Selected
    Powers**, and **Main Menu** windows look better than before.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use BMFont to export a font as bitmap and create a new font
    prefab for NGUI.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move on to the final [Chapter 7](ch07.html "Chapter 7. Creating a
    Game with NGUI"), *Creating a Game with NGUI*, you should have changed the appearance
    of your **Main Menu** to make it look nicer.
  prefs: []
  type: TYPE_NORMAL
