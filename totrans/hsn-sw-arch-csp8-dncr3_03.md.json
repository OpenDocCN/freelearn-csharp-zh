["```cs\nprivate static string ParseIntWithTryParse()\n{\n    string result = String.Empty;\n    int value;\n    if (Int32.TryParse(result, out value))\n        result = value.ToString();\n    else\n        result = \"There is no int value\";\n    return $\"Final result: {result}\";\n}\n\nprivate static string ParseIntWithException()\n{\n    string result = String.Empty;\n    try\n    {\n        result = Convert.ToInt32(result).ToString();\n    }\n    catch (Exception)\n    {\n        result = \"There is no int value\";\n    }\n    return $\"Final result: {result}\";\n}\n```", "```cs\npublic class SmartDictionary<T>\n{\n    ...\n    private Func<T, string> keyAccessor;\n    protected class Rater\n    {\n        public T Item;\n        public double Penalty=0;\n        public int FoundChars=0;\n    }\n    ...\n    protected Rater RateItem(string search, Rater x)\n    {\n        var toSearch = search.ToLower();\n        var destination = keyAccessor(x.Item).ToLower();\n        bool firstMatch = true;\n        for (var j = 0; j < toSearch.Length; j++)\n        {\n            if (destination == string.Empty) return x;\n            var currChar = toSearch[j];\n            var index = destination.IndexOf(currChar);\n            if (index == -1) continue;\n            x.FoundChars++;\n            if (firstMatch)\n            {\n                x.Penalty += index;\n                firstMatch = false;\n\n            }\n            else x.Penalty += index*1000;\n            if (index + 1 < destination.Length)\n                destination = destination.Substring(index + 1);\n            else\n                destination = string.Empty;\n        }\n        return x;\n    }\n    ...\n}\n```", "```cs\nusing System;\nusing System.Runtime.InteropServices;\n\nnamespace CheckOS\n{\n    class Program\n    {\n        static void Main()\n        {\n            if (RuntimeInformation.IsOSPlatform(OSPlatform.Windows))\n                Console.WriteLine(\"Here you have Windows World!\");\n            else if (RuntimeInformation.IsOSPlatform(OSPlatform.Linux))\n                Console.WriteLine(\"Here you have Linux World!\");\n            else if (RuntimeInformation.IsOSPlatform(OSPlatform.OSX))\n                Console.WriteLine(\"Here you have macOS World!\");\n        }\n    }\n}\n```", "```cs\ncat > sample.service <<EOF\n[Unit]\nDescription=Your Linux Service\nAfter=network.target\n[Service]\nExecStart=/usr/bin/dotnet $(pwd)/appfolder/app.dll 5000\nRestart=on-failure\n[Install]\nWantedBy=multi-user.target\nEOF\n```", "```cs\nsudo cp sample.service /lib/systemd/system\nsudo systemctl daemon-reload \nsudo systemctl enable *sample*\n```", "```cs\n# Start the service\nsudo systemctl start sample\n\n# View service status\nsudo systemctl status sample\n\n# Stop the service\nsudo systemctl stop sample \n```"]