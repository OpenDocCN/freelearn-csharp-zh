- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Technical Debt, Code Smells, and Refactoring
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术债务、代码异味和重构
- en: New software projects start out clean and optimistic, but quickly grow in complexity
    and difficulty to maintain until the code is difficult to understand, brittle
    to change, and impossible to test.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 新软件项目一开始都是干净和乐观的，但很快就会在复杂性和维护难度上增长，直到代码难以理解、脆弱且难以测试。
- en: If you’ve worked with code for any length of time, chances are you’ve come across
    code like this. In fact, if you’ve been in development for even a little bit of
    time, it’s likely you’ve *written* code you now regret.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从事过任何一段时间的代码工作，那么你很可能遇到过这样的代码。事实上，如果你在开发领域工作过一段时间，那么你很可能*编写过*你现在后悔的代码。
- en: It could be that the code is hard to read or understand. Maybe the code is inefficient
    or prone to errors. Perhaps the code was built under a certain set of business
    assumptions that later changed. Maybe the code simply no longer conforms to the
    standards you and your team have agreed to. Whatever the reason, bad code feels
    like it is practically everywhere in codebases of any significant size or age.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是代码难以阅读或理解。也许代码效率低下或容易出错。也许代码是在某些业务假设下构建的，而这些假设后来发生了变化。也许代码简单地不再符合你和你的团队同意的标准。无论原因如何，糟糕的代码似乎在任何一个规模或年龄较大的代码库中无处不在。
- en: This code litters our software projects and reduces our development speed, causes
    us to introduce bugs, and generally makes us less happy and productive as software
    engineers.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这种代码充斥着我们的软件项目，降低了我们的开发速度，导致我们引入错误，并通常使我们的软件工程师感到不那么快乐和高效。
- en: In this book, we’ll talk about how technical debt arises and what we can do
    about it through the process of refactoring, guided by tests and code analysis.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将讨论技术债务是如何产生的，以及我们如何通过重构的过程来处理它，这个过程由测试和代码分析引导。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Understanding technical debt and legacy code
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解技术债务和遗留代码
- en: Identifying code smells
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别代码异味
- en: Introducing refactoring
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍重构
- en: Understanding technical debt and legacy code
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解技术债务和遗留代码
- en: While computer science education, books, tutorials, and online courses all focus
    on creating new projects from scratch, the reality is that almost all development
    jobs you’ll have will center around understanding, maintaining, and expanding
    pre-existing code that may not meet your current standards.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然计算机科学教育、书籍、教程和在线课程都侧重于从头开始创建新项目，但现实是，你几乎所有的开发工作都将围绕理解、维护和扩展可能不符合你当前标准的现有代码。
- en: This pre-existing code is referred to as **legacy code**. You almost always
    inherit some amount of legacy code when joining a new project. This can be a large
    amount of code for pre-existing projects or a smaller set of libraries your code
    must work with.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这预先存在的代码被称为**遗留代码**。当你加入一个新项目时，你几乎总是继承了一定量的遗留代码。这可能是一大块现有项目的代码，或者是一组你必须与之协同工作的较小库。
- en: There are many different definitions of the term *legacy code*. One that stands
    out to me from my readings is Michael C. Feather’s definition, in *Working Effectively
    with Legacy Code*, that legacy code is *code* *without tests*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于术语“遗留代码”有许多不同的定义。在我阅读过的定义中，让我印象深刻的是迈克尔·C·费瑟在《与遗留代码有效工作》一书中提出的定义，即遗留代码是*没有测试的代码*。
- en: 'While I like Michael’s definition and believe testing is critically important,
    as we’ll see in *Part 2* of this book, I personally define legacy code as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我喜欢迈克尔·C·费瑟的定义，并认为测试至关重要，但正如我们在本书的*第二部分*中将要看到的，我个人将遗留代码定义为以下内容：
- en: '*Legacy code refers to any pre-existing code that would be implemented significantly
    differently were it* *rewritten today.*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*遗留代码是指任何如果今天重写将会显著不同的预先存在的代码*。'
- en: One key factor in legacy code is that it is *code you don’t currently fully
    understand* and as a result, its presence causes some degree of anxiety and apprehension.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留代码的一个关键因素是它是*你目前不完全理解的代码*，因此，它的存在引起了一定程度的不安和焦虑。
- en: This anxiety you feel when maintaining old systems is a prime symptom of something
    called **technical debt**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你维护旧系统时感到的这种焦虑是被称为**技术债务**的典型症状。
- en: Simply put, technical debt is *the negative effect of legacy code on future*
    *development efforts*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，技术债务是*遗留代码对未来* *开发努力*的负面影响。
- en: In other words, legacy code has a certain amount of inherent *risk* that bad
    things will happen when the code is modified. These bad things could be bugs that
    are introduced due to the brittleness of the pre-existing code (or our lack of
    understanding of it), slower development speed, or even catastrophic issues such
    as critical bugs or security breaches from out-of-date security practices or deprecated
    dependencies.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，遗留代码在修改时存在一定的内在*风险*，即可能会发生一些不好的事情。这些不好的事情可能是由于现有代码的脆弱性（或我们对它的理解不足）而引入的bug，或者开发速度变慢，甚至可能是由于过时的安全实践或已弃用的依赖项而导致的严重问题，如关键bug或安全漏洞。
- en: What’s worse is that technical debt will only grow over time – particularly
    if left unchecked.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 更糟糕的是，技术债务会随着时间的推移而增长——尤其是如果得不到控制的话。
- en: Where technical debt comes from
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术债务的来源
- en: 'Before we move on, I want to address a common point of confusion I see in organizations:
    technical debt is not the same thing as bad code.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，我想谈谈我在组织中看到的一个常见的混淆点：技术债务与技术不良代码不是一回事。
- en: Certainly, some of the technical debt we have in our systems may be simply poor-quality
    code. It could be that an inexperienced developer wrote it and didn’t properly
    benefit from code review by other developers. Sometimes, projects are in a rush
    and the team didn’t have time to write the code properly to begin with, and never
    got to go back and clean it up.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们系统中的一些技术债务可能仅仅是低质量的代码。可能是一个经验不足的开发者编写的，并且没有从其他开发者的代码审查中获得适当的益处。有时，项目处于匆忙之中，团队一开始就没有时间正确编写代码，而且从未有机会回去清理它。
- en: 'Sometimes, “quick and dirty” code written for prototypes makes it into production
    applications when “throwaway prototypes” get hastily promoted to actual production
    applications, as we’ll explore in [*Chapter 15*](B21324_15.xhtml#_idTextAnchor316)*:
    Communicating* *Technical Debt*.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，为了原型而编写的“快速且粗糙”的代码会在“可丢弃原型”匆忙升级为实际生产应用时进入生产环境，正如我们将在[*第15章*](B21324_15.xhtml#_idTextAnchor316)*：沟通*
    *技术债务* 中探讨的那样。
- en: Of course, there are other causes of technical debt as well.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，技术债务还有其他原因。
- en: Sometimes, the development team is under the impression that they are building
    software to accomplish a specific task and then that task changes as business
    needs evolve and new information is discovered. In these cases, teams often don’t
    start over with the code they were writing. They simply evolve the old code to
    suit the new task at hand. The result is code that works but isn’t ideally suited
    for the new task.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，开发团队会误以为他们正在构建软件来完成特定的任务，但随着业务需求的变化和新信息的发现，这个任务会发生变化。在这些情况下，团队通常不会从他们正在编写的代码重新开始。他们只是将旧代码演变以适应手头的新的任务。结果是代码可以工作，但并不理想地适合新的任务。
- en: This change in requirements is normal and even expected in software development
    environments. Modern software development occurs in an agile manner where requirements
    and plans naturally evolve over time and understanding them up-front is virtually
    impossible.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种需求的变化在软件开发环境中是正常的，甚至是可以预期的。现代软件开发以敏捷的方式进行，需求和计划会随着时间的推移自然演变，而提前理解它们几乎是不可能的。
- en: Even if development teams understood requirements perfectly and wrote perfect
    code, this code will eventually become a form of technical debt due to the changing
    nature of software engineering.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 即使开发团队完美理解需求并编写了完美的代码，由于软件工程的不断变化，这些代码最终也会成为一种形式的技术债务。
- en: In software development, tools and libraries change over time. At the time of
    writing, **.NET 8** and **C# 12** are the latest ways to run C# code, but these
    technologies will go out of support at some point in the future only to be replaced
    by newer versions.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，工具和库会随着时间的推移而变化。在撰写本文时，**.NET 8** 和 **C# 12** 是运行C#代码的最新方式，但这些技术将在未来的某个时刻停止支持，然后被更新的版本所取代。
- en: Even entire ways of thinking about software can change. Over the last twenty
    years, organizations have shifted from having their own on-premises servers to
    using cloud hosting on **Azure**, **AWS**, or **Google Cloud**. Even the very
    nature of what a server is has changed with technologies, including containerization
    technologies such as **Docker**, **platform as a service** (**PaaS**) offerings
    such as **Azure App Services**, and serverless computing offerings such as **Azure
    Functions** and **AWS Lambda**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 甚至关于软件的思考方式也可以改变。在过去二十年里，组织从拥有自己的本地服务器转变为使用**Azure**、**AWS**或**Google Cloud**的云托管。随着技术，包括容器化技术如**Docker**、**平台即服务**（**PaaS**）提供如**Azure
    App Services**，以及无服务器计算提供如**Azure Functions**和**AWS Lambda**，服务器的本质也发生了变化。
- en: Nowadays, newer AI technologies such as **ChatGPT** and **GitHub Copilot Chat**
    are poised to change what it even means to be a software developer, and this only
    underscores how much constant change is at the heart of the software engineering
    industry.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，像**ChatGPT**和**GitHub Copilot Chat**这样的新AI技术正准备改变软件开发者甚至意味着什么，这进一步强调了持续变化是软件工程行业核心的重要性。
- en: Change in software projects
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 软件项目的变更
- en: In software development, change is a constant and can be unpredictable and sudden.
    All this change leads to code that was once considered perfect to later be considered
    a significant risk to the ongoing success of the business.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，变化是持续的，可能是不可预测和突然的。所有这些变化导致曾经被认为是完美的代码后来被认为是业务持续成功的重大风险。
- en: In other words, technical debt is to some degree or another an unavoidable part
    of software development. Thankfully, you can take some steps to reduce the rate
    at which it accumulates (as we’ll discuss in *Part 2* of this book). Fortunately,
    we can detect technical debt through its symptoms, or “smells.”
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，技术债务在某种程度上是软件开发不可避免的一部分。幸运的是，你可以采取一些措施来减少其积累的速度（我们将在本书的*第2部分*中讨论）。幸运的是，我们可以通过其症状或“异味”来检测技术债务。
- en: Identifying code smells
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别代码异味
- en: So, how do you know whether your code has issues?
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，你怎么知道你的代码是否有问题？
- en: How do you know whether food has spoiled, clothing needs to be washed, or a
    diaper needs changing? It turns out that it just smells bad.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你怎么知道食物是否变质，衣服是否需要清洗，或者尿布是否需要更换？结果是它闻起来很糟糕。
- en: 'There are some metrics about what constitutes “good” and “bad” code, and we’ll
    explore them in [*Chapter 12*](B21324_12.xhtml#_idTextAnchor259)*: Code Analysis
    in Visual Studio* and [*Chapter 16*](B21324_16.xhtml#_idTextAnchor341)*: Adopting
    Code Standards*. Smelly code can be subjective to some degree or another. A developer
    who wrote a section of code or frequently modifies that portion of code may find
    the code to be more tolerable than a developer encountering the code for the first
    time.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些关于“好”代码和“坏”代码构成的指标，我们将在[*第12章*](B21324_12.xhtml#_idTextAnchor259)：Visual
    Studio中的代码分析*和[*第16章*](B21324_16.xhtml#_idTextAnchor341)：采用代码标准*中探讨。有异味的代码在某种程度上可能是主观的。编写了代码段或经常修改该部分的开发者可能会发现代码更易忍受，而首次遇到该代码的开发者可能不会这样认为。
- en: While not all pieces of technical debt are identical, it turns out that many
    pieces of legacy code share a set of common symptoms.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然并非所有技术债务都是相同的，但许多遗留代码共享一组常见的症状。
- en: 'These symptoms are commonly referred to as “code smells” and can include the
    following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这些症状通常被称为“代码异味”，可能包括以下内容：
- en: It’s difficult to understand what it does or *why* it does it
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难理解它做什么或*为什么*这样做
- en: You or people on your team avoid working with it
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你或你的团队成员避免与之合作
- en: It’s slower to modify than other areas or tends to break when modified
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的修改速度比其他区域慢，或者修改时容易出错
- en: It’s hard to test or debug
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 很难测试或调试
- en: New code starts out good and pristine, but real code that lives in a business
    setting evolves over time as more capabilities are required and additional features
    and fixes are introduced. As that happens, code that was once nice and neat starts
    to accumulate code smells.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码一开始是良好且纯净的，但在商业环境中实际存在的代码会随着时间的推移而演变，因为需要更多的功能，并引入了额外的特性和修复。在这个过程中，曾经整洁的代码开始积累代码“异味”。
- en: 'Not all code is created equal, and not all code lasts as long as other pieces
    of code. Certainly, there are things we can do to make our code more resilient
    (as we’ll see in [*Chapter 8*](B21324_08.xhtml#_idTextAnchor173)*: Avoiding Code
    Anti-Patterns with SOLID*). However, at some point in time, your nice and shiny
    new code will start to get smelly and will need to be cleaned up through a process
    called refactoring.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有代码都是平等的，也并非所有代码都能像其他代码一样持久。当然，我们可以做一些事情来使我们的代码更具弹性（正如我们将在[*第8章*](B21324_08.xhtml#_idTextAnchor173)*：使用SOLID避免代码反模式*）中看到）。然而，在某个时候，你那漂亮的新代码将开始变得令人不快，需要通过称为重构的过程来清理。
- en: Introducing refactoring
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入重构
- en: '**Refactoring** is one of those words that doesn’t make a lot of sense to newer
    programmers, but here’s a simple definition:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**重构**是那些对新手程序员来说意义不大的词汇之一，但这里有一个简单的定义：'
- en: '*Refactoring is the act of changing the shape or form of code without changing
    its functionality* *or behavior*.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**重构是改变代码的形状或形式而不改变其功能或行为的行为**。'
- en: 'There are two key concepts here:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个关键概念：
- en: The first concept is that refactoring is an effort to improve the maintainability
    of existing code. Sometimes, restructuring means introducing a new variable, method,
    or class. Other times, refactoring simply changes how individual lines of code
    are arranged or which language features are used. Even something as simple as
    renaming a variable could be considered a small act of refactoring.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个概念是，重构是为了提高现有代码的可维护性而努力。有时，重构意味着引入新的变量、方法或类。有时，重构只是改变了单个代码行的排列方式或使用了哪些语言特性。甚至像重命名变量这样的简单操作也可以被视为一个小型的重构行为。
- en: The second concept in this definition is that refactoring does not alter the
    *behavior* of the code in question. Refactoring is a structural change done to
    bring some piece of technical merit without altering the existing behavior of
    your code. If a method typically returned a certain value before you refactored
    it and now it returns a different value, that is a *change* and not a refactoring.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个定义中的第二个概念是，重构不会改变代码的*行为*。重构是为了在不改变代码现有行为的情况下，对代码结构进行的一种结构性改变，以引入某些技术优势。如果你重构前一个方法通常返回某个值，而现在返回了不同的值，那么这是一个*变化*，而不是重构。
- en: Refactoring also should provide some benefit to the engineering team. The code
    resulting from refactoring should be easier to understand, less likely to break
    when changed, and have less technical debt and fewer code smells than the starting
    code did.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 重构还应该为工程团队提供一些好处。重构后的代码应该更容易理解，在更改时更不容易出错，并且比原始代码具有更少的技术债务和代码异味。
- en: Every line of code the development team produces should have a business value.
    Refactoring is no different, except the business value it produces should be more
    maintainable code with fewer issues and delays arising from its presence.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 开发团队产生的每一行代码都应该具有商业价值。重构也不例外，除了它产生的商业价值应该是更易于维护的代码，减少了由于它的存在而产生的问题和延迟。
- en: Sometimes, we try to improve our code through refactoring and we accidentally
    introduce new behavior – typically in the form of new bugs. This makes our refactoring
    become an unintentional change in the software that can result in emergency fixes
    to restore code to a working state.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们试图通过重构来改进我们的代码，却意外地引入了新的行为——通常是新的错误。这使得我们的重构变成了软件中的无意变化，可能导致紧急修复以恢复代码的正常状态。
- en: Breaking code while refactoring can be a critical problem and a significant
    barrier to being allowed to perform refactored code in the future, which in turn
    can allow technical debt to thrive.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在重构过程中打断代码可能是一个关键问题，并且是未来允许执行重构代码的重大障碍，这反过来又可能让技术债务得以滋生。
- en: In *Part 2* of this book, we’ll explore ways of safely refactoring your code
    so that you don’t accidentally introduce bugs, while in *Part 4*, we’ll discuss
    getting organizational buy-in to refactor your code, and what to do when a defect
    does arise out of your refactoring efforts.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的*第2部分*中，我们将探讨安全重构代码的方法，以避免意外引入错误，而在*第4部分*中，我们将讨论获得组织对重构代码的支持，以及当缺陷确实出现在重构努力中时应该做什么。
- en: Refactoring tools in Visual Studio
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Visual Studio中的重构工具
- en: Thankfully, all editions of **Visual Studio** now include refactoring tools
    built into the editor that allow you to quickly perform a set of common refactorings
    in a reliable and repeatable manner.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，现在所有版本的**Visual Studio**都内置了重构工具，允许您以可靠和可重复的方式快速执行一系列常见的重构操作。
- en: 'In [*Chapter 2*](B21324_02.xhtml#_idTextAnchor026)*: Introduction to Refactoring*
    and the remaining chapters in *Part 1*, we’ll see a number of refactorings in
    action. Here’s a preview of some of the refactoring options Visual Studio provides
    the user:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B21324_02.xhtml#_idTextAnchor026)*：重构简介*以及第一部分剩余的章节中，我们将看到许多重构的实际操作。以下是Visual
    Studio为用户提供的一些重构选项的预览：
- en: '![Figure 1.1 – Visual Studio Quick Actions context menu showing a set of refactoring
    operations](img/B21324_01_01.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – Visual Studio快速操作上下文菜单显示一组重构操作](img/B21324_01_01.jpg)'
- en: Figure 1.1 – Visual Studio Quick Actions context menu showing a set of refactoring
    operations
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – Visual Studio快速操作上下文菜单显示一组重构操作
- en: 'Tool-assisted refactorings such as these are fantastic for a few reasons:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 工具辅助的重构，如这些，有几个原因使其非常出色：
- en: They are fast and efficient
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是快速和高效的
- en: They are reliable and repeatable
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是可靠和可重复的
- en: They *rarely* introduce defects
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们*很少*引入缺陷
- en: Caution
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: Note that I use the word *rarely* when talking about bugs introduced by refactoring
    tools. There are a few rare scenarios where using the built-in refactoring tools
    without thinking about their actions may introduce bugs into your application.
    We’ll talk specifically about those areas as we encounter them in the following
    chapters.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我在谈论由重构工具引入的缺陷时使用了“很少”这个词。在少数情况下，在不考虑其操作的情况下使用内置的重构工具可能会将缺陷引入您的应用程序。我们将在后续章节中遇到这些情况时具体讨论这些领域。
- en: Over the rest of *Part 1*, we’ll explore using these tools to quickly and effectively
    refactor your C# applications and talk about the types of scenarios in which you
    might use each one of these.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一部分的剩余部分，我们将探讨如何快速有效地使用这些工具来重构您的C#应用程序，并讨论您可能使用每个工具的场景类型。
- en: With all that our tools can do, it is important to remember that these tools
    are just one way of refactoring code. Often, the most effective ways of removing
    code smells involve a combination of writing code yourself and using the built-in
    refactoring tools.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们的工具功能强大，但重要的是要记住，这些工具只是重构代码的一种方式。通常，最有效的移除代码异味的方法是结合自己编写代码和使用内置的重构工具。
- en: Refactoring’s key value is the long-term health of an organization, but many
    obstacles to refactoring can come from the organization itself. To help illustrate
    the practical aspects of refactoring in a real organization, each chapter will
    involve a case study from a fictitious organization. Some chapters will focus
    entirely on code from the case study while others, such as this chapter, will
    conclude with a dedicated case study section. These case study sections illustrate
    the concepts of the chapter applied to a fictitious organization.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重构的关键价值是组织的长期健康，但许多重构的障碍可能来自组织本身。为了帮助说明在真实组织中进行重构的实际方面，每一章都将包含一个虚构组织的案例研究。有些章节将完全专注于案例研究中的代码，而其他章节，例如本章，将以专门的案例研究部分结束。这些案例研究部分展示了章节概念应用于虚构组织。
- en: Let’s meet our first case study section and see how technical debt and legacy
    code affect a typical company.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看我们的第一个案例研究部分，看看技术债务和遗留代码如何影响一家典型的公司。
- en: Case study – Cloudy Skies Airlines
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究 – Cloudy Skies Airlines
- en: The rest of this book will follow code examples from an airline called **Cloudy
    Skies Airlines**, or **Cloudy Skies** for short. Through these examples, we should
    be able to see how technical debt and refactoring can apply to a “real” organization
    and its software.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 本书剩余部分将遵循名为**Cloudy Skies Airlines**的航空公司的代码示例，或简称**Cloudy Skies**。通过这些示例，我们应该能够看到技术债务和重构如何应用于一个“真实”的组织及其软件。
- en: Note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Cloudy Skies is a fictitious airline company created for this book for teaching
    purposes only. Any resemblance to any real company is purely coincidental. Additionally,
    I have never worked in aviation, so the code examples presented in the book are
    likely significantly different from actual software systems used in the industry.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudy Skies是一家虚构的航空公司，仅为此书的教学目的而创建。任何与任何真实公司的相似之处纯属巧合。此外，我从未在航空业工作过，因此书中提供的代码示例可能与行业实际使用的软件系统有显著差异。
- en: Cloudy Skies is an airline that’s been around for the past 50 years and currently
    operates a little over 500 jets in its fleet, serving around 70 cities in its
    region.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudy Skies是一家存在了50年的航空公司，目前在其机队中运营着超过500架喷气式飞机，为其所在地区的约70个城市提供服务。
- en: Twenty years ago, the airline made a major move and started replacing its aging
    software systems with custom in-house applications built by its development team.
    Cloudy Skies chose to use .NET and C#. The initial systems performed well and
    resulted in increased developer productivity and high-performance software applications,
    so Cloudy Skies continued to migrate its applications to .NET.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 二十年前，航空公司做出了重大举措，开始用其开发团队构建的定制内部应用程序替换其老化的软件系统。Cloudy Skies 选择使用 .NET 和 C#。初始系统表现良好，并导致开发人员生产力和高性能软件应用程序的增加，因此
    Cloudy Skies 继续将其应用程序迁移到 .NET。
- en: As time went by, the airline and its systems grew. The engineering team at Cloudy
    Skies was once held in high esteem as the pride and joy of the organization and
    a key to its future.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，航空公司及其系统不断增长。Cloudy Skies 的工程团队曾经是组织的骄傲和喜悦，也是其未来的关键。
- en: 'However, management has been somewhat frustrated by its engineering team over
    the past few years. Some of its key complaints include the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在过去几年中，管理层对其工程团队有些许挫败感。其中一些关键投诉包括以下内容：
- en: Product managers are frustrated by large estimates for seemingly simple changes
    to existing systems, and a growing amount of time between software releases due
    to long implementation times and numerous bugs.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品经理们对于对现有系统看似简单的更改所需的大量估计感到沮丧，以及由于实施时间过长和大量错误而导致的软件发布之间的时间不断增加。
- en: The Quality Assurance department has been overwhelmed by a growing number of
    bugs present in the software, a tendency for the same things to break repeatedly,
    and bugs appearing in seemingly unrelated areas when changes occur in other parts
    of the application.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 质量保证部门被软件中日益增长的错误所淹没，同一事物反复出现故障的趋势，以及当应用程序的其他部分发生变化时，似乎无关的区域出现错误。
- en: For its part, the engineering team feels overwhelmed by the code it’s working
    with. Strategic initiatives have been pushed aside for years while the organization
    has the team focus on urgent changes or tight deadlines for new releases. As a
    result, nobody has had time to address the growing amount of technical debt the
    team is facing.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 对于工程团队来说，他们感到正在处理的代码让他们感到压力重重。战略举措多年来一直被搁置，而组织让团队专注于紧急更改或新发布的紧迫截止日期。因此，没有人有时间解决团队面临日益增长的技术债务。
- en: The Cloudy Skies codebase is constantly growing in complexity to account for
    each new feature or “special case” added to the system. This complexity in turn
    makes the application harder to test, understand, and modify, which has led to
    difficulties in onboarding new developers and some experienced developers leaving
    the organization.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Cloudy Skies 的代码库不断增长，以适应系统添加的每个新功能或“特殊情况”。这种复杂性反过来又使得应用程序更难测试、理解和修改，这导致了新开发人员入职困难和一些经验丰富的开发人员离开组织。
- en: Out of frustration after several severe delays and high-profile bugs, Cloudy
    Skies brings in a new engineering manager and empowers the team to make changes
    to ensure the airline can stay efficient and effective in the years to come.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在经历了几次严重的延误和备受瞩目的错误之后，Cloudy Skies 引进了一位新的工程经理，并赋予团队权力进行变革，以确保航空公司在未来几年中能够保持高效和有效。
- en: This engineering manager determines that the primary cause of these problems
    is technical debt and that targeted refactoring of the most critical areas throughout
    the suite of applications could significantly reduce risk and improve the team’s
    effectiveness going forward.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这位工程经理确定，这些问题的根本原因是技术债务，并且对整个应用程序套件中最关键区域的针对性重构可以显著降低风险并提高团队未来的效率。
- en: To its credit, management agrees and allows the team to allocate resources to
    pay down technical debt and improve the maintainability of the code through refactoring.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 值得赞扬的是，管理层表示同意，并允许团队分配资源来偿还技术债务并通过重构提高代码的可维护性。
- en: Throughout the rest of this book, we’ll follow aspects of this fictitious team’s
    journey in paying down technical debt and paving the way to a better future through
    refactoring.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的其余部分，我们将跟随这个虚构团队偿还技术债务和通过重构铺就通往更好未来的道路的历程。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Legacy code is an unavoidable byproduct of the forces of time and constant change
    that are present in software development projects. This legacy code becomes a
    breeding ground for technical debt, which threatens our productivity as developers
    and the quality of our software.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 历史代码是软件开发项目中时间力量和持续变化的不可避免的结果。这种历史代码成为技术债务的滋生地，这威胁到我们作为开发者的生产力和我们软件的质量。
- en: While technical debt can arise due to a number of reasons, refactoring is the
    cure. Refactoring reworks existing code into a more maintainable and less risky
    form, reducing our technical debt and helping us control our legacy code.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管技术债务可能由于许多原因而产生，但重构是治疗方法。重构将现有代码重构为更易于维护和风险更低的形态，减少我们的技术债务，并帮助我们控制我们的遗留代码。
- en: The more you understand the causes and effects of technical debt in your code,
    the better you’ll find yourself equipped to explain technical debt to others in
    your organization, advocate for refactoring, and avoid things that cause your
    code to decline in effectiveness over time.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 你对代码中技术债务的原因和影响了解得越多，你发现自己就越能更好地向组织中的其他人解释技术债务，倡导重构，并避免导致代码随时间推移而降低有效性的因素。
- en: In the next chapter, we’ll explore refactoring in more depth by walking through
    a set of targeted changes to improve a piece of sample code from the Cloudy Skies
    Airlines codebase.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过一系列有针对性的更改来更深入地探讨重构，以改进Cloudy Skies Airlines代码库中的一个示例代码片段。
- en: Questions
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between technical debt and legacy code?
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 技术债务和遗留代码之间的区别是什么？
- en: What are some causes of technical debt?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 技术债务有哪些原因？
- en: What are some of the effects of technical debt?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 技术债务有哪些影响？
- en: Is it possible to avoid technical debt?
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以避免技术债务？
- en: Is it possible to get to a point where your code cannot be refactored further?
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否有可能达到一个点，你的代码不能再进一步重构？
- en: Further reading
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information about technical debt, legacy code, and refactoring
    at the following URLs:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网址找到有关技术债务、遗留代码和重构的更多信息：
- en: '*Defining Technical* *Debt*: [https://killalldefects.com/2019/12/23/defining-technical-debt/](https://killalldefects.com/2019/12/23/defining-technical-debt/)'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*定义技术债务*：[https://killalldefects.com/2019/12/23/defining-technical-debt/](https://killalldefects.com/2019/12/23/defining-technical-debt/)'
- en: '*Identify Technical* *Debt*: [https://learn.microsoft.com/en-us/training/modules/identify-technical-debt/](https://learn.microsoft.com/en-us/training/modules/identify-technical-debt/)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*识别技术债务*：[https://learn.microsoft.com/en-us/training/modules/identify-technical-debt/](https://learn.microsoft.com/en-us/training/modules/identify-technical-debt/)'
- en: '*The True Cost of Technical* *Debt*: [https://killalldefects.com/2019/11/09/the-true-cost-of-technical-debt/](https://killalldefects.com/2019/11/09/the-true-cost-of-technical-debt/)'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术债务的真实成本*：[https://killalldefects.com/2019/11/09/the-true-cost-of-technical-debt/](https://killalldefects.com/2019/11/09/the-true-cost-of-technical-debt/)'
- en: '*Code* *refactoring*: [https://en.wikipedia.org/wiki/Code_refactoring](https://en.wikipedia.org/wiki/Code_refactoring)'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代码重构*：[https://en.wikipedia.org/wiki/Code_refactoring](https://en.wikipedia.org/wiki/Code_refactoring)'
