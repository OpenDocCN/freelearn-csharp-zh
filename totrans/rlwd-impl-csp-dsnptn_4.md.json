["```cs\npublic interface IDocumentor\n{\n  public void PrintManual();\n}\n```", "```cs\npublic interface INotifier\n{\n  public void Notify();\n}\n```", "```cs\npublic abstract class AbstractBicycleDecorator : IBicycle \n{\n  protected readonly IBicycle UndecoratedBicycle;\n```", "```cs\n  protected AbstractBicycleDecorator(IBicycle bicycle)\n  {\n    UndecoratedBicycle = bicycle;\n  }\n```", "```cs\n  public string ModelName\n  {\n    get => UndecoratedBicycle.ModelName;\n    set => UndecoratedBicycle.ModelName = value;\n  }\n  public int Year => UndecoratedBicycle.Year;\n  public string SerialNumber => \n    UndecoratedBicycle.SerialNumber;\n  public BicycleGeometries Geometry\n  {\n    get => UndecoratedBicycle.Geometry;\n    set => UndecoratedBicycle.Geometry = value;\n  }\n  public BicyclePaintColors Color\n  {\n    get => UndecoratedBicycle.Color; \n    set => UndecoratedBicycle.Color = value; \n  }\n  public SuspensionTypes Suspension { \n    get => UndecoratedBicycle.Suspension;\n    set => UndecoratedBicycle.Suspension = value;\n  }\n  public ManufacturingStatus BuildStatus { \n    get => UndecoratedBicycle.BuildStatus;\n    set => UndecoratedBicycle.BuildStatus = value;\n  }\n```", "```cs\n public abstract void Build();\n}\n```", "```cs\npublic class DocumentedBicycle : AbstractBicycleDecorator\n{\n```", "```cs\n  private IDocumentor _documentor;\n  public DocumentedBicycle(IBicycle bicycle, ManualPrinter \n                           printer) : base(bicycle)\n  {\n    _documentor = printer;\n  }\n```", "```cs\n  public override void Build()\n  {\n    UndecoratedBicycle.Build();\n    _documentor.PrintManual();\n  }\n}\n```", "```cs\npublic class NotifyingBicycle : AbstractBicycleDecorator\n{\n  private readonly INotifier _notifier;\n  public NotifyingBicycle(IBicycle bicycle, INotifier \n                         notifier) : base(bicycle)\n  {\n    _notifier = notifier;\n  }\n  public override void Build()\n  {\n    UndecoratedBicycle.Build();\n    _notifier.Notify();\n  }\n}\n```", "```cs\npublic class ManualPrinter : IDocumentor\n{\n  public void PrintManual()\n  {\n    Console.ForegroundColor = ConsoleColor.Cyan;\n    Console.WriteLine(\"The manual is printing!\");\n    Console.ResetColor();\n  }\n}\n```", "```cs\npublic class MaterialsInventoryNotifier : INotifier\n{\n  public void Notify()\n  {\n    Console.ForegroundColor = ConsoleColor.Yellow;\n    Console.WriteLine(\"The materials inventory control \n      system has been notified regarding the manufacture of \n        this bicycle.\");\n    Console.ResetColor();\n  }\n}\n```", "```cs\nvar regularRoadBike = new RoadBike();  //no decorators.\nregularRoadBike.Build();\nConsole.WriteLine(\"+++++++++++++++++++++++++++++++++++++\");\n```", "```cs\nvar bikeManualPrinter = new ManualPrinter();\nvar documentedBike = new DocumentedBicycle(new RoadBike(), \n                                          bikeManualPrinter);\ndocumentedBike.Build();\n```", "```cs\nConsole.WriteLine(\"+++++++++++++++++++++++++++++++++++++\");\n```", "```cs\nvar manufacturingInventoryNotifier = new MaterialsInventory\n    Notifier();\n```", "```cs\nvar notifierBike = new NotifyingBicycle(new RoadBike(), \n    manufacturingInventoryNotifier);\n```", "```cs\nnotifierBike.Build();\nConsole.WriteLine(\"+++++++++++++++++++++++++++++++++++++\");\n```", "```cs\nvar notifyingDocumentedBike = new NotifyingBicycle(new \n    DocumentedBicycle(new RoadBike(), bikeManualPrinter), \n        manufacturingInventoryNotifier);\nnotifyingDocumentedBike.Build();\n```", "```cs\nvar notifyingDocumentedBike = new NotifyingBicycle(new \n    DocumentedBicycle(new RoadBike(), bikeManualPrinter), \n        manufacturingInventoryNotifier);\nnotifyingDocumentedBike.Build();\n```", "```cs\nvar notifyingDocumentedBike = new NotifyingBicycle(new \n    DocumentedBicycle(new RoadBike(), bikeManualPrinter),\nmanufacturingInventoryNotifier);\nnotifyingDocumentedBike.Build();\n```", "```cs\nvar notifyingDocumentedBike = new NotifyingBicycle(new \n    DocumentedBicycle(new RoadBike(), bikeManualPrinter), \n        manufacturingInventoryNotifier);\nnotifyingDocumentedBike.Build();\n```", "```cs\npublic enum ArmAttachments { Welder, Buffer, Grabber }\n```", "```cs\npublic class RobotArmFacade\n{\n  private readonly WelderAttachmentApi _welder;\n  private readonly BuffingApi _buffer;\n  private readonly GrabbingApi _grabber;\n  public ArmAttachments ActiveAttachment;\n```", "```cs\npublic RobotArmFacade(WelderAttachmentApi welder, \n    BuffingApi buffer, GrabbingApi grabber)\n  {\n    _welder = welder;\n    _buffer = buffer;\n    _grabber = grabber;\n    ActiveAttachment = ArmAttachments.Welder;\n  }\n```", "```cs\npublic void Actuate()\n  {\n    switch (ActiveAttachment)\n    {\n      case ArmAttachments.Buffer:\n        _buffer.Buff();\n        break;\n      case ArmAttachments.Grabber:\n        _grabber.Grab();\n        break;\n      case ArmAttachments.Welder:\n        _welder.Weld();\n        break;\n      default:\n        throw new ArgumentOutOfRangeException();\n    }\n  }\n```", "```cs\npublic void MoveTo(Quaternion quaternion)\n  {\n    var roundX = (int)Math.Round(quaternion.X, 0);\n    var roundY = (int)Math.Round(quaternion.Y, 0);\n    var roundZ = (int)Math.Round(quaternion.Z, 0);\n```", "```cs\n    switch (ActiveAttachment)\n    {\n      case ArmAttachments.Buffer:\n        _buffer.Position(quaternion);\n        break;\n      case ArmAttachments.Welder:\n        _welder.MoveTo(roundX, roundY, roundZ);\n        break;\n      case ArmAttachments.Grabber:\n        _grabber.SetLocation(roundX, roundY);\n        break;\n      default:\n        throw new ArgumentOutOfRangeException();\n    }\n  }\n```", "```cs\nconst int numberOfAssemblyStations = 20;\nconst float consistentY = 52.0f;\nconst float consistentZ = 128.0f;\nconst float consistentW = 90.0f;\n```", "```cs\nvar assemblyStations = new Quaternion\n    [numberOfAssemblyStations];\n```", "```cs\nfor (var i = 0; i < numberOfAssemblyStations; i++)\n{\n  var xPosition = i * 25.0f;\n  assemblyStations[i] = new Quaternion(xPosition, \n      consistentY, consistentZ, consistentW);\n}\n```", "```cs\nConsole.WriteLine(\"RobotArm 0: Robotic arm control system \n    activated!\");\nvar robotArm0 = new RobotArmFacade(new \n    WelderAttachmentApi(), new BuffingApi(), new \n        GrabbingApi());\nConsole.WriteLine(\"Initializing welder function in arm 0\");\nrobotArm0.ActiveAttachment = ArmAttachments.Welder;\nrobotArm0.MoveTo(assemblyStations[0]);\nrobotArm0.Actuate();\n```", "```cs\nConsole.WriteLine(\"Initializing buffer function in arm 0\");\nrobotArm0.ActiveAttachment = ArmAttachments.Buffer;\nrobotArm0.MoveTo(assemblyStations[3]);\nrobotArm0.Actuate();\n```", "```cs\nConsole.WriteLine(\"Initializing grabber function \n    in arm 0\");\nrobotArm0.ActiveAttachment = ArmAttachments.Grabber;\nrobotArm0.MoveTo(assemblyStations[7]);\nrobotArm0.Actuate();\n```", "```cs\npublic abstract class BicycleComponent\n{\n  private float Weight { get; set; }\n  private float Cost { get; set; }\n```", "```cs\n  public IList<BicycleComponent> SubComponents;\n```", "```cs\n  protected BicycleComponent(float weight, float cost)\n  {\n    SubComponents = new List<BicycleComponent>();\n    Weight = weight;\n    Cost = cost;\n  }\n```", "```cs\n  public void DisplayWeight()\n  {\n    if (SubComponents.Count <= 0) return;\n    foreach (var component in SubComponents)\n    {\n      Console.WriteLine(component.GetType().Name + \" weighs \n          \" + component.Weight);\n      component.DisplayWeight();\n    }\n  }\n```", "```cs\n  public void DisplayCost()\n  {\n    if (SubComponents.Count <= 0) return;\n    foreach (var component in SubComponents)\n    {\n      Console.WriteLine(component.GetType().Name + \" costs \n          $\" + component.Cost + \" USD\");\n      component.DisplayCost();\n    }\n  }\n}\n```", "```cs\npublic class Pedal : BicycleComponent\n{\n  public Pedal(float weight, float cost) : base(weight, \n    cost)\n  {\n  }\n}\npublic class CrankArm : BicycleComponent\n{\n  public CrankArm(float weight, float cost) : base(weight, \n    cost)\n  {\n  }\n}\npublic class LargeChainRing : BicycleComponent\n{\n  public LargeChainRing(float weight, float cost) : \n    base(weight, cost)\n  {\n  }\n}\n```", "```cs\nvar leftPedal = new Pedal(234.14f, 11.32f);\nvar rightPedal = new Pedal(234.14f, 11.32f);\n```", "```cs\nvar crankArm = new CrankArm(432.93f, 34.32f);\ncrankArm.SubComponents.Add(leftPedal);\ncrankArm.SubComponents.Add(rightPedal);\n```", "```cs\nvar largeChainRing = new LargeChainRing(57.0983f, 13.53f);\nvar smallChainRing = new SmallChainRing(52.57f, 11.33f);\nlargeChainRing.SubComponents.Add(smallChainRing);\nlargeChainRing.SubComponents.Add(crankArm);\n```", "```cs\nvar shaft = new Shaft(82.03f, 19.55f); // can you dig it?\nshaft.SubComponents.Add(largeChainRing);\n```", "```cs\nvar bottomBracket = new BottomBracket(284.834f, 11.51f);\nbottomBracket.SubComponents.Add(shaft);\n```", "```cs\nvar crankSet = new CrankSet(0f, 0f); \ncrankSet.SubComponents.Add(bottomBracket);\n```", "```cs\nConsole.WriteLine(\" ---------- Weights -----------------\");\ncrankSet.DisplayWeight();\nConsole.WriteLine(\" ------------ Cost ------------------\");\ncrankSet.DisplayCost();\n```", "```cs\npublic interface ISimplifiedBicycle\n{\n  public string ModelName { get; set; }\n  public int Year { get; }\n  public string SerialNumber { get; }\n  public BicycleGeometries Geometry { get; set; }\n  public SuspensionTypes Suspension { get; set; }\n  public ManufacturingStatus BuildStatus { get; set; }\n  public void Build();\n}\n```", "```cs\npublic interface IPaintJob\n{\n  public string Name { get; set; }\n  public int Cyan { get; set; }\n  public int Magenta { get; set; }\n  public int Yellow { get; set; }\n  public int Black { get; set; }\n  public IPrimer Primer { get; set; }\n  public IPaintTopCoat TopCoat { get; set; }\n  public void ApplyPrimer();\n  public void ApplyPaint();\n  public void ApplyTopCoat();\n}\n```", "```cs\npublic enum PaintTopCoatTypes { TopCoatClear, GlamorClear, \n    TurboClear, HigherSolidClear }\npublic interface IPaintTopCoat\n{\n  public string Name { get; set; }\n  public PaintTopCoatTypes Type { get; set; }\n}\n```", "```cs\npublic enum PrimerColors { Gray, White, Black }\npublic enum PrimerTypes {Epoxy, Urethane, Polyester, \n    AcidEtch, Enamel, Lacquer, MoistureCure}\npublic interface IPrimer\n{\n  public string ManufacturerStockKeepingUnit { get; set; }\n  public PrimerTypes Type { get; set; }\n  public bool IsLowVoc { get; set; }\n}\n```", "```cs\npublic interface IPaintableBicycle : ISimplifiedBicycle\n{\n IPaintJob PaintJob { get; set; } \n}\n```", "```cs\npublic abstract class PaintableBicycle : IPaintableBicycle\n{\n  public string ModelName { get; set; }\n  public int Year { get; }\n  public string SerialNumber { get; }\n  public BicycleGeometries Geometry { get; set; }\n  public SuspensionTypes Suspension { get; set; }\n  public ManufacturingStatus BuildStatus { get; set; }\n  public IPaintJob PaintJob { get; set; }\n```", "```cs\n public void Build()\n  {\n    Console.WriteLine($\"Manufacturing a \n        {Geometry.ToString()} frame...\");\n    BuildStatus = ManufacturingStatus.FrameManufactured;\n    PrintBuildStatus();\n\n    Console.WriteLine($\"Painting the frame \n                     {PaintJob.Name}\");\n```", "```cs\n    PaintJob.ApplyPrimer();\n    PaintJob.ApplyPaint();\n    PaintJob.ApplyTopCoat();\n    BuildStatus = ManufacturingStatus.Painted;\n    PrintBuildStatus();\n```"]