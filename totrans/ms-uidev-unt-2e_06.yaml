- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: User Interface and Input Systems in Unity
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we’ve discussed various design considerations for developing user interfaces,
    we can start discussing how to implement them within Unity. Unity provides various
    systems for creating UI. It has systems in place that allow you to create a UI
    that will be displayed in your game, or UI that will be displayed only in the
    Editor. Additionally, it provides multiple systems for receiving input from the
    player.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing, two of these systems are still in active development
    and do not come packaged in Unity by default. This book will primarily focus on
    development with the systems that are complete, but since Unity does intend to
    make these systems standard features at some point, I would be remiss not to discuss
    them just because they are still in **preview**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will discuss the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Identifying UI Toolkit, Unity UI, and IMGUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between the three UI systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identifying the Input Manager and the Input System
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Choosing between the Input Manager and the Input System
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by looking at the three UI systems within Unity.
  prefs: []
  type: TYPE_NORMAL
- en: The three UI systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity has three systems that can be used to build UI. Which you choose will
    depend on where your UI will be displayed, what you are trying to accomplish,
    whether you’re working on a pre-existing project, and how comfortable you are
    with coding.
  prefs: []
  type: TYPE_NORMAL
- en: The UI you build can either be in-game or in-Editor. In-game UI is the UI that
    can be accessed by your players. In-Editor UI is UI that displays within the Unity
    Editor and assists with development.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to build UI for your game or application, you can choose between
    the Unity UI (uGUI) system or the UI Toolkit. If you want to build UI that appears
    in your Unity Editor, you can use either the UI Toolkit or IMGUI. The following
    Venn diagram summarizes the uses of the different UI systems:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1: A comparison of in-game and in-Editor UI](img/Figure_5.01_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: A comparison of in-game and in-Editor UI'
  prefs: []
  type: TYPE_NORMAL
- en: Looking at *Figure 5**.1*, you may be thinking, “Well, UI Toolkit works for
    everything! I’m just going to learn that and be done with my UI learning journey!
    That was an easy choice!” Well, unfortunately, it’s not that simple. Let’s look
    at the different systems a little more in-depth so that you can decide which is
    right for you.
  prefs: []
  type: TYPE_NORMAL
- en: Unity UI (or uGUI)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Unity UI** system, also known as **uGUI**, is the system that is built
    into Unity *out of the box* and doesn’t require any additional downloads. It is
    GameObject and Component-based and includes multiple types of UI elements to choose
    from. When it comes to developing UI for a game or application, this is the most
    robust and stable option. Since this is the only system for building in-game UI
    that is not in preview mode and is included within Unity, the majority of this
    text will focus on how to develop UI using this system.
  prefs: []
  type: TYPE_NORMAL
- en: IMGUI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **IMGUI**, or **Immediate Mode GUI**, system is a code-based GUI system
    used to make interfaces within the editor. Its primary function is to assist programmers
    with development, and it is not recommended for the development of in-game UI
    due to performance issues. Due to the fact that this system is not intended to
    be used in-game and this book will primarily concern itself with UI development
    for games, I won’t spend a significant amount of time covering it, but I will
    discuss some of its basic functionality and usage in [*Chapter 19*](B18327_19.xhtml#_idTextAnchor501).
  prefs: []
  type: TYPE_NORMAL
- en: UI Toolkit
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**UI Toolkit** is a new UI system that is in active development. It is not
    included within the engine by default and must be downloaded with the Package
    Manager. Additionally, it is a preview package, which means you have to elect
    to even see it in the list of available packages provided by Unity. Unity does
    plan on replacing both uGUI and IMGUI with UI Toolkit eventually. UI Toolkit is
    being designed with traditional web-development concepts and is structured entirely
    differently than the GameObject-based uGUI. In [*Chapter 18*](B18327_18.xhtml#_idTextAnchor481),
    I will cover how to download the UI Toolkit package and how to work with it.'
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between the UI systems
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Which system you choose to use is going to depend on a few things. As discussed
    earlier, whether you are making UI for the Editor or a game will determine which
    system you choose. If you’re working on UI for a game, you can use Unity UI or
    UI Toolkit. If you’re working on UI for the Editor, you can use IMGUI or UI Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: UI Toolkit is a new system that is not fully implemented, so if you are working
    on a pre-existing game with UI already in place, you probably won’t be using UI
    Toolkit. It also may not have all the features you are looking to work with. Because
    UI Toolkit is in development, it is not guaranteed to be stable, and updating
    it mid-development may adversely affect your project.
  prefs: []
  type: TYPE_NORMAL
- en: Your comfort with coding could also drive your decision. In general, the coding
    required to use Unity UI is less intensive than IMGUI and may be more familiar
    to you than UI Toolkit, since it is GameObject-based. However, if you are familiar
    with web-based UI creation, UI Toolkit may seem really familiar to you.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are considering using the UI Toolkit, I recommend reviewing the examples
    in this book, as well as the following Unity documentation page, before you make
    your decision on which system to use: [https://docs.unity3d.com/Manual/UI-system-compare.xhtml](https://docs.unity3d.com/Manual/UI-system-compare.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed the three UI systems provided by Unity, we can review
    the two input systems.
  prefs: []
  type: TYPE_NORMAL
- en: The two input systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As defined in [*Chapter 1*](B18327_01.xhtml#_idTextAnchor014), **UI** stands
    for **user interface** and encompasses all mechanisms by which the user and the
    game convey information to each other. When discussing the three UI systems, we
    talked about three ways in which the game communicates with the user – specifically
    through the use of GUI on an output device (i.e., a screen). However, if the user
    wants to communicate with the game, the user will have to have some means through
    which they can provide input. The game will then need to process that input.
  prefs: []
  type: TYPE_NORMAL
- en: There are two core ways in which Unity can handle input. The **Input Manager**
    or the **Input System**. Just as there are varying factors that would determine
    which UI system you may use, there are also varying factors that can help you
    determine which input system to use. Both systems allow you to easily process
    multiple types of input as if they are the same thing. For example, each system
    will let you process a keyboard space bar and an Xbox controller A button as if
    they are the same type of input. How they do that will be discussed more thoroughly
    in later chapters, but for now, let’s just look at the general differences between
    the two.
  prefs: []
  type: TYPE_NORMAL
- en: The Input Manager
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Input Manager is the input system that comes with Unity by default and does
    not require any additional package downloads. Without having to configure any
    settings, you can easily accept input from things such as a keyboard, mouse, joystick,
    or touchscreen. It achieves this by providing pre-defined *input axes* that essentially
    specify keywords and buttons that bind to them. We will review how this functions
    more thoroughly in [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147).
  prefs: []
  type: TYPE_NORMAL
- en: The new Input System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Input System (colloquially referred to as *the new Input System*) is a
    package that is currently in development and is, as Unity states in its documentation,
    *intended to be more powerful, flexible, and configurable* than the Input Manager:
    [https://docs.unity3d.com/Packages/com.unity.inputsystem@1.3/manual/index.xhtml](mailto:https://docs.unity3d.com/Packages/com.unity.inputsystem@1.3/manual/index.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: If you have been working on a project that is using the Input Manager, it is
    possible to convert your project to one that uses the new Input System. We will
    discuss how to implement the Input System in [*Chapter 20*](B18327_20.xhtml#_idTextAnchor513).
  prefs: []
  type: TYPE_NORMAL
- en: Choosing between the Input System and the new Input System
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let me start by saying there’s not necessarily a right answer on which system
    you choose. You can theoretically process any type of input you wish with either
    system. Which you choose will primarily be based on preference, how complicated
    your project’s set of inputs is, and whether you are developing for multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not planning on allowing your player to remap controls (as discussed
    in [*Chapter 4*](B18327_04.xhtml#_idTextAnchor054)) or are not planning on cross-platform
    development, you are probably fine with using the Input Manager and don’t need
    to go through the process of downloading the Input System. However, if you want
    to have ultra-configurable control schemes, accept inputs from a variety of devices,
    and accept complicated input actions, you will likely find it easier to write
    the code that processes these inputs using the Input System than you would using
    the Input Manager.
  prefs: []
  type: TYPE_NORMAL
- en: Since the Input Manager is used in so many projects that are currently in development,
    I would be doing you a disservice to completely omit it just because it is not
    the *new hot*. Additionally, the new Input System is still new and still in active
    development, so it is subject to drastic changes with each update. However, it
    does make some things significantly easier to build and is gaining traction in
    popularity among developers. Therefore, I will not choose just one of these systems
    to focus on in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity provides multiple ways in which you can display information to your user
    through the use of three UI systems. Which you choose depends on your needs and
    whether you are developing UI for a game or the Editor. This book will primarily
    focus on uGUI, since it is the most stable UI version used for in-game development
    and is provided within Unity, without additional downloads. However, how you can
    use IMGUI to develop Editor UI and the UI Toolkit to use both Editor UI and in-game
    UI will be discussed in the later chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Unity also provides multiple ways in which you can process inputs from a user.
    While the new Input System is still in development and does not come with Unity
    by default, I will make sure to give you enough information to use it in your
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start developing UI using the uGUI system, by exploring
    UI Canvases, Panels, and layouts.
  prefs: []
  type: TYPE_NORMAL
