["```cs\ndotnet new webapi -n ModelBinderSample -o ModelBinderSample\n```", "```cs\ncd ModelBinderSample\ncode .\n```", "```cs\nId,FirstName,LastName,Age,EmailAddress,Address,City,Phone\n48,Austin,Ward,49,Jake.Timms@live.com,\"8814 Gravesend Neck Road \",Daly City,(620) 260-4410\n2,Sierra,Smith,15,Elizabeth.Wright@hotmail.com,\"1199 Marshall Street \",Whittier,(655) 379-4362\n27,Victorina,Radcliff,40,Bryce.Sanders@rogers.ca,\"2663 Sutton Street \",Bloomington,(255) 365-0521\n78,Melissa,Brandzin,39,Devin.Wright@telus.net,\"7439 Knight Court \",Tool,(645) 343-2144\n89,Kathryn,Perry,87,Hailey.Jenkins@hotmail.com,\"5283 Vanderbilt Street \",Carlsbad,(747) 369-4849\n```", "```cs\n    namespace ModelBinderSample.Controllers\n    {\n        [Route(\"[controller]\")]\n        [ApiController]\n        public class PersonsController : ControllerBase\n        {\n            public ActionResult<object> Post(\n                IEnumerable<Person> persons)\n            {\n                return new\n                {\n                    ItemsRead = persons.Count(),\n                    Persons = persons\n                };\n            }\n        }\n    }\n    ```", "```cs\n    public class Person\n    {\n        public int Id { get; set; }\n        public string? FirstName { get; set; }\n        public string? LastName { get; set; }\n        public int Age { get; set; }\n        public string? EmailAddress { get; set; }\n        public string? Address { get; set; }\n        public string? City { get; set; }\n        public string? Phone { get; set; }\n    } \n    ```", "```cs\n    System.Linq.Async package is needed to handle the IAsyncEnumerable that gets returned by the GetRecordsAsync() method.\n    ```", "```cs\npublic class PersonsCsvBinder : IModelBinder\n{\n    public async Task BindModelAsync(\n        ModelBindingContext bindingContext)\n    {\n        if (bindingContext == null)\n        {\n            return;\n        }\n        var modelName = bindingContext.ModelName;\n        if (String.IsNullOrEmpty(modelName))\n        {\n            modelName = bindingContext.OriginalModelName;\n        }\n        if (String.IsNullOrEmpty(modelName))\n        {\n            return;\n        }\n```", "```cs\n        var valueProviderResult = \n          bindingContext.ValueProvider.GetValue(modelName);\n        if (valueProviderResult == ValueProviderResult.None)\n        {\n            return;\n        }\n```", "```cs\n        bindingContext.ModelState.SetModelValue(\n            modelName, valueProviderResult);\n        var value = valueProviderResult.FirstValue;\n        // Check if the argument value is null or empty\n        if (String.IsNullOrEmpty(value))\n        {\n            return;\n        }\n```", "```cs\n        var stringReader = new StringReader(value);\n        var reader = new CsvReader(\n            stringReader, CultureInfo.InvariantCulture);\n```", "```cs\n        var asyncModel = reader.GetRecordsAsync<Person>();\n        var model = await asyncModel.ToListAsync();\n        bindingContext.Result = \n           ModelBindingResult.Success(model);\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\nusing System.IO;\nusing CsvHelper\nusing System.Globalization;\n```", "```cs\n[HttpPost]\npublic ActionResult<object> Post(\n    [ModelBinder(binderType: typeof(PersonsCsvBinder))]\n    IEnumerable<Person> persons)\n{\n    return new\n    {\n        ItemsRead = persons.Count(),\n        Persons = persons\n    };\n} \n```", "```cs\n    Id,FirstName,LastName,Age,EmailAddress,Address,City,Phone\n    48,Austin,Ward,49,Jake.Timms@live.com,\"8814 Gravesend Neck Road \",Daly City,(620) 260-4410\n    2,Sierra,Smith,15,Elizabeth.Wright@hotmail.com,\"1199 Marshall Street \",Whittier,(655) 379-4362\n    27,Victorina,Radcliff,40,Bryce.Sanders@rogers.ca,\"2663 Sutton Street \",Bloomington,(255) 365-0521\n    ```"]