["```cs\n    namespace Chapter2\n    {\n        public class Recipes\n        {\n        }\n    }\n    ```", "```cs\n    namespace Chapter2\n    {\n        public abstract class Cat\n        {\n        }\n    }\n    ```", "```cs\n        public abstract class Cat\n        {\n            public abstract void Eat();\n            public abstract void Hunt();\n            public abstract void Sleep();\n        }\n    ```", "```cs\n    public class Lion\n    {\n\n    }\n    ```", "```cs\n    public class Lion : Cat\n    {\n\n    }\n    ```", "```cs\n    public class Lion : Cat\n    {\n        public override void Eat()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Hunt()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Sleep()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    using static System.Console;\n    ```", "```cs\n    public override void Eat()\n    {\n        WriteLine($\"The {LionColor} lion eats.\");\n    }\n\n    public override void Hunt()\n    {\n        WriteLine($\"The {LionColor} lion hunts.\");\n    }\n\n    public override void Sleep()\n    {\n        WriteLine($\"The {LionColor} lion sleeps.\");\n    }\n    ```", "```cs\n    public class Tiger : Cat\n    {\n        public override void Eat()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Hunt()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Sleep()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public override void Eat()\n    {\n        WriteLine($\"The {TigerColor} tiger eats.\");\n    }\n\n    public override void Hunt()\n    {\n        WriteLine($\"The {TigerColor} tiger hunts.\");\n    }\n\n    public override void Sleep()\n    {\n        WriteLine($\"The {TigerColor} tiger sleeps.\");\n    }\n    ```", "```cs\n    public enum ColorSpectrum { Brown, White }\n    public string LionColor { get; set; }\n    ```", "```cs\n    public Lion(ColorSpectrum color)\n    {\n        LionColor = color.ToString();\n    }\n    ```", "```cs\n    public enum ColorSpectrum { Orange, White, Gold, Blue, Black }\n    public string TigerColor { get; set; }\n    ```", "```cs\n    public Tiger(ColorSpectrum color)\n    {\n        TigerColor = color.ToString();\n    }\n    ```", "```cs\n    Lion lion = new Lion(Lion.ColorSpectrum.White);\n    lion.Hunt();\n    lion.Eat();\n    lion.Sleep();\n\n    Tiger tiger = new Tiger(Tiger.ColorSpectrum.Blue);\n    tiger.Hunt();\n    tiger.Eat();\n    tiger.Sleep();\n\n    Console.ReadLine();\n    ```", "```cs\n    public abstract class Cat\n    {\n        public abstract void Eat();\n        public abstract void Hunt();\n        public abstract void Sleep();\n    }\n    ```", "```cs\n    public class Cheetah : Cat\n    {\n\n    }\n    ```", "```cs\n    public class Cheetah : Cat\n    {\n        public override void Eat()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Hunt()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Sleep()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public class Cheetah : Cat\n    {\n        public override void Eat()\n        {\n            WriteLine($\"The cheetah eats.\");\n        }\n\n        public override void Hunt()\n        {\n            WriteLine($\"The cheetah hunts.\");\n        }\n\n        public override void Sleep()\n        {\n            WriteLine($\"The cheetah sleeps.\");\n        }\n    }\n    ```", "```cs\n    interface IPurrable\n    {\n\n    }\n    ```", "```cs\n    interface IPurrable\n    {\n        void SoftPurr(int decibel);\n    }\n    ```", "```cs\n    public class Cheetah : Cat, IPurrable\n    {\n        public override void Eat()\n        {\n            WriteLine($\"The cheetah eats.\");\n        }\n\n        public override void Hunt()\n        {\n            WriteLine($\"The cheetah hunts.\");\n        }\n\n        public override void Sleep()\n        {\n            WriteLine($\"The cheetah sleeps.\");\n        }\n    }\n    ```", "```cs\n    public class Cheetah : Cat, IPurrable\n    {\n        public void SoftPurr(int decibel)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Eat()\n        {\n            WriteLine($\"The cheetah eats.\");\n        }\n\n        public override void Hunt()\n        {\n            WriteLine($\"The cheetah hunts.\");\n        }\n\n        public override void Sleep()\n        {\n            WriteLine($\"The cheetah sleeps.\");\n        }\n    }\n    ```", "```cs\n    public class Cheetah : Cat, IPurrable\n    {\n        public int SoftPurr { get; set; }\n\n        public void SoftPurr(int decibel)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Eat()\n        {\n            WriteLine($\"The cheetah eats.\");\n        }\n\n        public override void Hunt()\n        {\n            WriteLine($\"The cheetah hunts.\");\n        }\n\n        public override void Sleep()\n        {\n            WriteLine($\"The cheetah sleeps.\");\n        }        \n    }\n    ```", "```cs\n    public class Cheetah : Cat, IPurrable\n    {\n        public int SoftPurr { get; set; }\n\n        void IPurrable.SoftPurr(int decibel)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Eat()\n        {\n            WriteLine($\"The cheetah eats.\");\n        }\n\n        public override void Hunt()\n        {\n            WriteLine($\"The cheetah hunts.\");\n        }\n\n        public override void Sleep()\n        {\n            WriteLine($\"The cheetah sleeps.\");\n        }        \n    }\n    ```", "```cs\n    public void SoftPurr(int decibel)\n    {\n        WriteLine($\"The {nameof(Cheetah)} purrs at {decibel} decibels.\");\n    }\n    ```", "```cs\n    Cheetah cheetah = new Cheetah();\n    cheetah.Hunt();\n    cheetah.Eat();\n    cheetah.Sleep();\n    cheetah.SoftPurr(60);\n    Console.ReadLine();\n    ```", "```cs\n    public class PerformAction<T>\n    {\n\n    }\n    ```", "```cs\n    public class PerformAction<T>\n    {\n        private T _value;\n    }\n    ```", "```cs\n    public class PerformAction<T>\n    {\n        private T _value;\n\n        public PerformAction(T value)\n        {\n            _value = value;\n        }\n    }\n    ```", "```cs\n    public class PerformAction<T>\n    {\n        private T _value;\n\n        public PerformAction(T value)\n        {\n            _value = value;\n        }\n\n        public void IdentifyDataType()\n        {\n            WriteLine($\"The data type of the supplied variable is {_value.GetType()}\");\n        }\n    }\n    ```", "```cs\n    PerformAction<int> iAction = new PerformAction<int>(21);\n    iAction.IdentifyDataType();\n\n    PerformAction<decimal> dAction = new PerformAction<decimal>(21.55m);\n    dAction.IdentifyDataType();\n\n    PerformAction<string> sAction = new PerformAction<string>(\"Hello Generics\");\n    sAction.IdentifyDataType();                        \n\n    Console.ReadLine();\n    ```", "```cs\n    public class PerformAction<T> where T : IDisposable\n    {\n        private T _value;\n\n        public PerformAction(T value)\n        {\n            _value = value;\n        }\n\n        public void IdentifyDataType()\n        {\n            WriteLine($\"The data type of the supplied variable is {_value.GetType()}\");\n        }\n    }\n    ```", "```cs\n    DataSet dsData = new DataSet();\n    PerformAction<DataSet> oAction = new PerformAction<DataSet>(dsData);\n    oAction.IdentifyDataType();\n    ```", "```cs\n    public class MyHelperClass\n    {\n    }\n    ```", "```cs\n    public class MyHelperClass\n    {\n        public T InspectType<T>(T value) \n        {\n\n        }\n    }\n    ```", "```cs\n    public class MyHelperClass\n    {\n        public T InspectType<T>(T value) \n        {\n            WriteLine($\"The data type of the supplied parameter is {value.GetType()}\");\n\n            return (T)value;\n        }\n    }\n    ```", "```cs\n    public enum MyEnum { Value1, Value2, Value3 }\n    ```", "```cs\n    MyHelperClass oHelper = new MyHelperClass();\n    var intExample = oHelper.InspectType(25);\n    Console.WriteLine($\"An example of this type is {intExample}\");\n\n    var decExample = oHelper.InspectType(11.78m);\n    Console.WriteLine($\"An example of this type is {decExample}\");\n\n    var strExample = oHelper.InspectType(\"Hello Generics\");\n    Console.WriteLine($\"An example of this type is {strExample}\");\n\n    var enmExample = oHelper.InspectType(MyEnum.Value2);\n    Console.WriteLine($\"An example of this type is {enmExample}\");\n\n    Console.ReadLine();\n    ```", "```cs\n    interface IListClassProperties<T>\n    {\n        List<string> GetPropertyList();\n    }\n    ```", "```cs\n    public class InspectClass<T> : IListClassProperties<T>\n    {\n\n    }\n    ```", "```cs\n    public class InspectClass<T> : IListClassProperties<T>\n    {\n        public List<string> GetPropertyList()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public class InspectClass<T> : IListClassProperties<T>\n    {\n        T _classToInspect;\n        public InspectClass(T classToInspect)\n        {\n            _classToInspect = classToInspect;\n        }\n\n        public List<string> GetPropertyList()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public List<string> GetPropertyList()\n    {\n        return _classToInspect.GetType().GetProperties().Select(p => p.Name).ToList();\n    }\n    ```", "```cs\n    public class Invoice\n    {\n        public int ID { get; set; }\n        public decimal TotalValue { get; set; }\n        public int LineNumber { get; set; }\n        public string StockItem { get; set; }\n        public decimal ItemPrice { get; set; }\n        public int Qty { get; set; }\n    }\n    ```", "```cs\n    Invoice oInvoice = new Invoice();\n    InspectClass<Invoice> oClassInspector = new InspectClass<Invoice>(oInvoice);\n    List<string> lstProps = oClassInspector.GetPropertyList();\n\n    foreach(string property in lstProps)\n    {\n        Console.WriteLine(property);\n    }\n    Console.ReadLine();\n    ```", "```cs\n    InspectClass<int> oClassInspector = new InspectClass<int>(10);\n    List<string> lstProps = oClassInspector.GetPropertyList();\n    foreach (string property in lstProps)\n    {\n        Console.WriteLine(property);\n    }\n    Console.ReadLine();\n    ```", "```cs\n    public class InspectClass<T> : IListClassProperties<T> where T : class\n    {\n        T _classToInspect;\n        public InspectClass(T classToInspect)\n        {\n            _classToInspect = classToInspect;\n        }\n\n        public List<string> GetPropertyList()\n        {\n            return _classToInspect.GetType().GetProperties().Select(p => p.Name).ToList();\n        }\n    }\n    ```", "```cs\n    public abstract class AcmeObject\n    {\n        public abstract int ID { get; set; }\n    }\n    ```", "```cs\n    public class InspectClass<T> : IListClassProperties<T> where T : AcmeObject\n    {\n        T _classToInspect;\n        public InspectClass(T classToInspect)\n        {\n            _classToInspect = classToInspect;\n        }\n\n        public List<string> GetPropertyList()\n        {\n            return _classToInspect.GetType().GetProperties().Select(p => p.Name).ToList();\n        }\n    }\n    ```", "```cs\n    public class Invoice : AcmeObject\n    {\n        public override int ID { get; set; }\n        public decimal TotalValue { get; set; }\n        public int LineNumber { get; set; }\n        public string StockItem { get; set; }\n        public decimal ItemPrice { get; set; }\n        public int Qty { get; set; }            \n    }\n    ```", "```cs\n    public class SalesOrder : AcmeObject\n    {\n        public override int ID { get; set; }\n        public decimal TotalValue { get; set; }\n        public int LineNumber { get; set; }\n        public string StockItem { get; set; }\n        public decimal ItemPrice { get; set; }\n        public int Qty { get; set; }\n    }\n\n    public class CreditNote\n    {\n        public int ID { get; set; }\n        public decimal TotalValue { get; set; }\n        public int LineNumber { get; set; }\n        public string StockItem { get; set; }\n        public decimal ItemPrice { get; set; }\n        public int Qty { get; set; }\n    }\n    ```", "```cs\n    Invoice oInvoice = new Invoice();\n    InspectClass<Invoice> oInvClassInspector = new InspectClass<Invoice>(oInvoice);\n    List<string> invProps = oInvClassInspector.GetPropertyList();\n\n    foreach (string property in invProps)\n    {\n        Console.WriteLine(property);\n    }\n    Console.ReadLine();\n    SalesOrder oSalesOrder = new SalesOrder();\n    InspectClass<SalesOrder> oSoClassInspector = new InspectClass<SalesOrder>(oSalesOrder);\n    List<string> soProps = oSoClassInspector.GetPropertyList();\n\n    foreach (string property in soProps)\n    {\n        Console.WriteLine(property);\n    }\n    Console.ReadLine();\n    ```"]