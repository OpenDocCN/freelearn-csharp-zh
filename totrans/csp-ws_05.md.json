["```cs\n    source>dotnet new console -o Chapter05\n    ```", "```cs\n    using System;\n    using System.Threading;\n    namespace Chapter05\n    {\n    ```", "```cs\n        public static class Logger\n        {\n    ```", "```cs\n            public static void Log(string message)\n            {\n                Console.WriteLine($\"{DateTime.Now:T} [{Thread.CurrentThread.ManagedThreadId:00}] {message}\");\n            }\n        }\n    }\n    ```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    namespace Chapter05.Examples\n    {\n        class TaskExamples\n        {\n    ```", "```cs\n            public static void Main()\n            {\n                Logger.Log(\"Creating taskA\");\n    ```", "```cs\n                var taskA = new Task(() =>\n                {\n                    Logger.Log(\"Inside taskA\");\n                    Thread.Sleep(TimeSpan.FromSeconds(5D));\n                    Logger.Log(\"Leaving taskA\");\n                });\n    ```", "```cs\n                Logger.Log($\"Starting taskA. Status={taskA.Status}\");\n                taskA.Start();\n                Logger.Log($\"Started taskA. Status={taskA.Status}\");\n                Console.ReadLine();\n            }\n        }\n    } \n    ```", "```cs\n    10:47:34 [01] Creating taskA\n    10:47:34 [01] Starting taskA. Status=Created\n    10:47:34 [01] Started taskA. Status=WaitingToRun\n    10:47:34 [03] Inside taskA\n    10:47:39 [03] Leaving taskA\n    ```", "```cs\nvar taskB = Task.Factory.StartNew((() =>\n{\n  Logger.Log(\"Inside taskB\");\n  Thread.Sleep(TimeSpan.FromSeconds(3D));\n  Logger.Log(\"Leaving taskB\");\n}));\nLogger.Log($\"Started taskB. Status={taskB.Status}\");\nConsole.ReadLine();\n```", "```cs\n21:37:42 [01] Started taskB. Status=WaitingToRun\n21:37:42 [03] Inside taskB\n21:37:45 [03] Leaving taskB\n```", "```cs\nvar taskC = Task.Run(() =>\n{\n  Logger.Log(\"Inside taskC\");\n  Thread.Sleep(TimeSpan.FromSeconds(1D));\n  Logger.Log(\"Leaving taskC\");\n  });\nLogger.Log($\"Started taskC. Status={taskC.Status}\");\nConsole.ReadLine();\n```", "```cs\n21:40:27 [03] Inside taskC\n21:40:27 [01] Started taskC. Status=WaitingToRun\n21:40:28 [03] Leaving taskC\n```", "```cs\n21:45:52 [01] Creating taskA\n21:45:52 [01] Starting taskA. Status=Created\n21:45:52 [01] Started taskA. Status=WaitingToRun\n21:45:52 [01] Started taskB. Status=WaitingToRun\n21:45:52 [01] Started taskC. Status=WaitingToRun\n21:45:52 [04] Inside taskB\n21:45:52 [03] Inside taskA\n21:45:52 [05] Inside taskC\n21:45:53 [05] Leaving taskC\n21:45:55 [04] Leaving taskB\n21:45:57 [03] Leaving taskA\n```", "```cs\n    using System;\n    using System.Globalization;\n    using System.Threading;\n    using System.Threading.Tasks;\n    namespace Chapter05.Exercises.Exercise01\n    {\n      class Program\n      {\n            private static long Fibonacci(int n)\n            {\n                if (n <= 2L)\n                    return 1L;\n                return Fibonacci(n - 1) + Fibonacci(n - 2);\n            }\n    ```", "```cs\n            public static void Main()\n            {\n                string input;\n                do\n                {\n                    Console.WriteLine(\"Enter number:\");\n                    input = Console.ReadLine();\n                    if (!string.IsNullOrEmpty(input) &&                     int.TryParse(input, NumberStyles.Any, CultureInfo.CurrentCulture, out var number))\n    ```", "```cs\n                     {\n                        Task.Run(() =>\n                        {\n                            var now = DateTime.Now;\n                            var fib = Fibonacci(number);\n                            var duration = DateTime.Now.Subtract(now);\n                            Logger.Log($\"Fibonacci {number:N0} = {fib:N0} (elapsed time: {duration.TotalSeconds:N0} secs)\");\n                        });\n                    } \n    ```", "```cs\n                 } while (input != string.Empty);\n            }\n        }\n    }\n    ```", "```cs\n    Enter number:1\n    Enter number:2\n    11:25:11 [04] Fibonacci 1 = 1 (elapsed time: 0 secs)\n    Enter number:45\n    11:25:12 [04] Fibonacci 2 = 1 (elapsed time: 0 secs)\n    Enter number:44\n    Enter number:43\n    Enter number:42\n    Enter number:41\n    Enter number:40\n    Enter number:10\n    11:25:35 [08] Fibonacci 41 = 165,580,141 (elapsed time: 4 secs)\n    11:25:35 [09] Fibonacci 40 = 102,334,155 (elapsed time: 2 secs)\n    11:25:36 [07] Fibonacci 42 = 267,914,296 (elapsed time: 6 secs)\n    Enter number: 39\n    11:25:36 [09] Fibonacci 10 = 55 (elapsed time: 0 secs)\n    11:25:37 [05] Fibonacci 43 = 433,494,437 (elapsed time: 9 secs)\n    11:25:38 [06] Fibonacci 44 = 701,408,733 (elapsed time: 16 secs)\n    Enter number:38\n    11:25:44 [06] Fibonacci 38 = 39,088,169 (elapsed time: 1 secs)\n    11:25:44 [05] Fibonacci 39 = 63,245,986 (elapsed time: 2 secs)\n    11:25:48 [04] Fibonacci 45 = 1,134,903,170 (elapsed time: 27 secs)\n    ```", "```cs\nTaskWaitAnyExample.cs\n1    var outerTask = Task.Run( () =>\n2    {\n3        Logger.Log(\"Inside outerTask\");\n4        var inner1 = Task.Run(() =>\n5        {\n6            Logger.Log(\"Inside inner1\");\n7            Thread.Sleep(TimeSpan.FromSeconds(3D));\n8        });\n9        var inner2 = Task.Run(() =>\n10        {\n11            Logger.Log(\"Inside inner2\");\n12            Thread.Sleep(TimeSpan.FromSeconds(2D));\n13        });\n14\n15        Logger.Log(\"Calling WaitAny on outerTask\");\nYou can find the complete code here: http://packt.link/CicWk.\n```", "```cs\n15:47:43 [04] Inside outerTask\n15:47:43 [01] Press ENTER\n15:47:44 [04] Calling WaitAny on outerTask\n15:47:44 [05] Inside inner1\n15:47:44 [06] Inside inner2\n15:47:46 [04] Waitany index=1\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks;\n    namespace Chapter05.Exercises.Exercise02\n    {\n        class Program\n        {\n            public static void Main()\n            {\n                Logger.Log(\"Starting\");\n    ```", "```cs\n                var taskA = Task.Run( () =>\n                {\n                    Logger.Log(\"Inside TaskA\");\n                    Thread.Sleep(TimeSpan.FromSeconds(5));\n                    Logger.Log(\"Leaving TaskA\");\n                    return \"All done A\";\n                });\n    ```", "```cs\n                var taskB = Task.Run(TaskBActivity);\n                var taskC = Task.Run(TaskCActivity);\n    ```", "```cs\n                var timeout = TimeSpan.FromSeconds(new Random().Next(1, 10));\n                Logger.Log($\"Waiting max {timeout.TotalSeconds} seconds...\");\n    ```", "```cs\n                var allDone = Task.WaitAll(new[] {taskA, taskB, taskC}, timeout);\n                Logger.Log($\"AllDone={allDone}: TaskA={taskA.Status}, TaskB={taskB.Status}, TaskC={taskC.Status}\");\n                Console.WriteLine(\"Press ENTER to quit\");\n                Console.ReadLine();\n            }\n    ```", "```cs\n            private static string TaskBActivity()\n            {\n                Logger.Log($\"Inside {nameof(TaskBActivity)}\");\n                Thread.Sleep(TimeSpan.FromSeconds(2));\n                Logger.Log($\"Leaving {nameof(TaskBActivity)}\");\n                return \"\";\n            }\n            private static void TaskCActivity()\n            {\n                Logger.Log($\"Inside {nameof(TaskCActivity)}\");\n                Thread.Sleep(TimeSpan.FromSeconds(1));\n                Logger.Log($\"Leaving {nameof(TaskCActivity)}\");\n            }\n        }\n    }\n    ```", "```cs\n    14:46:28 [01] Starting\n    14:46:28 [04] Inside TaskBActivity\n    14:46:28 [05] Inside TaskCActivity\n    14:46:28 [06] Inside TaskA\n    14:46:28 [01] Waiting max 7 seconds...\n    14:46:29 [05] Leaving TaskCActivity\n    14:46:30 [04] Leaving TaskBActivity\n    14:46:33 [06] Leaving TaskA\n    14:46:33 [01] AllDone=True: TaskA=RanToCompletion, TaskB=RanToCompletion, TaskC=RanToCompletion\n    Press ENTER to quit\n    ```", "```cs\n    14:48:20 [01] Starting\n    14:48:20 [01] Waiting max 2 seconds...\n    14:48:20 [05] Inside TaskCActivity\n    14:48:20 [06] Inside TaskA\n    14:48:20 [04] Inside TaskBActivity\n    14:48:21 [05] Leaving TaskCActivity\n    14:48:22 [04] Leaving TaskBActivity\n    14:48:22 [01] AllDone=False: TaskA=Running, TaskB=Running, TaskC=RanToCompletion\n    Press ENTER to quit\n    14:48:25 [06] Leaving TaskA\n    ```", "```cs\nContinuationExamples.cs\n1    class ContinuationExamples\n2    {\n3        public static void Main()\n4        {\n5            Logger.Log(\"Start...\");\n6            Task.Run(GetStockPrice)\n7                .ContinueWith(prev =>\n8                {\n9                    Logger.Log($\"GetPrice returned {prev.Result:N2}, status={prev.Status}\");\n10                });\n11\n12           Console.ReadLine();\n13        }\n14\nYou can find the complete code here: http://packt.link/rpNcx.\n```", "```cs\n09:30:45 [01] Start...\n09:30:45 [03] Inside GetStockPrice\n09:30:50 [04] GetPrice returned 76.44, status=RanToCompletion\n```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.Globalization;\n    using System.Linq;\n    using System.Threading;\n    using System.Threading.Tasks;\n    namespace Chapter05.Exercises.Exercise03\n    {\n        public record CarSale\n        {\n            public CarSale(string name, double salePrice)\n                => (Name, SalePrice) = (name, salePrice);\n            public string Name { get; }\n            public double SalePrice { get; }\n        }\n    ```", "```cs\n        public interface ISalesLoader\n        {\n            public IEnumerable<CarSale> FetchSales();\n        }\n    ```", "```cs\n        public static class SalesAggregator\n        {\n           public static Task<double> Average(IEnumerable<ISalesLoader> loaders)\n           {\n    ```", "```cs\n             var loaderTasks = loaders.Select(ldr => Task.Run(ldr.FetchSales));\n             return Task\n                    .WhenAll(loaderTasks)\n                    .ContinueWith(tasks =>\n    ```", "```cs\n                    {\n                        var average = tasks.Result\n                            .SelectMany(t => t)\n                            .Average(car => car.SalePrice);\n                        return average;\n                    });\n            }\n        }\n    }\n    ```", "```cs\n        public class SalesLoader : ISalesLoader\n        {\n            private readonly Random _random;\n            private readonly string _name;\n            public SalesLoader(int id, Random rand)\n            {\n                _name = $\"Loader#{id}\";\n                _random = rand;\n            }\n    ```", "```cs\n            public IEnumerable<CarSale> FetchSales()\n            {\n                var delay = _random.Next(1, 3);\n                Logger.Log($\"FetchSales {_name} sleeping for {delay} seconds ...\");\n                Thread.Sleep(TimeSpan.FromSeconds(delay));\n    ```", "```cs\n                var sales = Enumerable\n                    .Range(1, _random.Next(1, 5))\n                    .Select(n => GetRandomCar())\n                    .ToList();\n                foreach (var car in sales)\n                    Logger.Log($\"FetchSales {_name} found: {car.Name} @ {car.SalePrice:N0}\");\n                return sales;\n            }\n    ```", "```cs\n            private readonly string[] _carNames = { \"Ford\", \"BMW\", \"Fiat\", \"Mercedes\", \"Porsche\" };\n            private CarSale GetRandomCar()\n            {\n                var nameIndex = _random.Next(_carNames.Length);\n                return new CarSale(\n                    _carNames[nameIndex], _random.NextDouble() * 1000);\n            }\n        }\n    ```", "```cs\n        public class Program\n        {\n            public static void Main()\n            {\n                var random = new Random();\n                const int MaxSalesHubs = 10;\n                string input;\n                do\n                {\n                    Console.WriteLine(\"Max wait time (in seconds):\");\n                    input = Console.ReadLine();\n                    if (string.IsNullOrEmpty(input))\n                        continue;\n    ```", "```cs\n                    if (int.TryParse(input, NumberStyles.Any, CultureInfo.CurrentCulture, out var maxDelay))\n                    {\n                           var loaders = Enumerable.Range(1,                                           random.Next(1, MaxSalesHubs))\n                            .Select(n => new SalesLoader(n, random))\n                            .ToList();\n    ```", "```cs\n                        var averageTask = SalesAggregator.Average(loaders);\n                        var hasCompleted = averageTask.Wait(                              TimeSpan.FromSeconds(maxDelay));\n                        var average = averageTask.Result;\n    ```", "```cs\n                        if (hasCompleted)\n                        {\n                            Logger.Log($\"Average={average:N0}\");\n                        }\n                        else\n                        {\n                            Logger.Log(\"Timeout!\");\n                        }\n                    }\n                } while (input != string.Empty);\n            }\n        }\n    }\n    ```", "```cs\n    Max wait time (in seconds):1\n    10:52:49 [04] FetchSales Loader#1 sleeping for 1 seconds ...\n    10:52:49 [06] FetchSales Loader#3 sleeping for 1 seconds ...\n    10:52:49 [05] FetchSales Loader#2 sleeping for 1 seconds ...\n    10:52:50 [04] FetchSales Loader#1 found: Mercedes @ 362\n    10:52:50 [04] FetchSales Loader#1 found: Ford @ 993\n    10:52:50 [06] FetchSales Loader#3 found: Fiat @ 645\n    10:52:50 [05] FetchSales Loader#2 found: Mercedes @ 922\n    10:52:50 [06] FetchSales Loader#3 found: Ford @ 9\n    10:52:50 [05] FetchSales Loader#2 found: Porsche @ 859\n    10:52:50 [05] FetchSales Loader#2 found: Mercedes @ 612\n    10:52:50 [01] Timeout!\n    ```", "```cs\n    Max wait time (in seconds):10\n    20:08:41 [05] FetchSales Loader#1 sleeping for 2 seconds ...\n    20:08:41 [12] FetchSales Loader#4 sleeping for 1 seconds ...\n    20:08:41 [08] FetchSales Loader#2 sleeping for 1 seconds ...\n    20:08:41 [11] FetchSales Loader#3 sleeping for 1 seconds ...\n    20:08:41 [15] FetchSales Loader#5 sleeping for 2 seconds ...\n    20:08:41 [13] FetchSales Loader#6 sleeping for 2 seconds ...\n    20:08:41 [14] FetchSales Loader#7 sleeping for 1 seconds ...\n    20:08:42 [08] FetchSales Loader#2 found: Porsche @ 735\n    20:08:42 [08] FetchSales Loader#2 found: Fiat @ 930\n    20:08:42 [11] FetchSales Loader#3 found: Porsche @ 735\n    20:08:42 [12] FetchSales Loader#4 found: Porsche @ 735\n    20:08:42 [08] FetchSales Loader#2 found: Porsche @ 777\n    20:08:42 [11] FetchSales Loader#3 found: Ford @ 500\n    20:08:42 [12] FetchSales Loader#4 found: Ford @ 500\n    20:08:42 [12] FetchSales Loader#4 found: Porsche @ 710\n    20:08:42 [14] FetchSales Loader#7 found: Ford @ 144\n    20:08:43 [05] FetchSales Loader#1 found: Fiat @ 649\n    20:08:43 [15] FetchSales Loader#5 found: Ford @ 779\n    20:08:43 [13] FetchSales Loader#6 found: Porsche @ 763\n    20:08:43 [15] FetchSales Loader#5 found: Fiat @ 137\n    20:08:43 [13] FetchSales Loader#6 found: BMW @ 415\n    20:08:43 [15] FetchSales Loader#5 found: Fiat @ 853\n    20:08:43 [15] FetchSales Loader#5 found: Porsche @ 857\n    20:08:43 [01] Average=639\n    ```", "```cs\nAsyncExamples.cs\n1    using System;\n2    using System.Threading;\n3    using System.Threading.Tasks;\n4    \n5    namespace Chapter05.Examples\n6    {\n7        public class AsyncExamples\n8        {\n9            public static async Task Main()\n10            {\n11                Logger.Log(\"Starting\");\n12                await BuildGreetings();\n13\n14                Logger.Log(\"Press Enter\");\n15                Console.ReadLine();\nYou can find the complete code here: http://packt.link/CsCek.\n```", "```cs\n18:20:31 [01] Starting\n18:20:31 [01] Morning\n18:20:41 [04] Morning...Afternoon\n18:20:42 [04] Morning...Afternoon...Evening\n18:20:42 [04] Press Enter\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nnamespace Chapter05.Examples\n{\n```", "```cs\n    public enum RegionName { North, East, South, West };\n```", "```cs\n    public record User\n    {\n        public User(string userName, RegionName region)\n            => (UserName, Region) = (userName, region);\n        public string UserName { get; }\n        public RegionName Region { get; }\n        public string ID { get; set; }\n    }\n```", "```cs\n    public class AccountGenerator\n    {\n        public async Task CreateAccounts()\n        {\n```", "```cs\n            var users = await FetchPendingAccounts();\n```", "```cs\n            foreach (var user in users)\n            {\n                var id = await GenerateId();\n                user.ID = id;\n            }\n```", "```cs\n            var accountCreationTasks = users.Select(\n                user => user.Region == RegionName.North\n                    ? Task.Run(() => CreateNorthernAccount(user))\n                    : Task.Run(() => CreateOtherAccount(user)))\n                .ToList();\n```", "```cs\n            Logger.Log($\"Creating {accountCreationTasks.Count} accounts\");\n            await Task.WhenAll(accountCreationTasks);\n            var updatedAccountTask = UpdatePendingAccounts(users);\n            await updatedAccountTask;\n            Logger.Log($\"Updated {updatedAccountTask.Result} pending accounts\");\n        }\n```", "```cs\n        private async Task<List<User>> FetchPendingAccounts()\n        {\n            Logger.Log(\"Fetching pending accounts...\");\n            await Task.Delay(TimeSpan.FromSeconds(3D));\n            var users = new List<User>\n            {\n                new User(\"AnnH\", RegionName.North),\n                new User(\"EmmaJ\", RegionName.North),\n                new User(\"SophieA\", RegionName.South),\n                new User(\"LucyG\", RegionName.West),\n            };\n            Logger.Log($\"Found {users.Count} pending accounts\");\n            return users;\n        }\n```", "```cs\n        private static Task<string> GenerateId()\n        {\n            return Task.FromResult(Guid.NewGuid().ToString());\n        }\n```", "```cs\n        private static async Task<bool> CreateNorthernAccount(User user)\n        {\n            await Task.Delay(TimeSpan.FromSeconds(2D));\n            Logger.Log($\"Created northern account for {user.UserName}\");\n            return true;\n        }\n        private static async Task<bool> CreateOtherAccount(User user)\n        {\n            await Task.Delay(TimeSpan.FromSeconds(1D));\n            Logger.Log($\"Created other account for {user.UserName}\");\n            return true;\n        }\n```", "```cs\n        private static async Task<int> UpdatePendingAccounts(IEnumerable<User> users)\n        {\n            var updateAccountTasks = users.Select(usr => Task.Run(\n                async () =>\n                {\n                    await Task.Delay(TimeSpan.FromSeconds(2D));\n                    return true;\n                }))\n                .ToList();\n            await Task.WhenAll(updateAccountTasks);\n            return updateAccountTasks.Count(t => t.Result);\n        }\n    }\n```", "```cs\n    public static class AsyncUsersExampleProgram\n    {\n        public static async Task Main()\n        {\n            Logger.Log(\"Starting\");\n            await new AccountGenerator().CreateAccounts();\n            Logger.Log(\"All done\");\n            Console.ReadLine();\n        }\n    }\n\n}\n```", "```cs\n20:12:38 [01] Starting\n20:12:38 [01] Fetching pending accounts...\n20:12:41 [04] Found 4 pending accounts\n20:12:41 [04] Creating 4 accounts\n20:12:42 [04] Created other account for SophieA\n20:12:42 [07] Created other account for LucyG\n20:12:43 [04] Created northern account for EmmaJ\n20:12:43 [05] Created northern account for AnnH\n20:12:45 [05] Updated 4 pending accounts\n20:12:45 [05] All done\n```", "```cs\nusing System;\nusing System.Net;\nusing System.Net.Http\nusing System.Threading.Tasks;\nnamespace Chapter05.Examples\n{\n    public class AsyncLambdaExamples\n    {\n        public static async Task Main()\n        {\n            const string Url = \"https://www.packtpub.com/\";\n            using var client = new WebClient();\n```", "```cs\n            client.DownloadDataCompleted += async (sender, args) =>\n            {\n                Logger.Log(\"Inside DownloadDataCompleted...looking busy\");\n                await Task.Delay(500);\n                Logger.Log(\"Inside DownloadDataCompleted..all done now\");\n            };\n```", "```cs\n            Logger.Log($\"DownloadData: {Url}\");\n            var data = client.DownloadData(Url);\n            Logger.Log($\"DownloadData: Length={data.Length:N0}\");\n```", "```cs\n            Logger.Log($\"DownloadDataTaskAsync: {Url}\");\n            var downloadTask = client.DownloadDataTaskAsync(Url);\n            var downloadBytes =  await downloadTask;\n            Logger.Log($\"DownloadDataTaskAsync: Length={downloadBytes.Length:N0}\");\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\n19:22:44 [01] DownloadData: https://www.packtpub.com/\n19:22:45 [01] DownloadData: Length=278,047\n19:22:45 [01] DownloadDataTaskAsync: https://www.packtpub.com/\n19:22:45 [06] Inside DownloadDataCompleted...looking busy\n19:22:45 [06] DownloadDataTaskAsync: Length=278,046\n19:22:46 [04] Inside DownloadDataCompleted..all done now\n```", "```cs\n    using System;\n    using System.Globalization;\n    using System.Threading;\n    using System.Threading.Tasks;\n    namespace Chapter05.Exercises.Exercise04\n    {\n        public class SlowRunningService\n        {\n    ```", "```cs\n            public Task<double> Fetch(TimeSpan delay, CancellationToken token)\n            {\n                return Task.Run(() =>\n                    {\n                        var now = DateTime.Now;\n                        Logger.Log(\"Fetch: Sleeping\");\n                        Thread.Sleep(delay);\n                        Logger.Log(\"Fetch: Awake\");\n                        return DateTime.Now.Subtract(now).TotalSeconds;\n                    },\n                    token);\n            }\n    ```", "```cs\n        public class Program\n        {\n            private static readonly TimeSpan DelayTime=TimeSpan.FromSeconds(3);\n    ```", "```cs\n            private static TimeSpan? ReadConsoleMaxTime(string message)\n            {\n                Console.Write($\"{message} Max Waiting Time (seconds):\");\n                var input = Console.ReadLine();\n                if (int.TryParse(input, NumberStyles.Any, CultureInfo.CurrentCulture, out var intResult))\n                {\n                    return TimeSpan.FromSeconds(intResult);\n                }\n                return null;\n            }\n    ```", "```cs\n    public static async Task Main()\n            {\n    ```", "```cs\n                var service = new SlowRunningService();\n    ```", "```cs\n              Console.WriteLine($\"ETA: {DelayTime.TotalSeconds:N} seconds\");  \n\n              TimeSpan? maxWaitingTime;\n                while (true)\n                {\n                    maxWaitingTime = ReadConsoleMaxTime(\"Fetch\");\n                    if (maxWaitingTime == null)\n                        break;\n    ```", "```cs\n                    using var tokenSource = new CancellationTokenSource( maxWaitingTime.Value);\n                    var token = tokenSource.Token;\n    ```", "```cs\n                    token.Register(() => Logger.Log($\"Fetch: Cancelled token={token.GetHashCode()}\"));\n    ```", "```cs\n                    var resultTask = service.Fetch(DelayTime, token);\n    ```", "```cs\n                    try\n                    {\n                        await resultTask;\n                        if (resultTask.IsCompletedSuccessfully)\n                            Logger.Log($\"Fetch: Result={resultTask.Result:N0}\");\n                        else\n                            Logger.Log($\"Fetch: Status={resultTask.Status}\");\n                    }\n                    catch (TaskCanceledException ex)\n                    {\n                        Logger.Log($\"Fetch: TaskCanceledException {ex.Message}\");\n                    }\n                }\n            }\n        }\n    }\n    ```", "```cs\n    ETA: 3.00 seconds\n    Fetch Max Waiting Time (seconds):5\n    16:48:11 [04] Fetch: Sleeping\n    16:48:14 [04] Fetch: Awake\n    16:48:14 [04] Fetch: Result=3\n    ```", "```cs\n    Fetch Max Waiting Time (seconds):2\n    16:49:51 [04] Fetch: Sleeping\n    16:49:53 [08] Fetch: Cancelled token=28589617\n    16:49:54 [04] Fetch: Awake\n    16:49:54 [04] Fetch: Result=3 \n    ```", "```cs\n    Fetch Max Waiting Time (seconds):\n    0\n    16:53:32 [04] Fetch: Cancelled token=48717705\n    16:53:32 [04] Fetch: TaskCanceledException A task was canceled. \n    ```", "```cs\n            public Task<double?> FetchLoop(TimeSpan delay, CancellationToken token)\n            {\n                return Task.Run(() =>\n                {\n                    const int TimeSlice = 500;\n                    var iterations = (int)(delay.TotalMilliseconds / TimeSlice);\n                    Logger.Log($\"FetchLoop: Iterations={iterations} token={token.GetHashCode()}\");\n                    var now = DateTime.Now;\n    ```", "```cs\n                    for (var i = 0; i < iterations; i++)\n                    {\n                        if (token.IsCancellationRequested)\n                        {\n                            Logger.Log($\"FetchLoop: Iteration {i + 1} detected cancellation token={token.GetHashCode()}\");\n                            return (double?)null;\n                        }\n                        Logger.Log($\"FetchLoop: Iteration {i + 1} Sleeping\");\n                        Thread.Sleep(TimeSlice);\n                        Logger.Log($\"FetchLoop: Iteration {i + 1} Awake\");\n                    }\n                    Logger.Log(\"FetchLoop: done\");\n                    return DateTime.Now.Subtract(now).TotalSeconds;\n                }, token);\n            }\n    ```", "```cs\n            while (true)\n                {\n                    maxWaitingTime = ReadConsoleMaxTime(\"FetchLoop\");\n                    if (maxWaitingTime == null)\n                        break;\n                    using var tokenSource = new CancellationTokenSource(maxWaitingTime.Value);\n                    var token = tokenSource.Token;\n                    token.Register(() => Logger.Log($\"FetchLoop: Cancelled token={token.GetHashCode()}\"));\n    ```", "```cs\n                    var resultTask = service.FetchLoop(DelayTime, token);\n                    try\n                    {\n                        await resultTask;\n                        if (resultTask.IsCompletedSuccessfully)\n                            Logger.Log($\"FetchLoop: Result={resultTask.Result:N0}\");\n                        else\n                            Logger.Log($\"FetchLoop: Status={resultTask.Status}\");\n                    }\n                    catch (TaskCanceledException ex)\n                    {\n                        Logger.Log($\"FetchLoop: TaskCanceledException {ex.Message}\");\n                    }\n                } \n    ```", "```cs\n    FetchLoop Max Waiting Time (seconds):5\n    17:33:38 [04] FetchLoop: Iterations=6 token=6044116\n    17:33:38 [04] FetchLoop: Iteration 1 Sleeping\n    17:33:38 [04] FetchLoop: Iteration 1 Awake\n    17:33:38 [04] FetchLoop: Iteration 2 Sleeping\n    17:33:39 [04] FetchLoop: Iteration 2 Awake\n    17:33:39 [04] FetchLoop: Iteration 3 Sleeping\n    17:33:39 [04] FetchLoop: Iteration 3 Awake\n    17:33:39 [04] FetchLoop: Iteration 4 Sleeping\n    17:33:40 [04] FetchLoop: Iteration 4 Awake\n    17:33:40 [04] FetchLoop: Iteration 5 Sleeping\n    17:33:40 [04] FetchLoop: Iteration 5 Awake\n    17:33:40 [04] FetchLoop: Iteration 6 Sleeping\n    17:33:41 [04] FetchLoop: Iteration 6 Awake\n    17:33:41 [04] FetchLoop: done\n    17:33:41 [04] FetchLoop: Result=3\n    ```", "```cs\n    FetchLoop Max Waiting Time (seconds):\n    2\n    17:48:47 [04] FetchLoop: Iterations=6 token=59817589\n    17:48:47 [04] FetchLoop: Iteration 1 Sleeping\n    17:48:48 [04] FetchLoop: Iteration 1 Awake\n    17:48:48 [04] FetchLoop: Iteration 2 Sleeping\n    17:48:48 [04] FetchLoop: Iteration 2 Awake\n    17:48:48 [04] FetchLoop: Iteration 3 Sleeping\n    17:48:49 [04] FetchLoop: Iteration 3 Awake\n    17:48:49 [04] FetchLoop: Iteration 4 Sleeping\n    17:48:49 [06] FetchLoop: Cancelled token=59817589\n    17:48:49 [04] FetchLoop: Iteration 4 Awake\n    17:48:49 [04] FetchLoop: Iteration 5 detected cancellation token=59817589\n    17:48:49 [04] FetchLoop: Result=\n    ```", "```cs\n    FetchLoop Max Waiting Time (seconds):\n    0\n    17:53:29 [04] FetchLoop: Cancelled token=48209832\n    17:53:29 [08] FetchLoop: TaskCanceledException A task was canceled.\n    ```", "```cs\nTaskScheduler.UnobservedTaskException += (sender, args) =>\n{\n  Logger.Log($\"Caught UnobservedTaskException\\n{args.Exception}\");\n};\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nnamespace Chapter05.Examples\n{\n    class ErrorExamplesProgram\n    {\n        public static async Task Main()\n        {\n            try\n            {\n```", "```cs\n                var operations = new CustomerOperations();\n                var discount = await operations.AverageDiscount();\n                Logger.Log($\"Discount: {discount}\");\n            }\n            catch (DivideByZeroException)\n            {\n                Console.WriteLine(\"Caught a divide by zero\");\n            }\n            Console.ReadLine();\n        }\n        class CustomerOperations\n        {\n            public async Task<int> AverageDiscount()\n            {\n                Logger.Log(\"Loading orders...\");\n                await Task.Delay(TimeSpan.FromSeconds(1));\n```", "```cs\n                var orderCount = new Random().Next(0, 2);\n                var orderValue = 1200;\n                return orderValue / orderCount;\n            }\n        }\n    }\n}\n```", "```cs\n15:47:21 [01] Loading orders...\nCaught a divide by zero\n```", "```cs\n17:55:54 [01] Loading orders...\n17:55:55 [04] Discount: 1200\n```", "```cs\n    1    using System;\n    2    using System.Collections.Generic;\n    3    using System.Linq;\n    4    using System.Threading.Tasks;\n    5\n    6    namespace Chapter05.Exercises.Exercise05\n    7    {\n    8        public enum RegionName { North, East, South, West };\n    9\n    10        public class Customer\n    11        {\n    12            private readonly RegionName _protectedRegion;\n    13\n    14            public Customer(string name, RegionName region, RegionName protectedRegion)\n    15            {\n    ```", "```cs\n    public class CustomerOperations\n    {\n       public const RegionName ProtectedRegion = RegionName.West;\n    ```", "```cs\n            public async Task<IEnumerable<Customer>> FetchTopCustomers()\n            {\n                await Task.Delay(TimeSpan.FromSeconds(2));\n                Logger.Log(\"Loading customers...\");\n                var customers = new List<Customer>\n                {\n                new Customer(\"Rick Deckard\", RegionName.North, ProtectedRegion),\n                new Customer(\"Taffey Lewis\", RegionName.North, ProtectedRegion),\n                new Customer(\"Rachael\", RegionName.North, ProtectedRegion),\n                new Customer(\"Roy Batty\", RegionName.West, ProtectedRegion),\n                new Customer(\"Eldon Tyrell\", RegionName.East, ProtectedRegion)\n                };\n    ```", "```cs\n                await FetchOrders(customers);\n    ```", "```cs\n                var filteredCustomers = new List<Customer>();\n                foreach (var customer in customers)\n                {\n                    try\n                    {\n                        if (customer.TotalOrders > 0)\n                            filteredCustomers.Add(customer);\n                    }\n                    catch (AccessViolationException e)\n                    {\n                        Logger.Log($\"Error {e.Message}\");\n                    }\n                }\n    ```", "```cs\n                return filteredCustomers.OrderByDescending(c => c.TotalOrders);\n            } \n    ```", "```cs\n            private async Task FetchOrders(IEnumerable<Customer> customers)\n            {\n                var rand = new Random();\n                Logger.Log(\"Loading orders...\");\n                var orderUpdateTasks = customers.Select(\n                  cust => Task.Run(async () =>\n                  {\n                        await Task.Delay(500);\n                        cust.TotalOrders = rand.Next(1, 100);\n                   }))\n                  .ToList();\n    ```", "```cs\n                await Task.WhenAll(orderUpdateTasks);\n            }\n        }\n    ```", "```cs\n        public class Program\n        {\n            public static async Task Main()\n            {\n                var ops = new CustomerOperations();\n                var resultTask = ops.FetchTopCustomers();\n                var customers = await resultTask;\n                foreach (var customer in customers)\n                {\n                    Logger.Log($\"{customer.Name} ({customer.Region}): {customer.TotalOrders:N0}\");\n                }\n                Console.ReadLine();\n            }\n        }\n    }\n    ```", "```cs\n    20:00:15 [05] Loading customers...\n    20:00:16 [05] Loading orders...\n    20:00:16 [04] Error Cannot access orders for Roy Batty\n    20:00:16 [04] Rachael (North): 56\n    20:00:16 [04] Taffey Lewis (North): 19\n    20:00:16 [04] Rick Deckard (North): 10\n    20:00:16 [04] Eldon Tyrell (East): 6\n    ```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nnamespace Chapter05.Examples\n{\n    class WhenAllErrorExamples\n    {+\n```", "```cs\n        private static async Task<int> BadTask(string info, int n)\n        {\n            await Task.Delay(1000);\n            Logger.Log($\"{info} number {n} awake\");\n            if (n % 2 == 0)\n            {\n                Logger.Log($\"About to throw one {info} number {n}\"…\");\n                throw new InvalidOperationException\"($\"Oh dear from {info} number \"n}\");\n            }\n            return n;\n        }\n```", "```cs\n        private static IEnumerable<Task<int>> CreateBadTasks(string info)\n        {\n            return Enumerable.Range(0, 5)\n                .Select(i => BadTask(info, i))\n                .ToList();\n        }\n```", "```cs\n        public static async Task Main()\n        {\n            var whenAllCompletedTask = Task.WhenAll(CreateBadTasks(\"[WhenAll]\"));\n```", "```cs\n            try\n            {\n                await whenAllCompletedTask;\n            }\n            catch (Exception ex)\n            {\n```", "```cs\n                Console.WriteLine($\"WhenAll Caught {ex.GetType().Name}, Message={ex.Message}\");\n```", "```cs\n                Console.WriteLine($\"WhenAll Task.Status={whenAllCompletedTask.Status}\");\n               foreach (var ie in whenAllCompletedTask.Exception.InnerExceptions)\n               {\n                   Console.WriteLine($\"WhenAll Caught Inner Exception: {ie.Message}\");\n               }\n            }\n            Console.ReadLine();\n        }      \n    }\n}\n```", "```cs\n17:30:36 [05] [WhenAll] number 3 awake\n17:30:36 [09] [WhenAll] number 1 awake\n17:30:36 [07] [WhenAll] number 0 awake\n17:30:36 [06] [WhenAll] number 2 awake\n17:30:36 [04] [WhenAll] number 4 awake\n17:30:36 [06] About to throw one [WhenAll] number 2...\n17:30:36 [04] About to throw one [WhenAll] number 4...\n17:30:36 [07] About to throw one [WhenAll] number 0...\nWhenAll Caught InvalidOperationException, Message=Oh dear from [WhenAll] number 0\nWhenAll Task.Status=Faulted\nWhenAll Caught Inner Exception: Oh dear from [WhenAll] number 0\nWhenAll Caught Inner Exception: Oh dear from [WhenAll] number 2\nWhenAll Caught Inner Exception: Oh dear from [WhenAll] number 4\n```", "```cs\n            var whenAnyCompletedTask = Task.WhenAny(CreateBadTasks(\"[WhenAny]\"));\n            var result = await whenAnyCompletedTask;\n            Logger.Log($\"WhenAny result: {result.Result}\");\n```", "```cs\n18:08:46 [08] [WhenAny] number 2 awake\n18:08:46 [10] [WhenAny] number 0 awake\n18:08:46 [10] About to throw one [WhenAny] number 0...\n18:08:46 [07] [WhenAny] number 3 awake\n18:08:46 [09] [WhenAny] number 1 awake\n18:08:46 [07] WhenAny result: 3\n18:08:46 [08] About to throw one [WhenAny] number 2...\n18:08:46 [06] [WhenAny] number 4 awake\n18:08:46 [06] About to throw one [WhenAny] number 4...\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nnamespace Chapter05.Examples\n{\n    class AsyncEnumerableExamplesProgram\n    {\n        public static async Task Main()\n        {\n```", "```cs\n            Logger.Log(\"Fetching Task quotes...\");\n            var taskQuotes = await GetInsuranceQuotesAsTask();\n            foreach(var quote in taskQuotes)\n            {\n                Logger.Log($\"Received Task: {quote}\");\n            }\n```", "```cs\n            Logger.Log(\"Fetching Stream quotes...\");\n            await foreach (var quote in GetInsuranceQuotesAsync())\n            {\n                Logger.Log($\"Received Stream: {quote}\");\n            }\n            Logger.Log(\"All done...\");\n            Console.ReadLine();\n        }\n```", "```cs\n        private static async Task<IEnumerable<string>> GetInsuranceQuotesAsTask()\n        {\n            var rand = new Random();\n            var quotes = new List<string>();\n            for (var i = 0; i < 5; i++)\n            {\n                await Task.Delay(1000);\n                quotes.Add($\"Provider{i}'s quote is {rand.Next(5, 10)}\");\n            }\n            return quotes;\n        } \n```", "```cs\n        private static async IAsyncEnumerable<string> GetInsuranceQuotesAsync()\n        {\n            var rand = new Random();\n            for (var i = 0; i < 5; i++)\n            {\n                await Task.Delay(1000);\n                yield return $\"Provider{i}'s quote is {rand.Next(5, 10)}\";\n            }\n        }\n    }\n}\n```", "```cs\n09:17:57 [01] Fetching Task quotes...\n09:18:02 [04] Received Task: Provider0's quote is 7\n09:18:02 [04] Received Task: Provider1's quote is 9\n09:18:02 [04] Received Task: Provider2's quote is 9\n09:18:02 [04] Received Task: Provider3's quote is 8\n09:18:02 [04] Received Task: Provider4's quote is 8\n09:18:02 [04] Fetching Stream quotes...\n09:18:03 [04] Received Stream: Provider0's quote is 7\n09:18:04 [04] Received Stream: Provider1's quote is 8\n09:18:05 [05] Received Stream: Provider2's quote is 9\n09:18:06 [05] Received Stream: Provider3's quote is 8\n09:18:07 [04] Received Stream: Provider4's quote is 7\n09:18:07 [04] All done...\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing System.Globalization;\nusing System.Threading;\nnamespace Chapter05.Examples\n{\n    class ParallelForExamples\n    {\n        public static async Task Main()\n        {\n```", "```cs\n            var loopResult = Parallel.For(99, 105, i =>\n            {\n                Logger.Log($\"Sleep iteration {i}\");\n                Thread.Sleep(i * 10);\n                Logger.Log($\"Awake iteration {i}\");\n            });\n```", "```cs\n            Console.WriteLine($\"Completed: {loopResult.IsCompleted}\");\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\n18:39:37 [10] Sleep iteration 104\n18:39:37 [03] Sleep iteration 100\n18:39:37 [06] Sleep iteration 102\n18:39:37 [04] Sleep iteration 101\n18:39:37 [01] Sleep iteration 99\n18:39:37 [07] Sleep iteration 103\n18:39:38 [03] Awake iteration 100\n18:39:38 [01] Awake iteration 99\n18:39:38 [06] Awake iteration 102\n18:39:38 [04] Awake iteration 101\n18:39:38 [07] Awake iteration 103\n18:39:38 [10] Awake iteration 104\nCompleted: True\n```", "```cs\n            var loopResult1 = Parallel.For(10, 20,               (i, loopState) =>\n              {\n                Logger.Log($\"Inside iteration {i}\");\n                if (i == 15)\n                {\n                    Logger.Log($\"At {i}…break when you're ready\");\n```", "```cs\n                    loopState.Break();\n                }\n              });\n            Console.WriteLine($\"Completed: {loopResult1.IsCompleted}, LowestBreakIteration={loopResult1.LowestBreakIteration}\");\n            Console.ReadLine();\n```", "```cs\n19:04:48 [03] Inside iteration 11\n19:04:48 [03] Inside iteration 13\n19:04:48 [03] Inside iteration 15\n19:04:48 [03] At 15...break when you're ready\n19:04:48 [01] Inside iteration 10\n19:04:48 [05] Inside iteration 14\n19:04:48 [07] Inside iteration 17\n19:04:48 [06] Inside iteration 16\n19:04:48 [04] Inside iteration 12\nCompleted: False, LowestBreakIteration=15\n```", "```cs\n            double series;\n            do\n            {\n                Console.Write(\"Pi Series (in millions):\");\n                var input = Console.ReadLine();\n```", "```cs\n                if (!double.TryParse(input, NumberStyles.Any, CultureInfo.CurrentCulture, out series))\n                {\n                    break;\n                }\n```", "```cs\n                var actualSeries = series * 1000000;\n                Console.WriteLine($\"Calculating PI {actualSeries:N0}\");\n                var pi = await CalcPi((int)(actualSeries));\n```", "```cs\n                Console.WriteLine($\"PI={pi:N18}\");\n            }\n```", "```cs\n            while (series != 0D);\n            Console.ReadLine();\n```", "```cs\nlock (obj){ //your thread safe code here }.\n```", "```cs\n        private static Task<double> CalcPi(int steps)\n        {\n            return Task.Run(() =>\n            {\n                const int StartIndex = 0;\n                var sum = 0.0D;\n                var step = 1.0D / (double)steps;\n```", "```cs\n                var gate = new object();\n```", "```cs\n                Parallel.For(\n                    StartIndex, \n                    steps,\n                    () => 0.0D,                 // localInit \n                    (i, state, localFinal) =>   // body\n                    {\n                        var x = (i + 0.5D) * step;\n                        return localFinal + 4.0D / (1.0D + x * x);\n                    },\n                    localFinal =>               //localFinally\n                    { \n```", "```cs\n                        lock (gate)\n                            sum += localFinal; \n                    });\n                return step * sum;\n            });\n        }\n```", "```cs\nPi Series (in millions):1\nCalculating PI 1,000,000\nPI=3.141592653589890000\nPi Series (in millions):20\nCalculating PI 20,000,000\nPI=3.141592653589810000\nPi Series (in millions):30\nCalculating PI 30,000,000\nPI=3.141592653589750000\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nnamespace Chapter05.Examples\n{\n    public class Customer\n    {\n        public Customer(string name)\n        {\n            Name = name;\n            Logger.Log($\"Created {Name}\");\n        }\n        public string Name { get; }\n```", "```cs\nParallelForEachExample.cs\n1            private readonly object _orderGate = new object();\n2            private IList<double> _orders;\n3            public IList<double> Orders\n4            {\n5                get\n6                {\n7                    lock (_orderGate)\n8                    {\n9                        if (_orders != null)\n10                            return _orders;\n11\n12                        var random = new Random();\n13                        var orderCount = random.Next(1000, 10000);\n14\nYou can find the complete code here: https://packt.link/Nmx3X.\n```", "```cs\n        public double? Total { get; set; }\n        public double? Average { get; set; }\n    }\n```", "```cs\n    public static class Aggregator\n    {\n        public static Task<bool> Aggregate(IEnumerable<Customer> customers, CancellationToken token)\n        {\n            var wasCancelled = false;\n```", "```cs\nParallelForEachExample.cs\n1                return Task.Run(() =>\n2                {\n3                    var options = new ParallelOptions { CancellationToken = token };\n4    \n5                    try\n6                    {\n7                        Parallel.ForEach(customers, options,\n8                            customer =>\n9                            {\n10                                customer.Total = customer.Orders.Sum();\n11                                customer.Average = customer.Total / 12                                                   customer.Orders.Count;\n13                                Logger.Log($\"Processed {customer.Name}\");\n14                            });\n15                    }\nYou can find the complete code here: https://packt.link/FfVNA.\n```", "```cs\n    class ParallelForEachExampleProgram\n    {\n        public static async Task Main()\n        {\n            Console.Write(\"Max waiting time (seconds):\");\n            var input = Console.ReadLine();\n            var maxWait = TimeSpan.FromSeconds(int.TryParse(input, NumberStyles.Any, CultureInfo.CurrentCulture, out var inputSeconds)\n                ? inputSeconds\n                : 5);\n```", "```cs\n            var customers = Enumerable.Range(1, 10)\n                .Select(n => new Customer($\"Customer#{n}\"))\n                .ToList();\n```", "```cs\n            var tokenSource = new CancellationTokenSource(maxWait);\n            var aggregated = await Task.Run(() => Aggregator.Aggregate(customers,                                   tokenSource.Token));            \n```", "```cs\n            var topCustomers = customers\n                .OrderByDescending(c => c.Total)\n                .Take(5);\n            Console.WriteLine($\"Cancelled: {aggregated }\");\n            Console.WriteLine(\"Customer      \\tTotal         \\tAverage  \\tOrders\");\n\n            foreach (var c in topCustomers)\n            {\n                Console.WriteLine($\"{c.Name.PadRight(10)}\\t{c.Total:N0}\\t{c.Average:N0}\\t\\t{c.Orders.Count:N0}\");\n            }\n            Console.ReadLine();\n        }\n    }\n}\n```", "```cs\nMax waiting time (seconds):1\n21:35:56 [01] Created Customer#1\n21:35:56 [01] Created Customer#2\n21:35:56 [01] Created Customer#3\n21:35:56 [01] Created Customer#4\n21:35:56 [01] Created Customer#5\n21:35:56 [01] Created Customer#6\n21:35:56 [01] Created Customer#7\n21:35:56 [01] Created Customer#8\n21:35:56 [01] Created Customer#9\n21:35:56 [01] Created Customer#10\n21:35:59 [07] Processed Customer#5\n21:35:59 [04] Processed Customer#3\n21:35:59 [10] Processed Customer#7\n21:35:59 [06] Processed Customer#2\n21:35:59 [05] Processed Customer#1\n21:35:59 [11] Processed Customer#8\n21:35:59 [08] Processed Customer#6\n21:35:59 [09] Processed Customer#4\n21:35:59 [05] Caught The operation was canceled.\nCancelled: True\nCustomer        Total           Average         Orders\nCustomer#1      23,097,348      2,395           9,645\nCustomer#4      19,029,182      2,179           8,733\nCustomer#8      15,322,674      1,958           7,827\nCustomer#6      9,763,247       1,568           6,226\nCustomer#2      6,189,978       1,250           4,952\n```", "```cs\n    FibonacciSequence.cs\n    1    public class Fibonacci\n    2    {\n    3        public static Fibonacci CreateSeed()\n    4        {\n    5            return new Fibonacci(1, 0D, 1D);\n    6        }\n    7    \n    8        public static Fibonacci CreateNext(Fibonacci previous, double angle)\n    9        {\n    10            return new Fibonacci(previous, angle);\n    11        }\n    12    \n    13        private Fibonacci(int index, double theta, double x)\n    14        {\n    15            Index = index;\n    ```", "```cs\nYou can find the complete code here: http://packt.link/I7C6A.\n```", "```cs\n    FibonacciSequence.cs\n    1    public static class FibonacciSequence\n    2    {\n    3        public static IList<Fibonacci> Calculate(int indices, double phi)\n    4        {\n    5            var angle = phi.GoldenAngle();\n    6    \n    7            var items = new List<Fibonacci>(indices)\n    8            {\n    9                Fibonacci.CreateSeed()\n    10            };\n    11            \n    12            for (var i = 1; i < indices; i++)\n    13            {\n    14                var previous = items.ElementAt(i - 1);\n    15                var next = Fibonacci.CreateNext(previous, angle);\n    ```", "```cs\nYou can find the complete code here: https://packt.link/gYK4N.\n```", "```cs\n    source\\Chapter05>dotnet add package System.Drawing.Common\n    ```", "```cs\n    ImageGenerator.cs\n    1    using System.Collections.Generic;\n    2    using System.Drawing;\n    3    using System.Drawing.Drawing2D;\n    4    using System.Drawing.Imaging;\n    5    using System.IO;\n    6    \n    7    namespace Chapter05.Activities.Activity01\n    8    {\n    9        public static class ImageGenerator\n    10        {\n    11            public static void ExportSequence(IList<Fibonacci> sequence, \n    12                string path, ImageFormat format, 13                int width, int height, double pointSize)\n    14            {\n    15                double minX = 0; \n    ```", "```cs\nYou can find the complete code here: http://packt.link/a8Bu7.\n```", "```cs\n    Using temp folder: C:Temp\\Fibonacci\\\n    Phi (eg 1.0 to 6.0) (x=quit, enter=cancel):1\n    Image Count (eg 1000):1000\n    Creating 1000 images...\n    20:36:19 [04] Saved Fibonacci_3000_1.015.png\n    20:36:19 [06] Saved Fibonacci_3000_1.030.png\n    20:36:20 [06] Saved Fibonacci_3000_1.090.png\n    ```"]