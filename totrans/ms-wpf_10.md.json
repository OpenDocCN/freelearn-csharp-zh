["```cs\nusing System; \nusing System.ComponentModel; \nusing CompanyName.ApplicationName.DataModels.Enums; \nusing CompanyName.ApplicationName.DataModels.Interfaces;  \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class Feedback : IAnimatable, INotifyPropertyChanged \n  { \n    private string message = string.Empty; \n    private FeedbackType type = FeedbackType.None; \n    private TimeSpan duration = new TimeSpan(0, 0, 4); \n    private bool isPermanent = false; \n    private Animatable animatable; \n\n    public Feedback(string message, FeedbackType type, TimeSpan duration)\n    { \n      Message = message; \n      Type = type; \n      Duration = duration == TimeSpan.Zero ? this.duration : duration; \n      IsPermanent = false; \n      Animatable = new Animatable(this); \n    } \n\n    public Feedback(string message, bool isSuccess, bool isPermanent) :  \n      this(message, isSuccess ? FeedbackType.Success :  \n      FeedbackType.Error, TimeSpan.Zero) \n    { \n      IsPermanent = isPermanent; \n    } \n\n    public Feedback(string message, FeedbackType type) : this(message,  \n      type, TimeSpan.Zero) { } \n\n    public Feedback(string message, bool isSuccess) : this(message,  \n      isSuccess ? FeedbackType.Success : FeedbackType.Error,  \n      TimeSpan.Zero) { } \n\n    public Feedback() : this(string.Empty, FeedbackType.None) { } \n\n    public string Message \n    { \n      get { return message; } \n      set { message = value; NotifyPropertyChanged(); } \n    } \n\n    public TimeSpan Duration \n    { \n      get { return duration; } \n      set { duration = value; NotifyPropertyChanged(); } \n    } \n\n    public FeedbackType Type \n    { \n      get { return type; } \n      set { type = value; NotifyPropertyChanged(); } \n    } \n\n    public bool IsPermanent \n    { \n      get { return isPermanent; } \n      set { isPermanent = value; NotifyPropertyChanged(); } \n    } \n\n    #region IAnimatable Members \n\n    public Animatable Animatable \n    { \n      get { return animatable; } \n      set { animatable = value; } \n    } \n\n    #endregion \n\n    #region INotifyPropertyChanged Members \n\n    ... \n\n    #endregion \n  } \n} \n```", "```cs\nusing System.Collections.Generic; \nusing System.Linq; \n\nnamespace CompanyName.ApplicationName.DataModels.Collections \n{ \n  public class FeedbackCollection : BaseAnimatableCollection<Feedback> \n  { \n    public FeedbackCollection(IEnumerable<Feedback> feedbackCollection) : \n      base(feedbackCollection) { } \n\n    public FeedbackCollection() : base() { } \n\n    public new void Add(Feedback feedback) \n    { \n      if (!string.IsNullOrEmpty(feedback.Message) && (Count == 0 ||  \n        !this.Any(f => f.Message == feedback.Message))) base.Add(feedback); \n    } \n\n    public void Add(string message, bool isSuccess) \n    { \n      Add(new Feedback(message, isSuccess)); \n    } \n  } \n} \n```", "```cs\nusing System.ComponentModel;  \nusing System.Runtime.CompilerServices; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.DataModels.Collections; \n\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class FeedbackManager : INotifyPropertyChanged \n  { \n    private static FeedbackCollection feedback = new FeedbackCollection(); \n    private static FeedbackManager instance = null; \n\n    private FeedbackManager() { } \n\n    public static FeedbackManager Instance => \n      instance ?? (instance = new FeedbackManager()); \n\n    public FeedbackCollection Feedback \n    { \n      get { return feedback; } \n      set { feedback = value; NotifyPropertyChanged(); } \n    } \n\n    public void Add(Feedback feedback) \n    { \n      Feedback.Add(feedback); \n    } \n\n    public void Add(string message, bool isSuccess) \n    { \n      Add(new Feedback(message, isSuccess)); \n    } \n\n    #region INotifyPropertyChanged Members \n\n    ... \n\n    #endregion \n  } \n} \n```", "```cs\n<UserControl  \n  x:Class=\"CompanyName.ApplicationName.Views.Controls.FeedbackControl\" \n\n  xmlns:Converters=\"clr-namespace:CompanyName.ApplicationName.Converters; \n    assembly=CompanyName.ApplicationName.Converters\" \n  xmlns:DataModels=\"clr-namespace:CompanyName.ApplicationName.DataModels; \n    assembly=CompanyName.ApplicationName.DataModels\" \n  > \n  <UserControl.Resources> \n    <Converters:FeedbackTypeToImageSourceConverter  \n      x:Key=\"FeedbackTypeToImageSourceConverter\" /> \n    <Converters:BoolToVisibilityConverter  \n      x:Key=\"BoolToVisibilityConverter\" /> \n    <ItemsPanelTemplate x:Key=\"AnimatedPanel\"> \n      <Panels:AnimatedStackPanel /> \n    </ItemsPanelTemplate> \n    <Style x:Key=\"SmallImageInButtonStyle\" TargetType=\"{x:Type Image}\"  \n      BasedOn=\"{StaticResource ImageInButtonStyle}\"> \n      <Setter Property=\"Width\" Value=\"16\" /> \n      <Setter Property=\"Height\" Value=\"16\" /> \n    </Style> \n    <DataTemplate x:Key=\"FeedbackTemplate\" DataType=\"{x:Type  \n      DataModels:Feedback}\"> \n      <Grid Margin=\"2,1,2,0\" MouseEnter=\"Border_MouseEnter\"  \n        MouseLeave=\"Border_MouseLeave\"> \n        <Grid.ColumnDefinitions> \n          <ColumnDefinition Width=\"16\" /> \n          <ColumnDefinition /> \n          <ColumnDefinition Width=\"24\" /> \n        </Grid.ColumnDefinitions> \n        <Image Stretch=\"None\" Source=\"{Binding Type, \n          Converter={StaticResource FeedbackTypeToImageSourceConverter}}\"  \n          VerticalAlignment=\"Top\" Margin=\"0,4,0,0\" /> \n        <TextBlock Grid.Column=\"1\" Text=\"{Binding Message}\"  \n          MinHeight=\"22\" TextWrapping=\"Wrap\" Margin=\"5,2,5,0\" \n          VerticalAlignment=\"Top\" FontSize=\"14\" /> \n        <Button Grid.Column=\"2\" ToolTip=\"Removes this message from the\n          list\" VerticalAlignment=\"Top\" PreviewMouseLeftButtonDown=\n          \"DeleteButton_PreviewMouseLeftButtonDown\"> \n          <Image Source=\"pack://application:,,,/ \n            CompanyName.ApplicationName;component/Images/Delete_16.png\"  \n            Style=\"{StaticResource SmallImageInButtonStyle}\" /> \n        </Button> \n      </Grid> \n    </DataTemplate> \n    <DropShadowEffect x:Key=\"Shadow\" Color=\"Black\" ShadowDepth=\"6\"  \n      Direction=\"270\" Opacity=\"0.4\" /> \n  </UserControl.Resources> \n  <Border BorderBrush=\"{StaticResource TransparentBlack}\"  \n    Background=\"White\" Padding=\"3\" BorderThickness=\"1,0,1,1\"  \n    CornerRadius=\"0,0,5,5\" Visibility=\"{Binding HasFeedback,  \n    Converter={StaticResource BoolToVisibilityConverter},  \n    RelativeSource={RelativeSource Mode=FindAncestor,  \n    AncestorType={x:Type Controls:FeedbackControl}}}\"  \n    Effect=\"{StaticResource Shadow}\"> \n    <ListBox MaxHeight=\"89\" ItemsSource=\"{Binding Feedback,  \n      RelativeSource={RelativeSource Mode=FindAncestor,  \n      AncestorType={x:Type Controls:FeedbackControl}}}\"  \n      ItemTemplate=\"{StaticResource FeedbackTemplate}\"  \n      ItemsPanel=\"{StaticResource AnimatedPanel}\"  \n      ScrollViewer.HorizontalScrollBarVisibility=\"Disabled\"  \n      ScrollViewer.VerticalScrollBarVisibility=\"Auto\" BorderThickness=\"0\"  \n      HorizontalContentAlignment=\"Stretch\" /> \n  </Border> \n</UserControl> \n```", "```cs\nusing System; \nusing System.Collections.Generic; \nusing System.Collections.Specialized; \nusing System.Linq; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Input; \nusing System.Windows.Threading; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.DataModels.Collections; \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.Views.Controls \n{ \n  public partial class FeedbackControl : UserControl \n  { \n    private static List<DispatcherTimer> timers =  \n      new List<DispatcherTimer>(); \n\n    public FeedbackControl() \n    { \n      InitializeComponent(); \n    } \n\n    public static readonly DependencyProperty FeedbackProperty =  \n      DependencyProperty.Register(nameof(Feedback),  \n      typeof(FeedbackCollection), typeof(FeedbackControl),  \n      new UIPropertyMetadata(new FeedbackCollection(),  \n      (d, e) => ((FeedbackCollection)e.NewValue).CollectionChanged +=  \n      ((FeedbackControl)d).Feedback_CollectionChanged));\n\n    public FeedbackCollection Feedback \n    { \n      get { return (FeedbackCollection)GetValue(FeedbackProperty); } \n      set { SetValue(FeedbackProperty, value); } \n    } \n\n    public static readonly DependencyProperty HasFeedbackProperty =  \n      DependencyProperty.Register(nameof(HasFeedback), typeof(bool),  \n      typeof(FeedbackControl), new PropertyMetadata(true)); \n\n    public bool HasFeedback \n    { \n      get { return (bool)GetValue(HasFeedbackProperty); } \n      set { SetValue(HasFeedbackProperty, value); } \n    } \n\n    private void Feedback_CollectionChanged(object sender,  \n      NotifyCollectionChangedEventArgs e) \n    { \n      if ((e.OldItems == null || e.OldItems.Count == 0) &&  \n        e.NewItems != null && e.NewItems.Count > 0) \n      { \n        e.NewItems.OfType<Feedback>().Where(f => !f.IsPermanent). \n          ForEach(f => InitializeTimer(f)); \n      } \n      HasFeedback = Feedback.Any(); \n    } \n\n    private void InitializeTimer(Feedback feedback) \n    { \n      DispatcherTimer timer = new DispatcherTimer(); \n      timer.Interval = feedback.Duration; \n      timer.Tick += Timer_Tick; \n      timer.Tag = new Tuple<Feedback, DateTime>(feedback, DateTime.Now); \n      timer.Start(); \n      timers.Add(timer); \n    } \n\n    private void Timer_Tick(object sender, EventArgs e) \n    { \n      DispatcherTimer timer = (DispatcherTimer)sender; \n      timer.Stop(); \n      timer.Tick -= Timer_Tick; \n      timers.Remove(timer); \n      Feedback feedback = ((Tuple<Feedback, DateTime>)timer.Tag).Item1; \n      Feedback.Remove(feedback); \n    } \n\n    private void DeleteButton_PreviewMouseLeftButtonDown(object sender,  \n      MouseButtonEventArgs e) \n    { \n      Button deleteButton = (Button)sender; \n      Feedback feedback = (Feedback)deleteButton.DataContext; \n      Feedback.Remove(feedback); \n    } \n\n    private void Border_MouseEnter(object sender, MouseEventArgs e) \n    { \n      foreach (DispatcherTimer timer in timers) \n      { \n        timer.Stop(); \n        Tuple<Feedback, DateTime> tag = \n          (Tuple<Feedback, DateTime>)timer.Tag; \n        tag.Item1.Duration = timer.Interval = tag.Item1.Duration. \n          Subtract(DateTime.Now.Subtract(tag.Item2)); \n      } \n    } \n\n    private void Border_MouseLeave(object sender, MouseEventArgs e) \n    { \n      foreach (DispatcherTimer timer in timers) \n      { \n        Feedback feedback = ((Tuple<Feedback, DateTime>)timer.Tag).Item1; \n        timer.Tag = new Tuple<Feedback, DateTime>(feedback, DateTime.Now); \n        timer.Start(); \n      } \n    } \n  } \n} \n```", "```cs\nFeedbackManager.Add(new Feedback(\"Here's some information for you\",  \n  FeedbackType.Information)); \nFeedbackManager.Add(\"Something was saved successfully\", true); \nFeedbackManager.Add(\"Something else went wrong\", false); \nFeedbackManager.Add(\"Something else went wrong too\", false); \n```", "```cs\nusing System; \nusing System.IO; \nusing System.Threading.Tasks;\n\n...\n\npublic async Task<string> GetTextFileContentsAsync(string filePath) \n{ \n  string fileContents = string.Empty; \n  try \n  { \n    using (StreamReader streamReader = File.OpenText(filePath)) \n    { \n      fileContents = await streamReader.ReadToEndAsync(); \n    } \n  } \n  catch { /*Log error*/ } \n  return fileContents; \n} \n```", "```cs\nusing System.Text;\n\n...\n\npublic async Task SetTextFileContentsAsync(string filePath,  \n  string contents) \n{ \n  try \n  { \n    byte[] encodedFileContents = Encoding.Unicode.GetBytes(contents); \n    using (FileStream fileStream = new FileStream(filePath,  \n      FileMode.OpenOrCreate, FileAccess.Write, FileShare.None, 4096, true))\n    { \n      await fileStream.WriteAsync(encodedFileContents, 0,  \n        encodedFileContents.Length); \n    } \n  } \n  catch { /*Log error*/ } \n} \n```", "```cs\nawait Task.Run(() => SynchronousMethod(parameter1, parameter2, etc)); \n```", "```cs\nTask task = SetFileContentsAsync(filePath, contents); \ntask.RunSynchronously(); \n```", "```cs\nusing System; \nusing System.Data.SqlClient; \nusing CompanyName.ApplicationName.DataModels.Enums; \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public abstract class DataOperationResult<T> \n  { \n    public DataOperationResult(string successText) \n    { \n      Description = string.IsNullOrEmpty(successText) ?  \n        \"The data operation was successful\" : successText; \n    } \n\n    public DataOperationResult(Exception exception, string errorText) \n    { \n      Exception = exception; \n      if (Exception is SqlException) \n      { \n        if (exception.Message.Contains(\"The server was not found\"))\n          Error = DataOperationError.DatabaseConnectionError;\n        else if (exception.Message.Contains(\"constraint\"))\n          Error = DataOperationError.DatabaseConstraintError; \n        // else Description = Exception.Message; \n      } \n      if (Error != DataOperationError.None)  \n        Description = Error.GetDescription(); \n      else  \n      { \n        Error = DataOperationError.UndeterminedDataOperationError; \n        Description = string.IsNullOrEmpty(errorText) ?  \n          Error.GetDescription() : errorText; \n      } \n    } \n\n    public DataOperationResult(Exception exception) : \n      this(exception, string.Empty) { } \n\n    public string Description { get; set; } \n\n    public DataOperationError Error { get; set; } = \n      DataOperationError.None; \n\n    public Exception Exception { get; set; } = null; \n\n    public bool IsSuccess =>  \n      Error == DataOperationError.None && Exception == null; \n  } \n} \n```", "```cs\nusing System.ComponentModel; \n\nnamespace CompanyName.ApplicationName.DataModels.Enums \n{ \n  public enum DataOperationError \n  { \n    [Description(\"\")] \n    None = 0, \n    [Description(\"A database constraint has not been adhered to, so this\n      operation cannot be completed\")] \n    DatabaseConstraintError = 9995, \n    [Description(\"There was an undetermined data operation error\")] \n    UndeterminedDataOperationError = 9997, \n    [Description(\"There was a problem connecting to the database\")] \n    DatabaseConnectionError = 9998, \n  } \n} \n```", "```cs\nusing System; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class GetDataOperationResult<T> : DataOperationResult<T> \n  { \n    public GetDataOperationResult(Exception exception, string errorText) :\n      base(exception, errorText) \n    { \n      ReturnValue = default(T); \n    } \n\n    public GetDataOperationResult(Exception exception) :  \n      this(exception, string.Empty) { } \n\n    public GetDataOperationResult(T returnValue, string successText) :  \n      base(successText) \n    { \n      ReturnValue = returnValue; \n    } \n\n    public GetDataOperationResult(T returnValue) : \n      this(returnValue, string.Empty) { } \n\n    public T ReturnValue { get; private set; } \n  } \n} \n```", "```cs\nusing System; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class SetDataOperationResult : DataOperationResult<bool> \n  { \n    public SetDataOperationResult(Exception exception, string errorText) :\n       base(exception, errorText) { } \n\n    public SetDataOperationResult(string successText) :  \n      base(successText) { } \n  } \n} \n```", "```cs\npublic void Add<T>(DataOperationResult<T> result, bool isPermanent) \n{ \n  Add(new Feedback(result.Description, result.IsSuccess, isPermanent)); \n} \n```", "```cs\nusing System; \nusing CompanyName.ApplicationName.Managers.Interfaces;\n\n...\n\nprivate IUiThreadManager uiThreadManager = null;\n\n...\n\npublic IUiThreadManager UiThreadManager \n{ \n  get { return uiThreadManager; } \n  set { uiThreadManager = value; } \n} \n\n...\n\npublic void Add(Feedback feedback) \n{ \n  UiThreadManager.RunOnUiThread((Action)delegate \n  { \n    Feedback.Add(feedback); \n  }); \n} \n```", "```cs\npublic BaseViewModel() \n{ \n  if (FeedbackManager.UiThreadManager == null) \n    FeedbackManager.UiThreadManager = UiThreadManager; \n} \n\n...\n\npublic IUiThreadManager UiThreadManager \n{ \n  get { return DependencyManager.Instance.Resolve<IUiThreadManager>(); } \n} \n```", "```cs\nDependencyManager.Instance.Register<IUiThreadManager, UiThreadManager>();\n```", "```cs\nusing System; \nusing System.Threading.Tasks; \nusing System.Windows.Threading; \n\nnamespace CompanyName.ApplicationName.Managers.Interfaces \n{ \n  public interface IUiThreadManager \n  { \n    object RunOnUiThread(Delegate method); \n\n    Task RunAsynchronously(Action method); \n\n    Task<TResult> RunAsynchronously<TResult>(Func<TResult> method); \n  } \n} \n```", "```cs\nusing System; \nusing System.Threading.Tasks;  \nusing System.Windows; \nusing System.Windows.Threading; \nusing CompanyName.ApplicationName.Managers.Interfaces; \n\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class UiThreadManager : IUiThreadManager \n  { \n    public object RunOnUiThread(Delegate method) \n    { \n      return Application.Current.Dispatcher.Invoke( \n        DispatcherPriority.Normal, method); \n    } \n\n    public Task RunAsynchronously(Action method) \n    { \n      return Task.Run(method); \n    } \n\n    public Task<TResult> RunAsynchronously<TResult>(Func<TResult> method) \n    { \n      return Task.Run(method); \n    } \n  } \n} \n```", "```cs\nusing System; \nusing System.Threading.Tasks; \nusing System.Windows.Threading; \nusing CompanyName.ApplicationName.Managers.Interfaces; \n\nnamespace Test.CompanyName.ApplicationName.Mocks.Managers \n{ \n  public class MockUiThreadManager : IUiThreadManager \n  { \n    public object RunOnUiThread(Delegate method) \n    { \n      return method.DynamicInvoke(); \n    } \n\n    public Task RunAsynchronously(Action method) \n    { \n      Task task = new Task(method); \n      task.RunSynchronously(); \n      return task; \n    } \n\n    public Task<TResult> RunAsynchronously<TResult>(Func<TResult> method) \n    { \n      Task<TResult> task = new Task<TResult>(method); \n      task.RunSynchronously(); \n      return task; \n    } \n  } \n} \n```", "```cs\nusing System; \nusing System.Diagnostics; \nusing System.Threading.Tasks; \nusing System.Windows.Threading; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.Managers.Interfaces; \n\nnamespace CompanyName.ApplicationName.Managers \n{ \n  public class DataOperationManager \n  { \n    private const int maximumRetryCount = 2; \n    private IUiThreadManager uiThreadManager; \n\n    public DataOperationManager(IUiThreadManager uiThreadManager) \n    { \n      UiThreadManager = uiThreadManager; \n    } \n\n    private IUiThreadManager UiThreadManager \n    { \n      get { return uiThreadManager.Instance; } \n      set { uiThreadManager = value; } \n    } \n\n    private FeedbackManager FeedbackManager \n    { \n      get { return FeedbackManager.Instance; } \n    } \n\n    public GetDataOperationResult<TResult> TryGet<TResult>( \n      Func<TResult> method, string successText, string errorText,  \n      bool isMessageSupressed) \n    { \n      Debug.Assert(method != null, \"The method input parameter of the\n        DataOperationManager.TryGet<TResult>() method must not be null.\"); \n      for (int index = 0; index < maximumRetryCount; index++) \n      { \n        try \n        { \n          TResult result = method(); \n          return WithFeedback(\n            new GetDataOperationResult<TResult>(result, successText), \n            isMessageSupressed); \n        } \n        catch (Exception exception) \n        { \n          if (index == maximumRetryCount - 1) \n          { \n            return WithFeedback(\n              new GetDataOperationResult<TResult>(exception, errorText),\n              isMessageSupressed); \n          } \n          Task.Delay(TimeSpan.FromMilliseconds(300)); \n        } \n      }  \n      return WithFeedback(\n        new GetDataOperationResult<TResult>(default(TResult), successText),\n        isMessageSupressed); \n    } \n\n    private GetDataOperationResult<TResult>WithFeedback<TResult>(      \n      GetDataOperationResult<TResult> dataOperationResult, bool  \n      isMessageSupressed) \n    { \n      if (isMessageSupressed && dataOperationResult.IsSuccess)  \n        return dataOperationResult; \n      FeedbackManager.Add(dataOperationResult, false); \n      return dataOperationResult; \n    } \n\n    public Task<GetDataOperationResult<TResult>> TryGetAsync<TResult>(\n      Func<TResult> method, string successText, string errorText,  \n      bool isMessageSupressed) \n    { \n      return UiThreadManager.RunAsynchronously(() => \n        TryGet(method, successText, errorText, isMessageSupressed)); \n    } \n\n    public SetDataOperationResult TrySet(Action method, \n      string successText, string errorText, bool isMessagePermanent, \n      bool isMessageSupressed) \n    { \n      Debug.Assert(method != null, \"The method input parameter of the\n        DataOperationManager.TrySet<TResult>() method must not be null.\"); \n      for (int index = 0; index < maximumRetryCount; index++) \n      { \n        try \n        { \n          method(); \n          return WithFeedback(new SetDataOperationResult(successText),\n            isMessagePermanent, isMessageSupressed); \n        } \n        catch (Exception exception) \n        { \n          if (index == maximumRetryCount - 1) \n          { \n            return WithFeedback(new SetDataOperationResult(exception,\n              errorText), isMessagePermanent, isMessageSupressed); \n          } \n          Task.Delay(TimeSpan.FromMilliseconds(300)); \n        } \n      } \n      return WithFeedback(new SetDataOperationResult(successText),  \n        isMessagePermanent, isMessageSupressed); \n    } \n\n    private SetDataOperationResult WithFeedback( \n      SetDataOperationResult dataOperationResult, \n      bool isMessagePermanent, bool isMessageSupressed) \n    { \n      if (isMessageSupressed && dataOperationResult.IsSuccess)  \n        return dataOperationResult; \n      FeedbackManager.Add(dataOperationResult, isMessagePermanent); \n      return dataOperationResult; \n    } \n\n    public Task<SetDataOperationResult> TrySetAsync(Action method) \n    { \n      return TrySetAsync(method, string.Empty, string.Empty); \n    } \n\n    public Task<SetDataOperationResult> TrySetAsync(Action method,  \n      string successText, string errorText) \n    { \n      return TrySetAsync(method, successText, errorText, false, false); \n    } \n\n    public Task<SetDataOperationResult> TrySetAsync(Action method,\n      string successText, string errorText, bool isMessagePermanent,  \n      bool isMessageSupressed) \n    { \n      return UiThreadManager.RunAsynchronously(() => TrySet(method, \n        successText, errorText, isMessagePermanent, isMessageSupressed)); \n    } \n  } \n} \n```", "```cs\nusing System; \nusing System.Threading.Tasks; \nusing CompanyName.ApplicationName.DataModels; \nusing CompanyName.ApplicationName.DataModels.Collections; \nusing CompanyName.ApplicationName.DataModels.Enums; \nusing CompanyName.ApplicationName.DataModels.Interfaces; \nusing CompanyName.ApplicationName.Managers; \nusing CompanyName.ApplicationName.Models.Interfaces; \n\nnamespace CompanyName.ApplicationName.Models.DataControllers \n{ \n  public class DataController \n  {\n    ...\n\n    private DataOperationManager dataOperationManager;\n\n    public DataController(IDataProvider dataProvider,  \n      DataOperationManager dataOperationManager, User currentUser) \n    { \n      ... \n      DataOperationManager = dataOperationManager;  \n      CurrentUser = currentUser.Clone();\n    } \n\n    protected DataOperationManager DataOperationManager \n    { \n      get { return dataOperationManager; } \n      private set { dataOperationManager = value; } \n    }\n\n    ... \n\n    public Task<SetDataOperationResult> AddProductAsync(Product product) \n    { \n      return DataOperationManager.TrySetAsync(() =>  \n        DataProvider.AddProduct(InitializeDataModel(product)), \n        $\"{product.Name} was added to the data source successfully\", $\"A \n        problem occurred and {product.Name} was not added to the data \n        source.\"); \n    } \n\n    public Task<SetDataOperationResult> DeleteProductAsync( \n      Product product) \n    { \n      return DataOperationManager.TrySetAsync(() =>  \n        DataProvider.DeleteProduct(DeleteDataModel(product)), \n        $\"{product.Name} has been deleted from the data source \n        successfully.\", $\"A problem occurred and {product.Name} was not\n        deleted from the data source.\", true, false); \n    } \n\n    public Task<GetDataOperationResult<Products>> GetProductsAsync() \n    { \n      return DataOperationManager.TryGetAsync(() =>  \n        DataProvider.GetProducts(), string.Empty, \"A problem occurred when\n        trying to retrieve the products.\", true); \n    } \n\n    public SetDataOperationResult UpdateProduct(Product product) \n    { \n      return DataOperationManager.TrySet(() =>  \n        DataProvider.UpdateProduct(UpdateDataModel(product)), \n        $\"{product.Name} was saved in the data source successfully.\", $\"A\n        problem occurred and {product.Name} was not updated in the data \n        source.\", false, false); \n    } \n\n    private T InitializeDataModel<T>(T dataModel)  \n      where T : class, IAuditable, new() \n    { \n      dataModel.Auditable = new Auditable(dataModel, CurrentUser); \n      if (dataModel is ISynchronizableDataModel<T>) \n      { \n        ISynchronizableDataModel<T> synchronisableDataModel =  \n          (ISynchronizableDataModel<T>)dataModel; \n        synchronisableDataModel.ObjectState = ObjectState.Active; \n      } \n      return dataModel; \n    } \n\n    private T DeleteDataModel<T>(T dataModel)  \n      where T : class, IAuditable, new() \n    { \n      dataModel.Auditable.UpdatedOn = DateTime.Now; \n      dataModel.Auditable.UpdatedBy = CurrentUser; \n      if (dataModel is ISynchronizableDataModel<T>) \n      { \n        ISynchronizableDataModel<T> synchronisableDataModel =  \n          (ISynchronizableDataModel<T>)dataModel; \n        synchronisableDataModel.ObjectState = ObjectState.Deleted; \n      } \n      return dataModel; \n    } \n\n    private T UpdateDataModel<T>(T dataModel)  \n      where T : class, IAuditable, new() \n    { \n      dataModel.Auditable.UpdatedOn = DateTime.Now; \n      dataModel.Auditable.UpdatedBy = CurrentUser; \n      return dataModel; \n    } \n  } \n} \n```", "```cs\nprotected DataController Model \n{ \n  get { return new DataController(\n    DependencyManager.Instance.Resolve<IDataProvider>(), \n    new DataOperationManager(UiThreadManager), \n    StateManager.CurrentUser); } \n}\n\n...\n\npublic IUiThreadManager UiThreadManager \n{ \n  get { return DependencyManager.Instance.Resolve<IUiThreadManager>(); } \n} \n```", "```cs\nSystem.Diagnostics.Process.Start(filePath); \n```", "```cs\nstring filePath = System.AppDomain.CurrentDomain.BaseDirectory; \n```", "```cs\nstring filePath = Path.Combine(\n  new DirectoryInfo(System.AppDomain.CurrentDomain.BaseDirectory).\n  Parent.Parent.FullName, \"Resources\"); \n```", "```cs\n<Image Source=\"pack://application:,,,/CompanyName.ApplicationName; \n  component/Images/Information_16.png\" Stretch=\"None\" ToolTip=\"Here is  \n  some relevant information\" /> \n```", "```cs\nusing System; \nusing System.Windows; \nusing CompanyName.ApplicationName.ViewModels; \n\nnamespace CompanyName.ApplicationName \n{ \n  public partial class MainWindow : Window \n  { \n    public MainWindow() \n    { \n      InitializeComponent(); \n      Loaded += MainWindow_Loaded; \n      Closed += MainWindow_Closed; \n    } \n\n    private void MainWindow_Loaded(object sender, RoutedEventArgs e) \n    { \n      MainWindowViewModel viewModel = new MainWindowViewModel(); \n      viewModel.LoadSettings(); \n      DataContext = viewModel; \n    } \n\n    private void MainWindow_Closed(object sender, EventArgs e) \n    { \n      MainWindowViewModel viewModel = (MainWindowViewModel)DataContext; \n      viewModel.SaveSettings(); \n    } \n  } \n} \n```", "```cs\nusing CompanyName.ApplicationName.ViewModels.Properties;\n\n...\n\npublic void LoadSettings() \n{ \n  Settings.Default.Reload(); \n  StateManager.AreAuditFieldsVisible =\n    Settings.Default.AreAuditFieldsVisible; \n  StateManager.AreSearchTermsSaved = Settings.Default.AreSearchTermsSaved; \n} \n\npublic void SaveSettings() \n{ \n  Settings.Default.AreAuditFieldsVisible = \n    StateManager.AreAuditFieldsVisible;\n  Settings.Default.AreSearchTermsSaved = StateManager.AreSearchTermsSaved;\n  Settings.Default.Save(); \n} \n```", "```cs\nusing System.Configuration;\n\n...\n\nstring filePath = ConfigurationManager.OpenExeConfiguration( \n  ConfigurationUserLevel.PerUserRoamingAndLocal).FilePath; \n```", "```cs\nC:\\Users\\Sheridan\\AppData\\Local\\CompanyName\\  \n  CompanyName.ApplicationNa_Url_0nu0qp14li5newll2223u0ytheisf2gh\\\n  1.0.0.0\\user.config \n```", "```cs\npublic static string Pluralize(this int input, string wordToAdjust) \n{ \n  return $\"{wordToAdjust}{(input == 1 ? string.Empty : \"s\")}\"; \n} \n```", "```cs\npublic string TicketCountText => Tickets.Count.Pluralize(\"Ticket\"); \n```", "```cs\npublic static string Combine(this int input, string wordToAdjust) \n{ \n  return $\"{input} {wordToAdjust}{(input == 1 ? string.Empty : \"s\")}\"; \n} \n```", "```cs\npublic string TicketCountText => Tickets.Count.Combine(\"Ticket\"); \n```", "```cs\nusing System.Text;\n\n...\n\npublic static string ToCommaSeparatedString<T>( \n  this IEnumerable<T> collection) \n{ \n  StringBuilder stringBuilder = new StringBuilder(); \n  int index = 0; \n  foreach (T item in collection) \n  { \n    if (index > 0) \n    { \n      if (index < collection.Count() - 1) stringBuilder.Append(\", \"); \n      else if (index == collection.Count() - 1)  \n        stringBuilder.Append(\" and \"); \n    } \n    stringBuilder.Append(item.ToString()); \n    index++; \n  } \n  return stringBuilder.ToString(); \n} \n```", "```cs\nSelectedProducts.Select(p => p.Name).ToCommaSeparatedString(); \n```", "```cs\nprivate bool isFocused = false;\n\n...\n\npublic bool IsFocused \n{ \n  get { return isFocused; } \n  set { if (isFocused != value) { isFocused = value;\n    NotifyPropertyChanged(); } } \n}\n```", "```cs\n<Style TargetType=\"{x:Type TextBox}\"> \n  <!-- Define default TextBox style here --> \n</Style> \n<Style x:Key=\"FocusableTextBoxStyle\" TargetType=\"{x:Type TextBox}\"  \n  BasedOn=\"{StaticResource {x:Type TextBox}}\"> \n  <Style.Triggers> \n    <DataTrigger Binding=\"{Binding IsFocused}\" Value=\"True\"> \n      <Setter Property=\"FocusManager.FocusedElement\"  \n        Value=\"{Binding RelativeSource={RelativeSource Self}}\" /> \n    </DataTrigger> \n  </Style.Triggers> \n</Style> \n```", "```cs\nIsFocused = true; \n```", "```cs\nUserName = WindowsIdentity.GetCurrent().Name; \n```"]