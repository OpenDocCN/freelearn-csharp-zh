["```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 using System.Collections.Generic;\n04 //----------------------------------------\n05 //Sample enemy class for holding enemy data\n06 [System.Serializable]\n07 public class Enemy\n08 {\n09 public int Health = 100;\n10 public int Damage = 10;\n11 public int Defense = 5;\n12 public int Mana = 20;\n13 public int ID = 0;\n14 }\n15 //----------------------------------------\n16 public class Using_List : MonoBehaviour \n17 {\n18 //----------------------------------------\n19 //List of active enemies in the scene\n20 public List<Enemy> Enemies = new List<Enemy>();\n21 //----------------------------------------\n22 // Use this for initialization\n23 void Start () \n24 {\n25        //Add 5 enemies to the list\n26        for(int i=0; i<5; i++)\n27              Enemies.Add (new Enemy()); //Add method inserts item to end of the list\n28 \n29        //Remove 1 enemy from start of list (index 0)\n30        Enemies.RemoveRange(0,1);\n31 \n32        //Iterate through list \n33        foreach (Enemy E in Enemies)\n34        {\n35              //Print enemy ID\n36              Debug.Log (E.ID);\n37        }\n38 }\n39 }\n40 //----------------------------------------\n```", "```cs\n //Remove all items from a loop \n void RemoveAllItems()\n {\n    //Traverse list backwards\n for(int i = Enemies.Count-1; i>=0; i--)\n    {\n         //Call function on enemy before removal\n         Enemies[i].MyFunc();\n\n        //Remove this enemy from list\n        Enemies.RemoveAt(i);\n    }\n }\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 using System.Collections.Generic; \n04 \n05 public class Using_Dictionary : MonoBehaviour \n06 {\n07 //Database of words. <Word, Score> key-value pair\n08 public Dictionary<string, int> WordDatabase = new Dictionary<string, int>();\n\n09 \n10 // Use this for initialization\n11 void Start () \n12 {\n13        //Create some words\n14        string[] Words = new string[5];\n15        Words[0]=\"hello\";\n16        Words[1]=\"today\";\n17        Words[2]=\"car\";\n18        Words[3]=\"vehicle\";\n19        Words[4]=\"computers\";\n20 \n21        //add to dictionary with scores \n22        foreach(string Word in Words)\n23             WordDatabase.Add(Word, Word.Length);\n24  \n25       //Pick word from list using key value\n26       //Uses array syntax! \n27       Debug.Log (\"Score is: \" + WordDatabase[\"computers\"].ToString());\n\n28 }\n29 }\n```", "```cs\n using UnityEngine;\n using System.Collections;\n using System.Collections.Generic;\n //------------------------------------------\n [System.Serializable]\n public class PlayingCard\n {\n    public string Name;\n    public int Attack;\n    public int Defense;\n }\n //------------------------------------------\n public class Using_Stack : MonoBehaviour \n {\n    //------------------------------------------\n   //Stack of cards\n   public Stack<PlayingCard> CardStack = new Stack<PlayingCard>();\n   //------------------------------------------\n    // Use this for initialization\n    void Start () \n   {\n         //Create card array\n         PlayingCard[] Cards = new PlayingCard[5];\n\n        //Create cards with sample data\n        for(int i=0; i<5; i++)\n        {\n                Cards[i] = new PlayingCard();\n                Cards[i].Name = \"Card_0\" + i.ToString();\n                Cards[i].Attack = Cards[i].Defense = i * 3;\n\n                //Push card onto stack\n                CardStack.Push(Cards[i]);\n          }\n\n          //Remove cards from stack while(CardStack.Count > 0)\n          {\n                PlayingCard PickedCard = CardStack.Pop();\n\n                //Print name of selected card\n                Debug.Log (PickedCard.Name);\n          }\n   }\n   //------------------------------------------\n }\n //------------------------------------------\n```", "```cs\n //Create a total variable\n int Total = 0;\n\n //Loop through List object, from left to right\n for(int i=0; i<MyList.Count; i++)\n {\n    //Pick number from list\n    int MyNumber = MyList[i];\n\n    //Increment total\n    Total += MyNumber;\n }\n```", "```cs\n //Create a total variable\n int Total = 0;\n\n //Loop through List object, from left to right\n foreach(int Number in MyList)\n {\n    //Increment total\n    Total += Number;\n }\n```", "```cs\n //Get all wizards\n Wizard[] WizardsInScene = Object.FindObjectsOfType<Wizard>();\n\n //Cycle through wizards\n foreach (Wizard W in WizardsInScene)\n {\n    //Access each wizard through W\n }\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 using System.Collections.Generic;\n04 //----------------------------------------------------\n05 //Class derives from IEnumerator\n06 //Handles bounds safe iteration of all wizards in scene\n07 public class WizardEnumerator : IEnumerator\n08 {\n09 //Current wizard object pointed to by enumerator\n10 private Wizard CurrentObj = null;\n11 //----------------------------------------------------\n12 //Overrides movenext\n13 public bool MoveNext()\n14 {\n15       //Get next wizard\n16       CurrentObj = (CurrentObj==null) ? Wizard.FirstCreated : CurrentObj.NextWizard;\n\n17 \n18       //Return the next wizard\n19       return (CurrentObj != null);\n20 }\n21 //----------------------------------------------------\n22 //Resets the iterator back to the first wizard\n23 public void Reset()\n24 {\n25       CurrentObj = null;\n26 }\n27 //----------------------------------------------------\n28 //C# Property to get current wizard\n29 public object Current\n30 {\n31       get{return CurrentObj;} \n32 }\n33 //----------------------------------------------------\n34 }\n35 //----------------------------------------------------\n36 //Sample class defining a wizard object\n37 //Derives from IEnumerable, allowing looping with foreach\n38 [System.Serializable]\n39 public class Wizard : MonoBehaviour, IEnumerable\n40 {\n41 //----------------------------------------------------\n42 //Reference to last created wizard\n43 public static Wizard LastCreated = null;\n44 \n45 //Reference to first created wizard\n46 public static Wizard FirstCreated = null;\n47 \n48 //Reference to next wizard in the list\n49 public Wizard NextWizard = null;\n50 \n51 //Reference to previous wizard in the list\n52 public Wizard PrevWizard = null;\n53 \n54 //Name of this wizard\n55 public string WizardName = \"\";\n56 //----------------------------------------------------\n57 //Constructor\n58 void Awake()\n59 {\n60       //Should we update first created\n61      if(FirstCreated==null)\n62             FirstCreated = this;\n63 \n64       //Should we update last created\n65       if(Wizard.LastCreated != null) \n66       {\n67              Wizard.LastCreated.NextWizard = this;\n68              PrevWizard = Wizard.LastCreated;\n69       }\n70 \n71        Wizard.LastCreated = this;\n72 }\n73 //----------------------------------------------------\n74 //Called on object destruction\n75 void OnDestroy()\n76 {\n77       //Repair links if object in chain is destroyed\n78       if(PrevWizard!=null)\n79              PrevWizard.NextWizard = NextWizard;\n80 \n81       if(NextWizard!=null) \n82              NextWizard.PrevWizard = PrevWizard;\n83 }\n84 //----------------------------------------------------\n85 //Get this class as enumerator\n86 public IEnumerator GetEnumerator()\n87 {\n88        return new WizardEnumerator();\n89 }\n90 //----------------------------------------------------\n91 }\n92 //-------------------------------------------------------------------\n```", "```cs\nvoid Update()\n{\n   //Press space to list all wizards in scene\n   if(Input.GetKeyDown(KeyCode.Space))\n   {\n         //Get first wizard through static member\n         Wizard WizardCollection= Wizard.FirstCreated;\n\n         //If there is at least one wizard, then loop them all\n         if(Wizard.FirstCreated != null)\n          {\n                //Loop through all wizards in foreach\n                foreach(Wizard W in WizardCollection)\n                       Debug.Log (W.WizardName);\n\n          }\n   }\n}\n```", "```cs\nvoid Update()\n{\n   //Press space to list all wizards in scene\n   if(Input.GetKeyDown(KeyCode.Space))\n   {\n         //Get Enumerator\n         IEnumerator WE = Wizard.FirstCreated.GetEnumerator();\n\n          while(WE.MoveNext())\n          {\n                Debug.Log(((Wizard)WE.Current).WizardName);\n          }\n   }\n}\n```", "```cs\n using UnityEngine;\n using System.Collections;\n //-------------------------------------------------------------\n //Class extension to add Null or White Space functionality\n public static class StringExtensions {\n public static bool IsNullOrWhitespace(this string s){\n          return s == null || s.Trim().Length == 0;\n    }\n }\n //-------------------------------------------------------------\n public class StringOps : MonoBehaviour \n {\n    //Validate string\n    public bool IsValid(string MyString)\n    {\n          //Check for null or white space\n if(MyString.IsNullOrWhitespace()) return false;\n\n          //Now validate further\n          return true;\n    }\n }\n //-------------------------------------------------------------\n```", "```cs\n   //Compare strings\n   public bool IsSame(string Str1, string Str2)\n   {\n        //Ignore case\n         return string.Equals(Str1, Str2, System.StringComparison.CurrentCultureIgnoreCase);\n   }\n```", "```cs\n   //Compare strings as hash\n   public bool StringHashCompare(string Str1, string Str2)\n   {\n          int Hash1 = Animator.StringToHash(Str1);\n          int Hash2 = Animator.StringToHash(Str2);\n\n         return Hash1 == Hash2;\n   }\n```", "```cs\n   //Sort comparison\n   public int StringOrder (string Str1, string Str2)\n   {\n          //Ignores case\n          return string.Compare(Str1, Str2, \nSystem.StringComparison.CurrentCultureIgnoreCase);\n   }\n```", "```cs\n//Construct string from three numbers\npublic void BuildString(int Num1, int Num2, float Num3)\n{\n   string Output = string.Format(\"Number 1 is: {0}, Number 2 is: {1}, Number 3 is: {2}\", Num1, Num2, Num3);\n\n   Debug.Log (Output.ToString(\"n2\"));\n}\n```", "```cs\n   //Sample 6-16\n//Loops through string in foreach\n   public void LoopLettersForEach(string Str)\n   {\n          //For each letter\n          foreach(char C in Str)\n          {\n               //Print letter to console\n               Debug.Log (C);\n          }\n   }\n\n//Sample 6-17\n   //Loop through string as iterator\n   public void LoopLettersEnumerator(string Str)\n   {\n         //Get Enumerator\n         IEnumerator StrEnum = Str.GetEnumerator();\n\n         //Move to nextletter\n         while(StrEnum.MoveNext())\n        {\n               Debug.Log ((char)StrEnum.Current);\n        }\n   }\n```", "```cs\nstring MyString = string.Empty;\n```", "```cs\n   //Searches string for a specified word and returns found index of first occurrence\n   public int SearchString(string LargerStr, string SearchStr)\n   {\n          //Ignore case\n          return LargerStr.IndexOf(SearchStr, System.StringComparison.CurrentCultureIgnoreCase);\n   }\n```", "```cs\n01 //-------------------------------------------------------\n02 using UnityEngine;\n03 using System.Collections;\n04 //Must include Regular Expression Namespace\n05 using System.Text.RegularExpressions;\n06 //-------------------------------------------------------\n07 public class RGX : MonoBehaviour \n08 {\n09 //Regular Expression Search Pattern\n10 string search = \"[dw]ay\";\n11 \n12 //Larger string to search\n13 string txt = \"hello, today is a good day to do things my way\";\n14 \n15 // Use this for initialization\n16 void Start () \n17 {\n18        //Perform search and get first result in m\n19        Match m = Regex.Match(txt, search);\n20 \n21        //While m refers to a search result, loop\n22        while(m.Success)\n23        {\n24              //Print result to console\n25              Debug.Log (m.Value);\n26 \n27             //Get next result, if any\n28             m = m.NextMatch();\n29        }\n30 }\n31 }\n32 //-------------------------------------------------------\n```", "```cs\n01 public int Sum(params int[] Numbers)\n02 {\n03 int Answer = 0;\n04 \n05 for(int i=0; i<Numbers.Length; i++)\n06         Answer += Numbers[i];\n07 \n08 return Answer;\n09 }\n```", "```cs\n //-------------------------------------------\n using UnityEngine;\n using System.Collections;\n //-------------------------------------------\n public class Enemy : MonoBehaviour \n {\n    public int Health = 100;\n    public int Mana = 20;\n   public int Attack = 5; \n    public int Defense = 10;\n }\n //-------------------------------------------\n```", "```cs\n //Get list of enemies matching search criteria\n public void FindEnemiesOldWay()\n {\n    //Get all enemies in scene\n    Enemy[] Enemies = Object.FindObjectsOfType<Enemy>();\n\n    //Filtered Enemies\n    List<Enemy> FilteredData = new List<Enemy>();\n\n    //Loop through enemies and check\n foreach(Enemy E in Enemies)\n    {\n if(E.Health <= 50 && E.Defense < 5)\n         {\n               //Found appropriate enemy\n               FilteredData.Add (E);\n         }\n    }\n\n    //Now we can process filtered data\n    //All items in FilteredData match search criteria\n    foreach(Enemy E in FilteredData)\n    {\n         //Process Enemy E\n         Debug.Log (E.name);\n    }\n }\n```", "```cs\n01 using UnityEngine;\n02 using System.Collections;\n03 using System.Collections.Generic;\n04 using System.Linq;\n05 //-------------------------------------------------\n06 public void FindEnemiesLinqWay()\n07 {\n08 //Get all enemies in scene\n09 Enemy[] Enemies = Object.FindObjectsOfType<Enemy>();\n10 \n11 //Perform search\n12 Enemy[] FilteredData = (from EnemyChar in Enemies\n13         where EnemyChar.Health <= 50 && EnemyChar.Defense < 5\n14         select EnemyChar).ToArray();\n15 \n16 //Now we can process filtered data\n17 //All items in FilteredData match search criteria\n18 foreach(Enemy E in FilteredData)\n19 {\n20       //Process Enemy E\n21       Debug.Log (E.name);\n22 }\n23 }\n24 //-------------------------------------------------\n```", "```cs\n01 //Generate female name\n02 //Regular Expression Search Pattern\n03 //Find all names prefixed with 'female:' but do not include the prefix in the results\n04 string search = @\"(?<=\\bfemale:)\\w+\\b\";\n05 \n06 //CSV Data - names of characters\n07 string CSVData = \"male:john,male:tom,male:bob,female:betty,female:jessica,male:dirk\";\n\n08 \n09 //Retrieve all prefixed with 'female'. Don't include prefix\n10 string[] FemaleNames = (from Match m in Regex.Matches(CSVData, search)\n\n11          select m.Groups[0].Value).ToArray();\n12 \n13 //Print all female names in results\n14 foreach(string S in FemaleNames)\n15 Debug.Log (S);\n16 \n17 //Now pick a random female name from collection\n18 string RandomFemaleName = FemaleNames[Random.Range(0, FemaleNames.Length)];\n```", "```cs\n//--------------------------------------------------\nusing UnityEngine;\nusing System.Collections;\n//--------------------------------------------------\npublic class TextFileAccess : MonoBehaviour \n{\n   //Reference a text file\n   public TextAsset TextData = null;\n\n   // Use this for initialization\n   void Start () \n   {\n         //Display text in file\n         Debug.Log (TextData.text);\n   }\n}\n//--------------------------------------------------\n```", "```cs\n using UnityEngine;\n using System.Collections;\n using System.IO;\n\n //Function to load text data from external file\n public static string LoadTextFromFile(string Filename)\n {\n    //If file does not exist on system, then return empty string\n    if(!File.Exists(Filename)) return string.Empty;\n\n    //File exists, now load text from file\n    return File.ReadAllText(Filename);\n }\n```", "```cs\n //Function to load text data, line by line, into a string array\n public static string[] LoadTextAsLines(string Filename)\n {\n    //If file does not exist on system, then return empty array\n    if(!File.Exists(Filename)) return null; \n\n    //Get lines\n    return File.ReadAllLines(Filename);\n }\n```", "```cs\nApplicationName=MyTestApp\nDate=1st Nov 2014\nAuthor=Alan Thorn\nEngine=Unity\nBuild=Production\n```", "```cs\n using UnityEngine;\n using System.Collections;\n using System.Collections.Generic;\n using System.IO;\n using System.Text;\n\n //Function to read basic ini file to dictionary\n public static Dictionary<string, string> ReadINIFile(string Filename)\n {\n    //If file does not exist on system, then return null\n    if(!File.Exists(Filename)) return null;\n\n    //Create new dictionary\n    Dictionary<string, string> INIFile = new Dictionary<string, string>();\n\n    //Create new stream reader\n    using (StreamReader SR = new StreamReader(Filename))\n   {\n         //String for current line\n         string Line;\n\n         //Keep reading valid lines\n         while(!string.IsNullOrEmpty(Line = SR.ReadLine()))\n         {\n                //Trim line of leading and trailing white space\n                Line.Trim();\n\n                //Split the line at key=value\n                string[] Parts = Line.Split(new char[] {'='});\n\n                //Now add to dictionary\n                INIFile.Add(Parts[0].Trim(), Parts[1].Trim());\n         }\n    }\n\n    //Return dictionary\n    return INIFile;\n }\n```", "```cs\n //Build a dictionary from an INI file\n Dictionary<string,string> DB = ReadINIFile(@\"c:\\myfile.ini\");\n\n //List all entries in dictionary\n foreach(KeyValuePair<string, string> Entry in DB)\n {\n    //Loop through each key and value pair\n    Debug.Log(\"Key: \" + Entry.Key + \" Value: \" + Entry.Value);\n }\n```", "```cs\n //Function to load a string array from a CSV file\n public static string[] LoadFromCSV(string Filename)\n {\n    //If file does not exist on system, then return null\n    if(!File.Exists(Filename)) return null;\n\n    //Get all text\n    string AllText = File.ReadAllText(Filename);\n\n    //Return string array\n    return AllText.Split(new char[] {','});\n }\n```", "```cs\n //Gets text from the web in a string\n public IEnumerator GetTextFromURL(string URL)\n {\n    //Create new WWW object\n WWW TXTSource = new WWW(URL);\n\n    //Wait for data to load\n    yield return TXTSource;\n\n    //Now get text data\n string ReturnedText = TXTSource.text;\n }\n```"]