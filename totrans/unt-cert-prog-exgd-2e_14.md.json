["```cs\n    public class SuperFox : MonoBehaviour\n         {\n              public float superAttack = 1f;\n              public float superFly = 5f;     \n         }\n    ```", "```cs\nprogressChargeBar = GetComponent<Image>();\nprogressChargeBar.fillMethod = Image.FillMethod.Vertical;\nprogressChargeBar.fillAmount = 0;\nprogressChargeBar.type = Image.Type.Filled;\n```", "```cs\nprogressChargeBar = GetComponent<Image>();\nprogressChargeBar.fillMethod = Image.FillMethod.Radial180;\nprogressChargeBar.fillAmount = 100;\nprogressChargeBar.type = Image.Type.Simple;\n```", "```cs\nprogressChargeBar = GetComponent<Image>();\nprogressChargeBar.fillMethod = Image.FillMethod.Horizontal;\nprogressChargeBar.fillAmount = 50;\nprogressChargeBar.type = Image.Type.Sliced;\n```", "```cs\nprogressChargeBar = GetComponent<Image>();\nprogressChargeBar.fillMethod = Image.FillMethod.Vertical;\nprogressChargeBar.fillAmount = 0;\nprogressChargeBar.type = Image.Type.Tiled;\n```", "```cs\npublic class BusRacer : MonoBehaviour\n{\n     public int playerCount;\n     public Bus smallBus;\n     private void Start()\n     {\n          CreateAndPlaceBus();\n     }\n     private void Update()\n     {\n          Bus[] buses = FindObjectsOfType<Bus>();\n          foreach (Bus b in buses)\n          {\n               b.Drive();\n          }\n     }\n     private void CreateAndPlaceBus()\n     {\n          for (int i = 0; i < playerCount; i++)\n          {\n               var busDriver = \n               Object.Instantiate(smallBus);\n               busDriver.transform.position =\n               StartingPosition();\n          }\n     }\n     private Vector3 StartingPosition()\n     {\n          //TODO Needs filling with content\n          return Vector3.zero;\n     }\n}\npublic class Bus : MonoBehaviour\n{\n     public void Drive()\n     {\n          //TODO drive fast\n     }\n}\n```", "```cs\npublic class DrunkenMaster : MonoBehaviour\n{\n     private string talk;\n     private float drinkMeter;\n     private Vector2 location;\n     private float runSpeed;\n     private float punchStrength;\n     private float kickStrength;\n     private float rolyPolySpeed;\n     public MeshRenderer mesh;\n     public TextMesh label;\n     public void Update()\n     {\n          //Get Input\n          float kickForce = \n          Input.GetAxis(\"KickForce\");\n          float punchForce = \n          Input.GetAxis(\"PunchForce\");\n          float rolyPolyForce = \n          Input.GetAxis(\"RolyPolyForce\");\n          //set drunk strength\n          punchStrength = Mathf.Clamp(punchStrength - \n          punchForce, 0, 120);\n          kickStrength = Mathf.Clamp(kickStrength + \n          kickForce, -45, 45);\n          rolyPolySpeed = Mathf.Clamp(rolyPolySpeed - \n          rolyPolyForce, -45, 45);\n          //update position and drunken monkey skills\n          transform.position = new Vector3(location.x, \n          drinkMeter, location.y);\n          transform.rotation = \n          Quaternion.Euler(Vector3.forward);\n          transform.Rotate(Vector3.up, punchStrength, \n          Space.Self);\n          transform.Rotate(Vector3.forward, \n          rolyPolySpeed, Space.Self);\n          transform.Rotate(Vector3.right, \n          kickStrength, Space.Self);\n          //apply abuse UI\n          label.text = talk;\n     }\n}\n```", "```cs\n     public float waterMeasurements = 10f;\n     private void Start()\n     {\n          StartCoroutine(CheckWaterDrank());\n     }\n     private void Update()\n     {\n          //Drinking Water\n          waterMeasurements -= Time.deltaTime;\n     }\n     IEnumerator CheckWaterDrank()\n     {\n          bool AnyWaterLeft()\n          {\n               return waterMeasurements <= 0;\n          }\n          //ADD NEW CODE HERE...\n          Debug.Log(\"No water left\");\n     }\n```", "```cs\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class VampireBats : MonoBehaviour\n{\n     public GameObject batPrefab;\n     public float spawnRate = 10f;\n     private float timer = 0f;\n     private List<Bat> bats;\n     private void Start()\n     {\n          bats = new List<Bat>();\n     }\n     private void Update()\n     {\n          timer += Time.deltaTime;\n          if (timer > spawnRate)\n          {\n               SpawnBats();\n          }\n     }\n     private void SpawnBats()\n     {\n          timer -= spawnRate;\n          GameObject spawnedBat = \n          Instantiate(batPrefab, transform);\n          Bat batToAdd = \n          spawnedBat.GetComponent<Bat>();\n          bats.Add(batToAdd);\n     }\n     public void BeamOfLight()\n     {\n          //NEW CODE TO ADD\n     }\n}\n```", "```cs\n          for (int i = bats.Count - 1; 1 >= 0; i--)\n          {\n               if (bats[i].IsInTheLight())\n               {\n                    monsters.Remove(bats[i]);\n                    Destroy(monsters[i].gameObject);\n               }\n     }\n```", "```cs\n              for (int i = 0; i < bats.Count; i++)\n          {\n               if (bats[i].IsInTheLight())\n               {\n                    bats.Remove(bats[i]);\n                    Destroy(bats[i].gameObject);\n               }\n          }\n```", "```cs\n              for (int i = 0; i < bats.Count; i++)\n          {\n               Bat thisBat = bats[i];\n               if (bats[i].IsInTheLight())\n               {\n                    bats.Remove(thisBat);\n                    Destroy(thisBat.gameObject);\n               }\n          }\n```", "```cs\n           for (int i = bats.Count - 1; i >= 0; i--)\n          {\n               Bat thisBat = bats[i];\n               if (bats[i].IsInTheLight())\n               {\n                    bats.Remove(thisBat);\n                    Destroy(thisBat.gameObject);\n               }\n          }\n```", "```cs\npublic class CoinCounter : MonoBehaviour\n{\n     private bool init;\n#if UNITY_EDITOR\n     public int CoinCollection { get; private set; }\n#else\n     CoinCollection = 1;\n#endif\n     public void Count()\n     {\n          CoinCollection += 1;\n          init = true;\n     }\n     public void Reset()\n     {\n#if UNITY_EDITOR\n          if (init)\n          {\n               CoinCollection = 0;\n          }\n#endif\n     }\n}\n```", "```cs\n    using System.Collections.Generic;\n    using UnityEngine;\n    public class GameManager : MonoBehaviour\n    {\n         public static GameManager Instance\n         {\n              get;\n              private set;\n         }\n         private List<GameObject> objectsInTheScene;\n         public void Bucket(GameObject go)\n         {\n              objectsInTheScene.Add(go);\n         }\n    }\n    public class AnotherDumbClass : MonoBehaviour\n    {\n         private void Start()\n         {\n              GameManager.Bucket(gameObject);\n         }\n    }\n    ```", "```cs\nusing UnityEngine;\npublic class StartGame : MonoBehaviour\n{\n     private void Update()\n     {\n          WaitingForTouch();\n     }\n     private void WaitingForTouch()\n     {\n          if (Input.touches.Length > 0)\n          {\n               Touch touch = Input.GetTouch(0);\n               if (/* ENTER CODE HERE */)\n               {\n                    LaunchCustardPieInTheirFace();\n               }\n          }\n     }\n}\n```", "```cs\nusing UnityEngine;\npublic class ZoomPacer : MonoBehaviour\n{\n     public int points;\n     private void FixedUpdate()\n     {\n          if (Input.GetKeyDown(KeyCode.Space))\n          {\n               points++;\n          }\n     }\n}\n```", "```cs\nusing UnityEngine;\npublic class Car : MonoBehaviour\n{\n     public float wallImpactForce = 88f;\n     private void OnTriggerEnter(Collider other)\n     {\n          Rigidbody rb = \n          other.GetComponent<Rigidbody>();\n          rb.AddForce(Vector3.up * wallImpactForce);\n     }\n}\n```", "```cs\n     public delegate void EatFood();\n     public EatFood onTriggerFood;\n     void OnEnable()\n     {\n          onTriggerFood += Apple;\n     }\n     void OnDisable()\n     {\n          onTriggerFood -= Apple;\n     }\n     void Start()\n     {\n          onTriggerFood.Invoke();\n     }\n     void Apple()\n     {\n          Debug.Log(\"MUNCH\");\n     }\n```", "```cs\npublic class Swimmer : MonoBehaviour\n{\n     [SerializeField]\n     private int swimmingSpeed = 30;\n\n     private void FixedUpdate()\n     {\n          if (Input.GetKey(KeyCode.A))\n          {\ntransform.position += new Vector3(1 , 0 , 0) * swimmingSpeed * Time.deltaTime;\n          }\n          if (Input.GetKey(KeyCode.D))\n          {\ntransform.position -= new Vector3(1 , 0, 0) * swimmingSpeed * Time.deltaTime;\n          }\n     }\n}\n```"]