- en: Chapter 6. The Sharing Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章. 分享游戏
- en: 'In this chapter, we will discuss one of the most interesting and important
    aspects of developing with Xamarin: cross-platform code sharing. We will cover
    the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论使用Xamarin开发中最有趣和最重要的方面之一：跨平台代码共享。我们将涵盖以下主题：
- en: The file linking technique
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件链接技术
- en: Portable Class Libraries
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可移植类库
- en: The pros and cons of each approach
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每种方法的优缺点
- en: Sharing and reuse
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分享和重用
- en: One of the advantages of using Xamarin and C# is the ability to share code across
    your mobile apps as well as other .NET solutions. The reuse of code can provide
    significant productivity and reliability advantages as well as reduce many of
    the long-term maintenance headaches that come with long-lived apps. That's great,
    but anyone who has been involved in software development for a long period of
    time understands that reuse is not free and not simple to achieve.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Xamarin和C#的一个优点是能够在移动应用程序以及其他.NET解决方案之间共享代码。代码的重用可以提供显著的生产力和可靠性优势，同时减少许多与长期运行应用程序相关的长期维护难题。这很好，但任何长期参与软件开发的人都知道，重用不是免费的，也不是简单就能实现的。
- en: 'There are practical aspects of reuse; the question is, "Physically, how do
    I package my code for reuse?" For this, we can use one of the following three
    methods:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 代码重用的实际方面；问题在于，“在物理上，我该如何打包我的代码以便重用？”为此，我们可以使用以下三种方法之一：
- en: Share source code that can be compiled into multiple projects
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将源代码共享，可以编译成多个项目
- en: Share **Dynamic-Link Library** (**DLL**) that can be referenced by multiple
    projects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享**动态链接库**（**DLL**），可以被多个项目引用
- en: Share code as a service that can be accessed remotely by multiple clients
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将代码作为服务共享，以便多个客户端远程访问
- en: 'There are also more strategic aspects; again the question arises, "How can
    I organize my code so that I can reuse more of it?" To solve this problem, we
    have the following options:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些更战略性的方面；同样的问题再次出现，“我该如何组织我的代码，以便我可以重用更多？”为了解决这个问题，我们有以下选择：
- en: Create a layered approach so that data access logic and business validation
    is separated out of the user interface logic
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建分层方法，以便将数据访问逻辑和业务验证从用户界面逻辑中分离出来
- en: Utilize interfaces and frameworks that abstract platform-specific services away
    from the reusable layers
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用接口和框架将特定平台的服务从可重用层抽象出来
- en: In this chapter, we will touch on both these aspects of reuse, but primarily
    focus on the practical side of reuse. Specifically, we will present two different
    approaches to bundle up the code for reuse.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涉及这两个方面的重用，但主要关注重用的实际方面。具体来说，我们将介绍两种不同的方法来打包代码以供重用。
- en: 'So, what parts of our code should we try and reuse? In the work we have done
    on the `NationalParks` apps so far, one obvious set of code stands out for reuse:
    the persistence code, which is the logic that loads parks from a JSON file and
    saves them back to the same file. In [Chapter 5](ch05.html "Chapter 5. Developing
    Your First Android App with Xamarin.Android"), *Developing Your First Android
    App with Xamarin.Android*, we moved towards a reusable solution by creating the
    `NationalParkData` singleton. In this chapter, we will demonstrate two different
    methods for sharing the `NationalParkData` singleton across both our projects
    as well as other .NET projects that might need it.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该尝试重用代码的哪些部分？在我们对`NationalParks`应用程序所做的工作中，一组明显的代码非常适合重用：持久化代码，这是从JSON文件加载公园并将其保存回同一文件的逻辑。在[第5章](ch05.html
    "第5章. 使用Xamarin.Android开发您的第一个Android应用程序")《使用Xamarin.Android开发您的第一个Android应用程序》中，我们通过创建`NationalParkData`单例来朝着可重用解决方案迈进。在本章中，我们将展示两种不同的方法，用于在两个项目以及可能需要它的其他.NET项目中共享`NationalParkData`单例。
- en: Old school source file linking
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统的源文件链接
- en: File linking refers to a technique where source code files are linked or referenced
    by a Xamarin project and are compiled when a build is run on the project along
    with the rest of the source code in the project. When using file linking, a separate
    DLL is not created for the files you are sharing, rather the code is compiled
    into the same DLL produced for the project that the file is linked to; in our
    case, either `NationalParks.iOS.dll` or `NationalParks.Droid.dll`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 文件链接是指一种技术，其中源代码文件通过Xamarin项目进行链接或引用，并在对项目运行构建时与项目中的其他源代码一起编译。当使用文件链接时，不会为共享的文件创建单独的DLL，而是代码被编译成与链接的文件相同的项目生成的DLL；在我们的例子中，是`NationalParks.iOS.dll`或`NationalParks.Droid.dll`。
- en: Creating a shared library project
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建共享库项目
- en: 'We will start by creating a new `Library` project to house the reusable code.
    To create a `Library` project, perform the following steps:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建一个新的`Library`项目来存放可重用代码。要创建`Library`项目，请执行以下步骤：
- en: Add a new library project with the name `NationalParks.Data` to the `NationalParks`
    solution. You can find the `Library` project template in the **New Project** dialog
    box under **C#** | **Library**, as shown in the following screenshot:![Creating
    a shared library project](img/0838OT_06_01.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名为`NationalParks.Data`的新库项目添加到`NationalParks`解决方案中。您可以在**新建项目**对话框下的**C#**
    | **库**中找到`Library`项目模板，如下截图所示：![创建共享库项目](img/0838OT_06_01.jpg)
- en: Remove `MyClass.cs` from the new project. When removing the file, selecting
    **Delete** will remove the file from being referenced by the project and delete
    the underlying file from the filesystem.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从新项目中移除`MyClass.cs`。在移除文件时，选择**删除**将删除文件的项目引用，并从文件系统中删除底层文件。
- en: Set the **Target Framework** option to **Mono/.NET 4.5** in the **Project Options**
    dialog box under **Build** | **General**.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建** | **常规**下的**项目选项**对话框中，将**目标框架**选项设置为**Mono/.NET 4.5**。
- en: Move the `NationalPark.cs` and `NationalParkData.cs` files from `NationalParks.Droid`
    to `NationalPark.Data`.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NationalPark.cs`和`NationalParkData.cs`文件从`NationalParks.Droid`移动到`NationalPark.Data`。
- en: Open `NationalPark.cs` and `NationalParkData.cs` and change the namespace to
    `NationalParks.Data`.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`NationalPark.cs`和`NationalParkData.cs`，并将命名空间更改为`NationalParks.Data`。
- en: 'Add a public string `DataDir` property to `NationalParkData` and use it in
    the `GetFilename()` method, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NationalParkData`中添加一个公共字符串`DataDir`属性，并在`GetFilename()`方法中使用它，如下所示：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Move the logic to load the `parks` data from the constructor to a new method
    named `Load()`, as shown in the following code snippet:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将加载`parks`数据的逻辑从构造函数移动到名为`Load()`的新方法中，如下代码片段所示：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compile `NationalParks.Data`. You will receive compile errors due to unresolved
    references to Json.NET. Unfortunately, we cannot simply add a reference to the
    component version of Json.NET that we previously downloaded from the Xamarin component
    store because this version is built to be used with the Xamarin.iOS and Xamarin.Android
    profiles and is not binary compatible with Mono/.NET 4.5 library projects.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译`NationalParks.Data`。由于对Json.NET的未解析引用，您将收到编译错误。不幸的是，我们无法简单地添加之前从Xamarin组件存储中下载的Json.NET组件版本，因为这个版本是为与Xamarin.iOS和Xamarin.Android配置一起使用而构建的，并且与Mono/.NET
    4.5库项目不兼容。
- en: Add the Json.NET library to the project using NuGet. Select `NationalParks.Data`,
    right-click on it, and navigate to **Add** | **Add Packages**. Enter `Json.NET`
    in the search field, check the **Json.NET** entry in the list, and select **Add
    Packages**. The following screenshot shows the **Add Packages** dialog box:![Creating
    a shared library project](img/0838OT_06_04.jpg)
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用NuGet将Json.NET库添加到项目中。选择`NationalParks.Data`，右键单击它，然后导航到**添加** | **添加包**。在搜索字段中输入`Json.NET`，在列表中检查**Json.NET**条目，然后选择**添加包**。以下截图显示了**添加包**对话框：![创建共享库项目](img/0838OT_06_04.jpg)
- en: Compile `NationalParks.Data`; you should receive no compile errors this time.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译`NationalParks.Data`；这次您应该不会收到编译错误。
- en: Updating NationalParks.Droid to use shared files
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新NationalParks.Droid以使用共享文件
- en: Now that we have the `NationalParksData` singleton in a separate project, we
    are now ready to reuse it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将`NationalParksData`单例放在一个单独的项目中，我们现在可以重用它了。
- en: 'To update `NationalParks.Droid` in order to use the shared solution, perform
    the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新`NationalParks.Droid`以使用共享解决方案，执行以下步骤：
- en: Select `NationalPark.cs` and `NationalParksData.cs` in the **Solution** pad,
    right-click on it, select **Remove**, and then select **Delete**. This will remove
    the selected files from the project and physically delete them from the project
    folder.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案**面板中选择`NationalPark.cs`和`NationalParksData.cs`，右键单击它，选择**移除**，然后选择**删除**。这将从项目中删除所选文件，并从项目文件夹中物理删除它们。
- en: In `NationalParks.Droid`, add a folder named `NationalParks.Data`. This folder
    will not contain any files, but will simply be used within the project structure
    to organize links to the shared files.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NationalParks.Droid`中添加一个名为`NationalParks.Data`的文件夹。这个文件夹将不包含任何文件，但将仅用于项目结构中，以组织对共享文件的链接。
- en: Select the `NationalParks.Data` folder, right-click on it, and navigate to **Add**
    | **Add Files** to add the existing files to the project.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`NationalParks.Data`文件夹，右键单击它，然后导航到**添加** | **添加文件**以将现有文件添加到项目中。
- en: In the **Add Files** dialog box, navigate to the `NationalParks.Data` project
    folder, select `NationalPark.cs` and `NationalParkData.cs`, and click on **Open**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加文件** 对话框中，导航到 `NationalParks.Data` 项目文件夹，选择 `NationalPark.cs` 和 `NationalParkData.cs`，然后点击
    **打开**。
- en: In the **Add File to Folder** dialog box, select **Add a link to file**, check
    the **Use the same action for all selected files** option, and click on **OK**.
    Expand the **NationalParks.Data** folder to see that two file links are added.
    The following screenshot shows the **Add File to Folder** dialog box:![Updating
    NationalParks.Droid to use shared files](img/0838OT_06_02.jpg)
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **添加文件到文件夹** 对话框中，选择 **添加文件链接**，勾选 **为所有选定的文件使用相同的操作** 选项，然后点击 **确定**。展开 **NationalParks.Data**
    文件夹，可以看到添加了两个文件链接。以下截图显示了 **添加文件到文件夹** 对话框：![更新 NationalParks.Droid 以使用共享文件](img/0838OT_06_02.jpg)
- en: Add a `using` clause to the `NationalParks.Data` namespace and remove any `using`
    directives for `Newtonsoft.Json` in `MainActivity`, `DetailActivity`, `EditActivity`,
    and `NationalParksAdapter`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.Data` 命名空间中添加 `using` 子句，并在 `MainActivity`、`DetailActivity`、`EditActivity`
    和 `NationalParksAdapter` 中移除任何 `Newtonsoft.Json` 的 `using` 指令。
- en: 'In `MainActivity.OnCreate()`, set the `NationalParksData.DataDir` property
    and call the `Load()` method prior to creating the `ListView` adapter:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity.OnCreate()` 中，在创建 `ListView` 适配器之前设置 `NationalParksData.DataDir`
    属性并调用 `Load()` 方法：
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Compile and run the app. You should see no noticeable behavior changes, but
    we are now using the serialization and storage logic in a shareable way.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行应用程序。你应该看不到明显的行为变化，但我们现在以可共享的方式使用序列化和存储逻辑。
- en: Updating NationalParks.iOS to use shared files
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 NationalParks.iOS 以使用共享文件
- en: Now, let's move on to update `NationalParks.iOS`. We have a little more work
    to do here because if you can recall, we had the file handling logic spread out
    in several areas.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续更新 `NationalParks.iOS`。在这里我们还有更多工作要做，因为如果你还记得，我们之前将文件处理逻辑分散在几个区域。
- en: 'To update `NationalParks.iOS` in order to use the shared solution, perform
    the following steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新 `NationalParks.iOS` 以使用共享解决方案，请执行以下步骤：
- en: Remove `NationalPark.cs` from the project.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目中移除 `NationalPark.cs`。
- en: Add a folder named `NationalParks.Data` in the `NationalParks.Droid` project.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.Droid` 项目中添加一个名为 `NationalParks.Data` 的文件夹。
- en: Add file links to `NationalPark.cs` and `NationalParksData.cs`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件链接添加到 `NationalPark.cs` 和 `NationalParkData.cs`。
- en: Open `MasterViewController.cs`, add a `using` instance of `NationalParks.Data`,
    and remove the `using` instance of `Newtonsoft.Json`.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `MasterViewController.cs`，添加 `NationalParks.Data` 的 `using` 实例，并移除 `Newtonsoft.Json`
    的 `using` 实例。
- en: 'In `MasterViewController.ViewDidLoad()`, set the `DataDir` property before
    creating the data source for `UITableView`:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MasterViewController.ViewDidLoad()` 中，在创建 `UITableView` 的数据源之前设置 `DataDir`
    属性：
- en: '[PRE3]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the `DataSource` class, remove the `Parks` collection and remove the loading
    action of the `Parks` collection in the constructor.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `DataSource` 类中，移除 `Parks` 集合，并在构造函数中移除 `Parks` 集合的加载操作。
- en: Update the methods in `DataSource` to reference the `Parks` collection property
    in `NationalParksData`.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `DataSource` 中的方法，以便引用 `NationalParksData` 中的 `Parks` 集合属性。
- en: Remove the `Parks` property from `DataSource` and update `MasterViewController.PrepareForSegue()`
    to use the `Parks` property in `NationalParksData`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `DataSource` 中移除 `Parks` 属性，并更新 `MasterViewController.PrepareForSegue()` 以使用
    `NationalParksData` 中的 `Parks` 属性。
- en: Open `DetailViewController` and add a `using` instance of `NationalParks.Data`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `DetailViewController` 并添加 `NationalParks.Data` 的 `using` 实例。
- en: In `SetNavData()`, remove the `Parks` collection argument, corresponding private
    variable, and then update the navigation logic in `MasterViewController`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SetNavData()` 中，移除 `Parks` 集合参数、相应的私有变量，然后更新 `MasterViewController` 中的导航逻辑。
- en: Open `EditViewController` and add a `using` directive for `NationalParks.Data`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `EditViewController` 并添加 `NationalParks.Data` 的 `using` 指令。
- en: In `SetNavData()`, remove the `Parks` collection argument, corresponding private
    variable, and then update the navigation logic in `MasterViewController` and `DetailViewController`
    so that no `Parks` collection is passed in.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SetNavData()` 中，移除 `Parks` 集合参数、相应的私有变量，然后更新 `MasterViewController` 和 `DetailViewController`
    中的导航逻辑，以便不传递任何 `Parks` 集合。
- en: Remove the `SaveParks()` method.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移除 `SaveParks()` 方法。
- en: 'In `DoneClicked()`, replace the logic that adds the park to the collection
    and saves the collection with a call to `NationalParksData.Instance.Save()`, as
    follows:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `DoneClicked()` 中，将添加公园到集合并保存集合的逻辑替换为对 `NationalParksData.Instance.Save()`
    的调用，如下所示：
- en: '[PRE4]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In `DeleteClicked()`, replace the logic that removes the park from the collection
    and saves the collection with a call to `NationalParks.Instance.Delete()`, as
    follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DeleteClicked()`中，将移除公园集合并保存集合的逻辑替换为对`NationalParks.Instance.Delete()`的调用，如下所示：
- en: '[PRE5]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Compile and run the app. As with `NationalParks.Droid`, you should see no noticeable
    behavior changes.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行应用程序。与`NationalParks.Droid`一样，你应该看不到明显的行为变化。
- en: Portable Class Libraries
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可移植类库
- en: '**Portable Class Libraries** (**PCL**) are libraries that conform to a Microsoft
    standard and can be shared in a binary format across many different platforms
    such as Windows 7 desktop, Windows 8 desktop, Windows 8 phone, Xbox 360, and Mono.
    The big advantage with a PCL is that you can share a single binary for all these
    platforms and avoid distributing source code. However, there are some significant
    challenges.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**可移植类库**（**PCL**）是符合微软标准的库，可以以二进制格式跨许多不同的平台共享，例如Windows 7桌面、Windows 8桌面、Windows
    8手机、Xbox 360和Mono。PCL的一个大优点是你可以为所有这些平台共享单个二进制文件，避免分发源代码。然而，也有一些重大的挑战。'
- en: One issue we face straightaway is the fact that our code uses APIs that are
    not supported across all the platforms; specifically `File.Exists()`, `File.ReadAllText()`,
    and `File.WriteAllText()`. It seems surprising, but most of `System.IO` is not
    common across all of the .NET profiles; so, the file I/O logic can be difficult
    to deal with within the shared code. In our case, there are only three methods
    and we can easily abstract this logic away from the shared code by creating an
    IO interface. Each platform that uses our shared solution will be responsible
    for providing an implementation of the IO interface.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们面临的一个直接问题是我们的代码使用了跨所有平台不支持的API；具体来说，是`File.Exists()`、`File.ReadAllText()`和`File.WriteAllText()`。这看起来有些令人惊讶，但大多数`System.IO`在所有.NET配置文件中并不通用；因此，在共享代码中处理文件I/O逻辑可能会有点困难。在我们的案例中，只有三个方法，我们可以通过创建一个IO接口轻松地将这种逻辑从共享代码中抽象出来。使用我们的共享解决方案的每个平台都将负责提供IO接口的实现。
- en: Creating NationalParks.PortableData
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建`NationalParks.PortableData`
- en: 'The first step is to create the Portable Class Library to house our shared
    solution. To create `NationalParks.PortableData`, perform the following steps:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是创建一个可移植类库来存放我们的共享解决方案。要创建`NationalParks.PortableData`，请执行以下步骤：
- en: Add a new Portable Class Library project to the `NationalParks` solution. The
    project template can be found under **C#** | **Portable Library**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将一个新的可移植类库项目添加到`NationalParks`解决方案中。项目模板可以在**C#** | **可移植库**下找到。
- en: Remove `MyClass.cs` from the newly created project.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从新创建的项目中删除`MyClass.cs`。
- en: Copy `NationalPark.cs` and `NationalParksData.cs` from the `NationalParks.Data`
    project to `NationalParks.PortableData`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`NationalPark.cs`和`NationalParksData.cs`从`NationalParks.Data`项目复制到`NationalParks.PortableData`。
- en: Add a reference to the Json.NET Portable Class Library.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加对Json.NET可移植类库的引用。
- en: 'Create the `IFileHandler` interface and add three methods that abstract the
    three IO methods we need. It will be best to make the read and write methods asynchronous
    returning `Task<>`, because many of the platforms only support asynchronous IO.
    This will simplify implementing the interface on these platforms. The following
    code demonstrates the required action:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`IFileHandler`接口并添加三个方法，这些方法抽象了我们需要的三个IO方法。最好使读取和写入方法异步返回`Task<>`，因为许多平台只支持异步IO。这将简化在这些平台上实现接口的过程。以下代码演示了所需的操作：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a public `IFileHandler` property to `NationalParksData` and change all
    the logic to use this property rather than using `System.IO.File`, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NationalParksData`中添加一个公共的`IFileHandler`属性，并将所有逻辑更改为使用此属性而不是使用`System.IO.File`，如下所示：
- en: '[PRE7]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Implementing IFileHandler
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现`IFileHandler`
- en: We now need to create an implementation of `IFileHandler` that can be used by
    both our projects. We will share the file handler implementation using the file
    linking method from the previous sections.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在需要创建一个`IFileHandler`的实现，该实现可以由我们的两个项目使用。我们将通过前几节中介绍的文件链接方法共享文件处理实现。
- en: 'To implement `IFileHandler`, perform the following steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现`IFileHandler`，请执行以下步骤：
- en: In the `NationalParks` solution, create a new `Library` project named `NationalParks.IO`
    and set the **Target framework** option to **Mono/.NET 4.5**. This will serve
    as a shared project for our file handler implementation.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`NationalParks`解决方案中，创建一个名为`NationalParks.IO`的新`Library`项目，并将**目标框架**选项设置为**Mono/.NET
    4.5**。这将作为我们的文件处理实现共享项目。
- en: Remove the `MyClass.cs file` created by default and add a reference to `NationalParks.PortableData`.
    This will give us access to the `IFileHandler` interface we intend to implement.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除默认创建的 `MyClass.cs 文件`，并将对 `NationalParks.PortableData` 的引用添加进来。这将使我们能够访问我们打算实现的
    `IFileHandler` 接口。
- en: Create a class named `FileHandler` in `NationalParks.IO`. Add a `using` directive
    for the `NationalParks.PortableData` namespace and specify that the class implements
    the `IFileHandler` interface.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.IO` 中创建一个名为 `FileHandler` 的类。添加对 `NationalParks.PortableData`
    命名空间的 `using` 指令，并指定该类实现 `IFileHandler` 接口。
- en: Use the **Implement** interface menu item under **Refactor** to create stub
    implementations for each method on the interface.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 **重构** 下的 **实现** 接口菜单项为接口上的每个方法创建存根实现。
- en: 'Implement each of the stub methods. The following code demonstrates the required
    action:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 实现每个存根方法。以下代码演示了所需的操作：
- en: '[PRE8]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Updating NationalParks.Droid to use PCL
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 NationalParks.Droid 以使用 PCL
- en: Now, it's time to update `NationalParks.Droid` in order to use our new PCL.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候更新 `NationalParks.Droid` 以使用我们新的 PCL。
- en: 'To update `NationalParks.Droid` in order to use `NationalParks.PortableData`,
    perform the following steps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新 `NationalParks.Droid` 以使用 `NationalParks.PortableData`，执行以下步骤：
- en: In the `NationalParks.Droid` project, remove the `NationalParks.Data` folder,
    create a new folder named `NationalParks.IO`, and add a reference to `NationalParks.PortableData`.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.Droid` 项目中，删除 `NationalParks.Data` 文件夹，创建一个名为 `NationalParks.IO`
    的新文件夹，并将对 `NationalParks.PortableData` 的引用添加到其中。
- en: In the `NationalParks.IO` folder, add **Link** to the `FileHandler` class.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.IO` 文件夹中，将 **链接** 添加到 `FileHandler` 类。
- en: In `MainActivity.cs`, add a `using` clause for `NationalParks.IO` and `NationalParks.PortableData`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity.cs` 中，为 `NationalParks.IO` 和 `NationalParks.PortableData` 添加一个
    `using` 子句。
- en: 'In `MainActivity.OnCreate()`, initialize the `FileHandler` property with an
    instance of `FileHandler`, place an `await` instance on the call to `Load()`,
    and move the assignment of `NationalParksAdapter` before the call to `Load()`,
    as shown in the following code snippet:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MainActivity.OnCreate()` 中，使用 `FileHandler` 的一个实例初始化 `FileHandler` 属性，在调用
    `Load()` 的调用上放置一个 `await` 实例，并将 `NationalParksAdapter` 的赋值移动到调用 `Load()` 之前，如下面的代码片段所示：
- en: '[PRE9]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now that we are loading data asynchronously, the `OnPause()` method will likely
    be called before the asynchronous return of `OnCreate()`. Thus we need to add
    a null check for the logic in `OnPause()` that calls `NotifyDataSetChanged()`,
    as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们现在正在异步加载数据，`OnPause()` 方法可能会在 `OnCreate()` 的异步返回之前被调用。因此，我们需要在 `OnPause()`
    中的逻辑上添加一个空检查，该逻辑调用 `NotifyDataSetChanged()`，如下所示：
- en: '[PRE10]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In `NationalParksAdapter.cs`, `DetailActivity.cs`, and `EditActivity.cs`, add
    a `using` clause for `NationalParks.PortableData`, and remove the `using` directive
    for `NationalParks.Data`.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParksAdapter.cs`、`DetailActivity.cs` 和 `EditActivity.cs` 中，为 `NationalParks.PortableData`
    添加一个 `using` 子句，并删除对 `NationalParks.Data` 的 `using` 指令。
- en: Compile and run the app.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行应用程序。
- en: Updating NationalParks.iOS to use PCL
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新 NationalParks.iOS 以使用 PCL
- en: Now, it's time to update `NationalParks.IOS`. For the most part, we go through
    essentially the same steps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候更新 `NationalParks.IOS`。大部分步骤与之前基本相同。
- en: 'To update `NationalParks.iOS` in order to use `NationalParks.PortableData`,
    perform the following steps:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新 `NationalParks.iOS` 以使用 `NationalParks.PortableData`，执行以下步骤：
- en: In the `NationalParks.Droid` project, remove the `NationalParks.Data` folder,
    create a new folder named `NationalParks.IO`, and add a reference to `NationalParks.PortableData`.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.Droid` 项目中，删除 `NationalParks.Data` 文件夹，创建一个名为 `NationalParks.IO`
    的新文件夹，并将对 `NationalParks.PortableData` 的引用添加到其中。
- en: In the `NationalParks.IO` folder, add **Link** to the `FileHandler` class.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `NationalParks.IO` 文件夹中，将 **链接** 添加到 `FileHandler` 类。
- en: In `MasterViewController.cs`, add a `using` clause for `NationalParks.IO` and
    `NationalParks.PortableData`, and remove the `using` directive for `NationalParks.Data`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MasterViewController.cs` 中，为 `NationalParks.IO` 和 `NationalParks.PortableData`
    添加一个 `using` 子句，并删除对 `NationalParks.Data` 的 `using` 指令。
- en: 'In `MasterViewController.ViewDidLoad()`, initialize the `FileHandler` property
    with an instance of `FileHandler`, place an `await` instance on the call to `Load()`,
    and place a call to `TableView.ReloadData()` after the assignment of the data
    source, as shown in the following code snippet:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `MasterViewController.ViewDidLoad()` 中，使用 `FileHandler` 的一个实例初始化 `FileHandler`
    属性，在调用 `Load()` 的调用上放置一个 `await` 实例，并在数据源赋值后调用 `TableView.ReloadData()`，如下面的代码片段所示：
- en: '[PRE11]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In `DetailViewController.cs` and `EditViewController.cs`, replace the `using`
    directive for `NationalParks.Data` with `NationalParks.PortableData`.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`DetailViewController.cs`和`EditViewController.cs`中，将`NationalParks.Data`的`using`指令替换为`NationalParks.PortableData`。
- en: Compile and run the app.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并运行应用程序。
- en: The pros and cons of the code-sharing techniques
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码共享技术的优缺点
- en: 'Now that we have some experience with two practical methods for sharing code
    across Xamarin.iOS and Xamarin.Android apps, let''s look at some pros and cons.
    The following table summarizes some of the pros and cons of each approach:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对在Xamarin.iOS和Xamarin.Android应用之间共享代码的两种实用方法有了些经验，让我们来看看它们的优缺点。以下表格总结了每种方法的优缺点：
- en: '|   | Pros | Cons |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '|   | 优点 | 缺点 |'
- en: '| --- | --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| File linking |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| 文件链接 |'
- en: This allows for a broader use of .NET APIs, assuming that these APIs are supported
    by all the platforms that will use the shared code. If you are only targeting
    Xamarin.iOS and Xamarin.Android, this works pretty well.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这允许更广泛地使用.NET API，假设这些API被所有将使用共享代码的平台支持。如果你只针对Xamarin.iOS和Xamarin.Android，这效果相当不错。
- en: '|'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This requires source code to be shared.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这需要共享源代码。
- en: These API dependency issues might not be known until shared code has been compiled
    for each target platform.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这些API依赖性问题可能直到为每个目标平台编译共享代码时才会被发现。
- en: '|'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Portable Class Library |'
  id: totrans-120
  prefs: []
  type: TYPE_TB
  zh: '| 可移植类库 |'
- en: This ensures platform API compatibility.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这确保了平台API的兼容性。
- en: This allows for distribution of binary code.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这允许分发二进制代码。
- en: '|'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: This limits the namespaces and APIs available for use in your code.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这限制了可用于代码中的命名空间和API。
- en: '|'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, we reviewed two practical approaches to share code across Xamarin
    projects as well as other .NET solutions. In the next chapter, we will investigate
    MvvmCross, a framework that simplifies implementing the Model-View-ViewModel design
    pattern, increasing the amount of shared code across platforms.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了在Xamarin项目以及其他.NET解决方案之间共享代码的两种实用方法。在下一章中，我们将探讨MvvmCross，这是一个简化实现Model-View-ViewModel设计模式的框架，增加了跨平台共享代码的数量。
