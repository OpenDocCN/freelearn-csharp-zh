["```cs\nusing System;\nusing Volo.Abp.DependencyInjection;\nusing Volo.Abp.Users;\nnamespace DemoApp\n{\n    public class MyService : ITransientDependency\n    {\n        private readonly ICurrentUser _currentUser;\n        public MyService(ICurrentUser currentUser)\n        {\n            _currentUser = currentUser;\n        }\n        public void Demo()\n        {\n            Guid? userId = _currentUser.Id;\n            string userName = _currentUser.UserName;\n            string email = _currentUser.Email;\n        }\n    }\n}\n```", "```cs\npublic class SocialSecurityNumberClaimsPrincipalContributor \n    : IAbpClaimsPrincipalContributor, ITransientDependency\n{\n    public async Task ContributeAsync(\n        AbpClaimsPrincipalContributorContext context)\n    {\n        ClaimsIdentity identity = context.ClaimsPrincipal\n            .Identities.FirstOrDefault();\n        var userId = identity?.FindUserId();\n        if (userId.HasValue)\n        {\n            var userService = context.ServiceProvider\n              .GetRequiredService<IUserService>();            \n            var socialSecurityNumber = await userService\n              .GetSocialSecurityNumberAsync(userId.Value);\n            if (socialSecurityNumber != null)\n            {\n                identity.AddClaim(new Claim\n                  (\"SocialSecurityNumber\",   \n                    socialSecurityNumber));\n            }\n        }\n    }\n}\n```", "```cs\npublic class Order : AggregateRoot<Guid>, ISoftDelete\n{\n    public bool IsDeleted { get; set; }\n    //...other properties\n}\n```", "```cs\npublic class Order : AggregateRoot<Guid>, IMultiTenant\n{\n    public Guid? TenantId { get; set; }\n    //...other properties\n}\n```", "```cs\npublic class OrderService : ITransientDependency\n{\n    private readonly IRepository<Order, Guid> \n    _orderRepository;\n    private readonly IdataFilter _dataFilter;\n    public OrderService(\n        Irepository<Order, Guid> orderRepository,\n        IdataFilter dataFilter)\n    {\n        _orderRepository = orderRepository;\n        _dataFilter = dataFilter;\n    }\n    public async Task<List<Order>> GetAllOrders()\n    {\n        using (_dataFilter.Disable<IsoftDelete>())\n        {\n            return await _orderRepository.GetListAsync();\n        }\n    }\n}\n```", "```cs\npublic interface Iarchivable\n{\n    bool IsArchived { get; }\n}\n```", "```cs\npublic class Order : AggregateRoot<Guid>, Iarchivable\n{\n    public bool IsArchived { get; set; }\n    //...other properties\n}\n```", "```cs\nprotected bool IsArchiveFilterEnabled => DataFilter?.IsEnabled<Iarchivable>() ?? false;\n```", "```cs\nprotected override bool ShouldFilterEntity<Tentity>(\n    ImutableEntityType entityType)\n{\n    If (typeof(IArchivable) \n        .IsAssignableFrom(typeof(TEntity)))\n    {\n        return true;\n    }\n\n    return base.ShouldFilterEntity<TEntity>(entityType);\n}\n```", "```cs\nprotected override Expression<Func<TEntity, bool>> CreateFilterExpression<TEntity>()\n{\n    var expression = \n        base.CreateFilterExpression<Tentity>();\n    if (typeof(Iarchivable)  \n        .IsAssignableFrom(typeof(TEntity)))\n    {\n        Expression<Func<TEntity, bool>> archiveFilter =\n            e => !IsArchiveFilterEnabled ||\n                 !EF.Property<bool>(e, \"IsArchived\");\n        expression = expression == null \n            ? archiveFilter \n            : CombineExpressions(expression, \n                archiveFilter);\n    }\n    return expression;\n}\n```", "```cs\napp.UseAuditing();\n```", "```cs\npublic class MyServiceWithAuditing : ITransientDependency\n{\n    //...inject IAuditingManager _auditingManager;\n    public async Task DoItAsync()\n    {\n        using (var auditingScope = \n            _auditingManager.BeginScope())\n        {\n            try\n            {\n                //TODO: call other services...\n            }\n            catch (Exception ex)\n            {  _auditingManager.Current.Log.Exceptions.Add(ex);\n                throw;\n            }\n            finally\n            {\n                await auditingScope.SaveAsync();\n            }\n        }\n    }\n}\n```", "```cs\nConfigure<AbpAuditingOptions>(options =>\n{\n    options.IsEnabled = false;\n});\n```", "```cs\nConfigure<AbpAuditingOptions>(options =>\n{\n    options.EntityHistorySelectors.AddAllEntities();\n});\n```", "```cs\nConfigure<AbpAuditingOptions>(options =>\n{\n    options.EntityHistorySelectors.Add(\n        new NamedTypeSelector(\"MySelectorName\", type => \n            true)\n    );\n});\n```", "```cs\n[DisableAuditing]\npublic class OrderAppService : ApplicationService, IOrderAppService\n{\n    public async Task CreateAsync(CreateOrderDto input)\n    {\n    }\n    public async Task DeleteAsync(Guid id)\n    {\n    }\n}\n```", "```cs\npublic class OrderAppService : ApplicationService, IOrderAppService\n{\n    [DisableAuditing]\n    public async Task CreateAsync(CreateOrderDto input)\n    {\n    }\n    public async Task DeleteAsync(Guid id)\n    {\n    }\n}\n```", "```cs\n[DisableAuditing]\npublic class OrderAppService : ApplicationService, IOrderAppService\n{\n    public async Task CreateAsync(CreateOrderDto input)\n    {\n    }\n    [Audited]\n    public async Task DeleteAsync(Guid id)\n    {\n    }\n}\n```", "```cs\npublic class CreateOrderDto\n{\n    public Guid CustomerId { get; set; }\n    public string DeliveryAddress { get; set; }\n    [DisableAuditing]\n    public string CreditCardNumber { get; set; }\n}\n```", "```cs\n[Audited]\npublic class Order : AggregateRoot<Guid>\n{\n}\n```", "```cs\n[Audited]\npublic class Order : AggregateRoot<Guid>\n{\n    public Guid CustomerId { get; set; }\n    [DisableAuditing]\n    public string CreditCardNumber { get; set; }\n}\n```", "```cs\nTask SaveAsync(AuditLogInfo auditInfo);\n```", "```cs\npublic class UserCacheItem\n{\n    public Guid Id { get; set; }\n    public string UserName { get; set; }\n    public string EmailAddress { get; set; }\n}\n```", "```cs\npublic class MyUserService : ITransientDependency\n{\n    private readonly IDistributedCache<UserCacheItem> \n        _userCache;\n    public MyUserService(IDistributedCache<UserCacheItem> \n        userCache)\n    {\n        _userCache = userCache;\n    }\n}\n```", "```cs\npublic async Task<UserCacheItem> GetUserInfoAsync(Guid userId)\n{\n    return await _userCache.GetOrAddAsync(\n        userId.ToString(), \n        async () => await GetUserFromDatabaseAsync(userId),\n        () => new DistributedCacheEntryOptions\n        {\n            AbsoluteExpiration = \n                DateTimeOffset.Now.AddHours(1)\n        }\n    );\n}\n```", "```cs\nConfigure<AbpDistributedCacheOptions>(options =>\n{\n    options.GlobalCacheEntryOptions\n        .AbsoluteExpirationRelativeToNow = \n            TimeSpan.FromHours(2);\n});\n```", "```cs\n[IgnoreMultiTenancy]\npublic class MyCacheItem\n{ /* ... */ }\n```", "```cs\nabp add-package Volo.Abp.Caching.StackExchangeRedis\n```", "```cs\n\"Redis\": {\n  \"Configuration\": \"127.0.0.1\"\n}\n```", "```cs\npublic class MyUserService : \n    ILocalEventHandler<EntityChangedEventData<IdentityUser>>,\n    ITransientDependency\n{\n    private readonly IDistributedCache<UserCacheItem> \n        _userCache;\n    private readonly IRepository<IdentityUser, Guid> \n         _userRepository;\n    //...omitted other code parts \n    public async Task HandleEventAsync(\n        EntityChangedEventData<IdentityUser> data)\n    {\n        await _userCache.RemoveAsync \n            (data.Entity.Id.ToString());\n    }\n}\n```", "```cs\nConfigure<AbpLocalizationOptions>(options =>\n{\n    options.Languages.Add(new LanguageInfo(\"en\", \"en\", \n        \"English\"));\n    options.Languages.Add(new LanguageInfo(\"tr\", \"tr\", \n        \"Türkçe\"));\n    options.Languages.Add(new LanguageInfo(\"es\", \"es\", \n        \"Español\"));\n});\n```", "```cs\napp.UseAbpRequestLocalization();\n```", "```cs\n[LocalizationResourceName(\"DemoApp\")]\npublic class DemoAppResource\n{ }\n```", "```cs\n{\n  \"culture\": \"en\",\n  \"texts\": {\n    \"Home\": \"Home\",\n    \"WelcomeMessage\": \"Welcome to the application.\"\n  }\n}\n```", "```cs\npublic class LocalizationDemoService : ITransientDependency\n{\n    private readonly IStringLocalizer<DemoAppResource> \n        _localizer;\n    public LocalizationDemoService(\n        IStringLocalizer<DemoAppResource> localizer)\n    {\n        _localizer = localizer;\n    }\n    public string GetWelcomeMessage()\n    {\n        return _localizer[\"WelcomeMessage\"];\n    }\n}\n```", "```cs\n\"WelcomeMessageWithName\": \"Welcome {0} to the application.\"\n```", "```cs\npublic string GetWelcomeMessage(string name)\n{\n    return _localizer[\"WelcomeMessageWithName\", name];\n}\n```", "```cs\nConfigure<AbpVirtualFileSystemOptions>(options =>\n{\n    options.FileSets.AddEmbedded<DemoAppDomainSharedModule>(); \n    });\nConfigure<AbpLocalizationOptions>(options =>\n{\n    options.Resources\n        .Add<DemoAppResource>(\"en\")\n        .AddBaseTypes(typeof(AbpValidationResource))\n        .AddVirtualJson(\"/Localization/DemoApp\");\n    options.DefaultResourceType = typeof(DemoAppResource);\n});\n```", "```cs\npublic class MyAppService : ApplicationService\n{\n    public async Task FooAsync()\n    {\n        var str = L[\"WelcomeMessage\"];\n    }\n}\n```", "```cs\npublic class MyAppService : ApplicationService\n{\n    public MyAppService()\n    {\n        LocalizationResource = typeof(AnotherResource);\n    }\n    //...\n}\n```", "```cs\nvar str = abp.localization.localize('WelcomeMessage', 'DemoApp');\n```"]