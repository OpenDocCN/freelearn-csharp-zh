["```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class FaceScanMode : MonoBehaviour\n    {\n        [SerializeField] ARFaceManager faceManager;\n        private void OnEnable()\n        {\n            UIController.ShowUI(\"Scan\");\n        }\n        void Update()\n        {\n            if (faceManager.trackables.count > 0)\n            {\n                InteractionController.EnableMode(\"Main\");\n            }\n        }\n    }\n    ```", "```cs\n    using System.Collections.Generic;\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class ChangeableFace : MonoBehaviour\n    {\n        GameObject currentPosePrefab;\n        GameObject poseObj;\n        public void SetPosePrefab(GameObject prefab)\n        {\n            if (prefab == currentPosePrefab)\n                return;\n            if (poseObj != null) \n                Destroy(poseObj);\n           currentPosePrefab = prefab;\n           if (prefab != null)\n                poseObj = Instantiate(prefab, transform,                false);\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class FaceMainMode : MonoBehaviour\n    {\n        [SerializeField] ARFaceManager faceManager;\n        void OnEnable()\n        {\n            UIController.ShowUI(\"Main\");\n        }\n        public void ChangePosePrefab(GameObject prefab)\n        {\n            foreach (ARFace face in faceManager.trackables)\n            {\n                ChangeableFace changeable =                 face.GetComponent<ChangeableFace>();\n                if (changeable != null)\n                {\n                    changeable.SetPosePrefab(prefab);\n                }\n            }\n        }\n    }\n    ```", "```cs\n        public void ResetFace()\n        {\n            foreach (ARFace face in faceManager.trackables)\n            {\n                ChangeableFace changeable =                 face.GetComponent<ChangeableFace>();\n                if (changeable != null)\n                {\n                    changeable.SetPosePrefab(null);\n                }\n            }\n        }\n    ```", "```cs\n        Dictionary<GameObject, GameObject> accessories =         new Dictionary<GameObject, GameObject>();\n    ```", "```cs\n        public void AddAccessory(GameObject prefab)\n        {\n            GameObject obj;\n            if (accessories.TryGetValue(prefab, out obj) &&            obj.activeInHierarchy)\n            {\n                obj.SetActive(false);\n                return;\n            }\n            else if (obj != null)\n            {\n                obj.SetActive(true);\n            }\n            else\n            {\n                obj = Instantiate(prefab, transform, false);\n                accessories.Add(prefab, obj);\n            }\n        }\n    ```", "```cs\n        public void ResetAccessories()\n        {\n            foreach (GameObject prefab in accessories.Keys)\n            {\n                accessories[prefab].SetActive(false);\n            }\n        }\n    ```", "```cs\n        public void AddAccessory(GameObject prefab)\n        {\n            foreach (ARFace face in faceManager.trackables)\n            {\n                ChangeableFace changeable =                 face.GetComponent<ChangeableFace>();\n                if (changeable != null)\n                {\n                    changeable.AddAccessory(prefab);\n                }\n            }\n        }\n    ```", "```cs\n        public void ResetFace()\n        {\n            foreach (ARFace face in faceManager.trackables)\n            {\n                ChangeableFace changeable =                 face.GetComponent<ChangeableFace>();\n                if (changeable != null)\n                {\n                    changeable.SetPosePrefab(null);\n                    changeable.ResetAccessories();\n                }\n            }\n        }\n    ```", "```cs\n    using UnityEngine.XR.ARFoundation;\n    ```", "```cs\n        ARFaceMeshVisualizer meshVisualizer;\n        MeshRenderer renderer;\n        private void Start()\n        {\n            meshVisualizer =            GetComponent<ARFaceMeshVisualizer>();\n            meshVisualizer.enabled = false;\n            renderer = GetComponent<MeshRenderer>();\n            renderer.enabled = false;\n        }\n    ```", "```cs\n        public void SetMeshMaterial(Material mat)\n        {\n            if (mat == null)\n            {\n                meshVisualizer.enabled = false;\n                renderer.enabled = false;\n                return;\n            }\n            renderer.material = mat;\n            meshVisualizer.enabled = true;\n            renderer.enabled = true;\n        }\n    ```", "```cs\n        public void ChangeMaterial(Material mat)\n        {\n            foreach (ARFace face in faceManager.trackables)\n            {\n                ChangeableFace changeable =                 face.GetComponent<ChangeableFace>();\n                if (changeable != null)\n                {\n                    changeable.SetMeshMaterial(mat);\n                }\n            }\n        }\n    ```", "```cs\n                    changeable.SetPosePrefab(null);\n                    changeable.ResetAccessories();\n                    changeable.SetMeshMaterial(null);\n    ```", "```cs\nm_LeftEyeGameObject = Instantiate(m_EyePrefab, m_Face.leftEye);\n```", "```cs\n        void OnUpdated(ARFaceUpdatedEventArgs eventArgs)\n        {\n            CreateEyeGameObjectsIfNecessary();\n            SetVisible((m_Face.trackingState ==                 TrackingState.Tracking) &&                     (ARSession.state > ARSessionState.Ready));\n        }\n```", "```cs\n        void OnEnable()\n        {\n            var faceManager =                FindObjectOfType<ARFaceManager>();\n            if (faceManager != null && faceManager.subsystem !=            null && faceManager.descriptor.supportsEyeTracking)\n            {\n                m_FaceSubsystem =                     (XRFaceSubsystem)faceManager.subsystem;\n                SetVisible((m_Face.trackingState ==                    TrackingState.Tracking) &&                     (ARSession.state > ARSessionState.Ready));\n                m_Face.updated += OnUpdated;\n            }\n            else\n            {\n                enabled = false;\n            }\n        }\n```", "```cs\n    using System.Collections.Generic;\n    using UnityEngine;\n    using Unity.Collections;\n    using UnityEngine.XR.ARFoundation;\n    #if UNITY_ANDROID\n    using UnityEngine.XR.ARCore;\n    #endif\n    public class FaceRegionAttachments : MonoBehaviour\n    {\n        ARFaceManager faceManager;\n        ARFace face;\n        Dictionary<ARCoreFaceRegion, GameObject> prefabs =      new Dictionary<ARCoreFaceRegion, GameObject>();\n        Dictionary<ARCoreFaceRegion, GameObject> objs =       new Dictionary<ARCoreFaceRegion, GameObject>();\n    #if UNITY_ANDROID && !UNITY_EDITOR\n        NativeArray<ARCoreFaceRegionData> faceRegions;\n    #endif\n        private void Start()\n        {\n            faceManager = FindObjectOfType<ARFaceManager>();\n            face = GetComponent<ARFace>();\n        }\n    ```", "```cs\n        public void SetRegionAttachment(ARCoreFaceRegion         region, GameObject prefab)\n        {\n            GameObject obj;\n            if (objs.TryGetValue(region, out obj))\n            {\n                GameObject currentPrefab = prefabs[region];\n                Destroy(obj);\n                prefabs.Remove(region);\n                objs.Remove(region);\n                if (prefab == currentPrefab)\n                    return;\n            }\n            obj = Instantiate(prefab);\n            prefabs.Add(region, prefab);\n            objs.Add(region, obj);\n        }\n    ```", "```cs\n        private void Update()\n        {\n    #if UNITY_ANDROID && !UNITY_EDITOR\n            var subsystem =             (ARCoreFaceSubsystem)faceManager.subsystem;\n            if (subsystem == null)\n                return;\n            subsystem.GetRegionPoses(face.trackableId,            Allocator.Persistent, ref faceRegions);\n            for (int i = 0; i < faceRegions.Length; ++i)\n            {\n                GameObject obj;\n                if (objs.TryGetValue(faceRegions[i].region,                out obj))\n                {\n                    obj.transform.localPosition =                    faceRegions[i].pose.position;\n                }\n            }\n    #endif\n        } \n    ```", "```cs\n        public void Reset()\n        {\n            foreach (ARCoreFaceRegion region in objs.Keys)\n            {\n                Destroy(objs[region]);\n            }\n            objs.Clear();\n            prefabs.Clear();\n        }\n    ```", "```cs\n        void OnDestroy()\n        {\n    #if UNITY_ANDROID && !UNITY_EDITOR\n            if (faceRegions.IsCreated)\n                faceRegions.Dispose();\n    #endif\n        }\n    }\n    ```", "```cs\n    #if UNITY_ANDROID \n    using UnityEngine.XR.ARCore;\n    #endif\n    ```", "```cs\n        private void SetRegionAttachment(ARCoreFaceRegion         region, GameObject prefab)\n        {\n            foreach (ARFace face in faceManager.trackables)\n            {\n                FaceRegionAttachments regionAttachments =              face.GetComponent<FaceRegionAttachments>();\n                if (regionAttachments != null)\n                {\n                    regionAttachments.                    SetRegionAttachment(region, prefab);\n                }\n            }\n        }\n    ```", "```cs\n        public void SetNoseAttachment(GameObject prefab)\n        {\n            SetRegionAttachment(ARCoreFaceRegion.NoseTip,            prefab);\n        }\n        public void SetForeheadLeftAttachment(GameObject         prefab)\n        {\n            SetRegionAttachment(            ARCoreFaceRegion.ForeheadLeft, prefab);\n        }\n        public void SetForeheadRightAttachment(GameObject         prefab)\n        {\n            SetRegionAttachment(            ARCoreFaceRegion.ForeheadRight, prefab);\n        }\n    ```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\npublic class ARCoreOnly : MonoBehaviour\n{\n    private void Awake()\n    {\n#if !UNITY_ANDROID\n        gameObject.SetActive(false);\n#endif\n#if UNITY_EDITOR\n        Button button = GetComponent<Button>();\n        button.interactable = false;\n#endif\n    }\n}\n```"]