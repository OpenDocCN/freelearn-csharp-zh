- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building and Securing Web Services Using Minimal APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is about building and securing web services using ASP.NET Core
    Minimal APIs. This includes implementing techniques to protect a web service from
    attacks as well as authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Building web services using ASP.NET Core Minimal APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relaxing the same origin security policy using CORS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing denial of service attacks using rate limiting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving startup time and resources using native AOT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding identity services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building web services using ASP.NET Core Minimal APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In older versions of ASP.NET Core, you would build a web service using controllers
    with an action method for each endpoint, a bit like building a website with ASP.NET
    Core MVC using controllers and models but without the views. Since .NET 6, you
    have another, often better, choice: **ASP.NET Core** **Minimal APIs**.'
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Minimal API-based web services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In earlier versions of ASP.NET Core, implementing even a simple web service
    required a lot of boilerplate code compared to alternative web development platforms.
    For example, a minimal `Hello World` web service implementation that has a single
    endpoint that returns plain text could be implemented using **Express.js** in
    just nine lines of code, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: With ASP.NET Core 5 or earlier, that would require more than fifty lines of
    code!
  prefs: []
  type: TYPE_NORMAL
- en: 'The equivalent using ASP.NET Core 6 or later using ASP.NET Core Minimal APIs
    is now only five lines of code and six lines of configuration, as shown in the
    following two code blocks:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The platform is specified in the project file, and the implicit `using` statements
    SDK feature does some heavy lifting. It is enabled by default, as shown highlighted
    in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Good Practice**: Another benefit of minimal APIs is that they do not use
    dynamically generated code, unlike controller-based Web APIs. This allows them
    to use native AOT to produce smaller, faster services that are better for implementing
    and hosting microservices in containers. We will cover native AOT with minimal
    APIs later in this chapter. Whenever possible, implement your web services using
    minimal APIs instead of controllers.'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Minimal API route mappings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `WebApplication` instance has methods that you can call to map a route
    to a lambda expression or statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MapGet`: Map a route to a `GET` request to retrieve an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapPost`: Map a route to a `POST` request to insert an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapPut`: Map a route to a `PUT` request to update an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapPatch`: Map a route to a `PATCH` request to update an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapDelete`: Map a route to a `DELETE` request to delete an entity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MapMethods`: Map a route to any other HTTP method or methods, for example,
    `CONNECT` or `HEAD`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, you might want to map an HTTP `GET` request for the relative path
    `api/customers` to a delegate defined by a lambda expression or a function that
    returns a JSON document containing a list of customers, and equivalent mappings
    to insert and delete, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You might want to map an HTTP `CONNECT` request for the relative path `api/customers`
    to a lambda statement block, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have multiple endpoints that share a common relative path, then you
    can define a **route group**. The `MapGroup` method was introduced in .NET 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '**More Information**: You can learn more about mapping routes at the following
    link: [https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers](https://learn.microsoft.com/en-us/aspnet/core/fundamentals/minimal-apis/route-handlers).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding parameter mapping
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The delegate can have parameters defined that can be set automatically. Although
    most mappings can be configured without explicitly being specified, you can optionally
    use attributes to define where ASP.NET Core Minimal APIs should set the parameter
    values from:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[FromServices]`: The parameter will be set from the registered dependency
    services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FromRoute]`: The parameter will be set from a matching named route segment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FromQuery]`: The parameter will be set from a matching named query string
    parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[FromBody]`: The parameter will be set from the body of the HTTP request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, to update an entity in a database, you would need a database context
    to be retrieved from the registered dependency services, an identifier passed
    as a query string or route segment, and the new entity in the body of the request,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Understanding return values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A minimal API service can return data in some common formats, as shown in *Table
    8.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Type** | **Lambda** |'
  prefs: []
  type: TYPE_TB
- en: '| Plain text | `() => "Hello World!"``() => Results.Text("Hello World!")` |'
  prefs: []
  type: TYPE_TB
- en: '| JSON document | `() => new { FirstName = "Bob", LastName = "Jones" }``()
    => Results.Json(new { FirstName = "Bob", LastName = "Jones" })` |'
  prefs: []
  type: TYPE_TB
- en: '| `IResult` with status codes | `() => Results.Ok(new { FirstName = "Bob",
    LastName = "Jones" })``() => Results.NoContent()``() => Results.Redirect("new/path")``()
    => Results.NotFound()``() => Results.BadRequest()``() => Results.Problem()``()
    => Results.StatusCode(405)` |'
  prefs: []
  type: TYPE_TB
- en: '| File | `() => Results.File("/path/filename.ext")` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 8.1: Examples of minimal API return values'
  prefs: []
  type: TYPE_NORMAL
- en: Documenting a Minimal APIs service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can call additional methods as many times as you need to specify what return
    types and status codes can be expected from an endpoint, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Produces<T>(StatusCodes.Status200OK)`: When successful, this route returns
    a response containing a type `T` and status code `200`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Produces(StatusCodes.Status404NotFound)`: When no match for the route is found,
    this route returns an empty response and status code 404.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an ASP.NET Core Web API project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we willÂ create a simple ASP.NET Core Web API project that we will later
    protect using various techniques like rate limiting, CORS, and authentication
    and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'The API for this web service is defined as shown in *Table 8.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Method** | **Path** | **Request body** | **Response body** | **Success
    code** |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/` | None | Hello World! | `200` |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/api/products` | None | Array of in-stock `Product` objects | `200`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/api/products/outofstock` | None | Array of out-of-stock `Product`
    objects | `200` |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/api/products/discontinued` | None | Array of discontinued `Product`
    objects | `200` |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/api/products/{id}` | None | `Product` object | `200` |'
  prefs: []
  type: TYPE_TB
- en: '| `GET` | `/api/products/{name}` | None | Array of `Product` objects that contain
    the name | `200` |'
  prefs: []
  type: TYPE_TB
- en: '| `POST` | `/api/products` | `Product` object (no `Id` value) | `Product` object
    | `201` |'
  prefs: []
  type: TYPE_TB
- en: '| `PUT` | `/api/products/{id}` | `Product` object | None | `204` |'
  prefs: []
  type: TYPE_TB
- en: '| `DELETE` | `/api/products/{id}` | None | None | `204` |'
  prefs: []
  type: TYPE_TB
- en: 'Table 8.2: API methods implemented by the example project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâs go:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to create a new solution namedÂ `Chapter08`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Web API project, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project template:Â **ASP.NET Core Web API**Â /Â `webapi`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Solution file and folder:Â `Chapter08`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project file and folder:Â `Northwind.WebApi.Service`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication type**: **None**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable OpenAPI support**: Selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Use controllers**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a Web API project using minimal APIs with `dotnet new` for pre-.NET
    8 SDKs, you must use either the `-minimal` switch or the `--use-minimal-apis`
    switch. For .NET 8 SDKs, minimal APIs are the default and to use controllers,
    you must specify the `--use-controllers` or `-controllers` switch.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Warning!** If you are using JetBrains Rider, its user interface might not
    yet have an option to create a web API project using minimal APIs. I recommend
    creating the project using `dotnet new` and then adding the project to your solution.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add a project reference to the Northwind database context project for SQL Server
    that you created in *Chapter 3*, *Building Entity Models for SQL Server Using
    EF Core*, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The path cannot have a line break. If you did not complete the task of creating
    the class libraries in *Chapter 3*, then download the solution projects from the
    GitHub repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the project file, change `invariantGlobalization` to `false`, and treat
    warnings as errors, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Explicitly setting invariant globalization to `true` is new in the ASP.NET
    Core Web API project template with .NET 8\. It is designed to make a web service
    non-culture-specific so it can be deployed anywhere in the world and have the
    same behavior. By setting this property to `false`, the web service will default
    to the culture of the current computer it is hosted on. You can read more about
    invariant globalization mode at the following link: [https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md](https://github.com/dotnet/runtime/blob/main/docs/design/features/globalization-invariant-mode.md)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal, build the `Northwind.WebApi.Service` project
    to make sure the entity model class library projects outside the current solution
    are properly compiled, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Properties` folder, in `launchSettings.json`, modify the `applicationUrl`
    of the profile named `https` to use port `5081`, as shown highlighted in the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visual Studio 2022 will read this settings file and automatically run a web
    browser if `launchBrowser` is `true`, and then navigate to the `applicationUrl`
    and `launchUrl`. Visual Studio Code and `dotnet run` will not, so you will need
    to run a web browser and navigate manually to [https://localhost:5081/swagger](https://localhost:5081/swagger).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the statements about the weather service and replace
    them with statements to import the namespace to add the `NorthwindContext` to
    configured services, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new class file named `WebApplication.Extensions.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Good Practice**: Instead of cluttering your `Program.cs` file with hundreds
    of lines of code, define extension methods for the common types that are configured
    in minimal APIs, like `WebApplication` and `IServiceCollection`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `WebApplication.Extensions.cs`, import namespaces for controlling HTTP results,
    binding a parameter to a dependency service, and working with `Northwind` entity
    models, and then define an extension method for the `WebApplication` class to
    configure responses to all the HTTP `GET` requests documented in our API table,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class to configure a response to the HTTP `POST` request documented in the API
    table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class to configure a response to the HTTP `PUT` request documented in the API
    table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class to configure a response to the HTTP `DELETE` request documented in the API
    table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import the namespace to use the extension methods you just
    defined, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, before the call to `app.Run()`, call your custom extension
    methods to map `GET`, `POST`, `PUT`, and `DELETE` requests, noting that you can
    override the default page size of 10 entities when requesting all products, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, make sure the last statement in the file runs the web app,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing web services using Swagger
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can start the web service, see its documentation using Swagger, and
    perform basic manual testing:'
  prefs: []
  type: TYPE_NORMAL
- en: If your database server is not running (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the web service project using the `https` profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the **https** profile in the
    drop-down list and then navigate to **Debug** | **Start Without Debugging** or
    press *Ctrl* + *F5*. A web browser should navigate to the Swagger documentation
    web page automatically.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code, then enter the command `dotnet run --launch-profile
    https`, manually start a web browser, and navigate to the Swagger documentation
    web page: [https://localhost:5081/swagger](https://localhost:5081/swagger).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows, if prompted to do so, you will have to set Windows Defender Firewall
    to allow access to your local web service.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the console or terminal, note the information about your web service, as
    shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In your web browser, note the Swagger documentation, as shown in *Figure 8.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_08_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.1: Swagger documentation for the Northwind Web API service'
  prefs: []
  type: TYPE_NORMAL
- en: Click **GET /api/products** to expand that section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Try it out** button, note the optional query string parameter named
    **page**, and then click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the response includes the first ten products that are in stock and not
    discontinued: `1`, `2`, `3`, `4`, `6`, `7`, `8`, `10`, `11`, and `12`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **page** parameter, enter `3`, and then click the **Execute** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the response includes the third page of ten products that are in stock
    and are not discontinued: `25`, `26`, `27`, `30`, `32`, `33`, `34`, `35`, `36`,
    and `37`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **GET /api/products** to collapse that section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try executing the **GET /api/products/outofstock** path and note it returns
    one product, **31 Gorgonzola Telino**, which has zero units in stock and is not
    discontinued.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Try executing the **GET /api/products/discontinued** path and note it returns
    eight products, `5`, `9`, `17`, `24`, `28`, `29`, `42`, and `53`, which all have
    their `Discontinued` properties set to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **GET /api/products/{id}** to expand that section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Try it out**, enter the required **id** parameter as `77`, click **Execute**,
    and note the response contains the product named **Original Frankfurter grÃ¼ne
    SoÃe**, as shown in the following JSON document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **GET /api/products/{id}** to collapse that section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **GET /api/products/{name}** to expand that section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Try it out**, enter the required **name** parameter as `man`, click
    **Execute**, and note the response contains the products named **Queso Manchego
    La Pastora** and **Manjimup Dried Apples**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Leave the web service running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Testing web services with code editor tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the Swagger user interface to test web services can quickly get clumsy.
    A better tool is either the Visual Studio Code extension named **REST Client**
    or the **Endpoints Explorer** and `.http` file support available with Visual Studio
    2022 version 17.6 or later.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can learn about Visual Studio 2022 and its HTTP editor
    at the following link: [https://learn.microsoft.com/en-us/aspnet/core/test/http-files](https://learn.microsoft.com/en-us/aspnet/core/test/http-files).'
  prefs: []
  type: TYPE_NORMAL
- en: JetBrains Rider has a similar tool window named **Endpoints**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using JetBrains Rider, you can read about its tools for HTTP files
    at the following link: [https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html](https://www.jetbrains.com/help/rider/Http_client_in__product__code_editor.html).
    It is slightly different from the other two code editors. In particular, how Rider
    handles setting variables is more awkward, as shown at the following link: [https://www.jetbrains.com/help/rider/Exploring_HTTP_Syntax.html#example-working-with-environment-files](https://www.jetbrains.com/help/rider/Exploring_HTTP_Syntax.html#example-working-with-environment-files).
    You might prefer to use Visual Studio Code with the REST Client extension for
    this section.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâs see how these help us test a web service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure you have the web service testing tools installed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then make sure you have version 17.6 or
    later (released in May 2023).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, then make sure you have installed the REST
    Client extension by Huachao Mao (`humao.rest-client`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, navigate to **View** | **Other Windows**
    | **Endpoints Explorer**, and note the current project is scanned for potential
    Web API endpoints, as shown in *Figure 8.2*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In your preferred code editor, start the `Northwind.WebApi.Service` project
    using the `https` profile (if it is not already running) and leave it running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `apps-services-net8` folder, if it does not already exist, create an
    `HttpRequests` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `HttpRequests` folder, create a file named `webapi-get-products.http`
    and modify its contents to declare a variable to hold the base address of the
    Web API service products endpoint and a request to get the first page of ten products,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: REST Client does not require `GET` at the beginning of a
    request because it will assume `GET` as the default. But at the time of writing,
    Visual Studioâs HTTP editor requires `GET` to be explicitly specified. For now,
    I recommend that you specify the HTTP method for all tools, and I will do so for
    all `.http` files for my books.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click **Send Request**, and note the response is the same as what was returned
    by Swagger, a JSON document response containing the first ten products that are
    in stock and not discontinued, as shown in Visual Studio 2022 in *Figure 8.2*
    and Visual Studio Code in *Figure 8.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_08_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.2: Visual Studio 2022 getting products from the web API service'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19587_08_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.3: Visual Studio Code REST Client getting products from the web API
    service'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `webapi-get-products.http`, add more requests separated by `###`, as shown
    in the following file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can execute an HTTP request in Visual Studio 2022 by clicking the green
    triangle âplayâ button, by right-clicking and selecting **Send Request**, or by
    pressing *Ctrl* + *Alt* + *S*. In Visual Studio Code, click **Send Request** above
    each query, or navigate to **View** | **Command Palette** and select **Rest Client:
    Send Request**, or use its keyboard shortcut (*Ctrl* + *Alt* + *R* on Windows).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `HttpRequests` folder, create a file named `webapi-insert-product.http`
    and modify its contents to contain a **POST** request to insert a new product,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Send Request**, and note the response indicates that the new product
    was added successfully because the status code is `201`, and its location includes
    its product ID, as shown in *Figure 8.4*:![](img/B19587_08_04.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.4: REST Client inserting a new product by calling the web API service'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Originally, there were 77 products in the Northwind database. The next product
    ID would be 78\. The actual product ID assigned automatically will depend on whether
    you have previously added any other products, so your assigned number might be
    higher.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `HttpRequests` folder, create a file named `webapi-update-product.http`
    and modify its contents to contain a `PUT` request to update the product with
    ID `78` (or whatever number was assigned to your `Harry''s Hamburgers`) with a
    different quantity per unit, unit price, and units in stock, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Send the request and note you should get a 204 status code in the response,
    meaning a successful update.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Confirm the product was updated by executing a `GET` request for the product
    ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `HttpRequests` folder, create a file named `webapi-delete-product.http`
    and modify its contents to contain a `DELETE` request for the new product, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the successful response, as shown in *Figure 8.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_08_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.5: Deleting a product using the Web API service'
  prefs: []
  type: TYPE_NORMAL
- en: Send the request again and note the response contains a 404 status code because
    the product has now been deleted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Excluding paths from OpenAPI documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes you want to have a path that works but is not shown in the Swagger
    documentation. Letâs see how to remove the service base address that returns a
    plain text `Hello World!` response from the Swagger documentation web page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `WebApplication.Extensions.cs`, for the root path that returns `Hello World`,
    exclude it from the OpenAPI documentation, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging and note the path is now not documented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have a working web service implemented using ASP.NET Core Minimal APIs. Now
    letâs attack it! (So that we can learn how to prevent those attacks.)
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio 2022 scaffolding for Minimal APIs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is important to learn how to implement a service using minimal APIs from
    scratch so that you properly understand it. But once you know how to do it manually,
    the process can be automated and the boilerplate code can be written for you,
    especially if you are building a web API that wraps an EF Core entity model.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, Visual Studio 2022 has a project item template named **API with
    read/write endpoints, using Entity Framework** that allows you to select:'
  prefs: []
  type: TYPE_NORMAL
- en: An entity model class like `Customer`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An endpoints class that will contain all the mapping methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `DbContext`-derived class like `NorthwindContext`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A database provider like SQLite or SQL Server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more about this project item template at
    the following link: [https://devblogs.microsoft.com/visualstudio/web-api-development-in-visual-studio-2022/#scaffolding-in-visual-studio/](https://devblogs.microsoft.com/visualstudio/web-api-development-in-visual-studio-2022/#scaffolding-in-visual-studio/).'
  prefs: []
  type: TYPE_NORMAL
- en: Relaxing the same origin security policy using CORS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web browsers support multiple tabs so users can visit multiple websites
    at the same time efficiently. If code executing in one tab could access resources
    in another tab, then that could be a vector of attack.
  prefs: []
  type: TYPE_NORMAL
- en: All web browsers implement a security feature called the **same origin policy**.
    This means that only requests that come from the same origin are allowed. For
    example, if a block of JavaScript is served from the same origin that hosts a
    web service or served an `<iframe>`, then that JavaScript can call the service
    and access the data in the `<iframe>`. If a request is made from a different origin,
    then the request fails. But what counts as the âsame origin?â
  prefs: []
  type: TYPE_NORMAL
- en: 'An origin is defined by:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Scheme** aka protocol, for example, `http` or `https`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port**, for example, `801` or `5081`. The default port for `http` is `80`
    and for `https` is `443`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Host/domain/subdomain**, for example, `www.example.com`, `www.example.net`,
    `example.com`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the origin is `https://www.example.com/about-us/`, then the following are
    *not* the same origin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Different scheme: `http://www.example.com/about-us/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different host/domain: `https://www.example.co.uk/about-us/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different subdomain: `https://careers.example.com/about-us/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Different port: `https://www.example.com:444/about-us/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is the web browser that sets the `Origin` header automatically when making
    a request. This cannot be overridden.
  prefs: []
  type: TYPE_NORMAL
- en: '**Warning!** The same origin policy does *not* apply to any requests that come
    from a non-web browser because, in those cases, the programmer could change the
    `Origin` header anyway. If you create a console app or even an ASP.NET Core project
    that uses .NET classes like `HttpClient` to make a request, the same origin policy
    does not apply unless you explicitly set the `Origin` header.'
  prefs: []
  type: TYPE_NORMAL
- en: Letâs see some examples of calling the web service from a web page with a different
    origin and from a .NET app.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring HTTP logging for the web service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, letâs enable HTTP logging for the web service and configure it to show
    the origin of requests:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.WebApi.Service` project, add a new class file named `IServiceCollection.Extensions.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `IServiceCollection.Extensions.cs`, import the namespace for controlling
    which HTTP fields are logged, and then define an extension method for the `IServiceCollection`
    interface to add HTTP logging, including the `Origin` header and all fields including
    the response body, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, before the call to `builder.Build()`, add a statement to add
    custom HTTP logging, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after the call to `UseHttpsRedirection()`, add a statement
    to use HTTP logging, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `appsettings.Development.json`, add an entry to set the level for HTTP logging
    to `Information`, as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The JSON specification does not allow comments but the JSON
    with Comments format does. You can use JavaScript-style comments using `//` or
    `/* */`. You can read more at the following link: [https://code.visualstudio.com/docs/languages/json#_json-with-comments](https://code.visualstudio.com/docs/languages/json#_json-with-comments).
    If you are using a fussy code editor, just delete the comment I added above.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a web page JavaScript client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, letâs create a web page client that will attempt to use JavaScript on
    a different port to call the web service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter08`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.WebApi.Client.Mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other Visual Studio 2022 options:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication Type**: **None**.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Visual Studio 2022, configure the startup project to be the current selection.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Client.Mvc` project, in the `Properties` folder, in
    `launchSettings.json`, change the `applicationUrl` for the `https` profile to
    use port `5082`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Northwind.WebApi.Client.Mvc` project file, treat warnings as errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, replace the existing markup
    with the markup below, which has a link to a route that has not been defined yet
    to define a text box and button, and a JavaScript block that makes a call to the
    web service to get products that contain a partial name, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, then the web browser will not start automatically.
    Start Chrome, and then navigate to [https://localhost:5082](https://localhost:5082).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In Chrome, show **Developer Tools** and **Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Products using JavaScript** web page, in the text box, enter `man`,
    click the **Get Products** button, and note the error, as shown in the following
    output and in *Figure 8.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B19587_08_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.6: CORS error in the Chrome Developer Tools console'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal for the `Northwind.WebApi.Service` project,
    note the HTTP log for the request and that the `Host` is on a different port number
    to the `Origin` so they are not the same origin, as shown highlighted in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also note the output shows that the web service did execute the database query
    and return the products in a JSON document response to the browser, as shown in
    the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Although the browser receives a response containing the data requested, it is
    the browser that enforces the same origin policy by refusing to reveal the HTTP
    response to the JavaScript. The web service is not âsecuredâ by CORS.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Close the browser(s) and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a .NET client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, letâs create a .NET client to the web service to see that the same origin
    policy does not apply to non-web browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Client.Mvc` project, add a reference to the entity
    models project so that we can use the `Product` class, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Build the `Northwind.WebApi.Client.Mvc` project at the command prompt or terminal
    by entering the following command: `dotnet build`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Client.Mvc` project, in `Program.cs`, import the namespace
    for working with HTTP headers, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, before the call to `builder.Build()`, add statements to configure
    an HTTP client factory to call the web service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace for
    the entity models, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController.cs`, add statements to store the registered HTTP client
    factory in a private `readonly` field, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `HomeController.cs`, add an asynchronous action method named `Products`
    that will use the HTTP factory to request products whose name contains a value
    entered as an optional `name` parameter in a custom MVC route, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Views/Home` folder, add a new file named `Products.cshtml`. (The Visual
    Studio 2022 project item template is named **Razor View - Empty**. The JetBrains
    Rider project item template is named **Razor MVC View**.)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Products.cshtml`, modify its contents to output a table of products that
    match part of a product name entered in a text box, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, click the link to go to **Products using .NET**, and note
    the first ten in-stock, not discontinued products are shown in the table, from
    **Chai** to **Queso Manchego La Pastora**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the text box, enter `man`, click **Get Products**, and note that two products
    are shown in the table, as shown in *Figure 8.7*:![](img/B19587_08_07.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 8.7: Getting two products from a web service using .NET'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It is the .NET HTTP client that is calling the web service, so the same origin
    policy does not apply. If you were to check the logs at the command line or terminal
    as you did before, you would see the ports are different, but it does not matter.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click one of the product names to make a direct request to the web service
    for an individual product and note the response, as shown in the following document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding CORS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Cross-Origin Resource Sharing** (**CORS**) is an HTTP-header-based feature
    that asks the browser to disable its same-origin security policy in specific scenarios.
    The HTTP headers indicate which origins should be allowed in addition to the same
    origin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâs enable CORS in the web service so that it can send extra headers to indicate
    to the browser that it is allowed to access resources from a different origin:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Service` project, in `WebApplication.Extensions.cs`,
    add an extension method to add CORS support to the web service, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after creating the `builder`, call the custom extension method
    to add CORS support, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after the call to `UseHttpLogging`, and before mapping the
    `GET` requests, add a statement to use the CORS policy, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show **Developer Tools** and the **Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the home page, in the text box, enter `man`, click **Get Products**, and
    note that the console shows the JSON document returned from the web service, and
    the table is filled with the two products, as shown in *Figure 8.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_08_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.8: A successful cross-origin request to the web service using JavaScript'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enabling CORS for specific endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous example, we enabled the same CORS policy for the whole web
    service. You might need finer control at the endpoint level:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Service` project, in `Program.cs`, change the call
    to `UseCors` to not specify the policy name, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, at the end of the call to `MapGet` that
    gets products that contain part of a product name, add a call to `RequiresCors`,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Mvc` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Show **Developer Tools** and **Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the home page, in the text box, enter `cha`, click **Get Products**, and
    note that the console shows the JSON document returned from the web service and
    the table is filled with three products.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser and shut down the web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Understanding other CORS policy options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can control the:'
  prefs: []
  type: TYPE_NORMAL
- en: Allowed origins, for example, `https://*.example.com/`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowed HTTP methods, for example, `GET`, `POST`, `DELETE`, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allowed HTTP request headers, for example, `Content-Type`, `Content-Language`,
    `x-custom-header`, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exposed HTTP response headers, meaning which headers to include unredacted in
    a response (because, by default, response headers are redacted), for example,
    `x-custom-header`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can learn more about options for CORS policies at the following link: [https://learn.microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options](https://learn.microsoft.com/en-us/aspnet/core/security/cors#cors-policy-options)'
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know that CORS does not secure a web service, letâs look at a useful
    technique that can prevent a common form of attack.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing denial of service attacks using rate limiting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **denial of service** (**DoS**) attack is a malicious attempt to disrupt a
    web service by overwhelming it with requests. If the requests all came from the
    same place, for example, the same IP address, then it would be relatively easy
    to cut them off as soon as the attack is detected. But these attacks are often
    implemented as **distributed DoS** (**DDoS**) attacks from many locations so you
    cannot separate attackers from genuine clients.
  prefs: []
  type: TYPE_NORMAL
- en: A different approach is to apply rate limiting to everyone but let through more
    requests for genuine identified clients.
  prefs: []
  type: TYPE_NORMAL
- en: Genuine clients should only make the minimum requests they need. How many is
    reasonable will depend on your service. One way to prevent DDoS attacks would
    be to limit how many requests are allowed from any client per minute.
  prefs: []
  type: TYPE_NORMAL
- en: This technique is not just useful to prevent attacks. Even genuine clients might
    accidentally make too many requests, or for a commercial web service, you might
    want to charge different amounts for different rates, like when controlling a
    subscription. Commercial web services from Twitter/X to Reddit now charge a *lot*
    of money for access to their web APIs.
  prefs: []
  type: TYPE_NORMAL
- en: When a client makes requests over a set rate limit, the client should receive
    either `429 Too Many Requests` or `503 Service Unavailable` HTTP responses.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: If you need to build a massively scalable web service and
    protect its APIs, you should use a cloud service like Azure API Management instead
    of trying to implement your own rate limiting. You can learn more about this at
    the following link: [https://learn.microsoft.com/en-us/azure/api-management/](https://learn.microsoft.com/en-us/azure/api-management/).'
  prefs: []
  type: TYPE_NORMAL
- en: Rate limiting using the AspNetCoreRateLimit package
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`AspNetCoreRateLimit`, a third-party package that targets .NET 6 or later,
    provides flexible rate-limiting middleware based on the IP address or client ID:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Service` project, add a reference to the `AspNetCoreRateLimit`
    package, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.WebApi.Service` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `appsettings.Development.json`, add configuration for default rate limit
    options and client-specific policies, as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`EnableEndpointRateLimiting` is `false`, meaning all endpoints will share the
    same rules.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a client needs to identify itself, it can set a header named `X-Client-Id`
    to a unique `string` value.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If a rate limit is reached for a client, the service will start returning `429`
    status code responses to that client.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two endpoints will be excluded from the global rate limits because they are
    on the endpoint whitelist. One endpoint is for getting a license, and the other
    endpoint is for checking the status of the service. We will not actually implement
    these features and you would want to apply different rate limits to these endpoints;
    otherwise, someone could call them to bring down your server instead.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two client IDs, named `dev-id-1` and `dev-id-2`, will be excluded from the rate
    limits because they are on the client whitelist. These could be special client
    accounts for internal developers that are not shared outside the organization.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two general (default) rules are configured: the first sets a rate limit of
    2 requests every 10 seconds, and the second sets a rate limit of 100 requests
    every 12 hours.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Two client-specific rules are configured that are looser than the default rules:
    for the client ID named `console-client-abc123`, it is allowed to make up to 5
    requests every 10 seconds, and up to 250 requests every 12 hours.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `IServiceCollection.Extensions.cs`, import the namespace for working with
    rate-limiting options, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `IServiceCollection.Extensions.cs`, define an extension method to load rate-limiting
    configuration from app settings and set rate-limiting options, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after creating the `builder`, add statements to load rate-limiting
    configuration from app settings and set rate-limiting options, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `IServiceCollection.Extensions.cs`, in the call to configure HTTP logging,
    add a statement to allow two rate-limiting headers to not be redacted, as shown
    highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, import the namespace for working with rate-limiting
    policy stores, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, add statements to define an extension method
    to seed the client policy store, which just means loading the policies from the
    configuration, and then use client rate limits, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after calling `UseHttpLogging`, add a call to use client rate
    limiting, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a rate-limited console client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can create a console app that will be a client to the web service:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new console app to the `Chapter08` solution
    named `Northwind.WebApi.Client.Console`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Client.Console` project, treat warnings as errors,
    globally and statically import the `System.Console` class, and add a reference
    to the entity models project, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.WebApi.Client.Console` project at the command prompt or
    terminal to compile the referenced project and copy its assembly to the appropriate
    `bin` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Northwind.WebApi.Client.Console` project, add a new class file named
    `Program.Helpers.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.Helpers.cs`, add statements to define a method for the `partial
    Program` class to write some text in a foreground color, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, delete the existing statements. Add statements to prompt the
    user for a client name to identify it, and then create an HTTP client to make
    a request to get the first page of products from the web service once per second
    until the user presses *Ctrl* + *C* to stop the console app, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your database server is not running (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Console` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the console app, press *Enter* to generate a GUID-based client ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Console` project using the `https` profile
    without debugging again so we have two clients.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the console app, press *Enter* to generate a GUID-based client ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that each client can make two requests before it starts to receive `429`
    status codes, as shown in the following output and in *Figure 8.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B19587_08_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.9: A console app exceeding its web service rate limit'
  prefs: []
  type: TYPE_NORMAL
- en: Stop the two console apps. Leave the web service running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the command line for the web service, note the HTTP logs that show each
    request from the console client with its client ID sent as a header named `X-Client-Id`,
    the request being blocked because that client has exceeded its quota, and a response
    that contains a header named `Retry-After` containing the number of seconds the
    client should wait before retrying, as shown highlighted in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.WebApi.Client.Console` project, in `Program.cs`, before writing
    the error message to the console in dark red, add statements to read the `Retry-After`
    header to get the number of seconds to wait for, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the `waitFor` variable is set from the `Retry-After` header value. This
    is later used to pause the console app using an asynchronous delay, as shown in
    the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`await Task.Delay(TimeSpan.FromSeconds(waitFor));`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.WebApi.Client.Console` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the console app, press *Enter* to generate a GUID-based client ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the console app will now sensibly wait for the suggested number of seconds
    before making its next call to the service, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Stop and restart the `Northwind.WebApi.Client.Console` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the console app, enter the name `dev-id-1`, and note that the rate limit
    does not apply to this console app client. This could be a special account for
    internal developers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stop and restart the `Northwind.WebApi.Client.Console` project without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the console app, enter the name `console-client-abc123`, and note that the
    rate limit is different for this console app client ID, as shown in the following
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rate limiting using ASP.NET Core middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'ASP.NET Core 7 introduced its own basic rate-limiting middleware, initially
    distributed as a separate NuGet package but now included with ASP.NET Core. It
    has a dependency on another Microsoft package, `System.Threading.RateLimiting`.
    It is not as feature-rich as the third-party package and we will not cover it
    in this book, although I have written an online-only section at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-rate-limiting.md)'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn about the ASP.NET Core rate limiter at the following link: [https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit](https://learn.microsoft.com/en-us/aspnet/core/performance/rate-limit).'
  prefs: []
  type: TYPE_NORMAL
- en: Protecting your web services from attacks is important. What about improving
    the performance of your web service? Is there anything we can do about that?
  prefs: []
  type: TYPE_NORMAL
- en: Improving startup time and resources using native AOT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Native AOT produces apps and services that are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Self-contained**, meaning they can run on systems that do not have the .NET
    runtime installed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ahead-of-time (AOT) compiled to native code**, meaning a faster startup time
    and a potentially smaller memory footprint. This can have a positive impact when
    you have lots of instances (for example, when deploying massively scalable microservices)
    that are frequently stopped and restarted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native AOT compiles **intermediate code** (**IL**) to native code at the time
    of publishing, rather than at runtime using the **Just-In-Time** (**JIT**) compiler.
    But native AOT apps and services must target a specific runtime environment like
    Windows x64 or Linux ARM.
  prefs: []
  type: TYPE_NORMAL
- en: Since native AOT happens at publish time, while debugging and working live on
    a project in your code editor, it uses the runtime JIT compiler, not native AOT,
    even if you have AOT enabled in the project! But some features that are incompatible
    with native AOT will be disabled or throw exceptions, and a source analyzer is
    enabled to show warnings about potential code incompatibilities.
  prefs: []
  type: TYPE_NORMAL
- en: Limitations of native AOT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Native AOT has limitations, some of which are shown in the following list:'
  prefs: []
  type: TYPE_NORMAL
- en: No dynamic loading of assemblies.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No runtime code generation, for example, using `System.Reflection.Emit`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It requires trimming, which has its own limitations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The assembly must be self-contained, so they must embed any libraries they call,
    which increases their size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although your own apps and services might not use the features listed above,
    major parts of .NET itself do. For example, ASP.NET Core MVC (including Web API
    services that use controllers) and EF Core do runtime code generation to implement
    their functionality.
  prefs: []
  type: TYPE_NORMAL
- en: The .NET teams are hard at work making as much of .NET compatible with native
    AOT as possible, as soon as possible. But .NET 8 only includes basic support for
    ASP.NET Core if you use minimal APIs, and no support for EF Core.
  prefs: []
  type: TYPE_NORMAL
- en: My guess is that .NET 9 will include support for ASP.NET Core MVC and some parts
    of EF Core, but it could take until .NET 10 before we can all confidently use
    most of .NET and know we can build our apps and services with native AOT to gain
    the benefits.
  prefs: []
  type: TYPE_NORMAL
- en: The native AOT publishing process includes code analyzers to warn you if you
    use any features that are not supported, but not all packages have been annotated
    to work well with this yet.
  prefs: []
  type: TYPE_NORMAL
- en: The most common annotation used to indicate that a type or member does not support
    AOT is the `[RequiresDynamicCode]` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more about AOT warnings at the following
    link: [https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing-warnings](https://learn.microsoft.com/en-us/dotnet/core/deploying/native-aot/fixing-warnings).'
  prefs: []
  type: TYPE_NORMAL
- en: Reflection and native AOT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reflection is frequently used for runtime inspection of type metadata, dynamic
    invocation of members, and code generation.
  prefs: []
  type: TYPE_NORMAL
- en: Native AOT does allow some reflection features, but the trimming performed during
    the native AOT compilation process cannot statically determine when a type has
    members that might be only accessed via reflection. These members would be removed
    by AOT, which would then cause a runtime exception.
  prefs: []
  type: TYPE_NORMAL
- en: '**Good Practice**: Developers must annotate their types with `[DynamicallyAccessedMembers]`
    to indicate a member that is only dynamically accessed via reflection and should
    therefore be left untrimmed.'
  prefs: []
  type: TYPE_NORMAL
- en: Native AOT for ASP.NET Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: .NET 7 only supported native AOT with console apps and class libraries on Windows
    or Linux. It did not support macOS or ASP.NET Core. .NET 8 is the first version
    to support macOS and parts of ASP.NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ASP.NET Core features are fully supported: `gRPC`, `CORS`, `HealthChecks`,
    `HttpLogging`, `Localization`, `OutputCaching`, `RateLimiting`, `RequestDecompression`,
    `ResponseCaching`, `ResponseCompression`, `Rewrite`, `StaticFiles`, and `WebSockets`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ASP.NET Core features are partially supported: minimal APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following ASP.NET Core features are not supported (yet): MVC, Blazor Server,
    SignalR, Authentication (except JWT), Session, and SPA.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you have previously seen, you implement an ASP.NET Core Minimal APIs web
    service by mapping an HTTP request to a lambda expression, for example, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: At runtime, ASP.NET Core uses the `RequestDelegateFactory` (**RDF**) class to
    convert your `MapX` calls into `RequestDelegate` instances. But this is dynamic
    code so is not compatible with native AOT.
  prefs: []
  type: TYPE_NORMAL
- en: In ASP.NET Core 8, when native AOT is enabled, the runtime use of RDF is replaced
    with a source generator named **Request Delegate Generator** (**RDG**) that performs
    similar work but at compile time. This makes sure the code generated is statically
    analyzable by the native AOT publish process.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can learn how to create your own source generator
    at the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/ch01-dynamic-code.md#creating-source-generators](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch01-dynamic-code.md#creating-source-generators).'
  prefs: []
  type: TYPE_NORMAL
- en: Requirements for native AOT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are additional requirements for different operating systems:'
  prefs: []
  type: TYPE_NORMAL
- en: On Windows, you must install the Visual Studio 2022 **Desktop development with
    C++** workload with all default components.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Linux, you must install the compiler toolchain and developer packages for
    libraries that the .NET runtime depends on. For example, for Ubuntu 18.04 or later:
    `sudo apt-get install clang zlib1g-dev`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warning!** Cross-platform native AOT publishing is not supported. This means
    that you must run the publish on the operating system that you will deploy to.
    For example, you cannot publish a native AOT project on Linux to later run on
    Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Enabling native AOT for a project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable native AOT publishing in a project, add the `<PublishAot>` element
    to the project file, as shown highlighted in the following markup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Enabling JSON serialization with native AOT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JSON serialization with native AOT requires the use of the `System.Text.Json`
    source generator. All model types passed as parameters or return values must be
    registered with a `JsonSerializerContext`, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Your custom JSON serializer context must be added to the service dependencies,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Building a native AOT project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now letâs see a practical example using the new project template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the solution named `Chapter08`, add a native AOT-compatible web service
    project, as defined in the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project template:Â **ASP.NET Core Web API (native AOT)**Â /Â `webapiaot`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a new project template introduced with .NET 8\. It is different from
    the **Web API** / `webapi` project template. It does not have an option to use
    controllers since native AOT support is currently minimal APIs-only. It also does
    not have an option for HTTPS because HTTPS is often handled by a reverse-proxy
    in cloud-native deployments. In JetBrains Rider, select **ASP.NET Core Web Application**
    and then select the **Type** of **Web API (native AOT)**.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Solution file and folder:Â `Chapter08`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Project file and folder:Â `Northwind.MinimalAot.Service`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Properties` folder, in `launchSettings.json`, note only `http` is configured;
    delete the `launchUrl` and modify the port to use `5083`, as shown highlighted
    in the following configuration:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'In the project file, change invariant globalization to `false`, treat warnings
    as errors, note that native AOT publishing is enabled, and add a package reference
    for SQL Server for ADO.NET, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new class file named `Product.cs`, and modify its contents to define
    a class to represent just the three columns we want from each row in the `Products`
    table, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new class file named `NorthwindJsonSerializerContext.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `NorthwindJsonSerializerContext.cs`, define a class that enables a `Product`
    and a list of `Product` objects to be serialized as JSON, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Delete the `Northwind.MinimalAot.Service.http` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new class file named `WebApplication.Extensions.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `WebApplication.Extensions.cs`, define an extension method for the `WebApplication`
    class that maps some HTTP `GET` requests to return a plain text response, and
    a list of either all products or products with a minimum price from the Northwind
    database using ADO.NET, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With native AOT, we cannot use EF Core, so we are using the lower-level ADO.NET
    SqlClient API. This is faster and more efficient anyway. In the future, perhaps
    with .NET 9 or .NET 10, we will be able to use our EF Core model for Northwind
    instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, note the call to the `CreateSlimBuilder` method, which ensures
    that only the essential features of ASP.NET Core are enabled by default, so it
    minimizes the deployed web service size, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `CreateSlimBuilder` method does not include support for HTTPS or HTTP/3,
    although you can add those back in yourself if you need them. It does support
    JSON file configuration for `appsettings.json` and logging.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, after the call to `builder.Build()`, delete the statements
    that generated some sample todos and map some endpoints, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, at the bottom of the file, delete the statements that define
    the `Todo` record and `AppJsonSerializerContext` class, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, delete the namespace imports, import the namespaces for our
    JSON serializer context and extension methods, modify the statement that inserts
    the JSON serialization context to use the Northwind one, and then before running
    the web `app`, call the `MapGets` method, as shown highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your database server is not running (for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud), then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the web service project using the `http` profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the **http** profile in the
    drop-down list and then navigate to **Debug** | **Start Without Debugging** or
    press *Ctrl* + *F5*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code, then enter the command `dotnet run --launch-profile
    http`, manually start a web browser, and navigate to the web service: `https://localhost:5083/`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the web browser, note the plain text response: `Hello from a native AOT
    minimal API web service.`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the address bar, append `/products`, and note the array of products in the
    response, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the address bar, append `/products/100`, and note the array of two products
    in the response, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Publishing a native AOT project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A service that functions correctly during development when the service is untrimmed
    and JIT-compiled could still fail once you publish it using native AOT. You should
    therefore perform a publish before assuming your project will work.
  prefs: []
  type: TYPE_NORMAL
- en: If your project does not produce any AOT warnings at publish time, you can then
    be confident that your service will work after publishing for AOT.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâs review the source-generated code and publish our web service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.MinimalAot.Service` project file, add an element to emit
    compiler-generated files, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.MinimalAot.Service` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, toggle **Show All Files** in **Solution
    Explorer**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Expand the `obj\Debug\net8.0\generated` folder, and note the folders and files
    that have been created by the source generators for AOT and JSON serialization,
    and note that you will be opening some of these files in the next few steps, as
    shown in *Figure 8.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_08_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 8.10: Folders and files created by source generators in an AOT web service
    project'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `GeneratedRouteBuilderExtensions.g.cs` file, and note it contains code
    to define the mapped routes for the minimal API web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `NorthwindJsonSerializerContext.Decimal.g.cs` file, and note it contains
    code to serialize a `decimal` value passed as the minimum unit price parameter
    to one of the routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `NorthwindJsonSerializerContext.ListProduct.g.cs` file, and note it
    contains code to serialize a list of `Product` objects returned as a response
    for two of the routes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.MinimalAot.Service` folder, at the command prompt or terminal,
    publish the web service using native AOT, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the message about generating native code and trim warnings for packages
    like `Microsoft.Data.SqlClient`, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We did not use the `DataTable.ReadXml` method, which is calling a potentially
    trimmed member, so we can ignore the preceding warning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start **File Explorer** and open the `bin\Release\net8.0\win-x64\publish` folder
    and note the EXE file is about 30 MB. This and the `Microsoft.Data.SqlClient.SNI.dll`
    file are the only files that need to be deployed onto another Windows computer
    for the web service to work. The `appsettings.json` files are only needed to override
    configuration if needed. The PDB file is only needed if debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `Northwind.MinimalAot.Service.exe`, and note the web service starts
    up very fast and it will use port `5000` by default, as shown in *Figure 8.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_08_11.png)Figure 8.11: File Explorer showing published executable
    and running the AOT web service'
  prefs: []
  type: TYPE_NORMAL
- en: Start a web browser, navigate to `http://localhost:5000/`, and note the web
    service works correctly by returning the plain text response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:5000/products/100`, and note the web service responds
    with the two products that have a minimum unit price of 100.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the web browser and shut down the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Service` project file, at the command prompt or terminal,
    publish the web service, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start **File Explorer**, open the `bin\Release\net8.0\win-x64\publish` folder,
    and note the `Northwind.WebApi.Service.exe` file is less than 154 KB. That is
    because it is framework-dependent, meaning it needs .NET installed on the computer
    to work. Also, there are many files that must be deployed along with the EXE file
    that add up to about 14 MB.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the `Northwind.MinimalAot.Service.exe` and note the web service starts up
    slower than the AOT version and it will use port `5000` by default.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start a web browser, navigate to `http://localhost:5000/`, and note the web
    service works correctly by returning the plain text response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `http://localhost:5000/products/100`, and note the web service responds
    with the two products that have a minimum unit price of 100 but the response is
    slower than the AOT version.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the web browser and shut down the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Many .NET developers have been waiting for AOT compilation for a long time.
    Microsoft is finally delivering on the promise, and it will expand to cover more
    project types over the next few major versions, so itâs a technology to keep an
    eye on.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding identity services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Identity services are used to authenticate and authorize users. It is important
    for these services to implement open standards so that you can integrate disparate
    systems. Common standards include **OpenID Connect** and **OAuth 2.0**.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft has no plans to officially support third-party authentication servers
    like **IdentityServer4** because âcreating and sustaining an authentication server
    is a full-time endeavor, and Microsoft already has a team and a product in that
    area, Azure Active Directory, which allows 500,000 objects for free.â
  prefs: []
  type: TYPE_NORMAL
- en: JWT bearer authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JSON Web Token** (**JWT**) is a standard that defines a compact and secure
    method to transmit information as a JSON object. The JSON object is digitally
    signed so it can be trusted. The most common scenario for using JWT is authorization.'
  prefs: []
  type: TYPE_NORMAL
- en: A user logs in to a trusted party using credentials like a username and password
    or biometric scan or two-factor authentication, and the trusted party issues a
    JWT. This is then sent with every request to the secure web service.
  prefs: []
  type: TYPE_NORMAL
- en: 'In their compact form, JWTs consist of three parts separated by dots. These
    parts are the *header*, *payload*, and *signature*, as shown in the following
    format: `aaa.bbb.ccc`. The header and payload are Base64 encoded.'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating service clients using JWT bearer authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: During local development, the `dotnet user-jwts` command-line tool is used to
    create and manage local JWTs. The values are stored in a JSON file in the local
    machineâs user profile folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâs secure the web service using JWT bearer authentication and test it with
    a local token:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.WebApi.Service` project, add a reference to the package for
    JWT bearer authentication, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.WebApi.Service` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, after creating the `builder`, add statements to add authorization
    and authentication using JWT, as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after building the app, add a statement to use authorization,
    as shown highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, import the namespace for security claims,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `WebApplication.Extensions.cs`, after mapping an HTTP `GET` request for
    the root path to return a plain text `Hello World` response, add a statement to
    map an HTTP `GET` request for the secret path to return the authenticated userâs
    name if they are authorized, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.WebApi.Service` project folder, at the command prompt or
    terminal, create a local JWT, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the automatically assigned `ID`, `Name`, and `Token`, as shown in the
    following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the command prompt or terminal, print all the information for the ID that
    was assigned, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the scheme is `Bearer` so the token must be sent with every request, the
    audience(s) lists the authorized client domains and port numbers, the token expires
    after three months, the JSON objects represent the header and payload, and finally,
    thereâs the compact token with its Base64-encoded three parts separated by dots,
    as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.WebApi.Service` project, in `appsettings.Development.json`,
    note the new section named `Authentication`, as shown highlighted in the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.WebApi.Service` project using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the browser, change the relative path to `/secret` and note the response
    is rejected with a 401 status code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Visual Studio Code and open the `HttpRequests` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `HttpRequests` folder, create a file named `webapi-secure-request.http`
    and modify its contents to contain a request to get the secret ingredient, as
    shown in the following code (but use your `Bearer` token, of course):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Send Request**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser and shut down the web service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapterâs topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.1 â Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: List six method names that can be specified in an HTTP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: List six status codes and their descriptions that can be returned in an HTTP
    response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How is the ASP.NET Core Minimal APIs service technology different from the ASP.NET
    Core Web APIs service technology?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the ASP.NET Core Minimal APIs service technology, how do you map an HTTP
    `PUT` request to `api/customers` to a lambda statement block?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the ASP.NET Core Minimal APIs service technology, how do you map a method
    or lambda parameter to a value in a route, query string, or the body of the request?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does enabling CORS increase security for a web service?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have added statements to `Program.cs` to enable HTTP logging but HTTP requests
    and responses are not being logged. What is the most likely reason and how can
    you fix it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you limit the rate of requests for a specific client using the `AspNetCoreRateLimit`
    package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you limit the rate of requests for a specific endpoint using the `Microsoft.AspNetCore.RateLimiting`
    package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does JWT mean?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 8.2 â Review Microsoft HTTP API design policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft has internal HTTP/REST API design guidelines. Microsoft teams reference
    this document when designing their HTTP APIs. They are a great starting point
    for your own standards for HTTP APIs. You can review them at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/microsoft/api-guidelines](https://github.com/microsoft/api-guidelines)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The guidelines have a section specific to CORS and you can review them at the
    following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#8-cors](https://github.com/microsoft/api-guidelines/blob/vNext/Guidelines.md#8-cors)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.3 â Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-8---building-and-securing-web-services-using-minimal-apis](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-8---building-and-securing-web-services-using-minimal-apis)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.4 â Exposing data via the web using OData services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Learn how to quickly implement a Web API service that can wrap an EF Core entity
    model using OData in this online-only chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-odata.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/ch08-odata.md)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 8.5 â Auth0 project templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you need to implement Auth0 for authentication and authorization, then you
    can use project templates to scaffold your code. An article describing these project
    templates and how to use them is found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://auth0.com/blog/introducing-auth0-templates-for-dotnet/](https://auth0.com/blog/introducing-auth0-templates-for-dotnet/)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Build a web service that implements the REST architectural style using minimal
    APIs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relax the same-origin security policy for specified domains and ports using
    CORS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement two different rate-limiting packages to prevent denial of service
    attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure services using JWT bearer authorization.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to build reliable and scalable services
    by adding features like caching, queues, and automatic handling of transient faults
    using libraries like Polly.
  prefs: []
  type: TYPE_NORMAL
