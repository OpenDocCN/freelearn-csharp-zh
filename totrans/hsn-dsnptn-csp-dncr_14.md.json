["```cs\nSELECT Purchaser, SUM(Amount), SUM(Price)\nFROM Apples\nGROUP BY Purchaser\n```", "```cs\npublic class Product\n{\n    public Guid Id { get; set; }\n    public string Name { get; set; }\n    public string Description { get; set; }\n    public string Image { get; set; }\n    public decimal Price { get; set; }\n}\n```", "```cs\npublic class CommandResponse\n{\n    public Guid Id { get; set; }\n    public bool Success { get; set; }\n    public string Message { get; set; }\n\n}\n```", "```cs\npublic interface IQuery<out TResponse>\n{\n}\n```", "```cs\npublic class ProductQuery : IQuery<IEnumerable<Product>>\n{\n}\n\npublic class SingleProductQuery : IQuery<Product>\n{\n    public SingleProductQuery(Guid id)\n    {\n        Id = id;\n    }\n\n    public Guid Id { get; }\n\n}\n```", "```cs\npublic class ProductQueryHandler : IQueryHandler<ProductQuery, IEnumerable<Product>>\n{\n    public IEnumerable<Product> Get()\n    {\n        //call repository\n        throw new NotImplementedException();\n    }\n}\npublic class SingleProductQueryHandler : IQueryHandler<SingleProductQuery, Product>\n{\n    private SingleProductQuery _productQuery;\n    public SingleProductQueryHandler(SingleProductQuery productQuery)\n    {\n        _productQuery = productQuery;\n    }\n\n    public Product Get()\n    {\n        //call repository\n        throw new NotImplementedException();\n    }\n}\n```", "```cs\npublic static class ProductQueryHandlerFactory\n{\n    public static IQueryHandler<ProductQuery, IEnumerable<Product>> Build(ProductQuery productQuery)\n    {\n        return new ProductQueryHandler();\n    }\n\n    public static IQueryHandler<SingleProductQuery, Product> Build(SingleProductQuery singleProductQuery)\n    {\n        return  new SingleProductQueryHandler(singleProductQuery);\n    }\n}\n```", "```cs\n[Route(\"api/[controller]\")]\npublic class ProductController : Controller\n{\n    // GET: api/<controller>\n    [HttpGet]\n    public IEnumerable<Product> Get()\n    {\n        var query = new ProductQuery();\n        var handler = ProductQueryHandlerFactory.Build(query);\n        return handler.Get();\n    }\n\n    // GET api/<controller>/5\n    [HttpGet(\"{id}\")]\n    public Product Get(string id)\n    {\n        var query = new SingleProductQuery(id.ToValidGuid());\n        var handler = ProductQueryHandlerFactory.Build(query);\n        return handler.Get();\n    }\n```", "```cs\n\n    // POST api/<controller>\n    [HttpPost]\n    public IActionResult Post([FromBody] Product product)\n    {\n        var command = new SaveProductCommand(product);\n        var handler = ProductCommandHandlerFactory.Build(command);\n        var response = handler.Execute();\n        if (!response.Success) return StatusCode(500, response);\n        product.Id = response.Id;\n        return Ok(product);\n\n    }\n```", "```cs\n\n    // DELETE api/<controller>/5\n    [HttpDelete(\"{id}\")]\n    public IActionResult Delete(string id)\n    {\n        var command = new DeleteProductCommand(id.ToValidGuid());\n        var handler = ProductCommandHandlerFactory.Build(command);\n        var response = handler.Execute();\n        if (!response.Success) return StatusCode(500, response);\n        return Ok(response);\n    }\n\n```", "```cs\n//Register Swagger\n            services.AddSwaggerGen(swagger =>\n            {\n                swagger.SwaggerDoc(\"v1\", new Info { Title = \"Product APIs\", Version = \"v1\" });\n            });\n```", "```cs\n// Enable middleware to serve generated Swagger as a JSON endpoint.\napp.UseSwagger();\n\n// Enable middleware to serve swagger-ui (HTML, JS, CSS, etc.), specifying the Swagger JSON endpoint.\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Product API V1\");\n});\n```"]