["```cs\n[HttpGet]\n[Route(\"GetProduct\")]\npublic IActionResult Get() => \nreturn new\nOkObjectResult(_productRepository.GetAll().ToViewModel());\n```", "```cs\n[HttpGet]\n[Route(\"GetProductSync\")]\npublic IActionResult GetIsStillSynchronous()\n{\n   var task = Task.Run(async() => await\n   _productRepository.GetAllAsync());\n   return new OkObjectResult(task.Result.ToViewModel());\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing FlixOne.BookStore.ProductService.Models;\n\nnamespace FlixOne.BookStore.ProductService.Helpers\n{\n   public static class Transpose\n   {\n      public static ProductViewModel ToViewModel(this Product\n      product)\n      {\n         return new ProductViewModel\n         {\n            CategoryId = product.CategoryId,\n            CategoryDescription = product.Category.Description,\n            CategoryName = product.Category.Name,\n            ProductDescription = product.Description,\n            ProductId = product.Id,\n            ProductImage = product.Image,\n            ProductName = product.Name,\n            ProductPrice = product.Price\n          };\n      } \n      public static IEnumerable<ProductViewModel>\n      ToViewModel(this IEnumerable<Product> products) =>\n      products.Select(ToViewModel).ToList();\n   }\n}\n```", "```cs\nnamespace FlixOne.BookStore.ProductClient\n{\n   class Program\n   {\n      private const string ApiKey = \"myAPI Key\";\n      private const string BaseUrl = \"http://localhost:3097/api\";\n      static void Main(string[] args)\n      {\n         GetProductList(\"/product/GetProductAsync\");\n         //Console.WriteLine(\"Hit ENTER to exit...\");\n         Console.ReadLine();\n      }\n      private static async void GetProductList(string resource)\n      {\n         using (var client = new HttpClient())\n         {\n            var queryString =\n            HttpUtility.ParseQueryString(string.Empty);\n\n            client.DefaultRequestHeaders.Add(\"Ocp-Apim-Subscription-\n            Key\", ApiKey);\n\n            var uri = $\"{BaseUrl}{resource}?{queryString}\";\n\n            //Get asynchronous response for further usage\n            var response = await client.GetAsync(uri);\n            Console.WriteLine(response);\n          }\n       }\n    }\n }\n```", "```cs\n private static async Task MainAsync()\n {\n    const int numberOfMessagesToSend = 10;\n    _client = new QueueClient(ConnectionString, QueueName);\n    WriteLine(\"Starting...\");\n    await SendMessagesAsync(numberOfMessagesToSend);\n    WriteLine(\"Ending...\");\n    WriteLine(\"Press any key...\");\n    ReadKey();\n    await _client.CloseAsync();\n }\n```", "```cs\nprivate static async Task SendMessagesAsync(int numberOfMessagesToSend)\n{\n   try\n   {\n      for (var index = 0; index < numberOfMessagesToSend; index++)\n       {\n          var customMessage = $\"#{index}:\n          A message from FlixOne.BookStore.MessageSender.\";\n          var message = new\n          Message(Encoding.UTF8.GetBytes(customMessage));\n          WriteLine($\"Sending message: {customMessage}\");\n          await _client.SendAsync(message);\n       }\n   }\n   catch (Exception exception)\n   {\n      WriteLine($\"Weird! It's exception with message:\n      {exception.Message}\");\n   }\n}\n```", "```cs\nprivate static IConfigurationRoot ConfigureBuilder()\n{\n   return new ConfigurationBuilder()\n   .SetBasePath(Directory.GetCurrentDirectory())\n   .AddJsonFile(\"appsettings.json\")\n   .Build();\n}\n```", "```cs\n{\n   \"connectionstring\":\n   \"Endpoint=sb://flixone.servicebus.windows.net/;\n   SharedAccessKeyName=\n   RootManageSharedAccessKey;SharedAccessKey=\n   BvQQcB5FhNxidcgEhhpuGmi/\n   XEqvGho9GmHH4yjsTg4=\",\n   \"QueueName\": \"flixonequeue\"\n}\n```", "```cs\nvar builder = ConfigureBuilder();\n_connectionString = builder[\"connectionstring\"];\n_queuename = builder[\"queuename\"];\n```", "```cs\n static async Task ProcessMessagesAsync(Message message,\n CancellationToken token)\n {\n    WriteLine($\"Received message: #\n    {message.SystemProperties.SequenceNumber}\n    Body:{Encoding.UTF8.GetString(message.Body)}\");\n    await _client.CompleteAsync\n    (message.SystemProperties.LockToken);\n }\n```"]