- en: Test-Driving C# Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two most important features for the Speaker Meet application were determined
    to be the speaker listing and the ability to see an individual speaker's details.
    The speaker listing and speaker details will deliver the most value for our Minimum
    Viable Product.
  prefs: []
  type: TYPE_NORMAL
- en: Conference organizers, user group administrators, and the general public would
    likely care most about finding information on speakers. With that in mind, the
    speakers epic is where development for the Speaker Meet application begins.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Speaker Meet requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API, service, and repository tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The speaker detail and speaker listing APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reviewing the requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to get started, the foundation of the speaker section of the Speaker
    Meet application is laid by defining the initial set of requirements. These will
    help eliminate ambiguity and develop a common understanding of the requirements,
    as well as defining a common vocabulary used throughout the project.
  prefs: []
  type: TYPE_NORMAL
- en: The abstract is where a projects, purpose and value can be presented. Any project,
    before it can be approved to be worked on, must prove the value that it can provide
    to the company. This is true whether you are working for a Fortune 500 company
    or a startup with two people.
  prefs: []
  type: TYPE_NORMAL
- en: A data dictionary is important because it provides a common, ubiquitous language
    for the project. The term, ubiquitous language, is from Domain Driven Design and
    denotes *a shared or common language*. The idea is that the shared jargon of the
    business and development team is solidified in a codex that can be viewed and
    used by all.
  prefs: []
  type: TYPE_NORMAL
- en: Last, and certainly not least, the requirements must be presented in an agreed
    upon format. The specific format is less important than the format agreement.
    Regardless of the format, good requirements provide a context of interaction,
    the interaction taking place, and the expected results given the context and specific
    action.
  prefs: []
  type: TYPE_NORMAL
- en: Speaker listing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The speakers section of the Speaker Meet website contains a listing of all speakers
    in the system. The listing of speakers will present value to multiple groups including
    conference and user group organizers as well as conference and user group attendees.
    From a user interaction perspective, the speaker listing allows entry to the speaker
    details. The speaker details are where the real value is delivered in the form
    of availability, upcoming engagements, and contact information for a given speaker.
  prefs: []
  type: TYPE_NORMAL
- en: Initially, the speaker listing will aid organizers by providing quick access
    to speaker discovery. Organizers will be able to find speakers they know of and
    discover speakers of whom they are unaware. Once found or discovered, the organizer
    will be able to view details for specific speakers and, eventually, organizers
    will be able to contact the speakers using the available contact information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Attendees will benefit from the speaker list in a similar fashion to the organizers.
    Attendees have one important difference, however: they are looking for the events
    a speaker is already attached to as a presenter. This information, similar to
    the contact information, will be available in the speaker details.'
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The API is the main gateway into the core system of the Speaker Meet application.
    The speaker listing API should return a listing of speaker summary ViewModels.
    These ViewModels contain only the information necessary for this portion of the
    application. The ViewModels represent the speaker, but should not necessarily
    be direct copies of the speaker objects persisted to a database.
  prefs: []
  type: TYPE_NORMAL
- en: The `SpeakerSummary` ViewModel will be defined based on the requirements of
    the system. This ViewModel will grow to contain only the properties required for
    its limited use.
  prefs: []
  type: TYPE_NORMAL
- en: To get started, a new method will need to be added to an API. For the first
    new piece of functionality to be added, a new method `GetAll` will need to be
    created in the `SpeakerController`. But first, a test must be created.
  prefs: []
  type: TYPE_NORMAL
- en: API tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To revisit, code in the `SpeakerController` may not be written without a failing
    unit test. To begin, a new test file should be created named `GetAll`. This is
    where all the tests associated with the `GetAll` method of the `SpeakerController`
    will be contained.
  prefs: []
  type: TYPE_NORMAL
- en: There is duplication in how testing the `SpeakerController` is set up. Try to
    come up with ways that this duplication can be minimized.
  prefs: []
  type: TYPE_NORMAL
- en: The first such test should be the standard `ItExists` test. Building on the
    example from previous chapters, the `SpeakerController` accepts an `ISpeakerService` in
    the constructor. The same method of providing a `Moq` object can be applied here
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Comparing this first test with the first test written for the `Search` method
    in the `SpeakerController`, you may notice there's a bit of duplication happening
    already. Remember, duplication should be avoided. Don't forget the acronym, **DRY**
    (**Don't Repeat Yourself**).
  prefs: []
  type: TYPE_NORMAL
- en: In order to make this first test pass, a void `GetAll` method should be added
    to the `SpeakerController`. This will allow the application to compile, thereby
    passing this test. Remember, a failure to compile is a failing test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Next, ensure that the `GetAll` method of `SpeakerController` returns an `OkObjectResult`
    by creating a new test. Don't worry about the type of the result itself. That
    will be covered by the next test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In order to get this test to pass, the method should return an `IActionResult`
    instead of `void`. The method should also be changed to return `Ok()` in order
    to make the test pass. The method does not need to return anything else in order
    to make the test pass as written. Do not write more code than is required to make
    the test pass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, determine that the method returns a collection of `SpeakerSummary`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Create a `SpeakerSummary` class to fulfill the requirement defined by this test.
    Give some thought to where the new `SpeakerSummary` lives. This is a ViewModel
    that will need to be accessed by the tests, but should not be available to the
    other layers of the application. More about proper separation in a future chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Modify the `GetAll` method of the `SpeakerController` to return a set of `SpeakerSummary`
    objects as the return value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Moq
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In previous chapters, Moq was used to provide a stand-in set of functionalities
    for the item under test. The results provided for the mocked instance were required,
    but the implementation was not vital to what was being tested.
  prefs: []
  type: TYPE_NORMAL
- en: Like the examples in previous chapters, the logic for `GetAll` should not be
    found in the controller itself. Instead, the logic will be contained within the
    business layer, specifically the `SpeakerService` implementation of `ISpeakerService`.
    When the `GetAll` method in `SpeakerController` is called it is expected that
    the `GetAll` method of the `SpeakerService` will be called.
  prefs: []
  type: TYPE_NORMAL
- en: The `GetAll` method does not exist within the `SpeakerService`, so the following
    test should fail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Creating the previous test has forced the creation of a new method signature
    in the `ISpeakerService` interface. The following method signature should be added
    to the `ISpeakerService` interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To get the application to compile, `GetAll` will also need to be added to the
    `SpeakerService` class. For now, this should throw an exception.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To get the `ItCallsGetAllServiceOnce` test to pass, make sure that the `GetAll`
    method of the `SpeakerService` is called. The return value from the call is not
    yet needed for the test to pass, so simply calling the method is all that is required.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Note that this will make the test pass, but it is not exactly the correct solution
    yet. A new test is required to force the code to do something with the return
    value of the service. Moving on, it's time to do something with the result of
    the `SpeakerService.GetAll` call.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Don't forget to refactor the tests as well as the code. For readability, the
    `Arrange` methods have been included in the previous examples. Likely, these would
    be extracted and defined as *fields* and assigned in the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Testing exception cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the event that a speaker is requested that does not exist, it would be best
    to return a friendly error message to the consumer of the API.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Create a new exception class named `SpeakerNotFoundException`. This will be
    the specific exception returned by the `Moq` call below. Like the `SpeakerSummary`
    class file before, give some thought to where the `SpeakerNotFoundException` class
    file should be saved.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '"Throwing" a new exception when a specific ID is supplied requires a little
    bit of setup in `Moq`. This is similar to what was already defined by the `x.Get(It.IsAny<int>)`
    definition.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Make sure this is added after the previous setup, as `Moq` will process the
    last value first. Avoid a false positive by understanding how `Moq` will evaluate
    what has been set up within its context.
  prefs: []
  type: TYPE_NORMAL
- en: Next, modify the `Get` method of the controller to catch the exception and return
    the proper response code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The initial requirements stated that a friendly error message be returned to
    the client. Create a test that ensures a friendly message is returned to the consumer
    in the event a speaker is not found with the supplied ID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In order to make this test pass, the `SpeakerNotFoundException` class must be
    modified in order to return a friendly error message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: And finally, modify the `Get` method in the controller to return the message.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The business logic for the `GetAll` method should be housed in the `SpeakerService`.
    As before, in order to write a line of code a test must first be written.
  prefs: []
  type: TYPE_NORMAL
- en: Service tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To build on the previous example, start with an `ItExists` test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Since this method was previously added to the `SpeakerService`, although with
    a `NotImplementedException`, it would be best to see this test fail for the proper
    reason. Delete the `GetAll` method from the `SpeakerService` so that the application
    will fail to compile. Now, add the method back to see that the application once
    again compiles, and therefore this test passes. This time, have the method return
    `null` instead of throwing a new `NotImplementedException`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Now, ensure that the `GetAll` method returns a collection of `SpeakerSummary`
    by creating a new test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Modify the `GetAll` method of the `SpeakerService` in order to make this test
    pass. The minimum amount of code required to make this test pass involves returning
    a `new List` of `SpeakerSummary` objects. Do not add more code than is required
    to make this test pass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Building on the examples from a previous chapter, use the hardcoded data from
    before. Extract `hardCodedSpeakers` into a field in order to use the data in both
    the `Search` method as well as the `GetAll` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Note that the field was made public. This will allow tests to use this data
    for comparison for *Asserts*. Don’t worry, this field and the hardcoded data contained
    therein will be short-lived. Once these are no longer needed they can be safely
    deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Now, create a test to ensure that all of the data contained in `HardCodedSpeakers`
    is returned by the `GetAll` method in the `SpeakerService`. Start by verifying
    that the same number of speakers in the hardcoded data is returned by the method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: To get this to pass, simply iterate over the hardcoded values and return a new
    `SpeakerSummary` for each entry. As the test is not yet checking the values of
    the speakers returned, all that is required is that the proper count of `SpeakerSummary`
    objects is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, ensure that the speakers are properly converted to `SpeakerSummary` objects.
    First, check that the `Name` properties are the same.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: And now, make this test pass by assigning the `Name` within the `GetAll` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Continue to build up the `SpeakerSummary` object with the required properties.
    The `Name` property has been added. Now, add an ID and ensure that it is being
    assigned and returned properly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In order to make this pass, an ID will need to be mapped in the `GetAll` method
    of the `SpeakerService`, and an ID property added to the` Speaker` and `SpeakerSummary`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Next, add a `Location` to be returned by the `GetAll` method. This, too, will
    require the `Speaker` and `SpeakerSummary` objects to be modified. Give the new
    Location property in the `HardCodedSpeakers` collection distinct values to ensure
    that the values are being returned properly.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Add some locations to the hardcoded data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Finally, map the location to the `SpeakerSummary` ViewModel.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: As has been discussed before, tests should have a single action. That does not
    preclude them from having multiple asserts. In order to minimize duplication,
    the property tests should be collapsed.
  prefs: []
  type: TYPE_NORMAL
- en: Clean tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A test suite should be well maintained. This is the first consumer of the application
    and provides the most comprehensive documentation of the functionality of the
    system. To clean up the tests that were just created, it is time to do some refactoring.
  prefs: []
  type: TYPE_NORMAL
- en: Collapse the `SpeakerSummary` properties into single act, with multiple asserts.
    This will help to make the test suite smaller, easier to read and maintain, and
    quite possibly it will execute execute more quickly. A test suite that executes
    quickly is far more likely to be run often by the developers.
  prefs: []
  type: TYPE_NORMAL
- en: Rename `ItReturnsAllSpeakersWithName` to `ItReturnsAllSpeakersWithProperties`
    and collapse the `ID` and `Location` tests into this one.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In a previous chapter, the data was hard-coded within the `SpeakerController`
    class. The data has since moved to a hardcoded collection in the `SpeakerService`.
    Ultimately the data will be persisted in a database. For now, moving the data
    out of the `SpeakerService` will be enough.
  prefs: []
  type: TYPE_NORMAL
- en: A repository layer will be used to separate the data access layer from the rest
    of the application. To achieve this, a repository must be introduced. In order
    for a repository to be created, a need must be established. Start slowly by requiring
    the `SpeakerService` to accept an `IRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: This, of course, will cause the application to fail to compile. Create an `IRepository`
    interface, a `FakeRepository` class, and modify the `SpeakerService` to accept
    an `IRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The IRepository interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `IRepository` interface will be where the method signatures for interacting
    with the data access layer will be defined. This interface will be grown slowly,
    guided by tests. In [Chapter 8](part0277.html#885BQ0-d186949d2da74f5c95dd1712efae1195),
    *Abstract Away Problems*, more details will be provided and additional concepts
    will be introduced. For now, the interface will merely be a contract for the `FakeRepository`
    used for the `SpeakerService` tests.
  prefs: []
  type: TYPE_NORMAL
- en: FakeRepository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the `FakeRepository` has been created, the `HardCodedSpeakers` can
    be moved into the `FakeRepository`. First, several iterative tests need to be
    created.
  prefs: []
  type: TYPE_NORMAL
- en: Interacting with a `FakeRepository` of your own creation allows you to substitute
    values and create additional functionality for testing purposes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: By introducing a public field, the same functionality seen with `Moq` can be
    applied here in the `FakeRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Now ensure that the `FakeRepository` returns the `HardCodedSpeakers` when `GetAll`
    is called by modifying the existing tests for `ItReturnsAllSpeakers` and `ItReturnsAllSpeakersWithProperties`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: It may seem like a lot of effort has been expended to just kick the can down
    the road. This has all been necessary effort to successfully work towards a truly
    functional and maintainable application. However, there's still more work to be
    done.
  prefs: []
  type: TYPE_NORMAL
- en: Using factories with the FakeRepository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far this has been a relatively straight-forward exercise. The `Speaker` class
    represents the shape of the object that will be persisted to the database. The
    `HardCodedSpeakers` collection represents the entire set of *speakers* from a
    database.
  prefs: []
  type: TYPE_NORMAL
- en: It's not entirely ideal to have or maintain a set of hardcoded data, whether
    it's in a test file or not. It would be far more flexible to provide a way for
    the test writer to define the data with which to test.
  prefs: []
  type: TYPE_NORMAL
- en: Using a factory to create speakers and add them to the `FakeRepository` provides
    a much cleaner and easier-to-maintain way of managing the state of the tests that
    require specific data scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Note that default values defined for id, name, and location have been provided.
    This allows the user to supply specific values if they want, or proceed without
    the need for supplying them.
  prefs: []
  type: TYPE_NORMAL
- en: The `FakeRepository` must also be modified to remove the `HardCodedSpeakers`
    and expose a public collection of speakers.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Now, for each test a specific set of data can be provided with which to test.
    All that is required is that the factory be called to create one or more speakers
    to add to the `FakeRepository`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: If you have been following along with the same solution from previous chapters,
    you may need to modify the Search tests as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Soft delete
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It was decided that it would be useful to be able to "soft delete" a speaker
    from the system. A "soft delete" allows for the record to be marked as deleted
    without physically deleting the record.  This will help maintain referential integrity
    while achieving the desired result.
  prefs: []
  type: TYPE_NORMAL
- en: First, add an extension method to the SpeakerFactory called `IsDeleted` that
    will set the speaker to be deleted.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Now, create a test to ensure that this speaker is not returned when `GetAll`
    is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Finally, modify the code to guarantee the "deleted" speaker is not returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: Speaker details
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next up we come to the speaker details. We've chosen to continue in the back-end
    application as we'll tie the entire program together in up coming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: As stated earlier, this is where the real value is delivered for the first set
    of requirements. User groups and conference organizers will be able to contact
    a speaker using the information provided in the details view.
  prefs: []
  type: TYPE_NORMAL
- en: API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To return the details of an individual speaker, a new endpoint is needed. A
    new method `Get` is required which will take an integer ID and return a `SpeakerDetail`
    ViewModel.
  prefs: []
  type: TYPE_NORMAL
- en: API tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started, add a new test class named `Get`. Now, add a test to check that
    the `Get` method exists.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Make this test pass by adding a `Get` method to the `SpeakerController`. Note
    that, in the following example, the `Arrange` test setup has been moved to the
    constructor of the test class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Next, ensure that the `Get` method accepts an integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In order to make this test pass, an integer parameter will need to be added
    to the `Get` method. At this time, it is safe to delete the `ItExists` method.
    This test would need to be modified to accommodate the change, and its existence
    would be verified with the new test.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Now that the tests confirm that the `Get` method accepts an integer, now confirm
    that it returns an `Ok` result.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Now, ensure that the result is a `SpeakerDetail`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In order to get this test to pass, a `SpeakerDetail` object is required. Create
    an empty object with no properties, as none are yet required by the tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Just like with the `GetAll` method, the logic for this action should reside
    in the *Service.* Create a test to check that the `Get` method in the `SpeakerService`
    is called using `Moq`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: To get the application to compile a `Get` method, a signature will need to be
    added to the `IService` interface.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The `SpeakerService` will need to be modified in order to get the application
    to compile.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: To make this test pass, simply call the `Get` method of the `SpeakerService`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The method signature of the `Get` method in the `ISpeakerService` will need
    to be modified to return a `SpeakerDetail` instead of `void`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Now ensure that the ID passed into the `Get` method in the `SpeakerController`
    is what is provided to the `Get` method in the `SpeakerService`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: This will require modifications to the `ISpeakerService` interface as well as
    the `SpeakerService` class.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Now return the result of the `Get` method of the `SpeakerService`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: In order to make this test pass, simply return the result of the `Get` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is what the final results of the `SpeakerController` currently look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that the controller is calling the `Get` method of the `Moq` service, it's
    time to implement this method in the `SpeakerService`.
  prefs: []
  type: TYPE_NORMAL
- en: Service tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Get` method was declared as a result of previous tests. Create a new `ItExists`
    test and delete the implementation to see it fail.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Make this test pass by implementing the `Get` method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Now ensure the `Get` method accepts an integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Modify the `Get` method to accept an integer.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: Test that the `Get` method returns a `SpeakerDetail` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: To make this test pass, simply return a new `SpeakerDetail` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: Verify that the `SpeakerDetail` returned contains an ID.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: Now make the test pass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Confirm that the `SpeakerDetail` contains a name.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: And make the test pass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Finally, ensure that `Location` is returned.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: And make the test pass by returning the location.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Clean the tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Don’t forget to clean and refactor the tests. Collapse the property tests.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: More from the repository
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, verify that the repository is called.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: Now ensure the test passes by implementing the necessary modification.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Additional factory work
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As before, it would be ideal if the values weren't hardcoded. Use the factory
    to create a speaker and have the repository return the designated speaker.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: To get this to pass requires a modification to `IRepository`, `FakeRepository`,
    and `Service`.
  prefs: []
  type: TYPE_NORMAL
- en: '`IRepository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`FakeRepository`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '`Service`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: All previous tests to `ItReturnsSpeakerFromRepository` can now be deleted. These
    were all yak shaving in order to get to this point.
  prefs: []
  type: TYPE_NORMAL
- en: Now, to ensure that this will work with numerous values, convert the last test
    to a set of theories.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: All the tests should pass. If for some reason a failing test is encountered,
    do not proceed until the failing test is resolved.
  prefs: []
  type: TYPE_NORMAL
- en: Testing exception cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing exception cases is a very important step. In this case, the business
    has defined a case where we will return a SPEAKER NOT FOUND error if the speaker
    does not exist. It is also important for the developer to consider any significant
    edge cases the business has missed. Discuss them with the business if you can
    and get them added to the spec.
  prefs: []
  type: TYPE_NORMAL
- en: Now test that the speaker must exist.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: And make it pass.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Now, verify that the speaker is not deleted. If it is deleted, throw the same
    `SpeakerNotFoundException`*.*
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: The simplest, most effective way to make this test pass is to throw an exception
    if the speaker found has been deleted. Make the necessary change to the `Get`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you should feel fairly comfortable with the requirements surrounding the Speaker
    Meet application and have had a decent introduction to the API, Service, and Repository
    layers for the Speaker section of the back-end application. Mocks and Fakes continue
    to play a role in the Test-Driving of the program.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 8](part0277.html#885BQ0-d186949d2da74f5c95dd1712efae1195), *Abstract
    Away Problems*, more will be discussed with respect to abstractions. The models
    for `SpeakerSummary` and `SpeakerDetail` will be grown to include more properties.
    Additional details will be provided on how best to increase the functionality,
    and with it the complexity, of the application.
  prefs: []
  type: TYPE_NORMAL
