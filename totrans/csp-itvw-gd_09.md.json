["```cs\npublic sealed class Singleton\n{\n    private static readonly Singleton instance = new Singleton();\n    private Singleton() {}\n    public static Singleton Instance\n    {\n        get { return instance; }\n    }\n}\n```", "```cs\nvar result = from s in students\n             where s.Age > 20\n             orderby s.Name\n             select s;\n```", "```cs\n[Obsolete(\"This method is deprecated, use NewMethod instead.\")]\npublic void OldMethod()\n{\n    // ...\n}\nhow attributes can be used to annotate code with metadata, thereby providing guidelines or restrictions that assist in code management and documentation.\n```", "```cs\npublic class Subject\n{\n    public event EventHandler<string> Notify;\n    public void TriggerEvent(string message)\n    {\n        Notify?.Invoke(this, message);\n    }\n}\npublic class Observer\n{\n    public void OnNotify(object sender, string message)\n    {\n        Console.WriteLine(\"Observer received: \" + message);\n    }\n}\n// Usage:\n var subject = new Subject();\n var observer = new Observer();\n subject.Notify += observer.OnNotify;\n subject.TriggerEvent(\"Event occurred\");\n can be utilized in C# to establish a notification system where observers can dynamically subscribe to or unsubscribe from particular events, promoting a flexible and modular system design.\n```"]