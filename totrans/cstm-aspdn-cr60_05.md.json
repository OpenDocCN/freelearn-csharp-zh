["```cs\ndotnet new web -n HostBuilderConfig -o HostBuilderConfig\n```", "```cs\ncd HostBuilderConfig\ncode .\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n    public static IHostBuilder CreateHostBuilder(\n        string[] args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder\n                    .UseKestrel(options =>\n                    {\n                        options.Listen(\n                            IPAddress.Loopback, \n                            5000);\n                        options.Listen(\n                            IPAddress.Loopback, \n                            5001, \n                            listenOptions  =>\n                            {\n                                listenOptions.UseHttps(\n                                    \"certificate.pfx\", \n                                    \"topsecret\");\n                            });\n                    })\n                    .UseStartup<Startup>();\n            });\n    }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.MapGet(\"/\", () => \"Hello World!\");\napp.Run();\n```", "```cs\nusing System.Net;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.WebHost.UseKestrel(options =>\n{\n    options.Listen(IPAddress.Loopback, 5000);\n    options.Listen(IPAddress.Loopback, 5001,\n        listenOptions =>\n        {\n            listenOptions.UseHttps(\n                \"certificate.pfx\",\n                \"topsecret\");\n        });\n});\n```", "```cs\n.UseKestrel((host, options) =>\n{\n    // ...\n})\n```", "```cs\nbuilder.WebHost.UseKestrel((host, options) =>\n{\n    var filename = host.Configuration.GetValue(\n        \"AppSettings:certfilename\", \"\");\n    var password = host.Configuration.GetValue(\n        \"AppSettings:certpassword\", \"\");\n    options.Listen(IPAddress.Loopback, 5000);\n    options.Listen(IPAddress.Loopback, 5001, \n        listenOptions =>\n        {\n            listenOptions.UseHttps(filename, password);\n        });\n});\n```", "```cs\n{\n    \"AppSettings\": {\n        \"certfilename\": \"certificate.pfx\",\n        \"certpassword\": \"topsecret\"\n    },\n    \"Logging\": {\n        \"LogLevel\": {\n            \"Default\": \"Warning\"\n        }\n    },\n    \"AllowedHosts\": \"*\"\n}\n```", "```cs\ndotnet user-secrets init\ndotnet user-secrets set \"AppSettings:certfilename\" \n  \"certificate.pfx\"\ndotnet user-secrets set \"AppSettings:certpassword\" \n  \"topsecret\"\n```", "```cs\nSET APPSETTINGS_CERTFILENAME=certificate.pfx\nSET APPSETTINGS_CERTPASSWORD=topsecret\n```", "```cs\nvar builder = new ConfigurationBuilder()\n    .SetBasePath(env.ContentRootPath)\n    .AddJsonFile(\"appsettings.json\")\n    .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\",\n      optional:  true);\nif (env.IsDevelopment())\n{\n    builder.AddUserSecrets();\n}\nbuilder.AddEnvironmentVariables();\nConfiguration = builder.Build();\n```", "```cs\nbuilder.ConfigureAppConfiguration((hostingContext, config) \n  =>\n{\n    var env = hostingContext.HostingEnvironment;\n    config\n        .AddJsonFile(\n            \"appsettings.json\", \n            optional: true, \n            reloadOnChange: true)\n        .AddJsonFile(\n            $\"appsettings.{env.EnvironmentName}.json\", \n            optional:  true,\n            reloadOnChange: true);\n    if (env.IsDevelopment())\n    {\n        var appAssembly = Assembly.Load(\n            new AssemblyName(env.ApplicationName));\n        if (appAssembly != null)\n        {\n            config.AddUserSecrets(appAssembly, \n                optional: true);\n        }\n    }\n    config.AddEnvironmentVariables();\n    if (args != null)\n    {\n        config.AddCommandLine(args);\n    }\n});\n```", "```cs\nbuilder.UseKestrel((builderContext, options) =>\n  {\n    options.Configure(\n        builderContext.Configuration.GetSection(\"Kestrel\"));\n})\n```", "```cs\n\"Kestrel\": {\n    \"EndPoints\": {\n        \"Http\": {\n            \"Url\": \"http://localhost:5555\"\n        }\n    }\n}\n```", "```cs\nSET KESTREL_ENDPOINTS_HTTP_URL=http://localhost:5555\n```"]