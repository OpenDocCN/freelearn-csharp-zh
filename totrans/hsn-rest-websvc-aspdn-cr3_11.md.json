["```cs\nmkdir Catalog.API\ncd Catalog.API\ndotnet new sln -n Catalog.API\nmkdir src\ncd src\ndotnet new webapi -n Catalog.API\ndotnet sln ../Catalog.API.sln add Catalog.API\n```", "```cs\n.\n├── Catalog.API.sln\n├── src\n│   ├── Catalog.API\n│   │   ├── Controllers\n│   │   ├── Program.cs\n│   │   ├── Properties\n│   │   │   └── launchSettings.json\n│   │   ├── Startup.cs\n│   │   ├── Catalog.API.csproj\n│   │   ├── appsettings.Development.json\n│   │   ├── appsettings.json\n│   │   ├── bin\n│   │   ├── obj\n│   │   └── wwwroot\n```", "```cs\ndotnet new classlib -n Catalog.Domain -f netstandard2.1\n```", "```cs\ndotnet sln ../Catalog.API.sln add Catalog.Domain\n```", "```cs\nusing System;\n\nnamespace Catalog.Domain.Entities\n{\n    public class Item\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string LabelName { get; set; }\n        public Price Price { get; set; }\n        public string PictureUri { get; set; }\n        public DateTimeOffset ReleaseDate { get; set; }\n        public string Format { get; set; }\n        public int AvailableStock { get; set; }\n        public Genre Genre { get; set; }\n        public Artist Artist { get; set; }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Catalog.Domain.Entities\n{\n    //Artist.cs file\n    public class Artist\n    {\n        public Guid ArtistId { get; set; }\n        public string ArtistName { get; set; }\n    }\n    //Genre.cs file\n    public class Genre\n    {\n        public Guid GenreId { get; set; }\n        public string GenreDescription { get; set; }\n    }\n    //Price.cs file\n    public class Price\n    {\n        public decimal Amount { get; set; }\n        public string Currency { get; set; }\n    }\n}\n```", "```cs\nusing (var context = new CatalogContext()) {\n     var items = context.Items         \n                        .Where(b => b.Description.Contains(\"various \n                         artists\"))\n                        .ToList();\n}\n```", "```cs\nconnection.Query<Item>(\"select * from (select Id from dbo.Catalog where Description like '%@searchTerm%', new { searchTerm = \"various artists\" });\n```", "```cs\n List<Item> items = db.Items.ToList();\n List<Item> variousArtistItems = items\n                     .Where(s => s.Description.Contains(\"various \n                          artist\") == city).ToList();\n\n```", "```cs\nSELECT [i].[Id],\n       [i].[Description],\n       [i].[ArtistId], \n       [i].[GenreId],\nFROM   [dbo].[Items] as [i]\n```", "```cs\n List<Item> variousArtistItems = db.Items\n                     .Where(s => s.Description.Contains(\"various \n                          artist\") == city).ToList();\n\n```", "```cs\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Catalog.Domain.Repositories\n{\n    public interface IUnitOfWork : IDisposable\n    {\n        Task<int> SaveChangesAsync(CancellationToken cancellationToken = \n         default(CancellationToken));\n        Task<bool> SaveEntitiesAsync(CancellationToken cancellationToken = \n         default(CancellationToken));\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Repositories\n{\n    public interface IRepository\n    {\n        IUnitOfWork UnitOfWork { get; }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Domain.Repositories\n{\n    public interface IItemRepository : IRepository\n    {\n        Task<IEnumerable<Item>> GetAsync();\n        Task<Item> GetAsync(Guid id);\n        Item Add(Item item);\n        Item Update(Item item);\n    }\n}\n```", "```cs\ndotnet new classlib -n Catalog.Infrastructure -f netstandard2.1 dotnet sln ../Catalog.API.sln add Catalog.Infrastructure\n```", "```cs\n.\n├── Catalog.API.sln\n└── src\n    ├── Catalog.API\n    │ ...\n    ├── Catalog.Domain\n    │ ├── Entities\n    │ │ ├── Artist.cs\n    │ │ ├── Genre.cs\n    │ │ ├── Item.cs\n    │ │ └── Money.cs\n    │ │ └── Repositories\n    │ │ ├── IItemRepository.cs\n    │ │ ├── IRepository.cs\n    │ │ └── IUnitOfWork.cs\n    │ ├── Catalog.Domain.csproj\n    └── Catalog.Infrastructure\n        ├── Catalog.Infrastructure.csproj\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore\n\n```", "```cs\n dotnet add reference ../Catalog.Domain\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Catalog.Infrastructure\n{\n    public class CatalogContext : DbContext, IUnitOfWork\n    {\n        public const string DEFAULT_SCHEMA = \"catalog\";\n\n        public DbSet<Item> Items { get; set; }\n\n        public CatalogContext(DbContextOptions<CatalogContext> options) : \n         base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n        }\n\n        public async Task<bool> SaveEntitiesAsync(CancellationToken \n         cancellationToken = default(CancellationToken))\n        {\n            await SaveChangesAsync(cancellationToken);\n            return true;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Catalog.Infrastructure.Repositories\n{\n    public class ItemRepository\n        : IItemRepository\n    {\n        private readonly CatalogContext _context;\n\n        public IUnitOfWork UnitOfWork => _context;\n\n        public ItemRepository(CatalogContext context)\n        {\n            _context = context ?? throw new \n             ArgumentNullException(nameof(context));\n        }\n\n        public async Task<IEnumerable<Item>> GetAsync()\n        {\n            return await _context\n                .Items\n                .AsNoTracking()\n                .ToListAsync();\n        }\n\n        public async Task<Item> GetAsync(Guid id)\n        {\n            var item = await _context.Items\n                .AsNoTracking()\n                .Where(x => x.Id == id)\n                .Include(x => x.Genre)\n                .Include(x => x.Artist).FirstOrDefaultAsync();\n\n            return item;\n        }\n\n        public Item Add(Item order)\n        {\n            return _context.Items\n                .Add(order).Entity;\n        }\n\n        public Item Update(Item item)\n        {\n            _context.Entry(item).State = EntityState.Modified;\n            return item;\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Catalog.Domain.Entities\n{\n //Item.cs file\n   public class Item\n    {\n        public Guid Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public string LabelName { get; set; }\n        public Price Price { get; set; }\n        public string PictureUri { get; set; }\n        public DateTimeOffset ReleaseDate { get; set; }\n        public string Format { get;set; }\n        public int AvailableStock { get; set; }\n        public Guid GenreId { get; set; }\n        public Genre Genre { get; set; }\n        public Guid ArtistId { get; set; }\n        public Artist Artist { get; set; }\n    }\n\n    //Artist.cs file\n    public class Artist\n    {\n        public Guid ArtistId { get; set; }\n        public string ArtistName { get; set; }\n        public ICollection<Item> Items {get; set;}\n    }\n\n //Genre.cs file\n    public class Genre\n    {\n        public Guid GenreId { get; set; }\n        public string GenreDescription { get; set; }\n        public ICollection<Item> Items {get; set;}\n    }\n}\n```", "```cs\nusing System;\nusing Catalog.Domain.Entities;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nnamespace Catalog.Infrastructure.SchemaDefinitions\n{\n    public class ItemEntitySchemaDefinition :\n        IEntityTypeConfiguration<Item>\n    {\n        public void Configure(EntityTypeBuilder<Item> builder)\n        {\n            builder.ToTable(\"Items\", CatalogContext.DEFAULT_SCHEMA);\n            builder.HasKey(k => k.Id);\n\n            builder.Property(p => p.Name)\n                .IsRequired();\n\n            builder.Property(p => p.Description)\n                .IsRequired()\n                .HasMaxLength(1000);\n\n            builder\n                .HasOne(e => e.Genre)\n                .WithMany(c => c.Items)\n                .HasForeignKey(k => k.GenreId);\n\n            builder\n                .HasOne(e => e.Artist)\n                .WithMany(c => c.Items)\n                .HasForeignKey(k => k.ArtistId);\n\n            builder.Property(p => p.Price).HasConversion(\n                p => $\"{p.Amount}:{p.Currency}\",\n                p => new Price\n                {\n                    Amount = Convert.ToDecimal(\n                     p.Split(':', StringSplitOptions.None)[0]),\n                     Currency = p.Split(':', StringSplitOptions.None)[1]\n                });\n        }\n    }\n}\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.SqlServer\n```", "```cs\n      ...            \n            builder\n                .HasOne(e => e.Genre)\n                .WithMany(c => c.Items)\n                .HasForeignKey(k => k.GenreId);\n\n            builder\n                .HasOne(e => e.Artist)\n                .WithMany(c => c.Items)\n                .HasForeignKey(k => k.ArtistId);\n      ...\n```", "```cs\n            builder.Property(p => p.Price).HasConversion(\n                p => $\"{p.Amount}:{p.Currency}\",\n                p => new Price\n                {\n                    Amount = Convert.ToDecimal(p.Split(':', \n                     StringSplitOptions.None)[0]),\n                    Currency = p.Split(':', StringSplitOptions.None)[1]\n                });\n```", "```cs\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\nusing Catalog.Infrastructure.SchemaDefinitions;\n\nnamespace Catalog.Infrastructure\n{\n    public class CatalogContext : DbContext, IUnitOfWork\n    {\n        public const string DEFAULT_SCHEMA = \"catalog\";\n        public DbSet<Item> Items { get; set; }\n\n        public CatalogContext(DbContextOptions<CatalogContext> options) \n            : base (options) { }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n {\n modelBuilder.ApplyConfiguration(new ItemEntitySchemaDefinition());\n base.OnModelCreating(modelBuilder);\n }\n\n        public async Task<bool> SaveEntitiesAsync(CancellationToken \n            cancellationToken = default(CancellationToken))\n        {\n            await SaveChangesAsync(cancellationToken);\n            return true;\n        }        \n    }\n}\n```", "```cs\nusing System.Collections.Generic;\n\nnamespace Catalog.Domain.Entities\n{\n    //Artist.cs\n    public class Artist\n    {\n        public Guid ArtistId { get; set; }\n        public string ArtistName { get; set; }\n        public ICollection<Item> Items { get; set; }\n    }\n\n    //Genre.cs\n    public class Genre\n    {\n        public Guid GenreId { get; set; }\n        public string GenreDescription { get; set; }\n        public ICollection<Item> Items { get; set; }\n    }\n}\n```", "```cs\n //SchemaDefinitions/ArtistEntitySchemaConfiguration.cs using Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Infrastructure.SchemaDefinitions\n{\n    public class ArtistEntitySchemaConfiguration : \n        IEntityTypeConfiguration<Artist>\n    {\n        public void Configure(EntityTypeBuilder<Artist> builder)\n        {\n            builder.ToTable(\"Artists\", CatalogContext.DEFAULT_SCHEMA);\n            builder.HasKey(k => k.ArtistId);\n\n            builder.Property(p => p.ArtistId);\n\n            builder.Property(p => p.ArtistName)\n                .IsRequired()\n                .HasMaxLength(200);\n        }\n    }\n}\n```", "```cs\n //SchemaDefinitions/GenreEntitySchemaConfiguration.cs using Catalog.Domain.Entities;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\n\nnamespace Catalog.Infrastructure.SchemaDefinitions\n{\n    public class GenreEntitySchemaConfiguration : \n        IEntityTypeConfiguration<Genre>\n    {\n        public void Configure(EntityTypeBuilder<Genre> builder)\n        {\n            builder.ToTable(\"Genres\", CatalogContext.DEFAULT_SCHEMA);\n            builder.HasKey(k => k.GenreId);\n\n            builder.Property(p => p.GenreId);\n\n            builder.Property(p => p.GenreDescription)\n                .IsRequired()\n                .HasMaxLength(1000);\n        }\n    }\n}\n```", "```cs\n\n    public class CatalogContext : DbContext, IUnitOfWork\n    {\n...\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n {\n            modelBuilder.ApplyConfiguration(new ItemEntitySchemaDefinition()); modelBuilder.ApplyConfiguration(new GenreEntitySchemaConfiguration());\n            modelBuilder.ApplyConfiguration(new ArtistEntitySchemaConfiguration());            base.OnModelCreating(modelBuilder);\n }\n...     \n    }\n```", "```cs\ndocker exec -it sql1 \"bash\" \n/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '<YOUR_PASSWORD>' \n1> CREATE LOGIN catalog_srv WITH PASSWORD = 'P@ssw0rd';\n2> CREATE DATABASE Store;\n3> GO\n1> USE Store;\n2> CREATE USER catalog_srv;\n3> GO\n1> EXEC sp_addrolemember N'db_owner', N'catalog_srv';\n2> GO\n```", "```cs\ndotnet add reference ../Catalog.Infrastructure\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.Design\n```", "```cs\nusing System;\nusing System.Reflection;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.EntityFrameworkCore;\nusing Catalog.Infrastructure; \nnamespace Catalog.API\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n          ...\n        }\n\n        ...\n        public void ConfigureServices(IServiceCollection services)\n        {\n             services\n                .AddEntityFrameworkSqlServer()\n                .AddDbContext<CatalogContext>(contextOptions =>\n                {\n                    contextOptions.UseSqlServer(\n \"Server=localhost,1433;Initial Catalog=Store;User Id=<SA_USER>;Password=<PASSWORD>\",\n                        serverOptions => {             \n                           serverOptions.MigrationsAssembly\n                           (typeof(Startup).Assembly.FullName); });\n                });\n             ...\n        }\n\n        public void Configure(IApplicationBuilder app, \n            IHostingEnvironment env)\n        {\n          ...\n        }\n    }\n}\n\n```", "```cs\nusing Catalog.Infrastructure;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Catalog.API.Extensions\n{\n        public static class DatabaseExtensions\n        {\n            public static IServiceCollection AddCatalogContext(this \n                IServiceCollection services)\n            {\n                return services\n                    .AddEntityFrameworkSqlServer()\n                    .AddDbContext<CatalogContext>(contextOptions =>\n                    {\n                        contextOptions.UseSqlServer(\n                            \"Server=localhost,1433;Initial Catalog=Store;User Id=<SA_USER>;Password=<PASSWORD>\",\n                            serverOptions => { \n                                serverOptions.MigrationsAssembly\n (typeof(Startup).Assembly.FullName); });\n                    });\n            }\n        }\n}\n```", "```cs\n   public class Startup\n    {\n       ...\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddCatalogContext();\n            ...\n        }\n    }\n```", "```cs\ndotnet ef migrations add InitMigration dotnet ef database update\n```", "```cs\nusing Microsoft.EntityFrameworkCore.Migrations;\n\nnamespace Catalog.API.Migrations\n{\n    public partial class InitMigration : Migration\n    {\n        protected override void Up(MigrationBuilder migrationBuilder)\n        {\n          ...\n        }\n\n        protected override void Down(MigrationBuilder migrationBuilder)\n        {\n          ...\n        }\n    }\n}\n```", "```cs\ndotnet ef migrations add <migration_name>\n```", "```cs\ndotnet ef database update \n```", "```cs\n{\n...\n  \"DataSource\": {\n    \"ConnectionString\": \"Server=localhost,1433;Initial Catalog=Store;User Id=catalog_srv;Password=P@ssw0rd\"\n  }\n}\n```", "```cs\n..\npublic void ConfigureServices(IServiceCollection services)\n{\n..    services.AddCatalogContext(Configuration.GetSection(\"DataSource:ConnectionString\").Value);\n  ...\n}\n..\n```", "```cs\npublic static IServiceCollection AddCatalogContext(this IServiceCollection services, string connectionString)\n```", "```cs\nmkdir tests\ncd tests\n\ndotnet new xunit -n Catalog.Infrastructure.Tests\ndotnet sln ../Catalog.API.sln add Catalog.Infrastructure.Tests\n```", "```cs\n<ItemGroup>\n  <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"..\" />\n  <PackageReference Include=\"xunit\" Version=\"..\" />\n  <PackageReference Include=\"xunit.runner.visualstudio\" Version=\"..\" />\n  <DotNetCliToolReference Include=\"dotnet-xunit\" Version=\"..\" />\n</ItemGroup\n```", "```cs\n// Data/artist.json\n[\n    {\n        \"ArtistId\": \"3eb00b42-a9f0-4012-841d-70ebf3ab7474\",\n        \"ArtistName\": \"Kendrick Lamar\",\n        \"Items\": null\n    },\n    {\n        \"ArtistId\": \"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\",\n        \"ArtistName\": \"Anderson Paak.\",\n        \"Items\": null\n    }\n]\n\n// Data/genre.json\n[\n    {\n        \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n        \"GenreDescription\": \"Hip-Hop\",\n        \"Items\": null\n    }\n]\n\n```", "```cs\n//item.json\n[\n    {\n        \"Id\": \"86bff4f7-05a7-46b6-ba73-d43e2c45840f\",\n        \"Name\": \"DAMN.\",\n        \"Description\": \"DAMN. by Kendrick Lamar\",\n        \"LabelName\": \"TDE, Top Dawg Entertainment\",\n        \"Price\": {\n            \"Amount\": 34.5,\n            \"Currency\": \"EUR\"\n        },\n        \"PictureUri\": \"https://mycdn.com/pictures/45345345\",\n        \"ReleaseDate\": \"2017-01-01T00:00:00+00:00\",\n        \"Format\": \"Vinyl 33g\",\n        \"AvailableStock\": 5,\n        \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n        \"Genre\": null,\n        \"ArtistId\": \"3eb00b42-a9f0-4012-841d-70ebf3ab7474\",\n        \"Artist\": null\n    },\n    {\n        \"Id\": \"b5b05534-9263-448c-a69e-0bbd8b3eb90e\",\n        \"Name\": \"GOOD KID, m.A.A.d CITY\",\n        \"Description\": \"GOOD KID, m.A.A.d CITY. by Kendrick Lamar\",\n        \"LabelName\": \"TDE, Top Dawg Entertainment\",\n        \"Price\": {\n            \"Amount\": 23.5,\n            \"Currency\": \"EUR\"\n        },\n        \"PictureUri\": \"https://mycdn.com/pictures/32423423\",\n        \"ReleaseDate\": \"2016-01-01T00:00:00+00:00\",\n        \"Format\": \"Vinyl 33g\",\n        \"AvailableStock\": 6,\n        \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n        \"Genre\": null,\n        \"ArtistId\": \"3eb00b42-a9f0-4012-841d-70ebf3ab7474\",\n        \"Artist\": null\n    },\n    {\n        \"Id\": \"be05537d-5e80-45c1-bd8c-aa21c0f1251e\",\n        \"Name\": \"Malibu\",\n        \"Description\": \"Malibu. by Anderson Paak\",\n        \"LabelName\": \"Steel Wool/OBE/Art Club\",\n        \"Price\": {\n            \"Amount\": 23.5,\n            \"Currency\": \"EUR\"\n        },\n        \"PictureUri\": \"https://mycdn.com/pictures/32423423\",\n        \"ReleaseDate\": \"2016-01-01T00:00:00+00:00\",\n        \"Format\": \"Vinyl 43\",\n        \"AvailableStock\": 3,\n        \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n        \"Genre\": null,\n        \"ArtistId\": \"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\",\n        \"Artist\": null\n    }\n]\n```", "```cs\ndotnet add package Newtonsoft.Json\n\n```", "```cs\n...\n<ItemGroup>\n  <None Update=\"Data\\artist.json\">\n    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n  </None>\n  <None Update=\"Data\\genre.json\">\n    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n  </None>\n  <None Update=\"Data\\item.json\">\n    <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>\n  </None>\n</ItemGroup>\n..\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore\n```", "```cs\ndotnet add ./tests/Catalog.Infrastructure.Tests reference ./src/Catalog.Infrastructure\n```", "```cs\nusing System.IO;\nusing Microsoft.EntityFrameworkCore;\nusing Newtonsoft.Json;\n\nnamespace Catalog.Infrastructure.Tests.Extensions\n{\n    public static class ModelBuilderExtensions\n    {\n        public static ModelBuilder Seed<T>(this ModelBuilder \n            modelBuilder, string file) where T : class\n        {\n            using (var reader = new StreamReader(file))\n            {\n                var json = reader.ReadToEnd();\n                var data = JsonConvert.DeserializeObject<T[]>(json);\n                modelBuilder.Entity<T>().HasData(data);\n            }\n\n            return modelBuilder;\n        }\n    }\n}\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Catalog.Domain.Entities;\nusing Catalog.Infrastructure.Tests.Extensions;\n\nnamespace Catalog.Infrastructure.Tests\n{\n    public class TestCatalogContext : CatalogContext\n    {\n        public TestCatalogContext(DbContextOptions<CatalogContext> options) : base(options)\n        {\n        }\n\n        protected override void OnModelCreating(ModelBuilder \n            modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            modelBuilder.Seed<Artist>(\"./Data/artist.json\");\n modelBuilder.Seed<Genre>(\"./Data/genre.json\");\n modelBuilder.Seed<Item>(\"./Data/item.json\");\n        }\n    }\n}\n```", "```cs\nusing Xunit;\n\nnamespace Catalog.Infrastructure.Tests\n{\n    public class ItemRepositoryTests\n    {\n        [Fact]\n        public void should_get_data()\n        {\n            Assert.True(true);\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Shouldly;\nusing Catalog.Infrastructure.Repositories;\nusing Xunit;\n\nnamespace Catalog.Infrastructure.Tests\n{\n    public class ItemRepositoryTests\n    {\n        [Fact]\n        public async Task should_get_data()\n        {\n            var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(databaseName: \"should_get_data\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n            var result = await sut.GetAsync();\n\n            result.ShouldNotBeNull();\n        }\n    }\n}\n```", "```cs\n...\n    using (var context = new TestCatalogContext(options))\n    {\n        context.Database.EnsureCreated();\n        var sut = new ItemRepository(context);\n\n        var result = await sut.GetAsync();\n\n        result.ShouldNotBeNull();\n    }\n...\n```", "```cs\ndotnet add package Microsoft.EntityFrameworkCore.InMemory\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Shouldly;\nusing Catalog.Infrastructure.Repositories;\nusing Xunit;\n\nnamespace Catalog.Infrastructure.Tests\n{\n    public class ItemRepositoryTests\n    {\n        [Fact]\n        public async Task should_get_data()\n        {\n            var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(\"should_get_data\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n            var result = await sut.GetAsync();\n\n            result.ShouldNotBeNull();\n        }\n\n        [Fact]\n        public async Task should_returns_null_with_id_not_present()\n        {\n            var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(databaseName: \n                    \"should_returns_null_with_id_not_present\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n            var result = await sut.GetAsync(Guid.NewGuid());\n\n            result.ShouldBeNull();\n        }\n\n        [Theory]\n        [InlineData(\"b5b05534-9263-448c-a69e-0bbd8b3eb90e\")]\n        public async Task should_return_record_by_id(string guid)\n        {\n            var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(databaseName: \n                    \"should_return_record_by_id\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n            var result = await sut.GetAsync(new Guid(guid));\n\n            result.Id.ShouldBe(new Guid(guid));\n        }\n...\n```", "```cs\n...\n        [Fact]\n        public async Task should_add_new_item()\n        {\n            var testItem = new Item\n            {\n                Name = \"Test album\",\n                Description = \"Description\",\n                LabelName = \"Label name\",\n                Price = new Price { Amount = 13, Currency = \"EUR\" },\n                PictureUri = \"https://mycdn.com/pictures/32423423\",\n                ReleaseDate = DateTimeOffset.Now,\n                AvailableStock = 6,\n                GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\"),\n                ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\")\n            };\n\n            var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(\"should_add_new_items\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n\n            sut.Add(testItem);\n            await sut.UnitOfWork.SaveEntitiesAsync();\n\n            context.Items\n                .FirstOrDefault(_ => _.Id == testItem.Id)\n                .ShouldNotBeNull();\n        }\n\n        [Fact]\n        public async Task should_update_item()\n        {\n            var testItem = new Item\n            {\n                Id = new Guid(\"b5b05534-9263-448c-a69e-0bbd8b3eb90e\"),\n                Name = \"Test album\",\n                Description = \"Description updated\",\n                LabelName = \"Label name\",\n                Price = new Price { Amount = 50, Currency = \"EUR\" },\n                PictureUri = \"https://mycdn.com/pictures/32423423\",\n                ReleaseDate = DateTimeOffset.Now,\n                AvailableStock = 6,\n                GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\"),\n                ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\")\n            };\n\n            var options = new DbContextOptionsBuilder<CatalogContext>()\n                .UseInMemoryDatabase(\"should_update_item\")\n                .Options;\n\n            await using var context = new TestCatalogContext(options);\n            context.Database.EnsureCreated();\n\n            var sut = new ItemRepository(context);\n            sut.Update(testItem);\n\n            await sut.UnitOfWork.SaveEntitiesAsync();\n\n            context.Items\n                .FirstOrDefault(x => x.Id == testItem.Id)\n                ?.Description.ShouldBe(\"Description updated\");\n        }\n...\n}\n```", "```cs\n dotnet test \n```", "```cs\ndotnet new classlib -n Catalog.InfrastructureSP\n```", "```cs\ndotnet sln ../Catalog.API.sln add Catalog.InfrastructureSP\n```", "```cs\ncreate procedure [catalog].[GetAllItems] \nas\nbegin\n   select [Id]\n       [Name]\n      ,[Description]\n      ,[LabelName]\n      ,[Price]\n      ,[PictureUri]\n      ,[ReleaseDate]\n      ,[Format]\n      ,[AvailableStock]\n      ,[GenreId]\n      ,[ArtistId]\n  from [catalog].[Items]\nend\n```", "```cs\ncreate procedure [catalog].[GetItemById] \n   @Id uniqueidentifier\nas\nbegin\n   select [Id]\n       [Name]\n      ,[Description]\n      ,[LabelName]\n      ,[Price]\n      ,[PictureUri]\n      ,[ReleaseDate]\n      ,[Format]\n      ,[AvailableStock]\n      ,[GenreId]\n      ,[ArtistId]\n  from [catalog].[Items] \n  where Id = @Id\nend\n```", "```cs\ncreate procedure [catalog].[InsertItem] (\n @Id uniqueidentifier,\n @Name nvarchar(max),\n @Description nvarchar(1000),\n @LabelName nvarchar(max) NULL,\n @Price nvarchar(max) NULL,\n @PictureUri nvarchar(max) NULL,\n @ReleaseDate datetimeoffset(7),\n @Format nvarchar(max) ,\n @AvailableStock int,\n @GenreId uniqueidentifier,\n @ArtistId uniqueidentifier\n)\nas\nbegin\n  insert into  [catalog].[Items]  (Id, Name, Description,LabelName,Price,PictureUri, ReleaseDate,\n  Format,AvailableStock, GenreId,ArtistId)\n  output inserted.*\n  values   (@Id,\n            @Name,\n            @Description,\n            @LabelName,\n            @Price,\n            @PictureUri,\n            @ReleaseDate,\n            @Format,\n            @AvailableStock,\n            @GenreId,\n            @ArtistId)\nend\n\n```", "```cs\ncreate procedure [catalog].[UpdateItem] (\n @Id uniqueidentifier,\n @Name nvarchar(max),\n @Description nvarchar(1000),\n @LabelName nvarchar(max) NULL,\n @Price nvarchar(max),\n @PictureUri nvarchar(max) NULL,\n @ReleaseDate datetimeoffset(7) NULL,\n @Format nvarchar(max) ,\n @AvailableStock int,\n @GenreId uniqueidentifier,\n @ArtistId uniqueidentifier\n)\nas\nbegin\n  update [catalog].[Items]\n  set Name = @Name,\n      Description = @Description,\n      LabelName = @LabelName,\n      Price = @Price,\n      PictureUri = @PictureUri,\n      ReleaseDate = @ReleaseDate,\n      Format = @Format,\n      AvailableStock = @AvailableStock,\n      GenreId = @GenreId,\n      ArtistId = @ArtistId\n   output inserted.*\n   where Id = @Id\nend\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Infrastructure.Entities;\n\nnamespace Catalog.Domain.Infrastructure.Repositories\n{\n    public interface IItemsRepository  \n    {\n        Task<IEnumerable<Item>> GetAsync();\n        Task<Item> GetAsync(Guid id);\n        Item Add(Item order);\n        Item Update(Item item);\n        Item Delete(Item item);\n    }\n}\n```", "```cs\n dotnet add package Dapper\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Data;\nusing System.Data.SqlClient;\nusing System.Threading.Tasks;\nusing Dapper;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Infrastructure.Repositories;\n\nnamespace Catalog.InfrastructureSP\n{\n    public class ItemRepository : IItemRepository\n    {\n        private readonly SqlConnection _sqlConnection;\n\n        public ItemRepository(string connectionString)\n        {\n\n            _sqlConnection = new SqlConnection(connectionString);\n        }\n\n        public async Task<IEnumerable<Item>> GetAsync()\n        {\n            var result = await _sqlConnection.QueryAsync<Item>\n                (\"GetAllItems\",  commandType: \n                CommandType.StoredProcedure);\n            return result.AsList();\n        }\n\n        public async Task<Item> GetAsync(Guid id)\n        {\n            return await _sqlConnection.ExecuteScalarAsync<Item>\n                (\"GetAllItems\", new {Id = id.ToString()}, commandType: \n                CommandType.StoredProcedure);\n        }\n\n        public Item Add(Item order)\n        {\n            var result = _sqlConnection.ExecuteScalar<Item>\n            (\"InsertItem\", order, commandType:CommandType.StoredProcedure);\n            return result;\n        }\n\n        public Item Update(Item item)\n        {\n            var result = _sqlConnection.ExecuteScalar<Item>\n                (\"UpdateItem\", item, commandType: \n                CommandType.StoredProcedure);\n            return result;\n        }\n\n        public Item Delete(Item item)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n```"]