["```cs\npublic override AsyncUnaryCall<Res>\n  AsyncUnaryCall<Req, Res>(Req request,\n    ClientInterceptorContext<Req, Res> ctx,\n    AsyncUnaryCallContinuation<Req, Res> continuation)\n{\n  var activity = Source.StartActivity(ctx.Method.FullName,\nActivityKind.Client);\n  ctx = InjectTraceContext(activity, ctx);\n  if (activity?.IsAllDataRequested != true)\n    return continuation(request, ctx);\n  SetRpcAttributes(activity, ctx.Method);\n  var call = continuation(request, context);\n  return new AsyncUnaryCall<Res>(\n    HandleResponse(call.ResponseAsync, activity, call),\n    call.ResponseHeadersAsync,\n    call.GetStatus,\n    call.GetTrailers,\n    call.Dispose);\n}\n```", "```cs\nprivate async Task<Res> HandleResponse<Req, Res>(Task<Res>\n  original, Activity act, AsyncUnaryCall<Req> call)\n{\n  try\n  {\n    var response = await original;\n    SetStatus(act, call.GetStatus());\n    return response;\n  }\n  ...\n  finally\n  {\n    act.Dispose();\n  }\n}\n```", "```cs\nprivate ClientInterceptorContext<Req, Res>\n  InjectTraceContext<Req, Res>(Activity? act,\n    ClientInterceptorContext<Req, Res> ctx)\n  where Req: class where Res: class\n{\n  ...\n  _propagator.Inject(new PropagationContext(\n      act.Context, Baggage.Current),\n    ctx.Options.Headers,\n    static (headers, k, v) => headers.Add(k, v));\n  return ctx;\n}\n```", "```cs\nprivate void SetRpcAttributes<Req, Res>(Activity act,\n  Method<Req, Res> method)\n{\n  act.SetTag(\"rpc.system\", \"grpc\");\n  act.SetTag(\"rpc.service\", method.ServiceName);\n  act.SetTag(\"rpc.method\", method.Name);\n  act.SetTag(\"net.peer.name\", _host);\n  if (_port != 80 && _port != 443)\n    act.SetTag(\"net.peer.port\", _port);\n}\n```", "```cs\nprivate static void SetStatus(Activity act, Status status)\n{\n  act.SetTag(\"rpc.grpc.status_code\",\n    (int)status.StatusCode);\n  var activityStatus = status.StatusCode != StatusCode.OK ?\n    ActivityStatusCode.Error : ActivityStatusCode.Unset;\n  act.SetStatus(activityStatus, status.Detail);\n}\n```", "```cs\nbuilder.Services\n  .AddGrpcClient<Nofitier.NofitierClient>(o => {\n    o => o.Address = serverEndpoint; ... })\n  .AddInterceptor(() => new GrpcTracingInterceptor(\n    serverEndpoint, contextPropagator))\n  ...\n```", "```cs\nCompositeTextMapPropagator contextPropagator = new (\n  new TextMapPropagator[] {\n    new TraceContextPropagator(),\n    new BaggagePropagator() });\nSdk.SetDefaultTextMapPropagator(contextPropagator);\n```", "```cs\nbuilder.Services.AddOpenTelemetry()\n  .WithTracing(b => b.AddSource(\"Client.Grpc\")...);\n```", "```cs\nvar traceContext = _propagator.Extract(default,\n  ctx.RequestHeaders,\n  static (headers, k) => new[] { headers.GetValue(k) });\nBaggage.Current = traceContext.Baggage;\nusing var activity = Source.StartActivity(ctx.Method,\n  ActivityKind.Server, traceContext.ActivityContext);\nif (activity?.IsAllDataRequested != true)\n  return await continuation(request, ctx);\nSetRpcAttributes(activity, ctx.Host, ctx.Method);\ntry\n{\n  var response = await continuation(request, ctx);\n  SetStatus(activity, ctx.Status);\n  return response;\n}\ncatch (Exception ex) {...}\n```", "```cs\nbuilder.Services\n  .AddSingleton<TextMapPropagator>(contextPropagator)\n  .AddGrpc(o => {\n    o.Interceptors.Add<GrpcTracingInterceptor>(); ...});\nbuilder.Services.AddOpenTelemetry()\n    .WithTracing(b => b.AddSource(\"Server.Grpc\")...);\n```", "```cs\nmessage Message {\n  string text = 1;\n  map<string, string> attributes = 2;\n}\n```", "```cs\nIEnumerable<ActivityLink>? links = null;\nif (Activity.Current != null)\n{\n  links = new[] {\n    new ActivityLink(Activity.Current.Context) };\n  Activity.Current = null;\n}\nusing var act = Source.StartActivity(\"SendMessage\",\n  ActivityKind.Producer,\n  default(ActivityContext),\n  links: links);\n```", "```cs\n_propagator.Inject(\n  new PropagationContext(act.Context, Baggage.Current),\n  message,\n  static (m, k, v) => m.Attributes.Add(k, v));\ntry\n{\n  await requestStream.WriteAsync(message);\n}\ncatch (Exception ex)\n{\n  act?.SetStatus(ActivityStatusCode.Error, ex.Message);\n}\n```", "```cs\nvar context = _propagator.Extract(default,\n  message,\n  static (m, k) => m.Attributes.TryGetValue(k, out var v)\n      ? new [] { v } : Enumerable.Empty<string>());\nvar link = Activity.Current == null ?\n   default : new ActivityLink(Activity.Current.Context);\nusing var act = Source.StartActivity(\n  \"ProcessMessage\",\n  ActivityKind.Consumer,\n  context.ActivityContext,\n  links: new[] { link });\n...\n```"]