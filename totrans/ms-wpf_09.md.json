["```cs\nusing System.ComponentModel; \nusing System.Runtime.CompilerServices; \nusing CompanyName.ApplicationName.Extensions;\n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public abstract class BaseValidationModel : INotifyPropertyChanged, \n    IDataErrorInfo \n  { \n    protected string error = string.Empty; \n\n    #region IDataErrorInfo Members \n\n    public string Error => error; \n\n    public virtual string this[string propertyName] => error; \n\n    #endregion \n\n    #region INotifyPropertyChanged Members \n\n    ... \n\n    #endregion \n  } \n} \n```", "```cs\nusing System; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class Product : BaseValidationModel \n  { \n    private Guid id = Guid.Empty; \n    private string name = string.Empty; \n    private decimal price = 0; \n\n    public Guid Id \n    { \n      get { return id; } \n      set { if (id != value) { id = value; NotifyPropertyChanged(); } } \n    } \n\n    public string Name \n    { \n      get { return name; } \n      set { if (name != value) { name = value; NotifyPropertyChanged(); } }\n    } \n\n    public decimal Price \n    { \n      get { return price; } \n      set { if (price != value) { price = value;\n        NotifyPropertyChanged(); } } \n    } \n\n    public override string this[string propertyName] \n    { \n      get \n      { \n        error = string.Empty; \n        if (propertyName == nameof(Name)) \n        { \n          if (string.IsNullOrEmpty(Name))  \n            error = \"Please enter the product name.\"; \n          else if (Name.Length > 25) error = \"The product name cannot be\n            longer than twenty-five characters.\"; \n        } \n        else if (propertyName == nameof(Price) && Price == 0)\n          error = \"Please enter a valid price for the product.\"; \n        return error; \n      } \n    } \n  } \n} \n```", "```cs\nusing CompanyName.ApplicationName.DataModels; \n\nnamespace CompanyName.ApplicationName.ViewModels \n{ \n  public class ProductViewModel : BaseViewModel \n  { \n    private Product product = new Product(); \n\n    public Product Product \n    { \n      get { return product; } \n      set { if (product != value) { product = value;  \n        NotifyPropertyChanged(); } } \n    } \n  } \n} \n```", "```cs\n<Style x:Key=\"LabelStyle\" TargetType=\"{x:Type TextBlock}\">\n  <Setter Property=\"HorizontalAlignment\" Value=\"Right\" />\n  <Setter Property=\"VerticalAlignment\" Value=\"Center\" /> \n  <Setter Property=\"Margin\" Value=\"0,0,10,10\" />\n</Style> \n<Style x:Key=\"FieldStyle\" TargetType=\"{x:Type TextBox}\">\n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" />\n  <Setter Property=\"VerticalAlignment\" Value=\"Center\" /> \n  <Setter Property=\"Margin\" Value=\"0,0,0,10\" /> \n  <Setter Property=\"Padding\" Value=\"1.5,2\" /> \n</Style> \n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.ProductView\"  \n\n  Width=\"320\" FontSize=\"14\"> \n  <Grid Margin=\"20\">\n    <Grid.RowDefinitions> \n      <RowDefinition Height=\"Auto\" /> \n      <RowDefinition Height=\"Auto\" /> \n    </Grid.RowDefinitions> \n    <Grid.ColumnDefinitions> \n      <ColumnDefinition Width=\"Auto\" /> \n      <ColumnDefinition /> \n    </Grid.ColumnDefinitions> \n    <TextBlock Text=\"Name\" Style=\"{StaticResource LabelStyle}\" /> \n    <TextBox Grid.Column=\"1\" Text=\"{Binding Product.Name,  \n      UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}\"\n      Style=\"{StaticResource FieldStyle}\" /> \n    <TextBlock Grid.Row=\"1\" Text=\"Price\" \n      Style=\"{StaticResource LabelStyle}\" /> \n    <TextBox Grid.Row=\"1\" Grid.Column=\"1\" Text=\"{Binding Product.Price,\n      UpdateSourceTrigger=PropertyChanged, ValidatesOnDataErrors=True}\"\n      Style=\"{StaticResource FieldStyle}\" /> \n  </Grid> \n</UserControl> \n```", "```cs\n<Style.Triggers> \n  <Trigger Property=\"Validation.HasError\" Value=\"True\"> \n    <Setter Property=\"ToolTip\" Value=\"{Binding (Validation.Errors)[0]. \n      ErrorContent, RelativeSource={RelativeSource Self}}\" /> \n  </Trigger> \n</Style.Triggers> \n```", "```cs\nSystem.Windows.Data Error: 17 : Cannot get 'Item[]' value (type 'ValidationError') from '(Validation.Errors)' (type 'ReadOnlyObservableCollection`1'). BindingExpression:\nPath=(Validation.Errors)[0].ErrorContent; DataItem='TextBox' (Name='');\ntarget element is 'TextBox' (Name=''); target property is 'ToolTip' (type 'Object') ArgumentOutOfRangeException: 'System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\nParameter name: index'\n```", "```cs\n<Setter Property=\"ToolTip\" Value=\"{Binding (Validation.Errors). \n  CurrentItem.ErrorContent, RelativeSource={RelativeSource Self}}\" /> \n```", "```cs\nusing System.Collections.ObjectModel; \nusing System.Collections.Specialized; \nusing System.ComponentModel; \nusing System.Linq; \nusing System.Runtime.CompilerServices; \nusing System.Text; \nusing CompanyName.ApplicationName.Extensions; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public abstract class BaseValidationModelExtended : \n    INotifyPropertyChanged, IDataErrorInfo \n  { \n    protected ObservableCollection<string> errors =  \n      new ObservableCollection<string>(); \n    protected ObservableCollection<string> externalErrors =  \n      new ObservableCollection<string>(); \n\n    protected BaseValidationModelExtended() \n    { \n      ExternalErrors.CollectionChanged += ExternalErrors_CollectionChanged; \n    } \n\n    public virtual ObservableCollection<string> Errors => errors; \n\n    public ObservableCollection<string> ExternalErrors => externalErrors; \n\n    public virtual bool HasError => errors != null && errors.Any(); \n\n    #region IDataErrorInfo Members \n\n    public string Error \n    { \n      get \n      { \n        if (!HasError) return string.Empty; \n        StringBuilder errors = new StringBuilder(); \n        Errors.ForEach(e => errors.AppendUniqueOnNewLineIfNotEmpty(e)); \n        return errors.ToString(); \n      } \n    } \n\n    public virtual string this[string propertyName] => string.Empty; \n\n    #endregion \n\n    #region INotifyPropertyChanged Members \n\n    public virtual event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void NotifyPropertyChanged( \n      params string[] propertyNames) \n    { \n      if (PropertyChanged != null) \n      { \n        foreach (string propertyName in propertyNames) \n        { \n          if (propertyName != nameof(HasError)) PropertyChanged(this, \n            new PropertyChangedEventArgs(propertyName)); \n        } \n        PropertyChanged(this,  \n          new PropertyChangedEventArgs(nameof(HasError))); \n      } \n    } \n\n    protected virtual void NotifyPropertyChanged( \n      [CallerMemberName]string propertyName = \"\") \n    { \n      if (PropertyChanged != null) \n      { \n        if (propertyName != nameof(HasError)) PropertyChanged(this, \n          new PropertyChangedEventArgs(propertyName)); \n        PropertyChanged(this,\n          new PropertyChangedEventArgs(nameof(HasError))); \n      } \n    } \n\n    #endregion \n\n    private void ExternalErrors_CollectionChanged(object sender,  \n      NotifyCollectionChangedEventArgs e) =>  \n      NotifyPropertyChanged(nameof(Errors)); \n  } \n} \n```", "```cs\npublic static void AppendUniqueOnNewLineIfNotEmpty(\n  this StringBuilder stringBuilder, string text)\n{ \n  if (text.Trim().Length > 0 && !stringBuilder.ToString().Contains(text))\n    stringBuilder.AppendFormat(\"{0}{1}\", stringBuilder.ToString().Trim().\n    Length == 0 ? string.Empty : Environment.NewLine, text); \n}\n```", "```cs\npublic class ProductExtended : BaseValidationModelExtended\n{\n  ...\n\n  public override ObservableCollection<string> Errors\n  {\n    get\n    {\n      errors = new ObservableCollection<string>();\n      errors.AddUniqueIfNotEmpty(this[nameof(Name)]);\n      errors.AddUniqueIfNotEmpty(this[nameof(Price)]);\n      errors.AddRange(ExternalErrors);\n      return errors;\n    }\n  }\n\n  ...\n}\n```", "```cs\npublic static void AddUniqueIfNotEmpty(\n  this ObservableCollection<string> collection, string text) \n{ \n  if (!string.IsNullOrEmpty(text) && !collection.Contains(text))  \n    collection.Add(text); \n} \n```", "```cs\npublic static void AddRange<T>(this ICollection<T> collection,  \n  ICollection<T> range) \n{ \n  foreach (T item in range) collection.Add(item); \n} \n```", "```cs\npublic string Name \n{ \n  get { return name; } \n  set { if (name != value) { name = value;  \n    NotifyPropertyChanged(nameof(Name), nameof(Errors)); } } \n} \n\npublic decimal Price \n{ \n  get { return price; } \n  set { if (price != value) { price = value;  \n    NotifyPropertyChanged(nameof(Price), nameof(Errors)); } } \n}\n```", "```cs\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\nusing CompanyName.ApplicationName.DataModels;\nusing CompanyName.ApplicationName.DataModels.Collections;\n\nnamespace CompanyName.ApplicationName.ViewModels\n{\n  public class ProductViewModelExtended : BaseViewModel\n  {\n    private ProductsExtended products = new ProductsExtended();\n\n    public ProductViewModelExtended()\n    {\n      Products.Add(new ProductExtended() { Id = Guid.NewGuid(), \n        Name = \"Virtual Reality Headset\", Price = 14.99m });\n      Products.Add(new ProductExtended() { Id = Guid.NewGuid(), \n        Name = \"Virtual Reality Headset\" });\n      Products.CurrentItemChanged += Products_CurrentItemChanged;\n      Products.CurrentItem = Products.Last();\n      ValidateUniqueName(Products.CurrentItem);\n    }\n\n    public ProductsExtended Products\n    {\n      get { return products; }\n      set { if (products != value) { products = value; \n        NotifyPropertyChanged(); } }\n    }\n\n    private void Products_CurrentItemChanged(\n      ProductExtended oldProduct, ProductExtended newProduct)\n    {\n      if (newProduct != null) \n        newProduct.PropertyChanged += Product_PropertyChanged;\n      if (oldProduct != null) \n        oldProduct.PropertyChanged -= Product_PropertyChanged;\n    }\n\n    private void Product_PropertyChanged(object sender, \n      PropertyChangedEventArgs e)\n    {\n      if (e.PropertyName == nameof(Products.CurrentItem.Name)) \n        ValidateUniqueName(Products.CurrentItem);\n    }\n\n    private void ValidateUniqueName(ProductExtended product)\n    {\n      string errorMessage = \"The product name must be unique.\";\n      if (!IsProductNameUnique(product)) \n        product.ExternalErrors.Add(errorMessage);\n      else product.ExternalErrors.Remove(errorMessage);\n    }\n\n    private bool IsProductNameUnique(ProductExtended product) => \n      !Products.Any(p => p.Id != product.Id && \n      !string.IsNullOrEmpty(p.Name) && p.Name == product.Name);\n  }\n}\n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Collections \n{ \n  public class ProductsExtended : BaseCollection<ProductExtended> { } \n} \n```", "```cs\n<DataTemplate x:Key=\"WrapTemplate\">\n    <TextBlock Text=\"{Binding}\" TextWrapping=\"Wrap\" />\n</DataTemplate>\n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.ProductViewExtended\"\n\n  Width=\"600\" FontSize=\"14\">\n  <Grid Margin=\"20\">\n    <Grid.ColumnDefinitions>\n      <ColumnDefinition />\n      <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <ListBox ItemsSource=\"{Binding Products}\" SelectedItem=\"{Binding \n      Products.CurrentItem}\" DisplayMemberPath=\"Name\" Margin=\"0,0,20,0\" />\n    <Grid Grid.Column=\"1\">\n      <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n      </Grid.RowDefinitions>\n      <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition />\n      </Grid.ColumnDefinitions>\n      <Border Grid.ColumnSpan=\"2\" BorderBrush=\"Red\" BorderThickness=\"2\" \n        Background=\"#1FFF0000\" CornerRadius=\"5\" Visibility=\"{Binding \n        Products.CurrentItem.HasError, Converter={StaticResource \n        BoolToVisibilityConverter}}\" Margin=\"0,0,0,10\" Padding=\"10\">\n        <ItemsControl ItemsSource=\"{Binding Products.CurrentItem.Errors}\" \n          ItemTemplate=\"{StaticResource WrapTemplate}\" />\n      </Border>\n      <TextBlock Grid.Row=\"1\" Text=\"Name\" \n        Style=\"{StaticResource LabelStyle}\" />\n      <TextBox Grid.Row=\"1\" Grid.Column=\"1\" Text=\"{Binding \n        Products.CurrentItem.Name, UpdateSourceTrigger=PropertyChanged}\" \n        Style=\"{StaticResource FieldStyle}\" /> \n      <TextBlock Grid.Row=\"2\" Text=\"Price\" \n        Style=\"{StaticResource LabelStyle}\" />\n      <TextBox Grid.Row=\"2\" Grid.Column=\"1\" \n        Text=\"{Binding Products.CurrentItem.Price, Delay=250, \n        UpdateSourceTrigger=PropertyChanged}\" \n        Style=\"{StaticResource FieldStyle}\" />\n    </Grid>\n  </Grid>\n</UserControl>\n```", "```cs\nBindingExpression bindingExpression =  \n  NameOfTextBox.GetBindingExpression(TextBox.TextProperty); \nbindingExpression.UpdateSource(); \n```", "```cs\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Runtime.CompilerServices;\nusing CompanyName.ApplicationName.Extensions;\n\nnamespace CompanyName.ApplicationName.DataModels\n{\n  public abstract class BaseNotifyValidationModel : INotifyPropertyChanged, \n    INotifyDataErrorInfo\n  {\n    protected Dictionary<string, List<string>> AllPropertyErrors { get; } =\n      new Dictionary<string, List<string>>();\n\n    public ObservableCollection<string> Errors => \n      new ObservableCollection<string>(\n      AllPropertyErrors.Values.SelectMany(e => e).Distinct());\n\n    public abstract IEnumerable<string> this[string propertyName] { get; }\n\n    public void NotifyPropertyChangedAndValidate(\n      params string[] propertyNames)\n    {\n      foreach (string propertyName in propertyNames) \n        NotifyPropertyChangedAndValidate(propertyName);\n    }\n\n    public void NotifyPropertyChangedAndValidate(\n      [CallerMemberName]string propertyName = \"\")\n    {\n      NotifyPropertyChanged(propertyName);\n      Validate(propertyName);\n    }\n\n    public void Validate(string propertyName)\n    {\n      UpdateErrors(propertyName, this[propertyName]);\n    }\n\n    private void UpdateErrors(string propertyName, \n      IEnumerable<string> errors)\n    {\n      if (errors.Any())\n      {\n        if (AllPropertyErrors.ContainsKey(propertyName)) \n          AllPropertyErrors[propertyName].Clear();\n        else AllPropertyErrors.Add(propertyName, new List<string>());\n        AllPropertyErrors[propertyName].AddRange(errors);\n        OnErrorsChanged(propertyName);\n      }\n      else\n      {\n        if (AllPropertyErrors.ContainsKey(propertyName)) \n          AllPropertyErrors.Remove(propertyName);\n        OnErrorsChanged(propertyName);\n      }\n    }\n\n    #region INotifyDataErrorInfo Members\n\n    public event EventHandler<DataErrorsChangedEventArgs> ErrorsChanged;\n\n    protected void OnErrorsChanged(string propertyName)\n    {\n      ErrorsChanged?.Invoke(this, \n        new DataErrorsChangedEventArgs(propertyName));\n      NotifyPropertyChanged(nameof(Errors), nameof(HasErrors));\n    }\n\n    public IEnumerable GetErrors(string propertyName)\n    {\n      List<string> propertyErrors = new List<string>();\n      if (string.IsNullOrEmpty(propertyName)) return propertyErrors;\n      AllPropertyErrors.TryGetValue(propertyName, out propertyErrors);\n      return propertyErrors;\n    }\n\n    public bool HasErrors => \n      AllPropertyErrors.Any(p => p.Value != null && p.Value.Any());\n\n    #endregion\n\n    #region INotifyPropertyChanged Members\n\n    public virtual event PropertyChangedEventHandler PropertyChanged;\n\n    protected virtual void NotifyPropertyChanged(\n      params string[] propertyNames)\n    {\n      if (PropertyChanged != null) propertyNames.ForEach(\n        p => PropertyChanged(this, new PropertyChangedEventArgs(p)));\n    }\n\n    protected virtual void NotifyPropertyChanged(\n      [CallerMemberName]string propertyName = \"\")\n    {\n      PropertyChanged?.Invoke(this, \n        new PropertyChangedEventArgs(propertyName));\n    }\n\n    #endregion\n  }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace CompanyName.ApplicationName.DataModels\n{\n  public class ProductNotify : BaseNotifyValidationModel\n  {\n    ...\n\n    public string Name\n    {\n      get { return name; }\n      set { if (name != value) { name = value; \n        NotifyPropertyChangedAndValidate(); } }\n    }\n\n    public decimal Price\n    {\n      get { return price; }\n      set { if (price != value) { price = value; \n        NotifyPropertyChangedAndValidate(); } }\n    }\n\n    public override IEnumerable<string> this[string propertyName]\n    {\n      get\n      {\n        List<string> errors = new List<string>();\n        if (propertyName == nameof(Name))\n        {\n          if (string.IsNullOrEmpty(Name)) \n            errors.Add(\"Please enter the product name.\");\n          else if (Name.Length > 25) errors.Add(\"The product name cannot\n            be longer than twenty-five characters.\");\n          if (Name.Length > 0 && char.IsLower(Name[0])) errors.Add(\"The \n            first letter of the product name must be a capital letter.\");\n        }\n        else if (propertyName == nameof(Price) && Price == 0) \n          errors.Add(\"Please enter a valid price for the product.\");\n        return errors;\n      }\n    }\n  }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing CompanyName.ApplicationName.DataModels;\nusing CompanyName.ApplicationName.DataModels.Collections;\n\nnamespace CompanyName.ApplicationName.ViewModels\n{\n  public class ProductNotifyViewModel : BaseViewModel\n  {\n    private ProductsNotify products = new ProductsNotify();\n\n    public ProductNotifyViewModel()\n    {\n      Products.Add(new ProductNotify() { Id = Guid.NewGuid(), \n        Name = \"Virtual Reality Headset\", Price = 14.99m });\n      Products.Add(new ProductNotify() { Id = Guid.NewGuid(), \n        Name = \"Virtual Reality Headset\" });\n      Products.CurrentItem = Products.Last();\n      Products.CurrentItem.Validate(nameof(Products.CurrentItem.Name));\n      Products.CurrentItem.Validate(nameof(Products.CurrentItem.Price));\n    }\n\n    public ProductsNotify Products\n    {\n      get { return products; }\n      set { if (products != value) { products = value; \n        NotifyPropertyChanged(); } }\n    }\n  }\n}\n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Collections\n{\n  public class ProductsNotify : BaseCollection<ProductNotify> { }\n}\n```", "```cs\n<UserControl x:Class=\"CompanyName.ApplicationName.Views.ProductNotifyView\"\n\n  Width=\"600\" FontSize=\"14\">\n  <Grid Margin=\"20\">\n    <Grid.Resources>\n      <DataTemplate x:Key=\"ProductTemplate\">\n        <TextBlock Text=\"{Binding Name, \n          ValidatesOnNotifyDataErrors=False}\" />\n      </DataTemplate>\n    </Grid.Resources>\n    <Grid.ColumnDefinitions>\n      <ColumnDefinition />\n      <ColumnDefinition />\n    </Grid.ColumnDefinitions>\n    <ListBox ItemsSource=\"{Binding Products}\" \n      SelectedItem=\"{Binding Products.CurrentItem}\" \n      ItemTemplate=\"{StaticResource ProductTemplate}\" Margin=\"0,0,20,0\" />\n    <Grid Grid.Column=\"1\">\n      <Grid.RowDefinitions>\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n        <RowDefinition Height=\"Auto\" />\n      </Grid.RowDefinitions>\n      <Grid.ColumnDefinitions>\n        <ColumnDefinition Width=\"Auto\" />\n        <ColumnDefinition />\n      </Grid.ColumnDefinitions>\n      <Border Grid.ColumnSpan=\"2\" BorderBrush=\"Red\" \n        BorderThickness=\"2\" Background=\"#1FFF0000\" CornerRadius=\"5\" \n        Visibility=\"{Binding Products.CurrentItem.HasErrors, \n        Converter={StaticResource BoolToVisibilityConverter}}\" \n        Margin=\"0,0,0,10\" Padding=\"10\">\n        <ItemsControl ItemsSource=\"{Binding Products.CurrentItem.Errors}\" \n          ItemTemplate=\"{StaticResource WrapTemplate}\" />\n      </Border>\n      <TextBlock Grid.Row=\"1\" Text=\"Name\" \n        Style=\"{StaticResource LabelStyle}\" />\n      <TextBox Grid.Row=\"1\" Grid.Column=\"1\" \n        Text=\"{Binding Products.CurrentItem.Name, \n        UpdateSourceTrigger=PropertyChanged, \n        ValidatesOnNotifyDataErrors=True}\" \n        Style=\"{StaticResource FieldStyle}\" />\n      <TextBlock Grid.Row=\"2\" Text=\"Price\" \n        Style=\"{StaticResource LabelStyle}\" />\n      <TextBox Grid.Row=\"2\" Grid.Column=\"1\" \n        Text=\"{Binding Products.CurrentItem.Price, \n        UpdateSourceTrigger=PropertyChanged, \n        ValidatesOnNotifyDataErrors=True, Delay=250}\" \n        Style=\"{StaticResource FieldStyle}\" />\n    </Grid>\n  </Grid>\n</UserControl>\n```", "```cs\nusing System.ComponentModel.DataAnnotations;\n\n...\n\n[Required(ErrorMessage = \"Please enter the product name.\")] \n[MaxLength(25, ErrorMessage = \"The product name cannot be longer than  \n  twenty-five characters.\")] \npublic string Name \n{ \n  get { return name; } \n  set { if (name != value) { name = value; \n    NotifyPropertyChangedAndValidate(); } } \n}\n```", "```cs\n[Range(0.01, (double)decimal.MaxValue,  \n  ErrorMessage = \"Please enter a valid price for the product.\")] \npublic decimal Price \n{ \n  get { return price; } \n  set { if (price != value) { price = value; \n    NotifyPropertyChangedAndValidate(); } } \n} \n```", "```cs\nusing System.ComponentModel.DataAnnotations; \n\nnamespace CompanyName.ApplicationName.DataModels.Attributes \n{ \n  public class MinimumAttribute : ValidationAttribute \n  { \n    private double minimumValue = 0.0; \n\n    public MinimumAttribute(double minimumValue) \n    { \n      this.minimumValue = minimumValue; \n    } \n\n    protected override ValidationResult IsValid(object value,  \n      ValidationContext validationContext) \n    { \n      if (value.GetType() != typeof(decimal) || \n        (decimal)value < (decimal)minimumValue) \n      { \n        string[] memberNames =  \n          new string[] { validationContext.MemberName }; \n        return new ValidationResult(ErrorMessage, memberNames); \n      } \n      return ValidationResult.Success; \n    } \n  } \n} \n```", "```cs\n[Minimum(0.01, \n  ErrorMessage = \"Please enter a valid price for the product.\")] \npublic decimal Price \n{ \n  get { return price; } \n  set { if (price != value) { price = value;  \n    NotifyPropertyChangedAndValidate(); } } \n} \n```", "```cs\nPropertyInfo propertyInfo =  \n  validationContext.ObjectType.GetProperty(otherPropertyName); \nif (propertyInfo == null) throw new ArgumentNullException( \n  $\"Unknown property: {otherPropertyName}\"); \nobject otherPropertyValue =  \n  propertyInfo.GetValue(validationContext.ObjectInstance); \n```", "```cs\nValidationContext validationContext = new ValidationContext(this);\nList<ValidationResult> validationResults = new List<ValidationResult>(); \nValidator.TryValidateObject(this, validationContext, validationResults,  \n  true); \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Enums \n{ \n  public enum ValidationLevel \n  { \n    None, Partial, Full \n  } \n} \n```", "```cs\nprivate ValidationLevel validationLevel = ValidationLevel.Full; \n\npublic ValidationLevel ValidationLevel \n{ \n  get { return validationLevel; } \n  set { if (validationLevel != value) { validationLevel = value; } } \n} \n\nprivate void Validate(string propertyName, IEnumerable<string> errors)\n{\n  if (ValidationLevel == ValidationLevel.None) return;\n  UpdateErrors(propertyName, this[propertyName]);\n}\n```", "```cs\npublic override IEnumerable<string> this[string propertyName] \n{ \n  get \n  { \n    List<string> errors = new List<string>(); \n    if (propertyName == nameof(Name)) \n    { \n      if (string.IsNullOrEmpty(Name)) \n        errors.Add(\"Please enter the product name.\"); \n      else if (Name.Length > 25) errors.Add(\"The product name cannot be\n        longer than twenty-five characters.\"); \n      if (Name.Length > 0 && char.IsLower(Name[0])) errors.Add(\"The first\n        letter of the product name must be a capital letter.\"); \n    } \n    else if (propertyName == nameof(Price) &&  \n      ValidationLevel == ValidationLevel.Full && Price == 0) \n      errors.Add(\"Please enter a valid price for the product.\"); \n    return errors; \n  } \n} \n```", "```cs\nproduct.ValidationLevel = ValidationLevel.Partial;\n```", "```cs\nusing System.Collections.Specialized;\nusing System.ComponentModel.DataAnnotations;\nusing CompanyName.ApplicationName.DataModels.Enums;\n```", "```cs\nprivate ValidationLevel validationLevel = ValidationLevel.Full;\n```", "```cs\nprotected BaseNotifyValidationModelExtended() \n{ \n  ExternalErrors.CollectionChanged += ExternalErrors_CollectionChanged; \n} \n```", "```cs\npublic ValidationLevel ValidationLevel \n{ \n  get { return validationLevel; } \n  set { if (validationLevel != value) { validationLevel = value; } } \n} \n\npublic virtual ObservableCollection<string> Errors \n{ \n  get \n  { \n    ObservableCollection<string> errors = new ObservableCollection<string>\n      (AllPropertyErrors.Values.SelectMany(e => e).Distinct());\n    ExternalErrors.Where(\n      e => !errors.Contains(e)).ForEach(e => errors.Add(e)); \n    return errors; \n  } \n} \n\npublic ObservableCollection<string> ExternalErrors { get; } =  \n  new ObservableCollection<string>(); \n\npublic abstract void ValidateAllProperties(); \n```", "```cs\npublic void Validate(params string[] propertyNames) \n{ \n  foreach (string propertyName in propertyNames) \n    Validate(propertyName); \n} \n\npublic void Validate(string propertyName)\n{\n  if (ValidationLevel == ValidationLevel.None) return;\n  ValidationContext validationContext = new ValidationContext(this);\n  List<ValidationResult> validationResults = new List<ValidationResult>();\n  Validator.TryValidateObject(this, validationContext, validationResults, \n    true);\n  IEnumerable<string> allErrors = \n    validationResults.Where(v => v.MemberNames.Contains(propertyName)).\n    Select(v => v.ErrorMessage).Concat(this[propertyName]);\n  UpdateErrors(propertyName, allErrors);\n}\n```", "```cs\nprivate void ExternalErrors_CollectionChanged(object sender, \n  NotifyCollectionChangedEventArgs e) \n{ \n  NotifyPropertyChanged(nameof(Errors), nameof(HasErrors)); \n} \n```", "```cs\npublic bool HasErrors => ExternalErrors.Any() ||  \n  allPropertyErrors.Any(p => p.Value != null && p.Value.Any()); \n```", "```cs\npublic class ProductNotifyExtended : \n  BaseNotifyValidationModelExtended\n{\n  ...\n\n  public override IEnumerable<string> this[string propertyName]\n  {\n    get\n    {\n      List<string> errors = new List<string>();\n      if (propertyName == nameof(Name))\n      {\n        ...\n      }\n      else if (propertyName == nameof(Price) && \n        ValidationLevel == ValidationLevel.Full && Price == 0) \n        errors.Add(\"Please enter a valid price for the product.\");\n      return errors;\n    }\n  }\n\n  public override void ValidateAllProperties()\n  {\n    Validate(nameof(Name), nameof(Price));\n  }\n}\n```", "```cs\npublic class ProductNotifyViewModelExtended : BaseViewModel\n{\n  private ProductsNotifyExtended products = \n    new ProductsNotifyExtended();\n\n  public ProductNotifyViewModelExtended()\n  {\n    Products.Add(new ProductNotifyExtended() { Id = Guid.NewGuid(), \n      Name = \"Virtual Reality Headset\", Price = 14.99m });\n    Products.Add(new ProductNotifyExtended() { Id = Guid.NewGuid(), \n      Name = \"super virtual reality headset\", Price = 49.99m });\n    Products.CurrentItem = Products.Last();\n    Products.CurrentItem.Validate(nameof(Products.CurrentItem.Name));\n    Products.CurrentItem.Validate(nameof(Products.CurrentItem.Price));\n  }\n\n  public ProductsNotifyExtended Products\n  {\n    get { return products; }\n    set { if (products != value) { products = value; \n      NotifyPropertyChanged(); } }\n  }\n}\n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Collections\n{\n  public class ProductsNotifyExtended : \n    BaseCollection<ProductNotifyExtended> { }\n}\n```", "```cs\n<ControlTemplate x:Key=\"ErrorTemplate\"> \n  <Border BorderBrush=\"Red\" BorderThickness=\"2\" Background=\"#1FFF0000\"  \n    SnapsToDevicePixels=\"True\"> \n    <AdornedElementPlaceholder /> \n  </Border> \n</ControlTemplate> \n```", "```cs\n<TextBox Grid.Row=\"2\" Grid.Column=\"1\" \n  Text=\"{Binding Products.CurrentItem.Price,\n  UpdateSourceTrigger=PropertyChanged, \n  ValidatesOnNotifyDataErrors=True, Delay=250}\" \n  Style=\"{StaticResource FieldStyle}\"\n  Validation.ErrorTemplate=\"{StaticResource ErrorTemplate}\" />\n```", "```cs\n<ToolTip x:Key=\"ValidationErrorsToolTip\"> \n  <ItemsControl ItemsSource=\"{Binding}\"> \n    <ItemsControl.ItemTemplate> \n      <DataTemplate> \n        <TextBlock Text=\"{Binding ErrorContent}\" /> \n      </DataTemplate> \n    </ItemsControl.ItemTemplate> \n  </ItemsControl> \n</ToolTip> \n<ControlTemplate x:Key=\"WarningErrorTemplate\"> \n  <StackPanel Orientation=\"Horizontal\"> \n    <AdornedElementPlaceholder Margin=\"0,0,10,0\" /> \n    <Image Source=\"pack://application:,,,/CompanyName.ApplicationName; \n      component/Images/Warning_16.png\" Stretch=\"None\" \n      ToolTip=\"{StaticResource ValidationErrorsToolTip}\" /> \n  </StackPanel> \n</ControlTemplate> \n```", "```cs\n<TextBox Grid.Row=\"2\" Grid.Column=\"1\" \n  Text=\"{Binding Products.CurrentItem.Price, \n  UpdateSourceTrigger=PropertyChanged,  \n  ValidatesOnNotifyDataErrors=True, Delay=250}\" \n  Style=\"{StaticResource FieldStyle}\" \n  Validation.ErrorTemplate=\"{StaticResource WarningErrorTemplate}\" /> \n```", "```cs\nusing System.Text.RegularExpressions; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Input; \n\nnamespace CompanyName.ApplicationName.Views.Attached \n{ \n  public class TextBoxProperties : DependencyObject \n  { \n    #region IsNumericOnly \n\n    public static readonly DependencyProperty IsNumericOnlyProperty =  \n      DependencyProperty.RegisterAttached(\"IsNumericOnly\",  \n      typeof(bool), typeof(TextBoxProperties),  \n      new UIPropertyMetadata(default(bool), OnIsNumericOnlyChanged)); \n\n    public static bool GetIsNumericOnly(DependencyObject dependencyObject) \n    { \n      return (bool)dependencyObject.GetValue(IsNumericOnlyProperty); \n    } \n\n    public static void SetIsNumericOnly(DependencyObject dependencyObject, \n      bool value) \n    { \n      dependencyObject.SetValue(IsNumericOnlyProperty, value); \n    } \n\n    private static void OnIsNumericOnlyChanged(DependencyObject  \n      dependencyObject, DependencyPropertyChangedEventArgs e) \n    { \n      TextBox textBox = (TextBox)dependencyObject; \n      bool newIsNumericOnlyValue = (bool)e.NewValue; \n      if (newIsNumericOnlyValue) \n      { \n        textBox.PreviewTextInput += TextBox_PreviewTextInput; \n        textBox.PreviewKeyDown += TextBox_PreviewKeyDown; \n        DataObject.AddPastingHandler(textBox, TextBox_Pasting); \n      } \n      else \n      { \n        textBox.PreviewTextInput -= TextBox_PreviewTextInput; \n        textBox.PreviewKeyDown -= TextBox_PreviewKeyDown; \n        DataObject.RemovePastingHandler(textBox, TextBox_Pasting); \n      } \n    } \n\n    private static void TextBox_PreviewTextInput(object sender,  \n      TextCompositionEventArgs e) \n    { \n      string text = GetFullText((TextBox)sender, e.Text); \n      e.Handled = !IsTextValid(text); \n    } \n\n    private static void TextBox_PreviewKeyDown(object sender, \n      KeyEventArgs e) \n    { \n      TextBox textBox = (TextBox)sender; \n      if (textBox.Text.Length == 1 && \n        (e.Key == Key.Delete || e.Key == Key.Back))\n      {\n        textBox.Text = \"0\";\n        textBox.CaretIndex = 1;\n        e.Handled = true;\n      }\n      else if (textBox.Text == \"0\") textBox.Clear();\n      else e.Handled = e.Key == Key.Space;\n    } \n\n    private static void TextBox_Pasting(object sender,  \n      DataObjectPastingEventArgs e) \n    { \n      if (e.DataObject.GetDataPresent(typeof(string))) \n      { \n        string text = GetFullText((TextBox)sender,  \n          (string)e.DataObject.GetData(typeof(string))); \n        if (!IsTextValid(text)) e.CancelCommand(); \n      } \n      else e.CancelCommand(); \n    } \n\n    private static string GetFullText(TextBox textBox, string input) \n    { \n      return textBox.SelectedText.Length > 0 ?  \n        string.Concat(textBox.Text.Substring(0, textBox.SelectionStart), \n        input, textBox.Text.Substring(textBox.SelectionStart +  \n        textBox.SelectedText.Length)) :  \n        textBox.Text.Insert(textBox. SelectionStart, input); \n    } \n\n    private static bool IsTextValid(string text) \n    { \n      return Regex.Match(text, @\"^\\d*\\.?\\d*$\").Success; \n    } \n\n    #endregion \n\n    ... \n  } \n} \n```", "```cs\n@\"^\\d*\\.?\\d*$\"\n```", "```cs\n\n... \n<TextBox Grid.Row=\"2\" Grid.Column=\"1\" \n  Text=\"{Binding Products.CurrentItem.Price, \n  UpdateSourceTrigger=PropertyChanged, \n  ValidatesOnNotifyDataErrors=True, Delay=250}\" \n  Style=\"{StaticResource FieldStyle}\"\n  Attached:TextBoxProperties.IsNumericOnly=\"True\" />\n```", "```cs\nFrameworkCompatibilityPreferences. \n  KeepTextBoxDisplaySynchronizedWithTextProperty = false; \n```", "```cs\n<TextBox Text=\"{Binding Products.CurrentItem.Price, \n  Style=\"{StaticResource FieldStyle}\" UpdateSourceTrigger=LostFocus ... />\n```", "```cs\n<TextBox Text=\"{Binding Products.CurrentItem.Price,\n  UpdateSourceTrigger=PropertyChanged, Delay=250}\" ... />\n```", "```cs\nusing CompanyName.ApplicationName.DataModels.Interfaces;\n\n...\n\npublic abstract class BaseNotifyValidationModelGeneric<T> : \n  BaseSynchronizableDataModel<T>, INotifyPropertyChanged, \n  INotifyDataErrorInfo \n  where T : BaseDataModel, ISynchronizableDataModel<T>, new()\n```", "```cs\npublic class ProductNotifyGeneric : \n  BaseNotifyValidationModelGeneric<ProductNotifyGeneric> \n{ \n  ...\n\n  public override void CopyValuesFrom(ProductNotifyGeneric product) \n  { \n    Id = product.Id; \n    Name = product.Name; \n    Price = product.Price; \n  } \n\n  public override bool PropertiesEqual(ProductNotifyGeneric otherProduct) \n  { \n    if (otherProduct == null) return false; \n    return Id == otherProduct.Id && Name == otherProduct.Name && \n      Price == otherProduct.Price;\n  }\n\n  public override string ToString()\n  {\n    return $\"{Name}: £{Price:N2}\";\n  }\n} \n```", "```cs\npublic class ProductsNotifyGeneric : \n  BaseSynchronizableCollection<ProductNotifyGeneric> { } \n```", "```cs\npublic ProductNotifyViewModelGeneric()\n{\n  Products.Add(new ProductNotifyGeneric() { Id = Guid.NewGuid(), \n    Name = \"Virtual Reality Headset\", Price = 14.99m });\n  Products.Add(new ProductNotifyGeneric() { Id = Guid.NewGuid(), \n    Name = \"Virtual Reality Headset\" });\n  Products.Synchronize();\n  Products.CurrentItemChanged += Products_CurrentItemChanged;\n  Products.CurrentItem = Products.Last();\n  Products.CurrentItem.Validate(nameof(Products.CurrentItem.Name), \n    nameof(Products.CurrentItem.Price));\n  ValidateUniqueName(Products.CurrentItem);\n}\n```", "```cs\nusing System.Windows.Input; \nusing CompanyName.ApplicationName.ViewModels.Commands;\n\n...\n\npublic ICommand DeleteCommand \n{ \n  get { return new ActionCommand(action => Delete(action),  \n    canExecute => CanDelete(canExecute)); } \n} \n\nprivate bool CanDelete(object parameter) \n{ \n  return Products.Contains((ProductNotifyGeneric)parameter);       \n} \n\nprivate void Delete(object parameter) \n{ \n  Products.Remove((ProductNotifyGeneric)parameter);       \n} \n```", "```cs\n<RadialGradientBrush x:Key=\"BlueGlow\" Center=\"0.5,0.848\"  \n  GradientOrigin=\"0.5,0.818\" RadiusX=\"-1.424\" RadiusY=\"-0.622\"  \n  RelativeTransform=\"{StaticResource GlowTransformGroup}\"> \n  <GradientStop Color=\"#CF01C7FF\" Offset=\"0.168\" /> \n  <GradientStop Color=\"#4B01C7FF\" Offset=\"0.478\" /> \n  <GradientStop Color=\"#1101C7FF\" Offset=\"1\" /> \n</RadialGradientBrush> \n<RadialGradientBrush x:Key=\"RedGlow\" Center=\"0.5,0.848\"  \n  GradientOrigin=\"0.5,0.818\" RadiusX=\"-1.424\" RadiusY=\"-0.622\"  \n  RelativeTransform=\"{StaticResource GlowTransformGroup}\"> \n  <GradientStop Color=\"#CFFF0000\" Offset=\"0.168\" /> \n  <GradientStop Color=\"#4BFF0000\" Offset=\"0.478\" /> \n  <GradientStop Color=\"#00FF0000\" Offset=\"1\" /> \n</RadialGradientBrush> \n```", "```cs\n<Style x:Key=\"GlowStyle\" TargetType=\"{x:Type Rectangle}\"> \n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" /> \n  <Setter Property=\"Opacity\" Value=\"1.0\" /> \n  <Setter Property=\"StrokeThickness\" Value=\"0\" /> \n  <Setter Property=\"RadiusX\" Value=\"2.5\" /> \n  <Setter Property=\"RadiusX\" Value=\"2.5\" /> \n  <Setter Property=\"IsHitTestVisible\" Value=\"False\" /> \n  <Setter Property=\"VerticalAlignment\" Value=\"Stretch\" /> \n  <Setter Property=\"HorizontalAlignment\" Value=\"Stretch\" /> \n  <Setter Property=\"Fill\" Value=\"{StaticResource BlueGlow}\" /> \n</Style> \n```", "```cs\n<Style x:Key=\"ProductGlowStyle\" TargetType=\"{x:Type Rectangle}\"  \n  BasedOn=\"{StaticResource GlowStyle}\"> \n  <Style.Triggers> \n    <DataTrigger Binding=\"{Binding Products.CurrentItem.HasChanges,  \n      FallbackValue=False, Mode=OneWay}\" Value=\"True\"> \n      <Setter Property=\"Fill\" Value=\"{StaticResource GreenGlow}\" /> \n    </DataTrigger> \n    <DataTrigger Binding=\"{Binding Products.CurrentItem.HasErrors,  \n      FallbackValue=False, Mode=OneWay}\" Value=\"True\"> \n      <Setter Property=\"Fill\" Value=\"{StaticResource RedGlow}\" /> \n    </DataTrigger> \n  </Style.Triggers> \n</Style> \n<Style x:Key=\"ProductItemGlowStyle\" TargetType=\"{x:Type Rectangle}\"  \n  BasedOn=\"{StaticResource GlowStyle}\"> \n  <Style.Triggers> \n    <DataTrigger Binding=\"{Binding HasChanges, FallbackValue=False,  \n      Mode=OneWay}\" Value=\"True\"> \n      <Setter Property=\"Fill\" Value=\"{StaticResource GreenGlow}\" /> \n    </DataTrigger> \n    <DataTrigger Binding=\"{Binding HasErrors, FallbackValue=False,  \n      Mode=OneWay}\" Value=\"True\"> \n      <Setter Property=\"Fill\" Value=\"{StaticResource RedGlow}\" /> \n    </DataTrigger> \n  </Style.Triggers> \n</Style> \n```", "```cs\n<Style x:Key=\"WhiteLabelStyle\" TargetType=\"{x:Type TextBlock}\" \n  BasedOn=\"{StaticResource LabelStyle}\">\n  <Setter Property=\"Foreground\" Value=\"White\" />\n</Style>\n<Style x:Key=\"ErrorFreeFieldStyle\" TargetType=\"{x:Type TextBox}\" \n  BasedOn=\"{StaticResource FieldStyle}\">\n  <Setter Property=\"Validation.ErrorTemplate\" Value=\"{x:Null}\" />\n</Style>\n```", "```cs\nxmlns:DataModels=\"clr-namespace:CompanyName.ApplicationName.DataModels; \n  assembly=CompanyName.ApplicationName.DataModels\" \n\n... \n<DataTemplate DataType=\"{x:Type DataModels:ProductNotifyGeneric}\"> \n  <Border CornerRadius=\"3\" BorderBrush=\"{StaticResource TransparentBlack}\" \n    BorderThickness=\"1\" Background=\"{StaticResource TransparentWhite}\"> \n    <Border Name=\"InnerBorder\" CornerRadius=\"2\" Margin=\"1\"  \n      Background=\"{StaticResource LayeredButtonBackground}\"> \n      <Grid> \n        <Rectangle IsHitTestVisible=\"False\" RadiusX=\"2\" RadiusY=\"2\"  \n          Style=\"{StaticResource ProductItemGlowStyle}\" /> \n        <Grid> \n          <Grid.ColumnDefinitions> \n            <ColumnDefinition Width=\"Auto\" /> \n            <ColumnDefinition /> \n            <ColumnDefinition Width=\"Auto\" /> \n          </Grid.ColumnDefinitions> \n          <Image Width=\"24\" Height=\"24\" \n            Source=\"pack://application:,,,/CompanyName.ApplicationName;\n            component/Images/Product.ico\" VerticalAlignment=\"Center\"\n            Margin=\"3,2,5,2\" /> \n          <TextBlock Grid.Column=\"1\" HorizontalAlignment=\"Left\"  \n            VerticalAlignment=\"Center\" Text=\"{Binding Name}\"  \n            TextWrapping=\"Wrap\" Margin=\"0,1,5,3\" Foreground=\"White\"  \n            FontSize=\"14\" Validation.ErrorTemplate=\"{x:Null}\" /> \n          <Button Grid.Column=\"2\"  \n            Command=\"{Binding DataContext.DeleteCommand,  \n            RelativeSource={RelativeSource FindAncestor,  \n            AncestorType={x:Type Views:ProductNotifyViewGeneric}}}\" \n            CommandParameter=\"{Binding}\" Margin=\"0,2,4,2\" \n            Width=\"20\" Height=\"20\"> \n            <Image Width=\"16\" Height=\"16\"  \n              Source=\"pack://application:,,,/CompanyName.ApplicationName; \n              component/Images/Delete_16.png\"  \n              HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" /> \n          </Button> \n        </Grid> \n      </Grid> \n    </Border> \n  </Border> \n</DataTemplate> \n```", "```cs\n<Style TargetType=\"{x:Type ListBoxItem}\"> \n  <Style.Resources> \n    <SolidColorBrush x:Key=\"{x:Static SystemColors.HighlightBrushKey}\"  \n      Color=\"Transparent\" /> \n    <SolidColorBrush x:Key=\"{x:Static SystemColors.ControlBrushKey}\"  \n      Color=\"Transparent\" /> \n    <SolidColorBrush x:Key=\"{x:Static SystemColors.HighlightTextBrushKey}\" \n      Color=\"Black\" /> \n    <SolidColorBrush x:Key=\"{x:Static SystemColors.ControlTextBrushKey}\" \n      Color=\"Black\" /> \n  </Style.Resources> \n</Style> \n```", "```cs\n<Style TargetType=\"{x:Type ListBoxItem}\"> \n  <Setter Property=\"Padding\" Value=\"0\" /> \n  <Setter Property=\"Margin\" Value=\"2,2,2,0\" /> \n  <Setter Property=\"BorderThickness\" Value=\"1\" /> \n  <Setter Property=\"Template\"> \n    <Setter.Value> \n      <ControlTemplate TargetType=\"{x:Type ListBoxItem}\"> \n        <Border x:Name=\"Bd\" BorderBrush=\"{TemplateBinding BorderBrush}\" \n          BorderThickness=\"{TemplateBinding BorderThickness}\" \n          Background=\"{TemplateBinding Background}\" \n          Padding=\"{TemplateBinding Padding}\" SnapsToDevicePixels=\"True\"> \n          <ContentPresenter \n            ContentTemplate=\"{TemplateBinding ContentTemplate}\" \n            Content=\"{TemplateBinding Content}\" \n            ContentStringFormat=\"{TemplateBinding ContentStringFormat}\" \n            HorizontalAlignment=\"{TemplateBinding \n            HorizontalContentAlignment}\"       \n            SnapsToDevicePixels=\"{TemplateBinding SnapsToDevicePixels}\"\n            VerticalAlignment=\"{TemplateBinding VerticalContentAlignment}\"\n            /> \n        </Border> \n        <ControlTemplate.Triggers> \n          <Trigger Property=\"IsEnabled\" Value=\"False\"> \n            <Setter Property=\"TextElement.Foreground\"  \n              TargetName=\"Bd\" Value=\"{DynamicResource  \n              {x:Static SystemColors.GrayTextBrushKey}}\" /> \n          </Trigger> \n        </ControlTemplate.Triggers> \n      </ControlTemplate> \n    </Setter.Value> \n  </Setter> \n</Style> \n```", "```cs\n<Style x:Key=\"ErrorBorderStyle\" TargetType=\"{x:Type Border}\"> \n  <Setter Property=\"BorderBrush\" Value=\"#7BFF0000\" /> \n  <Setter Property=\"Background\" Value=\"#FFFFDFE1\" /> \n  <Setter Property=\"BorderThickness\" Value=\"1\" /> \n  <Setter Property=\"CornerRadius\" Value=\"2.75\" /> \n  <Setter Property=\"Padding\" Value=\"5,3\" /> \n  <Setter Property=\"Margin\" Value=\"0,0,0,5\" /> \n  <Setter Property=\"SnapsToDevicePixels\" Value=\"True\" /> \n  <Setter Property=\"Visibility\" \n    Value=\"{Binding Products.CurrentItem.HasErrors, \n    Converter={StaticResource BoolToVisibilityConverter},  \n    FallbackValue=Collapsed, Mode=OneWay}\" /> \n</Style> \n```", "```cs\n<Grid Margin=\"20\">\n  <Grid.Resources>\n    ...\n  </Grid.Resources>\n  <Grid.ColumnDefinitions>\n    <ColumnDefinition />\n    <ColumnDefinition />\n  </Grid.ColumnDefinitions>\n  <ListBox ItemsSource=\"{Binding Products}\" \n    SelectedItem=\"{Binding Products.CurrentItem}\" Margin=\"0,0,20,0\" \n    HorizontalContentAlignment=\"Stretch\" />\n  <Border Grid.Column=\"1\" CornerRadius=\"3\" \n    BorderBrush=\"{StaticResource TransparentBlack}\" BorderThickness=\"1\" \n    Background=\"{StaticResource TransparentWhite}\">\n    <Border Name=\"InnerBorder\" CornerRadius=\"2\" Margin=\"1\" \n      Background=\"{StaticResource LayeredButtonBackground}\">\n      <Grid>\n        <Rectangle IsHitTestVisible=\"False\" RadiusX=\"2\" RadiusY=\"2\" \n          Style=\"{StaticResource ProductGlowStyle}\" />\n        <Grid Margin=\"10\">\n          <Grid.RowDefinitions>\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n            <RowDefinition Height=\"Auto\" />\n          </Grid.RowDefinitions>\n          <Grid.ColumnDefinitions>\n            <ColumnDefinition Width=\"Auto\" />\n            <ColumnDefinition />\n          </Grid.ColumnDefinitions>\n          <TextBlock Text=\"Name\" \n            Style=\"{StaticResource WhiteLabelStyle}\" />\n          <TextBox Grid.Column=\"1\" \n            Text=\"{Binding Products.CurrentItem.Name, \n            UpdateSourceTrigger=PropertyChanged}\" \n            Style=\"{StaticResource ErrorFreeFieldStyle}\" />\n          <TextBlock Grid.Row=\"1\" Text=\"Price\" \n            Style=\"{StaticResource WhiteLabelStyle}\" />\n          <TextBox Grid.Row=\"1\" Grid.Column=\"1\" \n            Text=\"{Binding Products.CurrentItem.Price, \n            UpdateSourceTrigger=PropertyChanged, Delay=250}\" \n            Style=\"{StaticResource ErrorFreeFieldStyle}\" \n            Attached:TextBoxProperties.IsNumericOnly=\"True\" />\n          <Border Grid.Row=\"2\" Grid.ColumnSpan=\"2\" Style=\"{StaticResource \n            ErrorBorderStyle}\" Margin=\"0,0,0,10\" Padding=\"10\">\n            <ItemsControl ItemsSource=\"{Binding Products.CurrentItem.Errors}\" \n              ItemTemplate=\"{StaticResource WrapTemplate}\" />\n          </Border>\n        </Grid>\n      </Grid>\n    </Border>\n  </Border>\n</Grid>\n```"]