["```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    public class ItemController : ControllerBase\n    {\n    }\n}\n```", "```cs\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    public class ItemController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n\n        public ItemController(IItemService itemService)\n        {\n            _itemService = itemService;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    public class ItemController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n\n        public ItemController(IItemService itemService)\n        {\n            _itemService = itemService;\n        }\n        [HttpGet]\n        public async Task<IActionResult> Get()\n        {\n            var result = await _itemService.GetItemsAsync();\n            return Ok(result);\n        }\n\n        [HttpGet(\"{id:guid}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _itemService.GetItemAsync(new GetItemRequest \n             { Id = id });\n            return Ok(result);\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    public class ItemController : ControllerBase\n    {\n        ...\n        [HttpPost]\n        public async Task<IActionResult> Post(AddItemRequest request)\n        {\n            var result = await _itemService.AddItemAsync(request);\n            return CreatedAtAction(nameof(GetById), new { id = result.Id }, \n             null);\n        }\n\n        [HttpPut(\"{id:guid}\")]\n        public async Task<IActionResult> Put(Guid id, EditItemRequest \n         request)\n        {\n            request.Id = id;\n            var result = await _itemService.EditItemAsync(request);\n\n            return Ok(result);\n        }\n    }\n}\n```", "```cs\ndotnet new xunit -n Catalog.API.Tests\ncd Catalog.API.Tests dotnet add reference ../Catalog.Fixtures\ndotnet add reference ../../src/Catalog.API\ndotnet sln ../../Catalog.API.sln add .\n```", "```cs\ndotnet add Catalog.Fixtures package Microsoft.AspNetCore.Mvc.Testing\ndotnet add Catalog.API.Tests package Microsoft.AspNetCore.Mvc.Testing\n```", "```cs\nusing System;\nusing Catalog.Infrastructure;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc.Testing;\nusing Microsoft.AspNetCore.TestHost;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Catalog.Fixtures\n{\n    public class InMemoryApplicationFactory<TStartup>\n        : WebApplicationFactory<TStartup> where TStartup : class\n    {\n        protected override void ConfigureWebHost(IWebHostBuilder builder)\n        {\n            builder\n                .UseEnvironment(\"Testing\")\n                .ConfigureTestServices(services =>\n                {\n                    var options = new \n                     DbContextOptionsBuilder<CatalogContext>()\n                        .UseInMemoryDatabase(Guid.NewGuid().ToString())\n                        .Options;\n\n                    services.AddScoped<CatalogContext>(serviceProvider => \n                     new TestCatalogContext(options));\n\n                    var sp = services.BuildServiceProvider();\n\n                    using var scope = sp.CreateScope();\n\n                    var scopedServices = scope.ServiceProvider;\n                    var db = scopedServices.GetRequiredService\n                     <CatalogContext>();\n                    db.Database.EnsureCreated();\n                });\n        }\n    }\n}\n```", "```cs\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing Shouldly;\nusing Catalog.Domain.Infrastructure.Entities;\nusing Catalog.Fixtures;\nusing Xunit;\n\nnamespace Catalog.API.Tests.Controllers\n{\n    public class ItemControllerTests : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        private readonly InMemoryApplicationFactory<Startup> _factory;\n        public ItemControllerTests(InMemoryApplicationFactory<Startup> \n         factory)\n        {\n            _factory = factory;\n        }\n        ....\n    }\n}\n```", "```cs\n..\n[Theory]\n[InlineData(\"/api/items/\")]\npublic async Task get_should_return_success(string url)\n\n{\n    var client = _factory.CreateClient();\n    var response = await client.GetAsync(url);\n\n    response.EnsureSuccessStatusCode();\n}\n\n[Fact]\npublic async Task get_by_id_should_return_item_data()\n{\n    const string id = \"86bff4f7-05a7-46b6-ba73-d43e2c45840f\";\n    var client = _factory.CreateClient();\n    var response = await client.GetAsync($\"/api/items/{id}\");\n\n    response.EnsureSuccessStatusCode();\n    var responseContent = await response.Content.ReadAsStringAsync();\n    var responseEntity = JsonConvert.\n     DeserializeObject<Item>(responseContent);\n\n    responseEntity.ShouldNotBeNull();\n}\n```", "```cs\n[Fact]\npublic async Task add_should_create_new_record()\n{\n    var request = new AddItemRequest\n    {\n        Name = \"Test album\",\n        Description = \"Description\",\n        LabelName = \"Label name\",\n        Price = new Price { Amount = 13, Currency = \"EUR\" },\n        PictureUri = \"https://mycdn.com/pictures/32423423\",\n        ReleaseDate = DateTimeOffset.Now,\n        AvailableStock = 6,\n        GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\"),\n        ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\")\n    };\n\n    var client = _factory.CreateClient();\n\n    var httpContent = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, \"application/json\");\n    var response = await client.PostAsync($\"/api/items\", httpContent);\n\n    response.EnsureSuccessStatusCode();\n    response.Headers.Location.ShouldNotBeNull();\n}\n```", "```cs\n[Fact]\npublic async Task update_should_modify_existing_item()\n{\n    var client = _factory.CreateClient();\n\n    var request = new EditItemRequest\n    {\n        Id = new Guid(\"b5b05534-9263-448c-a69e-0bbd8b3eb90e\"),\n        Name = \"Test album\",\n        Description = \"Description updated\",\n        LabelName = \"Label name\",\n        Price = new Price { Amount = 50, Currency = \"EUR\" },\n        PictureUri = \"https://mycdn.com/pictures/32423423\",\n        ReleaseDate = DateTimeOffset.Now,\n        AvailableStock = 6,\n        GenreId = new Guid(\"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\"),\n        ArtistId = new Guid(\"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\")\n    };\n\n    var httpContent = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, \"application/json\");\n    var response = await client.PutAsync($\"/api/items/{request.Id}\", httpContent);\n\n    response.EnsureSuccessStatusCode();\n\n    var responseContent = await response.Content.ReadAsStringAsync();\n    var responseEntity = JsonConvert.DeserializeObject<Item>(responseContent);\n\n    responseEntity.Name.ShouldBe(request.Name);\n    responseEntity.Description.ShouldBe(request.Description);\n    responseEntity.GenreId.ShouldBe(request.GenreId);\n    responseEntity.ArtistId.ShouldBe(request.ArtistId);\n}\n```", "```cs\n public class ItemControllerTests\n    {\n        private readonly InMemoryApplicationFactory<Startup> _factory;\n\n        public ItemControllerTests()\n        {\n            _factory = new InMemoryApplicationFactory<Startup>();\n        }\n        ....\n    }\n```", "```cs\n\nnamespace Catalog.API.Tests.Controllers\n{\n    public class ItemControllerTests : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n       ...\n\n        [Theory]\n        [LoadData( \"item\")]\n        public async Task get_by_id_should_return_right_data(Item request)\n        {\n            var client = _factory.CreateClient();\n            var response = await client.GetAsync($\"/api/items/{request.Id}\");\n\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = \n             await response.Content.ReadAsStringAsync();\n            var responseEntity = JsonConvert.DeserializeObject\n             <ItemResponse>(responseContent);\n\n            responseEntity.Name.ShouldBe(request.Name);\n            responseEntity.Description.ShouldBe(request.Description);\n            responseEntity.Price.Amount.ShouldBe(request.Price.Amount);\n            responseEntity.Price.Currency.ShouldBe(request.Price.Currency);\n            responseEntity.Format.ShouldBe(request.Format);\n            responseEntity.PictureUri.ShouldBe(request.PictureUri);\n            responseEntity.GenreId.ShouldBe(request.GenreId);\n            responseEntity.ArtistId.ShouldBe(request.ArtistId);\n        }\n\n        ...\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Reflection;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing Xunit.Sdk;\n\nnamespace Catalog.Fixtures\n{\n    public class LoadDataAttribute : DataAttribute\n    {\n        private readonly string _fileName;\n        private readonly string _section;\n        public LoadDataAttribute(string section)\n        {\n            _fileName = \"record-data.json\";\n            _section = section;\n        }\n        public override IEnumerable<object[]> GetData(MethodInfo testMethod)\n        {\n            if (testMethod == null) throw new ArgumentNullException(nameof(testMethod));\n\n            var path = Path.IsPathRooted(_fileName)\n                ? _fileName\n                : Path.GetRelativePath(Directory.GetCurrentDirectory(), _fileName);\n\n            if (!File.Exists(path)) throw new ArgumentException\n             ($\"File not found: {path}\");\n\n            var fileData = File.ReadAllText(_fileName);\n\n            if (string.IsNullOrEmpty(_section)) return \n             JsonConvert.DeserializeObject<List<string[]>>(fileData);\n\n            var allData = JObject.Parse(fileData);\n            var data = allData[_section];\n            return new List<object[]> { new[] {              \n             data.ToObject(testMethod.GetParameters()\n             .First().ParameterType) } };\n        }\n    }\n}\n```", "```cs\n{\n  \"item\": {\n    \"Id\": \"86bff4f7-05a7-46b6-ba73-d43e2c45840f\",\n    \"Name\": \"DAMN.\",\n    \"Description\": \"DAMN. by Kendrick Lamar\",\n    \"LabelName\": \"TDE, Top Dawg Entertainment\",\n    \"Price\": {\n      \"Amount\": 34.5,\n      \"Currency\": \"EUR\"\n    },\n    \"PictureUri\": \"https://mycdn.com/pictures/45345345\",\n    \"ReleaseDate\": \"2017-01-01T00:00:00+00:00\",\n    \"Format\": \"Vinyl 33g\",\n    \"AvailableStock\": 5,\n    \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n    \"Genre\": null,\n    \"ArtistId\": \"3eb00b42-a9f0-4012-841d-70ebf3ab7474\",\n    \"Artist\": null\n  },\n  \"genre\": {\n    \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n    \"GenreDescription\": \"Hip-Hop\"\n  },\n  \"artist\": {\n    \"ArtistId\": \"f08a333d-30db-4dd1-b8ba-3b0473c7cdab\",\n    \"ArtistName\": \"Anderson Paak.\"\n  }\n}\n```", "```cs\nusing System;\nusing System.Net;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing Shouldly;\nusing Catalog.Domain.Infrastructure.Entities;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Fixtures;\nusing Xunit;\n\nnamespace Catalog.API.Tests.Controllers\n{\n    public class ItemControllerTests : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        ...\n\n        [Theory]\n        [LoadData(\"item\")]\n        public async Task get_by_id_should_return_right_data(Item request){...}\n\n        [Theory]\n        [LoadData(\"item\")]\n        public async Task add_should_create_new_item(AddItemRequest request){...}\n\n        [Theory]\n        [LoadTestData(\"item\")]\n        public async Task update_should_modify_existing_item(EditItemRequest request){...}\n\n    }\n}\n```", "```cs\n[Theory]\n[LoadData( \"item\")]\npublic async Task add_should_create_new_record(AddItemRequest request)\n{\n    var client = _factory.CreateClient();\n\n    var httpContent = new StringContent(JsonConvert.SerializeObject(request), Encoding.UTF8, \"application/json\");\n    var response = await client.PostAsync($\"/api/items\", httpContent);\n\n response.EnsureSuccessStatusCode();\n response.Headers.Location.ShouldNotBeNull();\n}\n\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\n\nnamespace Catalog.API.Filters\n{\n    public class ItemExistsAttribute : TypeFilterAttribute\n    {\n        public ItemExistsAttribute() : base(typeof\n            (ItemExistsFilterImpl))\n        {\n        }\n\n        public class ItemExistsFilterImpl : IAsyncActionFilter\n        {\n            private readonly IItemService _itemService;\n\n            public ItemExistsFilterImpl(IItemService itemService)\n            {\n                _itemService = itemService;\n            }\n\n            public async Task OnActionExecutionAsync(ActionExecutingContext context,\n                ActionExecutionDelegate next)\n            {\n                if (!(context.ActionArguments[\"id\"] is Guid id))\n                {\n                    context.Result = new BadRequestResult();\n                    return;\n                }\n\n                var result = await _itemService.GetItemAsync(new GetItemRequest { Id = id });\n\n                if (result == null)\n                {\n                    context.Result = new NotFoundObjectResult($\"Item with id {id} not exist.\");\n                    return;\n                }\n\n                await next();\n            }\n        }\n    }\n}\n```", "```cs\nusing Catalog.API.Filters;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    public class ItemController : ControllerBase\n    {\n        ...\n\n        [HttpGet(\"{id:guid}\")]\n        [ItemExists]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n           ...\n        }\n\n        [HttpPut(\"{id:guid}\")]\n        [ItemExists]\n        public async Task<IActionResult> Put(Guid id, EditItemCommand request)\n        {\n          ...\n        }\n    }\n}\n```", "```cs\ndotnet add package Moq\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Catalog.API.Filters;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Responses;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Abstractions;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.AspNetCore.Routing;\nusing Moq;\nusing Xunit;\n\nnamespace Catalog.API.Tests.Filters\n{\n    public class ItemExistsAttributeTests\n    {\n        [Fact]\n        public async Task should_continue_pipeline_when_id_is_present()\n        {\n            var id = Guid.NewGuid();\n            var itemService = new Mock<IItemService>();\n\n            itemService\n                .Setup(x => x.GetItemAsync(It.IsAny<GetItemRequest>()))\n                .ReturnsAsync(new ItemResponse { Id = id });\n\n            var filter = new ItemExistsAttribute.ItemExistsFilterImpl(itemService.Object);\n\n            var actionExecutedContext = new ActionExecutingContext(\n                new ActionContext(new DefaultHttpContext(), new RouteData(), new ActionDescriptor()),\n                new List<IFilterMetadata>(),\n                new Dictionary<string, object>\n                {\n                    {\"id\", id}\n                }, new object());\n\n            var nextCallback = new Mock<ActionExecutionDelegate>();\n\n            await filter.OnActionExecutionAsync(actionExecutedContext, nextCallback.Object);\n\n            nextCallback.Verify(executionDelegate => executionDelegate(), Times.Once);\n        }\n    }\n}\n```", "```cs\nnamespace Catalog.API.Exceptions\n{\n    public class JsonErrorPayload\n    {\n        public int EventId { get; set; }\n        public object DetailedMessage { get; set; }\n    }\n}\n```", "```cs\nusing System.Net;\nusing Catalog.API.Exceptions;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nnamespace Catalog.API.Filters\n{\n    public class JsonExceptionAttribute : TypeFilterAttribute\n    {\n        public JsonExceptionAttribute() : base(typeof(HttpCustomExceptionFilterImpl))\n        {\n        }\n\n        private class HttpCustomExceptionFilterImpl : IExceptionFilter\n        {\n            private readonly IWebHostEnvironment _env;\n            private readonly ILogger<HttpCustomExceptionFilterImpl> _logger;\n\n            public HttpCustomExceptionFilterImpl(IWebHostEnvironment env,\n                ILogger<HttpCustomExceptionFilterImpl> logger)\n            {\n                _env = env;\n                _logger = logger;\n            }\n\n            public void OnException(ExceptionContext context)\n            {\n                var eventId = new EventId(context.Exception.HResult);\n\n                _logger.LogError(eventId,\n                    context.Exception,\n                    context.Exception.Message);\n\n                var json = new JsonErrorPayload { EventId = eventId.Id };\n\n                if (_env.IsDevelopment())\n                {\n                    json.DetailedMessage = context.Exception;\n                }\n\n                var exceptionObject = new ObjectResult(json) { StatusCode = 500 };\n\n                context.Result = exceptionObject;\n                context.HttpContext.Response.StatusCode = (int) HttpStatusCode.InternalServerError;\n            }\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\n\nnamespace Catalog.API.ResponseModels\n{\n    public class PaginatedItemsResponseModel<TEntity> where TEntity : class\n    {\n        public PaginatedItemsResponseModel(int pageIndex, int pageSize, long total, IEnumerable<TEntity> data)\n        {\n            PageIndex = pageIndex;\n            PageSize = pageSize;\n            Total = total;\n            Data = data;\n        }\n\n        public int PageIndex { get; }\n        public int PageSize { get; }\n        public long Total { get; }\n        public IEnumerable<TEntity> Data { get; }\n    }\n}\n```", "```cs\nusing Catalog.API.ResponseModels;\n...\n\n    public class ItemController : ControllerBase\n    {\n        ...\n\n        [HttpGet]\n        public async Task<IActionResult> Get(int pageSize = 10, int pageIndex = 0)\n        {\n            var result = await _itemService.GetItemsAsync();\n\n            var totalItems = result.Count();\n\n            var itemsOnPage = result\n                .OrderBy(c => c.Name)\n                .Skip(pageSize * pageIndex)\n                .Take(pageSize);\n\n            var model = new PaginatedItemsResponseModel<ItemResponse>(\n pageIndex, pageSize, totalItems, itemsOnPage);\n\n            return Ok(model);\n        }\n        ...\n    }\n}\n```", "```cs\nusing Catalog.API.ResponseModels;\n...\n\n    public class ItemControllerTests : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n\n        ...\n\n        [Theory]\n        [InlineData(\"/api/items/?pageSize=1&pageIndex=0\", 1,0)]\n [InlineData(\"/api/items/?pageSize=2&pageIndex=0\", 2,0)]\n [InlineData(\"/api/items/?pageSize=1&pageIndex=1\", 1,1)]\n        public async Task get_should_return_paginated_data(string url, int pageSize, int pageIndex)\n\n        {\n            var client = _factory.CreateClient();\n            var response = await client.GetAsync(url);\n\n                response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n var responseEntity = JsonConvert.DeserializeObject<PaginatedItemsResponseModel<ItemResponse>>(responseContent);\n\n responseEntity.PageIndex.ShouldBe(pageIndex);\n responseEntity.PageSize.ShouldBe(pageSize);\n responseEntity.Data.Count().ShouldBe(pageSize);\n        }\n       ...\n    }\n} \n```", "```cs\n...\npublic class CatalogContext : DbContext, IUnitOfWork\n{\n\n    public DbSet<Item> Items { get; set; }\n    public DbSet<Artist> Artists { get; set; }\n public DbSet<Genre> Genres { get; set; }\n\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        modelBuilder.ApplyConfiguration(new ItemEntitySchemaDefinition());\n modelBuilder.ApplyConfiguration(new ArtistEntitySchemaConfiguration());\n modelBuilder.ApplyConfiguration(new GenreEntitySchemaConfiguration());\n\n        base.OnModelCreating(modelBuilder);   \n    }\n..\n```", "```cs\n// Repositories/IArtistsRepository.cs\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Domain.Repositories\n{\n    public interface IArtistRepository : IRepository\n    {\n        Task<IEnumerable<Artist>> GetAsync();\n        Task<Artist> GetAsync(Guid id);\n        Artist Add(Artist item);\n    }\n}\n\n// Repositories/IGenreRepository.cs using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\n\nnamespace Catalog.Domain.Infrastructure.Repositories\n{\n    public interface IGenreRepository : IRepository\n    {\n        Task<IEnumerable<Genre>> GetAsync();\n        Task<Genre> GetAsync(Guid id);\n        Genre Add(Genre item);\n    }\n}\n```", "```cs\n//Repositories/ArtistRepository.cs using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\n\nnamespace Catalog.Infrastructure.Repositories\n{\n    public class ArtistRepository : IArtistRepository\n    {\n        private readonly CatalogContext _catalogContext;\n        public IUnitOfWork UnitOfWork => _catalogContext;\n\n        public ArtistRepository(CatalogContext catalogContext)\n        {\n            _catalogContext = catalogContext;\n        }\n\n        public async Task<IEnumerable<Artist>> GetAsync()\n        {\n            return await _catalogContext.Artist\n                .AsNoTracking()\n                .ToListAsync();\n        }\n\n        public async Task<Artist> GetAsync(Guid id)\n        {\n            var artist = await _catalogContext.Artist\n                .FindAsync(id);\n\n            if (artist == null) return null;\n\n            _catalogContext.Entry(artist).State = EntityState.Detached;\n            return artist;\n        }\n\n        public Artist Add(Artist artist)\n        {\n            return _catalogContext.Artist.Add(artist).Entity;\n        }\n    }\n}\n```", "```cs\n//Repositories/GenreRepository.cs using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Catalog.Domain.Entities;\nusing Catalog.Domain.Repositories;\n\nnamespace Catalog.Infrastructure.Repositories\n{\n    public class GenreRepository : IGenreRepository\n    {\n        private readonly CatalogContext _catalogContext;\n        public IUnitOfWork UnitOfWork => _catalogContext;\n\n        public GenreRepository(CatalogContext catalogContext)\n        {\n            _catalogContext = catalogContext;\n        }\n\n        public async Task<IEnumerable<Genre>> GetAsync()\n        {\n            return await _catalogContext.Genre\n                .AsNoTracking()\n                .ToListAsync();\n        }\n\n        public async Task<Genre> GetAsync(Guid id)\n        {\n            var item = await _catalogContext.Genre\n                .FindAsync(id);\n\n            if (item == null) return null;\n\n            _catalogContext.Entry(item).State = EntityState.Detached;\n            return item;\n        }\n\n        public Genre Add(Genre item)\n        {\n            return _catalogContext.Genre.Add(item).Entity;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Entities;\nusing Catalog.Fixtures;\nusing Catalog.Infrastructure.Repositories;\nusing Shouldly;\nusing Xunit;\n\nnamespace Catalog.Infrastructure.Tests\n{\n    public class ArtistRepositoryTests :\n        IClassFixture<CatalogContextFactory>\n    {\n        private readonly CatalogContextFactory _factory;\n\n        public ArtistRepositoryTests(CatalogContextFactory factory)\n        {\n            _factory = factory;\n        }\n\n        [Theory]\n        [LoadData(\"artist\")]\n        public async Task should_return_record_by_id(Artist artist)\n        {\n            var sut = new ArtistRepository(_factory.ContextInstance);\n            var result = await sut.GetAsync(artist.ArtistId);\n\n            result.ArtistId.ShouldBe(artist.ArtistId);\n            result.ArtistName.ShouldBe(artist.ArtistName);\n        }\n\n        [Theory]\n        [LoadData(\"artist\")]\n        public async Task should_add_new_item(Artist artist)\n        {\n            artist.ArtistId = Guid.NewGuid();\n            var sut = new ArtistRepository(_factory.ContextInstance);\n\n            sut.Add(artist);\n            await sut.UnitOfWork.SaveEntitiesAsync();\n\n            _factory.ContextInstance.Artist\n                .FirstOrDefault(x => x.ArtistId == artist.ArtistId)\n                .ShouldNotBeNull();\n        }\n    }\n}\n```", "```cs\n //Repositories/IItemRepository.cs\n    public interface IItemRepository : IRepository\n    {\n        ...\n        Task<IEnumerable<Item>> GetItemByArtistIdAsync(Guid id);\n Task<IEnumerable<Item>> GetItemByGenreIdAsync(Guid id);\n        ...\n    }\n\n //Repositories/ItemRepository.cs\n    public class ItemRepository\n        : IItemRepository\n    {\n        ...\n        public async Task<IEnumerable<Item>> GetItemByArtistIdAsync(Guid id)\n {\n var items = await _context\n .Items\n .Where(item => item.ArtistId == id)\n .Include(x => x.Genre)\n .Include(x => x.Artist)\n .ToListAsync();\n\n return items;\n }\n\n public async Task<IEnumerable<Item>> GetItemByGenreIdAsync(Guid id)\n {\n var items = await _context.Items\n .Where(item => item.GenreId == id)\n .Include(x => x.Genre)\n .Include(x => x.Artist)\n .ToListAsync();\n\n return items;\n }\n       ...\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Requests.Artists;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Services\n{\n    public interface IArtistService\n    {\n        Task<IEnumerable<ArtistResponse>> GetArtistsAsync();\n        Task<ArtistResponse> GetArtistAsync(GetArtistRequest request);\n        Task<IEnumerable<ItemResponse>> GetItemByArtistIdAsync(GetArtistRequest request);\n        Task<ArtistResponse> AddArtistAsync(AddArtistRequest request);\n    }\n\n    public interface IGenreService\n    {\n        Task<IEnumerable<GenreResponse>> GetGenreAsync();\n        Task<GenreResponse> GetGenreAsync(GetGenreRequest request);\n        Task<IEnumerable<ItemResponse>> GetItemByGenreIdAsync(GetGenreRequest request);\n        Task<GenreResponse> AddGenreAsync(AddGenreRequest request);\n    }\n}\n```", "```cs\nnamespace Catalog.Domain.Requests.Artists\n{\n    public class AddArtistRequest\n    {\n        public string ArtistName { get; set; }\n    }\n\n    public class GetArtistRequest\n    {\n        public Guid Id { get; set; }\n    }\n}\n\nnamespace Catalog.Domain.Requests.Genre\n{\n    public class AddGenreRequest\n    {\n        public string GenreDescription { get; set; }\n    }\n\n    public class GetGenreRequest\n    {\n        public Guid Id { get; set; }\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Mappers;\nusing Catalog.Domain.Repositories;\nusing Catalog.Domain.Requests.Artists;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.Domain.Services\n{\n    public class ArtistService : IArtistService\n    {\n        private readonly IArtistRepository _artistRepository;\n        private readonly IItemRepository _itemRepository;\n        private readonly IArtistMapper _artistMapper;\n        private readonly IItemMapper _itemMapper;\n\n        public ArtistService(IArtistRepository artistRepository, IItemRepository itemRepository,\n            IArtistMapper artistMapper, IItemMapper itemMapper)\n        {\n            _artistRepository = artistRepository;\n            _itemRepository = itemRepository;\n            _artistMapper = artistMapper;\n            _itemMapper = itemMapper;\n        }\n        ...\n    }\n}\n```", "```cs\n    public class ArtistService : IArtistService\n    {\n        ...\n\n        public async Task<IEnumerable<ArtistResponse>> GetArtistsAsync()\n        {\n            var result = await _artistRepository.GetAsync();\n\n            return result.Select(_artistMapper.Map);\n        }\n\n        public async Task<ArtistResponse> GetArtistAsync(GetArtistRequest\n            request)\n        {\n            if (request?.Id == null) throw new ArgumentNullException();\n\n            var result = await _artistRepository.GetAsync(request.Id);\n\n            return result == null ? null : _artistMapper.Map(result);\n        }\n\n        public async Task<IEnumerable<ItemResponse>> GetItemByArtistIdAsync(GetArtistRequest request)\n        {\n            if (request?.Id == null) throw new ArgumentNullException();\n\n            var result = await _itemRepository.GetItemByArtistIdAsync(request.Id);\n\n            return result.Select(_itemMapper.Map);\n        }\n\n        public async Task<ArtistResponse> AddArtistAsync(AddArtistRequest request)\n        {\n            var item = new Entities.Artist {ArtistName = request.ArtistName};\n\n            var result = _artistRepository.Add(item);\n\n            await _artistRepository.UnitOfWork.SaveChangesAsync();\n\n            return _artistMapper.Map(result);\n        }\n    }\n```", "```cs\nusing Catalog.Domain.Mappers;\nusing Catalog.Domain.Services;\nusing Microsoft.Extensions.DependencyInjection;\n\nnamespace Catalog.Domain.Extensions\n{\n    public static class DependenciesRegistration\n    {\n        ...\n\n        public static IServiceCollection AddServices(this IServiceCollection services)\n        {\n            services\n                .AddScoped<IItemService, ItemService>()\n                .AddScoped<IArtistService, ArtistService>()\n .AddScoped<IGenreService, GenreService>();\n            return services;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing FluentValidation;\nusing System.Threading.Tasks;\nusing Catalog.Domain.Requests.Artists;\nusing Catalog.Domain.Requests.Genre;\nusing Catalog.Domain.Services;\n\nnamespace Catalog.Domain.Requests.Item.Validators\n{\n    public class AddItemRequestValidator : AbstractValidator<AddItemRequest>\n    {\n        private readonly IArtistService _artistService;\n private readonly IGenreService _genreService;\n\n public AddItemRequestValidator(IArtistService artistService, IGenreService genreService)\n {\n _artistService = artistService;\n _genreService = genreService;\n }\n\n       private async Task<bool> ArtistExists(Guid artistId, CancellationToken cancellationToken)\n        {\n            if (string.IsNullOrEmpty(artistId.ToString()))\n                return false;\n\n            var artist = await _artistService.GetArtistAsync(new GetArtistRequest {Id = artistId});\n\n            return artist != null;\n        }\n\n        private async Task<bool> GenreExists(Guid genreId, CancellationToken cancellationToken)\n        {\n            if (string.IsNullOrEmpty(genreId.ToString()))\n                return false;\n\n            var genre = await _genreService.GetGenreAsync(new GetGenreRequest {Id = genreId});\n\n            return genre != null;\n        }\n    }\n}\n```", "```cs\nusing System;\n...\n\nnamespace Catalog.Domain.Item.Validators\n{\n    public class AddItemRequestValidator : AbstractValidator<AddItemRequest>\n    {\n         ..\n        public AddItemRequestValidator(IArtistService artistService, IGenreService genreService)\n        {\n            _artistService = artistService;\n            _genreService = genreService;\n            RuleFor(x => x.ArtistId)\n .NotEmpty()\n .MustAsync(ArtistExists).WithMessage(\"Artist must exists\");\n RuleFor(x => x.GenreId)\n .NotEmpty()\n .MustAsync(GenreExists).WithMessage(\"Genre must exists\");\n           ...\n        }\n...\n```", "```cs\n...\nusing FluentValidation.TestHelper;\nusing Moq;\n\nnamespace Catalog.Domain.Tests.Requests.Item.Validators\n{\n    public class AddItemRequestValidatorTests\n    {\n        private readonly Mock<IArtistService> _artistServiceMock;\n        private readonly Mock<IGenreService> _genreServiceMock;\n        private readonly AddItemRequestValidator _validator;\n\n        public AddItemRequestValidatorTests()\n        {\n            _artistServiceMock = new Mock<IArtistService>();\n            _artistServiceMock\n                .Setup(x => x.GetArtistAsync(It.IsAny<GetArtistRequest>()))\n                .ReturnsAsync(() => new ArtistResponse());\n\n            _genreServiceMock = new Mock<IGenreService>();\n            _genreServiceMock\n                .Setup(x => x.GetGenreAsync(It.IsAny<GetGenreRequest>()))\n                .ReturnsAsync(() => new GenreResponse());\n\n            _validator = new AddItemRequestValidator(_artistServiceMock.Object, _genreServiceMock.Object);\n        }\n\n        [Fact]\n        public void should_have_error_when_ArtistId_doesnt_exist()\n        {\n            _artistServiceMock\n                .Setup(x => x.GetArtistAsync(It.IsAny<GetArtistRequest>()))\n                .ReturnsAsync(() => null);\n\n            var addItemRequest = new AddItemRequest { Price = new Price(), ArtistId = Guid.NewGuid() };\n\n            _validator.ShouldHaveValidationErrorFor(x => x.ArtistId, addItemRequest);\n        }\n\n        [Fact]\n        public void should_have_error_when_GenreId_doesnt_exist()\n        {\n            _genreServiceMock\n                .Setup(x => x.GetGenreAsync(It.IsAny<GetGenreRequest>()))\n                .ReturnsAsync(() => null);\n\n            var addItemRequest = new AddItemRequest { Price = new Price(), GenreId = Guid.NewGuid() };\n\n            _validator.ShouldHaveValidationErrorFor(x => x.GenreId, addItemRequest);\n        }\n    }\n}\n```", "```cs\n    public static class DependenciesRegistration\n    {\n        ...\n\n        public static IServiceCollection AddServices(this IServiceCollection services)\n        {\n            services\n                .AddScoped<IItemService, ItemService>()\n                .AddScoped<IArtistService, ArtistService>()\n .AddScoped<IGenreService, GenreService>();\n\n            return services;\n        }\n    }\n```", "```cs\n...\npublic void ConfigureServices(IServiceCollection services)\n{\n    services\n         ...\n        .AddScoped<IItemRepository, ItemRepository>()\n .AddScoped<IArtistRepository, ArtistRepository>()\n .AddScoped<IGenreRepository, GenreRepository>()\n        ....\n}\n```", "```cs\nusing Catalog.API.Filters;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/artist\")]\n    [ApiController]\n    [JsonException]\n    public class ArtistController : ControllerBase\n    {\n        private readonly IArtistService _artistService;\n\n        public ArtistController(IArtistService artistService)\n        {\n            _artistService = artistService;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.API.ResponseModels;\nusing Catalog.Domain.Requests.Artists;\nusing Catalog.Domain.Responses;\n\nnamespace Catalog.API.Controllers\n{\n    ..\n    public class ArtistController : ControllerBase\n    {\n        ...\n        [HttpGet]\n        public async Task<IActionResult> Get([FromQuery] int pageSize = 10, [FromQuery] int pageIndex = 0)\n        {\n            var result = await _artistService.GetArtistsAsync();\n\n            var totalItems = result.ToList().Count;\n\n            var itemsOnPage = result\n                .OrderBy(c => c.ArtistName)\n                .Skip(pageSize * pageIndex)\n                .Take(pageSize);\n\n            var model = new PaginatedItemsResponseModel<ArtistResponse>(\n                pageIndex, pageSize, totalItems, itemsOnPage);\n\n            return Ok(model);\n        }\n\n        [HttpGet(\"{id:guid}\")]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _artistService.GetArtistAsync(new GetArtistRequest {Id = id});\n\n            return Ok(result);\n        }\n    }\n}\n```", "```cs\n...\n        [HttpGet(\"{id:guid}/items\")]\n        public async Task<IActionResult> GetItemsById(Guid id)\n        {\n            var result = await _artistService.GetItemByArtistIdAsync(new GetArtistRequest { Id = id });\n\n            return Ok(result);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> Post(AddArtistRequest request)\n        {\n            var result = await _artistService.AddArtistAsync(request);\n\n            return CreatedAtAction(nameof(GetById), new { id = result.ArtistId }, null);\n        }\n}\n```", "```cs\nusing FluentValidation;\n\nnamespace Catalog.Domain.Requests.Artists.Validators\n{\n    public class AddArtistRequestValidator : AbstractValidator<AddArtistRequest>\n    {\n        public AddArtistRequestValidator()\n        {\n            RuleFor(artist => artist.ArtistName).NotEmpty();\n        }\n    }\n}\n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.API.Filters;\nusing Catalog.API.ResponseModels;\nusing Catalog.Domain.Requests.Genre;\nusing Catalog.Domain.Responses;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/genre\")]\n    [ApiController]\n    [JsonException]\n    public class GenreController : ControllerBase\n    {\n        private readonly IGenreService _genreService;\n\n        public GenreController(IGenreService genreService)\n        {\n            _genreService = genreService;\n        }\n    }\n}\n```", "```cs\n...\n\n[HttpGet]\npublic async Task<IActionResult> Get([FromQuery] int pageSize = 10, [FromQuery] int pageIndex = 0)\n{\n    var result = await _genreService.GetGenreAsync();\n\n    var totalItems = result.ToList().Count;\n\n    var itemsOnPage = result\n        .OrderBy(c => c.GenreDescription)\n        .Skip(pageSize * pageIndex)\n        .Take(pageSize);\n\n    var model = new PaginatedItemsResponseModel<GenreResponse>(\n        pageIndex, pageSize, totalItems, itemsOnPage);\n\n    return Ok(model);\n}\n\n[HttpGet(\"{id:guid}\")]\npublic async Task<IActionResult> GetById(Guid id)\n{\n    var result = await _genreService.GetGenreAsync(new GetGenreRequest {Id = id});\n\n    return Ok(result);\n}\n\n[HttpGet(\"{id:guid}/items\")]\npublic async Task<IActionResult> GetItemById(Guid id)\n{\n    var result = await _genreService.GetItemByGenreIdAsync(new GetGenreRequest {Id = id});\n\n    return Ok(result);\n}\n\n[HttpPost]\npublic async Task<IActionResult> Post(AddGenreRequest request)\n{\n    var result = await _genreService.AddGenreAsync(request);\n\n    return CreatedAtAction(nameof(GetById), new {id = result.GenreId}, null);\n}\n...\n```", "```cs\nusing System.Collections.Generic;\n...\n\nnamespace Catalog.API.Tests.Controllers\n{\n    public class ArtistControllerTests : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        public ArtistControllerTests(InMemoryApplicationFactory<Startup> factory)\n        {\n            _factory = factory;\n        }\n\n        private readonly InMemoryApplicationFactory<Startup> _factory;\n\n        [Theory]\n        [InlineData(\"/api/artist/\")]\n        public async Task smoke_test_on_items(string url)\n\n        {\n            var client = _factory.CreateClient();\n            var response = await client.GetAsync(url);\n\n            response.EnsureSuccessStatusCode();\n        }\n\n        [Theory]\n        [InlineData(\"/api/artist/?pageSize=1&pageIndex=0\", 1, 0)]\n        public async Task get_should_returns_paginated_data(string url, int pageSize, int pageIndex)\n\n        {\n            var client = _factory.CreateClient();\n            var response = await client.GetAsync(url);\n\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            var responseEntity =\n                JsonConvert.DeserializeObject<PaginatedItemResponseModel<GenreResponse>>(responseContent);\n\n            responseEntity.PageIndex.ShouldBe(pageIndex);\n            responseEntity.PageSize.ShouldBe(pageSize);\n            responseEntity.Data.Count().ShouldBe(pageSize);\n        }\n\n        [Theory]\n        [LoadData(\"artist\")]\n        public async Task get_by_id_should_return_right_artist(Artist request)\n        {\n            var client = _factory.CreateClient();\n            var response = await client.GetAsync($\"/api/artist/{request.ArtistId}\");\n\n            response.EnsureSuccessStatusCode();\n\n            var responseContent = await response.Content.ReadAsStringAsync();\n            var responseEntity = JsonConvert.DeserializeObject<Artist>(responseContent);\n\n            responseEntity.ArtistId.ShouldBe(request.ArtistId);\n        }\n  ...\n```", "```cs\n...\n        [Fact]\n        public async Task add_should_create_new_artist()\n        {\n            var addArtistRequest = new AddArtistRequest{ ArtistName = \"The Braze\" };\n\n            var client = _factory.CreateClient();\n            var httpContent = new StringContent(JsonConvert.SerializeObject(addArtistRequest), Encoding.UTF8,\n                \"application/json\");\n            var response = await client.PostAsync(\"/api/artist\", httpContent);\n\n            response.EnsureSuccessStatusCode();\n\n            var responseHeader = response.Headers.Location;\n\n            response.StatusCode.ShouldBe(HttpStatusCode.Created);\n            responseHeader.ToString().ShouldContain(\"/api/artist/\");\n        }\n    }\n}\n```"]