- en: Chapter 1. The Coin Collection Game – Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章. 收集硬币游戏 – 第 1 部分
- en: 'This chapter starts the first project on our list, which will be a fun collection
    game. Remember, it doesn''t matter if you''ve never used Unity before. We''ll
    go through everything necessary step by step. By the end of the next chapter,
    you''ll have pieced together a simple, but complete and functional, game. This
    is an important thing to achieve because you''ll get familiar with a start-to-end
    game development workflow. This chapter will demonstrate the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章开始我们列表中的第一个项目，这将是一个有趣的游戏收集游戏。记住，即使你以前从未使用过 Unity，也没有关系。我们将一步一步地完成所有必要的步骤。到下一章结束时，你将拼凑出一个简单但完整且功能齐全的游戏。这是实现的一个重要目标，因为你会熟悉从头到尾的游戏开发工作流程。本章将演示以下主题：
- en: Game design
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏设计
- en: Projects and folders
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目和文件夹
- en: Asset importing and configuration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产导入和配置
- en: Level design
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关卡设计
- en: Game objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 游戏对象
- en: Hierarchies
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 层级
- en: Game design
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏设计
- en: Let's make a coin collection game. Here, the player should control a character
    in the first-person mode, and he must wander the level, collecting all coins before
    a time limit runs out. If the timer runs out, the game is lost. On the other hand,
    if all coins are collected before the timer expires, the game is won. The first-person
    controls will use the default WASD keyboard setup, where *W* moves forward, *A*
    and *S* move left and right, and *D* walks backward. Head movement is controlled
    using the mouse, and coins are collected by simply walking into them. See *Figure
    1.1*, featuring the coin collection game in action in the Unity Editor. The great
    benefit in making this game is that it demonstrates all the core Unity features
    together, and we don't need to rely on any external software to make assets, such
    as textures, meshes, and materials.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们制作一个收集硬币的游戏。在这里，玩家应该以第一人称模式控制一个角色，他必须在时间限制结束前在关卡中收集所有硬币。如果计时器耗尽，游戏失败。另一方面，如果在计时器到期前收集了所有硬币，游戏胜利。第一人称控制将使用默认的
    WASD 键盘布局，其中 *W* 向前移动，*A* 和 *S* 向左和向右移动，*D* 向后移动。头部移动由鼠标控制，硬币通过简单地走进它们来收集。见 *图
    1.1*，展示了在 Unity 编辑器中实际运行的收集硬币游戏。制作这个游戏的巨大好处是它展示了所有核心的 Unity 功能，我们不需要依赖任何外部软件来制作资产，例如纹理、网格和材质。
- en: '![Game design](img/B05118_01_01.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![游戏设计](img/B05118_01_01.jpg)'
- en: 'Figure 1.1: Preparing for a coin collection game (the completed game)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：准备收集硬币的游戏（完成后的游戏）
- en: Note
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The completed `CollectionGame` project, as discussed in this chapter and the
    next, can be found in the book companion files in the `Chapter01/CollectionGame`
    folder.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章和下一章中讨论的完成后的 `CollectionGame` 项目可以在书籍配套文件中的 `Chapter01/CollectionGame` 文件夹中找到。
- en: Getting started – Unity and projects
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门 – Unity 和项目
- en: 'Every time you want to make a new Unity game, including coin collection games,
    you''ll need to create **New Project**. Generally speaking, Unity uses the term
    **Project** to mean a **Game**. There are two main ways to make a new project,
    and it really doesn''t matter which one you choose because both end up in the
    same place. If you''re already in the Unity interface, looking at an existing
    scene or level, you can select **File** | **New Project** from the application
    menu. See *Figure 1.2*. It may ask if you want to save changes to the currently
    opened project and you should choose either **Yes** or **No**, depending on what
    you need. After selecting the **New Project** option, Unity leads you to the project
    creation wizard:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你想制作一个新的 Unity 游戏，包括收集硬币游戏，你都需要创建**新项目**。一般来说，Unity 使用术语**项目**来表示**游戏**。制作新项目有两种主要方式，实际上你选择哪一种都无关紧要，因为两者最终都会到达同一个地方。如果你已经在
    Unity 界面中，正在查看现有的场景或关卡，你可以从应用程序菜单中选择**文件** | **新项目**。见 *图 1.2*。它可能会询问你是否想要保存当前打开项目的更改，你应该根据需要选择**是**或**否**。选择**新项目**选项后，Unity
    会带你进入项目创建向导：
- en: '![Getting started – Unity and projects](img/B05118_01_02.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![入门 – Unity 和项目](img/B05118_01_02.jpg)'
- en: 'Figure 1.2: Creating a new project via the main menu'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：通过主菜单创建新项目
- en: 'Alternatively, if you''ve just started Unity for the first time, you''ll probably
    begin at the welcome dialog. See *Figure 1.3*. From here, you can access the new
    project creation wizard by choosing the **NEW PROJECT** button:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果你是第一次使用 Unity，你可能会从欢迎对话框开始。见 *图 1.3*。从这里，你可以通过选择**新项目**按钮来访问新项目创建向导：
- en: '![Getting started – Unity and projects](img/B05118_01_03.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![入门 – Unity 和项目](img/B05118_01_03.jpg)'
- en: 'Figure 1.3: The Unity welcome screen'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：Unity 欢迎界面
- en: 'On reaching the **NEW PROJECT** creation wizard, Unity can generate a new project
    for you on the basis of some basic settings. Simply fill in the name of your project
    (such as `CollectionGame`), and select a folder on your computer to contain the
    project files that will be generated automatically. Finally, click on the **3D**
    button to indicate that we''re going to create a 3D game, as opposed to **2D**,
    and then click on the **Create project** button to complete the project generation
    process. See *Figure 1.4*:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当达到 **新建项目** 向导时，Unity 可以根据一些基本设置为您生成一个新项目。只需填写您项目的名称（例如 `CollectionGame`），然后选择一个文件夹来包含将自动生成的项目文件。最后，点击
    **3D** 按钮以表示我们将创建一个 3D 游戏，而不是 **2D** 游戏，然后点击 **创建项目** 按钮以完成项目生成过程。见图 1.4*：
- en: '![Getting started – Unity and projects](img/B05118_01_04.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![入门 – Unity 和项目](img/B05118_01_04.jpg)'
- en: 'Figure 1.4: Creating a new project'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：创建新项目
- en: Projects and project folders
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目和项目文件夹
- en: 'Unity has now created a blank, new, and empty project. This represents the
    starting point for any game development project and is the place where development
    begins. The newly created project contains nothing initially: no meshes, textures,
    or any other **Assets**. You can confirm this by simply checking the **Project**
    panel area at the bottom of the editor interface. This panel displays the complete
    contents of the project folder, which corresponds to an actual folder on your
    local drive created earlier by the project wizard. This folder should be empty.
    See *Figure 1.5*. This panel will later be populated with more items, all of which
    we can use to build a game.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 现在创建了一个空白、新且空的项目。这代表任何游戏开发项目的起点，也是开发开始的地方。新创建的项目最初不包含任何内容：没有网格、纹理或任何其他
    **资源**。您可以通过简单地检查编辑器界面底部的 **项目** 面板区域来确认这一点。此面板显示项目文件夹的完整内容，对应于项目向导之前在您的本地驱动器上创建的实际文件夹。此文件夹应该是空的。见图
    1.5*。此面板将随后填充更多项目，我们都可以使用这些项目来构建游戏。
- en: '![Projects and project folders](img/B05118_01_05.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![项目和项目文件夹](img/B05118_01_05.jpg)'
- en: 'Figure 1.5: The Unity project panel docked at the bottom of the interface'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Unity 项目面板停靠在界面底部
- en: Note
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If your interface looks radically different from *Figure 1.5*, in terms of its
    layout and arrangement, then you can reset the UI layout to its defaults. To do
    this, click on the **Layout** drop-down menu from the top-right corner of the
    editor interface, and choose **Default**. See *Figure 1.6*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的界面在布局和排列方面与 *图 1.5* 有显著不同，那么您可以重置 UI 布局为默认设置。为此，请从编辑器界面的右上角点击 **布局** 下拉菜单，并选择
    **默认**。见图 1.6*。
- en: '![Projects and project folders](img/B05118_01_06.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![项目和项目文件夹](img/B05118_01_06.jpg)'
- en: 'Figure 1.6: Switching to the default interface layout'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：切换到默认界面布局
- en: 'You can view the contents of your project folder directly via either Windows
    Explorer or Mac Finder, by right-clicking the mouse in the **Project** panel from
    the **Unity Editor** to reveal a context menu, and from there, choose the **Show
    in Explorer** (Windows) or **Reveal in Finder** (Mac) option. See *Figure 1.7*:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接通过 Windows 资源管理器或 Mac Finder 查看项目文件夹的内容，通过在 **Unity 编辑器** 的 **项目** 面板中右键单击鼠标以显示上下文菜单，然后从那里选择
    **在资源管理器中显示**（Windows）或 **在 Finder 中显示**（Mac）选项。见图 1.7：
- en: '![Projects and project folders](img/B05118_01_07.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![项目和项目文件夹](img/B05118_01_07.jpg)'
- en: 'Figure 1.7: Displaying the project folder via the Project panel'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：通过项目面板显示项目文件夹
- en: Clicking on **Show in Explorer** displays the folder contents in the default
    system file browser. See *Figure 1.8*. This view is useful to inspect files, count
    them, or back them up. However, don't change the folder contents manually this
    way via Explorer or Finder. Specifically, don't move, rename, or delete files
    from here, because doing so can corrupt your Unity project irretrievably. Instead,
    delete and move files where needed within the **Project** panel in the **Unity
    Editor**. This way, Unity updates its metadata as appropriate, ensuring that your
    project continues to work properly.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **在资源管理器中显示** 将文件夹内容显示在默认的系统文件浏览器中。见图 1.8*。此视图用于检查文件、计数或备份文件。然而，请不要通过这种方式手动更改文件夹内容，即通过资源管理器或
    Finder。具体来说，不要从这里移动、重命名或删除文件，因为这样做可能会永久损坏您的 Unity 项目。相反，在 **Unity 编辑器** 的 **项目**
    面板中需要的地方删除和移动文件。这样，Unity 会根据需要更新其元数据，确保您的项目继续正常工作。
- en: '![Projects and project folders](img/B05118_01_08.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![项目和项目文件夹](img/B05118_01_08.jpg)'
- en: 'Figure 1.8: Viewing the Project panel from the OS file browser'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：从操作系统文件浏览器查看项目面板
- en: Note
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Viewing the project folder in the OS file browser will display additional files
    and folders not visible in the **Project** panel, such as `Library` and `ProjectSettings`,
    and maybe a `Temp` folder. Together, these are known as the project metadata.
    This is not directly a part of your project per se, but contains additional settings
    and preferences that Unity needs to work properly. These folders and their files
    should not be edited or changed.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在操作系统文件浏览器中查看项目文件夹将显示在 **项目** 面板中不可见的额外文件和文件夹，例如 `Library` 和 `ProjectSettings`，以及可能的一个
    `Temp` 文件夹。这些一起被称为项目元数据。这本身并不是你的项目的一部分，但它包含 Unity 正常工作所需的额外设置和首选项。这些文件夹及其文件不应被编辑或更改。
- en: Importing assets
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入资产
- en: 'Assets are the raw materials for games—the building blocks from which they''re
    made. `Assets` include meshes (or 3D models), such as characters, props, trees,
    houses, and more: textures, which are image files such as JPEGs and PNGs (these
    determine how the surface of a mesh should look); music and sound effects to enhance
    the realism and atmosphere of your game, and finally, scenes, which are 3D spaces
    or worlds where meshes, textures, sounds, and music live, exist, and work together
    holistically as part of a single system. Thus, games cannot exist without assets—they
    would otherwise look completely empty and lifeless. For this reason, we''ll need
    assets to make the coin collection game we''re working toward. After all, we''ll
    need an environment to walk around and coins to collect!'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 资产是游戏的原材料——它们是由这些材料构建的基石。`Assets` 包括网格（或 3D 模型），例如角色、道具、树木、房屋等；纹理，这些是图像文件，如
    JPEG 和 PNG（这些决定了网格表面的外观）；音乐和音效以增强游戏的真实感和氛围，最后是场景，这些是网格、纹理、声音和音乐存在并作为一个单一系统整体协同工作的
    3D 空间或世界。因此，没有资产的游戏无法存在——否则它们将看起来完全空旷和毫无生气。因此，我们需要资产来制作我们正在努力制作的收集硬币游戏。毕竟，我们需要一个可以行走的环境和可以收集的硬币！
- en: 'Unity, however, is a *game engine* and not an *asset creation* program. This
    means that assets, such as characters and props, are typically made first by artists
    in external, third-party software. From here, they are exported and transferred
    ready-made to Unity, and Unity is responsible only for bringing these assets to
    life in a coherent game that can be played. Third-party asset creation programs
    include **Blender** (which is free of charge), **Maya** or **3DS** **Max** to
    make 3D models, **Photoshop** or **GIMP** (which is free of charge) to create
    textures, and **Audacity** (which is free of cost) to generate audio. There are
    plenty of other options too. The details of these programs are beyond the scope
    of this book. In any case, Unity assumes that you already have assets ready to
    import to build a game. For the coin collection game, we''ll use assets that ship
    with Unity. So let''s import these to our project. To do this, select **Assets**
    | **Import Package** from the application menu. Then select **Characters**, **ParticleSystems**,
    **Environment**, and **Prototyping**. See *Figure 1.9*:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Unity 是一个 *游戏引擎*，而不是 *资产创建* 程序。这意味着像角色和道具这样的资产通常首先由艺术家在外部第三方软件中制作。然后，它们被导出并准备好转移到
    Unity 中，Unity 负责将这些资产在可以玩的游戏中生动呈现。第三方资产创建程序包括 **Blender**（免费），**Maya** 或 **3DS
    Max** 用于制作 3D 模型，**Photoshop** 或 **GIMP**（免费）用于创建纹理，以及 **Audacity**（免费）用于生成音频。还有许多其他选项。这些程序的详细信息超出了本书的范围。无论如何，Unity
    假设你已经有了可以导入以构建游戏的资产。对于收集硬币的游戏，我们将使用 Unity 附带资产。所以让我们将这些导入到我们的项目中。为此，从应用程序菜单中选择
    **Assets** | **Import Package**。然后选择 **Characters**、**ParticleSystems**、**Environment**
    和 **Prototyping**。参见 *图 1.9*：
- en: '![Importing assets](img/B05118_01_09.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![导入资产](img/B05118_01_09.jpg)'
- en: 'Figure 1.9: Importing assets via the Import Package menu'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：通过导入包菜单导入资产
- en: 'Each time you import a package from the menu, you''ll be presented with an
    **Import** dialog. Simply leave all settings at their defaults, and click on **Import**.
    See *Figure 1.10*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你从菜单中导入一个包时，都会弹出一个 **导入** 对话框。只需保留所有设置在默认值，然后点击 **导入**。参见 *图 1.10*：
- en: '![Importing assets](img/B05118_01_10.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![导入资产](img/B05118_01_10.jpg)'
- en: 'Figure 1.10: Choosing Assets to import'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：选择要导入的资产
- en: 'By default, Unity decompresses all files from the package (a library of assets)
    into the current project. After importing, lots of different assets and data will
    have been added to the **Project**, ready for use. These files are copies of the
    originals. So any changes made to the imported files will not affect or invalidate
    the originals, which Unity maintains internally. The files include models, sounds,
    textures, and more. These are listed in the **Unity Editor** from the **Project**
    panel. See the following screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Unity将包（资源库）中的所有文件解压缩到当前项目中。导入后，许多不同的资源和数据将被添加到**项目**中，准备使用。这些文件是原始文件的副本。因此，对导入文件所做的任何更改都不会影响或使原始文件无效，Unity会内部维护这些原始文件。文件包括模型、声音、纹理等。这些在**Unity编辑器**的**项目**面板中列出。参见以下截图：
- en: '![Importing assets](img/B05118_01_11.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![导入资源](img/B05118_01_11.jpg)'
- en: 'Figure 1.11: Browsing imported assets from the Project panel'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.11：从项目面板浏览导入的资源
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: When selecting **Assets** | **Import** from the application menu, if you don't
    see all, or any, asset packages listed, you can download and install them separately
    from the Unity website at [https://unity3d.com/](https://unity3d.com/). From the
    downloads page, choose the **Additional Downloads** option, and then select the
    **Standard Assets** package. See *Figure 1.12*.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当您从应用程序菜单中选择**资源** | **导入**时，如果您没有看到所有或任何资源包列出，您可以从Unity网站[https://unity3d.com/](https://unity3d.com/)分别下载和安装它们。从下载页面，选择**附加下载**选项，然后选择**标准资源**包。参见*图1.12*。
- en: '![Importing assets](img/B05118_01_12.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![导入资源](img/B05118_01_12.jpg)'
- en: 'Figure 1.12: Downloading the Standard Assets package'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.12：下载标准资源包
- en: The imported assets don't exist yet in our game. They don't appear on screen,
    and they won't do anything yet! Rather, they're simply added to the **Project**
    panel, which behaves as a library or repository of assets, from which we can pick
    and choose to build up a game. The assets imported thus far are built-in into
    Unity and we'll be continually using them in subsequent sections to make a functional
    coin collection game. To get more information about each asset, you can select
    the asset by clicking on it with the mouse, and asset-specific details will be
    shown on the right-hand side of the **Unity Editor** in the **Inspector**. The
    **Inspector** is a property sheet editor that appears on the right-hand side of
    the interface. It is context-sensitive and always changes to display properties
    for the selected object. See *Figure 1.13*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 导入的资源在我们的游戏中还不存在。它们不会出现在屏幕上，也不会做任何事情！相反，它们只是被添加到**项目**面板中，该面板作为一个资源库或存储库，我们可以从中挑选和选择来构建游戏。到目前为止导入的资源已内置到Unity中，我们将在后续部分中不断使用它们来制作一个功能性的收集游戏。要获取每个资源的更多信息，您可以单击鼠标选择资源，然后在**Unity编辑器**的**检查器**右侧显示资源特定详细信息。**检查器**是一个属性表编辑器，它出现在界面的右侧。它是上下文相关的，并且始终更改以显示选中对象的属性。参见*图1.13*。
- en: '![Importing assets](img/B05118_01_13.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![导入资源](img/B05118_01_13.jpg)'
- en: 'Figure 1.13: The Inspector displays all the properties for the currently selected
    object'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.13：检查器显示当前选中对象的全部属性
- en: Starting a level
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始一个关卡
- en: We've now created a Unity project and imported a large library of assets via
    the **Unity Standard Asset** package, including architectural meshes for walls,
    floors, ceilings, and stairs. This means that we're now ready to build our first
    level using these assets! Remember, in Unity, a scene means a level. The word
    scene and level can be used interchangeably here. They refer simply to a 3D space,
    that is, the space-time of the game world—the place where things exist. Since
    all games happen in space and time, we'll need a scene for the coin collection
    game. To create a new scene, select **File** | **New Scene** from the application
    menu, or press *Ctrl* + *N* on the keyboard. When you do this, a new and empty
    scene is created. You can see a visualization or preview of the scene via the
    **Scene** tab, which occupies the largest part of the Unity interface. See *Figure
    1.14*.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在创建了一个Unity项目，并通过**Unity标准资源**包导入了一个大型资源库，包括墙壁、地板、天花板和楼梯的建筑网格。这意味着我们现在可以使用这些资源来构建第一个关卡！记住，在Unity中，场景意味着关卡。这里的场景和关卡可以互换使用。它们仅仅指的是一个3D空间，即游戏世界的时空——事物存在的地方。由于所有游戏都发生在时空之中，我们需要一个场景来制作收集游戏。要创建一个新的场景，从应用程序菜单中选择**文件**
    | **新建场景**，或者按键盘上的*Ctrl* + *N*。当您这样做时，将创建一个新的空场景。您可以通过**场景**标签查看场景的可视化或预览，该标签占据了Unity界面的大部分区域。参见*图1.14*。
- en: '![Starting a level](img/B05118_01_14.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![开始一个关卡](img/B05118_01_14.jpg)'
- en: 'Figure 1.14: The Scene tab displays a preview of a 3D world'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.14：场景标签显示3D世界的预览
- en: Tip
  id: totrans-62
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: As shown in *Figure 1.14*, other tabs besides the scene are visible and available
    in Unity. These include a **Game** tab and an **Animator** tab; in some cases,
    there could be more as well. For now, we can ignore all the tabs except **Scene**.
    The **Scene** tab is designed for quick and easy previewing of a level during
    its construction.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如*图1.14*所示，在Unity中，除了场景标签之外，还有其他可见和可用的标签。这些包括**游戏**标签和**动画**标签；在某些情况下，可能还有更多。目前，我们可以忽略除了**场景**标签之外的所有标签。**场景**标签是为了在构建过程中快速轻松地预览一个关卡而设计的。
- en: 'Each new scene begins empty; well, almost empty. By default, each new scene
    begins with two objects. Specifically, a **Light** to illuminate any other objects
    that are added, and a **Camera** to display and render the contents of the scene
    from a specific vantage point. You can view a complete list of all the objects
    existing in the scene using the **Hierarchy** panel, which is docked to the left-hand
    side of the Unity interface. See *Figure 1.15*. This panel displays the name of
    every **GameObject** in the scene. In Unity, the word **GameObject** simply refers
    to a single, independent, and unique thing that lives within the scene, whether
    visible or not: meshes, lights, cameras, props, and more. Thus, the **Hierarchy**
    panel tells us about everything in the **Scene**.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新的场景开始时都是空的；嗯，几乎是这样。默认情况下，每个新的场景开始时包含两个对象。具体来说，一个**灯光**用于照亮添加的任何其他对象，一个**相机**用于从特定的视角显示和渲染场景的内容。您可以使用**层次结构**面板查看场景中存在的所有对象的完整列表，该面板停靠在Unity界面的左侧。见*图1.15*。此面板显示场景中每个**GameObject**的名称。在Unity中，**GameObject**一词简单地指代场景中存在的单个、独立且独特的事物，无论是否可见：网格、灯光、相机、道具等等。因此，**层次结构**面板告诉我们关于**场景**中的所有内容。
- en: '![Starting a level](img/B05118_01_15.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![开始一个关卡](img/B05118_01_15.jpg)'
- en: 'Figure 1.15: The Hierarchy panel'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.15：层次结构面板
- en: Tip
  id: totrans-67
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can even select objects in the scene by clicking on their name in the **Hierarchy**
    panel.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您甚至可以通过在**层次结构**面板中点击它们的名称来选择场景中的对象。
- en: Next, let's add a floor to the scene. After all, the player needs something
    to stand on! We could build a floor mesh from scratch using third-party modeling
    software such as Maya, 3DS Max, or Blender. However, the Unity Standard Asset
    package, which was imported earlier, contains floor meshes that we can use. This
    is very convenient. These meshes are part of the `Prototyping` package. To access
    them via the **Project** panel, open the `Standard Assets` folder by double-clicking
    it, and then access the `Prototyping` | `Prefabs` folder. From here, you can select
    objects and preview them from the **Inspector**. See *Figure 1.16*.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们向场景中添加一个地板。毕竟，玩家需要站立的地方！我们可以使用Maya、3DS Max或Blender等第三方建模软件从头开始构建地板网格。然而，之前导入的Unity标准资产包中包含我们可以使用的地板网格。这非常方便。这些网格是`原型设计`包的一部分。要通过**项目**面板访问它们，双击`Standard
    Assets`文件夹，然后访问`原型设计` | `预制体`文件夹。从这里，您可以选择对象并在**检查器**中预览它们。见*图1.16*。
- en: Tip
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You could also quickly add a floor to the scene by choosing **GameObject** |
    **3D Object** | **Plane** from the application menu. However, this just adds a
    dull, grey floor, which isn't very interesting. Of course, you could change its
    appearance. As we'll see later, Unity lets you do this. However, for this tutorial,
    we'll use a specifically modeled floor mesh via the `Standard Assets` package
    from the **Project** panel.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过从应用程序菜单中选择**GameObject** | **3D Object** | **Plane**来快速向场景中添加一个地板。然而，这仅仅添加了一个单调的灰色地板，并不很有趣。当然，您可以改变它的外观。正如我们稍后将要看到的，Unity允许您这样做。然而，对于这个教程，我们将通过**项目**面板中的`Standard
    Assets`包使用一个特别建模的地板网格。
- en: '![Starting a level](img/B05118_01_16.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![开始一个关卡](img/B05118_01_16.jpg)'
- en: 'Figure 1.16: The Standard Assets/Prototyping package contains many meshes for
    quick scene building'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.16：Standard Assets/原型设计包包含许多用于快速场景构建的网格
- en: 'The mesh named `FloorPrototype64x01x64` (as shown in *Figure 1.16*) is suitable
    as a floor. To add this mesh to the scene, simply drag and drop the object from
    the **Project** panel to the **Scene** view and then release the mouse. See *Figure
    1.17*. When you do this, notice how the **Scene** view changes to display the
    newly added mesh within the 3D space, and the mesh name also appears as a listing
    in the **Hierarchy** panel:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为`FloorPrototype64x01x64`（如图1.16所示）的网格适合作为地面。要将此网格添加到场景中，只需将对象从**项目**面板拖放到**场景**视图中，然后释放鼠标。见图1.17。当你这样做时，请注意**场景**视图如何改变以显示新添加的网格在3D空间中的位置，并且网格名称也作为列表出现在**层次结构**面板中：
- en: '![Starting a level](img/B05118_01_17.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![开始一个关卡](img/B05118_01_17.jpg)'
- en: 'Figure 1.17: Dragging and dropping mesh assets from the Project panel to the
    Scene view will add them to the scene'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.17：将网格资源从项目面板拖放到场景视图中，将它们添加到场景中
- en: 'The floor mesh asset from the **Project** panel has now been instantiated as
    a **GameObject** in the scene. This means that a copy or clone of the mesh asset,
    based on the original in the **Project** panel, has been added to the scene as
    a separate **GameObject**. The **Instance** (or **GameObject**) of the floor in
    the scene still depends on the floor asset in the **Project** panel. However,
    the asset does not depend on the instance. This means that by deleting the floor
    in the scene, you will not delete the asset. However, if you delete the asset,
    you will invalidate the **GameObject**. You can also create more floors in **Scene**
    if you want by dragging and dropping the floor asset many times from the **Project**
    panel to the **Scene** view. Each time, a new instance of the floor is created
    in the **Scene** as a separate and unique **GameObject**, although all the added
    instances will still depend on the single floor asset in the **Project** panel.
    See *Figure 1.18*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 来自**项目**面板的地面网格资源现在已作为场景中的**GameObject**实例化。这意味着基于**项目**面板中的原始网格资产的一个副本或克隆已作为单独的**GameObject**添加到场景中。场景中地面的**实例**（或**GameObject**）仍然依赖于**项目**面板中的地面资产。然而，资产并不依赖于实例。这意味着通过删除场景中的地面，你不会删除资产。但是，如果你删除了资产，你将使**GameObject**无效。如果你想要在**场景**中创建更多地面，也可以通过多次从**项目**面板拖放地面资产到**场景**视图中来实现。每次，场景中都会创建一个新的地面实例作为单独且唯一的**GameObject**，尽管所有添加的实例仍然依赖于**项目**面板中的单个地面资产。见图1.18：
- en: '![Starting a level](img/B05118_01_18.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![开始一个关卡](img/B05118_01_18.jpg)'
- en: 'Figure 1.18: Adding multiple instances of the floor mesh to the scene'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.18：将多个地面网格实例添加到场景中
- en: 'We don''t actually need the duplicate floor pieces, however. So let''s delete
    them. Just click on the duplicates in the **Scene** view and then press *Delete*
    on the keyboard to remove them. Remember, you can also select and delete objects
    by clicking on their name in the **Hierarchy** panel and pressing *Delete*. Either
    way, this leaves us with a single floor piece and a solid start to building our
    scene. One remaining problem, though, concerns the floor and its name. By looking
    carefully in the **Hierarchy** panel, we can see that the floor name is `FloorPrototype64x01x64`.
    This name is long, obtuse, and unwieldy. We should change it to something more
    manageable and meaningful. This is not technically essential but is good practice
    to keep our work clean and organized. There are many ways to rename an object.
    One way is to first select it and then enter a new name in the name field in the
    **Object Inspector**. I''ll rename it `WorldFloor`. See *Figure 1.19*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上我们并不需要重复的地面块。所以让我们删除它们。只需在**场景**视图中单击重复项，然后在键盘上按*删除*键来删除它们。记住，你还可以通过在**层次结构**面板中单击它们的名称并按*删除*键来选择和删除对象。无论如何，这都让我们只剩下一个地面块，并且为构建我们的场景提供了一个坚实的开始。然而，还有一个问题，那就是地面及其名称。通过仔细查看**层次结构**面板，我们可以看到地面的名称是`FloorPrototype64x01x64`。这个名字很长、晦涩、难以操作。我们应该将其更改为更易于管理和有意义的名称。这虽然在技术上不是必需的，但保持我们的工作整洁和有序是良好的实践。有许多方法可以重命名一个对象。一种方法是在**对象检查器**中的名称字段中首先选择它并输入新名称。我将将其重命名为`WorldFloor`。见图1.19：
- en: '![Starting a level](img/B05118_01_19.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![开始一个关卡](img/B05118_01_19.jpg)'
- en: 'Figure 1.19: Renaming the floor mesh'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.19：重命名地面网格
- en: Transformations and navigation
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变换和导航
- en: 'A scene with a floor mesh has been established, but this alone is uninteresting.
    We need to add more, such as buildings, stairs, columns, and perhaps more floor
    pieces. Otherwise, there would be no world for the player to explore. Before building
    on what we''ve got, however, let''s make sure that the existing floor piece is
    centered at the world origin. Every point and location within a scene is uniquely
    identified by a coordinate, measured as an (*X*, *Y*, *Z*) offset from the world
    center (**origin**). The current position for the selected object is always visible
    from the **Object Inspector**. In fact, the **Position**, **Rotation**, and **Scale**
    of an object are grouped together under a category (**component**) called **Transform**.
    **Position** indicates how far an object should be moved in three axes from the
    world center. **Rotation** indicates how much an object should be turned or rotated
    around its central axes. **Scale** indicates how much an object should be shrunk
    or expanded to smaller or larger sizes. A default **Scale** of one means that
    an object should appear at normal size, two means twice the size, and 0.5 means
    half the size, and so on. Together, the **Position**, **Rotation** and **Scale**
    of an object constitute its transformation. To change the position of the selected
    object, you can simply type new values in the **X**, **Y**, and **Z** fields for
    **Position**. To move an object to the world center, simply enter (`0`, `0`, and
    `0`), as shown in *Figure 1.20*:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 已经建立了一个带有地板网格的场景，但仅此而已并不有趣。我们需要添加更多内容，例如建筑、楼梯、柱子，也许还有更多的楼层部件。否则，玩家将没有世界可以探索。然而，在我们继续构建之前，让我们确保现有的楼层部件已经居中于世界原点。场景内的每个点和位置都由一个坐标唯一标识，该坐标是从世界中心（**原点**）测量的（*X*，*Y*，*Z*）偏移量。所选对象的当前位置始终可以从**对象检查器**中看到。实际上，对象的**位置**、**旋转**和**缩放**被组合在一起，在称为**变换**的（**组件**）类别下。**位置**表示对象应从世界中心沿三个轴移动多远。**旋转**表示对象应围绕其中心轴旋转或旋转多少。**缩放**表示对象应缩小或放大到更小或更大的尺寸。默认的**缩放**为
    1 表示对象应以正常大小出现，2 表示两倍大小，0.5 表示一半大小，依此类推。对象的位置、旋转和缩放共同构成了其变换。要更改所选对象的位置，您只需在**位置**的**X**、**Y**和**Z**字段中输入新值。要将对象移动到世界中心，只需输入（`0`，`0`，`0`），如*图
    1.20*所示：
- en: '![Transformations and navigation](img/B05118_01_20.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_20.jpg)'
- en: 'Figure 1.20: Centering an object to the world origin'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20：将对象居中到世界原点
- en: 'Setting the position of an object, as we''ve done here, by typing numerical
    values is acceptable and appropriate for the specifying of exact positions. However,
    it''s often more intuitive to move objects using mouse-based controls. To do this,
    let''s add a second floor piece and position it away from the first instance.
    Drag and drop a floor piece from the **Project** panel in **Scene** to create
    a second floor **GameObject**. Then click on the new floor piece to select it
    and switch to the **Translate** tool. To do this, press *W* on the keyboard or
    click on the translate tool icon from the toolbar at the top of the editor interface.
    The translate tool allows you to reposition objects in **Scene**. See *Figure
    1.21*:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 通过输入数值设置对象的位置，就像我们在这里所做的那样，是可接受且适合指定精确位置的。然而，使用基于鼠标的控制来移动对象通常更直观。为此，让我们添加一个第二层的部件并将其放置在第一个实例之外。从**项目**面板在**场景**中拖动并放置一个楼层部件以创建第二个楼层**游戏对象**。然后点击新的楼层部件以选择它并切换到**平移**工具。为此，按键盘上的*W*键或点击编辑器界面顶部的工具栏中的平移工具图标。平移工具允许你在**场景**中重新定位对象。参见*图
    1.21*：
- en: '![Transformations and navigation](img/B05118_01_21.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_21.jpg)'
- en: 'Figure 1.21: Accessing the translate tool'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21：访问翻译工具
- en: 'When the translate tool is active and an object is selected, a **Gizmo** appears
    centered on the object (three colored axes visible in the **Scene** tab). The
    translate Gizmo appears as three colored perpendicular axes: red, green, and blue
    corresponding to *X*, *Y*, and *Z* respectively. To move an object, hover your
    cursor over one of the three axes (or planes between axes), and then click and
    hold the mouse while moving it to slide the object in that direction. You can
    repeat this process as often as needed to ensure that your objects are positioned
    where you need them to be. Use the translate tool to move the second floor piece
    away from the first. See *Figure 1.22*:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当平移工具处于活动状态且选中了一个对象时，一个** Gizmo** 将出现在对象中心（在**场景**选项卡中可见三个彩色轴）。平移Gizmo显示为三个彩色的垂直轴：红色、绿色和蓝色分别对应于*X*、*Y*和*Z*。要移动一个对象，将光标悬停在三个轴之一（或轴之间的平面）上，然后点击并按住鼠标，同时移动鼠标以在该方向上滑动对象。您可以根据需要重复此过程，以确保对象位于所需的位置。使用平移工具将二楼部件移离一楼。参见*图1.22*：
- en: '![Transformations and navigation](img/B05118_01_22.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_22.jpg)'
- en: 'Figure 1.22: Translate an object using the translate Gizmo'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.22：使用平移Gizmo平移对象
- en: 'You can also rotate and scale objects using the mouse, as with translate. Press
    *E* to access the rotate tool or *R* to access the scale tool, or you can activate
    these tools using their respective toolbar icons from the top of the editor. When
    these tools are activated, a Gizmo appears centered on the object, and you can
    click and drag the mouse over each specific axis to rotate or scale objects as
    needed. See *Figure 1.23*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以像平移一样使用鼠标旋转和缩放对象。按*E*键访问旋转工具或按*R*键访问缩放工具，或者您可以从编辑器顶部的工具栏图标激活这些工具。当这些工具被激活时，一个Gizmo将出现在对象中心，您可以通过点击并拖动鼠标在每个特定的轴上旋转或缩放对象，以满足需要。参见*图1.23*：
- en: '![Transformations and navigation](img/B05118_01_23.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_23.jpg)'
- en: 'Figure 1.23: Accessing the rotate and scale tools'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.23：访问旋转和缩放工具
- en: Being able to translate, rotate, and scale objects quickly through mouse and
    keyboard combinations is very important when working in Unity. For this reason,
    make using the keyboard shortcuts a habit as opposed to accessing the tools continually
    from the toolbar. However, in addition to moving, rotating, and scaling objects,
    you'll frequently need to move around yourself in the **Scene** view in order
    to see the world from different positions, angles, and perspectives. This means
    that you'll frequently need to reposition the scene preview camera in the world.
    You'll want to zoom in and zoom out of the world to get a better view of objects
    and change your viewing angle to see how objects align and fit together properly.
    To do this, you'll need to make extensive use of both the keyboard and mouse together.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中工作时，能够通过鼠标和键盘的组合快速进行平移、旋转和缩放对象非常重要。因此，将使用键盘快捷键养成习惯，而不是不断地从工具栏中访问工具。然而，除了移动、旋转和缩放对象之外，您还经常需要在**场景**视图中移动自己，以便从不同的位置、角度和视角查看世界。这意味着您将经常需要重新定位场景预览相机在世界中的位置。您可能需要放大和缩小世界，以更好地查看对象并更改您的观看角度，以查看对象如何正确对齐和配合。为此，您需要同时大量使用键盘和鼠标。
- en: 'To zoom closer or further from the object you''re looking at, simply scroll
    the mouse wheel up or down—up zooms in and down zooms out. See *Figure 1.24*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要从您正在查看的对象更近或更远地缩放，只需上下滚动鼠标滚轮——向上缩放，向下缩放。参见*图1.24*：
- en: '![Transformations and navigation](img/B05118_01_24.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_24.jpg)'
- en: 'Figure 1.24: Zooming in and out'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.24：缩放
- en: To pan the **Scene** view left or right, or up or down, hold down the middle
    mouse button while moving the mouse in the appropriate direction. Alternatively,
    you can access the pan tool from the application toolbar (or press *Q* on the
    keyboard) and then simply click and drag in the **Scene** view while the tool
    is active. Pan does not zoom in or out; it simply slides the camera left and right,
    or up and down.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要在**场景**视图中左右或上下平移，请按住鼠标中键，同时将鼠标移动到适当的方向。或者，您可以从应用程序工具栏中访问平移工具（或按键盘上的*Q*键），然后当工具处于活动状态时，在**场景**视图中单击并拖动。平移不会缩放或放大；它只是将相机左右或上下滑动。
- en: '![Transformations and navigation](img/B05118_01_25.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_25.jpg)'
- en: 'Figure 1.25: Accessing the Pan tool'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.25：访问平移工具
- en: 'Sometimes, while building levels, you''ll lose sight entirely of the object
    that you need. For example, your viewport camera could be focusing on a completely
    different place from the object you really want to click or see. In this case,
    you''ll often want to shift the viewport camera automatically in order to focus
    on that specific object. Specifically, you''ll want to reposition and rotate the
    viewport as necessary to bring a desired object to the center of the view. To
    do this automatically, select the object to focus on (or frame) by clicking on
    its name from the **Hierarchy** panel. Then, press the *F* key on the keyboard.
    Alternatively, you can double-click its name in the **Hierarchy** panel. See *Figure
    1.26*:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，在构建关卡时，你可能会完全看不到你需要的对象。例如，你的视口相机可能正聚焦在一个与你要点击或查看的对象完全不同的地方。在这种情况下，你通常会想要自动调整视口相机以聚焦于那个特定的对象。具体来说，你需要根据需要重新定位和旋转视口，将所需的对象移至视图中心。为此，通过在**层次**面板中点击其名称来选择要聚焦的对象（或框架）。然后，按键盘上的
    *F* 键。或者，你也可以在**层次**面板中双击其名称。见图 1.26：
- en: '![Transformations and navigation](img/B05118_01_26.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_26.jpg)'
- en: 'Figure 1.26: Framing a selected object'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26：框架选定的对象
- en: 'After framing an object, you''ll often want to *rotate around* it in order
    to quickly and easily view it from all important angles. To achieve this, hold
    down the *Alt* key on the keyboard while clicking and dragging the mouse to rotate
    the view. See *Figure 1.27*:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在框架一个对象之后，你通常会想要围绕它旋转，以便快速轻松地从所有重要的角度观察它。为了实现这一点，按住键盘上的 *Alt* 键，同时点击并拖动鼠标来旋转视图。见图
    1.27：
- en: '![Transformations and navigation](img/B05118_01_27.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_27.jpg)'
- en: 'Figure 1.27: Rotating around the framed object'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27：围绕框架对象旋转
- en: 'Lastly, it''s helpful to navigate a level in the **Scene** view using first-person
    controls, that is, controls that mimic how first-person games are played. This
    helps you experience the scene at a more personal and immersive level. To do this,
    hold down the right mouse button and (with the button depressed) use the WASD
    keys on the keyboard to control forward, backward, and strafing movement. Movement
    of the mouse controls head orientation. You can also hold down the *Shift* key
    while moving to increase movement speed. See *Figure 1.28*:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用第一人称控制导航**场景**视图是有帮助的，即模仿第一人称游戏如何玩控制的。这有助于你以更个人化和沉浸式的水平体验场景。为此，按住鼠标右键，并（在按钮按下时）使用键盘上的
    WASD 键来控制前进、后退和侧移。鼠标移动控制头部方向。你还可以在移动时按住 *Shift* 键以增加移动速度。见图 1.28：
- en: '![Transformations and navigation](img/B05118_01_28.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![变换和导航](img/B05118_01_28.jpg)'
- en: 'Figure 1.28: Using first-person controls'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28：使用第一人称控制
- en: The great thing about learning the versatile transformation and navigation controls
    is that, on understanding them, you can move and orient practically any object
    in any way, and you can move and view the world from almost any position and angle.
    Being able to do this is critically important to build quality levels quickly.
    All of these controls, along with some others that we'll soon see, will be used
    frequently throughout this book to create scenes and work in Unity generally.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 学习多功能的转换和导航控制的好处在于，一旦理解了它们，你就可以以任何方式移动和定位几乎任何对象，你还可以从几乎任何位置和角度移动和观察世界。能够做到这一点对于快速构建高质量关卡至关重要。所有这些控制，以及我们很快就会看到的其他一些控制，将在这本书的整个过程中被频繁使用，以创建场景并在
    Unity 中进行一般工作。
- en: Scene building
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 场景构建
- en: 'Now that we''ve seen how to transform objects and navigate the scene viewport
    successfully, let''s proceed to complete our first level for the coin collection
    game. Let''s separate the two floor meshes apart in space, leaving a gap between
    them that we''ll fix by creating a bridge, which the player will be able to cross,
    moving between the floor spaces like islands. We can use the translate tool (*W*)
    to move objects around. See *Figure 1.29*:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了如何成功转换对象和导航场景视口，让我们继续完成收集金币游戏的第一个关卡。让我们在空间中将两个地板网格分开，在它们之间留出一段间隙，我们将通过创建一座桥梁来修复这个间隙，玩家将能够穿越桥梁，在地板空间之间移动，就像岛屿一样。我们可以使用平移工具（*W*）来移动对象。见图
    1.29：
- en: '![Scene building](img/B05118_01_29.jpg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![场景构建](img/B05118_01_29.jpg)'
- en: 'Figure 1.29: Separating the floor meshes into islands'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29：将地板网格分开成岛屿
- en: Tip
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want to create more floor objects, you can use the method that we've
    seen already by dragging and dropping the mesh asset in the **Project** panel
    in the **Scene** viewport. Alternatively, you can duplicate the selected object
    in the viewport by pressing *Ctrl* + *D* on the keyboard. Both methods produce
    the same result.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想创建更多的楼层对象，你可以使用我们之前看到的方法，通过在**场景**视图中**项目**面板中拖放网格资产来实现。或者，你也可以通过在键盘上按*Ctrl*
    + *D*来在视图中复制选定的对象。这两种方法会产生相同的结果。
- en: 'Next, we''ll add some props and obstacles to the scene. Drag and drop some
    house objects onto the floor. The house object (`HousePrototype16x16x24`) is found
    in the `Assets` | `Standard Assets` | `Prototyping` | `Prefabs` folder. See *Figure
    1.30*:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向场景添加一些道具和障碍物。将一些房子对象拖放到地板上。房子对象（`HousePrototype16x16x24`）位于`Assets`
    | `Standard Assets` | `Prototyping` | `Prefabs`文件夹中。参见*图1.30*：
- en: '![Scene building](img/B05118_01_30.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![场景构建](img/B05118_01_30.jpg)'
- en: 'Figure 1.30: Adding house props to the scene'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.30：向场景添加房子道具
- en: On dragging and dropping the house in the scene, it may align to the floor nicely
    with the bottom against the floor, or it may not align like that. If it does,
    that's splendid and great luck! However, we shouldn't rely on luck every time
    because we're professional game developers! Thankfully, we can make any two mesh
    objects align easily in Unity using vertex snapping. This feature works by forcing
    two objects into positional alignment within the scene by overlapping their vertices
    at a specific and common point.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中拖放房子时，它可能很好地与地板对齐，底部紧贴地板，也可能不会这样对齐。如果它这样对齐，那真是太棒了，运气真好！然而，我们不应该每次都依赖运气，因为我们专业的游戏开发者！幸运的是，我们可以使用顶点捕捉在Unity中轻松地将任何两个网格对象对齐。该功能通过在场景中将两个对象的位置对齐，并在特定和公共点上重叠它们的顶点来实现。
- en: For example, consider *Figure 1.31*. Here, a house object hovers awkwardly above
    the floor and we naturally want it to align level with the floor and perhaps over
    to the floor corner. To achieve this, start by selecting the house object (click
    on it or select it from the **Hierarchy** panel). The object to be selected is
    the one that *should move* to align and not the destination (which is the floor),
    which should remain in place.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑*图1.31*。在这里，一个房子对象尴尬地悬浮在地板上方，我们自然希望它与地板对齐，并且可能对齐到地板的角落。为了实现这一点，首先选择房子对象（点击它或从**层次结构**面板中选择它）。要选择的对象是应该*移动*以对齐的对象，而不是目的地（即地板），它应该保持原位。
- en: '![Scene building](img/B05118_01_31.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![场景构建](img/B05118_01_31.jpg)'
- en: 'Figure 1.31: Misaligned objects can be snapped into place with Vertex Snapping'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.31：使用顶点捕捉将未对齐的对象对齐到位置
- en: 'Next, activate the translate tool (*W*) and hold down the *V* key for vertex
    snapping. With *V* held down, move the cursor around and see how the Gizmo cursor
    sticks to the nearest vertex of the selected mesh. See *Figure 1.32*. Unity is
    asking you to pick a source vertex for the snapping:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，激活平移工具（*W*）并按住*V*键以启用顶点捕捉。按住*V*键，移动光标并观察Gizmo光标如何粘附到所选网格最近的顶点上。参见*图1.32*。Unity要求你选择一个用于捕捉的源顶点：
- en: '![Scene building](img/B05118_01_32.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![场景构建](img/B05118_01_32.jpg)'
- en: 'Figure 1.32: Hold down V to activate Vertex Snapping'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.32：按住V以激活顶点捕捉
- en: 'With *V* held down, move the cursor to the bottom corner of the house, and
    then click and drag from the corner to the floor mesh corner. The house will then
    snap align to the floor, corner to corner. When aligned this way, it release the
    *V* key, and the two meshes get aligned exactly at the vertices. See *Figure 1.33*:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 按住*V*键，将光标移动到房子的底部角落，然后从角落开始点击并拖动到地板网格的角落。然后房子将精确地与地板对齐，角落对角落。以这种方式对齐后，释放*V*键，两个网格将精确地对齐在顶点上。参见*图1.33*：
- en: '![Scene building](img/B05118_01_33.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![场景构建](img/B05118_01_33.jpg)'
- en: 'Figure 1.33: Align two meshes by vertices'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.33：通过顶点对齐两个网格
- en: 'Now you can assemble a complete scene using the mesh assets included in the
    `Prototyping` package. Drag and drop props in the scene, and using translate,
    rotate, and scale, you can reposition, realign, and rotate these objects; using
    vertex snapping, you can align them wherever you need. Give this some practice.
    See *Figure 1.34* for the scene arrangement that I made using only these tools
    and assets:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以使用包含在`Prototyping`包中的网格资产来组装一个完整的场景。将道具拖放到场景中，并使用平移、旋转和缩放来重新定位、重新对齐和旋转这些对象；使用顶点捕捉，你可以将它们对齐到你需要的任何位置。多加练习。参见*图1.34*，这是我仅使用这些工具和资产制作的场景布局：
- en: '![Scene building](img/B05118_01_34.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![场景构建](img/B05118_01_34.jpg)'
- en: 'Figure 1.34: Building a complete level'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.34：构建完整的关卡
- en: Lighting and sky
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 照明和天空
- en: The basic level has been created in terms of architectural models and layout;
    this was achieved using only a few mesh assets and some basic tools. Nevertheless,
    these tools are powerful and offer us a multitude of combinations and options
    to create great variety and believability in game worlds. One important ingredient
    is missing for us, however. This ingredient is lighting. You'll notice from *Figure
    1.34* that everything looks relatively flat, with no highlights, shadows, or light
    or dark areas. This is because scene lighting is not properly configured for best
    results, even though we already have a light in the scene, which was created initially
    by default.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在建筑模型和布局方面，基本关卡已经创建完成；这是通过仅使用几个网格资产和一些基本工具实现的。尽管如此，这些工具功能强大，为我们提供了多种组合和选项，以在游戏世界中创造丰富的多样性和逼真度。然而，我们缺少一个重要的成分。这个成分是照明。你会从*图1.34*中注意到，一切看起来相对平坦，没有高光、阴影或明暗区域。这是因为场景照明没有正确配置以获得最佳效果，尽管我们已经在场景中有一个光，这是最初默认创建的。
- en: 'Let''s start setting the scene for the coin collection game by enabling the
    sky, if it''s not already enabled. To do this, click on the **Extras** drop-down
    menu from the top toolbar in the **Scene** viewport. From the context menu, select
    **Skybox** to enable **Skybox** viewing. A **Skybox** simply refers to a large
    cube that surrounds the whole scene. Each interior side has a continuous texture
    (image) applied to simulate the appearance of a surrounding sky. For this reason,
    clicking the **Skybox** option displays a default sky in the **Scene** viewport.
    See *Figure 1.35*:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过启用天空来开始设置硬币收集游戏的场景，如果尚未启用的话。为此，点击**场景**视图中顶部工具栏的**额外**下拉菜单。从上下文菜单中选择**天空盒**以启用**天空盒**查看。**天空盒**简单来说是指围绕整个场景的一个大立方体。每个内部侧面都应用了连续的纹理（图像）来模拟周围天空的外观。因此，点击**天空盒**选项会在**场景**视图中显示默认的天空。参见*图1.35*：
- en: '![Lighting and sky](img/B05118_01_35.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![照明和天空](img/B05118_01_35.jpg)'
- en: 'Figure 1.35: Enabling the sky'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.35：启用天空
- en: Now, although the **Skybox** is now enabled and the scene looks better than
    before, it's still not being illuminated properly—the objects lack shadows and
    highlights. To fix this, be sure that lighting is enabled for the scene by toggling
    on the Lighting icon at the top of the **Scene** viewport. See *Figure 1.36*.
    This setting is for display purposes only. It only affects whether lighting effects
    are shown in the **Scene** viewport and not whether lighting is truly enabled
    for the final game.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，尽管**天空盒**已经启用，场景看起来比以前好，但它仍然没有得到适当的照明——物体缺少阴影和高光。为了解决这个问题，确保通过在**场景**视图中顶部切换照明图标来启用场景的照明。参见*图1.36*。此设置仅用于显示目的。它只影响是否在**场景**视图中显示照明效果，并不影响最终游戏是否真正启用了照明。
- en: '![Lighting and sky](img/B05118_01_36.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![照明和天空](img/B05118_01_36.jpg)'
- en: 'Figure 1.36: Enabling scene lighting in the Scene viewport'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.36：在场景视图中启用场景照明
- en: 'Enabling lighting display for the viewport will result in some differences
    to the scene appearance and, again, the scene should look better than before.
    You can confirm that scene lighting is taking effect by selecting **Directional
    Light** from the **Hierarchy** panel and rotating it. Doing this controls the
    time of day, rotating the light cycles between day and night and changing the
    light intensity and mood. This changes how the scene is rendered. See *Figure
    1.37*:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 启用视口中的照明显示将导致场景外观的一些差异，而且，场景应该比以前看起来更好。你可以通过从**层次**面板中选择**方向光**并旋转它来确认场景照明正在生效。这样做可以控制一天中的时间，旋转光周期在白天和夜晚之间变化，并改变光强度和氛围。这会改变场景的渲染方式。参见*图1.37*：
- en: '![Lighting and sky](img/B05118_01_37.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![照明和天空](img/B05118_01_37.jpg)'
- en: 'Figure 1.37: Rotating the scene directional light changes the time of day'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.37：旋转场景方向光改变一天中的时间
- en: 'Let''s undo any rotations to the **Directional Light** by pressing *Ctrl* +
    *Z* on the keyboard. To prepare for final and optimal lighting, all non-movable
    objects in the scene (such as walls, floors, chairs, tables, ceilings, grass,
    hills, towers, and more) should be marked as **Static**. This signifies to Unity
    that the objects will never move, no matter what happens during gameplay. By marking
    non-movable objects ahead of time, you can help Unity optimize the way it renders
    and lights a scene. To mark objects as **Static**, simply select all non-movable
    objects (which includes practically the entire level so far), and then enable
    the **Static** checkbox via the **Object Inspector**. Note that you don''t need
    to enable the **Static** setting for each object separately. By holding down the
    *Shift* key while selecting objects, you can select multiple objects together,
    allowing you to adjust their properties as a batch through the **Object Inspector**.
    See *Figure 1.38*:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 按下键盘上的 *Ctrl* + *Z* 来撤销对**方向光**的任何旋转。为了准备最终和最优化的照明，场景中所有不可移动的物体（如墙壁、地板、椅子、桌子、天花板、草地、山丘、塔楼等）应标记为**静态**。这向
    Unity 表明，无论游戏过程中发生什么，这些物体都不会移动。通过提前标记不可移动的物体，你可以帮助 Unity 优化渲染和照明的场景。要将物体标记为**静态**，只需选择所有不可移动的物体（实际上到目前为止几乎包括整个关卡），然后通过**对象检查器**启用**静态**复选框。请注意，您不需要为每个对象单独启用**静态**设置。在选择对象时按住
    *Shift* 键，您可以一起选择多个对象，通过**对象检查器**批量调整它们的属性。参见 *图 1.38*：
- en: '![Lighting and sky](img/B05118_01_38.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![照明和天空](img/B05118_01_38.jpg)'
- en: 'Figure 1.38: Enabling the Static option for multiple non-movable objects improves
    lighting and performance'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.38：为多个不可移动对象启用静态选项可改善照明和性能
- en: 'When you enable the **Static** checkbox for geometry, Unity auto-calculates
    scene lighting in the background—effects such as shadows, indirect illumination,
    and more. It generates a batch of data called the **GI Cache**, featuring **Light
    Propagation Paths**, which instructs Unity how light rays should bounce and move
    around the scene to achieve greater realism. Even so, enabling the **Static**
    checkbox as we''ve done still won''t produce cast shadows for objects, and this
    seriously detracts from realism. This happens because most mesh objects have the
    **Cast Shadows** option disabled. To fix this, select all meshes in the scene.
    Then, from the **Object Inspector**, click on the **Cast Shadows** checkbox from
    the **Mesh Renderer** component, and choose the **On** option from the context
    menu. When you do this, all mesh objects should be casting shadows. See *Figure
    1.39*:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 当您为几何体启用**静态**复选框时，Unity 会自动在后台计算场景照明——如阴影、间接照明等效果。它生成了一组称为**全局光照缓存（GI Cache**）的数据，其中包含**光照传播路径**，它指导
    Unity 如何使光线在场景中反弹和移动，以实现更高的真实感。即便如此，像我们这样启用**静态**复选框仍然不会为对象产生阴影，这严重影响了真实感。这是因为大多数网格对象都禁用了**投射阴影**选项。为了解决这个问题，选择场景中的所有网格。然后，从**对象检查器**中，点击**网格渲染器**组件中的**投射阴影**复选框，并从上下文菜单中选择**开启**选项。当你这样做时，所有网格对象都应该投射阴影。参见
    *图 1.39*：
- en: '![Lighting and sky](img/B05118_01_39.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![照明和天空](img/B05118_01_39.jpg)'
- en: 'Figure 1.39: Enabling cast shadows from the Mesh Renderer component'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.39：启用从网格渲染器组件投射阴影
- en: 'Voila! Your meshes now cast shadows. Splendid work: in reaching this far, you''ve
    created a new project, populated a scene with meshes, and successfully illuminated
    them with directional lighting. That''s excellent. However, it''d be even better
    if we could explore our environment in the first-person mode. We''ll see how next.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！你的网格现在可以投射阴影了。做得好：到目前为止，你已经创建了一个新项目，用网格填充了一个场景，并成功地用方向光照亮了它们。这很棒。然而，如果我们能在第一人称模式下探索我们的环境会更好。我们将在下一节中看到如何做到这一点。
- en: Play testing and the Game tab
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏测试和游戏选项卡
- en: The environment created thus far for the coin collection game has been assembled
    using only the mesh assets included with the native `Prototyping` package. My
    environment, as shown in *Figure 1.40*, features two main floor islands with houses,
    and the islands themselves are connected together by a stepping-stone bridge.
    Your version may be slightly different, and that's fine.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止为收集金币游戏创建的环境仅使用原生 `原型设计` 包中包含的网格资产组装而成。我的环境，如图 *图 1.40* 所示，有两个主要楼层岛屿和房屋，岛屿本身通过一块步石桥连接在一起。你的版本可能略有不同，这是正常的。
- en: '![Play testing and the Game tab](img/B05118_01_40.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏选项卡](img/B05118_01_40.jpg)'
- en: 'Figure 1.40: The scene created so far contains two island areas'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.40：到目前为止创建的场景包含两个岛屿区域
- en: Overall, the scene is good work. It's well worth saving. To save the scene,
    press *Ctrl* + *S* on the keyboard or else choose **File** | **Save Scene** from
    the application menu. See *Figure 1.41*. If you're saving the scene for the first
    time, Unity displays a pop-up **Save** dialog, prompting you to name the scene
    descriptively (I called it `Level_01`).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，场景制作得很好。非常值得保存。要保存场景，请按键盘上的 *Ctrl* + *S* 或者在应用程序菜单中选择 **文件** | **保存场景**。见
    *图 1.41*。如果你是第一次保存场景，Unity 会显示一个弹出 **保存** 对话框，提示你以描述性的名称命名场景（我将其命名为 `Level_01`）。
- en: '![Play testing and the Game tab](img/B05118_01_41.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏标签页](img/B05118_01_41.jpg)'
- en: 'Figure 1.41: Saving a scene'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.41：保存场景
- en: After saving the scene, it becomes scene asset of the project and appears in
    the **Project** panel. See *Figure 1.42*. This means that the scene is now a genuine
    and integral part of the project and not just a temporary work-in-progress as
    it was before. *Notice* also that saving a scene is conceptually *different* from
    saving a project. For example, the application menu has entries for **Save Scene**
    and **Save Project**. Remember, a **Project** is a collection of files and folders,
    including assets and scenes. A scene, by contrast, is one asset within the project
    and represents a complete 3D map that may be populated by other assets, such as
    meshes, textures, and sounds. Thus, saving a project saves the configuration between
    files and assets, including scenes. Saving a scene, in contrast, just retains
    the level changes within that specified scene.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 保存场景后，它成为项目的场景资产，并出现在 **项目** 面板中。见 *图 1.42*。这意味着场景现在已经成为项目的真正和不可或缺的部分，而不再是之前的那种临时工作状态。*注意*，保存场景在概念上与保存项目是不同的。例如，应用程序菜单中有
    **保存场景** 和 **保存项目** 的条目。请记住，**项目** 是文件和文件夹的集合，包括资产和场景。相比之下，场景是项目中的一个资产，代表一个完整的
    3D 地图，可能包含其他资产，如网格、纹理和声音。因此，保存项目会保存文件和资产之间的配置，包括场景。相比之下，保存场景只是保留指定场景中的级别更改。
- en: '![Play testing and the Game tab](img/B05118_01_42.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏标签页](img/B05118_01_42.jpg)'
- en: 'Figure 1.42: Saved scenes are added as assets within your project'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.42：保存的场景作为项目中的资源添加
- en: Tip
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can see from *Figure 1.42* that I've saved my scene in a folder named `Scenes`.
    Folders can be created in your project by right-clicking on any empty area in
    the **Project** panel and choosing **New Folder** from the context menu, or else
    choose **Assets** | **Create** | **Folder** from the application menu. You can
    easily move and rearrange assets among folders by simply dragging and dropping
    them.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 从 *图 1.42* 可以看出，我已经将我的场景保存在名为 `Scenes` 的文件夹中。您可以通过在 **项目** 面板中的任何空白区域右键单击并从上下文菜单中选择
    **新建文件夹**，或者从应用程序菜单中选择 **资产** | **创建** | **文件夹** 来在项目中创建文件夹。您可以通过简单地拖放它们来轻松移动和重新排列文件夹中的资源。
- en: 'Now, the level, as it stands, contains nothing really *playable*. It''s simply
    a static, lifeless, and non-interactive 3D environment made using the **Editor**
    tools. Let''s correct this by making our scene playable, allowing the player to
    wander around and explore the world in first-person mode, controlled using the
    standard WASD keys on the keyboard. To achieve this, we''ll add a first-person
    character controller to the scene. This is a ready-made asset included with Unity,
    which contains everything necessary to create quick and effective first-person
    controls. Open the `Standard Assets` | `Characters` | `FirstPersonCharacter` |
    `Prefabs` folder. Then drag and drop the **FPSController** asset from the **Project**
    panel in the scene. See *Figure 1.43*:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个级别目前实际上没有任何可玩的内容。它只是一个使用 **编辑器** 工具制作的静态、无生命力和非交互式的 3D 环境。让我们通过使场景可玩来纠正这一点，允许玩家以第一人称模式四处游荡并探索世界，使用键盘上的标准
    WASD 键进行控制。为了实现这一点，我们将向场景添加一个第一人称角色控制器。这是一个包含在 Unity 中的现成资源，它包含创建快速有效的第一人称控制所需的一切。打开
    `Standard Assets` | `Characters` | `FirstPersonCharacter` | `Prefabs` 文件夹。然后从场景的
    **项目** 面板中拖放 **FPSController** 资产。见 *图 1.43*：
- en: '![Play testing and the Game tab](img/B05118_01_43.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏标签页](img/B05118_01_43.jpg)'
- en: 'Figure 1.43: Adding an FPSController to the scene'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.43：将 FPSController 添加到场景中
- en: 'After adding the first-person controller, click on the play button from the
    Unity toolbar to play test the game in first-person mode. See *Figure 1.44*:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 添加第一人称控制器后，点击 Unity 工具栏中的播放按钮以以第一人称模式测试游戏。见 *图 1.44*：
- en: '![Play testing and the Game tab](img/B05118_01_44.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏标签页](img/B05118_01_44.jpg)'
- en: 'Figure 1.44: Unity scenes can be play tested by clicking on the play button
    from the toolbar'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.44：通过点击工具栏中的播放按钮可以测试 Unity 场景
- en: 'On clicking play, Unity typically switches from the **Scene** tab to the **Game**
    tab. As we''ve seen, the **Scene** tab is a *director''s-eye view* of the active
    scene; it''s where a scene is edited, crafted, and designed. In contrast, the
    **Game** tab is where the active scene is played and tested from the perspective
    of the gamer. From this view, the scene is displayed through the main game camera.
    While play mode is active, you can play test your game using the default game
    controls, provided that the **Game** tab is *in focus*. The first-person controller
    uses the WASD keys on the keyboard and mouse movement controls head orientation.
    See *Figure 1.45*:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 点击播放后，Unity 通常会从**场景**选项卡切换到**游戏**选项卡。正如我们所见，**场景**选项卡是**导演视角**的活跃场景；这是编辑、制作和设计场景的地方。相比之下，**游戏**选项卡是从玩家的视角播放和测试活跃场景的地方。从这个视角来看，场景通过主游戏摄像头显示。在播放模式激活时，如果您将**游戏**选项卡置于**焦点**，您可以使用默认的游戏控制来测试您的游戏。第一人称控制器使用键盘上的
    WASD 键和鼠标移动控制头部方向。请参阅*图 1.45*：
- en: '![Play testing and the Game tab](img/B05118_01_45.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![测试游戏和游戏选项卡](img/B05118_01_45.jpg)'
- en: 'Figure 1.45: Play testing levels in the Game tab'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.45：在游戏选项卡中测试关卡
- en: Tip
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can switch back to the **Scene** tab while in play mode. You can even edit
    the scene and change, move, and delete objects there too! However, any and all
    scene changes made during play mode will automatically revert back to their original
    settings when play mode ends. This behavior is intentional. It lets you edit properties
    during gameplay to observe their effects and debug any issues without permanently
    changing the scene.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在播放模式下，您可以切换回**场景**选项卡。您甚至可以在那里编辑场景，更改、移动和删除对象！然而，在播放模式下进行的任何场景更改在播放模式结束时都会自动恢复到其原始设置。这种行为是有意为之的。它让您可以在游戏过程中编辑属性以观察其效果，并调试任何问题，而不会永久更改场景。
- en: Congratulations! Your level should now be walkable in first-person mode. When
    completed, you can easily stop playback by clicking on the play button again or
    by pressing *Ctrl* + *P* on the keyboard. Doing this will return you to the **Scene**
    tab.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你的关卡现在应该可以在第一人称模式下行走。完成之后，你可以通过再次点击播放按钮或按键盘上的 *Ctrl* + *P* 来轻松停止播放。这样做会将你返回到**场景**选项卡。
- en: Tip
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Unity also features a **Toggle-Pause** button to suspend and resume gameplay.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 还提供了一个**切换暂停**按钮来暂停和恢复游戏。
- en: 'You should notice that, on playing the level with a first-person controller,
    you receive an information message printed to the **Console** window. By default,
    this window appears at the bottom of the **Unity Editor**, docked beside the **Project**
    panel. This window is also accessible manually from the application menu, **Window**
    | **Console**. The **Console** window is where all encountered errors or warnings
    are displayed for your review as well as information messages. Errors are printed
    in red and warnings in yellow, and information messages appear as a default grey.
    Sometimes, a message appears just once, or sometimes it appears many times repeatedly.
    See *Figure 1.46*:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该注意，在用第一人称控制器玩关卡时，你会在**控制台**窗口中看到一个信息消息。默认情况下，此窗口位于**Unity 编辑器**底部，停靠在**项目**面板旁边。您也可以通过应用程序菜单手动访问此窗口，**窗口**
    | **控制台**。**控制台**窗口是显示所有遇到错误或警告以及信息消息的地方。错误以红色打印，警告以黄色打印，信息消息以默认灰色显示。有时，消息只会出现一次，有时会反复多次出现。请参阅*图
    1.46*：
- en: '![Play testing and the Game tab](img/B05118_01_46.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![测试游戏和游戏选项卡](img/B05118_01_46.jpg)'
- en: 'Figure 1.46: The Console outputs information, warnings, and errors'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.46：控制台输出信息、警告和错误
- en: 'As mentioned, the **Console** window outputs three distinct types of message:
    information, warnings, and errors. Information messages are typically Unity''s
    way of making best practice recommendations or suggestions based on how your project
    is currently working. Warnings are slightly more serious and represent problems
    either in your code or scene, which (if not corrected) could result in unexpected
    behaviors and suboptimal performance. Finally, errors describe areas in your scene
    or code that require careful and immediate attention. Sometimes, errors will prevent
    your game from working altogether and sometimes errors happen at runtime and can
    result in game crashes or freezes. The **Console** window, therefore, is helpful
    because it helps us debug and address issues with our games. *Figure 1.46* has
    identified an issue concerning duplicated *audio listeners*.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**控制台**窗口输出三种不同类型的信息：信息、警告和错误。信息消息通常是Unity根据你的项目当前工作情况提出最佳实践建议或建议的方式。警告稍微严重一些，代表你的代码或场景中存在的问题，如果不纠正，可能会导致意外的行为和次优性能。最后，错误描述了场景或代码中需要仔细和立即注意的区域。有时，错误甚至可能完全阻止游戏运行，有时错误发生在运行时，可能导致游戏崩溃或冻结。因此，**控制台**窗口非常有用，因为它帮助我们调试和解决游戏中的问题。*图1.46*已经识别了一个关于重复的*音频监听器*的问题。
- en: 'An audio listener is a component attached to a camera object. Specifically,
    each and every camera, by default, has an audio listener component attached. This
    represents an *ear point*, that is, the ability to hear sound within the scene
    from the position of the camera. Unfortunately, Unity doesn''t support multiple
    active audio listeners in the same scene, which means that you can only hear audio
    from one place at any one time. This problem happens because our scene now contains
    two cameras, one that was added automatically when the scene was created, and
    the other that is included in the first-person controller. To confirm this, select
    the first-person controller object in the **Hierarchy** panel and click on the
    triangle icon beside its name to reveal more objects underneath, which are part
    of the first-person controller. See *Figure 1.47*:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 音频监听器是一个附加到相机对象上的组件。具体来说，每个相机默认情况下都有一个音频监听器组件附加。这代表了一个*耳朵点*，即从相机的位置在场景中听到声音的能力。不幸的是，Unity不支持同一场景中的多个活动音频监听器，这意味着你一次只能从一个地方听到音频。这个问题发生是因为我们的场景现在包含两个相机，一个是在创建场景时自动添加的，另一个包含在第一人称控制器中。为了确认这一点，在**层次结构**面板中选择第一人称控制器对象，并点击其名称旁边的三角形图标以揭示下面的更多对象，这些对象是第一人称控制器的一部分。参见*图1.47*：
- en: '![Play testing and the Game tab](img/B05118_01_47.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏选项卡](img/B05118_01_47.jpg)'
- en: 'Figure 1.47: Finding the camera on a first-person controller'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.47：在第一人称控制器上找到相机
- en: 'Select the `FirstPersonCharacter` object, which is underneath the `FPSController`
    object (as shown in *Figure 1.47*). The `FirstPersonCharacter` object is a child
    of the `FPSController`, which is the parent. This is because `FPSController` contains
    or encloses the `FirstPersonCharacter` object in the **Hierarchy** panel. Child
    objects inherit the transformations of their parents. This means that as parent
    objects move and rotate, all transformations will cascade downwards to all children.
    From the **Object Inspector**, you can see that the object has an **Audio Listener**
    component. See *Figure 1.48*:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 选择`FirstPersonCharacter`对象，它在`FPSController`对象之下（如*图1.47*所示）。`FirstPersonCharacter`对象是`FPSController`的子对象，`FPSController`是父对象。这是因为`FPSController`在**层次结构**面板中包含或包围了`FirstPersonCharacter`对象。子对象继承其父对象的变换。这意味着当父对象移动和旋转时，所有变换都会向下级联到所有子对象。从**对象检查器**中，你可以看到该对象有一个**音频监听器**组件。参见*图1.48*：
- en: '![Play testing and the Game tab](img/B05118_01_48.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![游戏测试和游戏选项卡](img/B05118_01_48.jpg)'
- en: 'Figure 1.48: The FirstPersonController object contains an AudioListener component'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.48：FirstPersonController对象包含一个AudioListener组件
- en: We could remove the **Audio Listener** component from the `FPSController`, but
    this would prevent the player hearing sound in first-person perspective. So, instead,
    we'll delete the original camera created by default in the scene. To do this,
    select the original camera object in the hierarchy and press *Delete* on the keyboard.
    See *Figure 1.49*. This removes the **Audio Listener** warning in the **Console**
    during gameplay. Now give the game a play test!
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从`FPSController`中移除**音频监听器**组件，但这将阻止玩家以第一人称视角听到声音。因此，我们将会删除场景中默认创建的原始相机。为此，在层级中选择原始相机对象，然后在键盘上按*Delete*键。参见*图1.49*。这将消除游戏过程中的**控制台**中的**音频监听器**警告。现在给游戏进行一次试玩测试！
- en: '![Play testing and the Game tab](img/B05118_01_49.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![试玩和游戏标签页](img/B05118_01_49.jpg)'
- en: 'Figure 1.49: Deleting a camera object'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.49：删除相机对象
- en: Adding a water plane
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加水面
- en: The collection game is making excellent progress. We now have something playable
    insofar as we can run around and explore the environment in first-person mode.
    However, the environment could benefit from additional polish. Right now, for
    example, the floor meshes appear suspended in mid-air with nothing beneath them
    to offer support. See *Figure 1.50*. Further, it's possible to walk over the edge
    and fall into an infinite drop. So let's add some water beneath the floors to
    complement the scene as a complete environment.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 收集游戏进展顺利。我们现在有了一些可玩的内容，我们可以以第一人称模式在环境中四处走动和探索。然而，环境可以从额外的润色中受益。例如，目前地板网格看起来悬浮在空中，下面没有任何支撑物。参见*图1.50*。此外，有可能走到边缘并掉入无限深渊。因此，让我们在地板下添加一些水面，以补充场景作为一个完整的环境。
- en: '![Adding a water plane](img/B05118_01_50.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_50.jpg)'
- en: 'Figure 1.50: The world floor appears to float and have no support'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.50：世界地板看起来悬浮且没有支撑
- en: To add water, we can use another ready-made Unity asset included in the **Project**
    panel. Open the `Standard Assets` | `Environment` | `Water` | `Water` | `Prefabs`
    folder. Then drag and drop the `WaterProDaytime` asset from the **Project** panel
    in the scene. See *Figure 1.51*. This appears as a circular object, which is initially
    smaller than needed.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加水面，我们可以在**项目**面板中使用另一个现成的Unity资源。打开`标准资源` | `环境` | `水面` | `水面` | `预制体`文件夹。然后从场景中的**项目**面板中拖放`WaterProDaytime`资源。参见*图1.51*。它显示为一个圆形对象，最初比所需的要小。
- en: '![Adding a water plane](img/B05118_01_51.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_51.jpg)'
- en: 'Figure 1.51: Adding water to the environment'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.51：向环境中添加水面
- en: 'After adding the `Water` prefab, position it below the floor level and use
    the scale tool (R) to increase its planar size (*X*, *Z*) to fill the environment
    outward into the distant horizon. This creates the feel that the floor meshes
    are smaller islands within an expansive world of water. See *Figure 1.52*:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 添加`Water`预制体后，将其放置在地板水平以下，并使用缩放工具（R）增加其平面尺寸（*X*，*Z*）以向外填充环境直至远处的地平线。这营造出地板网格是位于广阔水域中的小岛屿的感觉。参见*图1.52*：
- en: '![Adding a water plane](img/B05118_01_52.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_52.jpg)'
- en: 'Figure 1.52: Scaling and sizing water for the environment'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.52：缩放和调整环境中的水面大小
- en: Now let's take another test run in the **Game** tab. Press play on the toolbar
    and navigate the character around in first-person mode. See *Figure 1.53*. You
    should see the water in the level. Of course, you can't walk on the water! Neither
    can you swim or dive beneath it. If you try walking on it, you'll simply fall
    through it, descending into infinity as though the water had never been there.
    Right now, the water is an entirely cosmetic feature, but it makes the scene look
    much better.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在**游戏**标签页中进行另一次测试运行。在工具栏上按播放，以第一人称模式导航角色。参见*图1.53*。你应该在关卡中看到水面。当然，你不能在水面上行走！你也不能在水下游泳或潜水。如果你尝试在水面上行走，你将直接穿过它，仿佛水从未存在过一样，无限地下降。目前，水面是一个完全的装饰性特征，但它使场景看起来好多了。
- en: '![Adding a water plane](img/B05118_01_53.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_53.jpg)'
- en: Testing the environment with water in FPS mode
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在FPS模式下测试带有水面的环境
- en: The water is really a substanceless, ethereal object through which the player
    can pass easily. Unity doesn't recognize it as a solid or even a semi-solid object.
    As we'll see in more detail later, you can make an object solid very quickly by
    attaching a **Box Collider** component to it. Colliders and physics is covered
    in more depth from [Chapter 3](ch03.html "Chapter 3. Project B – the Space Shooter"),
    *Project B – the Space Shooter* onward. For now, however, we can add solidity
    to the water by first selecting the `Water` object from the **Hierarchy** panel
    (or in the **Scene** viewport) and then by choosing **Component** | **Physics**
    | **Box Collider** from the application menu. See *Figure 1.54*. Attaching a component
    to the selected object changes the object itself; it changes how it behaves. Essentially,
    components add behavior and functionality to objects, making them behave in different
    ways. Even so, resist the temptation to add lots of components to an object without
    reason and with the view that it makes them more versatile or powerful. It's better
    to have as few components on an object as necessary. This strategy of preferring
    relevant simplicity keeps your workflow neater, simpler, and optimized.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 水实际上是一种无形的、空灵的对象，玩家可以轻易通过。Unity不将其识别为实体或半实体对象。正如我们稍后将要更详细地看到的，你可以通过将**盒子碰撞体**组件附加到对象上来非常快速地使其成为实体。从[第3章](ch03.html
    "第3章。项目B – 空间射击者")，“项目B – 空间射击者”开始，更深入地介绍了碰撞体和物理。现在，我们可以通过首先从**层次结构**面板（或在**场景**视图中）选择`Water`对象，然后从应用程序菜单中选择**组件**
    | **物理** | **盒子碰撞体**来给水添加实体性。参见*图1.54*。将组件附加到选定的对象会改变对象本身；它会改变其行为方式。本质上，组件为对象添加行为和功能，使其以不同的方式表现。即便如此，不要在没有理由和认为它们会使对象更灵活或更强大的观点下，随意给对象添加很多组件。最好让对象上的组件尽可能少。这种偏好相关简单性的策略可以使你的工作流程更整洁、更简单、更优化。
- en: '![Adding a water plane](img/B05118_01_54.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_54.jpg)'
- en: 'Figure 1.54: Attaching a Box Collider to a Water object'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.54：将盒子碰撞体附加到水面对象
- en: 'When a **Box Collider** is added to the water, a surrounding green cage or
    mesh appears. This approximates the volume and shape of the `Water` object and
    represents its physical volume, namely, the volume of the object that Unity recognizes
    as solid. See *Figure 1.55*:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 当向水面添加**盒子碰撞体**时，会出现一个周围的绿色笼子或网格。这近似了`Water`对象的体积和形状，并代表其物理体积，即Unity识别为实体的对象体积。参见*图1.55*：
- en: '![Adding a water plane](img/B05118_01_55.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_55.jpg)'
- en: 'Figure 1.55: Box Colliders approximate physical volume'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.55：盒子碰撞体近似物理体积
- en: 'If you play the game now, your character will walk on water as opposed to falling
    through. True, the character should be able to swim properly, but walking might
    be better than falling. To achieve full swimming behavior would require significantly
    more work and is not covered here. If you want to remove the **Box Collider**
    functionality and return the water back to its original, ethereal state, then
    select the `Water` object, click on the cog icon on the **Box Collider** component,
    and then choose **Remove Component** from the context menu. See *Figure 1.56*:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在玩游戏，你的角色将能在水面上行走而不是穿过。诚然，角色应该能够正确游泳，但行走可能比坠落更好。要实现完整的游泳行为需要做大量的工作，这里没有涉及。如果你想移除**盒子碰撞体**功能并将水恢复到其原始的空灵状态，那么选择`Water`对象，点击**盒子碰撞体**组件上的齿轮图标，然后从上下文菜单中选择**移除组件**。参见*图1.56*：
- en: '![Adding a water plane](img/B05118_01_56.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![添加水面](img/B05118_01_56.jpg)'
- en: 'Figure 1.56: Removing a component'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.56：移除组件
- en: Adding a coin to collect
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一枚硬币进行收集
- en: 'On reaching this far, our game has many features, namely, a complete environment,
    first-person controller, and water. However, we''re supposed to be making a coin
    collection game and there aren''t any coins for the player to collect yet. Now,
    to achieve fully collectible coins, we''ll need to write some C# script, which
    will happen in the next chapter of this book. However, we can at least get started
    here at creating the coin object itself. To do this, we''ll use a **Cylinder**
    primitive that''s scaled to form a coin-looking shape. To create a cylinder, select
    **GameObject** | **3D Object** | **Cylinder** from the application menu:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的游戏已经具有许多功能，即一个完整的环境、第一人称控制器和水。然而，我们本应制作一个收集硬币的游戏，但目前还没有硬币供玩家收集。现在，为了实现完全可收集的硬币，我们需要编写一些
    C# 脚本，这将在本书的下一章中介绍。然而，我们至少可以开始创建硬币对象本身。为此，我们将使用一个缩放成硬币形状的 **圆柱体** 原始形状。要创建圆柱体，从应用程序菜单中选择
    **GameObject** | **3D Object** | **Cylinder**：
- en: '![Adding a coin to collect](img/B05118_01_57.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![向收集区域添加硬币](img/B05118_01_57.jpg)'
- en: 'Figure 1.57: Create a Cylinder'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.57：创建圆柱体
- en: 'Initially, the cylinder looks nothing like a coin. However, this is easily
    changed by scaling non-uniformly in the *Z* axis to make the cylinder thinner.
    Switch to the scale tool (R) and then scale the **Cylinder** inward. See *Figure
    1.58*:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，圆柱体看起来根本不像硬币。然而，通过在 *Z* 轴上非均匀缩放使其变薄，可以轻松地改变这一点。切换到缩放工具（R），然后缩放 **圆柱体** 向内。参见
    *图 1.58*：
- en: '![Adding a coin to collect](img/B05118_01_58.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![向收集区域添加硬币](img/B05118_01_58.jpg)'
- en: 'Figure 1.58: Scaling the cylinder to make a collectible coin'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.58：缩放圆柱体以制作可收集的硬币
- en: 'After rescaling the coin, its collider no longer represents its volume. It
    appears much larger than it should (see *Figure 1.58*). By default, the **Cylinder**
    is created with a **Capsule Collider** as opposed to a **Box Collider**. You can
    change the size of the **Capsule Collider** component by adjusting the **Radius**
    field from the **Object Inspector** when the coin is selected. Lower the **Radius**
    field to shrink the collider to a more representative size and volume. See *Figure
    1.59*. Alternatively, you could remove **Capsule Collider** altogether and add
    **Box Collider** instead. Either way is fine; generally choose the simpler shape
    where possible. The colliders will be used in script in the next chapter to detect
    when the player collides with the coin to collect them:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在重新缩放硬币后，其碰撞体不再代表其体积。它看起来比应有的要大得多（参见 *图 1.58*）。默认情况下，**圆柱体** 是创建时带有 **胶囊碰撞体**
    而不是 **盒子碰撞体**。当选择硬币时，可以通过调整 **对象检查器** 中的 **半径** 字段来更改 **胶囊碰撞体** 组件的大小。将 **半径**
    字段降低以缩小碰撞体到更具有代表性的尺寸和体积。参见 *图 1.59*。或者，您可以完全移除 **胶囊碰撞体** 并添加 **盒子碰撞体**。两种方式都行；通常在可能的情况下选择更简单的形状。在下一章的脚本中，将使用这些碰撞体来检测玩家何时与硬币碰撞以收集它们：
- en: '![Adding a coin to collect](img/B05118_01_59.jpg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![向收集区域添加硬币](img/B05118_01_59.jpg)'
- en: 'Figure 1.59: Adjusting the Capsule Collider for the coin'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.59：调整硬币的胶囊碰撞体
- en: Here we are! We now have the basic shape and structure for a coin. We will,
    of course, improve it carefully and critically in many ways in the next chapter.
    For example, we'll make it collectible and assign it a material to make it look
    shiny. However, here, using only a basic Unity primitive and scale tool, we're
    able to generate a shape that truly resembles a coin.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 到这里我们就完成了！我们现在有了硬币的基本形状和结构。当然，我们将在下一章中从许多方面仔细和批判性地改进它。例如，我们将使其可收集，并分配一个材质使其看起来闪亮。然而，在这里，仅使用基本的
    Unity 原始形状和缩放工具，我们就能生成一个真正类似于硬币的形状。
- en: Summary
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Congratulations! On reaching this point, you have laid the foundations for a
    coin collection game that will be complete and functional in the next chapter.
    Here, we've seen how to create a Unity project from scratch and populate it with
    assets, such as meshes, textures, and scenes. In addition, we've seen how to create
    a scene for our game and use a range of assets to populate it with useful functionality
    that ships out of the box with the Unity engine, such as water, first-person controllers,
    and environment prototyping assets. In the next chapter, we'll resume work from
    where we ended here by making a coin that is collectible, and establishing a set
    of rules and logic for the game, making it possible to win and lose.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！到达这个阶段，你已经为下一章将完成的、功能齐全的收集游戏打下了基础。在这里，我们学习了如何从头创建一个Unity项目，并填充它，例如网格、纹理和场景等资源。此外，我们还了解了如何为我们的游戏创建场景，并使用一系列资源来填充它，这些资源是Unity引擎自带的有用功能，例如水、第一人称控制器和环境原型资源。在下一章中，我们将从这里结束的地方继续工作，制作一个可收集的硬币，并建立一套游戏规则和逻辑，使得游戏能够实现赢和输。
