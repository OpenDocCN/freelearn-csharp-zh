["```cs\n    class Organisation\n    {\n      public Organisation() { }\n      public string Name { get; set; }\n      public string OfficialFacebookLink { get; set; }\n    }\n\n    class Packt : Organisation\n    {\n      public Packt() { }\n      public int TotalBooksPublished { get; set; }\n\n      public void PrintPacktInfo()\n      {\n        Console.WriteLine($\"This is {Name}!\\n\" +\n            $\"Our official facebook page link is \n              {OfficialFacebookLink}.\\n\" +\n            $\"We have published {TotalBooksPublished} books.\\n\");\n\n        Account account = new Account();\n        account.PrintAcountInfo(1, \"Packt Account\");\n      }\n    }\n\n    public class Account\n    {\n      public int AccountId { get; set; }\n      public string AccountName { get; set; }\n\n      public void PrintAcountInfo(int accId, string accName) \n      {\n        Console.WriteLine(\"Account Id: \" + accId + \"\n            and Account Name: \" + accName);\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      Packt packt = new Packt\n      {\n         Name = \"Packt Publications\",\n         OfficialFacebookLink = \"https://www.facebook.com/PacktPub/\",\n         TotalBooksPublished = 5000\n      };\n\n      packt.PrintPacktInfo(); // Prints the Account information.\n      Console.ReadKey();\n    }\n```", "```cs\n    public class Student\n    {\n      private int Id { get; set; }\n      private string Name { get; set; }\n      private DateTime Dob { get; set; }\n      private Address Address { get; set; }\n      private ICollection<Book> Books { get; set; }\n\n      public void PrintStudent()\n      {\n        Console.WriteLine(\"Student: \" + Name);\n        Console.WriteLine(\"City: \" + Address.City + \"\");\n        Console.WriteLine(\"-----------------------\");\n      }\n    }\n```", "```cs\n        Student student = new Student(1, \"Bhagirathi Panda\", \n          new DateTime(1990, 4, 23));\n```", "```cs\n        public Student(int id, string name, DateTime dob)\n        {\n          Id = id;\n          Name = name;\n          Dob = dob;\n        }\n```", "```cs\n    public class Student\n    {\n      // Other properties.\n\n      int AddressId {get; set;}\n      string City {get; set;}\n      string State {get; set;}\n      string Country {get; set;}\n    }\n```", "```cs\n    public class Student\n    {\n      // Other properties.\n      private Address Address { get; set; }\n    }\n    public class Address\n    {\n      public int AddressId { get; set; }\n      public string City { get; set; }\n      public string State { get; set; }\n      public string Country { get; set; }\n\n      // Constructor. Just initialising City for now.\n      public Address(string city)\n      {\n        City = city;\n      }\n    }\n```", "```cs\n    public Student(int id, string name, DateTime dob, Address address)\n    {\n        Id = id;\n        Name = name;\n        Dob = dob;\n        Address = address;\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      Address add = new Address(\"Dhenkanal\");\n      Student pallu = new Student(1, \"Pallavi Praharaj\", \n        new DateTime(1990, 6, 12), add);\n    }\n```", "```cs\n        static void Main(string[] args)\n        {\n          Address add = new Address(\"Nayagarh\");\n          Student rinu = new Student(1, \"Jayashree Satapathy\", \n            new DateTime(1995, 11, 14), add);    \n          Student gudy = new Student(2, \"Lipsa Rath\", \n            new DateTime(1995, 4, 23), add);\n\n         rinu.PrintStudent();\n         gudy.PrintStudent();\n         Console.ReadKey();\n       }\n```", "```cs\n    public class CricketPlayer\n    {\n      public string PlayerName { get; set; }\n\n      public CricketPlayer(string name)\n      {\n        PlayerName = name;\n      }\n\n      public void Play(Bat bat)\n      {\n        bat.StartPlay(this);\n      }\n\n      public string GetPlayerName()\n      {\n        return PlayerName;\n      }\n    }\n\n    public class Bat\n    {\n      public string BrandName { get; set; }\n\n      public void StartPlay(CricketPlayer player)\n      {\n        // Do something with the player.\n        Console.WriteLine(\"Player Named as \" + player.PlayerName\n           + \" is playing.\");\n        Console.ReadLine();\n      }\n\n      public string GetBrandName()\n      {\n        return \"Some Brand Name\";\n      }\n    }\n```", "```cs\n    var cPlayer = new CricketPlayer(\"Hardik Pandya\");\n    Bat bat = new Bat();\n\n    cPlayer.Play(bat);\n    bat.StartPlay(cPlayer);\n```", "```cs\n    CricketPlayer cPlayer = new CricketPlayer(\"Hardik Pandya\");\n    Bat bat = new Bat();\n\n    //cPlayer.Play(bat);\n    //bat.StartPlay(cPlayer);\n\n    Console.WriteLine($\"Name of the Player is: { \n        cPlayer.GetPlayerName() }\");\n    Console.WriteLine($\"Brand of Bat is: { bat.GetBrandName() }\");\n```", "```cs\n    public class Medicine\n    {\n      public string Name { get; set; }\n      public Medicine AlternateMedicine { get; set; }\n\n      public Medicine(string name, Medicine altMedicine)\n      {\n        Name = name;\n        AlternateMedicine = altMedicine;\n      }   \n    }\n```", "```cs\n    public class SoftwareEngineer\n    {\n        public string Name { get; set; }\n        public int LaptopId { get; set; }\n\n        public SoftwareEngineer(string name, int laptopId)\n        {\n                Name = name;\n                LaptopId = laptopId;\n        }\n     }\n\n     public class Laptop\n     {\n        public int LaptopId { get; set; }\n        public string LaptopName { get; set; }\n\n        public Laptop(int id, string name)\n        {\n           LaptopId = id;\n           LaptopName = name;\n        }\n      }\n\n      public class AvailableLaptops\n      {\n        public static List<Laptop> Laptops { get; set; }\n        static AvailableLaptops()\n        {\n          Laptops = new List<Laptop>\n          {\n            new Laptop(1, \"Laptop1\"),\n            new Laptop(2, \"Laptop2\"),\n            new Laptop(3, \"Laptop3\"),\n            new Laptop(4, \"Laptop4\"),\n          };\n        }\n\n        public static Laptop GetLaptop(int id)\n        {\n          return Laptops.Find(l => l.LaptopId == id);\n        }\n      }\n      static void Main(string[] args)\n      {\n        SoftwareEngineer softEng = new SoftwareEngineer(\"Tworit Dash\", 3);\n        // Get the Laptop object from AvailableLaptops class by id.\n        Laptop usedLaptop = AvailableLaptops.GetLaptop(3);\n        Console.WriteLine(softEng.Name + \" is using \" + \n          usedLaptop.LaptopName);\n        Console.ReadLine();\n      }\n```", "```cs\n    public abstract class User\n    {\n        public int Id { get; set; }\n        public int RoleId { get; set; }\n        public string Name { get; set; }\n        public string EmailId { get; set; }\n        public string MobileNumber { get; set; }\n\n        public int SaveUser(int userId)\n        {\n           // Database operation to save the user.\n           return userId;\n        }\n      }\n\n      public class Admin : User\n      {\n        public string CompanyDepartment { get; set; }\n        public Admin()\n        {\n          RoleId = 1;\n        }\n      }\n\n      public class Manager : User\n      {\n        public List<TeamLead> TeamLeads { get; set; }\n        public Manager()\n        {\n          RoleId = 2;\n        }\n      }\n\n      public class TeamLead : User\n      {\n        public List<string> Projects { get; set; }\n        public TeamLead()\n        {\n          RoleId = 3;\n        }\n      }\n```", "```cs\n    static void Main(string[] args)\n    {\n        Admin admin = new Admin()\n        {\n          Id = 12\n        };\n        admin.SaveUser(admin.Id);\n\n        Manager manager = new Manager\n        {\n          Id = 13\n        };\n        manager.SaveUser(manager.Id);\n         Console.WriteLine(\"Admin (Role Id: {0}) with UserId {1} \n            is saved\", admin.RoleId, admin.Id);\n        Console.WriteLine(\"Manager (Role Id: {0}) with UserId {1}\n            is saved\", manager.RoleId, manager.Id);\n    }\n```", "```cs\n    public class Role\n    {\n        public int RoleId { get; set; }\n        public string RoleName { get; set; }\n    }\n```", "```cs\n    public class Admin : Role\n    {\n        public string CompanyDepartment { get; set; }\n        public Admin()\n        {\n          RoleId = 1;\n        }\n    }\n\n    public class Manager : Role\n    {\n        public List<TeamLead> TeamLeads { get; set; }\n        public Manager()\n        {\n          RoleId = 2;\n        }\n    }\n    public class TeamLead : Role\n    {\n        public List<string> Projects { get; set; }\n        public TeamLead()\n        {\n          RoleId = 3;\n        }\n    }\n    public class DeliveryHead : Role\n    {\n       public DeliveryHead()\n        {\n          RoleId = 4;\n        }\n    }\n```", "```cs\n    public class User\n    {\n        public int Id { get; set; }\n        public List<Role> RoleIds { get; set; }\n        public string Name { get; set; }\n        public string EmailId { get; set; }\n        public string MobileNumber { get; set; }\n\n        public int SaveUser(int userId)\n        {\n           // Database operation to save the user.\n           return userId;\n        }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n        User deliveryManager = new User()\n        {\n            RoleIds = new List<Role>\n            {\n               new Manager(),\n               new TeamLead()\n            }\n        };\n        Console.WriteLine(string.Format(\"User has Roles:\\n\\n\\t- \n           {0}\", string.Join(\"\\n\\t- \", deliveryManager.RoleIds)));\n    }\n```", "```cs\n    class Mail\n    {\n      protected bool SendMail(string mailId, string message)\n      {   \n         // Logic to send an email\n         return true;\n      }\n    }\n    class Notification : Mail\n    {\n       void SendNotification(string mailId, string message)\n       {\n          SendMail(mailId, message);\n       }\n    }\n```", "```cs\n    interface IMail\n    {\n        bool SendMail(string mailId, string message);\n    }\n\n    interface ISms\n    {\n        bool SendSms(string mobile, string message);\n    }\n\n    public class Mail : IMail\n    {\n       public bool SendMail(string mailId, string message)\n       {\n          // Logic to send an email\n          Console.WriteLine(\"SendMail Called\");\n          return true;\n       }\n     }\n\n     public class Sms : ISms\n     {\n        public bool SendSms(string mailId, string message)\n        {\n          // Logic to send a Sms\n          Console.WriteLine(\"SendSms Called\");\n          return true;\n        }\n      }\n\n      class Notification\n      {\n         private readonly IMail _mail;\n         private readonly ISms _sms;\n\n         public Notification(IMail mail, ISms sms)\n         {\n           _mail = mail;\n           _sms = sms;\n         }\n\n        public void SendNotification(string mailId, string mobile,\n           string message)\n        {\n           _mail.SendMail(mailId, message);\n           _sms.SendSms(mobile, message);\n        }\n      }\n```", "```cs\n    static void Main(string[] args)\n    {\n        Notification notify = new Notification(new Mail(),\n           new Sms());\n        notify.SendNotification(\"taditdash@gmail.com\", \n          \"9132994288\", \"Hello Tadit!\");\n        Console.ReadLine();\n    }\n```", "```cs\n    public class SmtpMail : IMail\n    {\n       public bool SendMail(string mailId, string message)\n       {\n          // Logic to send an email\n          Console.WriteLine(\"SmtpMail Called\");\n          return true;\n       }\n    }\n    static void Main(string[] args)\n    {\n        Notification notify = new Notification(new SmtpMail(),\n            new Sms());\n        notify.SendNotification(\"taditdash@gmail.com\", \n           \"9132994288\", \"Hello Tadit!\");\n        Console.ReadLine();\n    }\n```", "```cs\n    namespace PacktConsoleApp\n    {\n      class Program\n      {\n        static void Main(string[] args)\n        {\n // We will do all Object Composition here directly or \n              calling a ConfigureServices method.\n          Console.WriteLine(\"Hello World!\");\n        }\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      // Setup container and register dependencies.\n      var serviceProvider = new ServiceCollection()\n      .AddTransient<IEmployeeService, EmployeeService>()\n      .BuildServiceProvider();\n\n      // Get the service instance from the container and \n      do actual operation.\n      var emp = serviceProvider.GetService<IEmployeeService>();\n      emp.HelloEmployee();\n\n      Console.ReadKey();\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n ConfigureServices(new ServiceCollection());\n      Console.ReadKey();\n    }\n\n    public static void ConfigureServices(IServiceCollection \n      serviceCollection)\n    {\n      // Setup container and register dependencies.\n      var serviceProvider = serviceCollection\n      .AddTransient<IEmployeeService, EmployeeService>()\n      .BuildServiceProvider();\n\n      // Get the service instance from the container and\n         do actual operation.\n      var emp = serviceProvider.GetService<IEmployeeService>();\n      emp.HelloEmployee();\n    }\n```", "```cs\n    namespace Microsoft.AspNetCore.Mvc.Controllers\n    {\n      /// <summary>\n      /// Provides methods for creation and disposal of controllers.\n      /// </summary>\n      public interface IControllerFactory\n      {\n        object CreateController(ControllerContext context);\n        void ReleaseController(ControllerContext context,\n         object controller);\n      }\n    }\n```", "```cs\n    namespace Microsoft.AspNetCore.Mvc.Controllers\n    {\n      /// <summary>\n      /// Default implementation for <see cref=\"IControllerFactory\"/>.\n      /// </summary>\n      public class DefaultControllerFactory : IControllerFactory\n      {\n        private readonly IControllerActivator _controllerActivator;\n        private readonly IControllerPropertyActivator[]\n            _propertyActivators;\n public DefaultControllerFactory(\n IControllerActivator controllerActivator,\n IEnumerable<IControllerPropertyActivator> propertyActivators)\n            {\n              if (controllerActivator == null)\n              {\n                throw new ArgumentNullException(nameof(\n                 controllerActivator));\n              }\n\n              if (propertyActivators == null)\n               {\n                throw \n                  new ArgumentNullException(nameof(propertyActivators));\n               }\n\n               _controllerActivator = controllerActivator;\n               _propertyActivators = propertyActivators.ToArray();\n            }\n            public virtual object CreateController\n              (ControllerContext context)\n            {\n               // Codes removed just for book.\n                   You can find codes in Github.\n             }\n\n             public virtual void ReleaseController(ControllerContext\n               context, object controller)\n            {\n              // Codes removed just for book. You can\n                  find codes in Github.\n            }\n      }\n    }\n```"]