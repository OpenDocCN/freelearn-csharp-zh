- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Enhancing Applications with Community Toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Windows Community Toolkit** (**WCT**) and the **.NET Community Toolkit**
    are collections of open source libraries for Windows and .NET developers. The
    toolkits contain controls and libraries that can be leveraged by the **Windows
    UI Library** (**WinUI**), **Universal Windows Platform** (**UWP**), .**NET Multi-platform
    App UI** (**.NET MAUI**), **Windows Presentation Foundation** (**WPF**), and **Windows
    Forms** (**WinForms**) applications. In the **Microsoft Store**, there is a companion
    sample application for the WCT that developers can install to explore the controls
    and learn how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Learning about the background and purpose of the toolkits
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the toolkit sample application to explore the controls available in the
    WCT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Leveraging toolkit controls in a WinUI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the helpers, services, and extensions for Windows developers in the
    WCT
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Discovering what’s available in the .NET Community Toolkit for WinUI developers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand the WCT and how it can boost
    your productivity when building Windows applications. You will also know how to
    incorporate its controls into your WinUI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To follow along with the examples in this chapter, the following software is
    required:'
  prefs: []
  type: TYPE_NORMAL
- en: Windows 10 version 1809 (build 17763) or newer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Studio 2022 or newer with the .NET desktop development workload configured
    for Windows App SDK development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available on GitHub at [https://github.com/Packt     Publishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter09](https://github.com/PacktPublishing/Learn-WinUI-3-Second-Edition/tree/master/Chapter09).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the WCT
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The WCT was created by Microsoft as an open source collection of controls and
    other helpers, tools, and services for Windows developers. It is primarily used
    by UWP developers but also adds value for WinUI, WinForms, and WPF developers.
    The toolkit is available to developers as a set of NuGet packages. There are over
    a dozen toolkit packages available on NuGet that can be installed independently,
    depending on the needs of your project. We will explore some of these packages
    throughout this chapter. Let’s start by discussing the history of the WCT.
  prefs: []
  type: TYPE_NORMAL
- en: The toolkit was open sourced from the very beginning. It has long been available
    on GitHub at [https://github.com/CommunityToolkit/WindowsCommunityToolkit](https://github.com/CommunityToolkit/WindowsCommunityToolkit),
    but the next generation of the toolkit is being hosted at [https://github.com/CommunityToolkit/Windows](https://github.com/CommunityToolkit/Windows).
    This new iteration of the toolkit is aimed toward helping WinUI 2, WinUI 3, and
    **Uno Platform** developers, but this new toolkit doesn’t have any releases available
    yet. The toolkit is open to community contributions if you’re interested in helping
    to move the project forward. The documentation for the WCT is available on *Microsoft
    Learn* at [https://learn.microsoft.com/windows/communitytoolkit/](https://learn.microsoft.com/windows/communitytoolkit/).
  prefs: []
  type: TYPE_NORMAL
- en: Origins of the WCT
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The WCT was first introduced as the **UWP Community Toolkit** in 2016\. As
    the name implies, it was originally a toolkit solely for UWP developers. The toolkit
    was created to simplify UWP app development by providing controls and helpers
    that Windows developers frequently create for their own common libraries. The
    idea of creating a toolkit for XAML development is not a new one. There have been
    several other similar projects for other platforms, including the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**WPF Toolkit** ([https://github.com/dotnetprojects/wpftoolkit](https://github.com/dotnetprojects/wpftoolkit)):
    A set of WPF open source controls and other components, originally hosted by Microsoft
    on **CodePlex**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Extended WPF Toolkit** ([https://github.com/xceedsoftware/wpftoolkit](https://github.com/xceedsoftware/wpftoolkit)):
    An open source collection of controls maintained by **Xceed Software**, intended
    to complement the original WPF Toolkit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Xamarin Community** **Toolkit** ([https://github.com/xamarin/Xamarin     CommunityToolkit](https://github.com/xamarin/XamarinCommunityToolkit)): An open
    source collection of **Xamarin** controls, animations, behaviors, and effects
    for **Xamarin.Forms**. As Xamarin developers move to **.NET MAUI**, there is now
    a **.NET MAUI Community Toolkit** too ([https://github.com/CommunityToolkit/Maui](https://github.com/CommunityToolkit/Maui)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft, with help from the open source community, released regular updates
    to the toolkit, adding new and enhanced components and controls multiple times
    a year. In spring 2018, shortly before the release of v3.0, they announced the
    toolkit’s new name: *Windows Community Toolkit*. This renaming signaled the team’s
    intent to embrace all Windows developers moving forward.'
  prefs: []
  type: TYPE_NORMAL
- en: WCT 3.0 included a legacy Microsoft Edge-based `WebView` control—not to be confused
    with `WebView2`, which we will cover later in this chapter—for WPF and WinForms
    applications. The release also added code samples to Visual Basic, which is still
    used in many legacy Windows desktop code bases.
  prefs: []
  type: TYPE_NORMAL
- en: Another purpose of the toolkit was to allow developers to work on new controls
    with the hope that some would be integrated into the Windows SDK at a later date
    (or alternatively, the WinUI libraries). This has happened with several controls
    over the years since the toolkit’s introduction, including the `WebView` control.
  prefs: []
  type: TYPE_NORMAL
- en: Subsequent toolkit releases have continued to add value for both UWP and desktop
    developers, and these releases have been fueled by community contributions.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing recent toolkit releases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There have been several major releases of the WCT since version 3.0\. It was
    WCT version 7.0 that first added WinUI 3 support.
  prefs: []
  type: TYPE_NORMAL
- en: 'In August 2018, WCT 4.0 added a `DataGrid` control, a feature long desired
    by UWP developers who were familiar with the `DataGrid` control available on the
    Silverlight and WPF platforms. This was quickly followed by a fall 2018 release
    of version 5\. This release brought two major features to the toolkit, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`WindowsXamlHost`: This control enabled a single UWP control to be wrapped
    and hosted within a WPF or WinForms control. Later, the `WindowsXamlHost` control
    would be known as XAML Islands, with the hosting API added to the Windows SDK.
    Several *wrapped controls* were also released, including `InkCanvas`, `MapControl`,
    and an update to the legacy `WebView` control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TabView`: Behind `DataGrid`, a rich `TabView` control was probably the most
    requested control not yet available to UWP developers. The WCT `TabView` control
    included support for customizing, closing, and dragging and dropping tabs. `TabView`
    has also graduated to the WinUI 2 libraries, becoming available in WinUI 2.2 and
    later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A year later, in fall 2019, WCT 6.0 brought XAML Islands controls to all WinForms,
    WPF, and C++ Win32 developers, adding support for .NET Core 3 clients. The other
    major improvement in this release was adding ARM64 development support. In June
    2020, the team announced WCT 6.1, as well as upcoming previews of versions 7 and
    8\. Several previews of WCT 7.0 were released in 2020, and its final release came
    out in March 2021\. The toolkit’s 7.0 release included major project refactorings
    plus several major features. The most exciting feature was the first release of
    the `ViewModel` classes.
  prefs: []
  type: TYPE_NORMAL
- en: WCT 7.1 was released in September 2021\. It added some helper classes for Microsoft
    Graph and the Microsoft Identity platform, as well as some new controls, behaviors,
    shadows, and styles. In November 2021, version 7.1.2 was released. This was announced
    as the final release to include updates to .NET libraries in the toolkit, as these
    are all moving to the .NET Community Toolkit. All subsequent 7.x releases have
    been UWP-only updates.
  prefs: []
  type: TYPE_NORMAL
- en: The newly released WCT 8.0 supports WinUI 3\. Previously, creating WinUI 3 apps
    with .NET supported by WCT was only in preview in the new WCT repository. Trying
    these packages required building the toolkit libraries from source code as it
    has no published releases on GitHub. Now that they are available as stable NuGet
    packages, you can add them to your project as you would with any other package.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered some background and history of the WCT, we will take
    a quick look at some of the controls and components available in the toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the WCT Gallery app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier in this chapter, the **WCT Gallery app** is available
    from the Microsoft Store ([https://apps.microsoft.com/store/detail/windows-community-toolkit-gallery/9NBLGGH4TLCQ](https://apps.microsoft.com/store/detail/windows-community-toolkit-gallery/9NBLGGH4TLCQ)).
    It can be installed on Windows 10 version 17763 or later, on Windows 11, or even
    on your Xbox, Surface Hub, or HoloLens device. As with the **WinUI 3 Gallery**
    app we discussed in [*Chapter 5*](B20908_05.xhtml#_idTextAnchor114), *Exploring
    WinUI Controls*, the toolkit sample app provides us with an easy way to navigate
    and explore the contents of the WCT.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and launching the app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `windows community` in the **Search** box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.1 – Finding the app in the Microsoft Store](img/B20908_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 – Finding the app in the Microsoft Store
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Windows Community Toolkit Gallery** from the search results and click
    the **Install** button on the resulting page. Once the installation completes,
    the **Install** button will become an **Open** button. Open the WCT app from there
    or from the Windows Start menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.2 – The WCT Gallery app](img/B20908_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – The WCT Gallery app
  prefs: []
  type: TYPE_NORMAL
- en: The app opens to an overview page, where there are several highlighted controls,
    helpers, and behaviors. The top section also has some useful links to the WCT
    documentation, GitHub repository, and their Discord community.
  prefs: []
  type: TYPE_NORMAL
- en: 'The controls and other components are divided into seven sections on the left:
    **Animations**, **Controls**, **Extensions**, **Helpers**, **Layouts**, **Xaml**,
    and the app’s **Settings**. With so many controls in the toolkit, we will explore
    just a few of them and leave the rest for you to explore on your own.'
  prefs: []
  type: TYPE_NORMAL
- en: Controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Click the **Controls** navigation item at the left of the app to display a
    list of controls. This is the largest section of the app, with the controls grouped
    by category, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Input**: These are custom input controls (for example, **RadialGuage**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Layout**: Layout panels and related controls (for example, **HeaderedTreeView**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Media**: Controls for working with media (for example, **CameraPreview**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sizers**: These are content sizing controls (for example, **GridSplitter**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status and Info**: Controls for updating the user on progress or status.
    In the current version of the app, the section only contains the **MetadataControl**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Text**: These are types of text input controls (for example, **RichSuggestBox**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see some of the controls in the expanded navigation panel in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 9.3 – The Controls menu expanded in the WCT Gal\uFEFFlery app](img/B20908_09_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – The Controls menu expanded in the WCT Gallery app
  prefs: []
  type: TYPE_NORMAL
- en: Selecting one of these controls will open a page that contains several regions.
    The main panel is an interactive region where you can interact with the selected
    control. To the right of this panel, there are some drop-down boxes to update
    the control’s behavior and a button where you can toggle between a **Light** or
    **Dark** theme, which will update the controls running in the panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The right panel contains several controls to modify the display and behavior
    of the current controls. The number of controls seen on the right panel will vary
    depending on the selected control. The **View Code** button expands a XAML editor
    with the markup for the code running in the main panel. You can change the markup
    here, and your changes will be reflected in the code running in the main panel.
    The **C#** tab will display the C# code for the control. Below the interactive
    section of the page, control’s documentation from *Microsoft Learn* is displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.4 – Viewing the ImageCropper control in the WCT Gallery app](img/B20908_09_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.4 – Viewing the ImageCropper control in the WCT Gallery app
  prefs: []
  type: TYPE_NORMAL
- en: 'Take some time to explore the **ImageCropper** control and **MarkdownTextBlock**
    in the **Controls** section of the toolkit. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **ImageCropper** control and give it a try. Click the **Crop Shape**
    drop-down control, select **Circular**, and watch the cropped area change to a
    circle shape.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, select the **RangeSelector** control in the left panel. This control’s
    page is similar, but on the main panel, there is a RangeSelector control where
    two sliders can be moved to select minimum and maximum points for the range. The
    **Minimum** and **Maximum** allowed values can be controlled from the right side
    of the panel as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.5 – RangeSelector running in the WCT Gallery app](img/B20908_09_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.5 – RangeSelector running in the WCT Gallery app
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down to see an example use of the control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are many more controls you can explore in this part of the app. You should
    take some time to find out which might be useful in your next project.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored a couple of the controls in the sample app, let’s
    try using them in a WinUI project.
  prefs: []
  type: TYPE_NORMAL
- en: Using controls from the toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We explored a handful of the WCT controls in the sample app in the previous
    section. Now, it’s time to use them in a WinUI project. To demonstrate some of
    the controls in action, we are going to create a new **WinUI 3 in** **Desktop**
    project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'At the time of writing, the WCT controls are not recommended for use in production
    apps and have some caveats. To learn more about the current limitations, you can
    read this Microsoft blog post: [https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-for-project-reunion-0-5/](https://devblogs.microsoft.com/ifdef-windows/windows-community-toolkit-for-project-reunion-0-5/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the WinUI project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To start our WCT project, you will have to launch Visual Studio and follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new project. Then, on the `WinUI in Desktop` in the search field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Several project types will be displayed, but one of the top results will be
    **Blank App, Packaged (WinUI 3 in Desktop)**. Select this project template for
    the language of your choice and click **Next**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Name the project `HardwareSupplies` and click the `App.xaml` and `MainWindow.xaml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.6 – The HardwareSupplies project in Visual Studio Solution Explorer](img/B20908_09_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.6 – The HardwareSupplies project in Visual Studio Solution Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'If you open the `MainWindow.xaml` file, you will see some simple starter markup.
    There is a `StackPanel` control containing a `Button` control named `myButton`
    with `Click Me` as its content. This is what the code looks like:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `myButton` control’s `Click` event has a `myButton_Click` event handler
    in `MainWindow.xaml.cs` that changes the `myButton` variable’s content to `Clicked`,
    as illustrated in the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before we make any changes, run the application and test the button to make
    sure everything is working as expected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 9.7 – Running the HardwareSupplies app\uFEFF for the first time](img/B20908_09_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 9.7 – Running the HardwareSupplies app for the first time
  prefs: []
  type: TYPE_NORMAL
- en: Everything is working as expected. Next, we’re going to add WCT package references
    to the project.
  prefs: []
  type: TYPE_NORMAL
- en: Referencing WCT packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The primary control we need for the app is a `DataGrid` control that displays
    a list of hardware items. We will also add a `HeaderedContentControl` control
    and a `DropShadowPanel` control to get an idea of how those controls can be used.
    Most of the WCT controls are part of the `DataGrid` is in the `communitytoolkit.winui`,
    and add the latest version of those two packages to the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.8 – Adding the WCT NuGet packages](img/B20908_09_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.8 – Adding the WCT NuGet packages
  prefs: []
  type: TYPE_NORMAL
- en: After installing these two packages, close the package manager window and compile
    the project to ensure all the packages are downloaded. Next, we will set up some
    data for the `DataGrid` control.
  prefs: []
  type: TYPE_NORMAL
- en: Adding data to the DataGrid control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most important part of any `DataGrid` control is the data being presented
    to the user. Before we start building the UI, we’re going to build a small inventory
    of hardware data to display. Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by adding a new class to the `HardwareSupplies` project named `HardwareItem`.
    The class will have six properties, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, open the `MainWindow.xaml.cs` file. Create a public property named `HardwareItems`
    and define it as an array of `HardwareItem`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, create a new method named `PopulateItems`. This method will initialize
    the `HardwareItems` array and populate it with 12 items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The app now has a nice assortment of screws, nails, and electrical items to
    present in the `DataGrid` control.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remove the `myButton_Click` event handler, as it’s no longer needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, call `PopulateItems` at the end of the `MainWindow` constructor:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The data is ready to go. Let’s move on and define the XAML markup for `MainWindow`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding controls to the MainWindow control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The UI for our app will be simple. We will display the data in a `DataGrid`
    control with a drop shadow beneath some header text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DropShadowPanel` control will be removed from the toolkit in the future.
    You can consider using the `AttachedDropShadow` or `AttachedCardShadow` control
    as alternatives. For more information, read about **Attached** **Shadows**: [https://learn.microsoft.com/windows/communitytoolkit/helpers/attachedshadows](https://learn.microsoft.com/windows/communitytoolkit/helpers/attachedshadows).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Proceed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by placing a `HeaderedContentControl` control inside a `Grid` control
    in `MainWindow.xaml`. Set the `Header` attribute to `Hardware Inventory`. This
    will display at the top of `MainWindow` control’s content. Set `Margin` to `6`
    to leave some space around the edges of the control:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Don’t forget to add a namespace definition for the WCT controls, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, define a `DropShadowPanel` control as the content of `HeaderedContentControl`.
    `BlurRadius` defines the width of the blurred area of the drop shadow. A `ShadowOpacity`
    value of `1` indicates that the darkest part of the shadow will be completely
    opaque. Most of this will be behind the `DataGrid` control. The `OffsetX` and
    `OffsetY` values will shift the drop shadow over and down by `2` pixels. The `Color`
    attribute sets the color of the shadow. Setting `IsMasked` to `True` creates a
    more precise shadow but degrades performance. In our case, performance will not
    be a concern. Finally, we’ll set `Margin` to `6` to leave some space to see the
    drop shadow:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Lastly, add `DataGrid` as a child of `DropShadowPanel`. The grid will bind
    to the `HardwareItems` property we created. The `AutoGenerateColumns` property
    will create column headers using the names of the `HardwareItem` objects’ properties.
    By setting `Background` and `AlternatingRowBackground` to `ThemeResource` styles,
    the grid will look great for Windows users who use either the `DataGrid` will
    be transparent, and the gray drop shadow will obscure the contents of the grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The app’s code is complete. It’s time to build and run the app to see how everything
    looks:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.9 – The HardwareSupplies app running with data](img/B20908_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.9 – The HardwareSupplies app running with data
  prefs: []
  type: TYPE_NORMAL
- en: Here, you can see that, with a little bit of code, we have a pretty nice-looking
    app to display some hardware inventory data. The header text, drop shadow, and
    rich `DataGrid` control work well together to create our UI.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s finish up our exploration of the WCT by looking at some of the other components
    available in the toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the toolkit’s helpers, services, and extensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have discussed many of the controls in the WCT, but the toolkit contains
    much more than UI controls. In this section, we will return to the WCT sample
    app to explore some of the other components available in the toolkit. We’ll start
    with some helper classes.
  prefs: []
  type: TYPE_NORMAL
- en: Helpers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next to the controls in the toolkit, the **Helpers** section contains the largest
    number of components. As with the controls, the helpers are divided into categories
    in the sample app, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Data**: These helpers relate to loading and displaying data. Examples include
    **ImageCache**, **ObservableGroup**, and **Incremental** **Loading Collection**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Developer**: These are helpers that are useful for developers and include
    **DispatcherQueueHelper** for updating the UI from a background thread.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Notifications**: These helpers provide customized ways of notifying users
    with Windows notifications and the Start menu. Included are **LiveTile**, **Toast**,
    and **WeatherLiveTileAndToast**. However, we already saw in the previous chapter
    that Windows App SDK now has built-in support for notifications in WinUI 3 apps.
    These toolkit helpers are useful for UWP developers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CanvasGeometry` class using **Win2D**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**State Triggers**: There are currently 10 state trigger helpers in the toolkit,
    including **IsNullOrEmptyStateTrigger**, **FullScreenModeStateTrigger**, and **RegexStateTrigger**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Systems**: The 14 system helpers currently include **CameraHelper**, **NetworkHelper**,
    **PrintHelper**, and **ThemeListener**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It’s time to take a closer look at one of the helpers in the toolkit. Let’s
    see what the `SystemInformation` helper class offers. This is a static class that
    contains a long list of useful information about the running application and the
    user’s system. These are just a handful of the available properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ApplicationName`: The application’s name'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApplicationVersion`: The application version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AvailableMemory`: The available system memory'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Culture`: The current culture set in Windows'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeviceFamily`: The name of the user’s device family'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeviceModel`: The model number of the current device'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FirstUseTime`: The first time the app was launched'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsAppUpdated`: Indicates if this is the first time the app has been run after
    being updated'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LaunchCount`: The number of times the app has been launched since a system
    reset'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OperatingSystem`: The name of the operating system'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OperatingSystemVersion`: The operating system version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many other helpers you can explore in the sample app. We’ll finish
    up by reviewing some of the other tools in the **Extensions** area of the WCT
    sample app.
  prefs: []
  type: TYPE_NORMAL
- en: Extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Extensions** menu in the sample app contains several items that add extended
    properties to WinUI controls and extension methods to other classes. We will review
    **FrameworkElementExtensions** (formerly known as the **Mouse** extensions) and
    **StringExtensions** here.
  prefs: []
  type: TYPE_NORMAL
- en: '`FrameworkElement` control in order to set the mouse cursor to display when
    the mouse moves over that element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**StringExtensions** contains a few extension methods related to string data,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IsEmail`: Determines whether a string is a valid email address format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsDecimal`: Determines whether a string is a decimal value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsNumeric`: Determines whether a string is a numeric value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsPhoneNumber`: Determines whether a string contains a valid phone number
    format'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsCharacterString`: Determines whether a string contains only letters'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DecodeHtml`: Returns a string with any HTML formatting, tags, comments, scripts,
    and styles removed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FixHtml`: Similar to `DecodeHtml`, it returns a string with all HTML formatting,
    comments, scripts, and styles removed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Truncate`: Truncates a string to a specified length, optionally adding an
    ellipsis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Truncate` extension includes two overloads. This code will truncate the
    `name` string so that it’s no longer than 10 characters. It will truncate the
    `city` string to seven characters and add an ellipsis to the end of the string
    to indicate that it was truncated, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: I encourage you to explore these extensions, and all the others in the WCT.
    The sample app is a great way to visually explore the toolkit and get ideas of
    how to integrate it into your own projects.
  prefs: []
  type: TYPE_NORMAL
- en: Before we wrap up, let’s briefly discuss the .NET Community Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: .NET Community Toolkit features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The .NET Community Toolkit can be leveraged by all .NET developers. In [*Chapter
    3*](B20908_03.xhtml#_idTextAnchor073), *MVVM for Maintainability and Testability*,
    we used the MVVM Toolkit, which is part of the .NET Community Toolkit. There are
    several other features of this toolkit, primarily targeting performance and diagnostics.
  prefs: []
  type: TYPE_NORMAL
- en: The `Guard` and `ThrowHelper`.
  prefs: []
  type: TYPE_NORMAL
- en: '`Guard` APIs are used to validate the arguments passed into your .NET methods.
    They are created to be fast, with minimal impact on the performance of your applications.
    Here are a few examples of their use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can view a complete set of helper methods in the *Microsoft Learn* documentation:
    [https://learn.microsoft.com/dotnet/api/microsoft.toolkit.diagnostics.guard#methods](https://learn.microsoft.com/dotnet/api/microsoft.toolkit.diagnostics.guard#methods).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `ThrowHelper` class is a performant, efficient method of throwing exceptions.
    It’s intended to work well with `Guard` helpers. The syntax is similar to the
    built-in way of throwing exceptions in .NET. This code could be used to throw
    an `ArgumentException` exception from our `TestData` method shown previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The **CommunityToolkit.HighPerformance** package includes helpers and extensions
    for code focused on high performance. Once again, the package is available for
    .NET and .NET Standard targets.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following members are available in the **HighPerformance** package:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Span2D<T>`: This type has the same functionality as a `Span<T>` type but supports
    2D memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Memory2D<T>`: This type has the same functionality as a `Memory<T>` type but
    supports 2D memory locations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SpanOwner<T>`: This type is a stack-only buffer that leverages a shared memory
    pool to borrow memory only used in synchronous code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MemoryOwner<T>`: This type is another buffer type. It implements `IMemoryOwner<T>`
    and is a lightweight wrapper around `ArrayPool<T>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`StringPool`: This type is a configurable pool of `string` objects. It can
    improve performance when creating a large number of strings from buffers or streams.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ParallelHelper`: This helper class contains a set of APIs for working with
    parallel code in .NET. It has multiple overloads of the following helper methods:
    `For`, `For2D`, and `ForEach`. Each of these helper methods creates an optimized
    parallel loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Ref<T>`: This type is a stack-only type that stores a reference to a value.
    It can be used in place of a `ref T` value in C# code, as they’re not otherwise
    supported. There is also a `ReadOnlyRef<T>` type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For an in-depth description of these types and scenarios for their use, you
    should check out the documentation on *Microsoft Learn*: [https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction](https://learn.microsoft.com/dotnet/communitytoolkit/high-performance/introduction).
    The source code for the .NET Community Toolkit is available on GitHub: [https://github.com/CommunityToolkit/dotnet](https://github.com/CommunityToolkit/dotnet).'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s wrap up and review what we’ve learned in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the controls, helpers, services, and other
    components available to WinUI developers in the WCT and the .NET Community Toolkit.
    We also practiced adding some of the WCT controls into a WinUI 3 project, leveraging
    the powerful `DataGrid` control. Finally, we installed and used the WCT sample
    app to discover the controls and components in the toolkit that we can use in
    our apps. Adding WCT packages to your application will provide controls with rich
    functionality and extensions that save you time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be working with the **Template Studio for WinUI**
    extension for Visual Studio to learn how you can quickly create a new WinUI app
    with rich controls and components included.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What was the original name of the WCT?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which WCT legacy browser control can be used in WPF or WinForms apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which WCT control can render markdown output?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which helper in the WCT can manage and group items into an observable collection?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the name of the Visual Studio project template for running WinUI 3 apps?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of these was moved to the .NET Community Toolkit: `DataGrid` control,
    MVVM Toolkit, or `PrintHelper`?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which extension class in the WCT contains methods to validate strings, including
    `IsEmail` and `IsPhoneNumber`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which WCT extension can update the Windows cursor at the control level?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
