["```cs\n\"{module name}\": {\n    \"{key}\": \"Module configs\"\n}\n```", "```cs\npublic record class BasketItem(int CustomerId, int ProductId, int Quantity);\n```", "```cs\nnamespace REPR.Baskets;\npublic sealed class Constants\n{\n    public const string ModuleName = nameof(Baskets);\n}\n```", "```cs\nnamespace REPR.Baskets;\npublic static class BasketModuleExtensions\n{\n    public static IEndpointRouteBuilder MapBasketModule(this IEndpointRouteBuilder endpoints)\n    {\n        _ = endpoints\n            .MapGroup(Constants.ModuleName.ToLower())\n            .WithTags(Constants.ModuleName)\n            .AddFluentValidationFilter()\n            // Map endpoints\n            .MapFetchItems()\n            .MapAddItem()\n            .MapUpdateQuantity()\n            .MapRemoveItem()\n        ;\n        return endpoints;\n    }\n}\n```", "```cs\nnamespace REPR.Products.Data;\npublic class ProductContext : DbContext\n{\n    public ProductContext(DbContextOptions<ProductContext> options)\n        : base(options) { }\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n        modelBuilder.HasDefaultSchema(Constants.ModuleName.ToLower());\n    }\n    public DbSet<Product> Products => Set<Product>();\n}\n```", "```cs\nnamespace REPR.Baskets.Data;\npublic class BasketContext : DbContext\n{\n    public BasketContext(DbContextOptions<BasketContext> options)\n        : base(options) { }\n    public DbSet<BasketItem> Items => Set<BasketItem>();\n    public DbSet<Product> Products => Set<Product>();\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n        base.OnModelCreating(modelBuilder);\n        modelBuilder.HasDefaultSchema(Constants.ModuleName.ToLower());\n        modelBuilder\n            .Entity<BasketItem>()\n            .HasKey(x => new { x.CustomerId, x.ProductId })\n        ;\n    }\n}\n```", "```cs\n<PackageReference Include=\"MassTransit\" Version=\"8.1.0\" />\n```", "```cs\nbuilder.Services.AddMassTransit(x =>\n{\n    x.SetKebabCaseEndpointNameFormatter();\n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n    x.AddBasketModuleConsumers();\n});\n```", "```cs\npublic static void AddBasketModuleConsumers(this IRegistrationConfigurator configurator)\n{\n    configurator.AddConsumers(typeof(ProductEventsConsumers));\n}\n```", "```cs\nnamespace REPR.Products.Contracts;\npublic record class CreateProductCommand(string Name, decimal UnitPrice);\npublic record class CreateProductResponse(int Id, string Name, decimal UnitPrice);\npublic record class DeleteProductCommand(int ProductId);\npublic record class DeleteProductResponse(int Id, string Name, decimal UnitPrice);\n```", "```cs\nnamespace REPR.Products.Contracts;\npublic record class ProductCreated(int Id, string Name, decimal UnitPrice);\npublic record class ProductDeleted(int Id);\n```", "```cs\nnamespace REPR.Products.Features;\npublic class CreateProductHandler\n{\n    private readonly ProductContext _db;\n    private readonly CreateProductMapper _mapper;\n    private readonly IBus _bus;\n    public CreateProductHandler(ProductContext db, CreateProductMapper mapper, IBus bus)\n    {\n        _db = db ?? throw new ArgumentNullException(nameof(db));\n        _mapper = mapper ?? throw new ArgumentNullException(nameof(mapper));\n        _bus = bus ?? throw new ArgumentNullException(nameof(bus));\n    }\n    public async Task<CreateProductResponse> HandleAsync(CreateProductCommand command, CancellationToken cancellationToken)\n    {\n        var product = _mapper.Map(command);\n        var entry = _db.Products.Add(product);\n        await _db.SaveChangesAsync(cancellationToken);\n        var productCreated = _mapper.MapToIntegrationEvent(entry.Entity);\n        await _bus.Publish(productCreated, CancellationToken.None);\n        var response = _mapper.MapToResponse(entry.Entity);\n        return response;\n    }\n}\n```", "```cs\nnamespace REPR.Products.Features;\n[Mapper]\npublic partial class CreateProductMapper\n{\n    public partial Product Map(CreateProductCommand product);\n    public partial ProductCreated MapToIntegrationEvent(Product product);\n    public partial CreateProductResponse MapToResponse(Product product);\n}\n```", "```cs\nnamespace REPR.Baskets.Data;\npublic record class Product(int Id);\n```", "```cs\npublic DbSet<Product> Products => Set<Product>();\n```", "```cs\nusing REPR.Products.Contracts;\nnamespace REPR.Baskets.Features;\npublic class ProductEventsConsumers : IConsumer<ProductCreated>, IConsumer<ProductDeleted>\n{\n    private readonly BasketContext _db;\n    private readonly ILogger _logger;\n    public ProductEventsConsumers(BasketContext db, ILogger<ProductEventsConsumers> logger)\n    {\n        _db = db ?? throw new ArgumentNullException(nameof(db));\n        _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n    }\n    public async Task Consume(ConsumeContext<ProductCreated> context) \n    {...}\n    public async Task Consume(ConsumeContext<ProductDeleted> context) \n    {...}\n}\n```", "```cs\npublic async Task Consume(ConsumeContext<ProductCreated> context)\n{\n    var product = await _db.Products.FirstOrDefaultAsync(\n        x => x.Id == context.Message.Id,\n        cancellationToken: context.CancellationToken\n    );\n    if (product is not null)\n    {\n        return;\n    }\n    _db.Products.Add(new(context.Message.Id));\n    await _db.SaveChangesAsync();\n}\n```", "```cs\npublic async Task Consume(ConsumeContext<ProductDeleted> context)\n{\n    var item = await _db.Products.FirstOrDefaultAsync(\n        x => x.Id == context.Message.Id,\n        cancellationToken: context.CancellationToken\n    );\n    if (item is null)\n    {\n        return;\n    }\n    // Remove the products from existing baskets\n    var existingItemInCarts = _db.Items\n        .Where(x => x.ProductId == context.Message.Id);\n    var count = existingItemInCarts.Count();\n    _db.Items.RemoveRange(existingItemInCarts);\n    // Remove the product from the internal cache\n    _db.Products.Remove(item);\n    // Save the changes\n    await _db.SaveChangesAsync();\n}\n```", "```cs\nusing FluentValidation;\nusing FluentValidation.AspNetCore;\nusing MassTransit;\nusing REPR.API.HttpClient;\nusing REPR.Baskets;\nusing REPR.Products;\nusing System.Reflection;\nvar builder = WebApplication.CreateBuilder(args);\n// Register fluent validation\nbuilder.AddFluentValidationEndpointFilter();\nbuilder.Services\n    .AddFluentValidationAutoValidation()\n    .AddValidatorsFromAssemblies(new[] {\n        Assembly.GetExecutingAssembly(),\n        Assembly.GetAssembly(typeof(BasketModuleExtensions)),\n        Assembly.GetAssembly(typeof(ProductsModuleExtensions)),\n    })\n;\nbuilder.AddApiHttpClient();\nbuilder.AddExceptionMapper();\nbuilder\n    .AddBasketModule()\n    .AddProductsModule()\n;\nbuilder.Services.AddMassTransit(x =>\n{\n    x.SetKebabCaseEndpointNameFormatter();\n    x.UsingInMemory((context, cfg) =>\n    {\n        cfg.ConfigureEndpoints(context);\n    });\n    x.AddBasketModuleConsumers();\n});\n```", "```cs\nvar app = builder.Build();\napp.UseExceptionMapper();\napp\n    .MapBasketModule()\n    .MapProductsModule()\n;\n// Convenience endpoint, seeding the catalog\napp.MapGet(\"/\", async (IWebClient client, CancellationToken cancellationToken) =>\n{\n    await client.Catalog.CreateProductAsync(new(\"Banana\", 0.30m), cancellationToken);\n    await client.Catalog.CreateProductAsync(new(\"Apple\", 0.79m), cancellationToken);\n    await client.Catalog.CreateProductAsync(new(\"Habanero Pepper\", 0.99m), cancellationToken);\n    return new\n    {\n        Message = \"Application started and catalog seeded. Do not refresh this page, or it will reseed the catalog.\"\n    };\n});\napp.Run();\n```", "```cs\nusing Refit;\nusing REPR.Products.Contracts;\nnamespace REPR.API.HttpClient;\npublic interface IProductsClient\n{\n    [Get(\"/products/{query.ProductId}\")]\n    Task<FetchOneProductResponse> FetchProductAsync(\n        FetchOneProductQuery query,\n        CancellationToken cancellationToken);\n    [Get(\"/products\")]\n    Task<FetchAllProductsResponse> FetchProductsAsync(\n        CancellationToken cancellationToken);\n    [Post(\"/products\")]\n    Task<CreateProductResponse> CreateProductAsync(\n        CreateProductCommand command,\n        CancellationToken cancellationToken);\n    [Delete(\"/products/{command.ProductId}\")]\n    Task<DeleteProductResponse> DeleteProductAsync(\n        DeleteProductCommand command,\n        CancellationToken cancellationToken);\n}\n```", "```cs\n{\n  \"Downstream\": {\n    \"Baskets\": {\n      \"BaseAddress\": \"https://localhost:7164/\"\n    },\n    \"Products\": {\n      \"BaseAddress\": \"https://localhost:7164/\"\n    }\n  }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Refit;\nnamespace REPR.API.HttpClient;\npublic static class ApiHttpClientExtensions\n{\n    public static WebApplicationBuilder AddApiHttpClient(this WebApplicationBuilder builder)\n    {\n        const string basketsBaseAddressKey = \"Downstream:Baskets:BaseAddress\";\n        const string productsBaseAddressKey = \"Downstream:Products:BaseAddress\";\n        var basketsBaseAddress = builder.Configuration\n            .GetValue<string>(basketsBaseAddressKey) ?? throw new BaseAddressNotFoundException(basketsBaseAddressKey);\n        var productsBaseAddress = builder.Configuration\n            .GetValue<string>(productsBaseAddressKey) ?? throw new BaseAddressNotFoundException(productsBaseAddressKey);\n        builder.Services\n            .AddRefitClient<IBasketsClient>()\n            .ConfigureHttpClient(c => c.BaseAddress = new Uri(basketsBaseAddress))\n        ;\n        builder.Services\n            .AddRefitClient<IProductsClient>()\n            .ConfigureHttpClient(c => c.BaseAddress = new Uri(productsBaseAddress))\n        ;\n        builder.Services.AddTransient<IWebClient, DefaultWebClient>();\n        return builder;\n    }\n}\n```", "```cs\nPOST https://localhost:7164/baskets\nContent-Type: application/json\n{\n    \"customerId\": 1, \n    \"productId\": 5, \n    \"quantity\": 99\n}\n```", "```cs\nHTTP/1.1 400 Bad Request\nContent-Type: application/problem+json\n{\n  \"type\": \"https://tools.ietf.org/html/rfc9110#section-15.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"errors\": {\n    \"productId\": [\n      \"The Product does not exist.\"\n    ]\n  }\n}\n```", "```cs\nnamespace REPR.Baskets.Features;\npublic class AddItemValidator : AbstractValidator<AddItemCommand>\n{\n    private readonly BasketContext _db;\n    public AddItemValidator(BasketContext db)\n    {\n        _db = db ?? throw new ArgumentNullException(nameof(db));\n        RuleFor(x => x.CustomerId).GreaterThan(0);\n        RuleFor(x => x.ProductId)\n            .GreaterThan(0)\n            .MustAsync(ProductExistsAsync)\n            .WithMessage(\"The Product does not exist.\")\n        ;\n        RuleFor(x => x.Quantity).GreaterThan(0);\n    }\n    private async Task<bool> ProductExistsAsync(int productId, CancellationToken cancellationToken)\n    {\n        var product = await _db.Products\n            .FirstOrDefaultAsync(x => x.Id == productId, cancellationToken);\n        return product is not null;\n    }\n}\n```"]