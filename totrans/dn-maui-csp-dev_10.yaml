- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Consuming REST Services
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消费 REST 服务
- en: Up until now, when we needed data, we faked it by using hardcoded objects. In
    a real-world program, however, you will get most of your data from local databases
    (as discussed in [*Chapter 8*](B19723_08.xhtml#_idTextAnchor144)), or you will
    interact with a service in the cloud through an API. You can interact using one
    of several architectures, of which the most popular for .NET MAUI is, arguably,
    **Representational State** **Transfer** (**REST**).
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，当我们需要数据时，我们通过使用硬编码的对象来伪造它。然而，在现实世界的程序中，你将大部分数据从本地数据库（如[*第 8 章*](B19723_08.xhtml#_idTextAnchor144)中讨论的）中获取，或者你将通过
    API 与云中的服务交互。你可以使用几种架构之一进行交互，其中最流行的是 .NET MAUI 的 **表示状态转移**（**REST**）。
- en: REST is a pattern that describes how classes interact across the internet. The
    key to REST is that it is stateless – that is, a sustained connection between
    the client and the API is not needed.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: REST 是一种描述类如何在互联网上交互的模式。REST 的关键是它是无状态的——也就是说，客户端和 API 之间不需要持续连接。
- en: 'The Forget Me Not architecture is designed to use a REST service and database,
    which will manage membership, authentication, and persistence of user data. In
    this chapter, we will look at the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 忘不了架构被设计为使用 REST 服务和数据库，这将管理会员资格、身份验证和用户数据的持久化。在本章中，我们将查看以下内容：
- en: Using REST services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 REST 服务
- en: The Forget Me Not API architecture
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 忘不了 API 架构
- en: API domain objects
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 领域对象
- en: '**Data Transfer** **Objects** (**DTOs**)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据传输对象**（**DTOs**）'
- en: The API Client class
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API 客户端类
- en: Using the API
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 API
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow along with this chapter, you will need Visual Studio. If you are going
    to enter the code as you follow along, you’ll want the branch for the previous
    chapter.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章内容，你需要 Visual Studio。如果你打算在跟随时输入代码，你将需要上一章的分支。
- en: The source code for the finished project for this chapter can be found at [https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/REST](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/REST).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成项目的源代码可以在[https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/REST](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/REST)找到。
- en: Using REST Services
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 REST 服务
- en: Until now, all the work we’ve been doing has been local to a device (a phone,
    Windows, or Mac). The design of Forget Me Not entails the use of a service in
    the cloud that will manage all our data – invitations to a program, registration,
    authentication, data persistence, and so on.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的一切工作都是本地化的（一个手机、Windows 或 Mac）。忘不了的设计涉及到在云端使用一个服务来管理我们所有的数据——程序邀请、注册、身份验证、数据持久化等等。
- en: A client interacts with a server through a **REST API** (also called a RESTful
    API).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端通过 **REST API**（也称为 RESTful API）与服务器交互。
- en: An `ForgetMeNot.API`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `ForgetMeNot.API`。
- en: Knowing more about REST
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于 REST
- en: For our purposes, that is really all you need to know about REST, but if you
    are curious, you can find out more at [https://en.wikipedia.org/wiki/Representational_state_transfer](https://en.wikipedia.org/wiki/Representational_state_transfer).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的来说，这就是你需要了解的所有关于 REST 的内容，但如果你好奇，你可以在[https://en.wikipedia.org/wiki/Representational_state_transfer](https://en.wikipedia.org/wiki/Representational_state_transfer)上找到更多信息。
- en: The Forget Me Not API architecture
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 忘不了 API 架构
- en: When we looked at getting a user’s preferences in [*Chapter 8*](B19723_08.xhtml#_idTextAnchor144),
    we used the Preference Service. That service, until now, used a method to return
    hardcoded values. That, of course, was a temporary expedient so that we could
    focus on one thing at a time. We are ready now to interact with the online API.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在[*第 8 章*](B19723_08.xhtml#_idTextAnchor144)中查看获取用户偏好时，我们使用了偏好服务。这个服务，直到现在，使用了一种返回硬编码值的方法。当然，这是一个临时的权宜之计，这样我们就可以一次专注于一件事情。我们现在准备好与在线
    API 交互了。
- en: Where’s the service?
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 服务在哪里？
- en: I have created an online web service on Azure at [https://forgetmenotapi20230113114628.azurewebsites.net/](https://forgetmenotapi20230113114628.azurewebsites.net/).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在 Azure 上创建了一个在线的 Web 服务，网址是[https://forgetmenotapi20230113114628.azurewebsites.net/](https://forgetmenotapi20230113114628.azurewebsites.net/)。
- en: It is my goal to keep this up and running so that you can implement the client
    and get meaningful results, but given that there may be maintenance costs, by
    the time you read this, the service may no longer be in place. If that is true,
    you can still get 95% of what you need by reading the API code and using hardcoded
    data, as we’ve been doing up until now.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我的目的是保持这个服务的运行，以便你可以实现客户端并得到有意义的结果，但鉴于可能存在维护成本，在你阅读这段文字的时候，该服务可能已经不再可用。如果是这样，你仍然可以通过阅读
    API 代码和使用硬编码的数据来获得你需要的 95%，就像我们到目前为止所做的那样。
- en: Also, note that just going to the URL won’t get you anywhere. It is when we
    combine that base URL with the specific task-based additions that the magic happens.
    You can test whether the API is still available by creating an account or signing
    into one. If that works, then the rest of the API should work as well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请注意，仅仅访问 URL 是没有用的。只有当我们结合基本 URL 和特定任务相关的补充时，才会发生魔法。你可以通过创建一个账户或登录一个账户来测试
    API 是否仍然可用。如果这可行，那么 API 的其余部分也应该可以正常工作。
- en: To facilitate our REST interactions with the API, we will use the extremely
    popular open source `RestSharp` library ([https://restsharp.dev/](https://restsharp.dev/)).
    It will do all the heavy lifting for us. (We’ll be using the `class` library template.)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便我们与 API 的 REST 交互，我们将使用非常流行的开源 `RestSharp` 库 ([https://restsharp.dev/](https://restsharp.dev/))。它将为我们做所有繁重的工作。（我们将使用
    `class` 库模板。）
- en: Creating the projects
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建项目
- en: 'To get started, we’ll need three new projects. Right-click on **Solution**
    and choose **Add New Project**. The three projects are named:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，我们需要三个新的项目。右键单击 **解决方案** 并选择 **添加新项目**。这三个项目的名称是：
- en: '`ForgetMeNot.API.Domain` (API domain objects)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForgetMeNot.API.Domain` (API 域对象)'
- en: '`ForgetMeNot.API.Dto` (DTOs)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForgetMeNot.API.Dto` (DTOs)'
- en: '`ForgetMeNot.ApiClient` (a wrapper for the API)'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ForgetMeNot.ApiClient` (API 的包装器)'
- en: '`Api.Doman` and `API.Dto` are both class libraries. `APIClient` is a `webapi`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`Api.Doman` 和 `API.Dto` 都是类库。`APIClient` 是一个 `webapi`。'
- en: We’ll look at each of these in turn, filling in all the details.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将依次查看这些项目，填写所有详细信息。
- en: Because we’ll be using the API database, we can remove the local SQLite database.
    To do so, comment out or remove the `Constants` file and the entire `ForgetMeNotDemoDatabase.cs`
    file.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们将使用 API 数据库，我们可以删除本地 SQLite 数据库。为此，注释掉或删除 `Constants` 文件和整个 `ForgetMeNotDemoDatabase.cs`
    文件。
- en: Fleshing out the models
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完善模型
- en: Before we create classes that correspond to the items in our model classes,
    we need to flesh them out.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建与我们的模型类中的项目对应的类之前，我们需要完善它们。
- en: Let’s start with the `Preference` class in the `Model` directory. We had added
    an `Id` property for SQLite; we won’t need that anymore, so we can remove it.
    Remove it from `PreferencesTests.AfterCallingInitPreferencesIsNotEmpty()` as well.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 `Model` 目录中的 `Preference` 类开始。我们为 SQLite 添加了一个 `Id` 属性；我们不再需要它了，所以我们可以将其删除。同时，从
    `PreferencesTests.AfterCallingInitPreferencesIsNotEmpty()` 中也删除它。
- en: 'The design spec says that a user can invite a friend to be a buddy. We’ll need
    to add a model to describe the invitation:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 设计规范说明，用户可以邀请朋友成为伙伴。我们需要添加一个模型来描述邀请：
- en: '[PRE0]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Similarly, we need to keep track of *occasions*, such as birthdays and anniversaries,
    so that we remember to use Forget Me Not to buy a present:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们需要跟踪 *场合*，例如生日和周年纪念日，以便我们记得使用“忘不了”来购买礼物：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We’ll need a couple more `Model` classes, such as `User` and its derived class,
    `Buddy`. The owner of the app is a user, as are all their buddies. Here is the
    `User` `Model` class:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要几个额外的 `Model` 类，例如 `User` 和它的派生类 `Buddy`。应用的所有者是一个用户，以及他们所有的伙伴。以下是 `User`
    `Model` 类：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '`[1]` We’ve migrated the ID up here to the base class. We won’t need it for
    the (now non-existent) local database, but we will need the ID on the server.
    It is a string because the server will create a **Globally Unique** **ID** (**GUID**).'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 我们已经将 ID 迁移到了基类。对于（现在不再存在的）本地数据库，我们不再需要它，但我们需要在服务器上使用 ID。它是一个字符串，因为服务器将创建一个
    **全局唯一** **ID** (**GUID**)。'
- en: '`[2]` Each user can have any number of `Buddies`.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 每个用户可以有任意数量的 `Buddies`。'
- en: '`[3]` Each user can send out any number of invitations.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`[3]` 每个用户可以发送任意数量的邀请。'
- en: '`[4]` Each user will have a list of `Preference` objects.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`[4]` 每个用户将有一个 `Preference` 对象的列表。'
- en: Commented-out code
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注释掉的代码
- en: Note that the `invitations` property is commented out in the code present in
    the GitHub repository. Please uncomment it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，GitHub 仓库中现有的代码中，`invitations` 属性被注释掉了。请取消注释它。
- en: 'The `Buddy` class builds on this:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`Buddy` 类在此基础上构建：'
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Commented-out code
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注释掉的代码
- en: For now, do not uncomment `InvitationStatus` or `OccasionModel`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，请不要取消注释`InvitationStatus`或`OccasionModel`。
- en: We store a lot of information about each buddy, including how long they’ve been
    our buddy, shared occasions, and the status of the invitation we sent to the `Buddy`
    class.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们存储了关于每个伙伴的大量信息，包括他们成为我们伙伴的时间、共享的场合以及我们发送给`Buddy`类的邀请状态。
- en: Examining the API domain objects
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查API域对象
- en: 'The API domain objects are a superset of the `client model` classes. This is
    because there is data that the API will need that will not be visible on the client
    side. Right-click on **ForgetMeNot.API.Domain** and create the following classes:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: API域对象是`客户端模型`类的超集。这是因为API需要一些在客户端不可见的数据。右键单击**ForgetMeNot.API.Domain**并创建以下类：
- en: '`InvitationStatus`'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InvitationStatus`'
- en: '`Invite`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Invite`'
- en: '`Occasion`'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Occasion`'
- en: '`Related`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Related`'
- en: '`Roles`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Roles`'
- en: '`User`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`'
- en: '`UserPreference`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UserPreference`'
- en: 'Let’s walk through them, starting with `User` (note that this uses `UserPreference`,
    defined in the following code, so do not build until you have both classes):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一介绍它们，从`User`开始（注意，这个类使用了在以下代码中定义的`UserPreference`，所以不要构建，直到你有了这两个类）：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: As you can see, on the server, each `User` instance has a unique ID. Most of
    the other properties are the same as on the client, although they may not have
    the same identifier (for example, `FullName` rather than `Name`). This is not
    a problem, as we’ll do the mapping when we get the objects from the server.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，在服务器上，每个`User`实例都有一个唯一的ID。大多数其他属性与客户端上的相同，尽管它们可能没有相同的标识符（例如，`FullName`而不是`Name`）。这不是问题，因为当我们从服务器获取对象时，我们会进行映射。
- en: There are a few new fields, however – for example, `IsEmailConfirmed`, `HashedPassword`,
    and `Role`. These are used by the server for authentication.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有几个新的字段——例如，`IsEmailConfirmed`、`HashedPassword`和`Role`。这些由服务器用于身份验证。
- en: 'Let’s create the `Roles` file. It is a static class with the two roles we’ll
    support:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`Roles`文件。它是一个包含我们将支持的两种角色的静态类：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we’ll turn our attention to the `UserPreference` class. This corresponds
    to the `Preference` class in our client’s `Model` folder:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将关注`UserPreference`类。这对应于客户端`Model`文件夹中的`Preference`类：
- en: '[PRE6]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that the API is, in some ways, independent of the client. We’re calling
    the class by a different name, and we’re not using the code generators.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，API在某些方面是独立于客户端的。我们用不同的名字调用这个类，并且没有使用代码生成器。
- en: 'Next, we need classes to represent `Invitation` and `Occasion`. Let’s start
    with `Invitation`:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要代表`Invitation`和`Occasion`的类。让我们从`Invitation`开始：
- en: '[PRE7]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This class has a property of the `InvitationStatus` type. Create a file for
    that as well. This is just an enumeration:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类有一个`InvitationStatus`类型的属性。为此也创建一个文件。这只是一个枚举：
- en: '[PRE8]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here’s the `Occasion` class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`Occasion`类：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The purpose of `NumDaysToNotify` is to allow a user to designate how many days
    in advance of an occasion they want to be notified (that functionality is left
    as an exercise for you!).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumDaysToNotify`的目的允许用户指定他们希望在场合前多少天收到通知（这个功能留给你作为练习！）。'
- en: 'Finally, we add a class whose job is to tie a user to all their `Occasions`
    and buddies. Note that we use `User` for `Buddy`, as the base class has all the
    information we need:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们添加一个将用户与其所有的`Occasions`和伙伴关联起来的类。注意，我们使用`User`作为`Buddy`，因为基类包含了我们所需的所有信息：
- en: '[PRE10]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: That’s it for that project. There are no methods; it really is just a set of
    server-based model objects.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目就到这里了。没有方法；这实际上只是一组基于服务器的模型对象。
- en: Once we have the models, we need to determine how to transfer this data to and
    from the server. For that, we need DTOs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了模型，我们需要确定如何将数据从服务器传输到客户端以及从客户端传输回服务器。为此，我们需要DTOs（数据传输对象）。
- en: Reviewing DTOs
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 审查DTOs
- en: The `ForgetMeNot.Api.Dto` project will, as you might have guessed, hold DTOs.
    These will correspond to the model objects but are designed to be passed back
    and forth between the server and the client.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，`ForgetMeNot.Api.Dto`项目将包含DTOs。这些将对应于模型对象，但设计为在服务器和客户端之间来回传递。
- en: Project reference
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 项目引用
- en: You will need to add a project reference from `ForgetMeNot.Api.Dto` to `ForgetMeNot.Api.Domain`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要从`ForgetMeNot.Api.Dto`添加一个项目引用到`ForgetMeNot.Api.Domain`。
- en: 'Let’s start with `BuddyDto.cs`:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`BuddyDto.cs`开始：
- en: '[PRE11]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Note that the constructor for `Buddy` takes `User`. As noted earlier, the `Buddy`
    class derives from `User`, and by passing `User` into the constructor, we can
    set `Buddy`’s `User` properties.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`Buddy`的构造函数接受`User`。如前所述，`Buddy`类从`User`派生，通过将`User`传递到构造函数中，我们可以设置`Buddy`的`User`属性。
- en: Note that we are also using a list of `OccasionDto` objects. These are in the
    `ForgetMeNot.Api.Dto` project.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们还在使用 `OccasionDto` 对象的列表。这些在 `ForgetMeNot.Api.Dto` 项目中。
- en: Other DTO files
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他 DTO 文件
- en: 'The other key files in `ForgetMeNot.Api.Dto` are not tied to model classes
    but, rather, are data that is exchanged between client and server to facilitate
    managing the account – for example, `AccountCreateRequest`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`ForgetMeNot.Api.Dto` 中的其他关键文件与模型类无关，而是客户端和服务器之间交换的数据，以方便管理账户——例如，`AccountCreateRequest`：'
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is all that needs to be sent to the server when creating an account. There
    is a DTO to request an update to a user record that just contains `Id`, `FullName`,
    and `Email`. One important DTO is `UserResponse`, which contains information that
    corresponds to the `User` `Domain` object:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建账户时，需要将所有这些发送到服务器。有一个 DTO 用于请求更新用户记录，它只包含 `Id`、`FullName` 和 `Email`。一个重要的
    DTO 是 `UserResponse`，它包含与 `User` `Domain` 对象相对应的信息：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You pass in a `User` object and `UserResponse` turns it into a DTO.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 您传入一个 `User` 对象，`UserResponse` 会将其转换为 DTO。
- en: 'Similarly, you can pass a `User` object into `ProfileResponse` and get back
    a `ProfileResponse` DTO:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以将一个 `User` 对象传递到 `ProfileResponse` 中，并返回一个 `ProfileResponse` DTO：
- en: '[PRE14]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The final piece in the puzzle is to wrap the API in a client-side class to facilitate
    interactions with data in the cloud.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个拼图是包裹 API 在客户端类中，以方便与云中的数据进行交互。
- en: Understanding ForgetMeNot.APIClient
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 ForgetMeNot.APIClient
- en: The third API project, `ForgetMeNot.APIClient`, has only one class in it – `Client.cs`.
    This is the wrapper of the REST service that the client (`ForgetMeNotDemo`) will
    interact with.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个 API 项目 `ForgetMeNot.APIClient` 中只有一个类——`Client.cs`。这是客户端（`ForgetMeNotDemo`）将要与之交互的
    REST 服务的包装器。
- en: 'We start with four member variables:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从四个成员变量开始：
- en: '[PRE15]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '`[1]` As noted earlier, `RestClient` is the library we are using to manage
    the REST interactions (obtained through NuGet, as discussed earlier).'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 如前所述，`RestClient` 是我们用来管理 REST 交互的库（通过 NuGet 获取，如前所述）。'
- en: '`[2]` `baseURL` is the prefix for all the API calls and was created when we
    moved the API to Azure. As noted earlier, it is available at [https://forgetmenotapi20230113114628.azurewebsites.net/](https://forgetmenotapi20230113114628.azurewebsites.net/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` `baseURL` 是所有 API 调用的前缀，在我们将 API 移动到 Azure 时创建。如前所述，它可在 [https://forgetmenotapi20230113114628.azurewebsites.net/](https://forgetmenotapi20230113114628.azurewebsites.net/)
    找到。'
- en: '`[3]` `username` and `password` are used by the client to access the user’s
    record.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`[3]` `username` 和 `password` 被客户端用来访问用户的记录。'
- en: 'The constructor to `Client` takes `baseUrl`, assigns it to the field, and then
    calls `SetClient()`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`Client` 的构造函数接受 `baseUrl`，将其分配给字段，然后调用 `SetClient()`：'
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`[1]` The options we want for this REST client create a robust interface; we
    won’t throw an exception on any error and we won’t time out for 10 seconds.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 我们希望为这个 REST 客户端创建的选项创建一个健壮的接口；我们不会在任何错误上抛出异常，并且不会在 10 秒内超时。'
- en: '`[2]` With the options set, we can create a new `RestClient`, which is defined
    in `RestSharp`.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 设置了选项后，我们可以创建一个新的 `RestClient`，它在 `RestSharp` 中定义。'
- en: The rest of the file is divided into sections for important behavior by the
    client, beginning with the code needed to authenticate the user.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的其他部分被划分为客户端的重要行为部分，从认证用户的代码开始。
- en: Authentication
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 认证
- en: We set a `IsAuthenticated` property, which is set to whether or not `client.Authenticator`
    is `null`.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设置了一个 `IsAuthenticated` 属性，该属性设置为 `client.Authenticator` 是否为 `null`。
- en: 'We then have a `Login` method that takes a `LoginRequest` object, sets `username`
    and `password`, and calls `Authenticate`:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个 `Login` 方法，它接受一个 `LoginRequest` 对象，设置 `username` 和 `password`，并调用 `Authenticate`：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Project reference
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 项目参考
- en: You will need a reference to the DTO project.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要参考 DTO 项目。
- en: '`LoginRequest` is defined in the DTO project and simply has two string properties,
    `Username` and `Password` (refer to the following code block).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginRequest` 在 DTO 项目中定义，并且仅有两个字符串属性，`Username` 和 `Password`（参考以下代码块）。'
- en: 'The `Authenticate` method uses `RestSharp`’s OAuth authentication – that is,
    again, the heavy lifting is done by `RestSharp`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`Authenticate` 方法使用 `RestSharp` 的 OAuth 认证——也就是说，繁重的工作再次由 `RestSharp` 完成：'
- en: '[PRE18]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Fortunately, you don’t need to understand how to make this work; you just pass
    in the username and password and `RestSharp` takes care of the rest of it for
    you.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，您不需要理解如何实现这一功能；您只需传入用户名和密码，`RestSharp` 会为您处理其余部分。
- en: Client versus client
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端与客户端
- en: Remember that even though you are in the `Client` class, the `client` field
    is the `RestSharp` object.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，即使你处于 `Client` 类中，`client` 字段也是 `RestSharp` 对象。
- en: 'We have a helper method to get the current API version:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个辅助方法来获取当前的 API 版本：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: And that takes us to the profile section of the file, where we can get and update
    the `profile` object.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到文件的配置文件部分，在那里我们可以获取和更新 `profile` 对象。
- en: Profile
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置文件
- en: 'There are two methods needed for the profile. The first gets the profile:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 需要两个方法来处理配置文件。第一个是获取配置文件：
- en: '[PRE20]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This uses the `ProfileResponse` DTO we examined earlier. The second method
    in this section is used to update the profile:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了之前检查过的 `ProfileResponse` DTO。本节中的第二个方法是用来更新配置文件的：
- en: '[PRE21]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code uses the `ProfileUpdateRequest` object defined in `ForgetMeNot.Api.Dto`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了在 `ForgetMeNot.Api.Dto` 中定义的 `ProfileUpdateRequest` 对象。
- en: Again, all the interesting work here is being done by `RestSharp`. As you can
    see, the client is really just a wrapper around the `RestSharp` methods.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，这里所有有趣的工作都是由 `RestSharp` 完成的。正如你所见，客户端实际上只是 `RestSharp` 方法的包装。
- en: Let’s reinforce this by looking at a couple more methods that are used to manage
    the `Buddy` object.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过查看更多用于管理 `Buddy` 对象的方法来加强这一点。
- en: The Buddy region
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伙伴区域
- en: 'This region consists of the methods we need to interact with buddies, `GetBuddy`
    and `CreateInvitation`. `GetBuddy` returns a list of `BuddyDto` objects:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个区域包括我们需要与伙伴交互的方法，`GetBuddy` 和 `CreateInvitation`。`GetBuddy` 返回一个 `BuddyDto`
    对象列表：
- en: '[PRE22]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`CreateInvitation` returns `Guid`, which is the `Id` attribute of the resulting
    `Invitation` object:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateInvitation` 返回 `Guid`，这是结果 `Invitation` 对象的 `Id` 属性：'
- en: '[PRE23]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This code uses `InviteCreateRequest`, which is defined in `ForgetMeNot.Api.Dto`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码使用了在 `ForgetMeNot.Api.Dto` 中定义的 `InviteCreateRequest`。
- en: 'Finally, we have a method to get all the users – that is, all this user’s buddies:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个方法来获取所有用户——也就是说，所有这些用户的伙伴：
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: What we get back is a list of `UserResponse` DTO objects that we saw earlier.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的是之前看到的 `UserResponse` DTO 对象列表。
- en: Now that we’ve examined all the projects provided by the server, we are ready
    to have `ForgetMeNotDemo` interact with the API to get, store, and retrieve data.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经检查了服务器提供的所有项目，我们就可以让 `ForgetMeNotDemo` 与 API 交互以获取、存储和检索数据。
- en: Using the API
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 API
- en: With the `Client` class and its supporting `DTO` and `API` domain classes in
    place, we’re ready to interact with the API to create accounts and log in, as
    well as store and retrieve our preferences.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Client` 类及其支持的 `DTO` 和 `API` 领域类就位后，我们就可以与 API 交互来创建账户和登录，以及存储和检索我们的偏好。
- en: Creating the account
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建账户
- en: The first thing a new user will do is create an account. To make this work,
    we need to bring the user to the `CreateAccount.xaml`, where they can fill in
    their name, email, and password. To implement this, we have to make some substantial
    changes to the **Login** and **Create** **Account** pages.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 新用户首先会创建一个账户。为了使这可行，我们需要将用户带到 `CreateAccount.xaml`，在那里他们可以填写他们的名字、电子邮件和密码。为了实现这一点，我们必须对
    **登录** 和 **创建** **账户** 页面进行一些实质性的更改。
- en: 'Let’s begin by pointing the application to start with login. Modify the `App.xaml.cs`
    `App` method to look like this:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先将应用程序指向以登录开始。修改 `App.xaml.cs` 中的 `App` 方法，使其看起来像这样：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`[1]` Have the IoC container pass in an instance of `LoginViewModel`.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 让 IoC 容器传入 `LoginViewModel` 的一个实例。'
- en: '`[2]` Set `MainPage` (the entry point to the program) to `LoginPage`.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 将 `MainPage`（程序的入口点）设置为 `LoginPage`。'
- en: The job of the **Login** page will now be to either allow the user to log in
    or take them to the **Create** **Account** page.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '**登录** 页面的工作现在将是允许用户登录或将他们带到 **创建** **账户** 页面。'
- en: 'Be sure to add routing for `CreateAccount` in `AppShell.xaml.cs`:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要在 `AppShell.xaml.cs` 中添加 `CreateAccount` 的路由：
- en: '[PRE26]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Next, let’s modify the **Login** page.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们修改 **登录** 页面。
- en: Modifying the Login page
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改登录页面
- en: 'Now that we’re going to turn management of authentication over to the server,
    we need a different `LoginPage.xaml.cs` and replace it with this simple version:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们要将认证管理交给服务器，我们需要一个不同的 `LoginPage.xaml.cs` 并用这个简单版本替换它：
- en: '[PRE27]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '`LoginViewModel` is passed in from `App`, as shown in the preceding code.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginViewModel` 由 `App` 传入，如前述代码所示。'
- en: Now, let’s modify `LoginPage` to focus on either logging a user in or redirecting
    them to create a new account.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改 `LoginPage` 以专注于登录用户或将他们重定向到创建新账户。
- en: Updating LoginPage
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新登录页面
- en: 'We’re going to make some significant changes to `LoginPage`. To avoid confusion,
    delete all you have there and replace it with this:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对`LoginPage`进行一些重大更改。为了避免混淆，删除所有内容并替换为以下内容：
- en: '[PRE28]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'With the styles in place, we’re ready to create the `Labels` and `Entry` controls
    to get a user’s name and password:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式设置到位后，我们准备创建`Labels`和`Entry`控件来获取用户的用户名和密码：
- en: '[PRE29]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Once a user has filled in the fields (or is unable to do so because they’ve
    forgotten their password), we will offer them the following choices:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦用户填写了字段（或者由于他们忘记了密码而无法填写），我们将提供以下选项：
- en: '[PRE30]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`[1]` I’ve expanded the two styles a bit to minimize the styling in the controls.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 我稍微扩展了两种样式，以最小化控件中的样式。'
- en: '`[2]` Click `ViewModel` a little later).'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 稍后点击`ViewModel`）。'
- en: '`[3]` Click `CreateAccount` page.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`[3]` 点击`CreateAccount`页面。'
- en: '`[4]` Forgot password is (as they say) left as an exercise for you.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`[4]` 忘记密码（正如他们所说）留作练习。'
- en: With this new API-oriented `LoginViewModel`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个新的以API为导向的`LoginViewModel`。
- en: The AccountService class
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '`AccountService`类'
- en: 'Before updating `LoginViewModel`, we’ll need to create the `AccountService`
    class and its associated interface:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在更新`LoginViewModel`之前，我们需要创建`AccountService`类及其相关接口：
- en: '[PRE31]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This class is used in the creation and authentication of the account. With this
    in place, we are ready to update `LoginViewModel`.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类用于账户的创建和验证。有了这个，我们就准备好更新`LoginViewModel`。
- en: Updating LoginViewModel
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新`LoginViewModel`
- en: '`LoginViewModel` must be updated to meet the new requirements of the updated
    `LoginPage` class. Once again, delete all that you have and replace it with this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`LoginViewModel`必须更新以满足更新后的`LoginPage`类的新要求。再次，删除所有内容并替换为以下内容：'
- en: '[PRE32]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The constructor is passed by `AccountService` by way of the **Inversion of
    Control** (**IoC**) container and holds onto that service for its other methods:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数通过**控制反转**（**IoC**）容器传递给`AccountService`，并保留该服务以供其其他方法使用：
- en: '[PRE33]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'We’ll set `ActivityIndicator` to display while we ask the API to log a user
    in:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置`ActivityIndicator`在请求API登录用户时显示：
- en: '[PRE34]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Implementing the logic to manage a forgotten password is left as an exercise
    for you:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 实现管理忘记密码的逻辑留作练习：
- en: '[PRE35]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We delegate to the server the responsibility for creating new accounts:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建新账户的责任委托给服务器：
- en: '[PRE36]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '`[1]` We create the `AccountService` field, which will mediate between `ViewModel`
    and the `Client` class.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 我们创建`AccountService`字段，它将在`ViewModel`和`Client`类之间进行调解。'
- en: '`[2]` The IoC passes in the `AccountService` we need, which we will assign
    to the `AccountService` member we just created.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` IoC传递给我们需要的`AccountService`，我们将将其分配给刚刚创建的`AccountService`成员。'
- en: '`[3]` We bundle up the username and password into a `LoginRequest` object.
    We get this class from `ForgetMeNot.API.DTO`:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`[3]` 我们将用户名和密码打包成一个`LoginRequest`对象。我们从`ForgetMeNot.API.DTO`获取这个类：'
- en: '[PRE37]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`[4]` We turn `ActivityIndicator` on, pass `LoginRequest` to the API, and then,
    when we get a response, turn `ActivityIndicator` off. We’ll look at what `AccountService`
    is actually doing in the next step.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`[4]` 我们打开`ActivityIndicator`，将`LoginRequest`传递给API，然后，当我们得到响应时，关闭`ActivityIndicator`。我们将在下一步查看`AccountService`实际上在做什么。'
- en: '`[5]` We ask `AccountService` whether the login was successful. If it was (the
    happy path), we reset `MainPage` (away from `LoginPage`) and navigate there.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`[5]` 我们询问`AccountService`登录是否成功。如果是（愉快的路径），我们重置`MainPage`（远离`LoginPage`）并导航到那里。'
- en: '`[6]` If login fails (the sad path), we inform the user that we are unable
    to log them in and give them another chance to do so.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`[6]` 如果登录失败（不愉快的路径），我们通知用户我们无法登录他们，并给他们另一个机会尝试。'
- en: '`[7]` This book will not implement the code to reset a password.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`[7]` 本书将不会实现重置密码的代码。'
- en: '`AccountService` was responsible for the login. Let’s look at that next.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccountService`负责登录。让我们看看下一个。'
- en: Using AccountService to log in
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`AccountService`进行登录
- en: 'For security purposes, we want a server to be responsible for authenticating
    a user based on an email address and password:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安全起见，我们希望服务器负责根据电子邮件地址和密码验证用户：
- en: '[PRE38]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Among other methods in `AccountService` (which we will return to shortly) are
    the following two methods:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AccountService`的其他方法（我们将在稍后返回）中，以下两个方法是：
- en: '`[1]` Login simply delegates to `apiClient` the responsibility to handle the
    *login* through the *API*, passing in `LoginRequest`, which contains the username
    and password.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 登录简单地将处理登录的责任委托给`apiClient`，通过*API*进行登录，传递包含用户名和密码的`LoginRequest`。'
- en: '`[2]` Similarly, the `IsLoggedIn` Boolean method uses `apiClient` to see whether
    the current user is *authenticated*.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 类似地，`IsLoggedIn`布尔方法使用`apiClient`来查看当前用户是否已*认证*。'
- en: A second option exists for a user, which is to tap on the `CreateAccountPage`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 用户还有第二个选项，即点击`CreateAccountPage`。
- en: Setting up the Create Account page
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置创建账户页面
- en: 'The **Create Account** page prompts a user for a username and a password, as
    well as their email. To keep things simple, in this example, we only ask for the
    password once, but we do implement validation:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建账户**页面提示用户输入用户名、密码以及他们的电子邮件。为了简化，在这个例子中，我们只要求输入一次密码，但我们确实实现了验证：'
- en: '[PRE39]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '`[1]` We use the Community Toolkit’s `StoppedTypingBehavior` to detect when
    a user has finished entering a field. We set `StoppedTypingTimeThreshold` to `500`
    – that is, half a second. This indicates that once the user has not entered anything
    for half a second, we assume they are done and kick in the validation. Note that
    the command is set to `ValidateNameCommand`. This is handled in `ViewModel` (as
    shown later) but returns a Boolean, which indicates whether or not the user has
    entered a valid name:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 我们使用Community Toolkit的`StoppedTypingBehavior`来检测用户何时完成字段的输入。我们将`StoppedTypingTimeThreshold`设置为`500`——即半秒。这意味着一旦用户半秒内没有输入任何内容，我们就假设他们已经完成，并启动验证。注意，命令设置为`ValidateNameCommand`。这将在`ViewModel`中处理（如后文所示），并返回一个布尔值，表示用户是否输入了有效的名称：'
- en: '[PRE40]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '`[1]` Only show the label if the name validation fails.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 只有当名称验证失败时才显示标签。'
- en: '`[2]` Now, do the same for email as you did for the name, calling `ValidateEmailCommand`
    when the user stops typing:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 现在，像对名称一样对电子邮件进行相同的处理，当用户停止输入时调用`ValidateEmailCommand`：'
- en: '[PRE41]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '`[1]` The `IsPassword` property of the entry is set to `true`, and the password
    will be displayed as a series of asterisks as a user enters a character.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 条目的`IsPassword`属性设置为`true`，当用户输入字符时，密码将显示为一串星号。'
- en: '`[2]` Once the fields are valid, the `Signup` command.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 一旦字段有效，执行`Signup`命令。'
- en: All of the supporting commands and validation are in `CreateAccountViewModel`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的支持命令和验证都在`CreateAccountViewModel`中。
- en: Setting up CreateAccountViewModel
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置CreateAccountViewModel
- en: 'The first thing we see in this file are all the properties:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们看到的第一件事是所有的属性：
- en: '[PRE42]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that there are properties for the error messages along with the prompts.
    There is also a Boolean property, `EnableButton`, which defaults to `false` (if
    you don’t set a Boolean, it defaults to `false`).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，除了提示外，还有错误消息的属性。还有一个布尔属性`EnableButton`，默认为`false`（如果你没有设置布尔值，它默认为`false`）。
- en: 'The constructor takes `AccountService`, passed in by the IoC (this was registered
    in `MauiProgram.cs`). Update the Client constructor to take a string serving as
    `baseUrl`:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数接受通过IoC传递的`AccountService`（这在`MauiProgram.cs`中已注册）。更新客户端构造函数以接受一个作为`baseUrl`的字符串：
- en: '[PRE43]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'We’ll turn to the `CreateAccountViewModel` class:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将转向`CreateAccountViewModel`类：
- en: '[PRE44]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Let’s examine a `Validation` method.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一个`Validation`方法。
- en: 'The business requirement is that a valid name has at least two characters.
    The code to validate is a simple `if` statement, as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 业务需求是有效的名称至少有两个字符。验证的代码是一个简单的`if`语句，如下所示：
- en: '[PRE45]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '`[1]` The `EnableButton` property (which is used to determine whether the `true`
    when the name, email, and password are all valid.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` `EnableButton`属性（用于确定当名称、电子邮件和密码都有效时返回`true`）。'
- en: '`[2]` If the name is not valid, the `ShowNameErrorMessage` property is set
    to `true`, and the error message is displayed.'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 如果名称无效，则将`ShowNameErrorMessage`属性设置为`true`，并显示错误消息。'
- en: In the next chapter, we’ll look at the support that .NET MAUI provides for a
    more elegant validation approach.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨.NET MAUI为更优雅的验证方法提供的支持。
- en: The most important command in this file is the one that responds to `SignUpCommand`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中最重要的命令是响应`SignUpCommand`的命令。
- en: Handling the SignUp command
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理注册命令
- en: 'The `SignUp` method checks to ensure that the fields are valid (by making sure
    `EnableButton` is true) and then creates an `AccountCreateRequest` object, which
    is defined in `ForgetMeNot.Api.Dto`:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`SignUp`方法检查确保字段有效（通过确保`EnableButton`为`true`），然后创建一个`AccountCreateRequest`对象，该对象定义在`ForgetMeNot.Api.Dto`中：'
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It passes that object to the `CreateAccount` method on `accountService`. Let’s
    look at the entire method in `ForgetMeNot.Api.Dto AccountCreateRequest`:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 将该对象传递给`accountService`上的`CreateAccount`方法。让我们看看`ForgetMeNot.Api.Dto AccountCreateRequest`中的整个方法：
- en: '[PRE47]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '`[1]` Start by creating `AccountCreateRequest` object, as explained earlier.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`[1]` 首先创建 `AccountCreateRequest` 对象，如前所述。'
- en: '`[2]` Call `CreateAccount` on the service. We’ll look at that method in just
    a moment.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`[2]` 在服务上调用 `CreateAccount`。我们稍后将查看该方法。'
- en: '`[3]` If everything works, show a dialog box (or, as we did earlier, a toast).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`[3]` 如果一切正常，显示一个对话框（或者，如我们之前所做的那样，一个吐司）。'
- en: '`[4]` Once a user account has been created, go back a page to the **Login**
    page.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`[4]` 一旦创建用户账户，就返回一页到 **登录** 页面。'
- en: All that the `CreateAccount` method in `AccountService` does is pass along the
    `AccountCreateRequest` object to the `apiClient` `CreateAccount` method.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`AccountService` 中的 `CreateAccount` 方法所做的只是将 `AccountCreateRequest` 对象传递给 `apiClient`
    的 `CreateAccount` 方法。'
- en: The mechanisms described here are correct as far as they go, but they do not
    include the invitation response that the final app should have (a user invites
    a buddy who then creates an account).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这里描述的机制就其本身而言是正确的，但它们不包括最终应用程序应该有的邀请响应（用户邀请一个朋友，然后创建账户）。
- en: Let’s not forget that we originally created `LoginCS` as a way to mimic the
    XAML in C#. You’ll need to fix up `LoginCS` to match the naming conventions in
    the XAML file or comment it out altogether, as we are not using it.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不要忘记，我们最初创建 `LoginCS` 是为了模仿 C# 中的 XAML。你需要调整 `LoginCS` 以匹配 XAML 文件中的命名约定，或者完全注释掉它，因为我们不再使用它。
- en: It’s time to run the program and make sure everything we did works. However,
    sometimes, you will get unexplained build errors when you make this many changes.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候运行程序并确保我们所做的一切都正常工作了。然而，当你进行这么多更改时，有时你可能会遇到无法解释的构建错误。
- en: What to do if it won’t build
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如果无法构建怎么办
- en: Assuming you’ve checked all your code, it is correct, and you are getting weird
    build errors (such as `InitializeComponents not found`), it may be time to clean
    everything out. To do so, close Visual Studio and navigate to the folder where
    your files are. Delete the `bin` and `obj` directories within each project, as
    shown in *Figure 10**.1*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经检查了所有代码，它是正确的，但你遇到了奇怪的构建错误（例如 `InitializeComponents not found`），那么可能是时候清理一切了。为此，关闭
    Visual Studio 并导航到你的文件所在的文件夹。删除每个项目中的 `bin` 和 `obj` 目录，如图 *图 10*.1* 所示。
- en: '![Figure 10.1 – Deleting the bin and obj directories'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.1 – 删除 bin 和 obj 目录'
- en: '](img/Figure_10.1_B19723.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.1_B19723.jpg)'
- en: Figure 10.1 – Deleting the bin and obj directories
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – 删除 bin 和 obj 目录
- en: 'Follow these steps:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 请按照以下步骤操作：
- en: Restart Visual Studio and immediately select **Build** | **Clean Solution**
    from the menu. Finally, select **Build** | **Rebuild Solution**, which forces
    a complete rebuild rather than an incremental build. Give your project a moment
    or two to settle down and run it.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 Visual Studio 并立即从菜单中选择 **构建** | **清理解决方案**。最后，选择 **构建** | **重新构建解决方案**，这将强制进行完整的重新构建而不是增量构建。给你的项目一点时间来稳定并运行它。
- en: 'You should be brought directly to the **Login** page, as shown in the following
    figure:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该直接被带到 **登录** 页面，如图中所示：
- en: '![Figure 10.2 – The Login page'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.2 – 登录页面'
- en: '](img/Figure_10.2_B19723.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.2_B19723.jpg)'
- en: Figure 10.2 – The Login page
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.2 – 登录页面
- en: Next, click on `Placeholder` property of the `Entry` control.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击 `Entry` 控件的 `Placeholder` 属性。
- en: '![Figure 10.3 – The CreateAccount page'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – 创建账户页面'
- en: '](img/Figure_10.3_B19723.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.3_B19723.jpg)'
- en: Figure 10.3 – The CreateAccount page
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 创建账户页面
- en: Fill in the fields and click **Sign up**. Your account will be created on the
    server, and a dialog box will appear to let you know it worked, as shown in *Figure
    10**.4*.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写字段并点击 **注册**。你的账户将在服务器上创建，并将出现一个对话框来通知你操作成功，如图 *图 10*.4* 所示。
- en: '![Figure 10.4 – A successful sign-up'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – 成功注册'
- en: '](img/Figure_10.4_B19723.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.4_B19723.jpg)'
- en: Figure 10.4 – A successful sign-up
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 成功注册
- en: If you try to log in, you will get an `unauthorized` message. The problem is
    that the system does not want the username; it wants the user’s email.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试登录，你会收到一个 `unauthorized` 消息。问题是系统不想要用户名；它想要用户的电子邮件。
- en: Unauthorized
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 未授权
- en: You will, of course, get an unauthorized message with any bad username or invalid
    password.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，任何错误的用户名或无效的密码都会收到未授权的消息。
- en: Let’s fix `LoginPage.xaml` and log in, as shown in *Figure 10**.5*.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修复 `LoginPage.xaml` 并登录，如图 *图 10*.5* 所示。
- en: '![Figure 10.5 – Logging in with our new account'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.5 – 使用我们的新账户登录'
- en: '](img/Figure_10.5_B19723.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.5_B19723.jpg)'
- en: Figure 10.5 – Logging in with our new account
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 使用我们的新账户登录
- en: When the login is authenticated, you are taken directly to the home page.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 当登录验证成功后，你将被直接带到主页。
- en: It is important to note and revel in the fact that the account creation and
    the authentication both take place in the cloud via the API.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意并享受这样一个事实：账户创建和身份验证都通过 API 在云端进行。
- en: Summary
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we reviewed how to interact with an API. We gained insight
    into the internals of that interaction by examining the API domain and DTO projects,
    and we saw how the `APIClient` class wraps all the API calls to make life easier
    and more intuitive on the client side.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们回顾了如何与 API 交互。通过检查 API 域和 DTO 项目，我们深入了解了这种交互的内部机制，并看到 `APIClient` 类如何封装所有
    API 调用来简化客户端的体验并使其更加直观。
- en: This is a reasonably advanced topic, and in the next chapter, we will dive into
    even more advanced topics to move you from being a novice .NET MAUI programmer
    to an expert.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对高级的话题，在下一章中，我们将深入探讨更多高级话题，帮助你从一名 .NET MAUI 新手程序员成长为专家。
- en: Quiz
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问答
- en: What is a DTO?
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是 DTO？
- en: Why don’t we need a local SQLite database?
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么我们不需要本地 SQLite 数据库？
- en: What does the API Client class do?
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API 客户端类的作用是什么？
- en: Where does account creation occur?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 账户创建发生在哪里？
- en: Where does authentication occur?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 身份验证发生在哪里？
- en: You try it
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 你来试试
- en: Implement the *Forgot Password* client-side code.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 实现忘记密码的客户端代码。
