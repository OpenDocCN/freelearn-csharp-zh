["```cs\nProperties\n{\n  _MainTint(\"Global Color Tint\", Color) = (1,1,1,1)\n}\n```", "```cs\nCGPROGRAM\n#pragma surface surf Lambert vertex:vert\n```", "```cs\nfloat4 _MainTint;\n```", "```cs\nstruct Input \n{\n  float2 uv_MainTex;\n  float4 vertColor;\n};\n```", "```cs\nvoid vert(inout appdata_full v, out Input o)\n{\n  UNITY_INITIALIZE_OUTPUT(Input,o);\n  o.vertColor = v.color;\n}\n```", "```cs\nvoid surf (Input IN, inout SurfaceOutput o) \n{\n  o.Albedo = IN.vertColor.rgb * _MainTint.rgb;\n}\n```", "```cs\nProperties \n{\n  _MainTex (\"Base (RGB)\", 2D) = \"white\" {}\n  _tintAmount (\"Tint Amount\", Range(0,1)) = 0.5\n  _ColorA (\"Color A\", Color) = (1,1,1,1)\n  _ColorB (\"Color B\", Color) = (1,1,1,1)\n  _Speed (\"Wave Speed\", Range(0.1, 80)) = 5\n  _Frequency (\"Wave Frequency\", Range(0, 5)) = 2\n  _Amplitude (\"Wave Amplitude\", Range(-1, 1)) = 1\n}\n```", "```cs\nCGPROGRAM\n#pragma surface surf Lambert vertex:vert\n```", "```cs\nsampler2D _MainTex;\nfloat4 _ColorA;\nfloat4 _ColorB;\nfloat _tintAmount;\nfloat _Speed;\nfloat _Frequency;\nfloat _Amplitude;\nfloat _OffsetVal;\n```", "```cs\nstruct Input \n{\n  float2 uv_MainTex;\n  float3 vertColor;\n}\n```", "```cs\nvoid vert(inout appdata_full v, out Input o)\n{\n  UNITY_INITIALIZE_OUTPUT(Input,o);\n  float time = _Time * _Speed;\n  float waveValueA = sin(time + v.vertex.x * _Frequency) * _Amplitude;\n\n  v.vertex.xyz = float3(v.vertex.x, v.vertex.y + waveValueA, v.vertex.z);\n  v.normal = normalize(float3(v.normal.x + waveValueA, v.normal.y, v.normal.z));\n  o.vertColor = float3(waveValueA,waveValueA,waveValueA);\n}\n```", "```cs\nvoid surf (Input IN, inout SurfaceOutput o)\n{\n  half4 c = tex2D (_MainTex, IN.uv_MainTex);\n  float3 tintColor = lerp(_ColorA, _ColorB, IN.vertColor).rgb; \n  o.Albedo = c.rgb * (tintColor * _tintAmount);\n  o.Alpha = c.a;\n}\n```", "```cs\n__Amount (\"Extrusion Amount\", Range(-0.0001, 0.0001)) = 0\n```", "```cs\nfloat _Amount;\n```", "```cs\n#pragma surface surf Standard vertex:vert\n```", "```cs\nvoid vert (inout appdata_full v) \n{\n  v.vertex.xyz += v.normal * _Amount;\n}\n```", "```cs\nv.vertex.xyz += v.normal * _Amount;\n```", "```cs\nusing UnityEngine;\npublic class NormalExtruder : MonoBehaviour {\n  [Range(-0.0001f, 0.0001f)]\n public float amount = 0;\n  // Use this for initialization\n void Start () \n  {\n    Material material = GetComponent<Renderer>().sharedMaterial;\n    Material newMaterial = new Material(material);\n    newMaterial.SetFloat(\"_Amount\", amount);\n    GetComponent<Renderer>().material = newMaterial;\n  }\n}\n```", "```cs\nShader \"CookbookShaders/Chapter06/Normal Extrusion Map\" \n{\n  Properties\n  {\n    _MainTex(\"Texture\", 2D) = \"white\" {}\n    _ExtrusionTex(\"Extrusion map\", 2D) = \"white\" {}\n  _ Amount(\"Extrusion Amount\", Range(-0.0001, 0.0001)) = 0\n  }\n  SubShader\n  {\n    Tags{ \"RenderType\" = \"Opaque\" }\n\n    CGPROGRAM\n    #pragma surface surf Standard vertex:vert\n    struct Input \n    {\n      float2 uv_MainTex;\n    };\n\n    float _Amount;\n\n    sampler2D _ExtrusionTex;\n void vert(inout appdata_full v) \n {\n float4 tex = tex2Dlod (_ExtrusionTex, float4(v.texcoord.xy,0,0));\n float extrusion = tex.r * 2 - 1;\n v.vertex.xyz += v.normal * _Amount * extrusion;\n } \n    sampler2D _MainTex;\n    void surf(Input IN, inout SurfaceOutputStandard o) \n    {\n      float4 tex = tex2D(_ExtrusionTex, IN.uv_MainTex);\n      float extrusion = abs(tex.r * 2 - 1);\n\n      o.Albedo = tex2D(_MainTex, IN.uv_MainTex).rgb;\n      o.Albedo = lerp(o.Albedo.rgb, float3(0, 0,0), extrusion * _Amount   \n                      / 0.0001 * 1.1);\n    }\n  ENDCG\n  }\n\n  Fallback \"Diffuse\"\n}\n```", "```cs\n_Color(\"Main Color\", Color) = (1.0,1.0,1.0,1.0)\n_MainTex(\"Base (RGB)\", 2D) = \"white\" {}\n_Bump(\"Bump\", 2D) = \"bump\" {}\n_Snow(\"Level of snow\", Range(1, -1)) = 1\n_SnowColor(\"Color of snow\", Color) = (1.0,1.0,1.0,1.0)\n_SnowDirection(\"Direction of snow\", Vector) = (0,1,0)\n_SnowDepth(\"Depth of snow\", Range(0,1)) = 0\n```", "```cs\nsampler2D _MainTex;\nsampler2D _Bump;\nfloat _Snow;\nfloat4 _SnowColor;\nfloat4 _Color;\nfloat4 _SnowDirection;\nfloat _SnowDepth;\n```", "```cs\nstruct Input \n{\n  float2 uv_MainTex;\n  float2 uv_Bump;\n  float3 worldNormal;\n  INTERNAL_DATA\n};\n```", "```cs\nvoid surf(Input IN, inout SurfaceOutputStandard o) \n{\n  half4 c = tex2D(_MainTex, IN.uv_MainTex);\n\n  o.Normal = UnpackNormal(tex2D(_Bump, IN.uv_Bump));\n\n  if (dot(WorldNormalVector(IN, o.Normal), _SnowDirection.xyz) \n      >= _Snow)\n  {\n  o.Albedo = _SnowColor.rgb;\n  }\n  else\n  {\n  o.Albedo = c.rgb * _Color;\n  }\n\n  o.Alpha = 1;\n}\n```", "```cs\n#pragma surface surf Standard vertex:vert\n```", "```cs\nvoid vert(inout appdata_full v) \n{\n  float4 sn = mul(UNITY_MATRIX_IT_MV, _SnowDirection);\n\n  if (dot(v.normal, sn.xyz) >= _Snow)\n  {\n    v.vertex.xyz += (sn.xyz + v.normal) * _SnowDepth * _Snow;\n  }\n}\n```", "```cs\nif (dot(WorldNormalVector(IN, o.Normal), _SnowDirection.xyz) >=\n  _Snow)\n{\n  o.Albedo = _SnowColor.rgb;\n}\nelse {\n  o.Albedo = c.rgb * _Color;\n}\n```", "```cs\nfloat4 sn = mul(UNITY_MATRIX_IT_MV, _SnowDirection);\n```", "```cs\nif (dot(v.normal, sn.xyz) >= _Snow)\n{\n    v.vertex.xyz += (sn.xyz + v.normal) * _SnowDepth * _Snow;\n}\n```", "```cs\nProperties \n{\n  _RampTex(\"Color Ramp\", 2D) = \"white\" {}\n  _RampOffset(\"Ramp offset\", Range(-0.5,0.5))= 0\n\n  _NoiseTex(\"Noise Texture\", 2D) = \"gray\" {}\n  _Period(\"Period\", Range(0,1)) = 0.5\n\n  _Amount(\"_Amount\", Range(0, 1.0)) = 0.1\n  _ClipRange(\"ClipRange\", Range(0,1)) = 1\n}\n```", "```cs\nsampler2D _RampTex;\nhalf _RampOffset;\n\nsampler2D _NoiseTex;\nfloat _Period;\n\nhalf _Amount;\nhalf _ClipRange;\n```", "```cs\nstruct Input \n{\n float2 uv_NoiseTex;\n};\n```", "```cs\nvoid vert(inout appdata_full v) {\n float3 disp = tex2Dlod(_NoiseTex, float4(v.texcoord.xy,0,0));\n float time = sin(_Time[3] *_Period + disp.r*10);\n  v.vertex.xyz += v.normal * disp.r * _Amount * time;\n}\n```", "```cs\nvoid surf(Input IN, inout SurfaceOutput o) \n{\n  float3 noise = tex2D(_NoiseTex, IN.uv_NoiseTex);\n\n  float n = saturate(noise.r + _RampOffset);\n\n  clip(_ClipRange - n);\n\n  half4 c = tex2D(_RampTex, float2(n,0.5));\n\n  o.Albedo = c.rgb;\n  o.Emission = c.rgb*c.a;\n}\n```", "```cs\n#pragma surface surf Lambert vertex:vert nolightmap\n```", "```cs\nfloat time = sin(_Time[3] *_Period + disp.r*10);\n```", "```cs\nv.vertex.xyz += v.normal * disp.r * _Amount * time;\n```", "```cs\nGameObject explosion = Instantiate(explosionPrefab) as GameObject;\nRenderer renderer = explosion.GetComponent<Renderer>();\nMaterial material = new Material(renderer.sharedMaterial);\nrenderer.material = material;\n```"]