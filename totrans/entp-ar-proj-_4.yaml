- en: AR for Training with WebAR and Augmented Class!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will explore two different tools that work on Android devices
    that can be applied to the training field. The first one will be based on WebAR,
    specifically, the Google Web Component `<model-viewer>`, which will let us visualize
    3D models in a real environment through a web page using ARCore. We will be able
    to select a model from a series of them on the web page, place it in the real
    world, and manipulate it (move, rotate, and scale it).
  prefs: []
  type: TYPE_NORMAL
- en: The second one will be Augmented Class!, an educational-oriented authoring tool
    that will let us create AR training projects to show different elements (images,
    audio files, videos, and 3D models, among others) over images or real-life pictures,
    add interactivity to our projects, and exchange them between users.
  prefs: []
  type: TYPE_NORMAL
- en: The main goal of this chapter is to introduce you to two AR tools in a slightly
    different context than the rest of the chapters have. The main idea of this chapter
    is for you to discover other forms of AR that are different than the rest of the
    SDKs that we have covered or will be covering, and their value for such a transversal
    field as training. By the end of this chapter, you will be able to create your
    own AR viewer through the web with ARCore, but you will have also discovered the
    possibilities of interactivity to enrich the user experience in AR applications
    using the Augmented Class! tool.
  prefs: []
  type: TYPE_NORMAL
- en: At the time of writing this book, both tools are under constant development
    and improvement, with new functionalities and integrations being added. Currently,
    they only work on Android devices, but it is expected they will soon work on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring WebAR with Google Component `<model-viewer>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring Augmented Class!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements for this chapter are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `<model-viewer>` project, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An ARCore-supporting Android device (see the list here: [https://developers.google.com/ar/discover/supported-devices](https://developers.google.com/ar/discover/supported-devices)).
    The project has been tested on a Pocophone F1.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For the Augmented Class! project, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An Android device with Android 5.0 or above
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The resources and the code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter04](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: Using AR for training
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AR has been present in the educational field for more than 20 years, especially
    inside the university scope, although its growth has been much slower and less
    noticed than in more commercial fields such as marketing or tourism.
  prefs: []
  type: TYPE_NORMAL
- en: With the evolution of the supporting hardware (phones, tablets, and digital
    whiteboards, for example), AR has become a valuable asset in education and training.
    It allows students to visualize concepts in three dimensions over an image or
    directly in the room so that they can access information in a quicker and more
    dynamic way (just pointing with the camera instead of searching on a book or the
    internet for the information) or to create deeper personal projects (giving life
    to a painting, adding instructions or extra information over a handcrafted project,
    creating an animated presentation, and more).
  prefs: []
  type: TYPE_NORMAL
- en: 'One important consideration to make is that AR in education/training is transversal to
    all ages and subjects: a child can use it in the classroom to learn forms and
    colors, while a company can use it to train workers on its occupational risk prevention
    plan—it just depends on the tool and the target of the AR content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will learn how to use two different and easy tools that
    will help us create two different educational projects in little time. For that, we
    will be using the following 3D models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://sketchfab.com/3d-models/gearbox-planetary-2bee7992d266456aaef1f1394b0ebb98](https://sketchfab.com/3d-models/gearbox-planetary-2bee7992d266456aaef1f1394b0ebb98)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://sketchfab.com/3d-models/warm-gearbox-e7fedd86a90b4c46a53fe88882e66aa3](https://sketchfab.com/3d-models/warm-gearbox-e7fedd86a90b4c46a53fe88882e66aa3)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://sketchfab.com/3d-models/gearbox-conical-60f023924ee0456daa758eb590b6064b](https://sketchfab.com/3d-models/gearbox-conical-60f023924ee0456daa758eb590b6064b)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's get started with WebAR by learning about what the Google Web Component
    `<model-viewer>` is and how it works.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring WebAR with Google Web Component <model-viewer>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before smartphones hit the market, AR was exclusively developed on computers.
    Later on, web applications appeared, first written in Flash and then in HTML5,
    but always requiring the webcam from a computer. Since the appearance of the ARCore
    (Google) and ARKit (Apple) toolkits, AR is also arriving on smartphones through
    the web.
  prefs: []
  type: TYPE_NORMAL
- en: WebXR Device API is one of the current standards that's working to provide the
    specifications for accessing both VR and AR from the web, including the use of
    devices' sensors or **head-mounted displays** (**HMDs**). This standard specification
    is being written by the **World Wide Web Consortium** (**W3C**) and it's currently
    under development. At the time of writing, the integration of AR in this WebXR
    specification is still unstable and thus it's not presented in this chapter. It
    is expected that this functionality will be further developed during the following
    months. For more information on the standard and its progress, you can check their
    website ([https://www.w3.org/TR/webxr](https://www.w3.org/TR/webxr)) and GitHub
    ([https://github.com/immersive-web/webxr/](https://github.com/immersive-web/webxr/)).
  prefs: []
  type: TYPE_NORMAL
- en: In this section, for the development of a WebAR application, we will be using
    Google's `<model-viewer>` Web Component, which allows us to easily embed 3D models
    into a web page and visualize them in AR using a smartphone or tablet.
  prefs: []
  type: TYPE_NORMAL
- en: A Web Component is a custom HTML element that is based on existing web standards
    and works across modern browsers.
  prefs: []
  type: TYPE_NORMAL
- en: Google's `<model-viewer>` Component was first launched in February 2019 to allow
    users to display 3D models in web pages. In May 2019, they announced AR compatibility
    through the `ar` attribute. It's based on the ARCore functionality Scene Viewer
    and at the moment it only works on Android devices that support this technology.
    We will see that its use is quite straightforward and works on any browser. In [Chapter
    3](2d2b4e6f-1ee8-46ab-9041-24e36d57f949.xhtml), *AR for Manufacturing with ARCore*,
    we learned how to implement a whole AR mobile project. In this case, we will only
    have to use its web feature using the mentioned `<model-viewer>` Component. We
    will see which type of models we can use, how to create a web page to contain
    the component, and how to actually add the component and make it work on a mobile
    device.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have looked at the tool we are going to use, in the next section,
    we will cover the 3D models that are accepted by this component (at the time of
    writing).
  prefs: []
  type: TYPE_NORMAL
- en: Working with 3D models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because we are displaying our models in the browser, the supported format is **GL
    Transmission Format** (**glTF**) 2.0/glb, a format that's designed to minimize
    the size and runtime processing, making it the best option for web transmission.
    Nowadays, many 3D designing programs such as Blender, 3ds Max, and Maya, as well
    as some 3D model platforms, such as Sketchfab, provide exporters to this format.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information on the functionality of glTF and its possibilities
    at [https://www.khronos.org/gltf/](https://www.khronos.org/gltf/) and [https://github.com/KhronosGroup/glTF/blob/master/README.md](https://github.com/KhronosGroup/glTF/blob/master/README.md).
  prefs: []
  type: TYPE_NORMAL
- en: The 3D models' textures can be in `.jpg` or `.png` format, the tool supports
    animations, and, because models are going to be displayed via a web browser, they
    should not be very heavy on keeping the AR experience fluid.
  prefs: []
  type: TYPE_NORMAL
- en: More information on these requirements can be found at [https://developers.google.com/ar/develop/java/scene-viewer](https://developers.google.com/ar/develop/java/scene-viewer).
  prefs: []
  type: TYPE_NORMAL
- en: For this project, we are going to use three static models called `gearbox_conical.glb`,
    `gearbox_planetary.glb`, and `gearbox_worm.glb`. These models provide good detail
    for a more realistic AR experience, and we are going to use them in the project
    in the next section with Augmented Class!.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have understood the basics of how the `<model-viewer>` Component
    works, let's start creating a web page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing we are going to do is create the web page where the 3D models
    will be displayed and ready to be launched in AR. For this, we are also going
    to use Glitch, an online tool that will help us create this project.
  prefs: []
  type: TYPE_NORMAL
- en: First, we are going to learn how to prepare a Glitch project before actually
    coding the style sheet and HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Coding with Glitch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Glitch is a simple tool for creating web apps with a strong collaboration component.
    It allows us to remix existing apps or clone projects from services such as GitHub
    or GitLab. In our case, since we''ll only want to create a simple demo web page,
    we will use Glitch to store both the HTML page and the 3D models. To create a
    new Glitch project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, go to [https://glitch.com](https://glitch.com/) and click on the
    Sign-in button. It will automatically create an account.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner of the page, click on New Project to start a new project.
    Then, click on the first option, hello-webpage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/35886204-c874-4130-9e0d-0613c0886623.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting our project template
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be directed to a board that will look similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10a2eb29-89f2-48a8-906f-f6a9bf69cca0.png)'
  prefs: []
  type: TYPE_IMG
- en: The Gitch board
  prefs: []
  type: TYPE_NORMAL
- en: Take a look at the README file as it explains the main functionality of the
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will be to change the name of the project that Glitch has provided
    us. Click on the name in the top-left corner of the page and provide a name and
    description:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e1bf670f-d670-4e47-a468-d0e9e939414b.png)'
  prefs: []
  type: TYPE_IMG
- en: Changing the default name of the project
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, from the dropdown button ''Show'', select ''Next to The Code'':'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/84fea2be-a229-4c45-9bbd-0206f74a2940.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting how to see the final web page
  prefs: []
  type: TYPE_NORMAL
- en: 'This will divide our window to show us the result of the code we are writing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ecd11b24-5802-4203-89b2-5dce2e193537.png)'
  prefs: []
  type: TYPE_IMG
- en: The window shows the code on the left and the result on the right
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s upload our models. Click on assets on the left-hand bar and drag and
    drop the three models of this project, that is, `gearbox_planetary.glb`, `gearbox_worm.glb`,
    and `gearbox_conical.glb`, onto the square:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/452758c2-c778-46c4-b608-527114b5b1ae.png)'
  prefs: []
  type: TYPE_IMG
- en: The assets window
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the models have been uploaded, they will appear on the dashboard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/099e9a52-b0b7-4709-a32f-c89931dd67db.png)'
  prefs: []
  type: TYPE_IMG
- en: Assets listed in the assets window
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting each model will allow you to Copy the link to the asset or `Delete`
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/231a763e-7128-4327-b887-c719e1447659.png)'
  prefs: []
  type: TYPE_IMG
- en: Link to the assets and a button to delete it
  prefs: []
  type: TYPE_NORMAL
- en: Glitch saves every key we press, so there is no need for us to manually save
    the code.
  prefs: []
  type: TYPE_NORMAL
- en: With our basic elements ready, let's write the web page code, starting with
    the style sheet and then the HTML page.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the style sheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the style sheet, we are going to decide on the appearance of our web page.
    Since our main goal is to show the AR, we will keep it simple for now. The Glitch
    `style.css` file will already have some code in it. Let''s modify this file and
    adapt it to our needs. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to leave the body brackets as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Here, we specify the font we are going to use for the web page and the margins
    of the body element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''re going to modify the `h1` title element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Now, the title will be centered, black, and in bold.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some class elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This class will encapsulate the 3D models when they are displayed over the
    web page (not in AR). They will appear inside a box, with rounded borders and
    a soft shadow on it. The text we will add will be centered inside the box and
    the `overflow: hidden` parameter will prevent the content from overflowing from
    the box.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll add another class for the CC BY message of the models, which is
    required for these types of models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are locating the content on the left-hand side and with italic text.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll also change the appearance of the `cc` class'' images:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: With these two lines, we are selecting the `height` of the images inside this
    class and making them a little bit transparent.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we are going to modify the `<model-viewer>` Component''s style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: With this, we will make the model viewer take the `width` of the container box
    and set its `height`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the style sheet is ready, we can create our page.
  prefs: []
  type: TYPE_NORMAL
- en: Coding the index.html page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now open the `index.html` and, at the beginning of the document, change the
    title of the web page from `Hello!` to `AR Training Web App`. You can leave the
    rest of the code between the `<head>` `</head>` tags as it is. Now, remove everything
    between the `<body>` `</body>` tags (if you want, you can leave the last two lines
    with the Glitch button).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s add the title and the three boxes for the models inside the `<body>`
    tags:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the title between `<h1>` tags so that it uses our `.css` file''s style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, after the title, add the first box with the title on top and the CC BY
    message at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The main component is the `box` class. Inside it, we have the title in `<h2>`
    format and the `cc` class with a link to the license, the two images from `creativecommons`
    to identify the CC BY license type, and the author of the model with a link to
    the Sketchfab page where it comes from.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the same for the other two models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'At the moment, your project should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ac063760-5f8a-45fb-92cd-2001da70f4e9.png)'
  prefs: []
  type: TYPE_IMG
- en: The web page with the three boxes
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have to include the 3D models with the `<model-viewer>` Component.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the <model-viewer> Component to our page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding the `<model-viewer>` Component is quite straightforward. Follow these
    steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we have to add the following two lines at the end of the `<body>` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: With these lines, we are adding the module to our page and making it work in
    new and old browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to work with a specific version of the module, add the version
    number on the URL after `model-viewer`, like this: `/model-viewer@0.3.1/`*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can call it inside the `box` class, after the `h2` title and before
    the `cc` class, making reference to the models'' URLs (put your own model''s URL
    in the `src` attribute):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The code interface can be seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/50393a44-4b8d-4d5b-ae13-926e3ae598b4.png)'
  prefs: []
  type: TYPE_IMG
- en: Final code for the <model-viewer>
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, the `<model-viewer>` tag supports several attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: The `src`, `background-color`, and `alt` attributes define the source URL, the
    color of the background, and the description, respectively.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `auto-rotate` attribute will have the model rotating by default on the web
    page (flat view, not in AR).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With `camera-controls`, we can rotate/scale the model while it's in a flat view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The really important attribute for us here is `ar`; without it, the option of
    seeing the model in AR will not be available.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do the same with the other two models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'With this, you should see the three models loaded and rotating on the web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00de810c-5f91-45cd-b407-4b27285aeed6.png)'
  prefs: []
  type: TYPE_IMG
- en: The web page with the 3D models in the display
  prefs: []
  type: TYPE_NORMAL
- en: We have finished coding. Now, let's take our mobile phone or tablet and see
    the models in AR.
  prefs: []
  type: TYPE_NORMAL
- en: Visualizing the 3D models in AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To see the models in AR, you need to open the web page with an ARCore-supporting
    device. Once you have one, the steps to visualize the model are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the URL to your final page by clicking on the Share button in the top-left
    corner of the Glitch web page and selecting Live App.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, copy the URL and paste it into your mobile device. You should see the
    3D models loading (it might take a little more time than it would on a computer
    since they are detailed models):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea44a044-896f-4568-8cfb-0c2fdf3f9d0e.png)'
  prefs: []
  type: TYPE_IMG
- en: The web page displayed on the mobile phone
  prefs: []
  type: TYPE_NORMAL
- en: In the bottom-right corner of each model, you will see a little box that doesn't
    appear in the computer's browser. Click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first time you do this, a message will appear, asking if the page can open
    Google Play Services for AR, and if you don''t have it installed, it will ask
    you to install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ef307b0-1949-4243-9b65-b196ec49d48d.png)'
  prefs: []
  type: TYPE_IMG
- en: Google Play Services for AR in the Google Play Store
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will see the 3D model in fullscreen, along with a button at the bottom
    to View in your space (AR). Click on it to launch the camera and point it at a
    flat surface:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9912b89e-b83b-4d04-862b-0c880ab86492.png)'
  prefs: []
  type: TYPE_IMG
- en: The model displayed fullscreen with the button to see it in AR below
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the model has been fixed to a surface, we can move around it. By touching
    the screen, you can move, rotate, and scale it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c54e02a-e42b-4c49-920e-267d947930df.png)'
  prefs: []
  type: TYPE_IMG
- en: The model in AR over the real floor
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can play with the size and position of the model to view it from different
    angles and to move inside it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Important! 3D models must be accessed through an HTTPS connection. Otherwise,
    when clicking on the little box in the bottom-right corner, the View in your space
    button won't appear for the model. Keep this in mind if you use your own server
    in a future application instead of Glitch.
  prefs: []
  type: TYPE_NORMAL
- en: And that's it. Now, you know how to display models in AR using the Web Component
    `<model-viewer>` and ARCore.
  prefs: []
  type: TYPE_NORMAL
- en: As we mentioned previously, the Component is quite new and constantly changing.
    To see the latest features and accepted properties, you can take a look at [https://googlewebcomponents.github.io/model-viewer/](https://googlewebcomponents.github.io/model-viewer/)
    and [https://github.com/GoogleWebComponents/model-viewer](https://github.com/GoogleWebComponents/model-viewer).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create another training project using the same
    3D models but with the Augmented Class! tool instead. We will use an image marker
    and add interaction to our final project.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring Augmented Class!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Augmented Class! is an educational authoring tool born from the motivation of
    a group of developers and teachers/professors and provides a complete solution
    that allows all the members of the educational community (teachers, students,
    and parents) to create and share interactive AR projects without technical knowledge
    and without the usual constraints of these kinds of tools, such as limited content
    and functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, in its 3.0.30 version, it's freely available in the Google Play Store
    and in private beta versions for PC. The application uses image markers, which
    are known as targets in other tools. This means it displays the virtual content
    over a real image, such as a picture, book cover, and so on, instead of over a
    flat surface like ARCore does. Augmented Class! allows a wide variety of content
    (images, audio files, videos, 3D models, and text), also we can add interaction
    (touching the screen, playing with the distance from the camera to the marker,
    and playing with the distance between two markers) and share our projects between
    users. It's free in this version and it is expected they will launch more free
    and pro functionalities in the upcoming months. For more information, visit [www.augmentedclass.com](http://www.augmentedclass.com).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will use the Android app to create a simple project to display
    a 3D model of a gearbox. Then, we will add user interaction to display further
    information. Finally, we will create another marker and create an interaction
    between them. For that, we will prepare our material (images and 3D models) on
    the mobile device, create a simple project, add some user interaction to it, and
    create an interaction between two different markers.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, we'll need to prepare all the material for our mobile device.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the material
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start the project, we have to prepare the material in our mobile
    device so that we can access it quickly:'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we need to do is register on their web page ([http://creativitic.es/augmentedclass/beta/](http://creativitic.es/augmentedclass/beta/))
    and download the Android app at [https://play.google.com/store/apps/details?id=com.AugmentedClass.AClass&hl=es_419](https://play.google.com/store/apps/details?id=com.AugmentedClass.AClass&hl=es_419).
    The app allows us demo access without us having to log in, but it has more restrictions
    for projects than it does with registered access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, on your phone or tablet, create a folder called `AClass` in the `root`
    folder and copy the model file, `gearbox_worm.glb`, and the markers, `gearbox_worm.jpg`
    and `component_desc.jpg`, into it. Creating a folder isn't required, but it will
    make using and searching for content from the app easier.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we are ready to start the app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to start by creating a simple project to see how AR can be used
    in a training project using image-based markers. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the app, give the required permissions, and on the login page, enter the
    username and password you should have received from the email address you provided
    previously:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/176b10c4-dace-42e6-82dc-07ea605a653e.png)'
  prefs: []
  type: TYPE_IMG
- en: Augmented Class! app login window
  prefs: []
  type: TYPE_NORMAL
- en: 'The first time you open the app, you will be asked to complete a simple tutorial,
    where you have to follow some basic steps to create a very simple project with
    some given resources:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0aa109d2-76c9-41e5-a5ab-e4486885ee0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Initial tutorial
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed the tutorial, from the main menu, press Go to Inventor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the inventor window, click on the created New Project to select it and delete
    it by pressing the delete icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/477c957e-61dd-4cb9-9e60-003382ecf632.png)'
  prefs: []
  type: TYPE_IMG
- en: Inventor window with the project created and the tutorial deleted
  prefs: []
  type: TYPE_NORMAL
- en: Now, click on Create a new project to enter the blackboard window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Before anything else, give the project a name so that you can identify it later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here, we can select our type of marker. They are as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Simple Marker: Shows the AR content over the selected image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Camera Interaction: Shows some AR content when the camera is far from the marker
    and another different AR content when the camera is close to the marker'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Marker Interaction: Shows an AR content in each marker when they are separated
    and other content in each one when they are close'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Choose Simple Marker:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1b1a8a31-4df0-4ce9-8671-9001952fee98.png)'
  prefs: []
  type: TYPE_IMG
- en: Giving the project a name from the top bar
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we need to do is select a marker. We could select a previous
    one, take a picture of an image from our camera, or upload a marker. Drag the
    square Load MARKER over the white square in the middle and select the `gearbox_worm.jpg`
    image from your mobile device:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46224ee9-d4ed-431b-b7de-7a7fcc3120dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the Load MARKER square from the left scrollview to the middle
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can add our 3D model to the marker. Click on the 3D button on the left
    and drag Load model to the marker in the middle of the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1e4a0391-4d4c-407d-a352-1cdfbf498fd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the Load model square to the marker in the middle
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the `AClass` folder we created earlier and select `gearbox_worm.glb`.
    As you can see, many file types are accepted:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0d54980c-0ddd-4ee2-8c3e-2f2d90360542.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting our 3D model
  prefs: []
  type: TYPE_NORMAL
- en: 'Wait until the model has loaded. You will see that the model is selected by
    default and that new buttons are being displayed on the top bar. Select the hand icon
    to manipulate the model. Using the move/rotate/scale buttons, manipulate the gearbox
    until it looks as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4ebf9ad2-f477-4853-8e24-8d1a6354bf98.png)'
  prefs: []
  type: TYPE_IMG
- en: 3D model rotated and scaled down
  prefs: []
  type: TYPE_NORMAL
- en: The multi-gesture option allows you to manipulate the model with fewer buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, press on the Scene save icon under the Hierarchy panel. Our current marker
    will be saved and a thumbnail will appear on the bottom bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/04333232-c818-480c-8a71-cd0286c05de0.png)'
  prefs: []
  type: TYPE_IMG
- en: The current marker appears as a thumbnail in the bottom bar
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the Projects button in the top-left corner to quit the blackboard.
    Then, from the top-left corner, click on the Home button to go to the main menu.
    There, press Go to Viewer. Here, we can see our project on the grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dbb0e531-30a8-4263-b2a6-c6487a7e295d.png)'
  prefs: []
  type: TYPE_IMG
- en: The viewer window with our project
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we only have one project and it''s already selected, press the eye icon
    to load the AR. Then, point with the camera to the marker to see the 3D model
    appear over the image. Move and rotate the image and get closer to/further away
    from it to see the model from all angles:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6004136-857a-4321-a99b-86620169f8ec.png)'
  prefs: []
  type: TYPE_IMG
- en: The gearbox appearing over the image marker
  prefs: []
  type: TYPE_NORMAL
- en: Both the inventor and the viewer windows have a printer button so that you can
    print a PDF with the markers in case you don't have them at hand.
  prefs: []
  type: TYPE_NORMAL
- en: That's it. We have the basic project ready. Now, let's add some interaction
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding user interaction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s add some interactivity to our project by letting the user touch the
    screen so that they can view more AR information when hovering over the marker.
    Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the Inventor window and select our project. Press the pencil icon
    to edit it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/34b57faa-3a06-472a-939e-9414ea65b39d.png)'
  prefs: []
  type: TYPE_IMG
- en: Editing a project
  prefs: []
  type: TYPE_NORMAL
- en: 'Press the thumbnail and then the pencil icon to edit the marker''s scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a0f1450-c063-4520-8615-94cc9233e729.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting and editing the scene
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add some information. On the left-hand bar, press the texts button and
    drag one of the fonts over the marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e74591fb-3bb6-4ec8-b8e7-a96957ca8945.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging a text element over the marker
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter the text `Worm gear` and, with the manipulation buttons, move it until
    it''s next to the gold-colored gear (the worm gear) of our 3D model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b299f30d-71bf-4347-bc6c-0d8554655d96.png)'
  prefs: []
  type: TYPE_IMG
- en: Locating the text next to the object it makes reference to
  prefs: []
  type: TYPE_NORMAL
- en: 'To make it easier to place, you can change the camera perspective by pressing
    the camera icon and then on the camera with the eye:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c8d94898-9b73-4896-8029-5f5cd19537fc.png)'
  prefs: []
  type: TYPE_IMG
- en: Switching the camera view to top view
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, with the text selected, press the clock icon to add the interaction and
    select the hand icon. This way, the text will appear when the user touches the
    screen once the model is visible:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f8aabb5-c2e5-4e77-954e-33f034549b1a.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the interaction of the text
  prefs: []
  type: TYPE_NORMAL
- en: You can select the different elements on the scene by pressing them or on their
    names in the Hierarchy panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the scene and go back to the viewer window to launch the AR. Now, when
    the model appears over the image, press it. The text will appear:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c29c7a7f-811d-4a37-ab7f-17a9f875386b.png)'
  prefs: []
  type: TYPE_IMG
- en: The text appearing when touching the element on the screen
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we've learned how to add basic interaction to our marker. In
    the next section, we will create a marker interaction instead.
  prefs: []
  type: TYPE_NORMAL
- en: Creating interaction between markers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will create a marker interaction. We will have two markers: the model,
    as in the previous sections, and some simple text, `Component Description`.'
  prefs: []
  type: TYPE_NORMAL
- en: For this example, we will keep it simple, and when we focus on the model's marker
    with the camera, it will show the 3D model. However, when we put both markers
    together, the description text will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we are going to reuse our 3D model''s marker, we will create another
    project. Inside a project, single markers can''t be repeated as the viewer won''t
    know which content it should display over the marker. Thus, we will start a new
    project and create the necessary interaction. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the project window, create a new project, and in the blackboard window,
    call it `Interactive Gearbox`. For this project, select two marker interactions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2512ed6f-4d84-4fa0-8a75-a03fd59703a4.png)'
  prefs: []
  type: TYPE_IMG
- en: The new project with two markers
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, a new button will appear in the top-right corner: Separated/Together.
    This button will switch between the two modes (when the markers are separated
    and together), allowing us to place different content over the markers in each
    case.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, from the list of markers, make `gearbox_worm` the first marker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc8bfb59-d2ca-4c74-9c55-2e1ac8ea2aff.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the previously uploaded gearbox_womr1 image onto the first marker
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, drag the Load MARKER square onto the second one to load the `component_desc.png`
    picture on it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/746b0a65-63b5-40de-a94f-db2e8fb404c7.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the Load MARKER square to load an image from the mobile device
  prefs: []
  type: TYPE_NORMAL
- en: 'Press the 3D button and drag and drop the `gearbox_worm` model from the scrollview''s
    end over the first marker. This will be our content for when markers are separated:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6b8ca40b-b02d-4adf-b21c-268ad0a4bacf.png)'
  prefs: []
  type: TYPE_IMG
- en: Dragging the previously uploaded model
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, click on the Together button to change to the content that''s going to
    appear when we put them close to each other. You will see that the previous content
    will disappear from the scene:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5674cd7f-dd59-4615-8be8-c69021e95e24.png)'
  prefs: []
  type: TYPE_IMG
- en: The scene changed to the Together mode
  prefs: []
  type: TYPE_NORMAL
- en: Repeat *step 4* to place the model over the first marker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the text button and drag and drop one of the fonts over the first marker
    in two separate instances to create two different sets of text. Select and place
    them like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8ac77d5b-9755-4c9f-b919-a4c4ec098226.png)'
  prefs: []
  type: TYPE_IMG
- en: The scene with the model and the information text
  prefs: []
  type: TYPE_NORMAL
- en: 'You can make use of the camera''s buttons to reduce the scene and see it from
    the top in order to place the text properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abe72f57-a28d-4881-9ac5-51ae0427e8ef.png)'
  prefs: []
  type: TYPE_IMG
- en: The same scene from above after changing the camera view
  prefs: []
  type: TYPE_NORMAL
- en: 'That''s it. Now, press the save button and go back to the viewer window to
    launch the AR. Select the current project in the grid and press the eye icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac94cf3d-d136-4732-b4f2-d967c0076b09.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting the current project to display in AR
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will see that, when they are separated, the gearbox shows the 3D model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d34a2090-b541-41e6-833c-55f5a8f4421d.png)'
  prefs: []
  type: TYPE_IMG
- en: When the markers are separated, only the model appears
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, when they''re put together, we''re shown the 3D model and the text we
    added earlier:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/65df9321-4f28-48a6-831a-76ecfafb8c56.png)'
  prefs: []
  type: TYPE_IMG
- en: When the markers have joined the model and the information is displayed
  prefs: []
  type: TYPE_NORMAL
- en: Beyond this example, this kind of interaction is very useful for complex explanations
    such as chemical reactions (we have different components that behave in one way
    when they are separated and in another way when they are together), for word-forming,
    for commands (we can have markers such as Component Description, Assembly, or
    Basic Maintenance and, depending on which one we put close to the model, different
    information will appear), and more.
  prefs: []
  type: TYPE_NORMAL
- en: Sharing the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the projects that are created on a device are stored locally. However,
    you may want to share one or more with your students or colleagues. For that,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the projects window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the project and press the share icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6303151d-f757-4acb-8fca-f372e20af7e1.png)'
  prefs: []
  type: TYPE_IMG
- en: Sharing the selected project
  prefs: []
  type: TYPE_NORMAL
- en: 'For multiple selection, long-press on a project until the checkboxes appear
    and select as many as you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c158e4e6-40a1-49db-ab91-3b3c25c6d53d.png)'
  prefs: []
  type: TYPE_IMG
- en: Sharing multiple projects
  prefs: []
  type: TYPE_NORMAL
- en: 'A window will open so that you can share your project file via email, social
    networks, and so on:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/90a93b6e-6adb-48c6-9a0e-7ca55a68db77.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting how to share the project(s)
  prefs: []
  type: TYPE_NORMAL
- en: 'To import another person''s project (or a project you created in another device),
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the projects file from your email or drive, or where you had shared
    it (remember the folder you downloaded it from):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the projects window.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Click on the download icon (the only active one when a project is not selected):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/39622147-27c9-49ef-bf0e-c386a4b405da.png)'
  prefs: []
  type: TYPE_IMG
- en: Selecting to import a project file
  prefs: []
  type: TYPE_NORMAL
- en: 'Browse to the folder where you downloaded the file and select it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f7c00c3-1014-4a8b-8f14-b586f4e35a70.png)'
  prefs: []
  type: TYPE_IMG
- en: Choosing the project file
  prefs: []
  type: TYPE_NORMAL
- en: The project(s) will be imported automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Once the new projects have been imported into your projects window, you can
    edit and delete them like any other project you have created.
  prefs: []
  type: TYPE_NORMAL
- en: What's next?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you've learned how to create a simple marker and two marker interactions,
    and added interaction for touchscreens. To do so, we've used a 3D model and some
    text, but you can try enriching the current projects with video files or audio
    explanations.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, Augmented Class! offers more options, including interaction
    with the camera (content changes when the camera is far from the marker and when
    it's close to it), delayed showing of the content (elements appear after a time
    and they can disappear again or not), and content editing (video and audio loop,
    text color and style, and so on). Once you've tried out all of these options and you're
    familiar with them, design and create a fully interactive project using every
    possible interaction.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about two different tools for training projects.
    The first one is based on ARCore's web feature, which allows us, without having
    to code much, to add AR visualization to any 3D model that's displayed on a web
    page. The second tool, Augmented Class!, has allowed us to easily create interactive
    educational projects that can serve different purposes, such as learning the basics
    of a piece, training a maintenance engineer, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have a better understanding of the versatility of AR, how it can be
    used on mobile devices and through web apps, and how interaction can help create
    a deeper and more valuable experience. With the skills you've acquired in this
    chapter, you can try to migrate your projects into other areas and needs, as well
    as exploring both tools even further so that you can improve the current projects.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will start using the Unity 3D environment and some other
    AR tools that can be integrated into it. Here, you will learn how to use the EasyAR
    tool's image recognition process to create an AR catalog.
  prefs: []
  type: TYPE_NORMAL
