- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing State – Part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will start looking at managing state. There is also a continuation
    of this chapter in *Chapter 11*, *Managing State – Part 2*.
  prefs: []
  type: TYPE_NORMAL
- en: There are many different ways of managing state or persisting data. As soon
    as we leave a component, the state is gone. If we click the counter button from
    the sample pages, see the counter count up and then navigate away, we don’t know
    how many times we’ll need to click the counter button and have to start over.
    You can’t imagine how many times I have clicked that counter button over the years.
    It is such a simple yet powerful demo of Blazor and was a part of Steve’s original
    demo back in 2017.
  prefs: []
  type: TYPE_NORMAL
- en: To get started quickly, I have split this chapter in two. In this chapter, we
    are focusing on data access, and we will come back to more state management in
    the second part. Since this book focuses on Blazor, we will not explore how to
    connect to databases but create simple JSON storage instead.
  prefs: []
  type: TYPE_NORMAL
- en: In the first edition, we used Entity Framework to connect to a database, but
    there were people who were not used to working with Entity Framework, and they
    got stuck pretty fast. Using Entity Framework is a book all in itself, so I have
    opted not to include that in this book to remove any added complexity.
  prefs: []
  type: TYPE_NORMAL
- en: In the repo on GitHub, you can find more examples of storing data in databases
    such as `RavenDB` or `MSSQL`.
  prefs: []
  type: TYPE_NORMAL
- en: We will use a common pattern called the **repository pattern**.
  prefs: []
  type: TYPE_NORMAL
- en: We will also create an API to access the data from the JSON repository.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to create a JSON repository
    and an API.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding the API to Blazor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have followed the previous chapters or use the `Chapter02` folder
    on GitHub as the starting point.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter’s result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter03](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter03).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a data project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many ways of persisting data: document databases, relational databases,
    and files, to name a few. To avoid complexity in the book, we will use the simplest
    way of creating blog posts for our project by storing them as JSON in a folder.'
  prefs: []
  type: TYPE_NORMAL
- en: To save our blog posts, we will use JSON files stored in a folder, and to do
    so, we need to create a new project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can create a new project from within Visual Studio (to be honest, that’s
    how I would do it), but to get to know the .NET CLI, let’s do it from the command
    line instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a new project, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a PowerShell prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to the `MyBlog` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a class library (`classlib`) by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `dotnet` tool should now have created a folder called `Data`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need to create a project where we can put our models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new projects to our solution by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It will look for any solution in the current folder.
  prefs: []
  type: TYPE_NORMAL
- en: We call the projects `Data` and `Data.Models` so their purpose will be easy
    to understand and they will be easy to find.
  prefs: []
  type: TYPE_NORMAL
- en: The default project has a `class1.cs` file – feel free to delete the file.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to create data classes to store our information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating data classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we need to create a class for our blog post. To do that, we will go back
    to Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `MyBlog` solution in Visual Studio (if it is not already open).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We should now have a new project called `Data` in our solution. We might get
    a popup asking if we want to reload the solution; click **Reload** if so.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Right-click on the `Data.Models` project and select **Add** | **Class**. Name
    the class `BlogPost.cs` and click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Data.Models` project and select **Add** | **Class**. Name
    the class `Category.cs` and click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Data.Models` project and select **Add** | **Class**. Name
    the class `Tag.cs` and click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Data.Models` project and select **Add** | **Class**. Name
    the class `Comment.cs` and click **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `Category.cs` and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Category` class contains `Id` and `Name`. It might seem strange that the
    `Id` property is a string, but this is because we will support multiple data storage
    types, including MSSQL, RavenDB, and JSON. A string is a great datatype to support
    all of these. `Id` is also nullable, so if we create a new category, we send in
    null as an `Id`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `Tag.cs` and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Tag` class contains an `Id` and `Name`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `Comment.cs` and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `comment` class could be part of the `Blogpost` class, but to use the same
    classes for different database types, we add comments as a separate entity referencing
    the blog post.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `BlogPost.cs` and replace the content with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this class, we define the content of our blog post. We need an `Id` to identify
    the blog post, a title, some text (the article), and the publishing date. We also
    have a `Category` property in the class, which is of the `Category` type. In this
    case, a blog post can have only one category, and a blog post can contain zero
    or more tags. We define the `Tag` property with `List<Tag>`.
  prefs: []
  type: TYPE_NORMAL
- en: We have now created a couple of classes that we will use. I have kept the complexity
    of these classes to a minimum since we are here to learn about Blazor.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will create a way to store and retrieve the blog post information.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will create an API.
  prefs: []
  type: TYPE_NORMAL
- en: We will create one API that has direct database access and one that will retrieve
    data through a Web API.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 7*, *Creating an API*, we will get back to creating the Web API.
    Why are we creating two APIs?
  prefs: []
  type: TYPE_NORMAL
- en: We are not creating two APIs; we are creating a service with direct database
    access and a client that goes over the web and then uses direct database access.
    But we will use the same interface for both scenarios, making it possible to use
    one on the server and the other on the client.
  prefs: []
  type: TYPE_NORMAL
- en: In a real-world application, it would make more sense to access all the data
    in one way, not use both. But the point is to show that it is possible to mix
    and match and pick what is right for your scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will start with the API with direct database access:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Data.Models` project, select **Add** | **New Folder**, and
    name it `Interfaces`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the `Interfaces` folder and select **Add** | **Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the list of different templates, select **Interface** and name it `IBlogApi.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `IBlogApi.cs` and replace its content with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Alright, so here’s the deal with this `IBlogApi` thing. It’s basically our cheat
    sheet for handling all the blog stuff, like posts, comments, tags, and categories.
    Need to grab some posts or zap one out of existence? This interface is your go-to.
    It’s all about making our lives easier when we’re coding the blog, and keeping
    things tidy and straightforward.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we have an interface for the API with the methods we need to list blog
    posts, tags, and categories, as well as to save (create/update) and delete them.
    Next, let’s implement the interface.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the interface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The idea is to create a class that stores our blog posts, tags, comments, and
    categories as JSON files on our file system. We will start with implementing the
    direct access implementation. This is the one we can use when accessing information
    directly from the database and not through a Web API. We will use the direct access
    implementation when running our components on the server and accessing the database
    and our Web API will also use it to access the database, but we will come back
    to that in *Chapter 7*, *Creating an API*.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the interface for the direct database access implementation, follow
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: First, to be able to access our data models, we need to add a reference to our
    `Data` models. Expand the `Data` project and right-click on the **Dependencies**
    node. Select **Add Project reference** and check the `Data.Models` project. Click
    **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Dependencies** node once again, but select **Manage NuGet
    Packages**. In the **Browse** tab, search for `Microsoft.Extensions.Options` and
    click **Install**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need a class to hold our settings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Data` project, add a new class called `BlogApiJsonDirectAccessSetting.cs`
    and replace its content with:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the class where we hold our settings and the folders we will be using
    for storing our JSON files. `IOptions` is configured in `program` during the configuration
    of dependencies and is injected into all the classes that ask for a specific type.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to create a class for our API. Right-click on the `Data` project,
    select **Add** | **Class**, and name the class `BlogApiJsonDirectAccess.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `BlogApiJsonDirectAccess.cs` and replace the code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is the start of our JSON direct access class. It references the `IBlogAPI`
    and we will implement each method the interface wants.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The error list should contain many errors since we haven’t implemented the methods
    yet. We are inheriting from the `IBlogApi`, so we know what methods to expose.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: To be able to read settings, we also add a way to inject `IOptions`. By getting
    the settings this way, we don’t have to add any code – it can come from a database,
    a settings file, or even be hard coded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is my favorite way to get settings because this part of the code itself
    doesn’t know how to do it – instead, we add all our configurations using dependency
    injection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the `BlogApiJsonDirectAccess` class:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We get the injected setting and ensure we have the correct folder structure
    for our data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, it’s time to implement the API, but first, we need a couple of helper
    methods that can load the data from our file system. To do this, we add the following
    code to our class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `LoadAsync` method is a generic method that allows us to load blog posts,
    tags, comments, and categories using the same method. It will load data from the
    file system whenever we ask for it. This would be a great place to put in some
    cache logic, but this is closer to what the implementation would look like if
    we used a database (we would always ask the database).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, we will add a couple of methods to help manipulate the data, namely `SaveAsync`
    and `Delete`. Add the following methods:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: These methods are also generic to share as much code as possible and avoid repeating
    the code for every type of class (`BlogPost`, `Category`, `Comment,` and `Tag`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, it’s time to implement the API by adding the methods to get blog posts.
    Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `GetBlogPostsAsync` method takes a couple of parameters we will use later
    for paging. It will get the blog posts from our JSON storage and return the posts
    we are asking for, skipping and taking the right amount for our paging.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also have a method that returns the current blog post count, which we will
    use for paging. Last but not least, we have `GetBlogPostAsync` for getting a single
    blog post from our JSON storage.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, we need to add the same methods for categories. To do this, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Category` methods don’t have any support for paging. Otherwise, they should
    look familiar as they do almost the same as the blog post methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, it’s time to do the same thing for tags. Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As we can see, the `tag` code is basically a copy of the code for categories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also need a way to retrieve the comments for a blog post. We will not create
    a method to retrieve one `comment`; we always get all the comments for a specific
    post. Add the following method:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method will get all the comments for a blog post.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We also need a couple of methods for saving the data, so next up, we’ll add
    methods for saving blog posts, categories, comments, and tags.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first thing we do is to check that the `id` of the item is not null. If
    it is, we create a new `Guid`. This is the `id` of the new item. And this is also
    going to be the name of the JSON files stored on the file system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now have a method for saving and getting items. But sometimes, things don’t
    go as planned, and we need a way to delete the items that we have created. Next
    up, we will add some delete methods. Add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code we just added calls the `DeleteAsync` method, which deletes the blog
    post, tag, category, etc.
  prefs: []
  type: TYPE_NORMAL
- en: Our JSON storage is done!
  prefs: []
  type: TYPE_NORMAL
- en: In the end, there will be four folders stored on the file system, one for blog
    posts, one for categories, one for comments, and one for tags.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to add and configure the Blazor project to use our new storage.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the API to Blazor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We now have a way to access JSON files stored on our file system. In the repo
    on GitHub, you can find more ways of storing our data with RavenDB or SQL Server,
    but be mindful to keep the focus on what is important (Blazor).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it’s time to add the API to our Blazor Server project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `BlazorWebApp` project, **add a project reference** to the `Data` project.
    Open `Program.cs` and add the following namespaces:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code after .AddInteractiveWebAssemblyComponents();:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: We are also saying that when we ask for an `IBlogAPI` we will get an instance
    of `BlogApiJsonDirectAccess` back from our dependency injection. We will return
    to dependency injection in *Chapter 4*, *Understanding Basic Blazor Components*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can use our API to access the database in our Blazor project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter taught us how to create a simple JSON repository for our data.
    We also learned that other alternatives could be found in the GitHub repo if you
    want to look at other options.
  prefs: []
  type: TYPE_NORMAL
- en: We also created an interface to access the data, which we will use some more
    later in the book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about components, particularly the built-in
    components in Blazor templates. We will also create our first component using
    the API and repository we made in this chapter.
  prefs: []
  type: TYPE_NORMAL
