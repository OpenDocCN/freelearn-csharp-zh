["```cs\nclass Dog\n{\n}\n```", "```cs\nDog dog = new Dog();\n```", "```cs\n// Within a class named Dog\npublic class Dog\n{\n  // Constructor\n  public Dog()\n  {\n    Console.WriteLine(\"A Dog object has been created\");\n  }\n}\n```", "```cs\npublic string Name = \"unnamed\";\n```", "```cs\nDog sparky = new Dog();\nDog ricky = new Dog();\n```", "```cs\nsparky.Name = \"Sparky\";\nricky.Name = \"Ricky\";\n```", "```cs\n        public class Book\n        {\n            public string Title;\n            public string Author;\n            public string Publisher;\n            public int Pages;\n            public string Description;\n        }\n    ```", "```cs\n        public static class Solution\n        {\n            public static void Main()\n            {\n            }\n        }\n    ```", "```cs\n    Book book1 = new Book();\n    book1.Author = \"New Writer\";\n    book1.Title = \"First Book\";\n    book1.Publisher = \"Publisher 1\";\n    ```", "```cs\n    Book book2 = new Book();\n    book2.Author = \"New Writer\";\n    book2.Title = \"Second Book\";\n    book2.Publisher = \"Publisher 2\";\n    book2.Description = \"Interesting read\";\n    ```", "```cs\n    private static void Print(Book book)\n    {\n        Console.WriteLine($\"Author: {book.Author}, \" +\n                          $\"Title: {book.Title}, \" +\n                          $\"Publisher: {book.Publisher}, \" +\n                          $\"Description: {book.Description}.\");\n    }\n    ```", "```cs\n    Print(book1);\n    Print(book2);\n    ```", "```cs\nAuthor: New Writer, Title: First Book, Publisher: Publisher 1, Description: .\nAuthor: New Writer, Title: Second Book, Publisher: Publisher 2, Description: Interesting read.\n```", "```cs\nDog speedy;\n```", "```cs\nprivate static void SetTo5(int number)\n{\n        number = 5;\n}\n```", "```cs\nint a = 2;\n// a is 2\nConsole.WriteLine(a);\nSetTo5(a);\n// a is still 2\nConsole.WriteLine(a);\n```", "```cs\n2\n2 \n```", "```cs\npublic class Dog\n{    public string Owner;\n}\n```", "```cs\nprivate static void ResetOwner(Dog dog)\n{\n    dog.Owner = \"None\";\n}\n```", "```cs\nDog dog = new Dog(\"speedy\");\nConsole.WriteLine(dog.Owner);\nResetOwner(dog);\n// Owner is \"None\"- changes remain\nConsole.WriteLine(dog.Owner);\n```", "```cs\nspeedy\nNone \n```", "```cs\nprivate static void Recreate(Dog dog)\n{\n    dog = new Dog(\"Recreated\");\n}\n```", "```cs\npublic string GetName()\n{\n    return Name;\n}\npublic string SetName (string name)\n{\n    Name = name;\n}\n```", "```cs\npublic string Name {get; set;}\n```", "```cs\nprivate string _owner;\npublic string Owner\n{\n    get\n    {\n        return _owner;\n    }\n    set\n    {\n        _owner = value;\n    }\n}\n```", "```cs\npublic string Name {get; private set;}\n```", "```cs\npublic string Name {get;} = \"unnamed\";\n```", "```cs\nprivate readonly string _name;\npublic string get_Name()\n{\n    return _name;\n}\n```", "```cs\nprivate string _name;\n\npublic string Name\n{\n    get\n    {\n        return \"Dog's name is \" + _name;\n    }\n}\n```", "```cs\npublic string Name => \"Dog's name is \" + _name;\n```", "```cs\npublic Dog(string name)\n{\n  if(string.IsNullOrWhitespace(name))\n  {\n    throw new ArgumentNullException(\"name\")\n  }\n  Name = name;\n}\n```", "```cs\nprivate readonly string name;\npublic Dog(string name)\n{\n  this.name = name;\n}\n```", "```cs\nDog ricky = new Dog(\"Ricky\");\nDog sparky = new Dog(\"Sparky\");\n```", "```cs\nDog dog = new Dog(\"Ricky\");\ndog.Owner = \"Tobias\";\n```", "```cs\nDog dog = new Dog(\"Ricky\")\n{\n  Owner = \"Tobias\"\n};\n```", "```cs\nDog ricky = new Dog(\"Ricky\");\nDog sparky = new Dog(\"Sparky\");\n```", "```cs\nDog[] dogs = new Dog[2];\ndogs[0] = ricky;\ndogs[1] = sparky;\n```", "```cs\nDog[] dogs = {ricky, sparky};\n```", "```cs\nDog dog = new(\"Dog\");\n```", "```cs\npublic void Sit()\n{\n    // Implementation of how a dog sits\n}\npublic void Bark()\n{\n    // Implementation of how a dog barks \n}\n```", "```cs\nRicky.Sit();\nSparky.Bark();\n```", "```cs\nclass Computer\n{\n    private readonly Key[] keys;\n}\n```", "```cs\nclass Computer\n{\n    private readonly Keyboard keyboard;\n}\nclass Keyboard\n{\n    private readonly Key[] keys;\n}\n```", "```cs\n    public class Rectangle\n    {\n        private readonly double _width;\n        private readonly double _height;\n        public double Area\n        {\n            get\n            {\n                return _width * _height;\n            }\n        } \n\n        public Rectangle(double width, double height)\n        {\n            _width = width;\n            _height = height;\n        }\n    }\n    ```", "```cs\n    public class Circle\n    {\n        private readonly double _radius;\n\n        public Circle(double radius)\n        {\n            _radius = radius;\n        }\n\n        public double Area\n        {\n            get { return Math.PI * _radius * _radius; }\n        }\n    }\n    ```", "```cs\n    public static class Solution\n    {\n        public const string Equal = \"equal\";\n        public const string Rectangular = \"rectangular\";\n        public const string Circular = \"circular\";\n        public static string Solve(Rectangle[] rectangularSection, Circle[] circularSection)\n        {\n            var totalAreaOfRectangles = CalculateTotalAreaOfRectangles(rectangularSection);\n            var totalAreaOfCircles = CalculateTotalAreaOfCircles(circularSection);\n            return GetBigger(totalAreaOfRectangles, totalAreaOfCircles);\n        }\n    }\n    ```", "```cs\n    private static double CalculateTotalAreaOfRectangles(Rectangle[] rectangularSection)\n    {\n        double totalAreaOfRectangles = 0;\n        foreach (var rectangle in rectangularSection)\n        {\n            totalAreaOfRectangles += rectangle.Area;\n        }\n\n        return totalAreaOfRectangles;\n    }\n    ```", "```cs\n    private static double CalculateTotalAreaOfCircles(Circle[] circularSection)\n    {\n        double totalAreaOfCircles = 0;\n        foreach (var circle in circularSection)\n        {\n            totalAreaOfCircles += circle.Area;\n        }\n\n        return totalAreaOfCircles;\n    }\n    ```", "```cs\n    private static string GetBigger(double totalAreaOfRectangles, double totalAreaOfCircles)\n    {\n        const double margin = 0.01;\n        bool areAlmostEqual = Math.Abs(totalAreaOfRectangles - totalAreaOfCircles) <= margin;\n        if (areAlmostEqual)\n        {\n            return Equal;\n        }\n        else if (totalAreaOfRectangles > totalAreaOfCircles)\n        {\n            return Rectangular;\n        }\n        else\n        {\n            return Circular;\n        }\n    }\n    ```", "```cs\n    public static void Main()\n    { \n        string compare1 = Solve(new Rectangle[0], new Circle[0]);\n        string compare2 = Solve(new[] { new Rectangle(1, 5)}, new Circle[0]);\n        string compare3 = Solve(new Rectangle[0], new[] { new Circle(1) });\n        string compare4 = Solve(new []\n        {\n            new Rectangle(5.0, 2.1), \n            new Rectangle(3, 3), \n        }, new[]\n        {\n            new Circle(1),\n            new Circle(10), \n        });\n\n        Console.WriteLine($\"compare1 is {compare1}, \" +\n                          $\"compare2 is {compare2}, \" +\n                          $\"compare3 is {compare3}, \" +\n                          $\"compare4 is {compare4}.\");\n    }\n    ```", "```cs\n    compare1 is equal, compare2 is rectangular, compare3 is circular, compare4 is circular.\n    ```", "```cs\npublic class LoginService\n{\n    // Could be a dictionary, but we will use a simplified example.\n    private string[] _usernames;\n    private string[] _passwords;\n\n    public bool Login(string username, string password)\n    {\n        // Do a password lookup based on username\n        bool isLoggedIn = true;\n        return isLoggedIn;\n    }\n}\n```", "```cs\n    public class Human\n    {\n        public string Name { get; }\n        public int Age { get; }\n        public float Weight { get; }\n        public float Height { get; }\n\n        public Human(string name, int age, float weight, float height)\n        {\n            Name = name;\n            Age = age;\n            Weight = weight;\n            Height = height;\n        }\n    }\n    ```", "```cs\n    public class Mailman : Human\n    {\n        public Mailman(string name, int age, float weight, float height) : base(name, age, weight, height)\n        {\n        }\n\n        public void DeliverMail(Mail mail)\n        {\n           // Delivering Mail...\n        }\n    }\n    ```", "```cs\n    public class Mail\n    {\n       public string Message { get; }\n       public string Address { get; }\n\n       public Mail(string message, string address)\n       {\n           Message = message;\n           Address = address;\n       }\n    }\n    ```", "```cs\n    var mailman = new Mailman(\"Thomas\", 29, 78.5f, 190.11f);\n    var mail = new Mail(\"Hello\", \"Somewhere far far way\");\n    mailman.DeliverMail(mail);\n    ```", "```cs\nPublic class A\n{\n}\nPublic class B : A\n{\n}\n```", "```cs\nclass Tile\n{\n}\nclass MovingTile : Tile\n{\n    public void Move() {}\n}\nclass TrapTile : Tile\n{\n    public void Damage() {}\n}\n//class MovingTrapTile : ?\n```", "```cs\nclass Tile\n{\n}\n```", "```cs\nclass Motor\n{\n    public void Move() { }\n}\nclass Trap\n{\n    public void Damage() { }\n}\n```", "```cs\nclass MovingTile : Tile\n{\n    private readonly Motor _motor;\n\n    public MovingTile(Motor motor)\n    {\n        _motor = motor;\n    } \n\n    public void Move()\n    {\n        _motor.Move();\n    }\n}\n```", "```cs\nclass TrapTile : Tile\n{\n    private readonly Trap _trap;\n\n    public TrapTile(Trap trap)\n    {\n        _trap = trap;\n    }\n\n    public void Damage()\n    {\n        _trap.Damage();\n    }\n}\n```", "```cs\nclass MovingTrapTile : Tile\n{\n    private readonly Motor _motor;\n    private readonly Trap _trap;\n\n    public MovingTrapTile(Motor motor, Trap trap)\n    {\n        _motor = motor;\n        _trap = trap;\n    }\n    public void Move()\n    {\n        _motor.Move();\n    }\n    public void Damage()\n    {\n        _trap.Damage();\n    }\n}\n```", "```cs\npublic abstract class Human\n{\n    public string Name { get; }\n\n    protected Human(string name)\n    {\n        Name = name;\n    }\n\n    public abstract void Work();\n}\n```", "```cs\npublic override void Work()\n{\n    Console.WriteLine(\"A mailman is delivering mails.\");\n}\n```", "```cs\npublic class Teacher : Human\n{\n    public Teacher(string name, int age, float weight, float height) : base(name, age, weight, height)\n    {\n    }\n\n    public override void Work()\n    {\n        Console.WriteLine(\"A teacher is teaching.\");\n    }\n}\n```", "```cs\npublic class Person\n{\n    public void Say()\n    {\n        Console.WriteLine(\"Hello\");\n    }\n\n    public void Say(string words)\n    {\n        Console.WriteLine(words);\n    }\n}\n```", "```cs\nMailman mailman = new Mailman(\"Thomas\", 29, 78.5f, 190.11f);\nTeacher teacher = new Teacher(\"Gareth\", 35, 100.5f, 186.49f);\n// Specialized types can be stored as their generalized forms.\nHuman[] humans = {mailman, teacher};\n// Interacting with different human types\n// as if they were the same type- polymorphism.\nforeach (var human in humans)\n{\n    human.Work();\n}\n```", "```cs\nA mailman is delivering mails.\nA teacher is teaching.\n```", "```cs\nforeach (var human in humans)\n{\n    Type humanType = human.GetType();\n    if (humanType == typeof(Mailman))\n    {\n        Console.WriteLine(\"Mailman is working...\");\n    }\n    else\n    {\n        Console.WriteLine(\"Teaching\");\n    }\n}\n```", "```cs\nHuman[] humans = {mailman, teacher};\nforeach (var human in humans)\n{\n    Console.WriteLine(human);\n}\n```", "```cs\nChapter02.Examples.Professions.Mailman\nChapter02.Examples.Professions.Teacher\n```", "```cs\npublic override string ToString()\n{\n    return $\"{nameof(Name)}: {Name},\" +\n           $\"{nameof(Age)}: {Age},\" +\n           $\"{nameof(Weight)}: {Weight},\" +\n           $\"{nameof(Height)}: {Height}\";\n}\n```", "```cs\nName: Thomas,Age: 29,Weight: 78.5,Height: 190.11\nName: Gareth,Age: 35,Weight: 100.5,Height: 186.49\n```", "```cs\npublic class ProgressBar\n{\n    public float Current { get; set; }\n    public float Max { get; }\n\n    public ProgressBar(float current, float max)\n    {\n        Max = max;\n        Current = current;\n    }\n}\n```", "```cs\nvar bar = new ProgressBar(0, 100);\nvar newProgress = 120;\nif (newProgress > bar.Max)\n{\n    bar.Current = bar.Max;\n}\nelse\n{\n    bar.Current = newProgress;\n}\n\nconst double tolerance = 0.0001;\nvar isComplete = Math.Abs(bar.Max - bar.Current) < tolerance;\n```", "```cs\npublic class ProgressBar\n{\n    private const float Tolerance = 0.001f;\n\n    private float _current;\n    public float Current\n    {\n        get => _current;\n        set\n        {\n            if (value >= Max)\n            {\n                _current = Max;\n            }\n            else if (value < 0)\n            {\n                _current = 0;\n            }\n            else\n            {\n                _current = value;\n            }\n        }\n    }\n```", "```cs\nvar bar = new ProgressBar(0, 100);\nbar.Current = 120;\nbool isComplete = bar.IsComplete;\n```", "```cs\npublic interface IWorker\n{\n    void Work();\n}\n```", "```cs\npublic class Ant : IWorker\n{\n    public void Work()\n    {\n        Console.WriteLine(\"Ant is working hard.\");\n    }\n}\n```", "```cs\npublic class Robot : IWorker\n{\n    public void Work()\n    {\n        Console.WriteLine(\"Beep boop- I am working.\");\n    }\n}\n```", "```cs\npublic class Mailman : Human\n{\n    public Mailman(string name, int age, float weight, float height) : base(name, age, weight, height)\n    {\n    }\n\n    public void DeliverMail(Mail mail)\n    {\n        // Delivering Mail...\n    }\n\n    public override void Work()\n    {\n        Console.WriteLine(\"Mailman is working...\");\n    }\n}\n```", "```cs\nIWorker human = new Mailman(\"Thomas\", 29, 78.5f, 190.11f);\nIWorker ant = new Ant();\nIWorker robot = new Robot();\n\nIWorker[] workers = {human, ant, robot};\nforeach (var worker in workers)\n{\n    worker.Work();\n}\n```", "```cs\nMailman is working...\nAnt is working hard.\nBeep boop- I am working.\n```", "```cs\npublic interface IFlyer\n{\n    void Fly();\n}\n```", "```cs\npublic class Drone : IFlyer, IWorker\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"Flying\");\n    }\n\n    public void Work()\n    {\n        Console.WriteLine(\"Working\");\n    }\n}\n```", "```cs\npublic interface IDrone : IWorker, IFlyer\n{\n}\n```", "```cs\npublic class FlyingAnt : Ant, IFlyer\n{\n    public void Fly()\n    {\n        Console.WriteLine(\"Flying\");\n    }\n}\n```", "```cs\npublic interface IIdentifiable\n{\n    long Id { get; }\n}\npublic interface IDrone : IWorker, IFlyer \n{\n}\n```", "```cs\n    public interface IShape\n    {\n        double Area { get; }\n    }\n    ```", "```cs\n    Rectangle.cs\n    public class Rectangle : IShape\n    {\n        private readonly double _width;\n        private readonly double _height;\n\n        public double Area\n        {\n            get\n            {\n                return _width * _height;\n            }\n        } \n\n        public Rectangle(double width, double height)\n        {\n    ```", "```cs\nYou can find the complete code here: https://packt.link/zSquP.\n```", "```cs\n    public class Circle : IShape\n    {\n        Private readonly double _radius;\n\n        public Circle(double radius)\n        {\n            _radius = radius;\n        }\n\n        public double Area\n        {\n            get { return Math.PI * _radius * _radius; }\n        }\n    }\n    ```", "```cs\n    public static class Solution\n    {\n            public static bool IsEnough(double mosaicArea, IShape[] tiles)\n            {\n       }\n    }\n    ```", "```cs\n                double totalArea = 0;\n                foreach (var tile in tiles)\n                {\n                    totalArea += tile.Area;\n                }\n                const double tolerance = 0.0001;\n                return totalArea - mosaicArea >= -tolerance;\n           }\n    ```", "```cs\n    public static void Main()\n    {\n        var isEnough1 = IsEnough(0, new IShape[0]);\n        var isEnough2 = IsEnough(1, new[] { new Rectangle(1, 1) });\n        var isEnough3 = IsEnough(100, new IShape[] { new Circle(5) });\n        var isEnough4 = IsEnough(5, new IShape[]\n        {\n            new Rectangle(1, 1), new Circle(1), new Rectangle(1.4,1)\n        });\n\n        Console.WriteLine($\"IsEnough1 = {isEnough1}, \" +\n                          $\"IsEnough2 = {isEnough2}, \" +\n                          $\"IsEnough3 = {isEnough3}, \" +\n                          $\"IsEnough4 = {isEnough4}.\");\n    }\n    ```", "```cs\n    IsEnough1 = True, IsEnough2 = True, IsEnough3 = False, IsEnough4 = False.\n    ```", "```cs\npublic class File\n{\n    public string Read(string filePath)\n    {\n        // implementation how to read file contents\n        // complex logic\n        return \"\";\n    }\n\n    public void Write(string filePath, string content)\n    {\n        // implementation how to append content to an existing file\n        // complex logic\n    }\n}\n```", "```cs\npublic class Reader\n{\n    public string Read(string filePath)\n    {\n        // implementation how to read file contents\n        // complex logic\n        return \"\";\n    }\n}\npublic class Writer\n{\n    public void Write(string filePath, string content)\n    {\n        // implementation how to append content to an existing file\n        // complex logic\n    }\n}\n```", "```cs\npublic class File\n{\n    private readonly Reader _reader;\n    private readonly Writer _writer;\n\n    public File()\n    {\n        _reader = new Reader();\n        _writer = new Writer();\n    }  \n\n    public string Read(string filePath) => _reader.Read(filePath);\n    public void Write(string filePath, string content) => _writer.Write(filePath, content);\n}\n```", "```cs\npublic class Merchandise\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    // VAT on top in %\n    public decimal Vat { get; set; }\n}\n```", "```cs\npublic static class TaxCalculator\n{\n    public static decimal CalculateNextPrice(decimal price, decimal vat)\n    {\n        return price * (1 + vat / 100);\n    }\n}\n```", "```cs\npublic class Merchandise\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    // VAT on top in %\n    public decimal Vat { get; set; }\n    public decimal NetPrice => Price * (1 + Vat / 100);\n}\n```", "```cs\npublic virtual string Read(string filePath)\npublic virtual void Write(string filePath, string content)\n```", "```cs\npublic File(Reader reader, Writer writer)\n{\n    _reader = reader;\n    _writer = writer;\n}\n```", "```cs\nclass Car\n{\n    public object Body { get; set; }\n    public virtual void Move()\n    {\n        // Moving\n    }\n}\nclass CarWreck : Car\n{\n    public override void Move()\n    {\n        throw new NotSupportedException(\"A broken car cannot start.\");\n    }\n}\n```", "```cs\nclass CarWreck\n{\n    public object Body { get; set; }\n}\n```", "```cs\ninterface IMovableDamageable\n{\n    void Move(Location location);\n    float Hp{get;set;}\n}\n```", "```cs\nclass ScoreText : IMovableDamageable\n{\n    public float Hp \n    { \n        get => throw new NotSupportedException(); \n        set => throw new NotSupportedException(); \n    }\n\n    public void Move(Location location)\n    {\n        Console.WriteLine($\"Moving to {location}\");\n    }\n}\n\npublic class Location\n{\n}\n```", "```cs\nclass House : IMovableDamageable\n{\n    public float Hp { get; set; }\n\n    public void Move(Location location)\n    {\n        throw new NotSupportedException();\n    }\n}\n```", "```cs\ninterface IMoveable\n{\n    void Move(Location location);\n}\ninterface IDamageable\n{\n    float Hp{get;set;}\n}\n```", "```cs\nclass House : IDamageable\n{\n    public float Hp { get; set; }\n}\n\nclass ScoreText : IMovable\n{\n    public void Move(Location location)\n    {\n        Console.WriteLine($\"Moving to {location}\");\n    }\n}\n```", "```cs\nclass Bar\n{\n    private readonly IBartender _bartender;\n\n    public Bar(IBartender bartender)\n    {\n        _bartender = bartender;\n    }\n}\n```", "```cs\nvar bar = new Bar(new Bartender());\n```", "```cs\nclass Bar\n{\n    public void ServeDrinks(IBartender bartender)\n    {\n        // serve drinks using bartender\n    }\n}\n```", "```cs\nvar bar = new Bar();\nbar.ServeDrinks(new Bartender());\n```", "```cs\nclass Bar\n{\n    public IBartender Bartender { get; set; }\n}\n```", "```cs\nvar bar = new Bar();\nbar.Bartender = new Bartender();\n```", "```cs\npublic class Reader : IReader\npublic class Writer: IWriter\n```", "```cs\nprivate readonly IReader _reader;\nprivate readonly IWriter _writer;\n\npublic File(IReader reader, IWriter writer)\n{\n    _reader = reader;\n    _writer = writer;\n}\n```", "```cs\npublic class DogsGenerator\n{\n    public static int Counter { get; private set; }\n    static DogsGenerator()\n    {\n        // Counter will be 0 anyways if not explicitly provided,\n        // this just illustrates the use of a static constructor.\n        Counter = 0;\n    }\n    public static Dog GenerateDog()\n    {\n        Counter++;\n        return new Dog(\"Dog\" + Counter);\n    }\n}\n```", "```cs\nusing static Math;\npublic static class Demo\n{\n    public static void Run()\n    {\n   //No need Math.PI\n        Console.WriteLine(PI);\n    } \n}\n```", "```cs\npublic class Human\n{\n    public virtual void SayHi()\n    {\n        Console.WriteLine(\"Hello!\");\n    }\n}\n```", "```cs\npublic class Frenchman : Human\n{\n    public override void SayHi()\n    {\n        Console.WriteLine(\"Bonjour!\");\n    }\n}\n```", "```cs\nint[] numbers = null;\nnumbers.length;\n```", "```cs\nif (dog.Owner != null)\n{\n    bool ownerNameStartsWithA = dog.Owner.StartsWith('A');\n}\n```", "```cs\ndog.Owner?.StartsWith('A');\n```", "```cs\nif (dog1.Owner == null)\n{\n    description = dog1.Name;\n}\nelse\n{\n    description = $\"{dog1.Name}, dog of {dog1.Owner}\";\n}\n```", "```cs\ndescription = dog1.Owner == null\n    ? dog1.Name\n    : $\"{dog1.Name}, dog of {dog1.Owner}\";\n```", "```cs\nif (dog1.Owner != null)\n{\n    dog2.Owner = dog1.Owner;\n}\n```", "```cs\ndog1.Owner = dog1.Owner ?? dog2.Owner;\n```", "```cs\ndog1.Owner ??= dog2.Owner;\n```", "```cs\npublic ComponentB(ComponentA componentA)\n{\n    if (componentA == null)\n    {\n        throw new ArgumentException(nameof(componentA));\n    }\n    else\n    {\n        _componentA = componentA;\n    }\n}\n```", "```cs\n_componentA = componentA ?? throw new ArgumentNullException(nameof(componentA));\n```", "```cs\npublic class BankAccount\n{\n    private decimal _balance;\n\n    public BankAccount(decimal balance)\n    {\n        _balance = balance;\n    }\n}\n```", "```cs\npublic static bool operator >(BankAccount account1, BankAccount account2)\n    => account1?._balance > account2?._balance;\n```", "```cs\npublic static bool operator <(BankAccount account1, BankAccount account2)\n    => account1?._balance < account2?._balance;\n```", "```cs\npublic static bool operator ==(BankAccount account1, BankAccount account2)\n    => account1?._balance == account2?._balance; \npublic static bool operator !=(BankAccount account1, BankAccount account2)\n    => !(account1 == account2);\n```", "```cs\nvar account1 = new BankAccount(-1.01m);\nvar account2 = new BankAccount(1.01m);\nvar account3 = new BankAccount(1001.99m);\nvar account4 = new BankAccount(1001.99m);\n```", "```cs\nConsole.WriteLine(account1 == account2);\nConsole.WriteLine(account1 != account2);\nConsole.WriteLine(account2 > account1);\nConsole.WriteLine(account1 < account2);\nConsole.WriteLine(account3 == account4);\nConsole.WriteLine(account3 != account4);\n```", "```cs\nFalse\nTrue\nTrue\nTrue\nTrue\nFalse\n```", "```cs\nint? a = null;\n```", "```cs\na = 1;\n```", "```cs\nint b = a.Value;\n```", "```cs\npublic static void Print(int element)\n{\n    Console.WriteLine(element);\n}\nIf you need to print a float, you could add another overload:\npublic static void Print(float element)\n{\n    Console.WriteLine(element);\n}\n```", "```cs\npublic static void Print(string element)\n{\n    Console.WriteLine(element);\n}\n```", "```cs\npublic static void Print(object element)\n{\n    Console.WriteLine(element);\n}\n```", "```cs\npublic static void Print<T>(T element)\n{\n    Console.WriteLine(element);\n}\n```", "```cs\npublic static void Print<T>(T[] elements)\n{\n    foreach (var element in elements)\n    {\n        Console.WriteLine(element);\n    }\n}\n```", "```cs\npublic static bool IsFirstBigger1(IComparable first, IComparable second)\n{\n    return first.CompareTo(second) > 0;\n}\n```", "```cs\npublic static bool IsFirstBigger2<T>(T first, T second)\n    where T : IComparable\n{\n    return first.CompareTo(second) > 0;\n}\n```", "```cs\npublic static IComparable Max1(IComparable first, IComparable second)\n{\n    return first.CompareTo(second) > 0\n        ? first\n        : second;\n}\n```", "```cs\npublic static T Max2<T>(T first, T second)\n    where T : IComparable\n{\n    return first.CompareTo(second) > 0\n        ? first\n        : second;\n}\n```", "```cs\nint max1 = (int)Comparator.Max1(3, -4);\n```", "```cs\nint max2 = Comparator.Max2(3, -4);\n```", "```cs\npublic enum Gender\n{\n    Male,\n    Female,\n    Other\n}\n```", "```cs\npublic static class StringExtensions\n{\n    public static void Print(this string text)\n    {\n        Console.WriteLine(text);\n    }\n}\n```", "```cs\n\"Hey\".Print();\n```", "```cs\nHey\n```", "```cs\npublic struct Point\n{\n    public readonly int X;\n    public readonly int Y;\n\n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n}\n```", "```cs\npublic readonly struct Point\n{\n    public int X { get; }\n    public int Y { get; }\n\n    public Point(int x, int y)\n    {\n        X = x;\n        Y = y;\n    }\n}\n```", "```cs\npublic static double DistanceBetween(Point p1, Point p2)\n{\n    return Math.Sqrt((p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y));\n}\n```", "```cs\npublic double DistanceTo(Point p)\n{\n    return DistanceBetween(this, p);\n}\n```", "```cs\nvar p1 = new Point(3,1);\nvar p2 = new Point(3,4);\n```", "```cs\nvar distance1 = p1.DistanceTo(p2);\n```", "```cs\nvar distance2 = Point.DistanceBetween(p1, p2);\n```", "```cs\n– 3.\n```", "```cs\npublic record MovieRecordV1\n{\n    public string Title { get; }\n    public string Director { get; }\n    public string Producer { get; } \n    public string Description { get; set; }\n    public DateTime ReleaseDate { get; }\n\n    public MovieRecordV1(string title, string director, string producer, DateTime releaseDate)\n    {\n        Title = title;\n        Director = director;\n        Producer = producer;\n        ReleaseDate = releaseDate;\n    }\n}\n```", "```cs\nprivate static void DemoRecord()\n{\n    var movie1 = new MovieRecordV1(\n        \"Star Wars: Episode I – The Phantom Menace\",\n        \"George Lucas\",\n        \"Rick McCallum\",\n        new DateTime(1999, 5, 15));\n\n    var movie2 = new MovieRecordV1(\n        \"Star Wars: Episode I – The Phantom Menace\",\n        \"George Lucas\",\n        \"Rick McCallum\",\n        new DateTime(1999, 5, 15));\n}\n```", "```cs\n    Console.WriteLine(movie1);\n```", "```cs\nMovieRecordV1 { Title = Star Wars: Episode I - The Phantom Menace, Director = George Lucas, Producer\n= Rick McCallum, Description = , ReleaseDate = 5/15/1999 12:00:00 AM }\n```", "```cs\n    Console.WriteLine(movie1.Equals(movie2));\n    Console.WriteLine(movie1 == movie2);\n```", "```cs\npublic record MovieRecord(string Title, string Director, string Producer, string Description, DateTime ReleaseDate);\n```", "```cs\npublic record MovieRecord(string Title, string Director, string Producer, DateTime ReleaseDate)\n{\n    public string Description { get; set; }\n}\n```", "```cs\nvar movie3 = movie2 with { Description = \"Records can do that?\" };\nmovie2.Description = \"Changing original\";\nConsole.WriteLine(movie3);\n```", "```cs\nMovieRecord { Title = Star Wars: Episode I - The Phantom Menace, Director = George Lucas, Producer\n= Rick McCallum, ReleaseDate = 5/15/1999 12:00:00 AM, Description = Records can do that? }\n```", "```cs\npublic class House\n{\n    public string Address { get; init; }\n    public string Owner { get; init; }\n    public DateTime? Built { get; init; }\n}\n```", "```cs\nvar house2 = new House();\n```", "```cs\nvar house1 = new House\n{\n    Address = \"Kings street 4\",\n    Owner = \"King\",\n    Built = DateTime.Now\n};\n```", "```cs\nvar text = \"123\";\nvar isNumber = int.TryParse(text, out var number);\n```", "```cs\nvar values1 = new ValueTuple<Dog, Human, bool>(dog, human, isDogKnown);\n```", "```cs\nvar values2 = (dog, human, isDogKnown);\n```", "```cs\npublic (Dog, Human, bool) GetDogHumanAndBool()\n{\n    var dog = new Dog(\"Sparky\");\n    var human = new Human(\"Thomas\");\n    bool isDogKnown = false;\n\n    return (dog, human, isDogKnown);\n}\n```", "```cs\nvar dogHumanAndBool = GetDogHumanAndBool();\nvar dog = dogHumanAndBool.Item1;\nvar human = dogHumanAndBool.Item2;\nvar boo = dogHumanAndBool.Item3;\n```", "```cs\nvar (dog, human, boo) = GetDogHumanAndBool(); \n```", "```cs\n    public enum TemperatureUnit\n    {\n        C,\n        F,\n        K\n    }\n    ```", "```cs\n    public record Temperature(double Degrees, TemperatureUnit Unit);\n    ```", "```cs\n    public interface ITemperatureConverter\n    {\n        public TemperatureUnit Unit { get; }\n        public Temperature ToC(Temperature temperature);\n        public Temperature FromC(Temperature temperature);\n    }\n    ```", "```cs\n    public class ComposableTemperatureConverter\n    {\n        private readonly ITemperatureConverter[] _converters;\n    ```", "```cs\n    public class InvalidTemperatureConverterException : Exception\n    {\n        public InvalidTemperatureConverterException(TemperatureUnit unit) : base($\"Duplicate converter for {unit}.\")\n        {\n        }\n\n        public InvalidTemperatureConverterException(string message) : base(message)\n        {\n        }\n    }\n    ```", "```cs\n    private static void RequireNotEmpty(ITemperatureConverter[] converters)\n    {\n        if (converters?.Length > 0 == false)\n        {\n            throw new InvalidTemperatureConverterException(\"At least one temperature conversion must be supported\");\n        }\n    }\n    ```", "```cs\n    private static void RequireNoDuplicate(ITemperatureConverter[] converters)\n    {\n        for (var index1 = 0; index1 < converters.Length - 1; index1++)\n        {\n            var first = converters[index1];\n            for (int index2 = index1 + 1; index2 < converters.Length; index2++)\n            {\n                var second = converters[index2];\n                if (first.Unit == second.Unit)\n                {\n                    throw new InvalidTemperatureConverterException(first.Unit);\n                }\n            }\n        }\n    }\n    ```", "```cs\n    public ComposableTemperatureConverter(ITemperatureConverter[] converters)\n    {\n        RequireNotEmpty(converters);\n        RequireNoDuplicate(converters);\n        _converters = converters;\n    }\n    ```", "```cs\n    private ITemperatureConverter FindConverter(TemperatureUnit unit)\n    {\n        foreach (var converter in _converters)\n        {\n            if (converter.Unit == unit)\n            {\n                return converter;\n            }\n        }\n\n        throw new InvalidTemperatureConversionException(unit);\n    }\n    ```", "```cs\n    private Temperature ToCelsius(Temperature temperatureFrom)\n    {\n        var converterFrom = FindConverter(temperatureFrom.Unit);\n        return converterFrom.ToC(temperatureFrom);\n    }\n    ```", "```cs\n    private Temperature CelsiusToOther(Temperature celsius, TemperatureUnit unitTo)\n    {\n        var converterTo = FindConverter(unitTo);\n        return converterTo.FromC(celsius);\n    }\n    ```", "```cs\n    public Temperature Convert(Temperature temperatureFrom, TemperatureUnit unitTo)\n    {\n        var celsius = ToCelsius(temperatureFrom);\n        return CelsiusToOther(celsius, unitTo);\n    }\n    ```", "```cs\n    public class KelvinConverter : ITemperatureConverter\n    {\n        public const double AbsoluteZero = -273.15;\n\n        public TemperatureUnit Unit => TemperatureUnit.K;\n\n        public Temperature ToC(Temperature temperature)\n        {\n            return new(temperature.Degrees + AbsoluteZero, TemperatureUnit.C);\n        }\n\n        public Temperature FromC(Temperature temperature)\n        {\n            return new(temperature.Degrees - AbsoluteZero, Unit);\n        }\n    }\n    ```", "```cs\n    public class FahrenheitConverter : ITemperatureConverter\n    {\n        public TemperatureUnit Unit => TemperatureUnit.F;\n\n        public Temperature ToC(Temperature temperature)\n        {\n            return new(5.0/9 * (temperature.Degrees - 32), TemperatureUnit.C);\n        }\n\n        public Temperature FromC(Temperature temperature)\n        {\n            return new(9.0 / 5 * temperature.Degrees + 32, Unit);\n        }\n    }\n    ```", "```cs\n        public class CelsiusConverter : ITemperatureConverter\n        {\n            public TemperatureUnit Unit => TemperatureUnit.C;\n\n            public Temperature ToC(Temperature temperature)\n            {\n                return temperature;\n            }\n\n            public Temperature FromC(Temperature temperature)\n            {\n                return temperature;\n            }\n        }\n    ```", "```cs\n    Solution.cs\n    public static class Solution\n    {\n        public static void Main()\n        {\n            ITemperatureConverter[] converters = {new FahrenheitConverter(), new KelvinConverter(), new CelsiusConverter()};\n            var composableConverter = new ComposableTemperatureConverter(converters);\n\n            var celsius = new Temperature(20.00001, TemperatureUnit.C);\n\n            var celsius1 = composableConverter.Convert(celsius, TemperatureUnit.C);\n            var fahrenheit = composableConverter.Convert(celsius1, TemperatureUnit.F);\n            var kelvin = composableConverter.Convert(fahrenheit, TemperatureUnit.K);\n            var celsiusBack = composableConverter.Convert(kelvin, TemperatureUnit.C);\n            Console.WriteLine($\"{celsius} = {fahrenheit}\");\n    ```", "```cs\nYou can find the complete code here: https://packt.link/ruBph.\n```", "```cs\n    Temperature { Degrees = 20.00001, Unit = C } = Temperature { Degrees = 68.000018, Unit = F }\n    Temperature { Degrees = 68.000018, Unit = F } = Temperature { Degrees = -253.14998999999997, Unit = K }\n    Temperature { Degrees = -253.14998999999997, Unit = K } = Temperature { Degrees = 20.000010000000003, Unit = C }\n    ```", "```cs\n    Adding circles of radius of 3 and 3 results in a new circle with a radius 4.242640687119285\n    ```"]