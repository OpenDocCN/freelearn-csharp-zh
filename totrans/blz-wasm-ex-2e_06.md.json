["```cs\n{\n  \"name\": \"My Sample PWA\",\n  \"display\": \"standalone\",\n  \"background_color\": \"#ffffff\",\n  \"theme_color\": \"#03173d\",\n  \"icons\": [\n    {\n      \"src\": \"icon-512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ]\n} \n```", "```cs\nself.addEventListener('fetch', () => { }); \n```", "```cs\nmanifest.json to the index.html file:\n```", "```cs\n<link href=\"manifest.json\" rel=\"manifest\" /> \n```", "```cs\n{\n  \"dir\": \"ltr\",\n  \"lang\": \"en\",\n  \"name\": \" 5-Day Weather Forecast\",\n  \"short_name\": \"Weather\",\n  \"scope\": \"/\",\n  \"display\": \"standalone\",\n  \"start_url\": \"./\",\n  \"background_color\": \"transparent\",\n  \"theme_color\": \"transparent\",\n  \"description\": \"This is a 5-day weather forecast.\",\n  \"orientation\": \"any\",\n  \"related_applications\": [],\n  \"prefer_related_applications\": false,\n  \"icons\": [\n    {\n      \"src\": \"icon-512.png\",\n      \"type\": \"image/png\",\n      \"sizes\": \"512x512\"\n    }\n  ],\n  \"url\": \"https://bweweather.azurewebsites.net\",\n  \"screenshots\": [],\n\"categories\": [\"weather\"]\n} \n```", "```cs\nconst hasCaches = 'caches' in self; \n```", "```cs\nif (navigator.geolocation) {\n    var position = await getPositionAsync();  \n} else {\n    throw Error(\"Geolocation is not supported.\");\n}; \n```", "```cs\nhttps://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&appid={API key} \n```", "```cs\n{\n  **\"****dt\"****:** **1616436000****,**\n  \"sunrise\": 1616416088,\n  \"sunset\": 1616460020,\n  \"temp\": {\n    \"day\": 58.5,\n    **\"min\"****:** **54.75****,**\n    **\"max\"****:** **62.6****,**\n    \"night\": 61.29,\n    \"eve\": 61.25,\n    \"morn\": 54.75\n  },\n  \"feels_like\": {\n    \"day\": 49.69,\n    \"night\": 51.91,\n    \"eve\": 50.67,\n    \"morn\": 47.03\n  },\n  \"pressure\": 1011,\n  \"humidity\": 85,\n  \"dew_point\": 54.01,\n  \"wind_speed\": 17.83,\n  \"wind_deg\": 168,\n  \"weather\": [\n    {\n      \"id\": 502,\n      \"main\": \"Rain\",\n      **\"description\"****:** **\"heavy intensity rain\"****,**\n      **\"icon\"****:** **\"10d\"**\n    }\n  ],\n  \"clouds\": 98,\n  \"pop\": 1,\n  \"rain\": 27.91,\n  \"uvi\": 2.34\n}, \n```", "```cs\n    var bweInterop = {};\n    bweInterop.getPosition = async function () {\n        function getPositionAsync() {\n            return new Promise((success, error) => {\n                navigator.geolocation.getCurrentPosition\n                    (success, error);\n            });\n        }\n        if (navigator.geolocation) {\n            var position = await getPositionAsync();\n            var coords = {\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude\n            };\n            return coords;\n        } else {\n            throw Error(\"Geolocation is not supported.\");\n        };\n    } \n    ```", "```cs\n    <script src=\"img/bweInterop.js\"></script> \n    ```", "```cs\n    public double Latitude { get; set; }\n    public double Longitude { get; set; } \n    ```", "```cs\n    @using WeatherForecast.Models\n    @inject IJSRuntime js \n    ```", "```cs\n    <PageTitle>Weather Forecast</PageTitle>\n    @if (pos == null)\n    {\n        <p><em>@message</em></p>\n    }\n    else\n    {\n        <h2>\n            Latitude: @pos.Latitude, \n            Longitude: @pos.Longitude\n        </h2>\n    }\n    @code {\n        string message = \"Loading...\";\n        Position? pos;\n    } \n    ```", "```cs\n    protected override async Task OnInitializedAsync()\n    {\n        try\n        {\n            await GetPositionAsync();\n        }\n        catch (Exception)\n        {\n            message = \"Geolocation is not supported.\";\n        };\n    } \n    ```", "```cs\n    private async Task GetPositionAsync()\n    {\n        pos = await js.InvokeAsync<Position>(\n            \"bweInterop.getPosition\");\n    } \n    ```", "```cs\n    public class OpenWeather\n    {\n        public Daily[] Daily { get; set; }\n    }\n    public class Daily\n    {\n        public long Dt { get; set; }\n        public Temp Temp { get; set; }\n        public Weather[] Weather { get; set; }\n    }\n    public class Temp\n    {\n        public double Min { get; set; }\n        public double Max { get; set; }\n    }\n    public class Weather\n    {\n        public string Description { get; set; }\n        public string Icon { get; set; }\n    } \n    ```", "```cs\n    <link href=\"css/bootstrap/css/bootstrap.min.css\" \n            rel=\"stylesheet\" /> \n    ```", "```cs\n    <div class=\"alert alert-info\">\n        Bootstrap is installed!\n    </div> \n    ```", "```cs\n    <div class=\"card text-center\">\n        <div class=\"card-header\">\n            @Date\n        </div>\n        <div class=\"card-body\">\n            <img src=\"img/@IconUrl\" />\n            <h4 class=\"card-title\">@Description</h4>\n            <b>@((int)HighTemp) F&deg;</b> /\n            @((int)LowTemp) F&deg;\n        </div>\n    </div>\n    @code {\n    } \n    ```", "```cs\n    [Parameter] public long Seconds { get; set; }\n    [Parameter] public double HighTemp { get; set; }\n    [Parameter] public double LowTemp { get; set; }\n    [Parameter] public string? Description { get; set; }\n    [Parameter] public string? Icon { get; set; }\n    private string? Date;\n    private string? IconUrl;\n    protected override void OnInitialized()\n    {\n        Date = DateTimeOffset\n            .FromUnixTimeSeconds(Seconds)\n            .LocalDateTime\n            .ToLongDateString();\n\n        IconUrl = String.Format(\n            \"https://openweathermap.org/img/wn/{0}@2x.png\",\n            Icon);\n    } \n    ```", "```cs\n    @using System.Text \n    @using WeatherForecast.Shared \n    ```", "```cs\n    @inject HttpClient Http \n    ```", "```cs\n    OpenWeather? forecast; \n    ```", "```cs\n    private async Task GetForecastAsync()\n    {\n    } \n    ```", "```cs\n    if (pos != null)\n    {\n        string APIKey = \"{Your API Key}\";\n        StringBuilder url = new StringBuilder();\n        url.Append(\"https://api.openweathermap.org\");\n        url.Append(\"/data/2.5/onecall?\");\n        url.Append(\"lat=\");\n        url.Append(pos.Latitude);\n        url.Append(\"&lon=\");\n        url.Append(pos.Longitude);\n        url.Append(\"&exclude=\");\n        url.Append(\"current,minutely,hourly,alerts\");\n        url.Append(\"&units=imperial\");\n        url.Append(\"&appid=\");\n        url.Append(APIKey);\n        forecast = await Http.GetFromJsonAsync<OpenWeather>\n            (url.ToString());\n    } \n    ```", "```cs\n    forecast = await Http.GetFromJsonAsync<OpenWeather>\n        (\"sample-data/weather.json\"); \n    ```", "```cs\n    try\n    {\n        await GetPositionAsync();\n        await GetForecastAsync();\n    }\n    catch (Exception)\n    {\n        message = \"Error encountered.\";\n    }; \n    ```", "```cs\n    @if (forecast == null)\n    {\n        <p><em>@message</em></p>\n    }\n    else\n    {\n        <div class=\"card-group\">\n            @foreach (var item in forecast.Daily.Take(5))\n            {\n                <DailyForecast\n                   Seconds=\"@item.Dt\"\n                   LowTemp=\"@item.Temp.Min\"\n                   HighTemp=\"@item.Temp.Max\"\n                   Description=\"@item.Weather[0].Description\"\n                   Icon=\"@item.Weather[0].Icon\" />\n            }\n        </div>\n    } \n    ```", "```cs\n    {\n      \"lang\": \"en\",\n      \"name\": \"5-Day Weather Forecast\",\n      \"short_name\": \"Weather\",\n      \"display\": \"standalone\",\n      \"start_url\": \"./\",\n      \"background_color\": \"#ffa500\",\n      \"theme_color\": \"transparent\",\n      \"description\": \"This is a 5-day weather forecast app\",\n      \"orientation\": \"any\",\n      \"icons\": [\n        {\n          \"src\": \"images/Sun-512.png\",\n          \"type\": \"image/png\",\n          \"sizes\": \"512x512\"\n        }\n      ]\n    } \n    ```", "```cs\n    <link href=\"manifest.json\" rel=\"manifest\" /> \n    ```", "```cs\n    <link rel=\"apple-touch-icon\" \n          sizes=\"512x512\" \n          href=\"images/Sun-512.png\" /> \n    ```", "```cs\n    <h1>You are offline.</h1> \n    ```", "```cs\n    const OFFLINE_VERSION = 1;\n    const CACHE_PREFIX = 'offline';\n    const CACHE_NAME = '${CACHE_PREFIX}${OFFLINE_VERSION}';\n    const OFFLINE_URL = 'offline.html'; \n    ```", "```cs\n    self.addEventListener('install',\n        event => event.waitUntil(onInstall(event)));\n    self.addEventListener('activate',\n        event => event.waitUntil(onActivate(event)));\n    self.addEventListener('fetch',\n        event => event.respondWith(onFetch(event))); \n    ```", "```cs\n    async function onInstall(event) {\n        console.info('Service worker: Install');\n        const cache = await caches.open(CACHE_NAME);\n        await cache.add(new Request(OFFLINE_URL));\n    } \n    ```", "```cs\n    async function onActivate(event) {\n        console.info('Service worker: Activate');\n        const cacheKeys = await caches.keys();\n        await Promise.all(cacheKeys\n            .filter(key => key.startsWith(CACHE_PREFIX)\n                && key !== CACHE_NAME)\n            .map(key => caches.delete(key)));\n    } \n    ```", "```cs\n    async function onFetch(event) {\n        if (event.request.method === 'GET') {\n            try {\n                return await fetch(event.request);\n            } catch (error) {\n                const cache = await\n                   caches.open(CACHE_NAME);\n                return await cache.match(OFFLINE_URL);\n            };\n        };\n    } \n    ```", "```cs\n    <script>\n       navigator.serviceWorker.register('service-worker.js');\n    </script> \n    ```"]