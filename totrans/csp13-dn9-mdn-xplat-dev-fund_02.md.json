["```cs\n    dotnet --version \n    ```", "```cs\n    9.0.100 \n    ```", "```cs\n<LangVersion>7.3</LangVersion> \n```", "```cs\n<LangVersion>13.1</LangVersion> \n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n    <TargetFramework>net10.0</TargetFramework>\n **<LangVersion>preview</LangVersion>**\n  </PropertyGroup>\n</Project> \n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk\">\n  <PropertyGroup>\n    <OutputType>Exe</OutputType>\n **<TargetFramework>net9****.0****</TargetFramework>**\n    <ImplicitUsings>enable</ImplicitUsings>\n    <Nullable>enable</Nullable>\n **<LangVersion>****14****</LangVersion>**\n  </PropertyGroup>\n</Project> \n```", "```cs\n    #error version \n    ```", "```cs\n    // #error version \n    ```", "```cs\ndecimal totalPrice = subtotal + salesTax; \n```", "```cs\n// Sales tax must be added to the subtotal.\ndecimal totalPrice = subtotal + salesTax; \n```", "```cs\n/*\nThis is a\nmulti-line comment.\n*/ \n```", "```cs\ndecimal totalPrice = subtotal /* for this item */ + salesTax; \n```", "```cs\n#region Three variables that store the number 2 million.\nint decimalNotation = 2_000_000;\nint binaryNotation = 0b_0001_1110_1000_0100_1000_0000;\nint hexadecimalNotation = 0x_001E_8480;\n#endregion \n```", "```cs\nusing System; // A semicolon indicates the end of a statement.\nnamespace Basics\n{ // An open brace indicates the start of a block.\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\"); // A statement.\n    }\n  }\n} // A close brace indicates the end of a block. \n```", "```cs\nif (x < 3)\n{\n  // Do something if x is less than 3.\n} \n```", "```cs\nif (x < 3) {\n  // Do something if x is less than 3.\n} \n```", "```cs\nint sum = 1 + 2; // Most developers would prefer this format.\nint\nsum=1+\n2; // One statement over three lines.\nint       sum=    1    +2;int sum=1+2; // Two statements on one line. \n```", "```cs\n// Prefix with @ to use a C# keyword as a variable name.\nstrin0g @class = \"A poorly named variable!\";\nint @if = 5; \n```", "```cs\nusing System; // Import the System namespace. \n```", "```cs\nusing System;\nusing System.Linq;\nusing System.Collections.Generic; \n```", "```cs\nglobal using System;\nglobal using System.Linq;\nglobal using System.Collections.Generic; \n```", "```cs\n    // <autogenerated />\n    global using global::System;\n    global using global::System.Collections.Generic;\n    global using global::System.IO;\n    global using global::System.Linq;\n    global using global::System.Net.Http;\n    global using global::System.Threading;\n    global using global::System.Threading.Tasks; \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net9.0</TargetFramework>\n        <Nullable>enable</Nullable>\n        <ImplicitUsings>enable</ImplicitUsings>\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<Using Remove=****\"System.Threading\"** **/>**\n     **<Using Include=****\"System.Numerics\"** **/>**\n     **<Using Include=****\"System.Console\"** **Static=****\"true\"** **/>**\n     **<Using Include=****\"System.Environment\"** **Alias=****\"Env\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    // <autogenerated />\n    global using global::System;\n    global using global::System.Collections.Generic;\n    global using global::System.IO;\n    global using global::System.Linq;\n    global using global::System.Net.Http;\n    **global****using****global****::System.Numerics;**\n    global using global::System.Threading.Tasks;\n    **global****using** **Env =** **global****::System.Environment;**\n    **global****using****static****global****::System.Console;** \n    ```", "```cs\n    WriteLine($\"Computer named {Env.MachineName} says \\\"No.\\\"\"); \n    ```", "```cs\n    Computer named DAVROS says \"No.\" \n    ```", "```cs\n<ImplicitUsings>disable</ImplicitUsings> \n```", "```cs\n// Outputs the current line terminator.\n// By default, this is a carriage-return and line feed.\nConsole.WriteLine();\n// Outputs the greeting and the current line terminator.\nConsole.WriteLine(\"Hello Ahmed\");\n// Outputs a formatted number and date and the current line terminator.\nConsole.WriteLine(\n  \"Temperature on {0:D} is {1}Â°C.\", DateTime.Today, 23.4); \n```", "```cs\n    using System.Reflection; // To use Assembly, TypeName, and so on. \n    ```", "```cs\n    // Get the assembly that is the entry point for this app.\n    Assembly? myApp = Assembly.GetEntryAssembly();\n    // If the previous line returned nothing then end the app.\n    if (myApp is null) return;\n    // Loop through the assemblies that my app references.\n    foreach (AssemblyName name in myApp.GetReferencedAssemblies())\n    {\n      // Load the assembly so we can read its details.\n      Assembly a = Assembly.Load(name);\n      // Declare a variable to count the number of methods.\n      int methodCount = 0;\n      // Loop through all the types in the assembly.\n      foreach (TypeInfo t in a.DefinedTypes)\n      {\n        // Add up the counts of all the methods.\n        methodCount += t.GetMethods().Length;\n      }\n      // Output the count of types and their methods.\n      WriteLine(\"{0:N0} types with {1:N0} methods in {2} assembly.\",\n        arg0: a.DefinedTypes.Count(),\n        arg1: methodCount,\n        arg2: name.Name);\n    } \n    ```", "```cs\n    0 types with 0 methods in System.Runtime assembly.\n    41 types with 639 methods in System.Console assembly.\n    112 types with 1,190 methods in System.Linq assembly. \n    ```", "```cs\n    // Declare some unused variables using types in\n    // additional assemblies to make them load too.\n    System.Data.DataSet ds = new();\n    HttpClient client = new(); \n    ```", "```cs\n    0 types with 0 methods in System.Runtime assembly.\n    406 types with 7,139 methods in System.Data.Common assembly.\n    425 types with 4,681 methods in System.Net.Http assembly.\n    41 types with 639 methods in System.Console assembly.\n    112 types with 1,190 methods in System.Linq assembly. \n    ```", "```cs\n// Let the heightInMetres variable become equal to the value 1.88.\ndouble heightInMetres = 1.88;\nConsole.WriteLine($\"The variable {nameof(heightInMetres)} has the value\n{heightInMetres}.\"); \n```", "```cs\nchar letter = 'A'; // Assigning literal characters.\nchar digit = '1';\nchar symbol = '$';\nchar userChoice = GetChar(); // Assigning from a fictitious function. \n```", "```cs\nstring firstName = \"Bob\"; // Assigning literal strings.\nstring lastName = \"Smith\";\nstring phoneNumber = \"(215) 555-4256\";\n// Assigning a string returned from the string class constructor.\nstring horizontalLine = new('-', count: 74); // 74 hyphens.\n// Assigning a string returned from a fictitious function.\nstring address = GetAddressFromDatabase(id: 563);\n// Assigning an emoji by converting from Unicode.\nstring grinningEmoji = char.ConvertFromUtf32(0x1F600); \n```", "```cs\nConsole.OutputEncoding = System.Text.Encoding.UTF8;\nstring grinningEmoji = char.ConvertFromUtf32(0x1F600);\nConsole.WriteLine(grinningEmoji); \n```", "```cs\nstring fullNameWithTabSeparator = \"Bob\\tSmith\"; \n```", "```cs\nstring filePath = \"C:\\televisions\\sony\\bravia.txt\"; \n```", "```cs\nstring filePath = @\"C:\\televisions\\sony\\bravia.txt\"; \n```", "```cs\n// C# 13 or later.\nchar esc = '\\e';\n// C# 12 or earlier.\nchar esc = '\\u001b'; \n```", "```cs\nstring xml = \"\"\"\n             <person age=\"50\">\n               <first_name>Mark</first_name>\n             </person>\n             \"\"\"; \n```", "```cs\n<person age=\"50\">\n  <first_name>Mark</first_name>\n</person> \n```", "```cs\nstring xml = \"\"\"\n             <person age=\"50\">\n               <first_name>Mark</first_name>\n             </person>\n\"\"\"; \n```", "```cs\n <person age=\"50\">\n               <first_name>Mark</first_name>\n             </person> \n```", "```cs\nvar person = new { FirstName = \"Alice\", Age = 56 };\nstring json = $$\"\"\"\n              {\n                \"first_name\": \"{{person.FirstName}}\",\n                \"age\": {{person.Age}},\n                \"calculation\": \"{{{ 1 + 2 }}}\"\n              }\n              \"\"\";\nConsole.WriteLine(json); \n```", "```cs\n{\n  \"first_name\": \"Alice\",\n  \"age\": 56,\n  \"calculation\": \"{3}\"\n} \n```", "```cs\nvar person = new { FirstName = \"Alice\", Age = 56 };\nstring json = $$\"\"\"\n              {\n                \"first_name\": \"{{person.FirstName}}\",\n                \"age\": {{person.Age}},\n                \"calculation\": \"{{ 1 + 2 }}\"\n              }\n              \"\"\";\nConsole.WriteLine(json); \n```", "```cs\n{\n  \"first_name\": \"Alice\",\n  \"age\": 56,\n  \"calculation\": \"3\"\n} \n```", "```cs\n    // An unsigned integer is a positive whole number or 0.\n    uint naturalNumber = 23;\n    // An integer is a negative or positive whole number or 0.\n    int integerNumber = -23;\n    // A float is a single-precision floating-point number.\n    // The F or f suffix makes the value a float literal.\n    // The suffix is required to compile.\n    float realNumber = 2.3f;\n    // A double is a double-precision floating-point number.\n    // double is the default for a number value with a decimal point.\n    double anotherRealNumber = 2.3; // A double literal value. \n    ```", "```cs\n    int decimalNotation = 2_000_000;\n    int binaryNotation = 0b_0001_1110_1000_0100_1000_0000;\n    int hexadecimalNotation = 0x_001E_8480;\n    // Check the three variables have the same value.\n    Console.WriteLine($\"{decimalNotation == binaryNotation}\");\n    Console.WriteLine(\n      $\"{decimalNotation == hexadecimalNotation}\");\n    // Output the variable values in decimal.\n    Console.WriteLine($\"{decimalNotation:N0}\");\n    Console.WriteLine($\"{binaryNotation:N0}\");\n    Console.WriteLine($\"{hexadecimalNotation:N0}\");\n    // Output the variable values in hexadecimal.\n    Console.WriteLine($\"{decimalNotation:X}\");\n    Console.WriteLine($\"{binaryNotation:X}\");\n    Console.WriteLine($\"{hexadecimalNotation:X}\"); \n    ```", "```cs\n    True\n    True\n    2,000,000\n    2,000,000\n    2,000,000\n    1E8480\n    1E8480\n    1E8480 \n    ```", "```cs\n    Console.WriteLine($\"int uses {sizeof(int)} bytes and can store numbers in the range {int.MinValue:N0} to {int.MaxValue:N0}.\");\n    Console.WriteLine($\"double uses {sizeof(double)} bytes and can store numbers in the range {double.MinValue:N0} to {double.MaxValue:N0}.\");\n    Console.WriteLine($\"decimal uses {sizeof(decimal)} bytes and can store numbers in the range {decimal.MinValue:N0} to {decimal.MaxValue:N0}.\"); \n    ```", "```cs\n    Console.WriteLine(\"Using doubles:\");\n    double a = 0.1;\n    double b = 0.2;\n    if (a + b == 0.3)\n    {\n      Console.WriteLine($\"{a} + {b} equals {0.3}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{a} + {b} does NOT equal {0.3}\");\n    } \n    ```", "```cs\n    Using doubles:\n    0.1 + 0.2 does NOT equal 0.3 \n    ```", "```cs\nfloat a = 0.1F;\nfloat b = 0.2F;\nif (a + b == 0.3F) // True because float is less \"accurate\" than double.\n... \n```", "```cs\n    Console.WriteLine(\"Using decimals:\");\n    decimal c = 0.1M; // M suffix means a decimal literal value\n    decimal d = 0.2M;\n    if (c + d == 0.3M)\n    {\n      Console.WriteLine($\"{c} + {d} equals {0.3M}\");\n    }\n    else\n    {\n      Console.WriteLine($\"{c} + {d} does NOT equal {0.3M}\");\n    } \n    ```", "```cs\n    Using decimals:\n    0.1 + 0.2 equals 0.3 \n    ```", "```cs\n    #region Special float and double values\n    Console.WriteLine($\"double.Epsilon: {double.Epsilon}\");\n    Console.WriteLine($\"double.Epsilon to 324 decimal places: {double.Epsilon:N324}\");\n    Console.WriteLine($\"double.Epsilon to 330 decimal places: {double.Epsilon:N330}\");\n    const int col1 = 37; // First column width.\n    const int col2 = 6; // Second column width.\n    string line = new string('-', col1 + col2 + 3);\n    Console.WriteLine(line);\n    Console.WriteLine($\"{\"Expression\",-col1} | {\"Value\",col2}\");\n    Console.WriteLine(line);\n    Console.WriteLine($\"{\"double.NaN\",-col1} | {double.NaN,col2}\");\n    Console.WriteLine($\"{\"double.PositiveInfinity\",-col1} | {double.PositiveInfinity,col2}\");\n    Console.WriteLine($\"{\"double.NegativeInfinity\",-col1} | {double.NegativeInfinity,col2}\");\n    Console.WriteLine(line);\n    Console.WriteLine($\"{\"0.0 / 0.0\",-col1} | {0.0 / 0.0,col2}\");\n    Console.WriteLine($\"{\"3.0 / 0.0\",-col1} | {3.0 / 0.0,col2}\");\n    Console.WriteLine($\"{\"-3.0 / 0.0\",-col1} | {-3.0 / 0.0,col2}\");\n    Console.WriteLine($\"{\"3.0 / 0.0 == double.PositiveInfinity\",-col1} | {3.0 / 0.0 == double.PositiveInfinity,col2}\");\n    Console.WriteLine($\"{\"-3.0 / 0.0 == double.NegativeInfinity\",-col1} | {-3.0 / 0.0 == double.NegativeInfinity,col2}\");\n    Console.WriteLine($\"{\"0.0 / 3.0\",-col1} | {0.0 / 3.0,col2}\");\n    Console.WriteLine($\"{\"0.0 / -3.0\",-col1} | {0.0 / -3.0,col2}\");\n    Console.WriteLine(line);\n    #endregion \n    ```", "```cs\n    double.Epsilon: 5E-324\n    double.Epsilon to 324 decimal places: 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005\n    double.Epsilon to 330 decimal places: 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004940656\n    ----------------------------------------------\n    Expression                            |  Value\n    ----------------------------------------------\n    double.NaN                            |    NaN\n    double.PositiveInfinity               |      8\n    double.NegativeInfinity               |     -8\n    ----------------------------------------------\n    0.0 / 0.0                             |    NaN\n    3.0 / 0.0                             |      8\n    -3.0 / 0.0                            |     -8\n    3.0 / 0.0 == double.PositiveInfinity  |   True\n    -3.0 / 0.0 == double.NegativeInfinity |   True\n    0.0 / 3.0                             |      0\n    0.0 / -3.0                            |     -0\n    ---------------------------------------------- \n    ```", "```cs\n    unsafe\n    {\n      Console.WriteLine($\"Half uses {sizeof(Half)} bytes and can store numbers in the range {Half.MinValue:N0} to {Half.MaxValue:N0}.\");\n      Console.WriteLine($\"Int128 uses {sizeof(Int128)} bytes and can store numbers in the range {Int128.MinValue:N0} to {Int128.MaxValue:N0}.\");\n    } \n    ```", "```cs\n    <PropertyGroup>\n      <OutputType>Exe</OutputType>\n      <TargetFramework>net9.0</TargetFramework>\n      <ImplicitUsings>enable</ImplicitUsings>\n      <Nullable>enable</Nullable>\n     **<AllowUnsafeBlocks>True</AllowUnsafeBlocks>**\n    </PropertyGroup> \n    ```", "```cs\n    Half uses 2 bytes and can store numbers in the range -65,504 to 65,504.\n    Int128 uses 16 bytes and can store numbers in the range -170,141,183,460,\n    469,231,731,687,303,715,884,105,728 to 170,141,183,460,469,231,731,687,\n    303,715,884,105,727. \n    ```", "```cs\nbool happy = true;\nbool sad = false; \n```", "```cs\n    object height = 1.88; // Storing a double in an object.\n    object name = \"Amir\"; // Storing a string in an object.\n    Console.WriteLine($\"{name} is {height} metres tall.\");\n    int length1 = name.Length; // This gives a compile error!\n    int length2 = ((string)name).Length; // Cast name to a string.\n    Console.WriteLine($\"{name} has {length2} characters.\"); \n    ```", "```cs\n    Amir is 1.88 meters tall.\n    Amir has 4 characters. \n    ```", "```cs\n    dynamic something;\n    // Storing an array of int values in a dynamic object.\n    // An array of any type has a Length property.\n    something = new[] { 3, 5, 7 };\n    // Storing an int in a dynamic object.\n    // int does not have a Length property.\n    something = 12;\n    // Storing a string in a dynamic object.\n    // string has a Length property.\n    something = \"Ahmed\";\n    // This compiles but might throw an exception at run-time.\n    Console.WriteLine($\"The length of something is {something.Length}\");\n    // Output the type of the something variable.\n    Console.WriteLine($\"something is a {something.GetType()}\"); \n    ```", "```cs\n    The length of something is 5\n    something is a System.String \n    ```", "```cs\n    Unhandled exception. Microsoft.CSharp.RuntimeBinder.RuntimeBinderException: 'int' does not contain a definition for 'Length' \n    ```", "```cs\n    The length of something is 3\n    something is a System.Int32[] \n    ```", "```cs\nint population = 67_000_000; // 67 million in UK.\ndouble weight = 1.88; // in kilograms.\ndecimal price = 4.99M; // in pounds sterling.\nstring fruit = \"Apples\"; // string values use double-quotes.\nchar letter = 'Z'; // char values use single-quotes.\nbool happy = true; // Booleans can only be true or false. \n```", "```cs\n    var population = 67_000_000; // 67 million in UK.\n    var weight = 1.88; // in kilograms.\n    var price = 4.99M; // in pounds sterling.\n    var fruit = \"Apples\"; // string values use double-quotes.\n    var letter = 'Z'; // char values use single-quotes.\n    var happy = true; // Booleans can only be true or false. \n    ```", "```cs\n    using System.Xml; // To use XmlDocument. \n    ```", "```cs\n    // Good use of var because it avoids the repeated type\n    // as shown in the more verbose second statement.\n    var xml1 = new XmlDocument(); // Works with C# 3 and later.\n    XmlDocument xml2 = new XmlDocument(); // Works with all C# versions.\n    // Bad use of var because we cannot tell the type, so we\n    // should use a specific type declaration as shown in\n    // the second statement.\n    var file1 = File.CreateText(\"something1.txt\");\n    StreamWriter file2 = File.CreateText(\"something2.txt\"); \n    ```", "```cs\n/* Value types have memory allocated on the stack automatically. */\nshort age; // Allocates 2 bytes of memory on the stack to store a System.Int16 value.\nlong population; // Allocates 8 bytes of memory on the stack to store a System.Int64 value.\nDateTime birthdate; // Allocates 8 bytes of memory on the stack to store a System.DateTime value.\nPoint location; // Allocate 8 bytes of memory on the stack to store a System.Drawing.Point value.\n/* Reference types will only have memory allocated on the heap when new is used (but they automatically have some memory allocated on the stack to store information about themselves including the memory address of where they are on the heap). */\nPerson bob; // Allocates memory in the stack that can point to a Person object in the heap. Initially, bob will have the value null. \n```", "```cs\nage = 45; // Initialize this variable to 45 using a literal value.\npopulation = 68_000_000; // Initialize this variable to 68 million using a literal value.\nbirthdate = new(1995, 2, 23); // Initialize this variable to February 23, 1995\\. C# does not support literal values for date/time values so we must use new.\nlocation = new(10, 20); // Initialize the X and Y coordinates of this value type.\nbob = new(); // Allocate memory on the heap to store a Person. Any state will have default values. bob is no longer null.\nbob = new(\"Bob\", \"Smith\", 45); // Allocate memory on the heap to store a Person and initialize state. bob is no longer null.\n// Older syntax with explicit types\nbirthdate = new DateTime(1995, 2, 23); // Initialize this variable to February 23, 1995.\nlocation = new Point(10, 20); // Initialize the X and Y coordinates of this value type.\nbob = new Person(); // Allocate memory on the heap to store a Person. bob is no longer null.\nbob = new Person(\"Bob\", \"Smith\", 45); // Allocate memory on the heap to store a Person and initialize state. bob is no longer null. \n```", "```cs\nXmlDocument xml3 = new(); // Target-typed new in C# 9 or later. \n```", "```cs\n// In Program.cs.\nPerson kim = new();\nkim.BirthDate = new(1967, 12, 26); // i.e. new DateTime(1967, 12, 26)\n// In a separate Person.cs file or at the bottom of Program.cs.\nclass Person\n{\n  public DateTime BirthDate;\n} \n```", "```cs\nList<Person> people = new() // Instead of: new List<Person>()\n{\n  new() { FirstName = \"Alice\" }, // Instead of: new Person() { ... }\n  new() { FirstName = \"Bob\" },\n  new() { FirstName = \"Charlie\" }\n}; \n```", "```cs\n    Console.WriteLine($\"default(int) = {default(int)}\");\n    Console.WriteLine($\"default(bool) = {default(bool)}\");\n    Console.WriteLine($\"default(DateTime) = {\n      default(DateTime)}\");\n    Console.WriteLine($\"default(string) = {\n      default(string) ?? \"<NULL>\"}\"); \n    ```", "```cs\n    default(int) = 0\n    default(bool) = False\n    default(DateTime) = 01/01/0001 00:00:00\n    default(string) = <NULL> \n    ```", "```cs\n    int number = 13;\n    Console.WriteLine($\"number set to: {number}\");\n    number = default;\n    Console.WriteLine($\"number reset to its default: {number}\"); \n    ```", "```cs\n    number set to: 13\n    number reset to its default: 0 \n    ```", "```cs\ndotnet new console -lang \"F#\" --name \"ExploringConsole\" \n```", "```cs\nConsole.Write(\"A\");\nConsole.Write(\"B\");\nConsole.Write(\"C\"); \n```", "```cs\nABC \n```", "```cs\nConsole.WriteLine(\"A\");\nConsole.WriteLine(\"B\");\nConsole.WriteLine(\"C\"); \n```", "```cs\nA\nB\nC \n```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    // Set current culture to US English so that all readers\n    // see the same output as shown in the book.\n    CultureInfo.CurrentCulture = CultureInfo.GetCultureInfo(\"en-US\");\n    int numberOfApples = 12;\n    decimal pricePerApple = 0.35M;\n    Console.WriteLine(\n      format: \"{0} apples cost {1:C}\",\n      arg0: numberOfApples,\n      arg1: pricePerApple * numberOfApples);\n    string formatted = string.Format(\n      format: \"{0} apples cost {1:C}\",\n      arg0: numberOfApples,\n      arg1: pricePerApple * numberOfApples);\n    //WriteToFile(formatted); // Writes the string into a file. \n    ```", "```cs\n    // Three parameter values can use named arguments.\n    Console.WriteLine(\"{0} {1} lived in {2}.\",\n      arg0: \"Roger\", arg1: \"Cevung\", arg2: \"Stockholm\");\n    // Four or more parameter values cannot use named arguments.\n    Console.WriteLine(\n      \"{0} {1} lived in {2} and worked in the {3} team at {4}.\",\n      \"Roger\", \"Cevung\", \"Stockholm\", \"Education\", \"Optimizely\"); \n    ```", "```cs\n    // The following statement must be all on one line when using C# 10\n    // or earlier. If using C# 11 or later, we can include a line break\n    // in the middle of an expression but not in the string text.\n    Console.WriteLine($\"{numberOfApples} apples cost {pricePerApple\n      * numberOfApples:C}\"); \n    ```", "```cs\n    12 apples cost $4.20 \n    ```", "```cs\nprivate const string firstname = \"Omar\";\nprivate const string lastname = \"Rudberg\";\nprivate const string fullname = firstname + \" \" + lastname; \n```", "```cs\nprivate const string fullname = $\"{firstname} {lastname}\"; \n```", "```cs\n{ index [, alignment ] [ : formatString ] } \n```", "```cs\n    string applesText = \"Apples\";\n    int applesCount = 1234;\n    string bananasText = \"Bananas\";\n    int bananasCount = 56789;\n    Console.WriteLine();\n    Console.WriteLine(format: \"{0,-10} {1,6}\",\n      arg0: \"Name\", arg1: \"Count\");\n    Console.WriteLine(format: \"{0,-10} {1,6:N0}\",\n      arg0: applesText, arg1: applesCount);\n    Console.WriteLine(format: \"{0,-10} {1,6:N0}\",\n      arg0: bananasText, arg1: bananasCount); \n    ```", "```cs\n    Name          Count\n    Apples        1,234\n    Bananas      56,789 \n    ```", "```cs\n    decimal value = 0.325M;\n    WriteLine(\"Currency: {0:C}, Percentage: {0:0.0%}\", value); \n    ```", "```cs\n    Currency: $0.33, Percentage: 32.5% \n    ```", "```cs\n    Console.Write(\"Type your first name and press ENTER: \");\n    string firstName = Console.ReadLine();\n    Console.Write(\"Type your age and press ENTER: \");\n    string age = Console.ReadLine();\n    Console.WriteLine($\"Hello {firstName}, you look good for {age}.\"); \n    ```", "```cs\n    string? firstName = Console.ReadLine(); \n    ```", "```cs\n    string age = Console.ReadLine()!; \n    ```", "```cs\n    Type your name and press ENTER: Gary\n    Type your age and press ENTER: 34\n    Hello Gary, you look good for 34. \n    ```", "```cs\nstring? name = ReadLine(); // Prompt user to enter their name. \n```", "```cs\n    using static System.Console; \n    ```", "```cs\n    <ItemGroup Label=\"Simplify console app\">\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    Write(\"Press any key combination: \");\n    ConsoleKeyInfo key = ReadKey();\n    WriteLine();\n    WriteLine(\"Key: {0}, Char: {1}, Modifiers: {2}\",\n      arg0: key.Key, arg1: key.KeyChar, arg2: key.Modifiers); \n    ```", "```cs\n    Press any key combination: k\n    Key: K, Char: k, Modifiers: 0 \n    ```", "```cs\n    Press any key combination: K\n    Key: K, Char: K, Modifiers: Shift \n    ```", "```cs\n    Press any key combination:\n    Key: F12, Char: , Modifiers: 0 \n    ```", "```cs\ndotnet new console\ndotnet new mvc \n```", "```cs\nusing System;\nnamespace Arguments\n{\n  class Program\n  {\n    static void Main(string[] args)\n    {\n      Console.WriteLine(\"Hello World!\");\n    }\n  }\n} \n```", "```cs\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    WriteLine($\"There are {args.Length} arguments.\"); \n    ```", "```cs\n    There are 0 arguments. \n    ```", "```cs\n    {\n      \"profiles\": {\n        \"Arguments\": {\n          \"commandName\": \"Project\",\n          **\"commandLineArgs\"****:** **\"firstarg second-arg third:arg \\\"fourth arg\\\"\"**\n        }\n      }\n    } \n    ```", "```cs\ndotnet run firstarg second-arg third:arg \"fourth arg\" \n```", "```cs\n    There are 4 arguments. \n    ```", "```cs\n    foreach (string arg in args)\n    {\n      WriteLine(arg);\n    } \n    ```", "```cs\n    There are 4 arguments.\n    firstarg\n    second-arg\n    third:arg\n    fourth arg \n    ```", "```cs\n    if (args.Length < 3)\n    {\n      WriteLine(\"You must specify two colors and cursor size, e.g.\");\n      WriteLine(\"dotnet run red yellow 50\");\n      return; // Stop running.\n    }\n    ForegroundColor = (ConsoleColor)Enum.Parse(\n      enumType: typeof(ConsoleColor),\n      value: args[0], ignoreCase: true);\n    BackgroundColor = (ConsoleColor)Enum.Parse(\n      enumType: typeof(ConsoleColor),\n      value: args[1], ignoreCase: true);\n    CursorSize = int.Parse(args[2]); \n    ```", "```cs\n    dotnet run red yellow 50 \n    ```", "```cs\n    try\n    {\n      CursorSize = int.Parse(args[2]);\n    }\n    catch (PlatformNotSupportedException)\n    {\n      WriteLine(\"The current platform does not support changing the size of the cursor.\");\n    } \n    ```", "```cs\nif (OperatingSystem.IsWindowsVersionAtLeast(major: 10))\n{\n  // Execute code that only works on Windows 10 or later.\n}\nelse if (OperatingSystem.IsWindows())\n{\n  // Execute code that only works earlier versions of Windows.\n}\nelse if (OperatingSystem.IsIOSVersionAtLeast(major: 14, minor: 5))\n{\n  // Execute code that only works on iOS 14.5 or later.\n}\nelse if (OperatingSystem.IsBrowser())\n{\n  // Execute code that only works in the browser with Blazor.\n} \n```", "```cs\n#define MYSYMBOL \n```", "```cs\n#if NET7_0_ANDROID\n// Compile statements that only work on Android.\n#elif NET7_0_IOS\n// Compile statements that only work on iOS.\n#else\n// Compile statements that work everywhere else.\n#endif \n```"]