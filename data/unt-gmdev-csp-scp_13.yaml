- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Building a Complete Game in Unity – Core Mechanics, Testing, and Enhancing the
    Player Experience
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Unity中构建完整游戏 – 核心机制、测试和提升玩家体验
- en: We’ll embark on an exciting journey to bring a game from concept to a playable
    prototype using Unity. The goal is to provide you with a comprehensive understanding
    of the game development process, focusing on the design and implementation of
    core game mechanics, effective asset integration, and thorough testing to ensure
    an engaging player experience.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将踏上从概念到可玩原型的激动人心的旅程，使用Unity将游戏从概念变为现实。目标是为您提供对游戏开发过程的全面理解，重点关注核心游戏机制的设计和实现、有效的资源整合以及彻底的测试，以确保引人入胜的玩家体验。
- en: 'To maintain consistency and clarity, we will develop a simple yet illustrative
    example: a 2D platformer game. This project will serve as a practical demonstration
    of the key concepts and techniques discussed. By the end, you will have a solid
    foundation in game development principles and hands-on experience with creating
    a basic platformer game. Let’s dive into the process of bringing our platformer
    quest to life!'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致性和清晰性，我们将开发一个简单而具有说明性的示例：一个2D平台游戏。这个项目将作为讨论的关键概念和技术的一个实际演示。到结束时，您将拥有游戏开发原则的坚实基础，并具备创建基本平台游戏的实践经验。让我们深入探讨将我们的平台游戏冒险变为现实的过程！
- en: Throughout this chapter, we will explore various aspects of game development.
    We will begin with planning and conceptualizing the game, followed by the design
    and implementation of game mechanics. Next, we will integrate assets and build
    levels, ensuring they align with our design goals. Finally, we will focus on polishing
    the game and conducting thorough testing to deliver a smooth and engaging player
    experience.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨游戏开发的各个方面。我们将从规划和构思想法开始，然后是游戏机制的设计和实现。接下来，我们将整合资源并构建关卡，确保它们与我们的设计目标一致。最后，我们将专注于打磨游戏并进行彻底的测试，以确保提供流畅且引人入胜的玩家体验。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Conceptualizing and planning a game project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构想和规划游戏项目
- en: Designing and implementing core game mechanics
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计和实现核心游戏机制
- en: Managing and integrating various game assets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理和整合各种游戏资源
- en: Finalizing and testing the game for a smooth player experience
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成并测试游戏以确保玩家体验流畅
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Before you start, ensure your development environment is set up as described
    in [*Chapter 1*](B22128_01.xhtml#_idTextAnchor015). This includes having the latest
    recommended version of Unity and a suitable code editor installed on your system.
    The C# code that appears in this book can also be found online at [https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开始之前，请确保您的开发环境已按照[*第1章*](B22128_01.xhtml#_idTextAnchor015)中描述的设置。这包括在您的系统上安装最新推荐的Unity版本和合适的代码编辑器。本书中出现的C#代码也可以在[https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting)上找到。
- en: 'You can find the examples/files related to this chapter here: [https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter13](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter13)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到与本章相关的示例/文件：[https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter13](https://github.com/PacktPublishing/Unity-6-Game-Development-with-C-Scripting/tree/main/Chapter13)
- en: Game concept and planning
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 游戏概念和规划
- en: Establishing a solid foundation through careful planning and conceptualization
    is crucial before diving into game development. This section focuses on defining
    your game idea, scope, and development milestones. We’ll discuss creating vital
    design documents, storyboards, and selecting the game genre and target platform.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入游戏开发之前，通过仔细规划和概念化来建立一个坚实的基础至关重要。本节重点在于定义您的游戏想法、范围和开发里程碑。我们将讨论创建关键设计文档、故事板，以及选择游戏类型和目标平台。
- en: We will introduce the core concept of our 2D platformer game, outlining its
    main objectives and mechanics. Then, we’ll cover the planning phase, including
    creating a simple game design document and sketching out initial level designs.
    These steps provide a clear vision and structured approach to bring our game concept
    to life.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍我们2D平台游戏的核心概念，概述其主要目标和机制。然后，我们将涵盖规划阶段，包括创建一个简单的游戏设计文档和绘制初始关卡设计。这些步骤为将我们的游戏概念付诸实践提供了一个清晰的愿景和结构化的方法。
- en: Conceptualizing your game idea
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构想您的游戏想法
- en: 'Embarking on game development begins with a major first step: conceptualizing
    your game idea. This process involves brainstorming and solidifying the initial
    concept, focusing on creating a clear and compelling vision for your game. A strong
    game concept includes choosing an engaging theme, setting, and core gameplay mechanics
    that will define the player’s experience. This foundation will guide the entire
    development process and help your game stand out in a competitive market.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 开始游戏开发的第一步是：构思你的游戏想法。这个过程涉及头脑风暴和巩固初始概念，专注于为你的游戏创造一个清晰而吸引人的愿景。一个强大的游戏概念包括选择一个吸引人的主题、背景和核心游戏机制，这些将定义玩家的体验。这个基础将指导整个开发过程，并帮助你的游戏在竞争激烈的市场中脱颖而出。
- en: The following image is typical of a scene from a 2D platformer. There is a ground
    level, elevated levels, and pits which requires the player to run and jump to
    move around.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像是典型的2D平台游戏场景。这里有一个地面层、升高层和需要玩家奔跑和跳跃才能移动的坑洞。
- en: '![Figure 13.1 – A sample scene of a platform game](img/B22128_13_1.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图13.1 – 平台游戏的示例场景](img/B22128_13_1.jpg)'
- en: Figure 13.1 – A sample scene of a platform game
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1 – 平台游戏的示例场景
- en: 'Start by brainstorming ideas, considering what makes your game unique. Think
    about the theme and setting—whether it’s a whimsical fantasy world, a post-apocalyptic
    wasteland, or a vibrant cityscape. Next, focus on the core gameplay mechanics:
    What will the player do? How will they interact with the game world? For our 2D
    platformer, core mechanics might include running, jumping, and collecting items.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，通过头脑风暴来构思想法，考虑是什么使你的游戏独一无二。思考主题和背景——是奇幻的幻想世界、后末日荒野，还是充满活力的城市景观。接下来，关注核心游戏机制：玩家将做什么？他们将如何与游戏世界互动？对于我们这个2D平台游戏，核心机制可能包括奔跑、跳跃和收集物品。
- en: A clear game vision is essential. To do that, document your ideas with a concept
    summary or an elevator pitch. A concept summary is a brief and comprehensive description
    of your game idea, highlighting the core gameplay mechanics, objectives, and unique
    features, providing a snapshot of what the game is about and what players can
    expect in a few sentences. An elevator pitch is a concise, persuasive overview
    of your game idea that can be communicated in the time span of an elevator ride,
    typically 30 seconds to a minute.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个清晰的愿景至关重要。为此，用概念摘要或电梯演讲来记录你的想法。概念摘要是对你的游戏想法的简要而全面的描述，突出核心游戏机制、目标和独特功能，提供对游戏内容的快照，并在几句话中说明玩家可以期待什么。电梯演讲是对你的游戏想法的简洁、有说服力的概述，可以在电梯行程的时间内传达，通常是30秒到1分钟。
- en: 'Let’s look at an example each for concept summary and elevator pitch:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分别看看概念摘要和电梯演讲的例子：
- en: '**Concept summary**: *Platformer Quest is a 2D adventure where players navigate
    through challenging levels, collecting treasures and avoiding enemies in a colorful,*
    *dynamic world*.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**概念摘要**：*平台冒险之旅是一个2D冒险游戏，玩家在充满挑战的关卡中穿梭，收集宝藏并避开敌人，在一个五彩斑斓、* *充满活力的世界* *中游戏*。'
- en: '**Elevator pitch**: *Imagine a game where Mario meets modern physics puzzles—Platformer
    Quest offers an engaging blend of classic platforming and innovative* *level design*.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电梯演讲**：*想象一个马里奥与现代物理谜题相遇的游戏——平台冒险之旅提供了经典平台游戏和创新* *关卡设计* *的吸引人融合体*。'
- en: Once you have a solid idea, refine it. Create a brief game design document outlining
    the main features and unique aspects. This document will evolve, but having an
    initial version helps maintain focus and direction.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有一个稳固的想法，就要对其进行细化。创建一个简短的游戏设计文档，概述主要功能和独特之处。这份文档会不断演变，但拥有一个初始版本有助于保持焦点和方向。
- en: Conceptualizing your game idea is a fundamental step in game development. By
    establishing a clear vision and core mechanics, you lay the groundwork for a successful
    project. Remember, a compelling theme and unique gameplay elements are key to
    standing out in the market. With a solid game concept in place, it’s time to define
    the scope and set development milestones, ensuring a structured approach to bringing
    your vision to life.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 构思你的游戏想法是游戏开发的基本步骤。通过建立清晰的愿景和核心机制，你为成功项目奠定了基础。记住，吸引人的主题和独特的游戏元素是市场上脱颖而出的关键。有了稳固的游戏概念，现在是时候定义范围和设定开发里程碑，确保以结构化的方式将你的愿景变为现实。
- en: Defining scope and development milestones
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义范围和开发里程碑
- en: After conceptualizing your game idea, the next imperative step is to define
    the scope and set development milestones. This involves aligning your project
    with available resources, timeframes, and team capabilities. By breaking down
    the game concept into manageable components and setting realistic goals, you can
    ensure a structured and efficient development process.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在构思你的游戏想法之后，下一步至关重要的步骤是定义范围并设定开发里程碑。这涉及到将你的项目与可用资源、时间框架和团队能力相匹配。通过将游戏概念分解为可管理的组件并设定现实的目标，你可以确保一个结构化和高效的开发过程。
- en: 'To effectively manage your game development process, consider the following
    key steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地管理你的游戏开发过程，考虑以下关键步骤：
- en: '**Scoping** **the project**'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**确定** **项目范围**'
- en: Begin by assessing your resources and timeframe. Consider the size and skill
    set of your development team, as well as any budget constraints. This will help
    you determine the scope of your project. Break down the game concept into core
    components such as mechanics, features, story elements, and art assets. For our
    2D platformer, these components might include player movement, level design, enemy
    behavior, and collectibles.
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 首先，评估你的资源和时间框架。考虑你的开发团队的大小和技能组合，以及任何预算限制。这将帮助你确定项目范围。将游戏概念分解为核心组件，如机制、功能、故事元素和艺术资产。对于我们的2D平台游戏，这些组件可能包括玩家移动、关卡设计、敌人行为和可收集物品。
- en: '**Setting** **development milestones**'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设定** **开发里程碑**'
- en: Set clear and achievable milestones for each phase of development. These milestones
    act as checkpoints, helping you track progress and make adjustments as needed.
    For instance, early milestones could involve creating a basic prototype, implementing
    core mechanics, and designing initial levels. Later milestones might include integrating
    sound and graphics, conducting playtests, and polishing the game.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为每个开发阶段设定明确和可实现的里程碑。这些里程碑作为检查点，帮助你跟踪进度并根据需要做出调整。例如，早期里程碑可能包括创建基本原型、实现核心机制和设计初始关卡。后期里程碑可能包括集成声音和图形、进行游戏测试和打磨游戏。
- en: '**Creating a detailed game design** **document (GDD)**'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建详细的** **游戏设计文档** （GDD）'
- en: A comprehensive **game design document** (**GDD**) is important for maintaining
    a clear vision and roadmap throughout the development process. The GDD should
    outline the game’s features, mechanics, story, and art style. It serves as a reference
    for the entire team, ensuring consistency and focus. Include sections on gameplay
    mechanics, level design, character design, user interface, and audio-visual elements.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个全面的**游戏设计文档**（GDD）对于在整个开发过程中保持清晰的愿景和路线图非常重要。GDD应概述游戏的功能、机制、故事和艺术风格。它作为整个团队的参考，确保一致性和专注。包括游戏机制、关卡设计、角色设计、用户界面和视听元素的部分。
- en: '**Managing scope and preventing** **feature creep**'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理范围和防止** **功能蔓延**'
- en: To prevent feature creep – the tendency for new features to be added to a project
    beyond its original scope – and maintain focus, regularly review and adjust the
    scope of your project. Prioritize core gameplay elements and be willing to cut
    or postpone additional features that are not key. This ensures that development
    stays on track and the game remains cohesive and enjoyable.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了防止功能蔓延——即在新功能超出原始范围的情况下添加到项目中——并保持专注，定期审查和调整项目范围。优先考虑核心游戏元素，并愿意削减或推迟非关键功能。这确保了开发保持正轨，游戏保持统一和有趣。
- en: Defining the scope and setting development milestones are vital steps in turning
    your game concept into reality. By breaking down the project into manageable components
    and creating a detailed GDD, you provide a clear roadmap for your team. Regularly
    review the scope to stay focused and prevent feature creep, ensuring a smooth
    development process. With a well-defined scope and clear milestones, the next
    step is to select the appropriate genre and platform for your game, aligning with
    your vision and target audience.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 定义范围和设定开发里程碑是将你的游戏概念变为现实的关键步骤。通过将项目分解为可管理的组件并创建详细的GDD，你为你的团队提供了一个清晰的路线图。定期审查范围以保持专注并防止功能蔓延，确保开发过程顺利。有了明确定义的范围和清晰的里程碑，下一步就是选择适合你游戏的适当类型和平台，与你的愿景和目标受众保持一致。
- en: Selecting genre and platform
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择类型和平台
- en: Choosing the right genre and platform for your game is an integral step that
    influences many aspects of game design and development. The genre will shape your
    game’s mechanics, narrative, and overall appeal, while the platform determines
    technical requirements, distribution channels, and potential market reach. Making
    informed decisions in these areas ensures your game aligns with your vision and
    resources.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的游戏选择正确的类型和平台是一个至关重要的步骤，它影响着游戏设计和开发的许多方面。类型将塑造你的游戏机制、叙事和整体吸引力，而平台则决定了技术要求、分发渠道和潜在的市场覆盖范围。在这些领域做出明智的决定，确保你的游戏与你的愿景和资源相匹配。
- en: 'When planning your game, consider how the genre and platform will influence
    your design and development process:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划你的游戏时，考虑类型和平台将如何影响你的设计和开发过程：
- en: '**Implications of** **genre choice**'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型选择的影响**'
- en: The genre you choose directly impacts your game’s core mechanics and narrative
    structure. For instance, a 2D platformer focuses on precise controls, level design,
    and player progression through jumping and obstacle navigation. In contrast, a
    **role-playing game** (**RPG**) emphasizes character development, story depth,
    and strategic gameplay. Consider what makes your game unique within its genre
    and how it will appeal to your target audience. For our game *Platformer Quest*,
    choosing the platformer genre means we prioritize creating responsive controls
    and designing engaging levels.
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你选择的游戏类型直接影响着游戏的核心机制和叙事结构。例如，2D平台游戏侧重于精确的控制、关卡设计和玩家通过跳跃和障碍物导航的进步。相比之下，**角色扮演游戏（RPG**）强调角色发展、故事深度和战略游戏。考虑你的游戏在其类型中的独特之处以及它将如何吸引你的目标受众。对于我们的游戏*Platformer
    Quest*，选择平台游戏类型意味着我们优先考虑创建响应式控制和设计引人入胜的关卡。
- en: '**Choosing the** **right platform**'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**选择正确的平台**'
- en: Selecting the appropriate platform is equally important. Each platform (PC,
    console, mobile) has its own technical requirements, distribution channels, and
    market demographics. PC gaming offers a wide range of hardware capabilities and
    distribution options such as Steam and Epic Games Store. Consoles provide a more
    controlled environment with specific development kits and certification processes
    but access to a dedicated gaming audience. Mobile platforms emphasize accessibility
    and touch controls, with distribution through app stores. Assess your resources
    and target audience to determine the best platform for your game.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择合适的平台同样重要。每个平台（PC、游戏机、移动设备）都有其自身的技术要求、分发渠道和目标用户群体。PC游戏提供了广泛的硬件能力和分发选项，如Steam和Epic
    Games Store。游戏机提供更受控的环境，具有特定的开发工具和认证流程，但可以接触到专门的玩家群体。移动平台强调易用性和触摸控制，通过应用商店进行分发。评估你的资源和目标受众，以确定最适合你游戏的平台。
- en: '**Aligning genre and platform with** **your concept**'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将类型和平台与你的概念相匹配**'
- en: Your choice of genre and platform should reflect your game concept and development
    goals. Ensure that the technical capabilities of your chosen platform can support
    the mechanics and graphics of your genre. For *Platformer Quest*, a 2D platformer,
    both PC and mobile platforms are suitable, allowing for straightforward controls
    and distribution to a broad audience.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你对类型和平台的选择应反映你的游戏概念和开发目标。确保你选择平台的技术能力可以支持你类型所需的机制和图形。对于*Platformer Quest*这款2D平台游戏，PC和移动平台都是合适的，允许简单的控制和广泛的受众分发。
- en: Selecting the right genre and platform is a pivotal decision in game development.
    The genre shapes your game’s mechanics and narrative, while the platform affects
    technical requirements and market reach. By aligning these choices with your game
    concept and resources, you can create a cohesive and appealing game. With the
    genre and platform selected, the next step is to delve into designing the game
    mechanics that will bring your game to life.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的类型和平台是游戏开发中的一个关键决策。类型塑造了你的游戏机制和叙事，而平台影响技术要求和市场覆盖范围。通过将这些选择与你的游戏概念和资源相匹配，你可以创建一个统一且吸引人的游戏。在确定了类型和平台后，下一步是深入设计将使你的游戏栩栩如生的游戏机制。
- en: Designing game mechanics
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计游戏机制
- en: Designing game mechanics is a fundamental aspect of game development, serving
    as the backbone of a game’s interactivity and engagement. This section delves
    into the intricacies of crafting, implementing, and refining the core rules, objectives,
    and interactive elements that define the player’s experience. By exploring a variety
    of mechanics suited to different genres such as platformers, shooters, and puzzles,
    we will uncover the process of prototyping and testing these mechanics in Unity.
    Through practical examples, including the development of a simple platformer mechanic,
    this section will illustrate key concepts in movement, collision detection, collectibles,
    and enemy logic. Whether you’re implementing character movement or designing enemy
    behavior, understanding game mechanics is fundamental for creating engaging and
    interactive gameplay.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 设计游戏机制是游戏开发的基本方面，它是游戏互动性和吸引力的基础。本节深入研究了制作、实施和细化定义玩家体验的核心规则、目标和交互元素。通过探索适合不同类型（如平台游戏、射击游戏和益智游戏）的多种机制，我们将揭示在Unity中原型设计和测试这些机制的过程。通过实际案例，包括简单平台游戏机制的开发，本节将展示运动、碰撞检测、可收集物品和敌人逻辑的关键概念。无论你是实现角色移动还是设计敌人行为，理解游戏机制对于创造引人入胜和交互式的游戏体验是基本的。
- en: Delving into the intricacies of crafting, implementing, and refining the core
    rules, objectives, and interactive elements that define the player’s experience
    is pivotal. By exploring a variety of mechanics suited to different genres such
    as platformers, shooters, and puzzles, we will uncover the process of prototyping
    and testing these mechanics in Unity. Understanding game loops, feedback systems,
    and the balance between challenge and skill is key for creating compelling gameplay.
    Through practical examples, including the development of a simple platformer mechanic,
    key concepts in movement, collision detection, collectibles, and enemy logic will
    be illustrated. Whether you’re implementing character movement or designing enemy
    behavior, mastering game mechanics is essential for creating engaging and interactive
    gameplay.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 深入研究制作、实施和细化定义玩家体验的核心规则、目标和交互元素是至关重要的。通过探索适合不同类型（如平台游戏、射击游戏和益智游戏）的多种机制，我们将揭示在Unity中原型设计和测试这些机制的过程。理解游戏循环、反馈系统以及挑战与技能之间的平衡对于创造引人入胜的游戏体验至关重要。通过实际案例，包括简单平台游戏机制的开发，本节将展示运动、碰撞检测、可收集物品和敌人逻辑的关键概念。无论你是实现角色移动还是设计敌人行为，掌握游戏机制对于创造引人入胜和交互式的游戏体验是必不可少的。
- en: Understanding the foundations of game mechanics is significant for any game
    developer. These mechanics shape how players interact with the game, providing
    structure and feedback that enhance the overall experience. With this foundation,
    we can explore how to develop mechanics for different genres, ensuring a broad
    and versatile understanding of game design.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 理解游戏机制的基础对于任何游戏开发者都至关重要。这些机制塑造了玩家与游戏互动的方式，提供了结构和反馈，增强了整体体验。有了这个基础，我们可以探索如何为不同类型开发机制，确保对游戏设计的广泛和灵活理解。
- en: Developing mechanics for different genres
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发不同类型的游戏机制
- en: Designing game mechanics varies significantly across genres, with each genre
    requiring a unique approach to create engaging and immersive gameplay. By understanding
    how core mechanics define genres such as platformers, shooters, puzzles, and strategy
    games, developers can craft experiences that meet player expectations and align
    with the game’s theme.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**设计游戏机制在各个类型中差异很大，每种类型都需要独特的策略来创造引人入胜和沉浸式的游戏体验**。通过理解核心机制如何定义平台游戏、射击游戏、益智游戏和策略游戏等类型，开发者可以创造满足玩家期望并与游戏主题相符的体验。'
- en: 'Different game genres emphasize various core mechanics’ fundamentals for creating
    engaging gameplay experiences:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的游戏类型强调创建引人入胜游戏体验的核心机制的基本要素：
- en: '**Platformers**'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平台游戏**'
- en: A platformer is a genre of video games where players navigate characters through
    levels filled with obstacles and enemies, primarily by running and jumping.
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 平台游戏是一种视频游戏类型，玩家通过奔跑和跳跃来导航充满障碍和敌人的关卡。
- en: 'Here are the core mechanics of platformers:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是平台游戏的核心机制：
- en: Character movement (jumping, running)
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色移动（跳跃、奔跑）
- en: Collision detection
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 碰撞检测
- en: Level progression
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关卡进度
- en: '*Example of usage*: Implementing precise jumping mechanics to navigate platforms
    and avoid obstacles.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**使用示例**：实现精确的跳跃机制以在平台上导航并避开障碍。'
- en: '**Shooters**'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**射击游戏**'
- en: A shooter is a genre of video games focused on combat, where players use a variety
    of weapons to defeat enemies, emphasizing accuracy and strategic use of an arsenal.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 射击游戏是一种以战斗为重点的视频游戏类型，玩家使用各种武器击败敌人，强调准确性和战略性地使用武器库。
- en: 'Here are the core mechanics of shooters:'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是射击游戏的核心机制：
- en: Shooting accuracy
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 射击精度
- en: Weapon variety
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 武器多样性
- en: Enemy AI
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敌人AI
- en: '*Example of usage*: Designing responsive controls and diverse weapons to enhance
    player combat experiences.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*使用示例*：设计响应式控件和多样化的武器，以增强玩家的战斗体验。'
- en: '**Puzzles**'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解谜**'
- en: A puzzle game is a genre of video game that challenges players to solve problems
    and complete tasks using logic and problem-solving skills, often involving progressively
    difficult levels.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解谜游戏是一种挑战玩家使用逻辑和问题解决技能解决问题和完成任务的视频游戏类型，通常涉及难度逐渐增加的关卡。
- en: 'Here are the core mechanics of puzzles:'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是解谜游戏的核心机制：
- en: Problem-solving
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 问题解决
- en: Logic challenges
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑挑战
- en: Level design
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等级设计
- en: '*Example of usage*: Creating intuitive puzzles that increase in complexity
    to maintain player interest.'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*使用示例*：创建直观的谜题，随着复杂性的增加以保持玩家的兴趣。'
- en: '**Strategy games**'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**策略游戏**'
- en: A strategy game is a genre of video games that emphasizes planning, resource
    management, and tactical decision-making to achieve long-term objectives and outmaneuver
    opponents.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 策略游戏是一种强调规划、资源管理和战术决策以实现长期目标和战胜对手的视频游戏类型。
- en: 'Here are the core mechanics of strategy games:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面是策略游戏的核心机制：
- en: Resource management
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源管理
- en: Unit control
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单位控制
- en: Tactical decision-making
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 战术决策
- en: '*Example of usage*: Developing systems for resource allocation and strategic
    planning to engage players in long-term gameplay.'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*使用示例*：开发资源分配和战略规划系统，以吸引玩家参与长期游戏。'
- en: Developing mechanics tailored to specific game genres ensures that the gameplay
    is both engaging and aligned with player expectations. By focusing on core mechanics
    that define each genre, developers can create unique and enjoyable experiences.
    Next, we will explore how to prototype and implement these mechanics in Unity,
    bringing our game ideas to life through practical application.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开发针对特定游戏类型的机制确保游戏玩法既吸引人又符合玩家的期望。通过关注定义每个类型的核心机制，开发者可以创造独特且愉快的体验。接下来，我们将探讨如何在Unity中原型设计和实现这些机制，通过实际应用将我们的游戏想法变为现实。
- en: Prototyping and implementing mechanics in Unity
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Unity中原型设计和实现机制
- en: Prototyping and implementing game mechanics in Unity is a crucial step in game
    development, allowing developers to bring their ideas to life. This section focuses
    on the practical aspects of this process, from initial paper prototypes to fully
    functional digital versions. We will explore Unity’s tools and features, such
    as the physics engine, input systems, and animation, and provide a step-by-step
    example of developing a basic jump mechanic in a platformer game.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中原型设计和实现游戏机制是游戏开发的关键步骤，它允许开发者将他们的想法变为现实。本节侧重于这一过程的实际方面，从最初的纸面原型到完全功能性的数字版本。我们将探讨Unity的工具和功能，例如物理引擎、输入系统和动画，并提供一个在平台游戏中开发基本跳跃机制的分步示例。
- en: Developing core mechanics
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发核心机制
- en: Designing and implementing game mechanics is a major step in game development,
    serving as the backbone of player interaction and engagement. In this section,
    we will explore the process of prototyping game mechanics using Unity, including
    the tools and techniques that can help bring your ideas to life. By focusing on
    a 2D platformer, we will demonstrate how to implement and refine core mechanics.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 设计和实现游戏机制是游戏开发的重要一步，它是玩家互动和参与的基础。在本节中，我们将探讨使用Unity原型设计游戏机制的过程，包括帮助将您的想法变为现实的各种工具和技术。通过关注2D平台游戏，我们将展示如何实现和细化核心机制。
- en: Start with simple paper prototypes to conceptualize mechanics and test basic
    ideas. Transition to digital prototypes in Unity to refine and test mechanics
    in a playable format. Using Unity’s tools, you can quickly iterate on your game
    mechanics, ensuring they function as intended.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 从简单的纸面原型开始，以概念化机制并测试基本想法。过渡到Unity中的数字原型，以可玩格式精炼和测试机制。使用Unity的工具，您可以快速迭代您的游戏机制，确保它们按预期工作。
- en: Using Unity’s tools for prototyping
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Unity的工具进行原型设计
- en: 'Unity provides a range of tools that are necessary for prototyping game mechanics
    efficiently. These tools allow you to simulate and test various aspects of gameplay,
    ensuring a smooth development process:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供了一系列用于高效原型设计游戏机制的工具。这些工具允许你模拟和测试游戏的各种方面，确保开发过程顺利：
- en: '**Physics engine**: Utilize Unity’s physics engine to handle collision detection
    and physical interactions.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**物理引擎**：利用 Unity 的物理引擎来处理碰撞检测和物理交互。'
- en: '**Input systems**: Implement Unity’s input systems to capture player actions,
    such as movement and jumping.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入系统**：实现 Unity 的输入系统以捕获玩家动作，如移动和跳跃。'
- en: '**Animation**: Use Unity’s animation tools to create smooth and responsive
    character movements.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动画**：使用 Unity 的动画工具创建平滑且响应灵敏的角色移动。'
- en: By leveraging these tools, you can create a functional prototype that accurately
    represents your game’s mechanics and allows for thorough testing and iteration.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用这些工具，你可以创建一个能够准确反映游戏机制的功能原型，并允许进行彻底的测试和迭代。
- en: The following are some sample C# scripts that implement the prototyping strategies
    just discussed.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例 C# 脚本，它们实现了刚才讨论的原型设计策略。
- en: Sample platformer scripts
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样本平台脚本
- en: 'The following are example scripts imperative for prototyping a 2D platformer.
    These scripts cover core mechanics such as player movement, collectibles, enemy
    behavior, and UI management, helping you understand and implement these features
    in Unity:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些示例脚本，对于原型设计 2D 平台游戏至关重要。这些脚本涵盖了核心机制，如玩家移动、可收集物品、敌人行为和 UI 管理，帮助您在 Unity
    中理解和实现这些功能：
- en: '`PlayerMovement` script, which is important for controlling character actions
    and interactions in the game:'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PlayerMovement` 脚本，对于控制游戏中的角色动作和交互非常重要：'
- en: '[PRE0]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This script handles basic player movement and jumping. The `PlayerMovement`
    script uses Unity’s `Rigidbody2D` component to apply physics-based movement. The
    `Update` method captures horizontal input and applies velocity to the player character.
    The jump mechanic is triggered when the player presses the spacebar while grounded.
    Attach the `PlayerMovement` script to the player character in the Unity Editor.
    Ensure the player has a `Rigidbody2D` component and a 2D collider to interact
    with the ground.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本处理基本的玩家移动和跳跃。`PlayerMovement` 脚本使用 Unity 的 `Rigidbody2D` 组件应用基于物理的运动。`Update`
    方法捕获水平输入并应用到玩家角色。当玩家在地面上按下空格键时，会触发跳跃机制。在 Unity 编辑器中将 `PlayerMovement` 脚本附加到玩家角色。确保玩家具有
    `Rigidbody2D` 组件和 2D 碰撞器以与地面交互。
- en: '`Collectibles` script, indispensable for adding interactive items that enhance
    gameplay and player engagement:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Collectibles` 脚本，对于添加增强游戏玩法和玩家参与度的交互式项目至关重要：'
- en: '[PRE1]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This script manages collectible items in the game. When the player character
    collides with a collectible, the item is destroyed, simulating collection. Attach
    the `Collectibles` script to collectible items in the game. Ensure the items have
    a collider with the `Enemy` script, which is vital for creating dynamic challenges
    and interactions within the game:'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本管理游戏中的可收集物品。当玩家角色与可收集物品碰撞时，物品将被销毁，模拟收集过程。将 `Collectibles` 脚本附加到游戏中的可收集物品。确保物品具有具有
    `Enemy` 脚本的碰撞器，这对于在游戏中创建动态挑战和交互至关重要：
- en: '[PRE2]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This script controls basic enemy movement, making the enemy patrol back and
    forth. The enemy changes direction when it reaches the edge of a platform. Attach
    the `Enemy` script to enemy characters in the game. Ensure the enemies have a
    2D collider and a `Rigidbody2D` component.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本控制基本敌人的移动，使敌人来回巡逻。当敌人到达平台边缘时，它会改变方向。将 `Enemy` 脚本附加到游戏中的敌人角色。确保敌人具有 2D 碰撞器和
    `Rigidbody2D` 组件。
- en: '`UIManager` script, integral for managing and displaying game information such
    as the player’s score:'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`UIManager` 脚本，对于管理和显示游戏信息（如玩家的得分）至关重要：'
- en: '[PRE3]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This script manages the game’s UI, specifically the score display. It updates
    the score text whenever the score changes. Attach the `UIManager` script to a
    UI Manager object in the game. Link the `scoreText` field to the appropriate UI
    Text game object in the Unity Editor.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此脚本管理游戏的用户界面，特别是得分显示。每当得分变化时，它会更新得分文本。将 `UIManager` 脚本附加到游戏中的 UI 管理器对象。在 Unity
    编辑器中将 `scoreText` 字段链接到适当的 UI Text 游戏对象。
- en: Let’s transition from the script-writing phase to integrating these mechanics
    into your Unity project.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从脚本编写阶段过渡到将这些机制集成到您的 Unity 项目中。
- en: 'Here’s the step-by-step implementation:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是逐步实现的步骤：
- en: '`PlatformerPrototype`.'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PlatformerPrototype`。'
- en: To organize your project, in the `Scripts`, `Prefabs`, and `UI`.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了组织项目，在`脚本`、`预制体`和`UI`中。
- en: 'To create a UI Canvas, do the following:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建UI画布，请执行以下操作：
- en: Right-click in the `Canvas` object.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Canvas`对象上右键单击。
- en: Set the **Canvas** to **Screen Space -** **Overlay**.
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**Canvas**设置为**Screen Space -** **Overlay**。
- en: '`Player` object:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`玩家`对象：'
- en: Right-click in the `Player`.
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`玩家`上右键单击。
- en: 'Add a `Sprite Renderer` component to the `Player` object and assign a sprite.*   Attach
    the `PlayerMovement` Script:'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Sprite Renderer`组件添加到`玩家`对象中并分配一个精灵。*   附加`PlayerMovement`脚本：
- en: Move the `PlayerMovement.cs` script to the `PlayerMovement` script.
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`PlayerMovement.cs`脚本移动到`PlayerMovement`脚本。
- en: 'Add a `Rigidbody2D` component and a `BoxCollider2D` component to the `Player`
    object.*   `Collectible` Object:'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Rigidbody2D`组件和`BoxCollider2D`组件添加到`玩家`对象中。*   `可收集`对象：
- en: Right-click in the `Collectible`.
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`可收集`上右键单击。
- en: 'Set the sprite and adjust the size of the collectible.*   Attach the `Collectibles`
    script:'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置精灵并调整可收集物品的大小。*   附加`Collectibles`脚本：
- en: Move the `Collectibles.cs` script to the `Collectible` Object, click `Collectibles`
    script.
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Collectibles.cs`脚本移动到`可收集`对象中，点击`Collectibles`脚本。
- en: 'Add a `BoxCollider2D` component and check the `Is` `Trigger` option.*   Duplicate
    collectibles:'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`BoxCollider2D`组件并勾选`Is` `Trigger`选项。*   复制可收集物品：
- en: Duplicate the `Collectible` object to create multiple instances and position
    them in your scene.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 复制`可收集`对象以创建多个实例并将它们放置在场景中。
- en: '`Enemy` object:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`敌人`对象：'
- en: Right-click in the `Enemy`.
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`敌人`上右键单击。
- en: 'Add a `Sprite Renderer` component to the `Enemy` object and assign a sprite.*   Attach
    the `Enemy` script:'
  id: totrans-130
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Sprite Renderer`组件添加到`敌人`对象中并分配一个精灵。*   附加`敌人`脚本：
- en: Move the `Enemy.cs` script to the `Enemy` object, click `Enemy` script.
  id: totrans-131
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Enemy.cs`脚本移动到`敌人`对象中，点击`敌人`脚本。
- en: 'Add a `Rigidbody2D` component and a `BoxCollider2D` component to the `Enemy`
    object.*   Set up ground detection:'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Rigidbody2D`组件和`BoxCollider2D`组件添加到`敌人`对象中。*   设置地面检测：
- en: Create an `empty GameObject` as a child of the `Enemy` object and name it `GroundDetection`.
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`敌人`对象下创建一个作为子对象的`empty GameObject`并将其命名为`GroundDetection`。
- en: 'Position it below the `Enemy` object to detect the ground. Assign this object
    to the `groundDetection` field in the `Enemy` script.*   Duplicate enemies:'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其放置在`敌人`对象下方以检测地面。将此对象分配给`敌人`脚本中的`groundDetection`字段。*   复制敌人：
- en: Duplicate the `Enemy` object to create multiple instances and position them
    in your scene.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 复制`敌人`对象以创建多个实例并将它们放置在场景中。
- en: '`ScoreText`.*   Customize the text (font, size, color) and position it in the
    desired location.*   Attach the `UIManager` script:'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`得分文本`。*   自定义文本（字体、大小、颜色）并将其放置在期望的位置。*   附加`UIManager`脚本：'
- en: Move the `UIManager.cs` script to the `UIManager` and attach the `UIManager`
    script.
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UIManager.cs`脚本移动到`UIManager`并附加`UIManager`脚本。
- en: Drag the `ScoreText` object into the `UIManager` script.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`得分文本`对象拖入`UIManager`脚本中。
- en: The preceding implementation offers a step-by-step guide to developing a simple
    slice of a 2D platformer game. Be sure to test and refine these mechanics as you
    continue to develop your game.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 上述实现提供了一个开发2D平台游戏简单片段的逐步指南。确保在继续开发游戏的过程中测试和改进这些机制。
- en: Prototyping and implementing game mechanics in Unity involves using various
    tools and features to bring your ideas to life. By following these examples and
    understanding how to utilize Unity’s capabilities, you can create functional and
    engaging game mechanics. Next, we will discuss integrating assets and levels into
    your game to build a cohesive and immersive world.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中原型设计和实现游戏机制涉及使用各种工具和功能来使你的想法变为现实。通过遵循这些示例并了解如何利用Unity的功能，你可以创建功能性和吸引人的游戏机制。接下来，我们将讨论将资产和关卡集成到你的游戏中以构建一个统一和沉浸式的世界。
- en: Integrating assets and levels
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成资产和关卡
- en: Integrating assets and levels is a central step in bringing your game to life,
    as it involves populating the game world with the visual, auditory, and interactive
    elements that enhance gameplay. This section will guide you through managing and
    integrating graphical assets, animations, audio, and UI elements within Unity.
    We’ll delve into the creation and design of game levels, leveraging Unity’s Scene
    Editor and Asset Store to build immersive environments. Additionally, we’ll offer
    insights into organizing your project to efficiently handle multiple assets and
    levels, illustrated through an example project that showcases comprehensive asset
    integration. From importing 2D sprites to adding sound effects and designing levels,
    this section will equip you with the knowledge to create a cohesive and engaging
    game world.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 将资产和层级整合是让你的游戏栩栩如生的重要步骤，因为它涉及到在游戏世界中填充视觉、听觉和交互元素，以增强游戏体验。本节将指导你如何在Unity中管理和整合图形资产、动画、音频和UI元素。我们将深入探讨游戏层级的创建和设计，利用Unity的场景编辑器和资产商店来构建沉浸式环境。此外，我们还将提供关于如何组织项目以高效处理多个资产和层级的见解，并通过一个展示全面资产整合的示例项目进行说明。从导入2D精灵到添加音效和设计关卡，本节将为你提供创建一个连贯且引人入胜的游戏世界的知识。
- en: Managing and integrating graphical assets
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理和整合图形资产
- en: Effectively managing and integrating graphical assets is paramount for creating
    a visually appealing and high-performing game. This section will cover best practices
    for importing sprites, textures, and models into Unity, optimizing performance
    and visual fidelity. We will also explore the Unity Asset Store and other resources
    for acquiring assets and provide tips on organizing assets within the Unity Editor
    to maintain a clean and manageable project structure.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有效管理和整合图形资产对于创建视觉吸引力和高性能的游戏至关重要。本节将涵盖将精灵、纹理和模型导入Unity的最佳实践，优化性能和视觉保真度。我们还将探索Unity资产商店和其他资源以获取资产，并提供在Unity编辑器中组织资产以保持整洁和可管理项目结构的技巧。
- en: Importing assets
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入资产
- en: When importing assets into Unity, it is essential to follow best practices to
    ensure they are correctly sized and formatted. For instance, use PNG format for
    sprites and JPEG for textures to maintain quality and performance. Additionally,
    appropriate import settings should be applied to optimize both performance and
    visual fidelity. This includes adjusting resolution, compression, and mipmaps
    settings for textures and sprites to achieve the desired balance between quality
    and efficiency.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当将资产导入Unity时，遵循最佳实践至关重要，以确保它们正确的大小和格式。例如，使用PNG格式为精灵和JPEG格式为纹理以保持质量和性能。此外，应应用适当的导入设置以优化性能和视觉保真度。这包括调整纹理和精灵的分辨率、压缩和米柏设置，以实现质量和效率之间的理想平衡。
- en: 'Importing assets into Unity is straightforward: drag and drop them into the
    Unity Project window. Fine-tune the import settings for each asset type using
    the Inspector panel to ensure optimal performance and visual quality. This allows
    you to customize how each asset is processed and rendered, ensuring they perform
    optimally within your game.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 将资产导入Unity的过程很简单：将它们拖放到Unity项目窗口中。使用检查器面板对每种资产类型进行精细调整导入设置，以确保最佳性能和视觉效果。这允许你自定义每个资产的处理和渲染方式，确保它们在游戏中表现最佳。
- en: Now, to ensure optimal performance and visual quality when importing assets
    into Unity, it’s important to follow best practices.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了确保在将资产导入Unity时获得最佳性能和视觉效果，遵循最佳实践非常重要。
- en: 'Here are the steps for importing assets in Unity:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是Unity中导入资产的步骤：
- en: Start by dragging and dropping them into the Unity Project window. This process
    is straightforward and allows you to quickly add various types of assets to your
    project.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先开始，将它们拖放到Unity项目窗口中。这个过程简单直接，允许你快速将各种类型的资产添加到你的项目中。
- en: Once the assets are in the project, it is important to adjust the import settings
    in the Inspector panel for each asset type. This step ensures that each asset
    is optimized for performance and visual quality, which can significantly impact
    the overall efficiency and appearance of your game. Fine-tuning these settings,
    such as resolution, compression, and mipmaps, helps to achieve the desired balance
    between performance and visual fidelity, ensuring that your game runs smoothly
    while looking its best.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦资产被添加到项目中，就非常重要在检查器面板中调整每种资产类型的导入设置。这一步骤确保每个资产都针对性能和视觉质量进行了优化，这对游戏的整体效率和外观有显著影响。微调这些设置，如分辨率、压缩和米柏映射，有助于在性能和视觉保真度之间达到理想的平衡，确保游戏运行流畅且视觉效果最佳。
- en: 'Here are the best practices for importing assets:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是导入资产的最佳实践：
- en: First, make sure that assets are correctly sized and formatted, such as using
    PNG for sprites and JPEG for textures.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，确保资产大小和格式正确，例如使用PNG格式为精灵，JPEG格式为纹理。
- en: Next, apply appropriate import settings to optimize both performance and visual
    fidelity. This involves adjusting settings such as resolution, compression, and
    mipmaps for textures and sprites to achieve the desired balance between quality
    and efficiency.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，应用适当的导入设置以优化性能和视觉保真度。这涉及到调整纹理和精灵的分辨率、压缩和米柏映射等设置，以达到质量和效率之间的理想平衡。
- en: Next, let’s look at how to organize assets in Unity.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看如何在Unity中组织资产。
- en: Organizing assets in Unity
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Unity中组织资产
- en: Creating a clear folder structure is core for keeping assets organized and easily
    accessible in Unity. Using descriptive names for folders and files helps avoid
    confusion and ensures that all team members can quickly find and manage the necessary
    assets. This practice not only streamlines the development process but also enhances
    overall project efficiency and maintainability.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中保持资产组织有序且易于访问的核心是创建清晰的文件夹结构。为文件夹和文件使用描述性名称有助于避免混淆，并确保所有团队成员都能快速找到和管理必要的资产。这种做法不仅简化了开发过程，还提高了整体项目的效率和可维护性。
- en: 'Here’s an example of a Unity project folder structure:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个Unity项目文件夹结构的示例：
- en: '![Figure 13.2 – Unity assets folder layout](img/B22128_13_2.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图13.2 – Unity资产文件夹布局](img/B22128_13_2.jpg)'
- en: Figure 13.2 – Unity assets folder layout
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – Unity资产文件夹布局
- en: The preceding diagram shows the `Assets` folder with four sub-folders for `Prefabs`,
    `Resources`, `Scenes`, and `Scripts`. Under `Resources`, we see more sub-folders
    for `Materials`. `Shaders`, `Sprites`, and `Textures`. Though you can go many
    levels deep with sub-folders, it is discouraged.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 上述图表显示了包含四个子文件夹“预制体”、“资源”、“场景”和“脚本”的“资产”文件夹。在“资源”下，我们看到更多子文件夹，如“材质”、“着色器”、“精灵”和“纹理”。虽然可以创建多层子文件夹，但这是不被推荐的。
- en: Proper management and integration of graphical assets are crucial for maintaining
    performance and visual fidelity in your game. By following best practices for
    importing assets, utilizing resources such as the Unity Asset Store and other
    asset repositories, and organizing your project effectively, you can create a
    streamlined and efficient development process. Next, we will explore incorporating
    animations and audio to further enhance your game’s immersive experience.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 正确管理和集成图形资产对于保持游戏中的性能和视觉保真度至关重要。通过遵循导入资产的最佳实践，利用Unity资产商店和其他资产库等资源，以及有效地组织项目，您可以创建一个流畅且高效的开发流程。接下来，我们将探讨如何集成动画和音频，以进一步增强游戏的沉浸式体验。
- en: Incorporating animations and audio
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成动画和音频
- en: Incorporating animations and audio is central for bringing the game world to
    life, creating an immersive and dynamic experience for players. This section explores
    how to use Unity’s tools to animate characters and objects, as well as how to
    add sound effects and music that complement the game’s mechanics and narrative.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 集成动画和音频对于使游戏世界栩栩如生，为玩家创造沉浸和动态体验至关重要。本节将探讨如何使用Unity的工具来动画化角色和对象，以及如何添加与游戏机制和叙事相辅相成的音效和音乐。
- en: To animate characters and objects in Unity, you will use the **Animator** and
    **Animation** components. The **Animator** component allows you to control the
    flow of animations, linking different animation states through transitions and
    conditions. For example, you can create an idle, walk, and jump animation for
    a character, and use the Animator to switch between these states based on player
    input. The **Animation** component, on the other hand, is used for simple animations,
    such as moving an object along a path or scaling it up and down. By combining
    these tools, you can create fluid and responsive animations that enhance the visual
    appeal of your game.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中为角色和对象创建动画，您将使用**Animator**和**Animation**组件。**Animator**组件允许您控制动画的流程，通过转换和条件连接不同的动画状态。例如，您可以为角色创建空闲、行走和跳跃动画，并使用Animator根据玩家输入在这些状态之间切换。另一方面，**Animation**组件用于简单的动画，例如沿路径移动对象或上下缩放对象。通过结合这些工具，您可以创建流畅且响应迅速的动画，从而增强游戏的视觉吸引力。
- en: For audio, Unity provides the **Audio Source** and **Audio Listener** components.
    The **Audio Source** component is used to play sound effects and music, while
    the **Audio Listener** component acts as the *ears* of the game, typically attached
    to the main camera or player character. Adding sound effects for actions such
    as jumping, collecting items, or enemy interactions can greatly enhance the player’s
    experience by providing immediate feedback and making the game world feel more
    alive. Background music sets the mood and tone, helping to immerse players in
    the game’s narrative and atmosphere.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于音频，Unity提供了**Audio Source**和**Audio Listener**组件。**Audio Source**组件用于播放音效和音乐，而**Audio
    Listener**组件作为游戏的“耳朵”，通常附加到主摄像机或玩家角色上。为跳跃、收集物品或敌人交互等动作添加音效可以极大地增强玩家的体验，通过提供即时反馈并使游戏世界感觉更加生动。背景音乐设定了氛围和基调，帮助玩家沉浸在游戏的叙事和氛围中。
- en: Creating immersive audio-visual experiences involves more than just adding animations
    and sounds. It requires careful synchronization and balancing to ensure that both
    elements complement each other and the overall gameplay. Animations should be
    smooth and responsive, matching the timing and intensity of sound effects. Similarly,
    audio levels should be adjusted to avoid overpowering the visuals or gameplay,
    maintaining a harmonious balance that enhances the player’s engagement.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 创建沉浸式的视听体验不仅仅是添加动画和声音。它需要仔细的同步和平衡，以确保这两个元素相互补充，并增强整体游戏体验。动画应该流畅且响应迅速，与音效的节奏和强度相匹配。同样，音频级别应该调整以避免压倒视觉效果或游戏玩法，保持和谐平衡，从而增强玩家的参与度。
- en: Incorporating animations and audio effectively is fundamental for creating a
    lively and engaging game world. By utilizing Unity’s **Animator** and **Animation**
    components for animations and the **Audio Source** and **Audio Listener** components
    for audio, you can craft a dynamic and immersive experience that complements your
    game’s mechanics and narrative. Next, we will discuss designing **user interfaces**
    (**UIs**) to further enhance player interaction and usability.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 有效地融入动画和音频对于创建生动和吸引人的游戏世界至关重要。通过利用Unity的**Animator**和**Animation**组件进行动画，以及**Audio
    Source**和**Audio Listener**组件进行音频，您可以制作出动态和沉浸式的体验，与游戏机制和叙事相得益彰。接下来，我们将讨论设计**用户界面**（**UIs**）以进一步增强玩家交互和可用性。
- en: Designing UIs
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计用户界面
- en: Creating and integrating UI elements, such as menus, HUDs, and interactive components,
    is key for enhancing player interaction and usability. This section will delve
    into layout management, UI animations, and event handling using Unity’s UI system
    (uGUI). We will also discuss the importance of designing responsive and intuitive
    UIs that adapt to different screen sizes and resolutions, ensuring a consistent
    player experience across various devices.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 创建和集成UI元素，如菜单、HUD和交互式组件，对于增强玩家交互和可用性至关重要。本节将深入探讨使用Unity的UI系统（uGUI）进行布局管理、UI动画和事件处理。我们还将讨论设计响应式和直观的UI的重要性，这些UI能够适应不同的屏幕尺寸和分辨率，确保在各种设备上提供一致的游戏体验。
- en: Designing effective UIs begins with thoughtful layout management. Decide what
    elements need to be present on each screen, such as health bars, score displays,
    and navigation menus. Organize these elements in a way that is visually appealing
    and easy for players to understand. Unity’s `Canvas` component allows you to manage
    the overall layout, while `RectTransform` components help position and size UI
    elements relative to the screen. Group related elements together and use alignment
    tools to ensure a clean and organized appearance.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 设计有效的UI始于深思熟虑的布局管理。决定每个屏幕上需要显示哪些元素，例如生命值条、得分显示和导航菜单。以视觉上吸引人且易于玩家理解的方式组织这些元素。Unity的`Canvas`组件允许你管理整体布局，而`RectTransform`组件有助于根据屏幕定位和调整UI元素的大小。将相关元素分组，并使用对齐工具确保整洁有序的外观。
- en: UI animations add a dynamic layer to the user interface, making interactions
    more engaging. Utilize Unity’s Animator component to create smooth transitions
    between different UI states, such as opening and closing menus or highlighting
    selected items. These animations should enhance the user experience without being
    distracting or overwhelming. For instance, a subtle fade-in effect can make a
    menu appear more smoothly, while a bounce animation can provide feedback when
    a button is clicked.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: UI动画为用户界面增添了动态层次，使交互更加吸引人。利用Unity的Animator组件创建不同UI状态之间的平滑过渡，例如打开和关闭菜单或突出显示选定的项目。这些动画应增强用户体验，而不会分散注意力或造成负担。例如，微妙的淡入效果可以使菜单出现得更加平滑，而弹跳动画可以在按钮被点击时提供反馈。
- en: Event handling is another pivotal aspect of UI design. Unity’s **Event System**
    and components such as **Button**, **Toggle**, and **Slider** allow you to create
    interactive elements that respond to player input. Implement event listeners to
    handle user actions, such as clicking a button or dragging a slider, ensuring
    that the interface is responsive and intuitive. Testing these interactions thoroughly
    helps identify any issues and ensures that the UI behaves as expected.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 事件处理是UI设计的关键方面之一。Unity的**事件系统**以及**按钮**、**切换**和**滑块**等组件允许你创建对玩家输入做出响应的交互式元素。实现事件监听器来处理用户操作，例如点击按钮或拖动滑块，确保界面响应灵敏且直观。彻底测试这些交互有助于识别任何问题，并确保UI按预期行为。
- en: '![Figure 13.3 – Canvas Scaler component](img/B22128_13_3.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图13.3 – Canvas Scaler组件](img/B22128_13_3.jpg)'
- en: Figure 13.3 – Canvas Scaler component
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – Canvas Scaler组件
- en: Ensuring your UI adapts to different screen sizes and resolutions is vital for
    maintaining a consistent player experience across various devices. Use Unity’s
    `Canvas Scaler` component to automatically adjust the size of UI elements based
    on the screen resolution. Design your UI with flexible layouts that can adapt
    to both landscape and portrait orientations, and test on multiple devices to ensure
    compatibility. Consider touch input for mobile devices and ensure that elements
    are large enough to be easily tapped.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的UI能够适应不同的屏幕尺寸和分辨率，这对于在多种设备上保持一致的玩家体验至关重要。使用Unity的`Canvas Scaler`组件根据屏幕分辨率自动调整UI元素的大小。设计具有灵活布局的UI，以便适应横屏和竖屏方向，并在多台设备上进行测试以确保兼容性。考虑移动设备的触摸输入，并确保元素足够大，以便容易点击。
- en: Effective UI design involves careful consideration of layout, animations, and
    event handling to create a responsive and intuitive interface. By leveraging Unity’s
    UI system (uGUI) and ensuring adaptability across different screen sizes and resolutions,
    you can enhance the player experience and maintain consistency across various
    devices. Next, we will explore the process of creating and organizing game levels
    to further develop your game’s world and structure.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的UI设计涉及对布局、动画和事件处理的仔细考虑，以创建响应灵敏且直观的界面。通过利用Unity的UI系统（uGUI）并确保在不同屏幕尺寸和分辨率上的适应性，你可以增强玩家体验并保持各种设备的一致性。接下来，我们将探讨创建和组织游戏关卡的过程，以进一步发展你的游戏世界和结构。
- en: Creating and organizing game levels
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和组织游戏关卡
- en: Designing and organizing game levels is a crucial aspect of game development
    that greatly influences player experience and engagement. While level design can
    be a complex field often requiring extensive training and collaboration, this
    section provides an overview of the fundamental concepts and practices for creating
    game levels in Unity. We will explore the use of the Scene Editor to construct
    game environments, place objects, and set up level-specific mechanics, as well
    as efficient scene management for loading and transitioning between levels.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 设计和组织游戏关卡是游戏开发中的一个关键方面，它极大地影响了玩家的体验和参与度。虽然关卡设计可能是一个复杂的领域，通常需要广泛的培训和协作，但本节提供了在Unity中创建游戏关卡的基本概念和实践的概述。我们将探讨使用场景编辑器来构建游戏环境、放置对象和设置关卡特定机制，以及高效的场景管理以加载和过渡到不同关卡。
- en: The following image shows an example of two different levels in a platformer
    game with a transition indicated in the middle.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了平台游戏中两个不同关卡的一个示例，中间标明了过渡。
- en: '![Figure 13.4 – Transitioning from Level 1 to Level 2](img/B22128_13_4.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图13.4 – 从关卡1过渡到关卡2](img/B22128_13_4.jpg)'
- en: Figure 13.4 – Transitioning from Level 1 to Level 2
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4 – 从关卡1过渡到关卡2
- en: It’s rare for a platformer game to have just a single level. Part of the design
    process is to anticipate how to transition a player from one level to the next.
    The example above shows a simple flow from level 1 to level 2\. Other transitions
    might include a ladder or stairs, a cave, or a balloon.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 平台游戏只包含一个关卡的情况很少见。设计过程中的一部分是预测如何让玩家从一个关卡过渡到下一个关卡。上面的例子展示了从关卡1到关卡2的简单流程。其他过渡可能包括梯子或楼梯、洞穴或气球。
- en: Creating game levels in Unity begins with the Scene Editor, a powerful tool
    for building and arranging game environments. Within the Scene Editor, you can
    place objects, set up lighting, and design the layout of each level. Start by
    importing your graphical assets and arranging them to create the desired environment.
    Use prefabs to manage reusable elements such as platforms, obstacles, and decorations,
    ensuring consistency and efficiency in your level design.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中创建游戏关卡始于场景编辑器，这是一个用于构建和排列游戏环境的强大工具。在场景编辑器中，你可以放置对象、设置照明并设计每个关卡的设计布局。首先导入你的图形资产并将它们排列以创建所需的环境。使用预制件来管理可重复使用的元素，如平台、障碍物和装饰，确保你在关卡设计中的一致性和效率。
- en: Placing objects and setting up level-specific mechanics involves more than just
    positioning assets. Consider the gameplay flow and how players will interact with
    the environment. Implement triggers, colliders, and scripts to create interactive
    elements, such as doors that open when a switch is activated or enemies that patrol
    a specific area. Unity’s Physics and NavMesh systems can be utilized to handle
    movement and collision detection, enhancing the realism and functionality of your
    levels.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 放置对象和设置关卡特定机制不仅涉及资产的位置。考虑游戏流程以及玩家如何与环境互动。实现触发器、碰撞体和脚本以创建交互元素，例如当开关被激活时打开的门或巡逻特定区域的敌人。可以利用Unity的物理和NavMesh系统来处理移动和碰撞检测，增强关卡的真实性和功能性。
- en: Scene management is essential for handling the loading and transitioning between
    levels. Unity’s `SceneManager` class allows you to load scenes asynchronously,
    providing smooth transitions without interrupting gameplay. Organize your levels
    within the Unity project by creating a clear folder structure, grouping related
    scenes together, and naming them descriptively. This organization not only simplifies
    navigation but also helps in managing dependencies and references between scenes.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 场景管理对于处理加载和关卡之间的过渡至关重要。Unity的`SceneManager`类允许你异步加载场景，提供平滑的过渡而不会打断游戏。在Unity项目中通过创建清晰的文件夹结构、将相关场景分组并赋予描述性名称来组织你的关卡。这种组织不仅简化了导航，还有助于管理场景之间的依赖和引用。
- en: To illustrate effective level design and scene organization, let’s examine a
    specific case study of a simple platformer game called *JumpQuest*. In *JumpQuest*,
    we begin by creating a main menu scene, followed by several levels with increasing
    difficulty.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明有效的关卡设计和场景组织，让我们考察一个名为*JumpQuest*的简单平台游戏的特定案例研究。在*JumpQuest*中，我们首先创建主菜单场景，然后创建几个难度逐渐增加的关卡。
- en: 'Here are the details of the JumpQuest case study:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是JumpQuest案例研究的详细情况：
- en: '**Main menu scene**: Start by designing a main menu that includes options to
    start the game, view instructions, and adjust settings. This scene sets the tone
    for the game and provides a hub for players to navigate.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主菜单场景**：首先设计一个包含开始游戏、查看说明和调整设置选项的主菜单。这个场景为游戏设定了基调，并为玩家提供了一个导航中心。'
- en: '**Level design**: Each level scene in *JumpQuest* contains platforms, collectibles,
    and enemies arranged to progressively challenge the player. For example, Level
    1 introduces basic jumping mechanics and simple enemies, while Level 2 adds moving
    platforms and more complex enemy behaviors.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关卡设计**：在 *JumpQuest* 的每个关卡场景中，都包含平台、可收集物品和敌人，它们被安排成逐渐挑战玩家的形式。例如，第1级引入了基本的跳跃机制和简单的敌人，而第2级则增加了移动平台和更复杂的敌人行为。'
- en: '**Consistency with prefabs**: Use prefabs to maintain consistency across levels.
    For instance, create prefabs for a standard platform, a collectible coin, and
    a basic enemy. This ensures that common elements behave identically in every level
    and can be easily updated.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与预制体的兼容性**：使用预制体来保持关卡之间的统一性。例如，为标准平台、可收集的硬币和基本敌人创建预制体。这确保了常见元素在每一级的表现一致，并且可以轻松更新。'
- en: '`SceneManager`. When the player reaches the end of a level, the `SceneManager`
    loads the next scene, providing a seamless gameplay experience. For example, when
    completing Level 1, the player is smoothly transitioned to Level 2.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`场景管理器`。当玩家到达关卡末尾时，`场景管理器`会加载下一个场景，提供无缝的游戏体验。例如，完成第1级后，玩家会平稳过渡到第2级。'
- en: By following the preceding structured approach in the *JumpQuest* case study,
    you can effectively design and organize game levels, ensuring a coherent and engaging
    player experience.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循 *JumpQuest* 案例研究中的先前结构化方法，您可以有效地设计和组织游戏关卡，确保玩家体验连贯且引人入胜。
- en: Creating and organizing game levels in Unity involves constructing environments
    with the Scene Editor, placing objects, and setting up level-specific mechanics.
    Efficient scene management ensures smooth transitions between levels, enhancing
    the overall player experience. While this section provides an overview, level
    design is a broad and complex field often requiring extensive training and teamwork.
    Next, we will discuss polishing and testing your game to ensure it meets the highest
    quality standards and delivers an enjoyable experience for players.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中创建和组织游戏关卡涉及使用场景编辑器构建环境、放置对象和设置关卡特定的机制。有效的场景管理确保了关卡之间的平滑过渡，提升了整体玩家体验。虽然本节提供了一个概述，但关卡设计是一个广泛且复杂的领域，通常需要大量的培训和团队合作。接下来，我们将讨论如何精炼和测试您的游戏，以确保它达到最高的质量标准，并为玩家提供愉快的体验。
- en: Polishing and testing
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 精炼和测试
- en: The final stage of game development is dedicated to polishing and testing, necessary
    for refining the game and enhancing the player experience. This section will delve
    into the iterative process of testing, bug fixing, and polishing game elements
    to ensure a high-quality final product. We will explore various testing techniques,
    such as playtesting and user testing, and discuss tools within Unity that can
    aid in this process, including the Unity Profiler for performance testing. The
    importance of feedback during the polishing phase will be highlighted, along with
    strategies for incorporating it to improve gameplay, controls, and the overall
    feel of the game. Specific focus will be given to implementing a basic UI, conducting
    thorough playtesting, and adding final touches such as particle effects and screen
    transitions to create a polished and enjoyable game experience.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发的最后阶段是精炼和测试，这对于完善游戏和提升玩家体验是必要的。本节将深入探讨测试、修复错误和精炼游戏元素的迭代过程，以确保最终产品的高质量。我们将探讨各种测试技术，如游戏测试和用户测试，并讨论Unity中可以帮助这一过程的工具，包括用于性能测试的Unity
    Profiler。在精炼阶段，将强调反馈的重要性，以及将反馈融入以改善游戏玩法、控制和游戏整体感觉的策略。将特别关注实现基本用户界面、进行彻底的游戏测试，以及添加最终细节，如粒子效果和屏幕过渡，以创造一个精炼且愉悦的游戏体验。
- en: Implementing testing strategies
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实施测试策略
- en: Effective testing strategies are vital to the game development process, ensuring
    that the game is functional, engaging, and free of critical issues. This section
    will provide an overview of various testing strategies, including unit testing,
    integration testing, and playtesting. We will discuss the roles and benefits of
    each type, with a particular focus on playtesting and user testing as important
    methods for gathering actionable feedback on the game experience. You will learn
    how to organize and conduct effective playtesting sessions, covering the selection
    of diverse player groups, preparation of testing environments, and collection
    of feedback.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的测试策略对于游戏开发过程至关重要，确保游戏功能正常、引人入胜且无重大问题。本节将概述各种测试策略，包括单元测试、集成测试和试玩测试。我们将讨论每种类型的作用和好处，特别关注试玩测试和用户测试作为收集关于游戏体验可操作反馈的重要方法。您将学习如何组织和进行有效的试玩测试，包括选择多样化的玩家群体、准备测试环境和收集反馈。
- en: In game development, different testing strategies serve to identify and resolve
    issues at various stages of production.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏开发中，不同的测试策略用于在生产的不同阶段识别和解决问题。
- en: Unit testing involves testing individual components or systems in isolation
    to ensure they function correctly. This form of testing is necessary for verifying
    that the building blocks of your game are stable and reliable.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试涉及在隔离状态下测试单个组件或系统，以确保它们正确运行。这种测试形式对于验证游戏的基本构建块是否稳定和可靠是必要的。
- en: 'The following is a sample unit test to illustrate the concept:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个示例单元测试，以说明这一概念：
- en: '[PRE4]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This unit test verifies that the game’s save and load functionality correctly
    preserves the player’s score.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这个单元测试验证了游戏保存和加载功能正确地保留了玩家的分数。
- en: Integration testing examines the interactions between different components,
    ensuring that they work together as intended. This step is crucial for identifying
    issues that may arise from the integration of multiple systems.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试检查不同组件之间的交互，确保它们按预期协同工作。这一步骤对于识别可能由多个系统的集成引起的问题至关重要。
- en: Playtesting and user testing are perhaps the most important methods for refining
    the game experience. Playtesting involves having players interact with the game
    to identify bugs, usability issues, and areas for improvement. This process can
    uncover issues that developers might overlook, providing valuable insights into
    how real players experience the game.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 试玩测试和用户测试可能是完善游戏体验最重要的方法。试玩测试涉及让玩家与游戏互动，以识别错误、可用性问题以及改进领域。这个过程可以发现开发者可能忽略的问题，为玩家如何体验游戏提供宝贵的见解。
- en: User testing extends this by focusing on specific aspects of the game, such
    as the UI or specific mechanics, to gather detailed feedback on their effectiveness
    and enjoyment.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 用户测试通过关注游戏的具体方面，如用户界面或特定机制，来收集关于其有效性和娱乐性的详细反馈。
- en: Organizing effective playtesting sessions requires careful planning. Begin by
    selecting a diverse group of players to ensure a wide range of perspectives. This
    group should include both experienced gamers and novices to provide a comprehensive
    view of the game’s accessibility and appeal. Prepare a testing environment that
    mimics real-world playing conditions as closely as possible, ensuring that the
    hardware and software configurations are representative of those used by your
    target audience.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 组织有效的试玩测试需要周密计划。首先，选择一个多样化的玩家群体，以确保广泛的视角。这个群体应包括经验丰富的游戏玩家和初学者，以提供对游戏可访问性和吸引力的全面看法。准备一个尽可能模拟真实世界游戏条件的测试环境，确保硬件和软件配置代表目标受众使用的配置。
- en: During the playtesting sessions, observe the players as they interact with the
    game, noting any issues they encounter and their overall reactions. Encourage
    players to verbalize their thoughts and feelings while playing, without intervening
    on your part, to gather unbiased feedback, as this can provide deeper insights
    into their experience. Collect feedback systematically, using surveys or interviews
    to gather detailed information about specific aspects of the game. This feedback
    is invaluable for identifying areas that need improvement and making informed
    decisions about changes.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在游玩测试会议期间，观察玩家如何与游戏互动，注意他们遇到的问题以及他们的整体反应。鼓励玩家在游玩时表达他们的想法和感受，而不要干预，以收集无偏见的反馈，因为这可以提供更深入的了解他们的体验。系统地收集反馈，使用调查或访谈来收集有关游戏特定方面的详细信息。这些反馈对于确定需要改进的领域和做出明智的变更决策至关重要。
- en: Implementing a variety of testing strategies, from unit and integration testing
    to comprehensive playtesting and user testing, is imperative for ensuring a polished
    and enjoyable game. By organizing effective playtesting sessions and gathering
    diverse feedback, developers can identify and address issues that impact the game
    experience. Next, we will explore how to utilize Unity tools for testing and debugging,
    enhancing the efficiency and effectiveness of your testing processes.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 实施各种测试策略，从单元测试和集成测试到全面的游玩测试和用户测试，对于确保游戏精致且令人愉悦至关重要。通过组织有效的游玩测试会议并收集多样化的反馈，开发者可以识别并解决影响游戏体验的问题。接下来，我们将探讨如何利用
    Unity 工具进行测试和调试，提高测试流程的效率和效果。
- en: Utilizing Unity tools for testing and debugging
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 利用 Unity 工具进行测试和调试
- en: Unity offers a robust suite of tools designed to facilitate efficient testing
    and debugging throughout the game development process. This section will dive
    into these tools and features, such as the Unity Profiler, Unity Test Framework,
    and the Console window, which are integral for tracking runtime errors and warnings.
    We will discuss how these tools can be utilized to identify and diagnose performance
    issues, bugs, and other problems within the game. Additionally, practical tips
    will be provided on how to use these tools effectively to streamline the testing
    and debugging process.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供了一套强大的工具集，旨在在整个游戏开发过程中促进高效的测试和调试。本节将深入探讨这些工具和功能，例如 Unity Profiler、Unity
    测试框架和控制台窗口，这些对于跟踪运行时错误和警告至关重要。我们将讨论如何利用这些工具来识别和诊断游戏中的性能问题、错误和其他问题。此外，还将提供一些实用技巧，介绍如何有效地使用这些工具来简化测试和调试过程。
- en: Unity provides several powerful tools to aid developers in testing and debugging
    their games.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供了多个强大的工具，以帮助开发者测试和调试他们的游戏。
- en: 'Let’s take a deeper look at the tools:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解这些工具：
- en: The Unity Profiler is a key tool for performance analysis, allowing developers
    to monitor various aspects of the game in real time. It provides detailed information
    on CPU and GPU usage, memory allocation, rendering, and more. By analyzing this
    data, developers can pinpoint performance bottlenecks and optimize their code
    and assets to ensure smooth gameplay.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity Profiler 是性能分析的关键工具，允许开发者实时监控游戏的各个方面。它提供了关于 CPU 和 GPU 使用、内存分配、渲染等方面的详细信息。通过分析这些数据，开发者可以确定性能瓶颈，并优化他们的代码和资源，以确保流畅的游戏体验。
- en: The Unity Test Framework is another invaluable tool that supports the creation
    of automated tests for your game. This framework enables developers to write and
    run unit tests and integration tests, ensuring that individual components and
    their interactions function as intended. Automated testing helps catch issues
    early in the development process, reducing the time and effort required for manual
    testing. Writing comprehensive test cases and regularly running them can significantly
    enhance the stability and reliability of the game.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 测试框架是另一个非常有价值的工具，它支持为您的游戏创建自动化测试。此框架允许开发者编写和运行单元测试和集成测试，确保各个组件及其交互按预期工作。自动化测试有助于在开发早期阶段捕捉问题，减少手动测试所需的时间和精力。编写全面的测试用例并定期运行它们可以显著提高游戏的可稳定性和可靠性。
- en: The Console window in Unity is an indispensable feature for tracking runtime
    errors and warnings. It provides real-time feedback on issues that occur during
    gameplay, displaying error messages, stack traces, and other relevant information.
    By monitoring the Console, developers can quickly identify and address bugs that
    impact the game’s functionality. Additionally, using the `Debug.Log`, `Debug.Warning`,
    and `Debug.Error` methods allows developers to output custom messages to the Console,
    aiding in the diagnosis of specific issues.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity中的控制台窗口是跟踪运行时错误和警告的不可或缺的功能。它提供了在游戏过程中出现的问题的实时反馈，显示错误消息、堆栈跟踪和其他相关信息。通过监控控制台，开发者可以快速识别并解决影响游戏功能的问题。此外，使用`Debug.Log`、`Debug.Warning`和`Debug.Error`方法允许开发者将自定义消息输出到控制台，有助于诊断特定问题。
- en: Utilizing Unity’s testing and debugging tools, such as the Profiler, Test Framework,
    and Console, is key for identifying and resolving performance issues, bugs, and
    other problems within the game. To make the most of these tools, it’s important
    to adopt efficient practices. Regularly profiling the game during development
    helps maintain optimal performance, while setting up automated tests ensures that
    new changes do not introduce regressions. Customizing the Console to filter specific
    types of messages can help developers focus on critical issues without being overwhelmed
    by less important warnings. Additionally, integrating these tools into the development
    workflow, such as using version control hooks to run tests automatically, can
    streamline the testing and debugging process, ensuring a polished and high-quality
    game. Next, we will explore how to incorporate feedback and polish the game, focusing
    on refining gameplay elements and enhancing the overall player experience.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 利用Unity的测试和调试工具，如Profiler、测试框架和控制台，对于识别和解决游戏中的性能问题、错误和其他问题至关重要。为了充分利用这些工具，采用高效的做法很重要。在开发过程中定期对游戏进行性能分析有助于保持最佳性能，而设置自动测试确保新更改不会引入回归。将控制台定制以过滤特定类型的消息可以帮助开发者专注于关键问题，而不会被不那么重要的警告所淹没。此外，将这些工具集成到开发工作流程中，例如使用版本控制钩子自动运行测试，可以简化测试和调试过程，确保游戏经过精心打磨且质量上乘。接下来，我们将探讨如何将反馈融入游戏并进行润色，重点关注改进游戏元素和提升整体玩家体验。
- en: Incorporating feedback and polishing the game
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将反馈融入游戏并对其进行润色
- en: The final steps of game development transform a good game into a great one.
    Incorporating feedback and polishing the game ensures it is engaging and enjoyable.
    This section covers the importance of feedback, how to analyze it, and the iterative
    process of refining gameplay mechanics, visuals, audio, and UI/UX. Feedback is
    crucial in game development. Gathering input from playtesters, beta testers, and
    the team provides insights into how the game is perceived and where improvements
    are needed. Analyzing feedback involves categorizing it by urgency, feasibility,
    and impact, allowing developers to prioritize adjustments.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏开发的最后步骤将一款好游戏转变为一款伟大的游戏。将反馈融入游戏并对其进行润色确保了游戏引人入胜且令人愉悦。本节涵盖了反馈的重要性、如何分析它以及改进游戏玩法机制、视觉效果、音效和UI/UX的迭代过程。反馈在游戏开发中至关重要。从测试玩家、公测玩家和团队那里收集意见可以提供关于游戏如何被感知以及需要改进之处的见解。分析反馈涉及按紧急性、可行性和影响对其进行分类，使开发者能够优先调整。
- en: Once feedback is analyzed, the polishing phase begins. This involves fine-tuning
    gameplay mechanics to ensure balance and fun, enhancing visuals for a cohesive
    aesthetic, and optimizing audio and UI/UX for an enjoyable experience. The iterative
    process of testing and refinement ensures continuous improvement until the final
    release. Incorporating feedback and polishing are vital steps in game development.
    By analyzing and prioritizing feedback, developers enhance gameplay, visuals,
    audio, and UI/UX, ensuring the game meets or exceeds player expectations.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦分析完反馈，润色阶段就开始了。这包括微调游戏玩法机制以确保平衡和乐趣，增强视觉效果以实现统一的美学，以及优化音效和UI/UX以提供愉悦的体验。测试和改进的迭代过程确保了直到最终发布前的持续改进。将反馈融入游戏并对其进行润色是游戏开发中的关键步骤。通过分析和优先处理反馈，开发者可以提升游戏玩法、视觉效果、音效和UI/UX，确保游戏达到或超过玩家的期望。
- en: Summary
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we embarked on the journey of building a complete game in Unity,
    starting from the initial concept to a playable prototype. We began with the foundational
    steps of conceptualizing and planning the game project, ensuring a solid groundwork
    for successful development. Moving forward, we delved into designing and implementing
    core game mechanics, which are essential for creating engaging and interactive
    gameplay experiences. The chapter also covered effective strategies for managing
    and integrating various game assets, including graphics, audio, and UI elements,
    to construct a cohesive and immersive game environment. We concluded by focusing
    on the imperative stages of polishing and testing the game, highlighting the importance
    of iterative development and thorough testing to enhance the player experience
    and ensure smooth gameplay. Through practical examples, such as developing a simple
    platformer game, and best practices, this chapter provided a comprehensive guide
    to creating a complete game in Unity. Next, we will explore the exciting possibilities
    of **Extended Reality** (**XR**) in Unity, delving into the creation of immersive
    experiences using cutting-edge technologies.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始了在Unity中构建完整游戏之旅，从最初的概念到可玩的原型。我们首先从构思和规划游戏项目的基础步骤开始，确保为成功开发打下坚实的基础。随后，我们深入设计和实现核心游戏机制，这对于创造引人入胜和互动的游戏体验至关重要。本章还涵盖了有效管理并整合各种游戏资产的有效策略，包括图形、音频和UI元素，以构建一个统一且沉浸式的游戏环境。我们通过聚焦于游戏抛光和测试的必要阶段，强调了迭代开发和彻底测试的重要性，以提升玩家体验并确保流畅的游戏体验。通过开发简单平台游戏等实际示例和最佳实践，本章为在Unity中创建完整游戏提供了全面的指南。接下来，我们将探索Unity中**扩展现实**（**XR**）的激动人心的可能性，深入探讨使用尖端技术创建沉浸式体验。
- en: Further reading
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Itch.io**: This hosts numerous free and paid assets and games from indie
    developers'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Itch.io**：这里托管了众多独立开发者提供的免费和付费资产和游戏'
- en: 'URL: [https://itch.io/](https://itch.io/)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URL: [https://itch.io/](https://itch.io/)'
- en: '**Kenney**: This offers a variety of free game assets, including sprites, tilesets,
    and 3D models'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Kenney**：这里提供了各种免费游戏资产，包括精灵、瓦片集和3D模型'
- en: 'URL: [https://www.kenney.nl/](https://www.kenney.nl/)'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URL: [https://www.kenney.nl/](https://www.kenney.nl/)'
- en: '**OpenGameArt**: This is a community-driven site providing free assets for
    various game genres'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**OpenGameArt**：这是一个由社区驱动的网站，为各种游戏类型提供免费资产'
- en: 'URL: [https://opengameart.org/](https://opengameart.org/)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URL: [https://opengameart.org/](https://opengameart.org/)'
- en: '**Unity Documentation**: Unity’s own official documentation'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity Documentation**：Unity的官方文档'
- en: 'URL: [https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/Manual/index.html)'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URL: [https://docs.unity3d.com/Manual/index.html](https://docs.unity3d.com/Manual/index.html)'
- en: '**Unity Learn**: Unity’s official training site'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unity Learn**：Unity的官方培训网站'
- en: 'URL: [https://learn.unity.com/](https://learn.unity.com/)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'URL: [https://learn.unity.com/](https://learn.unity.com/)'
