- en: AR for Marketing with EasyAR
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 EasyAR 进行 AR 营销
- en: This chapter will introduce you to EasyAR, an easy and intuitive AR SDK with
    multiple functionalities that can be used alone or, like in this chapter, integrated
    into Unity 3D. You will learn what image-based AR is and how it works with EasyAR by
    using your own images as markers. You will also learn how to import a custom 3D
    model into Unity to display it using AR over an image marker. Finally, you will
    create an augmented catalog where your furniture will come to life.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将向您介绍 EasyAR，这是一个易于使用且直观的 AR SDK，具有多种功能，可以单独使用，也可以像本章中那样集成到 Unity 3D 中。您将学习基于图像的
    AR 是什么以及它是如何通过使用您自己的图像作为标记符与 EasyAR 一起工作的。您还将学习如何将自定义 3D 模型导入 Unity，以便通过图像标记符使用
    AR 显示它。最后，您将创建一个增强型目录，您的家具将在此目录中栩栩如生。
- en: 'This chapter has two main goals: to learn EasyAR and its features and to understand
    the possibilities of AR as a marketing tool. Nowadays, EasyAR is, along with Vuforia,
    one of the most versatile AR SDKs that can be used for many purposes. By the end
    of this chapter, you will have the basic skills to continue improving the current
    project or create new and improved ones by exploring the rest of the functionalities EasyAR has
    to offer. As you will see, AR is a very powerful marketing tool for different
    purposes, such as impacting the user, presenting the product in a more visual
    and appealing way, and offering discounts and prizes that are integrated into
    the AR experience. The idea of this chapter is that, by the end of it, you will
    understand the basic use of AR in this field so that you can explore its possibilities
    afterward.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章有两个主要目标：学习 EasyAR 及其功能，并了解 AR 作为营销工具的可能性。如今，EasyAR 与 Vuforia 一样，是最多才多艺的 AR
    SDK 之一，可用于多种用途。在本章结束时，您将具备基本技能，以继续改进当前项目或通过探索 EasyAR 提供的其他功能来创建新的和改进的项目。正如您将看到的，AR
    是一种非常强大的营销工具，可用于多种目的，例如影响用户、以更视觉和吸引人的方式展示产品，以及提供与 AR 体验集成的折扣和奖品。本章的目的是，到本章结束时，您将了解该领域
    AR 的基本用法，以便之后可以探索其可能性。
- en: Important! In this chapter, we will be using Unity 3D, so if you haven't done
    it already, we recommend that you read [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml),
    *Introduction to Unity for AR Development*, first to familiarize yourself with
    its layout, nomenclature, and features.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 重要！在本章中，我们将使用 Unity 3D，因此如果您还没有这样做，我们建议您首先阅读[第 2 章](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml)，*Unity
    AR 开发入门*，以便熟悉其布局、命名约定和功能。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using AR for marketing
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AR 进行营销
- en: Understanding EasyAR
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 EasyAR
- en: Building image-based AR
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建基于图像的 AR
- en: Working with custom 3D models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义 3D 模型
- en: Creating an AR catalog
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 AR 目录
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The technical requirements for this chapter are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求如下：
- en: A Unity 3D-supporting computer (see the latest requirements here: [https://unity3d.com/es/unity/system-requirements](https://unity3d.com/es/unity/system-requirements)). This
    chapter's example project has been developed on a Windows 10 x 64 computer.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持 Unity 3D 的计算机（请在此处查看最新要求：[https://unity3d.com/es/unity/system-requirements](https://unity3d.com/es/unity/system-requirements)）。本章的示例项目是在
    Windows 10 x 64 计算机上开发的。
- en: Unity 3D (2019.1.2f1 in this book).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 3D（本书中为 2019.1.2f1）。
- en: Microsoft Visual Studio Community 2017 (included in the Unity installation).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Visual Studio Community 2017（包含在 Unity 安装中）。
- en: EasyAR SDK (3.0.1 in this book).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EasyAR SDK（本书中为 3.0.1）。
- en: A mobile device with Android 4.2 and above, or iOS 8.0 and above (EasyAR requirements: [https://www.easyar.com/doc/EasyAR%20SDK/Getting%20Started/3.0/Platform-Requirements.html](https://www.easyar.com/doc/EasyAR%20SDK/Getting%20Started/3.0/Platform-Requirements.html)). The
    project has been tested on a Samsung Galaxy A5 (2017) and a Pocophone F1.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭载 Android 4.2 或更高版本或 iOS 8.0 或更高版本的移动设备（EasyAR 要求：[https://www.easyar.com/doc/EasyAR%20SDK/Getting%20Started/3.0/Platform-Requirements.html](https://www.easyar.com/doc/EasyAR%20SDK/Getting%20Started/3.0/Platform-Requirements.html)）。项目已在三星
    Galaxy A5（2017）和 Pocophone F1 上进行过测试。
- en: The resources and code files for this chapter can be found here: [https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter05](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter05).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的资源和相关代码文件可以在此处找到：[https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter05](https://github.com/PacktPublishing/Enterprise-Augmented-Reality-Projects/tree/master/Chapter05).
- en: The project in this chapter has been tested using a Windows 10 PC, and a Samsung
    Galaxy A5 (2017) and Pocophone F1 Android devices. For iOS development, you will
    also need to develop using an Apple computer because Unity will build an Xcode
    project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的项目已经使用Windows 10 PC、三星Galaxy A5（2017）和Pocophone F1安卓设备进行了测试。对于iOS开发，你还需要使用苹果电脑进行开发，因为Unity将构建一个Xcode项目。
- en: Using AR for marketing
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用增强现实进行市场营销
- en: Marketing is one of the first fields where AR landed when it first began. The
    visual impact of this technology makes it very attractive to potential customers,
    and it can be used from generating a *wow effect* to explaining the qualities
    of the products.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 增强现实技术最初出现时，市场营销领域是它最先涉足的领域之一。这项技术的视觉冲击力使其对潜在客户极具吸引力，它可以从产生“哇”效果到解释产品的特性。
- en: 'When it began, AR was mainly used to impact users. A new technology, close
    to the concept of holography, that let us see ourselves and others surrounded
    by virtual elements and characters, was a good enticement. Big brands started
    using it in commercial centers where people could see themselves on a big screen
    next to virtual animals, dinosaurs, or famous characters. With mobile devices
    being widespread, AR marketing techniques have changed: the user is now in charge
    of the experience and can interact with it. Brands could now go beyond the *wow*
    effect and create functional experiences to promote and sell their products. Examples
    of this include augmented catalogs that show the products in 3D over their flat
    images, virtual mirrors where you can buy the glasses that you are trying on in
    AR, packages that come to life to explain the elements inside the fabrication
    process, and so on.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当增强现实技术刚开始时，它主要用于影响用户。一种接近全息术概念的新技术，让我们能够看到自己和他人被虚拟元素和角色所包围，这是一个很好的诱惑。大品牌开始在购物中心使用它，人们可以在大屏幕上看到自己和虚拟动物、恐龙或著名角色的形象。随着移动设备的普及，增强现实市场营销技术已经发生了变化：用户现在负责体验，可以与之互动。品牌现在可以超越“哇”效果，创造功能性体验来推广和销售他们的产品。这包括增强目录，在平面的图像上显示3D产品，虚拟镜子，你可以通过它购买在增强现实中所试戴的眼镜，以及能够解释制造过程中元素的包装等等。
- en: The main idea behind AR's marketing success is that it has to be meaningful
    and engaging to make sure that users will want to download the app and use it
    and, after the experience, they will remember your brand, will return to you,
    or will have purchased from you.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 增强现实在市场营销中取得成功的主要理念是它必须具有意义和吸引力，以确保用户会想要下载应用程序并使用它，并且在体验之后，他们会记住你的品牌，会回到你这里，或者会从你这里购买。
- en: In this chapter, we are going to use AR to create a furniture catalog where
    chairs will come to life from its pages. We will also give users the possibility
    to change these chairs' colors.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用增强现实（AR）技术来创建一个家具目录，椅子将从其页面中栩栩如生地呈现出来。我们还将为用户提供更改这些椅子颜色的可能性。
- en: When focusing on using mobile devices to view the catalog's pages, we want our
    potential customers to see the product from all its angles so that they can get
    a better idea of what they are buying and feel more attached to the product. The
    possibility of customizing certain aspects of the product, such as its color,
    in real-time can help spark an interest in it.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 当专注于使用移动设备查看目录页面时，我们希望我们的潜在客户能够从所有角度看到产品，以便他们能够更好地了解他们正在购买的产品，并对其产生更强的情感联系。在实时中定制产品的某些方面，如颜色，可以帮助激发对其的兴趣。
- en: For our project, we will be using the real catalog pages and 3D models from
    the company Euro Seating ([https://www.euroseating.com/en/](https://www.euroseating.com/en/)),
    a seating manufacturer that's present in more than 100 countries all over the
    world. Using their high-quality 3D models and real catalog will help us visualize
    this project as a real-life AR application that can be used in any other marketing
    context.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，我们将使用来自欧洲座椅公司（[https://www.euroseating.com/en/](https://www.euroseating.com/en/））的真实目录页面和3D模型，该公司在全球100多个国家设有业务。使用他们的高质量3D模型和真实目录将帮助我们把这个项目可视化，使其成为一个可以在任何其他市场营销环境中使用的真实生活增强现实应用。
- en: The models and images that will be used in this chapter have been released by
    the company for their use in the context of this book.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中将使用的模型和图像已由该公司发布，用于本书的上下文。
- en: Before we start working on this project, let's have a quick look at what EasyAR
    is and how to integrate it into Unity.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始这个项目之前，让我们快速了解一下EasyAR是什么以及如何将其集成到Unity中。
- en: Understanding EasyAR
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解EasyAR
- en: 'EasyAR is a multiplatform augmented reality SDK for Android, iOS, UWP, Windows,
    Mac, and Unity editor. An AR engine allows us to create AR solutions in an easy
    way and offers multiple AR features, including the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: EasyAR是一个支持Android、iOS、UWP、Windows、Mac和Unity编辑器的多平台增强现实SDK。一个AR引擎使我们能够以简单的方式创建AR解决方案，并提供多种AR功能，包括以下内容：
- en: '**Planar image tracking**: A technology that recognizes and tracks the position,
    rotation, and scale of a previously selected image in the real world, such as
    a book cover, photograph, or a business card.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平面图像跟踪**：一种识别和跟踪现实世界中先前选定的图像的位置、旋转和缩放的技术，例如书封面、照片或名片。'
- en: '**Surface tracking (SLAM)**: A technology to detect surfaces and keep track
    of the objects within it.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表面跟踪（SLAM）**：一种检测表面并跟踪其中对象的技术。'
- en: '**3D object tracking**: A technology to localize and track the position and
    orientation of real 3D objects instead of flat images.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**3D对象跟踪**：一种定位和跟踪真实3D对象的位置和方向的技术，而不是平面图像。'
- en: '**Screen recording**: A feature that allows us to take videos of the AR scene
    while we are playing it.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**屏幕录制**：一个功能，允许我们在播放AR场景时录制视频。'
- en: 'Some of the main features of EasyAR are as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: EasyAR的一些主要功能如下：
- en: It has an intuitive target management interface so that targets can be generated
    at runtime without us having to upload or download anything from their website,
    such as other tools.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有直观的目标管理界面，因此可以在运行时生成目标，而无需我们从其网站上上传或下载任何内容，例如其他工具。
- en: It supports both local and cloud recognition.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持本地和云端识别。
- en: It supports multitracking (simultaneous multiple target tracking) of different
    targets and the same targets.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持不同目标和相同目标的多目标跟踪。
- en: It supports 3D tracking to detect and track 3D objects with rich textures in
    real environments.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持3D跟踪，在真实环境中检测和跟踪具有丰富纹理的3D对象。
- en: 'EasyAR has a web-based platform through which users can register their projects
    and obtain the licenses that they need in order to test and release their applications.
    EasyAR SDK is available in two different kinds of editions:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: EasyAR有一个基于Web的平台，用户可以通过它注册他们的项目并获得他们测试和发布应用程序所需的许可证。EasyAR SDK有两种不同类型的版本：
- en: EasyAR SDK Basic is free for commercial use without any kind of limitations
    or watermarks. It offers AR capacities based on image targets, it can load and
    recognize up to 1,000 offline targets, and it supports multi-target tracking,
    surface recognition, transparent and streaming video playback, and QR recognition.
    We need to make it known that the app has been developed with EasyAR.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EasyAR SDK Basic免费用于商业用途，没有任何限制或水印。它基于图像目标提供AR能力，可以加载和识别多达1,000个离线目标，并支持多目标跟踪、表面识别、透明和流式视频播放以及二维码识别。我们需要明确指出，该应用程序是用EasyAR开发的。
- en: EasyAR SDK Pro includes all the features of the Basic edition, plus 3D object
    tracking, multi-type target detection, and screen recording. The Pro edition costs
    $499.00 per license key, but offers a free trial version with limited uses (up
    to 100 per day). A feature comparison, pricing, and payment details are listed
    on the EasyAR SDK product page [https://www.easyar.com/view/sdk.html](https://www.easyar.com/view/sdk.html).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EasyAR SDK Pro包括Basic版的所有功能，以及3D对象跟踪、多类型目标检测和屏幕录制。Pro版的价格为每个许可证密钥$499.00，但提供有限使用的免费试用版（每天最多100次）。功能比较、定价和付款详情列在EasyAR
    SDK产品页面[https://www.easyar.com/view/sdk.html](https://www.easyar.com/view/sdk.html)上。
- en: For our project, the functionalities from the basic license will be enough.
    Let's get started with EasyAR.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的项目，基本许可证的功能就足够了。让我们开始使用EasyAR吧。
- en: Before we start using EasyAR SDK, we need to integrate it into Unity (take a
    look at [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml), *Introduction
    to Unity for AR Development*, *Preparing your system for Unity* section to learn
    how to install and use Unity for the first time).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用EasyAR SDK之前，我们需要将其集成到Unity中（查看第2章[54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml]，*Unity
    AR开发简介*，*为Unity准备系统*部分，了解如何首次安装和使用Unity）。
- en: 'In order to download and import EasyAR SDK into Unity, follow these steps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了下载并将EasyAR SDK导入Unity，请按照以下步骤操作：
- en: Create an account by navigating to EasyAR's web page at [https://www.easyar.com/view/signUp.html](https://www.easyar.com/view/signUp.html).
    You will need to accept the developer agreement to create one.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问EasyAR的网页[https://www.easyar.com/view/signUp.html](https://www.easyar.com/view/signUp.html)创建账户。您需要接受开发者协议才能创建账户。
- en: After creating your account, you will receive a confirmation email so that you
    can activate it and log in.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建账户后，您将收到一封确认邮件，以便您激活并登录。
- en: Once you're logged in, go to the EasyAR download page ([https://www.easyar.com/view/download.html](https://www.easyar.com/view/download.html))
    and, in the right-hand column, in the Unity Packages section, select EasyARSense_3.0.1-final_Basic_Unity.zip to
    download it. This package contains the engine and the basic examples for the different
    uses of the tool. Unzip it to obtain the `.unitypackage` file.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录后，转到EasyAR下载页面（[https://www.easyar.com/view/download.html](https://www.easyar.com/view/download.html)），在右侧列的Unity
    Packages部分，选择EasyARSense_3.0.1-final_Basic_Unity.zip进行下载。此包包含引擎和不同用途的基本示例。解压以获取`.unitypackage`文件。
- en: 'Now, we can create the Unity project. Open the Unity Hub and, from the top
    bar, click on NEW:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建Unity项目。打开Unity Hub，从顶部栏点击新建：
- en: '![](img/546df083-c1ad-4a74-b857-0145b74ede9e.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/546df083-c1ad-4a74-b857-0145b74ede9e.png)'
- en: Opening Unity Hub to create a new project
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Unity Hub创建新项目
- en: 'Give the project a Name and a Location and click on CREATE:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给项目命名并指定位置，然后点击创建：
- en: '![](img/647581e8-eb46-4b3d-8151-3ac4e8bba705.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/647581e8-eb46-4b3d-8151-3ac4e8bba705.png)'
- en: Giving the project a name and location
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为项目命名和指定位置
- en: Once the project has been created, import the EasyAR package into Unity. To
    do so, once you've unzipped the compressed file, you can either double-click on
    the resultant `.unitypackage` file (the quickest way) or, from inside Unity, you
    can click on Assets|Import Package|Custom Package... and select the `.unitypackage`
    file.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 项目创建完成后，将EasyAR包导入Unity。为此，解压压缩文件后，您可以直接双击生成的`.unitypackage`文件（最快的方式），或者从Unity内部，您可以通过点击Assets|Import
    Package|Custom Package...并选择`.unitypackage`文件来完成。
- en: 'A new window will appear with all the files inside the EasyAR package. Click
    on Import:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新窗口将显示EasyAR包内的所有文件。点击导入：
- en: '![](img/f680ba2a-dbd5-40c1-893b-3b8b419a1ec3.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f680ba2a-dbd5-40c1-893b-3b8b419a1ec3.png)'
- en: Importing EasyAR SDK into Unity
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 将EasyAR SDK导入Unity
- en: 'As you will see, four new folders will appear on your Project window: EasyAR
    and Plugins, which include the main resources and code to build EasyAR for different
    platforms, and Samples and StreamingAssets, which contain the sample resources
    and code:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如您将看到的，四个新文件夹将出现在您的项目窗口中：EasyAR和Plugins，它们包括构建不同平台EasyAR所需的主要资源和代码，以及Samples和StreamingAssets，它们包含示例资源和代码：
- en: '![](img/8a9d3cba-5468-4922-9551-9a273418fd4c.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8a9d3cba-5468-4922-9551-9a273418fd4c.png)'
- en: Four new folders have been added to the project
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 项目中已添加四个新文件夹
- en: At this point, we have a new clean project with the EasyAR engine and samples
    included. In the next section, we will learn how to use it to build an app that
    detects a real image and displays a virtual cube on it.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个包含EasyAR引擎和示例的新项目。在下一节中，我们将学习如何使用它来构建一个检测真实图像并在其上显示虚拟立方体的应用。
- en: Building image-based AR
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建基于图像的AR
- en: You can build AR using different techniques; the most common one is image-based
    AR, which consists of tracking a previously selected image (target) and superposing
    the virtual content to it while taking into account the image's position, rotation,
    and size. This kind of tracking requires the use of different algorithms that
    differentiate images one from another through characteristic points of the design,
    and position the image in three dimensions on the camera feed. Don't worry—EasyAR
    will do this work for you. All you will need to do is decide which images will
    act as the targets and what virtual content will go on top of them.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用不同的技术构建AR；最常见的一种是基于图像的AR，它包括跟踪之前选定的图像（目标）并在其上叠加虚拟内容，同时考虑图像的位置、旋转和大小。这种跟踪需要使用不同的算法，这些算法通过设计的特征点区分图像，并将图像在相机流中定位到三维空间。别担心——EasyAR会为您完成这项工作。您需要做的只是决定哪些图像将作为目标，以及哪些虚拟内容将叠加在其上。
- en: 'To create this project, we will use EasyAR''s ImageTarget sample project as
    a reference since it already has all the components we need for our app. But before
    we start with the AR elements, we will set up our project folders:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这个项目，我们将使用EasyAR的ImageTarget示例项目作为参考，因为它已经包含了我们应用所需的所有组件。但在开始AR元素之前，我们将设置我们的项目文件夹：
- en: 'The first thing we are going to do is create our personal `Assets` folder,
    `@MyAssets`, to differentiate it from the rest of the assets we''ve imported into Unity.
    Here, we will add all the external resources, such as marker images and 3D models.
    For that, right-click on the Project window and select Create|Folder. Name it
    `@MyAssets`:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将要做的第一件事是创建我们的个人`资产`文件夹，`@MyAssets`，以区分我们导入到Unity中的其他资产。在这里，我们将添加所有外部资源，例如标记图像和3D模型。为此，在项目窗口上右键单击并选择创建|文件夹。将其命名为`@MyAssets`：
- en: '![](img/7ebc128e-cb27-40e2-be32-afff6c5c28f5.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ebc128e-cb27-40e2-be32-afff6c5c28f5.png)'
- en: Create a new folder under the main Assets folder and call it @MyAssets
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在主Assets文件夹下创建一个新的文件夹，并命名为`@MyAssets`
- en: 'Inside this, create three other folders called `Images`, `Models`, and `Scripts`:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此内部创建三个其他文件夹，分别命名为`Images`、`Models`和`Scripts`：
- en: '![](img/684d9859-15d8-4541-9820-b68a13f362d8.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/684d9859-15d8-4541-9820-b68a13f362d8.png)'
- en: '@MyAssets folder with the three folders inside it'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 包含三个文件夹的@MyAssets文件夹
- en: 'Note: This project currently has six folders under the `Assets` folder. As
    you can see, projects tend to increase in size quickly and before we realize it,
    our resources are lost in the chaos of folders and files. Taking a couple of minutes
    to create a basic structure for our project folders is always good practice.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：此项目目前在`Assets`文件夹下有六个文件夹。正如你所见，项目往往会迅速增长，在我们意识到之前，我们的资源就迷失在文件夹和文件的混乱之中。花几分钟时间为我们的项目文件夹创建一个基本结构总是一个好的做法。
- en: 'Now, we can create our AR scene. As we mentioned earlier, we will use EasyAR''s
    sample scene as a reference. To do that, from the Project window, double-click
    on the HelloAR_ImageTarget scene located at Assets|Samples|Scenes to open it:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建我们的AR场景。正如我们之前提到的，我们将使用EasyAR的示例场景作为参考。为此，从项目窗口中，双击位于Assets|Samples|Scenes的HelloAR_ImageTarget场景以打开它：
- en: '![](img/2e6487aa-aac0-408f-994b-050f7267160a.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2e6487aa-aac0-408f-994b-050f7267160a.png)'
- en: The HelloAR_ImageTarget sample scene
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: HelloAR_ImageTarget示例场景
- en: Here, we have all the elements we need to replicate our own AR project.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有我们复制自己的AR项目所需的所有元素。
- en: 'Now, click on File|Save As... and save the scene inside the Assets|Scenes folder
    with the name `ARScene`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击File|Save As...并将场景保存到Assets|Scenes文件夹中，命名为`ARScene`：
- en: '![](img/6b673900-3aac-4055-a0f7-94c165d30f8b.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b673900-3aac-4055-a0f7-94c165d30f8b.png)'
- en: Saving the scene with another name
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以另一个名称保存场景
- en: By doing this, we've created a duplicate of the sample scene. If anything happens
    to our scene, we can always go back to the original one.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们已经创建了示例场景的副本。如果我们的场景发生任何问题，我们总是可以回到原始版本。
- en: Now that we have the initial scene, we can take a look at each component and
    customize them for our needs.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了初始场景，我们可以查看每个组件并根据我们的需求进行定制。
- en: Understanding our AR scene
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解我们的AR场景
- en: 'An AR scene has two main components that are common to any image-based AR SDK:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一个AR场景有两个主要组件，这些组件是任何基于图像的AR SDK共有的：
- en: '**The ARCamera**: The camera object that will receive the feed from the camera
    device and process those frames in search of the selected image (target).'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AR相机**：将接收来自相机设备的输入并处理这些帧以搜索所选图像（目标）的相机对象。'
- en: '**The ImageTarget**: The representation of the real image where we will put
    the virtual elements. When the camera finds this ImageTarget in the real world,
    it shows the virtual elements attached to it.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像目标**：我们将虚拟元素放置其上的真实图像的表示。当相机在真实世界中找到此图像目标时，它将显示附加到其上的虚拟元素。'
- en: 'In EasyAR, we have three main elements (apart from the Directional Light):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在EasyAR中，我们有三个主要元素（除了方向光之外）：
- en: The Main Camera, which is the element that will render the image coming from
    our mobile device.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主相机，它是将渲染来自我们移动设备的图像的元素。
- en: 'EasyAR_Setup, which is in charge of the main operations of the app, such as
    initializing and handling the EasyAR engine, attaching the physical camera device
    to the Main Camera element of the scene, or implementing the image target detection
    and tracking through the ImageTracker:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EasyAR_Setup，它负责应用的主要操作，例如初始化和操作EasyAR引擎，将物理相机设备附加到场景中的主相机元素，或通过ImageTracker实现图像目标检测和跟踪：
- en: '![](img/edc5513f-49fb-456d-8600-6a001f9df4e5.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/edc5513f-49fb-456d-8600-6a001f9df4e5.png)'
- en: The EasyAR_Setup element and its elements
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: EasyAR_Setup元素及其元素
- en: 'ImageTarget, which is the representation of the image we want to recognize.
    It contains the virtual elements that will appear and disappear when the image
    is detected/lost in the real world. In this case, the ImageTarget already comes
    with two children: a Quad, which represents the image we will track, and a Cube,
    which we will use to initially test the scene. The values of the image to recognize
    appear in the Inspector window in the Image Target Controller, as shown in the
    following screenshot:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ImageTarget，这是我们想要识别的图片的表示。它包含在真实世界中检测到或丢失时出现的虚拟元素。在这种情况下，ImageTarget已经包含两个子项：一个Quad，代表我们将要追踪的图片，和一个Cube，我们将用它来最初测试场景。要识别的图片的值在Image
    Target Controller的检查器窗口中显示，如下面的截图所示：
- en: '![](img/fb508f0f-c89e-4172-9f69-fb16572479cd.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb508f0f-c89e-4172-9f69-fb16572479cd.png)'
- en: ImageTarget with its children on the left and the component values on the right
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 带有子项在左侧和组件值在右侧的ImageTarget
- en: 'The parameters in the Image Target Controller are as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Image Target Controller中的参数如下：
- en: 'Target Name: The target''s name. This doesn''t have to be the image''s name.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标名称：目标的名称。这不必是图片的名称。
- en: Target Path: This is the full path to the image we want to use as a target.
    It's directly related to the Type option.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标路径：这是我们想要用作目标的图片的完整路径。它与`类型`选项直接相关。
- en: 'Target Size: Size of the target. We will usually leave it at `1`.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标大小：目标的大小。我们通常会将其设置为`1`。
- en: 'Type: Whether the image of the target will be stored inside the assets of the
    project (specifically, the `StreamingAssets` folder, which we already have in
    our Project window) or if the Target Path is absolute.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型：目标图片是否存储在项目的资源中（具体来说，是我们在项目窗口中已有的`StreamingAssets`文件夹）或者目标路径是否为绝对路径。
- en: 'Image Tracker: This is the ImageTracker that will search for this ImageTarget
    in the camera feed.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图像追踪器：这是将在相机流中搜索此ImageTarget的ImageTracker。
- en: 'Target Type: Here, we will be using the first option, Local Image, since our
    image will be included locally inside the project.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标类型：在这里，我们将使用第一个选项，本地图片，因为我们的图片将包含在项目内部。
- en: Now that we have seen the main elements of the scene, the next thing we need
    to do is create our own target.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了场景的主要元素，接下来我们需要做的是创建我们自己的目标。
- en: Preparing the target
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备目标
- en: 'Let''s create our target. We''ll start by adding the necessary images and resources
    to our project. Follow these steps to do so:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的目标。我们首先需要将必要的图片和资源添加到我们的项目中。按照以下步骤进行操作：
- en: 'Drag the `Target_Maia.jpg` image located in the `Images` folder from the project
    resources provided to the `StreamingAssets` folder, and the `Target_Maia_texture.jpg` image to
    our`@MyAssets/Images` folder, as shown in the following screenshot:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将位于`Images`文件夹中的`Target_Maia.jpg`图片从项目资源拖到`StreamingAssets`文件夹，并将`Target_Maia_texture.jpg`图片拖到我们的`@MyAssets/Images`文件夹，如下面的截图所示：
- en: '![](img/5346fd8d-a2d6-487d-a10e-1e00c026d635.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5346fd8d-a2d6-487d-a10e-1e00c026d635.png)'
- en: Target_Maia.jpg and Target_Maia_texture.jpg images in their respective folders
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 分别在各自文件夹中的`Target_Maia.jpg`和`Target_Maia_texture.jpg`图片
- en: The first image will be our target. We will use the second image, which is smaller
    than the first one, to guide us on the target's size in the editor.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 第一张图片将是我们的目标。我们将使用第二张图片，它比第一张小，来在编辑器中指导目标的大小。
- en: We can't reuse the image from the `StreamingAssets` folder because the files
    in this folder are not processed by the Unity editor, so they can't be used inside
    the scene directly like regular files.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不能重复使用`StreamingAssets`文件夹中的图片，因为该文件夹中的文件不会被Unity编辑器处理，因此不能像常规文件一样直接在场景中使用。
- en: 'In the Hierarchy window, select the ImageTarget and change the Name and Path
    values in the Inspector window, as shown in the following screenshot:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构窗口中，选择ImageTarget并在检查器窗口中更改名称和路径值，如下面的截图所示：
- en: '![](img/1181f49f-436f-4c7f-86e5-2ed936290923.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1181f49f-436f-4c7f-86e5-2ed936290923.png)'
- en: Image Target Behaviour parameters
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: Image Target 行为参数
- en: With these parameters, we are telling ImageTracker to find the target called `Target_Maia.jpg` inside
    the streaming assets of the project.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些参数，我们告诉ImageTracker在项目的流媒体资源中寻找名为`Target_Maia.jpg`的目标。
- en: 'Note: You can use the folders inside the `StreamingAssets` folder to organize
    your targets. In that case, you will have to add the folder to the Target Path
    property (for example, `MyFolder/Target_Maia.jpg`).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：您可以使用`StreamingAssets`文件夹内的文件夹来组织您的目标。在这种情况下，您需要将文件夹添加到目标路径属性中（例如，`MyFolder/Target_Maia.jpg`）。
- en: 'The ImageTarget doesn''t have an image associated with it, meaning that we
    can''t actually see it in the editor. To visualize how our target will look, and
    especially to see how the virtual content will look over the real image (size,
    position), we will use the Quad element we already have as a child of the ImageTarget.
    By the end of the project, when we no longer need it, we will delete this Quad
    element. Drag the `@MyAssets/Images/Target_Maia_texture` image from the Project
    window to the Quad to make it its texture:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ImageTarget没有与之关联的图片，这意味着我们实际上在编辑器中看不到它。为了可视化我们的目标将看起来如何，特别是为了看到虚拟内容将如何覆盖真实图像（大小、位置），我们将使用ImageTarget的子对象中已有的四边形元素。在项目结束时，当我们不再需要它时，我们将删除这个四边形元素。将`@MyAssets/Images/Target_Maia_texture` 图片从项目窗口拖到四边形上，使其成为其纹理：
- en: '![](img/d3edb798-81ec-4c2d-bdd3-fd881800b87c.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d3edb798-81ec-4c2d-bdd3-fd881800b87c.png)'
- en: Target_Maia_texture being dragged to the Quad
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 将Target_Maia_texture拖动到四边形
- en: 'Now, we have to adjust the aspect ratio of the Quad so that it matches our
    image''s aspect ratio. We''ll do that by setting the Y scale to `0.7`, as shown
    in the following screenshot:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们必须调整四边形的纵横比，使其与我们的图像的纵横比相匹配。我们将通过将Y缩放设置为`0.7`来实现这一点，如下面的截图所示：
- en: '![](img/23f61534-7e0a-43e2-87d9-89a84944fa1e.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/23f61534-7e0a-43e2-87d9-89a84944fa1e.png)'
- en: The Quad's Transform component and its values
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 四边形的变换组件及其值
- en: Our scene is ready. We have the Main Camera, the EasyAR_Setup, our ImageTarget has
    the path to the image we want to recognize in it, and the Quad and a Cube are
    children so that they will appear when the marker is recognized. The next thing
    we need to do is get the EasyAR key to test the scene.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的场景已经准备好了。我们有了主相机、EasyAR_Setup，我们的ImageTarget 中包含了我们要识别的图片的路径，以及四边形和立方体 作为子对象，这样当标记被识别时它们就会显示出来。接下来我们需要做的是获取EasyAR密钥来测试场景。
- en: Obtaining the key
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取密钥
- en: 'To test the current scene, we need to add the key to the EasyAR GameObject.
    This key is generated by EasyAR to license the app:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试当前场景，我们需要将密钥添加到EasyAR GameObject中。这个密钥由EasyAR生成以许可应用程序：
- en: Go to the EasyAR develop center ([https://www.easyar.com/view/developCenter.html#license](https://www.easyar.com/view/developCenter.html#license)),
    log in if you aren't already, and click on Add SDK License Key.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往EasyAR开发中心([https://www.easyar.com/view/developCenter.html#license](https://www.easyar.com/view/developCenter.html#license))，如果你还没有登录，请登录，然后点击添加SDK许可证密钥。
- en: 'There, select EasyAR SDK Basic and provide the following details:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在那里，选择EasyAR SDK Basic，并填写以下详细信息：
- en: 'App Name: `AR Catalogue`'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '应用程序名称: `AR Catalogue`'
- en: 'Bundle ID (iOS): `com.banana.arcatalogue` (you only need to fill this in if
    you are going to build your app on iOS)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '包标识符（iOS）: `com.banana.arcatalogue` （如果你打算在iOS上构建你的应用程序，则需要填写此信息）'
- en: 'Package Name (Android): `com.banana.arcatalogue` (you only need to fill this
    in if you are going to build your app on Android)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '包名（Android）: `com.banana.arcatalogue` （如果你打算在Android上构建你的应用程序，则需要填写此信息）'
- en: These names correspond to the app name and bundles (*com.companyname.productname*)
    in Unity.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些名称对应于Unity中的应用程序名称和包（*com.companyname.productname*）。
- en: If you want to change these names in the future, you will have to make sure
    to change them in the key generation panel and copy/paste the resulting key into
    Unity again.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将来想要更改这些名称，你将必须确保在密钥生成面板中更改它们，并将生成的密钥复制/粘贴回Unity中。
- en: 'Select the created key in the panel and copy the SDK License Key (valid for EasyAR
    SDK 3.x) into the Easy AR Key element located in Assets|EasyAR|Common|Resources:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在面板中选择创建的密钥，并将SDK许可证密钥（适用于EasyAR SDK 3.x）复制到位于Assets|EasyAR|Common|Resources的Easy
    AR Key元素中：
- en: '![](img/02201c86-3071-426a-8a91-bb036b0df763.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/02201c86-3071-426a-8a91-bb036b0df763.png)'
- en: EasyARKey settings script
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: EasyARKey设置脚本
- en: Once we have the key, we are ready to test the scene.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了密钥，我们就可以测试场景了。
- en: Testing the scene
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试场景
- en: 'Now, let''s test the scene: press *Ctrl* + *S* to save everything again, make
    sure you have a webcam connected to your computer and hit the play button at the
    top of the Toolbar. The system should launch the webcam automatically. If you
    point at the marker (either printed or displayed in the screen), you should see
    the quad in the background and the cube popping from it in the Game view:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试场景：按*Ctrl* + *S* 保存所有内容，确保你的电脑连接了摄像头，然后在工具栏顶部点击播放按钮。系统应该会自动启动摄像头。如果你指向标记（无论是打印的还是显示在屏幕上的），你应该在游戏视图中看到背景中的四边形和从它弹出的立方体：
- en: To view the scene in full-screen mode, you can press Maximize on Play in the
    top right of the Game view before pressing play.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要以全屏模式查看场景，你可以在按下播放按钮之前，在游戏视图的右上角点击最大化。
- en: '![](img/4889b53e-6ea7-4868-9637-b753ac862afb.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4889b53e-6ea7-4868-9637-b753ac862afb.png)'
- en: The Game window maximized, showing the cube appearing in AR over the target
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏窗口最大化，显示在目标上出现的立方体
- en: Hit the play button again to stop the simulation.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 再次点击播放按钮以停止模拟。
- en: '**Important!** Remember that to hit the play button to stop the simulation
    or any changes that are made in the scene afterward while you''re still in simulation
    mode won''t be saved.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要！** 请记住，在模拟模式下，要停止模拟或对场景所做的任何更改，点击播放按钮后都不会被保存。'
- en: Troubleshooting
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 故障排除
- en: If you can't see the AR scene correctly, you can go to the Console tab (it's
    in the bottom bar or the tab next to the Game view) and look at the information
    there.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看不到AR场景，你可以转到“控制台”选项卡（它在底部栏或“游戏”视图旁边的标签上）并查看那里的信息。
- en: 'If everything worked correctly, it should show only information messages, namely
    the successful initialization of EasyAR, its version, and so on. However, if there
    is an error message of 404 Not Found, this means that the target has not been
    set up properly. Please review all the steps, especially the Path parameter in
    the ImageTarget to make sure it''s pointing to the correct file. In the following
    screenshot, the target name is `Target_Maia2.jpg` instead of `Target_Maia.jpg`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正常，它应该只显示信息消息，即EasyAR成功初始化、其版本等信息。然而，如果出现404未找到的错误消息，这意味着目标没有正确设置。请检查所有步骤，特别是ImageTarget中的Path参数，确保它指向正确的文件。在以下屏幕截图中，目标名称是`Target_Maia2.jpg`而不是`Target_Maia.jpg`：
- en: '![](img/45350b9c-c471-4d95-bf2d-7a2937ba699f.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/45350b9c-c471-4d95-bf2d-7a2937ba699f.png)'
- en: The console showing common information messages and an error
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 显示常见信息消息和错误的控制台
- en: In any case, you can try to troubleshoot the errors either in the Unity forums
    ([https://forum.unity.com/](https://forum.unity.com/)) or in the EasyAR forums
    ([https://forum-test.easyar.com/](https://forum-test.easyar.com/)).
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何情况下，你都可以尝试在Unity论坛([https://forum.unity.com/](https://forum.unity.com/))或EasyAR论坛([https://forum-test.easyar.com/](https://forum-test.easyar.com/))中调试错误。
- en: This step of testing the scene is not necessary, although it's highly recommended.
    Building an app into a device takes time, so it's advisable to test it first and
    make sure it works as you want it to.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 测试场景的这一步不是必需的，尽管强烈推荐。将应用构建到设备上需要时间，因此建议先测试它，确保它按预期工作。
- en: Now, let's build the app.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们构建这个应用。
- en: Building the app
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建应用
- en: 'To build a new Android app, there are some steps you will always have to follow:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建新的安卓应用，有一些步骤你始终必须遵循：
- en: The first thing you need to do is select the platform. For that, click on File|Build
    Settings.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你需要做的第一件事是选择平台。为此，点击文件|构建设置。
- en: Click on Add Open Scenes to add our current scene to the (empty) list of scenes
    that will be built in the app.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“添加打开场景”将我们的当前场景添加到（空）将要构建到应用中的场景列表中。
- en: 'Under Platform, select Android and click on Switch Platform. Wait until Unity
    recompiles the resources for the selected platform:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在“平台”下，选择Android并点击“切换平台”。等待Unity为所选平台重新编译资源： '
- en: '![](img/00344579-73e2-4330-ab0d-bc617b599db0.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00344579-73e2-4330-ab0d-bc617b599db0.png)'
- en: The Build Settings window with the current scene added and the Android platform
    selected
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 包含当前场景和已选择Android平台的“构建设置”窗口
- en: 'Then, click on Player Settings... to configure the app settings. In the pop-up
    window, we are going to change a few things for the time being:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击“玩家设置...”以配置应用设置。在弹出的窗口中，我们暂时会更改一些设置：
- en: 'Company Name: `Banana`'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '公司名称: `Banana`'
- en: 'Product Name: `AR Catalogue`'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '产品名称: `AR 目录`'
- en: These names are the same ones we used in the generation of the EasyAR key code.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这些名称与我们用于生成EasyAR密钥代码时使用的名称相同。
- en: 'The following image shows the Project Settings window with the newly added
    Company Name and Product Name fields:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了包含新添加的公司名称和产品名称字段的“项目设置”窗口：
- en: '![](img/d4378309-a5cd-40c0-8221-6f819e827595.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d4378309-a5cd-40c0-8221-6f819e827595.png)'
- en: Filling in the company and product names in Project Settings
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目设置中填写公司和产品名称
- en: 'Then, on Other Settings|Identification, set the following:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在“其他设置|识别”中，设置以下内容：
- en: 'Package name: `com.banana.arcatalogue` (make sure it matches the name from
    the EasyAR key generation, otherwise the app will launch an error on its initialization
    saying the package name doesn''t match the key)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '包名: `com.banana.arcatalogue`（确保它与EasyAR密钥生成中的名称匹配，否则应用在初始化时会报错，说包名不匹配密钥）'
- en: 'Version: `1.0`'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '版本: `1.0`'
- en: 'Minimum API Level: `Android 5.0 ''Lollipop'' (API level 21)`'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '最小API级别: `Android 5.0 ''Lollipop'' (API level 21)`'
- en: 'Target API Level: `Automatic (highest installed):`'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '目标 API 级别: `自动（最高已安装）:`'
- en: According to EasyAR's documentation, the SDK is compatible with Android 4.2
    and above, but for performance reasons, and in order to have a fluid AR experience
    on users' devices, we recommend setting the minimum API level to 5.0.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 EasyAR 的文档，SDK 与 Android 4.2 及以上版本兼容，但出于性能原因，并且为了在用户设备上获得流畅的 AR 体验，我们建议将最低
    API 级别设置为 5.0。
- en: '![](img/50277197-413b-4e50-a372-2fa284426ea4.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/50277197-413b-4e50-a372-2fa284426ea4.png)'
- en: Identification section inside the Other Settings tab
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 其他设置选项卡内的识别部分
- en: 'In case you have Android SDK installed outside Unity, before opening the Player
    Settings, Unity will most likely tell you it found an Android SDK and whether
    you want to use it. If that''s the case, click Yes:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在 Unity 外部安装了 Android SDK，在打开 Player Settings 之前，Unity 很可能告诉您它找到了 Android
    SDK，并询问您是否想使用它。如果是这种情况，请点击 是：
- en: '![](img/70cf358f-00ee-43b5-a7c6-f1646b4cf6d1.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70cf358f-00ee-43b5-a7c6-f1646b4cf6d1.png)'
- en: Using the installed SDK if we already have it installed
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们已经安装了 SDK，则使用已安装的 SDK
- en: 'Close the Player Settings window, connect your mobile device to the computer
    with a USB cable, and make sure your device has USB debugging activated in order
    to deploy the app directly into it from Unity. To activate this option, the general
    steps are as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭 Player Settings 窗口，使用 USB 线缆将您的移动设备连接到计算机，并确保您的设备已激活 USB 调试，以便可以直接从 Unity
    将应用程序部署到其中。要激活此选项，一般步骤如下：
- en: Enable Developer Mode by going to Settings|About Device.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过转到设置|关于设备启用开发者模式。
- en: Then, tap seven times on the build number until a notification appears stating
    that the Developer Options are available.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，连续点击七次构建号，直到出现一个通知，表明开发者选项可用。
- en: Go to the Developer Options and activate USB Debugging to allow the computer
    to install and start the app on it.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前往开发者选项并激活 USB 调试，以允许计算机安装并启动应用程序。
- en: '**Important!** As we mentioned earlier, these steps are general. If you have
    any doubts, please try to find the specific case for your device as the names
    of the options may vary from one manufacturer to another.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**重要！** 如我们之前提到的，这些步骤是通用的。如果您有任何疑问，请尝试找到您设备的特定情况，因为选项的名称可能因制造商而异。'
- en: Now, click on Build And Run in the Build Settings window, call your APK `arcatalogue.apk`,
    and hit Save. Unity will immediately start the compilation by looking for the
    Android SDK *(*if it doesn't detect it, it will ask you to select the folder where
    it's installed*)* and searching for a suitable device (if the device isn't plugged
    in correctly or USB Debugging isn't activated, it will tell you it can't find
    the device). Then, it will start the building process until it copies the APK
    into the device and launches it.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现在，在 Build Settings 窗口中点击 Build And Run，将您的 APK 命名为 `arcatalogue.apk`，然后点击保存。Unity
    将立即开始编译，寻找 Android SDK (*如果它没有检测到，它将要求您选择其安装的文件夹*)* 并搜索合适的设备（如果设备没有正确连接或未激活 USB
    调试，它将告诉您找不到设备）。然后，它将开始构建过程，直到将 APK 复制到设备并启动它。
- en: 'Once the app has launched, point the camera to the target in order to see the
    cube:'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦应用启动，将摄像头指向目标，以便看到立方体：
- en: '![](img/ca8a9d00-c772-4f0c-a530-61f0701208fa.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ca8a9d00-c772-4f0c-a530-61f0701208fa.png)'
- en: Screenshot of the cube over the target on a mobile device
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 移动设备上目标上的立方体截图
- en: If for any reason, you don't want/can't build the APK into the mobile device,
    you can use Build instead of Build And Run to create the APK without installing
    it.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果由于任何原因，您不想/不能将 APK 建立到移动设备中，您可以使用 Build 而不是 Build And Run 来创建 APK 而不安装它。
- en: When the compilation process finishes, you will have to manually copy the resulting
    APK into your device and install it.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 当编译过程完成后，您将需要手动将生成的 APK 复制到您的设备并安装它。
- en: 'Note: This process is for Android devices only. To compile the app on an iOS
    device, you have to build and run the Unity project from an Apple computer and,
    when the building process finishes, it will automatically launch Xcode where the
    building will end up (you will have to assign your Apple ID in order to play the
    app on an iOS device, just like you need to with any other iOS app developed in
    Xcode).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：此过程仅适用于 Android 设备。要在 iOS 设备上编译应用程序，您必须从 Apple 计算机上构建和运行 Unity 项目，当构建过程完成后，它将自动启动
    Xcode，构建过程将在其中结束（您将需要分配您的 Apple ID 才能在 iOS 设备上播放应用程序，就像您需要使用任何其他在 Xcode 中开发的 iOS
    应用程序一样）。
- en: In this section, you have learned how to use EasyAR to detect an image and display
    a virtual cube on it. Now, we will substitute the test cube for an external 3D
    model we will import into our project.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何使用 EasyAR 检测图像并在其上显示虚拟立方体。现在，我们将用我们将导入到项目中的外部 3D 模型替换测试立方体。
- en: Working with custom 3D models
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用自定义 3D 模型
- en: In the previous section, we learned how to create a simple AR app with EasyAR
    to display a cube. In this section, we are going to import our own 3D model into
    Unity to visualize over the target and play with its materials and textures.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了如何使用 EasyAR 创建一个简单的 AR 应用来显示立方体。在本节中，我们将将自己的 3D 模型导入到 Unity 中，以便在目标上可视化并玩弄其材质和纹理。
- en: For this project, we are going to work with `fbx`, an exported format that allows
    us to include materials, textures, and animations. To see a list of all the exported
    and native 3D formats Unity accepts, please visit [https://docs.unity3d.com/Manual/3D-formats.html](https://docs.unity3d.com/Manual/3D-formats.html).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个项目，我们将使用`fbx`，这是一种允许我们包含材质、纹理和动画的导出格式。要查看 Unity 接受的所有导出和本地 3D 格式的列表，请访问[https://docs.unity3d.com/Manual/3D-formats.html](https://docs.unity3d.com/Manual/3D-formats.html)。
- en: 'Before including the models in our project, we will make a few changes to our
    scene to improve it:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 在将模型包含到我们的项目中之前，我们将对我们的场景进行一些修改以改进它：
- en: 'Select Directional Light in the Hierarchy window. Then, in the Inspector window,
    set the Shadow Type to No Shadows. Shadows are quite resource-consuming  and,
    in this case, the AR experience will benefit from not having shadows:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“层次”窗口中选择“方向光”。然后，在检查器窗口中，将阴影类型设置为无阴影。阴影非常消耗资源，在这种情况下，AR 体验将受益于没有阴影：
- en: '![](img/b1f4166a-3e06-4ed8-9d30-652a141d1f92.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b1f4166a-3e06-4ed8-9d30-652a141d1f92.png)'
- en: Directional Light properties in the Inspector window
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器窗口中的方向光属性
- en: 'Now, select ImageTarget and change its Transform values so it rotates on the
    x axis. This way, in the scene, the objects will appear to be popping up from
    the ground:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择“ImageTarget”并更改其变换值，使其在x轴上旋转。这样，在场景中，物体将看起来是从地面弹出的：
- en: '![](img/503818a1-c5f2-45c8-b015-5b17070e6254.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/503818a1-c5f2-45c8-b015-5b17070e6254.png)'
- en: ImageTarget Transform values
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: ImageTarget 变换值
- en: 'Finally, select Main Camera and rotate and move it so that it''s pointing at
    the target:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择“主相机”并旋转和移动它，使其指向目标：
- en: '![](img/89e3c519-631f-409c-8b6f-c4205535a693.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/89e3c519-631f-409c-8b6f-c4205535a693.png)'
- en: Main Camera Transform values
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 主相机变换值
- en: 'Now, it''s time to include the 3D models. Let''s get started:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候包含 3D 模型了。让我们开始吧：
- en: 'Delete the Cube from inside ImageTarget in the Hierarchy window by right-clicking
    on it and selecting Delete, or just by selecting it and pressing *Delete* on your
    keyboard:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“层次”窗口中，通过右键单击“Cube”并选择“删除”，或者直接选择它并按键盘上的*Delete*键来从“ImageTarget”中删除“Cube”：
- en: '![](img/0346646c-90bc-43bf-b231-81eff556c250.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0346646c-90bc-43bf-b231-81eff556c250.png)'
- en: Deleting the Cube model
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 删除“Cube”模型
- en: Drag the `Models/Maia` folder from the code resources provided into the Project window
    on `@MyAssets/Models`. This will import the `.fbx` mesh object and its texture
    files inside the `textures` folder, as shown in the following screenshot.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将提供的代码资源中的`Models/Maia`文件夹拖动到项目窗口中的`@MyAssets/Models`。这将导入`.fbx`网格对象及其位于`textures`文件夹中的纹理文件，如下面的截图所示。
- en: 'Drag the `maia.fbx` file inside ImageTarget. Remember to make sure it''s inside
    ImageTarget so that it appears/disappears when the target does. Move, rotate,
    and scale the model until it looks good over the target:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`maia.fbx`文件拖动到“ImageTarget”中。请记住确保它在“ImageTarget”内部，这样它就会在目标出现/消失时出现/消失。移动、旋转和缩放模型，直到它在目标上看起来很好：
- en: '![](img/27013ab8-85e0-43d6-af18-e5ed143ccfd2.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27013ab8-85e0-43d6-af18-e5ed143ccfd2.png)'
- en: The maia model inside the target
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 目标内的“maia”模型
- en: 'Now, hit the play button at the top of the Toolbar to test the current scene.
    The moment the target is detected, the seat will appear:'
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击工具栏顶部的播放按钮来测试当前场景。当目标被检测到时，座椅将出现：
- en: '![](img/3ade5339-d007-4126-ae38-b243d3ed9f31.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3ade5339-d007-4126-ae38-b243d3ed9f31.png)'
- en: The seat appears when the target is detected
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当目标被检测到时，座椅出现
- en: Hit the play button once more to stop the simulation and then save the scene
    (*Ctrl* + *S*). Connect the mobile device to your computer and press *Ctrl* +
    *B*, or go to File|Build Settings|Build And Run, to build the app into your device.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次点击播放按钮停止模拟，然后保存场景（*Ctrl* + *S*）。将移动设备连接到计算机，按 *Ctrl* + *B*，或者转到文件|构建设置|构建并运行，以将应用程序构建到设备中。
- en: Now that we have our basic AR scene, in the next section, we will create our
    AR catalog by adding another chair and creating the UI to allow users to interact
    with our furniture.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了基本AR场景，在下一节中，我们将通过添加另一把椅子和创建UI来允许用户与我们的家具进行交互来创建我们的AR目录。
- en: Creating an AR catalog
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建AR目录
- en: 'Now that we have created the basic scene, we will create a small AR catalog:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了基本场景，我们将创建一个小的AR目录：
- en: We will use two ImageTargets to show two different chairs.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用两个ImageTargets来展示两把不同的椅子。
- en: We will allow users to change the color of the chairs while they are looking
    at them.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将允许用户在查看椅子时更改椅子的颜色。
- en: Modifying the AR scene
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改AR场景
- en: 'In this section, we are going to modify the current AR scene by adding a new
    ImageTarget. To do this, we will follow the same steps that we followed in the
    previous section:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过添加一个新的ImageTarget来修改当前的AR场景。为此，我们将遵循与上一节相同的步骤：
- en: From the resources of the project, drag the `Target_Prince.jpg` image into the `Assets/StreamingAssets` folder.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从项目资源中，将`Target_Prince.jpg`图像拖到`Assets/StreamingAssets`文件夹中。
- en: 'Then, drag the `Target_Prince_texture.jpg` image into the `Assets/@MyAssets/Images` folder:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`Target_Prince_texture.jpg`图像拖到`Assets/@MyAssets/Images`文件夹中：
- en: '![](img/8b300b54-127d-4ee8-9207-ad98d9999abc.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8b300b54-127d-4ee8-9207-ad98d9999abc.png)'
- en: Target_Prince and Target_Prince_texture in their respective folders
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: Target_Prince和Target_Prince_texture在各自的文件夹中
- en: 'Then, drag the `Prince` folder, which contains the model, into `Assets/@MyAssets/Models`:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将包含模型的`Prince`文件夹拖到`Assets/@MyAssets/Models`中：
- en: '![](img/d8f05a51-3720-49ce-955e-d7a0c49cc1a1.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8f05a51-3720-49ce-955e-d7a0c49cc1a1.png)'
- en: The prince model
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 王子模型
- en: 'Right-click the ImageTarget and select Duplicate so that we can use it as template
    for the new ImageTarget:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击ImageTarget并选择复制，这样我们就可以将其用作新ImageTarget的模板：
- en: '![](img/cb18f1ae-ed52-4350-946d-96402a4551bb.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cb18f1ae-ed52-4350-946d-96402a4551bb.png)'
- en: Duplicating the ImageTarget
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 复制ImageTarget
- en: Rename the first ImageTarget to `ImageTargetMaia` and the current one to `ImageTargetPrince`
    so that you can distinguish between them. Move them on the scene so that they
    don't overlap.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个ImageTarget重命名为`ImageTargetMaia`，当前的一个重命名为`ImageTargetPrince`，以便您可以区分它们。将它们在场景中移动，以便它们不会重叠。
- en: 'Copy the following Target Name and Path parameters into the Image Target Controller of
    our ImageTargetPrince in the Inspector window:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下目标名称和路径参数复制到检查器窗口中的ImageTargetPrince的图像目标控制器中：
- en: '![](img/f7873427-c8f0-4ca2-903d-d700e781c817.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f7873427-c8f0-4ca2-903d-d700e781c817.png)'
- en: Image Target Controller parameters
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图像目标控制器参数
- en: Drag the `Target_Prince_texture.jpg` image from the `Assets/@MyAssets/Images`
    folder onto the Project window to the Quad of ImageTargetPrince in the Hierarchy
    window in order to apply it as a texture.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Target_Prince_texture.jpg`图像从`Assets/@MyAssets/Images`文件夹拖到项目窗口中的Hierarchy窗口的ImageTargetPrince的Quad上，以便将其作为纹理应用。
- en: Remove the maia model from ImageTargetPrince (right-click and Delete) and drag
    the prince model there instead.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从ImageTargetPrince中删除maia模型（右键点击并删除）并将王子模型拖到那里。
- en: Move, rotate, and scale the prince model until it's in the middle of the marker
    and looks good.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将王子模型移动、旋转和缩放，直到它在标记的中间位置，看起来很合适。
- en: 'The following screenshot shows our scene with the two ImageTargets and their
    respective seats:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的场景，其中包含两个ImageTargets及其相应的座位：
- en: '![](img/75853f8e-0e7a-4017-980b-c00cff999ccd.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/75853f8e-0e7a-4017-980b-c00cff999ccd.png)'
- en: The scene with the two targets and models
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 包含两个目标和模型的场景
- en: 'Before testing our scene, let''s hide the Quad objects so that they don''t
    appear in AR and we only see the chairs. For that, select both Quad GameObjects
    (*Ctrl *+left click for multiple selection) and uncheck their Mesh Renderer components:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在测试我们的场景之前，让我们隐藏Quad对象，这样它们就不会出现在AR中，我们只能看到椅子。为此，选择两个Quad游戏对象（使用*Ctrl* + 左键点击进行多选）并取消选中它们的Mesh
    Renderer组件：
- en: '![](img/06fb0be6-e507-4416-aea6-a9438a8ce752.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/06fb0be6-e507-4416-aea6-a9438a8ce752.png)'
- en: Hiding the Quad GameObjects
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 隐藏Quad游戏对象
- en: Now, hit play to test that everything is set up correctly. Point with the camera
    to one of the targets and then to the other to see the chairs.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按播放键以测试一切设置是否正确。用摄像头指向一个目标，然后指向另一个目标，以查看椅子。
- en: Hit play again to stop the simulation and continue making changes.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次按播放键以停止模拟并继续进行更改。
- en: 'At the moment, ImageTracker of the EasyAR_Setup GameObject has been set to
    detect only one marker at a time. Let''s increase this value to `2` so that our
    users can see both chairs together:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，EasyAR_Setup GameObject的ImageTracker已被设置为一次只检测一个标记。让我们将此值增加到`2`，以便我们的用户可以一起看到两张椅子：
- en: '![](img/75c3f7ed-b9bf-44be-8383-6717b9f8006c.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/75c3f7ed-b9bf-44be-8383-6717b9f8006c.png)'
- en: Changing the number of simultaneous targets
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 改变同时目标数量
- en: Now, test this out—you should see both chairs appear at the same time.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，测试一下——你应该会看到两张椅子同时出现。
- en: The next thing we need to do is create the script that will let the user change
    the textures of the seats.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，我们需要创建一个脚本，允许用户更改座椅的纹理。
- en: Creating the controller script
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建控制器脚本
- en: 'In this section, we are going to create a script that will control the scene
    and allow our users to change the textures of the seats. Let''s get started:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将创建一个脚本，该脚本将控制场景并允许我们的用户更改座椅的纹理。让我们开始吧：
- en: 'In @MyAssets|Scripts, create a new C# script by right-clicking and selecting
    Create|New C# Script. Call it `MainController` and double-click on it to open
    it in Visual Studio:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在@MyAssets|Scripts中，通过右键单击并选择创建|新C#脚本创建一个新的C#脚本。命名为`MainController`，然后双击它以在Visual
    Studio中打开：
- en: '![](img/8368436e-b918-4df8-b93b-e0fff782e303.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8368436e-b918-4df8-b93b-e0fff782e303.png)'
- en: Creating a new C# Script in the @MyAssets/Scripts folder
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在@MyAssets/Scripts文件夹中创建一个新的C#脚本
- en: 'If you installed Unity by following the steps in [Chapter 2](54a1260e-a741-4eb5-9c98-01350fcba94b.xhtml),
    *Introduction to Unity for AR Development*, you will already have Visual Studio
    installed and configured, and it will open the script with the default code, as
    shown in the following screenshot:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你按照第2章中介绍的步骤安装Unity，即《AR开发入门》，你将已经安装并配置了Visual Studio，并且它将以默认代码打开脚本，如下面的截图所示：
- en: '![](img/a97b27f0-f8e0-4f09-a9b5-ac875a3d9d83.png)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a97b27f0-f8e0-4f09-a9b5-ac875a3d9d83.png)'
- en: MainController script in Visual Studio
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio中的MainController脚本
- en: 'If you installed Visual Studio prior to Unity or used another program such
    as MonoDevelop, you can configure Unity to open scripts with it by clicking on Edit|Preferences|External
    Tools|External Script Editor, as shown in the following screenshot:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你是在安装Unity之前安装了Visual Studio或者使用了其他程序如MonoDevelop，你可以通过点击编辑|首选项|外部工具|外部脚本编辑器来配置Unity使用它打开脚本，如下面的截图所示：
- en: '![](img/c00fba1d-773d-4505-bf86-8ed2d6f6cf71.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c00fba1d-773d-4505-bf86-8ed2d6f6cf71.png)'
- en: Preferences window with Visual Studio assigned as the External Script Editor
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 将Visual Studio分配为外部脚本编辑器的首选项窗口
- en: 'In the script, start by adding the following lines after the class declaration:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本中，首先在类声明之后添加以下行：
- en: '[PRE0]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, we are declaring the `materials` array, which is where we will store the
    materials of both chairs. We will use it to change those materials' texture properties. The
    `textures` array will contain the actual images (red and blue) that we will apply
    to those materials. Both variables are public because we will initialize them
    from the Unity editor.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在声明`materials`数组，这是我们存储两张椅子材质的地方。我们将用它来改变这些材质的纹理属性。`textures`数组将包含我们将应用到这些材质的实际图像（红色和蓝色）。这两个变量都是公开的，因为我们将从Unity编辑器初始化它们。
- en: 'Inside the `Start()` method, add the following loop:'
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Start()`方法内部，添加以下循环：
- en: '[PRE1]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With this loop, we are assigning each material inside the `materials` array
    to the first image of the `textures` array.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个循环，我们将`materials`数组中的每个材质分配给`textures`数组中的第一张图像。
- en: 'After the `Update()` method, we are going to create a new method:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update()`方法之后，我们将创建一个新的方法：
- en: '[PRE2]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This method changes the texture (red or blue) of the materials of the chairs.
    It checks which texture is selected and assigns the other one to both chairs.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法更改椅子的材质纹理（红色或蓝色）。它检查哪个纹理被选中，并将另一个分配给两张椅子。
- en: Now, go back to the Unity editor and drag the script to the EasyAR_Setup GameObject
    so that the script will affect the current scene.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，回到Unity编辑器，将脚本拖到EasyAR_Setup GameObject上，以便脚本影响当前场景。
- en: Remember that a script will only be executed if it's attached to one GameObject
    (or more) of the scene. Otherwise, it will only exist in the Projects window but
    not in the actual scene.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，只有当脚本附加到场景中的一个GameObject（或多个）时，它才会被执行。否则，它只存在于项目窗口中，但不在实际场景中。
- en: Since this script doesn't make direct reference to the element it's attached
    to, it could go on any element that is active in the scene all the time (so it's
    always available). We have put it in EasyAR_Setup because it's a root element
    that fulfills this rule.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 由于此脚本没有直接引用它附加到的元素，它可以应用于场景中始终处于活动状态的任何元素（因此它始终可用）。我们将其放在EasyAR_Setup中，因为它是一个满足此规则的根元素。
- en: 'Unfold the two variables of the script, that is, Materials and Textures, and,
    in Materials, set Size to `2` and select tela and Material #5\. These are the
    materials that correspond to the fabric in each model:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开脚本的两个变量，即材质和纹理，然后在材质中设置大小为`2`并选择tela和材质#5。这些是每个模型中对应布料的材质：
- en: '![](img/d12450a8-01ca-4493-8049-6b986ed1772c.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d12450a8-01ca-4493-8049-6b986ed1772c.png)'
- en: Assigning the materials to the variables
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 分配材质到变量
- en: 'In Textures, set Size to `2` and select the red and the blue elements, that
    is, Acapulco 3011 and Acapulco PANTONE 2935 C:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在纹理中，将大小设置为`2`并选择红色和蓝色元素，即Acapulco 3011和Acapulco PANTONE 2935 C：
- en: '![](img/029cd049-d80b-4809-a93a-714bf5a8fe1c.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/029cd049-d80b-4809-a93a-714bf5a8fe1c.png)'
- en: Assigning the textures to the variables
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 将纹理分配给变量
- en: The Controller script is ready. Now, we have to create the user interface and
    the button that will trigger the color change through the `ChangeColor()` method
    we have just created.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器脚本已准备就绪。现在，我们必须创建用户界面和按钮，该按钮将通过我们刚刚创建的`ChangeColor()`方法触发颜色变化。
- en: Creating the interface
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建界面
- en: 'Let''s create a simple interface to allow our users to change the features
    of the AR objects they are seeing. Let''s get started:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的界面，以便我们的用户可以更改他们看到的AR对象的特性。让我们开始吧：
- en: 'First, right-click on the Hierarchy window and select UI|Canvas. The Canvas
    element is the main element on the Unity interface and contains all the other
    elements:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在层次结构窗口中右键单击并选择UI|Canvas。Canvas元素是Unity界面上的主要元素，包含所有其他元素：
- en: '![](img/fec51d15-663b-43bf-9a39-32b4780fb0f2.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fec51d15-663b-43bf-9a39-32b4780fb0f2.png)'
- en: Creating a Canvas element on the scene
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中创建Canvas元素
- en: By default, the Canvas is located in the (0,0) point, facing back, overlaying
    the whole 3D scene, and with the current screen size. Double-click on its name
    in the Hierarchy window so that the scene focuses on it.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 默认情况下，画布位于(0,0)点，朝后，覆盖整个3D场景，并且具有当前屏幕大小。在层次结构窗口中双击其名称，以便场景聚焦于它。
- en: 'In the Inspector window, include the following values for Canvas Scaler:'
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器窗口中，为Canvas Scaler包含以下值：
- en: 'UI Scale Mode: Scale With Screen Size. With this parameter, we are telling
    the canvas to adapt itself to the different screen sizes (useful when compiling
    for different mobile devices).'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: UI缩放模式：按屏幕大小缩放。使用此参数，我们正在告诉画布根据不同的屏幕大小进行适应（在为不同移动设备编译时很有用）。
- en: For Reference Resolution, we will use `1280` x `720`.
  id: totrans-286
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于参考分辨率，我们将使用`1280` x `720`。
- en: 'Screen Match Mode allows us to adapt the UI elements to the width and/or height
    of the screen. A value of `0.5` tells it to adapt to both:'
  id: totrans-287
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 屏幕匹配模式允许我们根据屏幕的宽度和/或高度调整UI元素。值为`0.5`表示它将适应两者：
- en: '![](img/2cf66ef6-f684-4ebd-a239-6b6dafaa8929.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2cf66ef6-f684-4ebd-a239-6b6dafaa8929.png)'
- en: Canvas Scaler values on the Inspector window
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 检查器窗口中的Canvas Scaler值
- en: 'To manipulate the UI elements (move, scale, and so on), select their specific
    tool in the toolbar:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 要操纵UI元素（移动、缩放等），在工具栏中选择它们的特定工具：
- en: '![](img/3c51c2b7-b993-4d5e-ae82-452a53d4e3ef.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c51c2b7-b993-4d5e-ae82-452a53d4e3ef.png)'
- en: 'We are going to use an icon for our color button. For that, import the `circle_icon.png`
    image into `Assets/@MyAssets/Images`. Select it in the Project window. Then, in
    the Inspector window, modify its Texture Type so that it''s Sprite (2D and UI)
    in order to use it in the UI. Then press Apply to save this change:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用一个图标作为我们的颜色按钮。为此，将`circle_icon.png`图像导入到`Assets/@MyAssets/Images`。在项目窗口中选择它。然后，在检查器窗口中，修改其纹理类型，使其为Sprite（2D和UI），以便在UI中使用。然后按应用以保存此更改：
- en: '![](img/a12b98da-01de-4613-9c26-fc90666bbd29.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a12b98da-01de-4613-9c26-fc90666bbd29.png)'
- en: Converting circle_icon into a sprite image
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 将circle_icon转换为精灵图像
- en: 'Now, right-click on Canvas in the Hierarchy window and select UI/Button:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在层次结构窗口中右键单击Canvas并选择UI/Button：
- en: '![](img/29595d2f-5fc3-40a9-9849-e317fbb0d271.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/29595d2f-5fc3-40a9-9849-e317fbb0d271.png)'
- en: Creating a button inside the canvas element
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在Canvas元素内创建按钮
- en: 'We don''t need the text component that comes with the Button, so right-click
    on it and Delete it:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不需要按钮附带的自带文本组件，因此右键单击它并删除它：
- en: '![](img/4b02d15e-62a6-459c-a0f5-9d6eb551bcd6.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b02d15e-62a6-459c-a0f5-9d6eb551bcd6.png)'
- en: Deleting the text component of the button
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 删除按钮的文本组件
- en: 'Change the button''s name to `Color_button` and assign the icon we previously
    imported into its Image component to Source Image. Click on the Preserve Aspect checkbox
    to make sure it''s always round:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮的名称更改为 `Color_button` 并将其之前导入到其 Image 组件中的图标分配给 Source Image。点击 Preserve
    Aspect 复选框以确保它始终是圆形的：
- en: '![](img/1f01c16b-e9b8-438e-9463-5f610fc46714.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f01c16b-e9b8-438e-9463-5f610fc46714.png)'
- en: The Color_button image component in the Inspector window
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器窗口中的 Color_button 图像组件
- en: 'Now, let''s place the button in the top-right corner of the screen. For the
    Rect Transform component, click on the square and select the top-right option
    to move the button''s anchors:'
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将按钮放置在屏幕的右上角。对于 Rect Transform 组件，点击正方形并选择右上角选项以移动按钮的锚点：
- en: '![](img/b08afc56-276f-4671-a3b0-e590a0cd7969.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b08afc56-276f-4671-a3b0-e590a0cd7969.png)'
- en: Selecting the top-right anchor for the button
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 为按钮选择右上角锚点
- en: 'Then, change the PosX, PosY, Width, and Height values to adjust the button''s
    position and scale, as follows:'
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 PosX、PosY、Width 和 Height 值更改为调整按钮的位置和大小，如下所示：
- en: '![](img/ee2401cb-7b7e-4d72-aef9-671e0dd857df.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee2401cb-7b7e-4d72-aef9-671e0dd857df.png)'
- en: The button's new Rect Transform values
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的新 Rect Transform 值
- en: 'Now, with the button selected, under the Button component on the Inspector
    window, go to the `On Click ()` method and press the + symbol to create a new
    action:'
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在按钮被选中后，在检查器窗口的 Button 组件下，转到 `On Click ()` 方法并按 + 符号创建一个新动作：
- en: '![](img/8ff41c9a-10aa-4c62-8795-e2f6d7898095.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ff41c9a-10aa-4c62-8795-e2f6d7898095.png)'
- en: Creating a new action in the On Click() method
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在 On Click() 方法中创建一个新动作
- en: 'Drag the EasyAR_Setup element from the Hierarchy window to the None (Object)
    box and, from the drop-down menu on the right, select MainController|ChangeColor.
    With this, we are telling the UI that whenever the Color_button is pressed, the
    `ChangeColor()` method from the `MainController` class that''s attached to the
    EasyAR_Setup GameObject will be executed:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层次结构窗口中将 EasyAR_Setup 元素拖动到 None (Object) 框中，然后从右侧的下拉菜单中选择 MainController|ChangeColor。通过这样做，我们告诉
    UI，每当 Color_button 被按下时，附加到 EasyAR_Setup GameObject 的 `MainController` 类的 `ChangeColor()`
    方法将被执行：
- en: '![](img/dd26cb74-1cc4-4e0d-af5d-67a415f5cc51.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dd26cb74-1cc4-4e0d-af5d-67a415f5cc51.png)'
- en: Selecting the ChangeColor() method for the Color_button
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 为 Color_button 选择 ChangeColor() 方法
- en: 'Play the scene to test it. You will see that when you click on Color_button,
    the texture of the chairs changes. However, there is still a small detail: the
    button is not intuitive because it doesn''t change its own color. To solve this,
    we are going to add a few lines to our code in Visual Studio.'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放场景以测试它。你会看到当你点击 Color_button 时，椅子的纹理会改变。然而，还有一个小的细节：按钮不够直观，因为它不会改变自己的颜色。为了解决这个问题，我们将在
    Visual Studio 中的代码中添加几行。
- en: 'Go back to Visual Studio and in the `MainController` script import the `UnityEngine`
    `UI` library at the beginning of the file:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio 并在 `MainController` 脚本中在文件开头导入 `UnityEngine` `UI` 库：
- en: '[PRE3]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add the following variables *before* the `Start()` method:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Start()` 方法之前添加以下变量：
- en: '[PRE4]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We'll use the first one to assign the button in Unity editor (that's why it's
    `public`) and the two colors as reference.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用第一个来分配 Unity 编辑器中的按钮（这就是为什么它是 `public` 的），以及两个颜色作为参考。
- en: 'Add the following line inside the `Start()` method, after the loop segment,
    to initialize the button to `red`:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Start()` 方法中的循环段之后添加以下行以初始化按钮为 `红色`：
- en: '[PRE5]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the following lines *inside* the `ChangeColor()` method:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ChangeColor()` 方法内添加以下行：
- en: '[PRE6]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, we are telling the button to evaluate the current color and, if it's `red`,
    to change it to `blue` and vice versa. This way, the button will change its color
    at the same time as the textures of the seats do.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们告诉按钮评估当前颜色，如果它是 `红色`，则将其更改为 `蓝色`，反之亦然。这样，按钮的颜色将与座椅的纹理同时改变。
- en: 'Finally, in the Unity editor, drag the Color_button GameObject to the Color_button
    variable on the `EasyAR_Setup` GameObject to assign it:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 Unity 编辑器中，将 Color_button GameObject 拖动到 `EasyAR_Setup` GameObject 上的 Color_button
    变量以分配它：
- en: '![](img/0566cae6-2bd5-499e-bc09-3784bbf0d2d7.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0566cae6-2bd5-499e-bc09-3784bbf0d2d7.png)'
- en: The Color_button GameObject dragged to the last variable of the Main Controller
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Color_button GameObject 拖动到主控制器的最后一个变量
- en: Save and test the scene in the editor to see how the button changes color initially
    and whenever it's pressed.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中保存并测试场景，以查看按钮最初如何改变颜色以及每次按下时如何改变颜色。
- en: 'Now, Build And Run the app in your mobile device and enjoy seeing how the seats
    come to life in AR:'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在你的移动设备上构建并运行该应用，享受看到座位在AR中如何生动起来的过程：
- en: '![](img/1af10cc5-713d-4bd7-809b-78abf4b16a82.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1af10cc5-713d-4bd7-809b-78abf4b16a82.png)'
- en: Mobile phone screenshot with both seats in red
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 手机截图显示两个座位都是红色
- en: You can move the camera around the seats, get close to them, or move the targets
    to see them in detail. You can press the color button to switch their texture
    color. Now that the app is complete, you can even delete the Quad planes from
    the scene since they are no longer needed. With this, your project is ready.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以围绕座位移动相机，靠近它们，或将目标移动以查看它们的细节。你可以按颜色按钮来切换它们的纹理颜色。现在应用已经完成，你甚至可以删除场景中的四边形平面，因为它们不再需要。有了这个，你的项目就准备好了。
- en: Summary
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to create an AR catalog using the EasyAR SDK.
    You learned how to import the SDK into Unity and create a scene showing a cube
    on an ImageTarget. Then, you learned how to import models from outside Unity and
    modify some of their features, such as materials and textures. Then, you merged
    the models into the initial scene to make a seat come to life from its catalog.
    Finally, you added a script and UI elements to control the color of the models.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用EasyAR SDK创建AR目录。你学习了如何将SDK导入Unity并创建一个显示在ImageTarget上的场景。然后，你学习了如何从Unity外部导入模型并修改它们的一些功能，例如材质和纹理。然后，你将模型合并到初始场景中，使目录中的座位栩栩如生。最后，你添加了一个脚本和UI元素来控制模型的颜色。
- en: By the end of this chapter, you have acquired the basic skills to continue developing
    with EasyAR and try out some of its other features. For that, we recommend opening
    the rest of the sample scenes located at Assets | Samples | Scenes and try them
    out to understand how they work. You have also acquired an understanding of how
    AR can be used to create a catalog, magazine, or similar product for marketing.
    You can now improve this project in order to, for example, link the products with
    e-commerce, offering the consumer the full experience and attracting them to buy
    your products. You can now use basic tools to create your own AR experiences in
    marketing.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你已经掌握了使用EasyAR继续开发的基本技能，并尝试了其一些其他功能。为此，我们建议打开位于“资产 | 示例 | 场景”的其余样本场景并尝试它们，以了解它们是如何工作的。你还了解了如何使用AR创建用于营销的目录、杂志或类似产品。你现在可以改进这个项目，例如，将产品与电子商务链接起来，为消费者提供完整的体验并吸引他们购买你的产品。你现在可以使用基本工具来创建自己的AR营销体验。
- en: In the next chapter, you will learn how to use another SDK, Vuforia, to place
    the same seat models in a real environment, instead of using ImageTargets. You
    will learn how to use Vuforia's Ground Plane features to place and manipulate
    3D models on flat surfaces, such as tables or on the ground, to create an interactive
    retail experience.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用另一个SDK，Vuforia，将相同的座位模型放置在真实环境中，而不是使用ImageTargets。你将学习如何使用Vuforia的地面平面功能在平坦的表面上放置和操作3D模型，例如在桌子上或地面上，以创建一个交互式零售体验。
