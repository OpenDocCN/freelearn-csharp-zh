- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with External APIs and Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although an autonomous application can provide great value to its users, consuming
    external APIs and services can make it provide even greater value to those users
    by integrating the functionalities of the application with other applications!
  prefs: []
  type: TYPE_NORMAL
- en: However, consuming external APIs and services creates new dependencies for your
    application. While this might make perfect sense, you have to know how to interact
    with these dependencies and how to integrate them into your application, so you
    don‚Äôt couple your application too much to that external dependency and avoid having
    to change your application‚Äôs code every time that dependency changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'More specifically, in this chapter, we will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of consuming external APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending **Bookmarkr**‚Äôs capabilities by consuming an external API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The proper way in .NET to consume external APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to avoid tight coupling between our application‚Äôs commands and the external
    API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code for this chapter can be found in the GitHub repository accompanying
    this book, [https://github.com/PacktPublishing/Building-CLI-Applications-with-C-Sharp-and-.NET/tree/main/Chapter09](https://github.com/PacktPublishing/Building-CLI-Applications-with-C-Sharp-and-.NET/tree/main/Chapter09)
  prefs: []
  type: TYPE_NORMAL
- en: Why consume external APIs?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building your application, you have to consider multiple factors and sometimes
    implement multiple features that go well beyond your expertise.
  prefs: []
  type: TYPE_NORMAL
- en: Does that mean you should not build an application if you do not master every
    feature? No! Many applications rely on code developed by other people who are
    more skilled and experienced in a very specific area. These pieces of code are
    packaged as APIs and services so we can use (aka consume) them without having
    to understand every line of code they contain.
  prefs: []
  type: TYPE_NORMAL
- en: We have already come across this situation when we added logging into Bookmarkr.
    We didn‚Äôt develop the logging engine ourselves. We instead relied on an existing
    service provided by an organization that knows how to do it (and do it well!).
    By relying on that service, our application was able to benefit from logging functionality
    without having to be experts in the logging business domain.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, I can hear your thoughts (yes, I can ‚Äì that is my sixth sense üòä). You
    are thinking that it doesn‚Äôt seem that complicated to develop your own logging
    engine, and you might be right. This is a business decision: if it is part of
    your core business, then yes, it makes sense to invest time, resources, and money
    in developing, testing, and maintaining your own logging engine. But remember,
    while it might be cool to develop it, you will have to maintain it, and that is
    what hurts many organizations in the long run! You know what they say‚Ä¶ You build
    it, you run it! üòâ'
  prefs: []
  type: TYPE_NORMAL
- en: Also keep in mind that building your own ‚Äúdependencies‚Äù (aka, services that
    are not part of your core business) is not always easy. An example of that is
    a payment gateway. There is a lot of regulation involved in building and offering
    such a service. If it‚Äôs not your core business (in other words, if you are not
    Stripe or such a company), don‚Äôt do it! Consume an existing service.
  prefs: []
  type: TYPE_NORMAL
- en: 'By consuming external APIs and services, we can then focus on what we do best,
    and in our case, it is managing bookmarks! That is the key to consuming external
    APIs and services: having the ability to focus on our core business and delegating
    other concerns to whom those concerns are their core business.'
  prefs: []
  type: TYPE_NORMAL
- en: How to consume an external API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: .NET provides a way to interact with external APIs and services by abstracting
    the need to construct our own HTTP requests, handle the underlying networking
    details, send the request, and receive the response while performing serialization
    and deserialization and handling communication issues.
  prefs: []
  type: TYPE_NORMAL
- en: So, in order to interact with these external APIs and services, .NET provides
    us with the `HttpClient` class. However, the proper way to deal with this class
    is through the `IHttpClientFactory` interface. This allows us to create and manage
    `HttpClient` instances for optimal performance and resource management.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of using IHttpClientFactory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Using `IHttpClientFactory` provides several advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HttpMessageHandler` instances, which helps prevent issues such as socket exhaustion'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection reuse**: It reuses underlying HTTP connections, improving performance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resilience**: It adds resilience to transient faults'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HttpClient` instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bookmarkr: your bookmarks, anywhere!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, Bookmarkr has been managing our bookmarks locally. This means
    that we are tied to the physical boundaries of our computer.
  prefs: []
  type: TYPE_NORMAL
- en: But what happens if we want to access these bookmarks from another computer?
  prefs: []
  type: TYPE_NORMAL
- en: To make this happen, we will need to extend the capabilities of Bookmarkr beyond
    the local computer. To do this, we will make Bookmarkr call an external API that
    will be responsible for storing and retrieving our bookmarks.
  prefs: []
  type: TYPE_NORMAL
- en: For that matter, we will add a new command called `sync` that will be responsible
    for synchronizing the local bookmarks with the ones stored by the external service.
  prefs: []
  type: TYPE_NORMAL
- en: About the external service
  prefs: []
  type: TYPE_NORMAL
- en: When you consume an external service, you don‚Äôt have to know its internals (aka,
    its architecture, technology stack, application code, and dependencies). This
    is in accordance with the encapsulation principle of object-oriented programming.
  prefs: []
  type: TYPE_NORMAL
- en: All you need to know is how to send requests to it and how to interpret the
    responses it returns.
  prefs: []
  type: TYPE_NORMAL
- en: However, since I know that you are curious to know more about it, I have provided
    the details of its architecture and its application and infrastructure code in
    the `appendixA-bookmarkr-syncr` branch of the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: Let‚Äôs start by adding the new command!
  prefs: []
  type: TYPE_NORMAL
- en: The sync command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following the project structure that we designed in the previous chapter, let‚Äôs
    add a new folder named `Sync` under the `Commands` folder, and within this folder,
    let‚Äôs add a new code file named `SyncCommand.cs`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The startup code for this command is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This code is pretty straightforward and needs no explanation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The synchronization process comprises the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The local bookmarks are sent by Bookmarkr‚Äôs `sync` command to the external service
    (called BookmarkrSyncr).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BookmarkrSyncr will then perform the synchronization between the local bookmarks
    it receives from Bookmarkr with the ones it has in its data store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: BookmarkrSyncr will send the synchronized bookmarks back to the Bookmarkr `sync`
    command‚Äôs handler method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `sync` command‚Äôs handler method will store the received bookmarks in the
    local data store. Keep in mind that if the application is dealing with large datasets
    or rate-limiting APIs, batching and retry techniques will be needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'So, the `sync` command needs to have a reference to `IHttpClientFactory`. Let‚Äôs
    add this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this code, we are adding a `private` property of type `IHttpClientFactory`
    and we are injecting it through the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are then using it in the command‚Äôs method handler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: This code is pretty easy to understand and conforms to the synchronization process
    we described earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is, however, one segment in that code that requires an explanation:'
  prefs: []
  type: TYPE_NORMAL
- en: We create an HTTP client from the `IHttpClientFactory` instance by relying on
    the named clients approach. As you can see, we are providing the name of the client
    configuration (here, `bookmarkrSyncr`) to the `CreateClient` method. We will get
    back to this configuration later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next, we issue a `POST` request to the `sync` endpoint of the remote web service,
    passing the list of local bookmarks that have been previously serialized as JSON
    using an instance of the `StringContent` class:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the request is successful, we deserialize the returned list of bookmarks
    (which represents the list of synchronized local and remote bookmarks) and we
    replace the local list of bookmarks with this new list
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the request is not successful, we display an error message corresponding
    to the returned HTTP status code
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In order to import the `IHttpClientFactory` interface, we need to reference
    the `Microsoft.Extensions.Http` NuGet package. As we already know by now, we can
    do this by typing this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Before we can use our new command, let‚Äôs register it within the `Program` class!
  prefs: []
  type: TYPE_NORMAL
- en: Registering the sync command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let‚Äôs register the `sync` command in the `Program` class. It‚Äôs only a matter
    of one line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: But wait! Where did the `_clientFactory` variable come from?!
  prefs: []
  type: TYPE_NORMAL
- en: Well done! You spotted it! üòä
  prefs: []
  type: TYPE_NORMAL
- en: As you may have guessed, this is a reference to the `HttpClient` that we need
    to configure to make the magic happen. This is where we will talk about the named
    clients approach that we mentioned earlier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `_clientFactory` variable is of type `IHttpClientFactory`. So, we first
    need to declare it within the `Main` method of the `Program` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This will allow us later to retrieve a reference to it and pass it to the constructor
    of `SyncCommand` during its registration (as we saw earlier). We can retrieve
    that reference as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let‚Äôs register the HTTP client for the BookmarkrSyncr service. We
    do this within the `ConfigureServices` block as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let‚Äôs explain what this code does:'
  prefs: []
  type: TYPE_NORMAL
- en: A name (`bookmarkrSyncr`) is provided for the registered HTTP client. This is
    why we call this approach ‚Äú`named clients`‚Äù. Notice that this is the same name
    that is passed to the `CreateClient` method in the `SyncCommand` class we saw
    earlier. This is how the appropriate HTTP client is selected.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then specify the base address for the service and a couple of request headers.
    Note that the base address does not specify the `sync` endpoint. It is specified
    when performing the request. This allows a web service to have different endpoints
    and for those endpoints to be invoked as needed without having to specify the
    base address over and over again.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About the base address
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that the base address points to an external URL. I deployed
    the code of the BookmarkrSyncr service in App Service on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: I will keep this service up and running as long as I can but keep in mind that
    you have access to both its infrastructure and application code in the `appendixA-bookmarkr-syncr`
    branch if you need to redeploy it.
  prefs: []
  type: TYPE_NORMAL
- en: Everything is now set up. We can run the program and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: Running the program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run the program, we simply need to execute this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The result will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.1 ‚Äì The sync command in action](img/B22400_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.1 ‚Äì The sync command in action
  prefs: []
  type: TYPE_NORMAL
- en: Great, isn‚Äôt it?
  prefs: []
  type: TYPE_NORMAL
- en: If we list all available local bookmarks, we will notice that they have indeed
    been synchronized with the remote list of bookmarks.
  prefs: []
  type: TYPE_NORMAL
- en: What about security?
  prefs: []
  type: TYPE_NORMAL
- en: You may certainly have noticed that the web service can be used without any
    authentication. In other words, anonymous requests are allowed, which may be a
    security concern.
  prefs: []
  type: TYPE_NORMAL
- en: You are totally right, and this is intentional for now as security will be addressed
    in [*Chapter 13*](B22400_13.xhtml#_idTextAnchor220) where we will see how we can
    authenticate users using a technique called ‚ÄúPersonal Access Tokens,‚Äù which resembles
    using API keys.
  prefs: []
  type: TYPE_NORMAL
- en: The code works great but there is actually a drawback to it.
  prefs: []
  type: TYPE_NORMAL
- en: Reducing the coupling between our application and the external dependency
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, although we applied the best practices of consuming
    external APIs, we created a coupling between our application and that dependency‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: Notice that our application actually knows about the data type and structure
    that is returned by the API. This means that whenever this API changes, we will
    need to update our code accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: This also means that our application is responsible for handling the different
    HTTP codes that the API may return. Can‚Äôt we abstract this complexity somewhere
    so that eventual changes are scoped to a small portion of our code?
  prefs: []
  type: TYPE_NORMAL
- en: Of course we can! And there is a pattern for that, which is called **Service
    Agent**.
  prefs: []
  type: TYPE_NORMAL
- en: About the Service Agent pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Service Agent pattern abstracts away the details of HTTP communication into
    a dedicated service, allowing other services (or, in our case, commands) to interact
    with external systems without directly dealing with HTTP requests and responses.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many benefits to the Service Agent pattern, among which are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Abstraction**: It abstracts the complexity of HTTP communication, including
    constructing the HTTP request, handling the response, and managing errors'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Encapsulation**: It encapsulates all the logic related to communicating with
    a specific external service or API'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reusability**: Service Agent can be reused by multiple components or services
    within the application'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sync` command) from the communication logic (in Service Agent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintainability**: Changes to the external API or communication protocol
    only need to be made in one place (Service Agent)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I believe that it‚Äôs clear to you by now that our CLI application can greatly
    benefit from leveraging the Service Agent pattern. Let‚Äôs now see how we can implement
    it!
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the Service Agent pattern
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This pattern is often implemented using `IHttpClientFactory` and named or typed
    `HttpClient` instances.
  prefs: []
  type: TYPE_NORMAL
- en: We are already using these artifacts, so it will be quite straightforward for
    us to abstract the HTTP details away from the `sync` command and into a dedicated
    Service Agent class.
  prefs: []
  type: TYPE_NORMAL
- en: The first step we will perform is to create a folder structure for Service Agents.
    Following the project structure we have laid out in the previous chapter, let‚Äôs
    create a folder named `ServiceAgents` and a subfolder named `BookmarkrSyncrServiceAgent`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within this subfolder, let‚Äôs create two code artifacts: an interface file named
    `IBookmarkrSyncrServiceAgent.cs`, and a class file named `BookmarkrSyncrServiceAgent.cs`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code of the `IBookmarkrSyncrServiceAgent` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This interface only exposes one operation, `SyncBookmarks`, which takes the
    list of local bookmarks (held by the Bookmarkr CLI application) and returns the
    synced list of bookmarks that includes the bookmarks from the remote web service,
    BookmarkrSyncr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let‚Äôs now implement this interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: As you may have noticed, this implementation is reusing the code that was located
    in the body of the `Sync` command‚Äôs handler method, hence abstracting it from
    this method and encapsulating it into the Service Agent class.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, the code of this class does not need a lot of explanation.
    However, it is worth mentioning that in case of an unsuccessful request, we return
    an instance of `HttpRequestException` with the details about the issue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to update the code of the `SyncCommand` class to abstract the
    use of `IHttpClientFactory` and use our new Service Agent instead. The updated
    code is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This code is quite simple and easy to read. What we did basically was replace
    the use of `IHttpClientFactory` with the use of `IBookmarkrSyncrServiceAgent`
    and remove all the code, in the `OnSyncCommand` method, that was dealing with
    the HTTP communication (which we abstracted away into the Service Agent class)
    by the call to the `Sync` method of the Service Agent. Hence, the `OnSyncCommand`
    method is also leaner, shrinking from 41 lines of code down to 16.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For your reference, we provide a copy of the `SyncCommand` class as it was before
    introducing the use of the Service Agent class. By doing so, you can easily compare
    the differences between the two implementations. Look for the file named `SyncCommand_NoServiceAgent.txt`
    in the `Commands/Sync` folder.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to register the Service Agent into the list of services in
    the `ConfigureServices` section of the `Program` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have seen previously, this can be easily done by adding this line of
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We need not forget to declare a variable for the Service Agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we need to retrieve the instance of that Service Agent:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We pass it to the constructor of the `SyncCommand` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Everything is now in place. Let‚Äôs make sure that the application still works
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Rerunning the program
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can run the program the same way we did before, by typing this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'We will get the exact same result, proving that the application still works
    as it is supposed to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 ‚Äì The sync command in action using the Service Agent](img/B22400_09_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 ‚Äì The sync command in action using the Service Agent
  prefs: []
  type: TYPE_NORMAL
- en: Awesome! By leveraging the Service Agent pattern, we have been able to provide
    a clean separation between the business logic and the details of HTTP communication.
    Hence, we can consume the BookmarkrSyncr web service in any other command (using
    the `BookmarkrSyncrServiceAgent` class), without this command having to deal with
    the HTTP communication details.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to extend the functionalities of Bookmarkr by
    consuming external APIs and services.
  prefs: []
  type: TYPE_NORMAL
- en: We explored the best practices of communicating with external dependencies,
    handling response data, codes, and errors, and designing that integration in a
    way that does not create a heavy coupling between the external dependency and
    our application, making it easy to replace that dependency over time if this proves
    necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover one of the key aspects of building applications,
    which is testing those applications.
  prefs: []
  type: TYPE_NORMAL
- en: Your turn!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Following along with the provided code is a great way to learn through practice.
  prefs: []
  type: TYPE_NORMAL
- en: A better way is by challenging yourself to achieve tasks. Hence, I challenge
    you to improve the Bookmarkr application by adding the following features.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #1 ‚Äì adding SQLite as a data store'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Who said that APIs are the only external dependencies an application can rely
    on? Certainly not me! üòä
  prefs: []
  type: TYPE_NORMAL
- en: Until now, our application has stored its bookmarks in memory. You will certainly
    agree with me that this is not an ideal solution as bookmarks will be lost as
    soon as the application terminates or restarts.
  prefs: []
  type: TYPE_NORMAL
- en: You are asked to add a new dependency to the Bookmarkr application ‚Äì a **SQLite**
    database! This will allow bookmarks to be stored in a more permanent manner by
    Bookmarkr, making it more useful to our users üòâ.
  prefs: []
  type: TYPE_NORMAL
- en: Why SQLite? You may ask‚Ä¶
  prefs: []
  type: TYPE_NORMAL
- en: 'SQLite is a versatile and lightweight database solution, designed to be both
    simple and easy to use while requiring minimal setup and administration. One of
    its most significant advantages is its portability: the entire database is stored
    in a single file, which makes it easy to move, back up, and distribute. Its self-contained
    nature also means that SQLite doesn‚Äôt require a separate server process or system
    configuration, simplifying its deployment. That is why it is a great fit for CLI
    applications!'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you will also need to modify the code of `BookmarkService` to retrieve
    bookmarks from and store bookmarks in the SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: Consider using the `Microsoft.Data.Sqlite` library for .NET, as it is a reliable
    and lightweight library. Consider adding migrations and ensuring thread-safe access
    for SQLite in concurrent CLI scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: 'Task #2 ‚Äì retrieving the web page name based on its URL'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Until now, when adding a new bookmark, we had to pass both the web page name
    and URL.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know how to work with external dependencies, let‚Äôs tweak the `link
    add` command so that it makes an HTTP request to retrieve the name of the web
    page to bookmark based on the provided URL. If the name can‚Äôt be retrieved, we
    can then use the name that was passed as a command option.
  prefs: []
  type: TYPE_NORMAL
- en: If the web page cannot be found, the bookmark‚Äôs name should be `Unnamed bookmark`.
    If the request takes more than 30 seconds, terminate it and also set the name
    to `Unnamed bookmark`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 4: Testing and Deployment'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this part, you will explore the critical aspects of testing, packaging, and
    deploying CLI applications. You'll learn various strategies for testing CLI tools,
    including unit testing individual components. Next, you'll delve into packaging
    your CLI application for distribution, using the most commonly used mechanisms
    such as Docker, .NET Tool, and Winget. You'll understand how to specify entry
    points, define dependencies, and structure your project for optimal packaging.
    Finally, you'll explore deployment methods, learning how to distribute your CLI
    tool through package managers and ensure it works consistently across different
    environments.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B22400_10.xhtml#_idTextAnchor155)*, Testing CLI Applications*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B22400_11.xhtml#_idTextAnchor185)*, Packaging and Deployment*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
