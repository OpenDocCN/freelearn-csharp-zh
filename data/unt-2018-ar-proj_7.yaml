- en: Snap it! Adding Filters to Pictures
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拍摄！给图片添加滤镜
- en: In this chapter, we will create an application that will allow us to add an
    overlay over a person's head. If this application sounds familiar, that is because
    there are many applications that are on the market that do just this, and today, you
    will learn how to do so as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建一个应用程序，它将允许我们在人的头上添加一个叠加层。如果这个应用程序听起来很熟悉，那是因为市场上有很多应用程序就是做这个的，今天，您将学习如何做到这一点。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将了解以下内容：
- en: OpenCV
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenCV
- en: Setting up OpenCV
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 OpenCV
- en: Incorporating OpenCV into Unity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 OpenCV 集成到 Unity 中
- en: Creating a prototype project using OpenCV and Unity
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 OpenCV 和 Unity 创建原型项目
- en: Project overview
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目概述
- en: This project makes heavy use of facial recognition-and-detection algorithms,
    which requires knowledge of OpenCV.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目大量使用了人脸识别和检测算法，这需要了解 OpenCV。
- en: 'Build time: two hours'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 构建时间：两小时
- en: Getting started
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用
- en: In this section, we will cover a few things that you will need and some optional
    items for more in depth building from source requirements.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍您将需要的一些内容，以及一些可选项目，以更深入地了解从源代码构建的要求。
- en: OpenCV 3.4.1, which you can find at [https://opencv.org/releases.html](https://opencv.org/releases.html),
    is the library itself in pure source form or in library form. If you want the
    Unity specific plugin, you can purchase it from [https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088](https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088),
    along with the sister library file at [https://enoxsoftware.com/dlibfacelandmarkdetector/](https://enoxsoftware.com/dlibfacelandmarkdetector/).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenCV 3.4.1，您可以在 [https://opencv.org/releases.html](https://opencv.org/releases.html)
    找到，是纯源形式或库形式的库本身。如果您需要 Unity 特定的插件，您可以从 [https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088](https://assetstore.unity.com/packages/tools/integration/opencv-for-unity-21088)
    购买，以及相关的库文件 [https://enoxsoftware.com/dlibfacelandmarkdetector/](https://enoxsoftware.com/dlibfacelandmarkdetector/)。
- en: Unity 2018 can be download from [https://store.unity.com/](https://store.unity.com/).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity 2018 可以从 [https://store.unity.com/](https://store.unity.com/) 下载。
- en: Visual Studio, a requirement for writing or compiling source code, can be downloaded
    from [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 是编写或编译源代码的必备工具，可以从 [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
    下载。
- en: CMake, which you can download from [https://CMake.org/download/](https://cmake.org/download/),
    is required when building your own version of the library, the plugin, and the
    source for OpenCV.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当构建自己的库版本、插件和 OpenCV 的源代码时，需要 CMake，您可以从 [https://CMake.org/download/](https://cmake.org/download/)
    下载。
- en: Python, which is a requirement if you need to build your own library for OpenCV,
    can be downloaded from [https://www.python.org/getit/](https://www.python.org/getit/).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 是构建自己的 OpenCV 库所需的工具，您可以从 [https://www.python.org/getit/](https://www.python.org/getit/)
    下载。
- en: What is OpenCV?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 OpenCV？
- en: '**OpenCV** stands for **Open Computer Vision**. OpenCV is an open source computer
    vision and machine learning software library that was built with C++ and has C++,
    Python, Java, and Matlab interfaces to support Windows, Linux, Android, and macOS.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**OpenCV** 代表 **Open Computer Vision**。OpenCV 是一个开源的计算机视觉和机器学习软件库，它使用 C++ 构建，并具有
    C++、Python、Java 和 Matlab 接口，以支持 Windows、Linux、Android 和 macOS。'
- en: OpenCV mainly focuses on real-time vision applications, although it can be used
    for machine learning very nicely. The library has many optimized algorithms and
    functions to compose or support such algorithms for state-of-the-art computer
    vision and machine learning, with roughly 2,500\. To break down the ratio here,
    there are roughly 500 algorithms, and the rest are functions to compose or support
    these algorithms.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV 主要关注实时视觉应用，尽管它也可以很好地用于机器学习。该库有许多优化的算法和函数，用于组成或支持这些算法，以支持最先进的计算机视觉和机器学习，大约有
    2,500 个。要具体说明这个比例，大约有 500 个算法，其余的是用于组成或支持这些算法的函数。
- en: Talking about algorithms is fun and all, but I’m sure you are more interested
    in knowing what these algorithms are capable of doing. The algorithms are designed
    to be used to detect faces, recognize faces, identify objects, detect and classify
    human actions in video feeds, track camera movements, move object tracking, extraction
    of 3D models from objects, produce point clouds from stereo cameras in 3D, stitch
    images together for high resolution images, quickly find the same or similar images
    from an image database, red-eye removal, eye tracking, detect scenery, and establish
    markers for augmented reality overlay, and so much more.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论算法很有趣，但我想你更想知道这些算法能做什么。这些算法被设计用来检测人脸、识别人脸、识别物体、在视频流中检测和分类人类动作、跟踪相机运动、移动对象跟踪、从物体中提取3D模型、从立体相机中生成点云以在3D中制作，将图像拼接成高分辨率图像、快速从图像数据库中找到相同或相似的图像、去除红眼、眼动追踪、检测场景、并为增强现实叠加建立标记，以及更多。
- en: OpenCV can work with TensorFlow, Caffe, Torch, Yolo, Vuforia, ARCore, and ARKit
    with ease. OpenCV can be used for **Augmented Reality** (**AR**), **Virtual Reality**
    (**VR**), and **Mixed Reality** (**MR**). You can use visual scripting options,
    such as PlayMaker, and have access to all methods available in OpenCV. OpenCV
    also works with tons of different hardware, such as HoloLens, Oculus Rift, Telepathy,
    Kinect, and Raspberry Pi, to name a few.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: OpenCV可以轻松与TensorFlow、Caffe、Torch、Yolo、Vuforia、ARCore和ARKit一起工作。OpenCV可用于**增强现实**（**AR**）、**虚拟现实**（**VR**）和**混合现实**（**MR**）。你可以使用视觉脚本选项，如PlayMaker，并访问OpenCV中所有可用的方法。OpenCV还与众多不同的硬件兼容，例如HoloLens、Oculus
    Rift、Telepathy、Kinect和Raspberry Pi等。
- en: We have two different options for gaining access to OpenCV. The first one is
    to build from source and create our own wrappers to create a Unity plugin for
    OpenCV. The second option is to purchase OpenCV for Unity from the Unity Asset
    Store.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有两种不同的方式来获取对OpenCV的访问权限。第一种是从源代码构建并创建我们自己的包装器来创建一个Unity插件。第二种是从Unity Asset
    Store购买OpenCV for Unity。
- en: If you want to go the easy route and purchase the Unity extension, it will cost
    70 dollars, unless you have a Unity Plus/Pro membership, which will decrease the
    cost to 56 dollars. The good news is that it supports Unity Version 5.6 or greater
    and is based on OpenCV 3.4.1.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要走捷径并购买Unity扩展，它将花费70美元，除非你有Unity Plus/Pro会员资格，这将把成本降低到56美元。好消息是它支持Unity版本5.6或更高版本，并且基于OpenCV
    3.4.1。
- en: There are sample assets packs that you can download from the Unity Asset Store
    or from GitHub that will give you prebuilt examples for working with HoloLens
    Face Detection Overlay, FaceLandmark Detection, Facemasking, Real-time Face Recognition,
    Markerless AR. Face Swapping, Kinect with OpenCV, Facetracking, working with Vuforia
    and OpenCV, and marker-based AR.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从Unity Asset Store或GitHub下载示例资产包，这些包将为你提供用于与HoloLens人脸检测叠加、人脸关键点检测、面部遮罩、实时人脸识别、无标记AR、面部交换、与OpenCV结合的Kinect、面部跟踪、与Vuforia和OpenCV一起工作以及基于标记的AR等工作的预构建示例。
- en: Now, the other option, in other words, the cheap route, because, let's be honest,
    the Unity plugin is rather pricey, especially for younger developers or those
    who just want to try out OpenCV to see whether it is a good fit, is to build from
    source. What benefits do we gain from build from source, besides the low cost?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，另一种选择，换句话说，是便宜的方法，因为，让我们说实话，Unity插件相当昂贵，尤其是对于年轻的开发者或那些只想尝试OpenCV以看它是否适合的人。从源代码构建的好处是什么，除了低成本之外？
- en: We get to decide which aspects of the library we need, for one. This is a huge
    bonus, as we can remove bloat to reduce the file and compile size. However, even
    when doing this, you can have the same features, or even more than the Unity plugin,
    since you are building from source.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们有权决定需要库的哪些方面，这是一个巨大的优势，因为我们可以通过移除冗余来减少文件和编译的大小。然而，即使这样做，你仍然可以拥有与Unity插件相同的功能，甚至更多，因为你是在从源代码构建。
- en: The downside is that there are many things you need to get the full compilation
    of the source taken care of, which is dependent on whether you want to use prebuilt
    binaries or building your own library from scratch.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 坏处是，你需要处理许多事情才能完成源代码的完整编译，这取决于你是否想使用预构建的二进制文件还是从头开始构建自己的库。
- en: To build from scratch, you will need Visual Studio with C++ modules installed,
    CMake, Python Version 2.7 or later, Numpy, **Intel Threading Building Blocks**
    (**TBB**), **Intel Integrated Performance Primitives** (**IPP**), Intel IPP Asynchronous
    C/C++, Eigen, CUDA Toolkit, OpenEXR, OpenNI Framework, and Doxygen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 要从头开始构建，你需要安装了C++模块的Visual Studio，CMake，Python 2.7或更高版本，Numpy，**Intel Threading
    Building Blocks**（**TBB**），**Intel Integrated Performance Primitives**（**IPP**），Intel
    IPP Asynchronous C/C++，Eigen，CUDA Toolkit，OpenEXR，OpenNI Framework，以及Doxygen。
- en: Creating the project with paid assets
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用付费资产创建项目
- en: 'In this section, we will use the Unity asset files, as they are a bit shorter
    to set up. The Dlib FaceLandmark Detector costs 40 dollars, and OpenCV for Unity
    costs 70 dollars. That means to build this project, you will need to have spent
    110 dollars. Sadly, there are no free alternatives in the Unity Asset store, and
    if you want to build the project without purchasing the assets, you will need
    to build the wrappers and implementations on your own. Now, follow these steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用Unity资产文件，因为它们设置起来更短。Dlib FaceLandmark Detector的价格为40美元，OpenCV for
    Unity的价格为70美元。这意味着要构建这个项目，你需要花费110美元。遗憾的是，Unity资产商店中没有免费的替代品，如果你想在没有购买资产的情况下构建项目，你需要自己构建包装和实现。现在，按照以下步骤操作：
- en: 'Create a brand new Unity Project. I will call mine `Snap`:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity项目。我将称它为`Snap`：
- en: '![](img/64f7bcea-1fb3-4ca0-b3e8-2b5e35ce97c3.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/64f7bcea-1fb3-4ca0-b3e8-2b5e35ce97c3.png)'
- en: 'Make sure your `Assets` directory is completely empty:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你的`Assets`目录完全为空：
- en: '![](img/3f324d43-9919-4ab8-8c67-1ab91427bc03.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f324d43-9919-4ab8-8c67-1ab91427bc03.png)'
- en: The text in this screenshot is not important. It indicates that the Assets directory
    is empty.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这张截图中的文本并不重要。它表明资产目录是空的。
- en: 'We will start by importing OpenCV into Unity. This will take some time to complete:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先将OpenCV导入Unity。这需要一些时间来完成：
- en: '![](img/890e2dc0-d64b-4681-be2e-6393cfc91f44.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/890e2dc0-d64b-4681-be2e-6393cfc91f44.png)'
- en: 'You will have many examples that include some very nice shaders that can be
    used in other projects, so import everything:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你将会有很多示例，包括一些非常好的着色器，这些着色器可以在其他项目中使用，所以导入所有内容：
- en: '![](img/524a3073-d311-4eb9-afad-05e1f3fb44df.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/524a3073-d311-4eb9-afad-05e1f3fb44df.png)'
- en: 'Your `Assets` directory should have an `OpenCVForUnity` and a `Realistic_Water_Fountain`
    folder:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的`Assets`目录应该有一个`OpenCVForUnity`和一个`Realistic_Water_Fountain`文件夹：
- en: '![](img/f6005e6e-6c14-4336-b053-eaa6ec51ed9d.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6005e6e-6c14-4336-b053-eaa6ec51ed9d.png)'
- en: Now, we will need to import the Dlib Facelandmark Detector.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要导入Dlib Facelandmark Detector。
- en: 'The last asset we will need is the FaceMask Example. Click on this link: [https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999](https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999).
    [](https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999)'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最后需要的资产是FaceMask示例。点击此链接：[https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999](https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999)。
    [](https://assetstore.unity.com/packages/templates/tutorials/facemask-example-79999)
- en: This package contains some additional scripts, as well as some examples of how
    to apply face masking to the camera, to be able to record videos or take a picture.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此软件包包含一些额外的脚本，以及如何将面部遮挡应用于摄像头的一些示例，以便能够录制视频或拍照。
- en: Use the FaceMask Example scene, and this will create our basic prototype.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用FaceMask示例场景，这将创建我们的基本原型。
- en: We now have a working prototype for Snap it. You can add more features such
    as different items to cover the face, cover only a small portion of the head,
    add shader effects to the scene, and so much more to create your own feature-rich
    AR application based on OpenCV and the Dlib Facelandmark Detector.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有了Snap的可用原型。你可以添加更多功能，比如不同的面部覆盖物品，只覆盖头部的一小部分，为场景添加着色器效果，等等，以创建基于OpenCV和Dlib
    Facelandmark Detector的自己的功能丰富的AR应用。
- en: Installing and building OpenCV
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和构建OpenCV
- en: Now, what if you don’t have the funds to build this project with paid assets
    that would make your life easier? Well, the option is to build from scratch. It
    is much more involved and is generally a rabbit hole that more experienced developers
    tend to go down than beginners.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你没有足够的资金使用付费资产来简化你的生活，你会怎么办？好吧，选择从头开始构建。这要复杂得多，通常是一个只有经验丰富的开发者才会深入其中的兔子洞，而对于初学者来说则不然。
- en: This isn’t to say that beginners can’t follow along and build from scratch themselves;
    in fact, I suggest that if you are a beginner, follow along, as there are many
    new things to learn from this exercise, from dealing with other people’s source
    files, to incorporating them into your own projects with an understanding of that
    code base.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是说初学者不能跟随并从头开始构建；事实上，我建议如果你是初学者，就跟随，因为从这个练习中可以学到很多新东西，从处理他人的源文件，到理解代码库并将其纳入自己的项目中。
- en: To get OpenCV set up to run with Unity, we have a few steps we need to go through.
    We need to download OpenCV and CMake. OpenCV is the library we will be heavily
    utilizing, and CMake is the software that allows us to manage the build process
    in any given operating system and compiler with independence in mind.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要将OpenCV设置好以便与Unity一起运行，我们需要经过几个步骤。我们需要下载OpenCV和CMake。OpenCV是我们将大量使用的库，而CMake是允许我们在任何给定的操作系统和编译器中独立管理构建过程的软件。
- en: Downloading OpenCV
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载OpenCV
- en: 'Let''s get started by first downloading OpenCV. We could go down the route
    of getting the pure source files or by getting the prebuilt binaries, both of
    which have their own pros and cons associated with them. For example, the pure
    source files version would require us to have every library used within OpenCV
    and language associated installed and configured to be able to build our own binaries.
    We will simplify the process just a hair, by going with the prebuilt binaries
    approach. Follow these steps:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先下载OpenCV开始。我们可以选择获取纯源文件或预构建的二进制文件，这两种方法都有其自身的优缺点。例如，纯源文件版本将要求我们安装并配置OpenCV中使用的每个库和语言，以便能够构建自己的二进制文件。我们将通过选择预构建二进制方法来简化这个过程。按照以下步骤操作：
- en: 'To get started with building OpenCV from prebuilt binaries, we first need to
    download the files we need. There are two possibilities for this, [https://opencv.org/opencv-3-3.html](https://opencv.org/opencv-3-3.html) or [https://sourceforge.net/projects/opencvlibrary/](https://sourceforge.net/projects/opencvlibrary/):'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要从预构建二进制文件开始构建OpenCV，我们首先需要下载所需的文件。有两种可能性，[https://opencv.org/opencv-3-3.html](https://opencv.org/opencv-3-3.html)
    或 [https://sourceforge.net/projects/opencvlibrary/](https://sourceforge.net/projects/opencvlibrary/)：
- en: '![](img/e809b27c-d8c5-4827-b9c7-15e9deb929ab.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e809b27c-d8c5-4827-b9c7-15e9deb929ab.png)'
- en: 'We need to choose the installation version we want; in this case, I am going
    to go with the latest version, which is `3.4.1`, as it is the same as the Unity
    extension version:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要选择我们想要的安装版本；在这种情况下，我将选择最新版本，即`3.4.1`，因为它与Unity扩展版本相同：
- en: '![](img/db0ce217-96bd-4d8a-b2da-8a1eb5777a33.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db0ce217-96bd-4d8a-b2da-8a1eb5777a33.png)'
- en: 'The executable file is 172 MB in size, so, depending on your internet connection
    speeds, you could have a long download time:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可执行文件大小为172 MB，因此，根据你的互联网连接速度，下载时间可能会很长：
- en: '![](img/5ba285fe-7f10-473c-b197-64858e3846b9.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5ba285fe-7f10-473c-b197-64858e3846b9.png)'
- en: 'Create a new folder to house the extracted OpenCV files:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的文件夹来存放提取的OpenCV文件：
- en: '![](img/da706ce1-662a-43fa-bc2e-308d8bebb54f.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/da706ce1-662a-43fa-bc2e-308d8bebb54f.png)'
- en: 'Now, we have our OpenCV self-extracting file:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们有了OpenCV自解压文件：
- en: '![](img/0c4aa73f-92da-4d5a-a5d1-ac538038b2f2.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c4aa73f-92da-4d5a-a5d1-ac538038b2f2.png)'
- en: 'Right-click on the installer file, and select Run as administrator. We need
    to have elevated privileges to make sure the project extracts correctly:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击安装文件，并选择以管理员身份运行。我们需要提升权限以确保项目正确提取：
- en: '![](img/d5a4224b-4f59-4e2e-ae9b-fdebf4a02a5f.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d5a4224b-4f59-4e2e-ae9b-fdebf4a02a5f.png)'
- en: 'Select the folder you created as the installation location:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你创建的文件夹作为安装位置：
- en: '![](img/c2b5cffa-114f-4302-952c-38e4d5b6f868.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c2b5cffa-114f-4302-952c-38e4d5b6f868.png)'
- en: 'Extracting the files should not take long:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取文件不应花费很长时间：
- en: '![](img/6a4c8b69-656f-40d7-90de-6c598a0dc69b.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a4c8b69-656f-40d7-90de-6c598a0dc69b.png)'
- en: Now, we have extracted OpenCV.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们已经提取了OpenCV。
- en: Downloading CMake
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载CMake
- en: Now that OpenCV has been download, it is time to do the same for CMake, as both
    of these files are integral to continuing properly.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在OpenCV已经下载完毕，是时候下载CMake了，因为这两个文件对于正确继续都是必不可少的。
- en: This is only the case if you decided to go with the source direction instead
    of the binaries method, so I will touch on these steps a little as well.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这只适用于你决定选择源代码方向而不是二进制方法的情况，所以我也将简要介绍这些步骤。
- en: Downloading CMake is a rather quick and painless process, regardless of whether
    you are using Linux, macOS, or Windows. Since I want to build with Windows, I
    will showcase the steps with that particular OS in mind.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 CMake 是一个相当快速且无痛苦的过程，无论您使用的是 Linux、macOS 还是 Windows。由于我想用 Windows 进行构建，我将针对该特定操作系统展示步骤。
- en: 'Go to [CMake.org](http://cmake.org); click on download latest, and scroll down
    to latest release to download CMake:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问 [CMake.org](http://cmake.org)；点击下载最新版本，然后滚动到最新发布版下载 CMake：
- en: '![](img/fa543085-c027-4290-969c-00071cb4f76f.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fa543085-c027-4290-969c-00071cb4f76f.png)'
- en: 'Double-click on CMake to run the setup wizard:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 CMake 运行安装向导：
- en: '![](img/81fb3d13-abaa-45b1-a644-b1675689ef39.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/81fb3d13-abaa-45b1-a644-b1675689ef39.png)'
- en: 'Put a check mark in the *License Agreement* block and click Next:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 *许可协议* 块中勾选复选框，然后点击下一步：
- en: '![](img/503a8932-2986-4376-940f-225476bca0c8.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/503a8932-2986-4376-940f-225476bca0c8.png)'
- en: Make sure to Add CMake to the system PATH for current or all users, depending
    on your preference. Just make sure that it is set to the system path before clicking
    Next**:**
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保将 CMake 添加到系统 PATH 中，针对当前用户或所有用户，具体取决于您的偏好。只需确保在点击下一步之前将其设置为系统路径即可：**
- en: '![](img/2f6792e1-5178-40bd-b1c6-219b29b9bd80.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2f6792e1-5178-40bd-b1c6-219b29b9bd80.png)'
- en: 'Click Next to install CMake to whatever folder you want:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下一步将 CMake 安装到您想要的任何文件夹：
- en: '![](img/895b373b-3549-4e5d-9c85-04075fc19475.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/895b373b-3549-4e5d-9c85-04075fc19475.png)'
- en: 'To install CMake, it requires elevated privilges, so if you have UAC enabled
    and don''t have admin rights, make sure you have someone nearby that can give
    you access to install:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装 CMake，需要提升权限，因此如果您启用了 UAC 并且没有管理员权限，请确保附近有可以给您安装权限的人：
- en: '![](img/1dc79725-65c3-4e93-b1b0-415709c97e70.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1dc79725-65c3-4e93-b1b0-415709c97e70.png)'
- en: 'Installation will take a few minutes to complete:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装过程可能需要几分钟才能完成：
- en: '![](img/7638fe0b-cd20-4ced-9cd4-03beb389e82b.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7638fe0b-cd20-4ced-9cd4-03beb389e82b.png)'
- en: 'Click Finish to complete the installation process:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击完成以完成安装过程：
- en: '![](img/e33cc4b8-c7ec-4b02-b02c-79215c18c6cf.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e33cc4b8-c7ec-4b02-b02c-79215c18c6cf.png)'
- en: Configuring the CMake and OpenCV source files
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 CMake 和 OpenCV 源文件
- en: Now, we can move on to configuring CMake and getting everything set up to build
    OpenCV as a library to utilize within Unity. Now, to do this, you need the full-on
    source code of OpenCV, instead of the binaries, which you can grab from [https://github.com/opencv/opencv/archive/3.3.0.zip](https://github.com/opencv/opencv/archive/3.3.0.zip).
    or [https://github.com/opencv/opencv/archive/3.3.0.zip](https://github.com/opencv/opencv/archive/3.3.0.zip).
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续配置 CMake，并设置好所有内容以构建 OpenCV 库，以便在 Unity 中使用。为此，您需要 OpenCV 的完整源代码，而不是二进制文件，您可以从
    [https://github.com/opencv/opencv/archive/3.3.0.zip](https://github.com/opencv/opencv/archive/3.3.0.zip)
    或 [https://github.com/opencv/opencv/archive/3.3.0.zip](https://github.com/opencv/opencv/archive/3.3.0.zip)
    获取。
- en: Start *CMake (*`CMake-gui`*)*. You may again enter it in the start menu search
    or get it from All Programs | CMake 2.8 | CMake (`CMake-gui`). First, select the
    directory for the source files of the OpenCV library (1). Then, specify a directory
    where you will build the binary files for OpenCV library (2).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 启动 *CMake (*`CMake-gui`*)*。您可以在开始菜单的搜索中再次输入它，或在所有程序 | CMake 2.8 | CMake (`CMake-gui`)
    中获取它。首先，选择 OpenCV 库源文件的目录（1）。然后，指定您将构建 OpenCV 库二进制文件的目录（2）。
- en: Press the Configure button to specify the compiler (and the IDE) you want to
    use. Note that you can choose between different compilers for making either 64
    bit or 32 bit libraries. Select the one you use in your application development.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 点击配置按钮以指定您想要使用的编译器（以及 IDE）。请注意，您可以选择不同的编译器来制作 64 位或 32 位库。选择您在应用程序开发中使用的编译器。
- en: CMake will start based on your system variables and will try to automatically
    locate as many packages as possible. You can modify the packages to use for the
    build in the *WITH ‣ WITH_X* menu points (where *X* is the package abbreviation).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: CMake 将根据您的系统变量启动，并尝试自动定位尽可能多的包。您可以在 *WITH ‣ WITH_X* 菜单点中修改用于构建的包（其中 *X* 是包缩写）。
- en: Select all the packages you want to use, and again press the Configure button.
    For an easier overview of the build options, make sure the Grouped option under
    the binary directory selection is turned on. For some of the packages, CMake may
    not find all of the required files or directories. If it doesn't find all of them,
    CMake will throw an error in its output window (located at the bottom of the GUI)
    and set its field values to not-found constants.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选择您想要使用的所有包，然后再次按下“Configure”按钮。为了更容易地查看构建选项，请确保在二进制目录选择下的“Grouped”选项已开启。对于某些包，CMake
    可能无法找到所有必需的文件或目录。如果它找不到所有这些文件，CMake 将在其输出窗口（位于 GUI 底部）中抛出错误，并将其字段值设置为未找到的常量。
- en: Press the Configure button again and ensure that no errors are reported. CMake
    will create the project files by pushing the Generate button. Go to the build
    directory and open the created OpenCVsolution. Depending on just how many options
    you have selected, the solution may contain quite a lot of projects, so be tolerant
    on the IDE at the startup. Now, you need to build both the Release and the Debug binaries.
    Use the drop-down menu on your IDE to change to another of these after building
    for one of them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 再次按下“Configure”按钮，并确保没有错误报告。CMake 将通过按下“Generate”按钮创建项目文件。转到构建目录并打开创建的 OpenCV
    解决方案。根据您选择了多少选项，解决方案可能包含相当多的项目，因此请在 IDE 启动时保持耐心。现在，您需要构建“Release”和“Debug”二进制文件。使用
    IDE 上的下拉菜单在构建其中一个之后切换到另一个。
- en: In the end, you can observe the built binary files inside the bin directory.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以在 bin 目录中观察到构建的二进制文件。
- en: To collect the header and the binary files, which you will use during your own
    projects, into a separate directory (similarly to how the pre-built binaries ship),
    you need to explicitly build the Install project.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要将您在项目中使用头文件和二进制文件收集到单独的目录中（类似于预构建的二进制文件的方式），您需要明确构建“Install”项目。
- en: To test your build, just go into the Build/bin/Debug or the Build/bin/Release directory
    and start a couple of applications, such as `contours.exe`. If they run, you are
    done.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的构建，只需进入“Build/bin/Debug”或“Build/bin/Release”目录，并启动几个应用程序，例如“`contours.exe`”。如果它们运行，则表示您已完成。
- en: For more in-depth information on this, go to [https://docs.opencv.org/3.0-beta/doc/tutorials/introduction/windows_install/windows_install.html](https://docs.opencv.org/3.0-beta/doc/tutorials/introduction/windows_install/windows_install.html).
    The OpenCV documentation will go into this in more detail, along with the other
    tools you will need to install to go down this route.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于此方面的详细信息，请访问 [https://docs.opencv.org/3.0-beta/doc/tutorials/introduction/windows_install/windows_install.html](https://docs.opencv.org/3.0-beta/doc/tutorials/introduction/windows_install/windows_install.html)。OpenCV
    文档将更详细地介绍此内容，以及您将需要安装的其他工具以走这条路。
- en: OpenCV with Unity
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenCV 与 Unity
- en: 'We can now move on to importing our dlls into Unity and writing our wrapper
    classes to handle interfacing with OpenCV and Unity. That way, we can then create
    our scripts to build our project:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以继续将我们的 dlls 导入 Unity，并编写我们的包装类以处理与 OpenCV 和 Unity 的接口。这样，我们就可以创建我们的脚本来构建我们的项目：
- en: 'Create a folder. I will call mine `ConfigureOpenCV`:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个文件夹。我将我的文件夹命名为 `ConfigureOpenCV`：
- en: '![](img/3edd7e61-e7b6-4d7b-b13f-955a660da48e.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3edd7e61-e7b6-4d7b-b13f-955a660da48e.png)'
- en: 'We need to create a new empty C++ project in Visual Studio. I will call mine
    `ConfigureOpenCV`, with the location being set in the `ConfigureOpenCV` folder:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要在 Visual Studio 中创建一个新的空 C++ 项目。我将我的项目命名为 `ConfigureOpenCV`，并将其位置设置为 `ConfigureOpenCV`
    文件夹中：
- en: '![](img/7d660bf5-5a49-44cf-9ef0-ebc1f10cbc98.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d660bf5-5a49-44cf-9ef0-ebc1f10cbc98.png)'
- en: 'Set the platform to be x64 in Visual Studio:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中将平台设置为 x64：
- en: '![](img/4f55c008-b1d3-409a-a190-d25f909da730.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4f55c008-b1d3-409a-a190-d25f909da730.png)'
- en: 'Right-click on the project properties file and select Properties:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击项目属性文件并选择“属性”：
- en: '![](img/fb89f7de-2ded-4b07-b162-e323f75f57bb.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb89f7de-2ded-4b07-b162-e323f75f57bb.png)'
- en: 'This will open our properties window:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开我们的属性窗口：
- en: '![](img/ae69cc62-b35f-4c71-b226-a6ace13773cd.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae69cc62-b35f-4c71-b226-a6ace13773cd.png)'
- en: 'The first thing we need to do is change Target Extension in the General tab
    from `.exe` to `.dll`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是在“常规”选项卡中将目标扩展名从 `.exe` 更改为 `.dll`：
- en: '![](img/0689343f-c04e-4bd8-b999-4f3da3d80307.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0689343f-c04e-4bd8-b999-4f3da3d80307.png)'
- en: 'We need to change the Configuration Type from Application (.exe) to Dynamic
    Library (.dll):'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将配置类型从应用程序 (.exe) 更改为动态库 (.dll)：
- en: '![](img/1f7f6cfb-5012-4327-8ea9-e881014a1c40.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f7f6cfb-5012-4327-8ea9-e881014a1c40.png)'
- en: 'Over in VC++ Directories, add our `OPENCV_DIRs` to include it in Include Directories:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在VC++目录中，将我们的`OPENCV_DIRs`添加到包含目录中：
- en: '![](img/598d5514-5071-4414-8a86-c8e04593f4e5.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/598d5514-5071-4414-8a86-c8e04593f4e5.png)'
- en: 'Over in Linker’s General Tab, add `$(OPENCV_DIR)\lib\Debug` to the Additional
    Library Directories option:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在链接器的一般选项卡中，将`$(OPENCV_DIR)\lib\Debug`添加到附加库目录选项中：
- en: '![](img/ce80415d-0e19-4f1f-8506-144a981ddc66.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ce80415d-0e19-4f1f-8506-144a981ddc66.png)'
- en: 'Finally, in the Linker’s Input tab, we need to add a few items to the Additional
    Dependencies option. Those items will be the following:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在链接器的输入选项卡中，我们需要将一些项目添加到附加依赖项选项中。这些项目将是以下内容：
- en: '`opencv_core310.lib` (or `opencv_world330.lib`, depending on your OpenCV version)'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencv_core310.lib`（或`opencv_world330.lib`，取决于您的OpenCV版本）'
- en: '`opencv_highgui310.lib`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencv_highgui310.lib`'
- en: '`opencv_objdetect310.lib`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencv_objdetect310.lib`'
- en: '`opencv_videoio310.lib`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencv_videoio310.lib`'
- en: '`opencv_imgproc310.lib`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`opencv_imgproc310.lib`'
- en: '![](img/a184e3dd-cefb-4278-a556-710f1ac4fe0e.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a184e3dd-cefb-4278-a556-710f1ac4fe0e.png)'
- en: Figure shows the location of Additional Dependencies in the Linker's Input tab
    with opencv_core added.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图表显示了链接器输入选项卡中附加依赖项的位置，其中添加了opencv_core。
- en: 'Now, we can create a new CPP file:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以创建一个新的CPP文件：
- en: '![](img/065b7a6c-3440-4dd3-bfc3-7b5c91533284.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/065b7a6c-3440-4dd3-bfc3-7b5c91533284.png)'
- en: 'We will now incorporate the headers and namespaces we absolutely need here:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将现在整合我们绝对需要的头文件和命名空间：
- en: '[PRE0]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Declare a `struct` that will be used to pass data from C++ to Mono:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 声明一个`struct`，它将被用来从C++传递数据到Mono：
- en: '[PRE1]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`CascadeClassifer` is a class used for object detection:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`CascadeClassifer`是一个用于对象检测的类：'
- en: '[PRE2]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a string that will serve as the name of the window:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个字符串，它将作为窗口名称：
- en: '[PRE3]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Video Capture is a class used to open a video file, or capture a device or
    an IP video stream for video capture:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 视频捕获是一个用于打开视频文件、捕获设备或IP视频流以进行视频捕获的类：
- en: '[PRE4]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create an integer value to store the scale:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于存储缩放的整数值：
- en: '[PRE5]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`extern "C"`, as a refresher, will avoid name mangling from C++. Our first
    method is `Init` for initialization:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`extern "C"`，作为一个提醒，将避免C++的名称修饰。我们的第一个方法是`Init`用于初始化：'
- en: '[PRE6]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will create an `if` statement to load the LBP face `cascade.xml` file that
    is part of `CVFeatureParams`; if it cannot load, then it will exit with a return
    code of `-1`:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个`if`语句来加载`CVFeatureParams`部分中的LBP人脸`cascade.xml`文件；如果无法加载，则将退出并返回代码`-1`：
- en: '[PRE7]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we will open the video capture stream:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将打开视频捕获流：
- en: '[PRE8]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If the video stream is not opened, then we will exit with a return code of
    `-2`:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果视频流没有打开，我们将以返回代码`-2`退出：
- en: '[PRE9]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will set the camera width:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将设置相机宽度：
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And we also need to set the camera height:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还需要设置相机高度：
- en: '[PRE11]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, we need to make sure that we create a method to close the capture stream
    and release the video capture device:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要确保我们创建一个方法来关闭捕获流并释放视频捕获设备：
- en: '[PRE12]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next step is to create a method that sets the video scale:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是创建一个设置视频缩放的方法：
- en: '[PRE13]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next up, we will create a method that allows us to detect an object:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个方法，使我们能够检测一个对象：
- en: '[PRE14]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Next up, if the frame is empty, we need to guard against possible errors from
    this by exiting from the method:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，如果帧为空，我们需要通过从方法中退出来防止由此产生的可能错误：
- en: '[PRE15]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Create a vector called `faces`*:*
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`faces`的向量：
- en: '[PRE16]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We will create Mat, which is one of the various constructors that forms a matrix
    with the name of `grayscaleFrame`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建一个名为`grayscaleFrame`的`Mat`，这是形成矩阵的各种构造函数之一：
- en: '[PRE17]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We then need to convert the frame to grayscale from RGB colorspace for proper
    cascade detection:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来需要将帧从RGB颜色空间转换为灰度，以便进行适当的级联检测：
- en: '[PRE18]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The next step is to scale down for better performance:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将视频缩放缩小以获得更好的性能：
- en: '[PRE19]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Next up, we will detect the `faces`:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将检测`faces`：
- en: '[PRE20]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We will now create a for loop to draw the faces:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将创建一个循环来绘制人脸：
- en: '[PRE21]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we will send this information to the application:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将将这些信息发送到应用程序：
- en: '[PRE22]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Since we have a matrix, we need to make sure that we don''t exceed the limits
    of the array. To do this, we will break if the faces count is equal to the max
    amount of faces count we have allocated; if it is, exit from the loop:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们有一个矩阵，我们需要确保我们不会超过数组的限制。为此，如果人脸计数等于我们分配的最大人脸计数，我们将退出循环：
- en: '[PRE23]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The last thing we need to do is display the debug output:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们最后需要做的是显示调试输出：
- en: '[PRE24]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Now, build the `dll` file, and we can now begin to work in Unity.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，构建`dll`文件，我们就可以开始在Unity中工作了。
- en: OpenCV and Unity
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: OpenCV和Unity
- en: Now, we can finally start working in Unity in this section. This is the easier
    part, where we just need to create our wrapper and our `MonoBehaviour` script
    to attach to an object.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们终于可以在这个部分开始使用Unity了。这是比较简单的一部分，我们只需要创建我们的包装器和附加到对象的`MonoBehaviour`脚本。
- en: 'Navigate to the `dll` file that we created. This should be in the x64 | Debug
    folder of the source project:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到我们创建的`dll`文件。这应该在源项目的x64 | Debug文件夹中：
- en: '![](img/38201014-b86b-40bc-ab33-12366254ab8a.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38201014-b86b-40bc-ab33-12366254ab8a.png)'
- en: Create two folder called `Plugins` and `Scripts` in Unity, just as we did in
    `Chapter3`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中创建两个名为`Plugins`和`Scripts`的文件夹，就像我们在`第3章`中做的那样。
- en: Now, we will create two scripts. One for our `Wrapper` class, and the other
    for our `MonoBehaviour`. The `Wrapper` class will be called `OpenCVWrapper`, and
    the `MonoBehaviour` class will be called `OpenCVFaceDetection`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建两个脚本。一个用于我们的`Wrapper`类，另一个用于我们的`MonoBehaviour`。`Wrapper`类将被命名为`OpenCVWrapper`，而`MonoBehaviour`类将被命名为`OpenCVFaceDetection`。
- en: Open the `OpenCVWrapper` class in Visual Studio. It is time to write some more
    code.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在Visual Studio中打开`OpenCVWrapper`类。现在是时候写一些代码了。
- en: 'We only need to use the `InteropServices` namespace for this class:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要为这个类使用`InteropServices`命名空间：
- en: '[PRE25]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will create an `internal static class` this time around:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`internal static class`，这次：
- en: '[PRE26]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will import the `Init` function that we created in the last step, and we
    need to make sure that we reference the parameters. The `ref` keyword is very
    similar to the `&` keyword in C++:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入我们在上一步创建的`Init`函数，并确保我们引用了参数。`ref`关键字与C++中的`&`关键字非常相似：
- en: '[PRE27]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We will import the `Close` function, which closes the connection and will avoid
    memory leaks when we use the functions that we''ve created:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入`Close`函数，它将关闭连接，并避免我们在使用我们创建的函数时出现内存泄漏：
- en: '[PRE28]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We will import the `SetScale` function we created, along with keeping the parameters
    that we required in C++:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入我们创建的`SetScale`函数，同时保留我们在C++中需要的参数：
- en: '[PRE29]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'We will import the `Detect` function, and this one is a bit different, as we
    are actually using a pointer; this will be very important very soon, as this deals
    with unsafe code in C# and Unity. If you aren''t familiar, the `*` keyword denotes
    a pointer, which is the address of the object in memory:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将导入`Detect`函数，这个函数有点不同，因为我们实际上使用了一个指针；这很快就会变得非常重要，因为它涉及到C#和Unity中的不安全代码。如果你不熟悉，`*`关键字表示指针，它是对象在内存中的地址：
- en: '[PRE30]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Lastly, we will create a structure that needs to be sequential and with the
    correct byte size (3 ints = 4 bytes * 3 = 12 bytes) for CvCircle:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将创建一个需要顺序排列且具有正确字节大小（3个整数= 4字节 * 3 = 12字节）的结构，用于CvCircle：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This takes care of the wrapper class, and we can now move over to our `MonoBehaviour`
    class.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这就处理了包装类，我们现在可以转到我们的`MonoBehaviour`类。
- en: 'We need a few namespaces, as they will be fully utilized in this script:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要几个命名空间，因为它们将在脚本中完全使用：
- en: '[PRE32]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'We have our class named the same as the file in the Unity Editor and inherit
    from `MonoBehaviour`:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在Unity编辑器中的类名与文件名相同，并继承自`MonoBehaviour`：
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The main thing to notice here is that I have a reference to the camera and
    a `WebCamTexture`. This is because we will feed the data from the webcam to the
    camera:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里需要注意的主要是，我有一个对摄像头的引用和一个`WebCamTexture`。这是因为我们将从网络摄像头向摄像头提供数据：
- en: '[PRE34]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'In this `Start` method, we get everything set up and running. We also check
    to make sure that the `cascades.xml` file is able to be found (more on that in
    the next section):'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个`Start`方法中，我们设置并运行一切。我们还检查确保`cascades.xml`文件可以被找到（更多内容将在下一节中介绍）：
- en: '[PRE35]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This method will make sure that the connections are closed to the webcam. This
    will free up the resources and make sure that we don''t leak any memory:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方法将确保与网络摄像头的连接被关闭。这将释放资源并确保我们不会泄漏任何内存：
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This `Update` method makes sure that the orientation of the webcam is corrected,
    checks whether the camera is read or not, and actively tracks for face detection:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`Update`方法确保网络摄像头的方向被纠正，检查摄像头是否被读取，并积极跟踪人脸检测：
- en: '[PRE37]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Save the script and go back to the Unity Editor. You will immediately notice
    that Unity will show an error along the lines of *unsafe code needs to be allowed*.
    Let's go ahead and enable this feature. To do this, go to your Player Settings,
    which is located inside the Build Settings.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并返回Unity编辑器。你会立即注意到Unity会显示一个类似“需要允许不安全代码”的错误。让我们继续并启用这个功能。为此，前往你的玩家设置，它位于构建设置内部。
- en: 'Inside the Player Settings, look down at the configuration inside Other Settings,
    and there is a checkbox called Allow ''unsafe'' Code. Make sure that it is checked:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在玩家设置中，向下查看其他设置中的配置，有一个名为“允许不安全代码”的复选框。请确保它被勾选：
- en: '![](img/6f76df7c-042d-4539-9be0-99b572b37bb9.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6f76df7c-042d-4539-9be0-99b572b37bb9.png)'
- en: In the `Scripts` folder, you need one more file to be added; in my example file
    that you can download, I have quite a few more `.xml` files than what I am going
    to tell you to add. The reason for this is to allow you to play around with the
    different `.xml` files to see their results. You will have to update the C++ plugin
    to account for the proper `.xml` file you want to use; alternatively, you can
    update the `Init` function to take a string parameter to be able to change the
    `.xml` file in the Unity Editor.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Scripts`文件夹中，你需要添加一个额外的文件；在我的示例文件中，你可以下载，我比你要添加的`.xml`文件多得多。这样做的原因是让你能够尝试不同的`.xml`文件，看看它们的结果。你将不得不更新C++插件以适应你想要使用的正确的`.xml`文件；或者，你可以更新`Init`函数以接受一个字符串参数，以便在Unity编辑器中更改`.xml`文件。
- en: 'In your `OpenCV` folder, navigate to `OpenCV\opencv\build\etc\lbpcascades`:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`OpenCV`文件夹中，导航到`OpenCV\opencv\build\etc\lbpcascades`：
- en: '![](img/018651ad-d491-4274-8547-159c82b3f5ef.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/018651ad-d491-4274-8547-159c82b3f5ef.png)'
- en: You want to copy `lbpcascade_frontalface.xml` into the scripts folder in Unity.
    (My project has everything in an `XML` folder, as I have many more `.xml` files
    to play with.)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要将`lbpcascade_frontalface.xml`复制到Unity的脚本文件夹中。（我的项目所有内容都在一个`XML`文件夹中，因为我有很多`.xml`文件要使用。）
- en: Finally, we just need to create a plane to face the camera.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们只需要创建一个平面来面对相机。
- en: The last step is to attach the `OpenCVFaceDetection` script to the plane.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将`OpenCVFaceDetection`脚本附加到平面上。
- en: 'Now, the project will compile and run appropriately (if you get a dll import
    error, make sure you have the dll set to x86-x64 and that the project is built
    for Windows):'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，项目将适当地编译和运行（如果你遇到dll导入错误，请确保dll设置为x86-x64，并且项目是为Windows构建的）：
- en: '![](img/3f110ed7-1497-4c1b-ae33-1cd683788c50.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f110ed7-1497-4c1b-ae33-1cd683788c50.png)'
- en: Summary
  id: totrans-227
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use CMake to build OpenCV from source, to
    import it into Unity, and create an AR application similar to many on the market
    that are able to add images over a person's face and track their movements reliably,
    by using OpenCV and DLib FaceLandmark Detector, using Dlib C++Library.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用CMake从源代码构建OpenCV，将其导入Unity，并创建一个类似于市场上许多能够可靠地在人脸上添加图像并跟踪其运动的AR应用程序，通过使用OpenCV和DLib
    FaceLandmark Detector，以及使用Dlib C++库。
- en: In the next, and final, chapter, we will look into building for MR devices such
    as HoloLens. As a short teaser, MR incorporates elements from AR and VR into a
    single game or application, which can prove to have massive and interesting effects.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，也是最后一章，我们将探讨为MR设备（如HoloLens）构建。作为一个简短的预告，MR将AR和VR的元素结合到一个单一的游戏或应用程序中，这可能会产生巨大和有趣的效果。
- en: Questions
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'OpenCV is cross-platform and can work with Android, Linux, MacOS, iOS, Windows,
    HoloLens, and Oculus Rift:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenCV是跨平台的，可以与Android、Linux、MacOS、iOS、Windows、HoloLens和Oculus Rift一起工作：
- en: A.) True
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'The Dlib C++ Library is required to make OpenCV work on Windows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Dlib C++库是使OpenCV在Windows上工作所必需的：
- en: A.) True
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'OpenCV cannot be built from source:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenCV不能从源代码构建：
- en: A.) True
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'Unity is not compatible with OpenCV:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Unity与OpenCV不兼容：
- en: A.) True
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'You can use OpenCV with ARKit, ARCore, and Vuforia:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用OpenCV与ARKit、ARCore和Vuforia一起使用：
- en: A.) True
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'OpenCV is a library designed for machine learning and computer vision:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenCV是一个为机器学习和计算机视觉设计的库：
- en: A.) True
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: 'OpenCV can be used with AR, VR, and MR project types:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenCV可以用于AR、VR和MR项目类型：
- en: A.) True
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: A.) 正确
- en: B.) False
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: B.) 错误
- en: Further reading
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: For the free assets that give you deeper insight into how to use OpenCV with
    Unity, you can download them from this GitHub link: [https://github.com/EnoxSoftware/OpenCVForUnity](https://github.com/EnoxSoftware/OpenCVForUnity)
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于那些能让你更深入了解如何在Unity中使用OpenCV的免费资源，你可以从以下GitHub链接下载：[https://github.com/EnoxSoftware/OpenCVForUnity](https://github.com/EnoxSoftware/OpenCVForUnity)
- en: To read the documentation on the Dlib C++ library, go to [http://dlib.net/](http://dlib.net/).
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要阅读Dlib C++库的文档，请访问[http://dlib.net/](http://dlib.net/)
- en: 'To learn about the methods, properties, fields, and OpenCV tutorials in C++,
    Python, and Javascript, and to gain deeper understanding of how OpenCV is put
    together, you can go to this link: [https://docs.opencv.org/3.4.1/](https://docs.opencv.org/3.4.1/)'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要了解关于方法、属性、领域以及 C++、Python 和 Javascript 中的 OpenCV 教程，并深入理解 OpenCV 的构建方式，您可以访问以下链接：[https://docs.opencv.org/3.4.1/](https://docs.opencv.org/3.4.1/)
