- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Hello, I am Marcin!**'
  prefs: []
  type: TYPE_NORMAL
- en: It is so nice to meet you and to invite you to an amazing journey through various
    data structures and algorithms presented in this book. As you could already know,
    developing applications is certainly something exciting to work on, but it is
    also challenging, especially if you need to solve some complex problems. In such
    cases, you often need to take care of performance to ensure that the solution
    will work smoothly on devices with limited resources. Such a task could be really
    difficult and could require significant knowledge regarding not only the programming
    language but also data structures and algorithms. However, have you ever thought
    profoundly about them and their impact on the performance of your applications?
    If not, it is high time to take a look at this topic, and this book is a great
    place to start!
  prefs: []
  type: TYPE_NORMAL
- en: Did you know that replacing even one data structure with another could cause
    the performance results to increase hundreds of times or even more? Does it sound
    impossible? Maybe, but it is true! As an example, I would like to tell you a short
    story about one of the projects in which I was involved some time ago. The aim
    was to optimize the algorithm to find connections between blocks on a graphical
    diagram. Such connections should be automatically recalculated, refreshed, and
    redrawn as soon as any block has moved in the diagram. Of course, connections
    cannot go through blocks and cannot overlap other lines, and the number of crossings
    and direction changes should be limited. Depending on the size and the complexity
    of the diagram, the performance results differ significantly. However, while conducting
    tests, we received results in the range of 1 ms to almost 800 ms for the same
    test case. What was perhaps the most surprising aspect is that such a huge improvement
    was reached mainly by... changing the data structures of two sets.
  prefs: []
  type: TYPE_NORMAL
- en: Are you interested in knowing the influence of choosing a suitable data structure
    on the performance of your application? Do you want to know how you can increase
    the quality and performance of your solution by choosing the right accompanying
    algorithm? Are you curious about real-world scenarios where various data structures
    can be applied, as well as which algorithms could be used to solve some common
    problems? Unfortunately, the answer to such questions is not simple. However,
    within this book, you will find a lot of information about data structures and
    algorithms, presented in the context of the C# programming language, with many
    examples, code snippets, illustrations, and detailed explanations. Such content
    could help you to answer the aforementioned questions while developing the next
    great solutions, which could be used by many people all over the world! Are you
    ready to start your adventure with data structures and algorithms? If so, welcome
    on board of this book!
  prefs: []
  type: TYPE_NORMAL
- en: The book covers many data structures, starting with simple ones, namely arrays
    and a few of their variants, as representatives of random access data structures.
    Then, lists are introduced, together with their sorted, linked, and circular versions.
    The book also explains limited access data structures, based on stacks and queues,
    including a priority and a circular queue. Following this, we introduce you to
    the dictionary data structure, which allows you to map keys to values and perform
    fast lookup. The sorted variant of a dictionary is supported, as well. If you
    want to benefit from high-performance, set-related operations, you can use another
    data structure, namely a hash set. One of the most powerful constructs is a tree,
    which exists in many variants, including a binary tree, a binary search tree,
    a self-balancing tree, a trie, and a heap. The last data structure we analyze
    is a graph, supported by many interesting algorithmic topics, such as graph traversal,
    minimum spanning tree, node coloring, and finding the shortest path.
  prefs: []
  type: TYPE_NORMAL
- en: Arrays, lists, stacks, queues, dictionaries, hash sets, trees, tries, heaps,
    and graphs, as well as accompanying algorithms – a broad range of subjects await
    you on the next pages! Let’s start the adventure and take the first step toward
    your mastery of data structures and algorithms, which hopefully will have a positive
    effect on your projects and on your career as a software developer!
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is aimed at developers who would like to learn about the data structures
    and algorithms that can be used with the C# language in various kind of applications,
    including web and mobile solutions. The topics presented here are suitable for
    programmers with various levels of experience, and even beginners will find interesting
    content. However, having at least basic knowledge of the C# programming language,
    such as about object-oriented programming, will be an added advantage.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that this book can contain some simplifications to make the
    subject easier to understand. What’s more, some data structures are only mentioned
    briefly, without detailed explanations or examples. The book’s aim is to interest
    you in the topic of data structures and algorithms, so you can further expand
    your knowledge with other books, research papers or on-line resources.
  prefs: []
  type: TYPE_NORMAL
- en: To easily understand the content, the book is equipped with many illustrations
    and examples. What is more, the source code for the accompanying projects is attached
    to the chapters and is available in the GitHub repository. Thus, you can easily
    run example applications and debug them without writing the code on your own.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning that the code can be simplified and it can differ from
    the best practices. The examples can have significantly limited, or even no, security
    checks and functionalities. Before publishing your application using the content
    presented in the book, the application should be thoroughly tested to ensure that
    it works correctly in various circumstances, such as in the scenario of passing
    incorrect data.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18069_01.xhtml#_idTextAnchor013), *Data Types*, introduces you
    to the topic of the data types available while developing applications in the
    C# programming language, both value and reference ones. You will learn about the
    built-in value types, such as integral or floating-point numbers, as well as constants,
    enumerations, value tuples, user-defined struct types, and nullable value types.
    As for the reference types, you will see object and string types, classes, records,
    interfaces, and delegate and dynamic types, as well as nullable reference types.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18069_02.xhtml#_idTextAnchor063), *Introduction to Algorithms*,
    presents you with an algorithm definition and some real-world examples from your
    daily life. Then, you will learn a few notations for algorithms, namely natural
    language, a flowchart, pseudocode, and a programming language. Various types of
    algorithms are shown as well, including recursive, divide and conquer, back-tracking,
    greedy, heuristic, brute force, and dynamic programming. Computational complexity,
    including time complexity, is also presented and explained.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18069_03.xhtml#_idTextAnchor088), *Arrays and Sorting*, covers
    scenarios storing data using some representatives of random access data structures,
    namely arrays. First, three variants of arrays are explained, that is, single-dimensional,
    multi-dimensional, and jagged. You’ll also get to know seven popular sorting algorithms,
    namely selection sort, insertion sort, bubble sort, merge sort, Shell sort, quicksort,
    and heap sort. All of these algorithms are shown with illustrations, implementation
    code, and detailed explanations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18069_04.xhtml#_idTextAnchor129), *Variants of Lists*, deals
    with other representatives of random access data structures, namely a few variants
    of lists. Lists are similar to arrays, but make it possible to dynamically increase
    the size of the collection if necessary. A few variants of lists, including a
    singly linked list, a doubly linked list, a circular singly linked list, and a
    circular doubly linked list are introduced. Such data structures are presented
    in illustrations, are implemented using C# code, and are explained in detail.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18069_05.xhtml#_idTextAnchor165), *Stacks and Queues*, explains
    how to use two variants of limited access data structures, namely stacks and queues,
    including priority and circular queues. The chapter shows how to perform push
    and pop operations on a stack, and also describes the enqueue and dequeue operations
    in the case of a queue. To aid your understanding of these topics, a few examples
    are presented, including the Tower of Hanoi game and an application that simulates
    a call center with multiple consultants and callers.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18069_06.xhtml#_idTextAnchor195), *Dictionaries and Sets*, focuses
    on data structures that make it possible to map keys to values, perform fast lookups,
    and carry out various operations on sets. The chapter introduces you to both non-generic
    and generic variants of a hash table, the sorted dictionary, and the high-performance
    solution to set operations allowing you to get union, intersection, subtraction,
    and symmetric difference. The “sorted” set concept is shown, as well.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18069_07.xhtml#_idTextAnchor233), *Variants of Trees*, describes
    a few tree-related topics. First, it presents a basic tree, together with its
    implementation in C#, and examples showing it in action. The chapter also introduces
    you to binary trees, binary search trees, and self-balancing trees, namely AVL
    and red-black trees. Then, you’ll see a trie that is a great approach for performing
    string-related operations. The remainder of the chapter is dedicated to a brief
    introduction to the topic of binary heaps as other tree-based structures.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18069_08.xhtml#_idTextAnchor296), *Exploring Graphs*, contains
    a lot of information about graphs, starting with an explanation of their basic
    concepts, including nodes and a few variants of edges. The C#-based implementation
    of a graph is also covered. The chapter introduces you to two modes of graph traversal,
    namely depth-first and breadth-first search. Then, it presents the subject of
    minimum spanning trees using Kruskal’s and Prim’s algorithms, the node coloring
    problem, and finding the shortest path in a graph using Dijkstra’s algorithm.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18069_09.xhtml#_idTextAnchor367), *See in Action*, presents
    a few examples of various types of algorithms. You’ll see a recursive way to calculate
    a number from the Fibonacci series, with dynamic programming optimization. Then,
    you’ll learn a greedy approach to a minimum coin change problem, a divide-and-conquer
    method of getting the closest pair of points, a recursive way of generating fractals,
    a back-tracking and recursive way of solving rat in a maze and Sudoku puzzles,
    as well as a genetic algorithm and brute-force password guessing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18069_10.xhtml#_idTextAnchor379), *Conclusion*, is the conclusion
    of all the knowledge acquired from the previous chapters. It shows a brief classification
    of data structures, dividing them into two groups, namely linear and nonlinear.
    Finally, the chapter talks about the diversity of applications of various data
    structures. Each data structure is presented with a brief description and some
    of them are also shown with illustrations, to help you remember the information
    learned while reading the previous nine chapters.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book is aimed at programmers with various experience. However, beginners
    will also find some interesting content. Nevertheless, at least a basic knowledge
    of C#, such as object-oriented programming, will be an added advantage.
  prefs: []
  type: TYPE_NORMAL
- en: You need to have the**Visual Studio**IDE installed, in the version supporting**.NET
    8.0***.* You can download**Visual Studio 2022 Community**for free from[https://visualstudio.microsoft.com/free-developer-offers/](https://visualstudio.microsoft.com/free-developer-offers/)*.*
    The detailed step-by-step instructions on how to install it can be found at[https://learn.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2022](https://learn.microsoft.com/en-us/visualstudio/install/install-visual-studio?view=vs-2022)*.*
    Please keep in mind that the **.NET desktop development**option should be chosen
    in the**Workloads**tab while configuring the installation*.*
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are using the digital version of this book, we advise you to type
    the code yourself or access the code from the book’s GitHub repository (a link
    is available in the next section). Doing so will help you avoid any potential
    errors related to the copying and pasting** **of code.**'
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/C-Sharp-Data-Structures-and-Algorithms---Second-Edition](https://github.com/PacktPublishing/C-Sharp-Data-Structures-and-Algorithms---Second-Edition)
    If there’s an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, folder names, filenames, file
    extensions, pathnames, and user input. Here is an example: “The class contains
    three properties, namely `Id`, `Name`, and `Role`, as well as two constructors.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, an important sentence, or
    words that you see onscreen. For instance, words in menus or dialog boxes appear
    in **bold**. Here is an example: “It sounds complicated, but fortunately, it is
    very simple. A jagged array could be understood as **a single-dimensional array,
    where each element is** **another array**.”'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com.](http://authors.packtpub.com.)'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you’ve read *C# Data Structures and Algorithms*, we’d love to hear your
    thoughts! Please [click here to go straight to the Amazon review page](https://packt.link/r/1803248270)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
  prefs: []
  type: TYPE_NORMAL
- en: Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Download a free PDF copy of this book](img/B18069_QR_Free_PDF.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/978-1-80324-827-1](https://packt.link/free-ebook/978-1-80324-827-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
