["```cs\npublic abstract class Entity<K>: IEntity<K>\n    where K: IEqualityComparer<K>\n{\n\n    public virtual K Id { get; protected set; }\n    public bool IsTransient()\n    {\n        return Object.Equals(Id, default(K));\n    }\n    public override bool Equals(object obj)\n    {\n        if (obj == null || !(obj is Entity<K>))\n            return false;\n        if (Object.ReferenceEquals(this, obj))\n            return true;\n        if (this.GetType() != obj.GetType())\n            return false;\n        Entity<K> item = (Entity<K>)obj;\n        if (item.IsTransient() || this.IsTransient())\n            return false;\n        else\n            return Object.Equals(item.Id, Id);\n    }\n    int? _requestedHashCode;\n    public override int GetHashCode()\n    {\n        if (!IsTransient())\n        {\n            if (!_requestedHashCode.HasValue)\n                _requestedHashCode = this.Id.GetHashCode() ^ 31;\n            return _requestedHashCode.Value;\n        }\n        else\n            return base.GetHashCode();\n    }\n    public static bool operator ==(Entity<K> left, Entity<K> right)\n    {\n        if (Object.Equals(left, null))\n            return (Object.Equals(right, null));\n        else\n            return left.Equals(right);\n    }\n    public static bool operator !=(Entity<K> left, Entity<K> right)\n    {\n        return !(left == right);\n    }\n}\n```", "```cs\npublic interface IUnitOfWork \n{ \n    Task<bool> SaveEntitiesAsync();\n    Task StartAsync();\n    Task CommitAsync();\n    Task RollbackAsync();\n}\n\npublic interface IRepository<T>: IRepository\n{\n   IUnitOfWork UnitOfWork { get; }\n}\n```", "```cs\nmodelBuilder.Entity<MyEntity>()\n      .Property(\"_myPrivatefield\");\n```", "```cs\npublic interface IDestination\n{ \n    int Id { get; }\n    string Name { get; }   \n    string Country { get; }\n    string Description { get; set; }\n    ...\n}\n```", "```cs\nctx.MyTable.Where(...)....Select(new MyDto{...}).ToList();\n```", "```cs\npublic List<IEventNotification> DomainEvents { get; private set; }\npublic void AddDomainEvent(IEventNotification evt)\n{\n    DomainEvents = DomainEvents ?? new List<IEventNotification>();\n    DomainEvents.Add(evt);\n}\npublic void RemoveDomainEvent(IEventNotification evt)\n{\n    DomainEvents?.Remove(evt);\n}\n```", "```cs\npublic interface IEventHandler<T>\n    where T: IEventNotification\n{\n    Task HandleAsync(T ev);\n}\n\n```", "```cs\npublic interface ICommandHandler<T>\n    where T: ICommand\n{\n    Task HandleAsync(T command);\n}\n```", "```cs\npublic class EventTrigger<T>\n        where T: IEventNotification\n    {\n        private IEnumerable<IEventHandler<T>> handlers;\n        public EventTrigger(IEnumerable<IEventHandler<T>> handlers)\n        {\n            this.handlers = handlers;\n        }\n        public async Task Trigger(T ev)\n        {\n            foreach (var handler in handlers)\n                await handler.HandleAsync(ev);\n        }\n    }\n```", "```cs\n        service.AddEventHandler<MyEventType, MyHandlerType>()\n```", "```cs\npublic static class EventDIExtensions\n{\n    private static IDictionary<Type, List<Type>> eventDictionary = \n        new Dictionary<Type, List<Type>>();\n    public static IServiceCollection AddEventHandler<T, H>\n        (this IServiceCollection service)\n        where T : IEventNotification\n        where H: class, IEventHandler<T> \n    {\n        service.AddScoped<H>();\n        List<Type> list = null;\n        eventDictionary.TryGetValue(typeof(T), out list);\n        if(list == null)\n        {\n            list = new List<Type>();\n            eventDictionary.Add(typeof(T), list);\n            service.AddScoped<EventTrigger<T>>(p =>\n            {\n                var handlers = new List<IEventHandler<T>>();\n                foreach(var type in eventDictionary[typeof(T)])\n                {\n                    handlers.Add(p.GetService(type) as IEventHandler<T>);\n                }\n                return new EventTrigger<T>(handlers);\n            });\n        }\n        list.Add(typeof(H));\n\n        return service;\n    }\n    ...\n    ...\n}\n```"]