["```cs\n    public void AssignUserToCompany(int userId, int companyId)\n    {\n      // Database operation to assign User to Company.\n    }\n```", "```cs\n    public void AssignUserToCompany(int userId, int companyId)\n    {\n _logger.Log(\"Assign to User started.\");\n      // Database operation to assign User to Company.\n _logger.Log(\"Assign to User ended.\");\n    }\n```", "```cs\n    public class LoggingCompanyRepository : CompanyRepository\n    { \n      private readonly CompanyRepository _companyReposiory;\n private readonly ILogger _logger;\n      public LoggingCompanyRepository(CompanyRepository \n         companyRepository, ILogger logger)\n      {\n        this._companyReposiory = companyRepository ??\n           throw new ArgumentNullException(\"companyRepository\");\n        this._logger = logger ?? throw new \n           ArgumentNullException(\"logger\");\n     }\n     public override void AssignUserToCompany(int userId,\n         int companyId)\n     {\n _logger.Log(\"Assign to User started.\");\n        _companyReposiory.AssignUserToCompany(userId, \n            companyId);\n _logger.Log(\"Assign to User ended.\");\n     }\n    }\n```", "```cs\n    public ICompanyService ResolveCompanyService()\n    {\n      CompanyRepository companyRepository = new \n          SqlCompanyRepository(\"ConnectionString\");\n      Controllers.ILogger logger = new SqlLogger();\n      CompanyRepository loggingCompanyRepository = new \n          LoggingCompanyRepository(companyRepository, logger);\n      return new CompanyService(loggingCompanyRepository);\n    }\n```", "```cs\n    public void SaveUser(User user)\n    {\n      Log.Debug(\"SaveUser started\");   \n      try\n      {\n        // Service call to save the user.\n      }\n      catch(Exception ex)\n      {\n        Log.Error(ex, \"Exception in SaveUser Method\");\n        throw;\n      }\n      finally\n      {\n          Log.Debug(\"SaveUser Method completed.\");\n      }\n    }\n```", "```cs\n    using Castle.DynamicProxy;\n    using System;\n    namespace ConsolePacktApp\n    {\n      public class LoggingInterceptor : IInterceptor\n      {\n        public void Intercept(IInvocation invocation)\n        {\n          invocation.Proceed();\n        }\n      }\n    }\n```", "```cs\n    using Castle.DynamicProxy;\n    using System;\n    namespace ConsolePacktApp\n    {\n      public class LoggingInterceptor : IInterceptor\n      {\n        public void Intercept(IInvocation invocation)\n        {\n            try\n            {\n                Console.WriteLine(\"Log Interceptor Starts\");\n                invocation.Proceed();\n                Console.WriteLine(\"Log Interceptor Success\");\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(\"Log Interceptor Exception\");\n                throw;\n            }\n            finally\n            {\n                Console.WriteLine(\"Log Interceptor Exit\");\n            }\n        }\n      }\n    }\n```", "```cs\n    using System;\n    namespace ConsolePacktApp\n    {\n      public interface IExample\n      {\n        void PrintName(string FirstName, string LastName);\n      }\n\n      public class Example : IExample\n      {\n        public void PrintName(string FirstName, string LastName)\n        {\n            Console.WriteLine($\"Name is {FirstName} {LastName}\");\n        }\n      }\n    }\n```", "```cs\n    using Castle.MicroKernel.Registration;\n    using Castle.MicroKernel;\n    using Castle.Core;\n    namespace ConsolePacktApp\n    {\n      public class ExampleRegistration : IRegistration\n      {\n        public void Register(IKernelInternal kernel)\n        {\n            // 1\\. Interceptor Registration\n            kernel.Register(\n                Component.For<LoggingInterceptor>()\n                    .ImplementedBy<LoggingInterceptor>());\n\n            // 2\\. Interceptor attached with Example Class.\n            kernel.Register(\n                Component.For<IExample>()\n                .ImplementedBy<Example>()\n                .Interceptors(InterceptorReference.ForType<LoggingInterceptor>\n                   ()).Anywhere);\n        }\n      }\n    }\n```", "```cs\n    using Castle.Windsor;\n    using System;\n    namespace ConsolePacktApp\n    {\n      class Program\n      {\n        private static IWindsorContainer _container;\n        static void Main(string[] args)\n        {\n            _container = new WindsorContainer();\n            _container.Register(new ExampleRegistration());\n\n            var example = _container.Resolve<IExample>();\n\n            try\n            {\n                example.PrintName(\"Gobinda\", \"Dash\");   \n            }\n            catch (Exception ex)\n            {\n            }\n\n            Console.ReadKey();\n        }\n      }\n    }\n```", "```cs\n    using System;\n    namespace ConsolePacktApp\n    {\n      public class Example : IExample\n      {\n        public void PrintName(string FirstName, string LastName)\n        {\n            throw new Exception();\n            Console.WriteLine($\"Name is {FirstName} {LastName}\");\n        }\n      }\n    }\n```", "```cs\n    using PostSharp.Aspects;\n    using System;\n    namespace ConsolePacktApp\n    {\n      [Serializable]\n      class LoggingWeaverAspect : OnMethodBoundaryAspect\n      {\n        public override void OnEntry(MethodExecutionArgs args)\n        {\n            Console.WriteLine(\"Inside OnEntry\");\n        }\n\n        public override void OnExit(MethodExecutionArgs args)\n        {\n            Console.WriteLine(\"Inside OnExit\");\n        }\n\n        public override void OnException(MethodExecutionArgs args)\n        {\n            Console.WriteLine(\"Inside OnException\");\n        }\n\n        public override void OnSuccess(MethodExecutionArgs args)\n        {\n            Console.WriteLine(\"Inside OnSuccess\");\n        }\n      }\n    }\n```", "```cs\n    static void Main(string[] args)\n    {\n      try\n      {\n        Example example = new Example();\n        example.PrintName(\"Gobinda\", \"Dash\");\n      }\n      catch\n      {\n      }\n      Console.ReadKey();\n    }\n```", "```cs\n    using System;\n    namespace ConsolePacktApp\n    {\n      public class Example : IExample\n      {\n        [LoggingWeaverAspect]\n        public void PrintName(string FirstName, string LastName)\n        {\n            Console.WriteLine($\"Name is {FirstName} {LastName}\");\n        }\n      }\n    }\n```", "```cs\n    using Microsoft.AspNetCore.Mvc.Filters;\n    namespace FiltersAndMiddlewares.Filters\n    {\n      public class SomeFilter : IActionFilter\n      {\n        public void OnActionExecuted(ActionExecutedContext context)\n        {\n          // Do something.\n        }\n\n        public void OnActionExecuting(ActionExecutingContext context)\n        {\n          // Do something.\n        }\n      }\n    }\n```", "```cs\n    services.AddMvc(mvc => mvc.Filters.AddService(\n        typeof(SomeGlobalFilter)));\n```", "```cs\n    using FiltersAndMiddlewares.Interfaces;\n    using Microsoft.AspNetCore.Mvc.Filters;\n    namespace FiltersAndMiddlewares.Filters\n    {\n      public class SomeGlobalFilter : IActionFilter\n      {\n public SomeGlobalFilter(ISomeService service)\n {\n // Do something with the service.\n }\n\n        public void OnActionExecuted(ActionExecutedContext context)\n        {\n            // Do something.\n        }\n\n        public void OnActionExecuting(ActionExecutingContext context)\n        {\n            // Do something.\n        }\n      }\n    }\n```", "```cs\n    public class SomeFilterAttribute : Attribute {}\n```", "```cs\n [TypeFilter(typeof (SomeFilter))]\n    public IActionResult About()\n    {\n      ViewData[\"Message\"] = \"Your application description page.\";\n      return View();\n    }\n```", "```cs\n [ServiceFilter(typeof (SomeFilter))]\n    public IActionResult About()\n    {\n      ViewData[\"Message\"] = \"Your application description page.\";\n      return View();\n    }\n```", "```cs\n    services.AddTransient<SomeFilter>();\n```", "```cs\n    public void Configure(IApplicationBuilder app)\n    {\n      var response = string.Empty;\n      app.Use(async (context, next) =>\n      {\n        response += \"Inside Middleware 1\\n\";\n        await next.Invoke();\n      });\n       app.Use(async (context, next) =>\n       {\n        response += \"Inside Middleware 2\\n\";\n        await next.Invoke();\n       });\n       app.Run(async context =>\n       {\n         response += \"App run\\n\";\n         await context.Response.WriteAsync(response);\n       });\n    }\n```", "```cs\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, \n       ILoggerFactory loggerFactory)\n    {\n     var response = string.Empty;\n     app.Use(async (context, next) =>\n     {\n        response += \"Inside Middleware 1\\n\";\n        await next.Invoke();\n     });\n     app.Run(async context =>\n     {\n        response += \"App run\\n\";\n        await context.Response.WriteAsync(response);\n     });\n     app.Use(async (context, next) =>\n     {\n        response += \"Inside Middleware 2\\n\";\n        await next.Invoke();\n     });\n    }\n```"]