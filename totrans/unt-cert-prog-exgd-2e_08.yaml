- en: '*Chapter 8*: Adding Custom Fonts and UI'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to take the scenes that we created for our game
    loop in the previous chapter and move our focus on to text, imagery, and animation
    through various customizations.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: A requirement of the Unity Programmer Exam is not only to be confident with
    your C# programming skills but also to be familiar with what the Unity Editor
    offers in terms of its components and tools. Therefore, in this chapter, we will
    do no programming and, instead, focus on our **User Interface** (**UI**), which
    consists of **Image** and **Text** components. It's also worth mentioning that
    we will make our UI expand and contract with the screen's ratio size, which isn't
    possible with 3D assets alone (please refer to the previous chapter for more details).
    We will also import and apply our own custom font while we learn about our **Text**
    component. Finally, we will animate the UI with **Animator** and make use of the
    **Animator Controller**, which involves creating our own states.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what our title screen should look like by the
    end of the chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – Killer Wave title screen'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B18381.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – Killer Wave title screen
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Canvas and UI
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying text and images to our scenes
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will feel more confident about combining **Text**
    and **Image** components together, along with animating the UI.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Core exam skills being covered in this chapter
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Programming core interactions:*'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Implement and configure game object behavior and physics.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Working in the art pipeline:*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: Understand materials, textures, and shaders, and write scripts that interact
    with Unity's rendering API.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand 2D and 3D animation, and write scripts that interact with Unity's
    animation API.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Developing application systems:*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Interpret scripts for application interface flow such as menu systems, UI navigation,
    and application settings.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The project content for this chapter can be found at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_08](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_08).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: You can download the entirety of each chapter's project files at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: All content for this chapter is held in the chapter's `unitypackage` file, including
    a `Complete` folder that contains all of the work that we'll carry out in this
    chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3kqIi8k](https://bit.ly/3kqIi8k).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the Canvas and UI
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of the Canvas is to typically hold images and text in a 2D world.
    Its primary purpose is to allow the user to interact with things, such as clicking
    on buttons, pushing volume sliders, and turning knobs, which is more commonly
    known as the UI.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Unity (quite confusingly) makes it such that the 2D Canvas also shares the same
    space as it's a 3D world. Therefore, in our scene, we will typically have a large
    canvas area with the UI; then, further down in the bottom left of the screen,
    we will have our 3D world.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows an example of a Unity scene with an implemented
    **Canvas** component, along with a cube and a UI button:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.2 – Our Button''s visibility differs from 2D Canvas Space and 3D
    World Space'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.02_B18381.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.2 – Our Button's visibility differs from 2D Canvas Space and 3D World
    Space
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding screenshot, on the right-hand side, we have
    the **Game** view showing a 3D cube and UI **Button**. On the left-hand side,
    we have the **Scene** view showing the same cube but with the **Button** missing.
    This is because, in the **Scene** window, the Canvas that holds the UI button
    is located in its own 2D space. To resolve this issue, we need to zoom out of
    the **Scene** view, and we will see where the UI button is located. Additionally,
    we will see the outline of a large white rectangle that represents the screen
    ratio.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that because we have zoomed out so much, the 3D cube is really small.
    In the following screenshot, we can''t even see the cube, on the left-hand side
    marked with a circle outline. It''s a little complicated to understand at first,
    but consider it like two projects sharing the same space:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.3 – Canvas on the left containing our Button, the right shows its
    position in the Game window'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.03_B18381.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.3 – Canvas on the left containing our Button, the right shows its position
    in the Game window
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: With that brief example of how the Canvas shares space with the 3D space, let's
    move on to the next section, where we'll start using the Canvas and add some text
    and images.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: Applying text and images to our scenes
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to change the following scenes:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: The gray background
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The white **TextMesh** (3D text, which doesn't require the Canvas)
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll replace those scenes with the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: A black background
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom red **Text** (2D text, which requires a Canvas)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As mentioned in the introduction, the benefit of doing this is that the text
    will remain the same size, no matter the ratio or resolution of the screen.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the current `BootUp` scene on the left and what
    it should look like after making the changes on the right:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.4 – We will be improving our BootUp scene''s visuals'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.04_B18381.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.4 – We will be improving our BootUp scene's visuals
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: If you haven't already opened the scene in the Unity Editor, go to the `bootUp`
    scene from `Assets/Scene`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start by changing the background color from gray to black. If you have
    forgotten how to do this, follow these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: Select **Main Camera** in the **Hierarchy** window.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With `0,0,0,255`, as shown in the following screenshot:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.5 – Changing our bootUp scene''s background to black'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.05_B18381.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.5 – Changing our bootUp scene's background to black
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: The `BootUp` text and replace it with our new 2D text.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: Select `BootUpText` from the **Hierarchy** window and delete it.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are now going to add the Canvas and 2D text to the scene.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: 'In the open space of the **Hierarchy** window, right-click and select **UI**
    | **Text**, as shown in the following screenshot:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.6 – Creating 2D Text in the Unity Editor'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.06_B18381.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.6 – Creating 2D Text in the Unity Editor
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'Because we have added 2D text, Unity helps us out by automatically adding the
    Canvas and EventSystem to the scene. The following screenshot shows the `bootUp`
    `Text` game object:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.7 – Our Hierarchy displaying Canvas, Text, and EventSystem'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.07_B18381.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.7 – Our Hierarchy displaying Canvas, Text, and EventSystem
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Right-click on the `Text` game object and rename it to `presented`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `presented` still selected in the **Hierarchy** window, pay attention to
    the **Inspector** window because we need to update its **Text** component.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: In the **Text** field, change the default input from **New Text** to **presented
    by**.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's continue modifying the `presented` game object's **Text** component settings.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: We will change the font from the typical `Assets/Font/ethnocentric rg it`. We
    can select this font from our `presented` game object.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Click on the small circle that appears to the right of the `ethnocentric rg
    it` from the drop-down list.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `0`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, our font will have disappeared from the **Scene** window. This
    is because the **Rect Tool** isn't big enough and we need to resize it. We will
    do this next.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Information Note
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: The Rect Tool is an area for the images or text to sit in. Consider it as a
    similar tool to the Transform component, where we enter the Vector3 values for
    the Position, Rotation, and Scale of our game's objects, which we have been altering
    from [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048), *Adding and Manipulating
    Objects*, onward.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `presented` game object still selected, make sure that the **Rect Tool**
    is selected, as shown in the following screenshot:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.8 – Rect Tool button location'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.08_B18381.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.8 – Rect Tool button location
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure we are in 2D mode (and **Gizmos** is turned on to the right of the
    bar), as we don''t need to be concerned about the 3D space while adjusting the
    2D text. Either press *2* on the keyboard or click on the following button:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.9 – 2D button location'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.09_B18381.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.9 – 2D button location
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, check whether the **Game** window ratio is set to **1080 (1920x1080)**
    (this is the screen ratio that we set in [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048),
    *Adding and Manipulating Objects*). You can do this using the drop-down list below
    the **Game** tab, as shown in the following screenshot:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.10 – Changing our Game window aspect to 1080'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.10_B18381.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.10 – Changing our Game window aspect to 1080
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'Click and drag the outer edge of the **Rect Tool** to the far left until it
    clips to the outer edge, as indicated in the following screenshot:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.11 – Click and drag the edge (where the arrow is) of our Rect Tool
    to the far-left outer edge (* symbol)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.11_B18381.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.11 – Click and drag the edge (where the arrow is) of our Rect Tool
    to the far-left outer edge (* symbol)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: Once done, drag the right edge of the **Rect Tool** to the right side of the
    outer edge.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, widen the top and the bottom of the **Rect Tool** edges. This is so that
    the height is approximately a quarter of the white outer rectangle. We should
    now see our text reappear, and our **Rect Tool** proportions should be similar
    to those in the following screenshot:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.12 – Click and drag the top and the bottom of the Rect Tool edges
    similar to here'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.12_B18381.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.12 – Click and drag the top and the bottom of the Rect Tool edges similar
    to here
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the **Rect Tool** spacing set up, we need to set the **Anchors**
    so that the text remains the correct size no matter what the screen ratio or resolution
    is.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: In the center of the Canvas screen, we should be able to see four arrows pointing
    toward each other (the left-hand side of the following screenshot has these four
    arrows circled in red).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the **Anchors** in the same location as the four blue circles, perform
    the following steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 'One at a time, click and drag each white arrow to where each blue circle is:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.13 – Click and drag each white outline arrow out to its far-corner
    blue circles'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.13_B18381.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.13 – Click and drag each white outline arrow out to its far-corner
    blue circles
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: Now that our **Anchors** are roughly sitting on top of the **Rect Tool**, which
    is denoted by blue circles, we can make it so that the **Position** and **Anchors**
    are both aligned.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 'To set the **Rect Transform** into place, enter a value of 0 in the **Left**,
    **Top**, **Pos Z**, **Right**, and **Bottom** positions. The following screenshot
    (on the left) shows our highlighted values. It''s likely that yours won''t be
    the same since we positioned the **Rect Tool** manually earlier on:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.14 – Reset all highlighted Rect Transform values to 0'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.14_B18381.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.14 – Reset all highlighted Rect Transform values to 0
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Now, we can continue with the **Text** component in the **Inspector** window
    in order to set the color and position of the text.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'To center the `presented by` text in the **Text** component, select the two
    middle buttons in the **Alignment** section, as shown in the following screenshot:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.15 – Update each of the Text component property values'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.15_B18381.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.15 – Update each of the Text component property values
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Tick the **Best Fit** box. This will ensure that our text scales to support
    the screen's ratio dynamically.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the `0` and `80`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the color by clicking on the **Color** field and choosing red, as shown
    in the preceding screenshot.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have now had a full run with the `bootUp` **TextMesh** that we had before.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows our custom text, color, size, and alignment:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.16 – Our font is now centered and stylized'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.16_B18381.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.16 – Our font is now centered and stylized
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: As you can imagine, we haven't quite finished yet because we need to have the
    name or company's name appear underneath the **PRESENTED BY** text. Thankfully,
    we only need to repeat about a quarter of the work we've just done. And, as you've
    probably guessed – yes – we can copy and paste this text.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 'To set our own name or company name underneath **PRESENTED BY**, perform the
    following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: Select the `presented` game object from the **Hierarchy** window.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* (*command* on the Mac) and *D* to duplicate the game object.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press *T* to switch to the **Move Tool**:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.17 – Duplicate a second line of text'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.17_B18381.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.17 – Duplicate a second line of text
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Now click and drag the green *y-axis* arrow downward (as shown in the preceding
    screenshot) to roughly sit on the white line where the original **PRESENTED BY**
    text's **Rect Tool** lies.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'All we need to do next is to click and drag each of the four white arrow outlines
    of the **Anchors** downward to fit in our newly created game object, as shown
    in the following screenshot:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.18 – Tidy up the Rect Transform boundaries of our duplicated text'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.18_B18381.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.18 – Tidy up the Rect Transform boundaries of our duplicated text
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: If you have moved the `0`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So, our new text is in place. All we need to do now is to change what has been
    typed in.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'We know how to do this: just scroll down to the **Text** component and enter
    your name, company name, pet''s name, or any name – it doesn''t matter for the
    purpose of this tutorial.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you have entered your name, don't forget to name the `presented(1)` game
    object to something such as `yourName`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Game** tab window to see how it looks. This is what ours looks
    like:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.19 – Our bootup text is complete'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.19_B18381.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.19 – Our bootup text is complete
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: Save the scene.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have covered the fundamentals of a **Canvas** component and how to apply
    2D text. Next, we will be repeating a similar procedure and using the **Image**
    component. This is equivalent to the **Sprite Renderer** that we used for our
    shop scene buttons in [*Chapter 5*](B18381_05_Epub.xhtml#_idTextAnchor107), *Creating
    a Shop Scene for Our Game*. However, here, the **Image** component is for a 2D
    space.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'From this point to the end of the chapter, we will go through a series of subsections
    in order to polish and animate our scenes. We will cover the following:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: Starting with our title scene, we will improve its visuals by creating and applying
    **Text** and **Image** components.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use a custom font because we can, and it'll make our game look better
    than the standard fonts that come with Unity. From there, we will be able to further
    customize the `title` scene look more suitable for our game.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will then take what we have applied to the `title` scene and copy and paste
    it into the other scenes. From there, we will change the content of the text and
    its position slightly.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we will set up our **Animator** and **Animator Controller** states
    and animate our UI to introduce each game level.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's continue with polishing our `title` scene.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Improving our title scene
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will repeat the procedure that we already learned in the
    previous section without going into too much depth, as we already know how to
    create a Canvas, add custom text, and perform duplicating. In this section, we
    will also make use of Unity's **Image** component.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the transformation we will be undergoing, starting
    with our current title scene on the left and using the same techniques we applied
    in the previous section, along with adding **Image** components, to create the
    red stripe on the right:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.20 – Old Title screen on the left; what we will be replacing it
    with on the right'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.20_B18381.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.20 – Old Title screen on the left; what we will be replacing it with
    on the right
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, we won''t be going into all of the details; however,
    if you do struggle at any point, then please refer back to the previous section
    to guide you through what you should already know. Let''s get started:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: Let's begin by loading up our `title` scene from the `Assets/Scene`.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `255`.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Delete the `TitleText` game object from the **Hierarchy** window.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create just a `Canvas` game object in the **Hierarchy** window. Use the following
    screenshot as a reference:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.21 – Creating a Canvas'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.21_B18381.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.21 – Creating a Canvas
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'We are now going to create an empty game object. Inside this game object, we
    are going to store our **Text** and **Image** components:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: Create an empty game object by right-clicking in the lower open space of the
    **Hierarchy** window, and then select **Create Empty** from the drop-down list.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new empty game object will default to the name of `GameObject`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on this game object and select `Title`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the `Title` game object into the `Canvas` game object so that the former
    becomes a child.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Typically, when a new game object is created, it will automatically be given
    a **Transform** component that holds the game object's **Position**, **Rotation**,
    and **Scale** for a 3D space. In this section, our focus is on 2D space, so we
    need to change this game object from a **Transform** component into a **Rect Transform**
    component.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'To change the `Title` game object from **Transform** to **Rect Transform**,
    follow these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: With the `Title` game object selected in the **Hierarchy** window, click on
    the **Add Component** button in the **Inspector** window.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A drop-down list will appear. Type `rect transform` into the drop-down list
    search bar until it is possible to select it from the list, as shown in the following
    screenshot:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.22 – Select the Rect Transform from the dropdown'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.22_B18381.jpg)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.22 – Select the Rect Transform from the dropdown
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: We are now going to set our `Title` game object's `Title` game object's **Anchors**.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 'I have set my `Title` game object''s **Rect Transform** component to the following
    settings:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.23 – Update the Anchors Min and Max values'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.23_B18381.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.23 – Update the Anchors Min and Max values
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, in the previous screenshot, the `Title` game object are centered
    in the canvas's white box outline. Also, note that the **Rect Transform** component's
    **Left**, **Top**, **Pos Z**, **Right**, and **Bottom** positions are all set
    to the value of 0.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will be to add a red transparent stripe within the `Title` game
    object. To add an **Image** component, follow these instructions:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: Create a new game object in the **Hierarchy** window.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the game object `mainCol`.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag the `mainCol` game object on top of the `Title` game object to make `mainCol`
    a child of `Title`. Refer to the following screenshot for reference:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.24 – Canvas child objects order from the Hierarchy window'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.24_B18381.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.24 – Canvas child objects order from the Hierarchy window
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'With our `mainCol` game object still selected, we want its `Title` game object
    as it is the parent of our `mainCol` game object. The following screenshot is
    a reference to our `mainCol` **Rect Transform** properties:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.25 – mainCol Anchors set to full size'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.25_B18381.jpg)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.25 – mainCol Anchors set to full size
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `mainCol` game object still selected, select the `Image` into the
    drop-down list until it appears. When it does appear, select it. Use the following
    screenshot as a reference:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.26 – Add the Image component from the dropdown'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.26_B18381.jpg)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.26 – Add the Image component from the dropdown
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: We have now added an `mainCol` image.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will adjust the `mainCol` image react to the color change (denoted
    by **3**):'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.27 – Update the Image component''s Color setting to the displayed
    values'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.27_B18381.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.27 – Update the Image component's Color setting to the displayed values
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Further Information
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: With the **Image** component, if we added a sprite to the parameter instead
    of just changing the color alone, we would also have the ability to alter its
    **Image Type**. One of the types that can be used is called **Filled**. This can
    give you the impression that the sprite is filling up, which would be useful for
    a loading bar or a time limit that is counting down.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: If you would like to know more about the **Image** component and its other uses,
    view the documentation at [https://docs.unity3d.com/2017.3/Documentation/Manual/script-Image.html](https://docs.unity3d.com/2017.3/Documentation/Manual/script-Image.html).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add a strip to the top of the image we''ve just made with another
    game object containing an **Image** component. To do that, we will repeat our
    earlier methodology but with a tighter, thinner strip. Follow these steps:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: With `mainCol` still selected, press *Ctrl* (*command* on the Mac) and *D* on
    our keyboard to duplicate the game object.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the new game object `trim00`.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `trim00` game object''s `trim00` game object at the top:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.28 – trim00 Anchors Min and Max values'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.28_B18381.jpg)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.28 – trim00 Anchors Min and Max values
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: For our trim set, we don't need to change the color as it duplicates from the
    `mainCol` game object. We now need to repeat this process for the bottom part
    of the `mainCol` image.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the steps that we need to accomplish to copy another trim game object:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Duplicate the `trim00` game object and rename it to `trim01`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `trim01` game object''s **Rect Transform** settings to the same settings
    shown in the following screenshot:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.29 – trim01 Anchors Min and Max values'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.29_B18381.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.29 – trim01 Anchors Min and Max values
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'Now it''s time to enter our main title text, `KILLER WAVE`, by following these
    instructions:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Create another empty game object in the **Hierarchy** window.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give the new empty game object the name `TitleText`.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `TitleText` game object inside the `Title` game object. This is so that
    `TitleText` becomes a child of `Title`.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `TitleText` still selected, click on **Add Component** in the **Inspector**
    window and select **Rect Transform** from the drop-down list as before.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the `TitleText` **Rect Transform** settings to the following values:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.30 – TitleText Anchors Min and Max values'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.30_B18381.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.30 – TitleText Anchors Min and Max values
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: This will fill our `TitleText` `Title`).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'The final steps for our `TitleText` game object are to give it a **Text** component
    and set its values in the **Inspector** window:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: With the `TitleText` game object still selected in the `text` if it isn't there)
    from the drop-down list as before.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `killer wave`.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the small circle to the right of the `bootUp` scene (`ethnocentric
    rg it`).
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the **Alignment** buttons to center and middle.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tick **Best Fit**. This will leave it up to Unity to try and fit the text depending
    on the ratio it is in.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `140`. This will give us a fairly large title.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select a bright red color in the **Color** field.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Our title is set. The last thing we need to do in this scene is to set a message
    at the bottom of the screen to prompt the player to start the game.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Similar to what we did in the `bootUp` scene, we can duplicate our `TitleText`
    game object. However, this time, we are going to move the duplicated game object
    outside of the **Rect Transform** restrictions of its parent. The final text we
    will display will be a message to prompt the player to tap on the screen or shoot
    to begin playing the game.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'To enter the `SHOOT TO START` text, follow these instructions:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Select the `TitleText` game object in the **Hierarchy** window.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* (*command* on the Mac) and *D* to duplicate it.
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the duplicated game object `shootToStart`.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With `shootToStart` still selected, change its `SHOOT TO START` in the **Inspector**
    window.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `50`.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As mentioned earlier, we are going to move the **Text** selection from its current
    area to outside its parent.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 'Hold *Ctrl* (*command* on the Mac) and click on any of its white arrows. Then,
    pull the **Rect Tool** downward so that it is completely outside its parent **Rect
    Tool**, as highlighted in the following screenshot:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.31 – Move the shootToStart Anchors into the highlighted positions'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.31_B18381.jpg)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.31 – Move the shootToStart Anchors into the highlighted positions
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Zero out the `SHOOT TO START` text down and into the location where the white
    arrows are. The following screenshot shows the placement of the text along with
    its **Rect Transform** property values:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.32 – shootToStart Anchors Min and Max values'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.32_B18381.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.32 – shootToStart Anchors Min and Max values
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: We don't need to change any of the functionality of the scene as we have already
    set this up.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Save the scene.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows what our `title` scene now looks like:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.33 – Killer Wave title screen'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.33_B18381.jpg)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.33 – Killer Wave title screen
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have gone further with our text by duplicating it, altering it, and
    moving it outside of its parent **Rect Tool** game object. We have also introduced
    images and used them in a similar way to our 2D text.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now continue and work on the next scene: `gameOver`.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Duplicating our game objects
  id: totrans-264
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will improve the `gameOver` scene from its gray background
    and blocky white text and replace it with the same images and text from the `title`
    scene. However, this time, we won't be repeating the same steps from the previous
    sections to recreate the same outcome.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: We will copy, paste, and tweak the game objects to save time and effort rather
    than repeat what we have already achieved with the title scene.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 'As an overview, here is what our `gameOver` UI game objects will contain and
    do:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '`Canvas`: This is the parent of all of the UI game objects.'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GameOverTitle`: This holds all of the individual game objects relating to
    the **Text** and **Image** components.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mainCol`: The main red stripe in the center (holds the **Image** component).'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim00`: The red line at the top (holds the **Image** component).'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`trim01`: The red line at the bottom (holds the **Image** component).'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GameOverText`: The main **GAME OVER** text (holds the **Text** component).'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Thankfully, we don''t really need to worry too much about what their roles
    are because we have already established this in the previous section. To duplicate
    our game objects and move them from the `title` scene to `gameOver`, perform these
    steps:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: While still in our `title` scene, hold *Ctrl* (*command* on the Mac) on the
    keyboard and select **Main Camera** and **Canvas**.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both our objects will be highlighted. Right-click on either one of them and
    select **Copy** from the drop-down list.
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `gameOver` scene.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `GameOverText`. We will replace these with our copied game objects.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in an open space of the **Hierarchy** window and select **Paste**.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the arrow next to the `Canvas` game object in the `Title` game object
    and then click on **Rename** from the drop-down list.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the game object to `GameOverTitle`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the arrow next to `GameOverTitle` and rename the `TitleText` game object
    to `GameOverText`.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `shootToStart` game object and press *Delete* on your keyboard.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To confirm what we have done so far, the following screenshot shows the `gameOver`
    scene:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.34 – The Hierarchy window with its ordered game objects'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.34_B18381.jpg)'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.34 – The Hierarchy window with its ordered game objects
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: With `GameOverText` still selected, change its `killer wave` to `game over`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is what our `gameOver` scene should look like:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.35 – The Game Over screen'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.35_B18381.jpg)'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.35 – The Game Over screen
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discovered that we can simply copy and paste game objects
    from one scene to another as long as we work within the same Unity project. This
    saves time and effort and keeps our game looking uniform in accordance with the
    rest of the scenes.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will learn how to animate our UI game objects.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Preparing to animate UI game objects
  id: totrans-296
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, we will use a number of techniques that we have already covered,
    so we won't be going into the same level of detail. Once we have duplicated and
    changed the game objects, we will also be adding animation elements to make our
    2D visuals less static.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: We will be using a similar methodology to the `gameOver` scene by copying our
    previous scene's `Canvas` with its child game objects (not the `gameOver` scene
    as it has the basic elements we need. This only requires a couple of amendments
    before moving on to the animation phase.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up the `level1` scene, perform the following steps:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: Make sure our `gameOver` scene is still open in the Unity Editor. This is because
    we are going to copy some game objects over into the `level1` scene.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Canvas` game object and click on **Copy** from the drop-down list.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `level1` scene from the **Project** window.
  id: totrans-302
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the `Canvas` in our `level1` scene.
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will rename two game objects to suit our `level1` scene.
  id: totrans-304
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `Canvas` game object in the `GameOverTitle` game object. Right-click
    on it and select **Rename** from the drop-down list.
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the game object to `LevelTitle`.
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the `LevelTitle` game object in the **Hierarchy** window.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `GameOverText` in the `Level`.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That's all that we need to do to our `Canvas` game object in the `LEVEL 1`.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Level` game object still selected, remove `LEVEL 1`, as shown in
    the following screenshot:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.36 – Level 1 text typed out'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.36_B18381.jpg)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.36 – Level 1 text typed out
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to start animating the UI 2D text and its image. All the game
    objects that we will be animating sit within the `LevelTitle` game object.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'To set up our animation, we need to do the following:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: While you are still in the `level1` scene, select `LevelTitle` under the **Canvas**
    game object in the **Hierarchy** window.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `LevelTitle`, click on the **Add Component** button at the bottom.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `Animator` until you see the word **Animator** appear, and then select
    it.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Our `LevelTitle` game object now has an `LevelTitle` game object. To do that,
    follow these steps:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: In the `Assets/Animator`.
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in an open space of the **Project** window and select **Create**
    from the drop-down list, followed by **Animator Controller**.
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the name of the new `LevelTitle`.
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to attach the new `LevelTitle` **Animator Controller** to our **Animator**
    component.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: Back in the `LevelTitle` game object, and click on the small round circle (which
    is referred to as a remote, denoted by an arrow in the following screenshot) next
    to the `LevelTitle` game object from the drop-down list.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the `LevelTitle` game object with the `LevelTitle`
    controller selected:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.37 – LevelTitle game object with an Animator component and a LevelTitle
    Animator Controller'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.37_B18381.jpg)'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.37 – LevelTitle game object with an Animator component and a LevelTitle
    Animator Controller
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to create an animation so that we can add it to the **Animator
    Controller**:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: In the `Assets/Animator` location, right-click in an open space. Select **Create**
    | **Animation**.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename the `levelTitle_A`.
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's now open the `levelTitle_A` clip to it.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the Unity Editor, click on **Window** followed by **Animator**.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will open the **Animator** window.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Select the `LevelTitle` game object in the **Hierarchy** window. The content
    for the **Animator** will appear with its three states (**Any State**, **Entry**,
    and **Exit**).
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Animator** window with its three default
    states and also a reference to the location of the **Animator Controller** that
    is selected:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.38 – Animator window with the name of the location of the Animator
    Controller file'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.38_B18381.jpg)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.38 – Animator window with the name of the location of the Animator
    Controller file
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: Before we drop the animation clip in, it will benefit us to have a small time
    delay before the clip is played; otherwise, the animation might play too soon.
    In order to fix this, we can make an empty state that has a time limit. We can
    set this `levelTitle_A`).
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an **idle** state and hook it up to the intended animation clip,
    follow these steps:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click in an empty part of the **Animator** window and select **Create
    State** | **Empty**. The following screenshot shows the drop-down list we should
    expect:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.39 – Creating an empty state'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.39_B18381.jpg)'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.39 – Creating an empty state
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: Select **New State** and, in the **Inspector** window, change the **New State**
    name to **Idle**. Then, press *Enter* on your keyboard.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we can drag `levelTitle_A` from the **Project** window to the **Animator**
    window.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We now need to join the transition from our `Idle` game state to the `levelTitle_A`
    state.
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the **Idle** state and select **Make Transition** from the drop-down
    list.
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **levelTitle_A** to make a connection between the two states.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot indicates what our states should look like now:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.40 – Our animation states transitioning from Entry > Idle > levelTitle_A'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.40_B18381.jpg)'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.40 – Our animation states transitioning from Entry > Idle > levelTitle_A
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'It will not be necessary to use the **Animator** window after the animation
    is complete, and we may need to tweak the delay. However, for this, we will need
    to use the **Animation** window, so it''s ideal to have this at the bottom of
    the screen. To do that, perform these steps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: In the **Project** window, click on the **Add Tab** button from the drop-down
    list.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Animation**.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot is in accordance with the preceding numbered bullets:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.41 – Displaying the Animation window'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.41_B18381.jpg)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.41 – Displaying the Animation window
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have brought in the **GAME OVER** UI art and replaced the
    text from its **Text** component; we also brought over its sprites (banner and
    trim) and **Image** component to give us a representation of which level we are
    on. We then prepared the game objects to be animated with the **Animator Controller**
    and its states, followed by creating a blank **Animation** clip.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: We can now start animating the entrance and exit for our **LEVEL 1** UI art
    in the next section.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: Animating our UI level title
  id: totrans-364
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are going to animate two game objects: the level title and the main strip
    bar in the `level1` scene. In the previous section, we set up the **Animation**
    window at the bottom of the Unity Editor. The following screenshot shows our current
    setup for the placement of the windows, which may be helpful for reference purposes:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.42 – Recommended Unity Editor window layouts'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.42_B18381.jpg)'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.42 – Recommended Unity Editor window layouts
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'With regard to the animation itself, we will be animating the following:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: The level text that moves on to the screen.
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main center strip will glow red.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The text that will exit the screen.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following screenshots show this:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.43 – UI animation sequence for level 1'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.43_B18381.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.43 – UI animation sequence for level 1
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: So, the four main elements to animate are the `Level` game object, which contains
    the 2D `mainCol`, `trim00`, and `trim01` game objects that contain the `Level`
    game object first.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: Animating the 2D text component
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In this section, we are going to animate the text from the left to the center.
    It will pause so the player has a chance to read it. Then, it will move out of
    the screen:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: In the `Canvas` game object to expand its content if it isn't expanded already.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the arrow next to the `LevelTitle` to do the same.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Level` game object.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Animation** window, click on the record button, as shown in the following
    screenshot:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.44 – Record button for animation'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.44_B18381.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.44 – Record button for animation
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: With our animation track line scrubbed (note that scrub is an animation term
    for dragging our timeline indicator) all the way back to `Level` game object from
    the center of the Canvas to the left in the **Scene** view by doing the following.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `Level` game object still selected in the `-2000` and `2000`) property
    fields to move our 2D `LEVEL 1` text out of the **Canvas** view, as shown in the
    following screenshot:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.45 – Position the Level game object Rect Transform property values'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.45_B18381.jpg)'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.45 – Position the Level game object Rect Transform property values
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: Now that our `LEVEL 1` 2D text is pushed out of the way, we can scrub the animation
    line forward.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: 'Click and drag within the timeline digits, as shown in the following screenshot:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.46 – Adjusting the display of the timeline'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.46_B18381.jpg)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.46 – Adjusting the display of the timeline
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: In the **Animation** window, drag the white vertical line from **0:00** to **0:34**.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `Level` game object's **Rect Transform** **Left** and **Right** properties
    to 0.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The fields will turn red to show the change has been recorded. The animation
    timeline in the **Animation** window will gain keyframes from the movement of
    the 2D text.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the changes made to the timeline:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.47 – Animation timeline with its recorded area'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.47_B18381.jpg)'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.47 – Animation timeline with its recorded area
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: 'We obviously want the `LEVEL 1` text to stay where it is for a few seconds
    before it leaves the screen again. To make the text pause in the center before
    moving, follow these steps:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: In the **Animation** window, move the white line from **0:34** to **1:25**.
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Add keyframe** button.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the timeline is at **1:25**, with new keyframes
    added while the record button is clicked on:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.48 – Adding a keyframe button'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.48_B18381.jpg)'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.48 – Adding a keyframe button
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: For our next keyframe point, drag the white line to **1:50**.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we have come to the stage where we want to move the UI text from its center
    position to out of view of the camera.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Level` game object.
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `2000`
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`-2000`'
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will push the `LEVEL 1` text out of the camera view, as shown in the following
    screenshot:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.49 – Level game object Rect Transform recorded property values'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.49_B18381.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.49 – Level game object Rect Transform recorded property values
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Move your mouse cursor down to the timeline **Animation** window. Then, click
    and press *F* on your keyboard. This will show all of the keyframes for the total
    animation we have just done.
  id: totrans-420
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **record** button in the **Animation** window timeline to stop
    recording, and scrub backward and forward to see our 2D text animate in, pause,
    and then move out of the screen.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have made a start by animating the `Level 1` text within the `Canvas` with
    Unity's **Animation** system.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Our UI text starts on the far left (out of view of the camera), animates into
    the center, pauses, and then animates out of view.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Now we can continue to animate the UI and move our focus from positioning to
    changing our UI's color (R, G, B, A) to a glowing red in the next section. This
    will show that our animation isn't just applied to one component but is shared
    through a series of components. We will animate the **Image** component next.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Animating the Image component's center strip
  id: totrans-425
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The second part of the animation phase is to have the center strip for the level
    title glow red and then disappear. To do this, all animation for the `mainCol`,
    `trim00`, and `trim01` game objects will be manipulated in the **Inspector** window
    through their **Image** component's **Color** settings.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s start animating the **Image** components for all three game objects:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: In the `mainCol`, `trim00`, and `trim01`. These are the game objects we will
    be animating.
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Animation** window, move the line bar all the way back to **0:00**.
  id: totrans-429
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **record** button in the **Animation** window.
  id: totrans-430
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With all three game objects still selected, click on the `255`, `0`, `0`, and
    `0`. Refer to the following screenshot:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.50 – Update the Image component Color values while recording'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.50_B18381.jpg)'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.50 – Update the Image component Color values while recording
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: 'Our `mainCol`, `trim00`, and `trim01` **Image** component''s alpha color properties
    (note that alpha is the **A** from **R**, **G**, **B**, and **A**). The **Alpha**
    setting will alter the transparency of the image:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.51 – Image component keyframes in the Animation window'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.51_B18381.jpg)'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.51 – Image component keyframes in the Animation window
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'In basic terms, the three game objects are invisible at the start of the animation
    in the **Scene** window. Next, we need to make the images come out of the transparency
    phase and glow red. To do that, we now need to move our timeline indicator over
    to **0:55** and perform the following steps:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: 'With the three game objects still selected, change the `255`, `0`, `0`, and
    `120`, as shown in the following screenshot:'
  id: totrans-440
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.52 – Update the Image component color values for our three selected
    game objects'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.52_B18381.jpg)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.52 – Update the Image component color values for our three selected
    game objects
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: 'Our three game objects have now become visible again in the **Scene** view.
    The final part of the animation is to make the three game objects turn invisible
    again. Instead of going back into the **Color** value settings, we can simply
    copy and paste the keys we created in the timeline at **0:00**. To copy our keyframes,
    do the following:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: With our three game objects and the record button still selected in the **Animation**
    window, move the timeline indicator back to **0:00**.
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select all three `Image.Color.a` changes in the **Animation** window, as shown
    in the following screenshot:'
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.53 – Select the three keyframes in the Animation window'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.53_B18381.jpg)'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.53 – Select the three keyframes in the Animation window
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: Press *Ctrl* (*Command* on the Mac) and *C* on your keyboard to copy the keyframes.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the record button in the **Animation** window to stop recording the
    animation.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scrub to **1:50** and press *Ctrl* (*Command* on the Mac) and *V* on your keyboard
    to paste.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move your mouse cursor to the **Animation** window. Click and press *F* on the
    keyboard to get a full view of the timeline. Move the cursor back and forth to
    see the level text animating into the scene and the center strip glowing red.
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When our Level 1 scene starts, we will see the title and the red bar before
    the animation, which we don''t want. Therefore, we need to set the Level 1 text
    and red bar to the same values as the first frame of our animation:'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: Select the `mainCol` game object and set the `0`.
  id: totrans-455
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `trim00` `0`.
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `trim01` `0`.
  id: totrans-457
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `-2000` and the `2000`.
  id: totrans-458
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the default position and alpha settings of the
    previous steps:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.54 – Default position and color of our level title UI'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.54_B18381.jpg)'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.54 – Default position and color of our level title UI
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: Save the scene.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's remind ourselves briefly of what we have covered so far before we move
    on to the final section. We took our `mainCol`, `trim00`, and `trim01` game objects
    and changed their **Image** component's **Color** alpha values over a series of
    keyframes using the animation timeline.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: Let's now move on to the next section where we will copy our art, text, and,
    in some cases, animation into other scenes. From there, we will tailor the components
    to each scene.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: Copying and pasting art, text, and animation into other scenes
  id: totrans-466
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Finally, we can copy all of the hard work of our `level1` scene (including
    its animation) and paste it into the `level2` and `level3` scenes and amend each
    level number. To do that, follow these steps:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy** window, select **Canvas** and press *Ctrl* (*Command* on
    the Mac) and *C* on your keyboard.
  id: totrans-468
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `level2` in `Assets/Scene`.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click in an open space of the `level1` scene's `Canvas` game object and all
    of its content.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Level` game object in the `Canvas` and `LevelTitle`).
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the `Level 1` to `Level 2`.
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the scene.
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the process for the `level3` scene.
  id: totrans-474
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 8.55 – Duplicate and edit the level title number'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.55_B18381.jpg)'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.55 – Duplicate and edit the level title number
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: Well done! Another big chapter has been conquered. We have started to make our
    game shine with some sweet art that we made ourselves. Let's recap what we have
    achieved.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: 'We took some plain gray scenes and made them more presentable and fit with
    our sci-fi game. This was all thanks to the Unity Editor, as we were able to achieve
    this with no scripting. The main components we covered were as follows:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '**Text**: We imported a custom font and tweaked it within the component itself.'
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image**: With any sprites, we set our colors to create a series of red stripes
    with transparency.'
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animator Controller**: Held states for when the **Image** and **Text** components
    were to be animated.'
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Animation**: Each keyframe for a mixture of components was set in a single
    timeline animation.'
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we didn't need to repeat the process followed for the UI we created
    at the beginning of the chapter by adding the UI's text, images, animation all
    over again. We took the majority of these game objects and components from one
    scene (killer wave title screen) and pasted the game objects to the existing scenes
    (level title and game over) to act as a template for the game's theme. Once these
    components were in place, we simply modified the text field (changing the text
    from killer wave to level 1 and so on).
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: This makes working with Unity fast and user-friendly. We didn't need to start
    over again each time for a new UI scene from scratch. With our UI visually improved,
    you should hopefully start to feel like our project is turning more into a polished-looking
    prototype.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得使用 Unity 变得快速且用户友好。我们不需要每次从头开始为新 UI 场景工作。随着我们的 UI 视觉上得到改善，你可能会希望开始觉得我们的项目正变得更加精致。
- en: Summary
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter was about taking our game project and polishing its current content
    with regard to the existing UI. It is also required for your Unity Programmer
    Exam to understand what tools and components we have to help us create our game
    with regard to the *Working in the art pipeline* core exam skill.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是关于对我们的游戏项目进行润色，使其现有内容与现有 UI 保持一致。这也要求你在 Unity 程序员考试中理解我们有哪些工具和组件可以帮助我们根据“在艺术管道中工作”的核心考试技能来创建游戏。
- en: We also took our **Text** and **Image** components and created one piece of
    animation from multiple game objects. These animations were called from the **Animator
    Controller** state machine.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还取用了 **文本** 和 **图像** 组件，并从多个游戏对象中创建了一个动画。这些动画是通过 **动画控制器** 状态机调用的。
- en: In your future projects, you will have the option to keep your UI presentable
    while putting your game loop together.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的未来项目中，你将有机会在构建游戏循环的同时保持你的 UI 令人印象深刻。
- en: In the next chapter, we will extend our current UI skills by making our `shop`
    scene more flexible with a range of screen ratios. Additionally, we will create
    a UI to sit at the bottom of our in-game levels.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过使我们的 `商店` 场景具有多种屏幕比例来扩展我们当前的 UI 技能。此外，我们还将创建一个位于游戏关卡底部的 UI。
