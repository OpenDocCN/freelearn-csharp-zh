- en: Chapter 5. Developing Your First Android App with Xamarin.Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will develop a sample app similar to `NationalParks.iOS`
    from the last chapter using Xamarin.Android. This chapter covers the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the sample app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Xamarin.Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Editing Android layout files with Xamarin Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and debugging apps with Xamarin Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and debugging apps with Visual Studio
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting compile-time generated elements of a Xamarin.Android app
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The sample app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The sample app we will create in this chapter follows the same basic design
    as the `NationalParks.iOS` app from the previous chapter. To review the screen
    mockups and general description you can refer to the *The sample national parks
    app* section in [Chapter 4](ch04.html "Chapter 4. Developing Your First iOS App
    with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*. The following
    screenshots show the Android screens from the provided solution:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The sample app](img/0838OT_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is one design change we will introduce in the Android version of the app;
    we will create a singleton class to help manage loading and saving parks to a
    JSON-formatted file. This will be discussed further when we start building the
    singleton class in an upcoming section, *Creating the NationalParksData singleton*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating NationalParks.Droid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will begin by creating a new Android project and adding it to our existing
    `NationalParks` solution created in the previous chapter. Xamarin Studio allows
    both Android and iOS projects to be part of the same solution. This proves to
    be very useful particularly as we move towards the later chapters that are focused
    on code reuse. You will find that the next chapter, [Chapter 6](ch06.html "Chapter 6. The
    Sharing Game"), *The Sharing Game*, will show you exactly how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the national parks Android app, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You first need to launch Xamarin Studio and open the `NationalParks` solution
    created in the previous chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Following this, select the `NationalParks` solution in the **Solution** pad
    on the left-hand side of Xamarin Studio, right-click on it, and navigate to **Add**
    | **Add New Project…**, as shown in the following screenshot:![Creating NationalParks.Droid](img/0838OT_05_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **C#** | **Android** on the left-hand side of the dialog box and
    **Android Application** in the middle section, as follows:![Creating NationalParks.Droid](img/0838OT_05_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now need to enter `NationalParks.Droid` in the **Name** field and click
    on **OK**. Xamarin Studio will then create a new project, add it to the `NationalParks`
    solution, and open it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reviewing the app
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A simple working app has been created that contains a number of files; let's
    take a few minutes to review what was created.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Resources` folder corresponds to the `res` folder in a traditional Java
    Android app. It contains subfolders with the various types of resources that can
    be used, including layouts, menus, drawables, strings, and styles. Subfolders
    within `Resources` follow the same naming conventions as in traditional Java Android
    apps, drawables, layouts, values, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Resource.designer.cs file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Resource.designer.cs` is a C# source file in the `Resources` folder that is
    generated by Xamarin.Android and contains constant ID definitions for all the
    resources in the app; it corresponds to the `R.java` file generated for Java Android
    apps.'
  prefs: []
  type: TYPE_NORMAL
- en: The MainActivity.cs file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`MainActivity.cs` is a C# source file in the root of the `NationalParks.Droid`
    project and is the only activity added to the project. Open the file to view the
    contents. Note the attributes at the top of the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The specification of `Label` and `MainLauncher` will affect the contents of
    `ApplicationManifest.xml`. Note the overridden `OnCreate()` method in the following
    code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: With the exception of the fact that `OnCreate()` is using C# syntax, the code
    within it looks very similar to what you might find in a Java Android app. Near
    the top, the content is set to the `Main` layout file; `Resource.Layout.Main`
    is a constant defined in `Resource.designer.cs`. A reference to a `Button` instance
    is obtained by a call to `FindViewById()`, and then an event handler is assigned
    to handle click events.
  prefs: []
  type: TYPE_NORMAL
- en: The Main.axml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`Main.axml` is an XML layout file located in the `Resources/layout` folder.
    Xamarin.Android uses the extension `.axml` for layout files rather than simply
    using `.xml`. Other than using a different extension, Xamarin.Android treats layout
    files in essentially the same way that a Java Android app does. Open `Main.axml`
    to view the contents; at the bottom of the screen, there are tabs to switch between
    a visual, content view, and a source or XML view. Notice that there is a single
    `Button` instance defined with `LinearLayout`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Xamarin.Android honors the Android naming convention for layout folders, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Resources/layout`: This naming convention is used for a normal screen size
    (default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resources/layout-small`: This naming convention is used for small screens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resources/layout-large`: This naming convention is used for large screens'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Resources/layout-land`: This naming convention is used for a normal screen
    size in landscape mode'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Project Options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are many options that can be set that affect the way your app is compiled,
    linked, and executed. These options can be viewed and modified from the **Project
    Options** dialog box. The sections that are most interesting for Android apps
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Build** | **General**: This setting is used for the Target framework version'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build** | **Android Build**: This setting is used by the compile and link
    process to optimize the resulting executable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Build** | **Android Application**: This setting gives the default package
    name, app version number, and app permissions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To set the Target framework version for `NationalParks.Droid`, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `NationalParks.Droid` project in the **Solution** pad.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click and select **Options**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Build** | **General** and set the **Target Framework** option
    to **4.0.3 (Ice Cream Sandwich)** and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin Studio Preferences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xamarin Studio provides a **Preferences** dialog box that allows you to adjust
    various preferences that control how the environment operates. These are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Projects** | **SDK Locations** | **Android**: Using this option, you can
    control the location for the Android SDK, Java SDK, and Android NDK that should
    be used to compile and run apps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Projects** | **Android**: These settings affect how the Android Emulator
    is launched including command-line arguments'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running and debugging with Xamarin Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While the app we currently have is very simple, it is runnable, and now is a
    good time to take a look at how you can execute and debug Xamarin.Android apps.
    Apps can be executed in a number of ways; the two most common ways are the Android
    Emulator and a physical device.
  prefs: []
  type: TYPE_NORMAL
- en: Running apps with the Android Emulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin.Android works with the Android Emulator to support executing and debugging
    your app. When Xamarin.Android is installed, a number of **Android Virtual Devices**
    (**AVD**) are automatically set up for your use. You can launch the AVD Manager
    from the **Tools** menu by choosing **Open Android Emulator Manager**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run `NationalParks.Droid`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Start/Stop** button on the left-hand side of the taskbar. You
    can also run the app by pressing *F5* or by navigating to **Run** | **Start Debugging**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select an AVD on the **Select Device** dialog box and click on **Start
    Emulator**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the emulator has completed startup, select the name of the running emulator
    instance in the **Devices** list and click on **OK**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You now need to click on the **Hello World** button on the app and note the
    caption change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to Xamarin Studio and stop the app by clicking on the **Start/Stop**
    button on the left-hand side of the taskbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open `MainActivity.cs` and set a breakpoint on the `SetContentView()` statement
    in `OnCreate()` by clicking in the far-left margin of the editor window, which
    you can see in the following screenshot. At this point, restart `NationalParks.Droid`;
    the app will stop at the breakpoint:![Running apps with the Android Emulator](img/0838OT_05_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will find the basic flow controls to step through execution in the taskbar.
    These allow you to (icons from left to right) continue execution, step over the
    current line, step into the current function, and step out of the current function:![Running
    apps with the Android Emulator](img/0838OT_05_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the step controls to go to line 27, highlight the button in the text, right-click
    on it and select **Expression Evaluator**. The **Expression Evaluator** dialog
    box can be used to view the state of objects during the program execution, as
    follows:![Running apps with the Android Emulator](img/0838OT_05_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will also notice a set of panels at the bottom of Xamarin Studio that contains
    tabs for **Watch**, **Locals**, **Breakpoints**, **Threads**, **Application Output**,
    and **Call Stack**, as follows:![Running apps with the Android Emulator](img/0838OT_05_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Continue** button to allow the app to continue running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As you can see, Xamarin Studio, in combination with the Android Emulator, provides
    a robust environment to execute and debug apps with most of the features that
    can be found in most modern IDEs.
  prefs: []
  type: TYPE_NORMAL
- en: You can make any modifications to the list of AVDs from the AVD Manager (**Tools**
    | **Open Android Emulator Manager**), and you can make any adjustments to the
    Android SDK from Android SDK Manager (**Tools** | **Open Android SDK Manager**).
  prefs: []
  type: TYPE_NORMAL
- en: Running apps on a physical device
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Xamarin Studio also supports debugging apps running on a physical device. This
    is generally the most productive way to develop and debug apps as many of the
    device features can be challenging to configure and use in the emulator. There
    is really nothing special about getting Xamarin Studio to work with a device;
    simply go through the normal steps of enabling USB debugging on the device, attach
    the device to your computer, and start the app from Xamarin Studio; the device
    will show up in Xamarin Studio's **Select Device** dialog box. As you might be
    aware, on Windows, a special USB driver is required that corresponds with the
    device being used; generally OS X users are good to go.
  prefs: []
  type: TYPE_NORMAL
- en: The issues related to debugging with an emulator or physical device is not unique
    or even different because of the use of Xamarin; it's an issue that all Android
    developers face.
  prefs: []
  type: TYPE_NORMAL
- en: Running apps with Genymotion
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A while ago, I became aware of another option to run Android apps. Genymotion
    is a product that is based on the VirtualBox virtualization platform. Genymotion
    provides a set of virtual device templates for many of the Android devices available
    on the market today. Once a virtual device is created, you simply start it and
    it will be selectable from Xamarin Studio's **Select Device** dialog box just
    like a running AVD.
  prefs: []
  type: TYPE_NORMAL
- en: With all the different device templates that come with Genymotion, it's a great
    testing tool. Genymotion also has a much quicker start time and a much more responsive
    execution time than the standard Android Emulators. There are free and paid versions
    depending on what features you need, irrespective of whether you are using Xamarin.Android
    or native Java Android development. You can find more information about Genymotion
    on their home page at [http://www.genymotion.com](http://www.genymotion.com).
  prefs: []
  type: TYPE_NORMAL
- en: Extending NationalParks.Droid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we have a good understanding of our starting point, we can now turn our
    attention to enhance what we have to support the features we need. We have the
    following enhancements to complete:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a `ListView` instance to `MainActivity` to list national parks and an add
    action in the `ActionBar` class to add a new national park.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a detail view that can be used to view and update national parks with actions
    to save and delete national parks as well as to view photos on [www.Bing.com](http://www.Bing.com)
    and get directions from a map provider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add logic to load and save national parks to a JSON-formatted text file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Storing and loading national parks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the `NationalParks.iOS` project, we will store our parks data in
    a JSON-formatted text file. In this project, we will create a singleton class
    to help manage loading and saving parks. We are going with a singleton class for
    a couple of reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we are going to start looking at sharing and reusing code;
    this gets us started on a solution we will want to reuse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a little more difficult to pass an object between `Activities` in Android
    than it is between `ViewControllers` in iOS, and the singleton class will provide
    a convenient way to share park data
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Json.NET
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you worked through [Chapter 4](ch04.html "Chapter 4. Developing Your First
    iOS App with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*,
    Json.NET will already be installed on your machine and you simply need to add
    this to your project.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add Json.NET to the `NationalParks.Droid` project, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Components` folder in the `NationalParks.Droid` project in the **Solution**
    pad, right-click and choose **Edit Components**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you see Json.NET listed in the **Installed on this machine** section, click
    on **Add to Project** and you are done; otherwise continue with the next step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the upper-right hand corner, click on **Get More Components** and enter `Json.NET`
    in the search field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Json.NET** from the list and choose **Add to App**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Borrowing the entity class and JSON file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We need an entity class that represents our subject area: the national parks.
    This sounds familiar if you worked through [Chapter 4](ch04.html "Chapter 4. Developing
    Your First iOS App with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*,
    where we created one. As one already exists, there is no need to create one from
    scratch, so let''s just copy it from `NationalParks.iOS`. In [Chapter 6](ch06.html
    "Chapter 6. The Sharing Game"), *The Sharing Game*, we will look at actually sharing
    the code between projects.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To copy the `NationalPark.cs` file, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `NationalPark.cs` file in the `NationalParks.iOS` project, right-click
    on it, and choose **Copy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `NationalPark.Droid` project, right-click on it and choose **Paste**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the NationalParksData singleton
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we mentioned previously, we will create a singleton class to simplify sharing
    and accessing national parks. A singleton is a design pattern that restricts the
    number of instances of class that can exist within an app to a single instance.
    Singletons can be helpful in maintaining global state and sharing a single object
    across multiple views. For our purposes, the singleton pattern simplifies managing
    a single collection of national parks and housing the logic required to load and
    save parks to a JSON-formatted file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create `NationalParksData`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `NationalParks.Droid`, right-click on it, and navigate to **Add** | **New
    File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **General** | **Empty Class**, enter `NationalParksData` for the **Name**
    field, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `static` `instance` property to access a single instance for `NationalParksData`
    and initialize the single instance in the getter for the property, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Parks` collection property to load the parks into:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note the use of `protected set`, which protects the `Parks` property from being
    modified outside of the singleton class.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are several places we need to determine the filename to load and save
    parks to a JSON-formatted file. Create a method that returns a fully-qualified
    filename, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a private constructor that loads the `Parks` collection if a file exists.
    Providing a private constructor is a part of implementing the singleton pattern
    as it helps ensure only a single instance exists. The private constructor can
    be added using the following code snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Save()` method. This method accepts a park, adds it to the `Parks` collection
    if it is a new park, and then saves the collection to the file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `Delete()` method. This method removes the park from the `Parks` collection
    and saves the updated collection to the file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enhancing MainActivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the `NationalParksData` singleton in place, we can move on to some of the
    UI work. The Xamarin.Android project template did not give us much of a head start
    as we received in the last chapter. We need to add a list view to `MainActivity`,
    create a `DetailActivity` to view a park, and create an `EditActivity` to update
    and delete parks. `MainActivity` is a good starting point.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a ListView instance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The default view (`Main.xml`) generated when we created the project contains
    a `Button` instance within `LinearLayout`. We need to remove this button and add
    a `ListView` instance to display our parks.
  prefs: []
  type: TYPE_NORMAL
- en: Touring the Xamarin.Android Designer
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Xamarin Studio provides a graphical design tool to create and edit layout files.
    As this is our first time using this tool, we will devote a few minutes to become
    familiar with it. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `Main.xml`; note the two tabs at the bottom of the view, **Content** and
    **Source**. With the **Content** tab selected, a visual representation of the
    layout is displayed. With the **Source** tab selected, the raw XML is displayed
    in an XML editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, switch to the **Content** tab. Note that on the right-hand side of Xamarin
    Studio, there are two pads, **Document Outline** and **Properties**. When a layout
    is opened in the **Content** mode, the **Document Outline** pad displays a hierarchical
    view of the contents of the layout file. The **Document Outline** pad shows the
    **Button** control within `LinearLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The **Properties** pad displays properties for the currently selected widget.
    Select the **Button** instance and switch to the **Properties** pad. Note the
    tabs at the top of the **Properties** pad: **Widget**, **Style**, **Layout**,
    **Scroll**, and **Behavior**. The tabs group together the various types of properties
    available for a particular widget.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Editing the Main.xml file
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To add a `ListView` instance in `Main.xml`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: With `Main.axml` open in the **Content** mode, select the **Button** instance,
    right-click on it, and choose **Delete** (or press the *Delete* key).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the search field at the top of the **Toolbox** tab, enter `List`. Select
    the `ListView` widget displayed and drag-and-drop it to `Main.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Document Outline** pad, select the `ListView` widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** pad under the **Widget** tab, enter `@+id/parksListView`
    for the **ID** value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Document Outline** pad, select the `LinearLayout` widget.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** pad under the **Layout** tab, enter `8dp` for **Padding**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating an adapter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need a `ListAdapter` instance to populate our `ListView` with national parks.
    We will create an adapter that extends from `BaseAdapter`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create `NationalParksAdapter.cs`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `NationalParks.Droid` project, right-click on it, and choose **New
    File**. In the **New File** dialog box, navigate to **Android** | **Android Class**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `NationalParks.cs` for the **Name** field and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change `NationalParksAdapter` to be a public class and to extend `BaseAdapter<>`
    using `NationalPark` as the type specification, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Place the cursor on `BaseAdapater<>`, right-click on it, and navigate to **Refactor**
    | **Implement** abstract members, and then press *Enter*. Xamarin Studio will
    create a default method stub for each abstract method with code that throws the
    exception `NotImplementedException`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you can implement a constructor that accepts an activity and
    saves the reference for use within `GetView()`, as shown in the following code
    snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `GetItemId()` method and return the position that was passed
    as the ID. The `GetItemId()` method is intended to provide an ID for a row of
    data displayed in `AdapterView`. Unfortunately, the method must return a `long`
    instance, and our ID is a GUID. The best we can do is return the position that
    is passed to us, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `Count` property to return the number of items in the `Parks`
    collection, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the indexed property and return the `NationalPark` instance located
    at the position passed in within the `Parks` collection, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Implement the `GetView()` method and return a populated `View` instance for
    a park using the default Android layout `SimpleListItem1`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To conclude these steps, hook up the adapter to `ListView` on `MainActivity`.
    This is normally done in the `OnCreate()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding the New action to the ActionBar
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We now need to add an `Add` action to the ActionBar, which can be used to create
    a new national park.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the `Add` action, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You firstly need to select the `Resources` folder in the `NationalParks.Droid`
    project, right-click on it, and navigate to **Add** | **New Folder**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At this point, name the folder `menu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the newly created `menu` folder, right-click on it, and navigate to **Add**
    | **New File**, then select **XML** | **Empty XML File**, enter `MainMenu.xml`
    in the **Name** field, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the newly created XML file with a menu definition for the **Add** action.
    The following sample demonstrates what is needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Copy all of the image files (`*.png`) from the `Assets` folder to the `Resources/drawable`
    folder in the `NationalParks.Droid` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Resources/drawable` folder, right-click and choose **Add Files**,
    select all of the image files, including `ic_new.png`, and click on **Open**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have the menu definition and graphics in place, we need to add some
    code to put the menus in place. Android provides several virtual methods to create
    and process clicks for ActionBar items.
  prefs: []
  type: TYPE_NORMAL
- en: Overriding the OnCreateOptionsMenu() method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `OnCreateOptionsMenu()` method is called when an activity is started and
    provides a place to create ActionBar items. The following code demonstrates how
    to use the definition in `MainMenu.xml` to create the `Add` action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Overriding the OnOptionsItemSelected() method
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `OnOptionsItemsSelected()` method is called when an action in the ActionBar
    is clicked on, and it provides a place to handle the request. In our case, we
    want to navigate to the detail view, which has not been created yet. For now,
    simply implement the `OnOptionsItemSelected()` method with a placeholder for the
    navigation logic. The following code demonstrates what is needed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Running the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have completed our enhancements to `MainActivity`. Run the app and review
    the changes. When you initially start the app, you will notice that `ListView`
    is empty. You can place the `NationalParks.json` file in the emulator virtual
    device using the **Android Device Monitor** (**ADM**). Xamarin Studio is not configured
    with a menu item for ADM, but you can add one using **Preferences** | **External
    Tools**.
  prefs: []
  type: TYPE_NORMAL
- en: Upload `NationalParks.json` to the emulator using the ADM application. Restart
    `NationalParks.Droid`; you should now see parks listed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the DetailActivity view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now, let's add a view that displays the details for a national park. For this,
    we need to create a simple view with `ScrollView` as the parent `ViewGroup` and
    `EditText` widgets for each of the properties on the `NationalPark` entity class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the `DetailActivity` view, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `NationalParks.Droid` project in the **Solution** pad, right-click
    and navigate to **Add** | **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this, navigate to **Android** | **Android Activity**, enter `DetailActivity`
    for the value of the **Name** field, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, select the `Resources/layout` folder in `NationalParks.Droid`, right-click
    on it, and navigate to **Add** | **New File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to **Android** | **Android Layout**, enter `Detail` for the **Name**
    field, and click on **New**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Outline** pad, select `LinearLayout`, right-click on it, and choose
    **Delete**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Toolbox** pad, select the `ScrollView` widget and drag it onto the
    `Detail.axml` layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Toolbox** pad, select `LinearLayout` and drag it onto the `Detail.axml`
    layout.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Properties** pad under the **Layout** tab, set **Padding** to `8dp`
    for `LinearLayout`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `TextView` widgets for each property on the `NationalPark` entity class
    except the `ID` property. Also, add `TextView` widgets that serve as labels. For
    each of the `TextView` widgets that will be used to display properties, fill in
    the `ID` property with a name that corresponds to the property names on the entity,
    for example, `nameTextView`. Arrange the widgets based on your preferences; you
    can use the screen mockups in the *The sample national parks app* section of [Chapter
    4](ch04.html "Chapter 4. Developing Your First iOS App with Xamarin.iOS"), *Developing
    Your First iOS App with Xamarin.iOS*, or the sample solution as a guide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review `Detail.axml` in the **Content** mode and adjust it as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `DetailActivity.OnCreate()`, add call to `SetContentView()`, and pass the
    layout ID for `Detail.axml`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding ActionBar items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now need to add three items to the action bar: an action to edit a park,
    view photos on [www.bing.com](http://www.bing.com) for a park, and get directions
    to a park. Follow the same steps used previously to create a new menu definition
    file named `DetailMenu.xml`. The following XML shows the code that needs to be
    used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: After adding the menu definition, implement the `OnCreateOptionsMenu()`and `OnOptionsItemSelected()`
    methods like we did for `MainActivity`. Just add empty stubs to handle the actual
    actions and we will fill in the logic in the coming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Populating DetailActivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Add logic to populate `DetailActivity` in `OnCreate()`, using the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to determine if a park `Id` was passed in as an intent extra.
    If one was passed in, locate it in the `Parks` list on `NationalParksData`. If
    not, create a new instance using the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now populate the `EditText` fields based on data from the park. The sample
    solution has a `ParkToUI()` method for this logic, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Handling the Show Photos action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We would like to direct the user to [www.bing.com](http://www.bing.com) to view
    photos for a park. This can be accomplished with a simple `ActionView` intent
    and a properly formatted search URI for [www.bing.com](http://www.bing.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle the Show Photos action, create some logic on the `OnOptionsItemSelected()`
    method to create an `ActionView` intent and pass in a formatted URI to search
    [www.bing.com](http://www.bing.com) for photos. The following code demonstrates
    the required action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Handling the Show Directions action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We would like to direct the user to an external map app to get directions to
    a park. Again, this can be accomplished with a simple `ActionView` intent along
    with a properly formatted URI requesting map information.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle the Show Directions action, create a logic on the `OnOptionsItemSelected()`
    method to create an `ActionView` intent and pass in a formatted URI to display
    the map information. The following code demonstrates the required action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Adding navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we have `DetailActivity` in place, we need to go back and add some
    navigation logic in `MainActivity` so that when a park is selected in the list,
    `DetailActivity` will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: A user clicking on an item in `ListView` can be handled by providing an event
    handler for `ListView.OnItemClicked`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add navigation from `MainActivity`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open `MainActivity.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create an event handler to handle an `OnItemClicked` event. The following event
    handler represents what is needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Hook up the event handler in the `OnCreate()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have now completed `DetailActivity`. Run the app and select a park to display
    the new activity. Choose the Show Photos and Show Directions actions. If you are
    running the application in an emulator, you will not be able to view directions
    as the emulator will not have access to Google Play Services.
  prefs: []
  type: TYPE_NORMAL
- en: Creating EditActivity
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are now ready to add our last activity, `EditActivity`. This exercise will
    be similar to the one we just finished except that we will use `EditText` widgets
    so that users will be able to modify data. In addition, `EditActivity` can be
    used to display an existing park or a new one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create `EditActivity`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Follow the same steps used in the previous section to create a new activity
    and layout file named `EditActivity` and `Edit.axml` respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, add `ScrollView`, `LinearLayout`, and `Padding` in the same manner as
    was done for `Detail.axml`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `TextView` widgets and `EditText` widgets for each property on the `NationalPark`
    entity class except the `Id` property. The `TextView` widgets should be used as
    labels and the `EditText` widgets to edit properties. For each of the `EditView`
    widgets that will be used to display properties, fill in the `Id` property with
    a name that corresponds to the property names on the entity, for example, `nameTextView`.
    Arrange the widgets based on your preferences; you can use the screen mockups
    in the *The sample national parks app* section of [Chapter 4](ch04.html "Chapter 4. Developing
    Your First iOS App with Xamarin.iOS"), *Developing Your First iOS App with Xamarin.iOS*,
    or sample solution as a guide.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Review `Edit.axml` in the **Content** mode and adjust as needed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `EditActivity.OnCreate()`, add a call to `SetContentView()` and pass in
    the layout `Id` for `Edit.axml`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding ActionBar items
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We now need to add three items to the action bar: an action to edit a park,
    view photos on [www.bing.com](http://www.bing.com) for a park, and get directions
    to a park. Follow the same steps used previously in the section *Adding the New
    action to the ActionBar* to create a new menu definition file named `DetailMenu.xml`.
    The following XML shows the required code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'After adding the menu definition, implement the `OnCreateOptionsMenu()`and
    `OnOptionsItemSelected()` methods like we did for `MainActivity`. Add empty stubs
    to handle each action and we will fill in the logic in the coming sections, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Creating reference variables for widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we will be putting data in the `EditText` widgets and then pulling it back
    out again, it make sense to create reference variables for the widgets and set
    the references in the `OnCreate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create reference variables for widgets, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a set of references to `EditText` objects in the `EditActivity` class,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `OnCreate()` method of `EditActivity`, set the references to the appropriate
    widgets using `FindViewById()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Populating EditActivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To populate EditActivity, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method named `ParkToUI()` to move data from the `_park` object to
    the `EditText` widgets, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override `OnResume()` and add a call to the `ToUI()` method to populate the
    `EditText` widgets, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Handling the Save action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When the `Save` action is clicked on, the `OnOptionsItemSelected()` method is
    called. Create a `Save()` method on `DetailActivity` and call it from `OnOptionsItemSelected()`.
    The solution project has a `UIToPark()` method to take content from the `EditText`
    widgets and populate the `Park` entity before saving it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle the `Save` action, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method named `ToPark()` to move data from the `EditText` widgets to
    the `_park` object. This method will be used when handling the `Save` action,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a method to handle saving the park that calls `UIToPark()` to populate
    the `_park` object with changes, then it calls the `Save()` method on `NationalParksData`
    to save the changes to file, sets the result code, and finishes the activity.
    The required code is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that a Boolean `Extra` named `parkdeleted` is set to `false`. This is used
    to communicate to the calling activity that the park was not deleted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `OnOptionsItemSelected()` to call `SavePark()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Handling the Delete action
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Handling the `Delete` action is similar to the `Save` action, but somewhat simpler
    as we do not have to save changes from the UI widgets.
  prefs: []
  type: TYPE_NORMAL
- en: 'To handle the Delete action, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a method to handle the deleting of the park by calling the `Delete()`
    method on `NationalParksData`, setting the result code, and finishing the activity,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that the Boolean `Extra` named `parkdeleted` is set to `true` to tell the
    calling activity that the park was deleted. This is important to the `DetailActivity`
    because when a park was previously shown as deleted, it should be finished and
    returned to `MainActivity`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update `OnOptionsItemSelected()` to call `DeletePark()`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Adding navigation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that `EditActivity` is in place, we need to add navigation logic to `MainActivity`
    when a user chooses the `New` action and to `DetailActivity` when the user chooses
    the `Edit` action.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating on the New action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'As you can recall, in `OnMenuItemSelected()` in `MainActivity`, we added a
    comment to the place where we need to navigate to `EditActivity`. We can now replace
    this comment with the following use of `StartActivity()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Navigating on the Edit action
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'In the same way, we need to add navigation code to `OnMenuItemSelected()` in
    `DetailActivity`. However, there are a few differences. We need to pass in the
    `Id` property for the park we want to edit and we want to receive back a result
    that indicates whether or not the user deleted this park. The required code is
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`DetailActivity` also needs to detect when a park is deleted so that it can
    finish and return to `MainActivity` to view the list. To accomplish this, override
    `OnActivityResult()` and check the Boolean `Extra` named `parkdeleted` to determine
    if the park was deleted, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Refreshing ListView in MainActivity
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The last thing we need to implement is the logic that will refresh `ListView`
    in `MainActivity` with any changes that might have been made on `EditActivity`.
    To accomplish this, call `NotifyDataSetChanged()` on the adapter object within
    an override to the `OnResume()` method on `MainActivity`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Running the app
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have now completed the `NationalParks.Droid` app. You should now be able
    to run your app and exercise each of the features.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Xamarin.Android projects in Visual Studio
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you have installed Xamarin.Android on a Windows machine with Visual Studio
    2010 or Visual Studio 2013 (which is the current version), the Xamarin.Android
    Visual Studio add-on will already be installed. Working with projects in Visual
    Studio is similar to working with Xamarin Studio with the exception of certain
    features. To access options for the project, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `NationalParks.Droid` project, right-click and select **Properties**.
    A multi-tabbed window will be open that allows various project-related options
    to be specified.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To access Xamarin.Android-related options for Visual Studio, navigate to **Tools**
    | **Options** | **Xamarin** | **Android Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To access the AVD Manager, navigate to **Tools** | **Open Android Emulator Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To manage your Xamarin account and activate a license, navigate to **Tools**
    | **Xamarin Account**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are working on a Windows machine with Visual Studio installed and you
    have not taken time to try out the add-on, open `NationalParks.Droid` in Visual
    Studio and run the app.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing the generated elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Prior to wrapping this chapter up, let's look at some of the things that go
    on behind the scenes.
  prefs: []
  type: TYPE_NORMAL
- en: Peer objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [Chapter 3](ch03.html "Chapter 3. Demystifying Xamarin.Android"), *Demystifying
    Xamarin.Android*, we discussed the role of peer objects in a Xamarin.Android app.
    Let''s now take a look at one of the generated Java peer objects from our project.
    The source for these classes can be found in `NationalParks.Droid/obj/Debug/android/src`.
    Open `nationalparks.droid.MainActivity.java`. Now, note the following pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`MainActivity` extends `android.app.Activity`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each method we created an override for has a corresponding method created that
    calls our override. For example, we created an override for `OnCreate()`. The
    generated class has a method named `onCreate()` that calls a private native method
    `n_onCreate()`, which in turn points to our override through a JNI reference.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The static class initializer for `MainActivity` registers all the native methods
    for use with JNI using the `mono.android.Runtime.register()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The class constructor activates an instance of our managed C# class using the
    `mono.android.TypeManager.Activate()`method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AndroidManifest.xml file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Xamarin.Android generates an `AndroidManifest.xml` file at build time using
    two sources as input: the first one being the content in the `AndroidManifest.xml`
    file in `NationalParks.Droid/Properties` and the second one being the attributes
    specified on classes, primarily activities in your project. You can find the generated
    `AndroidManifest.xml` in `NationalParks.Droid/obj/Debug/android`. Open the file
    with a text editor and note the following pointers:'
  prefs: []
  type: TYPE_NORMAL
- en: There are two `<activity/>` elements in the file and `MainActivity` is specified
    to be the launch activity. These entries are generated from the attributes specified
    on each of the activity classes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single permission of `INTERNET` is specified. This came from the `AndroidManifest.xml`
    file in the `NationalParks.Droid/Properties` folder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The APK file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another interesting thing to look at is the APK produced for a Xamarin.Android
    app. We will be covering in detail how to create APKs in [Chapter 10](ch10.html
    "Chapter 10. Preparing Xamarin.Android Apps for Distribution"), *Preparing Xamarin.Android
    Apps for Distribution*. This a fairly simple process; if you can''t wait, use
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the upper-left hand corner of the toolbar, set the built type to **Release**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the **Project** menu, select **Publish Android Project**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Publish Android Application** dialog box, choose **Create new keystore**,
    fill out all of the required information, and click on **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Xamarin.Android will publish the APK in the location you selected. As APKs are
    ZIP files, simply unzip the APK to view the contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the contents of the resulting APK:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![The APK file](img/0838OT_05_01.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The following table provides a description of the contents of the APK:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Content | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `assemblies/System.*` | These assemblies contain core .NET namespaces such
    as `System.IO` and `System.Collection` |'
  prefs: []
  type: TYPE_TB
- en: '| `assemblies/Mono.Android.dll` | This assembly contains the Xamarin.Android
    binding classes |'
  prefs: []
  type: TYPE_TB
- en: '| `assemblies/NationalParks.Droid.dll` | This assembly contains the classes
    we created: `MainActivity`, `DetailActivity`, and `NationalParksAdapter` |'
  prefs: []
  type: TYPE_TB
- en: '| `assemblies/Newtonsoft.Json.dll` | This assembly contains the Json.NET classes
    |'
  prefs: []
  type: TYPE_TB
- en: '| `classes.dex` | This file contains all the generated Java peer objects in
    a Dalvik-compiled format |'
  prefs: []
  type: TYPE_TB
- en: '| `lib/armeabi-v7a/libmonodroid.so` | This is the Mono CLR for Android |'
  prefs: []
  type: TYPE_TB
- en: '| `res/*` | This folder contains all the resources; drawables, layouts, menus,
    and so on |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we created a sample Xamarin.Android app and demonstrated the
    concepts that need to be understood to work with the Xamarin.Android platform.
    While we did not demonstrate all of the features that can be used in an Android
    app, you should now feel comfortable with how to access these features.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will turn our attention to the important topics of sharing
    code across apps, one of the key advantages of using Xamarin.
  prefs: []
  type: TYPE_NORMAL
