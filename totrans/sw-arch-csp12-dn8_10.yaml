- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deciding on the Best Cloud-Based Solution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When designing your application to make it cloud-based, you must understand
    different architectural designs – from the simplest to the most sophisticated.
    In fact, cloud technology not only enables cost optimization but also significantly
    reduces the time it takes to launch your solution to the market. Also, it effectively
    enhances your application’s ability to tolerate faults and scale. However, optimizing
    for cost, speed, resilience, and scalability often involves trade-offs in terms
    of constraints and flexibility, so you must choose the right compromise for your
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter discusses different software architecture models and teaches you
    how to take advantage of the opportunities offered by the cloud in your solutions.
    This chapter will also discuss the different types of cloud service that we can
    consider while developing our infrastructure, what the ideal scenarios are, and
    where we can use each of them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Infrastructure as a Service solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Platform as a Service solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software as a Service solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serverless solutions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use hybrid solutions and why they are so useful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is worth mentioning that the choice to be made between these options depends
    on different aspects of the project scenario, such as the need for flexibility
    and/or highly customized solutions versus simplicity, low maintenance costs, and
    low time-to-market. These trade-offs will be discussed throughout the whole chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the practical content in this chapter, you must create or use an Azure account.
    We can find the detailed procedure for creating an Azure account in *Chapter 1*,
    *Understanding the Importance of Software Architecture*, in the *Creating an Azure
    account* section.
  prefs: []
  type: TYPE_NORMAL
- en: Different software deployment models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s begin our exploration with **Infrastructure as a Service** (**IaaS**),
    the foundational layer of cloud computing. IaaS offers a flexible and scalable
    infrastructure, which is crucial for businesses with specific hardware requirements
    or those transitioning from on-premises solutions to the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In companies where you have infrastructure engineers, you will probably find
    more people working with **IaaS**. On the other hand, in companies where IT is
    not the core business, you will find a bunch of **Software as a Service** (**SaaS**)
    systems. It is common for developers to decide to use the **Platform as a Service**
    (**PaaS**) option or to go serverless, as they have no need to deliver infrastructures
    in this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: As a software architect, you must cope with this environment and be sure that
    you are optimizing the cost and work factors, not only during the initial development
    of the solution but also during its maintenance. Also, as an architect, you must
    understand the needs of your system and work hard to connect those needs to best-in-class
    peripheral solutions, speeding up delivery and keeping the solution as close as
    possible to the customer’s specifications.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS and Azure opportunities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IaaS was the first generation of cloud services provided by many different cloud
    players. Its definition is easily found in many places, but we can summarize it
    as “your computing infrastructure delivered on the internet, hosted somewhere
    that you do not manage.” In the same way that we have virtualization of services
    in a local data center, IaaS will also give you virtualized components, such as
    servers, storage, and firewalls, in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In a few words, all the hardware you need is hosted in the cloud and maintained
    by the cloud provider instead of being hosted in your private data center. This
    includes servers delivered as virtual machines, possibly connected to private
    networks, disk storage, and also firewalls. You don’t buy the hardware but pay
    for its usage, and you can scale to a more powerful configuration at zero cost.
  prefs: []
  type: TYPE_NORMAL
- en: You can access your cloud hardware as if it were hosted in your private data
    center, but hardware maintenance is taken care of by the cloud provider. Moreover,
    you can scale your hardware gradually as your application traffic increases without
    installation and purchase costs and without migrating data to new hardware. Scaling
    is performed with simple configuration instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Among the various cloud providers, Azure is the one with the most complete
    and varied offer, so you can easily find a perfect match with any hardware need.
    Most Azure **IaaS** solutions are paid for, and you should pay attention to this
    when it comes to testing. It is worth mentioning that this book does not set out
    to describe all IaaS services that Azure provides in detail. However, as a software
    architect, you do need to understand that you will find services such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Virtual machines**: Windows Server, Linux, Oracle, data science, and machine
    learning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Network**: Virtual networks, load balancers, and DNS zones'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Storage**: Files, tables, databases, and Redis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obviously, these are not the only ones available as IaaS models, so the first
    step is to look at the service options available in Azure. To create any service
    in Azure, you must find the service that best fits your needs and then create
    a resource. The following screenshot shows a Windows Server virtual machine being
    configured.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_10_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Creating a virtual machine in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: Following the wizard provided by Azure to set up your virtual machine, you will
    be able to connect to it by using **Remote Desktop Protocol** (**RDP**). The next
    screenshot presents some of the hardware options you have for deploying a virtual
    machine. It is interesting to consider the vast array of hardware options at our
    disposal for deploying a virtual machine, especially when considering that these
    can be accessed just by clicking on the **Select** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: Virtual machine sizes available in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: If you compare the on-premises velocity to deliver hardware with the cloud velocity,
    you will realize that there is nothing better than the cloud when it comes to
    time-to-market. For instance, there are machines with 64 CPUs, 256 GB of RAM,
    and temporary storage of 512 GB. This is something you probably will not find
    in an on-premises data center, for instance, if you have a temporary workload,
    or it will take you a lot to deliver if you have a brand-new business idea that
    needs this computing power. Besides, in the temporary workload scenario, this
    machine will be underutilized, so it would be impossible to justify its purchase
    in an on-premises scenario.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS can be adopted when you want full control over your infrastructure while
    still benefiting from cloud computing advantages like redundancy and scalability.
    However, the time-to-market for IaaS solutions is similar to that for on-premises
    solutions. Therefore, it is convenient to start with options that allow for a
    quicker launch in the short run and consider transitioning to IaaS for long-term
    objectives.
  prefs: []
  type: TYPE_NORMAL
- en: Security responsibility in IaaS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Security is an essential aspect of all hardware solutions because hacker attacks
    might cause both service interruptions and leaks or loss of important business
    data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Security responsibility is another important thing to know about an IaaS platform.
    Many people think that once you decide to go on the cloud, all the security is
    done by the provider. However, this is not true, as you can see in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B19820_10_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.3: Managing security in cloud computing'
  prefs: []
  type: TYPE_NORMAL
- en: IaaS will force you to take care of security from the operating system to the
    application. In some cases, this is inevitable, but you must understand that this
    will increase your system cost.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS can be a good option if you just want to move an already existing on-premises
    structure to the cloud. This enables scalability due to the tools that Azure gives
    you, along with all the other services. However, if you are planning to develop
    an application from scratch, you should also consider other options available
    on Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Shifting our focus to **PaaS**, we enter a realm where speed and efficiency
    in software development take center stage. PaaS provides an environment where
    businesses can develop, run, and manage applications without the complexity of
    building and maintaining the infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS – a world of opportunities for developers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are studying or have studied software architectures, you will probably
    perfectly understand the meaning of the next sentence. The world demands high
    speed when it comes to software development! This demand for speed is precisely
    where **PaaS** becomes invaluable, offering rapid development and deployment capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the preceding screenshot, PaaS allows you to worry about
    security only in terms of aspects that are closer to your business: your data
    and applications. For developers, this represents freedom from having to implement
    a bunch of configurations that make your solution work safely.'
  prefs: []
  type: TYPE_NORMAL
- en: Security handling is not the only advantage of PaaS. As a software architect,
    you can introduce these services as an opportunity to deliver richer solutions
    faster. Time-to-market can surely justify the cost of many applications that run
    on a PaaS basis.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS solutions free you from managing all details involved in your solution
    deployment without creating an excessive dependency on the PaaS supplier. In fact,
    your software need not depend too much on the chosen PaaS and small dependencies
    can be isolated in adequately designed drivers. In other words, it is always easy
    to move to a different PaaS solution or an IaaS solution if the software is designed
    with driver-based architecture, like the Onions architecture we described in the
    *Layers and the Onion architecture* section of *Chapter 7*, *Understanding the
    Different Domains in Software Solutions*. Therefore, PaaS may be a good choice
    to reduce time-to-market also when one plans to move to IaaS in the long run.
  prefs: []
  type: TYPE_NORMAL
- en: Delving deeper into PaaS, let’s examine how Azure implements this model through
    its diverse range of services. Azure’s PaaS offerings are designed to cater to
    various development needs, from web applications to complex data processing.
  prefs: []
  type: TYPE_NORMAL
- en: There are lots of services delivered as PaaS nowadays in Azure, and the array
    of available services is continuously expanding, reflecting the evolving needs
    of developers and businesses.
  prefs: []
  type: TYPE_NORMAL
- en: Again, it is not the purpose of this book to list all of them. However, some
    do need to be mentioned. The list keeps growing, and the recommendation here is
    to use and test these services as much as you can! Make sure that you will deliver
    better-designed solutions with this thought in mind.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, it is worth mentioning that, with PaaS solutions, you will
    not have full control of the operating system. In fact, in many situations, you
    do not even have to have a way to connect to it. This is fine most of the time,
    but in some debugging situations, you may miss this feature. The good thing is
    that PaaS components are evolving every single day, and one of Microsoft’s biggest
    concerns is making them widely visible.
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections introduce the most common PaaS components delivered
    by Microsoft for .NET web apps, that is, Azure Web Apps and Azure SQL Server.
    We also describe Azure Cognitive Services, a very powerful PaaS platform that
    demonstrates how wonderful development is in the PaaS world. We will explore some
    of them in greater depth in the remainder of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Of the many PaaS services, web apps stand out for their versatility and ease
    of use. Azure’s web app service simplifies the deployment of various types of
    applications, demonstrating the practicality and accessibility of PaaS solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Web apps
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A web app is a PaaS option you can use to deploy your web app. You can deploy
    different types of applications, such as .NET, .NET Core, Java, PHP, Node.js,
    and Python. An example of this was presented in *Chapter 1*, *Understanding the
    Importance of Software Architecture*.
  prefs: []
  type: TYPE_NORMAL
- en: The good thing is that creating a web app does not require any structure and/or
    IIS web server setup. In some cases, where you are using Linux to host your .NET
    application, you do not have IIS at all. Web apps’ flexibility in hosting options,
    such as not requiring IIS for Linux-based deployments, underscores their adaptability
    to various development and deployment environments.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, web apps have a plan option where you do not need to pay for usage.
    Of course, there are limitations, such as only running 32-bit apps and failing
    to enable scalability. This free tier is ideal for learning and initial application
    prototyping, offering essential features without the financial commitment.
  prefs: []
  type: TYPE_NORMAL
- en: SQL databases
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Imagine how quickly you can deploy a solution if you have the complete power
    of an SQL server without needing to pay for a big server to deploy this database.
    This applies to SQL databases. With them, you can use Microsoft SQL Server for
    what you need the most – storage and data processing. In this scenario, Azure
    assumes responsibility for backing up the database.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will discuss briefly the advantages of having your databases in the
    cloud. Databases are discussed in detail in both *Chapter 12*, *Choosing Your
    Data Storage in the Cloud*, and *Chapter 13*, *Interacting with Data in C# – Entity
    Framework Core*.
  prefs: []
  type: TYPE_NORMAL
- en: Say you are starting a new business application, and say, initially, your data
    storage and traffic requirements are quite low, but you need advanced features
    such as data replication to safeguard your data and offer high performance to
    geographically distributed users. Without Azure SQL databases, you would be forced
    to buy several SQL licenses since the SQL Server free edition doesn’t cover similar
    scenarios.
  prefs: []
  type: TYPE_NORMAL
- en: With Azure SQL databases, instead, you can have the top features of the SQL
    Server Enterprise edition without paying for an expensive license, paying instead
    just for your initially small storage and traffic needs.
  prefs: []
  type: TYPE_NORMAL
- en: The SQL database even gives you the option to manage performance by itself.
    This is called automatic tuning – that is, your traffic requirements are automatically
    scaled to keep response time acceptable as requests increase. This means that
    your costs might automatically increase, but you can also define maximum expense
    limits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, with PaaS components, you will be able to focus on what is important
    to your business: a very fast time-to-market.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps to create a SQL database for testing are quite simple, like what
    we have seen with other components. However, there are two things you need to
    pay attention to: the creation of the server and how you will be charged. In fact,
    understanding the various configurations and their costs is essential to finding
    the best trade-off between your application and maximum cost requirements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a resource, you can search for `SQL Database`, and you will
    find this wizard to help you:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_10_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.4: Creating a SQL database in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: The SQL database depends on an SQL server to host it. For this reason, as you
    can see, you must create (at least for the first database) a `database.windows.net`
    server, where your databases will be hosted. This server will provide all the
    parameters you need to access the SQL server database using current tools, such
    as Visual Studio, SQL Server Management Studio, and Azure Data Studio. It is worth
    mentioning that you have a bunch of security features, such as Transparent Data
    Encryption and IP firewalls.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as you decide on the name of your database server, you will be able
    to choose the pricing tier on which your system will be charged. Especially in
    SQL databases, there are several different pricing options, as you can see in
    the following screenshot. You should study each of them carefully because, depending
    on your scenario, you can save money by optimizing a pricing tier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19820_10_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.5: Configuring the Azure SQL Database Pricing Tier'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about SQL configuration, you can use this link: [https://azure.microsoft.com/en-us/services/sql-database/](https://azure.microsoft.com/en-us/services/sql-database/).'
  prefs: []
  type: TYPE_NORMAL
- en: More details on database solutions are discussed in *Chapter 12*, *Choosing
    Your Data Storage in the Cloud*, and *Chapter 13*, *Interacting with Data in C#
    - Entity Framework Core*.
  prefs: []
  type: TYPE_NORMAL
- en: Once you have completed the configuration, you will be able to connect to this
    server database in the same way you did when your SQL server was installed on-premises.
    The only detail that you must pay attention to is the configuration of the Azure
    SQL Server firewall, but this is quite simple to set up and a good demonstration
    of how safe the PaaS service is.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Cognitive Services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Artificial Intelligence** (**AI**) is one of the most frequently discussed
    topics in software architecture. We are a step away from a really great world
    where AI will be everywhere.'
  prefs: []
  type: TYPE_NORMAL
- en: For instance, AI is gaining ever more importance in the field of automatic help
    centers, data analysis to drive business decisions, and user interfaces based
    on natural language. The economic value added to these areas by AI is enormous,
    both in the decrease of service costs and in the increase in profit due to optimized
    decision-making.
  prefs: []
  type: TYPE_NORMAL
- en: To realize this, as a software architect, you cannot think about AI as software
    you need to invent from scratch all the time.
  prefs: []
  type: TYPE_NORMAL
- en: Azure Cognitive Services can help you with this. These APIs empower developers
    to create advanced features, like voice recognition in apps or language translation
    in customer service tools, with relative ease.
  prefs: []
  type: TYPE_NORMAL
- en: 'The great thing about PaaS is evident from this scenario. The cost of developing
    an in-house AI solution would require both enormous investments and hard-to-find
    competencies. With Azure Cognitive Services’ PaaS, instead, you just don’t need
    to worry about AI techniques. Instead, you may remain focused on what really matters
    to you as a software architect: the solution to your business problem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Setting up Azure Cognitive Services in your Azure account is also quite simple.
    First, you will need to add Cognitive Services like any other Azure component.
    You can choose a specific cognitive service or a multi-service account that will
    enable you to access all cognitive services. In the screenshot below, we have
    chosen a multi-service account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B19820_10_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: Creating a Cognitive Services API account in Azure'
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as you have done this, you will be able to use the APIs provided by
    the server. You will find two important features in the service that you have
    created: endpoints and access keys. They are going to be used in your code to
    access APIs.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code sample shows how you can use the Cognitive Services API
    to translate sentences. The main concept underlying this translation service is
    that you can post the sentence you want to translate according to the key and
    region where the service was set. The following code enables you to post a request
    to the service API:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'It is worth mentioning that the preceding code will allow you to post requests
    to translate any text into any language, provided you define it in the parameters.
    The following is the main program that calls the previous method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For further information, visit [https://docs.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-languages](https://docs.microsoft.com/en-us/azure/cognitive-services/translator/reference/v3-0-languages).
  prefs: []
  type: TYPE_NORMAL
- en: This is a perfect example of how easily and quickly you can use services such
    as this to architect your projects. This ease of use not only accelerates project
    development but also opens up new possibilities for innovation and enhanced user
    experiences.
  prefs: []
  type: TYPE_NORMAL
- en: SaaS — just sign in and get started!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SaaS is probably the easiest way to use cloud-based services. The application
    you need is already available on the cloud, and you need just to configure and
    use it! Cloud players provide many good options that solve common problems for
    their end users in a company. From email services to comprehensive business management
    tools, SaaS offers a wide array of applications that you can tailor to your various
    business needs.
  prefs: []
  type: TYPE_NORMAL
- en: A good example of this type of service is Office 365\. The key point with these
    platforms is that you do not need to worry about application maintenance. This
    is particularly convenient in scenarios where your team is totally focused on
    developing the core business of the application. For example, if your solution
    needs to deliver good reports, maybe you can design them using Power BI (which
    is included in Office 365). Thus, integrating Office 365 into your solution allows
    for seamless data analysis and reporting, immediately enhancing the overall efficiency
    and productivity of your business operations.
  prefs: []
  type: TYPE_NORMAL
- en: A SaaS solution can be customized in various ways. The most powerful technique
    is the addition of custom plugins. For instance, you can customize your Office
    365 tenant by adding various kinds of plugins that are available in public repositories
    and/or by developing your own custom plugins.
  prefs: []
  type: TYPE_NORMAL
- en: It is also worth pointing out that if you decide to invest in custom plugins,
    you already have, say, 90% of the application running and stable, so both the
    initial investment and the time to market are incredibly reduced.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, on the one hand, SaaS offers immediately sophisticated and proven
    solutions, but on the other hand, SaaS offers very limited customization options.
    So, how do you decide whether to use a SaaS solution?
  prefs: []
  type: TYPE_NORMAL
- en: '**Evaluate existing solutions**: First of all, you need to verify if a SaaS
    that matches your needs already exists.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Consider customization and integration**: Then, you need to verify if the
    selected options can be adapted to your needs and the investment required to adapt
    them.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Analyze cost implications**: At this point, you must analyze the impact of
    the inevitable compromises you will be forced to accept, as well as the overall
    cost implied by each candidate SaaS adoption, which includes the overall cost
    of the impact it has on your organization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Review security and compliance**: You also need to verify that the users/security
    model used by the SaaS is compatible with your needs and that, in general, the
    application fulfills all constraints required by your organization.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Assess vendor reliability and support**: The impact of having a strong dependency
    on the SaaS supplier is a key factor in your final decision. Keep in mind that
    once you incorporate a SaaS solution into your business, it might be very difficult
    to move to a different solution – that is, the contractual power of your supplier
    might rise over time to unacceptable levels. For the same reason, an unreliable
    supplier (for instance, a young start-up) or a supplier that can’t offer adequate
    product support might cause unacceptable damage.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Plan for scalability and future growth**: You must also consider the future
    of your organization. Thus, you must also verify if the candidate options are
    scalable and can be adapted to your growing needs and traffic.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test the solution**: Finally, you need to test the chosen solution in practice
    in a staging environment, verifying that your overall analysis and predictions
    are correct.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another pretty good example of a SaaS platform is Azure DevOps. As a software
    architect, before Azure DevOps, you needed to install and configure **Team Foundation
    Server** (**TFS**) (or even older tools like Microsoft Visual SourceSafe) for
    your team to work with a common repository and an application life cycle management
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: We used to spend a lot of time just working either on preparing the server for
    TFS installation or upgrading and continuously maintaining the TFS already installed.
    This is no longer needed due to the simplicity of SaaS Azure DevOps.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding what serverless means
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A serverless solution is a solution where the focus is not on where the code
    runs. Even in a “serverless” solution, there is always a server. The thing is
    that you just do not know or care which server your code executes on. The main
    advantage of serverless is that you have zero fixed monthly costs, and you are
    billed just for your traffic.
  prefs: []
  type: TYPE_NORMAL
- en: However, there are also other advantages. For instance, in a serverless solution,
    you have a very fast, simple, and agile application life cycle since almost all
    serverless code is stateless and loosely coupled with the remainder of the system.
    Some authors refer to this as **Function as a Service** (**FaaS**).
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the server runs somewhere. The key point here is that you do not
    need to worry about this or even scalability. This will enable you to focus completely
    on your app’s business logic. Again, the world needs fast development and good
    customer experiences at the same time. The more you focus on customer needs, the
    better!
  prefs: []
  type: TYPE_NORMAL
- en: FaaS offers the shortest time-to-market and the lowest cost threshold, together
    with large scalability possibilities. So, they are convenient in situations where
    it is extremely difficult to forecast the application workload or when the application
    workload has a high and difficult-to-forecast variance.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose, for instance, you are looking for a solution for mass email sending
    to connect to your application. If your applications also handle marketing campaigns,
    there would be traffic peaks that might also be 100 times your average traffic.
    A FaaS solution might be able to easily cover these huge peaks without impacting
    the average costs you have outside of them.
  prefs: []
  type: TYPE_NORMAL
- en: Conversely, in a similar situation, PaaS or IaaS would force you to move to
    a higher price tier if you don’t need it during your average periods, just during
    your marketing campaign peaks.
  prefs: []
  type: TYPE_NORMAL
- en: If the workload becomes more stable, and it is easier to draw reliable lower
    and higher bounds, FaaS becomes less convenient due to its higher cost on higher
    workloads. As an example, Amazon Prime recently publicized its savings by switching
    from FaaS to IaaS.
  prefs: []
  type: TYPE_NORMAL
- en: Unluckily, moving from FaaS to PaaS or IaaS is not easy since FaaS code is strictly
    tied to the chosen FaaS solution.
  prefs: []
  type: TYPE_NORMAL
- en: This issue can be partially mitigated by avoiding overly fragmented FaaS code
    made of small functions and, instead, using a few functions that trigger the execution
    of bigger conventional software modules enclosed inside the FaaS solution. This
    way, moving to a different FaaS, or to IaaS/PaaS, would require just rewriting
    a few FaaS mains while keeping the bigger software modules they call unchanged.
    Unfortunately, the performance penalty of waking up an inactive function is incompatible
    with the usage of complex frameworks inside each function, so fragmentation is
    unavoidable.
  prefs: []
  type: TYPE_NORMAL
- en: In my experience, FaaS proves to be useful either in the early stages of a presumably
    high-traffic but low-complexity application or for low-complexity applications
    like our previous email-sending application, which are specifically designed to
    handle high and difficult-to-forecast peaks. In fact, in these applications, near-complete
    code rewrites are acceptable since the investment for the code development is
    low compared with the savings implied by an almost immediate time-to-market and
    by efficacious handling of big and hard-to-forecast traffic peeks.
  prefs: []
  type: TYPE_NORMAL
- en: In *Chapter 16*, *Working with Serverless – Azure Functions*, you will explore
    one of the best serverless implementations that Microsoft provides in Azure –
    Azure Functions. There, we will focus on how you can develop serverless solutions
    and learn about their advantages and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: The following subsections compare IaaS, PaaS, SaaS, and FaaS along several axes.
  prefs: []
  type: TYPE_NORMAL
- en: Comparing IaaS, PaaS, SaaS, and FaaS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the previous sections, we described various types of solutions offered by
    all main cloud providers, with their advantages and disadvantages. The table below
    summarizes the main advantages offered by each of them, assigning a note between
    1 (less good) and 4 (very good) to five axes.
  prefs: []
  type: TYPE_NORMAL
- en: '|  | **Time-to-Market** | **Customization possibility** | **Maintenance effort**
    | **Scalability** | **Cost** |'
  prefs: []
  type: TYPE_TB
- en: '| IaaS | 1 | 4 | 1 | 1 | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| PaaS | 2 | 3 | 2 | 2 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| SaaS | 4 | 1 | 4 | Depends on application | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| FaaS | 3 | 2 | 3 | 4 | 2 |'
  prefs: []
  type: TYPE_TB
- en: Why are hybrid applications so useful in many cases?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In its general meaning, the word *hybrid* means something whose parts do not
    share a uniform architectural choice; each part makes a different architectural
    choice. However, in the case of cloud solutions, the word *hybrid* refers mainly
    to solutions that mix cloud subsystems with on-premises subsystems. However, it
    can also refer to mixing web subsystems with device-specific subsystems, such
    as mobiles or any other device that runs code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Due to the number of services Azure can provide and the number of design architectures
    that can be implemented, hybrid applications are probably the best answer to the
    main question addressed in this chapter: how to use the opportunities offered
    by the cloud in your projects.'
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, many current projects are moving from an on-premises solution to a
    cloud architecture, and depending on where you are going to deliver these projects,
    you will still find many bad preconceptions regarding moving to the cloud. Most
    of them are related to cost, security, and service availability.
  prefs: []
  type: TYPE_NORMAL
- en: You need to understand that there is some truth in these preconceptions, but
    not in the way people think. For sure, you, as a software architect, cannot ignore
    them. Especially when you develop a critical system, you must decide whether everything
    can go on the cloud or whether it is better to deliver part of the system on the
    edge. Therefore, understanding these factors is key to navigating the hybrid landscape,
    which ensures that you balance cost, security, and availability according to your
    specific needs.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth mentioning a real-life example that might clarify the need for hybrid
    solutions. Recently, several customers of a SaaS solution we offer objected to
    the fact that they couldn’t move reserved and business-critical documents to the
    cloud. Our solution was equipping our SaaS with file-handling drivers capable
    of retrieving files from an in-house document server located in the customer’s
    private intranet.
  prefs: []
  type: TYPE_NORMAL
- en: A completely different kind of hybrid solution is the edge computing paradigm.
    According to this paradigm, parts of the system must be deployed on machines or
    devices close to the location where they are needed. This helps to reduce response
    times and bandwidth.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile solutions can be considered another classic example of hybrid applications
    since they mix a web-based architecture with a device-based architecture to offer
    a better user experience. There are lots of scenarios where you can replace a
    mobile application with a responsive website. However, when it comes to interface
    quality and performance, maybe a responsive website will not give the end user
    what they really need.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to take advantage of the services offered by
    the cloud in your solutions, as well as the various options you can choose from.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter covered different ways to deliver the same application in a cloud-based
    structure. We also noted how rapidly Microsoft is delivering all these options
    to its customers, as you can experience all of these options in actual applications
    and choose the one that best fits your needs, since there is no *silver bullet*
    that works in all situations. As a software architect, you need to analyze your
    environment and your team, and then decide on the best cloud architecture to implement
    in your solution.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter is dedicated to building a flexible architecture comprising
    small, scalable software modules called microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Why should you use IaaS in your solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you use PaaS in your solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you use SaaS in your solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why should you use serverless in your solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the advantage of using an Azure SQL Server database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you accelerate AI in your application with Azure?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can hybrid architectures help you to design a better solution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can check out these web links to study the topics covered in this chapter
    in greater depth:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://visualstudio.microsoft.com/xamarin/](https://visualstudio.microsoft.com/xamarin/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/application-development/xamarin-cross-platform-application-development](https://www.packtpub.com/application-development/xamarin-cross-platform-application-development)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/learning-azure-functions](https://www.packtpub.com/virtualization-and-cloud/learning-azure-functions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/overview/what-is-iaas/](https://azure.microsoft.com/overview/what-is-iaas/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/security/azure-security-iaas](https://docs.microsoft.com/en-us/azure/security/azure-security-iaas)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/services/app-service/web/](https://azure.microsoft.com/services/app-service/web/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/services/sql-database/](https://azure.microsoft.com/services/sql-database/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/services/virtual-machines/data-science-virtual-machines/](https://azure.microsoft.com/en-us/services/virtual-machines/data-science-virtual-machines/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/azure/sql-database/sql-database-automatic-tuning](https://docs.microsoft.com/azure/sql-database/sql-database-automatic-tuning)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/services/cognitive-services/](https://azure.microsoft.com/en-us/services/cognitive-services/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://docs.microsoft.com/en-us/azure/architecture/](https://docs.microsoft.com/en-us/azure/architecture/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://powerbi.microsoft.com/](https://powerbi.microsoft.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://office.com](https://office.com)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/overview/what-is-serverless-computing/](https://azure.microsoft.com/en-us/overview/what-is-serverless-computing/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://azure.microsoft.com/en-us/pricing/details/sql-database/](https://azure.microsoft.com/en-us/pricing/details/sql-database/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.packtpub.com/virtualization-and-cloud/professional-azure-sql-database-administration](https://www.packtpub.com/virtualization-and-cloud/professional-azure-sql-database-administration
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the authors, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code175081751210902046.png)'
  prefs: []
  type: TYPE_IMG
