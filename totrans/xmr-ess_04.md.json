["```cs\npublic class NationalPark\n{\n  public NationalPark ()\n  {\n    Id = Guid.NewGuid ().ToString();\n    Name = \"New Park\";\n  }\n\n  public string Id { get; set; }\n  public string Name { get; set; }\n  public string Description { get; set; }\n  public string State { get; set; }\n  public string Country { get; set; }\n  public double? Latitude { get; set; }\n  public double? Longitude { get; set; }\n\n  public override string ToString ()\n  {\n    return Name;\n  }\n}\n```", "```cs\n    readonly List<NationalPark> parks;\n    ```", "```cs\n    public IList<NationalPark> Parks {get {return parks;}}\n    ```", "```cs\n    using System.IO;\n    . . .\n    using Newtonsoft.Json;\n    ```", "```cs\n    string dataFolder = Environment.CurrentDirectory;\n    string serializedParks =\n        File.ReadAllText (Path.Combine(dataFolder,\n            \"NationalParks.json\"));\n    parks =\n        JsonConvert.DeserializeObject<List<NationalPark>>\n            (serializedParks);\n    ```", "```cs\nstring dataFolder = Environment.CurrentDirectory;\nstring serializedParks =\n     JsonConvert.SerializeObject (dataSource.Parks);\nFile.WriteAllText(Path.Combine(dataFolder,\n     \"NationalParks.json\"), serializedParks);\n```", "```cs\n[Outlet]\nMonoTouch.UIKit.UIBarButtonItem DoneButton { get; set; }\n[Outlet]\n\nMonoTouch.UIKit.UILabel editContent { get; set; }\n[Action (\"DeleteClicked:\")]\nPartial void DeleteClicked (\n    MonoTouch.Foundation.NSObject sender);\n```", "```cs\n    private void SaveParks()\n    {\n       string dataFolder = Environment.CurrentDirectory;\n       string serializedParks = JsonConvert.SerializeObject (_parks);\n          File.WriteAllText(Path.Combine(dataFolder,\n            \"NationalParks.json\"), serializedParks);\n    }\n    ```", "```cs\n    private void DoneClicked (object sender, EventArgs e)\n    {\n\n      if (!_parks.Contains (_park))\n          _parks.Add (_park);\n\n      SaveParks ();\n      NavigationController.PopViewControllerAnimated (true);\n    }\n\n    Assign the DoneClicked event handler to the Clicked event on the DoneButton outlet in ViewDidLoad().\n\n    public override void ViewDidLoad (){\n      . . .   DoneButton.Clicked += DoneClicked;}\n    ```", "```cs\npartial void DeleteClicked (UIButton sender)\n{\n    if (_parks.Contains(_park))\n       _parks.Remove(_park);\n\n   SaveParks();\n\n    NavigationController.PopToRootViewController(true);\n    }\n```", "```cs\n    IList<NationalPark> _parks;\n    NationalPark _park;\n    . . .\n    public void SetNavData(\n        IList<NationalPark> parks, NationalPark park)\n    {\n        _parks = parks;\n        _park = park;\n    }\n    ```", "```cs\n    public override void ViewWillAppear (bool animated)\n    {\n        ToUI ();\n    }\n    ```", "```cs\n    void ToUI()\n    {\n        // Update the user interface for the detail item\n        if (_park != null)\n           detailDescriptionLabel.Text = _park.ToString ();\n    }\n    ```", "```cs\n    public override void PrepareForSegue (\n        UIStoryboardSegue segue, NSObject sender)\n    {\n      if (segue.Identifier == \"showDetail\") {\n        var indexPath = TableView.IndexPathForSelectedRow;\n        var item = dataSource.Parks [indexPath.Row];\n        ((DetailViewController)segue.\n            DestinationViewController).SetNavData\n               (dataSource.Parks, item);\n      }\n      else if (segue.Identifier == \"editFromMaster\") {\n        ((EditViewController)segue.\n            DestinationViewController).SetNavData\n              (dataSource.Parks, new NationalPark());\n      }\n    }\n    ```", "```cs\n    public override void PrepareForSegue (\n        UIStoryboardSegue segue, NSObject sender)\n    {\n      if (segue.Identifier == \"editFromDetail\") {\n       ((EditViewController)segue.\n         DestinationViewController).SetNavData\n           (_parks, _park);\n      }\n    }\n    ```", "```cs\n    void ToUI()\n    {\n      // Update the user interface for the detail item\n      if (IsViewLoaded && _park != null) {\n          nameLabel.Text = _park.Name;\n          descriptionLabel.Text = _park.Description;\n          stateLabel.Text = _park.State;\n          countryLabel.Text = _park.Country;\n          latitudeLabel.Text = _park.Latitude.ToString ();\n          longitudeLabel.Text = _park.Longitude.ToString ();\n      }\n    }\n    ```", "```cs\n    partial void PhotosClicked (UIButton sender)\n    {\n        string encodedUriString =\n           Uri.EscapeUriString(String.Format(\n              \"http://www.bing.com/images/search?q={0}\", _park.Name));\n       NSUrl url = new NSUrl(encodedUriString);\n       UIApplication.SharedApplication.OpenUrl (url);\n    }\n    ```", "```cs\n    partial void DirectionsClicked (UIButton sender)\n    {\n        if ((_park.Latitude.HasValue) && (_park.Longitude.HasValue))\n        {\n            NSUrl url = new NSUrl (\n                   String.Format(\n                       \"http://maps.apple.com/maps?daddr={0},{1}\",\n                        _park.Latitude, _park.Longitude));\n\n           UIApplication.SharedApplication.OpenUrl (url);\n       }\n    }\n    ```", "```cs\n    private void ToUI ()\n    {\n       // Update the user interface for the detail item\n       if (IsViewLoaded && _park != null) {\n         nameTextField.Text = _park.Name;\n         descriptionTextView.Text = _park.Description;\n         stateTextField.Text = _park.State;\n         countryTextField.Text = _park.State;\n         latitudeTextField.Text = _park.Latitude.ToString();\n         longitudeTextField.Text =\n                 _park.Longitude.ToString(); \n       }\n    }\n    ```", "```cs\n    void ToPark()\n    {\n      _park.Name = nameTextField.Text;\n      _park.Description = descriptionTextView.Text;\n      _park.State = stateTextField.Text;\n      _park.Country = countryTextField.Text;\n\n      if (String.IsNullOrEmpty (latitudeTextField.Text))\n        _park.Latitude =\n            Double.Parse (latitudeTextField.Text);\n      else\n            _park.Latitude = null;\n\n      if (String.IsNullOrEmpty (longitudeTextField.Text))\n        _park.Longitude =\n            Double.Parse (longitudeTextField.Text);\n      else\n        _park.Longitude = null;\n    }\n    ```", "```cs\n    partial void DoneClicked (NSObject sender)\n       {\n        ToPark ();\n\n        . . .\n    }\n    ```"]