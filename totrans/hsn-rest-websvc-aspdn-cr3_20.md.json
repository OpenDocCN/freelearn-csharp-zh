["```cs\nCache-Control: max-age=100\nAge:0\n```", "```cs\nVary: *\nVary: User-Agent\n```", "```cs\nExpires: Wed, 21 Oct 2015 07:28:00 GMT\n```", "```cs\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    [Authorize]\n    public class ItemController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n        private readonly IEndpointInstance _messageEndpoint;\n\n        public ItemController(IItemService itemService, \n        IEndpointInstance messageEndpoint)\n        {\n            _itemService = itemService;\n            _messageEndpoint = messageEndpoint;\n        }\n\n        ...\n\n        [HttpGet(\"{id:guid}\")]\n        [ItemExists]\n [ResponseCache(Duration = 100, VaryByQueryKeys = new []{\"*\"})]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _itemService.GetItemAsync(new \n                GetItemRequest { Id = id });\n            return Ok(result);\n        }\n        ...\n    }\n}\n```", "```cs\npublic class Startup\n    {\n         ...\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services\n                  ...\n               .AddResponseCaching();\n        }\n\n        public void Configure(IApplicationBuilder app, \n        IHostingEnvironment env)\n        {     \n             ...\n             app.UseHsts();\n             app.UseMiddleware<ResponseTimeMiddlewareAsync>();\n             app.UseHttpsRedirection();\n             app.UseAuthentication();\n             app.UseResponseCaching();\n             app.UseEndpoints(endpoints =>\n                    {\n                        endpoints.MapControllers();\n                    });\n        }\n  }\n```", "```cs\ncurl --verbose -X GET http://localhost:5000/api/items/08164f57-1e80-4d2a-739a-08d6731ac140\nNote: Unnecessary use of -X or --request, GET is already inferred.\n* Trying ::1...\n* TCP_NODELAY set\n* Connected to localhost (::1) port 5000 (#0)\n> GET /api/items/08164f57-1e80-4d2a-739a-08d6731ac140 HTTP/1.1\n> Host: localhost:5000\n> User-Agent: curl/7.54.0\n> Accept: */*\n> \n< HTTP/1.1 200 OK\n< Date: Sat, 05 Jan 2019 16:55:21 GMT\n< Content-Type: application/json; charset=utf-8\n< Server: Kestrel\n< Cache-Control: public,max-age=100\n< Transfer-Encoding: chunked\n< X-Response-Time-ms: 21\n< \n* Connection #0 to host localhost left intact\n```", "```cs\n VaryByQueryKeys = new []{\"*\"}\n```", "```cs\n...\n       public ResponseCachingMiddleware(\n            RequestDelegate next,\n            IOptions<ResponseCachingOptions> options,\n            ILoggerFactory loggerFactory,\n            ObjectPoolProvider poolProvider)\n            : this(\n                next,\n                options,\n                loggerFactory,\n                new ResponseCachingPolicyProvider(),\n                new MemoryResponseCache(new MemoryCache(new \n                    MemoryCacheOptions\n                {\n                    SizeLimit = options.Value.SizeLimit\n                })),\n                new ResponseCachingKeyProvider(poolProvider, options))\n        { }\n\n    internal ResponseCachingMiddleware(\n            RequestDelegate next,\n            IOptions<ResponseCachingOptions> options,\n            ILoggerFactory loggerFactory,\n            IResponseCachingPolicyProvider policyProvider,\n            IResponseCache cache,\n            IResponseCachingKeyProvider keyProvider)\n        {\n....\n```", "```cs\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services\n                  ...\n               .AddMemoryCache();\n        }\n```", "```cs\n dotnet add package Microsoft.Extensions.Caching.Redis\n\n```", "```cs\npublic class Startup\n    {\n        ...\n        public void ConfigureServices(IServiceCollection services)\n        {\n            ...\n            services\n               .AddDistributedRedisCache(\n                       options => { options.Configuration = \n                       \"catalog_cache:6380\";\n                });\n               ...\n        }\n    }\n}\n```", "```cs\n    ...\n    catalog_cache:\n        container_name: catalog_cache\n image: redis:alpine\n networks:\n            - my_network\n\nnetworks:\n    my_network:\n        driver: bridge\n```", "```cs\npublic static class RedisCacheServiceCollectionExtensions\n{\n  public static IServiceCollection AddDistributedRedisCache(\n    this IServiceCollection services,\n    Action<RedisCacheOptions> setupAction)\n  {\n    if (services == null)\n      throw new ArgumentNullException(nameof (services));\n    if (setupAction == null)\n      throw new ArgumentNullException(nameof (setupAction));\n    services.AddOptions();\n    services.Configure<RedisCacheOptions>(setupAction);\n    services.Add(ServiceDescriptor.Singleton<IDistributedCache, \n        RedisCache>());\n    return services;\n  }\n}\n```", "```cs\n  public interface IDistributedCache\n  {\n\n    byte[] Get(string key);\n\n    Task<byte[]> GetAsync(string key, CancellationToken token = \n    default (CancellationToken));\n\n    void Set(string key, byte[] value, DistributedCacheEntryOptions \n    options);\n\n    Task SetAsync(\n      string key,\n      byte[] value,\n      DistributedCacheEntryOptions options,\n      CancellationToken token = default (CancellationToken));\n\n    void Refresh(string key);\n    Task RefreshAsync(string key, CancellationToken token = \n    default (CancellationToken));\n    Task RemoveAsync(string key, CancellationToken token = \n    default (CancellationToken));\n  }\n```", "```cs\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    [JsonException]\n    [Authorize]\n    public class ItemController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n        private readonly IEndpointInstance _messageEndpoint;\n        private readonly IDistributedCache _distributedCache;\n\n        public ItemController(IItemService itemService, \n        IEndpointInstance messageEndpoint, \n IDistributedCache distributedCache)\n        {\n            _itemService = itemService;\n            _messageEndpoint = messageEndpoint;\n            _distributedCache = distributedCache;\n        }\n\n        ...\n...\n```", "```cs\npublic static IServiceCollection AddDistributedMemoryCache(\n  this IServiceCollection services)\n{\n  if (services == null)\n    throw new ArgumentNullException(nameof (services));\n  services.AddOptions();\n  services.TryAdd(ServiceDescriptor.Singleton<IDistributedCache, MemoryDistributedCache>());\n  return services;\n}\n```", "```cs\nnamespace Catalog.Domain.Configurations\n{\n    public class CacheSettings\n    {\n        public string ConnectionString { get; set; }\n    }\n}\n```", "```cs\nusing Catalog.Domain.Configurations;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Newtonsoft.Json;\nnamespace Catalog.Infrastructure.Extensions\n{\n    public static class DistributedCacheExtensions\n    {\n        public static IServiceCollection AddDistributedCache(this \n            IServiceCollection services,\n            IConfiguration configuration)\n        {\n            var settings = configuration.GetSection(\"CacheSettings\");\n            var settingsTyped = settings.Get<CacheSettings>();\n            services.Configure<CacheSettings>(settings);\n            services.AddDistributedRedisCache(options => { \n            options.Configuration = settingsTyped.ConnectionString; });\n            return services;\n        }\n    }\n}\n```", "```cs\n...\n\"CacheSettings\": {\n  \"ConnectionString\": \"catalog_cache\"\n}\n```", "```cs\npublic class Startup\n{\n    ...\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n           ...\n            .AddDistributedCache(Configuration)\n    }\n```", "```cs\nusing System.Threading.Tasks;\nusing Catalog.Domain.Configurations;\nusing Microsoft.Extensions.Caching.Distributed;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Newtonsoft.Json;\n\nnamespace Catalog.Infrastructure.Extensions\n{\n    public static class DistributedCacheExtensions\n    {\n        private static readonly JsonSerializerSettings \n            _serializerSettings = CreateSettings();\n\n        ...\n\n        public static async Task<T> GetObjectAsync<T>(this \n            IDistributedCache cache, string key)\n        {\n            var json = await cache.GetStringAsync(key);\n\n            return json == null ? default(T) :\n\n            JsonConvert.DeserializeObject<T>(json, \n                _serializerSettings);\n        }\n        public static async Task SetObjectAsync(this IDistributedCache \n            cache, string key, object value)\n        {\n            var json = JsonConvert.SerializeObject(value, \n                _serializerSettings);\n            await cache.SetStringAsync(key, json);\n        }\n\n        public static async Task SetObjectAsync(this IDistributedCache \n            cache, string key,\n        object value, DistributedCacheEntryOptions options)\n        {\n            var json = JsonConvert.SerializeObject(value, \n                _serializerSettings);\n            await cache.SetStringAsync(key, json, options);\n        }\n\n        private static JsonSerializerSettings CreateSettings()\n        {\n            return new JsonSerializerSettings();\n        }\n    }\n}\n```", "```cs\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    [JsonException]\n    [Authorize]\n    public class ItemController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n        private readonly IEndpointInstance _messageEndpoint;\n        private readonly IDistributedCache _distributedCache;\n\n        public ItemController(IItemService itemService, \n        IEndpointInstance messageEndpoint,\n            IDistributedCache distributedCache)\n        {\n            _itemService = itemService;\n            _messageEndpoint = messageEndpoint;\n            _distributedCache = distributedCache;\n        }\n        [HttpGet(\"{id:guid}\")]\n        [ItemExists]\n        [ResponseCache(Duration = 100, VaryByQueryKeys = new[] { \"*\" })]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var key = $\"{typeof(ItemController).FullName}.\n            {nameof(GetById)}.{id}\"; \n            var cachedResult = await _distributedCache. \n                GetObjectAsync<ItemResponse>(key);\n\n if (cachedResult != null)\n {\n return Ok(cachedResult);\n }\n\n            var result = await _itemService.GetItemAsync(new \n                GetItemRequest{ Id = id });\n            await _distributedCache.SetObjectAsync(key, result);\n\n            return Ok(result);\n        }\n...\n```", "```cs\n<controller_full_name>.<action_method_name>.<input_id>\n```", "```cs\n\nnamespace Catalog.API.Filters\n{\n    public class RedisCacheFilter : IAsyncActionFilter\n    {\n        private readonly IDistributedCache _distributedCache;\n        private readonly DistributedCacheEntryOptions _options;\n\n        public RedisCacheFilter(IDistributedCache distributedCache, \n        int cacheTimeSeconds)\n        {\n            _distributedCache = distributedCache;\n            _options = new DistributedCacheEntryOptions\n            {\n                SlidingExpiration = \n                    TimeSpan.FromSeconds(cacheTimeSeconds)\n            };\n        }\n\n        public async Task OnActionExecutionAsync(ActionExecutingContext \n        context, ActionExecutionDelegate next)\n        {\n            if (!context.ActionArguments.ContainsKey(\"id\"))\n            {\n                await next();\n            }\n\n            var actionName = (string) \n                context.RouteData.Values[\"action\"];\n            var controllerName = (string) \n                context.RouteData.Values[\"controller\"];\n\n            var id = context.ActionArguments[\"id\"];\n\n            var key = $\"{controllerName}.{actionName}.{id}\";\n\n            var result = await _distributedCache.\n                GetObjectAsync<ItemResponse>(key);\n\n            if (result != null)\n            {\n                context.Result = new OkObjectResult(result);\n                return;\n            }\n\n            var resultContext = await next();\n\n            if (resultContext.Result is OkObjectResult resultResponse \n            && resultResponse.StatusCode == 200)\n {\n await _distributedCache.SetObjectAsync(key, \n                    resultResponse.Value, _options);\n }\n        }\n    }\n}\n```", "```cs\n\n    [Route(\"api/items\")]\n    [ApiController]\n    [JsonException]\n    public class ItemController : ControllerBase\n    {\n        ...\n\n        [HttpGet(\"{id:guid}\")]\n        [ItemExists]\n        [TypeFilter(typeof(RedisCacheFilter), Arguments = new object[] \n            {20})]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            ...\n        }\n\n       ...\n    }\n```", "```cs\nnamespace Catalog.Fixtures\n{\n    public class InMemoryApplicationFactory<TStartup>\n        : WebApplicationFactory<TStartup> where TStartup : class\n    {\n        protected override void ConfigureWebHost(IWebHostBuilder \n            builder)\n        {\n            builder.UseEnvironment(\"Testing\")\n                .ConfigureTestServices(services =>\n                {\n                    ...\n                   services.AddSingleton<IDistributedCache, \n                      MemoryDistributedCache>();              \n                    ...\n                });\n        }\n    }\n}\n\n```"]