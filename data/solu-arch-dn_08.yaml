- en: '*Chapter 6*: Architecture Considerations'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第6章*：架构考虑事项'
- en: In the previous chapter, we learned about a set of architectural patterns that
    you must know to design and build a successful solution. These patterns are essential
    as they set the path for the development team and address the client concerns
    related to solution agility, scalability, and performance. Later in the chapter,
    we had a quick overview of a set of architecture characteristics that affect how
    you choose the right pattern for your solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了一系列你必须知道的架构模式，这些模式对于设计和构建一个成功的解决方案至关重要。这些模式是必不可少的，因为它们为开发团队设定了路径，并解决了与解决方案敏捷性、可扩展性和性能相关的客户关注点。在本章的后面部分，我们简要概述了一系列影响你选择正确模式的影响架构特性。
- en: In this chapter, we will dig deep into the quality factors that should be taken
    into account, such as reusability, usability, performance, security, development
    time, and similar quality requirements. Additionally, we will get to know best
    practices to plan for exception handling, tracing, and deploying.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨应考虑的质量因素，例如可重用性、可用性、性能、安全性、开发时间和类似的质量要求。此外，我们还将了解规划异常处理、跟踪和部署的最佳实践。
- en: 'Here are the topics that we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是本章我们将涵盖的主题：
- en: Exploring the design and runtime quality attributes of the solution architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索解决方案架构的设计和运行时质量属性
- en: Learning how to plan for exception handling, tracing, and deploying
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何规划异常处理、跟踪和部署
- en: Caching in web applications
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络应用程序中的缓存
- en: By the end of this chapter, you will have learned what makes an architecture
    pattern the best fit for the product you are building by exploring design and
    runtime quality attributes. We will also enrich your knowledge by learning best
    practices to implement caching to improve performance and overall user experience,
    logging to track reported errors in a centralized location, and deployment techniques.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，通过探索设计和运行时质量属性，你将了解到什么使得架构模式最适合你正在构建的产品。我们还将通过学习最佳实践来丰富你的知识，例如实施缓存以提升性能和整体用户体验，记录以在集中位置跟踪报告的错误，以及部署技术。
- en: Learning about quality attributes
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解质量属性
- en: An organized solution architecture sets the right path for your development
    team and makes it easy to maintain different quality characteristics, which will
    further enhance the quality of the product in many ways.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有组织的解决方案架构为你的开发团队设定了正确的路径，并使得维护不同的质量特性变得容易，这将从许多方面进一步提升产品的质量。
- en: 'Before we start exploring the various quality attributes, let''s first understand
    what a quality attribute is. A **quality attribute** is a property that defines
    the quality of a system, it is a measurable or testable characteristic of a system
    that is used to indicate how well the architecture chosen for the system satisfies
    the requirements of the client. There are two types of quality attributes: qualities
    that can be measured at design time and others that can be measured at runtime
    or during execution. The following diagram shows us the various attributes that
    we will discuss in this chapter along with their respective types:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始探索各种质量属性之前，让我们首先了解什么是质量属性。**质量属性**是定义系统质量的一个属性，它是系统的一个可测量或可测试的特征，用于指示所选架构如何满足客户的需求。质量属性有两种类型：可以在设计时测量的属性和可以在运行时或执行期间测量的属性。以下图表展示了我们将在本章中讨论的各种属性及其相应的类型：
- en: '![Figure 6.1: Software architecture quality attributes](img/Figure_6.1_B17366.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1：软件架构质量属性](img/Figure_6.1_B17366.jpg)'
- en: 'Figure 6.1: Software architecture quality attributes'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：软件架构质量属性
- en: Let's explore these quality attributes in the following sections.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在以下章节中探索这些质量属性。
- en: Exploring design quality attributes
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索设计质量属性
- en: Business functionalities of the product take the front seat in terms of importance
    for the development team. We often focus on meeting the functional requirements
    of the client and later, after releasing the product, we notice some quality deficiency
    such as the product is difficult to maintain or to scale. Also, we may end up
    with performance issues or security breaches. In this section, we will explore
    the design quality attributes that should be addressed during the software architecture
    phase.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于开发团队来说，产品的业务功能在重要性方面占据首位。我们经常专注于满足客户的职能需求，而在产品发布后，我们可能会注意到一些质量缺陷，例如产品难以维护或扩展。此外，我们可能会遇到性能问题或安全漏洞。在本节中，我们将探讨在软件架构阶段应解决的设计质量属性。
- en: Maintainability
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可维护性
- en: '**Maintainability** is one of the key software quality attributes. It refers
    to the ability of the architecture to support future changes in the product behavior
    such as introducing a feature with new business requirements or modifying an existing
    one.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**可维护性**是关键软件质量属性之一。它指的是架构支持产品行为未来变化的能力，例如引入具有新业务需求的功能或修改现有功能。'
- en: Repair philosophy also affects the measurement of this attribute, which refers
    to the time needed to restore the system after a failure. The more our code is
    coupled and the components are developed with excessive dependencies, the more
    the product is difficult to maintain. With the existence of this attribute, software
    engineers started introducing the concept of separation of concerns into architectures,
    which is supported in microservices architecture, for example.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 维修哲学也影响这一属性的测量，该属性指的是系统在故障后恢复所需的时间。我们的代码耦合度越高，组件开发中过度依赖性越强，产品就越难以维护。随着这一属性的存在，软件工程师开始将关注点分离的概念引入到架构中，例如在微服务架构中得到支持。
- en: 'Improving the maintainability of the product can greatly improve team productivity
    and lower the cost of adding new features. Here is a list of key techniques for
    better maintainability:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 提高产品的可维护性可以极大地提升团队的生产力并降低添加新特性的成本。以下是一些提高可维护性的关键技术：
- en: Choose an architecture that allows us to separate the responsibilities of the
    components by having low coupling, which should create well-defined layers in
    the system and ease changes in the system.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择一种架构，通过低耦合来分离组件的责任，这应在系统中创建定义良好的层并简化系统中的变更。
- en: Use interfaces to maximize the use of plugin modules in the system, which will
    allow more flexibility and extensibility.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用接口来最大化系统插件模块的使用，这将允许更多的灵活性和可扩展性。
- en: Provide detailed documentation to explain the object-oriented structure in the
    system.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供详细的文档来解释系统中的面向对象结构。
- en: Flexibility
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 灵活性
- en: '**Flexibility** refers to the ability of the architecture to adapt to varying
    environments and situations in response to different user and system requirements,
    which could be hardware changes, software changes, or even changes in the business
    rules. The less effort you put in to cope with changes, the more flexible it is;
    the easier it is to reconfigure and deploy the system, the more flexible it is.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**灵活性**指的是架构适应不同用户和系统需求变化的能力，这可能包括硬件变化、软件变化，甚至是业务规则的变化。你投入越少的精力来应对变化，它就越灵活；重新配置和部署系统越容易，它就越灵活。'
- en: 'A flexible software architecture is able to adapt to changes, so let''s check
    the following key techniques to improve flexibility:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一个灵活的软件架构能够适应变化，因此让我们检查以下提高灵活性的关键技术：
- en: Consider using business layers to encapsulate the business rules. We can only
    modify these layers when business rules change.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用业务层来封装业务规则。我们只能在业务规则发生变化时修改这些层。
- en: Consider using a configurable business workflow engine such as **Microsoft Power
    Automate**.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用可配置的业务工作流引擎，例如**Microsoft Power Automate**。
- en: Consider implementing layers in the system to separate the UI from the business
    logic and the data access functionality.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑在系统中实现层，以将用户界面与业务逻辑和数据访问功能分离。
- en: Design layers to be consistent and loosely coupled to maximize flexibility and
    facilitate the replacement and reusability of the components.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计层次结构以保持一致性，并使其松散耦合，以最大化灵活性并促进组件的替换和复用。
- en: Reusability
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可复用性
- en: '**Reusability** is also one of the key software quality attributes. It refers
    to the degree to which existing components, classes, and functions can be reused
    to develop new modules, new features, or even new applications. It eliminates
    the duplication of code and minimizes the time needed to implement new components.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**可重用性**也是软件质量的关键属性之一。它指的是现有组件、类和函数可以被重用来开发新模块、新功能甚至新应用程序的程度。它消除了代码的重复，并最小化了实现新组件所需的时间。'
- en: 'Reusability is an approach that should be applied with careful consideration
    of the benefits it brings to a system. Here are some key techniques to improve
    reusability:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 可重用性是一种应该谨慎考虑其给系统带来的益处的应用方法。以下是一些提高可重用性的关键技术：
- en: Identify the cross-cutting functionalities between components and implement
    the common classes and functions that we can reuse across different components
    to provide capabilities such as validation, logging, tracing, authorization, and
    authentication.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别组件之间的横切功能，并实现我们可以跨不同组件重用的通用类和函数，以提供验证、日志记录、跟踪、授权和认证等功能。
- en: Consider exposing the business logic through web services or Web APIs to provide
    this logic to different systems or platforms, such as web and mobile.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑通过Web服务或Web API公开业务逻辑，以将此逻辑提供给不同的系统或平台，例如Web和移动设备。
- en: Use data types and structures that can be accessed through different components.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用可以通过不同组件访问的数据类型和结构。
- en: Integrability
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成性
- en: '**Integrability** outlines the way the components are designed to operate together
    by exchanging information as part of the overall system architecture. It also
    includes the coding standards and naming conventions in addition to other factors
    that affect the consistency of the components and makes it easy for the developers
    to understand the code and maintain it. It also measures the ability of the system
    to be integrated with other systems.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**集成性**概述了组件通过作为整体系统架构一部分的信息交换而协同工作的方式。它还包括编码标准和命名约定，以及影响组件一致性的其他因素，使得开发者更容易理解代码并维护它。它还衡量了系统与其他系统集成的能力。'
- en: 'There are numerous advantages of applying integrability to improve the harmony
    between the different components of a system. Here are some key techniques to
    maximize integrability:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 应用集成性以改善系统不同组件之间的和谐性有许多优势。以下是一些最大化集成性的关键技术：
- en: Enforce coding standards that should be predefined and available for the development
    team and provide detailed documentation for the entire system architecture.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制执行预定义并可供开发团队使用的编码标准，并为整个系统架构提供详细的文档。
- en: Consider using web services or gateway layers to integrate with legacy systems.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用Web服务或网关层与遗留系统集成。
- en: Perform code review sessions to ensure guidelines are respected during the implementation.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行代码审查会议，以确保在实施过程中遵守指南。
- en: Testability
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可测试性
- en: '**Testability** is a quality attribute that shows how well a system allows
    us to create test cases and execute test plans to determine whether the system
    is working as per the requirements. It allows us to identify faults in the system
    in an effective manner and based on predefined test cases.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**可测试性**是一个质量属性，它表明系统允许我们创建测试用例并执行测试计划以确定系统是否按要求工作的程度。它允许我们以有效的方式识别系统中的故障，并基于预定义的测试用例。'
- en: 'We should find defects, performance issues, and security vulnerabilities sooner
    as it is less expensive than having the customer find them when the product is
    released. Let''s get to know some key techniques to improve testability:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该尽早发现缺陷、性能问题和安全漏洞，因为这比在产品发布时让客户发现它们要便宜得多。让我们了解一些提高可测试性的关键技术：
- en: Create test cases in **Visual Studio**, then run test plans and check the test
    results. This is also applicable in **Azure DevOps**.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在**Visual Studio**中创建测试用例，然后运行测试计划并检查测试结果。这也适用于**Azure DevOps**。
- en: Use mock objects in test cases to build different scenarios.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在测试用例中使用模拟对象来构建不同的场景。
- en: Let our architecture support modular components to allow detailed testing.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让我们的架构支持模块化组件，以便进行详细的测试。
- en: Create unit testing to test every single functionality in the system.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建单元测试以测试系统中的每个单个功能。
- en: It is recommended to consistently increase our learning curve and upgrade our
    skills to ensure that we are able to apply all these design attributes. This will
    lead to the creation of balanced and highly efficient software solutions and products.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 建议持续提高我们的学习曲线并提升我们的技能，以确保我们能够应用所有这些设计属性。这将导致创建平衡且高度高效的软件解决方案和产品。
- en: In the next section, we will explore runtime quality attributes.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨运行时质量属性。
- en: Understanding runtime quality attributes
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解运行时质量属性
- en: Runtime quality attributes are a set of attributes that are measured during
    the execution of a system in real-life scenarios. They represent a set of features
    that facilitate the measurement of the performance and security of a software
    product in addition to other quality constraints.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时质量属性是一组在系统在实际场景中执行期间测量的属性。它们代表了一组有助于测量软件产品性能和安全性以及其他质量约束的功能。
- en: These quality attributes must be assessed to take actions proactively to ensure
    they are maintained properly to deliver great products to end users. What follows
    is an introduction to each runtime quality attribute with some key techniques
    diving into details that should be considered for improvements.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 必须评估这些质量属性，以便主动采取行动，确保它们得到适当维护，从而向最终用户提供优质的产品。以下是对每个运行时质量属性的介绍，以及一些关键技术，深入探讨应考虑的改进细节。
- en: Performance
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能
- en: '**Performance** is the most important quality attribute for every client. It
    refers to the responsiveness of the system to perform a specific function in given
    constraints such as time, accuracy, or memory usage. It includes two metrics,
    namely, *latency*, which is the time needed to respond to an event triggered in
    the system, and *throughput*, which is the number of events that can occur in
    a given time frame.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**性能**是每个客户端最重要的质量属性。它指的是系统在给定约束（如时间、准确性或内存使用）下执行特定功能的响应性。它包括两个指标，即*延迟*，这是对系统中触发的事件做出响应所需的时间，以及*吞吐量*，这是在给定时间框架内可以发生的事件数量。'
- en: 'We all know that there are some products out there that aren''t being used
    because of their performance problems. So, let''s get to know some key techniques
    for improving performance:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道，有些产品由于性能问题而未被使用。因此，让我们了解一些提高性能的关键技术：
- en: Consider using asynchronous calls.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用异步调用。
- en: Use **Data Transfer Objects** (**DTOs**) to minimize the size of data sent from
    the server to the frontend client.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**数据传输对象**（**DTOs**）来最小化从服务器发送到前端客户端的数据大小。
- en: Avoid retrieving data more often than is necessary and use paging when returning
    data collection.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免比必要的更频繁地检索数据，并在返回数据集合时使用分页。
- en: Use performance profiling tools, such as **Visual Studio Diagnostic Tools**
    to identify code that has a large impact on performance.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用性能分析工具，例如**Visual Studio诊断工具**来识别对性能有重大影响的代码。
- en: Minify frontend assets such as **JavaScript** and **CSS** files.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最小化前端资源，如**JavaScript**和**CSS**文件。
- en: Consider using **Azure** **Functions** to handle long-running requests, as out-of-process
    functions are beneficial to minimize CPU usage.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用**Azure** **函数**来处理长时间运行的请求，因为进程外函数有助于最小化CPU使用。
- en: Reduce the size of HTTP responses by using HTTP compression.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过使用HTTP压缩来减小HTTP响应的大小。
- en: Always use the latest release of ASP.NET Core as it includes many improvements.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用ASP.NET Core的最新版本，因为它包含许多改进。
- en: Security
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全性
- en: '**Security** is an essential part of the system. It refers to the fact that
    any system should be protected from disclosure and unauthorized attempts to access
    data. Securing a system starts with implementing proper authentication and authorization
    mechanisms. In addition, securing the system assets from unauthorized modification
    is a must. That''s why we should always deploy the compiled assemblies and never
    upload the .NET classes as is.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**安全性**是系统的基本组成部分。它指的是任何系统都应受到保护，防止数据泄露和未经授权的访问尝试。确保系统安全始于实施适当的身份验证和授权机制。此外，防止系统资产被未经授权的修改也是必须的。这就是为什么我们应该始终部署编译后的程序集，而不是直接上传.NET类。'
- en: To secure our system, we must have an in-depth understanding of the environment
    where we want to deploy the product, what type of access we need to grant users,
    and what they can access. It is important to know that we need to apply various
    mechanisms to increase the protection level.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保护我们的系统，我们必须深入了解我们想要部署产品的环境，我们需要授予用户什么类型的访问权限，以及他们可以访问什么。重要的是要知道，我们需要应用各种机制来提高保护级别。
- en: 'The more we learn about potential threats and take action to avoid them, the
    more we protect the system. Having the product tested on a regular basis for security
    vulnerabilities is a must for protection against data breaches that may affect
    the client''s reputation negatively and undermine their brand''s integrity. Let''s
    check the following key techniques that should help us improve the overall security
    of the product:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对潜在威胁了解得越多，采取的行动就越能避免它们，我们就越能保护系统。定期对产品进行安全漏洞测试是防止可能损害客户声誉和损害其品牌信誉的数据泄露的必要措施。让我们检查以下关键技术，这些技术应该有助于我们提高产品的整体安全性：
- en: Create a periodic task to back up the database and the system assets then store
    them in a secure location, which will make it possible to recover them quickly
    when needed.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个定期任务来备份数据库和系统资产，并将它们存储在安全的位置，这样在需要时可以快速恢复。
- en: Test the restore process to make sure that the backups will work properly.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试恢复过程以确保备份能够正常工作。
- en: Apply solid authentication and authorization processes.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用稳健的认证和授权流程。
- en: Never trust user input, always validate data input, and use stored procedures
    to prevent **SQL injection**.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要信任用户输入，始终验证数据输入，并使用存储过程来防止**SQL注入**。
- en: Never use string concatenation to create SQL statements.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要使用字符串连接来创建SQL语句。
- en: Encode passwords saved in the database.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对数据库中保存的密码进行编码。
- en: Do not store sensitive data in hidden fields.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要在隐藏字段中存储敏感数据。
- en: Implement audit logging functionality to log every single event in the system.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施审计日志功能以记录系统中的每一个事件。
- en: Consider implementing a clustered server architecture if the system is considered
    mission-critical for the client.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果系统对客户来说是至关重要的，考虑实施集群服务器架构。
- en: Reliability
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可靠性
- en: '**Reliability** is the ability of a system to perform all tasks and events
    triggered by users over time without the need to conduct a repair or modification.
    The system has a probability of high reliability during the early stage of operation.
    This probability will start reducing over time. Improving the reliability of a
    system requires us to identify the most essential user journeys, then analyze
    them to detect the areas where we can improve. This methodology will allow us
    to create indicators about the services and functions that matter most to the
    users.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**可靠性**是指系统在不需要进行维修或修改的情况下，随着时间的推移能够执行所有由用户触发的任务和事件的能力。系统在运营的早期阶段具有较高的可靠性概率。这个概率会随着时间的推移而开始降低。提高系统的可靠性需要我们识别最重要的用户旅程，然后分析它们以检测我们可以改进的区域。这种方法将使我们能够创建关于对用户最重要的服务和功能的指标。'
- en: 'This quality attribute is critical for the continuity of services delivered
    by the system. Here are some key techniques to improve the reliability of our
    system:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个质量属性对于系统提供的服务连续性至关重要。以下是一些提高我们系统可靠性的关键技术：
- en: Trace the performance of the most used services in our system to identify poor
    performance or failures.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪我们系统中使用最频繁的服务性能，以识别性能不佳或故障。
- en: Audit calls to Web APIs and web services.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 审计对Web API和Web服务的调用。
- en: Consider implementing a failover plan.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑实施故障转移计划。
- en: Consider analyzing customer complaints to troubleshoot and identify the services
    that should be improved.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑分析客户投诉以排除故障并确定应改进的服务。
- en: Usability
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可用性
- en: '**Usability** is a quality attribute that assesses the user interface of a
    system. It shows how easy it is to use the system. If users don''t like the design
    or if they find it difficult to find what they are looking for, they might stop
    using the system. That''s why usability is one of the main factors that will lead
    users to adopt a system. There are five key factors that constitute the usability
    attribute:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**可用性**是一个评估系统用户界面的质量属性。它显示了使用系统的难易程度。如果用户不喜欢设计或者发现很难找到他们想要的东西，他们可能会停止使用该系统。这就是为什么可用性是导致用户采用系统的主要因素之一。构成可用性属性的有五个关键因素：'
- en: '**Learnability**: This factor tells us how easy it is for users to perform
    their tasks the first time they see the system.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易学性**：这个因素告诉我们用户第一次看到系统时执行任务有多容易。'
- en: '**Efficiency**: This factor specifies how quickly the users can perform their
    main tasks.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**效率**：这个因素指定了用户完成主要任务的速度。'
- en: '**Memorability**: This denotes how easy it is to remember the steps to perform
    main tasks after not using the system for a long time.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记忆性**：这表示在长时间未使用系统后，记住执行主要任务的步骤有多容易。'
- en: '**Errors**: This stipulates how many errors they encounter while performing
    actions in the system and whether it''s easy to report them or to recover and
    proceed to accomplish the task.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误**：这规定了他们在系统中执行操作时遇到的错误数量，以及报告错误或恢复并继续完成任务有多容易。'
- en: '**Satisfaction**: This indicates how satisfied the users are with the overall
    design.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**满意度**：这表明用户对整体设计的满意度。'
- en: 'Usability concerns should be carefully considered during the earliest design
    decisions of the system to avoid the disappointment and frustration of end users
    when the product is released. Here is a list of some key techniques to improve
    usability:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在系统的最早设计决策中应仔细考虑可用性问题，以避免产品发布时最终用户的失望和挫败感。以下是一些关键技术的列表，以提高可用性：
- en: Consider maximizing ease-of-use patterns by enforcing accepted UI design standards.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑通过强制执行接受的 UI 设计标准来最大化易用性模式。
- en: Simplify user interaction and multi-step functionalities by applying workflows.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过应用工作流简化用户交互和多步骤功能。
- en: Consider using asynchronous calls to increase user interactivity and to perform
    background tasks and avoid full post-back calls.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用异步调用以增加用户交互性，并执行后台任务，避免完整的后端调用。
- en: Interoperability
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互操作性
- en: '**Interoperability** is a quality attribute that assesses the ability of the
    components in our system to cooperate at runtime to perform tasks successfully
    and efficiently exchange information.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**互操作性**是一个质量属性，它评估了我们系统中组件在运行时成功合作执行任务以及高效交换信息的能力。'
- en: 'Moreover, interoperability is an attribute of the system that is responsible
    for its operation and interaction with other systems as well. It is an attribute
    that cannot be ignored. Let''s get to know a few key techniques to increase interoperability:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，互操作性是系统的一个属性，它负责系统的操作以及与其他系统的交互。这是一个不能忽视的属性。让我们了解一些关键技术来提高互操作性：
- en: Consider using connectors and web services to connect to third-party systems
    and exchange data.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用连接器和 Web 服务来连接第三方系统并交换数据。
- en: Expose functionalities through standard web services or **REST APIs** to exchange
    data with legacy systems.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过标准 Web 服务或 **REST API** 暴露功能，以与旧系统交换数据。
- en: Ensure that our architecture design allows low coupling between components to
    improve flexibility and reusability.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保我们的架构设计允许组件之间有低耦合，以提高灵活性和可重用性。
- en: In this section, we explored the runtime quality attributes that affect the
    quality of the software product. These attributes should be considered and solved
    during the implementation and execution of the system to ensure the delivery of
    great products for our clients. In the next section, we will explore the caching
    mechanism in ASP.NET Core.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了影响软件产品质量的运行时质量属性。这些属性应该在系统的实现和执行过程中被考虑和解决，以确保向我们的客户提供优质的产品。在下一节中，我们将探讨
    ASP.NET Core 中的缓存机制。
- en: Caching in web applications
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络应用程序中的缓存
- en: '**Caching** is a technique that allows us to store frequently used data in
    memory. Instead of querying the database multiple times to get the same content,
    we often use caching to store this content and then retrieve it from the memory
    the next time we request the same content.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存**是一种技术，它允许我们在内存中存储频繁使用的数据。我们通常使用缓存来存储这些内容，然后在下一次请求相同内容时从内存中检索，而不是多次查询数据库以获取相同的内容。'
- en: 'Caching is essential to improve performance in ASP.NET Core and the overall
    user experience of the product. In ASP.NET Core, there are different techniques
    to cache data. Here is an overview of these techniques:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存对于提高 ASP.NET Core 的性能和产品的整体用户体验至关重要。在 ASP.NET Core 中，有不同技术可以用于缓存数据。以下是这些技术的概述：
- en: '**In-memory caching**: In this technique, the memory of the server is used
    to store the data.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存缓存**：在这种技术中，服务器的内存用于存储数据。'
- en: '**Distributed caching**: This technique is used when our app is deployed to
    Azure or when it is hosted on a farm environment. The cache is distributed across
    the servers contributing to this farm.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式缓存**：当我们的应用程序部署到 Azure 或托管在农场环境中时，使用此技术。缓存分布在参与此农场的服务器上。'
- en: Let's learn how to implement caching in ASP.NET Core.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们学习如何在 ASP.NET Core 中实现缓存。
- en: Implementing caching in ASP.NET Core
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中实现缓存
- en: 'In ASP.NET Core, there are two built-in main interfaces that you can use to
    start caching the content of mission-critical tasks: `IMemoryCache` and `IDistributedCache`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 中，有两个内置的主要接口，您可以使用它们开始缓存关键任务的 内容：`IMemoryCache` 和 `IDistributedCache`：
- en: '`IMemoryCache`: This is an interface that allows us to apply a local in-memory
    cache.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IMemoryCache`：这是一个允许我们应用本地内存缓存的接口。'
- en: '`IDistributedCache`: This is an interface that provides us with a set of methods
    to manipulate the cache in a distributed environment.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`IDistributedCache`：这是一个提供一系列方法来在分布式环境中操作缓存的接口。'
- en: IMemoryCache example
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IMemoryCache 示例
- en: 'The following code demonstrates an example of using `IMemoryCache` to avoid
    querying the database multiple times to get the same content:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了使用 `IMemoryCache` 来避免多次查询数据库获取相同内容的示例：
- en: '[PRE0]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this example, we have a `NewsService` class with a method to get all the
    updates from the database. Instead of querying the database every time, we want
    to display the new data. So, we decided to use the `IMemoryCache` interface to
    benefit from its caching mechanism. In the `GetNewsList` method, we are returning
    the cached version of the data if available; otherwise, we are querying the database
    then storing the content in the cache.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们有一个 `NewsService` 类，其中有一个从数据库获取所有更新的方法。我们不想每次都查询数据库，而是想显示新数据。因此，我们决定使用
    `IMemoryCache` 接口来利用其缓存机制。在 `GetNewsList` 方法中，如果可用，我们返回数据的缓存版本；否则，我们查询数据库然后将内容存储在缓存中。
- en: IDistributedCache example
  id: totrans-117
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: IDistributedCache 示例
- en: 'This interface should be used when the application is hosted on a web farm
    or a cloud service. This interface doesn''t use the local memory of the server.
    This cache is shared by multiple web servers. There are various options to implement
    the `IDistributedCache` interface:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序托管在 Web 农场或云服务上时，应使用此接口。此接口不使用服务器的本地内存。此缓存由多个 Web 服务器共享。有各种选项来实现 `IDistributedCache`
    接口：
- en: We can use the SQL Server distributed cache. This cache will be stored in a
    SQL table. For this option, we need to add the following `Microsoft.Extensions.Caching.SqlServer`.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 SQL Server 分布式缓存。此缓存将存储在 SQL 表中。为此选项，我们需要添加以下 `Microsoft.Extensions.Caching.SqlServer`。
- en: We can use the `Microsoft.Extensions.Caching.StackExchangeRedis`.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以使用 `Microsoft.Extensions.Caching.StackExchangeRedis`。
- en: 'Here is an example showing how to use the `IDistributedCache` interface for
    caching:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个示例，展示了如何使用 `IDistributedCache` 接口进行缓存：
- en: '[PRE1]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In this example, we have created a **Razor** page to display the time and two
    asynchronous methods: one to get the cached time and the other one is to reset
    the cache.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个 **Razor** 页面来显示时间和两个异步方法：一个用于获取缓存的时钟，另一个用于重置缓存。
- en: In the `OnGetAsync` method, we get the cached time if available. The `ResetCachedTime`
    method is used to set the cache object and define the sliding expiration for 60
    seconds, which means the cache will be cleared if it is not used within 60 seconds.
    Otherwise, the time frame of the cache will be extended for another 60 seconds
    when it is consumed.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `OnGetAsync` 方法中，如果可用，我们获取缓存的时钟。`ResetCachedTime` 方法用于设置缓存对象并定义滑动过期时间为 60
    秒，这意味着如果 60 秒内未使用，缓存将被清除。否则，当它被消耗时，缓存的时间范围将再延长 60 秒。
- en: In the preceding two examples, we tried to explain the difference between `IMemoryCache`
    and `IDistributedCache` and how to use them. You can find many Microsoft online
    forums that provide step-by-step examples on how to configure and implement caching
    in ASP.NET Core.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的两个示例中，我们试图解释 `IMemoryCache` 和 `IDistributedCache` 之间的区别以及如何使用它们。您可以在许多 Microsoft
    在线论坛中找到有关如何在 ASP.NET Core 中配置和实现缓存的逐步示例。
- en: In the next section, we will explore the logging and tracing mechanisms in ASP.NET
    Core.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨 ASP.NET Core 中的日志和跟踪机制。
- en: Unified solution for logging and tracing
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日志和跟踪的统一解决方案
- en: .NET logging providers are used to log event messages to track the execution
    of the application and report all code errors or application exceptions in a centralized
    location. Tracing is used to track and view diagnostic information about a single
    flow in the system.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 日志提供程序用于将事件消息记录下来，以跟踪应用程序的执行，并在集中位置报告所有代码错误或应用程序异常。跟踪用于跟踪和查看系统单个流程的诊断信息。
- en: 'Logging and tracing are essential for .NET teams as every time the application
    fails, we request information to troubleshoot the issue and resolve it. The unified
    solution for logging and tracing will give you answers to the following questions:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 日志和跟踪对于 .NET 团队至关重要，因为每次应用程序失败时，我们都会请求信息以排查问题并解决它。日志和跟踪的统一解决方案将为您解答以下问题：
- en: '*Why did the system fail to complete the action?*'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为什么系统未能完成该操作？*'
- en: '*When did the error occur?*'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*错误是在何时发生的？*'
- en: '*Which function in the code caused the exception?*'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*代码中的哪个函数导致了异常？*'
- en: '*What was the status of the data exchanged between the functions?*'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*函数之间交换的数据的状态是什么？*'
- en: For traditional solutions that are hosted on-premises, logging and tracing are
    performed by the same process that runs the executable of the application. As
    for modern cloud applications that are built with the microservices pattern, each
    service runs within a specific process. In this case, the logging and tracing
    are generated by each microservice process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于托管在本地环境中的传统解决方案，日志和跟踪由运行应用程序可执行文件的同一步骤执行。至于使用微服务模式构建的现代云应用程序，每个服务都在特定的进程中运行。在这种情况下，日志和跟踪由每个微服务进程生成。
- en: 'The following diagram shows the architecture recommended by Microsoft to implement
    a unified logging and monitoring system using Azure services:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了 Microsoft 推荐的架构，用于使用 Azure 服务实现统一的日志和监控系统：
- en: '![Figure 6.2: Unified logging and monitoring system using Azure services](img/Figure_6.2_B17366.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2：使用 Azure 服务的统一日志和监控系统](img/Figure_6.2_B17366.jpg)'
- en: 'Figure 6.2: Unified logging and monitoring system using Azure services'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2：使用 Azure 服务的统一日志和监控系统
- en: 'Let''s get to know the main components from the preceding diagram:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解前图中展示的主要组件：
- en: '**Event Hubs**: This is a real-time data ingestion service that is fully integrated
    with all other Azure services. It is used to log all types of events in one centralized
    hub.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**事件中心**：这是一个实时数据摄取服务，与所有其他 Azure 服务完全集成。它用于在一个集中式中心记录所有类型的事件。'
- en: '**Azure Monitor**: This is used to create operational dashboards to help notify
    .NET teams about any issues and critical malfunctions.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Monitor**：此工具用于创建操作仪表板，以帮助通知 .NET 团队关于任何问题和关键故障。'
- en: '**Application Insights**: This is part of Azure Monitor, which is used to monitor
    live Azure services, detect abnormalities in performance, and diagnose and trace
    malfunctions.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序洞察**：这是 Azure Monitor 的一部分，用于监控实时 Azure 服务，检测性能异常，并诊断和跟踪故障。'
- en: '**Logic Apps**: This is a serverless cloud service that allows you to schedule
    and organize automated workflows using a user-friendly and easy-to-use visual
    designer.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**逻辑应用**：这是一个无服务器云服务，允许您使用用户友好且易于使用的可视化设计器安排和组织自动化工作流。'
- en: '**Blob Storage**: This is cloud storage used for cloud-native workloads to
    store unstructured data and binary files.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Blob Storage**：这是一种用于云原生工作负载的云存储，用于存储非结构化数据和二进制文件。'
- en: '**Azure Data Lake Storage**: This is a cloud platform that provides secure
    storage for big data analytics. It provides a set of capabilities required for
    developers and data scientists to store and analyze big data.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Data Lake Storage**：这是一个提供大数据分析安全存储的云平台。它为开发人员和数据科学家提供了一组存储和分析大数据所需的功能。'
- en: '**Azure Sentinel**: This is a cloud platform that uses built-in AI to log and
    analyze security information, then report any potential threat or anomalous behavior.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Sentinel**：这是一个使用内置 AI 记录和分析安全信息，然后报告任何潜在威胁或异常行为的云平台。'
- en: '**Azure Stream Analytics**: This is a serverless cloud engine used to collect
    and log real-time analytics.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure Stream Analytics**：这是一个无服务器云引擎，用于收集和记录实时分析。'
- en: 'So far, we have learned about the main components. Now let''s get an understanding
    of the logging and tracing mechanism shown in *Figure 6.2*:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了主要组件。现在让我们了解图 6.2 中展示的日志和跟踪机制：
- en: First, our application hosted on Azure triggers events to **Event Hubs** and
    **Application Insights** from both a user interface action and a Web API call.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们的应用程序在 Azure 上托管，从用户界面操作和 Web API 调用中触发事件到 **事件中心** 和 **Application Insights**。
- en: '**Application Insights** queries log data, traces problems, and monitors the
    application performance.'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Application Insights** 查询日志数据，追踪问题，并监控应用程序性能。'
- en: The **Stream Analytics** platform queries the data in **Event Hubs** to trigger
    **Logic Apps** workflows and process event messages that are flagged as critical
    indicators.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**流分析** 平台查询 **事件中心** 中的数据以触发 **Logic Apps** 工作流程并处理标记为关键指示器的事件消息。'
- en: Then, a **Logic Apps** scheduled process calls a REST endpoint and sends alerts
    to the .NET teams.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，一个 **Logic Apps** 定时过程调用 REST 端点并向 .NET 团队发送警报。
- en: '**Azure Sentinel** uses **Playbooks**, which are a set of procedures powered
    by **Azure Logic Apps** to log security alerts or incidents.'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Azure Sentinel** 使用 **Playbooks**，这是一套由 **Azure Logic Apps** 驱动的流程，用于记录安全警报或事件。'
- en: All logs will then be stored in **Blob Storage** and **Data Lake Storage** for
    later analysis and troubleshooting.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有日志随后将存储在 **Blob 存储** 和 **数据湖存储** 中，以便进行后续分析和故障排除。
- en: In the next section, we are going to talk about the high-level deployment steps
    in Azure.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将讨论在 Azure 中的高级部署步骤。
- en: Planning for deployment and monitoring
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和监控规划
- en: In this section, we are going to focus on deploying your ASP.NET application
    to **Azure App Service**. This doesn't mean that other traditional deployment
    options are not valid anymore, but we think the future is to host modern apps
    in the cloud for many reasons, including the capabilities offered by Azure that
    don't exist in traditional web hosting.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将专注于将您的 ASP.NET 应用程序部署到 **Azure App Service**。这并不意味着其他传统部署选项不再有效，但我们认为，由于
    Azure 提供的能力在传统网络托管中不存在，因此未来将现代应用程序托管在云中是趋势。包括 Azure 提供的能力在传统网络托管中不存在。
- en: To deploy the ASP.NET Core web app to Azure, we'll need to create a new Azure
    App Service web app. After the creation of the App Service, we'll be able to deploy
    our app using **Git** or Visual Studio. To create the App Service, we can use
    command-line scripts and **Azure Cloud Shell** or you can use the **Azure portal**
    to create and configure the App Service; both are easy to use.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 ASP.NET Core 网络应用程序部署到 Azure，我们需要创建一个新的 Azure App Service 网络应用程序。在创建 App
    Service 之后，我们将能够使用 **Git** 或 Visual Studio 部署我们的应用程序。要创建 App Service，我们可以使用命令行脚本和
    **Azure Cloud Shell**，或者您可以使用 **Azure 门户** 来创建和配置 App Service；两者都易于使用。
- en: 'Tip:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士：
- en: You can refer to the Microsoft documentation for detailed steps on how to create
    an App Service. Refer to the *Deploy an app to App Service* section at [https://docs.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/deploying-to-app-service?view=aspnetcore-5.0](https://docs.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/deploying-to-app-service?view=aspnetcore-5.0).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考 Microsoft 文档以获取创建 App Service 的详细步骤。请参阅 [https://docs.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/deploying-to-app-service?view=aspnetcore-5.0](https://docs.microsoft.com/en-us/dotnet/architecture/devops-for-aspnet-developers/deploying-to-app-service?view=aspnetcore-5.0)
    中的 *将应用程序部署到 App Service* 部分。
- en: After creating the App Service, you can publish the application using Visual
    Studio. Just right-click the Visual Studio project and then publish it. By default,
    our app will be deployed to the production environment and we will be able to
    browse it on the internet.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 App Service 后，您可以使用 Visual Studio 发布应用程序。只需右键单击 Visual Studio 项目，然后发布即可。默认情况下，我们的应用程序将被部署到生产环境，我们可以在互联网上浏览它。
- en: '*What if you want to have a staging environment so you can test and approve
    changes before moving them to production?* In this case, you can make use of Azure
    deployment slots. You can add a new deployment slot that will allow you to swap
    the app assets along with the configuration settings between the two deployment
    slots, usually staging and production. You can refer to the Microsoft documentation
    to create a staging deployment slot (similar steps can be applied to create a
    production slot): [https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '*如果您想有一个预发布环境以便在将其移动到生产环境之前测试和批准更改，该怎么办？* 在这种情况下，您可以使用 Azure 部署槽。您可以添加一个新的部署槽，这将允许您在两个部署槽之间交换应用程序资产以及配置设置，通常为预发布和生产。您可以参考
    Microsoft 文档来创建预发布部署槽（类似的步骤可以用于创建生产槽）：[https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots](https://docs.microsoft.com/en-us/azure/app-service/deploy-staging-slots)。'
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the design and runtime quality attributes that
    affect the overall quality of our architecture and as a result, our product. It
    is important to understand and apply these quality attributes. This will give
    our product the ability to undergo repair and evolution.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了影响我们架构整体质量的设计和运行时质量属性，以及这些属性如何影响我们的产品。理解和应用这些质量属性非常重要。这将使我们的产品具备修复和进化的能力。
- en: Next, we learned about the impact of caching on the performance of the application
    and how to enable it using ASP.NET Core interfaces. Later in this chapter, we
    discussed the logging and tracing mechanism in modern apps, then we explored the
    deployment capability of Azure App Service.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们学习了缓存对应用程序性能的影响以及如何使用 ASP.NET Core 接口来启用它。在本章的后面部分，我们讨论了现代应用程序中的日志记录和跟踪机制，然后我们探讨了
    Azure App Service 的部署能力。
- en: Remember that our responsibility as solution architects is to get a satisfactory
    result from the big picture, which consists of the solution architecture as well
    as the implementation and deployment being done in the correct way – that's what
    we tried to cover in this chapter.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，作为解决方案架构师，我们的责任是从整体上获得令人满意的结果，这包括解决方案架构以及以正确的方式进行实施和部署——这正是我们在本章中试图涵盖的内容。
- en: In the next chapter, we will dig deep into security considerations and will
    highlight some key techniques to secure your ASP.NET web applications.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨安全考虑因素，并突出一些关键技术来确保你的 ASP.NET 网络应用程序的安全。
