["```cs\n<button type=\"button\" @onclick=\"OnClickHandler\">\n    Click Me\n</button>\n@code {\n    private void OnClickHandler()\n    {\n        // ...\n    }\n} \n```", "```cs\n<input type=\"checkbox\" @onchange=\"OnChangedHandlerAsync\" />Is OK?\n@code {\n    bool isOk;\n    private async Task OnChangedHandlerAsync(ChangeEventArgs e)\n    {\n        isOk = (bool)e.Value!; \n        // await ...\n    }\n} \n```", "```cs\n<h1>@message</h1>\n<button type=\"button\"\n        @onclick=\"@(() => SetMessage(\"Blazor is Awesome!\"))\">\n    Who Is Awesome?\n</button>\n<button type=\"button\"\n        @onclick=\"@(() => { @message = \"Blazor Rocks!\"; })\">\n    Who Rocks?\n</button>\n@code{\n    private string? message;\n    private void SetMessage(string newMessage)\n    {\n        message = newMessage;\n    }\n} \n```", "```cs\n<div class=\"dropzone\"\n     dropzone=\"true\"\n     ondragover=\"event.preventDefault();\">\n</div> \n```", "```cs\n@page \"/focus\"     \n<input type=\"text\" @ref=\"taskInput\" @bind-value=\"@taskName\" />\n<button type=\"button\" @onclick=\"OnClickHandlerAsync\">\n     Add Task\n </button>\n@foreach (var item in tasks)\n{\n    <div>@item</div>\n}\n@code {\n    private string? taskName;\n    private ElementReference taskInput;\n    private List<string> tasks = new();\n    private async Task OnClickHandlerAsync()\n    {\n        tasks.Add(taskName!);\n        taskName = \"\";\n        await taskInput.FocusAsync();\n    }\n} \n```", "```cs\n<button type=\"@Type\"\n        class=\"@Class\" \n        disabled=\"@Disabled\" \n        title=\"@Title\" \n        @onclick=\"@ClickEvent\">\n    @ChildContent\n</button>\n@code {\n  [Parameter] public string? Class { get; set; }\n  [Parameter] public bool Disabled { get; set; }\n  [Parameter] public string? Title { get; set; }\n  [Parameter] public string? Type { get; set; }\n  [Parameter] public EventCallback ClickEvent { get; set; }\n  [Parameter] public RenderFragment? ChildContent { get; set; }\n} \n```", "```cs\n<BweButton Class=\"button button-red\" \n           Disabled=\"false\"\n           Title=\"This is a red button\"\n           Type=\"button\"\n           ClickEvent=\"OnClickHandler\">\n    Submit\n</BweButton> \n```", "```cs\n.button {\n    color: white;\n    cursor: pointer;\n    padding: 2em;\n}\n.button-red {\n    background-color: red;\n}\n.button-black {\n    background-color: black;\n} \n```", "```cs\n<BweButton @attributes=\"InputAttributes\"\n           ClickEvent=\"OnClickHandler\">\n    Submit\n</BweButton> \n```", "```cs\npublic Dictionary<string, object> InputAttributes { get; set; } =\n    new ()  \n    {\n        { \"Class\", \"button button-red\"},\n        { \"Disabled\", false},\n        { \"Title\", \"This is a red button\" },\n        { \"Type\", \"submit\" }\n    }; \n```", "```cs\n<button @attributes=\"InputAttributes\" >\n    @ChildContent\n</button>\n@code {\n    [Parameter(CaptureUnmatchedValues = true)]\n    public Dictionary<string, object>? InputAttributes{get; set;}\n    [Parameter]\n    public RenderFragment? ChildContent { get; set; }\n} \n```", "```cs\n<BweButton2 @attributes=\"InputAttributes2\"\n            @onclick=\"OnClickHandler\"\n            class=\"button button-black\">\n    Submit\n</BweButton2> \n```", "```cs\npublic Dictionary<string, object> InputAttributes2 { get; set; } =\n    new()\n    {\n        { \"class\", \"button button-red\" },\n        { \"title\", \"This is another button\" },\n        { \"name\", \"btnSubmit\" },\n        { \"type\", \"button\" },\n        { \"myAttribute\", \"123\"}\n    }; \n```", "```cs\n    <link href=\"css/bootstrap/css/bootstrap.min.css\" \n            rel=\"stylesheet\" /> \n    ```", "```cs\n    <main class=\"container\">\n        @Body\n    </main> \n    ```", "```cs\n    public enum TaskPriority\n    {\n        High,\n        Mid,\n        Low\n    } \n    ```", "```cs\n    public string? TaskName { get; set; }\n    public TaskPriority Priority { get; set; } \n    ```", "```cs\n    @using KanbanBoard.Models \n    ```", "```cs\n    [Parameter]\n    public List<TaskItem> TaskItems { get; set; } = new();\n    [Parameter]\n    public TaskPriority Priority { get; set; }\n    [Parameter]\n    public EventCallback<TaskPriority> OnDrop { get; set; }\n    [Parameter]\n    public EventCallback<TaskItem> OnStartDrag { get; set; } \n    ```", "```cs\n    <div class=\"col\">\n        <h2 style=\"\">@Priority.ToString() Priority</h2>\n        <div class=\"dropzone\"\n             ondragover=\"event.preventDefault();\"\n             @ondrop=\"OnDropHandler\">\n            @foreach (var item in TaskItems\n                .Where(q => q.Priority == Priority))\n                {\n\n                }\n        </div>\n    </div> \n    ```", "```cs\n    <div class=\"draggable\" \n        draggable=\"true\" \n        @ondragstart=\"@(() => OnDragStartHandler(item))\">\n        @item.TaskName\n        <span class=\"badge text-bg-secondary\">\n            @item.Priority\n        </span>\n    </div> \n    ```", "```cs\n    private void OnDropHandler()\n    {\n        OnDrop.InvokeAsync(Priority);\n    } \n    ```", "```cs\n    private void OnDragStartHandler(TaskItem task)\n    {\n        OnStartDrag.InvokeAsync(task);\n    } \n    ```", "```cs\n    .draggable {\n        margin-bottom: 10px;\n        padding: 10px 25px;\n        border: 1px solid #424d5c;\n        background: #ff6a00;\n        color: #ffffff;\n        border-radius: 5px;\n        cursor: grab;\n    }\n        .draggable:active {\n            cursor: grabbing;\n        }\n    .dropzone {\n        padding: .75rem;\n        border: 2px solid black;\n        min-height: 20rem;\n    } \n    ```", "```cs\n    <link href=\"KanbanBoard.styles.css\" rel=\"stylesheet\" /> \n    ```", "```cs\n    @using KanbanBoard.Models\n    @using KanbanBoard.Shared \n    ```", "```cs\n    <PageTitle>Kanban Board</PageTitle>\n    <div class=\"row\">\n        <Dropzone Priority=\"TaskPriority.High\"\n                  TaskItems=\"TaskItems\"\n                  OnDrop=\"OnDrop\"\n                  OnStartDrag=\"OnStartDrag\" />\n        <Dropzone Priority=\"TaskPriority.Mid\"\n                  TaskItems=\"TaskItems\"\n                  OnDrop=\"OnDrop\"\n                  OnStartDrag=\"OnStartDrag\" />\n        <Dropzone Priority=\"TaskPriority.Low\"\n                  TaskItems=\"TaskItems\"\n                  OnDrop=\"OnDrop\"\n                  OnStartDrag=\"OnStartDrag\" />\n    </div> \n    ```", "```cs\n    @code {\n        public TaskItem? CurrentItem;\n        List<TaskItem> TaskItems = new();\n\n        protected override void OnInitialized()\n        {\n            TaskItems.Add(new TaskItem\n            {\n                TaskName = \"Call Mom\",\n                Priority = TaskPriority.High\n            });\n           TaskItems.Add(new TaskItem\n           {\n               TaskName = \"Buy milk\",\n               Priority = TaskPriority.Mid\n            });\n            TaskItems.Add(new TaskItem\n            {\n                TaskName = \"Exercise\",\n                Priority = TaskPriority.Low\n            });    \n        }\n    } \n    ```", "```cs\n    private void OnStartDrag(TaskItem item)\n    {\n        CurrentItem = item;\n    } \n    ```", "```cs\n    private void OnDrop(TaskPriority priority)\n    {\n        CurrentItem!.Priority = priority;\n    } \n    ```", "```cs\n    <div class=\"row pt-3\" >\n        <div class=\"input-group mb-3\">\n            <label class=\"input-group-text\"\n              for=\"inputTask\">\n                Task\n            </label>\n            <input @ref=\"taskInput\"\n                   type=\"text\"\n                   id=\"inputTask\"\n                   class=\"form-control\"\n                   @bind-value=\"@taskName\"\n                   @attributes=\"InputParameters\" />\n            <button type=\"button\"\n                    class=\"btn btn-outline-secondary\"\n                    @onclick=\"OnClickHandlerAsync\">\n                Add Task\n            </button>\n        </div>\n    </div> \n    ```", "```cs\n    private string? taskName;\n    private ElementReference taskInput;\n    [Parameter(CaptureUnmatchedValues = true)]\n    public Dictionary<string, object>? \n        InputParameters{ get; set; }\n    [Parameter]\n    public EventCallback<string> OnSubmit { get; set; } \n    ```", "```cs\n    private async Task OnClickHandlerAsync()\n    {\n        if (!string.IsNullOrWhiteSpace(taskName))\n        {\n            await OnSubmit.InvokeAsync(taskName);\n            taskName = null;\n            await taskInput.FocusAsync();\n        }\n    } \n    ```", "```cs\n    <NewTask OnSubmit=\"AddTask\"\n             @attributes=\"InputAttributes\" /> \n    ```", "```cs\n    public Dictionary<string, object> InputAttributes = new ()\n    {\n        { \"maxlength\", \"25\" },\n        { \"placeholder\", \"enter new task\" },\n        { \"title\", \"This textbox is for adding your tasks.\" }\n    }; \n    ```", "```cs\n    private void AddTask(string taskName)\n    {\n        var taskItem = new TaskItem()\n            {\n                TaskName = taskName,\n                Priority = TaskPriority.High\n            };\n        TaskItems.Add(taskItem);\n    } \n    ```"]