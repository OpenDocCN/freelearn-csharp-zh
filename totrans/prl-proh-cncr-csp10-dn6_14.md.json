["```cs\n    public static void ProcessText(object? cancelToken)\n    {\n        var token = cancelToken as CancellationToken?;\n        string text = \"\";\n        for (int x = 0; x < 75000; x++)\n        {\n            if (token != null && token.Value\n                .IsCancellationRequested)\n            {\n                Console.WriteLine($\"Cancellation request \n                    received. String value: {text}\");\n                break;\n            }\n            text += x + \" \";\n            Thread.Sleep(500);\n        }\n    }\n    ```", "```cs\n    private static void CancelThread()\n    {\n        using CancellationTokenSource tokenSource = new();\n        Console.WriteLine(\"Starting operation.\");\n        ThreadPool.QueueUserWorkItem(new \n            WaitCallback(ManagedThreadsExample\n                .ProcessText), tokenSource.Token);\n        Thread.Sleep(5000);\n        Console.WriteLine(\"Requesting cancellation.\");\n        tokenSource.Cancel();\n        Console.WriteLine(\"Cancellation requested.\");\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n        CancelThread();\n        Console.ReadKey();\n    }\n    ```", "```cs\n    public static void ProcessTextParallel(object? \n        cancelToken)\n    {\n        var token = cancelToken as CancellationToken?;\n        if (token == null) return;\n        string text = \"\";\n        ParallelOptions options = new()\n        {\n            CancellationToken = token.Value,\n            MaxDegreeOfParallelism = \n                Environment.ProcessorCount\n        };\n        try\n        {\n            Parallel.For(0, 75000, options, (x) =>\n            {\n                text += x + \" \";\n                Thread.Sleep(500);\n            });\n        }\n        catch (OperationCanceledException e)\n        {\n            Console.WriteLine($\"Text value: {text}. \n                {Environment.NewLine} Exception \n                    encountered: {e.Message}\");\n        }\n    }\n    ```", "```cs\n    private static void CancelParallelFor()\n    {\n        using CancellationTokenSource tokenSource = new();\n        Console.WriteLine(\"Press a key to start, then \n            press 'x' to send cancellation.\");\n        Console.ReadKey();\n        Task.Run(() =>\n        {\n            if (Console.ReadKey().KeyChar == 'x')\n                tokenSource.Cancel();\n            Console.WriteLine();\n            Console.WriteLine(\"press a key\");\n        });\n        ManagedThreadsExample.ProcessTextParallel\n            (tokenSource.Token);\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n        //CancelThread();\n        CancelParallelFor();\n        Console.ReadKey();\n    }\n    ```", "```cs\n    public static void ProcessNumsPlinq(object? \n        cancelToken)\n    {\n        int[] input = Enumerable.Range(1, \n            25000000).ToArray();\n        var token = cancelToken as CancellationToken?;\n        if (token == null) return;\n        int[]? result = null;\n        try\n        {\n            result =\n                (from value in input.AsParallel()\n                    .WithCancellation(token.Value)\n                    where value % 7 == 0\n                    orderby value\n                    select value).ToArray();\n        }\n        catch (OperationCanceledException e)\n        {\n            Console.WriteLine($\"Exception encountered: \n                {e.Message}\");\n        }\n    }\n    ```", "```cs\n    private static void CancelPlinq()\n    {\n        using CancellationTokenSource tokenSource = new();\n        Console.WriteLine(\"Press a key to start.\");\n        Console.ReadKey();\n        Task.Run(() =>\n        {\n            Thread.Sleep(100);\n            Console.WriteLine(\"Requesting cancel.\");\n            tokenSource.Cancel();\n            Console.WriteLine(\"Cancel requested.\");\n        });\n        ManagedThreadsExample.ProcessNumsPlinq\n            (tokenSource.Token);\n    }\n    ```", "```cs\n    private static List<Point> GeneratePoints(int count)\n    {\n        var rand = new Random();\n        var points = new List<Point>();\n        for (int i = 0; i <= count; i++)\n        {\n            points.Add(new Point(rand.Next(1, count * 2), \n                100));\n        }\n        return points;\n    }\n    ```", "```cs\n    using System.Drawing;\n    ```", "```cs\n    private static void FindSmallXValues(List<Point> \n        points, CancellationToken token)\n    {\n        foreach (Point point in points)\n        {\n            if (point.X < 50)\n            {\n                Console.WriteLine($\"Point with small X \n                    coordinate found. Value: {point.X}\");\n            }\n            if (token.IsCancellationRequested)\n            {\n                break;\n            }\n            Thread.SpinWait(5000);\n        }\n    }\n    ```", "```cs\n    public static void CancelWithPolling()\n    {\n        using CancellationTokenSource tokenSource = new();\n        Task.Run(() => FindSmallXValues(GeneratePoints\n            (1000000), tokenSource.Token), tokenSource\n                .Token);\n        if (Console.ReadKey(true).KeyChar == 'x')\n        {\n            tokenSource.Cancel();\n            Console.WriteLine(\"Press a key to quit\");\n        }\n    }\n    ```", "```cs\n    using CancellationPatterns;\n    Console.WriteLine(\"Hello, World! Press a key to start, \n        then press 'x' to cancel.\");\n    Console.ReadKey();\n    PollingExample.CancelWithPolling();\n    Console.ReadKey();\n    ```", "```cs\n    private static string GetDownloadFileName()\n    {\n        string path = System.Reflection.Assembly\n           .GetAssembly(typeof(CallbackExample)).Location;\n        string folder = Path.GetDirectoryName(path);\n        return Path.Combine(folder, \"audio.flac\");\n    }\n    ```", "```cs\n    private static async Task DownloadAudioAsync\n        (CancellationToken token)\n    {\n        const string url = \"https://archive.org/download/\n            lp_the-odyssey_homer-anthony-quayle/disc1/\n                lp_the-odyssey_homer-anthony-quayle\n                    _disc1side1.flac\";\n        using WebClient webClient = new();\n        token.Register(webClient.CancelAsync);\n        try\n        {\n            await webClient.DownloadFileTaskAsync(url, \n                GetDownloadFileName());\n        }\n        catch (WebException we)\n        {\n            if (we.Status == WebExceptionStatus\n                .RequestCanceled)\n                throw new OperationCanceledException();\n        }\n        catch (AggregateException ae)\n        {\n            foreach (Exception ex in ae.InnerExceptions)\n            {\n                if (ex is WebException exWeb &&\n                    exWeb.Status == WebExceptionStatus\n                        .RequestCanceled)\n                    throw new OperationCanceled\n                        Exception();\n            }\n        }\n        catch (TaskCanceledException)\n        {\n            throw new OperationCanceledException();\n        }\n    }\n    ```", "```cs\n    using System.Net;\n    ```", "```cs\n    public static async Task CancelWithCallback()\n    {\n        using CancellationTokenSource tokenSource = new();\n        Console.WriteLine(\"Starting download\");\n        var task = DownloadAudioAsync(tokenSource.Token);\n        tokenSource.Token.WaitHandle.WaitOne\n            (TimeSpan.FromSeconds(3));\n        tokenSource.Cancel();\n        try\n        {\n            await task;\n        }\n        catch (OperationCanceledException ex)\n        {\n            Console.WriteLine($\"Download canceled. \n                Exception: {ex.Message}\");\n        }\n    }\n    ```", "```cs\n    using CancellationPatterns;\n    await CallbackExample.CancelWithCallback();\n    Console.ReadKey();\n    ```", "```cs\n    private static ManualResetEventSlim resetEvent = \n        new(false);\n    ```", "```cs\n    private static void ProcessNumbers(IEnumerable<int> \n        numbers, CancellationToken token)\n    {\n        foreach (var number in numbers)\n        {\n            if (token.IsCancellationRequested)\n            {\n                Console.WriteLine(\"Cancel requested\");\n                token.ThrowIfCancellationRequested();\n            }\n            try\n            {\n                resetEvent.Wait(token);\n            }\n            catch (OperationCanceledException)\n            {\n                Console.WriteLine(\"Operation canceled.\");\n                break;\n            }\n            if (number % 2 == 0)\n                Console.WriteLine($\"Found even number: \n                    {number}\");\n            Thread.Sleep(500);\n        }\n    }\n    ```", "```cs\n    public static async Task CancelWithResetEvent()\n    {\n        using CancellationTokenSource tokenSource = new();\n        var numbers = Enumerable.Range(0, 100000);\n        _ = Task.Run(() => ProcessNumbers(numbers, \n            tokenSource.Token), tokenSource.Token);\n        Console.WriteLine(\"Use x to cancel, p to pause, or \n            s to start or resume,\");\n        Console.WriteLine(\"Use any other key to quit the \n            program.\");\n        bool running = true;\n        while (running)\n        {\n            char key = Console.ReadKey(true).KeyChar;\n            switch (key)\n            {\n                case 'x':\n                    tokenSource.Cancel();\n                    break;\n                case 'p':\n                    resetEvent.Reset();\n                    break;\n                case 's':\n                    resetEvent.Set();\n                    break;\n                default:\n                    running = false;\n                    break;\n            }\n            await Task.Delay(100);\n        }\n    }\n    ```", "```cs\n    using CancellationPatterns;\n    await WaitHandleExample.CancelWithResetEvent();\n    Console.ReadKey();\n    ```", "```cs\n    public static void CancelWithPolling()\n    {\n        using CancellationTokenSource tokenSource = new();\n        CancelWithPolling(tokenSource);\n    }\n    public static void CancelWithPolling\n        (CancellationTokenSource tokenSource)\n    {\n        Task.Run(() => FindSmallXValues(GeneratePoints\n            (1000000), tokenSource.Token), \n                tokenSource.Token);\n        if (Console.ReadKey(true).KeyChar == 'x')\n        {\n            tokenSource.Cancel();\n            Console.WriteLine(\"Press a key to quit\");\n        }\n    }\n    ```", "```cs\n    public static void CancelWithMultipleTokens\n        (CancellationToken parentToken)\n    {\n        using CancellationTokenSource tokenSource = new();\n        using CancellationTokenSource combinedSource =  \n            CancellationTokenSource.CreateLinked\n               TokenSource(parentToken, tokenSource\n                   .Token);\n        PollingExample.CancelWithPolling(combinedSource);\n        Thread.Sleep(1000);\n        tokenSource.Cancel();\n    }\n    ```", "```cs\n    using CancellationPatterns;\n    CancellationTokenSource tokenSource = new();\n    MultipleTokensExample.CancelWithMultipleTokens\n        (tokenSource.Token);\n    Console.ReadKey();\n    ```"]