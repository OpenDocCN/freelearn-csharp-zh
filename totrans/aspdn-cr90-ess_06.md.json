["```cs\nusing System;\nusing System.Data.SqlClient;\npublic class VulnerableDataAccess\n{\n  private string connectionString = \"TheConnectionString\";\n  public void GetUserData(string username)\n  {\n    string query = \"SELECT * FROM Users WHERE\n      Username = '\" + username + \"'\";\n    using (SqlConnection connection = new\n      SqlConnection(connectionString))\n    {\n      SqlCommand command = new SqlCommand(query,\n        connection);\n      try\n      {\n        connection.Open();\n        SqlDataReader reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n          Console.WriteLine(String.Format(\"{0}, {1}\",\n            reader[\"Username\"], reader[\"Email\"]));\n        }\n        reader.Close();\n      }\n      catch (Exception ex)\n      {\n        Console.WriteLine(ex.Message);\n      }\n    }\n  }\n}\n```", "```cs\nSELECT * FROM Users WHERE Username = ''; DROP TABLE Users; --'\n```", "```cs\ndotnet add package Microsoft.AspNetCore.Identity.EntityFrameworkCore -v 8.0.2\n```", "```cs\nnamespace WorkingWithIdentity.Context;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Identity.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore;\nusing WorkingWithIdentity.Model;\npublic class BankingDbContext : IdentityDbContext<IdentityUser>\n{\n    public BankingDbContext(DbContextOptions\n      <BankingDbContext> options) : base(options)\n    {\n    }\n     public DbSet<Account> Accounts { get; set; }\n     public DbSet<Customer> Customers { get; set; }\n     public DbSet<Movement> Movements { get; set; }\n}\n```", "```cs\nbuilder.Services.AddDbContext<BankingDbContext>(\n  options =>   options.UseSqlServer(builder\n  .Configuration.GetConnectionString(\"BankingDbContext\")));\n```", "```cs\ndotnet ef migrations add IdentityModels\n```", "```cs\ndotnet ef database update\n```", "```cs\n    using Dapper;\n    using Microsoft.AspNetCore.Identity;\n    using Microsoft.Data.SqlClient;\n    using Microsoft.EntityFrameworkCore;\n    using Microsoft.EntityFrameworkCore.SqlServer;\n    using WorkingWithIdentity.Context;\n    using WorkingWithIdentity.Model;\n    using WorkingWithIdentity.RouteHandler;\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddAuthentication().AddBearerToken();\n    // Adding the Authorization Services from the Asp.Net Core Identity\n    builder.Services.AddAuthorization();\n    // Configure the Database access for the Asp.Net Core Identity\n    builder.Services.AddIdentityApiEndpoints\n      <IdentityUser>()\n        .AddEntityFrameworkStores<BankingDbContext>();\n    builder.Services.AddEndpointsApiExplorer();\n    builder.Services.AddSwaggerGen();\n    builder.Services.AddDbContext<BankingDbContext>\n      (options => options.UseSqlServer(builder\n        .Configuration.GetConnectionString(\n          \"BankingDbContext\")));\n    builder.Services.AddScoped(_ => new SqlConnection\n      (builder.Configuration.GetConnectionString(\n        \"BankingDbContext\")));\n    var app = builder.Build();\n    // Configure the HTTP request pipeline adding the ASP.NET Core Identity routes\n    app.MapIdentityApi<IdentityUser>();\n    // Configure the HTTP request pipeline.\n    if (app.Environment.IsDevelopment())\n    {\n        app.UseSwagger();\n        app.UseSwaggerUI();\n    }\n    app.UseHttpsRedirection();\n    app.RegisterAccountRoutes();\n    app.RegisterCustomerRoutes();\n    app.MapGet(\"GetAllCustomersUsingDapper\", async(SqlConnection connection) =>\n    {\n      var customers = await connection\n        .QueryAsync<Customer>(\"SELECT Id,\n        Name FROM Customers ORDER BY Name\");\n        return Results.Ok(customers);\n    });\n    app.MapGet(\"GetCustomerByIdUsingDapper\",\n      async(int id, SqlConnection connection) =>\n    {\n        var customer = await connection\n          .QueryFirstOrDefaultAsync<Customer>(\n          \"SELECT Id, Name FROM Customers WHERE\n          Id = @id\", new { id });\n        if (customer is null) return Results.NotFound();\n        return Results.Ok(customer);\n    });\n    app.UseAuthentication();\n    app.UseAuthorization();\n    app.Run();\n    ```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{    options.AddPolicy(\"AdminOnly\",\n     policy => policy.RequireRole(\"Admin\"));\n});\nvar app = builder.Build();\napp.UseAuthorization();\n app.MapGet(\"/admin\", [Authorize(Policy = \"AdminOnly\")]\n  () => {\n    return Results.Ok(\"Welcome, Admin!\");\n});\napp.Run();\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n{\n    options.AddPolicy(\"EmployeeWithExperience\",\n    policy =>\n    {\n        policy.RequireRole(\"Manager\");\n        policy.RequireClaim(\"EmploymentDuration\", \"1Year\");\n    });\n});\nvar app = builder.Build();\napp.UseAuthorization();\napp.MapGet(\"/reports\",\n  [Authorize(Policy = \" EmployeeWithExperience \")]\n  () => {    return Results.Ok(\"Access granted to experienced managers.\");\n});\napp.Run();\n```", "```cs\ndotnet run\n```", "```cs\napp.MapGet(\"/accounts\", async (BankingDbContext\n  dbContext) => {\n    var accounts = await dbContext.Accounts.ToListAsync();\n    return Results.Ok(accounts);\n}).RequireAuthorization();\n```", "```cs\ndotnet run\n```", "```cs\n    {\n      \"email\": \"myuser@myemail.com\",\n      \"password\": \"P4$$word\"\n    }\n    ```", "```cs\ndotnet user-secrets init\n```", "```cs\ndotnet user-secrets set \"ConnectionStrings:BankingDbContext\" \"YOUR DATABASE CONNECTION STRING\"\n```", "```cs\ndotnet user-secrets list\n```", "```cs\ndotnet user-secrets remove \"ConnectionStrings:BankingDbContext\"\n```", "```cs\ndotnet user-secrets clear\n```", "```cs\n// Enforce HTTPS\napp.UseHttpsRedirection();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n// Add services to the container.\nbuilder.Services.AddRazorPages();\n// Configure CORS policy\nbuilder.Services.AddCors(options =>\n{\n    options.AddPolicy(\"AllowSpecificOrigin\",\n        builder =>\n        {\n            builder.WithOrigins(\"https://myapp.com\")\n                   .AllowAnyHeader()\n                   .AllowAnyMethod();\n        });\n});\nvar app = builder.Build();\n// Enforce HTTPS\napp.UseHttpsRedirection();\n// Use CORS policy\napp.UseCors(\"AllowSpecificOrigin\");\napp.UseStaticFiles();\napp.UseRouting();\napp.UseAuthorization();\napp.MapRazorPages();\napp.Run();\n```", "```cs\n@{\nvar inputSimulator = \"<script>\n  alert('Injected Code');</script>\";\n}\n<p>@inputSimulator</p>\n// output: &lt;script&gt;alert('Injected Code');&lt;/script&gt;\n```", "```cs\n<form method=\"post\">\n@Html.AntiForgeryToken()\n<!-- Form fields -->\n<input type=\"submit\" value=\"Submit\" />\n</form>\n```", "```cs\n[ValidateAntiForgeryToken]\npublic IActionResult SubmitForm()\n{\n  // Process the form submission\n  return View();\n}\n```"]