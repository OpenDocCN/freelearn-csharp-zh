- en: Chapter 8. Consulting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will learn how Microsoft Dynamics NAV fits a consultancy
    company. Most consultancy companies have project-related processes. They take
    on larger projects that take a certain time to complete. Some consultancy companies
    also purchase and sell items.
  prefs: []
  type: TYPE_NORMAL
- en: For the projects, the consultancy company needs to keep track of used resources
    and items. Sometimes they can invoice the resource hours they spend one-on-one
    but most of the time they will also take a risk in doing fixed price projects.
    In this case, it is even more important to know if the project was budgeted well
    and ensure money is not lost on the way.
  prefs: []
  type: TYPE_NORMAL
- en: There are many types of companies working this way. Examples are accountancy
    firms and lawyers, but also many companies in the construction business work like
    this.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, we will use an example, a company we are all very familiar
    with, either because of working as an employee, a customer, or maybe even an owner.
    We will look at the business process of a Microsoft Dynamics NAV Partner.
  prefs: []
  type: TYPE_NORMAL
- en: The partner in our case sells Microsoft Dynamics NAV licenses for new projects.
    They also help existing customers in upgrades and support. Lastly, they are selling
    infrastructure solutions, assembling servers, and desktop systems in house.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss four different project scenarios and see how Microsoft Dynamics
    NAV can be used to support those. To do this, we will create some modifications
    along the way. The objects required for this chapter can be downloaded from `http://ftp.packtpub.com/chapter8.fob`.
    After reading this chapter, you will have a good understanding of the possibilities
    and limitations of the Job Module in Microsoft Dynamics NAV, how it fits in with
    the rest of the product, and how it can be expanded safely.
  prefs: []
  type: TYPE_NORMAL
- en: The process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The two main processes for Microsoft Dynamics NAV partners are implementing
    new projects and providing services such as supporting and upgrading to existing
    customers. A third process is selling infrastructure and assembling computer systems
    but this is an extra service, not the core business.
  prefs: []
  type: TYPE_NORMAL
- en: To support the projects (jobs), the company needs people, software licenses,
    and hardware. The people (resources) need to be carefully planned on the projects
    as they are the least flexible part of the company. Hardware (items) and software
    licenses (G/L Accounts) will be purchased from vendors like Microsoft.
  prefs: []
  type: TYPE_NORMAL
- en: The projects can be divided into large and small projects. The larger projects
    are new implementations and upgrades. Smaller projects are usually implementing
    small features and helping users with regular support issues.
  prefs: []
  type: TYPE_NORMAL
- en: Invoicing can be done in various ways. New implementations and small projects
    can be invoiced per billable hour while upgrades are sold at a fixed price. For
    hardware, we will use items. Licenses are invoiced directly to the general ledger.
  prefs: []
  type: TYPE_NORMAL
- en: Large projects also have budgets and planning that needs to be maintained. If
    the budget is fully used and the planning milestones have not been reached, there
    should be a new budget created in order to complete the project.
  prefs: []
  type: TYPE_NORMAL
- en: To support this process, we will use the Jobs functionality with some customizations.
    Projects are called Jobs in Microsoft Dynamics NAV so we will use that term from
    now on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Jobs module has been completely redesigned by Microsoft for Version 5\.
    In this chapter, we will use a lot of the new functionality where we would have
    done customizations in the older versions of Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Fits
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The registration of the Jobs module can be done using the standard functionality
    of Microsoft Dynamics NAV as well as the budgeting and planning.
  prefs: []
  type: TYPE_NORMAL
- en: The standard software also allows us to invoice Jobs both fixed price and on
    time and materials. We can also purchase items for our Jobs. In Microsoft Dynamics
    NAV 2013, a timesheet module has been added to the application, which we will
    use and explain in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Gaps
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Jobs module in Microsoft Dynamics NAV is often referenced as a framework
    that almost always needs some changes. Fortunately, it is designed to be easily
    changed and we will do so to support our processes.
  prefs: []
  type: TYPE_NORMAL
- en: Resource groups
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Although many companies work this way, budgeting for resource groups is not
    possible. We will create a solution for that. We will also make it possible to
    see the total number of planned, used, and invoiced hours.
  prefs: []
  type: TYPE_NORMAL
- en: Item calculation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will create a solution calculating the system assembling. As hardware specifications
    are changing very rapidly, we do not want to create a new item for each system
    we may only sell once or twice.
  prefs: []
  type: TYPE_NORMAL
- en: Issue registration
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our support team needs a single point for registration of all support issues
    for all customers and to follow up their workflow. For this, we will also create
    functionality to register and followup issues.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start creating any new jobs, we should have a look at the following
    data and posting model of the Microsoft Dynamics NAV Jobs module:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting started](img/0365EN_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The starting point is the job table that has **Job Tasks** and **Job Planning
    Lines** that we can use for budgeting and planning. Each job can have its own
    prices.
  prefs: []
  type: TYPE_NORMAL
- en: The **Job Planning Lines** get invoiced through the standard Microsoft Dynamics
    NAV Sales functionality, which then creates **Job Ledger Entries**.
  prefs: []
  type: TYPE_NORMAL
- en: How many jobs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first step is setting up a new job. There can be different angles on setting
    up jobs. This depends on how we want to work with the system. The minimum requirement
    is to have at least one job per bill to customer. This enables us to do the invoicing.
    Some companies use jobs this way to use it as a pre-invoice engine.
  prefs: []
  type: TYPE_NORMAL
- en: Another angle can be to set up new jobs nicely for each project that we do for
    the customer. In our case, this starts with the basic Dynamics NAV implementation.
    When this is finished, we close the job. If the customer has any new requirements,
    we need to start a new job. This way we can keep better track of what issues we
    have outstanding with each customer. The downside of this methodology is that
    it requires some work to set up a new job every time.
  prefs: []
  type: TYPE_NORMAL
- en: Most companies end up with a solution in the middle. It is common to set up
    a new job for larger jobs and to have a job for support issues. This also allows
    us to set up different invoicing strategies for each job. We will use this strategy.
  prefs: []
  type: TYPE_NORMAL
- en: Job Card
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s have a look at the **Job Card** and the important fields there:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Job Card](img/0365EN_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s see these fields in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No.**: This is the unique number of a job. We can use different Number Series
    strategies for this, from simple sequential numbering to linked Number Series
    for different job types or manual numbering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: This field should contain a logical description of the job
    for internal use. Most people will search in this field so make sure to have certain
    rules for naming. This will make searching for old jobs easier in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Bill-to Customer No.**: Each job has one bill-to customer. If we want to
    invoice multiple customers for one job, we need to customize the application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search Description**: By default, this will be populated with the value of
    the description field but can be changed to another value if required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Person Responsible**: This is an informative field indicating who is responsible
    for this job.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Blocked**: If this field is checked, it is not possible to make new entries
    for this job. We use this for closed jobs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Job Posting Group**: This refers to the G/L Accounts that are used for the
    **Work In Progress** (**WIP**) postings. There can be different G/L Accounts for
    different types of Jobs or WIP methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**WIP Method**: Each job can have one WIP method. We will discuss this briefly
    later in this chapter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Status**: The jobs have a limited set of status fields. The only available
    status values are **Planning**, **Quote**, **Order**, and **Completed**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: Most companies want to have more sub statuses for the order phase. The best
    approach for this is to add a new status field that maps with the standard status
    field. This requires minimum changes to the application while creating new workflow
    possibilities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Allow Schedule/Contract Lines**: If this field is not checked, it is not
    possible to create planning lines that have the options **Both Schedule** and
    **Contract**. When planning lines are created they will be split into a schedule
    and a contract line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Starting** **Date** and **Ending Date**: These are informative fields that
    are only used to calculate the currency exchange rates for the job.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Foreign Trade**: In the Jobs module, it is possible to send calculate and
    create invoices in another currency than the local currency. This will multiply
    the complexity of the implementation and should be used carefully.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job task and planning lines
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the job is created, the next step is to create Job Tasks and Planning Lines.
    These can be used in different ways.
  prefs: []
  type: TYPE_NORMAL
- en: Using Job Task lines, we can divide the job into smaller pieces, which we can
    then schedule and invoice. The more detailed the Job Tasks, the better we can
    measure the progress of the job. But the amount of work required to maintain them
    would also be more. Balance is a keyword for success here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Job task and planning lines](img/0365EN_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating Job Tasks and Planning Lines
  prefs: []
  type: TYPE_NORMAL
- en: The Job Tasks can be created with the same structure as the Chart of Accounts,
    meaning the actual Task Lines can be grouped using Begin and End Total lines.
    Each level can be indented for better readability.
  prefs: []
  type: TYPE_NORMAL
- en: The Job Planning Lines are the detail lines of each Job Task. This defines what
    we will do and how this will be invoiced. A Job Planning Line can be linked to
    the master data types Resource, Item, G/L Account, or Text.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Job Tasks and Job Planning Lines can be copied very easily from other jobs.
    This allows us to reuse them and even create template jobs for frequently used
    combinations.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Line Type in the Job Planning Line defines how it will be invoiced. There
    are three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Schedule**: The amounts on this line will only be used for budgeting purposes.
    When invoicing, we need to post one or more job journal lines that will be invoiced
    or we can create another Job Planning Line with the invoice amount. Schedule lines
    should be used when billing for time and materials.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Contract**: This line will be invoiced with the exact amounts. However, the
    amounts do not show up in the budget. This can be used when invoicing fixed price
    jobs in a schedule, for example, 50 percent when signing the contract and 50 percent
    on job completion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Both Schedule and Contract**: This line will be invoiced in exactly the same
    way as the contract lines but the amount will also show up in the budget.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job journal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When the Job Tasks and Job Planning Lines are set up, we can start the job.
    During the job, we will consume resources and items from our company. This should
    be registered using the Job journal. The **Job Journal** is the lowest level of
    the Journal Posting diagram we drafted in [Chapter 1](ch01.html "Chapter 1. Introduction
    to Microsoft Dynamics NAV"), *Introduction to Microsoft Dynamics NAV*, and uses
    the other journals to create the resource, item, and general ledger entries.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a Job Journal Line, the following few fields are particularly
    important for the process:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Job journal](img/0365EN_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s have a look at the fields in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Line Type**: This has the same options as the **Job Planning Line**, **Schedule,
    Contract**, and **Both Schedule and Contract**. When the job journal line should
    be invoiced, the type should be **Contract**. When the job journal line is part
    of a fixed price, the Line Type should be left blank. Then the Line Type is **Schedule**,
    the system will create additional Job Planning Lines of this type, which may corrupt
    our budget for the customer since they are already created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Unit Cost and Unit Price**: These fields will determine the cost of the job
    and price that will be invoiced to the customer if the Line Type is **Contract**.
    This information is also used in the calculation of the work in progress.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Job examples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's go through some different job scenarios to see how we can use this functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter objects
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The chapter objects contain both the changes that we will discuss in this chapter
    as well as the example jobs we will use. After importing `chapter8.fob` as described
    in [Appendix](apa.html "Appendix A. Installation Guide"), *Installation Guide*,
    run page 123.456.700 **Jobs Add-on Setup** and run **Initialise Application**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Chapter objects](img/0365EN_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When this completes, restart the Role Tailored Client. You should now see the
    Project Manager Role Center.
  prefs: []
  type: TYPE_NORMAL
- en: The new implementation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Implementing Microsoft Dynamics NAV 2013 is not an easy task and many things
    need to be taken care of before we can use the product. We will implement Microsoft
    Dynamics NAV for Packt Publishing. The Job for this example is `EXAMPLE1`.
  prefs: []
  type: TYPE_NORMAL
- en: For the implementation, we will create various Job Task groups. Each part of
    the implementation gets a code. As the sorting is done on this field, we will
    create code using numbers and a logical name, for example, `0200\. SETUP` and
    `0210\. FIN`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Leave enough space in the numbers to add additional lines if required. This
    will avoid renaming, which is an expensive task for the database engine and users
    will have to wait until it is completed.
  prefs: []
  type: TYPE_NORMAL
- en: Our consultants will help the customer to install the system, help with the
    setup, and convert the data from the old system. When this is done we will help
    them with testing and train them using Microsoft Dynamics NAV. The consultants
    will be set up in the system as Resources, which are in turn entered into the
    Job Planning Lines.
  prefs: []
  type: TYPE_NORMAL
- en: When everything is working as expected, we can schedule a go-live weekend and
    help them in the first period using the system.
  prefs: []
  type: TYPE_NORMAL
- en: '![The new implementation](img/0365EN_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Invoicing a job like this is done using a budget. We will make a precalculation
    of the number of hours we think are necessary and start with that. During the
    job we need to measure the used budget and compare it with the progress.
  prefs: []
  type: TYPE_NORMAL
- en: Budgeting
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The budget is created using the Job Planning Lines. During this phase of the
    job, we do not yet know which resource will be used for the Job Tasks and it might
    even be done by more than one resource. This is why we want to use Resource Groups
    in our budget.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is not possible in the standard application so we have created a modification,
    which we will discuss at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Budgeting](img/0365EN_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Line Type** of these Job Planning Lines is **Schedule**. This means that
    these lines are just for budgeting and schedule purposes. The system will invoice
    the actual consumption posted in the Job Journal.
  prefs: []
  type: TYPE_NORMAL
- en: The infrastructure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To use Microsoft Dynamics NAV 2013, Packt Publishing needs a new infrastructure.
    Their current systems do not meet the requirements for Microsoft Dynamics NAV
    2013.
  prefs: []
  type: TYPE_NORMAL
- en: For this job, we could create new Job Task Lines in the implementation job,
    but for a clearer overview, we will create a new job, `EXAMPLE2`.
  prefs: []
  type: TYPE_NORMAL
- en: Our company builds and sells its own computer systems. We can build both servers
    and desktop systems. As none of the systems are exactly the same and available
    components switch regularly, we do not want to create an item and a bill of materials
    for each system. Instead we use a calculation system, which we add as a customization
    to Dynamics NAV that allows us to determine a price for a system. For other products
    like switches, routers, printers, and laptops, we use items that we purchase from
    vendors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Job Tasks and Job Planning Lines for this job look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The infrastructure](img/0365EN_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Job Tasks and Job Planning Lines
  prefs: []
  type: TYPE_NORMAL
- en: The installation costs in this job are **Resource Groups** with Line Type Schedule,
    just as in the previous job, so we invoice actual hours spent on the Job.
  prefs: []
  type: TYPE_NORMAL
- en: The other lines are of type **Both Schedule and Contract**. This means we will
    invoice exactly what is in the budget. The Job Journal Lines for these tasks should
    be posted with a blank Line Type.
  prefs: []
  type: TYPE_NORMAL
- en: The upgrade
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Our customer requests an upgrade from Navision Version 3.70 to Microsoft Dynamics
    NAV 2013\. We can do this for a fixed price but we require a fee to analyze the
    system.
  prefs: []
  type: TYPE_NORMAL
- en: For the `EXAMPLE3` job, we can start with a limited number of Job Task Lines,
    just for the quote. When the customer agrees to do the upgrade, we can add new
    Job Task Lines.
  prefs: []
  type: TYPE_NORMAL
- en: Both the quote and the upgrade are a fixed price and posted directly to the
    general ledger. This does not mean we cannot have our resources register the actual
    hours using the Job Journal but the **Line Type** should be blank.
  prefs: []
  type: TYPE_NORMAL
- en: Another part of the upgrade is not done at a fixed price. The system needs a
    redesign, a conversion to SQL Server 2014, and the customer wants additional training
    and support.
  prefs: []
  type: TYPE_NORMAL
- en: '![The upgrade](img/0365EN_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Upgrading for re-design
  prefs: []
  type: TYPE_NORMAL
- en: The fixed price part of the upgrade is invoiced in three phases. When the job
    starts, we invoice 50 percent, and when we deliver the test system, we invoice
    40 percent, and finally 10 percent is invoiced three months after go-live.
  prefs: []
  type: TYPE_NORMAL
- en: This is done using lines of **Both Schedule and Contract** Line Type.
  prefs: []
  type: TYPE_NORMAL
- en: The support team
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For the support team, our policy is to create one job per fiscal year per customer.
    We will use this job, `EXAMPLE4`, to invoice the maintenance of the license and
    all support issues.
  prefs: []
  type: TYPE_NORMAL
- en: The support issues can be both little questions customers call us for, like
    changing a report or a page, or implementing new features that requires only a
    few days' work.
  prefs: []
  type: TYPE_NORMAL
- en: Each issue and new feature will be created as a Job Task Line. The new features
    will be created by the account manager who sells the feature. We can then decide
    if the invoicing is done at a fixed price, using contract lines, or on time and
    materials using schedule lines.
  prefs: []
  type: TYPE_NORMAL
- en: Our support team also needs to use the job system, but we do not want them to
    manually create a new Job Task Line for each support call and we also want them
    to view all outstanding issues for all customers easily. For this, we have created
    a new issue registration system, which we will discuss at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Each issue in the system is linked to a Job Task. When support engineers create
    a new issue, the Job Task Line is automatically generated for them and they can
    use it in our time and billing system.
  prefs: []
  type: TYPE_NORMAL
- en: Time sheets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For all the jobs in our examples, it is critical to have a solid registration
    of resource hours. In the standard Microsoft Dynamics NAV Job application resources
    need either to post a Job Journal for each combination of job, Job Task and Posting
    Date or we can use the new Time Sheet application introduced in Version 2013.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the MSDN page at [http://msdn.microsoft.com/en-us/library/hh175112(v=nav.71).aspx](http://msdn.microsoft.com/en-us/library/hh175112(v=nav.71).aspx),
    you can find more information on how to set up and use Time Sheets in Microsoft
    Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Design pattern
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **Time Sheet** application is layered above the Resource Journal Line and
    is created using Resources and Job Tasks.
  prefs: []
  type: TYPE_NORMAL
- en: '![Design pattern](img/0365EN_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There is an approval process for the person responsible for the job allowing
    them to make corrections.
  prefs: []
  type: TYPE_NORMAL
- en: '![Design pattern](img/0365EN_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The time sheet is designed to be created for each week. The time sheets are
    generated using a process, not by the user. After that the resource can create
    **Time Sheet Line** for each Job Task Line and populate the number of hours each
    day of the week.
  prefs: []
  type: TYPE_NORMAL
- en: '![Design pattern](img/0365EN_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we look at the preceding time sheet, we can see after it updated that **Wednesday**
    is missing 2 hours.
  prefs: []
  type: TYPE_NORMAL
- en: Purchasing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For some jobs, it might be necessary to purchase items specifically for that
    job. In Microsoft Dynamics NAV 2013, the Jobs module was integrated with the Requisition
    Worksheet we looked at in [Chapter 5](ch05.html "Chapter 5. Production"), *Production*
    and [Chapter 6](ch06.html "Chapter 6. Trade"), *Trade*. However, in this example,
    we will create the purchase orders manually like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Purchasing](img/0365EN_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When purchasing for a job, the **Job No.** and **Job Task No.** fields should
    be used. If we set the Job Line Type to contract this item will be invoiced to
    the customer. Usually, this is not required since it should have been in the Job
    Planning Lines already.
  prefs: []
  type: TYPE_NORMAL
- en: Item costing versus work in progress
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After we post this purchase document and navigate from the purchase invoice,
    we can see that the system has created two value entries for this item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Item costing versus work in progress](img/0365EN_08_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is very important for the costing as we discussed in the previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Purchased items for jobs are not calculated as inventory but used for the work
    in progress calculation.
  prefs: []
  type: TYPE_NORMAL
- en: Invoicing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When everything in our jobs is set up as required and the Job Journal is used
    to post the usage, creating the invoices is a simple task.
  prefs: []
  type: TYPE_NORMAL
- en: In the Job Manager Role Center, we can see if a job is due to be invoiced. This
    is done using a flow filter on the **Planning Date** field of the **Job Planning
    Lines**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Invoicing](img/0365EN_08_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Each Job Planning Line has a planning date. This can be used to schedule our
    resources but is far more useful for invoice scheduling. Each Job Planning Line
    that is ready to be invoiced should get the invoice date in the **Planning Date**
    field.
  prefs: []
  type: TYPE_NORMAL
- en: The invoices can then be created using the batch report **Job Create Sales Invoice
    (1093)** but we can also preview the invoice by using the report **Job Suggested
    Billing (1011)**. This report can be started from each job.
  prefs: []
  type: TYPE_NORMAL
- en: '![Invoicing](img/0365EN_08_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Job-Suggested Billing
  prefs: []
  type: TYPE_NORMAL
- en: The sales invoice lines are created using the same description as the Job Planning
    Lines. To clarify information for the customer on the invoice we can use extra
    text lines.
  prefs: []
  type: TYPE_NORMAL
- en: When the invoice is created and posted, the Job Task is updated with the actual
    invoicing information.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating work in progress
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since most jobs are not completed in a day or a week, it is important to know
    the status of each job in time. This can be measured in quantity and financially.
    In quantities, we can see how much of the budget is being used by looking at the
    **Job Task** page. For financial progress, we can calculate the WIP.
  prefs: []
  type: TYPE_NORMAL
- en: WIP calculates the cost we made and the sales we invoiced on the job and creates
    Job WIP Entries for this. This can then be posted to the general ledger if required.
    The WIP amounts depend on the WIP method.
  prefs: []
  type: TYPE_NORMAL
- en: In Microsoft Dynamics NAV, WIP is calculated based on a combination of costs
    and sales as set up in the Job WIP method table.
  prefs: []
  type: TYPE_NORMAL
- en: Let's create an example and calculate the WIP for five example methods.
  prefs: []
  type: TYPE_NORMAL
- en: '| Code | Recognized costs | Recognized sales |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `COMPLETED CONTRACT` | At completion | At completion |'
  prefs: []
  type: TYPE_TB
- en: '| `COST OF SALES` | Cost of sales | Contract (invoiced price) |'
  prefs: []
  type: TYPE_TB
- en: '| `COST VALUE` | Cost value | Contract (invoiced price) |'
  prefs: []
  type: TYPE_TB
- en: '| `PERC. OF COMPLETION` | Usage (total cost) | Percentage of completion |'
  prefs: []
  type: TYPE_TB
- en: '| `SALES VALUE` | Usage (total cost) | Sales value |'
  prefs: []
  type: TYPE_TB
- en: We created a job with a total price of 1000 and total cost of 500\. We used
    4 resource hours' worth 500 and cost 250\. We invoiced nothing.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Recog. cost | Recog. sales | WIP cost | WIP sales |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Cost value | 125 | 0 | 125 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Sales value | 250 | 250 | 0 | 250 |'
  prefs: []
  type: TYPE_TB
- en: '| Cost of sales |   |   | 250 |   |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of completion | 250 | 250 | 0 | 250 |'
  prefs: []
  type: TYPE_TB
- en: '| Completed contract |   |   | 250 |   |'
  prefs: []
  type: TYPE_TB
- en: Now, we send an invoice to the customer for the hours spent. We invoice 500.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Recog. cost | Recog. sales | WIP cost | WIP sales |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Cost value | 375 | 500 | -125 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Sales value | 250 | 250 | 0 | -250 |'
  prefs: []
  type: TYPE_TB
- en: '| Cost of sales | 500 | 500 | -250 |   |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of completion | 250 | 250 | 0 | -250 |'
  prefs: []
  type: TYPE_TB
- en: '| Completed contract |   |   | 250 | -500 |'
  prefs: []
  type: TYPE_TB
- en: In the last example, we will use an item that costs 250 that we cannot invoice.
    We now have 500 costs and 500 sales.
  prefs: []
  type: TYPE_NORMAL
- en: '|   | Recog. cost | Recog. sales | WIP cost | WIP sales |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Cost value | 500 | 500 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Sales value | 250 | 250 | 0 | -250 |'
  prefs: []
  type: TYPE_TB
- en: '| Cost of sales | 500 | 500 | 0 |   |'
  prefs: []
  type: TYPE_TB
- en: '| Percentage of completion | 500 | 500 | 0 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Completed contract |   |   | 500 | -500 |'
  prefs: []
  type: TYPE_TB
- en: When the WIP is positive, it means that we have done more than we invoiced.
    When the WIP is negative, we have invoiced more than we have done.
  prefs: []
  type: TYPE_NORMAL
- en: Each company that uses Microsoft Dynamics NAV should make their own decision
    about what WIP method to use. WIP methods can change for each job and even change
    during a job.
  prefs: []
  type: TYPE_NORMAL
- en: WIP post to general ledger
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some accountants want to post the WIP amounts to the general ledger. The benefit
    of doing this is to have all the financial information in one place for easier
    reporting.
  prefs: []
  type: TYPE_NORMAL
- en: The G/L Accounts for the WIP posting are set up in the Job Posting Group. When
    posting WIP to the general ledger, there is always a reversal posting. When a
    company does monthly reporting, the WIP is posted on the last day of the month
    and reversed on the first day of the next month.
  prefs: []
  type: TYPE_NORMAL
- en: Changing jobs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have used some changes to the Job functionality in order
    to make it work for CRONUS International Ltd. to sell Microsoft Dynamics NAV.
  prefs: []
  type: TYPE_NORMAL
- en: Quantity budgeting
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For some companies, it is very important to know the total number of hours required
    for a job and the number of hours used rather than the exact amounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, we have created new flow fields in the **Job Task** table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Quantity budgeting](img/0365EN_08_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The flow field definition is quite special.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![Quantity budgeting](img/0365EN_08_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The **Totaling** field is for the lines of type **End-Total**. The `ValueIsFilter`
    property ensures that the field will be interpreted as a filter instead of a value.
  prefs: []
  type: TYPE_NORMAL
- en: The result is visible in the Job Task page (1002).
  prefs: []
  type: TYPE_NORMAL
- en: '![Quantity budgeting](img/0365EN_08_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Result of ValueIsFilter property
  prefs: []
  type: TYPE_NORMAL
- en: Resource Groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For scheduling, we have implemented the possibility of using Resource Groups
    in the **Job Planning Lines** as well as **Calculations**. This is done by adding
    two new fields, **Add-on Type** and **Add-on No.**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Resource Groups](img/0365EN_08_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: These fields replace the standard **Type** and **No**. fields on the pages allowing
    users to select these new options. The caption of the new fields matches the replacement
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the C/AL code, we can make sure that when users select the values available
    in the standard product, the normal code is executed. If a user selects a Resource
    Group, we execute our own business logic.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure everything works as expected we use the Type `Text` in the background.
    `Line Type` is set to `Schedule` because we do not want to invoice Resource Groups,
    we just want them to be budgeted.
  prefs: []
  type: TYPE_NORMAL
- en: The `Unit Cost` and `Unit Price` are calculated using the Resource Cost and
    Resource Price tables, which support the use of Resource Groups. This is an inheritance
    from the previous Job functionality prior to Version 5.0.
  prefs: []
  type: TYPE_NORMAL
- en: The page Job Planning List (1007) is changed to show our add-on fields instead
    of the normal fields.
  prefs: []
  type: TYPE_NORMAL
- en: To completely finish this functionality, we would also need to change the reports
    that show the Job Planning Lines and the C/AL code that creates the Job Planning
    Lines when posting a Job Journal Line. This is not done in the example code for
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Calculations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some companies using the Job functionality have a need for flexible calculations.
    In our example, we use it to calculate the price of a computer system but other
    examples are book publishers or construction companies.
  prefs: []
  type: TYPE_NORMAL
- en: They want to know what it costs to create a product without exactly knowing
    which screws, hinges, or color of chipboard is used. For these companies, we designed
    a simple but effective calculation module.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our database, there are two example calculations: a server, and a desktop
    system.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Calculations](img/0365EN_08_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The calculation is designed using a header/line construction with a Number Series
    and a Line Number. The calculation lines are items.
  prefs: []
  type: TYPE_NORMAL
- en: When a new calculation is created some lines are automatically inserted. This
    is done in a C/AL function that is called from the `OnInsert` trigger.
  prefs: []
  type: TYPE_NORMAL
- en: The `OnInsert` trigger will also copy the default `Unit Price` for `Hours` from
    our setup table.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The `InitLines` function creates a calculation line for each item marked as
    **Calculation Item**. This is a new field that we added to the item table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the calculation, we can choose how many we will use from each item and the
    system will calculate the cost and price but also the required number of `Hours`
    that is required. The `Unit Cost` and `Unit Price` are used from the item table.
    `Hours` is calculated from a new field, and we added `Minutes` on the item table
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When we now use the `Calculate` function, the system will generate a total `Unit
    Cost`, `Unit Price`, and `Hours` for this product to be created. Flexibility is
    added to the system by allowing users to correct hours and usage with a percentage.
  prefs: []
  type: TYPE_NORMAL
- en: 'The calculation can be used in a Job Planning Line the same way as the Resource
    Groups earlier; the only difference is that we use the G/L Account type in the
    background to invoice a calculation fixed price. Let''s look at the C/AL code
    in the `OnValidate` trigger of the `Add-On No.` field in the Job Planning Line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: To complete this functionality, we will create a method to use the hours in
    the calculation for the Resource planning. This can be done using Job Planning
    Lines of line type Schedule with no unit cost and unit price.
  prefs: []
  type: TYPE_NORMAL
- en: Issue registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our support team, we have implemented an issue registration solution. This
    allows them to have a simple application where they can register issues for all
    customers and keep track of the status without going in and out of each job.
  prefs: []
  type: TYPE_NORMAL
- en: '![Issue registration](img/0365EN_08_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The issue registration is a header/line construction with a Number Series and
    a line number. The lines can be used to phrase questions and answers.
  prefs: []
  type: TYPE_NORMAL
- en: 'When a support engineer creates a new issue, the system will create the Job
    Task automatically. Let''s have a look at the C/AL code that does that:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The system searches for the last `Job Task` of the type `Posting` in the Job.
    If that cannot be found, it searches for the last `Begin-Total` line.
  prefs: []
  type: TYPE_NORMAL
- en: Assuming this line exists, we create a new `Job Task` line using the `INCSTR`
    function to increment the number. The description is copied to the `Job Task`.
    The support engineers can now register their hours on this `Job Task`.
  prefs: []
  type: TYPE_NORMAL
- en: This piece of C/AL code is very simple but shows how effective a small solution
    can be without even touching any of the standard Microsoft Dynamics NAV objects.
    This is a very safe way of developing.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned how to implement the Job functionality of Microsoft
    Dynamics NAV. We also discussed different strategies of setting up Jobs and Job
    Tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We created several examples with different invoicing methods using the Job Planning
    Lines in a creative way. When purchasing items for jobs, the items are not used
    for costing but in the work in progress calculation we discussed in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Invoicing is done automatically when everything is done as it should be done.
    Lastly, we designed some small enhancements for the Job module without doing big
    changes in the standard application. This was the last chapter about the functionality
    of Microsoft Dynamics NAV. We have discussed all possibilities of the application
    and how they should be changed without risking or breaking anything.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how Microsoft Dynamics NAV can interface
    with other applications.
  prefs: []
  type: TYPE_NORMAL
