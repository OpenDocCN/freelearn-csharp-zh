["```cs\n    [Fact]\n    public async Task Create_Object_OfType_OrderController ()\n    {\n    OrdersController testObject = new \n            OrdersController(null);\n          Assert.NotNull(testObject);\n    }\n    ```", "```cs\n//This is the GetOrderById action method in OrdersController.cs\n```", "```cs\n[HttpGet]\n```", "```cs\n[Route(\"{id}\")]\n```", "```cs\npublic async Task<IActionResult> GetOrderById(string id)\n```", "```cs\n{\n```", "```cs\n     var order = await \n```", "```cs\n       this.orderService.GetOrderByIdAsync(id)\n```", "```cs\n       .ConfigureAwait(false);\n```", "```cs\n     if (order != null)\n```", "```cs\n     {\n```", "```cs\n          return this.Ok(order);\n```", "```cs\n     }\n```", "```cs\n     else\n```", "```cs\n     {\n```", "```cs\n          return this.NotFound();\n```", "```cs\n     }\n```", "```cs\n}\n```", "```cs\n[TestMethod]\n```", "```cs\npublic async Task When_GetOrdersAsync_with_ExistingOrder_receive_OkObjectResult()\n```", "```cs\n{\n```", "```cs\n     var stub = new Mock<IOrderService>();\n```", "```cs\n    stub.Setup(x => x.GetOrderByIdAsync(\n```", "```cs\nIt.IsAny<string>())).Returns(Task.FromResult(new \n```", "```cs\n      OrderDetailsViewModel { Id = \"1\" }));\n```", "```cs\n    OrdersController testObject = new \n```", "```cs\n      OrdersController(stub.Object);\n```", "```cs\n    var order = await \n```", "```cs\n      testObject.GetOrderById(\"1\").ConfigureAwait(false);\n```", "```cs\n    Assert.IsType<OkObjectResult>(order, \n```", "```cs\n      typeof(OkObjectResult));\n```", "```cs\n}\n```", "```cs\n[TestMethod]\n```", "```cs\npublic async Task When_GetOrdersAsync_with_No_ExistingOrder_receive_NotFoundResult()\n```", "```cs\n{\n```", "```cs\n     var stub = new Mock<IOrderService>();\n```", "```cs\nstub.Setup(x => \n```", "```cs\n     x.GetOrderByIdAsync(It.IsAny<string>()))\n```", "```cs\n    .Returns(Task.FromResult<OrderDetailsViewModel>(null));\n```", "```cs\n     OrdersController testObject = new \n```", "```cs\n       OrdersController(stub.Object);\n```", "```cs\n     var order = await testObject\n```", "```cs\n       .GetOrderById(\"1\").ConfigureAwait(false);\n```", "```cs\nAssert.IsType<NotFoundResult>(order, \n```", "```cs\n       typeof(NotFoundResult));\n```", "```cs\n}\n```", "```cs\n[Theory]\n```", "```cs\n[InlineData(999, 19.98)]\n```", "```cs\n[InlineData(2000, 100)]\n```", "```cs\npublic void When_ComputeTotalDiscount_with_OrderTotalAmount(double number, double expectedResult)\n```", "```cs\n{\n```", "```cs\n<<Code removed for brevity>>\n```", "```cs\n   OrdersService testObject = new \n```", "```cs\n     OrdersService(httpClientFactory, mockOptions, mapper, \n```", "```cs\n     mockCacheService.Object);\n```", "```cs\n   var result = testObject.ComputeTotalDiscount(number);\n```", "```cs\n   Assert.Equal(result, expectedResult);\n```", "```cs\n}\n```", "```cs\n    [TestClass]\n    public class HomePageTest\n    {\n       [TestMethod]\n        public void When_Application_Launched_Title\n          _Should_be_ECommerce_Packt()\n    {\n    }\n    }\n    ```", "```cs\n[TestClass]\npublic class HomePageTest\n{\n     ChromeDriver _webDriver = null;\n     [TestInitialize]\npublic void InitializeWebDriver()\n     {\n            var d = new DriverManager();\n            d.SetUpDriver(new ChromeConfig());\n            _webDriver = new ChromeDriver();\n     }\n     [TestMethod]\n     public void When_Application_Launched_Title\n       _Should_be_ECommerce_Packt()\n     {\n     }\n     [TestCleanup]\n     public void WebDriverCleanup()\n     {\n            _webDriver.Quit();\n     }\n}\n```", "```cs\n    [TestMethod]\n    public void When_Application_Launched_Title_Should_be_ECommerce_Packt()\n    {\n         _webDriver.Navigate().GoToUrl(\"https://localhost:\n           44365/\");\n    Assert.AreEqual(\"Ecommerce Packt\", \n           _webDriver.Title);\n    }\n    ```", "```cs\n    [TestMethod]\n    public void When_Searched_For_Item()\n    {\n          _webDriver.Navigate().GoToUrl(\"https://localhost\n            :44365/\");\n          var searchTextBox = \n          _webDriver.FindElement(By.Name(\"SearchString\"));\n           searchTextBox.SendKeys(\"Orange Shirt\");\n           _webDriver.FindElement(By.Name(\"searchButton\"))\n             .Click();\n           var items = \n            _webDriver.FindElements(By.ClassName(\"product-\n            description\"));\n           var invaidProductCout = items.Where(e => e.Text \n            != \"Orange Shirt\").Count();\n           Assert.AreEqual(0, invaidProductCout);\n    }\n    ```"]