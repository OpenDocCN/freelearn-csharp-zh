- en: '*Chapter 9*: Story API – Observing and Reacting to Story Events'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第9章*：故事API – 观察和响应故事事件'
- en: In this chapter, we will explore how changes in a running ink story can trigger
    events in Unity. We will learn how the `ObserveVariable()` and `ObserveVariables()`
    methods of the Story API, as provided by the ink-Unity Integration plugin, allow
    you to prepare functions to react to future events in Unity. We will begin by
    observing a single variable and then move on to learn how to watch multiple values.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探索运行中的ink故事中的变化如何触发Unity中的事件。我们将学习ink-Unity集成插件提供的Story API中的`ObserveVariable()`和`ObserveVariables()`方法如何允许您准备函数以响应Unity中的未来事件。我们将从观察单个变量开始，然后继续学习如何观察多个值。
- en: In [*Chapter 8*](B17597_08_Final_PG_ePub.xhtml#_idTextAnchor123), *Story API
    – Accessing ink Variables and Functions*, the focus was on controlling an ink
    story by calling its functions and changing its values from Unity. This chapter
    reverses the emphasis between the two systems. In this chapter, we will explore
    how narrative events, such as variables changing because of a player's choices,
    can be used to control what information is presented in Unity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第8章*](B17597_08_Final_PG_ePub.xhtml#_idTextAnchor123)，*故事API – 访问ink变量和函数*中，重点是通过对ink故事调用其函数和从Unity更改其值来控制ink故事。本章将这两个系统之间的重点进行了反转。在本章中，我们将探索如何使用叙事事件，例如由于玩家的选择而更改的变量，来控制Unity中呈现的信息。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Listening for variable changes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监听变量变化
- en: Dynamically responding to ink stories
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态响应ink故事
- en: Observing multiple ink values
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 观察多个ink值
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The examples used in this chapter, in the `*.ink` files, can be found on GitHub
    at [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter9](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter9).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例，在`*.ink`文件中，可以在GitHub上找到：[https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter9](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter9)。
- en: Listening for variable changes
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监听变量变化
- en: Variables in ink are global. Once they are created, they can be accessed at
    any point in the story. In [*Chapter 8*](B17597_08_Final_PG_ePub.xhtml#_idTextAnchor123),
    *Story API – Accessing ink Variables and Functions*, we learned how this functionality
    can be used with the `variablesState` property to access or change their values.
    However, instead of directly interfering in a running ink from Unity, we can also
    wait for something to happen in ink and then react in Unity. The verb used for
    this type of approach, as part of the Story API, is called *observing*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ink中的变量是全局的。一旦创建，它们可以在故事的任何位置访问。在第[*第8章*](B17597_08_Final_PG_ePub.xhtml#_idTextAnchor123)，*故事API
    – 访问ink变量和函数*中，我们学习了如何使用`variablesState`属性来访问或更改它们的值。然而，我们不仅可以直接在Unity中干预正在运行的ink，我们还可以等待ink中发生某些事情，然后在Unity中做出反应。这种类型的方法所使用的动词，作为故事API的一部分，被称为*观察*。
- en: When we observe an ink variable, we can write our own rules regarding what should
    happen when its value changes or meets a certain threshold. We are merely *observing*
    its value. What we do because of this observance is up to the developer.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们观察ink变量时，我们可以编写自己的规则，关于当其值发生变化或达到某个阈值时应该发生什么。我们只是在*观察*其值。由于这种观察，我们做什么取决于开发者。
- en: In this topic, we will explore the `ObserveVariable()` method.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将探索`ObserveVariable()`方法。
- en: Recommendation
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 推荐
- en: It is recommended that you create a new Unity 2D project for this topic. Instructions
    regarding how to create a new Unity project and import the ink-Unity Integration
    plugin can be found in [*Chapter 6*](B17597_06_Final_PG_ePub.xhtml#_idTextAnchor092),
    *Adding and Working with the ink Unity Plugin.*
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您为此主题创建一个新的Unity 2D项目。有关如何创建新的Unity项目以及导入ink-Unity集成插件的说明，请参阅[*第6章*](B17597_06_Final_PG_ePub.xhtml#_idTextAnchor092)，*添加和使用ink
    Unity插件*。
- en: 'We will perform the following steps:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤：
- en: In a new Unity project, using the 2D template with the ink-Unity Integration
    plugin imported, create a new, empty game object and name it `InkStory`. This
    game object will hold the `script` component and react to changes in the Ink code.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个新的Unity项目中，使用带有ink-Unity集成插件的2D模板，创建一个新的空游戏对象，并将其命名为`InkStory`。此游戏对象将包含`script`组件，并响应Ink代码中的变化。
- en: Create a new Ink file and name it `InkStoryStepCounter.ink`.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Ink文件，并将其命名为`InkStoryStepCounter.ink`。
- en: Open `InkStoryStepCounter.ink` for editing in Inky and update its contents to
    `Example 1 (InkStoryStepCounter.ink).`
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Inky中打开`InkStoryStepCounter.ink`进行编辑，并更新其内容为`示例1 (InkStoryStepCounter.ink)`。
- en: Create a new `script` component inside the `InkStory` game object. Name the
    created file `InkStoryScript.cs`.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`InkStory`游戏对象内部创建一个新的`script`组件。创建的文件命名为`InkStoryScript.cs`。
- en: Open `InkStoryScript.cs` for editing in Visual Studio.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中打开`InkStoryScript.cs`进行编辑。
- en: Update `InkStoryScript.cs` to `Example 1 (InkStoryScript.cs)`.
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将`InkStoryScript.cs`更新为`示例1 (InkStoryScript.cs)`。
- en: The `ObserveVariable()` method is a new method introduced in this chapter and
    accepts two parameters. The first parameter is the name of a variable to observe
    and the second is a function or a method to call.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ObserveVariable()`方法是在本章中引入的新方法，接受两个参数。第一个参数是要观察的变量的名称，第二个是要调用的函数或方法。'
- en: The code used in this example also incorporates a C# concept known as a `ObserveVariable()`
    method watches a variable in ink. If its value changes at any point, the lambda
    expression will run. This operates outside the normal flow.
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本例中使用的代码还结合了一个名为`ObserveVariable()`的C#概念，该方法在ink中观察一个变量。如果其值在任何时候发生变化，lambda表达式将运行。这发生在正常流程之外。
- en: Associate the compiled Ink JSON file.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关联编译后的Ink JSON文件。
- en: Run the project.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目。
- en: 'When the project is run, the `ObserveVariable()` method, and the third will
    be the text produced as the first option chosen:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目运行时，`ObserveVariable()`方法和第三个将是作为第一个选项产生的文本：
- en: '![Figure 9.1 – The Text output is shown in order of execution in Unity](img/Figure_9.1_B17597.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 在Unity中按执行顺序显示文本输出](img/Figure_9.1_B17597.jpg)'
- en: Figure 9.1 – The Text output is shown in order of execution in Unity
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 在Unity中按执行顺序显示文本输出
- en: The reason why the second message shows the value before the third text of the
    option is because of the execution order. Within the running ink story, the `ObserveVariable()`
    method occurs *before* the text output is produced for the option and returned
    to Unity. The use of the delegated lambda expression occurs outside the normal
    flow of execution in this way. Whenever the value of the observed variable changes,
    the function is immediately called, regardless of any other code happening around
    it at the same time.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第二条消息在选项的第三个文本之前显示值的原因是因为执行顺序。在运行中的ink故事中，`ObserveVariable()`方法发生在文本输出为选项生成并返回Unity之前。这种方式下，委托的lambda表达式出现在正常执行流程之外。每当观察变量的值发生变化时，函数会立即被调用，无论此时周围是否有其他代码正在执行。
- en: In the next section, we will build on this pattern. Often, there are contexts
    in which Unity should only be told a variable has been changed when it happens.
    This frees up the execution time for other tasks in Unity and allows a developer
    to write more reactive code that only runs when needed.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将在此基础上进行构建。通常，在Unity中，只有在变量发生变化时才应该通知Unity，这样可以释放执行时间，让Unity执行其他任务，并允许开发者编写更响应式的代码，只有在需要时才运行。
- en: Dynamically responding to ink stories
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态响应ink故事
- en: In Unity, multiple methods are called as part of the normal execution cycle
    when a project runs. Often, methods such as `Update()`, a common part of behavior
    scripts in Unity, include many lines of code. Even a method such as `FixedUpdate()`,
    called at the end of the physics calculations for each cycle in a running project,
    might include multiple parts. Any code that depends on other systems, such as
    those communicating with ink, can also add extra time per cycle.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，当项目运行时，作为正常执行周期的一部分，会调用多个方法。通常，如`Update()`这样的方法，是Unity中行为脚本的一个常见部分，包含许多行代码。甚至像`FixedUpdate()`这样的方法，在每个运行项目中的物理计算周期结束时被调用，也可能包含多个部分。任何依赖于其他系统（如与ink通信的系统）的代码也可以在每个周期中增加额外的时间。
- en: The use of the `ObserveVariable()` method allows data from ink to only update
    Unity when needed. Because the Story API will only call the delegated function
    when necessary, Unity will also only get the data when there is a change it needs
    to know about when it needs to know about it. This will also happen outside the
    use of an `Update()` method or even a `FixedUpdate()` method in Unity.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`ObserveVariable()`方法允许ink的数据只在需要时更新Unity。因为Story API只有在必要时才会调用委托函数，所以Unity也只有在需要知道变化时才会获取数据。这也会发生在Unity中`Update()`方法或`FixedUpdate()`方法之外的使用。
- en: In this section, we will examine how the `ObserveVariable()` method operates
    outside of other methods as part of Unity. It will only call the delegated function
    when a value changes allowing a dynamic response in Unity.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将检查`ObserveVariable()`方法如何在Unity外部作为其他方法的一部分运行。它只会在值发生变化时调用委托函数，从而允许Unity中动态响应。
- en: 'Return to the project created in the previous section, and perform the following
    steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 返回上一节创建的项目，并执行以下步骤：
- en: Update the `InkStoryScript.cs` file to `Example 2 (InkStoryScript.cs)`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`InkStoryScript.cs`文件更新为`示例 2 (InkStoryScript.cs)`。
- en: Within the `Update()` method, four different actions are taking place.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Update()`方法中，正在进行四个不同的动作。
- en: The *first* is the increase in the variable time with the most recent `Time.deltaTime`,
    which is the number of milliseconds between cycles as measured in a decimal (float)
    number. The *second* is a conversion between its float value into an integer.
    This operation removes the decimal part of the number. The *third* action is a
    mathematical operation called `%`, can be used to find the remainder from division.
    This operation is called *modulo*. However, many programming languages also use
    the term *remainder operator*. When this operation is performed, it will determine
    how many times one number can be divided into another. In this case, using the
    remainder of `60`, the `seconds` variable will always be equal to the number of
    seconds that have passed since the project began, as divided by the `time` variable.
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**第一**个是变量时间的增加，使用最新的`Time.deltaTime`，这是在十进制（float）数字中测量的循环之间的毫秒数。**第二**个是将其浮点值转换为整数。这个操作移除了数字的小数部分。**第三**个动作是一个称为`%`的数学运算，可以用来找到除法的余数。这个操作称为**模运算**。然而，许多编程语言也使用术语**余数运算符**。当这个操作执行时，它将确定一个数字可以被另一个数字除多少次。在这种情况下，使用`60`的余数，`seconds`变量将始终等于自项目开始以来经过的秒数，除以`time`变量。'
- en: The *fourth* action within the `Update()` method is the assignment of the `seconds`
    variable to the number of seconds, as defined by the previously explained actions.
    In every cycle in Unity, this number will be updated, and the `seconds` variable
    will always be up to date.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Update()`方法中的**第四**个动作是将`seconds`变量赋值为秒数，这是由之前解释的动作定义的。在Unity的每个循环中，这个数字都会更新，`seconds`变量将始终保持最新。
- en: One final action takes place in the delegated function, that is, the use of
    the `Destroy()` method. Within the code, once the value of the `steps` ink variable
    is equal to `3`, as determined by Unity, it will remove a button from the scene.
    This helps to keep the control of the button connected to a value changed outside
    of Unity. Once the ink variable changes and is reported to Unity, the button is
    removed.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在委托函数中发生最后一个动作，即使用`Destroy()`方法。在代码中，一旦`steps`ink变量的值等于由Unity确定的`3`，它将从一个场景中移除一个按钮。这有助于保持按钮与Unity外部更改的值之间的连接。一旦ink变量更改并被报告给Unity，按钮就会被移除。
- en: On the last line of the `Start()` method, a button is given a listener function
    for its `onClick` event. When the button is clicked on, any functions associated
    with the listeners will be called. In this example, clicking on the button will
    call the new `TakeStep()` method. This will load the next text content up to the
    next weave encountered in the ink code and then choose the first (`0`) option
    within the weave. This will cause the ink code to loop internally.
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Start()`方法的最后一行，为按钮的`onClick`事件提供了一个监听函数。当按钮被点击时，与监听器关联的任何函数都将被调用。在这个例子中，点击按钮将调用新的`TakeStep()`方法。这将加载下一个文本内容，直到遇到ink代码中的下一个编织点，然后选择编织中的第一个（`0`）选项。这将导致ink代码内部循环。
- en: With the code created, two more steps are required before the project can be
    played. First, a new `Button` game object needs to be added to the project. Then,
    once the `Button` game object exists, it must be associated with the `InkStory`
    property as part of the new code.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在创建代码后，还需要两个步骤才能播放项目。首先，需要向项目中添加一个新的`Button`游戏对象。然后，一旦`Button`游戏对象存在，它必须与新代码中的`InkStory`属性相关联。
- en: Create a new `Button` game object in Unity.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中创建一个新的`Button`游戏对象。
- en: Associate the `Button` game object with the `Button Step` property.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Button`游戏对象与`Button Step`属性关联。
- en: Play the project.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放项目。
- en: The created `Button` game object appears at the bottom of the scene. Clicking
    on the `Button` game object four times will cause it to disappear, and a message
    will appear in the **Console** window:![Figure 9.2 – A message in the Console
    window generated by a delegated function
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建的`Button`游戏对象出现在场景底部。点击`Button`游戏对象四次将导致其消失，并在**控制台**窗口中显示一条消息：![图9.2 – 由委托函数生成的控制台窗口中的消息
- en: '](img/Figure_9.2_B17597.jpg)'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_9.2_B17597.jpg)'
- en: Figure 9.2 – A message in the Console window generated by a delegated function
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.2 – 由委托函数生成的控制台窗口中的消息
- en: Stop the project.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止项目。
- en: When the project first started, the `Update()` method of the code was called
    during each cycle. Internally, it updated the `time` and `seconds` variables in
    the Unity code. Whenever the `Button` game object was clicked on, it progressed
    the ink code, which looped itself internally. Because of the use of the `ObserveVariable()`
    method, any time the ink variable steps were updated, it called the delegated
    function and tested the new value passed to it. Once it reached `3` (based on
    a total of four clicks to move it from `0` to `3`), the delegated function created
    a message in the `Button` game object.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当项目首次启动时，代码的`Update()`方法在每个周期中都会被调用。在内部，它更新Unity代码中的`time`和`seconds`变量。每当点击`Button`游戏对象时，它就会推进墨迹代码，该代码会内部循环。由于使用了`ObserveVariable()`方法，每当墨迹变量步骤更新时，它都会调用委托函数并测试传递给它的新值。一旦达到`3`（基于总共四次点击将其从`0`移动到`3`），委托函数就在`Button`游戏对象中创建了一条消息。
- en: The example used in this section follows a common pattern where Unity performs
    its own calculations as part of a method, such as `Update()`, and dynamically
    responds to changes in an ink story as they happen. Instead of potentially checking
    the `steps` ink variable as part of the `variablesState` property every cycle,
    and wasting time if the value has not changed, the delegated function allows Unity
    to only act when needed. For more complicated projects, this is the preferred
    approach, and generally, it produces faster projects.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中使用的示例遵循一个常见的模式，其中Unity在方法（如`Update()`）中执行自己的计算，并动态响应墨迹故事的变化。而不是在每个周期中检查`steps`墨迹变量是否作为`variablesState`属性的一部分发生变化，如果值没有变化，则会浪费时间，委托函数允许Unity仅在需要时采取行动。对于更复杂的项目，这是首选的方法，并且通常会产生更快的项目。
- en: 'More than a single variable can be observed in ink. Depending on the complexity
    of design, a Unity project might be interested in observing multiple ink values
    and updating onscreen areas with information on story progression or the current
    statistics of the player. For these contexts, a different method is needed: `ObserveVariables()`.
    In the next section, we will demonstrate how to work with this method.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在墨迹中可以观察到多个变量。根据设计的复杂性，Unity项目可能对观察多个墨迹值并更新屏幕区域以显示故事进展或玩家当前统计数据感兴趣。在这些情况下，需要不同的方法：`ObserveVariables()`。在下一节中，我们将演示如何使用此方法。
- en: Observing multiple ink values
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 观察多个墨迹值
- en: Along with the `ObserveVariable()` method is a sister method named `ObserveVariables()`.
    However, while the `ObserveVariable()` method accepts the name of a variable and
    a delegate function, the `ObserveVariables()` method accepts an `IList<string>`
    of variable names and a delegate function. Instead of responding when a single
    variable is changed, its delegate function is called when any of the variables
    passed as a list to the method are changed. While slightly more complicated to
    set up, the `ObserveVariables()` method provides the functionality to observe
    multiple ink variables.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ObserveVariable()`方法并列的是另一个名为`ObserveVariables()`的姐妹方法。然而，虽然`ObserveVariable()`方法接受变量名和一个委托函数，但`ObserveVariables()`方法接受一个`IList<string>`类型的变量名列表和一个委托函数。它的委托函数在传递给方法的列表中的任何变量发生变化时被调用，而不是响应单个变量的变化。虽然设置起来稍微复杂一些，但`ObserveVariables()`方法提供了观察多个墨迹变量的功能。
- en: Recommendation
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 建议
- en: It is recommended that you create a new Unity 2D project for this section. Instructions
    regarding how to create a new Unity project and import the ink-Unity Integration
    plugin can be found in [*Chapter 6*](B17597_06_Final_PG_ePub.xhtml#_idTextAnchor092),
    *Adding and Working with the ink-Unity Integration Plugin*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您为这一节创建一个新的Unity 2D项目。有关如何创建新的Unity项目以及导入ink-Unity集成插件的说明，请参阅[*第6章*](B17597_06_Final_PG_ePub.xhtml#_idTextAnchor092)，*添加并使用ink-Unity集成插件*。
- en: 'Perform the following steps:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤：
- en: In a new Unity 2D project with the ink-Unity Integration plugin imported, create
    a new, empty game object and name it `InkStory`. This game object will hold the
    `Script` component and react to any changes in the ink code.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入 ink-Unity Integration 插件的新的 Unity 2D 项目中，创建一个新的空游戏对象并将其命名为 `InkStory`。这个游戏对象将包含
    `Script` 组件，并能够对 ink 代码中的任何更改做出反应。
- en: Create a new ink file and name it `InkStoryPlayerStatistics.ink`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 ink 文件，并将其命名为 `InkStoryPlayerStatistics.ink`。
- en: Open the `InkStoryPlayerStatistics.ink` file for editing in Inky and update
    its content to `Example` `3` `(InkStoryPlayerStatistics.ink)`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Inky 中打开 `InkStoryPlayerStatistics.ink` 文件进行编辑，并将其内容更新为 `Example` `3` `(InkStoryPlayerStatistics.ink)`。
- en: Create a new `script` component inside the `InkStory` game object. Name the
    created file `InkStoryPlayerStatisticsScript.cs`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InkStory` 游戏对象内部创建一个新的 `script` 组件。将创建的文件命名为 `InkStoryPlayerStatisticsScript.cs`。
- en: Open the created `InkStoryPlayerStatisticsScript.cs` file in Visual Studio.
    Update it to `Example` `3` `(` `InkStoryPlayerStatisticsScript.cs)`.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中打开创建的 `InkStoryPlayerStatisticsScript.cs` 文件。将其更新为 `Example`
    `3` `(` `InkStoryPlayerStatisticsScript.cs)`。
- en: The updated code begins by setting up the Story API. It does this by creating
    a new object based on the `Story` class. Next, a `List<string>` is created. This
    is used as a *list* of the variable names based on their string values. After
    creating the list, two values are added to it in an order, based on the names
    of the `mental_health` and `physcial_health` ink variables. This created list
    is then passed to the `ObserveVariables()` method, and a second parameter, that
    is, a delegated function in the form of a lambda expression, is used.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新后的代码首先设置 Story API。它是通过基于 `Story` 类创建一个新对象来做到这一点的。接下来，创建一个 `List<string>`。这个列表用于基于它们的字符串值作为变量名称的列表。在创建列表后，根据
    `mental_health` 和 `physcial_health` ink 变量的名称顺序向其中添加两个值。然后，将创建的列表传递给 `ObserveVariables()`
    方法，并使用第二个参数，即 lambda 表达式形式的委托函数。
- en: The `Start()` method ends with a call to the created `ProgressStory()` method.
    Inside this created method, the story is progressed programmatically by using
    the `ContinueMaximally()` and `ChooseChoiceIndex()` methods. The first method
    loads all of the text content up to the first weave, while the second method selects
    the first (`0`) option in the weave. The final, second use of the `ContinueMaximally()`
    method loads the resulting text within the Ink code and is needed to cause the
    variable to change.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Start()` 方法以调用创建的 `ProgressStory()` 方法结束。在这个创建的方法内部，通过使用 `ContinueMaximally()`
    和 `ChooseChoiceIndex()` 方法程序化地推进故事。第一个方法加载所有文本内容直到第一个编织点，而第二个方法选择编织中的第一个（`0`）选项。最后，`ContinueMaximally()`
    方法的第二次使用在 Ink 代码中加载结果文本，并且这是为了使变量发生变化。'
- en: Associate the compiled Ink JSON file with the `InkStory` game object.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编译后的 Ink JSON 文件与 `InkStory` 游戏对象关联。
- en: Run the project.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目。
- en: When the project starts, it will programmatically progress the ink story used
    within this section. As a result, it will produce a message in the `List<string>`
    that was passed to the `ObserveVariables()` method. However, only one of them
    was changed because of the ink story progression. As a result, the variable changed,
    and its new value was passed back to Unity. When the change happened, the delegated
    function was called with the second parameter, the name of the variable (`variableName`),
    and its new value (`newValue`).
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当项目启动时，它将程序化地推进本节中使用的 ink 故事。因此，它将在传递给 `ObserveVariables()` 方法的 `List<string>`
    中生成一条消息。然而，由于 ink 故事的推进，只有一个变量发生了变化。因此，变量发生了变化，其新值被传递回 Unity。当变化发生时，委托函数被调用，带有第二个参数，即变量的名称（`variableName`）和其新值（`newValue`）。
- en: The `ObserveVariables()` method works similarly to its sister `ObserveVariable()`
    method. Both respond with the name of the variable and the changed value as soon
    as they happen in ink. The major difference between them is in their first parameter.
    The `ObserveVariables()` method accepts the name of a single variable name in
    ink, and the `ObserveVariables()` method is a list of which variables to observe
    and then respond to using the delegated function.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ObserveVariables()` 方法与它的姐妹方法 `ObserveVariable()` 方法工作方式类似。两者在 Ink 中发生时立即响应，返回变量的名称和更改后的值。它们之间的主要区别在于第一个参数。`ObserveVariables()`
    方法接受 Ink 中单个变量的名称，而 `ObserveVariables()` 方法是一个变量列表，用于观察并使用委托函数响应。'
- en: Stop the project.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止项目。
- en: This section focused on the use of the `ObserveVariables()` method, echoing
    the pattern in the previous section where we used the `ObserveVariable()` sister
    method. In general, either approach offers a way to control how Unity reacts to
    ink, shifting the control of information between the two systems. Along with the
    `variablesState` property, the different approaches in this chapter, as covered
    in [*Chapter 8*](B17597_08_Final_PG_ePub.xhtml#_idTextAnchor123), *Story API –
    Accessing ink Variables and Functions*, provide access to the variables in ink.
    They can be used in a project, depending on the needs of the developer, to either
    drive a Unity project more from the ink side or directly change values on the
    ink side from the Unity code as needed.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本章本节重点介绍了`ObserveVariables()`方法的使用，与上一节中我们使用的`ObserveVariable()`姐妹方法模式相呼应。一般来说，两种方法都提供了一种控制Unity如何响应ink的方式，在两个系统之间转换信息控制。与`variablesState`属性一起，本章中涵盖的不同方法，如在第[*第8章*](B17597_08_Final_PG_ePub.xhtml#_idTextAnchor123)“Story
    API – Accessing ink Variables and Functions”中所述，提供了对ink中变量的访问。根据开发者的需求，它们可以在项目中使用，要么更多地从ink端驱动Unity项目，要么根据需要直接从Unity代码在ink端更改值。
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored multiple examples. First, we started with the `ObserveVariable()`
    method and watched only one variable. In the second section, we dynamically responded
    to ink stories in Unity. Using delegated functions, we learned how parts of a
    piece of code will only be called when an ink variable changes. In the third section,
    we looked at the use of the `ObserveVariables()` method to watch multiple variables
    specified by name.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了多个示例。首先，我们从`ObserveVariable()`方法开始，只观察一个变量。在第二部分，我们动态地响应Unity中的ink故事。使用委托函数，我们学习了当ink变量发生变化时，代码的一部分才会被调用。在第三部分，我们探讨了使用`ObserveVariables()`方法来观察按名称指定的多个变量。
- en: In [*Chapter 10*](B17597_10_Final_PG_ePub.xhtml#_idTextAnchor145), *Dialogue
    Systems with ink*, we will move away from the individual properties and methods
    of the Story API and start to combine functionality into more complex use cases.
    Combining parts of the Unity API introduced in [*Chapter 7*](B17597_07_Final_PG_ePub.xhtml#_idTextAnchor106),
    *Unity API – Making Choices and Story Progression*, along with the `ObserveVariable()`
    method covered in this chapter, we will examine how to create different dialogue
    systems.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第10章*](B17597_10_Final_PG_ePub.xhtml#_idTextAnchor145)，“使用墨迹的对话系统”中，我们将从Story
    API的个体属性和方法转向开始，将功能组合成更复杂的用例。结合在第[*第7章*](B17597_07_Final_PG_ePub.xhtml#_idTextAnchor106)“Unity
    API – Making Choices and Story Progression”中引入的Unity API的部分，以及本章中涵盖的`ObserveVariable()`方法，我们将探讨如何创建不同的对话系统。
- en: Questions
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the action of *observing*, and how does it apply to the methods provided
    by the `Story` class?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: “观察”的动作是什么，它如何应用于`Story`类提供的方法？
- en: What roles do delegated functions serve when working with the `ObserveVariable()`
    and `ObserveVariables()` methods?
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用`ObserveVariable()`和`ObserveVariables()`方法时，委托函数扮演什么角色？
- en: What is the difference between the `ObserveVariable()` method and the `ObserveVariables()`
    method?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ObserveVariable()`方法和`ObserveVariables()`方法之间有什么区别？'
- en: What is the difference between accessing ink variables using the `variablesState`
    property and using the `ObserveVariable()` method or the `ObserveVariables()`
    method?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`variablesState`属性访问ink变量和使用`ObserveVariable()`方法或`ObserveVariables()`方法之间有什么区别？
