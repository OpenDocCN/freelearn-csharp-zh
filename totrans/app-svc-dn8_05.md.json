["```cs\n    partial class Program\n    {\n      private static void SectionTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkYellow;\n        WriteLine($\"*** {title}\");\n        ForegroundColor = previousColor;\n      }\n      private static void TaskTitle(string title)\n      {\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.Green;\n        WriteLine($\"{title}\");\n        ForegroundColor = previousColor;\n      }\n      private static void OutputThreadInfo()\n      {\n        Thread t = Thread.CurrentThread;\n        ConsoleColor previousColor = ForegroundColor;\n        ForegroundColor = ConsoleColor.DarkCyan;\n        WriteLine(\n          \"Thread Id: {0}, Priority: {1}, Background: {2}, Name: {3}\",\n          t.ManagedThreadId, t.Priority, t.IsBackground, t.Name ?? \"null\");\n        ForegroundColor = previousColor;\n      }\n    } \n    ```", "```cs\n    partial class Program\n    {\n      private static void MethodA()\n      {\n        TaskTitle(\"Starting Method A...\");\n        OutputThreadInfo();\n        Thread.Sleep(3000); // Simulate three seconds of work.\n        TaskTitle(\"Finished Method A.\");\n      }\n      private static void MethodB()\n      {\n        TaskTitle(\"Starting Method B...\");\n        OutputThreadInfo();\n        Thread.Sleep(2000); // Simulate two seconds of work.\n        TaskTitle(\"Finished Method B.\");\n      }\n      private static void MethodC()\n      {\n        TaskTitle(\"Starting Method C...\");\n        OutputThreadInfo();\n        Thread.Sleep(1000); // Simulate one second of work.\n        TaskTitle(\"Finished Method C.\");\n      }\n    } \n    ```", "```cs\n    using System.Diagnostics; // To use Stopwatch.\n    OutputThreadInfo();\n    Stopwatch timer = Stopwatch.StartNew();\n    SectionTitle(\"Running methods synchronously on one thread.\"); \n    MethodA();\n    MethodB();\n    MethodC();\n    WriteLine($\"{timer.ElapsedMilliseconds:#,##0}ms elapsed.\"); \n    ```", "```cs\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    *** Running methods synchronously on one thread.\n    Starting Method A...\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Finished Method A.\n    Starting Method B...\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Finished Method B.\n    Starting Method C...\n    Thread Id: 1, Priority: Normal, Background: False, Name: null\n    Finished Method C.\n    6,028ms elapsed. \n    ```", "```cs\n    Stopwatch timer = Stopwatch.StartNew();\n    **/***\n    SectionTitle(\"Running methods synchronously on one thread.\");\n    MethodA();\n    MethodB();\n    MethodC();\n    ***/**\n    **SectionTitle(****\"Running methods asynchronously on multiple threads.\"****);** \n    **Task taskA =** **new****(MethodA);**\n    **taskA.Start();**\n    **Task taskB = Task.Factory.StartNew(MethodB);** \n    **Task taskC = Task.Run(MethodC);**\n    WriteLine($\"{timer.ElapsedMilliseconds:#,##0}ms elapsed.\"); \n    ```", "```cs\n    *** Running methods asynchronously on multiple threads.\n    Starting Method A...\n    Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker\n    Starting Method C...\n    Thread Id: 7, Priority: Normal, Background: True, Name: .NET TP Worker\n    Starting Method B...\n    Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker\n    6ms elapsed. \n    ```", "```cs\n    Task[] tasks = { taskA, taskB, taskC };\n    Task.WaitAll(tasks); \n    ```", "```cs\n    Starting Method A...\n    Starting Method B...\n    Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker\n    Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker\n    Starting Method C...\n    Thread Id: 7, Priority: Normal, Background: True, Name: .NET TP Worker\n    Finished Method C.\n    Finished Method B.\n    Finished Method A.\n    3,013ms elapsed. \n    ```", "```cs\n    private static decimal CallWebService()\n    {\n      TaskTitle(\"Starting call to web service...\");\n      OutputThreadInfo();\n      Thread.Sleep(Random.Shared.Next(2000, 4000));\n      TaskTitle(\"Finished call to web service.\");\n      return 89.99M;\n    }\n    private static string CallStoredProcedure(decimal amount)\n    {\n      TaskTitle(\"Starting call to stored procedure...\");\n      OutputThreadInfo();\n      Thread.Sleep((Random.Shared.Next(2000, 4000));\n      TaskTitle(\"Finished call to stored procedure.\");\n      return $\"12 products cost more than {amount:C}.\";\n    } \n    ```", "```cs\n    **SectionTitle(****\"Passing the result of one task as an input into another.\"****);** \n    **Task<****string****> taskServiceThenSProc = Task.Factory**\n     **.StartNew(CallWebService)** **// returns Task<decimal>**\n     **.ContinueWith(previousTask =>** **// returns Task<string>**\n     **CallStoredProcedure(previousTask.Result));**\n    **WriteLine(****$\"Result:** **{taskServiceThenSProc.Result}****\"****);**\n    WriteLine($\"{timer.ElapsedMilliseconds:#,##0}ms elapsed.\"); \n    ```", "```cs\n    Starting call to web service...\n    Thread Id: 4, Priority: Normal, Background: True, Name: .NET TP Worker\n    Finished call to web service.\n    Starting call to stored procedure...\n    Thread Id: 6, Priority: Normal, Background: True, Name: .NET TP Worker\n    Finished call to stored procedure.\n    Result: 12 products cost more than Â£89.99.\n    5,463ms elapsed. \n    ```", "```cs\n    private static void OuterMethod()\n    {\n      TaskTitle(\"Outer method starting...\");\n      Task innerTask = Task.Factory.StartNew(InnerMethod);\n      TaskTitle(\"Outer method finished.\");\n    }\n    private static void InnerMethod()\n    {\n      TaskTitle(\"Inner method starting...\");\n      Thread.Sleep(2000);\n      TaskTitle(\"Inner method finished.\");\n    } \n    ```", "```cs\n    SectionTitle(\"Nested and child tasks\");\n    Task outerTask = Task.Factory.StartNew(OuterMethod);\n    outerTask.Wait();\n    WriteLine(\"Console app is stopping.\"); \n    ```", "```cs\n    Outer method starting...\n    Inner method starting...\n    Outer method finished.\n    Console app is stopping. \n    ```", "```cs\n    Outer method starting...\n    Outer method finished.\n    Console app is stopping. \n    ```", "```cs\n    private static void OuterMethod()\n    {\n      TaskTitle(\"Outer method starting...\");\n      Task innerTask = Task.Factory.StartNew(InnerMethod**,**\n     **TaskCreationOptions.AttachedToParent**);\n      TaskTitle(\"Outer method finished.\");\n    } \n    ```", "```cs\n    Outer method starting...\n    Inner method starting...\n    Outer method finished.\n    Inner method finished.\n    Console app is stopping. \n    ```", "```cs\n    Outer method starting...\n    Outer method finished.\n    Inner method starting...\n    Inner method finished.\n    Console app is stopping. \n    ```", "```cs\npublic interface IValidation\n{\n  Task<bool> IsValidXmlTagAsync(this string input);\n} \n```", "```cs\nusing System.Text.RegularExpressions;\nnamespace Packt.Shared;\npublic static class StringExtensions : IValidation\n{\n  public static Task<bool> IsValidXmlTagAsync(this string input)\n  {\n    if (input == null)\n    {\n      return Task.FromException<bool>(\n        new ArgumentNullException($\"Missing {nameof(input)} parameter\"));\n    }\n    if (input.Length == 0)\n    {\n      return Task.FromException<bool>(\n        new ArgumentException($\"{nameof(input)} parameter is empty.\"));\n    }\n    return Task.FromResult(Regex.IsMatch(input,\n      @\"^<([a-z]+)([^<]+)*(?:>(.*)<\\/\\1>|\\s+\\/>)$\"));\n  }\n} \n```", "```cs\npublic Task DeleteCustomerAsync()\n{\n  // ...\n  return Task.CompletedTask;\n} \n```", "```cs\n    public static class SharedObjects\n    {\n      public static string? Message; // a shared resource\n    } \n    ```", "```cs\n    partial class Program\n    {\n      private static void MethodA()\n      {\n        for (int i = 0; i < 5; i++)\n        {\n          // Simulate two seconds of work on the current thread.\n          Thread.Sleep(Random.Shared.Next(2000));\n          // Concatenate the letter \"A\" to the shared message.\n          SharedObjects.Message += \"A\";\n          // Show some activity in the console output.\n          Write(\".\");\n        }\n      }\n      private static void MethodB()\n      {\n        for (int i = 0; i < 5; i++)\n        {\n          Thread.Sleep(Random.Shared.Next(2000));\n          SharedObjects.Message += \"B\";\n          Write(\".\");\n        }\n      }\n    } \n    ```", "```cs\n    using System.Diagnostics; // To use Stopwatch.\n    WriteLine(\"Please wait for the tasks to complete.\");\n    Stopwatch watch = Stopwatch.StartNew();\n    Task a = Task.Factory.StartNew(MethodA);\n    Task b = Task.Factory.StartNew(MethodB);\n\n    Task.WaitAll(new Task[] { a, b });\n    WriteLine();\n    WriteLine($\"Results: {SharedObjects.Message}.\");\n    WriteLine($\"{watch.ElapsedMilliseconds:N0} elapsed milliseconds.\"); \n    ```", "```cs\n    Please wait for the tasks to complete.\n    ..........\n    Results: BABABAABBA.\n    5,753 elapsed milliseconds. \n    ```", "```cs\n    public static object Conch = new(); // A shared object to lock. \n    ```", "```cs\n    **lock** **(SharedObjects.Conch)**\n    **{**\n      for (int i = 0; i < 5; i++)\n      {\n        Thread.Sleep(Random.Shared.Next(2000));\n        SharedObjects.Message += \"B\";\n        Write(\".\");\n      }\n    **}** \n    ```", "```cs\n    Please wait for the tasks to complete.\n    ..........\n    Results: BBBBBAAAAA.\n    10,345 elapsed milliseconds. \n    ```", "```cs\nlock (SharedObjects.Conch)\n{\n  // Work with a shared resource.\n} \n```", "```cs\ntry\n{\n  Monitor.Enter(SharedObjects.Conch);\n  // Work with a shared resource.\n}\nfinally\n{\n  Monitor.Exit(SharedObjects.Conch);\n} \n```", "```cs\n    **try**\n    **{**\n    **if** **(Monitor.TryEnter(SharedObjects.Conch, TimeSpan.FromSeconds(****15****)))**\n     **{**\n        for (int i = 0; i < 5; i++)\n        {\n          Thread.Sleep(Random.Shared.Next(2000));\n          SharedObjects.Message += \"B\";\n          Write(\".\");\n        }\n     **}**\n    **else**\n     **{**\n     **WriteLine(****\"Method B timed out when entering a monitor on conch.\"****);**\n     **}**\n    **}**\n    **finally**\n    **{**\n     **Monitor.Exit(SharedObjects.Conch);**\n    **}** \n    ```", "```cs\n// event delegate field\npublic event EventHandler? Shout;\n// conch\nprivate object eventConch = new();\n// method\npublic void Poke()\n{\n  lock (eventConch) // bad idea\n  {\n    // If something is listening...\n    if (Shout != null)\n    {\n      // ...then call the delegate to raise the event.\n      Shout(this, EventArgs.Empty);\n    }\n  }\n} \n```", "```cs\nint x = 3;\nx++; // is this an atomic CPU operation? \n```", "```cs\n    public static int Counter; // Another shared resource. \n    ```", "```cs\n    Interlocked.Increment(ref SharedObjects.Counter); \n    ```", "```cs\n    WriteLine($\"{SharedObjects.Counter} string modifications.\"); \n    ```", "```cs\n    Please wait for the tasks to complete.\n    ..........\n    Results: BBBBBAAAAA.\n    10 string modifications.\n    13,531 elapsed milliseconds. \n    ```", "```cs\n    using static System.Console;\n    HttpClient client = new();\n    HttpResponseMessage response =\n      await client.GetAsync(\"http://www.apple.com/\");\n    WriteLine(\"Apple's home page has {0:N0} bytes.\",\n      response.Content.Headers.ContentLength); \n    ```", "```cs\n    Program.cs(14,9): error CS4033: The 'await' operator can only be used within an async method. Consider marking this method with the 'async' modifier and changing its return type to 'Task'. [/Users/markjprice/apps-services-net7/Chapter04/AsyncConsole/AsyncConsole.csproj] \n    ```", "```cs\n    Apple's home page has 40,252 bytes. \n    ```", "```cs\n    partial class Program\n    {\n      private static async IAsyncEnumerable<int> GetNumbersAsync()\n      {\n        Random r = Random.Shared;\n        // Simulate some work that takes 1.5 to 3 seconds.\n        await Task.Delay(r.Next(1500, 3000));\n        // Return a random number between 1 and 1000.\n        yield return r.Next(1, 1001);\n        await Task.Delay(r.Next(1500, 3000));\n        yield return r.Next(1, 1001);\n        await Task.Delay(r.Next(1500, 3000));\n        yield return r.Next(1, 1001);\n      }\n    } \n    ```", "```cs\n    // Use async streams to iterate over a collection asynchronously.\n    await foreach (int number in GetNumbersAsync())\n    {\n      WriteLine($\"Number: {number}\");\n    } \n    ```", "```cs\n    Number: 509\n    Number: 813\n    Number: 307 \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>WinExe</OutputType>\n        <TargetFramework>net8.0-windows</TargetFramework>\n        <Nullable>enable</Nullable>\n        <UseWPF>true</UseWPF>\n      </PropertyGroup>\n      <ItemGroup>\n        <PackageReference Include=\"Microsoft.Data.SqlClient\" Version=\"5.2.0\" />\n      </ItemGroup>\n    </Project> \n    ```", "```cs\n    <StackPanel>\n      <Button Name=\"GetEmployeesSyncButton\" \n              Click=\"GetEmployeesSyncButton_Click\">\n        Get Employees Synchronously</Button>\n      <Button Name=\"GetEmployeesAsyncButton\" \n              Click=\"GetEmployeesAsyncButton_Click\">\n        Get Employees Asynchronously</Button>\n      <TextBox HorizontalAlignment=\"Stretch\" Text=\"Type in here\" />\n      <ListBox Name=\"EmployeesListBox\" Height=\"400\" />\n    </StackPanel> \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnection and so on.\n    using System.Diagnostics; // To use Stopwatch. \n    ```", "```cs\n    private string connectionString;\n    private string sql = \"WAITFOR DELAY '00:00:05';\" +\n      \"SELECT EmployeeId, FirstName, LastName FROM Employees\"; \n    ```", "```cs\n    public MainWindow()\n    {\n      InitializeComponent();\n      // Change as needed to work with your Northwind database.\n      SqlConnectionStringBuilder builder = new();\n      builder.DataSource = \".\";\n      builder.InitialCatalog = \"Northwind\";\n      builder.Encrypt = false;\n      builder.MultipleActiveResultSets = true;\n      builder.ConnectTimeout = 5;\n      // To use Windows Integrated authentication.\n      builder.IntegratedSecurity = true;\n      // To use SQL Server authentication.\n      // builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");\n      // builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");\n      connectionString = builder.ConnectionString;\n    } \n    ```", "```cs\n    private void GetEmployeesSyncButton_Click(object sender, RoutedEventArgs e)\n    {\n      Stopwatch timer = Stopwatch.StartNew();\n      using (SqlConnection connection = new(connectionString))\n      {\n        try\n        {\n          connection.Open();\n          SqlCommand command = new(sql, connection);\n          SqlDataReader reader = command.ExecuteReader();\n          while (reader.Read())\n          {\n            string employee = string.Format(\"{0}: {1} {2}\",\n              reader.GetInt32(0), reader.GetString(1),\n              reader.GetString(2));\n            EmployeesListBox.Items.Add(employee);\n          }\n          reader.Close();\n          connection.Close();\n        }\n        catch (Exception ex)\n        {\n          MessageBox.Show(ex.Message);\n        }\n      }\n      EmployeesListBox.Items.Add(\n        $\"Sync: {timer.ElapsedMilliseconds:N0}ms\");\n    }\n    private async void GetEmployeesAsyncButton_Click(\n      object sender, RoutedEventArgs e)\n    {\n      Stopwatch timer = Stopwatch.StartNew();\n      using (SqlConnection connection = new(connectionString))\n      {\n        try\n        {\n          await connection.OpenAsync();\n          SqlCommand command = new(sql, connection);\n          SqlDataReader reader = await command.ExecuteReaderAsync();\n          while (await reader.ReadAsync())\n          {\n            string employee = string.Format(\"{0}: {1} {2}\",\n              await reader.GetFieldValueAsync<int>(0), \n              await reader.GetFieldValueAsync<string>(1), \n              await reader.GetFieldValueAsync<string>(2));\n            EmployeesListBox.Items.Add(employee);\n          }\n          await reader.CloseAsync();\n          await connection.CloseAsync();\n        }\n        catch (Exception ex)\n        {\n          MessageBox.Show(ex.Message);\n        }\n      }\n      EmployeesListBox.Items.Add(\n        $\"Async: {timer.ElapsedMilliseconds:N0}ms\");\n    } \n    ```"]