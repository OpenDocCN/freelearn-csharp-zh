- en: '*Chapter 8*: Story API – Accessing ink Variables and Functions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：故事API – 访问墨水变量和函数'
- en: In this chapter, we will discuss how to use the ink Unity API to work with variables
    and functions. Any variables or functions defined in ink can be accessed from
    any point in its code. The API provided by the ink-Unity Integration plugin provides
    an interface through its `variablesState` property to access any defined variables.
    This is also true of a method provided by the `EvaluateFunction()` API, which
    can access any functions defined in the ink code. Understanding this functionality
    is key to creating more complex projects by using the ink-Unity Integration plugin
    as a bridge between an ink story and Unity code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何使用ink Unity API来处理变量和函数。ink中定义的任何变量或函数都可以从其代码的任何位置访问。ink-Unity集成插件提供的API通过其`variablesState`属性提供了一个接口，用于访问任何定义的变量。这也适用于由`EvaluateFunction()`
    API提供的方法，它可以访问ink代码中定义的任何函数。理解这一功能是使用ink-Unity集成插件作为ink故事和Unity代码之间桥梁来创建更复杂项目的关键。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Changing ink variables outside a story
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在故事之外更改墨水变量
- en: Calling ink functions externally
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部调用墨水函数
- en: Controlling a story through variables and functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过变量和函数控制故事
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The examples used in this chapter, in the `*.cs` and `*.ink` files, can be found
    on GitHub at [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter8](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter8).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例，在`*.cs`和`*.ink`文件中，可以在GitHub上找到：[https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter8](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter8)。
- en: Changing ink variables outside a story
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在故事之外更改墨水变量
- en: '`VAR` keyword and an initial value. Throughout a story, the value of a variable
    can be changed. By comparing their values, variables can also influence the flow
    of a story.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '`VAR`关键字和初始值。在整个故事中，变量的值可以被更改。通过比较它们的值，变量也可以影响故事的流程。'
- en: Variables are *global* in ink. Once created, they can be accessed by any other
    part of the code within the same story. This functionality is also carried over
    into a named property as part of the ink-Unity Integration plugin, called `variablesState`.
    Every variable defined in an Ink story can be accessed by using its name.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在ink中，变量是*全局的*。一旦创建，它们可以被同一故事内的代码的任何其他部分访问。此功能也通过ink-Unity集成插件的一部分名为`variablesState`的命名属性传递，该插件称为`variablesState`。Ink故事中定义的每个变量都可以通过其名称访问。
- en: In this topic, we will examine how to use this property to access and change
    values in a running ink story. We will begin by looking at how to use the `variablesState`
    property and comparing values in ink to control its flow outside the story.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们将探讨如何使用这个属性来访问和更改运行中的ink故事的值。我们将首先查看如何使用`variablesState`属性，并在ink中比较值以控制其故事外的流程。
- en: Accessing ink variables
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问墨水变量
- en: 'The Story API in Unity provides access to ink variables. In this section, we
    will explore the `variablesState` property and how to access an ink variable by
    its name. Perform the following steps:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Unity中的故事API提供了对ink变量的访问。在本节中，我们将探讨`variablesState`属性以及如何通过名称访问ink变量。执行以下步骤：
- en: Start by creating a new project in Unity based on the 2D built-in template.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先在Unity中基于2D内置模板创建一个新项目。
- en: Import the ink-Unity Integration plugin.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入ink-Unity集成插件。
- en: Add a new ink file and rename it `InkVariables.ink`.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的ink文件，并将其重命名为`InkVariables.ink`。
- en: 'The file that is created will hold the ink source code. Because the ink-Unity
    Integration plugin runs compiled ink stories, the source code for a story must
    exist before the API can be used to access and run its contents:'
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 创建的文件将包含ink源代码。因为ink-Unity集成插件运行编译后的ink故事，所以必须在API可以使用之前存在故事的源代码：
- en: '![Figure 8.1 – The project window showing the InkVariables.ink file'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图8.1 – 显示InkVariables.ink文件的工程窗口'
- en: '](img/Figure_8.1_B17597.jpg)'
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.1_B17597.jpg)'
- en: Figure 8.1 – The project window showing the InkVariables.ink file
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.1 – 显示InkVariables.ink文件的工程窗口
- en: Open the `InkVariables.ink` file for editing in Inky.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Inky中打开`InkVariables.ink`文件进行编辑。
- en: Change the contents to the `Example 1 (InkVariables.ink)` file.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将内容更改为`Example 1 (InkVariables.ink)`文件。
- en: Save the file and return to Unity.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并返回Unity。
- en: Reminder
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提醒
- en: The automatic recompilation of ink source files can be changed by visiting the
    **Project Settings** window. You can do this by clicking on **Edit** and then
    **Project Settings**. Clicking on **Ink** and then changing the **Compile All
    Ink Automatically** setting allows you to update this value. If enabled, the plugin
    will automatically create a JSON file.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过访问 **项目设置** 窗口来更改 ink 源文件的自动重新编译。您可以通过点击 **编辑** 然后点击 **项目设置** 来完成此操作。点击
    **Ink** 然后更改 **自动编译所有 Ink** 设置可以更新此值。如果启用，插件将自动创建一个 JSON 文件。
- en: Create a new, empty game object and name it `InkStory`.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空游戏对象，并将其命名为 `InkStory`。
- en: Create a new `Script` component in the `InkStory` game object and name the new
    C# file `InkStoryScript.cs`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `InkStory` 游戏对象中创建一个新的 `Script` 组件，并将新的 C# 文件命名为 `InkStoryScript.cs`。
- en: Open the `InkStoryScript.cs` file for editing in Visual Studio.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中打开 `InkStoryScript.cs` 文件进行编辑。
- en: Update the `InkStoryScript.cs` file to `Example` `1` `(InkStoryScript.cs)`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `InkStoryScript.cs` 文件更新为 `示例` `1` `(InkStoryScript.cs)`。
- en: The updated code uses the `GetVariableWithName()` method as part of the `VariablesState`
    object. The `variablesState` property is used with the name of the variable in
    ink, `number_example`, as part of the `GetVariableWithName()` method. Additionally,
    the `Debug.Log()` method is used to display the value of the variable in the **Console**
    window when run in Unity.
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新后的代码使用 `GetVariableWithName()` 方法作为 `VariablesState` 对象的一部分。`variablesState`
    属性与 ink 中的变量名称 `number_example` 一起使用，作为 `GetVariableWithName()` 方法的一部分。此外，`Debug.Log()`
    方法用于在 Unity 中运行时在 **控制台** 窗口中显示变量的值。
- en: Associate the file with the code. You can do this using either the `Ink JSON
    File` property inside the `Script` component.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件与代码关联起来。您可以使用 `Script` 组件中的 `Ink JSON File` 属性来完成此操作。
- en: Run the project in Unity.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中运行项目。
- en: 'Once the project starts running, open the **Console** window. A new message
    will have been added:'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦项目开始运行，打开 **控制台** 窗口。将添加一条新消息：
- en: '![Figure 8.2 – The console window showing the value of the ink variable'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.2 – 显示 ink 变量值的控制台窗口'
- en: '](img/Figure_8.2_B17597.jpg)'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_8.2_B17597.jpg)'
- en: Figure 8.2 – The console window showing the value of the ink variable
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.2 – 显示 ink 变量值的控制台窗口
- en: Stop the running project in Unity.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中停止运行的项目。
- en: If variables are defined before the first text content in ink, they are also
    loaded *before* the content. In *Example 1*, as is evident from *Step 8*, the
    initial values of the variables can be accessed immediately after loading an ink
    story. The functionality for accessing variables is separate from the functionality
    of loading and displaying text content.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在 ink 的第一个文本内容之前定义了变量，它们也会在内容之前被加载。在 *示例 1* 中，正如 *步骤 8* 所示，变量的初始值可以在加载 ink
    故事后立即访问。访问变量的功能与加载和显示文本内容的功能是分开的。
- en: Any ink variable that is able to be accessed can also be changed. In the next
    section, we will discover how this functionality is key to using the `variablesState`
    property, as part of the Ink API, and how it allows you to create more complex
    projects in Unity when using the ink-Unity Integration plugin.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 任何可以访问的 ink 变量也可以被更改。在下一节中，我们将发现这种功能如何是使用 Ink API 中的 `variablesState` 属性的关键，以及它如何允许你在使用
    ink-Unity Integration 插件时在 Unity 中创建更复杂的项目。
- en: Changing the value of the ink variables
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改 ink 变量的值
- en: The English word "variable" means *able to be changed*. All ink variables, once
    created, can be changed at any point. The `variablesState` property follows the
    same pattern. If a variable can be accessed, its value can be changed.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 英语单词 "variable" 的意思是 *可以更改的*。一旦创建，所有 ink 变量都可以在任何时候更改。`variablesState` 属性遵循相同的模式。如果一个变量可以被访问，它的值可以被更改。
- en: The `VariablesState` class contains multiple methods in which to access and
    change the values of the variables within an ink story. However, it also contains
    a shorthand access operator using square brackets and the name of the variable
    in quotation marks. Often, this shorthand is used rather than directly using method
    names to change the values of variables within the `variablesState` property.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`VariablesState` 类包含多个方法，可以用来访问和更改 ink 故事中变量的值。然而，它还包含一个使用方括号和变量名称的引号表示法的简写访问运算符。通常，这种简写比直接使用方法名称来更改
    `variablesState` 属性中变量的值更常用。'
- en: 'Now, return to the project that we used as part of the *Accessing Ink variables*
    section. Perform the following steps:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，返回到我们在 *访问 Ink 变量* 部分使用过的项目。执行以下步骤：
- en: Open the `InkStoryScript.cs` file for editing in Visual Studio.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中打开 `InkStoryScript.cs` 文件进行编辑。
- en: Change the existing code to `Example 2 (InkStoryScript.cs)`.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将现有的代码更改为 `示例 2 (InkStoryScript.cs)`。
- en: Save the file and return to Unity.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并返回 Unity。
- en: Run the project.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目。
- en: The `variablesState` property. Any changes to these values are reflected in
    the next use of the `Continue()` or `ContinueMaximally()` methods.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`variablesState` 属性。对这些值的任何更改都会反映在下次使用 `Continue()` 或 `ContinueMaximally()`
    方法时。'
- en: Stop the running project in Unity.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中停止运行的项目。
- en: Variables are not the only values that can be accessed from outside an ink story.
    The ink-Unity Integration plugin also adds the ability to call functions in ink
    from Unity. While accessing and changing the values of variables can be helpful,
    directly calling functions in ink and passing them values from Unity is often
    the preferred way in which to approach the exchange of data between Unity and
    ink. In the next section, we will review why using functions is frequently the
    better option for complex data or for when you want to process multiple values
    as part of the same task in ink.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 变量不是可以从 ink 故事外部访问的唯一值。ink-Unity Integration 插件还增加了从 Unity 调用 ink 中函数的能力。虽然访问和更改变量的值可能很有帮助，但直接在
    ink 中调用函数并将值从 Unity 传递给它们通常是处理 Unity 和 ink 之间数据交换的首选方法。在下一节中，我们将回顾为什么使用函数通常是处理复杂数据或当您希望在
    ink 中作为同一任务的一部分处理多个值时的更好选择。
- en: Calling ink functions externally
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部调用 ink 函数
- en: As with variables, functions are also global in ink. This means they can be
    accessed as part of any ink code that is part of the same story. As part of the
    Unity API provided by the `Story` class, the `EvaluateFunction()` method calls
    a function in the ink code based on the name passed to it. Because functions in
    ink are global, they can be called from outside the story itself. However, unlike
    working with the `variablesState` property and only accessing a single value,
    multiple values can be passed to an ink function at one time. Additionally, the
    `EvaluateFunction()` method can be configured to return the text output within
    the ink function or any returning data, too.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与变量一样，ink 中的函数也是全局的。这意味着它们可以作为同一故事中 ink 代码的一部分被访问。作为 `Story` 类提供的 Unity API
    的一部分，`EvaluateFunction()` 方法根据传递给它的名称在 ink 代码中调用函数。由于 ink 中的函数是全局的，因此可以从故事外部调用它们。然而，与仅访问单个值的
    `variablesState` 属性不同，一次可以向 ink 函数传递多个值。此外，`EvaluateFunction()` 方法还可以配置为在 ink
    函数内部返回文本输出或任何返回的数据。
- en: In this section, we will begin by testing whether an ink function exists using
    the `HasFunction()` method. Next, we will examine how the `EvaluateFunction()`
    method is the preferred option for complex data or multiple data values when communicating
    between Unity and ink. Finally, we will review examples of how to use the text
    result and return data from an ink function within Unity code.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首先使用 `HasFunction()` 方法测试 ink 函数是否存在。接下来，我们将探讨 `EvaluateFunction()`
    方法为何是 Unity 和 ink 之间通信时处理复杂数据或多个数据值的优选选项。最后，我们将回顾如何在 Unity 代码中使用 ink 函数的文本结果和返回数据。
- en: Verifying and evaluating ink functions
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 验证和评估 ink 函数
- en: 'When working with functions in ink, the `HasFunction()` method verifies whether
    an ink function exists. Note that it should always be used before working with
    an ink function to prevent any issues:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 ink 中使用函数时，`HasFunction()` 方法会验证 ink 函数是否存在。请注意，在处理 ink 函数之前始终应使用它，以防止出现任何问题：
- en: Create a new project in Unity based on the built-in 2D template.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中基于内置的 2D 模板创建一个新的项目。
- en: Import the ink-Unity Integration plugin.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 ink-Unity Integration 插件。
- en: Create a new, empty game object named `InkStory`.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空游戏对象，命名为 `InkStory`。
- en: Add a `Script` component to the `InkStory` game object and name the ink file
    `InkStoryFunctions.cs`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Script` 组件添加到 `InkStory` 游戏对象中，并将墨迹文件命名为 `InkStoryFunctions.cs`。
- en: Add a new ink file and rename it `InkFunctions.ink`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的墨迹文件，并将其重命名为 `InkFunctions.ink`。
- en: Open the `InkFunctions.ink` file in Inky and change its contents to `Example
    4 (InkFunctions.ink)`.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Inky 中打开 `InkFunctions.ink` 文件，并将其内容更改为 `示例 4 (InkFunctions.ink)`。
- en: Open `InkStoryFunctions.cs` for editing in Visual Studio.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中打开 `InkStoryFunctions.cs` 进行编辑。
- en: Update the `InkStoryFunctions.cs` file to `Example 4 (InkStoryFunctions.cs)`.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `InkStoryFunctions.cs` 文件更新为 `示例 4 (InkStoryFunctions.cs)`。
- en: Save the `InkStoryFunctions.cs` file.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存 `InkStoryFunctions.cs` 文件。
- en: In Unity, associate the compiled JSON file for the `InkFunctions.ink` file with
    the `Ink JSON File` property, as part of the `Script` component of the `InkStory`
    game object.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中，将 `InkFunctions.ink` 文件的编译 JSON 文件与 `InkStory` 游戏对象的 `Script` 组件中的
    `Ink JSON File` 属性关联起来。
- en: Run the project.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行项目。
- en: In the `relationship` ink variable has been changed as a result of calling two
    methods, `HasFunction()` and `EvaluateFunction()`. The `HasFunction()` method
    of the `Story` class returns a Boolean value. It also guarantees that a function
    exists before it is used.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于调用了两个方法`HasFunction()`和`EvaluateFunction()`，`relationship` ink变量已被更改。`Story`类的`HasFunction()`方法返回一个布尔值。它还保证了在使用之前函数存在。
- en: Stop the project.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止项目。
- en: 'After verifying that a function exists, it can be evaluated. The code in the
    `InkStoryFunctions.cs` file uses two methods: `HasFunction()` and `EvaluateFunction()`.
    Within the ink API, the term `EvaluateFunction()` method.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在验证函数存在后，可以对其进行评估。`InkStoryFunctions.cs`文件中的代码使用两个方法：`HasFunction()`和`EvaluateFunction()`。在ink
    API中，术语`EvaluateFunction()`方法。
- en: 'When using the `EvaluateFunction()` method, the first parameter is the name
    of the function in ink. Any additional parameters are passed to the ink function
    directly. In the code that is used as part of the `InkStoryFunctions.cs` file,
    the use of the `EvaluateFunction()` method includes two parameters: the name of
    the `increase()` ink function and the amount of value to increase inside ink.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`EvaluateFunction()`方法时，第一个参数是ink中函数的名称。任何其他参数都直接传递给ink函数。在作为`InkStoryFunctions.cs`文件一部分使用的代码中，`EvaluateFunction()`方法的用法包括两个参数：`increase()`
    ink函数的名称以及ink中要增加的值量。
- en: This use of an ink function that has been called from Unity to change values
    is a very common pattern when using the ink-Unity Integration plugin. In this
    case, the `increase()` function in ink updates the `relationship` value inside
    ink. This allows ink values to be adjusted by ink functions. When working in Unity,
    values can be passed to ink to perform multiple tasks, depending on the ink functions
    defined for those tasks, without extra code on the Unity side.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ink-Unity集成插件时，从Unity调用墨水功能来更改值是一种非常常见的模式。在这种情况下，ink中的`increase()`函数更新ink内部的`relationship`值。这允许ink值通过ink函数进行调整。在Unity中工作时，可以根据为这些任务定义的ink函数，将值传递给ink以执行多个任务，而无需在Unity侧添加额外代码。
- en: 'ink functions are special sections of a story. This means they can also produce
    text output along with other code-related actions. However, to gain access to
    the text output of an ink function using the `EvaluateFunction()` method, a special
    keyword is needed in C#: `out`. We will learn more about this keyword in the next
    section.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: ink函数是故事的特殊部分。这意味着它们还可以与其他与代码相关的操作一起产生文本输出。但是，要使用`EvaluateFunction()`方法获取ink函数的文本输出，需要在C#中使用一个特殊的关键字：`out`。我们将在下一节中了解更多关于这个关键字的信息。
- en: Retrieving the ink function text output
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取ink函数文本输出
- en: The C# programming language allows you to define a variable and then pass it
    to a method. Internal to the method, it is expected that the value of the variable
    will change. Note that this will not be a change to the value passed to the method,
    but to the value contained within the variable itself. More generally, in programming,
    this is known as passing by reference. Instead of passing some data to a method,
    a reference (that is, where to find the variable to store the value) is passed
    instead.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: C#编程语言允许您定义一个变量，然后将其传递给一个方法。在方法内部，预期变量的值将发生变化。请注意，这不会是传递给方法的值的变化，而是变量本身包含的值的变化。更普遍地说，在编程中，这被称为通过引用传递。不是将一些数据传递给方法，而是传递一个引用（即找到变量以存储值的位置）。
- en: In C#, the `out` keyword can be used with a parameter to a method to specify
    that the variable, and not its value, should be passed by reference. This means
    that when the method is finished with its actions, the value within a variable
    that was passed to the method will change as a result. In C#, using the `out`
    keyword allows a developer to specify they want a value *out* of the method and
    into a specific variable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，可以使用`out`关键字与方法的参数一起使用，以指定变量（而不是其值）应该通过引用传递。这意味着当方法完成其操作后，传递给方法的变量中的值将发生变化。在C#中，使用`out`关键字允许开发人员指定他们想要从方法中获取值并将其放入特定变量中。
- en: 'When working with the `EvaluateFunction()` method provided by the ink-Unity
    Integration plugin, if the second parameter uses the `out` keyword, the method
    knows to take any text produced during the evaluation and pass it *out* of the
    method back to the variable. Perform the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用ink-Unity集成插件提供的`EvaluateFunction()`方法时，如果第二个参数使用`out`关键字，该方法知道在评估过程中产生的任何文本都应该传递*出*方法并返回到变量。执行以下步骤：
- en: Return to the code used in the *Verifying and evaluating ink functions* section.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到*验证和评估ink函数*部分中使用的代码。
- en: Update the code in the `InkStoryFunctions.cs` file to `Example 5 (InkStoryFunctions.cs)`.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`InkStoryFunctions.cs`文件中的代码更新为`示例 5 (InkStoryFunctions.cs)`。
- en: Save the changed `InkStoryFunctions.cs` file.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存更改后的`InkStoryFunctions.cs`文件。
- en: Return to Unity.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity。
- en: Play the project.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放项目。
- en: Stop the project.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止项目。
- en: Using the `out` keyword with the `functionOut` variable as a parameter to the
    `EvaluateFunction()` method lets C# know to pass any text *out* of the method.
    Because the `relationship` value was updated internally in ink by calling the
    `increase()` function from Unity to ink, its value is shown as `51` in the `functionOut`
    variable in C# is given the text *out* of the use of the `EvaluateFunction()`
    method. This allows it to then pass its value to the `Debug.Log()` method and,
    ultimately, show the updated value in the **Console** window.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`out`关键字将`functionOut`变量作为`EvaluateFunction()`方法的参数，让C#知道将任何文本*输出*到方法之外。因为`relationship`值是通过从Unity调用ink中的`increase()`函数内部更新的，所以它的值在C#中的`functionOut`变量中显示为`51`。这允许它然后将值传递给`Debug.Log()`方法，并最终在**控制台**窗口中显示更新后的值。
- en: When the `out` keyword is used with the `EvaluateFunction()` method in this
    way, any text output from a function can be captured and passed back from ink
    to Unity. Combined with creating ink functions to update ink values, this additional
    change to the pattern shown in the *Verifying and evaluating ink functions* section
    allows you to call ink functions to perform ink-related tasks. This allows for
    the separation between ink concerns and those in Unity.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当以这种方式使用`out`关键字与`EvaluateFunction()`方法时，任何从函数输出的文本都可以被捕获并从ink传递回Unity。结合创建ink函数来更新ink值，这种对*验证和评估ink函数*部分中显示模式的额外更改允许你调用ink函数来执行ink相关任务。这允许ink关注点与Unity中的关注点分离。
- en: Within ink, a story can be controlled by different values. Using conditional
    options and a selective output, the text of a choice can be displayed or a diversion
    followed. Because the values of variables can be directly accessed using the `variablesState`
    property and functions that have been called using the `EvaluateFunction()` method,
    this means an ink story can be controlled from Unity. In the next section, we
    will learn how to connect user interface elements in Unity with ink variables
    and functions.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在ink中，故事可以通过不同的值来控制。使用条件选项和选择性输出，可以选择显示选择文本或跟随分支。因为可以通过`variablesState`属性和`EvaluateFunction()`方法调用的函数直接访问变量值，这意味着ink故事可以从Unity中控制。在下一节中，我们将学习如何将Unity中的用户界面元素与ink变量和函数连接起来。
- en: Controlling a story through variables and functions
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过变量和函数控制故事
- en: The `variablesState` property and the `EvaluateFunction()` method give the developer
    two ways in which to access values within an ink story. By using these two approaches,
    a story can be *controlled* by more than just the options that are presented to
    a player. User interface elements within Unity can be attached to methods that
    can then change ink values.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`variablesState`属性和`EvaluateFunction()`方法为开发者提供了两种访问ink故事中值的方式。通过使用这两种方法，故事可以通过向玩家展示的选项之外的更多方式来控制。Unity中的用户界面元素可以附加到可以更改ink值的方法。'
- en: In this section, we will connect ink to Unity. By using the `variablesState`
    property and the `EvaluateFunction()` method, we will review a code pattern where
    Unity provides the user interface and communicates with ink functions to adjust
    and react to values during runtime.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将连接ink到Unity。通过使用`variablesState`属性和`EvaluateFunction()`方法，我们将回顾一个代码模式，其中Unity提供用户界面并与ink函数通信，以在运行时调整和响应值。
- en: Across the three sections of this topic, first, we will prepare a Unity project
    by creating the necessary game objects. Next, we will add the code to control
    the user interface. Finally, we will adjust the presentation of the user interface
    and run the project.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本主题的三个部分中，首先，我们将通过创建必要的游戏对象来准备一个Unity项目。接下来，我们将添加代码来控制用户界面。最后，我们将调整用户界面的展示并运行项目。
- en: Preparing a user interface
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备用户界面
- en: 'To begin work with Unity buttons, a new project is required. For simplicity,
    a 2D project is recommended. This will allow you to work easily with an interface
    without needing to worry about perspective. Perform the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Unity按钮，需要一个新项目。为了简单起见，建议使用2D项目。这将允许你轻松地与界面一起工作，而无需担心透视。执行以下步骤：
- en: Create a new project in Unity using the built-in 2D template and name this project
    `Shopping Trip`.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用内置的 2D 模板在 Unity 中创建一个新项目，并将此项目命名为`购物之旅`。
- en: Import the ink-Unity Integration plugin.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 ink-Unity 集成插件。
- en: Create a new, empty game object named `InkStory`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`InkStory`的新空游戏对象。
- en: Create a new `Script` component inside the `InkStory` game object. Name the
    created C# file `InkStoryShopping.cs`.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`InkStory`游戏对象内部创建一个新的`Script`组件。将创建的 C# 文件命名为`InkStoryShopping.cs`。
- en: Create a new ink file named `InkShopping.ink`.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`InkShopping.ink`的新墨水文件。
- en: Open the `InkShopping.ink` file for editing in Inky and change its contents
    to `Example 6 (InkShopping.ink)`.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Inky 中打开`InkShopping.ink`文件进行编辑，并将其内容更改为`示例 6 (InkShopping.ink)`。
- en: 'In Unity, create a new `Button` game object. Select the automatically created
    `Canvas` game object in Unity and create a second `Button` game object so that
    both buttons are the children of the `Canvas` game object:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在 Unity 中创建一个新的`Button`游戏对象。选择 Unity 中自动创建的`Canvas`游戏对象并创建第二个`Button`游戏对象，以便两个按钮都是`Canvas`游戏对象的子对象：
- en: '![Figure 8.4 – The created buttons in Unity'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.4 – 在 Unity 中创建的按钮'
- en: '](img/Figure_8.4_B17597.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.4_B17597.jpg]'
- en: Figure 8.4 – The created buttons in Unity
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.4 – 在 Unity 中创建的按钮
- en: Select the `Canvas` game object again and create a `Text` game object. Both
    buttons, along with the newly created `Text` game object, should all be children
    of the `Canvas` game object.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次选择`Canvas`游戏对象并创建一个`Text`游戏对象。两个按钮以及新创建的`Text`游戏对象都应该是`Canvas`游戏对象的子对象。
- en: 'The ink file created as part of *Step 6* established the ink functions that
    will be called from future Unity code. The two buttons will serve as an interface
    for the buying and selling of an inventory that is also tracked by the ink code.
    In the next section, we will move from having set up everything to writing the
    Unity code to create a bridge between the interface and ink. This will track two
    values: `money` and `inventory`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为*步骤 6*部分创建的墨水文件建立了未来从 Unity 代码中调用的墨水功能。这两个按钮将作为买卖被墨水代码跟踪的库存的接口。在下一节中，我们将从设置好一切过渡到编写
    Unity 代码以在接口和墨水之间创建桥梁。这将跟踪两个值：`money`和`inventory`。
- en: Scripting user interface objects
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚本化用户界面对象
- en: 'In the previous section, we worked through the steps that were needed to create
    a new Unity 2D project and to create the necessary game objects. In this section,
    we will learn how to connect user actions (that is, clicking) with the user interface
    by adding code on the Unity side. Then, we will use the `EvaluateFunction()` method
    in Unity to communicate with ink functions within a running story to control its
    progression:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们完成了创建新的 Unity 2D 项目和创建必要的游戏对象的步骤。在本节中，我们将学习如何通过在 Unity 侧添加代码将用户操作（即点击）与用户界面连接起来。然后，我们将使用
    Unity 中的`EvaluateFunction()`方法与运行中的故事中的墨水功能进行通信以控制其进度：
- en: Open the `InkStoryShopping.cs` file for editing in Visual Studio.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中打开`InkStoryShopping.cs`文件进行编辑。
- en: Change its content to `Example 6 (InkStoryShopping.cs)`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其内容更改为`示例 6 (InkStoryShopping.cs)`。
- en: In the new code, three new methods have been added to the Unity code. We have
    directly mapped the Unity methods to ink functions. For example, the name of the
    `Sell()` method in Unity almost matches the `sell()` name of the ink function.
    The differences in capitalization are only because of the recommended capitalization
    usage in each programming context.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在新代码中，Unity 代码中已添加了三个新方法。我们已经直接将 Unity 方法映射到墨水功能。例如，Unity 中`Sell()`方法的名称几乎与墨水功能的`sell()`名称匹配。大小写差异仅是因为每个编程环境中推荐的命名约定。
- en: Associate the compiled ink JSON file with the new public property. Associate
    the `Text` game object with the `Text Status` property:![Figure 8.5 – Associating
    the Text GameObject with the Text Status property
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将编译后的 ink JSON 文件与新的公共属性关联。将`Text`游戏对象与`Text Status`属性关联：![图 8.5 – 将 Text GameObject
    与 Text Status 属性关联
- en: '](img/Figure_8.5_B17597.jpg)'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 8.5 – Figure_8.5_B17597.jpg]'
- en: Figure 8.5 – Associating the Text GameObject with the Text Status property
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.5 – 将 Text GameObject 与 Text Status 属性关联
- en: Recommendation
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 建议
- en: Because the two existing `Button` game objects have children `Text` game objects,
    it is recommended that you use the drag-and-drop approach to associate a game
    object with a property. This will prevent any issues with associating the wrong
    `Text` game object.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于两个现有的`Button`游戏对象有子`Text`游戏对象，建议您使用拖放方法将游戏对象与属性关联。这将防止关联错误的`Text`游戏对象。
- en: Select the `Canvas` game object in Unity in the `Horizontal Layout Group` component.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Unity 中选择`Canvas`游戏对象中的`水平布局组`组件。
- en: Change the `Horizontal Layout Group` component from the default value of `Horizontal
    Layout Group` component adds a layout structure to the `Canvas` game object. The
    adjustment of the **Child Alignment** property changes the starting position of
    all its children to the absolute-center positions of the available screen space.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`水平布局组`组件从默认的`水平布局组`组件更改为，为`Canvas`游戏对象添加布局结构。调整**子对齐**属性会改变所有子对象的起始位置，使其位于可用屏幕空间的绝对中心位置。
- en: Select the first `Button` game object of the children game objects of the `Canvas`
    game object, in the `Button` game object can have one or more listener functions
    associated with its `OnClick` user event. When a user clicks on the `Button` game
    object, these functions will be called in the order in which they appear in the
    list.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Canvas`游戏对象的子游戏对象中的第一个`按钮`游戏对象，在`按钮`游戏对象中可以关联一个或多个与它的`OnClick`用户事件相关的监听函数。当用户点击`按钮`游戏对象时，这些函数将按照它们在列表中出现的顺序被调用。
- en: Because `Button` is a `GameObject`, it can only communicate with other game
    objects. This is an important aspect of how Unity understands the differences
    between game objects and their components. A `GameObject` is a *container* for
    other components, including any `script` components. This means that to connect
    the `OnClick` user event for a `Button` game object to some code found in a `script`
    component, the `GameObject` that the `script` component is associated with must
    be used. For us, this means the `InkStory` game object.
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为`按钮`是一个`GameObject`，它只能与其他游戏对象通信。这是 Unity 理解游戏对象和它们组件之间差异的重要方面。一个`GameObject`是其他组件的*容器*，包括任何`脚本`组件。这意味着要将`按钮`游戏对象的`OnClick`用户事件连接到某个`脚本`组件中找到的代码，必须使用与该`脚本`组件关联的`GameObject`。对我们来说，这意味着`InkStory`游戏对象。
- en: Associate the `InkStory` game object with the `On Click ()` component of the
    first `Button` game object. This can be done by dragging and dropping the `InkStory`
    game object onto the property:![Figure 8.8 – Associating the InkStory GameObject
    with the On Click () component
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`InkStory`游戏对象与第一个`按钮`游戏对象的`On Click ()`组件关联起来。这可以通过将`InkStory`游戏对象拖放到属性上完成：![图
    8.8 – 关联 InkStory GameObject 与 On Click () 组件
- en: '](img/Figure_8.8_B17597.jpg)'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.8_B17597.jpg)'
- en: Figure 8.8 – Associating the InkStory GameObject with the On Click () component
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 8.8 – 关联 InkStory GameObject 与 On Click () 组件
- en: Once a `GameObject` has been associated with an entry in the `On Click ()` component
    listing, the **No Function** drop-down menu will be enabled. Upon this association,
    Unity will have processed the game object and looked for every possible method
    or function that might be used.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一旦一个`GameObject`与`On Click ()`组件列表中的条目关联，**无函数**下拉菜单将被启用。在此关联之后，Unity 将处理游戏对象并查找可能使用的每个可能的方法或函数。
- en: Using the `InkStoryShopping.Buy`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`InkStoryShopping.Buy`。
- en: Select the second `Button` game object of the children of the `Canvas game object`,
    in the `On Click ()` component.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Canvas`游戏对象的子对象中的第二个`按钮`游戏对象，在`On Click ()`组件中。
- en: 'Follow *Step 7* and *Step 8* to associate the `InkStory` game object with the
    `On Click` `()` component. For *Step 8*, instead of using the `Buy` `()` method,
    select the `Sell` `()` method:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照*步骤 7*和*步骤 8*将`InkStory`游戏对象与`On Click``()`组件关联起来。对于*步骤 8*，而不是使用`Buy``()`方法，选择`Sell``()`方法：
- en: '![Figure 8.9 – Associating the InkStoryShopping.Sell() method'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 8.9 – 关联 InkStoryShopping.Sell() 方法'
- en: '](img/Figure_8.9_B17597.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.9_B17597.jpg)'
- en: Figure 8.9 – Associating the InkStoryShopping.Sell() method
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 8.9 – 关联 InkStoryShopping.Sell() 方法
- en: At the end of *Step 10*, the first `Button` game object is associated with the
    `Buy()` method, and the second is associated with the `Sell()` method. Internally,
    those methods are communicating with their corresponding ink functions. As you
    will discover shortly, clicking on the buttons will call Unity methods, which,
    in turn, will call ink functions.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 10*结束时，第一个`按钮`游戏对象关联到`Buy()`方法，第二个关联到`Sell()`方法。内部，这些方法正在与它们对应的墨迹函数进行通信。正如你很快会发现的那样，点击按钮将调用
    Unity 方法，而这些方法反过来又会调用墨迹函数。
- en: Adjusting the presentation values
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调整展示值
- en: 'In this final section, we will change the default values of the user interface
    game objects created in the previous section. Adjusting these values will help
    us to better understand the relationship between game objects and improve the
    experience of interacting with the onscreen buttons:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后，我们将更改之前创建的用户界面游戏对象的默认值。调整这些值将帮助我们更好地理解游戏对象之间的关系，并改善与屏幕按钮交互的体验：
- en: Select the first `Button` game object in the `Text` game object.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Text`游戏对象中的第一个`Button`游戏对象。
- en: Change the `Text` property value from its default setting of `Button` to `Buy`:![Figure
    8.10 – Changing the Text property
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Text`属性值从默认设置`Button`更改为`Buy`：![图8.10 – 更改Text属性
- en: '](img/Figure_8.10_B17597.jpg)'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.10_B17597.jpg)'
- en: Figure 8.10 – Changing the Text property
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.10 – 更改Text属性
- en: Select the second `Button` game object in the `Text` game object presented.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择展示的`Text`游戏对象中的第二个`Button`游戏对象。
- en: Change the default text of the second `Button` game object from `Button` to
    `Sell`.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个`Button`游戏对象的默认文本从`Button`更改为`Sell`。
- en: Select the third child game object of the `Canvas` game object, that is, the
    `Text` game object. Be sure not to select the previous two `Text` game objects
    that were updated in the previous steps.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Canvas`游戏对象的第三个子游戏对象，即`Text`游戏对象。确保不要选择之前步骤中更新的前两个`Text`游戏对象。
- en: Change the width and height of the `Text` game object to `400` and `250`:![Figure
    8.11 – Adjusting the width and height of the Text game object
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Text`游戏对象的宽度和高度更改为`400`和`250`：![图8.11 – 调整Text游戏对象的宽度和高度
- en: '](img/Figure_8.11_B17597.jpg)'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.11_B17597.jpg)'
- en: Figure 8.11 – Adjusting the width and height of the Text game object
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.11 – 调整Text游戏对象的宽度和高度
- en: Change the font size of the `Text` game object from its default value to `32`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Text`游戏对象的字体大小从默认值更改为`32`。
- en: Change the color of the `Text` game object from its default setting to a white
    or near-white color:![Figure 8.12 – Updating the color for the Text game object
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Text`游戏对象的颜色从默认设置更改为白色或接近白色的颜色：![图8.12 – 更新Text游戏对象的颜色
- en: '](img/Figure_8.12_B17597.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_8.12_B17597.jpg)'
- en: Figure 8.12 – Updating the color for the Text game object
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图8.12 – 更新Text游戏对象的颜色
- en: Play the project.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放项目。
- en: When played, the far-left side will show the updated status of the `money` and
    `inventory` variables in ink. Clicking on the buttons will call the Unity methods,
    which, in turn, will evaluate the ink functions and change the values inside the
    running ink story. This is a complete example of how to *control* an ink story
    through variables and functions.
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 播放时，最左侧将显示墨迹中`money`和`inventory`变量的更新状态。点击按钮将调用Unity方法，这些方法反过来将评估墨迹函数并更改运行中的墨迹故事中的值。这是一个如何通过变量和函数*控制*墨迹故事的完整示例。
- en: Stop the project.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止项目。
- en: While multiple steps were involved to create the user interface elements and
    change the values of their properties, the code is relatively simple. Functions
    were created in ink to adjust the ink values. In Unity, methods were created matching
    the names of the ink functions.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然创建用户界面元素和更改其属性值涉及多个步骤，但代码相对简单。在墨迹中创建了函数来调整墨迹值。在Unity中，创建了与墨迹函数名称匹配的方法。
- en: This section demonstrated how a simple shopping scene could be created in ink
    and manipulated from Unity. By knowing the name of the ink functions, C# methods
    in Unity can evaluate them to either adjust values or, in the case of the `status()`
    ink function, retrieve the text output. This was also a demonstration of how to
    separate user interface programming from story-related code. They communicated
    with each other, but they were written in different contexts.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 本节演示了如何在墨迹中创建一个简单的购物场景，并从Unity中进行操作。通过了解墨迹函数的名称，Unity中的C#方法可以评估它们以调整值，或者在`status()`墨迹函数的情况下，检索文本输出。这还演示了如何将用户界面编程与与故事相关的代码分离。它们相互通信，但它们是在不同的上下文中编写的。
- en: In the next chapter, we will examine a different approach to working with variables
    and functions in a story while continuing the trend of separating our narrative
    and game code. However, instead of clicking on buttons in Unity to trigger functions
    in ink, we will explore the reverse. Events will happen in ink and trigger changes
    in Unity. This chapter focused on how to control ink from Unity. The next chapter
    will demonstrate how to control parts of Unity from events happening within a
    running ink story.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在故事中处理变量和函数的不同方法，同时继续我们分离叙事和游戏代码的趋势。然而，我们不会在Unity中点击按钮来触发ink中的函数，而是探索相反的方法。事件将在ink中发生并触发Unity中的变化。本章重点介绍了如何从Unity控制ink。下一章将演示如何从运行中的ink故事中的事件控制Unity的某些部分。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we began by demonstrating how the `variablesState` property
    exposes all of the variables in ink. We started by using the `GetVariableWithName()`
    method to access variables by name and the provided shorthand syntax of using
    square brackets. For completeness, the `variablesState` property was explained.
    However, in most situations, ink functions should change ink values. This helps
    to keep any code working with those values existing within the ink story and is
    easier to maintain over time, and we closed the chapter on this same theme. Additionally,
    we explored how buttons in Unity can call their methods and then call ink functions.
    By using the `EvaluateFunction()` method, we can access the ink function in Unity
    to either pass data into the project or retrieve possible text output with the
    `out` keyword in C#.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们首先演示了如何通过`GetVariableWithName()`方法使用名称访问变量以及使用方括号提供的简写语法。为了完整性，解释了`variablesState`属性。然而，在大多数情况下，ink函数应该改变ink的值。这有助于保持任何与这些值一起工作的代码存在于ink故事中，并且随着时间的推移更容易维护，我们以这个主题结束了本章。此外，我们还探讨了Unity中的按钮如何调用它们的方法，然后调用ink函数。通过使用`EvaluateFunction()`方法，我们可以访问Unity中的ink函数，要么将数据传递到项目中，要么使用C#中的`out`关键字检索可能的文本输出。
- en: In [*Chapter 9*](B17597_09_Final_PG_ePub.xhtml#_idTextAnchor137), *Story API
    – Observing and Reacting to Story Events*, we will emphasize the ink-Unity Integration
    plugin and its API by inspecting a different approach to the relationship between
    Unity and ink. Instead of using Unity methods to call ink functions, we will examine
    some patterns to control parts of Unity from ink. Instead of having to click on
    buttons in Unity to change values, ink will cause changes that will then register
    in Unity. For projects requiring more real-time feedback from ink, these patterns
    will be a preferred approach to those shown in this chapter using the `variablesState`
    property and the `EvaluateFunction()` method.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第9章*](B17597_09_Final_PG_ePub.xhtml#_idTextAnchor137)“Story API – 观察和响应故事事件”中，我们将通过检查Unity和ink之间关系的一种不同方法来强调ink-Unity集成插件及其API。我们不会使用Unity方法来调用ink函数，而是检查一些从ink控制Unity部分的模式。我们不需要在Unity中点击按钮来更改值，ink将导致变化，然后将在Unity中注册。对于需要从ink获得更多实时反馈的项目，这些模式将是本章中所示使用`variablesState`属性和`EvaluateFunction()`方法所示方法的优选方法。
- en: Questions
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Are variables global in ink?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ink中的变量是否是全局的？
- en: What effect does functions being global mean regarding how they are accessed
    in ink?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数全局化对它们在ink中如何访问有什么影响？
- en: Do the `Continue()` and `ContinueMaximally()` methods affect the values of variables
    in ink?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Continue()`和`ContinueMaximally()`方法是否会影响ink中变量的值？'
- en: What shorthand syntax does the `VariablesState` class provide to access variables
    based on their names?
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`VariablesState`类提供了什么简写语法来根据名称访问变量？'
- en: Should the name of an ink function be used to test whether it exists before
    you attempt to access it?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在尝试访问之前，是否应该使用ink函数的名称来测试它是否存在？
- en: How is the `out` C# keyword used with the `EvaluateFunction()` method as part
    of the Story API when working with the ink-Unity Integration plugin?
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用ink-Unity集成插件时，`out` C#关键字是如何与`EvaluateFunction()`方法一起作为Story API的一部分使用的？
