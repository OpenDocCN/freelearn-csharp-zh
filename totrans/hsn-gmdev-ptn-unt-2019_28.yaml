- en: The Anti-Patterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反模式
- en: Throughout this book, we have reviewed best practices in software architecture
    by implementing various types of patterns. But what you might be asking yourself
    is if those patterns are so beneficial, why doesn't everyone use them? Or why
    do we still regularly see bug-ridden games coming out?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，我们通过实施各种类型的模式来回顾了软件架构的最佳实践。但你可能会问自己，如果这些模式如此有益，为什么不是每个人都使用它们？或者为什么我们仍然经常看到充斥着错误的游戏问世？
- en: If current-day programmers have easy access to a wealth of information about
    software development best practices, it's reasonable to assume that there should
    be no reasons why we still have issues delivering stable video games and applications
    within reasonable deadlines. But in this chapter, we are going to explore why,
    in the software development industry, even extraordinarily competent and talented
    teams end up producing messy code and are unable to deliver a stable product.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在的程序员可以轻松地获取大量关于软件开发最佳实践的信息，那么合理地假设，我们不应该有理由在合理的时间内交付稳定的视频游戏和应用。但在本章中，我们将探讨为什么在软件开发行业中，即使是非常有能力和才华的团队最终也会生产出杂乱的代码，并且无法交付一个稳定的产物。
- en: In the previous chapters, we explored patterns that are designed to be beneficial
    and bring about positive results. But now, we are going to study their evil twins,
    in the form of Anti-Patterns. These destructive patterns are subtle; they don't
    always lurk in your code, but instead hurt you by causing fear, uncertainty, and
    doubt at every level of your organization. And that's why they are so difficult
    to recognize, as we are going to see in the following section.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前几章中，我们探讨了旨在有益并带来积极结果的模式。但现在，我们将研究它们的邪恶双胞胎，即反模式。这些破坏性的模式很微妙；它们并不总是潜伏在你的代码中，而是通过在每个组织层面引起恐惧、不确定性和怀疑来伤害你。这就是为什么它们如此难以识别，正如我们将在下一节中看到的那样。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: We will be reviewing a list of common anti-patterns
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将回顾一系列常见的反模式
- en: The anti-patterns
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反模式
- en: There are probably over one hundred anti-patterns currently documented by experts
    in every field of software development. We won't be able to review them all in
    this chapter, but I have made a short list of those I found that are related to
    the misapplication of design patterns, either directly or indirectly. But I have
    also listed those that I've personally experienced in my career.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，软件开发的每个领域都有超过一百种反模式被专家们记录下来。我们无法在本章中全部回顾，但我已经列出了一份简短的清单，其中包含我发现的一些与设计模式误用相关的内容，无论是直接还是间接的。但我还列出了我在职业生涯中亲身经历过的那些。
- en: The academic research on the subject of anti-patterns is not thoroughly documented
    compared to established design patterns, so there are a lot of discrepancies in
    the naming of specific anti-patterns. As a result, a lot of the following material
    is my interpretation of prevalent anti-patterns and not official definitions.
    So, let's now dive into the subject matter and review some of the most relevant
    anti-patterns that I have experienced, and that I recommend to avoid.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与已建立的设计模式相比，关于反模式的学术研究并没有得到充分的记录，因此在特定反模式的命名上存在很多差异。因此，以下材料中的很多内容都是我对普遍存在的反模式的解释，而不是官方定义。那么，现在让我们深入主题，回顾一些我亲身经历并推荐避免的最相关的反模式。
- en: False mastery
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 假装精通
- en: '"If people knew how hard I worked to get my mastery, it wouldn''t seem so wonderful
    at all."'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '"如果人们知道我为了达到精通付出了多少努力，那么这一切就不会显得那么神奇了。"'
- en: '- Michelangelo'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '- 米开朗基罗'
- en: '**What is it?** Programmers have access to a wealth of information, tools,
    and libraries that allow them to develop anything they want with ease. As a consequence,
    these advantages are making a lot of junior developers believe that they are masters
    of their craft when they are merely copying and pasting the work of others.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是什么？** 程序员可以轻松访问大量信息、工具和库，使他们能够轻松地开发他们想要的任何东西。因此，这些优势使许多初级开发者相信他们是他们技艺的大师，当他们只是在复制粘贴他人的工作。'
- en: '**Why is it wrong?** Nothing obstructs your ability to learn more than believing
    that you already know everything. This dangerous mindset blinds you to your deficiencies
    and makes you unable to process feedback. As a result, you will never progress,
    and you will end up being a mediocre programmer for the rest of your career, even
    if you hold titles such as senior or technical director.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？** 认为已经知道一切的想法比任何东西都更能阻碍你学习。这种危险的心态使你对自己的不足视而不见，使你无法处理反馈。结果，你将永远无法进步，你将最终成为职业生涯中一个平庸的程序员，即使你拥有高级或技术总监等头衔。'
- en: '**What is the root cause?** The leading cause of this premature disillusionment
    of mastery over your craft is that tools such as the Unity engine simplify the
    process of making games to the point that almost anyone can do it. But this means
    few understand what is happening under the hood of the engine in terms of the
    tools or programming language they are using.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？** 这种过早的失望的主要原因在于，像Unity引擎这样的工具简化了制作游戏的过程，以至于几乎任何人都可以做到。但这意味着很少有人理解他们所使用的工具或编程语言在引擎底层的运作方式。'
- en: So, by example, just because you can write a program in C# doesn't make you
    a C# expert, but knowing the intricacies of the language's libraries will make
    you into one.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以为例子，仅仅因为你能够用C#编写程序，并不意味着你就是C#专家，但了解语言库的复杂性将使你成为专家。
- en: '**How to avoid this?**'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？**'
- en: 'The following is a list of professional habits that will help you avoid falling
    into the trap of this Anti-Pattern:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一份专业习惯列表，将帮助你避免陷入这种反模式的陷阱：
- en: Learn, learn, and never stop learning.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习，学习，永远不要停止学习。
- en: Avoid hunting for titles such as senior, tech lead or CTO, and instead focus
    on gaining true mastery over your craft.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免追求像高级、技术领导或CTO这样的头衔，而应专注于真正掌握你的技艺。
- en: Every time you use a new tool, library, and language, research as much as possible
    about its origins, as well as its intricacies.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次你使用一个新的工具、库和语言时，尽可能多地研究其起源以及其复杂性。
- en: Humble yourself every day. Accept that you don't know everything and that it
    will take you several decades to become a true senior programmer.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每天都要谦卑。接受自己并非无所不知，并且成为真正的资深程序员需要几十年的时间。
- en: Teach, write a blog, and answer technical questions on forums. In other words,
    transfer the knowledge you know as well as absorbing new information. This approach
    will help you validate and structure your learning.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教学相长，写博客，并在论坛上回答技术问题。换句话说，将你所知的知识传授出去，同时吸收新的信息。这种方法将帮助你验证和构建你的学习。
- en: 'Job titles given out in a start-up are not equivalent to those given in a large
    corporation. So don''t be surprised when transitioning out from a small indie
    to a AAA studio that you end up back in a more junior role. The reason is simple:
    it''s harder to gain seniority in a bigger team because you are competing with
    more programmers for better positions.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 创业公司给出的职位名称与大公司给出的职位名称并不等价。所以，当你从一个小型独立工作室过渡到AAA工作室时，你最终又回到了一个更初级的位置，这并不奇怪。原因是简单的：在大团队中晋升到高级职位更难，因为你需要与更多的程序员竞争更好的职位。
- en: Fear of complexity
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对复杂性的恐惧
- en: '"Have no fear of perfection – you''ll never reach it."'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: “不要害怕完美——你永远达不到。”
- en: '- Salvador Dali'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '- 拉斐尔·达利'
- en: '**What is it?**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是什么？**'
- en: I personally have been the victim of this anti-pattern for years. It's the result
    of an overzealous belief that simplicity is always the best approach to code and,
    hence, you should avoid any solution that might look slightly more complex as
    the path of least resistance.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人多年来一直受到这种反模式的困扰。这是对简单性总是最好的编程方法的过度热情的结果，因此，你应该避免任何可能看起来稍微复杂一些的解决方案，将其视为阻力最小的路径。
- en: '**Why is it bad?**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是不好的？**'
- en: An irrational fear of complexity can prevent you from using sophisticated and
    advanced design patterns or algorithms to resolve issues. Thus, you reduce the
    potential for growth and limit your learning opportunities. Ultimately, it can
    prevent you from reaching maturity and seniority.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对复杂性的非理性恐惧可能会阻止你使用复杂和高级的设计模式或算法来解决问题。因此，你减少了成长潜力，限制了学习机会。最终，这可能会阻止你达到成熟和资深水平。
- en: '**What is the root cause?**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？**'
- en: An earnest belief that the simplest solution is the best path to resolve any
    technical problem. But usually, it is an excuse to avoid doing research and leaving
    your comfort zone.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 坚信最简单的解决方案是解决任何技术问题的最佳途径。但通常，这只是一个避免进行研究和离开舒适区的借口。
- en: '**How to avoid?**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免？**'
- en: 'Here are some questions that you should ask yourself every time you have to
    decide between an easy or complex solution to a problem:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你必须决定在简单或复杂解决方案之间做出选择时，你应该问自己以下问题：
- en: Am I currently feeling engaged in resolving a technical challenge or am I just
    trying to get things done?
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我目前是在解决技术挑战中感到投入，还是只是试图完成任务？
- en: Am I afraid of looking stupid by suggesting a more advanced solution to a problem
    because I don't understand it?
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我会因为建议一个更高级的解决方案而害怕看起来很愚蠢，因为我并不理解它吗？
- en: Does the simple solution I'm implementing scale with the overall architecture
    of the current code base overtime or does it just patch the problem?
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我实施的简单解决方案是否会随着时间的推移与当前代码库的整体架构相匹配，或者它只是修补了问题？
- en: 'So, in summary, always ask yourself this simple question when deciding between
    an easy or a complex solution to a problem: Are you choosing the most accessible
    approach because it''s the right thing to do, or because you''re just lazy and
    can''t be bothered to adopt an advanced method that would require greater effort.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总结来说，在决定选择简单或复杂解决方案时，总是问自己这个简单的问题：你是选择最易于访问的方法，因为它是对的，还是因为你只是懒惰，不愿意采用需要更多努力的先进方法？
- en: You often hear programmers say that complexity causes more bugs. This is true
    but, to be more precise, it is unmanaged and misunderstood complexity that results
    in more bugs.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你经常听到程序员说，复杂性会导致更多的错误。这是真的，但更准确地说，是未管理和误解的复杂性导致了更多的错误。
- en: Too many managers
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理者太多
- en: '"We don''t have as many managers as we should, but we would rather have too
    few than too many."'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: “我们拥有的管理者没有我们应有的那么多，但我们宁愿少一些，也不愿有太多。”
- en: '- Larry Page'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '- 拉里·佩奇'
- en: '**What is it?**'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是什么？**'
- en: Managers are great; they offer a unique interface to a pool of complex sub-systems.
    Because video games are an extensive collection of systems that are constantly
    interacting with one another, having managers as interfaces can be very helpful
    in reducing dependencies.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 经理人很棒；他们提供了一个独特的接口，可以访问一组复杂的子系统。由于视频游戏是一个由不断相互交互的系统组成的庞大集合，因此作为接口的管理者可以非常有帮助，有助于减少依赖性。
- en: '**Why is it wrong?**'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？**'
- en: If every class is a manager, you end up with managers being dependent on other
    managers. In other words, managers become sub-systems of other managers until
    you find yourself in the same situation that you were trying to avoid, a spaghetti
    of dependencies. Another negative point is that managers are often implemented
    as singletons, which means that you have global dependencies spread throughout
    your code base.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个类都是一个管理者，最终会导致管理者之间相互依赖。换句话说，管理者变成了其他管理者的子系统，直到你发现自己处于你试图避免的相同境地，一个依赖性的混乱。另一个负面点是，管理者通常被实现为单例，这意味着你在代码库中散布了全局依赖。
- en: 'The following is a code example that showcases a possible software architecture
    that''s too dependent on Manager classes. If you see something similar in your
    source code, you might need to refactor your architecture:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个代码示例，展示了可能过于依赖Manager类的软件架构。如果你在你的源代码中看到类似的情况，你可能需要重构你的架构：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**What is the root cause?**'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？**'
- en: The root cause is usually inexperienced or lazy programmers who don't consider
    the overall architecture of their code base but instead focus on instant results.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 根本原因通常是缺乏经验或懒惰的程序员，他们没有考虑代码库的整体架构，而是专注于即时结果。
- en: '**How to avoid this?**'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？**'
- en: 'Here''s a list of good habits that might help you avoid this anti-pattern:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一份可能帮助你避免这种反模式的良好习惯列表：
- en: Every time you are about to use a specific pattern, always consider using an
    alternative that might be more suitable. In other words, avoid defaulting to the
    easiest solution.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每次你即将使用一个特定的模式时，总是考虑使用一个可能更适合的替代方案。换句话说，避免默认选择最简单的解决方案。
- en: Keep track of your architecture and the patterns that you are using. Raise a
    flag if you see too many classes with Manager in their title.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪你的架构和你正在使用的模式。如果你看到标题中包含Manager的类太多，就提出一个警告。
- en: If you are having issues implementing unit tests for your core systems, it's
    a good indication that there's something wrong in your architecture and it might
    be related to having too many singletons or classes that act like global Managers.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在为你的核心系统实现单元测试时遇到问题，这是一个很好的迹象，表明你的架构中可能存在问题，这可能与有太多的单例或类似全局管理者的类有关。
- en: New patterns, or permutations of established ones, are appearing regularly.
    It's good practice to keep an eye out for them by reading new books on the subject
    matter.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 新的模式，或者现有模式的排列组合，正在定期出现。阅读关于这个主题的新书，以保持对这些模式保持警觉是一个好习惯。
- en: Ravioli code
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 意面代码
- en: '"Organic architecture seeks superior sense of use and a finer sense of comfort,
    expressed in organic simplicity."'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '"有机建筑寻求优越的使用感，以及更细腻的舒适感，体现在有机的简单性中。"'
- en: '- Frank Lloyd Wright'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '- 弗兰克·劳埃德·赖特'
- en: '**What is it?**'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**那是什么？**'
- en: '**Ravioli code** is the result of overzealous encapsulation and an architecture
    that''s divided into too many individual classes.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**意面代码**是过度封装和架构被分割成太多单独类别的结果。'
- en: '**Why is it wrong?**'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？**'
- en: Most programmers have heard the term *Spaghetti code* during their career. It's
    often used to describe unstructured and messy code that's usually produced by
    junior programmers. But Ravioli code can be considered to be the opposite; it's
    often the result of overly designed code made by programmers who have a lot of
    experience but lack the desire to make their work readable to others.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数程序员在其职业生涯中听说过*意大利面代码*这个术语。它通常用来描述无结构和混乱的代码，这种代码通常是由初级程序员产生的。但意面代码可以被认为是相反的；它通常是经验丰富的程序员制作的过度设计的代码的结果，他们缺乏让其他人阅读其工作的愿望。
- en: In both cases, navigating and maintaining a code base suffering from those Anti-Patterns
    can become difficult.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，导航和维护受到这些反模式影响的代码库可能会变得困难。
- en: '**What is the root cause?**'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？**'
- en: A religious and dogmatic approach to programming and design patterns can make
    you write code that looks accurate but unreadable to others.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 对编程和设计模式采取宗教和教条的态度可能会让你写出看起来准确但对其他人来说却难以阅读的代码。
- en: '**How to avoid this?**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？**'
- en: 'Here''s some tips that might help you avoid this anti-pattern:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可能帮助您避免这种反模式的技巧：
- en: Be willing to sacrifice accuracy for readability when necessary
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在必要时，愿意为了可读性而牺牲准确性
- en: Always consider that design patterns do give you structure, but often at the
    sacrifice of readability
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是考虑设计模式确实为你提供了结构，但通常是以牺牲可读性为代价的
- en: Write code for an audience, and remember that those who might read it might
    not have the same skillset as you
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为观众编写代码，并记住可能阅读它的人可能没有与你相同的技能集
- en: Most professional programmers don't consciously use design patterns, often because
    they don't understand them or don't know how to implement them correctly. So,
    to be a great programmer, you have to be more aware than others of all the patterns
    that are available and how to use them properly.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数专业程序员不会自觉地使用设计模式，通常因为他们不理解它们或者不知道如何正确实现它们。因此，要成为一名优秀的程序员，您必须比其他人更了解所有可用的模式以及如何正确使用它们。
- en: Poltergeist
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鬼魂
- en: '"Indeed, it is better to postpone, lest either we complete too little by hurrying,
    or wander too long in completing it."'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '"确实，最好是推迟，以免我们匆忙完成得太少，或者完成它的时间太长。"'
- en: '- Tertullian'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '- 特尔图良'
- en: '**What is it?**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**那是什么？**'
- en: '**Poltergeist** objects are usually the result of code that was implemented
    to solve a temporary architecture issue, but that remained in the code base longer
    than it should have.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**鬼魂**对象通常是解决临时架构问题的代码的结果，但它们在代码库中保留的时间比应该的要长。'
- en: '**Why is it wrong?**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？**'
- en: The density of code that you have to maintain often relates to the frequency
    of bugs you might have to fix every time you make a change. Another side-effect
    of having ghost classes haunting your code base is that it can provoke fear of
    making changes because of what might happen from unknown objects that pop up at
    the wrong moment.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须维护的代码密度通常与你每次进行更改时可能需要修复的bug频率有关。另一个副作用是，鬼魂类在你的代码库中徘徊可能会引起对做出更改的恐惧，因为可能会在错误的时间出现未知对象。
- en: '**What is the root cause?**'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？**'
- en: Poltergeist objects and classes, which can be called **ghosts**, are the result
    of good intentions going bad. Often, their classes were implemented to solve a
    temporary architectural issue, but the programmer never had the chance to complete
    their design, and thus you end up with objects in memory that are present, but
    their reason for being is not apparent.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 可以称为**鬼魂**的鬼魂对象和类，是良好意图变坏的结果。通常，它们的类被实现来解决临时的架构问题，但程序员从未有机会完成它们的设计，因此你最终会得到内存中存在的对象，但它们存在的原因并不明显。
- en: '**How to avoid this?** Here are some tips that might help you avoid this anti-pattern:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？**以下是一些可能帮助您避免这种反模式的技巧：'
- en: Don't use design patterns that you don't fully understand
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要使用你不完全理解的设计模式
- en: Schedule weekly code-base reviews and remove deprecated code
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安排每周代码库审查并删除过时的代码
- en: Use source-control branching strategies to manage the refactoring of significant
    components
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用源代码分支策略来管理重要组件的重构
- en: Add TODO comments in your code and ask your team to review them and take action
    regularly
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的代码中添加 TODO 注释，并要求你的团队定期审查并采取行动
- en: Write the documentation before implementing a new architecture so that your
    team can review your plan and give you feedback before you make changes
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实施新的架构之前编写文档，以便你的团队可以在你做出更改之前审查你的计划并提供反馈
- en: Being a minimalist is a good mindset for a programmer. Code can be complicated,
    but it should never be bloated with things that are useless. Focus always on what
    is essential and remove what is not.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于程序员来说，保持极简主义是一种良好的心态。代码可能很复杂，但它永远不应该因为无用的事物而臃肿。始终关注本质，移除非必要的内容。
- en: Premature optimization
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过早优化
- en: '"Perfection is attained by slow degrees; it requires the hand of time."'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: “完美是通过缓慢的步骤实现的；它需要时间的双手。”
- en: '- Voltaire'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '- 伏尔泰'
- en: '**What is it?**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是它？**'
- en: '**Premature optimization** is the act of optimizing and perfecting your code
    before it''s needed and, as a result, wasting precious production time.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**过早优化**是在代码需要之前对其进行优化和完美化的行为，因此浪费了宝贵的产品时间。'
- en: '**Why is it wrong?**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？**'
- en: Investing more time than needed on optimization is one of the worst ways to
    waste your time and that of your employer. Most devices are getting faster every
    year, and, thus, programmers are less required to optimize their code to run faster
    on limited hardware.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化上投入比所需更多的时间是浪费时间的一种最糟糕的方式，同时也浪费了雇主的时间。大多数设备每年都在变快，因此程序员越来越不需要优化他们的代码以在有限的硬件上运行得更快。
- en: '**What is the root cause?**'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？**'
- en: A lack of experience is usually the root cause.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 经验不足通常是根本原因。
- en: '**How to avoid this?**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？**'
- en: Always profile your code before optimizing it. For those who might not know,
    **profiling** is the act of using diagnostic tools that help you analyze the performance
    of your system. Often, you will discover that the performance bottlenecks in your
    code are limited to specific areas in your source code, so by focusing on those,
    you can gain speed without having to refactor your entire code base.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在优化代码之前，始终对其进行性能分析。对于那些可能不知道的人来说，**性能分析**是使用诊断工具来分析系统性能的行为。通常，你将发现代码中的性能瓶颈仅限于源代码的特定区域，因此通过关注这些区域，你可以提高速度，而无需重构整个代码库。
- en: Like a good mechanic, a programmer should have a toolbox filled with tools that
    can help them work faster and better.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 就像一位优秀的机械师一样，程序员应该有一个工具箱，里面装满了可以帮助他们更快、更好地工作的工具。
- en: Vendor lock-in
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 供应商锁定
- en: '"It''s not a faith in technology. It''s faith in people."'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “这不是对技术的信仰。这是对人们的信仰。”
- en: '- Steve Jobs'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '- 史蒂夫·乔布斯'
- en: '**What is it?**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**什么是它？**'
- en: '**Vendor lock-in** happens when you start integrating third-party components,
    plugins, frameworks, or libraries in your code base, but become dependent on them
    to make your code function properly.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '**供应商锁定**发生在你开始在代码库中集成第三方组件、插件、框架或库时，但变得依赖于它们以使代码正常工作。'
- en: '**Why is it wrong?**'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？**'
- en: In the context of a Unity project, being dependent on third-party libraries
    can limit your ability to upgrade to a new version of Unity because you might
    need to wait for patches from the vendor in order to avoid going backward.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 项目的背景下，依赖于第三方库可能会限制你升级到 Unity 的新版本的能力，因为你可能需要等待供应商的补丁以避免回退。
- en: '**What is the root cause?** Buying Plug and Play components and libraries from
    third-party vendors saves a lot of production time, so it''s very tempting to
    use them to a point where you become too dependent on them.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？** 从第三方供应商购买即插即用的组件和库可以节省大量的生产时间，因此很容易过度依赖它们。'
- en: '**How to avoid this?** You should research a vendor before buying their products
    and integrating them into your code base. For example, if they are not updating
    their support forums, it might be an indication that they are not planning to
    release updates shortly, and this might limit your capacity to get immediate support
    if required.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？** 在购买他们的产品并将它们集成到代码库之前，你应该研究供应商。例如，如果他们没有更新他们的支持论坛，这可能表明他们没有计划在不久的将来发布更新，这可能会限制你在需要时获得即时支持的能力。'
- en: As a Unity developer, you should always check the Unity Asset store before writing
    anything because there's probably someone who has already done what you want to
    do, but in a better way.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名Unity开发者，你在编写任何东西之前应该始终检查Unity资产商店，因为可能已经有其他人已经以更好的方式完成了你想要做的事情。
- en: Management by numbers
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按数字管理
- en: '**What is it?**'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是什么？**'
- en: '**Managing by numbers** is the tendency to take management decisions based
    heavily on statistics that are generated by tools, such as Excel spreadsheets
    or reports, rather than on an accurate analysis of what is going on in a project.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**按数字管理**是指基于由工具（如Excel电子表格或报告）生成的统计数据来做出管理决策，而不是基于对项目实际情况的准确分析。'
- en: '**Why is it wrong?**'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？**'
- en: Numbers expressed in productivity reports often don't mirror the quality or
    the potential of a team. They can hide issues that are provoked by dynamic human
    interactions, instead of exposing them. This focus on numbers can blind project
    managers during critical decision-making processes. In other words, can you define
    the level of productivity of a programmer by the amount of bugs they fix in a
    week? The answer is *no*, because the complexity of a particular bug is not a
    constant. You can't evaluate a programmer who fixes five simple bugs in a week
    the same way as another programmer who resolves a single but very complex one
    in the same period.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产力报告中表达的数据往往不能反映团队的质量或潜力。它们可能隐藏由动态人际互动引起的问题，而不是揭示它们。这种对数字的关注可能会在关键决策过程中使项目经理失明。换句话说，你能通过程序员一周内修复的bug数量来定义程序员的效率吗？答案是*不*，因为特定bug的复杂性不是恒定的。你不能用同样的方式评估一周内修复五个简单bug的程序员和在同一时期内解决一个但非常复杂的bug的程序员。
- en: '**What is the root cause?**'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？**'
- en: Numbers are easy to explain and justify, especially when communicating with
    higher management that doesn't have the technical expertise to evaluate a project
    beyond very general indicators. This approach can result in an organization that
    spends its time focusing on figures instead of actual results.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 数字容易解释和证明，尤其是在与没有技术专长、只能通过非常一般的指标评估项目的更高管理层沟通时。这种方法可能导致一个组织花费时间关注数字而不是实际结果。
- en: '**How to avoid this?**'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？**'
- en: 'Senior programmers should challenge project managers who are using general
    statistics and numbers to evaluate the progress of a project by offering more
    concrete indicators of quality and improvement. Here is an example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 高级程序员应该挑战那些使用一般统计数据和数字来评估项目进度的项目经理，通过提供更具体的质量改进指标。以下是一个例子：
- en: Update versus downtime of services
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务更新与停机时间
- en: The rate of bugs found and fixed over time
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随时间发现的和修复的bug数量
- en: Probably the most critical thing you can do to guarantee yourself a long career
    in the tech industry after you hit 40 is to go back to school and get a diploma
    or certification in management. This type of education will permit you to transition
    into a long-term leadership role, which companies will probably encourage you
    to consider after you have attained several decades of experience.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在你40岁之后，为了确保自己在科技行业有一个长期的职业生涯，最关键的事情之一是回到学校，获得管理学的文凭或证书。这种教育将使你能够过渡到长期领导角色，公司可能会在你积累了数十年经验后鼓励你考虑这一角色。
- en: The technical interview
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术面试
- en: '"I choose a lazy person to do a hard job. Because a lazy person will find an
    easy way to do it."'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: “我选择一个懒惰的人来做一件困难的工作。因为一个懒惰的人会找到一种简单的方法来完成它。”
- en: -Bill Gates
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '- 比尔·盖茨'
- en: '**What is it?**'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '**这是什么？**'
- en: The concept of a technical interview in the hiring process of a programmer might
    not sound like an anti-pattern in itself, but I'm proposing that it is, and one
    that has side-effects in the quality of source code produced by a team. For those
    who have never experienced a programmer technical interview, it involves a series
    of tests that are given to the candidate to validate their skills and knowledge.
    The exams may include writing answers about programming on a whiteboard, a piece
    of paper, or in an online test environment. I consider the technical interview
    an industry-wide anti-pattern.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序员招聘过程中，技术面试的概念本身可能听起来不是一个反模式，但我提出它是一个，并且它会对团队生成的源代码质量产生副作用。对于那些从未经历过程序员技术面试的人来说，它涉及一系列测试，这些测试是给候选人以验证他们的技能和知识的。考试可能包括在白板上、一张纸上或在在线测试环境中编写关于编程的答案。我认为技术面试是一个行业范围内的反模式。
- en: '**Why is it wrong?** The core issue of the technical interview process is that
    you can only test for what you already know. Thus, you will end up recruiting
    candidates who are mirror images of yourself. As a result, you will end up building
    a team that lacks a range of different skills. This approach is valid if your
    only goal is to have a very specialized team, but this is a rare case. Most companies
    need to have employees with varied skillsets to balance out any weaknesses in
    the organization.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么这是错误的？** 技术面试流程的核心问题是，你只能测试你已经知道的内容。因此，你最终会招聘到与你镜像般的候选人。结果，你将组建一个缺乏各种不同技能的团队。如果您的唯一目标是拥有一个非常专业的团队，这种方法是有效的，但这很少见。大多数公司需要拥有技能多样的员工来平衡组织中的任何弱点。'
- en: For example, if your subject of focus of your technical interview revolves around
    data structures because this is your strength as the interviewer, then you might
    end up eliminating candidates who are weaker in that area but stronger in other areas,
    such as design patterns. But because you are evaluating only on what you consider
    to be important, based on your technical bias, you might miss out on hiring candidates
    who could bring new skills to your team.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你的技术面试的重点是数据结构，因为这是你作为面试官的优势，那么你可能会淘汰在该领域较弱但在其他领域（如设计模式）较强的候选人。但是，因为你只根据你认为是重要的技术偏见来评估，你可能会错过那些能为你的团队带来新技能的候选人。
- en: '**What is the root cause?** The main reason why the hiring process of programmers
    is so inconsistent throughout our industry is that few people understand what
    programmers do and how to evaluate them as candidates. So, hiring managers prefer
    to judge applicants by their final technical test scores, thereby reducing the
    value of a candidate to a single number.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**根本原因是什么？** 我们行业程序员招聘流程之所以如此不一致的主要原因在于，很少有人了解程序员的工作以及如何评估他们作为候选人的能力。因此，招聘经理更倾向于根据候选人的最终技术测试分数来评判他们，从而将候选人的价值简化为一个单一的数字。'
- en: 'There are also some types of interviewer behavior patterns or processes that
    may also be part of the root cause:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些面试官的行为模式或流程也可能是根本原因的一部分：
- en: '**The Riddler**: A riddler is an interviewer who wants to test the skills of
    a candidate by asking questions in the form of clever puzzles. This approach often
    ends up confusing most candidates and turning the interview process into a stressful
    game.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**难题制造者**：难题制造者是一种通过提出巧妙谜题来测试候选人技能的面试官。这种方法通常会让大多数候选人感到困惑，并将面试过程变成一场压力游戏。'
- en: '**The Hot Seat**: The infamous hot seat interview type is similar to a police
    interrogation with the goal of isolating a candidate''s weaknesses and strengths
    with a rapid succession of questions. Often, one interviewer will take the role
    of the *bad cop* by being more aggressive in their questioning, while another
    plays the *good cop* to assist the candidate if they take too long to answer some
    questions. This approach ends up burning out the candidate or forcing them to
    answer in a way that they think is what the interviewers want to hear. This is
    not a suitable method to learn about the potential of a candidate.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**热椅子**：臭名昭著的热椅子面试类型类似于警察审讯，目的是通过快速连续的问题来隔离候选人的弱点和优势。通常，一个面试官会扮演“坏警察”的角色，在提问时更加激进，而另一个则扮演“好警察”的角色，在候选人回答某些问题耗时过长时提供帮助。这种方法最终会耗尽候选人的精力或迫使他们以他们认为面试官想要听到的答案来回答。这不是了解候选人潜力的合适方法。'
- en: '**The Whiteboard**: The whiteboard interview consists of having the candidate
    answer technical questions by writing their answer on a whiteboard. There''s a
    particular issue with this method of evaluating candidates; most programmers never
    write code on paper or whiteboards during their career, so when forced to do so
    during a stressful situation such as an interview will result in a lot of false
    negatives about their actual skill level.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**白板面试**：白板面试包括让候选人通过在白板上写下答案来回答技术问题。这种评估候选人的方法存在一个特定的问题；大多数程序员在他们的职业生涯中从未在纸上或白板上编写过代码，所以当在压力情境下（如面试）被迫这样做时，会导致大量关于他们实际技能水平的错误否定。'
- en: '**How to avoid this?** Almost everyone agrees that hiring good programmers
    is a costly and challenging process, but this means that you need to be more creative
    in the way you approach technical interviews, so you don''t end up rejecting excellent
    candidates for ones who are just clones of who you already have in your team.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**如何避免这种情况？** 几乎每个人都同意，招聘优秀的程序员是一个昂贵且具有挑战性的过程，但这意味着你需要更有创意地处理技术面试，以免拒绝那些只是你团队现有成员复制品的优秀候选人。'
- en: 'Here are some tips that can help you avoid this anti-pattern:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些可以帮助你避免这种反模式的提示：
- en: Try to see what is unique and valuable in a candidate. Get a candidate who can
    teach you and your team something new.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试看看候选人有什么独特和有价值的。找一个能教你和你的团队新东西的候选人。
- en: Don't probe for weaknesses. Instead, try to understand a candidate's strengths
    and see whether they balance with their potential weaknesses.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要寻找弱点。相反，尝试理解候选人的优势，并看看它们是否与他们的潜在弱点相平衡。
- en: Always take into consideration the fact that there's a variety of skills that
    a programmer might have in the industry, depending on their specialization. For
    example, the average web developer might not be as strong at math as a 3D programmer,
    but they might be better at normalizing databases or designing client-server applications.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是考虑到程序员在行业中的技能可能有很多，这取决于他们的专业。例如，平均的网页开发者可能不如3D程序员擅长数学，但他们可能在数据库规范化或客户端-服务器应用程序设计方面更出色。
- en: When a candidate fails to answer a technical question, ask yourself whether
    this is because they don't understand it, might not have the skills to do so,
    or might be too nervous because of the examination process. In other words, the
    context of the interview is important, not just the final score, when evaluating
    the actual skill level of an applicant.
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当候选人未能回答一个技术问题时，问问自己这是否是因为他们不理解它，可能没有足够的技能去做，或者可能因为考试过程而过于紧张。换句话说，在评估申请人的实际技能水平时，面试的背景很重要，而不仅仅是最终分数。
- en: Even if you are a very experienced professional programmer, you should never
    underestimate the potential difficulty of a modern-day technical interview process.
    Your years of experience might be a disadvantage because interviewers usually
    want to evaluate whether you still know your computer science basics. In other
    words, you might have to answer questions about subjects that you might not have
    reviewed since university. So it's a good idea to dust off those old school books
    and study the basics before going into an interview.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你是一位经验丰富的专业程序员，你也绝不能低估现代技术面试过程的潜在难度。你的多年经验可能成为一种劣势，因为面试官通常想评估你是否仍然了解你的计算机科学基础知识。换句话说，你可能需要回答一些自大学以来你可能没有复习过的主题的问题。因此，在参加面试之前，翻阅那些旧课本并学习基础知识是个好主意。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have arrived at the end of our journey. Throughout this book, we explored
    various design patterns, each with their unique abilities. The most important
    takeaway from this book is that before you start writing a single line of code,
    you should always verify whether there's a pattern that matches the design intention
    of a system before building it. This approach avoids reinventing the wheel and
    offers you a consistent methodology to programming that will help you throughout
    your career.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经到达了旅程的终点。在这本书中，我们探讨了各种设计模式，每种模式都有其独特的功能。这本书最重要的收获是，在开始编写代码之前，你应该始终验证是否存在与系统设计意图相匹配的模式。这种方法避免了重复造轮子，并为你提供了一种一致的编程方法，这将有助于你整个职业生涯。
- en: But this chapter also exposes that what looks like a valid design or management
    decision can quickly go wrong without awareness of the motivations and potential
    consequences behind it. In other words, as programmers, we need to be mindful
    of the potential implications of our decisions, at every level, or we can fall
    victim to Anti-Patterns.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 但这一章也揭示了看似合理的设计或管理决策，如果没有意识到其背后的动机和潜在后果，可能会迅速出错。换句话说，作为程序员，我们需要在每个层面上都意识到我们决策的潜在影响，否则我们可能会成为反模式的受害者。
- en: Exercise
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: For our final exercise, I'm making you a list of daily habits that will ensure
    a long and prosperous career as a programmer in the game industry. However, a
    failure to enhance your skills gradually will almost guarantee that you will end
    up getting stuck in mediocrity and possibly irrelevance. Trust me; it happened
    to me until, one day, I decided to change my habits and focus again on gaining
    true mastery over my craft.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最终练习，我为你列出了一个日常习惯清单，这将确保你在游戏行业中作为程序员的长期和成功职业生涯。然而，如果你不逐渐提高你的技能，几乎可以肯定你会陷入平庸，甚至可能变得无关紧要。相信我；这发生在我身上，直到有一天，我决定改变我的习惯，再次专注于真正掌握我的技艺。
- en: 'Here are some good habits to form:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些良好的习惯要养成：
- en: Learn at least one new programming language per year.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年至少学习一种新的编程语言。
- en: Check your skills regularly by taking practice-interview programming exams.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过参加练习面试编程考试来定期检查你的技能。
- en: Attain a new technical certification every year, such as the PMP, CCNA, and
    CEH.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年获得一项新的技术认证，如PMP、CCNA和CEH。
- en: Make a list of all your weaknesses as a programmer and work on them every day.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出你作为程序员的全部弱点，并每天努力克服它们。
- en: Try to attend at least one technology-related meet-up event or conference per
    week.
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试每周至少参加一次与技术相关的聚会活动或会议。
- en: Join technical professional organizations, such as ACM and IEEE, and use the
    resources on offer.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加入技术专业组织，如ACM和IEEE，并使用提供的资源。
- en: Keep yourself up to date in terms of what's happening by reading tech and game
    industry news every day.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过每天阅读技术和游戏行业新闻来保持对发生的事情的了解。
- en: Take courses on subjects from other fields that might be related to yours, including
    management, UI design, and animation.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习其他领域可能与你的领域相关的课程，包括管理、UI设计和动画。
- en: Make yourself a list of blogs and YouTube channels that are related to technology
    and programming. Read at least one blog post and watch a video per day.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为自己列一个与技术和编程相关的博客和YouTube频道的清单。每天至少阅读一篇博客文章和观看一个视频。
- en: Attend a coding bootcamp or subscribe to at least one training program per month.
    Don't forget to complete them.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每月参加一次编码训练营或订阅至少一个培训课程。别忘了完成它们。
- en: Read at least two books about programming or related fields per year.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每年至少阅读两本关于编程或相关领域的书籍。
- en: Open a GitHub account and contribute to at least one open source project, even
    if it's just a couple of lines of code. Get used to the process and the community.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开一个GitHub账户，并至少为一个开源项目做出贡献，即使只是几行代码。习惯这个过程和社区。
- en: Learn meditation; it's a stressful job; knowing how to stay calm under pressure
    will help you maintain your mental health and avoid burning out.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习冥想；这是一份压力很大的工作；知道如何在压力下保持冷静将有助于你保持心理健康并避免过度劳累。
- en: For our final exercise, I would recommend that you make a list of your favorite
    patterns and ask yourself why you like them. Is it because they're easy to implement,
    or because they resolve actual architectural issues in your code? In other words,
    make sure that you don't use a specific pattern for the wrong reasons, never be
    lazy, and always be conscious with your choices when writing code.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的最终练习，我建议你列出你最喜欢的模式，并问问自己为什么喜欢它们。是因为它们易于实现，还是因为它们解决了你代码中的实际架构问题？换句话说，确保你不会因为错误的原因而使用特定的模式，永远不要懒惰，在编写代码时始终保持清醒的选择。
- en: Further reading
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**Organizations**:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**组织**:'
- en: '*ACM*'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*ACM*'
- en: '[https://www.acm.org](https://www.acm.org)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.acm.org](https://www.acm.org)'
- en: '*IEEE*'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*IEEE*'
- en: '[https://www.ieee.org](https://www.ieee.org)'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.ieee.org](https://www.ieee.org)'
- en: '**Blogs**:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '**博客**:'
- en: '*Coding Horror*'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编码恐怖*'
- en: '[https://blog.codinghorror.com](https://blog.codinghorror.com)'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://blog.codinghorror.com](https://blog.codinghorror.com)'
- en: '*Joel on Software*'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*乔尔·汉斯勒姆博客*'
- en: '[https://www.joelonsoftware.com](https://www.joelonsoftware.com)'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.joelonsoftware.com](https://www.joelonsoftware.com)'
- en: '*Scott Hanselman Blog*'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*斯科特·汉斯勒姆博客*'
- en: '[https://www.hanselman.com/blog/](https://www.hanselman.com/blog/)'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.hanselman.com/blog/](https://www.hanselman.com/blog/)'
- en: '*The Crazy Programmer*'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*疯狂程序员*'
- en: '[https://www.thecrazyprogrammer.com](https://www.thecrazyprogrammer.com)'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.thecrazyprogrammer.com](https://www.thecrazyprogrammer.com)'
- en: '**YouTube**:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '**YouTube**:'
- en: '*Computerphile*'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*计算机爱好者*'
- en: '[https://www.youtube.com/user/Computerphile](https://www.youtube.com/user/Computerphile)'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/user/Computerphile](https://www.youtube.com/user/Computerphile)'
- en: '*Success in Tech*'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*技术成功*'
- en: '[https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw](https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw)'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw](https://www.youtube.com/channel/UC-vYrOAmtrx9sBzJAf3x_xw)'
- en: '*TED*'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*TED*'
- en: '[https://www.youtube.com/user/TEDtalksDirector](https://www.youtube.com/user/TEDtalksDirector)'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/user/TEDtalksDirector](https://www.youtube.com/user/TEDtalksDirector)'
- en: '*TechLead*'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*TechLead*'
- en: '[https://www.youtube.com/channel/UC4xKdmAXFh4ACyhpiQ_3qBw](https://www.youtube.com/channel/UC4xKdmAXFh4ACyhpiQ_3qBw)'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.youtube.com/channel/UC4xKdmAXFh4ACyhpiQ_3qBw](https://www.youtube.com/channel/UC4xKdmAXFh4ACyhpiQ_3qBw)'
- en: '**Tech news**:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '**科技新闻**:'
- en: '*Slashdot*'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Slashdot*'
- en: '[https://slashdot.org](https://slashdot.org)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://slashdot.org](https://slashdot.org)'
- en: '*Wired*'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Wired*'
- en: '[https://www.wired.com](https://www.wired.com)'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.wired.com](https://www.wired.com)'
- en: '*Gamasutra*'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Gamasutra*'
- en: '[http://www.gamasutra.com](http://www.gamasutra.com)'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[http://www.gamasutra.com](http://www.gamasutra.com)'
- en: GamesIndustry.biz
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GamesIndustry.biz
- en: '[https://www.gamesindustry.biz](https://www.gamesindustry.biz)'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.gamesindustry.biz](https://www.gamesindustry.biz)'
- en: '**Online courses**:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '**在线课程**:'
- en: '*Udemy*'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Udemy*'
- en: '[https://www.udemy.com](https://www.udemy.com)'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.udemy.com](https://www.udemy.com)'
- en: '*Lynda*'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Lynda*'
- en: '[https://www.lynda.com](https://www.lynda.com)'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.lynda.com](https://www.lynda.com)'
- en: '*Pluralsight*'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pluralsight*'
- en: '[https://www.pluralsight.com](https://www.pluralsight.com)'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.pluralsight.com](https://www.pluralsight.com)'
- en: MasterClass
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MasterClass
- en: '[https://www.masterclass.com](https://www.masterclass.com)'
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://www.masterclass.com](https://www.masterclass.com)'
- en: '**Books**:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**书籍**:'
- en: '*Anti-patterns: Managing Software Organizations and People*, by Colin J. Neill,
    Philip A. Laplante, and Joanna F. DeFranco [https://www.crcpress.com/Antipatterns-Managing-Software-Organizations-and-People-Second-Edition/Neill-Laplante-DeFranco/p/book/9781439861868](https://www.crcpress.com/Antipatterns-Managing-Software-Organizations-and-People-Second-Edition/Neill-Laplante-DeFranco/p/book/9781439861868)'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Anti-patterns: Managing Software Organizations and People*, by Colin J. Neill,
    Philip A. Laplante, and Joanna F. DeFranco [https://www.crcpress.com/Antipatterns-Managing-Software-Organizations-and-People-Second-Edition/Neill-Laplante-DeFranco/p/book/9781439861868](https://www.crcpress.com/Antipatterns-Managing-Software-Organizations-and-People-Second-Edition/Neill-Laplante-DeFranco/p/book/9781439861868)'
