- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Combining Data Sources Using GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to GraphQL, a service technology that
    provides a more modern approach to combining data from various sources and then
    providing a standard way to query that data.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a service that supports GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining GraphQL queries for EF Core models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building .NET clients for a GraphQL service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing GraphQL mutations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing GraphQL subscriptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 8*, *Building and Securing Web Services Using Minimal APIs*, you
    learned how to define a Web API service by mapping request path endpoints to lambda
    expressions or methods that return the response. Any parameters and the format
    of responses are under the control of the service. A client cannot ask for what
    they exactly need or use more efficient data formats.
  prefs: []
  type: TYPE_NORMAL
- en: If you completed the online-only section, *Exposing Data via the Web Using OData*,
    then you know that OData has a built-in query language for the client to control
    what data they want to be returned. However, OData has a rather old-fashioned
    approach and is tied to the HTTP standard, for example, using query strings in
    an HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: If you would prefer to use a more modern and flexible technology to combine
    and expose your data as a service, then a good alternative is **GraphQL**.
  prefs: []
  type: TYPE_NORMAL
- en: Like OData, GraphQL is a standard for describing your data and then querying
    it that gives the client control over exactly what they need. It was developed
    internally by Facebook in 2012 before being open sourced in 2015, and it is now
    managed by the GraphQL Foundation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the key benefits of GraphQL over OData are:'
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL does not require HTTP because it is transport-agnostic, so you could
    use alternative transport protocols like WebSockets or TCP.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GraphQL has more client libraries for different platforms than OData has.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GraphQL has a single endpoint, usually simply `/graphql`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: GraphQL query document format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'GraphQL uses its own document format for its queries, which are a bit like
    JSON, but GraphQL queries do not require commas between field names, as shown
    in the following query, which requests some fields and related data for the product
    with an ID of `23`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The official media type for GraphQL query documents is `application/graphql`.
  prefs: []
  type: TYPE_NORMAL
- en: Requesting fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The most basic GraphQL query requests one or more fields from a type, for example,
    requesting three fields for each `customer` entity, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The response is in the JSON format, for example, an array of `customer` objects,
    as shown in the following document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Specifying filters and arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'With an HTTP or REST-style API, the caller is limited to only passing parameters
    when the API predefines that. With GraphQL, you can set parameters anywhere in
    the query, for example, filtering orders by order date and by the country of the
    customer who made the order, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note that although GraphQL uses camelCase for entity, property, and parameter
    names, you should use PascalCase for query names.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might want to pass values for named parameters instead of hardcoding them,
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'You can learn more about the GraphQL query language at the following link:
    [https://graphql.org/learn/queries/](https://graphql.org/learn/queries/).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding other GraphQL capabilities
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As well as queries, other standard GraphQL features are mutations and subscriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Mutations** enable you to create, update, and delete resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscriptions** enable a client to get notified when resources change. They
    work best with additional communication technologies like WebSockets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the ChilliCream GraphQL platform
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: GraphQL.NET is one of the most popular platforms for implementing GraphQL with
    .NET. In my opinion, GraphQL.NET requires too much configuration for even the
    most basic example, and the documentation is frustrating. I have a feeling that,
    although it is powerful, it implements the GraphQL specification in a one-to-one
    manner instead of rethinking how a .NET platform could make it easier to get started.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn about GraphQL.NET at the following link: [https://graphql-dotnet.github.io/](https://graphql-dotnet.github.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this book, I looked for alternatives, and I found exactly what I was looking
    for. ChilliCream is a company that has created a whole platform to work with GraphQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Hot Chocolate** enables you to create GraphQL services for .NET.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strawberry Shake** enables you to create GraphQL clients for .NET.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Banana Cake Pop** enables you to run queries and explore a GraphQL endpoint
    using a Monaco-based GraphQL IDE.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Green Donut** enables better performance when loading data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike some other packages that can be used to add support for GraphQL, ChilliCream
    packages are designed to be as easy to implement as possible, using conventions
    and simple POCO classes instead of complex types and special schemas. It works
    in a similar way to how Microsoft might have built a GraphQL platform for .NET,
    with sensible defaults and conventions rather than lots of boilerplate code and
    configuration.
  prefs: []
  type: TYPE_NORMAL
- en: As ChilliCream says on its home page, *“We at ChilliCream build the ultimate
    GraphQL platform. Most of our code is open-source and will forever remain open-source.”*
  prefs: []
  type: TYPE_NORMAL
- en: 'The GitHub repository for Hot Chocolate is at the following link: [https://github.com/ChilliCream/hotchocolate](https://github.com/ChilliCream/hotchocolate).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a service that supports GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There is no `dotnet` `new` project template for GraphQL, so we will use the
    **ASP.NET Core Empty** project template. Even though GraphQL does not have to
    be hosted on a web server because it is not tied to HTTP, it is a sensible choice
    to get started. We will then add a package reference for GraphQL support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Empty** / `web`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter12`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.GraphQL.Service`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other Visual Studio 2022 options:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the project file, add a package reference for Hot Chocolate hosted in ASP.NET
    Core, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Version 13.6.0 was in preview at the time of writing. To use the most recent
    preview version, you can set it to `13.6-*`. But I recommend that you go to the
    following link and then reference the latest GA version: [https://www.nuget.org/packages/HotChocolate.AspNetCore/](https://www.nuget.org/packages/HotChocolate.AspNetCore/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the project file, treat warnings as errors and disable the warning `AD0001`,
    as highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Properties` folder, in `launchSettings.json`, for the `https` profile,
    modify the `applicationUrl` to use port `5121` for `https` and port `5122` for
    `http`. Then, add a `launchUrl` of `graphql`, as highlighted in the following
    configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.GraphQL.Service` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining the GraphQL schema for Hello World
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first task is to define what we want to expose as GraphQL models in the
    web service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define a GraphQL query for the most basic `Hello World` example, which
    will respond with plain text when a request for a greeting is made:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.GraphQL.Service` project/folder, add a class file named `Query.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the class to have a method named `GetGreeting` that returns the plain
    text `"Hello, World!"`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import the namespace where we defined the `Query` class, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section to configure services, after the call to `CreateBuilder`, add
    a statement to add GraphQL server-side support, and add the query type to the
    collection of registered services, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the statement that maps a `GET` request to return a more useful plain
    text message, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section to configure the HTTP pipeline, before the call to `Run`, add
    a statement to map GraphQL as an endpoint, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the `Northwind.GraphQL.Service` web project, using the `https` profile
    without debugging:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the **https** profile, start
    the project without debugging, and note that the browser starts automatically.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code, then enter the command `dotnet run --launch-profile
    https`, start Chrome manually, and navigate to `https://localhost:5121/graphql`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note the **BananaCakePop** user interface, and then click the **Create Document**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the top-right corner, click the **Connection Settings** button, as shown
    in *Figure 12.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: A new BananaCakePop document and connection settings button'
  prefs: []
  type: TYPE_NORMAL
- en: 'In **Connection Settings**, confirm that the **Schema Endpoint** is correct,
    and then click **Cancel**, as shown in *Figure 12.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Reviewing the BananaCakePop connection settings'
  prefs: []
  type: TYPE_NORMAL
- en: At the top of the **untitled 1** document, click the **Schema Reference** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Schema Reference** tab, note “The `Query` type is a special type that
    defines the entry point of every GraphQL query”, and it has a field named `greeting`
    that returns a `String!` value. The exclamation mark indicates that the value
    will *not* be `null`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note there is only one type defined,
    the special `Query` object with its `greeting` field, which is a non-null `String`
    value, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Writing and executing GraphQL queries
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we know the schema, we can write and run a query:'
  prefs: []
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, in the **untitled 1** document, click the **Operations**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the left-hand side, type an open curly brace, `{`, and note that a close
    curly brace, `}`, is written for you.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the letter `g` , and note that the autocomplete shows it recognizes the
    `greeting` field, as shown in *Figure 12.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Autocomplete for the greeting field'
  prefs: []
  type: TYPE_NORMAL
- en: Press *Enter* to accept the autocomplete suggestion.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Run** button and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Naming GraphQL queries aka operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The query that we wrote was unnamed. We could also have created it as a named
    query, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Named queries allow clients to identify queries and responses for telemetry
    purposes, for example, when hosting in Microsoft Azure cloud services and monitoring
    using Application Insights.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding field conventions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The C# method we created in the `Query` class was named `GetGreeting`, but
    when querying it, we used `greeting`. The `Get` prefix on method names that represent
    fields in GraphQL is optional. Let’s see some more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Query.cs`, add two more methods without the `Get` prefix, as highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note the updated schema, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: C# methods use PascalCase. GraphQL fields use camelCase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Operations** tab, and modify the query to specify a name and request
    the `rollTheDie` field, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run** again multiple times. Note that the responses contain a random
    number between 1 and 6, and a history of requests and responses is stored for
    the current browser session, as shown in *Figure 12.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Executing a named query and the history of requests and responses'
  prefs: []
  type: TYPE_NORMAL
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining GraphQL queries for EF Core models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have a basic GraphQL service operating successfully, let’s extend
    it to enable querying the Northwind database.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for EF Core
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We must add another Hot Chocolate package to allow easy dependency service
    integration of our EF Core database context with GraphQL query classes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a package reference for Hot Chocolate integration with EF Core and a project
    reference to the Northwind database context project, as highlighted in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The path to the project must not have a line break. All Hot Chocolate packages
    should have the same version number.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.GraphQLService` project at the command prompt or terminal
    using `dotnet build`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you reference a project outside of the current solution, you must build
    the project at least once at the command prompt or terminal before you can use
    the Visual Studio 2022 **Build** menu to compile it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace to work with our EF Core model for the
    Northwind database, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a statement after the `CreateBuilder` method to register the `Northwind`
    database context class, and add a statement after adding the GraphQL server support
    to register the `NorthwindContent` class for dependency injection, as highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Query.cs`, add statements to define an object graph type that has some
    types of queries to return a list of categories, a single category, products for
    a category, products with a minimum unit price, and all products, as highlighted
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exploring GraphQL queries with Northwind
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we can test writing GraphQL queries for the categories and products in
    the Northwind database:'
  prefs: []
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or the cloud, then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note the query and type definitions
    for `Category`, as partially shown in *Figure 12.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Schema for querying the Northwind categories and products using
    GraphQL'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the full definitions in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Operations** tab, and write a named query to request the ID, name,
    and description fields for all categories, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in *Figure 12.6* and the following
    partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B19587_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Getting all categories'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **+** to open a tab for a new document named **untitled 2**, and
    write a query to request the category with ID `2`, including the ID, name, and
    price of its products, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that the `I` in `categoryId` is uppercase.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the GraphQL web service command prompt or terminal, note the SQL statements
    executed for this query, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Although the GraphQL query did not need the picture of each category and only
    needed the ID, name, and unit price, the dynamically-generated queries from EF
    Core returned all properties.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **+** tab to open a new tab, and write a query to request the ID,
    name, and units in stock of the products in the category with ID `1`, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** tab to open a new tab, and write a query to request the ID,
    name, and units in stock of products, along with their category names, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** tab to open a new tab, and write a query to request the ID
    and name of a category, select the category by specifying its category ID, and
    include the ID and name for each of its products. The ID of the category will
    be set using a variable, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the **Variables** section, define a value for the variable, as shown in
    the following code and in *Figure 12.7*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/B19587_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Executing a GraphQL query with a variable'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Run**, and note the response, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** tab to open a new tab, write a query to request the ID and
    name of a category, select the category by specifying its category ID, and include
    the ID and name for each of its products. The ID of the category will be set using
    a variable, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the **Variables** section, define a value for the variable, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing paging support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When we request products using the `GetProducts` method (the `products` query),
    all 77 products are returned. Let’s add paging support:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Query.cs`, add statements to define a query to return all products, using
    paging, and note that its implementation is the same as the query for products
    without paging, but it is decorated with the `[UsePaging]` attribute, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: The `[UsePaging]`, `[UseFiltering]`, and `[UseSorting]`
    attributes must be decorated onto a query method that returns `IQueryable<T>`
    , allowing GraphQL to dynamically configure the LINQ query before executing it
    against the data store.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note the queries named `products`
    (without paging) and `productsWithPaging`, which documents how to use the query
    to request a page of products, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Operations** tab, and write a named query to request the first
    page of 10 products, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, including the `pageInfo` section, which
    tells us that there is another page of products and the cursor for this page ranges
    from `MA==` to `OQ==`, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** to open a new tab, and write a named query to request the second
    page of 10 products, by specifying that we want the cursor that starts after `OQ==`,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, including the `pageInfo` section, which
    tells us that there is another page of products and the cursor for this page ranges
    from `MTA=` to `MTk=`, as shown in the following partial output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing filtering support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we explored queries earlier in this chapter, we predefined some queries
    with parameters, for example, a query that returns all the products in a category
    by passing a `categoryId` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: However, what if you do not know ahead of time what filtering you want to perform?
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add filtering support to our GraphQL queries:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, add a call to `AddFiltering` after calling `AddGraphQLServer`,
    as highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Query.cs`, decorate the `GetProducts` method with the `[UseFiltering]`
    attribute, as highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Scheme Definition** , and note that the `products` query now accepts
    a filter input, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Scroll down the schema definition to find `ProductFilterInput`, and note the
    filtering options include Boolean operators like `and` and `or`, as well as field
    filters like `IntOperationFilterInput` and `StringOperationFilterInput`, as shown
    in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Scroll down the schema definition to find `IntOperationFilterInput` and `StringOperationFilterInput`,
    and note the operations you can use with them, like equals (`eq`), not equals
    (`neq`), in an array (`in`), greater than (`gt`), `contains`, and `startsWith`,
    as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Operations**, and then write a named query to request products with
    more than `120` units in stock, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** to open a new tab, click **Operations**, and then write a named
    query to request products whose names start with `Cha`, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the GraphQL service command prompt or terminal, note the EF Core-generated
    SQL filters using parameters, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing sorting support
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable sorting with a GraphQL service, call the `AddSorting` method, as
    highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, decorate a query method that returns `IQueryable<T>` with the `[UseSorting]`
    attribute, as highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In a query, apply one or more sort orders, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '`SortEnumType` has two values, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: I will leave adding sorting capabilities to your GraphQL service to you.
  prefs: []
  type: TYPE_NORMAL
- en: Building .NET clients for a GraphQL service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have explored some queries with the **Banana Cake Pop** tool, let’s
    see how a client could call the GraphQL service. Although the **Banana Cake Pop**
    tool is convenient, it runs in the same domain as the service, so some issues
    might not become apparent until we create a separate client.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing GraphQL request formats
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Most GraphQL services process `GET` and `POST` requests in either the `application/graphql`
    or `application/json` media formats. An `application/graphql` request would only
    contain a query document. The benefit of using `application/json` is that as well
    as the query document, you can specify operations when you have more than one,
    and define and set variables, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We will use the `application/json` media format so that we can pass variables
    and their values.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the GraphQL response format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A GraphQL service should return a JSON document containing the expected data
    object and maybe some errors in an array, with the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: The `errors` array should only be in the document if there are errors.
  prefs: []
  type: TYPE_NORMAL
- en: Using REST Client as a GraphQL client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we write code as a client to the GraphQL service, it would be good to
    test it with your code editor’s `.http` file support. This is so that if our .NET
    client app does not work, we know the problem is in our client code rather than
    the service:'
  prefs: []
  type: TYPE_NORMAL
- en: If you are using Visual Studio Code and have not already installed REST Client
    by Huachao Mao (`humao.rest-client`), then install it now.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your preferred code editor, start the `Northwind.GraphQL.Service` project
    web service, using the `https` profile without debugging, and leave it running.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your code editor, in the `HttpRequests` folder, create a file named `graphql-queries.http`,
    and modify its contents to contain a request to get products in the seafood category,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the query request, and note the response, as shown in *Figure 12.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Requesting seafood products using REST Client'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a query to make a request to get the ID, name, and description of all categories,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Send the query request, and note the response contains the eight categories
    in a `data` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the query document, change `categoryId` to `id`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Send the query request, and note the response contains an `errors` array, as
    shown in the following response:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the query document, change `id` back to `categoryId`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a query to request to get the ID and name of a category specified by a
    parameter for its ID, along with the ID and name of each of its products, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Send the query request, and note the response contains category `1`, `Beverages`,
    with its products in a `data` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the ID to `4`, send the request, and note the response contains category
    `4`, `Dairy Products`, with its products in a `data` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we have done some basic testing of the service and its responses to
    queries that we want to run, we can build a client to make those queries and process
    the JSON responses.
  prefs: []
  type: TYPE_NORMAL
- en: Using an ASP.NET Core MVC project as a GraphQL client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a model class to make it easy to deserialize the response:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter12`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.GraphQL.Client.Mvc`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Other Visual Studio 2022 options:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Authentication Type**: None'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Configure for HTTPS**: Selected'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Enable Docker**: Cleared'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do not use top-level statements**: Cleared'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In Visual Studio 2022, set the startup project with the current selection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.GraphQL.Client.Mvc` project, add a project reference to the
    Northwind entity models project, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The path to the project must not have a line break.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.GraphQL.Client.Mvc` project at the command prompt or terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Properties` folder, in `launchSettings.json`, modify the `applicationUrl`
    to use port `5123` for `https` and port `5124` for `http`, as highlighted in the
    following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.GraphQL.Client.Mvc` project, in the `Models` folder, add
    a new class file named `ResponseErrors.cs`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Models` folder, add a new class file named `ResponseProducts.cs`, as
    shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Models` folder, add a new class file named `ResponseCategories.cs`,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Models` folder, add a new class file named `IndexViewModel.cs` , which
    will have properties to store all the data that we might want to show in the view,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, import the namespace to set HTTP headers, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, after the `CreateBuilder` method call, add statements to register
    an HTTP client for the GraphQL service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Controllers` folder, in `HomeController.cs`, import the namespace to
    work with text encodings and for the local project models, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Define a field to store the registered HTTP client factory, and set it in the
    constructor, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Index` action method, modify the method to be asynchronous. Then, add
    statements to call the GraphQL service, and note that the HTTP request is a `POST`,
    the media type is for an `application/json` document that contains a GraphQL query,
    and the query requests the ID, name, and number of units in stock for all products
    in a given category, passed as a parameter named `id`, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: To set the content of our request, we will use the C# 11
    or later raw interpolated string literal syntax of three-dollar signs and three
    double quotes. This allows us to embed the `id` variable using three curly braces,
    which should not be confused with the two curly braces after `unitsInStock`, which
    end the query itself.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Views/Home` folder, in `Index.cshtml`, delete its existing markup,
    and then add markup to render the seafood products, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the .NET client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can test our .NET client:'
  prefs: []
  type: TYPE_NORMAL
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using its `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Client.Mvc` project, using its `https` profile
    without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that products are successfully retrieved using GraphQL, as shown in *Figure
    12.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: Products in the Beverages category from the GraphQL service'
  prefs: []
  type: TYPE_NORMAL
- en: Enter another category ID that exists, for example, `4`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a category ID that is out of range, for example, `13`, and note that there
    are 0 products returned.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome, and shut down the web server for the `Northwind.GraphQL.Client.Mvc`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In `HomeController.cs`, modify the query to make a deliberate mistake, like
    changing `productId` to `productid`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Client.Mvc` project, using the `https` profile
    without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Show/Hide Details** button, and note the error message and response
    details, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close Chrome, and shut down both web servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fix the mistake in the query!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a console app client using Strawberry Shake
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of using ordinary HTTP clients, ChilliCream has a GraphQL client library
    to more easily build .NET clients to GraphQL services.
  prefs: []
  type: TYPE_NORMAL
- en: '**More Information**: You can learn more about Strawberry Shake at the following
    link: [https://chillicream.com/docs/strawberryshake](https://chillicream.com/docs/strawberryshake)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s create another client using Strawberry Shake so that you can see
    the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Use your preferred code editor to add a new **Console App** / `console` project,
    named `Northwind.GraphQL.Client.Console`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the command prompt or terminal for the project folder, create a tools manifest
    file, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the command line or terminal, install the Strawberry Shake tools, as shown
    in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note Strawberry Shake is installed, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the project, treat warnings as errors, add references to NuGet packages
    for Microsoft extensions for dependency injection, working with HTTP, and Strawberry
    Shake code generation, and then globally and statically import the `Console` class,
    as highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You need to use different Strawberry Shake packages for different types of .NET
    project. For console apps and ASP.NET Core apps, reference `StrawberryShake.Server`.
    For Blazor WebAssembly apps, reference `StrawberryShake.Blazor`. For .NET MAUI
    apps, reference `StrawberryShake.Maui`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.GraphQL.Client.Console` project to restore packages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging, and leave it running so that the Strawberry Shake tool can talk to
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.GraphQL.Client.Console` project, at the command prompt or
    terminal, add a client for your GraphQL service, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the results, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.GraphQL.Client.Console` project, in the `.graphqlrc.json`
    file, add an entry to control the C# namespace used during code generation, as
    highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.GraphQL.Client.Console` project, add a new file named `seafoodProducts.graphql`,
    which defines a query to get seafood products, as shown in the following document:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: GraphQL queries used by Strawberry Shake must be named.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio 2022, it might automatically modify the project
    file to explicitly remove this file from the build process because it does not
    recognize it. If it has, then delete or comment out that element, as shown in
    the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: There must be at least one `.graphql` file for the Strawberry
    Shake tool to be able to generate its code automatically. An element like the
    proceeding one will prevent the Strawberry Shake tool from generating its code,
    and you will later get compile errors. You should delete or comment out that element.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Build the `Northwind.GraphQL.Client.Console` project to make Strawberry Shake
    process the GraphQL query file and generate proxy classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note the `obj\Debug\net8.0\berry` folder that was autogenerated, the file named
    `NorthwindClient.Client.cs`, and the dozen or so types defined by it, including
    the `INorthwindClient` interface, as shown in *Figure 12.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: The generated class file for the Northwind GraphQL service'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements. Add statements to create a
    new service collection, add the autogenerated `NorthwindClient` to it with the
    correct URL for the service, and then get and use the dependency service to fetch
    the seafood products, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the console app and note the results, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Implementing GraphQL mutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most services need to modify data as well as query it. GraphQL calls these
    **mutations**. A mutation has three related components:'
  prefs: []
  type: TYPE_NORMAL
- en: The mutation itself, which defines the change that will be made to the graph.
    It should be named using a verb, a noun, and use camel casing, for example, `addProduct`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **input** is the input for a mutation, and it should have the same name
    as the mutation with a suffix of `Input`, for example, `AddProductInput`. Although
    there is only one input, it is an object graph, so it can be as complex as you
    need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **payload** is the returned document for a mutation, and it should have
    the same name as the mutation with a suffix of `Payload`, for example, `AddProductPayload`.
    Although there is only one payload, it is an object graph, so it can be as complex
    as you need.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mutations to the GraphQL service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s define mutations for adding, and later, we will define some to update
    and delete products:'
  prefs: []
  type: TYPE_NORMAL
- en: In the `Northwind.GraphQL.Service` project/folder, add a class file named `Mutation.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the class file, define a record and two classes to represent the three types
    needed to perform an `addProduct` mutation, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, add a call to the `AddMutationType<T>` method to register
    your `Mutation` class, as highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exploring the add product mutation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can explore mutations using Banana Cake Pop:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Definition** tab, and note the mutation type, as partially
    shown in *Figure 12.11*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Schema to mutate a product using GraphQL'
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the full schema definitions for the `addProduct` mutation and its related
    types, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **Operations** tab and, if necessary, create a new blank document,
    and then enter a mutation to add a new product named `Tasty Burgers`. Then, from
    the returned `product` object, just select the ID and name, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note that the new product has been successfully added and
    assigned the next sequential number by the SQL Server database, which could be
    any number over 77, depending on if you have already added some other products,
    as shown in the following output and in *Figure 12.12*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Warning!** Please make a note of the ID assigned to the new product you have
    added. In the next section, you will update this product and then delete it. You
    cannot delete any of the existing products with IDs between 1 and 77 because they
    are related to other tables, and doing so would throw a referential integrity
    exception!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/B19587_12_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Adding a new product using a GraphQL mutation'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing updates and deletes as mutations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will define mutations to update just the unit price for a product,
    all the “units” fields for a product, and delete a product:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Mutation.cs`, define three `record` types to represent the inputs needed
    to perform two `updateProduct` and one `deleteProduct` mutations, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Mutation.cs`, define two class types to represent the types needed to return
    the results from an `update` or `delete` mutation, including if the action was
    successful, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Mutation.cs`, in the `Mutation` class, define three methods to implement
    two `updateProduct` and one `deleteProduct` mutations, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If your database server is not running, for example, because you are hosting
    it in Docker, a virtual machine, or in the cloud, then make sure to start it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a named query to request products that you have added, for example, with
    a `productId` greater than `77`, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response includes the new product you previously
    added with a unit price of `40`, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make a note of the `productId` of the product you added. In my case, it is `79`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter a mutation to update the unit price of your new product to `75`, and
    then from the returned `product` object, just select the ID, name, unit price,
    and units in stock, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** to open a new tab, enter a mutation to update the units of
    an existing product, and then from the returned `product` object just select the
    ID, name, unit price, and units in stock, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the query tab to request new products, click **Run**, and note the response,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click the **+** to open a new tab, and enter a mutation to delete the product
    and show if it was successful, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Warning!** You will not be able to delete products that are referenced in
    other tables. IDs 1 to 77 will throw a referential integrity exception.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Confirm that the product was deleted by re-running the query for new products,
    and note that you get an empty array, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implementing GraphQL subscriptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL subscriptions, by default, work over WebSockets but can also work over
    **Server-Sent Events** (**SSE**), SignalR, or even gRPC.
  prefs: []
  type: TYPE_NORMAL
- en: Imagine that a client app wants to be notified when a product has its unit price
    reduced. It would be great if the client could subscribe to an event that gets
    triggered whenever a unit price is reduced, instead of having to query for changes
    to the unit prices.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a subscription and topic to the GraphQL service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add this feature to our GraphQL service using subscriptions:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a new class file named `ProductDiscount.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents to define a model to notify a client about a product’s
    unit price reduction, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new class file named `Subscription.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the contents to define a subscription to an event (aka a topic) named
    `OnProductDiscounted` that a client can subscribe to, as shown in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Mutation.cs`, in the `UpdateProductPriceAsync` method, add statements to
    send a message over the topic whenever a product has its unit price reduced, as
    highlighted in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `Program.cs`, configure the GraphQL service to register the `Subscription`
    class and to store active subscriptions in-memory, as highlighted in the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As well as in-memory, you can use Redis and other data stores to keep track
    of active subscriptions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Optionally, after building the `app`, configure the use of WebSockets, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is optional because the GraphQL service can fall back to using SSE over
    `https`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Exploring subscribing to a topic
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s subscribe to a topic and see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.GraphQL.Service` project, using the `https` profile without
    debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Banana Cake Pop**, click the **+** to open a new tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Schema Reference** tab, click the `Subscription` type, and note
    the topic named **onProductDiscounted**, as shown in *Figure 12.13*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: A subscription with a topic'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Operations**, enter a subscription to the topic, and choose all the
    fields to show in the results, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Click **Run**, and note that the subscription starts but no results are shown
    yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **+** to open a new tab, and enter a mutation to update the unit
    price of the existing product `1` to `8.99`. Then, from the returned `product`
    object, select the ID and unit price, and show if the update succeeded, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Run**, and note the response, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Switch back to the tab with the subscription, and note the response and that
    the subscription is still active, indicated by the spinners on the tab and the
    **Cancel** button, as shown in *Figure 12.14*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_12_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: An active subscription shows a spinner'
  prefs: []
  type: TYPE_NORMAL
- en: Switch back to the tab with the update mutation, change the unit price to `7.99`,
    and click **Run**. Then, switch back to the tab with the subscription, and note
    that it receives that update notification too.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Switch back to the tab with the update mutation, change the unit price to `9.99`,
    and click **Run**. Then, switch back to the tab with the subscription, and note
    that it has not been sent any notifications because the unit price was increased,
    not reduced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser, and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What transport protocol does a GraphQL service use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What media type does GraphQL use for its queries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you parameterize GraphQL queries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of using Strawberry Shake over a regular HTTP client for
    GraphQL queries?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How might you insert a new product into the Northwind database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 12.2 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-12---combining-data-sources-using-graphql](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-12---combining-data-sources-using-graphql)'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 12.3 – Practice building .NET clients
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In `HomeController.cs`, add an action method named `Categories` , and implement
    it to query the `categories` field with a variable for the `id`. On the page,
    allow the visitor to submit an `id`, and note the category information and a list
    of its products.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about:'
  prefs: []
  type: TYPE_NORMAL
- en: Some of the concepts of GraphQL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to build a `Query` class with fields that represent entities that can be
    queried.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the Banana Cake Pop tool to explore a GraphQL service schema.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the REST Client extension to POST to a GraphQL service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a .NET client for a GraphQL service.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement GraphQL mutations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement GraphQL subscriptions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about the gRPC service technology that can
    be used to implement efficient microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/apps_and_services_dotnet8](https://packt.link/apps_and_services_dotnet8)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code3048220001028652625.png)'
  prefs: []
  type: TYPE_IMG
