- en: '*Chapter 7*: Securing ASP.NET Web Applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第7章*：保护ASP.NET网络应用程序'
- en: In the previous chapter, we explored the architecture considerations that should
    be taken into account when designing and implementing a solution architecture.
    *Why do we need to learn this?* Because creating an innovative and robust software
    solution requires us to plan for various aspects and consider different attributes
    for balancing short-term and long-term product goals and priorities. Paying attention
    to the quality of attributes, logging, and tracing, along with a proper deployment
    strategy, will help you deliver a good-quality product that is scalable, maintainable,
    and secure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了在设计实施解决方案架构时应考虑的架构考虑因素。*为什么我们需要学习这些？*因为创建一个创新且稳健的软件解决方案需要我们规划各个方面，并考虑不同的属性来平衡短期和长期的产品目标和优先级。关注属性的质量、日志记录和跟踪，以及适当的部署策略，将有助于你交付一个质量好、可扩展、可维护和安全的优质产品。
- en: It is exciting for any solution architect to design and build a fancy product;
    however, this achievement can be ruined if we don't pay attention to the security
    risks involved. Security is an integral part of any software solution, especially
    **ASP.NET** web applications. By nature, these applications are exposed to a large
    number of users, therefore security isn't a luxury in this case and can no longer
    be an afterthought—it's a necessity.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何解决方案架构师来说，设计和构建一个炫酷的产品都是一件令人兴奋的事情；然而，如果我们不关注其中涉及的安全风险，这种成就可能会被破坏。安全是任何软件解决方案的组成部分，尤其是**ASP.NET**网络应用程序。从本质上讲，这些应用程序会暴露给大量用户，因此安全不再是奢侈品，而是一个必需品。
- en: The **.NET Core** framework provides a set of powerful features and built-in
    functionalities to secure our applications if we implement and configure them
    the right way. However, this is not enough, as we still need to apply a set of
    security measures and write secure code to protect our application from threats
    and vulnerabilities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**.NET Core**框架提供了一套强大的功能和内置功能，如果我们正确实施和配置，可以保护我们的应用程序。然而，这还不够，因为我们仍然需要应用一系列安全措施并编写安全代码来保护我们的应用程序免受威胁和漏洞。'
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Securing ASP.NET Core applications
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护ASP.NET Core应用程序
- en: Web **application programming interface** (**API**) security recommendations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web **应用程序编程接口**（**API**）安全建议
- en: Protecting web apps and APIs hosted on Azure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护托管在Azure上的Web应用程序和API
- en: By the end of this chapter, we will have explored a set of security measures,
    tips, and tricks that will help us build secure ASP.NET web applications. Furthermore,
    we will get to know some security recommendations to protect our RESTful APIs
    (where **REST** stands for **REpresentational State Transfer**), along with some
    tips to securely host our solution on **Azure**.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将探讨一系列安全措施、技巧和窍门，帮助我们构建安全的ASP.NET网络应用程序。此外，我们将了解一些保护我们的RESTful API（其中**REST**代表**REpresentational
    State Transfer**）的安全建议，以及一些在**Azure**上安全托管解决方案的提示。
- en: Most essentially, this chapter provides us with a roadmap to secure our solution.
    We'll get a deep understanding of how we can incorporate security into our solution
    architecture, and we'll see what the most important factors are for creating secure
    software.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是，本章为我们提供了一个确保解决方案安全的路线图。我们将深入了解如何将安全融入我们的解决方案架构，并看到创建安全软件最重要的因素是什么。
- en: Now, let's dig deeper into each of those security measures.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们深入了解这些安全措施中的每一个。
- en: Introducing key security practices
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍关键安全实践
- en: In this section, we will explore key security measures to be taken into consideration
    while building our ASP.NET web application. There are some **C#** code samples
    in the following sections that we will use to explain various security vulnerabilities
    we may face. This code syntax was prepared based on **ASP.NET Core** and **.NET
    5**, but the concept is the same even if you have an ASP.NET Web Forms application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在构建我们的ASP.NET网络应用程序时需要考虑的关键安全措施。以下几节中包含一些**C#**代码示例，我们将使用这些示例来解释我们可能面临的各种安全漏洞。此代码语法基于**ASP.NET
    Core**和**.NET 5**，即使你有ASP.NET Web Forms应用程序，概念也是相同的。
- en: 'The following is a list of the security measures we will learn about in this
    section:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们将在本节中学习的安全措施列表：
- en: Authentication
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证
- en: Authorization
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 授权
- en: Anti-**cross-site scripting** (**XSS**)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反**跨站脚本**（**XSS**）
- en: '**Cross-site request forgery** (**CSRF**)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）'
- en: Cookie stealing
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookie窃取
- en: Overposting
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过度发布
- en: Preventing open redirection attacks
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止开放重定向攻击
- en: Blocking brute-force attacks
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止暴力破解攻击
- en: File-upload protection
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件上传保护
- en: Preventing **Structured Query Language** (**SQL**) injection attacks in ADO.NET
    and **Entity Framework** (**EF**)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止在ADO.NET和Entity Framework（EF）中发生结构化查询语言（SQL）注入攻击
- en: General security recommendations
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般安全建议
- en: Authentication
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证
- en: Authentication is the process of validating the identity of a user who is trying
    to access an application. It starts by obtaining the credentials of the user,
    then validating them against the identity provider such as **Windows Active Directory**
    that can be on-premises or in the cloud as part of **Microsoft 365** services.
    The user is considered authenticated if the validation process of the credentials
    is successful. After authentication, the system should start the authorization
    process to check the access level of the user and decide which data and resources
    are accessible for this user. Without knowing who the user is, authorization cannot
    take place.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是验证试图访问应用程序的用户身份的过程。它从获取用户的凭据开始，然后将其与身份提供者（如**Windows Active Directory**）进行验证，该提供者可以是本地或作为**Microsoft
    365**服务的一部分在云端。如果凭据的验证过程成功，则认为用户已通过身份验证。身份验证后，系统应开始授权过程，检查用户的访问级别并决定哪些数据和资源对该用户可访问。如果不了解用户是谁，则无法进行授权。
- en: 'There are four different authentication modes in ASP.NET Core that we must
    know about, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在ASP.NET Core中，有四种不同的身份验证模式，我们必须了解，如下所示：
- en: '`identity` module. This module will automatically create the authentication
    and authorization SQL tables, along with the UI that includes the `Register`,
    `Login`, `LogOut`, and `RegisterConfirmation` views, which will be added to Visual
    Studio through the scaffolding functionality. The following screenshot shows the
    SQL tables that will be created when we apply the migrations in the package manager
    console:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`identity`模块。此模块将自动创建身份验证和授权SQL表，以及包括`Register`、`Login`、`LogOut`和`RegisterConfirmation`视图的UI，这些视图将通过scaffolding功能添加到Visual
    Studio中。以下截图显示了在包管理器控制台应用迁移时将创建的SQL表：'
- en: '![Figure 7.1: ASP.NET identity SQL tables](img/Figure_7.01_B17366.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1：ASP.NET身份SQL表](img/Figure_7.01_B17366.jpg)'
- en: 'Figure 7.1: ASP.NET identity SQL tables'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：ASP.NET身份SQL表
- en: By using this mode, the unauthenticated users will be automatically redirected
    to a login page where they can supply their login credentials and submit them
    back to the server. If the IdP authenticates the request, ASP.NET issues a cookie
    that contains the ID token of the authenticated user, which will be attached to
    all subsequent requests in each request header. This means that all subsequent
    requests are automatically authenticated using the authentication token stored
    in this cookie.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用此模式，未经身份验证的用户将被自动重定向到登录页面，在那里他们可以提供他们的登录凭据并将它们提交回服务器。如果身份提供者验证请求，ASP.NET将颁发一个包含已验证用户ID令牌的cookie，该令牌将被附加到每个请求的请求头中。这意味着所有后续请求都将自动使用存储在此cookie中的身份验证令牌进行身份验证。
- en: 'Here is a Microsoft reference on how to configure this authentication mode:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于如何配置此身份验证模式的Microsoft参考：
- en: '[https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-5.0&tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-5.0&tabs=visual-studio'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-5.0&tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/identity?view=aspnetcore-5.0&tabs=visual-studio)'
- en: )
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '`appSettings.json` file; we can get these settings from the Azure Active Directory
    after we register the app:'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appSettings.json`文件；我们可以在注册应用程序后从Azure Active Directory获取这些设置：'
- en: '![Figure 7.2 – Configuration in the appsettings.json file](img/Figure_7.02_B17366.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2 – appsettings.json文件中的配置](img/Figure_7.02_B17366.jpg)'
- en: Figure 7.2 – Configuration in the appsettings.json file
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2 – appsettings.json文件中的配置
- en: As shown in the preceding screenshot, we first need to set the `Domain` name
    that we are using in the application. Then, we need to set `TenantId` and `ClientId`
    that we get from Azure when we register the application. As for `CallbackPath`,
    this is the **Uniform Resource Locator** (**URL**) where we want to redirect users
    after successful login.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，我们首先需要设置应用程序中使用的`Domain`名称。然后，我们需要设置从Azure获取的`TenantId`和`ClientId`。至于`CallbackPath`，这是我们希望在用户成功登录后重定向用户的**统一资源定位符**（URL）。
- en: 'The following diagram shows how the authentication with the Microsoft identity
    platform works:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了使用 Microsoft 身份平台的认证过程：
- en: '![Figure 7.3: Authentication process using the Microsoft identity platform](img/Figure_7.3_B17366.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.3：使用 Microsoft 身份平台的认证过程](img/Figure_7.3_B17366.jpg)'
- en: 'Figure 7.3: Authentication process using the Microsoft identity platform'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.3：使用 Microsoft 身份平台的认证过程
- en: As you can see, unauthenticated users will be redirected to the Windows login
    page where they are prompted to provide their credentials, and then an access
    token is created if the credentials are valid. After that, the user gets redirected
    to the landing page or redirects the URL specified in the **HTTP** response returned
    by the identity provider.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，未经认证的用户将被重定向到 Windows 登录页面，在那里他们被提示提供其凭据。如果凭据有效，则创建访问令牌。之后，用户将被重定向到登录页面或重定向到由身份提供者返回的
    **HTTP** 响应中指定的 URL。
- en: 'Here is a Microsoft reference on how to configure the Microsoft identity platform:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是关于如何配置 Microsoft 身份平台的一个 Microsoft 参考：
- en: '[https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-v2-aspnet-core-webapp](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-v2-aspnet-core-webapp'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-v2-aspnet-core-webapp](https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-v2-aspnet-core-webapp'
- en: )
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '**Windows**: This is also known as **Negotiate**, **Kerberos**, or **New Technology
    LAN Manager** (**NTLM**) authentication. This authentication mode is best suited
    for apps running in intranet environments under the same Windows domain. It can
    be configured for apps hosted with **Internet Information Services** (**IIS**)
    or **Kestrel** while the server runs on a corporate network using Active Directory
    domain identities. This authentication process relies on the operating system
    to get the ID of the user and confirm the authentication.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**：这也被称为**协商**、**Kerberos**或**新技术局域网管理器**（**NTLM**）认证。这种认证模式最适合在同一个
    Windows 域下运行的内部网络环境中的应用程序。它可以配置为在运行 Active Directory 域身份的内部网络上的**Internet Information
    Services**（**IIS**）或**Kestrel**托管的应用程序。此认证过程依赖于操作系统来获取用户的 ID 并确认认证。'
- en: 'Here is a Microsoft reference on how to configure Windows authentication:'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里是关于如何配置 Windows 认证的 Microsoft 参考：
- en: '[https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-5.0&tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-5.0&tabs=visual-studio'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-5.0&tabs=visual-studio](https://docs.microsoft.com/en-us/aspnet/core/security/authentication/windowsauth?view=aspnetcore-5.0&tabs=visual-studio'
- en: )
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '**None**: When we choose this mode, it means the identity of users is not needed.
    This type of mode is used in two cases—either when our application is public and
    anyone is allowed to access it or when we want to build our own custom authentication
    module.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**None**：当我们选择此模式时，意味着不需要用户身份。这种模式用于两种情况——要么是我们的应用程序是公开的，任何人都可以访问它，要么是我们想构建自己的自定义认证模块。'
- en: 'Here are a few tips to consider when we implement a custom authentication process:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实施自定义认证过程时，以下是一些需要考虑的提示：
- en: Enforce the user to use a complex password and hash it before storing it in
    the users' table.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制用户使用复杂密码，并在将其存储在用户表中之前对其进行散列。
- en: Never store a password in a hidden field or in any state management object.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要在隐藏字段或任何状态管理对象中存储密码。
- en: Consider encrypting the password input using a client-side library before submitting
    it to the server along with the request header and body. On the server, when you
    receive the password you will need to decrypt it, hash it, and then compare it
    to the hashed password in the database. If they are equal, then the user is considered
    authenticated.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将密码与请求头和正文一起提交到服务器之前，考虑使用客户端库对密码输入进行加密。在服务器端，当你收到密码时，你需要对其进行解密、散列，然后将其与数据库中散列的密码进行比较。如果它们相等，则认为用户已认证。
- en: If you are using sessions, make sure to clear them on logout and modify the
    session ID, and on login generate a new session ID.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用会话，确保在注销时清除它们并修改会话 ID，在登录时生成一个新的会话 ID。
- en: Consider implementing **two-factor authentication** (**2FA**).
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑实施**双因素认证**（**2FA**）。
- en: Never grant any user `db_owner` access to our SQL database, including the user
    used in the connection string.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要授予任何用户对我们的 SQL 数据库的 `db_owner` 访问权限，包括用于连接字符串的用户。
- en: Authorization
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授权
- en: 'Authorization is the process of deciding whether a user ID should be granted
    access to a specific resource in an application. Usually, authorization starts
    immediately after authentication, and there are different types of resource authorizations
    that can be given to a user, listed as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 授权是决定用户 ID 是否应该被授予访问应用程序中特定资源的权限的过程。通常，授权在认证之后立即开始，并且可以给用户授予不同类型的资源授权，如下所示：
- en: '**URL authorization**: This is performed to selectively grant users and roles
    access to particular URLs in the application.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL 授权**：这是为了选择性地授予用户和角色访问应用程序中特定 URL 的权限。'
- en: '**File authorization**: This process is used to protect the assets of an application
    and prevent unauthorized users from browsing the directories.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文件授权**：这个过程用于保护应用程序的资产，防止未经授权的用户浏览目录。'
- en: '**UI authorization**: This is also known as **UI trimming**. This process is
    performed to selectively allow or deny access to arbitrary parts of a page for
    specific users or roles. The section will be completely removed from the page
    if a user has no access to it.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**UI 授权**：这也被称为**UI 剪裁**。这个过程是为了选择性地允许或拒绝特定用户或角色访问页面的任意部分。如果用户没有访问权限，该部分将从页面上完全移除。'
- en: 'It''s quite easy to apply authorization in `[Authorize]` attribute to the controller
    class or to actions that are not anonymous. Here is an example of this:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器类或非匿名操作上应用授权 `[Authorize]` 属性是非常容易的。以下是一个例子：
- en: '[PRE0]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you allow anonymous access to a particular action within a controller class
    that has the `[Authorize]` attribute on top of it, you need to use `[AllowAnonymous]`
    on top of the action. You can use the `[Authorize]` attribute to grant access
    to roles and not only users.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你允许匿名访问控制器类中的一个特定操作，该类顶部有 `[Authorize]` 属性，那么你需要在操作顶部使用 `[AllowAnonymous]`。你可以使用
    `[Authorize]` 属性来授予角色访问权限，而不仅仅是用户。
- en: Anti-XSS
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抗 XSS
- en: '**XSS** is considered the number-one security vulnerability on the web and,
    unfortunately, a large number of web developers are not familiar with the risks
    of this vulnerability. XSS is a type of injection attack in which an attacker
    tries to execute malicious client-side scripts in the web browser of another end
    user.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本攻击（XSS**）被认为是网络上的头号安全漏洞，不幸的是，许多网络开发者并不熟悉这种漏洞的风险。XSS 是一种注入攻击，攻击者试图在另一个用户的网络浏览器中执行恶意客户端脚本。'
- en: 'There are two scenarios in terms of XSS attacks: the first one is called **passive
    injection**, where an attacker inputs a vulnerable script in an input field that
    will be stored in the database and will be displayed on the page when users access
    it. The second one is called **active injection**, where a user enters a vulnerable
    script into an input that will be displayed immediately onscreen.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XSS 攻击方面有两种情况：第一种被称为**被动注入**，攻击者在输入字段中输入一个有漏洞的脚本，该脚本将被存储在数据库中，并在用户访问页面时显示。第二种被称为**主动注入**，用户将一个有漏洞的脚本输入到输入字段中，该脚本将立即在屏幕上显示。
- en: Let's explore these two scenarios with some examples in the following sections.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的几节中通过一些例子来探讨这两个场景。
- en: Passive injection
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 被动注入
- en: This type of XSS attack occurs when the web page accepts unsanitized text input
    that can be later displayed to a victim who is accessing this page. Suppose we
    have an online blog post that allows users to post comments and interact with
    each other.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的 XSS 攻击发生在网页接受未经清洗的文本输入，这些输入可以稍后显示给访问此页面的受害者。假设我们有一个在线博客文章，允许用户发表评论并相互交流。
- en: 'If the input field, where we should specify our comment, is accepting the text
    as is without validation or sanitization, then the attacker will inject a client
    script in the comment field, which will be triggered whenever a user is accessing
    this blog post. Here is an example of a comment that contains malicious input:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们指定评论的输入字段接受文本而不进行验证或清洗，那么攻击者将在评论字段中注入一个客户端脚本，该脚本将在用户访问此博客文章时被触发。以下是一个包含恶意输入的评论示例：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this example, the comment contains **JavaScript** code that will trigger
    an alert with a nasty message. This message will be stored in the comments table,
    and every time a user tries to access the page, the script will be triggered and
    the message will be displayed to the end user, which is very annoying.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，注释中包含**JavaScript**代码，该代码将触发一个带有恶毒信息的警告。这个信息将被存储在注释表中，并且每次用户尝试访问页面时，脚本都会被触发，并将信息显示给最终用户，这非常令人烦恼。
- en: 'The attacker can inject JavaScript code to manipulate the **HTML** code of
    the page, such as in this example:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以注入JavaScript代码来操纵页面的**HTML**代码，例如在这个例子中：
- en: '[PRE2]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, you will notice that the attacker injected a client-side
    library that can manipulate the HTML code of your page and display different content.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你会注意到攻击者注入了一个客户端库，它可以操纵你页面的HTML代码并显示不同的内容。
- en: Active injection
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活注入
- en: This type of XSS attack occurs when the user input is immediately displayed
    on the web page and is not saved on the server. Suppose we have a web page that
    is reading metadata from the query string of the URL, and it shows a welcome message
    when we access the page.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的XSS攻击发生在用户输入立即显示在网页上且未在服务器上保存的情况下。假设我们有一个网页，它正在从URL的查询字符串中读取元数据，并且当我们访问页面时显示欢迎信息。
- en: 'In this case, an attacker can manipulate the query string and pass the following
    input script:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，攻击者可以操纵查询字符串并传递以下输入脚本：
- en: '[PRE3]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will display an `XSS attack! weak security` alert message on the web page.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在网页上显示`XSS攻击！弱安全`警告信息。
- en: 'Let''s check the following recommendations to help protect your application
    against XSS attacks:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查以下建议，以帮助保护你的应用程序免受XSS攻击：
- en: Don't trust any user input, even if the user is authenticated. You should always
    validate the input provided by the end users. Moreover, you should encode query
    strings and escape single quotes before storing the text in a database or displaying
    it on a web page.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要信任任何用户输入，即使用户已经认证。你应该始终验证最终用户提供的输入。此外，你应该在将文本存储在数据库或显示在网页上之前对查询字符串进行编码和转义单引号。
- en: Ensure the URL query string is encoded, and always validate the value in the
    query string before using it.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保URL查询字符串已编码，并且在使用之前始终验证查询字符串中的值。
- en: Perform content sanitization before you store untrusted content in your database.
    **HTML sanitization** is the process of checking content that is dynamic and only
    preserving tags that match with the whitelist.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将未信任的内容存储在数据库之前，执行内容清理。**HTML清理**是检查动态内容的过程，仅保留与白名单匹配的标签。
- en: You should always use `@Html.Raw` to render untrusted content.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你应该始终使用`@Html.Raw`来渲染未信任的内容。
- en: You can encode untrusted data before displaying it in your HTML code. This way,
    you make sure no one can inject an input with a script code because the encoding
    mechanism will convert `<` to `&lt;`, which will be treated as regular text.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在将未信任的数据显示在HTML代码之前对其进行编码。这样，你可以确保没有人可以注入带有脚本代码的输入，因为编码机制会将`<`转换为`&lt;`，这将被视为普通文本。
- en: Make sure to set the `HttpOnly` flag to protect our cookies from being accessible
    through client-side code.
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保设置`HttpOnly`标志以保护我们的cookie不被客户端代码访问。
- en: Cross-Site Request Forgery (CSRF)
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站请求伪造 (CSRF)
- en: '**CSRF** (also known by the acronym **XSRF**, and pronounced *sea-surf* or
    *c-surf*) is a type of attack that is performed by a malicious website that enforces
    a trusted but vulnerable site to perform an undesirable action when the user is
    still authenticated.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSRF**（也称为缩写**XSRF**，发音为*sea-surf*或*c-surf*）是一种攻击类型，由恶意网站执行，强制一个受信任但易受攻击的网站在用户仍然认证的情况下执行不希望的操作。'
- en: A CSRF attack is possible because browser requests include cookies that encapsulate
    the authentication tokens. In this case, the attacker is taking advantage of the
    authentication cookie to fool the trusted website, which cannot distinguish between
    legitimate requests and forged requests, by executing a malicious request using
    the authentication cookie from the trusted website. This type of attack is also
    known as a **one-click attack** or **session riding**.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: CSRF攻击是可能的，因为浏览器请求包括封装认证令牌的cookie。在这种情况下，攻击者利用认证cookie欺骗受信任的网站，通过使用受信任网站的认证cookie执行恶意请求，而受信任的网站无法区分合法请求和伪造请求。这种类型的攻击也被称为**一键攻击**或**会话骑行**。
- en: The easiest way to perform a CSRF attack is by attracting the attention of users
    to a malicious website by sending millions of phishing emails claiming that users
    won a big amount of money or a trip to Las Vegas. Usually, there is a link included
    in the email that will take us to the malicious website, and to collect our prize
    the malicious website would ask us to click a fancy button.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 执行CSRF攻击的最简单方法是通过发送数百万封声称用户赢得了一大笔钱或拉斯维加斯之旅的钓鱼邮件来吸引用户的注意力。通常，邮件中包含一个链接，会将我们带到恶意网站，并且为了领取奖品，恶意网站会要求我们点击一个花哨的按钮。
- en: 'Of course, users would not hesitate to do so, for different reasons. One such
    reason is that they don''t know the risks or the consequences of clicking the
    button. Once the button is clicked, the malicious website sends the nasty request
    to the trusted website while attaching an authentication cookie with the request.
    If the vulnerable website is not taking precautions such as validating the incoming
    request (as in this case), the attack will, unfortunately, be successful. Here
    is a diagram showing a CSRF attack:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，用户会毫不犹豫地这样做，原因各不相同。其中一个原因是他们不知道点击按钮的风险或后果。一旦点击按钮，恶意网站就会在请求中附加一个认证cookie，向受信任的网站发送恶意的请求。如果易受攻击的网站没有采取诸如验证传入请求（如本例中所示）之类的预防措施，那么攻击很不幸地将成功。以下是CSRF攻击步骤的示意图：
- en: '![Figure 7.4: Steps of a CSRF attack](img/Figure_7.04_B17366.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4：CSRF攻击步骤](img/Figure_7.04_B17366.jpg)'
- en: 'Figure 7.4: Steps of a CSRF attack'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：CSRF攻击步骤
- en: 'Here are some recommendations that should be considered to prevent CSRF attacks:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些应考虑以防止CSRF攻击的建议：
- en: 'Generate a user-specific CSRF token and store it in a hidden field. This token
    should be submitted with every request, and it should be validated on the server
    on all `POST`, `PUT`, and `DELETE` requests. The token should be regenerated on
    every request to prevent attackers from simulating this token and fooling the
    validation process on the server side. In MVC, we can use the following code to
    generate an anti-forgery token:'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成一个用户特定的CSRF令牌并将其存储在隐藏字段中。此令牌应与每个请求一起提交，并在所有`POST`、`PUT`和`DELETE`请求上在服务器上进行验证。应在每次请求时重新生成令牌，以防止攻击者模拟此令牌并欺骗服务器端的验证过程。在MVC中，我们可以使用以下代码生成一个反伪造令牌：
- en: '[PRE4]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This will output the following HTML code:'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将输出以下HTML代码：
- en: '[PRE5]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[HttpPost]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[HttpPost]'
- en: '[ValidateAntiForgeryToken]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[ValidateAntiForgeryToken]'
- en: public async Task<IActionResult>    Create (ProductViewModel newProduct)
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: public async Task<IActionResult>    Create (ProductViewModel newProduct)
- en: '{'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{'
- en: <!-- rest of the action code goes here -->
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <!-- 其他动作代码放在这里 -->
- en: '}'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE6]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Consider checking the `referer` header of incoming requests, which should be
    referencing the same domain of the trusted site. This will prevent or cancel requests
    submitted from a different domain.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑检查传入请求的`referer`头，它应引用受信任站点的同一域名。这将防止或取消来自不同域的请求。
- en: Cookie stealing
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cookie窃取
- en: Cookies are an essential part of a website because they usually hold the session
    details of the logged-in user. A **cookie** is an object that is transmitted back
    and forth between the client browser and the server. So, instead of authenticating
    the user on every request, the authentication token or claims can be stored in
    the cookie, and it will be used to identify the user after login. Without cookies,
    the user will need to log in again on every request.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Cookie是网站的一个基本组成部分，因为它们通常持有已登录用户的会话详情。**Cookie**是一个在客户端浏览器和服务器之间来回传输的对象。因此，而不是在每次请求时对用户进行身份验证，可以在cookie中存储认证令牌或声明，并在登录后使用它来识别用户。没有cookie，用户需要在每次请求时重新登录。
- en: It is important to secure cookies if you are using them in your application.
    **Cookie stealing** (also known as **session hijacking**) is a type of attack
    that allows hackers to steal the cookie of a logged-in user, then impersonate
    that user and start sending requests on their behalf. In this case, the server
    is fooled because the request sent by the attacker looks authentic since it contains
    a valid authentication cookie.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在应用程序中使用cookie，确保cookie的安全性非常重要。**Cookie窃取**（也称为**会话劫持**）是一种攻击类型，允许黑客窃取已登录用户的cookie，然后冒充该用户并代表其发送请求。在这种情况下，服务器被欺骗，因为攻击者发送的请求看起来是真实的，因为它包含有效的认证cookie。
- en: 'To prevent cookie stealing, we must apply the following recommendations:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止cookie窃取，我们必须应用以下建议：
- en: Use a **Secure Sockets Layer** (**SSL**) certificate and only allow **HTTP Secure**
    (**HTTPS**) requests to encrypt all requests passed between the user and the server.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**安全套接字层**（**SSL**）证书，并仅允许**HTTP安全**（**HTTPS**）请求来加密用户和服务器之间传递的所有请求。
- en: Consider applying `secure` and `HttpOnly` flags in the `web.config` file to
    protect the cookie and to ensure that it is only sent over an SSL connection.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑在`web.config`文件中应用`secure`和`HttpOnly`标志来保护cookie，并确保它仅通过SSL连接发送。
- en: Regenerate the session ID immediately after login.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在登录后立即重新生成会话ID。
- en: Consider clearing the authentication cookie on logout.
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑在注销时清除认证cookie。
- en: Overposting
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过度发布
- en: '**Model binding** in ASP.NET handles the mapping of data between incoming requests
    and the .NET application model. It is a powerful feature that simplifies the process
    of populating the model properties with the user input data, based on a naming
    convention. However, this may cause another security breach by allowing an attacker
    to populate some properties in the model that are not presented in the form. This
    type of attack is called an **overposting** or **mass assignment**.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET 中的 **模型绑定** 处理传入请求与 .NET 应用程序模型之间的数据映射。这是一个强大的功能，它通过命名约定简化了用用户输入数据填充模型属性的过程。然而，这可能会通过允许攻击者填充表单中未呈现的一些模型属性而导致另一个安全漏洞。这种攻击被称为
    **过度发布** 或 **批量赋值**。
- en: 'Let''s check the following example to understand the overposting vulnerability.
    Assume we have a user model that we are using to register a new user in our application:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查以下示例以了解过度发布漏洞。假设我们有一个用户模型，我们正在使用它在我们应用程序中注册新用户：
- en: '[PRE7]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is pretty much a simple user model. You will notice that there is a property
    named `IsAdmin` in the model—this is used to specify if the user has an administration
    access level on the entire application. The **CSHTML** view should not include
    this property because we don''t want end users to decide their access level. The
    view should look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相当简单的用户模型。你会注意到模型中有一个名为 `IsAdmin` 的属性——这个属性用于指定用户在整个应用程序上是否有管理访问级别。**CSHTML**
    视图不应包含此属性，因为我们不希望最终用户决定他们的访问级别。视图应该看起来像这样：
- en: '![Figure 7.5 – User registration sample form](img/Figure_7.05_B17366.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.5 – 用户注册示例表单](img/Figure_7.05_B17366.jpg)'
- en: Figure 7.5 – User registration sample form
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.5 – 用户注册示例表单
- en: 'When the form is submitted, it will produce the following HTTP `POST` request:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单提交时，它将生成以下 HTTP `POST` 请求：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: However, when using a debugging proxy-server tool, we can modify this HTTP request
    and include additional values and properties in the request. In this case, the
    attacker would include `IsAdmin:True` in the `POST` request. As a result, the
    user will be registered in the system with admin privileges.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当使用调试代理服务器工具时，我们可以修改这个 HTTP 请求并包含额外的值和属性。在这种情况下，攻击者会在 `POST` 请求中包含 `IsAdmin:True`。结果，用户将以管理员权限在系统中注册。
- en: '*How can we prevent this kind of attack?* Well, there are a few solutions to
    prevent this vulnerability, such as the following ones:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '*我们如何防止这种攻击？* 好吧，有几个解决方案可以防止这种漏洞，例如以下几种：'
- en: '`public IActionResult Register(User model)`, we can use `public IActionResult
    Register(string firstName, string lastName, string email, string password)`, and
    in the implementation of the action, we populate the model using the fields passed
    in the action''s parameters. In this case, any additional property that is added
    by the attacker will be ignored.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `public IActionResult Register(User model)` 中，我们可以使用 `public IActionResult
    Register(string firstName, string lastName, string email, string password)`，并在操作的实现中使用传递给操作参数的字段来填充模型。在这种情况下，任何由攻击者添加的额外属性都将被忽略。
- en: '`RegisterUserViewModel`. In this new model, we only add the properties needed
    for registration, so the action will become `public IActionResult Register(RegisterUserViewModel
    model)`. I like this option and I usually apply it as a common practice.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RegisterUserViewModel`。在这个新模型中，我们只添加了注册所需的属性，因此操作将变为 `public IActionResult
    Register(RegisterUserViewModel model)`。我喜欢这个选项，并且通常将其作为常见做法。'
- en: '`BindAttribute` class on the method parameters and just include (whitelist)
    the properties we want to allow for binding. So, the action should look like this:
    `public IActionResult Register(([Bind("FirstName,LastName,Email,Password") User
    model)`.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在方法参数上使用 `BindAttribute` 类，并且只包含（白名单）我们希望允许绑定到模型上的属性。因此，操作应该看起来像这样：`public IActionResult
    Register(([Bind("FirstName,LastName,Email,Password") User model)]`
- en: As a good practice, we must not use our database entities directly as models
    in the MVC views and actions.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种良好的实践，我们不应该直接将数据库实体作为 MVC 视图和操作中的模型使用。
- en: Preventing open redirection attacks
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止公开重定向攻击
- en: Let's first understand what an open redirection attack is. If you have logic
    in your web application that redirects users to a URL that is specified in the
    query string or via the HTTP request's parameters, this can potentially be tampered
    with to redirect users to a malicious URL, to steal their credentials.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解什么是公开重定向攻击。如果你在 Web 应用程序中有逻辑将用户重定向到查询字符串或通过 HTTP 请求的参数中指定的 URL，这可能会被篡改以将用户重定向到恶意
    URL，窃取他们的凭证。
- en: 'Assume an attacker sent an email with a redirect link such as this:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 假设攻击者发送了一封包含重定向链接的电子邮件，如下所示：
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Usually, some users won't look at the query string, and others won't even check
    the domain in the first part of the URL. When they click this URL, they will get
    redirected to a login page provided by the malicious website. This login page
    is very similar in terms of look and feel to the original login page in the trusted
    website. In this case, users will provide their credentials, assuming they log
    in normally.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，一些用户不会查看查询字符串，而其他人甚至不会检查URL的第一部分中的域名。当他们点击这个URL时，他们会被重定向到由恶意网站提供的登录页面。这个登录页面在外观和感觉上与受信任网站的原始登录页面非常相似。在这种情况下，用户会提供他们的凭据，假设他们正常登录。
- en: However, the attacker will steal the credentials and redirect them to the original
    login page in the trusted website. Users will feel as though they provided the
    wrong username or password, so they will provide these again and continue what
    they wanted to do on the trusted website.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，攻击者会窃取凭据并将它们重定向到受信任网站的原始登录页面。用户会感觉他们提供了错误的用户名或密码，因此他们会再次提供这些信息并继续他们在受信任网站上想要做的事情。
- en: In this way, the attacker steals the user credentials without the victim ever
    knowing about it. This type of attack is called an **open redirection attack**.
    Now, let's get to the part about how to prevent it.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，攻击者窃取了用户凭据，而受害者却从未察觉。这种攻击被称为**开放重定向攻击**。现在，让我们谈谈如何防止它。
- en: When using such redirection logic in your web applications, treat all users
    as untrustworthy. Therefore, we need to make sure to only redirect to local URLs
    within our application or make use of a new method available in ASP.NET, named
    `LocalRedirect`. This is used to redirect to a local URL within the app itself,
    which means it validates the URL before triggering the redirection, and if the
    URL is not local, the method will throw an exception.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当在你的Web应用程序中使用此类重定向逻辑时，将所有用户视为不可信。因此，我们需要确保只将重定向到我们应用程序内的本地URL，或者使用ASP.NET中可用的新方法，名为`LocalRedirect`。这用于将重定向到应用程序本身内的本地URL，这意味着在触发重定向之前会验证URL，如果URL不是本地的，该方法将抛出异常。
- en: Also, there is a method to validate whether a URL is local or not—you can make
    use of `Url.IsLocalUrl(..)`. This method will return a Boolean to indicate whether
    the URL is local or not.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个方法来验证一个URL是否是本地的——你可以使用`Url.IsLocalUrl(..)`。这个方法会返回一个布尔值来指示URL是否是本地的。
- en: Blocking brute-force attacks
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 阻止暴力攻击
- en: 'In cryptography, a **brute-force attack** (also known as an **exhaustive search**)
    involves an attacker attempting to guess a password by thoroughly trying every
    possible combination of letters, numbers, and symbols until discovering the correct
    combination that works. In many cases, the attacker will use a bot tool to perform
    an automatic attack and predict the password. To prevent this type of attack,
    we can apply the following steps:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在密码学中，**暴力攻击**（也称为**穷举搜索**）涉及攻击者通过彻底尝试所有可能的字母、数字和符号组合来猜测密码，直到发现正确的组合。在许多情况下，攻击者会使用机器人工具执行自动攻击并预测密码。为了防止此类攻击，我们可以采取以下步骤：
- en: Lock the user account after a specific number of failed login attempts.
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在达到特定次数的失败登录尝试后锁定用户账户。
- en: Implement a **Completely Automated Public Turing test to tell Computers and
    Humans Apart** (**CAPTCHA**) on the login page.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在登录页面上实施**完全自动化的公钥图灵测试**（**CAPTCHA**）。
- en: Consider allowing logins from specific **Internet Protocol** (**IP**) addresses
    and restrict these from all other IP addresses.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑允许从特定的**互联网协议**（**IP**）地址登录，并限制其他所有IP地址的登录。
- en: Enforce complex passwords.
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制使用复杂的密码。
- en: Consider enabling 2FA.
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑启用双因素认证（2FA）。
- en: Block the attackers' IP addresses, but this is not a guaranteed solution because
    the attackers can change the IP addresses from which they are performing the attacks.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止攻击者的IP地址，但这并不是一个保证的解决方案，因为攻击者可以更改他们进行攻击的IP地址。
- en: Consider using a proper username and avoid using `admin`, `administrator`, or
    any other easy-to-guess usernames.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用合适的用户名，并避免使用`admin`、`administrator`或任何其他容易被猜到的用户名。
- en: File-upload protection
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文件上传保护
- en: 'A file upload allows users to upload files while submitting a form. A career
    form is a simple example of the usage of a file upload, where users need to attach
    their resume when applying for a job position. Attackers can make use of the file
    upload and try to upload malicious files to the server. Here are a few security
    steps that should reduce the likelihood of using a file upload to perform a successful
    attack:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 文件上传允许用户在提交表单时上传文件。职业表单是文件上传用法的简单示例，其中用户在申请职位时需要附加简历。攻击者可以利用文件上传并尝试将恶意文件上传到服务器。以下是一些减少使用文件上传成功攻击可能性的安全步骤：
- en: Disable the execute permissions on the folder where you are storing the uploaded
    files.
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用存储上传文件的文件夹的执行权限。
- en: Make sure to use a whitelist to only allow approved file extensions.
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保只使用白名单来允许经过批准的文件扩展名。
- en: Enable client-side validation to check the file extension before uploading it
    to the server.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启用客户端验证，在将文件上传到服务器之前检查文件扩展名。
- en: Check the size of the uploaded file and restrict the uploading of large files
    that exceed the size limit.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查上传文件的大小，并限制上传超过大小限制的大文件。
- en: Make sure to check the header of the uploaded file, using the server-side code
    in .NET, to prevent the upload of malicious files.
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保使用 .NET 服务器端代码检查上传文件的标题，以防止上传恶意文件。
- en: Encode the filename, especially if you are displaying the filename in the HTML
    code.
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对文件名进行编码，特别是如果您在 HTML 代码中显示文件名的话。
- en: Preventing SQL injection in ADO.NET and Entity Framework
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止 ADO.NET 和 Entity Framework 中的 SQL 注入
- en: A **SQL injection** is a vulnerability that enables an attacker to bypass the
    security measures taken in an application to execute malicious SQL commands directly
    in the application's database.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL 注入** 是一种漏洞，允许攻击者绕过应用程序中采取的安全措施，直接在应用程序的数据库中执行恶意 SQL 命令。'
- en: With these SQL commands, attackers can query the data of other users. They can
    also modify data and even delete some tables or the entire database, which can
    cause a major loss to the client business, especially if there is no proper backup
    process in place.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些 SQL 命令，攻击者可以查询其他用户的数据。他们还可以修改数据，甚至删除某些表或整个数据库，这可能会给客户业务造成重大损失，尤其是如果没有适当的备份流程的话。
- en: 'Furthermore, they can escalate an attack to compromise the entire SQL server.
    A SQL injection attack is one of the most dangerous attacks we can face because
    it affects the entire database and possibly all databases hosted on the same server.
    Let''s get to know how to prevent this type of attack, as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，他们可以将攻击升级以危害整个 SQL 服务器。SQL 注入攻击是我们可能面临的最危险的攻击之一，因为它影响整个数据库，以及可能托管在同一服务器上的所有数据库。让我们了解如何防止此类攻击，如下所述：
- en: Check for malicious input data by enforcing constraints, validating the type
    and format of the data, and enforcing sanitization.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过强制约束、验证数据的类型和格式以及执行清理来检查恶意输入数据。
- en: Consider using parameterized SQL stored procedures for data access and avoid
    using text concatenation with inline SQL statements.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用参数化 SQL 存储过程进行数据访问，并避免使用与内联 SQL 语句的文本连接。
- en: Never grant administrative privileges to SQL users that are used in the data
    access layer—the read/write permissions should be enough.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 永远不要将管理权限授予在数据访问层中使用的 SQL 用户——读取/写入权限就足够了。
- en: Avoid disclosing the details of database errors that may occur in the application.
    Actual errors should be logged properly in a centralized location, and the end
    user should be redirected to a custom error page with no technical details.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免泄露应用程序中可能发生的数据库错误详情。实际错误应正确记录在集中位置，并且应将最终用户重定向到没有技术详情的自定义错误页面。
- en: Encrypt the SQL connection in the `web.config` file to secure connectivity with
    the database.
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `web.config` 文件中加密 SQL 连接，以保护与数据库的连接安全。
- en: SQL injection vulnerabilities are applicable in **NoSQL** databases such as
    **Azure Cosmos DB** and **MongoDB**, and therefore all the previous recommendations
    are also applicable in this case as well.
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL 注入漏洞适用于 **NoSQL** 数据库，如 **Azure Cosmos DB** 和 **MongoDB**，因此所有之前的建议也适用于这种情况。
- en: General security recommendations
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一般安全建议
- en: 'In the previous sections, we learned about the major security vulnerabilities.
    In this section, we will highlight some security recommendations that will increase
    the security level of the solution, as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们学习了主要的安全漏洞。在本节中，我们将强调一些安全建议，这些建议将提高解决方案的安全性，如下所述：
- en: Consider enabling audit trails, logging, and tracing to monitor all events and
    incoming requests.
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑启用审计跟踪、日志记录和跟踪来监控所有事件和传入请求。
- en: Always upgrade the .NET version used in your solution by installing .NET patches
    to benefit from the security enhancements released by the Microsoft team.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过安装 .NET 补丁始终升级您解决方案中使用的 .NET 版本，以从微软团队发布的安全增强功能中受益。
- en: Consider encrypting passwords before sending them to the server to avoid sniffing
    attacks.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在将密码发送到服务器之前考虑加密，以避免嗅探攻击。
- en: 'One of the common security steps is to enable the following response headers:'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 常见的安全步骤之一是启用以下响应头：
- en: 'a. `Content-Security-Policy`: This allows us to specify a source whitelist
    of content that can be loaded onto the website. It helps to prevent XSS, `X-Content-Type-Options`:
    This helps in preventing `X-XSS-Protection`: This enables the XSS filter.'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a. `Content-Security-Policy`: 这允许我们指定可以加载到网站上的内容源白名单。它有助于防止 XSS，`X-Content-Type-Options`:
    这有助于防止 `X-XSS-Protection`: 这启用了 XSS 过滤器。'
- en: Block `X-Frame-Options` response header.
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阻止 `X-Frame-Options` 响应头。
- en: 'Prevent disclosing sensitive data related to the hosting server and .NET Framework
    by removing the following response headers:'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过删除以下响应头，防止泄露与托管服务器和 .NET 框架相关的敏感数据：
- en: 'a. `Server`: This header specifies the web server version (IIS version).'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'a. `Server`: 这个头指定了 Web 服务器版本（IIS 版本）。'
- en: 'b. `X-Powered-By`: This header indicates that the website is powered by ASP.NET.'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'b. `X-Powered-By`: 这个头指示该网站由 ASP.NET 驱动。'
- en: 'c. `X-AspNet-Version`: This header specifies the version of ASP.NET used.'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'c. `X-AspNet-Version`: 这个头指定了使用的 ASP.NET 版本。'
- en: Avoid using third-party components and libraries with known vulnerabilities.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用已知存在漏洞的第三方组件和库。
- en: Consider updating **NuGet** packages periodically to make use of the latest
    fixes and enhancements.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑定期更新 **NuGet** 包，以利用最新的修复和增强功能。
- en: If you are hosting your app with IIS, make sure to encrypt the connection string
    because it contains the credentials of the user who can access the database. If
    you are hosting your app with Azure App Service, consider storing the connection
    string in the Azure application settings instead of the `web.config` file.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您使用 IIS 托管您的应用程序，请确保加密连接字符串，因为它包含可以访问数据库的用户凭据。如果您使用 Azure App Service 托管您的应用程序，请考虑将连接字符串存储在
    Azure 应用设置中，而不是 `web.config` 文件中。
- en: In this section, we explored a set of key security practices to help secure
    our ASP.NET web applications against malicious attacks. Once each of these practices
    is applied, it will add a security layer to the application. The objective is
    to highlight various areas that a solution architect should focus on while designing
    a robust web solution.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了一系列关键的安全实践，以帮助保护我们的 ASP.NET 网络应用程序免受恶意攻击。一旦应用了这些实践中的每一个，它将为应用程序添加一层安全防护。目标是强调在设计和构建健壮的
    Web 解决方案时，解决方案架构师应关注的各个领域。
- en: In the next section, we will learn how to secure a web API with a set of security
    recommendations.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何通过一系列安全建议来确保 Web API 的安全。
- en: Web API security recommendations
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web API 安全建议
- en: 'With an increasing demand to build modern web and mobile apps, web APIs have
    become essential to empower these applications, with an easy way to communicate
    with the data access layer. This should be accompanied by proper security measures
    to protect web APIs. In addition to the security recommendations we discussed
    in the previous section, here are some essential tips to secure your web API:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 随着对构建现代网页和移动应用需求的不断增长，Web API 已成为赋予这些应用通信数据访问层功能的关键，同时也需要采取适当的措施来保护 Web API。除了我们在上一节中讨论的安全建议外，以下是一些确保您的
    Web API 安全的基本技巧：
- en: Consider using the latest **Transport Layer Security** (**TLS**) version to
    encrypt communication between the app and the server.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用最新的 **传输层安全性**（**TLS**）版本来加密应用程序和服务器之间的通信。
- en: Authenticate users who are trying to consume the RESTful API.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认证尝试消费 RESTful API 的用户。
- en: Act like a stalker by enabling audit logs, tracing, and logging to monitoring
    all events.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过启用审计日志、跟踪和日志记录来监控所有事件，表现得像跟踪狂。
- en: Consider protecting your API by applying throttling and quotas, such as limiting
    the number of messages per a specific time. This is important to control the bandwidth
    of the server according to the available capacity.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑通过应用节流和配额来保护您的 API，例如限制特定时间内的消息数量。这对于根据可用容量控制服务器的带宽非常重要。
- en: Always validate the **JavaScript Object Notation** (**JSON**) data input to
    avoid SQL injection.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是验证**JavaScript对象表示法**（**JSON**）数据输入，以避免SQL注入。
- en: Enable proper firewall configuration on the server where you host the web API.
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在您托管Web API的服务器上启用适当的防火墙配置。
- en: Consider having an API gateway, which is a middleware layer that sits between
    the client application and the RESTful API. This helps you to secure, control,
    and monitor the traffic to the RESTful API.
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用API网关，这是一个位于客户端应用程序和RESTful API之间的中间件层。这可以帮助您保护、控制和监控RESTful API的流量。
- en: Prevent a **distributed denial-of-service** attack (also known as a **DDoS**
    attack), which sends a large number of useless requests to overwhelm the memory
    and capacity of the hosting server by flooding it with concurrent connections.
    You can prevent DDoS attacks in IIS by enabling the dynamic IP restrictions extension
    that can block incoming requests from certain IP addresses based on the number
    of concurrent requests. If the application is hosted in Azure, then we can enable
    **Azure DDoS protection**.
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止**分布式拒绝服务**攻击（也称为**DDoS**攻击），这种攻击通过并发连接的洪水来发送大量无用的请求，从而耗尽托管服务器的内存和容量。您可以通过启用基于并发请求数量的动态IP限制扩展来防止IIS中的DDoS攻击，该扩展可以阻止来自某些IP地址的传入请求。如果应用程序托管在Azure上，则我们可以启用**Azure
    DDoS保护**。
- en: Consider enforcing a timestamp in every request by adding it to the request
    header. This timestamp should be validated on the server to only accept requests
    if their timestamp is within a particular timeframe. This approach can help you
    protect the web API against brute-force attacks (explained in the *Blocking brute-force
    attacks* section) and replay attacks that allow attackers to maliciously complete
    duplicate requests.
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑在每次请求中强制执行时间戳，将其添加到请求头中。服务器应验证此时间戳，以确保只接受在特定时间段内的请求。这种方法可以帮助您保护Web API免受暴力攻击（在*阻止暴力攻击*部分中解释）和重放攻击，这些攻击允许攻击者恶意完成重复请求。
- en: In this section, we discussed a set of security recommendations that should
    be applied to secure an ASP.NET web API.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了一系列应应用于确保ASP.NET Web API安全的建议。
- en: Protecting web apps and APIs hosted on Azure
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护托管在Azure上的Web应用程序和API
- en: 'In this section, we will highlight some security recommendations to bear in
    mind if you are hosting your web application or your web API on Azure, as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将强调如果您在Azure上托管Web应用程序或Web API，应牢记的一些安全建议，如下所述：
- en: Consider enabling **Azure Defender** to protect your app service.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑启用**Azure Defender**以保护您的应用程序服务。
- en: Always run the integrated vulnerability assessment scanner available in Azure
    Defender for SQL servers to extend the protection of SQL servers along with stored
    databases.
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是运行Azure Defender中可用的集成漏洞扫描程序，以扩展SQL服务器及其存储数据库的保护。
- en: You can keep your app service up to date by using the latest versions of supported
    platforms, frameworks, and protocols.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过使用受支持平台、框架和协议的最新版本来保持应用程序服务最新。
- en: Disable anonymous access to the blob storage to protect uploaded files. You
    can enable anonymous access to specific folders if needed.
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 禁用对blob存储的匿名访问以保护上传的文件。如果需要，您可以启用对特定文件夹的匿名访问。
- en: Enforce the usage of the **SSL**/**TLS** protocol to provide a secure connection.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制使用**SSL**/**TLS**协议以提供安全连接。
- en: Always use **File Transfer Protocol Secure** (**FTPS**) instead of the regular
    **FTP** to deploy your files and disable the FTP protocol if you are not using
    it.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 总是使用**安全文件传输协议**（**FTPS**）而不是常规的**FTP**来部署您的文件，如果您不使用FTP，请禁用FTP协议。
- en: Consider using environment variables to store your database credentials, API
    tokens, and any application settings.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用环境变量来存储您的数据库凭据、API令牌以及任何应用程序设置。
- en: Consider using a cloud **Windows Application Firewall** (**WAF**), which can
    help to protect your web applications from malicious attacks and common web vulnerabilities
    such as SQL injection and XSS.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 考虑使用云**Windows应用程序防火墙**（**WAF**），这可以帮助保护您的Web应用程序免受恶意攻击和常见的Web漏洞，例如SQL注入和XSS。
- en: Summary
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned that security is an essential part of a web solution.
    We outlined the fundamental security measures and techniques to help in understanding
    the possible security vulnerabilities that will allow us to protect an ASP.NET
    web application against malicious attacks.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解到安全性是Web解决方案的一个基本组成部分。我们概述了基本的安全措施和技术，以帮助理解可能的安全漏洞，这将使我们能够保护ASP.NET
    Web应用程序免受恶意攻击。
- en: Furthermore, we highlighted some key guidelines to secure our RESTful API. Later,
    in this chapter, we explored some tips to secure our app that can be hosted on
    Azure. These security practices allow us to build robust yet secure ASP.NET apps.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们强调了确保我们的RESTful API的一些关键指南。在本章的后面部分，我们探讨了确保可以在Azure上托管的应用的一些技巧。这些安全实践使我们能够构建既强大又安全的ASP.NET应用程序。
- en: 'In addition to the recommendations shared in this chapter, I strongly recommend
    you keep updating your knowledge about the security features in ASP.NET by reading
    the online official documentation shared by the Microsoft .NET team. Here is the
    link to the documentation: [https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-5.0](https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-5.0).'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 除了本章中分享的建议外，我强烈建议您通过阅读微软.NET团队分享的在线官方文档来不断更新您对ASP.NET安全特性的知识。以下是文档的链接：[https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-5.0](https://docs.microsoft.com/en-us/aspnet/core/security/?view=aspnetcore-5.0)。
- en: In the next chapter, we will explore the different types of testing that we
    may need to conduct before releasing our solution.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨在发布解决方案之前可能需要进行的各种测试类型。
