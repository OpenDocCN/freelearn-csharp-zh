["```cs\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd\n    {\n        public Guid Id { get; private set; }\n\n        private Guid _ownerId;\n        private string _title;\n        private string _text;\n        private decimal _price;\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd\n    {\n        public Guid Id { get; }\n\n        public ClassifiedAd(Guid id)\n        {\n            if (id == default)\n                throw new ArgumentException(\n                 \"Identity must be specified\", nameof(id));\n\n            Id = id;\n        }\n\n        private Guid _ownerId;\n        private string _title;\n        private string _text;\n        private decimal _price;\n    }\n}\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd\n    {\n        public Guid Id { get; }\n\n        public ClassifiedAd(Guid id)\n        {\n            if (id == default)\n                throw new ArgumentException(\n                 \"Identity must be specified\", nameof(id));\n\n            Id = id;\n        }\n\n        public void SetTitle(string title) => _title = title;\n\n        public void UpdateText(string text) => _text = text;\n\n        public void UpdatePrice(decimal price) => _price = price;\n\n        private Guid _ownerId;\n        private string _title;\n        private string _text;\n        private decimal _price;\n    }\n}\n```", "```cs\npublic ClassifiedAd(Guid id, Guid ownerId)\n{\n    if (id == default)\n        throw new ArgumentException(\n         \"Identity must be specified\", nameof(id));\n\n    if (ownerId == default)\n        throw new ArgumentException(\n         \"Owner id must be specified\", nameof(ownerId));\n\n    Id = id;\n    _ownerId = ownerId;\n}\n```", "```cs\npublic void CreateClassifiedAd(Guid id, Guid ownerId)\n{\n    var classifiedAd = new ClassifiedAd(id, ownerId);\n\n    // store the entity somehow\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class UserId\n    {\n        private readonly Guid _value;\n\n        public UserId(Guid value)\n        {\n            if (value == default)\n                throw new ArgumentNullException(\n                 nameof(value), \"User id cannot be empty\");\n\n            _value = value;\n        }\n    }\n}\n```", "```cs\npublic class ClassifiedAd\n{\n    public Guid Id { get; }\n\n    private UserId _ownerId;\n\n    public ClassifiedAd(Guid id, UserId ownerId)\n    {\n        if (id == default)\n            throw new ArgumentException(\n             \"Identity must be specified\", nameof(id));\n\n        Id = id;\n        _ownerId = ownerId;\n    }\n\n    // rest of the code skipped\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAdId\n    {\n        private readonly Guid _value;\n\n        public ClassifiedAdId(Guid value)\n        {\n            if (value == default)\n                throw new ArgumentNullException(\n                    nameof(value), \n                    \"Classified Ad id cannot be empty\");\n\n            _value = value;\n        }\n\n    }\n}\n```", "```cs\npublic class ClassifiedAd\n{\n    public ClassifiedAdId Id { get; }\n\n    private UserId _ownerId;\n\n    public ClassifiedAd(ClassifiedAdId id, UserId ownerId)\n    {\n        Id = id;\n        _ownerId = ownerId;\n    }\n\n    // rest of the code skipped\n}\n```", "```cs\nvar classifiedAd = new ClassifiedAd(new ClassifiedAdId(id), new UserId(ownerId));\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public class Money\n    {\n        public decimal Amount { get; }\n\n        public Money(decimal amount) Amount = amount;\n    }\n}\n```", "```cs\nusing Marketplace.Domain;\nusing Xunit;\n\nnamespace Marketplace.Tests\n{\n    public class MoneyTest\n    {\n        [Fact]\n        public void \n        Money_objects_with_the_same_amount_should_be_equal()\n        {\n            var firstAmount = new Money(5);\n            var secondAmount = new Money(5);\n\n            Assert.Equal(firstAmount, secondAmount);\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class Money : IEquatable<Money>\n    {\n        public decimal Amount { get; }\n\n        public Money(decimal amount) => Amount = amount;\n\n        public bool Equals(Money other)\n        {\n            if (ReferenceEquals(null, other)) return false;\n            if (ReferenceEquals(this, other)) return true;\n            return Amount.Equals(other.Amount);\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (ReferenceEquals(null, obj)) return false;\n            if (ReferenceEquals(this, obj)) return true;\n            if (obj.GetType() != this.GetType()) return false;\n            return Equals((Money) obj);\n        }\n\n        public override int GetHashCode() => Amount.GetHashCode();\n\n        public static bool operator ==(Money left, Money right) => \n        Equals(left, right);\n\n        public static bool operator !=(Money left, Money right) => \n        !Equals(left, right);\n    }\n}\n```", "```cs\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Money : Value<Money>\n    {\n        public decimal Amount { get; }\n\n        public Money(decimal amount) => Amount = amount;\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class Price : Money\n    {\n        public Price(decimal amount) : base(amount)\n        {\n            if (amount < 0)\n                throw new ArgumentException(\n                    \"Price cannot be negative\",\n                    nameof(amount));\n        }\n    }\n}\n```", "```cs\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Money : Value<Money>\n    {\n        public decimal Amount { get; }\n\n        public Money(decimal amount) => Amount = amount;\n\n        public Money Add(Money summand) => \n            new Money(Amount + summand.Amount);\n\n        public Money Subtract(Money subtrahend) => \n            new Money(Amount - subtrahend.Amount);\n\n        public static Money operator +(\n         Money summand1, Money summand2) => summand1.Add(summand2);\n\n        public static Money operator -(\n         Money minuend, Money subtrahend) => \n          minuend.Subtract(subtrahend);\n    }\n}\n```", "```cs\n[Fact]\npublic void Sum_of_money_gives_full_amount()\n{\n    var coin1 = new Money(1);\n    var coin2 = new Money(2);\n    var coin3 = new Money(2);\n\n    var banknote = new Money(5);\n\n    Assert.Equal(banknote, coin1 + coin2 + coin3);\n}\n```", "```cs\npublic class ClassifiedAdId : Value<ClassifiedAdId>\n{\n    private readonly Guid _value; \n\n    public ClassifiedAdId(Guid value) => _value = value;\n}\n\npublic class UserId : Value<UserId>\n{\n    private readonly Guid _value; \n\n    public UserId(Guid value) => _value = value;\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAdTitle : Value<ClassifiedAdTitle>\n    {\n        public static ClassifiedAdTitle FromString(string title) =>\n            new ClassifiedAdTitle(title);\n\n        private readonly string _value;\n\n        private ClassifiedAdTitle(string value)\n        {\n            if (value.Length > 100)\n                throw new ArgumentOutOfRangeException(\n                    \"Title cannot be longer that 100 characters\",\n                    nameof(value));\n\n            _value = value;\n        }\n    }\n}\n```", "```cs\npublic static ClassifiedAdTitle FromHtml(string htmlTitle)\n{\n    var supportedTagsReplaced = htmlTitle\n        .Replace(\"<i>\", \"*\")\n        .Replace(\"</i>\", \"*\")\n        .Replace(\"<b>\", \"**\")\n        .Replace(\"</b>\", \"**\");\n    return new ClassifiedAdTitle(Regex.Replace(\n      supportedTagsReplaced, \"<.*?>\", string.Empty));\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Money : Value<Money>\n    {\n        public static Money FromDecimal(decimal amount) =>\n            new Money(amount);\n\n        public static Money FromString(string amount) =>\n            new Money(decimal.Parse(amount));\n\n        protected Money(decimal amount)\n        {\n            if (decimal.Round(amount, 2) != amount)\n                throw new ArgumentOutOfRangeException(\n                    nameof(amount),\n                    \"Amount cannot have more than two decimals\");\n\n            Amount = amount;\n        }\n\n        public decimal Amount { get; }\n\n        // Public methods go here as before\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Money : Value<Money>\n    {\n        private const string DefaultCurrency = \"EUR\";\n\n        public static Money FromDecimal(\n         decimal amount, string currency = DefaultCurrency) =>\n            new Money(amount, currency);\n\n        public static Money FromString(\n         string amount, string currency = DefaultCurrency) =>\n            new Money(decimal.Parse(amount), currency);\n\n        protected Money(decimal amount, string currencyCode = \"EUR\")\n        {\n            if (decimal.Round(amount, 2) != amount)\n                throw new ArgumentOutOfRangeException(\n                    nameof(amount),\n                    \"Amount cannot have more than two decimals\");\n\n            Amount = amount;\n            CurrencyCode = currencyCode;\n        }\n\n        public decimal Amount { get; }\n        public string CurrencyCode { get; }\n\n        public Money Add(Money summand)\n        {\n            if (CurrencyCode != summand.CurrencyCode)\n                throw new CurrencyMismatchException(\n                    \"Cannot sum amounts with different currencies\");\n\n            return new Money(Amount + summand.Amount);\n        }\n\n        public Money Subtract(Money subtrahend)\n        {\n            if (CurrencyCode != subtrahend.CurrencyCode)\n                throw new CurrencyMismatchException(\n                 \"Cannot subtract amounts with different currencies\");\n\n            return new Money(Amount - subtrahend.Amount);\n        }\n\n        public static Money operator +(\n          Money summand1, Money summand2) => \n            summand1.Add(summand2);\n\n        public static Money operator -(\n          Money minuend, Money subtrahend) => \n           minuend.Subtract(subtrahend);\n    }\n\n    public class CurrencyMismatchException : Exception\n    {\n        public CurrencyMismatchException(string message) : \n          base(message)\n        {\n        }\n    }\n}\n```", "```cs\nvar firstAmount = Money.FromDecimal(10, \"USD\");\nvar secondAmount = Money.FromDecimal(20, \"Usd\");\nvar thirdAmount = Money.FromDecimal(30, \"$\");\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public interface ICurrencyLookup\n    {\n        CurrencyDetails FindCurrency(string currencyCode);\n    }\n\n    public class CurrencyDetails : Value<CurrencyDetails>\n    {\n        public string CurrencyCode { get; set; }\n        public bool InUse { get; set; }\n        public int DecimalPlaces { get; set; }\n\n        public static CurrencyDetails None = new CurrencyDetails {\n            InUse = false};\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class Money : Value<Money>\n    {\n        public static string DefaultCurrency = \"EUR\";\n\n        public static Money FromDecimal(\n          decimal amount, string currency, \n            ICurrencyLookup currencyLookup) =>\n            new Money(amount, currency, currencyLookup);\n\n        public static Money FromString(string amount, string currency,\n            ICurrencyLookup currencyLookup) =>\n            new Money(decimal.Parse(amount), currency, currencyLookup);\n\n        protected Money(decimal amount, string currencyCode, \n          ICurrencyLookup currencyLookup)\n        {\n            if (string.IsNullOrEmpty(currencyCode))\n                throw new ArgumentNullException(\n                    nameof(currencyCode), \n                    \"Currency code must be specified\");\n\n            var currency = currencyLookup.FindCurrency(currencyCode);\n            if (!currency.InUse)\n                throw new ArgumentException(\n                  $\"Currency {currencyCode} is not valid\");\n\n            if (decimal.Round(\n              amount, currency.DecimalPlaces) != amount)\n                throw new ArgumentOutOfRangeException(\n                    nameof(amount),\n                    $\"Amount in {\n                     currencyCode} cannot have more than {\n                          currency.DecimalPlaces} decimals\");\n\n            Amount = amount;\n            Currency = currency;\n        }\n\n        private Money(decimal amount, CurrencyDetails currency)\n        {\n            Amount = amount;\n            Currency = currency;\n        }\n\n        public decimal Amount { get; }\n        public CurrencyDetails Currency { get; }\n\n        public Money Add(Money summand)\n        {\n            if (Currency != summand.Currency)\n                throw new CurrencyMismatchException(\n                    \"Cannot sum amounts with different currencies\");\n\n            return new Money(Amount + summand.Amount, Currency);\n        }\n\n        public Money Subtract(Money subtrahend)\n        {\n            if (Currency != subtrahend.Currency)\n                throw new CurrencyMismatchException(\n                 \"Cannot subtract amounts with different currencies\");\n\n            return new Money(Amount - subtrahend.Amount, Currency);\n        }\n\n        public static Money operator +(Money summand1, Money summand2) \n          => summand1.Add(summand2);\n\n        public static Money operator -(Money minuend, Money subtrahend) \n          => minuend.Subtract(subtrahend);\n\n        public override string ToString() => $\"{\n            Currency.CurrencyCode} {Amount}\";\n    }\n\n    public class CurrencyMismatchException : Exception\n    {\n        public CurrencyMismatchException(string message) : \n          base(message)\n        {\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\nusing Marketplace.Domain;\n\nnamespace Marketplace.Tests\n{\n    public class FakeCurrencyLookup : ICurrencyLookup\n    {\n        private static readonly IEnumerable<CurrencyDetails> \n        _currencies =\n            new[]\n            {\n                new CurrencyDetails\n                {\n                    CurrencyCode = \"EUR\",\n                    DecimalPlaces = 2,\n                    InUse = true\n                },\n                new CurrencyDetails\n                {\n                    CurrencyCode = \"USD\",\n                    DecimalPlaces = 2,\n                    InUse = true\n                },\n                new CurrencyDetails\n                {\n                    CurrencyCode = \"JPY\",\n                    DecimalPlaces = 0,\n                    InUse = true\n                },\n                new CurrencyDetails\n                {\n                    CurrencyCode = \"DEM\",\n                    DecimalPlaces = 2,\n                    InUse = false\n                }\n            };\n\n        public CurrencyDetails FindCurrency(string currencyCode)\n        {\n            var currency = _currencies.FirstOrDefault(x => \n              x.CurrencyCode == currencyCode);\n            return currency ?? CurrencyDetails.None;\n        }\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Domain;\nusing Xunit;\n\nnamespace Marketplace.Tests\n{\n    public class Money_Spec\n    {\n        private static readonly ICurrencyLookup CurrencyLookup =\n            new FakeCurrencyLookup();\n\n        [Fact]\n        public void Two_of_same_amount_should_be_equal()\n        {\n            var firstAmount = Money.FromDecimal(5, \"EUR\", \n            CurrencyLookup);\n            var secondAmount = Money.FromDecimal(5, \"EUR\", \n            CurrencyLookup);\n\n            Assert.Equal(firstAmount, secondAmount);\n        }\n\n        [Fact]\n        public void Two_of_same_amount_but_different*Currencies* should_not_be_equal()\n        {\n            var firstAmount = Money.FromDecimal(5, \"EUR\", \n            CurrencyLookup);\n            var secondAmount = Money.FromDecimal(5, \"USD\", \n            CurrencyLookup);\n\n            Assert.NotEqual(firstAmount, secondAmount);\n        }\n\n        [Fact]\n        public void FromString_and_FromDecimal_should_be_equal()\n        {\n            var firstAmount = Money.FromDecimal(5, \"EUR\", \n            CurrencyLookup);\n            var secondAmount = Money.FromString(\"5.00\", \"EUR\", \n            CurrencyLookup);\n\n            Assert.Equal(firstAmount, secondAmount);\n        }\n\n        [Fact]\n        public void Sum_of_money_gives_full_amount()\n        {\n            var coin1 = Money.FromDecimal(1, \"EUR\", CurrencyLookup);\n            var coin2 = Money.FromDecimal(2, \"EUR\", CurrencyLookup);\n            var coin3 = Money.FromDecimal(2, \"EUR\", CurrencyLookup);\n\n            var banknote = Money.FromDecimal(5, \"EUR\", CurrencyLookup);\n\n            Assert.Equal(banknote, coin1 + coin2 + coin3);\n        }\n\n        [Fact]\n        public void Unused_currency_should_not_be_allowed()\n        {\n            Assert.Throws<ArgumentException>(() =>\n                Money.FromDecimal(100, \"DEM\", CurrencyLookup)\n            );\n        }\n\n        [Fact]\n        public void Unknown_currency_should_not_be_allowed()\n        {\n            Assert.Throws<ArgumentException>(() =>\n                Money.FromDecimal(100, \"WHAT?\", CurrencyLookup)\n            );\n        }\n\n        [Fact]\n        public void Throw_when_too_many_decimal_places()\n        {\n            Assert.Throws<ArgumentOutOfRangeException>(() =>\n                Money.FromDecimal(100.123m, \"EUR\", CurrencyLookup)\n            );\n        }\n\n        [Fact]\n        public void Throws_on_adding_different_currencies()\n        {\n            var firstAmount = Money.FromDecimal(5, \"USD\", \n            CurrencyLookup);\n            var secondAmount = Money.FromDecimal(5, \"EUR\", \n            CurrencyLookup);\n\n            Assert.Throws<CurrencyMismatchException>(() => \n                firstAmount + secondAmount\n            );\n        }\n\n        [Fact]\n        public void Throws_on_substracting_different_currencies()\n        {\n            var firstAmount = Money.FromDecimal(5, \"USD\", \n            CurrencyLookup);\n            var secondAmount = Money.FromDecimal(5, \"EUR\", \n            CurrencyLookup);\n\n            Assert.Throws<CurrencyMismatchException>(() => \n                firstAmount - secondAmount\n            );\n        }\n    }\n}\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd\n    {\n        public ClassifiedAdId Id { get; }\n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId)\n        {\n            Id = id;\n            OwnerId = ownerId;\n            State = ClassifiedAdState.Inactive;\n        }\n\n        public void SetTitle(ClassifiedAdTitle title) => Title = title;\n\n        public void UpdateText(ClassifiedAdText text) => Text = text;\n\n        public void UpdatePrice(Price price) => Price = price;\n\n        public void RequestToPublish()\n        {\n            if (Title == null)\n                throw new InvalidEntityStateException(this, \"title \n                cannot be empty\");\n\n            if (Text == null)\n                throw new InvalidEntityStateException(this, \"text \n                cannot be empty\");\n\n            if (Price?.Amount == 0)\n                throw new InvalidEntityStateException(this, \"price \n                cannot be zero\");\n\n            State = ClassifiedAdState.PendingReview;\n        }\n\n        public UserId OwnerId { get; }\n        public ClassifiedAdTitle Title { get; private set; }\n        public ClassifiedAdText Text { get; private set; }\n        public Price Price { get; private set; }\n        public ClassifiedAdState State { get; private set; }\n        public UserId ApprovedBy { get; private set; }\n\n        public enum ClassifiedAdState\n        {\n            PendingReview,\n            Active,\n            Inactive,\n            MarkedAsSold\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class InvalidEntityStateException : Exception\n    {\n        public InvalidEntityStateException(object entity, string \n        message)\n            : base($\"Entity {entity.GetType().Name} state change \n            rejected, {message}\")\n        {\n        }\n    }\n}\n```", "```cs\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd\n    {\n        public ClassifiedAdId Id { get; }\n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId)\n        {\n            Id = id;\n            OwnerId = ownerId;\n            State = ClassifiedAdState.Inactive;\n            EnsureValidState();\n        }\n\n        public void SetTitle(ClassifiedAdTitle title)\n        {\n            Title = title;\n            EnsureValidState();\n        }\n\n        public void UpdateText(ClassifiedAdText text)\n        {\n            Text = text;\n            EnsureValidState();\n        }\n\n        public void UpdatePrice(Price price)\n        {\n            Price = price;\n            EnsureValidState();\n        }\n\n        public void RequestToPublish()\n        {\n            State = ClassifiedAdState.PendingReview;\n            EnsureValidState();\n        }\n\n        protected override void EnsureValidState()\n        {\n            var valid =\n                Id != null &&\n                OwnerId != null &&\n                (State switch\n                {\n                    ClassifiedAdState.PendingReview =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0,\n                    ClassifiedAdState.Active =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0\n                        && ApprovedBy != null,\n                    _ => true\n                });\n\n            if (!valid)\n                throw new InvalidEntityStateException(\n                    this, $\"Post-checks failed in state {State}\");\n        }\n\n        public UserId OwnerId { get; }\n        public ClassifiedAdTitle Title { get; private set; }\n        public ClassifiedAdText Text { get; private set; }\n        public Price Price1 { get; private set; }\n        public ClassifiedAdState State { get; private set; }\n        public UserId ApprovedBy { get; private set; }\n\n        public enum ClassifiedAdState\n        {\n            PendingReview,\n            Active,\n            Inactive,\n            MarkedAsSold\n        }\n    }\n}\n```", "```cs\nusing System;\nusing Marketplace.Domain;\nusing Xunit;\n\nnamespace Marketplace.Tests\n{\n    public class ClassifiedAd_Publish_Spec\n    {\n        private readonly ClassifiedAd _classifiedAd;\n\n        public ClassifiedAd_Publish_Spec()\n        {\n            _classifiedAd = new ClassifiedAd(\n                new ClassifiedAdId(Guid.NewGuid()), \n                new UserId(Guid.NewGuid()));\n        }\n\n        [Fact]\n        public void Can_publish_a_valid_ad()\n        {\n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));\n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));\n            _classifiedAd.UpdatePrice(\n                Price.FromDecimal(100.10m, \"EUR\", \n                new FakeCurrencyLookup()));\n\n            _classifiedAd.RequestToPublish();\n\n            Assert.Equal(ClassifiedAd.ClassifiedAdState.PendingReview,\n                _classifiedAd.State);\n        }\n\n        [Fact]\n        public void Cannot_publish_without_title()\n        {\n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));\n            _classifiedAd.UpdatePrice(\n                Price.FromDecimal(100.10m, \"EUR\", \n                    new FakeCurrencyLookup()));\n\n            Assert.Throws<InvalidEntityStateException>(() => \n            _classifiedAd.RequestToPublish());\n        }\n\n        [Fact]\n        public void Cannot_publish_without_text()\n        {\n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));\n            _classifiedAd.UpdatePrice(\n                Price.FromDecimal(100.10m, \"EUR\", \n                    new FakeCurrencyLookup()));\n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());\n        }\n\n        [Fact]\n        public void Cannot_publish_without_price()\n        {\n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));\n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));\n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());\n        }\n\n        [Fact]\n        public void Cannot_publish_with_zero_price()\n        {\n            _classifiedAd.SetTitle(\n                ClassifiedAdTitle.FromString(\"Test ad\"));\n            _classifiedAd.UpdateText(\n                ClassifiedAdText.FromString(\"Please buy my stuff\"));\n            _classifiedAd.UpdatePrice(\n                Price.FromDecimal(0.0m, \"EUR\", \n                    new FakeCurrencyLookup()));\n\n            Assert.Throws<InvalidEntityStateException>(\n                () => _classifiedAd.RequestToPublish());\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public static class Events\n    {\n        public class ClassifiedAdCreated\n        {\n            public Guid Id { get; set; }\n            public Guid OwnerId { get; set; }\n        }\n\n        public class ClassifiedAdTitleChanged\n        {\n            public Guid Id { get; set; }\n            public string Title { get; set; }\n        }\n\n        public class ClassifiedAdTextUpdated\n        {\n            public Guid Id { get; set; }\n            public string AdText { get; set; }\n        }\n\n        public class ClassifiedAdPriceUpdated\n        {\n            public Guid Id { get; set; }\n            public decimal Price { get; set; }\n            public string CurrencyCode { get; set; }\n        }\n\n        public class ClassifiedAdSentForReview\n        {\n            public Guid Id { get; set; }\n        }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Marketplace.Framework\n{\n    public abstract class Entity\n    {\n        private readonly List<object> _events;\n\n        protected Entity() => _events = new List<object>();\n\n        protected void Raise(object @event) => _events.Add(@event);\n\n        public IEnumerable<object> GetChanges() => \n        _events.AsEnumerable();\n\n        public void ClearChanges() => _events.Clear();\n    }\n}\n```", "```cs\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd : Entity\n    {\n        public ClassifiedAdId Id { get; }\n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId)\n        {\n            Id = id;\n            OwnerId = ownerId;\n            State = ClassifiedAdState.Inactive;\n\n            EnsureValidState();\n\n            Raise(new Events.ClassifiedAdCreated\n            {\n                Id = id,\n                OwnerId = ownerId\n            });\n        }\n\n        public void SetTitle(ClassifiedAdTitle title)\n        {\n            Title = title;\n            EnsureValidState();\n\n            Raise(new Events.ClassifiedAdTitleChanged\n            {\n                Id = Id,\n                Title = title\n            });\n        }\n\n        public void UpdateText(ClassifiedAdText text)\n        {\n            Text = text;\n            EnsureValidState();\n\n            Raise(new Events.ClassifiedAdTextUpdated\n            {\n                Id = Id,\n                AdText = text\n            });\n        }\n\n        public void UpdatePrice(Price price)\n        {\n            Price = price;\n            EnsureValidState();\n\n            Raise(new Events.ClassifiedAdPriceUpdated\n            {\n                Id = Id,\n                Price = Price.Amount,\n                CurrencyCode = Price.Currency.CurrencyCode\n            });\n        }\n\n        public void RequestToPublish()\n        {\n            State = ClassifiedAdState.PendingReview;\n            EnsureValidState();\n\n            Raise(new Events.ClassidiedAdSentForReview{Id = Id});\n        }\n\n        // Rest of the entity code remains the same\n    }\n}\n```", "```cs\npublic async Task Handle(RequestToPublish command)\n{\n    var entity = await _repository.Load<ClassifiedAd>(command.Id);\n    entity.RequestToPublish();\n    await _repository.Save(entity);\n\n    foreach (var @event in entity.GetChanges())\n    {\n        await _bus.Publish(@event);\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAdId\n    {\n        private readonly Guid _value;\n\n        public ClassifiedAdId(Guid value)\n        {\n            if (value == default)\n                throw new ArgumentNullException(nameof(value), \n                    \"Classified Ad id cannot be empty\");\n\n            _value = value;\n        }\n\n        public static implicit operator Guid(ClassifiedAdId self) => \n        self._value;\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Marketplace.Framework\n{\n    public abstract class Entity\n    {\n        private readonly List<object> _events;\n\n        protected Entity() => _events = new List<object>();\n\n        protected void Apply(object @event)\n        {\n            When(@event);\n            EnsureValidState();\n            _events.Add(@event);\n        }\n\n        protected abstract void When(object @event);\n\n        public IEnumerable<object> GetChanges() \n            => _events.AsEnumerable();\n\n        public void ClearChanges() => _events.Clear();\n\n        protected abstract void EnsureValidState();\n    }\n}\n```", "```cs\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAd : Entity\n    {\n        public ClassifiedAdId Id { get; private set; }\n        public UserId OwnerId { get; private set; }\n        public ClassifiedAdTitle Title { get; private set; }\n        public ClassifiedAdText Text { get; private set; }\n        public Price Price { get; private set; }\n        public ClassifiedAdState State { get; private set; }\n        public UserId ApprovedBy { get; private set; }\n\n        public ClassifiedAd(ClassifiedAdId id, UserId ownerId) =>\n            Apply(new Events.ClassifiedAdCreated\n            {\n                Id = id,\n                OwnerId = ownerId\n            });\n\n        public void SetTitle(ClassifiedAdTitle title) =>\n            Apply(new Events.ClassifiedAdTitleChanged\n            {\n                Id = Id,\n                Title = title\n            });\n\n        public void UpdateText(ClassifiedAdText text) =>\n            Apply(new Events.ClassifiedAdTextUpdated\n            {\n                Id = Id,\n                AdText = text\n            });\n\n        public void UpdatePrice(Price price) =>\n            Apply(new Events.ClassifiedAdPriceUpdated\n            {\n                Id = Id,\n                Price = price.Amount,\n                CurrencyCode = price.Currency.CurrencyCode\n            });\n\n        public void RequestToPublish() =>\n            Apply(new Events.ClassidiedAdSentForReview {Id = Id});\n\n        protected override void When(object @event)\n        {\n            switch (@event)\n            {\n                case Events.ClassifiedAdCreated e:\n                    Id = new ClassifiedAdId(e.Id);\n                    OwnerId = new UserId(e.OwnerId);\n                    State = ClassifiedAdState.Inactive;\n                    break;\n                case Events.ClassifiedAdTitleChanged e:\n                    Title = new ClassifiedAdTitle(e.Title);\n                    break;\n                case Events.ClassifiedAdTextUpdated e:\n                    Text = new ClassifiedAdText(e.AdText);\n                    break;\n                case Events.ClassifiedAdPriceUpdated e:\n                    Price = new Price(e.Price, e.CurrencyCode);\n                    break;\n                case Events.ClassidiedAdSentForReview e:\n                    State = ClassifiedAdState.PendingReview;\n                    break;\n            }\n        }\n\n        protected override void EnsureValidState()\n        {\n            var valid =\n                Id != null &&\n                OwnerId != null &&\n                (State switch\n                {\n                    ClassifiedAdState.PendingReview =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0,\n                    ClassifiedAdState.Active =>\n                        Title != null\n                        && Text != null\n                        && Price?.Amount > 0\n                        && ApprovedBy != null,\n                    _ => true\n                });\n\n            if (!valid)\n                throw new InvalidEntityStateException(\n                    this, $\"Post-checks failed in state {State}\");\n        }\n\n        public enum ClassifiedAdState\n        {\n            PendingReview,\n            Active,\n            Inactive,\n            MarkedAsSold\n        }\n    }\n}\n```", "```cs\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAdText : Value<ClassifiedAdText>\n    {\n        public string Value { get; }\n\n        internal ClassifiedAdText(string text) => Value = text;\n\n        public static ClassifiedAdText FromString(string text) \n            => new ClassifiedAdText(text);\n\n        public static implicit operator string(ClassifiedAdText text)\n            => text.Value;\n    }\n}\n```", "```cs\nusing System;\nusing System.Text.RegularExpressions;\nusing Marketplace.Framework;\n\nnamespace Marketplace.Domain\n{\n    public class ClassifiedAdTitle : Value<ClassifiedAdTitle>\n    {\n        public static ClassifiedAdTitle FromString(string title)\n        {\n            CheckValidity(title);\n            return new ClassifiedAdTitle(title);\n        }\n\n        public static ClassifiedAdTitle FromHtml(string htmlTitle)\n        {\n            var supportedTagsReplaced = htmlTitle\n                .Replace(\"<i>\", \"*\")\n                .Replace(\"</i>\", \"*\")\n                .Replace(\"<b>\", \"**\")\n                .Replace(\"</b>\", \"**\");\n\n            var value = Regex.Replace(supportedTagsReplaced, \n                \"<.*?>\", string.Empty);\n            CheckValidity(value);\n\n            return new ClassifiedAdTitle(value);\n        }\n\n        public string Value { get; }\n\n        internal ClassifiedAdTitle(string value) => Value = value;\n\n        public static implicit operator string(ClassifiedAdTitle title) \n            => title.Value;\n\n        private static void CheckValidity(string value)\n        {\n            if (value.Length > 100)\n                throw new ArgumentOutOfRangeException(\n                    \"Title cannot be longer that 100 characters\",\n                    nameof(value));\n        }\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Marketplace.Domain\n{\n    public class Price : Money\n    {\n        private Price(\n            decimal amount, \n            string currencyCode, \n            ICurrencyLookup currencyLookup\n        ) : base(amount, currencyCode, currencyLookup)\n        {\n            if (amount < 0)\n                throw new ArgumentException(\n                    \"Price cannot be negative\",\n                    nameof(amount));\n        }\n\n        internal Price(decimal amount, string currencyCode) \n            : base(amount, new CurrencyDetails{CurrencyCode = \n              currencyCode}) { }\n\n        public static Price FromDecimal(decimal amount, string \n        currency,\n            ICurrencyLookup currencyLookup) =>\n            new Price(amount, currency, currencyLookup);\n    }\n}\n```"]