["```cs\npublic Flight? FindFlightById(string id) {\n  return _flights.Find(f => f.Id == id);\n}\n```", "```cs\nprivate Flight? FindFlightById(string id) {\n  return _flights.Find(f => f.Id == id);\n}\n```", "```cs\npublic Flight? DelayFlight(string fId, DateTime newTime) {\n  // Details omitted\n}\npublic Flight? MarkFlightArrived(DateTime time, string id){\n  // Details omitted\n}\npublic Flight? MarkFlightDeparted(string id, DateTime t) {\n  // Details omitted\n}\n```", "```cs\npublic Flight? MarkFlightDelayed(\n  string id, DateTime newDepartureTime) {\n  // Details omitted\n}\npublic Flight? MarkFlightArrived(DateTime arrivalTime,\n  string id) {\n  // Details omitted\n}\npublic Flight? MarkFlightDeparted(string id,\n  DateTime departureTime) {\n  // Details omitted\n}\n```", "```cs\npublic Flight ScheduleNewFlight(string id, string dest,\n  DateTime depart, string gate) {\n  Flight flight = new() {\n      Id = id,\n      Destination = dest,\n      DepartureTime = depart,\n      Gate = gate,\n      Status = FlightStatus.Inbound\n  };\n  _flights.Add(flight);\n  return flight;\n}\n```", "```cs\npublic Flight ScheduleNewFlight(Flight flight) {\n  _flights.Add(flight);\n  return flight;\n}\n```", "```cs\npublic Flight ScheduleNewFlight(string id, string dest,\n  DateTime depart, string gate) {\n  Flight flight = new() {\n      Id = id,\n      Destination = dest,\n      DepartureTime = depart,\n      Gate = gate,\n      Status = FlightStatus.Inbound\n  };\n  _flights.Add(flight);\n  return flight;\n}\npublic Flight ScheduleNewFlight(Flight flight) {\n  _flights.Add(flight);\n  return flight;\n}\n```", "```cs\npublic Flight ScheduleNewFlight(string id, string dest,\n  DateTime depart, string gate) {\n  Flight flight = new() {\n      Id = id,\n      Destination = dest,\n      DepartureTime = depart,\n      Gate = gate,\n      Status = FlightStatus.Inbound\n  };\n  return ScheduleNewFlight(flight);\n}\npublic Flight ScheduleNewFlight(Flight flight) {\n  _flights.Add(flight);\n  return flight;\n}\n```", "```cs\npublic class Flight {\n    public string Id { get; set; }\n    public string Destination { get; set; }\n    public DateTime DepartureTime { get; set; }\n    public DateTime ArrivalTime { get; set; }\n    public string Gate { get; set; }\n    public FlightStatus Status { get; set; }\n    public override string ToString() {\n        return $\"{Id} to {Destination} at {DepartureTime}\";\n    }\n}\n```", "```cs\npublic Flight(string id, string destination,\n  DateTime departureTime) {\n  Id = id;\n  Destination = destination;\n  DepartureTime = departureTime;\n}\n```", "```cs\npublic Flight() {\n}\n```", "```cs\npublic Flight ScheduleNewFlight(string id, string dest,\n  DateTime depart, string gate) {\n  Flight flight = new(id, dest, depart) {\n      Gate = gate,\n      Status = FlightStatus.Inbound\n  };\n  return ScheduleNewFlight(flight);\n}\n```", "```cs\npublic Flight(string id, string destination,\n  DateTime departureTime) {\n  Id = id;\n  Destination = destination;\nDepartureTime = departureTime;\n}\npublic Flight(string id, string destination,\n  DateTime departureTime, FlightStatus status) {\n  Id = id;\n  Destination = destination;\n  DepartureTime = departureTime;\n  Status = status;\n}\n```", "```cs\npublic Flight(string id, string destination,\n  DateTime departureTime) {\n  Id = id;\n  Destination = destination;\n  DepartureTime = departureTime;\n}\npublic Flight(string id, string destination,\n  DateTime departureTime, FlightStatus status)\n  : this(id, destination, departureTime) {\n  Status = status;\n}\n```", "```cs\npublic Flight? MarkFlightDelayed(string id,\n  DateTime newDepartureTime) {\n  // Details omitted...\n}\npublic Flight? MarkFlightArrived(DateTime arrivalTime,\n  string id) {\n  // Details omitted...\n}\npublic Flight? MarkFlightDeparted(string id,\n  DateTime departureTime) {\n  // Details omitted...\n}\n```", "```cs\npublic Flight? MarkFlightArrived(string id,\n  DateTime arrivalTime) {\n  Flight? flight = FindFlightById(id);\n  if (flight != null) {\n    flight.ArrivalTime = arrivalTime;\n    flight.Status = FlightStatus.OnTime;\n    Console.WriteLine($\"{id} arrived at {Format(arrivalTime)}.\");\n    } else {\n      Console.WriteLine($\"{id} could not be found\");\n    }\n    return flight;\n}\n```", "```cs\nFlight? actual =\n  _target.MarkFlightArrived(flightId, arrivalTime);\n```", "```cs\nFlight? actual =\n  _target.MarkFlightArrived(flightId, arrivalTime, \"A4\");\n```", "```cs\npublic Flight? MarkFlightArrived(string id,\n  DateTime arrivalTime, string gate) {\n  Flight? flight = FindFlightById(id);\n  if (flight != null) {\n    flight.ArrivalTime = arrivalTime;\n    flight.Gate = gate;\n    flight.Status = FlightStatus.OnTime;\n    Console.WriteLine($\"{id} arrived at {Format(arrivalTime)}.\");\n  } else {\n    Console.WriteLine($\"{id} could not be found\");\n  }\n  return flight;\n}\n```", "```cs\npublic Flight? MarkFlightArrived(string id,\n  DateTime arrivalTime, string gate = \"TBD\") {\n  // Details omitted...\n}\n```", "```cs\nFlight? actual =\n  _target.MarkFlightArrived(flightId, arrivalTime);\n```", "```cs\nFlight? actual =\n  _target.MarkFlightArrived(flightId, arrivalTime, \"A4\");\n```", "```cs\npublic Flight ScheduleNewFlight(string id, string dest, DateTime depart, string gate) {\n    Flight flight = new(id, dest, depart) {\n        Gate = gate,\n        Status = FlightStatus.Inbound\n    };\n    return ScheduleNewFlight(flight);\n}\n```", "```cs\npublic Flight ScheduleNewFlight(string id, string dest,\n  DateTime depart) {\n    Flight flight = new(id, dest, depart) {\n        Status = FlightStatus.Inbound\n    };\n    return ScheduleNewFlight(flight);\n}\n```", "```cs\nprivate Flight? FindFlightById(string id) {\n    return _flights.FirstOrDefault(f => f.Id == id);\n}\n```", "```cs\nFindFlightById(string id) =>\n  _flights.FirstOrDefault(f => f.Id == id);\n```", "```cs\npublic Flight? MarkFlightDelayed(string id,\n  DateTime newDepartureTime) {\n  Flight? flight = FindFlightById(id);\n  if (flight != null) {\n    flight.DepartureTime = newDepartureTime;\n    flight.Status = FlightStatus.Delayed;\n    Console.WriteLine($\"{id} delayed until        {Format(newDepartureTime)}\");\n  } else {\n    Console.WriteLine($\"{id} could not be found\");\n  }\n  return flight;\n}\n```", "```cs\npublic Flight? MarkFlightDeparted(string id,\n  DateTime departureTime) {\n  Flight? flight = FindFlightById(id);\n  if (flight != null) {\n    flight.DepartureTime = departureTime;\nflight.Status = FlightStatus.Departed;\n    Console.WriteLine($\"{id} departed at {Format(departureTime)}.\");\n  } else {\n    Console.WriteLine($\"{id} could not be found\");\n  }\n  return flight;\n}\n```", "```cs\npublic Flight? MarkFlightArrived(string id,\n  DateTime arrivalTime, string gate = \"TBD\") {\n  Flight? flight = FindFlightById(id);\n  if (flight != null) {\n    flight.ArrivalTime = arrivalTime;\n    flight.Gate = gate;\n    flight.Status = FlightStatus.OnTime;\n    Console.WriteLine($\"{id} arrived at {Format(arrivalTime)}.\");\n  } else {\n    Console.WriteLine($\"{id} could not be found\");\n  }\n  return flight;\n}\n```", "```cs\nFlight? flight = FindFlightById(id);\nif (flight != null) {\n  ApplyUpdateToFlight(flight);\n} else {\n  Console.WriteLine($\"{id} could not be found\");\n}\nreturn flight;\n```", "```cs\nprivate Flight? UpdateFlight(string id,\n  Action<Flight> updateAction) {\n  Flight? flight = FindFlightById(id);\n  if (flight != null) {\n    updateAction(flight);\n  } else {\n    Console.WriteLine($\"{id} could not be found\");\n  }\n  return flight;\n}\n```", "```cs\npublic Flight? MarkFlightDelayed(string id,\n  DateTime newDepartureTime) {\n  return UpdateFlight(id, (flight) => {\n    flight.DepartureTime = newDepartureTime;\n    flight.Status = FlightStatus.Delayed;\n    Console.WriteLine($\"{id} delayed to {Format(newDepartureTime)}\");\n  });\n}\n```", "```cs\nAction<Flight> updateAction = (flight) => {\n  flight.DepartureTime = newDepartureTime;\n  flight.Status = FlightStatus.Delayed;\n  Console.WriteLine($\"{id} delayed to {Format(newDepartureTime)}\");\n};\nreturn UpdateFlight(id, updateAction);\n```", "```cs\npublic void AddAction(int x, int y) {\n    int sum = x + y;\n    Console.WriteLine($\"{x} + {y} is {sum}\");\n}\n```", "```cs\nAction<int, int> myAction = AddAction;\nmyAction(2, 2);\n```", "```cs\npublic string AddFunc(int x, int y) {\n    int sum = x + y;\n    return $\"{x} + {y} is {sum}\";\n}\n```", "```cs\nFunc<int, int, string> myFunc = AddFunc;\nstring equation = myFunc(2, 2);\nConsole.WriteLine(equation);\n```", "```cs\npublic void DisplayMatchingFlights(List<Flight> flights,\n  Func<Flight, bool> shouldDisplay) {\n  foreach (Flight flight in flights) {\n    if (shouldDisplay(flight)) {\n      Console.WriteLine(flight);\n    }\n  }\n}\n```", "```cs\nprivate string Format(DateTime time) {\n    return time.ToString(\"ddd MMM dd HH:mm tt\");\n}\n```", "```cs\nprivate static string Format(DateTime time) {\n    return time.ToString(\"ddd MMM dd HH:mm tt\");\n}\n```", "```cs\npublic static class DateHelpers {\n    public static string Format(DateTime time) {\n        return time.ToString(\"ddd MMM dd HH:mm tt\");\n    }\n}\n```", "```cs\nprivate Flight? FindFlightById(string id) =>\n    _flights.FirstOrDefault(f => f.Id == id);\n```", "```cs\nprivate Flight? FindFlightById(string id) =>\n    Enumerable.FirstOrDefault(_flights, f => f.Id == id);\n```", "```cs\npublic static class DateHelpers {\n    public static string Format(this DateTime time) {\n        return time.ToString(\"ddd MMM dd HH:mm tt\");\n    }\n}\n```"]