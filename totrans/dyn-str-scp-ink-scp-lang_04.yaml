- en: '*Chapter 3*: Sequences, Cycles, and Shuffling Text'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces the concept of **alternatives**, programmable ways of
    introducing additional text, and advanced code that can react to loops. We will
    cover each type of alternative (**sequence**, **cycle**, and **shuffle**) in turn
    and look at how they can be combined with looping structures in ink. Next, we
    will examine **multi-line alternatives**, functionality for defining more complex
    structures based on the type of alternative used to create them. Finally, we will
    close the chapter with **nested alternatives**, the use of one or more alternatives
    inside each other.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multi-line alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting alternatives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub: [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter3](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter3).'
  prefs: []
  type: TYPE_NORMAL
- en: Using alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031), *Knots, Diverts,
    and Looping Patterns*, the use of opening, `{`, and closing, `}`, curly brackets
    signaled the use of a conditional option. Between using labels and conditions,
    options could become dynamic and react to the reader making choices between loops.
    However, curly brackets are used for more than conditional options. In ink, they
    also signal the use of any *code*, and one of the most common forms of code is
    the use of an `|`. Depending on the type of alternative used, different text effects
    can happen.
  prefs: []
  type: TYPE_NORMAL
- en: Sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first and default alternative is a **sequence**. As its name might suggest,
    a sequence is a series of values. They are accessed based on their name, *in sequence*:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 1:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Example 1*, a sequence is used. It has two elements, `dark and stormy night`
    and `bright and shining day`, with a vertical bar between them. When first run,
    the sequence would produce the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In a sequence, any elements beyond the first are only shown when the sequence
    is run additional times. In other words, a sequence with more than one element
    works best inside a looping structure:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 2:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'By diverting back to the knot, `weather`, a loop is created. This allows the
    second element of the sequence to be shown on the second loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Screenshot of Inky showing both elements from Example 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.1_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.1 – Screenshot of Inky showing both elements from Example 2
  prefs: []
  type: TYPE_NORMAL
- en: 'A sequence only continues if new elements are within it. Once a sequence reaches
    its end, it stops on the last element. In *Example 2*, choosing the option `bright
    and shining day`, would be shown again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Screenshot of Inky showing the repeating element from Example
    2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.2_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.2 – Screenshot of Inky showing the repeating element from Example 2
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '*Example 2* follows a pattern established in [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)*,
    Knots, Diverts, and Looping Patterns*, with two choices. The first loops the structure
    and the second breaks it. Always use choices when creating loops to avoid creating
    ones that cannot end!'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sequences are best used in situations where a user might exhaust a series of
    elements and end on the last one. When a repeating sequence is needed, a different
    concept is used: **cycles**.'
  prefs: []
  type: TYPE_NORMAL
- en: Cycles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like sequences, `&`, in front of the first element in the set. This tells ink
    to *cycle* the elements and return to the first after the last:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 3:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Example 3*, the looping structure reruns the cycle, moving through all
    the months and then *cycling* back to the first element again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – Screenshot of ink showing all elements from the Example 3 cycle'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.3_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.3 – Screenshot of ink showing all elements from the Example 3 cycle
  prefs: []
  type: TYPE_NORMAL
- en: 'All alternatives can contain empty elements. For cycles, any blank elements
    count towards the total number. It is possible to create a cycle that shows elements
    only after a certain number of loops:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 4:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Using empty elements with a cycle can be very effective for creating a situation
    where the reader must take an action multiple times before a result happens. In
    *Example 4*, the cycle has multiple empty elements separated by vertical bars.
    The last element, `For a moment, there was light before the flame went out.`,
    is only shown after the reader chooses the option **Try lighter** four times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – Screenshot of Inky showing Example 4''s use of empty elements'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.4_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.4 – Screenshot of Inky showing Example 4's use of empty elements
  prefs: []
  type: TYPE_NORMAL
- en: Shuffles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`~`, appears before the first element in the set:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Unlike sequences and cycles, shuffles do not show their elements in order.
    Combined with empty elements, as shown previously with cycles, the chances of
    an element being picked are always consistent with the total number of elements.
    This means that to create a shuffle where one of its elements is shown 1 of 10
    runs, the code would be the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 6:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Example 6*, element `10` has a 10% chance of appearing. Most runs (90%)
    would not see it, creating a unique moment for those users encountering the event
    within their narrative experience of the story''s content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.5 – Screenshot of Inky showing the output of Example 6 without element
    10'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_3.5_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 3.5 – Screenshot of Inky showing the output of Example 6 without element
    10
  prefs: []
  type: TYPE_NORMAL
- en: Creating multi-line alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sequences, cycles, and shuffles can be written using one single line of code.
    However, all alternatives can also be written using their multi-line form. For
    each of these, curly brackets are still used, but each element is on its own line
    with a dash, `-`, appearing before it.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-line cycles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a multi-line cycle, the keyword `cycle` is used with a colon, `:`,
    and with each element on its own line:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 7:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Any use of multi-line alternatives also introduces a new issue. Because each
    element is on its own line, each is also considered a *line* by ink. This means
    its output would introduce additional spacing between lines. To help with this
    issue, **glue** can be used between the multi-line alternative and the next text
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Reminder
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014)*, Text, Flow,
    Choices, and Weaves*, introduced the concept of **glue**, the use of the less-than
    and greater-than symbols together. This concept *glues* one line to the end of
    the previous. With multi-line alternatives, the use of glue removes the additional
    space between its output and the next line of content.'
  prefs: []
  type: TYPE_NORMAL
- en: Multi-line sequences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Multi-line cycles use the keyword `cycle` and multi-line shuffles use the keyword
    `shuffle`. However, multi-line sequences use the keyword `stopping`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 8:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Multi-line sequences also introduce an important difference between themselves
    and their one-line forms: readability. Each element in a multi-line alternative
    is separated by a new line. In the one-line form, a sequence with a particularly
    long text element would be hard to differentiate between its end and the start
    of the next element in the alternative:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Broken into new lines, the previous code can become much easier to edit and
    understand:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 9:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Nesting alternatives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sequences, cycles, and shuffles can all be nested *inside* each other. When
    this happens, the combined form is what is known as a **nested alternative**,
    where one alternative appears as the element of another.
  prefs: []
  type: TYPE_NORMAL
- en: Combining cycles and shuffles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Within a looping structure, a cycle can be very useful to repeat content after
    a certain number of loops. When combined with a shuffle, random content can be
    selected from the shuffle and then repeated within the larger cycle. For example,
    to generate a new random number for each loop, a cycle with a single element using
    multiple shuffles would produce this effect using only one line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 10:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '*Example 10* uses a cycle and three shuffles. Each time the loop runs, the
    cycle reruns. With only one element, it *cycles* again and reruns the shuffles,
    each of which picks a random number from one to five. This has the effect of generating
    a new three-digit number for each loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.6 – Screenshot of Inky showing random three-digit numbers across
    loops from Example 10](img/Figure_3.6_B17597.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – Screenshot of Inky showing random three-digit numbers across loops
    from Example 10
  prefs: []
  type: TYPE_NORMAL
- en: The code in *Example 10* also demonstrates something not previously made explicit
    about how alternatives work in ink. The elements of alternatives often have text
    content, and options are created from the text of choices. This means that alternatives
    can be used with choices to generate dynamic options. This also means that diverts
    can be elements of alternatives as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, a set of diverts can be used with a shuffle to move the reader
    to different points at random based on the options they chose:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 11:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: When run, the combination of diverts and a shuffle in *Example 11* would randomly
    pick between two possible branches. The reader would either be diverted to the
    `treasure` or `back_in_hallway` knots.
  prefs: []
  type: TYPE_NORMAL
- en: Shuffling shuffles
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In both *Example 10* and *Example 11*, one type of alternative was combined
    with another. It is also possible to nest the same type of alternative. Shuffles
    can be nested within other shuffles to make advanced combinatorial results. For
    example, it is possible to generate a quick history of a fantasy kingdom by defining
    possible years and events, and then using one-line shuffles inside a multi-line
    shuffle to build a sentence describing the kingdom:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Example 12:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In *Example 12*, the use of the single-line shuffles creates all of the small
    details of the kingdom. These are then used within the larger multi-line shuffles
    for the major events. They build a history based on different elements *shuffled*
    together:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.7 – Screenshot of Inky showing of one of the many possible outputs
    of Example 12 ](img/Figure_3.7_B17597.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – Screenshot of Inky showing of one of the many possible outputs
    of Example 12
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives and their multi-line forms can be very useful for detecting and
    acting on loops by using sequences and cycles to show new or change old content.
    Shuffles, with the ability to introduce randomness in a story, are an easy way
    to generate dynamic text in a story, as shown in *Example 12*.
  prefs: []
  type: TYPE_NORMAL
- en: When combining different types of alternatives, such as those used in *Example
    10*, these *nested* alternatives can generate complex content based on how each
    type works individually. However, what was not covered and is introduced in the
    next chapter is a way to save what is generated by an alternative and then compare
    values. As with the story used in *Example 10*, generating a random three-digit
    number is useful, but saving and remembering it is even better. [*Chapter 4*](B17597_04_Final_PG_ePub.xhtml#_idTextAnchor062),
    *Variables, Lists, and Functions*, introduces how to retain values across a story
    as generated by alternatives and changed because of a user's interactions in ink.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the seemingly simple concept of alternatives.
    In ink, the three types of alternatives are sequences, cycles, and shuffles. Each
    provides a different way of accessing its elements. Sequences show each element
    in turn until its last one. Cycles repeat their elements, looping back to the
    first element after encountering the end. Shuffles select a random element from
    their set each time they are run, creating a way to introduce randomness to stories
    for the first time.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatives can also be expressed in both one-line and multi-line forms. When
    written in their longer multi-line forms, alternatives use a keyword for their
    type and have each element on a separate line. While much easier to read for an
    author, we reviewed how care must be taken to incorporate glue because of how
    ink interprets each line of text in a story.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we learned alternatives can be combined in a nested form. An element
    of an alternative can be another alternative. When used together, this showed
    how, for example, a cycle and shuffle can be combined to regenerate random selections
    from multiple shuffles each time they are run. We also saw how the text of elements
    from alternatives can be used with choices and even how diverts can be elements
    of alternatives.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see how to create and access the values of variables
    in ink.
  prefs: []
  type: TYPE_NORMAL
- en: Q&A
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the three types of alternatives in ink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What special symbol is used between elements in their single-line form?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What special symbol is used before the first element in the set to create a
    cycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a sequence and a cycle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is unique about a shuffle?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the keyword used to create a multi-line sequence?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
