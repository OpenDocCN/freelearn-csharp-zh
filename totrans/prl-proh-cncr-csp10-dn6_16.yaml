- en: Assessments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section contains answers to questions from all chapters.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B18552_01_ePub.xhtml#_idTextAnchor014), Managed Threading Concepts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A managed thread is a thread that is created in .NET-managed code with the `System.Threading.Thread`
    object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `Thread.IsBackground` property to `true` before calling `Thread.Start()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET will throw a `ThreadStateException` exception.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET prioritizes managed threads mostly based on their `Thread.Priority` value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ThreadPriority.Highest`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.Abort()` is not supported by .NET 6\. The code will not compile.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add an object parameter to the method to be started by the new thread, and pass
    the data when calling `Thread.Start(data)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass the delegate to the cancellation token’s `Register` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B18552_02_ePub.xhtml#_idTextAnchor034), Evolution of Multithreaded
    Programming in .NET'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ThreadPool `'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C# 5.0
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET Framework 4.5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: .NET Core 3.0
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task`, `Task<T>`, `ValueTask`, or `ValueTask<T>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ConcurrentDictionary<TKey, TValue>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BlockingCollection<T>`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Parallel LINQ** (**PLINQ**)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B18552_03_ePub.xhtml#_idTextAnchor061), Best Practices for Managed
    Threading'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Singleton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ThreadStatic`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A deadlock occurs when multiple threads are all waiting to access a locked resource
    and cannot proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Monitor.TryEnter`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Interlocked`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Interlocked.Add`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`MaxDegreeOfParallelism`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `WithDegreeOfParallelism` extension method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ThreadPool.GetMinThreads()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B18552_04_ePub.xhtml#_idTextAnchor072), User Interface Responsiveness
    and Threading'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Task` or `Task<T>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task.WhenAll`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task.Factory.StartNew`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A background thread on `ThreadPool`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Application.Current.Dispatcher.Invoke`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`this.BeginInvoke`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the `this.InvokeRequired` property.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B18552_05_ePub.xhtml#_idTextAnchor082), Asynchronous Programming
    with C#'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Task.Result`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task.WhenAll()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task.WaitAll()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task`, `Task<TResult>`, `ValueTask`, or `ValueTask<TResult>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: I/O-bound operations such as a file or network access are best suited for async
    methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: False. It is a best practice to always suffix async methods with `Async`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task.Run`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B18552_06_ePub.xhtml#_idTextAnchor098), Parallel Programming
    Concepts'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Parallel.For`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Parallel.ForEachAsync`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Parallel.Invoke`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TaskCreationOptions.AttachToParent`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TaskCreationOptions.DenyAttach`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Task.Run` will always deny child tasks from attaching. Also, `Task.Run` has
    no overloaded methods to provide `TaskCreationOptions`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No, regular `for` and `foreach` loops can be faster if each loop iteration is
    fast-running and/or there are only a few iterations of the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B18552_07_ePub.xhtml#_idTextAnchor120), Task Parallel Library
    (TPL) and Dataflow'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the answers to this chapter’s questions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`JoinBlock`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BufferBlock` is a propagator block.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BufferBlock`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`JoinTo()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Complete()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SendAsync()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ReceiveAsync()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B18552_08_ePub.xhtml#_idTextAnchor130), Parallel Data Structures
    and Parallel LINQ'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`AsParallel()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AsSequential()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AsOrdered()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ForAll()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AsOrdered()` can significantly decrease performance for a query.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OrderBy` and `OrderByDescending`. They will default to `ParallelMergeOptions.FullyBuffered`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. PLINQ has additional overhead that can cause queries on smaller datasets
    or simple queries to be slower.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ParallelMergeOptions.NotBuffered`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B18552_09_ePub.xhtml#_idTextAnchor146), Working with Concurrent
    Collections in .NET'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`BlockingCollection<T>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ConcurrentQueue<T>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`BlockingCollection<T>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ConcurrentDictionary<TKey, TValue>`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Enqueue()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`TryAdd()` and `TryGetValue()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: No. Always add your own synchronization mechanisms when using extension methods
    with concurrent collections, including standard LINQ operators.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B18552_10_ePub.xhtml#_idTextAnchor158), Debugging Multithreaded
    Applications with Visual Studio'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Use the **Attach to Process** window or set multiple startup projects in the
    solution file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: They are grouped by process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click in the window and select **Columns**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Parallel Stacks** window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.PNG` files.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Four.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The **Debug Location** toolbar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Flag Just My Code** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B18552_11_ePub.xhtml#_idTextAnchor173), Canceling Asynchronous
    Work'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`CancellationToken.IsCancellationRequested`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CancellationTokenSource`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`OperationCanceledException`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Register callback
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ManualResetEventSlim`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`ManualResetEventSlim.Reset`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`CancellationTokenSource.CreateLinkedTokenSource`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B18552_12_ePub.xhtml#_idTextAnchor186), Unit Testing Async,
    Concurrent, and Parallel Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Fact`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SpinLock.WaitUntil`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`AggregateException`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Exception`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Assert.NotNull`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test Explorer **'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: MSTest, NUnit, and xUnit .NET
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ReSharper, Rider, and the dotMemory Unit standalone console runner
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
