- en: Adding a Heads-Up Display
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加抬头显示
- en: In the last chapter, we configured our non-player character, the Cucumber Beetle,
    and reviewed its 11 animations. We significantly reconfigured the non-player character's
    animation controller. We also planned and wrote scripts to control the non-player
    character's in-game behaviors, which included patrolling, cucumber consumption,
    fighting on the ground, and fighting on hind legs. In addition, we added cucumber
    patches, cucumbers, and cherries to our game world.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们配置了非玩家角色，即黄瓜甲虫，并回顾了其11个动画。我们对非玩家角色的动画控制器进行了重大调整。我们还计划和编写了脚本以控制非玩家角色的游戏内行为，包括巡逻、吃黄瓜、地面战斗和后腿战斗。此外，我们还向游戏世界中添加了黄瓜地、黄瓜和樱桃。
- en: In this chapter, we will design, develop, and incorporate a **Heads-Up Display**
    (**HUD**) in our game. We will use a canvas to create text and graphics that provide
    visual indicators of points, health, and additional information to help the player
    maintain situational awareness during gameplay. We will also implement a mini-map
    using a Unity camera.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将设计、开发和集成我们的游戏中的**抬头显示**（**HUD**）。我们将使用画布来创建文本和图形，提供关于得分、生命值和额外信息的视觉指示，以帮助玩家在游戏过程中保持对局势的了解。我们还将使用Unity相机实现一个迷你地图。
- en: 'In this chapter, we will cover the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Designing our HUD
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计我们的HUD
- en: Working with a canvas
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用画布
- en: Creating a mini-map
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建迷你地图
- en: Scripting for dynamic content
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态内容的脚本编写
- en: Designing our Heads-Up Display
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计我们的抬头显示
- en: 'As you will remember from [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml),
    *Designing the Game*, we determined that we would have six on-screen components:
    health, lives, score, cherries, cucumbers, and Cucumber Beetles. That design will
    now be modified to include a mini-map in the lower-right-hand corner of the screen:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从[第3章](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml)，“设计游戏”中记得的，我们将有六个屏幕组件：生命值、生命、得分、樱桃、黄瓜和黄瓜甲虫。现在，这个设计将修改以包括屏幕右下角的迷你地图：
- en: '![](img/372e008e-8a7a-42e9-b442-654462b2a902.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/372e008e-8a7a-42e9-b442-654462b2a902.png)'
- en: 'Now that there will be seven components to our HUD, let''s review each of them,
    organized by region:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将有七个组件组成我们的HUD，让我们按区域组织来回顾每个组件：
- en: '**Top-left**:'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左上角**：'
- en: '**Player Health**: This will consist of a text label indicating *Health* and
    a health meter tied to the Cucumber Man''s health.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**玩家生命值**：这将由一个指示*生命值*的文本标签和一个与黄瓜人生命值相关的生命值表组成。'
- en: '**Lives**: We will have a visual indication of the Cucumber Man''s remaining
    lives. The player will start with three lives.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**生命值**：我们将有一个视觉指示，显示黄瓜人的剩余生命值。玩家开始时有三个生命值。'
- en: '**Top-right**:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**右上角**：'
- en: '**Score**: We will add a text label indicating the score and then have the
    player''s actual score updated here.'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**得分**：我们将添加一个文本标签来指示得分，然后在这里更新玩家的实际得分。'
- en: '**Cherries**: The number of cherries the Cucumber Man has will be updated and
    displayed here.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**樱桃**：黄瓜人拥有的樱桃数量将在这里更新并显示。'
- en: '**Bottom-right**:'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**右下角**：'
- en: '**Mini-Map**: This will be a mini-map that shows an overview of the game map
    with indicators of where the Cucumber Beetles are.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迷你地图**：这将是一个迷你地图，显示游戏地图的概述，并指示黄瓜甲虫的位置。'
- en: '**Bottom-left**:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**左下角**：'
- en: '**Cucumbers**: We will include a text label, along with the number of cucumbers
    left in the game.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**黄瓜**：我们将包括一个文本标签，以及游戏中剩余的黄瓜数量。'
- en: '**Cucumber Beetles**: This final area of the HUD will feature a text label
    and the number of Cucumber Beetles left in the game.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**黄瓜甲虫**：HUD的这个最后区域将包含一个文本标签和游戏中剩余的黄瓜甲虫数量。'
- en: Now that we have a clear design for our HUD, we are ready to create it. Before
    you move on to the next section, you should open your Unity game project. Alternatively,
    you can download the `Starting-Chapter-09` Unity project available from the publisher's
    companion site.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的HUD有了明确的设计，我们准备创建它。在您进入下一节之前，您应该打开您的Unity游戏项目。或者，您可以从出版商的配套网站上下载可用的`Starting-Chapter-09`Unity项目。
- en: Working with a canvas
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用画布
- en: In Unity, we can use a canvas as a container for UI components. Canvases are
    GameObjects, and the UI components are the visual components we want on the screen
    during gameplay. In this section, we will create a canvas and then add and configure
    the necessary UI components to match our HUD's design from the previous section.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，我们可以使用画布作为UI组件的容器。画布是GameObject，UI组件是我们希望在游戏过程中显示在屏幕上的视觉组件。在本节中，我们将创建一个画布，然后添加并配置必要的UI组件，以匹配上一节中我们设计的HUD。
- en: Adding the canvas
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加画布
- en: 'Here are the steps for adding a canvas for our UI:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 UI 画布的步骤如下：
- en: Right-click in an empty area of the Hierarchy panel and select UI | Canvas.
    You can review the details of the canvas in the Inspector panel.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板的空白区域右键单击并选择 UI | Canvas。您可以在检查器面板中查看画布的详细信息。
- en: You will note, in the Hierarchy panel, that Unity created an `EventSystem` when
    you created your canvas. This system is used to manage user input.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你会在层次面板中注意到，当你创建画布时，Unity 创建了一个 `EventSystem`。此系统用于管理用户输入。
- en: Change the new canvas GameObject's name from `Canvas` to `HUD_Canvas`. Using
    self-descriptive names for our GameObjects is considered good development practice.
    No other changes to any of the canvas properties are necessary.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新画布 GameObject 的名称从 `Canvas` 更改为 `HUD_Canvas`。为我们的 GameObject 使用描述性的名称被认为是良好的开发实践。不需要对任何画布属性进行其他更改。
- en: Adding the health bar UI components
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加健康条 UI 组件
- en: 'Next, we will create the UI components to display the Cucumber Man''s health:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建 UI 组件以显示黄瓜人的健康：
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
    This will create a text object subordinate to the canvas.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板中右键单击 HUD_Canvas GameObject 并选择 UI | Text。这将创建一个属于画布的文本对象。
- en: Rename the text component as `Health_Label`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本组件重命名为 `Health_Label`。
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Slider.
    This will create a slider object subordinate to the canvas.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板中右键单击 HUD_Canvas GameObject 并选择 UI | Slider。这将创建一个属于画布的滑动对象。
- en: Rename the slider component as `Health_Slider`.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将滑动组件重命名为 `Health_Slider`。
- en: 'So far, we have created a canvas with text and slider components. Next, we
    will orient the UI components on the canvas to match the placement in our HUD
    design from the previous section:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经创建了一个包含文本和滑动组件的画布。接下来，我们将对画布上的 UI 组件进行定位，以匹配上一节中我们的 HUD 设计中的位置：
- en: In the Hierarchy panel, double-click the HUD_Canvas. This will focus the canvas
    in the Scene view, and this will give you an overview of how your canvas looks.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板中双击 HUD_Canvas。这将使场景视图中的画布聚焦，这将为您提供一个关于画布外观的概述。
- en: In the Hierarchy panel, double-click the Health_Label. Now, you can see both
    the text and slider components we created.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板中双击 Health_Label。现在，您可以看到我们创建的文本和滑动组件。
- en: Zoom out until you can see the entire canvas in the Scene view.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩小视图，直到您可以在场景视图中看到整个画布。
- en: 'Toggle the 2D view on in the Scene view. This will make orientating our UI
    components on our canvas much easier:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中切换 2D 视图。这将使在画布上定位我们的 UI 组件变得容易得多：
- en: '![](img/befb6074-f83c-4f5c-b009-593f209f10cb.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/befb6074-f83c-4f5c-b009-593f209f10cb.png)'
- en: Ensure that the Health_Label is selected in the Hierarchy panel.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在层次面板中选择 Health_Label。
- en: 'In the Inspector panel, change the Text value of the Text (Script) component
    to `Health`. See the following screenshot for details:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将 Text (Script) 组件的 Text 值更改为 `Health`。请参阅以下截图以获取详细信息：
- en: '![](img/41fbe239-3c53-4828-a1fa-922d72aab249.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/41fbe239-3c53-4828-a1fa-922d72aab249.png)'
- en: Drag the Health_Label to the top-left corner of the canvas.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Health_Label 拖动到画布的左上角。
- en: 'In the Text (Script) component, make the following changes, or select other
    settings to your liking. You can experiment with the game in game-mode to see
    how this will look during the game:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Text (Script) 组件中，进行以下更改，或选择您喜欢的其他设置。您可以在游戏模式中实验游戏，看看这将如何在游戏中看起来：
- en: '| **Property** | **Value** |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **值** |'
- en: '| Font | Arial |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 字体 | Arial |'
- en: '| Font Style | Bold |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 字体样式 | 加粗 |'
- en: '| Font Size | 16 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 字体大小 | 16 |'
- en: '| Color | Dark Blue |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 颜色 | 深蓝色 |'
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    of your Health_Label UI text component so that there is not excessive blank space
    above, below, or to the right of the text.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在检查器面板中，要么在场景视图中，调整包围 Health_Label UI 文本组件的矩形大小，以确保文本上方、下方或右侧没有过多的空白空间。
- en: Relocate the Health_Slider so that it is immediately to the right of the Health_Label
    text.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Health_Slider 移动到 Health_Label 文本立即右侧。
- en: 'In the Inspector panel, make the following changes to the  Slider (Script)
    component:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，对 Slider (Script) 组件进行以下更改：
- en: Deselect the Interactable checkbox
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消选择 Interactable 复选框
- en: Change the Max Value to `100`
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将最大值更改为`100`
- en: Select the Whole Numbers checkbox
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 Whole Numbers 复选框
- en: 'In the Hierarchy panel, expand the Health_Slider object to reveal the subordinate
    parts as follows:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板中，展开 Health_Slider 对象以显示以下下属部分：
- en: '![](img/3e203a08-112e-41b1-82c0-232c94818852.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e203a08-112e-41b1-82c0-232c94818852.png)'
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider | Background.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择 HUD_Canvas | Health_Slider | 背景。
- en: In the Inspector panel, select Image (Script) | Color  and change the color
    to red. This will serve as our health meter's background.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择 Image (Script) | 颜色并将颜色更改为红色。这将成为我们的生命值计的背景。
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider | Fill Area | Fill.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择 HUD_Canvas | Health_Slider | Fill Area | Fill。
- en: In the Inspector panel, select Image (Script) | Color  and change the color
    to green. This will serve as our health meter's fill area.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择 Image (Script) | 颜色并将颜色更改为绿色。这将成为我们的生命值计的填充区域。
- en: 'The final two steps for our health meter will be to increase the height and
    to remove the slider handle:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生命值计的最后两个步骤将是增加高度和移除滑块把手：
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择 HUD_Canvas | Health_Slider。
- en: In the Inspector panel, select Rect Transform | Height and change the height
    to `30`.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，选择矩形变换 | 高度并将高度更改为 `30`。
- en: In the Hierarchy panel, select HUD_Canvas | Health_Slider | Handle Slide Area | Handle.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择 HUD_Canvas | Health_Slider | Handle Slide Area | Handle。
- en: Deselect the Image (Script) component. This will remove the slider's handle
    from the UI.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消选择 Image (Script) 组件。这将从 UI 中移除滑块的把手。
- en: In the Scene view, adjust the Health_Label and Health_Slider so that they are
    aligned with each other in the top-left-hand corner of the canvas.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，调整 Health_Label 和 Health_Slider，使它们在画布的左上角对齐。
- en: 'Your finished work should look similar to the following screenshot from the
    Game view:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您完成的工作应类似于以下来自游戏视图的截图：
- en: '![](img/decb2c42-f444-43b7-b4b9-b089d5acd41f.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/decb2c42-f444-43b7-b4b9-b089d5acd41f.png)'
- en: Make any necessary adjustments before moving on to the next section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，进行任何必要的调整。
- en: Creating the Lives Remaining UI components
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建剩余生命 UI 组件
- en: 'In this section, we will add three images of the Cucumber Man''s head beneath
    the health label and meter, each image representing a life remaining:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在健康标签和计下方添加三个代表剩余生命的黄瓜人头像图像：
- en: Download the `cmLives.png` file from the publisher's website
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出版商的网站上下载 `cmLives.png` 文件
- en: Drag that image into the `Assets` | `Cucumber Man` folder in the Project panel
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该图像拖动到项目面板中的 `Assets` | `Cucumber Man` 文件夹
- en: Select the imported image and, in the Inspector panel, change the Texture Type
    to Sprite (2D and UI)
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择导入的图像，并在检查器面板中，将纹理类型更改为 Sprite (2D and UI)
- en: In the Hierarchy panel, right-click the `HUD_Canvas` and select UI | Image
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，右键单击 `HUD_Canvas` 并选择 UI | Image
- en: In the Inspector panel, click the small circle to the right of the setting under Image
    (Script) | Source Image
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击 Image (Script) | Source Image 下的设置右侧的小圆圈
- en: Select the `cmLives.png` image you added in step 2
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择在步骤 2 中添加的 `cmLives.png` 图像
- en: In the Inspector panel, rename this image as `Life1`
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将此图像重命名为 `Life1`
- en: Click Rect Transform | Scale  and change the scale of Life1 to `0.4` for X,
    Y, and Z
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击矩形变换 | 缩放并将 Life1 的 X、Y 和 Z 缩放比例更改为 `0.4`
- en: In the Scene view, reposition the Life1 image so that it is directly preceding
    the health label
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，重新定位 Life1 图像，使其直接位于健康标签之前
- en: In the Hierarchy panel, right-click and duplicate Life1 twice, and rename the
    copies `Life2` and `` `Life3` ``
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，右键单击并复制 Life1 两次，并将副本重命名为 `Life2` 和 `Life3`
- en: In the Scene view, reposition the three images so that they are in sequential
    order and aligned in a visually pleasing manner
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，重新定位三个图像，使它们按顺序排列并视觉上对齐
- en: 'Your finished work should look similar to the following screenshot from the
    Game view:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您完成的工作应类似于以下来自游戏视图的截图：
- en: '![](img/909e1b99-777a-4171-ab08-ea14918c7618.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/909e1b99-777a-4171-ab08-ea14918c7618.png)'
- en: Make any necessary adjustments before moving on to the next section.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，进行任何必要的调整。
- en: Adding the scoring UI components
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加得分 UI 组件
- en: 'The upper-right corner of our game''s interface and canvas, will contain the
    scoring information. This section demonstrates how to create the necessary UI
    components:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们游戏界面和画布的右上角将包含得分信息。本节演示如何创建必要的 UI 组件：
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
    We will use this text object for our score label.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，右键单击 HUD_Canvas GameObject 并选择 UI | 文本。我们将使用此文本对象作为得分标签。
- en: Rename the text component as `Score_Label`.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本组件重命名为 `Score_Label`。
- en: In the Inspector panel, change the Text value of the Text (Script) component
    to `Score`.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将文本（脚本）组件的文本值更改为`Score`。
- en: 'In the Text (Script) component, make the following changes or select other
    settings as you wish. You can experiment with the game in game mode to see how
    this will look during the game:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本（脚本）组件中，进行以下更改或根据需要选择其他设置。您可以在游戏模式中实验游戏，看看这将如何在游戏中显示：
- en: 'Font Style: Bold'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体样式：粗体
- en: 'Font Size: 16'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字体大小：16
- en: 'Color: Dark Blue'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 颜色：深蓝
- en: Either in the Inspector panel or in Scene view, resize the rectangle encasing
    your `Score_Label` UI text component so that there is no excessive blank space
    above, below, or to the right of the text.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在检查器面板中，要么在场景视图中，调整包围你的`Score_Label`UI文本组件的矩形大小，以确保文本上方、下方或右侧没有过多的空白空间。
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
    We will use this text object to display the current score.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中右键点击HUD_Canvas GameObject并选择UI | 文本。我们将使用此文本对象来显示当前分数。
- en: Rename the text component as `Score_Value`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本组件重命名为 `Score_Value`。
- en: In the Inspector panel, change the Text value of the Text (Script`)` component
    to `000000000`. This will help us determine the layout.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将文本（脚本`）`组件的文本值更改为`000000000`。这将帮助我们确定布局。
- en: Either in the Inspector panel or in Scene view, resize the rectangle encasing
    your `Score_Value` UI text component so that there is no excessive blank space
    above, below, or to the right of the text.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在检查器面板中，要么在场景视图中，调整包围你的`Score_Value`UI文本组件的矩形大小，以确保文本上方、下方或右侧没有过多的空白空间。
- en: Repeat step 4 for the `Score_Value` text component.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对`Score_Value`文本组件重复步骤4。
- en: Now that you have the two score-related UI text components have been added to
    your canvas, you are ready to reposition them on the screen.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经将两个与分数相关的UI文本组件添加到画布中，您就可以在屏幕上重新定位它们了。
- en: In the Scene view, adjust the Score_Label and Score_Value text objects so that
    their rect transform is sized to encase the text values
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，调整Score_Label和Score_Value文本对象，使它们的矩形变换大小足以包围文本值
- en: Lastly, reposition the two text objects in Scene view so that they are aligned
    with each other in the top-right corner of the canvas
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在场景视图中重新定位两个文本对象，使它们在画布的右上角对齐。
- en: Your finished work should look similar to the following screenshot from the
    Game view.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您完成的工作应类似于以下来自游戏视图的截图。
- en: '![](img/8d09c2e2-5c57-4768-b2f4-6c9a493593cf.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d09c2e2-5c57-4768-b2f4-6c9a493593cf.png)'
- en: Make any necessary adjustments before moving on to the next section.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行下一节之前，进行任何必要的调整。
- en: Adding the cherry UI components
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加樱桃UI组件
- en: In this section, we will add an image of cherries and a text object for displaying
    the number of cherries the Cucumber Man has.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将添加樱桃的图像和用于显示Cucumber Man拥有的樱桃数量的文本对象。
- en: 'We will start by adding the cherry image:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先添加樱桃图像：
- en: Download the `Cherries.png` file from the publisher's website
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出版商的网站上下载`Cherries.png`文件
- en: Drag that image into the `Assets` | `Cherry` folder in the Project panel
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将该图像拖动到项目面板中的`Assets` | `Cherry`文件夹
- en: Select the imported image and, in the Inspector panel, change the Texture Type
    to Sprite (2D and UI)
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择导入的图像，并在检查器面板中，将纹理类型更改为Sprite（2D和UI）
- en: In the Hierarchy panel, right-click the HUD_Canvas and select UI | Image
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，右键点击HUD_Canvas并选择UI | 图像
- en: In the Inspector panel, click the small circle to the right of the setting under Image
    (Script) | Source Image
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击Image（脚本）| 源图像设置右侧的小圆圈
- en: Select the `Cherries.png` image you added in step 2
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择在步骤2中添加的`Cherries.png`图像
- en: In the Inspector panel, rename this as `Cherries`
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将其重命名为`Cherries`
- en: Click  Rect Transform | Scale and change the scale of Cherries to `0.4` for
    x, y, and z
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击  矩形变换 | 缩放 并将樱桃的缩放比例更改为x、y和z的`0.4`
- en: In the Scene view, reposition the Cherries image directly below the start of
    the Score_Value text object
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，将Cherries图像直接放置在Score_Value文本对象的开头下方
- en: 'Next, we will add the text object to hold the cherry count:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加一个文本对象来显示樱桃数量：
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中右键点击HUD_Canvas GameObject并选择UI | 文本。
- en: Rename the text component as `Cherries_Count`.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本组件重命名为 `Cherries_Count`。
- en: In the Inspector panel, change the Text value of the Text (Script) component
    to `0000`. This will help us determine the layout.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，将文本（脚本）组件的文本值更改为`0000`。这将帮助我们确定布局。
- en: In the Text (Script) component, change the Font Style to Bold, the Font Size to
    16, and the Color to Red, or select other settings to your liking.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本（脚本）组件中，将字体样式更改为粗体，字体大小 更改为16，颜色更改为红色，或者选择你喜欢的其他设置。
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your `Cherries_Count` UI text component so that there is no excessive blank space
    above, below, or to the right of the text.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在检查器面板中，要么在场景视图中，调整包围你的`Cherries_Count` UI文本组件的矩形大小，以确保文本上方、下方或右侧没有过多的空白空间。
- en: In the Scene view, reposition the `Cherry_Count` text object to the right of
    the `Cherries` image object.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，将`Cherry_Count` 文本对象重新定位到`Cherries`图像对象的右侧。
- en: 'Your finished work should look similar to the following screenshot from the
    game view:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你的最终作品应该看起来类似于以下游戏视图的截图：
- en: '![](img/918bb5e8-c3cc-4868-b076-9c715d412bca.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/918bb5e8-c3cc-4868-b076-9c715d412bca.png)'
- en: Make any necessary adjustments before moving on to the next section.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，进行任何必要的调整。
- en: Adding the cucumber and Cucumber Beetle UI components
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加黄瓜和黄瓜甲虫UI组件
- en: 'In this section, we will add four UI text components to the lower-left-hand
    corner of our canvas. These text components will be used for the following:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向画布的左下角添加四个UI文本组件。这些文本组件将用于以下目的：
- en: Cucumber label
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜标签
- en: Cucumber count value
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜计数值
- en: Cucumber Beetles label
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜甲虫标签
- en: Cucumber Beetles count value
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜甲虫计数值
- en: 'At this point, you should be comfortable with adding UI text components to
    your canvas, so this section will be brief. Feel free to consult previous sections
    to review the steps involved:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经熟悉了向画布添加UI文本组件，因此本节将简短。请随时查阅前面的部分以回顾涉及到的步骤：
- en: 'Create a text object for the cucumber label:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为黄瓜标签创建一个文本对象：
- en: Right-click the HUD_Canvas GameObject in the Hierarchy panel and select UI | Text
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中右键单击HUD_Canvas GameObject并选择UI | Text
- en: Rename the text component as `Cucumbers_Label`
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本组件重命名为`Cucumbers_Label`
- en: Change the Text value of the Text (Script) component to Cucumbers
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本（脚本）组件的文本值更改为Cucumbers
- en: In the Text (Script) component, change the Font Style to Bold, the Font Size to
    16, and the Color to Blue
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本（脚本）组件中，将字体样式更改为粗体，字体大小 更改为16，颜色更改为蓝色
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your Cucumbers_Label UI text component so that there is no excessive blank space
    above, below, or to the right of the text
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在检查器面板中，要么在场景视图中，调整包围你的Cucumbers_Label UI文本组件的矩形大小，以确保文本上方、下方或右侧没有过多的空白空间
- en: In the Scene view, reposition the Cucumbers_Label text object to reflect the
    HUD design from earlier in this chapter
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，将Cucumbers_Label文本对象重新定位，以反映本章早期提到的HUD设计
- en: 'Create a text object for the Cucumber Beetles label:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为黄瓜甲虫标签创建一个文本对象：
- en: Right-click the HUD_Canvas | Cucumbers_Label GameObject in the Hierarchy panel
    and select Duplicate
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中右键单击HUD_Canvas | Cucumbers_Label GameObject并选择复制
- en: Rename the duplicated text component to `Beetles_Label`
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的文本组件重命名为`Beetles_Label`
- en: Change the Text value of the Text (Script) component to `Cucumber Beetles`
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本（脚本）组件的文本值更改为`Cucumber Beetles`
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your Beetles_Label UI text component to ensure it is wide enough to display the
    entire text
  id: totrans-151
  prefs:
  - PREF_OL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在 检查器 面板中，要么在 场景 视图中，调整包围你的 Beetles_Label UI文本组件的矩形大小，以确保它足够宽，可以显示整个文本
- en: In the Scene view, reposition the Beetles_Label text object to reflect the HUD
    design from earlier in this chapter
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 场景 视图中，重新定位 Beetles_Label 文本对象，以反映本章早期提到的HUD设计
- en: 'Create a text object for the cucumber count:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为黄瓜计数创建一个文本对象：
- en: Right-click the HUD_Canvas | Cucumbers_Label GameObject in the Hierarchy panel
    and select Duplicate
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中右键单击HUD_Canvas | Cucumbers_Label GameObject并选择复制
- en: Rename the duplicated text component as `Cucumber_Count`
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的文本组件重命名为`Cucumber_Count`
- en: Change the Text value of the Text (Script) component to `0000`
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文本（脚本）组件的文本值更改为`0000`
- en: Either in the Inspector panel or in the Scene view, resize the rectangle encasing
    your Cucumber_Count UI text component so that there is no excessive blank space
    above, below, or to the right of the text
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要么在检查器面板中，要么在场景视图中，调整包围你的Cucumber_Count UI文本组件的矩形大小，以确保文本上方、下方或右侧没有过多的空白空间
- en: In the Text (Script) component, change the Color to Red
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本（脚本）组件中，将颜色更改为红色
- en: In the Scene view, reposition the Cucumber_Count text object to reflect the
    HUD design from earlier in this chapter
  id: totrans-159
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，重新定位 Cucumber_Count 文本对象以反映本章早期提到的 HUD 设计
- en: 'Create a text object for the Cucumber Beetle count:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个用于 Cucumber Beetle 计数的文本对象：
- en: Right-click the HUD_Canvas | Cucumber_Count GameObject in the Hierarchy panel
    and select Duplicate
  id: totrans-161
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中右键单击 HUD_Canvas | Cucumber_Count GameObject 并选择复制
- en: Rename the duplicated text component as `Beetle_Count`
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的文本组件重命名为 `Beetle_Count`
- en: In the Scene view, reposition the Beetle_Count text object to reflect the HUD
    design from earlier in this chapter
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，重新定位 Beetle_Count 文本对象以反映本章早期提到的 HUD 设计
- en: 'Your finished work should look similar to the following screenshot from the
    Game view:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你的最终作品应该类似于以下从游戏视图中捕获的截图：
- en: '![](img/3fe5aef5-ed93-4ab8-a8a1-62d6620ae858.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3fe5aef5-ed93-4ab8-a8a1-62d6620ae858.png)'
- en: Make any necessary adjustments before moving on to the next section.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续下一节之前，进行任何必要的调整。
- en: Creating a mini-map
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建迷你图
- en: In [Chapter 5](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml), *Lights, Cameras,
    and Shadows*, you learned about how to use cameras for mini-maps. In this section,
    we will implement a mini-map for our game. This mini-map will provide a top-down
    view of our game, centered on the sandbox area you created in [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing
    Our Non-Player Character*. The player can use this mini-map as a radar to help
    find Cucumber Beetles in the sandbox.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第五章](101c3b96-a362-4913-925c-f22503f0f8a1.xhtml)，*灯光、相机和阴影* 中，你学习了如何使用相机创建迷你图。在本节中，我们将为我们的游戏实现一个迷你图。这个迷你图将提供我们游戏沙盒区域的俯视图，中心位于你在
    [第八章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，*实现我们的非玩家角色* 中创建的沙盒区域。玩家可以使用这个迷你图作为雷达来帮助在沙盒中找到
    Cucumber Beetles。
- en: First, we need to turn the Scene view 2D toggle off. This will put the Scene
    view back into 3D mode.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要关闭场景 2D 切换。这将使场景视图回到 3D 模式。
- en: 'Here are the steps for creating a mini-map in our game:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是创建我们游戏中迷你图的步骤：
- en: Right-click on an empty area of the Hierarchy panel and select Camera
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板的空白区域右键单击并选择相机
- en: Rename the `camera` as `Camera_Minimap`
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `camera` 重命名为 `Camera_Minimap`
- en: Double-click the Camera_Minimap camera in the Hierarchy panel to focus on that
    object in the Scene view
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中双击 Camera_Minimap 相机以在场景视图中聚焦于该对象
- en: Change the Transform | Rotation | X value to `90`, so it is looking at the ground
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变换 | 旋转 | X 值更改为 `90`，使其朝向地面
- en: In the Scene view, use the transform tools to position the camera so that it
    covers your sandbox
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景视图中，使用变换工具定位相机，使其覆盖你的沙盒
- en: You can use the Camera Preview to help determine what will be visible during
    gameplay
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以使用相机预览来帮助确定游戏过程中的可见内容
- en: 'The following screenshot shows a Camera Preview that covers the entire sandbox
    area, bordered with white rectangular walls:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了一个覆盖整个沙盒区域并带有白色矩形墙壁的相机预览：
- en: '![](img/9a14312f-572e-44ad-8fbf-e52938cfabc8.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9a14312f-572e-44ad-8fbf-e52938cfabc8.png)'
- en: 'Now that the Camera_MiniMap camera has been added to our scene, we need to
    ensure it is not treated like our main camera. Here are the steps:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Camera_MiniMap 相机已被添加到我们的场景中，我们需要确保它不会像我们的主相机那样被对待。以下是步骤：
- en: In the Project panel, under Assets, right-click the `Textures` folder and select
    Create | Render Texture
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，在 Assets 下，右键单击 `Textures` 文件夹并选择创建 | 渲染纹理
- en: Rename the new render texture `Render_Texture_Minimap`
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的渲染纹理重命名为 `Render_Texture_Minimap`
- en: Select the Camera_Minimap camera in the Hierarchy panel
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中选择 Camera_Minimap 相机
- en: In the Inspector panel, click the small circle to the right of the Camera |
    Target Texture property
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，单击 Camera | 目标纹理属性右侧的小圆圈
- en: Select the `Render_Texture_Minimap` texture you created
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择你创建的 `Render_Texture_Minimap` 纹理
- en: 'The minimap camera is now properly configured. Our next set of steps require
    us to modify our HUD_Canvas. We will accomplish this with the following steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 现在迷你图相机已正确配置。我们的下一步需要我们修改我们的 HUD_Canvas。我们将通过以下步骤来完成：
- en: In the Hierarchy panel, drag the Camera_Minimap object so that it is subordinate
    to the HUD_Canvas
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，将 Camera_Minimap 对象拖动到 HUD_Canvas 下，使其成为其子对象
- en: Right-click the HUD_Canvas and select UI | Raw Image
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中右键单击 HUD_Canvas 并选择 UI | 原始图像
- en: Rename the new raw image UI component as `RawImage_Minimap`
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的原始图像 UI 组件重命名为 `RawImage_Minimap`
- en: In the Inspector panel, click the small circle to the right of the Raw Image
    (Script) | Texture property
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，单击 Raw Image (Script) | 纹理属性右侧的小圆圈
- en: Select the `Render_Texture_Minimap` texture you created
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您创建的`Render_Texture_Minimap`纹理
- en: Toggle the Scene view 2D toggle on
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开场景视图2D切换
- en: Double-click the HUD_Canvas in the Hierarchy panel, then zoom in so you can
    see a close-up of the canvas
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中双击`HUD_Canvas`，然后放大以便可以看到画布的特写
- en: Relocate the RawImage_Minimap so that it is in the lower-right-hand corner of
    the canvas
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将RawImage_Minimap重新定位，使其位于画布的右下角
- en: Change the Rect Transform | Scale to `2` for X, Y, and Z
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Rect Transform | Scale的X、Y和Z值更改为`2`
- en: 'You are now ready to test your game in game mode. You should see the mini-map
    in the bottom-right-hand corner of the screen, illustrated in the following screenshot:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以进入游戏模式测试您的游戏。您应该在屏幕的右下角看到迷你地图，如下面的截图所示：
- en: '![](img/cc8baf32-3c0a-4f04-ac74-a5c10fb0b0d4.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cc8baf32-3c0a-4f04-ac74-a5c10fb0b0d4.png)'
- en: You can use this mini-map as a great starting point as you work to refine how
    it looks in the game. Some options for refinement include giving the mini-map
    more contrast with the game world and showing red dots for Cucumber Beetles instead
    of only showing the entire terrain.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 当您努力完善游戏中的外观时，您可以使用这个迷你地图作为一个很好的起点。一些改进选项包括使迷你地图与游戏世界有更多的对比度，以及显示Cucumber Beetles的红点而不是只显示整个地形。
- en: Scripting for dynamic content
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态内容的脚本编写
- en: 'Now that your HUD has been completed, it is time to consider how the information
    on the HUD is updated. The following elements of our HUD require scripting so
    that they are dynamically updated during the game:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的HUD已经完成，是时候考虑如何更新HUD上的信息了。以下是我们HUD的以下元素需要脚本编写，以便在游戏过程中动态更新：
- en: Cucumber Man's health
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Man的生命值
- en: Number of Cucumber Man lives remaining
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Man剩余的生命
- en: Points
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分数
- en: Number of cherries in Cucumber Man's inventory
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Man的库存中樱桃的数量
- en: Number of cucumbers
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜数量
- en: Number of Cucumber Beetles
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cucumber Beetle的数量
- en: In this section, we will lay the groundwork for updating the HUD information.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为更新HUD信息打下基础。
- en: Scripting the cucumber count
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写黄瓜计数脚本
- en: 'Let''s start with our cucumber count:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从黄瓜计数开始：
- en: In the Hierarchy panel, select HUD_Canvas | Cucumber_Count
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，选择`HUD_Canvas | Cucumber_Count`
- en: In the Inspector panel, click the Add Component button
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击添加组件按钮
- en: Select New Script and name the script `CucumberManager`
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“新建脚本”并命名为`CucumberManager`
- en: Edit the script
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑脚本
- en: 'With the script open, make the necessary modifications to match the script
    provided, as follows:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本打开的情况下，进行必要的修改以匹配提供的脚本，如下所示：
- en: '[PRE0]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see, we are using the `UnityEngine.UI` namespace. Inside the `CucumberManager`
    class, we declare three variables, establish an initial count of zero in the `Awake()`
    method, and then count the amount of cucumbers every frame in `Update()`, providing
    an on-screen update of the number of cucumbers left in the game. The ease with
    which we were able to program this was partially due to our assigning of the `Cucumber`
    tag to all of our cucumbers.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们正在使用`UnityEngine.UI`命名空间。在`CucumberManager`类中，我们声明了三个变量，在`Awake()`方法中初始化计数为零，然后在`Update()`方法中每帧计算黄瓜的数量，从而在屏幕上提供剩余黄瓜数量的更新。我们能够轻松编程的部分原因是我们将`Cucumber`标签分配给了所有的黄瓜。
- en: Scripting the beetle count
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写甲虫计数脚本
- en: 'As you might imagine, the script for counting beetles will be very similar
    to the method we used for counting cucumbers. This time, we will add a `BeetleManager`
    script to our `Beetle_Count` UI component. Here is the required script:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所想象，甲虫计数的脚本将与我们用于计数黄瓜的方法非常相似。这次，我们将添加一个`BeetleManager`脚本到我们的`Beetle_Count`
    UI组件中。以下是所需的脚本：
- en: '[PRE1]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This code is very similar to our `CucumberManager` script. The only difference
    is the GameObject tag and our variable names.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码与我们的`CucumberManager`脚本非常相似。唯一的区别是GameObject标签和我们的变量名。
- en: If this script does not work for you, ensure that your beetles are assigned
    the `Beetle` tag.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果此脚本对您不起作用，请确保您的甲虫被分配了`Beetle`标签。
- en: The remaining scripting of our HUD will be accomplished in subsequent chapters. In
    [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our Points
    System,* we will write scripts for the points and number of cherries in Cucumber
    Man's inventory. In [Chapter 11](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml),
     *Scripting Victory and Defeat*, we will write the necessary scripts to update
    the health slider and the number of Cucumber Man lives that remain.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们HUD的剩余脚本将在后续章节中完成。在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)，*脚本化我们的得分系统*中，我们将为Cucumber
    Man的库存中的得分和樱桃数量编写脚本。在[第11章](7098e2ac-1871-4cb2-98ba-36f3acdb0515.xhtml)，*脚本化胜利与失败*中，我们将编写必要的脚本以更新健康滑块和Cucumber
    Man剩余的生命值。
- en: Be sure to save your Unity scene and project!
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保保存你的Unity场景和项目！
- en: Summary
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we designed, developed, and incorporated a HUD in our game.
    We used a canvas GameObject to create text and graphics that provide visual indicators
    of points, health, and additional information to help the player maintain situational
    awareness during gameplay. In addition to this, we wrote scripts to update key
    components of the HUD. We also implemented a mini-map using a Unity camera.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们设计、开发和整合了游戏中的HUD。我们使用画布GameObject创建文本和图形，提供得分、生命值和其他信息，帮助玩家在游戏过程中保持对局势的了解。此外，我们还编写了脚本以更新HUD的关键组件。我们还使用Unity相机实现了迷你地图。
- en: In [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml), *Scripting Our
    Points System*, we will design, script, and implement our game's point system.
    This will include providing frame-by-frame updates to key on-screen components
    of the game's HUD.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)，*脚本化我们的得分系统*中，我们将设计、编写和实现我们游戏的得分系统。这包括为游戏HUD的关键屏幕组件提供逐帧更新。
