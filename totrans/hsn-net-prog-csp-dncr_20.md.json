["```cs\ndotnet new webapi -n AggregatorDemo\n```", "```cs\ndotnet new webapi -n DataAccessDemo\n```", "```cs\npublic static IWebHostBuilder CreateWebHostBuilder(string[] args) =>\n    WebHost.CreateDefaultBuilder(args)\n        .UseUrls(\"https://[::]:33333\")\n        .UseStartup<Startup>();\n```", "```cs\npublic static class Latency {\n    private static int initialLatency = 1;\n    private static int counter = 1;\n\n    public static int GetLatency() {\n        //milliseconds of latency. increase by .5 second per request\n        return counter++ * 500; \n    }\n\n    public static void ResetLatency() {\n        counter = initialLatency;\n    }\n}\n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class DependencyController : ControllerBase {\n    [HttpGet(\"new-data\")]\n    public ActionResult<string> GetDependentValue() {\n        Thread.Sleep(Latency.GetLatency());\n        return $\"requested data: {new Random().Next() }\";\n    }\n\n    [HttpGet(\"reset\")]\n    public ActionResult<string> Reset() {\n        Latency.ResetLatency();\n        return \"success\";\n    }\n}\n```", "```cs\nservices.AddHealthChecks();\n```", "```cs\napp.UseHealthChecks(\"/health\");\n```", "```cs\npublic class DependencyHealthCheck : IHealthCheck {\n    private readonly int DEGRADING_THRESHOLD = 2000;\n    private readonly int UNHEALTHY_THRESHOLD = 5000;\n```", "```cs\npublic async Task<HealthCheckResult> CheckHealthAsync(\n    HealthCheckContext context,\n    CancellationToken token = default(CancellationToken)\n) {\n    var httpClient = HttpClientFactory.Create();\n    httpClient.BaseAddress = new Uri(\"https://localhost:33333\");\n    var request = new HttpRequestMessage(HttpMethod.Get, \"/api/dependency/new-data\");\n```", "```cs\nStopwatch sw = Stopwatch.StartNew();\nvar response = await httpClient.SendAsync(request);\nsw.Stop();\nvar responseTime = sw.ElapsedMilliseconds;\n```", "```cs\nif (responseTime < DEGRADING_THRESHOLD) {\n    return HealthCheckResult.Healthy(\"The dependent system is performing within acceptable parameters\");\n} else if (responseTime < UNHEALTHY_THRESHOLD) {\n    return HealthCheckResult.Degraded(\"The dependent system is degrading and likely to fail soon\");\n} else {\n    return HealthCheckResult.Unhealthy(\"The dependent system is unacceptably degraded. Restart.\");\n}\n```", "```cs\nservices.AddHealthChecks()\n    .AddCheck(\"DataDependencyCheck\", new DependencyHealthCheck());\n```", "```cs\ndotnet new console -n WatchdogDemo\n```", "```cs\npublic class Program {\n    private static readonly HttpClient client = new HttpClient();\n    private static readonly string HEALTHY_STATUS = \"Healthy\";\n```", "```cs\nstatic async Task Main(string[] args) {\n  while(true) {\n    var healthRequest = new HttpRequestMessage(HttpMethod.Get, \"https://localhost:44444/health\");\n    var healthResponse = await client.SendAsync(healthRequest);\n    var healthStatus = await healthResponse.Content.ReadAsStringAsync();\n```", "```cs\nif (healthStatus != HEALTHY_STATUS) {\n  Console.WriteLine($\"{ DateTime.Now.ToLocalTime().ToLongTimeString()} : Unhealthy API. Restarting Dependency\");\n  var resetRequest = new HttpRequestMessage(HttpMethod.Get, \"https://localhost:33333/api/dependency/reset\");\n  var resetResponse = await client.SendAsync(resetRequest);\n} else {\n  Console.WriteLine($\"{DateTime.Now.ToLocalTime().ToLongTimeString()} : Healthy API\");\n}\nThread.Sleep(15000);\n```"]