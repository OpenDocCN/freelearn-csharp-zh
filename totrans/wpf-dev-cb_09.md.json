["```cs\nusing System.Runtime.Serialization; \n\nnamespace EmployeeService.DataModels \n{ \n    [DataContract] \n    public class Employee \n    { \n        [DataMember] \n        public string ID { get; set; } \n\n        [DataMember] \n        public string FirstName { get; set; } \n\n        [DataMember] \n        public string LastName { get; set; } \n\n        [DataMember] \n        public string Designation { get; set; } \n    } \n} \n```", "```cs\nusing EmployeeService.DataModels; \nusing System.Collections.Generic; \nusing System.ServiceModel; \n```", "```cs\n[ServiceContract] \npublic interface IEmployeeService \n{ \n    [OperationContract] \n    Employee GetEmployeeByID(string empID); \n\n    [OperationContract] \n    List<Employee> GetEmployees(); \n\n    [OperationContract] \n    void InsertEmployee(Employee employee); \n} \n```", "```cs\nprivate static List<Employee> m_employees = new List<Employee>(); \n```", "```cs\npublic class EmployeeService : IEmployeeService \n{ \n    private static List<Employee> m_employees = new List<Employee>(); \n\n    public Employee GetEmployeeByID(string empID) \n    { \n        return m_employees.First(emp => emp.ID.Equals(empID)); \n    } \n\n    public List<Employee> GetEmployees() \n    { \n        return m_employees; \n    } \n\n    public void InsertEmployee(Employee employee) \n    { \n        m_employees.Add(employee); \n    } \n} \n```", "```cs\nusing CH09.EmployeeService.Services; \nusing System; \nusing System.ServiceModel; \nusing System.ServiceModel.Description; \n```", "```cs\nprivate static Uri serviceUrl = new Uri( \n     \"http://localhost:59795/Services/EmployeeService\"); \n```", "```cs\nstatic void Main(string[] args) \n{ \n    // create Service Host \n    using (var serviceHost = new ServiceHost( \n       typeof(EmployeeService.Services.EmployeeService),  \n       serviceUrl)) \n    { \n\n        // add the service endpoint \n        serviceHost.AddServiceEndpoint( \n                    typeof(IEmployeeService),  \n                    new BasicHttpBinding(), \"\"); \n        serviceHost.Description.Behaviors.Add( \n                    new ServiceMetadataBehavior  \n                    {  \n                        HttpGetEnabled = true  \n                    }); \n\n        // start the Service host \n        serviceHost.Open(); \n\n        Console.WriteLine(\"Service hosting time: \" +  \n                          DateTime.Now.ToString()); \n        Console.WriteLine(); \n        Console.WriteLine(\"Service Host is running...\"); \n        Console.WriteLine(\"Press [Enter] key to stop the host...\"); \n        Console.ReadLine(); \n\n        // close the Service host \n        serviceHost.Close(); \n    } \n} \n```", "```cs\n[ServiceBehavior(InstanceContextMode =  \n                 InstanceContextMode.Single)] \npublic class EmployeeService : IEmployeeService \n{ \n    ... \n    ... \n} \n```", "```cs\n<%@ ServiceHost  \n    Language=\"C#\"  \n    Debug=\"true\"  \n    Service=\"CH09.EmployeeService.Services.EmployeeService\"  \n    CodeBehind=\"EmployeeService.svc.cs\"  \n%> \n```", "```cs\npublic ObservableCollection<Employee> Employees \n{ \n    get \n    { \n        return (ObservableCollection<Employee>) \n                    GetValue(EmployeesProperty); \n    } \n    set \n    { \n        SetValue(EmployeesProperty, value); \n    } \n} \n\npublic static readonly DependencyProperty  \n       EmployeesProperty =  \n            DependencyProperty.Register( \n               \"Employees\",  \n               typeof(ObservableCollection<Employee>),  \n               typeof(MainWindow),  \n               new PropertyMetadata(null)); \n```", "```cs\nusing CH09.ClientDemo.EmployeeServiceReference; \nusing System.Collections.ObjectModel; \nusing System.Windows; \n```", "```cs\nprivate static EmployeeServiceClient client =  \n                       new EmployeeServiceClient(); \n```", "```cs\nprivate async void RefreshListAsync() \n{ \n    var result = await client.GetEmployeesAsync(); \n    Employees = new ObservableCollection<Employee>(result); \n} \n\nprivate async void AddNewEmployeeAsync() \n{ \n    var employee = new Employee \n    { \n        ID = \"EMP00\" + (Employees.Count + 1), \n        FirstName = \"User\", \n        LastName = (Employees.Count + 1).ToString(), \n        Designation = \"Software Engineer\" \n    }; \n\n    await client.InsertEmployeeAsync(employee); \n} \n```", "```cs\n<Grid.RowDefinitions> \n    <RowDefinition Height=\"*\"/> \n    <RowDefinition Height=\"Auto\"/> \n</Grid.RowDefinitions> \n```", "```cs\n<DataGrid ItemsSource=\"{Binding Employees,  \n                        ElementName=window}\" \n          Grid.Row=\"0\"  \n          AutoGenerateColumns=\"False\" \n          CanUserAddRows=\"False\" \n          CanUserDeleteRows=\"False\"> \n    <DataGrid.Columns> \n\n    </DataGrid.Columns> \n</DataGrid> \n```", "```cs\n<DataGrid.Columns> \n    <DataGridTextColumn Header=\"ID\"  \n                        Width=\"80\" \n                        Binding=\"{Binding ID}\"/> \n    <DataGridTextColumn Header=\"Name\" \n                        Width=\"200\"> \n        <DataGridTextColumn.Binding> \n            <MultiBinding StringFormat=\"{}{0} {1}\"> \n                <Binding Path=\"FirstName\"/> \n                <Binding Path=\"LastName\"/> \n            </MultiBinding> \n        </DataGridTextColumn.Binding> \n    </DataGridTextColumn> \n    <DataGridTextColumn Header=\"Designation\"  \n                        Width=\"150\" \n                        Binding=\"{Binding Designation}\"/> \n</DataGrid.Columns> \n```", "```cs\n<StackPanel Orientation=\"Horizontal\" \n            Grid.Row=\"1\" \n            Margin=\"8\"> \n    <Button Content=\"Refresh\" \n            Margin=\"4\" \n            Height=\"26\" \n            Width=\"80\" \n            Click=\"OnRefreshClicked\"/> \n    <Button Content=\"Add\" \n            Margin=\"4\" \n            Height=\"26\" \n            Width=\"80\" \n            Click=\"OnAddClicked\"/> \n</StackPanel> \n```", "```cs\nprivate void OnRefreshClicked(object sender,  \n                              RoutedEventArgs e) \n{ \n    RefreshListAsync(); \n} \n\nprivate void OnAddClicked(object sender,  \n                          RoutedEventArgs e) \n{ \n    AddNewEmployeeAsync(); \n    RefreshListAsync(); \n} \n```", "```cs\nsvcutil.exe http://localhost:59795/Services/\nEmployeeService.svc?wsdl \n```", "```cs\n[System.Diagnostics.DebuggerStepThroughAttribute()] \n[System.CodeDom.Compiler.GeneratedCodeAttribute( \n \"System.ServiceModel\", \"4.0.0.0\")] \npublic partial class EmployeeServiceClient : System.ServiceModel.ClientBase<CH09.ClientDemo.EmployeeServiceReference.IEmployeeService>, CH09.ClientDemo.EmployeeServiceReference.IEmployeeService \n{         \n    public EmployeeServiceClient() { \n    } \n\n    public EmployeeServiceClient(string  \n    endpointConfigurationName)  \n             : base(endpointConfigurationName) { \n    } \n\n    public EmployeeServiceClient(string \n    endpointConfigurationName,  \n           string remoteAddress)  \n             : base(endpointConfigurationName, remoteAddress) { \n    } \n\n    public EmployeeServiceClient(string \n    endpointConfigurationName,  \n           System.ServiceModel.EndpointAddress remoteAddress)  \n             : base(endpointConfigurationName, remoteAddress) { \n    } \n\n    public EmployeeServiceClient\n    (System.ServiceModel.Channels.Binding binding, \n    System.ServiceModel.EndpointAddress remoteAddress)  \n             : base(binding, remoteAddress) { \n    } \n\n    public CH09.ClientDemo.EmployeeServiceReference.Employee  \n      GetEmployeeByID(string empID) { \n        return base.Channel.GetEmployeeByID(empID); \n    } \n\n    public System.Threading.Tasks.Task<CH09.\n    ClientDemo.EmployeeServiceReference.Employee>   \n    GetEmployeeByIDAsync(string empID) { \n        return base.Channel.GetEmployeeByIDAsync(empID); \n    } \n\n    public CH09.ClientDemo.EmployeeServiceReference.Employee[] \n    GetEmployees() { \n        return base.Channel.GetEmployees(); \n    } \n\n    public System.Threading.Tasks.Task<CH09.\n    ClientDemo.EmployeeServiceReference.Employee[]> \n    GetEmployeesAsync() { \n        return base.Channel.GetEmployeesAsync(); \n    } \n\n    public void InsertEmployee(CH09.ClientDemo.\n    EmployeeServiceReference.Employee employee) { \n        base.Channel.InsertEmployee(employee); \n    } \n\n    public System.Threading.Tasks.Task InsertEmployeeAsync\n   (CH09.ClientDemo.EmployeeServiceReference.Employee employee) { \n        return base.Channel.InsertEmployeeAsync(employee); \n    } \n} \n```", "```cs\nprivate static EmployeeServiceClient client =  \n                       new EmployeeServiceClient(); \n```"]