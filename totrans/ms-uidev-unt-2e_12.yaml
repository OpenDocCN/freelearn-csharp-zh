- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: The UI Button Component
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 按钮组件
- en: Buttons provided by Unity’s UI system are graphical objects that preutilize
    the Event System we covered in the last chapter. When a Button is placed in a
    scene, it automatically has components added to it that allow the player to interact
    with it. This makes sense because the whole point of a Button is to interact with
    it. Let’s explore how to add and utilize buttons in our games.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 的 UI 系统提供的按钮是预先利用我们在上一章中介绍的事件系统的图形对象。当按钮放置在场景中时，它会自动添加组件，允许玩家与之交互。这是有意义的，因为按钮的全部目的就是与之交互。让我们探索如何在我们的游戏中添加和利用按钮。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Creating UI Buttons and setting their properties
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 UI 按钮并设置其属性
- en: How to set button transitions that make the button change appearance when it
    is highlighted, pressed, or disabled
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何设置按钮过渡，使按钮在突出显示、按下或禁用时改变外观
- en: How to use invisible button zones to allow large tapping areas
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用不可见按钮区域以允许大触摸区域
- en: Navigating button selection on screen with the keyboard or joystick
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用键盘或摇杆在屏幕上导航按钮选择
- en: How to create an onscreen button that looks like it is physically being pressed
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建一个看起来像被物理按下屏幕上的按钮
- en: Loading scenes with a button press
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过按钮点击加载场景
- en: Creating Button Transition Animations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建按钮过渡动画
- en: Note
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: All the examples shown in the sections before the *Examples* section can be
    found within the Unity project provided in the code bundle. They can be found
    within the scene labeled **Chapter9**.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在“示例”部分之前显示的所有示例都可以在提供的代码包中的 Unity 项目中找到。它们可以在标记为 **Chapter9** 的场景中找到。
- en: Each example image has a caption stating the example number within the scene.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个示例图像都有一个标题，说明场景中的示例编号。
- en: In the scene, each example is on its own Canvas, and some of the Canvases are
    deactivated. To view an example on a deactivated Canvas, simply select the checkbox
    next to the Canvas’ name in the Inspector. Each Canvas is also given its own Event
    System. This will cause errors if you have more than one Canvas activated at a
    time.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景中，每个示例都在自己的 Canvas 上，其中一些 Canvas 已被禁用。要查看已禁用的 Canvas 上的示例，只需在检查器中选择 Canvas
    名称旁边的复选框。每个 Canvas 也都有自己的事件系统。如果您同时激活了多个 Canvas，这将导致错误。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2009](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2009)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到本章的相关代码和资产文件：[https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2009](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2009)
- en: UI Button
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI 按钮
- en: 'Buttons are UI objects that expect a click from the player. You can create
    a Button by selecting `Button` object with a `Text` child will be placed in the
    scene. As with all other UI objects, if no Canvas or Event System is in the scene
    when you create the `Button`, a `Canvas` and `Event System` will be created for
    you, with the `Canvas` being a parent of your new `Button`:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮是期望玩家点击的 UI 对象。您可以通过选择具有 `Text` 子对象的 `Button` 对象来创建按钮。与其他所有 UI 对象一样，如果您在创建
    `Button` 时场景中没有 Canvas 或事件系统，将为您创建一个 `Canvas` 和 `Event System`，其中 `Canvas` 是您新
    `Button` 的父对象：
- en: '![Figure 9.1: Adding a new UI Button to the scene](img/Figure_09.01_B18327.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1：将新的 UI 按钮添加到场景中](img/Figure_09.01_B18327.jpg)'
- en: 'Figure 9.1: Adding a new UI Button to the scene'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：将新的 UI 按钮添加到场景中
- en: You can delete the child `Text` object if you do not want to have text displaying
    on your `Button`.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不希望在按钮上显示文本，可以删除子 `Text` 对象。
- en: 'The Button object has three main components: **Rect Transform** (like all other
    UI graphical objects), an **Image** component, and a **Button** component:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮对象有三个主要组件：**Rect Transform**（类似于所有其他 UI 图形对象）、一个**图像**组件和一个**按钮**组件：
- en: '![Figure 9.2: The components of a new UI Button](img/Figure_09.02_B18327.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2：新 UI 按钮的组件](img/Figure_09.02_B18327.jpg)'
- en: 'Figure 9.2: The components of a new UI Button'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：新 UI 按钮的组件
- en: We’ll discuss the **Image** component more thoroughly in the next chapter, but
    for now, just know that the **Image** component determines the look of the Button
    in its standard state.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章更详细地讨论**图像**组件，但到目前为止，只需知道**图像**组件决定了按钮在标准状态下的外观。
- en: The Button component
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮组件
- en: The `Button` will do when the player attempts to interact with it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当玩家尝试与按钮交互时，`Button` 将会执行的操作。
- en: The first property of the **Button** component is the **Interactable** property.
    This property determines whether the Button can or cannot be interacted with by
    accepting input from the player. This is turned on by default but can be turned
    off if you want to disable the button.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**按钮**组件的第一个属性是**交互**属性。此属性确定按钮是否可以通过接受玩家的输入进行交互。默认情况下，它是开启的，但如果你想要禁用按钮，可以将其关闭。'
- en: You’ll see that the `Button`, moves the mouse outside of the `Button`’s Rect
    Transform, and then releases the mouse, the `Button`’s **On Click Event** will
    not register. You set the **On Click** Event the same way we set Events in [*Chapter
    8*](B18327_08.xhtml#_idTextAnchor147).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，当鼠标移出`按钮`的`Rect Transform`范围并释放鼠标时，`按钮`的**点击事件**将不会注册。你设置**点击事件**的方式与我们设置[*第8章*](B18327_08.xhtml#_idTextAnchor147)中的事件相同。
- en: Transitions
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 过渡效果
- en: The second property of the **Button** component is the **Transition** property.
    The **Transition** property determines the way the button will visually react
    when the button is in different states. These different states are *not highlighted*
    (or normal), *highlighted*, *pressed*, *selected*, or *disabled*. These transitions
    are performed automatically and do not require coding.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**按钮**组件的第二个属性是**过渡**属性。**过渡**属性决定了按钮在不同状态下视觉上如何反应。这些不同的状态包括**未高亮**（或正常）、**高亮**、**按下**、**选中**或**禁用**。这些过渡是自动执行的，不需要编写代码。'
- en: 'There are four different types of transitions you can assign: **None**, **Color
    Tint**, **Sprite Swap**, and **Animation**.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以分配四种不同的过渡效果：**无**、**颜色渐变**、**精灵交换**和**动画**。
- en: None
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 无
- en: Selecting **None** for the **Transition** type would mean that the button will
    not visually change for the different states.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将**过渡效果**类型选择为**无**意味着按钮在不同状态下不会在视觉上发生变化。
- en: Color Tint
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 颜色渐变
- en: The **Color Tint** transition type will make the button change color based on
    its state. You assign **Normal Color**, **Highlighted Color**, **Pressed Color**,
    **Selected Color**, and **Disabled Color**.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**颜色渐变**过渡类型将使按钮根据其状态改变颜色。你分配**正常颜色**、**高亮颜色**、**按下颜色**、**选中颜色**和**禁用颜色**。'
- en: 'In the following example, you can see that the button changes to green when
    the mouse is hovering over it (hence, highlighting it) and turns red as the mouse
    is being pressed down on it:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，你可以看到当鼠标悬停在按钮上（因此高亮显示）时，按钮变为绿色，而当鼠标按下时，按钮变为红色：
- en: '![Figure 9.3: Color Swap Example in the Chapter9 scene](img/Figure_09.03_B18327.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图9.3：第9章场景中颜色交换示例](img/Figure_09.03_B18327.jpg)'
- en: 'Figure 9.3: Color Swap Example in the Chapter9 scene'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.3：第9章场景中颜色交换示例
- en: If you view the preceding example, you’ll notice that the button turns yellow
    after it has been clicked. This is because it is *selected*. To return it to the
    normal color, click on any area outside of the button.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看前面的示例，你会注意到按钮在被点击后会变成黄色。这是因为它被**选中**了。要将其恢复到正常颜色，请点击按钮外的任何区域。
- en: 'For a Button to enter the state that will give it its **Disabled Color**, the
    Button’s **Interactable** property must be disabled. In the following screenshot,
    you will see how the button changes when the **Interactable** property is toggled
    on and off:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要使按钮进入将赋予其**禁用颜色**的状态，按钮的**交互**属性必须被禁用。在以下屏幕截图中，你会看到当**交互**属性开启和关闭时按钮如何变化：
- en: '![Figure 9.4: Disabled Button Example in the Chapter9 scene](img/Figure_09.04_B18327.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4：第9章场景中禁用按钮示例](img/Figure_09.04_B18327.jpg)'
- en: 'Figure 9.4: Disabled Button Example in the Chapter9 scene'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：第9章场景中禁用按钮示例
- en: 'You also can select the `Button` itself, so the Button’s image will change
    color when it is highlighted, pressed, or disabled. However, you can choose to
    make a secondary graphic the **Target Graphic**. This means the item assigned
    to the **Target Graphic** will change color based on the interaction of the button.
    In the following example, a secondary image is assigned as the **Target Graphic**.
    You’ll see the button does not undergo transitions; instead, the star image undergoes
    transitions:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以选择`按钮`本身，这样当按钮被高亮、按下或禁用时，按钮的图像会改变颜色。然而，你可以选择将一个次要图形设置为**目标图形**。这意味着分配给**目标图形**的项目将根据按钮的交互而改变颜色。在以下示例中，一个次要图像被分配为**目标图形**。你会看到按钮没有进行过渡；相反，星形图像进行了过渡：
- en: '![Figure 9.5: Target Graphic Example in the Chapter9 scene](img/Figure_09.05_B18327.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图9.5：目标图形示例](img/Figure_09.05_B18327.jpg)'
- en: 'Figure 9.5: Target Graphic Example in the Chapter9 scene'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5：第 9 章场景中的目标图形示例
- en: It’s important to note that these colors will tint the **Target Graphic**’s
    image. So, it essentially puts a color overlay on top of the **Target Graphic**.
    If the image of the **Target Graphic** is black, these tints will not appear to
    have any effect on the image. Note that the default **Normal Color** is white.
    Putting a white tint on an image does not change the color of the image.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，这些颜色将给 **目标图形** 的图像着色。因此，它实际上是在 **目标图形** 上叠加了一个颜色覆盖层。如果 **目标图形** 的图像是黑色的，这些着色看起来似乎对图像没有任何影响。注意，默认的
    **正常颜色** 是白色。在图像上应用白色着色不会改变图像的颜色。
- en: The `1`, this property will increase the alpha of the graphic. This applies
    to all (including the normal) states.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`，此属性将增加图形的透明度。这适用于所有状态（包括正常状态）。'
- en: The **Fade Duration** property is the time (in seconds) it takes to fade between
    the state colors.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**淡入持续时间** 属性是淡入状态颜色所需的时间（以秒为单位）。'
- en: Sprite Swap
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精灵交换
- en: The **Sprite Swap** transition type will make the button change to different
    images for different states.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '**精灵交换** 过渡类型将使按钮在不同状态下显示不同的图像。'
- en: You’ll note that there is no property to assign a sprite for the normal state.
    This is because the normal state will just use the sprite assigned to the **Image**
    component.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到没有属性可以分配一个精灵用于正常状态。这是因为正常状态将只使用分配给 **图像** 组件的精灵。
- en: 'The sprite sheet we imported in [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085),
    has four button images that will be helpful in demonstrating the Sprite Swap Transition:
    the images labeled `uiElements_39`, `uiElements_40`, `uiElements_41`, and `uiElements_42`
    (as shown in the following screenshot):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 [*第 6 章*](B18327_06.xhtml#_idTextAnchor085) 中导入的精灵表单有四个按钮图像，这些图像将有助于演示精灵交换过渡：标记为
    `uiElements_39`、`uiElements_40`、`uiElements_41` 和 `uiElements_42` 的图像（如下截图所示）：
- en: '![Figure 9.6: The sprites we will use to demonstrate button Sprite Swap](img/Figure_09.06_B18327.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6：我们将使用这些精灵来演示按钮精灵交换](img/Figure_09.06_B18327.jpg)'
- en: 'Figure 9.6: The sprites we will use to demonstrate button Sprite Swap'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6：我们将使用这些精灵来演示按钮精灵交换
- en: 'To have the button take on these images at the appropriate states, we simply
    need to assign `uiElements_39` to the `uiElements_40` to the `uiElements_41` to
    the `uiElements_39` to the `uiElements_42` to the **Disabled Sprite**. We also
    need to delete the child **Text** object from the button:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 要使按钮在适当的状态下显示这些图像，我们只需将 `uiElements_39` 分配给 `uiElements_40`，然后分配给 `uiElements_41`，接着分配给
    `uiElements_42`，最后分配给 **禁用精灵**。我们还需要从按钮中删除子 **文本** 对象：
- en: '![Figure 9.7: Sprite Swap Example in the Chapter9 scene](img/Figure_09.07_B18327.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.7：第 9 章场景中的精灵交换示例](img/Figure_09.07_B18327.jpg)'
- en: 'Figure 9.7: Sprite Swap Example in the Chapter9 scene'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7：第 9 章场景中的精灵交换示例
- en: Remember, you can view the **Disabled Sprite** by deselecting **Interactable**.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以通过取消选择 **可交互** 来查看 **禁用精灵**。
- en: 'A nice sprite swap animation that I always find appealing is applying an image
    of a button that appears down-pressed to the pressed image. For example, I took
    the button on the left and slightly edited it to create the button on the right.
    The change is slight, but I changed it by slightly moving down the top part of
    the button to make it look pressed:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一个我一直觉得很有吸引力的漂亮的精灵交换动画是将一个看起来按下状态的按钮图像应用到按下图像上。例如，我取了左侧的按钮并稍作编辑，以创建右侧的按钮。变化很小，但我通过稍微向下移动按钮的顶部部分来改变它，使其看起来被按下：
- en: '![Figure 9.8: The indented button animation sheet](img/Figure_09.08_B18327.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.8：缩进按钮动画表](img/Figure_09.08_B18327.jpg)'
- en: 'Figure 9.8: The indented button animation sheet'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8：缩进按钮动画表
- en: 'It doesn’t look like much of a difference when viewed side by side. However,
    when the left-hand image is used for **Source Image**, **Highlighted Sprite**,
    **Selected Sprite**, and **Disabled Sprite**, and the right-hand image is used
    for **Pressed Sprite**, the button transitions to show a very nice button-pressing
    animation:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当并排查看时，看起来没有太大的区别。然而，当左侧的图像用于 **源图像**、**高亮精灵**、**选中精灵** 和 **禁用精灵**，而右侧的图像用于
    **按下精灵** 时，按钮会过渡显示一个非常好的按钮按下动画：
- en: '![Figure 9.9: Pressed Button Example in the Chapter9 scene](img/Figure_09.09_B18327.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.9：第 9 章场景中的按下按钮示例](img/Figure_09.09_B18327.jpg)'
- en: 'Figure 9.9: Pressed Button Example in the Chapter9 scene'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9：第 9 章场景中的按下按钮示例
- en: To see this in action, view `Pressed Button Example Canvas` in `Chapter9Scene`;
    it really is quite satisfying to click.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看实际效果，请查看`Chapter9Scene`中的`Pressed Button Example Canvas`；点击确实非常令人满意。
- en: In [*Chapter 11*](B18327_11.xhtml#_idTextAnchor292), we will explore how to
    create an image swap without the button transition property, for something like
    a mute/unmute button.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第11章*](B18327_11.xhtml#_idTextAnchor292)中，我们将探讨如何在不使用按钮过渡属性的情况下创建图像交换，例如静音/取消静音按钮。
- en: Animation
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画
- en: The **Animation** transition allows the button to animate in its various states.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**动画**过渡允许按钮在其各种状态下进行动画处理。'
- en: Animation transition types require an **Animator** component attached to the
    Button. It can add a preexisting set of animations to a Button by dragging it
    onto the Button’s Inspector, or you can make a whole new Animator Controller by
    selecting **Auto Generate Animation**. If you use a preexisting Animator Controller,
    you can simply assign the Animations to the individual states. However, if you
    generate a new Animator Controller, you can select the state from the list of
    Clips in the **Animation** window and edit them from that window. An example of
    making a Button with animated transitions is provided in the *Examples* section
    of this chapter.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 动画过渡类型需要将**动画器**组件附加到按钮上。您可以通过将其拖放到按钮的检查器上来向按钮添加预存在的动画集，或者您可以通过选择**自动生成动画**来创建一个新的**动画控制器**。如果您使用预存在的动画控制器，您可以直接将动画分配给单个状态。但是，如果您生成一个新的动画控制器，您可以从**动画**窗口中的剪辑列表中选择状态，并从该窗口进行编辑。本章的*示例*部分提供了一个具有动画过渡的按钮的示例。
- en: Navigation
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导航
- en: 'Buttons have a **Navigation** property that determines the order in which they
    will be highlighted via keyboard or controller inputs:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮具有一个**导航**属性，该属性决定了它们将通过键盘或控制器输入突出显示的顺序：
- en: '![Figure 9.10: The Navigation property on the Button component](img/Figure_09.10_B18327.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10：按钮组件上的导航属性](img/Figure_09.10_B18327.jpg)'
- en: 'Figure 9.10: The Navigation property on the Button component'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：按钮组件上的导航属性
- en: Each Button within the scene must have this property set if you want to navigate
    to all the Buttons. If you recall from [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    we discussed the **First Selected** property of the **Event System** component.
    If you have a Button assigned to **First Selected**, that Button will be highlighted
    when you load the scene. If you then navigate through the Buttons with the keyboard,
    the navigation will begin at the Button with the **First Selected** property.
    However, if you do not have a Button assigned as **First Selected**, navigation
    will not start until a button has been selected with the mouse. The next button
    selected is determined by the navigation option you have selected for the buttons.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想导航到场景中的所有按钮，每个按钮都必须设置此属性。如果您还记得从[*第8章*](B18327_08.xhtml#_idTextAnchor147)，我们讨论了**事件系统**组件的**首次选中**属性。如果您将按钮分配为**首次选中**，则在加载场景时该按钮将被突出显示。如果您随后使用键盘导航按钮，导航将从具有**首次选中**属性的按钮开始。然而，如果您没有将按钮分配为**首次选中**，则导航将不会开始，直到使用鼠标选择了一个按钮。下一个选中的按钮由您为按钮选择的导航选项确定。
- en: 'There are five **Navigation** options: **None**, **Horizontal**, **Vertical**,
    **Automatic**, and **Explicit**.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 有五种**导航**选项：**无**、**水平**、**垂直**、**自动**和**显式**。
- en: Selecting **None** will disable all keyboard navigation to the specified Button.
    Remember that this is for the individual button, so if you want to disable all
    keyboard navigation, you must select **None** for all Buttons.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**无**将禁用所有键盘导航到指定的按钮。请记住，这是针对单个按钮的，因此如果您想禁用所有键盘导航，您必须为所有按钮选择**无**。
- en: '**Horizontal** and **Vertical** are pretty self-explanatory. If a Button has
    its **Navigation** property set to **Horizontal**, when it is selected, the next
    button selected will be chosen horizontally, meaning with the right and left arrows.
    **Vertical** works similarly; this represents the navigation *away* from that
    button, not *to* that button. So, if a button that has **Horizontal** set has
    its navigation property, you can still access that button from another with a
    vertical button.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**水平**和**垂直**相当直观。如果一个按钮的**导航**属性设置为**水平**，当它被选中时，下一个选中的按钮将水平选择，即使用左右箭头。**垂直**的作用类似；这表示从该按钮导航*离开*，而不是*到达*该按钮。因此，如果一个按钮的**水平**设置为**水平**，并且其导航属性，您仍然可以通过垂直按钮从另一个按钮访问该按钮。'
- en: '**Automatic** will allow the **Button** to navigate both Horizontally and Vertically,
    as determined automatically by its position relative to the other buttons.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**自动**将允许**按钮**在水平和垂直方向上导航，这由其相对于其他按钮的位置自动确定。'
- en: 'The **Visualize** button allows you to see a visual representation of the navigation
    setup. Each Button will be connected, with arrows demonstrating which Button will
    be selected after it. Each arrow begins on the side of the button to symbolize
    the directional arrow pressed, and it points at the next button that will be highlighted
    if that arrow is pressed. For example, if an arrow begins on a Button’s right,
    that arrow symbolizes what Button will be selected next if the player presses
    right on the keyboard. The following example shows the visualization of five Buttons,
    all with their **Navigation** property set to **Automatic**:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**可视化**按钮允许你看到导航设置的视觉表示。每个按钮都将连接，箭头显示在哪个按钮之后将被选中。每个箭头从按钮的一侧开始，表示按下的方向箭头，并指向按下该箭头时将被高亮的下一个按钮。例如，如果箭头从一个按钮的右侧开始，那么这个箭头表示如果玩家在键盘上按下右键，将选择哪个按钮。以下示例显示了五个按钮的视觉表示，所有按钮的**导航**属性都设置为**自动**：'
- en: '![Figure 9.11: Navigation Example in the Chapter9 scene](img/Figure_09.11_B18327.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11：第 9 章场景中的导航示例](img/Figure_09.11_B18327.jpg)'
- en: 'Figure 9.11: Navigation Example in the Chapter9 scene'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11：第 9 章场景中的导航示例
- en: 'In the preceding example, each Button has a **Color Tint Transition** property
    with the **Highlighted Color** and **Selected Color** assigned to green. The Button
    labeled **1** has been assigned as **First Selected** in the **Event System**:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，每个按钮都有一个**颜色渐变过渡**属性，将**高亮颜色**和**选中颜色**指定为绿色。标记为**1**的按钮已在**事件系统**中指定为**首次选中**：
- en: '![Figure 9.12: Event System with Button 1 assigned to First Selected](img/Figure_09.12_B18327.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12：将按钮 1 分配给首次选择的系统事件](img/Figure_09.12_B18327.jpg)'
- en: 'Figure 9.12: Event System with Button 1 assigned to First Selected'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12：将按钮 1 分配给首次选择的系统事件
- en: 'Therefore, when the scene begins playing, it will automatically be highlighted.
    Based on the visualized graph, if the right arrow key is selected on the keyboard
    after the scene loads, the **Button** labeled **2** will be selected:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当场景开始播放时，它将自动被突出显示。根据可视化的图，如果场景加载后键盘上选择了右箭头键，则标记为**2**的**按钮**将被选中：
- en: '![Figure 9.13: Navigation Example in the Chapter9 scene](img/Figure_09.13_B18327.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13：第 9 章场景中的导航示例](img/Figure_09.13_B18327.jpg)'
- en: 'Figure 9.13: Navigation Example in the Chapter9 scene'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13：第 9 章场景中的导航示例
- en: The last **Navigation** type is **Explicit** and allows for significantly better
    control. With this, you can explicitly define which button will be accessed with
    each individual keyboard press.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一种**导航**类型是**显式**，它允许进行显著更好的控制。使用这种方式，你可以明确定义每个单独的键盘按键将访问哪个按钮。
- en: '![Figure 9.14: The properties of the Explicit Navigation type](img/Figure_09.14_B18327.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14：显式导航类型的属性](img/Figure_09.14_B18327.jpg)'
- en: 'Figure 9.14: The properties of the Explicit Navigation type'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14：显式导航类型的属性
- en: Let’s say that you wanted the player to cycle through the buttons in the order
    1-2-3-4-5 and then loop back to 1\. You want this to happen with either the up
    button or the right button. None of the previously mentioned navigation methods
    will allow that. However, you can achieve that with the **Explicit** Navigation
    type. The first step-by-step example of this chapter covers how to create an explicit
    button navigation map.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你希望玩家按顺序循环操作按钮 1-2-3-4-5，然后循环回到 1。你希望这个操作可以通过上按钮或右按钮完成。之前提到的任何导航方法都无法实现这一点。然而，你可以通过使用**显式**导航类型来实现。本章的第一个逐步示例涵盖了如何创建显式按钮导航映射。
- en: Invisible button zones
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不可见按钮区域
- en: In [*Chapter 2*](B18327_02.xhtml#_idTextAnchor024), we discussed tapping zones
    on the screen. Often, in mobile games, tapping anywhere on the screen will cause
    an event. For example, many times when you select outside of a pop-up window,
    it will close. Other examples are when you can tap on the left or right side of
    the screen to move a character back and forth. Tapping on areas of the screen
    may not seem like a button implementation, but it actually is! The buttons are
    just invisible.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B18327_02.xhtml#_idTextAnchor024)中，我们讨论了屏幕上的点击区域。在移动游戏中，通常点击屏幕上的任何位置都会触发一个事件。例如，很多时候，当你选择弹出窗口之外的区域时，它将会关闭。其他例子包括你可以点击屏幕的左侧或右侧来移动角色。点击屏幕上的区域可能看起来不像按钮实现，但实际上它是！按钮只是不可见的。
- en: Let’s explore the first scenario. If you review the `Close Panel Example` GameObject
    of the `Chapter9` scene, you will see a Panel that appears when an info button
    is pressed, closes when the close button is pressed, and also closes when the
    area outside of the Panel is pressed. This is accomplished by putting a large,
    invisible button behind the Panel. For it to work appropriately, it needs to be
    in front of the info button (blocking raycast to it).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索第一个场景。如果你回顾`Chapter9`场景中的`Close Panel Example` GameObject，你会看到一个当按下信息按钮时出现的面板，当按下关闭按钮时关闭，当按下面板外的区域时也会关闭。这是通过在面板后面放置一个大型、不可见的按钮来实现的。为了使其正常工作，它需要位于信息按钮的前面（阻挡对其的射线投射）。
- en: '![Figure 9.15: Close Panel Example in the Chapter9 scene](img/Figure_09.15_B18327.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图9.15：第9章场景中的关闭面板示例](img/Figure_09.15_B18327.jpg)'
- en: 'Figure 9.15: Close Panel Example in the Chapter9 scene'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15：第9章场景中的关闭面板示例
- en: It’s a good design choice to include the close button, even if the background
    area will dismiss the Panel. Many people do not intuitively consider tapping outside
    a Panel to be an action that will close it and will spend time looking for the
    close button if you do not provide it.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 即使背景区域会关闭面板，包含关闭按钮也是一个好的设计选择。许多人不会直观地认为点击面板外部是一个会关闭面板的动作，如果你不提供它，他们可能会花时间寻找关闭按钮。
- en: Now let’s explore the second scenario, where the two sides of the screen cause
    different actions. In the `Tap Zone Example GameObject`, tapping the left side
    moves the candy cane to the left, and tapping the right side moves the candy cane
    to the right. Once again, large invisible buttons are being utilized.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们探索第二种场景，其中屏幕的两边会导致不同的动作。在`Tap Zone Example GameObject`中，点击左侧会将拐杖糖向左移动，点击右侧则会将拐杖糖向右移动。再次强调，这里使用了大型的不可见按钮。
- en: '![Figure 9.16: Tap Zone Example in the Chapter9 scene](img/Figure_09.16_B18327.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图9.16：第9章场景中的点击区域示例](img/Figure_09.16_B18327.jpg)'
- en: 'Figure 9.16: Tap Zone Example in the Chapter9 scene'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.16：第9章场景中的点击区域示例
- en: When using these large invisible buttons, it is very important that you consider
    how raycast will be affected by them, even though they are invisible. They will
    block things behind them!
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用这些大型的不可见按钮时，非常重要的一点是，你需要考虑射线投射对这些按钮的影响，即使它们是不可见的。它们会阻挡它们后面的东西！
- en: Examples
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: For the first three examples in this chapter, we will momentarily step away
    from the scene we have been working on to build a new scene that will allow us
    to experiment with button navigation and scene loading. We’ll then pick up where
    we left off with our scene from [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    to add some buttons to our scene.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的前三个示例中，我们将暂时离开我们一直在工作的场景，构建一个新的场景，以便我们可以实验按钮导航和场景加载。然后，我们将从[*第8章*](B18327_08.xhtml#_idTextAnchor147)的场景继续，向我们的场景添加一些按钮。
- en: Navigating through Buttons and using First Selected
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过按钮导航和使用首次选中
- en: 'We’ll build out a faux start screen that appears as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个如下所示的外观起始屏幕：
- en: '![Figure 9.17: The start screen scene we will build](img/Figure_09.17_B18327.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图9.17：我们将构建的起始屏幕场景](img/Figure_09.17_B18327.jpg)'
- en: 'Figure 9.17: The start screen scene we will build'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17：我们将构建的起始屏幕场景
- en: Most of these buttons will be dummy buttons, but we will set up the **Play**
    button in the next example to load the scene we have been working on.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按钮中的大多数将是虚拟按钮，但在下一个示例中，我们将设置**播放**按钮，以便加载我们一直在工作的场景。
- en: 'To give us the ability to experiment with button navigation, we’ll assign an
    **Explicit** navigation scheme to it so that we can cycle through the buttons
    with the following pattern:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让我们能够实验按钮导航，我们将为它分配一个**显式**的导航方案，这样我们就可以按照以下模式循环遍历按钮：
- en: '![Figure 9.18: The button navigation map](img/Figure_09.18_B18327.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图9.18：按钮导航图](img/Figure_09.18_B18327.jpg)'
- en: 'Figure 9.18: The button navigation map'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18：按钮导航图
- en: 'First, the **Play** button will be selected. Pressing the *down* key on the
    keyboard continuously will result in the following selection path:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将选择**播放**按钮。在键盘上持续按下*下*键将导致以下选择路径：
- en: '![Figure 9.19: The button navigation flow with the down arrow](img/Figure_09.19_B18327.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图9.19：带有向下箭头的按钮导航流程](img/Figure_09.19_B18327.jpg)'
- en: 'Figure 9.19: The button navigation flow with the down arrow'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19：带有向下箭头的按钮导航流程
- en: 'Pressing the *up* button continuously will result in the following path:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 持续按下*上*按钮将导致以下路径：
- en: '![Figure 9.20: The button navigation flow with the up arrow](img/Figure_09.20_B18327.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图9.20：带有向上箭头的按钮导航流程](img/Figure_09.20_B18327.jpg)'
- en: 'Figure 9.20: The button navigation flow with the up arrow'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20：带有向上箭头的按钮导航流程
- en: Next, we’ll learn how to lay out the buttons.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何布局按钮。
- en: Laying out the Buttons
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 布局按钮
- en: Let’s start by creating a new scene and laying out the buttons.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个新的场景并布局按钮。
- en: 'To make a faux start screen as shown in *Figure 9**.17*, complete the following
    steps:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要制作如图*图9.17*所示的模拟启动屏幕，请完成以下步骤：
- en: Create a new empty scene and name it `Chapter9-Examples-StartScreen`. Open the
    new scene.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的空场景并将其命名为`Chapter9-Examples-StartScreen`。打开新场景。
- en: 'To give this scene the same background as the scenes we’ve made in the last
    few chapters, we can create another `Chapter8-Examples` scene to the **Hierarchy**.
    You should now see the following:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让这个场景与我们在前几章中制作的场景具有相同的背景，我们可以在**层次结构**中创建另一个`Chapter8-Examples`场景。你现在应该看到以下内容：
- en: '![Figure 9.21: Loading the two scenes simultaneously](img/Figure_09.21_B18327.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图9.21：同时加载两个场景](img/Figure_09.21_B18327.jpg)'
- en: 'Figure 9.21: Loading the two scenes simultaneously'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21：同时加载两个场景
- en: 'Select `Background Canvas` and press *Ctrl* + *D* to duplicate it. Now, drag
    the duplicate, labeled `Chapter9-Examples-StartScreen` scene:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Background Canvas`并按*Ctrl* + *D*键进行复制。现在，拖动复制的，标记为`Chapter9-Examples-StartScreen`的场景：
- en: '![Figure 9.22: Duplicating Background Canvas](img/Figure_09.22_B18327.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图9.22：复制背景Canvas](img/Figure_09.22_B18327.jpg)'
- en: 'Figure 9.22: Duplicating Background Canvas'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22：复制背景Canvas
- en: 'We can now close the `Chapter8-Examples` scene, as we no longer need it. To
    do so, select the three dots on the right of the `Chapter8-Examples` scene, and
    select **Remove Scene**. Just in case you accidentally deleted something, select
    **Don’t Save** when prompted:![Figure 9.23: Removing the Scene](img/Figure_09.23_B18327.jpg)'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在可以关闭`Chapter8-Examples`场景，因为我们不再需要它。为此，选择`Chapter8-Examples`场景右侧的三个点，并选择**移除场景**。以防你意外删除了某些内容，当提示时选择**不保存**：![图9.23：移除场景](img/Figure_09.23_B18327.jpg)
- en: 'Figure 9.23: Removing the Scene'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.23：移除场景
- en: You should now have only `Chapter9-Examples-StartScreen` in the `Background
    Canvas` should be visible in the scene.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，你应该只看到`Chapter9-Examples-StartScreen`在场景中，并且`Background Canvas`应该可见。
- en: Rename `Background Canvas (1)` to `Background Canvas` and save the scene.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Background Canvas (1)`重命名为`Background Canvas`并保存场景。
- en: Note
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You’ll note that by doing this, we have a **Canvas** in the scene without an
    **Event System**. That’s okay, though; once we add new UI elements, an Event System
    will be added in for us.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '你会注意到，通过这样做，我们在场景中有一个没有**事件系统**的**Canvas**。虽然这样很好，但一旦我们添加新的UI元素，事件系统会自动添加。 '
- en: Before we can proceed, we should take care of a warning message that pops up
    in the Console. Since we copied `Background Canvas` from another scene, it is
    trying to access the camera from the other scene and can’t find it.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们继续之前，我们应该注意在控制台中弹出的警告信息。由于我们从另一个场景复制了`Background Canvas`，它正在尝试访问另一个场景中的相机，但找不到它。
- en: 'A warning message will also appear on the `Background Canvas`:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`Background Canvas`上也会出现一个警告信息：
- en: '![Figure 9.24: The Canvas component error message](img/B18327_09_24.jpg)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.24：Canvas组件错误信息](img/B18327_09_24.jpg)'
- en: 'Figure 9.24: The Canvas component error message'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.24：Canvas组件错误信息
- en: To fix this, simply drag the `Main Camera` from the current scene to the **Render
    Camera** slot and set the **Sorting Layer** to **Background**.
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了解决这个问题，只需将当前场景中的`Main Camera`拖动到**渲染相机**槽中，并将**排序层**设置为**背景**。
- en: '![Figure 9.25: The Canvas component with the Main Camera assigned](img/Figure_09.25_B18327.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.25：分配了主相机的Canvas组件](img/Figure_09.25_B18327.jpg)'
- en: 'Figure 9.25: The Canvas component with the Main Camera assigned'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.25：分配了主相机的Canvas组件
- en: Now, let’s add the `Button Canvas`. Note that once you create the `Button Canvas`,
    an `Event System` GameObject will be created for you.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加“按钮画布”。请注意，一旦你创建了“按钮画布”，就会为你创建一个“事件系统”游戏对象。
- en: 'Create a new UI Button (`Button Canvas` and give it the following **Rect Transform**
    and **Image** component properties:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的UI按钮（`Button Canvas`）并赋予它以下**Rect Transform**和**Image**组件属性：
- en: '![Figure 9.26: The properties on the Play Button](img/Figure_09.26_B18327.jpg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图9.26：播放按钮的属性](img/Figure_09.26_B18327.jpg)'
- en: 'Figure 9.26: The properties on the Play Button'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.26：播放按钮的属性
- en: 'Now, select the child `Play Button` and set its **Rect Transform** and **Text**
    component properties as such:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择子`Play Button`并设置其**Rect Transform**和**Text**组件属性如下：
- en: '![Figure 9.27: The properties on the Play Button’s text](img/Figure_09.27_B18327.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图9.27：播放按钮文本的属性](img/Figure_09.27_B18327.jpg)'
- en: 'Figure 9.27: The properties on the Play Button’s text'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.27：播放按钮文本的属性
- en: 'Now, let’s create an `Achievement Button`, a `Leaderboard Button`, and an `Info
    Button` so they appear as follows:![Figure 9.28: The layout of the start screen
    buttons](img/Figure_09.28_B18327.jpg)'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个“成就按钮”、“排行榜按钮”和“信息按钮”，使它们看起来如下所示：![图9.28：起始屏幕按钮布局](img/Figure_09.28_B18327.jpg)
- en: 'Figure 9.28: The layout of the start screen buttons'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.28：起始屏幕按钮布局
- en: 'To achieve the preceding layout, use the following properties and make sure
    to remove their child `Text` objects:'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要实现前面的布局，使用以下属性，并确保删除它们的子`Text`对象：
- en: '![Figure 9.29: The properties of the three buttons](img/Figure_09.29_B18327.jpg)'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.29：三个按钮的属性](img/Figure_09.29_B18327.jpg)'
- en: 'Figure 9.29: The properties of the three buttons'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.29：三个按钮的属性
- en: 'Now all that is left to do to set up our scene’s layout is to create the `Facebook
    Button` and `Twitter Button` in the bottom-right corner of the scene. (Ignore
    the fact that the logos are extremely outdated.) To achieve the layout in *Figure
    9**.26*, create two buttons with the following properties:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在要设置场景布局剩下的工作就是创建位于场景右下角的“Facebook按钮”和“Twitter按钮”。（忽略标志极其过时的实际情况。）为了实现图9**.26**中的布局，创建两个具有以下属性的按钮：
- en: '![Figure 9.30: The properties on the two buttons](img/Figure_09.30_B18327.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图9.30：两个按钮上的属性](img/Figure_09.30_B18327.jpg)'
- en: 'Figure 9.30: The properties on the two buttons'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.30：两个按钮上的属性
- en: Your scene should be correctly laid out now, so let’s work on setting up the
    navigation.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你的场景现在应该布局正确，因此让我们着手设置导航。
- en: Setting the explicit navigation and First Selected
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置显式导航和第一个选中
- en: 'If you select the **Visualize** button on any of your Button’s **Button** components,
    you should see the following navigation path:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择了任何按钮组件中的“可视化”按钮，你应该看到以下导航路径：
- en: '![Figure 9.31: The automatic button navigation visualization](img/Figure_09.31_B18327.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图9.31：自动按钮导航可视化](img/Figure_09.31_B18327.jpg)'
- en: 'Figure 9.31: The automatic button navigation visualization'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.31：自动按钮导航可视化
- en: This navigation setup allows significantly more navigation range than the setup
    I described at the beginning of this example. This is because each button has
    its navigation set to `Play Button` the **First Selected** Button in our **Event
    System**.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这种导航设置比我在本例开头描述的设置提供了更广泛的导航范围。这是因为每个按钮的导航都设置为“播放按钮”，它是我们事件系统中的**第一个选中的按钮**。
- en: 'To set up the navigation described at the beginning of this example, complete
    the following steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置本例开头描述的导航，完成以下步骤：
- en: 'Select the `Play Button` to the **First Selected** slot by drag and drop:![Figure
    9.32: The Event System with the Play Button as First Selected](img/Figure_09.32_B18327.jpg)'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过拖放将`Play Button`选择到**第一个选中**槽位：![图9.32：以播放按钮为第一个选中的事件系统](img/Figure_09.32_B18327.jpg)
- en: 'Figure 9.32: The Event System with the Play Button as First Selected'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.32：以播放按钮为第一个选中的事件系统
- en: Now, when we start cycling through our buttons, our navigation will begin at
    the `Play Button`. Also, if we were to hit the *Enter* key when this scene loads,
    the `Play Button` will automatically be executed.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，当我们开始循环遍历我们的按钮时，我们的导航将从“播放按钮”开始。此外，如果我们在这个场景加载时按下*Enter*键，将自动执行“播放按钮”。
- en: Now, let’s set all the Buttons to have an **Explicit Navigation** type. Select
    all six of the buttons in the **Hierarchy** list.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们将所有按钮设置为具有“显式导航”类型。在“层次”列表中选择所有六个按钮。
- en: With all selected, change the **Navigation** type to **Explicit** from the dropdown
    menu. Now, each Button should have the following settings in its **Button** component.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有选项后，从下拉菜单中将**导航**类型更改为**显式**。现在，每个按钮在其**按钮**组件中应具有以下设置。
- en: 'To make it easier to see our navigation, let’s change the **Selected Colors**
    property on each of our Buttons. With all the Buttons still selected, set **Selected
    Color** to dark red. It’s not very attractive, but it will make it easier for
    us to see whether our buttons are being selected. The **Button** component on
    all of your buttons should now look as follows:![Figure 9.33: The Button component
    with Color Tint transitions](img/Figure_09.33_B18327.jpg)'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的导航更容易看到，让我们将每个按钮上的**选中颜色**属性更改为深红色。它并不非常吸引人，但它将使我们更容易看到按钮是否被选中。您所有按钮上的**按钮**组件现在应如下所示：![图9.33：具有颜色色调转换的按钮组件](img/Figure_09.33_B18327.jpg)
- en: 'Figure 9.33: The Button component with Color Tint transitions'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.33：具有颜色色调转换的按钮组件
- en: 'If you play the game, you should see the `Play Button` colored red, symbolizing
    that it is selected (since we set it as **First Selected** in Step 1):'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您玩游戏，您应该看到`播放按钮`着色为红色，表示它已被选中（因为我们已在步骤1中将其设置为**第一个选中**）：
- en: '![Figure 9.34: Play Button selected and colored red](img/Figure_09.34_B18327.jpg)'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.34：播放按钮被选中并着色为红色](img/Figure_09.34_B18327.jpg)'
- en: 'Figure 9.34: Play Button selected and colored red'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.34：播放按钮被选中并着色为红色
- en: Now, we can explicitly (hence the name) set the Buttons that each individual
    Button is to navigate to by dragging and dropping them into the appropriate slots.
    Let’s set the `Play Button` first since it will be the first button selected.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以通过拖放它们到适当的槽位来明确（因此得名）设置每个按钮要导航到的按钮。让我们首先设置`播放按钮`，因为它将是第一个被选中的按钮。
- en: According to *Figures 9.18* through *9.20*, the `Play Button` should navigate
    to `Twitter Button` when the *up* key is pressed and `Achievements Button` when
    the *down* key is pressed. So, drag and drop those Buttons into the slots labeled
    **Select On Up** and **Select On Down**, respectively, from the **Hierarchy**.
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据图9.18至图9.20，当按下*上*键时，`播放按钮`应导航到`Twitter按钮`，当按下*下*键时，应导航到`成就按钮`。因此，将这些按钮分别拖放到**上键选择**和**下键选择**的槽位中，从**层次结构**中拖放。
- en: If you have the **Visualize** button selected, as you are dragging the Buttons
    into their slots, you should see the navigation visualization starting to build
    out.
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您选中了**可视化**按钮，当您将按钮拖放到它们的槽位时，您应该看到导航可视化开始构建。
- en: '![Figure 9.35: The Navigation properties of the Play Button](img/Figure_09.35_B18327.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图9.35：播放按钮的导航属性](img/Figure_09.35_B18327.jpg)'
- en: 'Figure 9.35: The Navigation properties of the Play Button'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.35：播放按钮的导航属性
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that if an arrow begins on top of a Button, that arrow symbolizes where
    navigation will go if the *up* key is pressed, and if the arrow begins on the
    bottom of a Button, it symbolizes where navigation will go if the *down* key is
    pressed.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，如果箭头从一个按钮的顶部开始，那么这个箭头表示按下*上*键时导航将去哪里，如果箭头从一个按钮的底部开始，它表示按下*下*键时导航将去哪里。
- en: Play the game to check and see whether it works. Press the *up* key and you
    should see the `Twitter Button` turn red, indicating it is selected.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播玩游戏以检查它是否工作。按下*上*键，你应该看到`Twitter按钮`变红，表示它已被选中。
- en: To see the `Achievement Button` become selected, you actually have to stop playing
    the game and replay, because we have not set up the navigation for the `Twitter
    Button` to go back to the `Play Button`. So, stop the game, press Play again,
    then press the *down* key, and you should see the `Achievement Button` highlight
    red.
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要看到`成就按钮`被选中，您实际上必须停止玩游戏并重新播放，因为我们尚未为`Twitter按钮`设置返回到`播放按钮`的导航。因此，停止游戏，再次按下播放，然后按下*下*键，您应该看到`成就按钮`高亮显示为红色。
- en: Note
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Instead of restarting the game, you can also highlight the Play Button with
    your mouse so that you can then navigate to the Achievement Button.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以用鼠标突出显示播放按钮，而不是重新启动游戏，这样您就可以导航到成就按钮。
- en: 'Once you set up the navigation for one Button, the rest aren’t too difficult,
    albeit tedious. Use the following chart to help you set up the rest of the Buttons:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦为一个按钮设置了导航，其余的就不太困难，尽管有些繁琐。使用以下图表来帮助您设置其余按钮：
- en: '| **Button** | **Select** **On Up** | **Select** **On Down** |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| **按钮** | **上键选择** | **下键选择** |'
- en: '| `Play Button` | `Twitter Button` | `Achievement Button` |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `播放按钮` | `Twitter 按钮` | `成就按钮` |'
- en: '| `Achievement Button` | `Play Button` | `Leaderboard Button` |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `成就按钮` | `播放按钮` | `排行榜按钮` |'
- en: '| `Leaderboard Button` | `Achievement Button` | `Info Button` |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `排行榜按钮` | `成就按钮` | `信息按钮` |'
- en: '| `Info Button` | `LeaderBoard Button` | `Facebook Button` |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `信息按钮` | `排行榜按钮` | `Facebook 按钮` |'
- en: '| `Facebook Button` | `Info Button` | `Twitter Button` |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `Facebook 按钮` | `信息按钮` | `Twitter 按钮` |'
- en: '| `Twitter Button` | `Facebook Button` | `Play Button` |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `Twitter 按钮` | `Facebook 按钮` | `播放按钮` |'
- en: 'Table 9.1: The Select On Up and Select On Down assignments for each Button'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 表 9.1：每个按钮的向上选择和向下选择分配
- en: 'When you are done, your navigation visualization should look like the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当你完成时，你的导航可视化应该看起来像以下这样：
- en: '![Figure 9.36: The finalized Navigation flow visualization](img/Figure_09.36_B18327.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.36：最终导航流程可视化](img/Figure_09.36_B18327.jpg)'
- en: 'Figure 9.36: The finalized Navigation flow visualization'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.36：最终导航流程可视化
- en: If you play your game, you should be able to easily cycle through the Buttons
    using the arrow keys.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你玩游戏，你应该能够通过使用箭头键轻松地在按钮之间循环。
- en: I recommend setting all the buttons to have **Horizontal** or **Vertical** **Navigation**
    patterns and seeing how they differ from what we have created so that you can
    see that this pattern is not attainable with a predefined pattern applied to all
    the Buttons.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议将所有按钮设置为**水平**或**垂直****导航**模式，并观察它们与我们创建的模式的区别，这样你就可以看到这种模式不能通过应用于所有按钮的预定义模式来实现。
- en: Loading scenes with Button presses
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过按钮点击加载场景
- en: Now that we have our start screen laid out, let’s hook up the `Play Button`
    to play our game. First, duplicate the scene you created in [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    called `Chapter8-Examples`, using *Ctrl* + *D*. The new scene should be called
    `Chapter9-Examples`. Our goal is to have the `Play Button` in `Chapter9-Examples-StartScreen`
    load the `Chapter9-Examples` scene.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经布置好起始屏幕，让我们将`播放按钮`连接到游戏。首先，使用 *Ctrl* + *D* 复制你在[*第 8 章*](B18327_08.xhtml#_idTextAnchor147)中创建的场景，名为`Chapter8-Examples`。新场景应命名为`Chapter9-Examples`。我们的目标是让`Chapter9-Examples-StartScreen`中的`播放按钮`加载`Chapter9-Examples`场景。
- en: 'To make the `Play Button` in the `Chapter9-Examples-StartScreen` scene, load
    up the `Chapter9-Examples` scene and complete the following steps:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`Chapter9-Examples-StartScreen`场景中制作`播放按钮`，请加载`Chapter9-Examples`场景并完成以下步骤：
- en: 'To transition between scenes within Unity, you must first ensure that they
    are each listed within the **Scenes In Build** list in the **Build Settings**.
    Select **File** | **Build Settings** (or *Ctrl* + *Shift* + *B*). The following
    should be visible:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在 Unity 中切换场景，你必须首先确保它们都列在**构建设置**中的**场景在构建中**列表中。选择**文件** | **构建设置**（或 *Ctrl*
    + *Shift* + *B*）。以下内容应该可见：
- en: '![Figure 9.37: The Build Settings with no scenes in the build](img/Figure_09.37_B18327.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.37：构建设置中没有场景的截图](img/Figure_09.37_B18327.jpg)'
- en: 'Figure 9.37: The Build Settings with no scenes in the build'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.37：构建设置中没有场景的截图
- en: 'From the `Chapter9-Examples-StartScreen` and `Chapter9-Examples` scenes into
    the list:![Figure 9.38: Adding the scenes to the build](img/Figure_09.38_B18327.jpg)'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Chapter9-Examples-StartScreen`和`Chapter9-Examples`场景到列表中：![图 9.38：将场景添加到构建中](img/Figure_09.38_B18327.jpg)
- en: 'Figure 9.38: Adding the scenes to the build'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 9.38：将场景添加到构建中
- en: The order in which scenes appear in this list does not matter, except for the
    first scene (the one listed as scene `Chapter9-Examples-StartScreen` in position
    **0**.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在此列表中场景出现的顺序并不重要，除了第一个场景（在位置**0**列出的场景`Chapter9-Examples-StartScreen`）。
- en: 'Now that our scenes are in the `Scripts` folder in your `LevelLoader`. Open
    the new `LevelLoader` script and replace the code with the following:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经将场景放在你的`LevelLoader`文件夹中的`Scripts`文件夹中。打开新的`LevelLoader`脚本，并用以下代码替换代码：
- en: '[PRE0]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The preceding code contains a single function—`LoadTheLevel()`. This function
    calls the `LoadScene` method in the `SceneManager` class. We will load the `sceneToLoad`,
    which is a string we will specify in the `UnityEngine.SceneManagement` namespace
    must be included with the following line at the top of the script:'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码包含一个单独的函数——`LoadTheLevel()`。此函数调用`SceneManager`类中的`LoadScene`方法。我们将加载`sceneToLoad`，这是一个在`UnityEngine.SceneManagement`命名空间中指定的字符串，必须在脚本顶部包含以下行：
- en: '[PRE1]'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you still do not have the `Chapter9-Examples-StartScreen` scene open, open
    it again. Select the `Play Button` and drag and drop the `LevelLoader` script
    onto its **Inspector**.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有打开`Chapter9-Examples-StartScreen`场景，请再次打开它。选择`播放按钮`并将`LevelLoader`脚本拖放到其**检查器**中。
- en: 'Now, within the `Chapter9-Examples`. You don’t need to put it in quotes; since
    the `sceneToLoad` variable is a string, `Chapter9-Examples` is assumed to be a
    string without you needing to put it in quotes:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`Chapter9-Examples`中。你不需要用引号括起来；因为`sceneToLoad`变量是一个字符串，所以`Chapter9-Examples`被认为是无需引号的一个字符串：
- en: '![Figure 9.39: The LevelLoader.cs script component](img/Figure_09.39_B18327.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![图9.39：LevelLoader.cs脚本组件](img/Figure_09.39_B18327.jpg)'
- en: 'Figure 9.39: The LevelLoader.cs script component'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.39：LevelLoader.cs脚本组件
- en: Now all that is left is to hook up the Button’s click event. Select the `LevelLoader.cs`,
    is on the `Play Button`, so drag the `Play Button` into the object slot. Now,
    from the function dropdown menu, select **LevelLoader** | **LoadTheLevel**.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在只剩下连接按钮的点击事件。选择`LevelLoader.cs`，它在`播放按钮`上，所以将`播放按钮`拖放到对象槽中。现在，从函数下拉菜单中选择**LevelLoader**
    | **LoadTheLevel**。
- en: '![Figure 9.40: The OnClick event hooked up](img/Figure_09.40_B18327.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![图9.40：已连接的OnClick事件](img/Figure_09.40_B18327.jpg)'
- en: 'Figure 9.40: The OnClick event hooked up'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.40：已连接的OnClick事件
- en: That’s it! Your `Play Button` should now navigate to the `Chapter9-Examples`
    scene when clicked on or when you press *Enter* when it is highlighted (as it
    is at the beginning or with your keyboard navigation).
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样！当你点击或当它被高亮（如开始时或使用键盘导航）时，你的`播放按钮`应该会导航到`Chapter9-Examples`场景。
- en: Button Animation Transitions
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 按钮动画过渡
- en: Often buttons are animated as a way to draw your attention to them. Let’s give
    the `Play Button` an Animation Transition so that when it is in its normal state
    it will pulsate to draw the attention of the player to it.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 通常按钮会以动画的形式出现，以吸引你的注意。让我们给`播放按钮`添加一个动画过渡，这样当它处于正常状态时，它会脉冲以吸引玩家的注意。
- en: 'To add button Animation Transition on the `Play Button`, complete the following
    steps:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`播放按钮`上添加按钮动画过渡，请完成以下步骤：
- en: Select the `Play Button` and change its **Transition** type to **Animation**.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`播放按钮`并更改其**过渡**类型为**动画**。
- en: We do not have an Animator Controller prebuilt, so select **Auto Generate Animation**
    to create a new one.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们没有预构建的动画控制器，所以选择**自动生成动画**来创建一个新的。
- en: A window will pop up asking you to save the newly created Animator Controller.
    Create a new folder in the `Assets` folder, called `Animations`, and save the
    new Animator Controller as `Play Button` to the folder.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会弹出一个窗口询问你保存新创建的动画控制器。在`Assets`文件夹中创建一个新的文件夹，命名为`动画`，并将新的动画控制器保存为`Play Button`到该文件夹。
- en: 'You should now see the new Animator Controller in the new `Animations` folder:'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你现在应该能在新的`动画`文件夹中看到新的动画控制器：
- en: '![Figure 9.41: The Play Button animator in the Project](img/Figure_09.41_B18327.jpg)'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.41：项目中的播放按钮动画](img/Figure_09.41_B18327.jpg)'
- en: 'Figure 9.41: The Play Button animator in the Project'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.41：项目中的播放按钮动画
- en: 'You will also see the new `Play Button`:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你也会看到新的`播放按钮`：
- en: '![Figure 9.42: The Play Button Animator component](img/Figure_09.42_B18327.jpg)'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.42：播放按钮动画组件](img/Figure_09.42_B18327.jpg)'
- en: 'Figure 9.42: The Play Button Animator component'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.42：播放按钮动画组件
- en: Open the **Animation** window by selecting **Window** | **Animation**. If you
    want to dock this new window, dock it somewhere so that you can still see the
    Scene and Game views when it is up.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**窗口** | **动画**打开**动画**窗口。如果你想要停靠这个新窗口，请将其停靠在某个位置，这样你仍然可以在打开时看到场景和游戏视图。
- en: 'Select the `Play Button` and open the **Animation** window. The various animation
    clips associated with the transition states will be visible in the animation clip
    dropdown menu:![Figure 9.43: The various animations on the Play Button](img/Figure_09.43_B18327.jpg)'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`播放按钮`并打开**动画**窗口。与过渡状态相关联的各种动画剪辑将在动画剪辑下拉菜单中可见：![图9.43：播放按钮上的各种动画](img/Figure_09.43_B18327.jpg)
- en: 'Figure 9.43: The various animations on the Play Button'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.43：播放按钮上的各种动画
- en: We want to edit the animation for the **Normal** transition state, so make sure
    it is selected (**Normal** is the animation selected by default).
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们想编辑**正常**过渡状态的动画，所以请确保它被选中（**正常**是默认选中的动画）。
- en: 'To make the button look like its pulsating, we want to affect its scale. Select
    **Add Property** | **Rect Transform** and then hit the **+** icon next to **Scale**:![Figure
    9.44: Adding the Scale property to the Play Button](img/Figure_09.44_B18327.jpg)'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使按钮看起来像是在脉动，我们想要影响其缩放。选择 **添加属性** | **矩形变换**，然后点击 **Scale** 旁边的 **+** 图标：![图9.44：将缩放属性添加到播放按钮](img/Figure_09.44_B18327.jpg)
- en: 'Figure 9.44: Adding the Scale property to the Play Button'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.44：将缩放属性添加到播放按钮
- en: 'The **Scale** property should now be showing up in the **Animation** timeline:'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Scale** 属性现在应该显示在 **动画** 时间线上：'
- en: '![Figure 9.45: The Play Button Scale timeline](img/Figure_09.45_B18327.jpg)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![图9.45：播放按钮缩放时间线](img/Figure_09.45_B18327.jpg)'
- en: 'Figure 9.45: The Play Button Scale timeline'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图9.45：播放按钮缩放时间线
- en: 'To achieve the pulsation with scaling, we want the button to start at its normal
    size, get big, and then go back to its normal size. The diamonds that appear on
    the timeline are known as keyframes. To do what I just described, we need one
    more keyframe, right in the center of the timeline. Click on the top of the timeline
    (where the numbers appear) to move the timeline to the **0:30** mark. Then, select
    the **Add keyframe** button to add a new keyframe:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了通过缩放实现脉动效果，我们希望按钮从其正常大小开始，变大，然后回到正常大小。时间线上出现的钻石被称为关键帧。为了做到我刚才描述的，我们需要在时间线的正中央再添加一个关键帧。点击时间线顶部（数字出现的地方）将时间线移动到
    **0:30** 标记处。然后，选择 **添加关键帧** 按钮来添加一个新的关键帧：
- en: '![Figure 9.46: Adding an extra keyframe to the timeline](img/Figure_09.46_B18327.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图9.46：向时间线添加额外关键帧](img/Figure_09.46_B18327.jpg)'
- en: 'Figure 9.46: Adding an extra keyframe to the timeline'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.46：向时间线添加额外关键帧
- en: 'Expand the **Scale** property by selecting the arrow to its left. You will
    see that if you select any of the keyframes, the number **1** appears next to
    all three scaling directions. This indicates that the scale at that frame is 100%
    (or its normal scale):'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择左侧的箭头来展开 **Scale** 属性。您会看到，如果您选择任何关键帧，三个缩放方向旁边都会出现数字 **1**。这表明该帧的缩放为 100%（或其正常缩放）：
- en: '![Figure 9.47: Expanding the Scale property of the Play Button](img/Figure_09.47_B18327.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![图9.47：展开播放按钮的缩放属性](img/Figure_09.47_B18327.jpg)'
- en: 'Figure 9.47: Expanding the Scale property of the Play Button'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.47：展开播放按钮的缩放属性
- en: Select the keyframe in the center. Change the number `1.2` by clicking on the
    number **1** and typing the new value. You can press the Play button in the animation
    window to preview your animation. You will see that the button now pulsates in
    the scene.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择中间的关键帧。通过点击数字 **1** 并输入新值来更改数字 `1.2`。您可以在动画窗口中按下播放按钮来预览您的动画。您会看到按钮现在在场景中脉动。
- en: Your button should now pulsate when you play the game (and will not turn red
    any longer). Note that it does not pulsate immediately, because the button will
    only pulsate when it is in its normal state. Since we have it set to **First Selected**,
    it is selected on start. To remove the selection, simply click anywhere in your
    scene outside of the button or navigate away using your keyboard. Once the button
    is no longer selected, it should begin pulsating.
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当您播放游戏时，您的按钮现在应该会脉动（并且不会再变红）。请注意，它不会立即脉动，因为按钮只有在正常状态下才会脉动。由于我们将其设置为 **首先选中**，它在开始时就会被选中。要取消选择，只需在按钮外的场景中单击任何位置或使用键盘导航离开。一旦按钮不再被选中，它应该开始脉动。
- en: Let’s bring back the red selection since it made it easy to tell when the button
    was selected (even if it was unattractive). From the animation list dropdown menu,
    select the **Selected** animation.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们恢复红色选择，因为它使得判断按钮是否被选中变得容易（即使它不够吸引人）。从动画列表下拉菜单中选择 **Selected** 动画。
- en: '![Figure 9.48: Selecting the Selected animation for the Play Button](img/Figure_09.48_B18327.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图9.48：为播放按钮选择Selected动画](img/Figure_09.48_B18327.jpg)'
- en: 'Figure 9.48: Selecting the Selected animation for the Play Button'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.48：为播放按钮选择Selected动画
- en: Select the **Add Property** button, then select **Image** | **Color**.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **添加属性** 按钮，然后选择 **图像** | **颜色**。
- en: '![Figure 9.49: Adding the Color property to the Play Button timeline](img/Figure_09.49_B18327.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图9.49：将颜色属性添加到播放按钮时间线](img/Figure_09.49_B18327.jpg)'
- en: 'Figure 9.49: Adding the Color property to the Play Button timeline'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.49：将颜色属性添加到播放按钮时间线
- en: Delete the second keyframe by selecting it and hitting the *Delete* key.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择第二个关键帧并按下 *Delete* 键来删除它。
- en: Change the `1`, `0`, `0`, and `1`, respectively, on the remaining keyframe.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分别将剩余关键帧上的 `1`、`0`、`0` 和 `1` 进行更改。
- en: '![Figure 9.50: Adjusting the Color property of the Play Button](img/Figure_09.50_B18327.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.50：调整播放按钮的颜色属性](img/Figure_09.50_B18327.jpg)'
- en: 'Figure 9.50: Adjusting the Color property of the Play Button'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.50：调整播放按钮的颜色属性
- en: Now when you play the game, the `Play Button` should pulsate when it is not
    selected and change to red when it is.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你玩游戏时，`播放按钮`在没有被选中时应该会闪烁，当被选中时变为红色。
- en: That marks the end of the examples concerning Buttons, but we will continue
    to use them in future chapters.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这标志着关于按钮的示例的结束，但我们将继续在未来的章节中使用它们。
- en: Summary
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Once you learn how to work with the Event System, working with buttons is an
    easy extension. Buttons are the most common interactive UI element, so having
    a good grasp on them is essential to effective UI development. Setting them up
    so that they function when clicked on is only half the process, though. You want
    to also ensure that you have your button navigation set up properly if you will
    be developing for PC, Mac, or console.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你学会了如何使用事件系统，使用按钮就只是个简单的扩展。按钮是最常见的交互式 UI 元素，因此掌握它们对于有效的 UI 开发至关重要。虽然将它们设置成点击时能工作只是过程的一半。如果你将为
    PC、Mac 或控制台开发，你还需要确保你的按钮导航设置正确。
- en: We’re not done with Buttons! We’ll be working with them throughout this book.
    Once we explore the Image component more thoroughly, we will cover more interesting
    button implementations and transitions.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成按钮！我们将在这本书的整个过程中使用它们。一旦我们更深入地探索了图像组件，我们将介绍更多有趣的按钮实现和过渡。
- en: In the next chapter, we’ll cover the UI Text component!
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍 UI 文本组件！
