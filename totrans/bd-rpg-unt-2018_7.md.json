["```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\npublic class ActiveInventoryItemUi : MonoBehaviour\n{\npublic InventoryItem item;\npublic Image imgActiveItem;\npublic Text txtActiveItem;\n}\n}\n```", "```cs\nusing UnityEngine.EventSystems;\nnamespace com.noorcon.rpg2e\n{\npublic class ActiveSpecialItemUi : EventTrigger\n{\npublic override void OnPointerClick(PointerEventData data)\n{\nInventoryItem iia =\ngameObject.GetComponent<ActiveInventoryItemUi>().item;\nswitch (iia.Category)\n{\ncase BaseItem.ItemCatrgory.Health:\n{\n// add the item to the special items panel\nGameMaster.instance.Ui.ApplySpecialInventoryItem(iia);\nDestroy(gameObject);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Potion:\n{\nbreak;\n}\n}\n}\n}\n}\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\npublic class HudElementUi : MonoBehaviour\n{\npublic Image imgHealthBar;\npublic Image imgManaBar;\npublic GameObject activeInventoryItem;\npublic GameObject activeSpecialItem;\npublic Transform panelActiveInventoryItems;\npublic Transform panelActiveSpecialItems;\n}\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\n[Serializable]\npublic class InventorySystem\n{\n[SerializeField]\nprivate List<InventoryItem> weapons\n= new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> armour\n= new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> clothing\n= new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> health\n= new List<InventoryItem>();\n[SerializeField]\nprivate List<InventoryItem> potion\n= new List<InventoryItem>();\npublic List<InventoryItem> Weapons\n{\nget { return weapons; }\n}\npublic List<InventoryItem> Armour\n{\nget { return armour; }\n}\npublic List<InventoryItem> Clothing\n{\nget { return clothing; }\n}\npublic List<InventoryItem> Health\n{\nget { return health; }\n}\npublic List<InventoryItem> Potion\n{\nget { return potion; }\n}\nprivate InventoryItem selectedWeapon;\nprivate InventoryItem selectedArmour;\npublic InventoryItem SelectedWeapon\n{\nget { return selectedWeapon; }\nset { selectedWeapon = value; }\n}\npublic InventoryItem SelectedArmour\n{\nget { return selectedArmour; }\nset { selectedArmour = value; }\n}\npublic InventorySystem()\n{\nClearInventory();\n}\n```", "```cs\npublic void ClearInventory()\n{\nweapons.Clear();\narmour.Clear();\nclothing.Clear();\nhealth.Clear();\npotion.Clear();\n}\n// this function will add an inventory item\npublic void AddItem(InventoryItem item)\n{\nswitch (item.Category)\n{\ncase BaseItem.ItemCatrgory.Armour:\n{\narmour.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Clothing:\n{\nclothing.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Health:\n{\nhealth.Add(item);\nGameMaster.instance.Ui.AddSpecialInventoryItem(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Potion:\n{\npotion.Add(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Weapon:\n{\nweapons.Add(item);\nbreak;\n}\n}\n}\n```", "```cs\n// this function will remove an inventory item\npublic void DeleteItem(InventoryItem item)\n{\nswitch (item.Category)\n{\ncase BaseItem.ItemCatrgory.Armour:\n{\narmour.Remove(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Clothing:\n{\nclothing.Remove(item);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Health:\n{\n// let's find the item and mark it for removal\nInventoryItem tmp = null;\nforeach (InventoryItem i in this.health)\n{\nif (item.Category.Equals(i.Category)\n&& item.Name.Equals(i.Name)\n&& item.Strength.Equals(i.Strength))\n{\ntmp = i;\n}\n}\nhealth.Remove(tmp);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Potion:\n{\n// let's find the item and mark it for removal\nInventoryItem tmp = null;\nforeach (InventoryItem i in this.health)\n{\nif (item.Category.Equals(i.Category)\n&& item.Name.Equals(i.Name)\n&& item.Strength.Equals(i.Strength))\n{\ntmp = i;\n}\n}\npotion.Remove(tmp);\nbreak;\n}\ncase BaseItem.ItemCatrgory.Weapon:\n{\nweapons.Remove(item);\nbreak;\n}\n}\n}\n}\n}\n```", "```cs\nusing System;\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\npublic class UiController : MonoBehaviour\n{\n[Header(\"Main Menu Canvas\")]\npublic RectTransform MainMenuCanvas;\n[Header(\"Settings Window\")]\npublic RectTransform OptionsPanel;\npublic Slider ControlMainVolume;\npublic Slider ControlFXVolume;\n[Header(\"Inventory Window\")]\npublic RectTransform InventoryCanvas;\n[Tooltip(\"root for inventory items\")]\npublic Transform InventoryPanelItem;\n[Tooltip(\"prefab representing invenotry item UI\")]\npublic GameObject InventoryItemElement;\n[Header(\"HUD Window\")]\npublic RectTransform HudCanvas;\npublic HudElementUi HudUi;\n...\n\npublic void DisplaySettings()\n{\nGameMaster.instance.DisplaySettings = !GameMaster.instance.DisplaySettings;\nOptionsPanel.gameObject.SetActive(GameMaster.instance.DisplaySettings);\n}\npublic void MainVolume()\nGameMaster.instance.MasterVolume(ControlMainVolume.value);\n}\npublic void FXVolume()\n{\nGameMaster.instance.SoundFxVolume(ControlFXVolume.value);\n}\n#region INVENTORY UI FUNCTIONS\npublic void DisplayInventory()\n{\nInventoryCanvas.gameObject.SetActive(GameMaster.instance.DisplayInventory);\nDebug.Log(\"Display Inventory Function\");\n}\npublic void DisplayWeaponsCategory()\n{\nif (GameMaster.instance.DisplayInventory)\n{\nClearInventoryPanelItems();\nforeach (InventoryItem item in GameMaster.instance.Inventory.Weapons)\n{\nGameObject newItem\n= Instantiate(InventoryItemElement) as GameObject;\nInventoryItemUi InventoryItemControl\n= newItem.GetComponent<InventoryItemUi>();\nInventoryItemControl.ItemElementText.text =\nstring.Format(\"Name: {0}, Description: {1}, Strength: {2}, Weight:\n{3}\",\nitem.Name,\nitem.Description,\nitem.Strength,\nitem.Weight);\nInventoryItemControl.Item = item;\n// button triggers\nInventoryItemControl.AddButton.GetComponent<Button>().onClick.AddListener(() =>\n{\nDebug.Log(string.Format(\"ADD button for {0}\",\nInventoryItemControl.ItemElementText.text));\n// apply selected weapon\nGameMaster.instance.PlayerCharacterData.SelectedWeapon\n= (PlayerCharacter.WeaponType)Enum.Parse(\ntypeof(PlayerCharacter.WeaponType), InventoryItemControl.Item.Name);\nGameMaster.instance.PlayerWeaponChanged();\nAddActiveInventoryItem(InventoryItemControl.Item);\n});\nInventoryItemControl.DeleteButton.GetComponent<Button>().onClick.AddListener(() =>\n{\nDebug.Log(string.Format(\"DELETE button for {0}\",\nInventoryItemControl.ItemElementText.text));\nDestroy(newItem);\n});\nnewItem.transform.SetParent(InventoryPanelItem);\n}\n}\n}\n```", "```cs\npublic void DisplayArmourCategory()\n{\nif (GameMaster.instance.DisplayInventory)\n{\nClearInventoryPanelItems();\nforeach (InventoryItem item in GameMaster.instance.Inventory.Armour)\n{\nGameObject newItem\n= Instantiate(InventoryItemElement) as GameObject;\nInventoryItemUi InventoryItemControl\n= newItem.GetComponent<InventoryItemUi>();\nInventoryItemControl.ItemElementText.text =\nstring.Format(\"Name: {0}, Description: {1}, Strength: {2}, Weight:\n{3}\",\nitem.Name,\nitem.Description,\nitem.Strength,\nitem.Weight);\nInventoryItemControl.Item = item;\n// button triggers\nInventoryItemControl.AddButton.GetComponent<Button>().onClick.AddListener(() =>\n{\nDebug.Log(string.Format(\"ADD button for {0}\",\nInventoryItemControl.ItemElementText.text));\n// apply selected weapon\nGameMaster.instance.PlayerCharacterData.SelectedArmour = InventoryItemControl.Item;\nGameMaster.instance.PlayerArmourChanged(InventoryItemControl.Item);\nAddActiveInventoryItem(InventoryItemControl.Item);\n});\nInventoryItemControl.DeleteButton.GetComponent<Button>().onClick.AddListener(() =>\n{\nDebug.Log(string.Format(\"DELETE button for {0}\",\nInventoryItemControl.ItemElementText.text));\nDestroy(newItem);\n});\nnewItem.transform.SetParent(InventoryPanelItem);\n}\n}\n}\n...\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.UI;\nnamespace com.noorcon.rpg2e\n{\npublic class NpcStatusUi : MonoBehaviour\n{\npublic Image imgHealthBar;\npublic Image imgManaBar;\n}\n}\n```", "```cs\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\npublic class NpcAgent : MonoBehaviour\n{\n[SerializeField]\npublic Npc NpcData;\n[SerializeField]\npublic Transform CanvasAttachmentPoint;\n[SerializeField]\npublic Canvas CanvasNpcStats;\n[SerializeField]\npublic GameObject CanvasNpcStatsPrefab;\npublic void SetHealthValue(float value)\n{\nCanvasNpcStats.GetComponent<NpcStatusUi>().imgHealthBar.fillAmount =\nvalue;\n}\npublic void SetStrengthValue(float value)\n{\nCanvasNpcStats.GetComponent<NpcStatusUi>().imgManaBar.fillAmount =\nvalue;\n}\n//// Use this for initialization\nvoid Start()\n{\n// let's go ahead and instantiate our stats\nGameObject tmpCanvasGO = Instantiate(\nCanvasNpcStatsPrefab,\nnew Vector3(CanvasAttachmentPoint.position.x, 2, 0),\nCanvasNpcStatsPrefab.transform.rotation) as GameObject;\ntmpCanvasGO.transform.SetParent(CanvasAttachmentPoint, false);\nCanvasNpcStats = tmpCanvasGO.GetComponent<Canvas>();\nCanvasNpcStats.GetComponent<NpcStatusUi>().imgHealthBar.fillAmount = 1.0f;\nCanvasNpcStats.GetComponent<NpcStatusUi>().imgManaBar.fillAmount = 1.0f;\nNpc tmp = new Npc();\ntmp.Tag = \"Enemy\";\ntmp.CharacterGameObject = transform.gameObject;\ntmp.Name = \"B1\";\ntmp.Health = 100.0f;\ntmp.Defense= 50.0f;\ntmp.Description = \"The Beast\";\ntmp.Dexterity = 33.0f;\ntmp.Intelligence = 80.0f;\ntmp.Strength = 60.0f;\nNpcData = tmp;\n}\n//// Update is called once per frame\nvoid Update()\n{\nif (NpcData.Health < 0.0f)\n{\nNpcData.Health = 0.0f;\ntransform.GetComponent<NpcBarbarianMovement>().die = true;\n}\n}\n}\n}\n```", "```cs\nvoid FixedUpdate()\n{\n// The Inputs are defined in the Input Manager\n// get value for horizontal axis\nh = Input.GetAxis(\"Horizontal\");\n// get value for vertical axis\nv = Input.GetAxis(\"Vertical\");\nspeed = new Vector2(h, v).sqrMagnitude;\nanimator.SetFloat(\"Speed\", speed);\nanimator.SetFloat(\"Horizontal\", h);\nanimator.SetFloat(\"Vertical\", v);\nif (animator.GetFloat(\"Attack1\") == 1.0f)\n{\nGameMaster.instance.AttackEnemy();\n}\n}\n```", "```cs\n// for each level/scene that has been loaded\n// do some of the preparation work\nprivate void OnLevelWasLoaded(int level)\n{\ninstance.LevelController.OnLevelWasLoaded();\n// find all NPC GameObjects of Enemy type\nif (GameObject.FindGameObjectsWithTag(\"Enemy\").Length > 0)\n{\nvar tmpGONPCEnemy = GameObject.FindGameObjectsWithTag(\"Enemy\");\ninstance.NpcEnemyListGameObjects.Clear();\nforeach (GameObject goTmpNPCEnemy in tmpGONPCEnemy)\n{\ninstance.NpcEnemyListGameObjects.Add(goTmpNPCEnemy);\n}\n}\n}\npublic void AttackEnemy()\n{\nNpc npc =\ninstance.ClosestNpcEnemy.GetComponent<NpcAgent>().NpcData;\nnpc.Health -= 1;\n}\n```", "```cs\n[SerializeField]\nprivate float health;\npublic float Health\n{\nget { return health; }\nset\n{\nhealth = value;\nif (Tag.Equals(\"Player\"))\n{\nif (GameMaster.instance.Ui.HudUi != null)\n{\nGameMaster.instance.Ui.HudUi.imgHealthBar.fillAmount\n= health / 100.0f;\n}\n}\nelse\n{\nCharacterGameObject.GetComponent<NpcAgent>().SetHealthValue(health / 100.0f);\n}\n}\n}\n```", "```cs\nvoid Awake()\n{\nPlayerCharacter tmp = new PlayerCharacter();\ntmp.Name = \"Maximilian\";\ntmp.Tag = transform.gameObject.tag;\ntmp.CharacterGameObject = transform.gameObject;\ntmp.Health = 100.0f;\ntmp.Defense = 50.0f;\ntmp.Description = \"Our Hero\";\ntmp.Dexterity = 33.0f;\ntmp.Intelligence = 80.0f;\ntmp.Strength = 60.0f;\nplayerCharacterData = tmp;\n}\nAwake() from the PlayerAgent.cs script. You will need to perform the same for the NpcAgent.cs script; see the following code:\n```", "```cs\nvoid Start()\n{\n// let's go ahead and instantiate our stats\nGameObject tmpCanvasGO = Instantiate(\nCanvasNpcStatsPrefab,\nnew Vector3(CanvasAttachmentPoint.position.x, 2, 0),\nCanvasNpcStatsPrefab.transform.rotation) as GameObject;\ntmpCanvasGO.transform.SetParent(CanvasAttachmentPoint, false);\nCanvasNpcStats = tmpCanvasGO.GetComponent<Canvas>();\nCanvasNpcStats.GetComponent<NpcStatusUi>().imgHealthBar.fillAmount = 1.0f;\nCanvasNpcStats.GetComponent<NpcStatusUi>().imgManaBar.fillAmount = 1.0f;\nNpc tmp = new Npc();\ntmp.Tag = \"Enemy\";\ntmp.CharacterGameObject = transform.gameObject;\ntmp.Name = \"B1\";\ntmp.Health = 100.0f;\ntmp.Defense= 50.0f;\ntmp.Description = \"The Beast\";\ntmp.Dexterity = 33.0f;\ntmp.Intelligence = 80.0f;\ntmp.Strength = 60.0f;\nNpcData = tmp;\n}\n```", "```cs\nusing UnityEngine;\nnamespace com.noorcon.rpg2e\n{\npublic class BarbarianCharacterController : MonoBehaviour\n{\npublic Animator animator;\npublic float directionDampTime;\npublic float speed = 6.0f;\npublic float h = 0.0f;\npublic float v = 0.0f;\nbool attack = false;\nbool punch = false;\nbool run = false;\nbool jump = false;\n[HideInInspector]\npublic bool die = false;\nbool dead = false;\npublic bool EnemyInSight;\npublic GameObject EnemyToAttack;\nQuaternion StartingAttackAngle = Quaternion.AngleAxis(-25, Vector3.up);\nQuaternion StepAttackAngle = Quaternion.AngleAxis(5, Vector3.up);\nVector3 AttackDistance = new Vector3(0, 0, 2);\n// Use this for initialization\nvoid Start()\n{\nanimator = GetComponent<Animator>() as Animator;\nEnemyInSight = false;\n}\n...\nvoid FixedUpdate()\n{\n// The Inputs are defined in the Input Manager\n// get value for horizontal axis\nh = Input.GetAxis(\"Horizontal\");\n// get value for vertical axis\nv = Input.GetAxis(\"Vertical\");\nspeed = new Vector2(h, v).sqrMagnitude;\nanimator.SetFloat(\"Speed\", speed);\nanimator.SetFloat(\"Horizontal\", h);\nanimator.SetFloat(\"Vertical\", v);\n#region used for attack range\nRaycastHit hitAttack;\nvar angleAttack = transform.rotation * StartingAttackAngle;\nvar directionAttack = angleAttack * AttackDistance;\nvar posAttack = transform.position + Vector3.up;\nfor (var i = 0; i < 10; i++)\n{\nDebug.DrawRay(posAttack, directionAttack, Color.yellow);\nif (Physics.Raycast(posAttack, directionAttack, out hitAttack, 1.0f))\n{\nvar enemy = hitAttack.collider.GetComponent<NpcAgent>();\nif (enemy)\n{\n//Enemy was seen\nEnemyInSight = true;\nEnemyToAttack = hitAttack.collider.gameObject;\nGameMaster.instance.ClosestNpcEnemy = hitAttack.collider.gameObject;\n}\nelse\n{\nthis.EnemyInSight = false;\n}\n}\ndirectionAttack = StepAttackAngle * directionAttack;\n}\n#endregion\nif (EnemyInSight)\n{\nif (animator.GetFloat(\"Attack1\") == 1.0f)\n{\nPlayerCharacter pc\n= gameObject.GetComponent<PlayerAgent>().playerCharacterData;\nfloat impact = (pc.Strength + pc.Health) / 100.0f;\nGameMaster.instance.AttackEnemy(impact);\n}\n}\n}\n}\n}\n```", "```cs\n[SerializeField]\nprivate float health;\npublic float Health\n{\nget { return health; }\nset\n{\nhealth = value;\nif (Tag.Equals(\"Player\"))\n{\nif (GameMaster.instance.Ui.HudUi != null)\n{\nGameMaster.instance.Ui.HudUi.imgHealthBar.fillAmount\n= health / 100.0f;\n}\n}\nelse\n{\nCharacterGameObject.GetComponent<NpcAgent>().SetHealthValue(health / 100.0f);\n}\n}\n}\n```"]