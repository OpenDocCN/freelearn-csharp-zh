["```cs\npublic Color idleColor = new Color(1f, 0f, 0f, 0.5f);\npublic Color occupiedColor = new Color(1f, 1f, 0f, 0.5f);\npublic Color interactColor = new Color(0f, 1f, 0f, 0.5f); \n```", "```cs\nvoid Update()\n    {\n        interactPressed = interactInput.action.ReadValue<float>() > 0f;\n    } \n```", "```cs\nvoid OnTriggerEnter(Collider other)\n{\n   MyvariThirdPersonMovement player = other.GetComponent<MyvariThirdPersonMovement>();\n   if (player != null)\n   {\n      mat.SetColor(\"_BaseColor\", occupiedColor);\n   }\n} \n```", "```cs\nvoid OnTriggerStay(Collider other)\n    {\n        MyvariThirdPersonMovement player = other.\nGetComponent<MyvariThirdPersonMovement>();\n        if (player != null)\n        {\n            if (interactPressed)\n            {\n                mat.SetColor(\"_BaseColor\", interactColor);\n                OnInteract?.Invoke();\n                Debug.Log($\"Interacted with {gameObject.name}\");\n                if (disableOnInteract)\n                {\n                    this.enabled = false;\n                    this.GetComponent<BoxCollider>().enabled = false;\n                }\n            }\n        }\n    } \n```", "```cs\nvoid Awake()\n{\n   leftTrigger.OnInteract.AddListener(OnLeftTriggerInteract);\n   rightTrigger.OnInteract.AddListener(OnRightTriggerInteract);\n}\nvoid OnDestroy()\n{\n   leftTrigger.OnInteract.RemoveListener(OnLeftTriggerInteract);\n   rightTrigger.OnInteract.RemoveListener(OnRightTriggerInteract);\n} \n```", "```cs\nvoid OnLeftTriggerInteract()\n{\n   leftTriggerFired = true;\n   if (rightTriggerFired)\n   {\n      stairsRaised = true;\n      OnStairsRaised?.Invoke();\n      stairsBlocker.SetActive(false);\n      Debug.Log(\"RAISE STAIRS HERE\");\n   }\n} \n```", "```cs\npublic void SetColor(Color color)\n{\n    meshRenderer.material.color = color;\n} \n```", "```cs\npublic enum FirstPuzzleTriggerType\n{\n    Outer = 0,\n    Middle,\n    Inner\n}\npublic enum FirstPuzzleTriggerDirection\n{\n    Clockwise = 0,\n    CounterClockwise\n} \n```", "```cs\nvoid Start()\n    {\n        // Cache references to the trigger volumes and the player\n        triggers = GetComponentsInChildren<FirstPuzzleTrigger>();\n        playerController = FindObjectOfType<CharacterController>();\n        // Random starting positions\n        outerPillars.eulerAngles = new Vector3(0f, Random.Range(-180f, 180f), 0f);\n        middlePillars.eulerAngles = new Vector3(0f, Random.Range(-180f, 180f), 0f);\n        innerPillars.eulerAngles = new Vector3(0f, Random.Range(-180f, 180f), 0f);\n        // Starting center spire position\n        centerSpire.position = new Vector3(centerSpire.position.x, centerSpireStartHeight, centerSpire.position.z);\n    } \n```", "```cs\nouterAligned = CheckAlignment(outerPillars, correctRotationOuter); \n```", "```cs\nbool CheckAlignment(Transform pillarGroup, float correctRotation)\n{\n    return Mathf.Abs(pillarGroup.eulerAngles.y - correctRotation) < correctThreshold;\n} \n```", "```cs\n victoryStartTime = Time.time;\n        outerStartVictory = outerPillars.eulerAngles;\n        middleStartVictory = middlePillars.eulerAngles;\n        innerStartVictory = innerPillars.eulerAngles; \n```", "```cs\nouterPillars.eulerAngles = Vector3.Lerp(outerStartVictory, outerEndVictory, lerpVal); \n```", "```cs\npublic void RotatePillar(FirstPuzzleTrigger trigger)\n{\n    // Rotate pillars\n    float rot = (trigger.triggerDirection == FirstPuzzleTriggerDirection.Clockwise ? pushSpeed : -pushSpeed) * Time.deltaTime;\n    trigger.transform.parent.parent.Rotate(Vector3.up, rot);\n    // Keep player locked in trigger volume, facing the pillar. We need to disable the CharacterController here\n    // when setting a new position, otherwise it will overwrite the new \nposition with the player's current position\n    playerController.enabled = false;\n    float origY = playerController.transform.position.y;\n    playerController.transform.position = new Vector3(trigger.transform.position.x, origY, trigger.transform.position.z);\n    playerController.transform.forward = trigger.transform.forward;\n    playerController.enabled = true;\n} \n```", "```cs\nVoid SetPlayerEnabled(bool enabled)\n{\nvar cams = playerRoot.GetComponentsInChildren<CinemachineVirtualCamera>(true);\n  foreach(var cam in cams)\n  {\n     cam.gameObject.SetActive(enable);\n   }\n   playerRoot.GetComponentInChildren<MyvariThirdPersonMovement>().enabled = enable;\n} \n```"]