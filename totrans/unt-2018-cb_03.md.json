["```cs\nusing UnityEngine; \nusing System.Collections; \n\npublic class PlayerMove : MonoBehaviour { \n  public float speed = 10; \n  private Rigidbody2D rigidBody2D;\n  private Vector2 newVelocity;\n\nvoid Awake(){ \nrigidBody2D = GetComponent<Rigidbody2D>(); \n} \n\nvoid Update() {\n  float xMove = Input.GetAxis(\"Horizontal\");\n  float yMove = Input.GetAxis(\"Vertical\");\n\n  float xSpeed = xMove * speed;\n  float ySpeed = yMove * speed;\n\n  newVelocity = new Vector2(xSpeed, ySpeed);\n}\n\nvoid FixedUpdate() {\n  rigidBody2D.velocity = newVelocity;\n}\n\n}\n```", "```cs\nusing UnityEngine; \n\npublic class PlayerInventory : MonoBehaviour { \n   private PlayerInventoryDisplay playerInventoryDisplay; \n   private bool carryingStar = false;  \n\n   void Awake() { \n         playerInventoryDisplay = GetComponent<PlayerInventoryDisplay>(); \n   } \n\n   void Start() { \n         playerInventoryDisplay.OnChangeCarryingStar( carryingStar); \n   }  \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if (hit.CompareTag(\"Star\")) { \n               carryingStar = true; \n               playerInventoryDisplay.OnChangeCarryingStar( carryingStar); \n               Destroy(hit.gameObject); \n         } \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI;\n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour  { \n   public Text starText; \n   public void OnChangeCarryingStar(bool carryingStar) { \n         string starMessage = \"no star :-(\"; \n         if(carryingStar) \n               starMessage = \"Carrying star :-)\"; \n         starText.text = starMessage; \n   } \n} \n```", "```cs\nusing UnityEngine; \npublic class PlayerInventory : MonoBehaviour { \n   private PlayerInventoryDisplay playerInventoryDisplay; \n   private int totalStars = 0; \n\n   void Awake() { \n         playerInventoryDisplay = GetComponent<PlayerInventoryDisplay>(); \n   }  \n\n   void Start() { \n        playerInventoryDisplay.OnChangeStarTotal(totalStars); \n   } \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if (hit.CompareTag(\"Star\")) { \n            totalStars++; \n            playerInventoryDisplay.OnChangeCarryingStar(totalStars); \n            Destroy(hit.gameObject); \n         } \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\n[RequireComponent(typeof(PlayerInventoryTotal))] \npublic class PlayerInventoryDisplay : MonoBehaviour { \n   public Text starText; \n   public void OnChangeStarTotal(int numStars) { \n         string starMessage = \"total stars = \" + numStars; \n         starText.text = starMessage; \n   } \n}\n```", "```cs\nusing UnityEngine.UI; \npublic class PlayerInventoryCombined : MonoBehaviour { \n   public Text starText; \n   private bool carryingStar = false; \n\n   void Start() { \n         UpdateStarText(); \n   } \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if (hit.CompareTag(\"Star\")){ \n               carryingStar = true; \n               UpdateStarText(); \n               Destroy(hit.gameObject); \n         } \n   } \n\n   private void UpdateStarText() { \n         string starMessage = \"no star :-(\"; \n         if (carryingStar) \n            starMessage = \"Carrying star :-)\"; \n         starText.text = starMessage; \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI;\n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour  { \n   public Image imageStarGO; \n   public Sprite iconNoStar; \n   public Sprite iconStar;\n\n   public void OnChangeCarryingStar(bool carryingStar) { \n        if (carryingStar) \n            imageStarGO.sprite = iconStar; \n        else \n            imageStarGO.sprite = iconNoStar; \n    } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class PlayerInventory : MonoBehaviour { \n   private PlayerInventoryDisplay playerInventoryDisplay; \n   private int totalStars = 0; \n\n   void Awake() { \n         playerInventoryDisplay = GetComponent<PlayerInventoryDisplay>(); \n   }  \n\n   void Start() { \n        playerInventoryDisplay.OnChangeStarTotal(totalStars); \n   }  \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if (hit.CompareTag(\"Star\")) { \n            totalStars++; \n            playerInventoryDisplay.OnChangeCarryingStar(totalStars); \n            Destroy(hit.gameObject); \n         } \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \n\npublic class PlayerInventoryDisplay : MonoBehaviour { \n    public Image[] starPlaceholders; \n    public Sprite iconStarYellow; \n    public Sprite iconStarGrey;\n\n    public void OnChangeStarTotal(int starTotal){ \n       for (int i = 0;i < starPlaceholders.Length; ++i){ \n          if (i < starTotal) \n              starPlaceholders[i].sprite = iconStarYellow; \n          else \n             starPlaceholders[i].sprite = iconStarGrey; \n        } \n    } \n}\n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour { \n   public Image iconStarsYellow; \n\n   public void OnChangeStarTotal(int starTotal) { \n         float newWidth = 100 * starTotal; \n        iconStarsYellow.rectTransform.SetSizeWithCurrentAnchors( RectTransform.Axis.Horizontal, newWidth ); \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \n\npublic class PickupUI : MonoBehaviour { \n   public GameObject iconColor; \n   public GameObject iconGrey; \n\n   void Awake() { \n         DisplayEmpty(); \n   }  \n\n   public void DisplayColorIcon() { \n         iconColor.SetActive(true); \n         iconGrey.SetActive(false); \n   }  \n\n   public void DisplayGreyIcon() { \n         iconColor.SetActive(false); \n         iconGrey.SetActive(true); \n   } \n\n   public void DisplayEmpty() { \n         iconColor.SetActive(false); \n         iconGrey.SetActive(false); \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour  { \n   public PickupUI[] slots = new PickupUI[1]; \n   public void OnChangeStarTotal(int starTotal) { \n       int numInventorySlots = slots.Length; \n       for(int i = 0; i < numInventorySlots; i++){ \n             PickupUI slot = slots[i]; \n             if(i < starTotal) \n                   slot.DisplayColorIcon(); \n             else \n                   slot.DisplayGreyIcon(); \n       } \n   } \n} \n```", "```cs\nusing UnityEngine; \n\npublic class PlayerInventoryKeys : MonoBehaviour { \n   private int starTotal = 0; \n   private int keyTotal = 0; \n   private PlayerInventoryDisplayKeys playerInventoryDisplay; \n\n   void Awake() { \n         playerInventoryDisplay = GetComponent<PlayerInventoryDisplayKeys>(); \n   } \n\n   void Start() { \n         playerInventoryDisplay.OnChangeStarTotal(starTotal); \n         playerInventoryDisplay.OnChangeKeyTotal(keyTotal); \n   } \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if(hit.CompareTag(\"Star\")){ \n               AddStar(); \n               Destroy(hit.gameObject); \n         } \n\n         if(hit.CompareTag(\"Key\")){ \n               AddKey(); \n               Destroy(hit.gameObject); \n         } \n   } \n\n   private void AddStar() { \n         starTotal++; \n         playerInventoryDisplay.OnChangeStarTotal(starTotal); \n   } \n\n   private void AddKey() { \n         keyTotal++; \n         playerInventoryDisplay.OnChangeKeyTotal(keyTotal); \n   } \n} \n```", "```cs\nusing UnityEngine; \n\n[RequireComponent(typeof(PlayerInventoryKeys))] \npublic class PlayerInventoryDisplayKeys : MonoBehaviour  { \n   public PickupUI[] slotsStars = new PickupUI[1]; \n   public PickupUI[] slotsKeys = new PickupUI[1]; \n\n   public void OnChangeStarTotal(int starTotal) { \n         int numInventorySlots = slotsStars.Length; \n         for(int i = 0; i < numInventorySlots; i++){ \n               PickupUI slot = slotsStars[i]; \n               if(i < starTotal) \n                     slot.DisplayColorIcon(); \n               else \n                     slot.DisplayGreyIcon(); \n         } \n   } \n\n   public void OnChangeKeyTotal(int keyTotal) { \n         int numInventorySlots = slotsKeys.Length; \n         for(int i = 0; i < numInventorySlots; i++){ \n               PickupUI slot = slotsKeys[i]; \n               if(i < keyTotal) \n                     slot.DisplayColorIcon(); \n               else \n                     slot.DisplayGreyIcon(); \n         } \n   } \n}\n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour  { \n   const int NUM_INVENTORY_SLOTS = 5; \n   public GameObject panelSlotGrid; \n   public GameObject starSlotPrefab; \n   private PickupUI[] slots = new PickupUI[NUM_INVENTORY_SLOTS]; \n\n   void Awake() {\n         float width = 50 + (NUM_INVENTORY_SLOTS * 50); \n         panelSlotGrid.GetComponent<RectTransform>().SetSizeWithCurrentAnchors( RectTransform.Axis.Horizontal, width ); \n\n         for(int i=0; i < NUM_INVENTORY_SLOTS; i++){ \n               GameObject starSlotGO = (GameObject) \n               Instantiate(starSlotPrefab); \n               starSlotGO.transform.SetParent(panelSlotGrid.transform); \n               starSlotGO.transform.localScale = new Vector3(1,1,1); \n               slots[i] = starSlotGO.GetComponent<PickupUI>(); \n         } \n   } \n\n   public void OnChangeStarTotal(int starTotal) { \n         for(int i = 0; i < NUM_INVENTORY_SLOTS; i++){ \n               PickupUI slot = slots[i]; \n               if(i < starTotal) \n                     slot.DisplayColorIcon(); \n               else \n                     slot.DisplayGreyIcon(); \n         } \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour  { \n   private int numInventorySlots; \n   private PickupUI[] slots; \n   public GameObject panelSlotGrid; \n   public GameObject starSlotPrefab; \n\n   void Awake() { \n         GameObject[] gameObjectsTaggedStar = GameObject.FindGameObjectsWithTag(\"Star\"); \n         numInventorySlots = gameObjectsTaggedStar.Length; \n         slots = new PickupUI[numInventorySlots]; \n         float width = 50 + (numInventorySlots * 50); \n         panelSlotGrid.GetComponent<RectTransform>().SetSizeWithCurrentAnchors( RectTransform.Axis.Horizontal, width);  \n\n         for(int i=0; i < numInventorySlots; i++){ \n               GameObject starSlotGO = (GameObject) \n               Instantiate(starSlotPrefab); \n               starSlotGO.transform.SetParent(panelSlotGrid.transform); \n               starSlotGO.transform.localScale = new Vector3(1,1,1); \n               slots[i] = starSlotGO.GetComponent<PickupUI>(); \n         } \n   } \n\n   public void OnChangeStarTotal(int starTotal) { \n         for(int i = 0; i < numInventorySlots; i++){ \n               PickupUI slot = slots[i]; \n               if(i < starTotal) \n                     slot.DisplayColorIcon(); \n               else \n                     slot.DisplayGreyIcon(); \n         } \n   } \n} \n```", "```cs\n// panelSlotGrid.GetComponent<RectTransform>().SetSizeWithCurrentAnchors( \n// RectTransform.Axis.Horizontal, width);\n```", "```cs\nvoid Start() { \n  float panelWidth = panelSlotGrid.GetComponent<RectTransform>().rect.width; \n  print (\"slotGrid.GetComponent<RectTransform>().rect = \" + panelSlotGrid.GetComponent<RectTransform>().rect); \n\n  GridLayoutGroup gridLayoutGroup = panelSlotGrid.GetComponent<GridLayoutGroup>(); \n  float xCellSize = panelWidth / NUM_INVENTORY_SLOTS; \n  xCellSize -= gridLayoutGroup.spacing.x; \n  gridLayoutGroup.cellSize = new Vector2(xCellSize, xCellSize); \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \n\npublic class PickUp : MonoBehaviour { \n  public string description; \n}\n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \nusing System.Collections.Generic; \n\npublic class PlayerInventory : MonoBehaviour { \n   private PlayerInventoryDisplay playerInventoryDisplay; \n   private List<PickUp> inventory = new List<PickUp>(); \n\n   void Awake() { \n         playerInventoryDisplay = GetComponent<PlayerInventoryDisplay>(); \n   } \n\n   void Start() { \n         playerInventoryDisplay.OnChangeInventory(inventory); \n   } \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if(hit.CompareTag(\"Pickup\")){ \n               PickUp item = hit.GetComponent<PickUp>(); \n               inventory.Add( item ); \n               playerInventoryDisplay.OnChangeInventory(inventory); \n               Destroy(hit.gameObject); \n         } \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections; \nusing UnityEngine.UI; \nusing System.Collections.Generic; \n\n[RequireComponent(typeof(PlayerInventory))] \npublic class PlayerInventoryDisplay : MonoBehaviour { \n   public Text inventoryText; \n\n   public void OnChangeInventory(List<PickUp> inventory) { \n         // (1) clear existing display \n         inventoryText.text = \"\"; \n\n         // (2) build up new set of items  \n         string newInventoryText = \"carrying: \"; \n         int numItems = inventory.Count; \n         for(int i = 0; i < numItems; i++){ \n               string description = inventory[i].description; \n               newInventoryText += \" [\" + description+ \"]\"; \n         } \n\n         // if no items in List then set string to message saying inventory is empty \n         if(numItems < 1) \n               newInventoryText = \"(empty inventory)\"; \n\n         // (3) update screen display \n         inventoryText.text = newInventoryText; \n   } \n} \n```", "```cs\npublic void OnChangeInventory(List<PickUp> inventory){ \n    inventory.Sort( \n        delegate(PickUp p1, PickUp p2){ \n           return p1.description.CompareTo(p2.description); \n        } \n    ); \n\n   // rest of the method as before ... \n} \n```", "```cs\nusing UnityEngine; \n\npublic class PickUp : MonoBehaviour { \n   public enum PickUpType { \n         Star, Key, Heart \n   } \n\n   public PickUpType type; \n} \n```", "```cs\nusing UnityEngine; \n\npublic class PlayerController : MonoBehaviour { \n   private InventoryManager inventoryManager; \n\n   void Awake() { \n         inventoryManager = GetComponent<InventoryManager>(); \n   } \n\n   void OnTriggerEnter2D(Collider2D hit) { \n         if(hit.CompareTag(\"Pickup\")){ \n```", "```cs\n               inventoryManager.Add(item); \n               Destroy(hit.gameObject); \n         } \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing UnityEngine.UI; \nusing System.Collections.Generic; \n\n[RequireComponent(typeof(PlayerController))] \n[RequireComponent(typeof(InventoryManager))] \npublic class PlayerInventoryDisplay : MonoBehaviour { \n   public Text inventoryText; \n\n   public void OnChangeInventory(Dictionary<PickUp.PickUpType, int> inventory) { \n         inventoryText.text = \"\"; \n         string newInventoryText = \"carrying: \"; \n\n         foreach (var item in inventory) { \n               int itemTotal = item.Value; \n               string description = item.Key.ToString(); \n               newInventoryText += \" [ \" + description + \" \" + itemTotal + \" ]\"; \n         } \n\n         int numItems = inventory.Count; \n         if (numItems < 1) \n               newInventoryText = \"(empty inventory)\"; \n\n         inventoryText.text = newInventoryText; \n   } \n} \n```", "```cs\nusing UnityEngine; \nusing System.Collections.Generic; \n\npublic class InventoryManager : MonoBehaviour { \n   private PlayerInventoryDisplay playerInventoryDisplay; \n   private Dictionary<PickUp.PickUpType, int> items = new Dictionary<PickUp.PickUpType, int>(); \n\n   void Awake() { \n         playerInventoryDisplay = GetComponent<PlayerInventoryDisplay>(); \n   } \n\n   void Start() { \n         playerInventoryDisplay.OnChangeInventory(items); \n   } \n\n   public void Add(PickUp pickup) { \n         PickUp.PickUpType type = pickup.type; \n         int oldTotal = 0; \n\n         if(items.TryGetValue(type, out oldTotal)) \n               items[type] = oldTotal + 1; \n         else \n               items.Add (type, 1); \n\n         playerInventoryDisplay.OnChangeInventory(items); \n   } \n} \n```", "```cs\nitems = new Dictionary<PickUp.PickUpType, int>() \n```"]