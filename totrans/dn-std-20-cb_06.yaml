- en: Exploring Threading
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索线程
- en: 'In this chapter, we will be looking at these recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下食谱：
- en: Creating a library that can perform several things at once
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个可以同时执行多项操作的库
- en: Creating a .NET Core console application to use the library
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的 .NET Core 控制台应用程序
- en: Creating an async method with tasks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个使用任务的无阻塞方法
- en: Creating a WPF application to use the library
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的 WPF 应用程序
- en: Creating a thread pool
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建线程池
- en: Creating a .NET console application to use the library
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的 .NET 控制台应用程序
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应具备基本的 C# 知识。他们还应具备使用 Visual Studio、使用 NuGet 安装包以及在其他项目中引用库的基本知识。
- en: 'The code files for this chapter can be found on GitHub:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 GitHub 上找到：
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter06](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter06)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter06](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter06)'
- en: 'Check out the following video to see the code in action:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看代码的实际效果：
- en: '[https://goo.gl/BhsEpf](https://goo.gl/BhsEpf)'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://goo.gl/BhsEpf](https://goo.gl/BhsEpf)'
- en: Introduction
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Threading enables your C# application to do more than one operation at a time.
    Simply put, you can allow a user to input their personal information and monitor
    it while doing a background process. As an example, in strategy games, a character
    might be fetching some wood from a forest. At the same time, another one could
    be building a wall and another shooting at the enemy. Let's have a look at how
    threading works inside a .NET Standard 2.0 library.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 线程使您的 C# 应用程序能够同时执行多个操作。简单来说，您可以在执行后台进程的同时允许用户输入个人信息并监控它。例如，在策略游戏中，一个角色可能正在从森林中获取一些木材。同时，另一个角色可能正在建造一堵墙，另一个角色正在射击敌人。让我们看看如何在
    .NET Standard 2.0 库中实现线程。
- en: Creating a library that can perform several things at once
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个可以同时执行多项操作库
- en: In this recipe, we will be looking at the basics of threading and we will make
    use of the `System.Threading` namespace inside a .NET Standard 2.0 library.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨线程的基础知识，并在 .NET Standard 2.0 库中使用 `System.Threading` 命名空间。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's make sure we have the latest Visual Studio 2017 installed and configured
    for creating a .NET Standard 2.0 library before we get started building our library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建我们的库之前，让我们确保已经安装并配置了最新的 Visual Studio 2017 以创建 .NET Standard 2.0 库。
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击文件 | 新建 | 项目以创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新建项目对话框中，展开左侧窗格中的其他项目类型节点，并选择 Visual Studio 解决方案。在右侧窗格中，选择空白解决方案****。
- en: 'In the Name: textbox, type `Chapter6.Threads` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在名称：文本框中，键入 `Chapter6.Threads`，并在位置：文本框中，从下拉框中选择一个路径或点击浏览...按钮定位路径：
- en: '![](img/2880e605-1be4-47f5-81aa-b81f8ccdcd88.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2880e605-1be4-47f5-81aa-b81f8ccdcd88.png)'
- en: Click OK.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/25fb32f2-0873-4565-8ef6-622f55b7782d.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/25fb32f2-0873-4565-8ef6-622f55b7782d.png)'
- en: Now, right-click on the `Chapter6.Threads` label in the Solution Explorer and
    select Add | New Project**.**
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中右键单击 `Chapter6.Threads` 标签，然后选择添加 | 新项目****。
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新建项目对话框中，展开 Visual C# 节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择 .NET Standard，在右侧窗格中选择类库 (.NET Standard)：
- en: '![](img/00db53de-12e7-4ba6-aa18-8a3bcde8596f.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00db53de-12e7-4ba6-aa18-8a3bcde8596f.png)'
- en: 'Now, in the Name: textbox, type `Chapter6.Threads.ThreadLib`. Leave the other
    defaults as they are and click OK:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在名称：文本框中键入 `Chapter6.Threads.ThreadLib`。保留其他默认设置，然后点击确定：
- en: '![](img/9ef38dd6-bab0-4a9e-a2d3-be6c956b4087.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9ef38dd6-bab0-4a9e-a2d3-be6c956b4087.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/3e5438cc-4c10-4eac-b598-4d096a7f572d.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3e5438cc-4c10-4eac-b598-4d096a7f572d.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `ThreadGenerator.cs`.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择`Class1.cs`文件，然后按*F2*键重命名文件为`ThreadGenerator.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中回答“是”，以将类名也重命名。
- en: Now, double-click on the `ThreadGenerator.cs` label in the Solution Explorer.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`ThreadGenerator.cs`标签。
- en: 'Let''s scroll up in the code window and add the following `using` directive:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, let''s add this class-level variable to store our text messages:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加这个类级别变量来存储我们的文本消息：
- en: '[PRE1]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Create this method inside the `ThreadGenerator` class:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ThreadGenerator`类中创建此方法：
- en: '[PRE2]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Finally, create this support method for the main `StartThreads()` method:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，为主`StartThreads()`方法创建此支持方法：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Let's perform a quick build by pressing *Ctrl* + *Shift* + *B* to check the
    syntax.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *Shift* + *B*来执行快速构建，以检查语法。
- en: How it works...
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 14, we created a new blank solution and added a .NET Standard
    2.0 class library. Then we gave the default template class a proper name. In step
    15, we added the `using` directive required for threading support, which is `System.Threading`,
    and we have used the `System.Text` namespace to get the  `StringBuilder` class
    to store our messages.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到14中，我们创建了一个新的空白解决方案，并添加了一个.NET Standard 2.0类库。然后我们给默认模板类取了一个合适的名字。在步骤15中，我们添加了用于线程支持的必需的`using`指令，即`System.Threading`，并且我们使用了`System.Text`命名空间来获取`StringBuilder`类以存储我们的消息。
- en: We have used `StringBuilder` over `String`. If you are wondering why, it is
    because `StringBuilder` is mutable. When you perform operations such as insert,
    replace, or append, a `StringBuilder` object doesn't create a new instance every
    time. It will update one space in the memory without creating a new space in the
    memory. However, `String` is immutable, which means that if you create a `String`
    object, then you cannot modify it and it always creates a new `String` object
    in the memory.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了`StringBuilder`而不是`String`。如果你想知道为什么，那是因为`StringBuilder`是可变的。当你执行插入、替换或追加等操作时，`StringBuilder`对象不会每次都创建一个新的实例。它将在内存中更新一个空间，而不在内存中创建新的空间。然而，`String`是不可变的，这意味着如果你创建了一个`String`对象，那么你无法修改它，并且它总是在内存中创建一个新的`String`对象。
- en: In step 16, we created an instance of the `StringBuilder` class, which will
    handle all the messages and store them. Then, we created a method that returns
    a `StringBuilder`. This `StringBuilder` will contain all the messages generated
    during execution of the `StartThreads()` methods created in step 17.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤16中，我们创建了一个`StringBuilder`类的实例，它将处理所有消息并将它们存储起来。然后，我们创建了一个返回`StringBuilder`的方法。这个`StringBuilder`将包含在步骤17中创建的`StartThreads()`方法执行期间生成的所有消息。
- en: 'In these three lines, we picked up the current running thread, which is the
    main thread, and gave it a name. Then, we stored a message in the `StringBuilder`:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这三行中，我们获取了当前正在运行的线程，即主线程，并给它起了一个名字。然后，我们在`StringBuilder`中存储了一条消息：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In these lines, we created another new thread and used the `helper` method
    created in step 18 to execute the thread. This `private helper` method loops through
    100 steps, adds a message to the string builder, and sleeps for 100 milliseconds
    at each step:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些行中，我们创建了另一个新的线程，并使用步骤18中创建的`helper`方法来执行线程。这个`private helper`方法循环100步，向字符串构建器添加一条消息，并在每一步暂停100毫秒：
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'It also stores the relevant message inside the `StringBuilder` as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它还按照以下方式在`StringBuilder`中存储相关消息：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the final lines of code, we executed another loop in the main thread and
    stored messages inside the `StringBuilder` to identify which threads are being
    executed. Finally, we performed a quick build to check the syntax.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码的最后几行中，我们在主线程中执行了另一个循环，并将消息存储在`StringBuilder`中，以识别正在执行的线程。最后，我们进行了快速构建以检查语法。
- en: Creating a .NET Core console application to use the library
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个.NET Core控制台应用程序以使用库
- en: In this recipe, we will be building a .NET Core console application. This application
    will use the library we built in the previous recipe.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将构建一个.NET Core控制台应用程序。这个应用程序将使用我们在上一个菜谱中构建的库。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备中
- en: Make sure you have completed the previous recipe and it builds correctly. Let's
    get started on the application to use the library.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了上一个菜谱，并且它构建正确。让我们开始构建使用库的应用程序。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter6.Threads` solution.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一个菜谱中的解决方案。点击“文件”|“打开”|“打开项目/解决方案”，或者按*Ctrl* + *Shift* + *O*，并选择`Chapter6.Threads`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: Click on the `Chapter6.Threads` solution label. Click File | Add | New Project.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Chapter6.Threads`解决方案标签。点击“文件”|“添加”|“新建项目”。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的“Visual C#”节点。
- en: 'Select .NET Core and select Console App (.NET Core) in the right-hand pane:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择.NET Core，并选择“控制台应用程序 (.NET Core)”：
- en: '![](img/359af982-84dd-4ed7-a770-f7a0382aad2f.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/359af982-84dd-4ed7-a770-f7a0382aad2f.png)'
- en: 'Now, in the Name: textbox, type `Chapter6.Threads.ThreadsCore` as the name
    of the project. The rest of the fields should be left as they are:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，将项目名称输入为`Chapter6.Threads.ThreadsCore`。其余字段应保持不变：
- en: '![](img/f1f06b36-005a-457e-8c2b-4153b9c2de72.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f1f06b36-005a-457e-8c2b-4153b9c2de72.png)'
- en: Click OK.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should display like
    this:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按*Ctrl* + *Alt* + *L*）应该显示如下：
- en: '![](img/eb2e5d2b-7213-4736-a51c-58226db82457.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb2e5d2b-7213-4736-a51c-58226db82457.png)'
- en: Right-click on the Dependencies label in the `Chapter6.Threads.ThreadsCore`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter6.Threads.ThreadsCore`中的“依赖项”标签上右键单击。
- en: Select Add Reference.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加引用”。
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器中，点击右侧窗格中的“项目”标签：
- en: '![](img/792d0cbe-5cf1-4beb-aea8-3779b0f870b8.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/792d0cbe-5cf1-4beb-aea8-3779b0f870b8.png)'
- en: Check the `Chapter6.Threads.ThreadLib`project in the left-hand pane.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查`Chapter6.Threads.ThreadLib`项目。
- en: Click OK.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, double-click on the `Program.cs` label in the Solution Explorer.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中双击`Program.cs`标签。
- en: 'Scroll up in the code window and add the following `using` directive:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, delete any existing code generated by Visual Studio in the `Main()` method
    and add the following code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，删除`Main()`方法中由Visual Studio生成的任何现有代码，并添加以下代码：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Press *F5* to execute the app.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*执行应用程序。
- en: 'You should see output like this:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到如下输出：
- en: '![](img/e1df3453-705d-4118-bb2e-1d6075ba3f03.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e1df3453-705d-4118-bb2e-1d6075ba3f03.png)'
- en: Press *Enter* to exit.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Enter*键退出。
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 9, we opened an existing solution with a .NET Standard 2.0 library
    project. Then, we added a .NET Core console application to that solution. In steps
    10 to 14, we added the .NET Standard 2.0 library project as a dependency to the
    console application. Then, in step 16, we used the `using` directive to reference
    the class library. This will allow us to access the available functionality from
    the library.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到9中，我们打开了一个现有的解决方案，其中包含一个.NET Standard 2.0库项目。然后，我们将.NET Core控制台应用程序添加到该解决方案中。在步骤10到14中，我们将.NET
    Standard 2.0库项目作为依赖项添加到控制台应用程序中。然后在步骤16中，我们使用`using`指令来引用类库。这将使我们能够访问库中的可用功能。
- en: In step 17, we created an instance of the `ThreadGenerator` class available
    in the class library. Then, we used its `StartThreads()` method and stored the
    returned `StringBuilder` in a variable. Finally, we displayed the output using
    `Console.WriteLine` and waited for a key press by the user in the last line. In
    steps 18 to 20, we executed the application and saw the output.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在第17步中，我们在类库中创建了一个`ThreadGenerator`类的实例。然后，我们使用了它的`StartThreads()`方法，并将返回的`StringBuilder`存储在一个变量中。最后，我们使用`Console.WriteLine`显示了输出，并在最后一行等待用户按键。在第18到20步中，我们执行了应用程序并看到了输出。
- en: Creating an async method with tasks
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用任务创建异步方法
- en: In this recipe, we will be looking at the asynchronous programming capabilities
    found in the C# language. C# has language-level asynchronous capabilities, and
    therefore you don't have to rely on a third-party library. If you have I/O operations,
    such as reading data from a network or from a database, you can utilize asynchronous
    programming. You can also use asynchronous programming for CPU-bound, expensive
    calculations.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将探讨C#语言中找到的异步编程能力。C#具有语言级别的异步能力，因此你不必依赖第三方库。如果你有I/O操作，例如从网络或数据库读取数据，你可以利用异步编程。你也可以为CPU密集型、昂贵的计算使用异步编程。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have Visual Studio 2017 updated. It is also assumed that you have
    prior experience in asynchronous programming and what it means.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的 Visual Studio 2017 已经更新。还假设你之前有异步编程的经验以及它的含义。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open Visual Studio 2017.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 File | New | Project 来创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目对话框中，展开左侧窗格中的 Other Project Types 节点，并选择 Visual Studio Solutions。在右侧窗格中，选择
    Blank Solution**.**
- en: 'In the Name: textbox, type `Chapter6.AsyncTasks` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在 Name: 文本框中，键入 `Chapter6.AsyncTasks`，并在 Location: 文本框中，从下拉框中选择一个路径或点击 Browse...
    按钮定位路径：'
- en: '![](img/1420cdf5-3731-4e51-9d79-704bab1a5435.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1420cdf5-3731-4e51-9d79-704bab1a5435.png)'
- en: Click OK.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 OK。
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/2a4f681f-46f2-4851-9371-ac7109934dbf.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a4f681f-46f2-4851-9371-ac7109934dbf.png)'
- en: Now, right-click on the `Chapter6.AsyncTasks` label in the Solution Explorer
    and select Add | New Project**.**
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中的 `Chapter6.AsyncTasks` 标签上右键单击，然后选择 Add | New Project**.**
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新项目对话框中，展开 Visual C# 节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择 .NET Standard，在右侧窗格中选择 Class Library (.NET Standard)：
- en: '![](img/fbce3b1b-3d8b-4cad-b90a-2992c2deeddc.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fbce3b1b-3d8b-4cad-b90a-2992c2deeddc.png)'
- en: 'Now, in the Name: textbox, type `Chapter6.AsyncTasks.AsyncLib`. Leave the other
    defaults as they are and click OK:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '现在，在 Name: 文本框中，键入 `Chapter6.AsyncTasks.AsyncLib`。保留其他默认设置，然后点击 OK：'
- en: '![](img/f3f1fc01-8569-47f5-adc1-1db6e1daaf8e.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3f1fc01-8569-47f5-adc1-1db6e1daaf8e.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/47c2d979-d33d-4e7c-83fd-4e6cf4684d07.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47c2d979-d33d-4e7c-83fd-4e6cf4684d07.png)'
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `SiteReader.cs`.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在解决方案资源管理器中选择 `Class1.cs`，然后按 *F2* 重命名文件为 `SiteReader.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中回答 Yes，询问是否也要重命名类名。
- en: Now, double-click on the `SiteReader.cs` label in the Solution Explorer.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，双击解决方案资源管理器中的 `SiteReader.cs` 标签。
- en: 'Let''s scroll up in the code window and add the following using directive:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下 using 指令：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, let''s add this class-level variable:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们添加这个类级别的变量：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the following method inside the open and closed curly brackets of the `SiteReader`
    class:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `SiteReader` 类的开放和闭合花括号内添加以下方法：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Press *Ctrl* + *Shift* + *B* for a quick build.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* + *Shift* + *B* 进行快速构建。
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 12, we added a blank solution and then we added a .NET Standard
    2.0 class library to the solution. In these steps, we assigned proper names to
    the solution and the project. In steps 13 and 14, we renamed the default class
    template to something more meaningful. You can also delete this class and create
    a new one.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 12 中，我们添加了一个空白解决方案，然后向解决方案中添加了一个 .NET Standard 2.0 类库。在这些步骤中，我们为解决方案和项目分配了合适的名称。在步骤
    13 和 14 中，我们将默认类模板重命名为更有意义的内容。你也可以删除这个类并创建一个新的。
- en: In step 15, we added two namespaces to the code. In step 16, we created a class-level
    variable and created an instance of the `HttpClient` class. In step 17, we created
    an asynchronous public method that reads the given site content as a `string`
    and returns the read content.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 15 中，我们向代码中添加了两个命名空间。在步骤 16 中，我们创建了一个类级别的变量并创建了一个 `HttpClient` 类的实例。在步骤
    17 中，我们创建了一个异步的公共方法，该方法将给定的网站内容作为 `string` 读取并返回读取的内容。
- en: Finally, we performed a quick build to check the syntax.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们进行了快速构建以检查语法。
- en: Creating a WPF application to use the library
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于使用库的 WPF 应用程序
- en: In this recipe, we will be creating a Windows Presentation Foundation application
    to use the library. A basic user interface will be created to show the content.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建一个用于使用库的 Windows Presentation Foundation 应用程序。将创建一个基本的用户界面来显示内容。
- en: Getting ready
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have opened the .NET Standard 2.0 class library we built in the
    previous recipe. If not, make sure you complete the previous recipe before we
    dive into this one.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经打开了我们在上一道菜谱中构建的 .NET Standard 2.0 类库。如果没有，请确保在深入这一道之前完成上一道菜谱。
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Open Visual Studio 2017.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter6.AsyncTasks` solution.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开前一个菜谱中的解决方案。点击“文件”|“打开”|“打开项目/解决方案”，或者按*Ctrl* + *Shift* + *O*，然后选择`Chapter6.AsyncTasks`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: Click on the `Chapter6.AsyncTasks` solution label. Click File | Add | New Project.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Chapter6.AsyncTasks`解决方案标签。点击“文件”|“添加”|“新建项目”。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的“Visual C#”节点。
- en: 'Select Windows Classic Desktop and select WPF App (.NET Framework) in the right-hand
    pane:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择“Windows Classic Desktop”，然后选择“WPF App (.NET Framework)”：
- en: '![](img/3db8aeb7-f568-469e-94c7-e3abe4c01430.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3db8aeb7-f568-469e-94c7-e3abe4c01430.png)'
- en: 'Now, in the Name: textbox, type `Chapter6.AsyncTasks.WPFSiteContent` as the
    name of the project. The rest of the fields can be left as they are:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在“名称：”文本框中，输入`Chapter6.AsyncTasks.WPFSiteContent`作为项目的名称。其余字段可以保持不变：
- en: '![](img/dc1166bc-207b-4165-974a-3bd72617fbc0.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc1166bc-207b-4165-974a-3bd72617fbc0.png)'
- en: Click OK.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/570b9caf-66a4-464a-83a7-9389b27249bf.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/570b9caf-66a4-464a-83a7-9389b27249bf.png)'
- en: Right-click on the References label in the `Chapter6.AsyncTasks.WPFSiteContent`.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter6.AsyncTasks.WPFSiteContent`中，右键点击“引用”标签。
- en: Select Add Reference.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“添加引用”。
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在参考管理器中，点击右侧窗格中的“项目”标签：
- en: '![](img/c0134b69-9335-480a-b832-2066baff73b9.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c0134b69-9335-480a-b832-2066baff73b9.png)'
- en: Check the `Chapter6.AsyncTasks.AsyncLib`project in the left-hand pane.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查`Chapter6.AsyncTasks.AsyncLib`项目。
- en: Click OK.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: Now, click on the `MainWindow.xaml` tab.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击`MainWindow.xaml`选项卡。
- en: 'From the toolbox, add a TextBox control, a Button control, and a WebBrowser
    control to the MainWindow form:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从工具箱中，向MainWindow窗体添加一个TextBox控件、一个Button控件和一个WebBrowser控件：
- en: '![](img/47d81c33-d66d-4244-8859-661712286c41.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47d81c33-d66d-4244-8859-661712286c41.png)'
- en: Select the TextBox and press *F4* to load the Properties window.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择TextBox并按*F4*加载属性窗口。
- en: 'Change the following properties:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改以下属性：
- en: '| **Control** | **Property** | **Value** |'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| **控件** | **属性** | **值** |'
- en: '| TextBox | Name | `UrlTextBox` |'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| TextBox | Name | `UrlTextBox` |'
- en: '| TextBox | Text | `Delete existing text and leave blank` |'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| TextBox | Text | `删除现有文本并留空` |'
- en: '| Button | Name | `GoButton` |'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Button | Name | `GoButton` |'
- en: '| Button | Content | `Go` |'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| Button | Content | `Go` |'
- en: '| WebBrowser | Name | `ContentBrowser` |'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| WebBrowser | Name | `ContentBrowser` |'
- en: Double-click on the Go button to reach the code window.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击“Go”按钮进入代码窗口。
- en: Scroll up till you reach the `using` directives.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向上滚动直到到达`using`指令。
- en: 'Add the following `using` directive to the last line of the directives:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下`using`指令添加到指令的最后一行：
- en: '[PRE12]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Scroll down and add the following code inside the `GoButton_Click()` event.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并在`GoButton_Click()`事件内添加以下代码。
- en: 'Change the `GoButton_Click` as follows:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式更改`GoButton_Click`：
- en: '[PRE13]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add this code inside the `GoButton_Click()` method:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`GoButton_Click()`方法内添加以下代码：
- en: '[PRE14]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Press *F5* to execute the application.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*F5*执行应用程序。
- en: Type a URL inside the textbox and click on the Go button.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本框内输入一个URL并点击“Go”按钮。
- en: 'You should see output similar to this:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到类似以下输出：
- en: '![](img/ebdcc10c-e474-471c-88b4-d58bfe0e8167.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebdcc10c-e474-471c-88b4-d58bfe0e8167.png)'
- en: Close the application.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭应用程序。
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 10, we opened the existing solution for the .NET Standard 2.0
    library project. Then we added a WPF Project to the solution. In steps 11 to 14,
    we added a reference to the class library we built in the previous recipe. In
    steps 16 to 18, we added controls to the `MainWindow` of the WPF application and
    then we changed a few properties.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到10中，我们打开了现有的.NET Standard 2.0库项目解决方案。然后我们向解决方案中添加了一个WPF项目。在步骤11到14中，我们添加了对之前菜谱中构建的类库的引用。在步骤16到18中，我们向WPF应用程序的`MainWindow`添加了控件，并更改了一些属性。
- en: In step 21, we referenced the class library using a `using` directive. In step
    23, we decorated the `GoButton_Click()` method with an `async` keyword. In step
    24, the first three lines of code demonstrate that we have created a variable
    to store the URL from the TextBox after it created an instance of the `SiteReader`
    class. Then, we used the `ReadSiteConent()` asynchronous method to read the content
    of a given URL. Finally, we displayed that content in the `WebBrowser` control.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 21 中，我们使用`using`指令引用了类库。在步骤 23 中，我们使用`async`关键字装饰了`GoButton_Click()`方法。在步骤
    24 中，代码的前三行演示了我们在创建`SiteReader`类实例后创建了一个变量来存储从 TextBox 中获取的 URL。然后，我们使用`ReadSiteContent()`异步方法读取给定
    URL 的内容。最后，我们在`WebBrowser`控件中显示该内容。
- en: In steps 25 to 27, we tested the application.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 25 到 27 中，我们测试了应用程序。
- en: Creating a thread pool
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建线程池
- en: In this recipe, we will be looking at thread pools in C#. Basically, a thread
    pool is a collection of threads that can be used to perform tasks in the background.
    Once a thread completes its task, then it is sent to a pool of waiting threads,
    where it can be reused. Let's create a .NET Standard 2.0 library that uses thread
    pools.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将探讨 C# 中的线程池。基本上，线程池是一组可以用于在后台执行任务的线程。一旦线程完成其任务，它就会被发送到等待线程的池中，以便可以重用。让我们创建一个使用线程池的
    .NET Standard 2.0 库。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have the latest version of Visual Studio 2017 up and running.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您已安装并运行了最新版本的 Visual Studio 2017。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017。
- en: Click File | New | Projectto create a project.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“文件”|“新建”|“项目”来创建一个项目。
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开左侧窗格中的“其他项目类型”节点，并选择“Visual Studio 解决方案”。在右侧窗格中，选择“空白解决方案**”。**
- en: 'In the Name: textbox, type `Chapter6.ThreadPools` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入`Chapter6.ThreadPools`，并在“位置：”文本框中，从下拉框中选择一个路径或点击“浏览...”按钮来定位路径：
- en: '![](img/1e853955-d4b0-4b88-bc19-dd8629fe4c6e.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1e853955-d4b0-4b88-bc19-dd8629fe4c6e.png)'
- en: Click OK.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”。
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/ec77958d-bbfa-42ce-88f8-b81d5464ea23.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ec77958d-bbfa-42ce-88f8-b81d5464ea23.png)'
- en: Right-click on the `Chapter6.ThreadPools` label in the Solution Explorer and
    select Add | New Project**.**
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中的`Chapter6.ThreadPools`标签上右键单击，并选择“添加”|“新建项目**”。**
- en: In the New Project dialog box, expand the Visual C# node.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“新建项目”对话框中，展开“Visual C#”节点。
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中选择.NET Standard，在右侧窗格中选择“类库 (.NET Standard)”：
- en: '![](img/00b25aa5-02d0-4a4d-a786-410d907d5c73.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00b25aa5-02d0-4a4d-a786-410d907d5c73.png)'
- en: 'In the Name: textbox, type `Chapter6.ThreadPools.PoolLib`. Leave the other
    defaults as they are and click OK:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称：”文本框中，键入`Chapter6.ThreadPools.PoolLib`。保留其他默认设置并点击“确定”：
- en: '![](img/9bb4070b-d2be-4ae0-95b5-5cbc28093b2d.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9bb4070b-d2be-4ae0-95b5-5cbc28093b2d.png)'
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器 (*Ctrl* + *Alt* + *L*) 应该看起来像这样：
- en: '![](img/19ad79e3-3945-44b9-8cfd-590fdc5cac38.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/19ad79e3-3945-44b9-8cfd-590fdc5cac38.png)'
- en: Select `Class1.cs` in the Solution Explorer and press *F2* to rename the file
    `ThreadList.cs`.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案资源管理器中选择`Class1.cs`，然后按*F2*键重命名文件为`ThreadList.cs`。
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在确认对话框中回答“是”，询问是否重命名类名。
- en: Double-click on the `ThreadList.cs` label in the Solution Explorer.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击解决方案资源管理器中的`ThreadList.cs`标签。
- en: 'Let''s scroll up in the code window and add the following using directive:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE15]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s add a class-level variable that holds a `StringBuilder`:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们添加一个类级别的变量来保存`StringBuilder`：
- en: '[PRE16]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add a main `ProcessPool()` method to the class:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类中添加一个主`ProcessPool()`方法：
- en: '[PRE17]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, let''s add the helper method to process the thread:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们添加一个辅助方法来处理线程：
- en: '[PRE18]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Let's perform a quick build by pressing *Ctrl* + *Shift* + *B*.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按*Ctrl* + *Shift* + *B*进行快速构建。
- en: How it works...
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 10, we created a blank solution and added a .NET Standard 2.0
    library to the project. In between, we assigned meaningful names to the project
    and to the solution. In step 12, we renamed the default class created by Visual
    Studio. In step 15, we added the namespaces required to build the library.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤1到10中，我们创建了一个空白解决方案，并将.NET Standard 2.0库添加到项目中。在此期间，我们为项目和解决方案分配了有意义的名称。在第12步中，我们重命名了Visual
    Studio创建的默认类。在第15步中，我们添加了构建库所需的命名空间。
- en: In step 16, we created a variable to hold the messages using the `StringBuilder`
    class. This is a class-level variable that is shared across methods inside the
    class. In step 17, we created a method that creates a thread pool using a helper
    method in step 18\. Inside that method, we use the `messages` variable to store
    the messages during the process.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在第16步中，我们使用`StringBuilder`类创建了一个变量来存储消息。这是一个类级别的变量，在类内的方法之间共享。在第17步中，我们创建了一个方法，使用第18步中的辅助方法创建线程池。在该方法内部，我们使用`messages`变量在过程中存储消息。
- en: Finally, in step 19, we performed a quick build to check for the correct syntax.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在第19步中，我们进行了快速构建以检查语法是否正确。
- en: Creating a .NET console application to use the library
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个.NET控制台应用程序来使用库
- en: In this recipe, we will be looking at a .NET console-based application to use
    the library. This console app will reference the library created in the previous
    recipe and use it.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将查看一个基于.NET控制台的应用程序来使用库。这个控制台应用程序将引用上一食谱中创建的库并使用它。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you have completed the previous recipe. If you have completed it,
    open it using Visual Studio 2017 and perform a quick build to check that everything
    is fine.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经完成了上一食谱。如果你已经完成，请使用Visual Studio 2017打开它并执行快速构建以检查一切是否正常。
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio 2017.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Visual Studio 2017。
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter6.ThreadPools` solution.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，打开上一食谱中的解决方案。点击文件 | 打开 | 打开项目/解决方案，或按*Ctrl* + *Shift* + *O*，并选择`Chapter6.ThreadPools`解决方案。
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *Shift* + *B*进行快速构建以检查一切是否正常。
- en: Click on the `Chapter6.ThreadPools` solution label. Click File | Add | New Project.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击解决方案资源管理器中的`Chapter6.ThreadPools`解决方案标签。点击文件 | 添加 | 新项目。
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“添加新项目”模板对话框中，展开左侧窗格中的Visual C#节点。
- en: 'Select Windows Classic Desktop and select Console App (.NET Framework) in the
    right-hand pane:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧窗格中选择Windows经典桌面，并选择Console App (.NET Framework)：
- en: '![](img/60ec763e-38da-4eb1-97cd-58217b461a73.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/60ec763e-38da-4eb1-97cd-58217b461a73.png)'
- en: 'In the Name: textbox, type `Chapter6.ThreadPools.PoolConsole` as the name of
    the project. The rest of the fields can be left as they are:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“名称”文本框中，输入`Chapter6.ThreadPools.PoolConsole`作为项目的名称。其余字段可以保持不变：
- en: '![](img/295b12fa-c00f-4e0f-b878-3a5ff500fe12.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/295b12fa-c00f-4e0f-b878-3a5ff500fe12.png)'
- en: Click OK.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，解决方案资源管理器（按*Ctrl* + *Alt* + *L*）应该看起来像这样：
- en: '![](img/a2f3caf7-9a7d-4cb6-85cd-ea169ac486af.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a2f3caf7-9a7d-4cb6-85cd-ea169ac486af.png)'
- en: Right-click on the References label in the `Chapter6.ThreadPools.PoolConsole`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Chapter6.ThreadPools.PoolConsole`的引用标签上右键单击。
- en: Select Add Reference.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择添加引用。
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在引用管理器中，点击右侧窗格中的项目标签：
- en: '![](img/21689d31-89ff-4731-ab0e-3bbf3806fa2c.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/21689d31-89ff-4731-ab0e-3bbf3806fa2c.png)'
- en: Check `Chapter6.ThreadPools.PoolLib`project in the left-hand pane.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧窗格中检查`Chapter6.ThreadPools.PoolLib`项目。
- en: Click OK.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击确定。
- en: Double-click on the `Program.cs` label in the Solution Explorer.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击解决方案资源管理器中的`Program.cs`标签。
- en: 'Scroll up in the code window and add the following `using` directive:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码窗口中向上滚动并添加以下`using`指令：
- en: '[PRE19]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s add the code inside the `Main()` method:'
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在`Main()`方法中添加代码：
- en: '[PRE20]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, press *F5* to test our application:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，按*F5*测试我们的应用程序：
- en: '![](img/cba65b5b-f6d9-42a5-859c-6c5f83119d7d.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cba65b5b-f6d9-42a5-859c-6c5f83119d7d.png)'
- en: Press *Enter* to exit the application.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*Enter*键退出应用程序。
- en: How it works...
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In steps 1 to 9, we opened the solution created in the previous recipe. Then,
    we added a .NET console application to the project. In steps 10 to 14, we added
    a reference to the library we created in the previous recipe. In step 16, we created
    the reference in the code for the library. In step 17, we  added code to create
    an instance of the `ThreadList` class. We called the `ProcessPool()` and stored
    the return value in a variable.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在步骤 1 到 9 中，我们打开了上一道菜谱中创建的解决方案。然后，我们将一个 .NET 控制台应用程序添加到项目中。在步骤 10 到 14 中，我们添加了对上一道菜谱中创建的库的引用。在步骤
    16 中，我们在代码中创建了库的引用。在步骤 17 中，我们添加了代码来创建 `ThreadList` 类的实例。我们调用了 `ProcessPool()`
    并将返回值存储在一个变量中。
- en: Finally, we displayed the output in the console window and, in steps 18 and
    19, we tested the application.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在控制台窗口中显示了输出，并在步骤 18 和 19 中测试了应用程序。
