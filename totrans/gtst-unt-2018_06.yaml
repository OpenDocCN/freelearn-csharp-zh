- en: Creating and Importing 3D Objects for Our Game
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为我们的游戏创建和导入3D对象
- en: In the last chapter, we explored cameras and lighting. We started by looking
    at cameras, as well as the concepts of perspectives, frustums, and skyboxes. Next,
    we learned the possible uses of multiple cameras in Unity games. We also covered
    the different types of lighting, explored reflection probes, and concluded with
    a look at shadows.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了摄像机和照明。我们首先查看摄像机，以及透视、视锥体和天空盒的概念。接下来，我们学习了Unity游戏中多个摄像机的可能用途。我们还介绍了不同类型的照明，探讨了反射探针，并以阴影的查看作为结束。
- en: We are ready to start making our game environment more robust. We will do that
    by adding trees and other objects to our scene. In this chapter, we will create
    3D objects using Unity's native modeling tools. We will also import and use assets
    from two sources. Our first source will be the Unity Asset Store where we will
    download free-to-use assets for our game. We will also import 3D assets prepared
    specifically for our *Cucumber Beetle* game. As we obtain the assets, we will
    incorporate them into the game project and watch our game start to take shape.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好开始制作我们的游戏环境，使其更加健壮。我们将通过向场景中添加树木和其他对象来实现这一点。在本章中，我们将使用Unity的原生建模工具创建3D对象。我们还将从两个来源导入和使用资产。我们的第一个来源将是Unity资产商店，我们将从中下载免费使用的游戏资产。我们还将导入为我们的*Cucumber
    Beetle*游戏专门准备的3D资产。随着我们获取资产，我们将它们整合到游戏项目中，并观察我们的游戏开始成形。
- en: 'We will cover the following concepts in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下概念：
- en: Understanding assets and GameObjects
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解资产和GameObject
- en: Creating 3D objects in Unity
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Unity中创建3D对象
- en: Using the Unity Asset Store
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Unity资产商店
- en: Incorporating custom assets in our game
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的游戏中整合自定义资产
- en: Working with imported assets
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用导入的资产
- en: If you want to use the same Unity project featured in this chapter, you can
    download the `Starting-Chapter-06.zip` file from the publisher's companion site.
    Once you download the file, decompress it, and then open the project in Unity.
    It contains the completed work from the previous chapters.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用本章中介绍的相同Unity项目，您可以从出版商的配套网站上下载`Starting-Chapter-06.zip`文件。下载文件后，解压缩它，然后在Unity中打开项目。它包含前几章的完成工作。
- en: Understanding assets and GameObjects
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解资产和GameObject
- en: 'Assets are defined as useful or valuable things. In Unity, assets are things
    you will use in our game in conjunction with GameObjects. We''ll discuss GameObjects
    later in this section. There are three basic categories of asset based on their
    source: Unity, user created, and third party. The Unity game engine comes with
    free assets and offers a library of premium (not free) assets. User-created assets
    are those that you create yourself. We will create our own assets later in this
    chapter. The final asset type is third party, meaning that someone other than
    you or Unity created it.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 资产被定义为有用的或有价值的东西。在Unity中，资产是您将与GameObject一起在游戏中使用的东西。我们将在本节后面讨论GameObject。根据其来源，资产分为三类：Unity、用户创建和第三方。Unity游戏引擎附带免费资产并提供一个付费（非免费）资产的库。用户创建的资产是您自己创建的。我们将在本章后面创建自己的资产。最后一种资产类型是第三方，这意味着它是由您或Unity之外的人创建的。
- en: 'When we select the Assets drop-down menu, as shown in the following screenshot,
    we have several options available to us. You will become familiar with the Create,
    Import New Asset, and Import Package options in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择“资产”下拉菜单，如图所示，我们有几个可供选择。在本章中，您将熟悉创建、导入新资产和导入包选项：
- en: '![](img/3da45d6a-3a19-41da-b412-b6251c1908b6.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3da45d6a-3a19-41da-b412-b6251c1908b6.png)'
- en: 'Regardless of the asset source, Unity, user-created, and third-party, assets
    can be of several types. As you can see in the following screenshot, these asset
    types include scripts, scenes, prefabs, materials, animations and more:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 无论资产来源是Unity、用户创建还是第三方，资产都可以有多种类型。如图所示，这些资产类型包括脚本、场景、预制体、材质、动画等等：
- en: '![](img/1bcd289a-9c63-464d-911d-4b705f7feec3.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bcd289a-9c63-464d-911d-4b705f7feec3.png)'
- en: Asset packages
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资产包
- en: Asset packages are bundles of assets grouped together. We can create packages
    to share our assets with others, or to save them for use in another game or Unity
    application. We can even create asset bundles to sell in Unity's Asset Store.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 资产包是将资产分组在一起的集合。我们可以创建包与他人共享我们的资产，或者为在另一款游戏或Unity应用程序中使用而保存它们。我们甚至可以创建在Unity资产商店中出售的资产包。
- en: To create an `asset` package, you simply select all the assets you want in the
    package using the Project panel. Then you have two options. Your first option
    is to right-click and select Export Package. The second option is to select Assets
    | Export Package from the top menu. Both options result in the same outcome.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个`asset`包，您只需使用项目面板选择包中所有想要的资源。然后您有两个选项。第一个选项是右键单击并选择导出包。第二个选项是从顶部菜单选择资产
    | 导出包。两种选项都会产生相同的结果。
- en: 'In addition to the ability to export packages from Unity, we can also import
    `asset` packages into our Unity games. To import an `asset` package, we simply
    select the Assets | Import Package menu option. That reveals the options shown
    in the following screenshot:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 除了可以从Unity导出包外，我们还可以将`asset`包导入到我们的Unity游戏中。要导入一个`asset`包，我们只需选择资产 | 导入包菜单选项。这会显示以下截图中的选项：
- en: '![](img/eccc8f5d-79a8-4498-bc3c-e13ea792efc2.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eccc8f5d-79a8-4498-bc3c-e13ea792efc2.png)'
- en: 'When importing `asset` packages, we can select from one of the standard asset
    packages listed: 2D, Cameras, Characters, CrossPlatformInput, Effects, Environment,
    ParticleSystems, Prototyping, Utility, and Vehicles. We can also import a custom
    package from our computer''s filesystem.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当导入`asset`包时，我们可以从列出的标准资产包中选择一个：2D、相机、角色、跨平台输入、效果、环境、粒子系统、原型设计、实用工具和车辆。我们还可以从计算机文件系统中导入自定义包。
- en: When a package is selected, Unity will decompress the package and then display
    the package contents to you. We will perform this operation later in this chapter.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择一个包时，Unity将解压缩该包，然后向您显示包内容。我们将在本章后面执行此操作。
- en: Understanding GameObjects
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GameObject
- en: GameObjects are things we use in our game, such as 2D objects, 3D objects, audio,
    cameras, lights, user interfaces, and visual effects. GameObjects have properties,
    which vary based on their type, and components. Components can consist of things
    such as scripts, animations, and more. You will learn a lot about GameObjects
    and how to work with them as we continue to work on our game.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: GameObjects是我们游戏中使用的东西，例如2D对象、3D对象、音频、相机、灯光、用户界面和视觉效果。GameObject具有属性，这些属性根据其类型和组件而异。组件可以包括脚本、动画等。随着我们继续制作游戏，您将了解很多关于GameObject及其如何与之协同工作的内容。
- en: 'GameObjects are composed of components. As you can see in the following screenshot
    of the Inspector panel, our game''s Main Camera has four components: Transform,
    Camera, GUI Layer, Flare Layer, and Audio Listener:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: GameObject由组件组成。正如您可以在以下检查器面板截图中所见，我们游戏的主相机有四个组件：变换、相机、GUI层、闪光层和音频监听器：
- en: '![](img/4d6df247-701f-4a1f-af2e-7a84fed42f4a.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4d6df247-701f-4a1f-af2e-7a84fed42f4a.png)'
- en: 'At the bottom of the Inspector panel is the Add Component button. That button
    gives us access to Unity''s components using the following categories:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查器面板底部是添加组件按钮。该按钮通过以下类别为我们提供了访问Unity组件的权限：
- en: Mesh
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格
- en: Effects
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 效果
- en: Physics
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物理
- en: Physics 2D
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二维物理
- en: Navigation
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航
- en: Audio
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 音频
- en: Video
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频
- en: Rendering
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染
- en: Layout
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: Playables
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可播放对象
- en: AR
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AR
- en: Miscellaneous
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 杂项
- en: Analytics
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析学
- en: Scripts
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本
- en: Event
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件
- en: Network
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络
- en: UI
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户界面
- en: New Script
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新脚本
- en: Creating 3D objects in Unity
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Unity中创建3D对象
- en: 'As mentioned in the previous section, GameObjects can include 3D objects with
    properties and components. In this section, we will create a 3D object to represent
    a blood droplet that we can use when the Cucumber Man is battling with a Cucumber
    Beetle. Before we create the object, let''s create a material so that our blood
    droplet can have a realistic red color. Follow these steps to create the material:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，GameObject可以包括具有属性和组件的3D对象。在本节中，我们将创建一个3D对象来表示血滴，这样我们就可以在黄瓜人战斗黄瓜甲虫时使用它。在我们创建对象之前，让我们创建一个材质，以便我们的血滴可以呈现逼真的红色。按照以下步骤创建材质：
- en: In the Project panel, click Materials, and then right-click in the folder and
    select Create | Material
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，点击材质，然后在文件夹中右键单击并选择创建 | 材质
- en: Name the new material red
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新材质命名为红色
- en: With the new material selected, click the color box in the Main Maps section
    of the Inspector panel
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择新材质后，点击检查器面板主图部分中的颜色框
- en: In the color selector window that pops-up, select a red color and then close
    the selection box
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的颜色选择器窗口中，选择红色并关闭选择框
- en: 'Your new material, when viewed in the Inspector panel, should look similar
    to the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 您的新材质，在检查器面板中查看时，应类似于以下截图：
- en: '![](img/8c22f3e2-591c-45f1-b303-4248c94c17cc.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8c22f3e2-591c-45f1-b303-4248c94c17cc.png)'
- en: 'Next, let''s create the sphere:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建球体：
- en: From the top menu, select GameObject | 3D Object | Sphere.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单中选择GameObject | 3D Object | Sphere。
- en: Use the transform tools to position the new sphere so that you can see it in
    the Scene view.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用变换工具定位新球体，以便在场景视图中可以看到它。
- en: Use the Transform section of the Inspector panel to increase the Scale to 5
    for the X, Y, and Z Scale parameters. This will help make the sphere larger and
    easier to work with.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用检查器面板的变换部分，将X、Y和Z缩放参数的缩放增加到5，这将有助于使球体更大，更容易操作。
- en: Next, we will assign the red material to the sphere. With the sphere selected
    in the Hierarchy panel and the `Materials` folder selected in the project panel,
    drag the red material from the `Materials` folder to the Inspector panel Mesh
    Renderer component, in the Materials | Element 0 parameter.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将红色材质分配给球体。在层次结构面板中选择球体，并在项目面板中选择`Materials`文件夹，将红色材质从`Materials`文件夹拖动到检查器面板Mesh
    Renderer组件的Materials | Element 0参数。
- en: You will now see that the sphere in the Scene view is red.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你将看到场景视图中的球体变成了红色。
- en: If we intend on using this sphere to simulate blood droplets, we might need
    several dozen of them. We will explore our options in the next section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打算使用这个球体来模拟血液滴落，我们可能需要几十个这样的球体。我们将在下一节中探讨我们的选项。
- en: Using prefabs
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用预制件
- en: In the previous section, you created a sphere to simulate a blood droplet. You
    also created a red material and applied it to your sphere. In the game, we might
    want to simulate a great battle and have multiple blood droplets visible at once.
    In Unity, we can make as many copies of our master as we want. For example, let's
    assume we have 100 spheres, all copied from our master. What happens when we want
    to alter them, perhaps changing the size or material? It would be a laborious
    task to edit each one.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你创建了一个球体来模拟血液滴落。你还创建了一个红色材质并将其应用到球体上。在游戏中，我们可能想要模拟一场大战，并让多个血液滴落同时可见。在Unity中，我们可以根据需要制作我们主球体的任意多个副本。例如，假设我们有100个球体，它们都是从我们的主球体复制的。当我们想要修改它们，比如改变大小或材质时，这将是一项费力的任务。
- en: 'An alternative is to use a prefab. In Unity, a prefab is an asset type that
    serves as a shell for a GameObject along with properties and components. The sphere
    we created is a GameObject, and, as you can see in the following screenshot, our
    sphere has several components and properties:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是使用预制件。在Unity中，预制件是一种资产类型，它作为GameObject的壳，并包含属性和组件。我们创建的球体是一个GameObject，正如你在下面的截图中所看到的，我们的球体有多个组件和属性：
- en: '![](img/d8bb87cf-5f49-4705-8666-de1265ee8210.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d8bb87cf-5f49-4705-8666-de1265ee8210.png)'
- en: 'So, let''s create a prefab to hold our sphere. Follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个预制件来存放我们的球体。按照以下步骤操作：
- en: In the Project panel, select the `Prefabs` folder.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择`Prefabs`文件夹。
- en: Right-click on the `Prefabs` folder and select Create | Prefab. Alternatively,
    you could have selected, from the top menu, Assets | Create | Prefab.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击`Prefabs`文件夹，然后选择Create | Prefab。或者，你也可以从顶部菜单中选择Assets | Create | Prefab。
- en: Name the prefab `bloodDroplet`. You will notice that there are no components
    or properties visible in the Inspector panel for the new prefab.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预制件命名为`bloodDroplet`。你将注意到，在检查器面板中对于新预制件没有可见的组件或属性。
- en: Next, drag the `Sphere` GameObject from the Hierarchy panel to the new `bloodDroplet`
    prefab in the Project panel. Now, when you view the prefab in the Inspector panel,
    you can see the components and properties that our sphere had.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将层次结构面板中的`Sphere`游戏对象拖动到项目面板中的新`bloodDroplet`预制件上。现在，当你查看检查器面板中的预制件时，你可以看到我们的球体所拥有的组件和属性。
- en: We no longer need the original sphere, so delete that in the Hierarchy panel.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不再需要原始的球体，所以在层次结构面板中将其删除。
- en: Now that we have a `bloodDroplet` prefab, we can drag it into our scene as many
    times as we want. We can also add them to our scene using scripts.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了`bloodDroplet`预制件，我们可以根据需要将其拖动到场景中多次。我们也可以使用脚本将它们添加到场景中。
- en: 'To experience the power of prefabs in Unity, try the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 要体验Unity中预制件的强大功能，请尝试以下操作：
- en: Select the `bloodDroplet` prefab in the Project panel.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选择`bloodDroplet`预制件。
- en: Drag several copies of the `bloodDroplet` prefab into your scene.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将几个`bloodDroplet`预制件的副本拖动到你的场景中。
- en: In the Inspector panel, change the color. You will notice that all the `bloodDroplets`
    in your scene were changed based on the change you made to the prefab.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中更改颜色。你将注意到，根据你对预制件所做的更改，场景中的所有`bloodDroplets`都发生了变化。
- en: Return the color of the prefab to the red material.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将预制件的颜色恢复到红色材质。
- en: Delete any `bloodDroplets` from your scene. This is most easily done in the
    Hierarchy panel.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从你的场景中删除任何`bloodDroplets`。这最容易在层次结构面板中完成。
- en: Deleting the `bloodDroplets` from your scene does not remove all `bloodDroplets`
    from your game. Because we have the `bloodDroplet` prefab, we can add `bloodDroplets`
    to our scene at any time.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的场景中删除`bloodDroplets`并不会从你的游戏中删除所有的`bloodDroplets`。因为我们有`bloodDroplet`预制件，我们可以在任何时候将`bloodDroplets`添加到我们的场景中。
- en: Using additional 3D objects
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用额外的3D对象
- en: 'In the previous section, you created a sphere. Unity also allows us to natively
    create other 3D objects: cubes, capsules, cylinders, planes, quads, rag dolls,
    terrain, trees, wind zones, and 3D text. The basic shapes—cube, sphere, capsule,
    cylinder, plane, and quad—may not be what you need for your game, and we certainly
    do not need them for our *Cucumber Beetle* game. These 3D objects are great for
    testing components and scripts in Unity projects. We can delete them even more
    easily than we can create them, so they make great and expendable testing assets.
    We can use them in our games to experiment with before we spend any time on final
    graphics.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，你创建了一个球体。Unity还允许我们原生创建其他3D对象：立方体、胶囊、圆柱体、平面、四边形、布娃娃、地形、树木、风区以及3D文本。基本形状——立方体、球体、胶囊、圆柱体、平面和四边形——可能不是你游戏所需的，我们当然不需要它们在我们的*Cucumber
    Beetle*游戏中。这些3D对象非常适合在Unity项目中测试组件和脚本。我们可以比创建它们更容易地删除它们，因此它们是很好的、可消耗的测试资产。我们可以在我们的游戏中使用它们来实验，在我们花费任何时间在最终图形之前。
- en: Using the Unity Asset Store
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Unity资产商店
- en: Unity operates a store called the Unity Asset Store. There are a great number
    of assets available to Unity developers. The store is accessible directly on the
    web at [http://assetstore.unity3d.com](http://assetstore.unity3d.com). You can
    also open a window within Unity to display the Asset Store. This is done by selecting
    Window | Asset Store.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Unity运营一个名为Unity Asset Store的商店。有许多资产可供Unity开发者使用。该商店可以通过[http://assetstore.unity3d.com](http://assetstore.unity3d.com)直接在网络上访问。你还可以在Unity中打开一个窗口来显示资产商店。这是通过选择Window
    | Asset Store来完成的。
- en: 'Regardless of how you connect to the Unity Asset Store, you will see a hierarchical
    category listing in the top-right-hand corner of the store. As you can see in
    the following screenshot, there are eleven asset categories:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你如何连接到Unity资产商店，你都会在商店右上角看到一个分层类别列表。正如以下截图所示，有十一个资产类别：
- en: '![](img/cc557571-5952-4ac8-9aee-0cf39a31fa2f.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cc557571-5952-4ac8-9aee-0cf39a31fa2f.png)'
- en: Clicking on the triangular icons to the left of each category reveals subcategories.
    Some categories have multiple subcategories, which helps you find what you are
    looking for quickly. You can also use the Asset Store's search functionality.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 点击每个类别左侧的三角形图标可以显示子类别。一些类别有多个子类别，这有助于你快速找到你想要的东西。你还可以使用资产商店的搜索功能。
- en: 'When you click on a category, its contents will be viewable. Clicking on a
    specific asset will display several characteristics of that asset. These characteristics
    include the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击一个类别时，其内容将可查看。点击特定的资产将显示该资产的几个特性。这些特性包括以下内容：
- en: Title
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: Publisher
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布者
- en: Rating
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 评分
- en: Price
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 价格
- en: Add to Cart button, or, in the case of free assets, a Download button
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加到购物车按钮，或者，在免费资产的情况下，下载按钮
- en: Version of Unity required
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所需Unity版本
- en: Release date
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布日期
- en: Description
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述
- en: Package contents
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含内容
- en: File size
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件大小
- en: Version number (of the asset)
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资产版本号
- en: Images
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片
- en: Videos (not always available)
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频（不一定总是可用）
- en: Link to publisher's website
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布者网站链接
- en: User reviews
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户评价
- en: There are a couple of things to consider regarding obtaining assets from the
    Unity Asset Store. First, you will want to make sure you have the requisite rights
    to use the asset as you plan to. For example, if you do not have commercial use
    rights, you will not want to use that particular asset in your commercial game.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在从Unity资产商店获取资产方面，有一些事情需要考虑。首先，你想要确保你有使用该资产的必要权利，正如你计划的那样。例如，如果你没有商业使用权利，你不会想在你的商业游戏中使用那个特定的资产。
- en: Another thing to consider before selecting assets from the Asset Store is how
    large the files are. Fortunately, this information is part of the metadata displayed
    when you preview an asset.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在从资产商店选择资产之前，还需要考虑的一个问题是文件的大小。幸运的是，当你在预览资产时，这部分信息是元数据的一部分。
- en: In the next section, we will visit the Unity Asset Store, select an asset, and
    add that asset to our game project.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将访问Unity资产商店，选择一个资产，并将其添加到我们的游戏项目中。
- en: Hands-on with the Unity Asset Store
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 亲身体验Unity资产商店
- en: 'In this section, we will go through the necessary steps to acquire assets from
    the Unity Asset Store. Follow these steps:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍获取Unity Asset Store中资源的必要步骤。请遵循以下步骤：
- en: Using the top menu, select Window | Asset Store.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用顶部菜单，选择Window | Asset Store。
- en: In the search box, enter `Unity Particle Pack` and hit your keyboard's return
    button.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`Unity Particle Pack`并按下键盘的回车键。
- en: In the results, find the Unity Particle Pack item by Unity Technologies. It
    will be a free asset package. Select that package by clicking on the title.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结果中，通过Unity Technologies找到Unity Particle Pack项目。它将是一个免费资源包。通过点击标题选择该包。
- en: With the Unity Particle Pack displayed in the Asset Store, click the Download
    button.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Asset Store中显示Unity Particle Pack后，点击下载按钮。
- en: You will be prompted to accept the License Agreement. Click the Accept button
    if you agree with the terms. This will start the download process.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将被提示接受许可协议。如果您同意条款，请点击接受按钮。这将开始下载过程。
- en: When the download completes, the Import button will appear. Click that button.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载完成后，将出现导入按钮。点击该按钮。
- en: You will now see the Import Unity Package dialog window. By default, all assets
    in the package will be selected. Click the Import button at the bottom of the
    interface. The import progress will be displayed in a pop-up window and will automatically
    close when the process completes.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您现在将看到导入Unity Package对话框窗口。默认情况下，包中的所有资源都将被选中。点击界面底部的导入按钮。导入进度将在弹出窗口中显示，并在过程完成后自动关闭。
- en: When the import process completes, close the Asset Store by right-clicking the
    tab and selecting Close tab.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入过程完成后，通过右键点击标签并选择Close tab来关闭Asset Store。
- en: 'As you can see from the following screenshot, there will be a new `EffectExamples`
    folder under Assets in your Project panel:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从下面的截图中所见，在您的项目面板的“资产”下将会有一个新的`EffectExamples`文件夹：
- en: '![](img/f363dec4-f8f6-4c8b-a816-d89335b35245.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f363dec4-f8f6-4c8b-a816-d89335b35245.png)'
- en: We now have a nice set of special effects we can use in our game. We will incorporate
    some of them in [Chapter 12](f7abb907-5397-4668-972e-e69acb441421.xhtml), *Adding
    Audio and Visual Effects to Our Game*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一套很好的特效可以用于我们的游戏。我们将在[第12章](f7abb907-5397-4668-972e-e69acb441421.xhtml)，“为我们的游戏添加音频和视觉效果”中整合一些。
- en: Incorporating custom assets in our game
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在我们的游戏中整合自定义资源
- en: So far in this chapter, we have created our own game asset and downloaded an
    asset package from the Unity Asset Store. In this section, we will download assets
    from the publisher's companion website for use in our game.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，我们已经创建了自己的游戏资源并从Unity Asset Store下载了一个资源包。在本节中，我们将从出版者的配套网站上下载资源用于我们的游戏。
- en: 'Go through the following steps to obtain the asset packages that were created
    specifically for our *Cucumber Beetle* game:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤获取为我们的*Cucumber Beetle*游戏专门创建的资源包：
- en: 'Navigate to the publisher''s website and download the following files:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到出版者的网站并下载以下文件：
- en: '`CherriesAndTree.unitypackage`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CherriesAndTree.unitypackage`'
- en: '`CucumberAndPatches.unitypackage`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CucumberAndPatches.unitypackage`'
- en: From the top menu, select Assets | Import Package | Custom Package and navigate
    to the `CherriesAndTree.unitypackage` file. Click the Open button.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单选择Assets | Import Package | Custom Package，并导航到`CherriesAndTree.unitypackage`文件。点击打开按钮。
- en: 'As shown in the following screenshot, the Import Unity Package dialog window
    will have the necessary files for our Cherry Tree and the cherries. Click the
    Import button:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，导入Unity Package对话框窗口将包含我们樱桃树和樱桃所需的所有文件。点击导入按钮：
- en: '![](img/598ca92f-db91-498e-8297-9da676720360.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/598ca92f-db91-498e-8297-9da676720360.png)'
- en: Next, we will import the cucumber and two Cucumber Patches. These are contained
    in the `CucumberAndPatches.unitypackage` asset package. Follow the preceding steps
    to import this asset package into your game.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将导入黄瓜和两个Cucumber Patches。这些包含在`CucumberAndPatches.unitypackage`资源包中。按照前面的步骤将此资源包导入到您的游戏中。
- en: 'As you can see in the following screenshot, there are several files in this
    asset package relating to the cucumber and both Cucumber Patches:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在下面的截图中所见，这个资源包中有几个与黄瓜和Cucumber Patches相关的文件。
- en: '![](img/8cf23172-31dd-40ed-bb3b-58f58fa6cbb5.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8cf23172-31dd-40ed-bb3b-58f58fa6cbb5.png)'
- en: In [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml), *Implementing Our
    Player Character*, and [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml),
    *Implementing Our Non-Player Character*, you will download additional asset packages.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml)，*实现我们的玩家角色*和[第8章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，*实现我们的非玩家角色*中，您将下载额外的资产包。
- en: Working with imported assets
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与导入的资产一起工作
- en: 'In the previous section, you added the following listed assets to your game:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，您将以下列出的资产添加到您的游戏中：
- en: Cherry
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 樱桃
- en: Cherry Tree
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 樱桃树
- en: Cucumber
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜
- en: Cucumber Patches
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 黄瓜地
- en: We will incorporate the cherry and cucumber assets in [Chapter 10](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml),
    *Scripting Our Points System*. In this section, we will plant our Cherry Trees
    and Cucumber Patches.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在[第10章](fdacd7a8-63fe-454d-9d50-f9f40070e484.xhtml)，*脚本化我们的得分系统*中结合樱桃和黄瓜资产。在本节中，我们将种植樱桃树和黄瓜地。
- en: 'As you will recall from [Chapter 3](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml),
    *Designing the Game*, we created spawn points in four corners and the center of
    our game environment. We also selected four areas in which to plant our Cherry
    Trees. Now that we have actual terrain, we can be more specific with our design.
    Look at the following diagram to determine where to plant our Cherry Trees and
    Cucumber Patches:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从[第3章](df7798e1-3730-4af7-8c04-857d71ac78d2.xhtml)，*设计游戏*中回忆的那样，我们在游戏环境的四个角落和中心创建了出生点。我们还选择了四个种植樱桃树的区域。现在我们有了实际的地形，我们可以更具体地设计。查看以下图表以确定种植樱桃树和黄瓜地的位置：
- en: '![](img/2e3d6e61-bda3-4ded-a4ec-31fcc5191ae1.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2e3d6e61-bda3-4ded-a4ec-31fcc5191ae1.png)'
- en: We will refer to this diagram in the next two sections as we plant our Cherry
    Trees and Cucumber Patches.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在种植我们的樱桃树和黄瓜地时，我们将参考此图的前两个部分。
- en: Planting Cherry Trees
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 植树樱桃树
- en: In [Chapter 4](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml), *Creating Our Terrain*,
    we created a tree to demonstrate how to create one from scratch. Since we downloaded
    a Cherry Tree in the last section, we no longer need our experimental tree. In
    the hierarchy panel, delete the three we previously created. Next, delete any
    tree assets and tree-related texture folders in the project panel. This will help
    us stay organized and minimize the size of our Unity game project.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第4章](f9370800-eaf9-4593-8a9c-8252c85e22ac.xhtml)，*创建我们的地形*中，我们创建了一棵树来演示如何从头开始创建。由于我们在上一节中下载了樱桃树，我们不再需要我们的实验树。在层次面板中，删除我们之前创建的三个。接下来，删除项目面板中的任何树木资产和与树木相关的纹理文件夹。这将帮助我们保持组织并最小化我们的Unity游戏项目的大小。
- en: Basic trees in Unity can be painted on a terrain. To accomplish this, you start
    by orienting the scene view so that you have a top-down view of your terrain.
    Then, in the Hierarchy panel, select your terrain. You then use the Place Trees
    button in the Terrain component of the Inspector panel to paint the trees on your
    terrain.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity中，基本树木可以绘制在地形上。要完成此操作，您首先需要调整场景视图，以便您有一个从上到下的地形视图。然后，在层次面板中，选择您的地形。接下来，您在检查器面板的地形组件中使用放置树木按钮来绘制地形上的树木。
- en: Because our Cherry Trees are special and contain multiple meshes, we cannot
    use the terrain painting tool. Instead, we will make multiple copies of our Cherry
    Tree prefab and place them where we want them to be in our game world using the
    previously provided diagram as a reference.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的樱桃树是特殊的，包含多个网格，我们无法使用地形绘制工具。相反，我们将制作多个樱桃树预制件的副本，并使用之前提供的图作为参考，将它们放置在我们游戏世界中想要的位置。
- en: 'We have a few preparatory steps to take prior to planting our Cherry Trees.
    Follow these steps to prepare the prefab:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在种植我们的樱桃树之前，我们需要采取一些准备步骤。按照以下步骤准备预制件：
- en: In the Project panel, right-click on the `Prefabs` folder and select Create
    | Prefab. Name the prefab `CherryTreeCollider`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，右键单击`Prefabs`文件夹，然后选择创建 | 预制件。将预制件命名为`CherryTreeCollider`。
- en: In the Project panel, drag the `CherryTree.prefab` that you imported in the
    previous section into the Scene view. It doesn't matter where.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，将上一节中导入的`CherryTree.prefab`拖动到场景视图中。位置不重要。
- en: In the Hierarchy panel, select the Cherry Tree you just added to the Scene view.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次面板中，选择您刚刚添加到场景视图中的樱桃树。
- en: In the Inspector panel, click the Is Trigger checkbox in the Box Collider component.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，单击盒子碰撞体组件中的“是触发器”复选框。
- en: Still in the Inspector panel, click the Add Component button and then select
    Physics | Box Collider. We will use this collider to help us determine when the
    Cucumber Man is collecting cherries from a Cherry Tree.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在检查器面板中，点击添加组件按钮，然后选择物理|方块碰撞器。我们将使用这个碰撞器帮助我们确定当黄瓜人从樱桃树中收集樱桃时。
- en: Next, we will edit the collider to ensure it encapsulates the entire tree. In
    the Box Collider area of the Inspector panel, click the Edit Collider button.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将编辑碰撞器以确保它包含整个树。在检查器面板的方块碰撞器区域，点击编辑碰撞器按钮。
- en: 'As you can see from the following screenshot, the collider is at the base of
    the `Cherry Tree` prefab:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 如以下截图所示，碰撞器位于`Cherry Tree`预制体的底部：
- en: '![](img/ee68b387-d63b-4c75-8067-d5e78fbebbf2.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee68b387-d63b-4c75-8067-d5e78fbebbf2.png)'
- en: 'Using the the squares of the box collider in the Scene view, enlarge the collider
    so that it encompasses the majority of the Cherry Tree. It does not need to include
    the tree trunk. An example configuration is shown in the following screenshot:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用场景视图中的方块碰撞器的方块，放大碰撞器，使其包含大部分樱桃树。它不需要包含树干。以下截图显示了示例配置：
- en: '![](img/a13305e1-e734-4f67-a43b-aaa6f2b98b40.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a13305e1-e734-4f67-a43b-aaa6f2b98b40.png)'
- en: In the Project panel, ensure that the `Prefabs` folder is selected.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，确保已选择“Prefabs”文件夹。
- en: Drag the Cherry Tree from the Hierarchy panel to the `CherryTreeCollider` prefab
    in the `Prefabs` folder. This establishes a `Cherry Tree` prefab with a box collider.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将樱桃树从层次结构面板拖动到“Prefabs”文件夹中的`CherryTreeCollider`预制体。这创建了一个具有方块碰撞器的`Cherry Tree`预制体。
- en: In the Hierarchy panel, delete the Cherry Tree, unless it is in a place that
    you want it to be in.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层次结构面板中，删除樱桃树，除非它位于你想要的位置。
- en: Select the `CherryTreeCollider` prefab in the `Prefabs` folder.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Prefabs”文件夹中选择`CherryTreeCollider`预制体。
- en: In the Inspector panel, click the pull-down menu next to Tag. Select the Add
    Tag button.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击标签旁边的下拉菜单。选择添加标签按钮。
- en: 'As indicated by the arrow in the following screenshot, click the + icon at
    the bottom of the empty list:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图中的箭头所示，点击空列表底部的+图标：
- en: '![](img/6fb37a09-0ed0-4cf4-9dbf-39e0951b87ca.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6fb37a09-0ed0-4cf4-9dbf-39e0951b87ca.png)'
- en: In the pop-up window, enter `CherryTree` as the tag name and click the Save
    button.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出的窗口中，输入`CherryTree`作为标签名称，然后点击保存按钮。
- en: Select the `CherryTreeCollider` prefab in the `Prefabs` folder.
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“Prefabs”文件夹中选择`CherryTreeCollider`预制体。
- en: In the Inspector panel, click the pull-down menu next to Tag. Select the `CherryTree` tag.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器面板中，点击标签旁边的下拉菜单。选择`CherryTree`标签。
- en: Now you are ready to start planting your Cherry Trees. Simply drag the prefab
    to each area where you want a Cherry Tree. You can create as many or as few as
    you want. The example provided with this book contains 25 Cherry Trees.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以开始种植你的樱桃树了。只需将预制体拖动到你想放置樱桃树的地方。你可以创建任意多或少的樱桃树。本书提供的示例包含25棵樱桃树。
- en: Once your Cherry Trees are where you want them, your hierarchy panel will probably
    be disorganized. A quick trick to make things more organized is to right-click
    inside the Hierarchy panel and select Create Empty. Then, rename the GameObject
    to `Cherry Trees`. Lastly, in the Hierarchy panel, select all the Cherry Trees
    and place them in that GameObject. Now that GameObject serves as a folder for
    viewing purposes. You can collapse and expand the folder as needed.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的樱桃树放置到你想要的位置后，你的层次结构面板可能变得杂乱无章。一个快速整理的方法是在层次结构面板内右键点击并选择创建空对象。然后，将GameObject重命名为`Cherry
    Trees`。最后，在层次结构面板中，选择所有樱桃树并将它们放入该GameObject中。现在这个GameObject作为一个文件夹用于查看。你可以根据需要折叠和展开文件夹。
- en: If you placed your Cherry Trees using a top-down view in the Scene view, some
    of your trees might need to be raised or lowered based on your terrain. You can
    double-click a Cherry Tree in the Hierarchy view to auto-zoom in on the Scene
    view.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用俯视图在场景视图中放置樱桃树，一些树木可能需要根据你的地形进行升高或降低。你可以在层次结构视图中双击樱桃树以自动缩放场景视图。
- en: Once you complete your work on the Cherry Trees, save your scene and your project.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 完成樱桃树的工作后，保存你的场景和项目。
- en: Planting Cucumber Patches
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 种植黄瓜地
- en: We previously identified six areas for our Cucumber Patches. We can follow the
    same approach in placing Cucumber Patches in our game environment as we used for
    our Cherry Trees. If we took an auto-planting approach to planting our Cucumber
    Patches, we would likely end up with a lot more Cucumber Patches than we want.
    So, we will take a manual approach.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前为我们的黄瓜补丁确定了六个区域。我们可以像我们对樱桃树所做的那样，在游戏环境中放置黄瓜补丁时采用相同的方法。如果我们采用自动种植的方法来种植黄瓜补丁，我们可能会得到比我们想要的更多的黄瓜补丁。因此，我们将采取手动方法。
- en: 'We have prefabs in the `Cucumber Patch` folder from our early import. Let''s
    do a few things to prepare these prefabs for our use. Follow these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在早期导入的`Cucumber Patch`文件夹中有预制体。让我们做一些事情来准备这些预制体以供我们使用。请按照以下步骤操作：
- en: In the Project panel, right-click in the `Prefabs` folder and select Create
    | Prefab. Name the prefab `CucumberPatch1`.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，在`Prefabs`文件夹中右键单击并选择创建 | 预制体。将预制体命名为`CucumberPatch1`。
- en: Repeat step 1 and name this second prefab `CucumberPatch2`.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复步骤1，并将第二个预制体命名为`CucumberPatch2`。
- en: In the Project panel, drag the `Patch1prefab` that you imported in the previous
    section into the Scene view. It doesn't matter where.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，将上一节中导入的`Patch1prefab`拖动到场景视图中。位置无关紧要。
- en: In the Hierarchy panel, select the Cucumber Patch you just added to the Scene
    view.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，选择您刚刚添加到场景视图中的黄瓜补丁。
- en: In the Project panel, ensure that the `Prefabs` folder is selected.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，确保已选择`Prefabs`文件夹。
- en: Drag the Cucumber Patch from the Hierarchy panel to the `CucumberPatch1` prefab
    in the `Prefabs` folder.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将层级面板中的黄瓜补丁拖动到“Prefabs”文件夹中的`CucumberPatch1`预制体。
- en: Delete the Cucumber Patch from the Hierarchy panel.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层级面板中删除黄瓜补丁。
- en: In the Project panel, drag the `Patch2prefab` that you imported in the previous
    section into the Scene view. It doesn't matter where.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，将上一节中导入的`Patch2prefab`拖动到场景视图中。位置无关紧要。
- en: In the Hierarchy panel, select the Cucumber Patch you just added to the Scene
    view.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在层级面板中，选择您刚刚添加到场景视图中的黄瓜补丁。
- en: In the Project panel, ensure that the `Prefabs` folder is selected.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，确保已选择`Prefabs`文件夹。
- en: Drag the Cucumber Patch from the Hierarchy view to the `CucumberPatch2` prefab
    in the `Prefabs` folder.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将黄瓜补丁从层级视图中拖动到“Prefabs”文件夹中的`CucumberPatch2`预制体。
- en: Delete the Cucumber Patch from the Hierarchy panel.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从层级面板中删除黄瓜补丁。
- en: We could have just moved the prefabs we imported to the `Prefabs` folder. Our
    approach was to duplicate them so that we have the originals available should
    we need them.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 我们本可以将导入的预制体直接移动到`Prefabs`文件夹。我们的方法是将它们复制，以便在需要时可以使用原始的。
- en: Next, we will prepare the six areas in our game world for the Cucumber Patches.
    Our goal is to identify the rectangular areas, each with a flat area of ground.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将为游戏世界中的黄瓜补丁准备六个区域。我们的目标是确定每个都有平坦地面的矩形区域。
- en: 'Using the following reference image and the Unity skills you used to create
    your terrain, we need to flatten the six areas and record their rectangle boundaries:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下参考图像和您用于创建地形的Unity技能，我们需要将六个区域压平并记录它们的矩形边界：
- en: '![](img/938896a2-8310-4ed9-9e2f-8a9774d0d954.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/938896a2-8310-4ed9-9e2f-8a9774d0d954.png)'
- en: 'To prepare our Cucumber Patch areas, follow these steps:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备我们的黄瓜补丁区域，请按照以下步骤操作：
- en: Use the Paint Height tool to flatten a Cucumber Patch area.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用高度绘制工具将黄瓜补丁区域压平。
- en: Select GameObject | 3D Object | Plane from the top menu.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从顶部菜单选择GameObject | 3D Object | 平面。
- en: Position the plane so that it is on the ground, specifically in the flattened
    area.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将平面放置在地面上，具体是在压平的区域。
- en: In the Inspector view, set the Materials | Element 0 parameter to SpatialMappingOcclusion.
    This will make the plane transparent.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在检查器视图中，将材料 | 元素 0 参数设置为SpatialMappingOcclusion。这将使平面变得透明。
- en: Once the plane is in place, make note of the transform information.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦平面就位，记下变换信息。
- en: Repeat steps 1 through 5 for the remaining Cucumber Patches.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对剩余的黄瓜补丁重复步骤1至5。
- en: Rename the planes so that you have `CucumberPatchArea1`, `CucumberPatchArea2`, `CucumberPatchArea3`, `CucumberPatchArea4`, `CucumberPatchArea5`,
    and `CucumberPatchArea6`.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将平面重命名为`CucumberPatchArea1`、`CucumberPatchArea2`、`CucumberPatchArea3`、`CucumberPatchArea4`、`CucumberPatchArea5`和`CucumberPatchArea6`。
- en: 'When you are completed, you should have six defined areas for your Cucumber
    Patches. For reference, the six areas used in the book''s example are shown in
    the following table:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您应该有六个定义好的黄瓜补丁区域。为了参考，书中示例中使用的六个区域如下表所示：
- en: '| **Plane** | **Transform** |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| **平面** | **变换** |'
- en: '| `CucumberPatchArea1` |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `CucumberPatchArea1` |'
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | X | Y | Z |'
- en: '&#124; Position &#124; 7373 &#124; 40.03 &#124; 1689 &#124;'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位置 | 7373 | 40.03 | 1689 |'
- en: '&#124; Rotation &#124; 0 &#124; 10.082 &#124; 0 &#124;'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '| 旋转 | 0 | 10.082 | 0 |'
- en: '|'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CucumberPatchArea2` |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `CucumberPatchArea2` |'
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | X | Y | Z |'
- en: '&#124; Position &#124; 1211 &#124; 40.03 &#124; 1142 &#124;'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位置 | 1211 | 40.03 | 1142 |'
- en: '&#124; Rotation &#124; 0 &#124; 53.984 &#124; 0 &#124;'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '| 旋转 | 0 | 53.984 | 0 |'
- en: '|'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CucumberPatchArea3` |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `CucumberPatchArea3` |'
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | X | Y | Z |'
- en: '&#124; Position &#124; 1160 &#124; 40.03 &#124; 831 &#124;'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位置 | 1160 | 40.03 | 831 |'
- en: '&#124; Rotation &#124; 0 &#124; 87.876 &#124; 0 &#124;'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '| 旋转 | 0 | 87.876 | 0 |'
- en: '|'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CucumberPatchArea4` |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `CucumberPatchArea4` |'
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | X | Y | Z |'
- en: '&#124; Position &#124; 892 &#124; 40.03 &#124; 849 &#124;'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位置 | 892 | 40.03 | 849 |'
- en: '&#124; Rotation &#124; 0 &#124; 120.877 &#124; 0 &#124;'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '| 旋转 | 0 | 120.877 | 0 |'
- en: '|'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CucumberPatchArea5` |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `CucumberPatchArea5` |'
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | X | Y | Z |'
- en: '&#124; Position &#124; 1200 &#124; 40.03 &#124; 568 &#124;'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位置 | 1200 | 40.03 | 568 |'
- en: '&#124; Rotation &#124; 0 &#124; 143.801 &#124; 0 &#124;'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '| 旋转 | 0 | 143.801 | 0 |'
- en: '|'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `CucumberPatchArea6` |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `CucumberPatchArea6` |'
- en: '&#124;  &#124; X &#124; Y &#124; Z &#124;'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '|  | X | Y | Z |'
- en: '&#124; Position &#124; 1184 &#124; 40.03 &#124; 330 &#124;'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '| 位置 | 1184 | 40.03 | 330 |'
- en: '&#124; Rotation &#124; 0 &#124; 103.911 &#124; 0 &#124;'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '| 旋转 | 0 | 103.911 | 0 |'
- en: '|'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Our last step is to group the six Cucumber Patches in the Hierarchy panel to
    help stay organized. As we did with the Cherry Trees, we will right-click inside
    the Hierarchy panel and select Create Empty. Then rename the GameObject as `Cucumber
    Patch Areas`. Lastly, in the Hierarchy panel, select all six Cucumber Patch panes
    and place them in that GameObject.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的最后一步是将六个黄瓜补丁在层次面板中分组，以保持组织有序。就像我们对樱桃树所做的那样，我们将在层次面板内部右键单击并选择创建空对象。然后将GameObject重命名为`Cucumber
    Patch Areas`。最后，在层次面板中，选择所有六个黄瓜补丁窗格并将它们放置在那个GameObject中。
- en: In [Chapter 8](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml), *Implementing Our
    Non-Player Characters*, we will use the panes to add Cucumber Patches, Cucumbers,
    and beetles.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第8章](28e6a940-f5d3-49ba-8778-a0b533b4a83e.xhtml)，*实现我们的非玩家角色*，我们将使用窗格来添加黄瓜补丁、黄瓜和甲虫。
- en: Summary
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we spent considerable time making our game environment more
    robust. We imported and used several assets. We added trees and other objects
    to our scene. We created 3D objects using Unity's native modeling tools and imported
    assets from the Unity Asset Store, as well as from the publisher's companion site.
    Specifically, we added our game's Cherry Trees, and prepared areas for Cucumber
    Patches.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们花费了大量时间使我们的游戏环境更加健壮。我们导入了并使用了几个资产。我们在场景中添加了树木和其他对象。我们使用Unity的原生建模工具创建了3D对象，并从Unity资产商店以及出版商的配套网站上导入资产。具体来说，我们添加了游戏中的樱桃树，并为黄瓜补丁准备了区域。
- en: In [Chapter 7](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml), *Implementing Our
    Player Character*, we will incorporate our game's player character, the Cucumber
    Man. We will import the character, review the controls, examine the animations,
    and make the necessary configuration changes to fully use our character in the
    game. By the end of the chapter, you will be able to start testing the game.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7章](6a3fb463-b0c2-4145-9096-bc52d55cf905.xhtml)，*实现我们的玩家角色*，我们将整合游戏中的玩家角色，黄瓜人。我们将导入角色，审查控制，检查动画，并做出必要的配置更改，以便在游戏中完全使用我们的角色。到本章结束时，你将能够开始测试游戏。
