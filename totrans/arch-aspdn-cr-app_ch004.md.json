["```cs\npublic class AdminApp\n{\n    public async Task DisplayListAsync(\n        IBookService bookService,\n        IBookPresenter presenter)\n    {\n        var books = await bookService.FindAllAsync();\n        foreach (var book in books)\n        {\n            await presenter.DisplayAsync(book);\n        }\n    }\n}\npublic class PublicApp\n{\n    public async Task DisplayListAsync(\n        IBookService bookService,\n        IBookPresenter presenter)\n    {\n        var books = await bookService.FindAllAsync();\n        foreach (var book in books)\n        {\n            await presenter.DisplayAsync(book);\n        }\n    }\n}\n```", "```cs\npublic class AdminApp\n{\n    public async Task DisplayListAsync(\n        IBookService bookService,\n        IBookPresenter presenter)\n    {\n        var books = await bookService.FindAllAsync();\n        // We could filter the list here\n        await presenter.DisplayListAsync(books);\n    }\n}\npublic class PublicApp\n{\n    public async Task DisplayListAsync(\n        IBookService bookService,\n        IBookPresenter presenter)\n    {\n        var books = await bookService.FindAllAsync();\n        await presenter.DisplayListAsync(books);\n    }\n}\n```", "```cs\npublic record class Product(int Id, string Name);\n```", "```cs\nnamespace BeforeSRP;\npublic class ProductRepository\n{\n    public ValueTask<Product> GetOnePublicProductAsync(int productId)\n        => throw new NotImplementedException();\n    public ValueTask<Product> GetOnePrivateProductAsync(int productId)\n        => throw new NotImplementedException();\n    public ValueTask<IEnumerable<Product>> GetAllPublicProductsAsync()\n        => throw new NotImplementedException();\n    public ValueTask<IEnumerable<Product>> GetAllPrivateProductsAsync()\n        => throw new NotImplementedException();\n    public ValueTask CreateAsync(Product product)\n        => throw new NotImplementedException();\n    public ValueTask UpdateAsync(Product product)\n        => throw new NotImplementedException();\n    public ValueTask DeleteAsync(Product product)\n        => throw new NotImplementedException();\n}\n```", "```cs\nnamespace AfterSRP;\npublic class PublicProductReader\n{\n    public ValueTask<IEnumerable<Product>> GetAllAsync()\n        => throw new NotImplementedException();\n    public ValueTask<Product> GetOneAsync(int productId)\n        => throw new NotImplementedException();\n}\n```", "```cs\nnamespace AfterSRP;\npublic class PrivateProductRepository\n{\n    public ValueTask<IEnumerable<Product>> GetAllAsync()\n        => throw new NotImplementedException();\n    public ValueTask<Product> GetOneAsync(int productId)\n        => throw new NotImplementedException();\n    public ValueTask CreateAsync(Product product)\n        => throw new NotImplementedException();\n    public ValueTask DeleteAsync(Product product)\n        => throw new NotImplementedException();\n    public ValueTask UpdateAsync(Product product)\n        => throw new NotImplementedException();\n}\n```", "```cs\npublic record class Entity();\npublic class EntityRepository\n{\n    public virtual Task CreateAsync(Entity entity)\n        => throw new NotImplementedException();\n}\n```", "```cs\nnamespace OCP.NoComposability;\npublic class EntityService : EntityRepository\n{\n    public async Task ComplexBusinessProcessAsync(Entity entity)\n    {\n        // Do some complex things here\n        await CreateAsync(entity);\n        // Do more complex things here\n    }\n}\n```", "```cs\nnamespace OCP.Composability;\npublic class EntityService\n{\n    private readonly EntityRepository _repository\n        = new EntityRepository();\n    public async Task ComplexBusinessProcessAsync(Entity entity)\n    {\n        // Do some complex things here\n        await _repository.CreateAsync(entity);\n        // Do more complex things here\n    }\n}\n```", "```cs\nnamespace OCP.DependencyInjection;\npublic class EntityService\n{\n    private readonly EntityRepository _repository;\n    public EntityService(EntityRepository repository)\n    {\n        _repository = repository;\n    }\n    public async Task ComplexBusinessProcessAsync(Entity entity)\n    {\n        // Do some complex things here\n        await _repository.CreateAsync(entity);\n        // Do more complex things here\n    }\n}\n```", "```cs\nusing OCP;\nusing OCP.DependencyInjection;\n// Create the entity in database 1\nvar repository1 = new EntityRepository(/* connection string 1 */);\nvar service1 = new EntityService(repository1);\n// Create the entity in database 2\nvar repository2 = new EntityRepository(/* connection string 2 */);\nvar service2 = new EntityService(repository2);\n// Save an entity in two different databases\nvar entity = new Entity();\nawait service1.ComplexBusinessProcessAsync(entity);\nawait service2.ComplexBusinessProcessAsync(entity);\n```", "```cs\npublic record class Weapon { }\npublic record class Sword : Weapon { }\npublic record class TwoHandedSword : Sword { }\n```", "```cs\npublic interface ICovariant<out T>\n{\n    T Get();\n}\n```", "```cs\npublic class SwordGetter : ICovariant<Sword>\n{\n    private static readonly Sword _instance = new();\n    public Sword Get() => _instance;\n}\n```", "```cs\n[Fact]\npublic void Generic_Covariance_tests()\n{\n    ICovariant<Sword> swordGetter = new SwordGetter();\n    ICovariant<Weapon> weaponGetter = swordGetter;\n    Assert.Same(swordGetter, weaponGetter);\n    Sword sword = swordGetter.Get();\n    Weapon weapon = weaponGetter.Get();\n    var isSwordASword = Assert.IsType<Sword>(sword);\n    var isWeaponASword = Assert.IsType<Sword>(weapon);\n    Assert.NotNull(isSwordASword);\n    Assert.NotNull(isWeaponASword);\n}\n```", "```cs\npublic interface IContravariant<in T>\n{\n    void Set(T value);\n}\n```", "```cs\npublic class WeaponSetter : IContravariant<Weapon>\n{\n    private Weapon? _weapon;\n    public void Set(Weapon value)\n        => _weapon = value;\n}\n```", "```cs\n[Fact]\npublic void Generic_Contravariance_tests()\n{\n    IContravariant<Weapon> weaponSetter = new WeaponSetter();\n    IContravariant<Sword> swordSetter = weaponSetter;\n    Assert.Same(swordSetter, weaponSetter);\n    // Contravariance: Weapon > Sword > TwoHandedSword\n    weaponSetter.Set(new Weapon());\n    weaponSetter.Set(new Sword());\n    weaponSetter.Set(new TwoHandedSword());\n    // Contravariance: Sword > TwoHandedSword\n    swordSetter.Set(new Sword());\n    swordSetter.Set(new TwoHandedSword());\n}\n```", "```cs\nswordSetter.Set(new Weapon());\n```", "```cs\nCannot convert from Variance.Weapon to Variance.Sword.\n```", "```cs\nnamespace LiskovSubstitution;\npublic class TestClassName\n{\n    public static TheoryData<SuperClass> InstancesThatThrowsSuperExceptions = new TheoryData<SuperClass>()\n    {\n        new SuperClass(),\n        new SubClassOk(),\n        new SubClassBreak(),\n    };\n    [Theory]\n    [MemberData(nameof(InstancesThatThrowsSuperExceptions))]\n    public void Test_method_name(SuperClass sut)\n    {\n        // Scenario\n    }\n    // Other classes, like SuperClass, SubClassOk, \n    // and SubClassBreak\n}\n```", "```cs\ntry\n{\n    sut.Do();\n}\ncatch (SuperException ex)\n{\n    // Some code\n}\n```", "```cs\npublic class SuperClass\n{\n    public virtual void Do()\n        => throw new SuperException();\n}\npublic class SuperException : Exception { }\n```", "```cs\npublic class SubClassOk : SuperClass\n{\n    public override void Do()\n        => throw new SubException();\n}\npublic class SubException : SuperException { }\n```", "```cs\npublic class SubClassBreak : SuperClass\n{\n    public override void Do()\n        => throw new AnotherException();\n}\npublic class AnotherException : Exception { }\n```", "```cs\nvar value = 5;\nvar result = sut.IsValid(value);\nConsole.WriteLine($\"Do something with {result}\");\n```", "```cs\npublic class SuperClass\n{\n    public virtual bool IsValid(int value)\n    {\n        if (value < 0)\n        {\n            throw new ArgumentException(\n                \"Value must be positive.\", \n                nameof(value)\n            );\n        }\n        return true;\n    }\n}\n```", "```cs\npublic class SubClassOk : SuperClass\n{\n    public override bool IsValid(int value)\n    {\n        if (value < -10)\n        {\n            throw new ArgumentException(\n                \"Value must be greater or equal to -10.\", \n                nameof(value)\n            );\n        }\n        return true;\n    }\n}\n```", "```cs\npublic class SubClassBreak : SuperClass\n{\n    public override bool IsValid(int value)\n    {\n        if (value < 10) // Break LSP\n        {\n            throw new ArgumentException(\n                \"Value must be greater than 10.\", \n                nameof(value)\n            );\n        }\n        return true;\n    }\n}\n```", "```cs\nvar value = 5;\nvar result = sut.Do(value);\nConsole.WriteLine($\"Do something with {result.Value}\");\n```", "```cs\npublic record class Model(int Value);\n```", "```cs\npublic class SuperClass\n{\n    public virtual Model Do(int value)\n    {\n        return new(value);\n    }\n}\n```", "```cs\npublic class SubClassOk : SuperClass\n{\n    private int _doCount = 0;\n    public override Model Do(int value)\n    {\n        var baseModel = base.Do(value);\n        return new SubModel(baseModel.Value, ++_doCount);\n    }\n}\npublic record class SubModel(int Value, int DoCount) : Model(Value);\n```", "```cs\npublic class SubClassBreak : SuperClass\n{\n    public override Model Do(int value)\n    {\n        if (value == 5)\n        {\n            return null;\n        }\n        return base.Do(value);\n    }\n}\n```", "```cs\npublic record class Product(int Id, string Name);\n```", "```cs\nnamespace InterfaceSegregation.Before;\npublic interface IProductRepository\n{\n    public ValueTask<IEnumerable<Product>> GetAllPublicProductAsync();\n    public ValueTask<IEnumerable<Product>> GetAllPrivateProductAsync();\n    public ValueTask<Product> GetOnePublicProductAsync(int productId);\n    public ValueTask<Product> GetOnePrivateProductAsync(int productId);\n    public ValueTask CreateAsync(Product product);\n    public ValueTask UpdateAsync(Product product);\n    public ValueTask DeleteAsync(Product product);\n}\n```", "```cs\nnamespace InterfaceSegregation.After;\npublic interface IProductReader\n{\n    public ValueTask<IEnumerable<Product>> GetAllAsync();\n    public ValueTask<Product> GetOneAsync(int productId);\n}\n```", "```cs\nnamespace InterfaceSegregation.After;\npublic interface IProductWriter\n{\n    public ValueTask CreateAsync(Product product);\n    public ValueTask UpdateAsync(Product product);\n    public ValueTask DeleteAsync(Product product);\n}\n```", "```cs\nnamespace InterfaceSegregation.After;\npublic class PublicProductReader : IProductReader\n{\n    public ValueTask<IEnumerable<Product>> GetAllAsync()\n        => throw new NotImplementedException();\n    public ValueTask<Product> GetOneAsync(int productId)\n        => throw new NotImplementedException();\n}\n```", "```cs\nnamespace InterfaceSegregation.After;\npublic class PrivateProductRepository : IProductReader, IProductWriter\n{\n    public ValueTask<IEnumerable<Product>> GetAllAsync()\n        => throw new NotImplementedException();\n    public ValueTask<Product> GetOneAsync(int productId)\n        => throw new NotImplementedException();\n    public ValueTask CreateAsync(Product product)\n        => throw new NotImplementedException();\n    public ValueTask DeleteAsync(Product product)\n        => throw new NotImplementedException();\n    public ValueTask UpdateAsync(Product product)\n        => throw new NotImplementedException();\n}\n```", "```cs\nusing InterfaceSegregation.After;\nvar publicProductReader = new PublicProductReader();\nvar privateProductRepository = new PrivateProductRepository();\nReadProducts(publicProductReader);\nReadProducts(privateProductRepository);\n// Error: Cannot convert from PublicProductReader to IProductWriter\n// ModifyProducts(publicProductReader); // Invalid\nWriteProducts(privateProductRepository);\nReadAndWriteProducts(privateProductRepository, privateProductRepository);\nReadAndWriteProducts(publicProductReader, privateProductRepository);\nvoid ReadProducts(IProductReader productReader)\n{\n    Console.WriteLine(\n        \"Reading from {0}.\",\n        productReader.GetType().Name\n    );\n}\nvoid WriteProducts(IProductWriter productWriter)\n{\n    Console.WriteLine(\n        \"Writing to {0}.\",\n        productWriter.GetType().Name\n    );\n}\nvoid ReadAndWriteProducts(IProductReader productReader, IProductWriter productWriter)\n{\n    Console.WriteLine(\n        \"Reading from {0} and writing to {1}.\",\n        productReader.GetType().Name,\n        productWriter.GetType().Name\n    );\n}\n```", "```cs\nReading from PublicProductReader.\nReading from PrivateProductRepository.\nWriting to PrivateProductRepository.\nReading from PrivateProductRepository and writing to PrivateProductRepository.\nReading from PublicProductReader and writing to PrivateProductRepository.\n```", "```cs\nReadProducts(publicProductReader);\nReadProducts(privateProductRepository);\n```", "```cs\nReading from PublicProductReader.\nReading from PrivateProductRepository.\n```", "```cs\nWriteProducts(privateProductRepository);\n```", "```cs\nWriting to PrivateProductRepository.\n```", "```cs\nModifyProducts(publicProductReader);\n```", "```cs\nReadAndWriteProducts(\n    privateProductRepository, \n    privateProductRepository\n);\nReadAndWriteProducts(\n    publicProductReader, \n    privateProductRepository\n);\n```", "```cs\nReading from PrivateProductRepository and writing to PrivateProductRepository.\nReading from PublicProductReader and writing to PrivateProductRepository.\n```", "```cs\nnamespace Abstractions;\npublic interface IDataPersistence\n{\n    void Persist();\n}\n```", "```cs\nusing Abstractions;\nnamespace Local;\npublic class LocalDataPersistence : IDataPersistence\n{\n    public void Persist()\n    {\n        Console.WriteLine(\"Data persisted by LocalDataPersistence.\");\n    }\n}\n```", "```cs\nusing Abstractions;\nnamespace Sql;\npublic class SqlDataPersistence : IDataPersistence\n{\n    public void Persist()\n    {\n        Console.WriteLine(\"Data persisted by SqlDataPersistence.\");\n    }\n}\n```", "```cs\nusing Abstractions;\nnamespace App;\npublic class SomeService\n{\n    public void Operation(IDataPersistence someDataPersistence)\n    {\n        Console.WriteLine(\"Beginning SomeService.Operation.\");\n        someDataPersistence.Persist();\n        Console.WriteLine(\"SomeService.Operation has ended.\");\n    }\n}\n```", "```cs\nusing Core;\nusing Local;\nusing Sql;\nvar sqlDataPersistence = new SqlDataPersistence();\nvar localDataPersistence = new LocalDataPersistence();\nvar service = new SomeService();\nservice.Operation(localDataPersistence);\nservice.Operation(sqlDataPersistence);\n```", "```cs\nBeginning SomeService.Operation.\nData persisted by LocalDataPersistence.\nSomeService.Operation has ended.\nBeginning SomeService.Operation.\nData persisted by SqlDataPersistence.\nSomeService.Operation has ended.\n```"]