- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Deploying to Azure
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到Azure
- en: In this chapter, we will explore **Continuous Integration and Continuous Deployment**
    ( **CI/CD** ) on Azure. These are critical skills for enterprise development and
    ensure that bugs are caught early in the process, especially when working with
    a team. The earlier integration issues are surfaced, the less expensive they are
    to fix.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨Azure上的**持续集成和持续部署**（**CI/CD**）。这些是企业开发的关键技能，确保在开发过程中尽早发现错误，尤其是在团队协作时。集成问题越早被发现，修复成本就越低。
- en: Among the skills that we will review are creating an Azure project, creating
    a pipeline, and configuring the pipeline for CI/CD.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回顾的技能包括创建Azure项目、创建管道以及配置CI/CD的管道。
- en: This chapter will build on the skills you developed in [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    and walk you through setting up CI/CD step by step.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将基于你在[*第6章*](B21998_06.xhtml#_idTextAnchor077)中培养的技能，逐步指导你设置CI/CD。
- en: 'We will cover the following topics in this chapter:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中将涵盖以下主题：
- en: Using tests to ensure code quality
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用测试确保代码质量
- en: Deploying from DevOps
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从DevOps部署
- en: Deploying to Azure
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署到Azure
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'For this chapter, you’ll need the following:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章，你需要以下内容：
- en: Visual Studio
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio
- en: The **Azure.Data.Tables** NuGet package
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure.Data.Tables** NuGet包'
- en: Getting started
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: At the end of [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077) , you saw how
    easy it is to deploy to Azure directly from Visual Studio. This is fine for testing
    scenarios and one-off experiments or proofs of concept, but in a production scenario,
    this one project may be part of a much larger system.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第6章*](B21998_06.xhtml#_idTextAnchor077)的结尾，你看到了如何轻松地从Visual Studio直接部署到Azure。这对于测试场景和一次性实验或概念验证来说是不错的，但在生产场景中，这个项目可能只是更大系统的一部分。
- en: Setting up a series of “gates” (checks) before publishing to production can
    be advantageous for many reasons. Note that there are many types of release gates.
    The most common (and important) are **Pull Requests** ( **PRs** ), unit tests,
    integration tests, and end-to-end tests.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在发布到生产之前设置一系列“关卡”（检查）可能出于许多原因是有利的。请注意，存在许多类型的发布关卡。最常见（且最重要的）是**拉取请求**（**PRs**）、单元测试、集成测试和端到端测试。
- en: Using tests to ensure code quality
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用测试确保代码质量
- en: 'There are many kinds of tests that you might run against your code. Among the
    most important are the following:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对你的代码运行许多种测试。其中最重要的包括以下几种：
- en: Unit tests
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单元测试
- en: Integration tests
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成测试
- en: Automated tests
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化测试
- en: Unit tests cover one section of your code that does one thing. For example,
    many unit tests have a 1:1 correspondence with methods, but not always. Think
    functionality rather than code. However, they must run extremely fast so that
    you run them after every code change. This allows you to code with confidence,
    knowing that if anything breaks, you know that something went wrong and where
    the problem is located.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试覆盖你的代码的一个部分，执行一个功能。例如，许多单元测试与方法和功能一一对应，但并不总是如此。考虑功能而不是代码。然而，它们必须运行得非常快，以便在每次代码更改后运行。这让你在编码时更有信心，知道如果有什么东西出错了，你就知道出了什么问题，以及问题所在。
- en: 'Integration tests are run less often, typically after completing a discreet
    set of functionality to make sure that what you’ve created fits together with
    what is already in place. Finally, end-to-end tests ensure that the entire set
    of scenarios works as expected. This is, typically, where professional QA people
    run their tests. As programmers, it is almost impossible to run thorough end-to-end
    tests on our own code: we see what we expect to see, and we run what we expect
    the user to run. QA professionals can create a suite of tests to ensure that the
    program works well with good data but also with bad or corrupted data and when
    the user does something we didn’t expect.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试运行得较少，通常在完成一组离散的功能后进行，以确保你创建的内容与现有内容相匹配。最后，端到端测试确保整个场景集按预期工作。通常，这是专业QA人员运行测试的地方。作为程序员，我们几乎不可能对我们的代码进行彻底的端到端测试：我们看到我们期望看到的东西，我们运行我们期望用户运行的东西。QA专业人员可以创建一系列测试来确保程序在良好的数据下运行良好，但也适用于不良或损坏的数据，以及当用户执行我们没有预料到的事情时。
- en: Fortunately, you can automate all of these tests, checking various levels of
    the code to ensure nothing has regressed. While we won’t be looking at all of
    the advanced scenarios that Azure DevOps provides for us, we will be setting up
    a standard build and release pipeline that you can use to automate your deployments.
    In short, we will set up CI that will automate what we just did when we manually
    published to Azure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，你可以自动化所有这些测试，检查代码的各个层次，以确保没有退步。虽然我们不会查看 Azure DevOps 为我们提供的所有高级场景，但我们将设置一个标准的构建和发布管道，你可以用它来自动化你的部署。简而言之，我们将设置
    CI，以自动化我们手动发布到 Azure 时所做的操作。
- en: Manual versus automated implementation
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动与自动实现
- en: Going a little deeper, let’s compare DevOps (continuous delivery) and publishing
    through Visual Studio manually. You can have automated builds whenever a new commit
    has been pushed to master. Along with automated builds on a branch, you can have
    builds checked with PRs. PRs have the benefit of another skilled programmer checking
    and testing your code before it is merged in. The fact is that automated tests
    can only go so far. PRs are also a good place to determine and test which environments
    your code requires (e.g., Windows, Linux, etc.).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 深入一点，让我们比较 DevOps（持续交付）和通过 Visual Studio 手动发布。每当向 master 推送新提交时，你都可以有自动构建。除了分支上的自动构建，你还可以有与
    PRs 检查的构建。PRs 的好处是，在代码合并之前，有另一名熟练的程序员检查和测试你的代码。事实上，自动测试只能走这么远。PRs 也是确定和测试你的代码需要哪些环境（例如，Windows、Linux
    等）的好地方。
- en: Using the same binaries
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用相同的二进制文件
- en: It is highly advantageous to deploy exactly the same binaries to your lower
    environments, such as your local computer, and then promote these same binaries
    to production. Though C# and .NET do have deterministic builds, the other parts
    of your deployed package or container may not. If something does go wrong after
    deployment, DevOps provides the ability to immediately roll back your deployed
    artifact. A history of these deployments is kept for each environment as well.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将完全相同的二进制文件部署到你的低级环境，如你的本地计算机，然后将这些相同的二进制文件提升到生产环境是非常有利的。尽管 C# 和 .NET 确实有确定性的构建，但你的部署包或容器中的其他部分可能没有。如果部署后出现问题，DevOps
    提供了立即回滚已部署工件的能力。每个环境都保存了这些部署的历史记录。
- en: While DevOps is superior in a lot of scenarios, it can be somewhat more difficult
    when debugging build failures. Each step of the build pipeline is logged for you
    to look at and diagnose later; however, that is sometimes easier said than done.
    Additionally, the more concurrent pipeline builds there are, the more difficult
    it may be to figure out what went wrong in the case of a failure. Compounding
    this, the larger the team gets, the more queueing of builds may happen.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 DevOps 在很多场景下都更优越，但在调试构建失败时可能会有些困难。构建管道的每一步都会为你记录下来，以便你稍后查看和诊断；然而，这有时说起来容易做起来难。此外，并发管道构建越多，在失败的情况下可能就越难找出出了什么问题。更糟糕的是，团队越大，构建队列可能就越长。
- en: With that in place, we are ready to deploy to DevOps.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一来，我们就准备好将内容部署到 DevOps 了。
- en: Tip
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The number of concurrent executing pipelines and the execution minutes per month
    is limited in the free version of DevOps. You can, of course, subscribe to increase
    these restrictions.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps 免费版本中并发执行管道的数量和每月执行分钟数是有限的。当然，你可以订阅以增加这些限制。
- en: Deploying from DevOps
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 DevOps 部署
- en: 'We’ll now be walking through deploying from DevOps instead of our local Visual
    Studio. The first step is to create your DevOps project, as shown in *Figure 10*
    *.1* :'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将通过 DevOps 而不是我们的本地 Visual Studio 进行部署。第一步是创建你的 DevOps 项目，如图 *图 10.1* 所示：
- en: '![Figure 10.1 – DevOps opening page](img/B21988_10_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.1 – DevOps 开放页面](img/B21988_10_1.jpg)'
- en: Figure 10.1 – DevOps opening page
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.1 – DevOps 开放页面
- en: 'To create the project, we’ll use the wizard. (The first time, the wizard will
    probably come up immediately, otherwise click to bring up the wizard.) Here are
    the steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目时，我们将使用向导。（第一次，向导可能会立即出现，否则点击以打开向导。）以下是步骤：
- en: Go to [dev.Azure.com](http://dev.Azure.com) .
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [dev.Azure.com](http://dev.Azure.com) 。
- en: Click on **Start free** (even if you already have an account).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **开始免费**（即使你已经有一个账户）。
- en: If it redirects you, enter **dev.azure.com** in the address box.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果它重定向你，请在地址框中输入 **dev.azure.com**。
- en: Click **New Project** in the upper right.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右上角点击 **新建项目**。
- en: Enter a name and description and choose **private** .
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个名称和描述，并选择 **私有**。
- en: Click on **Advanced** and make sure the version control is set to **Git** .
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**高级**并确保版本控制设置为**Git**。
- en: Click **Create** .
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。
- en: Let’s now import a bit of code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们导入一些代码。
- en: Importing sample code
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入示例代码
- en: 'Before we can deploy to Azure, we need to have a repository with the code we
    want to deploy. Clone the code for [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    from [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter06](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter06)
    and copy or move it into another folder so that it is no longer associated with
    the cloned repo. Open the solution in Visual Studio. Now we want to use Visual
    Studio to create a repository in our new DevOps project. Here are the steps:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以部署到Azure之前，我们需要有一个包含我们想要部署的代码的存储库。从[https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter06](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter06)克隆[*第6章*](B21998_06.xhtml#_idTextAnchor077)的代码，并将其复制或移动到另一个文件夹，以便它不再与克隆的存储库相关联。在Visual
    Studio中打开解决方案。现在我们想要使用Visual Studio在我们的新DevOps项目中创建一个存储库。以下是步骤：
- en: Open the **GitChanges** view.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**GitChanges**视图。
- en: Click **Create** **Git Repository** .
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建Git存储库**。
- en: Select **Azure DevOps** , as shown in *Figure 10* *.2* , and click on **Create**
    **and Push** .
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Azure DevOps**，如图*图10* *.2* 所示，然后点击**创建**和**推送**。
- en: '![Figure 10.2 – Create a Git repository](img/B21988_10_2.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – 创建Git存储库](img/B21988_10_2.jpg)'
- en: Figure 10.2 – Create a Git repository
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 创建Git存储库
- en: With that in place, we are ready to create the actual build pipeline.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在此基础上，我们准备创建实际的构建管道。
- en: Creating the build pipeline
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建构建管道
- en: 'Now that you have your code in an Azure repository, you can create the build
    pipeline. To do so, take the following steps:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经将代码放入Azure存储库中，您可以创建构建管道。为此，请执行以下步骤：
- en: 'Click on **Create Pipeline** , as shown in *Figure 10* *.3* :'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建管道**，如图*图10* *.3* 所示：
- en: '![Figure 10.3 – Create Pipeline](img/B21988_10_3.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 创建管道](img/B21988_10_3.jpg)'
- en: Figure 10.3 – Create Pipeline
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 创建管道
- en: You should see a wizard that will walk you through creating your pipeline.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个向导，它将引导您创建管道。
- en: The first step asks where your code is. DevOps supports a few different code
    repositories, including Azure Repos, Bitbucket, GitHub, GitHub Enterprise, other
    generic Git repositories, and Subversion.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步询问您的代码在哪里。DevOps支持几个不同的代码存储库，包括Azure Repos、Bitbucket、GitHub、GitHub Enterprise、其他通用Git存储库和Subversion。
- en: Note
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are two different ways to build your pipelines. The first is through YAML
    files, which can be in your repository alongside your code, which has the added
    benefit of being versioned. The second supported way to build your pipelines is
    the way we’ll be taking.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 构建管道有两种不同的方式。第一种是通过YAML文件，这些文件可以存储在您的代码库中，与代码一起，这有一个额外的优势，就是可以版本控制。第二种支持构建管道的方式是我们将要采用的方式。
- en: Click on **Use the classic editor** , which will give us a much more in-depth
    UI to create a pipeline without YAML
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**使用经典编辑器**，这将为我们提供一个更深入的UI来创建管道，而不需要YAML。
- en: 'Choose your repository in the next dropdown and then select the default branch,
    as shown in *Figure 10* *.4* :'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个下拉菜单中选择你的存储库，然后选择默认分支，如图*图10* *.4* 所示：
- en: '![Figure 10.4 – Select a source](img/B21988_10_4.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 选择源](img/B21988_10_4.jpg)'
- en: Figure 10.4 – Select a source
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 选择源
- en: Click **Continue** and you will see a screen that asks you to select a template
    for your project. A number of standard ones are displayed by default but there
    are many others available. Since we are building and deploying an Azure function,
    scroll down to where it lists **Azure Functions for .NET** , as shown in *Figure
    10* *.5* , and click **Apply** .
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**继续**，您将看到一个屏幕，要求您为项目选择一个模板。默认情况下显示了一些标准模板，但还有许多其他模板可供选择。由于我们正在构建和部署Azure函数，请滚动到显示**Azure
    Functions for .NET**的地方，如图*图10* *.5* 所示，然后点击**应用**。
- en: '![Figure 10.5 – Azure Functions for .NET](img/B21988_10_5.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – Azure Functions for .NET](img/B21988_10_5.jpg)'
- en: Figure 10.5 – Azure Functions for .NET
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – Azure Functions for .NET
- en: This takes you to an editor for your pipeline. You should see various tabs,
    including **Tasks** , **Variable** , **Triggers** , **Options** , and **History**
    .
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带您进入管道编辑器。您应该看到各种选项卡，包括**任务**、**变量**、**触发器**、**选项**和**历史记录**。
- en: The pipeline item under the **Tasks** tab should be selected by default. If
    not, select it. In either case, click it and then rename your pipeline to whatever
    you would like.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **任务** 选项卡下，默认应选择管道项。如果没有，请选择它。在任一情况下，点击它并将您的管道重命名为您想要的名称。
- en: The agent pool allows you to select from Microsoft-hosted build machines or,
    if you have custom private agents set up, you can also select those. We will not
    be covering private agents in this book.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 代理池允许您从 Microsoft 托管的构建机器中选择，或者如果您已设置自定义私有代理，您也可以选择那些。我们将在本书中不涉及私有代理。
- en: Select **Azure Pipelines** for the agent pool, and select **ubuntu latest**
    for **Agent Specification** , as shown in *Figure 10* *.6* .
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Azure Pipelines** 作为代理池，并选择 **ubuntu latest** 作为 **代理规范**，如图 *图 10.6* 所示。
- en: Note
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Although leaving the agent specification as Windows may work, we find it prevents
    a number of issues when you match your agent specification to the resource type
    that you created in Azure. In our case, we made a Linux Azure function.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然将代理规范保留为 Windows 可能可行，但我们发现当您将代理规范与在 Azure 中创建的资源类型匹配时，它可以防止许多问题。在我们的例子中，我们创建了一个
    Linux Azure 函数。
- en: '![Figure 10.6 – Pipeline setup](img/B21988_10_6.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 管道设置](img/B21988_10_6.jpg)'
- en: Figure 10.6 – Pipeline setup
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 管道设置
- en: Select **Get Sources** under the **Tasks** tab. This should already be filled
    out for you with a number of defaults, including your default branch to build
    from. The defaults for **Agent job 1** under the **Get sources** item should be
    fine and can be retained as is. Click on **Build Project** under **Agent job 1**
    to select the actual task that is used to build the published output, as shown
    in *Figure 10* *.7* .
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **任务** 选项卡下选择 **获取源**。这应该已经为您填写了一些默认值，包括构建时使用的默认分支。在 **获取源** 项下 **代理作业 1**
    的默认值应该是合适的，可以保留不变。点击 **代理作业 1** 下的 **构建项目**，以选择用于构建发布输出的实际任务，如图 *图 10.7* 所示。
- en: '![Figure 10.7 – Get sources](img/B21988_10_7.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.7 – 获取源](img/B21988_10_7.jpg)'
- en: Figure 10.7 – Get sources
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 获取源
- en: The default task should be **Build Project .NET Core** . You can build a number
    of different types of assemblies, including console, libraries, ASP.NET Core,
    and, in our case, Azure Functions. As of the time of writing, task version 2 is
    currently supported and is the default.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 默认任务应该是 **构建项目 .NET Core**。您可以构建多种不同类型的程序集，包括控制台、库、ASP.NET Core，以及在我们的例子中，Azure
    Functions。截至本书编写时，任务版本 2 当前受支持，并且是默认版本。
- en: Change the display name to something more descriptive, such as **Publish Project**
    .
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将显示名称更改为更具描述性的名称，例如 **发布项目**。
- en: Select **publish** from the **Command** dropdown. Uncheck **Publish web projects**
    . Though our Azure function is an API and could be considered a web project in
    a different context, we do not need this particular functionality for what we
    are doing. Leave the arguments as is.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **命令** 下拉菜单中选择 **发布**。取消勾选 **发布 Web 项目**。尽管我们的 Azure 函数是一个 API，在另一种情况下可能被视为
    Web 项目，但我们不需要这个特定的功能。保留参数不变。
- en: Ensure that **Zip published projects** and **Add project’s folder name to publish
    path** are both checked.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保已勾选 **压缩发布项目** 和 **将项目文件夹名称添加到发布路径**。
- en: In the **Arguments** text box, change **publish_output** to **$(build.artifactstagingdirectory)**
    , as shown in *Figure 10* *.8* .
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **参数** 文本框中，将 **publish_output** 更改为 **$(build.artifactstagingdirectory)**，如图
    *图 10.8* 所示。
- en: '![Figure 10.8 – Publish Project](img/B21988_10_8.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8 – 发布项目](img/B21988_10_8.jpg)'
- en: Figure 10.8 – Publish Project
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 发布项目
- en: You can explore the other **Advanced** , **Control Options** , and **Output
    Variables** expanders but the defaults should be fine.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以探索其他 **高级**、**控制选项** 和 **输出变量** 展开程序，但默认值应该是合适的。
- en: Right-click on **Archive Files** and choose **Remove Task** .
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 **存档文件** 并选择 **移除任务**。
- en: You are now ready to publish that artifact to DevOps.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好将此工件发布到 DevOps。
- en: Publishing an artifact
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布工件
- en: 'To publish the artifact, follow these steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要发布工件，请按照以下步骤操作：
- en: 'Click on **Publish Artifact: Drop** on the left side.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧的 **发布工件：Drop**。
- en: This is what uploads your newly zipped output folder to DevOps’s artifact storage
    for further release later. The defaults in this section should be fine.
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这会将您新压缩的输出文件夹上传到 DevOps 的工件存储库，以便稍后进一步发布。本节中的默认值应该是合适的。
- en: Click on the **Triggers** tab. Check the **Enable continuous integration** box,
    and ensure that **Include** is selected for the master branch. This is what triggers
    builds on every push to master.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **Triggers** 选项卡。勾选 **Enable continuous integration** 复选框，并确保 **Include**
    对应主分支被选中。这是在每次向主分支推送时触发构建的原因。
- en: Click **Save & queue** under the **Save & queue** dropdown (to the right of
    the tabs).
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Save & queue** 下拉菜单下点击 **Save & queue**（位于选项卡右侧）。
- en: When the **Run pipeline** dialog box appears, fill in a comment just like you
    would when committing code, and click **Save** and **Run** .
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当出现 **Run pipeline** 对话框时，填写一个注释，就像您提交代码时一样，然后点击 **Save** 和 **Run**。
- en: Click on the **Pipelines** tab on the far left, which will bring you back to
    the list of pipelines.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击最左侧的 **Pipelines** 选项卡，这将带您回到管道列表。
- en: The pipeline that you named should show, and the icon should be blue on your
    screen indicating that it is executing the build pipeline. If it is finished,
    or after a minute or so, it will turn green.
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您命名的管道应该显示，屏幕上的图标应该是蓝色，表示它正在执行构建管道。如果它已完成，或者大约一分钟后，它将变为绿色。
- en: Click on the larger list item to go to the list of the builds for that pipeline,
    or the text of the commit message to go directly to those build details.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击较大的列表项以转到该管道的构建列表，或直接点击提交消息文本以转到那些构建详情。
- en: On the **Summary** tab, you should see a variety of information, including the
    build number, branch, commit, number of artifacts published, and list of jobs.
    Next to the **Summary** tab may be other tabs. These can be added by other plugins.
    Clicking on the job indicated by the green check displays the individual steps
    that the agent used to build your artifact. All standard out (console output)
    is captured and saved for use in the debugging build errors. Usually, build errors
    will be prominent and direct you to the location of the error.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **Summary** 选项卡上，您应该看到各种信息，包括构建号、分支、提交、发布的工件数量和作业列表。在 **Summary** 选项卡旁边可能有其他选项卡。这些可以通过其他插件添加。点击绿色勾选的作业可以显示代理构建您的工件所使用的单个步骤。所有标准输出（控制台输出）都被捕获并保存以用于调试构建错误。通常，构建错误会突出显示并指导您到错误的位置。
- en: Deploying your artifact to Azure
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将您的工件部署到 Azure
- en: 'Now that your artifact is built and zipped, we’ll deploy it to Azure:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的工件已构建并压缩，我们将将其部署到 Azure：
- en: Click on the **Releases** subsection under **Pipelines** on the left. Click
    on **New Release Pipeline** . Once again, a familiar **Select a Template** screen
    should be shown.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧点击 **Pipelines** 下的 **Releases** 子选项。点击 **New Release Pipeline**。再次，应该会显示一个熟悉的
    **Select a Template** 屏幕。
- en: You can scroll down or search for **Functions** in the list, select the one
    that says **Deploy a Function App to Azure Functions** , and click **Apply** .
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在列表中向下滚动或搜索 **Functions**，选择一个说 **Deploy a Function App to Azure Functions**
    的选项，然后点击 **Apply**。
- en: You should now see a stage pop out named **Stage one** . This entire section
    can be customized with different business workflows according to your needs. For
    this exercise, we will have a single environment.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在应该看到一个名为 **Stage one** 的阶段弹出。根据您的需求，整个部分可以用不同的业务工作流程进行自定义。对于这个练习，我们将只有一个环境。
- en: Change the stage name to **Production** . Click on **Add an Artifact** . Select
    the source of the artifact, which in our case is a build artifact – which may
    already be selected.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将阶段名称更改为 **Production**。点击 **Add an Artifact**。选择工件源，在我们的例子中是构建工件——可能已经选中。
- en: Select your project and then your source build pipeline. Leave the latest as
    the default version and your source alias should already be pre-populated. Click
    **Add** .
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的项目，然后选择您的源构建管道。保留最新版本作为默认版本，您的源别名应该已经预先填充。点击 **Add**。
- en: One of the most powerful opportunities when deploying to Azure is CD. Every
    time your code is checked in and approved, a version is created and deployed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署到 Azure 时，最强大的机会之一是 CD。每次您的代码被检查并批准后，都会创建并部署一个版本。
- en: Continuous deployment
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续部署
- en: 'Your artifact name should now be in the **Artifact** section. Take the following
    steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您的工件名称现在应该在 **Artifact** 部分中。按照以下步骤操作：
- en: Select the lightning bolt icon on the artifact to show the CD triggers.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在工件上选择闪电图标以显示 CD 触发器。
- en: Enable the CD. This is how we automate the creation of a release after the build
    is completed.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 CD。这是我们自动化构建完成后创建发布的方式。
- en: Click on the lightning bolt icon on the production stage. This is also part
    of the automatic deployment configuration. **After Release** should be selected
    by default; however, if you do not want the release pipeline to automatically
    start, then select **Manual Only** .
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击生产阶段上的闪电图标。这也是自动部署配置的一部分。默认情况下应选择**发布后**；然而，如果您不希望发布管道自动启动，则选择**仅手动**。
- en: Next, click on the **1 Job, 1 Task** label with the red icon, or you can select
    the **Tasks** tab. This should look similar to the build pipeline that we created
    earlier. There should be a few items highlighted in red indicating that they need
    attention.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击带有红色图标的**1 Job, 1 Task**标签，或者您可以选择**任务**标签。这应该看起来与我们之前创建的构建管道相似。应该有一些红色高亮的项目，表示它们需要关注。
- en: Select your Azure subscription from that drop-down list. If there is an **Authorize**
    button, click it.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择您的Azure订阅。如果有**授权**按钮，请点击它。
- en: Select **Function App on Linux** for your app type, and then under the **App
    service name** dropdown, you should see all of the available Linux Azure functions.
    Please note that if the resource was created recently, it may not show up immediately.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**Linux上的函数应用**作为您的应用程序类型，然后在**应用程序服务名称**下拉菜单下，您应该能看到所有可用的Linux Azure函数。请注意，如果资源是最近创建的，它可能不会立即显示。
- en: 'Click on **Run On Agent** and use the same agent settings that we did in the
    build pipeline: **Azure Pipelines** for the agent pool and **ubuntu latest** for
    the agent specification. The rest of the defaults will be fine.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**在代理上运行**，并使用我们在构建管道中使用的相同代理设置：代理池为**Azure Pipelines**，代理规范为**ubuntu latest**。其余的默认设置将很好。
- en: Finally, click on **Deploy Azure Function App** . You can change the display
    name to something more descriptive if you’d like. Notice that the Azure subscription
    app type and Azure Functions app name are grayed out. These should match the ones
    we selected when we selected the production stage.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击**部署Azure函数应用**。如果您想的话，可以将显示名称更改为更描述性的名称。注意，Azure订阅应用类型和Azure函数应用名称被灰色显示。这些应该与我们选择生产阶段时选择的相匹配。
- en: Click on the triple dots under the package or folder label and then navigate
    down to the artifact ZIP that was built, as shown in *Figure 10* *.9* .
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击包或文件夹标签下的三个点，然后导航到如图*图10.9*所示的构建的ZIP文件。
- en: '![Figure 10.9 – Select a file or folder](img/B21988_10_9.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9 – 选择文件或文件夹](img/B21988_10_9.jpg)'
- en: Figure 10.9 – Select a file or folder
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 选择文件或文件夹
- en: For the runtime stack, select **.NET isolated 8.0** and leave **Start with**
    **Command** blank.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于运行时堆栈，选择**.NET隔离 8.0**，并保留**启动方式**为**命令**空白。
- en: Expand the application and configuration settings and click on the triple dots
    next to the app settings. This may look familiar to you because this is where
    we are going to set up the application settings as we did in [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077)
    .
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开应用程序和配置设置，并点击应用程序设置旁边的三个点。这可能对您来说很熟悉，因为这是我们设置应用程序设置的地方，就像在[*第6章*](B21998_06.xhtml#_idTextAnchor077)中做的那样。
- en: 'Click on **Add** and use the same name that we used in Azure before: **MyReturnProperty**
    . For the value, and keeping with the consistency of what we have seen before,
    you can use something such as *my value from DevOps* . (If you have spaces in
    this value, be sure to put it all in double quotes.)'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**，并使用我们在Azure之前使用的相同名称：**MyReturnProperty**。对于值，保持与之前所见的一致性，您可以使用类似*我的DevOps值*的东西。（如果此值中有空格，请确保将其全部放在双引号内。）
- en: Click **Ok** . The name-value pairs should be joined together into a single
    string in the app settings.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**确定**。名称-值对应该合并成一个单独的字符串在应用程序设置中。
- en: Next, click on **Save** , and fill out the comment if you want. You can leave
    the folder as a slash, or if you know you will have a lot of release pipelines
    in the future you can organize them into folders here. Then, click **Ok** .
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**保存**，如果您想的话可以填写注释。您可以将文件夹保留为斜杠，或者如果您知道您将来会有很多发布管道，您可以将它们组织到文件夹中。然后，点击**确定**。
- en: We’re not quite done. We must test the release pipeline to ensure that everything
    works as expected.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有完成。我们必须测试发布管道以确保一切按预期工作。
- en: Testing the release pipeline
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试发布管道
- en: 'Now, let’s test our release pipeline:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们测试我们的发布管道：
- en: Click on **Create release** in the upper right-hand corner. You should see the
    **Create New Release** flyout. You can do temporary one-off adjustments on the
    manual or automated settings for each of the stages. You may want to create the
    release, but not necessarily actually push it out to production. You should see
    the artifact that was created in the build pipeline along with a proper version.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的**创建发布**。你应该会看到**创建新发布**弹出窗口。您可以对每个阶段的手动或自动化设置进行临时一次性调整。您可能想创建发布，但并不一定真正将其推送到生产环境。你应该会看到在构建管道中创建的工件以及适当的版本号。
- en: Click **Create** . Since we left the stage set to automated, it should automatically
    begin releasing. Click on the newly created release and you should see a blue
    in-progress icon, or green if it has already succeeded.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。由于我们已将阶段设置为自动化，它应该会自动开始发布。点击新创建的发布，你应该会看到一个蓝色进行中图标，或者如果它已经成功，则是绿色。
- en: You can click on a stage to show logging information under **Summary** along
    with what commits were made in this new release. Back in the production stage,
    you can click on logs, which will bring you to the log view of the release pipeline.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以点击一个阶段来显示**摘要**下的日志信息以及在这个新发布中做出的提交。回到生产阶段，您可以点击日志，这将带您到发布管道的日志视图。
- en: Note
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For demonstration purposes, disable authorization by going to the authentication
    section in your function application resource and clicking on the **Edit Text**
    link (by the **Authentication settings** header). Select **Disable** . Click **Save**
    . (Be sure to re-enable this when you are finished testing.)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示目的，通过访问您的函数应用程序资源中的身份验证部分并点击**编辑文本**链接（位于**身份验证设置**标题旁边）来禁用身份验证。选择**禁用**。点击**保存**。（确保在测试完成后重新启用此功能。）
- en: 'Once the release has finished, navigate to the **Function1** URL we were using
    in [*Chapter 6*](B21998_06.xhtml#_idTextAnchor077) , or refresh if it is still
    open in the browser. It should now display the settings that we configured in
    the release pipeline: *my value* *from DevOps* .'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦发布完成，导航到我们在[*第6章*](B21998_06.xhtml#_idTextAnchor077)中使用的**Function1** URL，或者如果它仍然在浏览器中打开，请刷新。现在它应该显示我们在发布管道中配置的设置：*来自DevOps的我的值*
    *。
- en: End-to-end testing
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 端到端测试
- en: 'Let’s test to make sure it is all working:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试以确保一切正常工作：
- en: Go back to Visual Studio and make a small edit (e.g., a comment).
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到Visual Studio并做一些小的编辑（例如，添加注释）。
- en: Commit, and then push that to the master branch. Back in DevOps, go to the **Pipelines**
    section and you should see that that pipeline is already building. Wait for it
    to complete, then navigate to the release pipeline. You should see that a brand-new
    release was created immediately after the build succeeded and should now either
    be running or perhaps even completed already.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提交，然后将其推送到主分支。回到DevOps，转到**管道**部分，你应该会看到该管道已经在构建。等待它完成，然后导航到发布管道。你应该会看到在构建成功后立即创建了一个全新的发布，现在它可能正在运行，甚至可能已经完成。
- en: Congratulations! You have set up a pipeline that automatically deploys an Azure
    function HTTP trigger on every commit to the master branch!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经设置了一个管道，该管道会在每次向主分支提交时自动部署Azure函数HTTP触发器！
- en: '*Piece* *of cake!*'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '*易如反掌！*'
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we focused on deploying our Azure function using CI/CD.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们专注于使用CI/CD部署我们的Azure函数。
- en: We saw how to set up the pipeline and connect it to our function. We also saw
    how to enable deployment to fire every time code is pushed to the master branch.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了如何设置管道并将其连接到我们的函数。我们还看到了如何启用每次将代码推送到主分支时进行部署。
- en: You try it
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 您试试看
- en: Create a simple Azure function. Next, create a new pipeline that automatically
    deploys that Azure function on every commit to the master branch. Take your time;
    there are a lot of steps.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个简单的Azure函数。接下来，创建一个新的管道，该管道会在每次向主分支提交时自动部署该Azure函数。请慢慢来；有很多步骤。
- en: Congratulations!
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 恭喜！
- en: 'You have worked your way through creating APIs and seen how to migrate your
    work to Azure. You have conquered many advanced topics and are ready to implement
    enterprise APIs. Thank you for hanging in there with us, and be sure to let us
    know what you liked (and didn’t!) about this book. Finally, if you have the time,
    please leave a review on Amazon. You know what they say: if you liked it, tell
    Amazon; if not, tell us!'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经完成了创建API的过程，并了解了如何将您的作品迁移到Azure。您已经征服了许多高级主题，并准备好实施企业API。感谢您一直与我们同行，并请务必告诉我们您喜欢（以及不喜欢！）这本书的地方。最后，如果您有时间，请在Amazon上留下评论。你知道他们怎么说：如果你喜欢它，告诉Amazon；如果不满意，告诉我们！
- en: In the next and final chapter, we briefly point you to additional resources.
    We hope they are helpful as you go forward.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章和最后一章中，我们简要地向您推荐一些额外的资源。我们希望它们在您继续前进的过程中能有所帮助。
