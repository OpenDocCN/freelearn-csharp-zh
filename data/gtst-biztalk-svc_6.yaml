- en: Chapter 6. API
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。API
- en: So far, we've only looked at the graphical tools to interact with **Windows
    Azure BizTalk Services** (**WABS**). These have included Visual Studio for creating
    and deploying solutions as well as the BizTalk Services Portal (and Azure Management
    Portal) for management and monitoring of the deployed solutions. Underlying all
    these tools though is a REST-based API that allows easy integration with scripting
    tools as well as your own processes to facilitate automated actions such as deployment,
    testing, and management.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只看了与 **Windows Azure BizTalk 服务**（**WABS**）交互的图形工具。这些包括用于创建和部署解决方案的
    Visual Studio 以及用于管理和监控已部署解决方案的 BizTalk 服务门户（以及 Azure 管理门户）。然而，所有这些工具的底层是一个基于
    REST 的 API，它允许轻松地与脚本工具以及您自己的流程集成，以促进自动化操作，如部署、测试和管理。
- en: 'In this chapter, we''ll look at the WABS API and how to interact with it using:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 WABS API 以及如何使用以下方式与之交互：
- en: RESTful web services
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: RESTful 网络服务
- en: PowerShell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PowerShell
- en: Custom code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义代码
- en: While there are three methods in which the API can be used (portal, REST services,
    and PowerShell), each serves a different need, and although there is an overlap,
    there are also differences in functionality. The portal has been explored elsewhere
    in this book and provides an easy-to-access dashboard for system administrators.
    PowerShell is a familiar tool for IT pros that is useful for scripting system
    interactions such as deployments. Using the REST API directly is useful for building
    your own tools and capabilities on top of WABS or for interacting with WABS from
    another application. By the end of this chapter, you'll have a good understanding
    of the WABS API and how you can leverage it to your advantage in your own organization.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然API可以使用三种方法（门户、REST 服务和 PowerShell），但每种方法都满足不同的需求，尽管存在重叠，但在功能上也有所不同。门户在本书的另一部分已有所探讨，并为系统管理员提供了一个易于访问的控制台。PowerShell
    是 IT 专业人员熟悉的一种工具，用于脚本系统交互，如部署。直接使用 REST API 对于构建自己的工具和能力，或在 WABS 之上或从其他应用程序与 WABS
    交互非常有用。到本章结束时，您将很好地理解 WABS API 以及您如何在自己的组织中利用它。
- en: REST
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST
- en: 'First, let''s take a quick look at the grounding of the provided API. All functions
    available in Visual Studio and in the management portal are also available in
    the API. In fact, the API actually provides more capabilities than these tools
    do, as we''ll see. This shouldn''t be too much of a surprise as it is often the
    case—the API usually comes first and the tools later. It''s therefore a good idea
    to understand what the API can do. Underpinning this API is a set of web services
    accessible using HTTP. WABS uses RESTful services for this. REST is not a standard
    or protocol, but an architectural style that enables simple HTTP-based integration.
    It doesn''t need the overhead of SOAP or frameworks such as Microsoft''s WCF.
    In fact, you can often use just your web browser to make requests or query for
    information. REST is based on a set of standard HTTP verbs that specify the type
    of request. WABS uses the following HTTP verbs in its API:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们快速了解一下提供的 API 的基础。在 Visual Studio 和管理门户中可用的所有功能也在 API 中可用。事实上，API 实际上提供了比这些工具更多的功能，正如我们将看到的。这并不令人惊讶，因为这种情况经常发生——API
    通常先于工具出现。因此，了解 API 可以做什么是一个好主意。支撑这个 API 的是一组可通过 HTTP 访问的 Web 服务。WABS 使用 RESTful
    服务来实现这一点。REST 不是一个标准或协议，而是一种架构风格，它通过简单的基于 HTTP 的集成来实现。它不需要 SOAP 或 Microsoft 的
    WCF 等框架的开销。实际上，您通常可以使用您的网络浏览器来发出请求或查询信息。REST 基于一组标准 HTTP 动词，这些动词指定了请求的类型。WABS
    在其 API 中使用以下 HTTP 动词：
- en: '| Verb | Purpose |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| 动词 | 目的 |'
- en: '| --- | --- |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| PUT | Create a new artifact or update an existing one |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| PUT | 创建新工件或更新现有工件 |'
- en: '| GET | Retrieve artifact(s) |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| GET | 获取工件（s）|'
- en: '| DELETE | Remove an artifact from WABS |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| DELETE | 从 WABS 中删除工件 |'
- en: '| POST | Update an artifact or service status |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| POST | 更新工件或服务状态 |'
- en: WABS REST API verbs
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: WABS REST API 动词
- en: As you can see, the full set of CRUD (create, read, update, and delete) operations
    are supported in this way, which provides a great deal of flexibility as it facilitates
    cross-platform access and easy integration with third-party tools.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，通过这种方式支持了完整的 CRUD（创建、读取、更新和删除）操作，这提供了很大的灵活性，因为它促进了跨平台访问和与第三方工具的轻松集成。
- en: Calling the API
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调用 API
- en: Let's start by looking at a simple REST call to the BizTalk Services API. In
    this example, we'll query the BizTalk Services instances deployed for a given
    Azure subscription. We are going to see how you can execute this request using
    a very useful tool called Fiddler. You can download Fiddler for free from [http://fiddler2.com/](http://fiddler2.com/).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看一个简单的对 BizTalk 服务 API 的 REST 调用。在这个例子中，我们将查询为给定 Azure 订阅部署的 BizTalk 服务实例。我们将看到您如何使用一个非常有用的工具
    Fiddler 来执行此请求。您可以从 [http://fiddler2.com/](http://fiddler2.com/) 免费下载 Fiddler。
- en: In order to execute these API calls against Azure, a mutual certificate exchange
    process is required in order for each party to authenticate one another. When
    your machine makes a request to the Windows Azure management endpoint, Azure returns
    the configured certificate and in return your client machine sends Azure its certificate
    to validate. Once complete, Azure executes the request and returns an acknowledgement.
    In order for this to work, we first need to create a client certificate and then
    upload it to Azure.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在 Azure 上执行这些 API 调用，需要每个参与方之间进行相互的证书交换过程，以便相互验证。当您的机器向 Windows Azure 管理端点发出请求时，Azure
    会返回配置的证书，作为回报，您的客户端机器将向 Azure 发送其证书以进行验证。一旦完成，Azure 将执行请求并返回确认。为了使这成为可能，我们首先需要创建一个客户端证书，然后将其上传到
    Azure。
- en: There are two options here. You can use a certificate you create yourself, which
    is known as a self-signed certificate. Such a certificate is useful for testing
    but would not be appropriate for the production usage. In this case, you would
    purchase a certificate from a signing authority and use that. The reason for this
    is that certificates are about trust, not just between the two parties (your machine/organization
    and Azure), but with the signing authority as well. When a party receives a certificate,
    it can check its validity with the signing authority. This also allows, for example,
    the ability for a signing authority to revoke a certificate if it has been compromised.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个选项。您可以使用自己创建的证书，这被称为自签名证书。这样的证书对于测试很有用，但不适合生产使用。在这种情况下，您将从签名机构购买证书并使用它。这样做的原因是证书关乎信任，不仅仅是两个参与方（您的机器/组织与
    Azure）之间的信任，还包括与签名机构的信任。当一方收到证书时，它可以与签名机构检查其有效性。这也允许，例如，签名机构在证书被泄露时撤销证书。
- en: 'For our purposes though, a self-signed certificate will do just fine. To create
    a certificate, open a command prompt and enter the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，对于我们的目的来说，一个自签名证书就足够了。要创建证书，打开命令提示符并输入以下命令：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This command will create a self-signed certificate and install it in your machine''s
    certificate store under your logged on account. With this done, we need to associate
    it with our Azure subscription where we have provisioned BizTalk Services:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个自签名证书并将其安装到您的机器的证书存储中，位于您的登录账户下。完成此操作后，我们需要将其与我们的 Azure 订阅关联，我们在其中已配置了
    BizTalk 服务：
- en: Open the Windows Azure Management Portal at [http://manage.windowsazure.com](http://manage.windowsazure.com).
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Windows Azure 管理门户 [http://manage.windowsazure.com](http://manage.windowsazure.com)。
- en: In the left-hand margin, click on **Settings** (it's the last one in the list).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧边栏中，点击 **设置**（它是列表中的最后一个）。
- en: Under **Settings**, click on the **Management Certificates** tab and then click
    on **Upload**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **设置** 下，点击 **管理证书** 选项卡，然后点击 **上传**。
- en: Browse to the certificate file you created in the command window earlier—it
    will be located by default under `c:\users\<youraccount>\documents`.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览到您在命令窗口中之前创建的证书文件——它默认位于 `c:\users\<youraccount>\documents`。
- en: Click on the tick button to associate your certificate with the management service.![Calling
    the API](img/7401EN_06_01.jpg)
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击勾选按钮以将您的证书与管理系统关联。![调用 API](img/7401EN_06_01.jpg)
- en: Upload management certificate
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上传管理证书
- en: 'Now that we''ve done this, we can make a call using the Request Composer feature
    of Fiddler to query the WABS services deployment. To set up the certificate in
    Fiddler, we need to perform a few steps first before making the request:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了这个步骤，我们可以使用 Fiddler 的请求作曲家功能进行调用，以查询 WABS 服务的部署。为了在 Fiddler 中设置证书，我们首先需要在发出请求之前执行几个步骤：
- en: Open Fiddler.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Fiddler。
- en: On the **Rules** menu, select **Customize Rules…**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **规则** 菜单中，选择 **自定义规则…**。
- en: In the `CustomRules.js` file, which opens in Notepad, find the `OnBeforeRequest`
    function.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Notepad 中打开的 `CustomRules.js` 文件中，找到 `OnBeforeRequest` 函数。
- en: 'Add the following at the top of this function, replacing `<username>` with
    your username:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此函数顶部添加以下内容，将`<username>`替换为你的用户名：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Save the file and close Notepad.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存文件并关闭记事本。
- en: 'What this will do is send the client certificate to the service whenever the
    Azure management URL is accessed. For the next step, you will need your Azure
    subscription ID. To get this, go back to the Azure Management Portal, and under
    **Settings** | **Subscriptions**, you will see a list of your subscriptions in
    the **Subscription** column and the required subscription IDs in the **SubscriptionID**
    column, as shown in the following screenshot:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这将做的是，每当访问Azure管理URL时，都会将客户端证书发送到服务。对于下一步，你需要你的Azure订阅ID。要获取此信息，请返回到Azure管理门户，在**设置**
    | **订阅**下，你将在**订阅**列中看到你的订阅列表，并在**订阅ID**列中看到所需的订阅ID，如下面的截图所示：
- en: '![Calling the API](img/7401EN_06_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![调用API](img/7401EN_06_02.jpg)'
- en: Obtaining the subscription ID
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 获取订阅ID
- en: 'Now, we can make the request as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以按照以下方式发出请求：
- en: Click on the **Composer** tab.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**作曲家**标签。
- en: Ensure the verb next to the URL is set to **GET**.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保URL旁边的动词设置为**GET**。
- en: 'Enter the following URL in the box, replacing `<SubscriptionID>` with your
    own:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在框中输入以下URL，将`<SubscriptionID>`替换为你的订阅ID：
- en: '`https://management.core.windows.net/<SubscriptionID>/cloudservices`'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`https://management.core.windows.net/<SubscriptionID>/cloudservices`'
- en: 'Add the header provided here in the **Request Headers** area:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**请求头**区域添加此处提供的头信息：
- en: '`x-ms-version:2010-10-28`'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`x-ms-version:2010-10-28`'
- en: This HTTP header specifies the service version we want and is mandatory. Currently,
    there is only one version, but over time the service may change, and this will
    allow you to call a particular version of it.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个HTTP头指定了我们想要的服务版本，并且是必须的。目前，只有一个版本，但随着时间的推移，服务可能会发生变化，这将允许你调用它的特定版本。
- en: 'Your Fiddler request should look like the following screenshot:'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的Fiddler请求应如下截图所示：
- en: '![Calling the API](img/7401EN_06_03.jpg)'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![调用API](img/7401EN_06_03.jpg)'
- en: Retrieving a list of cloud services
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 获取云服务列表
- en: Click on the **Execute** button.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**执行**按钮。
- en: If all went as planned, you should now see the results of the call in the Fiddler
    window as shown in the following screenshot. What you are looking at is a list,
    in XML format, of all the BizTalk Services instances provisioned for the subscription
    you passed in as the argument. If you were to call this API programmatically,
    you could read through the XML and pull out particular properties for each instance
    and perhaps stop or restart them all. I've blurred out the subscription IDs and
    other details for obvious reasons.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按计划进行，你现在应该在Fiddler窗口中看到调用结果，如下面的截图所示。你所看到的是一个列表，以XML格式列出为传递给订阅的BizTalk服务实例。如果你以编程方式调用此API，你可以读取XML并提取每个实例的特定属性，也许停止或重新启动它们。出于明显的原因，我已经模糊处理了订阅ID和其他细节。
- en: '![Calling the API](img/7401EN_06_04.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![调用API](img/7401EN_06_04.jpg)'
- en: Retrieving a list of cloud services
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 获取云服务列表
- en: 'With the results of this call, we can now retrieve the details of a single
    WABS instance with the following URL. Here, the cloud service name returned by
    the previous call is passed into the Get Cloud Service call:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这次调用的结果，我们现在可以使用以下URL检索单个WABS实例的详细信息。在这里，传递给Get Cloud Service调用的云服务名称是前一个调用返回的：
- en: '`https://management.core.windows.net/<SubscriptionID>/cloudservices/<CloudServiceName>`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`https://management.core.windows.net/<SubscriptionID>/cloudservices/<CloudServiceName>`'
- en: 'The request and response are shown in the following screenshot:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 请求和响应如下截图所示：
- en: '![Calling the API](img/7401EN_06_05.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![调用API](img/7401EN_06_05.jpg)'
- en: Retrieving a single BizTalk Services instance
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 获取单个BizTalk服务实例
- en: Back up and restore
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 备份和还原
- en: Now that we've looked at a simple example of what the WABS API can do, let's
    look at some of the more interesting capabilities. An essential aspect of enterprise
    development is the ability to move artifacts between environments. Commonly, an
    organization or team will have a development, testing, user acceptance, and production
    environment (and multiple instances of each). This DTAP (dev, test, user, and
    prod) setup is perfectly possible with BizTalk Services by creating multiple service
    instances and provisioning them as required. Then, each can be used as desired
    to manage the overall integration estate.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经查看了一个WABS API能做什么的简单示例，让我们看看一些更有趣的功能。企业开发的一个基本方面是能够在环境之间移动工件。通常，一个组织或团队将有一个开发、测试、用户验收和生产环境（以及每个环境的多个实例）。通过创建多个服务实例并根据需要配置它们，BizTalk
    Services可以实现这种DTAP（开发、测试、用户和产品）设置。然后，每个实例都可以按需使用来管理整体集成环境。
- en: Backing up a BizTalk Services instance is not just useful to move content between
    environments, but can also be used to keep a set of backups or snapshots of a
    particular environment for disaster recovery or to restore to a particular point
    in time. It is also possible to restore an instance to a different version of
    the service, provided that the service type is at least the same or higher. For
    example, a Basic subscription can be restored to not just another Basic sub, but
    to Standard or Premium as well. Downgrading however, is not possible, and nor
    is backing up a Developer instance of the service.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 备份BizTalk服务实例不仅对在环境之间移动内容很有用，还可以用于保留特定环境的备份或快照，以用于灾难恢复或恢复到特定时间点。如果服务类型至少相同或更高，还可以将实例恢复到服务的不同版本。例如，基本订阅可以恢复到另一个基本订阅，也可以恢复到标准或高级订阅。然而，降级是不可能的，也不能备份服务的开发者实例。
- en: This feature now has (as of the February 2014 service update) out of the box
    tooling via the Windows Azure Management Portal as shown in the following screenshot
    in the **CONFIGURE** tab. While the portal UI now allows you to back up a service
    instance and even create a new BizTalk Services instance from a backup, using
    the API programmatically is very useful. The API provides the ability to move
    or "promote" a set of artifacts from one instance (say Test) to another (for example,
    User Acceptance) programmatically. In this section, we'll look at how to achieve
    this capability with the REST API by writing some .NET code to do it. As you'll
    see, this is very easy and straightforward to perform.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能现在（截至2014年2月的服务更新）通过Windows Azure管理门户提供开箱即用的工具，如以下截图中的**配置**选项卡所示。虽然门户UI现在允许您备份服务实例，甚至可以从备份创建新的BizTalk服务实例，但使用API进行程序化操作非常有用。API提供了将一组工件从一个实例（例如测试）移动到另一个实例（例如用户验收）的能力。在本节中，我们将通过编写一些.NET代码来实现此功能。正如您将看到的，这非常简单直接。
- en: '![Back up and restore](img/7401EN_06_06.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![备份和恢复](img/7401EN_06_06.jpg)'
- en: Back up BizTalk Service Instance with the Management Portal
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用管理门户备份BizTalk服务实例
- en: Before trying this out, I should point out that this capability provides a similar
    copy of the service instance. It's quite possible (even likely) that some of your
    settings or configuration is environment specific. For example, if your bridges
    send messages to Service Bus queues, it is unlikely that you would use the same
    queues for test as production. Therefore, while being able to back up one environment
    and restore to another is certainly very useful, you also need to think about
    using the REST API to apply configuration changes on top of a restored service
    instance.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试此功能之前，我应该指出，此功能提供的服务实例的副本与原服务实例相似。很可能（甚至很可能）您的某些设置或配置是特定于环境的。例如，如果您的网桥向服务总线队列发送消息，那么您不太可能使用与生产环境相同的队列进行测试。因此，虽然能够备份一个环境并将其恢复到另一个环境确实非常有用，但您还需要考虑使用REST
    API在恢复的服务实例上应用配置更改。
- en: 'Open Visual Studio and create a new console application. Call it `BackupService`.
    In the static `Main` method, add the following code to replace the empty `Main`
    method:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Visual Studio并创建一个新的控制台应用程序。将其命名为`BackupService`。在静态`Main`方法中，添加以下代码以替换空的`Main`方法：
- en: '[PRE2]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now add the `Run` method as shown in the next code snippet. This code formats
    the required URL to make the backup API call. For this, three pieces of information
    are required.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在添加如以下代码片段所示的`Run`方法。此代码格式化所需的URL以进行备份API调用。为此，需要三块信息。
- en: 'Firstly, you''ll need your Windows Azure subscription ID; this is the same
    ID as discussed earlier, and you can obtain it as before through the Windows Azure
    portal in the *Upload management certificate* screenshot in the *Calling the API*
    section. You''ll also need the service name. This is the value in the **Name**
    field as shown previously, and you can obtain yours by making that API call in
    Fiddler as we saw. The final piece of data you need is the resource name of the
    BizTalk Services instance. This is the name you gave your WABS instance when you
    created it. It can be obtained either through the Azure portal, by clicking the
    BizTalk Services link, or again by using Fiddler as shown in the previous screenshot.
    The name you need is under the **Resources**/**Resource**/**Name** element. Replace
    the three placeholders in the code with your service values as shown in the following
    code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要您的 Windows Azure 订阅 ID；这个 ID 与之前讨论的相同，您可以通过在“调用 API”部分的“上传管理证书”截图中的 Windows
    Azure 门户中获取它。您还需要服务名称。这是之前显示的**名称**字段中的值，您可以通过在 Fiddler 中执行我们看到的那个 API 调用来获取您的服务名称。您还需要的数据的最后部分是
    BizTalk 服务实例的资源名称。这是您在创建 WABS 实例时给出的名称。您可以通过 Azure 门户、点击 BizTalk 服务链接或再次使用 Fiddler（如前一个截图所示）来获取它。您需要的名称位于
    **Resources**/**Resource**/**Name** 元素下。将代码中的三个占位符替换为您所示的服务值，如下所示：
- en: '[PRE3]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, add the following two assembly references that contain the necessary types
    to make the request to the service endpoint:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加以下两个程序集引用，它们包含用于向服务端点发出请求所需的类型：
- en: '[PRE4]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Add the following method directly underneath the previously added code. This
    will set up the call to the Backup REST API, and to do this, it needs your certificate.
    As discussed earlier, the management API calls authenticate services using mutual
    certificates, and therefore we need to pass our certificate. However, as the rule
    that we added to Fiddler earlier sends the client certificate with each request
    made to the management URL, we don't need to send the certificate in the code—you
    just need to ensure that Fiddler is still running (the code is provided to add
    the certificate later if you want to run it without Fiddler). This simplifies
    things quite a bit.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 直接在之前添加的代码下方添加以下方法。这将设置对备份 REST API 的调用，并且为了做到这一点，它需要您的证书。如前所述，管理 API 调用使用相互证书对服务进行身份验证，因此我们需要传递我们的证书。然而，由于我们之前添加到
    Fiddler 中的规则会在向管理 URL 发出的每个请求中发送客户端证书，因此我们不需要在代码中发送证书——您只需确保 Fiddler 仍在运行（如果您想在没有
    Fiddler 的情况下运行，代码中提供了添加证书的方法）。这简化了事情。
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You need to replace the `<storageaccountname>` and `<storageaccountkey>` values
    in the preceding code with your own storage account details. To obtain your `AccountName`
    and `AccountKey` values, do the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要将前述代码中的 `<storageaccountname>` 和 `<storageaccountkey>` 值替换为您自己的存储账户详细信息。要获取您的
    `AccountName` 和 `AccountKey` 值，请执行以下操作：
- en: Go to the Azure Management Portal.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Azure 管理门户。
- en: Click on the Storage icon in the left-hand navigation bar.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧导航栏中的存储图标。
- en: In the list of storage accounts, select the one that has the same name as the
    one created by your BizTalk Services instance.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在存储账户列表中，选择与您的 BizTalk 服务实例创建的名称相同的账户。
- en: Click on the **Manage Access Keys** button at the bottom of the page.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的**管理访问密钥**按钮。
- en: Copy and paste the **Storage Account Name** and **Primary Access Key** fields
    into the preceding code.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**存储账户名称**和**主访问密钥**字段复制并粘贴到前述代码中。
- en: You can actually use any storage account you like in step 3, or even create
    a new one. The account is used to store the backed-up WABS instance. The third
    placeholder in the code is `<backupname>`. This is the label to use for backup,
    and it is good practice to name this something meaningful, such as with the date
    the backup was made. The label you use must start with a letter or a digit, can
    only contain digits, dashes (-), or lowercase letters, and can be between 3 and
    63 characters long. Dashes must not be consecutive.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，您可以在第 3 步中使用任何您喜欢的存储账户，甚至创建一个新的账户。该账户用于存储备份的 WABS 实例。代码中的第三个占位符是 `<backupname>`。这是用于备份的标签，并且将此命名为有意义的名称是良好的实践，例如使用备份的日期。您使用的标签必须以字母或数字开头，只能包含数字、破折号（-）或小写字母，并且长度在
    3 到 63 个字符之间。破折号不能连续。
- en: The format of the data posted to the service is **JSON** (**JavaScript Object
    Notation**), and this is simply a string containing the storage account details
    and backup name. The PostAsync call will invoke the API and wait for a response.
    If successful, the service will return an OK response HTTP code 200\. This API
    is asynchronous because the service backup can take up to an hour to complete.
    In response, we get a tracking identifier that allows you to check the status
    of the backup operation. The API provides a polling query for this that allows
    you to make a call passing your returned identifier (a GUID) and retrieve the
    results of the operation at any point. In this way, you can ensure that the backup
    was successfully completed.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 发送到服务的数据格式是 **JSON**（**JavaScript 对象表示法**），这只是一个包含存储账户详情和备份名称的字符串。PostAsync
    调用将调用 API 并等待响应。如果成功，服务将返回 OK 响应 HTTP 状态码 200。由于服务备份可能需要长达一小时才能完成，因此此 API 是异步的。作为响应，我们得到一个跟踪标识符，允许您检查备份操作的状态。API
    提供了一个轮询查询，允许您传递返回的标识符（一个 GUID）并在任何时间点检索操作的结果。这样，您可以确保备份已成功完成。
- en: Now that the code is complete, hit *F5* to build and run it. If successful,
    the console application should just open and close down a few seconds later. You
    might want to put a couple of breakpoints in the code and run it to see if it's
    working. I've also omitted any exception handling code for brevity. If it fails
    to call the API, an exception will be thrown. In such a case, run the debugger
    so you can determine what the problem is.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在代码已经完成，按 *F5* 构建并运行它。如果成功，控制台应用程序应该会在几秒钟后打开并关闭。您可能想在代码中设置几个断点并运行它，以查看它是否正常工作。为了简洁起见，我已经省略了任何异常处理代码。如果调用
    API 失败，将抛出异常。在这种情况下，运行调试器以确定问题所在。
- en: Of course, there is also a reciprocal Restore API call that allows you to restore
    a previously backed up instance to any other BizTalk Service instance.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，还有一个相应的还原 API 调用，允许您将先前备份的实例还原到任何其他 BizTalk 服务实例。
- en: 'As I mentioned previously, you need to keep Fiddler running for this example
    as Fiddler is supplying the necessary certificate. If you want to run without
    Fiddler, just add the following code at the start of the `MakeRequest` method,
    replacing the `<your thumbprint>` placeholder with your own certificate''s thumbprint
    as displayed in the Azure Management Portal:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如我之前提到的，您需要保持 Fiddler 运行，因为 Fiddler 正在提供必要的证书。如果您想在没有 Fiddler 的情况下运行，只需在 `MakeRequest`
    方法的开头添加以下代码，将 `<your thumbprint>` 占位符替换为您自己的证书指纹，该指纹在 Azure 管理门户中显示：
- en: '[PRE6]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code retrieves your certificate from your local machine''s certificate
    store. You therefore need to ensure it is stored already. To do this, double-click
    on your certificate, and in the wizard that appears, do the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码从您的本地计算机的证书存储中检索您的证书。因此，您需要确保它已经存储。为此，双击您的证书，在出现的向导中执行以下操作：
- en: Accept any security warnings first.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先接受任何安全警告。
- en: Click on the **Install Certificate** button.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装证书** 按钮。
- en: For the **Store Location** option, select **Local Machine**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 **存储位置** 选项，选择 **本地计算机**。
- en: Accept any warning that appears.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受出现的任何警告。
- en: Select **Place all certificates in the following store**.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **将所有证书放置在以下存储中**。
- en: Click on the **Browse** button.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **浏览** 按钮。
- en: Select **Personal** and click on **OK**.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **个人** 并点击 **确定**。
- en: Click on **Next** and then **Finish**.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **下一步** 然后点击 **完成**。
- en: You should see a message confirming successful installation.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该会看到一个确认成功安装的消息。
- en: Close the dialog.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭对话框。
- en: Using PowerShell
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PowerShell
- en: So far, we've seen two different ways to utilize the API provided by BizTalk
    Services, directly making HTTP requests in Fiddler and by writing code to make
    the calls to it programmatically. Now we'll look at an even easier way, using
    Windows PowerShell. Windows PowerShell is a command-line tool aimed at administrators
    that provides a consistent way to perform tasks across many Microsoft products
    (and third-party ones). With PowerShell, it is possible to automate common actions
    and create sophisticated scripts that perform configuration and administration
    of BizTalk Services environments and Azure in general.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了两种不同的方式来利用 BizTalk 服务提供的 API，直接在 Fiddler 中进行 HTTP 请求，以及通过编写代码来程序化地调用它。现在我们将看看一种更简单的方法，使用
    Windows PowerShell。Windows PowerShell 是一个面向管理员的命令行工具，它提供了一种在许多 Microsoft 产品（包括第三方产品）中执行任务的一致方式。使用
    PowerShell，可以自动化常见操作并创建复杂的脚本，用于配置和管理 BizTalk 服务环境和 Azure。
- en: BizTalk Services provides a set of PowerShell cmdlets that can call the complete
    set of APIs provided. Cmdlets are units of functionality that are executed in
    PowerShell, and BizTalk Services provides a cmdlet for each API call available.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: BizTalk 服务提供了一套 PowerShell cmdlet，可以调用提供的完整 API 集合。Cmdlet 是在 PowerShell 中执行的功能单元，BizTalk
    服务为每个可用的 API 调用提供了一个 cmdlet。
- en: 'To be absolutely correct, BizTalk Services actually provides two sets of cmdlets.
    The first is installed when you download and install the BizTalk Services SDK
    while the second needs to be downloaded. The first allows control over the artifacts
    in a provisioned BizTalk Services instance while the second allows control over
    BizTalk Services as a whole—including creating new BizTalk Services instances.
    As the second set is associated with the APIs we''ve already been looking at,
    we''ll start there. This second set is provided as source code and can be downloaded
    from the following link:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 为了绝对正确，BizTalk 服务实际上提供了两组 cmdlet。第一组是在你下载并安装 BizTalk 服务 SDK 时安装的，而第二组则需要下载。第一组允许控制已配置的
    BizTalk 服务实例中的工件，而第二组允许控制 BizTalk 服务整体——包括创建新的 BizTalk 服务实例。由于第二组与我们已经查看过的 API
    相关，我们将从这里开始。这第二组作为源代码提供，可以从以下链接下载：
- en: '[http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-91e1bdf3](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-91e1bdf3)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-91e1bdf3](http://code.msdn.microsoft.com/windowsazure/Windows-Azure-BizTalk-91e1bdf3)'
- en: As it is the source code, it needs to be opened and compiled in Visual Studio.
    We should also note that this is a sample and not officially supported code from
    Microsoft. Once the source code is built, open PowerShell on Windows 8/Server
    2012 by clicking on the Start button and typing `PowerShell` (on Windows 8 or
    2012). You should see Windows Azure PowerShell appear in the list of results.
    Click on it to launch it. If you don't see Windows Azure PowerShell, make sure
    you have installed it and you have at least Version 0.6.19 installed.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这是源代码，需要将其在 Visual Studio 中打开并编译。我们还应该注意，这是一个示例，不是来自 Microsoft 的官方支持代码。一旦源代码构建完成，通过点击开始按钮并输入
    `PowerShell`（在 Windows 8 或 2012 上）在 Windows 8/Server 2012 上打开 PowerShell。你应该在结果列表中看到
    Windows Azure PowerShell。点击它以启动它。如果你看不到 Windows Azure PowerShell，请确保你已经安装了它，并且至少安装了版本
    0.6.19。
- en: 'In the PowerShell command window, enter the following command to load the cmdlets:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PowerShell 命令窗口中，输入以下命令来加载 cmdlet：
- en: '[PRE7]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In order to use the cmdlets, the subscription context must first be set. Do
    this by entering the following code in the command window:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 cmdlet，必须首先设置订阅上下文。通过在命令窗口中输入以下代码来完成此操作：
- en: '[PRE8]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You should now know how to obtain the value for `<subscription ID>` that needs
    to be substituted. For `<certificate thumbprint>`, if you followed the steps earlier
    to generate and upload a certificate, you need to replace this value with the
    thumbprint of your own certificate. To find this, go to the Azure portal and click
    on **Settings** in the left-hand navigation bar. On the Settings page, click on
    **Management Certificates** and then cut and paste the value for the thumbprint
    column for the certificate you uploaded earlier.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该知道如何获取需要替换的 `<subscription ID>` 的值。对于 `<certificate thumbprint>`，如果你之前遵循了生成和上传证书的步骤，你需要将此值替换为你自己的证书的指纹。要找到这个，请转到
    Azure 门户并点击左侧导航栏中的 **设置**。在设置页面上，点击 **管理证书**，然后复制并粘贴你之前上传的证书的指纹列的值。
- en: I've used the value of `Test` in the previous code to name the subscription.
    This can be any label you like. It is only used to name the subscription during
    the PowerShell session. Now, as soon as this is done, all cmdlets will be executed
    in the context of the particular subscription.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我在之前的代码中使用 `Test` 的值来命名订阅。这可以是任何你喜欢的标签。它仅用于 PowerShell 会话期间命名订阅。现在，一旦完成，所有 cmdlet
    都将在特定订阅的上下文中执行。
- en: 'As an example of how to use the cmdlets, let''s look at one of the API calls
    we made earlier. In the command window, type the following command, substituting
    the name of your BizTalk Service instance for `<service name>`:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 作为如何使用 cmdlet 的一个示例，让我们看看我们之前所做的其中一个 API 调用。在命令窗口中，输入以下命令，将你的 BizTalk 服务实例名称替换为
    `<service name>`：
- en: '[PRE9]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'You should see a response in the command window similar to the one in the following
    screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在命令窗口中看到类似于以下截图的响应：
- en: '![Using PowerShell](img/7401EN_06_07.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![使用 PowerShell](img/7401EN_06_07.jpg)'
- en: Get BizTalk Service cmdlet
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 获取 BizTalk 服务 cmdlet
- en: 'Using the API doesn''t stop at just being able to query the service. We can
    also create a brand new BizTalk Services instance or delete an existing one. It
    is also possible to suspend or resume a particular service instance if required.
    To create a new instance, the `New-AzureBizTalkService` cmdlet is provided. This
    takes the following form:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 API 不仅限于查询服务。我们还可以创建全新的 BizTalk 服务实例或删除现有的实例。如果需要，还可以暂停或恢复特定的服务实例。要创建新实例，提供了
    `New-AzureBizTalkService` 命令。它具有以下形式：
- en: '[PRE10]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Apart from the name of the instance and what data center to create it in, the
    main parameter is actually a file. The download for the source code actually contains
    a couple of example files that you can adapt for this purpose. The file you provide
    contains all the details that you would normally specify when creating a new service
    via the Azure portal; for example, the database to use, the certificate to protect
    the service with, the type of service—developer, premium, among others—and the
    ACS settings. Given what you know after reading this book, you should find editing
    the provided sample files with your settings quite straightforward. Once done,
    you can automate the creation of services to your heart's content!
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 除了实例名称和要创建它的数据中心之外，主要参数实际上是一个文件。源代码的下载实际上包含了一些示例文件，您可以为此目的进行修改。您提供的文件包含所有您在通过
    Azure 门户创建新服务时通常要指定的详细信息；例如，要使用的数据库、用于保护服务的证书、服务类型——开发者、高级等——以及 ACS 设置。在阅读完这本书后，您应该会发现使用您的设置编辑提供的示例文件非常简单。一旦完成，您就可以随心所欲地自动化创建服务！
- en: OK, so far we've covered the management aspects of the BizTalk Services API.
    But as mentioned earlier, there is also another set of PowerShell cmdlets that
    are used to manipulate artifacts and settings in a BizTalk Services instance.
    This set of cmdlets is already installed if you have the BizTalk Services SDK
    installed, which by default is located under `C:\Program Files\Windows Azure BizTalk
    Services Tools`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，到目前为止，我们已经涵盖了 BizTalk 服务 API 的管理方面。但如前所述，还有另一组 PowerShell 命令，用于在 BizTalk
    服务实例中操作工件和设置。如果您已安装 BizTalk 服务 SDK，则该命令集已经安装，默认情况下位于 `C:\Program Files\Windows
    Azure BizTalk Services Tools`。
- en: 'To load the cmdlets, type the following command in the PowerShell window:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载命令，请在 PowerShell 窗口中键入以下命令：
- en: '[PRE11]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This PowerShell module provides features that are not available in the UI of
    BizTalk Services via the portal. One example is the ability to start and stop
    a bridge. When a new bridge is deployed, it is active by default, but there are
    times when you may wish to stop a bridge from receiving messages. This can be
    achieved with the `Stop-AzureBizTalkBridgeSource` cmdlet as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此 PowerShell 模块提供了在 BizTalk 服务门户 UI 中不可用的功能。一个例子是能够启动和停止桥接器。当新的桥接器部署时，它默认是激活的，但有时您可能希望停止桥接器接收消息。这可以通过
    `Stop-AzureBizTalkBridgeSource` 命令实现，如下所示：
- en: '[PRE12]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This will stop all sources available on the bridge `MyBridge`, but it's also
    possible to stop a particular source by providing the `SourceName` parameter.
    This is very useful when you need to perform maintenance that requires some or
    all of the sources to be temporarily stopped. To restart a bridge/source, the
    corresponding `Start-AzureBizTalkBridgeSource` cmdlet is used with the same parameters.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将停止桥接器 `MyBridge` 上所有可用的源，但也可以通过提供 `SourceName` 参数来停止特定的源。这在您需要执行需要暂时停止某些或所有源维护操作时非常有用。要重新启动桥接器/源，使用具有相同参数的相应的
    `Start-AzureBizTalkBridgeSource` 命令。
- en: The remaining cmdlets concern adding and removing artifacts such as bridges,
    schemas, certificates, and assemblies to a BizTalk Service. Visual Studio uses
    these API calls during deployment and their primary usage outside of this is to
    automate and manage deployments. For the full list of cmdlets, visit [http://msdn.microsoft.com/en-us/library/windowsazure/dn232360.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/dn232360.aspx).
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 剩余的命令涉及向 BizTalk 服务添加和删除诸如桥接器、架构、证书和程序集等工件。Visual Studio 在部署期间使用这些 API 调用，其主要用途之外是自动化和管理部署。有关命令的完整列表，请访问
    [http://msdn.microsoft.com/en-us/library/windowsazure/dn232360.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/dn232360.aspx)。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have looked at the API underpinning BizTalk Services. We've
    seen how to leverage the API from the humble web browser and how to use PowerShell
    cmdlets and write our own code to invoke it. We've looked at the different types
    of APIs, capabilities, and the cmdlets that wrap all of them, and hopefully you've
    seen how you can make use of the capabilities of the BizTalk Services API to create,
    manage, maintain, and more importantly, automate your BizTalk Services instances.
    In the next chapter, we will look at troubleshooting your integration solutions
    and how to use the tracking capabilities of WABS.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了BizTalk服务的底层API。我们了解了如何从简单的网页浏览器中利用API，以及如何使用PowerShell命令和编写自己的代码来调用它。我们研究了不同类型的API、功能以及封装所有这些功能的命令，希望您已经看到了如何利用BizTalk服务API的功能来创建、管理、维护，更重要的是，自动化您的BizTalk服务实例。在下一章中，我们将探讨如何解决您的集成解决方案的问题，以及如何使用WABS的跟踪功能。
