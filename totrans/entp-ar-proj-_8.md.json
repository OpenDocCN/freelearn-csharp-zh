["```cs\n@IBOUtlet var sceneView: ARSCNView!\n```", "```cs\noverride func viewDidLoad() {\n    super.viewDidLoad()\n\n    sceneView.delegate = self\n    sceneView.showsStatistics = true\n\n    let scene = SCNScene(named: \"art.scnassets/ship.scn\")!\n    sceneView.scene = scene \n}\n```", "```cs\noverride func viewWillAppear(_ animated: Bool) {\n    super.viewWillAppear(animated)\n\n    let configuration = ARWorldTrackingConfiguration()\n    sceneView.session.run(configuration)\n}\n```", "```cs\noverride func viewWillDisappear(_ animated: Bool) {\n    super.viewWillDisappear(animated)\n    sceneView.session.pause()\n}\n```", "```cs\nlet scene = SCNScene()\n```", "```cs\nsceneView.debugOptions = ARSCNDebugOptions.showFeaturePoints\n```", "```cs\nlet configuration = ARWorldTrackingConfiguration()\nconfiguration.planeDetection = .horizontal\n```", "```cs\nfunc renderer(_ renderer: SCNSceneRenderer, nodeFor anchor: ARAnchor) -> SCNNode? {\n    let node = SCNNode()\n\n    return node\n} \n```", "```cs\nguard let planeAnchor = anchor as? ARPlaneAnchor else {return nil}\n\nlet plane = SCNPlane(width: CGFloat(planeAnchor.extent.x), height: CGFloat(planeAnchor.extent.z))\nplane.firstMaterial?.diffuse.contents = UIColor.orange\nplane.firstMaterial?.transparency = 0.4\n\nlet planeNode = SCNNode(geometry: plane)\nplaneNode.position = SCNVector3(x: planeAnchor.center.x, y: planeAnchor.center.y, z: planeAnchor.center.z)\nplaneNode.eulerAngles.x = -Float.pi/2\n\nnode.addChildNode(planeNode)\n```", "```cs\nvar planes = [ARPlaneAnchor: SCNPlane]()\n```", "```cs\nplanes[planeAnchor] = plane\n```", "```cs\nfunc renderer(_ renderer: SCNSceneRenderer, didUpdate node: SCNNode, for anchor: ARAnchor)\n{\n    guard let planeAnchor = anchor as? ARPlaneAnchor else {return}\n\n    if let plane = planes[planeAnchor]\n    {\n        plane.width = CGFloat(planeAnchor.extent.x)\n        plane.height = CGFloat(planeAnchor.extent.z)\n\n        node.childNodes.first?.position = SCNVector3(planeAnchor.center.x, planeAnchor.center.y, planeAnchor.center.z)\n    }        \n}\n```", "```cs\n@IBOutlet weak var infoLabel: UILabel!\n```", "```cs\nfunc session(_ session: ARSession, didFailWithError error: Error) {\n    infoLabel.text = \"Session failed : \\(error.localizedDescription).\"\n}\n```", "```cs\nfunc sessionWasInterrupted(_ session: ARSession) {\n    infoLabel.text = \"Session was interrupted.\"\n}\n```", "```cs\nfunc sessionInterruptionEnded(_ session: ARSession) {\n    infoLabel.text = \"Session interruption ended.\"\n    let configuration = ARWorldTrackingConfiguration()\n    configuration.planeDetection = .horizontal\n    sceneView.session.run(configuration, options: [.resetTracking, .removeExistingAnchors])\n}\n```", "```cs\nfunc session(_ session: ARSession, cameraDidChangeTrackingState camera: ARCamera) {\n    let message: String\n\n    switch camera.trackingState {\n    case .normal where session.currentFrame!.anchors.isEmpty:\n        message = \"Move the device around to detect horizontal surfaces.\"   \n    case .notAvailable:\n        message = \"Tracking unavailable.\"\n    case .limited(.excessiveMotion):\n         message = \"Tracking limited - Move the device more slowly.\"\n    case .limited(.insufficientFeatures):\n        message = \"Tracking limited - Point the device at an area with visible surface detail, or improve lighting conditions.\"\n    case .limited(.initializing):\n        message = \"Initializing AR session.\"\n    default:\n        message = \"\"  \n    } \n    infoLabel.text = message\n}\n```", "```cs\nclass ViewController: UIViewController, ARSCNViewDelegate, ARSessionDelegate {\n```", "```cs\nsceneView.session.delegate = self\n```", "```cs\nfunc session(_ session: ARSession, didAdd anchors: [ARAnchor])\n{\n    infoLabel.text= \"New anchor added.\"\n}\n```", "```cs\nimport ARKit\n```", "```cs\nclass Portal: SCNNode {\n}\n```", "```cs\nfunc add3DModel() {\n    let modelScene = SCNScene(named: \"vangogh_room.obj\")!\n    let modelNode: SCNNode = modelScene.rootNode.childNodes[0]\n    self.addChildNode(modelNode)\n}\n```", "```cs\noverride init() {\n    super.init()\n    add3DModel()\n}\n\nrequired init?(coder aDecoder: NSCoder) {\n    fatalError(\"init(coder:) has not been implemented\")\n}\n```", "```cs\nportal = Portal()\nself.sceneView.scene.rootNode.addChildNode(portal!)\n```", "```cs\n@IBAction func didTapOnScreen(_ sender: UITapGestureRecognizer){\n}\n```", "```cs\nvar portal: SCNNode? = nil\n```", "```cs\nfunc session(_ session: ARSession, didAdd anchors: [ARAnchor]) {\n   if portal == nil\n   {\n       infoLabel.text = \"Tap on the floor to create the portal.\"\n   }\n}\n```", "```cs\nlet location = sender.location(in: sceneView)\n\nlet hitResults = sceneView.hitTest(location, types: ARHitTestResult.ResultType.existingPlaneUsingExtent)\n\nguard let result = hitResults.first else {return}\n\nif portal != nil {\n    portal?.removeFromParentNode()\n}\n\nportal = Portal()\nportal?.position = SCNVector3(x: result.worldTransform.columns.3.x, y: result.worldTransform.columns.3.y, z: result.worldTransform.columns.3.z)\n\nself.sceneView.scene.rootNode.addChildNode(portal!)\n\ninfoLabel.text = \"\"\n```", "```cs\nfunc sessionWasInterrupted(_ session: ARSession) {\n    infoLabel.text = \"Session was interrupted.\"\n    portal?.removeFromParentNode()\n    portal = nil\n}\n```", "```cs\nfunc createWall(width: CGFloat, height: CGFloat, length: CGFloat)->SCNNode {\n    let node = SCNNode()\n\n    let wall = SCNBox(width: width, height: height, length: length, chamferRadius: 0)\n    wall.firstMaterial?.diffuse.contents = UIColor.white\n    let wallNode = SCNNode(geometry: wall)\n\n    node.addChildNode(wallNode)\n\n    return node\n}\n```", "```cs\nfunc createPortal() {\n}\n```", "```cs\nlet wallWidth: CGFloat = 2\nlet doorWidth: CGFloat = 0.8\nlet topWidth = 2 * wallWidth + doorWidth\nlet height: CGFloat = 2\nlet length: CGFloat = 0.05\n```", "```cs\nlet portal = SCNNode()\n\nlet leftWall = createWall(width: wallWidth, height: height, length: length)\nleftWall.position = SCNVector3(x: Float(-(wallWidth + doorWidth)/2), y: Float(height/2), z: 0)\n\nlet rightWall = createWall(width: wallWidth, height: height, length: length)\nrightWall.position = SCNVector3(x: Float((wallWidth + doorWidth)/2), y: Float(height/2), z: 0)\n\nlet topWall = createWall(width: topWidth, height: height, length: length)\ntopWall.position = SCNVector3(x: 0, y: Float(height*3/2), z: 0)\n\nlet bottomWall = createWall(width: topWidth, height: length, length: length)\nbottomWall.position = SCNVector3(x: 0, y: Float(-length/2), z: 0)\n\n```", "```cs\nportal.addChildNode(leftWall)\nportal.addChildNode(rightWall)\nportal.addChildNode(topWall)\nportal.addChildNode(bottomWall)\n\nself.addChildNode(portal)\n```", "```cs\ncreatePortal()\n```", "```cs\nlet maskedWall = SCNBox(width: width, height: height, length: length, chamferRadius: 0)\nmaskedWall.firstMaterial?.diffuse.contents = UIColor.white\nmaskedWall.firstMaterial?.transparency = 0.000000001\n\nlet maskedWallNode = SCNNode(geometry: maskedWall)\nmaskedWallNode.position = SCNVector3.init(0, 0, length)\n\nnode.addChildNode(maskedWallNode)\n```", "```cs\nfunc createWall(width: CGFloat, height: CGFloat, length:\nCGFloat)->SCNNode {\n    ...\n    wallNode.renderingOrder = 100\n    node.addChildNode(wallNode)\n    ...\n    maskedWallNode.renderingOrder = 10\n    node.addChildNode(maskedWallNode)\n    return node\n}\n```", "```cs\nfunc add3DModel() {\n    ...\n    modelNode.renderingOrder = 200\n    self.addChildNode(modelNode)\n}\n```", "```cs\nwall.firstMaterial?.diffuse.contents = UIColor.white \n```", "```cs\nwall.firstMaterial?.diffuse.contents = UIImage(named: \"Media.scnassets/wood.jpg\")\n```", "```cs\nvar compass: SCNNode? = nil\n```", "```cs\nif portal == nil && compass == nil\n{\n    let node = SCNNode()\n    guard let planeAnchor = anchor as? ARPlaneAnchor else {return nil}\n\n    let plane = SCNPlane(width: 0.8, height: 0.8)\n    plane.firstMaterial?.diffuse.contents = UIImage(named: \"Media.scnassets/compass.png\")\n    plane.firstMaterial?.transparency = 0.8\n\n    let planeNode = SCNNode(geometry: plane)\n    planeNode.position = SCNVector3(x: planeAnchor.center.x, y: planeAnchor.center.y, z: planeAnchor.center.z)\n    planeNode.eulerAngles.x = -Float.pi/2\n\n    node.addChildNode(planeNode)\n\n    planes[planeAnchor] = plane\n    compass = node\n\n    return node\n}\nreturn nil\n```", "```cs\nif (compass != nil)\n{\n    portal?.position = compass!.position\n    portal?.rotation = compass!.rotation\n\n    compass?.removeFromParentNode()\n    compass = nil\n}\nelse\n{\n    portal?.position = SCNVector3(x: result.worldTransform.columns.3.x, y: result.worldTransform.columns.3.y, z: result.worldTransform.columns.3.z)\n}\n```"]