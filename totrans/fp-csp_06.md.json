["```cs\npublic Func<Func<Video, bool>, IEnumerable<Video>> FilterVideos(IEnumerable<Video> videos)\n{\n    return filter =>\n    {\n        Console.WriteLine(\"Filtering videos...\");\n        var filteredVideos = videos.Where(filter).ToList();\n        Console.WriteLine($\"Filtered {filteredVideos.Count} videos.\");\n        return filteredVideos;\n    };\n}\n// Usage\nvar allVideos = new List<Video> { /* Collection of videos */ };\nvar filterFunc = FilterVideos(allVideos);\nvar publicVideos = filterFunc(v => v.IsPublic);\n```", "```cs\npublic Func<Unit, Unit> CreateTransformation<T>(Func<Unit, T, Unit> transform, T parameter)\n{\n    return unit => transform(unit, parameter);\n}\n// Usage\nFunc<Unit, Unit> upgradeArmor = CreateTransformation((unit, bonus) => unit.UpgradeArmor(bonus), 10);\nUnit myUnit = new Unit();\nUnit upgradedUnit = upgradeArmor(myUnit);\n```", "```cs\npublic Func<Unit, Unit> ApplyEffect(Func<Unit, Unit> effect)\n{\n    return unit =>\n    {\n        return effect(unit);\n    };\n}\n// Usage\nFunc<Unit, Unit> applyFreeze = ApplyEffect(u => u.Freeze());\nUnit enemyUnit = new Unit();\nUnit affectedUnit = applyFreeze(enemyUnit);\n```", "```cs\npublic delegate void BookPublishedNotification(string bookTitle);\n```", "```cs\npublic class BookPublishingManager\n{\n    public void PublishBook(string bookTitle, BookPublishedNotification notifyDepartments)\n    {\n        // Publishing logic here\n        notifyDepartments(bookTitle);\n    }\n}\n```", "```cs\npublic void NotifyMarketingDepartment(string bookTitle)\n{\n    Console.WriteLine($\"Marketing notified for the book: {bookTitle}\");\n}\n// Usage\nBookPublishingManager publishingManager = new BookPublishingManager();\npublishingManager.PublishBook(\"Functional Programming in C# 12\", NotifyMarketingDepartment);\n```", "```cs\npublic class TowerDefenseGame\n{\n    public event Action<string> OnEnemySpawned;\n    public void SpawnEnemy(string enemyType)\n    {\n        // Enemy spawning logic here\n        OnEnemySpawned?.Invoke(enemyType);\n    }\n}\n// Usage\nTowerDefenseGame game = new TowerDefenseGame();\ngame.OnEnemySpawned += enemyType => Console.WriteLine($\"Spawned {enemyType}\");\ngame.SpawnEnemy(\"Goblin\");\n```", "```cs\npublic class TowerDefenseGame\n{\n    public Func<int, int, double> CalculateScore;\n    public double GetScore(int enemiesDefeated, int towersBuilt)\n    {\n        return CalculateScore?.Invoke(enemiesDefeated, towersBuilt) ?? 0;\n    }\n}\n// Usage\nTowerDefenseGame game = new TowerDefenseGame();\ngame.CalculateScore = (enemiesDefeated, towersBuilt) => enemiesDefeated * 10 + towersBuilt * 5;\ndouble score = game.GetScore(50, 10);\n```", "```cs\npublic class VideoManager\n{\n    IEnumerable<Video> _videos; // We assume it will be filled later\n    public IEnumerable<Video> GetVideosMatching(Predicate<Video> criteria)\n    {\n        foreach (var video in _videos)\n        {\n            if (criteria(video))\n            {\n                yield return video;\n            }\n        }\n    }\n}\n// Usage\nVideoManager videoManager = new();\nPredicate<Video> isPopular = video => video.Views > 100000;\nList<Video> popularVideos = videoManager.GetVideosMatching(isPopular);\n```", "```cs\npublic delegate void BookPublishedCallback(string bookTitle);\npublic class BookPublishingManager\n{\n    public void PublishBook(string bookTitle, BookPublishedCallback callback)\n    {\n        // Book publishing logic here...\n        callback(bookTitle);\n    }\n}\n// Usage\nBookPublishingManager manager = new BookPublishingManager();\nmanager.PublishBook(\"C# in Depth\", title => Console.WriteLine($\"{title} has been published!\"));\n```", "```cs\npublic class BookPublishingManager\n{\n    public event Action<string> OnBookPublished;\n    public void PublishBook(string bookTitle)\n    {\n        // Book publishing logic here...\n        OnBookPublished?.Invoke(bookTitle);\n    }\n}\n// Usage\nBookPublishingManager manager = new BookPublishingManager();\nmanager.OnBookPublished += title => Console.WriteLine($\"{title} has been published!\");\nmanager.PublishBook(\"Advanced C# Programming\");\n```", "```cs\npublic class Video\n{\n    public string Title { get; set; }\n    public int DurationInSeconds { get; set; }\n}\nList<Video> videos = new List<Video>\n{\n    new Video { Title = \"Introduction to C#\", DurationInSeconds = 300 },\n    new Video { Title = \"Advanced C# Techniques\", DurationInSeconds = 540 },\n    new Video { Title = \"C# Functional Programming\", DurationInSeconds = 420 }\n};\nList<Video> longVideos = videos.FindAll(delegate(Video video)\n{\n    return video.DurationInSeconds > 450; // Filtering videos longer than 450 seconds\n});\nforeach (Video video in longVideos)\n{\n    Console.WriteLine(video.Title);  // Outputs titles of videos longer than 450 seconds\n}\n```", "```cs\nList<Video> videos = GetAllVideos();\n IEnumerable<Video> popularVideos = videos.Where(video => video.Views > 100000);\nforeach(var video in popularVideos)\n{\n    Console.WriteLine(video.Title);\n}\n```", "```cs\nList<Book> books = GetBooks();\nvar upperCaseTitles = books.Select(book => book.Title.ToUpper());\nforeach(var title in upperCaseTitles)\n{\n    Console.WriteLine(title);\n}\n```", "```cs\ndouble averageGrade = students.Average(student => student.Grade);\nConsole.WriteLine($\"Average Grade: {averageGrade}\");\n```", "```cs\npublic class Tower\n{\n    public string Type { get; set; }\n    public int Damage { get; set; }\n    public bool IsUpgraded { get; set; }\n}\npublic class Game\n{\n    private List<Tower> _towers { get; set; }\n    public IEnumerable<Tower> FilterTowers(Func<Tower, bool> predicate) { /* … */ }\n    public event Action<Tower> TowerUpgraded;\n    public void UpgradeTower(Tower tower) { /* … */ }\n}\n```", "```cs\n    public IEnumerable<Tower> FilterTowers(Func<Tower, bool> predicate)\n    {\n        return _towers.Where(predicate);\n    }\n    ```", "```cs\n    public void UpgradeTower(Tower tower)\n    {\n        if (!tower.IsUpgraded)\n        {\n            tower.IsUpgraded = true;\n            TowerUpgraded?.Invoke(tower);\n        }\n    }\n    ```", "```cs\n    Game game = new Game();\n    // Filtering towers using a Predicate\n    var highDamageTowers = game.FilterTowers(tower => tower.Damage > 50);\n    // Subscribing to events with anonymous methods\n    game.TowerUpgraded += tower => Console.WriteLine($\"{tower.Type} was upgraded.\");\n    // Upgrading a tower\n    var cannonTower = highDamageTowers.First();\n    game.UpgradeTower(cannonTower);\n    ```", "```cs\n    myDelegate?.Invoke();\n    ```", "```cs\npublic class Tower\n{\n     public string Name { get; set; }\n     public int Damage { get; set; }\n}\npublic delegate int CompareTowers(Tower a, Tower b);\npublic static void SortTowers(List<Tower> towers, CompareTowers compare)\n{\n     towers.Sort((x, y) => compare(x, y));\n}\n// Usage:\nList<Tower> towers = new List<Tower>\n{\n     new Tower { Name = \"Archer\", Damage = 10 },\n     new Tower { Name = \"Cannon\", Damage = 20 },\n     new Tower { Name = \"Mage\", Damage = 15 }\n};\nSortTowers(towers, (a, b) => b.Damage.CompareTo(a.Damage)); // Sort descending\nforeach (var tower in towers)\n{\n     Console.WriteLine($\"{tower.Name}: {tower.Damage} damage\");\n}\n```", "```cs\npublic class Enemy\n{\n     public string Name { get; set; }\n     public int Health { get; set; }\n}\npublic static void ProcessEnemies(List<Enemy> enemies, Action<Enemy> action)\n{\n     foreach (var enemy in enemies)\n     {\n                  action(enemy);\n     }\n}\n// Usage:\nList<Enemy> enemies = new List<Enemy>\n{\n     new Enemy { Name = \"Goblin\", Health = 50 },\n     new Enemy { Name = \"Orc\", Health = 100 },\n     new Enemy { Name = \"Troll\", Health = 200 }\n};\n// Calculate damage from arrow tower\nProcessEnemies(enemies, (e) => Console.WriteLine($\"{e.Name} takes {e.Health * 0.1} damage from arrow tower\"));\n// Calculate damage from fire tower\nProcessEnemies(enemies, (e) => Console.WriteLine($\"{e.Name} takes {e.Health * 0.2} damage from fire tower\"));\n```", "```cs\npublic class Tower\n{\n     public string Name { get; set; }\n     public int Range { get; set; }\n}\npublic static Tower GetLongerRangeTower(Tower t1, Tower t2, Func<Tower, Tower, Tower> compare)\n{\n     return compare(t1, t2);\n}\n// Usage:\nTower archer = new Tower { Name = \"Archer\", Range = 50 };\nTower cannon = new Tower { Name = \"Cannon\", Range = 30 };\nTower longerRange = GetLongerRangeTower(archer, cannon, (a, b) => a.Range > b.Range ? a : b);\nConsole.WriteLine($\"{longerRange.Name} has the longer range of {longerRange.Range}\");\n```"]