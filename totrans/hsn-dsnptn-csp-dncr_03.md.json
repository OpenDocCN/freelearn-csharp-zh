["```cs\ninterface IAnimal\n{\n     string MakeNoise();\n}\nclass Dog : IAnimal\n{\n   public string MakeNoise()\n     {\n        return \"Woof\";\n     }\n}\nclass Cat : IAnimal\n{\n    public string MakeNoise()\n    {\n        return \"Meouw\";\n    }\n}\n```", "```cs\nvar animals = new List<IAnimal> { new Cat(), new Dog() };\n\nforeach(var animal in animals)\n{\n    Console.Write(animal.MakeNoise());\n}\n```", "```cs\ninterface IMessage\n{\n    void PrintMessage();\n}\n\nabstract class Message : IMessage\n{\n    protected string _text;\n    public Message(string text)\n    {\n        _text = text;\n    }\n    abstract public void PrintMessage();\n}\n```", "```cs\nclass SimpleMessage : Message\n{\n    public SimpleMessage(string text) : base(text) { }\n\n    public override void PrintMessage()\n    {\n        Console.WriteLine(_text);\n    }\n}\n```", "```cs\nclass AlertMessage : Message\n{\n    public AlertMessage(string text) : base(text) { }\n    public override void PrintMessage()\n    {\n        Console.Beep();\n        Console.WriteLine(_text);\n    }\n}\n```", "```cs\nabstract class MessageDecorator : IMessage\n{\n    protected Message _message;\n    public MessageDecorator(Message message)\n    {\n        _message = message;\n    }\n\n    public abstract void PrintMessage();\n}\n```", "```cs\nclass NormalDecorator : MessageDecorator\n{\n    public NormalDecorator(Message message) : base(message) { }\n\n    public override void PrintMessage()\n    {\n        Console.ForegroundColor = ConsoleColor.Green;\n        _message.PrintMessage();\n        Console.ForegroundColor = ConsoleColor.White;\n    }\n}\n```", "```cs\n\nclass ErrorDecorator : MessageDecorator\n{\n    public ErrorDecorator(Message message) : base(message) { }\n\n    public override void PrintMessage()\n    {\n        Console.ForegroundColor = ConsoleColor.Red;\n        _message.PrintMessage();\n        Console.ForegroundColor = ConsoleColor.White;\n    }\n}\n```", "```cs\nstatic void Main(string[] args)\n{\n    var messages = new List<IMessage>\n    {\n        new NormalDecorator(new SimpleMessage(\"First Message!\")),\n        new NormalDecorator(new AlertMessage(\"Second Message with a beep!\")),\n        new ErrorDecorator(new AlertMessage(\"Third Message with a beep and in red!\")),\n        new SimpleMessage(\"Not Decorated...\")\n    };\n    foreach (var message in messages)\n    {\n        message.PrintMessage();\n    }\n    Console.Read();\n}\n```", "```cs\nclass AlertMessage : Message\n{\n    public AlertMessage(string text) : base(text) { }\n    public override void PrintMessage()\n    {\n        System.Media.SystemSounds.Exclamation.Play();\n        Console.WriteLine(_text);\n    }\n}\n```", "```cs\n[Flags]\nenum ServiceRequirements\n{\n    None = 0,\n    WheelAlignment = 1,\n    Dirty = 2,\n    EngineTune = 4,\n    TestDrive = 8\n}\n```", "```cs\nclass Car\n{\n    public ServiceRequirements Requirements { get; set; }\n\n    public bool IsServiceComplete\n    {\n        get\n        {\n            return Requirements == ServiceRequirements.None;\n        }\n    }\n}\n```", "```cs\nabstract class ServiceHandler\n{\n    protected ServiceHandler _nextServiceHandler;\n    protected ServiceRequirements _servicesProvided;\n\n    public ServiceHandler(ServiceRequirements servicesProvided)\n    {\n        _servicesProvided = servicesProvided;\n    }\n}\n```", "```cs\npublic void Service(Car car)\n{\n    if (_servicesProvided == (car.Requirements & _servicesProvided))\n    {\n        Console.WriteLine($\"{this.GetType().Name} providing {this._servicesProvided} services.\");\n        car.Requirements &= ~_servicesProvided;\n    }\n\n    if (car.IsServiceComplete || _nextServiceHandler == null)\n        return;\n    else\n        _nextServiceHandler.Service(car);\n}\n```", "```cs\npublic void SetNextServiceHandler(ServiceHandler handler)\n{\n    _nextServiceHandler = handler;\n}\n```", "```cs\nclass Detailer : ServiceHandler\n{\n    public Detailer() : base(ServiceRequirements.Dirty) { }\n}\n```", "```cs\nclass Mechanic : ServiceHandler\n{\n    public Mechanic() : base(ServiceRequirements.EngineTune) { }\n}\n```", "```cs\nclass WheelSpecialist : ServiceHandler\n{\n    public WheelSpecialist() : base(ServiceRequirements.WheelAlignment) { }\n}\n```", "```cs\nclass QualityControl : ServiceHandler\n{\n    public QualityControl() : base(ServiceRequirements.TestDrive) { }\n}\n```", "```cs\nstatic void Main(string[] args)\n{ \n    var mechanic = new Mechanic();\n    var detailer = new Detailer();\n    var wheels = new WheelSpecialist();\n    var qa = new QualityControl();\n```", "```cs\n    qa.SetNextServiceHandler(detailer);\n    wheels.SetNextServiceHandler(qa);\n    mechanic.SetNextServiceHandler(wheels);\n```", "```cs\n    Console.WriteLine(\"Car 1 is dirty\");\n    mechanic.Service(new Car { Requirements = ServiceRequirements.Dirty });\n\n    Console.WriteLine();\n\n    Console.WriteLine(\"Car 2 requires full service\");\n    mechanic.Service(new Car { Requirements = ServiceRequirements.Dirty | \n                                                ServiceRequirements.EngineTune | \n                                                ServiceRequirements.TestDrive | \n                                                ServiceRequirements.WheelAlignment });\n\n    Console.Read();\n}\n```", "```cs\nclass Subject\n{\n    private int _quantity = 0;\n\n    public void UpdateQuantity(int value)\n    {\n        _quantity += value;\n\n        // alert any observers\n    }\n}\n```", "```cs\npublic delegate void QuantityUpdated(int quantity);\n```", "```cs\npublic event QuantityUpdated OnQuantityUpdated;\n```", "```cs\npublic void UpdateQuantity(int value)\n{\n    _quantity += value;\n\n    // alert any observers\n    OnQuantityUpdated?.Invoke(_quantity);\n}\n```", "```cs\nclass Observer\n{\n    ConsoleColor _color;\n    public Observer(ConsoleColor color)\n    {\n        _color = color;\n    }\n\n    internal void ObserverQuantity(int quantity)\n    {\n        Console.ForegroundColor = _color;\n        Console.WriteLine($\"I observer the new quantity value of {quantity}.\");\n        Console.ForegroundColor = ConsoleColor.White;\n    }\n}\n```", "```cs\nvar subject = new Subject();\nvar greenObserver = new Observer(ConsoleColor.Green);\nvar redObserver = new Observer(ConsoleColor.Red);\nvar yellowObserver = new Observer(ConsoleColor.Yellow);\n```", "```cs\nsubject.OnQuantityUpdated += greenObserver.ObserverQuantity;\nsubject.OnQuantityUpdated += redObserver.ObserverQuantity;\nsubject.OnQuantityUpdated += yellowObserver.ObserverQuantity;\n```", "```cs\nsubject.UpdateQuantity(12);\nsubject.UpdateQuantity(5); \n```"]