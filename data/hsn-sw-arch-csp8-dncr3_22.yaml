- en: Deploying Your Application with Azure DevOps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 部署你的应用程序
- en: This chapter focuses on so-called **service design thinking**, that is, keeping
    in mind the software you are designing as a service offered to an organization/part
    of an organization. The main takeaway of this approach is that the highest priority
    is the value your software gives to the target organization. Moreover, you are
    not offering just working code and an agreement to fix bugs, but a solution for
    all of the needs that your software was conceived for. In other words, your job
    includes everything it needs to satisfy those needs, such as monitoring users'
    satisfaction and adapting the software when the user needs change.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点介绍所谓的**服务设计思维**，即牢记你正在设计的软件作为提供给组织/组织部分的服务。这种方法的主要收获是，最高优先级是软件为目标组织带来的价值。此外，你提供的不仅仅是可工作的代码和修复错误的协议，而是一套满足软件所设想的所有需求的解决方案。换句话说，你的工作包括满足这些需求所需的一切，例如监控用户满意度，并在用户需求发生变化时调整软件。
- en: Finally, it is easier to monitor the software to reveal issues and new needs
    and to modify it to adapt it quickly to ever-changing needs.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，监控软件以揭示问题和新的需求，并快速修改以适应不断变化的需求要容易得多。
- en: Service design thinking is strictly tied to the **Software as a Service** (**SaaS**)
    model, which we discussed in [Chapter 4](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml),
    *Deciding the Best Cloud-Based Solution*. In fact, the simplest way to offer solutions
    based on web services is to offer the usage of web services as a service instead
    of selling the software that implements them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 服务设计思维严格与**软件即服务**（**SaaS**）模型相关联，我们在[第 4 章](049a0a4b-74b6-41a1-92db-87a4f8af9fd1.xhtml)中讨论了该模型，*决定最佳基于云的解决方案*。事实上，提供基于
    Web 服务的解决方案最简单的方法是提供作为服务的 Web 服务使用，而不是销售实现它们的软件。
- en: 'More specifically, this chapter covers the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，本章涵盖了以下主题：
- en: Understanding SaaS
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 SaaS
- en: Preparing a solution for a service scenario
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为服务场景准备解决方案
- en: Use case – deploying our package-management application with Azure Pipelines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例 - 使用 Azure Pipelines 部署我们的包管理应用程序
- en: By the end of this chapter, you will be able to design software according to
    service design thinking principles and use Azure Pipelines to deploy your application.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够根据服务设计思维原则设计软件，并使用 Azure Pipelines 部署你的应用程序。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires Visual Studio 2017 or 2019 free Community Edition or better
    with all database tools installed. It requires a free Azure account. If you have
    not already created one, the *Creating an Azure account* subsection of [Chapter
    1](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml), *Understanding the Importance
    of Software Architecture*, explains how to do so. This chapter uses the same code
    as [Chapter 15](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml), *Testing Your Code
    with Unit Test Cases and TDD*, which is available here: [https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要 Visual Studio 2017 或 2019 免费社区版或更高版本，并安装所有数据库工具。它需要一个免费的 Azure 账户。如果你还没有创建一个，[第
    1 章](14b5c5da-4042-439e-9e5a-2e19ba4c4930.xhtml)中“理解软件架构的重要性”的*创建 Azure 账户*小节解释了如何创建。本章使用与[第
    15 章](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml)相同的代码，*使用单元测试用例和 TDD 测试你的代码*，可在以下链接找到：[https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8](https://github.com/PacktPublishing/Hands-On-Software-Architecture-with-CSharp-8)。
- en: Understanding SaaS
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SaaS
- en: Selling/using software as a service is connected with a wider set of solutions
    design principles called service design thinking. Service design thinking is not
    just a software development technique and/or a software deployment approach, but
    it impacts several business areas, namely, organization and human resources, software
    development processes, and finally, hardware infrastructures and software architecture.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件作为服务销售/使用与一套更广泛的服务设计思维原则相关联。服务设计思维不仅仅是一种软件开发技术/或软件部署方法，它还影响几个业务领域，即组织与人力资源、软件开发流程，最后是硬件基础设施和软件架构。
- en: In the subsections that follow, we will briefly discuss the implications for
    each of the business areas we listed, and in the last subsection, we will focus
    specifically on the SaaS deployment model.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的小节中，我们将简要讨论我们列出的每个业务领域的含义，在最后一个小节中，我们将专注于 SaaS 部署模型。
- en: Adapting your organization to a service scenario
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使你的组织适应服务场景
- en: The first organizational implication comes from the need to optimize the value
    of the software for the target organization. This requires a human resource or
    a team—in charge of planning and monitoring the impact of the software in the
    target organization—to maximize the value added by the software. This strategic
    role is not needed just during the initial design stage but during the whole lifetime
    of the application. In fact, this role is in charge of keeping the software fine-tuned
    with the ever-changing needs of the target organization.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个组织影响来自优化软件对目标组织价值的需要。这需要一个人力资源或团队——负责计划和监控软件在目标组织中的影响——以最大化软件带来的增值。这个战略角色不仅在初始设计阶段需要，在整个应用程序的生命周期中都需要。实际上，这个角色负责保持软件与目标组织不断变化的需求精确匹配。
- en: Another important area of impact is **human resource management**. In fact,
    since the main priority is the value added by the software and not exploiting
    existing resources and competences, human resources must be adapted to the project
    needs. This means acquiring new resources as soon as they are needed and developing
    the required competencies through new human resources and/or adequate training
    of existing resources.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的影响领域是**人力资源管理**。事实上，由于主要优先考虑的是软件带来的增值，而不是利用现有资源和能力，因此人力资源必须适应项目需求。这意味着一旦需要就获取新资源，并通过新的人力资源和/或对现有资源的适当培训来发展所需的能力。
- en: The next subsection deals with the implications of all processes involved in
    software development.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个子节将讨论所有涉及软件开发过程的含义。
- en: Developing software in a service scenario
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在服务场景中开发软件
- en: The main constraint that impacts software development processes is the need
    to keep the software fine-tuned with the organization's needs. This need can be
    satisfied by any agile methodology based on a CI/CD approach. For a short review
    of CI/CD, please refer to the *Organizing your work using Azure DevOps* section
    of [Chapter 3](bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml), *Documenting Requirements
    with Azure DevOps*, while for a detailed discussion of CI/CD, please refer to
    [Chapter 17](b444cf5c-311d-4f74-80b0-0e86c0c13307.xhtml), *Deploying Your Application
    with Azure DevOps,* which is completely dedicated to CI/CD. It is worth pointing
    out that any well-designed CI/CD cycle should include the processing of user feedback
    and user satisfaction reports.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 影响软件开发流程的主要约束是保持软件与组织需求精确匹配的需求。这一需求可以通过基于CI/CD方法的任何敏捷方法来满足。对于CI/CD的简要回顾，请参阅第3章“使用Azure
    DevOps组织工作”部分，[文档化需求](https://wiki.example.org/bc26065f-b001-4123-9524-3bbfa87bfadd.xhtml)，而对于CI/CD的详细讨论，请参阅第17章“使用Azure
    DevOps部署您的应用程序”，该章节完全致力于CI/CD。值得注意的是，任何设计良好的CI/CD周期都应该包括处理用户反馈和用户满意度报告。
- en: Moreover, to optimize the value added by the software, it is a good practice
    to organize stages where the development team (or part of it) is placed in close
    contact with the system users so that developers can better understand the impact
    of the software on the target organization.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，为了优化软件带来的增值，组织开发团队（或其一部分）与系统用户紧密接触的阶段是一个好的做法，这样开发者可以更好地理解软件对目标组织的影响。
- en: Finally, the value added by the software must always be kept in mind when writing
    both functional and non-functional requirements. For this reason, it is useful
    to annotate *user stories* with consideration of *why* and *how* they contribute
    to value. The process of collecting requirements is discussed in [Chapter 2](a4194162-692d-4ac4-9b8e-a48199e746ab.xhtml),
    *Functional and Nonfunctional Requirements*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在编写功能性和非功能性需求时，必须始终牢记软件带来的增值。因此，用考虑*为什么*和*如何*它们对增值做出贡献的原因来注释*用户故事*是有用的。收集需求的过程在第2章“功能性和非功能性需求”中讨论。
- en: More technical implications are discussed in the next subsection.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个子节将讨论更多技术影响。
- en: Technical implications of a service scenario
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务场景的技术影响
- en: 'In a service scenario, both the hardware infrastructure and software architecture
    are constrained by the three main principles mentioned as follows, which are an
    immediate consequence of the requirement to keep the software fine-tuned with
    the organization''s needs, namely, the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务场景中，硬件基础设施和软件架构都受到以下三个主要原则的限制，这些原则是保持软件与组织需求精确匹配的必然结果，具体如下：
- en: There's the need to monitor the software to discover any kind of issue that
    might have been caused by system malfunctions or changes in software usage and/or
    user needs. This implies extracting health checks and load statistics from all
    hardware/software components. Good hints for discovering changes in the organization's
    needs are also given by statistics on the operations performed by the users—more
    specifically, the average time spent by both the user and the application on each
    operation instance, and the number of instances of each operation performed per
    unit of time (day, week, or month).
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需要监控软件以发现可能由系统故障或软件使用和/或用户需求变化引起的任何问题。这意味着从所有硬件/软件组件中提取健康检查和负载统计信息。用户执行的操作统计信息也能提供有关组织需求变化的良好线索——更具体地说，用户和应用程序在每个操作实例上花费的平均时间以及每单位时间内（日、周或月）执行的操作实例数量。
- en: There's also the need to monitor user satisfaction. Feedback on user satisfaction
    can be obtained by adding to each application screen a link to an easy-to-fill
    user-satisfaction report page.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 还需要监控用户满意度。可以通过在每个应用程序屏幕上添加一个链接到易于填写的用户满意度报告页面来获取用户满意度的反馈。
- en: 'Finally, there''s the need to adapt both hardware and software quickly, both
    to the traffic received by each application module and to the changes in the organization''s
    needs. This means the following:'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，需要快速适应硬件和软件，既要适应每个应用程序模块接收到的流量，也要适应组织需求的变更。这意味着以下内容：
- en: Paying extreme attention to software modularity
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极端关注软件模块化
- en: Keeping the door open for changes in the database engine and preferring SOA
    or microservices-based solutions to monolithic software
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持对数据库引擎变化的开放态度，并优先考虑基于SOA或微服务架构的解决方案，而不是单体软件
- en: Keeping the door open to new technologies
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持对新技术的开放态度
- en: Making the hardware easy to adapt means allowing hardware scaling, which in
    turn implies either the adoption of cloud infrastructures, hardware clusters,
    or both. It is also important to keep the door open to changes in cloud service
    suppliers, which in turn means encapsulating the dependence on the cloud platform
    in a small number of software modules.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使硬件易于适应意味着允许硬件扩展，这反过来又意味着采用云基础设施、硬件集群或两者兼而有之。同时，保持对云服务供应商变化的开放态度也很重要，这反过来意味着将依赖云平台封装在少数几个软件模块中。
- en: The maximization of the value added by the software can achieved by choosing
    the best technology available for the implementation of each module, which in
    turn means being able to mix different technologies. Here is where container-based
    technologies, such as Docker, come into play. Docker and related technologies
    were described in [Chapter 5](49aed8bb-9a4a-4241-9efc-f53c3f53dd5a.xhtml), *Applying
    a Microservice Architecture to Your Enterprise Application*.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择每个模块实现的最佳技术，可以最大化软件增加的价值，这反过来意味着能够混合不同的技术。这正是基于容器的技术，如Docker，发挥作用的地方。Docker和相关技术已在[第5章](49aed8bb-9a4a-4241-9efc-f53c3f53dd5a.xhtml)中描述，即*将微服务架构应用于您的企业应用*。
- en: Summing up, all of the requirements we have listed converge toward most of the
    advanced technologies we have described in this book, such as cloud services,
    scalable web applications, distributed/scalable databases, Docker, SOA, and microservices
    architectures.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们所列出的所有要求都汇聚于本书中描述的大多数先进技术，例如云服务、可扩展的Web应用、分布式/可扩展数据库、Docker、SOA和微服务架构。
- en: More details on how to prepare your software for a service environment are given
    in the next section, while the next subsection focuses specifically on the advantages
    and disadvantages of SaaS applications.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何为服务环境准备软件的更多细节将在下一节中给出，而下一小节将专门讨论SaaS应用的优缺点。
- en: Adopting a SaaS solution
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 采用SaaS解决方案
- en: 'The main attraction of SaaS solutions is their flexible payment model, which
    offers the following advantages:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: SaaS解决方案的主要吸引力在于其灵活的支付模式，它提供了以下优势：
- en: You can avoid abandoning big investments in favor of more affordable monthly
    payments.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以避免为了更实惠的月度支付而放弃大额投资。
- en: You can start with a cheap system and then move toward more expansive solutions
    only when the business grows.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以从一个便宜的系统开始，然后在业务增长时再转向更昂贵的解决方案。
- en: 'However, SaaS solutions also offer other advantages, namely, the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，SaaS解决方案还提供了其他优势，具体如下：
- en: In all cloud solutions, you can easily scale up your solution.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在所有云解决方案中，您可以轻松扩展您的解决方案。
- en: The application is automatically updated.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序会自动更新。
- en: Since SaaS solutions are delivered over the public internet, they are accessible
    from any location.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于SaaS解决方案是通过公共互联网提供的，因此可以从任何位置访问。
- en: 'Unluckily, SaaS advantages come at a cost, since SaaS also has not negligible
    disadvantages, namely, the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，SaaS的优势是有代价的，因为SaaS也存在不可忽视的劣势，具体如下：
- en: Your business is strictly tied to the SaaS provider, which might discontinue
    the service and/or modify it in a way that is not acceptable to you anymore.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的业务与SaaS提供商紧密相连，这可能导致服务被终止或以您不再接受的方式修改。
- en: Usually, you can't implement any kind of customization, being limited to the
    few standard options offered by the SaaS supplier. However, sometimes SaaS suppliers
    also offer the possibility to add custom modules written either by them or by
    you.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常，您无法实施任何类型的定制，只能限制于SaaS供应商提供的少数标准选项。然而，有时SaaS供应商也提供添加自定义模块的可能性，这些模块可以由他们或您编写。
- en: Summing up, SaaS solutions offer interesting advantages but also some disadvantages,
    so you, as a software architect, must perform a detailed analysis to decide how
    to adopt them.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，SaaS解决方案提供了有趣的优势，但也存在一些劣势，因此作为软件架构师，您必须进行详细分析以决定如何采用它们。
- en: The next section explains how to adapt software to be used in a service scenario.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分将解释如何将软件适应用于服务场景。
- en: Preparing a solution for a service scenario
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备服务场景的解决方案
- en: First of all, *preparing a solution for a service scenario* means designing
    it specifically for the cloud and/or for a distributed environment. In turn, this
    means designing it with scalability, fault tolerance, and automatic fault recovery
    in mind.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，*为服务场景准备解决方案*意味着专门为云和/或分布式环境设计它。反过来，这意味着在设计时考虑到可扩展性、容错性和自动故障恢复。
- en: The main implications of the preceding three points are concerned with the way
    the *state* is handled. Stateless module instances are easy to scale and to replace,
    so you should carefully plan which modules are stateless and which ones have states.
    Moreover, as explained in [Chapter 7](77cdecb5-cef4-4b02-80a1-052ad366b9f3.xhtml),
    *How to Choose Your Data Storage in the Cloud*, you have to keep in mind that
    write and read operations scale in a completely different way. In particular,
    read operations are easier to scale with replication, while write operations do
    not scale well with relational databases and often require NoSQL solutions.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 前三点的主要影响是关于如何处理*状态*。无状态模块实例易于扩展和替换，因此您应仔细规划哪些模块是无状态的，哪些有状态。此外，如[第7章](77cdecb5-cef4-4b02-80a1-052ad366b9f3.xhtml)“如何在云中选择您的数据存储”中所述，您必须记住写入和读取操作以完全不同的方式扩展。特别是，读取操作可以通过复制更容易扩展，而写入操作在关系型数据库中扩展不佳，通常需要NoSQL解决方案。
- en: 'High scalability in a distributed environment prevents the usage of distributed
    transactions and of synchronous operations, in general. Therefore, data coherence
    and fault tolerance can be achieved only with more complex techniques based on
    asynchronous messages, such as the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在分布式环境中，高可扩展性防止了分布式事务和同步操作的使用。因此，数据一致性和容错性只能通过基于异步消息的更复杂技术来实现，如下所示：
- en: One technique is storing all messages to send in a queue so that asynchronous
    transmissions can be retried in the event of errors or timeouts. Messages can
    be removed from the queue either when confirmation of reception is received or
    when the module decides to abort the operation that produced the message.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种技术是将所有要发送的消息存储在队列中，以便在发生错误或超时的情况下可以重试异步传输。消息可以在收到确认接收或模块决定终止产生消息的操作时从队列中删除。
- en: Another is handling the possibility that the same message is received several
    times because timeouts caused the same message to be sent several times.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个问题是处理同一消息被多次接收的可能性，因为超时导致同一消息被多次发送。
- en: If needed, use techniques such as optimistic concurrency and event sourcing
    to minimize concurrency problems in databases. Optimistic concurrency is explained
    in *The data layer* subsection of the use case at the end of [Chapter 13](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml),
    *Presenting ASP.NET Core MVC*, while event sourcing is described together with
    other data layer stuff in the *Using SOLID principles to map your domains* section
    of [Chapter 10](2a42483c-2193-4bd4-91b4-0fdce94f6ed1.xhtml), *Understanding the
    Different Domains in a Software Solution*.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要，使用乐观并发和事件溯源等技术来最小化数据库中的并发问题。乐观并发在[第13章](003ee8cb-5995-4364-8772-73d73df29cf8.xhtml)的“数据层”子部分中进行了解释，该部分位于“展示ASP.NET
    Core MVC”用例的末尾，而事件溯源则在[第10章](2a42483c-2193-4bd4-91b4-0fdce94f6ed1.xhtml)的“使用SOLID原则映射您的领域”部分中与其他数据层内容一起进行了描述。
- en: The first two points in the preceding list are discussed in detail together
    with other distributed processing techniques in the *How does .NET Core deal with
    Microservices?* section of [Chapter 5](49aed8bb-9a4a-4241-9efc-f53c3f53dd5a.xhtml), *Applying
    a Microservice Architecture to Your Enterprise Application*.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的列表中的前两点与[第五章](49aed8bb-9a4a-4241-9efc-f53c3f53dd5a.xhtml)的“如何.NET Core处理微服务？”部分中讨论的其他分布式处理技术一起进行了详细讨论，该部分标题为“将微服务架构应用于您的企业应用程序”。
- en: Fault tolerance and automatic fault recovery require that software modules implement
    health check interfaces that the cloud framework might call, to verify whether
    the module is working properly or whether it needs to be killed and replaced by
    another instance. ASP.NET Core and all Azure microservices solutions offer off-the-shelf
    basic health checks, so the developer doesn't need to take care of them. However,
    more detailed custom health checks can be added by implementing a simple interface.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 容错和自动故障恢复要求软件模块实现健康检查接口，云框架可能会调用这些接口以验证模块是否正常工作，或者是否需要将其终止并由另一个实例替换。ASP.NET
    Core和所有Azure微服务解决方案都提供现成的基本健康检查，因此开发者不需要关心这些。然而，可以通过实现一个简单的接口添加更详细的自定义健康检查。
- en: The difficulty increases if you have the goal of possibly changing the cloud
    provider of some of the application modules. In this case, the dependency from
    the cloud platform must be encapsulated in just a few modules, and solutions that
    are too strictly tied to a specific cloud platform must be discarded. Hence, for
    instance, you should avoid the use of stateful/stateless native Service Fabric
    services since their architecture is specific to Azure Service Fabric, so they
    can't be ported to a different cloud platform.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的目标是可能更改某些应用程序模块的云提供商，那么难度会增加。在这种情况下，必须将云平台依赖封装在仅几个模块中，并且必须丢弃过于严格绑定到特定云平台解决方案。因此，例如，你应该避免使用有状态的/无状态的本地Service
    Fabric服务，因为它们的架构是特定于Azure Service Fabric的，所以它们不能移植到不同的云平台。
- en: 'If your application is conceived for a service scenario, everything must be
    automated: new versions testing and validation, the creation of the whole cloud
    infrastructure needed by the application, and the deployment of the application
    on that infrastructure.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用程序是为服务场景设计的，那么一切都必须自动化：新版本的测试和验证、创建应用程序所需的整个云基础设施，以及在该基础设施上部署应用程序。
- en: All cloud platforms offer languages and facilities to automate the whole software
    CI/CD cycle, that is, building the code, testing it, triggering manual version
    approvals, hardware infrastructure creation, and application deployment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所有云平台都提供语言和工具来自动化整个软件CI/CD周期，即构建代码、测试代码、触发手动版本批准、创建硬件基础设施以及部署应用程序。
- en: Azure Pipelines allows the complete automatization of all of the steps listed.
    The use case in [Chapter 15](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml), *Testing
    Your Code with Unit Test Cases and TDD*, shows how to automatize all steps up
    to and including software testing with Azure Pipelines. The use case in the next
    section will show how to automatize the application deployment on the Azure web
    app platform.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Pipelines允许自动化所有列出的步骤。在[第15章](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml)的“使用单元测试用例和TDD测试您的代码”用例中展示了如何使用Azure
    Pipelines自动化包括软件测试在内的所有步骤。下一节的用例将展示如何自动化在Azure Web应用平台上的应用程序部署。
- en: 'Automatization has a more fundamental role in SaaS applications since the whole
    creation of a new tenant for each new customer must be automatically triggered
    by the customer subscription. More specifically, multi-tenant SaaS applications
    can be implemented with three fundamental techniques:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化在SaaS应用程序中扮演着更基本的角色，因为每个新客户的整个新租户的创建必须由客户订阅自动触发。更具体地说，多租户SaaS应用程序可以通过三种基本技术实现：
- en: All customers share the same hardware infrastructure and data storage. This
    solution is the easiest to implement since it requires the implementation of a
    standard web application. However, it is possible just for very simple SaaS services
    since, for more complex applications, it becomes always more difficult to ensure
    that storage space and computation time are split equally between users. Moreover,
    as the database becomes more and more complex, it is always more difficult to
    keep the data of different users safely isolated.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有客户共享相同的基础设施和数据存储。这个解决方案最容易实施，因为它只需要实现一个标准Web应用程序。然而，它仅适用于非常简单的SaaS服务，因为对于更复杂的应用程序，始终更难确保存储空间和计算时间在用户之间平均分配。此外，随着数据库变得越来越复杂，始终更难确保不同用户的数据安全隔离。
- en: All customers share the same infrastructure but each customer has its own data
    storage. This option solves all database problems of the previous solution, and
    it is quite easy to automatize since the creation of a new tenant requires just
    the creation of a new database. This solution offers a simple way to define pricing
    strategies, by linking them to storage consumption.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有客户共享相同的基础设施，但每个客户都有自己的数据存储。这个选项解决了之前解决方案中所有的数据库问题，并且由于创建一个新的租户只需要创建一个新的数据库，因此它很容易自动化。此解决方案提供了一种简单的方式来定义定价策略，通过将其与存储消耗相关联。
- en: Each customer has their private infrastructure and data storage. This is the
    most flexible strategy. From the user's point of view, its only disadvantage is
    the higher price. Therefore, it is convenient only above a minimum threshold of
    computational power required by each user. It is more difficult to automate since
    a whole infrastructure must be created for each new customer and a new instance
    of the application must be deployed on it.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个客户都有自己的私有基础设施和数据存储。这是最灵活的策略。从用户的角度来看，它的唯一缺点是价格更高。因此，它仅适用于每个用户所需的计算能力达到最低阈值以上。由于必须为每个新客户创建整个基础设施，并在其上部署应用程序的新实例，因此自动化更困难。
- en: Whichever of the three strategies is chosen, you need the possibility to scale
    out your cloud resources as your consumers increase.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 无论选择哪三种策略中的哪一种，你都需要有随着消费者增加而扩展你的云资源的能力。
- en: If you also need the possibility to ensure your infrastructure creation scripts
    work across several cloud providers, then, on the one hand, you can't use features
    that are too specific to a single cloud platform, and on the other, you need a
    unique infrastructure creation language that can be translated into the native
    languages of the more common cloud platforms. Terraform and Ansible are two very
    common choices for describing hardware infrastructures.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还需要确保你的基础设施创建脚本可以在多个云提供商之间工作，那么一方面，你不能使用过于特定于单个云平台的特性，另一方面，你需要一种独特的、可以翻译成更常见云平台本地语言的、用于创建基础设施的语言。Terraform和Ansible是描述硬件基础设施的两个非常常见的选择。
- en: Use case – deploying our package-management application with Azure Pipelines
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用例 - 使用Azure Pipelines部署我们的包管理应用程序
- en: In this section, we will configure an automatic deployment to the Azure App
    Service platform for the DevOps project that we already defined in the use case
    at the end of [Chapter 15](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml), *Testing
    Your Code with Unit Test Cases and TDD*. Azure DevOps can also automatically create
    a new web app, but to prevent configuration errors (which might consume all your
    free credit), we will create it manually and let Azure DevOps just deploy the
    application. All of the required steps are organized into various subsections
    as follows.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将配置一个自动部署到Azure App Service平台，用于我们已经在[第15章](c707cf13-3616-4788-8f39-687bd1cb7c7b.xhtml)的用例中定义的DevOps项目，即“使用单元测试用例和TDD测试你的代码”。Azure
    DevOps还可以自动创建一个新的Web应用程序，但为了避免配置错误（这可能会消耗掉你所有的免费额度），我们将手动创建它，并让Azure DevOps仅部署应用程序。所有必需的步骤都组织成以下各个子节。
- en: Creating the Azure Web App and the Azure database
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Azure Web应用程序和Azure数据库
- en: 'An Azure Web App can be defined by following the simple steps that follow:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过以下简单步骤定义 Azure Web App：
- en: 'Go to the Azure portal and select App Services, and then click the Add button
    to create a new Web App. Fill in all data as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Azure 门户，选择 App Services，然后点击“添加”按钮创建一个新的 Web App。按照以下方式填写所有数据：
- en: '![](img/77c50b71-036b-4bab-9652-79586dbe7438.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/77c50b71-036b-4bab-9652-79586dbe7438.png)'
- en: Clearly, you may use a Resource Group you already have, and the most convenient
    region for you. For Runtime stack, please select the same .NET Core version you
    used in the Visual Studio solution.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显然，你可以使用你已有的资源组，以及对你来说最方便的区域。对于运行时堆栈，请选择你在 Visual Studio 解决方案中使用的相同的 .NET Core
    版本。
- en: Now, if you have enough credit, let's create a SQL Server database for the application,
    and let's call it `PackagesManagementDatabase`. If you don't have enough credit,
    don't worry—you can still test application deployment, but the application will
    return an error when it tries to access the database. Please refer to the *Relational
    databases* subsection of [Chapter 7](77cdecb5-cef4-4b02-80a1-052ad366b9f3.xhtml), *How
    to Choose Your Data Storage in the Cloud*, for how to create a SQL Server database.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果你有足够的信用额度，让我们为应用程序创建一个 SQL Server 数据库，并将其命名为 `PackagesManagementDatabase`。如果你没有足够的信用额度，不用担心——你仍然可以测试应用程序部署，但应用程序在尝试访问数据库时会返回错误。请参考第
    7 章 [7.7](77cdecb5-cef4-4b02-80a1-052ad366b9f3.xhtml) 的 *关系数据库* 子节，*如何在云中选择你的数据存储*，了解如何创建
    SQL Server 数据库。
- en: Configuring your Visual Studio solution
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置你的 Visual Studio 解决方案
- en: 'Once you''ve defined the Azure Web App, you need to configure the application
    for running in Azure by following these simple steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你定义了 Azure Web App，你需要按照以下简单步骤配置应用程序以在 Azure 中运行：
- en: If you defined an Azure database, you need two different connection strings
    in your Visual Studio solution, one of the local databases for development and
    one of the Azure database for the web app.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你定义了 Azure 数据库，你需要在 Visual Studio 解决方案中使用两个不同的连接字符串，一个用于本地数据库的开发，另一个用于 Web
    应用的 Azure 数据库。
- en: 'Now, open both `appsettings.Development.json` and `appsettings.json` in your
    Visual Studio solution, as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 Visual Studio 解决方案中打开 `appsettings.Development.json` 和 `appsettings.json`，如下所示：
- en: '![](img/093806cf-72b4-4ed2-974c-b0d131f3aa94.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/093806cf-72b4-4ed2-974c-b0d131f3aa94.png)'
- en: 'Then, copy the whole `ConnectionStrings` node of `appsettings.json` into `appsettings.Development.json`, 
    as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 `appsettings.json` 中的整个 `ConnectionStrings` 节复制到 `appsettings.Development.json`
    中，如下所示：
- en: '[PRE0]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now you have the local connection string in the development settings, so you
    can change `DefaultConnection` in `appsettings.json` with one of the Azure databases.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了开发设置中的本地连接字符串，因此你可以将 `appsettings.json` 中的 `DefaultConnection` 改为 Azure
    数据库中的一个。
- en: Go to the database in the Azure portal, copy the connection string, and fill
    it with the username and password you got when you defined the database server.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 Azure 门户中的数据库，复制连接字符串，并用你在定义数据库服务器时获得的用户名和密码填充它。
- en: Finally, commit your changes locally and then synchronize with the remote repository.
    Now, your changes are on DevOps Pipelines, which is already processing them to
    get a new build.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在本地提交你的更改，然后与远程仓库同步。现在，你的更改已经在 DevOps 管道中，它正在处理这些更改以获取新的构建。
- en: Configuring Azure Pipelines
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Azure 管道
- en: 'Finally, you can configure an Azure Pipeline for the automatic delivery of
    your application on Azure by following these steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你可以按照以下步骤配置 Azure 管道，以自动将你的应用程序部署到 Azure：
- en: Connect Visual Studio with your DevOps project by clicking the Manage Connections link
    in the Connection tab of the Visual Studio Team Server window. Then, click the
    DevOps link to go to your online project.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 Visual Studio Team Server 窗口的“连接”选项卡中的“管理连接”链接，将 Visual Studio 与你的 DevOps
    项目连接起来。然后，点击 DevOps 链接进入你的在线项目。
- en: Modify the `PackagesManagementWitTests` build pipeline by adding a further step
    after the unit test step. In fact, we need a step that prepares all files to be
    deployed in a ZIP file.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在单元测试步骤之后添加一个额外的步骤来修改 `PackagesManagementWitTests` 构建管道。实际上，我们需要一个步骤来准备所有要部署的文件，并将它们打包成一个
    ZIP 文件。
- en: 'Click the Edit button of the `PackagesManagementWitTests` pipeline, and then
    go to the end of the file and write the following:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `PackagesManagementWitTests` 管道的“编辑”按钮，然后前往文件末尾并写下以下内容：
- en: '[PRE1]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'When the Settings link appears above the new task, click it to configure the
    new task:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当新任务上方出现“设置”链接时，点击它以配置新任务：
- en: '![](img/d18768bf-5ff7-4c30-af29-7099052337b2.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/d18768bf-5ff7-4c30-af29-7099052337b2.png)'
- en: Accept the default Path to publish since it is already synchronized with the
    path of the task that will deploy the application, and just insert the artifact
    name, and then select Azure Pipeline as the location. As soon as you save, the
    pipeline will start, and the newly added task should succeed.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接受默认的发布路径，因为它已经与将要部署应用程序的任务路径同步，只需插入工件名称，然后选择“Azure Pipeline”作为位置。一旦保存，管道将开始，新添加的任务应该会成功。
- en: Deployments and other release artifacts are added to different pipelines called
    Release Pipelines, to decouple them from build related artifacts. With Release
    Pipelines, you cannot edit a `.yaml` file, but you will work with a graphic interface.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署和其他发布工件被添加到不同的管道中，称为发布管道，以将它们与构建相关工件解耦。使用发布管道，您无法编辑`.yaml`文件，但您将使用图形界面进行操作。
- en: Click the Releases left menu tab to create a new Release Pipeline. As soon as
    you click add a new pipeline, you will be prompted to add the first task of the
    first pipeline stage. In fact, the whole release pipeline is composed of different
    stages, each grouping sequences of tasks. While each stage is just a sequence
    of tasks, the stages diagram can branch and we can add several branches after
    each stage. This way, we can deploy to different platforms that each require different
    tasks. In our simple example, we will use a single stage.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“发布”左侧菜单标签以创建新的发布管道。一旦您点击添加新管道，系统将提示您添加第一个管道阶段的第一项任务。实际上，整个发布管道由不同的阶段组成，每个阶段都包含一系列任务。虽然每个阶段只是一系列任务，但阶段图可以分支，我们可以在每个阶段之后添加几个分支。这样，我们可以部署到不同的平台，每个平台都需要不同的任务。在我们的简单示例中，我们将使用单个阶段。
- en: 'Select the Deploy Azure App Service task. As soon as you add this task, you
    will be prompted to fill in missing information:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“部署 Azure 应用服务”任务。一旦添加此任务，系统将提示您填写缺失信息：
- en: '![](img/8ed18539-0b6e-4d06-831e-aa16c837b8f6.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8ed18539-0b6e-4d06-831e-aa16c837b8f6.png)'
- en: 'Click the error link and fill in the missing parameters:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击错误链接并填写缺失的参数：
- en: '![](img/0ce57687-4bd6-4e9c-b11b-deaf1c0ca177.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0ce57687-4bd6-4e9c-b11b-deaf1c0ca177.png)'
- en: Select your subscription, and then, if an authorization button appears, please
    click it to authorize Azure Pipelines to access your subscription. Then, select
    Windows as the deployment platform, and finally, select the App Service you created
    from the App service name drop-down list. Task settings are automatically saved
    while you write them, so you need just to click the Save button for the whole
    pipeline.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的订阅，然后，如果出现授权按钮，请点击它以授权 Azure Pipelines 访问您的订阅。然后，选择“Windows”作为部署平台，最后，从“应用服务名称”下拉列表中选择您创建的应用服务。任务设置在您编写时自动保存，因此您只需点击“保存”按钮即可保存整个管道。
- en: 'Now, we need to connect this pipeline to a source artifact. Click the Add Artifact button
    and then select Build as the source type, because we need to connect the new release
    pipeline with the ZIP file created by our build pipeline. A settings window appears:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将此管道连接到源工件。点击“添加工件”按钮，然后选择“构建”作为源类型，因为我们需要将新的发布管道与构建管道创建的 ZIP 文件连接。一个设置窗口将出现：
- en: '![](img/d56d9886-b242-4819-9247-cb86d7ba59e0.png):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/d56d9886-b242-4819-9247-cb86d7ba59e0.png):'
- en: Select our previous build pipeline from the drop-down list, and keep Latest as
    the version. Finally, accept the suggested name in Source alias.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中选择我们之前的构建管道，并保持“最新”作为版本。最后，接受在“源别名”中建议的名称。
- en: 'Our release pipeline is ready and can be used as it is. The image of the source
    artifact you just added contains a trigger icon in its top-right corner, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的发布管道已准备就绪，可以直接使用。您刚刚添加的源工件图像在其右上角包含一个触发图标，如下所示：
- en: '![](img/545778d2-3408-4a06-8ae9-00ffbe915f1e.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/545778d2-3408-4a06-8ae9-00ffbe915f1e.png)'
- en: 'If you click on the trigger icon, you are given the option to automatically
    trigger the release pipeline as soon as a new build is available:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击触发图标，您可以选择在新构建可用时自动触发发布管道：
- en: '![](img/75c52940-6e05-41d2-8f18-b10d7a0cc45f.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/75c52940-6e05-41d2-8f18-b10d7a0cc45f.png)'
- en: Keep it disabled; we can enable it after we have completed and manually tested the
    release pipeline. In preparation for an automatic trigger, we need to add a human
    approval task before the application is deployed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 保持其禁用状态；我们可以在完成并手动测试发布管道后启用它。为了准备自动触发，我们需要在应用程序部署之前添加一个人工批准任务。
- en: Adding a manual approval for the release
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加发布的人工批准
- en: 'Since tasks are usually executed by software agents, we need to embed human
    approval in a manual job. Let''s add it with the following steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于任务通常由软件代理执行，我们需要在手动工作中嵌入人工批准。让我们按照以下步骤添加：
- en: 'Click the three dots on the right of the Stage 1 header:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击阶段1标题右侧的三个点：
- en: '![](img/97463b10-1754-4141-a811-9aac460bc4ac.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/97463b10-1754-4141-a811-9aac460bc4ac.png)'
- en: 'Then, select Add an agentless job. Once the agentless job has been added, click
    its add button and add a Manual intervention task. The following screenshot shows
    the Manual intervention settings:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，选择添加一个无代理作业。一旦添加了无代理作业，点击其添加按钮并添加一个“人工干预”任务。以下截图显示了“人工干预”设置：
- en: '![](img/79d2f557-6ec8-4678-84d4-24d7c85c41e2.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/79d2f557-6ec8-4678-84d4-24d7c85c41e2.png)'
- en: Add instructions for the operator and select your account in the Notify users field.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“通知用户”字段中添加操作员的说明并选择你的账户。
- en: 'Now, drag the whole Agentless job with the mouse, to place it before the application
    deployment task. The final screenshot should be as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，用鼠标拖动整个“无代理作业”，将其放置在应用程序部署任务之前。最终的截图应该是这样的：
- en: '![](img/8d9096ac-64a7-46f4-9b9f-492b3051e83a.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8d9096ac-64a7-46f4-9b9f-492b3051e83a.png)'
- en: Finished! Click the save button in the top-left to save the pipeline.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成！点击左上角的保存按钮保存管道。
- en: Now, everything is ready to create our first automatic release.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，一切准备就绪，我们可以创建我们的第一个自动发布。
- en: Creating a release
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建发布
- en: 'Once you have everything in place, a new release can be prepared and deployed
    as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦一切准备就绪，可以按照以下步骤准备和部署新版本：
- en: 'Let''s click the Create release button to start the creation of a new release:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们点击“创建发布”按钮开始创建新版本：
- en: '![](img/21a6cf8f-2a74-4143-8cc9-dd86229788f5.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/21a6cf8f-2a74-4143-8cc9-dd86229788f5.png)'
- en: 'Verify that the Source alias is the last available, add a release description,
    and then click Create. In a short time, you should receive an email for the release
    approval. Click the link it contains, and go to the approval page:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认“源别名”是最后一个可用的，添加发布描述，然后点击创建。在短时间内，你应该会收到发布批准的电子邮件。点击其中的链接，进入批准页面：
- en: '![](img/6db8064f-c8ed-4c53-8ccd-bf56055ae639.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6db8064f-c8ed-4c53-8ccd-bf56055ae639.png)'
- en: 'Click the Resume / Reject button and then approve the release. Wait for the
    deployment to complete. You should have all of the tasks successfully completed,
    as shown in the following screenshot:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“恢复/拒绝”按钮然后批准发布。等待部署完成。你应该看到所有任务都成功完成，如下面的截图所示：
- en: '![](img/70a11166-c5b1-4c65-a402-700d04f035b8.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/70a11166-c5b1-4c65-a402-700d04f035b8.png)'
- en: You have run your first successful release pipeline!
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经运行了第一个成功的发布管道！
- en: In a real-life project, the release pipeline would contain some more tasks.
    In fact, applications (before being deployed in the actual production environment)
    are deployed in a staging environment where they are beta-tested. Hence, probably,
    after this first deployment, there would be some manual tests, manual authorization
    for the deployment in production, and the final deployment in production.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际项目生活中，发布管道将包含更多任务。事实上，应用程序（在部署到实际生产环境之前）是在预发布环境中部署的，在那里它们进行beta测试。因此，在这次首次部署之后，可能会有一些手动测试，手动授权在生产中的部署，以及最终的在生产环境中的部署。
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We described *service design thinking* principles and the SaaS software deployment
    model. Now, you should be able to analyze all of the implications of these approaches
    for an organization, and you should be able to adapt pre-existing software development
    processes and hardware/software architectures to take advantage of the opportunities
    they offer.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述了*服务设计思维*原则和SaaS软件部署模型。现在，你应该能够分析这些方法对一个组织的影响，并且应该能够调整现有的软件开发流程和软硬件架构，以利用它们提供的机会。
- en: We also explained the need for, and the techniques involved in, the automatization
    of the software cycle, cloud hardware infrastructure configuration, and application
    deployment.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还解释了软件周期自动化、云硬件基础设施配置和应用程序部署的必要性和涉及的技术。
- en: Once you have implemented the example in the last use case section, you should
    be able to use Azure Pipelines to automate infrastructure configuration and application
    deployment.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你在最后的使用案例部分实现了示例，你应该能够使用Azure Pipelines来自动化基础设施配置和应用程序部署。
- en: The next chapter gives more insights into DevOps, which, together with CI/CD,
    which is discussed in detail in [Chapter 19](db7586ff-b06d-4503-a64a-9a6678d09acb.xhtml),
    *Challenges of Applying CI Scenarios in DevOps*, plays a fundamental role in service
    scenarios and, in particular, the maintenance of SaaS applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将更深入地探讨 DevOps，它与详细讨论在[第 19 章](db7586ff-b06d-4503-a64a-9a6678d09acb.xhtml)中的
    CI/CD，即*在 DevOps 中应用 CI 场景的挑战*，在服务场景中起着基本的作用，尤其是在 SaaS 应用程序的维护方面。
- en: Questions
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the main goal of service design thinking?
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务设计思维的主要目标是什么？
- en: Is it true that service design thinking requires the optimal usage of all competencies
    already available in the company?
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务设计思维是否真的需要充分利用公司现有的所有能力？
- en: Why is a complete automatization fundamental in the life cycle of SaaS applications?
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在 SaaS 应用程序的生命周期中，完全自动化是基本的？
- en: Is it possible to define hardware cloud infrastructures with a platform-independent
    language?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以使用平台无关的语言定义硬件云基础设施？
- en: What is the preferred Azure tool for the automatization of the whole application
    lifecycle?
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在整个应用程序生命周期自动化中，Azure 优先使用的工具是什么？
- en: If two SaaS suppliers offer the same software product, should you prefer the
    most reliable or the cheapest one?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果两个 SaaS 供应商提供相同的软件产品，你应该选择最可靠的还是最便宜的？
- en: Is scalability the only important requirement in a service scenario?
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可扩展性是否是服务场景中唯一重要的要求？
- en: Further reading
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: The main references in this chapter are references to other chapters/sections
    of this book and have already been given throughout this chapter. Here, we give
    just the link to the Azure Pipelines documentation: [https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops),
    and to the two infrastructure description languages cited in this chapter, Terraform
    ([https://www.terraform.io/](https://www.terraform.io/)) and Ansible ([https://www.ansible.com/](https://www.ansible.com/)).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要参考文献是本书其他章节/部分的引用，并在本章中已给出。在此，我们仅提供 Azure Pipelines 文档的链接：[https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/pipelines/?view=azure-devops)，以及本章中提到的两种基础设施描述语言，Terraform
    ([https://www.terraform.io/](https://www.terraform.io/)) 和 Ansible ([https://www.ansible.com/](https://www.ansible.com/))。
