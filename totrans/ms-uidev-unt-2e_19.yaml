- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Particles in the UI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI中的粒子
- en: Particle effects are a fun and attractive way to add “juice” to your game. The
    Particle system within the Unity Engine provides you with the tools needed to
    make all sorts of interesting effects like sparkles, smoke, fire, and so on. This
    chapter will discuss how you can use particle effects within your UI.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 粒子效果是给游戏增添“活力”的一种有趣且吸引人的方式。Unity引擎中的粒子系统为你提供了制作各种有趣效果（如火花、烟雾、火焰等）所需的工具。本章将讨论如何在UI中使用粒子效果。
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Methods for displaying particle effects in your UI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在UI中显示粒子效果的方法
- en: Adding flying stars to our loot box animation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将飞星添加到我们的宝箱动画中
- en: This book is about UI, not particle effects. Due to the complex nature of particle
    effects, I will not be covering all the settings involved and the various intricacies
    of using particle effects. I will walk you through the steps to create a single
    particle effect but will not dive further into the process of creating particle
    effects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于UI，而不是粒子效果。由于粒子效果的复杂性质，我不会涵盖所有涉及的设置以及使用粒子效果的种种复杂性。我将指导你完成创建单个粒子效果的步骤，但不会进一步深入到创建粒子效果的过程。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'You can find the relevant codes and asset files of this chapter here: [https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2015](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2015)'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里找到本章的相关代码和资产文件：[https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2015](https://github.com/PacktPublishing/Mastering-UI-Development-with-Unity-2nd-Edition/tree/main/Chapter%2015)
- en: Particles in the UI
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UI中的粒子
- en: Using particles in UI is a hot topic. It seems like nearly every mobile game
    with loot boxes uses particles, but there is no standardized way to implement
    them. The problem with trying to use particles in the UI is that particles render
    behind UI on Canvases that have their **Render Mode** set to **Screen Space -**
    **Overlay**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在UI中使用粒子是一个热门话题。似乎几乎每个带有宝箱的移动游戏都使用粒子，但没有标准化的实现方式。尝试在UI中使用粒子的问题在于，在将**渲染模式**设置为**屏幕空间
    - 覆盖**的Canvas上，粒子会渲染在UI后面。
- en: '![Figure 15.1: Particles rendering behind a Canvas](img/Figure_15.1_B18327.jpg)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图15.1：Canvas背后的粒子渲染](img/Figure_15.1_B18327.jpg)'
- en: 'Figure 15.1: Particles rendering behind a Canvas'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：Canvas背后的粒子渲染
- en: The preceding screenshot shows two UI Canvases from our working examples and
    a particle system (the white dots). The pink background is on the `Background
    Canvas`, which renders with `HUD Canvas`, which renders with `HUD Canvas`. However,
    I want the particles to be displayed also in front of the `HUD Canvas`.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示了我们的工作示例中的两个UI Canvas和一个粒子系统（白色圆点）。粉红色的背景在`Background Canvas`上，它使用`HUD
    Canvas`渲染，而`HUD Canvas`也使用`HUD Canvas`渲染。然而，我想让粒子也显示在`HUD Canvas`的前面。
- en: 'There are a few solutions to this problem. My two preferred solutions are either
    of the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题有几个解决方案。我最喜欢的两种解决方案如下：
- en: Change the `HUD Canvas` to **Screen Space - Camera** and adjust the sorting
    order of it and the particles to make the particles appear in front
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`HUD Canvas`更改为**屏幕空间 - 摄像机**，并调整其和粒子的排序顺序，使粒子显示在前面
- en: Use a second Camera and a Render Texture to display the particles on a Raw Image
    in the Canvas
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用第二个摄像机和一个渲染纹理，在Canvas中的原始图像上显示粒子
- en: There are benefits and downfalls to both methods. The first method is by far
    the easiest. It allows you to view particles in front of your UI with only one
    or two modifications to your scene. However, using **Screen Space - Camera** for
    your UI’s **Render Mode** may not be practical for your project. If you edit the
    properties of the Camera in your game, the properties of the UI will be changed.
    Additionally, changing the **Render Mode** of your Canvas after you have already
    set everything up can cause your UI to stop displaying the way you initially intended.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法都有利弊。第一种方法无疑是 easiest。它允许你通过仅对场景进行一到两次修改，就能在UI前查看粒子。然而，对于UI的**渲染模式**使用**屏幕空间
    - 摄像机**可能对你的项目来说并不实用。如果你编辑游戏中摄像机的属性，UI的属性也会改变。此外，在设置完成后更改Canvas的**渲染模式**可能会导致UI无法按照你最初期望的方式显示。
- en: The second method isn’t terribly complicated to implement but does require more
    work than the first. Its main benefit is that you can render particles in front
    of UI on Canvases that render with **Screen Space - Overlay**. Its main downfall,
    other than needing more work to set up, is that you may have to make some complicated
    decisions about what your two cameras are going to render, and may slightly affect
    performance. An example covering this method is discussed in the *Examples* section
    of this chapter.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法实现起来并不复杂，但需要比第一种方法更多的工作。它的主要好处是可以在使用 **Screen Space - Overlay** 渲染的 Canvas
    上渲染粒子。它主要的缺点，除了需要更多的工作来设置之外，可能还需要做出一些关于两个相机将要渲染什么的复杂决定，可能会稍微影响性能。本章的 *示例* 部分讨论了这种方法的一个示例。
- en: There are other solutions to this problem, each more complicated (or costly)
    than the next, and what you choose to do depends on your project. Some projects
    forego particles entirely and pre-render their particles as sprite sheets using
    software, such as After Effects. Some projects use assets available in the Asset
    Store, and others handle everything entirely with scripts and shaders. Although
    I can’t foresee any reason why the second solution I proposed will not work for
    your project, it’s certainly possible that your project has a fringe case I am
    not considering. Hopefully, if that is the case, you will be able to modify my
    solution with minimal effort to work on your project.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个问题，有其他解决方案，每个都比下一个更复杂（或成本更高），而你选择做什么取决于你的项目。有些项目完全放弃了粒子，并使用像 After Effects
    这样的软件将粒子预渲染为精灵图集。有些项目使用 Asset Store 中的资源，而有些项目则完全使用脚本和着色器来处理一切。虽然我无法预见任何理由说明我提出的第二种解决方案不会适用于你的项目，但你的项目可能有一个我未考虑的边缘情况。希望在这种情况下，你将能够以最小的努力修改我的解决方案，使其适用于你的项目。
- en: My best advice to you would be to decide early whether you will use particles
    in your UI. If you know you are going to use them, plan ahead with your UI layouts
    and camera setups. Also, if you want to use the first method, do it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你的最好建议是尽早决定你是否会在你的 UI 中使用粒子。如果你知道你将要使用它们，提前规划你的 UI 布局和相机设置。此外，如果你想使用第一种方法，那就去做吧。
- en: It’s really too bad that there is no standard method for this implemented by
    Unity. I assume that one day there will be a pre-built UI Particle object that
    will make the process both simple and performant.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 真的是太糟糕了，Unity 没有实现一个标准的处理方法。我猜想总有一天会有一个预先构建的 UI 粒子对象，这将使整个过程既简单又高效。
- en: Examples
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例
- en: For the examples in this chapter, we will add to the animations created in [*Chapter
    14*](B18327_14.xhtml#_idTextAnchor409) to add a particle effect that occurs when
    the loot box opens.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的示例，我们将向第 14 章[*第 14 章*](B18327_14.xhtml#_idTextAnchor409)中创建的动画添加一个粒子效果，该效果在宝箱打开时发生。
- en: Creating a Particle System that displays in the UI
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建在 UI 中显示的粒子系统
- en: Let’s create a particle system that will pop when the chest opens up. As stated
    earlier in this chapter, my two preferred ways of displaying particles in front
    of UI are to either use **Screen Space - Camera** as the Canvas **Render Mode**
    or to use a Render Texture. Since the second option is more complicated, it merits
    an example. You’ll notice that our Canvases all have their **Render Modes** set
    to **Screen Space - Overlay,** so using a **Render Texture** is the best method
    for the way the project is currently set up.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个粒子系统，当箱子打开时会弹出。正如本章前面所述，我在 UI 前显示粒子的两种首选方式是使用 **Screen Space - Camera**
    作为 Canvas 的 **渲染模式** 或使用渲染纹理。由于第二种选项更复杂，因此值得举例说明。你会注意到我们的所有 Canvas 都将它们的 **渲染模式**
    设置为 **Screen Space - Overlay**，因此对于当前项目设置，使用 **渲染纹理** 是最佳方法。
- en: We will create a particle system that is rendered to a texture via a second
    camera and then have that texture displayed on a **Raw Image** within the UI.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个粒子系统，通过第二个相机渲染到纹理上，然后在该 UI 中的 **Raw Image** 上显示这个纹理。
- en: 'To create a particle system, complete the following steps. We will work on
    displaying it in the UI in the next section:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个粒子系统，请完成以下步骤。我们将在下一节中讨论如何在 UI 中显示它：
- en: The first thing we will need to do is create a material that will be used for
    the particle. Create a new folder in the `Assets` folder named `Textures` `and
    Materials`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要做的是创建一个用于粒子的材质。在 `Assets` 文件夹中创建一个名为 `Textures` 和 `Materials` 的新文件夹。
- en: Right-click within the new folder and select `StarsMaterial`.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新文件夹内右键单击并选择 `StarsMaterial`。
- en: Set the `StarsMaterial` **Shader** to **Unlit/Transparent**.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `StarsMaterial` 的 **着色器** 设置为 **Unlit/Transparent**。
- en: Drag the `starIcon` sprite into its texture slot.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`starIcon`精灵拖动到其纹理槽中。
- en: To display the particles in front of the UI objects, we will need a second Camera.
    Duplicate the `Main Camera` using *Ctrl* + *D* and rename the duplicate `UI` `Particles
    Camera`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在UI对象前面显示粒子，我们需要第二个相机。使用*Ctrl* + *D*复制`Main Camera`并将其重命名为`UI` `Particles Camera`。
- en: You can only have one Audio Listener in the scene, so delete the **Audio Listener**
    component on the new camera.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 场景中只能有一个音频监听器，所以请删除新相机上的**音频监听器**组件。
- en: Remove the **Animator** and **Chest Anim** **Controls** components.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除**动画器**和**胸动画** **控制**组件。
- en: You also won’t want any code later to think this might possibly be the `Main
    Camera`, so change the tag from `MainCamera` to `Untagged`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你也不希望后续的任何代码认为这可能是`Main Camera`，所以将标签从`MainCamera`更改为`Untagged`。
- en: This camera will be used only to display the particle pop we’re going to make,
    so we might as well make the particle system a child of this camera by right-clicking
    on the `UI Particles Camera` and selecting **Effects** | **Particle System**.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个相机将仅用于显示我们将要制作的粒子弹出效果，所以我们可以通过右键点击`UI Particles Camera`并选择**效果** | **粒子系统**来将粒子系统设置为这个相机的子对象。
- en: '![Figure 15.2: Creating a Particle System as a child of UI Particles Camera](img/Figure_15.2_B18327.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2：将粒子系统作为UI Particles Camera的子对象创建](img/Figure_15.2_B18327.jpg)'
- en: 'Figure 15.2: Creating a Particle System as a child of UI Particles Camera'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2：将粒子系统作为UI Particles Camera的子对象创建
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Since this book isn’t about Particle Systems but about UI, we will not spend
    time going over every property of Particle Systems. Luckily, most are somewhat
    self-explanatory, and fiddling with the various properties lets you see what they
    can do. Therefore, rather than going through each property of the Particle System,
    I will simply provide screenshots of the necessary properties.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这本书不是关于粒子系统而是关于UI，我们不会花时间详细讲解粒子系统的每个属性。幸运的是，大多数属性都有一定的自解释性，调整各种属性可以让你看到它们能做什么。因此，而不是逐个讲解粒子系统的每个属性，我将只提供必要的属性截图。
- en: Scroll down to the bottom of the **Particle System** component and expand the
    **Renderer** property by clicking on it.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到**粒子系统**组件的底部并点击以展开**渲染器**属性。
- en: Assign the `StarsMaterial` material to the **Material** property. This will
    now make stars appear in your particle effect.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`StarsMaterial`材质分配给**材质**属性。这样现在你的粒子效果中就会出现星星了。
- en: '![Figure 15.3: Adding StarsMaterial material to the Renderer Material property](img/Figure_15.3_B18327.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3：将StarsMaterial材质添加到渲染器材质属性](img/Figure_15.3_B18327.jpg)'
- en: 'Figure 15.3: Adding StarsMaterial material to the Renderer Material property'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3：将StarsMaterial材质添加到渲染器材质属性
- en: Change the Transform `-90`. The particles should now shoot upward.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变换`-90`进行修改。现在粒子应该向上发射。
- en: '![Figure 15.4: Changing the Transform Rotation](img/Figure_15.4_B18327.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4：更改变换旋转](img/Figure_15.4_B18327.jpg)'
- en: 'Figure 15.4: Changing the Transform Rotation'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：更改变换旋转
- en: Change the `10`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`10`。
- en: 'Change the **Duration**, **Start Lifetime**, and **Start Speed** properties
    of the Particle System as follows:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式更改粒子系统的**持续时间**、**起始寿命**和**起始速度**属性：
- en: '![Figure 15.5: Updating some of the Particle System settings](img/Figure_15.5_B18327.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5：更新一些粒子系统设置](img/Figure_15.5_B18327.jpg)'
- en: 'Figure 15.5: Updating some of the Particle System settings'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5：更新一些粒子系统设置
- en: Select the dropdown on `0` and `0.5`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`0`和`0.5`上选择下拉菜单。
- en: Select the dropdown on `-45` and `45`.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`-45`和`45`上选择下拉菜单。
- en: '![Figure 15.6: Updating Start Size and Start Rotation](img/Figure_15.6_B18327.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6：更新起始大小和起始旋转](img/Figure_15.6_B18327.jpg)'
- en: 'Figure 15.6: Updating Start Size and Start Rotation'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6：更新起始大小和起始旋转
- en: Change `1` and `0.5`.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`1`和`0.5`进行修改。
- en: '![Figure 15.7: Updating the settings of the particle system](img/Figure_15.7_B18327.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7：更新粒子系统的设置](img/Figure_15.7_B18327.jpg)'
- en: 'Figure 15.7: Updating the settings of the particle system'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：更新粒子系统的设置
- en: Expand the **Emission** property and add a **Burst** with the plus sign.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**发射**属性并使用加号添加一个**爆发**。
- en: '![Figure 15.8: Adding a burst](img/Figure_15.8_B18327.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图15.8：添加爆发](img/Figure_15.8_B18327.jpg)'
- en: 'Figure 15.8: Adding a burst'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：添加爆发
- en: Expand the **Shape** property and select the **Hemisphere** from the **Shape**
    dropdown.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**形状**属性并从**形状**下拉菜单中选择**半球**。
- en: '![Figure 15.9: Changing the shape](img/Figure_15.9_B18327.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9：更改形状](img/Figure_15.9_B18327.jpg)'
- en: 'Figure 15.9: Changing the shape'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9：更改形状
- en: Select the **Size over** **Lifetime** property.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Size over** **Lifetime** 属性。
- en: '![Figure 15.10: The Size over Lifetime property](img/Figure_15.10_B18327.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.10：生命周期内大小属性](img/Figure_15.10_B18327.jpg)'
- en: 'Figure 15.10: The Size over Lifetime property'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.10：生命周期内大小属性
- en: 'Select the **Rotation by** **Speed** property.![Figure 15.11: The Rotation
    by Speed property](img/Figure_15.11_B18327.jpg)'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Rotation by** **Speed** 属性。![图 15.11：通过速度旋转属性](img/Figure_15.11_B18327.jpg)
- en: 'Figure 15.11: The Rotation by Speed property'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.11：通过速度旋转属性
- en: And now, we’re done with the properties of the Particle System. Eventually,
    we will select **Looping** and **Play on Awake**, but for now, we will leave them
    deselected so that we can see the particle system constantly playing when the
    game is playing.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，我们已经完成了粒子系统的属性设置。最终，我们将选择 **Looping** 和 **Play on Awake**，但到目前为止，我们将保留它们未选中，以便在游戏播放时可以持续看到粒子系统在播放。
- en: We want to make sure that `UI Particles Camera` displays only `Particle System`
    and `Main Camera` displays everything but `Particle System`. We will accomplish
    this with **Layers**.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们要确保 `UI Particles Camera` 只显示 `Particle System`，而 `Main Camera` 显示除 `Particle
    System` 之外的一切。我们将通过 **Layers** 来实现这一点。
- en: Select the **Layers** dropdown menu and select **Add Layer…**.
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 选择 **Layers** 下拉菜单并选择 **Add Layer…**。
- en: Add a new `UI Particles`.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的 `UI Particles`。
- en: Assign `UI Particles` to the `Particle System`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UI Particles` 分配给 `Particle System`。
- en: Now, we need to specify to each of the cameras what they will be displaying
    using their `UI Particles Camera` to only display `Main Camera` to exclude **UI
    Particles**.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要指定每个相机将使用其 `UI Particles Camera` 显示什么，仅显示 `Main Camera` 以排除 **UI Particles**。
- en: Now, let’s have `UI Particles Camera` render to a texture. Within the `Textures
    and Materials` folder, right-click and select `StarPopRenderTexture`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们让 `UI Particles Camera` 渲染到一个纹理。在 `Textures and Materials` 文件夹中，右键单击并选择
    `StarPopRenderTexture`。
- en: Change its `512` `x 512`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其更改为 `512` `x 512`。
- en: Assign the `StarPopRenderTexture` texture to the `UI Particles Camera`’s **Camera**
    component.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `StarPopRenderTexture` 纹理分配给 `UI Particles Camera` 的 **Camera** 组件。
- en: '![Figure 15.12: Assigning the Target Texture](img/Figure_15.12_B18327.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.12：分配目标纹理](img/Figure_15.12_B18327.jpg)'
- en: 'Figure 15.12: Assigning the Target Texture'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.12：分配目标纹理
- en: The only thing left to do is have the render texture display in the UI.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 剩下的唯一任务是让渲染纹理在 UI 中显示。
- en: Create a new UI Canvas with `Particle Canvas`.
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `Particle Canvas` 创建一个新的 UI 画布。
- en: With `Particle Canvas` selected, select `Particle Renderer`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `Particle Canvas` 后，选择 `Particle Renderer`。
- en: Change the `Particle Renderer` to `512` and `512`, respectively, to match the
    properties of `StarPopRenderTexture`.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Particle Renderer` 的宽度和高度分别更改为 `512` 和 `512`，以匹配 `StarPopRenderTexture` 的属性。
- en: Assign `StarPopRenderTexture` to the `Particle Renderer`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `StarPopRenderTexture` 分配给 `Particle Renderer`。
- en: '![Figure 15.13: The Render Texture assigned to the Texture property](img/Figure_15.13_B18327.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.13：分配给纹理属性的渲染纹理](img/Figure_15.13_B18327.jpg)'
- en: 'Figure 15.13: The Render Texture assigned to the Texture property'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.13：分配给纹理属性的渲染纹理
- en: We don’t want this image to block our mouse clicks, so deselect **Raycast Target**
    from the **Raw** **Image** component.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们不希望这张图片阻挡我们的鼠标点击，因此从 **Raw** **Image** 组件中取消选择 **Raycast Target**。
- en: Now, we just need to make sure that `Particle Canvas` displays in front of the
    other two Canvases. Set the `2` on `Particle Canvas`’s **Canvas** component.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需确保 `Particle Canvas` 在其他两个画布之前显示。将 `Particle Canvas` 的 `Canvas` 组件设置为
    `2`。
- en: Play the game now, and you should now see the particles displaying the scene.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在玩游戏，你应该现在看到粒子显示场景。
- en: We set the Particle System to be constantly playing, so deselect **Looping**
    and **Play on Awake** to reset the values to what they should be.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将粒子系统设置为持续播放，因此取消选择 **Looping** 和 **Play on Awake** 以重置值到应有的状态。
- en: That’s it for setting up a particle system that displays in a UI.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是设置在 UI 中显示的粒子系统的全部内容。
- en: Timing the Particle System to play in our loot box animation
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调整粒子系统以在宝箱动画中播放
- en: 'Now that the particle system is set to display in front of the UI, we can set
    up the logic to have the animation trigger in the correct order. To do that, go
    through the following steps:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在粒子系统已设置为在 UI 前显示，我们可以设置逻辑以正确顺序触发动画。为此，执行以下步骤：
- en: We want the particle system to play when the chest opens, so we have to write
    some code to control its behavior. Create a new script called `PlayParticles`
    in the `Assets/Scripts` folder.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们希望粒子系统在箱子打开时播放，因此我们必须编写一些代码来控制其行为。在 `Assets/Scripts` 文件夹中创建一个名为 `PlayParticles`
    的新脚本。
- en: 'Edit the `PlayParticles` class to have the following code:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `PlayParticles` 类以包含以下代码：
- en: '[PRE0]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All this code does is check whether the particle system is currently playing
    with the `PlayTheParticles()` function. If it is not playing, it plays when the
    function runs.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有这些代码所做的只是检查粒子系统是否正在通过 `PlayTheParticles()` 函数播放。如果没有播放，当函数运行时就会播放。
- en: We’ll have this function triggered via an Animation Event on the `Chest`. So,
    add the script to the `Chest` as a component.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过在 `Chest` 上的动画事件触发此函数。因此，将脚本添加到 `Chest` 作为组件。
- en: Assign `Particle System` from the **Hierarchy** to the **Stars** slot.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **层次结构** 中的 `Particle System` 分配到 **星星** 插槽。
- en: Add the `PlayTheParticles` function as an Animation Event on the very first
    frame of the `ChestOpening` animation.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ChestOpening` 动画的第一个帧上添加 `PlayTheParticles` 函数作为动画事件。
- en: '![Figure 15.14: The particle Animation Event](img/Figure_15.14_B18327.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.14：粒子动画事件](img/Figure_15.14_B18327.jpg)'
- en: 'Figure 15.14: The particle Animation Event'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14：粒子动画事件
- en: Playing the game now should result in all animations playing at the appropriate
    times and the particle system displaying when the chest opens. And that concludes
    the loot box animation tutorial!
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在玩游戏应该会导致所有动画在适当的时间播放，粒子系统在箱子打开时显示。这样，宝箱动画教程就结束了！
- en: Summary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: At first glance, it would appear that you cannot use Unity particles within
    Unity UI that is set to Screen Space - Overlay. However, there are a few simple
    tricks that let you implement particle effects in the UI and have the particles
    render in front of them.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，似乎你无法在设置为屏幕空间 - 覆盖的 Unity UI 中使用 Unity 粒子。然而，有一些简单的技巧可以让你在 UI 中实现粒子效果，并且让粒子渲染在它们前面。
- en: In the next chapter, we will discuss how to use the World Space Canvas Render
    Mode to have UI elements appear directly in your Unity scene rather than on the
    screen.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论如何使用世界空间画布渲染模式，使 UI 元素直接出现在你的 Unity 场景中，而不是在屏幕上。
