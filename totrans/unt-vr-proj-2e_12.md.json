["```cs\nusing UnityEngine; \nusing UnityEngine.Networking; \n\npublic class AvatarMultiplayer : NetworkBehaviour \n{ \n  public override void OnStartLocalPlayer () \n  { \n    GameObject camera = Camera.main.gameObject; \n    transform.parent = camera.transform; \n    transform.localPosition = Vector3.zero; \n  } \n} \n```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class BallServer : MonoBehaviour\n{\n    public GameObject ballPrefab;\n    public float startHeight = 10f;\n    public float interval = 5f;\n    public List<Color> colors = new List<Color>();\n\n    [SerializeField] private int colorId;\n    private Transform player;\n\n    void Start()\n    {\n        colorId = Random.Range(0, colors.Count);\n        player = Camera.main.transform;\n        StartCoroutine(\"DropBall\");\n    }\n\n    IEnumerator DropBall()\n    {\n        while (true)\n        {\n            Vector3 position = new Vector3(player.position.x, \n                                   startHeight, player.position.z);\n            GameObject ball = Instantiate(ballPrefab, position, \n                                   Quaternion.identity);\n            ball.GetComponent<Renderer>().material.color = \n                                                 colors[colorId];\n            // (network spawn will go here)\n\n            Destroy(ball, interval * 5);\n\n            yield return new WaitForSeconds(interval);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class StateVariables : NetworkBehaviour\n{\n    [SyncVar(hook = \"OnColorChanged\")]\n    public Color color;\n\n    public void SetColor(Color changedColor)\n    {\n        color = changedColor;\n        GetComponent<Renderer>().material.color = color;\n    }\n\n    void OnColorChanged(Color networkColor)\n    {\n        GetComponent<Renderer>().material.color = networkColor;\n    }\n}\n```", "```cs\nIEnumerator DropBall()\n{\n    while (true)\n    {\n        Vector3 position = new Vector3(player.position.x, startHeight, player.position.z);\n        GameObject ball = Instantiate(ballPrefab, position, Quaternion.identity);\n        NetworkServer.Spawn(ball);\n ball.GetComponent<StateVariables>().SetColor( colors[colorId] );\n        Destroy(ball, interval * 5);\n\n        yield return new WaitForSeconds(interval);\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing Oculus.Platform;\n\npublic class OculusEntitlementCheck : MonoBehaviour\n{\n    void Awake()\n    {\n        try\n        {\n            Core.AsyncInitialize();\n            Entitlements.IsUserEntitledToApplication().OnComplete(EntitlementCallback);\n        }\n        catch (UnityException e)\n        {\n            Debug.LogError(\"Oculus Platform failed to initialize due to \n                                                     exception.\");\n            Debug.LogException(e);\n            // Immediately quit the application\n            UnityEngine.Application.Quit();\n        }\n    }\n\n    void EntitlementCallback(Message msg)\n    {\n        if (msg.IsError)\n        {\n            Debug.LogError(\"Oculus entitlement check FAILED.\");\n            UnityEngine.Application.Quit();\n        }\n        else\n        {\n            Debug.Log(\"Oculus entitlement passed.\");\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing UnityEngine.Networking;\n\npublic class AvatarMultiplayer : NetworkBehaviour \n{\n    public override void OnStartLocalPlayer()\n    {\n        GameObject camera = Camera.main.gameObject;\n        transform.parent = camera.transform;\n        transform.localPosition = Vector3.zero;\n\n GetComponent<OvrAvatar>().enabled = false;\n    }\n}\n```"]