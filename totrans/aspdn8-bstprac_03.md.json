["```cs\napp.Run(async context =>\n{\n    await context.Response.WriteAsync(\"This will terminate the web         app.\");\n});\n```", "```cs\napp.Use(async (context, next) =>\n{\n    await context.Response.WriteAsync(\"In the first middleware call.\\        r\\n\");\n    await context.Response.WriteAsync(\"Executing the next         Middleware...\\r\\n\");\n    await next();\n    await context.Response.WriteAsync(\"In the first middleware call…on the return trip.\\r\\n\");\n});\napp.Use(async (context, next) =>\n{\n    await context.Response.WriteAsync(\"We're in the second middleware         call\\r\\n\");\n    await next();\n    await context.Response.WriteAsync(\"On our way back from the second         middleware call\\r\\n\");\n});\n```", "```cs\nIn the first middleware call.\nExecuting the next Middleware...\nWe're in the second middleware call\nOn our way back from the second middleware call\nIn the first middleware call…on the return trip.\n```", "```cs\napp.MapWhen(_ => underMaintenance, ctx =>\n    ctx.Run(async context =>\n    {\n        await context.Response\n            .WriteAsync(\"We are currently under maintenance.\");\n    })\n);\n```", "```cs\npublic static class WebApplicationExtensions\n{\n    public static void UseClientOptions(this WebApplication app)\n    {\n        app.UseHttpsRedirection();\n        app.UseStaticFiles();\n    }\n}\n```", "```cs\napp.UseClientOptions();\n```", "```cs\napp.Use(async (context, next) =>\n{\n    app.Logger.LogInformation(\"In our custom Middleware...\");\n    // Prepare work for when we write to the Response\n    await next();\n    // work that happens when we DO write to the response.\n});\n```", "```cs\npublic class MyFirstMiddleware\n{\n    private readonly ILogger _logger;\n    private readonly RequestDelegate _next;\n    public MyFirstMiddleware(ILogger logger, RequestDelegate next)\n    {\n        _logger = logger;\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        _logger.LogInformation(\"In our custom Middleware...\");\n        // Prepare work for when we write to the Response\n        await _next(context);\n        // work that happens when we DO write to the response.\n    }\n}\n```", "```cs\napp.UseMiddleware<MyFirstMiddleware>();\n```", "```cs\npublic static class MyFirstMiddlewareExtensions\n{\n    public static IApplicationBuilder UseMyFirstMiddleware(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<MyFirstMiddleware>();\n    }\n}\n```", "```cs\napp.UseMyFirstMiddleware();\n```", "```cs\npublic class EmojiMiddleware\n{\n    private readonly ILogger _logger;\n    private readonly RequestDelegate _next;\n    public EmojiMiddleware(ILogger logger, RequestDelegate next)\n    {\n        _logger = logger;\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        await _next(context);\n    }\n}\npublic static class EmojiMiddlewareExtensions\n{\n    public static IApplicationBuilder UseEmojiMiddleware(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<EmojiMiddleware>();\n    }\n}\n```", "```cs\npublic class EmojiStream: Stream\n{\n    private readonly Stream _responseStream;\n    private readonly Dictionary<string, string> _map = new()\n    {\n        { \":-)\", \" :) \" },\n        { \":)\", \" :) \" },\n        { \";-)\", \" ;) \" }\n    };\n    public EmojiStream(Stream responseStream)\n    {\n        ArgumentNullException.ThrowIfNull(responseStream);\n        _responseStream = responseStream;\n    }\n    public override bool CanRead => _responseStream.CanRead;\n    public override bool CanSeek => _responseStream.CanSeek;\n    public override bool CanWrite => _responseStream.CanWrite;\n    public override long Length => _responseStream.Length;\n    public override long Position\n    {\n        get => _responseStream.Position;\n        set => _responseStream.Position = value;\n    }\n    public override void Flush()\n    {\n        _responseStream.Flush();\n    }\n    public override int Read(byte[] buffer, int offset, int count)\n    {\n        return _responseStream.Read(buffer, offset, count);\n    }\n    public override long Seek(long offset, SeekOrigin origin)\n    {\n        return _responseStream.Seek(offset, origin);\n    }\n    public override void SetLength(long value)\n    {\n        _responseStream.SetLength(value);\n    }\n    public override void Write(byte[] buffer, int offset, int count)\n    {\n        var html = Encoding.UTF8.GetString(buffer, offset, count);\n        foreach (var emoticon in _map)\n        {\n            if (!html.Contains(emoticon.Key)) continue;\n            html = html.Replace(emoticon.Key, emoticon.Value);\n        }\n        buffer = Encoding.UTF8.GetBytes(html);\n        _responseStream.WriteAsync(buffer, 0, buffer.Length);\n    }\n}\n```", "```cs\npublic class EmojiMiddleware\n{\n    private readonly RequestDelegate _next;\n    public EmojiMiddleware(RequestDelegate next)\n    {\n        _next = next;\n    }\n    public async Task InvokeAsync(HttpContext context)\n    {\n        using var buffer = new MemoryStream();\n        // Replace the context response with our buffer\n        var stream = context.Response.Body;\n        context.Response.Body = buffer;\n        // Invoke the rest of the pipeline\n        // if there are any other middleware components\n        await _next(context);\n        // Reset and read out the contents\n        buffer.Seek(0, SeekOrigin.Begin);\n        // Adjust the response stream to include our images.\n        var emojiStream = new EmojiStream(stream);\n        // Reset the stream again\n        buffer.Seek(0, SeekOrigin.Begin);\n        // Copy our content to the original stream and put it back\n        await buffer.CopyToAsync(emojiStream);\n        context.Response.Body = emojiStream;\n    }\n}\n```", "```cs\npublic static class EmojiMiddlewareExtensions\n{\n    public static IApplicationBuilder UseEmojiMiddleware(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<EmojiMiddleware>();\n    }\n}\n```", "```cs\napp.UseEmojiMiddleware();\n```", "```cs\n<div class=\"text-center\">\n    <h2>Smile, you're on candid camera. :-) :)</h2>\n    <p>It even works inside ;-) a paragraph.</p>\n</div>\n```"]