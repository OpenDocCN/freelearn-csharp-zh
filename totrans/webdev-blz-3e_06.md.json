["```cs\npublic class Person\n{\n    public string Name { get; set; }\n    public int Age { get; set; }\n} \n```", "```cs\n<EditForm Model=\"personmodel\" OnValidSubmit=\"@validSubmit\">\n    ...\n    <button type=\"submit\">Submit</button>\n</EditForm>\n@code {\n    Person personmodel = new Person();\n    private Task validSubmit()\n    {\n        //Do database stuff\nreturn Task.CompletedTask;\n    }\n} \n```", "```cs\n    using System.ComponentModel.DataAnnotations; \n    ```", "```cs\n    [Required]\n    [MinLength(5)]\n    public string Title { get; set; } = string.Empty; \n    ```", "```cs\n    [Required]\n    public string Text { get; set; } = string.Empty; \n    ```", "```cs\n    [Required]\n    public string Name { get; set; } = string.Empty; \n    ```", "```cs\n    [Required]\n    public string Name { get; set; } = string.Empty; \n    ```", "```cs\n    [Required]\n    public string Text { get; set; } = string.Empty;\n    [Required]\n    public string Name { get; set; } = string.Empty; \n    ```", "```cs\n<ValidationMessage For=\"@(() => personmodel.Name)\"/> \n```", "```cs\n<ValidationSummary/> \n```", "```cs\n    using Microsoft.AspNetCore.Components.Forms;\n    namespace SharedComponents.ResuableComponents ;\n    public class BootstrapFieldCssClassProvider : FieldCssClassProvider\n    {\n        public override string GetFieldCssClass(EditContext editContext, in FieldIdentifier fieldIdentifier)\n       {\n            var isValid = !editContext.GetValidationMessages(fieldIdentifier).Any();\n            var isModified = editContext.IsModified(fieldIdentifier);\n            return (isModified, isValid) switch\n            {\n                (true, true) => \"form-control modified is-valid\",\n                (true, false) => \"form-control modified is-invalid\",\n                (false, true) => \"form-control\",\n                (false, false) => \"form-control\"\n            };\n        }\n    } \n    ```", "```cs\n    using Microsoft.AspNetCore.Components;\n    using Microsoft.AspNetCore.Components.Forms;\n    namespace SharedComponents;\n    public class CustomCssClassProvider<ProviderType> : ComponentBase where ProviderType : FieldCssClassProvider, new()\n    {\n        [CascadingParameter]\n        EditContext? CurrentEditContext { get; set; }\n        public ProviderType Provider { get; set; } = new();\n        protected override void OnInitialized()\n        {\n            if (CurrentEditContext == null)\n            {\n                throw new InvalidOperationException($\"{nameof(CustomCssClassProvider <ProviderType>)} requires a cascading parameter of type {nameof(EditContext)}. For example, you can use {nameof(CustomCssClassProvider<ProviderType>)} inside an EditForm.\");\n            }\n            CurrentEditContext.SetFieldCssClassProvider\n             (Provider);\n        }\n    } \n    ```", "```cs\n<CustomCssClassProvider ProviderType=\"BootstrapFieldCssClassProvider\"/> \n```", "```cs\n<EditForm Model=\"personmodel\" @ref=\"CurrentEditForm\">\nâ€¦\n</EditForm>\n@code {\n    public EditForm CurrentEditForm { get; set; }\n    protected override Task OnInitializedAsync()\n    {\n        CurrentEditForm.EditContext.SetFieldCssClassProvider(new BootstrapFieldCssClassProvider())\n        return base.OnInitializedAsync();\n    }\n} \n```", "```cs\n<EditForm Model=\"personmodel\">\n<CustomCssClassProvider ProviderType=\"BootstrapFieldCssClassProvider\" />\n</EditForm> \n```", "```cs\n<input type=\"text\" @bind=\"Variable\"/> \n```", "```cs\n<input type=\"text\" @bind=\"Variable\" @bind:event=\"oninput\"/> \n```", "```cs\n<input type=\"text\" @bind:get=\"SomeText\" @bind:set=\"SetAsync\" /> \n```", "```cs\n<input type=\"text\" @bind=\"SomeText\" @bind:after=\"AfterAsync\" /> \n```", "```cs\n<input type=\"text\" @bind=\"SomeNumber\" @bind:culture=\"GBCulture\" /> \n```", "```cs\n<input type=\"text\" @bind=\"SomeDate\" @bind:format=\"MM/dd/yyyy\" />\n<input type=\"text\" @bind=\"SomeDate\" @bind:format=\"yyyy-MM-dd\" /> \n```", "```cs\n<InputText @bind-Value=\"text\" /> \n```", "```cs\n<InputText @bind-Value:get=\"text\" @bind-Value:set=\"(value) => {text=value; }\" />\n<InputText @bind-Value:get=\"text\" @bind-Value:set=\"Set\" />\n<InputText @bind-Value:get=\"text\" @bind-Value:set=\"SetAsync\" /> \n```", "```cs\n<InputText @bind-Value=\"text\" @bind-Value:after=\"() => { }\" />\n<InputText @bind-Value=\"text\" @bind-Value:after=\"After\" />\n<InputText @bind-Value=\"text\" @bind-Value:after=\"AfterAsync\" /> \n```", "```cs\n    @typeparam ItemType \n    ```", "```cs\n    @code{\n    [Parameter]\n    public List<ItemType> Items { get; set; } = new();\n    [Parameter, EditorRequired]\n        public required RenderFragment<ItemType> ItemTemplate { get; set; }\n    } \n    ```", "```cs\n    [Parameter]\n    public EventCallback<ItemType> DeleteEvent { get; set; }\n    [Parameter]\n    public EventCallback<ItemType> SelectEvent { get; set; } \n    ```", "```cs\n    @using System.Collections.Generic\n    <h3>List</h3>\n    <table>\n    <Virtualize Items=\"@Items\" Context=\"item\">\n    <tr>\n    <td>\n    <button class=\"btn btn-primary\" @onclick=\"@(()=> {SelectEvent.InvokeAsync(item); })\"> Select</button>\n    </td>\n    <td>@ItemTemplate(item)</td>\n    <td>\n    <button class=\"btn btn-danger\" @onclick=\"@(()=> {DeleteEvent.InvokeAsync(item);})\"> Delete</button>\n    </td>\n    </tr>\n    </Virtualize>\n    </table> \n    ```", "```cs\n    @page \"/admin/categories\"\n    @rendermode InteractiveServer @using SharedComponents.ReusableComponents @inject IBlogApi _api <h3>Categories</h3> \n    ```", "```cs\n    <EditForm OnValidSubmit=\"Save\" Model=\"Item\">\n    <DataAnnotationsValidator />\n    <CustomCssClassProvider ProviderType=\"BootstrapFieldCssClassProvider\" />\n    <InputText @bind-Value=\"@Item.Name\" />\n    <ValidationMessage For=\"@(()=>Item.Name)\" />\n        <button class=\"btn btn-success\" type=\"submit\">Save</button>\n    </EditForm> \n    ```", "```cs\n    <ItemList Items=\"Items\" DeleteEvent=\"@Delete\" SelectEvent=\"@Select\" ItemType=\"Category\">\n    <ItemTemplate>\n            @{\n                var item = context as Category;\n                if (item != null)\n                {\n                    @item.Name\n                }\n            }\n        </ItemTemplate>\n    </ItemList> \n    ```", "```cs\n    @code {\n        private List<Category> Items { get; set; } = new();\n        public Category Item { get; set; } = new();\n        protected async override Task OnInitializedAsync()\n        {\n            Items = (await _api.GetCategoriesAsync()) ?? new();\n            await base.OnInitializedAsync();\n        }\n        private async Task Delete(Category category)\n        {\n            try\n            {\n                await _api.DeleteCategoryAsync(category.Id!);\n                Items.Remove(category);\n            }\n            catch { }\n        }\n        private async Task Save()\n        {\n            try\n            {\n                await _api.SaveCategoryAsync(Item);\n                if (!Items.Contains(Item))\n                {\n                    Items.Add(Item);\n                }\n                Item = new Category();\n            }\n            catch { }\n        }\n        private Task Select(Category category)\n        {\n            try\n            {\n                Item = category;\n            }\n            catch { }\n            return Task.CompletedTask;\n        }\n    } \n    ```", "```cs\n    @page \"/admin/tags\"\n    @rendermode InteractiveServer\n    @using Data.Models\n    @using Data.Models.Interfaces\n    @using SharedComponents\n    @using SharedComponents.ReusableComponents\n    @inject IBlogApi _api <h3>Tags</h3> \n    ```", "```cs\n    <EditForm OnValidSubmit=\"Save\" Model=\"Item\">\n    <DataAnnotationsValidator />\n    <CustomCssClassProvider\n     ProviderType=\"BootstrapFieldCssClassProvider\" />\n    <InputText @bind-Value=\"@Item.Name\" />\n    <ValidationMessage For=\"@(()=>Item.Name)\" />\n    <button class=\"btn btn-success\" type=\"submit\">Save</button>\n    </EditForm> \n    ```", "```cs\n    <ItemList Items=\"Items\" DeleteEvent=\"@Delete\" SelectEvent=\"@Select\" ItemType=\"Tag\">\n    <ItemTemplate>\n            @{\n                var item = context as Tag;\n                if (item != null)\n                {\n                    @item.Name\n                }\n            }\n        </ItemTemplate>\n    </ItemList> \n    ```", "```cs\n    @code {\n        private List<Tag> Items { get; set; } = new List<Tag>();\n        public Tag Item { get; set; } = new Tag();\n        protected async override Task OnInitializedAsync()\n        {\n            Items = (await _api.GetTagsAsync())??new();\n            await base.OnInitializedAsync();\n        }\n        private async Task Delete(Tag tag)\n        {\n            try\n            {\n                await _api.DeleteTagAsync(tag.Id!);\n                Items.Remove(tag);\n            }\n            catch { }\n        }\n        private async Task Save()\n        {\n            try\n            {\n                await _api.SaveTagAsync(Item);\n                if (!Items.Contains(Item))\n                {\n                    Items.Add(Item);\n                }\n                Item = new Tag();\n            }\n            catch { }\n        }\n        private Task Select(Tag tag)\n        {\n            try\n            {\n                Item = tag;\n            }\n            catch { }\n            return Task.CompletedTask;\n        }\n    } \n    ```", "```cs\n    @page \"/admin/blogposts\"\n    @attribute [StreamRendering(true)]\n    @inject IBlogApi _api\n    <a href=\"/admin/blogposts/new\">New blog post</a>\n    @if (posts?.Count == 0)\n    {\n        <p>No blog posts found</p>\n    }\n    else if (posts == null)\n    {\n        <p>Loading...</p>\n    }\n    else\n    {\n        <ul>\n            @foreach (var p in posts)\n            {\n                <li>\n                    @p.PublishDate\n                    <a href=\"/admin/blogposts/@p.Id\">@p.Title</a>\n    </li>\n            }\n        </ul>\n    } \n    ```", "```cs\n    private List<BlogPost>? posts = null;\n    protected override async Task OnInitializedAsync()\n    {\n        await Task.Delay(1000);\n        var numberofposts = await _api.GetBlogPostCountAsync();\n        posts = await _api.GetBlogPostsAsync(numberofposts, 0);\n        await base.OnInitializedAsync();\n    } \n    ```", "```cs\n    using System.Diagnostics.CodeAnalysis;\n    using Microsoft.AspNetCore.Components.Rendering;\n    namespace Microsoft.AspNetCore.Components.Forms;\n        public class InputTextAreaOnInput :\n         InputBase<string?>\n        {\n            protected override void BuildRenderTree(RenderTreeBuilder builder)\n            {\n                builder.OpenElement(0, \"textarea\");\n                builder.AddMultipleAttributes(1, AdditionalAttributes);\n                builder.AddAttribute(2, \"class\", CssClass);\n                builder.AddAttribute(3, \"value\", BindConverter.FormatValue(CurrentValue));\n                builder.AddAttribute(4, \"oninput\", EventCallback.Factory.CreateBinder <string?>(this, __value => CurrentValueAsString = __value, CurrentValueAsString));\n                builder.CloseElement();\n            }\n            protected override bool TryParseValueFromString(string? value, out string? result, [NotNullWhen(false)] out string? validationErrorMessage)\n            {\n                result = value;\n                validationErrorMessage = null;\n                return true;\n            }\n        } \n    ```", "```cs\n    @page \"/admin/blogposts/new\"\n    @page \"/admin/blogposts/{Id}\"\n    @rendermode InteractiveServer\n    @inject IBlogApi _api\n    @inject NavigationManager _manager\n    @using Markdig; @using Microsoft.AspNetCore.Components.Forms \n    ```", "```cs\n    [Parameter]\n    public string? Id { get; set; }\n    BlogPost Post { get; set; } = new();\n    List<Category> Categories { get; set; }=new();\n    List<Tag> Tags { get; set; }= new();\n    string? selectedCategory = null;\n    string? markDownAsHTML { get; set; } \n    ```", "```cs\n    <EditForm Model=\"Post\" OnValidSubmit=\"SavePost\">\n        <DataAnnotationsValidator />\n        <CustomCssClassProvider ProviderType=\"BootstrapFieldCssClassProvider\" />\n        <InputText @bind-Value=\"Post.Title\"/>\n        <ValidationMessage For=\"()=>Post.Title\"/>\n        <InputDate @bind-Value=\"Post.PublishDate\"/>\n        <ValidationMessage For=\"()=>Post.PublishDate\"/>\n        <InputSelect @bind-Value=\"selectedCategory\">\n            <option value=\"0\" disabled>None selected</option>\n            @foreach (var category in Categories)\n            {\n                <option value=\"@category.Id\">@category.Name </option>\n            }\n        </InputSelect>\n        <ul>\n            @foreach (var tag in Tags)\n            {\n            <li>\n                @tag.Name\n                @if (Post.Tags.Any(t => t.Id == tag.Id))\n                {\n                    <button type=\"button\" @onclick=\"@(() => {Post.Tags.Remove(Post.Tags.Single(t=>t.Id==tag.Id)); })\">Remove</button>\n                }\n                else\n                {\n                    <button type=\"button\" @onclick=\"@(()=> { Post.Tags.Add(tag); })\">Add</button>\n                }\n            </li>\n            }\n        </ul>\n            <InputTextAreaOnInput @bind-Value=\"Post.Text\" @onkeyup=\"UpdateHTML\"/>\n            <ValidationMessage For=\"()=>Post.Text\"/>\n            <button type=\"submit\" class=\"btn btn-success\">Save</button>\n        </EditForm> \n    ```", "```cs\n    public async Task SavePost()\n    {\n        if (!string.IsNullOrEmpty(selectedCategory) && Categories != null)\n        {\n            var category = Categories.FirstOrDefault(c =>c.Id == selectedCategory);\n            if (category != null)\n            {\n                Post.Category = category;\n            }\n        }\n        await _api.SaveBlogPostAsync(Post);\n        _manager.NavigateTo(\"/admin/blogposts\");\n    } \n    ```", "```cs\n    @((MarkupString)markDownAsHTML) \n    ```", "```cs\n    MarkdownPipeline pipeline = default!;\n    protected override Task OnInitializedAsync()\n    {\n        pipeline = new MarkdownPipelineBuilder()\n                 .UseEmojiAndSmiley()\n                 .Build();\n        return base.OnInitializedAsync();\n    } \n    ```", "```cs\n    protected void UpdateHTML()\n    {\n        markDownAsHTML = Markdig.Markdown.ToHtml(Post.Text, pipeline);\n    }\n     protected override async Task OnParametersSetAsync()\n        {\n            if (Id != null)\n            {\n                var p = await _api.GetBlogPostAsync(Id);\n                if (p != null)\n                {\n                    Post = p;\n                    if (Post.Category != null)\n                    {\n                        selectedCategory = Post.Category.Id;\n                    }\n                    UpdateHTML();\n                }\n            }\n            Categories = (await _api.GetCategoriesAsync());\n            Tags = (await _api.GetTagsAsync());\n            base.OnParametersSet();\n        } \n    ```", "```cs\n    @using Markdig; \n    ```", "```cs\n    MarkdownPipeline pipeline;\n    protected override Task OnInitializedAsync()\n    {\n        pipeline = new MarkdownPipelineBuilder()\n                 .UseEmojiAndSmiley()\n                 .Build();\n        return base.OnInitializedAsync();\n    } \n    ```", "```cs\n    @((MarkupString)BlogPost.Text) \n    ```", "```cs\n    @((MarkupString)Markdig.Markdown.ToHtml(BlogPost.Text, pipeline)) \n    ```", "```cs\n <InputText @bind-Value=\"@Item.Name\" />\n<ValidationMessage For=\"@(()=>Item.Name)\" /> \n```", "```cs\n<label for=\"validationCustomCategoryName\" class=\"form-label\">Category name</label>\n<div class=\"input-group has-validation\">\n<input type=\"text\" class=\"form-control\" id=\"validationCustomCategoryName\">\n<div class=\"invalid-feedback\">\n        Please choose a category name.\n      </div>\n</div> \n```", "```cs\n     [Parameter]\n      public string Id { get; set; } = Guid.NewGuid().ToString();\n      [Parameter]\n      public string? Label { get; set; }\n      [CascadingParameter]\n      public required EditContext CurrentEditContext { get; set; }\n      [Parameter]\n      public required string Value { get; set; }\n      [Parameter]\n      public EventCallback<string> ValueChanged { get; set; }\n      [Parameter]\n      public required Expression<Func<string>> ValueExpression { get; set; } \n    ```", "```cs\n    @using System.Linq.Expressions\n    <CascadingValue Value=\"CurrentEditContext\">\n        @if(Label!=null)\n        {\n            <label for=\"@Id\" class=\"form-label\">@Label</label>\n        }\n        <InputText id=\"@Id\" Value=\"@Value\" ValueChanged=\"ValueChanged\" ValueExpression=\"ValueExpression\" />\n    <ValidationMessage For=\"@ValueExpression\" />\n    </CascadingValue> \n    ```", "```cs\n    <InputText @bind-Value=\"@Item.Name\" />\n    <ValidationMessage For=\"@(()=>Item.Name)\" /> \n    ```", "```cs\n    <BlogInputText @bind-Value=\"@Item.Name\" Label=\"Name\" /> \n    ```", "```cs\n    <InputText @bind-Value=\"@Item.Name\" />\n    <ValidationMessage For=\"@(()=>Item.Name)\" /> \n    ```", "```cs\n    <BlogInputText @bind-Value=\"@Item.Name\" Label=\"Name\" /> \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Forms\n    <button type=\"@InternalButtonType\" disabled=\"@Disabled\" class=\"@InternalCssClass\" title=\"@Title\" @onclick=\"OnButtonClick\">@ChildContent</button> \n    ```", "```cs\n    [CascadingParameter]\n     public EditContext? EditContext { get; set; }\n     [Parameter]\n     public RenderFragment? ChildContent { get; set; } \n    ```", "```cs\n    `private bool? _disabled = null;\n     private string? _disabledHelpText = \"\";\n     private string formerrors = \"\";\n        [Parameter]\n        public bool Disabled\n        {\n            get\n            {\n                if (_disabled != null && (_disabled == null || _disabled.Value))\n                {\n                    return _disabled!.Value;\n                }\n                if (EditContext == null)\n                {\n                    return false;\n                }\n                formerrors = \"\";\n                if (!TryGetValidationMessages(out var validationmessages))\n                {\n                    return true;\n                }\n                foreach (var m in validationmessages)\n                {\n                    formerrors += m + (MarkupString)\" \\r\\n\";\n                }\n                return !EditContext.IsModified() || validationmessages.Any();\n            }\n            set => _disabled = value;\n        } \n    ```", "```cs\n    private string? Title => Disabled && !string.IsNullOrWhiteSpace(DisabledHelpText) ? DisabledHelpText : HelpText;\n    [Parameter]\n    public string? DisabledHelpText { get { return _disabledHelpText + (MarkupString)\"\\r\\n\" + formerrors; } set { _disabledHelpText = value; } }\n    [Parameter]\n    public string? HelpText { get; set; } \n    ```", "```cs\n     [Parameter] public EventCallback OnClick { get; set; }\n        private string InternalButtonType => OnClick.HasDelegate ? \"button\" : \"submit\";\n        private async Task OnButtonClick(EventArgs args)\n        {\n            if (OnClick.HasDelegate)\n            {\n                await OnClick.InvokeAsync(args);\n            }\n        } \n    ```", "```cs\n    public enum ButtonType\n    {\n        Save,\n        Cancel,\n        Delete,\n        Remove,\n        Select\n    } \n    ```", "```cs\n    [Parameter] public ButtonType Type { get; set; }\n    private string InternalCssClass\n    {\n        get\n        {\n            return Type switch\n            {\n                ButtonType.Save => \"btn btn-success\",\n                ButtonType.Cancel => \"btn btn-danger\",\n                ButtonType.Delete => \"btn btn-danger\",\n                ButtonType.Remove => \"btn btn-danger\",\n                ButtonType.Select => \"btn btn-primary\",\n                _ => \"btn btn-primary\"\n            };\n        }\n    } \n    ```", "```cs\n    <button class=\"btn btn-success\" type=\"submit\">Save</button> \n    ```", "```cs\n    <BlogButton Type=\"BlogButton.ButtonType.Save\">Save</BlogButton> \n    ```", "```cs\n    <button class=\"btn btn-success\" type=\"submit\">Save</button> \n    ```", "```cs\n    <BlogButton Type=\"BlogButton.ButtonType.Save\">Save</BlogButton> \n    ```", "```cs\n    @using Microsoft.AspNetCore.Components.Forms\n    @using Microsoft.AspNetCore.Components.Routing\n    @using Microsoft.JSInterop @inject IJSRuntime JSRuntime\n    @implements IDisposable \n    ```", "```cs\n    [CascadingParameter]\n    public required EditContext CurrentEditContext { get; set; }\n    public string InternalNavigationMessage { get; set; } = \"You are about to loose changes, are you sure you want to navigate away?\"; public bool CheckNavigation { get; set; } = true; \n    ```", "```cs\n    protected override Task OnInitializedAsync()\n    {\n        CurrentEditContext.OnFieldChanged += OnFieldChangedAsync;\n        return base.OnInitializedAsync();\n    }\n    private async void OnFieldChangedAsync(object? Sender,FieldChangedEventArgs args)\n        {\n            await InvokeAsync(StateHasChanged);\n        }\n    void Idisposable.Dispose()\n    {\n            CurrentEditContext.OnFieldChanged -= OnFieldChangedAsync;\n        } \n    ```", "```cs\n    private async Task OnBeforeInternalNavigation (LocationChangingContext context)\n    {\n        if (CurrentEditContext.IsModified() && CheckNavigation)\n        {\n            var isConfirmed = await JSRuntime.InvokeAsync<bool>(\"confirm\",\n                InternalNavigationMessage);\n            if (!isConfirmed)\n            {\n                context.PreventNavigation();\n            }\n        }\n    } \n    ```", "```cs\n    <NavigationLock ConfirmExternalNavigation=\"@(CurrentEditContext.IsModified() && CheckNavigation)\" OnBeforeInternalNavigation=\"OnBeforeInternalNavigation\" /> \n    ```", "```cs\n    <BlogNavigationLock @ref=\"NavigationLock\"/> \n    ```", "```cs\n    @using SharedComponents.ReusableComponents \n    ```", "```cs\n    BlogNavigationLock? NavigationLock { get; set; } \n    ```", "```cs\n    NavigationLock?.CurrentEditContext.MarkAsUnmodified(); \n    ```", "```cs\n    <Routes  /> \n    ```", "```cs\n    <Routes @rendermode=\"RenderMode.InteractiveServer\" /> \n    ```", "```cs\n    @using SharedComponents.ReusableComponents\n    @using Microsoft.AspNetCore.Components.Forms\n    @inject IBlogApi _api\n    <h3>Comments</h3>\n    @foreach (var c in comments)\n    {\n        <div class=\"media mb-4\">\n    <div class=\"media-body\">\n    <h5 class=\"mt-0\">@c.Name</h5>\n    <p>@c.Text</p>\n    <small class=\"text-muted\">@c.Date</small>\n    </div>\n    </div>\n    } \n    ```", "```cs\n    @if (Model != null)\n    {\n        <EditForm method=\"post\" Model=\"@Model\" OnValidSubmit=\"@ValidSubmitAsync\" FormName=\"CommentForm\">\n    <DataAnnotationsValidator />\n    <CustomCssClassProvider ProviderType=\"BootstrapFieldCssClassProvider\" />\n    <BlogInputText @bind-Value=\"Model.Name\" Label=\"Name\" />\n    <BlogInputText @bind-Value=\"Model.Text\" Label=\"Comment\" />\n    <button type=\"submit\">Add Comment</button>\n    </EditForm>\n    } \n    ```", "```cs\n    @code {\n        [Parameter,EditorRequired]\n        public required string BlogPostId { get; set; }\n        [SupplyParameterFromForm]\n        public Comment? Model { get; set; } = new();\n        List<Comment> comments = new();\n        protected override async Task OnInitializedAsync()\n        {\n            comments = await _api.GetCommentsAsync(BlogPostId);\n        }\n        public async Task ValidSubmitAsync()\n        {\n            Model.Id = Guid.NewGuid().ToString();\n            Model.Date = DateTime.Now;\n            Model.BlogPostId = BlogPostId;\n            await _api.SaveCommentAsync(Model);\n            comments = await _api.GetCommentsAsync(BlogPostId);\n        }\n    } \n    ```", "```cs\n    <Comments BlogPostId=\"@BlogPostId\" /> \n    ```", "```cs\n    <form method=\"post\" @onsubmit=\"â€¦\" @formname=\"name\" data-enhance> \n    ```"]