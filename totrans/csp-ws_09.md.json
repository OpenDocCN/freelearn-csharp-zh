["```cs\n    dotnet new webapi\n    ```", "```cs\n    dotnet run --urls=https://localhost:7021/\n    ```", "```cs\n[ApiController]\n[Route(\"[controller]\")]\npublic class WeatherForecastController : ControllerBase\n{\n```", "```cs\n    private readonly ILogger<WeatherForecastController> _logger;\n    public WeatherForecastController(ILogger<WeatherForecastController> logger)\n    {\n        _logger = logger;\n    }\n```", "```cs\n    [HttpGet]\n    public IEnumerable<WeatherForecast> Get()\n    {\n        return new List<WeatherForecast>(){new WeatherForecast()};\n    }\n}\n```", "```cs\ndotnet run --urls=https://localhost:7021/\n```", "```cs\n            [HttpGet(\"error\")]\n            public IEnumerable<WeatherForecast> GetError()\n            {\n                throw new Exception(\"Something went wrong\");\n            }\n    ```", "```cs\nCannot implicitly convert type 'Microsoft.AspNetCore.Mvc.OkObjectResult' to 'Chapter09.Service.Models.WeatherForecast'\n```", "```cs\n[HttpGet(\"weekday/{day}\")]\npublic IActionResult GetWeekday(int day)\n{\n    if (day < 1 || day > 7)\n    {\n        return NotFound($\"'{day}' is not a valid day of a week.\");\n    }\n    return Ok(new WeatherForecast());\n}\n```", "```cs\n        [ApiController]\n        [Route(\"[controller]\")]\n        public class TimeController : ControllerBase\n        {\n    ```", "```cs\n            [HttpGet(\"current\")]\n            public IActionResult GetCurrentTime()\n            {\n    ```", "```cs\n                return Ok(DateTime.Now.ToString(\"o\"));\n            }\n        }\n    ```", "```cs\n    2022-07-30T15:06:28.4924356+03:00\n    ```", "```cs\n// Inject dependencies (DI)\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\n// Add middleware\nvar app = builder.Build();\nif (builder.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\napp.MapControllers();\napp.Run();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nbuilder.Services.AddControllers();\n```", "```cs\napp.MapControllers();\n```", "```cs\nbuilder.Services.AddLogging(builder =>\n{\n    builder.ClearProviders();\n});\n```", "```cs\nbuilder.Services.AddLogging(builder =>\n{\n    builder.ClearProviders();\n    builder.AddConsole();\n    builder.AddDebug();\n});\n```", "```cs\n[HttpGet(\"error\")]\npublic IEnumerable<WeatherForecast> GetError()\n{\n    _logger.LogError(\"Whoops\");\n    throw new Exception(\"Something went wrong\");\n}\n```", "```cs\ndotnet run --urls=https://localhost:7021/\n```", "```cs\nservices.AddSingleton<ILoggerFactory, LoggerFactory>();\n```", "```cs\npublic WeatherForecastController(ILoggerFactory logger)\n```", "```cs\n_logger = logger.CreateLogger(typeof(WeatherForecastController).FullName);\n```", "```cs\npublic interface IWeatherForecastService\n{\n    WeatherForecast GetWeekday(int day);\n}\n```", "```cs\npublic class NoSuchWeekdayException : Exception\n{\n    public NoSuchWeekdayException(int day) \n        : base($\"'{day}' is not a valid day of a week.\") { }\n}\n```", "```cs\npublic class WeatherForecastService : IWeatherForecastService\n{\n    public WeatherForecast GetWeekday(int day)\n    {\n        if (day < 1 || day > 7)\n        {\n            throw new NoSuchWeekdayException(day);\n        }\n        return new WeatherForecast();\n    }\n}\n```", "```cs\nprivate readonly IWeatherForecastService _weatherForecastService;\nprivate readonly Ilogger _logger;\npublic WeatherForecastController(IloggerFactory logger, IWeatherForecastService weatherForecastService)\n{\n    _weatherForecastService = weatherForecastService;\n    _logger = logger.CreateLogger(typeof(WeatherForecastController).FullName);\n}\n```", "```cs\n[HttpGet(\"weekday/{day}\")]\npublic IActionResult GetWeekday(int day)\n{\n    try\n    {\n        var result = _weatherForecastService.GetWeekday(day);\n        return Ok(result);\n    }\n    catch(NoSuchWeekdayException exception)\n    {\n        return NotFound(exception.Message);\n    }\n}\n```", "```cs\nUnable to resolve service for type 'Chapter09.Service.Examples.TemplateApi.Services.IweatherForecastService' while attempting to activate 'Chapter09.Service.Examples.TemplateApi.Controllers.WeatherForecastController'\n```", "```cs\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\n            private readonly ILogger<WeatherForecastService> _logger;\n            public WeatherForecastService(ILogger<WeatherForecastService> logger)\n            {\n                _logger = logger;\n            }\n    ```", "```cs\n            public WeatherForecastService(ILogger<WeatherForecastService> logger)\n            {\n                _logger = logger;\n                _logger.LogInformation(Guid.NewGuid().ToString());\n            }\n    ```", "```cs\n        public class WeatherForecastController : ControllerBase\n        {\n            private readonly IWeatherForecastService _weatherForecastService1;\n            private readonly IWeatherForecastService _weatherForecastService2;\n            private readonly ILogger _logger;\n            public WeatherForecastController(ILoggerFactory logger, IWeatherForecastService weatherForecastService1, IWeatherForecastService weatherForecastService2)\n            {\n                _weatherForecastService1 = weatherForecastService1;\n                _weatherForecastService2 = weatherForecastService2;\n                _logger = logger.CreateLogger(typeof(WeatherForecastController).FullName);\n            }\n    ```", "```cs\n            [HttpGet(\"weekday/{day}\")]\n            public IActionResult GetWeekday(int day)\n            {\n                try\n                {\n                    var result = _weatherForecastService1.GetWeekday(day);\n                    result = _weatherForecastService1.GetWeekday(day);\n                    return Ok(result);\n                }\n                catch (NoSuchWeekdayException exception)\n                {\n                    return NotFound(exception.Message);\n                }\n            }\n    ```", "```cs\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      2b0c4e0c-97ff-4472-862a-b6326992d9a6\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      2b0c4e0c-97ff-4472-862a-b6326992d9a6\n```", "```cs\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      2b0c4e0c-97ff-4472-862a-b6326992d9a6\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      2b0c4e0c-97ff-4472-862a-b6326992d9a6\n```", "```cs\nbuilder.Services.AddScoped<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      921a29e8-8f39-4651-9ffa-2e83d2289f29\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      921a29e8-8f39-4651-9ffa-2e83d2289f29\n```", "```cs\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      974e082d-1ff5-4727-93dc-fde9f61d3762\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      974e082d-1ff5-4727-93dc-fde9f61d3762\n```", "```cs\nbuilder.Services.AddTransient<IWeatherForecastService, WeatherForecastService>();\n```", "```cs\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      6335a0aa-f565-4673-a5c4-0590a5d0aead\ninfo: Chapter09.Service.Services.WeatherForecastService[0]\n      4074f4d3-5e50-4748-9d6f-15fb6a782000\n```", "```cs\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\nbuilder.services.AddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\n```", "```cs\nServices count: 156\nServices count: 157\n```", "```cs\nbuilder.Services.TryAddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\nbuilder.Services.TryAddSingleton<IWeatherForecastService, WeatherForecastService>();\nDebug.WriteLine(\"Services count: \" + services.Count);\n```", "```cs\nServices count: 156\nServices count: 156\n```", "```cs\nUnable to resolve a controller\n```", "```cs\npublic class WeatherForecastServiceV2 : IWeatherForecastService\n{\n    private readonly string _city;\n    private readonly int _refreshInterval;\n    public WeatherForecastService(string city, int refreshInterval)\n    {\n        _city = city;\n        _refreshInterval = refreshInterval;\n    }\n```", "```cs\nbuilder.Services.AddSingleton<IWeatherForecastService, WeatherForecastService>(BuildWeatherForecastService);\nstatic WeatherForecastServiceV2 BuildWeatherForecastService(IServiceProvider _)\n{\n    return new WeatherForecastServiceV2(\"New York\", 5);\n}\n```", "```cs\n    public interface ICurrentTimeProvider\n    {\n        DateTime GetTime(string timezoneId);\n    }\n    ```", "```cs\n    public class CurrentTimeUtcProvider : ICurrentTimeProvider\n    {\n    ```", "```cs\n        public DateTime GetTime(string timezoneId)\n        {\n            var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);\n            var time = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timezoneInfo);\n            return time;\n        }\n    }\n    ```", "```cs\n    [ApiController]\n    [Route(\"[controller]\")]\n    public class CurrentTimeController : ControllerBase\n    {\n        private readonly ICurrentTimeProvider _currentTimeProvider;\n        public CurrentTimeController(ICurrentTimeProvider currentTimeProvider)\n        {\n            _currentTimeProvider = currentTimeProvider;\n        }\n    ```", "```cs\n        [HttpGet]\n        public IActionResult Get(string timezoneId)\n        {\n            var time = _currentTimeProvider.GetTime(timezoneId);\n            return Ok(time);\n        }\n    }\n    ```", "```cs\n    builder.Services.AddSingleton<ICurrentTimeProvider, CurrentTimeUtcProvider>();\n    ```", "```cs\n\"2021-09-18T20:32:29.1619999\"\n```", "```cs\ndotnet add package Swashbuckle.AspNetCore\n```", "```cs\nbuilder.Services.AddSwaggerGen();\n```", "```cs\napp.UseSwagger();\napp.UseSwaggerUI(c => { c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"My API V1\"); }); \n```", "```cs\ndotnet run --urls=https://localhost:7021/\n```", "```cs\n    public interface IWeatherForecastService\n    {\n        WeatherForecast GetWeekday(int day);\n        void SaveWeatherForecast(WeatherForecast forecast);\n        WeatherForecast GetWeatherForecast(DateTime date);\n    }\n```", "```cs\nprivate readonly IMemoryCache _cache;\n```", "```cs\npublic WeatherForecastService(ILogger<WeatherForecastService> logger, string city, int refreshInterval, IMemoryCache cache)\n        {\n            _logger = logger;\n            _city = city;\n            _refreshInterval = refreshInterval;\n            _serviceIdentifier = Guid.NewGuid();\n            _cache = cache;\n        }\n```", "```cs\n        public void SaveWeatherForecast(WeatherForecast forecast)\n        {\n            _cache.Set(forecast.Date.ToShortDateString(), forecast);\n        }\n```", "```cs\n        public WeatherForecast GetWeatherForecast(DateTime date)\n        {\n            var shortDateString = date.ToShortDateString();\n            var contains = _cache.TryGetValue(shortDateString, out var entry);\n            return !contains ? null : (WeatherForecast) entry;\n        }\n```", "```cs\n        [HttpGet(\"{date}\")]\n        public IActionResult GetWeatherForecast(DateTime date)\n        {\n            var weatherForecast = _weatherForecastService1.GetWeatherForecast(date);\n            if (weatherForecast == null) return NotFound();\n            return Ok(weatherForecast);\n        }\n        [HttpPost]\n        public IActionResult SaveWeatherForecast(WeatherForecast weatherForecast)\n        {\n            _weatherForecastService1.SaveWeatherForecast(weatherForecast);\n            return CreatedAtAction(\"GetWeatherForecast\", new { date = weatherForecast.Date.ToShortDateString()}, weatherForecast);\n        }\n```", "```cs\n        /// <summary>\n        /// Gets weather forecast at a specified date.\n        /// </summary>\n        /// <param name=\"date\">Date of a forecast.</param>\n        /// <returns>\n        /// A forecast at a specified date.\n        /// If not found - 404.\n        /// </returns>\n        [HttpGet(\"{date}\")]\n        [ProducesResponseType(StatusCodes.Status404NotFound)]\n        [ProducesResponseType(StatusCodes.Status200OK)]\n        public IActionResult GetWeatherForecast(DateTime date)\n        /// <summary>\n        /// Saves a forecast at forecast date.\n        /// </summary>\n        /// <param name=\"weatherForecast\">Date which identifies a forecast. Using short date time string for identity.</param>\n        /// <returns>201 with a link to an action to fetch a created forecast.</returns>\n        [HttpPost]\n        [ProducesResponseType(StatusCodes.Status201Created)]\n        public IActionResult SaveWeatherForecast(WeatherForecast weatherForecast)\n```", "```cs\n  <PropertyGroup>\n    <GenerateDocumentationFile>true</GenerateDocumentationFile>\n    <NoWarn>$(NoWarn);1591</NoWarn>\n  </PropertyGroup>\n```", "```cs\n            builder.Services.AddSwaggerGen(cfg =>\n            {\n                var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n                cfg.IncludeXmlComments(xmlPath);\n            });\n```", "```cs\ndotnet add package Hellang.Middleware.ProblemDetails\n```", "```cs\n            builder.Services.AddProblemDetails(opt =>\n            {\n                opt.MapToStatusCode<NoSuchWeekdayException>(404);\n                opt.IncludeExceptionDetails = (context, exception) => false;\n            });\n```", "```cs\n        if (builder.Environment.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n        }\n```", "```cs\n        [HttpGet(\"weekday/{day}\")]\n        public IActionResult GetWeekday(int day)\n        {\n            var result = _weatherForecastService.GetWeekday(day);\n            return Ok(result);\n        }\n```", "```cs\n{\n    \"type\": \"/weatherforecast/weekday/9\",\n    \"title\": \"Not Found\",\n    \"status\": 404,\n    \"traceId\": \"|41dee286-4c5efb72e344ee2d.\"\n}\n```", "```cs\ndotnet add package FluentValidation.AspNetCore\n```", "```cs\npublic class WeatherForecastValidator : AbstractValidator<WeatherForecast>\n```", "```cs\n        public WeatherForecastValidator()\n        {\n            RuleFor(p => p.Date)\n                .LessThan(DateTime.Now.AddMonths(1))\n                .WithMessage(\"Weather forecasts in more than 1 month of future are not supported\");\n            RuleFor(p => p.TemperatureC)\n                .InclusiveBetween(-100, 100)\n                .WithMessage(\"A temperature must be between -100 and +100 C.\");\n        }\n```", "```cs\n{\n  \"date\": \"2022-09-19T19:34:34.511Z\",\n  \"temperatureC\": -111,\n  \"summary\": \"string\"\n}\n```", "```cs\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"traceId\": \"|ade14b9-443aaaf79026feec.\",\n  \"errors\": {\n    \"Date\": [\n      \"Weather forecasts in more than 1 month of future are not supported\"\n    ],\n    \"TemperatureC\": [\n      \"A temperature must be between -100 and +100 C.\"\n    ]\n  }\n}\n```", "```cs\n  \"WeatherForecastConfig\": {\n    \"City\": \"New York\",\n    \"RefreshInterval\":  5 \n  }\n```", "```cs\n    public class WeatherForecastConfig\n    {\n        public string City { get; set; }\n        public int RefreshInterval { get; set; }\n    }\n```", "```cs\npublic WeatherForecastService(Ilogger<WeatherForecastService> logger, Ioptions<WeatherForecastConfig> config, ImemoryCache cache)\n```", "```cs\nbuilder.Services.Configure<WeatherForecastConfig>(builder.Configuration.GetSection(nameof(WeatherForecastConfig)));\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft\": \"Information\",\n      \"Microsoft.Hosting.Lifetime\": \"Information\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"WeatherForecastConfig\": {\n    \"City\": \"New York\",\n    \"RefreshInterval\": 5\n  },\n  \"WeatherForecastProviderUrl\": \"https://community-open-weather-map.p.rapidapi.com/\",\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"ClientId\": \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\",\n    \"TenantId\": \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\",\n    \"Audience\": \"api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"\n  }\n}\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Trace\",\n      \"Microsoft\": \"Trace\",\n      \"Microsoft.Hosting.Lifetime\": \"Trace\"\n    }\n  }\n}\n```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Trace\",\n      \"Microsoft\": \"Trace\",\n      \"Microsoft.Hosting.Lifetime\": \"Trace\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"WeatherForecastConfig\": {\n    \"City\": \"New York\",\n    \"RefreshInterval\": 5\n  },\n  \"WeatherForecastProviderUrl\": \"https://community-open-weather-map.p.rapidapi.com/\",\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"ClientId\": \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\",\n    \"TenantId\": \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\",\n    \"Audience\": \"api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"\n  }\n}\n```", "```cs\n    public static class ControllersConfigurationSetup\n    {\n        public static IserviceCollection AddControllersConfiguration(this IserviceCollection services)\n        {\n            services\n                .AddControllers()\n                .AddFluentValidation();\n            return services;\n        }\n    }\n```", "```cs\n    public static class LoggingSetup\n    {\n        public static IServiceCollection AddLoggingConfiguration(this IServiceCollection services)\n        {\n            services.AddLogging(builder =>\n            {\n                builder.ClearProviders();\n                builder.AddConsole();\n                builder.AddDebug();\n            });\n            return services;\n        }\n    }\n```", "```cs\n    public static class RequestValidatorsSetup\n    {\n        public static IServiceCollection AddRequestValidators(this IServiceCollection services)\n        {\n            services.AddTransient<Ivalidator<WeatherForecast>, WeatherForecastValidator>();\n            return services;\n        }\n    }\n```", "```cs\n    public static class SwaggerSetup\n    {\n        public static IServiceCollection AddSwagger(this IServiceCollection services)\n        {\n            services.AddSwaggerGen(cfg =>\n            {\n                var xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\n                var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\n                cfg.IncludeXmlComments(xmlPath);\n            });\n            return services;\n        }\n    }\n```", "```cs\n    public static class WeatherServiceSetup\n    {\n        public static IServiceCollection AddWeatherService(this IServiceCollection services, IConfiguration configuration)\n        {\n            services.AddScoped<IWeatherForecastService, WeatherForecastService>(BuildWeatherForecastService);\n            services.AddSingleton<ICurrentTimeProvider, CurrentTimeUtcProvider>();\n            services.AddSingleton<ImemoryCache, MemoryCache>();\n            services.Configure<WeatherForecastConfig>(configuration.GetSection(nameof(WeatherForecastConfig)));\n            return services;\n        }\n        private static WeatherForecastService BuildWeatherForecastService(IserviceProvider provider)\n        {\n            var logger = provider\n                .GetService<IloggerFactory>()\n                .CreateLogger<WeatherForecastService>();\n            var options = provider.GetService<Ioptions<WeatherForecastConfig>>();\n            return new WeatherForecastService(logger, options, provider.GetService<ImemoryCache>());\n        }\n    }\n```", "```cs\n    public static class ExceptionMappingSetup\n    {\n        public static IServiceCollection AddExceptionMappings(this IServiceCollection services)\n        {\n            services.AddProblemDetails(opt =>\n            {\n                opt.MapToStatusCode<NoSuchWeekdayException>(404);\n            });\n            return services;\n        }\n    }\n```", "```cs\nbuilder.Services\n    .AddControllersConfiguration()\n    .AddLoggingConfiguration()\n    .AddRequestValidators()\n    .AddSwagger()\n    .AddWeatherService(builder.Configuration)\n    .AddExceptionMappings();\n```", "```cs\nvar services = builder.Services;\nvar configuration = builder.Configuration;\nvar environment = builder.Environment;\n```", "```cs\n    \"WeatherForecastProviderUrl\": \"https://visual-crossing-weather.p.rapidapi.com/\"\n    ```", "```cs\n    public class WeatherForecast\n    {\n        public DateTime Datetime { get; set; }\n        public string Temperature { get; set; }\n        public string Conditions { get; set; }\n    }\n    ```", "```cs\n    dotnet add package CsvHelper\n    ```", "```cs\n    public class WeatherForecastClassMap : ClassMap<WeatherForecast>\n    {\n        public WeatherForecastClassMap()\n        {\n            Map(m => m.Datetime).Name(\"Date time\");\n            Map(m => m.Temperature).Name(\"Temperature\");\n            Map(m => m.Conditions).Name(\"Conditions\");\n        }\n    }\n    ```", "```cs\n    public interface IWeatherForecastProvider\n    {\n        Task<WeatherForecast> GetCurrent(string location);\n    }\n```", "```cs\npublic class WeatherForecastProvider : IWeatherForecastProvider\n    {\n        private readonly HttpClient _client;\n        public WeatherForecastProvider(HttpClient client)\n        {\n            _client = client;\n        }\n```", "```cs\npublic async Task<WeatherForecast> GetCurrent(string location)\n{\n```", "```cs\nvar request = new HttpRequestMessage\n{\n    \tMethod = HttpMethod.Get,\n    \tRequestUri = new Uri($\"forecast?aggregateHours=1&location={location}&contentType=csv\", UriKind.Relative),\n};\n```", "```cs\nusing var response = await _client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\n```", "```cs\nvar body = await response.Content.ReadAsStringAsync();\nusing var reader = new StringReader(body);\nusing var csv = new CsvReader(reader, CultureInfo.InvariantCulture);\ncsv.Context.RegisterClassMap<WeatherForecastClassMap>();\n```", "```cs\nvar forecasts = csv.GetRecords<WeatherForecast>();\n```", "```cs\nreturn forecasts.First();\n}\n```", "```cs\ndotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson\n```", "```cs\n.AddNewtonsoftJson();\n```", "```cs\ndotnet add package AutoMapper.Extensions.Microsoft.DependencyInjection\n```", "```cs\n    public class WeatherForecastProfile : Profile\n    {\n        public WeatherForecastProfile()\n        {\n            CreateMap<Dtos.WeatherForecast, Models.WeatherForecast>()\n```", "```cs\n                .ForMember(to => to.TemperatureC, opt => opt.MapFrom(from => from.main.temp));\n```", "```cs\n        private static string BuildDescription(Dtos.WeatherForecast forecast)\n        {\n            return string.Join(\",\",\n                forecast.weather.Select(w => w.description));\n        }\n```", "```cs\n.ForMember(to => to.Summary, opt => opt.MapFrom(from => BuildDescription(from)))\n```", "```cs\npublic static class MapperSetup\n{\n    public static IServiceCollection AddModelMappings(this IServiceCollection services)\n    {\n        services.AddAutoMapper(cfg =>\n        {\n            cfg.AddProfile<WeatherForecastProfile>();\n        });\n        return services;\n    }\n}\n```", "```cs\n    public static class HttpClientsSetup\n    {\n        public static IServiceCollection AddHttpClients(IServiceCollection services)\n        {\n```", "```cs\nservices.AddHttpClient<IWeatherForecastProvider, WeatherForecastProvider>((provider, client) =>\n            {\n```", "```cs\n                client.BaseAddress = new Uri(config[\"WeatherForecastProviderUrl\"]);\n                var apiKey = Environment.GetEnvironmentVariable(\"x-rapidapi-key\", EnvironmentVariableTarget.User);\n                client.DefaultRequestHeaders.Add(\"x-rapidapi-key\", apiKey);\n            });\n```", "```cs\nreturn services;\n```", "```cs\n.AddHttpClients(Configuration)\n```", "```cs\npublic WeatherForecastService(..., IWeatherForecastProvider provider, IMapper mapper)\n```", "```cs\n        public async Task<WeatherForecast> GetWeatherForecast(DateTime date)\n        {\n            const string DateFormat = \"yyyy-MM-ddthh\";\n            var contains = _cache.TryGetValue(date.ToString(DateFormat), out var entry);\n            if(contains){return (WeatherForecast)entry;}\n\n            var forecastDto = await _provider.GetCurrent(_city);\n            var forecast = _mapper.Map<WeatherForecast>(forecastDto);\n            forecast.Date = DateTime.UtcNow;\n            _cache.Set(DateTime.UtcNow.ToString(DateFormat), forecast);\n            return forecast;\n        }\n```", "```cs\n{\"date\":\"2021-09-21T20:17:47.410549Z\",\"temperatureC\":25,\"temperatureF\":76,\"summary\":\"clear sky\"}\n```", "```cs\n    public interface IFilesService\n        {\n            Task Delete(string name);\n            Task Upload(string name, Stream content);\n            Task<byte[]> Download(string filename);\n            Uri GetDownloadLink(string filename);\n        }\n    ```", "```cs\n    FilesService.cs\n    public class FilesService : IFilesService\n        {\n            private readonly BlobServiceClient _blobServiceClient;\n            private readonly BlobContainerClient _defaultContainerClient;\n            public FilesClient()\n            {\n                var endpoint = \"https://packtstorage2.blob.core.windows.net/\";\n                var account = \"packtstorage2\";\n                var key = Environment.GetEnvironmentVariable(\"BlobStorageKey\", EnvironmentVariableTarget.User);\n                var storageEndpoint = new Uri(endpoint);\n                var storageCredentials = new StorageSharedKeyCredential(account, key);\n                _blobServiceClient = new BlobServiceClient(storageEndpoint, storageCredentials);\n                _defaultContainerClient = CreateContainerIfNotExists(\"Exercise03).Result;\n            }\n            private async Task<BlobContainerClient> CreateContainerIfNotExists(string container)\n    ```", "```cs\nYou can find the complete code here: https://packt.link/fNQAX.\n```", "```cs\n        {\n            var lowerCaseContainer = container.ToLower();\n            var containerClient = _blobServiceClient.GetBlobContainerClient(lowerCaseContainer);\n            if (!await containerClient.ExistsAsync())\n            {\n                containerClient = await _blobServiceClient.CreateBlobContainerAsync(lowerCaseContainer);\n            }\n            return containerClient;\n        }\n```", "```cs\n    private static void ValidateFileExists(BlobClient blobClient)\n    {\n        if (!blobClient.Exists())\n        {\n            throw new FileNotFoundException($\"File {blobClient.Name} in default blob storage not found.\");\n        }\n    }\n    ```", "```cs\n    public Task Delete(string name)\n    {\n        var blobClient = _defaultContainerClient.GetBlobClient(name);\n        ValidateFileExists(blobClient);\n        return blobClient.DeleteAsync();\n    }\n    ```", "```cs\n    public Task UploadFile(string name, Stream content)\n    {\n        var blobClient = _defaultContainerClient.GetBlobClient(name);\n        return blobClient.UploadAsync(content, headers);\n    }\n    ```", "```cs\n            public async Task<byte[]> Download(string filename)\n            {\n                var blobClient = _defaultContainerClient.GetBlobClient(filename);\n                var stream = new MemoryStream();\n                await blobClient.DownloadToAsync(stream);\n                return stream.ToArray();\n            }\n    ```", "```cs\n            private Uri GetUri(BlobClient blobClient)\n            {\n                var sasBuilder = new BlobSasBuilder\n                {\n                    BlobContainerName = _defaultContainerClient.Name,\n                    BlobName = blobClient.Name,\n                    Resource = \"b\",\n                    ExpiresOn = DateTimeOffset.UtcNow.AddHours(1)\n                };\n                sasBuilder.SetPermissions(BlobSasPermissions.Read);\n                var sasUri = blobClient.GenerateSasUri(sasBuilder);\n                return sasUri;\n            }\n    ```", "```cs\n            public Uri GetDownloadLink(string filename)\n            {\n                var blobClient = _defaultContainerClient.GetBlobClient(filename);\n                var url = GetUri(blobClient);\n                return url;\n            }\n    ```", "```cs\n    opt.MapToStatusCode<FileNotFoundException>(404);\n    ```", "```cs\n    public static class FileUploadServiceSetup\n    {\n        public static IServiceCollection AddFileUploadService(this IServiceCollection services)\n        {\n            services.AddScoped<IFilesService, FilesService>();\n            return services;\n        }\n    }\n    ```", "```cs\n    .AddFileUploadService();\n    ```", "```cs\n        [Route(\"api/[controller]\")]\n        [ApiController]\n        public class FileController : ControllerBase\n        {\n    ```", "```cs\n            private readonly IFilesService _filesService;\n            public FileController(IFilesService filesService)\n            {\n                _filesService = filesService;\n            }\n    ```", "```cs\n            [HttpDelete(\"{file}\")]\n            public async Task<IActionResult> Delete(string file)\n            {\n                await _filesService.Delete(file);\n                return Ok();\n            }\n    ```", "```cs\n      [HttpGet(\"Download/{file}\")]\n            public async Task<IActionResult> Download(string file)\n            {\n                var content = await _filesService.Download(file);\n                return new FileContentResult(content, \"application/octet-stream \");\n            }\n    ```", "```cs\n            [HttpGet(\"Link\")]\n            public IActionResult GetDownloadLink(string file)\n            {\n                var link = _filesService.GetDownloadLink(file);\n                return Ok(link);\n            }\n    ```", "```cs\n            [HttpPost(\"upload\")]\n            public async Task<IActionResult> Upload(IFormFile file)\n            {\n                await _filesService.UploadFile(file.FileName, file.OpenReadStream());\n                return Ok();\n            }\n    ```", "```cs\ndotnet add package Microsoft.Identity.Web\n```", "```cs\n    public static class SecuritySetup\n    {\n        public static IServiceCollection AddSecurity(this IServiceCollection services, IConfiguration configuration, IWebHostEnvironment env)\n        {\n            services.AddMicrosoftIdentityWebApiAuthentication(configuration);\n            return services;\n        }\n    }\n```", "```cs\n.AddSecurity()\n```", "```cs\n    app.UseAuthentication();\n    app.UseAuthorization();\n```", "```cs\n  \"AzureAd\": {\n    \"Instance\": \"https://login.microsoftonline.com/\",\n    \"ClientId\": \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4ba\",\n    \"TenantId\": \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\",\n    \"Audience\": \"api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"\n  }\n```", "```cs\n    [Authorize]\n    [ApiController]\n    [RequiredScope(\"access_as_user\")]\n    [Route(\"[controller]\")]\n    public class WeatherForecastController : ControllerBase\n```", "```cs\n    dotnet add package Microsoft.Identity.Client\n    ```", "```cs\n    static IPublicClientApplication BuildAadClientApplication()\n    {\n        const string clientId = \"2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb\"; // Service\n        const string tenantId = \"ddd0fd18-f056-4b33-88cc-088c47b81f3e\";\n        const string redirectUri = \"http://localhost:7022/token\";\n        string authority = string.Concat(\"https://login.microsoftonline.com/\", tenantId);\n        var application = PublicClientApplicationBuilder.Create(clientId)\n            .WithAuthority(authority)\n            .WithRedirectUri(redirectUri)\n            .Build();\n        return application;\n    }\n    ```", "```cs\n    static async Task<string> GetTokenUsingAzurePortalAuth(IPublicClientApplication application)\n    {\n    ```", "```cs\n                var scopes = new[] { $\"api://{clientId}/{scope}\" };\n    ```", "```cs\n                AuthenticationResult result;\n                try\n                {\n                    var accounts = await application.GetAccountsAsync();\n                    result = await application.AcquireTokenSilent(scopes, accounts.FirstOrDefault()).ExecuteAsync();\n                }\n    ```", "```cs\n            catch (MsalUiRequiredException ex)\n            {\n                result = await application.AcquireTokenInteractive(scopes)\n                    .WithClaims(ex.Claims)\n                    .ExecuteAsync();\n            }\n```", "```cs\n                return result.AccessToken;\n    ```", "```cs\n    var application = BuildAadClientApplication();\n    var token = await GetTokenUsingAzurePortalAuth(application);\n    Console.WriteLine($\"Bearer {token}\");\n    ```", "```cs\nAuthentication complete. You can return to the application. Feel free to close this browser tab.\n```", "```cs\n                    cfg.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme()\n                    {\n                        Name = \"Authorization\",\n                        Type = SecuritySchemeType.ApiKey,\n                        Scheme = \"Bearer\",\n                        BearerFormat = \"JWT\",\n                        In = ParameterLocation.Header,\n                        Description = $\"Example: \\\"Bearer YOUR_TOKEN>\\\"\",\n                    });\n    ```", "```cs\n                    cfg.AddSecurityRequirement(new OpenApiSecurityRequirement\n                    {\n                        {\n                            new OpenApiSecurityScheme\n                            {\n                                Reference = new OpenApiReference\n                                {\n                                    Type = ReferenceType.SecurityScheme,\n                                    Id = \"Bearer\"\n                                }\n                            },\n                            new string[] {}\n                        }\n                    });\n    ```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Trace\",\n      \"Microsoft\": \"Trace\",\n      \"Microsoft.Hosting.Lifetime\": \"Trace\"\n    }\n  }\n}\n```", "```cs\nAudience validation failed. Audiences: 'api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bb'. Did not match: validationParameters.ValidAudience: 'api://2d8834d3-6a27-47c9-84f1-0c9db3eeb4bc' or validationParameters.ValidAudiences: 'null'.\n```", "```cs\n    namespace Pact.Function\n    {\n        public static class GetCurrentTime\n        {\n            [Function(\"GetCurrentTime\")]\n            public static HttpResponseData Run([HttpTrigger(AuthorizationLevel.Anonymous, \"get\", \"post\")] HttpRequestData request,\n                FunctionContext executionContext)\n    ```", "```cs\n            {\n                var timezoneId = HttpUtility.ParseQueryString(request.Url.Query).Get(\"timezoneId\");\n    ```", "```cs\n    var timezoneInfo = TimeZoneInfo.FindSystemTimeZoneById(timezoneId);\n                var time = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, timezoneInfo);\n    ```", "```cs\n    var response = request.CreateResponse(HttpStatusCode.OK);\n                response.Headers.Add(\"Content-Type\", \"text/plain; charset=utf-8\");\n                response.WriteString(time.ToString());\n                return response;\n    }\n    ```", "```cs\n2022-08-07 16:02:03\n```"]