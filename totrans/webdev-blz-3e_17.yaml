- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Examining Source Generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at writing code that generates code. Even though
    this chapter isn’t directly related to Blazor development, it still has a connection
    to Blazor, as we’ll discover.
  prefs: []
  type: TYPE_NORMAL
- en: The subject of source generators is a book on its own, but I wanted to introduce
    it since they are used by Blazor and, honestly, it is one of my favorite features.
  prefs: []
  type: TYPE_NORMAL
- en: I am the kind of person that spends a day writing source code that saves me
    10 minutes if I know I will need to repeat those 10 minutes over and over again.
    Repetitive tasks have never been a favorite of mine.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following:'
  prefs: []
  type: TYPE_NORMAL
- en: What a source generator is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to get started with source generators
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Community projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The idea for this chapter is for you to use it as a reference so that you can
    implement a new project on your own.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is a reference chapter and is not connected in any way with the
    book’s other chapters.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the source code for this chapter’s result at [https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter17](https://github.com/PacktPublishing/Web-Development-with-Blazor-Third-Edition/tree/main/Chapter17).
  prefs: []
  type: TYPE_NORMAL
- en: What a source generator is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, we find ourselves writing the same kind of code repeatedly. In
    the past, I have used T4 templates to generate code and even written **stored
    procedures** and applications that can help me generate code. **Source generators**
    are part of the .NET compiler platform (Roslyn) SDK.
  prefs: []
  type: TYPE_NORMAL
- en: A generator gives us access to a compilation object representing all the user
    code currently being compiled. From there, the object can be inspected, and we
    can, based on that, write additional code.
  prefs: []
  type: TYPE_NORMAL
- en: Okay, this sounds complicated, and I would be lying if I said it was easy to
    write a source generator, but it instantly saves us a lot of time. So, let’s break
    it down a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we compile our code, the compiler does the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: The compilation runs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Source generators analyze code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The source generators generate new code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The compilation continues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Steps 2* and *3* are what source generators do.'
  prefs: []
  type: TYPE_NORMAL
- en: In Blazor, source generators are used all the time; it is a source generator
    that takes the `.razor` files and converts them to C# code.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look at what Blazor generates by adding the following to our .`csproj`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Adding this code will emit generated files into the `obj` folder for the `razor`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find them here: `\obj\Debug\net8.0\generated\Microsoft.NET.Sdk.Razor.SourceGenerators\Microsoft.NET.Sdk.Razor.SourceGenerators.RazorSourceGenerator`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can choose where to emit the files by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: You can replace `THEPATH` with a path you would like to have the files emitted
    to.
  prefs: []
  type: TYPE_NORMAL
- en: In that folder, we can find a file called `Pages_Counter_razor.g.cs`, which
    is the C# representation of the counter component.
  prefs: []
  type: TYPE_NORMAL
- en: The `Microsoft.NET.Sdk.Razor.SourceGenerators-generator` is, of course, a very
    advanced source generator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s think of a scenario: at work, we create services and interfaces for those
    services. The only use of these interfaces is for testing purposes, the same way
    we have built our repositories throughout the book.'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, adding a method to a service means we need to add the method to
    the class and the interface. We tried simplifying the process by putting the interface
    and the class in the same file. However, we still forgot about the interface,
    pushed the code, and didn’t notice the mistake until everything was built and
    a NuGet package was generated.
  prefs: []
  type: TYPE_NORMAL
- en: We found a source generator called `InterfaceGenerator`; adding an attribute
    to our class will generate the interface for us.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s take a look at this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a simple service class (taken from the `InterfaceGenerator` GitHub
    page). Adding an attribute to the code will automatically generate an interface,
    and we can add a reference to that interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The generated interface will always be up to date. This sample is an excellent
    example of when source code generators will save time and remove pain points.
  prefs: []
  type: TYPE_NORMAL
- en: Source generators are powerful; we get access to a syntax tree that we can query.
    We can iterate over all classes and find the ones with a specific attribute or
    that implement an interface, for example, and based on that, generate code.
  prefs: []
  type: TYPE_NORMAL
- en: There are some limitations. There is no way to know in what order the source
    generators will run, so we can’t generate code based on generated code. We can
    only add code, not modify code.
  prefs: []
  type: TYPE_NORMAL
- en: The following section will look at how we can build our source generators.
  prefs: []
  type: TYPE_NORMAL
- en: How to get started with source generators
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s time to look at how we can build our source code generators. The `Chapter17`
    folder is a finished example of what we discuss here. The instructions will not
    be a step-by-step guide.
  prefs: []
  type: TYPE_NORMAL
- en: To create a source code generator, we need a class library targeting *.NET Standard
    2.0*. We also need to add a reference to the NuGet packages `Microsoft.CodeAnalysis.CSharp`
    and `Microsoft.CodeAnalysis.Analyzers` in that library. We also need to make sure
    that our .`csproj` file has `<LangVersion>latest</LangVersion>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a source generator, we need to create a class that has two things:'
  prefs: []
  type: TYPE_NORMAL
- en: It needs to have the `[Generator]` attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It needs to implement `ISourceGenerator`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The template code should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the `Initialize` method, we add any initialization that may be needed; and
    in the `Execute` method, we write the generated code.
  prefs: []
  type: TYPE_NORMAL
- en: The generator we are building now is, of course, a silly example, but it also
    shows some of the power of source generators.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Execute` method, we add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: It will take the code in the source variable and save it as `GeneratedService.g.cs`.
    We also use raw string literals in this file – the feature in .NET7 I have been
    the most excited about. By adding three double quotes, we don’t need to escape
    the string; we are free to add more double quotes inside of the string. If you
    want to escape more than three double quotes, you can add more at the start and
    end.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a source generator to our project, we can add the project like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: When we compile our project, the `GeneratedService` will be generated, and we
    can use the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can inject the service and use it inside of our components:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Don’t forget to add it to `Program.cs` as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The example above isn’t really how you would use it in a real-world scenario,
    but I wanted to show that it is not that tricky to get started.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes the Visual Studio editor won’t pick up these generated files, and
    we will see some red squiggles in the code editor. This is because the order of
    the source generators (there is no guaranteed order) will result in these problems,
    especially when combining source generators with other classes that are also generated,
    like .`razor` files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at some of the source generators we can use
    in our projects.
  prefs: []
  type: TYPE_NORMAL
- en: Community projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Source generators have been around since .NET5/6, and there are a lot of community/open-source
    projects we can use in our projects. Let’s explore them in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: InterfaceGenerator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already talked about `InterfaceGenerator`. Generating interfaces without
    having to write the same thing twice will save time and help you avoid problems,
    especially if you use interfaces only for testing.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can find it here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/daver32/InterfaceGenerator](https://github.com/daver32/InterfaceGenerator)'
  prefs: []
  type: TYPE_NORMAL
- en: Blazorators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: David Pine, with many contributors, has built Blazorators, which can take a
    TypeScript definition file and generate JavaScript interop ready to be used in
    any Blazor project. Blazorators take away a lot of the pain points when writing
    JavaScript interop.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out his project here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/IEvangelist/blazorators](https://github.com/IEvangelist/blazorators)'
  prefs: []
  type: TYPE_NORMAL
- en: C# source generators
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Amadeusz Sadowski, with many contributors, has made an impressive list of where
    to find more information on source generators and some outstanding ones. You can
    find this fantastic resource here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/amis92/csharp-source-generators](https://github.com/amis92/csharp-source-generators)'
  prefs: []
  type: TYPE_NORMAL
- en: Roslyn SDK samples
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Microsoft has added some samples to their Roslyn SDK repository. It’s a great
    start to dig a bit deeper into source generators. You can find the samples here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators](https://github.com/dotnet/roslyn-sdk/tree/main/samples/CSharp/SourceGenerators)'
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Learn
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Microsoft Learn is an excellent source for learning anything C# related, and
    source generators are no exception.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you think, just like me, that source generators sound like the best thing
    since sliced bread, I recommend that you dive into the documentation found at
    Microsoft Learn:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview](https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at code that writes code to save time and reduce
    repetitive tasks.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor uses source generators to convert razor code into C# code, so, indirectly,
    we are using them all the time.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at Blazor Hybrid by visiting .NET MAUI.
  prefs: []
  type: TYPE_NORMAL
