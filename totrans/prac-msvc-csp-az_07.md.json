["```cs\nazd init\nazd up\n```", "```cs\ndotnet new webapi -o ConfigurationPrototype\n```", "```cs\n    builder.Configuration.AddJsonFile(\"connectionstrings.json\", optional: true);\n    ```", "```cs\n    {\n    ```", "```cs\n      \"ConnectionStrings\": {\n    ```", "```cs\n        \"GamesSqlServerConnection\": \"server=(localdb)\\\\mssqllocaldb;database=CodebreakerGames;trusted_connection=true\"\n    ```", "```cs\n      }\n    ```", "```cs\n    }\n    ```", "```cs\n    ConnectionStrings:GamesSqlServerConnection = \"the new connection string\"\n    ```", "```cs\n    cd ConfigurationPrototype\n    ```", "```cs\n    UserSecretsId to the project file and uses a unique identifier to reference the corresponding secrets from the user profile.To add a secret, use this command:\n\n    ```", "```cs\n\n    ```", "```cs\n{\n  \"Logging\": {\n    \"LogLevel\": {\n      \"Default\": \"Information\",\n      \"Microsoft.AspNetCore\": \"Warning\"\n    }\n  },\n  \"AllowedHosts\": \"*\",\n  \"Config1\": \"config 1 value\",\n  \"Service1\": {\n    \"Config1\": \"config 1 value\",\n    \"Config2\": \"config 2 value\"\n  }\n}\n```", "```cs\napp.MapGet(\"/readconfig\", (IConfiguration config) =>\n{\n  string? config1 = config[\"Config1\"];\n  return $\"config1: {config1}\";\n});\n```", "```cs\ninternal class Service1Options\n{\n  public required string Config1 { get; set; }\n  public string? Config2 { get; set; }\n}\n```", "```cs\nbuilder.Services.Configure<Service1Options>(\n  builder.Configuration.GetSection(\"Service1\"));\n```", "```cs\napp.MapGet(\"/readoptions\", (IOptions<Service1Options> options) =>\n{\n  return $\"options - config1: {options.Value.Config1}; config 2: \n    {options.Value.Config2}\";\n});\n```", "```cs\nif (app.Environment.IsDevelopment())\n{\n  // code removed for brevity\n}\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nvar appConfig = builder.AddAzureAppConfiguration(\"codebreakerconfig\")\n  .WithParameter(\"sku\", \"Standard\");\nbuilder.AddProject<Projects.ConfigurationPrototype>(\"configurationprototype\")\n  .WithReference(appConfig);\n// code removed for brevity\n```", "```cs\n{\n  \"Azure\": {\n    \"SubscriptionId\": \"<enter your subscription id>\",\n    \"Location\": \"westeurope\"\n    \"CredentialSource\": \"AzureCli\"\n  }\n}\n```", "```cs\ndotnet new worker -o Codebreaker.InitializeAppConfig\n```", "```cs\n<PropertyGroup>\n  <IsPublishable>true</IsPublishable>\n  <EnableSdkContainerSupport>true</EnableSdkContainerSupport>\n</PropertyGroup>\n```", "```cs\npublic class AppConfigInitializer(ConfigurationClient configurationClient, IHostApplicationLifetime hostApplicationLifetime, ILogger<AppConfigInitializer> logger) : BackgroundService\n{\n  private Dictionary<string, string> s_6x4Colors = new()\n  {\n    { \"color1\", \"Red\" },\n    { \"color2\", \"Green\" },\n    { \"color3\", \"Blue\" },\n    { \"color4\", \"Yellow\" },\n    { \"color5\", \"Orange\" },\n    { \"color6\", \"Purple\" }\n  };\n  protected override async Task ExecuteAsync(CancellationToken \n    stoppingToken)\n  {\n    foreach ((string key, string color) in s_6x4Colors)\n    {\nConfigurationSetting setting = new($\"GameAPIs.Game6x4.{key}\", \n        color);\n      await configurationClient.AddConfigurationSettingAsync(setting);\nlogger.LogInformation(\"added setting for key {key}\", key);\n    }\n  }\n}\n```", "```cs\nusing Codebreaker.InitalizeAppConfig;\nusing Microsoft.Extensions.Azure;\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.AddServiceDefaults();\nbuilder.Services.AddHostedService<AppConfigInitializer>();\nbuilder.Services.AddAzureClients(clients =>\n{\n  string appConfigUrl = builder.Configuration.\n  GetConnectionString(\"codebreakerconfig\") ??\nthrow new InvalidOperationException(\"codebreakerconfig not \n    configured\");\n  clients.AddConfigurationClient(new Uri(appConfigUrl));\n});\nvar host = builder.Build();\nhost.Run();\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Configuration.AddAzureAppConfiguration(appConfigOptions =>\n{\n  DefaultAzureCredential cred = new();\n  string appConfigUrl = builder.Configuration.\n    GetConnectionString(\"codebreakerconfig\") ??\n    throw new InvalidOperationException(\"could not read \n    codebreakerconfig\");\n  appConfigOptions.Connect(new Uri(appConfigUrl), cred);\n});\n// the code from the repository also includes the Key Vault configuration added later\n```", "```cs\napp.MapGet(\"/azureconfig\", (IConfiguration config) =>\n{\n  string? connectionString = config.\n    GetSection(\"ConfigurationPrototype\")\n    .GetConnectionString(\"SqlServer\");\n  return $\"Configuration value from Azure App Configuration: \n    {connectionString}\";\n});\n```", "```cs\nvar appConfig = builder.AddAzureAppConfiguration(\"codebreakerconfig\");\nvar keyVault = builder.AddAzureKeyVault(\"codebreakervault\");\nbuilder.AddProject<Projects.ConfigurationPrototype>(\"configurationprototype\")\n  .WithReference(appConfig)\n  .WithReference(keyVault);\n```", "```cs\nbuilder.Configuration.AddAzureAppConfiguration(appConfigOptions =>\n{\n  DefaultAzureCredentialOptions credentialOptions = new();\n  DefaultAzureCredential cred = new();\n  string appConfigUrl = builder.Configuration.\nGetConnectionString(\"codebreakerconfig\") ?? throw new \nInvalidOperationException(\"could not read codebreakerconfig\");\n  appConfigOptions.Connect(new Uri(appConfigUrl), cred)\n    .ConfigureKeyVault(keyVaultOptions =>\n    {\n      keyVaultOptions.SetCredential(cred);\n    });\n});\n```", "```cs\napp.MapGet(\"/secret\", (IConfiguration config) =>\n{\n  string? connectionString = config.\nGetSection(\"ConfigurationPrototype\").GetConnectionString(\"Cosmos\");\n  return $\"Configuration value from Azure Key Vault via App \nConfiguration: {connectionString}\";\n});\n```", "```cs\nbuilder.Configuration.AddAzureAppConfiguration(appConfigOptions =>\n{\n#if DEBUG\n  DefaultAzureCredential credential = new();\n#else\n  string managedIdentityClientId = builder.Configuration[\"AZURE_\n    CLIENT_ID\"] ?? string.Empty;\n  DefaultAzureCredentialOptions credentialOptions = new()\n  {\n    ManagedIdentityClientId = managedIdentityClientId,\n    ExcludeEnvironmentCredential = true,\n    ExcludeWorkloadIdentitiyCredential = true\n  };\n  DefaultAzureCredential credential = new(credentialOptions);\n#endif\n  string appConfigUrl = builder.Configuration.\nGetConnectionString(\"codebreakerconfig\") ??\n    throw new InvalidOperationException(\"could not read \ncodebreakerconfig\");\n  appConfigOptions.Connect(new Uri(appConfigUrl), credential)\n    .Select(\"ConfigurationPrototype*\")\n    .ConfigureKeyVault(keyVaultOptions =>\n    {\n      keyVaultOptions.SetCredential(cred);\n    });\n});\n```", "```cs\nbuilder.Configuration.AddAzureAppConfiguration(options =>\n{\n  options.Connect(new Uri(endpoint), credential)\n    .Select(\"BotService*\", labelFilter: LabelFilter.Null)\n    .Select(\"BotService*\", builder.Environment.EnvironmentName);\n});\n```"]