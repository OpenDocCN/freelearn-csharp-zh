["```cs\npublic class BikeController\n{\n  ....  \n    switch (state)\n    {\n        case StopState:\n            ...\n            break;\n        case StarState:\n            ...\n            break;\n        case TurnState:\n            ...\n            break;\n}\n```", "```cs\nnamespace Chapter.State\n{\n    public interface IBikeState\n    {\n        void Handle(BikeController controller);\n    }\n}\n```", "```cs\nnamespace Chapter.State\n{\n    public class BikeStateContext\n    {\n        public IBikeState CurrentState\n        {\n            get; set;\n        }\n\n        private readonly BikeController _bikeController;\n\n        public BikeStateContext(BikeController bikeController)\n        {\n            _bikeController = bikeController;\n        }\n\n        public void Transition()\n        {\n            CurrentState.Handle(_bikeController);\n        }\n\n        public void Transition(IBikeState state)\n        {\n            CurrentState = state;\n            CurrentState.Handle(_bikeController);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.State {\n    public class BikeController : MonoBehaviour {\n\n        public float maxSpeed = 2.0f;\n        public float turnDistance = 2.0f;\n\n        public float CurrentSpeed { get; set; }\n\n        public Direction CurrentTurnDirection {\n            get; private set;\n        }\n\n        private IBikeState \n            _startState, _stopState, _turnState;\n\n        private BikeStateContext _bikeStateContext;\n\n        private void Start() {\n            _bikeStateContext = \n                new BikeStateContext(this);\n\n            _startState = \n                gameObject.AddComponent<BikeStartState>();\n            _stopState = \n                gameObject.AddComponent<BikeStopState>();\n            _turnState = \n                gameObject.AddComponent<BikeTurnState>();\n\n            _bikeStateContext.Transition(_stopState);\n        }\n\n        public void StartBike() {\n            _bikeStateContext.Transition(_startState);\n        }\n\n        public void StopBike() {\n            _bikeStateContext.Transition(_stopState);\n        }\n\n        public void Turn(Direction direction) {\n            CurrentTurnDirection = direction;\n            _bikeStateContext.Transition(_turnState);\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.State\n{\n    public class BikeStopState : MonoBehaviour, IBikeState\n    {\n        private BikeController _bikeController;\n\n        public void Handle(BikeController bikeController)\n        {\n            if (!_bikeController)\n                _bikeController = bikeController;\n\n            _bikeController.CurrentSpeed = 0;\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.State\n{\n    public class BikeStartState : MonoBehaviour, IBikeState\n    {\n        private BikeController _bikeController;\n\n        public void Handle(BikeController bikeController)\n        {\n            if (!_bikeController)\n                _bikeController = bikeController;\n\n            _bikeController.CurrentSpeed = \n                _bikeController.maxSpeed;\n        }\n\n        void Update()\n        {\n            if (_bikeController)\n            {\n                if (_bikeController.CurrentSpeed > 0)\n                {\n                    _bikeController.transform.Translate(\n                        Vector3.forward * (\n                            _bikeController.CurrentSpeed * \n                            Time.deltaTime));\n                }\n            }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.State\n{\n    public class BikeTurnState : MonoBehaviour, IBikeState\n    {\n        private Vector3 _turnDirection;\n        private BikeController _bikeController;\n\n        public void Handle(BikeController bikeController)\n        {\n            if (!_bikeController)\n                _bikeController = bikeController;\n\n            _turnDirection.x = \n                (float) _bikeController.CurrentTurnDirection;\n\n            if (_bikeController.CurrentSpeed > 0)\n            {\n                transform.Translate(_turnDirection *\n                                    _bikeController.turnDistance);\n            }\n        }\n    }\n}\n```", "```cs\nnamespace Chapter.State\n{\n public enum Direction\n {\n Left = -1,\n Right = 1\n }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.State\n{\n    public class ClientState : MonoBehaviour\n    {\n        private BikeController _bikeController;\n\n        void Start()\n        {\n            _bikeController =\n                (BikeController)\n                FindObjectOfType(typeof(BikeController));\n        }\n\n        void OnGUI() \n        {\n            if (GUILayout.Button(\"Start Bike\"))\n                _bikeController.StartBike();\n\n            if (GUILayout.Button(\"Turn Left\"))\n                _bikeController.Turn(Direction.Left);\n\n            if (GUILayout.Button(\"Turn Right\"))\n                _bikeController.Turn(Direction.Right);\n\n            if (GUILayout.Button(\"Stop Bike\"))\n                _bikeController.StopBike();\n        }\n    }\n}\n```"]