["```cs\npublic class MyListOption\n{\n    public int ItemsPerPage { get; set; }\n}\n```", "```cs\npublic class MyListOption\n{\n    public int ItemsPerPage { get; set; } = 20;\n}\n```", "```cs\nnamespace CommonScenarios;\npublic class MyOptions\n{\n    public string? Name { get; set; }\n}\n```", "```cs\nbuilder.Services.Configure<MyOptions>(myOptions =>\n{\n    myOptions.Name = \"Default Option\";\n});\n```", "```cs\nvar defaultOptionsSection = builder.Configuration\n    .GetSection(\"defaultOptions\");\nbuilder.Services\n    .Configure<MyOptions>(defaultOptionsSection);\n```", "```cs\n{\n  \"defaultOptions\": {\n    \"name\": \"Default Options\"\n  }\n}\n```", "```cs\nvar options = new MyOptions();\nbuilder.Configuration.GetSection(\"options1\").Bind(options);\n```", "```cs\nbuilder.Services.AddOptions<MyOptions>(\"Options3\")\n    .Bind(builder.Configuration.GetSection(\"options3\"));\n```", "```cs\nbuilder.Services.AddOptions<MyOptions>(\"Options4\")\n    .BindConfiguration(\"options4\");\n```", "```cs\napp.MapGet(\n    \"/my-options/\",\n    (IOptions<MyOptions> options) => options.Value\n);\n```", "```cs\n{\n  \"name\": \"Default Options\"\n}\n```", "```cs\n{\n  \"defaultOptions\": {\n    \"name\": \"Default Options\"\n  },\n  \"options1\": {\n    \"name\": \"Options 1\"\n  },\n  \"options2\": {\n    \"name\": \"Options 2\"\n  }\n}\n```", "```cs\nbuilder.Services.Configure<MyOptions>(\n    \"Options1\",\n    builder.Configuration.GetSection(\"options1\")\n);\nbuilder.Services.Configure<MyOptions>(\n    \"Options2\",\n    builder.Configuration.GetSection(\"options2\")\n);\n```", "```cs\napp.MapGet(\n    \"/factory/{name}\",\n    (string name, IOptionsFactory<MyOptions> factory)\n        => factory.Create(name)\n);\n```", "```cs\nGET https://localhost:8001/factory/Options1\n```", "```cs\n{\n  \"name\": \"Options 1\"\n}\n```", "```cs\n{\n  \"name\": \"Options 2\"\n}\n```", "```cs\napp.MapGet(\n    \"/monitor/{name}\",\n    (string name, IOptionsMonitor<MyOptions> monitor)\n        => monitor.Get(name)\n);\n```", "```cs\nGET https://localhost:8001/monitor/Options2\n```", "```cs\n{\n  \"name\": \"Options 2\"\n}\n```", "```cs\napp.MapGet(\n    \"/monitor\",\n    (IOptionsMonitor<MyOptions> monitor)\n        => monitor.CurrentValue\n);\n```", "```cs\n{\n  \"name\": \"Default Options\"\n}\n```", "```cs\napp.MapGet(\n    \"/snapshot\",\n    (IOptionsSnapshot<MyOptions> snapshot)\n        => snapshot.Value\n);\n```", "```cs\n{\n  \"name\": \"Default Options\"\n}\n```", "```cs\napp.MapGet(\n    \"/snapshot/{name}\",\n    (string name, IOptionsSnapshot<MyOptions> snapshot)\n        => snapshot.Get(name)\n);\n```", "```cs\n{\n  \"name\": \"Options 1\"\n}\n```", "```cs\nnamespace CommonScenarios.Reload;\npublic class EmailOptions\n{\n    public string? SenderEmailAddress { get; set; }\n}\n```", "```cs\nnamespace CommonScenarios.Reload;\npublic class NotificationService\n{\n    private EmailOptions _emailOptions;\n    private readonly ILogger _logger;\n    public NotificationService(IOptionsMonitor<EmailOptions> emailOptionsMonitor, ILogger<NotificationService> logger)\n    {\n        _logger = logger ?? throw new ArgumentNullException(nameof(logger));\n        ArgumentNullException.ThrowIfNull(emailOptionsMonitor);\n        _emailOptions = emailOptionsMonitor.CurrentValue;\n    }\n    public Task NotifyAsync(string to)\n    {\n        _logger.LogInformation(\n            \"Notification sent by '{SenderEmailAddress}' to '{to}'.\", \n            _emailOptions.SenderEmailAddress, \n            to\n        );\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\npublic static WebApplicationBuilder AddNotificationService(\n    this WebApplicationBuilder builder)\n{\n    builder.Services.Configure<EmailOptions>(builder.Configuration\n        .GetSection(nameof(EmailOptions)));\n    builder.Services.AddSingleton<NotificationService>();\n    return builder;\n}\n```", "```cs\nemailOptionsMonitor.OnChange((options) =>_emailOptions = options);\n```", "```cs\nnamespace OptionsConfiguration;\npublic class ConfigureMeOptions\n{\n    public string? Title { get; set; }\n    public IEnumerable<string> Lines { get; set; } = Enumerable.Empty<string>();\n}\n```", "```cs\n{\n  \"configureMe\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\"\n    ]\n  }\n}\n```", "```cs\napp.MapGet(\n    \"/configure-me\",\n    (IOptionsMonitor<ConfigureMeOptions> options) => new {\n        DefaultInstance = options.CurrentValue,\n        NamedInstance = options.Get(NamedInstance)\n    }\n);\n```", "```cs\nconst string NamedInstance = \"MyNamedInstance\";\nbuilder.Services\n    .Configure<ConfigureMeOptions>(builder.Configuration\n        .GetSection(\"configureMe\"))\n    .Configure<ConfigureMeOptions>(NamedInstance, builder.Configuration\n        .GetSection(\"configureMe\"))\n;\n```", "```cs\n{\n  \"defaultInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\"\n    ]\n  },\n  \"namedInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\"\n    ]\n  }\n}\n```", "```cs\nnamespace OptionsConfiguration;\npublic class ConfigureAllConfigureMeOptions : IConfigureNamedOptions<ConfigureMeOptions>\n{\n    public void Configure(string? name, ConfigureMeOptions options)\n    {\n        options.Lines = options.Lines.Append(\n            $\"ConfigureAll:Configure name: {name}\");\n        if (name != Options.DefaultName)\n        {\n            options.Lines = options.Lines.Append(\n                $\"ConfigureAll:Configure Not Default: {name}\");\n        }\n    }\n    public void Configure(ConfigureMeOptions options)\n        => Configure(Options.DefaultName, options);\n}\n```", "```cs\nbuilder.Services.AddSingleton<IConfigureOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>();\n```", "```cs\n{\n  \"defaultInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: \"\n    ]\n  },\n  \"namedInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: MyNamedInstance\",\n      \"ConfigureAll:Configure Not Default: MyNamedInstance\"\n    ]\n  }\n}\n```", "```cs\nnamespace OptionsConfiguration;\npublic class ConfigureAllConfigureMeOptions :\n    IPostConfigureOptions<ConfigureMeOptions>,\n    IConfigureNamedOptions<ConfigureMeOptions>\n{\n    // Omitted previous code\n    public void PostConfigure(string? name, ConfigureMeOptions options)\n    {\n        options.Lines = options.Lines.Append(\n            $\"ConfigureAll:PostConfigure name: {name}\");\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<IPostConfigureOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>();\n```", "```cs\n{\n  \"defaultInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: \",\n      \"ConfigureAll:PostConfigure name: \"\n    ]\n  },\n  \"namedInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: MyNamedInstance\",\n      \"ConfigureAll:Configure Not Default: MyNamedInstance\",\n      \"ConfigureAll:PostConfigure name: MyNamedInstance\"\n    ]\n  }\n}\n```", "```cs\nbuilder.Services\n    .AddSingleton<IPostConfigureOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>()\n    .Configure<ConfigureMeOptions>(builder.Configuration\n        .GetSection(\"configureMe\"))\n    .Configure<ConfigureMeOptions>(NamedInstance, builder.Configuration\n        .GetSection(\"configureMe\"))\n    .AddSingleton<IConfigureOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>()\n;\n```", "```cs\nnamespace OptionsConfiguration;\npublic class ConfigureMoreConfigureMeOptions : IConfigureOptions<ConfigureMeOptions>\n{\n    public void Configure(ConfigureMeOptions options)\n    {\n        options.Lines = options.Lines.Append(\"ConfigureMore:Configure\");\n    }\n}\n```", "```cs\nbuilder.Services.AddSingleton<IConfigureOptions<ConfigureMeOptions>, ConfigureMoreConfigureMeOptions>();\n```", "```cs\n{\n  \"defaultInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: \",\n      \"ConfigureMore:Configure\",\n      \"ConfigureAll:PostConfigure name: \"\n    ]\n  },\n  \"namedInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: MyNamedInstance\",\n      \"ConfigureAll:Configure Not Default: MyNamedInstance\",\n      \"ConfigureAll:PostConfigure name: MyNamedInstance\"\n    ]\n  }\n}\n```", "```cs\nconst string NamedInstance = \"MyNamedInstance\";\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.PostConfigure<ConfigureMeOptions>(\n    NamedInstance,\n    x => x.Lines = x.Lines.Append(\"Inline PostConfigure Before\")\n);\nbuilder.Services\n    .AddSingleton<IPostConfigureOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>()\n    .Configure<ConfigureMeOptions>(builder.Configuration\n        .GetSection(\"configureMe\"))\n    .Configure<ConfigureMeOptions>(NamedInstance, builder.Configuration\n        .GetSection(\"configureMe\"))\n    .AddSingleton<IConfigureOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>()\n    //.AddSingleton<IConfigureNamedOptions<ConfigureMeOptions>, ConfigureAllConfigureMeOptions>()\n    .AddSingleton<IConfigureOptions<ConfigureMeOptions>, ConfigureMoreConfigureMeOptions>()\n;\nbuilder.Services.PostConfigure<ConfigureMeOptions>(\n    NamedInstance,\n    x => x.Lines = x.Lines.Append(\"Inline PostConfigure After\")\n);\n// ...\n```", "```cs\n{\n  \"defaultInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: \",\n      \"ConfigureMore:Configure\",\n      \"ConfigureAll:PostConfigure name: \"\n    ]\n  },\n  \"namedInstance\": {\n    \"title\": \"Configure Me!\",\n    \"lines\": [\n      \"appsettings.json\",\n      \"ConfigureAll:Configure name: MyNamedInstance\",\n      \"ConfigureAll:Configure Not Default: MyNamedInstance\",\n      \"Inline PostConfigure Before\",\n      \"ConfigureAll:PostConfigure name: MyNamedInstance\",\n      \"Inline PostConfigure After\"\n    ]\n  }\n}\n```", "```cs\nbuilder.Services.AddOptions<ConfigureMeOptions>().Validate(options =>\n{\n    // Validate was not intended for this, but it works nonetheless...\n    options.Lines = options.Lines.Append(\"Inline Validate\");\n    return true;\n});\n```", "```cs\nservices.AddOptions<Options>()\n    .Configure(o => /* Omitted configuration code */)\n    .ValidateOnStart()\n;\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\nusing System.ComponentModel.DataAnnotations;\nusing Xunit;\nnamespace OptionsValidation;\npublic class ValidateOptionsWithDataAnnotations\n{\n    [Fact]\n    public void Should_pass_validation() { /*omitted*/ }\n    [Fact]\n    public void Should_fail_validation() { /*omitted*/ }\n    private class Options\n    {\n        [Required]\n        public string? MyImportantProperty { get; set; }\n    }\n}\n```", "```cs\n[Fact]\npublic void Should_pass_validation()\n{\n    // Arrange\n    var services = new ServiceCollection();\n    services.AddOptions<Options>()\n        .Configure(o => o.MyImportantProperty = \"A value\")\n        .ValidateDataAnnotations()\n        .ValidateOnStart() // eager validation \n    ;\n    var serviceProvider = services.BuildServiceProvider();\n    var options = serviceProvider\n        .GetRequiredService<IOptionsMonitor<Options>>();\n    // Act & Assert\n    Assert.Equal(\n        \"Some important value\",\n        options.CurrentValue.MyImportantProperty\n    );\n}\n```", "```cs\n[Fact]\npublic void Should_fail_validation()\n{\n    // Arrange\n    var services = new ServiceCollection();\n    services.AddOptions<Options>()\n        .ValidateDataAnnotations()\n        .ValidateOnStart() // eager validation \n    ;\n    var serviceProvider = services.BuildServiceProvider();\n        // Act & Assert\n        var error = Assert.Throws<OptionsValidationException>(\n            () => options.CurrentValue);\n        Assert.Collection(error.Failures,\n            f => Assert.Equal(\"DataAnnotation validation failed for 'Options' members: 'MyImportantProperty' with the error: 'The MyImportantProperty field is required.'.\", f)\n        );\n    );\n}\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\nusing Xunit;\nnamespace OptionsValidation;\npublic class ValidateOptionsWithTypes\n{\n    [Fact]\n    public void Should_pass_validation() {}\n    [Fact]\n    public void Should_fail_validation() {}\n    private class Options\n    {\n        public string? MyImportantProperty { get; set; }\n    }\n    private class OptionsValidator : IValidateOptions<Options>\n    {\n        public ValidateOptionsResult Validate(\n            string name, Options options)\n        {\n            if (string.IsNullOrEmpty(options.MyImportantProperty))\n            {\n                return ValidateOptionsResult.Fail(\n                    \"'MyImportantProperty' is required.\");\n            }\n            return ValidateOptionsResult.Success;\n        }\n    }\n}\n```", "```cs\n[Fact]\npublic void Should_pass_validation()\n{\n    // Arrange\n    var services = new ServiceCollection();\n    services.AddSingleton<IValidateOptions<Options>, OptionsValidator>();\n    services.AddOptions<Options>()\n        .Configure(o => o.MyImportantProperty = \"A value\")\n        .ValidateOnStart()\n    ;\n    var serviceProvider = services.BuildServiceProvider();\n    // Act & Assert\n    var options = serviceProvider\n        .GetRequiredService<IOptionsMonitor<Options>>();\n    Assert.Equal(\n        \"A value\",\n        options.CurrentValue.MyImportantProperty\n    );\n}\n```", "```cs\n[Fact]\npublic void Should_fail_validation()\n{\n    // Arrange\n    var services = new ServiceCollection();\n    services.AddSingleton<IValidateOptions<Options>, OptionsValidator>();\n    services.AddOptions<Options>().ValidateOnStart();\n    var serviceProvider = services.BuildServiceProvider();\n    // Act & Assert\n    var options = serviceProvider\n        .GetRequiredService<IOptionsMonitor<Options>>();\n    var error = Assert.Throws<OptionsValidationException>(\n        () => options.CurrentValue);\n    Assert.Collection(error.Failures,\n        f => Assert.Equal(\"'MyImportantProperty' is required.\", f)\n    );\n}\n```", "```cs\npublic class MyOptions\n{\n    public string? Name { get; set; }\n}\n```", "```cs\npublic class MyOptionsValidator : AbstractValidator<MyOptions>\n{\n    public MyOptionsValidator()\n    {\n        RuleFor(x => x.Name).NotEmpty();\n    }\n}\n```", "```cs\npublic class FluentValidateOptions<TOptions> : IValidateOptions<TOptions>\n    where TOptions : class\n{\n    private readonly IValidator<TOptions> _validator;\n    public FluentValidateOptions(IValidator<TOptions> validator)\n    {\n        _validator = validator;\n    }\n    public ValidateOptionsResult Validate(string name, TOptions options)\n    {\n        var validationResult = _validator.Validate(options);\n        if (validationResult.IsValid)\n        {\n            return ValidateOptionsResult.Success;\n        }\n        var errorMessages = validationResult.Errors.Select(x => x.ErrorMessage);\n        return ValidateOptionsResult.Fail(errorMessages);\n    }\n}\n```", "```cs\nusing FluentValidation;\nusing Microsoft.Extensions.Options;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services\n    .AddSingleton<IValidator<MyOptions>, MyOptionsValidator>()\n    .AddSingleton<IValidateOptions<MyOptions>, FluentValidateOptions<MyOptions>>()\n;\nbuilder.Services\n    .AddOptions<MyOptions>()\n    .ValidateOnStart()\n;\nvar app = builder.Build();\napp.MapGet(\"/\", () => \"Hello World!\");\napp.Run();\n```", "```cs\nHosting failed to start\nUnhandled exception. Microsoft.Extensions.Options.OptionsValidationException: 'Name' must not be empty.\n[...]\n```", "```cs\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Options;\nusing Xunit;\nnamespace OptionsValidation;\npublic class ByPassingInterfaces\n{\n    [Fact]\n    public void Should_support_any_scope() { /*...*/ }\n    private class Options\n    {\n        public string? Name { get; set; }\n    }\n}\n```", "```cs\n[Fact]\npublic void Should_support_any_scope()\n{\n    // Arrange\n    var services = new ServiceCollection();\n    services.AddOptions<Options>()\n        .Configure(o => o.Name = \"John Doe\");\n    services.AddScoped(serviceProvider => {\n        var snapshot = serviceProvider\n            .GetRequiredService<IOptionsSnapshot<Options>>();\n        return snapshot.Value;\n    });\n    var serviceProvider = services.BuildServiceProvider();\n    // Act & Assert\n    using var scope1 = serviceProvider.CreateScope();\n    var options1 = scope1.ServiceProvider.GetService<Options>();\n    var options2 = scope1.ServiceProvider.GetService<Options>();\n    Assert.Same(options1, options2);\n    using var scope2 = serviceProvider.CreateScope();\n    var options3 = scope2.ServiceProvider.GetService<Options>();\n    Assert.NotSame(options2, options3);\n}\n```", "```cs\nusing Microsoft.Extensions.Options;\nnamespace CentralizingConfiguration;\npublic class ProxyOptions : IConfigureOptions<ProxyOptions>, IValidateOptions<ProxyOptions>\n{\n    public static readonly int DefaultCacheTimeInSeconds = 60;\n    public string? Name { get; set; }\n    public int CacheTimeInSeconds { get; set; }\n    void IConfigureOptions<ProxyOptions>.Configure(\n        ProxyOptions options)\n    {\n        options.CacheTimeInSeconds = DefaultCacheTimeInSeconds;\n    }\n    ValidateOptionsResult IValidateOptions<ProxyOptions>.Validate(\n        string? name, ProxyOptions options)\n    {\n        if (string.IsNullOrWhiteSpace(options.Name))\n        {\n            return ValidateOptionsResult.Fail(\n                \"The 'Name' property is required.\");\n        }\n        return ValidateOptionsResult.Success;\n    }\n}\n```", "```cs\nValidateOptionsResult IValidateOptions<ProxyOptions>.Validate(...)\n```", "```cs\nbuilder.Services\n    .AddSingleton<IConfigureOptions<ProxyOptions>, ProxyOptions>()\n    .AddSingleton<IValidateOptions<ProxyOptions>, ProxyOptions>()\n    .AddSingleton(sp => sp\n        .GetRequiredService<IOptions<ProxyOptions>>()\n        .Value\n    )\n    .Configure<ProxyOptions>(options \n        => options.Name = \"High-speed proxy\")\n    .AddOptions<ProxyOptions>()\n    .ValidateOnStart()\n;\n```", "```cs\napp.MapGet(\"/\", (ProxyOptions options) => options);\n```", "```cs\n{\n  \"name\": \"High-speed proxy\",\n  \"cacheTimeInSeconds\": 60\n}\n```", "```cs\n<PropertyGroup>\n  <EnableConfigurationBindingGenerator>true</EnableConfigurationBindingGenerator>\n</PropertyGroup>\n```", "```cs\nnamespace ConfigurationGenerators;\npublic class MyOptions\n{\n    public string? Name { get; set; }\n}\n```", "```cs\nbuilder.Services\n    .AddOptions<MyOptions>()\n    .BindConfiguration(\"MyOptions\")\n;\n```", "```cs\nusing System.ComponentModel.DataAnnotations;\nnamespace ConfigurationGenerators;\npublic class MyOptions\n{\n    [Required]\n    public string? Name { get; set; }\n}\n```", "```cs\nusing Microsoft.Extensions.Options;\nnamespace ConfigurationGenerators;\n[OptionsValidator]\npublic partial class MyOptionsValidator : IValidateOptions<MyOptions>\n{\n}\n```", "```cs\nbuilder.Services.AddSingleton<IValidateOptions<MyOptions>, MyOptionsValidator>();\n```", "```cs\n{\n  \"MyOptions\": {\n    \"Name\": \"Options name\"\n  }\n}\n```", "```cs\nbuilder.Services\n    .AddOptions<MyOptions>(\"valid\")\n    .BindConfiguration(\"MyOptions\")\n    .ValidateOnStart()\n;\n```", "```cs\n{\n  \"name\": \"Options name\"\n}\n```", "```cs\nbuilder.Services\n    .AddOptions<MyOptions>(\"invalid\")\n    .BindConfiguration(\"MissingSection\")\n    .ValidateOnStart() \n;\n```", "```cs\nHosting failed to start\nMicrosoft.Extensions.Options.OptionsValidationException: Name: The invalid.Name field is required.\n```", "```cs\nnamespace ValidateOptionsResultBuilder;\npublic class MyOptions\n{\n    public string? Prop1 { get; set; }\n    public string? Prop2 { get; set; }\n}\n```", "```cs\nusing Microsoft.Extensions.Options;\nnamespace ValidateOptionsResultBuilder;\npublic class SimpleMyOptionsValidator : IValidateOptions<MyOptions>\n{\n    public ValidateOptionsResult Validate(string? name, MyOptions options)\n    {\n        var builder = new Microsoft.Extensions.Options.ValidateOptionsResultBuilder();\n        if (string.IsNullOrEmpty(options.Prop1))\n        {\n            builder.AddError(\n                \"The value cannot be empty.\",\n                nameof(options.Prop1)\n            );\n        }\n        if (string.IsNullOrEmpty(options.Prop2))\n        {\n            builder.AddError(\n                \"The value cannot be empty.\",\n                nameof(options.Prop2)\n            );\n        }\n        return builder.Build();\n    }\n}\n```", "```cs\nusing ValidateOptionsResultBuilder;\nusing Microsoft.Extensions.Options;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services\n    .AddSingleton<IValidateOptions<MyOptions>, SimpleMyOptionsValidator>()\n    .AddOptions<MyOptions>(\"simple\")\n    .BindConfiguration(\"SimpleMyOptions\")\n    .ValidateOnStart()\n;\nvar app = builder.Build();\napp.MapGet(\"/\", (IOptionsFactory<MyOptions> factory) => new\n{\n    simple = factory.Create(\"simple\")\n});\napp.Run();\n```", "```cs\nHosting failed to start\nMicrosoft.Extensions.Options.OptionsValidationException: Property Prop1: The value cannot be empty.; Property Prop2: The value cannot be empty.\n```", "```cs\nusing Microsoft.Extensions.Options;\nnamespace ValidateOptionsResultBuilder;\npublic class ClassicMyOptionsValidator : IValidateOptions<MyOptions>\n{\n    public ValidateOptionsResult Validate(string? name, MyOptions options)\n    {\n        if (string.IsNullOrEmpty(options.Prop1))\n        {\n            return ValidateOptionsResult.Fail(\n                $\"Property {nameof(options.Prop1)}: The value cannot be empty.\"\n            );\n        }\n        if (string.IsNullOrEmpty(options.Prop2))\n        {\n            return ValidateOptionsResult.Fail(\n                $\"Property {nameof(options.Prop2)}: The value cannot be empty.\"\n            );\n        }\n        return ValidateOptionsResult.Success;\n    }\n}\n```"]