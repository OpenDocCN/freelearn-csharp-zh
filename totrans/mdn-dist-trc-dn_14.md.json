["```cs\npublic static void ConfigureTelemetry(\n  this WebApplicationBuilder builder,\n  MemesTelemetryConfiguration config)\n{\n  var resourceBuilder = GetResourceBuilder(config);\n  var sampler = GetSampler(config.SamplingStrategy,\n    config.SamplingProbability);\n  builder.Services.AddOpenTelemetry()\n    .WithTracing(builder => builder\n      .SetSampler(sampler)\n      .AddProcessor<MemeNameEnrichingProcessor>()\n      .SetResourceBuilder(resourceBuilder)\n      .AddHttpClientInstrumentation(o =>\n        o.ConfigureHttpClientCollection(\n          config.RecordHttpExceptions))\n      .AddAspNetCoreInstrumentation(o =>\n         o.ConfigureAspNetCoreCollection(\n           config.RecordHttpExceptions,\n           config.AspNetCoreRequestFilter))\n      .AddCustomInstrumentations(config.ConfigureTracing)\n      .AddOtlpExporter())\n  ...\n}\n```", "```cs\nvar config = new MemesTelemetryConfiguration();\nbuilder.Configuration.GetSection(\"Telemetry\").Bind(config);\nconfig.ConfigureTracing = o => o\n  .AddEntityFrameworkCoreInstrumentation();\nbuilder.ConfigureTelemetry(config);\n```", "```cs\npublic class SemanticConventions\n{\n    public const string MemeNameKey = \"memes.meme.name\";\n    public const string MemeSizeKey = \"memes.meme.size\";\n    public const string MemeTypeKey = \"memes.meme.type\";\n    …\n}\n```", "```cs\nprivate static readonly Action<ILogger, string, string?,\n  long?, string, string, Exception> LogDownload =\n    LoggerMessage.Define<string, string?,\n      long?, string, string>(\n    LogLevel.Information,\n    new EventId(1),\n    $\"download {{{SemanticConventions.MemeNameKey}}}\n    {{{SemanticConventions.MemeTypeKey}}}\n    {{{SemanticConventions.MemeSizeKey}}}\n    {{{SemanticConventions.EventNameKey}}}\n    {{{SemanticConventions.EventDomainKey}}}\");\n  …\n  public void DownloadMemeEvent(string memeName,\n    MemeContentType type,\n    long? memeSize) =>\n  LogDownload(_logger,\n    memeName,\n    ContentTypeToString(type),\n    memeSize,\n    SemanticConventions.DownloadMemeEventName,\n    SemanticConventions.MemesEventDomain,\n    default!);\n```", "```cs\n_events.DownloadMemeEvent(name, MemeContentType.PNG,\n    response.Content.Headers.ContentLength);\n```", "```cs\ngroups:\n  - id: memes.meme\n    type: attribute_group\n    brief: \"Describes memes attributes.\"\n    prefix: memes.meme\n    attributes:\n      - id: name\n        type: string\n        requirement_level: required\n        brief: 'Unique and sanitized meme name'\n        examples: [\"this is fine\"]\n```", "```cs\n- id: size\n  type: int\n  requirement_level: opt_in\n  brief: 'Meme size in bytes.'\n  examples: [49335, 12345]\n```", "```cs\n- id: type\n  type:\n  members:\n    - id: png\n      value: \"png\"\n      brief: 'PNG image type.'\n    - id: jpg\n      value: \"jpg\"\n      brief: 'JPG image type.'\n    - id: unknown\n      value: \"unknown\"\n      brief: 'unknown type.'\n  requirement_level: opt_in\n  brief: 'Meme image type.'\n  examples: ['png', 'jpg']\n```", "```cs\n<!-- semconv memes.meme -->\n...\n<!-- endsemconv -->\n```", "```cs\nchapter14$ docker run \\\n  -v /path/to/chapter14/semconv:/source \\\n  -v /path/to/chapter14/semconv:/destination \\\n  otel/semconvgen:latest \\\n  -f /source markdown -md /destination\n```", "```cs\n- id: meme.download.event\n  type: event\n  prefix: download_meme\n  brief: \"Describes meme download event.\"\n  Attributes:\n    - ref: memes.meme.name\n    - ref: memes.meme.size\n      requirement_level: required\n    - ref: memes.meme.type\n      requirement_level: required\n```"]