- en: Working with Files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up .NET Core in Ubuntu
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a log as text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core application in Ubuntu to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up .NET Core in macOS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading from a comma separated (CSV) text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Core console application in macOS to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compressing? Why not?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a classic Windows application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypting and Decrypting content in a text file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a classic Windows application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter03](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter03)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/82FCEP](https://goo.gl/82FCEP)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a developer, at some point, we will have to write some data to the disk or
    read data from the disk. This may be a simple text file, or may be a log file
    in a system you have written. .NET Framework offers great support for working
    with files. Mainly, we will be looking at the `System.IO` namespace and its usage
    of it.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be looking at some cross-platform applications as well.
    Each recipe will go through setting up new environments, such as Ubuntu and macOS,
    as well as building a .NET Standard 2.0 library and an accompanying application
    that uses the library.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up .NET Core in Ubuntu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we will be going through how to set up .NET Core 2.x in an Ubuntu
    system. Ubuntu is a widely used Debian-based Linux environment. By visiting [https://www.ubuntu.com/desktop](https://www.ubuntu.com/desktop),
    you can easily download and install Ubuntu on your system. You may have to use
    a virtual PC to do this. There are two great free tools that you can use:'
  prefs: []
  type: TYPE_NORMAL
- en: 'VMWare Workstation Player for Windows: [https://www.vmware.com/products/workstation-player.html](https://www.vmware.com/products/workstation-player.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Oracle Virtual Box for Windows, Linux, and macOS: [https://www.virtualbox.org/wiki/Downloads](https://www.virtualbox.org/wiki/Downloads)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This chapter assumes you have already set up and installed the required operating
    systems.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You will have to download a virtual PC and install the latest version of Ubuntu.
    If you haven''t got a virtual PC that runs Ubuntu, make sure you have before continuing
    this recipe done it yet. I am using Ubuntu version 16.04 here. To find out which
    version you have, simply type the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e7eaf634-8447-45a2-855d-e968604894f6.png)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open your favorite browser, type the following URL, and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`https://www.microsoft.com/net/download/linux`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![](img/f6b55a07-898d-4e84-b273-abc73e4d7a40.png)'
  prefs: []
  type: TYPE_IMG
- en: Select the Install .NET Core SDK 2.x Package button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the Linux Distribution drop-down list, select Ubuntu 16.04**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6224db25-34e2-4f7d-9d06-5b23744be9fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Follow the instructions on the page to install the current SDK or perform the
    following steps to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now open the terminal, type the following command, and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If  you have a fresh installation of Ubuntu you might not have curl installed.
    If not use the following command to install curl:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, again in the terminal type the following command and press *Enter* to
    get the list of files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following command and press *Enter* in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s update the package list using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s install the SDK using this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are done with installing the SDK, let''s test it using the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If it''s all OK, you should get the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1cad7b95-a4f3-47fb-a17d-9bd695ca1a55.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 3, we navigated through to find the required SDK version for our
    Ubuntu installation. These commands are straightforward. I have used Ubuntu 16.04
    as my operating system. In steps 4 and 5, we used `curl` to download the security
    key to the system and to tell Ubuntu that we will be downloading the SDKs from
    a trusted source. In a fresh Ubuntu installation, we might not have the `curl`
    command. So, if you ran into a `command not found` problem, you can just simply
    install `curl` first as in step 4.
  prefs: []
  type: TYPE_NORMAL
- en: In step 6, we used an Ubuntu command to update its package list with Microsoft
    repositories. Then, in step 7, we updated the source list using the `apt-get`
    command. Finally, in step 8, we did the actual installation of .NET Core 2.0 SDK.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 9 and 10, we checked that our installation was all OK to move on.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a log as text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a .NET Standard 2.0 library that writes
    a text file as a log file. This log file will contain simple text entries of operations
    we do in an application. It will also demonstrate the use of command-line tools
    that come under the .NET Core SDK to create a solution and add projects as we
    move on.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have installed Ubuntu 16.04 and .NET Core 2.0 SDK. If not, please
    follow the previous recipe to do so. Assuming everything is installed and .NET
    Core 2.0 is up and running, let's get started on creating the library that writes
    logs as text.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you have downloaded and installed Visual Studio Code from [https://code.visualstudio.com](https://code.visualstudio.com).
    It's a straightforward installation of a `.deb` file from the site.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now in your home directory or any other directory type the following command
    and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, change to the newly created directory, using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now you are inside the root of your solution. Let''s create the .NET Standard
    library project using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created our `Class Library Project`, let's open the whole solution
    using Visual Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command in the terminal and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command will open Visual Studio Code in the current directory
    and the IDE should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4fd8eb18-8cc1-4128-9c60-7769677d1de8.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the code tree, select `Class1.cs`, press *F2*, and change the name to
    `TextLog.cs` and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also in the code window, change the class name from `Class1` to `TextLog`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now your code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add our new project to the solution. Make sure you are in the root of
    the project directory. Type the `ls` command and the output should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/64c41bc2-6104-4786-9875-6dfc6b2c3395.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type the following command in the terminal and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the root directory of the solution, type the following command to build
    the solution and its attached projects:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The output window should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eac5a56c-50ca-4739-a3dd-cde9718233a6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add some code to our library. At the top of the `using` directives,
    add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'At the top of the class, next to the open curly bracket, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a constructor. Add the following code next to the variables we have
    created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Next to the constructor code, add the method to write the log file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the last method to the code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have added all our code to the library, let''s go back to the terminal
    window and perform a build using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the first step, we opened the terminal window in the Ubuntu system. This
    terminal is similar to the command window you use in Windows operating systems.
    A terminal helps you to execute shell commands supported by the .NET Core 2.0\.
    In step *2,* we created a blank solution. The `dotnet new` command creates a new
    solution file containing directories. In step *3*, we changed the directory to
    the root of the solution file. From this point onwards, we will be adding the
    projects to the solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 4, we used the same `dotnet new` command to create the class library.
    By default, this class library will use the .NET Standard 2.0 library, so we don''t
    have to tell the command-line tool to create the .NET Standard 2.0 library. We
    can confirm this by expanding the `Chapter3.LogFile.LogLib` node in Visual Studio
    Code, then clicking on the `Chapter3.LogFile.LogLib.csproj` label. In the right-hand
    pane of Visual Studio Code, you will be able to see this XML code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, `<TargetFramwork>` markup says it''s `netstandard2.0`and it''s
    confirmed, we have a .NET Standard 2.0 library on our hands. In steps 6 to 10,
    we used Visual Studio Code to open the current directory and make changes to the
    existing class. In step 11, we made sure we were in the root directory of the
    solution. In step 12, we added the Class Library project to the solution using
    the command-line tool. You will be able to list all the projects in the solution
    by executing the following command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The command will list all the available projects in the current solution file.
    In step 13, we performed a `build` command to make sure everything was intact
    and working fine. In step 15, we added the namespace for handing inputs and outputs
    to the system. The `System.IO` namespace contains all the file handling classes
    inside it.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we created two `private` variables to hold the filename and `StreamWriter`
    class that helps you to write to text files. In step 17, we created a constructor
    method that checks whether the file, exists. If it doesn't exist, it will create
    a whole new text file and, if there is a file already, we will open the file to
    append text to it. This is a very good practice when you handle files for these
    sort of tasks.
  prefs: []
  type: TYPE_NORMAL
- en: In step 18, we created a method that takes a `string` parameter as the message
    and writes that message to the file. In step 19, we created a method to close
    the opened file. Finally, step 20 verified that the syntax is OK and builds correctly
    using a `build` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASP.NET Core application in Ubuntu to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will be creating an ASP.NET Core application to use the library in this recipe.
    ASP.NET Core will be using the MVC design pattern, as well as working in Linux,
    macOS, and, of course, in Windows. We will be using Ubuntu as the operating system
    for building this small app to demonstrate the cross-platform capabilities of
    .NET Core.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe that includes setting up the
    environment and building of the .NET Standard 2.0 library that creates a text
    file as a log. This recipe assumes you have basic knowledge of MVC architecture.
    In simple terms, MVC is a software architectural pattern that separates data models,
    controlling code, and user interfaces. Let's have a look at how to build this
    application and use our library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it..
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the terminal and navigate to the root of your application built in the
    previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The directory structure should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4aba8d1-f464-4b54-96bb-602b2aade0cb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now type the following command and press *Enter* in the terminal to create
    the new ASP.NET Core MVC application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add this new project to the solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s perform a build to check that everything is working fine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, navigate to the app we just created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the application with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is fine, open your browser and type `http://localhost:5000` in
    the address bar and hit *Enter*. The browser output should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/95b54e8d-b852-46bd-a113-16df7faf1103.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's close the browser and, in the terminal window, hit *Ctrl* + *C* to stop
    the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to add the reference to our .NET Standard 2.0 library we built before.
    Let''s add it now using this command in the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s get back to the root folder by typing the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the root of the solution directory, type the following command to open
    Visual Studio Code using the current directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: In Visual Studio Code, expand the `Chapter3` label and expand `Chapter3.LogFile.LogAppMvc`**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Again, expand the `Controllers` folder and click on `HomeController.cs`**:**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**![](img/63ad3193-1ff4-4793-a9a5-aafe9ff92d3d.png)**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `HomeController.cs`, add the following `using` directive to the last line
    of the `using` directives block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, next to the starting curly bracket of the `Index` method of the `HomeController`
    class, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add more code inside the `About` method too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Do the same to the `Contact` method as well:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we are done with adding code, let''s navigate to `Chapter3.LogFile.LogAppMvc`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s run the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Open your favorite browser, type `localhost:5000` in the address bar, and press
    *Enter*. Click on the navigation links for Home, About, and Contact a few times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now go to Visual Studio Code, expand the `Chapter3` label, and expand `Chapter3.LogFile.LogAppMvc`**.** You
    should see a file named `server_log.txt` in the root:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/022e2704-8de3-478a-8965-53fd86c6804f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now click on the `server_log.txt` filename to see the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/92b9b012-5ecd-42f9-aa55-14f13c4ed072.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In steps 1 and 2, we opened the terminal and made sure we are in the correct
    directory, which is the root of the solution. After that, in step 3, we created
    the ASP.NET Core 2.0 MVC application. In step 4, we added that project to the
    solution. After this step, we have two projects in the solution and you will be
    able to see all projects in the solution by giving this command in the root of
    the solution directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In steps 5, 6, and 7, we built the project from the root to check that everything
    was fine. Then, we navigated to the newly created project folder and executed
    the project to test whether everything was OK. In step 8, we opened the default
    browser and gave the URL to test the ASP.NET Core 2.0 application. As you can
    see, the URL looked like `http://localhost:5000`. By default, the web server (which
    is kestrel) runs on port 5000.
  prefs: []
  type: TYPE_NORMAL
- en: Kestrel is a cross-platform web server for ASP.NET Core and is built using a
    cross-platform asynchronous I/O library called **libuv.**
  prefs: []
  type: TYPE_NORMAL
- en: So, we didn't change anything and kept the defaults as they are. In step 11,
    we navigated back to the root solution directory and then, in step 12, we opened
    Visual Studio Code using that directory.
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we navigated to `HomeController.cs` and, in step 15, we added the
    first `using` statement to access the classes that allow you to use the file operations.
    In step 16, we created the `TextLog` class and used it in the `WriteLog()` method.
    Finally, we used the `CloseLog()` method to close the opened file. We did the
    same in steps 17 and 18\. In steps 19 and 20, we navigated to the ASP.NET Core
    2.0 application directory and executed the application.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 21 and 22, we opened the browser and used the application to write
    some text to the disk. Then we closed the browser. Finally, in steps 23 and 24,
    we witnessed the file that was written to the disk while we were using the application.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up .NET Core in macOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at how to set up things on macOS to run .NET
    Core 2.0 applications. At the time of writing, the macOS version is macOS High
    Sierra 10.13.2\. We need a device such as a MacBook or an iMac for running macOS,
    or else you can skip this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have macOS up and running on a device. Have your favorite browser
    open. Also, I assume you have experience of downloading and installing applications
    on a Mac device.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open your favorite browser and navigate to [https://www.microsoft.com/net/download/macos](https://www.microsoft.com/net/download/macos).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `Download .NET Core 2.1.x SDK` (at the time of writing, the version
    is 2.1.105) button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abc542de-4235-41b5-8236-6799ee2fd478.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the download dialog box, select Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the file from the downloaded location (typically in the
    `Downloads` folder) and follow the instructions to install.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installation, you should be good to go. Let's open a terminal and test
    the installation. (Applications | Utilities | Terminal).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the terminal, type the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything is OK, you should see output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8aa3723a-93b1-4a64-898d-ba2472140a8c.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's download Visual Studio Code for Mac at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the dialog box, choose Save File to download.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After downloading the file, locate it and double-click on it to extract. Then
    drag drop the file in the `Applications` folder and you are good to go with Visual
    Studio Code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout these steps, we have downloaded and installed .NET Core 2.0 and Visual
    Studio Code. Each step is self-explanatory. After opening Visual Studio Code,
    you might have to install a few extensions such as C# to make things easier.
  prefs: []
  type: TYPE_NORMAL
- en: Reading from a comma separated (CSV) text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, will be using .NET Core 2.0 under macOS. I assume you are familiar
    with using a terminal and typing a few commands in it. We will be looking at command-line
    tools supplied with .NET Core 2.0 to create our .NET Standard 2.0 library that
    reads a **Comma Separated Values** (**CSV**) file and returns its data.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you have not already completed the previous recipe, make sure you have done
    it. It will help you to download .NET Core 2.0 and Visual Studio Code as an IDE.
    Let's fire up the terminal and get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open a terminal window (Applications | Utilities | Terminal).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in your `home` directory, type the following command (you might have to
    create a separate directory for your projects and do the following command):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, type the following command to navigate to the newly created solution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, type this command to create the .NET Standard 2.0 library project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add this project to our solution by typing this command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Let's open Visual Studio Code and open the current solution directory (File
    | Open). (Visual Studio Code should normally list it under the Applications directory).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Visual Studio Code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/829d3393-bfac-46d5-8baf-197754713df2.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio Code
  prefs: []
  type: TYPE_NORMAL
- en: Now, select the `Class1.cs` label in the file tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter*key and rename the `Class1.cs` to `CsvFileLib.cs` and press
    *Enter* again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the code editor, change the `Class1` class name to match the filename
    `CsvFileLib`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s click on the CsvFileLib.cs tab and add some code. Add the `using` directive
    on the top of the code window next to the last line of the `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'At the top of the class, after the open curly bracket of the `CsvFileLib`,
    class add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, next to the preceding line, add the following constructor code for the
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, let''s add the method to read all the lines in a CSV file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, type the following command in the terminal to build the solution (make
    sure you are in the root of the solutions directory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: This will build and check the code for any syntax errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we used .NET Core command-line tools to create a solution and
    then create a project. Then, we added the project to the solution. In steps 6
    and 7, we opened Visual Studio Code for macOS and opened the directory we just
    created. Visual Studio Code for macOS allows you to work with .NET-based applications
    on macOS. Also, by installing extensions, it allows you to work with other popular
    technologies as well.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 9 and 10, we renamed the default `Class1.cs` generated from the template
    and we renamed the file and the class to a meaningful name. In step 11, we added
    the necessary namespaces to work with files and collections. In step 12, we created
    a private variable to hold the filename. In step 13, we created a constructor
    that takes a filename with a path as a `string` parameter and then populated the
    variable we created in step 12.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 14, we created a method that reads the entire file and stores each
    line of the text to a List collection. This collection stores its items as `string`,
    In the first line of the `ReadCsvFile()` method, we created a local variable to
    hold the handler of the CSV text file. The following part of the code opens the
    given text file and, in the next line, stores all the content in a variable as
    a stream. The third line loops through till the end of the file and stores each
    line on the previous list. Finally, it closes the stream and returns the list
    of content from the `ReadCsvFile()` Method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Creating a .NET Core console application in macOS to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a .NET Core console application to use the
    library built in the previous session. .NET Core is a cross-platform .NET flavor
    that runs on Windows, Linux, and macOS. This recipe focuses on .NET Core that
    runs under macOS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s open the terminal and make sure we are in the root of the solution built
    in the previous recipe. Perform a quick build command as follows to check that
    everything is working fine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open the terminal (Applications | Utilities | Terminal).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Navigate to the root of the solution we built in the previous recipe and enter
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, type this command to see the content of the directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Your terminal should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7bfbbed8-a02c-4219-abc5-c5cc672fe3c1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Execute the following commands to add this project to the solution and to test
    build:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Let's open Visual Studio Code and open (File | Open) the full solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Visual Studio Code should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1b308fc3-6669-406f-bf87-9bb1634c1e2c.png)'
  prefs: []
  type: TYPE_IMG
- en: Now expand the `Chapter3.CsvFile.Console` node and select the `Chapter3.CsvFile.Console`
    label.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the New File icon in the tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8e467659-a848-4890-ba1f-14aa7aa0c0c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Type `movies.txt` as the name and press *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now select the `movies.txt` file and add the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1,X-Men: Apocalypse,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`2,The Secret Life of Pets,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`3,Suicide Squad,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`4,Independence Day: Resurgence,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`5,Star Trek 3,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`6,Batman v Superman: Dawn of Justice,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`7,The Jungle Book,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`8,Hail, Caesar!,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`9,Zoolander 2,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`10,How to Be Single,2016`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You text file should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79468c37-8a76-440c-a5cf-476a39f501e0.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's open the terminal (Applications | Utilities | Terminal) and navigate to
    the newly created console project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following command and press *Enter* to add our library to the console
    application as a reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s go back to Visual Studio Code, select `Program.cs`, and add this `using`
    directive after the last line of `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Now delete any existing code inside the `Main()` method and add this code between
    the curly brackets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the current changes and go back to the terminal, type the following command,
    and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, type the following code and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see this output in your terminal window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c3eae69-b845-4ed5-9ee4-e40b6c488f53.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 4, we navigated to the previously built .NET Standard 2.0 library.
    Using the macOS terminal we reached the root of that solution. Also, we have created
    a new .NET Standard 2.0 library. When you create a library project in .NET Core
    2.0, by default it chooses .NET Standard 2.0 as the template. So we don't worry
    about telling the command-line tool to create the library as .NET Standard 2.0
    library.
  prefs: []
  type: TYPE_NORMAL
- en: In step 5, we added the newly created project to our solution and performed
    a build to check that everything was fine. In steps 6 to 9, we opened the current
    directory using Visual Studio Code and then, in steps 9 to 12, we created a sample
    text file with comma separated values for testing purposes. In step 14, we added
    the library to our console application as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: In step 15, we added the reference for the library project in the `using` statements
    and then, in step 16, we created an instance of the `CsvFileLib` class and stored
    the output of the `ReadCsvFile()` method in a variable. Finally, we looped through
    the list, which is returned by the `ReadCsvFile()` method, and printed the output
    in the console window.
  prefs: []
  type: TYPE_NORMAL
- en: Compressing? Why not?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at file compression capabilities supported
    on .NET Framework and how to use them in a .NET Standard 2.0 library. File compression
    classes are supported inside the `System.IO.Compression` namespace. Classes inside
    this namespace are used to compress the file as well as decompress it. They are
    also used to read content inside a compressed file. Let's have a look and create
    a .NET Standard 2.0 library that compresses and decompresses a file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have the latest version of Visual Studio 2017 up and running.
    As mentioned previously, we will be using classes inside `System.IO.Compression`**.**
    Mainly, we will be looking at the `ZipFile` class. Let's get going and build our
    library that compresses and decompresses a file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane, and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter3.Compress` and, in the Location: textbox,
    select path from the drop-down box or click on the Browse... button to locate
    a path.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/91ca9b7e-4c52-4010-8064-ce1b724a7512.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/505303ba-f200-4eda-9bdb-c4d1b928fb1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter3.Compress` label in the Solution Explorer and
    select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8eb776ce-df84-4fdd-b99f-0289dc1b8d4c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter3.Compress.CompressLib`, leave the
    other defaults as they are, and click OK.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7e0e60a1-0de0-48ca-a0c2-46c395355fdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9e26f41e-5f28-4a35-81c7-40d2d8e78924.png)'
  prefs: []
  type: TYPE_IMG
- en: Now select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `Zipper.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in the `Zipper.cs` code window (double-click on the `Zipper.cs` label
    in Solution Explorer to open), type the following code next to the last line of
    the `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `private` class variable at the top of the class code (next to the
    starting curly bracket of the class):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add a constructor to our class by adding this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add this method next to the constructor code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the following code to list the zipped content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Perform a quick build by pressing *Ctrl* + *Shift* + *B*, for syntax errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we created a blank solution using Visual Studio 2017 and gave
    it a proper, meaningful name. In steps 7 to 10, we added a .NET Standard 2.0 class
    library to the project. We renamed the default `Class1.cs` generated by the template
    in step 12\. In step 14, we added two namespaces to the code. The `System.IO.Compression`
    namespace contains all the necessary classes for compressing and decompressing.
    In step 15, we added a private variable that holds the path to compress. In this
    case, it is a folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 16 introduced the constructor with a source path parameter to zip. In
    step 17, we created a method that uses the `ZipFile` class and its method to compress
    a given source folder. And then, finally, we created a method that lists the name
    of a compressed archive. It takes a parameter as the compressed zip files path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The first line creates an empty list that populates `strings` as items. Then
    we created a `ZipArchive` instance. We have used the `using` keyword to wrap around
    that statement. It's a safe method of programming for this sort of item. The `using`
    keyword is a very convenient way of using an object that implements the `IDisposable`
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: The `IDisposable` interface provides a mechanism for releasing unmanaged resources.
  prefs: []
  type: TYPE_NORMAL
- en: And finally, we went through all the entries using a `foreach` and then returned
    the populated list.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a classic Windows application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at a classic Windows application that compresses
    a given folder using the library that we built in the previous recipe. Make sure
    you have completed the previous recipe that creates a .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's open the previous solution for the library we built. Make sure you perform
    a quick build (*Ctrl* + *Shift* + *B*) to check for any syntax errors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution that we built from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/70bc46ff-6ae4-4e2f-91a5-dc0ebe30c75f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's select the solution name and right-click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node and select Windows
    Classic Desktop in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Windows Forms App (.NET Framework):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b195f446-7a46-4da2-9e4a-5e2ebf9505b4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter3.Compress.ZipperWinApp`, leave the
    Location: textbox as it is, and click OK.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dcbc0737-590f-4900-bf54-407906de5747.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44558378-3ee4-47dc-b85a-407f35fca147.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's rename the `Form1.cs` as `MainForm.cs` by selecting it and pressing *F2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation box to confirm the changing of the main class
    name as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, select the Windows form from the designer window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag drop a TextBox, a Button, and a ListBox in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also drag drop a FolderDialogBox control in the Windows form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the properties of the previous controls as per this table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Control** | **Property** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| TextBox | Name | `FolderTextBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Name | `BrowseButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Text | `Browse...` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ListBox | Name | `FileListBox` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Form | Text | `Zipper WinApp` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| FolderDialogBox | Name | `ZipFolder` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Now, your designer area should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44fdfaf1-1b8f-434a-a372-e3dc73619749.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select the `Chapter3.Compress.ZipperWinApp` label in the Solution Explorer
    and expand it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the References label and select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Projects node in the Reference Manager dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the checkbox in front of `Chapter3.Compress.CompressLib` from the project
    list in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/86241a4f-2080-43d0-8b57-157733bc3541.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the Browse... button to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up in the code window and add the following `using` directive to the
    last line of all the `using` directives, at the top:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Now scroll down till you reach the button click event of the Browse... button
    and add the following code in between the curly brackets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s press *F5* and test our code. Your output should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0166d55e-3817-4cb2-9729-1b4cb204009b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s click the Browse... button and navigate to a folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7662896a-fb9a-4830-9066-f5570ce3515d.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK. Now, the folder will be compressed and the output file will be `result.zip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3ec8c012-edd8-43ba-ac56-c011ac4dd396.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now you will see the list of files in the compressed ZIP file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1d79cbe3-df5d-4250-9357-b0d43cad2f70.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s browse to the folder selected using Windows Explorer and have a look
    (you can copy and paste the path from the textbox in the application itself):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dadad59e-2bfc-4f17-a098-8a1eab594453.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Double-click on the file and you will see that the content of the ZIP file
    matches the list we had in step 29:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a5b65af-ba46-4bf0-804d-102058f5dfc1.png)'
  prefs: []
  type: TYPE_IMG
- en: Now close the app.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 9, we opened the existing solution with the .NET Standard 2.0
    class library built in the previous recipe. Then we added a new Classic Windows
    Application project to that solution. We also gave it a proper name to match the
    solution. In steps 10 and 11, we renamed the default Windows form generated by
    Visual Studio. In steps 12 to 16, we added the necessary controls to build the
    user interface of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 18 to 21, we added the reference to the .NET Standard 2.0 library from
    our Classic Windows Application. This is a mandatory step, or else you will not
    have access to the library and its functionality. In step 23, we added a using
    statement that will tell the Windows application we have referenced the library
    and allow us to access its accessible methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 24, we added code to the button click event of the Browse... button.
    In the first line of that code, we have used an `if` statement to open the folder
    dialog box and checked whether the OK button is pressed in the dialog box. Then,
    the following two lines of code store the selected path in the textbox of our
    Windows application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Then we have a `string` variable that stores the destination ZIP filename:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line, we have an instance of the `Zipper` class and, in the second
    line, we have used its `CompressFile()` method. Finally, we have displayed a notification
    to the end user by using the `MessageBox.Show()` method. Finally, in the following
    two lines of code, we used the `ListArchive()` method to extract the content of
    the ZIP file and added the output to the list box control:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Encrypting and decrypting content in a text file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be looking at another capability of the `System.IO`
    namespace. We will be creating a .NET Standard 2.0 library that encrypts an existing
    text file as well as decrypts it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Encryption is a great way of securing your files. The `System.IO` namespace
    provides you with great functionality to encrypt and decrypt your content. Let's
    have a look at how to do it in a .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane, and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter3.SecureFile` and, in the Location: textbox,
    select the path from the drop-down box or click on the Browse... button to locate
    a path.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/536217ac-e63e-4237-af11-4aad1fdac658.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, your Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e79e009a-6297-4ca2-87df-7311c48a3f7f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter3.SecureFile` label in the Solution Explorer
    and select Add | New Project**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dec30139-1060-461e-a10d-7180279c4786.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter3.SecureFile.CryptLib`, leave the other
    defaults as they are, and click OK.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ccc1044a-50d5-4bc6-b040-223d78062981.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b69b197f-d1cb-42ed-abcd-a65bb49539e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file to `CryptFile.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on`CryptFile.cs` to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code window, scroll up to the top and add the following `using` directive
    to the last line of the `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following code next to the start curly bracket of the `CryptFile`
    class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the default constructor method as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now let''s add a method to encrypt the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Also add this method to decrypt the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* to perform a quick build to check for the correct
    syntax.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 5, we opened Visual Studio 2017, created an empty solution, and
    gave it a proper name. In steps 7 to 11, we added a .NET Standard 2.0 library
    to the solution. In steps 12 and 13, we changed the default name of the class
    generated from the template. In step 15, we added the `System.IO` namespace that
    contains the file encryption and decryption functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we added a class-wide private `string` variable to hold the filename
    to encrypt and decrypt. In step 17, we added the default constructor that populates
    the private variable to hold the filename. In step 18, we added a method to encrypt
    the file. We used the `Encrypt()` method of the file class found in the `System.IO` namespace.
    We did the same in step 19 to decrypt the file.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we performed a quick build to check that all the syntax was intact.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a classic Windows application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will focus on building a classic Windows application to use the
    .NET Standard 2.0 library that we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe where we built a .NET Standard
    2.0 library. It used the `System.IO` namespace to encrypt and decrypt a file.
    Open that solution and do a quick *Ctrl* + *Shift* + *B* to check that everything
    is fine.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution we built from the previous recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/57707bf4-4068-4cc0-a515-12579db36310.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's select the solution name and right-click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the menu, select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node and select Windows
    Classic Desktop in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Windows Forms App (.NET Framework):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb3a92e5-28de-4849-ab60-b87f8810b0b1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter3.SecureFile.SecureWinApp`, leave the
    Location: textbox as it is, and click OK.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/08c0e52a-d4c0-4684-b641-2905e9746458.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00413fb3-2716-4b11-aed2-1a43bada7dd5.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's rename `Form1.cs` as `MainForm.cs`, by selecting it and pressing *F2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation box to confirm the changing of the main class
    name as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now select the Windows form from the designer window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop two Buttons in the form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also drag and drop an `OpenFileDialogBox` control in the Windows form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the properties of the previous controls as per this table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Control** | **Property** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Name | `EncryptButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Text | `Encrypt` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Name | `DecryptButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button | Text | `Decrypt` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| OpenFileDialogBox | Name | `OpenDialog` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| OpenFileDialogBox | Filter | `Text Files&#124;*.txt` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'Now, your designer area should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/060b628e-8463-4a20-b2a8-599f8bcf9d65.png)'
  prefs: []
  type: TYPE_IMG
- en: Now select the `Chapter3.SecureFile.SecureWinApp` label in the Solution Explorer
    and expand it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the References label and select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Projects node in the Reference Manager dialog box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the check box in front of the `Chapter3.SecureFile.CryptLib` label from
    the project list in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0912295c-c415-465c-a3a3-9a63fc2fdb8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now switch back to the design window and double-click on the Encrypt button
    to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code window, scroll up to the top and add the following `using` directive
    as the last line of the `using` block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'Now scroll down to the Encrypt button, click, and add the following code in
    between the curly brackets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Now switch back to the designer window by clicking on the MainForm.cs [designer]
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the Decrypt button to reach the code for that button click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code in between the curly brackets of the button click code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Now press *F5* to execute the code (make sure the classic Windows application
    project is the default project)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the Encrypt button and select a file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b69b8519-f9d9-47de-a202-c485009ca1a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Open and click OK in the information box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open Windows Explorer and navigate to the location of the file that you
    just encrypted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will notice a lock on the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6fe3a32c-4edb-45bb-95ec-bc81391a7471.png)'
  prefs: []
  type: TYPE_IMG
- en: Now switch back to your app, click on the Decrypt button, and follow the same
    steps as before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now the lock is removed from the file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/329f4d76-d1e0-4ce4-801b-574f74a7851e.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 4, we opened the existing solution with the library we built in
    the previous recipe. In steps 5 to 9, we added a classic Windows project to the
    solution. We have assigned proper names to the project to keep consistency and
    readability. In steps 10 to 15, we changed the name of the Windows form and then
    added necessary controls to the form. At the end, we changed the properties of
    those controls.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 18 to 21, we added a reference to the project that contains the library.
    This is a mandatory step, or else we won't be able to access the library functionality
    from our Windows application. Now, in step 23, we added the reference to a library
    project from the code level. This step will allow you to access all the methods
    available from the code level. In step 24, we used an `if` statement to open the
    File Open dialog box and to check whether the Open button is clicked. In the next
    lines of code, we created an instance of the `CryptFile` class and used the filename
    with the path as its parameter. Finally, we used the `EncryptFile()` method to
    start the encryption and `MessageBox.Show()` to display the information to the
    user. Again, in step 25, we used the Decrypt button of the application to use
    the other `DecryptFile()` method of the `CryptFile` class.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in steps 28 to 31, we executed our application and tested it. In steps
    32 and 34, we confirmed that encryption and decryption worked.
  prefs: []
  type: TYPE_NORMAL
