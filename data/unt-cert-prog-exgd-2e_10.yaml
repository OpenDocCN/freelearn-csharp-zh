- en: '*Chapter 10*: Pausing the Game, Altering Sound, and a Mock Test'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：暂停游戏、调整声音和模拟测试'
- en: In this chapter, we are going to add background music to our game. Then, we
    will make our music fade in when the level starts, fade out when the level is
    completed, and stop if the player dies. After that, we will be using all the UI
    skills we have learned so far to create a pause screen and add some slider components
    to it (which will be used in the next chapter for volume controls). With the pause
    screen built, we will make our game pause by freezing the player, the enemies
    on the screen, bullets, and the moving textures. Also within the pause screen,
    we will be giving the player the option to resume play or quit so that the game
    goes back to the title screen with the use of Event Listeners, which we learned
    about in [*Chapter 9*](B18381_09_Epub.xhtml#_idTextAnchor161), *Creating a 2D
    Shop Interface and In-Game HUD*. Finally, we will be providing a mini mock test
    with 20 questions to cover what we have learned from this chapter, as well as
    previous ones.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将为我们的游戏添加背景音乐。然后，当关卡开始时，我们将使音乐淡入，当关卡完成时淡出，如果玩家死亡则停止。之后，我们将使用我们迄今为止学到的所有UI技能来创建一个暂停界面，并在其中添加一些滑动组件（这些组件将在下一章中用于音量控制）。在构建了暂停界面后，我们将通过冻结玩家、屏幕上的敌人、子弹和移动纹理来使游戏暂停。在暂停界面内，我们将给玩家提供继续游戏或退出的选项，以便游戏使用事件监听器回到标题屏幕，这些事件监听器我们在[*第9章*](B18381_09_Epub.xhtml#_idTextAnchor161)中学习过，即*创建2D商店界面和游戏内HUD*。最后，我们将提供一个包含20个问题的迷你模拟测试，涵盖我们从本章以及之前章节中学到的内容。
- en: By the end of this chapter, we will be able to make changes to the `AudioSource`
    component directly within our script. We will know how to make every GameObject
    stop moving on the screen for our pause screen. Finally, we will know how to create
    a more fulfilling experience by adding toggle and slider components.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将能够在脚本中直接修改`AudioSource`组件。我们将知道如何让每个GameObject在暂停界面中停止在屏幕上的移动。最后，我们将知道如何通过添加切换和滑动组件来创造更丰富的体验。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Applying and adjusting level music
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用和调整关卡音乐
- en: Creating a pause screen
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建暂停界面
- en: Adding a game pause button
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加游戏暂停按钮
- en: Mock test
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模拟测试
- en: In terms of the Unity Programmer Exam, the next section will label the core
    objectives that will be covered in this chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity程序员考试方面，下一节将列出本章将涵盖的核心目标。
- en: Core exam skills covered in this chapter
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本章涵盖的核心考试技能
- en: 'The following are the core exam skills that will be covered in this chapter:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在本章中将涵盖的核心考试技能：
- en: '*Programming core interaction:*'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*编程核心交互：*'
- en: Implement behaviors and interactions of game objects and environments.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现游戏对象和环境的行为和交互。
- en: Identify methods to implement inputs and controls.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别实现输入和控制的方 法。
- en: '*Developing application systems:*'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*开发应用程序系统：*'
- en: Application interface flow such as menu systems, UI navigation, and application
    settings.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序界面流程，如菜单系统、UI导航和应用设置。
- en: '*Programming for scene and environment design:*'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*场景与环境设计编程：*'
- en: Determine scripts for implementing audio assets.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定实现音频资源的脚本。
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The project content for this chapter can be found at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_10](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_10).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的项目内容可以在[https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_10](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition/tree/main/Chapter_10)找到。
- en: You can download the entirety of each chapter's project files at [https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition](https://github.com/PacktPublishing/Unity-Certified-Programmer-Exam-Guide-Second-Edition)下载每个章节的项目文件的全部内容。
- en: All the content for this chapter is held in this chapter's `unitypackage` file,
    including a `Complete` folder that holds all of the work we'll carry out in this
    chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的所有内容都包含在本章的`unitypackage`文件中，包括一个`Complete`文件夹，其中包含本章我们将执行的所有工作。
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3kjkSBW](https://bit.ly/3kjkSBW).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 观看以下视频，了解*代码的实际应用*：[https://bit.ly/3kjkSBW](https://bit.ly/3kjkSBW)。
- en: Applying and adjusting level music
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用和调整关卡音乐
- en: In this section, we are going to look at adding background music to our game
    levels. We will also be updating our scripts so that our music volume changes
    at different points of the game.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何将背景音乐添加到我们的游戏关卡中。我们还将更新我们的脚本，以便在游戏的不同阶段改变音乐音量。
- en: 'In the following sections, we are going to do the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将进行以下操作：
- en: Add music to each level.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将音乐添加到每个关卡。
- en: When the player completes the level, make the music fade out.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当玩家完成关卡时，让音乐淡出。
- en: If the player dies, make the music instantly stop.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果玩家死亡，让音乐立即停止。
- en: Ensure music does not play in other scenes, only level scenes.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保音乐只在关卡场景中播放，不要在其他场景中播放。
- en: So, let's make a start and add our game music to the `level1` scene.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们开始，将游戏音乐添加到`level1`场景中。
- en: Updating our GameManager prefab
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新我们的GameManager预制件
- en: In this section, we are going to update the `GameManager` game object so that
    it holds a new game object (called `LevelMusic`) as a child in the `AudioSource`
    component and an MP3 fileto play. This kind of setup is ideal for a simple game;
    otherwise, we potentially run the risk of adding another manager, which is only
    suitable for a bigger and more complicated game.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将更新`GameManager`游戏对象，使其在`AudioSource`组件中包含一个新的游戏对象（称为`LevelMusic`）作为子对象，并播放MP3文件。这种设置对于简单游戏来说很理想；否则，我们可能会增加另一个管理器，这对于更大、更复杂的游戏来说才合适。
- en: 'To create a game object and add a music file to it, we need to do the following:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个游戏对象并将音乐文件添加到其中，我们需要做以下操作：
- en: In the Unity Editor, open the `bootUp` scene from the `Assets /Scene`).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中，打开`bootUp`场景（`Assets /Scene`）。
- en: Right click **GameManager** in the **Hierarchy window** and select **Audio |
    Audio Source** from the drop-down.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次窗口**中右键点击**GameManager**，从下拉菜单中选择**音频 | 音频源**。
- en: 'Rename the new game object `LevelMusic`. The following screenshot shows the
    game object with its component being created:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新游戏对象重命名为`LevelMusic`。以下截图显示了创建组件的游戏对象：
- en: '![Figure 10.1 – Creating an Audio Source Component'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 – 创建音频源组件'
- en: '](img/Figure_10.01_B18381.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.01_B18381.jpg)'
- en: Figure 10.1 – Creating an Audio Source Component
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.1 – 创建音频源组件'
- en: 'With the `LevelMusic` game object still selected, we can now drag our `lvlMusic`
    MP3 file from `Assets/Resources/Sound` in the **Project** window into the **AudioClip**
    parameter, as shown in the following screenshot:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`LevelMusic`游戏对象仍然被选中，我们现在可以将我们的`lvlMusic` MP3文件从**项目**窗口中的`Assets/Resources/Sound`拖动到**AudioClip**参数，如图下截图所示：
- en: '![Figure 10.2 – Add the lvlMusic MP3 to the AudioClip field in the Audio Source
    Component'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.2 – 在音频源组件中将lvlMusic MP3添加到AudioClip字段'
- en: '](img/Figure_10.02_B18381.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.02_B18381.jpg)'
- en: Figure 10.2 – Add the lvlMusic MP3 to the AudioClip field in the Audio Source
    Component
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 在音频源组件中将lvlMusic MP3添加到AudioClip字段
- en: Now is a good time to save our `GameManager` prefab by selecting it in the **Hierarchy**
    window and clicking on **Overrides | Apply All** in the top-right corner of the
    **Inspector** window.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是保存我们的`GameManager`预制件的好时机，在**层次窗口**中选择它，然后在**检查器**窗口的右上角点击**覆盖 | 应用所有**。
- en: If we now click `level1` scene, the game will start to play music. This is because,
    by default, the **Audio Source** component is set to **Play On Awake**. This is
    good, but it won't stop playing until the scene changes, which is enough for most
    games. However, we want to add control to the music's volume via scripting.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在点击`level1`场景，游戏将开始播放音乐。这是因为，默认情况下，**音频源**组件设置为**唤醒时播放**。这是好的，但它不会停止播放，直到场景改变，这对于大多数游戏来说已经足够了。然而，我们希望通过脚本添加对音乐音量的控制。
- en: In the next section, we are going to update the `ScenesManager` script and control
    when and how our music will be played.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将更新`ScenesManager`脚本，并控制音乐何时以及如何播放。
- en: Preparing states for our game music
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为我们的游戏音乐准备状态
- en: In this section, we are going to ensure that our game music is no longer set
    to its default `ScenesManager` script as it is relatively connected.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将确保我们的游戏音乐不再设置为默认的`ScenesManager`脚本，因为它相对连接。
- en: 'To add our three music states (play, stop, and fade down), we need to do the
    following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加我们的三个音乐状态（播放、停止和淡出），我们需要做以下操作：
- en: In the `ScenesManager` script (`Assets/Script`).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ScenesManager`脚本（`Assets/Script`）。
- en: 'At the top of the `ScenesManager` script where we have entered our variables,
    just below the scope of our `public enum Scenes` property, enter the following
    `enum`, along with its three states:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ScenesManager`脚本顶部，我们定义变量的地方，就在我们的`public enum Scenes`属性的作用域下方，输入以下`enum`及其三个状态：
- en: '[PRE0]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We covered enums back in the *Setting up our scene's manager script* section
    in [*Chapter 3*](B18381_03_Epub.xhtml#_idTextAnchor073), *Managing Scripts and
    Taking aMock Test*; the principles are the same as labeling our states. For our
    `enum`, we have assigned it a data type name of `MusicMode`.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*设置场景管理器脚本*部分介绍了枚举，见[*第三章*](B18381_03_Epub.xhtml#_idTextAnchor073)，*管理脚本和进行模拟测试*；其原理与标记状态相同。对于我们的`enum`，我们给它分配了一个数据类型名为`MusicMode`。
- en: 'Now that we have our three states labeled, we need to put these into action.
    We need to make our three states carry out their intended actions:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为三种状态贴上了标签，我们需要将这些状态付诸实践。我们需要让我们的三种状态执行它们预期的动作：
- en: '`noSound`: No music is playing.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`noSound`: 没有音乐播放。'
- en: '`fadeDown`: The music''s volume will fade to zero.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadeDown`: 音乐的音量将淡至零。'
- en: '`musicOn`: The music will be playing and will be set to its maximum volume.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`musicOn`: 音乐将播放，并将音量设置为最大。'
- en: At various points of the game, we will want these states to be triggered, and
    the best way of accessing these short sets of states is to use a switch case to
    funnel out each outcome.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在游戏的各个阶段，我们希望触发这些状态，而访问这些短状态集的最佳方式是使用switch case来过滤出每个结果。
- en: Now, we need to add a `switch` statement for our three music states.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要为我们的三种音乐状态添加一个`switch`语句。
- en: Still inside the `ScenesManager` script, we are going to add an `IEnumerator`
    that will act on either state. We covered `StartCoroutine`/`IEnumerator` in the
    *Setting up our EnemySpawner script* section in [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048),
    *Adding and Manipulating Objects*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在`ScenesManager`脚本中，我们将添加一个`IEnumerator`，它将对任一状态进行操作。我们已经在[*第二章*](B18381_02_Epub.xhtml#_idTextAnchor048)的*设置我们的敌人生成器脚本*部分介绍了`StartCoroutine`/`IEnumerator`，*添加和操作对象*。
- en: 'So, because we are adding an `IEnumerator`, we also need to add an extra library
    to support this functionality:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，因为我们添加了`IEnumerator`，所以我们也需要添加一个额外的库来支持此功能：
- en: 'Inside the `ScenesManager` script, at the very top, add the following library:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`ScenesManager`脚本的最顶部，添加以下库：
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our script now supports coroutines and IEnumerators.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们的脚本现在支持协程和IEnumerators。
- en: 'I''m going to place my `IEnumerator` just outside of the scope of the `Update`
    function and name it `MusicVolume`, where it takes the `MusicMode` data type,
    and we will refer to it as `musicMode`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把我的`IEnumerator`放在`Update`函数的作用域之外，命名为`MusicVolume`，它接受`MusicMode`数据类型，我们将称之为`musicMode`：
- en: '[PRE2]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Inside the scope of the `MusicVolume` `IEnumerator`, we will make a start with
    our `switch` statement and take in the reference of one of the three states that
    would have been sent through from the `musicMode` reference:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`MusicVolume` `IEnumerator`的作用域内，我们将从`switch`语句开始，并接收从`musicMode`引用发送过来的三个状态之一：
- en: '[PRE3]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If `musicMode` contains the `noSound` state, then we use `GetComponentInChildren<AudioSource>()`
    to grab the only child game object that holds `AudioSource`, which is the newly
    created `LevelMusic` game object.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`musicMode`包含`noSound`状态，那么我们使用`GetComponentInChildren<AudioSource>()`来获取唯一的包含`AudioSource`的子游戏对象，即新创建的`LevelMusic`游戏对象。
- en: 'We then use the `Stop` function to stop the music and then break out of the
    case:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们使用`Stop`函数停止音乐，然后跳出case：
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The next case is if `musicMode` holds the `fadeDown` state. Here, we grab the
    reference of the `LevelMusic` game object and reduce its `volume` value over time:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一个case是如果`musicMode`包含`fadeDown`状态。在这里，我们获取`LevelMusic`游戏对象的引用，并随时间减少其`volume`值：
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The third and final case is `musicOn`; inside the case, we first make a check
    to see whether an audio clip has already been loaded into the `AudioSource`. If
    there is no audio clip, we discard the rest of the case; otherwise, we `Play`
    the music loaded in and set it to full volume (with `1` being the highest):'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第三个也是最后一个情况是`musicOn`；在case内部，我们首先检查是否已经将音频剪辑加载到了`AudioSource`中。如果没有音频剪辑，我们丢弃case的其余部分；否则，我们播放加载的音乐并将其设置为全音量（`1`为最高）：
- en: '[PRE6]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To close the `switch` statement, we add our `yield return` with a fraction-of-a-second
    delay to give our game time to change the settings from the `switch` statement:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了关闭`switch`语句，我们添加一个带有几秒延迟的`yield return`，以便游戏有时间从`switch`语句中更改设置：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Now that we have created our `enum` `musicMode` states and set up what each
    of them will do when triggered in the `IEnumerator`, we can move on to implementing
    the coroutines to make changes to the music.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的 `enum` `musicMode` 状态，并在 `IEnumerator` 中设置了触发时每个状态将执行的操作，我们可以继续实现协程以更改音乐。
- en: Implementing our game's music states
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现我们游戏的音状态
- en: In this section, we are going to continue making changes to our `ScenesManager`
    script and add `StartCoroutines` to specific parts of our code with the `musicMode`
    state, which is where our music's volume is going to change. So, for example,
    if the player dies in the game, we want the music to stop immediately by using
    the `noSound` state.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将继续修改我们的 `ScenesManager` 脚本，并在代码的特定部分添加 `StartCoroutines`，使用 `musicMode`
    状态，这是我们音乐音量将要改变的地方。例如，如果玩家在游戏中死亡，我们希望使用 `noSound` 状态立即停止音乐。
- en: 'Let''s make a start on this by loading our music into the game level, follow
    these steps:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从将音乐加载到游戏关卡开始，按照以下步骤操作：
- en: 'In the `ScenesManager` script, scroll down to the `GameTimer` method. For the
    first case, which checks whether the player is on level 1, 2, or 3, add the following
    `if` statement:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ScenesManager` 脚本中，向下滚动到 `GameTimer` 方法。对于第一个情况，检查玩家是否在关卡 1、2 或 3 上，添加以下
    `if` 语句：
- en: '[PRE8]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our `if` statement makes a check to see whether the audio clip of our LevelMusic''s
    `AudioSource` is empty (null). If it doesn''t have an audio clip, the `if` statement
    will carry out the following roles:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `if` 语句检查 LevelMusic 的 `AudioSource` 的音频剪辑是否为空（`null`）。如果没有音频剪辑，`if` 语句将执行以下操作：
- en: Grab our audio file (`lvlMusic.mp3`) from its folder and store it as an `AudioClip`
    data type.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从其文件夹中抓取我们的音频文件 (`lvlMusic.mp3`) 并将其存储为 `AudioClip` 数据类型。
- en: Apply the audio clip to the `AudioSource` component.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将音频剪辑应用于 `AudioSource` 组件。
- en: Run the `Play` function from `AudioSource`.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从 `AudioSource` 运行 `Play` 函数。
- en: Now that our music plays when we start a level, we need to make it such that
    when a level is completed, the music fades out. This part is fairly simple as
    we are in the correct method to fade the game music out when a level is completed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们启动关卡时音乐就会播放，我们需要确保在关卡完成时音乐能够淡出。这部分相当简单，因为我们已经找到了在关卡完成后淡出游戏音乐的正确方法。
- en: 'Scroll down to the `//if level is completed` comment and add the following
    line of code to fade the game music out when a level is completed:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 向下滚动到 `//if level is completed` 注释并添加以下代码行，以便在关卡完成后淡出游戏音乐：
- en: '[PRE9]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The last thing to do within the `switch` statement is to add a line of code
    that resets the audio clip to `null` as a failsafe:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `switch` 语句中的最后一件事是添加一行代码，将音频剪辑重置为 `null` 作为安全措施：
- en: '[PRE10]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now, if our `GamerTimer` method is called and none of the cases (our player
    isn't on level 1, 2, or 3) apply, our player is likely to be on the title, game
    over, or bootup scene, which means we will not play any level music.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果调用 `GamerTimer` 方法，并且没有匹配的情况（我们的玩家不在关卡 1、2 或 3 上），那么玩家可能处于标题、游戏结束或启动场景，这意味着我们不会播放任何关卡音乐。
- en: Now, we will look at how to use `StartCoroutines`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将看看如何使用 `StartCoroutines`。
- en: Using StartCoroutine with our music states
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 `StartCoroutine` 与我们的音乐状态
- en: 'Now, we need to learn how to stop and start the music, typically when the level
    is about to start or abruptly ends (typically when the player dies). Still inside
    `ScenesManager`, go back to the methods that will need updating so that they can
    support the music settings. Follow these steps:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要学习如何停止和开始音乐，通常是在关卡即将开始或突然结束（通常是在玩家死亡时）。仍然在 `ScenesManager` 中，回到需要更新的方法，以便它们可以支持音乐设置。按照以下步骤操作：
- en: 'The first method we will be updating is `ResetScene`. Within the scope of the
    method, enter the following code:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要更新的第一个方法是 `ResetScene`。在方法的作用域内，输入以下代码：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will make a call to the `MusicVolume` `IEnumrator` to turn off the music.
    The following code block shows how the `ResetScene` method looks after it''s been
    updated:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调用 `MusicVolume` `IEnumrator` 来关闭音乐。以下代码块显示了更新后的 `ResetScene` 方法的外观：
- en: '[PRE12]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The next method we are going to update is the `NextLevel` method. We can start
    the music at any time, irrespective of where the player is. We can play it whenever
    we want with the following code:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要更新的下一个方法是 `NextLevel` 方法。我们可以随时开始音乐，无论玩家在何处。我们可以使用以下代码随时播放：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The following code block shows what the `NextLevel` method looks like when
    the code has been updated:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块显示了更新后的 `NextLevel` 方法的外观：
- en: '[PRE14]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now, we'll move on to the `Start` function, which works as a failsafe for starting
    a scene and to see whether it should be playing music.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将继续到 `Start` 函数，它作为启动场景的安全措施，并查看它是否应该播放音乐。
- en: Whenever the `ScenesManager` script is active, it will automatically attempt
    to play music from our `LevelMusic` game object's `AudioSource` component.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `ScenesManager` 脚本处于活动状态时，它将自动尝试从我们的 `LevelMusic` 游戏对象的 `AudioSource` 组件播放音乐。
- en: If `AudioSource` doesn't contain a valid `AudioClip` (no MP3 found), then our
    code will presume the level the player is on doesn't require music.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `AudioSource` 不包含有效的 `AudioClip`（未找到 MP3），则我们的代码将假设玩家所在的关卡不需要音乐。
- en: 'The following code block shows the `Start` function in its entirety with the
    added `StartCoroutine`:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块展示了添加了 `StartCoroutine` 的 `Start` 函数的完整内容：
- en: '[PRE15]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The last method to update is `OnSceneLoaded`. When a level is loaded, we will
    attempt to turn the music on. The following code block shows the `OnSceneLoaded`
    method with the added `StartCoroutine` at the top:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个需要更新的方法是 `OnSceneLoaded`。当一个关卡被加载时，我们将尝试打开音乐。下面的代码块展示了添加了 `StartCoroutine`
    的 `OnSceneLoaded` 方法：
- en: '[PRE16]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Save the script and the `bootUp` scene.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本和 `bootUp` 场景。
- en: Our code for manipulating music is complete for our level scenes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为关卡场景编写的音乐操作代码已经完成。
- en: In this section, we updated our `GameManager` so that it holds a second game
    object called `LevelMusic`. This `LevelMusic` game object will hold an `AudioSource`
    component that can be manipulated when the player starts a level, completes a
    level, or dies via the `ScenesManager` script.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们更新了 `GameManager`，使其包含一个名为 `LevelMusic` 的第二个游戏对象。这个 `LevelMusic` 游戏对象将包含一个
    `AudioSource` 组件，当玩家开始关卡、完成关卡或通过 `ScenesManager` 脚本死亡时，可以对其进行操作。
- en: In the next section, we will add a pause screen to our game and learn how to
    adjust the volume of our music and sound effects, and much more.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将向游戏中添加一个暂停界面，并学习如何调整音乐和音效的音量，以及更多内容。
- en: Creating a pause screen
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建暂停界面
- en: Currently, we aren't able to pause the game, nor do we have an options screen
    that allows us to manipulate the settings of the game. In this section, we are
    going to combine these ideas so that our game is capable of pausing and we will
    also be able to change the volume of the music and sound effects.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们无法暂停游戏，也没有一个允许我们操作游戏设置的选项屏幕。在本节中，我们将结合这些想法，使我们的游戏能够暂停，我们还将能够更改音乐和音效的音量。
- en: 'In this section, we are going to do the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将执行以下操作：
- en: Add a pause button to the top corner of the screen.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在屏幕的右上角添加一个暂停按钮。
- en: Create a pause screen.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个暂停界面。
- en: Add the option to resume the game.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加继续游戏的功能。
- en: Add the option to quit the game.
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加退出游戏的功能。
- en: Add a slider for music and sound effects.
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加音乐和音效的滑动条。
- en: Create and hook up **Audio Mixer** to both sliders.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建并连接 **Audio Mixer** 到两个滑动条。
- en: 'The end result of the pause screen can be seen in the following screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停界面的最终效果可以在以下屏幕截图中看到：
- en: '![Figure 10.3 – Finalized view of the Pause Screen'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – 暂停界面的最终视图](img/Figure_10.03_B18381.jpg)'
- en: '](img/Figure_10.03_B18381.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.3 – 暂停界面的最终视图](img/Figure_10.03_B18381.jpg)'
- en: Figure 10.3 – Finalized view of the Pause Screen
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.3 – 暂停界面的最终视图
- en: Let's make a start by focusing on the visuals of the pause screen. Then, we
    will hook up the sliders and buttons.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从关注暂停界面的视觉效果开始。然后，我们将连接滑动条和按钮。
- en: 'To start with the pause UI visuals, we need to do the following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始处理暂停界面的视觉效果，我们需要做以下几步：
- en: Load up the `level1` scene from the `Assets/Scene`).
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Assets/Scene` 加载 `level1` 场景。
- en: With the `level1` scene loaded, we can now focus on creating some game objects
    in the **Hierarchy** window for our pause screen.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 `level1` 场景加载后，我们现在可以专注于在 **Hierarchy** 窗口中创建一些用于暂停界面的游戏对象。
- en: Right-click on the `Canvas` game object in the **Hierarchy** window and selec
    t **Create Empty** from the drop-down list.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 窗口中右键单击 `Canvas` 游戏对象，从下拉列表中选择 **Create Empty**。
- en: Select the newly created game object, right-click it, select `PauseContainer`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新创建的游戏对象，右键单击它，选择 `PauseContainer`。
- en: '`PauseContainer` now needs to be scaled to the size of the game screen so that
    whatever is a child of this game object can be scaled to the correct scale and
    position.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`PauseContainer` 现在需要调整到游戏屏幕的大小，以便这个游戏对象的任何子对象都可以调整到正确的缩放和位置。'
- en: 'To make `PauseContainer` fully scaled to the game screen''s proportions, ensure
    `PauseContainer` is still selected in the **Hierarchy** window and set its **Rect
    Transform** properties in the **Inspector** window to the properties shown in
    the following screenshot:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使 `PauseContainer` 完全缩放到游戏屏幕的比例，确保在 **Hierarchy** 窗口中 `PauseContainer` 仍然被选中，并在
    **Inspector** 窗口中将其 **Rect Transform** 属性设置为以下截图所示的属性：
- en: '![Figure 10.4 – PauseContainer Rect Transform property values'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.4 – PauseContainer 矩形变换属性值'
- en: '](img/Figure_10.04_B18381.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.04_B18381.jpg)'
- en: Figure 10.4 – PauseContainer Rect Transform property values
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – PauseContainer 矩形变换属性值
- en: That's our `PauseContainer` created and set to hold two main game objects. The
    first game object will house all of the pause screen's individual buttons and
    sliders. The second game object is for the pause button in the top-left corner
    of the screen and will make the game pause and bring the pause controls up.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们的 `PauseContainer` 就创建好了，并设置为包含两个主要游戏对象。第一个游戏对象将包含暂停屏幕的所有单个按钮和滑块。第二个游戏对象用于屏幕左上角的暂停按钮，它将使游戏暂停并弹出暂停控制。
- en: 'The following screenshot shows our game with the pause button in the top-left
    corner of the screen:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的游戏，其中暂停按钮位于屏幕左上角：
- en: '![Figure 10.5 – Adding a Pause Button to our Game'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.5 – 向我们的游戏添加暂停按钮'
- en: '](img/Figure_10.05_B18381.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.05_B18381.jpg)'
- en: Figure 10.5 – Adding a Pause Button to our Game
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 向我们的游戏添加暂停按钮
- en: But let's stay focused on the pause screen and its content before we work on
    the in-game pause button. To create a `PauseScreen` game object that will house
    the game objects, we need to repeat a similar procedure for `PauseContainer` in
    terms of our **Rect Transform** properties.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 但在我们开始处理游戏中的暂停按钮之前，让我们先专注于暂停屏幕及其内容。为了创建一个包含游戏对象的 `PauseScreen` 游戏对象，我们需要对 `PauseContainer`
    的 **Rect Transform** 属性重复类似的步骤。
- en: 'To create and house a `PauseScreen` game object in `PauseContainer`, follow
    these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `PauseContainer` 中创建和包含一个 `PauseScreen` 游戏对象，请按照以下步骤操作：
- en: Right-click the `PauseContainer` game object in the **Hierarchy** window.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 窗口中右键点击 `PauseContainer` 游戏对象。
- en: Select **Create Empty** from the dropdown.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择 **Create Empty**。
- en: The new game object will be a child of the `PauseContainer` game object. Now,
    let's rename the newly created game object `PauseScreen`.
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新创建的游戏对象将是 `PauseContainer` 游戏对象的子对象。现在，让我们将新创建的游戏对象重命名为 `PauseScreen`。
- en: Right-click `PauseScreen`.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `PauseScreen`。
- en: With `PauseScreen` still selected in the `PauseContainer` has. Use the previous
    **Rect Transform** image as a reference.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PauseContainer` 中仍然选中 `PauseScreen`。使用之前的 **Rect Transform** 图像作为参考。
- en: We can now make a start by filling our `PauseScreen` game object with its own
    game objects.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以开始填充我们的 `PauseScreen` 游戏对象，添加其自身的游戏对象。
- en: Let's start dimming the screen so that the player isn't distracted when the
    game is paused.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始降低屏幕亮度，这样当游戏暂停时玩家就不会分心。
- en: 'To create a dim effect, follow these steps:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个暗淡效果，请按照以下步骤操作：
- en: In the `PauseScreen` game object and select `blackOutScreen`.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PauseScreen` 游戏对象中选中 `blackOutScreen`。
- en: Apply the same **Rect Transform** properties that you applied to the last two
    game objects.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用与最后两个游戏对象相同的 **Rect Transform** 属性。
- en: Now, we need to add the **Image** component so that we can cover the screen
    with a semi-transparent black.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加 **Image** 组件，以便我们可以用半透明的黑色覆盖屏幕。
- en: With `blackOutScreen` still selected, click the `Image`. Once you see the `blackOutScreen`.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `blackOutScreen` 仍然被选中时，点击 `Image`。一旦你看到 `blackOutScreen`。
- en: 'The last thing to do for the `blackOutScreen` component''s image property is
    to set its **Color** settings to the ones shown in the following screenshot:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于 `blackOutScreen` 组件的图像属性，最后一步是将其 **Color** 设置为以下截图所示的值：
- en: '![Figure 10.6 – Set the blackOutScreen Image Component Color values (RGBA)
    to the ones in this screenshot'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.6 – 将 blackOutScreen 图像组件颜色值（RGBA）设置为截图中的值'
- en: '](img/Figure_10.06_B18381.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.06_B18381.jpg)'
- en: Figure 10.6 – Set the blackOutScreen Image Component Color values (RGBA) to
    the ones in this screenshot
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 将 blackOutScreen 图像组件颜色值（RGBA）设置为截图中的值
- en: We will now have a sheet of semi-darkness across the screen.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，屏幕上将会出现一片半暗的屏幕。
- en: 'Now, let''s add the **Pause** text. To do that, follow these steps:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加 **Pause** 文本。为此，请按照以下步骤操作：
- en: In the `PauseScreen` game object and select `PauseText`.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PauseScreen` 游戏对象中选中 `PauseText`。
- en: 'This time, give `PauseText`''s **Rect Transform** properties the following
    values:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这次，给 `PauseText` 的 **Rect Transform** 属性设置以下值：
- en: '![Figure 10.7 – Set the PauseText Rect Transform property values to the ones
    shown in this screenshot'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.7 – 将PauseText Rect Transform属性值设置为截图中所显示的值'
- en: '](img/Figure_10.07_B18381.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.07_B18381.jpg)'
- en: Figure 10.7 – Set the PauseText Rect Transform property values to the ones shown
    in this screenshot
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7 – 将PauseText Rect Transform属性值设置为截图中所显示的值
- en: Next, we need to add the `PauseText` game object.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要添加`PauseText`游戏对象。
- en: With `PauseText` still selected, click the `Text` until you can see it in the
    drop-down list. Once you do, select it.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然选择`PauseText`，点击`Text`直到你能在下拉列表中看到它。一旦做到这一点，就选择它。
- en: 'Change the settings of **Text Component** to the ones shown in the following
    screenshot:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**文本组件**的设置更改为以下截图中所显示的设置：
- en: '![Figure 10.8 – Update all of the PauseText Text Component property values
    to the ones shown in this screenshot'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.8 – 将所有PauseText文本组件属性值更新为截图中所显示的值'
- en: '](img/Figure_10.08_B18381.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.08_B18381.jpg)'
- en: Figure 10.8 – Update all of the PauseText Text Component property values to
    the ones shown in this screenshot
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8 – 将所有PauseText文本组件属性值更新为截图中所显示的值
- en: If you require more information on **Text Component**, check out the *Applying
    text and images to your scenes* section in [*Chapter 8*](B18381_08_Epub.xhtml#_idTextAnchor150),
    *Adding Custom Fonts and UI*.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要有关**文本组件**的更多信息，请查看[*第8章*](B18381_08_Epub.xhtml#_idTextAnchor150)中的*将文本和图像应用于你的场景*部分，*添加自定义字体和UI*。
- en: 'The following screenshot shows what the **Hierarchy** and **Scene** views currently
    look like:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了当前**层次结构**和**场景**视图的样式：
- en: '![Figure 10.9 – The Pause text should look like this'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.9 – 暂停文本应看起来像这样'
- en: '](img/Figure_10.09_B18381.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.09_B18381.jpg)'
- en: Figure 10.9 – The Pause text should look like this
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9 – 暂停文本应看起来像这样
- en: We have our pause title customized and centered. Now, let's move on to some
    sliders for the **Music** and **Effects** volume settings. We'll make a start
    on the **Music** slider and then duplicate it to the other side of the screen
    for the **Effects** slider.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经自定义并居中了暂停标题。现在，让我们继续为**音乐**和**效果**音量设置添加一些滑块。我们将从**音乐**滑块开始，然后将其复制到屏幕的另一侧用于**效果**滑块。
- en: Adding a volume UI slider to the Pause screen
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将音量UI滑块添加到暂停屏幕
- en: In this section, we are going to give the pause screen its title name and create
    and customize the pause screen volume sliders for our game's music and its sound
    effects.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将为暂停屏幕提供标题名称，并为游戏的音乐及其音效创建和自定义暂停屏幕音量滑块。
- en: 'To create, customize, and position the **Music** slider, follow these steps:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建、自定义和定位**音乐**滑块，请按照以下步骤操作：
- en: 'Right-click the `PauseScreen` game object in the **Hierarchy** window. Then,
    from the dropdown, select **UI**, followed by **Slider**, as shown in the following
    screenshot:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中右键单击“PauseScreen”游戏对象。然后，从下拉菜单中选择**UI**，接着选择**滑块**，如图所示：
- en: '![Figure 10.10 – Add a Slider from the UI dropdown'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.10 – 从UI下拉菜单添加一个滑块'
- en: '](img/Figure_10.10_B18381.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.10_B18381.jpg)'
- en: Figure 10.10 – Add a Slider from the UI dropdown
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10 – 从UI下拉菜单添加一个滑块
- en: Select the newly created `Slider` game object, right-click it, and rename it
    `Music`.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择新创建的`Slider`游戏对象，右键单击它，并将其重命名为`Music`。
- en: 'Next, position the `Music` slider by changing its **Rect Transform** properties
    to the ones shown in the following screenshot:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过更改其**Rect Transform**属性到以下截图中所显示的值来定位“音乐”滑块：
- en: '![Figure 10.11 – Set the Music Rect Transform property values to the ones shown
    here'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.11 – 将音乐Rect Transform属性值设置为这里所示'
- en: '](img/Figure_10.11_B18381.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.11_B18381.jpg)'
- en: Figure 10.11 – Set the Music Rect Transform property values to the ones shown
    here
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11 – 将音乐Rect Transform属性值设置为这里所示
- en: We will now change the color of the `Music` slider's bar to make it look more
    suited for the pause screen. We'll do this by changing it from light gray to red.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将改变“音乐”滑块的条形颜色，使其更适合暂停屏幕。我们将将其从浅灰色改为红色。
- en: 'To change the color of the slider, do the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 要更改滑块的颜色，请执行以下操作：
- en: Click the arrow to the left of the `Music` game object in the `Fill Area` game
    object.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击`Fill Area`游戏对象中`Music`游戏对象左侧的箭头。
- en: 'Select the `Fill` game object from the dropdown of the `Music` game object,
    as shown in the following screenshot, just as it would look in the **Hierarchy**
    window:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从“音乐”游戏对象的下拉菜单中选择“填充”游戏对象，如图所示，就像它在**层次结构**窗口中看起来一样：
- en: '![Figure 10.12 – Select Fill from the Fill Area dropdown in the Hierarchy window'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.12 – 在层次结构窗口的填充区域下拉菜单中选择填充'
- en: '](img/Figure_10.12_B18381.jpg)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure_10.12_B18381.jpg]'
- en: Figure 10.12 – Select Fill from the Fill Area dropdown in the Hierarchy window
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.12 – 在层次结构窗口的填充区域下拉列表中选择填充
- en: 'With `Fill` still selected, in its **Inspector** window, change the **Image**
    component''s **Color** value to red, as shown in the following screenshot:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然选择`Fill`的情况下，在其**检查器**窗口中，将**图像**组件的**颜色**值更改为红色，如图所示以下截图：
- en: '![Figure 10.13 – Change Fill Image Component Color values to the ones shown
    in this screenshot'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.13 – 将填充图像组件的颜色值更改为本截图中的值'
- en: '](img/Figure_10.13_B18381.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.13_B18381.jpg]'
- en: Figure 10.13 – Change Fill Image Component Color values to the ones shown in
    this screenshot
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.13 – 将填充图像组件的颜色值更改为本截图中的值
- en: 'If you still have the `Fill` game object selected, you can view the slider''s
    red backgroundby adjusting the **Value** slider at the bottom of the **Slider**
    component in the **Inspector** window, as shown in the following screenshot:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然选择了`Fill`游戏对象，你可以通过调整**检查器**窗口中**滑块**组件底部的**值**滑块来查看滑块的红色背景，如图所示以下截图：
- en: '![Figure 10.14 – Update the Fill Slider Component values to the ones in this
    screenshot'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.14 – 将填充滑块组件的值更新到本截图中的值'
- en: '](img/Figure_10.14_B18381.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.14_B18381.jpg]'
- en: Figure 10.14 – Update the Fill Slider Component values to the ones in this screenshot
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.14 – 将填充滑块组件的值更新到本截图中的值
- en: Also, as shown in the previous screenshot, we need to set the slider's `-80`
    and its `0`. The reason for this is that in the next chapter, these will match
    the same values as the Audio Mixer.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如前一个截图所示，我们需要设置滑块的`-80`和它的`0`。这样做的原因是，在下一章中，这些值将与音频混音器的相同值匹配。
- en: 'The `Music` slider is set to the right size; we just need to tweak the handle
    so it isn''t so stretched and is easier to click or drag with our fingers. Follow
    these steps to do so:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐滑块的大小已经设置好了；我们只需要调整把手，使其不那么拉伸，更容易用手指点击或拖动。按照以下步骤进行操作：
- en: In the `Handle` game object. Then, select it.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Handle`游戏对象中。然后，选择它。
- en: In the `Image` component to stop the `Handle` game object from looking so stretched.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Image`组件中停止`Handle`游戏对象看起来那么拉伸。
- en: With `Handle` still selected, change its `3` on all axes.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然选择`Handle`的情况下，将所有轴上的`3`进行更改。
- en: 'The following screenshot shows what our handle looks like now:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们的把手现在看起来是什么样子：
- en: '![Figure 10.15 – The handle of the slider has now been visually updated'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.15 – 滑块的把手现在已视觉更新'
- en: '](img/Figure_10.15_B18381.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.15_B18381.jpg]'
- en: Figure 10.15 – The handle of the slider has now been visually updated
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.15 – 滑块的把手现在已视觉更新
- en: 'The `Music` slider is now set. This means we can move on to the text so that
    we can label the slider for the player. To give the slider its own UI text, we
    need to do the following:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐滑块现在已设置。这意味着我们可以继续到文本部分，以便我们可以为玩家标注滑块。为了给滑块添加自己的UI文本，我们需要执行以下操作：
- en: In the `PauseScreen` game object and from the drop-down list, select **UI**,
    followed by **Text**.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PauseScreen`游戏对象和下拉列表中，选择**UI**，然后选择**文本**。
- en: Right-click our newly created `Text` game object and select `MusicText`.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击我们新创建的`Text`游戏对象并选择`MusicText`。
- en: 'With the `MusicText` game object still selected, change its **Rect Transform**
    to the following values to position and scale the text in the correct location:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然选择`MusicText`游戏对象的情况下，将其**矩形变换**更改为以下值以定位和缩放文本到正确的位置：
- en: '![Figure 10.16 – Change the values of the MusicText Rect Transform'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.16 – 更改MusicText矩形变换的值'
- en: '](img/Figure_10.16_B18381.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.16_B18381.jpg]'
- en: Figure 10.16 – Change the values of the MusicText Rect Transform
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.16 – 更改MusicText矩形变换的值
- en: 'With the `MusicText` game object still selected in the **Inspector** window,
    update the **Text** component values to the following property values:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中仍然选择`MusicText`游戏对象，更新**文本**组件的值到以下属性值：
- en: '![Figure 10.17 – Update the MusicText Text Component property values to the
    ones shown in this screenshot'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.17 – 更新MusicText文本组件属性值到本截图中的值'
- en: '](img/Figure_10.17_B18381.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.17_B18381.jpg]'
- en: Figure 10.17 – Update the MusicText Text Component property values to the ones
    shown in this screenshot
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 10.17 – 更新MusicText文本组件属性值到本截图中的值
- en: 'Our pause screen is starting to take shape. The following screenshot shows
    what we currently have:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的暂停屏幕开始成形。以下截图显示了我们目前拥有的内容：
- en: '![Figure 10.18 – We now have a Music Volume Slider'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.18 – 我们现在有了音乐音量滑块'
- en: '](img/Figure_10.18_B18381.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.18_B18381.jpg]'
- en: Figure 10.18 – We now have a Music Volume Slider
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – 现在我们有一个音乐音量滑块
- en: We can now copy and paste our music text and slider to the other side of the
    screen and tweak some of its property values so that it will be identified as
    the sound effects volume bar.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以将我们的音乐文本和滑块复制并粘贴到屏幕的另一侧，并调整一些属性值，以便它被识别为音效音量条。
- en: 'To duplicate and tweak the music text and slider, do the following:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要复制并调整音乐文本和滑块，请按照以下步骤操作：
- en: Hold *Ctrl* (*Command* on Mac) and select `MusicText` and `Music` from the **Hierarchy**
    window so that they are highlighted. Then, press *D* on the keyboard to duplicate
    the two game objects.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按 *Ctrl* (*Command* 在 Mac 上) 并从 **Hierarchy** 窗口中选择 `MusicText` 和 `Music` 以便它们被突出显示。然后，按键盘上的
    *D* 键来复制这两个游戏对象。
- en: Select the `Music (1)` game object, right-click it, select `Effects`.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `Music (1)` 游戏对象，右键点击它，选择 `Effects`。
- en: Select the `MusicText (1)` game object, right-click it, select `EffectsText`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 `MusicText (1)` 游戏对象，右键点击它，选择 `EffectsText`。
- en: 'With `EffectsText` still selected, update its **Rect Transform** in the **Inspector**
    window with the following property values:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `EffectsText` 仍然被选中时，在 **Inspector** 窗口中更新其 **Rect Transform** 属性，使用以下属性值：
- en: '![Figure 10.19 – Update the EffectsText Rect Transform property values to the
    ones shown in this screenshot'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.19 – 更新 EffectsText Rect Transform 属性值到本截图所示]'
- en: '](img/Figure_10.19_B18381.jpg)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.19_B18381.jpg]'
- en: Figure 10.19 – Update the EffectsText Rect Transform property values to the
    ones shown in this screenshot
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – 更新 EffectsText Rect Transform 属性值到本截图所示
- en: 'With `EffectsText` still selected, we can now pay attention to renaming the
    text. The rest of EffectsText''s `MUSIC` to `EFFECTS`, as shown in the following
    screenshot:'
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `EffectsText` 仍然被选中时，我们现在可以注意重命名文本。其余的 EffectsText 的 `MUSIC` 更改为 `EFFECTS`，如以下截图所示：
- en: '![Figure 10.20 – Change the EffectsText Text Component text from MUSIC to EFFECTS'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.20 – 将 EffectsText Text Component 文本从 MUSIC 更改为 EFFECTS]'
- en: '](img/Figure_10.20_B18381.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.20_B18381.jpg]'
- en: Figure 10.20 – Change the EffectsText Text Component text from MUSIC to EFFECTS
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20 – 将 EffectsText Text Component 文本从 MUSIC 更改为 EFFECTS
- en: 'Next, we can move our **Effects** slider over so that it sits below the **EFFECTS**
    text in our scene view. To do this, follow these steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将我们的 **Effects** 滑块移动到场景视图中 **EFFECTS** 文本下方。为此，请按照以下步骤操作：
- en: 'Select the `Effects` game object in the **Hierarchy** window. In the **Inspector**
    window, change its **Rect Transform** properties to the ones shown in the following
    screenshot:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 窗口中选择 `Effects` 游戏对象。在 **Inspector** 窗口中，将它的 **Rect Transform**
    属性更改为以下截图所示：
- en: '![Figure 10.21 – Update the Effects Rect Transform Component property values'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.21 – 更新 Effects Rect Transform 组件属性值]'
- en: '](img/Figure_10.21_B18381.jpg)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.21_B18381.jpg]'
- en: Figure 10.21 – Update the Effects Rect Transform Component property values
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.21 – 更新 Effects Rect Transform 组件属性值
- en: We are nearly done with our pause screen in terms of its visual elements. The
    last two things we have to configure are the **Quit** and **Resume** buttons.
    As with the slider game objects, we can make one, copy and paste it to create
    a second, and then edit them.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在视觉元素方面，我们的暂停屏幕几乎完成了。最后两件事是我们需要配置的 **Quit** 和 **Resume** 按钮。与滑块游戏对象一样，我们可以创建一个，复制并粘贴以创建第二个，然后编辑它们。
- en: 'To create and customize a **Quit** button, do the following:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建和自定义一个 **Quit** 按钮，请按照以下步骤操作：
- en: Right-click the `PauseScreen` game object in the **Hierarchy** window and select
    **UI**, then **Button**, from the drop-down list.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 窗口中右键点击 `PauseScreen` 游戏对象，然后从下拉列表中选择 **UI**，然后选择 **Button**。
- en: With the newly created `Button` game object, we can rename it to `Quit`; right-click
    the `Button` game object in the `Button` to `Quit`.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用新创建的 `Button` 游戏对象，我们可以将其重命名为 `Quit`；在 `Button` 中右键点击 `Button` 游戏对象并将其重命名为
    `Quit`。
- en: Now, we can put the `Quit` game object into the correct location and resize
    it within our `PauseScreen` game object.
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将 `Quit` 游戏对象放置到正确的位置，并在 `PauseScreen` 游戏对象内调整其大小。
- en: 'With the `Quit` game object still selected, change its **Rect Transform** properties
    in the **Inspector** window to the ones shown in the following screenshot:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Quit` 游戏对象仍然被选中时，在 **Inspector** 窗口中将其 **Rect Transform** 属性更改为以下截图所示：
- en: '![Figure 10.22 – Update the Quit Rect Transform property values'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.22 – 更新 Quit Rect Transform 属性值]'
- en: '](img/Figure_10.22_B18381.jpg)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_10.22_B18381.jpg]'
- en: Figure 10.22 – Update the Quit Rect Transform property values
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.22 – 更新 Quit Rect Transform 属性值
- en: 'The `Quit` game object will now be in the bottom right of the pause screen:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`Quit` 游戏对象将位于暂停屏幕的右下角：
- en: '![Figure 10.23 – Our Quit button is added to the pause screen'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.23 – 我们的游戏退出按钮已添加到暂停屏幕'
- en: '](img/Figure_10.23_B18381.jpg)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.23_B18381.jpg)'
- en: Figure 10.23 – Our Quit button is added to the pause screen
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.23 – 我们的游戏退出按钮已添加到暂停屏幕
- en: Next, we can customize it by changing the button's sprite, color, and text.
    We'll start with the button's sprite by taking off the curved corners that we
    can see in the previous screenshot.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以通过更改按钮的精灵、颜色和文本来自定义它。我们将从移除之前截图中所见的圆角按钮精灵开始。
- en: 'With our `Quit` button still selected, we can remove the single sprite by doing
    the following:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在仍然选择我们的 `Quit` 按钮的情况下，我们可以通过以下步骤移除单个精灵：
- en: In the **Inspector** window, click the remote button in the **Image** component
    at the top right (denoted as **1** in the following screenshot).
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **检查器** 窗口中，点击右上角的远程按钮（以下截图中的 **1** 所示）。
- en: 'A new window will appear. Select **None** at the top from the dropdown (denoted
    as **2** in the following screenshot):'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一个新窗口。从下拉菜单中选择 **无**（以下截图中的 **2** 所示）：
- en: '![Figure 10.24 – Remove the Source Image sprite for the Quit button'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.24 – 移除退出按钮的源图像精灵'
- en: '](img/Figure_10.24_B18381.jpg)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.24_B18381.jpg)'
- en: Figure 10.24 – Remove the Source Image sprite for the Quit button
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.24 – 移除退出按钮的源图像精灵
- en: 'Next, we''ll change the color of the buttons, as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将更改按钮的颜色，如下所示：
- en: With the `Quit` game object still selected in the **Hierarchy** window, we can
    change the **Normal Color** property on **Button** **Component** in the **Inspector**
    window.
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 窗口中仍然选择 `Quit` 游戏对象，我们可以在 **检查器** 窗口中更改 **按钮组件** 的 **正常颜色** 属性。
- en: Select the color field titled `255`, `0`, `0`, `150`.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择标题为 `255`、`0`、`0`、`150` 的颜色字段。
- en: The next thing we need to do to the button is to change its text.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们需要对按钮做的下一件事是更改其文本。
- en: With our `Quit` game object still selected in the **Hierarchy** window, select
    the drop-down arrow to the left of its name in the **Hierarchy** window.
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 窗口中仍然选择我们的 `Quit` 游戏对象，选择其名称左侧的向下箭头。
- en: 'Select the `Text` child game object from the `Quit` game object and give the
    **Text** component in the **Inspector** window the following property settings:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Quit` 游戏对象中选择 `Text` 子游戏对象，并在 **检查器** 窗口中的 **文本** 组件中设置以下属性设置：
- en: '![Figure 10.25 – Update the Text game object''s Text Component to the values
    shown in this screenshot'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.25 – 将 Text 游戏对象的 Text 组件更新为截图所示的值'
- en: '](img/Figure_10.25_B18381.jpg)'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.25_B18381.jpg)'
- en: Figure 10.25 – Update the Text game object's Text Component to the values shown
    in this screenshot
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.25 – 将 Text 游戏对象的 Text 组件更新为截图所示的值
- en: 'We will be left with a button that looks more fitting for our game:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到一个看起来更适合我们游戏的按钮：
- en: '![Figure 10.26 – Our Quit button now looks more suitable for our game'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.26 – 我们的游戏退出按钮现在看起来更适合我们的游戏'
- en: '](img/Figure_10.26_B18381.jpg)'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.26_B18381.jpg)'
- en: Figure 10.26 – Our Quit button now looks more suitable for our game
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.26 – 我们的游戏退出按钮现在看起来更适合我们的游戏
- en: The last thing to do in this section is to duplicate the `Quit` game object
    we have just created and rename the text `RESUME`. The **Resume** button will
    be used to cancel the pause screen and let the player continue playing the game.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中最后要做的就是复制我们刚刚创建的 `Quit` 游戏对象，并将文本重命名为 `RESUME`。**Resume** 按钮将用于取消暂停屏幕，让玩家继续玩游戏。
- en: 'To create the `Resume` game object, we will need to do the following:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建 `Resume` 游戏对象，我们需要执行以下操作：
- en: Select the `Quit` game object in the **Hierarchy** window.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **层次结构** 窗口中选择 `Quit` 游戏对象。
- en: Press *Ctrl* (*command* on Mac) and *D* on the keyboard to duplicate the game
    object.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下键盘上的 *Ctrl* 键（在Mac上为 *command* 键）和 *D* 键来复制游戏对象。
- en: Rename the duplicated game object from `Quit (1)` to `Resume`.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复制的游戏对象从 `Quit (1)` 重命名为 `Resume`。
- en: 'With `Resume` still selected, change its **Rect Transform** property values
    in the **Inspector** window to the ones shown in the following screenshot:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在仍然选择 `Resume` 的情况下，在 **检查器** 窗口中更改其 **矩形变换** 属性值，如以下截图所示：
- en: '![Figure 10.27 – Give the Resume Rect Transform the same property values as
    shown in this screenshot'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.27 – 给 Resume 矩形变换赋予与截图相同的属性值'
- en: '](img/Figure_10.27_B18381.jpg)'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.27_B18381.jpg)'
- en: Figure 10.27 – Give the Resume Rect Transform the same property values as shown
    in this screenshot
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.27 – 给 Resume 矩形变换赋予与截图相同的属性值
- en: 'All that''s left for the `Resume` game object is to rename its text from `QUIT`
    to `RESUME` by expanding the **Resume** selection by clicking on its arrow on
    the left in the **Hierarchy** window. Follow these steps:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 `Resume` 游戏对象，剩下的只是将其文本从 `QUIT` 更改为 `RESUME`。通过在 **Hierarchy** 窗口中点击左侧的箭头来扩展
    **Resume** 选择，遵循以下步骤：
- en: Select the `Text` game object in the **Hierarchy** window.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 窗口中选择 `Text` 游戏对象。
- en: 'In the `QUIT` to `RESUME`, as shown in the following screenshot:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `QUIT` 到 `RESUME`，如图所示：
- en: '![Figure 10.28 – The Resume button'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.28 – 暂停按钮'
- en: '](img/Figure_10.28_B18381.jpg)'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.28 – 图 10.28_B18381.jpg](img/Figure_10.28_B18381.jpg)'
- en: Figure 10.28 – The Resume button
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.28 – 暂停按钮
- en: The pause screen is now visually complete and can support various screen ratios
    thanks to the use of our **Anchors** from our **Rect Transform** properties. Earlier,
    we mentioned that we will have a pause button in the top-left corner of the game
    screen so that we can pause our game and load up the pause screen that we've just
    made.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停屏幕现在在视觉上已经完成，并且由于使用了我们的 **Anchors**（来自 **Rect Transform** 属性），可以支持各种屏幕比例。之前我们提到，我们将在游戏屏幕的左上角有一个暂停按钮，这样我们就可以暂停游戏并加载我们刚刚制作的暂停屏幕。
- en: 'Everything we did in this section was achieved within the Unity Editor without
    the use of any code. In this section, we covered the following topics:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中我们所做的一切都是在 Unity 编辑器中完成的，没有使用任何代码。在本节中，我们涵盖了以下主题：
- en: How to access our pause screen
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何访问我们的暂停屏幕
- en: How the pause screen would overlay the levels in our game
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 暂停屏幕将如何覆盖我们游戏中的关卡
- en: Applying a semi-transparent blackout to dim the game as the pause screen's background
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在暂停屏幕的背景上应用半透明的黑屏以降低游戏亮度
- en: Creating sliders for our music and effects
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为我们的音乐和效果创建滑块
- en: Applying custom text to various points
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义文本应用到各个点
- en: Using Unity's **Button** component to give the player the option to quit or
    resume the game
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Unity 的 **Button** 组件为玩家提供退出或继续游戏的选择
- en: Now, let's make the pause button. After that, we can start looking at hooking
    all these sliders and buttons up with our code.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们制作暂停按钮。之后，我们可以开始查看如何将这些滑块和按钮与我们的代码连接起来。
- en: Adding a game pause button
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加游戏暂停按钮
- en: At the beginning of the previous section, we briefly spoke about the **in-game
    pause button**. This button will appear at the start of a level and once pressed,
    the player, enemies, and bullets that have been fired will freeze in time. In
    this section, we will only be focusing on the visuals, just as we did with our
    pause screen in the previous section.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节的开头，我们简要地提到了 **游戏内暂停按钮**。这个按钮将在关卡开始时出现，一旦按下，玩家、敌人和已经发射的子弹将暂停时间。在本节中，我们只关注视觉效果，就像我们在上一节中处理暂停屏幕一样。
- en: 'The pause button will act slightly differently from the previous buttons we
    have made. This time, the button will be an `toggle` game object, do the following:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 暂停按钮的行为将略不同于我们之前制作的按钮。这次，按钮将是一个 `toggle` 游戏对象，执行以下操作：
- en: 'Select the `PauseContainer` game object in the **Hierarchy** window, right-click
    it, and select **UI** from the drop-down list, followed by **Toggle**, as shown
    in the following screenshot:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Hierarchy** 窗口中选择 `PauseContainer` 游戏对象，右键单击它，从下拉列表中选择 **UI**，然后选择 **Toggle**，如图所示：
- en: '![Figure 10.29 – Add a Toggle (on/off switch)'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.29 – 添加一个 Toggle（开关）'
- en: '](img/Figure_10.29_B18381.jpg)'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.29_B18381.jpg](img/Figure_10.29_B18381.jpg)'
- en: Figure 10.29 – Add a Toggle (on/off switch)
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.29 – 添加一个 Toggle（开关）
- en: With the `Toggle` game object still selected in the `PauseButton`.
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PauseButton` 中仍然选择 `Toggle` 游戏对象。
- en: 'Currently, our `PauseButton` looks nothing like how we want it to and resembles
    a tick box, as shown in the following screenshot. However, we can fix this and
    make it look like a normal-looking **pause** button but with the functionality
    of a toggle (on or off):'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，我们的 `PauseButton` 看起来与我们想要的样子完全不同，就像下面的截图所示，它更像是一个复选框。然而，我们可以修复这个问题，让它看起来像一个正常的**暂停**按钮，但具有切换（开启或关闭）的功能：
- en: '![Figure 10.30 – We are going to change the tick box to a pause button'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.30 – 我们将把复选框改为暂停按钮'
- en: '](img/Figure_10.30_B18381.jpg)'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.30_B18381.jpg](img/Figure_10.30_B18381.jpg)'
- en: Figure 10.30 – We are going to change the tick box to a pause button
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.30 – 我们将把复选框改为暂停按钮
- en: 'To alter the current look of the `PauseButton` game object so that it looks
    like the prospective one in the preceding screenshot, we need to do the following:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 要改变 `PauseButton` 游戏对象当前的外观，使其看起来像前面截图中的预期样子，我们需要执行以下操作：
- en: 'In the `PauseButton` game object to expand its content, as shown in the following
    screenshot:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**暂停按钮**游戏对象中展开其内容，如下截图所示：
- en: '![Figure 10.31 – Expand out all the PauseButton children in the Hierarchy window'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.31 – 在层次结构窗口中展开所有暂停按钮子对象'
- en: '](img/Figure_10.31_B18381.jpg)'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.31_B18381.jpg)'
- en: Figure 10.31 – Expand out all the PauseButton children in the Hierarchy window
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.31 – 在层次结构窗口中展开所有暂停按钮子对象
- en: Select the `Label` game object in the **Hierarchy** window and press *Delete*
    on your keyboard.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中选择`Label`游戏对象，并在键盘上按*Delete*键。
- en: The **Toggle** label will be removed.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 将**切换**标签删除。
- en: 'Next, we will set our game object to its correct position and scale. Select
    `PauseButton` in the **Hierarchy** window and give its **Rect Transform** the
    following properties in the **Inspector** window:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将设置我们的游戏对象到正确的位置和缩放。在**层次结构**窗口中选择`PauseButton`，并在**检查器**窗口中为其**矩形变换**设置以下属性：
- en: '![Figure 10.32 – Update the PauseButton Rect Transform property values'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.32 – 更新暂停按钮矩形变换属性值'
- en: '](img/Figure_10.32_B18381.jpg)'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.32_B18381.jpg)'
- en: Figure 10.32 – Update the PauseButton Rect Transform property values
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.32 – 更新暂停按钮矩形变换属性值
- en: 'The toggle will now be placed and scaled to the top-left corner of the game
    canvas, as circled in the following screenshot:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将切换放置并缩放到游戏画布的左上角，如下截图所示：
- en: '![Figure 10.33 – The pause button''s anchors are set in the top-left corner
    of the screen'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.33 – 暂停按钮的锚点设置为屏幕的左上角'
- en: '](img/Figure_10.33_B18381.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.33_B18381.jpg)'
- en: Figure 10.33 – The pause button's anchors are set in the top-left corner of
    the screen
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.33 – 暂停按钮的锚点设置为屏幕的左上角
- en: 'Notice how our `PauseButton` game object that holds another game object titled
    `Background` doesn''t have its `Background` game object selected in the **Hierarchy**
    window:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意我们的**暂停按钮**游戏对象包含另一个名为`Background`的游戏对象，但在**层次结构**窗口中没有选择其`Background`游戏对象：
- en: '![Figure 10.34 – Select the Background game object from the Hierarchy window'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.34 – 从层次结构窗口中选择背景游戏对象'
- en: '](img/Figure_10.34_B18381.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.34_B18381.jpg)'
- en: Figure 10.34 – Select the Background game object from the Hierarchy window
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.34 – 从层次结构窗口中选择背景游戏对象
- en: 'To correct the `Background` game object''s `Background` game object and give
    it the following values in the **Inspector** window:'
  id: totrans-339
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要纠正**背景**游戏对象的**背景**游戏对象，并在**检查器**窗口中设置以下值：
- en: '![Figure 10.35 – Set the Background Rect Transform property values to the ones
    shown in this screenshot'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.35 – 将背景矩形变换属性值设置为截图中的值'
- en: '](img/Figure_10.35_B18381.jpg)'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.35_B18381.jpg)'
- en: Figure 10.35 – Set the Background Rect Transform property values to the ones
    shown in this screenshot
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.35 – 将背景矩形变换属性值设置为截图中的值
- en: The `Background` game object is now the same size as the `PauseButton` game
    object with regard to the **Anchor** size.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在**锚点**大小方面，**背景**游戏对象现在与**暂停按钮**游戏对象的大小相同。
- en: 'We can now start tweaking the size and filling the **Background** with a suitable
    image. We''ll replace the white-square-with-a-tick icon with a dark circle. Follow
    these steps to do so:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始调整大小并使用合适的图像填充**背景**。我们将用深色圆圈替换带有勾选标记的白色正方形图标。按照以下步骤进行操作：
- en: With `PauseButton` still expanded in the `Background` game object if you haven't
    done so already.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未这样做，在**背景**游戏对象中展开`PauseButton`。
- en: Select the small remote button to the right of **Source Image** in the **Image**
    component in the **Inspector** window.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口中的**图像**组件的右侧选择**源图像**的小遥控按钮。
- en: From the dropdown that appears, replace its current selection with `UISprite`
    and change it to **Knob**. Its selection is shown in the following screenshot.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从出现的下拉菜单中，用`UISprite`替换其当前选择，并将其更改为**旋钮**。其选择在以下截图中显示。
- en: The square has now become a circle. Now, we can alter its color so that it matches
    the rest of our game's UI.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 现在正方形已经变成了圆形。现在，我们可以改变它的颜色，使其与游戏UI的其余部分相匹配。
- en: 'With the `Background` game object still selected, select its `92`, `92`, `92`,
    and `123`, as shown in the following screenshot:'
  id: totrans-349
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择**背景**游戏对象的情况下，选择其`92`、`92`、`92`和`123`，如下截图所示：
- en: '![Figure 10.36 – Our Background Image Component should have the same values
    as the ones shown in this screenshot'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.36 – 我们的游戏背景图像组件应具有与截图中的相同值'
- en: '](img/Figure_10.36_B18381.jpg)'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.36_B18381.jpg)'
- en: Figure 10.36 – Our Background Image Component should have the same values as
    the ones shown in this screenshot
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.36 – 我们背景图像组件应具有与本截图所示相同的值
- en: Next, we can make the gray oval shape into a circle.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以将灰色椭圆形形状变成圆形。
- en: Still in the **Image** component, set **Image Type** to **Simple** and tick
    the **Preserve Aspect** box, as shown in the previous screenshot.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然在**图像**组件中，将**图像类型**设置为**简单**，并勾选**保持纵横比**框，如图中所示的前一个屏幕截图。
- en: '**Image Type** offers different behaviors to an image; for example, **Sliced**
    works well as a progress bar/timer to increment how much of the image can be seen
    over time.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**图像类型**为图像提供不同的行为；例如，**分割**在进度条/计时器中表现良好，可以随时间增加可见图像的部分。'
- en: '**Preserve Aspect** means that no matter which way the image is scaled, it
    will remain in its original form – there will be no squashed or stretched-looking
    images.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**保持纵横比**意味着无论图像如何缩放，它都将保持其原始形式 – 将不会有挤压或拉伸的外观。'
- en: 'Here is a close-up view of `PauseButton` in the **Scene** view:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 这是**场景**视图中`PauseButton`的特写视图：
- en: '![Figure 10.37 – What our pause button currently looks like'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.37 – 我们暂停按钮当前的外观'
- en: '](img/Figure_10.37_B18381.jpg)'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.37_B18381.jpg)'
- en: Figure 10.37 – What our pause button currently looks like
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.37 – 我们暂停按钮当前的外观
- en: 'Now, we need to replace the tick image with a large pause symbol. Follow these
    steps to do so:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将勾选图像替换为一个大型的暂停符号。按照以下步骤进行操作：
- en: 'Select the `Checkmark` game object from the `Background` game object) and in
    the **Inspector** window, give its **Rect Transform** the following settings:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`Background`游戏对象中选择`Checkmark`游戏对象，并在**检查器**窗口中，为其**矩形变换**设置以下设置：
- en: '![Figure 10.38 – Set the Checkmark Rect Transform property values to the ones
    shown in this screenshot'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.38 – 设置勾选矩形变换属性值到本截图所示'
- en: '](img/Figure_10.38_B18381.jpg)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.38_B18381.jpg)'
- en: Figure 10.38 – Set the Checkmark Rect Transform property values to the ones
    shown in this screenshot
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.38 – 设置勾选矩形变换属性值到本截图所示
- en: With the `Checkmark` game object still selected in `Checkmark` to `pause` by
    clicking on the **remote** button and selecting the **pause** sprite from the
    drop-down list.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Checkmark`中仍然选择`Checkmark`游戏对象，通过点击**远程**按钮并从下拉列表中选择**暂停**精灵来将其设置为`pause`。
- en: Select the `152`, `177`, `178`, `125`.
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`152`、`177`、`178`、`125`。
- en: Change **Image Type** to **Simple** if it isn't already.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未设置，将**图像类型**更改为**简单**。
- en: 'Tick the **Preserve Aspect** box, as shown in the following screenshot:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 勾选**保持纵横比**框，如图中所示的下个屏幕截图：
- en: '![Figure 10.39 – Update the Checkmark Image Component property values to the
    ones shown in this screenshot'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.39 – 更新勾选图像组件属性值到本截图所示'
- en: '](img/Figure_10.39_B18381.jpg)'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.39_B18381.jpg)'
- en: Figure 10.39 – Update the Checkmark Image Component property values to the ones
    shown in this screenshot
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.39 – 更新勾选图像组件属性值到本截图所示
- en: 'The **Scene** window should look something like this, with our pause button
    in the top left:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '**场景**窗口应该看起来像这样，我们的暂停按钮位于左上角：'
- en: '![Figure 10.40 – Our pause button is now visually complete'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.40 – 我们暂停按钮现在视觉上完整'
- en: '](img/Figure_10.40_B18381.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.40_B18381.jpg)'
- en: Figure 10.40 – Our pause button is now visually complete
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.40 – 我们暂停按钮现在视觉上完整
- en: 'Finally, to make it so that the `toggle` button actually does something when
    we click on it, we need to make sure we have an **EventSystem** in our **Hierarchy**
    window. This is very simple to do; follow these steps:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，为了确保当我们在它上点击时，`toggle`按钮实际上会执行某些操作，我们需要确保在我们的**层级**窗口中有一个**EventSystem**。这样做非常简单；按照以下步骤进行：
- en: In the **Hierarchy** window, right-click an open space.
  id: totrans-378
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层级**窗口中，右键单击空白区域。
- en: If there isn't an **EventSystem** in **Hierarchy**, select **UI**, followed
    by **EventSystem**.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果**层级**中没有**EventSystem**，请选择**UI**，然后选择**EventSystem**。
- en: Save the scene.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存场景。
- en: In this section, we mixed our UI images, buttons, text, and sliders on one screen
    that supports various landscape variations.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们在一个支持各种横版变体的屏幕上混合了我们的UI图像、按钮、文本和滑块。
- en: In the next section, we are going to move on to the scripting side of what each
    of the UI components we made in the pause screen will do when the player presses
    the buttons or moves the slider.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续讨论当玩家按下按钮或移动滑块时，我们在暂停屏幕中制作的每个UI组件将执行的操作。
- en: Creating our PauseComponent script
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的PauseComponent脚本
- en: The `PauseComponent` script will have the responsibility of managing anything
    to do with accessing and altering the conditions the pause screen gives the player.
    Here, we will follow a series of subsections that will take us through setting
    up individual segments of the `PauseComponent` script. Before we do that, though,
    we need to create our script. If you don't know how to make a script, then revisit
    the *Setting up our camera* section in [*Chapter 2*](B18381_02_Epub.xhtml#_idTextAnchor048),
    *Adding and Manipulating Objects*. Once you've done that, rename the script `PauseComponent`.
    For maintenance purposes, store your script in the `Assets/Script` folder in the
    **Project** window.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`PauseComponent`脚本将负责管理与访问和修改暂停屏幕提供给玩家的条件相关的所有事情。在这里，我们将遵循一系列小节，这些小节将带我们设置`PauseComponent`脚本的各个部分。在我们这样做之前，我们需要创建我们的脚本。如果你不知道如何创建脚本，那么请回顾[*第2章*](B18381_02_Epub.xhtml#_idTextAnchor048)中的*设置我们的相机*部分，*添加和操作对象*。一旦你完成了这个，将脚本重命名为`PauseComponent`。出于维护目的，在**项目**窗口中将你的脚本存储在`Assets/Script`文件夹中。'
- en: Now, let's move on to the first subsection of the `PauseComponent` script by
    applying logic to the in-game pause button.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续到`PauseComponent`脚本的第一个小节，通过应用游戏中的暂停按钮的逻辑。
- en: PauseScreen basic setup and PauseButton functionality
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂停屏幕基本设置和暂停按钮功能
- en: In this section, we are going to make the pause button appear when the player
    has control of the game in the level. When the player presses the pause button,
    we need to make sure that all the moving components and scrolling textures freeze.
    Finally, we need to introduce the pause screen itself.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使暂停按钮在玩家在关卡中控制游戏时出现。当玩家按下暂停按钮时，我们需要确保所有移动组件和滚动纹理都冻结。最后，我们需要引入暂停屏幕本身。
- en: 'If we start the level in its current state, we will see that the `PauseScreen`
    game object overlays the screen. This looks great, but we need to turn it off
    for the time being. To turn off the `PauseScreen` game object, do the following:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们以当前状态开始关卡，我们会看到`PauseScreen`游戏对象覆盖了屏幕。这看起来很棒，但我们需要暂时关闭它。要关闭`PauseScreen`游戏对象，请执行以下操作：
- en: In the Unity Editor, open the newly created `PauseComponent` script by double-clicking
    the file held in `Assets/Script`.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中，通过双击`Assets/Script`中持有的文件来打开新创建的`PauseComponent`脚本。
- en: 'With the script open, add the `UnityEngine` UI library at the top to give us
    extra functionality for our code (manipulate text and image components), including
    the usual `UnityEngine` library and the name of the class, along with its inheritance
    of `MonoBehaviour`:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本打开后，在顶部添加`UnityEngine` UI库，以便为我们的代码提供额外的功能（操作文本和图像组件），包括常用的`UnityEngine`库和类的名称，以及其继承自`MonoBehaviour`：
- en: '[PRE17]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the following variable to the `PauseComponent` class:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下变量添加到`PauseComponent`类中：
- en: '[PRE18]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`[SerializeField]` will keep the `pauseScreen` variable exposed in the `public`.
    The second line is a `GameObject` type that will store a reference to the entire
    `PauseScreen` game object.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`[SerializeField]`将使`pauseScreen`变量在`public`中可见。第二行是一个`GameObject`类型，它将存储对整个`PauseScreen`游戏对象的引用。'
- en: Save the script.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: Back in the Unity Editor, select the `PauseContainer` game object from the `PauseComponent`
    until you see it in the drop-down list.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回到Unity编辑器，从`PauseComponent`中选择`PauseContainer`游戏对象，直到你在下拉列表中看到它。
- en: 'Now, drag and drop the `PauseScreen` game object from the `PauseScreen`, as
    shown in the following screenshot:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`PauseScreen`游戏对象从`PauseScreen`拖放到相应的位置，如下面的截图所示：
- en: '![Figure 10.41 – Drag and drop the PauseScreen game object into the Pause Component
    | Pause Screen field'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.41 – Drag and drop the PauseScreen game object into the Pause Component
    | Pause Screen field](img/Figure_10.41_B18381.jpg)'
- en: '](img/Figure_10.41_B18381.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 10.41 – Drag and drop the PauseScreen game object into the Pause Component
    | Pause Screen field](img/Figure_10.41_B18381.jpg)'
- en: Figure 10.41 – Drag and drop the PauseScreen game object into the Pause Component
    | Pause Screen field
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.41 – 将PauseScreen游戏对象拖放到暂停组件 | 暂停屏幕字段
- en: 'Back in the `PauseComponent` script, we can now turn off the `PauseScreen`
    game object at the beginning of the level and turn it back on when the player
    presses the pause button. To turn `PauseScreen` off, we can do the following:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 回到`PauseComponent`脚本，我们现在可以在关卡开始时关闭`PauseScreen`游戏对象，并在玩家按下暂停按钮时重新打开它。要关闭`PauseScreen`，我们可以执行以下操作：
- en: 'In the `PauseComponent` script, create an `Awake` function and inside it, turn
    the `pauseScreen` game object off, as shown in the following code:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PauseComponent`脚本中，创建一个`Awake`函数，并在其中关闭`pauseScreen`游戏对象，如下面的代码所示：
- en: '[PRE19]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Save the script.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: We can now test it in the Editor when we press the **Play** button at the top
    of the screen. The game will run without the pause screen being shown. Now, we
    can focus on introducing the pause button to the player within a few seconds as
    the level begins.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们按下屏幕顶部的 **播放** 按钮时，我们可以在编辑器中测试它。游戏将运行，而不会显示暂停屏幕。现在，我们可以在关卡开始后的几秒钟内向玩家介绍暂停按钮。
- en: 'Let''s start by creating a method that will turn off/on the visuals and the
    interactability of the pause button for the player:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先创建一个方法，该方法将关闭/打开玩家暂停按钮的视觉效果和交互性：
- en: 'Go back into the `PauseComponent` script and create a method that takes one
    `bool` parameter, as shown in the following code:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回到 `PauseComponent` 脚本，并创建一个接受一个 `bool` 参数的方法，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: With our `PauseComponent` script being attached to the `PauseContainer` game
    object, we can easily access any of the game objects and their components. The
    other two main game objects attached are `PauseScreen` and `PauseButton`. The
    next few pieces of code we will add to our `SetPauseButtonActive` will relate
    to the visuals and interactivity of the `PauseButton` game object.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的 `PauseComponent` 脚本附加到 `PauseContainer` 游戏对象上，我们可以轻松访问任何游戏对象及其组件。附加的其他两个主要游戏对象是
    `PauseScreen` 和 `PauseButton`。接下来我们将添加到 `SetPauseButtonActive` 的几行代码将与 `PauseButton`
    游戏对象的视觉效果和交互性相关。
- en: 'To change the visibility of our `PauseButton`, we need to access its `Toggle`
    component''s `colors` value and store it in a temporary `ColorBlock` type. Enter
    this line of code inside the `SetPauseButtonActive` method:'
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更改我们 `PauseButton` 的可见性，我们需要访问其 `Toggle` 组件的 `colors` 值并将其存储在一个临时的 `ColorBlock`
    类型中。在 `SetPauseButtonActive` 方法中输入以下代码行：
- en: '[PRE21]'
  id: totrans-411
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Next, we need to check the condition of the value by looking at the `bool` parameter
    the method is receiving. If the `switchButton` `bool` is set to off, then we are
    going to set all colors related to the toggle to zero, which is black and zero
    alpha (completely transparent).
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要通过查看方法接收到的 `bool` 参数来检查值的条件。如果 `switchButton` 的 `bool` 设置为关闭，那么我们将所有与切换相关的颜色设置为全零，即黑色和零
    alpha（完全透明）。
- en: 'Enter the following code just after the line of code we entered previously:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前输入的代码行之后输入以下代码：
- en: '[PRE22]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The preceding code shows that we run a check to see whether the `bool` parameter
    is `false`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码显示我们运行了一个检查，以查看 `bool` 参数是否为 `false`。
- en: If `switchButton` does contain a `false` value, then we step into the `if` statement
    and set the `col` (the color of the pause button) `normalColor` property to all
    zero. This means that it doesn't display this button at all. Then, we apply the
    same value to all of the other possible color states for the pause button. We
    also need to set the `Toggle` `interactable` value to `false` so that the player
    can't accidentally press the pause button either.
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `switchButton` 包含一个 `false` 值，那么我们将进入 `if` 语句并将 `col`（暂停按钮的颜色）的 `normalColor`
    属性设置为全零。这意味着它根本不会显示这个按钮。然后，我们将相同的值应用到暂停按钮的所有其他可能的颜色状态上。我们还需要将 `Toggle` 的 `interactable`
    值设置为 `false`，这样玩家就不会意外地按下暂停按钮。
- en: 'The screenshot on the left in the following figure shows the code we''ve just
    entered. The screenshot on the right is the `Toggle` component with the properties
    we have changed in our `if` statement:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图中的左侧截图显示了我们刚刚输入的代码。右侧的截图是经过我们 `if` 语句更改属性的 `Toggle` 组件：
- en: '![Figure 10.42 – The code on the left will manipulate the Toggle property values
    on the right'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.42 – 左侧的代码将操作右侧的 Toggle 属性值'
- en: '](img/Figure_10.42_B18381.jpg)'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.42_B18381.jpg)'
- en: Figure 10.42 – The code on the left will manipulate the Toggle property values
    on the right
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.42 – 左侧的代码将操作右侧的 Toggle 属性值
- en: If `switchButton` is set to `true`, we set the values from all zeros to their
    chosen color values and make the `PauseButton` `intractable`.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 `switchButton` 设置为 `true`，我们将所有零的值设置为所选的颜色值，并使 `PauseButton` 不可交互。
- en: 'Enter the following code just after the preceding code that we just wrote:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚写的代码之后输入以下代码：
- en: '[PRE23]'
  id: totrans-423
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The last two lines after this piece of code are applying the `col` value back
    to the `Toggle` component.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码段之后的最后两行将 `col` 值重新应用到 `Toggle` 组件上。
- en: The second line of code turns the pause symbol on or off. If this wasn't set,
    then the pause button would appear/disappear without affecting the two white pause
    stripes.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行代码打开或关闭暂停符号。如果没有设置，那么暂停按钮将出现/消失，而不会影响两个白色的暂停条纹。
- en: 'The last two `GetComponentInChildren` lines are added after the preceding code,
    which reapplies the color back to the `Toggle` component and the pause symbol
    to on or off with the use of the `switchButton` variable:'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码之后，添加了最后两个 `GetComponentInChildren` 行，这会将颜色重新应用到 `Toggle` 组件，并使用 `switchButton`
    变量将暂停符号设置为开或关：
- en: '[PRE24]'
  id: totrans-427
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, all we need to do is make use of the method we''ve just written. Originally,
    we wanted the pause button to not be in view at the start of the level until the
    player has control of their ship. To turn off the pause button, we need to revisit
    the `Awake` function and do the following:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们只需要使用我们刚刚编写的函数。最初，我们希望暂停按钮在关卡开始时不可见，直到玩家控制他们的飞船。要关闭暂停按钮，我们需要重新访问 `Awake`
    函数并执行以下操作：
- en: '[PRE25]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, I have added two extra lines of code in the `Awake` function. `SetPauseButtonActive(false)`
    turns the pause button off with the method we've just made, while the `Invoke`
    function will delay for 5 seconds until we run the `DelayPauseAppear` method.
    Inside `DelayPauseAppear` is `SetPauseButtonActive(true)`, which is the time when
    our player gains control of their ship.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我在 `Awake` 函数中添加了两行额外的代码。`SetPauseButtonActive(false)` 使用我们刚刚创建的方法关闭暂停按钮，而
    `Invoke` 函数将延迟5秒，直到我们运行 `DelayPauseAppear` 方法。在 `DelayPauseAppear` 中是 `SetPauseButtonActive(true)`，这是我们玩家获得对飞船控制的时间。
- en: 'Add the extra method that we mentioned in the `Invoke` function to turn the
    pause button on, as follows:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Invoke` 函数中添加我们提到的额外方法来打开暂停按钮，如下所示：
- en: '[PRE26]'
  id: totrans-432
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Save the script.
  id: totrans-433
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本。
- en: Back in the Unity Editor, press **Play**; our game will start normally and after
    5 seconds, the pause button will appear in the top-left corner. If we press the
    pause button, it will break and nothing extra will happen. This is because we
    haven't made the pause button do anything when it is pressed.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Unity 编辑器中，按**播放**；我们的游戏将正常开始，5秒后，暂停按钮将出现在左上角。如果我们按下暂停按钮，它将中断，不会发生任何额外的事情。这是因为我们没有在按下暂停按钮时让它执行任何操作。
- en: 'Let''s return to the `PauseComponent` script and add a small method that can
    run when the pause button is pressed. To add a pause method that freezes the game
    and brings up the pause screen we built earlier, follow these steps:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到 `PauseComponent` 脚本，并添加一个可以在按下暂停按钮时运行的小方法。要添加一个暂停方法，该方法冻结游戏并显示我们之前构建的暂停屏幕，请按照以下步骤操作：
- en: 'Reopen the `PauseComponent` script and enter the following method:'
  id: totrans-436
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新打开 `PauseComponent` 脚本并输入以下方法：
- en: '[PRE27]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Within the `PauseGame` method, we set the following:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `PauseGame` 方法中，我们设置以下内容：
- en: We set the pause screen game object's activity to `true`.
  id: totrans-439
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将暂停屏幕游戏对象的活跃度设置为 `true`。
- en: Turn off the pause button (because we have the `QUIT` button to use instead).
  id: totrans-440
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关闭暂停按钮（因为我们有 `QUIT` 按钮可以使用）。
- en: 'Set the game''s `timeScale` to 0, which will stop all moving, animating objects
    in the scene. For more information about `timeScale`, check out the official Unity
    documentation here: [https://docs.unity3d.com/ScriptReference/Time-timeScale.html](https://docs.unity3d.com/ScriptReference/Time-timeScale.html).'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将游戏的 `timeScale` 设置为 0，这将停止场景中所有移动和动画对象。有关 `timeScale` 的更多信息，请查看官方 Unity 文档，[https://docs.unity3d.com/ScriptReference/Time-timeScale.html](https://docs.unity3d.com/ScriptReference/Time-timeScale.html)。
- en: '**timeScale** can also be found in **Time Manager** in the Unity Editor. This
    is located at the top of the **Editor** window, under **Edit | Project Settings
    | Time**.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '**timeScale** 也可以在 Unity 编辑器的**时间管理器**中找到。它位于**编辑器**窗口的顶部，在**编辑 | 项目设置 | 时间**下。'
- en: 'You also have other useful properties such as **Fixed Timestep**, where you
    can change its value to make your physics simulation more precise. For more information
    about **Time Manager** and its properties, check out the following link: [https://docs.unity3d.com/Manual/class-TimeManager.html](https://docs.unity3d.com/Manual/class-TimeManager.html).'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 你还有其他有用的属性，例如**固定时间步长**，你可以更改其值以使你的物理模拟更精确。有关**时间管理器**及其属性的更多信息，请查看以下链接：[https://docs.unity3d.com/Manual/class-TimeManager.html](https://docs.unity3d.com/Manual/class-TimeManager.html)。
- en: Save the script and return to the Editor.
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回到编辑器。
- en: 'Now, we need to attach the new `PauseGame` method to the `PauseButton` event
    system, as follows:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将新的 `PauseGame` 方法附加到 `PauseButton` 事件系统，如下所示：
- en: Select the `PauseButton` game object from the **Hierarchy** window.
  id: totrans-446
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**层次结构**窗口中选择 `PauseButton` 游戏对象。
- en: 'At the bottom of the **Inspector** window, click the plus (**+**) sign to add
    an event:'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**窗口的底部，点击加号（**+**）来添加一个事件：
- en: '![Figure 10.43 – Add an Event to the Toggle Component'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.43 – 向切换组件添加事件'
- en: '](img/Figure_10.43_B18381.jpg)'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_10.43_B18381.jpg)'
- en: Figure 10.43 – Add an Event to the Toggle Component
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.43 – 向切换组件添加事件
- en: Next, drag `PauseContainer`, which contains our `PauseComponent` script, to
    the empty field (denoted as `PauseComponent` from the dropdown (denoted as **2**
    in the following screenshot).
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将包含我们的`PauseComponent`脚本的`PauseContainer`拖到空字段（从下拉菜单中标记为`PauseComponent`）。
- en: Lastly, select the `PauseGame ()` public method (denoted as **3** in the following
    screenshot).
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，选择`PauseGame ()`公共方法（在以下屏幕截图中标记为**3**）。
- en: 'The following screenshot shows the marked-out steps we have gone through in
    selecting the `PauseGame ()` method:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 以下屏幕截图显示了我们在选择`PauseGame ()`方法中经历的标记步骤：
- en: '![Figure 10.44 – Drag PauseContainer from the Hierarchy window into the Event
    slot; finally set its function to PauseGame ()'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.44 – 从层次结构窗口拖动PauseContainer到事件槽；最后将其功能设置为PauseGame ()](img/Figure_10.44_B18381.jpg)'
- en: '](img/Figure_10.44_B18381.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.44 – B18381.jpg](img/Figure_10.44_B18381.jpg)'
- en: Figure 10.44 – Drag PauseContainer from the Hierarchy window into the Event
    slot; finally set its function to PauseGame ()
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.44 – 从层次结构窗口拖动PauseContainer到事件槽；最后将其功能设置为PauseGame ()](img/Figure_10.44_B18381.jpg)'
- en: Now would be a good time to try and see whether the pause screen appears when
    we press the pause button. Press **Play** in the Unity Editor and in the **Game**
    window, press the pause button in the top-left corner when it appears. The pause
    screen will appear; we won't be able to escape from this until we code in the
    logic for our **Resume** and **Quit** buttons.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是尝试查看当我们按下暂停按钮时是否会出现暂停屏幕的好时机。在Unity编辑器中按下**播放**，在**游戏**窗口中，当它出现时，在左上角按下暂停按钮。暂停屏幕将出现；除非我们为我们的**继续**和**退出**按钮编写逻辑，否则我们将无法从中逃脱。
- en: So far in this section, we have given the player the ability to pause the game.
    In the next section, we will make it so that the player will be able to resume
    or quit the game from the pause screen.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本节中，我们已经赋予了玩家暂停游戏的能力。在下一节中，我们将使玩家能够在暂停屏幕中继续或退出游戏。
- en: Resuming or quitting the game from the pause screen
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从暂停屏幕恢复或退出游戏
- en: 'In this subsection, we will continue to extend the `PauseComponent` script
    by adding two methods:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 在本小节中，我们将通过添加两个方法继续扩展`PauseComponent`脚本：
- en: '`Resume`'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`继续`'
- en: '`Quit`'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`退出`'
- en: 'Let''s make a start by adding the logic for the **Resume** button; follow these
    instructions:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从添加**继续**按钮的逻辑开始；按照以下说明操作：
- en: If the `PauseComponent` script isn't open already, go to the `Assets/Script`.
    Double-click the file to open it.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`PauseComponent`脚本尚未打开，请转到`Assets/Script`。双击文件以打开它。
- en: Inside the `PauseComponent` script, scroll to a point where we can add a new
    method – it doesn't matter where, as long as it's inside the `PauseComponent`
    class and not interfering with other methods.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`PauseComponent`脚本内部，滚动到可以添加新方法的位置 – 不重要，只要它在`PauseComponent`类内部，并且不干扰其他方法即可。
- en: 'Now, we are going to add a `Resume` method where if the player wishes to close
    the pause screen, the game animation continues, and the pause button in the top-left
    corner reappears. To make all of this happen, add the following code:'
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个`Resume`方法，如果玩家希望关闭暂停屏幕，游戏动画将继续，左上角的暂停按钮将重新出现。要使所有这些发生，请添加以下代码：
- en: '[PRE28]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This code is similar to the code shown in the previous section; it's just in
    the opposite order (instead of the value being set to true, it's now false and
    vice versa to bring back the original settings).
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码与上一节中显示的代码类似；只是顺序相反（值设置为true，现在是false，反之亦然，以恢复原始设置）。
- en: Save the script and return to the Unity Editor.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存脚本并返回到Unity编辑器。
- en: In the Unity Editor, select the `PauseScreen` game object. Make sure the **Hierarchy**
    window also shows that **Resume** is selected.
  id: totrans-470
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中，选择`PauseScreen`游戏对象。确保**层次结构**窗口也显示已选择**继续**。
- en: At the bottom of the `PauseContainer` game object from the **Hierarchy** window
    into the **None (Object)** **On Click ()** event system.
  id: totrans-471
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**窗口中，将`PauseContainer`游戏对象拖到**无（对象）**的**点击()**事件系统中。
- en: 'Select the `PauseComponent`, followed by `On Click ()` event system set up
    correctly for the `Resume` game object button:'
  id: totrans-472
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`PauseComponent`，然后为`Resume`游戏对象按钮设置正确的事件系统`On Click ()`：
- en: '![Figure 10.45 – The Resume button''s On Click () event hooked up to the Resume
    function'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.45 – 继续按钮的 On Click () 事件连接到 Resume 函数](img/Figure_10.45_B18381.jpg)'
- en: '](img/Figure_10.45_B18381.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.45 – B18381.jpg](img/Figure_10.45_B18381.jpg)'
- en: Figure 10.45 – The Resume button's On Click () event hooked up to the Resume
    function
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.45 – 继续按钮的 On Click () 事件连接到 Resume 函数](img/Figure_10.45_B18381.jpg)'
- en: Let's test the **Resume** button before moving on to the **Quit** button. Press
    **Play** in the Editor. Once the pause button appears in the top left of the **Game**
    window, click it.
  id: totrans-476
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在继续到**退出**按钮之前，让我们先测试**继续**按钮。在编辑器中按**播放**。一旦暂停按钮出现在**游戏**窗口的左上角，点击它。
- en: Finally, click the big **Resume** button. We will be brought back to the game
    playing out.
  id: totrans-477
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击大号**继续**按钮。我们将返回到正在进行的游戏。
- en: 'The last button to hook up in our pause screen is the `PauseComponent` script
    and add the following method to the script:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们暂停屏幕中要连接的最后一个按钮是`PauseComponent`脚本，并将以下方法添加到脚本中：
- en: '[PRE29]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The code we've just entered resets the game; the `timescale` value goes back
    to `1`. We reset the player's score from `ScoreManager` directly and also directly
    told `ScenesManager` to take us back to scene zero, which is our `bootUp` scene.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚输入的代码重置了游戏；`timescale`值回到`1`。我们直接从`ScoreManager`重置玩家的分数，并直接告诉`ScenesManager`带我们回到场景零，即我们的`bootUp`场景。
- en: Save the script before ending this section.
  id: totrans-481
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在结束本节之前保存脚本。
- en: This is similar to the **Resume** button in regard to setting up an event to
    our script.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 这与**继续**按钮在设置事件到我们的脚本方面相似。
- en: Select the **QUIT** button from the pause screen and make sure that, at the
    bottom of the **Inspector** window, you follow the same steps that you followed
    for the **Resume** button.
  id: totrans-483
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从暂停屏幕中选择**退出**按钮，并确保在**检查器**窗口的底部，你遵循与**继续**按钮相同的步骤。
- en: When we get to applying the `Quit` method.
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们开始应用**退出**方法时。
- en: 'The following screenshot shows the `Quit` game object''s button setup:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了`Quit`游戏对象的按钮设置：
- en: '![Figure 10.46 – When the Quit button is pressed, it will run the Quit function'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.46 – 当按下退出按钮时，它将运行退出函数'
- en: '](img/Figure_10.46_B18381.jpg)'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_10.46_B18381.jpg)'
- en: Figure 10.46 – When the Quit button is pressed, it will run the Quit function
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.46 – 当按下退出按钮时，它将运行退出函数
- en: Before we wrap up this chapter, we need to ensure that the player and enemies
    behave how we expect them to when the game is paused.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章之前，我们需要确保当游戏暂停时，玩家和敌人的行为符合我们的预期。
- en: Pausing the player and enemies
  id: totrans-490
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 暂停玩家和敌人
- en: 'So, we have reached the point where we can press our in-game pause button and
    watch our game freeze in time. To make sure the scene is saved, including new
    and edited scripts, let''s test the pause screen:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经到达了可以按下游戏中的暂停按钮并观察游戏暂停的时刻的点。为了确保场景已保存，包括新的和编辑的脚本，让我们测试暂停屏幕：
- en: Press **Play** in the Unity Editor.
  id: totrans-492
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity编辑器中按**播放**。
- en: When the pause button appears, press it.
  id: totrans-493
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当暂停按钮出现时，按下它。
- en: The game pauses, but our enemies appear to float off. Also, when we press the
    fire button for the player, its player bullet light glows on the ship.
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 游戏暂停了，但我们的敌人看起来像是漂浮离开了。此外，当我们按下玩家的射击按钮时，其玩家子弹光在船上闪烁。
- en: Let's fix the enemy floating first.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先修复敌人的漂浮问题。
- en: This is an easy fix – we need to change the update time for our `EnemyWave`
    script.
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个简单的修复——我们需要更改`EnemyWave`脚本的更新时间。
- en: Stop playing. Then, in the `Assets/Script` and double-click the `EnemyWave`
    script.
  id: totrans-497
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 停止播放。然后，在`Assets/Script`中双击`EnemyWave`脚本。
- en: 'Find the line that states the following:'
  id: totrans-498
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到以下内容的行：
- en: '[PRE30]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Change this to the following:'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 更改为以下内容：
- en: '[PRE31]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Save the `EnemyWave` script.
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`EnemyWave`脚本。
- en: Further Information
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多信息
- en: 'More information about **FixedUpdate** can be found here: [https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html](https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html).'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更多关于**FixedUpdate**的信息可以在这里找到：[https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html](https://docs.unity3d.com/ScriptReference/MonoBehaviour.FixedUpdate.html)。
- en: 'Now, let''s reinforce the player''s behavior so that all of its functionality
    is frozen when the game pauses. To freeze our player, we need to reopen its script:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们加强玩家的行为，以便在游戏暂停时冻结其所有功能。为了冻结我们的玩家，我们需要重新打开其脚本：
- en: In the `Assets/Script` folder.
  id: totrans-506
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Assets/Script`文件夹中。
- en: Double-click the `Player` script.
  id: totrans-507
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`Player`脚本。
- en: 'Scroll down to the `Update` function and wrap the player''s `Movement` and
    `Attack` methods with the following `if` statement:'
  id: totrans-508
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动到`Update`函数，并用以下`if`语句包裹玩家的`Movement`和`Attack`方法：
- en: '[PRE32]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code runs a check to see whether the game's `timeScale` is running
    at full speed (`1`) and then carries on with the `Movement` and `Attack` methods.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码会检查游戏的时间缩放是否以全速（`1`）运行，然后继续执行`Movement`和`Attack`方法。
- en: Save the `Player` script.
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存`Player`脚本。
- en: Great! We now have the ability to pause our game, continue our game, or quit
    it. Don't worry about adding this pause screen to the rest of the levels as we
    will do this in the next chapter. Speaking of the next chapter, there, we will
    look at how we can change the **Music** and **Effects** sliders. For now, let's
    reflect on what we have covered in this chapter.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们现在有了暂停游戏、继续游戏或退出游戏的能力。不用担心将这个暂停屏幕添加到其他关卡中，因为我们在下一章中会这样做。说到下一章，在那里，我们将探讨如何更改
    **音乐** 和 **效果** 滑块。现在，让我们回顾一下本章中我们所学到的内容。
- en: Summary
  id: totrans-513
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: By completing this chapter, our game has improved even more and now has a pause
    screen, just as you would expect from any game. We also learned how to freeze
    time in our game with the **timeScale** value. We did revisit some things we covered
    in previous chapters such as Event Listeners and UI positioning and scaling, but
    we also used other UI components such as toggles and sliders and modified them
    to suit our pause screen. Other things we covered included bringing in some MP3
    music and making it so that the script knew when to fade in and out and stop the
    soound.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成本章，我们的游戏得到了进一步的改进，现在有了暂停屏幕，就像你从任何游戏中期望的那样。我们还学习了如何使用 **timeScale** 值在游戏中冻结时间。我们回顾了之前章节中的一些内容，例如事件监听器和
    UI 定位和缩放，但我们还使用了其他 UI 组件，如切换和滑块，并将它们修改以适应我们的暂停屏幕。我们涵盖的其他内容还包括引入一些 MP3 音乐，并确保脚本知道何时淡入淡出和停止声音。
- en: In the next game you create outside of this book, you will know not only how
    and when to add background music to play when it's playing but also how to attach
    your audio to a state machine. With state machines, you can make it possible for
    your music to be played, stopped, and faded out when particular moments occur,
    such as the game's screen being paused. Now, you will be able to take the UI components
    you've learned about in this chapter and create your own menu/pause screen. By
    doing this, you can run events to close or resume your game. You also know how
    to pause your game completely and/or slow time down with the **timeScale** function.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 在你在这本书之外创建的下一个游戏中，你将不仅知道何时以及如何添加背景音乐以便在播放时播放，而且还将了解如何将你的音频附加到状态机。有了状态机，你可以使音乐在特定时刻播放、停止和淡出，例如当游戏屏幕暂停时。现在，你将能够使用本章中你学到的
    UI 组件来创建你自己的菜单/暂停屏幕。通过这样做，你可以运行事件来关闭或恢复你的游戏。你还知道如何使用 **timeScale** 函数完全暂停你的游戏或减慢时间。
- en: In the next chapter, we will be looking at Unity's Audio Mixer to control the
    volume of our player's bullets and music and hook it up to our pause screen volume
    sliders. We will also look into different types of data that need to be stored,
    such as our game remembering the volume settings so that we don't have to adjust
    the sliders every time we start our game.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Unity 的音频混音器，以控制玩家子弹和音乐的音量，并将其连接到我们的暂停屏幕音量滑块。我们还将探讨需要存储的不同类型的数据，例如游戏记住音量设置，这样我们就不必每次启动游戏时都调整滑块。
- en: For now, I wish you the best of luck with your mini mock test!
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我祝愿你在你的迷你模拟测试中一切顺利！
- en: Mock test
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟测试
- en: If you want to keep a private variable visible in the `[Header]`
  id: totrans-519
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想在 `[Header]` 中保持一个私有变量可见，
- en: '`[SerializeField]`'
  id: totrans-520
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[SerializeField]`'
- en: '`[AddComponentMenu]`'
  id: totrans-521
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[AddComponentMenu]`'
- en: '`[Tooltip]`'
  id: totrans-522
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`[Tooltip]`'
- en: You have created a pinball game for a mobile device; the game mechanics all
    work well but you also need to apply a pause screen. Obviously, when the player
    presses pause, the entire game should freeze. The way you are going to achieve
    this is by setting Unity's `timeScale` to zero.
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你为移动设备创建了一个弹球游戏；游戏机制都运作良好，但你还需要应用一个暂停屏幕。显然，当玩家按下暂停时，整个游戏应该冻结。你将通过将 Unity 的 `timeScale`
    设置为零来实现这一点。
- en: Which time property isn't affected when we set `Time.timeScale` to `0`?
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 `Time.timeScale` 设置为 `0` 时，哪个时间属性不受影响？
- en: '`captureFramerate`'
  id: totrans-525
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`captureFramerate`'
- en: '`frameCount`'
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`frameCount`'
- en: '`realtimeSinceStartup`'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`realtimeSinceStartup`'
- en: '`timeSinceLevelLoad`'
  id: totrans-528
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`timeSinceLevelLoad`'
- en: There is a list of scenes in your `BuildSettings` window. You know that the
    first scene is your title scene and that the rest that follow are your game's
    level scenes. Your game designer hasn't settled on the names of the scenes and
    keeps changing them. As a programmer, you can select the scenes to load by using
    what `SceneManager` method?
  id: totrans-529
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 `BuildSettings` 窗口中有一个场景列表。你知道第一个场景是你的标题场景，其余的则是你的游戏关卡场景。你的游戏设计师还没有确定场景的名称，并且一直在更改它们。作为一个程序员，你可以通过使用
    `SceneManager` 的哪个方法来选择要加载的场景？
- en: '`GetSceneByBuildIndex()`'
  id: totrans-530
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetSceneByBuildIndex()`'
- en: '`GetActiveScene()`'
  id: totrans-531
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetActiveScene()`'
- en: '`SceneManager.GetSceneByName()`'
  id: totrans-532
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SceneManager.GetSceneByName()`'
- en: '`SceneManager.GetSceneByPath()`'
  id: totrans-533
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SceneManager.GetSceneByPath()`'
- en: If you have a pause screen that can be enabled or disabled, which is the best
    UI component to switch between the two?
  id: totrans-534
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你有一个可以启用或禁用的暂停屏幕，哪个是切换两个的最佳UI组件？
- en: '`Toggle`'
  id: totrans-535
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换
- en: '`Button`'
  id: totrans-536
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Button`'
- en: '`Slider`'
  id: totrans-537
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Slider`'
- en: '`Scroll Rect`'
  id: totrans-538
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Scroll Rect`'
- en: A new prototype of Killer Wave is handed to you on a mobile device for testing.
    You notice you can move the ship or shoot when you enter a level with UI text
    in the middle of the screen. What would be causing the restriction in movement?
  id: totrans-539
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你收到了一个移动设备上的Killer Wave新原型进行测试。你注意到当你进入屏幕中间有UI文本的水平时，你可以移动船只或射击。是什么导致了移动的限制？
- en: The ratio of the screen's proportion is out of calibration.
  id: totrans-540
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕比例的比率未校准。
- en: The UI text has Raycast Target ticked.
  id: totrans-541
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: UI文本已勾选Raycast Target。
- en: The mobile device needs charging.
  id: totrans-542
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 移动设备需要充电。
- en: Too many fingers on the screen at once has confused the Input system.
  id: totrans-543
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕上同时有太多手指会混淆输入系统。
- en: You have created a UI button that displays an image of coins on it when you
    have money in your account and an image of an empty brown bag when your account
    is empty.
  id: totrans-544
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你创建了一个UI按钮，当你的账户中有钱时，它会显示硬币的图片，而当你的账户为空时，它会显示一个空空的棕色袋子。
- en: What should the Transition field of the button be set to in the Unity Inspector
    to support these image changes?
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 在Unity检查器中，按钮的过渡字段应设置为哪个值以支持这些图像更改？
- en: Color Tint
  id: totrans-546
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 颜色色调
- en: None
  id: totrans-547
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无
- en: Animation
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画
- en: Sprite Swap
  id: totrans-549
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 精灵交换
- en: While entering some UI details at the bottom of the screen to show your player's
    lives and what level they are on, you notice you need the text to be a specific
    size. You can change the text to any size you want, but you also need to accommodate
    the ratio of the screen.
  id: totrans-550
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在屏幕底部输入一些UI详细信息以显示玩家的生命值和所在关卡时，你注意到需要文本具有特定的大小。你可以将文本更改为任何大小，但还需要适应屏幕的比率。
- en: What's the best way of amending the font to make sure it doesn't appear squashed?
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 最好的方法来修改字体以确保它不会显得挤压？
- en: Decrease Font Size.
  id: totrans-552
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 减小字体大小。
- en: Turn on Best Fit.
  id: totrans-553
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开最佳适配。
- en: Set Vertical Overflow to Truncate.
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将垂直溢出设置为截断。
- en: Set Horizontal Overflow to Overflow.
  id: totrans-555
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将水平溢出设置为溢出。
- en: You have started working on a game that relies on time being stopped, rewound,
    and fast forward, but only for your enemies, with the use of the `Time.timeScale`
    functionality. Some of your enemies aren't being affected by the change of time.
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你开始制作一个游戏，该游戏依赖于时间暂停、倒退和快进，但仅限于你的敌人，利用`Time.timeScale`功能。一些敌人没有受到时间变化的影响。
- en: What property value could potentially cause this in the enemy's **Animator**
    component?
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个属性值可能会在敌人的**Animator**组件中引起这种情况？
- en: Set `Update Mode` to Animate Physics.
  id: totrans-558
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Update Mode`设置为动画物理。
- en: Set `Culling Mode` to Cull Completely.
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Culling Mode`设置为完全剔除。
- en: Set `Culling Mode` to Always Animate.
  id: totrans-560
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Culling Mode`设置为始终动画。
- en: Set `Update Mode` to Unscaled Time.
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Update Mode`设置为未缩放时间。
- en: You have a selection of game objects that are tomato plants. Each tomato on
    the tomato plant has a script attached named `Tomato`.
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你有一组番茄植物的游戏对象。番茄植物上的每个番茄都有一个名为`Tomato`的脚本。
- en: In order to avoid the tomato plants appearing repetitively, some of the artists
    have turned off the `tomato` game objects so they can't be seen.
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免番茄植物重复出现，一些艺术家已经关闭了`tomato`游戏对象，这样它们就看不见了。
- en: At the start of the scene, we need to count how many tomatoes are in the scene,
    including the hidden ones.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在场景开始时，我们需要计算场景中包括隐藏的番茄总数。
- en: Which command would get a reference to all `Tomato` scripts?
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 哪个命令可以获取所有`Tomato`脚本的引用？
- en: '`GetComponentsInChildren(typeof(Tomato), true)`'
  id: totrans-566
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetComponentsInChildren(typeof(Tomato), true)`'
- en: '`GetComponentInChildren(typeof(Tomato), true)`'
  id: totrans-567
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetComponentInChildren(typeof(Tomato), true)`'
- en: '`GetComponentsInChildren(typeof(Tomato))`'
  id: totrans-568
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetComponentsInChildren(typeof(Tomato))`'
- en: '`GetComponenstInParent(typeof(Tomato), true)`'
  id: totrans-569
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`GetComponenstInParent(typeof(Tomato), true)`'
- en: Which static `Time` class property would be used to freeze time?
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个静态`Time`类属性会用来冻结时间？
- en: '`timeScale`'
  id: totrans-571
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`timeScale`'
- en: '`maximumDeltaTime`'
  id: totrans-572
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`maximumDeltaTime`'
- en: '`captureFramerate`'
  id: totrans-573
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`captureFramerate`'
- en: '`time`'
  id: totrans-574
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`time`'
- en: Which of the following would be the most useful for labeling in a state machine?
  id: totrans-575
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在状态机中，以下哪个选项对标签最有用？
- en: Enum
  id: totrans-576
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 枚举
- en: String
  id: totrans-577
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串
- en: Float
  id: totrans-578
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浮点数
- en: Int
  id: totrans-579
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 整数
- en: Which of the following is related to triggering an event in-game?
  id: totrans-580
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个与游戏中触发事件相关？
- en: A particle effect is running.
  id: totrans-581
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正在运行粒子效果。
- en: The player is idle on the menu screen for 20 minutes.
  id: totrans-582
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家在菜单屏幕上闲置了20分钟。
- en: The player presses a UI button.
  id: totrans-583
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家按下UI按钮。
- en: The player moves the mouse cursor.
  id: totrans-584
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 玩家移动鼠标光标。
- en: You have created a game where your player must sneak around and avoid the enemy.
    In one of the missions, your player has to listen out in the warehouse where the
    enemy is (listening for footsteps, talking, and so on).
  id: totrans-585
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你创建了一个游戏，你的玩家必须潜行并避开敌人。在其中一个任务中，你的玩家必须注意仓库中的敌人（听脚步声、谈话声等）。
- en: What audio property would you add for this game?
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 你会为这个游戏添加哪个音频属性？
- en: Add an Audio Source component to each enemy, set its spatial blend to 3D, and
    play a sound.
  id: totrans-587
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为每个敌人添加音频源组件，将其空间混合设置为3D，并播放声音。
- en: Use an Audio Mixer Snapshot to add a low-pass filter when enemies are nearby.
  id: totrans-588
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当敌人靠近时，使用音频混频器快照添加低通滤波器。
- en: Measure the distance between each enemy and the player and play a sound if the
    distance drops below a certain threshold.
  id: totrans-589
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量每个敌人与玩家之间的距离，如果距离低于某个阈值，则播放声音。
- en: Add an Audio Source that plays music in the background and increase or decrease
    its volume based on the distance of the closest enemy.
  id: totrans-590
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个背景音乐播放的音频源，并根据最近敌人的距离增加或减少音量。
- en: Within your `CustomRolloff`
  id: totrans-591
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的`CustomRolloff`
- en: '`SpatialBlend`'
  id: totrans-592
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SpatialBlend`'
- en: '`ReverbZoneMix`'
  id: totrans-593
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`ReverbZoneMix`'
- en: '`Spread`'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Spread`'
- en: You have started adding music and sound effects to your game. When testing,
    you notice that the background music cuts out when some sound effects are played.
  id: totrans-595
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经开始为你的游戏添加音乐和音效。在测试时，你注意到当播放某些音效时，背景音乐会中断。
- en: Which property in the **Audio Source** component will fix this so that your
    music doesn't cut out?
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 在**音频源**组件中哪个属性可以解决这个问题，使得你的音乐不会中断？
- en: Increase Priority.
  id: totrans-597
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提高优先级。
- en: Increase Volume.
  id: totrans-598
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加音量。
- en: Increase MinDistance.
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 增加MinDistance。
- en: Decrease SpatialBlend.
  id: totrans-600
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 降低SpatialBlend。
- en: You have been asked to make a UI menu screen. You have made a **Canvas** and
    set its **Render Mode** to **Screen Space - Overlay**.
  id: totrans-601
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你被要求制作一个UI菜单屏幕。你已经创建了一个**画布**，并将其**渲染模式**设置为**屏幕空间 - 叠加**。
- en: In the **Canvas Scaler** component, which property in UI Scale Mode will make
    UI elements retain the same size in pixels, regardless of screen size?
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 在**画布缩放器**组件中，UI缩放模式中的哪个属性可以使UI元素在屏幕大小变化时保持相同的像素大小？
- en: '**Constant Pixel Size**'
  id: totrans-603
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**恒定像素大小**'
- en: '**Scale with Screen Size**'
  id: totrans-604
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**与屏幕大小缩放**'
- en: '**Constant Physical Size**'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**恒定物理大小**'
- en: '**Disable Canvas Scaler**'
  id: totrans-606
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**禁用画布缩放器**'
- en: When ticking the Preserve Aspect checkbox in an **Image** component, what does
    this do?
  id: totrans-607
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在**图像**组件中勾选“保留纵横比”复选框时，这会做什么？
- en: Sets the aspect of the camera to match the perspective of the image.
  id: totrans-608
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将相机的纵横比设置为与图像的透视相匹配。
- en: Makes the image match the same aspect ratio as the cameras.
  id: totrans-609
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使图像与相机的相同纵横比匹配。
- en: The image retains its original dimension.
  id: totrans-610
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图片保留了其原始尺寸。
- en: Has no effect on **Image** components, only Sprite Renderers.
  id: totrans-611
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对**图像**组件没有影响，仅对精灵渲染器有影响。
- en: Can a Sprite Renderer be used instead of an **Image** component within the **Canvas**?
  id: totrans-612
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是否可以使用精灵渲染器代替**画布**中的**图像**组件？
- en: No. Even though a Sprite Renderer can work in 2D/3D spaces, it's not intended
    to be used with the **Canvas** and therefore will not work.
  id: totrans-613
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不。尽管精灵渲染器可以在2D/3D空间中工作，但它不是用于**画布**的，因此不会工作。
- en: Yes, but Sprite Renderer has fewer features and is an older version of the **Image**
    component.
  id: totrans-614
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，但精灵渲染器功能较少，是**图像**组件的较旧版本。
- en: Depending on the Unity project, if your scene is in 2D mode, yes.
  id: totrans-615
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据Unity项目，如果你的场景处于2D模式，是的。
- en: Yes, when being used to animate sprite sheets.
  id: totrans-616
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 是的，当用于动画精灵图集时。
- en: What does the `Toggle` button on or off
  id: totrans-617
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Toggle`按钮是开启还是关闭'
- en: Makes the graphic active or inactive when the player presses it during runtime
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当玩家在运行时按下它时，使图形激活或非激活。
- en: Holds the **CheckMark** image
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持有**勾选标记**图像
- en: What does `parent` game object.
  id: totrans-620
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent`游戏对象。'
