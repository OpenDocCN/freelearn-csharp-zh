- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Creating and Publishing Powerful NuGet Packages for the Community
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为社区创建和发布强大的 NuGet 包
- en: In this chapter, we’ll embark on a comprehensive journey into the world of NuGet
    and package management, an essential aspect of modern .NET development. Whether
    you’re a seasoned developer or not, understanding NuGet will elevate your ability
    to manage dependencies and streamline your workflow.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将开始一段全面探索 NuGet 和包管理的旅程，这是现代 .NET 开发的一个基本方面。无论你是经验丰富的开发者还是新手，理解 NuGet
    都能提升你管理依赖项和简化工作流程的能力。
- en: We’ll begin by introducing the fundamentals of NuGet, covering what it is and
    why it’s a cornerstone in the .NET ecosystem. You’ll gain practical insights into
    creating your first NuGet package, including hands-on experience with setting
    up a project, packaging your code, and generating a **.nupkg** file. As we progress,
    we’ll master versioning and dependency management, which are crucial skills to
    ensure that your packages are compatible and up to date. Then, we’ll explore the
    process of publishing and distributing your packages, ensuring that our work reaches
    the right audience. Finally, we’ll dive into advanced features and best practices,
    from targeting specific platforms to incorporating pre-release versions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从介绍 NuGet 的基础知识开始，涵盖它是什么以及为什么它是 .NET 生态系统中的基石。你将获得创建第一个 NuGet 包的实用见解，包括设置项目、打包你的代码和生成
    **.nupkg** 文件的动手经验。随着我们的进展，我们将掌握版本管理和依赖项管理，这些是确保你的包兼容和更新的关键技能。然后，我们将探讨发布和分发你的包的过程，确保我们的工作能够触及正确的受众。最后，我们将深入研究高级功能和最佳实践，从针对特定平台到包含预发布版本。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introducing NuGet and package management
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 NuGet 和包管理
- en: Creating your first NuGet package
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建你的第一个 NuGet 包
- en: Versioning and dependency management
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本管理和依赖项管理
- en: Publishing and distribution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布和分发
- en: Advanced NuGet features
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级 NuGet 功能
- en: By the end of this chapter, you’ll be equipped with the knowledge and skills
    to create, manage, and distribute NuGet packages effectively, empowering you to
    contribute to the broader .NET community with confidence.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将具备创建、管理和分发 NuGet 包的有效知识和技术，这将使你能够自信地贡献更广泛的 .NET 社区。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following versions of Visual Studio:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本章时，我使用了以下版本的 Visual Studio：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览 1.0
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch15](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch15)
    .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在 [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch15](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch15)
    找到。
- en: Introduction to NuGet and package management
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NuGet 和包管理简介
- en: In this opening section, we’ll lay the groundwork for everything to come. We’ll
    explore what NuGet is, its importance in the .NET ecosystem, and how it revolutionizes
    the way developers share and reuse code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节开头，我们将为后续内容打下基础。我们将探讨 NuGet 是什么，它在 .NET 生态系统中的重要性，以及它如何改变开发者共享和重用代码的方式。
- en: NuGet is a free and open source package manager designed specifically for the
    Microsoft development platform, including .NET. At its core, NuGet serves as a
    mechanism for sharing code and speeding up the development process. It allows
    developers to create packages that encapsulate functionality, libraries, or frameworks
    and distribute them through NuGet repositories.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet 是一个免费且开源的包管理器，专为 Microsoft 开发平台设计，包括 .NET。在其核心，NuGet 作为一种共享代码和加速开发过程的机制。它允许开发者创建封装功能、库或框架的包，并通过
    NuGet 仓库进行分发。
- en: NuGet’s importance lies in its ability to simplify the process of incorporating
    third-party libraries into your projects, manage dependencies, and keep them up
    to date. This approach significantly reduces the complexity associated with manual
    dependency management, which was once a common challenge in . NET development.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet 的重要性在于其简化将第三方库纳入项目、管理依赖项并保持其更新的能力。这种方法显著降低了与手动依赖项管理相关的复杂性，这在 .NET 开发中曾经是一个常见的挑战。
- en: The NuGet ecosystem is vast and dynamic. At its center is the official NuGet
    Gallery ( [nuget.org](https://nuget.org) ), which hosts thousands of packages
    contributed by the community. However, NuGet isn’t limited to public repositories;
    it also supports private feeds, allowing organizations to control access to internal
    packages.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet 生态系统庞大且动态。其核心是官方的 NuGet 仓库（[nuget.org](https://nuget.org)），它托管了由社区贡献的数千个包。然而，NuGet
    不仅限于公共仓库；它还支持私有源，允许组织控制对内部包的访问。
- en: One of the most significant advantages of NuGet is its ability to simplify dependency
    management. With NuGet, developers no longer need to manually download and install
    libraries. Instead, they can simply add a reference to the desired package in
    their project, and NuGet takes care of downloading and installing the correct
    version.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet 最显著的优点之一是它简化了依赖关系管理。使用 NuGet，开发者不再需要手动下载和安装库。相反，他们只需在项目中添加对所需包的引用，NuGet
    就会负责下载和安装正确的版本。
- en: To effectively create and consume packages, it’s crucial to set up your development
    environment properly. We can access the general configuration of the package manager
    through the top-level toolbar – **Tools** | **NuGet Package Manager** | **Package**
    **Manager Settings** .
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了有效地创建和消费包，正确设置开发环境至关重要。我们可以通过顶级工具栏访问包管理器的一般配置 – **工具** | **NuGet 包管理器** |
    **包** **管理器设置** 。
- en: '![Figure 15.1 – The NuGet package manager options](img/B22218_15_1.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – NuGet 包管理器选项](img/B22218_15_1.jpg)'
- en: Figure 15.1 – The NuGet package manager options
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – NuGet 包管理器选项
- en: 'Here are some details about the options available:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于可用选项的详细信息：
- en: '**Package Restore** : Checking both the boxes under this allows us to ensure
    that NuGet packages are automatically restored when building a solution. This
    is important because it guarantees that all necessary packages are available,
    even if they were not included in the source control, thus avoiding missing package
    issues during build processes.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包还原**：在此处勾选两个复选框可以确保在构建解决方案时自动还原 NuGet 包。这很重要，因为它保证了所有必要的包都可用，即使它们没有被包含在源控制中，从而避免了构建过程中的包缺失问题。'
- en: '**Binding Redirects** : This is a mechanism used to address version conflicts
    between assemblies. When you’re working on a .NET project that references multiple
    libraries, it’s common to encounter situations where different libraries depend
    on different versions of the same assembly. This can lead to runtime errors due
    to version conflicts. You can choose to skip those libraries, but it’s particularly
    useful in scenarios where you cannot control the version dependencies of third-party
    libraries but need to ensure compatibility across your application.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**绑定重定向**：这是一个用于解决程序集之间版本冲突的机制。当你在引用多个库的 .NET 项目上工作时，经常会遇到不同库依赖于同一程序集的不同版本的情况。这可能导致由于版本冲突而导致的运行时错误。你可以选择跳过那些库，但在你无法控制第三方库的版本依赖但需要确保应用程序兼容性的场景中，这尤其有用。'
- en: '**Package Management** : Here, we can choose the default format of the package
    management file. We can also opt to select the format when installing the first
    package.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包管理**：在这里，我们可以选择包管理文件的默认格式。我们还可以选择在安装第一个包时选择格式。'
- en: '**Clear All NuGet Storage** : The global NuGet cache stores copies of packages
    that we have downloaded or installed. Clearing this cache ensures that our development
    environment starts fresh, without any potentially corrupted or outdated packages.
    This helps to troubleshoot package-related issues and ensures that we work with
    clean, up-to-date packages. One other way to achieve this is by opening a Command
    Prompt as administrator and running the **nuget locals all -** **clear** command.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**清除所有 NuGet 存储**：全局 NuGet 缓存存储了我们下载或安装的包的副本。清除此缓存确保我们的开发环境从头开始，没有任何可能损坏或过时的包。这有助于解决与包相关的问题，并确保我们使用的是干净、最新的包。另一种实现此目的的方法是以管理员身份打开命令提示符并运行
    **nuget locals all -** **clear** 命令。'
- en: Now that we’ve established the basics of NuGet and its significance, let’s move
    on to the practical side of things. It’s time to roll up our sleeves and start
    creating our very own NuGet package.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 NuGet 的基本知识和其重要性，让我们继续探讨实际操作方面。现在是时候卷起袖子，开始创建我们自己的 NuGet 包了。
- en: Creating your first NuGet package
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建您的第一个 NuGet 包
- en: Here, we will dive straight into action. We’ll walk through the process of creating
    a simple NuGet package from scratch, covering every step from initial setup to
    publishing. This hands-on experience will help reinforce the concepts introduced
    in the previous section and prepare you for more advanced package creation.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将直接进入行动。我们将逐步介绍从头创建简单 NuGet 包的过程，涵盖从初始设置到发布的每个步骤。这种动手经验将帮助巩固上一节中介绍的概念，并为您准备更高级的包创建。
- en: 'Let’s break this down further. First, we’ll create a new .NET Standard library
    project in Visual Studio. This type of project is ideal for creating NuGet packages
    because it’s compatible with multiple .NET frameworks. Let’s get started with
    the steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步分解这个过程。首先，我们将在 Visual Studio 中创建一个新的 .NET Standard 库项目。这种类型的项目非常适合创建 NuGet
    包，因为它与多个 .NET 框架兼容。让我们开始以下步骤：
- en: Open Visual Studio and select **New Project** .
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并选择 **新建项目**。
- en: For this example, choose **.NET Standard** under the **C#** section.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于此示例，在 **C#** 部分下选择 **.NET Standard**。
- en: Name the project (e.g., **MyFirstPackage** ) and click **OK** .
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名项目（例如，**MyFirstPackage**）并点击 **确定**。
- en: 'Next, we’ll write the package content by adding some sample code to our project.
    For this example, let’s create a simple utility class that converts temperatures
    between Celsius and Fahrenheit:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过向项目中添加一些示例代码来编写包内容。为此示例，让我们创建一个简单的实用类，用于在摄氏度和华氏度之间转换温度：
- en: '[PRE0]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we have our code, we need to prepare it for packaging:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了代码，我们需要为打包做准备：
- en: Right-click on the project in the **Solution** **Explorer** window.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 窗口中右键单击项目。
- en: Select **Add** | **New Folder** .
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **添加** | **新建文件夹**。
- en: Name the folder **lib** .
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件夹命名为 **lib**。
- en: Move the **TemperatureConverter.cs** file into this folder.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **TemperatureConverter.cs** 文件移动到这个文件夹中。
- en: 'With our project prepared, we can now create the NuGet package:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目准备就绪后，我们现在可以创建 NuGet 包：
- en: Right-click on the project in the **Solution** **Explorer** window.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 窗口中右键单击项目。
- en: Select **Pack** from the context menu.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上下文菜单中选择 **打包**。
- en: This will generate a **.nupkg** file in the **bin/Debug** folder.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 **bin/Debug** 文件夹中生成一个 **.nupkg** 文件。
- en: 'Let’s verify that our package was created successfully:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证我们的包是否已成功创建：
- en: Locate the **.nupkg** file in the **bin/Debug** folder
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **bin/Debug** 文件夹中定位 **.nupkg** 文件。
- en: Double-click the file to view its contents.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击文件以查看其内容。
- en: Check that the package includes the **lib** folder containing our **TemperatureConverter.cs**
    file.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查包是否包含包含我们的 **TemperatureConverter.cs** 文件的 **lib** 文件夹。
- en: Now that we’ve created our first NuGet package, let’s take a moment to reflect
    on what we’ve accomplished. We’ve gone from having no package to having a fully
    functional one that we could potentially share with others. Now that we have done
    that, there’s an important aspect we need to address – how do we ensure that our
    package remains stable and doesn’t cause issues in other people’s projects?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们第一个 NuGet 包，让我们花点时间反思我们所取得的成就。我们从没有任何包变成了一个功能齐全的包，我们可能与他人分享。现在我们已经做到了这一点，有一个重要的方面我们需要解决——我们如何确保我们的包保持稳定，不会在其他人的项目中引起问题？
- en: Versioning and dependency management
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制和依赖关系管理
- en: Versioning is crucial for maintaining compatibility and responsibly managing
    updates. Properly handling dependencies between packages is equally important,
    as it ensures that your package works seamlessly with other packages in a project.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制对于保持兼容性和负责任地管理更新至关重要。正确处理包之间的依赖关系同样重要，因为它确保您的包能够与其他项目中的包无缝工作。
- en: 'Versioning is the process of assigning unique identifiers to different versions
    of our package. It’s a way to communicate to users how much your package has changed
    since the last release. There are two main approaches to versioning:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是将唯一标识符分配给我们的包的不同版本的过程。这是向用户传达自上次发布以来您的包发生了多少变化的一种方式。版本控制有两种主要方法：
- en: '**Semantic versioning** :'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语义版本控制**：'
- en: '**Major version** : Breaking changes'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主版本**：破坏性更改'
- en: '**Minor version** : New features'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**次要版本**：新增功能'
- en: '**Patch version** : Bug fixes'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**补丁版本**：错误修复'
- en: An example is 1.0.0, 1.1.0, 1.2.0, and so on
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如 1.0.0, 1.1.0, 1.2.0 等等
- en: '**Date-based versioning** :'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于日期的版本控制**：'
- en: Uses dates to indicate when a package was released
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用日期来表示包发布的时间
- en: An example is 2023.01.01.0
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如 2023.01.01.0
- en: While date-based versioning is simpler, semantic versioning is generally preferred,
    as it provides more meaningful information about a package’s history.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然基于日期的版本更简单，但语义版本通常更受欢迎，因为它提供了关于包历史的更多有意义信息。
- en: 'We can easily define the version of our package by navigating to the properties
    of our project:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导航到我们的项目的属性来轻松定义我们的包版本：
- en: Right-click on the project in the **Solution** **Explorer** window,
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**窗口中，右键单击项目，
- en: Select **Properties** .
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**属性**。
- en: Go to the **Package** tab.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**包**选项卡。
- en: '![Figure 15.2 – Package Properties](img/B22218_15_2.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – 包属性](img/B22218_15_2.jpg)'
- en: Figure 15.2 – Package Properties
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – 包属性
- en: Here, we define version 1.0.1 of our package; if we pack the project again,
    it will generate a new **.nupkg** file with the newly defined version.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了我们的包的1.0.1版本；如果我们再次打包项目，它将生成一个带有新定义版本的新**.nupkg**文件。
- en: Dependency management involves specifying which other packages your package
    depends on. This is crucial for ensuring that our package functions correctly
    in various environments.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖管理涉及指定您的包依赖于哪些其他包。这对于确保我们的包在各种环境中正确运行至关重要。
- en: 'There are two ways to declare dependencies in a NuGet package:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在NuGet包中声明依赖有两种方式：
- en: '**Direct dependencies** :'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**直接依赖** :'
- en: 'Specify the exact versions of packages you depend on. Here’s an example:'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定您依赖的包的确切版本。以下是一个示例：
- en: '[PRE1]'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Range dependencies** :'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范围依赖** :'
- en: 'Specify a range of acceptable versions. Here’s an example:'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定可接受版本的范围。以下是一个示例：
- en: '[PRE2]'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Range dependencies allow for flexibility while still maintaining some level
    of control over the versions used.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 范围依赖允许灵活性，同时仍然保持对使用版本的一定控制。
- en: Effective versioning and dependency management are essential practices in software
    development. It is crucial to maintain consistency by adhering to a chosen versioning
    strategy throughout the life cycle of a package.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的版本管理和依赖管理是软件开发中的基本实践。在整个包的生命周期中坚持选择版本策略对于保持一致性至关重要。
- en: Clearly communicating this strategy, especially through documentation such as
    the **README.md** file, helps ensure that all stakeholders understand the approach.
    Keeping dependencies up to date is equally important, as regular updates to the
    packages you rely on can prevent compatibility issues and enhance security.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 明确传达这种策略，特别是通过如**README.md**文件这样的文档，有助于确保所有利益相关者都理解这种方法。保持依赖项更新同样重要，因为对您依赖的包的定期更新可以防止兼容性问题并增强安全性。
- en: Thorough testing against different versions of dependencies is necessary to
    identify potential conflicts early. Additionally, it is important to consider
    transitive dependencies – those indirect dependencies that may influence your
    package’s behavior – to maintain overall stability and reliability.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 对不同版本的依赖进行彻底测试是必要的，以尽早识别潜在冲突。此外，考虑传递依赖也很重要——这些间接依赖可能会影响您的包的行为，以保持整体稳定性和可靠性。
- en: Now that we’ve covered the essentials of versioning and dependency management,
    let’s turn our attention to the next crucial step in getting our package out to
    the world – publishing and distribution. This is where we make our hard work available
    to others and potentially become part of the rich ecosystem of . NET packages.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经涵盖了版本管理和依赖管理的要点，让我们将注意力转向将我们的包推向世界的下一个关键步骤——发布和分发。这是我们将我们的辛勤工作提供给他人并可能成为.NET包丰富生态系统一部分的地方。
- en: Publishing and distribution
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布和分发
- en: Publishing your NuGet package makes it accessible to the entire .NET community
    or your entire organization. This section guides you through the process of publishing
    your package to the official NuGet gallery, as well as alternative distribution
    methods.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 发布您的NuGet包可以让整个.NET社区或您整个组织访问它。本节将指导您将包发布到官方NuGet库，以及替代分发方法。
- en: 'Let’s explore in detail how to publish to the official NuGet Gallery:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细探讨如何发布到官方NuGet库：
- en: Sign in to your account at [https://www.nuget.org/](https://www.nuget.org/)
    .
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[https://www.nuget.org/](https://www.nuget.org/)上登录您的账户。
- en: Click on **Create a new package** and fill in the required details.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建新包**并填写所需详细信息。
- en: Upload the **.** **nupkg** file.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传**.** **nupkg**文件。
- en: Fill in the package metadata (description, tags, etc.) .
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写包元数据（描述、标签等）。
- en: Review and submit the package.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 审查并提交包。
- en: While the official gallery is the most widely recognized method for distributing
    packages, there are scenarios where alternative distribution methods may be more
    appropriate. For instance, private feeds are particularly useful for company-wide
    or team-specific packages. These feeds can be hosted on platforms such as Azure
    DevOps, GitHub, or even self-hosted servers, providing a secure and controlled
    environment for package distribution within an organization. Local feeds are another
    option, ideal for testing and development environments. These can be set up directly
    on your local machine or integrated within a CI/CD pipeline, offering a convenient
    way to manage packages during the development process. For those requiring even
    more control, custom servers allow for fine-grained management of package distribution,
    although they do come with the added responsibility of hosting infrastructure
    and ongoing maintenance.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然官方图库是分发包最广泛认可的方法，但在某些情况下，其他分发方法可能更合适。例如，私有资源库对于公司内部或团队特定的包特别有用。这些资源库可以托管在
    Azure DevOps、GitHub 或甚至自托管服务器上，为组织内部的包分发提供了一个安全和受控的环境。本地资源库是另一个选项，非常适合测试和开发环境。这些可以直接在您的本地机器上设置，或集成到
    CI/CD 管道中，在开发过程中提供方便的包管理方式。对于那些需要更多控制的人来说，自定义服务器允许对包分发进行细粒度管理，尽管这也带来了托管基础设施和持续维护的额外责任。
- en: Private repositories offer a secure and controlled environment for hosting NuGet
    packages that are intended for internal use within an organization, or among a
    select group of developers. Unlike public repositories such as [nuget.org](http://nuget.org)
    , which are accessible to anyone, private repositories restrict access to authorized
    users only. This is particularly useful for proprietary software components, beta
    versions, or when you need to comply with specific security policies.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 私有资源库为组织内部或特定开发人员群体内部使用的 NuGet 包提供了一个安全和受控的环境。与任何人都可以访问的公共资源库（如 [nuget.org](http://nuget.org)）不同，私有资源库仅限制授权用户访问。这对于专有软件组件、测试版本或需要遵守特定安全策略的情况尤其有用。
- en: '**JFrog Artifactory** is one of the most popular tools for managing binary
    repositories, including NuGet packages. It supports both public and private NuGet
    feeds, making it an excellent choice for organizations looking to establish their
    own NuGet repository infrastructure.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**JFrog Artifactory** 是管理二进制存储库中最受欢迎的工具之一，包括 NuGet 包。它支持公共和私有 NuGet 资源库，使其成为组织建立自己的
    NuGet 存储库基础设施的绝佳选择。'
- en: 'Here are the details on how to set up a private NuGet Feed in Artifactory:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何在 Artifactory 中设置私有 NuGet 资源库的详细信息：
- en: '**Install Artifactory** : First, you’ll need to install JFrog Artifactory on
    your server or cloud environment. Follow the official installation guide provided
    by JFrog.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**安装 Artifactory**：首先，您需要在您的服务器或云环境中安装 JFrog Artifactory。遵循 JFrog 提供的官方安装指南。'
- en: '**Create a new repository** : Once Artifactory is up and running, log in to
    the administration console. Navigate to the **Repositories** section and choose
    to create a new repository. Select **NuGet** as the package type.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**创建新的存储库**：一旦 Artifactory 启动并运行，登录到管理控制台。导航到 **存储库** 部分，并选择创建新的存储库。选择 **NuGet**
    作为包类型。'
- en: '**Configure the repository settings** : Specify the repository key, layout,
    and other settings according to your requirements. For a private feed, ensure
    that the repository is not publicly accessible.'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**配置存储库设置**：根据您的需求指定存储库密钥、布局和其他设置。对于私有资源库，请确保存储库不可公开访问。'
- en: '**Set up access control** : Define who has access to your new NuGet repository.
    You can create groups for different teams or projects and assign appropriate permissions.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**设置访问控制**：定义谁可以访问您的新 NuGet 资源库。您可以创建不同团队或项目的组，并分配适当的权限。'
- en: '**Publish packages** : With your repository set up, you can now publish NuGet
    packages to it. Use the **nuget push** command or integrate with your CI/CD pipeline
    to automate the process.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**发布包**：设置好存储库后，您现在可以将其发布到其中。使用 **nuget push** 命令或将其集成到您的 CI/CD 管道中以自动化此过程。'
- en: When working with private NuGet feeds, such as Artifactory and others, we must
    set up a NuGet source in Visual Studio that allows us to specify where NuGet packages
    should be retrieved from during the package restore process, or when adding new
    packages to our projects.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当与 Artifactory 和其他私有 NuGet 资源库一起工作时，我们必须在 Visual Studio 中设置一个 NuGet 源，以便在包还原过程或向项目中添加新包时指定
    NuGet 包的检索位置。
- en: 'Here’s how we can set up a NuGet source through Visual Studio:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在Visual Studio中设置NuGet源的方法：
- en: Go to **Tools** | **NuGet Package Manager** | **Package** **Manager Settings**
    .
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到**工具** | **NuGet包管理器** | **包管理器设置**。
- en: Select **Package Sources** from the left navigation menu.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从左侧导航菜单中选择**包源**。
- en: To add a new package source, click on the green plus ( **+** ) button at the
    top-right corner of the **Package** **sources** window.
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要添加新的包源，请点击**包源**窗口右上角的绿色加号（**+**）按钮。
- en: '![Figure 15.3 – Adding a new package source](img/B22218_15_3.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – 添加新的包源](img/B22218_15_3.jpg)'
- en: Figure 15.3 – Adding a new package source
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – 添加新的包源
- en: Fill in the **Name** and **Source** textboxs to fit the desired NuGet feeds
    to be added.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**名称**和**源**文本框中填写以适应要添加的期望的NuGet源。
- en: '![Figure 15.4 – Configuring a new package source](img/B22218_15_4.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图15.4 – 配置新的包源](img/B22218_15_4.jpg)'
- en: Figure 15.4 – Configuring a new package source
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4 – 配置新的包源
- en: Then, validate the source by clicking on the **Update** button.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过点击**更新**按钮验证源。
- en: After adding and configuring your package source, you can verify that it’s working
    correctly by attempting to restore packages or searching for packages within Visual
    Studio. Go to **Tools** | **NuGet Package Manager** | **Manage NuGet Packages
    for Solution…** , and then you can select the package source you want to use with
    the selection box in the top-right corner.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 添加并配置您的包源后，您可以通过尝试还原包或搜索Visual Studio中的包来验证它是否正常工作。转到**工具** | **NuGet包管理器**
    | **管理解决方案的NuGet包…**，然后您可以使用右上角的选择框选择您想要使用的包源。
- en: "![Figure 15.\uFEFF5 – Choosing the package source](img/B22218_15_5.jpg)"
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图15.5 – 选择包源](img/B22218_15_5.jpg)'
- en: Figure 15.5 – Choosing the package source
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.5 – 选择包源
- en: As we conclude our journey through the process of creating and publishing a
    NuGet package, it’s worth taking a moment to appreciate the power and flexibility
    of NuGet. From its humble beginnings as a simple package manager to its current
    status as a cornerstone of .NET development, NuGet continues to evolve and improve.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束创建和发布NuGet包的过程时，值得花点时间来欣赏NuGet的强大和灵活性。从它作为简单的包管理器的朴素起源到目前作为.NET开发基石的地位，NuGet一直在发展和改进。
- en: Advanced NuGet features
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高级NuGet功能
- en: In this final section, we’ll explore some of the more advanced features of NuGet,
    such as target frameworks, pre-release versions, and custom scripts, and discuss
    the best practices for package development. This knowledge will help you create
    more robust, flexible, and maintainable packages.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后，我们将探讨NuGet的一些更高级功能，例如目标框架、预发布版本和自定义脚本，并讨论包开发的最佳实践。这些知识将帮助您创建更健壮、灵活和可维护的包。
- en: Target frameworks
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 目标框架
- en: Target frameworks allow us to specify which .NET platforms your package supports,
    ensuring compatibility across various environments. This feature helps prevent
    compatibility issues by allowing only the installation of your package in projects
    that target supported frameworks.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 目标框架允许我们指定您的包支持哪些.NET平台，确保在各种环境中保持兼容性。此功能通过仅允许在针对支持框架的项目中安装您的包来帮助防止兼容性问题。
- en: When creating a NuGet package, you can define multiple target frameworks within
    the **.csproj** or **.nuspec** file. This setup enables NuGet to pack separate
    binaries for each framework, ensuring that your package leverages platform-specific
    features when available.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建NuGet包时，您可以在**.csproj**或**.nuspec**文件中定义多个目标框架。这种设置使NuGet可以为每个框架打包单独的二进制文件，确保当可用时，您的包利用平台特定的功能。
- en: 'Here’s an example of configuration:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个配置示例：
- en: '[PRE3]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This configuration indicates that the project targets both .NET Framework 4.6
    and .NET Standard 2.0, allowing optimal compatibility and functionality across
    different environments.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置表示项目针对.NET Framework 4.6和.NET Standard 2.0，允许在不同环境中实现最佳兼容性和功能。
- en: Pre-release versions
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 预发布版本
- en: Pre-release versions are a way to distribute packages that are not yet ready
    for production use. These versions are typically used for beta testing, release
    candidates, or nightly builds.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布版本是分发尚未准备好用于生产使用的包的一种方式。这些版本通常用于beta测试、发布候选或夜间构建。
- en: To allow package authors to distribute versions of their packages that are not
    considered stable or final, consumers can choose to install these pre-release
    versions to test new features or bug fixes early.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许软件包作者分发他们认为不稳定或最终的软件包版本，消费者可以选择安装这些预发布版本以提前测试新功能或错误修复。
- en: Pre-release versions are denoted by appending a suffix to the version number,
    following a hyphen. Common suffixes include **-alpha** , **-beta** , **-rc** (
    **release candidate** ), and **-preview** . Consumers need to explicitly opt in
    to receive pre-release packages, usually through a setting in their package manager
    client.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布版本通过在版本号后附加一个后缀来表示，后跟一个连字符。常见的后缀包括**-alpha**、**-beta**、**-rc**（**发布候选**）和**-preview**。消费者需要明确选择才能接收预发布软件包，通常通过他们的软件包管理器客户端中的设置来完成。
- en: 'Here’s an example of configuring a **-** **beta** version:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个配置**-** **beta** 版本的示例：
- en: '[PRE4]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This indicates that the package is a beta version of 1.0.0, suitable for testing
    but not recommended for production use.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这表明该软件包是1.0.0的beta版本，适合测试但不推荐用于生产使用。
- en: Custom scripts
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制脚本
- en: NuGet supports the execution of PowerShell scripts during the installation or
    uninstallation of a package. This feature can be used for various purposes, such
    as modifying project files, registering **Component Object Model (COM)** components,
    or performing other setup tasks.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: NuGet支持在安装或卸载软件包时执行PowerShell脚本。此功能可用于各种目的，例如修改项目文件、注册**组件对象模型（COM）**组件或执行其他设置任务。
- en: Custom scripts automate tasks that need to occur when a package is installed
    or uninstalled, reducing manual steps for the consumer and ensuring consistency.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 定制脚本自动化了在安装或卸载软件包时需要执行的任务，减少了消费者的手动步骤并确保了一致性。
- en: 'As Package authors, we can include PowerShell scripts in our packages that
    NuGet will execute at appropriate times. There are several types of scripts, including
    **init.ps1** (run once per solution), **install.ps1** (run every time the package
    is installed), and **uninstall.ps1** (run when the package is uninstalled):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件包作者，我们可以在我们的软件包中包含PowerShell脚本，NuGet将在适当的时候执行这些脚本。有几种类型的脚本，包括**init.ps1**（每次解决方案运行一次）、**install.ps1**（每次安装软件包时运行）和**uninstall.ps1**（在卸载软件包时运行）：
- en: '[PRE5]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This configuration specifies a fallback target framework and includes a custom
    script ( **precompile.js** ) that will be executed under certain conditions. Note
    that custom scripts are less commonly used today, especially with the evolution
    of .NET Core and .NET Standard, but they remain supported for backward compatibility.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置指定了一个后备目标框架，并包含一个将在特定条件下执行的定制脚本（**precompile.js**）。请注意，定制脚本现在使用较少，尤其是在.NET
    Core和.NET Standard的发展过程中，但为了向后兼容，它们仍然得到支持。
- en: By leveraging these advanced features of NuGet, we can create more sophisticated
    and flexible packages that better meet the needs of the users across different
    environments and stages of development.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用NuGet的这些高级功能，我们可以创建更复杂和灵活的软件包，更好地满足不同环境和开发阶段用户的需求。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the essential aspects of NuGet and package management
    within the .NET ecosystem. We began by understanding what NuGet is and why it’s
    a critical tool for managing dependencies in modern development. We learned how
    to create our first NuGet package, including setting up a project, writing the
    necessary code, and packaging it into a **.** **nupkg** file.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了.NET生态系统内NuGet和软件包管理的关键方面。我们首先了解了什么是NuGet以及为什么它是现代开发中管理依赖关系的关键工具。我们学习了如何创建我们的第一个NuGet软件包，包括设置项目、编写必要的代码并将其打包成**.**
    **nupkg**文件。
- en: We then delved into versioning and dependency management, highlighting the importance
    of semantic versioning and strategies to maintain compatibility across different
    versions. The chapter also covered the steps involved in publishing and distributing
    NuGet packages, both to the official NuGet gallery and through alternative methods,
    ensuring that your packages are accessible to others.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们随后深入探讨了版本控制和依赖关系管理，强调了语义版本控制的重要性以及在不同版本之间保持兼容性的策略。本章还涵盖了发布和分发NuGet软件包的步骤，无论是官方NuGet库还是通过其他方法，确保您的软件包对他人可访问。
- en: Finally, we explored advanced features and best practices, such as targeting
    specific platforms, using pre-release versions, and incorporating custom scripts.
    Now, you have gained a comprehensive understanding of how to create, manage, and
    distribute NuGet packages, equipping you with the tools to enhance your .NET development
    practices.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们探讨了高级功能和最佳实践，例如针对特定平台，使用预发布版本，以及集成自定义脚本。现在，你已经全面了解了如何创建、管理和分发 NuGet 包，并为你提供了增强
    .NET 开发实践的工具。
- en: As we reach the conclusion of *Mastering Visual Studio* , we’ve journeyed through
    a wide array of advanced techniques, tools, and best practices that are essential
    for any serious developer working within the .NET and Visual Studio ecosystem.
    This book has equipped you with powerful skills and knowledge to become a more
    efficient, versatile, and innovative developer. Whether you’re building intelligent
    applications, optimizing performance, or contributing to the developer community,
    the skills you’ve gained will continue to drive your success in the world of software
    development.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 随着《精通 Visual Studio》的结束，我们经历了一系列对任何在 .NET 和 Visual Studio 生态系统内工作的严肃开发者至关重要的高级技术、工具和最佳实践。这本书为你提供了强大的技能和知识，使你成为一个更高效、多才多艺和创新的开发者。无论你是在构建智能应用、优化性能，还是为开发者社区做出贡献，你所获得的技能将继续推动你在软件开发世界中的成功。
