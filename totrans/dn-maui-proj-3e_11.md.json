["```cs\nbuilder.Services.AddMauiBlazorWebView();\n#if DEBUG\nÂ Â Â Â builder.Services.AddBlazorWebViewDeveloperTools();\nÂ Â Â Â builder.Logging.AddDebug();\n#endif\n```", "```cs\n<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<ContentPage\n\nÂ Â Â Â x:Class=\"Calculator.MainPage\"\nÂ Â Â Â BackgroundColor=\"{DynamicResource PageBackgroundColor}\">\nÂ Â Â Â <BlazorWebView x:Name=\"blazorWebView\" HostPage=\"wwwroot/index.html\">\nÂ Â Â Â Â Â <BlazorWebView.RootComponents>\nÂ Â Â Â Â Â Â Â <RootComponent Selector=\"#app\" ComponentType=\"{x:Type local:Main}\" />\nÂ Â Â Â Â Â </BlazorWebView.RootComponents>\nÂ Â Â Â </BlazorWebView>\n</ContentPage>\n```", "```cs\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\nÂ Â <meta charset=\"utf-8\" />\nÂ Â <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover\" />\nÂ Â <title>Calculator</title>\nÂ Â <base href=\"/\" />\nÂ Â <link rel=\"stylesheet\" href=\"css/bootstrap/bootstrap.min.css\" />\nÂ Â <link href=\"css/app.css\" rel=\"stylesheet\" />\nÂ Â <link href=\"Calculator.styles.css\" rel=\"stylesheet\" />\n</head>\n<body>\nÂ Â <div class=\"status-bar-safe-area\"></div>\nÂ Â <div id=\"app\">Loading...</div>\nÂ Â <div id=\"blazor-error-ui\">\nÂ Â Â Â An unhandled error has occurred.\nÂ Â Â Â <a href=\"\" class=\"reload\">Reload</a>\nÂ Â Â Â <a class=\"dismiss\">ðŸ—™</a>\nÂ Â </div>\nÂ Â <script src=\"img/blazor.webview.js\" autostart=\"false\"></script>\n</body>\n</html>\n```", "```cs\n<Router AppAssembly=\"@typeof(Main).Assembly\">\nÂ Â <Found Context=\"routeData\">\nÂ Â Â Â <RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" />\nÂ Â Â Â <FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\" />\nÂ Â </Found>\nÂ Â <NotFound>\nÂ Â Â Â <LayoutView Layout=\"@typeof(MainLayout)\">\nÂ Â Â Â Â Â <p role=\"alert\">Sorry, there's nothing at this address.</p>\nÂ Â Â Â </LayoutView>\nÂ Â </NotFound>\n</Router>\n```", "```cs\n@inherits LayoutComponentBase\n<div class=\"page\">\nÂ Â <div class=\"sidebar\">\nÂ Â Â Â <NavMenu />\nÂ Â </div>\nÂ Â <main>\nÂ Â Â Â <div class=\"top-row px-4\">\nÂ Â Â Â Â Â <a href=\"https://docs.microsoft.com/aspnet/\" target=\"_blank\">About</a>\nÂ Â Â Â </div>\nÂ Â Â Â <article class=\"content px-4\">\nÂ Â Â Â Â Â @Body\nÂ Â Â Â </article>\nÂ Â </main>\n</div>\n```", "```cs\n@page \"/counter\"\n<h1>Counter</h1>\n<p role=\"status\">Current count: @currentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\nÂ Â Â Â private int currentCount = 0;\nÂ Â Â Â private void IncrementCount()\nÂ Â Â Â {\nÂ Â Â Â Â Â currentCount++;\nÂ Â Â Â }\n}\n```", "```cs\n    @page \"/\"\n    <h3>Keypad</h3>\n    <div>Keypad goes here</div>\n    @code {\n    }\n    ```", "```cs\n    @inherits LayoutComponentBase\n    <div class=\"page\">\n    Â Â Â Â <div class=\"sidebar\">\n    Â Â Â Â Â Â <NavMenu />\n    Â Â Â Â </div>\n    Â Â Â Â <main>\n    Â Â Â Â Â Â <div class=\"top-row px-4\">\n    Â Â Â Â Â Â Â Â <a href=\"https://docs.microsoft.com/aspnet/\" target=\"_blank\">About</a>\n    Â Â Â Â Â Â </div>\n    Â Â Â Â Â Â <article class=\"content px-4\">\n    Â Â Â Â Â Â Â Â @Body\n    Â Â Â Â Â Â </article>\n    Â Â Â Â </main>\n    </div>\n    ```", "```cs\n    using Calculator.Data;\n    using Microsoft.Extensions.Logging;\n    namespace Calculator\n    {\n    Â Â Â Â public static class MauiProgram\n    Â Â Â Â {\n    Â Â Â Â Â Â public static MauiApp CreateMauiApp()\n    Â Â Â Â Â Â {\n    Â Â Â Â Â Â Â Â var builder = MauiApp.CreateBuilder();\n    Â Â Â Â Â Â Â Â builder\n    Â Â Â Â Â Â Â Â Â Â .UseMauiApp<App>()\n    Â Â Â Â Â Â Â Â Â Â .ConfigureFonts(fonts =>\n    Â Â Â Â Â Â Â Â Â Â {\n    Â Â Â Â Â Â Â Â Â Â Â Â fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n    Â Â Â Â Â Â Â Â Â Â });\n    Â Â Â Â Â Â Â Â builder.Services.AddMauiBlazorWebView();\n    #if DEBUG\n    Â Â Â Â Â Â builder.Services.AddBlazorWebViewDeveloperTools();\n    Â Â Â Â Â Â builder.Logging.AddDebug();\n    #endif\n    Â Â Â Â Â Â builder.Services.AddSingleton<WeatherForecastService>();\n    Â Â Â Â Â Â return builder.Build();\n    Â Â Â Â Â Â }\n    Â Â Â Â }\n    }\n    ```", "```cs\n    @page \"/\"\n    <h3>Keypad</h3>\n    <div>Keypad goes here</div>\n    @code {\n    }\n    ```", "```cs\n    <div class=\"keypad\">\n    Â Â <div class=\"keypad-body\">\n    Â Â Â Â <div class=\"keypad-screen\">\n    Â Â Â Â Â Â <div class=\"keypad-typed\"></div>\n    Â Â Â Â </div>\n    Â Â Â Â <div class=\"keypad-row\">\n    Â Â Â Â Â Â <div class=\"keypad-button wide command\">C</div>\n    Â Â Â Â Â Â <div class=\"keypad-button command\">CE</div>\n    Â Â Â Â Â Â <div class=\"keypad-button operator\">/</div>\n    Â Â Â Â </div>\n    Â Â Â Â <div class=\"keypad-row\">\n    Â Â Â Â Â Â <div class=\"keypad-button\">7</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">8</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">9</div>\n    Â Â Â Â Â Â <div class=\"keypad-button operator\">X</div>\n    Â Â Â Â </div>\n    Â Â Â Â <div class=\"keypad-row\">\n    Â Â Â Â Â Â <div class=\"keypad-button\">4</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">5</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">6</div>\n    Â Â Â Â Â Â <div class=\"keypad-button operator\">âˆ’</div>\n    Â Â Â Â </div>\n    Â Â Â Â <div class=\"keypad-row\">\n    Â Â Â Â Â Â <div class=\"keypad-button\">1</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">2</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">3</div>\n    Â Â Â Â Â Â <div class=\"keypad-button operator\">+</div>\n    Â Â Â Â </div>\n    Â Â Â Â <div class=\"keypad-row\">\n    Â Â Â Â Â Â <div class=\"keypad-button\">.</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">0</div>\n    Â Â Â Â Â Â <div class=\"keypad-button\">&lt;</div>\n    Â Â Â Â Â Â <div class=\"keypad-button operator\">=</div>\n    Â Â Â Â </div>\n    Â Â </div>\n    </div>\n    ```", "```cs\n    .keypad {\n    Â Â Â Â width: 300px;\n    Â Â Â Â margin: auto;\n    Â Â Â Â margin-top: -1.1em;\n    }\n    ```", "```cs\n    .keypad-body {\n    Â Â Â Â border: solid 1px #3A4655;\n    }\n    ```", "```cs\n    .keypad-row {\n    Â Â Â Â width: 100%;\n    Â Â Â Â background: #3C4857;\n    }\n    ```", "```cs\n    .keypad-button {\n    Â Â Â Â width: 25%;\n    Â Â Â Â background: #425062;\n    Â Â Â Â color: #fff;\n    Â Â Â Â padding: 20px;\n    Â Â Â Â display: inline-block;\n    Â Â Â Â font-size: 25px;\n    Â Â Â Â text-align: center;\n    Â Â Â Â vertical-align: middle;\n    Â Â Â Â margin-right: -4px;\n    Â Â Â Â border-right: solid 2px #3C4857;\n    Â Â Â Â border-bottom: solid 2px #3C4857;\n    Â Â Â Â transition: all 0.2s ease-in-out;\n    }\n    ```", "```cs\n    .keypad-button.operator {\n    Â Â Â Â color: #AEB3BA;\n    Â Â Â Â background: #404D5E;\n    }\n    ```", "```cs\n    .keypad-button.command {\n    Â Â Â Â color: #D95D4E;\n    Â Â Â Â background: #404D5E;\n    }\n    ```", "```cs\n    .keypad-button:hover {\n    Â Â Â Â background: #E0B612;\n    }\n    .keypad-button.command:hover,\n    .keypad-button.operator:hover {\n    Â Â Â Â background: #E0B612;\n    Â Â Â Â color: #fff;\n    }\n    ```", "```cs\n    .keypad-button.wide {\n    Â Â Â Â width: 50%;\n    }\n    ```", "```cs\n    .keypad-screen {\n    Â Â Â Â background: #3A4655;\n    Â Â Â Â width: 100%;\n    Â Â Â Â height: 75px;\n    Â Â Â Â padding: 20px;\n    }\n    .keypad-typed {\n    Â Â Â Â font-size: 45px;\n    Â Â Â Â text-align: right;\n    Â Â Â Â color: #fff;\n    }\n    ```", "```cs\n    string inputDisplay = string.Empty;\n    bool clearInputBeforeAppend = false;\n    ```", "```cs\n    <div class=\"keypad-typed\">@inputDisplay</div>\n    ```", "```cs\n    readonly char[] symbols = { '/', 'X', '+', '-', '.' };\n    ```", "```cs\n    void AppendInput(string inputValue)\n    {\n    Â Â Â Â double numValue;\n    Â Â Â Â if (clearInputBeforeAppend)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â inputDisplay = string.Empty;\n    Â Â Â Â }\n    Â Â Â Â if (string.IsNullOrEmpty(inputDisplay) && inputValue.IndexOfAny(symbols) != -1)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â return;\n    Â Â Â Â }\n    Â Â Â Â if (!double.TryParse(inputValue, out numValue) && !string.IsNullOrEmpty(inputDisplay) && $\"{inputDisplay[^1]}\".IndexOfAny(symbols) != -1)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â return;\n    Â Â Â Â }\n    Â Â Â Â if (inputDisplay.Trim() == \"0\" && inputValue == \"0\")\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â return;\n    Â Â Â Â }\n    Â Â Â Â clearInputBeforeAppend = false;\n    Â Â Â Â inputDisplay += inputValue;\n    }\n    ```", "```cs\n    void Undo()\n    {\n    Â Â Â Â if (!clearInputBeforeAppend && inputDisplay.Length > 0)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â inputDisplay = inputDisplay[0..^1];\n    Â Â Â Â Â Â Â Â return;\n    Â Â Â Â }\n    }\n    ```", "```cs\n    void ClearInput()\n    {\n    Â Â Â Â inputDisplay = string.Empty;\n    }\n    ```", "```cs\n    void ClearAll()\n    {\n    Â Â Â Â ClearInput();\n    }\n    ```", "```cs\n    void EvaluateExpression()\n    {\n    Â Â Â Â var expression = inputDisplay;\n    Â Â Â Â clearInputBeforeAppend = true;\n    }\n    ```", "```cs\n<div class=\"keypad\">\nÂ Â Â Â <div class=\"keypad-body\">\nÂ Â Â Â Â Â Â Â <div class=\"keypad-screen\">\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-typed\">@inputDisplay</div>\nÂ Â Â Â Â Â Â Â </div>\nÂ Â Â Â Â Â Â Â <div class=\"keypad-row\">\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button wide command\" @onclick=\"ClearInput\">C</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button command\" @onclick=\"ClearAll\">CE</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button operator\" @onclick=\"@(()=>AppendInput(\"/\"))\">/</div>\nÂ Â Â Â Â Â Â Â </div>\nÂ Â Â Â Â Â Â Â <div class=\"keypad-row\">\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"7\"))\">7</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"8\"))\">8</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"9\"))\">9</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button operator\" @onclick=\"@(()=>AppendInput(\"X\"))\">X</div>\nÂ Â Â Â Â Â Â Â </div>\nÂ Â Â Â Â Â Â Â <div class=\"keypad-row\">\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"4\"))\">4</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"5\"))\">5</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"6\"))\">6</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button operator\" @onclick=\"@(()=>AppendInput(\"-\"))\">âˆ’</div>\nÂ Â Â Â Â Â Â Â </div>\nÂ Â Â Â Â Â Â Â <div class=\"keypad-row\">\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"1\"))\">1</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"2\"))\">2</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"3\"))\">3</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button operator\" @onclick=\"@(()=>AppendInput(\"+\"))\">+</div>\nÂ Â Â Â Â Â Â Â </div>\nÂ Â Â Â Â Â Â Â <div class=\"keypad-row\">\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\".\"))\">.</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"@(()=>AppendInput(\"0\"))\">0</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button\" @onclick=\"Undo\">&lt;</div>\nÂ Â Â Â Â Â Â Â Â Â Â Â <div class=\"keypad-button operator\" @onclick=\"EvaluateExpression\">=</div>\nÂ Â Â Â Â Â Â Â </div>\nÂ Â Â Â </div>\n</div>\n```", "```cs\n    namespace Calculator.Services;\n    internal class Compute\n    {\n    Â Â Â Â public string Evaluate(string expression)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â System.Data.DataTable dataTable = new System.Data.DataTable();\n    Â Â Â Â Â Â Â Â var finalResult = dataTable.Compute(expression, string.Empty);\n    Â Â Â Â Â Â Â Â return finalResult.ToString();\n    Â Â Â Â }\n    }\n    ```", "```cs\n    #if DEBUG\n    Â Â Â Â builder.Services.AddBlazorWebViewDeveloperTools();\n    Â Â Â Â builder.Logging.AddDebug();\n    #endif\n    Â Â Â Â builder.Services.AddSingleton<Compute>();\n    Â Â Â Â return builder.Build();\n    ```", "```cs\n    @using Calculator.Services\n    ```", "```cs\n    @inject Compute compute\n    ```", "```cs\n    void EvaluateExpression()\n    {\n    Â Â Â Â var expression = inputDisplay;\n    Â Â Â Â var result = compute.Evaluate(inputDisplay.Replace('X', '*'));\n    Â Â Â Â inputDisplay = result;\n    Â Â Â Â clearInputBeforeAppend = true;\n    }\n    ```", "```cs\n    using System.Collections.ObjectModel;\n    namespace Calculator.ViewModels;\n    public class Calculations : ObservableCollection<Calculation>\n    {\n    }\n    public class Calculation : Tuple<string, string>\n    {\n    Â Â Â Â public Calculation(string expression, string result) : base(expression, result) { }\n    Â Â Â Â public string Expression => this.Item1;\n    Â Â Â Â public string Result => this.Item2;\n    }\n    ```", "```cs\n    using CommunityToolkit.Mvvm.Input;\n    using CommunityToolkit.Mvvm.Messaging;\n    namespace Calculator.ViewModels;\n    public partial class MainPageViewModel\n    {\n    Â Â Â Â IMessenger messenger;\n    Â Â Â Â public MainPageViewModel(Calculations results, IMessenger messenger)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â Results = results;\n    Â Â Â Â Â Â Â Â this.messenger = messenger;\n    Â Â Â Â }\n    Â Â Â Â public Calculations Results { get; init; }\n    Â Â Â Â [RelayCommand]\n    Â Â Â Â public void Recall(Calculation sender)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â messenger.Send(sender);\n    Â Â Â Â }\n    }\n    ```", "```cs\n    using Calculator.ViewModels;\n    using CommunityToolkit.Mvvm.Messaging;\n    ```", "```cs\n    builder.Services.AddSingleton<Compute>();\n    builder.Services.AddSingleton<Calculations>();\n    builder.Services.AddSingleton<MainPage>();\n    builder.Services.AddSingleton<MainPageViewModel>();\n    builder.Services.AddSingleton<IMessenger>(WeakReferenceMessenger.Default);\n    return builder.Build();\n    ```", "```cs\n    using Calculator.ViewModels;\n    namespace Calculator;\n    public partial class MainPage : ContentPage\n    {\n    Â Â Â Â public MainPage(MainPageViewModel vm)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â InitializeComponent();\n    Â Â Â Â Â Â Â Â BindingContext = vm;\n    Â Â Â Â }\n    }\n    ```", "```cs\n    public App()\n    {\n    Â Â Â Â InitializeComponent();\n    }\n    protected override void OnHandlerChanging(HandlerChangingEventArgs args)\n    {\n    Â Â Â Â base.OnHandlerChanging(args);\n    Â Â Â Â MainPage = args.NewHandler.MauiContext.Services.GetService<MainPage>();\n    }\n    ```", "```cs\n    @using Calculator.ViewModels\n    @using CommunityToolkit.Mvvm.Messaging\n    ```", "```cs\n    @inject Compute compute\n    @inject Calculations calculations\n    @inject IMessenger messenger\n    <div class=\"keypad\">\n    ```", "```cs\n    void ClearAll()\n    {\n    Â Â Â Â ClearInput();\n    Â Â Â Â calculations.Clear();\n    }\n    void EvaluateExpression()\n    {\n    Â Â Â Â var expression = inputDisplay;\n    Â Â Â Â var result = compute.Evaluate(inputDisplay.Replace('X', '*'));\n    Â Â Â Â calculations.Add(new(expression, result));\n    Â Â Â Â inputDisplay = result;\n    Â Â Â Â clearInputBeforeAppend = true;\n    }\n    protected override Task OnAfterRenderAsync(bool firstRender)\n    {\n    Â Â Â Â if (firstRender)\n    Â Â Â Â {\n    Â Â Â Â Â Â Â Â messenger.Register<Calculation>(this, (sender, er) =>\n    Â Â Â Â Â Â Â Â {\n    Â Â Â Â Â Â Â Â Â Â Â Â inputDisplay = er.Expression;\n    Â Â Â Â Â Â Â Â Â Â Â Â clearInputBeforeAppend = true;\n    Â Â Â Â Â Â Â Â Â Â Â Â StateHasChanged();\n    Â Â Â Â Â Â Â Â });\n    Â Â Â Â }\n    Â Â Â Â return base.OnAfterRenderAsync(firstRender);\n    ClearAll will just clear the collection, and EvaluateExpression will add the new Calulation to the collection. OnAfterRenderAsync is used to register this class to receive messages for any Calculation objects. When a message is received, inputDisplay is set to the Expression value of Calculation, and StateHasChanged is called to force the UI to refresh with the updated value.\n    ```", "```cs\n    background-color: black;\n    ```", "```cs\n    <ContentPage\n\n    Â Â Â Â x:Class=\"Calculator.MainPage\"\n    Â Â Â Â x:DataType=\"viewModels:MainPageViewModel\">\n    Â Â Â Â <Grid BackgroundColor=\"Black\">\n    Â Â Â Â Â Â <Grid.RowDefinitions>\n    Â Â Â Â Â Â Â Â <RowDefinition Height=\"1*\" />\n    Â Â Â Â Â Â Â Â <RowDefinition Height=\"1*\" />\n    Â Â Â Â Â Â </Grid.RowDefinitions>\n    Â Â Â Â Â Â <ScrollView Grid.Row=\"0\" BackgroundColor=\"Bisque\" WidthRequest=\"400\" VerticalScrollBarVisibility=\"Always\">\n    Â Â Â Â Â Â Â Â <CollectionView ItemsSource=\"{Binding Results}\" ItemsUpdatingScrollMode=\"KeepLastItemInView\">\n    Â Â Â Â Â Â Â Â Â Â <CollectionView.ItemTemplate>\n    Â Â Â Â Â Â Â Â Â Â Â Â <DataTemplate x:DataType=\"viewModels:ExpressionResult\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â <SwipeView>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <SwipeView.LeftItems>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <SwipeItems Mode=\"Execute\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <SwipeItem\n    Text=\"Recall\"Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â BackgroundColor=\"LightPink\"Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Command=\"{Binding Source={RelativeSource AncestorType={x:Type viewModels:MainPageViewModel}}, Path=RecallCommand}\"Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â CommandParameter=\"{Binding}\"/>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </SwipeItems>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </SwipeView.LeftItems>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <VerticalStackLayout>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <HorizontalStackLayout Padding=\"10\" HorizontalOptions=\"EndAndExpand\">\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Label Text=\"{Binding Expression}\" FontSize=\"Large\" TextColor=\"Black\" HorizontalTextAlignment=\"End\" HorizontalOptions=\"EndAndExpand\"/>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Label Text=\"=\" TextColor=\"Blue\" FontSize=\"Large\" HorizontalTextAlignment=\"End\" HorizontalOptions=\"EndAndExpand\"/>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Label Text=\"{Binding Result}\" FontSize=\"Large\" TextColor=\"Black\" HorizontalTextAlignment=\"End\" HorizontalOptions=\"EndAndExpand\"/>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </HorizontalStackLayout>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Line Stroke=\"LightSlateGray\" X2=\"400\" />\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â <Line Stroke=\"Black\" X2=\"400\" />\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </VerticalStackLayout>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â </SwipeView>\n    Â Â Â Â Â Â Â Â Â Â Â Â Â Â </DataTemplate>\n    Â Â Â Â Â Â Â Â Â Â Â Â </CollectionView.ItemTemplate>\n    Â Â Â Â Â Â Â Â Â Â </CollectionView>\n    Â Â Â Â Â Â </ScrollView>\n    Â Â Â Â Â Â <BlazorWebView Grid.Row=\"1\" x:Name=\"blazorWebView\" HostPage=\"wwwroot/index.html\" HeightRequest=\"540\">\n    Â Â Â Â Â Â Â Â <BlazorWebView.RootComponents>\n    Â Â Â Â Â Â Â Â Â Â <RootComponent Selector=\"#app\" ComponentType=\"{x:Type local:Main}\" />\n    Â Â Â Â Â Â Â Â </BlazorWebView.RootComponents>\n    Â Â Â Â Â Â </BlazorWebView>\n    Â Â Â Â </Grid>\n    </ContentPage>\n    ```", "```cs\nprotected override Window CreateWindow(IActivationState activationState)\n{\nÂ Â Â Â var window = base.CreateWindow(activationState);\nÂ Â Â Â if (OperatingSystem.IsWindows() || OperatingSystem.IsMacCatalyst())\nÂ Â Â Â {\nÂ Â Â Â Â Â Â Â window.Created += Window_Created;\nÂ Â Â Â }\nÂ Â Â Â return window;\n}\nprivate async void Window_Created(object sender, EventArgs e)\n{\nÂ Â Â Â const int defaultWidth = 450;\nÂ Â Â Â const int defaultHeight = 800;\nÂ Â Â Â var window = (Window)sender;\nÂ Â Â Â window.Width = defaultWidth;\nÂ Â Â Â window.Height = defaultHeight;\nÂ Â Â Â window.X = -defaultWidth;\nÂ Â Â Â window.Y = -defaultHeight;\nÂ Â Â Â await window.Dispatcher.DispatchAsync(() => { });\nÂ Â Â Â var displayInfo = DeviceDisplay.Current.MainDisplayInfo;\nÂ Â Â Â window.X = (displayInfo.Width / displayInfo.Density - window.Width) / 2;\nÂ Â Â Â window.Y = (displayInfo.Height / displayInfo.Density - window.Height) / 2;\nÂ Â Â Â window.Created -= Window_Created;\n}\n```"]