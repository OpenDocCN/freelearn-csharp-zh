["```cs\n    using UnityEngine;\n    public class GameManager : MonoBehaviour \n          {\n    ```", "```cs\n        void Start()\n                  {\n                 CameraSetup();  \n             }\n             void CameraSetup()\n             {\n\n             }\n    ```", "```cs\n    GameObject gameCamera =\n             GameObject.FindGameObjectWithTag(\"MainCamera\");\n\n         //Camera Transform\n         gameCamera.transform.position = new Vector3(0,0,-300);\n         gameCamera.transform.eulerAngles = new Vector3(0,0,0);\n    ```", "```cs\n     //Camera Properties\n          gameCamera.GetComponent<Camera>().clearFlags =\n             CameraClearFlags.SolidColor;\n          gameCamera.GetComponent<Camera>().backgroundColor = \n             new Color32(0,0,0,255);\n          }\n    ```", "```cs\n    void LightSetup()\n           {\n              GameObject dirLight = GameObject.Find(\"Directional Light\");\n              dirLight.transform.eulerAngles = new Vector3(50,-30,0);\n              dirLight.GetComponent<Light>().color = \n                 new Color32(152,204,255,255);\n           }\n    ```", "```cs\n    public interface IActorTemplate\n          {\n          int SendDamage();\n          void TakeDamage(int incomingDamage);\n          void Die();\n          void ActorStats(SOActorModel actorModel);\n          }\n    ```", "```cs\n    using UnityEngine; \n         [CreateAssetMenu(fileName = \"Create Actor\", menuName = \n             \"Create  Actor\")]\n         public class SOActorModel : ScriptableObject \n\n         { \n              public string actorName;\n              public AttackType attackType;\n\n              public enum AttackType\n               {\n                  wave, player, flee, bullet\n               }\n              public string description;\n              public int health;\n              public int speed;\n              public int hitPower;\n              public GameObject actor;\n              public GameObject actorsBullets;\n         }\n    ```", "```cs\n    using UnityEngine;\n    ```", "```cs\n    public class PlayerSpawner : MonoBehaviour \n         {\n    ```", "```cs\n       SOActorModel actorModel;\n            GameObject playerShip;\n    ```", "```cs\n    void Start()\n          {\n            CreatePlayer();\n          }\n    ```", "```cs\n    void CreatePlayer()\n           {\n             //CREATE PLAYER\n             actorModel = Object.Instantiate(Resources.Load\n                (\"Player_Default\")) \n                    as SOActorModel;\n             playerShip = GameObject.Instantiate(actorModel.actor) \n                as GameObject;\n             playerShip.GetComponent<Player>().ActorStats(actorModel);\n\n         //SET PLAYER UP\n\n          }\n         }\n    ```", "```cs\n    //SET PLAYER UP\n         playerShip.transform.rotation = Quaternion.Euler(0,180,0);\n         playerShip.transform.localScale = new Vector3(60,60,60);\n         playerShip.name = \"Player\";\n         playerShip.transform.SetParent(this.transform);\n         playerShip.transform.position = Vector3.zero;\n    ```", "```cs\n    using UnityEngine;\n\n          public class Player : MonoBehaviour, IActorTemplate\n          {\n    ```", "```cs\n             int travelSpeed;\n             int health;\n             int hitPower;\n             GameObject actor;\n             GameObject fire;    \n\n             public int Health\n             {\n                 get {return health;}\n                 set {health = value;}\n             }\n\n             public GameObject Fire\n             {\n                 get {return fire;}\n                 set {fire = value;}\n             }\n\n             GameObject _Player;\n\n             float width;\n             float height;\n\n    ```", "```cs\n     void Start()\n          {\n            height = 1/(Camera.main.WorldToViewportPoint (new\n               Vector3(1,1,0)).y - .5f);\n            width = 1/(Camera.main.WorldToViewportPoint(new Vector3(1,1,0))\n               .x - .5f);\n\n            _Player = GameObject.Find(\"_Player\");\n          }\n    ```", "```cs\n     void Update ()\n          {\n              //Movement();\n              //Attack();\n          }\n    ```", "```cs\n    public void ActorStats(SOActorModel actorModel)\n          {\n              health = actorModel.health;\n              travelSpeed = actorModel.speed;\n              hitPower = actorModel.hitPower;\n              fire = actorModel.actorsBullets;\n          }\n    ```", "```cs\n      void OnTriggerEnter(Collider other)\n           {\n             if (other.tag == \"Enemy\")\n             {\n               if (health >= 1)\n               {\n                if (transform.Find(\"energy +1(Clone)\"))\n                 {\n                  Destroy(transform.Find(\"energy +1(Clone)\").              gameObject);\n                  health -= other.GetComponent<IActorTemplate>\n                    ().SendDamage();\n                 }\n                 else\n                 {\n                     health -= 1;\n                 }\n               }\n\n               if (health <= 0)\n               {\n                 Die();\n               }\n             }\n           }\n    ```", "```cs\n    public void TakeDamage(int incomingDamage)\n          {\n            health -= incomingDamage;\n          }\n\n          public int SendDamage()\n          {\n            return hitPower;\n          }\n    ```", "```cs\n    void Movement()\n         {\n           if (Input.GetAxisRaw(\"Horizontal\") > 0)\n           {\n              if (transform.localPosition.x < width +              width/0.9f)\n              {\n                transform.localPosition += new Vector3\n                   (Input.GetAxisRaw(\"Horizontal\")\n                     *Time.deltaTime*travelSpeed,0,0);                                                                                                                            \n              }\n           }\n    ```", "```cs\n    if (Input.GetAxisRaw(\"Horizontal\") < 0)\n            {\n              if (transform.localPosition.x > width +               width/6)\n              {\n               transform.localPosition += new Vector3\n                 (Input.GetAxisRaw(\"Horizontal\")\n                   *Time.deltaTime*travelSpeed,0,0);                                                                       \n              }\n            } \n    ```", "```cs\n    if (Input.GetAxisRaw(\"Vertical\") < 0)\n         {\n             if (transform.localPosition.y > -height/3f)\n             {\n              transform.localPosition += new Vector3\n               (0,Input.GetAxisRaw(\"Vertical\")*Time.deltaTime*travelSpeed,0);\n             }\n         }\n    ```", "```cs\n    if (Input.GetAxisRaw(\"Vertical\") > 0)\n            {\n             if (transform.localPosition.y < height/2.5f)\n            {\n             transform.localPosition += new Vector3\n               (0,Input.GetAxisRaw(\"Vertical\")*Time.deltaTime*travelSpeed,0);\n            }\n           }\n         }\n    ```", "```cs\npublic void Die()\n      {\n          Destroy(this.gameObject);\n      }\n```", "```cs\npublic void Attack()\n      {\n       if (Input.GetButtonDown(\"Fire1\"))\n         {\n             GameObject bullet = GameObject.Instantiate\n                (fire,transform.position,Quaternion.Euler\n                  (new Vector3(0, 0, 0))) as GameObject;\n             bullet.transform.SetParent(_Player.transform);\n             bullet.transform.localScale = new Vector3(7,7,7);\n         }\n       }\n\n```", "```cs\nvoid Update()\n{\n\tMovement();\n\tAttack();\n}\n```", "```cs\n    using UnityEngine;\n    ```", "```cs\n    public class PlayerBullet : MonoBehaviour, IActorTemplate {\n    ```", "```cs\n    GameObject actor;\n         int hitPower;\n         int health;\n         int travelSpeed;\n\n         [SerializeField]\n         SOActorModel bulletModel;\n    ```", "```cs\n    void Awake()\n          {\n              ActorStats(bulletModel);\n          }\n    ```", "```cs\n     public int SendDamage()\n          {\n            return hitPower;\n          }\n\n          public void TakeDamage(int incomingDamage)\n          {\n            health -= incomingDamage;\n          }\n    ```", "```cs\n     public void Die()\n          {\n              Destroy(this.gameObject);\n          }\n    ```", "```cs\n     public void ActorStats(SOActorModel actorModel)\n          {\n            hitPower = actorModel.hitPower;\n            health = actorModel.health;\n            travelSpeed = actorModel.speed;\n            actor = actorModel.actor;\n          }\n    ```", "```cs\n    void OnTriggerEnter(Collider other)\n          {\n          if (other.tag == \"Enemy\")\n          {\n              if(other.GetComponent<IActorTemplate>() != null)\n              {\n                  if (health >= 1)\n                  {\n                      health -= other.GetComponent<IActorTemplate>\n                        ().SendDamage();\n                  }\n                  if (health <= 0)\n                  {\n                      Die();\n                  }\n              }\n           }\n          }\n    ```", "```cs\n    void Update ()\n          {\n            transform.position += new\n               Vector3(travelSpeed,0,0)*Time.deltaTime;\n          }\n    ```", "```cs\n        void OnBecameInvisible() \n             {\n               Destroy(gameObject);\n             }\n         }\n    ```", "```cs\n    using System.Collections;\n         using UnityEngine;\n    ```", "```cs\n    public class EnemySpawner : MonoBehaviour\n         {\n    ```", "```cs\n     [SerializeField]\n          SOActorModel actorModel;\n          [SerializeField]\n          float spawnRate;\n          [SerializeField]\n          [Range(0,10)]\n     int quantity;\n          GameObject enemies;\n    ```", "```cs\n    void Awake()\n          {\n              enemies = GameObject.Find(\"_Enemies\");\n              StartCoroutine(FireEnemy(quantity, spawnRate));\n          }\n    ```", "```cs\n    IEnumerator FireEnemy(int qty, float spwnRte)\n          {\n           for (int i = 0; i < qty; i++)\n           {\n            GameObject enemyUnit = CreateEnemy();\n            enemyUnit.gameObject.transform.SetParent(this.transform);\n            enemyUnit.transform.position = transform.position;\n            yield return new WaitForSeconds(spwnRte); \n           }\n            yield return null;\n           }\n    ```", "```cs\n    GameObject CreateEnemy()\n         {\n           GameObject enemy = GameObject.Instantiate(actorModel.actor) \n              as GameObject;\n           enemy.GetComponent<IActorTemplate>().ActorStats(actorModel);\n           enemy.name = actorModel.actorName.ToString();\n           return enemy;\n         }\n         }\n    ```", "```cs\n    using UnityEngine;\n    ```", "```cs\n    public class EnemyWave : MonoBehaviour, IActorTemplate\n         {\n    ```", "```cs\n     int health;\n          int travelSpeed;\n          int fireSpeed;\n          int hitPower;\n\n          //wave enemy\n          [SerializeField]\n          float verticalSpeed = 2;\n          [SerializeField]\n          float verticalAmplitude = 1;\n          Vector3 sineVer;\n          float time;\n    ```", "```cs\n    void Update ()\n          {\n              Attack();\n          }\n    ```", "```cs\n    public void ActorStats(SOActorModel actorModel)\n          {\n              health = actorModel.health;\n              travelSpeed = actorModel.speed;\n              hitPower = actorModel.hitPower;\n          }\n    ```", "```cs\n    public void Die()\n          {\n              Destroy(this.gameObject);\n          }\n    ```", "```cs\n    void OnTriggerEnter(Collider other)\n          {\n            // if the player or their bullet hits you.\n            if (other.tag == \"Player\")\n            {\n               if (health >= 1)\n               {\n                  health -= other.GetComponent<IActorTemplate>\n                    ().SendDamage();\n               }\n               if (health <= 0)\n               {\n                  Die();\n               }\n             }\n           }\n\n    ```", "```cs\n    public void TakeDamage(int incomingDamage)\n          {\n            health -= incomingDamage;\n          }\n          public int SendDamage()\n          {\n            return hitPower;\n          }\n    ```", "```cs\n    public void Attack()\n          {\n            time += Time.deltaTime;\n            sineVer.y = Mathf.Sin(time * verticalSpeed) *     verticalAmplitude;\n            transform.position = new Vector3(transform.            position.x + travelSpeed * Time.deltaTime,\n            transform.position.y + sineVer.y,\n            transform.position.z);\n          }}\n    ```"]