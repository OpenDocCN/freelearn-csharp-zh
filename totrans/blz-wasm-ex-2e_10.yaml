- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Azure Active Directory to Secure a Blazor WebAssembly Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security is important. Most applications require each user to provide their
    credentials before they can access all the functionality supplied by the application.
    Managing usernames, passwords, roles, and groups can be tedious and complicated.
    Using **Azure Active Directory** (**Azure AD**) makes it easy. Azure AD is an
    identity provider in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we create in this chapter will allow the user to view the claims
    provided by the token that is returned from Azure AD after the user is authenticated
    by Azure AD. We will be using the **Microsoft Authentication Library** (**MSAL**)
    to acquire **JSON Web Tokens** (**JWTs**)from Azure AD. We will be using **Open
    ID Connect** (**OIDC**) endpoints to authenticate users. OIDC is a simple identity
    layer built on the industry standard OAuth 2.0 protocol. It allows clients to
    verify the identity of a user based on the authentication performed by an identity
    provider, such as Duende Identity Server or Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn the difference between authentication and authorization.
    We will learn how to use the `RemoteAuthenticationView` component to handle the
    various actions required during each stage of authentication. We will also learn
    how to use the `CascadingAuthenticationState` component to share the authentication
    state with each of its children. Finally, we will learn how to control what is
    rendered to the user by using the `Authorize` attribute and the `AuthorizeView`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we create in this chapter will be a claims reader. It will
    allow users who belong to a particular group within Azure AD to view the contents
    of the token that is returned from Azure AD after authentication. If the user
    is not authenticated or does not belong to the appropriate group, they will receive
    a warning message.
  prefs: []
  type: TYPE_NORMAL
- en: Who are you? And what
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: are you authorized to do?
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your identity.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the difference between authentication and authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling the user interface using authorization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the claims viewer project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*. Since we will
    be using Azure AD for authentication, you will need an account on Microsoft Azure.
    If you do not have an account on Microsoft Azure, refer to *Chapter 1*, *Introduction
    to Blazor WebAssembly*, to create a free account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter10).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch10](https://packt.link/Ch10).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the difference between authentication and authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication and authorization are the two sides of the same security coin.
    Authentication is the process of obtaining credentials from a user to verify the
    identity of the user. Authorization is the process of checking the privileges
    for the user to access specific resources.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication always precedes authorization.
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated](img/B18471_10_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.1: Authentication vs Authorization'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding image illustrates the difference between authentication and authorization.
    The left-hand side of the image shows a sample login screen that is used to determine
    who the user is. The right-hand side of the image shows the list of groups or
    roles that the user does or does not belong to, which is used to determine what
    the user can do.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Blazor provides the **RemoteAuthenticatorView** component to make creating the
    various authentication pages easier. This component persists and controls state
    across authentication operations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a high-level explanation of how authentication works:'
  prefs: []
  type: TYPE_NORMAL
- en: An anonymous user attempts to log in or requests a page with the `Authorize`
    attribute applied.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user is redirected to the `/authentication/login` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters their credentials.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If they are authenticated, they are redirected to the `/authentication/login-callback`
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: However, if they are not authenticated, they are redirected to the `/authentication/login-failed`
    page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the code for a sample `Authentication` component that relies on the
    `RemoteAuthenticatorView` component to handle the various authentication actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Authentication.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `Action` property is determined by the route, and
    the `LoggingIn` property is used to define the UI that is rendered while the user
    is logging in. The `LoggingIn` property is a `RenderFragment`. We do not need
    to provide the `LoggingIn` property since there is a default one defined by the
    `RemoteAuthenticatorView` component. We have only included it as an example. All
    the properties of the `RemoteAuthenticatorView` component that are of type `RenderFragment`
    have default values provided for them by the framework.
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code, only two of the properties of the `RemoteAuthenticatorView`
    component are defined. However, there are quite a few more properties available.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the properties of the `RemoteAuthenticatorView` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Action`: the current action. The options are `LogIn`, `LogInCallback`, `LogInFailed`,
    `LogOut`, `LogOutCallback`, `LogOutFailed`, `LogOutSucceeded`, `Profile`, and
    `Register`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ApplicationPaths`: the paths to the various authentication pages. Since we
    will be using the default values for each path, we will not be using this property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AuthenticationState`: the authentication state. It is persisted during the
    authentication operation. It is of type `TAuthenticationState`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CompletingLoggingIn`: the UI to display when `LogInCallback` is being handled.
    It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CompletingLogOut`: the UI to display when `LogOutCallback` is being handled.
    It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LoggingIn`: the UI to display when `LogIn` is being handled. It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LogInFailed`: the UI to display when `LogInFailed` is being handled. It is
    a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LogOut`: the UI to display when `LogOut` is being handled. It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LogOutFailed`: the UI to display when `LogOutFailed` is being handled. It
    is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LogOutSucceeded`: the UI to display when `LogOutSucceeded` is being handled.
    It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnLogInSucceeded`: the event callback that is invoked when the log-in operation
    succeeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OnLogOutSucceeded`: the event callback that is invoked when the logout operation
    succeeds.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Registering`: the UI to display when `Register` is being handled. It is a
    `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserProfile`: the UI to display when `Profile` is being handled. It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the `RemoteAuthenticatorView` component makes it easy to handle the authentication
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Blazor WebAssembly applications, the authorization checks are all handled
    on the client. Since a malicious user can change the behavior of the client-side
    code, our authorization checks can be compromised. Therefore, we will only be
    using authorization to handle differences in the user interface that vary depending
    on the rights of the user.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Never trust the client!
  prefs: []
  type: TYPE_NORMAL
- en: Real security can only be enforced by using a backend server. We cannot authenticate
    our users on the client, nor can we reliably authorize their actions on the client.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization work together to secure our applications. Authentication
    is used to determine who the user is, while authorization is used to determine
    what they can do.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the `RemoteAuthenticatorView` component, Blazor WebAssembly provides
    some other built-in components to help us work with authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Working with authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `CascadingAuthenticationState` component and the `AuthorizeRouteView` component
    work together to make authentication simpler. The `CascadingAuthenticationState`
    component is responsible for cascading the user’s authentication state to all
    its descendants. It is typically used to wrap the `Router` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `App` component relies on the `CascadingAuthenticationState`
    component to provide the user’s authentication state to all the routable components:'
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes we refer to routable components as pages.
  prefs: []
  type: TYPE_NORMAL
- en: '**App.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding markup, the `Found` attribute contains the following `AuthorizeRouteView`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `Router` component is used to route the requests.
    If a valid route is found, it uses the `AuthorizeRouteView` component instead
    of the `RouteView` component to determine if the user is authorized to view the
    page. If they are not authorized and they have not yet been authenticated, it
    redirects the user to the `/authentication/login` page. However, if they are not
    authorized and they have been authenticated, it renders the error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since the `App` component is using the `CascadingAuthenticationState` component,
    the `Task<AuthenticationState>` cascading parameter is supplied to each page.
    The following code uses it to populate the `userName` field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `authStateTask` parameter is used to cascade the
    value of the `AuthenticationState` from the `CascadingAuthenticationState` component.
  prefs: []
  type: TYPE_NORMAL
- en: Blazor WebAssembly uses the built-in DI service called `AuthenticationStateProvider`
    to determine whether the user is logged in. The `AuthenicationStateProvider` class
    provides information about the authentication state of the current user. The `User`
    property of the `AuthenicationStateProvider` provides the **ClaimsPrincipal**
    for the current user. The `ClaimsPrincipal` is simply the claims-based identity
    of the user.
  prefs: []
  type: TYPE_NORMAL
- en: By using the built-in components, we can confirm the identity of the user. Next,
    we need to determine what the user is authorized to do.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the user interface using authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After a user is authenticated, authorization rules are used to control what
    the user can see and do. The `Authorize` attribute and the `AuthorizeView` component
    are used to control the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The Authorize attribute
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `Authorize` attribute is used to require that the user is authorized to
    view the page that is decorated with the attribute. It should only be used on
    routable components. The following component includes the `Authorize` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When an unauthenticated user tries to navigate to a page with the `Authorize`
    attribute, they are automatically redirected to the `/authentication/login` page.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: You can require authentication for every page by adding the `Authorize` attribute
    to the `_Imports.razor` file. However, if you do that, you must add the `AllowAnonymous`
    attribute to the `Authentication` component or your users won’t be able to log
    in.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Authorize` component supports role-based and policy-based authorization.
    If the user has been authenticated and they try to navigate to a page that includes
    either role-based or policy-based authorization, and they do not meet the requirements,
    they will receive the message provided by the `App` component. In the preceding
    sample `App` component, the message is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This example uses the `Roles` parameter for role-based authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, only users who are in either the `admin` or `siteadmin`
    role can access this page.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example uses the `Policy` parameter for policy-based authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, only users who meet the requirements of the `content-admin`
    policy can access the page.
  prefs: []
  type: TYPE_NORMAL
- en: The `Authorize` attribute should only be used on routable components since authorization
    is not performed for child components within a page.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if we create a routable component called `Secure` and secure it
    using either role-based or policy-based authorization, the user cannot navigate
    to the page if their credentials do not meet the requirements. However, if we
    place the same component in another page that the user is authorized to view,
    they can see the content of the `Secure` component.
  prefs: []
  type: TYPE_NORMAL
- en: To only authorize the display of certain parts of a page, use the `AuthorizeView`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: The AuthorizeView component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `AuthorizeView` component is used to control the parts of the user interface
    that are displayed based on what the user is authorized to view.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: By default, non-authenticated users are not authorized to view any content.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AuthorizeView` class has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Authorized`: the content that is rendered if the user is authorized. It is
    a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Authorizing`: the content that is rendered as the user is being authenticated.
    It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NotAuthorized`: the content that is rendered if the user is not authorized.
    It is a `RenderFragment`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Policy`: the policy that determines if the content can be rendered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Roles`: a comma-delimited list of the roles that are allowed to render the
    content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unlike the `RemoteAuthenticatorView` component, the framework does not provide
    default values for the `RenderFragments` used by the `AuthorizeView` component.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code uses the `AuthorizeView` component to create a `LoginDisplay`
    component:'
  prefs: []
  type: TYPE_NORMAL
- en: '**LoginDisplay.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example provides both the `Authorized` template and the `NotAuthorized`
    template. If the user is authorized, their name is displayed, and the **Log out**
    button is rendered. If the user is not authorized, the **Log in** link is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: The `AuthorizeView` component supports role-based and policy-based authorization.
    If the user has been authenticated and they try to navigate to a page that includes
    either role-based or policy-based authorization, and they meet the requirements,
    the UI in the `Authorized` template will be rendered; otherwise, the UI in the
    `NotAuthorized` template will be rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example uses the `Roles` parameter for role-based authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, only users who are in either the `admin` or `siteadmin`
    role will have the indicated text rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'This example uses the `Policy` parameter for policy-based authorization:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, only users who meet the requirements of the `content-admin`
    policy will have the indicated text rendered.
  prefs: []
  type: TYPE_NORMAL
- en: The `AuthorizeView` component can be used in the `NavMenu` component. However,
    although a component does not appear in the `NavMenu`, that does not prevent the
    user from navigating directly to the component. So, you must always set authorization
    rules at the component level.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Never rely on the `NavMenu` component to hide components from unauthorized users.
  prefs: []
  type: TYPE_NORMAL
- en: We can use the `Authorize` attribute and the `AuthorizeView` component to force
    the user to be authenticated and to hide portions of the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the claims viewer project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Blazor WebAssembly application that we are going to build in this chapter
    is a claims viewer. First, we will add the application to Azure AD. After we have
    added the application, we will add a group and a user to Azure AD. We will add
    the required NuGet packages and configure the project to use MSAL authentication.
    Next, we will add components for authentication and login display. We will also
    add the following routable components: **Secure** and **WhoAmI**. Finally, we
    will add and test an authentication policy.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the **WhoAmI** component from the completed
    application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18471_10_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.2: The WhoAmI component from Claims Viewer'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 60 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ClaimsViewer` project will be created by using Microsoft’s **Blazor WebAssembly
    App** **Empty** project template to create an empty Blazor WebAssembly project.
    After we have created our project, we will configure Azure AD by adding the application,
    a new group, and a new user to our Azure AD tenant. Then, we will add the required
    NuGet packages and update our project’s settings. Next, we will add an authentication
    component and a login display component. We will also add a component to display
    the contents of our claims. Finally, we will add and test an authentication policy.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Since Microsoft is constantly updating the Azure Portal, some of the screens
    in the Azure Portal may no longer match the information in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Create the claims viewer project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the **Search for templates** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_10_03.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.3: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ClaimsViewer` in the **Project name** textbox and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_04.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.4: Blazor WebAssembly App Empty Project Template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `ClaimsViewer` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the `Framework` to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_05.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.5: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created an empty `ClaimsViewer` Blazor WebAssembly project. We will
    use Azure AD to provide the identity services.
  prefs: []
  type: TYPE_NORMAL
- en: Add the application to Azure AD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to register the application in Azure AD and add an `appsettings.json`
    file to the project. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `wwwroot` folder and select the **Add**, **New Item** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `json` in the **Search** box.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **App Settings File**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new item `appsettings.json`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace all the text in the file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After we add the application to Azure AD, we will replace the `{Directory (tenant)
    ID}` and the `{Application (client) ID}` placeholders used in the preceding code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Navigate to the Azure Portal, [https://portal.azure.com](https://portal.azure.com).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your `Azure Active Directory` resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: An instance of `Azure Active Directory` was automatically created when you signed
    up for a Microsoft Cloud service subscription.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **App registration** from the **Add** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_10_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.6: App registration in Azure AD'
  prefs: []
  type: TYPE_NORMAL
- en: For the user-facing display name, enter `ClaimsViewer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the supported account types, select the **Accounts in this organizational
    directory only** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the redirect URI, select **Single-page application (SPA)** as the platform
    and enter the following text for the URI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the completed **Register an application** dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.7: Register an application dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Register** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot highlights the information that we need to copy to
    the `appsettings.json` file in our project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.8: ClaimsViewer app in Azure AD'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `appsettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the **{Directory (tenant) ID}** placeholder with the value of `Directory
    (tenant) ID` from Azure AD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the **{Application (client) ID}** placeholder with the value of `Application
    (client) ID` from Azure AD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To test our application, we need to add at least one user. Also, later in this
    project, we will need to use a group to enable policy-based authentication. So,
    let’s add a user and a group.
  prefs: []
  type: TYPE_NORMAL
- en: Add a user and a group to Azure AD
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before we exit the Azure Portal, let’s create a new group and add a new user
    to that group. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to your `Azure Active Directory` tenant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Groups** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **New group** from the top menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Group type**, leave **Security** selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Group name**, enter `ViewAll`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For the **Group description**, enter `Members` `can` `view` `all` `of` `the`
    `claims`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the completed **New Group** dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.9: New Group dialog in Azure AD'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should now see the new group. If you do not see the new group, select the
    **Refresh** option from the top menu. The following screenshot highlights the
    information that we will need to complete this project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_10_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.10: Groups in Azure AD'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Copy the **Object Id** for your new group and save it for later.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will need the `Object Id` of the group when we add an authentication policy
    to our project.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Return to your `Azure Active Directory` tenant.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **App registrations** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **ClaimsViewer** application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Token configuration** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add groups claim** option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Security groups** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to your **Azure Active Directory** resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Users** from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Create new user** from the **New user** top menu as shown in the following
    screenshot:![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_11.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 10.11: Create new user in Azure AD'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter a **Username** and **Name** for the new user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter a **Password**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the **ViewAll** group.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should now see your new user. If you do not see your new user, select the
    **Refresh** option from the top menu.
  prefs: []
  type: TYPE_NORMAL
- en: You have added a new user to Azure AD that is a member of the **ViewAll** group.
    We have finished setting up Azure AD. Now we can return to Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Add the required NuGet packages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add three NuGet packages to our application. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Tools**, **NuGet Package Manager**, and **Package Manager Console**
    from the Visual Studio menu to open the **Package Manager Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have installed the ASP.NET Core authorization classes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have installed authentication and authorization classes for Blazor applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have installed the `Microsoft Authentication Library`. It is used to acquire
    security tokens from the Microsoft identity platform. The tokens can be used to
    both authenticate users and access Web APIs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `_Imports.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All the required NuGet packages have been installed. Now we need to update some
    of the project’s settings.
  prefs: []
  type: TYPE_NORMAL
- en: Enable authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to update some of the project’s files to enable authentication. We
    do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `wwwroot/index.html` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `script` element above the existing `script` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Properties/launchSettings.json` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following to `iisSettings`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Program.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code above the last line in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the application is instructed to reference the **AzureAd**
    section of the `appsetting.json` file for the parameters that are required to
    authenticate the app. The value of `LoginMode` can be either `popup` or `redirect`.
    We are using `redirect` because the popup login dialog is not modal and can easily
    get hidden behind other windows.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `App.Razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Surround the `Router` element with the following `CascadingAuthenticationState`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Replace the `RouteView` element with the following `AuthorizeRouteView` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, if the user is not authorized and they have not been
    authenticated, they are redirected to the `authentication/login` page. However,
    if they are not authorized and they have been authenticated, the error message
    is rendered.
  prefs: []
  type: TYPE_NORMAL
- en: We have enabled authentication in our application. Now we need to add an `Authentication`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: Add an Authentication component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add an `Authentication` component to handle our authentication actions.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Pages` folder and select the **Add**, **Razor Component** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `Authentication`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace all the text in the file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: By leveraging the power of the `RemoteAuthenticatorView` component, we were
    able to create an `Authentication` component with only a few lines of code. Now
    let’s add a way for the users to log in and out of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Add a LoginDisplay component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add a `LoginDisplay` component to log the users in and out of our application.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `ClaimsViewer` project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Shared`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Shared` folder and select the **Add**, **Razor Component**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `LoginDisplay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace all the text in the file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup includes an `AuthorizeView` component. If the user has
    been authenticated, the **Log out of Claims Viewer** button is rendered. If the
    user has not been authenticated, the **Log in to Claims Viewer** button is rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Both the `BeginLogin` method and the `BeginLogout` method redirect the user
    to the `Authentication` page. The `BeginLogin` method sets the action parameter
    to `login`, and the `BeginLogout` method sets the action parameter to `logout`
    and includes a value for the `ReturnUrl`. In this example, the `ReturnUrl` is
    the `Home` page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `_Imports.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `MainLayout.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Update the `main` element to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Since we have added the `LoginDisplay` component to the `MainLayout` component,
    it will appear on every page of our application.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the users can log in and log out, let’s test our application by adding
    the `Authorize` attribute to a routable component.
  prefs: []
  type: TYPE_NORMAL
- en: Add a Secure component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add the routable `Secure` component to demonstrate the `Authorize`
    attribute. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the `Pages` folder and select the **Add**, **Razor Component** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `Secure`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace all the text in the file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages`/`Index.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace the contents of the `h1` element with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Log in to Claims Viewer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter your credentials and click the **Sign in** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The first time you sign in, you will receive the following dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_12.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.12: Permissions requested dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Accept** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After you click the **Accept** button, you will receive the following dialog:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_10_13.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 10.13: Security Defaults dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Skip for now** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Do not click the **Next** button on the preceding dialog unless you want to
    use Microsoft Authenticator.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Yes** button when asked if you want to stay signed in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are now authenticated. Notice that the `LoginDisplay` has been updated to
    display the **Log out of Claims Viewer** button and the user’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Secure Page** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If you have not yet been authenticated when you click the **Secure Page** link,
    you will be forced to log in because the page includes an `Authenticate` attribute.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Log out of Claims Viewer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pick the account to sign out of.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have demonstrated the `Authorize` attribute. Now let’s use the `AuthorizeView`
    component again.
  prefs: []
  type: TYPE_NORMAL
- en: Add a WhoAmI component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create the `WhoAmI` component that will be used to display information
    about the user. We will use the `AuthorizeView` component to render different
    information based on the user’s authentication status. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the `Pages` folder and select the **Add**,**Razor Component** option
    from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new component `WhoAmI`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Replace all the text in the file with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code renders the name of the user if they have been authenticated.
    If the user has not yet been authenticated, the warning message is rendered instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, the value of `authStateTask` is cascading from the `App`
    component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Who Am I** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `AuthorizeView` component is rendering the text in the `NotAuthorized` element.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Log in to Claims Viewer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide your credentials and complete the login process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `AuthorizeView` component is rendering the user’s name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Log out of Claims Viewer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding code sets the value of `myClaims` to the list of the user’s claims.
    But how does my app get the list of claims? The claims come from the ID token
    that is sent from Azure AD. We can view the ID token by using the browser’s developer
    tools. The ID token is a **JSON Web Token** (**JWT**).
  prefs: []
  type: TYPE_NORMAL
- en: View the JSON Web Token (JWT)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will view the ID token sent from Azure AD to our web app. The ID token uses
    JWT to share security information between a server and a client. We do this as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Press *F12* to open the browser’s developer tools.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Network** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Log in to Claims Viewer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provide your credentials and complete the login process.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **token** and select the **Preview** tab, as shown in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18471_10_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 10.14: Sample Token'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the value of `id_token` to the clipboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to [https://jwt.ms/](https://jwt.ms/).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Paste the contents of the clipboard into the empty text area.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you paste the contents of your token, the decoded token is rendered. This
    is the information that will be displayed on our **WhoAmI** page. Next to the
    **Decoded Token** tab is the **Claims** tab.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on the **Claims** tab to learn more about each of the claims in the token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that we know what to expect on our **WhoAmI** page, let’s finish it.
  prefs: []
  type: TYPE_NORMAL
- en: Add an authentication policy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We want to limit access to the list of users’ claims to only users who are
    members of the `ViewAll` group in Azure AD. To do that, we will add an authentication
    policy. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Program.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code above the last line in the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Open the `Pages/Secure.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the **view-all** policy to the `Authorize` attribute as shown below:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will prevent users who do not meet all the requirements of
    the `view-all` policy from viewing the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Open the `Pages/WhoAmI.razor` page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following markup below the existing `AuthorizeView` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will prevent users who do not meet all the requirements of
    the `view-all` policy from viewing the list of claims.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Log in to Claims Viewer** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Secure Page** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**You are not authorized to see this page because the user does not meet the
    requirements of the policy**. This message is coming from the `App` component.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Who Am I?** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**You are not authorized to view your claims**. This message is coming directly
    from the `WhoAmI` component.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Program.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the `{Object ID}` placeholder with the value of the **Object ID** for
    the **ViewAll** group in Azure AD.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You saved the value of the group’s **Object ID** after you added the **ViewAll**
    group during the **Add a user and group to Azure AD** step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **Build Solution** from the **Build** menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Return to the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Since the user now meets the requirements of the policy, you are now able to
    view the list of their claims.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Secure Page** link.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Likewise, since the user now meets all of the requirements of the policy, you
    are now able to view the **Secure** page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We have created a secure application that allows authenticated users who are
    members of the `ViewAll` group to view the claims provided by the ID token from
    Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to render the list of an authenticated user’s claims
    by delegating identity management to Azure AD.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we learned the difference between authentication and authorization.
    We also learned how to work with the authentication components. Finally, we learned
    how to control the user interface by using the `Authorize` attribute and the `AuthorizeView`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project. Next, we used the Azure Portal to configure our Azure AD
    tenant to add a new application. Then we added a group to our new application
    and added a user to that group. We used the Client ID and the Tenant ID from Azure
    AD to update the `appsettings.json` file in our project. We added the required
    NuGet packages and finished configuring our application to use authentication.
    We added the `Authentication`, `LoginDisplay`, `Secure`, and `WhoAmI` components.
    Finally, we used a policy to restrict access to the list of claims.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use SQL Server to build a task manager using the
    ASP.NET Web API.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the difference between authentication and authorization?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you add a `Secure` component to the `Home` page, will the user need to be
    authenticated to render it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you secure a Blazor WebAssembly app without using the `Authorize` attribute
    on every routable component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the claims that are included in a **JSON Web Token** (**JWT**)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on the current authentication state, refer to [https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.authorization](https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.authorization).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `ClaimsPrincipal` class, refer to [https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal](https://learn.microsoft.com/en-us/dotnet/api/system.security.claims.claimsprincipal).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the Microsoft identity platform, refer to [https://learn.microsoft.com/en-us/azure/active-directory/develop](https://learn.microsoft.com/en-us/azure/active-directory/develop).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `RemoteAuthenticatorViewCore` source code in GitHub, refer to [https://github.com/dotnet/aspnetcore/blob/600eb9aa53c052ec7327e2399744215dbe493a89/src/Components/WebAssembly/WebAssembly.Authentication/src/RemoteAuthenticatorViewCore.cs](https://github.com/dotnet/aspnetcore/blob/600eb9aa53c052ec7327e2399744215dbe493a89/src/Components/WebAssembly/WebAssembly.Authentication/src/RemoteAuthenticatorViewCore.cs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To decode a **JSON Web Token** (**JWT**), refer to [https://jwt.ms](https://jwt.ms).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join our community on Discord
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Join our community’s Discord space for discussions with the author and other
    readers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/BlazorWASM2e](https://packt.link/BlazorWASM2e)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Discord_QR.png)'
  prefs: []
  type: TYPE_IMG
