["```cs\n    public class DotNet\n    {\n        public string  AvailableDatatype { get; set; }\n    }\n    ```", "```cs\n    class Program\n    {\n        // Static action event\n        static event Action<string> types;\n\n        static void Main(string[] args)\n        {\n\n        }\n    }\n    ```", "```cs\n    List<DotNet> lstTypes = new List<DotNet>();\n    DotNet blnTypes = new DotNet();\n    blnTypes.AvailableDatatype = \"bool\";\n    lstTypes.Add(blnTypes);\n\n    DotNet strTypes = new DotNet();\n    strTypes.AvailableDatatype = \"string\";\n    lstTypes.Add(strTypes);\n\n    DotNet intTypes = new DotNet();\n    intTypes.AvailableDatatype = \"int\";\n    lstTypes.Add(intTypes);\n\n    DotNet decTypes = new DotNet();\n    decTypes.AvailableDatatype = \"decimal\";\n    lstTypes.Add(decTypes);\n    ```", "```cs\n    types += x =>\n    {\n        Console.WriteLine(x);\n    };\n\n    for (int i = 0; i <= lstTypes.Count - 1; i++)\n    {\n        types(lstTypes[i].AvailableDatatype);\n    }\n\n    Console.ReadLine();\n    ```", "```cs\n    class Program\n    {\n        // Static action event\n        static event Action<string> types;\n\n        static void Main(string[] args)\n        {\n            List<DotNet> lstTypes = new List<DotNet>();\n            DotNet blnTypes = new DotNet();\n            blnTypes.AvailableDatatype = \"bool\";\n            lstTypes.Add(blnTypes);\n\n            DotNet strTypes = new DotNet();\n            strTypes.AvailableDatatype = \"string\";\n            lstTypes.Add(strTypes);\n\n            DotNet intTypes = new DotNet();\n            intTypes.AvailableDatatype = \"int\";\n            lstTypes.Add(intTypes);\n\n            DotNet decTypes = new DotNet();\n            decTypes.AvailableDatatype = \"decimal\";\n            lstTypes.Add(decTypes);\n\n            types += x =>\n            {\n                Console.WriteLine(x);\n            };\n\n            for (int i = 0; i <= lstTypes.Count - 1; i++)\n            {\n                types(lstTypes[i].AvailableDatatype);\n            }\n\n            Console.ReadLine();\n        }\n    }\n    ```", "```cs\n    class Program\n    {\n\n        static Subject<string> obsTypes = new Subject<string>();\n\n        static void Main(string[] args)\n        {\n\n        }\n    }\n    ```", "```cs\n    // IObservable\n    obsTypes.Subscribe(x =>\n    {\n        Console.WriteLine(x);\n    });\n\n    // IObserver\n    for (int i = 0; i <= lstTypes.Count - 1; i++)\n    {\n        obsTypes.OnNext(lstTypes[i].AvailableDatatype);\n    }\n\n    Console.ReadLine();\n    ```", "```cs\n    class Program\n    {\n\n        static Subject<string> obsTypes = new Subject<string>();\n\n        static void Main(string[] args)\n        {\n            List<DotNet> lstTypes = new List<DotNet>();\n            DotNet blnTypes = new DotNet();\n            blnTypes.AvailableDatatype = \"bool\";\n            lstTypes.Add(blnTypes);\n\n            DotNet strTypes = new DotNet();\n            strTypes.AvailableDatatype = \"string\";\n            lstTypes.Add(strTypes);\n\n            DotNet intTypes = new DotNet();\n            intTypes.AvailableDatatype = \"int\";\n            lstTypes.Add(intTypes);\n\n            DotNet decTypes = new DotNet();\n            decTypes.AvailableDatatype = \"decimal\";\n            lstTypes.Add(decTypes);\n\n            // IObservable\n            obsTypes.Subscribe(x =>\n            {\n                Console.WriteLine(x);\n            });\n\n            // IObserver\n            for (int i = 0; i <= lstTypes.Count - 1; i++)\n            {\n                obsTypes.OnNext(lstTypes[i].AvailableDatatype);\n            }\n\n            Console.ReadLine();\n        }\n    }\n    ```", "```cs\n    private void Form1_Load(object sender, EventArgs e)\n    {\n        var searchTerm = Observable.FromEventPattern<EventArgs>(textBox1, \"TextChanged\")\n        .Select(x => ((TextBox)x.Sender).Text);\n\n        searchTerm.Subscribe(trm => label1.Text = trm);\n    }\n    ```", "```cs\n    private void Form1_Load(object sender, EventArgs e)\n    {\n        var searchTerm = Observable.FromEventPattern<EventArgs>(textBox1, \"TextChanged\")\n        .Select(x => ((TextBox)x.Sender).Text) \n        .Where(text => text.EndsWith(\".\"));\n\n        searchTerm.Subscribe(trm => label1.Text = trm);\n    }\n    ```", "```cs\n    private void Form1_Load(object sender, EventArgs e)\n    {\n        var searchTerm = Observable.FromEventPattern<EventArgs>(textBox1, \"TextChanged\")\n        .Select(x => ((TextBox)x.Sender).Text) \n        .Throttle(TimeSpan.FromMilliseconds(5000));\n\n        searchTerm.Subscribe(trm => label1.Text = trm);\n    }\n    ```", "```cs\n    searchTerm.ObserveOn(new ControlScheduler(this)).Subscribe(trm => label1.Text = trm);\n    ```", "```cs\n    public class CSharpSix\n    {\n        public string FavoriteFeature { get; set; }\n    }\n    ```", "```cs\n    List<CSharpSix> FavCSharpFeatures = new List<CSharpSix>();\n    CSharpSix feature1 = new CSharpSix();\n    feature1.FavoriteFeature = \"String Interpolation\";\n    FavCSharpFeatures.Add(feature1);\n\n    CSharpSix feature2 = new CSharpSix();\n    feature2.FavoriteFeature = \"Exception Filters\";\n    FavCSharpFeatures.Add(feature2);\n\n    CSharpSix feature3 = new CSharpSix();\n    feature3.FavoriteFeature = \"Nameof Expressions\";\n    FavCSharpFeatures.Add(feature3);\n    ```", "```cs\n    var filteredFeature = FavCSharpFeatures.Where(feature => feature.FavoriteFeature.StartsWith(\"Ex\"));\n    ```"]