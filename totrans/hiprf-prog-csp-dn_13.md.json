["```cs\n    [MemoryDiagnoser]\n    [Orderer(SummaryOrderPolicy.Declared)]\n    [RankColumn]\n    public class BenchmarkTests\n    {\n        [GlobalSetup]\n        public void GlobalSetup()\n        {\n            InsertProductADNSP();\n            InsertProductEFSP();\n            InsertProductDDN();\n    }\n    }\n    ```", "```cs\n    [Benchmark]\n    public void InsertProductADN()\n    {\n        string connectionString = SecretsManager\n             .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n         AdoDotNetData adnData = new(connectionString);\n        adnData.ExecuteNonQuery(\"INSERT INTO Products \n          (ProductName, CategoryID, SupplierId, \n             Discontinued) VALUES('ADO.NET Product', 1, 1, \n               0)\");\n        adnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void InsertProductADNSP()\n    {\n        string connectionString = SecretsManager\n             .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n         AdoDotNetData aaa = new(connectionString);\n        SqlCommandModel model = new()\n        {\n            CommandText = \"InsertProduct\",\n            CommandType = CommandType.StoredProcedure,\n             CommandParameters = \n             new SqlCommandParameterModel[] {\n             new SqlCommandParameterModel() {   \n                 ParameterName = \"@ProductName\", \n                     DataType = DbType.String,\n                     Value = \"Dapper Product Edited\"\n                 }, \n                 new SqlCommandParameterModel() {   \n                     ParameterName = \"@CategoryID\",\n                     DataType = DbType.Int32,\n                     Value = 1 \n                 }\n                 , new SqlCommandParameterModel() { \n                     ParameterName = \"@SupplierID\",\n                     DataType = DbType.Int32,\n                     Value = 1\n                 }, new SqlCommandParameterModel() { \n                     ParameterName = \"@Discontinued\",   \n                     DataType = DbType.Boolean,\n                     Value = false\n                 }\n             }\n         };\n         aaa.ExecuteNonQuery(model);\n        aaa.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void InsertProductEF()\n    {\n    string connectionString = SecretsManager\n         .GetSecrets<DatabaseSettings>\n         (\"ConnectionString\");\n    EntityFrameworkCoreData efData \n         = new(connectionString);\n        Product product = new() { \n             ProductName = \"EF Product\", \n             CategoryID = 1, \n             SupplierID = 1,\n             Discontinued = false,\n               QuantityPerUnit = \"1\"\n         };\n        efData.Products.Add(product);\n        efData.SaveChanges();\n        efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void InsertProductEFSP()\n    {\n        string connectionString = SecretsManager.\n             GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n         EntityFrameworkCoreData efData \n             = new(connectionString);\n         SqlCommandModel model = new()\n         {\n             CommandText = \"EXEC InsertProduct \n               @ProductName = {0}, @CategoryID = {1},\n                  @SupplierID = {2}, @Discontinued = {3}\",\n             CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                 = new SqlCommandParameterModel[] {\n                     new SqlCommandParameterModel() { \n                     ParameterName = \"@ProductName\", \n                     DataType = DbType.String, \n                      Value = \"EF Product Edited\"\n                     }\n                    , new SqlCommandParameterModel() { \n                     ParameterName = \"@CategoryID\", \n                     DataType = DbType.Int32, \n                     Value = 1 \n                     }\n                    , new SqlCommandParameterModel() { \n                     ParameterName = \"@SupplierID\", \n                     DataType = DbType.Int32, \n                     Value = 1 \n                     }\n                     , new SqlCommandParameterModel() { \n                     ParameterName = \"@Discontinued\", \n                     DataType = DbType.Boolean, \n                     Value = false \n                     }\n                 }\n            };\n         efData.ExecuteNonQuerySP(model);\n         efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void InsertProductDDN()\n    {\n        string connectionString = SecretsManager\n             .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n         DapperDotNet ddnData = new(connectionString);\n        int recordsAffected = ddnData\n             .ExecuteNonQuery(\"INSERT INTO Products \n                (ProductName, CategoryID, SupplierId,\n                   Discontinued) VALUES('Dapper.NET \n                     Product', 1, 1, 0)\");\n         ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void InsertProductDDNSP()\n    {\n         string connectionString = SecretsManager\n             .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n         DapperDotNet ddnData = new(connectionString);\n         SqlCommandModel model = new() {\n             CommandText = \"InsertProduct\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                 = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                     ParameterName = \"@ProductName\", \n                     DataType = DbType.String, \n                     Value = \"Dapper Product\" }\n                    , new SqlCommandParameterModel() {\n                     ParameterName = \"@CategoryID\", \n                     DataType = DbType.Int32, \n                     Value = 1 }\n                     , new SqlCommandParameterModel() { \n                     ParameterName = \"@SupplierID\", \n                     DataType = DbType.Int32, \n                     Value = 1 }\n                     , new SqlCommandParameterModel() { \n                     ParameterName = \"@Discontinued\", \n                     DataType = DbType.Boolean, \n                     Value = false }\n                 }\n         };\n         ddnData.ExecuteNonQuery(model);\n         ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadScalarProductADN()\n    {\n         string connectionString = SecretsManager\n             .GetSecrets<DatabaseSettings>\n                  (\"ConnectionString\");\n         AdoDotNetData adnData = new(connectionString);\n         string productName = adnData\n             .ExecuteScalar<string>(\"SELECT TOP 1 \n                ProductName FROM Products  WHERE Product\n                  Name LIKE 'ADO.NET Product%'\");\n        adnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadScalarProductADNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        AdoDotNetData aaa = new(connectionString);\n        SqlCommandModel model = new SqlCommandModel() {\n            CommandText = \"GetProductName\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@ProductName\", \n                    DataType = DbType.String, \n                    Value = \"ADO.NET Product\" }\n                }\n        };\n        string productName \n            = aaa.ExecuteScalar<string>(model);\n        aaa.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadFilteredProductADN()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n        AdoDotNetData adnData = new(connectionString);\n        IEnumerator<Product> data \n            = adnData.ExecuteReader<Product>(\"SELECT * \n                 FROM Products  WHERE ProductName LIKE \n                     'ADO.NET Product'\");\n        adnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadFilteredProductADNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        AdoDotNetData aaa = new(connectionString);\n        SqlCommandModel model = new SqlCommandModel() {\n            CommandText = \"FilterProducts\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@ProductName\", \n                    DataType = DbType.String, \n                    Value = \"ADO.NET Product\" }\n                }\n         };\n        var data = aaa.ExecuteReader<dynamic>(model);\n        aaa.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadScalarProductEF()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n            = new(connectionString);\n        string productName \n            = efData.Products.FirstOrDefault(\n                p => p.ProductName\n                .Contains(\"EF Product\")\n              ).ProductName;\n        efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadScalarProductEFSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n            = new(connectionString);\n        string productName = efData\n            .ExecuteScalarSP(\"EF Product\");\n         efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadFilteredProductsEF()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n            = new(connectionString);\n        IEnumerator<Product> products = efData.Products\n            .Where(p => p.ProductName\n            .Contains(\"EF Product\")).GetEnumerator();\n        efData.Dispose();\n            products.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadFilteredProductsEFSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n            = new(connectionString);\n        IEnumerator<Product> products = efData\n            .ExecuteReaderSP(\"EF Product\");\n        efData.Dispose();\n            products.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadScalarProductDDN()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        string productName = ddnData\n            .ExecuteScalar<string>(\"SELECT TOP 1 \n                 ProductName FROM Products  WHERE Product\n                     Name LIKE 'Dapper.NET Product%'\");\n        ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadScalarProductDDNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        SqlCommandModel model = new() {\n            CommandText = \"GetProductName\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@ProductName\", \n                    DataType = DbType.String, \n                    Value = \"Dapper Product\" }\n                 }\n        };\n        string productName \n             = ddnData.ExecuteScalarSP(model);\n         ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadFilteredProductsDDN()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        IEnumerator<Product> data \n            = ddnData.ExecuteReader<Product>(\"SELECT * \n            FROM Products WHERE ProductName LIKE\n                'Dapper.NET Product%'\");\n         ddnData.Dispose();\n         data.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void ReadFilteredProductsDDNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        SqlCommandModel model = new() {\n            CommandText = \"GetProductName\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@ProductName\", \n                    DataType = DbType.String, \n                    Value = \"Dapper.NET Product\" }\n                }\n        };\n        IEnumerator<Product> products \n            = ddnData.ExecuteReaderSP<Product>(model);\n        ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void UpdateProductADN()\n    {\n         string connectionString = SecretsManager\n             .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n         AdoDotNetData adnData = new(connectionString);\n        int recordsAffected \n             = adnData.ExecuteNonQuery(\"UPDATE Products \n                 SET ProductName = 'ADO.NET Product - \n                     Edited' WHERE ProductName = \n                         'ADO.NET Product'\");\n         adnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void UpdateProductADNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        AdoDotNetData aaa = new(connectionString);\n        SqlCommandModel model = new() {\n            CommandText = \"UpdateProductName\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@OldProductName\",\n                    DataType = DbType.String, \n                    Value = \"ADO.NET Product\" }\n                    , new SqlCommandParameterModel() { \n                    ParameterName = \"@NewProductName\", \n                    DataType = DbType.String, \n                    Value = \"ADO.NET Product - Edited\"}\n                    }\n         };\n         aaa.ExecuteNonQuery(model);\n        aaa.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void UpdateProductEF()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n        = new EntityFrameworkCoreData(connectionString);\n        IQueryable<Product> products = efData.Products\n        .Where(p => p.ProductName.Contains(\"EF \n            Product\"));\n        foreach (Product product in products)\n            product.ProductName = \"EF Product Edited\";\n        efData.Products.UpdateRange(products);\n         int recordsAffected = efData.SaveChanges();\n        efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void UpdateProductEFSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                 (\"ConnectionString\");\n        EntityFrameworkCoreData efData = \n            new(connectionString);\n        SqlCommandModel model = new() {\n            CommandText = \"EXEC UpdateProductName \n                 @OldProductName = {0}, @NewProductName = \n                     {1}\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@OldProductName\",\n                    DataType = DbType.String, \n                    Value = \"EF Product\" }\n                    , new SqlCommandParameterModel() {  \n                    ParameterName = \"@NewProductName\", \n                    DataType = DbType.String, \n                    Value = \"EF Product - Edited\" }\n                    }\n         };\n        efData.ExecuteNonQuerySP(model);\n        efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void UpdateProductDDN()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        int recordsAffected \n            = ddnData.ExecuteNonQuery(\"UPDATE Products \n               SET ProductName = 'Dapper.NET Product - \n                 Edited' WHERE ProductName = 'Dapper.NET \n                   Product'\");\n        ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void UpdateProductDDNSP()\n    {\n    string connectionString = SecretsManager\n        .GetSecrets<DatabaseSettings>(\"ConnectionString\");\n    DapperDotNet ddnData = new(connectionString);\n    SqlCommandModel model = new()\n    {\n         CommandText = \"UpdateProductName\",\n         CommandType = CommandType.StoredProcedure,\n        CommandParameters = new SqlCommand\n            ParameterModel[]{\n            new SqlCommandParameterModel() { \n                ParameterName = \"@OldProductName\", \n                DataType = DbType.String,\n                Value = \"Dapper.NET Product - Edited\" }\n            , new SqlCommandParameterModel() { \n                  ParameterName = \"@NewProductName\",\n                DataType = DbType.String,\n                Value = \"Dapper.NET Product\" }\n        }\n    };\n    ddnData.ExecuteNonQuery(model);\n    ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void DeleteProductADN()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        AdoDotNetData adnData = new(connectionString);\n        int recordsAffected \n            = adnData.ExecuteNonQuery(\"DELETE FROM \n               Products WHERE ProductName LIKE 'ADO.NET \n                 Product%'\");\n        adnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void DeleteProductADNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        AdoDotNetData aaa = new(connectionString);\n        SqlCommandModel model = new()\n        {\n            CommandText = \"DeleteProduct\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@ProductName\", \n                    DataType = DbType.String, \n                    Value = \"ADO.NET Product - Edited\"}\n                }\n        };\n        aaa.ExecuteNonQuery(model);\n        aaa.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void DeleteProductEF()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n        = new EntityFrameworkCoreData(connectionString);\n        IQueryable<Product> products = efData.Products\n        .Where(p => p.ProductName.Contains(\"EF Product\"));\n        efData.Products.RemoveRange(products);\n        int recordsAffected = efData.SaveChanges();\n        efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void DeleteProductEFSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        EntityFrameworkCoreData efData \n            = new(connectionString);\n        SqlCommandModel model = new() {\n            CommandText = \"EXEC DeleteProduct @ProductName \n                = {0}\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@NewProductName\", \n                    DataType = DbType.String, \n                    Value = \"EF Product - Edited\" }\n                    }\n        };\n        efData.ExecuteNonQuerySP(model);\n        efData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void DeleteProductDDN()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        int recordsAffected \n            = ddnData.ExecuteNonQuery(\"DELETE FROM \n                 Products WHERE ProductName LIKE\n                    'Dapper.NET Product%'\");\n        ddnData.Dispose();\n    }\n    ```", "```cs\n    [Benchmark]\n    public void DeleteProductDDNSP()\n    {\n        string connectionString = SecretsManager\n            .GetSecrets<DatabaseSettings>\n                (\"ConnectionString\");\n        DapperDotNet ddnData = new(connectionString);\n        SqlCommandModel model = new() {\n            CommandText = \"DeleteProduct\",\n            CommandType = CommandType.StoredProcedure,\n            CommandParameters \n                = new SqlCommandParameterModel[] {\n                    new SqlCommandParameterModel() { \n                    ParameterName = \"@ProductName\", \n                    DataType = DbType.String, \n                   Value = \"Dapper.NET Product - Edited\" }\n                }\n        };\n        ddnData.ExecuteNonQuery(model);\n        ddnData.Dispose();\n    }\n    ```", "```cs\nusing BenchmarkDotNet.Running;\n```", "```cs\nclass Program\n```", "```cs\n{\n```", "```cs\nstatic void Main(string[] args)\n```", "```cs\n    {\n```", "```cs\n        BenchmarkRunner.Run<BenchmarkTests>();\n```", "```cs\n}\n```", "```cs\n}\n```"]