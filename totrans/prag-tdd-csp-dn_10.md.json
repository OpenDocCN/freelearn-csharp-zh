["```cs\n\"ConnectionStrings\": {\n  \"AppointmentBooking\": \"[The primary connection string]\"\n},\n```", "```cs\n    md UqsAppointmentBooking\n    cd UqsAppointmentBooking\n    dotnet new sln\n    ```", "```cs\n    dotnet new blazorwasm -n \n      Uqs.AppointmentBooking.Website\n    dotnet new webapi -n Uqs.AppointmentBooking.WebApi\n    dotnet new classlib -n Uqs.AppointmentBooking.Contract\n    dotnet new classlib -n Uqs.AppointmentBooking.Domain\n    dotnet new xunit -n\n      Uqs.AppointmentBooking.Domain.Tests.Unit\n    ```", "```cs\n    dotnet sln add Uqs.AppointmentBooking.Website\n    dotnet sln add Uqs.AppointmentBooking.WebApi\n    dotnet sln add Uqs.AppointmentBooking.Contract\n    dotnet sln add Uqs.AppointmentBooking.Domain\n    dotnet sln add Uqs.AppointmentBooking.Domain\n      .Tests.Unit\n    ```", "```cs\n    dotnet add Uqs.AppointmentBooking.Website reference\n      Uqs.AppointmentBooking.Contract\n    dotnet add Uqs.AppointmentBooking.WebApi reference\n      Uqs.AppointmentBooking.Contract\n    dotnet add Uqs.AppointmentBooking.Domain reference\n      Uqs.AppointmentBooking.Contract\n    dotnet add Uqs.AppointmentBooking.WebApi reference\n      Uqs.AppointmentBooking.Domain\n    dotnet add Uqs.AppointmentBooking.Domain.Tests.Unit \n      reference Uqs.AppointmentBooking.Domain\n    ```", "```cs\ndotnet add Uqs.AppointmentBooking.Domain package \n  Microsoft.Azure.Cosmos\n```", "```cs\n    dotnet add Uqs.AppointmentBooking.Domain.Tests.Unit \n      package NSubstitute\n    ```", "```cs\nnamespace Uqs.AppointmentBooking.Domain.DomainObjects;\npublic class Customer : IEntity\n{\n    public string? Id { get; set; }\n    public string? FirstName { get; set; }\n    public string? LastName { get; set; }\n}\n```", "```cs\npublic interface IEntity\n{\n    public string? Id { get; set; }\n}\n```", "```cs\npublic async Task<Service?> GetActiveService(string id)\n{\n  var queryDefinition = new QueryDefinition(\n  \"SELECT * FROM c WHERE c.id = @id AND c.isActive = true\")\n            .WithParameter(\"@id\", id);\n  return (await GetItemsAsync(queryDefinition))\n   .SingleOrDefault();\n}\n```", "```cs\nusing Microsoft.Azure.Cosmos;\nusing Microsoft.Extensions.Options;\nusing System.Net;\nnamespace Uqs.AppointmentBooking.Domain.Repository;\npublic abstract class CosmosRepository<T> : \n    ICosmosRepository<T> where T : IEntity\n{\n    protected CosmosClient CosmosClient { get; }\n    protected Database Database { get; }\n    protected Container Container { get; }\n    public CosmosRepository(string containerId,\n    CosmosClient cosmosClient,\n    IOptions<ApplicationSettings> settings)\n    {\n        CosmosClient = cosmosClient;\n        Database = cosmosClient.GetDatabase(\n            settings.Value.DatabaseId);\n        Container = Database.GetContainer(containerId);\n    }\n    public Task AddItemAsync(T item)\n    {\n        return Container.CreateItemAsync(item, \n            new PartitionKey(item.Id));\n    }\n…\n```", "```cs\nGET https://webapidomain/services\n```", "```cs\n{    \n    \"ServiceId\": \"e4c9d508-89d7-49cd-86c2-835cde94472a\",\n    \"Name\": \"Men - Clipper & Scissor Cut\",\n    \"Duration\": 30,\n    \"Price\": 23.0\n}\n```", "```cs\nnamespace Uqs.AppointmentBooking.Contract;\npublic record Service(string ServiceId, string Name, \n    int Duration, float Price);\n```", "```cs\nnamespace Uqs.AppointmentBooking.Contract;\n  public record AvailableServices(Service[] Services);\n```", "```cs\npublic class ServicesService\n{\n}\n```", "```cs\npublic class ServicesServiceTests\n{\n    private readonly IServiceRepository _serviceRepository\n        = Substitute.For<IServiceRepository>();\n    private ServicesService? _sut;\n}\n```", "```cs\n[Fact]\npublic async Task\n  GetActiveServices_NoServiceInTheSystem_NoServices()\n{\n    // Arrange\n    _sut = new ServicesService(_serviceRepository);\n    // Act\n    var actual = await _sut.GetActiveServices();\n    // Assert\n    Assert.True(!actual.Any());\n}\n```", "```cs\npublic class ServicesService\n{\n    private readonly IServiceRepository _serviceRepository;\n    public ServicesService(\n        IServiceRepository serviceRepository)\n    {\n        _serviceRepository = serviceRepository;\n    }\n    public async Task<IEnumerable<Service>> \n        GetActiveServices() => \n        await _serviceRepository.GetActiveServices();\n}\n```", "```cs\n[Fact]\npublic async Task \n  GetActiveServices_TwoActiveServices_TwoServices()\n{\n    // Arrange\n    _serviceRepository.GetActiveServices()\n        .Returns(new Service[] {\n            new Service{IsActive = true},\n            new Service{IsActive = true},\n        });\n    _sut = new ServicesService(_serviceRepository);\n    var expected = 2;\n    // Act\n    var actual = await _sut.GetActiveServices();\n    // Assert\n    Assert.Equal(expected, actual.Count());\n}\n```", "```cs\n[Fact]\npublic async Task \n  GetAvailableSlotsForEmployee_ServiceIdNoFound_\n    ArgumentException()\n{\n    // Arrange\n    // Act\n    var exception = await \n        Assert.ThrowsAsync<ArgumentException>(() =>\n        _sut.GetAvailableSlotsForEmployee(\"AServiceId\"));\n    // Assert\n    Assert.IsType<ArgumentException>(exception);\n}\n```", "```cs\npublic async Task<Slots> GetAvailableSlotsForEmployee(\n    string serviceId)\n{\n    var service = await \n        _serviceRepository.GetItemAsync(serviceId);\n    if (service is null)\n    {\n        throw new ArgumentException(\"Record not found\", \n        nameof(serviceId));\n    }\n    return null;\n}\n```", "```cs\n[Fact]\npublic async Task GetAvailableSlotsForEmployee_\n  NoShiftsForTomAndNoAppointmentsInSystem_NoSlots()\n{\n    // Arrange\n    var appointmentFrom = new DateTime(\n      2022, 10, 3, 7, 0, 0);\n    _nowService.Now.Returns(appointmentFrom);\n    var tom = new Employee { Id = \"Tom\", Name = \n      \"Thomas Fringe\", Shifts = Array.Empty<Shift>() };\n    var mensCut30Min = new Service { Id = \"MensCut30Min\",\n      AppointmentTimeSpanInMin = 30 };\n    _serviceRepository.GetItemAsync(Arg.Any<string>())\n        .Returns(Task.FromResult((Service?)mensCut30Min));\n    _employeeRepository.GetItemAsync(Arg.Any<string>())\n        .Returns(Task.FromResult((Employee?)tom));\n    // Act\n    var slots = await    \n      _sut.GetAvailableSlotsForEmployee(mensCut30Min.Id, \n      tom.Id);\n    // Assert\n    var times = slots.DaysSlots.SelectMany(x => x.Times);\n    Assert.Empty(times);\n}\n```", "```cs\n…\nif (!employee.Shifts.Any())\n{\n    return new Slots(Array.Empty<DaySlots>());\n}\nreturn null;\n```", "```cs\n[Theory]\n[InlineData(5, 0)]\n[InlineData(25, 0)]\n[InlineData(30, 1, \"2022-10-03 09:00:00\")]\n[InlineData(35, 2, \"2022-10-03 09:00:00\", \n  \"2022-10-03 09:05:00\")]\npublic async Task GetAvailableSlotsForEmployee_\n  OneShiftAndNoExistingAppointments_VaryingSlots(  \n    int serviceDuration, int totalSlots, \n      params string[] expectedTimes)\n{\n…\n```", "```cs\npublic async Task GetAvailableSlotsForEmployee_\n  OneShiftWithVaryingAppointments_VaryingSlots(\n    string appointmentStartStr, string appointmentEndStr, \n      int totalSlots, params string[] expectedTimes)\n{\n…\n```"]