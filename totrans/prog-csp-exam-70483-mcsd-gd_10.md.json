["```cs\n[Serializable]\npublic class AttributeTest\n{\n//object of this class can now be serialized\n}\n```", "```cs\nnamespace Chapter10.Test\n{\n    [TestClass]\n    public class UnitTest1\n    {\n        [TestMethod]\n        public void TestMethod1()\n        {\n        }\n    }\n}\n```", "```cs\nusing System.Reflection;\nusing System.Runtime.CompilerServices;\nusing System.Runtime.InteropServices;\n\n[assembly: AssemblyTitle(\"Chapter10\")]\n[assembly: AssemblyDescription(\"\")]\n[assembly: AssemblyConfiguration(\"\")]\n[assembly: AssemblyCompany(\"\")]\n[assembly: AssemblyProduct(\"Chapter10\")]\n[assembly: AssemblyCopyright(\"Copyright Â© 2019\")]\n[assembly: AssemblyTrademark(\"\")]\n[assembly: AssemblyCulture(\"\")]\n\n[assembly: ComVisible(false)]\n\n// The following GUID is for the ID of the typelib if this project is exposed to COM\n[assembly: Guid(\"f8a2951a-4520-4d0f-ab30-7dd609db84d5\")]\n\n[assembly: AssemblyVersion(\"1.0.0.0\")]\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\n```", "```cs\n[System.Obsolete(Firstclass is not used any more instead use SecondClass)]\nclass FirstClass\n{\n    //Do Firstthing\n}\n\nclass SecondClass\n{\n    //Do Secondthing\n}\n```", "```cs\nusing System; \nusing System.Diagnostics;\nPublic class Logging\n{\n    [Conditional(LogErrorON)]\n    public static void LogMessage(string message)\n    {\n        Console.WriteLine(message)\n    }\n}\npublic class TestLogging\n{     \n    static void Main()     \n    {         \n        Trace.Msg(\"Main method executing...\");         \n        Console.WriteLine(\"This is the last statement.\");     \n    } \n} \n\n```", "```cs\n[AttributeUsage(AttributeTargets.All, Inherited = false, AllowMultiple = true)]\n```", "```cs\nusing System;\n\nnamespace Chapter10\n{\n    [System.AttributeUsage(System.AttributeTargets.Field | System.AttributeTargets.Property, Inherited =false,AllowMultiple = false)]\n    public class CustomerAttribute : Attribute\n    {\n        public CustomerType Type { get; set; }\n\n        public CustomerAttribute()\n        {\n            Type = CustomerType.Customer;\n        }\n    }\n\n    public enum CustomerType\n    {\n        Customer,\n        Supplier,\n        Vendor\n    }\n}\n```", "```cs\nnamespace Chapter10\n{\n\n    internal class Account\n    {\n        public string CustomerName { get; set; }\n\n        [Customer]\n        public RatingType Rating { get; set; }\n    }\n\n    public enum RatingType\n    {\n        Gold =1,\n        Silver =2,\n        Bronze=3\n    }\n}\n```", "```cs\n[System.AttributeUsage(System.AttributeTargets.Class, Inherited =false,AllowMultiple = false)]\n    public class ChapterInfoAttribute : Attribute\n    {\n        public string ChapterName{ get; set; }\n        public string ChapterAuthor { get; set; }\n\n        public ChapterInfoAttribute(string Name, string Author)\n        {\n            ChapterName = Name;\n            ChapterAuthor = Author;\n        }\n    }\n```", "```cs\nnamespace Chapter10\n{\n    [ChapterInfo(\"SAMPLECHAPTER\", \"AUTHOR1\")]\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            ChapterInfoAttribute _attribute = (ChapterInfoAttribute)Attribute.GetCustomAttribute(typeof(Program), typeof(ChapterInfoAttribute));\n            Console.WriteLine($\"Chapter Name is: {_attribute.ChapterName} and Chapter Author is: {_attribute.ChapterAuthor}\");\n            // Keep the console window open in debug mode.\n            System.Console.WriteLine(\"Press any key to exit.\");\n            System.Console.ReadKey();\n        }\n    }\n}\n```", "```cs\n//Output\nChapter Name is: SAMPLECHAPTER and Chapter Author is: AUTHOR1\nPress any key to exit.\n```", "```cs\ninternal class CustomClass1\n    {\n        public int Number1 { get; set; }\n        public int Number2 { get; set; }\n\n        public int Getresult(string action)\n        {\n            int result = 0;\n            switch (action)\n            {\n                case \"Add\":\n                    result = Number1 + Number2;\n                    Console.WriteLine($\"Sum of numbers {Number1} and {Number2} is : {result}\");\n                    break;\n\n                case \"Subtract\":\n                    result = Number1 - Number2;\n                    Console.WriteLine($\"Difference of numbers {Number1} and {Number2} is : {result}\");\n                    break;\n            }\n            return result;\n        }\n    }\n```", "```cs\npublic static void GetResults()\n        {\n            Type objType = typeof(CustomClass1);\n            object obj = Activator.CreateInstance(objType);\n            foreach (PropertyInfo prop in objType.GetProperties())\n            {\n                if(prop.Name ==\"Number1\")\n                    prop.SetValue(obj, 100);\n                if (prop.Name == \"Number2\")\n                    prop.SetValue(obj, 50);\n            }\n\n            MethodInfo mInfo = objType.GetMethod(\"Getresult\");\n            mInfo.Invoke(obj, new string[] { \"Add\" });\n            mInfo.Invoke(obj, new string[] { \"Subtract\" });\n        }\n```", "```cs\nSum of numbers 100 and 50 is : 150\nDifference of numbers 100 and 50 is : 50\nPress any key to exit.\n```"]