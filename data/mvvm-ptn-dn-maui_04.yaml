- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Data Binding in .NET MAUI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .NET MAUI 中的数据绑定
- en: In the previous chapter, we introduced the fundamentals of data binding in .NET
    MAUI. Data binding is not only a core feature of .NET MAUI but also a crucial
    component for effectively building applications using the MVVM design pattern.
    It creates a robust link between your View and ViewModel, facilitating efficient
    communication and synchronization between the two.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们介绍了 .NET MAUI 数据绑定的基础知识。数据绑定不仅是 .NET MAUI 的核心功能，也是使用 MVVM 设计模式有效构建应用程序的关键组件。它创建了一个强大的链接，将您的
    View 和 ViewModel 之间连接起来，促进了两者之间高效通信和同步。
- en: As we delve deeper into the realm of data binding, it’s essential to grasp some
    advanced techniques and features. These are the building blocks that empower you
    to create dynamic user interfaces as efficiently as possible. They allow us to
    design user interfaces that are not only more interactive but also easier to manage
    and maintain.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们深入数据绑定的领域，掌握一些高级技术和功能是至关重要的。这些是您能够尽可能高效地创建动态用户界面的基石。它们使我们能够设计出不仅更互动，而且更容易管理和维护的用户界面。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: ValueConverters and `StringFormat`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ValueConverters 和 `StringFormat`
- en: Fallbacks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回退
- en: Element and relative binding
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素和相对绑定
- en: Multi-bindings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多绑定
- en: Compiled bindings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译绑定
- en: By the end of this chapter, combined with what we’ve covered in the previous
    one, you will have a well-rounded and thorough understanding of data binding in
    .NET MAUI. This knowledge will enable you to effectively apply these techniques
    in your applications. Let’s get started!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，结合上一章的内容，您将全面深入地理解 .NET MAUI 的数据绑定。这些知识将使您能够有效地将这些技术应用到您的应用程序中。让我们开始吧！
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Throughout this chapter, we will be adding functionality to the *Recipes!* app.
    All the required assets needed to follow along, including all the code used in
    this chapter, can be found on GitHub at [https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter04](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter04).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向 *Recipes!* 应用程序添加功能。所有必要的资产，包括本章中使用的所有代码，都可以在 GitHub 上找到，网址为 [https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter04](https://github.com/PacktPublishing/MVVM-pattern-.NET-MAUI/tree/main/Chapter04)。
- en: ValueConverters and StringFormat
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ValueConverters 和 StringFormat
- en: In many cases, the data in your ViewModel doesn’t perfectly match the format
    expected by the UI. For example, you may have a `DateTime` object in your ViewModel
    that you want to display in a specific string format in your View, or an enumeration
    that should be represented as a more user-friendly string.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，ViewModel 中的数据并不完全符合 UI 预期的格式。例如，您可能有一个 `DateTime` 对象在 ViewModel 中，您希望在
    View 中以特定的字符串格式显示，或者一个枚举应该表示为更友好的字符串。
- en: This is where **ValueConverters** and **StringFormat** come into play. Both
    of these techniques act as intermediaries, transforming and adapting your ViewModel
    data into a format suitable for display or interaction in the UI.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 **ValueConverters** 和 **StringFormat** 发挥作用的地方。这两种技术都充当中间人，将 ViewModel 数据转换成适合在
    UI 中显示或交互的格式。
- en: In this section, we’ll delve into how to create and use ValueConverters to effectively
    manage these data transformations, and how formatting can further refine the presentation
    of your data, ensuring it is meaningful and user-friendly.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '在本节中，我们将深入探讨如何创建和使用 ValueConverters 来有效地管理这些数据转换，以及格式化如何进一步细化数据的展示，确保其具有意义且用户友好。 '
- en: Creating and using ValueConverters
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和使用 ValueConverters
- en: 'A ValueConverter acts as an intermediary between the source (typically the
    ViewModel) and the target (the View). It provides a way to transform or convert
    data as it passes from source to target or vice versa (*Figure 4**.1*):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: ValueConverter 在源（通常是 ViewModel）和目标（View）之间充当中间人。它提供了一种在数据从源到目标或反之亦然传递时转换或转换数据的方法（*图
    4**.1*）：
- en: '![Figure 4.1: Usage of a converter](img/B20941_04_01.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.1：转换器的使用](img/B20941_04_01.jpg)'
- en: 'Figure 4.1: Usage of a converter'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.1：转换器的使用
- en: A common scenario might involve a ViewModel property that is a certain type,
    such as an enumeration or a complex object, which needs to be displayed differently
    in the UI. A ValueConverter can convert data from one type to another that is
    compatible and appropriate for the UI. Similarly, user input received in the UI
    may need to be converted back into a different format before being stored in the
    ViewModel.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一个常见的场景可能涉及ViewModel属性，它是一种特定类型，例如枚举或复杂对象，需要在UI中以不同的方式显示。ValueConverter可以将数据从一种类型转换为与UI兼容和适当的另一种类型。同样，在UI中接收到的用户输入可能需要在存储到ViewModel之前转换成不同的格式。
- en: 'ValueConverters are classes that implement the `Microsoft.Maui.Controls.IValueConverter`
    interface, which defines two methods – `Convert` and `ConvertBack`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: ValueConverter是实现了`Microsoft.Maui.Controls.IValueConverter`接口的类，该接口定义了两个方法——`Convert`和`ConvertBack`：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `Convert` method is responsible for transforming a value from the binding
    source to the binding target. It takes the original value, the target type, an
    optional parameter, and culture information as parameters. This method performs
    a conversion and returns an object that represents the transformed data. The transformed
    data is then used to update the property on the View. It is important to ensure
    that the returned object matches the expected type of the binding target property
    or a compatible type.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`Convert`方法负责将绑定源中的值转换为绑定目标。它接受原始值、目标类型、可选参数和文化信息作为参数。此方法执行转换并返回一个表示转换后数据的对象。然后使用转换后的数据来更新视图上的属性。确保返回的对象与绑定目标属性的预期类型或兼容类型相匹配非常重要。'
- en: 'Let’s take a look at the method’s parameters:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看方法的参数：
- en: '`value`: This is the source data that needs to be converted. This is usually
    data from your ViewModel that you want to display in your View. Because this can
    be anything, it is provided as `object`.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：这是需要转换的源数据。这通常是您希望在视图中显示的ViewModel中的数据。因为这可能是一切，所以它被提供为`object`。'
- en: '`targetType`: This is the type of the binding target property. It’s what the
    method should return the data as. For example, if you’re binding to a property
    in your View that is of the `Microsoft.Maui.Graphics.Color` type, then `targetType`
    would be `Microsoft.Maui.Graphics.Color`.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`targetType`：这是绑定目标属性的类型。这是方法应该将数据返回为的类型。例如，如果您正在将数据绑定到您的视图中的一个`Microsoft.Maui.Graphics.Color`类型的属性，那么`targetType`将是`Microsoft.Maui.Graphics.Color`。'
- en: '`parameter`: This is an optional `parameter` that can be used to pass additional
    information to the converter.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parameter`：这是一个可选的`parameter`，可以用来向转换器传递额外的信息。'
- en: '`culture`: This is the `System.Globalization.CultureInfo` culture that should
    be used in the converter. This is especially important when dealing with dates,
    times, and numbers, as these can be represented differently in different cultures.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`culture`：这是在转换器中应该使用的`System.Globalization.CultureInfo`文化。这在处理日期、时间和数字时尤为重要，因为不同文化中这些值可能有不同的表示方式。'
- en: The `ConvertBack` method is used to reverse the conversion process, transforming
    data from the binding target back to the binding source. In many cases, the `ConvertBack`
    method is not implemented as it only has purpose on `TwoWay` and `OneWayToSource`
    data bindings, where the data on the View needs to be converted before it’s passed
    to the ViewModel. The return value and parameters are analogous to the `Convert`
    method.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`ConvertBack`方法用于反转转换过程，将数据从绑定目标转换回绑定源。在许多情况下，`ConvertBack`方法没有实现，因为它仅在`TwoWay`和`OneWayToSource`数据绑定中才有用，在这些数据绑定中，需要在传递给ViewModel之前将视图上的数据转换。返回值和参数与`Convert`方法类似。'
- en: This might all be a little abstract at this point, so let’s take a look at building
    and using a ValueConverter.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这一切可能都有些抽象，所以让我们来看看如何构建和使用一个ValueConverter。
- en: Creating a ValueConverter
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个ValueConverter
- en: 'To demonstrate the flexibility and power of ValueConverters, we’re going to
    enhance our app by introducing a rating indicator for our recipes. Simply displaying
    a numeric value isn’t the most appealing or intuitive way to represent a recipe’s
    rating. Therefore, we’ll utilize a ValueConverter to replace these numbers with
    star icons, creating a visually engaging and user-friendly rating representation.
    Our custom ValueConverter, `RatingToStarsConverter`, will convert a double value
    into a string. In conjunction with a specific font, this string will display as
    star icons. But before we can dive into building our converter, we need to take
    care of some preparatory steps first:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示 ValueConverters 的灵活性和强大功能，我们将通过引入评分指示器来增强我们的应用。仅仅显示一个数值并不是表示菜谱评分最吸引人或直观的方式。因此，我们将利用
    ValueConverter 将这些数字替换为星形图标，创建一个视觉上吸引人且用户友好的评分表示。我们的自定义 ValueConverter，`RatingToStarsConverter`，将双精度值转换为字符串。结合特定的字体，这个字符串将显示为星形图标。但在我们开始构建转换器之前，我们需要先做一些准备工作：
- en: First, we are going to create `RecipeRatingsSummaryViewModel`. Right-click the
    `ViewModels` folder and select `RecipeRatingsSummaryViewModel.cs`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将创建 `RecipeRatingsSummaryViewModel`。右键单击 `ViewModels` 文件夹，并选择 `RecipeRatingsSummaryViewModel.cs`。
- en: 'For now, we are only adding an `AverageRating` property of the `double` type
    to the class:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目前，我们只向类中添加了一个 `AverageRating` 属性，其类型为 `double`：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We are also including a value to indicate the maximum amount of stars that
    can be given by a user. Next, let’s add an additional property called `RatingDetail`
    to `RecipeDetailViewModel` and assign it a new instance by default:'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还包含了一个值来指示用户可以给出的最大星数。接下来，让我们向 `RecipeDetailViewModel` 添加一个额外的属性 `RatingDetail`，并默认分配一个新实例：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'An efficient approach to displaying icons in an application is through the
    use of a specialized icon font. These fonts, which are readily available both
    for free and for purchase, allow you to easily incorporate various icons into
    your application. The principle is simple: incorporate the desired icon font into
    your app, then assign this font as `FontFamily` on the `Label` class where you
    wish to display the icon. From there, all that’s left is to set the `Text` property
    on the `Label` class to the value that corresponds to the icon you wish to display.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中显示图标的一种高效方法是使用专门的图标字体。这些字体既免费又可购买，允许您轻松地将各种图标集成到您的应用程序中。原理很简单：将所需的图标字体集成到您的应用中，然后在您希望显示图标的
    `Label` 类上将其分配为 `FontFamily`。从那里，剩下的只是将 `Label` 类的 `Text` 属性设置为对应于您要显示的图标的值。
- en: 'Let’s include Google’s Material Design Icon font in our app so that we can
    use this font to display the recipe’s rating later on. You can find the `MaterialIcons-Regular.ttf`
    font file in the `Chapter 04``/Assets/Fonts` folder or you can download it from
    [https://github.com/google/material-design-icons/tree/master/font](https://github.com/google/material-design-icons/tree/master/font):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在我们的应用中包含 Google 的 Material Design 图标字体，这样我们就可以使用这种字体来稍后显示菜谱的评分。您可以在 `Chapter
    04/Assets/Fonts` 文件夹中找到 `MaterialIcons-Regular.ttf` 字体文件，或者您可以从 [https://github.com/google/material-design-icons/tree/master/font](https://github.com/google/material-design-icons/tree/master/font)
    下载它：
- en: In the Visual Studio `Resources/Fonts` folder in the **Recipes.Mobile** project
    and select **Open Folder in** **File Explorer**.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，**Recipes.Mobile** 项目的 `Resources/Fonts` 文件夹，并选择 **File Explorer**
    中的 **Open Folder**。
- en: Copy the `MaterialIcons-Regular.ttf` font file over to this folder.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `MaterialIcons-Regular.ttf` 字体文件复制到这个文件夹中。
- en: 'Back in Visual Studio, you should see the newly added font file in the **Solution
    Explorer**. The file’s **Build Action** should have automatically been set to
    **MauiFont**, as shown in *Figure 4**.2*:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Visual Studio，您应该在新添加的字体文件中看到 **Solution Explorer**。该文件的 **Build Action**
    应该已经自动设置为 **MauiFont**，如图 *图 4.2* 所示：
- en: '![Figure 4.2: MaterialIcons-Regular.ttf file properties](img/B20941_04_02.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.2：MaterialIcons-Regular.ttf 文件属性](img/B20941_04_02.jpg)'
- en: 'Figure 4.2: MaterialIcons-Regular.ttf file properties'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.2：MaterialIcons-Regular.ttf 文件属性
- en: 'Next, to be able to use this font in our MAUI app, we need to add it through
    `MauiAppBuilder`. Go to `MauiProgram.cs` and add it:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，为了能够在我们的 MAUI 应用中使用这种字体，我们需要通过 `MauiAppBuilder` 来添加它。转到 `MauiProgram.cs`
    并添加以下内容：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code will allow us to use this font by setting the `FontFamily`
    property of a `Label` class or any control that displays text to `MaterialIconsRegular`.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上述代码将允许我们通过设置 `Label` 类或任何显示文本的控件的 `FontFamily` 属性为 `MaterialIconsRegular` 来使用此字体。
- en: 'Now that all of this is in place, we can finally start writing our first ValueConverter:
    `RatingToStarsConverter`. This converter should convert the rating of a recipe
    into little star icons.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有这些都已就绪，我们最终可以开始编写我们的第一个ValueConverter：`RatingToStarsConverter`。这个转换器应将菜谱的评分转换为小星星图标。
- en: RatingToStarsConverter
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: RatingToStarsConverter
- en: '`RatingToStarsConverter` should convert any double value into a string value
    that represents stars. This is exactly what converters are for – taking in an
    object of a particular data type (double) and returning an object of another data
    type (string). For the visualization of the star icons, we can use the icon font
    we added earlier. [https://fonts.google.com/icons?icon.set=Material+Icons](https://fonts.google.com/icons?icon.set=Material+Icons)
    provides an overview of all the available icons that exist in the font that we
    just added. By clicking an icon, you can see different ways to target it. We are
    interested in the code value. The star icon we want to use has a code of `e838`
    and the icon for a half star is identified by the `e839` code. Packed with this
    knowledge, let’s see how we can create `RatingToStarsConverter`:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`RatingToStarsConverter`应将任何双精度值转换为表示星星的字符串值。这正是转换器的作用——接收特定数据类型（双精度）的对象，并返回另一个数据类型（字符串）的对象。对于星星图标的可视化，我们可以使用我们之前添加的图标字体。[https://fonts.google.com/icons?icon.set=Material+Icons](https://fonts.google.com/icons?icon.set=Material+Icons)提供了我们刚刚添加的字体中所有可用图标的概述。通过点击一个图标，你可以看到不同的定位方式。我们感兴趣的是代码值。我们想要使用的星星图标的代码是`e838`，而半星图标的代码是`e839`。掌握了这些知识，让我们看看如何创建`RatingToStarsConverter`：'
- en: In the `Converters`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Converters`。
- en: Right-click the `Converters` folder and select **Add** | **Class…**.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击`Converters`文件夹，选择**添加** | **类…**。
- en: Enter the name of our converter, `RatingToStarsConverter`, and click **Add**.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入我们的转换器名称，`RatingToStarsConverter`，然后点击**添加**。
- en: 'Make the class implement the `Microsoft.Maui.Controls.IValueConverter` interface,
    as shown in the following code block:'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使该类实现`Microsoft.Maui.Controls.IValueConverter`接口，如下面的代码块所示：
- en: '[PRE4]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now, we can start implementing the `Convert` method. As this converter could
    be used in any binding statement, the first thing that we need to do is check
    if the binding source is indeed a value of the `double` type:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以开始实现`Convert`方法。由于这个转换器可以在任何绑定语句中使用，我们首先需要检查绑定源是否确实是`double`类型的值：
- en: '[PRE5]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the `value` parameter is not the type that we expect, or it doesn’t fall
    within the expected range, we are returning a default value – in this case, `string.Empty`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`value`参数不是我们期望的类型，或者它不在期望的范围内，我们将返回一个默认值——在这种情况下，`string.Empty`。
- en: 'After we’ve validated the provided `value`, we can add the rest of the logic:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在验证提供的`value`之后，我们可以添加其余的逻辑：
- en: '[PRE6]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Depending on the rating value we receive, we will return a string that contains
    icons defined in the `MaterialIcons` font we added to our project. For full stars,
    we must generate a collection of `fullStar` icons. The `string.Join` method then
    consolidates these individual icon strings into a single string. If the rating
    includes a decimal value of 0.5 or higher, we also append a `halfStar` icon to
    the string.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据我们收到的评分值，我们将返回一个包含我们在项目中添加的`MaterialIcons`字体中定义的图标字符串。对于满星，我们必须生成一组`fullStar`图标。然后`string.Join`方法将这些单个图标字符串合并成一个字符串。如果评分包含0.5或更高的十进制值，我们还会将一个`halfStar`图标追加到字符串中。
- en: That’s all we need to do in `RatingToStarsConverter`. We don’t need to implement
    the `ConvertBack` method as this particular converter will not be used in `TwoWay`
    or `OneWayToSource` scenarios. When not implementing the `ConvertBack` method,
    it’s good practice to add a comment indicating it’s intentionally not implemented.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`RatingToStarsConverter`中，我们所需做的全部就是这些。我们不需要实现`ConvertBack`方法，因为这个特定的转换器将不会在`TwoWay`或`OneWayToSource`场景中使用。当不实现`ConvertBack`方法时，添加一条注释说明有意不实现是良好的实践。
- en: 'Next, we want to use our newly created converter, so we need to head over to
    `RecipeDetailPage`. The first thing we need to do there is add the namespace of
    the converter to our XAML, as shown in the following code snippet:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们想要使用我们新创建的转换器，因此我们需要前往`RecipeDetailPage`。在那里，我们首先需要做的是将转换器的命名空间添加到我们的XAML中，如下面的代码片段所示：
- en: '[PRE7]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: By declaring this XML namespace, we can reference anything within the `Recipes.Mobile.Converters`
    namespace directly in this XAML page using the `conv` prefix. The prefix can be
    anything you choose. To declare it, simply type `xmlns:` (XML namespace), followed
    by your chosen prefix, and then set it equal to the CLR namespace you wish to
    reference. This technique allows for cleaner and more organized code, as you can
    use this prefix to reference classes and components from the specified namespace.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过声明此 XML 命名空间，我们可以在使用 `conv` 前缀的此 XAML 页面中直接引用 `Recipes.Mobile.Converters`
    命名空间内的任何内容。前缀可以是您选择的任何内容。要声明它，只需键入 `xmlns:`（XML 命名空间），然后跟上前缀，并将其设置为要引用的 CLR 命名空间。这种技术允许代码更干净、更有组织，因为您可以使用此前缀来引用指定命名空间中的类和组件。
- en: 'Now, we need to add an instance of `RatingToStarsConverter` to our page so
    that we can use it later on in our binding statements. The following code block
    shows how we can add an instance of the converter as a resource to the page:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要将 `RatingToStarsConverter` 的一个实例添加到我们的页面中，以便我们可以在后续的绑定语句中使用它。以下代码块显示了如何将转换器的实例作为资源添加到页面中：
- en: '[PRE8]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: By giving the resource a `Key` value, we can reference it later on in our XAML.
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过给资源一个 `Key` 值，我们可以在以后引用它。
- en: 'Finally, we can now implement the binding of the `RatingDetail.AverageRating`
    property and use `RatingToStarsConverter` as the converter for this binding:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们现在可以实施 `RatingDetail.AverageRating` 属性的绑定，并使用 `RatingToStarsConverter`
    作为此绑定的转换器：
- en: '[PRE9]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: About resources, StaticResource, and DynamicResource
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 关于资源、StaticResource 和 DynamicResource
- en: The converter we’ve just added to the resources is now accessible on this particular
    page. It’s important to note that the scope of this resource is local to this
    page only. That means if you want to use this converter on other pages, you would
    have to declare it in their resources too.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚添加到资源中的转换器现在可以在这个特定的页面上访问。需要注意的是，此资源的范围仅限于这个页面。这意味着如果您想在其他页面上使用此转换器，您也必须在它们的资源中声明它。
- en: If you plan to use this converter across multiple pages, consider adding it
    to your `App.xaml` resources instead. By doing this, the converter becomes globally
    accessible throughout your app, eliminating the need to redeclare it on each page.
    This leads to cleaner and more maintainable code, especially for resources such
    as converters, which are often used throughout an application.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在多个页面中使用此转换器，请考虑将其添加到您的 `App.xaml` 资源中。通过这样做，转换器在整个应用程序中全局可访问，消除了在每个页面上重新声明它的需要。这导致代码更干净、更易于维护，特别是对于像转换器这样的资源，它们通常在整个应用程序中使用。
- en: The `StaticResource Markup Extension` looks up a resource in a resource dictionary
    and assigns it to the property that it is set on. This resource lookup is performed
    only once when the page or control that uses `StaticResource` is loaded.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`StaticResource Markup Extension` 在资源字典中查找资源并将其分配给设置的属性。此资源查找仅在加载使用 `StaticResource`
    的页面或控件时执行一次。'
- en: The `DynamicResource Markup Extension`, on the other hand, is used when the
    value can change and the UI needs to be updated to reflect this change. It maintains
    a link between the property and the resource, so when the resource changes, the
    property is updated too. `DynamicResource` is perfect for scenarios such as theme
    switching, where the values in the resource dictionary can be updated.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`DynamicResource Markup Extension` 用于值可以更改且 UI 需要更新以反映此更改的情况。它维护属性和资源之间的链接，因此当资源更改时，属性也会更新。`DynamicResource`
    对于像主题切换这样的场景非常完美，其中资源字典中的值可以更新。
- en: 'Alternatively, you can express the converter to use from the code if you define
    your data binding from code-behind. For this to work, you need to name the label
    you want to show the rating on `lblRating`, using the `x:Name` attribute:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您从代码后定义数据绑定，您也可以在代码中表达要使用的转换器。为此，您需要使用 `x:Name` 属性将您想要显示评分的标签命名为 `lblRating`：
- en: '[PRE10]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The `SetBinding` method accepts an optional converter parameter that allows
    you to specify the converter that should be used. When you run the app, you should
    see stars representing the recipe’s rating, as shown in the following figure:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`SetBinding` 方法接受一个可选的转换器参数，允许您指定应使用的转换器。当您运行应用程序时，您应该看到代表食谱评分的星星，如图下所示：'
- en: '![Figure 4.3: RatingToStartsConverter in action](img/B20941_04_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.3：RatingToStartsConverter 在工作](img/B20941_04_03.jpg)'
- en: 'Figure 4.3: RatingToStartsConverter in action'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.3：RatingToStartsConverter 在工作
- en: Let’s enhance the user interface and user experience of our app a notch further.
    To achieve this, we’ll assign unique colors to the rating indicator based on the
    average rating of a recipe.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步提升我们应用程序的用户界面和用户体验。为了实现这一点，我们将根据菜谱的平均评分为评分指示器分配独特的颜色。
- en: RatingToColorConverter
  id: totrans-83
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: RatingToColorConverter
- en: 'With `RatingToColorConverter`, we should be able to give the stars that represent
    the recipe’s rating a color depending on the average rating. Additionally, we
    want to display four stars consistently in the background, regardless of the recipe’s
    average score. *Figure 4**.4* shows exactly what we want to achieve:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`RatingToColorConverter`，我们应该能够根据平均评分给代表菜谱评分的星号上色。此外，我们还想在背景中始终显示四个星号，无论菜谱的平均得分如何。*图4.4**.4*展示了我们想要实现的效果：
- en: '![Figure 4.4: Rating indicator using different colors](img/B20941_04_04.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4：使用不同颜色的评分指示器](img/B20941_04_04.jpg)'
- en: 'Figure 4.4: Rating indicator using different colors'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.4：使用不同颜色的评分指示器
- en: This visual cue serves as a rating scale that helps users immediately comprehend
    where a recipe stands in terms of rating. As the background stars need to be in
    a different color from the ones indicating the actual score, our new ValueConverter
    must accept a parameter to distinguish between foreground and background colors.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视觉提示作为一个评分尺度，帮助用户立即理解一个菜谱在评分方面的位置。由于背景星号需要与表示实际得分的星号颜色不同，我们新的ValueConverter必须接受一个参数来区分前景和背景颜色。
- en: 'So, let’s get started! Like we did before, we need to add a converter and implement
    the `IValueConverter` interface:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧！就像我们之前做的那样，我们需要添加一个转换器并实现`IValueConverter`接口：
- en: Right-click the **Converters** folder in the **Recipe.Mobile** project and select
    **Add** | **Class…**.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**Recipe.Mobile**项目中的**Converters**文件夹，然后选择**添加** | **类…**。
- en: Enter `RatingToColorConverter` as the name and click **Add**.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`RatingToColorConverter`作为名称，然后点击**添加**。
- en: Make the class implement the `IValueConverter` interface.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让这个类实现`IValueConverter`接口。
- en: 'In the `Convert` method, we can check the parameter that is being passed in.
    When the `"background"` value is passed as a parameter to this converter, we want
    to return a slightly different color:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Convert`方法中，我们可以检查传入的参数。当将`"background"`值作为参数传递给这个转换器时，我们希望返回一个稍微不同的颜色：
- en: '[PRE11]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once we have this information, we can go ahead and implement the rest of this
    method:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们有了这些信息，我们就可以继续实现这个方法的其余部分：
- en: '[PRE12]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Depending on the provided rating, this converter returns a particular color.
    On top of that, if the converter parameter is `"background"`, a slightly different
    color accent is returned that should serve as a background color.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据提供的评分，这个转换器返回特定的颜色。除此之外，如果转换器参数是`"background"`，则返回一个稍微不同的颜色强调，这应该作为背景颜色。
- en: 'The following code block shows how we can add this converter as a resource
    to `RecipeDetailPage`. This allows us to use the converter on the page:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块展示了我们如何将这个转换器作为资源添加到`RecipeDetailPage`。这允许我们在页面上使用这个转换器：
- en: '[PRE13]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: With that in place, we can use the defined key, `"ratingToColorConverter"`,
    to reference this converter in our data binding statements.
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在设置好之后，我们可以使用定义好的键，`"ratingToColorConverter"`，在我们的数据绑定语句中引用这个转换器。
- en: 'Finally, replace the label we had previously showing the `Rating` property
    with the following code:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，用以下代码替换之前显示`Rating`属性的标签：
- en: '[PRE14]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: By placing both labels in `Grid`, the labels will overlap and as a result, the
    first one will act as the backdrop for the rating indicator. This label’s `Text`
    property is bound to the `RatingSummary.MaxRating` property and indicates the
    upper bound of the ratings. `RatingToStarsIconConverter` will transform this value
    into star icons. Additionally, its `TextColor` property is bound to the `RatingSummary.AverageRating`
    property of the ViewModel, using our newly created `RatingToColorConverter` to
    decide its color. Note that we’ve set the `ConverterParameter` property of the
    `Binding Markup Extension` to `"background"`. This parameter is forwarded to the
    converter, signaling that we need a color suitable for a background icon.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通过将两个标签都放置在`Grid`中，标签将重叠，因此第一个标签将作为评分指示器的背景。这个标签的`Text`属性绑定到`RatingSummary.MaxRating`属性，表示评分的上限。`RatingToStarsIconConverter`将这个值转换为星号图标。此外，它的`TextColor`属性绑定到ViewModel的`RatingSummary.AverageRating`属性，使用我们新创建的`RatingToColorConverter`来决定其颜色。请注意，我们已经将`Binding
    Markup Extension`的`ConverterParameter`属性设置为`"background"`。这个参数被转发到转换器，表示我们需要一个适合背景图标的颜色。
- en: The second `Label` class’s `Text` and `TextColor` properties are also bound
    to the `RatingSummary.AverageRating` property of `RecipeDetailViewModel`. `RatingToColorConverter`
    is used as the converter for the `TextColor` property, providing a color based
    on the recipe’s rating. Because we didn’t use `ConverterParameter` here, the converter
    understands that it needs to produce a color intended for the foreground.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二个 `Label` 类的 `Text` 和 `TextColor` 属性也绑定到 `RecipeDetailViewModel` 的 `RatingSummary.AverageRating`
    属性。`RatingToColorConverter` 被用作 `TextColor` 属性的转换器，根据菜谱的评分提供颜色。因为我们在这里没有使用 `ConverterParameter`，转换器理解它需要生成用于前景的颜色。
- en: 'These two simple ValueConverters provide a nice visualization for the recipe’s
    rating. When running the app, we should see a nice colorful visualization of the
    recipe’s rating, as shown in the following figure:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个简单的值转换器为菜谱的评分提供了一个很好的可视化效果。当运行应用程序时，我们应该看到如图所示的菜谱评分的彩色可视化效果：
- en: '![Figure 4.5: Rating indicator using different colors](img/B20941_04_05.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.5：使用不同颜色的评分指示器](img/B20941_04_05.jpg)'
- en: 'Figure 4.5: Rating indicator using different colors'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.5：使用不同颜色的评分指示器
- en: We haven’t implemented the `ConvertBack` method of the ValueConverters in these
    examples as they only serve a purpose in `TwoWay` or `OneWayToSource` data bindings.
    Let’s have a quick look at an example.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们没有实现值转换器的 `ConvertBack` 方法，因为它们只在 `TwoWay` 或 `OneWayToSource` 数据绑定中起作用。让我们快速看一下一个示例。
- en: InverseBoolConverter
  id: totrans-108
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: InverseBoolConverter
- en: 'A very common and simple converter is `InverseBoolConverter`: it just takes
    a `bool` value and returns the inverse. An implementation of `InverseBoolConverter`
    typically also includes an implementation for its `ConvertBack` method. This is
    particularly relevant because, in the context of two-way data binding, an action
    on the UI can trigger an update to the bound bool value. By providing a `ConvertBack`
    implementation, we ensure that changes in the UI are correctly mirrored back to
    the ViewModel, keeping the data synchronized. Let’s see how we can create a converter
    with an implemented `ConvertBack` method:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常常见且简单的转换器是 `InverseBoolConverter`：它只接受一个 `bool` 值并返回其相反值。`InverseBoolConverter`
    的实现通常还包括其 `ConvertBack` 方法的实现。这尤其重要，因为在双向数据绑定的上下文中，UI 上的操作可以触发绑定 `bool` 值的更新。通过提供
    `ConvertBack` 的实现，我们确保 UI 的更改能够正确地反映回 ViewModel，保持数据同步。让我们看看如何创建一个实现了 `ConvertBack`
    方法的转换器：
- en: To create `InverseBoolConverter`, create a new class called `InverseBoolConverter`
    and let it implement the `IValueConverter` interface.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建 `InverseBoolConverter`，创建一个名为 `InverseBoolConverter` 的新类，并让它实现 `IValueConverter`
    接口。
- en: 'Let’s write an `Inverse` method that returns a `bool` value and takes a `value`
    parameter of the `object` type:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们编写一个返回 `bool` 值并接受一个 `object` 类型的 `value` 参数的 `Inverse` 方法：
- en: '[PRE15]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This method accepts a `value` parameter of the `object` type. Inside this method,
    we check if the provided value is a `bool` value. If it is, we return `inverse`;
    if it’s not, we return `false`.
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此方法接受一个 `object` 类型的 `value` 参数。在这个方法内部，我们检查提供的值是否为 `bool` 类型。如果是，我们返回 `inverse`；如果不是，我们返回
    `false`。
- en: 'This method can now be used by both the `Convert` and `ConvertBack` methods
    as both methods should inverse the given `bool` value:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此方法现在可以由 `Convert` 和 `ConvertBack` 方法使用，因为这两个方法都应该反转给定的 `bool` 值：
- en: '[PRE16]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To see this converter in action, we can go to `RecipeDetailViewModel`, update
    the `ShowAllergenInformation` property to `HideAllergenInformation`, and change
    its default value to `true`:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要看到这个转换器的实际效果，我们可以转到 `RecipeDetailViewModel`，将 `ShowAllergenInformation` 属性更新为
    `HideAllergenInformation`，并将其默认值更改为 `true`：
- en: '[PRE17]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Because the meaning of this property is now the opposite of what it was, we
    need to update the bindings on our UI. This is exactly where our new `InverseBoolConverter`
    comes in. After we’ve added `InverseBoolConverter` to the resources of `RecipeDetailPage`,
    we can update the XAML to this:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因为这个属性的现在意义与之前相反，我们需要更新我们的 UI 上的绑定。这正是我们的新 `InverseBoolConverter` 发挥作用的地方。在我们将
    `InverseBoolConverter` 添加到 `RecipeDetailPage` 的资源之后，我们可以更新 XAML 如下：
- en: '[PRE18]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '`InverseBoolConverter` will inverse the `HideExtendedAllergenList` property’s
    value. The `Convert` method will be invoked in the `OneWay` data binding scenario,
    whereas the `ConvertBack` method will be called when tapping `CheckBox`, triggering
    an update of `IsCheckedProperty`, which – through the `OneWayToSource` data binding
    – needs to update the property on the ViewModel.'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`InverseBoolConverter`将反转`HideExtendedAllergenList`属性值。在`OneWay`数据绑定场景中，将调用`Convert`方法，而当点击`CheckBox`时，将调用`ConvertBack`方法，这将触发`IsCheckedProperty`的更新，通过`OneWayToSource`数据绑定需要更新ViewModel上的属性。'
- en: ValueConverters are a powerful feature in data binding that enables seamless
    transformation of data between the ViewModel and the View. They provide a clean,
    maintainable way to control the display of data and handle discrepancies between
    the format of data in the ViewModel and how it needs to be displayed or inputted
    in the View.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: ValueConverters是数据绑定中的一个强大功能，它允许在ViewModel和View之间无缝转换数据。它们提供了一种干净、可维护的方式来控制数据的显示，并处理ViewModel中数据格式与在View中显示或输入所需格式之间的差异。
- en: Keep converters simple
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 保持转换器简单
- en: Keep in mind that on screens with a lot of converters, these converters can
    be invoked a lot of times, especially in collections. As such, it is advised to
    keep converters as simple as possible and consider their performance.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在有很多转换器的屏幕上，这些转换器可能会被多次调用，尤其是在集合中。因此，建议尽可能保持转换器简单，并考虑它们的性能。
- en: As a developer, mastering ValueConverters will greatly enhance your ability
    to build dynamic, data-driven applications with .NET MAUI. In [*Chapter 5*](B20941_05.xhtml#_idTextAnchor086),
    *Community Toolkits*, we will see that the .NET MAUI Community Toolkit is packed
    with converters that are up for grabs for you to use in your projects.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名开发者，掌握ValueConverters将极大地增强你使用.NET MAUI构建动态、数据驱动应用程序的能力。在[*第5章*](B20941_05.xhtml#_idTextAnchor086)“社区工具包”中，我们将看到.NET
    MAUI社区工具包中包含了许多可供你用于项目的转换器。
- en: An alternative approach to transform how data from the ViewModel needs to be
    displayed is by providing `StringFormat`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种将ViewModel中的数据展示方式转换为转换的方法是提供`StringFormat`。
- en: StringFormat
  id: totrans-126
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: StringFormat
- en: Despite being less powerful than ValueConverters, providing `StringFormat` to
    your data binding offers a quick and straightforward way to modify the presentation
    of your data directly within your data binding expressions, saving you from the
    overhead of creating a separate converter for simple transformations. It leverages
    the standard .NET formatting conventions to shape the bound data into a specific
    string format. It’s particularly useful when the bound data is of a primitive
    or built-in .NET data type, such as `DateTime`, `int`, `float`, `double`, and
    so on, and you want to format that data in a specific way for display.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管ValueConverters功能更强大，但将`StringFormat`提供给你的数据绑定可以提供一个快速直接的方法来修改数据在数据绑定表达式中的展示，从而避免为简单的转换创建单独转换器的开销。它利用标准的.NET格式化约定来将绑定数据塑造成特定的字符串格式。当绑定的数据是原始或内置的.NET数据类型，如`DateTime`、`int`、`float`、`double`等，并且你希望以特定方式格式化这些数据以供显示时，特别有用。
- en: 'As a first example, let’s show the calories of the recipe on `RecipeDetailPage`,
    as shown in *Figure 4**.6*:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个示例，让我们在`RecipeDetailPage`上显示食谱的卡路里，如图*图4.6*所示：
- en: '![Figure 4.6: Showing the calories and cooking time](img/B20941_04_06.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图4.6：显示卡路里和烹饪时间](img/B20941_04_06.jpg)'
- en: 'Figure 4.6: Showing the calories and cooking time'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.6：显示卡路里和烹饪时间
- en: 'Let’s have a look at how simple this is to implement:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这有多简单来实现：
- en: 'Add the optional `Calories` and `ReadyInMinutes` properties to `RecipeDetailViewModel`:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将可选的`Calories`和`ReadyInMinutes`属性添加到`RecipeDetailViewModel`中：
- en: '[PRE19]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, as we want to show these properties on the screen, we need to indicate
    what this value means. We don’t just want to show the raw values. For that, we
    could use multiple labels or a converter to enrich these raw values with additional
    context. Alternatively, we could use `StringFormat`, like this:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，由于我们想在屏幕上显示这些属性，我们需要指明这个值的含义。我们不仅仅想显示原始值。为此，我们可以使用多个标签或转换器来丰富这些原始值，并添加额外的上下文。或者，我们可以使用`StringFormat`，如下所示：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Much like how we use the `string.Format` method in .NET, we can use the `StringFormat`
    property of `Binding Markup Extension`. In the format string, we can use a placeholder
    (`{0}`) to indicate where the bound value should be inserted. This approach provides
    a straightforward way to integrate bound values into formatted string expressions.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们在 .NET 中使用 `string.Format` 方法一样，我们也可以使用 `Binding Markup Extension` 的 `StringFormat`
    属性。在格式字符串中，我们可以使用占位符 (`{0}`) 来指示绑定值应该插入的位置。这种方法提供了一种简单直接的方法将绑定值集成到格式化字符串表达式中。
- en: And the similarity with `string.Format` doesn’t stop there. We can even use
    numeric, timespan, and date and time format strings.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 并且与 `string.Format` 的相似性并不仅限于此。我们甚至可以使用数字、时间段以及日期和时间的格式化字符串。
- en: 'To demonstrate this, let’s add a `LastUpdated` timestamp to `RecipeDetailPage`.
    Let’s look at the following steps:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们在 `RecipeDetailPage` 中添加一个 `LastUpdated` 时间戳。让我们看看以下步骤：
- en: 'First, we need to add a property called `LastUpdated` to `RecipeDetailViewModel`:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在 `RecipeDetailViewModel` 中添加一个名为 `LastUpdated` 的属性：
- en: '[PRE21]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Now, we can go to `RecipeDetailPage` and bind this value to a new label:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以转到 `RecipeDetailPage` 并将此值绑定到一个新的标签上：
- en: '[PRE22]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Additionally, we might want to show the average ratings textually on the screen
    as well, limiting it to 1 decimal:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，我们可能还想在屏幕上以文本形式显示平均评分，限制为 1 位小数：
- en: '[PRE23]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Let’s examine the app, specifically focusing on these two labels. Here is what
    they look like:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查应用，特别是关注这两个标签。它们看起来是这样的：
- en: '![Figure 4.7: Leveraging StringFormat](img/B20941_04_07.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.7：利用 StringFormat](img/B20941_04_07.jpg)'
- en: 'Figure 4.7: Leveraging StringFormat'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.7：利用 StringFormat
- en: ValueConverters and `StringFormat` not only facilitate the translation of data
    from the ViewModel into something more suitable for our UI, but also allow for
    the creation of more dynamic, responsive, and user-friendly applications. By using
    ValueConverters, we can handle complex conversions, while `StringFormat` helps
    us effortlessly format strings right in our bindings. Both of these mechanisms
    empower us to handle data transformations seamlessly, without overloading our
    ViewModel with UI-related concerns. Remember, effective data binding is not only
    about linking data; it’s also about presenting data in the most intuitive way
    possible to our users.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: ValueConverters 和 `StringFormat` 不仅促进了从 ViewModel 到更适合我们 UI 的数据的转换，还允许创建更动态、响应和用户友好的应用程序。通过使用
    ValueConverters，我们可以处理复杂的转换，而 `StringFormat` 则帮助我们轻松地在绑定中格式化字符串。这两个机制使我们能够无缝地处理数据转换，而不会使
    ViewModel 过载与 UI 相关的担忧。记住，有效的数据绑定不仅关乎数据链接；它还关乎以最直观的方式向用户展示数据。
- en: But what about when things don’t go exactly as planned? What if the data we’re
    binding to is null? This is where `TargetNullValue` and `FallbackValue` in our
    bindings to handle such cases and ensure a more robust, fail-safe user interface.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果事情没有按计划进行呢？如果我们绑定到的数据是 `null` 呢？这就是我们绑定中的 `TargetNullValue` 和 `FallbackValue`
    处理这种情况并确保更稳健、更安全的用户界面的地方。
- en: Fallbacks
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 回退
- en: There are occasions where data binding can fail; the binding source cannot be
    resolved (yet) or the returned value is null. Although ValueConverters and additional
    code could tackle many such situations, we can also enhance the resilience of
    our data bindings by setting fallback values. This can easily be done by setting
    the `TargetNullValue` or `FallbackValue` property in our binding expression.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候数据绑定可能会失败；绑定源无法解析（目前）或返回的值为 `null`。尽管 ValueConverters 和额外的代码可以解决许多此类情况，但我们也可以通过设置
    `TargetNullValue` 或 `FallbackValue` 属性来增强数据绑定的鲁棒性。这可以通过在绑定表达式中设置这些属性轻松完成。
- en: TargetNullValue
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TargetNullValue
- en: The `TargetNullValue` property can be used in situations where we want to handle
    the situation where the resolved binding source target returns `null`. In other
    words, the binding engine can resolve the bound property, but this property returns
    a `null` value.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`TargetNullValue` 属性可以在我们想要处理解析的绑定源目标返回 `null` 的情况下使用。换句话说，绑定引擎可以解析绑定的属性，但这个属性返回一个
    `null` 值。'
- en: 'In our app, the `Calories` property on `RecipeDetailViewModel` is defined as
    a nullable `int`. This makes it essential for us to handle any potential null
    values in our data binding elegantly. If we leave the binding statement as-is,
    the label would show `"Calories: kcal"` if the `Calories` property is `null`.
    Not very clean-looking, right? Let’s fix this:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的应用中，`RecipeDetailViewModel` 上的 `Calories` 属性被定义为可空的 `int` 类型。这使得我们在数据绑定中优雅地处理任何潜在的空值变得至关重要。如果我们保持绑定语句不变，当
    `Calories` 属性为 `null` 时，标签会显示 `"Calories: kcal"`。看起来不太整洁，对吧？让我们来修复这个问题：'
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: <Label Text="{Binding ReadyInMinutes, StringFormat='Ready
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: <Label Text="{Binding ReadyInMinutes, StringFormat='Ready
- en: 'in: {0} minutes'', TargetNullValue=''No cooking time'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'in: {0} 分钟'', TargetNullValue=''无烹饪时间'
- en: 'RecipeDetailPage. And because there might not always be an image added to a
    recipe, we need to make sure we provide a TargetNullValue property so that a default
    image is shown. Let’s take a look at how we could implement this:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: RecipeDetailPage。由于可能并非每次都会为食谱添加图片，我们需要确保提供 TargetNullValue 属性，以便显示默认图片。让我们看看我们如何实现这一点：
- en: First, we need to add the `Chapter 04``/Assets/caesarsalad.png` and `Chapter
    04``/Assets/fallback.png` images to the `Resources/Images` folder of the `Recipes.Mobile`
    project. The easiest way to do this is by using your operating system’s file manager
    to copy the files over.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将 `Chapter 04``/Assets/caesarsalad.png` 和 `Chapter 04``/Assets/fallback.png`
    图片添加到 `Recipes.Mobile` 项目的 `Resources/Images` 文件夹中。最简单的方法是使用操作系统的文件管理器来复制文件。
- en: 'Add an `Image` property to `RecipeDetailViewModel`:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `RecipeDetailViewModel` 中添加一个 `Image` 属性：
- en: '[PRE25]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '3.  Next, add the following XAML to `RecipeDetailPage.xaml`, just above the
    **Add**/**Remove as** **favorite** buttons:'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 3.  接下来，将以下 XAML 添加到 `RecipeDetailPage.xaml` 中，位于 **添加**/**移除为** **收藏**按钮之上：
- en: '[PRE26]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Because the value on `RecipeDetailViewModel` is set to `caesarsalad.png`, the
    app will show this image on the screen. However, if you assign `null` to it, the
    `fallback.png` image will be shown as it is defined as `TargetNullValue`. *Figure
    4**.8* shows what this looks like:'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 因为在 `RecipeDetailViewModel` 中设置的值是 `caesarsalad.png`，所以应用会在屏幕上显示这张图片。然而，如果你将其设置为
    `null`，则会显示定义好的 `fallback.png` 图片，因为它被指定为 `TargetNullValue`。*图 4**.8* 展示了这种情况：
- en: '![Figure 4.8: Showing the recipe’s image (left) or a fallback value (right)](img/B20941_04_08.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![Figure 4.8: 显示食谱的图片（左）或回退值（右）](img/B20941_04_08.jpg)'
- en: 'Figure 4.8: Showing the recipe’s image (left) or a fallback value (right)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 'Figure 4.8: 显示食谱的图片（左）或回退值（右）'
- en: Not too complex, right? It does get a little bit more complicated when a ValueConverter
    is involved. If the bound property is `null`, this `null` value will get passed
    into the ValueConverter. Only if said converter returns null will `TargetNullValue`
    be used. If the ValueConverter were to return a non-null value, `TargetNullValue`
    would not be used. While it is possible to define `TargetNullValue` as `StaticResource`
    or use the `x:Static Markup Extension` to assign it a static value, it is not
    possible to set its value with a binding expression.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 并非太复杂，对吧？当涉及到 ValueConverter 时，事情会变得稍微复杂一些。如果绑定的属性是 `null`，则此 `null` 值将被传递给
    ValueConverter。只有当转换器返回 `null` 时，才会使用 `TargetNullValue`。如果 ValueConverter 返回非空值，则不会使用
    `TargetNullValue`。虽然可以将 `TargetNullValue` 定义为 `StaticResource` 或使用 `x:Static Markup
    Extension` 来分配一个静态值，但无法使用绑定表达式设置其值。
- en: 'Looking at the `AverageRating` property of `RecipeRatingsSummaryViewModel`,
    we could assign this a null value by default and update the `TextColor` binding
    statements to this:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 查看 `RecipeRatingsSummaryViewModel` 的 `AverageRating` 属性，我们可以将其默认值设置为 `null`
    并更新 `TextColor` 绑定语句：
- en: '[PRE27]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: public object Convert(object value, Type targetType, object
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: public object Convert(object value, Type targetType, object
- en: parameter, CultureInfo culture)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: parameter, CultureInfo culture)
- en: '{'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: var hex = value switch
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: var hex = value switch
- en: '{'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '...'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: _ => "#EBEBEB"
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: _ => "#EBEBEB"
- en: '};'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: return Color.FromArgb(hex);
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: return Color.FromArgb(hex);
- en: '}'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE28]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <Label FontSize="8"
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: <Label FontSize="8"
- en: Text="{Binding RatingDetail.AverageRating,
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Text="{Binding RatingDetail.AverageRating,
- en: StringFormat='{0:0.#} avg. rating',
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: StringFormat='{0:0.#} avg. rating',
- en: Label class displaying "Ratings not available" when the binding engine is unable
    to resolve the RatingDetail.AverageRating property. Just like with the TargetNullValue
    property, when FallbackValue is being used, the StringFormat property will be
    ignored. Additionally, a converter defined on this binding statement would also
    be ignored when using the FallbackValue value.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: Label 类在绑定引擎无法解析 RatingDetail.AverageRating 属性时显示 "Ratings not available"。就像
    TargetNullValue 属性一样，当使用 FallbackValue 时，StringFormat 属性将被忽略。此外，当使用 FallbackValue
    值时，此绑定语句上定义的转换器也将被忽略。
- en: 'If we wish to combine the two, both `TargetNullValue` and `FallbackValue`,
    we could do the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望结合使用 `TargetNullValue` 和 `FallbackValue`，我们可以这样做：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <HorizontalStackLayout>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: <HorizontalStackLayout>
- en: <Label Text="Show extended allergen list?"
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: <Label Text="显示扩展过敏原列表？"
- en: VerticalOptions="Center" />
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: VerticalOptions="Center" />
- en: <CheckBox x:Name="cbShowAllergens" IsChecked="False" />
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <CheckBox x:Name="cbShowAllergens" IsChecked="False" />
- en: </HorizontalStackLayout>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: </HorizontalStackLayout>
- en: <VerticalStackLayout Margin="10,0,0,0" IsVisible="{Binding
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <VerticalStackLayout Margin="10,0,0,0" IsVisible="{Binding
- en: IsChecked, Source={Reference cbShowAllergens}}">
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: IsChecked, Source={Reference cbShowAllergens}}">
- en: <Label Text="ToDo, add extended allergen list" />
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: <Label Text="待办，添加扩展过敏原列表" />
- en: </VerticalStackLayout>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: </VerticalStackLayout>
- en: '[PRE30]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: <Button
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: <Button
- en: Command="{Binding AddAsFavoriteCommand}"
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Command="{Binding AddAsFavoriteCommand}"
- en: IsVisible="{Binding IsEnabled, Source={RelativeSource
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: IsVisible="{Binding IsEnabled, Source={RelativeSource
- en: Self}}"
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: Self}}"
- en: Text="Add as favorite" />
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Text="添加为收藏" />
- en: '[PRE31]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: <Button
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: <Button
- en: BackgroundColor="LightSlateGray"
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: BackgroundColor="LightSlateGray"
- en: '...'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: TextColor="{Binding BackgroundColor,
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: TextColor="{Binding BackgroundColor,
- en: Source={RelativeSource AncestorLevel=2,
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: Source={RelativeSource AncestorLevel=2,
- en: TextColor property of the button is now bound to the BackgroundColor property
    of its second ancestor (AncestorLevel=2), which is of the VerticalStackLayout
    type (AncestorType={x:Type VerticalStackLayout}). Keep in mind that whenever the
    structure of the page changes, there might be no other ancestor of this type at
    the second level.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的`TextColor`属性现在绑定到其第二个祖先（`AncestorLevel=2`）的`BackgroundColor`属性，该祖先为`VerticalStackLayout`类型（`AncestorType={x:Type
    VerticalStackLayout}`）。请注意，当页面结构发生变化时，第二级可能没有其他此类祖先。
- en: TemplatedParent relative binding mode
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: TemplatedParent relative binding mode
- en: A `Control Template` is an XAML markup snippet that defines how a control should
    be rendered. When you’re inside a control template, you can use `TemplatedParent`
    to bind to the properties of the control that’s using the template. We will dive
    into this in more detail in [*Chapter 11*](B20941_11.xhtml#_idTextAnchor182),
    *Creating* *MVVM-Friendly Controls*.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`Control Template`是一个XAML标记片段，它定义了控件应该如何渲染。当您处于控件模板内部时，您可以使用`TemplatedParent`来绑定到使用该模板的控件的属性。我们将在[*第
    11 章*](B20941_11.xhtml#_idTextAnchor182)中更详细地探讨这一点，*创建* *MVVM-Friendly Controls*。'
- en: Relative bindings in XAML offer a powerful way to connect properties of different
    elements within our user interface. One of its strongest aspects is its ability
    to traverse up the visual tree, enabling access to binding contexts of other elements.
    This feature becomes especially useful when the current element’s binding context
    isn’t sufficient or when we need to link a property to an element outside of its
    immediate scope.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Relative bindings in XAML offer a powerful way to connect properties of different
    elements within our user interface. One of its strongest aspects is its ability
    to traverse up the visual tree, enabling access to binding contexts of other elements.
    This feature becomes especially useful when the current element’s binding context
    isn’t sufficient or when we need to link a property to an element outside of its
    immediate scope.
- en: In many UI scenarios, a certain state is defined by a combination of multiple
    properties. While it’s certainly possible to create an additional property in
    the ViewModel that aggregates these properties for binding, there is a better,
    more elegant way to deal with this. Let’s have a look at multi-bindings.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多UI场景中，某种状态是由多个属性的组合定义的。虽然当然可以在ViewModel中创建一个额外的属性来聚合这些属性以进行绑定，但有一种更好、更优雅的方式来处理这种情况。让我们看看多绑定。
- en: Multi-bindings
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Multi-bindings
- en: Multi-binding is a powerful feature in XAML data binding that allows you to
    bind a single target property to multiple source properties and then apply logic
    to produce one single value. This technique is particularly useful when a target
    property’s value depends on more than one source property. The simplest example
    of this is using `StringFormat`.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 多绑定是XAML数据绑定中的一个强大功能，它允许您将单个目标属性绑定到多个源属性，然后应用逻辑以产生一个单一值。这种技术在目标属性值依赖于多个源属性时特别有用。这个最简单的例子就是使用`StringFormat`。
- en: Multi-binding StringFormat
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Multi-binding StringFormat
- en: A typical multi-binding scenario is where you would like to display multiple
    values in one label. We could, of course, create a property on the ViewModel that
    concatenates those values, or we could define this as a Multi-binding with `StringFormat`.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 一个典型的多绑定场景是您希望在单个标签中显示多个值。我们当然可以在ViewModel上创建一个属性来连接这些值，或者我们可以定义一个使用`StringFormat`的多绑定。
- en: 'As an example, we want to show the author of the recipe next to the **Last
    updated** timestamp that we already have on our page (*Figure 4**.9*):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们想在页面上已经有的**最后更新**时间戳旁边显示食谱的作者（*图 4**.9*）：
- en: '![Figure 4.9: Showing the author next to the Last updated timestamp](img/B20941_04_09.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.9：显示作者与最后更新时间戳并排](img/B20941_04_09.jpg)'
- en: 'Figure 4.9: Showing the author next to the Last updated timestamp'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.9：显示作者与最后更新时间戳并排
- en: 'Here’s how it’s done:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是如何实现的：
- en: 'First, let’s add an `Author` property to our ViewModel:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们在我们的ViewModel中添加一个`Author`属性：
- en: '[PRE32]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '2.  Next, replace the label that shows the `LastModified` timestamp with the
    following:'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.  接下来，将显示`LastModified`时间戳的标签替换为以下内容：
- en: '[PRE33]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `MultiBinding` class allows us to set multiple bindings. The `StringFormat`
    property of `MultiBinding` allows us to construct a single string value from multiple
    bindings. This operates much like the `string.Format` method, utilizing different
    placeholders (`{0}`, `{1}`, `{2}`, and so on) that correspond to each binding.
    This makes it easier to construct complex string values from multiple data sources.
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`MultiBinding` 类允许我们设置多个绑定。`MultiBinding` 的 `StringFormat` 属性允许我们从多个绑定中构建一个单一的字符串值。这类似于
    `string.Format` 方法，使用不同的占位符（`{0}`、`{1}`、`{2}` 以及如此等等）对应于每个绑定。这使得从多个数据源构建复杂的字符串值变得更加容易。'
- en: Binding properties
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 绑定属性
- en: What you define as `Binding` inside `MultiBinding` is the same thing as `Binding
    Markup Extension`, which we used in our data bindings previously. It has properties
    such as `Converter`, `ConverterParameter`, `StringFormat`, `TargetNullValue`,
    `FallbackValue`, and others that can be individually configured for each `Binding`
    within `MultiBinding`, allowing for fine-grained control over each component of
    `MultiBinding`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `MultiBinding` 中定义的 `Binding` 与我们之前在数据绑定中使用的 `Binding Markup Extension` 是同一回事。它具有
    `Converter`、`ConverterParameter`、`StringFormat`、`TargetNullValue`、`FallbackValue`
    等属性，可以为 `MultiBinding` 中的每个 `Binding` 单独配置，从而实现对 `MultiBinding` 每个组件的精细控制。
- en: Multi-binding goes beyond just concatenating strings in a specific format. Let’s
    have a look at the `Converter` property of `MultiBinding`.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 多绑定不仅限于以特定格式连接字符串。让我们看看 `MultiBinding` 的 `Converter` 属性。
- en: IMultiValueConverter
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: IMultiValueConverter
- en: The `MultiBinding` class has a property called `Converter` that’s of the `Microsoft.Maui.Controls.IMultiValueConverter`
    type. This interface is similar to `IValueConverter` but with a significant distinction.
    The `Convert` method in `IMultiValueConverter` accepts an array of objects, representing
    all the individual bound values, rather than a single object as in `IValueConverter`.
    Likewise, the `ConvertBack` method of `IMultiValueConverter` returns an array
    of objects, not just one.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`MultiBinding` 类有一个名为 `Converter` 的属性，其类型为 `Microsoft.Maui.Controls.IMultiValueConverter`。此接口类似于
    `IValueConverter`，但有一个显著的区别。`IMultiValueConverter` 中的 `Convert` 方法接受一个对象数组，代表所有单独绑定的值，而不是像
    `IValueConverter` 中的单个对象。同样，`IMultiValueConverter` 的 `ConvertBack` 方法返回一个对象数组，而不是单个对象。'
- en: 'Let’s update the `RatingIndicator` in `RecipeDetailView`. The colors of the
    stars should not only depend on the average rating but also the total of reviews.
    If the recipe has less than 15 reviews, we’ll show a generic default color. Only
    when the recipes have more reviews will we use the color scale we used earlier.
    To make that work, we’ll use `MultiBinding` to bind to both `AverageRating` and
    `TotalReviews` from `RecipeRatingsSummaryViewModel` and `IMultiValueConverter`
    to decide the color of the stars:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新 `RecipeDetailView` 中的 `RatingIndicator`。星星的颜色不仅应取决于平均评分，还应取决于评论总数。如果食谱的评论少于
    15 条，我们将显示一个通用的默认颜色。只有当食谱有更多评论时，我们才会使用之前使用的颜色刻度。为了实现这一点，我们将使用 `MultiBinding` 来绑定
    `RecipeRatingsSummaryViewModel` 中的 `AverageRating` 和 `TotalReviews`，并使用 `IMultiValueConverter`
    来决定星星的颜色：
- en: 'To start with, we need to add an additional property called `TotalReviews`
    to our `RecipeRatingsSummaryViewModel`:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要向我们的 `RecipeRatingsSummaryViewModel` 添加一个额外的属性，名为 `TotalReviews`：
- en: '[PRE34]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 2.  Next, we can create the `RatingAndReviewsToColorConverter` class, which
    implements the `IMultiValueConverter` interface. For that, we need to right-click
    the `Converter` folder, select **Add** | **Class…**, and enter the name of the
    converter.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 2.  接下来，我们可以创建一个名为 `RatingAndReviewsToColorConverter` 的类，该类实现了 `IMultiValueConverter`
    接口。为此，我们需要在 `Converter` 文件夹上右键点击，选择 **添加** | **类…**，并输入转换器的名称。
- en: 'Make the class implement `IMultiValueConverter` and add the following code
    to the `Convert` method:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使类实现 `IMultiValueConverter` 并将以下代码添加到 `Convert` 方法中：
- en: '[PRE35]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this `Convert` method, we have access to the array of bound values. This
    allows us to write logic by taking every given value into account. In this scenario,
    we are expecting the total number of reviews to be the first value and the rating
    to be the second.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在这个 `Convert` 方法中，我们可以访问绑定的值数组。这允许我们通过考虑每个给定的值来编写逻辑。在这种情况下，我们期望总评论数是第一个值，而评分是第二个值。
- en: 4.  Now, we can add this converter as a resource to our `RecipeDetailPage`,
    just like we did before with other ValueConverters.
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 4.  现在，我们可以将此转换器作为资源添加到我们的 `RecipeDetailPage` 中，就像我们之前对其他 ValueConverters 所做的那样。
- en: '[PRE36]'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '5.  Finally, we can use `RatingAndReviewsToColorConverter` in a `MultiBinding`
    class on the `Label` class’s `TextColor` property:'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 5.  最后，我们可以在 `Label` 类的 `TextColor` 属性上的 `MultiBinding` 类中使用 `RatingAndReviewsToColorConverter`，就像我们之前在其他
    ValueConverters 上所做的那样。
- en: '[PRE37]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '`IMultiValueConverter`, in conjunction with `MultiBinding`, offers a dynamic
    and flexible approach to dealing with complex binding scenarios. By accepting
    an array of inputs and processing them into a singular output, it allows us to
    handle multi-source dependencies in our UI.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`IMultiValueConverter`与`MultiBinding`结合使用，提供了一种动态且灵活的方法来处理复杂的绑定场景。通过接受一个输入数组并将它们处理成一个单一输出，它允许我们处理UI中的多源依赖关系。'
- en: The last thing we need to look into in the context of data binding is compiled
    bindings. This feature appears to be a little less known, despite it having a
    lot of advantages.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在数据绑定的背景下，我们需要关注的是编译绑定。尽管这个特性有很多优点，但它似乎并不那么为人所知。
- en: Compiled bindings
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 编译绑定
- en: Compiled bindings are a more performant way of creating bindings and they are
    verified at compile-time instead of at runtime. Typically, the data binding engine
    uses reflection to get or set property values on the objects being bound. This
    approach is flexible and powerful because it allows the binding engine to interact
    with any object, regardless of its type. However, it also has some performance
    implications because reflection is slower than direct property access, and it
    can lead to errors that are only detectable at runtime if a property name is misspelled
    or if the property doesn’t exist. In contrast, compiled bindings are checked at
    compile time, which means they can catch errors before the app is even run. Furthermore,
    because the bindings are compiled into the app, the runtime performance is improved
    as there’s no need for the binding resolution process that takes place with traditional
    data binding.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 编译绑定是创建绑定的一种更高效的方式，它们在编译时而不是在运行时进行验证。通常，数据绑定引擎使用反射来获取或设置绑定对象上的属性值。这种方法既灵活又强大，因为它允许绑定引擎与任何类型的对象交互。然而，它也有一些性能影响，因为反射比直接属性访问要慢，并且可能导致仅在运行时才能检测到的错误，例如属性名拼写错误或属性不存在。相比之下，编译绑定在编译时进行检查，这意味着它们可以在应用程序运行之前捕获错误。此外，因为绑定被编译到应用程序中，所以运行时性能得到了提高，因为不需要进行传统数据绑定中发生的绑定解析过程。
- en: 'Enabling compiled bindings is pretty simple: with the `x:DataType` attribute,
    we can specify the type of the object that the XAML element and its children will
    bind to. So, basically, on our `RecipeDetailPage`, we could add the following:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 启用编译绑定相当简单：使用`x:DataType`属性，我们可以指定XAML元素及其子元素将要绑定的对象类型。因此，基本上，在我们的`RecipeDetailPage`中，我们可以添加以下内容：
- en: '[PRE38]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: With this, we indicate that the type of `BindingContext` will be `Recipes.Client.Core.ViewModels.RecipeDetailViewModel`,
    enabling the XAML compiler to validate bindings at compile time.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们表明`BindingContext`的类型将是`Recipes.Client.Core.ViewModels.RecipeDetailViewModel`，从而使得XAML编译器能够在编译时验证绑定。
- en: 'However, there is a caveat that will prevent us from compiling and running
    the application from the bat. In our existing XAML code, we’ve explicitly set
    `BindingContext` of `HorizontalStackLayout` to the `IngredientsList` property.
    This confuses the XAML compiler as it assumes elements inside `HorizontalStackLayout`
    are still bound to `RecipeDetailViewModel`, which isn’t the case. This misunderstanding
    results in an error message in Visual Studio (*Figure 4**.10*). This error message
    is evidence that, by adding the `x:DataType` attribute, bindings are now validated
    and compiled:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个需要注意的问题，它将阻止我们从批处理文件中编译和运行应用程序。在我们的现有XAML代码中，我们已经明确地将`HorizontalStackLayout`的`BindingContext`设置为`IngredientsList`属性。这会让XAML编译器产生混淆，因为它假设`HorizontalStackLayout`内的元素仍然绑定到`RecipeDetailViewModel`，但实际上并非如此。这种误解导致在Visual
    Studio中出现了错误消息（*图4**.10*）。这个错误消息是证据，表明通过添加`x:DataType`属性，绑定现在在编译时得到了验证和编译：
- en: '![Figure 4.10: Binding error](img/B20941_04_10.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![图4.10：绑定错误](img/B20941_04_10.jpg)'
- en: 'Figure 4.10: Binding error'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.10：绑定错误
- en: 'Sadly, fixing this error might not be as straightforward as you might think:
    it’s not only adding setting the `x:DataType` attribute on `VerticalStackLayout`
    to `IngredientsListViewModel` – the binding itself also needs to be updated:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 很遗憾，修复这个错误可能不像你想象的那么简单：不仅需要在`VerticalStackLayout`上设置`x:DataType`属性为`IngredientsListViewModel`，绑定本身也需要更新：
- en: '[PRE39]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'With these adjustments in place, we can build and run our app as before. But
    now, our app benefits from the performance improvements of compiled bindings.
    Need more proof that bindings are now compiled? Try misspelling the name of a
    bound property in a binding statement. As shown in *Figure 4**.11*, Visual Studio
    will promptly alert you about the nonexistent property:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些调整到位后，我们可以像以前一样构建和运行我们的应用。但现在，我们的应用受益于编译绑定的性能改进。需要更多证据证明绑定现在是编译的吗？尝试在绑定语句中拼写一个绑定属性的名称。如图
    *图 4.11* 所示，Visual Studio 将会立即提醒你关于不存在属性的警告：
- en: '![Figure 4.11: Property not found on the specified type](img/B20941_04_11.jpg)'
  id: totrans-256
  prefs: []
  type: TYPE_IMG
  zh: '![图 4.11：在指定类型上找不到属性](img/B20941_04_11.jpg)'
- en: 'Figure 4.11: Property not found on the specified type'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 图 4.11：在指定类型上找不到属性
- en: Compiled bindings give you design-time checks and will even give you IntelliSense
    when writing binding statements. But most importantly, they also lead to faster
    page load times and better app performance overall.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 编译绑定提供了设计时检查，甚至在编写绑定语句时还会提供智能感知。但最重要的是，它们还能导致页面加载时间更快，整体应用性能更好。
- en: Summary
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: Data binding is a powerful concept in XAML that makes it easier to separate
    our view logic from our business logic. It’s a huge enabler for doing MVVM in
    .NET MAUI. It is a complex subject and it can be challenging to fully master every
    aspect of it. It involves understanding a variety of concepts and techniques,
    from simple data bindings to multi-bindings and converters, and from element and
    relative bindings to high-performance compiled bindings.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 数据绑定是 XAML 中的一个强大概念，它使得将我们的视图逻辑与业务逻辑分离变得更加容易。它是实现 .NET MAUI 中的 MVVM 的一个巨大推动力。这是一个复杂的话题，完全掌握它的各个方面可能会具有挑战性。它涉及到理解各种概念和技术，从简单的数据绑定到多绑定和转换器，以及从元素和相对绑定到高性能编译绑定。
- en: However, don’t be overwhelmed. Like any complex subject, understanding data
    binding comes with time and practice. The more you work with it, the more comfortable
    you’ll become, and many aspects of it will eventually become second nature.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，不要感到不知所措。就像任何复杂的主题一样，理解数据绑定需要时间和实践。你越是用它工作，就会越感到舒适，许多方面最终会变得像本能一样。
- en: Remember, the ultimate objective is to efficiently apply the MVVM pattern. In
    this context, data binding plays a crucial role in connecting your ViewModel’s
    data and business logic with the UI. The knowledge you’ve gathered in this chapter
    has brought you one step closer to that goal.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，最终目标是高效地应用 MVVM 模式。在这种情况下，数据绑定在连接 ViewModel 的数据和业务逻辑与 UI 之间发挥着关键作用。你在本章中学到的知识让你离这个目标更近了一步。
- en: In the next chapter, we’ll be looking at community toolkits that can facilitate
    implementing the MVVM pattern in .NET MAUI.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨可以促进在 .NET MAUI 中实现 MVVM 模式的社区工具包。
- en: Further reading
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'To learn more about the topics that were covered in this chapter, take a look
    at the following resources:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于本章所涵盖的主题，请查看以下资源：
- en: '*Multi-binding*: [https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/multibinding](https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/multibinding)'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多绑定*：[https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/multibinding](https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/multibinding)'
- en: '*Relative* *bindings*: [https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/relative-bindings](https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/relative-bindings)'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*相对* *绑定*：[https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/relative-bindings](https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/relative-bindings)'
- en: '*Compiled* *bindings*: [https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings](https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编译* *绑定*：[https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings](https://learn.microsoft.com/dotnet/maui/fundamentals/data-binding/compiled-bindings)'
- en: '[PRE40]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
