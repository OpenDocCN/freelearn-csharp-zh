["```cs\ndotnet new mstest\n```", "```cs\npublic class WeatherAnalysisServiceTests\n{\n    …\n    public WeatherAnalysisServiceTests()\n    {\n        _sut = new (_openWeatherServiceMock);\n    }\n    [Fact]\n    public async Task GetForecastWeatherAnalysis_\n        LatAndLonPassed_ReceivedByOpenWeatherAccurately()\n        …\n        // Assert\n        Assert.Equal(LAT, actualLat);\n        Assert.Equal(LON, actualLon);\n    }\n    …\n```", "```cs\n[TestClass]\npublic class WeatherAnalysisServiceTests\n{\n    …\n    [TestInitialize]\n    public void TestInitialize()\n    {\n        _sut = new(_openWeatherServiceMock);\n    }\n    [TestMethod]\n    public async Task GetForecastWeatherAnalysis_\n      LatAndLonPassed_ReceivedByOpenWeatherAccurately()\n    {\n        …\n        // Assert\n        Assert.AreEqual(LAT, actualLat);\n        Assert.AreEqual(LON, actualLon);\n    }\n    …\n```", "```cs\n[Theory]\n[InlineData(\"Freezing\", -1)]\n[InlineData(\"Scorching\", 46)]\npublic async Task GetForecastWeatherAnalysis_\n   Summary_MatchesTemp(string summary, double temp)\n{\n…\n```", "```cs\n[DataTestMethod]\n[DataRow(\"Freezing\", -1)]\n[DataRow(\"Scorching\", 46)]\npublic async Task GetForecastWeatherAnalysis_\n   Summary_MatchesTemp(string summary, double temp)\n{\n…\n```", "```cs\ndotnet new nunit\n```", "```cs\npublic class WeatherAnalysisServiceTests\n{\n    …\n    public WeatherAnalysisServiceTests()\n    {\n        _sut = new (_openWeatherServiceMock);\n    }\n    [Fact]\n    public async Task GetForecastWeatherAnalysis_\n        LatAndLonPassed_ReceivedByOpenWeatherAccurately()\n        …\n        // Assert\n        Assert.Equal(LAT, actualLat);\n        Assert.Equal(LON, actualLon);\n    }\n    …\n```", "```cs\npublic class WeatherAnalysisServiceTests\n{\n    …\n    [Setup]\n    public void Setup()\n    {\n        _sut = new(_openWeatherServiceMock);\n    }\n    [Test]\n    public async Task GetForecastWeatherAnalysis_\n      LatAndLonPassed_ReceivedByOpenWeatherAccurately()\n    {\n        …\n        // Assert\n        Assert.That(actualLat, Is.EqualTo(LAT));\n        Assert.That(actualLon, Is.EqualTo(LON));\n    }\n    …\n```", "```cs\n[Theory]\n[InlineData(\"Freezing\", -1)]\n[InlineData(\"Scorching\", 46)]\npublic async Task GetForecastWeatherAnalysis_\n   Summary_MatchesTemp(string summary, double temp)\n{\n…\n```", "```cs\n[Theory]\n[TestCase(\"Freezing\", -1)]\n[TestCase(\"Scorching\", 46)]\npublic async Task GetForecastWeatherAnalysis_\n   Summary_MatchesTemp(string summary, double temp)\n{\n…\n```", "```cs\nprivate IOpenWeatherService _openWeatherServiceMock = \n    Substitute.For<IOpenWeatherService>();\nprivate WeatherAnalysisService _sut;\nprivate const decimal LAT = 2.2m;\nprivate const decimal LON = 1.1m;\npublic WeatherAnalysisServiceTests()\n{\n    _sut = new (_openWeatherServiceMock);\n}\n[Fact]\npublic async Task GetForecastWeatherAnalysis_\n    LatAndLonPassed_ReceivedByOpenWeatherAccurately()\n{\n    // Arrange\n    decimal actualLat = 0;\n    decimal actualLon = 0;\n    _openWeatherServiceMock.OneCallAsync(\n        Arg.Do<decimal>(x => actualLat = x),\n        Arg.Do<decimal>(x => actualLon = x),\n        Arg.Any<IEnumerable<Excludes>>(), \n        Arg.Any<Units>())\n       .Returns(Task.FromResult(GetSample(_defaultTemps)));\n    // Act\n    await _sut.GetForecastWeatherAnalysis(LAT, LON);\n    // Assert\n    Assert.Equal(LAT, actualLat);\n    Assert.Equal(LON, actualLon);\n}\n```", "```cs\nprivate IOpenWeatherService _openWeatherServiceMock = \n    Mock.Of<IOpenWeatherService>();\nprivate WeatherAnalysisService _sut;\nprivate const decimal LAT = 2.2m;\nprivate const decimal LON = 1.1m;\npublic WeatherAnalysisServiceTests()\n{\n    _sut = new (_openWeatherServiceMock);\n}\n[Fact]\npublic async Task GetForecastWeatherAnalysis_\n    LatAndLonPassed_ReceivedByOpenWeatherAccurately()\n{\n    // Arrange\n    decimal actualLat = 0;\n    decimal actualLon = 0;\n    Mock.Get(_openWeatherServiceMock)\n        .Setup(x => x.OneCallAsync(It.IsAny<decimal>(),\n        It.IsAny<decimal>(), \n        It.IsAny<IEnumerable<Excludes>>(),\n        It.IsAny<Units>()))\n        .Callback<decimal, decimal, \n        IEnumerable<Excludes>, Units>((lat, lon, _, _) => {\n            actualLat = lat; actualLon = lon; })\n       .Returns(Task.FromResult(GetSample(_defaultTemps)));\n    // Act\n    await _sut.GetForecastWeatherAnalysis(LAT, LON);\n    // Assert\n    Assert.Equal(LAT, actualLat);\n    Assert.Equal(LON, actualLon);\n}\n```", "```cs\nIs.Equal.To(…);\n```", "```cs\n// Without\nAssert.Equal(LAT, actualLat);\n// With\nactualLat.Should().Be(LAT);\n```", "```cs\n// Arrange\nstring actual = \"Hi Madam, I am Adam\";\n// Assert actual.Should().StartWith(\"Hi\")\n    .And.EndWith(\"Adam\")\n    .And.Contain(\"Madam\")\n    .And.HaveLength(19);\n```", "```cs\n// Arrange\nvar integers = new int[] { 1, 2, 3 };\n// Assert\nintegers.Should().OnlyContain(x => x >= 0);\nintegers.Should().HaveCount(10, \n  \"The set does not contain the right number of elements\");\n```", "```cs\npublic record OneCallResponse\n{\n    public double Lat { get; set; }\n    public double Lon { get; set; }\n    …\n    public Daily[] Daily { get; set; }\n}\npublic record Daily\n{\n    public DateTime Dt { get; set; }\n    public Temp Temp { get; set; }\n    …\n}\n// More classes\n```", "```cs\nvar oneCallResponse = _fixture.Create<OneCallResponse>();\n```", "```cs\n{OneCallResponse { Lat = 186, Lon = 231, Timezone = Timezone9d27503a-a90d-40a6-a9ac-99873284edef, TimezoneOffset = 177, Daily = Uqs.WeatherForecaster.Daily[] }}\n    Daily: {Uqs.WeatherForecaster.Daily[3]}\n    EqualityContract: {Name = \"OneCallResponse\" FullName = \n        \"Uqs.WeatherForecaster.OneCallResponse\"}\n    Lat: 186\n    Lon: 231\n    Timezone: \"Timezone9d27503a-a90d-40a6-a9ac-99873284edef\"\n    TimezoneOffset: 177\n```", "```cs\nvar oneCallResponse = _fixture.Build<OneCallResponse>()\n  .With(x => x.Daily,_fixture.CreateMany<Daily>(8).ToArray())\n  .Create(); \n```", "```cs\nhttps://api.openweathermap.org/data/2.5/onecall?\n  lat=51.4810&lon=0.0052&appid=[yourapikey]\n```", "```cs\n{\n   \"lat\":51.481,\n   \"lon\":0.0052,\n   \"timezone\":\"Europe/London\",\n   \"timezone_offset\":3600,\n   \"current\":{\n      \"dt\":1660732533,\n      \"sunrise\":1660711716,\n      \"sunset\":1660763992,\n      \"temp\":295.63,\n      \"feels_like\":295.76,\n      \"pressure\":1011,\n      \"humidity\":70,\n…\n```", "```cs\npublic class ClientTests\n{\n    private const string ONECALL_BASE_URL = \n      \"https://api.openweathermap.org/data/2.5/onecall\";\n    private const string FAKE_KEY = \"thisisafakeapikey\";\n    private const decimal GREENWICH_LATITUDE = 51.4769m;\n    private const decimal GREENWICH_LONGITUDE = 0.0005m;\n    [Fact]\n    public async Task \n    OneCallAsync_LatAndLonPassed_UrlIsFormattedAsExpected()\n    {\n        // Arrange\n        var httpClient = new HttpClient();\n        var client = new Client(FAKE_KEY, httpClient);\n        // Act\n        var oneCallResponse = await\n            client.OneCallAsync(GREENWICH_LATITUDE,   \n            GREENWICH_LONGITUDE);\n        // Assert\n        // will need access to the generated URL\n    }\n}\n```", "```cs\npublic class FakeHttpMessageHandler : HttpMessageHandler\n{\n    private HttpResponseMessage _fakeHttpResponseMessage;\n    public FakeHttpMessageHandler(\n        HttpResponseMessage responseMessage)\n    {\n        _fakeHttpResponseMessage = responseMessage;\n    }\n    protected override Task<HttpResponseMessage> \n        SendAsync(HttpRequestMessage request, \n        CancellationToken cancellationToken)\n    => SendSpyAsync(request, cancellationToken);\n\n    public virtual Task<HttpResponseMessage> \n        SendSpyAsync(HttpRequestMessage request,\n        CancellationToken cancellationToken)\n    => Task.FromResult(_fakeHttpResponseMessage);\n}\n```", "```cs\n// Arrange\nvar httpResponseMessage = new HttpResponseMessage()\n{\n    StatusCode = HttpStatusCode.OK,\n    Content = new StringContent(\"{}\")\n};\nvar fakeHttpMessageHandler = Substitute.ForPartsOf\n    <FakeHttpMessageHandler>(httpResponseMessage);\nHttpRequestMessage? actualReqMessage = null;\nfakeHttpMessageHandler.SendSpyAsync(\n    Arg.Do<HttpRequestMessage>(x => actualReqMessage = x), \n    Arg.Any<CancellationToken>())\n    .Returns(Task.FromResult(httpResponseMessage));\nvar fakeHttpClient = new \n  HttpClient(fakeHttpMessageHandler);\nvar client = new Client(FAKE_KEY, fakeHttpClient);\n```", "```cs\nstring actualUrl = actualHttpRequestMessage!.RequestUri!\n    .AbsoluteUri.ToString();\nAssert.Contains(ONECALL_BASE_URL, actualUrl);\nAssert.Contains($\"lat={GREENWICH_LATITUDE}\", actualUrl);\nAssert.Contains($\"lon={GREENWICH_LONGITUDE}\", actualUrl);\n```", "```cs\npublic class Client\n{\n    …\n    public async Task<OneCallResponse> OneCallAsync(\n        decimal latitude, decimal longitude)\n    {\n        const string ONECALL_URL_TEMPLATE = \"/onecall\";\n        var uriBuilder = new UriBuilder(\n          BASE_URL + ONECALL_URL_TEMPLATE);\n        var query = HttpUtility.ParseQueryString(\"\");\n        query[\"lat\"] = latitude.ToString();\n        query[\"lon\"] = longitude.ToString();\n        query[\"appid\"] = _apiKey;\n        uriBuilder.Query = query.ToString();\n        var _ = await _httpClient\n            .GetStringAsync(uriBuilder.Uri.AbsoluteUri);\n        return new OneCallResponse();\n    }\n}\n```"]