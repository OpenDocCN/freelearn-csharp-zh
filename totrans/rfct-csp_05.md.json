["```cs\npublic interface IFlightInfo {\n  // Details omitted....\n}\npublic class PassengerFlightInfo : IFlightInfo {\n  // Details omitted...\n}\npublic class FreightFlightInfo : IFlightInfo {\n  // Details omitted...\n}\n```", "```cs\nnamespace Packt.CloudySkiesAir.Chapter5.AirTravel;\npublic class Airport {\n  public string Country { get; set; }\n  public string Code { get; set; }\n  public string Name { get; set; }\n}\n```", "```cs\nnamespace Packt.CloudySkiesAir.Chapter5.AirTravel;\npublic class Airport {\n  public string Country { get; set; }\n  public string Code { get; set; }\n  public string Name { get; set; }\n}\n```", "```cs\npublic partial class FlightScheduler {\n  // Details omitted...\n}\n```", "```cs\npublic string BuildFlightIdentifier() =>\n  $\"{Id} {DepartureLocation.Code}-\" +\n  $\"{ArrivalLocation.Code} carrying \" +\n  $\"{Cargo} for {CharterCompany}\";\n```", "```cs\npublic string BuildFlightIdentifier() =>\n  $\"{Id} {DepartureLocation}-{ArrivalLocation} \" +\n  $\"carrying {Cargo} for {CharterCompany}\";\n```", "```cs\npublic class Airport {\n  public string Country { get; set; }\n  public string Code { get; set; }\n  public string Name { get; set; }\n  public override string? ToString() => Code;\n}\n```", "```cs\npublic string BuildFlightIdentifier() =>\n  $\"{Id} {DepartureLocation}-{ArrivalLocation} \" +\n  $\"carrying {_passengers} people\";\n```", "```cs\nif (depart != null) {\n  results = results.Where(f =>\n    f.DepartureLocation.Code == depart.Code &&\n    f.DepartureLocation.Country == depart.Country\n  );\n}\nif (arrive != null) {\n  results = results.Where(f =>\n    f.ArrivalLocation.Code == arrive.Code &&\n    f.ArrivalLocation.Country == arrive.Country\n  );\n}\n```", "```cs\npublic class Airport {\n  public string Country { get; set; }\n  public string Code { get; set; }\n  public string Name { get; set; }\n  public override bool Equals(object? obj) {\n    return obj is Airport airport &&\n           Country == airport.Country &&\n           Code == airport.Code;\n}\n  public override int GetHashCode() {\n    return HashCode.Combine(Country, Code);\n  }\n  public override string? ToString() => Code;\n}\n```", "```cs\nif (depart != null) {\n  results=results.Where(f=> f.DepartureLocation == depart);\n}\nif (arrive != null) {\n  results=results.Where(f=> f.ArrivalLocation == arrive);\n}\n```", "```cs\npublic class FlightInfoBase {\n  public Airport ArrivalLocation { get; set; }\n  public DateTime ArrivalTime { get; set; }\n  public Airport DepartureLocation { get; set; }\n  public DateTime DepartureTime { get; set; }\n  public TimeSpan Duration => DepartureTime - ArrivalTime;\n  public string Id { get; set; }\n}\n```", "```cs\npublic class PassengerFlightInfo : FlightInfoBase,\n                                   IFlightInfo {\n  private int _passengers;\n  public void Load(int passengers) =>\n    _passengers = passengers;\n  public void Unload() =>\n    _passengers = 0;\n  public string BuildFlightIdentifier() =>\n    $\"{Id} {DepartureLocation}-{ArrivalLocation} carrying\"\n    + $\" {_passengers} people\";\n  public override string ToString() =>\n    BuildFlightIdentifier();\n}\n```", "```cs\npublic class FreightFlightInfo : FlightInfoBase,\n                                 IFlightInfo {\n  public string CharterCompany { get; set; }\n  public string Cargo { get; set; }\n  public string BuildFlightIdentifier() =>\n    $\"{Id} {DepartureLocation}-{ArrivalLocation} \" +\n    $\"carrying {Cargo} for {CharterCompany}\";\n  public override string ToString() =>\n    BuildFlightIdentifier();\n}\n```", "```cs\npublic class FlightInfoBase : IFlightInfo {\n  public Airport ArrivalLocation { get; set; }\n  public DateTime ArrivalTime { get; set; }\n  public Airport DepartureLocation { get; set; }\n  public DateTime DepartureTime { get; set; }\n  public TimeSpan Duration => DepartureTime – ArrivalTime;\n  public string Id { get; set; }\n}\n```", "```cs\nFlightInfoBase flight = new FlightInfoBase();\n```", "```cs\npublic abstract class FlightInfoBase : IFlightInfo {\n  public Airport ArrivalLocation { get; set; }\n  public DateTime ArrivalTime { get; set; }\n  public Airport DepartureLocation { get; set; }\n  public DateTime DepartureTime { get; set; }\n  public TimeSpan Duration => DepartureTime - ArrivalTime;\n  public string Id { get; set; }\n}\n```", "```cs\npublic abstract class FlightInfoBase : IFlightInfo {\n  // Other members omitted...\npublic abstract string BuildFlightIdentifier();\n  public override string ToString() =>\n    BuildFlightIdentifier();\n}\n```", "```cs\npublic class PassengerFlightInfo : FlightInfoBase {\n  // Other members omitted...\n  public override string BuildFlightIdentifier() =>\n    $\"{Id} {DepartureLocation}-{ArrivalLocation} carrying\"\n    + $\" {_passengers} people\";\n}\n```", "```cs\npublic class FreightFlightInfo : FlightInfoBase {\n  // Other members omitted...\n  public override string BuildFlightIdentifier() =>\n    $\"{Id} {DepartureLocation}-{ArrivalLocation} \" +\n    $\"carrying {Cargo} for {CharterCompany}\";\n}\n```", "```cs\npublic abstract string BuildFlightIdentifier();\n```", "```cs\n    public override string BuildFlightIdentifier() =>\n    ```", "```cs\n      $\"{Id} {DepartureLocation}-{ArrivalLocation}\n    ```", "```cs\n        carrying \" +\n    ```", "```cs\n      $\"{_passengers} people\";\n    ```", "```cs\n    public override string BuildFlightIdentifier() =>\n    ```", "```cs\n      $\"{Id} {DepartureLocation}-{ArrivalLocation}\n    ```", "```cs\n        carrying \" +\n    ```", "```cs\n      $\"{Cargo} for {CharterCompany}\";\n    ```", "```cs\npublic virtual string BuildFlightIdentifier() =>\n  $\"{Id} {DepartureLocation}-{ArrivalLocation}\";\n```", "```cs\n    public override string BuildFlightIdentifier() =>\n    ```", "```cs\n      base.BuildFlightIdentifier() +\n    ```", "```cs\n      $\" carrying {_passengers} people\";\n    ```", "```cs\n    public override string BuildFlightIdentifier() =>\n    ```", "```cs\n      base.BuildFlightIdentifier() +\n    ```", "```cs\n      $\" carrying {Cargo} for {CharterCompany}\";\n    ```", "```cs\npublic class PassengerFlightInfo : FlightInfoBase {\n  private int _passengers;\n  public void Load(int passengers) =>\n    _passengers = passengers;\n  public void Unload() =>\n    _passengers = 0;\n  public override string BuildFlightIdentifier() =>\n    base.BuildFlightIdentifier() +\n    $\" carrying {_passengers} people\";\n}\n```", "```cs\npublic sealed class PassengerFlightInfo : FlightInfoBase {\n  private int _passengers;\n  public int Passengers {\n    get => _passengers;\n    set => _passengers = value;\n  }\n  public void Load(int passengers) =>\n    Passengers = passengers;\n  public void Unload() =>\n    Passengers = 0;\n  public override string BuildFlightIdentifier() =>\n    base.BuildFlightIdentifier() +\n    $\" carrying {Passengers} people\";\n}\n```", "```cs\npublic IEnumerable<IFlightInfo> Search(\n  Airport? depart, Airport? arrive,\n  DateTime? minDepartTime, DateTime? maxDepartTime,\n  DateTime? minArriveTime, DateTime? maxArriveTime,\n  TimeSpan? minLength, TimeSpan? maxLength) {\n```", "```cs\nIEnumerable<IflightInfo> flights = scheduler.Search(cmh,\n  dfw, new DateTime(2024,3,1), new DateTime(2024,3,5),\n  new DateTime(2024,3,10), new DateTime(2024,3,13),\n  TimeSpan.FromHours(2.5), TimeSpan.FromHours(4.5));\n```", "```cs\npublic class FlightSearch {\n  public Airport? Depart { get; set; }\n  public Airport? Arrive { get; set; }\n  public DateTime? MinArrive { get; set; }\n  public DateTime? MaxArrive { get; set; }\n  public DateTime? MinDepart { get; set; }\n  public DateTime? MaxDepart { get; set; }\n  public TimeSpan? MinLength { get; set; }\n  public TimeSpan? MaxLength { get; set; }\n}\n```", "```cs\npublic IEnumerable<IFlightInfo> Search(FlightSearch s) {\n  IEnumerable<IFlightInfo> results = _flights;\n  if (s.Depart != null) {\n    results =\n      results.Where(f => f.DepartureLocation == s.Depart);\n  }\n  // Other filters omitted for brevity...\n  return results;\n}\n```", "```cs\n[Obsolete(\"Use the overload that takes a FlightSearch\")]\npublic IEnumerable<IFlightInfo> Search(\n  Airport? depart, Airport? arrive,\n  DateTime? minDepartTime, DateTime? maxDepartTime,\n  DateTime? minArriveTime, DateTime? maxArriveTime,\n  TimeSpan? minLength, TimeSpan? maxLength) {\n  FlightSearch searchParams = new() {\n    Arrive = arrive,\n    MinArrive = minArriveTime,\n    MaxArrive = maxArriveTime,\n    Depart = depart,\n    MinDepart = minDepartTime,\n    MaxDepart = maxDepartTime,\n    MinLength = minLength,\n    MaxLength = maxLength\n  };\n  return Search(searchParams);\n}\n```", "```cs\npublic abstract class FlightInfoBase : IFlightInfo {\n  public Airport ArrivalLocation { get; set; }\n  public DateTime ArrivalTime { get; set; }\n  public Airport DepartureLocation { get; set; }\n  public DateTime DepartureTime { get; set; }\n  // Other members omitted ...\n}\n```", "```cs\npublic class AirportEvent {\n  public Airport Location { get; set; }\n  public DateTime Time { get; set; }\n}\n```", "```cs\npublic abstract class FlightInfoBase : IFlightInfo {\n  public AirportEvent Arrival { get; set; }\n  public AirportEvent Departure { get; set; }\n  public TimeSpan Duration => Departure.Time-Arrival.Time;\n  public string Id { get; set; }\n  public virtual string BuildFlightIdentifier() =>\n    $\"{Id} {Departure.Location}-{Arrival.Location}\";\n  public sealed override string ToString() =>\n    BuildFlightIdentifier();\n}\n```", "```cs\npublic interface IFlightInfo {\n  string Id { get; }\n  AirportEvent Arrival { get; set; }\n  AirportEvent Departure { get; set; }\n  TimeSpan Duration { get; }\n}\n```", "```cs\nPassengerFlightInfo flight = new() {\n  Id = id,\n  ArrivalLocation = arrive,\n  ArrivalTime = arriveTime,\n  DepartureLocation = depart,\n  DepartureTime = departTime,\n};\n```", "```cs\nPassengerFlightInfo flight = new() {\n  Id = id,\n  Arrival = new AirportEvent {\n    Location = arrive,\n    Time = arriveTime,\n  },\n  Departure = new AirportEvent {\n    Location = depart,\n    Time = departTime,\n  },\n};\n```", "```cs\nif (s.Depart != null) {\n  results =\n    results.Where(f => f.DepartureLocation == s.Depart);\n}\n```", "```cs\nif (s.Depart != null) {\n  results =\n    results.Where(f => f.Departure.Location == s.Depart);\n}\n```", "```cs\npublic class CharterFlightInfo : FlightInfoBase {\n  public string CharterCompany { get; set; }\n  public string Cargo { get; set; }\n  public int Passengers { get; set; }\n  public override string BuildFlightIdentifier() =>\n    base.BuildFlightIdentifier() +\n    $\" carrying {Cargo} for {CharterCompany}\" +\n    $\" and {Passengers} passengers\";\n}\n```", "```cs\npublic class CargoItem {\n  public string ItemType { get; set; }\n  public int Quantity { get; set; }\n  public override string ToString() =>\n    $\"{Quantity} {ItemType}\";\n}\n```", "```cs\npublic class CharterFlightInfo : FlightInfoBase {\n  public List<CargoItem> Cargo { get; } = new();\n  public override string BuildFlightIdentifier() {\n    StringBuilder sb = new(base.BuildFlightIdentifier());\n    if (Cargo.Count != 0) {\n      sb.Append(\" carrying \");\n      foreach (var cargo in Cargo) {\n        sb.Append($\"{cargo}, \");\n      }\n    }\n    return sb.ToString();\n  }\n}\n```", "```cs\npublic class CharterFlightInfo : FlightInfoBase {\n  public List<CargoItem> Cargo { get; } = new();\n  // Other members omitted...\n}\n```", "```cs\npublic interface ICargoItem {\n  string ItemType { get; set; }\n  int Quantity { get; set; }\n}\n```", "```cs\npublic class CargoItem : ICargoItem {\n  public string ItemType { get; set; }\n  public int Quantity { get; set; }\n  public override string ToString() =>\n    $\"{Quantity} {ItemType}\";\n}\n```", "```cs\npublic interface ICargoItem {\n  string ItemType { get; }\n  int Quantity { get; }\n}\n```", "```cs\npublic class CharterFlightInfo : FlightInfoBase {\n  public List<ICargoItem> Cargo { get; } = new();\n  // Other members omitted...\n}\n```", "```cs\npublic interface ICargoItem {\n  string ItemType { get; }\n  int Quantity { get; }\n  string ManifestText => $\"{ItemType} {Quantity}\";\n  void LogManifest() {\n    Console.WriteLine(ManifestText);\n  }\n}\n```", "```cs\npublic class CargoItem : ICargoItem {\n  public string ItemType { get; set; }\n  public int Quantity { get; set; }\n  public void LogManifest() {\n    Console.WriteLine($\"Customized: {ToString()}\");\n  }\n  public override string ToString() =>\n    $\"{Quantity} {ItemType}\";\n}\n```", "```cs\npublic IEnumerable<IFlightInfo> Search(FlightSearch s) {\n  IEnumerable<IFlightInfo> results = _flights;\n  if (s.Depart != null) {\n    results =\n      results.Where(f => f.Departure.Location == s.Depart);\n  }\n  // Many filters omitted...\nif (s.MaxLength != null) {\n    results =\n      results.Where(f => f.Duration <= s.MaxLength);\n  }\n  return results;\n}\n```", "```cs\npublic abstract class FlightFilterBase {\n  public abstract bool ShouldInclude(IFlightInfo flight);\n}\n```", "```cs\nList<IFlightInfo> Search(List<FlightFilterBase> rules) =>\n  _flights.Where(f => rules.All(r => r.ShouldInclude(f)))\n          .ToList();\n```", "```cs\npublic class AirportFilter : FlightFilterBase {\n  public bool IsDeparture { get; set; }\n  public Airport Airport { get; set; }\n  public override bool ShouldInclude(IFlightInfo flight) {\n    if (IsDeparture) {\n      return flight.Departure.Location == Airport;\n    }\n    return flight.Arrival.Location == Airport;\n  }\n}\n```"]