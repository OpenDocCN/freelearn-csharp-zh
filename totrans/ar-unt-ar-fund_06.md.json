["```cs\n    using UnityEngine;\n    ///     Singleton behaviour class, used for components         that should only have one instance\n    /// </summary>\n    /// <typeparam name=\"T\"></typeparam>\n    public class Singleton<T> : MonoBehaviour where T : Singleton<T>\n    {\n        public static T Instance { get; private set; }\n        /// <summary>\n        ///     Returns whether the instance has been             initialized or not.\n        /// </summary>\n        public static bool IsInitialized {\n            get { return Instance != null; }\n        }\n        /// <summary>\n        ///     Base awake method that sets the singleton's             unique instance.\n        /// </summary>\n        protected virtual void Awake()\n        {\n            if (Instance != null)\n                Debug.LogError($\"Trying to instantiate a                 second instance of singleton class                     {GetType().Name}\");\n            else\n                Instance = (T)this;\n        }\n        protected virtual void OnDestroy()\n        {\n            if (Instance == this)\n                Instance = null;\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using RotaryHeart.Lib.SerializableDictionary;\n    [System.Serializable]\n    public class UIPanelDictionary : SerializableDictionaryBase<string, CanvasGroup> { }\n    public class UIController : Singleton<UIController>\n    {\n        [SerializeField] UIPanelDictionary uiPanels;\n        CanvasGroup currentPanel;\n    ```", "```cs\n        void Awake()\n        {\n            base.Awake();\n            ResetAllUI();\n        }\n        void ResetAllUI()\n        {\n            foreach (CanvasGroup panel in uiPanels.Values)\n            {\n                panel.gameObject.SetActive(false);\n            }\n        }\n    }\n    ```", "```cs\n        public static void ShowUI(string name)\n        {\n            Instance?._ShowUI(name);\n        }\n        void _ShowUI(string name)\n        {\n            CanvasGroup panel;\n            if (uiPanels.TryGetValue(name, out panel))\n            {\n                ChangeUI(uiPanels[name]);\n            }\n            else\n            {\n                Debug.LogError(\"Undefined ui panel \" + name);\n            }    }\n        void ChangeUI(CanvasGroup panel)\n        {\n            if (panel == currentPanel)\n                return;\n            if (currentPanel)\n                currentPanel.gameObject.SetActive(false);\n            currentPanel = panel;\n            if (panel)\n                panel.gameObject.SetActive(true);\n        }\n    ```", "```cs\n    using DG.Tweening;\n    ```", "```cs\n        void FadeIn(CanvasGroup panel)\n        {\n            panel.gameObject.SetActive(true);\n            panel.DOFade(1f, 0.5f);\n        }\n        void FadeOut(CanvasGroup panel)\n        {\n            panel.DOFade(0f, 0.5f).OnComplete(() => panel            gameObject.SetActive(false));\n        }\n    ```", "```cs\n        void ChangeUI(CanvasGroup panel)\n        {\n            if (panel == currentPanel)\n                return;\n            if (currentPanel)\n                FadeOut(currentPanel);\n                //currentPanel.gameObject.SetActive(false);\n            currentPanel = panel;\n            if (panel)\n                FadeIn(panel);\n                //panel.gameObject.SetActive(true);\n        }\n    ```", "```cs\n    using System.Collections;\n    using UnityEngine;\n    using RotaryHeart.Lib.SerializableDictionary;\n    [System.Serializable]\n    public class InteractionModeDictionary : SerializableDictionaryBase<string, GameObject> { }\n    public class InteractionController : Singleton<InteractionController>\n    {\n        [SerializeField] InteractionModeDictionary         interactionModes;\n        GameObject currentMode;\n    }\n    ```", "```cs\n        protected override void Awake()\n        {\n            base.Awake();\n            ResetAllModes();\n        }\n        void ResetAllModes()\n        {\n            foreach (GameObject mode in interactionModes             Values)\n            {\n                mode.SetActive(false);\n            }\n        }\n    ```", "```cs\n       public static void EnableMode(string name)\n        {\n            Instance?._EnableMode(name);\n        }\n        void _EnableMode(string name)\n        {\n            GameObject modeObject;\n            if (interactionModes.TryGetValue(name, out             modeObject))\n            {\n                StartCoroutine(ChangeMode(modeObject));\n            }\n            else\n            {\n                Debug.LogError(\"undefined mode named \" +                name);\n            }    }\n        IEnumerator ChangeMode(GameObject mode)\n        {\n            if (mode == currentMode)\n                yield break;\n            if (currentMode)\n            {\n                currentMode.SetActive(false);\n                yield return null;\n            }\n            currentMode = mode;\n            mode.SetActive(true);\n        }\n    ```", "```cs\n        void Start()\n        {\n            _EnableMode(\"Startup\");\n        }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class StartupMode : MonoBehaviour\n    {\n        [SerializeField] string nextMode = \"Scan\";\n        void OnEnable()\n        {\n            UIController.ShowUI(\"Startup\");\n        }\n        void Update()\n        {\n            if (ARSession.state ==            ARSessionState.Unsupported)\n            {\n                InteractionController.EnableMode(\"NonAR\");\n            }\n            else if (ARSession.state >= ARSessionState.Ready)\n            {\n                InteractionController.EnableMode(nextMode);        }\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using UnityEngine.XR.ARFoundation;\n    public class ScanMode : MonoBehaviour\n    {\n        [SerializeField] ARPlaneManager planeManager;\n        void OnEnable()\n        {\n            UIController.ShowUI(\"Scan\");\n        }\n        void Update()\n        {\n            if (planeManager.trackables.count > 0)\n            {\n                InteractionController.EnableMode(\"Main\");\n            }\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class MainMode : MonoBehaviour\n    {\n        void OnEnable()\n        {\n            UIController.ShowUI(\"Main\");\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class NonARMode: MonoBehaviour\n    {\n        void OnEnable()\n        {\n            UIController.ShowUI(\"NonAR\");\n        }\n    }\n    ```", "```cs\n    using UnityEngine;\n    public class AnimatedPrompt : MonoBehaviour\n    {\n        public enum InstructionUI\n        {\n            CrossPlatformFindAPlane,\n            FindAFace,\n            FindABody,\n            FindAnImage,\n            FindAnObject,\n            ARKitCoachingOverlay,\n            TapToPlace,\n            None\n        };\n        [SerializeField] InstructionUI instruction;\n        [SerializeField] ARUXAnimationManager         animationManager;\n        bool isStarted;\n    ```", "```cs\n        void Start()\n        {\n            ShowInstructions();\n            isStarted = true;\n        }\n        void OnEnable()\n        {\n            if (isStarted)\n                ShowInstructions();\n        }\n        void OnDisable()\n        {\n            animationManager.FadeOffCurrentUI();\n        }\n    ```", "```cs\n        void ShowInstructions()\n        {\n            switch (instruction)\n            {\n                case InstructionUI.CrossPlatformFindAPlane:\n                    animationManager.                   ShowCrossPlatformFindAPlane();\n                    break;\n                case InstructionUI.FindAFace:\n                    animationManager.ShowFindFace();\n                    break;\n                case InstructionUI.FindABody:\n                    animationManager.ShowFindBody();\n                    break;\n                case InstructionUI.FindAnImage:\n                    animationManager.ShowFindImage();\n                    break;\n                case InstructionUI.FindAnObject:\n                    animationManager.ShowFindObject();\n                    break;\n                case InstructionUI.TapToPlace:\n                    animationManager.ShowTapToPlace();\n                    break;\n                default:\n                    Debug.LogError(\"instruction switch                 missing, please edit AnimatedPrompt.cs \"                + instruction);\n                    break;\n            }\n        }\n    }}\n    ```"]