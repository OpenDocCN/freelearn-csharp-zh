["```cs\nnamespace Catalog.Domain.Entities\n{\n    public class Item\n    {\n        ...\n        public bool IsInactive { get; set; }\n    }\n}\n```", "```cs\ndotnet ef migrations add Added_IsInactive_field\ndotnet ef database update\n```", "```cs\n{\n    \"Logging\": {\n        \"LogLevel\": {\n            \"Default\": \"Warning\"\n        }\n    },\n \"DataSource\": {\n \"ConnectionString\": \"Server=localhost,1433;Initial Catalog=Store;User Id=catalog_srv;Password=P@ssw0rd\"\n    }\n}\n```", "```cs\ndocker run -e \"ACCEPT_EULA=Y\" -e \"SA_PASSWORD=<YOUR_SA_PASSWORD>\" -p 1433:1433 --name sql1 -d mcr.microsoft.com/mssql/server:2017-latest\n```", "```cs\ndocker exec -it sql1 \"bash\"\n```", "```cs\n/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P '<YOUR_SA_PASSWORD>'\n1> CREATE LOGIN catalog_srv WITH PASSWORD = 'P@ssw0rd';\n2> CREATE DATABASE Store;\n3> GO\n1> USE Store;\n2> CREATE USER catalog_srv;\n3> GO\n1> EXEC sp_addrolemember N'db_owner', N'catalog_srv';\n2> GO\n```", "```cs\nnamespace Catalog.Infrastructure.Repositories\n{\n    public class ItemRepository\n        : IItemRepository\n    {\n        ...\n\n        public async Task<IEnumerable<Item>> GetAsync()\n        {\n            return await _context.Items\n                .Where(x => !x.IsInactive)\n                .AsNoTracking()\n                .ToListAsync();\n        }\n\n        public async Task<IEnumerable<Item>> GetItemByArtistIdAsync(Guid id)\n        {\n            var items = await _context\n                .Items\n                .Where(x => !x.IsInactive)\n                .Where(item => item.ArtistId == id)\n                .Include(x => x.Genre)\n                .Include(x => x.Artist)\n                .ToListAsync();\n\n            return items;\n        }\n\n        public async Task<IEnumerable<Item>> GetItemByGenreIdAsync(Guid id)\n        {\n            var items = await _context.Items\n                .Where(x => !x.IsInactive)\n                .Where(item => item.GenreId == id)\n                .Include(x => x.Genre)\n                .Include(x => x.Artist)\n                .ToListAsync();\n\n            return items;\n        }\n...\n```", "```cs\ndotnet test\n```", "```cs\n{\n    \"Id\": \"f5da5ce4-091e-492e-a70a-22b073d75a52\",\n    \"Name\": \"Untitled\",\n    \"Description\": \"Untitled by Kendrick Lamar\",\n    \"PictureUri\": \"https://mycdn.com/pictures/32423423\",\n    \"ReleaseDate\": \"2016-01-01T00:00:00+00:00\",\n    \"Price\": {\n      \"Amount\": 23.5,\n      \"Currency\": \"EUR\"\n    },\n    \"Format\": \"Vinyl 33g\",\n    \"AvailableStock\": 6,\n    \"GenreId\": \"c04f05c0-f6ad-44d1-a400-3375bfb5dfd6\",\n    \"Genre\": null,\n    \"ArtistId\": \"3eb00b42-a9f0-4012-841d-70ebf3ab7474\",\n    \"Artist\": null,\n    \"IsInactive\": true\n  },\n```", "```cs\nnamespace Catalog.Infrastructure.Tests\n{\n    ...\n    public class ItemRepositoryTests : IClassFixture<CatalogContextFactory>\n    {\n\n        [Theory]\n        [InlineData(\"f5da5ce4-091e-492e-a70a-22b073d75a52\")]\n        public async Task getitems_should_not_return_inactive_records(string id)\n        {\n            var result =\n                await _sut.GetAsync();\n\n            result.Any(x => x.Id == new Guid(id)).ShouldBeFalse();\n        }\n\n      ...\n   }\n}\n```", "```cs\nnamespace Catalog.Domain.Services\n{\n    public interface IItemService\n    {\n        ...\n        Task<ItemResponse> DeleteItemAsync(DeleteItemRequest request);\n    }\n}\n```", "```cs\nusing System;\n\nnamespace Catalog.Domain.Requests.Item\n{\n    public class DeleteItemRequest\n    {\n        public Guid Id { get; set; }\n    }\n}\n```", "```cs\npublic async Task<ItemResponse> DeleteItemAsync(DeleteItemRequest request)\n{\n    if (request?.Id == null) throw new ArgumentNullException();\n\n    var result = await _itemRepository.GetAsync(request.Id);\n    result.IsInactive = true;\n\n    _itemRepository.Update(result);\n    await _itemRepository.UnitOfWork.SaveChangesAsync();\n\n    return _itemMapper.Map(result);\n}\n```", "```cs\nDELETE /items/{id}\n```", "```cs\nusing System;\nusing System.Threading.Tasks;\nusing Catalog.API.Filters;\nusing Catalog.Domain.Requests.Item;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/items\")]\n    [ApiController]\n    public class ItemController : ControllerBase\n    {\n        ...\n\n [HttpDelete(\"{id:guid}\")]\n [ItemExists]\n public async Task<IActionResult> Delete(Guid id)\n {\n var request = new DeleteItemRequest { Id = id }; \n await _itemService.DeleteItemAsync(request); \n return NoContent();\n }\n    }\n}\n```", "```cs\nnamespace Catalog.API.Tests.Controllers\n{\n    public class ItemsController : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        private readonly InMemoryApplicationFactory<Startup> _factory;\n\n        public ItemsController(InMemoryApplicationFactory<Startup> factory)\n        {\n            _factory = factory;\n        }\n\n        ...\n\n        [Theory]\n        [LoadData(\"item\")]\n        public async Task delete_should_returns_no_content_when_called_with_right_id(DeleteItemRequest \n        request)\n        {\n            var client = _factory.CreateClient();\n\n            var response = await client.DeleteAsync($\"/api/items/{request.Id}\");\n\n            response.StatusCode.ShouldBe(HttpStatusCode.NoContent);\n        }\n\n        [Fact]\n        public async Task delete_should_returns_not_found_when_called_with_not_existing_id()\n        {\n            var client = _factory.CreateClient();\n\n            var response = await client.DeleteAsync($\"/api/items/{Guid.NewGuid()}\");\n\n            response.StatusCode.ShouldBe(HttpStatusCode.NotFound);\n        }\n    }\n}\n\n```", "```cs\n{\n    \"_links\": {\n        \"get\": {\n            \"rel\": \"ItemsHateoas/Get\",\n            \"href\": \"https://localhost:5001/api/hateoas/items\",\n            \"method\": \"GET\"\n        },\n        \"get_by_id\": {\n            \"rel\": \"ItemsHateoas/GetById\",\n            \"href\": \"https://localhost:5001/api/hateoas/items/8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n            \"method\": \"GET\"\n        },\n        \"create\": {\n            \"rel\": \"ItemsHateoas/Post\",\n            \"href\": \"https://localhost:5001/api/hateoas/items\",\n            \"method\": \"POST\"\n        },\n        \"update\": {\n            \"rel\": \"ItemsHateoas/Put\",\n            \"href\": \"https://localhost:5001/api/hateoas/items/8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n            \"method\": \"PUT\"\n        },\n        \"delete\": {\n            \"rel\": \"ItemsHateoas/Delete\",\n            \"href\": \"https://localhost:5001/api/hateoas/items/8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n            \"method\": \"DELETE\"\n        }\n    },\n    \"id\": \"8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n    \"name\": \"Malibu\",\n    \"description\": \"Malibu. by Anderson Paak\",\n    \"labelName\": \"Steel Wool/OBE/Art Club\",\n    \"price\": {\n        \"amount\": 23.5,\n        \"currency\": \"EUR\"\n    },\n    \"pictureUri\": \"https://mycdn.com/pictures/32423423\",\n    \"releaseDate\": \"2016-01-01T00:00:00+00:00\",\n    \"format\": \"Vinyl 43\",\n    \"availableStock\": 3,\n    \"genreId\": \"7fcdde39-342b-4f80-0db1-08d65233f5a6\",\n    \"genre\": null,\n    \"artistId\": \"ff1921a8-f49a-4db2-0c2e-08d65233875e\",\n    \"artist\": null\n}\n```", "```cs\n dotnet add package RiskFirst.Hateoas\n```", "```cs\nusing System.Collections.Generic;\nusing Newtonsoft.Json;\nusing RiskFirst.Hateoas.Models;\nusing Catalog.Domain.Responses.Item;\n\nnamespace Catalog.API.ResponseModels\n{\n        public class ItemHateoasResponse :  ILinkContainer\n        {\n            public ItemResponse Data;          \n            private Dictionary<string, Link> _links;\n\n            [JsonProperty(PropertyName = \"_links\")]\n            public Dictionary<string, Link> Links\n            {\n                get => _links ?? (_links = new Dictionary<string, Link>());\n                set => _links = value;\n            }\n\n            public void AddLink(string id, Link link)\n            {\n                Links.Add(id, link);\n            }\n        }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Catalog.API.Filters;\nusing Catalog.API.ResponseModels;\nusing Catalog.Domain.Requests.Item;\nusing Catalog.Domain.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing RiskFirst.Hateoas;\n\nnamespace Catalog.API.Controllers\n{\n    [Route(\"api/hateoas/items\")]\n    [ApiController]\n    [JsonException]\n    public class ItemsHateoasController : ControllerBase\n    {\n        private readonly IItemService _itemService;\n        private readonly ILinksService _linksService;\n\n        public ItemsHateoasController(ILinksService linkService, IItemService itemService)\n        {\n            _linksService = linkService;\n            _itemService = itemService;\n        }\n\n        [HttpGet(Name = nameof(Get))]\n        public async Task<IActionResult> Get([FromQuery] int pageSize = 10, [FromQuery] int pageIndex = 0)\n        {\n            var result = await _itemService.GetItemsAsync();\n\n            var totalItems = result.Count();\n\n            var itemsOnPage = result.OrderBy(c => c.Name)\n                .Skip(pageSize * pageIndex)\n                .Take(pageSize);\n\n            var hateoasResults = new List<ItemHateoasResponse>();\n\n            foreach (var itemResponse in itemsOnPage)\n            {\n                var hateoasResult = new ItemHateoasResponse { Data = itemResponse };\n                await _linksService.AddLinksAsync(hateoasResult);\n\n                hateoasResults.Add(hateoasResult);\n            }\n\n            var model = new PaginatedItemResponseModel<ItemHateoasResponse>(\n                pageIndex, pageSize, totalItems, hateoasResults);\n\n            return Ok(model);\n        }\n\n        [HttpGet(\"{id:guid}\", Name = nameof(GetById))]\n        [ItemExists]\n        public async Task<IActionResult> GetById(Guid id)\n        {\n            var result = await _itemService.GetItemAsync(new GetItemRequest { Id = id });\n            var hateoasResult = new ItemHateoasResponse { Data = result };\n            await _linksService.AddLinksAsync(hateoasResult);\n\n            return Ok(hateoasResult);\n        }\n```", "```cs\n...\n\n        [HttpPost(Name = nameof(Post))]\n        public async Task<IActionResult> Post(AddItemRequest request)\n        {\n            var result = await _itemService.AddItemAsync(request);\n            return CreatedAtAction(nameof(GetById), new { id = result.Id }, null);\n        }\n\n        [HttpPut(\"{id:guid}\", Name = nameof(Put))]\n        [ItemExists]\n        public async Task<IActionResult> Put(Guid id, EditItemRequest request)\n        {\n            request.Id = id;\n            var result = await _itemService.EditItemAsync(request);\n\n            var hateoasResult = new ItemHateoasResponse { Data = result };\n            await _linksService.AddLinksAsync(hateoasResult);\n\n            return Ok(hateoasResult);\n        }\n\n        [HttpDelete(\"{id:guid}\", Name = nameof(Delete))]\n        [ItemExists]\n        public async Task<IActionResult> Delete(Guid id)\n        {\n            var request = new DeleteItemRequest { Id = id };\n            await _itemService.DeleteItemAsync(request);\n            return NoContent();\n        }\n..\n```", "```cs\nnamespace Catalog.API\n{\n    public class Startup\n    {\n        ...\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n          ...\n\n            services.AddLinks(config => \n            {\n                config.AddPolicy<ItemHateoasResponse>(policy =>\n                {\n                    policy\n                        .RequireRoutedLink(nameof(ItemsHateoasController.Get), \n                         nameof(ItemsHateoasController.Get))\n                        .RequireRoutedLink(nameof(ItemsHateoasController.GetById), \n                         nameof(ItemsHateoasController.GetById), _ => new {id = _.Data.Id})\n                        .RequireRoutedLink(nameof(ItemsHateoasController.Post), \n                         nameof(ItemsHateoasController.Post))\n                        .RequireRoutedLink(nameof(ItemsHateoasController.Put), \n                         nameof(ItemsHateoasController.Put), x => new {id = x.Data.Id})\n                        .RequireRoutedLink(nameof(ItemsHateoasController.Delete), \n                         nameof(ItemsHateoasController.Delete), x => new {id = x.Data.Id});\n                });\n            });\n        }\n        ...\n    }\n}\n```", "```cs\n{\n    \"_links\": {\n        \"get\": {\n            \"rel\": \"ItemsHateoas/Get\",\n            \"href\": \"https://localhost:5001/api/hateoas/items\",\n            \"method\": \"GET\"\n        },\n        \"get_by_id\": {\n            \"rel\": \"ItemsHateoas/GetById\",\n            \"href\": \"https://localhost:5001/api/hateoas/items/8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n            \"method\": \"GET\"\n        },\n        \"create\": {\n            \"rel\": \"ItemsHateoas/Post\",\n            \"href\": \"https://localhost:5001/api/hateoas/items\",\n            \"method\": \"POST\"\n        },\n        \"update\": {\n            \"rel\": \"ItemsHateoas/Put\",\n            \"href\": \"https://localhost:5001/api/hateoas/items/8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n            \"method\": \"PUT\"\n        },\n        \"delete\": {\n            \"rel\": \"ItemsHateoas/Delete\",\n            \"href\": \"https://localhost:5001/api/hateoas/items/8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n            \"method\": \"DELETE\"\n        }\n    },\n    \"id\": \"8ff0fe8f-9dbc-451f-7a57-08d652340f56\",\n    \"name\": \"Malibu\",\n\n...\n```", "```cs\npublic async Task<String> GetStringAsync(String url)\n{\n    var request = await _httpClient.GetAsync(url);\n    var responseContent = await request.Content.ReadAsStringAsync();\n    return responseContent;\n}\n```", "```cs\npublic Task<String> GetStringAsync(String url) \n{ \n     var request =_httpClient.GetAsync(url); \n     var responseContentTask = request.ContinueWith(http => \n                         http.Result.Content.ReadAsStringAsync()); \n     return responseContentTask.Unwrap(); \n}\n```", "```cs\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class ValuesController : ControllerBase\n{\n    // GET api/values\n    [HttpGet]\n    public async Task<ActionResult<string>> Get()\n    {\n        return await OperationAsync();\n    }\n\n    public async Task<string> OperationAsync()\n    {\n        await Task.Delay(100);\n        return \"Response\";\n    }\n}\n```", "```cs\n[CompilerGenerated]\nprivate sealed class <Get>d__0 : IAsyncStateMachine\n{\n    // Fields\n    public int <>1__state;\n    public AsyncTaskMethodBuilder<ActionResult<string>> <>t__builder;\n    public ValuesController <>4__this;\n    private string <>s__1;\n    private TaskAwaiter<string> <>u__1;\n\n    // Methods\n    public <Get>d__0();\n    private void MoveNext();\n    [DebuggerHidden]\n    private void SetStateMachine(IAsyncStateMachine stateMachine);\n}\n```", "```cs\n   public class ValuesController : ApiController\n    {\n        public string Get()\n        {\n            return Operation1Async().Result;\n        }\n\n        public async Task<string> Operation1Async()\n        {\n            await Task.Delay(1000);\n            return \"Test\";\n        }\n    }\n```", "```cs\n   public class ValuesController : ApiController\n    {\n        public string Get()\n        {\n            return Operation1Async().Result;\n        }\n\n        public async Task<string> Operation1Async()\n        {\n            await Task.Delay(1000)\n                      .ConfigureAwait(continueOnCapturedContext:false);\n            return \"Test\";\n        }\n    }\n```", "```cs\n public Task<int> AddAsync(int a, int b)\n   {\n       return Task.Run(() => a + b);\n   }\n```", "```cs\n public Task<int> AddAsync(int a, int b)\n   {\n       return Task.FromResult(a + b);\n   }\n```", "```cs\nnamespace Catalog.Infrastructure.Repositories\n{\n    public class ItemRepository : IItemRepository\n    {\n        ..\n        public async Task<Item> GetAsync(Guid id)\n        {\n            var item = await _context.Items\n                .AsNoTracking()\n                .Where(x => x.Id == id)\n                .Include(x => x.Genre)\n                .Include(x => x.Artist).FirstOrDefaultAsync();\n\n            return item;\n        }\n        ...\n    }\n}\n```", "```cs\npublic Item Add(Item order)\n{\n    return _context.Items\n        .Add(order).Entity;\n}\n```", "```cs\nusing System.Diagnostics;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\n\nnamespace Catalog.API.Infrastructure.Middleware\n{\n    public class ResponseTimeMiddlewareAsync {  \n\n        private const string X_RESPONSE_TIME_MS = \"X-Response-Time-ms\";  \n\n        private readonly RequestDelegate _next;  \n\n        public ResponseTimeMiddlewareAsync(RequestDelegate next) {  \n            _next = next;  \n        }  \n\n        public Task InvokeAsync(HttpContext context) {  \n\n            var watch = new Stopwatch(); \n\n            watch.Start();  \n\n            context.Response.OnStarting(() => {  \n\n                watch.Stop();  \n\n                var responseTimeForCompleteRequest = watch.ElapsedMilliseconds;  \n                context.Response.Headers[X_RESPONSE_TIME_MS] = responseTimeForCompleteRequest.ToString(); \n\n                return Task.CompletedTask;  \n            });  \n\n            return _next(context);  \n        }  \n    }  \n}\n```", "```cs\n...\npublic void Configure(IApplicationBuilder app, IWebHostingEnvironment env)\n{\n    ...\n    app.UseMiddleware<ResponseTimeMiddlewareAsync>();\n    ...\n}\n...\n\n```", "```cs\nusing System.Threading.Tasks;\nusing Shouldly;\nusing Catalog.Fixtures;\nusing Xunit;\n\nnamespace Catalog.API.Tests.Middleware\n{\n    public class ResponseTimeMiddlewareTests : IClassFixture<InMemoryApplicationFactory<Startup>>\n    {\n        public ResponseTimeMiddlewareTests(InMemoryApplicationFactory<Startup> factory)\n        {\n            _factory = factory;\n        }\n\n        private readonly InMemoryApplicationFactory<Startup> _factory;\n\n        [Theory]\n        [InlineData(\"/api/items/?pageSize=1&pageIndex=0\")]\n        [InlineData(\"/api/artist/?pageSize=1&pageIndex=0\")]\n        [InlineData(\"/api/genre/?pageSize=1&pageIndex=0\")]\n        public async Task middleware_should_set_the_correct_response_time_custom_header(string url)\n        {\n            var client = _factory.CreateClient();\n            var response = await client.GetAsync(url);\n\n            response.EnsureSuccessStatusCode();\n response.Headers.GetValues(\"X-Response-Time-ms\").ShouldNotBeEmpty();\n        }\n    }\n}\n```"]