["```cs\n    app.Run(async context =>\n    {\n      await context.Response.WriteAsync(\"Hello Inline middleware!\");\n    });\n    ```", "```cs\n    app.Map(\"/SomeRoute\", someRouteApp =>\n    {\n      someRouteApp.Use(async (context, next) =>\n      {\n        Console.WriteLine(\"In SomeRoute middleware\");\n        await context.Response.WriteAsync(\"Hello from the SomeRoute middleware!\");\n      });\n    });\n    ```", "```cs\n    app.Use(async (context, next) =>\n    {\n      // Log the request\n      Console.WriteLine($\"Request:\n        {context.Request.Method}\n        {context.Request.Path}\");\n      await next.Invoke();\n      // Log the response\n      Console.WriteLine($\"Response:\n        {context.Response.StatusCode}\");\n    });\n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    var app = builder.Build();\n    app.UseMiddleware<ErrorHandlingMiddleware>();\n    app.UseMiddleware<AuthenticationMiddleware>();\n    app.UseMiddleware<RequestLoggingMiddleware>();\n    app.Run(async context =>\n    {\n        await context.Response.WriteAsync(\"Hello,\n          World!\");\n    });\n    app.Run();\n    ```", "```cs\n    public class ApiKeyCheckMiddleware\n    {\n        private readonly RequestDelegate _next;\n        private const string API_KEY = \"X-API-KEY\";\n        private const string VALID_API_KEY = \"XYZ123\";\n        public ApiKeyCheckMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n        public async Task InvokeAsync(HttpContext context)\n        {\n            if (!context.Request.Headers\n              .TryGetValue(API_KEY,\n              out var extractedApiKey) ||\n              extractedApiKey != VALID_API_KEY)\n            {\n                context.Response.StatusCode = 401;\n                await context.Response\n                  .WriteAsync(\"Unauthorized\");\n                return;\n            }\n            await _next(context);\n        }\n    }\n    ```", "```cs\npublic class BeforeAfterRequestMiddleware\n{\n  private readonly RequestDelegate _next;\n  public BeforeAfterRequestMiddleware(RequestDelegate next)\n  {\n  _next = next;\n  }\n  public async Task InvokeAsync(HttpContext context)\n  {\n    // Logging request information\n    Console.WriteLine($\"Request:\n      {context.Request.Method}\n      {context.Request.Path}\");\n    // Call the next middleware in the pipeline\n    await _next(context);\n    // Logging response information\n    Console.WriteLine($\"Response:\n      {context.Response.StatusCode}\");\n  }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\napp.UseMiddleware<BeforeAfterRequestMiddleware>();\napp.Run(async context =>\n{\n    await context.Response.WriteAsync(\"Hello, World!\");\n});\napp.Run();\n```", "```cs\npublic class RequestLimitingMiddleware : IMiddleware\n{\n  private readonly ILogger\n    <RequestLimitingMiddleware> _logger;\n  public RequestLimitingMiddleware\n    (ILogger<RequestLimitingMiddleware> logger)\n  {\n    _logger = logger;\n  }\n  public async Task InvokeAsync(HttpContext context,\n    RequestDelegate next)\n  {\n    // Logic to limit the number of requests\n    _logger.LogInformation(\"Processing request\");\n    await next(context);\n  }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddScoped<RequestLimitingMiddleware>();\nvar app = builder.Build();\napp.UseMiddleware<RequestLimitingMiddleware>();\napp.Run(async context =>\n{\n    await context.Response.WriteAsync(\"Hello, World!\");\n});\napp.Run();\n```", "```cs\ndotnet new mvc -n CommonMiddlewares\n```", "```cs\npublic class ErrorHandlingMiddleware\n{\n  private readonly RequestDelegate _next;\n  public ErrorHandlingMiddleware(RequestDelegate next)\n  {\n    _next = next;\n  }\n  public async Task InvokeAsync(HttpContext context)\n  {\n    try\n    {\n      await _next(context);\n    }\n    catch (Exception ex)\n    {\n      await HandleExceptionAsync(context, ex);\n    }\n  }\n  private Task HandleExceptionAsync(HttpContext context,\n    Exception exception)\n  {\n    context.Response.ContentType = \"application/json\";\n    context.Response.StatusCode = (int)HttpStatusCode\n      .InternalServerError;\n    return context.Response.WriteAsync(new ErrorDetails()\n    {\n      StatusCode = context.Response.StatusCode,\n      Message = \"Internal Server Error from the custom middleware.\"\n    }.ToString());\n  }\n}\npublic class ErrorDetails\n{\n  public int StatusCode { get; set; }\n  public string Message { get; set; }\n  public override string ToString()\n  {\n    return JsonSerializer.Serialize(this);\n  }\n}\n```", "```cs\npublic class PerformanceLoggingMiddleware\n{\n  private readonly RequestDelegate _next;\n  public PerformanceLoggingMiddleware(RequestDelegate next)\n  {\n    _next = next;\n  }\n  public async Task InvokeAsync(HttpContext context,\n    ILogger<PerformanceLoggingMiddleware> logger)\n  {\n    var timestamp = Stopwatch.GetTimestamp();\n    await _next(context);\n    var elapsedMilliseconds = Stopwatch\n      .GetElapsedTime(timestamp).TotalMilliseconds;\n    logger.LogInformation(\"Request {Method} {Path}\n      took {ElapsedMilliseconds} ms\",\n      context.Request.Method, context.Request.Path,\n      elapsedMilliseconds);\n  }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.AspNetCore.RateLimiting;\nusing System.Threading.RateLimiting;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddRazorPages();\n// Configure rate limiting policies\nbuilder.Services.AddRateLimiter(options =>\n{\n  options.AddPolicy(\"fixed\", context =>\n    RateLimitPartition.GetFixedWindowLimiter(new\n    RateLimitPartitionKey(context.Request\n    .Headers[\"X-Forwarded-For\"].ToString(),\n    PartitionKeyKind.ClientIP), partition =>\n      new FixedWindowRateLimiterOptions\n      {\n        PermitLimit = 5,\n        Window = TimeSpan.FromMinutes(1),\n        QueueProcessingOrder = QueueProcessingOrder\n          .OldestFirst,\n          QueueLimit = 2\n      }));\n  options.AddPolicy(\"sliding\", context =>\n    RateLimitPartition.GetSlidingWindowLimiter(new\n    RateLimitPartitionKey(context.Request\n    .Headers[\"X-Forwarded-For\"].ToString(),\n    PartitionKeyKind.ClientIP), partition =>\n      new SlidingWindowRateLimiterOptions\n      {\n        PermitLimit = 5,\n        Window = TimeSpan.FromMinutes(1),\n          SegmentsPerWindow = 3,\n        QueueProcessingOrder = QueueProcessingOrder\n          .OldestFirst,\n          QueueLimit = 2\n      }));\n  options.AddPolicy(\"tokenBucket\", context =>\n    RateLimitPartition.GetTokenBucketLimiter(new\n    RateLimitPartitionKey(context.Request\n    .Headers[\"X-Forwarded-For\"].ToString(),\n    PartitionKeyKind.ClientIP), partition =>\n      new TokenBucketRateLimiterOptions\n      {\n        TokenLimit = 10,\n        TokensPerPeriod = 5,\n        ReplenishmentPeriod = TimeSpan.FromSeconds(10),\n        QueueProcessingOrder = QueueProcessingOrder\n          .OldestFirst,\n          QueueLimit = 2\n      }));\n});\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n// Use rate limiting middleware\napp.UseRateLimiter();\napp.MapRazorPages();\napp.Run();\n```", "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.AspNetCore.RateLimiting;\nusing System.Threading.RateLimiting;\npublic static class CommonMiddlewareExtensions\n{\n  public static IServiceCollection AddCustomRateLimiting\n    (this IServiceCollection services)\n  {\n    services.AddRateLimiter(options =>\n    {\n      options.AddPolicy(\"fixed\", context =>\n        RateLimitPartition.GetFixedWindowLimiter(new\n        RateLimitPartitionKey(context.Request\n        .Headers[\"X-Forwarded-For\"].ToString(),\n        PartitionKeyKind.ClientIP), partition =>\n          new FixedWindowRateLimiterOptions\n          {\n            PermitLimit = 5,\n            Window = TimeSpan.FromMinutes(1),\n            QueueProcessingOrder = QueueProcessingOrder\n              .OldestFirst,\n              QueueLimit = 2\n          }));\n      options.AddPolicy(\"sliding\", context =>\n        RateLimitPartition.GetSlidingWindowLimiter(new\n        RateLimitPartitionKey(context.Request\n        .Headers[\"X-Forwarded-For\"].ToString(),\n        PartitionKeyKind.ClientIP), partition =>\n          new SlidingWindowRateLimiterOptions\n          {\n            PermitLimit = 5,\n            Window = TimeSpan.FromMinutes(1),\n            SegmentsPerWindow = 3,\n            QueueProcessingOrder = QueueProcessingOrder\n              .OldestFirst,\n              QueueLimit = 2\n            }));\n      options.AddPolicy(\"tokenBucket\", context =>\n        RateLimitPartition.GetTokenBucketLimiter(new\n        RateLimitPartitionKey(context.Request\n        .Headers[\"X-Forwarded-For\"].ToString(),\n        PartitionKeyKind.ClientIP), partition =>\n          new TokenBucketRateLimiterOptions\n          {\n            TokenLimit = 10,\n            TokensPerPeriod = 5,\n            ReplenishmentPeriod = TimeSpan.FromSeconds(10),\n            QueueProcessingOrder = QueueProcessingOrder\n              .OldestFirst,\n              QueueLimit = 2\n          }));\n    });\n    return services;\n  }\n  public static void UseCommonApplicationMiddleware\n    (this IApplicationBuilder app)\n  {\n    builder.UseMiddleware<ErrorHandlingMiddleware>();\n    builder.UseMiddleware<PerformanceLoggingMiddleware>();\n    app.UseRateLimiter();\n  }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddRazorPages();\nbuilder.Services.AddCustomRateLimiting();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseDeveloperExceptionPage();\n}\n// Use custom rate limiting middleware\napp.UseCommonApplicationMiddleware();\napp.MapRazorPages();\napp.Run();\n```"]