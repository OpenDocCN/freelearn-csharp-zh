- en: '*Chapter 2*: Knots, Diverts, and Looping Patterns'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduces the concept of knots, sections of an ink story, and
    diverts, which is the functionality to move between them. We will then move into
    defining and moving between knots to create simple looping patterns. By incorporating
    choices (covered in [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves*), we will see how you can begin to experience
    narratives composed of selecting options, having the story move between knots,
    and then use looping patterns to build complex interactions from simple rules
    in ink.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Tangling a flow in knots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moving between sections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Looping knots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting and changing options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub at [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter2](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter2).
  prefs: []
  type: TYPE_NORMAL
- en: Tangling a flow in knots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014), *Text, Flow,
    Choices, and Weaves*, choices were explained as capable of branching a story into
    different sections. Some simple branching structures were shown, but movement
    through a story consisted of flowing down from one weave to another. When a section
    is given a name in ink, it becomes one of its central concepts: a `==`) and the
    name of the knot on a single line. After this definition, every line until the
    next knot encountered becomes a part of the original knot. By giving names to
    sections, they can be navigated to within ink to create more complex narrative
    experiences for readers.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating knots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A physical book is often divided into chapters. With knots, a digital ink story
    can also be divided into different parts. While a novel or textbook might use
    names for sections based on the word *chapter*, digital stories can grow beyond
    these limitations to use locations, characters, or other, more abstract divisions
    of a story.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, an ink story based on a detective speaking to different suspects
    of a crime might divide itself up into knots based on its characters, as illustrated
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The name of knots in ink must follow three specific rules, as outlined here:'
  prefs: []
  type: TYPE_NORMAL
- en: They can contain numbers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They can contain uppercase and lowercase letters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The only special symbol allowed is an underscore.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Spaces cannot be used in the names of knots. Without spaces to break up words,
    knot names are often written using lowercase letters with an underscore between
    names, words, or other important details.
  prefs: []
  type: TYPE_NORMAL
- en: Diverting between knots
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating knots themselves has little usefulness without a way to move between
    them. In ink, moving between knots is called `-`) and a greater-than sign (`>`).
    This combination, `->`, points to which knot the flow will move to next, as illustrated
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Once defined, a knot can be accessed by any other code within the same story.
    Within an ink story using knots, it is not uncommon for one of the first lines
    of code to be a divert.
  prefs: []
  type: TYPE_NORMAL
- en: Using DONE and END
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The introduction to the concept of a *flow* in [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves* mentioned a specific error that all the three
    previous code examples in this chapter have in common. Because diverting between
    knots introduces the possibility of creating a complex narrative, ink needs to
    know at least one ending of the story to stop a story from *running out*. To help
    signal to ink when a story is going to end, all stories have two built-in knots
    called `DONE` and `END`. Unlike other knots using lowercase and— often—underscores,
    these are written using uppercase letters.
  prefs: []
  type: TYPE_NORMAL
- en: The differences between `DONE` and `END` are in their usage. When a story diverts
    to `DONE` (`-> DONE`), it signals the end of the current flow but not the end
    of the story. `END`, however, signals the end of all possible flows and completely
    ends a story. The use of `DONE` allows for creating a new flow structure. `END`
    stops the story and does not allow for anything else to happen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any ink story diverting to a knot, not `DONE` or `END`, must divert to either
    at some point, or the story will be unusable. Returning to the use of `example_knot`
    earlier in this chapter, a usable form of the code would be this:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Within Inky, the use of the phrase `End of story` displayed at the end of every
    output is the use of the special knot, `END`. Without content to show, the story
    has come to its end. In the terminology of ink, it has diverted to `END`. Here
    is a screenshot displaying this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – End of story'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.1_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.1 – End of story
  prefs: []
  type: TYPE_NORMAL
- en: Moving between sections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Knots allow authors to divide up an ink story into sections they can name. Diverting
    allows for moving between these knots. In [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014),
    *Text, Flow, Choices, and Weaves*, choices were introduced using the asterisk
    (`*`) and the ability to branch a story. Using a divert as the result of a choice
    allows an author to craft a weave, a set of choices, where each could divert to
    different knots.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, returning to the detective example earlier in the chapter, an
    updated version with choices where each one diverted to knots for the characters
    would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: In the updated version, a *weave* is added. Each choice within it immediately
    diverts to a knot matching a character. Inside the knots is a use of the built-in
    `DONE` knot to let ink know the flow should stop after the content of the knot.
    In the new code, a much more complex story is created by only using the three
    concepts of choices, diverts, and knots.
  prefs: []
  type: TYPE_NORMAL
- en: Knots and stitches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Knots allow an ink story to be broken up into different parts. Within a knot,
    additional subsections can be added, called `=`) and its name. Stitches follow
    the same naming rules of knots: they can contain numbers, letters, and an underscore,
    but cannot use any other special characters. Stitches can also only appear inside
    an existing knot.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returning to the `example_knot` code, two stitches could be added, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The common error of a flow *running out* for knots also applies to stitches.
    As subsections of a story, they must also either divert to another knot or stitch
    or use the built-in knots to stop the flow or story. In the following screenshot,
    you can see an example of a flow running out in a stitch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2 – An error of flow running out in an example stitch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.2_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.2 – An error of flow running out in an example stitch
  prefs: []
  type: TYPE_NORMAL
- en: 'The first stitch in a knot is an exception to this error. The story will flow
    from the knot into the first stitch automatically. A corrected version of the
    previous example, accounting for flowing into the first stitch and including additional
    diverts, is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 3
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This would be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3 – Inky output from diverting to example_knot'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.3_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.3 – Inky output from diverting to example_knot
  prefs: []
  type: TYPE_NORMAL
- en: As their own subsections of an ink story, stitches can also be accessed directly.
    Diverting to a stitch inside of a knot follows `.`), is used between the name
    of the divert and the stitch within it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Diverting directly to `stitch_two` at the top of the previous code would produce
    the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 4
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This would be the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4 – Ink output from diverting to example_knot.stitch_two stitch'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.4_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.4 – Ink output from diverting to example_knot.stitch_two stitch
  prefs: []
  type: TYPE_NORMAL
- en: Dividing up a story across different files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As new knots and stitches are added to a single file, they can quickly grow
    very long. To help with this issue, ink has a keyword for combining files: `INCLUDE`.
    When used with ink code, the `INCLUDE` keyword includes another file based on
    its filename.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of the `INCLUDE` keyword has the following two rules:'
  prefs: []
  type: TYPE_NORMAL
- en: It should only be used at the top of files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It cannot be used inside knots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In Inky, additional files can be added to an existing project by using the
    **New Included ink File** menu option, as illustrated in the following screenshot,
    and naming the new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.5 – Inky''s New Included Ink File menu option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.5_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.5 – Inky's New Included Ink File menu option
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this functionality with the main ink file option also adds a single newline
    to the existing ink file, if it exists. For example, creating an `additionalFile.ink`
    file will generate an additional line of code: `INCLUDE additionalFile.ink`.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: Inky does not automatically add `.ink` to a filename when creating included
    ink files. It is strongly recommended to always add the file type when using this
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Every use of `INCLUDE` adds the file to the current project. This means any
    knots and stitches in these included files can be accessed by any others. Because
    files can be named after locations, characters, or other abstractions in the story,
    this allows an author to break a story into different files with their own knots
    and stitches, as shown in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Each choice diverts to a stitch in another file in the new example. Because
    Inky uses `INCLUDE` to combine files into a single project, the knots and stitches
    as part of the `books.ink` file can be accessed as if all the code were part of
    one file, as illustrated in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 5 (books.ink)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Flow runs top to bottom in ink. Starting with the first file, the flow would
    show the weave of two choices. Choosing the `Red Book` option would then divert
    to the stitch in the other file and, ultimately, to the use of the divert in the
    `DONE` special knot, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6 – Combined output from Red Book choice in Example 5'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.6_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.6 – Combined output from Red Book choice in Example 5
  prefs: []
  type: TYPE_NORMAL
- en: Looping knots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A knot can divert to itself. This fundamental concept is an important part of
    the advanced dialog and narrative structures in ink. However, care must be taken
    when having knots divert to themselves or in a looping pattern. It can become
    very easy to create **infinite loops** where the code loops without stopping.
    To prevent this error, it is always a good idea to include a weave with at least
    one choice whose content ends the story or breaks the loop.
  prefs: []
  type: TYPE_NORMAL
- en: By combining choices, diverts, and knots, looping structures can be created.
    Within these structures, sticky choices become important for creating consistent
    options for readers to choose from during each loop.
  prefs: []
  type: TYPE_NORMAL
- en: Looping structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The most basic looping structure has two choices. The first continues the loop
    and the second must end the story somehow, as illustrated in the following code
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 6
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Choices, those created with an asterisk (`*`), can only be used once in an
    entire story. In the previous example, if the first option is chosen, the loop
    repeats, but the second option then appears as the only one, as illustrated in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.7 – Example 6 choices after one loop'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_2.7_B17597.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 2.7 – Example 6 choices after one loop
  prefs: []
  type: TYPE_NORMAL
- en: 'In some stories, reducing the options as the reader moves through the story
    could work well, but a different type of choice is needed for those cases where
    the same options are needed for every loop: **sticky choices**.'
  prefs: []
  type: TYPE_NORMAL
- en: Revisiting sticky choices
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In [*Chapter 1*](B17597_01_Final_PG_ePub.xhtml#_idTextAnchor014), *Text, Flow,
    Choices, and Weaves*, sticky choices were introduced. Shown as part of a flow
    moving from top to bottom and without repeating any sections, sticky choices did
    not seem very useful at the time. However, within looping patterns using diverts
    and knots, sticky choices are often the best type of choice to use, as illustrated
    in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 7
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In the updated code, both options are sticky choices. This new code allows
    for a repeating pattern and consistent weave options regardless of loop count,
    as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8 – Inky output from multiple loops of Example 7](img/Figure_2.8_B17597.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.8 – Inky output from multiple loops of Example 7
  prefs: []
  type: TYPE_NORMAL
- en: Detecting and changing options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Knots and stitches are not the only ink concept capable of looping—options
    can do so as well. They also have the unique ability to detect when they are part
    of looping structures. These special types of options are named **labeled options**.
    They create an ability to give a *label* to an option and track if it has been
    seen before in the story. Labels are also an example of a **variable**: a value
    changed as part of the story by code.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The use of labeled options enables us to use the second type of option: `true`,
    the option is shown. If it is not, the option is hidden.'
  prefs: []
  type: TYPE_NORMAL
- en: Labeled and conditional options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Labeled options are created using open and closing parentheses around a name
    after the symbol for a choice, a plus sign (`+`) or asterisk (`*`), and the text
    of the choice itself. Labeled options follow the same rules as the name of knots
    and stitches: they can contain numbers, uppercase and lowercase letters, and an
    underscore. They cannot contain spaces or other special symbols. This is illustrated
    in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the new example code, a label called `push` is added to the first option
    and exists as a variable in the story. Because it is part of the option itself,
    its value will be increased every time the option is revisited in the story. This
    allows an author to test whether the player has been picking the same option multiple
    times. The following code example illustrates this:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 8
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In the latest change, a conditional option has also been added using open—`{`—and
    closing—`}`—curly brackets around the comparison between a variable and a value.
    In the new code, when the story starts, the reader can choose the `Push the rock
    up the hill` option. As they do, the value of the label for the option also increases.
    Once its value is at least `4`, the second option becomes available, and the reader
    can push the rock over the edge, as illustrated in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9 – Push the rock up the hill chosen four times in Example 8](img/Figure_2.9_B17597.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 2.9 – Push the rock up the hill chosen four times in Example 8
  prefs: []
  type: TYPE_NORMAL
- en: 'Conditional and labeled options can also be combined. However, the order in
    which they appear is important. Labels must appear in front of conditional options.
    They cannot appear in the other order, as illustrated in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 9
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the new example code, the reader only sees a single option when the story
    starts. They must make the same choice six times before the first option is removed
    and the second becomes available. Once the reader selects this option, the story
    finally ends.
  prefs: []
  type: TYPE_NORMAL
- en: Building dynamic weaves
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sticky choices enable options to remain across loops created by diverting to
    the same knot. Labeled and conditional options allow for tracking and showing
    certain options after certain conditions are met in a story. Using all these concepts,
    dynamic weaves become possible, as illustrated in the following code example:'
  prefs: []
  type: TYPE_NORMAL
- en: Example 10
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the new code, complex combinations of labels and conditional options are
    used to track information during the interrogation of the suspect. Making one
    choice unlocks the next in order, as the flow loops back to the same knot as information
    is slowly unlocked and the reader learns more through making one choice at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Some conditional options in *Example 10* use two ampersands, `&&`. This is known
    as `true`, it checks the next. If both are true, the entire combination is true.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, easier ways to create sequences of information will be
    covered, as well as introducing randomness into creating text and options. Instead
    of using diverts and knots, ink supplies much simpler functionality for doing
    the same general actions and building repetitions explicitly using knots each
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced you to knots, sections of a story, and diverts, which
    are ways to move between them. We examined the use of `DONE` and `END` as built-in
    knots to end a flow (`DONE`) and stop a story completely (`END`). Stitches, subsections
    of a knot, were then discussed to break up a story into even more parts. We learned
    that the `INCLUDE` keyword can be used to break a story into separate files and
    be *included* as part of the same project.
  prefs: []
  type: TYPE_NORMAL
- en: Knots can divert to themselves. This, as we saw, is the key to creating looping
    structures where the use of other concepts, labeled and conditional options, can
    also be combined. Labels allow us to create variables for tracking how many times
    an option has been shown. Labeled options then led on to using conditional options,
    testing how many times an option has been chosen when using a looping structure.
    Finally, we ended with making a dynamic weave, using a looping structure where
    each choice made changed the values of labels and unlocked each choice in order.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build on the concepts of knots and diverts. By
    navigating to different sections of a story, alternatives, an ink concept where
    different text is shown across a story or because of multiple loops, becomes possible.
    This allows ink to react to readers revisiting knots and options to show different
    content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a knot?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between `DONE` and `END`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a stitch?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can `INCLUDE` be used in ink?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between a labeled and a conditional option?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
