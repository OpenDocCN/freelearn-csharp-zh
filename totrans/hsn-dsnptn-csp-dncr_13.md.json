["```cs\npublic IObservable<int> Observable1 => Counter1.From();\npublic IObservable<int> Observable2 => Counter2.From();\n```", "```cs\ninternal class TicketCounter\n{\n    private IObservable<int> _observable;\n    public int[] Counter1;\n    public int[] Counter2;\n    public TicketCounter(int[] counter1, int[] counter2)\n    {\n        Counter1 = counter1;\n        Counter2 = counter2;\n    }\n...\n}\n```", "```cs\nTicketCounter ticketCounter = new TicketCounter(new int[]{1,3,4}, new int[]{2,5});\n```", "```cs\npublic IObservable<int> Merge() => _observable = Observable1.Merge(Observable2);\n```", "```cs\nConsole.Write(\"\\n\\tEnter comma separated number (0-9): \");\nvar num1 = Console.ReadLine();\nConsole.Write(\"\\tEnter comma separated number (0-9): \");\nvar num2 = Console.ReadLine();\nvar counter1 = num1.ToInts(',');\nvar counter2 = num2.ToInts(',');\nTicketCounter ticketCounter = new TicketCounter(counter1, counter2);\n```", "```cs\npublic static int[] ToInts(this string commaseparatedStringofInt, char separator) =>\n    Array.ConvertAll(commaseparatedStringofInt.Split(separator), int.Parse);\n```", "```cs\npublic IObservable<int> Filter() => _observable = from num in _observable\n    where num <= 3\n    select num;\n```", "```cs\nticketCounter.Print(ticketCounter.Filter());\n```", "```cs\npublic IObservable<int> Map() => _observable = from num in _observable\n    select num + 3;\n```", "```cs\nConsole.Write(\"\\n\\tMap (+ 3):\");\nticketCounter.Print(ticketCounter.Map());\n```", "```cs\npublic class MessageViewModel\n{\n    public string MsgId { get; set; }\n    public bool IsSuccess { get; set; }\n    public string Message { get; set; }\n\n    public override string ToString() => $\"Id:{MsgId}, Success:{IsSuccess}, Message:{Message}\";\n}\n```", "```cs\npublic class ProductRecorder : IObservable<Product>\n{\n    private readonly List<IObserver<Product>> _observers;\n\n    public ProductRecorder() => _observers = new List<IObserver<Product>>();\n\n    public IDisposable Subscribe(IObserver<Product> observer)\n    {\n        if (!_observers.Contains(observer))\n            _observers.Add(observer);\n        return new Unsubscriber(_observers, observer);\n    }\n...\n}\n```", "```cs\npublic void Record(Product product)\n{\n    var discountRate = product.Discount.FirstOrDefault(x => x.ProductId == product.Id)?.DiscountRate;\n    foreach (var observer in _observers)\n    {\n        if (discountRate == 0 || discountRate - 100 <= 1)\n            observer.OnError(\n                new Exception($\"Product:{product.Name} has invalid discount rate {discountRate}\"));\n        else\n            observer.OnNext(product);\n    }\n}\n```", "```cs\npublic void EndRecording()\n{\n    foreach (var observer in _observers.ToArray())\n        if (_observers.Contains(observer))\n            observer.OnCompleted();\n    _observers.Clear();\n}\n```", "```cs\npublic void OnCompleted()\n{\n    PrepReportData(true, $\"Report has completed: {Name}\");\n    Unsubscribe();\n}\n\npublic void OnError(Exception error) => PrepReportData(false, $\"Error ocurred with instance: {Name}\");\n\npublic void OnNext(Product value)\n{\n    var msg =\n        $\"Reporter:{Name}. Product - Name: {value.Name}, Price:{value.Price},Desc: {value.Description}\";\n    PrepReportData(true, msg);\n}\n```", "```cs\nprivate void PrepReportData(bool isSuccess, string message)\n{\n    var model = new MessageViewModel\n    {\n        MsgId = Guid.NewGuid().ToString(),\n        IsSuccess = isSuccess,\n        Message = message\n    };\n\n    Reporter.Add(model);\n}\n```", "```cs\npublic virtual void Subscribe(IObservable<Product> provider)\n{\n    if (provider != null)\n        _unsubscriber = provider.Subscribe(this);\n}\n\nprivate void Unsubscribe() => _unsubscriber.Dispose();\n```", "```cs\n<a asp-action=\"Report\">Audit Report</a>\n```", "```cs\nvar mango = _repositry.GetProduct(new Guid(\"09C2599E-652A-4807-A0F8-390A146F459B\"));\nvar apple = _repositry.GetProduct(new Guid(\"7AF8C5C2-FA98-42A0-B4E0-6D6A22FC3D52\"));\nvar orange = _repositry.GetProduct(new Guid(\"E2A8D6B3-A1F9-46DD-90BD-7F797E5C3986\"));\nvar model = new List<MessageViewModel>();\n//provider\nProductRecorder productProvider = new ProductRecorder();\n//observer1\nProductReporter productObserver1 = new ProductReporter(nameof(mango));\n//observer2\nProductReporter productObserver2 = new ProductReporter(nameof(apple));\n//observer3\nProductReporter productObserver3 = new ProductReporter(nameof(orange));\n```", "```cs\n//subscribe\nproductObserver1.Subscribe(productProvider);\nproductObserver2.Subscribe(productProvider);\nproductObserver3.Subscribe(productProvider);\n```", "```cs\n//Report and Unsubscribe\nproductProvider.Record(mango);\nmodel.AddRange(productObserver1.Reporter);\nproductObserver1.Unsubscribe();\nproductProvider.Record(apple);\nmodel.AddRange(productObserver2.Reporter);\nproductObserver2.Unsubscribe();\nproductProvider.Record(orange);\nmodel.AddRange(productObserver3.Reporter);\nproductObserver3.Unsubscribe();\n```", "```cs\n@model IEnumerable<MessageViewModel>\n\n    <thead>\n    <tr>\n        <th>\n            @Html.DisplayNameFor(model => model.IsSuccess)\n        </th>\n        <th>\n            @Html.DisplayNameFor(model => model.Message)\n        </th>\n    </tr>\n    </thead>\n```", "```cs\n    <tbody>\n    @foreach (var item in Model)\n    {\n        <tr>\n            <td>\n                @Html.HiddenFor(modelItem => item.MsgId)\n                @Html.DisplayFor(modelItem => item.IsSuccess)\n            </td>\n            <td>\n                @Html.DisplayFor(modelItem => item.Message)\n            </td>\n\n        </tr>\n    }\n    </tbody>\n</table>\n```", "```cs\npublic class Sort\n{\n    public SortOrder Order { get; set; } = SortOrder.A;\n    public string ColName { get; set; }\n    public ColumnType ColType { get; set; } = ColumnType.Text;\n}\n```", "```cs\npublic IEnumerable<Product> GetProducts(Sort sort)\n{\n    if(sort.ColName == null)\n        sort.ColName = \"\";\n    switch (sort.ColName.ToLower())\n    {\n        case \"categoryname\":\n        {\n            var products = sort.Order == SortOrder.A\n                ? ListProducts().OrderBy(x => x.Category.Name)\n                : ListProducts().OrderByDescending(x => x.Category.Name);\n            return PDiscounts(products);\n\n        }\n```", "```cs\n\n       case \"productname\":\n        {\n            var products = sort.Order == SortOrder.A\n                ? ListProducts().OrderBy(x => x.Name)\n                : ListProducts().OrderByDescending(x => x.Name);\n            return PDiscounts(products);\n        }\n```", "```cs\n\n        case \"productprice\":\n        {\n            var products = sort.Order == SortOrder.A\n                ? ListProducts().OrderBy(x => x.Price)\n                : ListProducts().OrderByDescending(x => x.Price);\n            return PDiscounts(products);\n        }\n        default:\n            return PDiscounts(ListProducts().OrderBy(x => x.Name));\n    }\n}\n```", "```cs\nprivate IIncludableQueryable<Product, Category> ListProducts() =>\n    _inventoryContext.Products.Include(c => c.Category);\n```", "```cs\n <thead>\n        <tr>\n            <th>\n                @Html.ActionLink(Html.DisplayNameFor(model => model.CategoryName), \"Index\", new Sort { ColName = \"CategoryName\", ColType = ColumnType.Text, Order = SortOrder.A })\n            </th>\n            <th>\n                @Html.ActionLink(Html.DisplayNameFor(model => model.ProductName), \"Index\", new Sort { ColName = \"ProductName\", ColType = ColumnType.Text, Order = SortOrder.A })\n\n            </th>\n            <th>\n                @Html.ActionLink(Html.DisplayNameFor(model => model.ProductDescription), \"Index\", new Sort { ColName = \"ProductDescription\", ColType = ColumnType.Text, Order = SortOrder.A })\n            </th>\n        </tr>\n    </thead>\n```", "```cs\n@using (Html.BeginForm())\n{\n    <p>\n        Search by: @Html.TextBox(\"searchTerm\")\n        <input type=\"submit\" value=\"Search\" class=\"btn-sm btn-success\" />\n    </p>\n}\n```", "```cs\npublic IActionResult Index([FromQuery]Sort sort, string searchTerm)\n{\n    var products = _repositry.GetProducts(sort, searchTerm);\n    return View(products.ToProductvm());\n}\n```", "```cs\nprivate IEnumerable<Product> ListProducts(string searchTerm = \"\")\n{\n    var includableQueryable = _inventoryContext.Products.Include(c => c.Category).ToList();\n    if (!string.IsNullOrEmpty(searchTerm))\n    {\n        includableQueryable = includableQueryable.Where(x =>\n            x.Name.Contains(searchTerm) || x.Description.Contains(searchTerm) ||\n            x.Category.Name.Contains(searchTerm)).ToList();\n    }\n\n    return includableQueryable;\n}\n```", "```cs\nvar includableQueryable = _inventoryContext.Products.Include(c => c.Category).ToList();\nif (!string.IsNullOrEmpty(searchTerm))\n{\n    includableQueryable = includableQueryable.Where(x =>\n        x.Name.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase) ||\n        x.Description.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase) ||\n        x.Category.Name.Contains(searchTerm, StringComparison.InvariantCultureIgnoreCase)).ToList();\n}\n```", "```cs\npublic class PagedList<T> : List<T>\n{\n    public PagedList(List<T> list, int totalRecords, int currentPage, int recordPerPage)\n    {\n        CurrentPage = currentPage;\n        TotalPages = (int) Math.Ceiling(totalRecords / (double) recordPerPage);\n\n        AddRange(list);\n    }\n}\n```", "```cs\npublic IActionResult Index([FromQuery] Sort sort, string searchTerm, \n    string currentSearchTerm,\n    int? pagenumber,\n    int? pagesize)\n```", "```cs\n@{\n    var prevDisabled = !Model.HasPreviousPage ? \"disabled\" : \"\";\n    var nextDisabled = !Model.HasNextPage ? \"disabled\" : \"\";\n}\n\n<a asp-action=\"Index\"\n   asp-route-sortOrder=\"@ViewData[\"CurrentSort\"]\"\n   asp-route-pageNumber=\"@(Model.CurrentPage - 1)\"\n   asp-route-currentFilter=\"@ViewData[\"currentSearchTerm\"]\"\n   class=\"btn btn-sm btn-success @prevDisabled\">\n    Previous\n</a>\n<a asp-action=\"Index\"\n   asp-route-sortOrder=\"@ViewData[\"CurrentSort\"]\"\n   asp-route-pageNumber=\"@(Model.CurrentPage + 1)\"\n   asp-route-currentFilter=\"@ViewData[\"currentSearchTerm\"]\"\n   class=\"btn btn-sm btn-success @nextDisabled\">\n    Next\n</a>\n```", "```cs\nexport class Product {\n  name: string;\n  cat: string; \n  desc: string;\n}\n```", "```cs\n<table class='table table-striped' *ngIf=\"forecasts\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Cat. Name (C)</th>\n      <th>Price(F)</th>\n      <th>Desc</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let forecast of forecasts\">\n      <td>{{ forecast.productName }}</td>\n      <td>{{ forecast.categoryName }}</td>\n      <td>{{ forecast.productPrice }}</td>\n      <td>{{ forecast.productDescription }}</td>\n    </tr>\n  </tbody>\n</table>\n```"]