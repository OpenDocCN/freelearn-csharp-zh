["```cs\n{\n    Name: string,\n    Surname: string,\n    Address: string\n}\n```", "```cs\n{\n    Name: string,\n    Surname: string,\n}\n```", "```cs\n{\n    Name: string,\n    Surname: string,\n    Address: \n        {\n            Country: string,\n            Town: string\n            Location: string\n        }\n}\n```", "```cs\nhttps://mybank.com/bankaccounts/{bank account number}\n```", "```cs\nhttps://mybank.com/bankaccounts/{bank account number}/operations\n```", "```cs\nAuthorization: Api-Key <string known by both server and client>\n```", "```cs\nX-API-Key: <string known by both server and client>\n```", "```cs\nAuthorization: Bearer <bearer token string>\n```", "```cs\n{\n  \"alg\": \"RS256\",\n  \"typ\": \"JWT\"\n}\n```", "```cs\n{\n  \"iss\": \"issuerbomain.com\"\n  \"sub\": \"example\",\n  \"aud\": [\"S1\", \"S2\"],\n  \"roles\": [\n    \"ADMIN\",\n    \"USER\"\n  ],\n  \"exp\": 1512975450,\n  \"iat\": 1512968250230\n}\n```", "```cs\n<header BASE64 string>.<payload base64 string>\n```", "```cs\n<header BASE64 string>.<payload base64 string>.<signature string>\n```", "```cs\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        CreateHostBuilder(args).Build().Run();\n    }\n\n    public static IHostBuilder CreateHostBuilder(string[] args) =>\n        Host.CreateDefaultBuilder(args)\n            .ConfigureWebHostDefaults(webBuilder =>\n            {\n                webBuilder.UseStartup<Startup>();\n            });\n}\n```", "```cs\n{\n  \"iisSettings\": {\n    \"windowsAuthentication\": false, \n    \"anonymousAuthentication\": true, \n    \"iisExpress\": {\n      \"applicationUrl\": \"http://localhost:2575\",\n      \"sslPort\": 44393\n    }\n  },\n  \"profiles\": {\n    \"IIS Express\": {\n      \"commandName\": \"IISExpress\",\n      \"launchBrowser\": true,\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      }\n    },\n    ...\n    ...\n    }\n  }\n}\n```", "```cs\n<PropertyGroup>\n    ...\n    <AspNetCoreHostingModel>OutOfProcess</AspNetCoreHostingModel>\n</PropertyGroup>\n```", "```cs\npublic void Configure(IApplicationBuilder app, \n    IWebHostEnvironment env)\n{\n    if (env.IsDevelopment())\n    {\n        app.UseDeveloperExceptionPage();\n    }\n\n    app.UseHttpsRedirection();\n\n    app.UseRouting();\n\n    app.UseAuthorization();\n\n    app.UseEndpoints(endpoints =>\n    {\n        endpoints.MapControllers();\n    });\n}\n```", "```cs\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class ValuesController : ControllerBase\n    {\n        // GET api/values/5\n        [HttpGet(\"{id}\")]\n        public ActionResult<string> Get(int id)\n        {\n            ...\n```", "```cs\n[HttpGet]\npublic ... Get()\n```", "```cs\n...MyAcrionMethod(....[FromHeader] string myHeader....) \n// x is taken from a request header named myHeader\n\n...MyAcrionMethod(....[FromServices] MyType x....) \n// x is filled with an istance of MyType through dependency injection\n```", "```cs\npublic Task ExecuteResultAsync (ActionContext context)\n```", "```cs\npublic class MyType\n{\n    [Required]\n    public string Name{get; set;}\n    ...\n    [MaxLength(64)]\n    public string Description{get; set;}\n}\n```", "```cs\npublic async Task<IActionResult> MyMethod(......)\n{\n    await MyBusinessObject.MyBusinessMethod();\n    ...\n}\n\npublic async Task<ActionResult<MyType>> MyMethod(......)\n{\n    ...\n```", "```cs\nIf(User.IsInRole(\"Administrators\") || User.IsInRole(\"SuperUsers\"))\n{\n    ...\n}\nelse return Forbid();\n```", "```cs\n[Authorize(Roles = \"Administrators,SuperUsers\")]\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n    services.AddMvc();\n    ...\n    services.AddAuthorization(options =>\n    {\n        options.AddPolicy(\"Father\", policy => \n            policy.RequireAssertion(context =>\n                context.User\n                    .HasClaim(c =>c.Type == \"Married\") &&\n                context.User\n                    .HasClaim(c => c.Type == \"HasSon\")));\n\n    });\n}\n```", "```cs\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n    ...\n    app.UseAuthentication();//authentication middleware\n    app.UseMvc();\n\n}\n```", "```cs\nservices.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)\n    .AddJwtBearer(options => {\n        options.TokenValidationParameters =\n            new TokenValidationParameters\n            {\n                ValidateIssuer = true,\n                ValidateAudience = true,\n                ValidateLifetime = true,\n                ValidateIssuerSigningKey = true,\n\n                ValidIssuer = \"My.Issuer\",\n                ValidAudience = \"This.Website.Audience\",\n                IssuerSigningKey = \n                new SymmetricSecurityKey(Encoding.ASCII.GetBytes(\"MySecret\"))\n    };\n});\n```", "```cs\n.AddJwtBearer(options => {\n        options.Authority = \"https://www.MyAuthorizationserver.com\";\n        options.TokenValidationParameters =...\n        ...\n```", "```cs\nvar claims = new List<Claim> \n{ \n   new Claim(...), \n   new Claim(...) ,\n   ...\n};\n\nvar token = new JwtSecurityToken( \n          issuer: \"MyIssuer\", \n          audience: ..., \n          claims: claims, \n          expires: DateTime.UtcNow.AddMinutes(expiryInMinutes), \n          signingCredentials: \n                new SymmetricSecurityKey(Encoding.ASCII.GetBytes(\"MySecret\")); \n\n       return OK(new JwtSecurityTokenHandler().WriteToken(token)); \n```", "```cs\n[HttpGet(\"{id}\")] \n[ProducesResponseType(typeof(MyReturnType), StatusCodes.Status200OK)] \n[ProducesResponseType(typeof(MyErrorReturnType), StatusCodes.Status404NotFound)]\npublic IActionResult GetById(int id)...\n\n```", "```cs\n [ProducesResponseType(StatusCodes.Status403Forbidden)]\n```", "```cs\napp.UseSwagger(); //open api middleware\napp.UseAuthentication();\napp.UseMvc();\n```", "```cs\nservices.AddSwaggerGen(c =>\n{        \n    c.SwaggerDoc(\"MyServiceName\", new Info\n    {\n        Version = \"v1\",\n        Title = \"ToDo API\",\n        Description = \"My service description\",\n        TermsOfService = \"My terms of service\",\n        Contact = new Contact\n        {\n            Name = \"My Contact Name\",\n            Email = string.Empty,\n            Url = \"https://MyContatcUrl.com\"\n        },\n        License = new License\n        {\n            Name = \"My License name\",\n            Url = \"https://MyLicensecUrl.com\"\n        }\n    });\n});\n```", "```cs\nvar security = new Dictionary<string, IEnumerable<string>>\n{\n    {\"Bearer\", new string[] { }},\n};\n\nc.AddSecurityDefinition(\"Bearer\", new ApiKeyScheme\n{\n    Description = \"JWT Authorization header using the Bearer scheme. \n    Example: \\\"Authorization: Bearer {token}\\\"\",\n    Name = \"Authorization\",\n    In = \"header\",\n    Type = \"apiKey\"\n});\nc.AddSecurityRequirement(security);\n```", "```cs\n//adds a description to the REST method\n\n/// <summary>\n/// Deletes a specific TodoItem.\n/// </summary>\n/// <param name=\"id\"></param> \n[HttpDelete(\"{id}\")]\npublic IActionResult Delete(long id)\n```", "```cs\n//adds an example of usage\n\n/// <summary>\n/// Creates an item.\n/// </summary>\n/// <remarks>\n/// Sample request:\n///\n/// POST /MyItem\n/// {\n/// \"id\": 1,\n/// \"name\": \"Item1\"\n/// }\n///\n/// </remarks>\n```", "```cs\n//Add input parameters and return object descriptions\n\n/// <param name=\"item\">item to be created</param>\n/// <returns>A newly created TodoItem</returns>\n/// <response code=\"201\">Returns the newly created item</response>\n/// <response code=\"400\">If the item is null</response> \n```", "```cs\n<PropertyGroup>\n  <GenerateDocumentationFile>true</GenerateDocumentationFile>\n  <NoWarn>$(NoWarn);1591</NoWarn>\n</PropertyGroup>\n```", "```cs\nvar xmlFile = $\"{Assembly.GetExecutingAssembly().GetName().Name}.xml\";\nvar xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);\nc.IncludeXmlComments(xmlPath);\n```", "```cs\napp.UseSwaggerUI(c =>\n{\n    c.SwaggerEndpoint(\"/swagger/<documentation name>/swagger.json\", \"\n    <api name that appears in dropdown>\");\n});\n```", "```cs\nservices.AddHttpClient<IMyProxy, MyProxy>()\n```", "```cs\nvar myRetryPolicy = Policy.Handle<HttpRequestException>()\n    ...//policy definition\n    ...;\nservices.AddHttpClient<IMyProxy, MyProxy>()\n    .AddPolicyHandler(myRetryPolicy );\n```", "```cs\nservices.AddHttpClient<IMyProxy, MyProxy>(clientFactory =>\n{\n  clientFactory.DefaultRequestHeaders.Add(\"Accept\", \"application/json\");\n  clientFactory.BaseAddress = new Uri(\"https://www.myService.com/\");\n})\n .AddPolicyHandler(myRetryPolicy );\n```", "```cs\n//Add a bearer token to authenticate the call\nwebClient.DefaultRequestHeaders.Add(\"Authorization\", \"Bearer \" + token);\n...\n//Call service method with a POST verb and get response\nvar response = await webClient.PostAsJsonAsync<MyPostModel>(\"my/method/relative/path\",\n    new MyPostModel\n    {\n        //fill model here\n        ...\n    });\n//extract response status code\nvar status = response.StatusCode;\n...\n//extract body content from response\nstring stringResult = await response.Content.ReadAsStringAsync();\n```", "```cs\nvar result=JsonConvert.DeserializeObject<MyResultClass>(stringResult);\n```", "```cs\nvar response = await webClient.GetAsync(\"my/getmethod/relative/path\");\n```", "```cs\n{\n    \"ConnectionStrings\": {\n        \"DefaultConnection\": \"Server=\n        (localdb)\\\\mssqllocaldb;Database=wwtravelclub;\n        Trusted_Connection=True;MultipleActiveResultSets=true\"\n    },\n    ...\n    ...\n}\n```", "```cs\nservices.AddDbContext<WWTravelClubDB.MainDBContext>(options =>\n     options.UseSqlServer(\n            Configuration.GetConnectionString(\"DefaultConnection\"),\n            b => b.MigrationsAssembly(\"WWTravelClubDB\")));\n```", "```cs\nservices.AddSwaggerGen(c =>\n{\n    c.SwaggerDoc(\"WWWTravelClub\", new OpenAPIInfo\n    {\n        Version = \"WWWTravelClub 1.0.0\",\n        Title = \"WWWTravelClub\",\n        Description = \"WWWTravelClub Api\",\n        TermsOfService = null\n    });\n});\n```", "```cs\napp.UseSwagger();\napp.UseSwaggerUI(c =>\n{\n c.SwaggerEndpoint(\n \"/swagger/WWWTravelClub/swagger.json\", \n \"WWWTravelClub Api\");\n});\n\napp.UseEndpoints(endpoints => //preexisting code//\n{\n     endpoints.MapControllers();\n});\n```", "```cs\n[Route(\"api/packages\")]\n[ApiController]\npublic class PackagesController : ControllerBase\n{\n    [HttpGet(\"bydate/{start}/{stop}\")]\n    [ProducesResponseType(typeof(IEnumerable<PackagesListDTO>), 200)]\n    [ProducesResponseType(400)]\n    [ProducesResponseType(500)]\n    public async Task<IActionResult> GetPackagesByDate(\n        [FromServices] WWTravelClubDB.MainDBContext ctx, \n        DateTime start, DateTime stop)\n    {\n\n    }\n}\n```", "```cs\nnamespace WWTravelClubREST.DTOs\n{\n    public class PackagesListDTO\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public decimal Price { get; set; }\n        public int DuratioInDays { get; set; }\n        public DateTime? StartValidityDate { get; set; }\n        public DateTime? EndValidityDate { get; set; }\n        public string DestinationName { get; set; }\n        public int DestinationId { get; set; }\n    }\n}\n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing WWTravelClubREST.DTOs;\n```", "```cs\ntry\n{\n    var res = await ctx.Packages\n        .Where(m => start >= m.StartValidityDate\n        && stop <= m.EndValidityDate)\n        .Select(m => new PackagesListDTO\n        {\n            StartValidityDate = m.StartValidityDate,\n            EndValidityDate = m.EndValidityDate,\n            Name = m.Name,\n            DuratioInDays = m.DuratioInDays,\n            Id = m.Id,\n            Price = m.Price,\n            DestinationName = m.MyDestination.Name,\n            DestinationId = m.DestinationId\n        })\n        .ToListAsync();\n    return Ok(res);\n}\ncatch\n{\n    return StatusCode(500);\n}\n```", "```cs\n{\n  \"errors\": {\n    \"start\": [\n      \"The value '2019' is not valid.\"\n    ]\n  },\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"traceId\": \"80000008-0000-f900-b63f-84710c7967bb\"\n}\n```"]