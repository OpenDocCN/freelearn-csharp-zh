["```cs\npublic class LocalSpaceTest : MonoBehaviour\n{\n    private Vector3 _localPosition = new Vector3(-2, 0, 0);\n    private Vector3 _localScale = new Vector3(1, 2, 1);\n    private Transform _transform;\n    private void Start()\n    {\n        _transform = gameObject.transform;\n        _transform.localPosition = _localPosition;\n        _transform.localScale = _localScale;\n    }\n}\n```", "```cs\nusing UnityEngine;\npublic class WorldSpaceTest : MonoBehaviour\n{\n    void Start()\n    {\n        transform.position = new Vector3(0, 1, 0);\n    }\n}\n```", "```cs\npublic void SetPositionAndRotation(Vector3 position, Quaternion \n  rotation);\n```", "```cs\nusing UnityEngine;\npublic class ScreenSpaceTest : MonoBehaviour\n{\n    void Update()\n    {\n        Vector2 mousePosition = Input.mousePosition;\n        Debug.Log($\"Mouse Position: {mousePosition}\");\n    }\n}\n```", "```cs\npublic Ray ScreenPointToRay(Vector3 pos);\npublic Vector3 ScreenToWorldPoint(Vector3 position);\n```", "```cs\n    Ray _ray;\n    private void FixedUpdate()\n    {\n      _ray =\n        Camera.main.ScreenPointToRay(Input.mousePosition);\n      if (Physics.Raycast(_ray, out RaycastHit hit, 50))\n      {\n          Debug.DrawLine(_ray.origin, hit.point,\n            Color.red);\n        }\n    }\n```", "```cs\n    private void Start()\n    {\n        var vector1 = new Vector3(1, 1, 1);\n        var vector2 = new Vector3(1, 2, 3);\n        var addVector = vector1 + vector2;\n        var subVector = vector1 - vector2;\n        Debug.Log($\"Addition: {addVector}\");\n        Debug.Log($\"Subtraction: {subVector}\");\n    }\n```", "```cs\n    private void Update()\n    {\n        transform.Translate(_speed * Time.deltaTime *\n          Vector3.forward);\n    }\n```", "```cs\npublic static float Dot(Vector3 lhs, Vector3 rhs);\n```", "```cs\npublic class VectorTest : MonoBehaviour\n{\n    private Vector3 _vectorA = new Vector3(0, 1, -1);\n    private Vector3 _vectorB = new Vector3(5, 0, 5);\n    private void Start()\n    {\n        var result = Vector3.Dot(_vectorA, _vectorB);\n        Debug.Log(result);\n    }\n}\n```", "```cs\npublic static Vector3 Cross(Vector3 lhs, Vector3 rhs);\n```", "```cs\n    void FixedUpdate()\n    {\n        var vector1 = new Vector3(0, 1, 0);\n        var vector2 = new Vector3(1, 0, 1);\n        Debug.DrawLine(Vector3.zero, vector1, Color.green);\n        Debug.DrawLine(Vector3.zero, vector2,\n          Color.yellow);\n        var resultVector = Vector3.Cross(vector1, vector2);\n        Debug.DrawLine(Vector3.zero, resultVector,\n          Color.cyan);\n    }\n```", "```cs\nusing UnityEngine;\npublic class MatrixTest : MonoBehaviour\n{\n    void Start()\n    {\n        var translationMatrix = new Matrix4x4(\n            new Vector4(1, 0, 0, 0),\n            new Vector4(0, 1, 0, 0),\n            new Vector4(0, 0, 1, 0),\n            new Vector4(3, 2, 1, 1)\n        );\n        var newPosition =\n          translationMatrix.MultiplyPoint\n(transform.position);\n        transform.position = newPosition;\n    }\n}\n```", "```cs\npublic static Matrix4x4 Rotate(Quaternion q);\n```", "```cs\n        var rotation = Quaternion.Euler(0, 90, 0);\n        var rotationMatrix = Matrix4x4.Rotate(rotation);\n        var newPosition =\n          rotationMatrix.MultiplyPoint(transform.position);\n        transform.position = newPosition;\n```", "```cs\npublic static Matrix4x4 Scale(Vector3 vector);\n```", "```cs\n    private void ScalingMatrixTest()\n    {\n        var scale = new Vector3(3, 2, 1);\n        var scalingMatrix = Matrix4x4.Scale(scale);\n        var newPosition =\n          scalingMatrix.MultiplyPoint(transform.position);\n        transform.position = newPosition;\n    }\n```", "```cs\npublic static Quaternion LookRotation(Vector3 forward,\n  [DefaultValue(\"Vector3.up\")] Vector3 upwards);\n```", "```cs\nusing UnityEngine;\npublic class LookAtTest : MonoBehaviour\n{\n    [SerializeField] private Transform _targetTransform;\n    private void Update()\n    {\n        if (_targetTransform == null) return;\n        var dir = _ targetTransform.position –\n          transform.position;\n        transform.rotation = Quaternion.LookRotation(dir);\n    }\n}\n```", "```cs\npublic static Quaternion Slerp(Quaternion a, Quaternion b, \n  float t);\n```", "```cs\nusing UnityEngine;\npublic class OrbitScript : MonoBehaviour\n{\n    [SerializeField] private Transform _target;\n    void Update()\n    {\n        if (_target == null) return;\n        var dir = _target.position - transform.position;\n        var targetRotation = Quaternion.LookRotation(dir);\n        var currentRotation = transform.localRotation;\n        transform.localRotation =\n          Quaternion.Slerp(currentRotation, targetRotation,\n          Time.deltaTime);\n        transform.Translate(0, 0, 5 * Time.deltaTime);\n    }\n}\n```", "```cs\npublic static Quaternion Euler(Vector3 euler);\n```", "```cs\nusing UnityEngine;\npublic class EulerAnglesTest : MonoBehaviour\n{\n    private float _xValue;\n    private void Update()\n    {\n        _xValue += Time.deltaTime * 5;\n        var eulerAngles = new Vector3(_xValue, 0, 0);\n        transform.rotation = Quaternion.Euler(eulerAngles);\n    }\n}\n```"]