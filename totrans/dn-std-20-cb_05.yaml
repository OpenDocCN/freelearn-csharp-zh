- en: XML and Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be looking at these recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library that reads and writes to an XML file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an ASP.NET MVC application to use the XMLLib library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing an XML file using LINQ to XML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter05](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter05)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/uQTMeB](https://goo.gl/uQTMeB)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: XML stands for Extensible Markup Language and is similar to HTML. XML is used
    to store and read data. Mainly, XML is a data storage system and is also used
    to transport data. C# supports XML within the language using the `System.XML`
    namespace. You will be able to read, write, and parse XML data using this namespace.
    With the support of LINQ, it's much easier to work with XML-based data.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a library that reads and writes to an XML file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be using a .NET Standard 2.0 library to create and write
    to an XML file. We will also be using the same library to write data to an XML
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's fire up Visual Studio 2017 and get things done. Make sure you have the
    latest version of Visual Studio 2017 installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter5.XmlDoc` and, in the Location: textbox,
    select path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/308964a5-35b3-47ac-b647-0fbc05f0425c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/96bc893c-26ec-4e4d-a96c-c360b7e456e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter5.XmlDoc` label in the Solution Explorer and
    select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b7564635-db3a-4afd-b5ca-386f3d5ed78d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter5.XmlDoc.XmlLib`, leave the other defaults
    as they are, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/188216b7-5008-4b33-bd0c-c82e51e5cd20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/270f9692-ea73-47d6-a722-2f160463e753.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `XMLLog.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the `XMLLog.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up until you reach the `using` directives and add these at the end of
    the last `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, scroll down and add this class variable on top of the `XMLLog` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s add the constructor for the `XMLLog` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following public method after the constructor of the class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add this code next to the `WriteToLog()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We created a blank solution in steps 1 to 5 and gave the solution a proper name.
    Blank solutions are always a good start for a project of any scale. Then, in steps
    6 to 10, we added a .NET Standard 2.0 library project to the solution. In steps
    11, 12, and 13, we renamed the default class template generated from Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: In step 15, we added all the required namespaces for our library. `System.Xml`
    and `System.Xml.Linq` are the two namespaces we are going to focus on. `System.Xml`
    gives you the functionality of creating and maintaining XML documents. `System.Xml.Linq`
    is a LINQ extension to manipulate XML data.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we created a class-level private variable to store the path of the
    XML file. In step 17, we created the constructor for the class that takes a parameter
    as a string. This parameter is the filename with the path of the XML file. It
    also populates the private variable created in step 16\. In step 18, we added
    a public method to write an XML file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the first line of code, we check for the existence of the XML file. If it
    doesn''t exist, the following piece of code will take over:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: We have used the `XmlWriter` class and its `Create` method to create the XML
    file. In this case, it is wrapped inside a `using` keyword. This is a good practice
    if the class is implementing an `IDisposable` interface, and when the lifetime
    is limited to a method. The `using` statement calls the `Dispose` method on the
    object in the correct way, and it also causes the object itself to go out of scope
    as soon as `Dispose` is called. Finally, the `XmlWriter` class's `Flush()` method
    will clear the buffer and the `Close()` method will close the writer stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next few lines of code, we started writing the document, and finally
    we cleared things up and closed the `XmlWriter`. If the file exists, we created
    a few lines of code to handle the existing XML document and append data to it.
    The code looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this part of the code, we created an `XDocument` class to handle the existing
    XML file. This class is referenced from the `System.Xml.Linq` namespace. In the
    first line, we loaded the existing XML file. We looked for the root element of
    the document in the second line. We picked up all the descendants of the root
    element and picked the last element from that list. This is the point at which
    we are going to add the new data. We have used the `AddAfterSelf()` method to
    add the new entry to the XML document and finally, we saved the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 19, we created a method to read an existing XML document. In the first
    line, we created a dictionary to store the data we read from the XML document.
    Then, we checked whether the file is there to read and created code to read the
    file. We used the `XmlReader()` class this time to read the data and store it
    in the dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We have used a `while` loop to go through each line of the XML document and
    used a `switch` statement to check for the correct element and store it in the
    dictionary. As you can see, by using a `counter` (`line`) variable, we have created
    a unique key for the dictionary as well. Finally, we returned the populated dictionary.
    In step 20, we performed a quick build to check for correct syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an ASP.NET MVC application to use the XMLLib library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating an ASP.NET MVC application to use the library.
    This time, it will be under Windows and will be using the full .NET Framework
    under Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make sure we have completed the previous recipe. In that recipe, we built
    a .NET Standard 2.0 library to create and read an XML document. Let's create an
    ASP.NET MVC application to use the library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter5.XmlDoc` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the `Chapter5.XmlDoc` solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Web and select ASP.NET Web Application (.NET Framework) in the right-hand
    pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/68268733-a659-4d33-a786-b736c0960b86.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter5.XmlDoc.XmlMVC` as the name and leave
    the Location: textbox at its default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7f548e56-a535-4f90-9c9d-50eb42fd5f0f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the New ASP.NET Web Application dialog box, select Empty from the template
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select MVC in the Add folders and core references for: option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/771c4ff1-22f6-4999-922f-fec4d72b0600.png)'
  prefs: []
  type: TYPE_IMG
- en: Leave the rest as it is and click OK to create the default ASP.NET MVC web application
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78b382b8-ac7d-4d9c-a240-f19fef0f749f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the References label under the `Chapter5.XmlDoc.XmlMVC`
    project and select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager dialog box, select Projects in the left-hand pane
    and select `Chapter5.XmlDoc.XmLib` in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23270984-2046-4736-9c77-a3e8a6f5ddfe.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, right-click on the `Controllers` folder inside the `Chapter5.XmlDoc.XmlMVC`
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add | Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add Scaffold dialog box, select MVC 5 Controller – Empty from the template
    list and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9c589a67-dbdd-4512-a1e1-9247e2af7353.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Add Controller dialog box, type `HomeController` in the Controller
    name: textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e8dea97a-c1bf-4e9a-8065-632b50bd4e6a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the `HomeController.cs` label under the `Controllers` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window, right-click on the `Index()` method name and select Add
    View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Leave the defaults in the Add View dialog box and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fefa72b9-9813-4ef8-bdae-de5dd42398b8.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the `HomeController.cs` tab in the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this `using` directive to the top of the code, next to the last line of
    the directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s add this code inside the `Index()` method and before the `return`
    statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *F5* to test our code and you should get an output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6904df07-be57-4445-94eb-48c45fceca58.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now close the browser and, in the Solution Explorer, click on the Show All
    Files icon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b4b77462-fc32-4963-9491-7d8e8c92ddc4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you should see that the `textlog.xml` label is created and the Solution
    Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ed2d8c18-9147-4f0c-8ed4-496a1c7acbb7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the `testlog.xml` label and you should see output similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0f9b9cd3-ff3b-4acc-8128-c50fa291f6f2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s click on the `HomeController.cs` tab and add this code next to
    the `Index()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, right-click on the `Display()` method name and select Add View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow step 22 to add the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, in `Display.cshtml`, add the following code next to the `<h2>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's press *F5* to debug the code. By default, this should load `Display.chtml`
    in the browser; if not, type `http://locahost<portnumber/Home/Display` and press
    *Enter*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output similar to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24ccc89b-f5fc-4075-bf57-d5c7f4070818.png)'
  prefs: []
  type: TYPE_IMG
- en: Now close your browser and we are done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 10, we opened an existing solution that contained the library
    for reading and writing XML files. Then, in these steps, we added an ASP.NET MVC
    project to that solution. In step 13, we added a reference to our library built
    in the previous recipe. This will allow you to access available methods from the
    library.
  prefs: []
  type: TYPE_NORMAL
- en: 'In steps 16 to 20, we added a controller to the project and named it `HomeController`.
    In step 24, we added a `using` directive to reference the library. In step 25,
    we created code to create an instance of the `XMLLog` class and used it in methods
    to create and write to the XML document. In the following line of code, we are
    giving the path and name of our XML file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`Server.MapPath("~")` guarantees the file is created at the root of our web
    folder. In steps 26 to 29, we confirmed our code is working and the XML file is
    created with the log entries. In step 30, we created a new action for our `HomeController`.
    We created an instance of the `XMLLog` class and used it in methods to read the
    information from the log file. Then we stored the values in `ViewBag`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In step 32, we created a view for the `Display` action, such as we did in step
    22\. Then we added code for the view in step 32, which converted `ViewBag` to
    a dictionary and displayed the content inside it. Finally, we tested the output
    in steps 34 and 35.
  prefs: []
  type: TYPE_NORMAL
- en: Processing an XML file using LINQ to XML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a .NET Standard 2.0 library that reads XML
    data using LINQ to XML. LINQ to XML is a LINQ enabled in-memory programming interface.
    It enables you to work with XML using your favorite .NET language. C# is used
    in this book to describe the code. In this recipe, we will mainly be looking at
    querying an XML document using LINQ to XML. We have used LINQ to XML to write
    to an XML file in the *A library that reads and writes to an XML file* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe assumes you have used LINQ. We are focusing on LINQ with XML documents.
    Let's fire up Visual Studio and get started.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Projectto create a project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Other Project Types node in the left-hand
    pane and select Visual Studio Solutions. In the right-hand pane, select Blank
    Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: textbox, type `Chapter5.XmlLinq` and, in the Location: textbox,
    select a path from the drop-down box or click on the Browse... button to locate
    a path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cb5f87f6-ad6b-4fdb-b062-b9d8047d724a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54bb3e4b-3592-4274-abf3-78fc9eece2dd.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the `Chapter5.XmlLinq` label in the Solution Explorer and
    select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the New Project dialog box, expand the Visual C# node.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Standard in the left-hand pane and Class Library (.NET Standard)
    in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93da862e-656c-4cd7-8a44-3e04475ac5ef.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter5.XmlLinq.XmlLinqLib`, leave the other
    defaults as they are, and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/28b8444d-9c8f-4e26-ac5c-376c565beec2.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, the Solution Explorer (*Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7c1a78e5-a95d-4a08-9237-c771e7e1007a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select `Class1.cs` in the Solution Explorer and press *F2* to rename the
    file `XmlBooks.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box that asks to rename the class name
    as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on the `XmlBooks.cs` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` directives next to the last directive in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following private variable to store the XML filename:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create the default constructor as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now add the following method to read the XML file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's press *Ctrl* + *Shift* + *B* for a quick build to check that all
    the syntax is intact.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 10, we added a blank solution and a .NET Standard 2.0 class library
    to the project. We assigned proper names to our solution and the class library
    project. Then, in step 15, we added using directives. These directives help us
    to get the functionality we require for generic collections and LINQ support for
    XML.
  prefs: []
  type: TYPE_NORMAL
- en: In step 16, we added a private variable to store the XML filename. Then, in
    step 17, we created code to populate this variable using a default constructor
    for the `XmlBooks` class. In step 18, we created a method to read the titles of
    the books contained in the XML file. This XML file will be created in the next
    recipe. In the code, we have used `XDocument` to load the XML file, which was
    supported by the `System.Xml.Linq` namespace. We stored the decedents in a variable,
    iterated each element, and stored them in a `List<string>` generic collection.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we built the code to check the syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET Core console application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a .NET Core console application to use the
    library created in the previous recipe. You can try this recipe on any platform,
    such as Linux or macOS, since .NET Core is a cross-platform library. In this recipe,
    we will be focusing on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get ready by looking at the previously built .NET Standard 2.0 library
    that reads an XML file. Make sure you have this XML file created under your project.
    We will be using this file to read. This sample is from the MSDN library itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter5.XmlLinq` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the `Chapter5.XmlLinq` solution label. Click File | Add | New
    Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Core and select Console App (.NET Core) in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5180dc5f-a7ed-4d1e-9fcc-ef453a10e839.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: textbox, type `Chapter5.XmlLinq.XmlCore` as the name of the
    project. The rest of the fields can be left as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea5625b6-c6c7-46b6-a996-e71b9eec10fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should display like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/10217c10-99bd-40ba-8163-0973c5a7962d.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the Dependencies label under `Chapter5.XmlLinq.XmlCore`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, click on the Projects label in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/326b7696-d278-4750-ab83-7ca506011f4c.png)'
  prefs: []
  type: TYPE_IMG
- en: Check the `Chapter5.XmlLinq.XmlLinqLib`project in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the project name label of `Chapter5.XmlLinq.XmlCore` and select
    Add | New Item.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add New Item dialog box, in the left-hand pane, select Data under Visual
    C# Items and XML File in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5ee93787-fe7a-4403-b860-ae957761e3a9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Type `books.xml` in the Name: textbox and click Add.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now replace the existing code with the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Now double-click on `Program.cs` to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window, scroll to the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next to the last line of the `using` directives, add this `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Now replace the existing code in the `Main()` method with this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *F5* to see the output and it should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9dfe6df0-9d14-4911-8496-a5939c46435a.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Enter* to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 9, we opened an existing solution. Then, we added a .NET Core
    console application to the solution. During these steps, we assigned a proper
    name to the project. In steps 10 to 13, we added the project reference to the
    library we created in the previous recipe. These steps will allow you to use the
    available methods from the library.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 15 to 18, we added an XML file item to the project and then we populated
    it with some sample data. In step 21, we referenced our library from the .NET
    Core console application. In step 22, we added code inside the `Main()` method
    of the console application. The first line stores the path of our XML file. This
    might vary in your setup. In the next two lines, we created an instance of the
    `XmlBooks` class, used its `GetBookTitles()` method, and stored it in a variable.
    Then, using a `foreach` statement, we iterated through the list returned from
    the `GetBookTitles()` method. Finally, we executed the code.
  prefs: []
  type: TYPE_NORMAL
