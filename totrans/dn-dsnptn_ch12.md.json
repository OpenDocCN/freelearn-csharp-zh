["```cs\n    static void Main() \n    { \n        ObservableEventsDemo(); \n    }  \n\n```", "```cs\nÂ    static void ObservableEventsDemo()\n    {  \n       // Input form\n\n      var txtBoxSpellCorrect = new TextBox(); \n      var lstBoxSuggestions = new ListBox {\n        Top = txtBoxSpellCorrect.Height + 10 }; \n      var frmSpellChecker = new Form { Controls = { txtBoxSpellCorrect,\n        lstBoxSuggestions } }; \n\n```", "```cs\n    // Dispatcher scheduler for the UI thread\n\n    var _dispatcher = new DispatcherScheduler(\n      System.Windows.Threading.Dispatcher.CurrentDispatcher); \n\n    Action<string> onInputChange = word => \n    { \n        lstBoxSuggestions.Items.Clear(); \n        Console.WriteLine(\"Word Changed: \" + word); \n    }; \n\n```", "```cs\n    var input = Observable \n      .FromEventPattern(txtBoxSpellCorrect, \"TextChanged\") \n      .Select(evt => ((TextBox)evt.Sender).Text) \n      .Timestamp().Select(evt => evt.Value) \n      .Where(evt => evt.Length > 3) \n      .DistinctUntilChanged() \n      .Do(onInputChange); \n\n```", "```cs\n    Func<string, IObservable<string>> matches =\n      searchText => NorvigSpellCheckerModel.\n        Instance.SpellCheck(searchText, 5).ToObservable<string>(); \n\n```", "```cs\n    var result = from term in input \n      from words in matches(term)\n      .TakeUntil(input)\n      .Finally(() => \n      { \n         Console.WriteLine(\"Disposed Lookup For: \" + term); \n      }) \n     select words; \n\n```", "```cs\n    Action<string> OnEachSuggest = word => \n    { \n        lstBoxSuggestions.Items.Add(word); \n        Console.WriteLine(\"Match: \" + word); \n    }; \n\n    Action<Exception> OnSuggestError = ex => \n    { \n        Console.WriteLine(\"Error: \" + ex.Message); \n    }; \n\n    Action OnSuggestComplete = () => \n    { \n        lstBoxSuggestions.Items.Clear(); \n        Console.WriteLine(\"Suggestion Complete!!!\"); \n    };  \n\n```", "```cs\n    using (result.OnErrorResumeNext(\n      Observable.Empty<string>()) \n      .ObserveOn(_dispatcher) \n      .SubscribeOn(Scheduler.Default) \n      .Subscribe(\n OnEachSuggest,\n          OnSuggestError, \n          OnSuggestComplete))                 \n    Application.Run(frmSpellChecker); \n    }\n\n```", "```cs\n    public interface ISpellCheckerModel \n    { \n        IEnumerable<string> SpellCheck(string word, int count); \n    }  \n\n```", "```cs\n    public sealed class NorvigSpellCheckerModel : ISpellCheckerModel \n    { \n        private static readonly Lazy<NorvigSpellCheckerModel>\n        spellCheckerInstance = new Lazy<NorvigSpellCheckerModel>(() => \n          new NorvigSpellCheckerModel()); \n\n        private NorvigSpellCheckerModel() \n        { \n            //......... USE CODE FROM CHAPTER 9 HERE \n        } \n\n        public static NorvigSpellCheckerModel Instance \n        { \n            get \n            { \n                return spellCheckerInstance.Value; \n            } \n        } \n\n        public IEnumerable<string> SpellCheck(string word, int count) \n        { \n            //......... USE CODE FROM CHAPTER 9 HERE \n        } \n    } \n\n```", "```cs\n    public partial class frmSpellChecker : Form \n    { \n        private SpellCheckerViewModel _spellCheckerViewModel; \n        public frmSpellChecker() \n        { \n            InitializeComponent(); \n            _spellCheckerViewModel = new \n            SpellCheckerViewModel(NorvigSpellCheckerModel.Instance); \n            //Data Binding Is Done Here \n            lstBoxSuggestions.DataSource = \n              _spellCheckerViewModel.Corrections;         \n        } \n\n        private void txtBoxSpellCorrect_TextChanged(\n          object sender, EventArgs e) \n        {\n           _spellCheckerViewModel.SearchChanges(((TextBox)sender).Text); \n        } \n    } \n\n```", "```cs\n    class SpellCheckerViewModel : INotifyPropertyChanged \n    { \n        private BindingList<string> _corrections; \n        private ISpellCheckerModel _spellChecker; \n        private ISubject<string> _searchChanged; \n        private IScheduler _dispatcher; \n        public event PropertyChangedEventHandler PropertyChanged; \n\n    public BindingList<string> Corrections \n    { \n        get \n        { \n            return this._corrections; \n        } \n\n        set \n        { \n            if (value != this._corrections) \n            { \n                this._corrections = value; \n                NotifyPropertyChanged(); \n            } \n        } \n    } \n\n```", "```cs\n private void NotifyPropertyChanged([CallerMemberName]\n    String propertyName = \"\") \n    { \n        if (PropertyChanged != null) \n        { \n            this.PropertyChanged(this, \n              new PropertyChangedEventArgs(propertyName)); \n        } \n    } \n\n    public void SearchChanges(string text) \n    { \n        _searchChanged.OnNext(text); \n    } \n\n    public ISubject<string> SearchChanged \n    { \n        get \n        { \n            return _searchChanged; \n        } \n    } \n\n    public SpellCheckerViewModel(ISpellCheckerModel spellChecker) \n    { \n        _spellChecker = spellChecker; \n        _dispatcher = new DispatcherScheduler(\n          System.Windows.Threading.Dispatcher.CurrentDispatcher); \n        _corrections = new BindingList<string>(); \n        _searchChanged = new Subject<string>(); \n        Func<string, IObservable<string>> GetSuggestions = (searchText) => \n        { \n            IsProcessing = true; \n            Corrections.Clear(); \n            Error = null; \n            return _spellChecker.SpellCheck(searchText, 5)\n              .ToObservable<string>(); \n        }; \n\n        var searches = this.SearchChanged.Select(GetSuggestions); \n\n```", "```cs\n searches.Switch() \n          .Where(s => s.Length > 3) \n           .DistinctUntilChanged() \n           .SubscribeOn(Scheduler.Default) \n           .ObserveOn(_dispatcher) \n           .Subscribe(OnEachSuggest, OnSuggestError, \n             OnSuggestComplete); \n        } \n\n        private void OnEachSuggest(string searchText) \n        { \n            Corrections.Add(searchText); \n        } \n    } \n\n```", "```cs\n    class SpellCheckerViewModel : INotifyPropertyChanged \n    { \n private BindingList<string> _logs; \n private ISubject<string> _logChanged; \n        public BindingList<string> Logs \n        { \n          get \n          { \n             return this._logs; \n          } \n\n          set \n          { \n             if (value != this._logs) \n             { \n                this._logs = value; \n                NotifyPropertyChanged(); \n             } \n           } \n        }   \n\n```", "```cs\n    public void AddToLog(string text) \n    { \n        _logChanged.OnNext(text); \n    } \n\n    public SpellCheckerViewModel(ISpellCheckerModel spellChecker) \n    { \n        _logs = new BindingList<string>();\n        _logChanged = new Subject<string>(); \n\n        Func<string, IObservable<string>> GetSuggestions = (searchText) => \n        { \n            AddToLog(string.Format(\"Searching for \n              suggestions : {0}\", searchText)); \n            return _spellChecker.SpellCheck(searchText, 5)\n              .ToObservable<string>(); \n        }; \n\n        var searches = _searchChanged \n            .Select(GetSuggestions) \n            .Finally(() => AddToLog(\"Search DISPOSED!!!\")); \n        searches \n            .Switch() \n            .Where(s => s.Length > 3) \n            .DistinctUntilChanged() \n            .SubscribeOn(Scheduler.Default) \n            .ObserveOn(_dispatcher) \n            .Subscribe(OnEachSuggest, OnSuggestError, OnSuggestComplete); \n\n DoLogging(_logChanged); \n    } \n\n    private void OnEachSuggest(string searchText) \n    { \n        AddToLog(string.Format(\"Suggestion Added : {0}\", searchText)); \n    } \n\n    private IObservable<string> GetSuggestions(string searchText) \n    { \n        AddToLog(string.Format(\"Searching for suggestions : \n          {0}\", searchText)); \n    } \n\n    private void OnEachLog(string searchText) \n    { \n        Logs.Add(searchText); \n    } \n\n```", "```cs\n    private void DoLogging(IObservable<string> sequence) \n    { \n        sequence \n        .SubscribeOn(ThreadPoolScheduler.Instance) \n        .ObserveOn(_dispatcher) \n        .Subscribe(OnEachLog); \n    } \n  } \n\n```", "```cs\n    public frmSpellChecker() \n    { \n        //Data Binding Is Done Here \n        lstBoxSuggestions.DataSource = _spellCheckerViewModel.Corrections; \n        lstBoxLog.DataSource = _spellCheckerViewModel.Logs; \n    } \n\n```", "```cs\n    public partial class Form1 : Form \n    { \n        public enum Party { Republican, Democratic }; \n        public enum States { AZ, CA, FL, IN, NY }; \n        string[] xState = { \"AZ\", \"CA\", \"FL\", \"IN\", \"NY\" }; \n        double[] yRVotes = { 0, 0, 0, 0, 0 }; \n        double[] yDVotes = { 0, 0, 0, 0, 0 }; \n        Random random = new Random(); \n        class Vote \n        { \n            public Party VoteId { get; set; } \n            public string State { get; set; } \n        } \n\n        public Form1() \n        { \n            InitializeComponent(); \n            chart1.Series.Clear(); \n            DrawSimulation(chart1); \n        } \n\n```", "```cs\n    private void DrawSimulation(Chart chart1) \n    { \n        var azVotes = GenerateVotes<Vote>( \n          () => new Vote() { VoteId = CauchyDistribution(\n            random.NextDouble()), State = \"Arizona\" }).Take(200000); \n        var caVotes = GenerateVotes<Vote>( \n          () => new Vote() { VoteId = CauchyDistribution(\n            random.NextDouble()), State = \"California\" }).Take(500000); \n        var flVotes = GenerateVotes<Vote>( \n          () => new Vote() { VoteId = CauchyDistribution(\n            random.NextDouble()), State = \"Florida\" }).Take(300000); \n        var inVotes = GenerateVotes<Vote>( \n          () => new Vote() { VoteId = CauchyDistribution(\n            random.NextDouble()), State = \"Indiana\" }).Take(100000); \n        var nyVotes = GenerateVotes<Vote>( \n          () => new Vote() { VoteId = CauchyDistribution(\n            random.NextDouble()), State = \"New York\" }).Take(700000);  \n\n```", "```cs\n        var azDVotes = from v in azVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Democratic \n                   select v; \n        var azRVotes = from v in azVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Republican \n                   select v; \n        var caDVotes = from v in caVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Democratic \n                   select v; \n        var caRVotes = from v in caVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Republican \n                   select v; \n        var flDVotes = from v in flVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Democratic \n                   select v; \n        var flRVotes = from v in flVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Republican \n                   select v; \n        var inDVotes = from v in inVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Democratic \n                   select v; \n        var inRVotes = from v in inVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Republican \n                   select v; \n        var nyDVotes = from v in nyVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Democratic \n                   select v; \n        var nyRVotes = from v in nyVotes.ToObservable<Vote>() \n                   where v.VoteId == Party.Republican \n                   select v; \n\n```", "```cs\n        Series democratic = new Series(\"Democratic\"); \n        Series republican = new Series(\"Republican\"); \n        chart1.Series.Add(democratic); \n        chart1.Series.Add(republican);              \n\n```", "```cs\n        GetDemocraticVotes(States.AZ, azDVotes); \n        GetRepublicanVotes(States.AZ, azRVotes); \n        GetDemocraticVotes(States.CA, caDVotes); \n        GetRepublicanVotes(States.CA, caRVotes); \n        GetDemocraticVotes(States.FL, flDVotes); \n        GetRepublicanVotes(States.FL, flRVotes); \n        GetDemocraticVotes(States.IN, inDVotes); \n        GetRepublicanVotes(States.IN, inRVotes); \n        GetDemocraticVotes(States.NY, nyDVotes); \n        GetRepublicanVotes(States.NY, nyRVotes); \n        } \n\n```", "```cs\n    private void GetDemocraticVotes(States state, IObservable<Vote> votes) \n    { \n        int stateIndex = (int)state; \n        votes.SubscribeOn(Scheduler.Default) \n          .ObserveOn(NewThreadScheduler.Default) \n            .Subscribe(v => \n            { \n                double voteCount = yDVotes[stateIndex]; \n                yDVotes[stateIndex] = voteCount + 1; \n            }); \n    } \n\n    private void GetRepublicanVotes(States state, IObservable<Vote> votes) \n    { \n        int stateIndex = (int)state; \n        votes.SubscribeOn(Scheduler.Default) \n          .ObserveOn(NewThreadScheduler.Default) \n             .Subscribe(v => \n             { \n                double voteCount = yRVotes[stateIndex]; \n                yRVotes[stateIndex] = voteCount + 1; \n             }); \n    } \n\n```", "```cs\n    public IEnumerable<T> GenerateVotes<T>(Func<T> generator) \n    { \n        while (true) yield return generator(); \n    } \n\n    private Party CauchyDistribution(double p) \n    { \n        return Math.Tan(Math.PI * (p - 0.5)) >= 0 ? \n          Party.Democratic : Party.Republican; \n    } \n\n```", "```cs\n    private void timer1_Tick(object sender, EventArgs e) \n    { \n        chart1.Series[\"Republican\"].Points.DataBindXY(xState, yRVotes); \n        chart1.Series[\"Democratic\"].Points.DataBindXY(xState, yDVotes); \n    } \n   } \n  } \n\n```"]