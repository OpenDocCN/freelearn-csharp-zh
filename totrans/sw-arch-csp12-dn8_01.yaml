- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Understanding the Importance of Software Architecture
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解软件架构的重要性
- en: We started writing this book in 2018\. It has been five years since the publication
    of the first edition, and the importance of s**oftware architecture** for creating
    **enterprise applications** (**EAs**) that attend to our customers’ needs has
    only grown. Besides, technology itself is evolving at a speed that is hard to
    follow, and for this reason, new architectural opportunities keep emerging. So,
    we keep saying that the more we build complex and fantastic solutions, the more
    we need great software architectures to build and maintain them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们于2018年开始编写这本书。自第一版出版以来已有五年，为满足客户需求而创建的企业应用程序（**EAs**）的**软件架构**的重要性日益增长。此外，技术本身也在以难以跟上速度发展，因此，新的架构机会不断涌现。因此，我们不断强调，我们构建的解决方案越复杂、越神奇，我们就越需要伟大的软件架构来构建和维护它们。
- en: We are sure that is the reason why you decided to read this new edition of the
    book, and this is the reason why we decided to write it. It is not only a matter
    of how .NET 8 is different from .NET 6, because there are other incredible books
    that take this approach. It is truly the purpose of delivering to the community
    a book that can support developers and software architects in the difficult decision
    of what component to use while designing a solution. For this reason, in this
    new edition, we have reformulated the way we present all the content.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们确信这就是您决定阅读这本书新版本的原因，这也是我们决定编写它的原因。这不仅仅是因为.NET 8与.NET 6的不同，因为还有其他采用这种方法的令人难以置信的书籍。真正目的是向社区提供一本能够支持开发人员和软件架构师在设计解决方案时做出困难决策的组件选择的书。因此，在本版中，我们重新构思了呈现所有内容的方式。
- en: You will find while reading the chapters of this new edition that you will be
    given support for understanding the fundamentals and technology topics that are
    unavoidable when designing enterprise applications using .NET 8, C#, and cloud
    computing. Most of the examples will use Microsoft Azure, but we will always present
    this content in a way that you are not locked into a specific cloud platform.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读本版章节时，您会发现您将获得理解在设计企业应用程序时不可避免的基础和科技主题的支持，这些主题使用.NET 8、C#和云计算。大多数示例将使用Microsoft
    Azure，但我们始终以不使您局限于特定云平台的方式呈现此内容。
- en: It is important to remind you that it is not a simple task to write about this
    important subject, which offers so many alternative techniques and solutions.
    The main objective of this book is not to build an exhaustive and never-ending
    list of available techniques and solutions but to show how various families of
    techniques are related, and how they impact, in practice, the construction of
    a maintainable and sustainable solution. We hope you all enjoy this new journey!
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是提醒您，撰写关于这个重要主题并非易事，它提供了如此多的替代技术和解决方案。本书的主要目标不是构建一个详尽无遗且永不结束的技术和解决方案列表，而是展示各种技术家族之间的关系，以及它们在实际中如何影响构建可维护和可持续的解决方案。我们希望你们都能享受这次新的旅程！
- en: Specifically, in *Chapter 1*, *Understanding the Importance of Software Architecture*,
    we will discuss how the need to keep our focus on creating effective enterprise
    solutions continuously increases; users always need more new features in their
    applications. Moreover, the need to deliver frequent application versions (due
    to a quickly changing market) increases our obligation to have sophisticated software
    architecture and development techniques.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，在*第一章* *理解软件架构的重要性*中，我们将讨论为什么我们需要持续关注创建有效的企业解决方案的需求不断增加；用户总是需要他们应用程序中的更多新功能。此外，由于市场变化迅速，需要交付频繁的应用程序版本（版本），这增加了我们拥有复杂软件架构和开发技术的义务。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: What software architecture is
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件架构是什么
- en: Some software development process models that may help you as a software architect
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些可能对您作为软件架构师有帮助的软件开发过程模型
- en: The process for gathering the right information to design high-quality software
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 收集设计高质量软件所需正确信息的过程
- en: Design techniques for helping in the process of development
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助开发过程的设计技术
- en: Cases where the requirements impact the system results
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 影响系统结果的需求案例
- en: For this new edition, we have also reformulated the way we will present the
    case study of the book. You will find it in a single chapter, at the end of the
    book, where it will be easy for you to understand the whole purpose of its implementation.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个新版本，我们还将重新制定我们展示本书案例研究的方式。你将在书的最后一章找到一个单独的章节，那里将很容易理解其实施的整个目的。
- en: The case study of this book will take you through the process of creating the
    software architecture for a travel agency called **World Wild Travel Club** (**WWTravelClub**).
    The purpose of this case study is to help you understand the theory explained
    in each chapter and to provide an example of how to develop an enterprise application
    with Azure, Azure DevOps, GitHub, C# 12, .NET 8, ASP.NET Core, and other technologies
    that will be introduced in this book.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的研究案例将带你通过为名为**World Wild Travel Club**（**WWTravelClub**）的旅行社创建软件架构的过程。这个案例研究的目的帮助你理解每一章中解释的理论，并提供一个如何使用Azure、Azure
    DevOps、GitHub、C# 12、.NET 8、ASP.NET Core和其他本书将介绍的技术开发企业应用的例子。
- en: By the end of this chapter, you will understand exactly what the mission of
    software architecture is. You will also have learned what Azure is and how to
    create an account on the platform. You will also have received an overview of
    software processes, models, and other techniques that will enable you to lead
    your team.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将确切了解软件架构的使命。你还将学会什么是Azure以及如何在平台上创建账户。你还将获得软件过程、模型和其他技术的概述，这些技术将使你能够领导你的团队。
- en: What is software architecture?
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件架构是什么？
- en: That you are reading this book today is thanks to the computer scientists who
    decided to consider software development as an engineering area. This happened
    in the last century, more specifically, at the end of the sixties, when they proposed
    that the way we develop software is quite like the way we construct buildings.
    That is why we have the name **software architecture**. Just as an architect designs
    a building and oversees its construction based on that design, the main goal of
    a software architect is to ensure that the software application is implemented
    well; and good implementation requires the design of a great architectural solution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你今天之所以能阅读这本书，要归功于那些决定将软件开发视为一个工程领域的计算机科学家。这发生在上个世纪，更具体地说，是在六十年代末，当时他们提出我们开发软件的方式与建造建筑的方式非常相似。这就是为什么我们称之为**软件架构**。正如建筑师根据设计来设计建筑并监督其建造一样，软件架构师的主要目标是确保软件应用得到良好的实施；良好的实施需要设计一个优秀的架构解决方案。
- en: 'In a professional development project, you must do the following things:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个专业开发项目中，你必须做以下事情：
- en: Define the customer requirements for the solution.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义解决方案的客户需求。
- en: Design a great solution to meet those requirements.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计一个优秀的解决方案以满足那些要求。
- en: Implement the designed solution.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施设计的解决方案。
- en: Test the solution implementation.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试解决方案的实施。
- en: Validate the solution with your customer.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与客户验证解决方案。
- en: Deliver the solution in the working environment.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在工作环境中交付解决方案。
- en: Maintain the solution afterward.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在之后维护该解决方案。
- en: Software engineering defines these activities as the software development lifecycle
    fundamentals. All the theoretical software development process models (waterfall,
    spiral, incremental, agile, and so on) are somehow related to this cycle. No matter
    the model you use, if you do not perform the essential tasks in the initial stages
    of your project, you will not deliver acceptable software as a solution.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程将这些活动定义为软件开发生命周期的基本要素。所有理论上的软件开发过程模型（瀑布、螺旋、增量、敏捷等）都与这个周期有关。无论你使用哪种模型，如果你不在项目初期执行基本任务，你就不会提供可接受的软件解决方案。
- en: 'The main point about designing great solutions is foundational to the purpose
    of this book. You must understand that great real-world solutions bring with them
    a few fundamental constraints:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 关于设计优秀解决方案的主要观点是本书目的的基础。你必须理解，优秀的现实世界解决方案会带来一些基本约束：
- en: The solution needs to meet user requirements.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案需要满足用户需求。
- en: The solution needs to be delivered on time.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案需要按时交付。
- en: The solution needs to adhere to the project budget.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案需要遵守项目预算。
- en: The solution needs to deliver good quality.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案需要提供高质量。
- en: The solution needs to guarantee safe and effective future evolution.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决方案需要保证安全和有效的未来演变。
- en: Great solutions need to be sustainable, and you must understand that there is
    no sustainable software without great software architecture. Nowadays, great software
    architecture depends on both modern tools and modern environments to perfectly
    fit users’ requirements.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的解决方案需要是可持续的，你必须明白，没有优秀的软件架构就没有可持续的软件。如今，优秀的软件架构既依赖于现代工具，也依赖于现代环境，以完美满足用户需求。
- en: For this reason, this book will use some great tools provided by Microsoft.
    We decided to write the book always following the **long-term support** (**LTS**)
    versions, which is why we are now applying all the examples using .NET 8\. This
    is the second LTS version as a unified platform for software development, which
    gives us a great opportunity to create fantastic solutions.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，本书将使用微软提供的一些优秀工具。我们决定始终遵循**长期支持**（**LTS**）版本编写本书，这就是为什么我们现在正在使用.NET 8的所有示例。这是作为软件开发统一平台的第二个LTS版本，这为我们创造了创建出色解决方案的绝佳机会。
- en: '![Linha do tempo  Descrição gerada automaticamente](img/B19820_01_01.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![时间线 描述自动生成](img/B19820_01_01.png)'
- en: 'Figure 1.1: .NET support'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1：.NET支持
- en: .NET 8 is delivered together with C# 12\. Considering the .NET approach of targeting
    so many platforms and devices, C# is now one of the most used programming languages
    in the world and runs on everything from small devices up to huge servers in different
    **operating systems** (**OSs**) and environments.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 8与C# 12一同发布。考虑到.NET针对众多平台和设备的目标，C#现在已成为世界上使用最广泛的编程语言之一，它可以在从小型设备到大型服务器等各种**操作系统**（**OSs**）和环境上运行。
- en: The book will also use **Microsoft Azure**, which is Microsoft’s cloud platform,
    where you will find all the components the company provides to build advanced
    software architecture solutions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 本书还将使用**Microsoft Azure**，这是微软的云平台，在那里你可以找到公司提供的所有组件，用于构建高级软件架构解决方案。
- en: It is worth mentioning that the use of .NET 8 with Azure was just an option
    chosen by the authors. .NET can work just as well using other cloud providers,
    and Azure can handle other coding frameworks very well.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，使用.NET 8与Azure的结合只是作者选择的一个选项。.NET也可以通过其他云服务提供商正常工作，Azure也能很好地处理其他编码框架。
- en: To be a software architect, you need to be familiar with these technologies,
    and many others too. This book will guide you on a journey where, as a software
    architect working in a team, you will learn how to provide optimal solutions using
    these tools. Let us start this journey by creating your Azure account.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要成为一名软件架构师，你需要熟悉这些技术，以及许多其他技术。这本书将引导你踏上旅程，作为团队中的软件架构师，你将学习如何使用这些工具提供最佳解决方案。让我们从创建你的Azure账户开始这段旅程。
- en: Creating an Azure account
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Azure账户
- en: Microsoft Azure is one of the best cloud solutions currently available on the
    market. It is important to know that, inside Azure, we will find a selection of
    components that can help us define the architecture of twenty-first-century solutions.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure是目前市场上最好的云解决方案之一。重要的是要知道，在Azure内部，我们将找到一组可以帮助我们定义21世纪解决方案架构的组件。
- en: If you want to check Azure’s current state, structure, and updates in a compact,
    digestible way, just go to [https://azurecharts.com/](https://azurecharts.com/),
    developed by Alexey Polkovnikov. The content is continuously updated so you can
    revisit it to learn, evaluate, or even just have fun with the dozens of Azure
    components described in this Azure encyclopedia.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想以紧凑、易于消化的方式检查Azure的当前状态、结构和更新，只需访问由Alexey Polkovnikov开发的[https://azurecharts.com/](https://azurecharts.com/)，你可以在其中学习、评估，甚至只是享受这个Azure百科全书中所描述的数十个Azure组件。
- en: This subsection will guide you in creating an Azure account. If you already
    have one, you can skip this part.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节将指导你创建Azure账户。如果你已经有了账户，你可以跳过这部分。
- en: First, go to [https://azure.microsoft.com](https://azure.microsoft.com). There,
    you will find the information you need to start your subscription. Translation
    to your native language is usually set automatically.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，访问[https://azure.microsoft.com](https://azure.microsoft.com)。在那里，你可以找到开始订阅所需的信息。通常情况下，语言翻译会自动设置。
- en: Once you have accessed this portal, it is possible to sign up. If you have never
    done this before, there is a **Start free** option, so you will be able to use
    some Azure features without spending any money. Please check the options for free
    plans at [https://azure.microsoft.com/free/](https://azure.microsoft.com/free/).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您访问了这个门户，就有可能进行注册。如果您以前从未这样做过，有一个**免费开始**的选项，这样您就可以使用一些Azure功能而无需花费任何费用。请查看[https://azure.microsoft.com/free/](https://azure.microsoft.com/free/)上的免费计划选项。
- en: The process for creating a free account is quite simple, and you will be guided
    by a form that requires you to have a **Microsoft account** or **GitHub account**.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建免费账户的过程相当简单，您将通过一个表格进行指导，该表格要求您拥有**Microsoft账户**或**GitHub账户**。
- en: During the process, you will also be asked for a credit card number to verify
    your identity and to keep out spam and bots. However, you will not be charged
    unless you upgrade the account.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此过程中，您还将被要求提供信用卡号码以验证您的身份，并防止垃圾邮件和机器人。然而，除非您升级账户，否则您不会收费。
- en: To finish the assignment, you will need to accept the subscription agreement,
    offer details, and privacy statement.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成作业，您需要接受订阅协议、提供详细信息以及隐私声明。
- en: 'Once you have finished filling out the form, you will be able to access the
    Azure portal. As you can see in the following screenshot, the panel shows a dashboard
    that you can customize, and a menu on the left, where you can set up the Azure
    components you are going to use in your solution. Throughout this book, we will
    come back to this screen to set up the components needed to help us create modern
    software architecture. To find the next page, just select the hamburger menu icon
    and click on **All services**:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您完成填写表格，您就可以访问Azure门户。正如您在下面的屏幕截图中所见，面板显示了一个您可以定制的仪表板，以及一个左侧菜单，您可以在其中设置您将在解决方案中使用Azure组件。在这本书的整个过程中，我们将回到这个屏幕来设置帮助我们创建现代软件架构所需的组件。要找到下一页，只需选择汉堡菜单图标并点击**所有服务**：
- en: '![](img/B19820_01_02.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_01_02.png)'
- en: 'Figure 1.2: The Azure portal'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：Azure门户
- en: Once you have created your Azure account, you are ready to find out how a software
    architect can lead a team to develop software, taking advantage of all the opportunities
    offered by Azure. However, it is important to keep in mind that a software architect
    needs to go beyond just technologies because they are expected to define how the
    software will be delivered.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您创建了Azure账户，您就准备好了解软件架构师如何利用Azure提供的一切机会来领导团队开发软件。然而，重要的是要记住，软件架构师需要超越技术本身，因为他们需要定义软件的交付方式。
- en: Today, a software architect not only designs the basis of a piece of software
    but also determines how the whole software development and deployment process
    is conducted. The next section will cover some of the most widely used software
    development paradigms in the world. We will start by describing what the community
    refers to as traditional software engineering. After that, we will cover the agile
    models that have changed the way we build software nowadays.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，软件架构师不仅设计软件的基础，还决定整个软件开发和部署过程是如何进行的。下一节将涵盖世界上一些最广泛使用的软件开发范例。我们将从描述社区所指的传统软件工程开始。然后，我们将介绍如今改变了我们构建软件方式的敏捷模型。
- en: Software development process models
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发流程模型
- en: As a software architect, it is important for you to understand some of the common
    development processes that are currently used in most enterprises. A software
    development process defines how people in a team produce and deliver software.
    In general, this process relates to a software engineering theory called the **software
    development process model**. Ever since software development was first defined
    as an engineering process, many process models for developing software have been
    proposed. Let us review the traditional software models, and then look at the
    agile ones that are currently common.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件架构师，了解目前大多数企业中常用的某些常见开发流程是很重要的。软件开发流程定义了团队中的人们如何生产和交付软件。一般来说，这个过程与一种称为**软件开发流程模型**的软件工程理论相关。自从软件开发首次被定义为一种工程过程以来，已经提出了许多软件开发流程模型。让我们回顾一下传统的软件模型，然后看看目前常见的敏捷模型。
- en: Reviewing traditional software development process models
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回顾传统的软件开发流程模型
- en: Some of the models introduced in software engineering theory are already considered
    traditional and obsolete. This book does not aim to cover all of them, but here,
    we will give a brief explanation of the ones that are still used in some companies
    – the **waterfall** and **incremental** models.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程理论中介绍的一些模型已经被认为是传统且过时的。本书并不旨在涵盖所有这些模型，但在这里，我们将简要解释一些仍在某些公司中使用的模型——**瀑布**和**增量**模型。
- en: Understanding the waterfall model principles
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解瀑布模型原则。
- en: 'This topic may appear strange in a software architecture book from 2023, but
    yes, you may still find companies where the most traditional software process
    model remains the guideline for software development. This process executes all
    fundamental tasks in sequence. Any software development project consists of the
    following steps:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题在2023年的软件架构书中可能看起来很奇怪，但确实，你仍然可能找到一些公司，其中最传统的软件过程模型仍然是软件开发指南。这个过程按顺序执行所有基本任务。任何软件开发项目都包括以下步骤：
- en: '**Requirements**: where a product requirements document is created, and it
    is the basis for the software development process'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求**：创建产品需求文档，它是软件开发过程的基础。'
- en: '**Design**: where the software architecture is developed according to the requirements'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计**：根据需求开发软件架构。'
- en: '**Implementation**: where the software is programmed'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实现**：软件被编程。'
- en: '**Verification**: where tests are performed in the application'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证**：在应用程序中进行测试。'
- en: '**Maintenance**: where the cycle starts again after delivery'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：在交付后，周期再次开始。'
- en: 'Let us look at a diagrammatic representation of this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个的图示表示：
- en: '![Diagram  Description automatically generated](img/B19820_01_03.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图描述自动生成](img/B19820_01_03.png)'
- en: 'Figure 1.3: The waterfall development cycle ([https://en.wikipedia.org/wiki/Waterfall_model](https://en.wikipedia.org/wiki/Waterfall_model))'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：瀑布开发周期([https://en.wikipedia.org/wiki/Waterfall_model](https://en.wikipedia.org/wiki/Waterfall_model))
- en: Often, the use of waterfall models causes problems such as delays in the delivery
    of a functional version of the software and user dissatisfaction due to the distance
    between expectations and the final product delivered. Besides, in my experience,
    having application tests start only after the completion of development always
    feels terribly stressful.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，使用瀑布模型会导致问题，如软件功能版本交付延迟，以及由于期望与最终交付产品之间的距离而导致用户不满。此外，根据我的经验，只有在开发完成后才开始应用程序测试总是感觉非常紧张。
- en: Analyzing the incremental model
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分析增量模型。
- en: '**Incremental development** is an approach that tries to overcome the biggest
    problem of the waterfall model: the user can test the solution only at the end
    of the project. The idea of a model following this approach is to give the users
    opportunities to interact with the solution as early as possible so that they
    can give useful feedback, which will help during the development of the software.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**增量开发**是一种试图克服瀑布模型最大问题的方法：用户只能在项目结束时测试解决方案。遵循此方法模型的理念是尽可能早地让用户与解决方案互动，以便他们可以提供有用的反馈，这将有助于软件开发过程中的开发。'
- en: '![A picture containing text  Description automatically generated](img/B19820_01_04.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![包含文本的图片描述自动生成](img/B19820_01_04.png)'
- en: 'Figure 1.4: The incremental development cycle ([https://en.wikipedia.org/wiki/Incremental_build_model](https://en.wikipedia.org/wiki/Incremental_build_model))'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.4：增量开发周期([https://en.wikipedia.org/wiki/Incremental_build_model](https://en.wikipedia.org/wiki/Incremental_build_model))
- en: The incremental model presented in the preceding picture was introduced as an
    alternative to the waterfall approach. The idea of the model is to run for each
    increment a set of practices related to software development (**communication**,
    **planning**, **modeling**, **construction**, and **deployment**). Although it
    mitigated problems related to the lack of communication with the customer, fewer
    increments were still a problem for big projects because the increments were still
    too long.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图片中展示的增量模型被引入作为瀑布方法的替代方案。该模型的理念是为每个增量运行一系列与软件开发相关的实践（**沟通**、**规划**、**建模**、**构建**和**部署**）。尽管它减轻了与客户沟通不足相关的问题，但对于大型项目来说，增量仍然太长，因此更少的增量仍然是一个问题。
- en: When the incremental approach was used on a large scale – mainly at the end
    of the last century – many problems related to project bureaucracy were reported,
    due to the large amount of documentation required. This clunky scenario caused
    the rise of a very important movement in the software development industry – **agile**.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当增量方法被大规模使用时——主要在上世纪末——由于需要大量的文档，报告了许多与项目官僚主义相关的问题。这种笨拙的场景导致了软件开发行业中一个非常重要的运动的兴起——**敏捷**。
- en: Understanding agile software development process models
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解敏捷软件开发流程模型
- en: At the beginning of this century, developing software was considered one of
    the most chaotic activities in engineering. The percentage of software projects
    that failed was incredibly high, and this fact proved the need for a different
    approach to deal with the flexibility required by software development projects.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在本世纪初，软件开发被认为是工程中最混乱的活动之一。失败的软件项目比例极高，这一事实证明了需要一种不同的方法来处理软件开发项目所需的灵活性。
- en: In 2001, the **Agile Manifesto** was introduced to the world, and from that
    time forward various agile process models were proposed. Some of them have survived
    up until now and are still very common.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 2001年，**敏捷宣言**被介绍给世界，从那时起，各种敏捷流程模型被提出。其中一些一直存活至今，并且仍然非常普遍。
- en: The Agile Manifesto has been translated into more than 60 languages. You can
    check it out at [https://agilemanifesto.org/](https://agilemanifesto.org/).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷宣言已被翻译成60多种语言。您可以在[https://agilemanifesto.org/](https://agilemanifesto.org/)查看。
- en: One of the biggest differences between agile models and traditional models is
    the way developers interact with the customer. The message behind all agile models
    is that the faster you deliver software to the user, the better. This idea is
    sometimes confusing for software developers who understand this as – *Let’s try
    coding, and that’s all, folks!*
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷模型与传统模型之间最大的区别是开发者与客户互动的方式。所有敏捷模型背后的信息是，你越快将软件交付给用户，就越好。这种想法有时会让软件开发者感到困惑，他们将其理解为——*让我们尝试编码，这就是全部，朋友们！*
- en: 'However, there is an important observation of the Agile Manifesto that many
    people do not read when they start working with agile:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，敏捷宣言的一个重要观察结果，很多人在开始使用敏捷时并没有阅读：
- en: '![](img/B19820_01_05.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_01_05.png)'
- en: 'Figure 1.5: Manifesto for agile software development'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.5：敏捷软件开发宣言
- en: A software architect always needs to remember this. Agile processes do not mean
    a lack of discipline. Moreover, when you use the agile process, you will quickly
    understand that there is no way to develop good software without discipline. On
    the other hand, as a software architect, you need to understand that *soft* means
    flexibility. A software project that refuses to be flexible tends to ruin itself
    over time.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构师始终需要记住这一点。敏捷流程并不意味着缺乏纪律。此外，当你使用敏捷流程时，你会很快明白，没有纪律就无法开发出好的软件。另一方面，作为一名软件架构师，你需要理解“软”意味着灵活性。一个拒绝灵活性的软件项目往往会随着时间的推移而自我毁灭。
- en: 'The 12 principles behind agile are foundational to this flexible approach:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷背后的12项原则是这个灵活方法的基础：
- en: Continuously delivering valuable software to satisfy the customer must be the
    highest priority of any developer.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 持续交付有价值的软件以满足客户需求必须是任何开发者的最高优先级。
- en: Changing requirements needs to be understood as an opportunity to make the customer
    more competitive.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要理解需求变更是一个让客户更具竞争力的机会。
- en: Use a weekly timescale to deliver software.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用每周的时间尺度交付软件。
- en: A software team must be composed of businesspeople and developers.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件团队必须由业务人员和开发者组成。
- en: A software team needs to be trusted and should have the correct environment
    to get the project done.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件团队需要被信任，并且应该拥有正确的环境来完成项目。
- en: The best way to communicate with a software team is face to face.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与软件团队的最佳沟通方式是面对面。
- en: You can see the greatest software team achievement when the software is really
    working in production.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当软件真正在生产中运行时，您可以看到最伟大的软件团队成就。
- en: Agile works properly when it delivers sustainable development.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当敏捷交付可持续开发时，它才能正常工作。
- en: The more you invest in techniques and good design, the more agile you are.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你在技术和良好设计上的投资越多，你就越敏捷。
- en: Simplicity is essential.
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 简单性是至关重要的。
- en: The more self-organized the teams are, the better-quality delivery you will
    have.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 团队越自我组织，交付的质量就越好。
- en: Software teams tend to improve their behavior from time to time, analyzing and
    adjusting their process.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件团队倾向于不时地改善其行为，分析和调整其流程。
- en: Even 20 years after the launch of the Agile Manifesto, its importance and connection
    to the current needs of software teams remain intact. Certainly, there are many
    companies where this approach is not fully accepted, but as a software architect,
    you should understand this as an opportunity to transform practices and evolve
    the team you are working with.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在敏捷宣言发布20年后，其重要性和与当前软件团队需求的联系依然存在。当然，有许多公司还没有完全接受这种方法，但作为软件架构师，你应该将其视为一个转变实践和进化你所工作的团队的机会。
- en: There are many techniques and models that were presented to the software community
    with the agile approach. The next subsections will discuss **lean software development**,
    **extreme programming**, and **Scrum**, so that you can decide as a software architect
    which ones you might use to improve your software delivery.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多技术和模型被敏捷方法引入到软件社区中。接下来的小节将讨论**精益软件开发**、**极限编程**和**Scrum**，以便您作为软件架构师可以决定您可能使用哪些来改进您的软件交付。
- en: Lean software development
  id: totrans-100
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 精益软件开发
- en: After the Agile Manifesto, the approach of lean software development was introduced
    to the community as an adaptation of a well-known movement in automobile engineering,
    Toyota’s model for building cars. The lean manufacturing method delivers a high
    level of quality even with few resources.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷宣言之后，精益软件开发方法被引入社区，作为汽车工程中一个知名运动的适应，即丰田的汽车制造模式。精益制造方法即使在资源有限的情况下也能提供高质量。
- en: 'Mary and Tom Poppendieck mapped seven lean principles for software development,
    really connected to agile and the approach of many companies of this century,
    which are listed here:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 玛丽和汤姆·波彭迪克为软件开发制定了七个精益原则，这些原则与敏捷以及本世纪许多公司的方法真正相连，以下列出：
- en: '**Eliminate waste**: You may consider waste to be anything that will interfere
    with the delivery of the real need of the customer.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消除浪费**：你可能认为任何会干扰客户真实需求交付的东西都是浪费。'
- en: '**Build quality in**: An organization that wants to guarantee quality needs
    to promote it in processes from the very beginning, instead of only considering
    it when code is being tested.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在过程中建立质量**：一个想要保证质量的组织需要在流程的最初就推广它，而不仅仅是在代码测试时才考虑。'
- en: '**Create knowledge**: All companies that have achieved excellence have a common
    pattern of generating new knowledge by disciplined experimentation, documenting
    that knowledge, and guaranteeing that it is spread all over the organization.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**创建知识**：所有取得卓越成就的公司都通过有纪律的实验、记录知识并确保知识在整个组织中传播来生成新知识。'
- en: '**Defer commitment**: Plan decisions at the latest possible moment without
    causing damage to the project.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**推迟承诺**：在尽可能晚的时刻做出决策，而不损害项目。'
- en: '**Deliver fast**: The faster you deliver software, the more elimination of
    waste you have. Companies that compete using time frequency have significant advantages
    over their competitors.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速交付**：你交付软件越快，你消除浪费的机会就越多。使用时间频率竞争的公司相对于其竞争对手有显著的优势。'
- en: '**Respect people**: Giving reasonable objectives to the team, together with
    plans that will guide them to self-organize their routine, is a matter of respecting
    the people that you work with.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**尊重人员**：为团队设定合理的目标，并制定指导他们自我组织日常工作的计划，这是尊重你一起工作的人。'
- en: '**Optimize the whole**: A lean company improves the cycle of value; from the
    moment it receives a new requirement to the point at which it delivers the software.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**优化整体**：精益公司改善价值循环；从它接收新需求的那一刻起，到它交付软件的那一刻。'
- en: Following the lean principles helps a team or company to improve the quality
    of the features that are delivered to the customer. It also creates a reduction
    in time spent on features that will not be used by the customer. In lean, deciding
    the features that are important to the customer guides the team in delivering
    software that matters, and this is exactly what the Agile Manifesto intends to
    promote in software teams.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循精益原则有助于团队或公司提高交付给客户的功能质量。它还减少了客户不会使用的功能所花费的时间。在精益中，决定对客户重要的功能指导团队交付有意义的软件，这正是敏捷宣言旨在在软件团队中推广的。
- en: Extreme programming
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 极限编程
- en: Just before the release of the Agile Manifesto, some of the participants who
    designed the document, especially Kent Beck, presented to the world the **extreme
    programming** (**XP**) **methodology** for developing software.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷宣言发布之前，一些设计文档的参与者，特别是 Kent Beck，向世界介绍了软件开发的方法论——**极限编程**（**XP**）。
- en: XP is based on the values of simplicity, communication, feedback, respect, and
    courage. It was considered later as a social change in programming, according
    to Beck in his second book about the topic. It certainly promotes a huge change
    in the flow of development.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: XP 基于简洁、沟通、反馈、尊重和勇气这些价值观。根据贝克关于这个主题的第二本书，它后来被认为是一种编程领域的社交变革。它无疑促进了开发流程的巨大变化。
- en: XP states that every team should simply do only what it was asked to do, communicating
    face to face daily, demonstrating the software early to get feedback, respecting
    the expertise of each member of the team, and having the courage to tell the truth
    about progress and estimates, considering the team’s work as a whole.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: XP 声明每个团队都应该只做被要求做的事情，每天面对面沟通，尽早展示软件以获取反馈，尊重团队每个成员的专业知识，并勇于讲述关于进度和估计的真实情况，将团队的工作视为整体。
- en: XP also delivers a set of rules. These rules may be changed by the team if they
    detect something is not working properly, but it is important to always maintain
    the values of the methodology.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: XP 还提供了一套规则。如果团队发现某些事情没有正常运作，他们可以更改这些规则，但始终维护方法论的价值是非常重要的。
- en: 'These rules are divided into planning, managing, designing, coding, and testing.
    Don Wells has mapped XP at [http://www.extremeprogramming.org/](http://www.extremeprogramming.org/).
    Although some of the ideas of the methodology were criticized strongly by many
    companies and specialists, there are many good practices that are still used nowadays:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这些规则分为规划、管理、设计、编码和测试。唐·韦尔斯在 [http://www.extremeprogramming.org/](http://www.extremeprogramming.org/)
    上绘制了 XP 的图。尽管许多公司和专家强烈批评了该方法论的一些想法，但仍有许多良好的实践至今仍在使用：
- en: '**Writing software requirements using user stories**: User stories are considered
    an agile approach to describing user needs, together with acceptance tests, which
    are used to guarantee the correct implementation.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用用户故事编写软件需求**：用户故事被认为是一种敏捷的方法来描述用户需求，以及验收测试，这些测试用于确保正确实施。'
- en: '**Divide software into iterations and deliver small releases**: The practice
    of iterating in software development is implemented by all methodologies aside
    from waterfall. The fact of delivering faster versions decreases the risk of not
    meeting the customer’s expectations.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**将软件划分为迭代并交付小版本**：除了瀑布模型之外，所有软件开发方法都实施了迭代的实践。交付更快版本的事实降低了未能满足客户期望的风险。'
- en: '**Avoid working overtime and guarantee a sustainable velocity**: Although this
    must be one of the hardest tasks a software architect may deal with, overtime
    indicates that something is not working properly in the process.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**避免加班并保证可持续的速度**：尽管这可能是软件架构师可能遇到的最困难的任务之一，但加班表明在过程中某些事情没有正常运作。'
- en: '**Keep things simple**: While developing solutions, it is quite common to try
    to anticipate features that the customer would like to have. This approach increases
    the complexity of the development and the time to market the solution. A different
    approach will cause high costs, and probably a low level of features that are
    used in the system you are developing.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保持简单**：在开发解决方案时，试图预测客户可能希望拥有的功能是很常见的。这种方法增加了开发的复杂性和将解决方案推向市场的时间。另一种方法将导致成本高昂，并且可能是在你开发的系统中使用率低的功能。'
- en: '**Refactoring**: The approach of refactoring the code continuously is good
    because it enables the evolution of your software and guarantees the design improvement
    that will truly be necessary due to the normal technical changes of the platforms
    you use to develop.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**：持续重构代码的方法是好的，因为它使你的软件能够进化，并确保由于你使用的开发平台的技术变化而真正必要的改进。'
- en: '**Keep the customer always available**: If you follow XP, you should have an
    expert customer inside your team. This is certainly something that is hard to
    do, but the main idea of this approach is to guarantee that the customer is involved
    in all parts of development. As another bonus, having the customer close to your
    team means they understand the difficulties and expertise the team has, enabling
    an increase in trust between the parties.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**始终让客户可用**：如果你遵循XP（极限编程），你应该在团队内部有一个专家客户。这当然是一件很难做到的事情，但这种方法的主要思想是确保客户参与开发的所有部分。作为另一个额外的好处，让客户靠近你的团队意味着他们了解团队面临的困难和专业知识，这有助于增进双方之间的信任。'
- en: '**Continuous integration**: This practice is one of the bases of the current
    DevOps approach. The less difference you have between your personal code repository
    and the main code repository, the better.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**持续集成**：这种实践是当前DevOps方法的基础之一。你个人代码仓库和主代码仓库之间的差异越小，越好。'
- en: '**Code the unit test first**: A unit test is an approach where you program
    specific code for testing a single unit (class/method) of your project. This is
    discussed in a current development methodology called **Test-Driven Development**
    (**TDD**). The main goal here is to guarantee that every business rule has its
    own unit test case.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**先编写单元测试**：单元测试是一种编程特定代码以测试项目单个单元（类/方法）的方法。这在当前的开发方法论中被称为**测试驱动开发**（**TDD**）。这里的目的是确保每个业务规则都有自己的单元测试用例。'
- en: '**Code must be written to agreed standards**: The need to determine standards
    for coding is connected to the idea that no matter which developer you have working
    on a specific part of the project, the code must be written so that any of them
    will understand it.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码必须按照既定标准编写**：确定编码标准的需求与这样一个观点相关联，即无论哪个开发者负责项目的特定部分，代码都必须编写得让任何开发者都能理解。'
- en: '**Pair programming**: Pair programming is another difficult approach to achieve
    in every single minute of a software project, but the technique itself – one programmer
    coding and the other actively observing and offering comments, criticism, and
    advice – is useful in critical scenarios.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结对编程**：结对编程是在软件项目的每一分钟都难以实现的方法之一，但这种方法本身——一个程序员编写代码，另一个程序员积极观察并提供评论、批评和建议——在关键场景中非常有用。'
- en: '**Acceptance tests**: The adoption of acceptance tests to meet user stories
    is a good way to guarantee that newly released versions of the software do not
    cause damage to its current needs. An even better option is to have these acceptance
    tests automated.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验收测试**：采用验收测试来满足用户故事是确保新发布的软件版本不会损害其当前需求的好方法。更好的选择是将这些验收测试自动化。'
- en: It is worth mentioning that many of these rules are today considered vital practices
    in different software development methodologies, including DevOps and Scrum. We
    will discuss DevOps later in this book, in *Chapter 8*, *Understanding DevOps
    Principles and CI/CD*. Let us get into the Scrum model right now.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，许多这些规则今天被认为是在不同的软件开发方法论中至关重要的实践，包括DevOps和Scrum。我们将在本书的*第8章*，*理解DevOps原则和CI/CD*中讨论DevOps。现在让我们深入了解Scrum模型。
- en: Getting into the Scrum model
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 进入Scrum模型
- en: Scrum is an agile model for the management of software development projects.
    The model comes from lean principles and is one of the more widely used approaches
    for developing software nowadays.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Scrum是一种敏捷的软件开发项目管理模型。该模型源于精益原则，并且是目前软件开发中更广泛使用的方法之一。
- en: 'Please check out this link for more information about the Scrum framework:
    [https://www.scrum.org/](https://www.scrum.org/).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 请查看此链接以获取有关Scrum框架的更多信息：[https://www.scrum.org/](https://www.scrum.org/).
- en: As you can see in the following figure, the basis of Scrum is that you have
    a flexible backlog of user requirements (**Product Backlog**) that needs to be
    discussed in each agile cycle, called a **Sprint**. The Sprint goal (**Sprint
    Backlog**) is determined by the **Scrum Team**, composed of the **Product Owner**,
    the **Scrum Master**, and the **Development Team**. The Product Owner is responsible
    for prioritizing what will be delivered in that Sprint. During the Sprint, this
    person will help the team to develop the required features. The person who leads
    the team in the Scrum process is called the Scrum Master. All the meetings and
    processes are conducted by this person.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如下图中所示，Scrum的基础是您有一个灵活的用户需求清单（**产品待办事项**），需要在每个敏捷周期中讨论，这被称为**冲刺**。冲刺目标（**冲刺待办事项**）由**Scrum团队**确定，该团队由**产品负责人**、**Scrum大师**和**开发团队**组成。产品负责人负责确定那个冲刺中将交付的内容。在冲刺期间，这个人将帮助团队开发所需的功能。在Scrum流程中领导团队的人被称为Scrum大师。所有的会议和流程都由这个人执行。
- en: '![Diagram  Description automatically generated](img/B19820_01_06.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图描述自动生成](img/B19820_01_06.png)'
- en: 'Figure 1.6: The Scrum process'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：Scrum流程
- en: It is common to apply Scrum together with another agile technique, called **Kanban**,
    also developed by Toyota for manufacturing cars and commonly used for software
    maintenance. The main purpose of Kanban is to enable a visual system to make sure
    everybody understands what is going on in the product that is being developed.
    The famous Kanban board is an incredible way to do so, where you define what the
    team must do, what they are doing, and the things that are already done.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会将Scrum与另一种名为**看板**的敏捷技术一起应用，看板也是由丰田为制造汽车而开发的，通常用于软件维护。看板的主要目的是通过一个可视化系统确保每个人都了解正在开发的产品的情况。著名的看板板是一个实现这一点的绝佳方式，在那里你定义团队必须做什么，他们在做什么，以及已经完成的事情。
- en: It is important to note that the Scrum process does not discuss how the software
    needs to be implemented, nor which activities will be done. Again, you must remember
    the basis of software development, discussed at the beginning of this chapter;
    Scrum needs to be implemented together with a process model. DevOps is one of
    the approaches that may help you use a software development process model together
    with Scrum. Check out *Chapter 8*, *Understanding DevOps Principles and CI/CD*,
    to understand it better.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，Scrum流程并没有讨论软件应该如何实现，也没有说明哪些活动将会被执行。再次强调，你必须记住软件开发的基础，这是在本章开头讨论过的；Scrum需要与一个流程模型一起实施。DevOps是可能帮助你结合Scrum使用软件开发流程模型的方法之一。查看*第8章*，*理解DevOps原则和CI/CD*，以更好地理解这一点。
- en: Scaling agile throughout a company
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在整个公司范围内扩展敏捷
- en: Today it is quite common to find companies where agility is being practiced
    and evolving in a good way, considering the results of the techniques presented
    in the previous sections. The mixture of Scrum, Kanban, and XP, together with
    the evolution of the maturity of the software development process, has brought
    good results for companies and we have a world where software development is one
    of the key strategies for the success of a business.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，在实践敏捷并取得良好进展的公司中相当普遍，考虑到前几节中介绍的技术成果。Scrum、看板和XP的混合使用，以及软件开发过程成熟度的演变，为公司带来了良好的结果，我们生活在一个软件开发是商业成功关键策略之一的世界。
- en: 'Some companies naturally need to scale up the number of teams, but the important
    question in this process is how to evolve without missing agility. And you can
    be sure that this question may be addressed to you, as a software architect. You
    may find in *SAFe® – Scaled Agile Framework* a good answer to this question:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 一些公司自然需要增加团队的数量，但在这一过程中，重要的问题是如何在不失去敏捷性的情况下进行演变。你可以确信，这个问题可能会被作为一个软件架构师的你提出。你可能会在*SAFe®
    – 扩展敏捷框架*中找到对这个问题的良好答案：
- en: SAFe® for LeanEnterprises is a knowledge base of proven, integrated principles,
    practices, and competencies for achieving business agility using Lean, Agile,
    and DevOps.”
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: SAFe® for LeanEnterprises是一个知识库，包含经过验证的、集成的原则、实践和能力，用于通过精益、敏捷和DevOps实现业务敏捷性。”
- en: ''
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – Dean Leffingwell, creator.
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: – 迪恩·莱夫林韦尔，创始人。
- en: ''
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: © Scaled Agile, Inc.
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: © 扩展敏捷，Inc.
- en: Based on the core values of alignment, built-in quality, transparency, and program
    execution, the framework provides a detailed path for delivering products with
    the agility needed in companies where you have one or more value streams. Its
    principles enable agility and incremental delivery, system thinking, fast and
    economic decisions, and mainly, organization around value.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 基于对齐、内置质量、透明度和项目执行的核心理念，该框架为在拥有一个或多个价值流的公司中交付具有所需敏捷性的产品提供了详细的路径。其原则使敏捷和增量交付、系统思维、快速经济决策以及围绕价值组织成为可能。
- en: As a software architect, you may find opportunities for growth, considering
    you can work as a software architect in a system team, a system architect in an
    agile release train, or even an enterprise architect in the company. For sure,
    this will require a lot of studying and dedication, but this structure is what
    you will find in big companies.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名软件架构师，你可能会在系统团队、敏捷发布列车中的系统架构师，甚至在公司中的企业架构师等职位上找到成长的机会。当然，这需要大量的学习和投入，但这就是你在大型公司中会遇到的架构。
- en: As with every framework, technique, or model that you will find in this book,
    the purpose of presenting SAFe to you is not to cover every single detail of the
    content. You will find excellent material and training on their website. But as
    a software architect, understanding how to scale up a company may be good knowledge
    to have in your toolbelt! Now that you know it, let us go back to the stages of
    designing software with high quality, discussing how to gather the right information
    to design it.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在这本书中你将找到的每一个框架、技术或模型一样，向你们介绍SAFe的目的并不是涵盖内容的每一个细节。你可以在他们的网站上找到优秀的资料和培训。但作为一名软件架构师，了解如何扩大公司规模可能是你工具箱中的一项宝贵知识！既然你已经知道了，那么让我们回到设计高质量软件的阶段，讨论如何收集正确信息来设计它。
- en: Gathering the right information to design high-quality software
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 收集设计高质量软件的正确信息
- en: Fantastic! You’ve just started a software development project. Now, it is time
    to use all your knowledge to deliver the best software you can. Your first question
    is probably – *How do I start?* Well, as a software architect, you are going to
    be the one to answer that question. And you can be sure that your answer is going
    to evolve with each software project you lead.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你刚刚开始一个软件开发项目。现在，是时候运用你所有的知识来交付最好的软件了。你第一个问题可能就是——*我该如何开始？* 好吧，作为一名软件架构师，你将是回答这个问题的那个人。而且你可以确信，你的答案会随着你领导的每一个软件项目而不断演变。
- en: Defining a software development process is the first task. This is generally
    done during the project planning process, or it might happen before it starts.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 定义软件开发流程是第一项任务。这通常在项目规划过程中完成，或者可能在它开始之前发生。
- en: Another very important task is to gather the software requirements. No matter
    which software development process you decide to use, collecting real user needs
    is part of a difficult and continuous job. Of course, there are techniques to
    help you with this, and you can be sure that gathering requirements will help
    you to define important aspects of your software architecture.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常重要的任务是收集软件需求。无论你决定使用哪种软件开发流程，收集真实用户需求都是一项困难和持续的工作的一部分。当然，有技术可以帮助你完成这项工作，你可以确信，收集需求将帮助你定义软件架构的重要方面。
- en: These two tasks are considered by most experts in software development as the
    keys to success at the end of the development project journey. As a software architect,
    you need to enable them so that you can avoid as many problems as possible while
    guiding your team.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个任务被大多数软件开发专家视为开发项目旅程结束时的成功关键。作为一名软件架构师，你需要使它们成为可能，这样你就可以在引导你的团队的同时，尽可能避免可能出现的问题。
- en: Understanding the requirements gathering process
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解需求收集过程
- en: There are many ways to represent the requirements. The most traditional approach
    consists of you having to write a perfect specification before the beginning of
    the analysis. Agile methods suggest instead that you need to write user stories
    as soon as you are ready to start a development cycle.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 表示需求的方式有很多。最传统的方法是在分析开始之前，你必须写出一个完美的规范。敏捷方法建议，你需要在准备好开始一个开发周期时立即编写用户故事。
- en: Remember that you do not write requirements just for the user; you write them
    for you and your team too.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你不仅仅是为用户编写需求；你也是为你的团队和你自己编写它们。
- en: The truth is that no matter the approach you decide to adopt in your projects,
    you will have to follow some steps to gather requirements. This is what we call
    the **requirements engineering process**.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 事实是，无论你决定在项目中采用哪种方法，你都需要遵循一些步骤来收集需求。这就是我们所说的**需求工程过程**。
- en: '![Diagram  Description automatically generated](img/B19820_01_07.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图描述自动生成](img/B19820_01_07.png)'
- en: 'Figure 1.7: Requirements engineering process'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：需求工程过程
- en: During this process, you need to be sure that the solution is feasible. In some
    cases, the feasibility analysis is part of the project planning process too, and
    by the time you start the requirements elicitation, you will have the feasibility
    report already done. So, let us check the other parts of this process, which will
    give you a lot of important information about the software architecture.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，你需要确保解决方案是可行的。在某些情况下，可行性分析也是项目规划过程的一部分，在你开始需求收集时，你将已经完成了可行性报告。因此，让我们检查这个过程的其它部分，这将为你提供大量关于软件架构的重要信息。
- en: Detecting exact user needs
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检测精确的用户需求
- en: 'There are a lot of ways to detect what exactly the user needs for a specific
    scenario. This process is known as *elicitation*. In general, this can be done
    using techniques that will help you to understand what we call user requirements.
    Here, you have a list of common techniques:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以检测特定场景中用户的确切需求。这个过程被称为*收集*。一般来说，这可以通过帮助你理解我们所说的用户需求的技术来完成。这里有一个常见技术的列表：
- en: '**The power of imagination**: If you are an expert in the area where you are
    providing solutions, you may use your own imagination to find new user requirements.
    Brainstorming can be conducted collaboratively so that a group of experts can
    define the user’s needs.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**想象力的力量**：如果你在你提供解决方案的领域是专家，你可以使用自己的想象力来找到新的用户需求。头脑风暴可以协作进行，以便一组专家可以定义用户的需求。'
- en: '**Questionnaires**: This tool is useful for detecting common and important
    requirements such as the number and kind of users, peak system usage, and the
    most commonly used **OS** and web browser.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问卷调查**：这个工具对于检测常见且重要的需求很有用，例如用户数量和种类、系统高峰使用时间以及最常用的**操作系统**和网页浏览器。'
- en: '**Interviews**: Interviewing the users helps you as an architect to detect
    user requirements that perhaps questionnaires and your imagination will not cover.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**访谈**：与用户访谈可以帮助你作为架构师检测到问卷调查和你的想象力可能无法涵盖的用户需求。'
- en: '**Observation**: There is no better way to understand the daily routine of
    a user than observing them for a day.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**观察**：没有比观察用户一天更好的方式来理解用户的日常习惯了。'
- en: As soon as you apply one or more of these techniques, you will have great and
    valuable information about the user’s needs.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你应用了其中一种或多种技术，你将拥有关于用户需求的大量有价值的信息。
- en: Remember that you can use these techniques in any situation where the real need
    is to gather requirements, no matter whether it is for the whole system or for
    a single story.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，你可以在任何需要收集需求的情况下使用这些技术，无论是针对整个系统还是针对单个故事。
- en: At that moment, you will be able to start analyzing these user needs and detecting
    the user and system requirements. Let us see how to do so in the next section.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在那一刻，你将能够开始分析这些用户需求并检测用户和系统需求。让我们看看如何在下一节中这样做。
- en: Analyzing requirements
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析需求
- en: 'When you have detected the user needs, it is time to begin analyzing the requirements.
    To do so, you can use techniques such as the following:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 当你检测到用户需求后，是时候开始分析需求了。为此，你可以使用以下技术：
- en: '**Prototyping**: Prototypes are fantastic to clarify and materialize the system
    requirements. Today, we have many tools that can help you to mock interfaces.
    A nice open-source tool is the **Pencil Project**. You will find further information
    about it at [https://pencil.evolus.vn/](https://pencil.evolus.vn/). **Figma**
    ([https://www.figma.com/](https://www.figma.com/)) is also a good tool for prototyping
    and they provide a starter pack that is free forever.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原型设计**：原型设计对于阐明和具体化系统需求非常出色。今天，我们有许多工具可以帮助你模拟界面。一个不错的开源工具是**Pencil Project**。你可以在[https://pencil.evolus.vn/](https://pencil.evolus.vn/)找到更多关于它的信息。**Figma**([https://www.figma.com/](https://www.figma.com/))也是一个很好的原型设计工具，并且他们提供了一套免费的启动包。'
- en: '**Use cases**: The **Unified Modeling Language** (**UML**) use case model is
    an option if you need detailed documentation. The model is composed of a detailed
    specification and a diagram. **Lucidchart** ([https://www.lucidchart.com/](https://www.lucidchart.com/))
    is another good tool that can help you out with this. You can see the model created
    in *Figure 1.8*:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用例**：如果您需要详细的文档，可以使用**统一建模语言**（**UML**）用例模型。该模型由详细规范和图表组成。**Lucidchart**（[https://www.lucidchart.com/](https://www.lucidchart.com/））是另一个可以帮助您的工具。您可以在*图1.8*中看到创建的模型：'
- en: '![Diagrama  Descrição gerada automaticamente](img/B19820_01_08.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![自动生成的描述图](img/B19820_01_08.png)'
- en: 'Figure 1.8: Use case diagram example'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.8：用例图示例
- en: While you are analyzing the requirements of the system, you will be able to
    clarify exactly what the user’s needs are. This is helpful when you are not sure
    about the real problem you need to solve, and it is much better than just starting
    to program the system and hoping for the best. Time invested in requirements analysis
    is time invested in better code later.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 当您分析系统需求时，您将能够确切地了解用户的需求。当您不确定需要解决的真正问题时，这很有帮助，而且比开始编程系统并寄希望于最好的结果要好得多。在需求分析上投入的时间是以后编写更好代码的时间。
- en: Writing the specifications
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写规范
- en: After you finish the analysis, it is important to register it as a specification.
    The specification document can be written using traditional requirements, or user
    stories, which are commonly used in agile projects.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在您完成分析后，将注册为规范非常重要。规范文档可以使用传统的需求或用户故事编写，后者在敏捷项目中常用。
- en: 'A requirements specification represents the technical contract between the
    user and the team. There are some basic rules that this document needs to follow:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 需求规范代表了用户和团队之间的技术合同。这份文档需要遵循一些基本规则：
- en: All stakeholders need to understand exactly what is written in the technical
    contract, even if they are not technicians.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有利益相关者都需要确切了解技术合同中写的内容，即使他们不是技术人员。
- en: The document needs to be clear.
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档需要清晰。
- en: You need to classify each requirement.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您需要分类每个需求。
- en: 'Use simple future tense to represent each requirement:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用简单将来时来表示每个需求：
- en: '**Bad example**: A common user registers themselves.'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不良示例**：一个普通用户自行注册。'
- en: '**Good example**: A common user shall register themselves.'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**良好示例**：一个普通用户应自行注册。'
- en: Ambiguity and controversy need to be avoided.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免歧义和争议。
- en: 'Some additional information can help the team to understand the context of
    the project they are going to work on. Here are some tips about how to add useful
    information:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些额外的信息可以帮助团队理解他们将要工作的项目背景。以下是一些关于如何添加有用信息的提示：
- en: Write an introductory chapter to give a full idea of the solution.
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写一个介绍章节，以全面了解解决方案。
- en: Create a glossary to make understanding easier.
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个术语表以简化理解。
- en: Describe the kind of user the solution will cover.
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述该解决方案将覆盖的用户类型。
- en: 'Write functional and non-functional requirements:'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写功能性和非功能性需求：
- en: Functional requirements are quite simple to understand because they describe
    exactly what the software will do. On the other hand, non-functional requirements
    determine the restrictions related to the software, which means scalability, robustness,
    security, and performance. We will cover these aspects in the next section.
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 功能性需求很容易理解，因为它们确切地描述了软件将做什么。另一方面，非功能性需求决定了与软件相关的限制，这意味着可扩展性、健壮性、安全性和性能。我们将在下一节中介绍这些方面。
- en: Attach documents that can help the user to understand the rules.
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加有助于用户理解规则的文档。
- en: 'If you decide to write user stories, a good tip to follow is to write short
    sentences representing each moment in the system with each user, as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定编写用户故事，一个很好的建议是写简短的句子，代表系统中的每个时刻以及每个用户，如下所示：
- en: '*As <user>, I want <feature>, so that <reason>*'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '*作为<用户>，我想要<功能>，以便<原因>*'
- en: This approach will explain exactly the reason why that feature will be implemented.
    It is also a good tool to help you analyze the stories that are most important
    and prioritize the success of the project. They can also be great for informing
    the automated acceptance tests that should be built.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将确切地解释为什么将实现该功能。它也是帮助您分析最重要的故事并优先考虑项目成功的良好工具。它们还可以用于告知应构建的自动化验收测试。
- en: Understanding the principles of scalability, robustness, security, and performance
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解可扩展性、健壮性、安全性和性能的原则
- en: Detecting requirements is a task that will let you understand the software you
    are going to develop. However, as a software architect, you must pay attention
    to more than just the functional requirements for that system. Understanding the
    non-functional requirements is important, and one of the earliest activities for
    a software architect.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 识别需求是一项任务，将帮助你理解你将要开发的软件。然而，作为软件架构师，你必须注意的不仅仅是该系统的功能性需求。理解非功能性需求很重要，这是软件架构师最早的活动之一。
- en: 'We are going to look at this in more detail in *Chapter 2*, *Non-Functional
    Requirements*, but at this point, it is important to know that the principles
    of scalability, robustness, security, and performance need to be applied to the
    requirements gathering process. Let us look at each concept:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第2章“非功能性需求”中更详细地探讨这个问题，但在此阶段，重要的是要知道可扩展性、健壮性、安全性和性能的原则需要应用于需求收集过程。让我们看看每个概念：
- en: '**Scalability**: The Internet gives you the opportunity to have a solution
    with a great number of users all over the world. This is fantastic, but you, as
    a software architect, need to design a solution that provides that possibility.
    Scalability is the possibility for an application to increase its processing power
    as soon as it is necessary, due to the number of resources that are being consumed.'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：互联网为你提供了一个拥有全球大量用户的解决方案的机会。这是非常棒的，但作为软件架构师，你需要设计一个能够提供这种可能性的解决方案。可扩展性是指应用程序在必要时能够增加其处理能力，这是由于正在消耗的资源数量。'
- en: '**Robustness**: No matter how scalable your application is, if it is not able
    to guarantee a stable and always-on solution, you are not going to get any peace.
    Robustness is important for critical solutions, where you do not have the opportunity
    to carry out maintenance at any time due to the kind of problem that the application
    solves. In many industries, the software cannot stop, and lots of routines run
    when nobody is available (overnight, during holidays, and so on). Designing a
    reliable solution will free you up to live your life while your software is running
    smoothly.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**健壮性**：无论你的应用程序有多大的可扩展性，如果它不能保证一个稳定且始终在线的解决方案，你将无法得到任何安宁。健壮性对于关键解决方案非常重要，在这些解决方案中，由于应用程序解决的问题类型，你无法在任何时候进行维护。在许多行业中，软件不能停止，当没有人可用时（如夜间、节假日等），会有很多程序运行。设计一个可靠的解决方案将使你能够在软件平稳运行的同时享受生活。'
- en: '**Security**: This is another really important area that needs to be discussed
    after the requirements stage. Everybody worries about security, and different
    laws dealing with it are in place in different parts of the world. You, as a software
    architect, must understand that security needs to be provided by design. This
    is the only way to cope with all the needs that the security community is discussing
    right now.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：这是在需求阶段之后需要讨论的另一个非常重要的领域。每个人都担心安全问题，世界上不同地区的不同法律都在处理这个问题。作为软件架构师，你必须理解安全性需要通过设计来提供。这是应对目前安全社区讨论的所有需求的唯一方法。'
- en: '**Performance**: The process of understanding the system you are going to develop
    will probably give you a good idea of what you will need to do to get the desired
    performance from the system. This topic needs to be discussed with the user, to
    identify most of the bottlenecks you will face during the development stage.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：理解你将要开发的系统的过程可能会给你一个很好的想法，了解你需要做些什么才能从系统中获得期望的性能。这个话题需要与用户讨论，以确定你在开发阶段将面临的大部分瓶颈。'
- en: It is worth mentioning that all these concepts are requirements for the new
    generation of solutions that the world needs. What differentiates good software
    from incredible software is the amount of work done to meet the project requirements.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，所有这些概念都是世界所需的新一代解决方案的要求。区分优秀软件和卓越软件的是满足项目要求所付出的工作量。
- en: Reviewing the specification
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 审查规格说明
- en: Once you have the specification written, it is time to confirm with the stakeholders
    whether they agree with it. This can be done in a review meeting, or it can be
    done online using collaboration tools.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你写好了规格说明，就需要与利益相关者确认他们是否同意。这可以通过审查会议来完成，或者可以使用协作工具在线完成。
- en: This is when you present all the prototypes, documents, and information you
    have gathered. As soon as everybody agrees with the specification, you are ready
    to start studying the best way to implement this part of your project.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这时，你需要展示你所收集的所有原型、文档和信息。一旦所有人都同意规格说明，你就可以开始研究实施项目这一部分的最佳方式了。
- en: It is worth mentioning that you might use the process described here for either
    the complete software or for just a small part of it.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，你可以使用这里描述的过程来处理整个软件或其一部分。
- en: Using design techniques as a helpful tool
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用设计技术作为有用的工具
- en: Defining a solution is not easy. Determining which technology to use is also
    difficult. It is true that, during your career as a software architect, you will
    find many projects where your customer will bring you a solution *ready for development*.
    This can get quite complicated if you consider that solution as the correct solution;
    most of the time, there will be architectural and functional mistakes that will
    cause problems in the solution in the future.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个解决方案并不容易。确定要使用哪种技术也很困难。确实，在你作为软件架构师的职业生涯中，你将发现许多项目，你的客户将带来一个*准备开发*的解决方案。如果你认为这个解决方案是正确的解决方案，那么这可能会变得相当复杂；大多数情况下，将会有架构和功能错误，这将在未来导致解决方案中的问题。
- en: 'There are some cases where the problem is worse – when the customer does not
    know the best solution for the problem. Some design techniques can help us with
    this, and we will introduce two of them here: **Design Thinking** and **Design
    Sprint**.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些情况下问题更为严重——当客户不知道问题的最佳解决方案时。一些设计技术可以帮助我们，我们在这里将介绍其中的两种：**设计思维**和**设计冲刺**。
- en: What you must understand is that these techniques can be a fantastic option
    to discover real requirements. As a software architect, you are committed to helping
    your team to use the correct tools at the correct time, and these tools may be
    the right options to ensure the project’s success.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须理解的是，这些技术可以是一个发现真实需求的绝佳选择。作为一名软件架构师，你致力于帮助你的团队在正确的时间使用正确的工具，这些工具可能是确保项目成功的正确选择。
- en: Design Thinking
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计思维
- en: Design Thinking is a process that allows you to collect data directly from the
    users, focusing on achieving the best results to solve a problem. During this
    process, the team will have the opportunity to discover all the *personas* that
    will interact with the system. This will have a wonderful impact on the solution
    since you can develop the software by focusing on the user experience, which can
    have a fantastic impact on the results.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 设计思维是一个允许你直接从用户收集数据的过程，专注于实现最佳结果以解决问题。在这个过程中，团队将有机会发现所有将与系统互动的*角色*。这将对解决方案产生美妙的影响，因为你可以通过关注用户体验来开发软件，这可以产生惊人的结果。
- en: 'The process is based on the following steps:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程基于以下步骤：
- en: '**Empathize**: In this step, you must execute field research to discover users’
    concerns. This is where you find out about the users of the system. The process
    is good for making you understand why and for whom you are developing this software.'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**同理心**: 在这一步，你必须执行实地研究以发现用户的需求。这是你了解系统用户的地方。这个过程有助于你理解为什么以及为谁开发这款软件。'
- en: '**Define**: Once you have the users’ concerns, it is time to define their needs
    to solve them.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**定义**: 一旦你了解了用户的需求，就是时候定义他们的需求以解决问题了。'
- en: '**Ideate**: The needs will provide an opportunity to brainstorm some possible
    solutions.'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**构思**: 需求将提供机会来头脑风暴一些可能的解决方案。'
- en: '**Prototype**: These solutions can be developed as mock-ups to confirm whether
    they are good ones.'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**原型**: 这些解决方案可以作为原型来开发，以确认它们是否是好的解决方案。'
- en: '**Test**: Testing the prototypes will help you to understand the prototype
    that is most connected to the real needs of the users.'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试**: 测试原型将帮助你理解与用户真实需求最相关的原型。'
- en: The focus of a technique like this one is to accelerate the process of discerning
    the right product and considering the **Minimum Viable Product** (**MVP**). For
    sure, the prototype process will help stakeholders to understand the final product
    and, at the same time, engage the team to deliver the best solution.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 这种技术的重点是加速辨别正确产品和考虑**最小可行产品**（**MVP**）的过程。当然，原型过程将帮助利益相关者理解最终产品，同时让团队参与提供最佳解决方案。
- en: Design Sprint
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设计冲刺
- en: Design Sprint is a process focused on solving critical business questions through
    design in a five-day sprint. This technique was presented by Google, and it is
    something that allows you to quickly test and learn from an idea when you are
    looking to build and launch a solution to market.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 设计冲刺是一个在五天冲刺中通过设计解决关键业务问题的过程。这项技术由谷歌提出，它允许你在寻找构建和推出市场解决方案时快速测试并从想法中学习。
- en: 'The process involves experts spending a week to solve the problem at hand,
    in a war room prepared for that purpose. The week looks like this:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程涉及专家花费一周时间解决手头的问题，在一个为此目的准备的作战室里。这一周看起来是这样的：
- en: '**Monday**: The focus of this day is to identify the target of the sprint and
    map the challenge to achieve it.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**星期一**：这一天的重点是确定冲刺的目标，并将挑战映射到实现目标上。'
- en: '**Tuesday**: After understanding the goal of the sprint, participants start
    sketching solutions that may solve it. It is time to find customers to test the
    new solution that will be provided.'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**星期二**：在理解了冲刺目标后，参与者开始绘制可能解决问题的解决方案草图。现在是时候找到客户来测试即将提供的新解决方案了。'
- en: '**Wednesday**: This is when the team needs to decide on the solutions that
    have the greatest chance of solving the problem. The team must draw these solutions
    into a storyboard, preparing a plan for the prototype.'
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**星期三**：这是团队需要决定最有可能解决问题的解决方案的时候。团队必须将这些解决方案绘制成故事板，为原型准备计划。'
- en: '**Thursday**: It is time to prototype the idea planned on the storyboard.'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**星期四**：现在是时候将故事板上计划的想法原型化了。'
- en: '**Friday**: Having completed the prototype, the team presents it to customers,
    learning by getting information from their reactions to the solution designed.'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**星期五**：在完成原型后，团队向客户展示它，通过获取他们对设计的反应来学习。'
- en: As you can see, in both techniques, the acceleration of collecting reactions
    from customers comes from prototypes that will materialize your team’s ideas into
    something more tangible for the end user.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，在这两种技术中，从客户那里收集反应的加速来自于将你的团队想法具体化为对最终用户更直观的东西的原型。
- en: Common cases where the requirements gathering process impacts system results
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见的情况，需求收集过程会影响系统结果
- en: All the information discussed up to this point in the chapter is useful if you
    want to design software following the principles of good engineering. Rather than
    advocating for traditional or agile development methods, the emphasis is on building
    software in a professional manner.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中讨论的所有信息，如果你想要按照良好的工程原则设计软件，都是非常有用的。我们并不主张传统的或敏捷的开发方法，而是强调以专业的方式构建软件。
- en: It is also a good idea to know about some cases in which failing to perform
    the activities you read about can cause some trouble for a software project. The
    following cases intend to describe what can go wrong, and how the preceding techniques
    can help a development team to solve the associated problems.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 了解一些案例也是好的，在这些案例中，未能执行你所阅读的活动可能会给软件项目带来一些麻烦。以下案例旨在描述可能出错的情况，以及前述技术如何帮助开发团队解决相关的问题。
- en: In most cases, very simple actions can guarantee better communication between
    the team and the customer, and this easy communication flow can transform a big
    problem into a real solution. Let us examine three common cases where requirements
    gathering can impact software performance, functionality, and usability.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，非常简单的行动可以保证团队和客户之间更好的沟通，这种简单的沟通流程可以将大问题转化为真正的解决方案。让我们考察三个常见的案例，这些案例中需求收集可能会影响软件性能、功能和可用性。
- en: Case 1 – my website is too slow to open that page!
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例 1 – 我的网站打开那个页面太慢了！
- en: Performance is one of the biggest problems that you as a software architect
    will deal with during your career. The reason why this aspect of any software
    is so problematic is that we do not have infinite computational resources to solve
    problems. The cost of computation is still high, especially if you are talking
    about software with a high number of simultaneous users.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 性能是你作为软件架构师在职业生涯中将要处理的最大问题之一。任何软件的这一方面之所以如此有问题，是因为我们没有无限的计算资源来解决问题。计算成本仍然很高，尤其是如果你在谈论具有大量同时用户的软件。
- en: 'You cannot solve performance problems by writing requirements. However, you
    will not end up in trouble if you write them correctly. The idea here is that
    requirements must present the desired performance of a system. A simple sentence
    describing this can help the entire team that works on the project:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能通过编写需求来解决性能问题。然而，如果你正确地编写它们，你也不会陷入麻烦。这里的想法是，需求必须展示系统的预期性能。一个简单的句子可以帮助整个项目团队（用户、测试人员、开发人员、架构师、经理等）：
- en: '*Non-functional requirement: Performance – any web page of this software shall
    respond in at least 2 seconds, even when 1,000 users are accessing it concurrently*.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '*非功能性需求：性能 – 任何该软件的网页都应在至少 2 秒内响应，即使有 1,000 个用户同时访问它*。'
- en: The preceding sentence just lets everybody (users, testers, developers, architects,
    managers, and so on) know that any web page has a target to achieve. This is a
    good start, but it is not enough. A great environment for developing and deploying
    your application is also important. This is where .NET 8 can help you a lot; especially
    if you are talking about web apps, ASP.NET Core is considered one of the fastest
    options to deliver solutions today.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的句子只是让每个人（用户、测试人员、开发人员、架构师、经理等）知道任何网页都有一个目标要实现。这是一个好的开始，但还不够。一个良好的开发和部署应用程序的环境也很重要。这正是
    .NET 8 可以大量帮助你的地方；特别是如果你在谈论 Web 应用程序，ASP.NET Core 被认为是当今提供解决方案最快的选项之一。
- en: When it comes to performance, you, as a software architect, should consider
    the use of the techniques listed in the following sections together with specific
    tests to guarantee this non-functional requirement. It is also important to mention
    that ASP.NET Core will help you to use them easily, together with some **Platform
    as a Service** (**PaaS**) solutions delivered by Microsoft Azure.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在谈到性能时，作为软件架构师，你应该考虑使用以下章节中列出的技术，并结合特定的测试来保证这一非功能性需求。还需要提到的是，ASP.NET Core 将帮助你轻松使用它们，以及一些由微软
    Azure 提供的 **平台即服务**（**PaaS**）解决方案。
- en: Understanding backend caching
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解后端缓存
- en: Caching is a great technique to avoid time-consuming and redundant queries.
    For instance, if you are fetching car models from a database, the number of cars
    in the database can increase, but the models themselves will not change. Once
    you have an application that constantly accesses car models, a good practice is
    to cache that information.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 缓存是一种避免耗时和冗余查询的绝佳技术。例如，如果你是从数据库中获取汽车型号，数据库中的汽车数量可能会增加，但型号本身不会改变。一旦你有一个不断访问汽车型号的应用程序，一个好的做法是将这些信息缓存起来。
- en: It is important to understand that a cache is stored in the backend and that
    cache is shared by the whole application (*in-memory caching*). A point to focus
    on is that when you are working on a scalable solution, you can configure a *distributed
    cache* using the Azure platform. In fact, ASP.NET provides both in-memory caching
    and distributed caching, so you can decide on the one that best fits your needs.
    *Chapter 2*, *Non-Functional Requirements*, covers scalability aspects in the
    Azure platform.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这一点很重要：缓存存储在后端，并且该缓存由整个应用程序共享（*内存缓存*）。需要注意的是，当你在开发可扩展的解决方案时，你可以使用 Azure 平台配置一个
    *分布式缓存*。实际上，ASP.NET 提供了内存缓存和分布式缓存，因此你可以选择最适合你需求的一种。*第二章*，*非功能性需求*，涵盖了 Azure 平台的可扩展性方面。
- en: It is also important to mention that caching can happen in the frontend, in
    proxies along the way to the server, CDNs, and so on.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要提到的是，缓存也可能发生在前端、通往服务器的代理、CDN 等地方。
- en: Applying asynchronous programming
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用异步编程
- en: When you develop ASP.NET applications, you need to keep in mind that your app
    needs to be designed for simultaneous access by many users. Asynchronous programming
    lets you do this simply, by giving you the keywords `async` and `await`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开发 ASP.NET 应用程序时，你需要记住你的应用程序需要设计为能够被许多用户同时访问。异步编程通过提供 `async` 和 `await` 关键字，让你可以简单地做到这一点。
- en: The basic concept behind these keywords is that `async` enables any method to
    run asynchronously. On the other hand, `await` lets you synchronize the call of
    an asynchronous method without blocking the thread that is calling it. This easy-to-develop
    pattern will make your application run without performance bottlenecks and bring
    better responsiveness. This book will cover more about this subject in *Chapter
    2*, *Non-Functional Requirements*.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这些关键字背后的基本概念是，`async` 允许任何方法异步运行。另一方面，`await` 允许你在不阻塞调用它的线程的情况下同步调用异步方法。这种易于开发的模式将使你的应用程序运行得更加流畅，没有性能瓶颈，并带来更好的响应性。本书将在
    *第2章*，*非功能性需求* 中更详细地介绍这一主题。
- en: Dealing with object allocation
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 处理对象分配
- en: One very good tip to avoid poor performance is to understand how the **Garbage
    Collector** (**GC**) works. The GC is the engine that will free memory automatically
    when you finish using it. There are some very important aspects of this topic,
    due to the complexity that the GC has.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 避免性能不佳的一个非常好的建议是了解垃圾回收器（**GC**）的工作原理。GC 是当你完成使用它时自动释放内存的引擎。由于 GC 的复杂性，这个主题有一些非常重要的方面。
- en: Some types of objects are not collected by the GC if you do not dispose of them.
    The list includes any object that interacts with I/O, such as files and streaming.
    If you do not correctly use the C# syntax to create and destroy this kind of object,
    you will have memory leaks, which will deteriorate your application’s performance.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有正确处理这些对象，某些类型的对象不会被 GC 收集。这些对象包括与 I/O 交互的对象，例如文件和流。如果你没有正确使用 C# 语法来创建和销毁这类对象，你将会有内存泄漏，这会降低应用程序的性能。
- en: 'The incorrect way of working with I/O objects is:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 与 I/O 对象交互的不正确方式是：
- en: '[PRE0]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The correct way of working with I/O objects is:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 与 I/O 对象交互的正确方式是：
- en: '[PRE1]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: It might be worth noting that this correct approach also ensures the file gets
    written (it calls `FileStream.Flush()` to dispose of its resources gracefully).
    In the incorrect example, the contents might not even be written to the file.
    Even though the preceding practice is mandatory for I/O objects, it is totally
    recommended that you keep doing this in all disposable objects. Indeed, using
    code analyzers in your solutions with warnings as errors will prevent you from
    accidentally making these mistakes! This will help the GC and will keep your application
    running with the right amount of memory. Depending on the type of object, mistakes
    here can snowball, and you could end up with other bad things on a bigger scale,
    for instance, port/connection exhaustion.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这种正确的方法也确保文件被正确写入（它调用 `FileStream.Flush()` 来优雅地释放其资源）。在不正确的示例中，内容甚至可能没有被写入文件。尽管前面的做法对于
    I/O 对象是强制性的，但强烈建议你在所有可处置对象上继续这样做。实际上，在你的解决方案中使用代码分析器，将警告视为错误，将防止你意外犯下这些错误！这将有助于
    GC，并确保你的应用程序以正确的内存量运行。根据对象类型，这里的错误可能会累积，最终可能导致更大规模的不良后果，例如端口/连接耗尽。
- en: Another important aspect that you need to know about is that the time spent
    by the GC collecting objects will interfere with the performance of your app.
    Because of this, avoid allocating large objects and be careful with event handling
    and week references; otherwise, it can lead to you always waiting for the GC to
    finish its task.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要了解的另一个重要方面是，GC 收集对象所花费的时间将干扰应用程序的性能。因此，避免分配大对象，并小心处理事件处理和弱引用；否则，它可能导致你总是等待
    GC 完成其任务。
- en: Getting better database access
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提高数据库访问效率
- en: One of the most common performance Achilles’ heels is database access. The reason
    why this is still a big problem is a lack of attention paid while writing queries
    or lambda expressions to get information from a database. This book will cover
    Entity Framework Core in *Chapter 13*, *Interacting with Data in C# – Entity Framework
    Core*, but it is important to know what to choose and the correct data information
    to read from a database. Filtering columns and rows is imperative for an application
    that wants to deliver on performance.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的性能阿基里斯之踵之一是数据库访问。这仍然是一个大问题，原因是在编写查询或 lambda 表达式从数据库获取信息时缺乏关注。本书将在 *第13章*，*在
    C# 中与数据交互 – Entity Framework Core* 中介绍 Entity Framework Core，但了解选择什么以及从数据库中读取正确的数据信息非常重要。对于想要提高性能的应用程序来说，过滤列和行是必不可少的。
- en: The good thing is that best practices related to caching, asynchronous programming,
    and object allocation fit completely into the environment of databases. It is
    only a matter of choosing the correct pattern to get better-performing software.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 好消息是，与缓存、异步编程和对象分配相关的最佳实践完全适用于数据库环境。这只是一个选择正确模式以获得性能更好的软件的问题。
- en: Case 2 – the user’s needs are not properly implemented
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例 2 – 用户的需求没有得到适当实现
- en: The more technology is used in a wide variety of areas, the more difficult it
    is to deliver exactly what the user needs. Maybe this sentence sounds weird to
    you, but you must understand that developers, in general, study how to develop
    software, but they rarely study delivering the needs of a specific area. Of course,
    it is not easy to learn how to develop software, but it is even more difficult
    to understand a specific need in a specific area. Software development nowadays
    delivers software to all types of industries. The question here is *how can a
    developer, whether a software architect or not, evolve enough to deliver software
    in the area they are responsible for?*
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 技术在广泛领域的应用越多，交付用户所需的确切内容就越困难。也许这句话听起来有些奇怪，但你必须理解，开发者通常研究如何开发软件，但他们很少研究如何满足特定领域的需求。当然，学习如何开发软件并不容易，但理解特定领域的特定需求更加困难。如今，软件开发将软件交付给所有类型的行业。这里的问题是*开发者，无论是否是软件架构师，如何才能足够进化，以交付他们负责领域的软件？*
- en: 'Gathering software requirements will help you in this tough task; writing them
    will make you understand and organize the architecture of the system. There are
    several ways to minimize the risks of implementing something different from what
    the user really needs:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 收集软件需求将帮助你在这项艰巨的任务中；编写它们将帮助你理解和组织系统的架构。有几种方法可以最小化实现与用户真正需求不符的风险：
- en: Prototyping the interface to achieve an understanding of the user interface
    faster
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过原型设计快速理解用户界面。
- en: Designing the data flow to detect gaps between the system and the user operations
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计数据流以检测系统与用户操作之间的差距。
- en: Frequent meetings to stay up to date on the user’s current needs and be aligned
    with incremental deliveries
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 举行频繁会议以保持对用户当前需求的最新了解，并与增量交付保持一致。
- en: 'Again, as a software architect, you will have to define how the software will
    be implemented. Most of the time, you are not going to be the one who programs
    it, but you will always be the one responsible for this. For this reason, some
    techniques can be useful to avoid the wrong implementation:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，作为一名软件架构师，你将不得不定义软件将如何实现。大多数时候，你不会是编写它的人，但你将始终是负责这一点的。因此，一些技术可以用来避免错误的实现：
- en: Requirements are reviewed by the developers to guarantee that they understand
    what they need to develop.
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者将审查需求，以确保他们理解他们需要开发的内容。
- en: Code inspection to validate a predefined code standard. We will cover this in
    *Chapter 4*, *Best Practices in Coding C# 12*.
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过代码审查来验证预定义的代码标准。我们将在*第 4 章*，*C# 编码最佳实践 12*中介绍这一点。
- en: Meetings to eliminate impediments.
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 举行会议以消除障碍。
- en: Remember, making sure the implementation matches the user’s needs is your responsibility.
    Use every tool you can to do so.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，确保实现符合用户需求是你的责任。使用你能用到的每一个工具。
- en: Case 3 – the usability of the system does not meet the user’s needs
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 案例 3 – 系统的可用性不符合用户需求
- en: Usability is a key point for the success of a software project. The way the
    software is presented and how it solves a problem will determine whether the user
    wants to use it or not. As a software architect, you must keep in mind that delivering
    software with good usability is mandatory nowadays.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 用户体验是软件项目成功的关键。软件的展示方式和解决问题的方法将决定用户是否愿意使用它。作为一名软件架构师，你必须牢记，如今交付具有良好用户体验的软件是强制性的。
- en: There are basic concepts of usability that this book does not intend to cover,
    but a good way to meet the user’s needs when it comes to usability is by understanding
    who is going to use the software. Design Thinking can help you a lot with that,
    as was discussed earlier in this chapter.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书不打算涵盖用户体验的基本概念，但了解谁将使用该软件是满足用户体验需求的好方法。正如本章前面所讨论的，设计思维在这方面可以帮助你很多。
- en: Understanding the user will help you to decide whether the software is going
    to run on a web page, a cell phone, or even in the background. This understanding
    is very important to a software architect because the elements of a system will
    be better presented if you correctly map who will use them.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 理解用户将帮助你决定软件是否将在网页、手机上运行，甚至是在后台。这种理解对软件架构师来说非常重要，因为如果你正确地映射了谁将使用这些元素，系统的元素将得到更好的展示。
- en: On the other hand, if you do not care about that, you will just deliver software
    that works. This can be good for a short time, but it will not exactly meet the
    real needs that made a person ask you to architect the software. You must keep
    in mind the options and understand that good software is software designed to
    run on many platforms and devices.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你不关心这一点，你将只会交付出能工作的软件。这可能在短期内是好的，但它不会完全满足让人请你设计软件的真实需求。你必须牢记这些选项，并理解好的软件是设计在许多平台和设备上运行的软件。
- en: You will be happy to know that .NET 8 is an incredible cross-platform option
    for that. So, you can develop solutions to run your apps in Linux, Windows, Android,
    and iOS. You can run your applications on big screens, tablets, cell phones, and
    even drones! You can embed apps on boards for automation or in HoloLens for mixed
    reality. Software architects must be open-minded to design exactly what their
    users need.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你会很高兴地知道.NET 8是一个令人难以置信的跨平台选项。因此，你可以开发在Linux、Windows、Android和iOS上运行的应用程序解决方案。你可以在大屏幕、平板电脑、手机甚至无人机上运行你的应用程序！你可以在自动化板或HoloLens的混合现实设备上嵌入应用程序。软件架构师必须思想开放，以设计出用户真正需要的解决方案。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the purpose of a software architect in a
    software development team. Also, this chapter covered the basics of software development
    process models and the requirements gathering process. You also had the opportunity
    to learn about how to create your Azure account, which will be used during the
    case study of this book. Moreover, you even learned about functional and non-functional
    requirements and how to create them using user stories. These techniques will
    help you deliver a better software project.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了软件架构师在软件开发团队中的目的。本章还涵盖了软件开发过程模型的基础和需求收集过程。你还有机会了解如何创建你的Azure账户，该账户将在本书的案例研究中使用。此外，你还学习了功能性和非功能性需求以及如何使用用户故事来创建它们。这些技术将帮助你交付更好的软件项目。
- en: In the next chapter, you will have the opportunity to understand how important
    functional and non-functional requirements are to software architecture.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将有机会了解功能性和非功能性需求对软件架构的重要性。
- en: Questions
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the expertise that a software architect needs to have?
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师需要具备哪些专业知识？
- en: How can Azure help a software architect?
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure如何帮助软件架构师？
- en: How does a software architect decide on the best software development process
    model to use in a project?
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师如何决定在项目中使用哪种最佳软件开发过程模型？
- en: How does a software architect contribute to gathering requirements?
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师如何贡献于需求收集？
- en: What kind of requirements does a software architect need to check in a requirements
    specification?
  id: totrans-284
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师在需求规范中需要检查哪些类型的需求？
- en: How do Design Thinking and Design Sprint help a software architect in the process
    of gathering requirements?
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计思维和设计冲刺如何帮助软件架构师在收集需求的过程中？
- en: How do user stories help a software architect in the process of writing requirements?
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户故事如何帮助软件架构师在编写需求的过程中？
- en: What are some good techniques to develop very good performance software?
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发高性能软件有哪些好的技术？
- en: How does a software architect check whether a user requirement is correctly
    implemented?
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构师如何检查用户需求是否正确实现？
- en: Further reading
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Here, we have listed some books and links you may consider using to gather more
    information about the topics covered in this chapter.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们列出了一些你可能考虑使用的书籍和链接，以获取有关本章涵盖主题的更多信息。
- en: 'For information on Azure, check these out:'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于Azure的信息，请查看以下内容：
- en: '[https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers](https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers)'
  id: totrans-292
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers](https://www.packtpub.com/virtualization-and-cloud/hands-azure-developers)'
- en: '[https://azure.microsoft.com/overview/what-is-azure/](https://azure.microsoft.com/overview/what-is-azure/)'
  id: totrans-293
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://azure.microsoft.com/overview/what-is-azure/](https://azure.microsoft.com/overview/what-is-azure/)'
- en: '[https://azure.microsoft.com/services/devops/](https://azure.microsoft.com/services/devops/)'
  id: totrans-294
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://azure.microsoft.com/services/devops/](https://azure.microsoft.com/services/devops/)'
- en: '[https://azurecharts.com/](https://azurecharts.com/)'
  id: totrans-295
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://azurecharts.com/](https://azurecharts.com/)'
- en: 'More information on .NET 8 can be found here:'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更多关于.NET 8的信息可以在这里找到：
- en: '[https://docs.microsoft.com/dotnet/](https://docs.microsoft.com/dotnet/)'
  id: totrans-297
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/dotnet/](https://docs.microsoft.com/dotnet/)'
- en: '[https://docs.microsoft.com/aspnet/](https://docs.microsoft.com/aspnet/)'
  id: totrans-298
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/aspnet/](https://docs.microsoft.com/aspnet/)'
- en: '[https://docs.microsoft.com/aspnet/core/performance/performance-best-practices](https://docs.microsoft.com/aspnet/core/performance/performance-best-practices)'
  id: totrans-299
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/aspnet/core/performance/performance-best-practices](https://docs.microsoft.com/aspnet/core/performance/performance-best-practices)'
- en: 'Software development process model links are listed here:'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件开发过程模型链接列在这里：
- en: '[https://agilemanifesto.org/](https://agilemanifesto.org/)'
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://agilemanifesto.org/](https://agilemanifesto.org/)'
- en: '[https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038](https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038)'
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038](https://www.amazon.com/Software-Engineering-10th-Ian-Sommerville/dp/0133943038)'
- en: '[https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/](https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/)'
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/](https://www.amazon.com/Software-Engineering-Practitioners-Roger-Pressman/dp/0078022126/)'
- en: '[https://scrumguides.org/](https://scrumguides.org/)'
  id: totrans-304
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://scrumguides.org/](https://scrumguides.org/)'
- en: '[https://www.packtpub.com/application-development/professional-scrummasters-handbook](https://www.packtpub.com/application-development/professional-scrummasters-handbook)'
  id: totrans-305
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/professional-scrummasters-handbook](https://www.packtpub.com/application-development/professional-scrummasters-handbook)'
- en: '[https://en.wikipedia.org/wiki/Incremental_build_model](https://en.wikipedia.org/wiki/Incremental_build_model)'
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Incremental_build_model](https://en.wikipedia.org/wiki/Incremental_build_model)'
- en: '[https://en.wikipedia.org/wiki/Waterfall_model](https://en.wikipedia.org/wiki/Waterfall_model)'
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://en.wikipedia.org/wiki/Waterfall_model](https://en.wikipedia.org/wiki/Waterfall_model)'
- en: '[http://www.extremeprogramming.org/](http://www.extremeprogramming.org/)'
  id: totrans-308
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.extremeprogramming.org/](http://www.extremeprogramming.org/)'
- en: '[https://www.gv.com/sprint/](https://www.gv.com/sprint/)'
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.gv.com/sprint/](https://www.gv.com/sprint/)'
- en: 'Here you can find SAFe® information:'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里您可以找到SAFe®信息：
- en: '[https://www.scaledagileframework.com/](https://www.scaledagileframework.com/)'
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.scaledagileframework.com/](https://www.scaledagileframework.com/)'
- en: '[https://scaledagile.com/train-certify/](https://scaledagile.com/train-certify/)'
  id: totrans-312
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://scaledagile.com/train-certify/](https://scaledagile.com/train-certify/)'
- en: '[https://docs.microsoft.com/azure/devops/boards/plans/safe-concepts](https://docs.microsoft.com/azure/devops/boards/plans/safe-concepts)'
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/azure/devops/boards/plans/safe-concepts](https://docs.microsoft.com/azure/devops/boards/plans/safe-concepts)'
- en: Learn more on Discord
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Discord上了解更多信息
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the authors, and learn about new releases – follow the QR code
    below:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的Discord社区——您可以在这里分享反馈、向作者提问，并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
- en: '![](img/QR_Code1750817512109020461.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code1750817512109020461.png)'
