- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Hello, C#! Welcome, .NET!
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 嗨，C#! 欢迎使用 .NET！
- en: In this first chapter, the first goal is setting up your development environment
    to use Visual Studio 2022, Visual Studio Code, or JetBrains Rider.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，第一个目标是设置您的开发环境以使用 Visual Studio 2022、Visual Studio Code 或 JetBrains Rider。
- en: Throughout this book, I will use the names **Visual Studio**, **VS Code**, and
    **Rider** to refer to these three code editors, respectively.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我将使用 **Visual Studio**、**VS Code** 和 **Rider** 这三个名称分别指代这三个代码编辑器。
- en: The other goals are understanding the similarities and differences between modern
    .NET, .NET Core, .NET Framework, Mono, Xamarin, and .NET Standard; creating the
    simplest application possible with C# 13 and .NET 9, using various code editors;
    and then discovering good places to look for help.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 其他目标包括理解现代 .NET、.NET Core、.NET Framework、Mono、Xamarin 和 .NET Standard 之间的相似之处和不同之处；使用
    C# 13 和 .NET 9 创建可能的最简单应用程序，使用各种代码编辑器；然后发现寻找帮助的好地方。
- en: 'My style of writing ensures that you can get started from my book and then
    switch to online documentation and other online resources, like videos, blogs,
    and forums, which are the main ways that developers like to learn, as shown at
    the following link: [https://survey.stackoverflow.co/2024/developer-profile#learning-to-code](https://survey.stackoverflow.co/2024/developer-profile#learning-to-code).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我的写作风格确保您可以从我的书中开始，然后切换到在线文档和其他在线资源，如视频、博客和论坛，这些是开发者喜欢学习的主要方式，如下链接所示：[https://survey.stackoverflow.co/2024/developer-profile#learning-to-code](https://survey.stackoverflow.co/2024/developer-profile#learning-to-code)。
- en: 'This chapter covers the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节涵盖了以下主题：
- en: Introducing this book and its contents
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍本书及其内容
- en: Setting up your development environment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Understanding .NET
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 .NET
- en: Building console apps using Visual Studio
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 构建控制台应用程序
- en: Building console apps using VS Code
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 VS Code 构建控制台应用程序
- en: Making good use of the GitHub repository for this book
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充分利用本书的 GitHub 仓库
- en: Looking for help
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 寻找帮助
- en: Introducing this book and its contents
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍本书及其内容
- en: Let’s get started by introducing you to the code solutions, structure, and content
    of this book.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从介绍这本书的代码解决方案、结构和内容开始。
- en: Getting code solutions for this book
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取本书的代码解决方案
- en: 'The GitHub repository for this book has solutions that use full application
    projects for all code tasks and exercises, found at the following link:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本书 GitHub 仓库提供了使用完整应用程序项目解决所有代码任务和练习的解决方案，如下链接所示：
- en: '[https://github.com/markjprice/cs13net9](https://github.com/markjprice/cs13net9)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9](https://github.com/markjprice/cs13net9)'
- en: 'After navigating to the GitHub repository in your web browser, press the `.`
    (dot) key on your keyboard, or manually change `.com` to `.dev` in the link to
    convert the repository into a live code editor based on VS Code, called GitHub
    Codespaces, as shown in *Figure 1.1*:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的网络浏览器中导航到 GitHub 仓库后，按键盘上的 `.`（点）键，或手动将链接中的 `.com` 更改为 `.dev`，将仓库转换为基于 VS
    Code 的实时代码编辑器，称为 GitHub Codespaces，如图 *1.1* 所示：
- en: '![](img/B22322_01_01.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_01.png)'
- en: 'Figure 1.1: GitHub Codespaces live-editing the book’s GitHub repository'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：GitHub Codespaces 在实时编辑本书的 GitHub 仓库
- en: '**Warning!** When you access a repository using GitHub Codespaces, its GitHub
    Repositories extension will attempt to download the repository’s index. By default,
    the maximum size can be up to 50MB but the repository exceeds this limit, so you
    will see the following warning message: `Repository exceeds download size limit!
    Continuing with partial text services.` You can ignore this message because you
    are not using the full features.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** 当您使用 GitHub Codespaces 访问仓库时，其 GitHub Repositories 扩展将尝试下载仓库的索引。默认情况下，最大大小可达
    50MB，但仓库超过了此限制，因此您将看到以下警告信息：“仓库超过下载大小限制！继续使用部分文本服务。”您可以忽略此信息，因为您没有使用完整功能。'
- en: We provide you with a PDF file that has color images of the screenshots and
    diagrams used in this book. You can download this file from [https://packt.link/gbp/9781837635870](https://packt.link/gbp/9781837635870).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为您提供了一份包含本书中使用的截图和图表彩色图像的 PDF 文件。您可以从 [https://packt.link/gbp/9781837635870](https://packt.link/gbp/9781837635870)
    下载此文件。
- en: VS Code in a web browser is great to run alongside your chosen local code editor
    as you work through the book’s coding tasks. You can compare your code to the
    solution code and easily copy and paste parts if needed.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络浏览器中运行 VS Code 是在您完成本书的编码任务时与您选择的本地代码编辑器并行运行的好方法。您可以将您的代码与解决方案代码进行比较，并在需要时轻松复制和粘贴部分内容。
- en: 'You do not need to use or know anything about Git to get the solution code
    of this book. You can download a ZIP file containing all the code solutions by
    using the following direct link and then extract the ZIP file into your local
    filesystem: [https://github.com/markjprice/cs13net9/archive/refs/heads/main.zip](https://github.com/markjprice/cs13net9/archive/refs/heads/main.zip).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要使用或了解Git就能获取本书的解决方案代码。你可以通过以下直接链接下载包含所有代码解决方案的ZIP文件，然后将ZIP文件提取到你的本地文件系统中：[https://github.com/markjprice/cs13net9/archive/refs/heads/main.zip](https://github.com/markjprice/cs13net9/archive/refs/heads/main.zip)。
- en: .NET terms used in this book
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书使用的.NET术语
- en: Throughout this book, I use the term **modern .NET** to refer to .NET 9 and
    its predecessors, like .NET 6, that derive from .NET Core. I use the term **legacy
    .NET** to refer to .NET Framework, Mono, Xamarin, and .NET Standard.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我使用术语**现代.NET**来指代.NET 9及其前身，如.NET 6，它们源自.NET Core。我使用术语**传统.NET**来指代.NET
    Framework、Mono、Xamarin和.NET Standard。
- en: Modern .NET is a unification of those legacy platforms and standards.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现代.NET是那些传统平台和标准的统一体。
- en: The structure and style of this book
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书的结构和风格
- en: 'After this first chapter, the book will be divided into three parts: language,
    libraries, and web development.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一章之后，本书将分为三个部分：语言、库和Web开发。
- en: First, we will cover the grammar and vocabulary of the C# language; second,
    we will cover the types available in the .NET libraries for building app features;
    and third, we will cover the fundamentals of cross-platform websites, services,
    and browser apps that you can build using C# and .NET.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将涵盖C#语言的语法和词汇；其次，我们将涵盖.NET库中可用于构建应用程序功能的类型；第三，我们将涵盖使用C#和.NET构建的跨平台网站、服务和浏览器应用程序的基础。
- en: Most people learn complex topics best by imitation and repetition, rather than
    reading a detailed explanation of the theory; therefore, I will not overload you
    with detailed explanations of every step throughout this book. The idea is to
    get you to write some code and see it run.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数人通过模仿和重复来最好地学习复杂主题，而不是阅读理论的详细解释；因此，我不会在这本书的每个步骤都提供详细的解释。目的是让你编写一些代码并看到它运行。
- en: You don’t need to know all the nitty-gritty details immediately. That will be
    something that comes with time as you build your own apps and go beyond what any
    book can teach you.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要立即知道所有细节。这将是随着你构建自己的应用程序并超越任何书籍所能教授的内容而逐渐出现的事情。
- en: In the words of Samuel Johnson, author of the English dictionary in 1755, I
    have committed *“a few wild blunders, and risible absurdities, from which no work
    of such multiplicity is free.”* I take sole responsibility for these and hope
    you appreciate the challenge of my attempt to lash the wind by writing this book
    about rapidly evolving technologies, like C# and .NET, and the apps that you can
    build with them.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 用1755年编写英语词典的塞缪尔·约翰逊的话来说，我犯了一些“一些荒谬的错误和可笑的谬误，任何如此繁多的作品都无法避免。”我对此承担全部责任，并希望你能欣赏我尝试通过撰写关于快速发展的技术（如C#和.NET）以及你可以用它们构建的应用程序的书所带来的挑战。
- en: 'If you have a complaint about this book, then please contact me before writing
    a negative review on Amazon. Authors cannot respond to Amazon reviews, so I cannot
    contact you to resolve the problem and help you or listen to your feedback and
    try to do better in the next edition. Please ask a question on the Discord channel
    for this book at [https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9),
    email me at `markjprice@gmail.com`, or raise an issue in the GitHub repository
    for the book at the following link: [https://github.com/markjprice/cs13net9/issues](https://github.com/markjprice/cs13net9/issues).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这本书有任何投诉，请在撰写亚马逊上的负面评论之前联系我。作者无法回应亚马逊评论，所以我无法联系你解决问题并帮助你或倾听你的反馈并试图在下一版中做得更好。请在本书的Discord频道中提出问题[https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9)，通过`markjprice@gmail.com`给我发邮件，或在以下链接的GitHub存储库中提出问题：[https://github.com/markjprice/cs13net9/issues](https://github.com/markjprice/cs13net9/issues)。
- en: Topics covered by this book
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书涵盖的主题
- en: 'The following topics are covered in this book:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了以下主题：
- en: '**Language fundamentals**: Fundamental features of the C# language, from declaring
    variables to writing functions and object-oriented programming.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**语言基础**：C#语言的基本特性，从声明变量到编写函数和面向对象编程。'
- en: '**Library fundamentals**: Fundamental features of the .NET base class library,
    as well as some important optional packages for common tasks like database access.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库基础**：.NET 基础类库的基本功能，以及一些用于数据库访问等常见任务的某些重要可选包。'
- en: '**Modern web development fundamentals**: Modern features of the ASP.NET Core
    framework for server-side and client-side website and web service development.
    This includes Blazor and Minimal APIs and excludes controller-based features like
    MVC and Web API, or legacy features like Razor Pages.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**现代 Web 开发基础**：ASP.NET Core 框架的现代功能，用于服务器端和客户端网站及 Web 服务开发。这包括 Blazor 和最小
    API，不包括基于控制器的功能，如 MVC 和 Web API，或遗留功能，如 Razor Pages。'
- en: This book, *C# 13 and .NET 9 – Modern Cross-Platform Development Fundamentals*,
    is best read linearly, chapter by chapter, because it builds up fundamental skills
    and knowledge.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书，《C# 13 和 .NET 9 – 现代跨平台开发基础》，最好按章节顺序线性阅读，因为它逐步构建基本技能和知识。
- en: Topics covered by Apps and Services with .NET 8
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 8 应用和服务涵盖的主题
- en: 'The following topics are available in a companion book, *Apps and Services
    with .NET 8*:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题可在配套书籍《.NET 8 应用和服务》中找到：
- en: '**Data**: SQL Server and Azure Cosmos DB.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据**：SQL Server 和 Azure Cosmos DB。'
- en: '**Specialized libraries**: Dates, times, time zones, and internationalization;
    common third-party libraries for image handling, logging, mapping, and generating
    PDFs; multitasking and concurrency; and many more.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**专用库**：日期、时间、时区和国际化；用于图像处理、日志记录、映射和生成 PDF 的常见第三方库；多任务和并发；等等。'
- en: '**Services**: Caching, queuing, background services, gRPC, GraphQL, Azure Functions,
    SignalR, and Minimal APIs.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务**：缓存、队列、后台服务、gRPC、GraphQL、Azure Functions、SignalR 和最小 API。'
- en: '**User interfaces**: ASP.NET Core, Blazor, and .NET MAUI.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面**：ASP.NET Core、Blazor 和 .NET MAUI。'
- en: This book can be read more like a cookbook, so if you are especially interested
    in building gRPC services, then you can read that chapter without the preceding
    chapters about minimal API services.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书更像是一本食谱书，所以如果你特别感兴趣于构建 gRPC 服务，那么你可以直接阅读那章，而无需阅读关于最小 API 服务的 preceding chapters。
- en: Topics covered by Tools and Skills for .NET 8
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: .NET 8 工具和技能涵盖的主题
- en: 'The following topics are available in a companion book, *Tools and Skills for
    .NET 8*:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下主题可在配套书籍《.NET 8 工具和技能》中找到：
- en: Debugging and memory analysis.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试和内存分析。
- en: All the important types of testing, from unit and integration to performance
    and web UI testing.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从单元和集成测试到性能和 Web UI 测试的所有重要测试类型。
- en: Docker and .NET Aspire for local distributed development and testing.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker 和 .NET Aspire 用于本地分布式开发和测试。
- en: Design patterns and solution architecture.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模式和解决方案架构。
- en: Preparing for an interview to get the .NET developer career that you want.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备面试以获得你想要的 .NET 开发者职业。
- en: My books for .NET 8 are equally applicable to .NET 9\. You can make your projects
    target .NET 9 and all the code examples will work. You should not need to wait
    for packages to upgrade to also target .NET 9, due to backward compatibility.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我为 .NET 8 编写的书籍同样适用于 .NET 9。你可以让你的项目针对 .NET 9，所有代码示例都将正常工作。由于向后兼容性，你不需要等待包升级以也针对
    .NET 9，因此无需等待。
- en: Finding all my books
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找所有我的书籍
- en: 'To see a list of all the books I have published with Packt, you can use the
    following link:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看我通过 Packt 出版的所有书籍的列表，你可以使用以下链接：
- en: '[https://subscription.packtpub.com/search?query=mark+j.+price](https://subscription.packtpub.com/search?query=mark+j.+price)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://subscription.packtpub.com/search?query=mark+j.+price](https://subscription.packtpub.com/search?query=mark+j.+price)'
- en: 'A similar list is available on Amazon:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在亚马逊上也有类似的列表：
- en: '[https://www.amazon.com/Mark-J-Price/e/B071DW3QGN/](https://www.amazon.com/Mark-J-Price/e/B071DW3QGN/)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.amazon.com/Mark-J-Price/e/B071DW3QGN/](https://www.amazon.com/Mark-J-Price/e/B071DW3QGN/)'
- en: You can search other book-selling sites for my books too.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在其他图书销售网站上搜索我的书籍。
- en: Setting up your development environment
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置你的开发环境
- en: Before you start programming, you’ll need a code editor for C#, either from
    Microsoft or a third party.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编程之前，你需要一个用于 C# 的代码编辑器，无论是来自 Microsoft 还是第三方。
- en: 'Microsoft has a family of code editors and **Integrated Development Environments**
    (**IDEs**), which include:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft 拥有一系列代码编辑器和 **集成开发环境**（**IDEs**），包括：
- en: Visual Studio for Windows
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio for Windows
- en: VS Code for Windows, Mac, or Linux
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code for Windows、Mac 或 Linux
- en: VS Code for the Web or GitHub Codespaces
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code for the Web 或 GitHub Codespaces
- en: Third parties have created their own C# code editors; for example, JetBrains
    has the cross-platform Rider, which is available for Windows, Mac, or Linux and
    since October 2024 is free for non-commercial use. Rider is popular with more
    experienced .NET developers.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方已经创建了他们自己的C#代码编辑器；例如，JetBrains有跨平台的Rider，它适用于Windows、Mac或Linux，并且自2024年10月起对非商业用途免费。Rider在经验更丰富的.NET开发者中很受欢迎。
- en: '**Warning!** Although JetBrains is a fantastic company with great products,
    both Rider and the ReSharper extension for Visual Studio are software, and all
    software has bugs and quirky behavior. For example, they might show errors like
    *Cannot resolve symbol* in your Razor Pages, Razor views, and Blazor components.
    Yet you can build and run those files because there is no actual problem. If you
    have installed the Unity Support plugin, then it will complain about boxing operations
    (which are a genuine problem for Unity game developers) but in projects that are
    not Unity; hence, the warning is not applicable.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**虽然JetBrains是一家了不起的公司，拥有优秀的产品，但Rider和Visual Studio的ReSharper扩展都是软件，所有软件都有bug和古怪的行为。例如，它们可能会在你的Razor页面、Razor视图和Blazor组件中显示错误，如*无法解析符号*。然而，你可以构建和运行这些文件，因为没有真正的问题。如果你安装了Unity支持插件，那么它将抱怨装箱操作（这对Unity游戏开发者来说是一个真正的问题），但在非Unity项目中；因此，这个警告不适用。'
- en: Most readers use Visual Studio, which is a large and complex tool that can do
    many things. But Visual Studio likes to provide its own mechanism to do as much
    as possible, and a .NET developer who uses it could easily think that Visual Studio
    is the only way to complete a .NET-related task, like modifying project configuration
    or editing a code file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数读者使用Visual Studio，这是一个庞大而复杂的工具，可以做很多事情。但Visual Studio喜欢提供自己的机制来做尽可能多的事情，使用它的.NET开发者可能会很容易地认为Visual
    Studio是完成.NET相关任务（如修改项目配置或编辑代码文件）的唯一方式。
- en: Always try to remember that Visual Studio and all the other code editors are
    just tools that do work for you that you could do manually. They just show you
    a view above what is really happening in the files you’re working on, like the
    project file and all the C# code files.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 总是试图记住，Visual Studio和所有其他代码编辑器只是为你做工作的工具，你可以手动完成这些工作。它们只是显示了你正在工作的文件（如项目文件和所有C#代码文件）中真正发生的事情的视图。
- en: 'You could just use a plain text editor to manually edit the project and code
    files. Ultimately, you use the `dotnet` command-line interface to compile– aka
    build– the project files into a runnable assembly packaged as either a `.dll`
    or `.exe` file, as shown in *Figure 1.2*:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用纯文本编辑器手动编辑项目和代码文件。最终，你使用`dotnet`命令行界面来编译（即构建）项目文件，将其打包成可运行的程序集，作为`.dll`或`.exe`文件，如图*图1.2*所示：
- en: '![](img/B22322_01_02.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B22322_01_02.png)'
- en: 'Figure 1.2: All code editors ultimately just change underlying files'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2：所有代码编辑器最终只是更改底层文件
- en: Choosing the appropriate tool and application type for learning
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择适合学习的适当工具和应用类型
- en: What is the best tool and application type for learning C# and .NET?
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 学习C#和.NET的最佳工具和应用类型是什么？
- en: When learning, the best tool is one that helps you write code and configuration
    but does not hide what is really happening. IDEs provide graphical user interfaces
    that are friendly to use, but what are they doing for you underneath? A more basic
    code editor that is closer to the action while providing help to write your code
    can be better while you are learning.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习时，最好的工具是那些帮助你编写代码和配置，但不会隐藏真正发生的事情的工具。IDEs提供了友好的图形用户界面，但它们在底层为你做了什么？一个更基本的代码编辑器，在提供编写代码帮助的同时更接近操作，在学习过程中可能会更好。
- en: Having said that, you could make the argument that the best tool is the one
    you are already familiar with or that you or your team will use as your daily
    development tool. For that reason, I want you to be free to choose any C# code
    editor or IDE to complete the coding tasks in this book, including VS Code, Visual
    Studio, and even Rider.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，你可以提出这样的论点：最好的工具是你已经熟悉或者你或你的团队将用作日常开发工具的工具。因此，我希望你能自由选择任何C#代码编辑器或IDE来完成这本书中的编码任务，包括VS
    Code、Visual Studio，甚至是Rider。
- en: 'In this book, I give detailed step-by-step instructions in *this chapter* on
    how to create multiple projects in both Visual Studio and VS Code. There are also
    links to online instructions for other code editors, as shown at the following
    link: [https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/README.md).'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我在*本章*中提供了详细的分步指导，说明如何在Visual Studio和VS Code中创建多个项目。同时，还有链接到其他代码编辑器的在线指导，如下所示：[https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/README.md)。
- en: In subsequent chapters, I will only give the names of projects along with general
    instructions, so you can use whichever tool you prefer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在随后的章节中，我只会给出项目的名称以及一般性说明，这样你可以使用你喜欢的任何工具。
- en: The best application type for learning the C# language constructs and many of
    the .NET libraries is one that does not distract with unnecessary application
    code. For example, there is no need to create an entire Windows desktop application
    or a website just to learn how to write a `switch` statement.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 对于学习C#语言结构和许多.NET库来说，最佳的应用类型是不受不必要的应用程序代码干扰的类型。例如，没有必要创建一个完整的Windows桌面应用程序或网站，只是为了学习如何编写`switch`语句。
- en: For that reason, I believe the best method for learning the C# and .NET topics
    in *Chapters 1* to *11* is to build console apps. Then, in *Chapters 12*to*15*,
    which are about web development, you will build websites and services using the
    modern parts of ASP.NET Core, including Blazor and Minimal APIs.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我相信学习第1章到第11章的C#和.NET主题的最佳方法是构建控制台应用程序。然后，在第12章到第15章，关于Web开发的部分，你将使用ASP.NET
    Core的现代部分构建网站和服务，包括Blazor和Minimal APIs。
- en: VS Code for cross-platform development
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于跨平台开发的VS Code
- en: The most modern and lightweight code editor to choose from, and the only one
    from Microsoft that is cross-platform, is VS Code. It can run on all common operating
    systems, including Windows, macOS, and many varieties of Linux, including **Red
    Hat Enterprise Linux** (**RHEL**) and Ubuntu.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 从中选择最现代和轻量级的代码编辑器，并且是微软唯一一款跨平台的编辑器，就是VS Code。它可以在所有常见的操作系统上运行，包括Windows、macOS以及许多Linux版本，例如**红帽企业Linux**（**RHEL**）和Ubuntu。
- en: VS Code is a good choice for modern cross-platform development because it has
    an extensive and growing set of extensions to support many languages beyond C#.
    The most important extension for C# and .NET developers is the **C# Dev Kit**
    that was released in preview in June 2023, as it turns VS Code from a general-purpose
    code editor into a tool optimized for C# and .NET developers.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code是现代跨平台开发的良好选择，因为它拥有广泛且不断增长的扩展集，支持C#以外的许多语言。对于C#和.NET开发者来说，最重要的扩展是于2023年6月发布的**C#开发工具包**（**C#
    Dev Kit**），它将VS Code从通用代码编辑器转变为针对C#和.NET开发者优化的工具。
- en: '**More Information**: You can read about the **C# Dev Kit** extension in the
    official announcement at the following link: [https://devblogs.microsoft.com/visualstudio/announcing-csharp-dev-kit-for-visual-studio-code/](https://devblogs.microsoft.com/visualstudio/announcing-csharp-dev-kit-for-visual-studio-code/).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：你可以在以下链接的官方公告中了解关于**C#开发工具包**扩展的更多信息：[https://devblogs.microsoft.com/visualstudio/announcing-csharp-dev-kit-for-visual-studio-code/](https://devblogs.microsoft.com/visualstudio/announcing-csharp-dev-kit-for-visual-studio-code/).'
- en: Being cross-platform and lightweight, VS Code and its extensions can be installed
    on all platforms that your apps will be deployed to for quick bug fixes and so
    on. Choosing VS Code means a developer can use a cross-platform code editor to
    develop cross-platform apps. VS Code is supported on ARM processors so that you
    can develop on Apple Silicon computers and Raspberry Pi computers.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于VS Code及其扩展跨平台且轻量级，可以安装到你的应用程序将部署的所有平台上，以便快速修复错误等。选择VS Code意味着开发者可以使用跨平台的代码编辑器来开发跨平台的应用程序。VS
    Code支持ARM处理器，因此你可以在苹果硅电脑和树莓派电脑上开发。
- en: VS Code has strong support for web development, although it currently has weak
    support for mobile and desktop development.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code对Web开发有强大的支持，尽管目前对移动和桌面开发的支持较弱。
- en: 'VS Code is by far the most popular code editor or IDE, with over 73% of professional
    developers selecting it in a Stack Overflow survey, which you can read at the
    following link: [https://survey.stackoverflow.co/2024/](https://survey.stackoverflow.co/2024/).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code迄今为止是最受欢迎的代码编辑器或集成开发环境（IDE），在Stack Overflow的调查中，超过73%的专业开发者选择了它，你可以通过以下链接阅读调查结果：[https://survey.stackoverflow.co/2024/](https://survey.stackoverflow.co/2024/).
- en: GitHub Codespaces for development in the cloud
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 用于云上开发的GitHub Codespaces
- en: GitHub Codespaces is a fully configured development environment, based on VS
    Code, that can be spun up in an environment hosted in the cloud and accessed through
    any web browser. It supports Git repos, extensions, and a built-in command-line
    interface, so you can edit, run, and test from any device.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Codespaces 是一个基于 VS Code 的完全配置的开发环境，可以在云中托管的环境中启动，并通过任何网络浏览器访问。它支持 Git
    仓库、扩展和内置的命令行界面，因此您可以从任何设备进行编辑、运行和测试。
- en: But note that for your GitHub Codespaces experience to be fully functional and
    practically useful, it does have a license cost.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，为了使您的 GitHub Codespaces 体验完全功能化和实用，它确实有一定的许可费用。
- en: '**More Information**: You can learn more about GitHub Codespaces at the following
    link: [https://github.com/features/codespaces](https://github.com/features/codespaces).'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：您可以在以下链接中了解更多关于 GitHub Codespaces 的信息：[https://github.com/features/codespaces](https://github.com/features/codespaces)。'
- en: Visual Studio for general development
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio 通用开发
- en: Visual Studio can create most types of applications, including console apps,
    websites, web services, and desktop apps. Although you can use Visual Studio to
    write a cross-platform mobile app, you still need macOS and Xcode to compile it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 可以创建大多数类型的应用程序，包括控制台应用程序、网站、网络服务和桌面应用程序。尽管您可以使用 Visual Studio
    编写跨平台的移动应用程序，但您仍然需要 macOS 和 Xcode 来编译它。
- en: Visual Studio only runs on Windows 10 version 1909 or later, Home, Professional,
    Education, or Enterprise; or on Windows 11 version 21H2 or later, Home, Pro, Pro
    Education, Pro for Workstations, Enterprise, or Education. Windows Server 2016
    and later are also supported. 32-bit operating systems and Windows S mode are
    *not* supported.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 仅在 Windows 10 版本 1909 或更高版本、家庭版、专业版、教育版或企业版；或 Windows 11 版本 21H2
    或更高版本、家庭版、专业版、专业教育版、工作站专业版、企业版或教育版上运行。Windows Server 2016 及更高版本也受支持。32 位操作系统和
    Windows S 模式不支持。
- en: '**Warning!** Visual Studio for Mac does not officially support .NET 8 or later,
    and it reached its end of life in August 2024\. If you have been using Visual
    Studio for Mac, then you should switch to VS Code for Mac, Rider for Mac, or use
    Visual Studio for Windows in a virtual machine on your local computer or in the
    cloud, using a technology like Microsoft Dev Box. The retirement announcement
    can be read here: [https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/](https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/).'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** Visual Studio for Mac 并未官方支持 .NET 8 或更高版本，并且它已于 2024 年 8 月达到其生命周期的终点。如果您一直在使用
    Visual Studio for Mac，那么您应该切换到 VS Code for Mac、Rider for Mac，或者在本地计算机或云中使用虚拟机运行
    Windows 上的 Visual Studio，使用类似 Microsoft Dev Box 的技术。退休公告可以在此处阅读：[https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/](https://devblogs.microsoft.com/visualstudio/visual-studio-for-mac-retirement-announcement/)。'
- en: What I used
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我所使用的
- en: 'To write and test the code for this book, I used the following hardware and
    software:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写和测试本书的代码，我使用了以下硬件和软件：
- en: Windows 11 on a Surface Laptop 7 Copilot+ PC with Visual Studio, VS Code, and
    Rider.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Surface Laptop 7 Copilot+ PC 上使用 Visual Studio、VS Code 和 Rider 运行 Windows
    11。
- en: macOS on an Apple Silicon Mac mini (M1) desktop with VS Code and Rider.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在配备 Apple Silicon Mac mini (M1) 台式机的 macOS 上使用 VS Code 和 Rider。
- en: I hope that you have access to a variety of hardware and software too, as seeing
    the differences in platforms deepens your understanding of development challenges,
    although any one of the above combinations is enough to learn the fundamentals
    of C# and .NET and how to build practical apps and websites.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望您也能访问各种硬件和软件，因为看到平台之间的差异可以加深您对开发挑战的理解，尽管上述任何一种组合都足以学习 C# 和 .NET 的基础知识以及如何构建实用的应用程序和网站。
- en: Deploying cross-platform
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署跨平台
- en: Your choice of code editor and operating system for development does not limit
    where your code gets deployed.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您在开发时选择的代码编辑器和操作系统不会限制您的代码部署的位置。
- en: '.NET 9 supports the following platforms for deployment:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 9 支持以下平台进行部署：
- en: '**Windows**: Windows 10 version 1607 or later, Windows 11 version 22000 or
    later, Windows Server 2012 R2 SP1 or later, and Nano Server version 2019 or 2022.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Windows**: Windows 10 版本 1607 或更高版本、Windows 11 版本 22000 或更高版本、Windows Server
    2012 R2 SP1 或更高版本，以及 Nano Server 版本 2019 或 2022。'
- en: '**Mac**: macOS Catalina version 10.15 or later and in the Rosetta 2 x64 emulator.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac**: macOS Catalina 版本 10.15 或更高版本，并在 Rosetta 2 x64 模拟器中运行。'
- en: '**Linux**: Alpine Linux 3.19 or 3.20, CentOS Stream 9, Debian 12, Fedora 40,
    openSUSE 15.5 or 15.6, RHEL 8 or 9, SUSE Enterprise Linux 15.5 or 15.6, and Ubuntu
    20.04, 22.04, or 24.04.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux**: Alpine Linux 3.19 或 3.20、CentOS Stream 9、Debian 12、Fedora 40、openSUSE
    15.5 或 15.6、RHEL 8 或 9、SUSE Enterprise Linux 15.5 或 15.6、以及 Ubuntu 20.04、22.04
    或 24.04。'
- en: '**Android**: API 21 or later is the minimum SDK target. Versions 12, 12.1,
    13, and 14.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Android**: 最低SDK目标是API 21或更高版本。版本12、12.1、13和14。'
- en: '**iOS** and **iPadOS**: 15, 16, or 17\. iOS 12.2 is used as the minimum SDK
    target.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**iOS**和**iPadOS**: 15、16或17。iOS 12.2作为最低SDK目标。'
- en: '**Mac Catalyst**: 12, 13, or 14.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mac催化剂**: 12、13或14。'
- en: '**Warning!** .NET support for Windows 7 and 8.1 ended in January 2023: [https://github.com/dotnet/core/issues/7556](https://github.com/dotnet/core/issues/7556).'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** .NET对Windows 7和8.1的支持已于2023年1月结束：[https://github.com/dotnet/core/issues/7556](https://github.com/dotnet/core/issues/7556)。'
- en: Windows Arm64 support in .NET 5 and later means you can develop on, and deploy
    to, Windows Arm devices like Microsoft’s Windows Dev Kit 2023 (formerly known
    as Project Volterra) and Surface Pro 11 and Surface Laptop 7.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 5及以后的Windows Arm64支持意味着你可以在Windows Arm设备上开发，并部署到像微软的Windows Dev Kit 2023（以前称为Project
    Volterra）和Surface Pro 11以及Surface Laptop 7。
- en: 'You can review the latest supported operating systems and versions at the following
    link: [https://github.com/dotnet/core/blob/main/release-notes/9.0/supported-os.md](https://github.com/dotnet/core/blob/main/release-notes/9.0/supported-os.md).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中查看最新的受支持操作系统和版本：[https://github.com/dotnet/core/blob/main/release-notes/9.0/supported-os.md](https://github.com/dotnet/core/blob/main/release-notes/9.0/supported-os.md)。
- en: All versions of .NET that are supported can be automatically patched via Microsoft
    Update on Windows.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有受支持的.NET版本都可以通过Windows的Microsoft Update自动更新。
- en: Downloading and installing Visual Studio
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装Visual Studio
- en: Many professional .NET developers use Visual Studio in their day-to-day development
    work. Even if you choose to use VS Code to complete the coding tasks in this book,
    you might want to familiarize yourself with Visual Studio too. It is not until
    you have written a decent amount of code with a tool that you can really judge
    if it fits your needs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 许多专业的.NET开发者在日常开发工作中使用Visual Studio。即使你选择使用VS Code来完成本书中的编码任务，你也可能想熟悉一下Visual
    Studio。只有当你用某个工具编写了一定数量的代码后，你才能真正判断它是否符合你的需求。
- en: If you do not have a Windows computer, then you can skip this section and continue
    to the next section, where you will download and install VS Code on macOS or Linux.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有Windows电脑，则可以跳过本节，继续到下一节，在那里你将下载并安装VS Code在macOS或Linux上。
- en: 'Since October 2014, Microsoft has made a professional-quality edition of Visual
    Studio available to students, open-source contributors, and individuals for free.
    It is called Community Edition. Any of the editions are suitable for this book.
    If you have not already installed it, let’s do so now:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 自2014年10月以来，微软已向学生、开源贡献者和个人免费提供专业质量的Visual Studio版本。它被称为社区版。任何版本都适合本书。如果你还没有安装它，我们现在就安装：
- en: 'Download the latest version of Visual Studio from the following link: [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载Visual Studio的最新版本：[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)。
- en: '**Visual Studio vNext**: At the time of writing, Visual Studio is version 17.12
    and branded as Visual Studio 2022\. I expect the next major version of Visual
    Studio to be version 18.0 and be branded as Visual Studio 2025\. It is likely
    to be released in the first half of 2025, after this book is published. Visual
    Studio 2025 will have mostly the same features as the 2022 edition, although the
    user interface might move things around a bit.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio vNext**：在撰写本文时，Visual Studio的版本是17.12，并命名为Visual Studio 2022。我预计下一个主要版本的Visual
    Studio将是18.0，并命名为Visual Studio 2025。它可能将在本书发布后的2025年上半年发布。Visual Studio 2025将主要具有与2022版相同的特性，尽管用户界面可能会做一些调整。'
- en: Run the installer to start the installation.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序以开始安装。
- en: 'On the **Workloads** tab, select the following:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**工作负载**选项卡上，选择以下：
- en: '**ASP.NET and web development**.'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ASP.NET和Web开发**。'
- en: '**.NET desktop development** (because this includes console apps).'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.NET桌面开发**（因为这包括控制台应用程序）。'
- en: '**Desktop development with C++** with all default components (because this
    enables you to publish console apps and web services that start faster and have
    smaller memory footprints).'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用C++进行**桌面开发**（包含所有默认组件，因为这样可以让你发布启动更快且内存占用更小的控制台应用程序和Web服务）。
- en: Click **Install** and wait for the installer to acquire the selected software,
    and then install it.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**安装**，等待安装程序获取所选软件，然后进行安装。
- en: When the installation is complete, click **Launch**.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，点击**启动**。
- en: 'The first time that you run Visual Studio, you will be prompted to sign in.
    If you have a Microsoft account, you can use that account. If you don’t, then
    register for a new one at the following link: [https://signup.live.com/](https://signup.live.com/).'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行 Visual Studio 时，您将被提示登录。如果您有 Microsoft 账户，可以使用该账户。如果没有，可以在以下链接注册一个新账户：[https://signup.live.com/](https://signup.live.com/)。
- en: The first time that you run Visual Studio, you will be prompted to configure
    your environment. For **Development Settings**, choose **Visual C#**. For the
    color theme, I chose **Blue**, but you can choose whatever tickles your fancy.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一次运行 Visual Studio 时，您将被提示配置您的环境。对于 **开发设置**，选择 **Visual C#**。对于颜色主题，我选择了 **蓝色**，但您可以选择任何您喜欢的。
- en: If you want to customize your keyboard shortcuts, navigate to **Tools** | **Options…**,
    and then select the **Keyboard** section.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想自定义您的键盘快捷键，请导航到 **工具** | **选项…**，然后选择 **键盘** 部分。
- en: Keyboard shortcuts for Visual Studio
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio 的键盘快捷键
- en: In this book, I will avoid showing keyboard shortcuts, since they are often
    customized. Where they are consistent across code editors and commonly used, I
    will try to show them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我将避免展示键盘快捷键，因为它们通常都是自定义的。如果它们在代码编辑器中一致且常用，我会尽量展示它们。
- en: 'If you want to identify and customize your keyboard shortcuts, then you can,
    as shown at the following link: [https://learn.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio](https://learn.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio).'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想识别和自定义您的键盘快捷键，可以参考以下链接：[https://learn.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio](https://learn.microsoft.com/en-us/visualstudio/ide/identifying-and-customizing-keyboard-shortcuts-in-visual-studio)。
- en: Downloading and installing VS Code
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载并安装 VS Code
- en: VS Code has rapidly improved over the past couple of years and has pleasantly
    surprised Microsoft with its popularity. If you are brave and like to live on
    the bleeding edge, then there is the **Insiders** edition, which is a daily build
    of the next version.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 在过去几年中迅速改进，并且以其受欢迎程度让微软感到惊喜。如果您敢于尝试并喜欢走在前沿，那么还有 **Insiders** 版本，这是下一个版本的每日构建版本。
- en: Even if you plan to only use Visual Studio for development, I recommend that
    you download and install VS Code and try the coding tasks in this chapter using
    it, and then decide if you want to stick with just using Visual Studio for the
    rest of the book.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 即使您计划只使用 Visual Studio 进行开发，我也建议您下载并安装 VS Code，并使用它来完成本章中的编码任务，然后决定是否想在本书的剩余部分只使用
    Visual Studio。
- en: 'Let’s now download and install VS Code, the .NET SDK, and the **C# Dev Kit**
    extension:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来下载并安装 VS Code、.NET SDK 以及 **C# 开发工具包** 扩展：
- en: 'Download and install either the Stable build or the Insiders edition of VS
    Code from the following link: [https://code.visualstudio.com/](https://code.visualstudio.com/).'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装 VS Code 的稳定版或 Insiders 版本：[https://code.visualstudio.com/](https://code.visualstudio.com/)。
- en: '**More Information**: If you need more help installing VS Code, you can read
    the official setup guide at the following link: [https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：如果您需要更多帮助安装 VS Code，可以阅读以下链接中的官方安装指南：[https://code.visualstudio.com/docs/setup/setup-overview](https://code.visualstudio.com/docs/setup/setup-overview)。'
- en: 'Download and install the .NET SDK for version 9.0 and version 8.0 from the
    following link: [https://www.microsoft.com/net/download](https://www.microsoft.com/net/download).'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从以下链接下载并安装 9.0 和 8.0 版本的 .NET SDK：[https://www.microsoft.com/net/download](https://www.microsoft.com/net/download)。
- en: In real life, you are extremely unlikely to only have one .NET SDK version installed
    on your computer. To learn how to control which .NET SDK version is used to build
    a project, we need multiple versions installed. .NET 8 and .NET 9 are the only
    supported versions at the time of publishing in November 2024\. You can safely
    install multiple SDKs side by side. The most recent SDK will be used to build
    your projects.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，您极不可能只在您的计算机上安装一个 .NET SDK 版本。为了了解如何控制用于构建项目的 .NET SDK 版本，我们需要安装多个版本。.NET
    8 和 .NET 9 是截至 2024 年 11 月出版时唯一受支持的版本。您可以安全地并行安装多个 SDK。最新版本的 SDK 将用于构建您的项目。
- en: To install the **C# Dev Kit** extension with a user interface, you must first
    launch the VS Code application.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用用户界面安装 **C# 开发工具包** 扩展，您必须首先启动 VS Code 应用程序。
- en: In VS Code, click the **Extensions** icon or navigate to **View** | **Extensions**.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中，点击 **扩展** 图标或导航到 **视图** | **扩展**。
- en: '**C# Dev Kit** is one of the most popular extensions available, so you should
    see it at the top of the list, or you can enter `C#` in the search box.'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**C# 开发工具包** 是最受欢迎的扩展之一，因此您应该能在列表顶部看到它，或者您可以在搜索框中输入 `C#`。'
- en: '**C# Dev Kit** has a dependency on the **C#** extension version 2.0 or later,
    so you do not have to install the **C#** extension separately. Note that **C#**
    extension version 2.0 or later no longer uses OmniSharp, since it has a new **Language
    Server Protocol (LSP)** host. **C# Dev Kit** also has dependencies on the **.NET
    Install Tool for Extension Authors** and **IntelliCode for C# Dev Kit** extensions,
    so they will be installed too.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**C# 开发工具包** 依赖于 **C#** 扩展版本 2.0 或更高版本，因此您无需单独安装 **C#** 扩展。请注意，**C#** 扩展版本
    2.0 或更高版本不再使用 OmniSharp，因为它有一个新的 **语言服务器协议 (LSP**) 主机。**C# 开发工具包** 还依赖于 **.NET
    扩展作者安装工具** 和 **IntelliCode for C# 开发工具包** 扩展，因此它们也将被安装。'
- en: Click **Install** and wait for the supporting packages to download and install.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **安装** 并等待支持包下载和安装。
- en: '**Good Practice**: Be sure to read the license agreement for **C# Dev Kit**.
    It has a more restrictive license than the **C#** extension: [https://aka.ms/vs/csdevkit/license](https://aka.ms/vs/csdevkit/license).'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：请务必阅读 **C# 开发工具包** 的许可协议。它的许可协议比 **C#** 扩展更为严格：[https://aka.ms/vs/csdevkit/license](https://aka.ms/vs/csdevkit/license)。'
- en: Installing other extensions
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装其他扩展
- en: 'In later chapters of this book, you will use more VS Code extensions. If you
    want to install them now, all the extensions that we will use are shown in *Table
    1.1*:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的后续章节中，您将使用更多 VS Code 扩展。如果您现在想安装它们，我们将使用的所有扩展都显示在 *表 1.1* 中：
- en: '| **Extension name and identifier** | **Description** |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| **扩展名称和标识符** | **描述** |'
- en: '| **C# Dev Kit**`ms-dotnettools.csdevkit` | Official C# extension from Microsoft.
    Helps you manage your code with a solution explorer and test your code with integrated
    unit test discovery and execution, elevating your C# development experience wherever
    you like to develop (Windows, macOS, Linux, and even in a codespace). |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **C# 开发工具包**`ms-dotnettools.csdevkit` | 来自微软的官方 C# 扩展。帮助您使用解决方案资源管理器管理代码，并通过集成的单元测试发现和执行测试您的代码，无论您在哪里开发（Windows、macOS、Linux，甚至是在代码空间中），都能提升您的
    C# 开发体验。|'
- en: '| **C#**`ms-dotnettools.csharp` | Provides rich language support for C# and
    is shipped along with C# Dev Kit. Powered by a **Language Server Protocol** (**LSP**)
    server, this extension integrates with open source components like Roslyn and
    Razor to provide rich type information and a faster, more reliable C# experience.
    |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| **C#**`ms-dotnettools.csharp` | 提供了丰富的 C# 语言支持，并随 C# 开发工具包一起提供。由一个 **语言服务器协议
    (LSP**) 服务器提供支持，此扩展与开源组件如 Roslyn 和 Razor 集成，以提供丰富的类型信息和更快、更可靠的 C# 体验。|'
- en: '| **IntelliCode for C# Dev Kit**`ms-dotnettools.vscodeintellicode-csharp` |
    Provides AI-assisted development features for Python, TypeScript/JavaScript, C#,
    and Java developers. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| **IntelliCode for C# 开发工具包**`ms-dotnettools.vscodeintellicode-csharp` | 为
    Python、TypeScript/JavaScript、C# 和 Java 开发者提供 AI 辅助开发功能。|'
- en: '| **MSBuild project tools**`tintoy.msbuild-project-tools` | Provides IntelliSense
    for MSBuild project files, including autocomplete for `<PackageReference>` elements.
    |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| **MSBuild 项目工具**`tintoy.msbuild-project-tools` | 为 MSBuild 项目文件提供 IntelliSense，包括
    `<PackageReference>` 元素的自动完成。|'
- en: '| **Markdown All in One**`yzhang.markdown-all-in-one` | All you need for Markdown
    (keyboard shortcuts, table of contents, auto preview, and more). |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **Markdown All in One**`yzhang.markdown-all-in-one` | 提供了 Markdown 所需的一切（键盘快捷键、目录、自动预览等）。|'
- en: '| **Polyglot Notebooks**`ms-dotnettools.dotnet-interactive-vscode` | This extension
    adds support for using .NET and other languages in a notebook. It has a dependency
    on the **Jupyter** extension (`ms-toolsai.jupyter`), which itself has dependencies.
    |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| **多语言笔记本**`ms-dotnettools.dotnet-interactive-vscode` | 此扩展增加了在笔记本中使用 .NET
    和其他语言的支持。它依赖于 **Jupyter** 扩展 (`ms-toolsai.jupyter`)，该扩展本身也有依赖项。|'
- en: '| **ilspy-vscode**`icsharpcode.ilspy-vscode` | Decompile MSIL assemblies –
    support for modern .NET, .NET Framework, .NET Core, and .NET Standard. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| **ilspy-vscode**`icsharpcode.ilspy-vscode` | 反编译 MSIL 程序集 – 支持 .NET、.NET
    Framework、.NET Core 和 .NET Standard。|'
- en: '| **REST Client**`humao.rest-client` | Send an HTTP request and view the response
    directly in VS Code. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| **REST 客户端**`humao.rest-client` | 在 VS Code 中发送 HTTP 请求并直接查看响应。|'
- en: 'Table 1.1: VS Code extensions for .NET development'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.1：VS Code 的 .NET 开发扩展
- en: 'You can install a VS Code extension at the command prompt or terminal, as shown
    in *Table 1.2*:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在命令提示符或终端中安装 VS Code 扩展，如下 *表 1.2* 所示：
- en: '| **Command** | **Description** |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **命令** | **描述** |'
- en: '| `code --list-extensions` | List installed extensions. |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| `code --list-extensions` | 列出已安装的扩展。 |'
- en: '| `code --install-extension <extension-id>` | Install the specified extension.
    |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| `code --install-extension <extension-id>` | 安装指定的扩展。 |'
- en: '| `code --uninstall-extension <extension-id>` | Uninstall the specified extension.
    |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| `code --uninstall-extension <extension-id>` | 卸载指定的扩展。 |'
- en: 'Table 1.2: Managing VS Code extensions at the command prompt'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.2：在命令提示符中管理 VS Code 扩展
- en: 'For example, to install the **C# Dev Kit** extension, enter the following at
    the command prompt:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要安装 **C# 开发工具包** 扩展，请在命令提示符中输入以下内容：
- en: '[PRE0]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'I have created PowerShell scripts to install and uninstall the VS Code extensions
    in the preceding table. You can find them at the following link: [https://github.com/markjprice/cs13net9/tree/main/scripts/extension-scripts/](https://github.com/markjprice/cs13net9/tree/main/scripts/extension-scripts/).
    PowerShell scripts are cross-platform, as you can read about at the following
    link: [https://learn.microsoft.com/en-us/powershell/scripting/overview](https://learn.microsoft.com/en-us/powershell/scripting/overview).'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经创建了 PowerShell 脚本来安装和卸载前面表格中的 VS Code 扩展。你可以在以下链接中找到它们：[https://github.com/markjprice/cs13net9/tree/main/scripts/extension-scripts/](https://github.com/markjprice/cs13net9/tree/main/scripts/extension-scripts/)。PowerShell
    脚本是跨平台的，你可以在以下链接中了解更多信息：[https://learn.microsoft.com/en-us/powershell/scripting/overview](https://learn.microsoft.com/en-us/powershell/scripting/overview)。
- en: Understanding VS Code versions
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 理解 VS Code 版本
- en: 'Microsoft releases a new feature version of VS Code (almost) every month and
    bug-fix versions more frequently. For example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 微软几乎每个月都会发布一个新的 VS Code 功能版本，并且更频繁地发布错误修复版本。例如：
- en: Version 1.93.0, August 2024 feature release
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.93.0，2024 年 8 月的功能发布
- en: Version 1.93.1, August 2024 bug fix release
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本 1.93.1，2024 年 8 月的错误修复发布
- en: The version used in this book is 1.93.0, the August 2024 feature release, but
    the version of VS Code is less important than the version of the **C# Dev Kit**
    or **C#** extension that you install. I recommend **C# Dev Kit** v1.10.18 or later
    with **C#** extension v2.45.20 or later.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的版本是 1.93.0，2024 年 8 月的功能发布版，但 VS Code 的版本不如你安装的 **C# 开发工具包** 或 **C#** 扩展的版本重要。我建议使用
    **C# 开发工具包** v1.10.18 或更高版本，以及 **C#** 扩展 v2.45.20 或更高版本。
- en: While the **C#** extension is not required, it provides IntelliSense as you
    type, code navigation, and debugging features, so it’s something that’s very handy
    to install and keep updated to support the latest C# language features.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 **C#** 扩展不是必需的，但它提供你在输入时的智能感知、代码导航和调试功能，因此安装并保持更新以支持最新的 C# 语言特性是非常方便的。
- en: Keyboard shortcuts for VS Code
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: VS Code 的快捷键
- en: 'If you want to customize your keyboard shortcuts for VS Code, then you can,
    as shown at the following link: [https://code.visualstudio.com/docs/getstarted/keybindings](https://code.visualstudio.com/docs/getstarted/keybindings).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要自定义 VS Code 的快捷键，那么你可以，如下所示链接所示：[https://code.visualstudio.com/docs/getstarted/keybindings](https://code.visualstudio.com/docs/getstarted/keybindings)。
- en: 'I recommend that you download a PDF of VS Code keyboard shortcuts for your
    operating system from the following list:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议你从以下列表中下载适用于你操作系统的 VS Code 快捷键 PDF：
- en: 'Windows: [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows: [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf)'
- en: 'macOS: [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'macOS: [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf)'
- en: 'Linux: [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Linux: [https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf](https://code.visualstudio.com/shortcuts/keyboard-shortcuts-linux.pdf)'
- en: Understanding .NET
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 .NET
- en: “Those who cannot remember the past are condemned to repeat it.”
  id: totrans-184
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “那些不能记住过去的人注定要重蹈覆辙。”
- en: ''
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: – George Santayana
  id: totrans-186
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: – 乔治·桑塔亚那
- en: .NET, .NET Core, .NET Framework, .NET Standard, and Xamarin are related and
    overlapping platforms for developers used to build applications and services.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: .NET、.NET Core、.NET Framework、.NET Standard 和 Xamarin 是开发者常用的相关且重叠的平台，用于构建应用程序和服务。
- en: 'If you are not familiar with the history of .NET, then I will introduce you
    to each of these .NET concepts at the following link:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不太熟悉 .NET 的历史，那么我将在以下链接中为你介绍这些 .NET 概念：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-dotnet-history.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-dotnet-history.md)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-dotnet-history.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-dotnet-history.md)'
- en: As time moves on, more and more readers already know the history of .NET, so
    it would be a waste of space in the book to continue to include it. But if you
    are new to it, then make sure you read all the extras that I provide online, like
    the preceding one.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，越来越多的读者已经了解了.NET的历史，所以在书中继续包含它将会是空间的浪费。但如果你是新手，那么请确保阅读我在网上提供的所有额外内容，如前面的内容。
- en: Understanding .NET support
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解.NET支持
- en: '.NET versions are either **Long-Term Support** (**LTS**), **Standard-Term Support
    (STS)** (formerly known as **Current**), or **Preview**, as described in the following
    list:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: .NET版本可以是**长期支持**（**LTS**）、**标准支持期**（STS）（以前称为**当前**）或**预览**，如下面的列表中所述：
- en: '**LTS** releases are a good choice for applications that you do not intend
    to update frequently, although you must update the .NET runtime for your production
    code monthly. LTS releases are supported by Microsoft for 3 years after **General
    Availability** (**GA**), or 1 year after the next LTS release ships, whichever
    is longer.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LTS**版本是对于那些不打算频繁更新的应用程序的好选择，尽管你必须每月更新你的生产代码的.NET运行时。LTS版本在**通用可用性**（**GA**）后的3年内或下一个LTS版本发布后的1年内得到微软的支持，以较长者为准。'
- en: '**STS** releases include features that may change based on feedback. These
    are a good choice for applications that you are actively developing because they
    provide access to the latest improvements. STS releases are supported by Microsoft
    for 18 months after GA, or 6 months after the next STS or LTS release ships, whichever
    is longer.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**STS**版本包含可能根据反馈而更改的特性。这些版本对于你正在积极开发的应用程序来说是个不错的选择，因为它们提供了访问最新改进的机会。STS版本在GA后的18个月内或下一个STS或LTS版本发布后的6个月内得到微软的支持，以较长者为准。'
- en: '**Preview** releases are for public testing. These are a good choice for adventurous
    programmers who want to live on the bleeding edge, or programming book authors
    who need to have early access to new language features, libraries, and app and
    service platforms. Preview releases are not usually supported by Microsoft, but
    some preview or **Release Candidate** (**RC**) releases may be declared **Go Live**,
    meaning they are supported by Microsoft in production.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预览**版本是供公众测试的。这些版本对于想要走在技术前沿的冒险程序员或需要提前访问新语言特性、库以及应用和服务平台的编程书籍作者来说是个不错的选择。预览版本通常不得到微软的支持，但一些预览或**发布候选**（**RC**）版本可能会被宣布为**上线**，这意味着它们在生产中得到微软的支持。'
- en: STS and LTS releases receive critical patches throughout their lifetime for
    security and reliability.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: STS和LTS版本在其生命周期内会收到针对安全和可靠性的关键补丁。
- en: '**Good Practice**: You must stay up to date with the latest patches to get
    support. For example, if a system is running on .NET runtime version 9.0.0 and
    then version 9.0.1 is released, you must install version 9.0.1 to get support.
    These updates are released on the second Tuesday of each month, aka **Patch Tuesday**.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：你必须保持与最新补丁的同步以获得支持。例如，如果一个系统正在运行.NET运行时版本9.0.0，然后版本9.0.1发布，你必须安装版本9.0.1以获得支持。这些更新在每个月的第二个星期二发布，也就是所谓的**补丁星期二**。'
- en: 'To better understand your choices of STS and LTS releases, it is helpful to
    see them visualized, with 3-year-long black bars for LTS releases, and 1½-year-long
    gray bars for STS releases, as shown in *Figure 1.3*:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解你关于STS和LTS版本的选择，看到它们以可视化方式呈现是有帮助的，LTS版本用3年长的黑色条表示，STS版本用1½年长的灰色条表示，如图*图1.3*所示：
- en: '![](img/B22322_01_03.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_03.png)'
- en: 'Figure 1.3: Support durations for recent and planned STS and LTS releases'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3：最近和计划中的STS和LTS版本的支持时长
- en: During the lifetime of .NET 9, .NET 8 will still be supported and .NET 10 will
    be released. I have tried to be cognizant that you might choose to use .NET 8
    or .NET 10 with this book; however, obviously, the book cannot cover new features
    of .NET 10, since I don’t know what they will be!
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在.NET 9的生命周期内，.NET 8仍将得到支持，而.NET 10将发布。我已经尽力考虑到你可能选择使用本书中的.NET 8或.NET 10；然而，显然，本书无法涵盖.NET
    10的新特性，因为我不知道它们会是什么！
- en: If you need LTS from Microsoft, then set your .NET projects to target .NET 8
    today and then migrate to .NET 10 after it is released in November 2025\. This
    is because .NET 9 is an STS release, and therefore, it will lose support in May
    2026, before .NET 8 does in November 2026\. As soon as .NET 10 is released, start
    upgrading your .NET 8 projects to it. You will have a year to do so before .NET
    8 reaches its end of life.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要来自微软的长周期支持（LTS），那么请将你的 .NET 项目设置为针对 .NET 8，并在 2025 年 11 月发布后迁移到 .NET 10。这是因为
    .NET 9 是一个短期支持（STS）版本，因此它将在 2026 年 5 月之前失去支持，而 .NET 8 将在 2026 年 11 月失去支持。一旦 .NET
    10 发布，立即开始将你的 .NET 8 项目升级到它。在 .NET 8 达到其生命周期的结束之前，你将有整整一年的时间来完成这项工作。
- en: '**Good Practice**: Remember that with all releases, you must upgrade to bug-fix
    releases like .NET runtime 9.0.1 and .NET SDK 9.0.101, which are expected to release
    in December 2024, as updates are released every month.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：记住，对于所有发布版本，你必须升级到错误修复版本，如 .NET 运行时 9.0.1 和 .NET SDK 9.0.101，这些版本预计将在
    2024 年 12 月发布，因为更新每月都会发布。'
- en: 'At the time of publishing in November 2024, all versions of modern .NET have
    reached their EOL, except those shown in the following list, which are ordered
    by their EOL dates:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 2024 年 11 月发布时，所有现代 .NET 版本都已达到其 EOL，除了以下列表中显示的版本，它们按其 EOL 日期排序：
- en: .NET 9 will reach EOL in May 2026.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 9 将在 2026 年 5 月达到 EOL。
- en: .NET 8 will reach EOL in November 2026.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 8 将在 2026 年 11 月达到 EOL。
- en: .NET 10 will be available from November 2025 and it will reach EOL in November
    2028.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET 10 将从 2025 年 11 月开始提供，并将在 2028 年 11 月达到 EOL。
- en: 'You can check which .NET versions are currently supported and when they will
    reach EOL at the following link: [https://github.com/dotnet/core/blob/main/releases.md](https://github.com/dotnet/core/blob/main/releases.md).'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过以下链接检查哪些 .NET 版本目前正在得到支持以及它们何时将达到 EOL：[https://github.com/dotnet/core/blob/main/releases.md](https://github.com/dotnet/core/blob/main/releases.md)。
- en: Understanding end of life (EOL)
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解生命周期的结束（EOL）
- en: '**End of support** or **end of life** (**EOL**) means the date after which
    bug fixes, security updates, or technical assistance are no longer available from
    Microsoft.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**支持结束**或**生命周期的结束**（EOL）意味着在此日期之后，微软将不再提供错误修复、安全更新或技术支持。'
- en: 'For example, now that .NET 6 has reached end of support on November 12, 2024,
    you can expect the following:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，现在 .NET 6 在 2024 年 11 月 12 日达到支持结束，你可以期待以下情况：
- en: Projects that use .NET 6 will continue to run.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 .NET 6 的项目将继续运行。
- en: No new security updates will be issued for .NET 6 and therefore continuing to
    use an unsupported version will increasingly expose you to security vulnerabilities.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 .NET 6，将不再发布新的安全更新，因此继续使用不受支持的版本将越来越容易暴露你于安全漏洞。
- en: You might not be able to access technical support for any .NET 6 applications
    that you continue to use.
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能无法访问你继续使用的任何 .NET 6 应用程序的技术支持。
- en: You will get `NETSDK1138` build warnings when targeting .NET 6 from a later
    SDK like the .NET 9 SDK.
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你从像 .NET 9 SDK 这样的后续 SDK 靶向 .NET 6 时，你会得到 `NETSDK1138` 构建警告。
- en: You will get warnings in Visual Studio when targeting .NET 6.
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你针对 .NET 6 时，你将在 Visual Studio 中收到警告。
- en: Understanding .NET support phases
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 .NET 支持阶段
- en: 'The lifetime of a version of .NET passes through several phases, during which
    they have varying levels of support, as described in the following list:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 版本的寿命会经过几个阶段，在这些阶段中，它们的支持水平各不相同，如下列所示：
- en: '**Preview**: These are not supported at all. .NET 9 Preview 1 to Preview 7
    were in this support phase from February 2024 to August 2024.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预览版**：这些版本根本不受支持。.NET 9 预览版 1 到预览版 7 从 2024 年 2 月到 2024 年 8 月处于此支持阶段。'
- en: '**Go Live**: These are supported until GA, and then they become immediately
    unsupported. You must upgrade to the final release version as soon as it is available.
    .NET 9 Release Candidate 1 and Release Candidate 2 were in this support phase
    in September and October 2024, respectively.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**上市**：这些版本在 GA 之前得到支持，然后立即不再支持。一旦可用，你必须立即升级到最终发布版本。.NET 9 发布候选版本 1 和发布候选版本
    2 分别在 2024 年 9 月和 10 月处于此支持阶段。'
- en: '**Active**: .NET 9 will be in this support phase from November 2024 to November
    2025.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**活跃状态**：.NET 9 将从 2024 年 11 月到 2025 年 11 月处于此支持阶段。'
- en: '**Maintenance**: Supported only with security fixes for the last 6 months of
    its lifetime. .NET 9 will be in this support phase from November 2025 to May 2026.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**维护**：在其生命周期的最后 6 个月中仅提供安全修复。.NET 9 将从 2025 年 11 月到 2026 年 5 月处于此支持阶段。'
- en: '**EOL**: Not supported. .NET 9 will reach its EOL in May 2026.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**EOL**：不受支持。.NET 9 将在 2026 年 5 月达到其 EOL。'
- en: Understanding .NET runtime and .NET SDK versions
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 .NET 运行时和 .NET SDK 版本
- en: If you have not built a standalone app, then the .NET runtime is the minimum
    you need to install so that an operating system can run a .NET application. The
    .NET SDK includes the .NET runtime, as well as the compilers and other tools needed
    to build .NET code and apps.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未构建独立应用程序，那么您至少需要安装 .NET 运行时，以便操作系统可以运行 .NET 应用程序。.NET SDK 包含 .NET 运行时，以及构建
    .NET 代码和应用程序所需的编译器和其他工具。
- en: .NET runtime versioning follows semantic versioning – that is, a major increment
    indicates breaking changes, minor increments indicate new features, and patch
    increments indicate bug fixes.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 运行时版本化遵循语义版本化——也就是说，主版本号的增加表示破坏性更改，次版本号的增加表示新功能，补丁版本号的增加表示错误修复。
- en: .NET SDK versioning does not follow semantic versioning. The major and minor
    version numbers are tied to the runtime version they are matched with. The third
    number follows a convention that indicates the minor and patch versions of the
    SDK. The third number starts at 100 for the initial version (equivalent to 0.0
    for the minor and patch numbers). The first digit increments with minor increments,
    and the other two digits increment with patch increments.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: .NET SDK 版本化不遵循语义版本化。主版本号和次版本号与它们匹配的运行时版本相关联。第三个数字遵循一个约定，表示 SDK 的次版本和补丁版本。第三个数字从
    100 开始，对于初始版本（相当于次版本和补丁号为 0.0）。第一个数字随着次版本的增加而增加，其他两个数字随着补丁版本的增加而增加。
- en: 'You can see an example of this in *Table 1.3*:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 *表 1.3* 中看到一个例子：
- en: '| **Change** | **Runtime** | **SDK** |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| **变更** | **运行时** | **SDK** |'
- en: '| Initial release | 9.0.0 | 9.0.100 |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| 首次发布 | 9.0.0 | 9.0.100 |'
- en: '| SDK bug fix | 9.0.0 | 9.0.101 |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| SDK 错误修复 | 9.0.0 | 9.0.101 |'
- en: '| Runtime and SDK bug fix | 9.0.1 | 9.0.102 |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| 运行时和 SDK 错误修复 | 9.0.1 | 9.0.102 |'
- en: '| SDK new feature | 9.0.1 | 9.0.200 |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| SDK 新功能 | 9.0.1 | 9.0.200 |'
- en: 'Table 1.3: Examples of changes and versions for a .NET runtime and SDK'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.3：.NET 运行时和 SDK 的更改和版本示例
- en: Listing and removing versions of .NET
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出和删除 .NET 版本
- en: .NET runtime updates are compatible with a major version such as 9.x, and updated
    releases of the .NET SDK maintain the ability to build applications that target
    previous versions of the runtime, which enables the safe removal of older versions.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 运行时更新与 9.x 等主版本兼容，.NET SDK 的更新版本保持构建针对先前运行时版本的应用程序的能力，这允许安全地删除旧版本。
- en: 'You can see which SDKs and runtimes are currently installed using the following
    commands:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令查看当前已安装的 SDK 和运行时：
- en: '[PRE1]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Good Practice**: To make it easier to enter commands at the command prompt
    or terminal, the following link lists all commands throughout the book that can
    be easily copied and pasted: [https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md](https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：为了使在命令提示符或终端中输入命令更容易，以下链接列出了本书中可以轻松复制和粘贴的所有命令：[https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md](https://github.com/markjprice/cs13net9/blob/main/docs/command-lines.md).'
- en: On Windows, use the **Apps & features** section to remove .NET SDKs.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，使用 **应用和功能** 部分来删除 .NET SDK。
- en: 'On Linux, there is no single mechanism, but you can learn more at the following
    link:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，没有单一机制，但您可以在以下链接中了解更多信息：
- en: '[https://learn.microsoft.com/en-us/dotnet/core/install/remove-runtime-sdk-versions?pivots=os-linux](https://learn.microsoft.com/en-us/dotnet/core/install/remove-runtime-sdk-versions?pivots=os-linux)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/core/install/remove-runtime-sdk-versions?pivots=os-linux](https://learn.microsoft.com/en-us/dotnet/core/install/remove-runtime-sdk-versions?pivots=os-linux)'
- en: 'You could use a third-party tool like Dots, the friendly .NET SDK manager,
    found at the following link: [https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager](https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager).
    At the time of writing, you must build the app from source on its GitHub repository,
    so I only recommend that for advanced developers.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用第三方工具，如位于以下链接的友好 .NET SDK 管理器 Dots：[https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager](https://johnnys.news/2023/01/Dots-a-dotnet-SDK-manager)。在撰写本文时，您必须从其
    GitHub 仓库中构建应用程序，因此我只推荐高级开发者使用。
- en: Understanding intermediate language
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解中间语言
- en: The C# compiler (named **Roslyn**) used by the `dotnet` CLI tool converts your
    C# source code into **intermediate language** (**IL**) code and stores the IL
    in an **assembly** (a DLL or EXE file). IL code statements are like assembly language
    instructions, which are executed by .NET’s virtual machine, known as CoreCLR,
    the newer name for the **Common Language Runtime (CLR)** in modern .NET. The legacy
    .NET Framework has a CLR that is Windows-only, and modern .NET has one for each
    OS, like Windows, macOS, and Linux. These days, they are all commonly referred
    to as CLRs.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet` CLI工具使用的C#编译器（命名为**Roslyn**）将你的C#源代码转换为**中间语言**（**IL**）代码，并将IL存储在**程序集**（DLL或EXE文件）中。IL代码语句类似于汇编语言指令，由.NET的虚拟机（称为CoreCLR，是现代.NET中**公共语言运行时（CLR）**的新名称）执行。传统的.NET
    Framework有一个仅限Windows的CLR，而现代.NET为每个操作系统（如Windows、macOS和Linux）都有一个。如今，它们通常都被称为CLRs。'
- en: At runtime, CoreCLR loads the IL code from the assembly, the **just-in-time**
    (**JIT**) compiler compiles it into native CPU instructions, and then it is executed
    by the CPU on your machine.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时，CoreCLR从程序集加载IL代码，**即时编译器**将其编译成本地CPU指令，然后由你的机器上的CPU执行。
- en: The benefit of this two-step compilation process is that Microsoft can create
    **CLRs** for Linux and macOS, as well as for Windows. The same IL code runs everywhere
    because of the second compilation step, which generates code for the native operating
    system and CPU instruction set.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这种两步编译过程的优点是，微软可以为Linux和macOS以及Windows创建**CLRs**。由于第二步骤生成了适用于本地操作系统和CPU指令集的代码，因此相同的IL代码可以在任何地方运行。
- en: 'Regardless of which language the source code is written in (for example, C#,
    Visual Basic, or F#), all .NET applications use IL code for their instructions
    stored in an assembly. Microsoft and others provide disassembler tools that can
    open an assembly and reveal this IL code, such as the ILSpy .NET Decompiler extension.
    You will learn more about this in *Chapter 7*, *Packaging and Distributing .NET
    Types*, in an online section found at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch07-decompiling.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch07-decompiling.md).'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 不论源代码是用哪种语言编写的（例如，C#、Visual Basic或F#），所有.NET应用程序都使用存储在程序集中的IL代码作为它们的指令。微软和其他人提供了可以打开程序集并揭示此IL代码的反汇编工具，例如ILSpy
    .NET反汇编器扩展。你将在*第7章*，*打包和分发.NET类型*中了解更多信息，该章节可在以下链接找到：[https://github.com/markjprice/cs13net9/blob/main/docs/ch07-decompiling.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch07-decompiling.md)。
- en: So, the compilation process typically involves translating source code into
    IL, which is then compiled into machine code at runtime by the CLR using JIT compilation.
    **Ahead-of-Time (AOT)** compilation is an alternative to this approach, and you
    will learn about it in *Chapter 7*, *Packaging and Distributing .NET Types*.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，编译过程通常涉及将源代码转换为IL，然后由CLR使用JIT编译在运行时将其编译成机器代码。**提前编译（AOT）**是这种方法的替代方案，你将在*第7章*，*打包和分发.NET类型*中了解它。
- en: Comparing .NET technologies
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较.NET技术
- en: 'We can summarize and compare the current .NET technologies, as shown in *Table
    1.4*:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以总结并比较当前的.NET技术，如*表1.4*所示：
- en: '| **Technology** | **Description** | **Host operating systems** |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| **技术** | **描述** | **宿主操作系统** |'
- en: '| Modern .NET | A modern feature set, with full C# 8 to C# 13 language support.
    It can be used to port existing apps or create new desktop, mobile, and web apps
    and services. | Windows, macOS, Linux, Android, iOS, tvOS, and Tizen |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 现代NET | 包含从C# 8到C# 13的完整语言支持的现代功能集。它可以用于移植现有应用程序或创建新的桌面、移动和Web应用程序和服务。 |
    Windows、macOS、Linux、Android、iOS、tvOS和Tizen |'
- en: '| .NET Framework | A legacy feature set with limited C# 8 support and no C#
    9 or later support. It should be used to maintain existing applications only.
    | Windows only |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| .NET Framework | 具有限制C# 8支持且没有C# 9或更高版本支持的旧功能集。它仅应用于维护现有应用程序。 | 仅限Windows
    |'
- en: '| Xamarin | Mobile and desktop apps only. | Android, iOS, and macOS |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| Xamarin | 仅适用于移动和桌面应用程序。 | Android、iOS和macOS |'
- en: 'Table 1.4: Comparison of .NET technologies'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.4：.NET技术比较
- en: Visual Studio, Rider, and even VS Code (with the **C# Dev Kit** extension installed)
    all have a concept called a **solution** that allows you to open and manage multiple
    projects simultaneously. We will use a solution to manage the two projects that
    you will create in this chapter.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio、Rider以及甚至安装了**C#开发工具包**扩展的VS Code都有一个称为**解决方案**的概念，它允许你同时打开和管理多个项目。我们将使用解决方案来管理本章中你将创建的两个项目。
- en: Building console apps using Visual Studio
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Visual Studio构建控制台应用程序
- en: The goal of this section is to showcase how to build a console app using Visual
    Studio.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是展示如何使用Visual Studio构建控制台应用程序。
- en: If you do not have a Windows computer or want to use VS Code, then you can skip
    this section, since the code will be the same; just the tooling experience is
    different. However, I recommend that you review this section because it does explain
    some of the code and how top-level programs work, and that information applies
    to all code editors.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有Windows计算机或想使用VS Code，则可以跳过此部分，因为代码将是相同的；只是工具体验不同。然而，我建议你查看此部分，因为它确实解释了一些代码和顶级程序的工作方式，这些信息适用于所有代码编辑器。
- en: 'This section is also available in the GitHub repository (so it can be updated
    after publishing if needed) at the following link:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 本节也可在GitHub仓库中找到（如果需要，发布后可以更新）以下链接：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/vs.md](https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/vs.md)'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/vs.md](https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/vs.md)'
- en: 'If you want to see similar instructions for using Rider, they are available
    in the GitHub repository at the following link:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想看到使用Rider的类似说明，它们可以在以下链接的GitHub仓库中找到：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/rider.md](https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/rider.md)'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/rider.md](https://github.com/markjprice/cs13net9/blob/main/docs/code-editors/rider.md)'
- en: Writing code using Visual Studio
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio编写代码
- en: 'Let’s get started writing code:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写代码：
- en: Start Visual Studio.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio。
- en: In the **Create a new project** dialog, select the C# language to filter the
    project templates, enter `console` in the **Search for templates** box, and then
    select **Console App**.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建新项目**对话框中，选择C#语言以过滤项目模板，在**搜索模板**框中输入`console`，然后选择**控制台应用程序**。
- en: Make sure that you have chosen the cross-platform project template, not the
    one for .NET Framework, which is Windows-only, and the **C#** project template
    rather than another language, such as Visual Basic or TypeScript.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你选择了跨平台项目模板，而不是仅适用于Windows的.NET Framework模板，以及**C#**项目模板而不是其他语言，例如Visual Basic或TypeScript。
- en: Click **Next**.
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: In the **Configure your new project** dialog, enter `HelloCS` for the project
    name, `C:\cs13net9` for the location, and `Chapter01` for the solution name.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置新项目**对话框中，将项目名称输入为`HelloCS`，将位置输入为`C:\cs13net9`，将解决方案名称输入为`Chapter01`。
- en: 'Screenshots of Visual Studio when creating new projects can be found in the
    GitHub repository at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md).'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub仓库的以下链接中可以找到创建新项目时Visual Studio的截图：[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md)。
- en: Click **Next**.
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**下一步**。
- en: In the **Additional information** dialog, in the **Framework** drop-down list,
    note that your .NET SDK choices indicate if that version is **Standard Term Support**,
    **Long Term Support**, **Preview**, or **Out of support**, and then select **.NET
    9.0 (Standard Term Support)**.
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**附加信息**对话框中，在**框架**下拉列表中，注意你的.NET SDK选择表示该版本是**标准支持期限**、**长期支持**、**预览**还是**已停用**，然后选择**.NET
    9.0（标准支持期限）**。
- en: 'You can install as many .NET SDK versions as you like. If you are missing a
    .NET SDK version, then you can install it from the following link: [https://dotnet.microsoft.com/en-us/download/dotnet](https://dotnet.microsoft.com/en-us/download/dotnet).'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以安装你喜欢的任何.NET SDK版本。如果你缺少一个.NET SDK版本，则可以从以下链接安装它：[https://dotnet.microsoft.com/en-us/download/dotnet](https://dotnet.microsoft.com/en-us/download/dotnet)。
- en: Leave the checkbox labeled **Do not use top-level statements** clear. (Later
    in this chapter, you will create a console app that selects this option, so you
    will see the difference.)
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持标记为**不使用顶级语句**的复选框为空。（在本章的后面，你将创建一个选择此选项的控制台应用程序，因此你会看到差异。）
- en: Leave the checkbox labeled **Enable native AOT publish** clear. You will learn
    what this option does in *Chapter 7*, *Packaging and Distributing .NET Types*.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持标记为**启用原生AOT发布**的复选框为空。你将在*第7章*，*打包和分发.NET类型*中了解此选项的功能。
- en: Click **Create**.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。
- en: If you cannot see **Solution Explorer**, then navigate to **View** | **Solution
    Explorer**.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你看不到**解决方案资源管理器**，则导航到**视图** | **解决方案资源管理器**。
- en: 'If code is not shown, then in **Solution Explorer**, double-click the file
    named `Program.cs` to open it, and note that **Solution Explorer** shows the **HelloCS**
    project, as shown in *Figure 1.4*:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果代码没有显示，那么在 **解决方案资源管理器** 中，双击名为 `Program.cs` 的文件以打开它，并注意 **解决方案资源管理器** 显示
    **HelloCS** 项目，如图 *1.4* 所示：
- en: '![](img/B22322_01_04.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_04.png)'
- en: 'Figure 1.4: Editing Program.cs in Visual Studio'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：在 Visual Studio 中编辑 Program.cs
- en: 'In `Program.cs`, note that the code consists of only a comment and a single
    statement, as shown in the following code:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，请注意代码仅由一个注释和一条语句组成，如下所示代码：
- en: '[PRE2]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This template uses the top-level program feature introduced in C# 9, which
    I will explain later in this chapter. As the comment in the code says, you can
    read more about this template at the following link: [https://aka.ms/new-console-template](https://aka.ms/new-console-template).'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此模板使用了 C# 9 中引入的顶级程序功能，我将在本章后面解释。正如代码中的注释所说，您可以在以下链接中了解更多关于此模板的信息：[https://aka.ms/new-console-template](https://aka.ms/new-console-template)。
- en: In `Program.cs`, modify line 2 so that the text that is being written to the
    console says `Hello, C#!`.
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，修改第 2 行，以便写入控制台的文字显示为 `Hello, C#!`。
- en: All code examples and commands that you must review or type are shown in plain
    text, so you will never have to read code or commands from a screenshot, like
    in *Figure 1.4*, which might be too small or too faint in print.
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有必须审查或键入的代码示例和命令都以纯文本形式显示，因此您永远不需要从截图（如图 *1.4* 所示）中读取代码或命令，因为截图可能太小或太淡。
- en: Compiling and running code using Visual Studio
  id: totrans-288
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 编译和运行代码
- en: 'The next task is to compile and run the code:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是编译和运行代码：
- en: In Visual Studio, navigate to **Debug** | **Start Without Debugging**.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，导航到 **调试** | **不调试启动**。
- en: '**Good Practice**: When you start a project in Visual Studio, you can choose
    whether to attach a debugger or not. If you do not need to debug, then it is better
    not to attach one because attaching a debugger requires more resources and slows
    everything down. Attaching a debugger also limits you to only starting one project.
    If you want to run more than one project, each with a debugger attached, then
    you must start multiple instances of Visual Studio. In the toolbar, click the
    green outline triangle button (to the right of **HelloCS** in the top bar shown
    in *Figure 1.5*) to start without debugging, instead of the green solid triangle
    button (to the left of **HelloCS** in the top bar shown in *Figure 1.5*), unless
    you need to debug.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：当您在 Visual Studio 中启动项目时，可以选择是否附加调试器。如果您不需要调试，那么最好不要附加，因为附加调试器需要更多资源，并且会减慢一切速度。附加调试器还会限制您只能启动一个项目。如果您想运行多个项目，每个项目都附加了调试器，那么您必须启动多个
    Visual Studio 实例。在工具栏中，单击顶栏中 **HelloCS** 右侧的绿色轮廓三角形按钮（如图 *1.5* 所示），以不调试启动，而不是顶栏中
    **HelloCS** 左侧的绿色实心三角形按钮（如图 *1.5* 所示），除非您需要调试。'
- en: 'The output in the console window will show the result of running your application,
    as shown in *Figure 1.5*:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台窗口中的输出将显示应用程序运行的结果，如图 *1.5* 所示：
- en: '![](img/B22322_01_05.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_05.png)'
- en: 'Figure 1.5: Running the console app on Windows'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：在 Windows 上运行控制台应用程序
- en: Press any key to close the console app window and return to Visual Studio.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按任意键关闭控制台应用程序窗口并返回到 Visual Studio。
- en: Optionally, close the **Properties** pane to make more vertical space for **Solution
    Explorer**.
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，关闭 **属性** 选项卡以为 **解决方案资源管理器** 提供更多垂直空间。
- en: Double-click the **HelloCS** project, and note that the `HelloCS.csproj` project
    file shows that this project has its target framework set to `net9.0`, as shown
    in *Figure 1.6*.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击 **HelloCS** 项目，并注意 `HelloCS.csproj` 项目文件显示，该项目已将其目标框架设置为 `net9.0`，如图 *1.6*
    所示。
- en: 'In the **Solution Explorer** toolbar, toggle on the **Show All Files** button,
    and note that the compiler-generated `bin` and `obj` folders are visible, as shown
    in *Figure 1.6*:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 工具栏中，切换开启 **显示所有文件** 按钮，并注意编译器生成的 `bin` 和 `obj` 文件夹可见，如图 *1.6*
    所示：
- en: '![](img/B22322_01_06.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_06.png)'
- en: 'Figure 1.6: Showing the compiler-generated folders and files'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：显示编译器生成的文件夹和文件
- en: Understanding the compiler-generated folders and files
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解编译器生成的文件夹和文件
- en: 'Two compiler-generated folders were created, named `obj` and `bin`, as described
    in the following list:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 根据以下列表，创建了两个由编译器生成的文件夹，分别命名为 `obj` 和 `bin`：
- en: The `obj` folder contains one compiled *object* file for each source code file.
    These objects haven’t been linked together into a final executable yet.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`obj`文件夹包含每个源代码文件的一个编译的**对象**文件。这些对象还没有被链接成一个最终的可执行文件。'
- en: The `bin` folder contains the *binary* executable for the application or class
    library. We will look at this in more detail in *Chapter 7*, *Packaging and Distributing
    .NET Types*.
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bin`文件夹包含应用程序或类库的**二进制**可执行文件。我们将在*第7章*，*打包和分发.NET类型*中更详细地探讨这一点。'
- en: You do not need to look inside these folders or understand their files yet (but
    feel free to browse around if you are curious).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 你目前不需要查看这些文件夹或理解它们的文件（但如果你好奇，可以随意浏览）。
- en: Just be aware that the compiler needs to create temporary folders and files
    to do its work. You could delete these folders and their files, and they will
    be automatically recreated the next time you “build” or run the project. Developers
    often delete these temporary folders and files to “clean” a project. Visual Studio
    even has a command on the **Build** menu named **Clean Solution** that deletes
    some of these temporary files for you. The equivalent command with the CLI is
    `dotnet clean`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，编译器需要创建临时文件夹和文件来完成其工作。你可以删除这些文件夹及其文件，它们将在你下次“构建”或运行项目时自动重新创建。开发者通常会删除这些临时文件夹和文件以“清理”项目。Visual
    Studio甚至有一个名为**清理解决方案**的命令，它会为你删除一些这些临时文件。CLI中的等效命令是`dotnet clean`。
- en: Understanding top-level programs
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解顶层程序
- en: If you have seen older .NET projects before, then you might have expected more
    code, even just to output a simple message. This project has minimal statements
    because some of the required code is written for you by the compiler when you
    target .NET 6 or later.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前见过较老的.NET项目，那么你可能期望有更多的代码，甚至只是输出一个简单的消息。这个项目有最少的语句，因为当你针对.NET 6或更高版本时，一些必需的代码是由编译器为你编写的。
- en: 'If you had created the project with .NET SDK 5 or earlier, or if you had selected
    the checkbox labeled **Do not use top-level statements**, then the `Program.cs`
    file would have more statements, as shown in the following code:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用.NET SDK 5或更早版本创建项目，或者如果你选择了标记为**不使用顶层语句**的复选框，那么`Program.cs`文件将包含更多的语句，如下面的代码所示：
- en: '[PRE3]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: During compilation with .NET SDK 6 or later, all the boilerplate code to define
    the `Program` class and its `Main` method is generated and wrapped around the
    statements you write.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用.NET SDK 6或更高版本进行编译时，所有用于定义`Program`类及其`Main`方法的样板代码都会生成并围绕你编写的语句包装。
- en: 'This uses a feature introduced in .NET 5 called **top-level programs**, but
    it was not until .NET 6 that Microsoft updated the project template for console
    apps to use top-level statements by default. Then, in .NET 7 and later, Microsoft
    added options to use the older style if you prefer:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用了.NET 5中引入的一个特性，称为**顶层程序**，但直到.NET 6，微软才更新了控制台应用程序的项目模板，使其默认使用顶层语句。然后，在.NET
    7及以后的版本中，微软添加了选项，如果你更喜欢旧风格，可以使用：
- en: If you are using Visual Studio, select the checkbox labeled **Do not use top-level
    statements**.
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在使用Visual Studio，请选择标记为**不使用顶层语句**的复选框。
- en: 'If you are using the `dotnet` CLI at the command prompt, add a switch:'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你正在命令提示符下使用`dotnet` CLI，请添加一个开关：
- en: '[PRE4]'
  id: totrans-315
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '**Warning!** One functional difference is that the auto-generated code does
    not define a namespace, so the `Program` class is implicitly defined in an empty
    namespace with no name, instead of a namespace that matches the name of the project.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**一个功能上的差异是，自动生成的代码没有定义命名空间，因此`Program`类在没有任何名称的空命名空间中隐式定义，而不是与项目名称匹配的命名空间。'
- en: Requirements for top-level programs
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 顶层程序的要求
- en: 'Key points to remember about top-level programs include the following:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 关于顶层程序需要记住的关键点包括以下内容：
- en: There can be only one file like the file you use for top-level program code
    in a project.
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一个项目中，只能有一个类似于用于顶层程序代码的文件。
- en: Any `using` statements must be at the top of the file.
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何`using`语句都必须位于文件的顶部。
- en: If you declare any classes or other types, they must be at the bottom of the
    file.
  id: totrans-321
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你声明了任何类或其他类型，它们必须位于文件的底部。
- en: Although you should name the entry-point method `Main` if you explicitly define
    it, the method is named `<Main>$` when created by the compiler.
  id: totrans-322
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尽管你应该显式定义入口点方法为`Main`，但编译器创建的方法名为`<Main>$`。
- en: Implicitly imported namespaces
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 隐式导入的命名空间
- en: The `using System;` statement at the top of the file imports the `System` namespace.
    This enables the `Console.WriteLine` statement to work. But why do we not have
    to import it in our project?
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 文件顶部的`using System;`语句导入`System`命名空间。这使`Console.WriteLine`语句能够工作。但为什么我们不需要在我们的项目中导入它？
- en: 'The trick is that we still need to import the `System` namespace, but it is
    now done for us using a combination of features introduced in C# 10 and .NET 6\.
    Let’s see how:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧在于我们仍然需要导入`System`命名空间，但现在它是通过C# 10和.NET 6中引入的功能组合来完成的。让我们看看它是如何做到的：
- en: In **Solution Explorer**, expand the `obj`, `Debug`, and `net9.0` folders, and
    open the file named `HelloCS.GlobalUsings.g.cs`.
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，展开`obj`、`Debug`和`net9.0`文件夹，并打开名为`HelloCS.GlobalUsings.g.cs`的文件。
- en: 'Note that this file is automatically created by the compiler for projects that
    target .NET 6 or later and uses a feature introduced in C# 10, called **global
    namespace imports**, which imports some commonly used namespaces like `System`
    for use in all code files, as shown in the following code:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，此文件是由编译器自动为针对.NET 6或更高版本的项目创建的，并使用C# 10中引入的功能，称为**全局命名空间导入**，该功能导入一些常用命名空间，如`System`，以便在所有代码文件中使用，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In **Solution Explorer**, click the **Show All Files** button to hide the `bin`
    and `obj` folders.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，单击**显示所有文件**按钮以隐藏`bin`和`obj`文件夹。
- en: I will explain more about the implicit imports feature in the next chapter.
    For now, just note that a significant change that happened between .NET 5 and
    .NET 6 is that many of the project templates, like the one for console apps, use
    new SDK and language features to hide what is really happening.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在下一章中解释更多关于隐式导入功能的内容。现在，只需注意，.NET 5和.NET 6之间发生的重大变化之一是，许多项目模板，如控制台应用程序模板，使用新的SDK和语言功能来隐藏实际发生的事情。
- en: Revealing the hidden code by throwing an exception
  id: totrans-331
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过抛出异常来揭示隐藏的代码
- en: 'Now let’s discover how the hidden code has been written:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来探究隐藏的代码是如何编写的：
- en: 'In `Program.cs`, after the statement that outputs the message, add a statement
    to throw a new exception, as shown in the following code:'
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在输出消息的语句之后，添加一个抛出新异常的语句，如下面的代码所示：
- en: '[PRE6]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In Visual Studio, navigate to **Debug** | **Start Without Debugging**. (Do not
    start the project with debugging, or the exception will be caught by the debugger!)
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**调试** | **不调试启动**。（不要以调试方式启动项目，否则异常将被调试器捕获！）
- en: 'The output in the console window will show the result of running your application,
    including that a hidden `Program` class was defined by the compiler, with a method
    named `<Main>$` that has a parameter named `args` to pass in arguments, as shown
    in *Figure 1.7* and the following output:'
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台窗口中的输出将显示应用程序的运行结果，包括编译器定义了一个隐藏的`Program`类，其中有一个名为`<Main>$`的方法，该方法有一个名为`args`的参数来传递参数，如图*图1.7*和以下输出所示：
- en: '[PRE7]'
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![](img/B22322_01_07.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B22322_01_07.png)'
- en: 'Figure 1.7: Throwing an exception to reveal the hidden Program.<Main>$ method'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.7：抛出异常以揭示隐藏的Program.<Main>$方法
- en: Press any key to close the console app window and return to Visual Studio.
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按任意键关闭控制台应用程序窗口并返回Visual Studio。
- en: Revealing the namespace for the Program class
  id: totrans-341
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 揭示`Program`类的命名空间
- en: 'Now, let’s discover what namespace the `Program` class has been defined within:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们探究`Program`类是在哪个命名空间中定义的：
- en: 'In `Program.cs`, before the statement that throws an exception, add statements
    to get the name of the namespace of the `Program` class, and then write it to
    the console, as shown in the following code:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在抛出异常的语句之前，添加语句以获取`Program`类的命名空间名称，并将其写入控制台，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`??` is the **null-coalescing operator**. The first statement means, “If the
    namespace of `Program` is `null`, then return `<null>`; otherwise, return the
    name.” You will see more explanations of these keywords and operators throughout
    the book. For now, just enter the code and run it to see what it does.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`??`是**空合并运算符**。第一个语句的意思是，“如果`Program`的命名空间是`null`，则返回`<null>`；否则，返回名称。”你将在本书的其余部分看到这些关键字和运算符的更多解释。现在，只需输入代码并运行它，看看它会做什么。'
- en: '**Good Practice**: Code editors have a feature named **code snippets**. These
    allow you to insert pieces of code that you commonly use, by typing a shortcut
    and pressing *Tab* twice. For example, in Visual Studio, to enter `Console.WriteLine()`
    and leave the cursor in the middle of the parentheses ready for you to type what
    you want to output, type `cw`, and then press *Tab*, *Tab*. Read the documentation
    for your code editor to learn how to insert code snippets using shortcuts.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：代码编辑器有一个名为**代码片段**的功能。这允许您通过输入快捷键并按两次*Tab*来插入常用代码片段。例如，在Visual Studio中，要输入`Console.WriteLine()`并将光标置于括号中间以便您输入要输出的内容，请输入`cw`，然后按*Tab*，*Tab*。阅读您代码编辑器的文档以了解如何使用快捷键插入代码片段。'
- en: In Visual Studio, navigate to **Debug** | **Start Without Debugging**.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**调试** | **不调试启动**。
- en: 'The output in the console window will show the result of running your application,
    including that the hidden `Program` class was defined without a namespace, as
    shown in the following output:'
  id: totrans-348
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制台窗口的输出将显示应用程序的运行结果，包括隐藏的`Program`类在没有命名空间的情况下被定义，如下面的输出所示：
- en: '[PRE9]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Press any key to close the console app window and return to Visual Studio.
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按任意键关闭控制台应用程序窗口并返回Visual Studio。
- en: Adding a second project using Visual Studio
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Visual Studio添加第二个项目
- en: 'Let’s add a second project to our solution to explore how to work with multiple
    projects:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向我们的解决方案添加第二个项目以探索如何处理多个项目：
- en: In Visual Studio, navigate to **File** | **Add** | **New Project…**.
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到**文件** | **添加** | **新建项目…**。
- en: '**Warning!** The above step adds a new project to the existing solution. Do
    NOT navigate to **File** | **New** | **Project…**, which instead is meant to be
    used to create a new project and solution (although the dialog box has a dropdown
    to choose to add to an existing solution too).'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**警告！**上述步骤将向现有解决方案添加一个新项目。请勿导航到**文件** | **新建** | **项目…**，因为这实际上是为了创建一个新项目和解决方案（尽管对话框中有一个下拉菜单可以选择添加到现有解决方案）。'
- en: In the **Add a new project** dialog, in **Recent project templates**, select
    **Console App [C#]**, and then click **Next**.
  id: totrans-355
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**添加新项目**对话框中，在**最近的项目模板**中，选择**控制台应用程序 [C#]**，然后点击**下一步**。
- en: In the **Configure your new project** dialog, for **Project name**, enter `AboutMyEnvironment`,
    leave the location as `C:\cs13net9\Chapter01`, and then click **Next**.
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**配置新项目**对话框中，对于**项目名称**，输入`AboutMyEnvironment`，将位置保留为`C:\cs13net9\Chapter01`，然后点击**下一步**。
- en: In the **Additional information** dialog, select **.NET 9.0 (Standard Term Support)**
    and select the **Do not use top-level statements** checkbox.
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**附加信息**对话框中，选择**.NET 9.0（标准支持条款）**并选择**不使用顶级语句**复选框。
- en: '**Warning!** Make sure you have selected the **Do not use top-level statements**
    checkbox so that we get to see the older style of `Program.cs`.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！**请确保您已选中**不使用顶级语句**复选框，以便我们能够看到较旧的`Program.cs`风格。'
- en: Click **Create**.
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**。
- en: 'In the `AboutMyEnvironment` project, in `Program.cs`, note the statements to
    define a namespace that matches the project name, an internal class named `Program`,
    and a static method named `Main` with a parameter named `args` that returns nothing
    (`void`), as shown in the following code:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`AboutMyEnvironment`项目中，在`Program.cs`中，注意定义与项目名称匹配的命名空间、名为`Program`的内部类以及名为`Main`的静态方法，该方法有一个名为`args`的参数，返回值为空（`void`），如下面的代码所示：
- en: '[PRE10]'
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In `Program.cs`, in the `Main` method, replace the existing `Console.WriteLine`
    statement with statements to output the current directory, the version of the
    operating system, and the namespace of the `Program` class, as shown in the following
    code:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`文件中，在`Main`方法中，将现有的`Console.WriteLine`语句替换为输出当前目录、操作系统版本和`Program`类的命名空间的语句，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In **Solution Explorer**, right-click the **Chapter01** solution, and then select
    **Configure Startup Projects…**.
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击**Chapter01**解决方案，然后选择**配置启动项目…**。
- en: In the **Solution ‘Chapter01’ Property Pages** dialog box, set **Startup Project**
    to **Current selection**, and then click **OK**.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**“Chapter01”解决方案属性页**对话框中，将**启动项目**设置为**当前选择**，然后点击**确定**。
- en: In **Solution Explorer**, click the `AboutMyEnvironment` project (or any file
    or folder within it), and note that Visual Studio indicates that `AboutMyEnvironment`
    is now the startup project by making the project name bold.
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，单击`AboutMyEnvironment`项目（或其内的任何文件或文件夹），并注意Visual Studio通过使项目名称加粗来指示`AboutMyEnvironment`现在是启动项目。
- en: '**Good Practice**: I recommend this way of setting the startup project because
    it then makes it very easy to switch startup projects by simply clicking a project
    (or any file in a project) to make it the startup project. Although you can right-click
    a project and set it as a startup project, if you then want to run a different
    project, you must manually change it again. Simply clicking anywhere in the project
    is easier. In most chapters, you will only need to run one project at a time.
    In *Chapter 15, Building and Consuming Web Services*, I will show you how to configure
    multiple startup projects.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：我推荐这种方式来设置启动项目，因为这样通过简单地点击一个项目（或项目中的任何文件）就可以轻松地切换启动项目。尽管您可以通过右键单击项目将其设置为启动项目，但如果您想运行不同的项目，则必须手动再次更改它。在项目中任何地方点击都更简单。在大多数章节中，您只需一次运行一个项目。在*第
    15 章，构建和消费 Web 服务*中，我将向您展示如何配置多个启动项目。'
- en: 'Navigate to **Debug** | **Start Without Debugging** to run the `AboutMyEnvironment`
    project, and note the result, as shown in the following output and *Figure 1.8*:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**调试**|**不调试启动**来运行 `AboutMyEnvironment` 项目，并注意结果，如下面的输出和*图 1.8*所示：
- en: '[PRE12]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '![](img/B22322_01_08.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B22322_01_08.png)'
- en: 'Figure 1.8: Running a console app in a Visual Studio solution with two projects'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：在 Visual Studio 解决方案中运行具有两个项目的控制台应用程序
- en: Windows 11 is just branding. Its official name is Windows NT, and its major
    version number is still 10! But its patch version is 22000 or higher.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 11 只是品牌名称。它的官方名称是 Windows NT，其主要版本号仍然是 10！但它的补丁版本是 22000 或更高。
- en: Press any key to close the console app window and return to Visual Studio.
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按任意键关闭控制台应用程序窗口并返回 Visual Studio。
- en: When Visual Studio runs a console app, it executes it from the `<projectname>\bin\Debug\net9.0`
    folder. It will be important to remember this when we work with the filesystem
    in later chapters. When using VS Code, or more accurately, the `dotnet` CLI, it
    has different behavior, as you are about to see.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当 Visual Studio 运行控制台应用程序时，它将从 `<projectname>\bin\Debug\net9.0` 文件夹中执行它。在后续章节中处理文件系统时，这一点非常重要。当使用
    VS Code（更准确地说，是 `dotnet` CLI）时，它有不同的行为，您很快就会看到。
- en: Building console apps using VS Code
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 VS Code 构建控制台应用程序
- en: The goal of this section is to showcase how to build a console app using VS
    Code and the `dotnet` CLI.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是展示如何使用 VS Code 和 `dotnet` CLI 构建控制台应用程序。
- en: If you never want to try VS Code or the `dotnet` command-line tool, then please
    feel free to skip this section, and then continue with the *Making good use of
    the GitHub repository for this book* section.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从未想尝试 VS Code 或 `dotnet` 命令行工具，那么请随意跳过本节，然后继续阅读*充分利用本书 GitHub 仓库*的部分。
- en: Both the instructions and screenshots in this section are for Windows, but the
    same actions will work with VS Code on the macOS and Linux variants.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中的说明和截图均适用于 Windows，但相同的操作在 macOS 和 Linux 的 VS Code 版本上同样适用。
- en: The main differences will be native command-line actions such as deleting a
    file; both the command and the path are likely to be different on Windows, macOS,
    and Linux. Luckily, the `dotnet` CLI tool itself and its commands are identical
    on all platforms.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 主要区别将是原生命令行操作，例如删除文件；在 Windows、macOS 和 Linux 上，命令和路径可能都不同。幸运的是，`dotnet` CLI
    工具本身及其命令在所有平台上都是相同的。
- en: Writing code using VS Code
  id: totrans-380
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 VS Code 编写代码
- en: Let’s get started writing code!
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始编写代码！
- en: Start your favorite tool for working with the filesystem, for example, **File
    Explorer** on Windows or **Finder** on Mac.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您喜欢的文件系统操作工具，例如 Windows 上的**文件资源管理器**或 Mac 上的**查找器**。
- en: Navigate to your `C:` drive on Windows, your user folder on macOS or Linux (mine
    are named `markjprice` and `home/markjprice`), or any directory or drive in which
    you want to save your projects.
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 上导航到您的 `C:` 驱动器，在 macOS 或 Linux 上导航到您的用户文件夹（我的文件夹名为 `markjprice` 和
    `home/markjprice`），或任何您想要保存项目的目录或驱动器。
- en: Create a new folder named `cs13net9`. (If you completed the section for Visual
    Studio, then this folder will already exist.)
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `cs13net9` 的新文件夹。（如果您完成了 Visual Studio 的部分，那么这个文件夹已经存在。）
- en: In the `cs13net9` folder, create a new folder named `Chapter01-vscode`.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `cs13net9` 文件夹中，创建一个名为 `Chapter01-vscode` 的新文件夹。
- en: If you did not complete the section for Visual Studio, then you could name this
    folder `Chapter01`, but I will assume you will want to complete both sections
    and, therefore, need to use a non-conflicting name.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有完成 Visual Studio 的部分，那么您可以命名这个文件夹为 `Chapter01`，但我会假设您将完成这两个部分，因此需要使用一个不冲突的名称。
- en: In the `Chapter01-vscode` folder, open the command prompt or terminal. For example,
    on Windows, right-click on the folder and then select **Open in Terminal**.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Chapter01-vscode` 文件夹中，打开命令提示符或终端。例如，在 Windows 上，右键单击文件夹，然后选择 **在终端中打开**。
- en: 'At the command prompt or terminal, use the `dotnet` CLI to create a new solution
    named `Chapter01`, as shown in the following command:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，使用 `dotnet` CLI 创建一个名为 `Chapter01` 的新解决方案，如下所示：
- en: '[PRE13]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You can use either `-n` or `--name` as the switch to specify a name. If you
    do not explicitly specify a solution name with one of these switches, then the
    default would match the name of the folder, for example, `Chapter01-vscode`.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `-n` 或 `--name` 作为开关来指定名称。如果您不使用这些开关中的任何一个显式指定解决方案名称，则默认名称将与文件夹名称匹配，例如，`Chapter01-vscode`。
- en: 'Note the result, as shown in the following output:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下输出结果，如图所示：
- en: '[PRE14]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'At the command prompt or terminal, use the `dotnet` CLI to create a new subfolder
    and project for a console app named `HelloCS`, as shown in the following command:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，使用 `dotnet` CLI 创建一个名为 `HelloCS` 的控制台应用程序的新子文件夹和项目，如下所示：
- en: '[PRE15]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You can use either `-o` or `--output` as the switch to specify the folder and
    project name. The `dotnet new console` command targets your latest .NET SDK version
    by default. To target a different version, use the `-f` or `--framework` switch
    to specify a target framework. For example, to target .NET 8, use the following
    command: `dotnet new console -f net8.0`.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `-o` 或 `--output` 作为开关来指定文件夹和项目名称。`dotnet new console` 命令默认针对您最新的 .NET
    SDK 版本。要针对不同的版本，请使用 `-f` 或 `--framework` 开关来指定目标框架。例如，要针对 .NET 8，请使用以下命令：`dotnet
    new console -f net8.0`。
- en: 'At the command prompt or terminal, use the `dotnet` CLI to add the project
    to the solution, as shown in the following command:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，使用 `dotnet` CLI 将项目添加到解决方案中，如下所示：
- en: '[PRE16]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Note the results, as shown in the following output:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下输出结果，如图所示：
- en: '[PRE17]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At the command prompt or terminal, start VS Code and open the current folder,
    indicated with a `.` (dot), as shown in the following command:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中，启动 VS Code 并打开当前文件夹，用 `.`（点）表示，如下所示：
- en: '[PRE18]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: If you are prompted with **Do you trust the authors of the files in this folder?**,
    select the **Trust the authors of all files in the parent folder ‘cs13net9’**
    checkbox, and then click **Yes, I trust the authors**.
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您被提示 **您是否信任此文件夹中文件的作者？**，请选择 **信任父文件夹‘cs13net9’中的所有文件作者** 复选框，然后点击 **是，我信任作者**。
- en: 'In VS Code, in **EXPLORER**, in the **CHAPTER01-VSCODE** folder view, expand
    the `HelloCS` folder, and you will see that the `dotnet` command-line tool created
    two files, `HelloCS.csproj` and `Program.cs`, and the `bin` and `obj` folders,
    as shown in *Figure 1.9*:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 中，在 **EXPLORER** 中，在 **CHAPTER01-VSCODE** 文件夹视图中展开 `HelloCS` 文件夹，您将看到
    `dotnet` 命令行工具创建了两个文件，`HelloCS.csproj` 和 `Program.cs`，以及 `bin` 和 `obj` 文件夹，如图
    *图 1.9* 所示：
- en: '![](img/B22322_01_09.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_09.png)'
- en: 'Figure 1.9: EXPLORER shows that two files and temporary folders have been created'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：**EXPLORER** 显示已创建了两个文件和临时文件夹。
- en: Navigate to **View** | **Output**.
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 **视图** | **输出**。
- en: In the **OUTPUT** pane, select **C# Dev Kit**, and note that the tool has recognized
    and processed the solution.
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **输出** 面板中，选择 **C# 开发工具包**，并注意工具已识别并处理了解决方案。
- en: At the bottom of **EXPLORER**, note **SOLUTION EXPLORER**.
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **EXPLORER** 的底部，注意 **SOLUTION EXPLORER**。
- en: Drag **SOLUTION EXPLORER** to the top of the **EXPLORER** pane and expand it.
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 **SOLUTION EXPLORER** 拖到 **EXPLORER** 面板的顶部并展开它。
- en: In **SOLUTION EXPLORER**, expand the **HelloCS** project, and then click the
    file named `Program.cs` to open it in the editor window.
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **SOLUTION EXPLORER** 中，展开 **HelloCS** 项目，然后单击名为 `Program.cs` 的文件以在编辑器窗口中打开它。
- en: In `Program.cs`, modify line 2 so that the text that is being written to the
    console says `Hello, C#!`.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，修改第 2 行，使写入控制台的文字为 `Hello, C#!`。
- en: '**Good Practice**: Navigate to **File** | **Auto Save**. This toggle will avoid
    the annoyance of remembering to save before rebuilding your application each time.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：导航到 **文件** | **自动保存**。此切换将避免每次重建应用程序前记得保存的烦恼。'
- en: In the preceding steps, I showed you how to use the `dotnet` CLI to create solutions
    and projects. Finally, with the August 2024 or later releases of the C# Dev Kit,
    VS Code has an improved project creation experience that provides you access to
    the same options you can use when creating a new project through the `dotnet`
    CLI.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我向您展示了如何使用`dotnet` CLI 创建解决方案和项目。最后，随着 2024 年 8 月或之后的 C# 开发工具包的发布，VS
    Code 提供了改进的项目创建体验，它提供了与通过`dotnet` CLI 创建新项目时相同的选项。
- en: 'To enable this ability, you must change a setting, as shown in the following
    configuration:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用此功能，您必须更改设置，如下配置所示：
- en: '[PRE19]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In VS Code, navigate to **File** | **Preferences** | **Settings**, search for
    `dotnet new`, and then select the **Csharp > Experimental: Dotnet New Integration**
    checkbox.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '在 VS Code 中，导航到**文件** | **首选项** | **设置**，搜索`dotnet new`，然后选择**Csharp > Experimental:
    Dotnet New Integration**复选框。'
- en: 'You can learn more at the following link:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多信息：
- en: '[https://devblogs.microsoft.com/dotnet/whats-new-in-csharp-dev-kit-august-2024/#create-new-project-configuration-options](https://devblogs.microsoft.com/dotnet/whats-new-in-csharp-dev-kit-august-2024/#create-new-project-configuration-options)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/dotnet/whats-new-in-csharp-dev-kit-august-2024/#create-new-project-configuration-options](https://devblogs.microsoft.com/dotnet/whats-new-in-csharp-dev-kit-august-2024/#create-new-project-configuration-options)'
- en: Compiling and running code using the dotnet CLI
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 dotnet CLI 编译和运行代码
- en: 'The next task is to compile and run the code:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是编译和运行代码：
- en: In **SOLUTION EXPLORER**, right-click on any file in the `HelloCS` project and
    choose **Open In Integrated Terminal**.
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**中，右键单击`HelloCS`项目中的任何文件，然后选择**在集成终端中打开**。
- en: 'In **TERMINAL**, enter the following command: `dotnet run`.'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中，输入以下命令：`dotnet run`。
- en: The output in the **TERMINAL** window will show the result of running your application.
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**窗口中的输出将显示应用程序运行的结果。'
- en: 'In `Program.cs`, after the statement that outputs the message, add statements
    to get the name of the namespace of the `Program` class, write it to the console,
    and then throw a new exception, as shown in the following code:'
  id: totrans-424
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Program.cs`中，在输出消息的语句之后，添加获取`Program`类命名空间名称的语句，将其写入控制台，然后抛出一个新的异常，如下代码所示：
- en: '[PRE20]'
  id: totrans-425
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'In **TERMINAL**, enter the following command: `dotnet run`.'
  id: totrans-426
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中，再次输入以下命令：`dotnet run`。
- en: In **TERMINAL**, you can press the up and down arrows to loop through previous
    commands, and then press the left and right arrows to edit the commands before
    pressing *Enter* to run them.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在**终端**中，您可以按上箭头和下箭头键循环查看之前的命令，然后按左右箭头键编辑命令，在按下*Enter*键运行它们之前。
- en: 'The output in the **TERMINAL** window will show the result of running your
    application, including that a hidden `Program` class was defined by the compiler,
    with a method named `<Main>$` that has a parameter named `args` to pass in arguments,
    and that it does not have a namespace, as shown in the following output:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**终端**窗口中的输出将显示应用程序运行的结果，包括编译器定义了一个隐藏的`Program`类，该类有一个名为`<Main>$`的方法，该方法有一个名为`args`的参数用于传递参数，并且它没有命名空间，如下输出所示：'
- en: '[PRE21]'
  id: totrans-429
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Adding a second project using VS Code
  id: totrans-430
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 VS Code 添加第二个项目
- en: 'Let’s add a second project to explore how to work with multiple projects:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加第二个项目来探索如何处理多个项目：
- en: 'In **TERMINAL**, change to the `Chapter01-vscode` directory, as shown in the
    following command:'
  id: totrans-432
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中，切换到`Chapter01-vscode`目录，如下命令所示：
- en: '[PRE22]'
  id: totrans-433
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In **TERMINAL**, create a new console app project named `AboutMyEnvironment`,
    using the older non-top-level program style, as shown in the following command:'
  id: totrans-434
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中，创建一个名为`AboutMyEnvironment`的新控制台应用程序项目，使用较旧的顶级程序样式，如下命令所示：
- en: '[PRE23]'
  id: totrans-435
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '**Good Practice**: Be careful when entering commands in **TERMINAL**. Ensure
    that you are in the correct folder before entering potentially destructive commands!'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在**终端**中输入命令时请小心。在输入可能具有破坏性的命令之前，请确保您位于正确的文件夹中！'
- en: 'In **TERMINAL**, use the `dotnet` CLI to add the new project folder to the
    solution, as shown in the following command:'
  id: totrans-437
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**终端**中，使用`dotnet` CLI 将新项目文件夹添加到解决方案中，如下命令所示：
- en: '[PRE24]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Note the results, as shown in the following output:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意以下结果，如下输出所示：
- en: '[PRE25]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In **SOLUTION** **EXPLORER**, in the `AboutMyEnvironment` project, open `Program.cs`,
    and then in the `Main` method, change the existing statement to output the current
    directory, the operating system version string, and the namespace of the `Program`
    class, as shown in the following code:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 中，在 `AboutMyEnvironment` 项目中打开 `Program.cs`，然后在 `Main` 方法中，将现有语句更改为输出当前目录、操作系统版本字符串和
    `Program` 类的命名空间，如下所示代码：
- en: '[PRE26]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: In **SOLUTION EXPLORER**, right-click on any file in the `AboutMyEnvironment`
    project and choose **Open In Integrated Terminal**.
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 中，右键单击 `AboutMyEnvironment` 项目中的任何文件，然后选择 **在集成终端中打开**。
- en: 'In **TERMINAL**, enter the command to run the project, as shown in the following
    command: `dotnet run`.'
  id: totrans-444
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **终端** 中输入运行项目的命令，如下所示命令：`dotnet run`。
- en: 'Note the output in the **TERMINAL** window, as shown in the following output:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意查看 **终端** 窗口中的输出，如下所示：
- en: '[PRE27]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Once you open multiple terminal windows, you can toggle between them by clicking
    their names in the panel on the right-hand side of **TERMINAL**. By default, the
    name will be one of the common shells like **pwsh**, **powershell**, **zsh**,
    or **bash**. Right-click and choose **Rename** to set something else.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开多个终端窗口，您可以通过点击 **终端** 右侧面板上的名称在它们之间切换。默认情况下，名称将是常见的壳之一，如 **pwsh**、**powershell**、**zsh**
    或 **bash**。右键单击并选择 **重命名** 以设置其他名称。
- en: When VS Code, or more accurately, the `dotnet` CLI, runs a console app, it executes
    it from the `<projectname>` folder. Visual Studio executes the app from the `<projectname>\bin\Debug\net9.0`
    folder. It will be important to remember this when we work with the filesystem
    in later chapters.
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 当 VS Code 或更准确地说，`dotnet` CLI 运行控制台应用程序时，它将从 `<projectname>` 文件夹中执行它。Visual
    Studio 将从 `<projectname>\bin\Debug\net9.0` 文件夹中执行应用程序。在后续章节中处理文件系统时，这一点将非常重要。
- en: 'If you were to run the program on macOS Ventura, the environment operating
    system would be different, as shown in the following output:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在 macOS Ventura 上运行程序，操作系统环境将不同，如下所示输出：
- en: '[PRE28]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '**Good Practice**: Although the source code, like the `.csproj` and `.cs` files,
    is identical, the `bin` and `obj` folders that are automatically generated by
    the compiler could have mismatches that give you errors. If you want to open the
    same project in both Visual Studio and VS Code, delete the temporary `bin` and
    `obj` folders before opening the project in the other code editor. This potential
    problem is why I asked you to create a different folder for the VS Code projects
    in this chapter.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：尽管源代码，如 `.csproj` 和 `.cs` 文件，是相同的，但由编译器自动生成的 `bin` 和 `obj` 文件夹可能会有不匹配，导致错误。如果您想在
    Visual Studio 和 VS Code 中打开相同的项目，请在其他代码编辑器中打开项目之前删除临时的 `bin` 和 `obj` 文件夹。这就是为什么我要求您在本章中为
    VS Code 项目创建不同文件夹的原因。'
- en: Summary of steps for VS Code
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VS Code 步骤总结
- en: 'Follow these steps to create a solution and projects using VS Code, as shown
    in *Table 1.5*:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 VS Code 创建解决方案和项目，如 *表 1.5* 所示：
- en: '| **Step Description** | **Command** |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| **步骤描述** | **命令** |'
- en: '| 1\. Create a folder for the solution. | `mkdir <solution_folder_name>` |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| 1. 为解决方案创建文件夹。 | `mkdir <solution_folder_name>` |'
- en: '| 2\. Change to the folder. | `cd <solution_folder_name>` |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| 2. 切换到文件夹。 | `cd <solution_folder_name>` |'
- en: '| 3\. Create a solution file in the folder. | `dotnet new sln` |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| 3. 在文件夹中创建解决方案文件。 | `dotnet new sln` |'
- en: '| 4\. Create a folder and project using a template. | `dotnet new console -o
    <project_folder_name>` |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| 4. 使用模板创建文件夹和项目。 | `dotnet new console -o <project_folder_name>` |'
- en: '| 5\. Add the folder and its project to the solution. | `dotnet sln add <project_folder_name>`
    |'
  id: totrans-459
  prefs: []
  type: TYPE_TB
  zh: '| 5. 将文件夹及其项目添加到解决方案中。 | `dotnet sln add <project_folder_name>` |'
- en: '| 6\. Repeat steps 4 and 5 to create and add any other projects. |  |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| 6. 重复步骤 4 和 5 以创建和添加任何其他项目。 |  |'
- en: '| 7\. Open the current folder path (`.`) containing the solution using VS Code.
    | `code .` |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| 7. 使用 VS Code 打开包含解决方案的当前文件夹路径（`.`）。 | `code .` |'
- en: 'Table 1.5: Summary of steps to create a solution and projects using VS Code'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.5：使用 VS Code 创建解决方案和项目的步骤总结
- en: Summary of other project types used in this book
  id: totrans-463
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书使用其他项目类型总结
- en: 'A **Console App** / `console` project is just one type of project template.
    In this book, you will also create projects using the following project templates,
    as shown in *Table 1.6*:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '**控制台应用程序** / `console` 项目只是项目模板的一种类型。在本书中，您还将使用以下项目模板创建项目，如 *表 1.6* 所示：'
- en: '| **Visual Studio** | **dotnet new** | **Rider – Type** |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| **Visual Studio** | **dotnet new** | **Rider – 类型** |'
- en: '| Console App | `console` | Console Application |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| 控制台应用程序 | `console` | 控制台应用程序 |'
- en: '| Class Library | `classlib` | Class Library |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| 类库 | `classlib` | 类库 |'
- en: '| xUnit Test Project | `xunit` | Unit Test Project – xUnit |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| xUnit 测试项目 | `xunit` | 单元测试项目 – xUnit |'
- en: '| ASP.NET Core Empty | `web` | ASP.NET Core Web Application – Empty |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET Core 空项目 | `web` | ASP.NET Core Web应用程序 – 空项目 |'
- en: '| Blazor Web App | `blazor` | ASP.NET Core Web Application – Blazor Web App
    |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| Blazor Web App | `blazor` | ASP.NET Core Web应用程序 – Blazor Web应用程序 |'
- en: '| ASP.NET Core Web API | `webapi` | ASP.NET Core Web Application – Web API
    |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET Core Web API | `webapi` | ASP.NET Core Web应用程序 – Web API |'
- en: '| ASP.NET Core Web API (native AOT) | `webapiaot` | ASP.NET Core Web Application
    – Web API (native AOT) |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| ASP.NET Core Web API（原生 AOT）| `webapiaot` | ASP.NET Core Web应用程序 – Web API（原生
    AOT）|'
- en: 'Table 1.6: Project template names for various code editors'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.6：各种代码编辑器的项目模板名称
- en: The steps for adding any type of new project to a solution are the same. Only
    the type name of the project template differs and, sometimes, some command-line
    switches to control options. I will always specify what those switches and options
    should be if they differ from the defaults.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 将任何类型的新项目添加到解决方案中的步骤是相同的。只有项目模板的类型名称不同，有时还需要一些命令行开关来控制选项。如果它们与默认值不同，我总是会指定那些开关和选项应该是什么。
- en: 'A summary of project template defaults, options, and switches can be found
    here: [https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md).'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在这里找到项目模板默认值、选项和开关的摘要：[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-project-options.md)。
- en: Making good use of the GitHub repository for this book
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 充分利用这本书的 GitHub 仓库
- en: '**Git** is a commonly used source code management system. **GitHub** is a company,
    website, and desktop application that makes it easier to manage Git. Microsoft
    purchased GitHub in 2018, so it will continue to get closer integration with Microsoft
    tools.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git** 是一个常用的源代码管理系统。**GitHub** 是一家公司、一个网站和桌面应用程序，它使得管理 Git 更加容易。微软在 2018
    年收购了 GitHub，因此它将继续与微软工具更加紧密地集成。'
- en: 'I created a GitHub repository for this book, and I use it for the following:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 我为这本书创建了一个 GitHub 仓库，并用于以下目的：
- en: To store the solution code for the book that can be maintained after the print
    publication date.
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了存储在印刷出版日期之后可以维护的这本书的解决方案代码。
- en: To provide extra materials that extend the book, like errata fixes, small improvements,
    lists of useful links, and optional sections about topics that cannot fit in the
    printed book.
  id: totrans-480
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了提供扩展书籍的额外材料，如勘误表修正、小改进、有用链接列表以及关于无法放入印刷书的主题的可选部分。
- en: To provide a place for readers to get in touch with me if they have issues with
    the book.
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为读者提供一个地方，如果他们对这本书有问题，可以与我联系。
- en: '**Good Practice**: I strongly recommend that you all review the errata, improvements,
    post-publication changes, and common errors pages before attempting any coding
    task in this book. You can find them at the following link: [https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md).'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：我强烈建议大家在尝试这本书中的任何编码任务之前，先审查勘误表、改进、出版后更改和常见错误页面。您可以在以下链接中找到它们：[https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md)。'
- en: Understanding the solution code on GitHub
  id: totrans-483
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 GitHub 上的解决方案代码
- en: 'The solution code in the GitHub repository for this book includes folders for
    each chapter that can be opened with any of the following code editors:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的 GitHub 仓库中的解决方案代码包括每个章节的文件夹，可以使用以下任何一种代码编辑器打开：
- en: 'Visual Studio or Rider: Open the `.sln` solution file.'
  id: totrans-485
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 或 Rider：打开 `.sln` 解决方案文件。
- en: 'VS Code: Open the folder that contains the solution file.'
  id: totrans-486
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VS Code：打开包含解决方案文件的文件夹。
- en: '*Chapters 1* to *11* each have their own solution file named `ChapterXX.sln`,
    where `XX` is the chapter number *01* to *11*. *Chapters 12* to *15* share a single
    solution file named `ModernWeb.sln`.'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '*第 1 章* 到 *第 11 章* 每章都有自己的解决方案文件，命名为 `ChapterXX.sln`，其中 `XX` 是章节号 *01* 到 *11*。*第
    12 章* 到 *第 15 章* 共享一个名为 `ModernWeb.sln` 的单个解决方案文件。'
- en: 'The `.sln` solution file format is a Microsoft proprietary file format that
    is verbose, hard to read, and uses **Globally Unique Identifiers** (**GUIDs**)
    to reference projects and other components of a solution. A new format based on
    XML, designed to be simpler and easier to read, is coming soon and will use the
    `.slnx` file extension. You can learn more about this at the following link: [https://github.com/dotnet/sdk/issues/40913](https://github.com/dotnet/sdk/issues/40913).'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`.sln`解决方案文件格式是微软专有的文件格式，冗长、难以阅读，并使用**全局唯一标识符**（**GUIDs**）来引用解决方案和其他组件。一个基于XML的新格式即将推出，设计得更加简单易读，并将使用`.slnx`文件扩展名。您可以在以下链接中了解更多信息：[https://github.com/dotnet/sdk/issues/40913](https://github.com/dotnet/sdk/issues/40913)。'
- en: 'All the code solutions can be found at the following link:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 所有代码解决方案都可以在以下链接找到：
- en: '[https://github.com/markjprice/cs13net9/tree/main/code](https://github.com/markjprice/cs13net9/tree/main/code)'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/tree/main/code](https://github.com/markjprice/cs13net9/tree/main/code)'
- en: '**Good Practice**: If you need to, return to this chapter to remind yourself
    how to create and manage multiple projects in the code editor of your choice.
    The GitHub repository has step-by-step instructions for three code editors (Visual
    Studio, VS Code, and Rider), along with additional screenshots: [https://github.com/markjprice/cs13net9/tree/main/docs/code-editors/](https://github.com/markjprice/cs13net9/tree/main/docs/code-editors/).'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：如果您需要，请返回本章以提醒自己如何在您选择的代码编辑器中创建和管理多个项目。GitHub仓库提供了三个代码编辑器（Visual Studio、VS
    Code和Rider）的逐步说明，以及额外的截图：[https://github.com/markjprice/cs13net9/tree/main/docs/code-editors/](https://github.com/markjprice/cs13net9/tree/main/docs/code-editors/)。'
- en: Raising issues with the book
  id: totrans-492
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提出关于本书的问题
- en: 'If you get stuck following any of the instructions in this book, or if you
    spot a mistake in the text or the code in the solutions, please raise an issue
    in the GitHub repository:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在遵循本书中的任何说明时遇到困难，或者如果在文本或解决方案中的代码中发现错误，请在GitHub仓库中提出问题：
- en: 'Use your favorite browser to navigate to the following link: [https://github.com/markjprice/cs13net9/issues](https://github.com/markjprice/cs13net9/issues).'
  id: totrans-494
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用您喜欢的浏览器导航到以下链接：[https://github.com/markjprice/cs13net9/issues](https://github.com/markjprice/cs13net9/issues)。
- en: Click **New Issue**.
  id: totrans-495
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建问题**。
- en: 'Enter as much detail as possible that will help me to diagnose the issue. For
    example:'
  id: totrans-496
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供尽可能多的细节，这将有助于我诊断问题。例如：
- en: The specific section title, page number, and step number.
  id: totrans-497
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具体的章节标题、页码和步骤编号。
- en: As much of your code and configuration that you feel is relevant and necessary.
  id: totrans-498
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供尽可能多的与您的代码和配置相关的信息。
- en: A description of the expected behavior and the behavior experienced.
  id: totrans-499
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对预期行为和实际行为的描述。
- en: Screenshots (you can drag and drop image files into the **Issue** box).
  id: totrans-500
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 截图（您可以将图片文件拖放到**问题**框中）。
- en: 'The following is less relevant but might be useful:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 以下内容可能不太相关，但可能有用：
- en: Your code editor, for example, Visual Studio, VS Code, Rider, or something else,
    including the version number.
  id: totrans-502
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的代码编辑器，例如，Visual Studio、VS Code、Rider或其他，包括版本号。
- en: Your operating system, for example, Windows 11 64-bit or macOS Ventura version
    13.5.2
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的操作系统，例如，Windows 11 64位或macOS Ventura版本13.5.2
- en: Your hardware, for example, Intel, Apple Silicon, or ARM CPU
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的硬件，例如，英特尔、苹果硅或ARM CPU
- en: I cannot always respond immediately to issues. But I want all my readers to
    find success with my book, so if I can help you (and others) without too much
    trouble, then I will gladly do so.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 我不能总是立即回应问题。但我希望所有读者都能通过我的书取得成功，所以如果我能帮助您（和其他人）而不会带来太多麻烦，我将非常乐意这样做。
- en: Giving me feedback
  id: totrans-506
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 给我反馈
- en: If you’d like to give me more general feedback about the book, then either email
    me at `markjprice@gmail.com` or ask me a question on Discord in the book channel.
    You can provide the feedback anonymously, or if you would like a response from
    me, then you can supply an email address. I will only use this email address to
    answer your feedback.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想就本书提供更一般的反馈，请通过以下邮箱地址给我发送邮件 `markjprice@gmail.com` 或在Discord的书频道中问我一个问题。您可以匿名提供反馈，或者如果您希望得到我的回复，可以提供电子邮件地址。我只会使用这个电子邮件地址来回答您的反馈。
- en: 'Please join me and your fellow readers on Discord using this invite: [https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9).'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用此邀请链接加入我及您的其他读者在Discord上的讨论：[https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9)。
- en: I love to hear from my readers about what they like about my book, as well as
    suggestions for improvements and how they are working with C# and .NET, so don’t
    be shy. Please get in touch!
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 我很高兴听到读者们关于他们喜欢我的书的内容，以及改进建议以及他们如何使用 C# 和 .NET，所以请不要害羞。请与我联系！
- en: Thank you in advance for your thoughtful and constructive feedback.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您提前提供的深思熟虑和建设性的反馈。
- en: Avoiding common mistakes
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 避免常见错误
- en: After working through the step-by-step tasks in this book, readers often then
    strike out on their own and attempt to write similar code, but sometimes, they
    hit problems and either raise an issue in the GitHub repository or post a question
    to the Discord channel for the book.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成本书中的逐步任务后，读者们通常会尝试自己编写类似的代码，但有时会遇到问题，要么在 GitHub 仓库中提出问题，要么在 Discord 频道中发布问题。
- en: 'From these, I have noted some common mistakes, so I maintain a page in the
    repository to highlight and explain these potential traps and how to fix them:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些中，我注意到了一些常见的错误，因此我在仓库中维护了一个页面来突出显示并解释这些潜在的陷阱以及如何修复它们：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/errata/common-mistakes.md](https://github.com/markjprice/cs13net9/blob/main/docs/errata/common-mistakes.md)'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/errata/common-mistakes.md](https://github.com/markjprice/cs13net9/blob/main/docs/errata/common-mistakes.md)'
- en: Downloading solution code from the GitHub repository
  id: totrans-515
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从 GitHub 仓库下载解决方案代码
- en: 'If you just want to download all the solution files without using Git, click
    the green **<> Code** button and then select **Download ZIP**, as shown in *Figure
    1.10*:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您只想下载所有解决方案文件而不使用 Git，请点击绿色 **<> 代码** 按钮，然后选择 **下载 ZIP**，如图 *图 1.10* 所示：
- en: '![](img/B22322_01_10.png)'
  id: totrans-517
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_10.png)'
- en: 'Figure 1.10: Downloading the repository as a ZIP file'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：将仓库作为 ZIP 文件下载
- en: '**Good Practice**: It is best to clone or download the code solutions to a
    short folder path, like `C:\cs13net9\` or `C:\book\`, to avoid build-generated
    files that exceed the maximum path length. You should also avoid special characters
    like `#`. For example, do not use a folder name like `C:\C# projects\`. That folder
    name might work for a simple console app project, but once you start adding features
    that automatically generate code, you are likely to have strange issues. Keep
    your folder names short and simple.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：最好将代码解决方案克隆或下载到短路径的文件夹中，例如 `C:\cs13net9\` 或 `C:\book\`，以避免生成的构建文件超过最大路径长度。您还应避免使用特殊字符，如
    `#`。例如，不要使用文件夹名称 `C:\C# projects\`。这个文件夹名称可能适用于简单的控制台应用程序项目，但一旦您开始添加自动生成代码的功能，您很可能会遇到奇怪的问题。请保持文件夹名称简短且简单。'
- en: Using Git with VS Code and the command prompt
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 VS Code 和命令提示符中的 Git
- en: VS Code has integrations with Git, but it will use your operating system’s Git
    installation, so you must install Git 2 or later first before you get these features.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code 与 Git 集成，但它将使用您的操作系统中的 Git 安装，因此您必须首先安装 Git 2 或更高版本才能获得这些功能。
- en: 'You can install Git from the following link: [https://git-scm.com/download](https://git-scm.com/download).'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接安装 Git：[https://git-scm.com/download](https://git-scm.com/download)。
- en: 'If you like to use a GUI, you can download GitHub Desktop from the following
    link: [https://desktop.github.com](https://desktop.github.com).'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您喜欢使用图形用户界面，您可以从以下链接下载 GitHub Desktop：[https://desktop.github.com](https://desktop.github.com)。
- en: Cloning the book solution code repository
  id: totrans-524
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 克隆书籍解决方案代码仓库
- en: 'Let’s clone the book solution code repository. In the steps that follow, you
    will use the VS Code terminal, but you can enter the commands at any command prompt
    or terminal window:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们克隆书籍解决方案代码仓库。在接下来的步骤中，您将使用 VS Code 终端，但您可以在任何命令提示符或终端窗口中输入命令：
- en: Create a folder named `Repos-vscode` in your `user` or `Documents` folder, or
    wherever you want to store your Git repositories.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 `user` 或 `Documents` 文件夹中创建一个名为 `Repos-vscode` 的文件夹，或者您想存储 Git 仓库的任何位置。
- en: 'Open the `Repos-vscode` folder at the command prompt or terminal, and then
    enter the following command:'
  id: totrans-527
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令提示符或终端中打开 `Repos-vscode` 文件夹，然后输入以下命令：
- en: '[PRE29]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Note that cloning all the solutions for all the chapters will take a minute
    or so, so please be patient.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，克隆所有章节的解决方案可能需要一分钟或更长时间，所以请耐心等待。
- en: Looking for help
  id: totrans-530
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 寻求帮助
- en: This section is all about how to find quality information about programming
    on the web.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 这一节全部关于如何在网络上找到关于编程的高质量信息。
- en: Microsoft Learn documentation and Ask Learn
  id: totrans-532
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Microsoft Learn 文档和 Ask Learn
- en: 'The definitive resource for getting help with Microsoft developer tools and
    platforms is in the technical documentation on Microsoft Learn, and you can find
    it at the following link: [https://learn.microsoft.com/en-us/docs](https://learn.microsoft.com/en-us/docs).'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 获取Microsoft开发者工具和平台帮助的终极资源是在Microsoft Learn上的技术文档，您可以在以下链接中找到它：[https://learn.microsoft.com/en-us/docs](https://learn.microsoft.com/en-us/docs)。
- en: “One of the most ambitious and impactful projects our engineers have built recently
    is Ask Learn, an API that provides generative AI capabilities to Microsoft Q&A.”
    - Bob Tabor, Microsoft’s Skilling organization
  id: totrans-534
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “我们工程师最近构建的最雄心勃勃且影响最大的项目之一是Ask Learn，这是一个API，它为Microsoft Q&A提供了生成式AI功能。” - Bob
    Tabor，Microsoft的Skilling组织
- en: 'You can read about it at the following link:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中了解更多信息：
- en: '[https://devblogs.microsoft.com/engineering-at-microsoft/how-we-built-ask-learn-the-rag-based-knowledge-service/](https://devblogs.microsoft.com/engineering-at-microsoft/how-we-built-ask-learn-the-rag-based-knowledge-service/)'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://devblogs.microsoft.com/engineering-at-microsoft/how-we-built-ask-learn-the-rag-based-knowledge-service/](https://devblogs.microsoft.com/engineering-at-microsoft/how-we-built-ask-learn-the-rag-based-knowledge-service/)'
- en: Documentation links in this book
  id: totrans-537
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本书中的文档链接
- en: The official Microsoft documentation for .NET needs to cover all versions. The
    default version shown in the documentation is always the most recent GA version.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: .NET的官方Microsoft文档需要涵盖所有版本。文档中显示的默认版本始终是最新的GA版本。
- en: 'For example, between November 2024 and November 2025, the default version of
    .NET shown in the documentation pages will be for .NET 9\. Between November 2025
    and November 2026, the default version of .NET will be for .NET 10\. The following
    link will automatically direct to the current version, depending on the current
    date:'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在2024年11月到2025年11月之间，文档页面中显示的.NET默认版本将是.NET 9。在2025年11月到2026年11月之间，.NET的默认版本将是.NET
    10。以下链接将根据当前日期自动跳转到当前版本：
- en: '[https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute)'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute)'
- en: 'After November 2025, to view the documentation page specifically for .NET 9,
    append `?view=net-9.0` to the end of a link. For example, use the following link:'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 在2025年11月之后，要查看.NET 9的特定文档页面，请将`?view=net-9.0`追加到链接的末尾。例如，使用以下链接：
- en: '[https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute?view=net-9.0](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute?view=net-9.0)'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute?view=net-9.0](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute?view=net-9.0)'
- en: All documentation links in this book do not specify a version. If you want to
    force the documentation to show the version for .NET 8 because you need to target
    an LTS version (three years) instead of .NET 9, which is an STS version (18 months),
    then append `?view=net-8.0` to the end of a link.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有文档链接都没有指定版本。如果您想强制文档显示.NET 8的版本，因为您需要针对LTS版本（三年）而不是STS版本（18个月）的.NET 9，那么请将`?view=net-8.0`追加到链接的末尾。
- en: 'You can check what versions a .NET feature supports by appending `#applies-to`
    to the end of a link, for example:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在链接末尾追加`#applies-to`来检查.NET功能支持哪些版本，例如：
- en: '[https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute#applies-to](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute#applies-to)'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute#applies-to](https://learn.microsoft.com/en-us/dotnet/api/system.diagnostics.codeanalysis.stringsyntaxattribute#applies-to)'
- en: We can, therefore, see that the `StringSyntax` attribute is only available in
    .NET 7 or later.
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们可以看到`StringSyntax`属性仅在.NET 7或更高版本中可用。
- en: Getting help from the dotnet tool
  id: totrans-547
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取dotnet工具的帮助
- en: 'At the command prompt, you can ask the `dotnet` tool for help with its commands.
    The syntax is:'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令提示符下，您可以请求`dotnet`工具提供其命令的帮助。语法是：
- en: '[PRE30]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This will cause your web browser to open a page in the documentation about the
    specified command. Common `dotnet` commands include `new`, `build`, `run`, and
    many more.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致您的网络浏览器打开有关指定命令的文档页面。常见的`dotnet`命令包括`new`、`build`、`run`等。
- en: '**Warning!** The `dotnet help new` command worked with .NET Core 3.1 to .NET
    6, but it returns an error with .NET 7 or later: `Specified command ''new'' is
    not a valid SDK command. Specify a valid SDK command. For more information, run
    dotnet help.` Hopefully, .NET will fix that bug soon!'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** `dotnet help new` 命令在 .NET Core 3.1 到 .NET 6 中工作，但在 .NET 7 或更高版本中返回错误：`指定的命令
    ''new'' 不是一个有效的 SDK 命令。指定一个有效的 SDK 命令。有关更多信息，请运行 dotnet help.` 希望.NET很快修复这个错误！'
- en: 'Another type of help is command-line documentation. It follows this syntax:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种类型的帮助是命令行文档。它遵循以下语法：
- en: '[PRE31]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: For example, `dotnet new -?` or `dotnet new -h` or `dotnet new --help` outputs
    documentation about the `new` command at the command prompt.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`dotnet new -?` 或 `dotnet new -h` 或 `dotnet new --help` 在命令提示符下输出有关 `new`
    命令的文档。
- en: As you should now expect, `dotnet help help` opens a web browser for the `help`
    command, and `dotnet help -h` outputs documentation for the `help` command at
    the command prompt!
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所期望的，`dotnet help help` 打开一个网页浏览器以显示 `help` 命令，而 `dotnet help -h` 在命令提示符下输出有关
    `help` 命令的文档！
- en: 'Let’s try some examples:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一些示例：
- en: 'To open the official documentation in a web browser window for the `dotnet
    build` command, enter the following at the command prompt or in the VS Code terminal,
    and note the page opened in your web browser:'
  id: totrans-557
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在网页浏览器窗口中打开 `dotnet build` 命令的官方文档，请在命令提示符或 VS Code 终端中输入以下内容，并注意在您的网页浏览器中打开的页面：
- en: '[PRE32]'
  id: totrans-558
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'To get help output at the command prompt, use the `-?` or `-h` or `--help`
    flag, as shown in the following command:'
  id: totrans-559
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在命令提示符下获取帮助输出，请使用 `-?` 或 `-h` 或 `--help` 标志，如下面的命令所示：
- en: '[PRE33]'
  id: totrans-560
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You will see the following partial output:'
  id: totrans-561
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到以下部分输出：
- en: '[PRE34]'
  id: totrans-562
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Repeat both types of help requests for the following commands: `add`, `help`,
    `list`, `new`, and `run`, remembering that `new` might not show its web page,
    due to a bug introduced in .NET 7.'
  id: totrans-563
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对以下命令重复两种帮助请求：`add`、`help`、`list`、`new` 和 `run`，记住 `new` 可能不会显示其网页，因为 .NET 7
    中引入了一个错误。
- en: Getting definitions of types and their members
  id: totrans-564
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取类型及其成员的定义
- en: One of the most useful features of a code editor is **Go To Definition** (*F12*).
    It is available in VS Code, Visual Studio, and Rider. It will show what the public
    definition of the type or member looks like by reading the metadata in the compiled
    assembly.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 代码编辑器最有用的功能之一是 **转到定义** (*F12*)。它在 VS Code、Visual Studio 和 Rider 中可用。它将通过读取编译的程序集中的元数据来显示类型或成员的公共定义看起来是什么样子。
- en: Some tools, such as ILSpy .NET Decompiler, will even reverse-engineer the metadata
    and IL code back into C# or another language for you.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 一些工具，如 ILSpy .NET Decompiler，甚至可以将元数据和 IL 代码逆向工程回 C# 或其他语言。
- en: A similar and related feature is named **Go To Implementation** (*Ctrl* + *F12*).
    Instead of reading the metadata or decompiling, this will show the actual source
    code if that is embedded, using the optional source link feature.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 一个类似且相关的功能名为 **转到实现** (*Ctrl* + *F12*)。它不会读取元数据或反编译，如果源代码已嵌入，它将使用可选的源链接功能显示实际的源代码。
- en: '**Warning!** **Go To Definition** should go to the decompiled metadata for
    a member or type. But if you have previously viewed the source link, then it goes
    to that. **Go To Implementation** should go to the source link implementation
    for a member or type. But if you have disabled the source link, then it goes to
    the decompiled metadata.'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** **转到定义** 应该跳转到成员或类型的反编译元数据。但如果您之前已经查看过源链接，那么它会跳转到那里。**转到实现** 应该跳转到成员或类型的源链接实现。但如果您已禁用源链接，那么它会跳转到反编译元数据。'
- en: 'Let’s see how to use the **Go To Definition** feature:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 **转到定义** 功能：
- en: In your preferred code editor, open the solution/folder named `Chapter01`.
  id: totrans-570
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您首选的代码编辑器中，打开名为 `Chapter01` 的解决方案/文件夹。
- en: 'If you are using Visual Studio:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用 Visual Studio：
- en: Navigate to **Tools** | **Options**.
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导航到 **工具** | **选项**。
- en: In the search box, enter `navigation to source`.
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在搜索框中输入 `navigation to source`。
- en: Select **Text Editor** | **C#** | **Advanced**.
  id: totrans-574
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择 **文本编辑器** | **C#** | **高级**。
- en: 'Clear the **Enable navigation to Source Link and Embedded sources** checkbox,
    and then click **OK**, as shown in *Figure 1.11*:'
  id: totrans-575
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 取消选择 **启用导航到源链接和嵌入源** 复选框，然后单击 **确定**，如图 *图 1.11* 所示：
- en: '![](img/B22322_01_11.png)'
  id: totrans-576
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_11.png)'
- en: 'Figure 1.11: Disabling Source Link for the Go To Definition feature'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：禁用“转到定义”功能的源链接
- en: Definitions can be either reverse-engineered from metadata or loaded from the
    original source code if that is enabled. Personally, I find the code from metadata
    more useful, as you are about to see. At the end of this section, try switching
    the Source Link option back on to see the difference.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 定义可以是反向工程自元数据，或者如果启用了原始源代码，则可以从原始源代码中加载。我个人发现来自元数据的代码更有用，正如您即将看到的。在本节末尾，尝试将Source
    Link选项切换回开启，以查看差异。
- en: 'In the `HelloCS` project, at the bottom of `Program.cs`, enter the following
    statement to declare an integer variable named `z`:'
  id: totrans-579
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`HelloCS`项目中，在`Program.cs`的底部，输入以下语句以声明一个名为`z`的整数变量：
- en: '[PRE35]'
  id: totrans-580
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Click on `int`, right-click on `int`, and then choose **Go To Definition** in
    Visual Studio or VS Code. In Rider, choose **Go to** | **Go to Declaration or
    Usages**.
  id: totrans-581
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Visual Studio或VS Code中，单击`int`，右键单击`int`，然后选择**转到定义**。在Rider中，选择**转到** | **转到声明或用法**。
- en: 'In the code window that appears, you can see how the `int` data type is defined,
    as shown in the following code:'
  id: totrans-582
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在出现的代码窗口中，您可以看到`int`数据类型的定义，如下面的代码所示：
- en: '[PRE36]'
  id: totrans-583
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can see that `int`:'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到`int`：
- en: Is defined using the `struct` keyword.
  id: totrans-585
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`struct`关键字定义。
- en: Is in the `System.Runtime` assembly.
  id: totrans-586
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于`System.Runtime`程序集中。
- en: Is in the `System` namespace.
  id: totrans-587
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于`System`命名空间中。
- en: Is named `Int32`.
  id: totrans-588
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 被命名为`Int32`。
- en: Is, therefore, an alias for the `System.Int32` type.
  id: totrans-589
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 因此，是`System.Int32`类型的别名。
- en: Implements interfaces such as `IComparable`.
  id: totrans-590
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现了`IComparable`等接口。
- en: Has constant values for its maximum (`2147483647`) and minimum (`-2147483648`)
    values.
  id: totrans-591
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有其最大值（`2147483647`）和最小值（`-2147483648`）的常量值。
- en: Has methods such as `Parse` (not visible in the preceding code).
  id: totrans-592
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包含`Parse`（在前面代码中不可见）等方法。
- en: Currently, the **Go To Definition** feature is not that useful to you because
    you do not yet know what all of this information means. By the end of the first
    part of this book, which consists of *Chapters 2* to *6* and teaches you about
    the C# language, you will know enough for this feature to become very handy.
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，**转到定义**功能对您来说并不那么有用，因为您还不知道所有这些信息意味着什么。在本书的第一个部分结束时，这部分包括*第2*章到*第6*章，并教授您C#语言，您将了解足够的信息，使此功能变得非常实用。
- en: 'In the code editor window, scroll down to find the `Parse` method with a single
    `string` parameter, as shown in the following code:'
  id: totrans-594
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码编辑器窗口中，向下滚动以找到具有单个`string`参数的`Parse`方法，如下面的代码所示：
- en: '[PRE37]'
  id: totrans-595
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Expand the code and review the comments that document this method, as shown
    in *Figure 1.12*:'
  id: totrans-596
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开代码并查看文档此方法的注释，如图*1.12*所示：
- en: '![](img/B22322_01_12.png)'
  id: totrans-597
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_12.png)'
- en: 'Figure 1.12: The comments for the Parse method with a single string parameter'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 图*1.12*：具有单个字符串参数的Parse方法的注释
- en: 'In the comments, you will see that Microsoft has documented the following:'
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 在注释中，您将看到Microsoft已记录以下内容：
- en: A summary that describes the method.
  id: totrans-600
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述方法的摘要。
- en: Parameters like the `string` value that can be passed to the method.
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以传递给方法的参数，例如`string`值。
- en: The return value of the method, including its data type.
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法返回值及其数据类型。
- en: Three exceptions that might occur if you call this method, including `ArgumentNullException`,
    `FormatException`, and `OverflowException`. Now, we know that we could choose
    to wrap a call to this method in a `try` statement and which exceptions to catch.
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您调用此方法可能会发生的三个异常，包括`ArgumentNullException`、`FormatException`和`OverflowException`。现在，我们知道我们可以选择在`try`语句中包装对此方法的调用，并捕获哪些异常。
- en: Configuring inline aka inlay hints
  id: totrans-604
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置内联提示，也称为内联提示。
- en: 'Throughout the code in this book, when calling a method, I often explicitly
    specify named parameters to help you learn what is going on. For example, I have
    specified the names of the parameters `format` and `arg0` in the following code:'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中的代码中，在调用方法时，我经常明确指定命名参数以帮助您了解正在发生的事情。例如，我在以下代码中指定了参数`format`和`arg0`的名称：
- en: '[PRE38]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '**Inline hints**, aka **inlay hints**, show the names of parameters without
    you having to type them, as shown in *Figure 1.13*:'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '**内联提示**，也称为**内联提示**，显示参数名称，而无需您输入它们，如图*1.13*所示：'
- en: '![](img/B22322_01_13.png)'
  id: totrans-608
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_13.png)'
- en: 'Figure 1.13: Configuring inline hints, aka inlay hints'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: 图*1.13*：配置内联提示，也称为内联提示
- en: 'Most code editors have this feature, which you can enable permanently or only
    when a key combination like *Alt* + *F1* or *Ctrl* is held down:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数代码编辑器都有此功能，您可以选择永久启用或仅在按下像*Alt* + *F1*或*Ctrl*这样的键组合时启用：
- en: In Visual Studio, navigate to `OK`.
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中，导航到`OK`。
- en: In VS Code, navigate to **File** | **Preferences** | **Settings**, search for
    `inlay`, select the **C#** filter, and then select the **Display inline parameter
    name hints** checkbox.
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在VS Code中，导航到**文件** | **首选项** | **设置**，搜索`inlay`，选择**C#**过滤器，然后选择**显示内联参数名称提示**复选框。
- en: In Rider, in **Settings**, navigate to **Editor** | **Inlay Hints** | **C#**
    | **Parameter Name Hints**.
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Rider中，在**设置**中，导航到**编辑器** | **内联提示** | **C#** | **参数名称提示**。
- en: Hopefully, you are getting impatient to learn what all this means!
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你现在迫不及待地想了解这一切的含义！
- en: Be patient for a little longer. You are almost at the end of this chapter, and
    in the next chapter, you will dive into the details of the C# language. But first,
    let’s see where else you can look for help.
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 再耐心一点。你几乎就要结束这一章了，在下一章中，你将深入探讨C#语言的细节。但首先，让我们看看你还可以在哪里寻求帮助。
- en: Looking for answers on Stack Overflow
  id: totrans-616
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Stack Overflow上寻找答案
- en: 'Stack Overflow is the most popular third-party website for getting answers
    to difficult programming questions. Let’s see an example:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: Stack Overflow 是获取困难编程问题答案最受欢迎的第三方网站。让我们看看一个例子：
- en: Start your favorite web browser.
  id: totrans-618
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动您喜欢的网络浏览器。
- en: Navigate to `stackoverflow.com`; in the search box, enter `securestring` and
    note the search results.
  id: totrans-619
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到`stackoverflow.com`；在搜索框中输入`securestring`，并注意搜索结果。
- en: Searching for answers using Google
  id: totrans-620
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Google搜索寻找答案
- en: 'You can search Google with advanced search options to increase the likelihood
    of finding what you need:'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用高级搜索选项来搜索Google，以增加找到所需信息的机会：
- en: 'Navigate to Google at the following link: [https://www.google.com/](https://www.google.com/).'
  id: totrans-622
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过以下链接导航到Google：[https://www.google.com/](https://www.google.com/).
- en: Search for information about `garbage collection` using a simple Google query,
    and note that you will probably see a lot of ads for garbage collection services
    in your local area before you see the Wikipedia definition of garbage collection
    in computer science!
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用简单的Google查询搜索有关`垃圾回收`的信息，并注意在你看到计算机科学中垃圾回收的维基百科定义之前，你可能会看到很多当地垃圾回收服务的广告！
- en: 'Improve the search by restricting it to a useful site such as Stack Overflow,
    by removing languages that we might not care about, such as C++, Rust, and Python,
    or by adding C# and .NET explicitly, as shown in the following search query:'
  id: totrans-624
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过限制到有用的网站（如Stack Overflow），移除我们可能不关心的语言（如C++、Rust和Python），或显式添加C#和.NET，来改进搜索，如下面的搜索查询所示：
- en: '[PRE39]'
  id: totrans-625
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Getting help on Discord and other chat forums
  id: totrans-626
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Discord和其他聊天论坛上寻求帮助
- en: Asking questions in programming forums and Discord channels is an art as much
    as it is a science. To maximize your chances of receiving a helpful answer, there’s
    a blend of clarity, specificity, and community awareness that you should aim for.
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 在编程论坛和Discord频道中提问是一门艺术，也是一种科学。为了最大限度地提高获得有用回答的机会，你应该追求清晰、具体和社区意识。
- en: 'Here are some tips for asking questions:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些提问的技巧：
- en: '**Ask in a public channel, not in private. Please do not direct message an
    author with a question or a friend request.** Remember, every question asked and
    answered builds the collective knowledge and resourcefulness of the whole community.
    Asking in public also allows other readers to help you, not just the author. The
    community that Packt and I have built around my books is friendly and smart. Let
    us *all* help you.'
  id: totrans-629
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在公共频道提问，而不是在私人频道。请不要直接给作者发消息提问或好友请求。** 记住，每个提问和回答都在构建整个社区的集体知识和资源。在公共频道提问也允许其他读者帮助你，而不仅仅是作者。Packt和我围绕我的书籍建立的社区既友好又聪明。让我们**所有人**来帮助你。'
- en: '**Research before asking**: It’s important to look for answers yourself before
    turning to the community. Use search engines, official documentation, and the
    search function within the forum or Discord server. This not only respects the
    community’s time but also helps you learn more effectively. Another place to look
    first is the errata and improvements section of the book, found at the following
    link: [https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md).'
  id: totrans-630
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提问前先进行调研**：在向社区求助之前，自己寻找答案是很重要的。使用搜索引擎、官方文档以及论坛或Discord服务器内的搜索功能。这不仅尊重了社区的时间，也有助于你更有效地学习。首先查找的地方还包括书籍的错误和改进部分，链接如下：[https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md](https://github.com/markjprice/cs13net9/blob/main/docs/errata/README.md).'
- en: '**Be specific and concise**: Clearly state what you’re trying to achieve, what
    you’ve tried so far, and where you’re stuck. A concise question is more likely
    to get a quick response.'
  id: totrans-631
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**具体且简洁**：清楚地说明你想要达到的目标、你已经尝试过的方法以及你遇到的问题。一个简洁的问题更有可能得到快速的回复。'
- en: '**Specify the book location**: If you are stuck on a particular part of the
    book, specify the page number and section title so that others can look up the
    context of your question.'
  id: totrans-632
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指定书籍位置**：如果你在书的某个特定部分遇到困难，请指定页码和章节标题，这样其他人就可以查找你问题的上下文。'
- en: '**Show your work**: Demonstrating that you’ve made an effort to solve the problem
    yourself not only provides context but also helps others understand your thought
    process and where you might have gone down a wrong path.'
  id: totrans-633
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**展示你的工作过程**：展示你已经努力自己解决问题，这不仅提供了上下文，还有助于他人理解你的思考过程以及你可能走错的道路。'
- en: '**Prepare your question**: Avoid too broad or vague questions. Screenshots
    of errors or code snippets (with proper formatting) can be very helpful.'
  id: totrans-634
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备你的问题**：避免过于宽泛或模糊的问题。错误截图或代码片段（格式正确）可能非常有帮助。'
- en: Oddly, I’ve been seeing more and more examples of readers taking photos of their
    screens and posting those. These are harder to read and limited in what they can
    show. It’s better to copy and paste the text of your code or the error message
    so that others can copy and paste it themselves. Alternatively, at least take
    a high-resolution screenshot instead of a photo with your phone camera at a jaunty
    angle!
  id: totrans-635
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 奇怪的是，我越来越多地看到读者拍照屏幕并发布这些照片。这些更难阅读，并且展示的内容有限。最好复制粘贴你的代码文本或错误信息，这样其他人也可以自己复制粘贴。或者，至少用手机摄像头以一个斜角度拍摄高分辨率截图！
- en: '**Format your code properly**: Most forums and Discord servers support code
    formatting using Markdown syntax. Use formatting to make your code more readable.
    For example, surround code keywords in single backticks, like `` `public void`
    ``, and surround code blocks with three backticks with optional language code,
    as shown in the following code:'
  id: totrans-636
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正确格式化你的代码**：大多数论坛和Discord服务器都支持使用Markdown语法进行代码格式化。使用格式化使你的代码更易于阅读。例如，用单行反引号包围代码关键字，如``
    `public void` ``，并用三行反引号包围代码块，可选地包含语言代码，如下面的代码所示：'
- en: '[PRE40]cs'
  id: totrans-637
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PRE40]cs'
- en: using static System.Console;
  id: totrans-638
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: using static System.Console;
- en: WriteLine("This is C# formatted code.");
  id: totrans-639
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '```WriteLine("这是C#格式的代码。");'
- en: '[PRE41]'
  id: totrans-640
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '**Good Practice**: After the three backticks that start a code block in Markdown,
    specify a language short name like`cs`**,** `csharp`**,** `js`**,** `javascript`**,**
    `json`**,** `html`**,** `css`**,** `cpp`**,** `xml`**,** `mermaid`**,** `python`**,**
    `java`**,** `ruby`**,** `go`**,** `sql`**,** `bash`**,** or `shell`**.**'
  id: totrans-641
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**良好实践**：在Markdown中开始代码块的三行反引号之后，指定一个语言简称，如`cs`**，** `csharp`**，`js`**，** `javascript`**，`json`**，`html`**，`css`**，`cpp`**，`xml`**，`mermaid`**，`python`**，`java`**，`ruby`**，`go`**，`sql`**，`bash`**，或`shell`**。'
- en: '**More Information**: To learn how to format text in Discord channel messages,
    see the following link: [https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline](https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline)**.**'
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多信息**：要了解如何在Discord频道消息中格式化文本，请参阅以下链接：[https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline](https://support.discord.com/hc/en-us/articles/210298617-Markdown-Text-101-Chat-Formatting-Bold-Italic-Underline)**。'
- en: '**Be polite and patient**: Remember, you’re asking for help from people who
    are giving their time voluntarily. A polite tone and patience while waiting for
    a response go a long way. Channel participants are often in a different time zone,
    so you may not see your question answered until the next day.'
  id: totrans-643
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**礼貌且耐心**：记住，你是在向那些自愿奉献时间的人寻求帮助。礼貌的语气和在等待回复时的耐心会大有帮助。频道参与者通常在不同的时区，所以你可能要到第二天才能看到有人回答你的问题。'
- en: '**Be ready to actively participate**: After asking your question, stay engaged.
    You might receive follow-up questions for clarification. Responding promptly and
    clearly can significantly increase your chances of getting a helpful answer. When
    I ask a question, I set an alarm for three hours later to go back and see if anyone
    has responded. If there hasn’t been a response yet, then I set another alarm for
    24 hours later.'
  id: totrans-644
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**准备好积极参与**：在提问后，保持参与。你可能会收到一些后续问题以澄清。迅速且清晰地回答可以提高你得到有用答案的机会。当我提问时，我会设置一个三小时后的闹钟，回来查看是否有人回答。如果还没有人回答，那么我会再设置一个24小时后的闹钟。'
- en: Incorporating these approaches when asking questions not only increases your
    likelihood of getting a useful response but also contributes positively to the
    community, by showing respect for others’ time and effort.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 在提问时采用这些方法不仅可以增加你获得有用回复的可能性，而且还可以积极贡献于社区，通过尊重他人的时间和努力。
- en: '**Good Practice**: Never just say “Hello” as a message on any chat system.
    You can read why at the following link: [https://nohello.net/](https://nohello.net/).
    Similarly, don’t ask to ask: [https://dontasktoask.com/](https://dontasktoask.com/).'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在任何聊天系统中，永远不要只说“Hello”作为消息。你可以在以下链接中阅读原因：[https://nohello.net/](https://nohello.net/)。同样，不要询问是否可以询问：[https://dontasktoask.com/](https://dontasktoask.com/)。'
- en: Searching the .NET source code
  id: totrans-647
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 .NET 源代码中搜索
- en: Sometimes, you can learn a lot from seeing how the Microsoft teams have implemented
    .NET. The source for the entire code base for .NET is available in public GitHub
    repositories. For example, you might know that there is a built-in attribute to
    validate an email address.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可以从看到微软团队如何实现 .NET 中学到很多东西。.NET 整个代码库的源代码可在公共 GitHub 存储库中找到。例如，你可能知道有一个内置的属性可以验证电子邮件地址。
- en: 'Let’s search the repositories for the word “email” and see if we can find out
    how it works:'
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们搜索存储库中的单词“email”，看看我们能否找出它是如何工作的：
- en: Use your preferred web browser to navigate to [https://github.com/search](https://github.com/search).
  id: totrans-650
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用你喜欢的网络浏览器导航到 [https://github.com/search](https://github.com/search)。
- en: Click **advanced search**.
  id: totrans-651
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **高级搜索**。
- en: In the search box, type `email`.
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中，输入 `email`。
- en: In the **In these respositories** box, type `dotnet/runtime`. (Other repositories
    that you might want to search include `dotnet/core`, `dotnet/aspnetcore`, `dotnet/wpf`,
    and `dotnet/winforms`.)
  id: totrans-653
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **这些存储库** 框中，输入 `dotnet/runtime`。 (你可能还想搜索的其他存储库包括 `dotnet/core`、`dotnet/aspnetcore`、`dotnet/wpf`
    和 `dotnet/winforms`。)
- en: In the **Written in this language** box, select **C#**.
  id: totrans-654
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **用此语言编写** 框中，选择 **C#**。
- en: 'At the top right of the page, note how the advanced query has been written
    for you. Click **Search**, then the **Code** filter, and note that the results
    include `EmailAddressAttribute`, as shown in *Figure 1.14*:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在页面右上角，注意高级查询是如何为你编写的。点击 **搜索**，然后点击 **代码** 过滤器，并注意结果包括 `EmailAddressAttribute`，如图
    *图 1.14* 所示：
- en: '![](img/B22322_01_14.png)'
  id: totrans-656
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_14.png)'
- en: 'Figure 1.14: Advanced search for email in the dotnet/runtime repository'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：在 dotnet/runtime 存储库中高级搜索 email
- en: 'Click the source file, and note that it implements email validation by checking
    that the `string` value contains an `@` symbol but not as the first or last character,
    as shown in the following code:'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击源文件，并注意它通过检查 `string` 值是否包含一个 `@` 符号（但不是作为第一个或最后一个字符）来实现电子邮件验证，如下面的代码所示：
- en: '[PRE42]'
  id: totrans-659
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Close the browser.
  id: totrans-660
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭浏览器。
- en: 'For your convenience, you can do a quick search for other terms by replacing
    the search term `email` in the following link: [https://github.com/search?q=%22email%22+repo%3Adotnet%2Fruntime+language%3AC%23&type=code&ref=advsearch](https://github.com/search?q=%22email%22+repo%3Adotnet%2Fruntime+language%3AC%23&type=code&ref=advsearch).'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 为了方便起见，你可以通过替换以下链接中的搜索词 `email` 来快速搜索其他术语：[https://github.com/search?q=%22email%22+repo%3Adotnet%2Fruntime+language%3AC%23&type=code&ref=advsearch](https://github.com/search?q=%22email%22+repo%3Adotnet%2Fruntime+language%3AC%23&type=code&ref=advsearch)。
- en: Source code in documentation
  id: totrans-662
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档中的源代码
- en: 'When you read API reference documentation, you often want to review the actual
    source code. For .NET APIs that have Source Link enabled, have an accessible PDB,
    and are hosted in a public GitHub repository, links to source code are included
    in the definition metadata. For example, the `String` class documentation page
    now has this new **Source** link, and its `IndexOf` method has a **Source** link
    to another of its source files, as shown in *Figure 1.15*:'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读 API 参考文档时，你通常会想查看实际的源代码。对于启用了 Source Link、具有可访问的 PDB 并且托管在公共 GitHub 存储库中的
    .NET API，源代码链接包含在定义元数据中。例如，`String` 类的文档页面现在有这个新的 **源** 链接，其 `IndexOf` 方法有一个指向另一个源文件的
    **源** 链接，如图 *图 1.15* 所示：
- en: '![A screenshot of a computer  Description automatically generated](img/B22322_01_15.png)'
  id: totrans-664
  prefs: []
  type: TYPE_IMG
  zh: '![计算机屏幕截图  自动生成的描述](img/B22322_01_15.png)'
- en: 'Figure 1.15: Documentation with links to source files'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：包含指向源文件链接的文档
- en: '[PRE43]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Official .NET blog, standups, and news
  id: totrans-667
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 官方 .NET 博客、站立会议和新闻
- en: 'To keep up to date with .NET, an excellent blog to subscribe to is the official
    .NET blog, written by the .NET engineering teams, and you can find it at the following
    link: [https://devblogs.microsoft.com/dotnet/](https://devblogs.microsoft.com/dotnet/).'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 要保持对 .NET 的最新了解，一个值得订阅的博客是官方 .NET 博客，由 .NET 工程团队撰写，你可以在以下链接找到它：[https://devblogs.microsoft.com/dotnet/](https://devblogs.microsoft.com/dotnet/).
- en: 'To watch .NET team members walk through previews of new features, you can watch
    monthly “standups,” available at the following link:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 要观看 .NET 团队成员介绍新功能的预览，你可以观看每月的“站立会议”，链接如下：
- en: '[https://dotnet.microsoft.com/en-us/live/community-standup](https://dotnet.microsoft.com/en-us/live/community-standup)'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://dotnet.microsoft.com/en-us/live/community-standup](https://dotnet.microsoft.com/en-us/live/community-standup)'
- en: 'You can subscribe to the latest .NET news at the following link:'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接订阅最新的 .NET 新闻：
- en: '[https://github.com/dotnet/core/discussions/categories/news](https://github.com/dotnet/core/discussions/categories/news)'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/dotnet/core/discussions/categories/news](https://github.com/dotnet/core/discussions/categories/news)'
- en: Watching Scott Hanselman’s videos
  id: totrans-673
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观看 Scott Hanselman 的视频
- en: 'Scott Hanselman from Microsoft has an excellent YouTube channel about computer
    stuff that they didn’t teach you at school: [http://computerstufftheydidntteachyou.com/](http://computerstufftheydidntteachyou.com/).'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 微软的 Scott Hanselman 拥有一个关于计算机知识的优秀 YouTube 频道，这些知识在学校里没有教过：[http://computerstufftheydidntteachyou.com/](http://computerstufftheydidntteachyou.com/).
- en: I recommend it to everyone working with computers.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 我推荐所有与计算机工作的人订阅。
- en: AI tools like ChatGPT and GitHub Copilot
  id: totrans-676
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AI 工具如 ChatGPT 和 GitHub Copilot
- en: One of the biggest changes in coding and development in the past few years is
    the emergence of generative **artificial intelligence** (**AI**) tools that can
    help with coding tasks, like completing a code statement, implementing an entire
    function, writing unit tests, and suggesting debugging fixes for existing code.
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，编码和开发最大的变化之一是生成式 **人工智能**（**AI**）工具的出现，这些工具可以帮助完成编码任务，如完成代码语句、实现整个函数、编写单元测试以及为现有代码提出调试修复建议。
- en: 'You can read what developers say about AI tools in the 2023 Stack Overflow
    Developer Survey: “44% of them use AI tools in their development process now,
    and 26% plan to soon” ([https://stackoverflow.blog/2023/06/14/hype-or-not-developers-have-something-to-say-about-ai/](https://stackoverflow.blog/2023/06/14/hype-or-not-developers-have-something-to-say-about-ai/)):'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以阅读开发者关于 2023 年 Stack Overflow 开发者调查中 AI 工具的看法：“44% 的开发者现在在他们的开发过程中使用 AI 工具，26%
    计划很快使用” ([https://stackoverflow.blog/2023/06/14/hype-or-not-developers-have-something-to-say-about-ai/](https://stackoverflow.blog/2023/06/14/hype-or-not-developers-have-something-to-say-about-ai/))：
- en: “From research to debugging to documentation, developers are using Generative
    AI to save time doing various tedious tasks at work. The biggest use case is writing
    code. This was how 82.55% of developers reported using Generative AI in the recent
    Stack Overflow Developer Survey.”
  id: totrans-679
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “从研究到调试再到文档，开发者正在使用生成式 AI 来节省时间，完成工作中各种繁琐的任务。最大的用例是编写代码。这是最近 Stack Overflow
    开发者调查中 82.55% 的开发者报告使用生成式 AI 的方式。”
- en: 'ChatGPT currently has several models for individuals: 4o mini (free), 4o (free
    but limited), and 4o with 5x more requests and other benefits, like early access
    to new features and DALL·E image generation ($20 per month). It also has pricing
    for enterprises. You can check their pricing at the following link: [https://openai.com/chatgpt/pricing/](https://openai.com/chatgpt/pricing/).'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 目前为个人提供几个模型：4o mini（免费）、4o（免费但有限）和 4o with 5x 更多的请求以及其他好处，如新功能的早期访问和
    DALL·E 图像生成（每月 20 美元）。它还为企业提供了定价。你可以在以下链接查看他们的定价：[https://openai.com/chatgpt/pricing/](https://openai.com/chatgpt/pricing/).
- en: ChatGPT example
  id: totrans-681
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT 示例
- en: 'Let’s say you need to write a C# function to validate an email address. You
    might go to ChatGPT and enter the following prompt:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你需要编写一个 C# 函数来验证电子邮件地址。你可能会去 ChatGPT 并输入以下提示：
- en: '[PRE44]'
  id: totrans-683
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'It responds with a complete class with methods, as shown in *Figure 1.16*:'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 它会响应一个包含方法的完整类，如图 *1.16* 所示：
- en: '![](img/B22322_01_16.png)'
  id: totrans-685
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_16.png)'
- en: 'Figure 1.16: ChatGPT writes a function to validate an email address'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：ChatGPT 编写验证电子邮件地址的函数
- en: 'It then provides an explanation of the code and examples of how to call the
    function, as shown in the following code:'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它提供了代码的解释和如何调用函数的示例，如下面的代码所示：
- en: '[PRE45]'
  id: totrans-688
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: But is a general-purpose generative AI like ChatGPT the best partner for a C#
    programmer?
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: 但像 ChatGPT 这样的通用生成式 AI 是否是 C# 程序员的最佳伴侣？
- en: GitHub Copilot for programmers
  id: totrans-690
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub Copilot 为程序员
- en: Microsoft has a service specifically for programmers, named GitHub Copilot,
    that can help autocomplete code directly in your code editor. It has plugins for
    code editors, including Visual Studio, VS Code, and JetBrains IntelliJ-based IDEs.
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 微软有一个专门为程序员提供的服务，名为 GitHub Copilot，它可以帮助你在代码编辑器中直接自动完成代码。它为代码编辑器提供了插件，包括 Visual
    Studio、VS Code 和基于 JetBrains IntelliJ 的 IDE。
- en: Personally, I really like the Copilot branding. It makes it clear that you are
    the pilot. You are ultimately responsible for “flying the plane.” But for the
    easy or boring bits, you can hand it over to your co-pilot for a bit, while being
    actively ready to take back control if needed.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 个人来说，我非常喜欢 Copilot 的品牌。它清楚地表明你是飞行员。你最终负责“驾驶飞机”。但对于简单或无聊的部分，你可以暂时交给你的副驾驶，同时保持随时准备接管控制。
- en: '**GitHub Copilot** is free for students, teachers, and some open-source project
    maintainers. For everyone else, it has a 30-day free trial, and then it costs
    $10 per month or $100 per year for individuals. Once you have an account, you
    can then sign up for waiting lists to get the more advanced experimental GitHub
    Copilot features.'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '**GitHub Copilot** 对学生、教师和一些开源项目维护者是免费的。对于其他人，它有一个 30 天的免费试用期，然后对个人用户每月收费 10
    美元或每年收费 100 美元。一旦你有了账户，你就可以注册等待名单，以获取更高级的实验性 GitHub Copilot 功能。'
- en: 'You should check online which Copilot features are available for various code
    editors. As you can imagine, this is a fast-changing world, and some of what I
    might write in the book today will be out of date by the time you read it: [https://github.com/features/copilot](https://github.com/features/copilot).'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在网上查看哪些 Copilot 功能适用于各种代码编辑器。正如你可以想象的那样，这是一个快速变化的世界，我今天在书中可能写的一些内容，在你阅读时可能已经过时了：[https://github.com/features/copilot](https://github.com/features/copilot)。
- en: 'JetBrains has its own GitHub Copilot equivalent, named AI Assistant, which
    you can read about at the following link: [https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/](https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/).'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains 有自己的 GitHub Copilot 对应产品，名为 AI Assistant，你可以在以下链接中了解更多信息：[https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/](https://blog.jetbrains.com/idea/2023/06/ai-assistant-in-jetbrains-ides/)。
- en: So what can GitHub Copilot do for you today?
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，GitHub Copilot 今天能为你做什么？
- en: 'Imagine that you have just added a new class file named `Product.cs`. You click
    inside the `Product` class, press *Enter* to insert a blank line, and then pause
    for a second as you think about what you need to type… and then GitHub Copilot
    generates some sample code in gray, as shown in *Figure 1.17*:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你刚刚添加了一个名为 `Product.cs` 的新类文件。你点击 `Product` 类内部，按 *Enter* 键插入一个空行，然后暂停一秒钟，思考你需要输入什么……然后
    GitHub Copilot 以灰色生成了一些示例代码，如图 *图 1.17* 所示：
- en: '![](img/B22322_01_17.png)'
  id: totrans-698
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B22322_01_17.png)'
- en: 'Figure 1.17: GitHub Copilot suggesting how to define a Product class'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：GitHub Copilot 建议如何定义一个 Product 类
- en: At this point, you can glance over the code and, if it is close to what you
    want, just press *Tab* to insert it all, or press *Alt* + *.* (dot) to toggle
    between other suggestions.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，你可以浏览一下代码，如果它接近你想要的样子，只需按 *Tab* 键插入全部内容，或者按 *Alt* + *.* (点) 在其他建议之间切换。
- en: Sometimes, it is too far from what you need, and you’d be better off ignoring
    its suggestion completely and just writing it yourself. But usually, there’s something
    there that’s usable or reminds you of the syntax you need to use. And sometimes,
    it feels like magic, writing dozens of lines of exactly what you need.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，它离你需要的功能太远，你最好完全忽略它的建议，自己写出来。但通常，其中会有一些可用的内容，或者能让你想起你需要使用的语法。有时，它感觉就像魔法一样，能写出几十行你正好需要的代码。
- en: Microsoft feeds its AI tools with code from public GitHub repositories, including
    all the repositories I have created since 2016 for all the editions of this book.
    This means that it can suggest code completions for the readers of this book that
    are surprisingly accurate predictions, including my frequent use of pop culture
    references in my code. It’s like I, Mark J. Price, am the “ghost in the machine”
    guiding your coding.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 微软用来自公共 GitHub 仓库的代码为其 AI 工具提供数据，包括我从 2016 年以来为本书所有版本创建的所有仓库。这意味着它可以对本书的读者提出代码补全建议，这些建议是惊人的准确预测，包括我在代码中频繁使用的流行文化引用。这就像我，马克·J·普莱斯，是“机器中的幽灵”，引导你的编码。
- en: It’s easy to imagine a custom ChatGPT that has ingested all the official Microsoft
    .NET documentation, every public blog article written about .NET, and perhaps
    even hundreds of books about .NET, and then having a conversation with it to find
    a bug or suggest how to solve a programming problem.
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易想象一个已经吸收了所有官方Microsoft .NET文档、所有关于.NET的公开博客文章，甚至可能是数百本关于.NET的书籍的定制ChatGPT，然后与之交谈以找到错误或提出解决编程问题的建议。
- en: 'You can sign up for GitHub Copilot at the following link: [https://github.com/github-copilot/signup/](https://github.com/github-copilot/signup/).'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接处注册GitHub Copilot：[https://github.com/github-copilot/signup/](https://github.com/github-copilot/signup/)。
- en: '**Good Practice**: Learn more about how to use Copilot as your coding GPS at
    the following link: [https://devblogs.microsoft.com/visualstudio/using-github-copilot-as-your-coding-gps/](https://devblogs.microsoft.com/visualstudio/using-github-copilot-as-your-coding-gps/).'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '**良好实践**：在以下链接中了解更多关于如何将Copilot作为您的编码GPS使用的信息：[https://devblogs.microsoft.com/visualstudio/using-github-copilot-as-your-coding-gps/](https://devblogs.microsoft.com/visualstudio/using-github-copilot-as-your-coding-gps/)。'
- en: 'Here are some more links about using AI for coding:'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于使用AI进行编码的更多链接：
- en: 'A Beginner’s Guide to Prompt Engineering with GitHub Copilot: [https://dev.to/github/a-beginners-guide-to-prompt-engineering-with-github-copilot-3ibp](https://dev.to/github/a-beginners-guide-to-prompt-engineering-with-github-copilot-3ibp)'
  id: totrans-707
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Copilot的提示工程入门指南：[https://dev.to/github/a-beginners-guide-to-prompt-engineering-with-github-copilot-3ibp](https://dev.to/github/a-beginners-guide-to-prompt-engineering-with-github-copilot-3ibp)
- en: 'The Register article about AI: [https://www.theregister.com/2024/01/27/ai_coding_automatic/](https://www.theregister.com/2024/01/27/ai_coding_automatic/)'
  id: totrans-708
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Register关于AI的文章：[https://www.theregister.com/2024/01/27/ai_coding_automatic/](https://www.theregister.com/2024/01/27/ai_coding_automatic/)
- en: 'StackOverflow 2024 survey – Code editor / IDE: [https://survey.stackoverflow.co/2024/technology#1-integrated-development-environment](https://survey.stackoverflow.co/2024/technology#1-integrated-development-environment)'
  id: totrans-709
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackOverflow 2024调查 – 代码编辑器/IDE：[https://survey.stackoverflow.co/2024/technology#1-integrated-development-environment](https://survey.stackoverflow.co/2024/technology#1-integrated-development-environment)
- en: 'StackOverflow 2024 survey – AI search tools: [https://survey.stackoverflow.co/2024/technology#1-ai-search-and-developer-tools](https://survey.stackoverflow.co/2024/technology#1-ai-search-and-developer-tools)'
  id: totrans-710
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: StackOverflow 2024调查 – AI搜索工具：[https://survey.stackoverflow.co/2024/technology#1-ai-search-and-developer-tools](https://survey.stackoverflow.co/2024/technology#1-ai-search-and-developer-tools)
- en: Disabling tools when they get in the way
  id: totrans-711
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关闭阻碍工作的工具
- en: Although these tools can be helpful, they can also get in your way, especially
    when learning, because they sometimes do work for you without telling you. If
    you do not do that work for yourself at least a few times, you won’t learn fully.
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这些工具可能很有帮助，但它们也可能阻碍您，尤其是在学习时，因为它们有时会为您完成工作而不通知您。如果您自己至少不这样做几次，您就不会完全学会。
- en: 'To configure IntelliSense for C# in Visual Studio:'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Visual Studio中配置C#的IntelliSense：
- en: Navigate to **Tools** | **Options**.
  id: totrans-714
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **选项**。
- en: In the **Options** dialog box tree view, navigate to **Text Editor** | **C#**
    | **IntelliSense**.
  id: totrans-715
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选项**对话框的树视图中，导航到**文本编辑器** | **C#** | **IntelliSense**。
- en: Click the **?** button in the caption bar to view the documentation.
  id: totrans-716
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击标题栏中的**？**按钮以查看文档。
- en: 'To configure GitHub Copilot in Visual Studio:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Visual Studio中配置GitHub Copilot：
- en: Navigate to **Tools** | **Options**.
  id: totrans-718
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到**工具** | **选项**。
- en: In the **Options** dialog box tree view, navigate to **GitHub** | **Copilot**.
  id: totrans-719
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**选项**对话框的树视图中，导航到**GitHub** | **Copilot**。
- en: Set **Enable Globally** to **True** or **False**, and then click **OK**.
  id: totrans-720
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将**全局启用**设置为**True**或**False**，然后点击**确定**。
- en: 'To disable GitHub Copilot in VS Code:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 要在VS Code中禁用GitHub Copilot：
- en: In the status bar, on the right, to the left of the notification icon, click
    the GitHub Copilot icon.
  id: totrans-722
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在状态栏的右侧，在通知图标左侧，点击GitHub Copilot图标。
- en: In the popup, click **Disable Globally**.
  id: totrans-723
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在弹出窗口中，点击**全局禁用**。
- en: To enable it, click the GitHub Copilot icon again and then click **Enable Globally**.
  id: totrans-724
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要启用它，再次点击GitHub Copilot图标，然后点击**全局启用**。
- en: 'For help with Rider IntelliSense, please see the following link: [https://www.jetbrains.com/help/rider/Auto-Completing_Code.html](https://www.jetbrains.com/help/rider/Auto-Completing_Code.html).'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 如需有关Rider IntelliSense的帮助，请参阅以下链接：[https://www.jetbrains.com/help/rider/Auto-Completing_Code.html](https://www.jetbrains.com/help/rider/Auto-Completing_Code.html)。
- en: Practicing and exploring
  id: totrans-726
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习和探索
- en: Let’s now test your knowledge and understanding by trying to answer some questions,
    getting some hands-on practice, and going into the topics covered throughout this
    chapter in greater detail.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在通过尝试回答一些问题、进行一些实际操作练习，并更深入地探讨本章涵盖的主题来测试您的知识和理解。
- en: Exercise 1.1 – Online material
  id: totrans-728
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.1 – 在线材料
- en: Online material can be extra content written by me for this book, or it can
    be references to content created by Microsoft or third parties.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 在线材料可以是我为本书编写的额外内容，也可以是引用微软或第三方创建的内容。
- en: Current versions of .NET
  id: totrans-730
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET 当前版本
- en: 'You can check what the latest version of .NET is for various platforms and
    what is officially supported at the following link: [https://versionsof.net](https://versionsof.net).'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中检查不同平台上的最新 .NET 版本以及官方支持的内容：[https://versionsof.net](https://versionsof.net)。
- en: 'If you need to know more about support for the legacy .NET Framework, you can
    read about it at the following link: [https://learn.microsoft.com/en-us/lifecycle/products/microsoft-net-framework](https://learn.microsoft.com/en-us/lifecycle/products/microsoft-net-framework).'
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要了解更多关于对旧版 .NET Framework 的支持信息，您可以在以下链接中阅读：[https://learn.microsoft.com/en-us/lifecycle/products/microsoft-net-framework](https://learn.microsoft.com/en-us/lifecycle/products/microsoft-net-framework)。
- en: Upgrade to a new .NET version
  id: totrans-733
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 升级到新的 .NET 版本
- en: '.NET releases new versions annually. Some developers begin upgrading as soon
    as a new version drops, while others prefer to wait until their current version
    reaches end-of-support. Upgrading involves several important considerations that
    you can read about at the following link:'
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: .NET 每年都会发布新版本。一些开发者在新版本发布后立即开始升级，而另一些开发者则更喜欢等到当前版本达到生命周期的结束支持阶段。升级涉及几个重要的考虑因素，您可以在以下链接中了解更多信息：
- en: '[https://learn.microsoft.com/en-us/dotnet/core/install/upgrade](https://learn.microsoft.com/en-us/dotnet/core/install/upgrade)'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://learn.microsoft.com/en-us/dotnet/core/install/upgrade](https://learn.microsoft.com/en-us/dotnet/core/install/upgrade)'
- en: freeCodeCamp and C# certification
  id: totrans-736
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: freeCodeCamp 和 C# 认证
- en: 'For many years, Microsoft had an exam for C# 5, *Exam 70-483: Programming in
    C#*. I taught hundreds of developers the skills needed to get qualified and pass
    it. Sadly, that exam was retired a few years ago.'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: '多年来，微软为 C# 5 开设了一门考试，即 *Exam 70-483: Programming in C#*。我教授了数百名开发者获得资格并通过该考试的技能。遗憾的是，该考试几年前已被取消。'
- en: 'In August 2023, Microsoft announced a new foundational certification for C#
    alongside a free 35-hour online course. You can read more about how to qualify
    for the certification at the following link:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 2023 年 8 月，微软宣布推出一个新的 C# 基础认证，并附带一个免费的 35 小时在线课程。您可以在以下链接中了解更多关于如何获得认证的信息：
- en: '[https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/)'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/](https://www.freecodecamp.org/learn/foundational-c-sharp-with-microsoft/)'
- en: 'C# certification signup: [https://aka.ms/learningseries/csharp/signup](https://aka.ms/learningseries/csharp/signup)'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: C# 认证注册：[https://aka.ms/learningseries/csharp/signup](https://aka.ms/learningseries/csharp/signup)
- en: Explore Polyglot Notebooks
  id: totrans-741
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索 Polyglot Notebooks
- en: 'Complete the following online-only section to explore how you can use Polyglot
    Notebooks with its .NET Interactive engine:'
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下仅在线部分，以探索如何使用 Polyglot Notebooks 和其 .NET Interactive 引擎：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-polyglot-notebooks.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-polyglot-notebooks.md)'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/ch01-polyglot-notebooks.md](https://github.com/markjprice/cs13net9/blob/main/docs/ch01-polyglot-notebooks.md)'
- en: Windows development
  id: totrans-744
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows 开发
- en: This book is about modern cross-platform development. But what about **graphical
    user interface (GUI)** development especially for Windows?
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: 本书是关于现代跨平台开发的。但对于 Windows 的 **图形用户界面（GUI）** 开发又该如何呢？
- en: 'You can read an article discussing this at the following link:'
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接中阅读一篇讨论此问题的文章：
- en: '[https://visualstudiomagazine.com/articles/2024/02/13/desktop-dev.aspx](https://visualstudiomagazine.com/articles/2024/02/13/desktop-dev.aspx)'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://visualstudiomagazine.com/articles/2024/02/13/desktop-dev.aspx](https://visualstudiomagazine.com/articles/2024/02/13/desktop-dev.aspx)'
- en: C# versus other languages
  id: totrans-748
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: C# 与其他语言比较
- en: 'Even Microsoft does not use C# and .NET for all its own development needs.
    You can read an interesting discussion about C# and Rust at the following link:'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是微软也不使用 C# 和 .NET 来满足其所有自身开发需求。您可以在以下链接中阅读有关 C# 和 Rust 的有趣讨论：
- en: '[https://www.reddit.com/r/dotnet/comments/1aezqmg/comment/ko8lnf2/](https://www.reddit.com/r/dotnet/comments/1aezqmg/comment/ko8lnf2/)'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.reddit.com/r/dotnet/comments/1aezqmg/comment/ko8lnf2/](https://www.reddit.com/r/dotnet/comments/1aezqmg/comment/ko8lnf2/)'
- en: 'The key quote at the preceding Reddit link is this:'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 之前Reddit链接中的关键引言是：
- en: “There’s been a lot of hype around Rust, and for good reason. But it’s a system
    language. It’s not like Microsoft is about to go rewrite millions and millions
    of lines of code and toss out C# (for anyone getting nervous ![](img/1.png)).
    They’re just being pragmatic and using an effective tool for the job.”
  id: totrans-752
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “关于Rust的炒作很多，而且有充分的理由。但它是系统语言。微软并不是要重写数百万行代码并丢弃C#（对于任何感到紧张的人来说！![img/1.png]）他们只是在做实用的事情，使用有效的工具来完成工作。”
- en: Free computer science course
  id: totrans-753
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 免费计算机科学课程
- en: 'Harvard CS50: Introduction to Computer Science: [https://pll.harvard.edu/course/cs50-introduction-computer-science](https://pll.harvard.edu/course/cs50-introduction-computer-science)'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 哈佛CS50：计算机科学导论：[https://pll.harvard.edu/course/cs50-introduction-computer-science](https://pll.harvard.edu/course/cs50-introduction-computer-science)
- en: .NET newsletters
  id: totrans-755
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET新闻通讯
- en: 'There are email newsletters that you can subscribe to get daily or weekly updates,
    hints, and tips. Some of the better ones include the following:'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: 有电子邮件新闻通讯你可以订阅，以获取每日或每周的更新、提示和技巧。其中一些较好的包括以下内容：
- en: 'Milan Jovanovic’s The .NET Weekly: [https://www.milanjovanovic.tech/blog](https://www.milanjovanovic.tech/blog)'
  id: totrans-757
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 米兰·约万诺维奇的《.NET周刊》：[https://www.milanjovanovic.tech/blog](https://www.milanjovanovic.tech/blog)
- en: 'C# Digest: [https://csharpdigest.net/](https://csharpdigest.net/)'
  id: totrans-758
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#摘要：[https://csharpdigest.net/](https://csharpdigest.net/)
- en: 'Alvin Ashcraft’s The Morning Dew: [https://www.alvinashcraft.com/](https://www.alvinashcraft.com/)'
  id: totrans-759
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阿尔文·阿什克罗夫特的《晨露》：[https://www.alvinashcraft.com/](https://www.alvinashcraft.com/)
- en: 'Mukesh’s .NET Newsletter: [https://newsletter.codewithmukesh.com/](https://newsletter.codewithmukesh.com/)'
  id: totrans-760
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mukesh的.NET新闻通讯：[https://newsletter.codewithmukesh.com/](https://newsletter.codewithmukesh.com/)
- en: 'JetBrains’ dotInsights: [https://www.jetbrains.com/lp/dotinsights-monthly/](https://www.jetbrains.com/lp/dotinsights-monthly/)'
  id: totrans-761
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JetBrains的dotInsights：[https://www.jetbrains.com/lp/dotinsights-monthly/](https://www.jetbrains.com/lp/dotinsights-monthly/)
- en: Exercise 1.2 – Practice exercises
  id: totrans-762
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.2 – 实践练习
- en: The following practice exercises will go deeper into the topics for this chapter.
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: 以下实践练习将更深入地探讨本章的主题。
- en: Practice C# anywhere with a browser
  id: totrans-764
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在任何地方使用浏览器练习C#
- en: 'You don’t need to download and install VS Code or even Visual Studio to write
    C#. You can start coding online at any of the following links:'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要下载和安装VS Code或甚至Visual Studio来编写C#。你可以在以下链接中的任何一个开始在线编码：
- en: 'SharpLab: [https://sharplab.io/](https://sharplab.io/)'
  id: totrans-766
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SharpLab：[https://sharplab.io/](https://sharplab.io/)
- en: 'C# Online Compiler | .NET Fiddle: [https://dotnetfiddle.net/](https://dotnetfiddle.net/)'
  id: totrans-767
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#在线编译器 | .NET Fiddle：[https://dotnetfiddle.net/](https://dotnetfiddle.net/)
- en: 'W3Schools C# Online Compiler: [https://www.w3schools.com/cs/cs_compiler.php](https://www.w3schools.com/cs/cs_compiler.php)'
  id: totrans-768
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: W3Schools C# 在线编译器：[https://www.w3schools.com/cs/cs_compiler.php](https://www.w3schools.com/cs/cs_compiler.php)
- en: Alpha versions of .NET
  id: totrans-769
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: .NET的Alpha版本
- en: 'You can (but probably shouldn’t) download future versions of .NET, including
    alpha versions from the following link:'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以（但可能不应该）从以下链接下载.NET的未来版本，包括alpha版本：
- en: '[https://github.com/dotnet/sdk/blob/main/documentation/package-table.md](https://github.com/dotnet/sdk/blob/main/documentation/package-table.md)'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/dotnet/sdk/blob/main/documentation/package-table.md](https://github.com/dotnet/sdk/blob/main/documentation/package-table.md)'
- en: '**Warning!** Alpha versions are designed to be used only internally by Microsoft
    employees. Beta versions (official previews) are designed to be used externally
    and become available from mid-February each year.'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '**警告！** Alpha版本仅设计供微软员工内部使用。Beta版本（官方预览版）设计供外部使用，并从每年2月中旬开始提供。'
- en: 'For more about using .NET 10 with this book, please see the following link:
    [https://github.com/markjprice/cs13net9/blob/main/docs/dotnet10.md](https://github.com/markjprice/cs13net9/blob/main/docs/dotnet10.md).'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于使用本书中的.NET 10的信息，请参阅以下链接：[https://github.com/markjprice/cs13net9/blob/main/docs/dotnet10.md](https://github.com/markjprice/cs13net9/blob/main/docs/dotnet10.md)。
- en: Exercise 1.3 – Test your knowledge
  id: totrans-774
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习1.3 – 测试你的知识
- en: 'Try to answer the following questions, remembering that although most answers
    can be found in this chapter, you should do some online research or code writing
    to answer others:'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试回答以下问题，记住尽管大多数答案可以在本章找到，但你应该进行一些在线研究或编写代码来回答其他问题：
- en: Is Visual Studio better than VS Code?
  id: totrans-776
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Visual Studio是否比VS Code更好？
- en: Are .NET 5 and later versions better than .NET Framework?
  id: totrans-777
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 5及以后的版本是否比.NET Framework更好？
- en: What is .NET Standard, and why is it still important?
  id: totrans-778
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET标准是什么，为什么它仍然很重要？
- en: Why can a programmer use different languages (for example, C# and F#) to write
    applications that run on .NET?
  id: totrans-779
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么程序员可以使用不同的语言（例如，C#和F#）来编写在.NET上运行的应用程序？
- en: What is a top-level program, and how do you access any command-line arguments?
  id: totrans-780
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是顶级程序，您如何访问任何命令行参数？
- en: What is the name of the entry point method of a .NET console app, and how should
    it be explicitly declared if you are not using the top-level program feature?
  id: totrans-781
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .NET 控制台应用程序的入口点方法叫什么名字，如果您不使用顶级程序功能，应该如何显式声明？
- en: What namespace is the `Program` class defined in with a top-level program?
  id: totrans-782
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用顶级程序时，`Program` 类定义在哪个命名空间中？
- en: Where would you look for help for a C# keyword?
  id: totrans-783
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会去哪里寻找 C# 关键字的帮助？
- en: Where would you look first for solutions to common programming problems?
  id: totrans-784
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你会首先在哪里寻找常见编程问题的解决方案？
- en: What should you do after getting AI to write code for you?
  id: totrans-785
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用 AI 为您编写代码之后，您应该做什么？
- en: '*Appendix*, *Answers to the Test Your Knowledge Questions*, is available to
    download from a link in the README file in the GitHub repository: [https://github.com/markjprice/cs13net9](https://github.com/markjprice/cs13net9).'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '*附录*，*测试你的知识问题的答案*，可以从 GitHub 仓库中的 README 文件中的链接下载：[https://github.com/markjprice/cs13net9](https://github.com/markjprice/cs13net9)。'
- en: Exercise 1.4 – Explore topics
  id: totrans-787
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 1.4 – 探索主题
- en: A printed book is a curated experience. I have tried to find the right balance
    of topics to include in this book. Other content that I have written can be found
    in the GitHub repository for this book.
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 一本印刷书是一种精选的体验。我试图找到合适的主题平衡，包括在这本书中。其他我写的相关内容可以在本书的 GitHub 仓库中找到。
- en: I believe that this book covers all the fundamental knowledge and skills a C#
    and .NET developer should have or be aware of. Some longer examples are best included
    as links to Microsoft documentation or third-party article authors.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这本书涵盖了 C# 和 .NET 开发者应该具备或了解的所有基本知识和技能。一些较长的示例最好作为链接包含在 Microsoft 文档或第三方文章作者的链接中。
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 使用下一页上的链接了解本章涵盖主题的更多详细信息：
- en: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-1---hello-c-welcome-net](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-1---hello-c-welcome-net)'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-1---hello-c-welcome-net](https://github.com/markjprice/cs13net9/blob/main/docs/book-links.md#chapter-1---hello-c-welcome-net)'
- en: Summary
  id: totrans-792
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we:'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们：
- en: Set up your development environment.
  id: totrans-794
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置你的开发环境。
- en: Discussed the similarities and differences between modern .NET, .NET Core, .NET
    Framework, Xamarin, and .NET Standard in an online article.
  id: totrans-795
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在一篇在线文章中讨论了现代 .NET、.NET Core、.NET Framework、Xamarin 和 .NET Standard 之间的相似之处和不同之处。
- en: Used Visual Studio and VS Code with the .NET SDK CLI to create a couple of simple
    console apps, grouped in a solution.
  id: totrans-796
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Visual Studio 和 VS Code 以及 .NET SDK CLI 创建了一些简单的控制台应用程序，并将它们分组在一个解决方案中。
- en: Learned how to download the solution code for this book from its GitHub repository.
  id: totrans-797
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了如何从其 GitHub 仓库下载这本书的解决方案代码。
- en: Learned how to find help. This could be in the traditional way, by using help
    command switches, documentation, and articles, or the modern way, by having a
    conversation with coding expert AI or using an AI-based tool to perform “grunt
    work.”
  id: totrans-798
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了如何寻找帮助。这可以通过传统方式，例如使用帮助命令开关、文档和文章，或者现代方式，通过与编码专家AI进行对话或使用基于AI的工具执行“苦力工作”来实现。
- en: In the next chapter, you will learn how to “speak” C#.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习如何“说”C#。
- en: Learn more on Discord
  id: totrans-800
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多信息
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the author, and learn about new releases – follow the QR code
    below:'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入这本书的 Discord 社区——在那里您可以分享反馈、向作者提问并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9)'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/csharp13dotnet9](https://packt.link/csharp13dotnet9)'
- en: '![](img/QR_Code281224304227278796.png)'
  id: totrans-803
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code281224304227278796.png)'
- en: Leave a Review!
  id: totrans-804
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 留下评论！
- en: Thank you for purchasing this book from Packt Publishing—we hope you enjoy it!
    Your feedback is invaluable and helps us improve and grow. Once you’ve completed
    reading it, please take a moment to leave an Amazon review; it will only take
    a minute, but it makes a big difference for readers like you.
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢您从 Packt Publishing 购买这本书——我们希望您喜欢它！您的反馈对我们来说是无价的，它帮助我们改进和成长。一旦您阅读完毕，请花一点时间在亚马逊上留下评论；这只需要一分钟，但对像您这样的读者来说意义重大。
- en: Scan the QR or visit the link to receive a free ebook of your choice.
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: 扫描二维码或访问链接以获取您选择的免费电子书。
- en: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/NzOWQ](https://packt.link/NzOWQ)'
- en: '![A qr code with black squares  Description automatically generated](img/review1.png)'
  id: totrans-808
  prefs: []
  type: TYPE_IMG
  zh: '![带有黑色方块的二维码  自动生成的描述](img/review1.png)'
