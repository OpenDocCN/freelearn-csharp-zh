- en: Primitives, Collections, LINQ, and More
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Building a .NET Standard 2.0 library that uses primitives
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a .NET console application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating collections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a WPF application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describing our library with Reflections
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a .NET Core console application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a .NET Standard 2.0 library that uses LINQ
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an ASP.NET MVC application to use the library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Readers should have a basic knowledge of C#. They should also have a basic knowledge
    of using Visual Studio, installing packages using NuGet, and referencing libraries
    within projects from other projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this chapter can be found on GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter02](https://github.com/PacktPublishing/DotNET-Standard-2-Cookbook/tree/master/Chapter02)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the code in action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://goo.gl/BiXiAM](https://goo.gl/BiXiAM)'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you look at C# as a language, there are things we need to look at first:
    what C# can do, how it supports our day-to-day programming requirements, and how
    it helps us to solve a problem. In this chapter, we will be mainly looking at
    primitive data types, collections, and LINQ features supported in C#. In the full
    .NET Framework, using these features is not a problem, but when it comes to cross-platform
    and code shared across flavors of the .NET Framework, it does becomes a concern.'
  prefs: []
  type: TYPE_NORMAL
- en: Each recipe will go through building a .NET Standard 2.0 library and how to
    use it with an application that uses a flavor of the .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Building a .NET Standard 2.0 library that uses primitives
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will have a look at C# primitives and their usage in a .NET
    Standard 2.0 library. Primitives are one of the core parts of the framework. These
    types are defined in the .NET Framework itself and not in the C# language specification.
  prefs: []
  type: TYPE_NORMAL
- en: We will be building a .NET Standard 2.0 library that uses primitives in the
    .NET Framework and use it in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned, primitive data types are defined under .NET Framework itself and
    it's not language specific. It means you can use these data types across all languages
    supported under .NET Framework. It doesn't mean you can use these primitives under
    different flavors of .NET Framework. For example, if a data type is defined under
    .NET Framework version 4.6.1, and it's not defined under .NET Core 2.0, your code
    will fail under .NET Core 2.0.
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure you have the latest version of Visual Studio, which is 2017
    at the time of writing.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane and
    select Blank Solution in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: text box, type `Chapter2.Primitives` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as they are.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c20399d7-b2e9-46c0-bb99-3574accc4395.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Primitives.
    Right-click and, select Add | New Project**.**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Class Library (.NET Standard):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2f43e866-6234-4fdb-bdc5-dbe41ad92b7c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Primitives.PrimitiveLib` and leave
    the Location: text box as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54e2fecb-0500-48be-95d4-ac805bbfefea.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/61ea9ea7-b0e1-4993-b1ae-81438b4c9e0c.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on Class1.cs and press *F2* to rename it. Type `Helpers.cs` as the new
    name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Yes in the confirmation dialog box for renaming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on `Helpers.cs` to open its code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following code in between the curly brackets of the `Helpers`class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Press *Ctrl* + *Shift* + *B* to build your code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Again, type the following code next to the ending curly bracket from step 14:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Let's build our code to check that everything is fine. Click Build | Build Solution or
    press *Ctrl* + *Shift* + *B* and the solution should build successfully. Let's
    test our class library in the next recipe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | Save All, or press *Ctrl* + *Shift* + *S,* to save the solution
    and the class library project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at what we have achieved so far. From steps 1 to 4, we opened
    Visual Studio 2017 and created a blank solution. Blank solutions are a very good
    foundation for a project that has multiple projects. In steps 5 to 10, we added
    a new project to the blank solution. In step 7, we used an existing base .NET
    Standard 2.0 project template and gave it a proper name in step 8.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 11 and 12, we changed the default `Class1.cs` to a meaningful name.
    These names are very important and it helps a developer to understand what the
    code is for inside that file. In this case, we chose `Chapter2.Primitives.PrimitiveLib` as
    the project name. The first two sections provide the solution name and, at the
    end, there is the actual project name.
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we created code that includes a public method. The method takes
    an `int` type variable as the parameter. `int` is a primitive data type that is
    supported in the framework itself, so we have used it inside a .NET Standard library.
    It means the code can be shared across .NET Framework, .NET Core, and Mono running
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data type `int` is an alias for `System.Int32` and these are the primitive
    types supported under .NET that can be used and shared in a .NET Standard 2.0
    library:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Boolean`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Byte`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SByte`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Int16`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UInt16`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Int32`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UInt32`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Int64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UInt64`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IntPtr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UIntPtr`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Char`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Double`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Single`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code takes a `char` variable and each `if` statement validates the marks
    sent through the `yourMarks` parameter in the method. Finally, the method returns
    a `char` value as the grade and then we confirmed all the syntax was correct and
    built successfully in step 15\. In step 16, we created another method that converts
    centimeters to inches. The input parameter is another primitive type called `double`,
    whichis also an alias for `System.Double`. This is because C# represents all primitives
    as objects. Inside the code, one variable already converts centimeters into inches
    and is stored as `oneCmToInches`**. **In the last line, we return the inches as
    `double`, converted from centimeters given in the parameter of the method.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we did another build to check all code for syntax and finally did
    a save all.
  prefs: []
  type: TYPE_NORMAL
- en: A .NET console application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we are going to do two things. First, we will be opening Visual
    Studio and doing a quick build of the previously built solution for the .NET Standard
    2.0 library. Finally, we will be adding a .NET console application to use the
    library. This console application will be using .NET Framework 4.6.1 as the base
    framework under Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you have completed the previous recipe that builds the .NET Standard
    2.0 library. We will be using it in this recipe. Open Visual Studio 2017 and prepare
    for the project. Click Build | Build Solution, or press *Ctrl* + *Shift* + *B*,and
    the solution should build successfully. Everything's ready for testing our class
    library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the Chapter2.Primitives solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the Chapter2.Library solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and then Console App (.NET Framework) in the
    right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a39cf4fe-46b0-4d02-a64a-9d0809d710ea.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Primitives.PrimitivesConsole` and
    leave the Location: text box as it is.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/13e8f526-ea8e-4513-94f5-3a39811fee8b.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'After adding the new project, the Solution Explorer (*Ctrl* + *Alt* + *L*)
    should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a6ba892c-9cf2-4c16-9014-163008c00383.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the References label in the Chapter2.Primitives.PrimitivesConsoleproject
    node. Right-click and select Add | Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, select Projects in the left-hand pane and check the Chapter2.Primitives.PrimitiveLibin
    the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a4442e5-962a-4e15-9ba0-e1dd14a478c6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK to add the reference to the selected project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the newly added console application project, double-click on Program.cs
    to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, scroll down and in between the curly braces of the `Main()` method, type
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now press *F5* to debug the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f99be648-880f-4319-bc7b-b5a44a781a70.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, press any key to exit the console, click just before the `Console.ReadLine()`
    line, and press *Enter* to add some new code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s type the following code now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Press *F5* to see the output and you should see the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/853b0f62-feaf-4c03-a40f-043f8f36ffa5.png)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have successfully tested the library, change some values and see
    how it works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In steps 1 to 7, we opened an existing Visual Studio solution and added a new
    project to it. The newly added project is a .NET-based console application. In
    steps 9 to 11, we added the reference to the .NET Standard 2.0 library project.
    This is an important step. To use the functionality in the library, you must add
    the project as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 13, we added code to use the libraries'' first method. The first line
    of code will define a variable to hold the instance of the `Helpers()` class.
    The `var` keyword helps you to create a local variable without giving an explicit
    type. It simply tells the compiler to get the type of variable from the expression
    on the right-hand side of the initialization statement. For example, see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the same as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The second line of code saves the return value from the `WhatIsMyGrade()` method.
    The next line will display the output to the console window. The last line will
    tell the console to wait till a key is pressed. In steps 14 and 15, we see the
    output of the code we wrote.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we are testing the second method inside the `Helpers()` class inside
    the .NET Standard 2.0 library we created. In the first line, we created a variable
    that stores a default value that needs to be converted. In the second line, it
    stores the converted output in a variable. Again, we have used the `var` keyword
    to store the variable, which will automatically store the value with the type
    returned from the method, in this case to a `System.Double`. The third line will
    display the output to the console window. In steps 18 and 19, we executed the
    console application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating collections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are three kind of collections supported inside the .NET Framework. In
    this recipe, we will be focusing on using these collections inside a .NET Standard
    2.0 library. In general, collections are used to manage groups of related objects.
    Creating arrays of objects is a way of grouping related objects. But our focus
    is on using these collections, which is the second method of grouping related
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the three kinds of collections we have in .NET Framework:'
  prefs: []
  type: TYPE_NORMAL
- en: '`System.Collections.Generic` Classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`System.Collections.Concurrent` Classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`System.Collections` Classes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's have a look at these and their usage inside a .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane, and
    then Blank Solution in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: text box, type `Chapter2.Collections` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as is they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/80f7e6d9-3b59-40d2-bb73-d424abf4ba74.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Collections.
    Right-click and select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Class Library (.NET Standard):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/eb794e35-3680-4d29-888f-895b453ccd3d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box type `Chapter2.Collections.CollectionsLib` and leave
    the Location: text box, as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/069f3d1e-745e-46e8-b167-ff7754aa9a8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12f5b8f1-dbfb-40bf-a472-d3b7d5dd5bd2.png)'
  prefs: []
  type: TYPE_IMG
- en: Click on the Class1.cs and press *F2* to rename it. Type `LittleShop.cs` as
    the new name.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Yes in the confirmation dialog box for renaming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now double-click on `LittleShop.cs` to open its code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At the top of the code window, move the cursor (or click the mouse) at the
    last line of the `using` directives and add the following `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following code in between the curly brackets of the `LittleShop`class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Let's press *Ctrl* + *Shift* + *B* for a quick build and check for any syntax
    errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now type the following code at the end of the `using` directives at the top
    of your code window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'At the end of the `GetFruitsList()` method, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Let's quickly hit a quick *Ctrl* + B to debug and check for syntax errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we are good to go and test the library.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see what's going on behind the scenes. From steps 1 to 4, we created the
    base for the project. This base will help you to create the .NET Standard 2.0
    library and the project that will be using that library. A blank solution is always
    a good starting point for any sort of project. In steps 5 to 10, we added the
    .NET Standard 2.0 library project to the blank solution and gave it a meaningful
    name. In steps 11 to 13, we changed the default class template name to a meaningful
    name.
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we created a reference to the `System.Collections.Generics` namespace.
    This will give you access to all the collections available under this namespace.
    In step 15, we used one generic collection object known as `List<T>`. In the next
    few lines, we added some string objects to the variable created. Finally, we returned
    the list collection, which is the same return type as the `GetFruitsList()` method.
    Then, in step 16, we did a quick build, and this will help us to check the syntax
    of the code. It's good practice to do a quick build for syntax checking.
  prefs: []
  type: TYPE_NORMAL
- en: Again, in step 17, we added another reference to the `System.Collections` namespace.
    Then, in step 18, we added a `public` method that returns an `ArrayList()`, which
    contains in  `System.Collections` namespace. In the first line of the `GetShopItems()` method,
    we are creating an instance of the `ArrayList()` object, and, in the next few
    lines, we are adding a string object to the `ArrayList()` using its `Add()` method.
    Finally, in the last line, we are returning the array list stored in the variable. Then,
    in step 19, we did a quick build, and this will help us to check the syntax of
    the code. It's good practice to do a quick build for syntax checking.
  prefs: []
  type: TYPE_NORMAL
- en: The last kind is the `System.Collections.Concurrent`namespace. This namespace
    contains collections that are thread safe. It means multiple threads can safely
    add or remove items from these collections.
  prefs: []
  type: TYPE_NORMAL
- en: A WPF application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating a Windows Presentation Foundation application
    to use the .NET Standard 2.0 library we created in the previous recipe. We will
    be continuing to build the application from the previous solution we created.
    Windows Presentation Foundation is a UI framework that works under .NET Framework
    and runs in a Windows OS.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017 and prepare for the project. Make sure you have completed
    building the .NET Standard 2.0 library in the preview build. Open that project
    if it's not already open and click Build | Build Solution, or press *Ctrl* + *Shift*
    + *B*,and the solution should build successfully. Everything's ready for testing
    our class library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the Chapter2.Collections solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the Chapter2.Collections solution label. Click File | Add | New
    Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Windows Classic Desktop and then WPF App (.NET Framework) in the right-hand
    pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1f8418ff-babb-41b1-94cd-cb36decccbe8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Name: text box, type `Chapter2.Collections.WPFLittleShop` as the name
    of the project and leave the Location: text box as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d9de6ce8-85ad-4159-a2b1-40aaab20827f.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L* to open) should look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/686e8ecb-694e-4ae7-a79a-845b5f6f61a7.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, double-click on the MainWindow.xaml to open the designer view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Tool Box by pressing *Ctrl* + *Alt* + *X* and drag and drop two Buttons
    and two List Boxes to the main window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Place them as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a25fcb29-fdb4-4db5-a4ac-fd2678e31701.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, open the Properties window, or press *F4*, and change the following properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| **Controler** | **Property** | **Value** |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button *(first from the left)* | Name | `FruitsButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button *(first from the left)* | Content | `Get Fruits` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button *(second from the left)* | Name | `ItemsButton` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Button *(second from the left)* | Content | `Get Items` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ListBox (first from the left)  | Name | `FruitsList` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| ListBox (second from the left) | Name | `ItemsList` |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: 'After applying the previous properties, the MainWindow should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/770fe6a7-65a2-4452-9df6-d5cb18b0f62f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), expand theChapter2.Collections.WPFLittleShop
    project tree.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click on the References label and select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Reference Manager dialog box, expand the Projects node in the left-hand
    pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, check Chapter2.Collections.CollectionsLib in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/aecd3e1c-474b-41c4-a86e-c414f0ba4d72.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the Get Fruits button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the `FruitsButton_Click()` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll up the code window and add the following `using` directive at the end
    of all the `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, scroll down and inside the `FruitsButton_Click()` method, write the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Switch back to the `MainWindow.xaml` design view by clicking on its tab or just
    double-clicking on the `MainWindow.xaml` label in the Solution Explorer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Get Items button and double-click on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now type the following code inside the `ItemsButton_Click()` event method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Let's press *F5* and debug the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the Get Fruits and Get Items buttons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should see output like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f23c37d3-b1e1-4b54-85dc-4f697f724814.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now we have a working WPF application that uses a .NET Standard 2.0 library
    as its source. Let's have a look at the steps we followed. In steps 1 to 7, we
    opened the previously built .NET Standard 2.0 library project and the solution.
    After that, we added a Windows Presentation Foundation project to the solution.
    As you know, WPF is a UI framework that runs on top of the .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: From steps 9 to 13, we just created the user interface for our application.
    Then, in step 12, we changed some default properties of the controls we added.
    Giving meaningful names is a very good practice as it helps you to build readable
    code. In step 20, we just double-clicked on a control, in this case the button,
    to open the code windows. By default, Visual Studio chooses an event for us. Mainly,
    it chooses a commonly used event and, in this case, it's the click event of the
    button.
  prefs: []
  type: TYPE_NORMAL
- en: In step 22, we referenced the .NET Standard 2.0 library to the code. This will
    allow you to access its available methods in the WPF application. In step 23,
    we have the actual running code for the button click event. In the first line,
    we created an instance of `LittleShop()` and stored it in a variable. Then we
    used the `GetFruitsList()` method to get the list of fruits and stored it in a
    variable. Then we looped through all the available items in the `fruits` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code for the `fruits`variable, there is a `List` collection.
    `foreach` will loop through each item inside the `List` collection stored in the
    `fruits` variable. And inside the loop, a `FruitsList` list box control adds each
    item in the `fruits` collection, which is stored in the `fruit` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: After we have added each item to the list box (`FruitsList`), we have added
    a string that displays the number of items in the `List` collection. We have used
    the `Count` property in the `List` collection to get that information. And, in
    the last line of code, we picked the `Capacity` of the `List` collection. The
    capacity property gets or sets the total number of elements the internal data
    structure can hold without resizing.
  prefs: []
  type: TYPE_NORMAL
- en: In step 26, we created an instance of the `LittleShop()` class and used the
    `GetShopItems()` method to get the items returned as an `ArrayList()`. Then we
    used a `for` loop to get the items inside the second list box. The rest is the
    same as we did with the `List` collection.
  prefs: []
  type: TYPE_NORMAL
- en: Describing our library with Reflections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be building a class object that will have two public
    methods. After using a console application, we will be describing this class object
    using Reflections. A Reflection gives you the ability to read its own metadata
    of finding assemblies, type, and module information at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure we have Visual Studio 2017 and all the updates installed. We will
    be starting with a blank solution. A blank solution is a very good starting point
    for any scale of project. Let's build our .NET Standard 2.0 library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane and
    then Blank Solution in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: text box, type `Chapter2.Reflections` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click Browse... button
    and select a location. Leave the defaults as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e94bbb65-3bb2-41c2-818d-80a471fe8c5e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Reflections.
    Right-click and select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the right-hand pane, select Class Library (.NET Standard):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/44ee992e-3c96-460b-adf5-2b95ce49e9ee.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Reflections.CalculatorLib` and leave
    the Location: text box as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c63ec722-e6e0-4e42-bd53-566d5c1a8a8e.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L* to open) should look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60c4ef83-e10d-4baf-ae96-95467761eabb.png)'
  prefs: []
  type: TYPE_IMG
- en: Select `Class1.cs` in the project tree and press *F2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rename `Class1.cs` as `Calculator.cs`, also making sure that you have done
    the same to the class name itself:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fd4c25cd-b407-4be3-b2af-f3d0f11846dc.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the code window, and in between the curly brackets of the `Calculator` class,
    write the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Let's do a quick build by pressing *Ctrl* + *Shift* + *B*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From steps 1 to 4, we created a blank solution. Then, from steps 5 to 9, we
    added a .NET Standard 2.0 library to the blank solution. In step 12, we renamed
    the existing `Class1.cs` that came with the template to something more meaningful.
    We also renamed the class name to match the filename. This is good practice and
    is also the default behavior of Visual Studio when you create a brand new class.
    We changed the name to `Calculator.cs` and the class name to `Calculator`.
  prefs: []
  type: TYPE_NORMAL
- en: In step 14, we added two simple methods to the `Calculator` class. The first
    method adds the given integers and the second method subtracts one integer from
    another. Finally, we did a quick build to check for syntax errors.
  prefs: []
  type: TYPE_NORMAL
- en: A .NET Core console application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at using Reflections in this recipe. We have built a small
    .NET Standard 2.0 library in the last recipe. Now we will be creating a .NET Core-based
    console application and use reflections to describe our library. We will be using
    the `System.Reflection` namespace and a few of its classes
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's make sure you have completed the previous recipe and, if not, complete
    it and come back to this one. Open Visual Studio 2017 and locate and open the
    previously built .NET Standard library.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now open the solution from the previous recipe. Click File | Open | Open Project/Solution, or
    press *Ctrl* + *Shift* + *O*, and select the `Chapter2.Reflections` solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now click on the Chapter2.Reflections solution label. Click File | Add | New
    Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select .NET Core and then Console App (.NET Core) in the right-hand pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0c898c7e-73d5-4051-9a68-deb0c32f76d1.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Reflections.ReflectCore` as the
    name of the project. The rest of the fields should be left as defaults:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3dfeac57-0137-4b0b-9179-7d09eb06ca14.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dcbb6288-addc-4e9a-94a9-5f073c78ddcb.png)'
  prefs: []
  type: TYPE_IMG
- en: Right-click on the Dependencies label in the Chapter2.Reflections.CalculatorLib.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Reference Manager, click on the Projects label in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the Chapter2.Reflections.CalculatorLibproject in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on Program.cs to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code window, scroll to the top of the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next to the last line of the `using` directives, add this `using` directive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, scroll down until you reach the `Main()` method and write the following
    code in between the curly brackets of the `Main()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s hit *F5* and see the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cc88f0b5-378c-44a2-85fe-0c8740cca464.png)'
  prefs: []
  type: TYPE_IMG
- en: Press any key to exit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at the steps and try to understand. In steps 1 to 3, we opened
    an existing solution that contained the .NET Standard 2.0 library. We did a quick
    build to check that all the syntax was OK and the project is compiling without
    any issues. In steps 4 to 8, we added a .NET Core console-based application to
    the project and gave it a proper name.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 10 to 14, we added a reference to the .NET Standard 2.0 library project
    from our .NET Core console application. In step 17, we added two namespaces to
    the `Program.cs` code. One is for accessing reflection classes, which are contained
    in the `System.Reflection` namespace. The other one is the .NET Standard 2.0 library
    itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 18, we added code to the `Program.cs`, `Main()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In the first line of code we have stored a `Calculator`class type into a variable
    named `info`, which is a type of `System.Reflections.MemberInfo()`. In the second
    line of code, we have accessed the of the assembly class name using a `Name` property,
    while again we have accessed the module name using a `Module.Name` property. The
    `Member Info()` class allows you to get information about the attributes of a
    member and provides access to member metadata:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding few lines of code, we have created an instance of the `Calculator()`
    class established inside the .NET Standard 2.0 library. In the second line, we
    stored the type of class. In the third line, we have a variable named methods
    to store all the available runtime methods inside that class. Since `GetRuntimeMethods()`
    is a collection, we can easily use a `foreach` statement to iterate through the
    collections. And finally, inside the `foreach()` statement we have output the
    name and the return type of each method available inside the `Calculator()` class.
  prefs: []
  type: TYPE_NORMAL
- en: At the end, we waited for the user to press any key to exit the console application.
  prefs: []
  type: TYPE_NORMAL
- en: In step *19*, in the output, you might have noticed that apart from the two
    public methods we have created, there are several more methods. These are coming
    from the base `Object` class itself.
  prefs: []
  type: TYPE_NORMAL
- en: Building a .NET Standard 2.0 library that uses LINQ
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be using LINQ inside our .NET Standard 2.0 library.
    LINQ stands for .NET Language-Integrated Query. LINQ defines a set of general
    purpose standard query operators: list, select, sort, and projection operators
    in any .NET-based programming language. The standard query operators allow queries
    to be applied to any `IEnumerable<T>`—based information source.
  prefs: []
  type: TYPE_NORMAL
- en: We will be building a .NET Standard 2.0 library that utilizes LINQ and use the
    library in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's get prepared by opening Visual Studio 2017 and creating a .NET Standard
    2.0 library-based project. We can start with a blank solution and later on add
    the library project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click File | New | Project and, in the New Project template dialog box, select Visual
    Studio Solutions under the Other Project Types node in the left-hand pane and
    then Blank Solution in the right-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Name: text box, type `Chapter2.Linq` as the name of the solution. Select
    a preferred location under the Location: drop-down list or click the Browse... button
    and select a location. Leave the defaults as they are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e4c790ae-563b-4ade-ae31-7783318dcab0.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the Solution Explorer (or press *Ctrl* + *Alt* + *L*), select Chapter2.Linq.
    Right-click and select Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project dialog box, expand the Visual C# node and select .NET
    Standard in the left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the right-hand pane, select Class Library (.NET Standard).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c7235a4-bef0-48a6-9177-339bafacb4ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Linq.QueriesLib` and leave the Location: text
    box as it is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/46570710-4850-4efd-be6d-5b3f7a2723ff.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L* to open) should look
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4446b8fd-d524-4b9c-8d92-2dfedb849cbe.png)'
  prefs: []
  type: TYPE_IMG
- en: Select Class1.cs in the project tree and press *F2*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rename `Class1.cs` as `TelephoneBook.cs`, also making sure that you have done
    the same to the class name itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Answer Yes in the confirmation dialog box for renaming.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93a2abd6-f0bd-4ca6-b21b-c5b4e582a334.png)'
  prefs: []
  type: TYPE_IMG
- en: Double-click the TelephoneBook.cs file to open the code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, scroll up to the top of the code window and add the following code next
    to the last line of the `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, scroll down till you reach the open curly bracket of the `TelephoneBook`
    class and add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the next line, add the following code as the `constructor` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Next to the constructor, add the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Again, add this code block at the end of the `GetContacts()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the following code block at the end of the `GetContactsByLastName()`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Now that we are done with adding code to the .NET Standard 2.0 library, let's
    hit *Ctrl* + *Shift* + *B* for a quick build and check for syntax errors.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From steps 1 to 4, we created a blank solution using Visual Studio 2017 and
    gave it a location and a proper meaningful name. Then, from steps 5 to 9, we added
    a new .NET Standard 2.0 library to the blank solution. As usual, we gave it a
    proper and meaningful name.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 12 and 13, we renamed the default `Class1.cs` template to `TelephoneBook.cs`.
    It's a good practice to keep both the class and filename the same. This is more
    readable and understandable when you come back to your code. In step 16, we added
    two namespaces to the code. `System.Collections.Generic` will get you the `List<T>`
    class used in the code and `System.Linq` gives you more control over those generic
    collections by allowing the LINQ functionality.
  prefs: []
  type: TYPE_NORMAL
- en: In step 17, we introduced a private variable type of `List<string>`. In step
    18, we initiated the variable and added some data to the list.  Everything is
    done inside the constructor of the `TelephoneBook()` class. In step 19, we created
    a method that returns the list of contacts. It has one line of code that returns
    the populated list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, in step 20, we created a method that takes a string as a parameter.
    The parameter is the last name and we have used LINQ queries in this line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: We have used a `Where` clause to filter down the list and used an inline function
    to pass the `lastName` parameter to the operation. Finally, we output the result
    as a list and returned the result at the end of the method.
  prefs: []
  type: TYPE_NORMAL
- en: In step 21, we created a method that ordered the list using LINQ. The `GetSortedContacts()`takes
    one Boolean parameter and it is optional. C# has supported optional parameters
    since C# 4.0.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The previous line of code uses the `OrderBy()` method in the list to order the
    list in ascending order and pass it as a list. If we need it in descending order,
    just pass the method parameter as `false`.
  prefs: []
  type: TYPE_NORMAL
- en: An ASP.NET MVC application to use the library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will be creating an ASP.NET MVC application to use the .NET
    Standard 2.0 library. This was created in the previous recipe. ASP.NET MVC applications
    run in Windows-based systems under IIS and use the full .NET Framework. We will
    be starting with an empty ASP.NET MVC project, before moving to its components
    and use of the library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Locate the previously built .NET Standard 2.0 library and make sure it builds
    without any errors. It is also assumed you have basic knowledge of MVC-based ASP.NET
    applications and are familiar with the terms Models, Views, and Controllers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio 2017.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, open the solution from the previous recipe. Click File | Open | **Open
    Project/Solution**, or press *Ctrl* + *Shift* + *O*, and select the Chapter2.Linq
    solution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *Shift* + *B* for a quick build to check that everything is fine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the Chapter2.Linq solution label. Click File | Add | New Project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Add New Project template dialog box, expand the Visual C# node in the
    left-hand pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Web and then ASP.NET Web Application (.NET Framework) in the right-hand
    pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/20a27ff5-8440-47b4-9efd-d52f03e50785.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in the Name: text box, type `Chapter2.Linq.QueriesMVC` as the name and
    leave the Location: text box at its default value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/abf53291-f64e-4a65-86f4-81520db37cf4.png)'
  prefs: []
  type: TYPE_IMG
- en: In the New ASP.NET Web Application dialog box, select Empty from the template
    list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select MVC as the Add folders and core references for: option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cddcabf-0bb7-45e7-b831-8569d4a9dc36.png)'
  prefs: []
  type: TYPE_IMG
- en: Leave the rest as it is and click OK to create the default ASP.NET MVC Web Application
    template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, Solution Explorer should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6e9e4007-12da-496d-a4df-d884af83963b.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the Controllers folder inside the Chapter2.Linq.QueriesMVC project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Add | Controller.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add Scaffold dialog box, select MVC 5 Controller - Empty:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/844d157d-f6a6-4d5a-9ce4-67c67e954f4b.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Add Controller dialog box, type `HomeController` as the name of the
    controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8a1937df-7064-41f2-8a42-6d206c147b2a.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, the Solution Explorer (press *Ctrl* + *Alt* + *L*) should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/070304a9-3490-43c0-9ef5-b6e8bed16785.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the References label and select Add Reference.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Reference Manager, select Projects and check Chapter2.Linq.QueriesLib from
    the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d012a394-ca29-4efa-bada-2018e2ca7894.png)'
  prefs: []
  type: TYPE_IMG
- en: Click OK.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, double-click on HomeController.cs in the Controllers folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the code window for HomeController.cs, scroll up and add the following code
    at the last line of the `using` directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the `Index()` action, before the `return` keyword, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the method name of the `Index()` method and select Add View:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a88b630b-98ca-45b6-8a5a-cb71f46d38c6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Add View dialog box, leave the defaults and click Add:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/09bdfcf0-0e0c-46ca-9c1e-c5f3dbad7a10.png)'
  prefs: []
  type: TYPE_IMG
- en: You will be presented with an `Index.cshtml` code window with the default template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the code `<h2>Index</h2>`as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now move the cursor to the bottom of the code window and add this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Let's press *F5* and test the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'By default, the browser will load `http://localhost:portnumber/Home/` and here
    is the output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/773addf4-9c10-4293-80a7-9438d60fb097.png)'
  prefs: []
  type: TYPE_IMG
- en: Now let's close the browser and switch back to the `HomeController.cs` code
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Right after the end curly bracket of the `Index()` action method, add the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Right-click on the method name of the `Search()` action and select Add View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow steps *26* and *27* to add the `Search.chtml` view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Search.chtml` code window, change the code `<h2>Search</h2>` to the
    following :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following code to `Search.chtml` after the `<h2>` tags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Let's press *F5* and debug the current code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `http://localhost:portnumber/Home/Search`in the browser address bar and
    press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/54913537-199c-43db-aa32-cd640d0d1616.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now again, type `http://localhost:portnumber/Home/Search?ln=Marrier` in the
    address bar and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cdda6873-2d9b-44f4-be7d-ef88c4be9987.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the browser and switch back to the `HomeController.cs` code window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code after the `Search()` action method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Right-click on the method name of the `SortedContacts()` action and select Add
    View.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Follow steps *26* and *27* to add the `SortedContacts.chtml` view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, in the `SortedContacts.chtml`, change `<h2>SortedContacts</h2>` to `<h2>Sorted
    Contacts</h2>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: At the end of the `<h2>` tags add the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Press *F5* to debug the current code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type`http://localhost:portnumber/Home/SortedContacts` in the address bar of
    the browser and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1dabb79c-f045-4a7e-913c-27d2bedec8d3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Again, type `http://localhost:51084/Home/SortedContacts?asc=false` in the address
    bar and press *Enter*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/026b9e17-9f8b-4341-bb56-85b280144ba5.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a look at the completed steps. From steps 1 to 3, we opened an existing
    solution, which was completed in the previous recipe. Then we did a quick build
    for syntax checking. From steps 4 to 6, we have added an ASP.NET Web Application
    project to the existing solution. In step 7, we gave it a proper name.
  prefs: []
  type: TYPE_NORMAL
- en: Later on, in steps 8 and 9, we decided what sort of ASP.NET Web Application
    it should be. In this case, we have selected MVC empty template. In steps 13 to
    15, we have added a Controller to the MVC application. We have selected an empty
    MVC 5 Controller.
  prefs: []
  type: TYPE_NORMAL
- en: In steps 19 to 21, we added the reference from the .NET Standard 2.0 library.
    In step 23, we referenced it at the code level. In step 24, in the first line
    of code, we created an instance of the `TelephoneBook()` class. In the second
    line, we invoked the `GetContacts()` method and stored it in `ViewBag.Contacts`.
    `ViewBag` is used to send data from the Controller to the View.
  prefs: []
  type: TYPE_NORMAL
- en: From steps 25 to 27, we added a View to the Controllers action method. In step
    28, we changed existing code in the `View` template created for us by Visual Studio.
    Then, we looped through the contacts using Razor syntax. In steps 30 and 31, we
    tested the code in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: From steps 31 to 50, we created views and tested other methods found in the
    `TelephoneBook()` class.
  prefs: []
  type: TYPE_NORMAL
