["```cs\nusing System;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace WWTravelClubDB\n{\n    public class MainDBContext: DbContext\n    {\n        public MainDBContext(DbContextOptions options)\n            : base(options)\n        {\n        }\n        protected override void OnModelCreating(ModelBuilder \n        builder)\n        {\n        } \n    }\n}\n```", "```cs\nnamespace WWTravelClubDB.Models\n{\n    public class Destination\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Country { get; set; }\n        public string Description { get; set; }\n    }\n}\n```", "```cs\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace WWTravelClubDB.Models\n{\n    public class Destination\n    {\n        public int Id { get; set; }\n        [MaxLength(128), Required]\n        public string Name { get; set; }\n        [MaxLength(128), Required]\n        public string Country { get; set; }\n        public string Description { get; set; }\n        public ICollection<Package> Packages { get; set; }\n    }\n}\n```", "```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nnamespace WWTravelClubDB.Models\n{\n    public class Package\n    {\n        public int Id { get; set; }\n        [MaxLength(128), Required]\n        public string Name { get; set; }\n        [MaxLength(128)]\n        public string Description { get; set; }\n        public decimal Price { get; set; }\n        public int DuratioInDays { get; set; }\n        public DateTime? StartValidityDate { get; set; }\n        public DateTime? EndValidityDate { get; set; }\n        public Destination MyDestination { get; set; }\n        public int DestinationId { get; set; }\n    }\n}\n```", "```cs\npublic DbSet<Package> Packages { get; set; }\npublic DbSet<Destination> Destinations { get; set; }\n```", "```cs\nbuilder.Entity<Destination>()\n    .HasMany(m => m.Packages)\n    .WithOne(m => m.MyDestination)\n    .HasForeignKey(m => m.DestinationId)\n    .OnDelete(DeleteBehavior.Cascade);\n```", "```cs\nbuilder.Entity<Package>()\n    .HasOne(m => m.MyDestination)\n    .WithMany(m => m.Packages)\n    .HasForeignKey(m => m.DestinationId)\n    .OnDelete(DeleteBehavior.Cascade);\n```", "```cs\nbuilder.Entity<T>()\n   .HasIndex(m => m.PropertyName);\n```", "```cs\nbuilder.Entity<T>()\n    .HasIndex(\"propertyName1\", \"propertyName2\", ...);\n```", "```cs\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    builder.Entity<Destination>()\n        .HasMany(m => m.Packages)\n        .WithOne(m => m.MyDestination)\n        .HasForeignKey(m => m.DestinationId)\n        .OnDelete(DeleteBehavior.Cascade);\n\n    builder.Entity<Destination>()\n        .HasIndex(m => m.Country);\n\n    builder.Entity<Destination>()\n        .HasIndex(m => m.Name);\n\n    builder.Entity<Package>()\n .HasIndex(m => m.Name);\n\n    builder.Entity<Package>()\n        .HasIndex(\"StartValidityDate\", \"EndValidityDate\");\n} \n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Design;\n\nnamespace WWTravelClubDB\n{\n    public class LibraryDesignTimeDbContextFactory\n        : IDesignTimeDbContextFactory<MainDBContext>\n    {\n        private const string connectionString =\n            @\"Server=(localdb)\\mssqllocaldb;Database=wwtravelclub;\n                Trusted_Connection=True;MultipleActiveResultSets=true\";\n        public MainDBContext CreateDbContext(params string[] args)\n        {\n            var builder = new DbContextOptionsBuilder<MainDBContext>();\n\n            builder.UseSqlServer(connectionString);\n            return new MainDBContext(builder.Options);\n        }\n    }\n}\n```", "```cs\nConsole.WriteLine(\"program start: populate database\");\nConsole.ReadKey();\n```", "```cs\nusing WWTravelClubDB;\nusing WWTravelClubDB.Models;\nusing Microsoft.EntityFrameworkCore;\nusing System.Linq;\n```", "```cs\nvar context = new LibraryDesignTimeDbContextFactory()\n    .CreateDbContext(); \n```", "```cs\nvar firstDestination= new Destination\n{\n    Name = \"Florence\",\n    Country = \"Italy\",\n    Packages = new List<Package>()\n    {\n        new Package\n        {\n            Name = \"Summer in Florence\",\n            StartValidityDate = new DateTime(2019, 6, 1),\n            EndValidityDate = new DateTime(2019, 10, 1),\n            DuratioInDays=7,\n            Price=1000\n        },\n        new Package\n        {\n            Name = \"Winter in Florence\",\n            StartValidityDate = new DateTime(2019, 12, 1),\n            EndValidityDate = new DateTime(2020, 2, 1),\n            DuratioInDays=7,\n            Price=500\n        }\n    }\n};\ncontext.Destinations.Add(firstDestination);\ncontext.SaveChanges();\nConsole.WriteLine(\n    \"DB populated: first destination id is \"+\n    firstDestination.Id);\nConsole.ReadKey();\n```", "```cs\nvar toModify = context.Destinations\n    .Where(m => m.Name == \"Florence\").FirstOrDefault();\n```", "```cs\nvar toModify = context.Destinations\n    .Where(m => m.Name == \"Florence\")\n    .Include(m => m.Packages)\n    .FirstOrDefault();\n```", "```cs\ntoModify.Description = \n  \"Florence is a famous historical Italian town\";\nforeach (var package in toModify.Packages)\n   package.Price = package.Price * 1.1m;\ncontext.SaveChanges();\n\nvar verifyChanges= context.Destinations\n    .Where(m => m.Name == \"Florence\")\n    .FirstOrDefault();\n\nConsole.WriteLine(\n    \"New Florence description: \" +\n    verifyChanges.Description);\nConsole.ReadKey();\n```", "```cs\nnamespace WWTravelClubDBTest\n{\n    public class PackagesListDTO\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public decimal Price { get; set; }\n        public int DuratioInDays { get; set; }\n        public DateTime? StartValidityDate { get; set; }\n        public DateTime? EndValidityDate { get; set; }\n        public string DestinationName { get; set; }\n        public int DestinationId { get; set; }\n        public override string ToString()\n        {\n            return string.Format(\"{0}. {1} days in {2}, price: \n            {3}\", Name, DuratioInDays, DestinationName, Price);\n        }\n    }\n}\n```", "```cs\nvar period = new DateTime(2019, 8, 10);\nvar list = context.Packages\n    .Where(m => period >= m.StartValidityDate\n    && period <= m.EndValidityDate)\n    .Select(m => new PackagesListDTO\n    {\n        StartValidityDate=m.StartValidityDate,\n        EndValidityDate=m.EndValidityDate,\n        Name=m.Name,\n        DuratioInDays=m.DuratioInDays,\n        Id=m.Id,\n        Price=m.Price,\n        DestinationName=m.MyDestination.Name,\n        DestinationId = m.DestinationId\n    })\n    .ToList();\nforeach (var result in list)\n    Console.WriteLine(result.ToString());\nConsole.ReadKey();\n```", "```cs\nint DBContext.Database.ExecuteSqlRaw(string sql, params object[] parameters)\n```", "```cs\ncontext.<mapped collection>.FromSqlRaw(string sql, params object[] parameters)\n```", "```cs\nvar results = context.Packages.FromSqlRaw(\"<some sql>\", par1, par2, ...).ToList();\n```", "```cs\nvar allPackages =context.Packages.FromSqlRaw(\n    \"SELECT * FROM Products WHERE Name = {0}\",\n    myPackageName)\n```", "```cs\nusing (var dbContextTransaction = context.Database.BeginTransaction())\n{\n    try{\n        ...\n        ...\n        dbContextTransaction.Commit();\n    }\n    catch\n    {\n        dbContextTransaction.Rollback();\n    }\n}\n```", "```cs\nif(!context.Destinations.Any())\n{\n    //populate here the Destinations table\n}\n```", "```cs\nmodelBuilder.Entity<MyEntity>().HasQueryFilter(m => <define filter condition here>);\n\n```", "```cs\nmodelBuilder.Entity<Package>().HasQueryFilter(m => !m.IsDeleted);\n```", "```cs\nmodelBuilder.Entity<Document>().HasQueryFilter(m => m.UserId == CurrentUserId);\n```"]