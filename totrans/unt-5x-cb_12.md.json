["```cs\n    using UnityEngine;\n    using System;\n    using System.Collections;\n\n    public class PickUp : MonoBehaviour {\n      public enum PickUpType {\n        Star, Health, Key\n      }\n\n      [SerializeField]\n      public PickUpType type;\n\n      public void SetSprite(Sprite newSprite){\n        SpriteRenderer spriteRenderer = GetComponent<SpriteRenderer>();\n        spriteRenderer.sprite = newSprite;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using System;\n    using UnityEditor;\n    using System.Collections.Generic;\n\n    [CanEditMultipleObjects]\n    [CustomEditor(typeof(PickUp))]\n    public class PickUpEditor : Editor\n    {\n      public Texture iconHealth;\n      public Texture iconKey;\n      public Texture iconStar;\n\n      public Sprite spriteHealth100;\n      public Sprite spriteKey100;\n      public Sprite spriteStar100;\n\n      UnityEditor.SerializedProperty pickUpType;\n\n      private Sprite sprite;\n      private PickUp pickupObject;\n\n      void OnEnable () {\n        iconHealth = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_heart_32.png\", typeof(Texture)) as Texture;\n        iconKey = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_key_32.png\", typeof(Texture)) as Texture;\n        iconStar = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_star_32.png\", typeof(Texture)) as Texture;\n\n        spriteHealth100 = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/healthheart.png\", typeof(Sprite)) as Sprite;\n        spriteKey100 = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_key_100.png\", typeof(Sprite)) as Sprite;\n        spriteStar100 = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/star.png\", typeof(Sprite)) as Sprite;\n\n        pickupObject = (PickUp)target;\n        pickUpType = serializedObject.FindProperty (\"type\");\n      }\n\n      public override void OnInspectorGUI()\n      {\n        serializedObject.Update ();\n\n        string[] pickUpCategories = TypesToStringArray();\n        pickUpType.enumValueIndex = EditorGUILayout.Popup(\"PickUp TYPE: \", pickUpType.enumValueIndex, pickUpCategories);\n\n        PickUp.PickUpType type = (PickUp.PickUpType)pickUpType.enumValueIndex;\n        switch(type)\n        {\n        case PickUp.PickUpType.Health:\n          InspectorGUI_HEALTH();\n          break;\n\n        case PickUp.PickUpType.Key:\n          InspectorGUI_KEY();\n          break;\n\n        case PickUp.PickUpType.Star:\n        default:\n          InspectorGUI_STAR();\n          break;\n        }\n\n        serializedObject.ApplyModifiedProperties ();\n      }\n\n      private void InspectorGUI_HEALTH()\n      {\n        GUILayout.BeginHorizontal();\n        GUILayout.FlexibleSpace();\n        GUILayout.Label(iconHealth);\n        GUILayout.Label(\"HEALTH\");\n        GUILayout.Label(iconHealth);\n        GUILayout.Label(\"HEALTH\");\n        GUILayout.Label(iconHealth);\n        GUILayout.FlexibleSpace();\n        GUILayout.EndHorizontal();\n\n        pickupObject.SetSprite(spriteHealth100);\n      }\n\n      private void InspectorGUI_KEY()\n      {\n        GUILayout.BeginHorizontal();\n        GUILayout.FlexibleSpace();\n        GUILayout.Label(iconKey);\n        GUILayout.Label(\"KEY\");\n        GUILayout.Label(iconKey);\n        GUILayout.Label(\"KEY\");\n        GUILayout.Label(iconKey);\n        GUILayout.FlexibleSpace();\n        GUILayout.EndHorizontal();\n\n        pickupObject.SetSprite(spriteKey100);\n      }\n\n      private void InspectorGUI_STAR()\n      {\n        GUILayout.BeginHorizontal();\n        GUILayout.FlexibleSpace();\n        GUILayout.Label(iconStar);\n        GUILayout.Label(\"STAR\");\n        GUILayout.Label(iconStar);\n        GUILayout.Label(\"STAR\");\n        GUILayout.Label(iconStar);\n        GUILayout.FlexibleSpace();\n        GUILayout.EndHorizontal();\n\n        pickupObject.SetSprite(spriteStar100);\n      }\n      private string[] TypesToStringArray(){\n        var pickupValues = (PickUp.PickUpType[])Enum.GetValues(typeof(PickUp.PickUpType));\n\n        List<string> stringList = new List<string>();\n\n        foreach(PickUp.PickUpType pickupValue in pickupValues){\n          string stringName = pickupValue.ToString();\n          stringList.Add(stringName);\n        }\n\n        return stringList.ToArray();\n      }\n    }\n    ```", "```cs\n    public int points;\n    ```", "```cs\n    UnityEditor.SerializedProperty points;\n    ```", "```cs\n    void OnEnable () {\n      points = serializedObject.FindProperty (\"points\");\n      pickUpType = serializedObject.FindProperty (\"type\");\n      // rest of method as before…\n    ```", "```cs\n    private void InspectorGUI_HEALTH(){\n      // beginning of method just as before…\n\n      pickupObject.SetSprite(spriteHealth100);\n\n    // now display Int Slider for points\n      points.intValue = EditorGUILayout.IntSlider (\"Health points\", points.intValue, 0, 100);\n    }\n    ```", "```cs\n    public string fitsLockTag;\n    ```", "```cs\n    UnityEditor.SerializedProperty fitsLockTag;\n    ```", "```cs\n    void OnEnable () {\n      fitsLockTag = serializedObject.FindProperty (\"fitsLockTag\");\n      points = serializedObject.FindProperty (\"points\");\n      pickUpType = serializedObject.FindProperty (\"type\");\n      // rest of method as before…\n    ```", "```cs\n    private void InspectorGUI_KEY() {\n      GUILayout.BeginHorizontal();\n      GUILayout.FlexibleSpace();\n      GUILayout.Label(iconKey);\n      GUILayout.Label(\"KEY\");\n      GUILayout.Label(iconKey);\n      GUILayout.Label(\"KEY\");\n      GUILayout.Label(iconKey);\n      GUILayout.FlexibleSpace();\n      GUILayout.EndHorizontal();\n\n      pickupObject.SetSprite(spriteKey100);\n\n      string[] tags = UnityEditorInternal.InternalEditorUtility.tags;\n      Array.Sort(tags);\n      int selectedTagIndex = Array.BinarySearch(tags, fitsLockTag.stringValue);\n      if(selectedTagIndex < 0)  selectedTagIndex = 0;\n      selectedTagIndex = EditorGUILayout.Popup(\"Tag of door key fits: \", selectedTagIndex, tags);\n\n      fitsLockTag.stringValue = tags[selectedTagIndex];\n    }\n    ```", "```cs\nif(\"Door\" == hitCollider.tag){\n  if(!OpenDoor(hitCollider.gameObject))\n    DoorNotOpenedAction();\n}\n```", "```cs\nprivate bool OpenDoor(GameObject doorGO){\n  // search for key to open the tag of doorGO\n  int colorKeyIndex = FindItemIndex(doorGO.tag);\n  if( colorKeyIndex > -1 ){\n    // remove key item from inventory List<>\n    inventory.RemoveAt( colorKeyIndex );\n\n    // now open the door...\n    DoorAnimationController doorAnimationController = doorGO.GetComponent<>(DoorAnimationController);\n    doorAnimationController.OpenDoor();\n\n    return true;\n  }\n\n  return false;\n}\n```", "```cs\nprivate int FindItemIndex(string doorTag){\n  for (int i = 0; i < inventory.Count; i++){\n    PickUp item = inventory[i];\n    if( (PickUp.PickUpType.Key == item.type) && (item.fitsLockTag == doorTag))\n      return i;\n  }\n\n  // not found\nreturn -1;\n}\n```", "```cs\n    using UnityEngine;\n    using UnityEditor;\n    using System.Collections;\n    using System;\n    public class MyGreatGameEditor : MonoBehaviour {\n      const float X_MAX = 10f;\n      const float Y_MAX = 10f;\n\n      static GameObject starPrefab;\n\n      [MenuItem(\"My-Great-Game/Make 100 stars\")]\n      static void PlacePrefabs(){\n        string assetPath = \"Assets/Prefabs/prefab_star.prefab\";\n        starPrefab = (GameObject)AssetDatabase.LoadMainAssetAtPath(assetPath);\n\n        int total = 100;\n        for(int i = 0; i < total; i++){\n          CreateRandomInstance();\n        }\n      }\n\n      static void CreateRandomInstance(){\n        float x = UnityEngine.Random.Range(-X_MAX, X_MAX);\n        float y = UnityEngine.Random.Range(-Y_MAX, Y_MAX);\n        float z = 0;\n        Vector3 randomPosition = new Vector3(x,y,z);\n\n        Instantiate(starPrefab, randomPosition, Quaternion.identity);\n      }\n    }\n    ```", "```cs\nstatic GameObject starContainerGO;\n\nstatic void CreateStarContainerGO() {\n  string containerName = \"Star-container\";\n  starContainerGO = GameObject.Find(containerName);\n  if (null != starContainerGO) \n    DestroyImmediate(starContainerGO);\n  starContainerGO = new GameObject(containerName);\n}\n```", "```cs\nstatic void PlacePrefabs(){\n  CreateStarContainerGO();\n\n  // rest of method as before ...\n}\n```", "```cs\nstatic void CreateRandomInstance() {\n  float x = UnityEngine.Random.Range(-X_MAX, X_MAX);\n  float y = UnityEngine.Random.Range(-Y_MAX, Y_MAX);\n  float z = 0;\n  Vector3 randomPosition = new Vector3(x,y,z);\n\n  GameObject newStarGO = (GameObject)Instantiate(starPrefab, randomPosition, Quaternion.identity);\n  newStarGO.transform.parent = starContainerGO.transform;\n}\n```", "```cs\nstatic void PlacePrefabs(){\n  string assetPath = \"Assets/Prefabs/prefab_star.prefab\";\n  starPrefab = (GameObject)AssetDatabase.LoadMainAssetAtPath(assetPath);\n\n  int total = 100;\n  for(int i = 0; i < total; i++){\n    CreateRandomInstance();\n    EditorUtility.DisplayProgressBar(\"Creating your starfield\", i + \"%\", i/100f);\n  }\n\n  EditorUtility.ClearProgressBar();\n}\n```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using UnityEditor;\n\n    [CustomEditor(typeof(ObjectBuilderScript))]\n    public class ObjectBuilderEditor : Editor{\n      private Texture iconStar;\n      private Texture iconHeart;\n      private Texture iconKey;\n\n      private GameObject prefabHeart;\n      private GameObject prefabStar;\n      private GameObject prefabKey;\n\n      void OnEnable () {\n        iconStar = Resources.LoadAssetAtPath(\"Assets/EditorSprites/icon_star_32.png\", typeof(Texture)) as Texture;\n        iconHeart = Resources.LoadAssetAtPath(\"Assets/EditorSprites/icon_heart_32.png\", typeof(Texture)) as Texture;\n        iconKey = Resources.LoadAssetAtPath(\"Assets/EditorSprites/icon_key_green_32.png\", typeof(Texture)) as Texture;\n\n        prefabStar = Resources.LoadAssetAtPath(\"Assets/Prefabs/star.prefab\", typeof(GameObject)) as GameObject;\n        prefabHeart = Resources.LoadAssetAtPath(\"Assets/Prefabs/heart.prefab\", typeof(GameObject)) as GameObject;\n        prefabKey = Resources.LoadAssetAtPath(\"Assets/Prefabs/key.prefab\", typeof(GameObject)) as GameObject;\n      }\n\n      public override void OnInspectorGUI(){\n        ObjectBuilderScript myScript = (ObjectBuilderScript)target;\n\n        GUILayout.Label(\"\");\n        GUILayout.BeginHorizontal();\n        GUILayout.FlexibleSpace();\n        GUILayout.Label(\"Click button to create instance of prefab\");\n        GUILayout.FlexibleSpace();\n        GUILayout.EndHorizontal();\n        GUILayout.Label(\"\");\n\n        GUILayout.BeginHorizontal();\n        GUILayout.FlexibleSpace();\n        if(GUILayout.Button(iconStar)) myScript.AddObjectToScene(prefabStar);\n        GUILayout.FlexibleSpace();\n        if(GUILayout.Button(iconHeart)) myScript.AddObjectToScene(prefabHeart);\n        GUILayout.FlexibleSpace();\n        if(GUILayout.Button(iconKey)) myScript.AddObjectToScene(prefabKey);\n        GUILayout.FlexibleSpace();\n        GUILayout.EndHorizontal();\n\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ObjectBuilderScript : MonoBehaviour {\n      void Awake(){\n        gameObject.SetActive(false);\n      }\n\n      public void AddObjectToScene(GameObject prefabToCreateInScene){\n        GameObject newGO = (GameObject)Instantiate(prefabToCreateInScene, transform.position, Quaternion.identity);\n        newGO.name = prefabToCreateInScene.name;\n      }\n    }\n    ```"]