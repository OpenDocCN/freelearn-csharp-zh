["```cs\n    public class SpaceShip\n    {\n\n    }\n    ```", "```cs\n    public class SpaceShip\n    {\n        public void ControlBridge()\n        {\n\n        }\n        public void MedicalBay(int patientCapacity)\n        {\n\n        }\n        public void EngineRoom(int warpDrives)\n        {\n\n        }\n        public void CrewQuarters(int crewCapacity)\n        {\n\n        }\n        public void TeleportationRoom()\n        {\n\n        }\n    }\n    ```", "```cs\n    public class Destroyer : SpaceShip\n    {\n\n    }\n    ```", "```cs\n    public class Destroyer : SpaceShip\n    {\n        public void WarRoom()\n        {\n\n        }\n        public void Armory(int payloadCapacity)\n        {\n\n        }\n\n        public void WarSpecialists(int activeBattalions)\n        {\n\n        }\n    }\n    ```", "```cs\n    public class Annihilator : Destroyer\n    {\n\n    }\n    ```", "```cs\n    public class Annihilator : Destroyer\n    {\n        public void TractorBeam()\n        {\n\n        }\n\n        public void PlanetDestructionCapability()\n        {\n\n        }\n    }\n    ```", "```cs\n    SpaceShip transporter = new SpaceShip();\n    transporter.ControlBridge();\n    transporter.CrewQuarters(1500);\n    transporter.EngineRoom(2);\n    transporter.MedicalBay(350);\n    transporter.TeleportationRoom();\n    ```", "```cs\n    Destroyer warShip = new Destroyer();\n    warShip.Armory(6);\n    warShip.ControlBridge();\n    warShip.CrewQuarters(2200);\n    warShip.EngineRoom(4);\n    warShip.MedicalBay(800);\n    warShip.TeleportationRoom();\n    warShip.WarRoom();\n    warShip.WarSpecialists(1);\n    ```", "```cs\n    Annihilator planetClassDestroyer = new Annihilator();\n    planetClassDestroyer.Armory(12);\n    planetClassDestroyer.ControlBridge();\n    planetClassDestroyer.CrewQuarters(4500);\n    planetClassDestroyer.EngineRoom(7);\n    planetClassDestroyer.MedicalBay(3500);\n    planetClassDestroyer.PlanetDestructionCapability();\n    planetClassDestroyer.TeleportationRoom();\n    planetClassDestroyer.TractorBeam();\n    planetClassDestroyer.WarRoom();\n    planetClassDestroyer.WarSpecialists(3);\n    ```", "```cs\n    public abstract class SpaceCadet\n    {\n        public abstract void ChartingStarMaps();\n        public abstract void BasicCommunicationSkill();\n        public abstract void BasicWeaponsTraining();\n        public abstract void Negotiation();\n    }\n    ```", "```cs\n    public abstract class SpacePrivate : SpaceCadet\n    {\n        public abstract void AdvancedCommunicationSkill();\n        public abstract void AdvancedWeaponsTraining();\n        public abstract void Persuader();\n    }\n    ```", "```cs\n    public class LabResearcher : SpaceCadet\n    {\n\n    }\n    ```", "```cs\n    public class LabResearcher : SpaceCadet\n    {\n        public override void BasicCommunicationSkill()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void BasicWeaponsTraining()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void ChartingStarMaps()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Negotiation()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public class PlanetExplorer : SpacePrivate\n    {\n\n    }\n    ```", "```cs\n    public class PlanetExplorer : SpacePrivate\n    {\n        public override void AdvancedCommunicationSkill()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void AdvancedWeaponsTraining()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void BasicCommunicationSkill()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void BasicWeaponsTraining()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void ChartingStarMaps()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Negotiation()\n        {\n            throw new NotImplementedException();\n        }\n\n        public override void Persuader()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public class LaunchShuttle\n    {\n        private double _EngineThrust;\n        private double _TotalShuttleMass;\n        private double _LocalGravitationalAcceleration;\n\n        private const double EarthGravity = 9.81;\n        private const double MoonGravity = 1.63;\n        private const double MarsGravity = 3.75;\n        private double UniversalGravitationalConstant;\n\n        public enum Planet { Earth, Moon, Mars }\n    }\n    ```", "```cs\n    public LaunchShuttle(double engineThrust, double totalShuttleMass, double gravitationalAcceleration)\n    {\n        _EngineThrust = engineThrust;\n        _TotalShuttleMass = totalShuttleMass;\n        _LocalGravitationalAcceleration = gravitationalAcceleration;\n\n    }\n\n    public LaunchShuttle(double engineThrust, double totalShuttleMass, Planet planet)\n    {\n        _EngineThrust = engineThrust;\n        _TotalShuttleMass = totalShuttleMass;\n        SetGraviationalAcceleration(planet);\n\n    }\n\n    public LaunchShuttle(double engineThrust, double totalShuttleMass, double planetMass, double planetRadius)\n    {\n        _EngineThrust = engineThrust;\n        _TotalShuttleMass = totalShuttleMass;\n        SetUniversalGravitationalConstant();\n        _LocalGravitationalAcceleration = Math.Round(CalculateGravitationalAcceleration (planetRadius, planetMass), 2);\n    }\n    ```", "```cs\n    private void SetGraviationalAcceleration(Planet planet)\n    {\n        switch (planet)\n        {\n             case Planet.Earth:\n                _LocalGravitationalAcceleration = EarthGravity;\n                break;\n             case Planet.Moon:\n                _LocalGravitationalAcceleration = MoonGravity;\n                break;\n             case Planet.Mars:\n                _LocalGravitationalAcceleration = MarsGravity;\n                break;\n            default:\n                break;\n        }\n    }\n    ```", "```cs\n    private void SetUniversalGravitationalConstant()\n    {\n        UniversalGravitationalConstant = 6.6726 * Math.Pow(10, -11);\n    }\n\n    private double CalculateThrustToWeightRatio()\n    {\n        // TWR = Ft/m.g > 1\n        return _EngineThrust / (_TotalShuttleMass * _LocalGravitationalAcceleration);\n    }\n\n    private double CalculateGravitationalAcceleration(double radius, double mass)\n    {\n        return (UniversalGravitationalConstant * mass) / Math.Pow(radius, 2);\n    }\n\n    public double TWR()\n    {\n        return Math.Round(CalculateThrustToWeightRatio(), 2);\n    }\n    ```", "```cs\n    double thrust = 220; // kN\n    double shuttleMass = 16.12; // t\n    double graviatatonalAccelerationEarth = 9.81;\n    double earthMass = 5.9742 * Math.Pow(10, 24);\n    double earthRadius = 6378100;\n    double thrustToWeightRatio = 0;\n    ```", "```cs\n    LaunchShuttle NasaShuttle1 = new LaunchShuttle(thrust, shuttleMass, graviatatonalAccelerationEarth);\n    thrustToWeightRatio = NasaShuttle1.TWR();\n    Console.WriteLine(thrustToWeightRatio);\n    ```", "```cs\n    LaunchShuttle NasaShuttle2 = new LaunchShuttle(thrust, shuttleMass, LaunchShuttle.Planet.Earth);\n    thrustToWeightRatio = NasaShuttle2.TWR();\n    Console.WriteLine(thrustToWeightRatio);\n\n    LaunchShuttle NasaShuttle3 = new LaunchShuttle(thrust, shuttleMass, earthMass, earthRadius);\n    thrustToWeightRatio = NasaShuttle3.TWR();\n    Console.WriteLine(thrustToWeightRatio);\n\n    Console.Read();\n    ```", "```cs\n    public abstract class Shuttle\n    {\n        public abstract double TWR();\n    }\n    ```", "```cs\n    public class NasaShuttle : Shuttle\n    {\n\n    }\n    ```", "```cs\n    public class NasaShuttle : Shuttle\n    {\n        public override double TWR()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public class RoscosmosShuttle : Shuttle\n    {\n\n    }\n    ```", "```cs\n    public class RoscosmosShuttle : Shuttle\n    {\n        public override double TWR()\n        {\n            throw new NotImplementedException();\n        }\n    }\n    ```", "```cs\n    public NasaShuttle(double engineThrust, double totalShuttleMass, double gravitationalAcceleration)\n    {\n\n    }\n\n    public NasaShuttle(double engineThrust, double totalShuttleMass, double planetMass, double planetRadius)\n    {\n\n    }\n    ```", "```cs\n    public class Starship\n    {\n\n    }\n    ```", "```cs\n    public void SetMaximumTroopCapacity(int capacity)\n    {            \n\n    }\n    ```", "```cs\n    try\n    {\n        // Read current capacity and try to add more\n    }\n    catch (Exception ex)\n    {\n        string connectionString = \"connection string goes here\";\n        string sql = $\"INSERT INTO tblLog (error, date) VALUES ({ex.Message}, GetDate())\";\n        using (SqlConnection con = new SqlConnection(connectionString))\n        {\n            SqlCommand cmd = new SqlCommand(sql);\n            cmd.CommandType = CommandType.Text;\n            cmd.Connection = con;\n            con.Open();\n            cmd.ExecuteNonQuery();\n        }\n        throw ex;\n    }\n    ```", "```cs\n    public class StarTrooper\n    {\n\n    }\n    ```", "```cs\n    public enum TrooperClass { Soldier, Medic, Scientist }\n    List<string> TroopSkill;\n\n    public List<string> GetSkills(TrooperClass troopClass)\n    {\n        switch (troopClass)\n        {\n            case TrooperClass.Soldier:\n            return TroopSkill = new List<string>(new string[] { \"Weaponry\", \"TacticalCombat\", \"HandToHandCombat\" });\n\n            case TrooperClass.Medic:\n            return TroopSkill = new List<string>(new string[] { \"CPR\", \"AdvancedLifeSupport\" });\n\n            case TrooperClass.Scientist:\n            return TroopSkill = new List<string>(new string[] { \"Chemistry\", \"MollecularDeconstruction\", \"QuarkTheory\" });\n\n            default:\n                return TroopSkill = new List<string>(new string[] { \"none\" });\n        }\n    }\n    ```", "```cs\n    public class Trooper\n    {\n        public virtual List<string> GetSkills()\n        {\n            return new List<string>(new string[] { \"none\" });\n        }\n    }\n    ```", "```cs\n    public class Soldier : Trooper\n    {\n        public override List<string> GetSkills()\n        {\n             return new List<string>(new string[] { \"Weaponry\", \"TacticalCombat\", \"HandToHandCombat\" });\n        }\n    }\n\n    public class Medic : Trooper\n    {\n        public override List<string> GetSkills()\n        {\n            return new List<string>(new string[] { \"CPR\", \"AdvancedLifeSupport\" });\n        }\n    }\n\n    public class Scientist : Trooper\n    {\n        public override List<string> GetSkills()\n        {\n            return new List<string>(new string[] { \"Chemistry\", \"MollecularDeconstruction\", \"QuarkTheory\" });\n        }\n    }\n    ```", "```cs\n    public class Engineer : Trooper\n    {\n    public override List<string> GetSkills()\n        {\n            return new List<string>(new string[] { \"Construction\", \"Demolition\" });\n        }\n    }\n    ```"]