- en: '9'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Uploading and Reading an Excel File
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many different scenarios that require a web app to allow users to
    upload local files. Also, there are just as many different types of files that
    a user may need to upload.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to upload different types of files by using
    the **InputFile** component. We will learn how to upload image files and how to
    resize the images that are uploaded. We will also learn how to perform virtualization
    by using the **Virtualize** component to only render the visible data. Finally,
    we will learn how to read a Microsoft Excel file by using the **Open XML SDK**.
  prefs: []
  type: TYPE_NORMAL
- en: The project that we create in this chapter will be an Excel reader that will
    allow us to upload an Excel file and view its contents in a table, using virtualization.
  prefs: []
  type: TYPE_NORMAL
- en: Decipher the parts
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: to read an Excel file –
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: not complicated!
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using virtualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reading Excel files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the Excel reader project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete this project, you need to have Visual Studio 2022 installed on your
    PC. For instructions on how to install the free Community Edition of Visual Studio
    2022, refer to *Chapter 1*, *Introduction to Blazor WebAssembly*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this chapter is available in the following GitHub repository:
    [https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Blazor-WebAssembly-by-Example-Second-Edition/tree/main/Chapter09).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Code in Action video is available here: [https://packt.link/Ch9](https://packt.link/Ch9).'
  prefs: []
  type: TYPE_NORMAL
- en: Uploading files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `InputFile` component is a built-in Blazor component that is used to upload
    files into a Blazor app. It renders an HTML `input` element of type `file` and
    supplies a stream for the contents of the file. It is in the `Microsoft.AspNetCore.Components.Forms`
    namespace.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `OnChange` event of the `InputFile` component is used to set the callback
    that gets invoked when a file is selected. This is an example of an `InputFile`
    component that invokes the `OnChangeHandler` method when a file is selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the resulting HTML markup from the preceding example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding HTML markup, the `_bl_2` attribute is used for Blazor’s internal
    processing, but everything else is a typical `input` element. The `accept` attribute
    is used to filter the types of files that are displayed in the **Select File**
    dialog.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows how the preceding markup is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18471_09_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.1: Rendered InputFile component'
  prefs: []
  type: TYPE_NORMAL
- en: 'When the **Choose File** button of the `InputFile` component is clicked, the
    **Select File** dialog opens to allow the user to select a file. This is a screenshot
    of the **Select File** dialog:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18471_09_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.2: Select File dialog'
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: Although we have indicated that only files of type `image/png` and `image/jpg`
    should be accepted, the **Select File** dialog allows the user to select **All
    files (*.*)** via the file type selector. Therefore, there is never any guarantee
    concerning the type of file that the user has selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `InputFileChangeEventArgs` class is used to supply information about the
    `OnChange` event being raised. The following code sets the `selectedFile` field
    to the value of the `File` property of the `InputFileChangeEventArgs` object,
    provided to the `OnChangeHandler` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `File` property represents the uploaded file and is of type `IBrowserFile`.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the properties of the `IBrowserFile` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ContentType` – the MIME type of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LastModified` – the last modified date of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Name` – the name of the file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Size` – the size of the file in bytes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: You should never trust a file that is uploaded from the internet. You should
    treat it as a potential security risk to your app, server, and network. The `ContentType`,
    `LastModified`, `Name`, and `Size` properties can all be manipulated to cause
    your system harm and cannot be trusted.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `IBrowserFile` interface only has one method. It is the `OpenReadStream`
    method that is used to read the uploaded file. By default, the maximum size of
    the stream is 500 KB. However, the `maxAllowedSize` parameter can be used to increase
    the maximum size of the stream. In the following example, the maximum size of
    the stream is set to the value of `MAXFILESIZE`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Resizing images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Images can be quite large. Sometimes we need to restrict the size of images
    that are allowed to be uploaded into an application. In those cases, we can use
    the `RequestImageFileAsync` method to resize the image. These are the parameters
    of the `RequestImageFileAsync` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Format` – the format of the new image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MaxWidth` – the maximum width of the new image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MaxHeight` – the maximum height of the new image'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: The `RequestImageFileAsync` method does not verify that the image is a valid
    one. Therefore, any results should be treated as untrustworthy.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the `RequestImageFileAsync` method, the image is resized using the
    provided dimensions while preserving the aspect ratio of the original image. The
    following `UploadImage` component resizes the uploaded image:'
  prefs: []
  type: TYPE_NORMAL
- en: '**UploadImage.razor**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses the `RequestImageFileAsync` method to resize the image
    to 100 x 100 pixels. It uses the `OpenReadStream` method to read the file, which
    is then encoded into a `Base64` string. Finally, the image’s original size, the
    resized image’s new size, and the resized image itself are all rendered when the
    value of the `image` property is no longer `null`.
  prefs: []
  type: TYPE_NORMAL
- en: '**TIP**'
  prefs: []
  type: TYPE_NORMAL
- en: Although our example reads the file directly into memory, we recommend that
    you copy the stream directly into a file on disk or upload the file to an external
    service, such as Azure Blob Storage.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot that uses the **Upload Image** page to upload a very large
    photo, taken on a trip we took to St John, USVI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18471_09_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.3: Upload Image results'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding example, we were able to reduce the size of the file from 6,413,880
    bytes to 4,719 bytes.
  prefs: []
  type: TYPE_NORMAL
- en: Handling multiple files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, the `InputFile` component only allows for a single file to be selected.
    However, the `InputFile` component can be used to upload multiple files by using
    the `multiple` attribute, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: When using the `multiple` attribute, the `FileCount` property of `InputFileChangeEventArgs`
    is used to determine the number of files that have been uploaded. When allowing
    for the upload of multiple files, instead of using the `File` property to access
    the files, we use the `GetMultipleFiles` method of `InputFileChangeEventArgs`
    to loop through the list of files that have been uploaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, the `GetMultipleFiles` method is used to return the
    list of files that were selected. The list of files is then looped through using
    a `foreach` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: You cannot add files to the list of files that have been selected. Each time
    `InputFile` is used, the previous list of files is replaced by the new list of
    files.
  prefs: []
  type: TYPE_NORMAL
- en: The `InputFile` component can be used to upload one or more files at a time
    to a Blazor WebAssembly app by using the `multiple` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The `InputFile` component can be used to upload many different types of files,
    such as Excel files and image files. By using the `RequestImageFileAsync` method,
    we can resize the images that are uploaded. We can use the `multiple` attribute
    to allow users to upload multiple files.
  prefs: []
  type: TYPE_NORMAL
- en: Using virtualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are times when we need to work with a large collection of items. In those
    cases, it is not efficient to render each item. It is much more efficient to only
    render a subset of the items. This technique is called **virtualization**.
  prefs: []
  type: TYPE_NORMAL
- en: The built-in `Virtualize` component is used to render the visible items of a
    collection. Specifically, it is used when we are using a loop to render a collection
    of items and using scrolling to limit the number of items visible at any given
    moment. The `Virtualize` component calculates the list of visible items and only
    renders those items. Since it does not render items that are invisible, it is
    more performant than using a method that renders every item in the collection.
    It can be found in the `Microsoft.AspNetCore.Components.Web.Virtualization` namespace.
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: When using the `Virtualize` component, all the items must be the same height
    in pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Virtualize<TItem>` class includes the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ItemContent` – the item template. It is only required when using the `Placeholder`
    property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Items` – the collection of items. This property cannot be used in conjunction
    with the `ItemsProvider` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemSize` – the height of each item in pixels. The default is 50 pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ItemsProvider` – the function that asynchronously retrieves the collection
    of items. This property cannot be used in conjunction with the `Items` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`OverscanCount` – the number of items that should be rendered before and after
    the visible region. When scrolling, this will help to reduce the amount of rendering.
    The default is 3.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Placeholder` – the content that is rendered while the component is waiting
    for the items to be provided by `ItemsProvider`. This property cannot be used
    in conjunction with the `Items` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SpacerElement` – the type of element used to display each item. The default
    is `div`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Near our home, there is a weather station that continuously records the current
    temperature and humidity. There are thousands of data points collected every day.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the `Weather` class used to collect the data from the weather station:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code will display each of the data points using a `foreach` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, although the `foreach` loop is within a `div` element
    that limits the number of rows that are displayed, the UI still needs to render
    all the rows before returning control to the user. Since the collection of `Weather`
    objects contains thousands of records, the user will experience some lag while
    waiting for the UI to render all the rows. We can use the `Virtualize` component
    to only render the data that is being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering Local Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code uses the `Virtualize` component instead of a `foreach` loop
    to render the data from memory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will allow the page to load faster because only the rows
    that are visible within the `div` element are rendered. The `Virtualize` component
    calculates the number of items that can fit inside the container and only renders
    those items. As the user scrolls through the items, the `Virtualize` component
    determines which items need to be rendered and renders them.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering Remote Data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code uses the `ItemsProvider` method to fetch the list of items
    to be rendered from a remote data source:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, the `LoadWeather` method is invoked when the `Virtualize`
    component needs to update the list of `Weather` objects that are being rendered.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simple implementation of the `LoadWeather` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `LoadWeather` method takes `ItemsProviderRequest`
    and returns `ItemsProviderResult`. The important thing to note is that `ItemsProviderRequest`
    includes both a `StartIndex` property and a `Count` property. `StartIndex` is
    the start index of the data requested and `Count` is the number of items requested.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter’s project, we will read the values from an Excel spreadsheet
    that is uploaded into our application. Therefore, we need to learn how to read
    from an Excel spreadsheet.
  prefs: []
  type: TYPE_NORMAL
- en: Reading Excel files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can read and write to Microsoft Excel files using the `Open XML SDK`. It
    provides the tools for us to work with not only Excel files but also Word and
    PowerPoint files. To use the `Open XML SDK`, we need to add the `DocumentFormat.OpenXml
    NuGet` package to our project.
  prefs: []
  type: TYPE_NORMAL
- en: Modern Excel files with the XLSX file extension are made up of a compressed
    collection of XML files. To view the individual files, change the file extension
    from XLSX to ZIP and view the files using a `.zip` viewer. You can also extract
    the files.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using the `Open XML SDK`, the Excel document is represented with the `SpreadsheetDocument`
    class. This is the hierarchy of the elements in the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`workbook` – the root element of the document'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sheets` – the container for the sheets'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sheet` – the pointer to the sheet definition file'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`worksheet` – the sheet definition that contains the sheet data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sheetData` – the data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`row` – a row of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c` – a cell within a row of data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v` – the value of a cell'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To demonstrate the format of an Excel file, we have created a sample Excel file
    titled `Sample.xlsx`. The sample workbook includes two worksheets. The first worksheet
    is titled **Numbers** and the second one is titled **Welcome**. The **Numbers**
    worksheet includes two rows of numbers, and the **Welcome** worksheet includes
    the string **Hello World** in cell A1.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a screenshot of the `Sample.xlsx` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18471_09_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.4: Sample.xlsx'
  prefs: []
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs: []
  type: TYPE_NORMAL
- en: You can download a copy of `Sample.xlsx` from the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we change the filename of `Sample.xlsx` to `Sample.zip` and extract all
    the files, this is the resulting file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing text  Description automatically generated](img/B18471_09_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.5: File structure of Sample.zip'
  prefs: []
  type: TYPE_NORMAL
- en: If you are familiar with Microsoft Excel, the files under the `xl` folder will
    look familiar to you. The `xl` folder contains a `workbook.xml` file and a `worksheets`
    folder, with a file for each sheet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `workbook.xml` file lists all the sheets in the workbook. The following
    markup from the `workbook.xml` file shows the contents of the `sheets` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the code to loop through all the sheets in the given `SpreadsheetDocument`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The `worksheets` folder contains one file that corresponds to each of the sheets
    identified in the `sheets` element of the `workbook.xml` file. In our example,
    they are named `sheet1.xml` and `sheet2.xml`. The following markup from the `sheets1.xml`
    file shows the contents of the `sheetData` element for the `Numbers` worksheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, `sheetData` is made up of a collection of rows. Each row has
    several cells, and each cell has a value.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following markup from the `sheets2.xml` file shows the contents of the
    `sheetData` element for the `Welcome` worksheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We are expecting the value of the A1 cell to be **Hello World**. However, it
    has the value of `0` (zero) instead. The reason for this is that all the strings
    are stored in the `sharedStrings.xml` file, and only the index to the location
    of the string within the `sharedStrings.xml` file is included in `sheetData`.
    Each unique string is only included once in the `sharedStrings.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the data from the `sharedStrings.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code loops through each of the sheets in `SpreadsheetDocument`
    and returns the value of the first cell in the first row of each sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You have learned how to read an Excel file by using the `Open XML SDK`. The
    `Open XML SDK` is very powerful. It can be used not only to read Excel files but
    also to both create new Excel files and update existing ones. It can also be used
    to create, read, and update both Word and PowerPoint files.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get a quick overview of the project that we are going to build in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Excel reader project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Blazor WebAssembly application that we are going to build in this chapter
    is an Excel file reader. We will use the `InputFile` component to upload an Excel
    file. Then, we will use the `Open XML SDK` to loop through the rows of one of
    the worksheets in the Excel file. Finally, we will use the `Virtualize` component
    to render the data from the Excel file in an HTML table.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a screenshot of the completed application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18471_09_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 9.6: Excel reader app'
  prefs: []
  type: TYPE_NORMAL
- en: The build time for this project is approximately 45 minutes.
  prefs: []
  type: TYPE_NORMAL
- en: Project overview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ExcelReader` project will be created by using Microsoft’s **Blazor WebAssembly
    App Empty** project template to create an empty Blazor WebAssembly project. First,
    we will add the `Open XML SDK` to the project. Then, we will add a model to capture
    the information that we are reading from the Excel file. We will use an `InputFile`
    component to upload the Excel file. We will use the `Open XML SDK` to read the
    Excel file. Finally, we will use the `Virtualize` component to display the data
    from the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Create the Excel reader project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to create a new Blazor WebAssembly app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio 2022.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Create a new project** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Alt*+*S* to enter the **search for templates** textbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Blazor` and press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the **Blazor WebAssembly App Empty** project
    template:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B18471_09_07.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.7: Blazor WebAssembly App Empty project template'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select the **Blazor WebAssembly App Empty** project template and click the **Next**
    button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `ExcelReader` in the **Project name** textbox and click the **Next** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to configure our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_09_08.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.8: Configure your new project dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: TIP
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In the preceding example, we placed the `ExcelReader` project into the `E:/Blazor`
    folder. However, the location of this project is not important.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Select **.NET 7.0** as the version of the **Framework** to use.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check the **Configure for HTTPS** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **ASP.NET Core Hosted** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the **Progressive Web Application** checkbox.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is a screenshot of the dialog used to collect additional information about
    our new project:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18471_09_09.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.9: Additional information dialog'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have created an empty `ExcelReader` Blazor WebAssembly project. We will use
    the `Open XML SDK` to read the Microsoft Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Install the Open XML SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to install the `Open XML SDK` into our web app. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Select **Tools**, **NuGet Package Manager**, **Package Manager Console** from
    the Visual Studio menu to open the **Package Manager Console**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Press the *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `Open XML SDK` is now installed.
  prefs: []
  type: TYPE_NORMAL
- en: Now we need to add a class to contain the information that we will read from
    the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Add the Medals class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Excel file that we will upload will include a count of medals that were
    awarded to each country in each of the summer Olympic Games since 1896\. We need
    to add a `Medals` class to collect that information. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Right-click the **ExcelReader** project and select the **Add**, **New Folder**
    option from the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new folder `Models`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click the **Models** folder and select the **Add**, **Class** option from
    the menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name the new class `Medals`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Add** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following properties to the `Medals` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have added the `Medals` class to capture the data from the Excel file. Next,
    we need to add the ability to upload the Excel file that we want to read.
  prefs: []
  type: TYPE_NORMAL
- en: Upload the Excel file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `InputFile` component to both select and upload the Excel file.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages/Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Remove the `h1` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup includes an `InputFile` component and an `if` statement.
    If `file` is not null, the file’s name, size, and content type are displayed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following code to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code checks the size and content type of the file and displays
    an error message if they are invalid. It is a good practice to always set a maximum
    file size since the larger the file, the more resources are required to process
    it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Choose file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `SummerOlympics.xlsx` file and click the **Open** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the results:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B18471_09_10.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Figure 9.10: Select SummerOlympics.xlsx'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**IMPORTANT NOTE**'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You must download the `SummerOlympics.xlsx` file from the GitHub repository.
    It includes two worksheets: `olympic_hosts` and `olympic_medals`. We will be working
    with the `olympic_medals` worksheet. It includes the medal count by country and
    year for the summer Olympics.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click the **Read file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that nothing happens.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have successfully uploaded the Excel file, but when we click the **Read file**
    button, nothing happens. Now we need to write the code to read the data from the
    Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: Read the Excel file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the `SpreadsheetDocument` class to read the data from the Excel
    file. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Pages\Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following fields to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `loaded` field will be used to toggle the markup used to display the data,
    and the `rowCount` field will be used to hold the number of rows in the Excel
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `ReadFile` method to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code sets the value of `rowCount` to the number of rows in the
    `olympic_medals` worksheet.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Update the `Read file` button to the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When the **Read file** button is clicked, the `ReadFile` method will be invoked.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the following `if` statement after the `Read file` button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code will display `rowCount` after the file has been loaded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Choose file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `SummerOlympics.xlsx` file and click the **Open** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Read file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the correct number of rows is displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have read the number of rows in the `olympic_medals` worksheet in the `SummerOlympics.xlsx`
    file. Next, we will populate a collection of medals by looping through each of
    the rows in the worksheet.
  prefs: []
  type: TYPE_NORMAL
- en: Populate the medals collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to loop through all the rows to populate the collection of medals.
    We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Return to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the `Pages\Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following field to the code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `allMedals` field will be used to hold the data that is read from the Excel
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the code that set `rowCount`, add the following code in the `ReadFile`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first thing that the preceding code does is load `stringTable`. Then, it
    determines the `value` of the cell and updates the appropriate property of the
    `Medals` object, based on the column that is being read. If the cell is of type
    `SharedString`, it determines its value by using `stringTable`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Choose file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `SummerOlympics.xlsx` file and click the **Open** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Read file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that the correct number of rows is still displayed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are reading all the rows into the collection of medals, but we are not rendering
    them. Next, we need to render them to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Render the Medals collection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the `Virtualize` component to the `Home` page to render the
    data. We do this as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the `Pages\Index.razor` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following markup below the `p` element that is displaying `rowCount`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding markup uses the `Virtualize` component to display each of the
    objects in the collection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press *Ctrl*+*F5* to start the application without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Choose file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `SummerOlympics.xlsx` file and click the **Open** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Read file** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll through the list of items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have added the ability to display all the items from a collection, using
    the `Virtualize` component.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You should now be able to upload files into your Blazor WebAssembly app. You
    should be able to use virtualization to render your pages faster when you are
    working with a large dataset. Finally, you should be comfortable with working
    with Microsoft Excel files.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we explained how to upload files and how to resize image files.
    We explained how to use virtualization. Finally, we introduced the `Open XML SDK`
    and explained how to use it to read Excel files.
  prefs: []
  type: TYPE_NORMAL
- en: After that, we used the **Blazor WebAssembly App Empty** project template to
    create a new project and added the `Open XML SDK` to the project. Next, we added
    an `InputFile` component to upload an Excel file to the app. We used the `Open
    XML SDK` to read the number of rows in a particular worksheet. Then, we looped
    through all the rows in the selected worksheet and stored their values in a collection.
    Finally, we used the `Virtualize` component to display all the items in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to upload files to your web app, your users can provide
    data to your application in a variety of different formats. In this project, we
    used an Excel file, but you can easily extrapolate what you have learned to use
    other types of files.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will use SQL Server to build a task manager using the
    ASP.NET Web API.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following questions are provided for your consideration:'
  prefs: []
  type: TYPE_NORMAL
- en: The `SummerOlypics.xlsx` file contains two worksheets. How can you join the
    data from the two worksheets before displaying it?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are some of the benefits of resizing an image?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Is it a good practice to always include `Placeholder` when using the `Virtualize`
    component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Can the `Open XML SDK` be used to create a new Excel file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you avoid reading an entire file into memory when using the `InputFile`
    component?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide more information concerning the topics covered
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: For more information on security best practices when uploading files, refer
    to [https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads](https://learn.microsoft.com/en-us/aspnet/core/mvc/models/file-uploads).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the `Virtualize` component source code in GitHub, refer to [https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web/src/Virtualization/Virtualize.cs](https://github.com/dotnet/aspnetcore/blob/main/src/Components/Web/src/Virtualization/Virtualize.cs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the `Open XML SDK`, refer to [https://learn.microsoft.com/en-us/office/open-xml/open-xml-sdk](https://learn.microsoft.com/en-us/office/open-xml/open-xml-sdk).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more information on the Open XML specification, refer to [https://www.ecma-international.org/publications-and-standards/standards/ecma-376/](https://www.ecma-international.org/publications-and-standards/standards/ecma-376/).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
