["```cs\nusing UnityEngine;\nusing System.Collections.Generic;\n\nnamespace Chapter.SpatialPartition\n{\n    [CreateAssetMenu(fileName = \"New Track\", menuName = \"Track\")]\n    public class Track : ScriptableObject\n    {\n        [Tooltip(\"The expected length of segments\")] \n        public float segmentLength;\n\n        [Tooltip(\"Add segments in expected loading order\")] \n        public List<GameObject> segments = new List<GameObject>();\n    }\n}\n```", "```cs\nusing UnityEngine;\nusing System.Linq;\nusing System.Collections.Generic;\n\nnamespace Chapter.SpatialPartition\n{\n    public class TrackController : MonoBehaviour\n    {\n        private float _trackSpeed;\n        private Transform _prevSeg;\n        private GameObject _trackParent;\n        private Transform _segParent;\n        private List<GameObject> _segments;\n        private Stack<GameObject> _segStack;\n        private Vector3 _currentPosition = new Vector3(0, 0, 0);\n\n        [Tooltip(\"List of race tracks\")] \n        [SerializeField]\n        private Track track;\n\n        [Tooltip(\"Initial amount of segment to load at start\")] \n        [SerializeField]\n        private int initSegAmount;\n\n        [Tooltip(\"Amount of incremental segments to load at run\")] \n        [SerializeField]\n        private int incrSegAmount;\n\n        [Tooltip(\"Dampen the speed of the track\")] \n        [Range(0.0f, 100.0f)] \n        [SerializeField]\n        private float speedDampener;\n\n        void Awake()\n        {\n            _segments = \n                Enumerable.Reverse(track.segments).ToList();\n        }\n\n        void Start()\n        {\n            InitTrack();\n        }\n```", "```cs\nvoid Update()\n{\n    _segParent.transform.Translate(\n        Vector3.back * (_trackSpeed * Time.deltaTime));\n}\n\nprivate void InitTrack()\n{\n    Destroy(_trackParent);\n\n    _trackParent = \n        Instantiate(\n            Resources.Load(\"Track\", typeof(GameObject))) \n            as GameObject;\n\n    if (_trackParent)\n        _segParent = \n            _trackParent.transform.Find(\"Segments\");\n\n    _prevSeg = null;\n\n    _segStack = new Stack<GameObject>(_segments);\n\n    LoadSegment(initSegAmount);\n}\n```", "```cs\n_segStack = new Stack<GameObject>(_segments);\n```", "```cs\n        private void LoadSegment(int amount)\n        {\n            for (int i = 0; i < amount; i++)\n            {\n                if (_segStack.Count > 0)\n                {\n                    GameObject segment = \n                        Instantiate(\n                            _segStack.Pop(), _segParent.transform);\n\n                    if (!_prevSeg) \n                        _currentPosition.z = 0;\n\n                    if (_prevSeg)\n                        _currentPosition.z =\n                            _prevSeg.position.z \n                            + \n                            track.segmentLength;\n\n                    segment.transform.position = _currentPosition;\n\n                    segment.AddComponent<Segment>();\n\n                    segment.GetComponent<Segment>().\n                        trackController = this;\n\n                    _prevSeg = segment.transform;\n                }\n            }\n        }\n\n        public void LoadNextSegment()\n        {\n            LoadSegment(incrSegAmount);\n        } \n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class SegmentMarker : MonoBehaviour\n{\n    private void OnTriggerExit(Collider other)\n    {\n        if (other.GetComponent<BikeController>()) \n            Destroy(transform.parent.gameObject);\n    }\n}\n```", "```cs\nsegment.transform.position = _currentPosition;\n\nsegment.AddComponent<Segment>(); \n\nsegment.GetComponent<Segment>().trackController = this;\n```", "```cs\nusing UnityEngine;\n\npublic class Segment : MonoBehaviour\n{\n    public TrackController trackController;\n\n    private void OnDestroy()\n    {\n        if (trackController) \n            trackController.LoadNextSegments();\n    }\n}\n```"]