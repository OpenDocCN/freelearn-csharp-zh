["```cs\n    using System;\n    using Microsoft.EntityFrameworkCore;\n    namespace WWTravelClubDB\n    {\n        public class MainDbContext: DbContext\n        {\n            public MainDbContext(DbContextOptions options)\n                : base(options)\n            {\n            }\n            protected override void OnModelCreating(ModelBuilder\n            builder)\n            {\n            }\n        }\n    } \n    ```", "```cs\nnamespace WWTravelClubDB.Models\n{\n    public class Destination\n    {\n        public int Id { get; set; }\n        public required string Name { get; set; }\n        public required string Country { get; set; }\n        public string? Description { get; set; }\n    }\n} \n```", "```cs\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nnamespace WWTravelClubDB.Models\n{\n    public class Destination\n    {\n        public int Id { get; set; }\n        [MaxLength(128)]\n        Public required string Name { get; set; }\n        [MaxLength(128)]\n        Public required string Country { get; set; }\n        public string? Description { get; set; }\n        public ICollection<Package> Packages { get; set; } = null!\n    }\n} \n```", "```cs\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\nnamespace WWTravelClubDB.Models\n{\n    public class Package\n    {\n        public int Id { get; set; }\n        [MaxLength(128)]\n        Public required string Name { get; set; }\n        [MaxLength(128)]\n        public string? Description { get; set; }\n        public decimal Price { get; set; }\n        public int DurationInDays { get; set; }\n        public DateTime? StartValidityDate { get; set; }\n        public DateTime? EndValidityDate { get; set; }\n        public Destination MyDestination { get; set; } = null!\n        public int DestinationId { get; set; }\n    }\n} \n```", "```cs\npublic DbSet<Package> Packages { get; set; }\npublic DbSet<Destination> Destinations { get; set; } \n```", "```cs\nbuilder.Entity<Destination>()\n    .HasMany(m => m.Packages)\n    .WithOne(m => m.MyDestination)\n    .HasForeignKey(m => m.DestinationId)\n    .OnDelete(DeleteBehavior.Cascade); \n```", "```cs\nbuilder.Entity<Package>()\n    .HasOne(m => m.MyDestination)\n    .WithMany(m => m.Packages)\n    .HasForeignKey(m => m.DestinationId)\n    .OnDelete(DeleteBehavior.Cascade); \n```", "```cs\n...\n.Property(m => m.Price)\n        .HasPrecision(10, 3); \n```", "```cs\nbuilder.Entity<T>()\n   .HasIndex(m => m.PropertyName); \n```", "```cs\nbuilder.Entity<T>()\n    .HasIndex(\"propertyName1\", \"propertyName2\", ...); \n```", "```cs\n[Index(nameof(Property), IsUnique = true)]\npublic class MyClass\n{\n    public int Id { get; set; }\n    [MaxLength(128)]\n    public string Property { get; set; }\n} \n```", "```cs\n[Index(nameof(Property1), nameof(Property2), IsUnique = false)]\npublic class MyComplexIndexClass\n{\n    public int Id { get; set; }\n    [MaxLength(64)]\n    public string Property1 { get; set; }\n    [MaxLength(64)]\n    public string Property2 { get; set; }\n} \n```", "```cs\ninternal class DestinationConfiguration :\n    IEntityTypeConfiguration<Destination>\n{\n    public void Configure(EntityTypeBuilder<Destination> builder)\n    {\n        builder\n            .HasIndex(m => m.Country);\n        builder\n            .HasIndex(m => m.Name);\n       ...\n    }\n} \n```", "```cs\n[EntityTypeConfiguration(typeof(DestinationConfiguration))]\npublic class Destination\n{\n  ... \n```", "```cs\nnew DestinationConfiguration()\n         .Configure(builder.Entity<Destination>()); \n```", "```cs\nbuilder.ApplyConfigurationsFromAssembly(typeof(MainDbContext).Assembly); \n```", "```cs\nprotected override void OnModelCreating(ModelBuilder builder)\n{\n    builder.Entity<Destination>()\n        .HasMany(m => m.Packages)\n        .WithOne(m => m.MyDestination)\n        .HasForeignKey(m => m.DestinationId)\n        .OnDelete(DeleteBehavior.Cascade);\n    new DestinationConfiguration()\n                .Configure(builder.Entity<Destination>());\n    new PackageConfiguration()\n                .Configure(builder.Entity<Package>());\n} \n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nnamespace WWTravelClubDB.Models\n{\n    internal class DestinationConfiguration :\n        IEntityTypeConfiguration<Destination>\n    {\n        public void Configure(EntityTypeBuilder<Destination> builder)\n        {\n            builder\n               .HasIndex(m => m.Country);\n            builder\n                .HasIndex(m => m.Name);\n        }\n    }\n}\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Metadata.Builders;\nnamespace WWTravelClubDB.Models\n{\n    internal class PackageConfiguration : IEntityTypeConfiguration<Package>\n    {\n        public void Configure(EntityTypeBuilder<Package> builder)\n        {\n            builder\n                .HasIndex(m => m.Name);\n            builder\n                .HasIndex(nameof(Package.StartValidityDate),\n                 nameof(Package.EndValidityDate));\n        }\n    }\n} \n```", "```cs\nmodelBuilder\n  .Entity<Teacher>()\n  .HasMany(e => e.Classrooms)\n  .WithMany(e => e.Teachers) \n```", "```cs\nmodelBuilder\n  .Entity<Teacher>()\n  .HasMany(e => e.Classrooms)\n  .WithMany(e => e.Teachers)\n      .UsingEntity<Course>(\n           b => b.HasOne(e => e.Teacher).WithMany()\n           .HasForeignKey(e => e.TeacherId),\n           b => b.HasOne(e => e.Classroom).WithMany()\n           .HasForeignKey(e => e.ClassroomId)); \n```", "```cs\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Design;\nnamespace WWTravelClubDB\n{\n    public class LibraryDesignTimeDbContextFactory\n        : IDesignTimeDbContextFactory<MainDbContext>\n    {\n        private const string connectionString =\n            @\"Server=(localdb)\\mssqllocaldb;Database=wwtravelclub;\n                Trusted_Connection=True;MultipleActiveResultSets=true\";\n        public MainDbContext CreateDbContext(params string[] args)\n        {\n            var builder = new DbContextOptionsBuilder<MainDbContext>();\n\n            builder.UseSqlServer(connectionString);\n            return new MainDbContext(builder.Options);\n        }\n    }\n} \n```", "```cs\nOptimize-DbContext -Context MainDBContext -OutputDir Optimization -Namespace WWTravelClubDB.Optimization \n```", "```cs\nbuilder.UseSqlServer(connectionString);\n//Line to add. Add it after that the optimization model has been created\nbuilder.UseModel(Optimization.MainDbContextModel.Instance);\nreturn new MainDbContext(builder.Options); \n```", "```cs\n    Console.WriteLine(\"program start: populate database, press a key to continue\");\n    Console.ReadKey(); \n    ```", "```cs\n    using WWTravelClubDB;\n    using WWTravelClubDB.Models;\n    using Microsoft.EntityFrameworkCore;\n    using WWTravelClubDBTest; \n    ```", "```cs\n    var context = new LibraryDesignTimeDbContextFactory()\n    .CreateDbContext(); \n    ```", "```cs\n    var firstDestination= new Destination\n    {\n        Name = \"Florence\",\n        Country = \"Italy\",\n        Packages = new List<Package>()\n        {\n            new Package\n            {\n                Name = \"Summer in Florence\",\n                StartValidityDate = new DateTime(2019, 6, 1),\n                EndValidityDate = new DateTime(2019, 10, 1),\n                DurationInDays=7,\n                Price=1000\n            },\n            new Package\n            {\n                Name = \"Winter in Florence\",\n                StartValidityDate = new DateTime(2019, 12, 1),\n                EndValidityDate = new DateTime(2020, 2, 1),\n                DurationInDays=7,\n                Price=500\n            }\n        }\n    };\n    context.Destinations.Add(firstDestination);\n    await context.SaveChangesAsync();\n    Console.WriteLine(\n     $\"DB populated: first destination id is {firstDestination.Id}\");\n    Console.ReadKey(); \n    ```", "```cs\n    Console.WriteLine(\"program start: populate database, press a key to continue\");\n    Console.ReadKey();\n    var context = new LibraryDesignTimeDbContextFactory()\n        .CreateDbContext();\n    //var firstDestination = new Destination\n    //{\n    //    Name = \"Florence\",\n    //    Country = \"Italy\",\n    //    Packages = new List<Package>()\n    //    {\n    //        new Package\n    //        {\n    //            Name = \"Summer in Florence\",\n    //            StartValidityDate = new DateTime(2019, 6, 1),\n    //            EndValidityDate = new DateTime(2019, 10, 1),\n    //            DurationInDays=7,\n    //            Price=1000\n    //        },\n    //        new Package\n    //        {\n    //            Name = \"Winter in Florence\",\n    //            StartValidityDate = new DateTime(2019, 12, 1),\n    //            EndValidityDate = new DateTime(2020, 2, 1),\n    //            DurationInDays=7,\n    //            Price=500\n    //        }\n    //    }\n    //};\n    //context.Destinations.Add(firstDestination);\n    //await context.SaveChangesAsync();\n    //Console.WriteLine(\n    //    $\"DB populated: first destination id is {firstDestination.Id}\");\n    //Console.ReadKey(); \n    ```", "```cs\n    var toModify = await context.Destinations\n        .Where(m => m.Name == \"Florence\").FirstOrDefaultAsync(); \n    ```", "```cs\n    var toModify = await context.Destinations\n        .Where(m => m.Name == \"Florence\")\n        .Include(m => m.Packages)\n        .FirstOrDefaultAsync(); \n    ```", "```cs\n    toModify.Description =\n      \"Florence is a famous historical Italian town\";\n    foreach (var package in toModify.Packages)\n       package.Price = package.Price * 1.1m;\n    await context.SaveChangesAsync();\n    var verifyChanges= await context.Destinations\n        .Where(m => m.Name == \"Florence\")\n        .FirstOrDefaultAsync();\n    Console.WriteLine(\n        $\"New Florence description: {verifyChanges.Description}\");\n    Console.ReadKey(); \n    ```", "```cs\n.Include(m => m.NestedCollection)\n.ThenInclude(m => m.NestedNestedCollection) \n```", "```cs\n.AsSplitQuery().Include(m => m.NestedCollection)\n.ThenInclude(m => m.NestedNestedCollection) \n```", "```cs\nvar mySQL = myLinQQuery.ToQueryString (); \n```", "```cs\n.Include(m => m.Packages.Where(l-> l.Price < x)) \n```", "```cs\n    namespace WWTravelClubDBTest\n    {\n        public record PackagesListDTO\n       {\n            public int Id { get; init; }\n            public required string Name { get; init; }\n            public decimal Price { get; init; }\n            public int DurationInDays { get; init; }\n            public DateTime? StartValidityDate { get; init; }\n            public DateTime? EndValidityDate { get; init; }\n            public required string DestinationName { get; init; }\n            public int DestinationId { get; init; }\n            public override string ToString()\n            {\n             return string.Format(\"{0}. {1} days in {2}, price: {3}\",\n                    Name, DurationInDays, DestinationName, Price);\n            }\n        }\n    } \n    ```", "```cs\n    var period = new DateTime(2019, 8, 10);\n    var list = await context.Packages\n        .Where(m => period >= m.StartValidityDate\n        && period <= m.EndValidityDate)\n        .Select(m => new PackagesListDTO\n        {\n            StartValidityDate=m.StartValidityDate,\n            EndValidityDate=m.EndValidityDate,\n            Name=m.Name,\n            DurationInDays=m.DurationInDays,\n            Id=m.Id,\n            Price=m.Price,\n            DestinationName=m.MyDestination.Name,\n            DestinationId = m.DestinationId\n        })\n        .ToListAsync();\n    foreach (var result in list)\n        Console.WriteLine(result.ToString());\n    Console.ReadKey(); \n    ```", "```cs\nTask<int> DbContext.Database.ExecuteSqlRawAsync(string sql, params object[] parameters) \n```", "```cs\ncontext.<mapped collection>.FromSqlRaw(string sql, params object[] parameters) \n```", "```cs\nvar results = await context.Packages.FromSqlRaw(\"<some sql>\", par1, par2, ...).ToListAsync(); \n```", "```cs\nvar allPackages = await context.Packages.FromSqlRaw(\n    \"SELECT * FROM Products WHERE Name = {0}\",\n    myPackageName).ToListAsync(); \n```", "```cs\nvar allPackages = await context.Packages.FromSqlRaw(\n  $\"SELECT * FROM Products WHERE Name = {myPackageName}\").ToListAsync(); \n```", "```cs\nIQueryable<TResult> DbContext.Database.SqlQueryRaw<TResult> (string sql, params object[] parameters) \n```", "```cs\nusing (var dbContextTransaction = context.Database.BeginTransaction())\ntry{\n   ...\n   ...\n   dbContextTransaction.Commit();\n }\n catch\n {\n   dbContextTransaction.Rollback();\n } \n```", "```cs\nScript-Migration -From <initial migration> -To <final migration> -Output <name of output file> \n```", "```cs\nif(!context.Destinations.Any())\n{\n    //populate here the Destinations table\n} \n```", "```cs\npublic interface IDestination\n{\n    int Id { get; }\n    string Name { get; }\n    string Country { get; }\n    string Description { get; set; }\n    ...\n} \n```", "```cs\nmodelBuilder.Entity<MyEntity>().HasQueryFilter(m => <define filter condition here>); \n```", "```cs\nmodelBuilder.Entity<Package>().HasQueryFilter(m => !m.IsDeleted); \n```", "```cs\nmodelBuilder.Entity<Document>().HasQueryFilter(m => m.UserId == CurrentUserId); \n```", "```cs\n modelBuilder.Entity<MyEntity1>().ToTable(\"MyTable\");\n modelBuilder.Entity<MyEntity2>().ToView(\"MyView\"); \n```", "```cs\nmodelBuilder.Entity<MyEntity>().ToTable(\"MyTable\").ToView(\"MyView\"); \n```", "```cs\nprotected override void ConfigureConventions(\n    ModelConfigurationBuilder configurationBuilder)\n{\n      configurationBuilder.Properties<decimal>()\n          .HavePrecision(10, 3);\n          ...\n} \n```", "```cs\nprotected override void ConfigureConventions(\n    ModelConfigurationBuilder configurationBuilder)\n{\n      configurationBuilder.Properties<decimal>()\n          .HavePrecision(10, 3);\n      configurationBuilder.Properties<string>()\n          .HaveMaxLength(128);\n       ...\n} \n```", "```cs\nmodelBuilder.Entity<Author>().OwnsOne(\n            author => author.Contact, ownedNavigationBuilder =>\n            {\n                ownedNavigationBuilder.ToJson();\n            }); \n```", "```cs\n context.Authors\n  .Where(m => m.Contact.Email == searchEmail).FirstOrDefaultAsync(); \n```", "```cs\nmodelBuilder.Entity<Author>().OwnsOne(\n            author => author.Contact, ownedNavigationBuilder =>\n            {\n                ownedNavigationBuilder.ToJson();\n\t\t  ownedNavigationBuilder.OwnsMany(\n\t\t\tcontactDetails => contactDetails.Addresses);\n            }); \n```", "```cs\ncontext.Authors\n  .Where(m => m.Contact.Addresses.Any()).FirstOrDefaultAsync(); \n```"]