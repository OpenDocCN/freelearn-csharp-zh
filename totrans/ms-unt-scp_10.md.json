["```cs\n[Ll]ibrary/\n[Tt]emp/\n[Oo]bj/\n[Bb]uild/\n/*.csproj\n/*.unityproj\n/*.sln\n/*.suo\n/*.user\n/*.userprefs\n/*.pidb\n/*.booproj\nsysinfo.txt\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.UI;\n//---------------------------------------------\npublic class LoadTextData : MonoBehaviour\n{\n  //Reference to UI Text Component\n  private Text MyText = null;\n\n  //Reference to text asset in resources folder\n  private TextAsset TextData = null;\n  //---------------------------------------------\n  // Use this for initialization\n  void Awake () {\n    //Get Text Component\n    MyText = GetComponent<Text>();\n\n    //Load text data from resources folder\n    TextData = Resources.Load(\"TextData\") as TextAsset;\n  }\n  //---------------------------------------------\n  // Update is called once per frame\n  void Update () {\n    //Update text label component\n    MyText.text = TextData.text;\n  }\n  //---------------------------------------------\n}\n//---------------------------------------------\n```", "```cs\n  // C# Example\n  // Builds an asset bundle from the selected objects in the\n  // project view.\n  // Once compiled go to \"Menu\" -> \"Assets\" and select one of the\n  // choices to build the Asset Bundle\n\n  using UnityEngine;\n  using UnityEditor;\n  public class ExportAssetBundles {\n    [MenuItem(\"Assets/Build AssetBundle From Selection - Track dependencies\")]\n    static void ExportResource () {\n      // Bring up save panel\n      string path = EditorUtility.SaveFilePanel (\"Save Resource\", \"\", \"New Resource\", \"unity3d\");\n      if (path.Length != 0) {\n        // Build the resource file from the active selection.\n        Object[] selection = Selection.GetFiltered(typeof(Object), SelectionMode.DeepAssets);\n        BuildPipeline.BuildAssetBundle(Selection.activeObject, selection, path,\n          BuildAssetBundleOptions.CollectDependencies | BuildAssetBundleOptions.CompleteAssets);\n        Selection.objects = selection;\n      }\n    }\n    [MenuItem(\"Assets/Build AssetBundle From Selection - No dependency tracking\")]\n    static void ExportResourceNoTrack () {\n      // Bring up save panel\n      string path = EditorUtility.SaveFilePanel (\"Save Resource\", \"\", \"New Resource\", \"unity3d\");\n      if (path.Length != 0) {\n        // Build the resource file from the active selection.\n        BuildPipeline.BuildAssetBundle(Selection.activeObject, Selection.objects, path);\n      }\n    }\n  }\n```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class LoadAssetBundle : MonoBehaviour\n{\n  //Mesh Renderer Reference\n  private MeshRenderer MR = null;\n\n  // Use this for initialization\n  IEnumerator Start ()\n  {\n    //Get asset bundle file from local machine\n    WWW www = new WWW (@\"file:///c:\\asset_textures.unity3d\");\n\n    //Wait until load is completed\n    yield return www;\n\n    //Retrieve texture from asset bundle\n    Texture2D Tex = www.assetBundle.Load(\"texture_wood\",typeof(Texture2D)) as Texture2D;\n\n    //Assign texture in bundle to mesh\n    MR = GetComponent<MeshRenderer>();\n    MR.material.mainTexture = Tex;\n  }\n}\n```", "```cs\n001 //-----------------------------------------------\n002 using UnityEngine;\n003 using System.Collections;\n004 using System.Collections.Generic;\n005 using System.Xml;\n006 using System.Xml.Serialization;\n007 using System.Runtime.Serialization.Formatters.Binary;\n008 using System.IO;\n009 //-----------------------------------------------\n010 public class ObjSerializer : MonoBehaviour\n011 {\n012   //Data to save to file XML or Binary\n013   [System.Serializable]\n014   [XmlRoot(\"GameData\")]\n015   public class MySaveData\n016   {\n017     //Transform data to save/load to and from file\n018     //represents a conversion of a transform object\n019     //into simpler values, like floats\n020     [System.Serializable]\n021     public struct DataTransform\n022     {\n023       public float X;\n024       public float Y;\n025       public float Z;\n026       public float RotX;\n027       public float RotY;\n028       public float RotZ;\n029       public float ScaleX;\n030       public float ScaleY;\n031       public float ScaleZ;\n032     }\n033\n034     //Transform object to save\n035   public DataTransform MyTransform = new DataTransform();\n\n036   }\n037\n038   //My Save Data Object declared here\n039   public MySaveData MyData = new MySaveData();\n040   //-----------------------------------------------\n041   //Populate structure MyData with transform data\n042   //This is the data to be saved to a file\n043   private void GetTransform()\n044   {\n045     //Get transform component on this object\n046     Transform ThisTransform = transform;\n047\n048     //Got transform, now fill data structure\n049     MyData.MyTransform.X = ThisTransform.position.x;\n050     MyData.MyTransform.Y = ThisTransform.position.y;\n051     MyData.MyTransform.Z = ThisTransform.position.z;\n052     MyData.MyTransform.RotX = ThisTransform.localRotation.eulerAngles.x;\n\n053     MyData.MyTransform.RotY = ThisTransform.localRotation.eulerAngles.y;\n\n054     MyData.MyTransform.RotZ = ThisTransform.localRotation.eulerAngles.z;\n\n055     MyData.MyTransform.ScaleX = ThisTransform.localScale.x;\n\n056     MyData.MyTransform.ScaleY = ThisTransform.localScale.y;\n\n057     MyData.MyTransform.ScaleZ = ThisTransform.localScale.z;\n058     }\n059     //-----------------------------------------------\n060     //Restore the transform component with loaded data\n061     //Call this function after loading data back from a file\n        // for restore\n062     private void SetTransform()\n063     {\n064       //Get transform component on this object\n065       Transform ThisTransform = transform;\n066\n067       //We got the transform component, now restore data\n068       ThisTransform.position = new Vector3(MyData.MyTransform.X, MyData.MyTransform.Y, MyData.MyTransform.Z);\n\n069       ThisTransform.rotation = Quaternion.Euler(MyData.MyTransform.RotX, MyData.MyTransform.RotY, MyData.MyTransform.RotZ);\n\n070       ThisTransform.localScale = new Vector3(MyData.MyTransform.ScaleX, MyData.MyTransform.ScaleY, MyData.MyTransform.ScaleZ);\n\n071     }\n072   //-----------------------------------------------\n073   //Saves game data to XML file\n074   //Call this function to save data to an XML file\n075   //Call as Save\n076   public void SaveXML(string FileName = \"GameData.xml\")\n077   {\n078     //Get transform data\n079     GetTransform();\n080\n081     //Now save game data\n082     XmlSerializer Serializer = new XmlSerializer(typeof(MySaveData));\n\n083     FileStream Stream = new FileStream(FileName, FileMode.Create);\n\n084     Serializer.Serialize(Stream, MyData);\n085     Stream.Close();\n086   }\n087   //-----------------------------------------------\n088   //Load game data from XML file\n089   //Call this function to load data from an XML file\n090   //Call as Load\n091   public void LoadXML(string FileName = \"GameData.xml\")\n092   {\n093     //If file doesn’t exist, then exit\n094     if(!File.Exists(FileName)) return;\n095\n096     XmlSerializer Serializer = new XmlSerializer(typeof(MySaveData));\n\n097     FileStream Stream = new FileStream(FileName, FileMode.Open);\n\n098     MyData = Serializer.Deserialize(Stream) as MySaveData;\n\n099     Stream.Close();\n100\n101     //Set transform - load back from a file\n102     SetTransform();\n103   }\n104   //-----------------------------------------------\n105   public void SaveBinary(string FileName = \"GameData.sav\")\n106   {\n107     //Get transform data\n108     GetTransform();\n109\n110     BinaryFormatter bf = new BinaryFormatter();\n111     FileStream Stream = File.Create(FileName);\n112     bf.Serialize(Stream, MyData);\n113     Stream.Close();\n114   }\n115   //-----------------------------------------------\n116   public void LoadBinary(string FileName = \"GameData.sav\")\n117   {\n118     //If file doesn’t exist, then exit\n119     if(!File.Exists(FileName)) return;\n120\n121     BinaryFormatter bf = new BinaryFormatter();\n122   FileStream Stream = File.Open(FileName, FileMode.Open);\n\n123     MyData = bf.Deserialize(Stream) as MySaveData;\n124     Stream.Close();\n125\n126     //Set transform - load back from a file\n127     SetTransform();\n128   }\n129   //-----------------------------------------------\n130 }\n131 //-----------------------------------------------\n```"]