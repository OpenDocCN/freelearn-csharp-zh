["```cs\nusing UnityEngine;\nusing System.Collections;\n\nnamespace Chapter.Decorator\n{\n    public class BikeWeapon : MonoBehaviour\n    {\n        public WeaponConfig weaponConfig;\n        public WeaponAttachment mainAttachment;\n        public WeaponAttachment secondaryAttachment;\n\n        private bool _isFiring;\n        private IWeapon _weapon;\n        private bool _isDecorated;\n\n        void Start() \n        {\n            _weapon = new Weapon(weaponConfig);\n        }\n```", "```cs\nvoid OnGUI()\n{\n    GUI.color = Color.green;\n\n    GUI.Label (\n        new Rect (5, 50, 150, 100), \n        \"Range: \"+ _weapon.Range);\n\n    GUI.Label (\n        new Rect (5, 70, 150, 100), \n        \"Strength: \"+ _weapon.Strength);\n\n    GUI.Label (\n        new Rect (5, 90, 150, 100), \n        \"Cooldown: \"+ _weapon.Cooldown);\n\n    GUI.Label (\n        new Rect (5, 110, 150, 100), \n        \"Firing Rate: \" + _weapon.Rate);\n\n    GUI.Label (\n        new Rect (5, 130, 150, 100), \n        \"Weapon Firing: \" + _isFiring);\n\n    if (mainAttachment && _isDecorated)\n        GUI.Label (\n            new Rect (5, 150, 150, 100), \n            \"Main Attachment: \" + mainAttachment.name);\n\n    if (secondaryAttachment && _isDecorated)\n        GUI.Label (\n            new Rect (5, 170, 200, 100), \n            \"Secondary Attachment: \" + secondaryAttachment.name);\n}\n```", "```cs\n        public void ToggleFire() {\n            _isFiring = !_isFiring;\n\n            if (_isFiring)\n                StartCoroutine(FireWeapon());\n        }\n\n        IEnumerator FireWeapon() {\n            float firingRate = 1.0f / _weapon.Rate;\n\n            while (_isFiring) {\n                yield return new WaitForSeconds(firingRate);\n                Debug.Log(\"fire\");\n            }\n        }\n\n        public void Reset() {\n            _weapon = new Weapon(weaponConfig);\n            _isDecorated = !_isDecorated;\n        }\n\n        public void Decorate() {\n            if (mainAttachment && !secondaryAttachment)\n                _weapon = \n                    new WeaponDecorator(_weapon, mainAttachment);\n\n            if (mainAttachment && secondaryAttachment)\n                _weapon = \n                    new WeaponDecorator(\n                        new WeaponDecorator(\n                            _weapon, mainAttachment), \n                                    secondaryAttachment);\n\n            _isDecorated = !_isDecorated;\n        }\n    }\n}\n```", "```cs\n            if (mainAttachment && secondaryAttachment)\n                _weapon = \n                    new WeaponDecorator(\n                        new WeaponDecorator(\n                            _weapon, mainAttachment), \n                                    secondaryAttachment);\n```", "```cs\nnamespace Chapter.Decorator\n{\n    public class Weapon : IWeapon\n    { \n        public float Range\n        {\n            get { return _config.Range; }\n        }\n\n        public float Rate\n        {\n            get { return _config.Rate; }\n        }\n\n        public float Strength\n        {\n            get { return _config.Strength; }\n        }\n\n        public float Cooldown\n        {\n            get { return _config.Cooldown; }\n        }\n\n        private readonly WeaponConfig _config;\n\n        public Weapon(WeaponConfig weaponConfig)\n        {\n            _config = weaponConfig;\n        }\n    }\n}\n```", "```cs\nnamespace Chapter.Decorator\n{\n    public interface IWeapon\n    {\n        float Range { get; }\n        float Duration { get; }\n        float Strength { get; }\n        float Cooldown { get; }\n    }\n}\n```", "```cs\nnamespace Chapter.Decorator\n{\n    public class WeaponDecorator : IWeapon\n    {\n        private readonly IWeapon _decoratedWeapon;\n        private readonly WeaponAttachment _attachment;\n\n        public WeaponDecorator(\n            IWeapon weapon, WeaponAttachment attachment) {\n\n            _attachment = attachment;\n            _decoratedWeapon = weapon;\n        }\n\n        public float Rate {\n            get { return _decoratedWeapon.Rate \n                         + _attachment.Rate; }\n        }\n\n        public float Range {\n            get { return _decoratedWeapon.Range \n                         + _attachment.Range; }\n        }\n\n        public float Strength {\n            get { return _decoratedWeapon.Strength \n                         + _attachment.Strength; }\n        }\n\n        public float Cooldown\n        {\n            get { return _decoratedWeapon.Cooldown \n                         + _attachment.Cooldown; }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Decorator\n{\n    [CreateAssetMenu(fileName = \"NewWeaponAttachment\", \n        menuName = \"Weapon/Attachment\", order = 1)]\n    public class WeaponAttachment : ScriptableObject, IWeapon \n    {\n        [Range(0, 50)]\n        [Tooltip(\"Increase rate of firing per second\")]\n        [SerializeField] public float rate;\n\n        [Range(0, 50)]\n        [Tooltip(\"Increase weapon range\")]\n        [SerializeField] float range;\n\n        [Range(0, 100)]\n        [Tooltip(\"Increase weapon strength\")]\n        [SerializeField] public float strength;\n\n        [Range(0, -5)]\n        [Tooltip(\"Reduce cooldown duration\")]\n        [SerializeField] public float cooldown;\n\n        public string attachmentName;\n        public GameObject attachmentPrefab;\n        public string attachmentDescription;\n\n        public float Rate {\n            get { return rate;  }\n        }\n\n        public float Range {\n            get { return range; }\n        }\n\n        public float Strength {\n            get { return strength;  }\n        }\n\n        public float Cooldown {\n            get { return cooldown; }\n        }\n    }\n}\n\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Decorator\n{\n    [CreateAssetMenu(fileName = \"NewWeaponConfig\", \n        menuName = \"Weapon/Config\", order = 1)]\n    public class WeaponConfig : ScriptableObject, IWeapon\n    {\n        [Range(0, 60)]\n        [Tooltip(\"Rate of firing per second\")]\n        [SerializeField] private float rate;\n\n        [Range(0, 50)]\n        [Tooltip(\"Weapon range\")]\n        [SerializeField] private float range;\n\n        [Range(0, 100)]\n        [Tooltip(\"Weapon strength\")]\n        [SerializeField] private float strength;\n\n        [Range(0, 5)]\n        [Tooltip(\"Cooldown duration\")]\n        [SerializeField] private float cooldown;\n\n        public string weaponName;\n        public GameObject weaponPrefab;\n        public string weaponDescription;\n\n        public float Rate {\n            get { return rate;  }\n        }\n\n        public float Range {\n            get { return range; }\n        }\n\n        public float Strength {\n            get { return strength;  }\n        }\n\n        public float Cooldown {\n            get { return cooldown; }\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\nnamespace Chapter.Decorator\n{\n    public class ClientDecorator : MonoBehaviour\n    {\n        private BikeWeapon _bikeWeapon;\n        private bool _isWeaponDecorated;\n\n        void Start() {\n            _bikeWeapon = \n                (BikeWeapon) \n                FindObjectOfType(typeof(BikeWeapon));\n        }\n\n        void OnGUI() \n        {\n            if (!_isWeaponDecorated) \n                if (GUILayout.Button(\"Decorate Weapon\")) {\n                    _bikeWeapon.Decorate();\n                    _isWeaponDecorated = !_isWeaponDecorated;\n                }\n\n            if (_isWeaponDecorated)\n                if (GUILayout.Button(\"Reset Weapon\")) {\n                    _bikeWeapon.Reset();\n                    _isWeaponDecorated = !_isWeaponDecorated;\n                }\n\n            if (GUILayout.Button(\"Toggle Fire\"))\n                _bikeWeapon.ToggleFire();\n        }\n    }\n}\n```"]