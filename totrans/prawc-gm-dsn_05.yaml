- en: Adaptation of Mechanics
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 机制改编
- en: We are finally ready to learn about the most exciting creative challenge for
    game designers: creating the gameplay.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于准备好学习游戏设计师最激动人心的创造性挑战：创造游戏玩法。
- en: There are many formal definitions of what gameplay is and what it means, and
    we can say the same about mechanics. Our goal with this book is not to try to
    give new definitions. We want to stay practical, therefore we'll go with the most
    intuitive definitions and leave it to you to discover all the studies and implications
    of those words. For the sake of simplicity, by gameplay, we mean how all the mechanics
    of your game contribute to creating the final experience played by the players.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 关于游戏玩法是什么以及它的含义有许多正式的定义，关于机制也是如此。我们这本书的目标不是试图给出新的定义。我们希望保持实用，因此我们将采用最直观的定义，并留给你去发现所有这些词的研究和含义。为了简单起见，我们所说的游戏玩法是指你游戏中所有机制如何共同创造玩家最终体验的方式。
- en: We're going to have a quick look at more specific definitions of what game mechanics
    are later in this chapter. Again, we're going to learn from other game designers
    and scholars who have already done an excellent job on this, with no pretense
    to reformulate our own definitions.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的后面，我们将快速查看游戏机制的具体定义。再次强调，我们将从已经在这方面做得非常出色的其他游戏设计师和学者那里学习，而不试图重新制定我们自己的定义。
- en: Before learning how to create completely new game mechanics, we are going to
    focus on how to use existing mechanics and change and evolve them to suit your
    game and the gameplay you have envisioned. We have already talked about the fact
    that creating a new game doesn't always mean creating new and never-seen-before
    game mechanics. Understanding existing games and their mechanics and knowing how
    to deconstruct them and make them work for your game is the key to simplicity.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习如何创建全新的游戏机制之前，我们将专注于如何使用现有的机制，并改变和进化它们以适应你的游戏和所构想的游戏玩法。我们已经讨论过，创造一个新游戏并不总是意味着创造全新的、前所未有的游戏机制。理解现有游戏及其机制，并知道如何解构它们并使它们为你自己的游戏服务，是简单化的关键。
- en: In this chapter, we're going to learn how to use familiar game mechanics as
    a starting point to create your own and we will develop a useful framework that,
    once mastered, will allow you to tackle the challenge of creating something new
    and fresh based on familiar gameplay patterns.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何利用熟悉的游戏机制作为起点来创建自己的游戏，并且我们将开发一个有用的框架，一旦掌握，将使你能够应对基于熟悉游戏玩法模式创造新颖事物的新挑战。
- en: What is a game mechanic?
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是游戏机制？
- en: I know, this is a book about practical game design, but when it comes to game
    mechanics and the core elements of gameplay, we have to go through some theory.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道，这是一本关于实用游戏设计的书，但当我们谈到游戏机制和游戏玩法的核心要素时，我们必须通过一些理论。
- en: Formally defining anything is a difficult task; I always prefer to quote definitions
    from different authors. All of them are equally correct and the different points
    of view complement each other. It is not our goal with this book to give a comprehensive
    definition, what's important is that a clear idea can stick in your designer mind
    by reading them!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正式定义任何事物都是一项艰巨的任务；我总是更喜欢引用不同作者的定义。它们都是同样正确的，不同的观点相互补充。我们这本书的目标不是给出一个全面的定义，重要的是通过阅读它们，一个清晰的想法可以留在你的设计师脑海中！
- en: Mechanics are the various actions, behaviors, and control mechanisms afforded
    to the player within a game context.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 机制是在游戏环境中提供给玩家的各种动作、行为和控制机制。
- en: '–''MDA: Mechanics, Dynamics, Aesthetics Framework'' by Hunicke, M. LeBlanc,
    R. Zubek'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: –《MDA：机制、动态、美学框架》由Hunicke, M. LeBlanc, R. Zubek著
- en: Game mechanics are rule based systems/simulations that facilitate and encourage
    a user to explore and learn the properties of their possibility space through
    the use of feedback mechanisms.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏机制是基于规则的系统/模拟，通过反馈机制促进并鼓励用户探索和学习其可能性空间的各种属性。
- en: –'A Theory of Fun' by Raph Koster
  id: totrans-12
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: –《乐趣理论》由拉夫·科斯特著
- en: They are the interactions and relationships that remain when all of the aesthetics,
    technology, and story are stripped away.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它是在所有美学、技术和故事都被剥离后剩下的交互和关系。
- en: –'The Art of Game Design' by Jesse Schell
  id: totrans-14
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: –《游戏设计艺术》由杰西·谢尔著
- en: Got it? Great!
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 明白了？太好了！
- en: It may all sound pretty simple, but those definitions took hard work and much
    thought to be written in black and white. Again, we are not going in-depth into
    these because this book is about the practical use of this knowledge more than
    the knowledge itself. Make sure to read the source articles and books from which
    we have taken these definitions; they are a must-read for every aspiring game
    designer.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来可能很简单，但这些定义需要付出辛勤的努力和深思熟虑才能写成黑白色。再次强调，我们不会深入探讨这些内容，因为这本书更多地关注知识的实际应用，而不是知识本身。请确保阅读我们从其中提取这些定义的原始文章和书籍；它们是每个有志于成为游戏设计师的人必读的。
- en: Examples of game mechanics
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏机制示例
- en: Now that we have a better idea of what a game mechanic is in theory, let's have
    a look at some practical examples from famous games, just to clear any doubts
    that might still be there!
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对理论上的游戏机制有了更好的理解，让我们看看一些来自著名游戏的实际例子，以消除可能存在的任何疑问！
- en: We're going to start with extremely simple mechanics, without lingering too
    much on how they work. What follows is a list of examples to give you a practical
    idea of what a game mechanic is in a game.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从极其简单的机制开始，不会过多地停留于它们是如何工作的。以下是一个示例列表，以给您提供一个关于游戏中游戏机制的实际概念。
- en: Jump!
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 跳跃！
- en: 'Probably the most famous mechanic of all. Super Mario Bros (1983) featured
    only two main mechanics: running and jumping.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是所有机械中最著名的。超级马里奥兄弟（1983）只包含两种主要机制：奔跑和跳跃。
- en: 'By pressing a button Mario can jump into the air, so he is able to stomp on
    enemies or reach platforms on different levels. That jump mechanic has been replicated
    in endless games and given birth to an entire genre: The Platformer. In the following
    image, we can see Mario in action:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按按钮，马里奥可以跳入空中，这样他就能踩在敌人身上或到达不同层级的平台。这种跳跃机制在无数游戏中得到了复制，并催生了一个全新的游戏类型：平台游戏。在下面的图片中，我们可以看到马里奥在行动：
- en: '![](img/00157.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片3](img/00157.jpg)'
- en: Mario jumping in Super Mario World
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 超级马里奥世界中的马里奥跳跃
- en: Shooting and reloading
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 射击和装弹
- en: 'We have two mechanics here:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个机制：
- en: Shooting is the action of firing a weapon
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 射击是开火武器的动作。
- en: Reloading is the mechanic by which every now and then the player has to reload
    the gun to keep shooting
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 装弹是玩家时不时地需要装弹以保持射击的机制。
- en: Early shooter games didn't have any reloading involved, but modern shooter games
    might have quite complex reloading mechanics, each with their own unique gameplay
    implications.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的射击游戏没有涉及任何装弹，但现代射击游戏可能具有相当复杂的装弹机制，每种机制都有其独特的游戏玩法影响。
- en: 'Imagine for example a classic FPS such as Call of Duty (CoD). Every weapon
    has a clip of ammunition that, once unloaded, has to be reloaded. This exposes
    the player to incoming attacks, creating a need for strategy for when to reload
    and a sense of danger in doing so: a fantastic game mechanic! See it in action
    as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，想象一下一个经典的FPS游戏，如《使命召唤》（CoD）。每种武器都有一个弹夹，一旦弹药耗尽，就必须重新装弹。这使玩家暴露在攻击之下，创造了一个需要策略的时刻，以及装弹时的危险感：一个出色的游戏机制！以下是如何在游戏中看到它的实际应用：
- en: '![](img/00103.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00103.jpg)'
- en: In Call of Duty, the player can press the reload button at any given time, commencing
    the action of reloading their weapon
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在《使命召唤》中，玩家可以在任何时候按下装弹按钮，开始装弹武器的动作。
- en: 'Star Wars: Battlefront uses a different approach. Firing a weapon for too long
    and too quickly causes overheat. Once overheated, a weapon cannot be used for
    a number of seconds. The final effect (dynamic) is clearly similar to the one
    we have in CoD—the overheated weapon exposes the player to attacks and creates
    a situation of danger, but the strategies are different. Unlike CoD, in Star Wars:
    Battlefront the player can pace their shooting in such a way that the weapon never
    overheats, at the expense of the fire rate:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 《星球大战：前线》采用不同的方法。长时间快速射击武器会导致过热。一旦过热，武器在几秒钟内无法使用。最终效果（动态）与我们拥有的《使命召唤》中的效果非常相似——过热的武器使玩家暴露在攻击之下，并创造了一种危险的情况，但策略不同。与《使命召唤》不同，在《星球大战：前线》中，玩家可以调整射击节奏，这样武器就不会过热，但代价是射速会降低：
- en: '![](img/00176.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00176.jpg)'
- en: 'In Star Wars: Battlefront a weapon doesn''t need to be reloaded. However, if
    the player keeps shooting for too long, the weapon overheats and has to be cooled
    down by pressing the cooldown (reload) button at the right time'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在《星球大战：前线》中，武器不需要装弹。然而，如果玩家连续射击时间过长，武器会过热，必须通过在正确的时间按下冷却（装弹）按钮来冷却。
- en: Action points
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 行动点
- en: 'Typical of turn-based games, action points are a widely used mechanic. The
    player has a budget of points that he can spend for doing actions (each action
    would be a separate mechanic, such as moving, using an ability, attacking an enemy,
    and so forth). Usually, this point also regenerates over time or each turn:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的回合制游戏，行动点是广泛使用的机制。玩家有一笔可以用于执行动作的点数（每个动作都是一个单独的机制，如移动、使用能力、攻击敌人等等）。通常，这些点数也会随时间或每轮恢复：
- en: '![](img/00105.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00105.jpg)'
- en: In Hearthstone, the player has a number of action points called Mana every turn.
    Each card he can play has a Mana cost.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在炉石传说中，玩家每回合都有一些称为法力的行动点。他可以玩每张牌都有法力消耗。
- en: List of common game mechanics
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 常见游戏机制列表
- en: 'Here is a practical list of game mechanics common to video games. It is by
    no means a comprehensive list, but it will help you better understand the meaning
    of the word mechanic in the context of video games:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个游戏机制的实际列表，这些机制在电子游戏中很常见。这绝对不是一个详尽的列表，但它将帮助您更好地理解在电子游戏背景下“机制”一词的含义：
- en: Turns
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮次
- en: Different types of movements (running, crawling, flying)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的移动（奔跑、爬行、飞行）
- en: Card drawing
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 抽牌
- en: Time limit
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间限制
- en: Resource collection/gathering
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源收集/收集
- en: Shooting
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 射击
- en: Switching weapons
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换武器
- en: Pushing
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推动力
- en: Pulling
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拉扯
- en: Dragging
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拖动
- en: Shooting
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 射击
- en: Winning condition
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 胜利条件
- en: Losing condition
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 失败条件
- en: Rock-Paper-Scissors
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 石头剪刀布
- en: Randomly Generated Numbers
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随机生成的数字
- en: Aiming
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 瞄准
- en: Quick Time Events
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速时间事件
- en: Score points
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 得分
- en: Experience Points
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经验值
- en: There are hundreds of them. It is worth noticing that, as we have seen, a mechanic
    could be either an action that the player can perform or a more abstract rule
    of the game.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 有数百种。值得注意的是，正如我们所见，一个机制可以是玩家可以执行的动作，也可以是游戏更抽象的规则。
- en: Game mechanics interact with each other to develop dynamics
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏机制相互作用以发展动态
- en: The moment when a game really comes to life and triggers player's real emotions
    is when all the mechanics work together to create experiences. Usually, these
    interactions are called dynamics, such as in the case of the aforementioned MDA
    Framework.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当所有机制协同工作以创造体验时，游戏真正变得生动并触发玩家的真实情感的时刻。通常，这些交互被称为动态，如上述MDA框架的案例。
- en: The most striking difference between a mechanic and a dynamic is that a game
    designer has full control of the former but much less of the latter. It is only
    in the hands of players that dynamics can emerge from mechanics and it is the
    game designer's job to make sure this happens in the way they envisioned.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 机制和动态之间最显著的区别是，游戏设计师对前者有完全的控制权，但对后者的控制权要小得多。只有玩家才能从机制中产生动态，而游戏设计师的职责就是确保它们以他们设想的方式发生。
- en: Having less control doesn't mean that designing the mechanics and just hoping
    that they'll work will be enough. The fun of video games ultimately resides in
    dynamics, so getting them right is even more important than designing the core
    mechanics.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 控制力较弱并不意味着仅仅设计机制并希望它们能起作用就足够了。电子游戏的乐趣最终在于动态，因此正确地设计它们甚至比设计核心机制更重要。
- en: Mechanics and dynamics are part of a feature
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 机制和动态是功能的一部分
- en: We know that mechanics are the atoms of our gameplay. We've learned that the
    interactions among our mechanics create dynamics, and now we can finally shed
    some light on the term Feature.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道机制是我们游戏的基础。我们已经了解到我们机制之间的相互作用创造了动态，现在我们终于可以解释一下“功能”这个术语了。
- en: A game feature is an entire set of mechanics, and designing a feature means
    not only describing each mechanic but also how they will generate dynamics and
    interact when played with.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个游戏功能是一整套机制，设计一个功能不仅意味着描述每个机制，还意味着它们在游戏中的动态生成和交互。
- en: Some feature examples are combat, multiplayer leaderboards, crafting, weapon
    upgrades, a world map, online mode, guilds, tournaments, and procedurally generated
    content; the list is limited only by the designer's imagination.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能示例包括战斗、多人排行榜、制作、武器升级、世界地图、在线模式、公会、锦标赛和程序生成内容；这个列表仅受设计师想象力的限制。
- en: 'Here''s a list of common features with some examples in popular games:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些常见功能及其在流行游戏中的示例列表：
- en: '|   Character Creation   |     Skyrim, Pillars of Eternity, World of Warcraft
    |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '|   角色创建   |   天际，永恒之柱，魔兽世界 |'
- en: '|   Combat System   |     Dark Soul, Call of Duty, Chess |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '|   战斗系统   |   黑魂，使命召唤，国际象棋 |'
- en: '|   Guild Wars   |     Clash of Clans, Lineage II |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '|   公会战争   |   部落冲突， lineage II |'
- en: '|   Crafting   |     Minecraft, The Witcher |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '|   制作   |   我的世界，巫师 |'
- en: '|   Tournament   |     Overwatch, FIFA |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '|   比赛   |   Overwatch, FIFA |'
- en: '|   World Map   |     Far Cry, Fallout |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '|   世界地图   |   Far Cry, Fallout |'
- en: It is important to know that some features can be formed by many other smaller
    features—In open world games the open world is usually described as a feature,
    but an open world includes smaller features such as world map, traveling, weather
    and time, encounters, and many, many others.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要知道，一些功能可以由许多其他更小的功能组成——在开放世界游戏中，开放世界通常被描述为一个功能，但开放世界包括如世界地图、旅行、天气和时间、遭遇等许多更小的功能。
- en: Approaching mechanic design
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 接近机制设计
- en: Now that we have some grasp of the theory behind game mechanics and dynamics
    and how they are the building blocks of game features, let's look at how to work
    on them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对游戏机制和动态背后的理论以及它们是如何成为游戏功能构建块有了基本的了解，让我们来看看如何着手处理它们。
- en: As we discussed in [`Chapter 4`](index_split_097.html#filepos293383), Design
    Documentation, every design process should start with the definition of some goals
    and requirements.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[第4章](index_split_097.html#filepos293383)《设计文档》中讨论的那样，每个设计过程都应该从定义一些目标和需求开始。
- en: 'When creating your mechanics, you should always keep in mind the following
    questions:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建你的机制时，你应该始终牢记以下问题：
- en: What is the goal of the mechanic?
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该机制的目标是什么？
- en: Is the goal clear to the player?
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标是否对玩家来说清晰可见？
- en: What are the rules that affect the mechanic?
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 哪些规则会影响机制？
- en: What is the feedback to the player?
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家会得到什么反馈？
- en: The kind of game you are developing and its vision should guide you through
    the answers. Let's say you are working on an action medieval-fantasy game where
    melee combat is your core feature. The first mechanic you’ll be focusing on is
    probably going to be the action of attacking an enemy.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在开发的游戏类型及其愿景应该指导你找到答案。比如说，你正在制作一款以近战战斗为核心动作中世纪奇幻游戏。你将首先关注的机制可能就是攻击敌人的动作。
- en: What is the purpose of the combat system?
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 战斗系统的目的是什么？
- en: Regardless of the theme of your game and its vision, the fact that we are talking
    about an action game already provides some insights.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你的游戏主题和愿景是什么，我们正在讨论的是一款动作游戏，这本身就已经提供了一些见解。
- en: An action-oriented combat game challenges the player's physical skills and leverages
    their knowledge of the available game actions. So, one of the requirements would
    certainly be the use of the player's hand-eye coordination skills. It should also
    use memory skills, for pulling out combos or special attacks by pressing key combinations.
    The goal of such mechanics is usually to give to the player a skill-based system,
    easy to learn but difficult to master, to fight different enemies using different
    weapons and tactics.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 以动作为导向的战斗游戏挑战玩家的身体技能，并利用他们对可用游戏动作的了解。因此，一个要求肯定就是使用玩家的手眼协调技能。它还应该使用记忆技能，通过按键组合来拉出连招或特殊攻击。这类机制的目标通常是给玩家提供一个基于技能的系统，易于学习但难以精通，以便使用不同的武器和战术与不同的敌人作战。
- en: Rules and game mechanics
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 规则和游戏机制
- en: Rules are extremely important to any game. According to different definitions
    of game mechanics, they might not be defined as mechanics themselves, but as a
    part of them. Rules for our combat system could be, for example, the number of
    attacks per second the player can perform. Rules can define constraints for actions
    or conditions to be respected (a victory condition, for example). Rules make games
    exciting because they determine the space in which the game's actions can take
    place.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 规则对任何游戏都极其重要。根据不同的游戏机制定义，它们可能不被定义为机制本身，而是作为它们的一部分。例如，我们战斗系统的规则可能是玩家每秒可以执行的攻击次数。规则可以定义对行动或必须遵守的条件（例如胜利条件）的限制。规则使游戏变得有趣，因为它们决定了游戏行动可以发生的空间。
- en: Imagine a Hide and Seek game where the seeker doesn't have to close his eyes
    while the other players are hiding. That would be the most boring Hide and Seek
    game ever! The rule that states the seeker has to close their eyes and count to
    a predetermined number is there to force a challenge that makes the game fun—a
    challenge for both the seeker, who can't look where players are hiding, and the
    hiders, who have a limited time to hide.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一个捉迷藏游戏，寻找者不需要在其他人藏匿时闭上眼睛。那将是史上最无聊的捉迷藏游戏！规定寻找者必须闭上眼睛并数到一个预定的数字，是为了强制一个使游戏变得有趣挑战——对寻找者来说，他们不能看到玩家藏匿的地方，对藏匿者来说，他们有有限的时间来藏匿。
- en: We could say that this rule is not a mechanic in itself. The two main mechanics
    in Hide and Seek are for the seeker to Seek and for the hiders to Hide. The rule
    is part of the Seek mechanic, but nonetheless is a fundamental part of the game.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以说，这个规则本身并不是一个机制。在捉迷藏中，有两个主要的机制：寻找者寻找和隐藏者隐藏。规则是寻找机制的一部分，但无论如何，它是游戏的基本部分。
- en: It might be difficult to distinguish between a mechanic and a rule; again, this
    would be a theoretical effort, which we don't want to tackle in this book.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 区分机制和规则可能有些困难；再次强调，这将是理论上的努力，我们不想在本书中探讨这一点。
- en: What is important is that you understand that mechanics and rules need to come
    together and be considered at the same time while designing a game.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是你要理解，在游戏设计时，机制和规则需要结合起来，同时考虑。
- en: Mechanics and dynamics produce feedback
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 机制和动态产生反馈
- en: Finally, there is feedback, probably the most important part of a game mechanic
    in video games.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，是反馈，这可能是电子游戏中游戏机制最重要的部分。
- en: 'Wikipedia gives the following definition of video games:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 维基百科给出了以下关于电子游戏的定义：
- en: '"A video game is an electronic game that involves interaction with a user interface
    to generate visual feedback on a video device".'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '"电子游戏是一种涉及与用户界面交互以在视频设备上生成视觉反馈的电子游戏"。'
- en: The word feedback is part of the very definition of video games.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '"反馈"这个词本身就是电子游戏定义的一部分。'
- en: We could argue that the Wikipedia definition is not complete (or up to date),
    as that feedback is not necessarily visual. It can well be audio or even haptic
    (the most traditional haptic feedback is the vibration of a console controller,
    but haptic feedback and devices are evolving at an incredible pace with the growth
    of virtual reality).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以争论维基百科的定义并不完整（或已过时），因为这种反馈不一定是视觉的。它可以是音频的，甚至是触觉的（最传统的触觉反馈是游戏控制器的震动，但随着虚拟现实的发展，触觉反馈和设备正以惊人的速度发展）。
- en: Feedback is everywhere in video games and is at the core of any game mechanic.
    For every player's action, there must correspond a change in the game that is
    immediately appreciable.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子游戏中，反馈无处不在，并且是任何游戏机制的核心。对于每个玩家的动作，游戏必须有一个立即可感知的变化与之对应。
- en: The fact that Mario jumps on the screen when you hit a specific button on the
    controller is a feedback, as is the iconic bounce sound that he makes.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在控制器上按下特定的按钮时，马里奥在屏幕上跳跃，以及他发出的标志性弹跳声，这些都是反馈。
- en: 'Feedback is not limited to the player''s immediate actions though. An Experience
    Points (XP) progress bar is a visual feedback that provides the player valuable
    information about how many XP points they need for the next level. More importantly,
    that XP bar could flash and make a little progress every time the player accomplishes
    an action that rewards XP. This is a fantastic way to teach the player about cause-effect
    relations in the game:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈不仅限于玩家的即时动作。经验值（XP）进度条是一种视觉反馈，它为玩家提供了关于他们需要多少XP点才能达到下一级的重要信息。更重要的是，每当玩家完成一次奖励XP的动作时，XP条会闪烁并稍微前进。这是一种教授玩家游戏中的因果关系关系的绝佳方式：
- en: '![](img/00010.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00010.jpg)'
- en: The result screen at the end of every match in Overwatch is full of visual feedback.
    It does an excellent job in providing information about the player's performance,
    progression, and what is about to happen now that the match is over.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在《守望先锋》每一场比赛结束时，结果屏幕充满了视觉反馈。它出色地提供了关于玩家表现、进度以及比赛结束后即将发生的事情的信息。
- en: Feedback is also essential to understand the game's world and logic. Imagine
    if the same action performed in the same circumstances doesn't produce the same
    result (and feedback) every time. That would be extremely frustrating for the
    player and undermine the fun of the game. For example, you know that you can fire
    your weapon in a shooter game with a specific button, let's say R2 on a PlayStation's
    controller. Every time you press that button, you expect your weapon to shoot.
    If once in a while, the same button produces a different effect, such as for example
    throwing your weapon at the enemy instead of shooting, we would have an infuriated
    player. For the same reason, if the weapon is jammed or must be reloaded before
    shooting, we expect the game to somehow tell us that the shooting is not available
    and that we need to reload. The outcome of pressing the same button, in this case,
    would actually be different (shoot if the weapon is loaded, don't if it's not),
    but the feedback given to the player must describe what is going on as best as
    possible.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 反馈对于理解游戏世界和逻辑同样至关重要。想象一下，如果在相同的情况下执行相同的动作每次都不产生相同的结果（和反馈），这对玩家来说将是非常令人沮丧的，并会削弱游戏的乐趣。例如，你知道在射击游戏中你可以通过按下特定的按钮来开火，比如在PlayStation控制器上的R2按钮。每次你按下这个按钮，你都期望你的武器开火。如果偶尔，同样的按钮会产生不同的效果，比如例如将武器扔向敌人而不是射击，我们就会有一个愤怒的玩家。出于同样的原因，如果武器卡住了或者必须重新装填才能射击，我们期望游戏以某种方式告诉我们射击不可用，我们需要重新装填。在这种情况下，按下相同按钮的结果实际上会不同（如果武器已装填则射击，如果没有则不射击），但提供给玩家的反馈必须尽可能详细地描述正在发生的事情。
- en: Finding the right reference
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找合适的参考
- en: How can you create a game mechanic based on an existing one? How do you find
    the right reference to start creating your own?
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何基于现有的游戏机制创建一个新机制？你如何找到合适的参考来开始创建自己的？
- en: The first step is to look for games that include mechanics and features similar
    to what you are envisioning for your game. Your game concept should give you a
    clear idea of which games you should look at.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是寻找包含与你为游戏设想的功能和机制类似的游戏。你的游戏概念应该给你一个明确的想法，你应该查看哪些游戏。
- en: 'At this point, you should have a clear idea of who your competitors are (as
    we have seen in [`Chapter 2`](index_split_047.html#filepos149451), Game Concept)
    and it is important to look at your competition''s game mechanics with special
    attention. This is for two reasons:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经清楚地知道你的竞争对手是谁（如我们在[第2章](index_split_047.html#filepos149451)中看到的，游戏概念），并且仔细观察你的竞争对手的游戏机制非常重要。这是两个原因：
- en: Here you will find the basic mechanics of your game
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里，你将找到你游戏的基本机制
- en: It will give you a clear idea of how games similar to yours play. Your goal
    is to make something different in the end, not just copy-paste what's already
    been done!
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将给你一个清晰的想法，了解类似你游戏的游戏是如何玩的。你的目标是最终做出一些不同的事情，而不仅仅是复制粘贴已经完成的事情！
- en: Let's make some practical examples.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一些实际的例子。
- en: 'Let''s say you are building a Real-Time Strategy game and need to define how
    resources are collected and managed:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在开发一款即时战略游戏，需要定义资源的收集和管理方式：
- en: '![](img/00002.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片1](img/00002.jpg)'
- en: 'In Age of Empires, the player needs to gather the resources by allocating his
    workers to the various resources: crops, forests, mines, and farms'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在《帝国时代》中，玩家需要通过分配工人到各种资源（如农作物、森林、矿山和农场）来收集资源
- en: 'You can decide to go with the classic Age of Empires approach, where resources
    are scattered around the map and you have to send a specific unit to collect them,
    or try a modern approach like in Dawn of War, where your resources are granted
    by capturing and maintaining strategic points:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择采用经典的《帝国时代》方法，其中资源散布在地图上，你必须派遣特定的单位去收集它们，或者尝试一种现代方法，比如在《战争黎明》中，你的资源是通过占领和维护战略点来获得的：
- en: '![](img/00100.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片2](img/00100.jpg)'
- en: In Dawn of War the player generates resource points by controlling strategic
    points
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在《战争黎明》中，玩家通过控制战略点来生成资源点
- en: These two are great references that you can analyze to decide which approach
    suits your game better.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个都是很好的参考，你可以分析它们来决定哪种方法更适合你的游戏。
- en: It is important to remember the concept of Unique Selling Point (USP) here.
    It is unlikely that your game is going have multiple USPs and that's totally fine!
    If resource collection is not what your game is really about, but it still needs
    a resource collection mechanic, just take what has already been built!
  id: totrans-122
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这里记住独特卖点（USP）的概念是很重要的。你的游戏不太可能有多个USP，这是完全可以接受的！如果资源收集不是你游戏真正关注的事情，但仍然需要资源收集机制，只需拿已经建立好的东西即可！
- en: Taking mechanics that work for your game from existing games is exactly what
    you need if you don't want to waste time on the corollary and focus on your true
    USP.
  id: totrans-123
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从现有游戏中提取对你游戏有效的机制，如果你不想浪费时间在相关联的事情上，专注于你的真正独特卖点（USP）的话，这正是你所需要的。
- en: 'Maybe you are building a classic 2D platformer game, with jumping between platforms
    as one of its core mechanics. The number of references you''d have to look at
    can be pretty overwhelming: Super Mario, Castlevania, Sonic, Donkey Kong, Rayman,
    Kommander Keen...there are hundreds of examples.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 也许你正在制作一款经典的2D平台游戏，其中跳跃是它的核心机制之一。你需要查阅的参考资料可能相当多：超级马里奥、恶魔城、索尼克、大金刚、雷曼、指挥官keen……有成百上千个例子。
- en: In this case, you should focus on what kind of user experience you want your
    players to have and trim down the list to only the games that have given you something
    similar.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你应该专注于你希望玩家体验的用户体验，并将列表缩减到只有那些给你带来类似体验的游戏。
- en: Yes, in order to do that, you would need to play an awful lot of games, especially
    the ones that you wouldn't consider playing as a gamer...that's part of your job!
    Classifying in your mind games and genres, and categorizing them into experiences
    is a must for any game designer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，为了做到这一点，你需要玩很多游戏，特别是那些你不会考虑作为玩家去玩的游戏……这是你工作的一部分！在心中对游戏和类型进行分类，并将它们分类为体验，对于任何游戏设计师来说都是必须的。
- en: Keep a game journal. Whenever you play a game, note down your feelings and thoughts.
    A few sentences and the date you played would be enough. It will be valuable information
    later on, even years later.
  id: totrans-127
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 保持游戏日志。每次你玩游戏时，记下你的感受和想法。几句话和游戏日期就足够了。这将是宝贵的信息，甚至多年后也是如此。
- en: Deconstructing your references
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 解构你的参考资料。
- en: Once we have found our perfect references it, is time to deconstruct them into
    smaller experiences. We need to analyze these mechanics and understand why they
    have been developed the way they have. Then we need to understand what we need
    to do in order to implement them in our game and make them work according to our
    vision.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们找到了完美的参考资料，就是将其解构为更小的体验的时候了。我们需要分析这些机制，并理解为什么它们被这样开发。然后我们需要理解我们为了在我们的游戏中实现它们并使它们按照我们的愿景工作需要做什么。
- en: Let’s go back to our previous platform game example.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们之前的平台游戏例子。
- en: 'We want to analyze the Jumping mechanic of 2D platform games. We will pick
    one of the classics: Super Mario Bros.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要分析2D平台游戏的跳跃机制。我们将选择一个经典例子：超级马里奥兄弟。
- en: Jumping is, of course, a core mechanic. But can we say something else about
    it?
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 跳跃当然是一个核心机制。但我们还能对它说些什么吗？
- en: How high can Mario jump?
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马里奥能跳多高？
- en: How much distance can he cover while jumping?
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他跳跃时能覆盖多少距离？
- en: Can you control the character once he's up in the air?
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦角色在空中，你能控制他吗？
- en: Is there any rule that directly affects the mechanic?
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有没有直接影响机制的规则？
- en: What kind of challenge is the player facing with the Jump action?
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家在跳跃动作中面临什么样的挑战？
- en: Let's try to address these questions.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试解决这些问题。
- en: The longer the player holds the JUMP button, the higher the jump will be
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 玩家按住JUMP按钮的时间越长，跳跃的高度就越高。
- en: The distance covered by the jump depends on the speed of the character when
    he jumps and the height of the jump
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃覆盖的距离取决于角色跳跃时的速度和跳跃的高度。
- en: Mario hovers into the air and the player can use directional movements to line
    up the falling to the target
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马里奥悬浮在空中，玩家可以使用方向移动来调整下落至目标位置。
- en: Mario's jumps are affected by gravity—his speed in going up is slower than coming
    down
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 马里奥的跳跃受到重力的影响——他上升的速度比下降慢。
- en: 'The challenges are:'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 挑战包括：
- en: Avoiding enemies and obstacles by jumping over them
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过跳跃避开敌人和障碍物。
- en: Landing a jump on enemies' heads to kill them
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跳跃击中敌人的头部以杀死他们。
- en: Avoiding falling into pits
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免掉入陷阱。
- en: Reaching a particular platform by jumping on it
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过跳跃到达特定的平台。
- en: Interesting findings, don't you think?
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些发现有趣，不是吗？
- en: There are various techniques to deconstruct games and game mechanics. When you
    want to understand a mechanic from an existing game, a great way to understand
    how it is made is to ask an engineer for their opinion on how he or she thinks
    it has been implemented. How does it work at a technical level? Getting insights
    on this kind of question could reveal a lot about a game mechanic!
  id: totrans-149
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 有各种方法可以解构游戏和游戏机制。当你想要理解现有游戏中的机制时，了解它是如何制作的一个好方法是询问工程师他们对如何实现它的看法。它在技术层面上是如何工作的？对这类问题的洞察可能会揭示很多关于游戏机制的信息！
- en: 'Now that we have deconstructed the Jump mechanic in Super Mario, let''s take
    another popular platform game that clearly took inspiration from the Mario: Super
    Meat Boy.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经分析了超级马里奥（Super Mario）中的跳跃机制，让我们再来看一款明显受到了马里奥启发的流行平台游戏：超级肉男孩（Super Meat
    Boy）。
- en: In Super Meat Boy the core mechanic remains the Jump action. How did the developers
    make a completely new and fresh game out of it?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在超级肉男孩中，核心机制仍然是跳跃动作。开发者是如何从它制作出一个完全新颖且清新的游戏的呢？
- en: 'First of all the gravity rule that affects Mario''s jump is simplified: Super
    Meat Boy''s jumps are symmetrical as the speed going up is the same as the speed
    going down.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，影响马里奥跳跃的重力规则被简化了：超级肉男孩的跳跃是对称的，因为上升的速度和下降的速度相同。
- en: At a first glance this seems a tiny, insignificant detail, but in reality, this
    simplification allows Meat Boy to be more reactive and controllable, with his
    jumps much more predictable than Mario's.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 初看这似乎是一个微不足道的小细节，但事实上，这种简化使得肉男孩（Meat Boy）更加反应灵敏和可控，他的跳跃比马里奥（Mario）的跳跃更加可预测。
- en: No wonder Super Meat Boy is a much more fast-paced game.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，超级肉男孩是一款节奏更快的游戏。
- en: 'The predictability of Meat Boy''s jumps serves another purpose: the player
    is often required to make a series of jumps which involves platforms that are
    off-screen at the moment he starts the sequence. So he has to take decisions and
    actions in a matter of milliseconds - something you can’t so easily do with the
    weight and physics of Mario.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 肉男孩跳跃的可预测性还服务于另一个目的：玩家通常需要在序列开始时屏幕外的平台上进行一系列跳跃。因此，他必须在毫秒内做出决定和采取行动——这是用马里奥的重量和物理特性难以轻易做到的。
- en: Another distinctive addition to Super Meat Boy's jump mechanic is Wall Jumping.
    By landing a Jump on a wall is possible to immediately Jump again in an upward
    and opposite direction from the wall. This is a simple addition that enables dynamics
    such as vertical climbing, and therefore creates a completely different and new
    game.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 超级肉男孩跳跃机制中另一个独特的添加是墙壁跳跃。通过在墙上着陆跳跃，可以立即向上和相反方向从墙上再次跳跃。这是一个简单的添加，使得垂直攀爬等动态成为可能，因此创造了一个完全不同且全新的游戏。
- en: Additive and subtractive design
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 增量和减量设计
- en: 'Our previous Super Meat Boy jump example is a perfect introduction to the topic
    we''re going to discuss: additive and subtractive design.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前的超级肉男孩跳跃例子完美地引出了我们将要讨论的主题：增量和减量设计。
- en: By taking out that gravity element, Meat Boy's developers have subtracted from
    a classic jumping mechanic, while on the other hand they have added to the mechanic
    by allowing wall jumping.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过移除重力元素，肉男孩的开发者从经典的跳跃机制中减去了一些东西，而另一方面，他们通过允许墙壁跳跃来增加了这个机制。
- en: Additive and subtractive design is the principle behind any adaptation of game
    mechanics.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 增量和减量设计是任何游戏机制改编背后的原则。
- en: Additive design, in particular, is what game developers have always used to
    create new video games. Expanding and improving existing game mechanics is the
    lifeblood of game design as much as introducing new groundbreaking ones.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是增量设计，一直是游戏开发者用来创建新视频游戏的方法。扩展和改进现有的游戏机制，对于游戏设计来说，就像引入具有突破性的新机制一样，是至关重要的。
- en: Subtractive game design though is probably even more important.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然减量游戏设计可能更为重要。
- en: We talked already about the Less is more principle and how it should be applied
    throughout the whole design and its documentation. Applying this principle in
    game mechanics is not only a matter of elegance; it can help game designers to
    discover (or re-discover) the fun at the core of game mechanics and their ease
    of use.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了“少即是多”的原则以及它应该如何在整个设计和其文档中得到应用。在游戏机制中应用这个原则不仅关乎优雅，它还能帮助游戏设计师发现（或重新发现）游戏机制核心的乐趣及其易用性。
- en: '''Subtractive design is the process of removing imperfections and extraneous
    parts in order to strengthen the core elements. You can think of a design as something
    you build up, construct and let grow, but it''s pruning away the excess that gives
    a design a sense of simplicity, elegance, and power.'''
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '''减法设计是一个去除不完美和多余部分的过程，以强化核心元素。你可以把设计想象成一件你构建、构建并让其成长的东西，但它是修剪掉多余部分，给设计带来简洁、优雅和力量的。'''
- en: – David Sirlin, Game Designer
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: – 大卫·西尔林，游戏设计师
- en: Subtractive design and examples of how it can transform good games into great
    games are everywhere in the history of video games.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 游戏设计中减法设计以及它如何将优秀的游戏转变为伟大的游戏的例子在电子游戏的历史中无处不在。
- en: 'Valve''s game Portal is a fantastic example of minimal game design. In Portal,
    you can open two different kinds of portals using a Portal Gun—orange portals
    and blue portals. The core mechanic is that you can enter an orange portal and
    come out from the Blue portal. You have no actual weapons, there is no inventory
    screen, there are no NPCs or enemies (with the exception of the turrets and the
    final boss). The controls are ultra-simplified, with action buttons only for moving,
    shooting the two kinds of portals, jumping, and carrying objects:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Valve公司的游戏《传送门》是简约游戏设计的绝佳例子。在《传送门》中，你可以使用传送门枪打开两种不同类型的传送门——橙色传送门和蓝色传送门。核心机制是你可以从橙色传送门进入并从蓝色传送门出来。你没有实际的武器，没有库存屏幕，没有NPC或敌人（除了炮塔和最终Boss）。控制操作极度简化，只有移动、射击两种传送门、跳跃和携带物体的动作按钮：
- en: '![](img/00019.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00019.jpg)'
- en: The portal mechanic in Portal
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 《传送门》中的传送门机制
- en: Portal's levels contain practically nothing except for elements that are part
    of puzzles, visual cues as hints about what you should do, and elements related
    to the story. This minimalistic design puts all the emphasis on the portal mechanic
    itself, which is incredibly fun. Basically, all you can do is shoot portals and
    move between them to solve puzzles. The fact that there are no other core mechanics
    in the game allows the designer to fully explore all the possibilities of the
    Portal mechanic, focusing on what is really fun for the player and staying away
    from anything distracting or out of context.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 《传送门》的水平几乎不包含任何东西，除了作为谜题一部分的元素、作为提示的视觉线索以及与故事相关的元素。这种简约设计将所有重点都放在了传送门机制本身上，这非常有趣。基本上，你能做的只是开枪制造传送门并在它们之间移动来解决谜题。游戏没有其他核心机制，这允许设计师完全探索传送门机制的所有可能性，专注于玩家真正觉得有趣的事情，并远离任何分散注意力或不合时宜的内容。
- en: Putting it all back together
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有这些重新组合在一起
- en: Once you have found your references, deconstructed them, taken the most significant
    elements as a base to develop your mechanics, and finally added or taken out whatever
    you needed to achieve your gameplay vision..it is finally time to test whether
    it really works!
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你找到了参考，分解了它们，以最重要的元素为基础来开发你的机制，最终添加或删除你需要的东西来实现你的游戏玩法愿景，那么就是最终测试它是否真正有效的时候了！
- en: At this point, you are probably not yet writing a detailed documentation to
    the rest of team. Most likely you are in some sort of prototyping phase. Especially
    with core mechanics, the only way to test your hypothesis (of fun) is to play
    them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你可能还没有为团队编写详细的文档。很可能是你处于某种原型阶段。特别是对于核心机制，测试你的假设（即乐趣）的唯一方法就是玩游戏。
- en: We will discuss later how to effectively prototype game mechanics and flows.
    For now, it is important that you understand that the process of creating new
    mechanics goes hand in hand with working software.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后面讨论如何有效地原型化游戏机制和流程。现在，重要的是你要理解，创建新机制的过程与工作软件是相辅相成的。
- en: The only way to know if your character's jump needs to follow a realistic physic
    or not, what the speed at which it is performed should be, and the maximum height
    is to play the game and feel whether your design assumptions were right or not.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道你的角色的跳跃是否需要遵循现实物理，执行的速度应该是多少，以及最大高度是多少，唯一的方法是玩游戏并感受你的设计假设是否正确。
- en: Or to better (and more realistically) put it, to see how they were wrong.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 或者更准确、更现实地说，看看它们是如何错误的。
- en: In this iterative process of adding and subtracting elements from your mechanics
    and tweaking their values you will eventually find the perfect gameplay feeling
    and finally fix it into your GDD...or fail and realize that some of your assumptions
    were wrong—don't be scared of failure though. The faster you fail, the more time
    you will have to get it right or decide that you’re simply going in the wrong
    direction.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个从您的机制中添加和删除元素以及调整它们价值的迭代过程中，您最终将找到完美的游戏感觉，并将其最终固定到您的游戏设计文档（GDD）中……或者失败并意识到您的一些假设是错误的——尽管如此，不要害怕失败。失败得越快，您就有更多的时间去纠正错误或决定您是否真的走错了方向。
- en: The screenshots used in this chapter are for illustrative purposes only. We
    do not recommend you to misuse these in any way. For more information please consult
    the terms and conditions of the publishers mentioned in the Disclaimer section
    of this book.
  id: totrans-178
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 本章节中使用的截图仅用于说明目的。我们不推荐您以任何方式滥用这些截图。如需更多信息，请参阅本书免责声明部分提到的出版商的条款和条件。
- en: Summary
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 摘要
- en: We have explored in this chapter the basic elements that form a game and how
    they interact, creating dynamics. We discovered the importance of playing many
    different games and being able to recall their core mechanics in order to find
    useful references for the creation of your own. We also learned some valuable
    design principles that will help us to adapt existing mechanics into something
    new and true to our game's vision.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了构成游戏的基本元素以及它们如何相互作用，从而创造动态。我们发现，玩许多不同的游戏并能够回忆起它们的核心理念，对于您自己游戏创作的有用参考至关重要。我们还学习了一些有价值的游戏设计原则，这些原则将帮助我们将现有机制适应成新的、符合我们游戏愿景的东西。
- en: With this solid base taken on board, we're ready to move to the next chapter,
    where we're going to learn an even more difficult art—The creation of new mechanics
    and the search for innovative gameplay.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个坚实的基础之上，我们准备进入下一章，我们将学习一项更加困难的技艺——新机制的创作和寻找创新的游戏玩法。
