["```cs\nusing UnityEngine.Audio;\npublic class AudioManager : MonoBehaviour\n{\n    [SerializeField] private AudioMixerGroup _groupMusic;\n    [SerializeField] private AudioMixerGroup _groupSFX;\n    [SerializeField] private AudioMixerGroup _groupAmbient;\n    private AudioSource _audioSource2D, _audioSourceMusic;\n}\n```", "```cs\npublic enum AudioType { Music, SFX, Ambient };\nprivate AudioMixerGroup\n    GetAudioMixerGroup(AudioType audioType)\n        => audioType switch\n    {\n        AudioType.SFX => _groupSFX,\n        AudioType.Music => _groupMusic,\n        AudioType.Ambient => _groupAmbient,\n    };\n```", "```cs\npublic static AudioManager Instance { get; private set; }\nprivate void Awake()\n{\n    if (Instance == null)\n        Instance = this;\n    else\n        Destroy(gameObject);\n    DontDestroyOnLoad(gameObject);\n}\n```", "```cs\npublic class AudioPlayerMusic : MonoBehaviour\n{\n    [SerializeField] private AudioClip _musicClip;\n    [SerializeField] private bool _playOnStart = true;\n    private void Start()\n    {\n        if (_playOnStart)\n            Play();\n    }\n    private void Play()\n        => AudioManager.Instance.PlayMusic(_musicClip);\n}\n```", "```cs\npublic void PlayMusic(AudioClip clip)\n{\n    if (_audioSourceMusic == null)\n        _audioSourceMusic =\n            gameObject.AddComponent<AudioSource>();\n    _audioSourceMusic.outputAudioMixerGroup = _groupMusic;\n    _audioSourceMusic.clip = clip;\n    _audioSourceMusic.spatialBlend = 0f; // 2D\n    _audioSourceMusic.loop = true;\n    _audioSourceMusic.Play();\n}\n```", "```cs\ngameObject.AddComponent<AudioSource>();\n```", "```cs\nusing AudioType = AudioManager.AudioType;\npublic interface IPlaySound\n{\n    AudioType PlayAudioType { get; }\n    void PlaySound(AudioSource source);\n}\n```", "```cs\nusing AudioType = AudioManager.AudioType;\npublic class AudioPlayerSFX : MonoBehaviour, IPlaySound\n{\n    [SerializeField] private AudioClip _audioClip;\n    [Range(0f, 1f)]\n    [SerializeField] private float _volume = 1f;\n    public void Play() =>\n        AudioManager.Instance.PlayAudio(this);\n}\n```", "```cs\n    public AudioType PlayAudioType => AudioType.SFX;\n    public void PlaySound(AudioSource source)\n        => source.PlayOneShot(_audioClip, _volume);\n```", "```cs\n    public void PlayAudio(\n        IPlaySound player,\n        AudioSource source = null)\n    {\n        if (source == null)\n            source = AudioSourcePlaySFX;\n        source.outputAudioMixerGroup =\n            GetAudioMixerGroup(player.PlayAudioType);\n        player.PlaySound(source);\n    }\n```", "```cs\nprivate AudioSource AudioSourcePlaySFX\n{\n    get\n    {\n        if (_audioSource2D == null)\n        {\n            _audioSource2D = new\n                GameObject().AddComponent<AudioSource>();\n            _audioSource2D.spatialBlend = 0f; // 2D\n        }\n        return _audioSource2D;\n    }\n}\n```", "```cs\nusing AudioType = AudioManager.AudioType;\n[RequireComponent(typeof(AudioSource))]\npublic class AudioPlayerSFX3D : MonoBehaviour, IPlaySound\n{\n    [SerializeField] private AudioSource _audioSource;\n    private void OnValidate()\n        => _audioSource = GetComponent<AudioSource>();\n}\n```", "```cs\npublic class AudioPlayerSFX3D : MonoBehaviour, IPlaySound\n{\n    …\n    [SerializeField] private AudioClip _audioClip;\n    [Range(0f, 1f)]\n    [SerializeField] private float _volume = 1f;\n    [Tooltip(\"0 = 2D, 1 = 3D\"), Range(0f, 1f)]\n    [SerializeField] private float _blend2Dto3D;\n    …\n    public void Play() =>\n        AudioManager.Instance.PlayAudio\n            (this, _audioSource);\n}\n```", "```cs\npublic class AudioPlayerSFX3D : MonoBehaviour, IPlaySound\n{\n    public AudioType PlayAudioType => AudioType.SFX;\n    …\n    public void PlaySound(AudioSource source)\n    {\n        source.spatialBlend = _blend2Dto3D;\n        source.PlayOneShot(_audioClip, _volume);\n    }\n}\n```", "```cs\n[RequireComponent(typeof(AudioSource))]\npublic class AudioPlayerAmbient : MonoBehaviour, IPlaySound\n{\n    [SerializeField] private AudioSource _audioSource;\n    private void OnValidate()\n        => _audioSource = GetComponent<AudioSource>();\n}\n```", "```cs\npublic class AudioPlayerAmbient : MonoBehaviour, IPlaySound\n{\n    …\n    [SerializeField] private AudioClip _audioClip;\n    private void Start() => Play();\n    public void Play() =>\n        AudioManager.Instance.PlayAudio(this, _audioSource);\n}\n```", "```cs\nusing AudioType = AudioManager.AudioType;\n…\npublic class AudioPlayerAmbient : MonoBehaviour, IPlaySound\n{\n    public AudioType PlayAudioType => AudioType.Ambient;\n    …\n    public void PlaySound(AudioSource source)\n    {\n        source.clip = _audioClip;\n        source.spatialBlend = 1f;   // 3D\n        source.loop = true;\n        source.Play();\n    }\n}\n```", "```cs\n[RequireComponent(typeof(AudioPlayerSFX))]\npublic class AudioPlayerFootsteps : MonoBehaviour\n{\n    [SerializeField]\n    private float _walkInterval = 0.5f;\n    private AudioPlayerSFX _playerSFX;\n    private float _timerStep;\n    private void OnValidate()\n        => _playerSFX = GetComponent<AudioPlayerSFX>();\n    private void Start()\n        => _timerStep = _walkInterval;\n}\n```", "```cs\npublic class AudioPlayerFootsteps : MonoBehaviour\n{\n    …\n    [SerializeField]\n    private AudioClip[] _footstepSounds;\n    …\n    private void Update()\n    {\n        float currentStepInterval = _walkInterval;\n        _timerStep -= Time.deltaTime;\n        if (_timerStep <= 0)\n        {\n            _playerSFX.Play(_footstepSounds[\n                Random.Range(0, _footstepSounds.Length)]);\n            _timerStep = currentStepInterval;\n        }\n    }\n}\n```", "```cs\n    AudioClip GetRandomFootstepClip()\n        => _footstepSounds[\n            Random.Range(0, _footstepSounds.Count)];\n```", "```cs\n    if (_timerStep <= 0)\n    {\n        _playerSFX.Play(GetRandomFootstepClip());\n```", "```cs\n    public void Play(AudioClip clip)\n    {\n        _audioClip = clip;\n        AudioManager.Instance.PlayAudio(this);\n    }\n```", "```cs\n    [SerializeField]\n    private CharacterController _characterController;\n```", "```cs\n    private void Update()\n    {\n        if (!_characterController.isGrounded\n            || _characterController.velocity.magnitude <= 0)\n            return;\n        …\n```", "```cs\nusing UnityEngine.InputSystem;\npublic class AudioPlayerFootsteps : MonoBehaviour\n{\n    …\n    [SerializeField] private float _sprintInterval = 0.3f;\n    private bool _isSprinting;\n    …\n    public void OnSprint(InputValue value)\n        => _isSprinting = value.isPressed;\n}\n```", "```cs\n    private void Update()\n    {\n        if (!_characterController.isGrounded\n            || _characterController.velocity.magnitude <= 0)\n            return;\n        float currentStepInterval =\n            _isSprinting ? _sprintInterval : _walkInterval;\n        …\n```", "```cs\n_audioSourceMusic.bypassReverbZones = true;\n```", "```cs\nusing AudioType = AudioManager.AudioType;\npublic abstract class AudioPlayerBase : MonoBehaviour, IPlaySound\n{\n    [SerializeField] protected AudioClip _audioClip;\n    public abstract AudioType PlayAudioType { get; }\n    public virtual void PlaySound(AudioSource source)\n        => source.PlayOneShot(_audioClip);\n    public virtual void Play()\n        => AudioManager.Instance.PlayAudio(this);\n}\n```"]