["```cs\n<body>\n<div id=\"app\">\n<svg class=\"loading-progress\">\n<circle r=\"40%\" cx=\"50%\" cy=\"50%\" />\n<circle r=\"40%\" cx=\"50%\" cy=\"50%\" />\n</svg>\n<div id=\"loading-progress-text\"></div>\n</div>\n<div id=\"blazor-error-ui\">\n        An unhandled error has occurred.\n    <a href=\"\" class=\"reload\">Reload</a>\n<a class=\"dismiss\"> / </a>\n</div>\n<script\nsrc=\"img/AuthenticationService.js\">\n</script>\n<script src=\"img/blazor.webassembly.js\"></script>\n</body> \n```", "```cs\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\nbuilder.RootComponents.Add< HeadOutlet>(\"head::after\");\n// Services added to the application\n// Dependency Injection engine declared with statements like:\n// builder.Services.Add...\nawait builder.Build().RunAsync(); \n```", "```cs\n<CascadingAuthenticationState>\n<Router AppAssembly=\"@typeof(App).Assembly\">\n<Found Context=\"routeData\">\n<AuthorizeRouteView RouteData=\"@routeData\"\n DefaultLayout=\"@typeof(MainLayout)\">\n<NotAuthorized>\n         @*Template that specifies what to show\n           when user is not authorized *@\n        </NotAuthorized>\n</AuthorizeRouteView>\n<FocusOnNavigate RouteData=\"@routeData\" Selector=\"h1\">\n</Found>\n<NotFound Layout=\"@typeof(MainLayout)\">\n<PageTitle>Not found<PageTitle>\n<LayoutView Layout=\"@typeof(MainLayout)\">\n<p>Sorry, there's nothing at this address.</p>\n</LayoutView>\n</NotFound>\n</Router>\n</CascadingAuthenticationState> \n```", "```cs\n<RouteView RouteData=\"@routeData\" DefaultLayout=\"@typeof(MainLayout)\" /> \n```", "```cs\n<article class=\"content px-4\">\n      @Body\n</article> \n```", "```cs\n<NotAuthorized>\n@if (!context.User.Identity.IsAuthenticated)\n{\n  <RedirectToLogin />\n}\nelse\n{\n  <p role =\"alert\">You are not authorized to access this resource.</p>\n}\n</NotAuthorized> \n```", "```cs\n@page \"/counter\"\n@layout MyCustomLayout\n@namespace BlazorReview.Pages\n@using Microsoft.AspNetCore.Authorization\n@implements MyInterface\n@inherits MyParentComponent\n@typeparam T\n@attribute [Authorize]\n@inject NavigationManager navigation \n```", "```cs\n@code{\n ...\n private string myField=\"0\";\n [Parameter]\n public int Quantity {get; set;}=0;\n private void IncrementQuantity ()\n {\n         Quantity++;\n }\n private void DecrementQuantity ()\n {\n        Quantity--;\n        if (Quantity<0) Quantity=0;\n }\n ...\n} \n```", "```cs\n<OrderItem Quantity =\"2\" Id=\"123\"/> \n```", "```cs\nOrderItem/{id}/{quantity}\nOrderItem/{id}?quantity = 123 \n```", "```cs\n[Parameter]\n[SupplyParameterFromQuery]\npublic int Quantity {get; set;}=0; \n```", "```cs\n<modal title='() => \"Test title\" ' ...../> \n```", "```cs\n<myGeneric T= \"string\"...../> \n```", "```cs\npublic partial class Counter\n{\n  [Parameter]\n  public int CurrentCounter {get; set;}=0;\n  ...\n  ...\n} \n```", "```cs\n<head>\n    ...\n    <link href=\"BlazorReview.Client.styles.css\" rel=\"stylesheet\" />\n</head> \n```", "```cs\n<div  @attributes=\"AdditionalAttributes\">\n...\n</div>\n@code{\n [Parameter(CaptureUnmatchedValues = true)]\n public Dictionary<string, object>\n AdditionalAttributes { get; set; }\n [Parameter]\n Public T Value {get; set;}\n} \n```", "```cs\n<Detail Value=\"myObject\" class=\"my-css-class\"/> \n```", "```cs\nRenderFragment myRenderFragment = @<p>The time is @DateTime.Now.</p>;\nRenderFragment<Customer> customerRenderFragment =\n(item) => @<p>Customer name is @item.Name.</p>; \n```", "```cs\nRenderFragment myRenderFragment = ...\n  ...\n<div>\n  ...\n  @myRenderFragment\n  ...\n</div>\n  ... \n```", "```cs\nCustomer myCustomer = ...\n  ...\n<div>\n  ...\n  @myRenderFragment(myCustomer)\n  ...\n</div>\n  ... \n```", "```cs\n[Parameter]\nPublic RenderFragment<Customer>CustomerTemplate {get; set;}\n[Parameter]\nPublic RenderFragment Title {get; set;} \n```", "```cs\n<Detail>\n<Title>\n<h5>This is a title</h5>\n</Title>\n<CustomerTemplate Context=customer>\n<p>Customer name is @customer.Name.</p>\n  </CustomerTemplate>\n</Detail> \n```", "```cs\n[Parameter]\nPublic RenderFragment<Customer> ChildContent {get; set;}\n……………\n……………\n<IHaveJustOneRenderFragment Context=customer>\n  <p>Customer name is @customer.Name.</p>\n</IHaveJustOneRenderFragment> \n```", "```cs\n@typeparam T\n@foreach(var item in Values)\n{\n  @ChildContent(item)\n}\n@code {\n    [Parameter]\n    public RenderFragment<T> ChildContent { get; set; }\n    [Parameter]\n    public IEnumerable<T> Values { get; set; }\n} \n```", "```cs\n<Repeater Values=\"forecasts\" Context=\"forecast\">\n<tr>\n<td>@forecast.Date.ToShortDateString()</td>\n<td>@forecast.TemperatureC</td>\n<td>@forecast.TemperatureF</td>\n<td>@forecast.Summary</td>\n</tr>\n</Repeater> \n```", "```cs\n<CascadingValue Value=\"new MyOptionsInstance{...}\">\n……\n</CascadingValue> \n```", "```cs\n[CascadingParameter]\nprivate MyOptionsInstance options {get; set;} \n```", "```cs\n<div id=\"blazor-error-ui\">\n        An unhandled error has occurred.\n    <a href=\"\" class=\"reload\">Reload</a>\n<a class=\"dismiss\"> / </a>\n</div> \n```", "```cs\n<Repeater Values=\"forecasts\" Context=\"forecast\">\n<tr>\n<ErrorBoundary>\n<ChildContent>\n<td>@forecast.Date.ToShortDateString()</td>\n<td>@forecast.TemperatureC</td>\n<td>@forecast.TemperatureF</td>\n<td>@forecast.Summary</td>\n</ChildContent>\n<ErrorContent>\n<td colspan=\"4\" class=\"my-error\">Nothing to see here. Sorry!</td>\n</ErrorContent>\n</ErrorBoundary>\n</tr>\n</Repeater> \n```", "```cs\n<p role=\"status\">Current count: @currentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\nprivate int currentCount = 0;\nprivate void IncrementCount()\n    {\n        currentCount++;\n    }\n} \n```", "```cs\nawait MyEvent.InvokeAsync() \n```", "```cs\nawait MyIntEvent.InvokeAsync(arg) \n```", "```cs\n[Parameter]\npublicEventCallback MyEvent {get; set;}\n[Parameter]\npublicEventCallback<int> MyIntEvent {get; set;}\n...\n...\n<ExampleComponent\nMyEvent=\"() => ...\"\nMyIntEvent = \"(i) =>...\" /> \n```", "```cs\n@onkeypress=\"KeyHandler\" @onkeypress:preventDefault=\"true\"\n@onkeypress:stopPropagation  =\"true\" \n```", "```cs\n<MyComponent @bind-Value=\"MyObject.MyProperty\"/> \n```", "```cs\n<input type=\"text\" @bind=\"Value\" @attributes=\"AdditionalAttributes\"/>\n<button class=\"btn btn-secondary\" @onclick=\"Confirmed\">@ButtonText</button>\n@code {\n    [Parameter(CaptureUnmatchedValues = true)]\n    public Dictionary<string, object> AdditionalAttributes { get; set; }\n    [Parameter]\n    public string Value {get; set;}\n    [Parameter]\n    public EventCallback<string> ValueChanged { get; set; }\n    [Parameter]\n    public string ButtonText { get; set; }\n    async Task Confirmed()\n    {\n        await ValueChanged.InvokeAsync(Value);\n    }\n} \n```", "```cs\n<ConfirmedText @bind-Value=\"textValue\" ButtonText=\"Confirm\" />\n<p>\n    Confirmed value is: @textValue\n</p>\n@code{\nprivate string textValue = null;\n} \n```", "```cs\npublic override async Task SetParametersAsync(ParameterView parameters)\n{\n  await ...\n  await base.SetParametersAsync(parameters);\n} \n```", "```cs\nprotected override void OnInitialized()\n{\n    ...\n}\nprotected override async Task OnInitializedAsync()\n{\n  await ...\n} \n```", "```cs\nprotected override async Task OnParametersSetAsync()\n{\n  await ...\n}\nprotected override void OnParametersSet()\n{\n    ...\n} \n```", "```cs\nprotected override bool ShouldRender()\n{\n...\n} \n```", "```cs\nprotected override void OnAfterRender(bool firstRender)\n{\n    if (firstRender)\n    {\n    }\n...\n}\nprotected override async Task OnAfterRenderAsync(bool firstRender)\n{\n    if (firstRender)\n    {\n        await...\n        ...\n    }\n    await ...\n} \n```", "```cs\n<EditForm Model=\"FixedInteger\"OnValidSubmit=\"@HandleValidSubmit\" >\n<DataAnnotationsValidator />\n<ValidationSummary />\n<div class=\"form-group\">\n<label for=\"integerfixed\">Integer value</label>\n<InputNumber @bind-Value=\"FixedInteger.Value\"\n id=\"integerfixed\" class=\"form-control\" />\n<ValidationMessage For=\"@(() => FixedInteger.Value)\" />\n</div>\n<button type=\"submit\" class=\"btn btn-primary\"> Submit</button>\n</EditForm> \n```", "```cs\n<InputSelect @bind-Value=\"order.ProductColor\">\n<option value=\"\">Select a color ...</option>\n<option value=\"Red\">Red</option>\n<option value=\"Blue\">Blue</option>\n<option value=\"White\">White</option>\n</InputSelect> \n```", "```cs\n<InputRadioGroup Name=\"color\" @bind-Value=\"order.Color\">\n<InputRadio Name=\"color\" Value=\"AllColors.Red\" /> Red<br>\n<InputRadio Name=\"color\" Value=\"AllColors.Blue\" /> Blue<br>\n<InputRadio Name=\"color\" Value=\"AllColors.White\" /> White<br>\n</InputRadioGroup> \n```", "```cs\n<head>\n<title>This is the title shown in the browser tab</title>\n    ...\n</head> \n```", "```cs\nvar builder = WebAssemblyHostBuilder.CreateDefault(args);\nbuilder.RootComponents.Add<App>(\"#app\");\n// The line below adds support for modifying\n// the <head> tag content\nbuilder.RootComponents.Add<HeadOutlet>(\"head::after\");\n... \n```", "```cs\n<PageTitle>This string replaces the page title</PageTitle> \n```", "```cs\n<HeadContent>\n<meta name=\"description\" content=\"This is a page description\">\n</HeadContent> \n```", "```cs\n<Modal @ref=\"myModal\">\n...\n</Modal>\n...\n<button type=\"button\" class=\"btn btn-primary\"\n   @onclick=\"() => myModal.Show()\">\n   Open modal\n</button>\n...\n@code{\nprivate Modal  myModal {get; set;}\n ...\n} \n```", "```cs\nT result = await jsRuntime.InvokeAsync<T>(\n   \"<name of JavaScript function or method>\", arg1, arg2....); \n```", "```cs\nawait jsRuntime.InvokeAsync(\n   \"<name of JavaScript function or method>\", arg1, arg2....); \n```", "```cs\nawait jsRuntime\n    .InvokeVoidAsync(\"window.localStorage.setItem\",\nmyLocalStorageKey, myStringToSave); \n```", "```cs\n_content/<dll name>/<file path relative to wwwroot> \n```", "```cs\n_content/MyCompany.MyLibrary/js/myJsFile.js \n```", "```cs\n<assembly name>.Client.styles.css \n```", "```cs\n// _content/MyCompany.MyLibrary/js/myJsFile.js  JavaScript file\nexport function myFunction ()\n{\n...\n}\n...\n//C# code\nvar module = await jsRuntime.InvokeAsync<JSObjectReference>(\n    \"import\", \"./_content/MyCompany.MyLibrary/js/myJsFile.js\");\n...\nT res= await module.InvokeAsync<T>(\"myFunction\") \n```", "```cs\n    var objRef = DotNetObjectReference.Create(myObjectInstance);\n    //pass objRef to JavaScript\n    ....\n    //dispose the DotNetObjectReference\n    objRef.Dispose() \n    ```", "```cs\n    dotnetObject.invokeMethodAsync(\"<dll name>\", \"MyMethod\", arg1, ...).\n    then(result => {...}) \n    ```", "```cs\nvar host = builder.Build();\n…\nCultureInfo.DefaultThreadCurrentCulture = new CultureInfo(…);\nCultureInfo.DefaultThreadCurrentUICulture = new CultureInfo(…);\n…\nawait host.RunAsync(); \n```", "```cs\nbuilder.services.AddScoped<AuthenticationStateProvider,\n   MyAuthStateProvider>(); \n```", "```cs\n[CascadingParameter]\nprivate Task<AuthenticationState> myAuthenticationStateTask { get; set; }\n……\nClaimsPrincipal user = (await myAuthenticationStateTask).User; \n```", "```cs\n<AuthorizeView Roles=\"Admin,SuperUser\">\n//authorized content\n</AuthorizeView> \n```", "```cs\n<AuthorizeView>\n<Authorized>\n    ...\n  </Authorized>\n<Authorizing>\n    ...\n  </Authorizing>\n<NotAuthorized>\n    ...\n  </NotAuthorized>\n</AuthorizeView> \n```", "```cs\nbuilder.Services.AddOidcAuthentication(options =>\n{\n    // Configure your authentication provider options here.\n// For more information, see https://aka.ms/blazor-standalone-auth\n    builder.Configuration.Bind(\"Local\", options.ProviderOptions);\n}); \n```", "```cs\n{\n\"Local\": {\n\"Authority\": \"{AUTHORITY}\",\n\"ClientId\": \"{CLIENT ID}\"\n}\n} \n```", "```cs\n{\n\"Local\": {\n\"Authority\": \"https://accounts.google.com/\",\n\"ClientId\": \"2...7-e...q.apps.googleusercontent.com\",\n\"PostLogoutRedirectUri\": \"https://localhost:5001/authentication/logout-callback\",\n\"RedirectUri\": \"https://localhost:5001/authentication/login-callback\",\n\"ResponseType\": \"id_token\"\n}\n} \n```", "```cs\n@page \"/authentication/{action}\"\n@using Microsoft.AspNetCore.Components.WebAssembly.Authentication\n<RemoteAuthenticatorView Action=\"@Action\"  />\n@code{\n    [Parameter] public string Action { get; set; }\n} \n```", "```cs\nbuilder.Services.AddHttpClient(\"BlazorReview.ServerAPI\", client =>\n         client.BaseAddress = new Uri(\"https://<web api URL>\"))\n.AddHttpMessageHandler<BaseAddressAuthorizationMessageHandler>(); \n```", "```cs\nprotected override async Task<HttpResponseMessage> SendAsync(\n        HttpRequestMessage request,\n        CancellationToken cancellationToken)\n{\n//modify request\n   ...\nHttpResponseMessage= response = await base.SendAsync(\n   request, cancellationToken);\n//modify response\n   ...\nreturn response;\n} \n```", "```cs\ntry\n{\n        //server call here\n}\ncatch (AccessTokenNotAvailableException exception)\n{\n        exception.Redirect();\n} \n```", "```cs\nbuilder.Services.AddCors(o => {\n    o.AddDefaultPolicy(pbuilder =>\n    {\n        pbuilder.AllowAnyMethod();\n        pbuilder.WithHeaders(HeaderNames.ContentType, HeaderNames.Authorization);\n        pbuilder.WithOrigins(https://<Blazor client url>, …, https://<Another client url>);\n    });\n }); \n```", "```cs\nbuilder.Services.AddScoped(sp => new HttpClient { BaseAddress = new Uri(builder.HostEnvironment.BaseAddress) }); \n```", "```cs\ndotnet workload install wasm-tools \n```", "```cs\ndotnet workload update \n```", "```cs\n<Project Sdk=\"Microsoft.NET.Sdk.BlazorWebAssembly\">\n<PropertyGroup>\n<TargetFramework>net8.0</TargetFramework>\n<RunAOTCompilation>true</RunAOTCompilation>\n</PropertyGroup>\n  ... \n```", "```cs\n public static class MauiProgram\n    {\n        public static MauiApp CreateMauiApp()\n        {\n            var builder = MauiApp.CreateBuilder();\n            builder\n                .UseMauiApp<App>()\n                .ConfigureFonts(fonts =>\n                {\n                    fonts.AddFont(\"OpenSans-Regular.ttf\", \"OpenSansRegular\");\n                });\n            builder.Services.AddMauiBlazorWebView();\n            #if DEBUG\n            builder.Services.AddBlazorWebViewDeveloperTools();\n builder.Logging.AddDebug();\n            #endif\n//this is a service\nbuilder.Services.AddSingleton<WeatherForecastService>();\n            return builder.Build();\n        }\n    } \n```", "```cs\nbuilder.Services.AddScoped(sp => new HttpClient\n{ BaseAddress = new Uri(\"https://localhost:7215\") }); \n```", "```cs\n<TargetFrameworks>net8.0-android;net8.0-ios;net8.0-maccatalyst</TargetFrameworks> \n```"]