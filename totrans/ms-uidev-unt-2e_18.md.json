["```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class Chapter14Examples : MonoBehaviour\n{\n    Animator theAnimator;\n    void Awake()\n    {\n        theAnimator = GetComponent<Animator>();\n    }\n    public void SetAnimatorParameters()\n    {\n        theAnimator.SetFloat(\"FloatParameter\", 1.0f);\n        theAnimator.SetInteger(\"IntParameter\", 1);\n        theAnimator.SetBool(\"BoolParameter\", true);\n        theAnimator.SetTrigger(\"TriggerParameter\"); // sets to true\n        theAnimator.ResetTrigger(\"TriggerParameter\"); // sets to false\n    }\n    public void ExampleFunction()\n    {\n        Debug.Log(\"The Animation Event is not sending an argument\");\n    }\n    public void ExampleParameterFunction(int value)\n    {\n        Debug.Log(\"The Animation Event sends the following value: \" + value);\n    }\n}\n```", "```cs\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\npublic class ChooseAStateBehaviour : StateMachineBehaviour\n{\n    // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state\n    //override\n    public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        // Implement state enter logic here\n    }\n    // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks\n    //override\n    public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        // Implement state update logic here\n    }\n    // OnStateExit is called when a transition ends and the state machine finishes evaluating this state\n    //override\n    public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        // Implement state exit logic here\n    }\n    // OnStateMove is called right after Animator.OnAnimatorMove()\n    //override\n    public override void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        // Implement code that processes and affects root motion\n    }\n    // OnStateIK is called right after Animator.OnAnimatorIK()\n    //override\n    public override void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        // Implement code that sets up animation IK (inverse kinematics)\n    }\n}\n```", "```cs\n    void Start()\n    {\n        // Initialize Panels on Start\n        TogglePanel(inventoryPanel, inventoryUp);\n        TogglePanel(pausePanel, pauseUp);\n    }\n    void Update()\n    {\n        // Handle inventory Panel toggle\n        if (Input.GetKeyDown(KeyCode.I) && !pauseUp)\n        {\n            inventoryUp = !inventoryUp;\n            TogglePanel(inventoryPanel, inventoryUp);\n        }\n        // Handle pause Panel toggle\n        if (Input.GetButtonDown(\"Pause\"))\n        {\n            pauseUp = !pauseUp;\n            TogglePanel(pausePanel, pauseUp);\n            Time.timeScale = pauseUp ? 0 : 1; // Pause/unpause game by setting time scale\n        }\n    }\n    ```", "```cs\n    public Animator inventoryPanelAnim;\n    public Animator pausePanelAnim;\n    ```", "```cs\n    public void FadePanel(Animator anim, bool show)\n    {\n        if (show)\n        {\n            anim.SetTrigger(\"FadeIn\");\n        }\n        else\n        {\n            anim.SetTrigger(\"FadeOut\");\n        }\n    }\n    ```", "```cs\n    void Update()\n    {\n        // inventory Panel\n        if (Input.GetKeyDown(KeyCode.I) && !pauseUp)\n        {\n            inventoryUp = !inventoryUp;\n            //TogglePanel(inventoryPanel, inventoryUp);\n            FadePanel(inventoryPanelAnimator, inventoryUp);\n        }\n        // pause Panel\n        if (Input.GetButtonDown(\"Pause\"))\n        {\n            pauseUp = !pauseUp;\n            //TogglePanel(pausePanel, pauseUp);\n            FadePanel(pausePanelAnimator, pauseUp);\n            Time.timeScale = Convert.ToInt32(pauseUp);\n        }\n    }\n    ```", "```cs\n    Time.timeScale = Convert.ToInt32(pauseUp);\n    ```", "```cs\n    // The different types of parameters\n    public enum TypesOfParameters\n    {\n        floatParam,\n        intParam,\n        boolParam,\n        triggerParam\n    }\n    // Properties of animation parameters\n    [System.Serializable]\n    public class ParameterProperties\n    {\n        public string parameterString; // What string sets it?\n        public string whichState; // Name of the state it's called from, null=not called by the state machine\n        public TypesOfParameters parameterType; // What type of Animator Parameter is it?\n        public float floatValue; // Float value required, if float\n        public int intValue; // Int value required, if int\n        public bool boolValue; // Bool value required, if bool\n    }\n    // Make a list of all animatable objects and their parameters\n    [System.Serializable]\n    public class AnimatorProperties\n    {\n        public string name; // So the name will appear in the inspector rather than \"Element 0, Element 1, etc\"\n        public Animator theAnimator; // The animator\n        public List<ParameterProperties> animatorParameters; // Its parameter properties\n    }\n    ```", "```cs\n    public List<AnimatorProperties> animatedItems; //all the animated items controlled by this state machine\n    ```", "```cs\n    Animator theStateMachine; //the state machine animator component\n    ```", "```cs\n    void Awake()\n    {\n        theStateMachine = GetComponent<Animator>(); // Get the state machine\n    }\n    ```", "```cs\n    // Functionality: Check if any of the animations need their parameters set\n    // Called from enter state\n    public void CheckForParameterSet()\n    {\n        // Loop through all of the objects\n        foreach (AnimatorProperties animatorProp in animatedItems)\n        {\n            // Loop through its set of parameters\n            foreach (ParameterProperties parameter in animatorProp.animatorParameters)\n            {\n                // Find the ones called on the current state\n                if (theStateMachine.GetCurrentAnimatorStateInfo(0).IsName(parameter.whichState))\n                {\n                    // Determine parameter type\n                    // Float types\n                    if (parameter.parameterType == TypesOfParameters.floatParam)\n                    {\n                        animatorProp.theAnimator.SetFloat(parameter.parameterString, parameter.floatValue);\n                    }\n                    // Int types\n                    else if (parameter.parameterType == TypesOfParameters.intParam)\n                    {\n                        animatorProp.theAnimator.SetInteger(parameter.parameterString, parameter.intValue);\n                    }\n                    // Bool type\n                    else if (parameter.parameterType == TypesOfParameters.boolParam)\n                    {\n                        animatorProp.theAnimator.SetBool(parameter.parameterString, parameter.boolValue);\n                    }\n                    // Trigger type\n                    else\n                    {\n                        animatorProp.theAnimator.SetTrigger(parameter.parameterString);\n                    }\n                }\n            }\n        }\n    }\n    ```", "```cs\n    ChestAnimControls theControllerScript;\n    public void Awake()\n    {\n        // Get the script that holds the state machine logic\n        theControllerScript = FindObjectOfType<ChestAnimControls>();\n    }\n    // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state\n    public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        theControllerScript.CheckForParameterSet();\n    }\n    ```", "```cs\n    // Called by player interactions (Waiting On Player)\n    public void PlayerInputTrigger(string triggerString)\n    {\n        theStateMachine.SetTrigger(triggerString);\n    }\n    ```", "```cs\n    using UnityEngine.UI;\n    ```", "```cs\n    Text buttonText;\n    Animator chestAnimController;\n    void Awake()\n    {\n        buttonText = transform.GetComponentInChildren<Text>();\n        chestAnimController = Camera.main.GetComponent<Animator>();\n    }\n    public void OpenOrClose()\n    {\n        Debug.Log(\"click\");\n        if (buttonText.text == \"Open\")\n        {\n            chestAnimController.SetTrigger(\"OpenChest\");\n            SetText(\"Close\");\n        }\n        else\n        {\n            chestAnimController.SetTrigger(\"CloseChest\");\n            SetText(\"Open\");\n        }\n    }\n    public void SetText(string setTextTo)\n    {\n        buttonText.text = setTextTo;\n    }\n    ```", "```cs\n    Animator chestAnimController;\n    void Awake()\n    {\n        chestAnimController = Camera.main.GetComponent<Animator>();\n    }\n    // Call as an animation event on the last frame of animations\n    public void ProceedStateMachine()\n    {\n        chestAnimController.SetTrigger(\"AnimationComplete\");\n    }\n    ```", "```cs\n    // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state\n    override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)\n    {\n        animator.ResetTrigger(\"AnimationComplete\");\n    }\n    ```"]