["```cs\n*//public waypoint list as an array of positions* \npublic Vector3[] waypoints; \n\n```", "```cs\n*//Private static variable to store the Game Manager* \nprivate static GameManagerScript gameManager; \n\n```", "```cs\n*//If the reference to the Game Manager is missing, the script gets it* \nif(gameManager == null) { \n  gameManager = FindObjectOfType<GameManagerScript>(); \n} \n\n```", "```cs\n*//Private counter for the waypoints* \nprivate int currentWaypointNumber; \n\n```", "```cs\n*//Private constant under which a waypoint is considered reached* \nprivate const float changeDist = 0.001f; \n\n```", "```cs\nvoid FixedUpdate() { \n  *//Add here the rest of the code of this section* \n} \n\n```", "```cs\n*//if the Panda has reached the cake, then it will eat it, by triggering\n  the right animation,*\n*//and remove this script, since the State Machine Behaviour will take\n  care of removing the Panda* \nif (currentWaypointNumber == gameManager.waypoints.Length) { \n  animator.SetTrigger(AnimEatTriggerHash); \n  Destroy(this); \n  return; \n} \n\n```", "```cs\n*//Calculate the distance between the Panda and the waypoint that the\n  Panda is moving towards* \nfloat dist = Vector2.Distance(transform.position,\n  gameManager.waypoints[currentWaypointNumber]); \n\n```", "```cs\n*//If the waypoint is considered reached because below the threshold of\n  the constant changeDist*\n*//the counter of waypoints is increased, otherwise the Panda moves\n  towards the waypoint* \nif(dist <= changeDist) { \n  currentWaypointNumber++; \n}else { \n  MoveTowards(gameManager.waypoints[currentWaypointNumber]); \n} \n\n```", "```cs\n*//Private variable to store the next waypoint in the chain \n//It is serializable, so it can be set in the Inspector* \n[SerializeField] \nprivate Waypoint nextWaypoint; \n\n```", "```cs\n*//Function to retrieve the position of the waypoint* \npublic Vector3 GetPosition() { \n  return transform.position; \n} \n\n```", "```cs\n*//Function to retrieve the next waypoint in the chain* \npublic Waypoint GetNextWaypoint() { \n  return nextWaypoint; \n} \n\n```", "```cs\n*//The first waypoint of the chain* \npublic Waypoint firstWaypoint; \n\n```", "```cs\n*//Private reference to the current waypoint* \nprivate Waypoint currentWaypoint; \n\n```", "```cs\n*//Get the first waypoint from the Game Manager* \ncurrentWaypoint = gameManager.firstWaypoint; \n\n```", "```cs\nif (currentWaypoint == null) { \n  animator.SetTrigger(AnimEatTriggerHash); \n  Destroy(this); \n  return; \n} \n\n```", "```cs\nfloat dist = Vector2.Distance(transform.position,\n  currentWaypoint.GetPosition()); \n\n```", "```cs\nif(dist <= changeDist) { \n  currentWaypoint = currentWaypoint.GetNextWaypoint(); \n}else { \n  MoveTowards(currentWaypoint.GetPosition()); \n} \n\n```"]