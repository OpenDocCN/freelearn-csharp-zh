["```cs\n    public class Product\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public string Description { get; set; }\n        public float RRP { get; set; }\n    }\n```", "```cs\n    public class Order\n    {\n        public int Id { get; set; }\n        public List<Product> Products { get; set; }\n        public decimal DiscountAmount { get; set; }\n        public DateTime DeliveryDate { get; set; }\n    }\n```", "```cs\n[\n    {\n        \"Id\": 1,\n        \"Name\": \"Laptop\",\n        \"Description\": \"A high-performance laptop suitable\n                       for all your computing needs.\",\n        \"RRP\": 999.99\n    },\n    {\n        \"Id\": 2,\n        \"Name\": \"Smartphone\",\n        \"Description\": \"A latest generation smartphone with\n                       a stunning display and excellent\n                       camera.\",\n        \"RRP\": 799.99\n    },\n    {\n        \"Id\": 3,\n        \"Name\": \"Headphones\",\n        \"Description\": \"Noise-cancelling headphones with\n                       superior sound quality.\",\n        \"RRP\": 199.99\n    },\n    {\n        \"Id\": 4,\n        \"Name\": \"Smartwatch\",\n        \"Description\": \"A smartwatch with fitness tracking\n                       and health monitoring features.\",\n        \"RRP\": 299.99\n    },\n    {\n        \"Id\": 5,\n        \"Name\": \"Tablet\",\n        \"Description\": \"A lightweight tablet with a vibrant\n                       display, perfect for entertainment\n                       on the go.\",\n        \"RRP\": 399.99\n    }\n]\n```", "```cs\npublic class ProductRepository\n{\n    public List<Product> Products { get; private set; }\n}\n```", "```cs\n    public class ProductRetrievalService\n    {\n        private const string _dataPath =\n            @\"C:/Products.json\";\n        public List<Product> LoadProducts()\n        {\n            var productJson = File.ReadAllText(_dataPath);\n            return JsonSerializer\n                .Deserialize<List<Product>>(\n                    productJson\n                );\n        }\n    }\n```", "```cs\npublic static void Main(string[] args)\n{\n    var builder = WebApplication.CreateBuilder(args);\n    builder.Services.AddScoped<ProductRetrievalService>();\n    var app = builder.Build();\n    app.Run();\n}\n```", "```cs\n    app.MapGet(\"/getProductById/{id}\", (int id) =>\n    {\n    });\n```", "```cs\n  app.MapGet(\"/getProductById{id}\", (int id) =>\n  {\n      var productRepository = new ProductRepository();\n  });\n```", "```cs\npublic class ProductRepository\n{\n    public List<Product> Products { get; private set; }\n    public ProductRepository(\n        ProductRetrievalService productRetrievalService\n    )\n    {\n        Products = productRetrievalService.LoadProducts();\n    }\n}\n```", "```cs\napp.MapGet(\"/getProductById/{id}\",\n    (\n        int id,\n        [FromServices] ProductRetrievalService\n            productRetrievalService\n    ) =>\n    {\n    var productRepository = new ProductRepository(\n        productRetrievalService\n    );\n    return Results.Ok(\n        productRepository.Products\n            .FirstOrDefault(x => x.Id == id)\n    );\n});\n```", "```cs\npublic class DeliveryDateBookingService\n{\n    private ConcurrentQueue<DateTime>\n        _availableDates = new ConcurrentQueue<DateTime>();\n    public DeliveryDateBookingService()\n    {\n        _availableDates.Enqueue(DateTime.Now.AddDays(1));\n        _availableDates.Enqueue(DateTime.Now.AddDays(2));\n        _availableDates.Enqueue(DateTime.Now.AddDays(3));\n        _availableDates.Enqueue(DateTime.Now.AddDays(4));\n        _availableDates.Enqueue(DateTime.Now.AddDays(5));\n    }\n    public DateTime GetNextAvailableDate()\n    {\n        if(_availableDates.Count == 0)\n        {\n            throw new Exception(\"No Dates Available\");\n        }\n        var dequeuedDate = _availableDates\n            .TryDequeue(out var result);\n        if (dequeuedDate == false)\n        {\n            throw new Exception(\"An error occured\");\n        }\n        return result;\n    }\n}\n```", "```cs\npublic class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication\n                .CreateBuilder(args);\n            builder.Services\n                .AddScoped<ProductRetrievalService>();\n            builder.Services\n                .AddSingleton<DeliveryDateBookingService>()\n                ;\n            var app = builder.Build();\n            app.MapGet(\"/getProductById/{id}\",\n                (int id,\n                [FromServices] ProductRetrievalService\n                productRetreivalService) =>\n            {\n                var productRepository = new\n                    ProductRepository(\n                        productRetreivalService\n                );\n                return Results.Ok(\n                    productRepository.Products\n                        .FirstOrDefault(\n                            x => x.Id == id)\n                );\n            });\n            app.Run();\n        }\n    }\n```", "```cs\n  app.MapPost(\n      \"/order\",\n      (Order order,\n       [FromServices] DeliveryDateBookingService\n       deliveryDateBookingService) =>\n  {\n      order.DeliveryDate =\n          deliveryDateBookingService.GetNextAvailableDate()\n          ;\n      // save order to repository\n  });\n```", "```cs\n    public class OrderRetrievalService\n    {\n        private const string _dataPath =\n            @\"C:/Orders.json\";\n        public List<Order> LoadOrders()\n        {\n            var ordersJson = File.ReadAllText(_dataPath);\n            return JsonSerializer\n                .Deserialize<List<Order>>(ordersJson);\n        }\n    }\n    ```", "```cs\n                builder.Services\n                    .AddScoped<OrderRetrievalService>();\n    ```", "```cs\n    public class OrderRepository\n    {\n        public ConcurrentQueue<Order>\n            Orders { get; private set; }\n        public OrderRepository(\n            OrderRetrievalService orderRetrievalService)\n        {\n            var retrievedOrders =\n                orderRetrievalService.LoadOrders();\n            foreach (var order in retrievedOrders)\n            {\n                Orders.Enqueue(order);\n            }\n        }\n        public void SaveOrder(Order order)\n        {\n            Orders.Enqueue(order);\n        }\n    }\n    ```", "```cs\n                builder.Services\n                    .AddSingleton<OrderRepository>();\n    ```", "```cs\n      app.MapPost(\n          \"/order\",\n          (Order order,\n           [FromServices] DeliveryDateBookingService\n           deliveryDateBookingService,\n           [FromServices] OrderRepository\n           orderRepository) =>\n          {\n              order.DeliveryDate =\n                  deliveryDateBookingService\n                      .GetNextAvailableDate();\n              orderRepository.SaveOrder(order);\n      });\n    ```", "```cs\n  app.MapPost(\n      \"/order\",\n      (Order order,\n       IServiceProvider provider) =>\n      {\n          var deliveryDateBookingService =\n              provider.GetService\n                  <DeliveryDateBookingService>();\n          order.DeliveryDate =\n              deliveryDateBookingService\n                  .GetNextAvailableDate();\n      // save order to repository in same way we did for\n      // Product using ProductRepository\n  });\n```", "```cs\npublic static class ServiceCollectionExtensions\n{\n    public static IServiceCollection AddMyServices(\n        this IServiceCollection services)\n    {\n        services.AddScoped<IMyService, MyService>();\n        services.AddSingleton<IOtherService,\n            OtherService>();\n        return services;\n    }\n}\n```", "```cs\nbuilder.Services.AddMyServices();\n```"]