- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Visual Studio Container Tools for Docker
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Container Tools for Docker
- en: In this chapter, we will delve into the powerful integration of Docker with
    Visual Studio, a synergy that simplifies container management and accelerates
    your development workflow. We will begin by covering the basics of Docker and
    how it integrates with Visual Studio. We’ll understand the fundamental concepts
    of containerization and why it has become a cornerstone in modern development
    practices. Next, we will walk through the steps to configure our development environment
    for Docker. This includes installing necessary components, setting up Docker support
    in Visual Studio, and configuring your projects to use Docker. Then, we will dive
    into the practical aspects of converting your applications into Docker containers.
    Finally, we will explore the deployment phase. We’ll learn various methods to
    deploy our containerized applications, whether to a local Docker host, a remote
    server, or cloud platforms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨Docker与Visual Studio的强大集成，这种协同作用简化了容器管理并加速了您的开发工作流程。我们将从介绍Docker及其如何与Visual
    Studio集成的基础知识开始。我们将了解容器化的基本概念以及为什么它已成为现代开发实践的基础。接下来，我们将逐步介绍如何配置我们的开发环境以支持Docker。这包括安装必要的组件、在Visual
    Studio中设置Docker支持以及配置项目以使用Docker。然后，我们将深入探讨将应用程序转换为Docker容器的实际操作。最后，我们将探讨部署阶段。我们将学习各种将容器化应用程序部署到本地Docker主机、远程服务器或云平台的方法。
- en: 'In this chapter, we’re going to cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: Introduction to Docker and Visual Studio integration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Docker与Visual Studio集成的简介
- en: Setting up Docker environments in Visual Studio
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Visual Studio中设置Docker环境
- en: Dockerizing applications with Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Visual Studio容器化应用程序
- en: Deploying containerized applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署容器化应用程序
- en: By the end of this chapter, you will have the knowledge and skills to harness
    Docker within Visual Studio, making your development process more efficient and
    scalable, without getting out of our favorite IDE.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将具备在Visual Studio中使用Docker的知识和技能，使您的开发过程更加高效和可扩展，而无需离开我们最喜欢的IDE。
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写本章时，我使用了以下版本的Visual Studio：
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 2022 版本 17.12.0
- en: Preview 1.0
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 预览版1.0
- en: To fully follow the chapter, you will also need to install Docker Desktop.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完全跟随本章内容，您还需要安装Docker Desktop。
- en: Introduction to Docker and Visual Studio integration
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Docker与Visual Studio集成的简介
- en: The integration of containerization technologies such as Docker with powerful
    IDEs such as Visual Studio has become essential for modern application development.
    This section introduces Docker and its seamless integration within Visual Studio,
    showcasing how this combination enhances the development workflow.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将容器化技术（如Docker）与强大的IDE（如Visual Studio）集成已成为现代应用程序开发的必要条件。本节介绍了Docker及其在Visual
    Studio中的无缝集成，展示了这种组合如何增强开发工作流程。
- en: Docker, an open source platform, automates the deployment, scaling, and management
    of applications. Introduced in 2013, Docker utilizes containerization technology
    to package an application along with its environment and dependencies into a standardized
    unit called a **container** .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Docker是一个开源平台，它自动化了应用程序的部署、扩展和管理。自2013年推出以来，Docker利用容器化技术将应用程序及其环境依赖打包成一个标准化的单元，称为**容器**。
- en: '**Containers** are lightweight, standalone, and executable packages that include
    everything needed to run a piece of software, including the code, runtime, system
    tools, libraries, and settings. Sharing the host **operating system’s** ( **OS’s**
    ) kernel, containers isolate application processes from the rest of the system,
    ensuring consistent performance across various environments. This abstraction
    optimizes system resource usage and simplifies deployment and scalability.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**容器**是轻量级、独立且可执行的包，包含运行软件所需的一切，包括代码、运行时、系统工具、库和设置。容器共享主机**操作系统**（**OS**）的内核，将应用程序进程与系统其他部分隔离开来，确保在各种环境中保持一致的性能。这种抽象优化了系统资源的使用，并简化了部署和可扩展性。'
- en: 'Docker operates on a client-server model with three main components: the Docker
    client, the Docker host, and Docker Registry:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Docker基于客户端-服务器模型，有三个主要组件：Docker客户端、Docker主机和Docker Registry：
- en: '**The Docker client** : The primary user interface to Docker, accessible via
    **command-line interface** ( **CLI** ) commands. Users can build images, download
    images from a registry, run containers, and manage container networks and volumes.
    The Docker client communicates with the Docker daemon, which handles the heavy
    lifting of building, running, and managing containers.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker客户端**：Docker的主要用户界面，通过**命令行界面**（**CLI**）命令访问。用户可以构建镜像、从注册表中下载镜像、运行容器以及管理容器网络和卷。Docker客户端与Docker守护进程通信，负责构建、运行和管理容器。'
- en: '**The Docker host** : The runtime environment for containers, comprising several
    key components:'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker主机**：容器的运行环境，包括几个关键组件：'
- en: '**Docker daemon** : This runs in the background on the host machine, managing
    the building, running, and distribution of Docker containers. It listens to API
    requests from the Docker client and manages Docker objects, such as images, containers,
    networks, and volumes.'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker守护进程**：在主机机器的背景中运行，管理Docker容器的构建、运行和分发。它监听来自Docker客户端的API请求并管理Docker对象，如镜像、容器、网络和卷。'
- en: '**Containers** : Runnable instances of Docker images, encapsulating an application
    along with its environment, libraries, and dependencies.'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：Docker镜像的可运行实例，封装了应用程序及其环境、库和依赖项。'
- en: '**Images** : Read-only templates used to create containers, containing the
    application and all its dependencies.'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**图像**：用于创建容器、包含应用程序及其所有依赖项的只读模板。'
- en: '**Networks** : Custom networks configured for container communication.'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：为容器通信配置的自定义网络。'
- en: '**Storage** : Managed through volumes that persist data generated and used
    by Docker containers.'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：通过卷管理Docker容器生成和使用的数据。'
- en: '**Docker Registry** : Stores Docker images in a central repository, facilitating
    the sharing and deployment of images across different hosts. Registries can be
    public, such as Docker Hub, or private, for secure storage and management of organizational
    images.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker注册库**：在中央存储库中存储Docker镜像，便于在不同主机之间共享和部署镜像。注册库可以是公共的，如Docker Hub，也可以是私有的，用于安全存储和管理组织镜像。'
- en: Another key component of Docker is **Docker images** . Docker images are snapshots
    of a container’s configuration at a specific point in time, containing the application
    code, runtime, libraries, tools, and dependencies. They are immutable and serve
    as the basis for creating containers. Modifications to an image create new images,
    enabling consistent replication of application environments.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Docker的另一个关键组件是**Docker镜像**。Docker镜像是容器在特定时间点的配置快照，包含应用程序代码、运行时、库、工具和依赖项。它们是不可变的，并作为创建容器的依据。对镜像的修改会创建新的镜像，从而实现应用程序环境的持续复制。
- en: 'Docker uses Dockerfile to automate Docker image creation. **Dockerfile** is
    a script with instructions defining the environment in which an application will
    run. Common instructions include the following:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Docker使用Dockerfile来自动化Docker镜像的创建。**Dockerfile**是一个包含定义应用程序运行环境的指令的脚本。常见的指令包括以下内容：
- en: '**FROM** : This specifies the base image (e.g., **FROM mcr.microsoft.com/dotnet/sdk:9.0**
    uses the .NET SDK image tagged with version 9.0)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**FROM**：这指定了基本镜像（例如，**FROM mcr.microsoft.com/dotnet/sdk:9.0**使用标记为版本9.0的.NET
    SDK镜像）'
- en: '**RUN** : This executes commands in a new layer on top of the current image,
    often used for installing software packages (e.g., **RUN** **npm install** )'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RUN**：在当前镜像之上执行新层的命令，通常用于安装软件包（例如，**RUN** **npm install**）'
- en: '**CMD** : This provides defaults for executing a Docker container (e.g., **CMD
    ["** **npm", "start"]** )'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CMD**：为执行Docker容器提供默认值（例如，**CMD ["** **npm", "start"]**）'
- en: Dockerfiles streamline the setup and configuration of containers, ensuring efficient
    definition and replication of application environments across development stages.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfiles简化了容器的设置和配置，确保在开发阶段高效地定义和复制应用程序环境。
- en: Visual Studio provides robust support for Docker, enabling developers to easily
    containerize their applications and manage container orchestration directly from
    the IDE. This integration simplifies the process of developing, testing, and deploying
    containerized applications, especially for projects targeting .NET Framework,
    .NET Core, ASP.NET, and ASP.NET Core.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio为Docker提供了强大的支持，使开发者能够轻松地将应用程序容器化并直接从IDE管理容器编排。这种集成简化了开发、测试和部署容器化应用程序的过程，特别是针对目标为.NET
    Framework、.NET Core、ASP.NET和ASP.NET Core的项目。
- en: Next, we will explore how to set up a Docker environment within Visual Studio.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨如何在Visual Studio内部设置Docker环境。
- en: Setting up Docker environments in Visual Studio
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Visual Studio中设置Docker环境
- en: In this section, we will explore how to leverage Docker support. Docker support
    in Visual Studio provides a seamless experience for developing applications that
    are intended to run inside Docker containers. Docker support can be added to a
    Visual Studio project during project creation or added to an existing project.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨如何利用Docker支持。Visual Studio中的Docker支持为开发旨在在Docker容器内运行的应用程序提供了无缝体验。Docker支持可以在项目创建期间添加到Visual
    Studio项目，也可以添加到现有项目。
- en: Creating a project with Docker support
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建具有Docker支持的项目
- en: Assuming you have Docker Desktop installed and running, the first thing to do
    is to create a new project.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您已安装并运行Docker Desktop，首先要做的事情是创建一个新的项目。
- en: 'We will create an ASP.NET Core application as usual and in the **Additional
    information** window, we will check the **Enable container** **support** checkbox:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将像往常一样创建一个ASP.NET Core应用程序，并在**附加信息**窗口中勾选**启用容器支持**复选框：
- en: '![Figure 12.1 – Enable container support](img/B22218_12_1.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图12.1 – 启用容器支持](img/B22218_12_1.jpg)'
- en: Figure 12.1 – Enable container support
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.1 – 启用容器支持
- en: 'Once checked, it enables the two text boxes, **Container OS** and **Container
    build type** , to configure the container type. We can select either **Windows**
    or **Linux** for the **Container OS** option based on our requirements. For **Container
    build type** , we can select either of the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦勾选，它将启用两个文本框，**容器操作系统**和**容器构建类型**，以配置容器类型。根据我们的需求，我们可以为**容器操作系统**选项选择**Windows**或**Linux**。对于**容器构建类型**，我们可以选择以下任何一个：
- en: '**Dockerfile** : When you choose **Dockerfile** in an ASP.NET Core application,
    you are opting to manually define how your container image should be built using
    a Dockerfile. Using a Dockerfile gives you full control over the contents of your
    container image, including the base image, dependencies, environment variables,
    exposed ports, and the specific commands to run your application.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Dockerfile**：当您在ASP.NET Core应用程序中选择**Dockerfile**时，您正在选择手动定义如何使用Dockerfile构建您的容器镜像。使用Dockerfile可以让您完全控制容器镜像的内容，包括基础镜像、依赖项、环境变量、暴露的端口以及运行应用程序的特定命令。'
- en: '**.Net SDK** : Choosing **.Net SDK** simplifies the process by leveraging Visual
    Studio’s built-in container support.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**.Net SDK**：选择**.Net SDK**通过利用Visual Studio内置的容器支持简化了过程。'
- en: For the following example of this chapter, we will choose the **Dockerfile**
    option.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章的以下示例，我们将选择**Dockerfile**选项。
- en: Adding Docker support to an existing project
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Docker支持添加到现有项目
- en: 'If you have an existing project and want to add Docker support to it, we follow
    these steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个现有项目并且想要向其添加Docker支持，我们遵循以下步骤：
- en: 'To add Docker support, right-click on the project in **Solution** **Explorer**
    and navigate to **Add** | **Docker** **Support...** :'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加Docker支持，在**解决方案资源管理器**中右键单击项目，然后导航到**添加** | **Docker支持...**：
- en: '![Figure 12.2 – Adding Docker support](img/B22218_12_2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![图12.2 – 添加Docker支持](img/B22218_12_2.jpg)'
- en: Figure 12.2 – Adding Docker support
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2 – 添加Docker支持
- en: Visual Studio will generate the necessary Docker files for our project.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio将为我们的项目生成必要的Docker文件。
- en: '![Figure 12.3 – Dockerfile](img/B22218_12_3.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图12.3 – Dockerfile](img/B22218_12_3.jpg)'
- en: Figure 12.3 – Dockerfile
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3 – Dockerfile
- en: 'The following dialog will appear where you will have to configure the Docker
    settings:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将会显示以下对话框，您需要在此配置Docker设置：
- en: '![Figure 12.4 – Container Scaffolding Options](img/B22218_12_4.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图12.4 – 容器搭建选项](img/B22218_12_4.jpg)'
- en: Figure 12.4 – Container Scaffolding Options
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4 – 容器搭建选项
- en: '**Container OS** : This setting allows us to choose the OS that will be used
    inside your Docker container. When we are adding Docker support when creating
    a new project, we have the choice between Linux and Windows.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器操作系统**：此设置允许我们选择将在您的Docker容器内部使用的操作系统。当我们创建新项目时添加Docker支持，我们可以在Linux和Windows之间进行选择。'
- en: '**Container Build Type** : As previously discussed, this setting determines
    how your Docker image will be built (e.g. Dockerfile / . Net SDK).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器构建类型**：如前所述，此设置确定您的Docker镜像将如何构建（例如，Dockerfile / .Net SDK）。'
- en: '**Container Image Distro** : This setting refers to the base image distribution
    for your container. It’s particularly relevant when choosing a Linux-based container
    OS.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器镜像发行版**：此设置指的是容器的基础镜像发行版。当选择基于Linux的容器操作系统时，这一点尤其相关。'
- en: '**Docker Build Context** : The Docker build context refers to the set of files
    located in the specified patch or URL that Docker uses to build the image. Essentially,
    it defines the scope of files that Docker can access during the build process.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker 构建上下文**：Docker 构建上下文是指 Docker 在构建镜像时位于指定路径或 URL 中的文件集。本质上，它定义了 Docker
    在构建过程中可以访问的文件范围。'
- en: With Docker support added, we can now build and run our project within Docker
    containers. Visual Studio provides convenient buttons in the toolbar for building
    and running your Dockerized application.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 Docker 支持后，我们现在可以在 Docker 容器内构建和运行我们的项目。Visual Studio 在工具栏中提供了方便的按钮，用于构建和运行您的
    Docker 化应用程序。
- en: '![Figure 12.5 – Container run/debug button](img/B22218_12_5.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.5 – 容器运行/调试按钮](img/B22218_12_5.jpg)'
- en: Figure 12.5 – Container run/debug button
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.5 – 容器运行/调试按钮
- en: Now we have set Docker support up, let’s learn about how it might improve our
    productivity.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了 Docker 支持，让我们了解一下它如何可能提高我们的生产力。
- en: Dockerizing applications with Visual Studio
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Visual Studio Docker 化应用程序
- en: 'Now that we have set the Docker support up for our project, in this section,
    we will explore the Dockerizing of our application through the container window
    of Visual Studio. We can retrieve all the information of our container in the
    windows. To open this window, go to **View** | **Other Windows** | **Containers**
    :'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的项目设置了 Docker 支持，在本节中，我们将通过 Visual Studio 的容器窗口探索我们的应用程序的 Docker 化。我们可以在窗口中检索我们容器的所有信息。要打开此窗口，请转到**视图**
    | **其他窗口** | **容器**：
- en: '![Figure 12.6 – Open containers windows](img/B22218_12_6.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.6 – 打开容器窗口](img/B22218_12_6.jpg)'
- en: Figure 12.6 – Open containers windows
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.6 – 打开容器窗口
- en: 'Here, we can find the information on **Solution Containers** as well as all
    containers in our Docker Desktop:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以找到有关**解决方案容器**以及 Docker Desktop 中所有容器的信息：
- en: '![Figure 12.7 – The Containers window](img/B22218_12_7.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.7 – 容器窗口](img/B22218_12_7.jpg)'
- en: Figure 12.7 – The Containers window
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7 – 容器窗口
- en: Notice that Docker Desktop must be running on your computer to ensure that the
    Docker Engine is running and provides the necessary environment for building,
    managing, and running Docker containers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Docker Desktop 必须在您的计算机上运行，以确保 Docker 引擎正在运行并提供构建、管理和运行 Docker 容器的必要环境。
- en: The container window allows us to quickly access the containers’ information
    directly in Visual Studio in order to monitor container status, view logs, and
    manage the container life cycle without leaving Visual Studio.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 容器窗口允许我们直接在 Visual Studio 中快速访问容器的信息，以便监控容器状态、查看日志以及管理容器生命周期，而无需离开 Visual Studio。
- en: 'The toolbar allows us to manage the containers:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏允许我们管理容器：
- en: '![Figure 12.8 – Container toolbox](img/B22218_12_8.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.8 – 容器工具箱](img/B22218_12_8.jpg)'
- en: Figure 12.8 – Container toolbox
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8 – 容器工具箱
- en: 'Let’s understand these toolbar options in detail:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解这些工具栏选项：
- en: '**Start/stop** : These options allow you to manage the life cycle of the container
    directly from Visual Studio, without needing to use Docker CLI commands.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**启动/停止**：这些选项允许您直接从 Visual Studio 管理容器的生命周期，而无需使用 Docker CLI 命令。'
- en: '**Attach debugger** : For containers running applications that support debugging
    (e.g., .NET Core applications), this option allows attaching a debugger to the
    container. This enables setting breakpoints and inspecting variables as if the
    application were running locally.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**附加调试器**：对于运行支持调试的应用程序（例如 .NET Core 应用程序）的容器，此选项允许将调试器附加到容器。这使您能够设置断点并检查变量，就像应用程序在本地运行一样。'
- en: '**Open terminal** : This opens a terminal session inside the container. This
    is particularly useful for executing commands within the container’s environment.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**打开终端**：这将在容器内打开一个终端会话。这在执行容器环境中的命令时特别有用。'
- en: '**Remove container** : This allows you to delete the container. This is useful
    for cleaning up stopped containers that are no longer needed.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**删除容器**：这允许您删除容器。这对于清理不再需要的已停止容器非常有用。'
- en: Additionally, we can find panels on the right, allowing us to consult all the
    information about the container.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还可以在右侧找到面板，允许我们咨询有关容器的所有信息。
- en: 'The **Logs** pane displays the container’s logs. It’s useful for debugging
    and monitoring the container’s output:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**日志**窗格显示容器的日志。这对于调试和监控容器的输出非常有用：'
- en: '![Figure 12.9 – Containers | Logs](img/B22218_12_9.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 12.9 – 容器 | 日志](img/B22218_12_9.jpg)'
- en: Figure 12.9 – Containers | Logs
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9 – 容器 | 日志
- en: This display automatically shows when we are launching our container in debug.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在调试模式下启动容器时，此显示会自动显示。
- en: Now we can run our container without getting out of Visual Studio, let’s see
    how to deploy it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以直接在Visual Studio中运行我们的容器，让我们看看如何部署它。
- en: Deploying containerized applications
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署容器化应用程序
- en: When the application is developed, the next step is to deploy it. In this section,
    we will see the built-in options offered by Visual Studio to achieve that.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当应用程序开发完成后，下一步就是部署它。在本节中，我们将看到Visual Studio提供的内置选项以实现这一点。
- en: First, we access the publish wizard by right-clicking on the project through
    **Solution Explorer** and then selecting the **Publish…** option.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们通过**解决方案资源管理器**右键单击项目，然后选择**发布…**选项来访问发布向导。
- en: '![Figure 12.10 – Publish…](img/B22218_12_10.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图12.10 – 发布…](img/B22218_12_10.jpg)'
- en: Figure 12.10 – Publish…
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10 – 发布…
- en: We already have seen in [*Chapter 8*](B22218_08.xhtml#_idTextAnchor132) and
    [*Chapter 10*](B22218_10.xhtml#_idTextAnchor152) that it will open a window allowing
    us to choose the destination of our publication. In this chapter, we will focus
    on two options, **Docker Container Registry** and **Azure** .
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[*第8章*](B22218_08.xhtml#_idTextAnchor132)和[*第10章*](B22218_10.xhtml#_idTextAnchor152)中看到，它将打开一个窗口，允许我们选择发布的目的地。在本章中，我们将关注两个选项，**Docker容器注册库**和**Azure**。
- en: Deploying in Container Registry
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在容器注册库中部署
- en: Let’s begin with a reminder of what a container registry is. A **container registry**
    is a centralized storage and distribution system for named Docker images and their
    associated tags. It acts as a repository for container images, allowing us to
    build, share, and deploy containerized applications efficiently. Container registries
    can be either public or private, depending on whether they are accessible to everyone
    or restricted to authorized users.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先回顾一下容器注册库是什么。**容器注册库**是一个集中存储和分发命名Docker镜像及其相关标签的系统。它充当容器镜像的存储库，使我们能够高效地构建、共享和部署容器化应用程序。容器注册库可以是公共的或私有的，这取决于它们是否对所有人开放或仅限于授权用户。
- en: 'So, in this case, in the **Target** window, we will choose **Docker** **Container
    Registry** :'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这种情况下，在**目标**窗口中，我们将选择**Docker** **容器注册库**：
- en: '![Figure 12.11 – Docker Container Registry](img/B22218_12_11.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![图12.11 – Docker容器注册库](img/B22218_12_11.jpg)'
- en: Figure 12.11 – Docker Container Registry
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11 – Docker容器注册库
- en: 'Then, click **Next** to jump into the **Specific target** tab to select the
    host of our application:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击**下一步**进入**特定目标**选项卡以选择应用程序的主机：
- en: '![Figure 12.12 – Specific target Container Registry](img/B22218_12_12.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图12.12 – 特定目标容器注册库](img/B22218_12_12.jpg)'
- en: Figure 12.12 – Specific target Container Registry
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12 – 特定目标容器注册库
- en: 'Here, we have three options:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有三个选项：
- en: '**Azure Container Registry** : The **Azure Container Registry** ( **ACR** )
    is a private, managed, and secured Docker Registry provided by Azure. It allows
    us to store and manage our Docker images and related artifacts in a central registry,
    enabling reliable, secure, and scalable deployments. ACR offers secure storage
    of Docker images behind Azure’s network security and access control mechanisms.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure容器注册库**：**Azure容器注册库**（**ACR**）是Azure提供的一个私有、托管和安全的Docker注册库。它允许我们在中央注册库中存储和管理我们的Docker镜像和相关工件，从而实现可靠、安全且可扩展的部署。ACR在Azure的网络安全性和访问控制机制后面提供Docker镜像的安全存储。'
- en: '**Docker Hub** : **Docker Hub** is a public, cloud-based repository in which
    Docker users and partners create, test, store, and distribute container images.
    While not as secure or feature-rich as ACR for enterprise use, Docker Hub is widely
    used for sharing open source projects and base images.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Docker Hub**：**Docker Hub**是一个公共的、基于云的存储库，Docker用户和合作伙伴在其中创建、测试、存储和分发容器镜像。虽然不如ACR在企业使用中安全或功能丰富，但Docker
    Hub广泛用于共享开源项目和基础镜像。'
- en: '**Other Docker Container Registry** : Besides **ACR** and Docker Hub, there
    are several other container registries available, each with its own set of features
    and pricing models. Some notable ones include **Google Container Registry** (
    **GCR** ) and Amazon **Elastic Container** **Registry** ( **ECR** ).'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**其他Docker容器注册库**：除了**ACR**和Docker Hub，还有其他几个容器注册库可供选择，每个都有自己的功能和定价模式。其中一些值得注意的包括**Google容器注册库**（**GCR**）和Amazon
    **弹性容器** **注册库**（**ECR**）。'
- en: For ACR, Visual Studio will ask us to use a valid Azure subscription. On the
    other hand, it will prompt us to provide our Docker credentials if we choose Docker
    Hub.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于ACR，Visual Studio将要求我们使用有效的Azure订阅。另一方面，如果我们选择Docker Hub，它将提示我们提供我们的Docker凭据。
- en: Deploying as a service in Azure
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Azure中以服务形式部署
- en: 'Back to the **Target** window, we select **Azure** :'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到**目标**窗口，我们选择**Azure**：
- en: '![Figure 12.13 – Target Azure](img/B22218_12_13.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图12.13 – 目标Azure](img/B22218_12_13.jpg)'
- en: Figure 12.13 – Target Azure
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13 – 目标Azure
- en: This will bring us to the **Specific target** window where we find several options
    to deploy our application on our Azure subscription.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这将带我们到**特定目标**窗口，在这里我们可以找到几个选项来在我们的Azure订阅上部署我们的应用程序。
- en: '![Figure 12.14 – Specific target Azure](img/B22218_12_14.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图12.14 – 特定目标Azure](img/B22218_12_14.jpg)'
- en: Figure 12.14 – Specific target Azure
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14 – 特定目标Azure
- en: 'In this chapter, we will focus on these container options:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将关注这些容器选项：
- en: '**Azure Container Apps (Linux)** : **Azure Container Apps** is a fully managed
    service designed to run containers directly, without the need for orchestrators,
    such as Kubernetes. It’s optimized for running microservices and serverless applications,
    offering built-in support for source code repositories, CI/CD pipelines, and automatic
    scaling.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure容器应用（Linux）**：**Azure容器应用**是一个完全托管的旨在直接运行容器的服务，无需 orchestrators，如Kubernetes。它针对运行微服务和无服务器应用程序进行了优化，内置了对源代码存储库、CI/CD管道和自动扩展的支持。'
- en: '**Azure App Service Container** : **Azure App Service** is a fully managed
    platform for building, deploying, and scaling web apps. The container option within
    App Service allows us to run Docker containers, providing a simple way to deploy
    and manage containerized applications or websites.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure应用服务容器**：**Azure应用服务**是一个完全托管的平台，用于构建、部署和扩展Web应用程序。应用服务中的容器选项允许我们运行Docker容器，提供了一种简单的方式来部署和管理容器化应用程序或网站。'
- en: '**Azure Container Registry** : Here, we retrieve the ACR, which is the private,
    managed, and secured Docker Registry provided by Azure.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Azure容器注册表**：在这里，我们检索ACR，这是Azure提供的私有、托管和安全的Docker注册表。'
- en: Each option serves different needs, from serverless containers optimized for
    microservices to fully managed environments for web applications and secure, private
    registries for Docker images.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 每个选项都满足不同的需求，从针对微服务的优化型无服务器容器到用于Web应用程序的完全托管环境，再到用于Docker镜像的安全、私有注册表。
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored the robust integration between Docker and Visual
    Studio, a combination that significantly enhances your development workflow. We
    began with an introduction to Docker and Visual Studio integration, where we covered
    the basics of Docker and its significance in modern software development. The
    next section guided you through the steps to configure Docker within Visual Studio
    with Docker support. Next, we focused on the practical aspects of converting your
    applications into Docker containers. Finally, we discussed various deployment
    strategies available in Visual Studio.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了Docker和Visual Studio之间强大的集成，这种组合显著增强了您的开发工作流程。我们从介绍Docker和Visual Studio集成开始，涵盖了Docker的基本知识及其在现代软件开发中的重要性。下一节指导您在Visual
    Studio中配置Docker支持。接下来，我们关注了将您的应用程序转换为Docker容器的实际方面。最后，我们讨论了Visual Studio中可用的各种部署策略。
- en: By mastering these skills, you are now equipped to streamline your development
    process, improve deployment speed, and adopt modern DevOps practices effectively
    staying in Visual Studio.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握这些技能，您现在已经准备好简化您的开发过程，提高部署速度，并有效地采用现代DevOps实践，同时保持在Visual Studio中。
- en: In the next chapter, we will delve into crafting our own Visual Studio extensions,
    where we’ll learn how to customize and extend Visual Studio to fit your unique
    development needs.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨如何创建我们自己的Visual Studio扩展，我们将学习如何自定义和扩展Visual Studio以满足您独特的开发需求。
- en: 'Part 4: Mastering Core Development Skills'
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4部分：精通核心开发技能
- en: In this final part, we focus on customizing and enhancing your development environment.
    You’ll learn how to write your own project templates, create Visual Studio extensions,
    and build NuGet packages to share with the development community and within your
    organization. These skills will empower you to tailor Visual Studio to your needs,
    streamlining workflows and boosting productivity.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的最后部分，我们将关注自定义和增强您的开发环境。您将学习如何编写您自己的项目模板，创建Visual Studio扩展，并构建NuGet包以与开发社区和您所在的组织共享。这些技能将使您能够根据您的需求定制Visual
    Studio，简化工作流程并提高生产力。
- en: 'This part has the following chapters:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本部分包含以下章节：
- en: '[*Chapter 13*](B22218_13.xhtml#_idTextAnchor182) , *Writing Your Own Project
    Template*'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B22218_13.xhtml#_idTextAnchor182) ，*编写您自己的项目模板*'
- en: '[*Chapter 14*](B22218_14.xhtml#_idTextAnchor191) , *Writing Your Own Visual
    Studio Extensions*'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第14章*](B22218_14.xhtml#_idTextAnchor191) ，*编写您自己的Visual Studio扩展*'
- en: '[*Chapter 15*](B22218_15.xhtml#_idTextAnchor199) , *Creating and Publishing
    Powerful NuGet Packages for the Community*'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第15章*](B22218_15.xhtml#_idTextAnchor199) ，*为社区创建和发布强大的NuGet包*'
