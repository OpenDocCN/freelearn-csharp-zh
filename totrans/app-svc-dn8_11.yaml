- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Broadcasting Real-Time Communication Using SignalR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will be introduced to SignalR, a technology that enables
    a developer to create a service that can have multiple clients and broadcast messages
    to all of them or a subset of them live in real time. The canonical example is
    a group chat app. Other examples include notification systems and dashboards that
    need instantly up-to-date information like stock prices.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding SignalR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a live communication service using SignalR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a web client using the SignalR JavaScript library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a .NET console app client
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Streaming data using SignalR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding SignalR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To understand the problem that SignalR solves, we need to understand what web
    development is like without it. The foundation of the web is HTTP, which for more
    than 30 years has been great for building general-purpose websites and services.
    However, the web was not designed for specialized scenarios that require a web
    page to be instantaneously updated with new information as it becomes available.
  prefs: []
  type: TYPE_NORMAL
- en: The history of real-time communication on the web
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To understand the benefits of SignalR, it helps to know the history of HTTP
    and how organizations worked to make it better for real-time communication between
    clients and servers.
  prefs: []
  type: TYPE_NORMAL
- en: In the early days of the Web in the 1990s, browsers had to make a full-page
    HTTP `GET` request to the web server to get fresh information to show to the visitor.
  prefs: []
  type: TYPE_NORMAL
- en: In late 1999, Microsoft released Internet Explorer 5 with a component named
    **XMLHttpRequest** that could make asynchronous HTTP calls in the background.
    This, alongside **dynamic HTML** (**DHTML**), allowed parts of the web page to
    be updated with fresh data smoothly.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of this technique were obvious, and soon, all browsers added the
    same component.
  prefs: []
  type: TYPE_NORMAL
- en: AJAX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google took maximum advantage of this capability to build clever web applications
    such as Google Maps and Gmail. A few years later, the technique became popularly
    known as **Asynchronous JavaScript and XML** (**AJAX**).
  prefs: []
  type: TYPE_NORMAL
- en: 'AJAX still uses HTTP to communicate, however, and that has limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: First, HTTP is a request-response communication protocol, meaning that the server
    cannot push data to the client. It must wait for the client to make a request.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second, HTTP request and response messages have headers with lots of potentially
    unnecessary overhead.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: WebSocket
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**WebSocket** is full-duplex, meaning that either the client or server can
    initiate communicating new data. WebSocket uses the same TCP connection for the
    life cycle of the connection. It is also more efficient in the message sizes that
    it sends because they are minimally framed with 2 bytes.'
  prefs: []
  type: TYPE_NORMAL
- en: WebSocket works over HTTP ports `80` and `443` so it is compatible with the
    HTTP protocol, and the WebSocket handshake uses the HTTP **Upgrade** header to
    switch from the HTTP protocol to the WebSocket protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Modern web apps are expected to deliver up-to-date information. Live chat is
    the canonical example, but there are lots of potential applications, from stock
    prices to games.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever you need the server to push updates to the web page, you need a web-compatible,
    real-time communication technology. WebSocket could be used, but it is not supported
    by all clients. You can check which clients support WebSocket using the web page
    found at the following link: [https://caniuse.com/websockets](https://caniuse.com/websockets).'
  prefs: []
  type: TYPE_NORMAL
- en: 'WebSocket or WebSockets? “The **WebSocket** protocol was standardized by the
    IETF as RFC 6455 in 2011\. The current API specification allowing web applications
    to use this protocol is known as *WebSockets*.” From the Wikipedia page found
    at the following link: [https://en.wikipedia.org/wiki/WebSocket](https://en.wikipedia.org/wiki/WebSocket).'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing SignalR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**ASP.NET Core SignalR** is an open-source library that simplifies adding real-time
    web functionality to apps by being an abstraction over multiple underlying communication
    technologies, which allows you to add real-time communication capabilities using
    C# code.'
  prefs: []
  type: TYPE_NORMAL
- en: The developer does not need to understand or implement the underlying technology
    used, and SignalR will automatically switch between underlying technologies depending
    on what the visitor’s web browser supports. For example, SignalR will use WebSocket
    when it’s available and gracefully falls back on other technologies such as AJAX
    long polling when it isn’t, while your application code stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'SignalR is an API for server-to-client **remote procedure calls** (**RPCs**).
    The RPCs call JavaScript functions on clients from server-side .NET code. SignalR
    has hubs to define the pipeline and handles the message dispatching automatically
    using two built-in hub protocols: JSON and a binary one based on MessagePack.'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the server side, SignalR runs everywhere that ASP.NET Core runs: Windows,
    macOS, or Linux servers. SignalR supports the following client platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript clients for current browsers including Chrome, Firefox, Safari, and
    Edge.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: .NET clients including Blazor, .NET MAUI, and Xamarin for Android and iOS mobile
    apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java 8 and later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure SignalR Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier, I mentioned that it would be good practice to separate the SignalR
    service hosting project from the web project that uses the JavaScript library
    to act as a client. This is because a SignalR service potentially needs to handle
    lots of simultaneous client requests and respond quickly to them all.
  prefs: []
  type: TYPE_NORMAL
- en: Once you separate the SignalR hosting, you can take advantage of **Azure SignalR
    Service**. This offers global reach and a world-class data center and network,
    and it scales to millions of connections while meeting SLAs like providing compliance
    and high security.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can learn more about Azure SignalR Service at the following link: [https://learn.microsoft.com/en-us/azure/azure-signalr/signalr-overview](https://learn.microsoft.com/en-us/azure/azure-signalr/signalr-overview).'
  prefs: []
  type: TYPE_NORMAL
- en: Designing method signatures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing the method signatures for a SignalR service, it is good practice
    to define methods with a single message parameter rather than multiple simple
    type parameters. This good practice is not enforced by the technology with SignalR,
    so you will have to be disciplined.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, instead of passing multiple `string` (or other type) values, define
    a type with multiple properties to use as the single `Message` parameter, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The reason for this good practice is that it allows future changes like adding
    a third property for the message `Title`. For the bad practice example, a third
    `string` parameter named `title` would need to be added and existing clients would
    get errors because they are not sending the extra `string` value. But using the
    good practice example will not break the method signature so existing clients
    can continue to call it as before the change. On the server side, the extra `Title`
    property will just have a `null` value that can be checked for, and perhaps be
    set to a default value.
  prefs: []
  type: TYPE_NORMAL
- en: SignalR method parameters are serialized as JSON, so all nested objects are
    accessible in JavaScript if needed.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve explored the fundamentals of SignalR and its various aspects
    like good practices for method signature design, let’s walk through how to build
    a live communication service using SignalR.
  prefs: []
  type: TYPE_NORMAL
- en: Building a live communication service using SignalR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The SignalR *server* library is included in ASP.NET Core, but the JavaScript
    *client* library is not automatically included in the project. Remember, SignalR
    supports multiple client types, and a web page using JavaScript is just one of
    them.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the **Library Manager CLI** to get the client library from **unpkg**,
    a **content delivery network** (**CDN**) that can deliver anything found in the
    Node.js package manager.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a SignalR server-side hub and client-side JavaScript to an ASP.NET
    Core MVC project to implement a chat feature that allows visitors to send messages
    to:'
  prefs: []
  type: TYPE_NORMAL
- en: Everyone currently using the website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamically defined groups.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A single specified user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Good Practice**: In a production solution, it would be better to host the
    SignalR hub in a separate web project so that it can be hosted and scaled independently
    from the rest of the website. Live communication can often put excessive load
    on a website.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining some shared models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we will define two shared models that can be used on both the server-side
    and client-side .NET projects that will work with our chat service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to create a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Class Library** / `classlib`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter11`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.Common`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `Northwind.Common` project, rename the `Class1.cs` file to `UserModel.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify its contents to define a model for registering a user’s name, unique
    connection ID, and the groups that they belong to, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Good Practice**: In a real-world app, you would want to use a collection
    of `string` values for the `Groups` property, but this coding task is not about
    how to provide a web user experience for editing multiple `string` values. We
    will provide a simple text box instead and focus on learning SignalR.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `Northwind.Common` project, add a class file named `MessageModel.cs`.
    Modify its contents to define a message model with properties for whom the message
    is sent to and who the message was sent from, and the message body, as shown in
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Enabling a server-side SignalR hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will enable a SignalR hub on the server side in an ASP.NET Core MVC
    project:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **ASP.NET Core Web App (Model-View-Controller)** / `mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter11`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.SignalR.Service.Client.Mvc`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication type: None.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Configure for HTTPS: Selected.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Enable Docker: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Do not use top-level statements: Cleared.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.SignalR.Service.Client.Mvc` project, treat warnings as errors
    and add a project reference to the `Northwind.Common` project, as shown in the
    following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Properties` folder, in `launchSettings.json`, in the `https` profile,
    modify the `applicationUrl` to use port `5111` for `https` and `5112` for `http`,
    as shown highlighted in the following configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the `Northwind.SignalR.Service.Client.Mvc` project, add a class file named
    `ChatHub.cs`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `ChatHub.cs`, modify its contents to inherit from the `Hub` class and implement
    two methods that can be called by a client, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`ChatHub` has a private field to store a list of registered users. It is a
    dictionary with their name as a unique key.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ChatHub` has two methods that a client can call: `Register` and `SendMessage`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Register` has a single parameter of type `UserModel`. The user’s name, connection
    ID, and groups are stored in the static dictionary so that the user’s name can
    be used to look up the connection ID later and send messages directly to that
    one user. After registering a new user or updating the registration of an existing
    user, a message is sent back to the client informing them of success.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SendMessage` has a single parameter of type `MessageModel`. The method branches
    based on the value of the `To` property. If `To` does not have a value, it calls
    the `All` property to get a proxy that will communicate with every client. If
    `To` has a value, the `string` is split using comma separators into an array.
    Each item in the array is checked to see if it matches a user in `Users`. If it
    matches, it calls the `Client` method to get a proxy that will communicate just
    with that one client. If it does not match, the item might be a group, so it calls
    the `Group` method to get a proxy that will communicate with just the members
    of that group. Finally, it sends the message asynchronously using the proxy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, import the namespace for your SignalR hub, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section that configures services, add a statement to add support for
    SignalR to the services collection, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the section that configures the HTTP pipeline, before the call to map controller
    routes, add a statement to map the relative URL path `/chat` to your SignalR hub,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Building a web client using the SignalR JavaScript library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Next, we will add the SignalR client-side JavaScript library so that we can
    use it on a web page:'
  prefs: []
  type: TYPE_NORMAL
- en: Open a command prompt or terminal for the `Northwind.SignalR.Service.Client.Mvc`
    project/folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Install the Library Manager CLI tool, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This tool might already be installed globally. To update it to the latest version,
    repeat the command but replace `install` with `update`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter a command to add the `signalr.js` and `signalr.min.js` libraries to the
    project from the `unpkg` source, as shown in the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Never copy long commands from a PDF and paste them directly to the command
    prompt. Always clean them up in a basic text editor to remove extraneous new lines
    and so on and then recopy them. To make it easier to enter long command lines,
    you can copy them from the following link: [https://github.com/markjprice/apps-services-net8/blob/main/docs/command-lines.md](https://github.com/markjprice/apps-services-net8/blob/main/docs/command-lines.md)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Note the success message, as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Visual Studio 2022 also has a GUI for adding client-side JavaScript libraries.
    To use it, right-click a web project and then navigate to **Add** | **Client Side
    Libraries**.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a chat page to the MVC website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we will add chat functionality to the home page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `Views/Home`, in `Index.cshtml`, modify its contents, as shown in the following
    markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'There are three sections on the page: **Register User**, **Send** **Message**,
    and **Messages received**.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Register User** section has two inputs for the visitor’s name, a comma-separated
    list of the groups that they want to be a member of, and a button to click to
    register.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Send Message** section has three inputs for the name of the user that
    the message is from, the names of users and groups that the message will be sent
    to, and the body of the message – and a button to click to send the message.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Messages received** section has a bullet list element that will be dynamically
    populated with a list item when a message is received.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: There are two script elements for the SignalR JavaScript client-side library
    and the JavaScript implementation of the chat client.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `wwwroot/js`, add a new JavaScript file named `chat.js` and modify its contents,
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The script creates a SignalR hub connection builder specifying the relative
    URL path to the chat hub on the server `/chat`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The script disables the **Register** and **Send** buttons until the connection
    is successfully established to the server-side hub.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An `input` event handler is added to the **My name** text box to keep it synchronized
    with the **From** text box.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When the connection gets a `ReceiveMessage` call from the server-side hub, it
    adds a list item element to the `messages` bullet list. The content of the list
    item contains details of the message like `from`, `to`, and `body`. For the two
    models that we defined in C#, note that JavaScript uses camelCase compared to
    C#, which uses PascalCase.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The message is formatted using a JavaScript interpolated `string`. This feature
    requires backticks `` ` `` at the start and end of the `string` value and the
    use of curly brackets `${}` for dynamic placeholders.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A `click` event handler is added to the **Register User** button that creates
    a register model with the user’s name and their groups and then invokes the `Register`
    method on the server side.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A `click` event handler is added to the **Send Message** button that creates
    a message model with the `from`, `to`, and `body`, and then invokes the `SendMessage`
    method on the server side.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing the chat feature
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now we are ready to try sending chat messages between multiple website visitors:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the `Northwind.SignalR.Service.Client.Mvc` project website using the
    `https` profile:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using Visual Studio 2022, then select the **https** profile in the
    toolbar, and then start the `Northwind.SignalR.Service.Client.Mvc` project without
    debugging.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If you are using Visual Studio Code, then at the command prompt or terminal,
    enter the following command:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: On Windows, if Windows Defender Firewall blocks access, then click **Allow access**.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5111/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that `Alice` is already entered for the name, and `Sales,IT` is already
    entered for her groups. Click **Register User**, and note the response back from
    the **SignalR Chat**, as shown in *Figure 11.1*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: Registering a new user in chat'
  prefs: []
  type: TYPE_NORMAL
- en: Open a new Chrome window or start another browser like Firefox or Edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5111/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Bob` for the name, `Sales` for his groups, and then click **Register
    User**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open a new Chrome window or start another browser like Firefox or Edge.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to `https://localhost:5111/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter `Charlie` for the name, `IT` for his groups, and then click **Register
    User**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arrange the browser windows so that you can see all three simultaneously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'A great tool for arranging windows is PowerToys and its FancyZones feature.
    Learn more at the following link: [https://learn.microsoft.com/en-us/windows/powertoys/](https://learn.microsoft.com/en-us/windows/powertoys/).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In Alice’s browser, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**To**: `Sales`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: `Sell more!`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Send Message**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that Alice and Bob receive the message, as shown in *Figure 11.2*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: Alice sends a message to the Sales group'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Bob’s browser, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**To**: `IT`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: `Fix more bugs!`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Send Message**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that Alice and Charlie receive the message, as shown in *Figure 11.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: Bob sends a message to the IT group'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Alice’s browser, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**To**: `Bob`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: `Bonjour Bob!`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Send Message**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that only Bob receives the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Charlie’s browser, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**To**: Leave it empty.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: `Everybody dance now!`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Send Message**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that everyone receives the message, as shown in *Figure 11.4*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: Charlie sends a message to everyone'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Charlie’s browser, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**To**: `HR,Alice`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: `Is anyone in HR listening?`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Click **Send Message**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Note that Alice receives the message sent directly to her, but since the HR
    group does not exist, no one receives the message sent to that group, as shown
    in *Figure 11.5*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: Charlie sends a message to Alice and a group that does not exist'
  prefs: []
  type: TYPE_NORMAL
- en: Close the browsers and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Building a .NET console app client
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have just seen a .NET service hosting a SignalR hub, and a JavaScript client
    exchanging messages with other clients via that SignalR hub. Now, let’s create
    a .NET client for SignalR.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a .NET client for SignalR
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use a console app, although any .NET project type would need the same
    package reference and implementation code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Console Application** / `console`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter11`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.SignalR.Client.Console`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add a package reference for the ASP.NET Core SignalR client and a project reference
    for `Northwind.Common`, treat warnings as errors, and globally and statically
    import the `System.Console` class, as shown in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the project to restore packages and build referenced projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In `Program.cs`, delete the existing statements, import namespaces for working
    with SignalR as a client and the chat models, and then add statements to prompt
    the user to enter a username and groups to register with, create a hub connection,
    and finally, listen for received messages, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the .NET console app client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start the SignalR service and call it from the console app:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.SignalR.Service.Client.Mvc` project website using the `https`
    profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start Chrome and navigate to `https://localhost:5111/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Register User**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.SignalR.Client.Console` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Enter your name and the groups: `Sales,Admins`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arrange the browser and console app windows so that you can see both simultaneously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Alice’s browser, enter the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**To**: `Sales`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Body**: `Go team!`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C**lick **Send Message**, and note that Alice and you receive the message,
    as shown in *Figure 11.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/B19587_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: Alice sends a message to the Sales team including a user in a
    console app'
  prefs: []
  type: TYPE_NORMAL
- en: In the console app, press *Enter* to stop it from listening.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close Chrome and shut down the web server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Streaming data using SignalR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen how SignalR can broadcast structured messages to one or
    more clients. This works well with data that is relatively small and structured
    and exists completely at a point in time. But what about data that comes in parts
    over time?
  prefs: []
  type: TYPE_NORMAL
- en: '**Streams** can be used for these scenarios. SignalR supports both service-to-client
    (downloading data from a stream) and client-to-service (uploading data to a stream).'
  prefs: []
  type: TYPE_NORMAL
- en: To enable download streaming, a hub method must return `IAsyncEnumerable<T>`
    (only supported by C# 8 or later) or `ChannelReader<T>`.
  prefs: []
  type: TYPE_NORMAL
- en: To enable upload streaming, a hub method must accept a parameter of type `IAsyncEnumerable<T>`
    (only supported by C# 8 or later) or `ChannelReader<T>`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a hub for streaming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s add some streaming methods to see how they work in action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Northwind.Common` project, add a new file named `StockPrice.cs` and
    modify its content to define a `record` for stock price data, as shown in the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Build the `Northwind.SignalR.Service.Client.Mvc` project to update its referenced
    projects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `Northwind.SignalR.Service.Client.Mvc` project, add a new class named
    `StockPriceHub.cs`, and modify its contents to define a hub with two streaming
    methods, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.SignalR.Service.Client.Mvc` project, in `Program.cs`, register
    the stock price hub after the statement that registers the chat hub, as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a .NET console app client for streaming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we can create a simple client to download a stream of data from the SignalR
    hub and upload a stream of data to the SignalR hub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Use your preferred code editor to add a new project, as defined in the following
    list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Project template: **Console Application** / `console`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution file and folder: `Chapter11`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Project file and folder: `Northwind.SignalR.Client.Console.Streams`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the `Northwind.SignalR.Client.Console.Streams` project file, treat warnings
    as errors, add a package reference for the ASP.NET Core SignalR client, add a
    project reference to `Northwind.Common`, and globally and statically import the
    `System.Console` class, as shown highlighted in the following markup:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.SignalR.Client.Console.Streams` project, add a new class
    file named `Program.Methods.cs`, and modify its content to define static methods
    in the partial `Program` class to generate ten random four-letter stock codes
    asynchronously, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Northwind.SignalR.Client.Console.Streams` project, in `Program.cs`,
    delete the existing statements. Import namespaces for working with SignalR as
    a client, and then add statements to prompt the user to enter a stock, create
    a hub connection, listen for received streams of stock prices, and then send an
    asynchronous stream of stocks to the service, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Testing the streaming service and client
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Finally, we can test the streaming data functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: Start the `Northwind.SignalR.Service.Client.Mvc` project website using the `https`
    profile without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start the `Northwind.SignalR.Client.Console.Streams` console app without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Arrange the console windows for the ASP.NET Core MVC website and the client
    console app so that you can see both side by side.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the client console app, press *Enter* to use the Microsoft stock code, as
    shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the website console window, wait for about ten seconds, and note that several
    stock prices have been generated in the service but not yet sent to the client,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the client console app, press *n* to receive the next updated price. Keep
    pressing *n* until the prices have been sent from the service and read by the
    client, and then press *y*, and note that a cancellation token is received by
    the SignalR service so it stops, and the client now starts uploading stocks, as
    shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the website console window, note that the random stock codes are received,
    as shown in the following output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Close both console windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Practicing and exploring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Test your knowledge and understanding by answering some questions, getting some
    hands-on practice, and exploring this chapter’s topics with deeper research.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 11.1 – Test your knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer the following questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What transports does SignalR use, and which is the default?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a good practice for RPC method signature design?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What tool can you use to download the SignalR JavaScript library?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens if you send a SignalR message to a client with a connection ID
    that does not exist?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of separating a SignalR service from other ASP.NET Core
    components?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Exercise 11.2 – Explore topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Use the links on the following page to learn more details about the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-11---broadcasting-real-time-communication-using-signalr](https://github.com/markjprice/apps-services-net8/blob/main/docs/book-links.md#chapter-11---broadcasting-real-time-communication-using-signalr)'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned about:'
  prefs: []
  type: TYPE_NORMAL
- en: The history of technologies before SignalR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concepts and technologies that underpin SignalR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing the chat functionality using SignalR, including building a hub
    hosted in a website project, and clients using JavaScript and a .NET console app.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and uploading streams of data using SignalR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next chapter, you will learn about GraphQL, another standard that enables
    client control over the data returned from a service.
  prefs: []
  type: TYPE_NORMAL
