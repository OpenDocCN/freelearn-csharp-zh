["```cs\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n        }\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment \n        env)\n        {\n            app.Run(async context =>\n {\n await context.Response.WriteAsync(\"Hello, World!\");\n });\n        }\n    }\n```", "```cs\ndotnet run\n```", "```cs\nusing System;\nusing Microsoft.AspNetCore.Http;\n\nnamespace Microsoft.AspNetCore.Builder\n{\n    /// <summary>\n    /// Extension methods for adding terminal middleware.\n    /// </summary>\n    public static class RunExtensions\n    {\n        /// <summary>\n        /// Adds a terminal middleware delegate to the application's \n            request pipeline.\n        /// </summary>\n        /// <param name=\"app\">The <see cref=\"IApplicationBuilder\"/> \n            instance.</param>\n        /// <param name=\"handler\">A delegate that handles the \n            request.</param>\n        public static void Run(this IApplicationBuilder app, \n        RequestDelegate handler)\n        {\n            if (app == null)\n            {\n                throw new ArgumentNullException(nameof(app));\n            }\n\n            if (handler == null)\n            {\n                throw new ArgumentNullException(nameof(handler));\n            }\n\n            app.Use(_ => handler);\n        }\n    }\n}\n```", "```cs\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Http;\n\nnamespace Demo.WebAPI\n{\n    public class SampleMiddleware\n    {\n        private readonly RequestDelegate _next;\n\n        public RequestCultureMiddleware(RequestDelegate next)\n        {\n            _next = next;\n        }\n\n        public async Task InvokeAsync(HttpContext context)\n        {\n            //DO STUFF\n\n            // Call the next delegate/middleware in the pipeline\n            await _next(context);\n        }\n    }\n}\n\n```", "```cs\npublic static class SampleMiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n        this IApplicationBuilder builder)\n    {\n        return builder.UseMiddleware<SampleMiddleware>();\n    }\n}\n```", "```cs\n\n    public class Startup\n    {\n\n        //  ...\n\n        public void Configure(IApplicationBuilder app, \n        IHostingEnvironment env)\n        {\n            app.UseSampleMiddleware();\n\n            app.Run(async context =>\n            {\n                await context.Response.WriteAsync(\"Hello, World!\");\n            });\n        } \n     }\n```", "```cs\npublic static class SampleMiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n        this IApplicationBuilder builder)\n    {\n       return builder.Map(\"/test/path\", _ => \n       _.UseMiddleware<SampleMiddleware>());\n    }\n}\n```", "```cs\npublic static class SampleMiddlewareExtensions\n{\n    public static IApplicationBuilder UseSampleMiddleware(\n        this IApplicationBuilder builder)\n    {\n      return  builder.MapWhen(context => context.Request.IsHttps, \n      _ => _.UseMiddleware<SampleMiddleware>());\n    }\n}\n```", "```cs\n     public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n        {\n            // ...\n            app.UseHttpsRedirection();\n            app.UseStaticFiles();\n        }\n```"]