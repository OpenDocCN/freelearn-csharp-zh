["```cs\n    using System.Text.RegularExpressions;\n    ```", "```cs\n    using System.Text.RegularExpressions;\n    namespace Chapter9\n    {\n        public class Recipes\n        {\n        }\n    }\n    ```", "```cs\nusing System.Text.RegularExpressions;\n```", "```cs\n    public void ValidDate(string stringToMatch)\n    {\n\n    }\n    ```", "```cs\n    string pattern = $@\"^(19|20)\\d\\d[-./](0[1-9]|1[0-2])[- ./](0[1-9]|[12][0-9]|3[01])$\";\n    ```", "```cs\n    if (Regex.IsMatch(stringToMatch, pattern))\n        Console.WriteLine($\"The string {stringToMatch} contains a valid date.\");\n    else\n        Console.WriteLine($\"The string {stringToMatch} DOES NOT contain a valid date.\");\n    ```", "```cs\n    public void ValidDate(string stringToMatch)\n    {\n        string pattern = $@\"^(19|20)\\d\\d[-./](0[1-9]|1[0-2])[- ./](0[1-9]|[12][0-9]|3[01])$\";\n\n        if (Regex.IsMatch(stringToMatch, pattern))\n            Console.WriteLine($\"The string {stringToMatch} contains a valid date.\");\n        else\n            Console.WriteLine($\"The string {stringToMatch} DOES NOT contain a valid date.\");            \n    }\n    ```", "```cs\n    Chapter9.Recipes oRecipe = new Chapter9.Recipes();\n    oRecipe.ValidDate(\"1912-12-31\");\n    oRecipe.ValidDate(\"2018-01-01\");\n    oRecipe.ValidDate(\"1800-01-21\");\n                oRecipe.ValidDate($\"{DateTime.Now.Year}.{DateTime.Now.Month }.{DateTime.Now.Day}\");\n    oRecipe.ValidDate(\"2016-21-12\"); \n    Read();\n    ```", "```cs\n    string pattern = $@\"^(19|20)\\d\\d[-./](0[1-9]|1[0-2]|[1- 9])[-./](0[1-9]|[12][0-9]|3[01])$\";\n    ```", "```cs\nusing System.Text.RegularExpressions;\n```", "```cs\n    public string SanitizeInput(string input)\n    {\n\n    }\n    ```", "```cs\n    List<string> lstBad = new List<string>(new string[] { \"BadWord1\", \"BadWord2\", \"BadWord3\" });\n    ```", "```cs\n    string pattern = \"\";\n    foreach (string badWord in lstBad)\n        pattern += pattern.Length == 0 ? $\"{badWord}\" : $\"|{badWord}\";\n\n    pattern = $@\"\\b({pattern})\\b\";\n    ```", "```cs\n    return Regex.Replace(input, pattern, \"*****\", RegexOptions.IgnoreCase);\n    ```", "```cs\n    public string SanitizeInput(string input)\n    {\n        List<string> lstBad = new List<string>(new string[] { \"BadWord1\", \"BadWord2\", \"BadWord3\" });\n        string pattern = \"\";\n        foreach (string badWord in lstBad)\n            pattern += pattern.Length == 0 ? $\"{badWord}\" : $\"|{badWord}\";\n\n        pattern = $@\"\\b({pattern})\\b\";\n\n        return Regex.Replace(input, pattern, \"*****\", RegexOptions.IgnoreCase);            \n    }\n    ```", "```cs\n    string textToSanitize = \"This is a string that contains a badword1, another Badword2 and a third badWord3\";\n    Chapter9.Recipes oRecipe = new Chapter9.Recipes();\n    textToSanitize = oRecipe.SanitizeInput(textToSanitize);\n    WriteLine(textToSanitize);\n    Read();\n    ```", "```cs\npattern = $\"\\b({pattern})\\b\";\n```", "```cs\npattern = $@\"\\b({pattern})\\b\";\n```", "```cs\nusing System.Text.RegularExpressions;\n```", "```cs\n    public static class CustomRegexHelper\n    {\n\n    }\n    ```", "```cs\n    public static bool ValidAcmeCompanyFilename(this String value)\n    {\n\n    }\n    ```", "```cs\n    return Regex.IsMatch(value, $@\"^acm[_]{DateTime.Now.Year}[_]({DateTime.Now.Month}|0[{Da teTime.Now.Month}])[_]({DateTime.Now.Day}|0[{DateTime.Now.D ay}])(.txt|.docx|.xlsx)$\");\n    ```", "```cs\n    public static class CustomRegexHelper\n    {\n        public static bool ValidAcmeCompanyFilename(this String value)\n        {\n            return Regex.IsMatch(value, $@\"^acm[_]{DateTime.Now.Year}[_] ({DateTime.Now.Month}|0[{DateTime.Now.Month}]) [_]({DateTime.Now.Day}|0[{DateTime.Now.Day}]) (.txt|.docx|.xlsx)$\");\n        }\n    }\n    ```", "```cs\n    public void DemoExtendionMethod()\n    {\n\n    }\n    ```", "```cs\n    Console.WriteLine($\"Today's date is: {DateTime.Now.Year}- {DateTime.Now.Month}-{DateTime.Now.Day}\");\n    Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}_{DateTime.Now.Month}_{DateTime.Now. Day}.txt including leading month and day zeros\");\n    Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}_{DateTime.Now.Month}_{DateTime.Now. Day}.docx including leading month and day zeros\");\n    Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}_{DateTime.Now.Month}_{DateTime.Now. Day}.xlsx including leading month and day zeros\");\n    ```", "```cs\n    string filename = \"acm_2016_04_10.txt\";\n    if (filename.ValidAcmeCompanyFilename())\n        Console.WriteLine($\"{filename} is a valid file name\");\n    else\n        Console.WriteLine($\"{filename} is not a valid file name\");\n\n    filename = \"acm-2016_04_10.txt\";\n    if (filename.ValidAcmeCompanyFilename())\n        Console.WriteLine($\"{filename} is a valid file name\");\n    else\n        Console.WriteLine($\"{filename} is not a valid file name\");\n    ```", "```cs\n    filename.ValidAcmeCompanyFilename()\n    ```", "```cs\n    public void DemoExtendionMethod()\n    {\n        Console.WriteLine($\"Today's date is: {DateTime.Now.Year}-{DateTime.Now.Month}- {DateTime.Now.Day}\");\n        Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}_{DateTime.Now.Month}_ {DateTime.Now.Day}.txt including leading month and day zeros\");\n        Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}_{DateTime.Now.Month}_ {DateTime.Now.Day}.docx including leading month and day zeros\");\n        Console.WriteLine($\"The file must match: acm_{DateTime.Now.Year}_{DateTime.Now.Month} _{DateTime.Now.Day}.xlsx including leading month and day zeros\");\n\n        string filename = \"acm_2016_04_10.txt\";\n        if (filename.ValidAcmeCompanyFilename())\n            Console.WriteLine($\"{filename} is a valid file name\");\n        else\n            Console.WriteLine($\"{filename} is not a valid file name\");\n\n        filename = \"acm-2016_04_10.txt\";\n        if (filename.ValidAcmeCompanyFilename())\n            Console.WriteLine($\"{filename} is a valid file name\");\n        else\n            Console.WriteLine($\"{filename} is not a valid file name\");\n    }\n    ```", "```cs\n    Chapter9.Recipes oRecipe = new Chapter9.Recipes();\n    oRecipe.DemoExtendionMethod();\n    Read();\n    ```", "```cs\nreturn Regex.IsMatch(value, $@\"^acm[_]{DateTime.Now.Year}[_]({DateTime.Now.Month}|0[{DateTime. Now.Month}])[_]({DateTime.Now.Day}|0[{DateTime.Now.Day}])(.txt|.do cx|.xlsx)$\");\n```"]