- en: Chapter 2. Unity's and Playmaker's User Interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at the process of downloading and installing
    Unity, Playmaker, and setting up the project for work with this book. You have
    learned how to move the panels around within the Unity window in order to organize
    your workflow and how to change some of the project settings.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will take a closer look at each Unity panel and interface
    element you have encountered so far, as well as some of those you have not seen,
    including the Playmaker's **Actions** panel and the **Finite State Machine** (**FSM**)
    view. You will also learn how to create simple game objects and modify their properties,
    such as position, location, and scale.
  prefs: []
  type: TYPE_NORMAL
- en: Interface overview and main menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity''s interface is modular: this means that you can drag its elements around,
    attach them to different parts of the Editor window or even detach them completely
    and put them on another screen for convenience. Editor is everything you see when
    you open Unity: panels, views, controls, and so on. *Editor* is how Unity itself
    is called within Unity. Let us take a look at the main interface elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is the main menu on the top of the screen. Yours should include **File**,
    **Edit**, **Assets**, **GameObject**, **Component**, **PlayMaker**, **Window**,
    and **Help** submenus. They will help you create game objects (for example, primitives,
    lights, and cameras), attach components, and open new panels and views. The submenus
    can be explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Submenus | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| **File** | This submenu contains all the commands about building, saving,
    and opening projects and scenes. There are three commands here that you will use
    quite often, so it is a good idea to remember hotkeys for them: *command* + *S*
    (*Ctrl* + *S* in Windows) to save the current scene, *command* + *N* (*Ctrl* +
    *N* in Windows) to create a new scene, and *command* + *Shift* + *B* (*Ctrl* +
    *Shift* + *B* in Windows) to open the **Build Settings** window. |'
  prefs: []
  type: TYPE_TB
- en: '| **Edit** | This submenu lets you perform various operations on files and
    game objects, such as copying (*command* + *C* or *Ctrl* + *C* in Windows), pasting
    (*command* + *V* or *Ctrl* + *V* in Windows), duplicating (*command* + *D* or
    *Ctrl* + *D* in Windows), and deleting (*command* +*Delete* or just *Delete* in
    Windows). There are also undo (*command* + *Z* or *Ctrl* + *Z* in Windows) and
    redo (*command* + *Shift* + *Z* or *Ctrl* + *Shift* + *Z* in Windows) commands
    under it. These are all standard commands that are the same across your operating
    system, so you should just assume that they work the same as they do in Finder
    (Windows Explorer) or TextEdit (Windows Notepad). |'
  prefs: []
  type: TYPE_TB
- en: '| **Assets** | This submenu lets you create, import, and export files, also
    known as assets using the game development term. These can be scripts, animations,
    shaders, materials, and so on. The list of assets that are currently in your project
    can be seen in the **Project** panel. You will use commands available through
    this submenu later on in this chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| **GameObject** | This submenu lets you create new game objects. Not unlike
    the way the **Assets** submenu is linked to the **Project** panel, the **GameObject**
    submenu is linked to the **Hierarchy** panel. You will learn more about different
    types of game objects later when we talk about the panels and views in Unity.
    For now just remember that you can create a new empty game object by pressing
    *command* + *Shift* + *N* (*Ctrl* + *Shift* + *N* in Windows). This is something
    you will be doing a lot while working in Unity. |'
  prefs: []
  type: TYPE_TB
- en: '| **Component** | This submenu lets you add new components to your game objects.
    This is very important, because an empty game object does not do anything, and
    it is invisible. By adding components to it, you can change its appearance and
    behavior. We will talk about components in more detail in the next chapter. |'
  prefs: []
  type: TYPE_TB
- en: '| **PlayMaker** | This submenu is not a default Unity submenu; it was added
    to the main menu by the Playmaker plugin that you imported from the Asset Store.
    This Playmaker-dedicated submenu lets you access Playmaker components and panels,
    such as the FSM view and its panel that allow you to choose new actions and transitions
    for your objects. We will look at Playmaker later on in this and the following
    chapters. |'
  prefs: []
  type: TYPE_TB
- en: '| **Window** | This submenu lets you open new panels and views, such as **Asset
    Store**, **Hierarchy**, and **Scene**. This submenu is useful if you have lost
    or accidentally closed one of your panels or views and want to find or open it
    again. It doesn''t allow you to open multiple instances of the same interface
    elements, so you will always find the existing panel if it is open already. |'
  prefs: []
  type: TYPE_TB
- en: '| **Help** | This submenu allows you to access useful Unity reference resources,
    such as Unity Manual, Reference Material, and Scripting Reference. There are copies
    of these available on the web, but it is always a good idea to use the ones provided
    with your installation: this way you are making sure that the documentation you
    are using is consistent with your version of Unity, plus the local copy of the
    documentation always works faster. The **Help** submenu also provides shortcuts
    to Unity''s community sites, such as forum, answers, and feedback, and lets you
    report bugs and check for updates. |'
  prefs: []
  type: TYPE_TB
- en: Now, below the main menu is the toolbar that includes (left to right) main controls
    for the **Scene** view, game execution controls, and drop-down boxes of layer
    filter and layout selection.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface overview and main menu](img/8108OT_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Under the toolbar you will see the panel and the view tabs. We will look at
    them closer later in this chapter, but for now you just need to know that there
    is a distinction between views that include **Scene** and **Game** and panels
    that include **Hierarchy**, **Console**, **Project**, and **Inspector**. Panels
    and views can all be manipulated, resized, detached, and attached in the same
    way, but the difference between them is that views (as the name suggests) let
    you see your game scene in one way or another, while panels provide additional
    information and tools for game objects, the scene, or the project as a whole.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the distinction between views and panels is merely a helpful
    convention and by no means limits the functionality of a tab. This is especially
    true of custom tabs added by various plugins or, indeed, by yourself. In this
    book this distinction is made for convenience.
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows what your Editor window is supposed to look like
    if you haven't moved any tabs around since [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Unity and Playmaker"), *Getting Started with Unity and Playmaker*.
    We will be referring to this layout throughout this chapter, so if your layout
    differs, I suggest you change it to match the image. You can always go back to
    it later.
  prefs: []
  type: TYPE_NORMAL
- en: '![Interface overview and main menu](img/8108OT_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'On the very bottom of the Unity Editor window there is a long empty gray line.
    This is the status bar: it shows the last thing displayed in the **Console** panel,
    and clicking on it reveals the **Console**, highlighting the last log message
    in it. The status bar, the main menu, and the toolbar are all permanent interface
    elements in Unity and, unlike the tabs, cannot be closed, detached, or resized
    without manipulating the Editor window itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Hierarchy panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A panel in Unity is a tab that provides information about or gives you additional
    control over a game object, a scene, or the project as a whole. Panels can be
    added, closed, detached, and attached at will. You can drag them around as you
    see fit in order to optimize your workflow. If you followed the instructions in
    [Chapter 1](ch01.html "Chapter 1. Getting Started with Unity and Playmaker"),
    *Getting Started with Unity and Playmaker*, your current layout should match that
    of the last screenshot in the previous section of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: To begin, let us look at the Hierarchy panel (you should have it attached on
    the left of the Editor window).
  prefs: []
  type: TYPE_NORMAL
- en: 'The place where you see the word **Hierarchy** written is the tab''s header.
    You can drag any tab by its header, be it a view or a panel. Any number of panels
    can be present in any position in the Editor, so sometimes you will have a situation
    when you have multiple tabs attached to the same area of the screen (as on the
    following figure):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Hierarchy panel](img/8108OT_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let us try to reproduce this situation. Click the **Options** (![Hierarchy
    panel](img/8108OT_02_04.jpg)) button in the top-right corner of the Hierarchy
    panel. Then hover the **Add Tab** option from the drop-down list and, finally,
    click on **Hierarchy**. Now you should have two **Hierarchy** panels attached
    to the same side of the screen. Their headers should be next to each other: one
    of them active, and the other one inactive. The active panel is the one that has
    a lighter color.'
  prefs: []
  type: TYPE_NORMAL
- en: The following figure shows the menu that allows you to add new tabs to a certain
    area of the screen; in this case it is on the right, in the same place where the
    **Hierarchy** panel is. Use it to add another **Hierarchy** panel.
  prefs: []
  type: TYPE_NORMAL
- en: '![Hierarchy panel](img/8108OT_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Click on the inactive panel''s header to see its contents. At this point you
    should see that both panels look exactly the same: the only thing inside both
    is **Main Camera**. This is because both panels show the contents of the same
    scene. You can have as many **Hierarchy** panels as you want, but they will all
    show exactly the same thing. We don''t need two of them, so let us close one:
    right click on one of the Hierarchy tabs'' headers and choose **Close Tab** from
    the contextual menu that appears. Note that this is the same menu that appears
    when you click on the **Options** button in the top-right corner of the panel.
    This is just another way of doing the same thing.'
  prefs: []
  type: TYPE_NORMAL
- en: I have just mentioned something called scene and a scene's contents—but what
    does it mean? A project in Unity is composed of scenes; think of them as level
    files if you like, except apart from the actual game levels, scenes can contain
    things like intro cinematics, loading screens, game menus, or anything. This is
    just a convenient way of dividing your game into manageable chunks, and the **Hierarchy**
    panel reveals everything that is inside of the currently open scene. You can have
    only one scene open at any given moment, which is why no matter how many **Hierarchy**
    panels you open, they will all show the same exact thing. We will talk about scenes
    in more detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Another thing that you should notice is the **Create** button in the top-left
    corner of the panel just below the header. Click on it, and you will see the same
    menu that you would see if you navigated to **GameObject** | **Other** from the
    main menu. This menu allows you to create game objects that are added to the current
    scene when you click on their names in the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'A game object in Unity is kind of a shell, a container that can be anything:
    a cube, a light, a camera, or a character. Go ahead and create a cube, a quad,
    and a directional light. We will use these in the following chapters to create
    a game.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have all these game objects, we want to position them in a certain
    way in the scene. To do this, we are going to use the Inspector panel, among other
    things.
  prefs: []
  type: TYPE_NORMAL
- en: Inspector panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The main purpose of the **Inspector** panel is performing various actions on
    game objects, including changing their properties, such as appearance, behavior,
    position, size, and rotation. Select the **Cube** game object in the **Hierarchy**
    panel by clicking on it once. The appearance of the **Inspector** panel should
    now change to include a number of things displayed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspector panel](img/8108OT_02_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first thing that you should notice is the small padlock (![Inspector panel](img/8108OT_02_08.jpg))
    icon in the top-right corner of the panel next to the **Options** button. Unlike
    the **Hierarchy** panel, **Inspector** shows properties of an object rather than
    a scene, and, since you can have any number of game objects in your currently
    active scene at the same time, you can assign different inspectors to always focus
    on specific objects. Open a new **Inspector** tab by right-clicking the **Inspector**
    header and selecting **Add Tab** | **Inspector**. Both inspectors will be focused
    on the cube that you selected in **Hierarchy**. Click on the padlock icon in one
    of the inspectors. This will make this **Inspector** always display the properties
    of **Cube**, so, if you select **Quad** in **Hierarchy**, the locked (![Inspector
    panel](img/8108OT_02_09.jpg)) Inspector will continue showing the Cube's properties,
    while the other one will show **Quad**. You can verify this by clicking on the
    headers of the two **Inspector** panels that you have opened.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you want to expose the properties of two objects at the same time without
    having to click on the headers, you can detach one of the **Inspector** panels
    by clicking and dragging its header wherever you want that panel to be. This can
    be helpful if you want to copy components or properties from one object to another
    or if you want to keep one important object always on display.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you are comfortable with the idea of having multiple inspectors and
    the fact that they correspond to the selected game object. Also note that an **Inspector**
    panel can expose properties of multiple game objects at the same time. You can
    select multiple game objects in the **Hierarchy** panel by pressing and holding
    *command* (*Ctrl* in Windows). You can also press *Shift* and select a range of
    game objects. These operations are similar to those you would perform in Finder
    (or Windows Explorer). Try doing this a few times until you are comfortable performing
    these actions in the **Hierarchy** panel and always take note of how the contents
    of the unlocked **Inspector** panel change based on the game objects that you
    select. Once you feel like you have experimented enough, close the locked **Inspector**
    by right-clicking its header and selecting **Close Tab** from the contextual menu.
  prefs: []
  type: TYPE_NORMAL
- en: Just below the header in the **Inspector** panel is the name of the selected
    game object. You can change it however you want. For now, let us rename our **Cube**
    `Wall`. Make sure that you have **Cube** selected in **Hierarchy** and that its
    properties are displayed in the **Inspector** panel. Click within the text field
    where you see **Cube** written at the moment, delete everything, and type `Wall`,
    then press *return* (*Enter*). You will notice that the name has changed in the
    **Hierarchy** panel as well.
  prefs: []
  type: TYPE_NORMAL
- en: Below the name field there is a long section with various components separated
    by black horizontal lines. A default cube (now called **Wall**) has **Transform**,
    **Mesh Filter**, **Box Collider,** and **Mesh Renderer** components. We will closely
    examine the components in the next chapter. For now you should focus on the Transform
    component (shown in the following image along with the **Inspector** panel header),
    which is the only component that every game object in Unity has.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspector panel](img/8108OT_02_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Transform defines position, rotation, and scale of a game object in 3D space.
    These are all its properties. Set the position of **Wall** to (`0`, `0.5`, `0`)
    by clicking in the **X**, **Y**, and **Z** fields, deleting everything in there,
    entering the value you want instead, and pressing *return* (*Enter*) on your keyboard.
    You have just changed the position property of the **Transform** component of
    the **Wall** game object. The next chapter will examine properties and components
    more closely. For now just set the positions and rotations of the game objects
    you have in the scene to the following values:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name | Position | Rotation |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Directional light | 0, 0, 0 | 50, -30, 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Main Camera | 0, 10, 0 | 90, 0, 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Quad | 0, 0, 0 | 90, 0, 0 |'
  prefs: []
  type: TYPE_TB
- en: '| Wall | 0, 0.5, 0 | 0, 0, 0 |'
  prefs: []
  type: TYPE_TB
- en: For now, we will leave the **Scale** property of all the objects at its default
    value (`1`, `1`, `1`).
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have modified your scene, you might want to save it. Press *command*
    + *S* (*Ctrl* + *S* in Windows). A dialog window should appear asking you where
    you would like to save your scene. By default it should offer to save it in the
    `Assets` folder. Name your scene `Scene1` and click on **Save**. The following
    screenshot shows the path where the scene file should be saved. Note that you
    cannot save the scene outside of the `Assets` folder. If you try, an error message
    will pop-up warning you about it.
  prefs: []
  type: TYPE_NORMAL
- en: '![Inspector panel](img/8108OT_02_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Project panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have a look at the **Project** panel: you should have four folders and a file
    called `Scene1` displayed there. The **Project** panel is your project''s file
    browser, similar to Mac OSX Finder or Windows Explorer, but it only shows files
    and folders that are situated inside the `Assets` folder of your project.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike **Hierarchy** and **Inspector**, **Project** (see the following screenshot)
    always displays the same thing as long as you have the same Unity project open.
    All of the scene files, scripts, and art assets are shown and can be manipulated
    from here. Using the icons to the right of the search field, you can filter the
    things displayed in the **Project** panel either by tag or by type.
  prefs: []
  type: TYPE_NORMAL
- en: '![Project panel](img/8108OT_02_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is generally a good practice to keep your project's file structure well-organized,
    as it helps to increase productivity and save time looking for files. To organize
    your assets, you can put things inside folders with clear names, such as `Artwork`,
    `Scripts`, or `Music`. To begin with, let us try to organize what we have in our
    **Project** panel already.
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Create** button in the top-left corner of the panel; this should
    reveal a menu that allows you to create different types of assets. This is the
    same menu you get by going to **Assets** | **Create** in the main menu.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The third way to access the **Assets** menu is right-clicking anywhere in the
    empty area below the list of files in the **Project** panel and clicking on **Create**
    in the contextual menu that appears.
  prefs: []
  type: TYPE_NORMAL
- en: Create a folder called `Scenes`. In order to rename a folder if you forgot to
    enter a name when the folder was just created, press *return* (or *F2* if you
    are using Windows). Once you have it named appropriately, click and drag the `Scene1`
    file and drop it into the `Scenes` folder. From now on, we will save all of the
    scenes into that folder instead of the `Assets` root. This way, they will be easier
    to find when we want to open a specific scene.
  prefs: []
  type: TYPE_NORMAL
- en: Views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that the Project panel is well-organized and your objects are positioned
    in the scene, it is time to have a look at the view tabs: **Game** and **Scene**.
    The former shows the output of all the cameras, while the latter is your main
    workspace in Unity. This is where the level design is done. The **Game** view
    becomes interactive when you click on the play button in the toolbar (![Views](img/8108OT_02_13.jpg))
    or use the hotkey *command* + *P* (or *Ctrl* + *P* in Windows), provided there
    is some kind of input defined in Playmaker or other components. You can also pause
    (![Views](img/8108OT_02_14.jpg)) the game by pressing *command* + *Shift* + *P*
    (*Ctrl* + *Shift* + *P* in Windows). This is how you will test your game later.
    Right now there are no interactions yet, but we will get to that soon enough.'
  prefs: []
  type: TYPE_NORMAL
- en: Activate the **Scene** view by clicking on its header if it is not active right
    now. In the **Hierarchy** panel, select **Wall** and press *F*. This will focus
    the **Scene** view on **Wall**. You should be seeing the cube that you created,
    with a **Quad** and **Directional light** gizmo below it (it looks like a little
    sun). A **gizmo** is generally a 2D element in 3D space that lets you select and/or
    manipulate objects even if they are not represented in any other way in the scene.
    A gizmo can also be non-interactive, such as a simple line or a wire cube. These
    are generally used to reveal position or direction of something otherwise invisible.
  prefs: []
  type: TYPE_NORMAL
- en: '![Views](img/8108OT_02_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Selecting an object and pressing *F* is one way to navigate the 3D space. Another
    way is using your mouse. You can select different objects directly in the **Scene**
    view by clicking on their meshes (3D models) or gizmos. To look around, press
    and hold the right mouse button while moving your mouse in the **Scene** view.
    Zoom in and out by using your scroll wheel. Use middle click to drag the view
    around. You can also rotate around a point by pressing and holding *Alt* and clicking
    the left mouse button and moving your mouse around.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Directional light** gizmo and press *W* or ![Views](img/8108OT_02_16.jpg)
    in the toolbar. You should see three arrows appear: red, green, and blue. These
    arrows correspond to the X, Y, and Z axes in 3D space, respectively. Clicking
    and dragging one of the arrows will move the object in space. Move **Directional
    light** anywhere you want: its position does not matter. What does matter, however,
    is its rotation.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Press *E* or ![Views](img/8108OT_02_17.jpg) in the toolbar. A sphere with colored
    and white circles will appear around the object. Each colored circle is responsible
    for the object''s rotation around one axis. Once again: red for X, green for Y
    and blue for Z. When you select your light, you should also see yellow rays coming
    out of it. This is a gizmo that shows in what direction your **Directional light**
    is lighting the scene. Rotate **Directional light** in such a way that **Wall**
    and **Quad** appear well-lit, almost white in the **Game** view. Do not forget
    that you can switch between the **Game** and **Scene** views at any moment to
    see a preview of what you will see in the game.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also switch between the ways your rotation, position, and scale gizmos
    appear by clicking the **Global**/**Local** toggle button in the toolbar. The
    **Pivot**/**Center** toggle button determines where it appears: in the pivot point
    of the object or in its geometric center.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are happy with the light, select the **Quad** object and press *R*
    or ![Views](img/8108OT_02_18.jpg) in the toolbar. This is the scale manipulation
    mode. If you press *F* to focus on **Quad**, you will see a gizmo similar to that
    of the movement manipulator, but with little colored cubes instead of arrows on
    the ends of each line. As before, colors correspond to axes: red for X, green
    for Y, and blue for Z. There is also a white cube in the middle, which is the
    uniform scale manipulator that allows you to change scale on all three axes at
    the same time.'
  prefs: []
  type: TYPE_NORMAL
- en: Using this gizmo, scale **Quad** to be about `100` on the X and Y axes. Its
    Z scale should stay the same. You can check the current values of position, rotation,
    and scale in the **Transform** component in the **Inspector** panel when you have
    an object selected.
  prefs: []
  type: TYPE_NORMAL
- en: Save your scene by pressing *command* + *S* (*Ctrl* + *S* in Windows).
  prefs: []
  type: TYPE_NORMAL
- en: Playmaker interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is time to finally take a look at Playmaker. In the main menu, go to **PlayMaker**
    | **PlayMaker Editor**. A welcome window with different Playmaker options and
    a **playMaker** panel should appear. Close the welcome window, then attach the
    **playMaker** panel to the same region of the Editor where you have your **Console**
    panel as shown in the following screenshot (this should be just below the **Scene**
    and **Game** views if you haven't changed anything since [Chapter 1](ch01.html
    "Chapter 1. Getting Started with Unity and Playmaker"), *Getting Started with
    Unity and Playmaker*).
  prefs: []
  type: TYPE_NORMAL
- en: '![Playmaker interface](img/8108OT_02_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The darker area on the left is the FSM view.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Keep in mind that the FSM view is called Playmaker Editor in the official Playmaker
    documentation. In this book we will use a clearer name, *FSM view*, to distinguish
    between different areas of the **playMaker** panel.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is here that you will edit your finite state machines and create state nodes
    and transitions between them, which we will talk about in more detail in the next
    chapter. For now, follow the instructions given in the lower-right corner of the
    FSM view:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the **Wall** game object in the **Hierarchy** panel or in the **Scene**
    view by clicking on it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Right-click anywhere in the FSM view and select **Add FSM** from the contextual
    menu that appears to add a finite state machine to the **Wall** game object. When
    you do that, note the red icon that appears next to **Wall** in the **Hierarchy**
    panel. This icon means that the object has a Playmaker FSM component. Also note
    the Playmaker FSM component that appeared in the **Inspector** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can manipulate FSM to assign various behaviors to **Wall**. Read all
    the tips displayed in the **playMaker** panel carefully.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To take a better look at any one of the tabs, including the **playMaker** panel,
    press the *Space* key with your mouse cursor hovering over the tab. Then press
    space again to minimize. You can do this with any view or panel in the Unity Editor.
  prefs: []
  type: TYPE_NORMAL
- en: On the right side of the **playMaker** panel, there are tabs that display and
    let you modify different information types, including the FSM as a whole, as well
    as its states, events, and variables. Click on each tab and examine the tips in
    grey rectangles explaining the contents of each tab. Once you are done with the
    tips, you can press the **Hint** toggle button on the bottom of the panel to disable
    them. You can also do this by pressing *F1*. Before you do that, click on the
    **Preferences** button next to it and read the tips there. We will examine the
    necessary changes to the Playmaker preferences in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Under the FSM view you should see controls similar to pause/play in the toolbar.
    These are, in fact, the same buttons, and are there just to make it more convenient
    for you to control the game when you are working with Playmaker.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second most important Playmaker-related panel is the **Action Browser**.
    You can open it by selecting **PlayMaker** | **Editor Window** | **Action Browser**
    from the main menu. A part of the **Actions** panel is shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Playmaker interface](img/8108OT_02_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Drag it by its header to the right side of the Editor until it snaps into the
    same area of the screen as **Inspector**. This panel shows categories of actions
    that you have in your Playmaker library. Clicking on one of the categories, for
    example, **Camera,** will reveal the actions. There is also a search bar near
    the top of the panel that allows you to access the actions you need faster. When
    you select an action, for example, **Camera** | **Screen To World Point**, a preview
    of its parameters appears on the bottom of the panel. It shows what the selected
    action will look like in the **State** tab of the **playMaker** panel. If you
    have a Playmaker-enabled object and a state in the FSM view selected, you can
    add an action to it by clicking the **Add Action To State** button in the bottom-right
    corner of the **Actions** panel.
  prefs: []
  type: TYPE_NORMAL
- en: You can press the play button (or use the shortcut *command* + *P* or *Ctrl*
    + *P* Windows) to see that there are no errors and everything is working properly.
    When you are done, press play again and save the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you examined some of the main interface elements in Unity and
    Playmaker, added some objects to the scene and manipulated those objects. You
    also looked at game objects and components and learned about properties of components.
    These subjects will be examined in more detail in the next chapter. The scene
    that you created in this chapter lays a foundation for creating a game, and all
    objects that you have created and manipulated so far are going to be used in the
    final game.
  prefs: []
  type: TYPE_NORMAL
