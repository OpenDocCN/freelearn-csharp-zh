["```cs\n        <ItemGroup>\n          <None Update=\"images\\categories.jpeg\">\n            <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n          </None>\n          <None Update=\"images\\category1.jpeg\">\n            <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n          </None>\n        ... \n        ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<Using Include=****\"System.Console\"** **Static=****\"true\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<PackageReference Include=****\"SixLabors.ImageSharp\"** **Version=****\"3.0.2\"** **/>**\n     **</ItemGroup>**\n    ... \n    ```", "```cs\n    // <auto-generated/>\n    global using global::SixLabors.ImageSharp;\n    global using global::SixLabors.ImageSharp.PixelFormats;\n    global using global::SixLabors.ImageSharp.Processing;\n    ... \n    ```", "```cs\n    string imagesFolder = Path.Combine(\n      Environment.CurrentDirectory, \"images\");\n    WriteLine($\"I will look for images in the following folder:\\n{imagesFolder}\");\n    WriteLine();\n    if (!Directory.Exists(imagesFolder))\n    {\n      WriteLine();\n      WriteLine(\"Folder does not exist!\");\n      return;\n    }\n    IEnumerable<string> images =\n      Directory.EnumerateFiles(imagesFolder);\n    foreach (string imagePath in images)\n    {\n      if (Path.GetFileNameWithoutExtension(imagePath).EndsWith(\"-thumbnail\"))\n      {\n        WriteLine($\"Skipping:\\n  {imagePath}\");\n        WriteLine();\n        continue; // This file has already been converted.\n      }\n      string thumbnailPath = Path.Combine(\n        Environment.CurrentDirectory, \"images\",\n        Path.GetFileNameWithoutExtension(imagePath)\n        + \"-thumbnail\" + Path.GetExtension(imagePath));\n      using (Image image = Image.Load(imagePath))\n      {\n        WriteLine($\"Converting:\\n  {imagePath}\");\n        WriteLine($\"To:\\n  {thumbnailPath}\");\n        image.Mutate(x => x.Resize(image.Width / 10, image.Height / 10));\n        image.Mutate(x => x.Grayscale());\n        image.Save(thumbnailPath);\n        WriteLine();\n      }\n    }\n    WriteLine(\"Image processing complete.\");\n    if (OperatingSystem.IsWindows())\n    {\n      Process.Start(\"explorer.exe\", imagesFolder);\n    }\n    else\n    {\n      WriteLine(\"View the images folder.\");\n    } \n    ```", "```cs\n    I will look for images in the following folder:\n    C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\n    Converting:\n      C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\\categories.jpeg\n    To:\n      C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\\categories-thumbnail.jpeg\n    Converting:\n      C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\\category1.jpeg\n    To:\n      C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\\category1-thumbnail.jpeg\n    ...\n    Converting:\n      C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\\category8.jpeg\n    To:\n      C:\\apps-services-net8\\Chapter06\\WorkingWithImages\\bin\\Debug\\net8.0\\images\\category8-thumbnail.jpeg\n    Image processing complete. \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Humanizer\" Version=\"2.14.1\" />\n    </ItemGroup> \n    ```", "```cs\n    using System.Globalization; // To use CultureInfo.\n    partial class Program\n    {\n      private static void ConfigureConsole(string culture = \"en-US\")\n      {\n        // To enable special characters like … (ellipsis) as a single character.\n        OutputEncoding = System.Text.Encoding.UTF8;\n        Thread t = Thread.CurrentThread;\n        t.CurrentCulture = CultureInfo.GetCultureInfo(culture);\n        t.CurrentUICulture = t.CurrentCulture;\n        WriteLine(\"Current culture: {0}\", t.CurrentCulture.DisplayName);\n        WriteLine();\n      }\n    } \n    ```", "```cs\n    ConfigureConsole(); // Defaults to en-US culture. \n    ```", "```cs\n    using Humanizer; // To use common Humanizer extension methods. \n    ```", "```cs\n    private static void OutputCasings(string original)\n    {\n      WriteLine(\"Original casing: {0}\", original);\n      WriteLine(\"Lower casing: {0}\", original.Transform(To.LowerCase));\n      WriteLine(\"Upper casing: {0}\", original.Transform(To.UpperCase));\n      WriteLine(\"Title casing: {0}\", original.Transform(To.TitleCase));\n      WriteLine(\"Sentence casing: {0}\", original.Transform(To.SentenceCase));\n      WriteLine(\"Lower, then Sentence casing: {0}\", \n        original.Transform(To.LowerCase, To.SentenceCase));\n      WriteLine();\n    } \n    ```", "```cs\n    OutputCasings(\"The cat sat on the mat.\");\n    OutputCasings(\"THE CAT SAT ON THE MAT.\");\n    OutputCasings(\"the cat sat on the mat. the frog jumped.\"); \n    ```", "```cs\n    Current culture: English (United States)\n    Original casing: The cat sat on the mat.\n    Lower casing: the cat sat on the mat.\n    Upper casing: THE CAT SAT ON THE MAT.\n    Title casing: The Cat Sat on the Mat.\n    Sentence casing: The cat sat on the mat.\n    Lower, then Sentence casing: The cat sat on the mat.\n    Original casing: THE CAT SAT ON THE MAT.\n    Lower casing: the cat sat on the mat.\n    Upper casing: THE CAT SAT ON THE MAT.\n    Title casing: THE CAT SAT ON THE MAT.\n    Sentence casing: THE CAT SAT ON THE MAT.\n    Lower, then Sentence casing: The cat sat on the mat.\n    Original casing: the cat sat on the mat. the frog jumped.\n    Lower casing: the cat sat on the mat. the frog jumped.\n    Upper casing: THE CAT SAT ON THE MAT. THE FROG JUMPED.\n    Title casing: The Cat Sat on the Mat. the Frog Jumped.\n    Sentence casing: The cat sat on the mat. the frog jumped.\n    Lower, then Sentence casing: The cat sat on the mat. the frog jumped. \n    ```", "```cs\n    private static void OutputSpacingAndDashes()\n    {\n      string ugly = \"ERROR_MESSAGE_FROM_SERVICE\";\n      WriteLine(\"Original string: {0}\", ugly);\n      WriteLine(\"Humanized: {0}\", ugly.Humanize());\n      // LetterCasing is legacy and will be removed in future.\n      WriteLine(\"Humanized, lower case: {0}\", \n        ugly.Humanize(LetterCasing.LowerCase));\n      // Use Transform for casing instead.\n      WriteLine(\"Transformed (lower case, then sentence case): {0}\",\n        ugly.Transform(To.LowerCase, To.SentenceCase));\n      WriteLine(\"Humanized, Transformed (lower case, then sentence case): {0}\",\n        ugly.Humanize().Transform(To.LowerCase, To.SentenceCase));\n    } \n    ```", "```cs\n    **/***\n    OutputCasings(\"The cat sat on the mat.\");\n    OutputCasings(\"THE CAT SAT ON THE MAT.\");\n    OutputCasings(\"the cat sat on the mat. the frog jumped.\");\n    ***/**\n    **OutputSpacingAndDashes();** \n    ```", "```cs\n    Original string: ERROR_MESSAGE_FROM_SERVICE\n    Humanized: ERROR MESSAGE FROM SERVICE\n    Humanized, lower case: error message from service\n    Transformed (lower case, then sentence case): Error_message_from_service\n    Humanized, Transformed (lower case, then sentence case): Error message from service \n    ```", "```cs\n    namespace Packt.Shared;\n    public enum WondersOfTheAncientWorld : byte\n    {\n      None                     = 0b_0000_0000, // i.e. 0\n      GreatPyramidOfGiza       = 0b_0000_0001, // i.e. 1\n      HangingGardensOfBabylon  = 0b_0000_0010, // i.e. 2\n      StatueOfZeusAtOlympia    = 0b_0000_0100, // i.e. 4\n      TempleOfArtemisAtEphesus = 0b_0000_1000, // i.e. 8\n      MausoleumAtHalicarnassus = 0b_0001_0000, // i.e. 16\n      ColossusOfRhodes         = 0b_0010_0000, // i.e. 32\n      LighthouseOfAlexandria   = 0b_0100_0000  // i.e. 64\n    } \n    ```", "```cs\n    using Packt.Shared; // To use WondersOfTheAncientWorld. \n    ```", "```cs\n    private static void OutputEnumNames()\n    {\n      var favoriteAncientWonder = WondersOfTheAncientWorld.StatueOfZeusAtOlympia;\n      WriteLine(\"Raw enum value name: {0}\", favoriteAncientWonder);\n      WriteLine(\"Humanized: {0}\", favoriteAncientWonder.Humanize());\n      WriteLine(\"Humanized, then Titleized: {0}\", \n        favoriteAncientWonder.Humanize().Titleize());\n      WriteLine(\"Truncated to 8 characters: {0}\", \n        favoriteAncientWonder.ToString().Truncate(length: 8));\n      WriteLine(\"Kebaberized: {0}\", \n        favoriteAncientWonder.ToString().Kebaberize());\n    } \n    ```", "```cs\n    **//**OutputSpacingAndDashes();\n    **OutputEnumNames();** \n    ```", "```cs\n    Raw enum value name: StatueOfZeusAtOlympia\n    Humanized: Statue of zeus at olympia\n    Humanized, then Titlerized: Statue of Zeus at Olympia\n    Truncated to 8 characters: StatueO…\n    Kebaberized: statue-of-zeus-at-olympia \n    ```", "```cs\n    private static void NumberFormatting()\n    {\n      int number = 123;\n      WriteLine($\"Original number: {number}\");\n      WriteLine($\"Roman: {number.ToRoman()}\");\n      WriteLine($\"Words: {number.ToWords()}\");\n      WriteLine($\"Ordinal words: {number.ToOrdinalWords()}\");\n      WriteLine();\n      string[] things = { \"fox\", \"person\", \"sheep\", \n        \"apple\", \"goose\", \"oasis\", \"potato\", \"die\", \"dwarf\",\n        \"attorney general\", \"biceps\"};\n      for (int i = 1; i <= 3; i++)\n      {\n        for (int j = 0; j < things.Length; j++)\n        {\n          Write(things[j].ToQuantity(i, ShowQuantityAs.Words));\n          if (j < things.Length - 1) Write(\", \");\n        }\n        WriteLine();\n      }\n      WriteLine();\n      int thousands = 12345;\n      int millions = 123456789;\n      WriteLine(\"Original: {0}, Metric: About {1}\", thousands,\n        thousands.ToMetric(decimals: 0));\n      WriteLine(\"Original: {0}, Metric: {1}\", thousands,\n        thousands.ToMetric(MetricNumeralFormats.WithSpace \n          | MetricNumeralFormats.UseShortScaleWord, \n          decimals: 0));\n      WriteLine(\"Original: {0}, Metric: {1}\", millions,\n        millions.ToMetric(decimals: 1));\n    } \n    ```", "```cs\n    **//**OutputEnumNames();\n    **NumberFormatting();** \n    ```", "```cs\n    Original number: 123\n    Roman: CXXIII\n    Words: one hundred and twenty-three\n    Ordinal words: hundred and twenty-third\n    one fox, one person, one sheep, one apple, one goose, one oasis, one potato, one die, one dwarf, one attorney general, one bicep\n    two foxes, two people, two sheep, two apples, two geese, two oases, two potatoes, two dice, two dwarves, two attorney generals, two biceps\n    three foxes, three people, three sheep, three apples, three geese, three oases, three potatoes, three dice, three dwarves, three attorney generals, three biceps\n    Original: 12345, Metric: About 12k\n    Original: 12345, Metric: About 12 thousand\n    Original: 123456789, Metric: 123.5M \n    ```", "```cs\n    using Humanizer.Inflections; // To use Vocabularies. \n    ```", "```cs\n    Vocabularies.Default.AddIrregular(\"biceps\", \"bicepses\");\n    Vocabularies.Default.AddIrregular(\"attorney general\", \"attorneys general\"); \n    ```", "```cs\n    private static void DateTimeFormatting()\n    {\n      DateTimeOffset now = DateTimeOffset.Now;\n      // By default, all Humanizer comparisons are to Now (UTC).\n      WriteLine($\"Now (UTC): {now}\");\n      WriteLine(\"Add 3 hours, Humanized: {0}\", \n        now.AddHours(3).Humanize());\n      WriteLine(\"Add 3 hours and 1 minute, Humanized: {0}\", \n        now.AddHours(3).AddMinutes(1).Humanize());\n      WriteLine(\"Subtract 3 hours, Humanized: {0}\", \n        now.AddHours(-3).Humanize());\n      WriteLine(\"Add 24 hours, Humanized: {0}\", \n        now.AddHours(24).Humanize());\n      WriteLine(\"Add 25 hours, Humanized: {0}\", \n        now.AddHours(25).Humanize());\n      WriteLine(\"Add 7 days, Humanized: {0}\", \n        now.AddDays(7).Humanize());\n      WriteLine(\"Add 7 days and 1 minute, Humanized: {0}\", \n        now.AddDays(7).AddMinutes(1).Humanize());\n      WriteLine(\"Add 1 month, Humanized: {0}\", \n        now.AddMonths(1).Humanize());\n      WriteLine();\n      // Examples of TimeSpan humanization.\n      int[] daysArray = { 12, 13, 14, 15, 16 };\n      foreach (int days in daysArray)\n      {\n        WriteLine(\"{0} days, Humanized: {1}\",\n          days, TimeSpan.FromDays(days).Humanize());\n        WriteLine(\"{0} days, Humanized with precision 2: {1}\",\n          days, TimeSpan.FromDays(days).Humanize(precision: 2));\n        WriteLine(\"{0} days, Humanized with max unit days: {1}\",\n          days, TimeSpan.FromDays(days).Humanize(\n            maxUnit: Humanizer.Localisation.TimeUnit.Day));\n        WriteLine();\n      }\n      // Examples of clock notation.\n      TimeOnly[] times = { new TimeOnly(9, 0),\n        new TimeOnly(9, 15), new TimeOnly(15, 30) };\n      foreach (TimeOnly time in times)\n      {\n        WriteLine(\"{0}: {1}\", time, time.ToClockNotation());\n      }\n    } \n    ```", "```cs\n    **//**NumberFormatting();\n    **DateTimeFormatting();** \n    ```", "```cs\n    Current culture: English (United States)\n    Now (UTC): 5/30/2023 8:12:51 AM +01:00\n    Add 3 hours, Humanized: 2 hours from now\n    Add 3 hours and 1 minute, Humanized: 3 hours from now\n    Subtract 3 hours, Humanized: 3 hours ago\n    Add 24 hours, Humanized: 23 hours from now\n    Add 25 hours, Humanized: tomorrow\n    Add 7 days, Humanized: 6 days from now\n    Add 7 days and 1 minute, Humanized: 7 days from now\n    Add 1 month, Humanized: one month from now\n    12 days, Humanized: 1 week\n    12 days, Humanized with precision 2: 1 week, 5 days\n    12 days, Humanized with max unit days: 12 days\n    13 days, Humanized: 1 week\n    13 days, Humanized with precision 2: 1 week, 6 days\n    13 days, Humanized with max unit days: 13 days\n    14 days, Humanized: 2 weeks\n    14 days, Humanized with precision 2: 2 weeks\n    14 days, Humanized with max unit days: 14 days\n    15 days, Humanized: 2 weeks\n    15 days, Humanized with precision 2: 2 weeks, 1 day\n    15 days, Humanized with max unit days: 15 days\n    16 days, Humanized: 2 weeks\n    16 days, Humanized with precision 2: 2 weeks, 2 days\n    16 days, Humanized with max unit days: 16 days\n    9:00 AM: nine o'clock\n    9:15 AM: a quarter past nine\n    3:30 PM: half past three \n    ```", "```cs\n    ConfigureConsole(**\"fr-FR\"**); // Defaults to en-US culture. \n    ```", "```cs\nvar lineitem = new { ProductId = 11, UnitPrice = 25.49, Quantity = 3 };\nlog.Information(\"Added {@LineItem} to shopping cart.\", lineitem); \n```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"Serilog\" Version=\"3.1.1\" />\n      <PackageReference Include=\"Serilog.Sinks.Console\" Version=\"5.0.0\" />\n      <PackageReference Include=\"Serilog.Sinks.File\" Version=\"5.0.0\" />\n    </ItemGroup> \n    ```", "```cs\n    namespace Serilogging.Models;\n    public class ProductPageView\n    {\n      public int ProductId { get; set; }\n      public string? PageTitle { get; set; }\n      public string? SiteSection { get; set; }\n    } \n    ```", "```cs\n    using Serilog; // To use Log, LoggerConfiguration, RollingInterval.\n    using Serilog.Core; // To use Logger.\n    using Serilogging.Models; // To use ProductPageView. \n    ```", "```cs\n    // Create a new logger that will write to the console and to\n    // a text file, one-file-per-day, named with the date.\n    using Logger log = new LoggerConfiguration()\n        .WriteTo.Console()\n        .WriteTo.File(\"log.txt\", rollingInterval: RollingInterval.Day)\n        .CreateLogger();\n    // Assign the new logger to the static entry point for logging.\n    Log.Logger = log;\n    Log.Information(\"The global logger has been configured.\");\n    // Log some example entries of differing severity.\n    Log.Warning(\"Danger, Serilog, danger!\");\n    Log.Error(\"This is an error!\");\n    Log.Fatal(\"Fatal problem!\");\n    ProductPageView pageView = new() { \n      PageTitle = \"Chai\", \n      SiteSection = \"Beverages\", \n      ProductId = 1 };\n    Log.Information(\"{@PageView} occurred at {Viewed}\",\n      pageView, DateTimeOffset.UtcNow);\n    // For a log with a buffer, like a text file logger, you\n    // must flush before ending the app.\n    Log.CloseAndFlush(); \n    ```", "```cs\n    [07:09:43 INF] The global logger has been configured.\n    [07:09:43 WRN] Danger, Serilog, danger!\n    [07:09:43 ERR] This is an error!\n    [07:09:43 FTL] Fatal problem!\n    [07:09:43 INF] {\"ProductId\": 1, \"PageTitle\": \"Chai\", \"SiteSection\": \"Beverages\", \"$type\": \"ProductPageView\"} occurred at 09/07/2023 15:08:44 +00:00 \n    ```", "```cs\n    namespace Northwind.EntityModels;\n    // This record will only have a constructor with the parameters below.\n    // Objects will be immutable after instantiation using this constructor.\n    // It will not have a default parameterless constructor.\n    public record class Customer(\n      string FirstName,\n      string LastName\n    ); \n    ```", "```cs\n    namespace Northwind.EntityModels;\n    public record class LineItem(\n      string ProductName,\n      decimal UnitPrice,\n      int Quantity\n    ); \n    ```", "```cs\n    namespace Northwind.EntityModels;\n    public record class Cart(\n      Customer Customer,\n      List<LineItem> Items\n    ); \n    ```", "```cs\n    namespace Northwind.ViewModels;\n    public record class Summary\n    {\n      // These properties can be initialized once but then never changed.\n      public string? FullName { get; init; }\n      public decimal Total { get; init; }\n      // This record class will have a default parameterless constructor.\n      // The following commented statement is automatically generated:\n      // public Summary() { }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\MappingObjects.Models\\MappingObjects.Models.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using AutoMapper; // To use MapperConfiguration.\n    using AutoMapper.Internal; // To use the Internal() extension method.\n    using Northwind.EntityModels; // To use Cart.\n    using Northwind.ViewModels; // To use Summary.\n    namespace MappingObjects.Mappers;\n    public static class CartToSummaryMapper\n    {\n      public static MapperConfiguration GetMapperConfiguration()\n      {\n        MapperConfiguration config = new(cfg =>\n        {\n          // To fix an issue with the MaxInteger method:\n          // https://github.com/AutoMapper/AutoMapper/issues/3988\n          cfg.Internal().MethodMappingEnabled = false;\n          // Configure the mapper using projections.\n          cfg.CreateMap<Cart, Summary>()\n            // Map the first and last names formatted to the full name.\n           .ForMember(dest => dest.FullName, opt => opt.MapFrom(src =>\n              string.Format(\"{0} {1}\", \n                src.Customer.FirstName,\n                src.Customer.LastName)\n            ));\n        });\n        return config;\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n     **<PackageReference Include=****\"AutoMapper\"** **Version=****\"12.0.1\"** **/>**\n      <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" /> \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\MappingObjects.Mappers\\MappingObjects.Mappers.csproj\" />\n      <ProjectReference Include=\n        \"..\\MappingObjects.Models\\MappingObjects.Models.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using AutoMapper; // To use MapperConfiguration.\n    using MappingObjects.Mappers; // To use CartToSummaryMapper.\n    namespace MappingObjects.Tests;\n    public class TestAutoMapperConfig\n    {  \n      [Fact]\n      public void TestSummaryMapping()\n      {\n        MapperConfiguration config = CartToSummaryMapper.GetMapperConfiguration();\n        config.AssertConfigurationIsValid();\n      }\n    } \n    ```", "```cs\n    cfg.CreateMap<Cart, Summary>()\n      // Map the first and last names formatted to the full name.\n      .ForMember(dest => dest.FullName, opt => opt.MapFrom(src =>\n        string.Format(\"{0} {1}\", \n          src.Customer.FirstName, src.Customer.LastName)\n      )) **// We have removed a semi-colon from here.**\n    **// Map the sum of items to the Total member.**\n     **.ForMember(dest => dest.Total, opt => opt.MapFrom(**\n     **src => src.Items.Sum(item => item.UnitPrice * item.Quantity)));**\n    }); \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\MappingObjects.Mappers\\MappingObjects.Mappers.csproj\" />\n      <ProjectReference Include=\n        \"..\\MappingObjects.Models\\MappingObjects.Models.csproj\" />\n    </ItemGroup>\n    <ItemGroup>\n      <PackageReference Include=\"AutoMapper\" Version=\"12.0.1\" />\n    </ItemGroup> \n    ```", "```cs\n    using AutoMapper; // To use MapperConfiguration, IMapper.\n    using MappingObjects.Mappers; // To use CartToSummaryMapper.\n    using Northwind.EntityModels; // To use Customer, Cart, LineItem.\n    using Northwind.ViewModels; // To use Summary.\n    using System.Text; // To use Encoding.\n    // Set the console's output encoding to UTF-8 to support\n    // Unicode characters like the Euro currency symbol.\n    OutputEncoding = Encoding.UTF8;\n    // Create an object model from \"entity\" model types that\n    // might have come from a data store like SQL Server.\n    Cart cart = new(\n      Customer: new(\n        FirstName: \"John\",\n        LastName: \"Smith\"\n      ), \n      Items: new()\n      {\n        new(ProductName: \"Apples\", UnitPrice: 0.49M, Quantity: 10),\n        new(ProductName: \"Bananas\", UnitPrice: 0.99M, Quantity: 4)\n      }\n    );\n    WriteLine(\"*** Original data before mapping.\");\n    WriteLine($\"{cart.Customer}\");\n    foreach (LineItem item in cart.Items)\n    {\n      WriteLine($\"  {item}\");\n    }\n    // Get the mapper configuration for converting a Cart to a Summary.\n    MapperConfiguration config = CartToSummaryMapper.GetMapperConfiguration();\n    // Create a mapper using the configuration.\n    IMapper mapper = config.CreateMapper();\n    // Perform the mapping.\n    Summary summary = mapper.Map<Cart, Summary>(cart);\n    // Output the result.\n    WriteLine();\n    WriteLine(\"*** After mapping.\");\n    WriteLine($\"Summary: {summary.FullName} spent {summary.Total:C}.\"); \n    ```", "```cs\n    *** Original data before mapping.\n    Customer { FirstName = John, LastName = Smith }\n      LineItem { ProductName = Apples, UnitPrice = 0.49, Quantity = 10 }\n      LineItem { ProductName = Bananas, UnitPrice = 0.99, Quantity = 4 }\n    *** After mapping.\n    Summary: John Smith spent £8.86. \n    ```", "```cs\n    <ItemGroup>\n     **<PackageReference Include=****\"FluentAssertions\"** **Version=****\"6.12.0\"** **/>**\n      <PackageReference Include=\"Microsoft.NET.Test.Sdk\" Version=\"17.8.0\" /> \n    ```", "```cs\n    using FluentAssertions; // To use common fluent assertions extension methods.\n    namespace FluentTests;\n    public class FluentExamples\n    {\n      [Fact]\n      public void TestString()\n      {\n        string city = \"London\";\n        string expectedCity = \"London\";\n        city.Should().StartWith(\"Lo\")\n          .And.EndWith(\"on\")\n          .And.Contain(\"do\")\n          .And.HaveLength(6);\n         city.Should().NotBeNull()\n          .And.Be(\"London\")\n          .And.BeSameAs(expectedCity)\n          .And.BeOfType<string>();\n        city.Length.Should().Be(6);\n      }\n    } \n    ```", "```cs\n    Expected city \"Londo\" to end with \"on\". \n    ```", "```cs\n    [Fact]\n    public void TestCollections()\n    {\n      string[] names = { \"Alice\", \"Bob\", \"Charlie\" };\n      names.Should().HaveCountLessThan(4,\n        \"because the maximum items should be 3 or fewer\");\n      names.Should().OnlyContain(name => name.Length <= 6);\n    } \n    ```", "```cs\n    Expected names to contain only items matching (name.Length <= 6), but {\"Charlie\"} do(es) not match. \n    ```", "```cs\n    using FluentAssertions.Extensions; // To use February, March extension methods. \n    ```", "```cs\n    [Fact]\n    public void TestDateTimes()\n    {\n      DateTime when = new(\n        hour: 9, minute: 30, second: 0,\n        day: 25, month: 3, year: 2024);\n      when.Should().Be(25.March(2024).At(9, 30));\n      when.Should().BeOnOrAfter(23.March(2024));\n      when.Should().NotBeSameDateAs(12.February(2024));\n      when.Should().HaveYear(2024);\n      DateTime due = new(\n        hour: 11, minute: 0, second: 0,\n        day: 25, month: 3, year: 2024);\n      when.Should().BeAtLeast(2.Hours()).Before(due);\n    } \n    ```", "```cs\n    Expected when <2024-03-25 09:30:00> to be at least 2h before <2024-03-25 11:00:00>, but it is behind by 1h and 30m. \n    ```", "```cs\n    namespace FluentValidation.Models;\n    public enum CustomerLevel\n    {\n      Bronze,\n      Silver,\n      Gold\n    } \n    ```", "```cs\n    namespace FluentValidation.Models;\n    public class Order\n    {\n      public long OrderId { get; set; }\n      public string? CustomerName { get; set; }\n      public string? CustomerEmail { get; set; } \n      public CustomerLevel CustomerLevel { get; set; }\n      public decimal Total { get; set; }\n      public DateTime OrderDate { get; set; }\n      public DateTime ShipDate { get; set; }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"FluentValidation\" Version=\"11.8.1\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\FluentValidation.Models\\FluentValidation.Models.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using FluentValidation.Models;\n    namespace FluentValidation.Validators;\n    public class OrderValidator : AbstractValidator<Order>\n    {\n      public OrderValidator()\n      {\n        RuleFor(order => order.OrderId)\n          .NotEmpty(); // Not default(long) which is 0.\n        RuleFor(order => order.CustomerName)\n          .NotNull()\n          .WithName(\"Name\"); // Use Name instead of CustomerName in messages.\n        RuleFor(order => order.CustomerName)\n          .MinimumLength(5)\n          .WithSeverity(Severity.Warning);\n        RuleFor(order => order.CustomerEmail)\n          .NotEmpty()\n          .EmailAddress();\n        RuleFor(order => order.CustomerLevel)\n          .IsInEnum();\n        RuleFor(order => order.Total)\n          .GreaterThan(0);\n        RuleFor(order => order.ShipDate)\n          .GreaterThan(order => order.OrderDate);\n        When(order => order.CustomerLevel == CustomerLevel.Gold, () =>\n        {\n          RuleFor(order => order.Total).LessThan(50M);\n          RuleFor(order => order.Total).GreaterThanOrEqualTo(20M);\n        }).Otherwise(() =>\n        {\n          RuleFor(order => order.Total).LessThan(20M);\n        });\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\FluentValidation.Models\\FluentValidation.Models.csproj\" />\n      <ProjectReference Include=\n        \"..\\FluentValidation.Validators\\FluentValidation.Validators.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using FluentValidation.Models; // To use Order.\n    using FluentValidation.Results; // To use ValidationResult.\n    using FluentValidation.Validators; // To use OrderValidator.\n    using System.Globalization; // To use CultureInfo.\n    using System.Text; // To use Encoding.\n    OutputEncoding = Encoding.UTF8; // Enable Euro symbol.\n    // Control the culture used for formatting of dates and currency,\n    // and for localizing error messages to local language.\n    Thread t = Thread.CurrentThread;\n    t.CurrentCulture = CultureInfo.GetCultureInfo(\"en-US\");\n    t.CurrentUICulture = t.CurrentCulture;\n    WriteLine($\"Current culture: {t.CurrentCulture.DisplayName}\");\n    WriteLine();\n    Order order = new()\n    {\n      // Start with a deliberately invalid order.\n    };\n    OrderValidator validator = new();\n    ValidationResult result = validator.Validate(order);\n    // Output the order data.\n    WriteLine($\"CustomerName:  {order.CustomerName}\");\n    WriteLine($\"CustomerEmail: {order.CustomerEmail}\");\n    WriteLine($\"CustomerLevel: {order.CustomerLevel}\");\n    WriteLine($\"OrderId:       {order.OrderId}\");\n    WriteLine($\"OrderDate:     {order.OrderDate}\");\n    WriteLine($\"ShipDate:      {order.ShipDate}\");\n    WriteLine($\"Total:         {order.Total:C}\");\n    WriteLine();\n    // Output if the order is valid and any rules that were broken.\n    WriteLine($\"IsValid:  {result.IsValid}\");\n    foreach (var item in result.Errors)\n    {\n      WriteLine($\"  {item.Severity}: {item.ErrorMessage}\");\n    } \n    ```", "```cs\n    Current culture: English (United States)\n    CustomerName:\n    CustomerEmail:\n    CustomerLevel: Bronze\n    OrderId:       0\n    OrderDate:     01/01/0001 12:00:00 AM\n    ShipDate:      01/01/0001 12:00:00 AM\n    Total:         $0.00\n    IsValid:  False\n      Error: 'Order Id' must not be empty.\n      Error: 'Name' must not be empty.\n      Error: 'Customer Email' must not be empty.\n      Error: 'Total' must be greater than '0'.\n      Error: 'Ship Date' must be greater than '01/01/0001 12:00:00 AM'. \n    ```", "```cs\n    Current culture: français (France)\n    CustomerName:\n    CustomerEmail:\n    CustomerLevel: Bronze\n    OrderId:       0\n    OrderDate:     01/01/0001 00:00:00\n    ShipDate:      01/01/0001 00:00:00\n    Total:         0,00 €\n    IsValid:  False\n      Error: 'Order Id' ne doit pas être vide.\n      Error: 'Name' ne doit pas avoir la valeur null.\n      Error: 'Customer Email' ne doit pas être vide.\n      Error: 'Total' doit être plus grand que '0'.\n      Error: 'Ship Date' doit être plus grand que '01/01/0001 00:00:00'. \n    ```", "```cs\n    Order order = new()\n    {\n     **OrderId =** **10001****,**\n     **CustomerName =** **\"Abc\"****,**\n     **CustomerEmail =** **\"abc&example.com\"****,**\n     **CustomerLevel = (CustomerLevel)****4****,**\n     **OrderDate =** **new****(****2022****, month:** **12****, day:** **1****),**\n     **ShipDate =** **new****(****2022****, month:** **11****, day:** **5****),**\n     **Total =** **49.99****M**\n    }; \n    ```", "```cs\n    Current culture: English (United States)\n    CustomerName:  Abc\n    CustomerEmail: abc&example.com\n    CustomerLevel: 4\n    OrderId:       10001\n    OrderDate:     12/1/2022 12:00:00 AM\n    ShipDate:      11/5/2022 12:00:00 AM\n    Total:         $49.99\n    IsValid:  False\n      Warning: The length of 'Customer Name' must be at least 5 characters. You entered 3 characters.\n      Error: 'Customer Email' is not a valid email address.\n      Error: 'Customer Level' has a range of values which does not include '4'.\n      Error: 'Ship Date' must be greater than '12/1/2022 12:00:00 AM'.\n      Error: 'Total' must be less than '20'. \n    ```", "```cs\n    Order order = new()\n    {\n      OrderId = 10001,\n      CustomerName = \"Abc**def**\",\n      CustomerEmail = \"abc**@**example.com\",\n      CustomerLevel = **CustomerLevel.Gold**,\n      OrderDate = new(2022, month: 12, day: 1),\n      ShipDate = new(2022, month: 12, day: 5),\n      // CustomerLevel is Gold so Total can be >20.\n      Total = 49.99M\n    }; \n    ```", "```cs\n    IsValid:  True \n    ```", "```cs\n    namespace GeneratingPdf.Models;\n    public class Category\n    {\n      public int CategoryId { get; set; }\n      public string CategoryName { get; set; } = null!;\n    } \n    ```", "```cs\n    namespace GeneratingPdf.Models;\n    public class Catalog\n    {\n      public List<Category> Categories { get; set; } = null!;\n    } \n    ```", "```cs\n    <ItemGroup>\n      <!-- The newest version with an MIT license. -->\n      <PackageReference Include=\"QuestPDF\" Version=\"2022.12.6\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\GeneratingPdf.Models\\GeneratingPdf.Models.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using GeneratingPdf.Models; // Catalog\n    using QuestPDF.Drawing; // DocumentMetadata\n    using QuestPDF.Fluent; // Page\n    using QuestPDF.Helpers; // Colors\n    using QuestPDF.Infrastructure; // IDocument, IDocumentContainer\n    namespace GeneratingPdf.Document;\n    public class CatalogDocument : IDocument\n    {\n      public Catalog Model { get; }\n      public CatalogDocument(Catalog model)\n      {\n        Model = model;\n      }\n      public void Compose(IDocumentContainer container)\n      {\n        container\n          .Page(page =>\n          {\n            page.Margin(50 /* points */);\n            page.Header()\n              .Height(100).Background(Colors.Grey.Lighten1)\n              .AlignCenter().Text(\"Catalogue\")\n              .Style(TextStyle.Default.FontSize(20));\n            page.Content()\n              .Background(Colors.Grey.Lighten3)\n              .Table(table =>\n              {\n                table.ColumnsDefinition(columns =>\n                {\n                  columns.ConstantColumn(100);\n                  columns.RelativeColumn();\n                });\n                foreach (var item in Model.Categories)\n                {\n                  table.Cell().Text(item.CategoryName);\n                  string imagePath = Path.Combine(\n                    Environment.CurrentDirectory, \"images\", \n                    $\"category{item.CategoryId}.jpeg\");\n\n                  table.Cell().Image(imagePath);\n                }\n              });\n            page.Footer()\n              .Height(50).Background(Colors.Grey.Lighten1)\n              .AlignCenter().Text(x =>\n              {\n                x.CurrentPageNumber();\n                x.Span(\" of \");\n                x.TotalPages();\n              });\n          });\n      }\n      public DocumentMetadata GetMetadata() => DocumentMetadata.Default;\n    } \n    ```", "```cs\n    <ItemGroup>\n      <None Update=\"images\\category1.jpeg\">\n        <CopyToOutputDirectory>Always</CopyToOutputDirectory>\n      </None>\n    ... \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\n        \"..\\GeneratingPdf.Document\\GeneratingPdf.Document.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using GeneratingPdf.Document; // To use CatalogDocument.\n    using GeneratingPdf.Models; // To use Catalog, Category.\n    using QuestPDF.Fluent; // To use the GeneratePdf extension method.\n    using QuestPDF.Infrastructure; // To use LicenseType.\n    // For evaluation purposes, feel free to use the QuestPDF Community \n    // License in a non-production environment.\n    QuestPDF.Settings.License = LicenseType.Community;\n    string filename = \"catalog.pdf\";\n    Catalog model = new()\n    {\n      Categories = new()\n      {\n        new() { CategoryId = 1, CategoryName = \"Beverages\"},\n        new() { CategoryId = 2, CategoryName = \"Condiments\"},\n        new() { CategoryId = 3, CategoryName = \"Confections\"},\n        new() { CategoryId = 4, CategoryName = \"Dairy Products\"},\n        new() { CategoryId = 5, CategoryName = \"Grains/Cereals\"},\n        new() { CategoryId = 6, CategoryName = \"Meat/Poultry\"},\n        new() { CategoryId = 7, CategoryName = \"Produce\"},\n        new() { CategoryId = 8, CategoryName = \"Seafood\"}\n      }\n    };\n    CatalogDocument document = new(model);\n    document.GeneratePdf(filename);\n    WriteLine(\"PDF catalog has been created: {0}\",\n      Path.Combine(Environment.CurrentDirectory, filename));\n    try\n    {\n      if (OperatingSystem.IsWindows())\n      {\n        System.Diagnostics.Process.Start(\"explorer.exe\", filename);\n      }\n      else\n      {\n        WriteLine(\"Open the file manually.\");\n      }\n    }\n    catch (Exception ex)\n    {\n      WriteLine($\"{ex.GetType()} says {ex.Message}\");\n    } \n    ```"]