["```cs\nHTTP/1.1 200 OK\nContent-Type: application/json\n{\n    \"status\": \"success\",\n    \"message\": \"Data retrieved successfully\",\n    \"data\": {\n        \"id\": 123,\n        \"name\": \"Example Resource\",\n        \"description\": \"This is an example resource\n          for the API.\",\n        \"created_at\": \"2023-10-26T10:00:00Z\"\n    }\n}\n```", "```cs\n    dotnet new web --name ProductAPI\n    ```", "```cs\n    Code.\n    ```", "```cs\n    var builder = WebApplication.CreateBuilder(args);\n    var app = builder.Build();\n    app.MapGet(\"/\", () => \"Hello World!\");\n    app.Run();\n    ```", "```cs\n    dotnet run\n    ```", "```cs\npublic class Product\n{\n     public int Id {get; set;}\n     public string Name { get; set; }\n     public decimal Price { get; set; }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nvar app = builder.Build();\nList<Product> products = new List<Product>();\napp.MapGet(\"/Product\", () => Results.Ok(products));\napp.MapGet(\"/Product/{id}\", (int id) => {\n    var product = products.FirstOrDefault(p => p.Id == id);\n    return Results.Ok(product);\n});\napp.MapPost(\"/Product\", (Product product) => {\n    if (product != null)\n    {\n        product.Id = products.Count() + 1;\n        products.Add(product);\n    }\n    return Results.Ok(product);\n});\napp.MapPut(\"/Product/{id}\", (int id,\n  Product updatedProduct) => {\n    if (updatedProduct != null)\n    {\n        var oldProduct = products.FirstOrDefault\n          (p => p.Id == id);\n        if (oldProduct == null) return Results.NotFound();\n        oldProduct.Name = updatedProduct.Name;\n        oldProduct.Price = updatedProduct.Price;\n    }\n    return Results.NoContent();\n});\napp.MapDelete(\"/Product/{id}\", (int id) => {\n    var product = products.FirstOrDefault(p => p.Id == id);\n    if (product == null) return Results.NotFound();\n     products.Remove(product);\n    return Results.NoContent();\n});\napp.Run();\n```", "```cs\n    dotnet run\n    ```", "```cs\n    {\n        \"id\": 0,\n        \"Name\": \"Smartphone\",\n        \"Price\": 100\n    }\n    ```", "```cs\ndotnet new webapi -n ProductMVC -controllers true\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n```", "```cs\n[ApiController]\n[Route(\"[controller]\")]\npublic class ProductController : ControllerBase\n{\n    [HttpGet]\n    public IActionResult Get()\n    {\n      // ..\n    }\n    [HttpGet(\"{id}\")]\n    public IActionResult Get(int id)\n    {\n      // ..\n    }\n    [HttpPost]\n    public IActionResult Post(Product product)\n    {\n         //..\n    }\n    [HttpPut]\n    public IActionResult Put(int id,\n      Product updatedProduct)\n    {\n//..\n    }\n    [HttpDelete]\n    public IActionResult Delete(int id)\n    {\n     //..\n    }\n}\n```", "```cs\n public IActionResult Get(int id)\n    {\n        var product = ProductService.Get(id);\n        if (product is null) return NotFound();\n        return Ok(product);\n    }\n```", "```cs\npublic int Id {get; set;}\npublic string Name { get; set; }\npublic decimal Price { get; set; }\n```", "```cs\n{\n  \"id\": 1,\n  \"name\": \"Smartphone\",\n  \"price\": 1000.0\n}\n```", "```cs\nstring fullname1 = Request.QueryString[\"fullname\"];\nstring fullname2 = Request[\"fullname\"];\n```", "```cs\n[HttpGet]\npublic IActionResult GetTasks([FromQuery]bool\n  isCompleted = false)\n    {\n// ..\n    }\n```", "```cs\npublic IActionResult GetTasks([FromQuery(\"completed\")]bool\n  isCompleted = false) { /**/ }\n```", "```cs\n[HttpPost]\n    public IActionResult Post(Product product)\n    {\n        if (product == null) return BadRequest();\n        if (!ModelState.IsValid)\n          return BadRequest(ModelState);\n         // ..\n    }\n```", "```cs\n{\n    \"Name\": [\n        \"The field Name is required\"\n    ]\n}\n```", "```cs\npublic class Product\n{\n    public int Id {get; set;}\n    [Required(ErrorMessage =\"The field Name is required\")]\n    [MinLength(3, ErrorMessage = \"The Name field must have\nat least 3 characters.\")]\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n}\n```", "```cs\nif (product.Price < 0) ModelState.AddModelError(\"Price\",\n  \"The Price field cannot have a value less than zero.\");\n        if (!ModelState.IsValid)\n          return BadRequest(ModelState);\n```", "```cs\n{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n    \"title\": \"API V1\",\n    \"version\": \"v1\"\n  },\n  \"paths\": {\n    \"/api/Todo\": {\n      \"get\": {\n        \"tags\": [\n          \"Todo\"\n        ],\n        \"operationId\": \"ApiTodoGet\",\n        \"responses\": {\n          \"200\": {\n            \"description\": \"Success\",\n            \"content\": {\n              \"text/plain\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ToDoItem\"\n                  }\n                }\n              },\n              \"application/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ToDoItem\"\n                  }\n                }\n              },\n              \"text/json\": {\n                \"schema\": {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/components/schemas/ToDoItem\"\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      \"post\": {\n        …\n      }\n    },\n    \"/api/Todo/{id}\": {\n      \"get\": {\n        …\n      },\n      \"put\": {\n        …\n      },\n      \"delete\": {\n        …\n      }\n    }\n  },\n  \"components\": {\n    \"schemas\": {\n      \"ToDoItem\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"id\": {\n            \"type\": \"integer\",\n            \"format\": \"int32\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"nullable\": true\n          },\n          \"isCompleted\": {\n            \"type\": \"boolean\"\n          }\n        },\n        \"additionalProperties\": false\n      }\n    }\n  }\n}\n```", "```cs\ndotnet add package Swashbuckle.AspNetCore\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers();\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI();\n}\napp.UseHttpsRedirection();\napp.UseAuthorization();\napp.MapControllers();\napp.Run();\n```", "```cs\n[HttpPost]\n    public IActionResult Post(Product product)\n    {\n        if (product == null) return BadRequest();\n        if (product.Price < 0)\n          ModelState.AddModelError(\"Price\",\n          \"The Price field cannot have a value less\n          than zero.\");\n        if (!ModelState.IsValid)\n          return BadRequest(ModelState);\n        product.Id = ProductService.Products.Count() + 1;\n        ProductService.Add(product);\n        return CreatedAtAction(nameof(Get),\n           new {id = product.Id}, product);\n    }\n```", "```cs\n[HttpPost]\n[Consumes(MediaTypeNames.Application.Json)]\n[ProducesResponseType<Product>(StatusCodes\n  .Status201Created)]\n[ProducesResponseType(StatusCodes.Status400BadRequest)]\n    public IActionResult Post(Product product)\n    {\n        // code omitted for readability\n    }\n```"]