["```cs\n    using System;\n    using System.Threading.Tasks.Dataflow;\n    ```", "```cs\n    var bufferingBlock = new BufferBlock<int>();\n    ```", "```cs\n    for (int i = 0; i < 10; i++)\n    {\n      bufferingBlock.Post(i*i);\n    }\n    ```", "```cs\n    for (int i = 0; i < 10; i++)\n    {\n      Console.WriteLine(bufferingBlock.Receive.ToString());\n    }\n    ```", "```cs\n    Console.WriteLine(\"Finished. Press any key to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nbufferingBlock.Post(i*i);\n```", "```cs\nbufferingBlock.Receive()\n```", "```cs\n    using System;\n    using System.Threading.Tasks.Dataflow;\n    using System.Threading.Tasks;\n    ```", "```cs\n    private static async Task WriteDataAsync(BufferBlock<int> bufferingBlock)\n    {\n      // Post some messages to the block. \n      for (int i = 0; i < 10; i++)\n      {\n        await bufferingBlock.SendAsync(i * i);\n      }\n    }\n    ```", "```cs\n    private static async Task ReadDataAsync(BufferBlock<int> bufferingBlock)\n    {\n      // Receive the messages back . \n      for (int i = 0; i < 10; i++)\n      {\n        Console.WriteLine(await bufferingBlock.ReceiveAsync());\n      }\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n      // Create a BufferBlock object. \n      var bufferingBlock = new BufferBlock<int>();\n      WriteDataAsync(bufferingBlock).Wait();\n      ReadDataAsync(bufferingBlock).Wait();\n\n      Console.WriteLine(\"Finished. Press any key to exit.\");\n      Console.ReadLine();\n    }\n    ```", "```cs\nprivate static async Task ReadDataAsync(BufferBlock<int> bufferingBlock)\n{            \n  for (int i = 0; i < 10; i++)\n  {\n    Console.WriteLine(await bufferingBlock.ReceiveAsync());\n  }\n}\n```", "```cs\n    using System;\n    using System.Threading.Tasks.Dataflow;\n    using System.Threading.Tasks;\n    ```", "```cs\n    static void Produce(ITargetBlock<int> target)\n    {\n      // Create a Random object.\n      Random rand = new Random();\n\n      // fill a buffer with random data  \n      for (int i = 0; i < 100; i++)\n      {\n        // get the next random number \n        int number = rand.Next();\n\n        // Post the result .\n        target.Post(number);\n      }\n\n      // Set the target to the completed state\n      target.Complete();\n    }\n    ```", "```cs\n    static async Task<int> ConsumeAsync(ISourceBlock<int> source)\n    {\n      // Initialize a counter to track the sum. \n      int sumOfProcessed = 0;\n\n      // Read from the source buffer until empty\n      while (await source.OutputAvailableAsync())\n      {\n        int data = source.Receive();\n\n        // calculate the sum.\n        sumOfProcessed += data;\n      }\n\n      return sumOfProcessed;\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {  \n      var buffer = new BufferBlock<int>();\n\n      // Start the consumer.   \n      var consumer = ConsumeAsync(buffer);\n\n      // Post source data.\n      Produce(buffer);\n\n      // Wait for the consumer to process data.\n      consumer.Wait();\n\n      // Print the count of bytes processed to the console.\n      Console.WriteLine(\"Sum of processed numbers: {0}.\", consumer.Result);\n      Console.WriteLine(\"Finished. Press any key to exit.\");\n      Console.ReadLine();\n    }\n    ```", "```cs\nstatic void Produce(ITargetBlock<int> target)\n{\n  ... \n  for (int i = 0; i < 100; i++)\n  {\n    ...\n    target.Post(number);\n  }.\n  target.Complete();\n}\n```", "```cs\nstatic async Task<int> ConsumeAsync(ISourceBlock<int> source)\n{\n  ...\n  while (await source.OutputAvailableAsync())\n  {\n    int data = source.Receive();\n      sumOfProcessed += data;\n  }\n  return sumOfProcessed;\n}\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Threading.Tasks.Dataflow;\n    using System.Net;\n    ```", "```cs\n    // Download a book as a string\n    var downloadBook = new TransformBlock<string, string>(url =>\n    {\n      Console.WriteLine(\"Downloading the book...\");\n\n      return new WebClient().DownloadString(url);\n    });\n    ```", "```cs\n    // splits text into an array of strings. \n    var createWordList = new TransformBlock<string, string[]>(text =>\n    {\n      Console.WriteLine(\"Creating list of words...\");\n\n      // Remove punctuation  \n      char[] tokens = text.ToArray();\n      for (int i = 0; i < tokens.Length; i++)\n      {\n        if (!char.IsLetter(tokens[i]))\n          tokens[i] = ' ';\n      }\n      text = new string(tokens);\n\n      return text.Split(new char[] { ' ' },\n         StringSplitOptions.RemoveEmptyEntries);\n    });\n    ```", "```cs\n    // Remove short words and return the count \n    var filterWordList = new TransformBlock<string[], int>(words =>\n    {\n      Console.WriteLine(\"Counting words...\");\n\n      var wordList = words.Where(word => word.Length > 3).OrderBy(word => word)\n         .Distinct().ToArray();\n      return wordList.Count();\n    });\n    ```", "```cs\n    var printWordCount = new ActionBlock<int>(wordcount =>\n    {\n      Console.WriteLine(\"Found {0} words\",\n         wordcount);\n    });\n    ```", "```cs\n    downloadBook.LinkTo(createWordList);\n    createWordList.LinkTo(filterWordList);\n    filterWordList.LinkTo(printWordCount);\n    ```", "```cs\n    downloadBook.Completion.ContinueWith(t =>\n    {\n      if (t.IsFaulted) ((IDataflowBlock)createWordList).Fault(t.Exception);\n      else createWordList.Complete();\n    });\n    createWordList.Completion.ContinueWith(t =>\n    {\n      if (t.IsFaulted) ((IDataflowBlock)filterWordList).Fault(t.Exception);\n      else filterWordList.Complete();\n    });\n    filterWordList.Completion.ContinueWith(t =>\n    {\n      if (t.IsFaulted) ((IDataflowBlock)printWordCount).Fault(t.Exception);\n      else printWordCount.Complete();\n    });\n    ```", "```cs\n    // Download Origin of Species\n    downloadBook.Post(\"http://www.gutenberg.org/files/2009/2009.txt\");\n\n    // Mark the head of the pipeline as complete. \n    downloadBook.Complete();\n\n    printWordCount.Completion.Wait();\n\n    Console.WriteLine(\"Finished. Press any key to exit.\");\n    Console.ReadLine();\n    ```", "```cs\nvar downloadBook = new TransformBlock<string, string>(uri =>\n{\n  ...\n  return new WebClient().DownloadString(uri);\n});\n```", "```cs\ndownloadBook.LinkTo(createWordList);\ncreateWordList.LinkTo(filterWordList);\nfilterWordList.LinkTo(printWordCount);\n```", "```cs\ndownloadBook.Completion.ContinueWith(t =>\n{\n  if (t.IsFaulted) ((IDataflowBlock)createWordList).Fault(t.Exception);\n  else createWordList.Complete();\n});\n```", "```cs\ndownloadBook.Post(\"http://www.gutenberg.org/files/2009/2009.txt\");\n```", "```cs\n    using System;\n    using System.Linq;\n    using System.Threading.Tasks.Dataflow;\n    using System.Net;\n    using System.Threading;\n    ```", "```cs\n    var cancellationSource = new CancellationTokenSource();\n    ```", "```cs\n    // Download a book as a string\n    var downloadBook = new TransformBlock<string, string>(uri =>\n    {\n      Console.WriteLine(\"Downloading the book...\");\n\n      return new WebClient().DownloadString(uri);\n    },\n    new ExecutionDataflowBlockOptions\n    {\n      CancellationToken = cancellationSource.Token\n    });\n\n    // splits text into an array of strings. \n    var createWordList = new TransformBlock<string, string[]>(text =>\n    {\n      Console.WriteLine(\"Creating list of words...\");\n\n      // Remove punctuation  \n      char[] tokens = text.ToArray();\n      for (int i = 0; i < tokens.Length; i++)\n      {\n        if (!char.IsLetter(tokens[i]))\n          tokens[i] = ' ';\n      }\n      text = new string(tokens);\n      return text.Split(new char[] { ' ' },\n         StringSplitOptions.RemoveEmptyEntries);\n    },\n    new ExecutionDataflowBlockOptions\n    {\n      CancellationToken = cancellationSource.Token\n    });\n\n    // Remove short words and return the count \n    var filterWordList = new TransformBlock<string[], int>(words =>\n    {\n      Console.WriteLine(\"Counting words...\");\n\n      var wordList = words.Where(word => word.Length > 3).OrderBy(word => word)\n         .Distinct().ToArray();\n      return wordList.Count();\n    },\n    new ExecutionDataflowBlockOptions\n    {\n      CancellationToken = cancellationSource.Token\n    });\n\n    var printWordCount = new ActionBlock<int>(wordcount =>\n    {\n      Console.WriteLine(\"Found {0} words\",\n         wordcount);\n    },\n    new ExecutionDataflowBlockOptions\n    {\n      CancellationToken = cancellationSource.Token\n    });\n    ```", "```cs\n    downloadBook.LinkTo(createWordList);\n    createWordList.LinkTo(filterWordList);\n    filterWordList.LinkTo(printWordCount);\n    ```", "```cs\n    downloadBook.Completion.ContinueWith(t =>\n    {\n      if (t.IsFaulted) ((IDataflowBlock)createWordList).Fault(t.Exception);\n      else createWordList.Complete();\n    });\n    createWordList.Completion.ContinueWith(t =>\n    {\n      if (t.IsFaulted) ((IDataflowBlock)filterWordList).Fault(t.Exception);\n      else filterWordList.Complete();\n    });\n    filterWordList.Completion.ContinueWith(t =>\n    {\n      if (t.IsFaulted) ((IDataflowBlock)printWordCount).Fault(t.Exception);\n      else printWordCount.Complete();\n    });\n    ```", "```cs\n    try\n    {\n      Console.WriteLine(\"Starting...\");                \n\n      // Download Origin of Species\n      downloadBook.Post(\"http://www.gutenberg.org/files/2009/2009.txt\");\n\n      // Mark the head of the pipeline as complete. \n      downloadBook.Complete();\n\n      // Cancel the operation\n      cancellationSource.Cancel();\n\n      printWordCount.Completion.Wait();\n\n    }\n    ```", "```cs\n    catch (AggregateException ae)\n    {\n      foreach (Exception ex in ae.InnerExceptions)\n      {\n        Console.WriteLine(ex.Message);\n      }\n    }\n    finally\n    {\n      Console.WriteLine(\"Finished. Press any key to exit.\");\n      Console.ReadLine();\n    }\n    ```", "```cs\nCancellationTokenSource cancellationSource = new CancellationTokenSource();            \n\nvar downloadBook = new TransformBlock<string, string>(uri =>\n{\n  ...\n\n  return new WebClient().DownloadString(uri);\n},\nnew ExecutionDataflowBlockOptions\n{\n  CancellationToken = cancellationSource.Token\n});\n```", "```cs\ncatch (AggregateException ae)\n{\n  foreach (Exception ex in ae.InnerExceptions)\n  {\n    Console.WriteLine(ex.Message);\n  }\n}\n```", "```cs\n    using System;\n    using System.Diagnostics;\n    using System.Threading;\n    using System.Threading.Tasks.Dataflow;\n    ```", "```cs\n    static TimeSpan ComputeTime(int maxDegreeOfParallelism, int messageCount)\n    {\n\n    }\n    ```", "```cs\n    var actionBlock = new ActionBlock<int>(\n      millisecondsTimeout => Thread.Sleep(millisecondsTimeout),\n      new ExecutionDataflowBlockOptions\n      {\n         MaxDegreeOfParallelism = maxDegreeOfParallelism\n      });\n    ```", "```cs\n    Stopwatch sw = new Stopwatch();\n    sw.Start();\n\n    for (int i = 0; i < messageCount; i++)\n    {\n    \tactionBlock.Post(1000);\n    }\n    actionBlock.Complete();\n    actionBlock.Completion.Wait();\n    sw.Stop();\n\n    return sw.Elapsed;\n    ```", "```cs\n    static void Main(string[] args)\n    {\n      int processorCount = Environment.ProcessorCount;\n      int messageCount = processorCount;\n      TimeSpan elapsedTime;\n      elapsedTime = ComputeTime(1, messageCount);\n      Console.WriteLine(\"Degree of parallelism = {0}; message count = {1}; \" +\n         \"elapsed time = {2}ms.\", 1, messageCount, (int)elapsedTime.TotalMilliseconds);\n\n      elapsedTime = ComputeTime(processorCount, messageCount);\n      Console.WriteLine(\"Degree of parallelism = {0}; message count = {1}; \" +\n         \"elapsed time = {2}ms.\", processorCount, messageCount, (int)elapsedTime.TotalMilliseconds);\n\n      Console.WriteLine(\"Finished. Press any key to exit.\");\n      Console.ReadLine();\n    }\n    ```", "```cs\nstatic TimeSpan ComputeTime(int maxDegreeOfParallelism, int messageCount)\n{\n  var actionBlock = new ActionBlock<int>(\n     millisecondsTimeout => Thread.Sleep(millisecondsTimeout),\n     new ExecutionDataflowBlockOptions\n     {\n       MaxDegreeOfParallelism = maxDegreeOfParallelism\n     });\n   ...\n\n}\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks.Dataflow;\n    ```", "```cs\n    static int DoCalculation(int n, CancellationTokenSource tokenSource)\n    {  \n      // simulate a workload and return result\n      SpinWait.SpinUntil(() => tokenSource.IsCancellationRequested,\n        new Random().Next(2000));\n      return n + 5;\n    }\n    ```", "```cs\n    public static T ReceiveFromAny<T>(params ISourceBlock<T>[] sources)\n    {\n      var writeOnceBlock = new WriteOnceBlock<T>(e => e);\n      foreach (var source in sources)\n      {\n        source.LinkTo(writeOnceBlock, new DataflowLinkOptions { MaxMessages = 1 });\n      }            \n      return writeOnceBlock.Receive();\n    }\n    ```", "```cs\n    static void Main(string[] args)\n    {\n\n      try\n      {\n        var tokenSource = new CancellationTokenSource();\n\n        Func<int, int> action = n => DoCalculation(n, tokenSource);\n        var calculation1 = new TransformBlock<int, int>(action);\n        var calculation2 = new TransformBlock<int, int>(action);\n        var calculation3 = new TransformBlock<int, int>(action);\n\n        calculation1.Post(11);\n        calculation2.Post(21);\n        calculation3.Post(31);\n\n        int result = ReceiveFromAny(calculation1, calculation2, calculation3);\n\n        // Cancel all calls to TrySolution that are still active.\n        tokenSource.Cancel();\n\n        // Print the result to the console.\n        Console.WriteLine(\"The solution is {0}.\", result);\n      }\n      catch (AggregateException) { }\n      finally { Console.ReadLine(); }\n\n    }\n    ```", "```cs\nvar tokenSource = new CancellationTokenSource();\n\nFunc<int, int> action = n => DoCalculation(n, tokenSource);\nvar calculation1 = new TransformBlock<int, int>(action);\nvar calculation2 = new TransformBlock<int, int>(action);\nvar calculation3 = new TransformBlock<int, int>(action);\n\ncalculation1.Post(11);\ncalculation2.Post(21);\ncalculation3.Post(31);\n\nint result = ReceiveFromAny(calculation1, calculation2, calculation3);\n```", "```cs\npublic static T ReceiveFromAny<T>(params ISourceBlock<T>[] sources)\n{\n  var writeOnceBlock = new WriteOnceBlock<T>(e => e);\n  foreach (var source in sources)\n  {\n    source.LinkTo(writeOnceBlock, new DataflowLinkOptions { MaxMessages = 1 });\n  }            \n  return writeOnceBlock.Receive();\n}\n```", "```cs\n    using System;\n    using System.Threading;\n    using System.Threading.Tasks.Dataflow;\n    ```", "```cs\n    abstract class Resource\n    {\n    }\n\n    class MemoryResource : Resource\n    {\n    }\n\n    class NetworkResource : Resource\n    {\n    }\n    ```", "```cs\n    var networkResources = new BufferBlock<NetworkResource>();\n    var memoryResources = new BufferBlock<MemoryResource>();\n    ```", "```cs\n    var joinResources =\n       new JoinBlock<NetworkResource, MemoryResource>(\n        new GroupingDataflowBlockOptions\n        {\n          Greedy = false\n        });\n    ```", "```cs\n    var networkMemoryAction =\n       new ActionBlock<Tuple<NetworkResource, MemoryResource>>(\n        data =>\n        {\n          Console.WriteLine(\"Network worker: using resources.\");\n          Thread.Sleep(new Random().Next(500, 2000));\n          Console.WriteLine(\"Network worker: finished using resources.\");\n          networkResources.Post(data.Item1);\n          memoryResources.Post(data.Item2);\n        });\n    ```", "```cs\n    networkResources.LinkTo(joinResources.Target1);\n    memoryResources.LinkTo(joinResources.Target2);\n\n    joinResources.LinkTo(networkMemoryAction);\n\n    networkResources.Post(new NetworkResource());\n    networkResources.Post(new NetworkResource());\n    networkResources.Post(new NetworkResource());\n\n    memoryResources.Post(new MemoryResource());\n\n    Thread.Sleep(10000);\n    Console.ReadLine();\n    ```", "```cs\nvar networkResources = new BufferBlock<NetworkResource>();\nvar memoryResources = new BufferBlock<MemoryResource>();\n```", "```cs\nvar joinResources =\n   new JoinBlock<NetworkResource, MemoryResource>(\n    new GroupingDataflowBlockOptions\n    {\n      Greedy = false\n   });\n```", "```cs\nvar networkMemoryAction =\n   new ActionBlock<Tuple<NetworkResource, MemoryResource>>(\n    data =>\n    {\n      ...\n      Thread.Sleep(new Random().Next(500, 2000));\n      ...\n      networkResources.Post(data.Item1);\n      memoryResources.Post(data.Item2);\n    });\n```", "```cs\nnetworkResources.LinkTo(joinResources.Target1);\nmemoryResources.LinkTo(joinResources.Target2);\njoinResources.LinkTo(networkMemoryAction);\n\nnetworkResources.Post(new NetworkResource());\nnetworkResources.Post(new NetworkResource());\nnetworkResources.Post(new NetworkResource());\n\nmemoryResources.Post(new MemoryResource());\n\nThread.Sleep(10000);\n```"]