- en: '*Chapter 1*: Text, Flow, Choices, and Weaves'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第一章*：文本、流程、选择和编织'
- en: This chapter introduces the core concepts of nonlinear storytelling by examining
    branching narratives and how ink supports creating them. Building on these concepts,
    this chapter also reviews using lines, text within them, and how to combine them.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章通过考察分支叙事以及ink如何支持创建它们，介绍了非线性叙事的核心概念。在这些概念的基础上，本章还回顾了使用线条、它们内部的文本，以及如何将它们结合起来的方法。
- en: As a central element of creating nonlinear, interactive narratives in ink, choices
    are explained and how best to use them. Weaves and collections of choices are
    discussed within the context of when a large branching structure might be needed
    and how to collapse these weaves into simpler parts using gathering points.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在ink中创建非线性、交互式叙事的核心元素中，选择被解释，以及如何最佳地使用它们。在需要大型分支结构的情况下，以及如何使用聚集点将这些编织简化为更简单的部分，讨论了选择的编织和集合。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主要内容：
- en: Understanding branching narratives as a flow
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将分支叙事视为流程
- en: Creating choices and making weaves
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建选择和编织
- en: Disappearing and sticky choices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消失和粘性选择
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The examples used in this chapter, in `*.ink` files, can be found online on
    GitHub: [https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter1](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter1).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的示例，在`*.ink`文件中，可以在GitHub上找到：[https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter1](https://github.com/PacktPublishing/Dynamic-Story-Scripting-with-the-ink-Scripting-Language/tree/main/Chapter1)。
- en: Understanding branching narratives as a flow
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将分支叙事视为流程
- en: When holding a physical book, a reader moves through a story by turning its
    pages. The movement between pages is also a movement through the story. What is
    experienced by the reader is called a **narrative**. The story is the packaging
    of its content into different parts called **pages**. The reader's narrative,
    however, is the experience of the story across those pages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当读者手持一本实体书时，他们通过翻页来阅读故事。页与页之间的移动也是一种在故事中的移动。读者所体验到的被称为**叙事**。故事是将其内容打包成不同部分的过程，这些部分被称为**页面**。然而，读者的叙事是他们在这些页面间体验故事的过程。
- en: In a digital setting, there are no physical pages. The words of a story could
    be stored as part of a simple text file or bundled together in something more
    complex. Parts of a digital story, which are the pages in a physical book, can
    also be arranged much more easily, and the reader might experience them in different
    configurations, creating new narratives from the same story content.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字环境中，没有物理页面。故事中的文字可以存储为简单的文本文件的一部分，或者捆绑在更复杂的东西中。数字故事的各个部分，即实体书中的页面，也可以更容易地排列，读者可能会以不同的配置体验它们，从而从相同的故事内容中创造出新的叙事。
- en: 'Consider the following example, where each sentence is a part of a story:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例，其中每个句子都是故事的一部分：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: When taken in order from the first sentence to the last one, there is a story
    where the major parts are the sun shining, the clouds coming in, but then the
    clouds leaving and the sun shining again. However, what happens if the parts are
    rearranged?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从第一句到最后一句话按顺序阅读，有一个故事，其中主要部分是太阳照耀、云朵到来，但随后云朵离开，太阳再次照耀。然而，如果重新排列这些部分会发生什么呢？
- en: 'Example 1:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 1：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: With a different ordering, a new narrative is created for the reader. In this
    version, the progression begins with the sun emerging and shining. Next, the clouds
    move in and it begins to rain. In either case, only three events are used, but
    their order affects the narrative experience of the reader.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过不同的顺序，为读者创造一个新的叙事。在这个版本中，故事的发展从太阳升起和照耀开始。接下来，云朵移动进来，开始下雨。在任何情况下，只使用了三个事件，但它们的顺序影响了读者的叙事体验。
- en: Nonlinear storytelling
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 非线性叙事
- en: 'In the second example, the story still makes sense. This time, however, the
    events start with the clouds, move into the sun shining, and end with the clouds
    returning. The second example, in moving around the events, is an example of **nonlinear
    storytelling**, where the events or parts of a story are experienced in a new
    or different way than created or originally written. The progression is not linear
    from one part to another as created in the story, but a cohesive narrative is
    still created:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二个例子中，故事仍然是有意义的。然而，这次事件从云彩开始，过渡到阳光照耀，并以云彩返回结束。第二个例子在事件之间的移动，是**非线性叙事**的一个例子，其中事件或故事的部分以新的或不同的方式体验，不同于创作或最初编写的方式。这种进展不是从故事的一个部分到另一个部分的线性，但仍然创建了一个连贯的叙事：
- en: '![Figure 1.1 – Mapping nonlinear storytelling'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.1 – Mapping nonlinear storytelling](img/Figure_1.1_B17597.jpg)'
- en: '](img/Figure_1.1_B17597.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 1.1 – Mapping nonlinear storytelling](img/Figure_1.1_B17597.jpg)'
- en: Figure 1.1 – Mapping nonlinear storytelling
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.1 – 非线性叙事映射
- en: The structures created by navigating a nonlinear story are often compared to
    *trees*. They start with a trunk and then, as different parts are encountered
    over others, a *branching pattern* is created, with each **branch** representing
    a movement through parts of a story from one end to another. The narrative traversal
    through a nonlinear story creates a *branching narrative*, where different parts
    were or were not encountered. The map of the experienced narrative represents
    a particular branch of the overall tree of the story and its parts.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过导航非线性故事创建的结构通常被比作*树*。它们从树干开始，然后，随着遇到不同的部分，就会形成一个*分支模式*，每个**分支**代表从故事的一端到另一端的部分移动。非线性故事的叙事遍历创建了一个*分支叙事*，其中不同的部分被或未被遇到。体验到的叙事地图代表了故事整体树及其部分的特定分支。
- en: While nonlinear storytelling can be done with a printed book, it is often much
    more difficult. In a digital setting, where events can be broken up into different
    parts, rearranging them can often be as easy as selecting them and dragging them
    to a different part of the same document. This consequence of representing stories
    as data makes writing code to handle arranging the different parts easier too.
    This is known as *narrative scripting*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然非线性叙事可以用印刷书籍来完成，但通常要困难得多。在数字环境中，事件可以被分成不同的部分，重新排列它们通常就像选择它们并将它们拖到同一文档的不同部分一样简单。将故事表示为数据所带来的这种后果使得编写处理不同部分排列的代码也变得更容易。这被称为*叙事脚本*。
- en: Introducing ink
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍墨水
- en: '**ink** is a *narrative scripting language*. It determines which part of the
    story comes next for the reader. As a user clicks or presses buttons, the code
    written in ink makes the decision between which branches they should visit and
    when. Based on rules written by an author, the code can even repeat the same part
    of the story with new values.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**墨水**是一种*叙事脚本语言*。它决定了读者接下来应该阅读故事中的哪一部分。当用户点击或按下按钮时，墨水编写的代码会在不同的分支之间做出决定，并确定他们何时应该访问。根据作者编写的规则，代码甚至可以重复相同的故事部分，并使用新的值。'
- en: Because ink is designed for the purpose of scripting narratives, it understands
    navigation through a story as a special concept called **flow**. As the reader
    moves through the different parts, they are creating their own experienced narrative,
    which ink calls the flow. In fact, one of the most common errors encountered by
    authors is where the flow *runs out* of a story. Even when writing a nonlinear
    story with different branches, the story must start and end somewhere. Even if
    all the parts between the start and end of a narrative change each time a user
    traverses the parts of a story, these two points define the range of possible
    branches.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 因为墨水是为编写叙事而设计的，所以它将故事中的导航理解为一个特殊的概念，称为**流**。当读者通过不同的部分移动时，他们正在创造自己的体验叙事，墨水称之为流。实际上，作者遇到的最常见的错误之一是故事的流*耗尽*。即使是在编写具有不同分支的非线性故事时，故事也必须有一个开始和结束。即使每次用户遍历故事的部分时，叙事的开始和结束之间的所有部分都会改变，这两个点仍然定义了可能分支的范围。
- en: Text flowing down
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本向下流动
- en: The concept of flow also extends to how code is understood in ink. All movement
    across a story in ink moves *down from the top* of the code to the bottom unless
    told to navigate to a different part in the story.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 流的概念也扩展到在墨水中如何理解代码。在墨水中，跨越故事的任何移动都是从代码的顶部*向下*到底部，除非告诉它导航到故事中的不同部分。
- en: The example stories shared earlier in this chapter are both also code examples.
    ink is designed to create branching narratives and supplies the ability to write
    code to create these structures. This means text or words written in a story without
    any other special characters or syntax are valid in ink.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 本章前面分享的示例故事也是代码示例。ink旨在创建分支叙事，并提供了编写代码来创建这些结构的能力。这意味着在ink中，故事中不包含任何其他特殊字符或语法的文本或单词都是有效的。
- en: 'Spacing within a line of text is important in ink. Because the text is considered
    a form of code, ink assumes any use of spacing is a deliberate choice on the part
    of the author. For example, adding extra spaces between words is not removed in
    its output:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ink中行内的间距很重要。因为文本被视为一种代码形式，ink假设任何使用间距都是作者有意为之的选择。例如，在单词之间添加额外的空格不会被其输出移除：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Output:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ink ignores any empty lines. It assumes each line of text is important and any
    spacing between them should be ignored as something unimportant to the story itself.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: ink会忽略任何空行。它假设文本的每一行都是重要的，并且它们之间的任何间距都应该被视为对故事本身不重要的事物而被忽略。
- en: 'Example 2:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 2：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Output:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The smallest unit is a line
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小的单位是行
- en: 'The use of three lines as part of a story when introducing nonlinear storytelling
    was not a mistake. The smallest unit within an ink story is a single line:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在引入非线性叙事时，将三行作为故事的一部分并不是一个错误。ink故事中最小的单位是一行：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Because ink considers text to be a part of the code, a single line with only
    four words is a completely valid story. Adding more lines would also extend what
    would be presented to the reader, but a single line can be a story by itself:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因为ink认为文本是代码的一部分，所以只有四个单词的单行是完全有效的故事。添加更多行也会扩展将展示给读者的内容，但单行本身也可以是一个故事：
- en: '[PRE7]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The use of the term *line* is important in ink. When reading a physical book,
    the smallest unit in a story is usually a sentence. This is often the smallest
    complete thought in a larger work. In a digital context, and specifically within
    ink, a line is the smallest unit. When ink loads a story, it moves through the
    story line by line. It treats each as equally important as the last.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在ink中，术语*行*的使用很重要。在阅读物理书籍时，故事中最小的单位通常是句子。这通常是更大作品中最小的完整思想。在数字环境中，特别是在ink中，行是最小的单位。当ink加载故事时，它逐行通过故事。它将每一行视为与最后一行同等重要。
- en: As more complex code is introduced, the concept of a line will become more important
    as well. However, just like the single-line example, a story need not be complex
    to be important. To ink, a story is composed of lines. This could be one or potentially
    many more.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 随着更复杂代码的引入，行的概念也会变得更加重要。然而，就像单行示例一样，一个故事不需要复杂才能变得重要。对ink来说，一个故事由行组成。这可以是一行，也可能是多行。
- en: Gluing lines together
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 粘合行
- en: 'An author may need to use multiple lines of text as one "line" of code. For
    these situations, ink provides a concept called `<>`, are used together, they
    glue the content of one onto the next, creating one long line:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 作者可能需要使用多行文本作为一行“代码”。在这些情况下，ink提供了一个名为`<>`的概念，当它们一起使用时，它们会将一行内容粘接到下一行，创建一个长行：
- en: 'Example 3:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 3：
- en: '[PRE8]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE9]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Spacing when using glue is important. As with spacing within a single line,
    ink respects the choices of the author when presenting text in a single line.
    When using glue, these spaces are also respected.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用粘合剂时的间距很重要。就像单行内的间距一样，ink尊重作者在单行中呈现文本时的选择。当使用粘合剂时，这些间距也被尊重。
- en: 'Without the spaces after each word, the use of glue in the previous example
    would glue all the words together:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个单词后面没有空格，那么在前面示例中使用的粘合剂会将所有单词粘合在一起：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE11]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Using comments as notes to authors
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用注释作为对作者的笔记
- en: 'As a scripting language, ink also provides the ability to include notes within
    the code of a story. Borrowing from a more general programming term, ink calls
    these notes **comments**. They begin with two slashes and then contain the content
    of the comment. Any part of the line is also considered part of the comment:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种脚本语言，ink还提供了在故事代码中包含注释的能力。借鉴更通用的编程术语，ink将这些注释称为**注释**。它们以两个斜杠开始，然后包含注释的内容。行中的任何部分也被视为注释的一部分：
- en: 'Example 4:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 4：
- en: '[PRE12]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: When run, the text of the story would be treated as its code. However, any use
    of comments would not appear in the output of the story. Comments are only designed
    for human audiences and allow an author to explain the code to other audiences,
    or, more generally, as notes to themselves or other members of their team about
    how something works.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当运行时，故事的文本会被视为其代码。然而，任何注释的使用都不会出现在故事的输出中。注释仅设计给人类观众，允许作者向其他观众解释代码，或者更普遍地，作为作者或其团队其他成员关于如何工作的笔记。
- en: Working with Inky
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Inky
- en: 'To help authors more quickly develop a story in ink, **Inkle Studios** has
    created a program called **Inky**. This editing tool allows an author to write
    code and see it run as a preview of its output:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助作者更快地在墨水中开发故事，**Inkle Studios**创建了一个名为**Inky**的程序。这个编辑工具允许作者编写代码，并预览其输出：
- en: '![Figure 1.2 – Screenshot of the Inky editor'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.2 – Inky编辑器的截图'
- en: '](img/Figure_1.2_B17597.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.2_B17597.jpg)'
- en: Figure 1.2 – Screenshot of the Inky editor
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.2 – Inky编辑器的截图
- en: While initially developed by Inkle Studios, Inky is now an open source project
    and often sees dozens of commits by the community to fix small issues or add new
    functionality. A new minor version usually comes out every year.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然最初由Inkle Studios开发，但Inky现在是一个开源项目，社区经常会有数十个提交来修复小问题或添加新功能。通常每年会推出一个新的小版本。
- en: At the time of writing, Inky does not have a Windows installer but provides
    builds for macOS X and Linux systems. When running on Windows or Linux, the ZIP
    file needs to be unzipped to an existing folder and the `Inky.exe` (for Windows)
    or `Inky` (for Linux) file run to open the editor.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Inky没有Windows安装程序，但为macOS X和Linux系统提供构建。在Windows或Linux上运行时，需要将ZIP文件解压缩到现有文件夹中，并运行`Inky.exe`（Windows）或`Inky`（Linux）文件以打开编辑器。
- en: Using Inky
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Inky
- en: 'Inky presents an interface with two panes:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Inky提供了一个具有两个窗格的界面：
- en: The left is where ink code is written.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左边是编写墨水代码的地方。
- en: The right shows a preview of the code while it is being developed.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右边显示了代码开发时的预览。
- en: This allows users to quickly see how their code would produce different outputs
    depending on what code was used.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这使用户能够快速看到他们的代码将如何根据所使用的代码产生不同的输出。
- en: Inky's most useful function is the ability to "rewind" a story to an earlier
    point and try a different branch of the narrative. This allows authors to test
    branches of their story more quickly, without needing to restart the story each
    time.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Inky最有用的功能是能够“回退”故事到一个较早的点并尝试不同的叙事分支。这允许作者更快地测试故事的不同分支，而不需要每次都重新启动故事。
- en: '![Figure 1.3 – The "Rewind a single choice" and "Restart story" buttons'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![图1.3 – “回退单个选择”和“重新启动故事”按钮'
- en: '](img/Figure_1.3_B17597.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_1.3_B17597.jpg)'
- en: Figure 1.3 – The "Rewind a single choice" and "Restart story" buttons
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.3 – “回退单个选择”和“重新启动故事”按钮
- en: Important note
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This book will use screenshots from Inky to show the resulting output of different
    code.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将使用Inky的截图来展示不同代码产生的结果输出。
- en: Creating choices and making weaves
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建选择和编织
- en: While having code pick parts of a story to produce a new possible narrative
    for a user could be exciting, most users want some input on what happens next.
    They want an interactive story. In ink, interactivity is created by presenting
    the user with choices. Depending on which choice the reader makes, the narrative
    could then branch in different ways.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码选择故事的一部分来为用户生成一个新的可能叙事时，这可能会很有趣，但大多数用户希望对接下来发生的事情有所输入。他们想要一个互动式的故事。在墨水（ink）中，交互性是通过向用户展示选择来实现的。根据读者做出的选择，叙事可以以不同的方式分支。
- en: Making weaves
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作编织
- en: Choices in ink are a part of another important concept, **weaves**. As a user
    creates a flow from one part to another, they often encounter intersections within
    a story where branches might be possible depending on what choice is made. This
    is what is known as a **weave** within ink. These are collections of choices where
    each one has the potential to branch the story in different ways.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 墨水中的选择是另一个重要概念——**编织（weaves）**的一部分。当用户从一个部分创建到另一个部分的流程时，他们经常会遇到故事中的交叉点，根据所做出的选择，可能会有分支的可能。这就是墨水中的所谓**编织**。这些是选择集合，其中每一个都有可能以不同的方式分支故事。
- en: 'Choices are written in ink using an asterisk, `*`. What might appear as a list
    of things is, in ink, each a different choice within a single weave:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 选择在墨水中使用星号`*`来编写。在墨水中，可能看起来像事物列表的东西，实际上是一个单一的编织中的不同选择：
- en: '[PRE13]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the previous code, each line starting with an asterisk is a choice. It starts
    from the asterisk and extends to the end of the line. Everything that is part
    of the line becomes a part of the choice. Each asterisk on a new line creates
    a new choice within the weave:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，以星号开头的每一行都是一个选择。它从星号开始，延伸到行的末尾。行中的所有内容都成为选择的一部分。每一行的新星号在编织中创建一个新的选择：
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Each choice in a weave has the potential to branch the narrative. In the previous
    code, there are two choices. However, after each choice is another line of code.
    When run, ink would understand each line following a choice as being the result
    of choosing the reader. To help to visually differentiate the result of the choice
    better, the line following a choice is often indented at its start.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在编织中的每个选择都有分支叙事的潜力。在之前的代码中，有两个选择。然而，在每个选择之后还有另一行代码。当运行时，ink 会理解每个选择之后的每一行代码都是读者选择的结果。为了更好地视觉区分选择的结果，选择之后的行通常在开头缩进。
- en: 'Changing the previous code to use indentation would look as follows:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前的代码更改为使用缩进将如下所示：
- en: 'Example 6:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 6：
- en: '[PRE15]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Choices within choices
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择中的选择
- en: 'Choices can also appear inside other choices. These are sub-choices and use
    an additional asterisk to indicate that they are the result of a previous layer
    of a weave:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 选择也可以出现在其他选择内部。这些是子选择，并使用额外的星号来表示它们是编织前一层的结果：
- en: 'Example 7:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 7：
- en: '[PRE16]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In the previous code, there are two choices that each lead to their own choices,
    branching off the central set. This is an example of a **complex weave**. The
    first layer of the weave is the initial two choices. The result of either choice
    is then another weave, which then ends in text. Depending on the user's flow,
    they might only see part of the overall story when moving between these parts.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，有两个选择，每个选择都引出自己的选择，从中心集合分支出来。这是一个**复杂编织**的例子。编织的第一层是初始的两个选择。然后，每个选择的后果是另一个编织，最后以文本结束。根据用户的流程，他们可能在移动到这些部分时只看到整体故事的一部分。
- en: 'One possible branch within the complex weave could be the following output
    for the reader:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在复杂的编织中，一个可能分支的输出如下，供读者阅读：
- en: Output
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 输出
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'A different series of branches within the story might also create the following
    output:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 故事中的不同分支序列也可能产生以下输出：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Selective choice output
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择性选择输出
- en: 'When using choices, the text of the choice itself appears in its output. This
    can be changed by using a special concept with choices called **selective output**.
    By using open and closing square brackets around any text in the line of the choice,
    it will not appear as part of the output as a result of making the choice:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用选择时，选择的文本本身会出现在其输出中。这可以通过使用与选择相关的特殊概念**选择性输出**来改变。通过在选择的行中的任何文本周围使用开闭方括号，它将不会作为选择的结果出现在输出中：
- en: '[PRE19]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In the previous code, the output, regardless of the choice made by the reader,
    would be the same:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，无论读者做出何种选择，输出结果都会相同：
- en: '[PRE20]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the cases where the text of the choice is different from what is shown to
    the reader, the term **option** is used. A choice is created in ink using code.
    What is ultimately shown to the reader is an *option*.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 当选择的内容与展示给读者的内容不同时，使用**选项**这个词。选择是通过代码在 ink 中创建的。最终展示给读者的内容是一个*选项*。
- en: In more advanced code examples, ink can generate choices dynamically. In these
    cases, as with selective output, it can be important to understand the use of
    a choice as something written by a developer and an option as selected by the
    reader. Often, these can be the same thing, but they do not have to be when writing
    code in ink.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高级的代码示例中，ink 可以动态生成选择。在这些情况下，与选择性输出一样，理解选择作为开发者编写的内容以及选项作为读者选择的内容是很重要的。通常，这些可以是同一件事，但在
    ink 中编写代码时，它们不必是同一件事。
- en: 'Selective output also allows creating more dynamic output by selectively showing
    text from an option in the output. An effect of using selective output is that
    the closing square bracket in a line signals an end to what is shown to the reader.
    Any additional text on the same line is ignored:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性输出还允许通过选择性显示选项中的文本来创建更动态的输出。使用选择性输出的一个影响是，一行中的闭合方括号表示向读者展示内容的结束。该行上任何额外的文本都将被忽略：
- en: 'Example 8:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 8：
- en: '[PRE21]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Possible output:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的输出：
- en: '[PRE22]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: From the reader's perspective, the previous code would show three options. Each
    one would read `I cut the wire`. However, the use of selective output is telling
    ink to ignore the additional text of each color. After making a choice, the user
    would then see the result of the choice as a new line, with the use of square
    brackets excluding anything they enclose.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 从读者的角度来看，之前的代码会显示三个选项。每个选项都会读作`我剪断了电线`。然而，选择性输出的使用是告诉墨迹忽略每个颜色的附加文本。在做出选择后，用户会看到选择的结果作为新的一行，使用方括号排除任何包含的内容。
- en: Selective output can often be useful to *hide* additional information behind
    a choice where the reader must pick an option and then see the additional text
    of a line.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 选择性输出通常可以用来*隐藏*在读者必须选择一个选项然后才能看到该行的附加文本的信息。
- en: Gathering points
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 汇集点
- en: 'Each choice in a weave can potentially branch a narrative. However, sometimes
    there is a need to gather one or more branches back to where they began. Instead
    of leading off in a new direction, a gathering point can be used to collapse a
    more complex weave into a *central point*. In ink, *gathering points* are created
    using a single minus sign (`-`) on a line:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 编织中的每个选择都可能分支一个叙事。然而，有时需要将一个或多个分支汇集回它们开始的地方。而不是走向新的方向，可以使用汇集点将更复杂的编织折叠成一个*中心点*。在墨迹中，*汇集点*是通过在行上使用单个减号(`-`)来创建的：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the previous code, there are two choices with two sub-choices each. However,
    at the bottom of the weave is a *gathering point*. No matter what branch is taken
    across the first weave and then into the next layer, the flow will always gather
    at the last line. This is the power of gathering points: they allow a complex
    weave with multiple layers to collapse into a single point.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，有两个选择，每个选择下又有两个子选择。然而，在编织的底部有一个*汇集点*。无论选择哪个分支跨过第一个编织层然后进入下一层，流动总是会汇集在最后一行。这就是汇集点的力量：它们允许一个具有多层复杂编织的结构折叠成一个单一点。
- en: The placement of gathering points is important. In ink, stories flow down from
    the top to the bottom. If the gathering point appeared before the weave, it would
    be ignored. Without anything to gather, the gathering point does nothing. This
    also only affects weaves. Multiple gathering points in a story would do nothing
    without a weave *above* them to act as a point of collapsing them.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 汇集点的放置很重要。在墨迹中，故事从上到下流动。如果汇集点出现在编织之前，它就会被忽略。如果没有东西可以汇集，汇集点就什么也不做。这也只影响编织。在没有编织*上方*作为折叠点的故事中，多个汇集点将不会产生任何作用。
- en: 'Gathering points only work on a single weave at a time. As the last line of
    a weave, they act to *gather* the choices. However, they only apply to one branching
    structure at a time. A new gathering point is needed per weave to collapse those
    branches back together:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 汇集点一次只作用于一个编织。作为编织的最后一行，它们的作用是*汇集*选择。然而，它们一次只适用于一个分支结构。每个编织需要一个新的汇集点来将这些分支重新汇集在一起：
- en: 'Example 9:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 9：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the previous code, both selective output and gathering points are used to
    create the illusion of two weaves with two choices each. The outcome of each,
    because they are using gathering points, is the last line of each. Options are
    presented to the reader, but the code itself collapses any possible branching
    of each weave and flows the story from the first weave to the second layer.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，既使用了选择性输出也使用了汇集点来创造两个编织，每个编织有两个选择的错觉。由于它们使用了汇集点，每个结果的输出都是各自的最后一行。选项呈现给读者，但代码本身会折叠每个编织的任何可能的分支，并将故事从第一个编织流向第二层。
- en: Disappearing and sticky choices
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消失和粘性选择
- en: The default behavior of a weave is to direct the flow of a story along with
    one of the branches presented by its choices. When the reader makes a choice,
    the others *disappear*, and the branch chosen becomes the current flow of the
    story. Even when rewinding when using Inky to test a story, there appears to only
    be one valid branch of a weave at any one time.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 编织的默认行为是沿着其选择提供的其中一个分支引导故事的流动。当读者做出选择时，其他选项*消失*，所选择的分支成为故事的当前流动。即使在用Inky测试故事时回放，似乎在任何时候编织只有一个有效的分支。
- en: 'Anticipating situations where the reader might revisit a part of a story with
    choices the reader might not have seen before, ink uses the concept of sticky
    choices to present the same choices again to the reader. Using sticky choices,
    each remains *open* during a revisit and can be used again in the future:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 预测读者可能会重新访问故事的一部分，并且可能会看到之前没有见过的选择的情况，墨水使用粘性选择的概念来再次向读者展示相同的选择。使用粘性选择，每次重访时每个选项都保持
    *开放*，并且可以在将来再次使用：
- en: '[PRE25]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Sticky choices are created using the plus sign (`+`). They can be thought of
    as the opposite of a gathering point. Instead of collapsing a weave, a sticky
    choice *keeps open* the option within a weave of using a different branch. Any
    sticky choice created as part of a weave is always *sticky*, even if it is the
    only one within the weave:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 粘性选择使用加号 (`+`) 创建。它们可以被视为聚集点的对立面。而不是折叠编织，粘性选择 *保持开放* 编织中使用不同分支的选项。任何作为编织一部分创建的粘性选择总是
    *粘性的*，即使它是编织中唯一的：
- en: 'Example 10:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 10：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the previous code, there are two choices:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码中，有两种选择：
- en: The first is a sticky choice.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种是粘性选择。
- en: The second would be removed upon a second visit to the code.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二次访问代码时，它将被移除。
- en: 'In the example, `boulder` could be ignored once, but the next time the reader
    visited the part again, they would only see one option: `Push the boulder`.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，`boulder` 可以忽略一次，但下次读者再次访问这部分时，他们只会看到一个选项：`推动巨石`。
- en: 'In examples where the story only flows down from top to bottom, sticky choices
    seem of little use. Upon making any choice, the story would flow along a branch
    and to the next lower part in the story regardless of the choice type:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事只从上到下流动的示例中，粘性选择似乎用处不大。做出任何选择后，故事都会沿着分支流向故事的下一个较低部分，而不管选择类型如何：
- en: '[PRE27]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In the preceding example, there is a single weave with two sticky choices. When
    moving through the story from top to bottom, the weave would be visited once and
    either choice would branch out and then back together again at the end.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，有一个包含两个粘性选择的单一编织。在从上到下移动故事时，编织会被访问一次，然后任一选择会分支出去，并在最后再次汇合。
- en: The same example could be made with the other choice type.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的例子可以用其他选择类型来制作。
- en: 'Example 11:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 示例 11：
- en: '[PRE28]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Where the two code examples are different is in their intention. In the first,
    the reader could, potentially, revisit the same part of the story and see the
    choices again. In the second, the choices are one-way. By making a choice within
    the weave, they cannot be revisited in a story. Once made, a basic choice is permanent.
    The only way to change this intention is to use sticky choices that *add* themselves
    back to the weave when used.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 两个代码示例的不同之处在于它们的意图。在第一个示例中，读者可能可以重新访问故事的同一部分并再次看到选择。在第二个示例中，选择是单向的。通过在编织中做出选择，它们不能在故事中重新访问。一旦做出选择，基本选择就是永久的。唯一改变这种意图的方法是使用粘性选择，当使用时它们会
    *添加* 自己回到编织中。
- en: In the next chapter, [*Chapter 2*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031),
    *Knots, Diverts, and Looping Patterns*, we move into examining loops and controlling
    the flow of a story across more complex structures. Loops will allow us to revisit
    the same section of a story multiple times. In these cases, sticky choices will
    become the default usage for creating options for the player. Because sticky choices
    remain open, they allow an author to create a weave where a player can select
    the same option multiple times.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章，[*第二章*](B17597_02_Final_PG_ePub.xhtml#_idTextAnchor031)，*结、转向和循环模式*，我们将开始检查循环并控制故事在更复杂结构中的流动。循环将允许我们多次回到故事中的同一部分。在这些情况下，粘性选择将成为为玩家创建选项的默认用法。因为粘性选择保持开放，它们允许作者创建一个编织，玩家可以在其中多次选择相同的选项。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter provided you with an explanation of the term story, content, and
    the narrative, what the reader might experience from its content. We examined
    nonlinear storytelling as how the parts of a story can be experienced in an order
    different than how they were written or originally composed. Next, we learned
    about branching narratives as a description of experiencing a nonlinear story
    where different sequences, branches, are explored over others. Through using code
    (scripting), we saw how different narratives can be created by controlling when
    the reader experiences story content.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为您提供了对术语故事、内容和叙述的解释，以及读者可能从其内容中体验到的内容。我们探讨了非线性叙述，即故事的部分可以以不同于它们被书写或最初创作的顺序体验。接下来，我们学习了分支叙述，这是一种描述体验非线性故事的方式，其中不同的序列、分支被探索而不是其他。通过使用代码（脚本），我们看到了通过控制读者体验故事内容的时间来创建不同叙述的方法。
- en: ink is a narrative scripting language. We understand the movement through a
    story as a concept called flow. We discovered that each intersection, created
    by using different types of choices, is known as a weave. By using choices, we
    saw that different layers of a weave and more branching are possible. For situations
    where a weave is growing too complex, we can use a gathering point. This collapses
    a weave into a single point or line.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: ink是一种叙述脚本语言。我们将通过故事中的移动理解为一个称为流的概念。我们发现，通过使用不同类型的选项创建的每个交叉点都被称为编织物。通过使用选项，我们看到了编织的不同层次和更多分支是可能的。对于编织物变得过于复杂的情况，我们可以使用聚集点。这会将编织物折叠成单个点或线。
- en: In the next chapter, we will begin to use knots, labeled sections of a story,
    and diverts, moving between these, to build on the concepts of nonlinear storytelling
    and branching narratives. We will start to use choices to move the reader to a
    particular knot or repeat the same weave again.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将开始使用结，故事的部分标记区域，以及偏离，在这些部分之间移动，来构建非线性叙述和分支叙述的概念。我们将开始使用选项将读者移动到特定的结或重复相同的编织物。
- en: Questions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the difference between the story and the narrative?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 故事和叙述之间的区别是什么？
- en: How does ink understand the concept of flow?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 墨水如何理解流的概念？
- en: How can multiple lines of text be combined into one?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何将多行文本合并为一行？
- en: What is a weave made of in ink?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 墨水编织物是由什么制成的？
- en: What are the different types of choices?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有哪些不同的选择类型？
- en: How can selective output be used to hide information from the reader in a choice?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用选择性输出在选项中隐藏信息以供读者阅读？
- en: Why might a sticky choice be the preferred way to present options to the reader?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么粘性选择可能是向读者展示选项的首选方式？
