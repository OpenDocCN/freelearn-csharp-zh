["```cs\nDuration=\"[Days.]Hours:Minutes:Seconds[.FractionalSeconds]\" \nDuration=\"[Days.]Hours:Minutes\" \n```", "```cs\nDuration=\"Forever\" \n```", "```cs\n<Rectangle Width=\"0\" Height=\"0\" Fill=\"Orange\"> \n  <Rectangle.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard Duration=\"0:0:2.5\"> \n          <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\" \n            Duration=\"0:0:2.5\" /> \n          <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\"\n            Duration=\"0:0:5\" /> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </Rectangle.Triggers> \n</Rectangle> \n```", "```cs\n<Storyboard Duration=\"0:0:5\"> \n  <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\"  \n    Duration=\"0:0:2.5\" AutoReverse=\"True\" /> \n  <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\"  \n    Duration=\"0:0:5\" /> \n</Storyboard> \n```", "```cs\n<Storyboard Duration=\"0:0:5\" AutoReverse=\"True\"> \n  <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\"  \n    Duration=\"0:0:2.5\" AutoReverse=\"True\" /> \n  <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\"  \n    Duration=\"0:0:5\" /> \n</Storyboard> \n```", "```cs\n<Storyboard Duration=\"0:0:5\" AutoReverse=\"True\" RepeatBehavior=\"2x\"> \n  <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\"  \n    Duration=\"0:0:2.5\" AutoReverse=\"True\" /> \n  <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\"  \n    Duration=\"0:0:5\" /> \n</Storyboard> \n```", "```cs\n<Storyboard Duration=\"0:0:5\" AutoReverse=\"True\" SpeedRatio=\"0.5\"> \n  <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\"  \n    Duration=\"0:0:2.5\" AutoReverse=\"True\" /> \n  <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\"  \n    Duration=\"0:0:5\" SpeedRatio=\"2\" /> \n</Storyboard> \n```", "```cs\nThe sum of AccelerationRatio and DecelerationRatio must be less than or equal to one.\n```", "```cs\nProperty value must be between 0.0 and 1.0.\n```", "```cs\n<StackPanel Margin=\"20\"> \n  <StackPanel.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard RepeatBehavior=\"Forever\" Duration=\"0:0:1.5\"\n          SpeedRatio=\"0.5\" Storyboard.TargetProperty=\"Width\">\n          <DoubleAnimation Storyboard.TargetName=\"RectangleA\"\n            AccelerationRatio=\"1.0\" From=\"0\" To=\"300\" />\n          <DoubleAnimation Storyboard.TargetName=\"RectangleB\"\n            AccelerationRatio=\"0.8\" DecelerationRatio=\"0.2\" \n            From=\"0\" To=\"300\" /> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleC\" \n            AccelerationRatio=\"0.6\" DecelerationRatio=\"0.4\" \n            From=\"0\" To=\"300\" /> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleD\"\n            AccelerationRatio=\"0.5\" DecelerationRatio=\"0.5\" \n            From=\"0\" To=\"300\" /> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleE\"\n            AccelerationRatio=\"0.4\" DecelerationRatio=\"0.6\" \n            From=\"0\" To=\"300\" /> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleF\"\n            AccelerationRatio=\"0.2\" DecelerationRatio=\"0.8\" \n            From=\"0\" To=\"300\" /> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleG\"\n            DecelerationRatio=\"1.0\" From=\"0\" To=\"300\" /> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </StackPanel.Triggers> \n  <Rectangle Name=\"RectangleA\" Fill=\"#FF0000\" Height=\"30\" /> \n  <Rectangle Name=\"RectangleB\" Fill=\"#D5002B\" Height=\"30\" /> \n  <Rectangle Name=\"RectangleC\" Fill=\"#AB0055\" Height=\"30\" /> \n  <Rectangle Name=\"RectangleD\" Fill=\"#800080\" Height=\"30\" /> \n  <Rectangle Name=\"RectangleE\" Fill=\"#5500AB\" Height=\"30\" /> \n  <Rectangle Name=\"RectangleF\" Fill=\"#2B00D5\" Height=\"30\" /> \n  <Rectangle Name=\"RectangleG\" Fill=\"#0000FF\" Height=\"30\" /> \n</StackPanel> \n```", "```cs\n<Rectangle Width=\"0\" Height=\"1\" Fill=\"Orange\"> \n  <Rectangle.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard> \n          <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\" \n            Duration=\"0:0:2\" /> \n          <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\" \n            Duration=\"0:0:2\" BeginTime=\"0:0:2\" /> \n          <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"0.0\" \n            Duration=\"0:0:2\" BeginTime=\"0:0:4\" /> \n          <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"0.0\"\n            Duration=\"0:0:2\" BeginTime=\"0:0:4\" /> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </Rectangle.Triggers> \n</Rectangle> \n```", "```cs\n<StackPanel Margin=\"20\"> \n  <StackPanel.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard Duration=\"0:0:1.5\" SpeedRatio=\"0.5\"  \n          Storyboard.TargetProperty=\"Opacity\"> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleA\" To=\"0.0\"\n            FillBehavior=\"HoldEnd\" /> \n          <DoubleAnimation Storyboard.TargetName=\"RectangleB\" To=\"0.0\"\n            FillBehavior=\"Stop\" /> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </StackPanel.Triggers> \n  <Rectangle Name=\"RectangleA\" Fill=\"Orange\" Height=\"100\"  \n    HorizontalAlignment=\"Stretch\" Margin=\"0,0,0,20\" /> \n  <Rectangle Name=\"RectangleB\" Fill=\"Orange\" Height=\"100\"  \n    HorizontalAlignment=\"Stretch\" /> \n</StackPanel> \n```", "```cs\n<Ellipse Width=\"100\" Height=\"100\" Stroke=\"Black\" StrokeThickness=\"3\"> \n  <Ellipse.Fill> \n    <RadialGradientBrush> \n      <GradientStop Color=\"Yellow\" Offset=\"0\" /> \n      <GradientStop Color=\"Orange\" Offset=\"1\" /> \n    </RadialGradientBrush> \n  </Ellipse.Fill> \n  <Ellipse.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard RepeatBehavior=\"Forever\"  \n          Storyboard.TargetProperty=\"Fill.GradientOrigin\"> \n          <PointAnimationUsingKeyFrames> \n            <DiscretePointKeyFrame Value=\"0.5, 0.5\" KeyTime=\"0:0:0\" /> \n            <LinearPointKeyFrame Value=\"1.0, 1.0\" KeyTime=\"0:0:2\" /> \n            <SplinePointKeyFrame KeySpline=\"0,0.25 0.75,0\" Value=\"1.0, 0.0\"\n              KeyTime=\"0:0:4\" /> \n            <LinearPointKeyFrame Value=\"0.0, 0.0\" KeyTime=\"0:0:5\" /> \n            <SplinePointKeyFrame KeySpline=\"0,0.75 0.25,0\" Value=\"0.5, 0.5\"\n              KeyTime=\"0:0:8\" /> \n          </PointAnimationUsingKeyFrames> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </Ellipse.Triggers> \n</Ellipse> \n```", "```cs\n<Storyboard> \n  <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"300.0\"  \n    Duration=\"0:0:2\" /> \n  <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"300.0\"  \n    Duration=\"0:0:2\" BeginTime=\"0:0:2\" /> \n  <ParallelTimeline BeginTime=\"0:0:4\"> \n    <DoubleAnimation Storyboard.TargetProperty=\"Width\" To=\"0.0\"  \n      Duration=\"0:0:2\" /> \n    <DoubleAnimation Storyboard.TargetProperty=\"Height\" To=\"0.0\"  \n      Duration=\"0:0:2\" /> \n  </ParallelTimeline> \n</Storyboard> \n```", "```cs\nStoryboard.Target=\"{Binding ElementName=TargetControlName}\" \n```", "```cs\nStoryboard.TargetName=\"TargetControlName\" \n```", "```cs\nStoryboard.TargetProperty=\"Fill.GradientOrigin\" \n```", "```cs\n<Canvas> \n  <Rectangle Canvas.Top=\"200\" Canvas.Left=\"25\" Width=\"100\" Height=\"100\"  \n    Fill=\"Orange\" Stroke=\"Black\" StrokeThickness=\"3\"> \n    <Rectangle.Style> \n      <Style TargetType=\"{x:Type Rectangle}\"> \n        <Style.Triggers> \n          <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n            <Trigger.EnterActions> \n              <BeginStoryboard> \n                <Storyboard> \n                  <DoubleAnimation Duration=\"0:0:2\"\n                    Storyboard.TargetProperty=\"(Canvas.Top)\" To=\"0\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.EnterActions> \n            <Trigger.ExitActions> \n              <BeginStoryboard> \n                <Storyboard> \n                  <DoubleAnimation Duration=\"0:0:2\"\n                    Storyboard.TargetProperty=\"(Canvas.Top)\" To=\"200\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.ExitActions> \n          </Trigger> \n        </Style.Triggers> \n      </Style> \n    </Rectangle.Style> \n  </Rectangle> \n  <Rectangle Canvas.Top=\"200\" Canvas.Left=\"150\" Width=\"100\" Height=\"100\"  \n    Fill=\"Orange\" Stroke=\"Black\" StrokeThickness=\"3\"> \n    <Rectangle.Style> \n      <Style TargetType=\"{x:Type Rectangle}\"> \n        <Style.Triggers> \n          <Trigger Property=\"IsMouseOver\" Value=\"True\"> \n            <Trigger.EnterActions> \n              <BeginStoryboard> \n                <Storyboard> \n                  <DoubleAnimation Duration=\"0:0:2\"\n                    Storyboard.TargetProperty=\"(Canvas.Top)\" To=\"0\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.EnterActions> \n            <Trigger.ExitActions> \n              <BeginStoryboard HandoffBehavior=\"Compose\"> \n                <Storyboard> \n                  <DoubleAnimation Duration=\"0:0:2\"\n                    Storyboard.TargetProperty=\"(Canvas.Top)\" To=\"200\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </Trigger.ExitActions> \n          </Trigger> \n        </Style.Triggers> \n      </Style> \n    </Rectangle.Style> \n  </Rectangle> \n</Canvas> \n```", "```cs\n<StackPanel TextElement.FontSize=\"14\"> \n  <TextBox Text=\"{Binding Name, UpdateSourceTrigger=PropertyChanged}\"  \n    Margin=\"20\"> \n    <TextBox.Effect> \n      <DropShadowEffect Color=\"Red\" ShadowDepth=\"0\" BlurRadius=\"0\"  \n        Opacity=\"0.5\" /> \n    </TextBox.Effect> \n    <TextBox.Style> \n      <Style TargetType=\"{x:Type TextBox}\"> \n        <Style.Triggers> \n          <DataTrigger Binding=\"{Binding IsValid}\" Value=\"False\"> \n            <DataTrigger.EnterActions> \n              <BeginStoryboard Name=\"GlowStoryboard\"> \n                <Storyboard RepeatBehavior=\"Forever\"> \n                  <DoubleAnimation Storyboard.\n                    TargetProperty=\"Effect.(DropShadowEffect.BlurRadius)\"\n                    To=\"25\" Duration=\"0:0:1.0\" AutoReverse=\"True\" /> \n                </Storyboard> \n              </BeginStoryboard> \n            </DataTrigger.EnterActions> \n          </DataTrigger> \n          <MultiDataTrigger> \n            <MultiDataTrigger.Conditions> \n              <Condition Binding=\"{Binding IsValid}\" Value=\"False\" /> \n              <Condition Binding=\"{Binding IsFocused,  \n                RelativeSource={RelativeSource Self}}\" Value=\"True\" /> \n            </MultiDataTrigger.Conditions> \n            <MultiDataTrigger.EnterActions> \n              <PauseStoryboard BeginStoryboardName=\"GlowStoryboard\" /> \n            </MultiDataTrigger.EnterActions> \n          </MultiDataTrigger> \n          <Trigger Property=\"IsFocused\" Value=\"True\"> \n            <Trigger.EnterActions> \n              <PauseStoryboard BeginStoryboardName=\"GlowStoryboard\" /> \n            </Trigger.EnterActions> \n            <Trigger.ExitActions> \n              <ResumeStoryboard BeginStoryboardName=\"GlowStoryboard\" /> \n            </Trigger.ExitActions> \n          </Trigger> \n          <DataTrigger Binding=\"{Binding IsValid}\" Value=\"True\"> \n            <DataTrigger.EnterActions> \n              <StopStoryboard BeginStoryboardName=\"GlowStoryboard\" /> \n            </DataTrigger.EnterActions> \n          </DataTrigger> \n          <EventTrigger RoutedEvent=\"Unloaded\"> \n            <EventTrigger.Actions> \n              <RemoveStoryboard BeginStoryboardName=\"GlowStoryboard\" />\n            </EventTrigger.Actions> \n          </EventTrigger> \n        </Style.Triggers> \n      </Style> \n    </TextBox.Style> \n  </TextBox> \n  <TextBox Margin=\"20 0\" /> \n</StackPanel> \n```", "```cs\nprivate string name = string.Empty; \nprivate bool isValid = false;\n\n... \n\npublic string Name \n{ \n  get { return name; } \n  set \n  { \n    if (name != value) \n    { \n      name = value; \n      NotifyPropertyChanged(); \n      IsValid = name.Length > 2; \n    } \n  } \n} \n\npublic bool IsValid \n{ \n  get { return isValid; } \n  set { if (isValid != value) { isValid = value;\n    NotifyPropertyChanged(); } } \n} \n```", "```cs\n<Canvas> \n  <Ellipse Width=\"50\" Height=\"50\" Fill=\"Orange\" Stroke=\"Black\"  \n    StrokeThickness=\"3\"> \n    <Ellipse.Triggers> \n      <EventTrigger RoutedEvent=\"Loaded\"> \n        <BeginStoryboard> \n          <Storyboard RepeatBehavior=\"Forever\"> \n            <Storyboard Storyboard.TargetProperty=\"(Canvas.Top)\"> \n              <DoubleAnimation Duration=\"00:00:3\" From=\"0\" To=\"200\"> \n                <DoubleAnimation.EasingFunction> \n                  <BounceEase EasingMode=\"EaseOut\" Bounces=\"10\" \n                    Bounciness=\"1.5\" /> \n                </DoubleAnimation.EasingFunction> \n              </DoubleAnimation> \n            </Storyboard> \n            <Storyboard Storyboard.TargetProperty=\"(Canvas.Left)\"> \n              <DoubleAnimation Duration=\"00:00:3.5\" From=\"0\" To=\"200\"\n                DecelerationRatio=\"0.2\" /> \n            </Storyboard> \n          </Storyboard> \n        </BeginStoryboard> \n      </EventTrigger> \n    </Ellipse.Triggers> \n  </Ellipse> \n  <Line Canvas.Top=\"250\" Canvas.Left=\"25\" X1=\"0\" Y1=\"1.5\" X2=\"225\" Y2=\"1.5\"\n    Stroke=\"Black\" StrokeThickness=\"3\" /> \n</Canvas> \n```", "```cs\n<Rectangle Canvas.Top=\"250\" Canvas.Left=\"25\" Width=\"25\" Height=\"50\"  \n  Fill=\"Orange\" Stroke=\"Black\" StrokeThickness=\"3\"> \n  <Rectangle.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard RepeatBehavior=\"Forever\"> \n          <Storyboard Storyboard.TargetProperty=\"Height\"> \n            <DoubleAnimation Duration=\"00:00:3\" From=\"50\" To=\"200\"> \n              <DoubleAnimation.EasingFunction> \n                <ElasticEase EasingMode=\"EaseOut\" Oscillations=\"6\" \n                  Springiness=\"2\" /> \n              </DoubleAnimation.EasingFunction> \n            </DoubleAnimation> \n          </Storyboard> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </Rectangle.Triggers> \n</Rectangle> \n```", "```cs\n<Canvas ClipToBounds=\"True\"> \n  <TextBox Canvas.Top=\"50\" Canvas.Left=\"-150\" Width=\"150\" Height=\"25\"> \n    <TextBox.Triggers> \n      <EventTrigger RoutedEvent=\"Loaded\"> \n        <BeginStoryboard> \n          <Storyboard Storyboard.TargetProperty=\"(Canvas.Left)\"\n            Duration=\"00:00:2\" RepeatBehavior=\"Forever\">\n            <DoubleAnimation Duration=\"00:00:1\" From=\"-150\" To=\"50\"> \n              <DoubleAnimation.EasingFunction> \n                <BackEase EasingMode=\"EaseOut\" Amplitude=\"0.75\" /> \n              </DoubleAnimation.EasingFunction> \n            </DoubleAnimation> \n          </Storyboard> \n        </BeginStoryboard> \n      </EventTrigger> \n    </TextBox.Triggers> \n  </TextBox> \n</Canvas> \n```", "```cs\n<TextBlock Text=\"The operation was successful\" Margin=\"20\"> \n  <TextBlock.Triggers> \n    <EventTrigger RoutedEvent=\"Loaded\"> \n      <BeginStoryboard> \n        <Storyboard Storyboard.TargetProperty=\"FontSize\"> \n          <DoubleAnimationUsingKeyFrames Duration=\"00:00:2.5\"> \n            <DiscreteDoubleKeyFrame KeyTime=\"0:0:0\" Value=\"8\" /> \n            <EasingDoubleKeyFrame KeyTime=\"0:0:1\" Value=\"36\"> \n              <EasingDoubleKeyFrame.EasingFunction> \n                <BounceEase EasingMode=\"EaseOut\" Bounces=\"2\" \n                  Bounciness=\"1.5\" /> \n              </EasingDoubleKeyFrame.EasingFunction> \n            </EasingDoubleKeyFrame> \n            <EasingDoubleKeyFrame KeyTime=\"0:0:2\" Value=\"8\"> \n              <EasingDoubleKeyFrame.EasingFunction> \n                <ElasticEase EasingMode=\"EaseIn\" Oscillations=\"2\" \n                  Springiness=\"1.5\" /> \n              </EasingDoubleKeyFrame.EasingFunction> \n            </EasingDoubleKeyFrame> \n            <EasingDoubleKeyFrame KeyTime=\"0:0:2.5\" Value=\"36\"> \n              <EasingDoubleKeyFrame.EasingFunction> \n                <BackEase EasingMode=\"EaseOut\" Amplitude=\"2\" /> \n              </EasingDoubleKeyFrame.EasingFunction> \n            </EasingDoubleKeyFrame> \n          </DoubleAnimationUsingKeyFrames> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </TextBlock.Triggers> \n</TextBlock> \n```", "```cs\n<TextBlock Margin=\"100,125\" Text=\"Hello World\" FontSize=\"18\"> \n  <TextBlock.RenderTransform> \n    <MatrixTransform x:Name=\"MatrixTransform\"> \n      <MatrixTransform.Matrix> \n        <Matrix /> \n      </MatrixTransform.Matrix> \n    </MatrixTransform> \n  </TextBlock.RenderTransform> \n  <TextBlock.Triggers> \n    <EventTrigger RoutedEvent=\"TextBlock.Loaded\"> \n      <BeginStoryboard> \n        <Storyboard> \n          <MatrixAnimationUsingPath  \n            Storyboard.TargetName=\"MatrixTransform\"  \n            Storyboard.TargetProperty=\"Matrix\" Duration=\"0:0:4\"  \n            RepeatBehavior=\"Forever\" DoesRotateWithTangent=\"True\"> \n            <MatrixAnimationUsingPath.PathGeometry> \n              <PathGeometry> \n                <PathFigure StartPoint=\"49.99,49.99\">\n                  <ArcSegment Point=\"50,50\" Size=\"50,50\"  \n                    SweepDirection=\"Clockwise\" IsLargeArc=\"True\" /> \n                </PathFigure> \n              </PathGeometry> \n            </MatrixAnimationUsingPath.PathGeometry> \n          </MatrixAnimationUsingPath> \n        </Storyboard> \n      </BeginStoryboard> \n    </EventTrigger> \n  </TextBlock.Triggers> \n</TextBlock> \n```", "```cs\nusing System; \nusing System.Windows; \nusing System.Windows.Controls; \nusing System.Windows.Media; \nusing System.Windows.Media.Animation; \n\nnamespace CompanyName.ApplicationName.Views.Panels \n{ \n  public class AnimatedStackPanel : Panel \n  { \n    public static DependencyProperty OrientationProperty =  \n      DependencyProperty.Register(nameof(Orientation),  \n      typeof(Orientation), typeof(AnimatedStackPanel),  \n      new PropertyMetadata(Orientation.Vertical)); \n\n    public Orientation Orientation \n    { \n      get { return (Orientation)GetValue(OrientationProperty); } \n      set { SetValue(OrientationProperty, value); } \n    } \n\n    protected override Size MeasureOverride(Size availableSize) \n    { \n      double x = 0, y = 0; \n      foreach (UIElement child in Children) \n      { \n        child.Measure(availableSize); \n        if (Orientation == Orientation.Horizontal) \n        { \n          x += child.DesiredSize.Width; \n          y = Math.Max(y, child.DesiredSize.Height); \n        } \n        else \n        { \n          x = Math.Max(x, child.DesiredSize.Width); \n          y += child.DesiredSize.Height; \n        } \n      } \n      return new Size(x, y); \n    } \n\n    protected override Size ArrangeOverride(Size finalSize) \n    { \n      Point endPosition = new Point(); \n      foreach (UIElement child in Children) \n      { \n        if (Orientation == Orientation.Horizontal)\n        {\n          child.Arrange(new Rect(-child.DesiredSize.Width, 0, \n            child.DesiredSize.Width, finalSize.Height));\n          endPosition.X += child.DesiredSize.Width;\n        }\n        else\n        {\n          child.Arrange(new Rect(0, -child.DesiredSize.Height,\n            finalSize.Width, child.DesiredSize.Height));\n          endPosition.Y += child.DesiredSize.Height;\n        }\n        AnimatePosition(child, endPosition, \n          TimeSpan.FromMilliseconds(300));\n      } \n      return finalSize; \n    } \n\n    private void AnimatePosition(UIElement child, Point endPosition,  \n      TimeSpan animationDuration) \n    { \n      if (Orientation == Orientation. Vertical)  \n        GetTranslateTransform(child).BeginAnimation( \n        TranslateTransform.YProperty, \n        new DoubleAnimation(endPosition.Y, animationDuration)); \n      else GetTranslateTransform(child).BeginAnimation( \n        TranslateTransform.XProperty,\n        new DoubleAnimation(endPosition.X, animationDuration)); \n    } \n\n    private TranslateTransform GetTranslateTransform(UIElement child) \n    { \n      return child.RenderTransform as TranslateTransform ??  \n        AddTranslateTransform(child); \n    } \n\n    private TranslateTransform AddTranslateTransform(UIElement child) \n    { \n      TranslateTransform translateTransform = new TranslateTransform(); \n      child.RenderTransform = translateTransform; \n      return translateTransform; \n    } \n  } \n} \n```", "```cs\n\n... \n<ListBox ItemsSource=\"{Binding Users}\"> \n  <ListBox.ItemsPanel> \n    <ItemsPanelTemplate> \n      <Panels:AnimatedStackPanel /> \n    </ItemsPanelTemplate> \n  </ListBox.ItemsPanel> \n</ListBox> \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Interfaces \n{ \n  public interface IAnimatable \n  { \n    Animatable Animatable { get; set; } \n  } \n} \n```", "```cs\nusing System; \nusing CompanyName.ApplicationName.DataModels.Enums; \nusing CompanyName.ApplicationName.DataModels.Interfaces; \n\nnamespace CompanyName.ApplicationName.DataModels \n{ \n  public class Animatable \n  { \n    private AdditionStatus additionStatus = AdditionStatus.ReadyToAnimate; \n    private RemovalStatus removalStatus = RemovalStatus.None;  \n    private TransitionStatus transitionStatus = TransitionStatus.None; \n    private IAnimatable owner; \n\n    public Animatable(IAnimatable owner) \n    { \n      Owner = owner; \n    } \n\n    public Animatable() { } \n\n    public event EventHandler<EventArgs> OnRemovalStatusChanged;  \n    public event EventHandler<EventArgs> OnTransitionStatusChanged; \n\n    public IAnimatable Owner \n    { \n      get { return owner; } \n      set { owner = value; } \n    } \n\n    public AdditionStatus AdditionStatus \n    { \n      get { return additionStatus; } \n      set { additionStatus = value; } \n    } \n\n    public TransitionStatus TransitionStatus \n    { \n      get { return transitionStatus; } \n      set \n      { \n        transitionStatus = value; \n        OnTransitionStatusChanged?.Invoke(this, new EventArgs()); \n      } \n    } \n\n    public RemovalStatus RemovalStatus \n    { \n      get { return removalStatus; } \n      set \n      { \n        removalStatus = value; \n        OnRemovalStatusChanged?.Invoke(this, new EventArgs()); \n      } \n    } \n  } \n} \n```", "```cs\nnamespace CompanyName.ApplicationName.DataModels.Enums \n{ \n  public enum AdditionStatus \n  { \n    None = -1, ReadyToAnimate = 0, DoNotAnimate = 1, Added = 2 \n  } \n\n  public enum TransitionStatus \n  { \n    None = -1, ReadyToAnimate = 0, AnimationComplete = 1 \n  }\n\n  public enum RemovalStatus \n  { \n    None = -1, ReadyToAnimate = 0, ReadyToRemove = 1 \n  } \n} \n```", "```cs\npublic class User : ... , IAnimatable \n{ \n  private Animatable animatable;\n\n  ...\n\n  public User(Guid id, string name, int age) \n  { \n    Animatable = new Animatable(this); \n    ... \n  } \n\n  public Animatable Animatable \n  { \n    get { return animatable; } \n    set { animatable = value; } \n  } \n\n  ... \n} \n```", "```cs\nusing System; \nusing System.Collections.Generic; \nusing System.ComponentModel; \nusing System.Linq; \nusing CompanyName.ApplicationName.DataModels.Enums; \nusing CompanyName.ApplicationName.DataModels.Interfaces; \n\nnamespace CompanyName.ApplicationName.DataModels.Collections \n{ \n  public class BaseAnimatableCollection<T> : BaseCollection<T>  \n    where T : class, IAnimatable, INotifyPropertyChanged, new() \n  { \n    private bool isAnimatable = true; \n\n    public BaseAnimatableCollection(IEnumerable<T> collection) \n    { \n      foreach (T item in collection) Add(item); \n    } \n\n    ... \n\n    public bool IsAnimatable  \n    { \n      get { return isAnimatable; } \n      set { isAnimatable = value; } \n    } \n\n    public new int Count => IsAnimatable ? \n      this.Count(i => i.Animatable.RemovalStatus == RemovalStatus.None) :\n      this.Count(); \n\n    public new void Add(T item) \n    { \n      item.Animatable.OnRemovalStatusChanged +=\n        Item_OnRemovalStatusChanged; \n      item.Animatable.AdditionStatus = AdditionStatus.ReadyToAnimate; \n      base.Add(item); \n    } \n\n    public new virtual void Add(IEnumerable<T> collection) \n    { \n      foreach (T item in collection) Add(item); \n    } \n\n    public new virtual void Add(params T[] items) \n    { \n      Add(items as IEnumerable<T>); \n    } \n\n    public new void Insert(int index, T item) \n    { \n      item.Animatable.OnRemovalStatusChanged += \n        Item_OnRemovalStatusChanged; \n      item.Animatable.AdditionStatus = AdditionStatus.ReadyToAnimate; \n      base.Insert(index, item); \n    } \n\n    protected override void ClearItems() \n    { \n      foreach (T item in this) item.Animatable.OnRemovalStatusChanged -=\n        Item_OnRemovalStatusChanged; \n      base.ClearItems(); \n    } \n\n    public new bool Remove(T item) \n    { \n      item.Animatable.RemovalStatus = RemovalStatus.ReadyToAnimate; \n      return true; \n    } \n\n    public void Item_OnRemovalStatusChanged(object sender, EventArgs e) \n    { \n      Animatable animatable = (Animatable)sender; \n      if (animatable.RemovalStatus == RemovalStatus.ReadyToRemove ||  \n        (animatable.RemovalStatus == RemovalStatus.ReadyToAnimate && \n        !IsAnimatable)) \n      { \n        base.Remove(animatable.Owner as T); \n        animatable.RemovalStatus = RemovalStatus.None; \n      } \n    } \n  } \n} \n```", "```cs\nprivate List<UIElement> elementsToBeRemoved = new List<UIElement>();\n```", "```cs\nusing System.Collections.Generic; \nusing CompanyName.ApplicationName.DataModels.Enums; \nusing Animatable = CompanyName.ApplicationName.DataModels.Animatable; \nusing IAnimatable = \n  CompanyName.ApplicationName.DataModels.Interfaces.IAnimatable; \n```", "```cs\nBeginAnimations(child, finalSize, endPosition); \n```", "```cs\nprivate void BeginAnimations(UIElement child, Size finalSize, \n  Point endPosition) \n{ \n  FrameworkElement frameworkChild = (FrameworkElement)child; \n  if (frameworkChild.DataContext is IAnimatable) \n  { \n    Animatable animatable =\n      ((IAnimatable)frameworkChild.DataContext).Animatable; \n    animatable.OnRemovalStatusChanged -= Item_OnRemovalStatusChanged; \n    animatable.OnRemovalStatusChanged += Item_OnRemovalStatusChanged; \n    if (animatable.AdditionStatus == AdditionStatus.DoNotAnimate) \n    { \n      child.Arrange(new Rect(endPosition.X, endPosition.Y,  \n        frameworkChild.ActualWidth, frameworkChild.ActualHeight)); \n    } \n    else if (animatable.AdditionStatus == AdditionStatus.ReadyToAnimate) \n    { \n      AnimateEntry(child, endPosition); \n      animatable.AdditionStatus = AdditionStatus.Added;  \n      animatable.TransitionStatus = TransitionStatus.ReadyToAnimate; \n    } \n    else if (animatable.RemovalStatus == RemovalStatus.ReadyToAnimate)\n      AnimateExit(child, endPosition, finalSize);  \n    else if (animatable.TransitionStatus == \n      TransitionStatus.ReadyToAnimate) \n      AnimateTransition(child, endPosition); \n  } \n} \n\nprivate void Item_OnRemovalStatusChanged(object sender, EventArgs e) \n{ \n  if (((Animatable)sender).RemovalStatus == RemovalStatus.ReadyToAnimate)  \n    InvalidateArrange(); \n} \n\nprivate void AnimateEntry(UIElement child, Point endPosition) \n{ \n  AnimatePosition(child, endPosition, TimeSpan.FromMilliseconds(300)); \n} \n\nprivate void AnimateTransition(UIElement child, Point endPosition) \n{ \n  AnimatePosition(child, endPosition, TimeSpan.FromMilliseconds(300)); \n} \n\nprivate void AnimateExit(UIElement child, Point startPosition,\n  Size finalSize) \n{ \n  SetZIndex(child, 100); \n  Point endPosition = \n    new Point(startPosition.X + finalSize.Width, startPosition.Y); \n  AnimatePosition(child, startPosition, endPosition,  \n    TimeSpan.FromMilliseconds(300), RemovalAnimation_Completed); \n  elementsToBeRemoved.Add(child); \n} \n\nprivate void AnimatePosition(UIElement child, Point startPosition,\n  Point endPosition, TimeSpan animationDuration,\n  EventHandler animationCompletedHandler) \n{ \n  if (startPosition.X != endPosition.X) \n  { \n    DoubleAnimation xAnimation = new DoubleAnimation(startPosition.X,  \n      endPosition.X, animationDuration); \n    xAnimation.AccelerationRatio = 1.0; \n    if (animationCompletedHandler != null)  \n      xAnimation.Completed += animationCompletedHandler; \n    GetTranslateTransform(child).BeginAnimation(\n      TranslateTransform.XProperty, xAnimation); \n  } \n  if (startPosition.Y != endPosition.Y) \n  { \n    DoubleAnimation yAnimation = new DoubleAnimation(startPosition.Y,  \n      endPosition.Y, animationDuration); \n    yAnimation.AccelerationRatio = 1.0; \n    if (startPosition.X == endPosition.X && animationCompletedHandler !=\n      null) yAnimation.Completed += animationCompletedHandler;\n    GetTranslateTransform(child).BeginAnimation( \n      TranslateTransform.YProperty, yAnimation); \n  } \n} \n\nprivate void RemovalAnimation_Completed(object sender, EventArgs e) \n{ \n  for (int index = elementsToBeRemoved.Count - 1; index >= 0; index--) \n  { \n    FrameworkElement frameworkElement =  \n      elementsToBeRemoved[index] as FrameworkElement; \n    if (frameworkElement.DataContext is IAnimatable) \n    { \n      ((IAnimatable)frameworkElement.DataContext).Animatable.RemovalStatus\n        = RemovalStatus.ReadyToRemove; \n      elementsToBeRemoved.Remove(frameworkElement); \n    } \n  } \n} \n```"]