["```cs\nstringToEdit = GUILayout.TextField(stringToEdit, 25);\n\n if (GUI.changed)\n     Debug.Log(\"new contents of 'stringToEdit' = \" + stringToEdit); \n```", "```cs\nEditorGUI.BeginChangeCheck();\n stringToEdit = GUILayout.TextField(stringToEdit, 25);\n ... other interactive GUI statements here\n EditorGUI.EndChangeCheck();\n\n // logic if any have changed\n if(GUI.changed)\n     ... do actions since user has changed at least one GUI control \n```", "```cs\nEditorGUI.BeginChangeCheck();\n stringToEdit = GUILayout.TextField(stringToEdit, 25);\n ... other interactive GUI statements here\n\n // logic if any have changed\n if(EditorGUI.EndChangeCheck())\n     ... do actions since user has changed at least one GUI control \n```", "```cs\nprivate void OnFocus()  \n {\n     if (EditorPrefs.HasKey(\"PlayerName\"))\n         playerName = EditorPrefs.GetString(\"PlayerName\");\n } \n```", "```cs\nusing UnityEditor;\n using UnityEngine;\n using System.Reflection;\n\n public class ConsoleUtilities : EditorWindow\n {\n     [MenuItem(\"My Utilities/Clear Console\")]\n     public static void ClearLogConsole()\n     {\n         var assembly = Assembly.GetAssembly(typeof(SceneView));\n         var type = assembly.GetType(\"UnityEditor.LogEntries\");\n         var method = type.GetMethod(\"Clear\");\n         method.Invoke(new object(), null);\n     }\n\n     [MenuItem(\"My Utilities/Log a message\")]\n     public static void LogHello()\n     { \n         Debug.Log(\"Hello from my console utilties\");\n     }\n } \n```", "```cs\n    [MenuItem(\"My Utilities/Clear Console\")] \n```", "```cs\n[MenuItem(\"My Utilities/Log a message %l\")] // CMD + L\n public static void LogHello()\n {\n     Debug.Log(\"Hello from my console utilties\");\n }\n\n [MenuItem(\"My Utilities/Clear Console %k\")] // CMD + K\n public static void ClearLogConsole()\n {\n     var assembly = Assembly.GetAssembly(typeof(SceneView));\n     var type = assembly.GetType(\"UnityEditor.LogEntries\");\n     var method = type.GetMethod(\"Clear\");\n     method.Invoke(new object(), null);\n } \n```", "```cs\nMenu Name/Sub-menu name/menu item \n```", "```cs\n[MenuItem(\"Utilities/Console/Clear Console\")]\n public static void ClearLogConsole() {\n     // code here\n }\n\n [MenuItem(\"Utilities/Console/Log a message\")]\n public static void LogHello() {\n     // code here\n } \n```", "```cs\nusing UnityEditor;\n using UnityEngine;\n\n public class InformationPanel : EditorWindow\n {\n     [MenuItem(\"My Game/Info Panel\")]\n     public static void ShowWindow()\n     {\n         GetWindow<InformationPanel>(\"My Game\", true);\n     }\n\n     private void OnGUI()\n     {\n         GUILayout.Label(\"Hello editor world\");\n         GUILayout.FlexibleSpace();\n         GUILayout.Label(\"Here is some important information\");\n     }\n } \n```", "```cs\nGUILayout.Label(\"Hello editor world\");\n\n GUILayout.FlexibleSpace();\n GUILayout.Label(\"Here is some important information\");\n GUILayout.FlexibleSpace(); \n```", "```cs\nGUILayout.BeginHorizontal();\n // content here is laid out horiztonally\n GUILayout.EndHorizontal(); \n```", "```cs\nprivate void OnGUI() {\n     GUILayout.Label(\"Hello editor world\");\n     GUILayout.FlexibleSpace();\n\n     GUILayout.BeginHorizontal();\n     GUILayout.FlexibleSpace();\n\n         GUILayout.Label(\"I am in the center !!!\");\n\n     GUILayout.FlexibleSpace();\n     GUILayout.EndHorizontal();\n\n     GUILayout.FlexibleSpace();\n } \n```", "```cs\nusing UnityEditor;\n using UnityEngine;\n\n public class Welcome : EditorWindow\n {\n     private string playerName = \"\";\n     private string tempName = \"\";\n\n     [MenuItem(\"Welcome/Hello Player\")]\n     public static void ShowWindow()\n     {\n         GetWindow<Welcome>(\"Welcome\", true);\n     }\n\n     private void OnGUI()\n     {\n         // hello\n         string helloMessage = \"Hello (no name)\";\n         if (playerName.Length > 0){\n             helloMessage = \"Hello \" + playerName;\n         }\n\n         GUILayout.Label(helloMessage);\n         GUILayout.FlexibleSpace();\n\n         // text input\n         tempName = EditorGUILayout.TextField(\"Player name:\", tempName);\n\n         // button\n         if (GUILayout.Button(\"Update\")){\n             playerName = tempName;\n         }\n     }\n } \n```", "```cs\nprivate void OnFocus() {\n if (EditorPrefs.HasKey(\"PlayerName\"))\n playerName = EditorPrefs.GetString(\"PlayerName\");\n }\n```", "```cs\nprivate void SavePrefs() {\n     EditorPrefs.SetString(\"PlayerName\", playerName);\n } \n```", "```cs\n// automatic save when panel loses focus\n private void OnLostFocus() {\n     SavePrefs();\n }\n\n // automatic save when panel closed/destroyed\n private void OnDestroy() {\n     SavePrefs();\n } \n```", "```cs\nGUILayout.Label(helloMessage);\n GUILayout.FlexibleSpace();\n tempName = EditorGUILayout.TextField(\"Player name:\", tempName);\n```", "```cs\nusing UnityEditor;\n using UnityEngine;\n\n public class ObjectManager : EditorWindow\n {\n     [MenuItem(\"GameObject/MyObjectManager/Create New Empty Game Object\")]\n     static void CreateCustomEmptyGameObject(MenuCommand menuCommand)\n     {\n         GameObject go = new GameObject(\"GameObject - custom - Empty\");\n         go.transform.position = RandomPosition(5);\n\n         // Ensure it gets reparented if this was a context click (otherwise does nothing)\n         GameObjectUtility.SetParentAndAlign(go, menuCommand.context as GameObject);\n\n         // Register the creation in the undo system\n         Undo.RegisterCreatedObjectUndo(go, \"Create \" + go.name);\n         Selection.activeObject = go;\n     }\n\n     private static Vector3 RandomPosition(float limit)\n     {\n         float x = Random.Range(-limit, limit);\n         float y = Random.Range(-limit, limit);\n         float z = Random.Range(-limit, limit);\n         return new Vector3(x,y,z);\n     }\n } \n```", "```cs\n[MenuItem(\"GameObject/MyObjectManager/Create New Empty Game Object\")]\n static void CreateCustomEmptyGameObject(MenuCommand menuCommand)\n {\n     GameObject go = new GameObject(\"GameObject - custom - Empty\");\n     go.transform.position = RandomPosition(5);\n\n     // Ensure it gets reparented if this was a context click (otherwise does nothing)\n     GameObjectUtility.SetParentAndAlign(go, menuCommand.context as GameObject);\n\n     // Register the creation in the undo system\n     Undo.RegisterCreatedObjectUndo(go, \"Create \" + go.name);\n     Selection.activeObject = go;\n } \n```", "```cs\n[MenuItem(\"GameObject/MyObjectManager/Create New RandomShape GameObject\")]\n static void CreateCustomPrimitiveGameObject(MenuCommand menuCommand){\n     // Create a custom game object\n     GameObject go = BuildGameObjectRandomPrimitive();\n     go.transform.position = RandomPosition(5);\n     go.GetComponent<Renderer>().sharedMaterial = RandomMaterialColor();\n } \n```", "```cs\nprivate static GameObject BuildGameObjectRandomPrimitive() {\n     GameObject go;\n     PrimitiveType primitiveType = PrimitiveType.Cube;\n     int type = Random.Range(0, 4);\n\n     switch (type) {\n         case 0:\n             primitiveType = PrimitiveType.Sphere;\n             break;\n\n         case 1:\n             primitiveType = PrimitiveType.Capsule;\n             break;\n\n         case 2:\n             primitiveType = PrimitiveType.Cylinder;\n             break;\n     }\n\n     go = GameObject.CreatePrimitive(primitiveType);\n     go.name = \"GameObject - custom - \" + primitiveType.ToString();\n     return go;\n } \n```", "```cs\nprivate static Material RandomMaterialColor() {\n     Shader shaderSpecular = Shader.Find(\"Specular\");\n     Material material = new Material(shaderSpecular);\n     material.color = Random.ColorHSV();\n\n     return material;\n } \n```", "```cs\nusing UnityEditor;\n using UnityEngine;\n\n public class SelectedObjectManager : EditorWindow\n {\n     [MenuItem(\"MyMenu/Move To Origin\")]\n     static void ZeroPosition()\n     {\n         GameObject selectedGameObject = Selection.activeTransform.gameObject;\n\n         Undo.RecordObject (selectedGameObject.transform, \"Zero Transform Position\");\n         selectedGameObject.transform.position = Vector3.zero;\n     }\n\n     [MenuItem(\"MyMenu/Move To Origin\", true)]\n     static bool ValidateZeroPosition()\n     {\n         // Return false if no transform is selected.\n         return Selection.activeTransform != null;\n     }\n }\n```", "```cs\n[MenuItem(\"MyMenu/MoveToOrigin\", true)] \n```", "```cs\nusing UnityEngine;\n using UnityEditor;\n\n public class MyGreatGameEditor : MonoBehaviour {\n     const float X_MAX = 10f;\n     const float Y_MAX = 10f;\n\n     static GameObject starPrefab;\n\n     [MenuItem(\"My-Great-Game/Make 100 stars\")]\n     static void PlacePrefabs() {\n         string assetPath = \"Assets/Prefabs/prefab_star.prefab\";\n         starPrefab = (GameObject)AssetDatabase.LoadMainAssetAtPath(assetPath);\n\n         int total = 100;\n         for(int i = 0; i < total; i++){\n             CreateRandomInstance();\n         }\n     }\n\n     static void CreateRandomInstance() {\n         Vector3 randomPosition = RandomPosition();\n         Instantiate(starPrefab, randomPosition, Quaternion.identity);\n     }\n\n     private static Vector3 RandomPosition() {\n         float x = Random.Range(-X_MAX, X_MAX);\n         float y = Random.Range(-Y_MAX, Y_MAX);\n         float z = 0;\n         return new Vector3(x,y,z);\n     }\n }\n```", "```cs\nstatic GameObject starContainerGo;\n\n static void CreateStarContainerGo() {\n     string containerName = \"Star-container\";\n     starContainerGo = GameObject.Find(containerName);\n     if (null != starContainerGO)\n         DestroyImmediate(starContainerGO);\n\n     starContainerGo = new GameObject(containerName);\n } \n```", "```cs\nstatic void PlacePrefabs(){\n     CreateStarContainerGo();\n\n     // rest of method as before ...\n } \n```", "```cs\nstatic void CreateRandomInstance() {\n     float x = UnityEngine.Random.Range(-X_MAX, X_MAX);\n     float y = UnityEngine.Random.Range(-Y_MAX, Y_MAX);\n     float z = 0;\n     Vector3 randomPosition = new Vector3(x,y,z);\n\n     GameObject newStarGo = (GameObject)Instantiate(starPrefab,  randomPosition, Quaternion.identity);\n     newStarGo.transform.parent = starContainerGO.transform;\n } \n```", "```cs\nstatic void PlacePrefabs(){ \n\n   string assetPath = \"Assets/Prefabs/prefab_star.prefab\"; \n\n   starPrefab = (GameObject)AssetDatabase.LoadMainAssetAtPath(assetPath); \n\n   int total = 100; \n\n      for(int i = 0; i < total; i++){ \n\n         CreateRandomInstance(); \n\n         EditorUtility.DisplayProgressBar(\"Creating your starfield\",  i + \"%\", i/100f); \n\n      } \n\n      EditorUtility.ClearProgressBar(); \n\n   } \n```", "```cs\nusing UnityEngine;\n using System;\n using System.Collections;\n\n public class PickUp : MonoBehaviour {\n   public enum PickUpType {\n     Star, Health, Key\n   }\n\n   [SerializeField]\n   public PickUpType type;\n\n   public void SetSprite(Sprite newSprite){\n     SpriteRenderer spriteRenderer = GetComponent<SpriteRenderer>();\n     spriteRenderer.sprite = newSprite;\n   }\n } \n```", "```cs\nusing UnityEngine;\n using System.Collections;\n using System;\n using UnityEditor;\n using System.Collections.Generic;\n\n [CanEditMultipleObjects]\n [CustomEditor(typeof(PickUp))]\n public class PickUpEditor : Editor\n {\n   public Texture iconHealth;\n   public Texture iconKey;\n   public Texture iconStar;\n\n   public Sprite spriteHealth100;\n   public Sprite spriteKey100;\n   public Sprite spriteStar100;\n\n   UnityEditor.SerializedProperty pickUpType;\n\n   private Sprite sprite;\n   private PickUp pickupObject;\n\n   void OnEnable () {\n     iconHealth = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_heart_32.png\", typeof(Texture)) as Texture;\n     iconKey = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_key_32.png\", typeof(Texture)) as Texture;\n     iconStar =  AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/ icon_star_32.png\", typeof(Texture)) as Texture;\n\n     spriteHealth100 =  AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/ healthheart.png\", typeof(Sprite)) as Sprite;\n     spriteKey100 =  AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/ icon_key_100.png\", typeof(Sprite)) as Sprite;\n     spriteStar100 =  AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/ star.png\", typeof(Sprite)) as Sprite;\n\n     pickupObject = (PickUp)target;\n     pickUpType = serializedObject.FindProperty (\"type\");\n   }\n\n   public override void OnInspectorGUI()\n   {\n     serializedObject.Update ();\n\n     string[] pickUpCategories = TypesToStringArray();\n     pickUpType.enumValueIndex =  EditorGUILayout.Popup(\"PickUp TYPE: \",  pickUpType.enumValueIndex, pickUpCategories);\n\n     PickUp.PickUpType type =  (PickUp.PickUpType)pickUpType.enumValueIndex;\n     switch(type)\n     {\n     case PickUp.PickUpType.Health:\n       InspectorGUI_HEALTH();\n       break;\n\n     case PickUp.PickUpType.Key:\n       InspectorGUI_KEY();\n       break;\n\n     case PickUp.PickUpType.Star:\n     default:\n       InspectorGUI_STAR();\n       break;\n     }\n\n     serializedObject.ApplyModifiedProperties ();\n   }\n\n   private void InspectorGUI_HEALTH()\n   {\n     GUILayout.BeginHorizontal();\n     GUILayout.FlexibleSpace();\n     GUILayout.Label(iconHealth);\n     GUILayout.Label(\"HEALTH\");\n     GUILayout.Label(iconHealth);\n     GUILayout.Label(\"HEALTH\");\n     GUILayout.Label(iconHealth);\n     GUILayout.FlexibleSpace();\n     GUILayout.EndHorizontal();\n\n     pickupObject.SetSprite(spriteHealth100);\n   }\n\n   private void InspectorGUI_KEY()\n   {\n     GUILayout.BeginHorizontal();\n     GUILayout.FlexibleSpace();\n     GUILayout.Label(iconKey);\n     GUILayout.Label(\"KEY\");\n     GUILayout.Label(iconKey);\n     GUILayout.Label(\"KEY\");\n     GUILayout.Label(iconKey);\n     GUILayout.FlexibleSpace();\n     GUILayout.EndHorizontal();\n\n     pickupObject.SetSprite(spriteKey100);\n   }\n\n   private void InspectorGUI_STAR()\n   {\n     GUILayout.BeginHorizontal();\n     GUILayout.FlexibleSpace();\n     GUILayout.Label(iconStar);\n     GUILayout.Label(\"STAR\");\n     GUILayout.Label(iconStar);\n     GUILayout.Label(\"STAR\");\n     GUILayout.Label(iconStar);\n     GUILayout.FlexibleSpace();\n     GUILayout.EndHorizontal();\n\n     pickupObject.SetSprite(spriteStar100);\n   }\n   private string[] TypesToStringArray(){\n     var pickupValues =  (PickUp.PickUpType[])Enum.GetValues(typeof (PickUp.PickUpType));\n\n     List<string> stringList = new List<string>();\n\n     foreach(PickUp.PickUpType pickupValue in pickupValues){\n       string stringName = pickupValue.ToString();\n       stringList.Add(stringName);\n     }\n\n     return stringList.ToArray();\n   }\n } \n```", "```cs\npublic int points; \n```", "```cs\nUnityEditor.SerializedProperty points; \n```", "```cs\ncsharp void OnEnable () {    \n\npoints = serializedObject.FindProperty (\"points\");    \n\npickUpType = serializedObject.FindProperty (\"type\");    \n\n// rest of method as before...\n```", "```cs\nprivate void InspectorGUI_HEALTH(){\n   // beginning of method just as before...\n\n   pickupObject.SetSprite(spriteHealth100);\n\n // now display Int Slider for points\n   points.intValue = EditorGUILayout.IntSlider  (\"Health points\", points.intValue, 0, 100);\n } \n```", "```cs\npublic string fitsLockTag; \n```", "```cs\nUnityEditor.SerializedProperty fitsLockTag; \n```", "```cs\ncsharp void OnEnable () {      \n\nfitsLockTag =  serializedObject.FindProperty (\"fitsLockTag\");     points = serializedObject.FindProperty (\"points\");      \n\npickUpType = serializedObject.FindProperty (\"type\");      \n\n// rest of method as before... \n```", "```cs\nprivate void InspectorGUI_KEY() {\n     GUILayout.BeginHorizontal();\n     GUILayout.FlexibleSpace();\n     GUILayout.Label(iconKey);\n     GUILayout.Label(\"KEY\");\n     GUILayout.Label(iconKey);\n     GUILayout.Label(\"KEY\");\n     GUILayout.Label(iconKey);\n     GUILayout.FlexibleSpace();\n     GUILayout.EndHorizontal();\n\n     pickupObject.SetSprite(spriteKey100);\n\n     string[] tags =  UnityEditorInternal.InternalEditorUtility.tags;\n     Array.Sort(tags);\n     int selectedTagIndex =  Array.BinarySearch(tags, fitsLockTag.stringValue);\n     if(selectedTagIndex < 0)\n         selectedTagIndex = 0;\n\n     selectedTagIndex =  EditorGUILayout.Popup(\"Tag of door key fits: \",  selectedTagIndex, tags);\n\n     fitsLockTag.stringValue = tags[selectedTagIndex];\n } \n```", "```cs\nif(\"Door\" == hitCollider.tag){\n     if(!OpenDoor(hitCollider.gameObject))\n         DoorNotOpenedAction();\n } \n```", "```cs\nprivate bool OpenDoor(GameObject doorGO){\n     // search for key to open the tag of doorGO\n     int colorKeyIndex = FindItemIndex(doorGO.tag);\n     if( colorKeyIndex > -1 ){\n         // remove key item from inventory List<>\n         inventory.RemoveAt( colorKeyIndex );\n\n         // now open the door...\n         DoorAnimationController doorAnimationController =  doorGO.GetComponent<>(DoorAnimationController);\n         doorAnimationController.OpenDoor();\n\n         return true;\n     }\n\n     return false;\n } \n```", "```cs\nprivate int FindItemIndex(string doorTag){\n     for (int i = 0; i < inventory.Count; i++){\n         PickUp item = inventory[i];\n         if( (PickUp.PickUpType.Key == item.type) &&   (item.fitsLockTag == doorTag))\n             return i;\n     }\n\n     // not found\n     return -1;\n } \n```", "```cs\nusing UnityEngine;\nusing UnityEditor;\n\n[CustomEditor(typeof(ObjectBuilderScript))]\npublic class ObjectBuilderEditor : Editor{\n   private Texture iconStar;\n   private Texture iconHeart;\n   private Texture iconKey;\n\n   private GameObject prefabHeart;\n   private GameObject prefabStar;\n   private GameObject prefabKey;\n\n   void OnEnable () {\n      iconStar = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_star_32.png\", typeof(Texture)) as Texture;\n      iconHeart = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_heart_32.png\", typeof(Texture)) as Texture;\n      iconKey = AssetDatabase.LoadAssetAtPath(\"Assets/EditorSprites/icon_key_green_32.png\", typeof(Texture)) as Texture;\n\n      prefabStar = AssetDatabase.LoadAssetAtPath(\"Assets/Prefabs/star.prefab\", typeof(GameObject)) as GameObject;\n      prefabHeart = AssetDatabase.LoadAssetAtPath(\"Assets/Prefabs/heart.prefab\", typeof(GameObject)) as GameObject;\n      prefabKey = AssetDatabase.LoadAssetAtPath(\"Assets/Prefabs/key.prefab\", typeof(GameObject)) as GameObject;\n   }\n\n   public override void OnInspectorGUI() {\n      GUILayout.Label(\"\");\n      GUILayout.BeginHorizontal();\n      GUILayout.FlexibleSpace();\n      GUILayout.Label(\"Click button to create instance of prefab\");\n      GUILayout.FlexibleSpace();\n      GUILayout.EndHorizontal();\n      GUILayout.Label(\"\");\n\n      GUILayout.BeginHorizontal();\n      GUILayout.FlexibleSpace();\n      if(GUILayout.Button(iconStar)) AddObjectToScene(prefabStar);\n      GUILayout.FlexibleSpace();\n      if(GUILayout.Button(iconHeart)) AddObjectToScene(prefabHeart);\n      GUILayout.FlexibleSpace();\n      if(GUILayout.Button(iconKey)) AddObjectToScene(prefabKey);\n      GUILayout.FlexibleSpace();\n      GUILayout.EndHorizontal();\n   }\n\n   private void AddObjectToScene(GameObject prefabToCreateInScene) {\n      ObjectBuilderScript myScript = (ObjectBuilderScript)target;\n      GameObject newGo = Instantiate(prefabToCreateInScene, myScript.gameObject.transform.position, Quaternion.identity);\n      newGo.name = prefabToCreateInScene.name;\n   }\n}\n```", "```cs\n    using UnityEngine;\n\n     public class ObjectBuilderScript : MonoBehaviour {\n       void Awake(){\n         gameObject.SetActive(false);\n       }\n     } \n```", "```cs\npublic interface IMyGUI\n {\n     void OnGUI();\n } \n```", "```cs\nusing UnityEngine;\n\n public class MyGUIFlexibleSpace : IMyGUI\n {\n     public void OnGUI()\n     {\n         GUILayout.FlexibleSpace();\n     }\n }\n```", "```cs\nusing UnityEngine;\n\n public class MyGUIButton : IMyGUI\n {\n     public GUIContent label = new GUIContent();\n     public event System.Action OnClick;\n\n     public void OnGUI() {\n         // if button clicked, invoke methods registed with 'OnClick' event\n         if (GUILayout.Button (label) && OnClick != null)\n             OnClick ();\n     }\n } \n```", "```cs\nusing UnityEngine;\n using UnityEditor;\n\n public class MyGUITextField : IMyGUI\n {\n     public string text = \"\";\n     public GUIContent label = new GUIContent();\n\n     public void OnGUI() {\n         text = EditorGUILayout.TextField (label, text);\n     }\n } \n```", "```cs\nusing UnityEngine;\n\n public class MyGUILabel : IMyGUI {\n     private string text;\n     private bool centerFully;\n\n     public MyGUILabel(string text, bool centerFully = false) {\n         this.text = text;\n         this.centerFully = centerFully;\n     }\n\n     public void OnGUI() {\n         if (centerFully) {\n             GUILayout.BeginVertical();\n             GUILayout.FlexibleSpace();\n             GUILayout.BeginHorizontal();\n             GUILayout.FlexibleSpace();\n         }\n\n         GUILayout.Label(text);\n         if (centerFully) {\n             GUILayout.FlexibleSpace();\n             GUILayout.EndHorizontal();\n             GUILayout.FlexibleSpace();\n             GUILayout.EndVertical();\n         }\n     }\n } \n```", "```cs\nusing UnityEngine;\n using UnityEditor;\n using System.Collections.Generic;\n\n // adapted from answers.unity.com sample code posted by 'Statememt' (Dec 2013)\n // https://answers.unity.com/questions/601131/editorgui-editorguilayout-gui-guilayout-pshhh-when.html\n public class MyEditorWindow : EditorWindow\n  {\n      MyGUITextField username;\n      MyGUITextField realname;\n      MyGUIButton registerButton;\n      MyGUIFlexibleSpace flexibleSpace;\n\n      // Optional, but may be convenient.\n      List<IMyGUI> gui = new List<IMyGUI>();\n\n      [MenuItem(\"Example/Show Window\")]\n      public static void ShowWindow () {\n          GetWindow<MyEditorWindow>(\"My Reg Panel\", true);\n      }\n }\n```", "```cs\n[MenuItem(\"Example/Show Window\")]\n public static void ShowWindow () {\n  GetWindow<MyEditorWindow>(\"My Reg Panel\", true);\n } \n```", "```cs\n    void OnEnable()\n     {\n         username = new MyGUITextField ();\n         username.label.text = \"Username\";\n         username.text = \"JDoe\";\n\n         realname = new MyGUITextField ();\n         realname.label.text = \"Real name\";\n         realname.text = \"John Doe\";\n\n         registerButton = new MyGUIButton ();\n         registerButton.label.text = \"Register\";\n          // add RegisterUser() to button's OnClick event broadcaster\n         registerButton.OnClick += LogUser;\n\n         bool centerFully = true;\n         gui.Add(new MyGUILabel(\"Unity 2018 is great\", centerFully));\n\n         gui.Add (username);\n         gui.Add (realname);\n         gui.Add(new MyGUIFlexibleSpace());\n         gui.Add (registerButton);\n     } \n```", "```cs\n    void OnGUI() {\n      foreach (var item in gui)\n          item.OnGUI();\n     }\n```", "```cs\n    private void OnDisable()\n     {\n      registerButton.OnClick -= LogUser;\n     }\n\n     void LogUser()\n     {\n      var msg = \"Registering \" + realname.text + \" as \" + username.text;\n      Debug.Log (msg);\n     } \n```", "```cs\nregisterButton = new MyGUIButton ();\n registerButton.label.text = \"Register\";\n // add RegisterUser() to button's OnClick event broadcaster\n registerButton.OnClick += LogUser; \n```"]