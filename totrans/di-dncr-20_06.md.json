["```cs\n    static void Main(string[] args)\n    {\n      string name = \"Dependency Injection\";\n      SomeClass sc = new SomeClass()\n    }\n```", "```cs\n    ~Order()\n    {\n      // Destructor or Finalizer\n    }\n```", "```cs\n    public interface IDisposable\n    {\n      void Dispose();\n    }\n```", "```cs\n    var connection = new SqlConnection(\"ConnectionString\");\n    // Do Database related stuff here.\n\n    // After we are done, let's call Dispose.\n    connection.Dispose();\n```", "```cs\n     using (var connection = new SqlConnection(\"ConnectionString\"))\n    {\n      // Use the connection object and do database operation.\n    }\n```", "```cs\n    class Order\n    {\n        public string ProductName { get; set; }\n        public int Quantity { get; set; }\n\n        public Order()\n        {\n           // Default Constructor\n        }\n\n        public Order(string productName, int quantity)\n        {\n           // Constructor with two arguments\n           ProductName = productName;\n           Quantity = quantity;\n        }\n\n        public Order(Order someOrder)\n        {\n           // Copy constructor\n           ProductName = someOrder.ProductName;\n           Quantity = someOrder.Quantity;\n        }\n\n        ~Order()\n        {\n           // Destructor or Finalizer\n        }\n    }\n```", "```cs\n    protected override void Finalize()\n    {  \n      try  \n      {  \n        // Cleanup statements...  \n      }  \n      finally  \n      {  \n         base.Finalize();  \n      }  \n    }\n```", "```cs\n    class BaseClass\n    {\n      ~BaseClass()\n      {\n        System.Diagnostics.Trace.WriteLine(\"BaseClass's destructor is called.\");\n      }\n    }\n    class DeriveClass1 : BaseClass\n    {\n      ~DeriveClass1()\n      {\n        System.Diagnostics.Trace.WriteLine(\"DeriveClass1's destructor\n            is called.\");\n      }\n    }\n\n   class DeriveClass2 : DeriveClass1\n   {\n      public DeriveClass2()\n      {\n        System.Diagnostics.Trace.WriteLine(\"DeriveClass2's constructor is called.\");\n      }\n\n      ~DeriveClass2()\n      {        \n         System.Diagnostics.Trace.WriteLine(\"DeriveClass2's destructor \n          is called.\");\n      }\n   }\n\n   class Program\n  {\n    static void Main(string[] args)\n    {\n       DeriveClass2 t = new DeriveClass2();\n\n       // Unlike .NET Framework, .NET Core 2.0, as of now, \n       // does not call GC on application termination \n       // to finalise the objects.\n       // So, we are trying to manually call GC\n       // to see the output.\n       System.GC.Collect();\n    }\n  }\n```", "```cs\n    class ExampleIDisposable : IDisposable\n    {\n        public Dictionary<int, string> Chapters{ get; set; }\n        public ExampleIDisposable(Dictionary<int, string> chapters)\n        {\n           // Managed resources\n           Console.WriteLine(\"Managed Resources acquired\");\n           Chapters = chapters;\n\n           // Some Unmanaged resources\n           Console.WriteLine(\"Unmanaged Resources acquired\");\n        }\n\n        public void Dispose()\n        {\n           Console.WriteLine(\"Someone called Dispose\");\n\n           // Dispose managed resources\n           if (Chapters != null)\n           {\n              Chapters = null;\n           }\n\n          // Dispose unmanaged resources\n        }\n     }\n```", "```cs\n    static void Main(string[] args)\n   {\n      ExampleIDisposable disposable = new ExampleIDisposable(new Dictionary<int,\n        string> {{ 5, \"Object Composition\" },\n                { 6, \"Object Lifetime\" }\n        });\n\n      disposable.Dispose();\n      Console.ReadLine();\n    }\n```", "```cs\n    class ExampleIDisposable : IDisposable\n    {\n      public Dictionary<int, string> Chapters { get; set; }\n      public ExampleIDisposable(Dictionary<int, string> chapters)\n      {\n        // Managed resources\n        System.Diagnostics.Trace.WriteLine(\"Managed Resources acquired\");\n        Chapters = chapters;\n\n        // Some Unmanaged resources\n         System.Diagnostics.Trace.WriteLine(\"Unmanaged Resources acquired\");\n      }\n      public void Dispose()\n       {\n         System.Diagnostics.Trace.WriteLine(\"Someone called Dispose\");\n         Dispose(true);\n         GC.SuppressFinalize(this);\n       }\n       public void Dispose(bool disposeManagedResources)\n        {\n          if (disposeManagedResources)\n          {\n            if (Chapters != null)\n            {\n              Chapters = null;\n            }\n\n            System.Diagnostics.Trace.WriteLine(\"Managed Resources disposed\");\n          }\n          System.Diagnostics.Trace.WriteLine(\"Unmanaged Resources disposed\");\n        }\n\n        ~ExampleIDisposable()\n        {\n          System.Diagnostics.Trace.WriteLine(\"Finalizer called: Managed\n              resources will be cleaned\");\n          Dispose(false);\n        }\n      }\n```", "```cs\n    protected virtual void Dispose(bool disposeManagedResources)\n    {\n      if (disposeManagedResources)\n      {\n        if (Chapters != null)\n        {\n           Chapters = null;\n        }\n        System.Diagnostics.Trace.WriteLine(\"Managed Resources disposed\");\n      }\n      System.Diagnostics.Trace.WriteLine(\"Unmanaged Resources disposed\");\n    }\n```", "```cs\n    bool disposed = false;\n    protected virtual void Dispose(bool disposeManagedResources)\n    {\n      if (disposed)\n      {\n        System.Diagnostics.Trace.WriteLine(\"Dispose(bool) already called\");\n         return;\n      }\n      if (disposeManagedResources)\n        {\n          if (Chapters != null)\n          {\n             Chapters = null;\n          }\n          System.Diagnostics.Trace.WriteLine(\"Managed Resources disposed\");\n       }\n       System.Diagnostics.Trace.WriteLine(\"Unmanaged Resources disposed\");\n       disposed = true;\n     }\n```", "```cs\n    disposable.Dispose();\n    disposable.Dispose();\n    disposable.Dispose();\n```", "```cs\n    class ExampleIDisposable : IDisposable\n    {\n        public Dictionary<int, string> Chapters { get; set; }\n        bool disposed = false;\n\n        public ExampleIDisposable(Dictionary<int, string> chapters)\n        {\n            // Managed resources\n            System.Diagnostics.Trace.WriteLine(\"Managed Resources acquired\");\n            Chapters = chapters;\n\n            // Some Unmanaged resources\n            System.Diagnostics.Trace.WriteLine(\"Unmanaged Resources acquired\");\n        }\n\n        public void Dispose()\n        {\n           System.Diagnostics.Trace.WriteLine(\"Someone called Dispose\");\n\n           Dispose(true);\n           GC.SuppressFinalize(this);\n        }\n\n        protected virtual void Dispose(bool disposeManagedResources)\n        {\n           if (disposed)\n           {\n               System.Diagnostics.Trace.WriteLine(\"Dispose(bool) already called\");\n               return;\n           }\n\n           if (disposeManagedResources)\n           {\n              if (Chapters != null)\n              {\n                 Chapters = null;\n              }\n              System.Diagnostics.Trace.WriteLine(\"Managed Resources\n                  disposed\");\n           }\n\n           System.Diagnostics.Trace.WriteLine(\"Unmanaged Resources disposed\");\n           disposed = true;\n        }\n\n        ~ExampleIDisposable()\n        {\n          System.Diagnostics.Trace.WriteLine(\"Finalizer called: Managed \n                resources will be cleaned\");\n          Dispose(false);\n        }\n      }\n```", "```cs\n    using (ExampleIDisposable disposable = \n        new ExampleIDisposable(new Dictionary<int, string> {\n        { 5, \"Object Composition\" },\n        { 6, \"Object Lifetime\" }\n        }))\n    {\n      // Do something with the \"disposable\" object.\n    }\n```", "```cs\n    public void ConfigureServices(IServiceCollection services)\n    {\n      services.AddMvc();\n      services.AddSingleton<IExampleService, ExampleService>();\n    }\n```", "```cs\n    public interface IExampleService\n    {\n      Guid ExampleId { get; }\n    }\n\n    public interface IExampleTransient : IExampleService\n    {\n    }\n    public interface IExampleScoped : IExampleService\n    {\n    }\n    public interface IExampleSingleton : IExampleService\n    {\n    }\n    public interface IExampleSingletonInstance : IExampleService\n    {\n    }\n```", "```cs\n    using LifetimesExample.Interfaces;\n    using System;\n\n    namespace LifetimesExample.Models\n   {\n      public class Example : IExampleScoped, IExampleSingleton, \n         IExampleTransient, IExampleSingletonInstance\n      {\n        public Guid ExampleId { get; set; }\n        public Example()\n        {\n          ExampleId = Guid.NewGuid();\n        }\n        public Example(Guid exampleId)\n        {\n          ExampleId = exampleId;\n        }\n      }\n    }\n```", "```cs\n    using LifetimesExample.Interfaces;\n    namespace LifetimesExample.Services\n    {\n    public class ExampleService\n    {\n        public IExampleTransient TransientExample { get; }\n        public IExampleScoped ScopedExample { get; }\n        public IExampleSingleton SingletonExample { get; }\n        public IExampleSingletonInstance SingletonInstanceExample { get; }\n\n        public ExampleService(IExampleTransient transientExample,\n            IExampleScoped scopedExample,\n            IExampleSingleton singletonExample,\n            IExampleSingletonInstance instanceExample)\n        {\n            TransientExample = transientExample;\n            ScopedExample = scopedExample;\n            SingletonExample = singletonExample;\n            SingletonInstanceExample = instanceExample;\n        }\n      }\n    }\n```", "```cs\n    using Microsoft.AspNetCore.Mvc;\n    using LifetimesExample.Services;\n    using LifetimesExample.Interfaces;\n\n    namespace LifetimesExample.Controllers\n    {\n      public class ExampleController : Controller\n      {\n        private readonly ExampleService _exampleService;\n        private readonly IExampleTransient _transientExample;\n        private readonly IExampleScoped _scopedExample;\n        private readonly IExampleSingleton _singletonExample;\n        private readonly IExampleSingletonInstance _singletonInstanceExample;\n\n        public ExampleController(ExampleService ExampleService,\n            IExampleTransient transientExample,\n            IExampleScoped scopedExample,\n            IExampleSingleton singletonExample,\n            IExampleSingletonInstance singletonInstanceExample)\n        {\n            _exampleService = ExampleService;\n            _transientExample = transientExample;\n            _scopedExample = scopedExample;\n            _singletonExample = singletonExample;\n            _singletonInstanceExample = singletonInstanceExample;\n        }\n\n        public IActionResult Index()\n        {\n            // viewbag contains controller-requested services\n            ViewBag.Transient = _transientExample;\n            ViewBag.Scoped = _scopedExample;\n            ViewBag.Singleton = _singletonExample;\n            ViewBag.SingletonInstance = _singletonInstanceExample;\n\n            // Example service has its own requested services\n            ViewBag.Service = _exampleService;\n\n            return View();\n        }\n      }\n    }\n```", "```cs\n    @using LifetimesExample.Interfaces\n    @using LifetimesExample.Services\n\n    @{\n      ViewData[\"Title\"] = \"Index\";\n     }\n\n    @{\n      IExampleTransient transient = (IExampleTransient)ViewData[\"Transient\"];\n      IExampleTransient scoped = (IExampleTransient)ViewData[\"Scoped\"];\n      IExampleTransient singleton = (IExampleTransient)ViewData[\"Singleton\"];\n      IExampleTransient singletonInstance = (IExampleTransient)ViewData[\"SingletonInstance\"];\n      ExampleService service = (ExampleService)ViewBag.Service;\n    }\n\n    <h2>Lifetimes</h2>\n\n    <h3>ExampleController Dependencies</h3>\n    <table>\n     <tr>\n        <th>Lifestyle</th>\n        <th>Guid Value</th>\n     </tr>\n    <tr>\n        <td>Transient</td>\n        <td>@transient.ExampleId</td>\n    </tr>\n    <tr>\n        <td>Scoped</td>\n        <td>@scoped.ExampleId</td>\n    </tr>\n    <tr>\n        <td>Singleton</td>\n        <td>@singleton.ExampleId</td>\n    </tr>\n    <tr>\n        <td>Instance</td>\n        <td>@singletonInstance.ExampleId</td>\n    </tr>\n   </table>\n\n   <h3>ExampleService Dependencies</h3>\n   <table>\n    <tr>\n        <th>Lifestyle</th>\n        <th>Guid Value</th>\n    </tr>\n    <tr>\n        <td>Transient</td>\n        <td>@service.TransientExample.ExampleId</td>\n    </tr>\n    <tr>\n        <td>Scoped</td>\n        <td>@service.ScopedExample.ExampleId</td>\n    </tr>\n    <tr>\n        <td>Singleton</td>\n        <td>@service.SingletonExample.ExampleId</td>\n    </tr>\n    <tr>\n        <td>Instance</td>\n        <td>@service.SingletonInstanceExample.ExampleId</td>\n    </tr>\n  </table>\n```", "```cs\n    public void ConfigureServices(IServiceCollection services)\n    {\n        // Add framework services.\n        services.AddMvc();\n\n        services.AddTransient<IExampleTransient, Example>();\n        services.AddScoped<IExampleScoped, Example>();\n        services.AddSingleton<IExampleSingleton, Example>();\n        services.AddSingleton<IExampleSingletonInstance, Example>();\n        services.AddSingleton(new Example(Guid.Empty));\n        services.AddTransient<ExampleService, ExampleService>();\n    }\n```", "```cs\n    var serviceProvider = services.BuildServiceProvider();\n    var serviceScopeFactory = serviceProvider.GetRequiredService<\n          IServiceScopeFactory>();\n\n    IExampleScoped scopedOne;\n    IExampleScoped scopedTwo;\n\n    using (var scope = serviceScopeFactory.CreateScope())\n    {\n      scopedOne = scope.ServiceProvider.GetService<IExampleScoped>();\n    }\n    using (var scope = serviceScopeFactory.CreateScope())\n    {\n     scopedTwo = scope.ServiceProvider.GetService<IExampleScoped>();\n    }\n```", "```cs\n    public class ServiceDisposable : IDisposable {}\n    public void ConfigureServices(IServiceCollection services)\n    {\n      services.AddScoped(ServiceDisposable);\n    }\n```", "```cs\n    public class ServiceDisposable : IDisposable {}\n    public void ConfigureServices(IServiceCollection services)\n    {\n      services.AddScoped(new ServiceDisposable());\n    }\n```", "```cs\n    public interface IExampleSingleton : IExampleService\n    {\n        Guid ScopedExampleId { get; }\n        Guid TransientExampleId { get; }\n   }\n```", "```cs\n    using System;\n    namespace LifetimesExample\n    {\n      public class ExampleSingleton : IExampleSingleton\n      {\n        public Guid ExampleId { get; set; }\n        public Guid ScopedExampleId { get; set; }\n        public Guid TransientExampleId { get; set; }\n\n        public ExampleSingleton(IExampleTransient transient, IExampleScoped scoped)\n        {\n            ExampleId = Guid.NewGuid();\n            ScopedExampleId = scoped.ExampleId;\n            TransientExampleId = transient.ExampleId;\n        }\n      }\n      public class ExampleScoped : IExampleScoped\n      {\n        public Guid ExampleId { get; set; }\n\n        public ExampleScoped()\n        {\n            ExampleId = Guid.NewGuid();\n        }\n      }\n      public class ExampleTransient : IExampleTransient\n      {\n        public Guid ExampleId { get; set; }\n\n        public ExampleTransient()\n        {\n            ExampleId = Guid.NewGuid();\n        }\n       }\n     }\n```", "```cs\n    using Microsoft.AspNetCore.Mvc;\n    namespace LifetimesExample.Controllers\n    {\n      public class ExampleController : Controller\n      {\n        private readonly ExampleService _exampleService;\n        private readonly IExampleTransient _transientExample;\n        private readonly IExampleScoped _scopedExample;\n        private readonly IExampleSingleton _singletonExample;\n\n        public ExampleController(ExampleService ExampleService,\n            IExampleTransient transientExample,\n            IExampleScoped scopedExample,\n            IExampleSingleton singletonExample)\n        {\n            _exampleService = ExampleService;\n            _transientExample = transientExample;\n            _scopedExample = scopedExample;\n            _singletonExample = singletonExample;\n        }\n\n        public IActionResult SingletonDependencies()\n        {\n            ViewBag.Singleton = _singletonExample;\n\n            ViewBag.Service = _exampleService;\n\n            return View(\"Singleton\");\n        }\n      }\n    }\n```", "```cs\n  @{\n    ViewData[\"Title\"] = \"Index\";\n  }\n\n  @{\n    IExampleSingleton singleton = (IExampleSingleton)ViewData[\"Singleton\"];\n    ExampleService service = (ExampleService)ViewBag.Service;\n  }\n  <h2>Singleton Lifetime Dependencies</h2>\n\n  <h3>ExampleController</h3>\n\n  <h5><u>Singleton ExampleId: @singleton.ExampleId</u></h5>\n\n  <table>\n    <tr>\n        <th>Dependencies</th>\n        <th>Guid Value</th>\n    </tr>\n\n    <tr>\n        <td>Scoped Dependency</td>\n        <td>@singleton.ScopedExampleId</td>\n    </tr>\n    <tr>\n        <td>Transient Dependency</td>\n        <td>@singleton.TransientExampleId</td>\n    </tr>\n  </table>\n\n  <h3>ExampleService</h3>\n\n  <h5><u>Singleton ExampleId: @service.SingletonExample.ExampleId</u></h5>\n\n  <table>\n    <tr>\n        <th>Dependencies</th>\n        <th>Guid Value</th>\n    </tr>\n\n    <tr>\n        <td>Scoped Dependency</td>\n        <td>@service.SingletonExample.ScopedExampleId</td>\n    </tr>\n    <tr>\n        <td>Transient Dependency</td>\n        <td>@service.SingletonExample.TransientExampleId</td>\n    </tr>\n  </table>\n```", "```cs\npublic void ConfigureServices(IServiceCollection services)\n{\n        // Add framework services.\n        services.AddMvc();\n\n        services.AddSingleton<IExampleSingleton, ExampleSingleton>();\n        services.AddScoped<IExampleScoped, ExampleScoped>();\n        services.AddTransient<IExampleTransient, ExampleTransient>();\n\n        services.AddTransient<ExampleService, ExampleService>();\n}\n```", "```cs\npublic interface IExampleScoped : IExampleService\n{\n        Guid SingletonExampleId { get; }\n        Guid TransientExampleId { get; }\n}\n```", "```cs\n    public class ExampleScoped : IExampleScoped\n    {\n        public Guid ExampleId { get; set; }\n        public Guid SingletonExampleId { get; set; }\n        public Guid TransientExampleId { get; set; }\n\n        public ExampleScoped(IExampleTransient transient, IExampleSingleton singleton)\n        {\n          ExampleId = Guid.NewGuid();\n          SingletonExampleId = singleton.ExampleId;\n          TransientExampleId = transient.ExampleId;\n        }\n    }\n```", "```cs\n    public IActionResult ScopedDependencies()\n    {\n        ViewBag.Scoped = _scopedExample;\n\n        ViewBag.Service = _exampleService;\n\n        return View(\"Scoped\");\n    }\n```", "```cs\npublic interface IExampleTransient : IExampleService\n{\n        Guid SingletonExampleId { get; }\n        Guid ScopedExampleId { get; }\n}\n```", "```cs\npublic class ExampleTransient : IExampleTransient\n{\n        public Guid ExampleId { get; set; }\n        public Guid SingletonExampleId { get; set; }\n        public Guid ScopedExampleId { get; set; }\n\n        public ExampleTransient(IExampleSingleton singleton, IExampleScoped scoped)\n        {\n                ExampleId = Guid.NewGuid();\n                SingletonExampleId = singleton.ExampleId;\n                ScopedExampleId = scoped.ExampleId;\n        }\n}\n```", "```cs\n    public IActionResult TransientDependencies()\n   {\n        ViewBag.Transient = _transientExample;\n\n        ViewBag.Service = _exampleService;\n\n        return View(\"Transient\");\n   }\n```"]