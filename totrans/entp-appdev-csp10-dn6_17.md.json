["```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\n..\n```", "```cs\nvar app = builder.Build();\n```", "```cs\napp.UseAuthentication();\n```", "```cs\napp.UseAuthorization();\n```", "```cs\napp.UseEndpoints(endpoints =>\n```", "```cs\n{\n```", "```cs\nendpoints.MapControllerRoute(\n```", "```cs\n    name: \"default\",\n```", "```cs\n    pattern: \"{controller=Home}/{action=Index}/{id?}\");\n```", "```cs\n    endpoints.MapRazorPages();\n```", "```cs\n});\n```", "```cs\npublic class HomeController : Controller\n```", "```cs\n{\n```", "```cs\n[Authorize]\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\npublic IActionResult Privacy()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\n[Authorize]\n```", "```cs\npublic class HomeController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\n[AllowAnonymous]\n```", "```cs\npublic IActionResult Privacy()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n```", "```cs\n{\n```", "```cs\noptions.FallbackPolicy = new AuthorizationPolicyBuilder()\n```", "```cs\n        .RequireAuthenticatedUser()\n```", "```cs\n        .Build();\n```", "```cs\n});\n```", "```cs\n[Authorize(Roles =\"Admin\")]\n```", "```cs\npublic class AdminController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\n[Authorize(Roles =\"User,Support\")]\n```", "```cs\npublic class OrdersController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n  return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\n[Authorize(Roles =\"InventoryManager\")]\n```", "```cs\n[Authorize(Roles =\"Admin\")]\n```", "```cs\npublic class InventoryController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n  return View();\n```", "```cs\n}\n```", "```cs\n[Authorize(Roles =\"Admin\")]\n```", "```cs\npublic IActionResult Approve()\n```", "```cs\n{\n```", "```cs\n  return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic ActionResult Index()\n```", "```cs\n{\n```", "```cs\nif (User.IsInRole(\"Admin\"))\n```", "```cs\n{\n```", "```cs\n    // Handle your logic\n```", "```cs\n}\n```", "```cs\nreturn View();\n```", "```cs\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n```", "```cs\n{\n```", "```cs\n    options.AddPolicy(\"AdminAccessPolicy\",\n```", "```cs\n        policy => policy.RequireRole(\"Admin\"));\n```", "```cs\n});\n```", "```cs\n[Authorize(Policy =\"AdminAccessPolicy\")]\n```", "```cs\npublic class AdminController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\noptions.AddPolicy(\"OrderAccessPolicy\",\n```", "```cs\n        policy => policy.RequireRole(\"User\",\"Support\"));\n```", "```cs\n    dotnet new mvc --auth Individual -o AuthSample\n    ```", "```cs\n    {\n    var builder = WebApplication.CreateBuilder(args);\n    var connectionString = builder.Configuration.GetConnectionString(\"DefaultConnection\");\n    builder.Services.AddDbContext<ApplicationDbContext>(options =>\n        options.UseSqlite(connectionString));\n    builder.Services.AddDatabaseDeveloperPageExceptionFilter();\n    builder.Services.AddDefaultIdentity<IdentityUser>(options =>\n        options.SignIn.RequireConfirmedAccount = false)\n        .AddRoles<IdentityRole>()\n        .AddEntityFrameworkStores<ApplicationDbContext>();\n    builder.Services.AddControllersWithViews();   \n    }\n    ```", "```cs\n    //Add this method to Program.cs\n    async Task SetupRoles(IServiceProvider serviceProvider)\n    {\n    var rolemanager = serviceProvider\n        .GetRequiredService<RoleManager<IdentityRole>>();\n    string[] roles = { \"Admin\", \"Support\", \"User\" };\n    foreach (var role in roles)\n    {\n        var roleExist = await rolemanager.RoleExistsAsync(role);\n        if (!roleExist)\n        {\n            await rolemanager.CreateAsync(new \n              IdentityRole(role));\n        }\n       }\n    }\n    ```", "```cs\n    //Add this method to Program.cs\n    async Task SetupUsers(IServiceProvider serviceProvider)\n    {\n    var userManager = serviceProvider\n        .GetRequiredService<UserManager<IdentityUser>>();\n    var adminUser = await userManager.FindByEmailAsync(\"admin@abc.com\");\n    if (adminUser == null)\n    {\n        var newAdminUser = new IdentityUser\n        {\n            UserName = \"admin@abc.com\",\n            Email = \"admin@abc.com\",\n        };\n    var result = await userManager\n        .CreateAsync(newAdminUser, \"Password@123\");\n    if (result.Succeeded)\n        await userManager.AddToRoleAsync(newAdminUser, \n          \"Admin\");\n    }\n    var supportUser = await userManager\n        .FindByEmailAsync(\"support@abc.com\");\n    if (supportUser == null)\n    {\n        var newSupportUser = new IdentityUser\n        {\n            UserName = \"support@abc.com\",\n            Email = \"support@abc.com\",\n        };\n    var result = await userManager\n        .CreateAsync(newSupportUser, \"Password@123\");\n    if (result.Succeeded)\n        await userManager.AddToRoleAsync(newSupportUser, \n          \"Support\");\n    }\n    }\n    ```", "```cs\n    //\n    //\n    var app = builder.Build();\n    using (var scope = app.Services.CreateScope())\n    {\n        var services = scope.ServiceProvider;\n        await SetupRoles(services);\n        await SetupUsers(services);\n    }\n    ```", "```cs\n    [Authorize(Roles = \"Admin\")]\n    public IActionResult Admin()\n    {\n    return View(\"Index\");\n    }\n    [Authorize(Roles = \"Support\")]\n    public IActionResult Support()\n    {\n    return View(\"Index\");\n    }\n    ```", "```cs\n    <li class=\"nav-item\">\n    <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Index\">Home</a>\n    </li>\n    @if (User.IsInRole(\"Admin\"))\n    {\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Admin\">Admin</a>\n    </li>\n    }\n    @if (User.IsInRole(\"Support\"))\n    {\n    <li class=\"nav-item\">\n        <a class=\"nav-link text-dark\" asp-area=\"\" asp-controller=\"Home\" asp-action=\"Support\">Support</a>\n    </li>\n    }\n    ```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n```", "```cs\n{\n```", "```cs\n    options.AddPolicy(\"PremiumContentPolicy\",\n```", "```cs\n        policy => policy.RequireClaim(\"PremiumUser\"));\n```", "```cs\n});\n```", "```cs\n[Authorize(Policy =\"PremiumContentPolicy\")]\n```", "```cs\npublic class PremiumContentController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n        return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n```", "```cs\n{\n```", "```cs\n    options.AddPolicy(\"ExpressShippingPolicy\",\n```", "```cs\n        policy => policy.RequireClaim(ClaimTypes.Country, \n```", "```cs\n          \"US\", \"UK\", \"IN\"));\n```", "```cs\n});\n```", "```cs\n@if (User.HasClaim(x => x.Type == \"PremiumUser\"))\n```", "```cs\n{\n```", "```cs\n    <h1>Yay, you are Premium User!!!, @User.FindFirst(x => \n```", "```cs\n        x.Type == ClaimTypes.Country)?.Value</h1>\n```", "```cs\n}\n```", "```cs\nvar user = await userManager.FindByEmailAsync(\"user@abc.com\");\n```", "```cs\nif (user == null)\n```", "```cs\n{\n```", "```cs\nvar newUser = new IdentityUser\n```", "```cs\n{\n```", "```cs\n    UserName = \"user@abc.com\",\n```", "```cs\n    Email = \"user@abc.com\",\n```", "```cs\n};\n```", "```cs\nvar result = await userManager.CreateAsync(newUser, \"Password@123\");\n```", "```cs\nif (result.Succeeded)\n```", "```cs\n{\n```", "```cs\nawait userManager\n```", "```cs\n    .AddToRoleAsync(newUser, \"User\");\n```", "```cs\nawait userManager\n```", "```cs\n    .AddClaimAsync(newUser, new Claim(\"PremiumUser\", \n```", "```cs\n       \"true\"));\n```", "```cs\nawait userManager\n```", "```cs\n    .AddClaimAsync(newUser, new Claim(ClaimTypes.Country, \n```", "```cs\n       \"US\"));\n```", "```cs\nawait userManager\n```", "```cs\n                .AddClaimAsync(newUser, new Claim(ClaimTypes.DateOfBirth, \"1-5-2003\"));\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic class MinimumAgeRequirement: IAuthorizationRequirement\n```", "```cs\n{\n```", "```cs\npublic int MinimumAge { get; set; }\n```", "```cs\npublic MinimumAgeRequirement(int minimumAge)\n```", "```cs\n{\n```", "```cs\n    this.MinimumAge = minimumAge;\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic class MinimumAgeAuthorizationHandler\n```", "```cs\n: AuthorizationHandler<MinimumAgeRequirement>\n```", "```cs\n{\n```", "```cs\nprotected override Task HandleRequirementAsync(\n```", "```cs\nAuthorizationHandlerContext context,\n```", "```cs\nMinimumAgeRequirement requirement)\n```", "```cs\n{\n```", "```cs\n    if (context.User.HasClaim(\n```", "```cs\n        c => c.Type == ClaimTypes.DateOfBirth))\n```", "```cs\n    {\n```", "```cs\n        var dateOfBirth = Convert.ToDateTime(\n```", "```cs\n            context.User.FindFirst(x =>\n```", "```cs\n            x.Type == ClaimTypes.DateOfBirth).Value);\n```", "```cs\n        var age = DateTime.Today.Year - dateOfBirth.Year;\n```", "```cs\n        if (dateOfBirth > DateTime.Today.AddYears(-age)) \n```", "```cs\n          age--;\n```", "```cs\n        if (age >= requirement.MinimumAge)\n```", "```cs\n        {\n```", "```cs\n            context.Succeed(requirement);\n```", "```cs\n        }\n```", "```cs\n       else\n```", "```cs\n        {\n```", "```cs\n            context.Fail();\n```", "```cs\n        }\n```", "```cs\n    }\n```", "```cs\n            return Task.CompletedTask;\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n```", "```cs\nbuilder.Services.AddAuthorization(options =>\n```", "```cs\n{\n```", "```cs\noptions.AddPolicy(\"Over14\", policy =>\n```", "```cs\n    policy.Requirements.Add(new \n```", "```cs\n      MinimumAgeRequirement(14)));\n```", "```cs\n});\n```", "```cs\nbuilder.Services.AddSingleton<IAuthorizationHandler,\n```", "```cs\n    MinimumAgeAuthorizationHandler>();\n```", "```cs\n[Authorize(Policy =\"Over14\")]\n```", "```cs\npublic class OrdersController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n        return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic class MinimumAgePolicyProvider : IAuthorizationPolicyProvider\n```", "```cs\n{\n```", "```cs\n        const string PREFIX = \"Over\";\n```", "```cs\n        public Task<AuthorizationPolicy?> \n```", "```cs\n          GetPolicyAsync(string policyName)\n```", "```cs\n        {\n```", "```cs\n            if (policyName.StartsWith(PREFIX, \n```", "```cs\n              StringComparison.OrdinalIgnoreCase) &&\n```", "```cs\n            int.TryParse(policyName.Substring(\n```", "```cs\n              PREFIX.Length), out var age))\n```", "```cs\n            {\n```", "```cs\n                var policy = new \n```", "```cs\n                  AuthorizationPolicyBuilder();\n```", "```cs\n                policy.AddRequirements(new \n```", "```cs\n                  MinimumAgeRequirement(age));\n```", "```cs\n                return Task.FromResult \n```", "```cs\n                  <AuthorizationPolicy?>(policy.Build());\n```", "```cs\n            }\n```", "```cs\n            return \n```", "```cs\n              Task.FromResult<AuthorizationPolicy?>(null);\n```", "```cs\n        }\n```", "```cs\n}\n```", "```cs\npublic MinimumAgePolicyProvider(IOptions<AuthorizationOptions> options)\n```", "```cs\n{\n```", "```cs\nthis.BackupPolicyProvider =\n```", "```cs\n    new DefaultAuthorizationPolicyProvider(options);\n```", "```cs\n}\n```", "```cs\nPrivate DefaultAuthorizationPolicyProvider BackupPolicyProvider { get; }\n```", "```cs\npublic Task<AuthorizationPolicy> GetDefaultPolicyAsync()\n```", "```cs\n=> this.BackupPolicyProvider.GetDefaultPolicyAsync();\n```", "```cs\npublic Task<AuthorizationPolicy?> GetFallbackPolicyAsync()\n```", "```cs\n=> this.BackupPolicyProvider.GetFallbackPolicyAsync();\n```", "```cs\n[Authorize(Policy =\"Over14\")]\n```", "```cs\npublic class OrdersController : Controller\n```", "```cs\n{\n```", "```cs\n    [Authorize(Policy =\"Over18\")]\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n        return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\npublic class AuthorizeAgeOverAttribute : AuthorizeAttribute\n```", "```cs\n{\n```", "```cs\nconst string PREFIX = \"Over\";\n```", "```cs\npublic AuthorizeAgeOverAttribute(int age) => Age = age;\n```", "```cs\npublic int Age\n```", "```cs\n{\n```", "```cs\n    get\n```", "```cs\n            {\n```", "```cs\n                if \n```", "```cs\n            (int.TryParse(Policy.Substring(PREFIX.Length), \n```", "```cs\n            out var age))\n```", "```cs\n                {\n```", "```cs\n                    return age;\n```", "```cs\n                }\n```", "```cs\n                return default(int);\n```", "```cs\n            }\n```", "```cs\n            set\n```", "```cs\n            {\n```", "```cs\n                Policy = $\"{PREFIX}{value.ToString()}\";\n```", "```cs\n            }\n```", "```cs\n        }\n```", "```cs\n}\n```", "```cs\nbuilder.Services.AddSingleton<IAuthorizationHandler,\n```", "```cs\n        MinimumAgeAuthorizationHandler>();\n```", "```cs\nbuilder.Services.AddSingleton<IAuthorizationPolicyProvider,\n```", "```cs\n        MinimumAgePolicyProvider>();\n```", "```cs\n[AuthorizeAgeOver(14)]\n```", "```cs\npublic class OrdersController : Controller\n```", "```cs\n{\n```", "```cs\n[AuthorizeAgeOver(18)]\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n        return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\n    {\n    \"allowedMemberTypes\": [\n            \"User\"\n        ],\n        \"description\": \"Admin Users\",\n        \"displayName\": \"Admin\",\n        \"id\": \"6ef9b400-0219-463c-a542-5f4693c4e286\",\n        \"isEnabled\": true,\n        \"lang\": null,\n        \"origin\": \"Application\",\n        \"value\": \"Admin\"\n    }\n    ```", "```cs\n[Authorize(Roles =\"Admin\")]\n```", "```cs\npublic class AdminController : Controller\n```", "```cs\n{\n```", "```cs\npublic IActionResult Index()\n```", "```cs\n{\n```", "```cs\n    return View();\n```", "```cs\n}\n```", "```cs\n}\n```", "```cs\n<ul class=\"navbar-nav\">\n```", "```cs\n    @if (User.Identity.IsAuthenticated)\n```", "```cs\n    {\n```", "```cs\n        //// HTML code goes here\n```", "```cs\n    }\n```", "```cs\n    else\n```", "```cs\n    {\n```", "```cs\n        ////\n```", "```cs\n    }\n```", "```cs\n</ul>\n```", "```cs\n@if (User.HasClaim(x => x.Type == \"PremiumUser\"))\n```", "```cs\n{\n```", "```cs\n    <h1>Yay, you are Premium User!!!, @User.FindFirst(x => x.Type == ClaimTypes.Country)?.Value</h1>\n```", "```cs\n}\n```", "```cs\n    [AllowAnonymous]\n    public class HomeController : Controller\n    {\n          public IactionResult Index()\n    {\n        return View();\n    }\n    [Authorize(Roles =\"Support\")]\n    public IactionResult Support()\n    {\n            return View();\n    }\n    }\n    ```"]