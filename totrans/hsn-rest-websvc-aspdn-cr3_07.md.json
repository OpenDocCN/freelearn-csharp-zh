["```cs\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace SampleAPI.API.Controllers\n{\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class ValuesController : ControllerBase\n    {\n      // ...\n    }\n{\n```", "```cs\n    [Route(\"api/[controller]\")]\n    public class ValuesController : ControllerBase\n    {\n        // ...\n\n        [HttpPost]\n        public IActionResult Post([FromBody]ValueRequest request)\n        {\n            if (ModelState.IsValid) \n            {\n                return BadRequest(ModelState);\n            }\n\n            return Ok();\n        }\n\n        // ..\n    }\n```", "```cs\n    [Route(\"api/[controller]\")]\n    [ApiController]\n    public class ValuesController : ControllerBase\n    {\n        // ...\n\n        [HttpPost]\n        public IActionResult Post(ValueRequest request)\n {\n return Ok();\n }\n\n        // ..\n    }\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SampleAPI.Models\n {\n  public class Order\n     {\n         public Guid Id { get; set; }\n         public IEnumerable<string> ItemsIds { get; set; }\n     }\n }\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing SampleAPI.Models;\n\nnamespace SampleAPI.Repositories\n{\n    public interface IOrderRepository\n    {\n        IEnumerable<Order> Get();\n        Order Get(Guid orderId);\n        void Add(Order order);\n        void Update(Guid orderId, Order order);\n        Order Delete(Guid orderId);\n    }\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing SampleAPI.Models;\n\nnamespace SampleAPI.Repositories\n{\n    public class MemoryOrderRepository : IOrderRepository\n    {\n        private IList<Order> _orders { get; set; }\n\n        public MemoryOrderRepository()\n        {\n            _orders = new List<Order>();\n        }\n        public IEnumerable<Order> Get() => _orders;\n\n        public Order Get(Guid orderId)\n        {\n            return _orders.FirstOrDefault(o => o.Id == orderId);\n        }\n        public void Add(Order order)\n        {\n            _orders.Add(order);\n        }\n\n        public void Update(Guid orderId, Order order)\n        {\n            var result = _orders.FirstOrDefault(o => o.Id == orderId);\n\n            if (result != null) result.ItemsIds = order.ItemsIds;\n        }\n        public Order Delete(Guid orderId)\n        {\n            var target = _orders.FirstOrDefault(o => o.Id == orderId);\n            _orders.Remove(target);\n\n            return target;\n        }\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing SampleAPI.Repositories;\n\nnamespace SampleAPI\n{\n    public class Startup\n    {\n\n        public IConfiguration Configuration { get; }\n\n        // ..\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services\n                .AddSingleton<IOrderRepository, MemoryOrderRepository>()\n                .AddControllers();\n        }\n        // ...\n    }\n}\n```", "```cs\n...\n[Route(\"api/order\")]\n[ApiController]\npublic class OrderController : ControllerBase {}\n...\n\n```", "```cs\n...\n[Route(\"api/[controller]\")]\n[ApiController]\npublic class OrderController : ControllerBase\n...\n\n```", "```cs\nusing System;\nusing Microsoft.AspNetCore.Mvc;\nusing SampleAPI.Models;\n\nnamespace SampleAPI.Controllers\n {\n     [Route(\"api/order\")]\n     [ApiController]\n     public class OrderController : ControllerBase\n     {\n         private readonly IOrderRepository _orderRepository;\n\n         public OrderController(IOrderRepository orderRepository)\n {\n _orderRepository = orderRepository;\n }\n\n        ...\n    }\n }\n```", "```cs\n[Route(\"api/order\")]\n[ApiController]\npublic class OrderController : ControllerBase\n     {\n  private readonly IOrderRepository _orderRepository;\n\n  public OrderController(IOrderRepository orderRepository)\n  {\n     _orderRepository = orderRepository;\n  }\n\n  [HttpGet]\n public IActionResult Get()\n {\n return  Ok(_orderRepository.Get());\n }\n\n  [HttpGet(\"{id:guid}\")]\n public IActionResult GetById(Guid id)\n {\n return Ok(_orderRepository.Get(id));\n } ... \n```", "```cs\n[HttpGet]\nIActionResult Get()\n```", "```cs\n[HttpGet(\"{id:guid}\")]\nIActionResult GetById(Guid id)\n```", "```cs\n[HttpVerbAttribute(string template, [Name = string], [Order = string]]\n```", "```cs\nhttps://localhost:5001/api/order/7719c8d3-79f4-4fbd-b99a-2ff54c5783d2\n```", "```cs\nusing System;\nusing System.Collections.Generic;\nusing Microsoft.AspNetCore.Mvc;\nusing SampleAPI.Models;\nusing SampleAPI.Repositories;\n\nnamespace SampleAPI.Controllers\n{\n    [Route(\"api/order\")]\n    [ApiController]\n    public class OrderController : ControllerBase\n    {\n        private readonly IOrderRepository _orderRepository;\n\n        public OrderController(IOrderRepository ordersRepository)\n        {\n            _orderRepository = ordersRepository;\n        }\n\n        [HttpGet]\n        public IActionResult Get()\n        {\n            return Ok(_orderRepository.Get());\n        }\n\n        [HttpGet(\"{id:guid}\")]\n        public IActionResult GetById(Guid id)\n        {\n            return Ok(_orderRepository.Get(id));\n        }\n\n        [HttpPost]\n        public IActionResult Post(Order request)\n        {\n            var order = new Order()\n            {\n                Id = Guid.NewGuid(),\n                ItemsIds = request.ItemsIds\n            };\n\n            _orderRepository.Add(order);\n            return Ok();\n        }\n\n        [HttpPut(\"{id:guid}\")]\n        public IActionResult Put(Guid id, Order request)\n        {\n            var order = new Order\n            {\n                Id = id,\n                ItemsIds = request.ItemsIds\n            };\n\n            _orderRepository.Update(id, order);\n            return Ok();\n        }\n\n        [HttpDelete(\"{id:guid}\")]\n        public IActionResult Delete(Guid id)\n        {\n            _orderRepository.Delete(id);\n            return Ok();\n        }\n    }\n}\n```", "```cs\n[HttpGet]\nIActionResult Get()\n```", "```cs\n[HttpGet(\"{id:guid}\")]\nIActionResult GetById(Guid id)\n```", "```cs\n [HttpPost]\n IActionResult Post(Order request)\n```", "```cs\n[HttpPut(\"{id:guid}\")]\nIActionResult Put(Guid id, Order request)\n```", "```cs\n[HttpDelete(\"{id:guid}\")]\nIActionResult Delete(Guid id)\n```", "```cs\ncurl -X GET  https://localhost:5001/api/order  -H 'Content-Type: application/json' -k\n```", "```cs\n[]\n```", "```cs\ncurl -X POST   https://localhost:5001/api/order -H 'Content-Type: application/json' -d '' -k\n```", "```cs\n{\n  \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.1\",\n  \"title\": \"One or more validation errors occurred.\",\n  \"status\": 400,\n  \"traceId\": \"|7c58576e-47baf080f74cf2ab.\",\n  \"errors\": {\n    \"\": [\n      \"A non-empty request body is required.\"\n    ]\n  }\n}\n```", "```cs\ncurl -X GET https://localhost:5001/api/order/a54f58bc-216d-4a40-8040-bafaec68f2de -H 'Content-Type: application/json' -i -k\n```", "```cs\nHTTP/1.1 204 No Content\nDate: Fri, 17 Aug 2018 14:37:58 GMT\nServer: Kestrel\nContent-Length: 0\n\n```", "```cs\n...\n        [HttpPost]\n        public IActionResult Post(Order request)\n        {\n            var order = new Order()\n            {\n                Id = Guid.NewGuid(),\n                ItemsIds = request.ItemsIds\n            };\n\n            _orderRepository.Add(order);\n            return CreatedAtAction(nameof(GetById), new { id = order.Id }, null);\n        }\n...\n```", "```cs\ncurl -X POST https://localhost:5001/api/order/ -H 'Content-Type: application/json' -d '{\"itemsIds\": [\"1\",\"4\"]}' -i -k\n\nHTTP/1.1 201 Created\nDate: Mon, 20 Aug 2018 11:19:49 GMT\nServer: Kestrel\nContent-Length: 0\nLocation: https://localhost:5001/api/orders/372459c7-6e16-4276-b286-f341d7009c43\n```", "```cs\n...\n        [HttpPut(\"{id:guid}\")]\n        public IActionResult Put(Guid id, Order request)\n        {\n            var order = _orderRepository.Get(id);\n\n           if (order == null) \n return NotFound(new { Message = $\"Item with id {id} not exist.\" }); \n\n            order.ItemsIds = request.ItemsIds;\n\n            _orderRepository.Update(id, order);\n            return Ok();\n        }\n...\n```", "```cs\n...\n  [HttpPut(\"{id:guid}\")]\n  public IActionResult Put(Guid id, Order request)\n        {\n            if (request.ItemsIds == null) \n return BadRequest();\n...\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SampleAPI.Models\n {\n  public class Order\n     {\n         public Guid Id { get; set; }\n         public IEnumerable<string> ItemsIds { get; set; }\n         public string Currency { get; set; }\n     }\n }\n```", "```cs\ndotnet add package Microsoft.AspNetCore.JsonPatch\ndotnet add package Microsoft.AspNetCore.Mvc.NewtonsoftJson \n```", "```cs\npublic class Startup\n{\n    ...\n\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services\n            .AddSingleton<IOrderRepository, MemoryOrderRepository>()\n            .AddControllers()\n            .AddNewtonsoftJson();\n    }\n```", "```cs\n[HttpPatch(\"{id:guid}\")] \npublic IActionResult Patch(Guid id, JsonPatchDocument<Order> requestOp)\n{\n    var order = _orderRepository.Get(id);\n    if (order == null)\n    {\n        return NotFound(new { Message = $\"Item with id {id} not exist.\" });\n    }\n\n    requestOp.ApplyTo(order);\n    _orderRepository.Update(id, order);\n\n    return Ok();\n}\n```", "```cs\ncurl -X PATCH \\\n https://localhost:5001/api/order/5749c944-239c-4c0c-8549-2232cf585473 \\\n -H 'Content-Type: application/json' \\\n -d '[\n {\n \"op\": \"replace\", \"path\": \"/itemsIds\", \"value\" : [1,2]\n }\n]' -k\n```", "```cs\n[{\n    \"op\": \"add\", \"path\": \"/itemsIds\", \"value\" : [3]\n},\n{\n    \"op\": \"remove\", \"path\": \"/itemsIds\"\n}]\n```", "```cs\n[HttpDelete(\"{id:guid}\")]\npublic IActionResult Delete(Guid id)\n{\n    var order = _orderRepository.Get(id);\n\n    if (order == null)\n    {\n        return NotFound(new { Message = $\"Item with id {id} not exist.\" });\n    }\n\n    _orderRepository.Delete(id);\n    return NoContent();\n}\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SampleAPI.Models\n {\n  public class Order\n     {\n         public Guid Id { get; set; }\n         public IEnumerable<string> ItemsIds { get; set; }\n         public string Currency { get; set; }\n     }\n }\n```", "```cs\nusing System.Collections.Generic;\n\nnamespace SampleAPI.Requests\n{\n    public class OrderRequest\n    {\n        public IEnumerable<string> ItemsIds { get; set; }\n\n        public string Currency { get; set; }\n    }\n}\n```", "```cs\n     [Route(\"api/order\")]\n     [ApiController]\n     public class OrderController : ControllerBase\n     {\n\n         ...\n\n        [HttpPost]\n        public IActionResult Post(OrderRequest request)\n        {\n            var order = Map(request);\n\n            _orderRepository.Add(order);\n\n            return CreatedAtAction(nameof(GetById), new { id = order.Id }, \n            null);\n        }\n\n        ...\n\n private Order Map(OrderRequest request)\n {\n\n return new Order\n {\n Id = Guid.NewGuid(),\n ItemsIds = request.ItemsIds,\n Currency = request.Currency\n };\n }\n         ...\n```", "```cs\n         ...\n\n         [HttpPut(\"{id:guid}\")]\n         public IActionResult Put(Guid id, OrderRequest request)\n         {\n             var order = _orderRepository.Get(id);\n\n             if (order == null)\n             {\n                 return NotFound(new { Message = $\"Item with id {id} not exist.\" });\n             }\n\n             order = Map(request, order);\n\n             _orderRepository.Update(id, order);\n\n             return Ok();\n         }\n\n private Order Map(OrderRequest request, Order order)\n         {\n             order.ItemsIds = request.ItemsIds;\n             order.Currency = request.Currency;\n\n             return order;\n         } \n         ...\n```", "```cs\npublic class Order\n{\n     public Guid Id { get; set; }\n\n     public IEnumerable<string> ItemsIds { get; set; }\n\n     public string Currency;\n\n     public bool IsInactive { get; set; }\n }\n\n```", "```cs\n...\npublic class MemoryOrderRepository : IOrderRepository\n {\n\n        public IEnumerable<Order> Get() => _orders.Where(o => !o.IsInactive).ToList();\n\n        public Order Get(Guid orderId)\n        {\n            return _orders\n                .Where(o => !o.IsInactive)\n                .FirstOrDefault(o => o.Id == orderId);\n        }\n\n        public Order Delete(Guid orderId)\n        {\n            var target = _orders.FirstOrDefault(o => o.Id == orderId);\n\n            target.IsInactive = true;\n            Update(orderId, target);\n\n            return target;\n        }\n...\n\n```", "```cs\nusing System;\nusing System.Collections.Generic;\n\nnamespace SampleAPI\n{\n    public class OrderResponse\n    {\n        public Guid Id { get; set; }\n        public IEnumerable<string> ItemsIds { get; set; }\n        public string Currency { get; set; }\n    }\n}\n```", "```cs\n ...\n\n public class OrderController : ControllerBase\n {\n\n     ...\n\n     [HttpGet]\n     public IActionResult Get()\n     {\n\n         return Ok(Map(_orderRepository.Get()));\n     }\n\n     [HttpGet(\"{id:guid}\")]\n     public IActionResult GetById(Guid id)\n     {\n         return Ok(Map(_orderRepository.Get(id)));\n     }\n\n    ...\n\n     private IEnumerable<OrderResponse> Map(IEnumerbale<Order> orders)\n {\n return orders.Select(Map).ToList();\n }\n\n private OrderResponse Map(Order order)\n {\n return new OrderResponse\n {\n Id = order.Id,\n ItemsIds = order.ItemsIds,\n Currency = order.Currency\n };\n }\n } \n```", "```cs\nusing System.Collections.Generic;\n\nnamespace SampleAPI.Requests\n{\n    public class OrderRequest\n    {\n        public IEnumerable<string> ItemsIds { get; set; }\n        public string Currency { get; set; }\n    }\n}\n```", "```cs\n{\n    \"ItemsIds\": [\n        \"The ItemsIds field is required.\"\n    ]\n}\n```", "```cs\n   public class OrderRequest\n     {\n         [Required]\n         public IEnumerbale<string> ItemsIds { get; set; }\n         [Required]\n [StringLength(3)]\n         public string Currency {get; set;} \n     }\n\n```", "```cs\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\n\nnamespace SampleAPI.Requests\n{\n    public class CurrencyAttribute : ValidationAttribute\n    {\n        private readonly IList<string> _acceptedCurrencyCodes = \n        new List<string>{\n            \"EUR\",\n            \"USD\",\n            \"GBP\"\n        };\n\n        protected override ValidationResult IsValid(object value, \n        ValidationContext validationContext)\n        {\n            return _acceptedCurrencyCodes.Any(c => c == value.ToString()) ?\n                ValidationResult.Success \n                : new ValidationResult($\"{validationContext.MemberName} is \n                not an accepted currency\");\n        }\n    }\n}\n```"]