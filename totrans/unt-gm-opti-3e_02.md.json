["```cs\nt:<monobehaviour name>\n```", "```cs\nvoid DoSomethingCompletelyStupid() { \n  Profiler.BeginSample(\"My Profiler Sample\");  \n  List<int> listOfInts = new List<int>();  \n  for(int i = 0; i < 1000000; ++i) {    \n    listOfInts.Add(i);  \n  }\n  Profiler.EndSample();\n}\n```", "```cs\nusing System;\nusing System.Diagnostics;\n\npublic class CustomTimer : IDisposable {\n  private string _timerName;\n  private int _numTests;\n  private Stopwatch _watch;\n\n  // give the timer a name, and a count of the \n  // number of tests we're running\n  public CustomTimer(string timerName, int numTests) {\n    _timerName = timerName;\n    _numTests = numTests;\n    if (_numTests <= 0) {\n      _numTests = 1;\n    }\n    _watch = Stopwatch.StartNew();\n  }\n\n    // automatically called when the 'using()' block ends\n    public void Dispose() {\n    _watch.Stop();\n    float ms = _watch.ElapsedMilliseconds;\n    UnityEngine.Debug.Log(string.Format(\"{0} finished: {1:0.00} \" + \n        \"milliseconds total, {2:0.000000} milliseconds per-test \" + \n        \"for {3} tests\", _timerName, ms, ms / _numTests, _numTests));\n    }\n}\n```", "```cs\nconst int numTests = 1000;\nusing (new CustomTimer(\"My Test\", numTests)) {\n  for(int i = 0; i < numTests; ++i) {\n    TestFunction();\n  }\n} // the timer's Dispose() method is automatically called here\n```", "```cs\nif (Input.GetKeyDown(KeyCode.Space)) {\n  const int numTests = 1000;\n  using (new CustomTimer(\"Controlled Test\", numTests)) {\n    for(int i = 0; i < numTests; ++i) {\n      TestFunction();\n    }\n  }\n}\n```"]