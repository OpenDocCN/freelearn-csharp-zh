- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Started with GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [*Chapter 11*](B18971_11.xhtml#_idTextAnchor438), we explored how to create
    a gRPC service in ASP.NET Core. gRPC is a high-performance RPC framework that
    facilitates communication between services. We discussed the field types used
    in protobuf messages, and how to define four types of gRPC services: unary, server
    streaming, client streaming, and bidirectional streaming. Additionally, we learned
    how to configure gRPC services in ASP.NET Core and how to call gRPC services from
    a client application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will explore another shape of web APIs: GraphQL. GraphQL is a query-based
    API that allows clients to specify the data they need, which solves the problem
    of over-fetching and under-fetching data. Besides, GraphQL supports **mutations**,
    which allow clients to modify data. In this chapter, we will learn about some
    basic concepts of GraphQL and how to create a GraphQL API in ASP.NET Core. We
    will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Recap of GraphQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a GraphQL API using HotChocolate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding mutations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using variables in queries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a GraphQL schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving related objects using resolvers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using data loaders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dependency injection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interfaces and union types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filtering, sorting, and paging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visualizing the GraphQL schema
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After reading this chapter, you will be able to understand the basic concepts
    of GraphQL and how to create a GraphQL API in ASP.NET Core. You will also learn
    how to use Apollo Federation to build a microservices-based GraphQL API.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code examples in this chapter can be found at [https://github.com/PacktPublishing/Web-API-Development-with-ASP.NET-Core-8/tree/main/samples/chapter12](https://github.com/PacktPublishing/Web-API-Development-with-ASP.NET-Core-8/tree/main/samples/chapter12).
    You can use VS 2022 or VS Code to open the solutions.
  prefs: []
  type: TYPE_NORMAL
- en: Recap of GraphQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: GraphQL offers a flexible way to query and mutate data. The main difference
    between GraphQL and REST is that GraphQL allows clients to specify the data they
    need, whereas REST APIs return a fixed set of data. GraphQL treats data as a graph,
    and it uses a query language to define the shape of the data. This addresses the
    issues of over-fetching and under-fetching data by enabling clients to specify
    their data requirements. Additionally, it supports mutations, empowering clients
    to modify data as needed.
  prefs: []
  type: TYPE_NORMAL
- en: While REST APIs have multiple endpoints for different resources, GraphQL is
    typically served over a single endpoint, usually `/graphql`, which exposes a schema
    that describes the data. All queries and mutations are sent to this endpoint.
    The schema is defined using a GraphQL Schema Definition Language, which is the
    contract between the client and the server. The schema defines the types of data
    and the operations that can be performed on the data. The client can use the schema
    to validate the query and mutation requests.
  prefs: []
  type: TYPE_NORMAL
- en: GraphQL can solve the problem of over-fetching and under-fetching data for clients.
    However, the backend development is more complex than REST APIs. GraphQL uses
    resolvers to fetch data from different levels of the graph. If the implementation
    of the resolvers is not efficient, it can lead to performance issues. GraphQL
    also has a steep learning curve for developers who are not familiar with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'ASP.NET Core does not have built-in support for GraphQL. However, several third-party
    libraries can be used to create GraphQL APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '**HotChocolate**: HotChocolate is an open-source GraphQL server for .NET. It
    is built on top of ASP.NET Core and supports the newest GraphQL October 2021 specification.
    It is supported by ChilliCream, a company that provides GraphQL tooling and consulting
    services. ChilliCream also provides other products, such as Banana Cake Pop, which
    is a GraphQL IDE to create and test GraphQL queries, and Strawberry Shake, which
    is a GraphQL client library for .NET. You can find more information about HotChocolate
    at [https://chillicream.com/docs/hotchocolate/](https://chillicream.com/docs/hotchocolate/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GraphQL.NET**: GraphQL.NET is another open-source GraphQL implementation
    for .NET. It provides a set of libraries that can be used to create GraphQL APIs
    and clients. You can find more information about GraphQL.NET at [https://graphql-dotnet.github.io/](https://graphql-dotnet.github.io/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will use HotChocolate to create a GraphQL API in ASP.NET
    Core.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a GraphQL API using HotChocolate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To begin with, you can download the code example named `SchoolManagement` for
    this chapter from the `chapter12\start` folder. This sample project has some basic
    code for an `AppDbContext` class and a `Teacher` class, as well as some seed data.
    The `Teacher` class has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can open the project in VS Code or VS 2022\. We will integrate `HotChocolate`
    into the project to create a GraphQL API following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `HotChocolate.AspNetCore` NuGet package to the project. This package
    contains the ASP.NET Core integration for HotChocolate. It also contains the GraphQL
    IDE, which is a GraphQL client that can be used to create and test GraphQL queries.
    You can use the following command to add the package to the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class Query{    public async Task<List<Teacher>> GetTeachers([Service]
    AppDbContext context) =>        await context.Teachers.ToListAsync();}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we need to register the query root type in the `Program.cs` file. Add
    the following code after the `AddDbContext()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we need to map the GraphQL endpoint to expose the GraphQL schema. Add
    the following code to the `Program.cs` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project using `dotnet run` and open the GraphQL IDE at `https://localhost:7208/graphql/`.
    You should see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.1 – The Banana Cake Pop GraphQL IDE](img/B18971_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – The Banana Cake Pop GraphQL IDE
  prefs: []
  type: TYPE_NORMAL
- en: The GraphQL IDE allows you to create and test GraphQL queries.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The default launch URL is `swagger` for ASP.NET Core web API projects. You can
    change the launch URL in the `launchSettings.json` file to `graphql` to open the
    GraphQL IDE directly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Browse Schema** button, then click the **Schema Definition** tab
    to view the GraphQL schema. You should see the following schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding schema defines a query root type, `Query`, and a `Teacher` type.
    The `Query` type has one field named `teachers`, which returns a `[Teacher!]!`
    object. GraphQL uses `!` to indicate that the field is non-nullable. By default,
    all fields are nullable. `[Teacher!]!` means that this field is a non-nullable
    array of non-nullable `Teacher` objects. When there is no data, the field will
    return an empty array.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Teacher` type has a few fields: `id`, `firstName`, `lastName`, `email`,
    `phone`, and `bio`. The `id` field is of the `UUID` type, which is a scalar type
    that represents a 128-bit `firstName`, `lastName`, `email`, `phone`, and `bio`
    fields are of the `String` type. The client can specify which fields to be returned
    in the query.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let us try to query the data. Click the **Create Document** button to create
    a new query. You can use the following query to get all teachers:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding query will return all teachers in the database, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Querying all teachers](img/B18971_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Querying all teachers
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add or remove fields in the query to specify the data to be returned.
    For example, to show a list of teachers on a web page, we do not need to return
    the `id` field and the `bio` field. We can remove the `bio` field from the query
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding query will return those four fields only, which reduces the payload
    size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, we have created a GraphQL API using HotChocolate. We have also learned
    how to query data using GraphQL queries. Next, we will learn how to modify data
    using mutations.
  prefs: []
  type: TYPE_NORMAL
- en: Adding mutations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to create a GraphQL API using HotChocolate.
    We added a query root type to query data. In this section, we will discuss how
    to modify data using mutations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Mutations are used to modify data in GraphQL. A mutation consists of three
    parts:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Input` suffix following the convention, such as `AddTeacherInput`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Payload` suffix following the convention, such as `AddTeacherPayload`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AddTeacherAsync`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let us add a mutation to create a new teacher. We will use the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an `AddTeacherInput` class in the `GraphQL/Mutations` folder, as shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `AddTeacherInput` class is a record type that defines the input data for
    the `AddTeacherAsync` mutation. The `Id` property is not included in the input
    data because it will be generated by the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add an `AddTeacherPayload` class in the `GraphQL/Mutations` folder, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `AddTeacherPayload` class defines the data that will be returned after the
    mutation is executed. It has a `Teacher` property of the `Teacher` type.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to add the actual mutation to execute the operation. Add the
    `Mutation` class to the `GraphQL/Mutations` folder, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Mutation` class has one method named `AddTeacherAsync`, which takes an
    `AddTeacherInput` object as the input data and returns an `AddTeacherPayload`
    object. The `AddTeacherAsync()` method creates a new `Teacher` object and adds
    it to the database. Then, it returns an `AddTeacherPayload` object that contains
    the newly created `Teacher` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to register the mutation in the `Program.cs` file. Add the `AddMutationType`
    method after the `AddQueryType()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the project using `dotnet run` and open the GraphQL IDE. Check the schema
    definition and you should see the following mutation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding schema defines a mutation named `addTeacher`, which reflects the
    types and methods we defined in the `Mutation` class. Note that the `AddTeacherInput`
    type is an input type, so it uses the `input` keyword instead of `type`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the **Create Document** button to create a new query. You can use the
    following mutation to create a new teacher:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding mutation will create a new teacher and return the `id` property
    of the newly created teacher, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Creating a new teacher](img/B18971_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Creating a new teacher
  prefs: []
  type: TYPE_NORMAL
- en: Then, you can query the data to verify that the new teacher has been added to
    the database.
  prefs: []
  type: TYPE_NORMAL
- en: Using variables in queries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we learned how to query data and modify data using
    GraphQL queries and mutations. In this section, we will discuss how to use variables
    in queries.
  prefs: []
  type: TYPE_NORMAL
- en: 'GraphQL allows you to use variables in queries. This is useful when you want
    to pass parameters to the query. We can create a query that accepts an `id` parameter
    and returns the teacher with the specified ID. Follow these steps to create the
    query:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `GetTeacher()` method in the `Query` class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code adds a `GetTeacher()` method to the `Query` class. It takes
    an `id` parameter and returns the teacher with the specified ID.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, you can use the `$` sign to define a variable in the query. For example,
    you can use the following query to get a teacher by ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding query defines a variable named `id` of the `UUID!` type. The
    `!` sign indicates that the variable is non-nullable. The `teacher` field takes
    the `id` variable as the parameter and returns the teacher with the specified
    ID. In the `id` variable to pass the value to the query, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can define multiple variables in the query. Note that variables must be
    scalars, enums, or input object types.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a GraphQL schema
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, a system has multiple types of data. For example, a school management
    system has teachers, students, departments, and courses. A department has multiple
    courses, and a course has multiple students. A teacher can teach multiple courses,
    and a course can be taught by multiple teachers as well. In this section, we will
    discuss how to define a GraphQL schema with multiple types of data.
  prefs: []
  type: TYPE_NORMAL
- en: Scalar types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scalar types are the primitive types in GraphQL. The following table lists
    the scalar types in GraphQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scalar type** | **Description** | **.****NET type** |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Int` | Signed 32-bit integer | `int` |'
  prefs: []
  type: TYPE_TB
- en: '| `Float` | Signed double-precision floating-point value specified in IEEE
    754 | `float` or `double` |'
  prefs: []
  type: TYPE_TB
- en: '| `String` | UTF‐8 character sequence | `string` |'
  prefs: []
  type: TYPE_TB
- en: '| `Boolean` | `true` or `false` | `bool` |'
  prefs: []
  type: TYPE_TB
- en: '| `ID` | A unique identifier, serialized as a string | `string` |'
  prefs: []
  type: TYPE_TB
- en: Table 12.1 – Scalar types in GraphQL
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides the preceding scalar types, `HotChocolate` also supports the following
    scalar types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Byte`: Unsigned 8-bit integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ByteArray`: Byte array that is encoded as a Base64 string'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Short`: Signed 16-bit integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Long`: Signed 64-bit integer'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Decimal`: Signed decimal value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Date`: ISO-8601 date'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TimeSpan`: ISO-8601 time duration'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DateTime`: A custom GraphQL scalar defined by the community at [https://www.graphql-scalars.com/](https://www.graphql-scalars.com/).
    It is based on RFC3339\. Note that this `DateTime` scalar uses an offset to UTC
    instead of a time zone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Url`: URL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Uuid`: GUID'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Any`: A special type that is used to represent any literal or output type'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are more scalar types that are not listed here. You can find more information
    about the scalar types at [https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/scalars](https://chillicream.com/docs/hotchocolate/v13/defining-a-schema/scalars).
  prefs: []
  type: TYPE_NORMAL
- en: 'GraphQL supports enumerations as well. Enumeration types in GraphQL are a special
    kind of scalar type. They are used to represent a fixed set of values. .NET supports
    enumeratiopn types very well so that you can use the .NET `enum` type directly
    in GraphQL. You can define an enumeration type as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code defines an enumeration type named `CourseType` with three
    values: `Core`, `Elective`, and `Lab`. The generated GraphQL schema is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: HotChocolate automatically converts the enumeration values to uppercase according
    to the GraphQL specification.
  prefs: []
  type: TYPE_NORMAL
- en: Object types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The object type is the most common type in GraphQL. It can contain simple scalar
    types such as `Int`, `String`, and `Boolean`, as well as other object types. For
    example, a `Teacher` type can contain the `Department` type, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code defines a `Teacher` type and a `Department` type. The `Teacher`
    type has a `Department` property of the `Department` type. HotChocolate will generate
    the schema as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As we mentioned in the previous section, all the fields in GraphQL are nullable
    by default. If we want to make a field non-nullable, we can use the `!` sign.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object type can contain a list of other object types. For example, a `Department`
    type can contain a list of `Teacher` objects, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated schema is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `teachers` field is a non-nullable array of non-nullable `Teacher` objects.
    If we want to make the `teachers` field nullable, we can use the `?` sign as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The generated schema is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The preceding schema means that the `teachers` field is a nullable array of
    non-nullable `Teacher` objects. When there is no data, the `teachers` field will
    return `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look back at the `Query` type and the `Mutation` type we defined in
    the previous sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: These two types look like regular object types, but they have special meanings
    in GraphQL. The `Query` type and the `Mutation` type are two special object types
    in GraphQL, as they define the entry points of the GraphQL API. Every GraphQL
    service must have a `Query` type, but may or may not have a `Mutation` type. So
    the `teachers` query is actually a field of the `Query` type, just like the `department`
    field in the `teacher` type. Mutations work in the same way.
  prefs: []
  type: TYPE_NORMAL
- en: So far, the GraphQL types are similar to C# types. If you are familiar with
    object-oriented programming, you should be able to understand the GraphQL types
    easily. Similar to C#, GraphQL supports interfaces as well. But before we delve
    into interfaces, Let's discuss how to retrieve the `Department` object when querying
    the `Teacher` object.
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving related objects using resolvers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous section, we defined a `Teacher` type and a `Department` type.
    The `Teacher` type has a `Department` property of the `Department` type. When
    querying the `Teacher` object, we may also want to retrieve the `Department` object.
    How can we do that?
  prefs: []
  type: TYPE_NORMAL
- en: 'You may think that we can use the `Include()` method to retrieve the `Department`
    object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can query the `Department` object as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'It does work and you will see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: But this is not the best way to do it. Remember that GraphQL allows clients
    to specify the data they need. If the query does not specify the `department`
    field, the `Department` object will still be retrieved from the database. This
    is not efficient. We should only retrieve the `Department` object when the `department`
    field is specified in the query. That leads us to the concept of resolvers.
  prefs: []
  type: TYPE_NORMAL
- en: A resolver is a function that is used to retrieve data from somewhere for a
    specific field. The resolver is executed when the field is requested in the query.
    The resolver can fetch data from a database, a web API, or any other data source.
    It will drill down the graph to retrieve the data for the field. For example,
    when the `department` field is requested in the `teachers` query, the resolver
    will retrieve the `Department` object from the database. But when the query does
    not specify the `department` field, the resolver will not be executed. This can
    avoid unnecessary database queries.
  prefs: []
  type: TYPE_NORMAL
- en: Field resolvers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'HotChocolate supports three ways to define schemas:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Get` prefix or an `Async` suffix, these prefixes or suffixes will be removed
    from the name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Code-first**: This approach allows you to define the schema using explicit
    types and resolvers. It uses the Fluent API to define the details of the schema.
    This approach is more flexible when you need to customize the schema.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Schema-first**: This approach allows you to define the schema using the GraphQL
    schema definition language. If you are familiar with GraphQL, you can use this
    approach to define the schema directly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you, our readers, are mostly .NET developers, we will use the code-first
    approach to define the schema in the rest of this chapter, so we can benefit from
    the Fluent API to fine-tune the schema.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look back at the `teacher` query we defined in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding is the annotation-based approach. HotChocolate automatically
    converts the `GetTeacher()` method to a resolver named `teacher`. Next, we want
    to retrieve the `Department` object when the `department` field is requested.
    Let us make some changes by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we need to define `TeacherType` class as a GraphQL object. Create a
    `TeacherType` class in the `Types` folder. The code is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `TeacherType` class inherits from the `ObjectType<Teacher>` class, which
    has a `Configure()` method to configure the GraphQL object and specify how to
    resolve the fields. In the preceding code, we use the code-first approach to define
    the `Department` field of `TeacherType`. The `Name` method is used to specify
    the name of the field. If the name of the field is the same as the name of the
    property following the convention, we can omit the `Name` method. By convention,
    the `Department` field will be converted to the `department` field in the schema.
    Then, we use the `Description` method to define the description of the field.
    The description will be shown in the GraphQL IDE.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Then, we use the `Resolve()` method to define the resolver. The resolver retrieves
    the `Department` object from the database using the `DepartmentId` property of
    the `Teacher` object. Note that we use the `context.Parent<Teacher>()` method
    to get the `Teacher` object because the `Teacher` object is the parent object
    of the `Department` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: As we know the `Query` type is a special object type, we will create a `QueryType`
    class as well. Create a new `Types` folder in the `GraphQL` folder and move the
    `Query.cs` file to this `Types` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Remove the `GetTeacher()` method and add a property as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a new class named `QueryType`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code defines the root query type. In this query type, we specify
    the type of the field to be `TeacherType`. Next, we use the `Argument()` method
    to define the `id` argument, which is a non-nullable `UUID` type. Then, we use
    the `Resolve()` method to define the resolver. The resolver takes the `id` argument
    and retrieves the `Teacher` object from the database. Note that `AppDbContext`
    is injected into the resolver from the `context` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, we need to update the `Program.cs` file to register `QueryType`. Update
    the `Program.cs` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We use `QueryType` to replace the `Query` type we defined previously so that
    we can use the resolver to retrieve the `Department` object when the `department`
    field is requested.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, we can test the resolvers. Run the application using `dotnet run` and send
    the following request to query a teacher.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This is the GraphQL request:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see the department information in the response. Also, if you check
    the log, you will see that the `Department` object is retrieved from the database.
    If you remove the `department` field from the query, you will only see one database
    query in the log, which means that GraphQL does not fetch the `Department` object
    from the database.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In this example, we defined a resolver using a delegate method. We can also
    define a resolver in a separate class. For example, we can define a `TeacherResolver`
    class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code defines a `GetDepartment()` method that takes a `Teacher`
    object as the parent object and returns the `Department` object. Then, we can
    use the `ResolveWith``()` method to define the resolver in the `TeacherType` class,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Now, the logic of the resolver is moved to a separate class. This approach is
    more flexible when the resolver is complex. But for simple resolvers, we can use
    the delegate method directly.
  prefs: []
  type: TYPE_NORMAL
- en: So far, it works well. Let us try to update the `GetTeachers` method using the
    same approach in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Resolver for a list of objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similarly, we can use `ListType<TeacherType>` to define the `teachers` field
    and then use the `Resolve()` method to define the resolver. The `ListType` class
    is a wrapper type for the fluent code-first API. It is used to define a list of
    objects. Remove the `GetTeachers()` method in the `Query` class and add a `Teachers`
    field, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, configure the `Teachers` field in the `QueryType` class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code defines the `Teachers` field of `QueryType`. It uses `ListType<TeacherType>`
    to define a list of `TeacherType`. Then, it uses the `Resolve()` method to define
    the resolver. The resolver retrieves all the `Teacher` objects from the database.
    This code is similar to the `teacher` field we defined previously. However, it
    retrieves a list of `TeacherType` objects instead of a single `TeacherType` object.
    As `TeacherType` has a resolver for the `Department` field, we can retrieve the
    `Department` object for each `TeacherType` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can test the `teachers` field using the following query:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'However, you may encounter an error in the response. Some teachers can be retrieved
    correctly, but some may not. The error message is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This is because we have multiple resolvers that execute database queries concurrently.
    However, `AppDbContext` is registered as a scoped service, and the `AppDbContext`
    class is not thread-safe. When multiple resolvers try to query the database in
    parallel, they will use the same `AppDbContext` instance, which causes the error.
  prefs: []
  type: TYPE_NORMAL
- en: 'To fix this issue, we need to make sure that the resolvers do not access the
    same `AppDbContext` instance concurrently. There are two ways to do that. One
    is to execute the resolvers sequentially, and the other is to use separate `AppDbContext`
    instances for each resolver. HotChocolate provides a `RegisterDbContext<TDbContext>()`
    method to manage `DbContext` for resolvers. In order to use this feature, we need
    to install a NuGet package named `HotChocolate.Data.EntityFramework` using the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services    .AddGraphQLServer()
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterDbContext<AppDbContext>()
  prefs: []
  type: TYPE_NORMAL
- en: // Omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services.AddPooledDbContextFactory<AppDbContext>(options =>    options.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection")));//
    Register the GraphQL servicesbuilder.Services    .AddGraphQLServer()    .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)    //
    Omitted for brevity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Teachers)    // Omitted for brevity    .Type<ListType<TeacherType>>()    .Resolve(async
    context =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    teachers = await dbContext.Teachers.ToListAsync();        return teachers;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Department)    .Description("This is the department
    to which the teacher belongs.")    .Resolve(async context =>    {        var dbContextFactory
    = context.Service<IDbContextFactory<AppDbContext>>();        await using var dbContext
    = await dbContextFactory.CreateDbContextAsync();        var department = await
    dbContext.Departments            .FindAsync(context.Parent<Teacher>().DepartmentId);        return
    department;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class Department{    public Guid Id { get; set; }    public string Name
    { get; set; } = string.Empty;    public string? Description { get; set; }    public
    List<Teacher> Teachers { get; set; } = new();}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class DepartmentType : ObjectType<Department>{    protected override
    void Configure(IObjectTypeDescriptor<Department> descriptor)    {        descriptor.Field(x
    => x.Teachers)            .Description("This is the list of teachers in the department.")            .Type<ListType<TeacherType>>()            .ResolveWith<DepartmentResolvers>(x
    => x.GetTeachers(default, default));    }}public class DepartmentResolvers{    public
    async Task<List<Teacher>> GetTeachers([Parent] Department department,        [Service]
    IDbContextFactory<AppDbContext> dbContextFactory)    {        await using var
    dbContext = await dbContextFactory.CreateDbContextAsync();        var teachers
    = await dbContext.Teachers.Where(x => x.DepartmentId == department.Id).ToListAsync();        return
    teachers;    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class Query{    // Omitted for brevity    public List<DepartmentType>
    Departments { get; set; } = new();}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Departments)    .Description("This is the list of departments
    in the school.")    .Type<ListType<DepartmentType>>()    .Resolve(async context
    =>    {        var dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        await
    using var dbContext = await dbContextFactory.CreateDbContextAsync();        var
    departments = await dbContext.Departments.ToListAsync();        return departments;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: query{   departments{    id    name    description    teachers{      id      firstName      lastName      bio    }   }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (3ms) [Parameters=[@__department_Id_0=''?'' (DbType = Guid)], CommandType=''Text'',
    CommandTimeout=''30'']      SELECT [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email],
    [t].[FirstName], [t].[LastName], [t].[Phone]      FROM [Teachers] AS [t]      WHERE
    [t].[DepartmentId] = @__department_Id_0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class DepartmentByTeacherIdBatchDataLoader(       IDbContextFactory<AppDbContext>
    dbContextFactory,       IBatchScheduler batchScheduler,       DataLoaderOptions?
    options = null)       : BatchDataLoader<Guid, Department>(batchScheduler, options){    protected
    override async Task<IReadOnlyDictionary<Guid, Department>> LoadBatchAsync(IReadOnlyList<Guid>    keys,        CancellationToken
    cancellationToken)    {        await using var dbContext = await dbContextFactory.CreateDbContextAsync(cancellationToken);        var
    departments = await dbContext.Departments.Where(x => keys.Contains(x.Id))            .ToDictionaryAsync(x
    => x.Id, cancellationToken);        return departments;    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class TeacherResolvers{    public async Task<Department> GetDepartment([Parent]
    Teacher teacher,        DepartmentByTeacherIdBatchDataLoader departmentByTeacherIdBatchDataLoader,
    CancellationToken cancellationToken)    {        var department = await departmentByTeacherIdBatchDataLoader.LoadAsync(teacher.DepartmentId,    cancellationToken);        return
    department;    }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (108ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email], [t].[FirstName], [t].[LastName],
    [t].   [Phone]      FROM [Teachers] AS [t]info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed
    DbCommand (73ms) [Parameters=[@__keys_0=''?'' (Size = 4000)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [d].[Id], [d].[Description], [d].[Name]      FROM [Departments] AS [d]      WHERE
    [d].[Id] IN (          SELECT [k].[value]          FROM OPENJSON(@__keys_0) WITH
    ([value] uniqueidentifier ''$'') AS [k]      )'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class TeachersByDepartmentIdDataLoader(       IDbContextFactory<AppDbContext>
    dbContextFactory,       IBatchScheduler batchScheduler,       DataLoaderOptions?
    options = null)       : GroupedDataLoader<Guid, Teacher>(batchScheduler, options){    protected
    override async Task<ILookup<Guid, Teacher>> LoadGroupedBatchAsync(IReadOnlyList<Guid>
    keys,        CancellationToken cancellationToken)    {        await using var
    dbContext = await dbContextFactory.CreateDbContextAsync(cancellationToken);        var
    teachers = await dbContext.Teachers.Where(x => keys.Contains(x.DepartmentId))            .ToListAsync(cancellationToken);        return
    teachers.ToLookup(x => x.DepartmentId);    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class DepartmentResolvers{    public async Task<List<Teacher>> GetTeachers([Parent]
    Department department,        TeachersByDepartmentIdDataLoader teachersByDepartmentIdDataLoader,
    CancellationToken cancellationToken)    {        var teachers = await teachersByDepartmentIdDataLoader.LoadAsync(department.Id,
    cancellationToken);        return teachers.ToList();    }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (38ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [d].[Id], [d].[Description], [d].[Name]      FROM [Departments] AS [d]info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed
    DbCommand (36ms) [Parameters=[@__keys_0=''?'' (Size = 4000)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [t].[Id], [t].[Bio], [t].[DepartmentId], [t].[Email], [t].[FirstName], [t].[LastName],
    [t].[Phone]      FROM [Teachers] AS [t]      WHERE [t].[DepartmentId] IN (          SELECT
    [k].[value]          FROM OPENJSON(@__keys_0) WITH ([value] uniqueidentifier ''$'')
    AS [k]      )'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public interface ITeacherService{
  prefs: []
  type: TYPE_NORMAL
- en: Task<Department> GetDepartmentAsync(Guid departmentId);
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Teacher>> GetTeachersAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<Teacher> GetTeacherAsync(Guid teacherId);
  prefs: []
  type: TYPE_NORMAL
- en: // Omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class TeacherService(IDbContextFactory<AppDbContext> contextFactory)
    : ITeacherService'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<Department> GetDepartmentAsync(Guid departmentId)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var department = await dbContext.Departments.FindAsync(departmentId);
  prefs: []
  type: TYPE_NORMAL
- en: return department ?? throw new ArgumentException("Department not found", nameof(departmentId));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<List<Teacher>> GetTeachersAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var teachers = await dbContext.Teachers.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return teachers;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<Teacher> GetTeacherAsync(Guid teacherId)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var teacher = await dbContext.Teachers.FindAsync(teacherId);
  prefs: []
  type: TYPE_NORMAL
- en: return teacher ?? throw new ArgumentException("Teacher not found", nameof(teacherId));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services.AddScoped<ITeacherService, TeacherService>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: public async Task<List<Teacher>> GetTeachersWithDI([Service] ITeacherService
    teacherService) =>    await teacherService.GetTeachersAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services    .AddGraphQLServer()
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterService<ITeacherService>()
  prefs: []
  type: TYPE_NORMAL
- en: .AddQueryType<QueryType>()
  prefs: []
  type: TYPE_NORMAL
- en: .AddMutationType<Mutation>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: public async Task<List<Teacher>> GetTeachersWithDI(ITeacherService teacherService)
    =>    await teacherService.GetTeachersAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: public async Task<List<Teacher>> GetTeachersWithDI([Service(ServiceKind.Resolver)]
    ITeacherService teacherService) =>    await teacherService.GetTeachersAsync();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services    .AddGraphQLServer()
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)
  prefs: []
  type: TYPE_NORMAL
- en: .RegisterService<ITeacherService>(ServiceKind.Resolver)
  prefs: []
  type: TYPE_NORMAL
- en: .AddQueryType<QueryType>()
  prefs: []
  type: TYPE_NORMAL
- en: .AddMutationType<Mutation>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: descriptor.Field(x => x.Teachers)    .Description("This is the list of teachers
    in the school.")
  prefs: []
  type: TYPE_NORMAL
- en: .Type<ListType<TeacherType>>()
  prefs: []
  type: TYPE_NORMAL
- en: .Resolve(async context =>
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: var teacherService = context.Service<ITeacherService>();
  prefs: []
  type: TYPE_NORMAL
- en: var teachers = await teacherService.GetTeachersAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return teachers;
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: public interface ISchoolRoom{
  prefs: []
  type: TYPE_NORMAL
- en: Guid Id { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: string Name { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: string? Description { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public int Capacity { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class LabRoom : ISchoolRoom'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Name { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string? Description { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public int Capacity { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Subject { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string Equipment { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasChemicals { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class Classroom : ISchoolRoom'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Name { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string? Description { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public int Capacity { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasComputers { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasProjector { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public bool HasWhiteboard { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: public interface ISchoolRoomService{
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<ISchoolRoom>> GetSchoolRoomsAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<LabRoom>> GetLabRoomsAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Classroom>> GetClassroomsAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<LabRoom> GetLabRoomAsync(Guid labRoomId);
  prefs: []
  type: TYPE_NORMAL
- en: Task<Classroom> GetClassroomAsync(Guid classroomId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class SchoolRoomService(IDbContextFactory<AppDbContext> contextFactory)
    : ISchoolRoomService'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<List<ISchoolRoom>> GetSchoolRoomsAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var labRooms = await dbContext.LabRooms.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var classrooms = await dbContext.Classrooms.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var schoolRooms = new List<ISchoolRoom>();
  prefs: []
  type: TYPE_NORMAL
- en: schoolRooms.AddRange(labRooms);
  prefs: []
  type: TYPE_NORMAL
- en: schoolRooms.AddRange(classrooms);
  prefs: []
  type: TYPE_NORMAL
- en: return schoolRooms;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Omitted for brevity
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services.AddScoped<ISchoolRoomService, SchoolRoomService>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'public class SchoolRoomType : InterfaceType<ISchoolRoom>{    protected override
    void Configure(IInterfaceTypeDescriptor<ISchoolRoom> descriptor)    {        descriptor.Name("SchoolRoom");    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class LabRoomType : ObjectType<LabRoom>{    protected override void
    Configure(IObjectTypeDescriptor<LabRoom> descriptor)    {        descriptor.Name("LabRoom");        descriptor.Implements<SchoolRoomType>();    }}public
    class ClassroomType : ObjectType<Classroom>{    protected override void Configure(IObjectTypeDescriptor<Classroom>
    descriptor)    {        descriptor.Name("Classroom");        descriptor.Implements<SchoolRoomType>();    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public List<SchoolRoomType> SchoolRooms { get; set; } = new();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.SchoolRooms)    .Description("This is the list of school
    rooms in the school.")    .Type<ListType<SchoolRoomType>>()    .Resolve(async
    context =>    {        var service = context.Service<ISchoolRoomService>();        var
    schoolRooms = await service.GetSchoolRoomsAsync();        return schoolRooms;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: builder.Services    .AddGraphQLServer()    .RegisterDbContext<AppDbContext>(DbContextKind.Pooled)    .RegisterService<ITeacherService>(ServiceKind.Resolver)    .AddQueryType<QueryType>()    .AddType<LabRoomType>()    .AddType<ClassroomType>()    .AddMutationType<Mutation>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'type Query {  """  This is the list of school rooms in the school.  """  schoolRooms:
    [SchoolRoom]}type LabRoom implements SchoolRoom {  id: UUID!  name: String!  description:
    String  capacity: Int!  subject: String!  equipment: String!  hasChemicals: Boolean!}type
    Classroom implements SchoolRoom {  id: UUID!  name: String!  description: String  capacity:
    Int!  hasComputers: Boolean!  hasProjector: Boolean!  hasWhiteboard: Boolean!}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: query {  schoolRooms {    __typename    id    name    description    capacity    ...
    on LabRoom {      subject      equipment      hasChemicals    }    ... on Classroom
    {      hasComputers      hasProjector      hasWhiteboard    }  }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{  "data": {    "schoolRooms": [      {        "__typename": "LabRoom",        "id":
    "00000000-0000-0000-0000-000000000501",        "name": "Chemistry Lab",        "description":
    "Chemistry Lab",        "capacity": 20,        "subject": "Chemistry",        "equipment":
    "Chemicals, Beakers, Bunsen Burners",        "hasChemicals": true      },      {        "__typename":
    "Classroom",        "id": "00000000-0000-0000-0000-000000000601",        "name":
    "Classroom 1",        "description": "Classroom 1",        "capacity": 20,        "hasComputers":
    true,        "hasProjector": false,        "hasWhiteboard": true      },      ...    ]  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class Equipment{
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Name { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string? Description { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Condition { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string Brand { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public int Quantity { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public class Furniture
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Name { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string? Description { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Color { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string Material { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public int Quantity { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: public interface IEquipmentService{
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Equipment>> GetEquipmentListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<Equipment> GetEquipmentAsync(Guid equipmentId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class EquipmentService(IDbContextFactory<AppDbContext> contextFactory)
    : IEquipmentService'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<List<Equipment>> GetEquipmentListAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var equipment = await dbContext.Equipment.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return equipment;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<Equipment> GetEquipmentAsync(Guid equipmentId)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var equipment = await dbContext.Equipment.FindAsync(equipmentId);
  prefs: []
  type: TYPE_NORMAL
- en: return equipment ?? throw new ArgumentException("Equipment not found", nameof(equipmentId));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: public interface IFurnitureService{
  prefs: []
  type: TYPE_NORMAL
- en: Task<List<Furniture>> GetFurnitureListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: Task<Furniture> GetFurnitureAsync(Guid furnitureId);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'public class FurnitureService(IDbContextFactory<AppDbContext> contextFactory)
    : IFurnitureService'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<List<Furniture>> GetFurnitureListAsync()
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var furniture = await dbContext.Furniture.ToListAsync();
  prefs: []
  type: TYPE_NORMAL
- en: return furniture;
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: public async Task<Furniture> GetFurnitureAsync(Guid furnitureId)
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: await using var dbContext = await contextFactory.CreateDbContextAsync();
  prefs: []
  type: TYPE_NORMAL
- en: var furniture = await dbContext.Furniture.FindAsync(furnitureId);
  prefs: []
  type: TYPE_NORMAL
- en: return furniture ?? throw new ArgumentException("Furniture not found", nameof(furnitureId));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services.AddScoped<IEquipmentService, EquipmentService>();builder.Services.AddScoped<IFurnitureService,
    FurnitureService>();
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'public class EquipmentType : ObjectType<Equipment>{    protected override void
    Configure(IObjectTypeDescriptor<Equipment> descriptor)    {        descriptor.Name("Equipment");    }}public
    class FurnitureType : ObjectType<Furniture>{    protected override void Configure(IObjectTypeDescriptor<Furniture>
    descriptor)    {        descriptor.Name("Furniture");    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class SchoolItemType : UnionType{    protected override void Configure(IUnionTypeDescriptor
    descriptor)    {        descriptor.Name("SchoolItem");        descriptor.Type<EquipmentType>();        descriptor.Type<FurnitureType>();    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public List<SchoolItemType> SchoolItems { get; set; } = new();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.SchoolItems)    .Description("This is the list of school
    items in the school.")    .Type<ListType<SchoolItemType>>()    .Resolve(async
    context =>    {        var equipmentService = context.Service<IEquipmentService>();        var
    furnitureService = context.Service<IFurnitureService>();        var equipmentTask
    = equipmentService.GetEquipmentListAsync();        var furnitureTask = furnitureService.GetFurnitureListAsync();        await
    Task.WhenAll(equipmentTask, furnitureTask);        var schoolItems = new List<object>();        schoolItems.AddRange(equipmentTask.Result);        schoolItems.AddRange(furnitureTask.Result);        return
    schoolItems;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'union SchoolItem = Equipment | Furnituretype Equipment {  id: UUID!  name:
    String!  description: String  condition: String!  brand: String!  quantity: Int!}type
    Furniture {  id: UUID!  name: String!  description: String  color: String!  material:
    String!  quantity: Int!}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: query {  schoolItems {    __typename    ... on Equipment {      id      name      description      condition      brand      quantity    }    ...
    on Furniture {      id      name      description      color      material      quantity    }  }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{  "data": {    "schoolItems": [      {        "__typename": "Equipment",        "id":
    "00000000-0000-0000-0000-000000000701",        "name": "Bunsen Burner",        "description":
    "Bunsen Burner",        "condition": "Good",        "brand": "Bunsen",        "quantity":
    10      },      {        "__typename": "Furniture",        "id": "00000000-0000-0000-0000-000000000801",        "name":
    "Desk",        "description": "Desk",        "color": "Brown",        "material":
    "Wood",        "quantity": 20      },      ...    ]  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: query {  schoolItems {    __typename    id    name   }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "errors": [    {      "message": "A union type cannot declare a field directly.
    Use inline fragments or fragments instead.",      "locations": [        {          "line":
    2,          "column": 15        }      ],      "path": [        "schoolItems"      ],      "extensions":
    {        "type": "SchoolItem",        "specifiedBy": "http://spec.graphql.org/October2021/   #sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types"      }    }  ]}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public class Student{
  prefs: []
  type: TYPE_NORMAL
- en: public Guid Id { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string FirstName { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string LastName { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string Email { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public string? Phone { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public string Grade { get; set; } = string.Empty;
  prefs: []
  type: TYPE_NORMAL
- en: public DateOnly? DateOfBirth { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public Guid GroupId { get; set; }
  prefs: []
  type: TYPE_NORMAL
- en: public Group Group { get; set; } = default!;
  prefs: []
  type: TYPE_NORMAL
- en: public List<Course> Courses { get; set; } = new();
  prefs: []
  type: TYPE_NORMAL
- en: public List<StudentCourse> StudentCourses { get; set; } = new();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: dotnet add package HotChocolate.Data
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: builder.Services    .AddGraphQLServer()    // Omitted for brevity    .AddFiltering()    .AddMutationType<Mutation>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public List<Student> Students { get; set; } = new();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering()    .Resolve(async context =>    {        var
    dbContextFactory = context.Service<IDbContextFactory<AppDbContext>>();        var
    dbContext = await dbContextFactory.CreateDbContextAsync();        var students
    = dbContext.Students.AsQueryable();        return students;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'students(where: StudentFilterInput): [Student!]!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'input StudentFilterInput {  and: [StudentFilterInput!]  or: [StudentFilterInput!]  id:
    UuidOperationFilterInput  firstName: StringOperationFilterInput  lastName: StringOperationFilterInput  email:
    StringOperationFilterInput  phone: StringOperationFilterInput  grade: StringOperationFilterInput  dateOfBirth:
    DateOperationFilterInput}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query {  students(where: { firstName: { eq: "John" } }) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{  "data": {    "students": [      {        "id": "00000000-0000-0000-0000-000000000901",        "firstName":
    "John",        "lastName": "Doe",        "email": "",        "phone": null,        "grade":
    "",        "dateOfBirth": "2000-01-01"      }    ]  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (36ms) [Parameters=[@__p_0=''?'' (Size = 32)], CommandType=''Text'',    CommandTimeout=''30'']      SELECT
    [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId],
    [s].   [LastName], [s].[Phone]      FROM [Students] AS [s]      WHERE [s].[FirstName]
    = @__p_0'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query ($where: StudentFilterInput) {  students(where: $where) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{  "where": {    "firstName": {      "eq": "John"    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "where": {    "firstName": {      "in": ["John", "Jane"]    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "where": {    "dateOfBirth": {      "gt": "2001-01-01"    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class StudentFilterType : FilterInputType<Student>{    protected override
    void Configure(IFilterInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Field(t
    => t.Id);        descriptor.Field(t => t.GroupId);        descriptor.Field(t =>
    t.FirstName);        descriptor.Field(t => t.LastName);        descriptor.Field(t
    => t.DateOfBirth);    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering<StudentFilterType>()    // Omitted for brevity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'input StudentFilterInput {  and: [StudentFilterInput!]  or: [StudentFilterInput!]  id:
    UuidOperationFilterInput  groupId: UuidOperationFilterInput  firstName: StringOperationFilterInput  lastName:
    StringOperationFilterInput  dateOfBirth: DateOperationFilterInput}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: override protected void Configure(IFilterInputTypeDescriptor<Student> descriptor){    descriptor.BindFieldsImplicitly();    descriptor.Ignore(t
    => t.Group);    descriptor.Ignore(t => t.Courses);}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'public class StudentStringOperationFilterInputType : StringOperationFilterInputType{    protected
    override void Configure(IFilterInputTypeDescriptor descriptor)    {        descriptor.Operation(DefaultFilterOperations.Equals).Type<StringType>();        descriptor.Operation(DefaultFilterOperations.Contains).Type<StringType>();    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: override protected void Configure(IFilterInputTypeDescriptor<Student> descriptor){    //
    Omitted for brevity    descriptor.Field(t => t.FirstName).Type<StudentStringOperationFilterInputType>();    descriptor.Field(t
    => t.LastName).Type<StudentStringOperationFilterInputType>();}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query {  students(where: { and: [{ firstName: { eq: "John" } }, { dateOfBirth:
    { gt: "2001-01-01" } }] }) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'query ($where: StudentFilterInput) {  students(where: $filter) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "where": {    "or": [      {        "firstName": {          "eq": "John"        }      },      {        "lastName":
    {          "eq": "Doe"        }      }    ]  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public interface IStudentService{    // Omitted for brevity    Task<List<Student>>
    GetStudentsByGroupIdAsync(Guid groupId);    Task<List<Student>> GetStudentsByGroupIdsAsync(List<Guid>
    groupIds);}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class CustomStudentFilterType : FilterInputType<Student>{    protected
    override void Configure(IFilterInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Name("CustomStudentFilterInput");        descriptor.AllowAnd(false).AllowOr(false);        descriptor.Field(t
    => t.GroupId).Type<CustomStudentGuidOperationFilterInputType>();    }}public class
    CustomStudentGuidOperationFilterInputType : UuidOperationFilterInputType{    protected
    override void Configure(IFilterInputTypeDescriptor descriptor)    {        descriptor.Name("CustomStudentGuidOperationFilterInput");        descriptor.Operation(DefaultFilterOperations.Equals).Type<IdType>();        descriptor.Operation(DefaultFilterOperations.In).Type<ListType<IdType>>();    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: public List<Student> StudentsWithCustomFilter { get; set; } = new();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.StudentsWithCustomFilter)    .Description("This is the
    list of students in the school.")    .UseFiltering<CustomStudentFilterType>()    .Resolve(async
    context =>    {        var service = context.Service<IStudentService>();        //
    The following code uses the custom filter.        var filter = context.GetFilterContext()?.ToDictionary();        if
    (filter != null && filter.ContainsKey("groupId"))        {            var groupFilter
    = filter["groupId"]! as Dictionary<string, object>;            if (groupFilter
    != null && groupFilter.ContainsKey("eq"))            {                if (!Guid.TryParse(groupFilter["eq"].ToString(),
    out var groupId))                {                    throw new ArgumentException("Invalid
    group id", nameof(groupId));                }                var students = await
    service.GetStudentsByGroupIdAsync(groupId);                return students;            }            if
    (groupFilter != null && groupFilter.ContainsKey("in"))            {                if
    (groupFilter["in"] is not IEnumerable<string> groupIds)                {                    throw
    new ArgumentException("Invalid group ids", nameof(groupIds));                }                groupIds
    = groupIds.ToList();                if (groupIds.Any())                {                    var
    students =                        await service.GetStudentsByGroupIdsAsync(groupIds                            .Select(x
    => Guid.Parse(x.ToString())).ToList());                    return students;                }                return
    new List<Student>();            }        }        var allStudents = await service.GetStudentsAsync();        return
    allStudents;    });
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'input CustomStudentFilterInput {  groupId: CustomStudentGuidOperationFilterInput}input
    CustomStudentGuidOperationFilterInput {  and: [CustomStudentGuidOperationFilterInput!]  or:
    [CustomStudentGuidOperationFilterInput!]  eq: ID  in: [ID]}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'query ($where: CustomStudentFilterInput) {  studentsWithCustomFilter(where:
    $where) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "where": {    "groupId": {      "eq": "00000000-0000-0000-0000-000000000201"    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "where": {    "groupId": {      "in": ["00000000-0000-0000-0000-000000000201",
    "00000000-0000-0000-0000-000000000202"]    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: builder.Services    .AddGraphQLServer()    // Omitted for brevity    .AddSorting()    .AddMutationType<Mutation>();
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseFiltering<StudentFilterType>()    .UseSorting()    //
    Omitted for brevity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'students(where: StudentFilterInput, order: [StudentSortInput!]): [Student!]!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'input StudentSortInput {  id: SortEnumType  firstName: SortEnumType  lastName:
    SortEnumType  email: SortEnumType  phone: SortEnumType  grade: SortEnumType  dateOfBirth:
    SortEnumType  groupId: SortEnumType  group: GroupSortInput}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: enum SortEnumType {  ASC  DESC}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query ($order: [StudentSortInput!]) {  students(order: $order) {    id    firstName    lastName    email    phone    grade    dateOfBirth  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{  "order": [    {      "firstName": "ASC"    }  ]}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "order": [     {        "firstName": "ASC"     },     {        "lastName":
    "ASC"     }  ]}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (3ms) [Parameters=[], CommandType=''Text'', CommandTimeout=''30'']      SELECT
    [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId],
    [s].   [LastName], [s].[Phone]      FROM [Students] AS [s]      ORDER BY [s].[FirstName],
    [s].[LastName]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'public class StudentSortType : SortInputType<Student>{    protected override
    void Configure(ISortInputTypeDescriptor<Student> descriptor)    {        descriptor.BindFieldsExplicitly();        descriptor.Field(x
    => x.FirstName);        descriptor.Field(x => x.LastName);        descriptor.Field(x
    => x.DateOfBirth);    }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Students)    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'input StudentSortInput {  firstName: SortEnumType  lastName: SortEnumType  dateOfBirth:
    SortEnumType}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UsePaging()    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'students(  first: Int  after: String  last: Int  before: String  where: StudentFilterInput  order:
    [StudentSortInput!]): StudentsConnection'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'type StudentsConnection {  pageInfo: PageInfo!  edges: [StudentsEdge!]  nodes:
    [Student!]}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'type StudentsEdge {  cursor: String!  node: Student!}type PageInfo {  hasNextPage:
    Boolean!  hasPreviousPage: Boolean!  startCursor: String  endCursor: String}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: query {  students {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{  "data": {    "students": {      "edges": [        {          "cursor": "MA==",          "node":
    {            "id": "00000000-0000-0000-0000-000000000901",            "firstName":
    "John",            "dateOfBirth": "2000-01-01"          }        },        ...        {          "cursor":
    "OQ==",          "node": {            "id": "00000000-0000-0000-0000-000000000910",            "firstName":
    "Jack",            "dateOfBirth": "2000-01-10"          }        }      ],      "pageInfo":
    {        "hasNextPage": true,        "hasPreviousPage": false      }    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query {  students(after: "OQ==") {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (11ms) [Parameters=[@__p_0=''?'' (DbType = Int32), @__p_1=''?'' (DbType = Int32)],    CommandType=''Text'',
    CommandTimeout=''30'']      SELECT [s].[Id], [s].[DateOfBirth], [s].[Email], [s].[FirstName],
    [s].[Grade], [s].[GroupId], [s].   [LastName], [s].[Phone]      FROM [Students]
    AS [s]      ORDER BY (SELECT 1)      OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS
    ONLY'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query {  students(before: "MA==") {     edges {        cursor        node {          id          firstName          dateOfBirth        }     }     pageInfo
    {        hasNextPage        hasPreviousPage     }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UsePaging(options: new PagingOptions()    {        MaxPageSize
    = 20,        DefaultPageSize = 5,        IncludeTotalCount = true    })    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: query {  students {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query ($where: StudentFilterInput, $order: [StudentSortInput!]) {  students(where:
    $where, order: $order) {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ]}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query ($where: StudentFilterInput, $order: [StudentSortInput!]) {  students(where:
    $where, order: $order, after: "NA==") {    edges {      cursor      node {        id        firstName        dateOfBirth      }    }    totalCount    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ],   "after":"NA=="}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseOffsetPaging()    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'students(  skip: Int  take: Int  where: StudentFilterInput  order: [StudentSortInput!]):
    StudentsCollectionSegmenttype StudentsCollectionSegment {  pageInfo: CollectionSegmentInfo!  items:
    [Student!]}type CollectionSegmentInfo {  hasNextPage: Boolean!  hasPreviousPage:
    Boolean!}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: query {   students {     items {       id       firstName       dateOfBirth     }     pageInfo
    {       hasNextPage       hasPreviousPage     }   } }
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query {  students(skip: 5, take: 5) {    items {      id      firstName      dateOfBirth    }    pageInfo
    {      hasNextPage      hasPreviousPage    }  }}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '{  "skip": 5,  "take": 5}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'descriptor.Field(x => x.Students)    .Description("This is the list of students
    in the school.")    .UseOffsetPaging(options: new PagingOptions()    {        MaxPageSize
    = 20,        DefaultPageSize = 5,        IncludeTotalCount = true    })    .UseFiltering<StudentFilterType>()    .UseSorting<StudentSortType>()    //
    Omitted for brevity'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'query ($where: StudentFilterInput, $order: [StudentSortInput!], $skip: Int!,
    $take: Int!) {     students(where: $where, order: $order, skip: $skip, take: $take)
    {       items {         id         firstName         dateOfBirth       }       totalCount       pageInfo
    {         hasNextPage         hasPreviousPage       }     }   }'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{   "where":{      "dateOfBirth":{         "gt":"2001-01-01"      }   },   "order":[      {         "firstName":"ASC"      },      {         "lastName":"ASC"      }   ],   "skip":5,   "take":5}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'info: Microsoft.EntityFrameworkCore.Database.Command[20101]      Executed DbCommand
    (2ms) [Parameters=[@__p_0=''?'' (DbType = Date), @__p_1=''?'' (DbType = Int32),    @__p_2=''?''
    (DbType = Int32)], CommandType=''Text'', CommandTimeout=''30'']      SELECT [s].[Id],
    [s].[DateOfBirth], [s].[Email], [s].[FirstName], [s].[Grade], [s].[GroupId], [s].   [LastName],
    [s].[Phone]      FROM [Students] AS [s]      WHERE [s].[DateOfBirth] > @__p_0      ORDER
    BY [s].[FirstName], [s].[LastName]      OFFSET @__p_1 ROWS FETCH NEXT @__p_2 ROWS
    ONLY'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Program.cs file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code adds a middleware that maps the Voyager UI to the default
    URL `ui/voyager`. If you want to specify a different URL, you can pass the URL
    as a parameter, as in this example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
