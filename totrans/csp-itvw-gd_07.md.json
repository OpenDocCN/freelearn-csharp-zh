["```cs\npublic class Order\n{\n    public int Id { get; set; }\n    public string[] Items { get; set; }\n    public double Price { get; set; }\n    public double Email { get; set; }\n}\npublic class OrderProcessing\n{\n    public void ProcessOrder(Order order)\n    {\n        ValidateOrder(order.Items);\n        SaveOrder(order);\n        SendConfirmationEmail(order.Id, order.Email);\n    }\n    private void ValidateItems(string[] items)\n    {\n        // Items validation logic\n    }\n    private void SaveOrder(Order order)\n    {\n        // Logic to save the order in the database\n    }\n    private void SendConfirmationEmail(string orderId, string email)\n    {\n        // Logic to send confirmation email\n    }\n}\n```", "```cs\npublic interface IAudioDecoder\n{\n    void Decode();\n}\n```", "```cs\npublic class MP3Decoder : IAudioDecoder\n{\n    public void Decode()\n    {\n        // Logic to decode MP3 files\n    }\n}\npublic class WAVDecoder : IAudioDecoder\n{\n    public void Decode()\n    {\n        // Logic to decode WAV files\n    }\n}\n```", "```cs\npublic class MusicPlayer\n{\n    private readonly IAudioDecoder _decoder;\n    // The constructor receives a dependency on the IAudioDecoder abstraction.\n    public MusicPlayer(IAudioDecoder decoder)\n    {\n        _decoder = decoder;\n    }\n    public void PlayMusic()\n    {\n        _decoder.Decode();\n        // Additional logic to play the music\n    }\n}\n```", "```cs\npublic class Program\n{\n    static void Main(string[] args)\n    {\n        // Using the MusicPlayer with an MP3 decoder\n        var mp3Player = new MusicPlayer(new MP3Decoder());\n        mp3Player.PlayMusic();\n        // Using the MusicPlayer with a WAV decoder\n        var wavPlayer = new MusicPlayer(new WAVDecoder());\n        wavPlayer.PlayMusic();\n    }\n}\n```", "```cs\npublic class OrderProcessor\n{\n    public delegate void OrderProcessedEventHandler(Order order);\n    public event OrderProcessedEventHandler OrderProcessed;\n    public void ProcessOrder(Order order)\n    {\n        // Order processing logic\n        OrderProcessed?.Invoke(order);\n    }\n}\npublic class OrderNotification\n{\n    public void OnOrderProcessed(Order order)\n    {\n        // Notification logic for order processing\n    }\n}\n```", "```cs\npublic interface IOrderProcessor\n{\n    void ProcessOrder(Order order);\n}\npublic interface IOrderValidator\n{\n    bool ValidateOrder(Order order);\n}\npublic interface IOrderSaver\n{\n    void SaveOrder(Order order);\n}\npublic class OrderManager : IOrderProcessor, IOrderValidator, IOrderSaver\n{\n    // Interface methods implementation here\n}\n```", "```cs\npublic class Singleton\n{\n    // Lazy instance of the Singleton, instantiated only when needed\n    private static readonly Lazy<Singleton> lazyInstance = new (() => new Singleton());\n    // Private constructor so that other classes cannot instantiate it\n    private Singleton() { }\n    // Public static property to get the instance of the class\n    public static Singleton Instance => lazyInstance.Value;\n}\n```"]