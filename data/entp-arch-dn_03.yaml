- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Reaching Business Alignment
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现业务对齐
- en: Following the first chapter explaining the problems information systems globally
    face and the second one on the general theory of industrialization, it’s time
    for some actual battle-proved methods! Though we will not get our hands on the
    code or deploy software before *Part 2* of the book, this third chapter is much
    more applied and will show the principle of what is called business/IT alignment.
    The idea behind this principle is that the software system should reflect the
    structure of the business domain it aims to automate as much as possible. In a
    way, this is applying **Conway’s law** (which will be explained) backward, using
    it to obtain the desired result. In practice, it is important to know the map
    to rule on the ground, so we will be using an information system mapping technique
    based on the four-layer diagram pushed forward by **CIGREF** (short for **Club
    Informatique des Grandes Entreprises Françaises**), among other organizations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在解释了全球信息系统的普遍问题和第二章节关于工业化的一般理论之后，现在是时候介绍一些经过实战检验的方法了！尽管在书的第二部分之前，我们不会接触代码或部署软件，但这一章将更加应用性，并将展示所谓的业务/IT对齐的原则。这一原则背后的思想是，软件系统应该尽可能地反映它旨在自动化的业务领域的结构。从某种意义上说，这是应用**康威定律**（将在后面解释）的反向，使用它来获得期望的结果。在实践中，了解地图以在地面上统治是很重要的，因此我们将使用基于**CIGREF**（即**Club
    Informatique des Grandes Entreprises Françaises**）等组织推动的四层图的信息系统映射技术。
- en: 'In this chapter, we’ll cover these topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Software for business and the principle of alignment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 商业软件和对齐原则
- en: Conway’s law applied to application and systems
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 康威定律应用于应用和系统
- en: Introducing the CIGREF diagram
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍CIGREF图
- en: Using the four-layer diagram
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用四层图
- en: Patterns and antipatterns of alignment
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对齐模式和反模式
- en: After describing the method and drawing similarities with the **TOGAF** (short
    for **The Open Group Architecture Framework**) framework or other methods, we
    will apply it to a sample IT system so that you really can benefit from it as
    soon as you have finished this chapter. Finally, we will see best practices, but
    also anti-patterns in business alignment. Just like any other method, business/IT
    alignment using the four-layer approach has its advantages and its limits. It
    is especially important to know them to apply the method as efficiently as possible
    and also to know how to use it to determine when and where there are alignment
    problems in the information system under study.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在描述了方法并绘制了与**TOGAF**（即**The Open Group Architecture Framework**）框架或其他方法的相似性之后，我们将将其应用于一个示例IT系统，以便你完成本章后真正从中受益。最后，我们将看到最佳实践，但也会看到业务对齐的反模式。就像任何其他方法一样，使用四层方法进行业务/IT对齐有其优点和局限性。了解它们对于尽可能有效地应用该方法以及了解如何使用它来确定在研究的信息系统中何时何地存在对齐问题是特别重要的。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: As said in the introduction, this chapter will be more practical than the two
    previous, theoretical, ones. This means a reading prerequisite—since we will talk
    about methods of analyzing information systems, you should have previous analytical
    contact with them at least. Sure, everyone uses them nowadays, but you will need
    a bit more than just experience using them, in particular some knowledge about
    the different parts they are made of. Nothing fancy here, but you need to understand
    the difference between software and hardware and that information systems are
    generally there to automate business processes, which are sets of human and computer-based
    tasks organized toward reaching a goal. You will also need to be able to recognize
    the different parts of such a system. If we call them systems instead of simply
    software applications, this is because they are more complex and made of several
    modules. You need to understand this and be able to tell which parts the system
    is made of.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如引言所述，本章将比前两章更实用，这两章是理论性的。这意味着有一个阅读前提——既然我们将讨论分析信息系统的方法，那么至少你应该对它们有先前的分析接触。当然，现在每个人都在使用它们，但你需要的不仅仅是使用它们的经验，特别是关于它们由哪些不同部分组成的某些知识。这里没有什么花哨的，但你需要理解软件和硬件之间的区别，以及信息系统通常是为了自动化业务流程而存在的，这些流程是由旨在达到目标的人力和计算机任务组成的集合。你还需要能够识别这样一个系统的不同部分。如果我们把它们称为系统而不是简单的软件应用，这是因为它们更复杂，由多个模块组成。你需要理解这一点，并能够说出系统由哪些部分组成。
- en: You will also need to be able to classify these parts of the system. Are they
    classified by function or by some more concrete, IT-related criteria, such as
    their position on the on-premises servers versus in the cloud? Are they autonomous
    or do they communicate a lot with other functions, and if so, with which interfaces
    and protocols? This is certainly just general knowledge or common sense for most
    of us, but this is something you will need to be able to read this chapter nonetheless.
    This will help you to point out critical questions. For example, when talking
    about interactions between parts of the systems, are we talking about business
    dependencies or concrete, IT-related streams of data? To give you a better understanding
    of the difference, let’s go over some illustrations. An example of business dependency
    is when the ordering system depends on the customer’s list. Indeed, we can record
    a company with our orders, but it does not make much sense to record an order
    without knowing the customer who buys the products listed in it. On the other
    hand, an example of IT-related data streams is when the ordering system accesses
    the customer’s database to propose an existing record.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要能够对这些系统部分进行分类。它们是根据功能还是根据更具体、与IT相关的标准进行分类，比如它们在本地服务器上的位置与云中的位置？它们是自治的还是与其他功能大量通信，如果是的话，通过哪些接口和协议？这当然对我们大多数人来说只是常识或常识，但这是你需要能够阅读这一章的内容。这将帮助你指出关键问题。例如，当谈论系统部分之间的交互时，我们是在谈论业务依赖还是与IT相关的具体数据流？为了更好地理解这种差异，让我们回顾一些示例。业务依赖的一个例子是订单系统依赖于客户名单。确实，我们可以用我们的订单记录公司，但不知道购买列表中产品的客户，记录订单就没有太多意义。另一方面，与IT相关的数据流的一个例子是订单系统访问客户数据库以提出现有记录。
- en: Software for business and the principle of alignment
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 商业软件和对齐原则
- en: 'At this point of the book, it should already be quite clear, but it does not
    harm us to recall that we are only talking about professional information systems.
    In short, we put ourselves in a case where software really means business: applications
    that are mission-critical for companies, information systems that help production
    for a commercial company or a non-profit organization, etc. All recommendations
    that follow would not make any sense on small systems and would be way too complicated
    if applied to a simple piece of software application.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到这本书的这一部分，这应该已经很清楚了，但回顾一下也无妨，我们只是在讨论专业信息系统。简而言之，我们把自己放在一个软件真正意味着商业的情境中：对公司至关重要的应用程序，帮助商业公司或非营利组织生产的信息系统等。以下的所有建议在小型系统中都没有意义，如果应用到简单的软件应用程序上，将会过于复杂。
- en: This being said, the hypothesis is that, since there is a business, there is
    good knowledge of it; we know who the participants in the business are, what the
    stakes and objectives of the business are, which strategy is being conducted (even
    if it is not 100% clearly defined, as happens in a lot of companies), etc. This
    last one is of utmost importance; there is no need to design an information system
    if the strategic direction has not been defined.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，假设是，既然有商业，那么对它的了解就很好；我们知道商业的参与者是谁，商业的赌注和目标是什么，正在实施哪种战略（即使它没有100%明确定义，这在很多公司都发生过），等等。最后这一点至关重要；如果没有定义战略方向，就没有必要设计信息系统。
- en: Important note
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: It should be emphasized that the definition (even if not completely precise)
    of the business strategy is an absolute prerequisite to an analysis of enterprise
    architecture and the mapping of the information system. As an analyst with many
    years of experience with information systems, I always refuse a project if I realize
    in the first meetings that there is no company-level strategy, and I recommend
    anyone to do the same. If you are reading this chapter thinking about how you
    are going to define an information system and realize there is no business-defined
    strategy, you are better off stopping reading right now and coming back when this
    essential information becomes clearer. Trust me on this one—if you realize the
    upcoming steps before the vision of the objectives of the information systems
    is (at least globally) clear, you are going to waste a lot of your time and do
    more harm than good.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 应该强调的是，即使定义（即使不完全精确）商业战略也是分析企业架构和信息系统映射的绝对前提。作为一名拥有多年信息系统经验的分析师，我总是在第一次会议中意识到没有公司级战略时拒绝一个项目，并且我建议每个人都这样做。如果你正在阅读这一章，思考你将如何定义信息系统并意识到没有业务定义的战略，你最好现在就停止阅读，等到这些基本信息更加清晰时再回来。在这方面，请相信我——如果你在信息系统目标愿景（至少是全球范围内）清晰之前就意识到即将到来的步骤，你将会浪费很多时间，而且弊大于利。
- en: Why is all this so important? Because you are going to use the definition of
    your target business to design the information system to be aligned with it. Technology
    should always be at the service of the users, so knowing the business beforehand
    is what is going to drive the design of the information system (again, there is
    no need for a perfectly detailed strategy, but at least a vision or a direction).
    This is what is called business/IT alignment or, in the context of this book,
    simply alignment. We will see that this is the only stable method you need to
    obtain a sound and future-proof information system, free from the problems that
    have been described in the first chapter. But before we dive more into the method
    of achieving business/IT alignment, let’s just take a look at other methods that
    are not business-related but technically driven and learn where they apply and
    what their limits are when designing complex information systems.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这一切如此重要？因为你要使用目标业务的定义来设计与之一致的信息系统。技术应该始终服务于用户，所以事先了解业务将推动信息系统的设计（再次强调，不需要一个完美详细的战略，但至少有一个愿景或方向）。这就是所谓的业务/IT对齐，或者在本书的背景下，简单地说就是对齐。我们将看到，这是你获得一个稳定、有远见的信息系统的唯一方法，不受第一章中描述的问题的影响。但在我们更深入地探讨实现业务/IT对齐的方法之前，让我们先看看其他非业务相关但由技术驱动的方法，了解它们的应用范围以及在设计复杂信息系统时的局限性。
- en: The jungle of technical recommendations
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术建议的丛林
- en: If you are a true software professional and worry about the quality of your
    deliverables, you most certainly have read a lot about technical methods that
    help in addressing the issue and improving your software skills. You have heard
    about **V-cycle**; **Agile methods** to organize software teams; **extreme programming**;
    **test-driven development**; **behavior-driven development** for practices; programming
    patterns to improve code structure; development-specific **key performance indicators**
    to follow the quality of code; and so many more that a complete chapter would
    not be enough to describe them all.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是一位真正的软件专业人士，并且担心你交付成果的质量，你肯定读过很多关于帮助解决该问题并提高你的软件技能的技术方法。你听说过**V循环**；用于组织软件团队的**敏捷方法**；**极限编程**；**测试驱动开发**；**行为驱动开发**实践；用于改进代码结构的编程模式；用于跟踪代码质量的特定于开发的**关键绩效指标**；以及更多，一个完整的章节都不足以描述它们。
- en: 'Though there is interest and things to learn from most of them, their sheer
    number shows the limits of such methods: they are only true in given contexts
    (otherwise, due to the number, some would oppose others) and, sadly, most of the
    people writing about them often forget to define this perimeter because they are
    interested in explaining the technique itself. The more the technique has helped
    them to lift a given obstacle, the more they will tend to present it as an essential,
    go-to recommendation. In extreme cases, the person recommending the practice does
    not realize the small size of the context operated and will consider this practice
    as universal, encouraging others to use it without limit.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然大多数内容都值得学习和借鉴，但它们的数量本身也显示了这种方法的局限性：它们只在特定的背景下才是正确的（否则，由于数量众多，有些人会反对另一些人），而且遗憾的是，大多数撰写关于这些方法的人常常忘记定义这个范围，因为他们对解释技术本身更感兴趣。技术帮助他们克服特定障碍越多，他们就越倾向于将其作为一项基本、不可或缺的建议来提出。在极端情况下，推荐这种实践的人甚至没有意识到操作背景的小规模，并将这种实践视为普遍适用的，鼓励他人无限制地使用它。
- en: This is of course where the critical thinking of the reader is expected, but
    at the same time, the reader should logically be someone who knows less about
    the domain of expertise of the writer, and it may be difficult for him/her to
    spot the limits of the content. “A little knowledge is a dangerous thing”, and
    the internet is polluted with people who just learned a new trick and will gladly
    expose it to the community as the solution to everything. This enthusiasm is understandable,
    and I have certainly done this in my blogs or general training activities, but
    that does not mean there is no solution and, again, the way forward is to improve
    the critical thinking of the reader.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里需要读者的批判性思维，但与此同时，读者在逻辑上应该是了解作者专业领域知识较少的人，他们可能难以发现内容的局限性。“知识越多越反动”，互联网上充斥着刚刚学会新技巧的人，他们乐于将其作为解决一切问题的方案公之于众。这种热情是可以理解的，我当然也在我的博客或一般培训活动中这样做过，但这并不意味着没有解决方案，而且，再次强调，前进的道路是提高读者的批判性思维。
- en: An example with KISS, DRY, and WET
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以KISS、DRY和WET为例
- en: 'Let’s take an example of some practices that you have certainly heard of: **KISS**
    (**keep it simple, stupid**) and **DRY** (**don’t repeat yourself**). The first
    one states that simplicity should always prevail when creating a software implementation.
    This is particularly true in Agile methods since additional features or feedback
    from the users will certainly force the rewriting of the code. The second one
    implies that code should never be repeated and that similar blocks of code should
    be put into a unique function called from the different places in the code where
    the same function is needed.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一些你肯定听说过的实践为例：**KISS**（**保持简单，傻瓜**）和**DRY**（**不要重复自己**）。第一个指出，在创建软件实现时，简单性应该始终占主导地位。这在敏捷方法中尤其如此，因为额外的功能或用户的反馈肯定会迫使代码重写。第二个意味着代码永远不应该重复，并且相似的代码块应该被放入一个独特的函数中，这个函数可以从代码中需要相同功能的不同位置调用。
- en: Before any further analysis, we should note that there seems to be a similarity,
    or at least quite a strong link, between the two recommendations. After all, if
    we reduce the code repetition, we make things simpler (or at least they may appear
    so, but this is the subject of the following). We may thus question the use of
    the two approaches, but again, software engineering is not an industry yet, so
    every craftsmanship has its own tools and uses. Fair enough…
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行任何进一步的分析之前，我们应该注意到，这两项建议似乎存在某种相似性，或者至少是非常强的联系。毕竟，如果我们减少了代码重复，事情就会变得更简单（或者至少它们可能看起来是这样，但这将是以下主题的内容）。因此，我们可以质疑这两种方法的使用，但再次强调，软件工程还不是一门行业，所以每种手艺都有自己的工具和用途。这很公平……
- en: But the real point of analysis of these two methods is their context of application.
    As with most technical best practices, they do not blindly apply to everything
    and their use should be carefully pondered. Sure, it makes sense to unify a simple
    function to display a warning when you find it many times in the same class, but
    how about the same situation with two classes in distinct software applications
    where the warning label slightly differs? If the text is not the same, maybe this
    is because the warning is on a situation that is not the same, so we should analyze
    the condition on which they are called. However, as the software modules are not
    the same, the variables will not necessarily be the same, so it is going to be
    difficult to analyze the similarity of the situations prompting the warning dialog
    display. And how about coupling? If we decide to keep only one code, which application
    module should have it? Or should we make another module that stores the code of
    the dialog box? And in this case, what about the fact that the life cycle of two
    applications now influences the versions of this common library, which could certainly
    become an issue? Sometimes, unifying code can do more harm than good.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 但分析这两种方法的真正要点是它们的适用上下文。与大多数技术最佳实践一样，它们并不盲目适用于所有情况，其使用应仔细考虑。当然，当你发现同一个类中多次出现相同的简单函数时，统一它是合理的，但如果有两个不同软件应用中的类具有略微不同的警告标签，这种情况又如何呢？如果文本不相同，也许这是因为警告是在不同的情况下，因此我们应该分析它们被调用的条件。然而，由于软件模块不相同，变量不一定相同，因此分析触发警告对话框显示的情况的相似性将会很困难。那么耦合呢？如果我们决定只保留一个代码，哪个应用程序模块应该拥有它？或者我们应该创建另一个模块来存储对话框的代码？在这种情况下，两个应用程序的生命周期现在影响这个公共库的版本，这可能会成为一个问题？有时，统一代码可能弊大于利。
- en: 'This kind of discussion has brought lots of reflections, and a new good practice
    has been proposed by the acronym **WET** (opposite to DRY), standing for **write
    everything three times**. Indeed, the hesitations exposed mean that, to find the
    right decision, it is beneficial to wait and gather some more clues on the actual
    similarity of the contexts of use, and the creator of the method proposes to write
    the code three times before thinking about unifying it. This is a sound approach,
    as it avoids the “black or white” approach of the DRY principle and opens a whole
    domain of a gray area corresponding to the actual truth: it depends on the context.
    Writing the code, writing it a second time and observing the similarities, then
    writing it a third time and analyzing the return on the investment of unification
    certainly is a sound approach... but does this make it a law that every programmer
    should obey? Of course, no—again, critical thinking applies, and the three times
    may not apply to you. Maybe you will need five, maybe you will decide the limit
    will be time-based and not based on the number of occurrences (wait for one year
    of maintenance, for example). It is up to you, and I suspect three times was chosen
    partly because it made for quite a humorous opposition to the DRY principle.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这种讨论带来了许多反思，并提出了一个新的良好实践，即缩写**WET**（与DRY相反），代表**写三遍一切**。实际上，暴露出的犹豫意味着，为了找到正确的决定，等待并收集更多关于使用上下文实际相似性的线索是有益的，该方法创造者建议在考虑统一之前先写三次代码。这是一个合理的方法，因为它避免了DRY原则的“非黑即白”的方法，并开启了一个对应实际真相的灰色区域：它取决于上下文。先写代码，然后写第二次并观察相似性，最后写第三次并分析统一带来的投资回报，这确实是一个合理的方法...但这是否意味着它成为每个程序员都应该遵守的法律？当然不是——再次强调，需要批判性思维，三次可能并不适用于你。也许你需要五次，也许你将决定限制是基于时间而不是基于出现的次数（例如，等待一年的维护期）。这取决于你，我怀疑选择三次部分是因为它为DRY原则提供了一个相当幽默的对比。
- en: All this is to say that lots of technical, code-related methods that are used
    in software development are sometimes presented as hard truth or generally applicable
    best practices, but, most of the time, they are just principles that apply to
    a given context, and can (and must) be bent to fit others.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都意味着，在软件开发中使用的许多技术、与代码相关的方 法有时被当作硬性真理或普遍适用的最佳实践，但，大多数时候，它们只是适用于特定上下文的原则，并且（必须）根据其他上下文进行调整。
- en: The particular case of internal toolboxes/frameworks
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内部工具箱/框架的特定情况
- en: Before we switch to solutions on the issue just explained (and do not worry,
    there are some), a most-observed example of how best practices applied without
    a thorough context analysis can lead to bad situations is the development of bespoke
    company frameworks. During the writing of this chapter, I stumbled upon a great
    article from Aaron Stannard ([https://aaronstannard.com/dry-gone-bad-bespoke-company-framework/](https://aaronstannard.com/dry-gone-bad-bespoke-company-framework/))
    that happens to perfectly reflect my own analysis on frameworks after 25 years
    of programming with or without them, creating some and cursing myself to have
    done so, adoring some others and realizing they brought a huge value to the software
    I was responsible for, etc.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们切换到之前解释的问题的解决方案（而且不用担心，有一些解决方案）之前，一个最常观察到的例子是，在没有彻底的上下文分析的情况下应用最佳实践可能导致不良情况，那就是定制公司框架的开发。在撰写本章的过程中，我偶然发现了一篇来自Aaron
    Stannard（[https://aaronstannard.com/dry-gone-bad-bespoke-company-framework/](https://aaronstannard.com/dry-gone-bad-bespoke-company-framework/))的精彩文章，恰好完美地反映了我25年来有或没有框架编程的分析，创建了一些并诅咒自己这样做，崇拜一些其他框架并意识到它们为负责的软件带来了巨大的价值等。
- en: Aaron Stannard explains in this article how the DRY principle applied too strongly
    has harsh consequences on teams that develop specialized frameworks to unify coding
    and, in the end, they obtain results that were the opposite of those that were
    expected in terms of boilerplate code reduction, scale capacity, and quality of
    code.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Aaron Stannard在这篇文章中解释了DRY原则应用过于严格对开发专用框架以统一编码的团队产生的严厉后果，最终他们得到的结果与预期的相反，包括样板代码减少、扩展能力和代码质量。
- en: 'Some frameworks bring huge value to software applications and information systems,
    and you will easily locate them:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一些框架为软件应用和信息系统带来了巨大的价值，你将很容易找到它们：
- en: Everyone knows them and is happy to use them
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个人都知道它们，并且乐于使用它们。
- en: Newcomers consider the framework helpful in making them more productive and
    quicker
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新人认为这个框架有助于提高他们的生产力和速度。
- en: All users can describe in very few sentences what the framework does
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 所有用户都可以用很少的句子描述框架的功能。
- en: The framework has very little dependencies and can be used easily
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该框架依赖性非常少，可以轻松使用。
- en: 'It is so important that developers will go as far as doing the thing they hate
    to keep it going: documenting it'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这非常重要，以至于开发者会做到他们不喜欢的事情，只是为了保持它：编写文档。
- en: 'On the opposite side, there are frameworks in code that hinder the programming
    process:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，有些代码框架会阻碍编程过程：
- en: They have been created by a few experts and the rest of the team does not use
    them
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是由少数专家创建的，其余团队不使用它们。
- en: Newcomers tend to write the equivalent code directly and question the fact that
    the framework would have helped them be more productive
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新人往往会直接编写等效的代码，并质疑框架是否有助于他们提高生产力。
- en: They sometimes do so many things that none of their features are stable
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们有时做很多事情，以至于没有任何一个功能是稳定的。
- en: They bring some other constraints (operating on just one type of database, requiring
    script modules, elevation of privileges, etc.)
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们带来了一些其他限制（仅操作一种类型的数据库、需要脚本模块、提升权限等）。
- en: Their functioning is in the mind of the experts (often, a single person, which
    is dangerous for the company), and training their colleagues on the use of it
    is somewhat of a challenge.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们的功能存在于专家（通常是单个人，这对公司来说很危险）的脑海中，并且培训同事使用它是一项挑战。
- en: The difficulty in knowing where you are between these two ends of the spectrum
    is linked to the fact that the creators of the framework will, of course, be biased
    about their “baby”. They would always overestimate the time saved by using it
    or forget or overestimate the time to maintain it, the time to teach it to others
    in the team, the risk that the company is taking by putting an important dependency
    in the hands of one person, and so on. If you have to evaluate the use of a framework,
    you should put all these factors in a spreadsheet and coldly evaluate the return
    on investment in the short, middle, and long term.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个光谱端之间知道自己的位置困难，与框架的创造者当然会对他们的“宝贝”有偏见的事实有关。他们总是会高估使用它节省的时间，或者忘记或高估维护它的时间，向团队中其他人传授它的时间，公司把重要依赖放在一个人手中的风险，等等。如果你必须评估框架的使用，你应该将这些因素放入电子表格中，并冷静地评估短期、中期和长期的回报率。
- en: 'Finally, the modern programming platform has now brought so many tools that
    the very existence of frameworks can be questioned. For example, **.NET Core framework**
    version 8.0 has such a large ecosystem and **Base Class Library** that all purposes
    for which frameworks were created ten years ago have simply disappeared:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，现代编程平台现在已经带来了如此多的工具，以至于框架的存在本身都值得怀疑。例如，**.NET Core框架**版本8.0拥有如此庞大的生态系统和**基类库**，十年前框架被创建的所有目的都简单地消失了：
- en: Object/relational mapping is taken charge of by **Entity Framework**
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象/关系映射由**Entity Framework**负责
- en: API request/response with mapping to objects is handled by **ASP.NET Web API**
    and integrated **JSON**/**XML** serialization
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有对象映射的API请求/响应由**ASP.NET Web API**和集成的**JSON**/**XML**序列化处理
- en: Monitoring is taken care of by the logging stacks that can be plugged into any
    third-party listeners
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 监控由可以连接到任何第三方监听器的日志堆栈负责
- en: The consistent page description is done with **Blazor**, with style handling
    included
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一致的页面描述是通过**Blazor**完成的，包括样式处理
- en: Deployment on mobile applications is realized through **Multi-platform App UI**
    (**MAUI**), which also unifies with the Windows frontend, and so on
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用的部署是通过**Multi-platform App UI**（**MAUI**）实现的，它还与Windows前端统一，等等
- en: So my advice on this question of the frameworks is to wait as much as possible
    before creating a framework and trying to avoid it as much as possible (most of
    the time, admit it, you want to create the framework not because it is good for
    your business, but because it is fun to code). If it has to come, it will do so,
    and this is where emerging code architecture (we will come back to this notion
    soon if you have not heard about it) makes sense.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我对这个关于框架的建议是尽可能等待，在创建框架和尝试避免它（大多数时候，承认吧，你想要创建框架并不是因为它对你的业务有好处，而是因为它编写起来很有趣）。如果它必须到来，它就会到来，这就是新兴代码架构（如果你还没有听说过这个概念，我们很快就会回到这个概念）发挥作用的地方。
- en: 'The only stable guide: aligning to your users’ business'
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 唯一稳定的指南：与用户的业务对齐
- en: 'After this long digression, we come back to our initial consideration of the
    difficulty of knowing when to apply best practices and so-called “principles”
    in software. Yet, we desperately need guidance for the architecture of information
    systems because the stakes are too high and we have seen how bad the impact can
    be on business if we fail at this. So how do we know? Is there a sound and stable
    way that always applies? Some actual laws that we will be indeed able to truly
    rely on when designing something as essential for a company’s future as the structure
    of an information system? Yes, there is, and it is not a technical rule, but a
    method for technical decisions: always relate them to the business of the information
    system. This is the root of business/IT alignment.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这次漫长的离题之后，我们回到了最初对软件中何时应用最佳实践和所谓“原则”的难度的思考。然而，我们迫切需要关于信息系统架构的指导，因为风险太高，我们也看到了如果在这方面失败，对业务的影响有多么糟糕。那么我们如何知道？是否存在一个始终适用的合理且稳定的方法？一些我们确实能够真正依赖的、在设计对公司未来至关重要的信息系统结构时能够真正依赖的定律？是的，确实存在，而且它不是一项技术规则，而是一种技术决策的方法：始终将其与信息系统的业务联系起来。这是业务/IT对齐的根源。
- en: In this chapter, I am going to repeat this rule and explain it in many different
    ways, as it is so important for a correct information system architecture—what
    drives the design of the information systems is the structure of the business.
    This is particularly true for the concepts, and creating a successful software
    backbone for a company always starts with a perfect understanding of the business.
    What is a customer? What products do we sell? What are the main processes of the
    company that ought to be computerized? Most of these questions sound trivial,
    but they are only so because human brains can adapt to the background context.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我将重复这个规则，并以许多不同的方式解释它，因为它对于正确的信息系统架构至关重要——推动信息系统设计的是业务的架构。这一点对于概念尤其如此，为一家公司创建成功的软件骨架总是从对业务的完美理解开始。客户是什么？我们销售什么产品？公司应该计算机化的主要流程是什么？大多数这些问题听起来很平凡，但它们之所以如此，仅仅是因为人类大脑能够适应背景环境。
- en: 'Let’s take the very first question: what is a customer? This is so obvious
    for anyone in the company that the question is rarely asked, and it would sound
    quite ridiculous if any employee questioned it. “Customers are companies we do
    business with”. All right, but how about individuals? Yes, sometimes we also deal
    with individuals; this is the difference between B2B and B2C. And what if we question
    the term “doing business with”? What frequency and volumes are we talking about?
    Sure, any volume may be taken into account, and a person buying a simple bolt
    from you may be considered a customer in the exact same way as a company acquiring
    thousands of them a month. But how about time? Would you consider someone who
    has bought a product from you twenty years ago still a customer? No, certainly
    not. How about one year ago? Yes, of course... In this case, where is the limit?
    Ten years? Five? Decisions, decisions, decisions!'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们首先来探讨一个非常基础的问题：什么是客户？对于公司里的任何一个人来说，这个问题显然得出了答案，以至于很少有人会提出这个问题，如果任何员工质疑它，听起来会相当荒谬。“客户是我们与之做生意的公司”。好吧，那么个人呢？是的，有时我们也会与个人打交道；这是B2B和B2C之间的区别。如果我们质疑“做生意”这个术语呢？我们谈论的是频率和数量？当然，任何数量都可能被考虑在内，一个人从你这里买一个简单的螺栓可能被认为是一个客户，就像一个公司每月购买数千个螺栓一样。但是时间呢？你会认为二十年前从你那里购买过产品的某个人仍然是客户吗？不，当然不会。那么一年前呢？是的，当然……在这种情况下，界限在哪里？十年？五年？决策，决策，决策！
- en: About this previous example, you may find companies where managers do not agree
    on the exact definition of a customer between marketing and commerce... So, how
    would you expect a dumb computer to decide this? The hard truth is that, if you
    want to replace some tasks with software and data streams, you will have to make
    everything absolutely crystal clear for it to work. This is where most of the
    information systems fail—they have not been designed with a perfectly accurate
    view of the business, leaving some details to the implementation or use of the
    system by humans. It may work for some time when humans compensate for the missing
    knowledge in the computer, but sooner or later, there will be trouble. In the
    best case, the system will never be as efficient as expected. In the worst case,
    people leaving the company with their compensating knowledge will cause the system
    to come to a halt.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个先前的例子，你可能会发现一些公司，那里的经理在营销和商业之间对客户的精确定义并不一致……那么，你期望一个愚蠢的计算机如何来决定这个问题呢？残酷的事实是，如果你想用软件和数据流来替代一些任务，你必须让它绝对清晰，才能让它工作。这就是大多数信息系统失败的地方——它们没有以完美的业务视角来设计，让一些细节留给了人类对系统的实施或使用。当人类在计算机中补偿缺失的知识时，它可能在一开始还能工作一段时间，但迟早会出现问题。在最好的情况下，系统永远不会像预期的那样高效。在最坏的情况下，带着他们补偿性知识离开公司的人可能会使系统陷入停滞。
- en: What does this example show us? First, one should be extremely clear with the
    business definitions when it comes to making a software information system deal
    with them. The second is that, very often, these concepts are business rules,
    which means they are not perfectly stable but depend on how the business is run.
    The definition of the customer may change in time if your boss decides one day
    that the list of customers should not present the ones that have not bought anything
    from you in the last three years, where this duration previously was five years.
    If this situation is bound to happen from time to time, it is of course of utmost
    importance that its impact on the information system is limited. Putting this
    logic in a unified line of code or, even better, in a parameter is a great move
    in this case.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子告诉我们什么？首先，在制作软件信息系统处理业务定义时，应该非常明确。其次，这些概念往往是业务规则，这意味着它们并不完全稳定，而是取决于业务如何运作。如果有一天你的老板决定客户名单不应该包括在过去三年内没有从你那里购买过任何东西的人，而之前这个期限是五年，那么客户的定义可能会随着时间的推移而改变。如果这种情况注定会时不时地发生，那么当然，限制其对信息系统的影响是至关重要的。将这个逻辑放入统一的一行代码中，或者更好一点，放入一个参数中，在这种情况下是一个很好的举措。
- en: On the contrary, storing the list of customers and their definitions in a single
    table will cause great coupling because the definition (name, address, contacts,
    etc.) will not change when the “customer status” does. If removing a company from
    the customers’ list means you have to delete the entry from your databases, there
    may be an impact on other functions that still need this data (for example, guarantee
    management, accountants, etc.). We will come back to this example in *Chapter
    9* with some more details on how to model it correctly, but for now, please remember
    that business thinking must always guide how your software concepts will work.
    Alignment is not something that arises from nothing or goes both ways—it is driven
    by functions, and the software should blindly follow the business domain ontology.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，将客户列表及其定义存储在单个表中将导致高度耦合，因为当“客户状态”发生变化时，定义（名称、地址、联系方式等）不会改变。如果从客户列表中删除一家公司意味着您必须从数据库中删除条目，那么这可能会影响其他仍需要这些数据的功能（例如，保证管理、会计师等）。我们将在*第9章*中回到这个例子，并详细介绍如何正确建模的一些细节，但就目前而言，请记住，业务思维必须始终指导您的软件概念如何运作。对齐不是从无中生有或双向产生的——它是由功能驱动的，软件应该盲目遵循业务领域本体。
- en: In fact—and this will be the last bit in this section—sticking to the business
    domain reality should even go one step further and in particular stick with it
    *in time*. This means that your model should always accommodate time since the
    business always varies. Change is the only constant in life; businesses cannot
    escape this and rather are highly dependent on it. With ever-changing business
    rules, more and more complex organizations, and higher functional sophistication,
    the information system must be designed from the beginning to accommodate change.
    Management of time is so important that the next chapter will be completely dedicated
    to it.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上——这将是本节最后的要点——坚持业务领域现实甚至应该更进一步，特别是要随时间坚持。这意味着您的模型应该始终适应时间，因为业务总是变化的。变化是生活中唯一不变的因素；企业无法逃避这一点，反而高度依赖于它。随着不断变化的业务规则、越来越复杂的组织以及更高的功能复杂性，信息系统必须从一开始就设计来适应变化。时间管理非常重要，下一章将完全致力于此。
- en: Digression on the digital transformation of companies
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于公司数字化转型的插曲
- en: While we are talking about software representation of the business domains,
    we might as well expand on this and observe how software has “eaten the world”
    (*Why Software Is Eating The World*, Marc Andreessen, 2011) and why this active
    digital transformation relates to the business alignment concepts talked about
    previously. A schema is worth a thousand words, and *Figures 3.1* and *3.2* should
    explain the main difference digital transformation makes to how we operate.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论业务领域的软件表示时，我们不妨进一步探讨这一点，并观察软件是如何“吞噬世界”的（*《软件正在吞噬世界》*，马克·安德森，2011年）以及为什么这种积极的数字化转型与之前讨论过的业务对齐概念相关。一个架构胜过千言万语，*图3.1*和*图3.2*应该解释数字化转型对我们运营方式产生的主要差异。
- en: 'Before the digital transformation, the human operator was at the center of
    the business operations and operated both in the real world and on the computerized
    vision of the business (or parts of it, as we saw earlier):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在数字化转型之前，人工操作员是业务运营的中心，并在现实世界和业务（或其部分，如我们之前所见）的计算机化视图中进行操作：
- en: '![Figure 3.1 – Schema for when the human operator was at the center of business
    operations](img/B21293_03_1.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 当人工操作员在业务运营中心时的架构](img/B21293_03_1.jpg)'
- en: Figure 3.1 – Schema for when the human operator was at the center of business
    operations
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 当人工操作员在业务运营中心时的架构
- en: 'The digital transformation brings a whole new approach where software becomes
    the main tool of operation for the human and operates in the real world on behalf
    of the human user. The hardware and software systems receive orders and signals
    from the human interfaces and the sensors, translate them, and send them back
    to the human operator (through graphical user interfaces) as well as on the concrete
    reality (through mechanical operators or other ways):'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 数字化转型带来了一种全新的方法，其中软件成为人类的主要操作工具，并在现实世界中代表人类用户进行操作。硬件和软件系统从人类界面和传感器接收命令和信号，将它们翻译，并将它们作为图形用户界面发送回人工操作员（以及具体现实，通过机械操作员或其他方式）：
- en: '![Figure 3.2 – Schema for digital transformation](img/B21293_03_2.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 数字化转型的架构](img/B21293_03_2.jpg)'
- en: Figure 3.2 – Schema for digital transformation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 数字化转型的架构
- en: This has a particular consequence that IT is now at the center of the picture,
    interacting both with the real world and with humans. Depending on your point
    of view, computers helped humans to not get their hands dirty with direct interactions,
    or they took us away from direct interactions with the world and all the risks
    associated with potential bias and the wrong representation of reality. Social
    networks are the paramount manifestation of these negative impacts and, as software
    engineers, you should always be aware of this kind of risk and design systems
    accordingly, as their impact on the real world is now well established and people
    working in the field should keep a moral, responsible approach.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这有一个特定的后果，即IT现在处于中心位置，与现实世界和人类进行交互。根据你的观点，计算机帮助人类避免了直接交互带来的麻烦，或者它们使我们远离了与世界的直接互动以及与潜在偏见和现实错误表征相关的所有风险。社交网络是这些负面影响的最重要表现，作为软件工程师，你应该始终意识到这种风险，并相应地设计系统，因为它们对现实世界的影响现在已经确立，该领域的从业人员应该保持道德和负责任的态度。
- en: I hope this made the digital transformation and the interaction between humans
    and computers clearer. Let’s now concentrate on how humans can impact the way
    software is organized and talk about something called Conway’s law.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 希望这使数字转型和人与计算机之间的交互更加清晰。现在让我们集中讨论人类如何影响软件的组织方式，并讨论一个称为Conway定律的东西。
- en: Conway’s law applied to application and systems
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conway定律应用于应用程序和系统
- en: We talked a lot about the limits of so-called “laws of software” in the first
    section of this chapter, so you may wonder why I will now spend several paragraphs
    talking about something that, at first sight, may seem similar. Nothing could
    be more different... Conway’s law is a true, stable guide for information systems
    design, as it does not state a recommendation but draws a theory from multiple
    observations and lets one decide its own conclusion on the subject.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章的第一节中谈了很多关于所谓“软件定律”的局限性，所以你可能想知道为什么我现在会花几段篇幅来谈论一些乍一看可能相似的东西。没有什么能比这更不同了...Conway定律是信息系统设计的真实、稳定的指南，因为它不提出建议，而是从多个观察中提炼出一个理论，并让一个人自己对其主题得出结论。
- en: 'Melvin Conway stated in 1967 that “any organization that designs a system will
    produce a design whose structure is a copy of the organization’s communication
    structure”. In our case study, which is information systems, this means that the
    architecture of the resulting system will reflect the structural organization
    of the team defining it, and this would imply the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Melvin Conway在1967年指出，“任何设计系统的组织都会产生一个结构与其沟通结构相复制的设计”。在我们的案例研究中，即信息系统，这意味着结果系统的架构将反映定义该系统的团队的结构性组织，这会意味着以下内容：
- en: A team with a strong separation between frontend and backend will produce a
    system where these two software functions are indeed independent
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个前端和后端之间有强烈分离的团队将产生一个系统，其中这两个软件功能确实是独立的
- en: A team where people are grouped depending on their business domain knowledge
    will produce an information system with clear-cut business-aligned services
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个根据人们的业务领域知识分组的人将产生一个具有清晰业务对齐服务的信息系统
- en: A team of only one person would give birth to a very cohesive, monolith-like
    system
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个只有一个人的团队将产生一个非常紧密、类似单体系统的系统
- en: A team with no or low communication between its parts would create a system
    where modules do not correctly interoperate with each other
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个部分之间没有或很少沟通的团队将创建一个系统，其中模块之间不能正确地相互操作
- en: This last example may look like an extreme, but, sadly, this is the case with
    most information systems because the teams are generally composed with a single
    piece of software in mind, resulting in many applications composing the system
    without the interoperation having been thought out in advance. Thus, links are
    established in an upon-needed, point-to-point manner, resulting in brittle links
    and inefficient systems.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的例子可能看起来很极端，但遗憾的是，大多数信息系统都是这种情况，因为团队通常是以单一软件组件为出发点组成的，导致许多应用程序组成系统时，事先没有考虑到相互操作。因此，链接是在需要时以点对点的方式建立的，导致脆弱的链接和低效的系统。
- en: Since this initial empirical observation from Conway, the eponym law has been
    verified many times and, though it cannot be demonstrated like a mathematical
    law can, it is nowadays considered something largely reliable. It is considered
    such a strong law that system designers have started using the law to structure
    teams in ways that would bring a desired shape to the resulting system. In this
    approach, the law is not only seen as a consequence but as a helping tool to shape
    the system as needed. What I am talking about comes from my own experience but
    also has been formalized under the name of the **inverse Conway maneuver** since
    many other software engineers have had the same approach. Martin Fowler, for example,
    puts this law forward ([https://martinfowler.com/bliki/ConwaysLaw.html](https://martinfowler.com/bliki/ConwaysLaw.html))
    and even draws a relationship with **domain-driven design** (**DDD**). This will
    be further explained in an upcoming chapter specifically aimed at explaining the
    importance of semantics—related to the concept of ubiquitous language in DDD—in
    designing the parts of an information system.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 自从康威的这一初始经验观察以来，同名的法则已经被验证了许多次，尽管它不能像数学法则那样被证明，但现在被认为是非常可靠的。它被认为是一个如此强大的法则，以至于系统设计者开始使用这个法则以结构化团队的方式，使最终系统呈现出期望的形状。在这种方法中，法则不仅被视为一个后果，而且被视为塑造系统所需的辅助工具。我所谈论的不仅来自我的个人经验，而且已经被正式化，命名为**逆康威机动**，因为许多其他软件工程师也有同样的方法。例如，马丁·福勒（Martin
    Fowler）提出了这个法则（[https://martinfowler.com/bliki/ConwaysLaw.html](https://martinfowler.com/bliki/ConwaysLaw.html)），甚至将其与**领域驱动设计**（**DDD**）联系起来。这将在下一章中进一步解释，该章节专门用于解释与设计信息系统部分相关的语义——与DDD中的通用语言概念相关——的重要性。
- en: Using the inverse Conway maneuver, one can influence the resulting design of
    a system by working on the communication and structure of the teams working on
    designing it. This is a great way to achieve the much-desired business alignment
    that we have talked about since the beginning of the chapter. By defining the
    teams alongside the business domains and giving them business-related concepts
    to talk about with each other, the resulting system will be made of modules with
    clear-cut functional responsibilities and well-structured interoperations between
    modules, favoring the long-time evolution of the resulting system.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用逆康威机动，可以通过影响设计该系统的团队之间的沟通和结构来影响系统的最终设计。这是实现我们自本章开始就讨论的非常需要的业务对齐的绝佳方法。通过定义与业务领域并行的团队，并给他们提供相互讨论的业务相关概念，最终形成的系统将由具有明确功能责任和模块间良好交互操作的模块组成，有利于系统的长期演变。
- en: Influencing the alignment of a system is great, but, most of the time, one will
    be exposed to an existing one, with the only possibility of understanding its
    state. This is where we need a way to analyze the existing alignment, and this
    is where a dedicated method of diagramming is useful.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 影响系统的对齐是很好的，但大多数时候，人们会遇到一个现有的对齐，唯一可能的是理解其状态。这就是我们需要一种方法来分析现有对齐的地方，这就是专门的图表方法有用的地方。
- en: Introducing the CIGREF diagram
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍CIGREF图
- en: As we have seen, business alignment has much to see with vocabulary and the
    right expression of concepts that are related to the functional domains. For those
    of us who are more comfortable with schemas, there exists a more graphical way
    to visualize this alignment, and it is called the **four-layer diagram**.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，业务对齐与与功能领域相关的词汇和概念的正确表达有很大关系。对于我们更习惯于模式的人来说，存在一种更图形化的方式来可视化这种对齐，这被称为**四层图**。
- en: 'In France (where I am from), it has been popularized by the Club Informatique
    des Grandes Entreprises Françaises (a large French company club for software architecture),
    but this is a very widespread way of thinking and no ownership has been claimed
    on this idea, at least that I know of. The concept is quite simple and is about
    separating the different levels of an information system, each using the levels
    I will present to work. At the top of the diagram, one will find the business
    processes that the system serves, and one level down are the business functions
    that are needed for this. These two layers are purely functional and are not even
    related to software; some tasks and functions could be realized by humans without
    any impact. The two technical layers at the bottom are respectively software and
    hardware, the former using the latter. This way of specifying a system (or rather
    its outermost structure) can be schematized as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在法国（我的祖国），它被法国大型企业信息技术俱乐部（一个大型法国软件架构俱乐部）普及，但这是非常普遍的一种思维方式，并且没有人声称拥有这个想法，至少据我所知。这个概念相当简单，是关于将信息系统不同层级分开，每个层级都使用我将要介绍的层级来工作。在图的顶部，人们会找到系统所服务的业务流程，再下一层是为此所需的业务功能。这两个层级完全是功能性的，甚至与软件无关；一些任务和功能可以通过人类实现，而不会产生任何影响。底部的两个技术层级分别是软件和硬件，前者使用后者。指定系统（或更确切地说，其最外层结构）的这种方式可以概括如下：
- en: "![Figure 3.\uFEFF3 – Four-layer diagram](img/B21293_03_3.jpg)"
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.3 – 四层图](img/B21293_03_3.jpg)'
- en: Figure 3.3 – Four-layer diagram
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.3 – 四层图
- en: Let’s dive a bit deeper into each of the levels in the following sections, and
    in particular show how each level’s content is represented in detail, as this
    schema is only symbolic and does not contain the actual contents of each layer.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的几节中深入探讨每个层级，特别是展示每个层级的详细内容是如何表示的，因为这个方案只是象征性的，并不包含每个层级的实际内容。
- en: Important note
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: In the rest of the chapter (and in subsequent parts of the book), we will refer
    often to these four layers or levels by their number, starting from the top (**Level
    1**, **Level 2**, **Level 3**, and **Level 4**). The next section details **Level
    1**, and so on…
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的剩余部分（以及本书的后续部分），我们将经常通过它们的编号来引用这四个层级或水平，从顶部开始（**层级 1**、**层级 2**、**层级 3**和**层级
    4**）。下一节将详细介绍**层级 1**，以此类推...
- en: Process level
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 流程层级
- en: A business process is a series of tasks organized toward reaching a defined
    objective. Since we talk about IT, at least some of them will of course be automated,
    but there can be man-activated tasks as well. Processes are used to structure
    a business or any organization’s activities, and **business process modeling**
    (this is the accepted name) is about representing these to document, better comprehend,
    and improve the efficiency of the entity.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 业务流程是一系列旨在达到既定目标的任务。由于我们谈论的是 IT，其中当然至少有一些将是自动化的，但也可以有由人类激活的任务。流程用于结构化业务或任何组织的活动，**业务流程建模**（这是接受的名字）是关于表示这些以记录、更好地理解并提高实体的效率。
- en: 'There is a standard for business process representation, namely **BPMN**, which
    stands for **Business Process Modeling and Notation**. This standard currently
    is in version 2.0\. You certainly have already seen this kind of diagram, which
    reads itself:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 存在一种业务流程表示的标准，即 **BPMN**，代表 **Business Process Modeling and Notation**。这个标准目前是
    2.0 版本。你肯定已经见过这种图表，它自己就能读：
- en: '![Figure 3.4 – BPMN example](img/B21293_03_4.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.4 – BPMN 示例](img/B21293_03_4.jpg)'
- en: Figure 3.4 – BPMN example
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.4 – BPMN 示例
- en: 'In this very short and undetailed example of a new process in a company, you
    will find the most used components of the BPMN standard:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个公司新流程的非常简短且不详细的例子中，你会发现 BPMN 标准中最常用的组件：
- en: Tasks are boxes, generally filled with text starting with a verb describing
    the activity represented. Icons inside the task may specify whether it is automated,
    has user inputs, is entirely manual, etc.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务是带有文本的盒子，通常以动词开头，描述所表示的活动。任务内的图标可能指定它是否是自动化的、有用户输入、完全是手工的等。
- en: Arrows between tasks indicate the flow of information in the process and, as
    a consequence, the order in which the tasks are processed.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务之间的箭头表示流程中的信息流，以及任务处理的顺序。
- en: Diamond-shaped boxes intervene in this stream of information to incorporate
    complexities such as choices or parallel activities.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菱形框会介入这个信息流中，以包含诸如选择或并行活动等复杂性。
- en: Events are represented by circles. A process will always have a start and one
    or more ends. It can also have intermediate events and all those can reflect types
    of events, such as time-based, message-based, etc.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件由圆圈表示。一个流程总会有一个开始和一个或多个结束。它也可以有中间事件，所有这些都可以反映事件类型，如基于时间的、基于消息的等。
- en: Tip
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: For more information about BPMN, I strongly recommend studying the BPMN poster
    available at [http://www.bpmb.de/index.php/BPMNPoster](http://www.bpmb.de/index.php/BPMNPoster).
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 关于BPMN的更多信息，我强烈建议研究可从[http://www.bpmb.de/index.php/BPMNPoster](http://www.bpmb.de/index.php/BPMNPoster)获取的BPMN海报。
- en: Though Layer 1 of the CIGREF diagram is mostly based on BPMN diagrams, as they
    are the standard for business processes representation and the main subject of
    this layer, one can also find in this layer some additional information that goes
    together. For example, business domain-related rules can be specified as **DMN**
    (**Decision Modeling Notation**) and are added to this first level, as they have
    impacts on the business processes themselves. DMN is, by the way, a “sub-norm”
    included in the BPMN standard.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管CIGREF图的第一层主要基于BPMN图，因为它们是业务流程表示的标准和这一层的主要内容，但在这个层次中也可以找到一些附加信息，这些信息是相互关联的。例如，可以指定与业务领域相关的规则为**DMN**（**决策建模符号**），并将其添加到这一级，因为它们对业务流程本身有影响。顺便说一下，DMN是BPMN标准中包含的一个“子规范”。
- en: 'Depending on what one tries to obtain, the layer one map may be very coarse
    and with few details. This is an example from an animal genetics company I advised,
    which already had a complete ISO-9001 diagramming of its processes and simply
    needed to know which parts of the information system related to which business
    process (intentionally blurred for confidentiality reasons):'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 根据想要获得的内容，第一层地图可能非常粗糙，细节很少。这是一个我从一家动物遗传学公司那里得到的例子，该公司已经对其流程进行了完整的ISO-9001图示，只需知道哪些信息系统部分与哪些业务流程相关（出于保密原因有意模糊）：
- en: '![Figure 3.5 – Example of a processes map](img/B21293_03_5.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图3.5 – 流程图的示例](img/B21293_03_5.jpg)'
- en: Figure 3.5 – Example of a processes map
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 流程图的示例
- en: Since this customer of mine did not have any problem with the processes themselves,
    their representation remained very light during the whole alignment project. The
    only subtlety in this was that operational processes had been separated from support
    processes and piloting ones.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我的这位客户在流程本身上没有问题，在整个对齐项目中，其表示保持得很简单。这里的唯一微妙之处在于，运营流程已经与支持流程和试点流程分开。
- en: 'Contrarily, the following diagram is only one of many processes in layer 1
    of a map I created for another customer, this time an organization where IT problems
    mainly came from a lack of definition in the processes (and, of course, when objectives
    are not clear, it is hard to have an efficient IT system). In the following diagram,
    the readability of the text is not intended, as I only want you to look at the
    overall process diagram:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，以下图是我为另一位客户创建的地图中第一层众多流程之一，这次是一个IT问题主要来自流程定义不足（当然，当目标不明确时，很难有一个高效的IT系统）的组织。在以下图中，文本的可读性不是目的，因为我只想让你看整体流程图：
- en: '![Figure 3.6 – Detailed process](img/B21293_03_6.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图3.6 – 详细流程](img/B21293_03_6.jpg)'
- en: Figure 3.6 – Detailed process
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – 详细流程
- en: Layer 1 is of course the most important level of the map of your information
    system because nothing depends on it. All other levels depend on the one above,
    but the processes layer has to be designed from scratch, purely based on the business
    domain knowledge. And, as explained, if processes are not clear or badly designed,
    this will of course affect the software and, in time, the efficiency of the whole
    information.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 第一层当然是你的信息系统地图中最重要的一层，因为没有任何东西依赖于它。所有其他层都依赖于它，但流程层必须从头开始设计，纯粹基于业务领域知识。而且，正如所解释的，如果流程不清晰或设计不当，这当然会影响软件，随着时间的推移，也会影响整个信息系统的效率。
- en: It is hard to stress enough how important this layer is. This does not mean
    that it has to be drawn with many details; these are only necessary once someone
    spots a problem in the process and needs to know it in depth to improve or correct
    it. But the first layer has got to be correct and cover the whole perimeter of
    the organization.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 强调这一层的重要性很难过分。这并不意味着它必须用很多细节来绘制；这些细节只有在有人发现流程中的问题并需要深入了解以改进或纠正它时才是必要的。但第一层必须正确，并涵盖整个组织的范围。
- en: Functional level
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 功能层
- en: The second level of the CIGREF map indicates what functions can be used by the
    tasks of the processes above to realize them. This is still a functional layer,
    but this time, the organization is different as the atoms of this layer are about
    who can do what.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: CIGREF地图的第二层表明了上述流程的任务可以使用哪些功能来实现。这仍然是一个功能层，但这次，组织不同，因为这个层的原子是关于谁可以做什么。
- en: There are indeed functions that do not vary with processes. Business processes
    must be able to change according to strategy, but some things remain stable. In
    our example shown in *Figure 3**.3*, to welcome a newcomer to a company, one of
    the tasks was to take his or her picture. This may be useful for other things
    in other processes, but the very act of taking a picture is a function of the
    organization, may be realized by a given person, and necessitates dedicated materials
    such as a camera. It is thus a function and has to be registered in this second
    layer. Many processes may point to it, but the function will remain in one place
    on the second-level map, together with its stable attributes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 确实存在一些不随流程变化的函数。业务流程必须能够根据战略进行变化，但有些事情是稳定的。在我们的*图3.3*示例中，欢迎新员工加入公司的一项任务是拍摄他们的照片。这可能对其他流程中的某些事情有用，但拍照这一行为是组织的一部分，可能由特定的人来完成，并需要专门的材料，如相机。因此，这是一个函数，必须在这一层进行登记。许多流程可能会指向它，但这个函数将在第二级地图的一个地方保持不变，与其稳定的属性一起。
- en: 'Some of the most important of these attributes are linked to the organization
    of the functions inside the organization. Things may vary, and there is no fixed
    standard for this, but there is at least a good metaphor that has been used for
    decades and bears good results, which consists of creating a parallelism between
    information systems and cities’ organizations (in France, this approach is called
    “urbanization”). This metaphor leads to decomposing the second layer of the CIGERF
    map in three levels of depth:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些最重要的属性与组织内部函数的组织有关。事情可能会变化，没有固定的标准，但至少有一个使用了数十年的好隐喻，并且取得了良好的效果，即创建信息系统与城市组织之间的平行关系（在法国，这种方法被称为“城市化”）。这个隐喻导致将CIGERF地图的第二层分解为三个深度的层次：
- en: '**Zones/areas** are the larger groups in the layer. They correspond to how
    the whole system (or city, in our metaphor) is organized. In a city, one will
    find commercial, industrial, and living areas that are generally clearly separated;
    one should find the same in the functional layer.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**区域/区域**是这一层中的较大群体。它们对应于整个系统（或在我们的隐喻中，城市）的组织方式。在一个城市中，人们会发现商业、工业和居住区通常明显分开；在功能层中也应该找到同样的情况。'
- en: '**Quarters/neighborhoods** are a finer subdivision corresponding to the local
    organization of a system, with people, businesses, or, in our case, IT functions
    potentially talking to each other.'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**季度/邻里**是对系统本地组织的一种更细的划分，其中人们、企业，或者在我们的案例中，IT功能可能会相互交流。'
- en: '**Blocks/islands** are the fine divisions inside which people know each other
    and interact often. In the corresponding IT definition, these contain functions
    that are closely related because they use the same tool or because the same team
    operates them.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**块/岛屿**是人们相互认识并经常互动的精细划分。在相应的IT定义中，这些包含使用相同工具或由相同团队操作的相关函数。'
- en: I am often asked what kind of decomposition should be used, at least for the
    top-most level. This is a difficult one, as the **business capability map** (**BCM**)
    (as this second layer of the CIGREF map is often called) is most of the time simply
    non-existent in companies. Lots of them have a clear view of their processes due
    to ISO 9001 certification and the relative standardization of the approach. Companies
    can also track down their software layer, at least for the biggest blocks for
    which they are billed. But in the middle, this BCM is quite often forgotten, and
    we will see a bit further that this is the source of loss of misalignments in
    the systems.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常被问及应该使用什么样的分解方法，至少对于最高层来说。这是一个难题，因为**业务能力地图**（**BCM**）（正如这个CIGREF地图的第二层经常被称呼）在大多数公司中实际上是不存在的。由于ISO
    9001认证和相关方法的标准化，许多公司对自己的流程有清晰的了解。公司也可以追踪他们的软件层，至少对于他们被收费的最大块来说是这样。但在中间，这个BCM经常被遗忘，我们将在稍后看到，这是系统不匹配损失的原因。
- en: The fact that this layer is forgotten is in itself a big part of the problem
    in many information systems, as leaders may favor the process layer (the objectives)
    and put less effort into the BCM (how to realize them). Yet, a vision without
    a plan is just a wish, as the proverb says, and a well-crafted functional organization
    of the system is a great step forward to success.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层被遗忘的事实本身在很多信息系统的问题中就占据了很大一部分，因为领导者可能更倾向于过程层（目标）而投入较少的努力在业务连续性管理（如何实现它们）上。然而，正如谚语所说，没有计划的愿景只是愿望，而精心构建的系统功能组织是迈向成功的一大步。
- en: 'In this metaphor with urban development, the business capability map is cut
    in the same way that would be associated with the composition of a large city;
    just like there are industrial, commercial, and living areas in a city, there
    will be a global organization in an information system, often in the following
    five areas:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个与城市发展相关的隐喻中，业务能力图被切割的方式与一个大城市的组成相关联；就像城市中有工业、商业和居住区一样，在信息系统中也将会有一个全球组织，通常在以下五个区域：
- en: '**Master data management** is where the most important data of the information
    system is managed (customers, products, etc.). This data will be used by many
    parts and actors of the system. As such, it deserves dedicated governance (a clear
    definition of who is in charge, with what practices and tools, etc.) and to have
    its own dedicated zone in the second layer of the map. When governance is not
    clear on such important data, it often happens that different groups will duplicate
    them, which is not only costly but can bring complicated problems when exchanges
    need to be realized.'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**主数据管理**是信息系统最重要的数据被管理的地方（客户、产品等）。这些数据将被系统的许多部分和参与者使用。因此，它值得专门的治理（明确的责任定义、实践和工具等）并在地图的第二层拥有自己的专用区域。当对如此重要的数据缺乏明确的治理时，常常发生不同的小组会重复它们，这不仅成本高昂，而且在需要实现交换时可能会带来复杂的问题。'
- en: '**Shared tools** are not data but still commonly used functions that one will
    refer to in many other parts of the information system and most processes’ tasks.
    They are often classified in a dedicated zone, where one will find office automation
    tools, content management software, identity and authorization management, and
    so on.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**共享工具**不是数据，但仍然是将在信息系统和大多数流程任务的其他许多部分中引用的常用功能。它们通常被分类在专门的区域，在那里可以找到办公自动化工具、内容管理系统、身份和授权管理等等。'
- en: '**Externally oriented functions** (sometimes called “collaborative”) are for
    all functions that are about interoperation or exchange with functions that are
    outside the scope of the information system itself. This is typically where one
    will find an extranet or commercial websites, connections with partners, etc.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**面向外部的功能**（有时称为“协作”）是关于与信息系统本身范围之外的功能进行互操作或交换的所有功能。这通常是人们会找到外联网或商业网站、与合作伙伴的联系等地方。'
- en: '**Governance/piloting** is the zone where functions used to supervise the system
    itself will be found. Reporting functions will be placed there, as well as key
    performance indicators, high-management functions, and so on.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**治理/试点**是那些曾经用于监督系统本身的功能所在的区域。报告功能将被放置在那里，以及关键绩效指标、高层管理功能等等。'
- en: '**Business-oriented functions** are the last, but not least, area. This is
    where a company will organize all the functions corresponding to its core value
    and operational domain. If you are a company that builds mechanical parts, you
    will find there all the functions associated with engineering, production, stocks,
    selling, maintenance, and installation. If you work in e-business, there will
    be buying and selling functions, logistics, web operation, security, etc. There
    will also be some groups of functions that support the core business, such as
    human resources, legal, and administrative functions, which are general to most
    companies. When the entity is well organized, it is evident (and proof of good
    alignment) that the quarters in this zone correspond to the different directions
    in the organizational chart. Conversely, if it is hard for you to tell whether
    a given function is under such a direction or service, this may be a sign of a
    lack of alignment.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**面向业务的职能**是最后但同样重要的一个领域。这是公司组织与其核心价值和运营领域相对应的所有职能的地方。如果你是一家制造机械部件的公司，你将在这里找到所有与工程、生产、库存、销售、维护和安装相关的职能。如果你从事电子商务，将会有买卖职能、物流、网络运营、安全等。还将有一些支持核心业务的职能组，如人力资源、法律和行政职能，这些在大多数公司中都是通用的。当实体组织得很好时，这一区域的不同方向与组织结构图中的不同方向相对应是显而易见的（并且是良好一致性的证明）。相反，如果你很难判断某个特定的职能是否属于这样的方向或服务，这可能是一个缺乏一致性的迹象。'
- en: 'The next figure is an example of a BCM that follows the five zones principle,
    with the main one decomposed following the organizational chart directions. Again,
    this is just a commonly observed pattern and not a recommendation whatsoever.
    One should adjust the BCM decomposition as one sees fit to obtain alignment. Again,
    in terms of the text readability of the following diagram, the text content is
    not important but only the structure:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个图例是一个遵循五个区域原则的 BCM，主要部分按照组织结构图的方向进行分解。再次强调，这只是一个常见的模式，并不构成任何推荐。应根据个人判断调整
    BCM 的分解以实现一致性。再次强调，就以下图表的文本可读性而言，文本内容并不重要，重要的是结构：
- en: '![Figure 3.7 – BCM example](img/B21293_03_7.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.7 – BCM 示例](img/B21293_03_7.jpg)'
- en: Figure 3.7 – BCM example
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.7 – BCM 示例
- en: 'For the anecdote, these five areas are also found in the French government’s
    information system BCM, with the four supporting areas surrounding and the business-oriented
    functions in the middle, which are, in this context, separated by the different
    ministries the French government is composed of. I’ve highlighted the separations
    with black lines, as that is what I intended to show you (the readability of text
    is not intended):'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个轶事，这五个区域也出现在法国政府的信息系统 BCM 中，四个支持区域围绕在中间，而面向业务的职能位于中间，在这个背景下，由法国政府组成的各个部门将其分开。我用黑色线条突出了这些分隔，因为这正是我想展示的（文本的可读性并不是目的所在）：
- en: '![Figure 3.8 – French government BCM](img/B21293_03_8.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.8 – 法国政府 BCM](img/B21293_03_8.jpg)'
- en: Figure 3.8 – French government BCM
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.8 – 法国政府 BCM
- en: We will come back to the importance of this second layer of the CIGREF. As stated,
    the first one indicates the vision and what value brings the company to the market,
    but the second is about how to operationally implement this vision, and this is
    where things are lacking in disorganized information systems. In the dozens of
    information systems I have been able to watch or help refine, the BCM is *always*
    the least-controlled layer. This absence of correct handling of it is the root
    cause of the information system not giving satisfaction.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将回到 CIGREF 第二层的重要性。正如所述，第一层表明了愿景以及公司为市场带来的价值，但第二层则是关于如何操作性地实施这一愿景，这正是无序信息系统所缺乏的地方。在我能够观察或帮助精炼的数十个信息系统中，业务连续性管理（BCM）总是最不受控制的层。这种对它的错误处理是信息系统无法令人满意的根本原因。
- en: Software layer
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件层
- en: 'With the next two layers of the CIGREF map, we enter the realm of technology.
    For now, processes and functions were purely business-related and one could very
    well use them for a computer-free information system. But this is not what we
    have today, and the subject of analysis in this book. We will work on computer-based,
    at least partially automated systems here, and the two technical layers that the
    top ones rely on are about implementing the function with computers. Their separation
    is extremely easy: the third layer is everything that is “soft”, which means immaterial,
    virtual, and non-concrete, whereas the fourth layer groups everything that is
    concrete. To say it as simply as possible: if you can touch it (computer, network
    cables, appliances, data centers —even if the walls do not belong to you), it
    will go to the next layer that we will cover a bit later. If it is technical but
    not “touchable”, such as a software application, a database, a stream of information,
    an API implementation, etc., it belongs in the third level in the CIGREF map,
    which we will detail right now.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在CIGREF地图的下一两层中，我们进入了技术的领域。到目前为止，流程和功能完全是业务相关的，一个人完全可以使用它们来构建一个无计算机的信息系统。但今天我们并不是这样，这本书的分析主题也不是这个。我们将研究基于计算机的系统，至少部分是自动化的系统，而上面两层所依赖的两个技术层是关于用计算机实现功能的。它们的分离非常简单：第三层是所有“软”的东西，这意味着非物质的、虚拟的和非具体的，而第四层则将所有具体的东西分组。简单来说：如果你能触摸到它（计算机、网络电缆、设备、数据中心——即使墙壁不属于你），它将进入我们稍后将要覆盖的下一层。如果它是技术性的但不可“触摸”，例如软件应用、数据库、信息流、API实现等，它属于CIGREF地图的第三层，我们马上会详细说明。
- en: 'This third level is in general quite easy for the companies to create in its
    first implementation: looking at bills and asking people what software they use
    is generally enough to find out the 80% most important uses of software in your
    system. But, even if exhaustive referencing is not the goal, this may not be enough
    for two reasons.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个第三层在第一次实施时通常对公司来说相当容易：查看账单并询问人们他们使用什么软件，通常足以找出系统中软件的80%最重要的用途。但是，即使详尽的参考不是目标，这也可能不足以两个原因。
- en: First, there may be some “hidden” software that has been bought by a service
    without the company knowing (this is called **shadow IT** and can be a problem
    where maintenance or strong ownership is needed). There is a risk that they will
    not appear on the map if they are strategic, and this might become a problem also
    if people using them suddenly leave and the associated functions collapse without
    anyone understanding why. If you have heard stories of a company having software
    problems after a key person retired, this is what we are talking about.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，可能存在一些公司不知情的情况下购买的“隐藏”软件（这被称为**影子IT**，可能是一个需要维护或强烈所有权的难题）。如果这些软件是战略性的，它们可能不会出现在地图上，而且如果使用它们的人突然离开，相关的功能在没有人的理解下崩溃，这也可能成为一个问题。如果你听说过某个公司在关键人物退休后出现软件问题，这就是我们要讨论的内容。
- en: The second problem is that software is not only applications but also data,
    and data is usually harder to locate and follow in a system. Sure, you can locate
    databases with their commercial licenses or the IP and port they use. But you
    will find data in so many other places, such as dreaded Excel worksheets. Again,
    who has not heard of an Excel workbook that was so important for the company that
    everyone knew about it? In one of the companies I accompanied in business/IT alignment,
    there was “Serge’s Excel file”, which everyone kept telling me about when I was
    trying to figure out where the source of truth was for the articles and prices
    for the company. It turned out that, in this company of almost a thousand employees,
    there was no governance at all on product information management, and this person
    called Serge, at some point when he desperately needed the information, took the
    job of collecting the data from commerce, administration, and engineering and
    putting it together in an Excel workbook, trying his best to follow the changes,
    new products, end-of-life dates, changes in price, etc. As this was not his primary
    job, he had little time to do so and the content of the file was neither complete
    nor free from errors. But since this was the only source of data available, everybody
    quickly copied Serge’s file or referred to it with server links. The managers
    never considered the fragility of this approach to a hugely important source of
    data (maybe even the primary referential of a commercial company together with
    the list of customers), and guess what happened when Serge eventually left the
    company? The system slowly decayed because it was nobody’s job to maintain the
    one-person, non-documented work. Information became dirtier, orders started to
    be false, prices could not be adjusted because most people using the information
    in the file or in the connectors that had been created on it had no clue where
    the data was coming from, etc.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个问题是，软件不仅包括应用程序，还包括数据，而数据通常在系统中更难定位和追踪。当然，你可以通过它们的商业许可证或使用的IP和端口来定位数据库。但你会发现数据存在于许多其他地方，比如令人讨厌的Excel工作表。再次强调，谁没有听说过一份对公司来说如此重要的Excel工作簿，以至于每个人都听说过它？在我陪同的一家在业务/IT对齐的公司中，有一个叫做“Serge的Excel文件”，当我试图弄清楚公司文章和价格的真实来源时，每个人都向我提起过这个文件。结果发现，在这个近千人的公司中，根本没有任何产品信息管理的治理，而这个名叫Serge的人，在某个他急需信息的时候，承担了从商业、行政和工程收集数据并将其汇总到Excel工作簿中的任务，尽力追踪变化、新产品、停售日期、价格变动等。由于这不是他的主要工作，他几乎没有时间这样做，文件的内容既不完整也不免出错。但既然这是唯一可用的数据来源，每个人都迅速复制了Serge的文件或通过服务器链接引用它。管理者们从未考虑过这种对如此重要数据来源（也许甚至是一家商业公司的首要参考，连同客户名单）的脆弱方法。当Serge最终离开公司时，发生了什么？系统逐渐恶化，因为没有人负责维护这个单个人的、未记录的工作。信息变得混乱，订单开始出错，价格无法调整，因为大多数使用文件或在其上创建的连接器中的信息的人根本不知道数据从何而来，等等。
- en: One may object that what I am talking about is not part of the third layer but
    relates to the second one, and indeed, master data management and data governance
    and ownership have to be detailed on the second level. But in this case, I wanted
    to show that a poor technical implementation (which definitely belongs to the
    third layer) and a lack of understanding about where the data in its software
    form stands were the root of the problem that went right up to the first level
    of the map and derailed two of the main processes of the company, namely production,
    and sales.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会反对说，我所谈论的并不是第三层的一部分，而是与第二层相关，确实，主数据管理、数据治理和所有权必须在第二级详细说明。但在这个案例中，我想表明，糟糕的技术实现（这肯定属于第三层）以及对软件形式中的数据位置缺乏理解是问题的根源，这个问题直接影响到地图的第一层，并导致公司的两个主要流程——生产和销售——脱轨。
- en: 'Categorizing the content of this third layer really depends on a lot of factors.
    Some companies with strong internal IT and programming capacities will tend to
    have the applications and data grouped by the technical team that operates on
    it. I have seen others grouping the software layer by technology, as their main
    concern was to operate the technologies internally even though they were—for the
    most part—bought on the shelf. In some cases, software can be sorted by editors.
    And there are many other ways to sort it. In the next example (once again blurred
    for confidentiality reasons), the cutting has been done using functional domains,
    as the company was quite big and the software application and data’s responsibility
    had been affected by the business directions and services (which is quite a good
    practice, as software should always be at the service of the functions):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对这一第三层内容的分类实际上取决于许多因素。一些拥有强大内部IT和编程能力的公司倾向于由操作该技术的技术团队对应用程序和数据分组。我也见过其他人按技术对软件层进行分组，尽管他们的大部分技术是现成的，但他们的主要关注点是内部操作这些技术。在某些情况下，软件可以按编辑进行分类。还有许多其他分类方式。在下一个例子（再次为了保密原因而模糊处理）中，切割是使用功能域进行的，因为公司相当大，软件应用程序和数据的责任受到了业务方向和服务的影响（这是一个很好的实践，因为软件应该始终服务于功能）：
- en: '![Figure 3.9 – Software layer](img/B21293_03_9.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9 – 软件层](img/B21293_03_9.jpg)'
- en: Figure 3.9 – Software layer
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 软件层
- en: Hardware layer
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件层
- en: As explained before, the hardware layer lists and organizes everything from
    the information system that is concrete. After all, the important bits of computerized
    systems are data and virtual functions that dramatically accelerate the processes,
    but we should never forget that, even though in a remote cloud location nobody
    really cares, all this is realized by electrons flowing in electronic chips and
    board, with power supplies, cabling, hard disks, and screens somewhere.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，硬件层列出了并组织了从具体的信息系统到的一切。毕竟，计算机化系统的重要部分是数据和虚拟功能，它们极大地加速了过程，但我们绝不能忘记，即使在遥远的云位置没有人真正关心，所有这一切都是由电子在电子芯片和电路板中流动实现的，还有电源、电缆、硬盘和屏幕。
- en: 'This layer is nowadays very standardized and under control and, in dozens of
    information systems where I have analyzed shortcomings in alignment and performance,
    virtually none of them exposed this limitation due to a hardware problem. In fact,
    it is so rare that in most of the CIGREF maps I have done, the fourth layer is
    very thin, with almost no details, or sometimes it’s not even represented at all.
    For example, if we take the big picture of the different layers I have shown you
    as samples, it so happens that nothing was represented for the hardware layer:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这个层现在非常标准化并且受到控制，在我分析过的数十个信息系统中，几乎没有一个因为硬件问题暴露出这种限制。事实上，这种情况如此罕见，在大多数我制作的CIGREF地图中，第四层非常薄，几乎没有细节，有时甚至根本不表示。例如，如果我们看我所展示的不同层的整体图景作为样本，那么硬件层就没有任何表示：
- en: "![\uFEFFFigure 3.10 – Three layers only (the readability of the text is not\
    \ intended)](img/B21293_03_10.jpg)"
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – 只有三层（文本的可读性并非目的）](img/B21293_03_10.jpg)'
- en: Figure 3.10 – Three layers only (the readability of the text is not intended)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 只有三层（文本的可读性并非目的）
- en: Luckily, something that company owners know very well will always remind us
    of the existence of this layer, namely their costs. And even if the machines are
    more and more virtualized and made invisible, the financial costs are still there.
    With time, the ecological impact of information systems and data centers eventually
    also becomes a part of the equation, making this layer more visible as well.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，公司老板们非常清楚的一件事会始终提醒我们这一层的存在，那就是他们的成本。即使机器越来越虚拟化，变得无形，财务成本仍然存在。随着时间的推移，信息系统和数据中心的环境影响最终也成为方程的一部分，使得这一层变得更加明显。
- en: If you have to draw a hardware layer, you will find lots of excellent diagramming
    systems that distinguish between server types, can provide dedicated icons and
    metadata so you can list hardware atoms separately, etc. All in all, again, this
    is a very controlled and standardized layer, which certainly explains why we rarely
    have to work on it when talking about IT alignment, other than referring to it
    to complete the software costs and balancing the sum to the benefits expected
    from the first two layers.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你必须绘制一个硬件层，你会发现很多优秀的绘图系统，它们可以区分服务器类型，可以提供专用图标和元数据，以便你可以单独列出硬件原子等。总的来说，再次强调，这是一个非常受控和标准化的层，这确实解释了为什么在谈论IT对齐时，我们很少需要在这个层上工作，除了引用它来完成软件成本和平衡第一、第二层预期的收益。
- en: 'To provide an example of a hardware layer, here is a chronological series of
    such a layer diagram in a company that progressively externalized its IT (the
    orange bits were servers operated directly by the IT service):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提供一个硬件层的例子，这里是一个公司在逐步外部化其IT（橙色部分是直接由IT服务操作的服务器）中的这样一个层图的时间序列：
- en: '![Figure 3.11 – Hardware layer](img/B21293_03_11.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图3.11 – 硬件层](img/B21293_03_11.jpg)'
- en: Figure 3.11 – Hardware layer
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11 – 硬件层
- en: Due to the relatively low importance of the representation of this layer (and
    not of the layer itself, of course), we will not go deeper into descriptions of
    how to use the diagram to map a hardware layer. The groupings, also, are quite
    obvious; most of the time, they are based on data centers with the physical location
    on the top, separate physical servers, then virtual machines, etc. Networks are
    also represented with standard symbols and, all in all, diagrams are generic for
    this layer.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个层（当然不是层本身）的表示相对较低的重要性，我们不会进一步深入描述如何使用该图来映射硬件层。分组也很明显；大多数情况下，它们基于数据中心，物理位置在顶部，然后是独立的物理服务器，接着是虚拟机等。网络也用标准符号表示，总的来说，对于这个层，图是通用的。
- en: Using the four-layer diagram
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用四层图
- en: The principles of the CIGREF mapping should now be clear, so we can see how
    to use this technique to improve alignment and, thus, the efficiency of the information
    systems. As said, the first action to take when taking control of a system is
    to create a map of it. Otherwise, there is simply no way to be comfortable with
    handling such complex sets. This means of course that creating the map for the
    existing state of the information system is the very first action to take, and
    a CIGREF map is great for that. But lots of questions still remain on how to do
    so. This section contains a few battle-proven pieces of advice on how to use the
    mapping technique.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: CIGREF映射的原则现在应该已经很清晰了，因此我们可以看到如何使用这项技术来提高对齐度，从而提高信息系统的效率。正如所说，在接管一个系统时采取的第一个行动就是创建它的映射。否则，简单地没有方法能够舒适地处理这样复杂的集合。这意味着当然，为现有状态的信息系统创建映射是首先要采取的行动，而CIGREF映射非常适合这个目的。但关于如何做到这一点仍然有很多问题。本节包含了一些经过实战检验的建议，关于如何使用映射技术。
- en: As an important note, do not worry if you do not know precisely how to use the
    CIGREF method by the end of this chapter. For now, I will just show you how to
    draw it and how to spot problems of business/IT alignment in it, but the rest
    of the book will present lots of other examples of the CIGREF map in action for
    many different purposes. This means it will hopefully become clearer how powerful
    it is in analyzing and structuring an information system and you should not feel
    concerned if you do not know yet precisely how it is going to be used in practice.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一条重要提示，不要担心你在本章结束时还没有确切地知道如何使用CIGREF方法。现在，我将只向你展示如何绘制它以及如何在其中发现业务/IT对齐的问题，但本书的其余部分将展示许多CIGREF映射在实际中用于许多不同目的的例子。这意味着它将有望变得更加清晰，它在分析和构建信息系统方面的强大功能，你不应该因为还不确切知道它在实践中将如何被使用而感到担忧。
- en: What should we map?
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们应该映射什么？
- en: First of all, one should never map the entire system in detail. It is, of course,
    essential to have a coarse map covering the whole perimeter of it to understand
    what we are dealing with, but only the parts of the system that need attention
    should be mapped in detail. That may sound obvious, but there have been so many
    times with teams I’ve advised where I realized, a few weeks after explaining the
    method, that they had diagrammed absolutely everything in the information system.
    Thus, this advice needs to be put forward.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，一个人永远不应该详细绘制整个系统。当然，有一个覆盖整个周界的粗略地图来了解我们正在处理什么是至关重要的，但只有需要关注的系统部分应该被详细绘制。这听起来可能很显然，但在我所指导的团队中，有很多次在解释了方法几周后，我意识到他们已经详细绘制了信息系统的每一部分。因此，这个建议需要被提出。
- en: It just seems like a natural reaction, in particular for teams with heavy problems
    in their system, to map everything, as it gives a sensation of recovering a bit
    of control. Sadly, this is not only a waste of time during the creation of the
    map, but also a waste of time afterward, when people will try and adjust the diagram
    following the evolution of the system. This is not what system diagramming is
    for. The map is used to anticipate evolution and force it as much as possible
    in the direction we have decided. Thus, it should only be done in detail on parts
    of the system that we are working on. Diagramming in advance is a waste because
    we will have to do it again once we get to work on this portion of the system
    in most cases. Mapping everything is a waste of time for the same reason, and
    even more, because there are (hopefully) parts of the system we will never work
    on, simply because they work fine already!
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎是一种自然的反应，特别是对于系统中有严重问题的团队来说，绘制一切，因为它给人一种恢复一点控制感的感觉。遗憾的是，这不仅是在创建地图时的浪费时间，而且在人们试图根据系统的演变调整图表时也是浪费时间。这不是系统绘图的用途。地图是用来预测演变并在尽可能多的方向上推动它的。因此，它只应该在我们正在工作的系统部分进行详细绘制。提前绘制是浪费，因为我们大多数情况下在开始处理这个系统部分时还得重新绘制。同样，绘制一切也是浪费时间，而且更多，因为（希望）系统中有一些部分我们永远不会处理，仅仅是因为它们已经运行得很好了！
- en: Again, that may sound obvious when explained but, when one starts mapping an
    information system, there seems to be some kind of frenzy mapping happening and
    I have seen many times well-educated and experienced people realizing that they
    had worked for nothing (the best example I have is an organization with thousands
    of employees where the IT team had diagrammed a process for establishing badges
    to access the internal restaurant; this diagram was of course never used and certainly
    not even read by anyone else than its creators).
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，当解释时这听起来可能很显然，但当一个人开始绘制一个信息系统时，似乎会发生某种狂热的绘制过程，我见过很多受过良好教育且有经验的人意识到他们白费力气了（我最好的例子是一个拥有数千名员工的组织，其IT团队为建立进入内部餐厅的徽章绘制了一个流程图；当然，这个流程图从未被使用过，甚至除了它的创作者外没有人读过）。
- en: 'The following schema visually explains how a map should evolve in time, with
    parts of a system being detailed only when needed:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方案从视觉上解释了地图应该如何随时间演变，只有当需要时才详细绘制系统的部分：
- en: '![Figure 3.12 – Mapping evolution](img/B21293_03_12.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图3.12 – 绘制演变](img/B21293_03_12.jpg)'
- en: Figure 3.12 – Mapping evolution
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 – 绘制演变
- en: 'One of the other consequences of this—and more subtle—is that the parts of
    the information system that have been diagrammed in detail should, after the diagram
    has been used to improve them, not be updated anymore. In Figure 3.12, this is
    what happens to the quarter that had been refined in the second step. In the fourth
    step, it is not detailed anymore. That may sound counterintuitive; indeed, once
    the effort has been made to detail this quarter, why just abandon it? The same
    reason applies: if this quarter is now well organized and alignment has been reached
    between business and IT, there is a chance that either we will not come back to
    it or, if we do, the map will have changed. So why bother wasting time on it?'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的另一个后果——而且更为微妙的是——那就是那些已经详细绘制的信息系统部分，在地图被用来改进它们之后，就不再需要更新了。在图3.12中，这就是第二步骤中已经细化的四分之一所发生的事情。在第四步骤中，它不再详细了。这听起来可能有些反直觉；的确，一旦对这部分进行了详细的工作，为什么就放弃它呢？同样的原因适用：如果这部分现在组织得很好，并且业务和IT之间已经达到一致，那么我们可能不会回到它这里，或者如果我们确实回到了这里，地图可能已经改变了。那么为什么还要浪费时间在上面呢？
- en: How to start drawing a four-layer diagram
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何开始绘制四层图
- en: 'Starting with an empty sheet is always difficult; it is even more difficult
    when the IT problems are such that the activity of the company is impacted. To
    ease starting the mapping activity, it is sometimes easier to use paper or a whiteboard
    to give a first view of the system. I like showing the following “first draft”
    of an information system I have been called to analyze because of the anecdote
    that comes with it:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 从一张空白的纸开始总是困难的；当 IT 问题影响到公司的活动时，这更加困难。为了简化开始映射活动，有时使用纸张或白板来给出系统的初步视图会更容易一些。我喜欢展示以下这个信息系统的“初稿”，因为这个系统是因为一个与之相关的轶事而被我分析：
- en: '![Figure 3.13 – Using CIGREF](img/B21293_01_2.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.13 – 使用 CIGREF](img/B21293_01_2.jpg)'
- en: Figure 3.13 – Using CIGREF
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.13 – 使用 CIGREF
- en: This industrial company had difficulties in stabilizing the streams of data
    for scientific analyses and communication of the results to their customers. We
    (the IT team and myself) started spending a few hours drawing the four main processes,
    the incomplete but close enough BCM, and the applications involved in them together
    with the stream of data. At that point, we were about to evaluate the frequency
    of the exchanges that were drawn to determine the weakness. Then, the director
    of the company came by and, looking for a few seconds at what we had done, pointed
    his finger at two of the Post-it notes representing applications and said “Well,
    the problem is apparently here”. This person did not have any technical or IT
    background whatsoever but, seeing that lots of streams would go in and out of
    these two entities, he immediately understood that they were holding back the
    efficiency of the system and, in particular, its ability to evolve. It turned
    out after additional analysis that one of the applications was obsolete and the
    second one had a complexity problem. The system was thus redesigned to improve
    and the main steps were to integrate a new application for the first one and to
    create a superset of APIs exposing the legacy functionalities in a cleaner way
    for the second one.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这家工业公司在稳定科学分析和将结果传达给客户的数据流方面遇到了困难。我们（IT 团队和我）开始花几个小时绘制四个主要流程、不完整但足够接近的 BCM 以及涉及其中的应用程序以及数据流。在那个阶段，我们正准备评估所绘制的交换频率以确定弱点。然后，公司的总监经过，看了我们做的几秒钟，指着代表应用程序的两个便签说：“嗯，问题显然在这里”。这个人没有任何技术或
    IT 背景，但看到大量数据流会进出这两个实体，他立刻理解到它们阻碍了系统的效率，特别是其演进能力。经过进一步分析，发现其中一个应用程序已经过时，第二个应用程序存在复杂性问题。因此，系统被重新设计以改进，主要步骤是为第一个应用程序集成一个新应用程序，并为第二个应用程序创建一个超集
    API，以更干净的方式公开旧功能。
- en: This shows the power of good information system mapping, as it helps all actors—and
    not only technical-savvy ones—understand what is going on in their IT, which now
    is, almost everywhere, their main working tool.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了良好信息系统映射的力量，因为它有助于所有参与者——而不仅仅是技术熟练的人——理解他们 IT 中的情况，现在几乎在所有地方，他们的主要工作工具就是
    IT。
- en: A generic difficulty when aligning information systems
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在对信息系统进行对齐时遇到的一个普遍困难
- en: One of the problems that almost always happens in the system and has an impact
    on its map is that confusion is frequent between the processes in layer 1 and
    the dependencies in layer 3\. Most functional people tend to think that their
    IT system implements processes exactly like they have been designed; how naive
    of them... Software is not necessarily made in-house and, when bought on the shelf,
    there is almost no chance that it perfectly fits the company’s process. Of course,
    everyone at the beginning of a new software project will swear that they will
    abide by the editor’s logic and adjust their process to keep the solution generic
    and avoid costly specific customizations. But the reality in most of these situations
    is that IT will end up integrating the software hammering circles in square holes
    and the result will not be clean.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中几乎总是会发生的一个问题，并且会对其映射产生影响，那就是在第一层和第三层的依赖关系之间经常出现混淆。大多数功能人员倾向于认为他们的 IT 系统实现了与设计完全一致的过程；他们多么天真啊...
    软件不一定是在内部制作的，当从货架上购买时，几乎不可能完美地符合公司的流程。当然，每个新的软件项目开始时，每个人都会发誓他们会遵守编辑的逻辑，调整他们的流程以保持解决方案通用，避免昂贵的特定定制。但大多数情况下，现实是
    IT 最终会像在方孔中锤圆钉一样整合软件，结果不会整洁。
- en: This lack of distinction also happens when functional people express themselves
    in technical terms without fully understanding the consequences of what they say
    on the system. Come on, we’ve all at some point had managers or big bosses talk
    about ESB or ETL as if they were able to write the Camel route themselves in XML!
    This overconfidence in IT’s simplicity also brings interesting statements of project
    duration once a BPMN is drawn and functional authors are convinced that it can
    simply be executed, just like it was a WS-BPEL schema with endpoints already existing.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 当职能人员用技术术语表达自己，而没有完全理解他们所说的话对系统的影响时，这种缺乏区分的情况也会发生。来吧，我们都有过经理或大老板谈论ESB或ETL，好像他们自己能直接用XML编写Camel路由的经历！这种对IT简单性的过度自信，一旦绘制了BPMN并使职能作者确信它可以直接执行，就像一个已经存在端点的WS-BPEL架构一样，也会带来一些有趣的关于项目持续时间的说法。
- en: 'Let’s take an example and imagine you have been provided with a BPMN schema
    such as this (the French labels do not matter; simply observe the structure of
    the diagram and the fact that all tasks are manual):'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们举一个例子，并想象你已经得到了一个像这样的BPMN架构（法文标签无关紧要；只需观察图表的结构以及所有任务都是手动的事实）：
- en: '![Figure 3.14 – Manual process](img/B21293_03_14.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图3.14 – 手动流程](img/B21293_03_14.jpg)'
- en: Figure 3.14 – Manual process
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14 – 手动流程
- en: 'Now imagine that the diagram of data streams corresponding to the realization
    of this process, as given by the IT, is something like this:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，由IT提供的实现此过程对应的数据流图，可能就像这样：
- en: '![Figure 3.15 – Process in software](img/B21293_03_15.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图3.15 – 软件中的流程](img/B21293_03_15.jpg)'
- en: Figure 3.15 – Process in software
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15 – 软件中的流程
- en: It does not need any technical expertise to realize that there is no relationship
    whatsoever between the tasks in the process and the streams of data that have
    been created between the software applications and databases. So, a fair part
    of the job of mapping the information system will be about drawing relationships
    between the tasks and the corresponding streams of data. In the end, you may realize
    that some of these streams are incomplete, needing others to compensate for the
    lack of data. You may find streams that bring too much data into software that
    should not even have the authorization to see it. You may even find streams of
    data that simply serve no known purpose anymore.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 任何技术专长都不需要意识到，流程中的任务与软件应用程序和数据库之间创建的数据流之间没有任何关系。因此，信息系统映射的大部分工作将是关于在任务和相应的数据流之间绘制关系。最终，你可能会发现其中一些流是不完整的，需要其他流来弥补数据不足。你可能会发现将过多数据带入甚至没有权限查看的软件中的流。你甚至可能会发现不再有已知用途的数据流。
- en: To relate the two layers, you will have to create a strong business capability
    map, as layer 2 will be used as an indirection between the processes and their
    software implementation. This is why BCM is so important and, if you operate on
    information systems, you will realize that this is often missing, simply because
    it is lesser known than processes and software/hardware. Yet, BCM is essential
    to reduce coupling and favor the evolution of the system by providing a way to
    create dependencies without being stuck by technical implementations that are
    hard to change once set in place or having to change the IT because a process
    has been modified in the way the company operates. The BCM, in this case, acts
    as an indirection layer that makes possible the evolution of layer 1 with limited
    impact on layer 3 and vice-versa.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 要关联这两层，您将不得不创建一个强大的业务能力映射，因为第2层将用作流程及其软件实现之间的间接层。这就是为什么BCM如此重要的原因，如果您在信息系统中工作，您会意识到这通常缺失，仅仅是因为它不如流程和软件/硬件为人所知。然而，BCM对于减少耦合并促进系统的演进至关重要，因为它提供了一种创建依赖关系的方法，而不会因为一旦设置就难以更改的技术实现而陷入困境，或者因为公司运营方式中的流程被修改而不得不更改IT。在这种情况下，BCM充当一个间接层，使得第1层的演进成为可能，同时对第3层的影响最小，反之亦然。
- en: 'The following schema sums this up, and, by the way, I often tell my students
    that if they only remember one slide from my course on IT alignment, it should
    be this one:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 以下架构图总结了这一点，顺便说一下，我经常告诉我的学生，如果他们只记住我关于IT对齐课程中的一张幻灯片，那应该是这一张：
- en: '![Figure 3.16 – Coupling done well](img/B21293_03_16.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图3.16 – 优秀的耦合](img/B21293_03_16.jpg)'
- en: Figure 3.16 – Coupling done well
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16 – 优秀的耦合
- en: Evolving the information system in time
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随时演进信息系统
- en: Of course, after mapping the existing state of the information system, the next
    step is to improve it, and this calls for a strategy with multiple steps to make
    it more realistic. Again, the CIGREF map is here to help by explaining clearly
    what needs to be adjusted at each step and showing how the dependencies need to
    be taken care of. If one changes a function by plugging it into a new and improved
    software application, all tasks depending on this function will need to evolve
    to take advantage of this, except of course if there is 100% compatibility, and
    in this case, we can consider that the function itself does not change.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在映射现有信息系统状态之后，下一步是改进它，这需要有一个多步骤的战略来使其更加现实。再次强调，CIGREF地图在这里提供帮助，通过清楚地说明每一步需要调整的内容，并展示如何处理依赖关系。如果通过将其插入到一个新的、改进的软件应用程序中来更改一个功能，所有依赖于这个功能的任务都需要进化以利用这一点，当然，除非有100%的兼容性，在这种情况下，我们可以认为该功能本身没有改变。
- en: 'The goal at the end of these steps is to reach a state as close to (and cost-effective)
    a realistic and nicely aligned system as possible, which could be schematized
    as the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤的最终目标是尽可能接近（且具有成本效益）一个现实且良好对齐的系统状态，这可以概括如下：
- en: '![Figure 3.17 – Ideal alignment](img/B21293_03_17.jpg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图3.17 – 理想对齐](img/B21293_03_17.jpg)'
- en: Figure 3.17 – Ideal alignment
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17 – 理想对齐
- en: 'Of course, this may sound ideal, and, most of the time, we will never reach
    alignment for the complete system. But local alignment can be reached, as shown
    in the next schema, which I exported from one of my customers who managed to align
    one of their most important support processes (namely, handling newcomers, as
    this was a company with high structural turnover) in such a way that the efforts
    needed would drop by an estimated factor of ten and the duration of the process
    would reduce to a third of the initial measured time. This was achieved via the
    automation of some of the tasks, but the alignment made this automation possible,
    as the process was entirely manual beforehand due to a clear lack of structure
    in the IT (the company was in a non-technical business and put a limited budget
    in its IT, only realizing after it reached an almost desperate state how important
    it had become for their activities). The following diagram is blurred for confidentiality
    reasons; we intended to showcase only the flow of the process:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这听起来可能很理想，而且，大多数时候，我们可能永远无法实现整个系统的对齐。但局部对齐是可以实现的，如以下图例所示，这是我从一个成功对齐其最重要的支持流程（即处理新员工，因为这是一家高结构性流动的公司）的客户那里导出的。通过这种方式，所需的努力可以减少到估计的十分之一，流程的持续时间将减少到最初测量时间的三分之一。这是通过自动化一些任务实现的，但正是对齐使得这种自动化成为可能，因为在此之前，流程完全是手工的，由于IT结构明显缺乏（该公司从事非技术业务，在IT上投入有限的预算，只有在达到几乎绝望的状态后，才意识到它对其活动的重要性）。以下图表因保密原因而模糊；我们旨在展示流程的流程：
- en: '![Figure 3.18 – Applied alignment](img/B21293_03_18_(replacement).jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图3.18 – 应用对齐](img/B21293_03_18_(replacement).jpg)'
- en: Figure 3.18 – Applied alignment
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18 – 应用对齐
- en: We will come back in the next chapter to the evolution of the information system
    in time. For now, just keep in mind that the CIGREF map has to be used to establish
    the actual situation but can also be used to model a desired future situation
    and every step in between.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章回到信息系统随时间演化的过程。现在，只需记住，CIGREF地图必须用于建立实际情况，但也可以用于模拟一个期望的未来情况以及中间的每一步。
- en: The four-layer diagram method for service providers
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务提供商的四层图方法
- en: You may wonder about the use of the CIGREF map when buying software as a service
    and whether it means that we do not draw anything in the hardware layer. The answer
    comes back to the use you want to have of your map, as you do not map for the
    pleasure of having something complete but because your use case needs you to be
    precisely aware of how your information system is working in its details. This
    means that, if your interest is in software alignment functions, you have absolutely
    no use in knowing where the servers are physically, and, in this case, there is
    no use in drawing anything in the fourth layer; you will simply leave it empty.
    On the other hand, suppose one of your concerns is about the locality of your
    data because your board has a constraint on data sovereignty. In this case, you
    will indicate the precise region in which the data centers supporting the software
    are located in the fourth layer. This way, it will be easy to spot something that
    is outside the allowed regions.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对在购买软件即服务时使用CIGREF地图的用途感到好奇，以及它是否意味着我们在硬件层不绘制任何内容。答案回到了你想要使用你的地图的方式，因为你不是出于拥有完整东西的乐趣而映射，而是因为你的用例需要你精确地了解你的信息系统在其细节中的工作方式。这意味着，如果你的兴趣在于软件匹配功能，你绝对不需要知道服务器在哪里物理上，在这种情况下，在第四层绘制任何内容都没有用；你只需将其留空。另一方面，假设你的一个担忧是关于你数据的位置性，因为你的董事会有一个关于数据主权的限制。在这种情况下，你将在第四层中指出支持软件的数据中心所在的精确区域。这样，就很容易发现任何位于允许区域之外的东西。
- en: 'This comes back to a very important piece of advice: only map what you really
    need. It is very easy to get carried away and map lots of things that you actually
    do not really care about. In particular, the hardware layer is generally quite
    easy to map because automatic network exploration applications can help and good
    system administrators often have agents on every machine deployed for security
    and software inventory. So, people tend to have a very precise drawing of the
    fourth layer, even when their problem is about function to software alignment.
    In this case, you’d be better off replacing the whole hardware layer with a few
    general blocks—typically the data centers used, including your own server room—and
    labeling them with the associated cost, as this is (in this case) the only information
    that will help you.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 这回到了一个非常关键的忠告：只映射你真正需要的。很容易被带跑偏，映射很多实际上并不关心的事情。特别是，硬件层通常很容易映射，因为自动网络探索应用可以提供帮助，而且好的系统管理员通常在每个机器上部署了代理以进行安全和软件清单。因此，人们往往会有一个非常精确的第四层图，即使他们的问题是关于功能与软件的匹配。在这种情况下，你最好用几个通用块来替换整个硬件层——通常是使用的数据中心，包括你自己的服务器室——并用相关的成本标签它们，因为这（在这种情况下）是唯一能帮助你信息的信息。
- en: Talking about services, an equivalent question can be asked the other way around,
    namely about the CIGREF representation for a software editor or integrator that
    would provide a software service to its customers. How should we represent this?
    Is the cloud used for the customers a part of the information system of the editor?
    Should it be drawn in a particular way?
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到服务，可以从另一个角度提出一个等效的问题，即关于为软件编辑器或集成商提供软件服务的CIGREF表示。我们应该如何表示它？客户使用的云是否是编辑器信息系统的一部分？是否应该以特定的方式绘制？
- en: Again, the notion of the usefulness of the map should drive our response to
    this. Imagine the problem at hand—and thus the reason why you establish a map—is
    that you have a problem of coupling between your internal functions and your offer
    for your customers. This can be a security problem because ransomware on one side
    could easily propagate to the other. This may also come from the accounting team,
    which does not know which machines and services should be billed to customers
    and which costs should remain internal. It could also come from system management
    difficulties, such as the fact that shutting down a supposedly internal server
    eventually had an impact on your production. In this case, the right approach
    would be to draw the current, unique information system and then to draw the target
    map, which is composed of two distinct information systems and a precise representation
    of the interactions remaining between them (for example, sending the usage data
    from the production information system to the internal information system so that
    accounting can establish billing for the different tenants).
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，地图的有用性观念应该驱动我们对这一问题的响应。想象一下手头的问题——也就是您建立地图的原因——是因为您在内部功能和客户提供的功能之间有一个耦合问题。这可能是一个安全问题，因为一方面勒索软件可以轻易传播到另一方面。这也可能来自会计团队，他们不知道哪些机器和服务应该向客户收费，哪些成本应该保留在内部。也可能来自系统管理困难，例如关闭一个被认为是内部的服务器最终影响了您的生产。在这种情况下，正确的做法是绘制当前独特的信息系统，然后绘制目标地图，该地图由两个不同的信息系统和它们之间剩余的精确交互表示（例如，从生产信息系统向内部信息系统发送使用数据，以便会计可以为不同的租户建立账单）。
- en: This is typically where you would use the zone for “externally oriented functions”
    of your business capability map (layer 2 of the CIGREF representation). In the
    production information system, you would find in this zone the function for “reporting
    data usage per tenant” or “sending total API calls per tenant”. And in the internal
    information system, you would find, of course, in the “business” zone/“accounting”
    quarter, the function to handle this data and calculate the bill for the tenant.
    Another example would be functions such as “request tenant access blocking” or
    “archive tenant” that you would find in the “externally oriented functions” zone.
    They would typically be called by the internal information system to instruct
    the production information system that a customer has not paid the bill and should
    be at least blocked, and maybe later, completely removed.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常是您在业务能力图（CIGREF表示的第二层）的“外部面向功能”区域使用区域的地方。在生产信息系统中，您会在这个区域找到“按租户报告数据使用情况”或“按租户发送总API调用次数”的功能。而在内部信息系统中，您当然会在“业务”区域/“会计”区域找到处理这些数据并计算租户账单的功能。另一个例子是在“外部面向功能”区域可以找到的“请求租户访问阻止”或“存档租户”等功能。它们通常由内部信息系统调用，以指示生产信息系统客户未支付账单，至少应该被阻止，也许以后，完全移除。
- en: Another example of a link between the two systems is, of course, when the internal
    software-production workflow has produced a validated, complete new release of
    the software sold to the customers (this is the main role of the software editing
    company). There has to be a link somewhere since the information system exposing
    this software to customer tenants will use this deliverable to update its services
    at some point. One of the best ways to establish this link while keeping very
    low coupling is to create a container registry that will be filled with images
    coming from the first system (with the right tags, of course) and consumed by
    the second information system by pulling the images it needs to expose in the
    tenants.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 两个系统之间的另一个链接例子，当然是当内部软件-生产工作流程产生了一个经过验证的、完整的、销售给客户的软件新版本时（这是软件编辑公司的主要角色）。必须存在某种链接，因为向客户租户展示此软件的信息系统将使用这个可交付成果在某个时候更新其服务。在保持非常低的耦合的同时建立这种链接的最好方法之一是创建一个容器注册库，该库将填充来自第一个系统（当然带有正确的标签）的镜像，并由第二个信息系统通过拉取它需要的镜像来消费，以在租户中公开。
- en: 'The only remaining question is where the registry should be placed, and the
    answer—if you need a very stable one—is to have one on each side: a registry that
    centralizes all the production from your continuous integration as a software
    editing company on one side and another registry that serves as an image cache
    on the other side. This makes it easier for your continuous deployment as an integrating
    company to keep on creating tenants even if the first registry is not accessible
    anymore. This clean separation can even be used to implement some high-level rules,
    such as “only contained images with the STABLE tag should be put into production”,
    by caching only those in the second Docker registry.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一剩下的问题是注册表应该放在哪里，如果需要一个非常稳定的注册表，答案是在每一侧都放置一个：一个注册表在软件编辑公司的一侧集中管理所有持续集成的生产，另一个注册表作为图像缓存在另一侧。这使得集成公司作为持续部署的一部分更容易继续创建租户，即使第一个注册表不再可访问。这种清晰的分离甚至可以用来实现一些高级规则，例如“只有带有STABLE标签的容器图像应该投入生产”，通过仅在第二个Docker注册表中缓存这些图像。
- en: One might argue that, since there are calls between the two systems in this
    case, that might mean they are a single system and should be represented as so.
    Again, the map is not here to reflect the full reality of the world but to help
    you carry out your duty in information management. If the orientation you wish
    to have is a good separation of concerns (and for security reasons, it should
    be), then your map should represent your goal, as it will help you in doing everything
    that is needed to reach this objective.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人可能会争论说，由于在这种情况下两个系统之间存在调用，这可能意味着它们是一个单一的系统，应该这样表示。再次强调，地图的目的不是反映世界的全部现实，而是帮助你履行信息管理职责。如果你希望实现的是良好的关注点分离（出于安全考虑，应该是这样），那么你的地图应该反映你的目标，因为它将帮助你完成实现这一目标所需的一切。
- en: Finally, another argument could be opposed to this vision, by stating that,
    today, every information system on the planet has some kind of connection together,
    may it only be by the internet network, that covers almost every local system.
    Also, when companies buy others, they connect their information systems, sometimes
    in such a tightly knitted way that they become a single system in the end. Again,
    this only depends on your strategy, so the CIGREF map should simply be aligned
    with the vision.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有人可能会反对这种观点，声称，如今，地球上每个信息系统都存在某种形式的连接，无论是通过互联网网络，它几乎覆盖了所有本地系统。此外，当公司收购其他公司时，它们会连接它们的信息系统，有时连接得如此紧密，以至于最终成为一个单一的系统。同样，这完全取决于你的策略，因此CIGREF地图应该简单地与愿景保持一致。
- en: Patterns and antipatterns of alignment
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对齐的模式和反模式
- en: Several years of consulting on information systems have led me to observe that
    most problems relate to a few misalignments in the system, themselves belonging
    to only a few patterns. Having worked for quite some time in a limited business
    domain, it was a surprise to realize after a few years when I started working
    with agricultural cooperatives, chemical risk analysis companies, lawyers societies,
    and other companies within very different fields, that these patterns (or rather,
    antipatterns since they cause problems) were the same everywhere.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 几年的信息系统咨询使我观察到，大多数问题都与系统中的几个不匹配有关，而这些不匹配本身只属于几个模式。在有限业务领域工作了一段时间后，当我开始与农业合作社、化学风险评估公司、律师协会以及其他不同领域的公司合作时，我惊讶地发现，这些模式（或者更确切地说，反模式，因为它们会引起问题）无处不在。
- en: Dalila Tamzalit, who is a researcher at French CNRS, took up with me to classify
    these antipatterns and document a method to find them and exploit information
    to better align information systems that suffer from them. This led to an article
    published in the International Conference on Information Systems Development in
    2021 (available at [https://aisel.aisnet.org/isd2014/proceedings2021/managingdevops/3/](https://aisel.aisnet.org/isd2014/proceedings2021/managingdevops/3/)).
    You will find in the next section a summary of some of the information that could
    help in managing business alignment.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 法国CNRS的研究员Dalila Tamzalit与我合作，对这些反模式进行分类，并记录了一种寻找它们并利用信息以更好地对齐受其影响的信息系统的方法。这导致了2021年国际信息系统开发会议（可在[https://aisel.aisnet.org/isd2014/proceedings2021/managingdevops/3/](https://aisel.aisnet.org/isd2014/proceedings2021/managingdevops/3/)）上发表的一篇文章。你将在下一节中找到一些有助于管理业务对齐的信息摘要。
- en: The sad reality of alignment
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对齐的悲哀现实
- en: 'First, it should be known that most information systems, as was explained in
    [*Chapter 1*](B21293_01.xhtml#_idTextAnchor014), suffer from basic problems that
    limit their efficiency. In terms of a four-layer diagram, these problems can be
    summarized as this:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，应该知道，大多数信息系统，如[第1章](B21293_01.xhtml#_idTextAnchor014)中解释的那样，都存在一些基本问题，这些问题限制了它们的效率。从四层图的角度来看，这些问题可以总结如下：
- en: '![Figure 3.19 – Common problems](img/B21293_03_19.jpg)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图3.19 – 常见问题](img/B21293_03_19.jpg)'
- en: Figure 3.19 – Common problems
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19 – 常见问题
- en: Processes may be well understood, since there is rarely any BCM, but the corresponding
    realization of the processes is often done with point-to-point ad hoc interop
    that quickly brings the system to a “spaghetti dish lookalike” where streams of
    data happen in an uncontrolled way.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 由于很少有任何BCM，因此过程可能被很好地理解，但相应的实现通常是通过点对点的临时互操作性完成的，这很快就会使系统看起来像“意大利面盘”，数据流以一种不受控制的方式发生。
- en: What we can aim for
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们可以追求的目标
- en: 'It was already stated, and it may sound logical, but we do not aim for a completely
    aligned system. A well-designed system for two business processes may be as simple
    as the following, where a bit more than ten well-adjusted streams of data implemented
    the full business needs with the same amount of applications (the majority of
    them already exist, in this example, and being simply correctly plugged) and almost
    no additional hardware:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点已经提到，听起来可能合乎逻辑，但我们的目标并不是一个完全对齐的系统。为两个业务流程设计的一个良好系统可能就像以下这样简单，其中超过十个调整良好的数据流实现了全部的业务需求，使用相同数量的应用程序（在这个例子中，大多数已经存在，并且只是正确地连接），几乎不需要额外的硬件：
- en: "![F\uFEFFigure 3.20 – Good alignment (the text is blurred for confidentiality\
    \ reasons)](img/B21293_03_20.jpg)"
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图3.20 – 良好的对齐（出于保密原因，文本已模糊）](img/B21293_03_20.jpg)'
- en: Figure 3.20 – Good alignment (the text is blurred for confidentiality reasons)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20 – 良好的对齐（出于保密原因，文本已模糊）
- en: The main antipatterns in alignment
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对齐中的主要反模式
- en: 'Now the goal is clear, let’s come back to our alignment antipatterns and present
    the main four of them (we only explain what they are, and how they can be fought
    against and reduced will be covered in the rest of the book):'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在目标已经明确，让我们回到我们的对齐反模式，并介绍其中主要的四个（我们只解释它们是什么，以及如何对抗和减少将在本书的其余部分进行讨论）：
- en: '**Purely technical integration** happens when a process is not designed in
    the first layer but directly implemented into the software. The consequence is
    that any change in company strategy, domain-based rules, or even simple optimization
    of the process will lead to a change in software. This is the root cause of hearing
    “We do not evolve quickly enough, as we are dragged down by IT” or “It is not
    possible to have this business function due to software limitations” (and its
    variant “adding this new data attribute in the whole software chain, from interface
    to reporting, will take six months and need a new release of four applications”).'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**纯粹的技术集成**发生在过程没有在第一层设计，而是直接在软件中实现的情况下。结果是，公司战略、基于领域的规则或甚至过程的简单优化都会导致软件的改变。这是听到“我们进化不够快，因为我们被IT拖累了”或“由于软件限制，无法实现这个业务功能”（及其变体“在整个软件链中添加这个新的数据属性，从界面到报告，将需要六个月，并需要四个应用程序的新版本”）的根本原因。'
- en: 'The symbolic representation of this antipattern is the following:'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个反模式的象征性表示如下：
- en: '![Figure 3.21 – Antipattern number 1: Pure Technical Integration](img/B21293_03_21.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图3.21 – 反模式编号1：纯粹的技术集成](img/B21293_03_21.jpg)'
- en: 'Figure 3.21 – Antipattern number 1: Pure Technical Integration'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21 – 反模式编号1：纯粹的技术集成
- en: '**Applicative silos** appear when two parts of the organization have worked
    on their IT needs without talking to each other. The resulting system shows the
    result of this as two independent systems in the diagram. There may be some cases
    where complete isolation is thought to be important (human resources, finance,
    other highly confidential zones), but, from experience, there always comes a time
    when links have to be established between the different zones. This may come as
    a harsh reality in these cases, as data has been completely duplicated, uses different
    formats, or uses technologies that have not been chosen to ease interoperation,
    etc. The main risk in this case is that data sources are simply opened to the
    other area, which will cause major authorization problems. In one of the worst
    cases I have seen, full HR data had been made available to the ERP by a trainee
    to implement the reimbursement of travel fees, which was of course a major breach
    of confidentiality and exposed the company to potential GDPR issues until it was
    corrected.'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**应用孤岛**出现在组织的两个部分在未相互沟通的情况下处理他们的 IT 需求时。结果系统在图中显示了这种结果，即两个独立的系统。可能有一些情况下，完全隔离被认为很重要（人力资源、财务、其他高度机密区域），但根据经验，总会有建立不同区域之间联系的时候。在这些情况下，这可能会成为残酷的现实，因为数据已经被完全复制，使用不同的格式，或者使用没有选择以简化互操作性的技术等。这种情况的主要风险是数据源简单地被向其他区域开放，这将导致重大的授权问题。在我所见过的最糟糕的案例中，一名实习生为了实施差旅费报销而将完整的
    HR 数据提供给 ERP，这当然是一项重大的保密性违规，直到纠正之前，公司都面临着潜在的 GDPR 问题。'
- en: 'The symbolic representation of this antipattern is the following:'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种反模式的符号表示如下：
- en: '![Figure 3.22 – Antipattern number 2: Silos](img/B21293_03_22.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.22 – 反模式编号 2：孤岛](img/B21293_03_22.jpg)'
- en: 'Figure 3.22 – Antipattern number 2: Silos'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.22 – 反模式编号 2：孤岛
- en: '**Monoliths** are applications that concentrate a lot of functions. This in
    itself is not necessarily a problem, as a given application may implement everything
    that is used by a business domain. The problem arises because these applications
    also implement functions that should be shared or already exist in other parts
    of the system. Data duplication is a huge problem in information systems, as they
    never correspond from one side to the other, which makes it hard to know which
    source is the closest to the truth, resulting in bad decisions or false computations.'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**单体**是集中了大量功能的程序。这本身可能不是问题，因为一个特定的应用程序可能实现了业务领域所使用的所有内容。问题在于这些应用程序还实现了应该共享或已经在系统其他部分存在的功能。数据冗余是信息系统中的一个巨大问题，因为它们从未从一边对应到另一边，这使得很难知道哪个来源最接近真相，从而导致不良决策或错误的计算。'
- en: 'The symbolic representation of this antipattern is the following:'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种反模式的符号表示如下：
- en: '![Figure 3.23 – Antipattern number 3: Monolith](img/B21293_03_23.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.23 – 反模式编号 3：单体](img/B21293_03_23.jpg)'
- en: 'Figure 3.23 – Antipattern number 3: Monolith'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23 – 反模式编号 3：单体
- en: '**Functional multiple implementations** are a problem because the different
    implementations have almost no chance of working in a compatible way. One can
    easily understand that, if a financial budget summary is computed in a given way
    in an application and in a different way in a second application that is supposed
    to do the same thing, it is difficult to take intelligent actions to manage the
    company. One such case I witnessed at a newspaper company showed a different number
    of readers depending on which application was queried, with deltas that were so
    large that, in some situations, the newspaper could not know without additional
    calculation whether they were gaining or losing readers.'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**功能多重实现**是一个问题，因为不同的实现几乎不可能以兼容的方式工作。可以很容易地理解，如果一个财务预算总结在一个应用程序中以某种方式计算，而在第二个应用程序中以不同的方式计算，该应用程序应该做同样的事情，那么要采取明智的行动来管理公司是困难的。我在一家报纸公司见证的一个案例表明，根据查询的应用程序不同，读者数量会有所不同，差异如此之大，以至于在某些情况下，报纸公司没有额外的计算就无法知道他们是增加了还是减少了读者。'
- en: 'The symbolic representation of this antipattern is the following:'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种反模式的符号表示如下：
- en: '![Figure 3.24 – Antipattern number 4: Functional Multiple Implementations](img/B21293_03_24.jpg)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.24 – 反模式编号 4：功能多重实现](img/B21293_03_24.jpg)'
- en: 'Figure 3.24 – Antipattern number 4: Functional Multiple Implementations'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24 – 反模式编号 4：功能多重实现
- en: Some other antipatterns and a proposed classification
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一些其他反模式及其提出的分类
- en: 'Only the four most important antipatterns have been shown, and the whole set
    of **business/IT alignment antipatterns** (**BITA**, in its proposed short form)
    is the following:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 只展示了四个最重要的反模式，整个**业务/IT对齐反模式**（BITA，其建议的简称）如下：
- en: '![Figure 3.25 – Antipatterns classification](img/B21293_03_25.jpg)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![图3.25 – 反模式分类](img/B21293_03_25.jpg)'
- en: Figure 3.25 – Antipatterns classification
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 – 反模式分类
- en: 'To use this classification to improve alignment in the existing information
    system, each of them comes with a structured identity card with the following
    information:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这种分类来改进现有信息系统的对齐，每个反模式都附带一张结构化的身份证，包含以下信息：
- en: '![Figure 3.26 – ID card for an antipattern](img/B21293_03_26.jpg)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
  zh: '![图3.26 – 反模式的身份证](img/B21293_03_26.jpg)'
- en: Figure 3.26 – ID card for an antipattern
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – 反模式的身份证
- en: A full explanation of how the antipatterns appear and—more importantly—the standard
    actions to correct them can also be found in the complete article cited before.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式出现以及——更重要的是——纠正它们的标准操作的完整解释也可以在之前引用的完整文章中找到。
- en: 'You can view the full article on GitHub, which will show you the amount of
    such information available on the first BITA: [https://github.com/PacktPublishing/Enterprise-Architecture-with-.NET/blob/main/Business-IT%20Alignment%20Anti-Patterns%20A%20Thought%20from%20an%20Empirical.pdf](https://github.com/PacktPublishing/Enterprise-Architecture-with-.NET/blob/main/Business-IT%20Alignment%20Anti-Patterns%20A%20Thought%20from%20an%20Empirical.pdf)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在GitHub上查看完整文章，它将展示在第一个BITA（业务/IT对齐反模式，简称BITA）上可用的此类信息的数量：[https://github.com/PacktPublishing/Enterprise-Architecture-with-.NET/blob/main/Business-IT%20Alignment%20Anti-Patterns%20A%20Thought%20from%20an%20Empirical.pdf](https://github.com/PacktPublishing/Enterprise-Architecture-with-.NET/blob/main/Business-IT%20Alignment%20Anti-Patterns%20A%20Thought%20from%20an%20Empirical.pdf)
- en: 'This taxonomy, coming from experience, has led us to propose a structured way
    to improve information alignment that can be summarized in the following BPMN
    diagram:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这个来自经验的分类使我们提出了一个结构化的方法来改进信息对齐，这可以用以下BPMN图来总结：
- en: '![Figure 3.27 – Proposed method to detect antipatterns in an Information System](img/B21293_03_28.jpg)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![图3.27 – 在信息系统中检测反模式的方法](img/B21293_03_28.jpg)'
- en: Figure 3.27 – Proposed method to detect antipatterns in an Information System
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 – 在信息系统中检测反模式的方法
- en: I encourage you to try and apply this method to your information systems of
    study and send feedback. This will be useful to the academic community and hopefully
    for the other readers as well.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我鼓励你尝试将这种方法应用到你的学习信息系统中，并反馈意见。这对学术界以及希望对其他读者也有帮助。
- en: Summary
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This quite long chapter showed how a formalized diagramming technique can be
    used to obtain a better understanding of an information system and also document
    the evolutions it will have to follow. A map is a prerequisite to control a given
    ground, and a schema is worth a thousand words, which makes this step a must in
    any information system architecture activity.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当长的章节展示了如何使用形式化的绘图技术来更好地理解信息系统，并记录它将遵循的演变。地图是控制特定地面的先决条件，而图式胜过千言万语，这使得这一步在任何信息系统架构活动中都是必须的。
- en: Since IT is quite a specific context, we needed a dedicated way of drawing a
    map of an information system, and this is what the CIGREF map is about. Its four-layer
    arrangement helps separate the business-oriented aspects (processes and atomic
    functions) from the technical aspects (software and hardware).
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 由于IT是一个相当特定的环境，我们需要一种专门的方式来绘制信息系统的地图，这就是CIGREF地图的内容。它的四层布局有助于将面向业务的方面（流程和原子功能）与技术的方面（软件和硬件）分开。
- en: This way of representing an information system also helps in visualizing its
    alignment, by checking that the third layer (the software bits) is well adjusted
    to the second layer (the business capability map) it implements. The business/IT
    alignment is the most important measure of quality and capacity to evolve for
    complex information systems and a feature that must be sought.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这种表示信息系统的方式也有助于可视化其一致性，通过检查第三层（软件位）是否很好地调整到它所实现的第二层（业务能力图）。业务/IT一致性是复杂信息系统质量的最重要指标和演变能力，这是一个必须追求的特征。
- en: The next chapter will extend the present one by taking into account the dimension
    of time. We have quickly talked about this in a previous section, explaining that
    the CIGREF map could be used to document the actual state of an information system,
    but also the desired future states it should progressively reach (the Big Bang
    approach is never a practical alternative). But, as you will see, time appears
    in many other aspects of information systems and can be quite a difficult parameter
    to handle.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将扩展当前章节，考虑时间的维度。我们已经在之前的章节中简要提到了这一点，解释说CIGREF地图可以用来记录信息系统当前的状态，也可以记录其应逐步达到的期望未来状态（大爆炸方法永远不是一种实用的替代方案）。但是，正如您将看到的，时间出现在信息系统的许多其他方面，并且可能是一个相当难以处理的参数。
