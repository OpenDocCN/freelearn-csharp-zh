["```cs\nprivate void Button_Click(object sender, RoutedEventArgs e) \n{ \n  UserViewModel viewModel = (UserViewModel)DataContext; \n  viewModel.PerformSomeAction(); \n} \n```", "```cs\n<ListBox ItemsSource=\"{Binding Items}\" \n  SelectedItem=\"{Binding CurrentItem}\" /> \n```", "```cs\npublic TypeOfObject CurrentItem \n{ \n  get { return currentItem; } \n  set \n  { \n    currentItem = value; \n    DoSomethingWithTheNewlySelectedItem(currentItem); \n  } \n} \n```", "```cs\n<Style x:Key=\"ImageInButtonStyle\" TargetType=\"{x:Type Image}\"> \n  <Setter Property=\"Opacity\" Value=\"1.0\" /> \n  <Style.Triggers> \n    <DataTrigger Binding=\"{Binding IsEnabled,       \n      RelativeSource={RelativeSource FindAncestor, \n      AncestorType={x:Type Button}}, FallbackValue=False}\" \n      Value=\"False\"> \n      <Setter Property=\"Opacity\" Value=\"0.5\" /> \n    </DataTrigger> \n  </Style.Triggers> \n</Style> \n```", "```cs\nusing System; \nusing System.Windows.Forms; \nusing System.Windows.Input; \n\npublic class TestCommand : ICommand \n{ \n  public event EventHandler CanExecuteChanged; \n\n  public void Execute(object parameter) \n  { \n    MessageBox.Show(\"You executed a command\"); \n  } \n\n  public bool CanExecute(object parameter) \n  { \n    return true; \n  } \n}\n```", "```cs\nusing System; \nusing System.Windows.Input; \n\npublic class ActionCommand : ICommand \n{ \n  private readonly Action<object> action; \n  private readonly Predicate<object> canExecute; \n\n  public ActionCommand(Action<object> action) : this(action, null) { } \n\n  public ActionCommand(Action<object> action, \n    Predicate<object> canExecute) \n  { \n    this.action = action; \n    this.canExecute = canExecute; \n  } \n\n  public event EventHandler CanExecuteChanged \n  { \n    add { CommandManager.RequerySuggested += value; } \n    remove { CommandManager.RequerySuggested -= value; } \n  } \n\n  public bool CanExecute(object parameter) \n  { \n    return canExecute == null ? true : canExecute(parameter); \n  } \n\n  public void Execute(object parameter) \n  { \n    action(parameter); \n  } \n} \n```", "```cs\npublic ICommand SaveCommand \n{ \n  get { return new ActionCommand(action => Save(), \n    canExecute => CanSave()); } \n} \n```", "```cs\npublic void Execute(object parameter) \n{ \n  if (CanExecute(parameter)) action(parameter); \n} \n```", "```cs\npublic static DependencyProperty OnEnterKeyDownProperty =  \n  DependencyProperty.RegisterAttached(\"OnEnterKeyDown\", \n  typeof(ICommand), typeof(TextBoxProperties), \n  new PropertyMetadata(OnOnEnterKeyDownChanged)); \n\npublic static ICommand GetOnEnterKeyDown(DependencyObject dependencyObject) \n{ \n  return (ICommand)dependencyObject.GetValue(OnEnterKeyDownProperty); \n} \n\npublic static void SetOnEnterKeyDown(DependencyObject dependencyObject, \n  ICommand value) \n{ \n  dependencyObject.SetValue(OnEnterKeyDownProperty, value); \n} \n\nprivate static void OnOnEnterKeyDownChanged( \n  DependencyObject dependencyObject, \n  DependencyPropertyChangedEventArgs e) \n{ \n  TextBox textBox = (TextBox)dependencyObject; \n  if (e.OldValue == null && e.NewValue != null)  \n    textBox.PreviewKeyDown += TextBox_OnEnterKeyDown; \n  else if (e.OldValue != null && e.NewValue == null)  \n    textBox.PreviewKeyDown -= TextBox_OnEnterKeyDown; \n} \n\nprivate static void TextBox_OnEnterKeyDown(object sender, KeyEventArgs e) \n{ \n  if (e.Key == Key.Enter || e.Key == Key.Return) \n  { \n    TextBox textBox = sender as TextBox; \n    ICommand command = GetOnEnterKeyDown(textBox); \n    if (command != null && command.CanExecute(textBox))  \n      command.Execute(textBox); \n  } \n} \n```", "```cs\nxmlns:Attached=\"clr-namespace:CompanyName.ApplicationName.Views.Attached;  \n  assembly=CompanyName.ApplicationName.Views\" \n```", "```cs\n<TextBox Attached:TextBoxProperties.OnEnterKeyDown=\"{Binding Command}\" /> \n```", "```cs\npublic delegate void Signal(); \n```", "```cs\npublic Signal OnSecurityPermissionChanged { get; set; }  \n```", "```cs\nChildViewModel viewModel = new ChildViewModel(); \nviewModel.OnSecurityPermissionChanged += RefreshSecurityPermissions; \n```", "```cs\nprivate void RefreshSecurityPermissions() \n{ \n  // Refresh user's security permissions when alerted by the signal \n} \n```", "```cs\nif (OnSecurityPermissionChanged != null) OnSecurityPermissionChanged(); \n```", "```cs\nOnSecurityPermissionChanged?.Invoke(); \n```", "```cs\nprotected T currentItem; \n\npublic virtual CurrentItemChange CurrentItemChanged { get; set; }  \n\npublic virtual T CurrentItem \n{ \n  get { return currentItem; } \n  set \n  { \n    T oldCurrentItem = currentItem; \n    currentItem = value; \n    CurrentItemChanged?.Invoke(oldCurrentItem, currentItem); \n    NotifyPropertyChanged(); \n  } \n} \n```", "```cs\nusing System;\n\nnamespace CompanyName.ApplicationName.Models.Business\n{\n  public class User\n  {\n    public User(Guid id, string name, int age)\n    {\n      Id = id;\n      Name = name;\n      Age = age;\n    }\n\n    public Guid Id { get; set; }\n\n    public string Name { get; set; }\n\n    public int Age { get; set; }\n  }\n}\n\nusing System;\nusing CompanyName.ApplicationName.Models.Business;\n\nnamespace CompanyName.ApplicationName.ViewModels.Business\n{\n  public class UserViewModel : BaseBusinessViewModel\n  {\n    private User model;\n    private bool isSelected = false;\n\n    public UserViewModel(User model)\n    {\n      Model = model;\n    }\n\n    public User Model\n    {\n      get { return model; }\n      set { model = value; NotifyPropertyChanged(); }\n    }\n\n    public Guid Id\n    {\n      get { return Model.Id; }\n      set { Model.Id = value; NotifyPropertyChanged(); }\n    }\n\n    public string Name\n    {\n      get { return Model.Name; }\n      set { Model.Name = value; NotifyPropertyChanged(); }\n    }\n\n    public int Age\n    {\n      get { return Model.Age; }\n      set { Model.Age = value; NotifyPropertyChanged(); }\n    }\n\n    public bool IsSelected\n    {\n      get { return isSelected; }\n      set { isSelected = value; NotifyPropertyChanged(); }\n    }\n  }  \n} \n```", "```cs\nUser user = new User(Guid.NewGuid(), \"James Smith\", 25);\nUserViewModel userViewModel = new UserViewModel(user); \n```", "```cs\npublic Task RunAsynchronously(Action method) \n{ \n  return Task.Run(method); \n} \n```", "```cs\nUiThreadManager.RunAsynchronously(() => GenerateReports()); \n```", "```cs\npublic Task RunAsynchronously(Action method) \n{ \n  Task task = new Task(method); \n  task.RunSynchronously(); \n  return task; \n} \n```"]