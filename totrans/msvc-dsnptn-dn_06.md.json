["```cs\npublic interface IDomainEvent : INotification\n{}\n```", "```cs\npublic class AppointmentCreated : IDomainEvent\n    {\n        public Appointment { get; set; }\n        public DateTime ActionDate { get; private set; }\n        public AppointmentCreated(Appointment appointment,\n          DateTime dateCreated)\n        {\n            Appointment = appointment;\n            ActionDate = dateCreated;\n        }\n        public AppointmentCreated(Appointment appointment)\n          : this(appointment, DateTime.Now)\n        {\n        }\n    }\n```", "```cs\npublic class UpdateAppointmentEventStore :\n  INotificationHandler<AppointmentCreated>\n    {\n        private readonly AppointmentsEventStoreService\n          _appointmentsEventStore;\n        public UpdateAppointmentEventStore\n          (AppointmentsEventStoreService\n            appointmentsEventStore)\n        {\n            this._appointmentsEventStore =\n              appointmentsEventStore;\n        }\n        public async Task Handle(AppointmentCreated\n         notification, CancellationToken cancellationToken)\n        {\n            await _appointmentsEventStore.CreateAsync\n              (notification.Appointment);\n        }\n    }\n```", "```cs\npublic class NotifyAppointmentCreated :\n  INotificationHandler<AppointmentCreated>\n    {\n        private readonly IEmailSender _emailSender;\n        private readonly IPatientsRepository\n          _patientsRepository;\n        public NotifyAppointmentCreated(IEmailSender\n          emailSender, IPatientsRepository\n            patientsRepository)\n        {\n            this._emailSender = emailSender;\n            this._patientsRepository = patientsRepository;\n        }\n        public async Task Handle(AppointmentCreated\n         notification, CancellationToken cancellationToken)\n        {\n            // Get patient record via Patients API call\n            var patient = await _patientsRepository.Get\n              (notification.Appointment.\n                PatientId.ToString());\n            string emailAddress = patient.EmailAddress;\n            // Send Email Here\n            var email = new Email\n            {\n                Body = $\"Appointment Created for\n                  {notification.Appointment.Start}\",\n                From = \"noreply@appointments.com\",\n                Subject = \"Appointment Created\",\n                To = emailAddress\n            };\n            await _emailSender.SendEmail(email);\n        }\n    }\n```", "```cs\npublic class NotifySignalRHubsAppointmentCreated :\n  INotificationHandler<AppointmentCreated>\n{\n  public Task Handle(AppointmentCreated notification,\n    CancellationToken cancellationToken)\n  {\n    // SignalR awesomeness here\n    return Task.CompletedTask;\n  }\n}\n```", "```cs\npublic record CreateAppointmentCommand(int\n  AppointmentTypeId, Guid DoctorId, Guid PatientId, Guid\n    RoomId, DateTime Start, DateTime End, string Title) :\n      IRequest<Appointment>;\npublic class CreateAppointmentHandler :\n  IRequestHandler<CreateAppointmentCommand, Appointment>\npublic async Task<Appointment> Handle\n  (CreateAppointmentCommand request, CancellationToken\n    cancellationToken){ … }\n```", "```cs\n// POST api/<AppointmentsController>\n        [HttpPost]\n        public async Task<ActionResult> Post([FromBody]\n         CreateAppointmentCommand createAppointmentCommand)\n        {\n            // Send appointment information to create\n               handler\n            var appointment = await\n              _mediator.Send(createAppointmentCommand);\n            //Publish AppointmentCreated event to all\n              listeners\n            await _mediator.Publish(new AppointmentCreated\n              (appointment));\n            // return success code to caller\n            return StatusCode(201);\n        }\n```", "```cs\n{\n    \"type\":\"AppointmentCreated\",\n    \"aggregateId\":\"aggregateId-guid-value\",\n    \"data\": {\n        \"doctorId\": \"doctorId-guid-value\",\n        \"customerId\": \"customerId-guid-value\",\n        \"dateTime\": \"recorded-date-time\",\n        ...\n    },\n    \"timestamp\":\"2022-01-01T21:00:46Z\"\n}\n```", "```cs\n{\n    \"type\":\"AppointmentCreated\",\n    \"aggregateId\":\"aggregateId-guid-value\",\n    \"doctorId\": \"doctorId-guid-value\",\n    \"customerId\": \"customerId-guid-value\",\n    \"dateTime\": \"recorded-date-time\",\n    ...\n    \"history\": [\n        {\n            \"type\":\"AppointmentCreated\",\n            \"data\": {\n                \"doctorId\": \"doctorId-guid-value\",\n                \"customerId\": \"customerId-guid-value\",\n                \"dateTime\": \"recorded-date-time\",\n                ...\n            },\n            \"timestamp\":\"2022-01-01T21:00:46Z\"\n        },\n        {\n            \"type\":\"AppointmentUpdated\",\n            \"data\": {\n                \"doctorId\": \"different-doctorId-guid-value\",\n                \"customerId\": \"customerId-guid-value\",\n                \"comment\":\"Update comment here\"\n            },\n            \"timestamp\":\"2022-01-01T21:00:46Z\",\n            ...\n        },\n        ...\n    ],\n    \"createdDate\":\"2022-01-01T21:00:46Z\",\n    ...\n}\n```"]