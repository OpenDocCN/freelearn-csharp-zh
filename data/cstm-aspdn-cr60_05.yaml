- en: '*Chapter 5*: Configuring WebHostBuilder'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第五章*: 配置 WebHostBuilder'
- en: 'When reading [*Chapter 4*](B17996_04_ePub.xhtml#_idTextAnchor066), *Configuring
    and Customizing HTTPS with Kestrel*, you might have asked yourself a question:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在 [*第四章*](B17996_04_ePub.xhtml#_idTextAnchor066)，*使用 Kestrel 配置和自定义 HTTPS*
    中阅读时，你可能自己问过一个问题：
- en: '*How can I use user secrets to pass the password to the HTTPS configuration?*'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*我如何使用用户密钥来将密码传递给 HTTPS 配置？*'
- en: You might even be wondering whether you can fetch the configuration from within
    `Program.cs`.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可能会想知道是否可以从 `Program.cs` 中获取配置。
- en: 'In this chapter, we''re going to answer these questions through the following
    topic:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过以下主题来回答这些问题：
- en: Re-examining `WebHostBuilderContext`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新审视 `WebHostBuilderContext`
- en: 'The topic in this chapter refers to the hosting layer of the ASP.NET Core architecture:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的主题指的是 ASP.NET Core 架构的托管层：
- en: '![Figure 5.1 – The ASP.NET Core architecture](img/Figure_5.1_B17996.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – ASP.NET Core 架构](img/Figure_5.1_B17996.jpg)'
- en: Figure 5.1 – The ASP.NET Core architecture
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the descriptions in this chapter, you will need to create an **ASP.NET**
    **Core** application. To do this, open your console, shell, or Bash terminal,
    and change to your working directory. Then, use the following command to create
    a new web application:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的描述，你需要创建一个 **ASP.NET Core** 应用程序。为此，打开你的控制台、shell 或 Bash 终端，切换到你的工作目录。然后，使用以下命令创建一个新的
    Web 应用程序：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now open the project in Visual Studio by double-clicking the project file,
    or in Visual Studio Code by typing the following command in the already-open console:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通过双击项目文件或在 Visual Studio Code 中在已打开的控制台中输入以下命令来在 Visual Studio 中打开项目：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The simple `web` project template changed in .NET 6.0\. In version 6.0, Microsoft
    introduced **minimal APIs** and changed the project template to use the minimal
    API approach. I'm going to show you the differences between these templates within
    this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在 .NET 6.0 中，简单的 `web` 项目模板发生了变化。在 6.0 版本中，Microsoft 引入了 **最小 API** 并将项目模板更改为使用最小
    API 方法。我将在本章中向您展示这些模板之间的差异。
- en: All of the code samples in this chapter can be found in the **GitHub** repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter05).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的 **GitHub** 仓库中找到，网址为 [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter05)。
- en: Re-examining WebHostBuilderContext
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新审视 WebHostBuilderContext
- en: 'Remember the `WebHostBuilder` Kestrel configuration in the `Program.cs` file
    that we looked at in [*Chapter 4*](B17996_04_ePub.xhtml#_idTextAnchor066), *Configuring
    and Customizing HTTPS with Kestrel*? In that chapter, we saw that you should use
    user secrets to configure the certificates password, as shown in the following
    code snippet:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们在 [*第四章*](B17996_04_ePub.xhtml#_idTextAnchor066)，*使用 Kestrel 配置和自定义 HTTPS*
    中查看的 `WebHostBuilder` Kestrel 配置吗？在那个章节中，我们看到了你应该使用用户密钥来配置证书密码，如下面的代码片段所示：
- en: '[PRE2]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This snippet is still valid for .NET 5.0 and prior versions, and it still is
    valid for almost all web projects in .NET 6.0\. But it is not valid for the `web`
    project template we use in the technical requirements section. The `Program.cs`
    file for a minimal API looks like this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个片段对于 .NET 5.0 及之前的版本仍然有效，对于几乎所有的 .NET 6.0 中的 Web 项目也仍然有效。但是，它不适用于我们在技术要求部分使用的
    `web` 项目模板。最小 API 的 `Program.cs` 文件如下所示：
- en: '[PRE3]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This means the configuration we implemented in the last chapter would look
    like this within a minimal API:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们在上一章中实现的配置在最小 API 中看起来是这样的：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following is valid for all project templates in .NET 6.0 and prior versions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下适用于 .NET 6.0 及之前版本的所有项目模板。
- en: 'Usually, you are not able to fetch the configuration inside this code. You
    need to know that the `UseKestrel()` method is overloaded, as you can see here:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，你无法在这个代码中获取配置。你需要知道 `UseKestrel()` 方法是重载的，就像你在这里看到的那样：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This first argument is a `WebHostBuilderContext` instance, which you can use
    to access the configuration. So, let''s rewrite the lambda a little bit to use
    this context:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是一个 `WebHostBuilderContext` 实例，你可以使用它来访问配置。所以，让我们稍微修改一下 lambda 表达式来使用这个上下文：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In this example, we write the keys using the colon divider, as this is the
    way in which you need to read nested configurations from `appsettings.json`:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，我们使用冒号分隔符写入密钥，因为这是从 `appsettings.json` 读取嵌套配置的方式：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Important Note
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This is just a sample of how to read configurations to configure **Kestrel**.
    Please never, *ever* store any credentials inside the code. Use the following
    concepts instead.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是如何读取配置以配置 **Kestrel** 的一个示例。请永远不要，*永远不要* 在代码中存储任何凭据。相反，使用以下概念。
- en: 'You are also able to read from the user secrets store where the keys are set
    up with the following **.NET** **CLI** commands that you need to execute in the
    project folder:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以从用户密钥存储中读取，其中密钥是通过以下 **.NET** **CLI** 命令设置的，您需要在项目文件夹中执行这些命令：
- en: '[PRE8]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This also applies to environment variables:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这也适用于环境变量：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Important Note
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Since the user secrets store is for local development only, you should pass
    credentials via environment variables to the application in production, or production-like
    applications. Also, the app settings configuration you will make in Azure will
    be passed as environment variables to your application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于用户密钥存储仅用于本地开发，因此您应在生产环境中通过环境变量将凭据传递给应用程序，或者类似生产的应用程序。此外，您在 Azure 中创建的应用程序设置配置将作为环境变量传递给您的应用程序。
- en: So, how does this all work?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这一切是如何工作的呢？
- en: How does it work?
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的？
- en: 'Do you remember the days back when you needed to set app configurations in
    the `Startup.cs` file in ASP.NET Core 1.0? They were configured in the constructor
    of the `StartUp` class and looked similar to this if you added user secrets:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您还记得那些需要设置 ASP.NET Core 1.0 中 `Startup.cs` 文件中的应用程序配置的日子吗？它们是在 `StartUp` 类的构造函数中配置的，如果您添加了用户密钥，它们看起来类似于此：
- en: '[PRE10]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code is now wrapped inside the `CreateDefaultBuilder` method (as you can
    see on GitHub – refer to the *Further reading* section for details) and looks
    like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码现在被封装在 `CreateDefaultBuilder` 方法中（如您在 GitHub 上所见 – 详细信息请参阅 *进一步阅读* 部分），其外观如下：
- en: '[PRE11]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is almost the same code, and it is one of the first things that gets executed
    when building the `WebHost`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这几乎与之前的代码相同，并且是构建 `WebHost` 时最早执行的事情之一。
- en: This needs to be one of the first things we set up because Kestrel is configurable
    via the app configuration. You can specify ports, URLs, and more by using environment
    variables or `appsettings.json`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要是我们设置的第一件事之一，因为 Kestrel 可以通过应用程序配置进行配置。您可以通过使用环境变量或 `appsettings.json` 来指定端口、URL
    等。
- en: 'You can find these lines in `WebHost.cs` on GitHub:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上的 `WebHost.cs` 文件中找到这些行：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This means that you are able to add these lines to `appsettings.json` to configure
    Kestrel endpoints:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以将这些行添加到 `appsettings.json` 中来配置 Kestrel 端点：
- en: '[PRE13]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alternatively, environment variables such as the following can be used to configure
    endpoints:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用以下环境变量来配置端点：
- en: '[PRE14]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Let's now recap everything we've covered in this chapter.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在回顾一下本章中我们涵盖的所有内容。
- en: Summary
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Inside `Program.cs`, you are able to make app configurations inside the lambdas
    of the configuration methods, provided you have access to the `WebHostBuilderContext`.
    This way, you can use all the configurations you like to configure `WebHostBuilder`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `Program.cs` 中，如果您有权访问 `WebHostBuilderContext`，则可以在配置方法的 lambda 表达式中进行应用程序配置。这样，您可以使用所有喜欢的配置来配置
    `WebHostBuilder`。
- en: In the next chapter, we are going to have a look at the hosting details. You
    will learn about different hosting models and how to host an ASP.NET Core application
    in different ways.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将查看托管细节。您将了解不同的托管模型以及如何以不同的方式托管 ASP.NET Core 应用程序。
- en: Further reading
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The `WebHost.cs` file in the ASP.NET GitHub repository: [https://github.com/aspnet/MetaPackages/blob/d417aacd7c0eff202f7860fe1e686aa5beeedad7/src/Microsoft.AspNetCore/WebHost.cs](https://github.com/aspnet/MetaPackages/blob/d417aacd7c0eff202f7860fe1e686aa5beeedad7/src/Microsoft.AspNetCore/WebHost.cs).'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET GitHub 仓库中的 `WebHost.cs` 文件：[https://github.com/aspnet/MetaPackages/blob/d417aacd7c0eff202f7860fe1e686aa5beeedad7/src/Microsoft.AspNetCore/WebHost.cs](https://github.com/aspnet/MetaPackages/blob/d417aacd7c0eff202f7860fe1e686aa5beeedad7/src/Microsoft.AspNetCore/WebHost.cs).
