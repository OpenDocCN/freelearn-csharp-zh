- en: Mock Test 2
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模拟测试2
- en: 'You need to write an application in which you create a class that establishes
    a connection with SQL Server and reads records in a certain table. We need to
    ensure the following in the class:'
  id: totrans-1
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要编写一个应用程序，在该应用程序中创建一个类，该类与SQL Server建立连接并读取某个表中的记录。我们需要确保类中的以下内容：
- en: The class should automatically release all the connections after the operation
    is complete.
  id: totrans-2
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类应在操作完成后自动释放所有连接。
- en: The class should support iteration.
  id: totrans-3
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类应支持迭代。
- en: Which of the following interfaces would you implement in the class?
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在类中，您会实现以下哪个接口？
- en: '`IEnumerator`'
  id: totrans-5
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IEnumerator`'
- en: '`IEquatable`'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IEquatable`'
- en: '`IComparable`'
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IComparable`'
- en: '`IDisposable`'
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`IDisposable`'
- en: If you need to write a function that could be called with a varying number of
    parameters, what would you use?
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要编写一个可以接受可变数量参数的函数，您会使用什么？
- en: Interface
  id: totrans-10
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接口
- en: Method overriding
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法重写
- en: Method overloading
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法重载
- en: Lamda expressions
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda表达式
- en: You are writing an application in which you need to reverse a string. Which
    of the following code snippets would you use?
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您正在编写一个需要反转字符串的应用程序。您会使用以下哪个代码片段？
- en: '`char[] characters = str.ToCharArray();`'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`char[] characters = str.ToCharArray();`'
- en: '`for (int start = 0, end = str.Length - 1; start < end; start++, end--)`'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`for (int start = 0, end = str.Length - 1; start < end; start++, end--)`'
- en: '`{`'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`characters[end] = str[start];`'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[end] = str[start];`'
- en: '`characters[start] = str[end];`'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[start] = str[end];`'
- en: '`}`'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`string reversedstring = new string(characters);`'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`string reversedstring = new string(characters);`'
- en: '`Console.WriteLine(reversedstring);`'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Console.WriteLine(reversedstring);`'
- en: '`char[] characters = str.ToCharArray();`'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`char[] characters = str.ToCharArray();`'
- en: '`for (int start = 0, end = str.Length - 1; start < end; start++, end--)`'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`for (int start = 0, end = str.Length - 1; start < end; start++, end--)`'
- en: '`{`'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`characters[start] = str[end];`'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[start] = str[end];`'
- en: '`characters[end] = str[start];`'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[end] = str[start];`'
- en: '`}`'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`string reversedstring = new string(characters);`'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`string reversedstring = new string(characters);`'
- en: '`Console.WriteLine(reversedstring);`'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Console.WriteLine(reversedstring);`'
- en: '`char[] characters = str.ToCharArray();`'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`char[] characters = str.ToCharArray();`'
- en: '`for (int start = 0, end = str.Length; start < end; start++, end--)`'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`for (int start = 0, end = str.Length; start < end; start++, end--)`'
- en: '`{`'
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`characters[start] = str[end];`'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[start] = str[end];`'
- en: '`characters[end] = str[start];`'
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[end] = str[start];`'
- en: '`}`'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`string reversedstring = new string(characters);`'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`string reversedstring = new string(characters);`'
- en: '`Console.WriteLine(reversedstring);`'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`Console.WriteLine(reversedstring);`'
- en: '`char[] characters = str.ToCharArray();`'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`char[] characters = str.ToCharArray();`'
- en: '`for (int start = 0, end = str.Length; start < end; ++start, end--)`'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`for (int start = 0, end = str.Length; start < end; ++start, end--)`'
- en: '`{`'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`{`'
- en: '`characters[start] = str[end];`'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[start] = str[end];`'
- en: '`characters[end] = str[start];`'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`characters[end] = str[start];`'
- en: '`}`'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`string reversedstring = new string(characters);`'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`string reversedstring = new string(characters);`'
- en: '`` `Console.WriteLine(reversedstring);` ``'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`` `Console.WriteLine(reversedstring);` ``'
- en: Which of the following features of Visual Studio would you use if you needed
    to compare the memory usage of different builds of the application?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您需要比较应用程序不同构建版本的内存使用情况，您会使用Visual Studio的以下哪个功能？
- en: IntelliSense
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 智能感应
- en: Use the CPU usage from the performance profiler
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用性能分析器的CPU使用情况
- en: Use the memory usage from the performance profiler
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用性能分析器的内存使用情况
- en: Use UI analysis from the performance profiler
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用性能分析器的UI分析
- en: Which of the following regex expressions would you use to ensure that the input
    being validated is a non-negative decimal number?
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您会使用以下哪个正则表达式来确保正在验证的输入是非负十进制数？
- en: '`^(?!\D+$)\+?\d*?(?:\.\d*)?$`'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^(?!\D+$)\+?\d*?(?:\.\d*)?$`'
- en: '`^(?:[1-9]\d*|0)?(?:\.\d+)?$`'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^(?:[1-9]\d*|0)?(?:\.\d+)?$`'
- en: '`^\d+(\.\d\d)?$`'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^\d+(\.\d\d)?$`'
- en: '`^(-)?\d+(\.\d\d)?$`'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`^(-)?\d+(\.\d\d)?$`'
- en: We are developing an application in which we are using an assembly called X.
    If we need to debug the code in the assembly, which of the following should we
    do?
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在开发一个应用程序，我们正在使用一个名为X的程序集。如果我们需要调试程序集中的代码，我们应该做什么？
- en: For the application, in Project Build Properties, set the Allow unsafe code
    property.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于应用程序，在项目构建属性中，设置允许不安全代码属性。
- en: For the application, in the Debug pane, in Debugging, set Enable native code
    and Continue.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于应用程序，在调试窗格中，在调试选项中，设置启用本地代码和继续。
- en: For the application, in the Debug pane, in Debugging, uncheck Enable Just My
    Code.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于应用程序，在调试窗格中，在调试选项中，取消选中启用仅我的代码。
- en: For the application, in Project Debug Properties, select the Start external
    program radio button and select assembly X.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于应用程序，在项目调试属性中，选择启动外部程序单选按钮并选择程序集X。
- en: We are creating an application with a `Student` class. We also have a variable
    called `students` declared in the application. Which of the following statements
    would you use to check whether the `students` variable is of a List of objects
    of type `Student`?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(students.GetType() is List<Student>[])`'
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(students.GetType() is List<Student>)`'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`if(students is List<Student>[])`'
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `if(students is List<Student>)` ``'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following code segments will not result in any loss of data?
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance(Convert.ToDouble(deposit));`'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(Double deposit)`'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance(Convert.ToDecimal(deposit));`'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(Decimal deposit)`'
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance(Convert.ToInt32(deposit));`'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(int deposit)`'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddDeposit(float deposit)`'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`AddToActBalance((Decimal)(deposit));`'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`public void AddToActBalance(Decimal deposit)`'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We are writing an application in which we need to write some text to a file.
    The code syntax for this is as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Which of the following lines would you insert in the preceding code to ensure
    the execution is not stopped until the file operation is in progress?
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: '`async stream.Write(encodedBits, 0, encodedBits.Length);`'
  id: totrans-99
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await stream.Write(encodedBits,0, encodedBits.Length);`'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`async stream.WriteAsync(encodedBits,0, encodedBits.Length);`'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`await stream.WriteAsync(encodedBits,0, encodedBits.Length);`'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are writing an application in which we have written the following code:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What would be the output of the program?
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: Compile-time error
  id: totrans-106
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: Runtime error
  id: totrans-107
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside Acceleration of Ferrari`'
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside Acceleration of Car`'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We have an application in which we have written the following logic in a `while`
    loop:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: What would you do to convert it into the equivalent of a `for` loop?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: '`for (int i = 0; i < 10 ; i++)`'
  id: totrans-113
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`for (int i = 1; i < 10 ; i++)`'
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`for (int i = 1; i < 10 ; ++i)`'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`}`'
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`for (int i = 1; i <= 10 ; i++)`'
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`{`'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Console.WriteLine(i);`'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`` `}` ``'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: What would be the output of the following program?
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`01234`'
  id: totrans-131
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1234`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`An error has occurred in collection operation`'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`1234` `An error has occurred in collection operation` `Error logged for the
    application`'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`1234` `An error has occurred in collection operation` `An error has occurred
    in null reference operation` `Error logged for the application`'
  id: totrans-135
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Delegates can be instantiated by:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Anonymous methods
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Lambda expressions
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Named methods
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What action needs to be performed to move a thread to the run state when suspended?
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Resume
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Interrupt
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Abort
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Suspended
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What would be the output of the following program?
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`Creating object of DisposeImplementation`'
  id: totrans-148
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Inside the dispose of class DisposeImplementation`'
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Inside the finalizer of class DisposeImplementation`'
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`Creating object of DisposeImplementation`'
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`创建DisposeImplementation对象`'
- en: '`Inside the dispose of class DisposeImplementation`'
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`在DisposeImplementation类的处置内部`'
- en: Runtime error in the application
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序中的运行时错误
- en: '`Creating object of DisposeImplementation`'
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`创建DisposeImplementation对象`'
- en: '`Inside the finalizer of class DisposeImplementation`'
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`在DisposeImplementation类的终结器内部`'
- en: '`Inside the dispose of class DisposeImplementation`'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`在DisposeImplementation类的处置内部`'
- en: 'Look at the following program:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看以下程序：
- en: '[PRE5]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What would be the output when it is called using the following syntax?
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用以下语法调用时，输出会是什么？
- en: '[PRE6]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`-7`'
  id: totrans-161
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`-7`'
- en: '`1`'
  id: totrans-162
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1`'
- en: '`7`'
  id: totrans-163
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`7`'
- en: Run time error
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行时错误
- en: Which of these can be used to authenticate user input?
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些可以用来验证用户输入？
- en: Symmetric algorithm
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对称算法
- en: Asymmetric algorithm
  id: totrans-167
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 非对称算法
- en: Hash values
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哈希值
- en: Digital signatures
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数字签名
- en: We are working with a large group of student objects. You need to use a data
    structure that allows access to elements in any order and also allows duplicate
    values without needing to group them under a particular key. What would you choose?
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们正在处理一组大量的学生对象。您需要使用一种数据结构，它允许以任何顺序访问元素，并且允许不需要将它们分组在特定键下时重复值。您会选择什么？
- en: List
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列表
- en: Stack
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 栈
- en: Dictionary
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字典
- en: Queue
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 队列
- en: Your application is running multiple worker threads. How do you make sure your
    application waits for all threads to complete their execution?
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的应用程序正在运行多个工作线程。您如何确保应用程序等待所有线程完成它们的执行？
- en: '`Thread.Sleep()`'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Thread.Sleep()`'
- en: '`Thread.WaitAll()`'
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Thread.WaitAll()`'
- en: '`Thread.Join()`'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Thread.Join()`'
- en: None
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无
- en: In an application, we are writing a method in a class that should be accessible
    to classes in the same class and in classes that are present in the same assembly
    that inherit from the class. What do you need?
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个应用程序中，我们在一个类中编写一个方法，该方法应该可以被同一类中的类以及继承自该类的同一程序集中的类访问。你需要什么？
- en: Private protected
  id: totrans-181
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
  zh: 私有受保护
- en: Protected internal
  id: totrans-182
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 受保护内部
- en: Protected
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 受保护
- en: Internal
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 内部
