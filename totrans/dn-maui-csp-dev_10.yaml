- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Consuming REST Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up until now, when we needed data, we faked it by using hardcoded objects. In
    a real-world program, however, you will get most of your data from local databases
    (as discussed in [*Chapter 8*](B19723_08.xhtml#_idTextAnchor144)), or you will
    interact with a service in the cloud through an API. You can interact using one
    of several architectures, of which the most popular for .NET MAUI is, arguably,
    **Representational State** **Transfer** (**REST**).
  prefs: []
  type: TYPE_NORMAL
- en: REST is a pattern that describes how classes interact across the internet. The
    key to REST is that it is stateless – that is, a sustained connection between
    the client and the API is not needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Forget Me Not architecture is designed to use a REST service and database,
    which will manage membership, authentication, and persistence of user data. In
    this chapter, we will look at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Using REST services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Forget Me Not API architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: API domain objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Data Transfer** **Objects** (**DTOs**)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The API Client class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow along with this chapter, you will need Visual Studio. If you are going
    to enter the code as you follow along, you’ll want the branch for the previous
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for the finished project for this chapter can be found at [https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/REST](https://github.com/PacktPublishing/.NET-MAUI-for-C-Sharp-Developers/tree/REST).
  prefs: []
  type: TYPE_NORMAL
- en: Using REST Services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Until now, all the work we’ve been doing has been local to a device (a phone,
    Windows, or Mac). The design of Forget Me Not entails the use of a service in
    the cloud that will manage all our data – invitations to a program, registration,
    authentication, data persistence, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: A client interacts with a server through a **REST API** (also called a RESTful
    API).
  prefs: []
  type: TYPE_NORMAL
- en: An `ForgetMeNot.API`.
  prefs: []
  type: TYPE_NORMAL
- en: Knowing more about REST
  prefs: []
  type: TYPE_NORMAL
- en: For our purposes, that is really all you need to know about REST, but if you
    are curious, you can find out more at [https://en.wikipedia.org/wiki/Representational_state_transfer](https://en.wikipedia.org/wiki/Representational_state_transfer).
  prefs: []
  type: TYPE_NORMAL
- en: The Forget Me Not API architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we looked at getting a user’s preferences in [*Chapter 8*](B19723_08.xhtml#_idTextAnchor144),
    we used the Preference Service. That service, until now, used a method to return
    hardcoded values. That, of course, was a temporary expedient so that we could
    focus on one thing at a time. We are ready now to interact with the online API.
  prefs: []
  type: TYPE_NORMAL
- en: Where’s the service?
  prefs: []
  type: TYPE_NORMAL
- en: I have created an online web service on Azure at [https://forgetmenotapi20230113114628.azurewebsites.net/](https://forgetmenotapi20230113114628.azurewebsites.net/).
  prefs: []
  type: TYPE_NORMAL
- en: It is my goal to keep this up and running so that you can implement the client
    and get meaningful results, but given that there may be maintenance costs, by
    the time you read this, the service may no longer be in place. If that is true,
    you can still get 95% of what you need by reading the API code and using hardcoded
    data, as we’ve been doing up until now.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that just going to the URL won’t get you anywhere. It is when we
    combine that base URL with the specific task-based additions that the magic happens.
    You can test whether the API is still available by creating an account or signing
    into one. If that works, then the rest of the API should work as well.
  prefs: []
  type: TYPE_NORMAL
- en: To facilitate our REST interactions with the API, we will use the extremely
    popular open source `RestSharp` library ([https://restsharp.dev/](https://restsharp.dev/)).
    It will do all the heavy lifting for us. (We’ll be using the `class` library template.)
  prefs: []
  type: TYPE_NORMAL
- en: Creating the projects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, we’ll need three new projects. Right-click on **Solution**
    and choose **Add New Project**. The three projects are named:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ForgetMeNot.API.Domain` (API domain objects)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ForgetMeNot.API.Dto` (DTOs)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ForgetMeNot.ApiClient` (a wrapper for the API)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Api.Doman` and `API.Dto` are both class libraries. `APIClient` is a `webapi`.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll look at each of these in turn, filling in all the details.
  prefs: []
  type: TYPE_NORMAL
- en: Because we’ll be using the API database, we can remove the local SQLite database.
    To do so, comment out or remove the `Constants` file and the entire `ForgetMeNotDemoDatabase.cs`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Fleshing out the models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before we create classes that correspond to the items in our model classes,
    we need to flesh them out.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with the `Preference` class in the `Model` directory. We had added
    an `Id` property for SQLite; we won’t need that anymore, so we can remove it.
    Remove it from `PreferencesTests.AfterCallingInitPreferencesIsNotEmpty()` as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'The design spec says that a user can invite a friend to be a buddy. We’ll need
    to add a model to describe the invitation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Similarly, we need to keep track of *occasions*, such as birthdays and anniversaries,
    so that we remember to use Forget Me Not to buy a present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll need a couple more `Model` classes, such as `User` and its derived class,
    `Buddy`. The owner of the app is a user, as are all their buddies. Here is the
    `User` `Model` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` We’ve migrated the ID up here to the base class. We won’t need it for
    the (now non-existent) local database, but we will need the ID on the server.
    It is a string because the server will create a **Globally Unique** **ID** (**GUID**).'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Each user can have any number of `Buddies`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[3]` Each user can send out any number of invitations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[4]` Each user will have a list of `Preference` objects.'
  prefs: []
  type: TYPE_NORMAL
- en: Commented-out code
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `invitations` property is commented out in the code present in
    the GitHub repository. Please uncomment it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Buddy` class builds on this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Commented-out code
  prefs: []
  type: TYPE_NORMAL
- en: For now, do not uncomment `InvitationStatus` or `OccasionModel`.
  prefs: []
  type: TYPE_NORMAL
- en: We store a lot of information about each buddy, including how long they’ve been
    our buddy, shared occasions, and the status of the invitation we sent to the `Buddy`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Examining the API domain objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The API domain objects are a superset of the `client model` classes. This is
    because there is data that the API will need that will not be visible on the client
    side. Right-click on **ForgetMeNot.API.Domain** and create the following classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`InvitationStatus`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Invite`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Occasion`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Related`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Roles`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`User`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UserPreference`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s walk through them, starting with `User` (note that this uses `UserPreference`,
    defined in the following code, so do not build until you have both classes):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, on the server, each `User` instance has a unique ID. Most of
    the other properties are the same as on the client, although they may not have
    the same identifier (for example, `FullName` rather than `Name`). This is not
    a problem, as we’ll do the mapping when we get the objects from the server.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few new fields, however – for example, `IsEmailConfirmed`, `HashedPassword`,
    and `Role`. These are used by the server for authentication.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the `Roles` file. It is a static class with the two roles we’ll
    support:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we’ll turn our attention to the `UserPreference` class. This corresponds
    to the `Preference` class in our client’s `Model` folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the API is, in some ways, independent of the client. We’re calling
    the class by a different name, and we’re not using the code generators.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need classes to represent `Invitation` and `Occasion`. Let’s start
    with `Invitation`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This class has a property of the `InvitationStatus` type. Create a file for
    that as well. This is just an enumeration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s the `Occasion` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The purpose of `NumDaysToNotify` is to allow a user to designate how many days
    in advance of an occasion they want to be notified (that functionality is left
    as an exercise for you!).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we add a class whose job is to tie a user to all their `Occasions`
    and buddies. Note that we use `User` for `Buddy`, as the base class has all the
    information we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: That’s it for that project. There are no methods; it really is just a set of
    server-based model objects.
  prefs: []
  type: TYPE_NORMAL
- en: Once we have the models, we need to determine how to transfer this data to and
    from the server. For that, we need DTOs.
  prefs: []
  type: TYPE_NORMAL
- en: Reviewing DTOs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ForgetMeNot.Api.Dto` project will, as you might have guessed, hold DTOs.
    These will correspond to the model objects but are designed to be passed back
    and forth between the server and the client.
  prefs: []
  type: TYPE_NORMAL
- en: Project reference
  prefs: []
  type: TYPE_NORMAL
- en: You will need to add a project reference from `ForgetMeNot.Api.Dto` to `ForgetMeNot.Api.Domain`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start with `BuddyDto.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Note that the constructor for `Buddy` takes `User`. As noted earlier, the `Buddy`
    class derives from `User`, and by passing `User` into the constructor, we can
    set `Buddy`’s `User` properties.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we are also using a list of `OccasionDto` objects. These are in the
    `ForgetMeNot.Api.Dto` project.
  prefs: []
  type: TYPE_NORMAL
- en: Other DTO files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The other key files in `ForgetMeNot.Api.Dto` are not tied to model classes
    but, rather, are data that is exchanged between client and server to facilitate
    managing the account – for example, `AccountCreateRequest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This is all that needs to be sent to the server when creating an account. There
    is a DTO to request an update to a user record that just contains `Id`, `FullName`,
    and `Email`. One important DTO is `UserResponse`, which contains information that
    corresponds to the `User` `Domain` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You pass in a `User` object and `UserResponse` turns it into a DTO.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can pass a `User` object into `ProfileResponse` and get back
    a `ProfileResponse` DTO:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The final piece in the puzzle is to wrap the API in a client-side class to facilitate
    interactions with data in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding ForgetMeNot.APIClient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The third API project, `ForgetMeNot.APIClient`, has only one class in it – `Client.cs`.
    This is the wrapper of the REST service that the client (`ForgetMeNotDemo`) will
    interact with.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start with four member variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` As noted earlier, `RestClient` is the library we are using to manage
    the REST interactions (obtained through NuGet, as discussed earlier).'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` `baseURL` is the prefix for all the API calls and was created when we
    moved the API to Azure. As noted earlier, it is available at [https://forgetmenotapi20230113114628.azurewebsites.net/](https://forgetmenotapi20230113114628.azurewebsites.net/).'
  prefs: []
  type: TYPE_NORMAL
- en: '`[3]` `username` and `password` are used by the client to access the user’s
    record.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The constructor to `Client` takes `baseUrl`, assigns it to the field, and then
    calls `SetClient()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` The options we want for this REST client create a robust interface; we
    won’t throw an exception on any error and we won’t time out for 10 seconds.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` With the options set, we can create a new `RestClient`, which is defined
    in `RestSharp`.'
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the file is divided into sections for important behavior by the
    client, beginning with the code needed to authenticate the user.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We set a `IsAuthenticated` property, which is set to whether or not `client.Authenticator`
    is `null`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then have a `Login` method that takes a `LoginRequest` object, sets `username`
    and `password`, and calls `Authenticate`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Project reference
  prefs: []
  type: TYPE_NORMAL
- en: You will need a reference to the DTO project.
  prefs: []
  type: TYPE_NORMAL
- en: '`LoginRequest` is defined in the DTO project and simply has two string properties,
    `Username` and `Password` (refer to the following code block).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Authenticate` method uses `RestSharp`’s OAuth authentication – that is,
    again, the heavy lifting is done by `RestSharp`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Fortunately, you don’t need to understand how to make this work; you just pass
    in the username and password and `RestSharp` takes care of the rest of it for
    you.
  prefs: []
  type: TYPE_NORMAL
- en: Client versus client
  prefs: []
  type: TYPE_NORMAL
- en: Remember that even though you are in the `Client` class, the `client` field
    is the `RestSharp` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a helper method to get the current API version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: And that takes us to the profile section of the file, where we can get and update
    the `profile` object.
  prefs: []
  type: TYPE_NORMAL
- en: Profile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two methods needed for the profile. The first gets the profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This uses the `ProfileResponse` DTO we examined earlier. The second method
    in this section is used to update the profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code uses the `ProfileUpdateRequest` object defined in `ForgetMeNot.Api.Dto`.
  prefs: []
  type: TYPE_NORMAL
- en: Again, all the interesting work here is being done by `RestSharp`. As you can
    see, the client is really just a wrapper around the `RestSharp` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s reinforce this by looking at a couple more methods that are used to manage
    the `Buddy` object.
  prefs: []
  type: TYPE_NORMAL
- en: The Buddy region
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This region consists of the methods we need to interact with buddies, `GetBuddy`
    and `CreateInvitation`. `GetBuddy` returns a list of `BuddyDto` objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '`CreateInvitation` returns `Guid`, which is the `Id` attribute of the resulting
    `Invitation` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: This code uses `InviteCreateRequest`, which is defined in `ForgetMeNot.Api.Dto`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we have a method to get all the users – that is, all this user’s buddies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: What we get back is a list of `UserResponse` DTO objects that we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve examined all the projects provided by the server, we are ready
    to have `ForgetMeNotDemo` interact with the API to get, store, and retrieve data.
  prefs: []
  type: TYPE_NORMAL
- en: Using the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the `Client` class and its supporting `DTO` and `API` domain classes in
    place, we’re ready to interact with the API to create accounts and log in, as
    well as store and retrieve our preferences.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing a new user will do is create an account. To make this work,
    we need to bring the user to the `CreateAccount.xaml`, where they can fill in
    their name, email, and password. To implement this, we have to make some substantial
    changes to the **Login** and **Create** **Account** pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by pointing the application to start with login. Modify the `App.xaml.cs`
    `App` method to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` Have the IoC container pass in an instance of `LoginViewModel`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Set `MainPage` (the entry point to the program) to `LoginPage`.'
  prefs: []
  type: TYPE_NORMAL
- en: The job of the **Login** page will now be to either allow the user to log in
    or take them to the **Create** **Account** page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to add routing for `CreateAccount` in `AppShell.xaml.cs`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Next, let’s modify the **Login** page.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying the Login page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now that we’re going to turn management of authentication over to the server,
    we need a different `LoginPage.xaml.cs` and replace it with this simple version:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '`LoginViewModel` is passed in from `App`, as shown in the preceding code.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s modify `LoginPage` to focus on either logging a user in or redirecting
    them to create a new account.
  prefs: []
  type: TYPE_NORMAL
- en: Updating LoginPage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We’re going to make some significant changes to `LoginPage`. To avoid confusion,
    delete all you have there and replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'With the styles in place, we’re ready to create the `Labels` and `Entry` controls
    to get a user’s name and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Once a user has filled in the fields (or is unable to do so because they’ve
    forgotten their password), we will offer them the following choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` I’ve expanded the two styles a bit to minimize the styling in the controls.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Click `ViewModel` a little later).'
  prefs: []
  type: TYPE_NORMAL
- en: '`[3]` Click `CreateAccount` page.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[4]` Forgot password is (as they say) left as an exercise for you.'
  prefs: []
  type: TYPE_NORMAL
- en: With this new API-oriented `LoginViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: The AccountService class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before updating `LoginViewModel`, we’ll need to create the `AccountService`
    class and its associated interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This class is used in the creation and authentication of the account. With this
    in place, we are ready to update `LoginViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: Updating LoginViewModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`LoginViewModel` must be updated to meet the new requirements of the updated
    `LoginPage` class. Once again, delete all that you have and replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The constructor is passed by `AccountService` by way of the **Inversion of
    Control** (**IoC**) container and holds onto that service for its other methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll set `ActivityIndicator` to display while we ask the API to log a user
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Implementing the logic to manage a forgotten password is left as an exercise
    for you:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'We delegate to the server the responsibility for creating new accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` We create the `AccountService` field, which will mediate between `ViewModel`
    and the `Client` class.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` The IoC passes in the `AccountService` we need, which we will assign
    to the `AccountService` member we just created.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[3]` We bundle up the username and password into a `LoginRequest` object.
    We get this class from `ForgetMeNot.API.DTO`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`[4]` We turn `ActivityIndicator` on, pass `LoginRequest` to the API, and then,
    when we get a response, turn `ActivityIndicator` off. We’ll look at what `AccountService`
    is actually doing in the next step.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[5]` We ask `AccountService` whether the login was successful. If it was (the
    happy path), we reset `MainPage` (away from `LoginPage`) and navigate there.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[6]` If login fails (the sad path), we inform the user that we are unable
    to log them in and give them another chance to do so.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[7]` This book will not implement the code to reset a password.'
  prefs: []
  type: TYPE_NORMAL
- en: '`AccountService` was responsible for the login. Let’s look at that next.'
  prefs: []
  type: TYPE_NORMAL
- en: Using AccountService to log in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For security purposes, we want a server to be responsible for authenticating
    a user based on an email address and password:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Among other methods in `AccountService` (which we will return to shortly) are
    the following two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[1]` Login simply delegates to `apiClient` the responsibility to handle the
    *login* through the *API*, passing in `LoginRequest`, which contains the username
    and password.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Similarly, the `IsLoggedIn` Boolean method uses `apiClient` to see whether
    the current user is *authenticated*.'
  prefs: []
  type: TYPE_NORMAL
- en: A second option exists for a user, which is to tap on the `CreateAccountPage`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Create Account page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Create Account** page prompts a user for a username and a password, as
    well as their email. To keep things simple, in this example, we only ask for the
    password once, but we do implement validation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` We use the Community Toolkit’s `StoppedTypingBehavior` to detect when
    a user has finished entering a field. We set `StoppedTypingTimeThreshold` to `500`
    – that is, half a second. This indicates that once the user has not entered anything
    for half a second, we assume they are done and kick in the validation. Note that
    the command is set to `ValidateNameCommand`. This is handled in `ViewModel` (as
    shown later) but returns a Boolean, which indicates whether or not the user has
    entered a valid name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` Only show the label if the name validation fails.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Now, do the same for email as you did for the name, calling `ValidateEmailCommand`
    when the user stops typing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` The `IsPassword` property of the entry is set to `true`, and the password
    will be displayed as a series of asterisks as a user enters a character.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Once the fields are valid, the `Signup` command.'
  prefs: []
  type: TYPE_NORMAL
- en: All of the supporting commands and validation are in `CreateAccountViewModel`.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up CreateAccountViewModel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing we see in this file are all the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note that there are properties for the error messages along with the prompts.
    There is also a Boolean property, `EnableButton`, which defaults to `false` (if
    you don’t set a Boolean, it defaults to `false`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The constructor takes `AccountService`, passed in by the IoC (this was registered
    in `MauiProgram.cs`). Update the Client constructor to take a string serving as
    `baseUrl`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'We’ll turn to the `CreateAccountViewModel` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Let’s examine a `Validation` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The business requirement is that a valid name has at least two characters.
    The code to validate is a simple `if` statement, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` The `EnableButton` property (which is used to determine whether the `true`
    when the name, email, and password are all valid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` If the name is not valid, the `ShowNameErrorMessage` property is set
    to `true`, and the error message is displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll look at the support that .NET MAUI provides for a
    more elegant validation approach.
  prefs: []
  type: TYPE_NORMAL
- en: The most important command in this file is the one that responds to `SignUpCommand`.
  prefs: []
  type: TYPE_NORMAL
- en: Handling the SignUp command
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `SignUp` method checks to ensure that the fields are valid (by making sure
    `EnableButton` is true) and then creates an `AccountCreateRequest` object, which
    is defined in `ForgetMeNot.Api.Dto`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'It passes that object to the `CreateAccount` method on `accountService`. Let’s
    look at the entire method in `ForgetMeNot.Api.Dto AccountCreateRequest`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '`[1]` Start by creating `AccountCreateRequest` object, as explained earlier.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[2]` Call `CreateAccount` on the service. We’ll look at that method in just
    a moment.'
  prefs: []
  type: TYPE_NORMAL
- en: '`[3]` If everything works, show a dialog box (or, as we did earlier, a toast).'
  prefs: []
  type: TYPE_NORMAL
- en: '`[4]` Once a user account has been created, go back a page to the **Login**
    page.'
  prefs: []
  type: TYPE_NORMAL
- en: All that the `CreateAccount` method in `AccountService` does is pass along the
    `AccountCreateRequest` object to the `apiClient` `CreateAccount` method.
  prefs: []
  type: TYPE_NORMAL
- en: The mechanisms described here are correct as far as they go, but they do not
    include the invitation response that the final app should have (a user invites
    a buddy who then creates an account).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s not forget that we originally created `LoginCS` as a way to mimic the
    XAML in C#. You’ll need to fix up `LoginCS` to match the naming conventions in
    the XAML file or comment it out altogether, as we are not using it.
  prefs: []
  type: TYPE_NORMAL
- en: It’s time to run the program and make sure everything we did works. However,
    sometimes, you will get unexplained build errors when you make this many changes.
  prefs: []
  type: TYPE_NORMAL
- en: What to do if it won’t build
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Assuming you’ve checked all your code, it is correct, and you are getting weird
    build errors (such as `InitializeComponents not found`), it may be time to clean
    everything out. To do so, close Visual Studio and navigate to the folder where
    your files are. Delete the `bin` and `obj` directories within each project, as
    shown in *Figure 10**.1*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Deleting the bin and obj directories'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B19723.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – Deleting the bin and obj directories
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Restart Visual Studio and immediately select **Build** | **Clean Solution**
    from the menu. Finally, select **Build** | **Rebuild Solution**, which forces
    a complete rebuild rather than an incremental build. Give your project a moment
    or two to settle down and run it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You should be brought directly to the **Login** page, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The Login page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B19723.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – The Login page
  prefs: []
  type: TYPE_NORMAL
- en: Next, click on `Placeholder` property of the `Entry` control.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.3 – The CreateAccount page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B19723.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – The CreateAccount page
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the fields and click **Sign up**. Your account will be created on the
    server, and a dialog box will appear to let you know it worked, as shown in *Figure
    10**.4*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 – A successful sign-up'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B19723.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – A successful sign-up
  prefs: []
  type: TYPE_NORMAL
- en: If you try to log in, you will get an `unauthorized` message. The problem is
    that the system does not want the username; it wants the user’s email.
  prefs: []
  type: TYPE_NORMAL
- en: Unauthorized
  prefs: []
  type: TYPE_NORMAL
- en: You will, of course, get an unauthorized message with any bad username or invalid
    password.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s fix `LoginPage.xaml` and log in, as shown in *Figure 10**.5*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – Logging in with our new account'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.5_B19723.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.5 – Logging in with our new account
  prefs: []
  type: TYPE_NORMAL
- en: When the login is authenticated, you are taken directly to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note and revel in the fact that the account creation and
    the authentication both take place in the cloud via the API.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we reviewed how to interact with an API. We gained insight
    into the internals of that interaction by examining the API domain and DTO projects,
    and we saw how the `APIClient` class wraps all the API calls to make life easier
    and more intuitive on the client side.
  prefs: []
  type: TYPE_NORMAL
- en: This is a reasonably advanced topic, and in the next chapter, we will dive into
    even more advanced topics to move you from being a novice .NET MAUI programmer
    to an expert.
  prefs: []
  type: TYPE_NORMAL
- en: Quiz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is a DTO?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why don’t we need a local SQLite database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the API Client class do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where does account creation occur?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Where does authentication occur?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You try it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implement the *Forgot Password* client-side code.
  prefs: []
  type: TYPE_NORMAL
