- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Managing Requirements
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理需求
- en: 'Based on what we covered in *Chapters 1* and *2*, the first steps of software
    development will direct you to create a software project. When it comes to software
    projects, the biggest challenge is how to organize them in a way where every single
    participant will understand what is needed. The best way to do so is to organize
    its requirements. But more than that, connecting these requirements to a code
    repository will deliver to everybody a fast and more collaborative view of the
    project that is being worked on. For years, Microsoft has invested in tools to
    help us to do this. Team Foundation Server and Visual Studio Teams Services are
    examples. Today, there are two good approaches we can use that we will discuss
    in this chapter: Azure DevOps and GitHub. Azure DevOps is an evolution of Visual
    Studio Team Services, and it offers a variety of new features that can help developers
    document and organize their software. GitHub is well known as an online code repository,
    but since Microsoft acquired it, a bunch of great tools for application lifecycle
    management have been integrated into it. For this reason, we can now find many
    different ways of using GitHub.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 *第一章* 和 *第二章* 中所涵盖的内容，软件开发的第一步将指导您创建一个软件项目。当涉及到软件项目时，最大的挑战是如何以让每个参与者都能理解所需的方式组织它们。最好的办法是组织其需求。但不仅如此，将这些需求与代码仓库连接起来将为每个人提供一个快速且更协作的项目视图，该项目正在被工作。多年来，Microsoft
    投资于帮助我们完成这项工作的工具。Team Foundation Server 和 Visual Studio Team Services 就是其中的例子。今天，我们有两种很好的方法可以在此章节中讨论：Azure
    DevOps 和 GitHub。Azure DevOps 是 Visual Studio Team Services 的发展，它提供了一系列新功能，可以帮助开发者文档化和组织他们的软件。GitHub
    以在线代码仓库而闻名，但自从 Microsoft 收购它以来，许多用于应用程序生命周期管理的优秀工具已经集成其中。因此，我们现在可以找到许多不同的使用 GitHub
    的方法。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a DevOps project using your Azure account
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您的 Azure 账户创建 DevOps 项目
- en: Understanding the functionalities offered by Azure DevOps and GitHub to organize
    your project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 Azure DevOps 和 GitHub 提供的功能以组织您的项目
- en: Organizing and managing requirements using Azure DevOps and GitHub
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Azure DevOps 和 GitHub 组织和管理需求
- en: The first two sections of this chapter summarize all the functionalities offered
    by these tools, while the remaining sections focus specifically on the tools for
    documenting requirements and supporting the overall development process. Most
    of the functionality introduced in the first two sections will be analyzed in
    more detail in other chapters.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的前两节总结了这些工具提供的所有功能，而其余部分则专注于文档化需求和支持整体开发流程的工具。第一和第二节中介绍的大部分功能将在其他章节中更详细地分析。
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to create a new free Azure account or use an existing
    one. The *Creating an Azure account* section in *Chapter 1*, *Understanding the
    Importance of Software Architecture*, explains how to create one.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您创建一个新的免费 Azure 账户或使用现有的账户。在 *第一章*，*理解软件架构的重要性* 中的 *创建 Azure 账户* 部分解释了如何创建账户。
- en: Introducing Azure DevOps
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Azure DevOps
- en: Azure DevOps is a Microsoft **Software-as-a-Service** (**SaaS**) platform that
    enables you to deliver continuous value to your customers. By creating an account
    there, you will be able to easily plan your project, store your code safely, test
    it, publish the solution to a staging environment, and then publish the solution
    to the actual production infrastructure.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps 是一个 Microsoft **软件即服务** (**SaaS**) 平台，它使您能够向客户持续交付价值。通过在那里创建账户，您将能够轻松地规划项目、安全地存储代码、测试它、将解决方案发布到预发布环境，然后将其发布到实际的生产基础设施。
- en: The automation of all the steps involved in software production ensures the
    continuous enhancement and improvement of an existing solution to adapt it to
    market needs.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化软件生产中涉及的所有步骤确保现有解决方案的持续增强和改进，以适应市场需求。
- en: You can start the process by accessing [https://dev.azure.com](https://dev.azure.com).
    There, you will be able to sign up using a new account or even sign in using your
    GitHub account. Once you have access to it, you will be asked to create an organization,
    as you can see in the following figure.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问 [https://dev.azure.com](https://dev.azure.com) 开始此过程。在那里，您可以使用新账户注册或甚至使用您的
    GitHub 账户登录。一旦您获得访问权限，您将被要求创建一个组织，如图下所示。
- en: '![](img/B19820_03_01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_01.png)'
- en: 'Figure 3.1: Creating an Azure DevOps organization'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1：创建 Azure DevOps 组织
- en: After the organization is created, you will be able to create a new project,
    as we can see in the following screenshot.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 组织创建后，您将能够创建一个新的项目，如下面的屏幕截图所示。
- en: '![](img/B19820_03_02.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19820_03_02.png)'
- en: 'Figure 3.2: Creating a project using Azure DevOps'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2：使用Azure DevOps创建项目
- en: It is important to mention that public projects can be used so long as you comply
    with the Azure DevOps code of conduct. Once you define the name of the project
    and its visibility, you will have the project created in seconds.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 需要指出的是，只要您遵守Azure DevOps的行为准则，就可以使用公开项目。一旦您定义了项目的名称和可见性，您将在几秒钟内创建项目。
- en: '![](img/B19820_03_03.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19820_03_03.png)'
- en: 'Figure 3.3: Azure DevOps project created'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3：已创建的Azure DevOps项目
- en: DevOps itself will be discussed in detail in *Chapter 8*, *Understanding DevOps
    Principles and CI/CD*, but you need to understand it as a philosophy that is focused
    on delivering value to customers. It is the union of people, processes, and products,
    where the **Continuous Integration and Continuous Deployment** (**CI/CD**) methodology
    is used to apply continuous improvements to a software application delivered to
    the production environment. Azure DevOps is a powerful tool whose range of applications
    encompasses all the steps involved in both the initial development of an application
    and its subsequent CI/CD process.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps本身将在*第8章*，*理解DevOps原则和CI/CD*中详细讨论，但您需要将其理解为一个专注于向客户交付价值的哲学。它是人员、流程和产品的结合，其中**持续集成和持续部署**（**CI/CD**）方法用于将持续改进应用于交付到生产环境中的软件应用程序。Azure
    DevOps是一个功能强大的工具，其应用范围涵盖了应用程序初始开发和随后的CI/CD流程中的所有步骤。
- en: Azure DevOps contains tools for collecting requirements and organizing the whole
    development process. They can be accessed by clicking the **Boards** menu option
    on the Azure DevOps page.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps包含收集需求和组织整个开发过程的工具。您可以通过点击Azure DevOps页面上的**Boards**菜单选项来访问它们。
- en: '![Interface gráfica do usuário, Aplicativo  Descrição gerada automaticamente](img/B19820_03_04.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![用户界面，应用程序，自动生成的描述](img/B19820_03_04.png)'
- en: 'Figure 3.4: Azure DevOps Boards menu'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4：Azure DevOps Boards菜单
- en: All other functionalities available in Azure DevOps are briefly reviewed in
    the following subsections. They will be discussed in detail in other chapters.
    More specifically, DevOps principles and CI/CD are discussed in *Chapter 8*, *Understanding
    DevOps Principles and CI/CD*, and build/test pipelines can be reviewed in *Chapter
    9*, *Testing Your Enterprise Application*.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps中所有其他功能将在以下小节中简要介绍。它们将在其他章节中详细讨论。更具体地说，DevOps原则和CI/CD将在*第8章*，*理解DevOps原则和CI/CD*中讨论，而构建/测试管道可以在*第9章*，*测试您的企业应用程序*中查看。
- en: Managing system requirements in Azure DevOps
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Azure DevOps中管理系统需求
- en: Azure DevOps enables you to document system requirements using work items. Work
    items are stored in your project as chunks of information that can be assigned
    to a person. They are classified into various types and may contain a measure
    of the development effort required, a status, and the development stage (iteration)
    they belong to. Mainly, they are tasks or actions that need to be completed to
    deliver a product or service.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Azure DevOps使您能够使用工作项来记录系统需求。工作项以信息块的形式存储在您的项目中，可以分配给个人。它们被分类为各种类型，可能包含所需开发工作的度量、状态以及它们所属的开发阶段（迭代）。主要来说，它们是需要完成以交付产品或服务的任务或行动。
- en: DevOps is usually combined with agile methodologies, so Azure DevOps uses iterations,
    and the whole development process is organized as a set of sprints. The work items
    available depend on the *work item process* you select while creating the Azure
    DevOps project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps通常与敏捷方法结合使用，因此Azure DevOps使用迭代，整个开发过程被组织为一组冲刺。可用的工项取决于您在创建Azure DevOps项目时选择的*工作项流程*。
- en: You can check project types in Azure DevOps at [https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在Azure DevOps中检查项目类型，请参阅[https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process](https://learn.microsoft.com/en-us/azure/devops/boards/work-items/guidance/choose-process)。
- en: The following subsections contain a description of the most common work item
    types that appear when an **Agile** or **Scrum** work item process is selected
    (the default is **Agile**).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下小节包含了对在选择了**敏捷**或**Scrum**工作项流程时出现的最常见工作项类型的描述（默认为**敏捷**）。
- en: Epic work items
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 经典工作项
- en: Imagine you are developing a system comprising various subsystems. You are probably
    not going to conclude the whole system in a single iteration. Therefore, we need
    an umbrella spanning several iterations to encapsulate all features of each subsystem.
    Each Epic work item represents one of these umbrellas that can contain several
    features to be implemented in various development iterations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您正在开发一个由各种子系统组成的系统。您可能不会在一个迭代中完成整个系统。因此，我们需要一个跨越多个迭代的伞形结构来封装每个子系统的所有功能。每个史诗工作项代表这些伞形结构中的一个，它可以包含在各个开发迭代中实现的多项功能。
- en: In the Epic work item, you can define the state and acceptance criteria as well
    as the start date and target date. Besides this, you can also provide a priority
    and an effort estimate. All this detailed information helps the stakeholders to
    follow the development process. This is useful as a macro view of the project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在史诗工作项中，您可以定义状态和验收标准，以及开始日期和目标日期。除此之外，您还可以提供优先级和努力估计。所有这些详细信息都有助于利益相关者跟踪开发过程。这对于项目的宏观视角是有用的。
- en: Feature work items
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能工作项
- en: All the information that you provide in an Epic work item can also be placed
    in a Feature work item. So, the difference between these two types of work items
    is not related to the kind of information they contain but rather to their respective
    roles and the goals your team aims to accomplish by completing. A feature is a
    shippable software component. Epics may span several iterations and are hierarchically
    above Features; that is, each Epic work item is linked to several children features,
    while each Feature work item is usually implemented in a few sprints and is part
    of a single Epic work item.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您在史诗工作项中提供的所有信息也可以放置在功能工作项中。因此，这两种类型的工作项之间的区别并不在于它们包含的信息类型，而在于它们各自的角色以及您的团队通过完成这些工作项希望实现的目标。功能是一个可交付的软件组件。史诗可能跨越多个迭代，并且在功能之上；也就是说，每个史诗工作项都链接到多个子功能，而每个功能工作项通常在几个冲刺中实现，并作为单个史诗工作项的一部分。
- en: It is worth mentioning that all work items have sections for team discussions.
    There, you will be able to find a team member in the discussion area by typing
    the `@` character (as in many forums/social media applications). Inside each work
    item, you can link and attach various information. You may also check the history
    of the current work item in a specific section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，所有工作项都有团队讨论的章节。在那里，您可以通过输入`@`字符（如在许多论坛/社交媒体应用程序中）来找到讨论区域中的团队成员。在每个工作项内部，您可以链接和附加各种信息。您还可以在特定章节中检查当前工作项的历史记录。
- en: Feature work items are the places to start recording user requirements. For
    instance, you can write a Feature work item called **Access Control** to define
    the complete functionality needed to implement the system access control.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 功能工作项是开始记录用户需求的地方。例如，您可以写一个名为**访问控制**的功能工作项来定义实现系统访问控制所需的所有完整功能。
- en: Product Backlog items/User Story work items
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 产品待办事项/用户故事工作项
- en: Which of these work items is available depends on the working item process selected.
    There are minor differences between them, but their purpose is essentially the
    same. They contain detailed requirements for the features, described by the Feature
    work items they are connected to. More specifically, each Product Backlog/User
    Story work item specifies the requirements of a single functionality that is part
    of the behavior described in its parent Feature work item.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些工作项中哪些可用取决于所选的工作项流程。它们之间有一些细微的差别，但它们的目的基本上是相同的。它们包含由与之相连的功能工作项描述的详细需求。更具体地说，每个产品待办事项/用户故事工作项指定了其父功能工作项中描述的行为的一部分功能的详细需求。
- en: 'For instance, in a Feature work item for system access control, the maintenance
    of the users and the login interface should be two different User Story/Product
    Backlog items. These requirements will guide the creation of other child work
    items:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个系统访问控制的功能工作项中，用户维护和登录界面的维护应该是两个不同的用户故事/产品待办事项。这些需求将指导创建其他子工作项：
- en: '**Tasks**: These are important work items that describe the job that needs
    to be done to meet the requirements stated in the father Product Backlog items/User
    Story work item. Task work items can contain time estimates, which help with team
    capacity management and overall scheduling.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**：这些是描述为了满足在父产品待办事项/用户故事工作项中声明的需求而需要完成的任务的必要工作项。任务工作项可以包含时间估计，这有助于团队容量管理和整体调度。'
- en: '**Test cases**: These items describe how to test the functionality described
    by the requirements.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试用例**：这些条目描述了如何测试需求中描述的功能。'
- en: Considering that you will have many work items in a project, visualizing them
    is not an easy task. For this reason, you may consider **Work Item Visualization**
    to simplify your view. Check it out at [https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到你将在项目中有很多工作项，可视化它们并不是一件容易的任务。因此，你可能需要考虑**工作项可视化**来简化你的视图。在[https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization](https://marketplace.visualstudio.com/items?itemName=ms-devlabs.WorkItemVisualization)查看。
- en: The number of tasks and test cases you will create for each Product Backlog/User
    Story work item will vary according to the development and testing scenario you
    use.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你将为每个产品待办事项/用户故事工作项创建的任务和测试用例数量将根据你使用的开发和测试场景而有所不同。
- en: Azure DevOps repository
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Azure DevOps仓库
- en: 'There is no software without code, and the code that will be implemented according
    to a software requirement needs to be placed in a software repository. The **Repos**
    menu item gives you access to a default Git repository where you can place your
    project’s code:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 没有代码就没有软件，根据软件需求将要实现的代码需要放置在软件仓库中。**Repos**菜单项让你可以访问一个默认的Git仓库，你可以在这里放置你的项目代码：
- en: '![](img/B19820_03_05.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_05.png)'
- en: 'Figure 3.5: Azure DevOps Repos menu'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5：Azure DevOps Repos菜单
- en: By clicking the **Files** item, you enter the default repository initial page.
    It is empty and contains instructions on how to connect to this default repository.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击**文件**项，你进入默认仓库的初始页面。它是空的，并包含如何连接到此默认仓库的说明。
- en: 'You can add further repositories through the drop-down menu at the top of the
    page:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过页面顶部的下拉菜单添加更多仓库：
- en: '![](img/B19820_03_06.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_06.png)'
- en: 'Figure 3.6: Adding a new repository'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6：添加新的仓库
- en: All repositories created are accessible through the same drop-down menu.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 所有创建的仓库都可以通过相同的下拉菜单访问。
- en: 'As shown in the preceding screenshot, each repository’s initial page contains
    the repository address and a button to generate repository-specific credentials,
    so you can connect to your DevOps repositories with your favorite Git tools. However,
    you can also connect from inside Visual Studio in a very simple way:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，每个仓库的初始页面包含仓库地址和生成特定于仓库凭据的按钮，因此你可以使用你喜欢的Git工具连接到你的DevOps仓库。然而，你也可以通过一个非常简单的方式在Visual
    Studio内部连接：
- en: Start Visual Studio and ensure you are logged in to it with the same Microsoft
    account used to define your DevOps project (or that was used to add you as a team
    member).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Visual Studio并确保你使用用于定义你的DevOps项目（或用于添加你为团队成员）的同一Microsoft账户登录。
- en: If the **Git Changes** window is not open, make it appear by going to the top
    menu in Visual Studio and selecting **View -> Git Changes**.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果**Git更改**窗口没有打开，请通过Visual Studio顶部的菜单转到**视图 -> Git更改**来使其出现。
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_03_07.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B19820_03_07.png)'
- en: 'Figure 3.7: Git Changes window'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7：Git更改窗口
- en: Click the **Create Git Repository**... button in the Git Changes window.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Git更改窗口中点击**创建Git仓库**...按钮。
- en: 'In the window that opens, select **Existing remote** and insert the URL of
    the DevOps repository you created. Then, click **Create and Push**:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在打开的窗口中，选择**现有远程**并插入你创建的DevOps仓库的URL。然后，点击**创建并推送**：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B19820_03_08.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序  自动生成的描述](img/B19820_03_08.png)'
- en: 'Figure 3.8: Connecting to the remote DevOps repository'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8：连接到远程DevOps仓库
- en: 'Once connected to your DevOps remote repository, the Git Changes window will
    show several Git commands:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦连接到你的DevOps远程仓库，Git更改窗口将显示几个Git命令：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_03_09.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B19820_03_09.png)'
- en: 'Figure 3.9: Git Changes window'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9：Git更改窗口
- en: 'When you have changes to commit, you can insert a message in the textbox at
    the top of the window and commit them locally by clicking the **Commit All** button,
    or you can click the dropdown next to this button to access more options:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有要提交的更改时，你可以在窗口顶部的文本框中插入一条消息，并通过点击**提交所有**按钮在本地提交它们，或者你可以点击此按钮旁边的下拉菜单来访问更多选项：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B19820_03_10.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B19820_03_10.png)'
- en: 'Figure 3.10: Commit options'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.10：提交选项
- en: 'You can commit and push or commit and sync, but you can also stage your changes.
    The three arrows in the top right of the Git Changes window trigger a fetch, pull,
    and push, respectively. Meanwhile, the dropdown at the top of the window takes
    care of operations on branches:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以提交并推送或提交并同步，但您也可以暂存您的更改。Git更改窗口右上角的三个箭头分别触发获取、拉取和推送。同时，窗口顶部的下拉菜单负责处理分支的操作：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B19820_03_11.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，团队  自动生成的描述](img/B19820_03_11.png)'
- en: 'Figure 3.11: Branch operations'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.11：分支操作
- en: Package feeds
  id: totrans-73
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 包订阅
- en: A great way to accelerate software development is by reusing code components
    that meet the user requirements. These components, in general, are placed into
    packages. We will discuss this further in *Chapter 5*, *Implementing Code Reusability
    in C# 12*. The **Artifacts** menu handles the software packages used or created
    by the project. There, you can define feeds for basically all types of packages,
    including NuGet, Node.js, and Python. Private feeds are required since commercial
    projects also use private packages, so you need a place to put them. Moreover,
    packages produced during builds are placed in these feeds, so other modules that
    have them as dependencies can immediately use them.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 加速软件开发的一个好方法是重用满足用户需求的代码组件。通常，这些组件被放入包中。我们将在*第5章*，*在C#中实现代码重用*中进一步讨论这个问题。**工件**菜单处理项目使用的或创建的软件包。在那里，您可以定义基本上所有类型的包的订阅，包括NuGet、Node.js和Python。由于商业项目也使用私有包，因此需要私有订阅，所以您需要一个地方来存放它们。此外，构建过程中产生的包也放在这些订阅中，以便其他有它们作为依赖项的模块可以立即使用它们。
- en: Once in the **Artifacts** area, you can create several feeds by clicking the
    **+ Create Feed** button, where each feed can handle several kinds of packages,
    as shown in *Figure 3.12*.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入**工件**区域，您可以通过点击**+ 创建订阅**按钮创建多个订阅，每个订阅可以处理多种类型的包，如图*3.12*所示。
- en: '![](img/B19820_03_12.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_12.png)'
- en: 'Figure 3.12: Feed creation'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12：订阅创建
- en: If you select the option to connect to packages from public sources, by default,
    the feed connects to `npmjs`, `nuget.org`, `pypi.org`, and `Maven`. However, you
    can go to the **Search Upstream sources** tab on the **Feed** settings page and
    remove/add package sources. The settings page can be reached by clicking the settings
    icon in the upper-right corner of the feed page.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择从公共源连接到包的选项，默认情况下，订阅会连接到`npmjs`、`nuget.org`、`pypi.org`和`Maven`。但是，您可以去**订阅**设置页面上的**搜索上游源**选项卡，删除或添加包源。设置页面可以通过点击订阅页面右上角的设置图标访问。
- en: 'A screenshot of the page of the newly created feed follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的订阅的页面截图如下：
- en: '![](img/B19820_03_13.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_13.png)'
- en: 'Figure 3.13: Feed page'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.13：订阅页面
- en: The **Connect to Feed** button for each feed shows a window that explains how
    to connect to the feed for each package type.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 每个订阅的**连接到订阅**按钮会显示一个窗口，解释如何连接到每种包类型的订阅。
- en: '![](img/B19820_03_14.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_14.png)'
- en: 'Figure 3.14: Feed connection information'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.14：订阅连接信息
- en: For NuGet packages, you should add all project feeds to your Visual Studio projects’/solutions’
    `nuget.config` file so that local machines can also use them; otherwise, your
    local build will fail.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于NuGet包，您应该将所有项目订阅添加到Visual Studio项目或解决方案的`nuget.config`文件中，以便本地机器也能使用它们；否则，您的本地构建将失败。
- en: Test Plans
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试计划
- en: The **Test Plans** section allows you to define the test plans you want to use
    and their settings. Tests are discussed in detail in *Chapter 9*, *Testing Your
    Enterprise Application*, but here, we would like to summarize the opportunities
    offered by Azure DevOps. Test-related operations and settings can be accessed
    through the **Test Plans** menu item.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试计划**部分允许您定义您想要使用的测试计划和它们的设置。测试将在*第9章*，*测试您的企业应用程序*中详细讨论，但在这里，我们想总结Azure
    DevOps提供的测试机会。测试相关的操作和设置可以通过**测试计划**菜单项访问。'
- en: '![](img/B19820_03_15.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_15.png)'
- en: 'Figure 3.15: Test Plans menu'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.15：测试计划菜单
- en: 'Here, you may define, execute, and track test plans made up of the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以定义、执行和跟踪以下组成的测试计划：
- en: Manual acceptance tests
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 手动验收测试
- en: Automatic unit tests
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动单元测试
- en: Load tests
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 负载测试
- en: 'Automatic unit tests must be defined in test projects contained in the Visual
    Studio solution and based on a framework such as NUnit, xUnit, and MSTest (the
    .NET SDK has project templates for all of them, so you may find them in Visual
    Studio). Test Plans gives you the opportunity to execute these tests on Azure
    and to define the following:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 必须在Visual Studio解决方案中包含的测试项目中定义自动单元测试，并基于NUnit、xUnit和MSTest等框架（.NET SDK为所有这些框架都提供了项目模板，因此您可以在Visual
    Studio中找到它们）。测试计划让您有机会在Azure上执行这些测试，并定义以下内容：
- en: Several configuration settings
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 几个配置设置
- en: When to execute them
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时执行它们
- en: How to track them and where to report their results in the overall project documentation
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何跟踪它们以及在哪里将结果报告到整体项目文档中
- en: For manual tests, you may define complete instructions for the operator in the
    project documentation, covering the environment in which to execute them (for
    example, an operating system) and where to report their results. You can also
    define how to execute load tests and how to measure the results.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对于手动测试，你可以在项目文档中为操作员定义完整的指令，包括执行它们的环境（例如，操作系统）以及报告结果的位置。你还可以定义如何执行负载测试以及如何测量结果。
- en: Pipelines
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管道
- en: 'Pipelines are automatic action plans that specify all steps from the code build
    until the software deployment is in production. They can be defined in the **Pipelines**
    area, which is accessible through the **Pipelines** menu item:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 管道是自动行动计划，它指定从代码构建到软件部署到生产中的所有步骤。它们可以在**管道**区域定义，该区域可通过**管道**菜单项访问：
- en: '![](img/B19820_03_16.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图3.16](img/B19820_03_16.png)'
- en: 'Figure 3.16: Pipelines menu'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.16：管道菜单
- en: There, you can define a complete pipeline of tasks to be executed alongside
    their triggering events, which encompass steps such as code building, launching
    test plans, and what to do after the tests have passed.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，你可以定义一个完整的任务管道，包括它们的触发事件，这些事件包括代码构建、启动测试计划以及在测试通过后要做什么。
- en: 'Typically, after the tests have passed, the application is automatically deployed
    in a staging area where it can be beta-tested. You can also define the criteria
    for automatic deployment to production. Such criteria include, but are not limited
    to, the following:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在测试通过后，应用程序会自动部署到预发布区域，在那里可以进行beta测试。您还可以定义自动部署到生产的标准。这些标准包括但不限于以下内容：
- en: The number of days during which the application was beta-tested
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序beta测试期间的天数
- en: The number of bugs found during beta-testing and/or removed by the last code
    change
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在beta测试期间发现的错误数量以及/或通过最后一段代码更改删除的错误
- en: Manual approval by one or more managers/team members
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一位或多位经理/团队成员的手动批准
- en: The criteria decision will depend on the way the company wants to manage the
    product that is being developed. You, as a software architect, must understand
    that when it comes to moving code to production, the safer, the better.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 标准决策将取决于公司想要如何管理正在开发的产品。作为软件架构师，您必须理解，当涉及到将代码移至生产时，越安全越好。
- en: Usage
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用方法
- en: As you can see from the preceding screenshots, the process for creating an Azure
    DevOps account is extremely simple. It is worth mentioning that you can start
    using this fantastic tool at no cost if you have no more than five developers
    on your team, plus any number of stakeholders. However, it is worth mentioning
    that there is no limit on the number of users with a stakeholder role.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从前面的屏幕截图中所见，创建Azure DevOps账户的过程极其简单。值得一提的是，如果您团队中不超过五名开发者，以及任何数量的利益相关者，您就可以免费开始使用这个出色的工具。然而，值得一提的是，对于利益相关者角色的用户数量没有限制。
- en: Introducing GitHub projects
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍GitHub项目
- en: 'Considering all the benefits of Azure DevOps presented, you may now be asking
    why we need to explore another tool. The reason is simple: GitHub has become,
    over the years, the main tool for the open-source world. So, we will find many
    initiatives and projects there that have changed the way we deliver software.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到所展示的Azure DevOps的所有好处，你现在可能想知道为什么我们需要探索另一个工具。原因很简单：GitHub在多年间已经成为开源世界的主要工具。因此，我们将在那里找到许多改变我们交付软件方式的倡议和项目。
- en: The main objective of GitHub is to manage code and guarantee that its users
    can create solutions in a collaborative way. For this, the platform presents features
    like version control, pull requests, code reviews, issue tracking, and CI/CD.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub的主要目标是管理代码并确保其用户能够以协作的方式创建解决方案。为此，该平台提供了版本控制、拉取请求、代码审查、问题跟踪和CI/CD等功能。
- en: However, it would be impossible to design great projects without a platform
    to support them. That is why we have GitHub projects as an initiative that delivers
    an adaptable, flexible tool for planning and tracking work on GitHub.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果没有一个支持它们的平台，设计出伟大的项目是不可能的。这就是为什么我们推出了GitHub项目，这是一个提供灵活、可适应的工具，用于在GitHub上规划和工作跟踪的倡议。
- en: You can find more information about GitHub projects at [https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects](https://docs.github.com/en/issues/planning-and-tracking-with-projects/learning-about-projects/about-projects)了解更多关于GitHub项目的信息。
- en: It is quite simple to set up a project on GitHub. Once you log in to the platform,
    you may find projects from your user menu.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub上设置项目相当简单。一旦您登录到平台，您可能会在用户菜单中找到项目。
- en: '![](img/B19820_03_17.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_17.png)'
- en: 'Figure 3.17: Accessing GitHub projects'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.17：访问GitHub项目
- en: There, you will find the option to create a **New project**. When you decide
    to create it, you will find different templates already provided by GitHub.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在那里，您将找到创建**新项目**的选项。当您决定创建它时，您会发现GitHub已经提供了不同的模板。
- en: '![](img/B19820_03_18.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_18.png)'
- en: 'Figure 3.18: Creating a project on GitHub'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.18：在GitHub上创建项目
- en: The project needs to be linked to a repository. You can do this by accessing
    the **Projects** tab in your repo. There, you can also create a new project.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 项目需要链接到一个仓库。您可以通过访问您仓库中的**项目**选项卡来完成此操作。在那里，您还可以创建一个新的项目。
- en: '![](img/B19820_03_19.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_19.png)'
- en: 'Figure 3.19: Connecting a GitHub repository to a project'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.19：将GitHub仓库连接到项目
- en: It is worth mentioning that GitHub is more flexible than Azure DevOps, so you
    will find tools like the ones presented on Azure DevOps, but with different names/definitions.
    For instance, any task that you will need to define will be called an **issue**.
    Each issue can be placed in a **milestone**, which is a good way to define a feature
    or user story since it will describe an achievement with a date to be finished.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，GitHub比Azure DevOps更灵活，因此您会发现像Azure DevOps上展示的工具，但名称/定义不同。例如，您需要定义的任何任务都将被称为**问题**。每个问题都可以放置在一个**里程碑**中，这是一个定义功能或用户故事的好方法，因为它将描述一个有截止日期的成就。
- en: '![](img/B19820_03_20.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_20.png)'
- en: 'Figure 3.20: Setting milestones in a GitHub repository'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.20：在GitHub仓库中设置里程碑
- en: Check out more about using issues at [https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)
    and milestones at [https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues](https://docs.github.com/en/issues/tracking-your-work-with-issues/about-issues)了解更多关于使用问题的信息，以及在[https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones](https://docs.github.com/en/issues/using-labels-and-milestones-to-track-work/about-milestones)了解更多关于里程碑的信息。
- en: The idea of projects on GitHub is to define useful information for each item
    that will be used, which is documented in an issue. By default, only *Title*,
    *Assignees*, and *Status* are required. But you can add labels, linked pull requests,
    reviewers, repositories, and milestones to them. You can also define custom fields,
    like **Iteration**. For this, you will need to access **Project settings**.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub项目中的想法是为每个将要使用的信息定义有用的信息，这些信息在问题中进行记录。默认情况下，只需要**标题**、**分配者**和**状态**。但您可以向它们添加标签、关联的拉取请求、审阅者、仓库和里程碑。您还可以定义自定义字段，如**迭代**。为此，您需要访问**项目设置**。
- en: '![](img/B19820_03_21.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_21.png)'
- en: 'Figure 3.21: Creating custom fields for a GitHub project'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.21：为GitHub项目创建自定义字段
- en: In a GitHub project, you can also set different **Views**, such as **Table**,
    **Board**, or **Roadmap**. The Table view, in particular, offers a quick and efficient
    method for entering this project-related information, including the custom fields
    you’ve created, into the project. Once you’ve completed the design phase, you’re
    ready to create issues for each item planned in your project.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub项目中，您还可以设置不同的**视图**，例如**表格**、**看板**或**路线图**。特别是表格视图，它提供了一种快速高效的方法，将包括您创建的自定义字段在内的项目相关信息输入到项目中。一旦您完成了设计阶段，您就可以为项目计划中的每个项目创建问题。
- en: '![](img/B19820_03_22.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B19820_03_22.png)'
- en: 'Figure 3.22: GitHub project Table view'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.22：GitHub项目表格视图
- en: The **Board** view, together with a filter related to iteration, is a perfect
    way to conduct daily meetings because you will see exactly what is happening to
    the project.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**看板**视图，结合与迭代相关的过滤器，是进行每日会议的完美方式，因为您将确切地看到项目正在发生什么。'
- en: '![](img/B19820_03_23.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19820_03_23.png)'
- en: 'Figure 3.23: GitHub Board view'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.23：GitHub 看板视图
- en: To finish, the **Roadmap** view will give you a perspective of the entire project
    over time.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**路线图**视图将为您提供整个项目随时间发展的视角。
- en: '![](img/B19820_03_24.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B19820_03_24.png)'
- en: 'Figure 3.24: GitHub Roadmap view'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.24：GitHub 路线图视图
- en: As you can see, with GitHub projects, you will get almost the same results that
    we got when using Azure DevOps.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，使用 GitHub 项目，您将获得与我们使用 Azure DevOps 时几乎相同的结果。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered how you can create an Azure DevOps or GitHub account for
    a software development project and how to start managing your projects with Azure
    DevOps or GitHub projects.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了如何为软件开发项目创建 Azure DevOps 或 GitHub 账户，以及如何使用 Azure DevOps 或 GitHub 项目开始管理您的项目。
- en: It also gave a short review of all of Azure DevOps’ functionalities, explaining
    how to access them through the Azure DevOps main menu.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 它还简要回顾了 Azure DevOps 的所有功能，解释了如何通过 Azure DevOps 主菜单访问它们。
- en: To finish, it presented the GitHub project view options to plan and manage a
    project.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，它展示了 GitHub 项目视图选项，用于规划和管理工作。
- en: The chapter also described in more detail how to manage system requirements
    and how to organize the work necessary with various kinds of work items or issues,
    along with how to plan and organize sprints that will deliver epic solutions with
    many features.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还更详细地描述了如何管理系统需求，以及如何组织与各种类型的工作项或问题相关的必要工作，以及如何规划和组织冲刺，以交付具有许多功能的史诗级解决方案。
- en: The decision of whether to use Azure DevOps or GitHub in a project will vary
    according to the expertise of the team and the objective of the project itself.
    If you are designing an open-source solution, GitHub will definitely be a better
    option. On the other hand, if you are designing an enterprise solution and need
    everything to be connected, Azure DevOps is a fantastic tool to do so.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中是否使用 Azure DevOps 或 GitHub 的决定将根据团队的专业知识和项目本身的目标而有所不同。如果您正在设计开源解决方案，GitHub
    将绝对是一个更好的选择。另一方面，如果您正在设计企业解决方案并且需要一切连接在一起，Azure DevOps 是一个实现这一目标的绝佳工具。
- en: The next chapter discusses important approaches while writing code.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将讨论编写代码时的重要方法。
- en: Questions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Is Azure DevOps only available for .NET projects?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure DevOps 是否仅适用于 .NET 项目？
- en: What kinds of test plans are available in Azure DevOps?
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Azure DevOps 中有哪些可用的测试计划？
- en: Can DevOps projects use private NuGet packages?
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DevOps 项目可以使用私有 NuGet 包吗？
- en: Why do we use work items?
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们为什么使用工作项？
- en: What is the difference between Epic and Feature work items?
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Epic 工作项与功能工作项之间的区别是什么？
- en: What kind of relationship exists between Task and Product Backlog items/User
    Story work items?
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 任务与产品待办事项/用户故事工作项之间存在什么样的关系？
- en: How can GitHub projects be useful?
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub 项目如何有用？
- en: 'Which is the better option: Azure DevOps or GitHub?'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪个选项更好：Azure DevOps 还是 GitHub？
- en: Learn more on Discord
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Discord 上了解更多信息
- en: 'To join the Discord community for this book – where you can share feedback,
    ask questions to the authors, and learn about new releases – follow the QR code
    below:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入本书的 Discord 社区——在那里您可以分享反馈、向作者提问以及了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/SoftwareArchitectureCSharp12Dotnet8](https://packt.link/SoftwareArchitectureCSharp12Dotnet8)'
- en: '![](img/QR_Code175081751210902046.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code175081751210902046.png)'
