["```cs\n    public Object CreateOnDrop;\n    ```", "```cs\n//Called when an object is dropped on DropSurface\npublic void OnDrop(GameObject dropped)\n{\n  //Get the DragItem from the dropped object\n  DragItem dragItem = dropped.GetComponent<DragItem>();\n  //If it has none, don't go further\n  if(dragItem == null) return;\n  //Instantiate the defined CreateOnDrop Object\n  GameObject newPower = NGUITools.AddChild(this.gameObject, dragItem.CreateOnDrop as GameObject);\n  //Destroy the dropped Object\n  Destroy(dropped);\n}\n```", "```cs\n//Method called when the Item is Pressed or Released\nvoid OnPress(bool pressed)\n{\n  //Invert the collider's state\n  collider.enabled = !pressed;\n}\n```", "```cs\n//If the Item is released\nif(!pressed)\n{\n  //Get the last hit collider\n  Collider col = UICamera.lastHit.collider;\n  //If there is no collider, or no DropSurface behind the Power\n  if(col == null || col.GetComponent<DropSurface>() == null)\n  {\n    //Get the grid in parent objects\n    UIGrid grid = NGUITools.FindInParents<UIGrid>(gameObject);\n    //If a grid is found, order it to Reposition now\n    if(grid != null) grid.Reposition();\n  }\n}\n```", "```cs\n//Declare an enum to define type of Power\npublic enum Type \n{\n  None,\n  Time,\n  Bomb\n}\n//Declare a Type variable to choose it in Inspector\npublic Type type;\n//Object variable to define the DragItem to recreate\npublic Object createOnDestroy;\n```", "```cs\n    //This static variable will contain the selected power\n    public static Power.Type SelectedPower = Power.Type.None;\n    ```", "```cs\n    //This static method changes the SelectedPower value\n    public static void SetPower(Power.Type newPower)\n    {\n      SelectedPower = newPower;\n    }\n    ```", "```cs\n    public GameObject dragItemsContainer;\n    ```", "```cs\nRecreateDragItem();\n```", "```cs\nvoid RecreateDragItem()\n{\n  //If there's already a Power selected\n  if(GameManager.SelectedPower != Power.Type.None)\n  {\n    //Get the selected power's Power.cs script\n    Power selectedPowerScript = transform.GetChild(0).GetComponent<Power>();\n    //Add the Drag Item to the grid\n    NGUITools.AddChild(dragItemsContainer, selectedPowerScript.createOnDestroy as GameObject);\n    //Destroy the currently selected Power\n    Destroy(selectedPowerScript.gameObject);\n  }\n}\n```", "```cs\n//Set the new selected power in the GameManager\nGameManager.SetPower(newPower.GetComponent<Power>().type);\n```", "```cs\nvoid OnClick()\n{\n  //Recreate the DragItem now\n  RecreateDragItem();\n  //Reset SelectedPower to None\n  GameManager.SetPower(Power.Type.None);\n  //Force reposition of the grid\n  dragItemsContainer.GetComponent<UIGrid>().Reposition();\n}\n```", "```cs\n    public void UpdateNow()\n    {\n      //Force a drag of {0, 0, 0} to update Panel\n      GetComponent<UIDraggablePanel>().MoveRelative(Vector3.zero);\n    }\n    ```", "```cs\n        Welcome!\n        [HIT RETURN KEY]\n        [HIT RETURN KEY]\n        You can Select one of two [AAFFFF]Powers[FFFFFF]:\n        [AAFFAA]Bomb[FFFFFF]: Explodes all enemies at once\n        [AAFFAA]Time[FFFFFF]: Reduces Time speed for 10 seconds\n        ```", "```cs\n        English\n        French\n        ```", "```cs\n    MainMenu = [AAFFFF]Main Menu\n    ```", "```cs\n    MainMenu = [AAFFFF]Menu Principal\n    ```"]