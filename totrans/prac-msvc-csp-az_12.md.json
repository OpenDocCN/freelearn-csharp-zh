["```cs\npublic static class GameExtensions\n{\n  public static byte[] ToBytes(this Game game) =>\n    JsonSerializer.SerializeToUtf8Bytes(game);\n  public static Game? ToGame(this byte[] bytes) =>\n    JsonSerializer.Deserialize<Game>(bytes);\n}\n```", "```cs\npublic class GamesService(\n  IGamesRepository dataRepository,\n  IDistributedCache distributedCache,\n  ILogger<GamesService> logger,\n  GamesMetrics metrics,\n  [FromKeyedServices(\"Codebreaker.GameAPIs\")]\n  ActivitySource activitySource) : IGamesService\n{\n```", "```cs\nprivate async Task UpdateGameInCacheAsync(Game game, CancellationToken cancellationToken = default)\n{\nawait distributedCache.SetAsync(game.Id.ToString(), game.ToBytes(), \n  cancellationToken);\n}\n```", "```cs\ngame = GamesFactory.CreateGame(gameType, playerName);\nactivity?.AddTag(GameTypeTagName, game.GameType)\n  .AddTag(GameIdTagName, game.Id.ToString())\n  .Start();\nawait Task.WhenAll(\n  dataRepository.AddGameAsync(game, cancellationToken),\nUpdateGameInCacheAsync(game, cancellationToken));\nmetrics.GameStarted(game);\n```", "```cs\n// code removed for brevity\nprivate async Task<Game?> GetGameFromCacheOrDataStoreAsync(\n  Guid id, CancellationToken cancellationToken = default)\n{\nbyte[]? bytesGame = await distributedCache.GetAsync(id.ToString(), \n  cancellationToken);\n  if (bytesGame is null)\n  {\n    return await dataRepository.GetGameAsync(id, cancellationToken);\n  }\n  else\n  {\n    return bytesGame.ToGame();\n  }\n}\n```", "```cs\npublic static void AddApplicationServices(this IHostApplicationBuilder builder)\n{\n  // code removed for brevity\n  builder.Services.AddScoped<IGamesService, GamesService>();\n  builder.AddRedisDistributedCache(\"redis\");\n}\n```", "```cs\nvar redis = builder.AddRedis(\"redis\")\n  .WithRedisCommander()\n  .PublishAsContainer();\nvar cosmos = builder.AddAzureCosmosDB(\"cosmos\")\n    .AddDatabase(\"codebreaker\");\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithReference(cosmos)\n  .WithReference(redis)\n  .WithReference(appInsights)\n  .WithEnvironment(\"DataStore\", dataStore);\n```", "```cs\nazd infra synth\n```", "```cs\n  template:\n    containers:\n# code removed for brevity\n    scale:\nminReplicas: 0\n      maxReplicas: 1\n```", "```cs\nContainerAppConsoleLogs_CL\n| where  Log_s contains \"Request rate is large\"\n```", "```cs\ntemplate:\n  containers:\n    - image: {{ .Image }}\n      name: gameapis\n      resources:\n        cpu: 1.0\n        memory: 2Gi\n# configuration removed for brevity\n```", "```cs\nvar gameAPIs = builder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\")\n  .WithReference(cosmos)\n  .WithReference(redis)\n  .WithReference(appInsights)\n  .WithEnvironment(\"DataStore\", dataStore)\n  .WithEnvironment(\"StartupMode\", startupMode)\n  .WithReplicas(2);\n```", "```cs\n\"template\": {\n      ...\n      \"scale\": {\n        \"minReplicas\": 1,\n        \"maxReplicas\": 8,\n        \"rules\": [{\n          \"name\": \"http-rule\",\n          \"http\": {\n            \"metadata\": {\n              \"concurrentRequests\": \"30\"\n            }\n          }\n        }]\n      }\n    }\n```", "```cs\nContainerAppSystemLogs_CL\n| where ReplicaName_s == \"gameapis--tc47v0x-7cb88d64b8-np8cg\"\n| order  by  time_t asc\n```", "```cs\npublic static IHostApplicationBuilder AddDefaultHealthChecks(this IHostApplicationBuilder builder)\n{\n  builder.Services.AddHealthChecks()\n    .AddCheck(\n      \"self\",\n      () => HealthCheckResult.Healthy(),\n      tags: [\"live\"]);\n  return builder;\n}\n```", "```cs\nbuilder.Services.AddHealthChecks().AddCheck(\"dbupdate\", () =>\n{\n  return ApplicationServices.IsDatabaseUpdateComplete ?\n    HealthCheckResult.Healthy(\"DB update done\") :\n    HealthCheckResult.Degraded(\"DB update not ready\");\n});\n```", "```cs\n            builder.Services.AddDbContextPool<IGamesRepository, GamesSqlServerContext>(options =>\n{\n  var connectionString = builder.Configuration.GetConnectionString(\"CodebreakerSql\") ??\n    throw new InvalidOperationException(\"Could not read SQL Server connection string\");\n  options.UseSqlServer(connectionString);\n  options.UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n});\nbuilder.EnrichSqlServerDbContext<GamesSqlServerContext>(\n  static settings =>\n  {\n    settings.DisableTracing = false;\n    settings.DisableRetry = false;\n    settings.DisableHealthChecks = false;\n  });\n```", "```cs\n{\n  // code removed for brevity\n  \"Aspire\": {\n    \"Microsoft\": {\n      \"EntityFrameworkCore\": {\n        \"SqlServer\": {\n         \"DbContextPooling\": true,\n         \"DisableTracing\": false,\n         \"DisableHealthCheck\": false,\n         \"DisableMetrics\": false\n       }\n     }\n   },\n   \"StackExchange\": {\n     \"Redis\": {\n       \"DisableTracing\": false,\n       \"DisableHealthCheck\": false\n     }\n   }\n }\n```", "```cs\npublic static WebApplication MapDefaultEndpoints(this WebApplication app)\n{\n  // code removed for brevity\n  app.MapHealthChecks(\"/alive\", new HealthCheckOptions\n  {\n    Predicate = r => r.Tags.Contains(\"live\")\n  });\n  app.MapHealthChecks(\"/health\");\n  return app;\n}\n```", "```cs\nazd infra synth\n```", "```cs\n  template:\n    containers:\n      - image: {{ .Image }}\n        name: gameapis\n        probes:\n          - type: liveness\n            httpGet:\n              path: /alive\n              port: 8080\n            initialDelaySeconds: 3\n            periodSeconds: 3\n          - type: readiness\n            httpGet:\n              path: /health\n              port: 8080\n            initialDelaySeconds: 10\n            periodSeconds: 5\n          - type: startup\n            tcpSocket:\n              port: 8080\n            initialDelaySeconds: 1\n            periodSeconds: 1\n            timeoutSeconds: 3\n            failureThreshold: 30\n        env:\n        - name: AZURE_CLIENT_ID\n# configuration removed for brevity\n```", "```cs\nazd deploy\n```"]