["```cs\n{\n  product (productId: 23) {\n    productId\n    productName\n    unitPrice\n    supplier {\n      companyName\n      country\n    }\n  }\n} \n```", "```cs\n# The query keyword is optional. Comments are prefixed with #.\nquery {\n  customer {\n    customerId\n    companyName\n    country\n  }\n} \n```", "```cs\n{\n  \"data\": [\n    {\n      \"customerId\": \"ALFKI\",\n      \"companyName\": \"Alfreds Futterkiste\",\n      \"country\": \"Germany\"\n    },\n  ...\n  ]\n} \n```", "```cs\nquery GetOrdersByDateAndCountry {\n  order(orderDate: \"23/04/1998\") {\n    orderId\n    orderDate\n    customer(country: \"UK\") {\n      companyName\n      country\n    }\n  }\n} \n```", "```cs\nquery GetOrdersByDateAndCountry($country: String, $orderDate: String) {\n  order(orderDate: $orderDate) {\n    orderId\n    orderDate\n    customer(country: $country) {\n      companyName\n      country\n    }\n  }\n} \n```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"HotChocolate.AspNetCore\" Version=\"13.5.1\" />\n    </ItemGroup> \n    ```", "```cs\n    <PropertyGroup>\n      <TargetFramework>net8.0</TargetFramework>\n      <Nullable>enable</Nullable>\n      <ImplicitUsings>enable</ImplicitUsings>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n     **<NoWarn>AD0001</NoWarn>**\n    </PropertyGroup> \n    ```", "```cs\n    **\"https\"****:****{**\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n    **\"launchUrl\"****:****\"****graphql\"****,**\n    **\"applicationUrl\"****:****\"https://localhost:5121;http://localhost:5122\"****,**\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      } \n    ```", "```cs\n    namespace Northwind.GraphQL.Service;\n    public class Query\n    {\n      public string GetGreeting() => \"Hello, World!\";\n    } \n    ```", "```cs\n    using Northwind.GraphQL.Service; // To use Query. \n    ```", "```cs\n    builder.Services\n      .AddGraphQLServer()\n      .AddQueryType<Query>(); \n    ```", "```cs\n    app.MapGet(\"/\", () => \"Navigate to: https://localhost:5121/graphql\"); \n    ```", "```cs\n    app.MapGraphQL(); \n    ```", "```cs\n    type Query {\n      greeting: String!\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"greeting\": \"Hello, World!\"\n      }\n    } \n    ```", "```cs\nquery QueryNameGoesHere {\n  greeting\n} \n```", "```cs\n    namespace Northwind.GraphQL.Service;\n    public class Query\n    {\n      public string GetGreeting() => \"Hello, World!\";\n    **public****string****Farewell****()** **=>** **\"Ciao! Ciao!\"****;**\n    **public****int****RollTheDie****()** **=> Random.Shared.Next(****1****,** **7****);**\n    } \n    ```", "```cs\n    type Query {\n      greeting: String!\n      farewell: String!\n      rollTheDie: Int!\n    } \n    ```", "```cs\n    query GetNumber {\n      rollTheDie\n    } \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference Include=\"HotChocolate.AspNetCore\" Version=\"13.5.1\" />\n     **<PackageReference Include=****\"HotChocolate.Data.EntityFramework\"**\n     **Version=****\"13.5.1\"** **/>**\n    </ItemGroup>\n    **<ItemGroup>**\n     **<ProjectReference Include=****\"..\\..\\Chapter03\\Northwind.Common.DataContext**\n    **.SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\"** **/>**\n    **</ItemGroup>** \n    ```", "```cs\n    using Northwind.EntityModels; // To use AddNorthwindContext method. \n    ```", "```cs\n    **builder.Services.AddNorthwindContext();**\n    builder.Services\n      .AddGraphQLServer()\n     **.RegisterDbContext<NorthwindContext>()**\n      .AddQueryType<Query>(); \n    ```", "```cs\n    **using** **Microsoft.EntityFrameworkCore;** **// To use Include method.**\n    **using** **Northwind.EntityModels;** **// To use NorthwindContext.**\n    namespace Northwind.GraphQL.Service;\n    public class Query\n    {\n      public string GetGreeting() => \"Hello, World!\";\n      public string Farewell() => \"Ciao! Ciao!\";\n      public int RollTheDie() => Random.Shared.Next(1, 7);\n    **public** **IQueryable<Category>** **GetCategories****(****NorthwindContext db****)** **=>** \n     **db.Categories.Include(c => c.Products);**\n    **public** **Category? GetCategory(NorthwindContext db,** **int** **categoryId)**\n     **{**\n     **Category? category = db.Categories.Find(categoryId);**\n    **if** **(category ==** **null****)** **return****null****;**\n     **db.Entry(category).Collection(c => c.Products).Load();**\n    **return** **category;**\n     **}**\n    **public** **IQueryable<Product>** **GetProducts****(****NorthwindContext db****)** **=>** \n     **db.Products.Include(p => p.Category);**\n    **public** **IQueryable<Product>** **GetProductsInCategory****(**\n     **NorthwindContext db,** **int** **categoryId****)** **=>**\n     **db.Products.Where(p => p.CategoryId == categoryId);**\n    **public** **IQueryable<Product>** **GetProductsByUnitPrice****(**\n     **NorthwindContext db,** **decimal** **minimumUnitPrice****)** **=>**\n     **db.Products.Where(p => p.UnitPrice >= minimumUnitPrice);**\n    } \n    ```", "```cs\n    type Query {\n      greeting: String!\n      farewell: String!\n      rollTheDie: Int!\n      categories: [Category!]!\n      category(categoryId: Int!): Category\n      products: [Product!]!\n      productsInCategory(categoryId: Int!): [Product!]!\n      productsByUnitPrice(minimumUnitPrice: Decimal!): [Product!]!\n    }\n    type Category {\n      categoryId: Int!\n      categoryName: String!\n      description: String\n      picture: [Byte!]\n      products: [Product!]!\n    }\n    type Product {\n      productId: Int!\n      productName: String!\n      supplierId: Int\n      categoryId: Int\n      quantityPerUnit: String\n      unitPrice: Decimal\n      unitsInStock: Short\n      unitsOnOrder: Short\n      reorderLevel: Short\n      discontinued: Boolean!\n      category: Category\n      orderDetails: [OrderDetail!]!\n      supplier: Supplier\n    } \n    ```", "```cs\n    query AllCategories {\n      categories {\n        categoryId\n        categoryName\n        description\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"categories\": [\n          {\n            \"categoryId\": 1,\n            \"categoryName\": \"Beverages\",\n            \"description\": \"Soft drinks, coffees, teas, beers, and ales\"\n          },\n          {\n            \"categoryId\": 2,\n            \"categoryName\": \"Condiments\",\n            \"description\": \"Sweet and savory sauces, relishes, spreads, and seasonings\"\n          },\n          ... \n    ```", "```cs\n    query Condiments {\n      category (categoryId: 2) {\n        categoryId\n        categoryName\n        products {\n          productId\n          productName\n          unitPrice\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"category\": {\n          \"categoryId\": 2,\n          \"categoryName\": \"Condiments\",\n          \"products\": [\n            {\n              \"productId\": 3,\n              \"productName\": \"Aniseed Syrup\",\n              \"unitPrice\": 10\n            },\n            {\n              \"productId\": 4,\n              \"productName\": \"Chef Anton's Cajun Seasoning\",\n              \"unitPrice\": 22\n            },\n            ... \n    ```", "```cs\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]\n          Executed DbCommand (68ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']\n          SELECT TOP(1) [c].[CategoryId], [c].[CategoryName], [c].[Description], [c].[Picture]\n          FROM [Categories] AS [c]\n          WHERE [c].[CategoryId] = @__p_0\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]\n          Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='Text', CommandTimeout='30']\n          SELECT [p].[ProductId], [p].[CategoryId], [p].[Discontinued], [p].[ProductName], [p].[QuantityPerUnit], [p].[ReorderLevel], [p].[SupplierId], [p].[UnitPrice], [p].[UnitsInStock], [p].[UnitsOnOrder]\n          FROM [Products] AS [p]\n          WHERE [p].[CategoryId] = @__p_0 \n    ```", "```cs\n    query BeverageProducts {\n      productsInCategory (categoryId: 1) {\n        productId\n        productName\n        unitsInStock\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"productsInCategory\": [\n          {\n            \"productId\": 1,\n            \"productName\": \"Chai\",\n            \"unitsInStock\": 39\n          },\n          {\n            \"productId\": 2,\n            \"productName\": \"Chang\",\n            \"unitsInStock\": 17\n          },\n          ... \n    ```", "```cs\n    query ProductsWithCategoryNames {\n      products {\n        productId\n        productName\n        category {\n          categoryName\n        }\n        unitsInStock\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"products\": [\n          {\n            \"productId\": 1,\n            \"productName\": \"Chai\",\n            \"category\": {\n              \"categoryName\": \"Beverages\"\n            },\n            \"unitsInStock\": 39\n          },\n          {\n            \"productId\": 2,\n            \"productName\": \"Chang\",\n            \"category\": {\n              \"categoryName\": \"Beverages\"\n            },\n            \"unitsInStock\": 17\n          },\n          ... \n    ```", "```cs\n    query CategoryAndItsProducts($id: Int!){\n      category(categoryId: $id) {\n        categoryId\n        categoryName\n        products {\n          productId\n          productName\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"id\": 1\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"category\": {\n          \"categoryId\": 1,\n          \"categoryName\": \"Beverages\",\n          \"products\": [\n            {\n              \"productId\": 1,\n              \"productName\": \"Chai\"\n            },\n            {\n              \"productId\": 2,\n              \"productName\": \"Chang\"\n            },\n            ... \n    ```", "```cs\n    query ProductsWithMinimumPrice($unitPrice: Decimal!){\n      productsByUnitPrice(minimumUnitPrice: $unitPrice) {\n          productId\n          productName\n          unitPrice\n      }\n    } \n    ```", "```cs\n    {\n      \"unitPrice\": 100\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"productsByUnitPrice\": [\n          {\n            \"productId\": 29,\n            \"productName\": \"Thüringer Rostbratwurst\",\n            \"unitPrice\": 123.79\n          },\n          {\n            \"productId\": 38,\n            \"productName\": \"Côte de Blaye\",\n            \"unitPrice\": 263.5\n          }\n        ]\n      }\n    } \n    ```", "```cs\n    [UsePaging]\n    public IQueryable<Product> GetProductsWithPaging(NorthwindContext db) =>\n      db.Products.Include(p => p.Category); \n    ```", "```cs\n    products: [Product!]!\n    productsInCategory(categoryId: Int!): [Product!]!\n    productsByUnitPrice(minimumUnitPrice: Decimal!): [Product!]!\n    productsWithPaging(\n      \"\"\"\n      Returns the first _n_ elements from the list.\n      \"\"\"\n      first: Int\n      \"\"\"\n      Returns the elements in the list that come after the specified cursor.\n      \"\"\"\n      after: String\n      \"\"\"\n      Returns the last _n_ elements from the list.\n      \"\"\"\n      last: Int\n      \"\"\"\n      Returns the elements in the list that come before the specified cursor.\n      \"\"\"\n      before: String\n    ): ProductsWithPagingConnection \n    ```", "```cs\n    query FirstTenProducts {\n      productsWithPaging(first: 10) {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        nodes {\n          productId\n          productName\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"productsWithPaging\": {\n          \"pageInfo\": {\n            \"hasPreviousPage\": false,\n            \"hasNextPage\": true,\n            \"startCursor\": \"MA==\",\n            \"endCursor\": \"OQ==\"\n          },\n          \"nodes\": [\n            {\n              \"productId\": 1,\n              \"productName\": \"Chai\"\n            },\n    ...\n    {\n              \"productId\": 10,\n              \"productName\": \"Ikura\"\n            }\n          ]\n        }\n      }\n    } \n    ```", "```cs\n    query SecondTenProducts {\n      productsWithPaging(after: \"OQ==\") {\n        pageInfo {\n          hasPreviousPage\n          hasNextPage\n          startCursor\n          endCursor\n        }\n        nodes {\n          productId\n          productName\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"productsWithPaging\": {\n          \"pageInfo\": {\n            \"hasPreviousPage\": true,\n            \"hasNextPage\": true,\n            \"startCursor\": \"MTA=\",\n            \"endCursor\": \"MTk=\"\n          },\n          \"nodes\": [\n            {\n              \"productId\": 11,\n              \"productName\": \"Queso Cabrales\"\n            },\n    ...\n    {\n              \"productId\": 20,\n              \"productName\": \"Sir Rodney's Marmalade\"\n            }\n          ]\n        }\n      }\n    } \n    ```", "```cs\n    builder.Services\n      .AddGraphQLServer()\n     **.AddFiltering()**\n      .RegisterDbContext<NorthwindContext>()\n      .AddQueryType<Query>(); \n    ```", "```cs\n    **[****UseFiltering****]**\n    public IQueryable<Product> GetProducts(NorthwindContext db) =>\n      db.Products.Include(p => p.Category); \n    ```", "```cs\n    products(where: ProductFilterInput): [Product!]! \n    ```", "```cs\n    input ProductFilterInput {\n      and: [ProductFilterInput!]\n      or: [ProductFilterInput!]\n      productId: IntOperationFilterInput\n      productName: StringOperationFilterInput\n      supplierId: IntOperationFilterInput\n      categoryId: IntOperationFilterInput\n      quantityPerUnit: StringOperationFilterInput\n      unitPrice: DecimalOperationFilterInput\n      unitsInStock: ShortOperationFilterInput\n      unitsOnOrder: ShortOperationFilterInput\n      reorderLevel: ShortOperationFilterInput\n      discontinued: BooleanOperationFilterInput\n      category: CategoryFilterInput\n      orderDetails: ListFilterInputTypeOfOrderDetailFilterInput\n      supplier: SupplierFilterInput\n    } \n    ```", "```cs\n    input IntOperationFilterInput {\n      eq: Int\n      neq: Int\n      in: [Int]\n      nin: [Int]\n      gt: Int\n      ngt: Int\n      gte: Int\n      ngte: Int\n      lt: Int\n      nlt: Int\n      lte: Int\n      nlte: Int\n    }\n    input StringOperationFilterInput {\n      and: [StringOperationFilterInput!]\n      or: [StringOperationFilterInput!]\n      eq: String\n      neq: String\n      contains: String\n      ncontains: String\n      in: [String]\n      nin: [String]\n      startsWith: String\n      nstartsWith: String\n      endsWith: String\n      nendsWith: String\n    } \n    ```", "```cs\n    query ProductsWithMoreThan40InStock {\n      products(where: { unitsInStock: { gt: 120 } }) {\n        productId\n        productName\n        unitsInStock\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"products\": [\n          {\n            \"productId\": 40,\n            \"productName\": \"Boston Crab Meat\",\n            \"unitsInStock\": 123\n          },\n          {\n            \"productId\": 75,\n            \"productName\": \"Rhönbräu Klosterbier\",\n            \"unitsInStock\": 125\n          }\n        ]\n      }\n    } \n    ```", "```cs\n    query ProductNamesCha {\n      products(where: { productName: { startsWith: \"Cha\" } }) {\n        productId\n        productName\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"products\": [\n          {\n            \"productId\": 1,\n            \"productName\": \"Chai\"\n          },\n          {\n            \"productId\": 2,\n            \"productName\": \"Chang\"\n          },\n          {\n            \"productId\": 39,\n            \"productName\": \"Chartreuse verte\"\n          }\n        ]\n      }\n    } \n    ```", "```cs\n    info: Microsoft.EntityFrameworkCore.Database.Command[20101]\n          Executed DbCommand (2ms) [Parameters=[@__p_0_rewritten='?' (Size = 40)], CommandType='Text', CommandTimeout='30']\n          SELECT [p].[ProductId], [p].[CategoryId], [p].[Discontinued], [p].[ProductName], [p].[QuantityPerUnit], [p].[ReorderLevel], [p].[SupplierId], [p].[UnitPrice], [p].[UnitsInStock], [p].[UnitsOnOrder], [c].[CategoryId], [c].[CategoryName], [c].[Description], [c].[Picture]\n          FROM [Products] AS [p]\n          LEFT JOIN [Categories] AS [c] ON [p].[CategoryId] = [c].[CategoryId]\n          WHERE [p].[ProductName] LIKE @__p_0_rewritten ESCAPE N'\\' \n    ```", "```cs\nbuilder.Services\n  .AddGraphQLServer()\n  .AddFiltering()\n **.AddSorting()**\n  .RegisterDbContext<NorthwindContext>()\n  .AddQueryType<Query>(); \n```", "```cs\n[UseFiltering]\n**[****UseSorting****]**\npublic IQueryable<Product> GetProducts(NorthwindContext db) =>\n  db.Products.Include(p => p.Category); \n```", "```cs\nquery ProductsSortedByMostExpensive {\n  products(order: [ { unitPrice: DESC } ]) {\n    productId\n    productName\n    unitPrice\n  }\n} \n```", "```cs\nenum SortEnumType {\n  ASC\n  DESC\n} \n```", "```cs\n{\n  \"query\": \"...\",\n  \"operationName\": \"...\",\n  \"variables\": { \"variable1\": \"value1\", ... }\n} \n```", "```cs\n{\n  \"data\": { ... },\n  \"errors\": [ ... ]\n} \n```", "```cs\n    ### Configure a variable for the GraphQL service base address.\n    @base_address = https://localhost:5121/graphql\n    ### Get all products in the specified category.\n    POST {{base_address}}\n    Content-Type: application/json\n    {\n      \"query\" : \"{productsInCategory(categoryId:8){productId productName unitsInStock}}\"\n    } \n    ```", "```cs\n    ### Get all categories.\n    POST {{base_address}}\n    Content-Type: application/json\n    {\n      \"query\" : \"{categories{categoryId categoryName description}}\"\n    } \n    ```", "```cs\n    Response time: 60 ms\n    Status code: BadRequest (400)\n    Alt-Svc: h3=\":5121\"; ma=86400\n    Transfer-Encoding: chunked\n    Date: Tue, 06 Jun 2023 16:35:18 GMT\n    Server: Kestrel\n    Content-Type: application/graphql-response+json; charset=utf-8\n    Content-Length: 338\n    ------------------------------------------------\n    Content:\n    {\n      \"errors\": [\n        {\n          \"message\": \"The field `id` does not exist on the type `Category`.\",\n          \"locations\": [\n            {\n              \"line\": 1,\n              \"column\": 13\n            }\n          ],\n          \"path\": [\n            \"categories\"\n          ],\n          \"extensions\": {\n            \"type\": \"Category\",\n            \"field\": \"id\",\n            \"responseName\": \"id\",\n            \"specifiedBy\": \"http://spec.graphql.org/October2021/#sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"\n          }\n        }\n      ]\n    } \n    ```", "```cs\n    ### Get a category and its products using a variable.\n    POST {{base_address}}\n    Content-Type: application/json\n    {\n      \"query\": \"query categoryAndItsProducts($id: Int!){category(categoryId: $id){categoryId categoryName products{productId productName}}}\",\n      \"variables\": {\"id\":1}\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\..\\Chapter03\\Northwind.Common.EntityModels\n    .SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    **\"https\"****:****{**\n      \"commandName\": \"Project\",\n      \"dotnetRunMessages\": true,\n      \"launchBrowser\": true,\n    **\"applicationUrl\"****:****\"https://localhost:5123;http://localhost:5124\"****,**\n      \"environmentVariables\": {\n        \"ASPNETCORE_ENVIRONMENT\": \"Development\"\n      } \n    ```", "```cs\n    namespace Northwind.GraphQL.Client.Mvc.Models;\n    public class ResponseErrors\n    {\n      public Error[]? Errors { get; set; }\n    }\n    public class Error\n    {\n      public string Message { get; set; } = null!;\n      public Location[] Locations { get; set; } = null!;\n      public string[] Path { get; set; } = null!;\n    }\n    public class Location\n    {\n      public int Line { get; set; }\n      public int Column { get; set; }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product.\n    namespace Northwind.GraphQL.Client.Mvc.Models;\n    public class ResponseProducts\n    {\n      public class DataProducts\n      {\n        public Product[]? ProductsInCategory { get; set; }\n      }\n      public DataProducts? Data { get; set; }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use Category.\n    namespace Northwind.GraphQL.Client.Mvc.Models;\n    public class ResponseCategories\n    {\n      public class DataCategories\n      {\n        public Category[]? Categories { get; set; }\n      }\n      public DataCategories? Data { get; set; }\n    } \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product.\n    using System.Net; // To use HttpStatusCode.\n    namespace Northwind.GraphQL.Client.Mvc.Models;\n    public class IndexViewModel\n    {\n      public HttpStatusCode Code { get; set; }\n      public string? RawResponseBody { get; set; }\n      public Product[]? Products { get; set; }\n      public Category[]? Categories { get; set; }\n      public Error[]? Errors { get; set; }\n    } \n    ```", "```cs\n    using System.Net.Http.Headers; // To use MediaTypeWithQualityHeaderValue. \n    ```", "```cs\n    builder.Services.AddHttpClient(name: \"Northwind.GraphQL.Service\",\n      configureClient: options =>\n      {\n        options.BaseAddress = new Uri(\"https://localhost:5121/\");\n        options.DefaultRequestHeaders.Accept.Add(\n          new MediaTypeWithQualityHeaderValue(\n          \"application/json\", 1.0));\n      }); \n    ```", "```cs\n    using Northwind.Mvc.GraphQLClient.Models; // To use IndexViewModel.\n    using System.Text; // To use Encoding. \n    ```", "```cs\n    **protected****readonly** **IHttpClientFactory _clientFactory;**\n    public HomeController(ILogger<HomeController> logger**,** \n     **IHttpClientFactory clientFactory**)\n    {\n      _logger = logger;\n     **_clientFactory = clientFactory;**\n    } \n    ```", "```cs\n    public async Task<IActionResult> Index(string id = \"1\")\n    {\n      IndexViewModel model = new();\n      try\n      {\n        HttpClient client = _clientFactory.CreateClient(\n          name: \"Northwind.GraphQL.Service\");\n        // First, try a simple GET request to service root.\n        HttpRequestMessage request = new(\n          method: HttpMethod.Get, requestUri: \"/\");\n        HttpResponseMessage response = await client.SendAsync(request);\n        if (!response.IsSuccessStatusCode)\n        {\n          model.Code = response.StatusCode;\n          model.Errors = new[] { new Error { Message = \n            \"Service is not successfully responding to GET requests.\" } };\n          return View(model);\n        }\n        // Next, make a request to the GraphQL endpoint.\n        request = new(\n          method: HttpMethod.Post, requestUri: \"graphql\");\n        request.Content = new StringContent(content: $$$\"\"\"\n    {\n      \"query\": \"{productsInCategory(categoryId:{{{id}}}){productId productName unitsInStock}}\"\n    }\n          \"\"\",\n          encoding: Encoding.UTF8,\n          mediaType: \"application/json\");\n        response = await client.SendAsync(request);\n        model.Code = response.StatusCode;\n        model.RawResponseBody = await response.Content.ReadAsStringAsync();\n        if (response.IsSuccessStatusCode)\n        {\n          model.Products = (await response.Content\n            .ReadFromJsonAsync<ResponseProducts>())?.Data?.ProductsInCategory;\n        }\n        else\n        {\n          model.Errors = (await response.Content\n            .ReadFromJsonAsync<ResponseErrors>())?.Errors;\n        }\n      }\n      catch (Exception ex)\n      {\n        _logger.LogWarning(\n          $\"Northwind.GraphQL.Service exception: {ex.Message}\");\n        model.Errors = new[] { new Error { Message = ex.Message } };\n      }\n      return View(model);\n    } \n    ```", "```cs\n    @using Northwind.EntityModels\n    @using Northwind.GraphQL.Client.Mvc.Models @* for VS Code only *@\n    @model IndexViewModel\n    @{\n      ViewData[\"Title\"] = \"Products from GraphQL service\";\n    }\n    <div class=\"text-center\">\n      <h1 class=\"display-4\">@ViewData[\"Title\"]</h1>\n      <div class=\"card card-body\">\n        <form>\n          Enter a category id\n          <input name=\"id\" value=\"1\" />\n          <input type=\"submit\" />\n        </form>\n      </div>\n      @if (Model.Errors is not null)\n      {\n        <div class=\"alert alert-danger\" role=\"alert\">\n          <table class=\"table table-striped\">\n            <thead>\n            <tr>\n              <td>Message</td>\n              <td>Path</td>\n              <td>Locations</td>\n            </tr>\n            </thead>\n            <tbody>\n              @foreach (Error error in Model.Errors)\n              {\n                <tr>\n                  <td>@error.Message</td>\n                  <td>\n                    @if (error.Path is not null)\n                    {\n                      @foreach (string path in error.Path)\n                      {\n                        <span class=\"badge bg-danger\">@path</span>\n                      }\n                    }\n                  </td>\n                  <td>\n                    @if (error.Locations is not null)\n                    {\n                      @foreach (Location location in error.Locations)\n                      {\n                        <span class=\"badge bg-danger\">\n                          @location.Line, @location.Column\n                        </span>\n                      }\n                    }\n                  </td>\n                </tr>\n              }\n            </tbody>\n          </table>\n        </div>\n      }\n      @if (Model.Categories is not null)\n      {\n        <div>\n          <p class=\"alert alert-success\" role=\"alert\">\n            There are @Model.Categories.Count() products.</p>\n          <p>\n            @foreach (Category category in Model.Categories)\n            {\n              <span class=\"badge bg-dark\">\n                @category.CategoryId\n                @category.CategoryName\n              </span>\n            }\n          </p>\n        </div>\n      }\n      @if (Model.Products is not null)\n      {\n        <div>\n          <p class=\"alert alert-success\" role=\"alert\">\n            There are @Model.Products.Count() products.</p>\n          <p>\n            @foreach (Product p in Model.Products)\n            {\n              <span class=\"badge bg-dark\">\n                @p.ProductId\n                @p.ProductName\n                -\n                @(p.UnitsInStock is null ? \"0\" : p.UnitsInStock.Value) in stock\n              </span>\n            }\n          </p>\n        </div>\n      }\n      <p>\n        <a class=\"btn btn-primary\" data-bs-toggle=\"collapse\" \n           href=\"#collapseExample\" role=\"button\" \n           aria-expanded=\"false\" aria-controls=\"collapseExample\">\n          Show/Hide Details\n        </a>\n      </p>\n      <div class=\"collapse\" id=\"collapseExample\">\n        <div class=\"card card-body\">\n          Status code @((int)Model.Code): @Model.Code\n          <hr />\n          @Model.RawResponseBody\n        </div>\n      </div>\n    </div> \n    ```", "```cs\n    {\"errors\":[{\"message\":\"The field \\u0060productid\\u0060 \n    does not exist on the type \\u0060Product\\u0060.\",\n     \"locations\":[{\"line\":1,\"column\":35}],\n     \"path\":[\"productsInCategory\"],\n     \"extensions\":{\"type\":\"Product\",\"field\":\"productid\",\n     \"responseName\":\"productid\",\n     \"specifiedBy\":\"http://spec.graphql.org/October2021/\n    #sec-Field-Selections-on-Objects-Interfaces-and-Unions-Types\"}}]} \n    ```", "```cs\n    dotnet new tool-manifest \n    ```", "```cs\n    dotnet tool install StrawberryShake.Tools --local \n    ```", "```cs\n    You can invoke the tool from this directory using the following commands:\n    'dotnet tool run dotnet-graphql' or 'dotnet dotnet-graphql'.\n    Tool 'strawberryshake.tools' (version '13.5.1') was successfully installed.\n    Entry is added to the manifest file C:\\apps-services-net8\\Chapter12\\\n    Northwind.GraphQL.Client.Console\\.config\\dotnet-tools.json. \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <OutputType>Exe</OutputType>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference Version=****\"****8.0.0\"**\n     **Include=****\"Microsoft.Extensions.DependencyInjection\"** **/>**\n     **<PackageReference Version=****\"8.0.0\"**\n     **Include=****\"Microsoft.Extensions.Http\"** **/>**\n     **<PackageReference Version=****\"13.5.1\"**\n     **Include=****\"StrawberryShake.Server\"** **/>**\n     **</ItemGroup>**\n     **<ItemGroup>**\n     **<Using Include=****\"System.Console\"** **Static=****\"true\"** **/>**\n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    dotnet graphql init https://localhost:5121/graphql/ -n NorthwindClient \n    ```", "```cs\n    Download schema started.\n    Download schema completed in 189 ms\n    Client configuration started.\n    Client configuration completed in 83 ms \n    ```", "```cs\n    {\n      \"schema\": \"schema.graphql\",\n      \"documents\": \"**/*.graphql\",\n      \"extensions\": {\n        \"strawberryShake\": {\n          \"name\": \"NorthwindClient\",\n    **\"namespace\"****:****\"Northwind.GraphQL.Client.Console\"****,**\n          \"url\": \"https://localhost:5111/graphql/\",\n          \"records\": {\n            \"inputs\": false,\n            \"entities\": false\n          },\n          \"transportProfiles\": [\n            {\n              \"default\": \"Http\",\n              \"subscription\": \"WebSocket\"\n            }\n          ]\n        }\n      }\n    } \n    ```", "```cs\n    query SeafoodProducts {\n      productsInCategory(categoryId:8) {\n        productId \n        productName \n        unitsInStock\n      }\n    } \n    ```", "```cs\n    **<!-- An element like this will remove the file from the build process.**\n    <ItemGroup>\n      <GraphQL Remove=\"seafoodProducts.graphql\" />\n    </ItemGroup>\n    **-->** \n    ```", "```cs\n    using Microsoft.Extensions.DependencyInjection; // To use ServiceCollection.\n    using Northwind.GraphQL.Client.Console; // To use INorthwindClient.\n    using StrawberryShake; // To use EnsureNoErrors extension method.\n    ServiceCollection serviceCollection = new();\n    serviceCollection\n      .AddNorthwindClient() // Strawberry Shake extension method.\n      .ConfigureHttpClient(client => \n        client.BaseAddress = new Uri(\"https://localhost:5121/graphql\"));\n    IServiceProvider services = serviceCollection.BuildServiceProvider();\n    INorthwindClient client = services.GetRequiredService<INorthwindClient>();\n    var result = await client.SeafoodProducts.ExecuteAsync();\n    result.EnsureNoErrors();\n    if (result.Data is null)\n    {\n      WriteLine(\"No data!\");\n      return; \n    }\n    foreach (var product in result.Data.ProductsInCategory)\n    {\n      WriteLine(\"{0}: {1}\",\n        product.ProductId, product.ProductName);\n    } \n    ```", "```cs\n    10: Ikura\n    13: Konbu\n    18: Carnarvon Tigers\n    30: Nord-Ost Matjeshering\n    36: Inlagd Sill\n    37: Gravad lax\n    40: Boston Crab Meat\n    41: Jack's New England Clam Chowder\n    45: Rogede sild\n    46: Spegesild\n    58: Escargots de Bourgogne\n    73: Röd Kaviar \n    ```", "```cs\n    using Northwind.EntityModels; // To use Product.\n    namespace Northwind.GraphQL.Service;\n    // Inputs are readonly so we will use a record.\n    public record AddProductInput(\n      string ProductName,\n      int? SupplierId,\n      int? CategoryId,\n      string QuantityPerUnit,\n      decimal? UnitPrice,\n      short? UnitsInStock,\n      short? UnitsOnOrder,\n      short? ReorderLevel,\n      bool Discontinued);\n    public class AddProductPayload\n    {\n      public AddProductPayload(Product product)\n      {\n        Product = product;\n      }\n      public Product Product { get; }\n    }\n    public class Mutation\n    {\n      public async Task<AddProductPayload> AddProductAsync(\n        AddProductInput input, NorthwindContext db)\n      {\n        // This could be a good place to use a tool like AutoMapper,\n        // but we will do the mapping between two objects manually.\n        Product product = new()\n        {\n          ProductName = input.ProductName,\n          SupplierId = input.SupplierId,\n          CategoryId = input.CategoryId,\n          QuantityPerUnit = input.QuantityPerUnit,\n          UnitPrice = input.UnitPrice,\n          UnitsInStock = input.UnitsInStock,\n          UnitsOnOrder = input.UnitsOnOrder,\n          ReorderLevel = input.ReorderLevel,\n          Discontinued = input.Discontinued\n        };\n        db.Products.Add(product);\n        int affectedRows = await db.SaveChangesAsync();\n        // We could use affectedRows to return an error\n        // or some other action if it is 0.\n        return new AddProductPayload(product);\n      }\n    } \n    ```", "```cs\n    builder.Services\n      .AddGraphQLServer()\n      .AddFiltering()\n      .AddSorting()\n      .RegisterDbContext<NorthwindContext>()\n      .AddQueryType<Query>()\n     **.AddMutationType<Mutation>();** \n    ```", "```cs\n    type Mutation {\n      addProduct(input: AddProductInput!): AddProductPayload!\n    }\n    type Product {\n      productId: Int!\n      productName: String!\n      supplierId: Int\n      categoryId: Int\n      quantityPerUnit: String\n      unitPrice: Decimal\n      unitsInStock: Short\n      unitsOnOrder: Short\n      reorderLevel: Short\n      discontinued: Boolean!\n      category: Category\n      supplier: Supplier\n      orderDetails: [OrderDetail!]!\n    }\n    ...\n    type AddProductPayload {\n      product: Product!\n    }\n    input AddProductInput {\n      productName: String!\n      supplierId: Int\n      categoryId: Int\n      quantityPerUnit: String!\n      unitPrice: Decimal\n      unitsInStock: Short\n      unitsOnOrder: Short\n      reorderLevel: Short\n      discontinued: Boolean!\n    } \n    ```", "```cs\n    mutation AddProduct {\n      addProduct(\n        input: {\n          productName: \"Tasty Burgers\"\n          supplierId: 1\n          categoryId: 2\n          quantityPerUnit: \"6 per box\"\n          unitPrice: 40\n          unitsInStock: 0\n          unitsOnOrder: 0\n          reorderLevel: 0\n          discontinued: false\n        }\n      )\n      {\n        product {\n          productId\n          productName\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"addProduct\": {\n          \"product\": {\n            \"productId\": 79,\n            \"productName\": \"Tasty Burgers\",\n          }\n        }\n      }\n    } \n    ```", "```cs\n    public record UpdateProductPriceInput(\n      int? ProductId,\n      decimal? UnitPrice);\n    public record UpdateProductUnitsInput(\n      int? ProductId,\n      short? UnitsInStock,\n      short? UnitsOnOrder,\n      short? ReorderLevel);\n    public record DeleteProductInput(\n      int? ProductId); \n    ```", "```cs\n    public class UpdateProductPayload\n    {\n      public UpdateProductPayload(Product? product, bool updated)\n      {\n        Product = product;\n        Success = updated;\n      }\n      public Product? Product { get; }\n      public bool Success { get; }\n    }\n    public class DeleteProductPayload\n    {\n      public DeleteProductPayload(bool deleted)\n      {\n        Success = deleted;\n      }\n      public bool Success { get; }\n    } \n    ```", "```cs\n    public async Task<UpdateProductPayload> UpdateProductPriceAsync(\n      UpdateProductPriceInput input, NorthwindContext db)\n    {\n      Product? product = await db.Products.FindAsync(input.ProductId);\n      int affectedRows = 0;\n      if (product is not null)\n      {\n        product.UnitPrice = input.UnitPrice;\n        affectedRows = await db.SaveChangesAsync();\n      }\n      return new UpdateProductPayload(product, \n        updated: affectedRows == 1);\n    }\n    public async Task<UpdateProductPayload> UpdateProductUnitsAsync(\n      UpdateProductUnitsInput input, NorthwindContext db)\n    {\n      Product? product = await db.Products.FindAsync(input.ProductId);\n      int affectedRows = 0;\n      if (product is not null)\n      {\n        product.UnitsInStock = input.UnitsInStock;\n        product.UnitsOnOrder = input.UnitsOnOrder;\n        product.ReorderLevel = input.ReorderLevel;\n        affectedRows = await db.SaveChangesAsync();\n      }\n      return new UpdateProductPayload(product,\n        updated: affectedRows == 1);\n    }\n    public async Task<DeleteProductPayload> DeleteProductAsync(\n      DeleteProductInput input, NorthwindContext db)\n    {\n      Product? product = await db.Products.FindAsync(input.ProductId);\n      int affectedRows = 0;\n      if (product is not null)\n      {\n        db.Products.Remove(product);\n        affectedRows = await db.SaveChangesAsync();\n      }\n      return new DeleteProductPayload(\n        deleted: affectedRows == 1);\n    } \n    ```", "```cs\n    query NewProducts {\n      products(where: { productId: { gt: 77 } }) {\n        productId\n        productName\n        unitPrice\n        unitsInStock\n        unitsOnOrder\n        reorderLevel\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"products\": [\n          {\n            \"productId\": 79,\n            \"productName\": \"Tasty Burgers\",\n            \"unitPrice\": 40,\n            \"unitsInStock\": 0,\n            \"unitsOnOrder\": 0,\n            \"reorderLevel\": 0\n          }\n        ]\n      }\n    } \n    ```", "```cs\n    mutation UpdateProductPrice {\n      updateProductPrice(\n        input: {\n          productId: 79\n          unitPrice: 75\n        }\n      ) \n      {\n        product {\n          productId\n          productName\n          unitPrice\n          unitsInStock\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"updateProductPrice\": {\n          \"product\": {\n            \"productId\": 79,\n            \"productName\": \"Tasty Burgers\",\n            \"unitPrice\": 75,\n            \"unitsInStock\": 0\n          }\n        }\n      }\n    } \n    ```", "```cs\n    mutation UpdateProductUnits {\n      updateProductUnits(\n        input: {\n          productId: 79\n          unitsInStock: 20\n          unitsOnOrder: 0\n          reorderLevel: 10\n        }\n      ) \n      {\n        success\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"updateProductUnits\": {\n          \"success\": true\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"products\": [\n          {\n            \"productId\": 79,\n            \"productName\": \"Tasty Burgers\",\n            \"unitPrice\": 75,\n            \"unitsInStock\": 20,\n            \"unitsOnOrder\": 0,\n            \"reorderLevel\": 10\n          }\n        ]\n      }\n    } \n    ```", "```cs\n    mutation DeleteProduct {\n      deleteProduct(\n        input: {\n          productId: 79\n        }\n      ) \n      {\n        success\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"deleteProduct\": {\n          \"success\": true\n        }\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"products\": []\n      }\n    } \n    ```", "```cs\n    namespace Northwind.GraphQL.Service;\n    public class ProductDiscount\n    {\n      public int? ProductId { get; set; }\n      public decimal? OriginalUnitPrice { get; set; }\n      public decimal? NewUnitPrice { get; set; }\n    } \n    ```", "```cs\n    namespace Northwind.GraphQL.Service;\n    public class Subscription\n    {\n      [Subscribe]\n      [Topic]\n      public ProductDiscount OnProductDiscounted(\n        [EventMessage] ProductDiscount productDiscount)\n          => productDiscount;\n    } \n    ```", "```cs\n    public async Task<UpdateProductPayload> UpdateProductPriceAsync(\n      UpdateProductPriceInput input, NorthwindContext db**,**\n     **ITopicEventSender eventSender**)\n    {\n      Product? product = await db.Products.FindAsync(input.ProductId);\n      int affectedRows = 0;\n      if (product is not null)\n      {\n    **if** **(input.UnitPrice < product.UnitPrice)**\n     **{**\n    **// If the product has been discounted,**\n    **// send a message to subscribers.**\n     **ProductDiscount productDiscount =** **new****()**\n     **{**\n     **ProductId = input.ProductId,**\n     **OriginalUnitPrice = product.UnitPrice,**\n     **NewUnitPrice = input.UnitPrice**\n     **};**\n    **await** **eventSender.SendAsync(topicName:**\n    **nameof****(Subscription.OnProductDiscounted),**\n     **message: productDiscount);**\n     **}**\n        product.UnitPrice = input.UnitPrice;\n        affectedRows = await db.SaveChangesAsync();\n      }\n      return new UpdateProductPayload(product,\n        updated: affectedRows == 1);\n    } \n    ```", "```cs\n    builder.Services\n      .AddGraphQLServer()\n      .AddFiltering()\n      .AddSorting()\n     **.AddSubscriptionType<Subscription>()**\n     **.AddInMemorySubscriptions()**\n      .RegisterDbContext<NorthwindContext>()\n      .AddQueryType<Query>()\n      .AddMutationType<Mutation>(); \n    ```", "```cs\n    app.UseWebSockets(); // For subscriptions. \n    ```", "```cs\n    subscription {\n      onProductDiscounted {\n        productId\n        originalUnitPrice\n        newUnitPrice\n      }\n    } \n    ```", "```cs\n    mutation UpdateProductPrice {\n      updateProductPrice(\n        input: {\n          productId: 1\n          unitPrice: 8.99\n        }\n      ) \n      {\n        product {\n          productId\n          unitPrice\n        }\n        success\n      }\n    } \n    ```", "```cs\n    {\n      \"data\": {\n        \"updateProductPrice\": {\n          \"product\": {\n            \"productId\": 1,\n            \"unitPrice\": 8.99\n          },\n          \"success\": true\n        }\n      }\n    } \n    ```"]