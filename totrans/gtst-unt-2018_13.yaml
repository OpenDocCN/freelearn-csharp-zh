- en: Optimizing Our Game for Deployment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the last chapter, we planned and implemented audio and visual effects into
    our game to enhance overall gameplay. Specifically, we added audio to key events
    in our combat system and added lighting and particle special effects. We started
    with an overview of Unity's audio system, then planned and implemented our game's
    audio. We then shifted to an introduction to lights and shadows in Unity and covered
    select special effects in Unity. We concluded by adding a point light to our cherry
    trees and a special effect to our spawn pads.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter has two areas of focus: optimization and deployment. In the optimization
    sections, you will learn how to diagnose your Unity game for performance problems
    and how to optimize scripts and graphics rendering. In the deployment section,
    you will learn about the Unity build process, how to create a standalone player,
    and how to deploy your game to multiple platforms.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Specifically, in this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Profiler window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing scripts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimizing graphics rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional optimizations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Profiler window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Unity has a native tool that helps us to examine how our game performs. This
    is a Profiler tool and is accessible via the Window | Profiler top menu option.
    As you can see in the following illustration, there are 13 components available
    in the Profiler window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e01a6986-68e0-4657-9a31-83799dcfe526.png)'
  prefs: []
  type: TYPE_IMG
- en: Profiler Components
  prefs: []
  type: TYPE_NORMAL
- en: 'The individual Profiler names provide a clear indication of what performance
    measure is being analyzed. In order to fully explore the Profiler window, let''s
    get it up and running with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Unity game project. Alternatively, you can download the Starting-Chapter-13 Unity project
    available from the publisher's companion site.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the top menu, select Window | Profiler. Depending on your system, this
    can open the Profiler in a new window or as a tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Profiler window or tab, use the Add Profiler button to add any Profilers
    not loaded by default. The Profilers that are already loaded will appear in gray
    and the unloaded Profilers will appear in black.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Put your game in game mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll through the Profilers and, using the *x* in the top-right corner of
    the Profiler box, close the Profilers that provide little or no data on your game.
    For example, the Network Operations and Network Messages Profilers are not applicable
    to the Cucumber Man game. You might leave the following Profilers in your Profiler
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CPU Usage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: GPU Usage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Audio
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Physics
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: UI
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Global Illumination
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Let your game run for at least a minute or more, then exit the game. It does
    not matter whether you play the game while it is running or just sit back and
    watch the cucumber beetles search for and eat cucumbers. You will have the Profiler
    data available to you even after the game stops.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can examine each Profiler to help determine how our game is performing and
    identify any performance problems. Let's look at the GPU Usage Profiler by clicking
    on it in the Profiler window. When we select a Profiler, detailed information
    is provided in the bottom section of the Profiler window.
  prefs: []
  type: TYPE_NORMAL
- en: 'By reviewing the detailed information provided, such as the GPU Usage information
    shown here, we can determine component-level performance. In the following example,
    we can see that our `Camera.Renderer` takes the greatest draw on the GPU. We can
    also drill down to greater fidelity by clicking the gray triangles to the left
    of each component:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f7968f26-4cbf-4403-b0b9-ab3157beb81f.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting more out of the Profilers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Profiler window has several controls, segmented into left, center, and
    right sections of the interface. As you can see from the following screenshot,
    the Add Profiler drop-down button consumes the left-most section of the Profiler
    window''s tool bar. We can use that button to add additional Profilers to the
    window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2a02fb2-5b96-403a-8f77-88ee4cbdb1fd.png)'
  prefs: []
  type: TYPE_IMG
- en: Profiler Toolbar
  prefs: []
  type: TYPE_NORMAL
- en: 'The center section of the interface contains four functions, detailed here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Record: This button is enabled by default and is used to record or not record
    the active game''s Profile information. When troubleshooting a specific section
    of your game, this button makes it easy to start and stop recording.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Deep Profile: This function, when enabled, will Profile all script usage including
    function calls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Profile Editor: This function allows you to toggle the profiling of the Profiler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Editor: You can use this function to designate an IP address for the Profiler
    and log data to be sent. The default is for it to be sent to the editor.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The right-most section of the Profiler window's tool bar includes controls to
    Clear, Load, and Save the Profiler information. If you selected a frame, the frame
    information will be displayed. You also have the ability to step through the frames
    using navigational buttons in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Don't be surprised if your game performance is noticeably impacted when using
    the profiling tools.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing scripts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity games run several frames per second and many of our scripts are executed
    each frame. Even uncomplicated games, such as the Cucumber Man, can have several
    scripts running every frame, causing the computer's CPU to stay very busy. The
    goal is to ensure our scripts are not causing any unnecessary CPU load.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our game has 145 scripts, but most of them are part of the standard asset package
    and are not assigned to any game objects. The scripts we want to review are the
    ones we put in the `Assets` | `Custom Scripts` folder. Reviewing that folder reveals
    that there are only 14 scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: BeetleManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeetleNPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BeetlePatrol
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CameraFollower
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CherryControl
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CherryManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CucumberManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CucumberManManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HealthManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PlayerController
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PlayerMotor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PointsManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ThrowCherry
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VictoryManager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Our goal is to reduce the number of instructions the CPU has to execute, especially
    when we are dealing with several executions per frame and multiple frames per
    second. Here are some things to check when reviewing your Unity scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure all function calls are necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As appropriate, move function calls out of the `Update()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As appropriate, move statements out of loops to limit the number of times they
    are executed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use NPCs only as needed. Our game is relatively simple and we do not have hoards
    of cucumber beetles. You might try an experiment where there are 10,000 cucumber
    beetles in your game. Since each one of them has AI-associated code, the CPU will
    be very busy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optimized code example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following script is not optimized. Review the script to see what can be
    done to optimize it. Then, review the information provided after the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Hopefully you were able to spot the inefficient, unoptimized component of the
    script. In the preceding example, all the statements other than the variable declarations
    occur in the `Update()` method. Consider the optimized version of the following
    script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In the optimized version of this script, the `GetComponent()` method call and
    the `currentCucumberCount` variable initialization are moved over to the `Awake()`
    method. Those statements only need to run once. Putting them inside the `Update()`
    method would have caused undue strain on the CPU.
  prefs: []
  type: TYPE_NORMAL
- en: It is important for a game's overall performance to have optimized scripts.
    Checking for script optimization at the end of a project is a good idea. Ideally,
    you will ensure your scripts are optimized as your write, as opposed to reviewing
    them later.
  prefs: []
  type: TYPE_NORMAL
- en: Optimizing graphics rendering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Three graphics rendering concepts that should be explored when aiming to enhance
    game performance are occlusion culling, lighting, and mesh renderers. Each of
    these concepts are covered in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Occlusion culling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cameras are a critical game object in our Unity games. They allow the player
    to see the game environment. Unity works diligently during gameplay to render
    objects within a camera's frustum. Graphics rendering can represent a tremendous
    performance issue. It is therefore important that we pay special attention to
    our camera's occlusion culling parameter. When enabled, Unity will not render
    objects that are occluded, or not seen by the camera. An example would be objects
    inside a building. If the camera can currently only see the external walls of
    the building, then none of the objects inside those walls can be seen. So, it
    makes sense to not render those. We only want to render what is absolutely necessary
    to help ensure our game has smooth gameplay and no lag.
  prefs: []
  type: TYPE_NORMAL
- en: Lighting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we create our scenes in Unity, we have three options for lighting. We can
    use real-time dynamic light, the baked lighting approach, or a mixture of real-time
    and baked. Our games perform more efficiently with baked lighting compared to
    real-time dynamic lighting, so if performance is a concern, try using baked lighting
    where you can.
  prefs: []
  type: TYPE_NORMAL
- en: Area lights are distinct from the other types of light in that they can only
    be baked. This means that real-time rendering will not take place during gameplay.
    The reason for this is to conduct all the processing regarding area lights prior
    to gameplay. This processing, if accomplished in a game in real time, would likely
    result in sufficient lag.
  prefs: []
  type: TYPE_NORMAL
- en: Mesh renderer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The mesh renderer component of a game object can be viewed in the Inspector
    panel. There are multiple settings that can be adjusted to enhance performance.
  prefs: []
  type: TYPE_NORMAL
- en: The Cast Shadows setting can be set to On, Off, Two-Sided, or Shadows Only.
    The default is On, so you should disable this for all objects that do not need
    to cast shadows.
  prefs: []
  type: TYPE_NORMAL
- en: The receive shadows is a toggle that tells Unity whether you want that object
    to receive shadows or not. As you would expect, this takes extra processing to
    display during the game. So, if you do not need an object to receive shadows,
    deselect this for greater performance.
  prefs: []
  type: TYPE_NORMAL
- en: Additional optimizations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Two additional areas where you can optimize your game is with level of detail
    and using static colliders. Both of these concepts are discussed in the sections
    that follow.
  prefs: []
  type: TYPE_NORMAL
- en: Level of detail
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Level of detail refers to how much detail is rendered on any given game object.
    The greater the number of polygons, the greater the level of detail your game
    objects will have. In order to reduce render times, you should consider what elements
    of detail need to be part of the 3D model and which ones can simply be included
    in the texture.
  prefs: []
  type: TYPE_NORMAL
- en: There are also **level of detail** (**LOD**) models. This is when you use multiple
    models of the same object in a game, each with a different level of detail. Think
    about a game where the player stands on the coast, looking at the horizon. A ship
    that is 12 miles away does not need the same level of detail as when it is just
    a few yards away.
  prefs: []
  type: TYPE_NORMAL
- en: Static colliders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static colliders are game objects with a collider but without a rigidbody. As
    the name suggests, these game objects do not move. Because the physics engine
    knows these objects will not move, pre-calculations can be made to make the game
    more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: So, to increase efficiency, you should strive to use static colliders when possible.
  prefs: []
  type: TYPE_NORMAL
- en: Creating builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a build for your game is not complicated when you are working on your
    own projects. You essentially ensure your assets (for example, 3D models, textures,
    animations, and scripts) are on your computer and you use Unity to create the
    build. This process is much more complicated when you are working on large and
    distributed teams.  This section covers the individual developer where all assets
    are on a single computer.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Unity build process
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Unity build process seems pretty easy. We can simply select File | Build
    & Run from the top menu and get great results. Unity actually does a lot of work
    to create a build. Here are the basic steps the Unity game engine takes to create
    a build of your game:'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a blank build copy of your game
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sequences through the scene list, optimizing them before integrating them with
    the build
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculates and stores data regarding what assets are needed for each scene
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There are additional aspects of the build process that we should be aware of.
    For example, if we assign the EditorOnly tag to a game object, it will not be
    integrated into the build.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have completed your game, you can select the Build & Run or Build
    Settings options from the File pull-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ec3ce22c-4007-433c-a364-4c7f5c7ab74b.png)'
  prefs: []
  type: TYPE_IMG
- en: Build settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We access the Build Settings dialog window via the File | Build & Run top menu
    option. With that interface open, displayed as follows, we can make several decisions
    regarding our build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/42684fa6-03d7-4485-829e-baaf079cc427.png)'
  prefs: []
  type: TYPE_IMG
- en: The top section of the Build Settings interface lists the Scenes that will be
    included in the build. You can use the Add Open Scenes button to quickly add those
    scenes to the build. You can also select and deselect scenes to ensure you only
    include the scenes needed for the build.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section of the Build Settings interface,  you'll select a platform.
    Each of the platform options is covered in the next few sections.
  prefs: []
  type: TYPE_NORMAL
- en: PC, Mac, and Linux standalone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For this platform group, you will need to select Mac OS X, Windows, or Linux.
    As you can see from the following screenshot, each operating system selection
    has its own set of options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee2912fb-21d4-497c-8eab-3ceaf213ff37.png)'
  prefs: []
  type: TYPE_IMG
- en: For Mac OS X, you will decide whether this is a development build or not. If
    it is, you will have the additional options of Autoconnect Profiler, Script Debugging,
    and Scripts Only Build.
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you will select whether it is a 32-bit or 64-bit build and select
    whether you want to copy the PDB files. You will also decide whether this is a
    development build or not. If it is, you will have the additional options of Autoconnect
    Profiler, Script Debugging, and Scripts Only Build.
  prefs: []
  type: TYPE_NORMAL
- en: For Linux, you will select whether it is a 32-bit, 64-bit, or Universal build.
    You will also decide whether this is a development build or not. If it is, you
    will have the additional options of Autoconnect Profiler, Script Debugging, and
    Scripts Only Build. Lastly, you will select whether your build will support Headless
    Mode.
  prefs: []
  type: TYPE_NORMAL
- en: Headless mode refers to a server-based game that does not contain visual elements.
  prefs: []
  type: TYPE_NORMAL
- en: iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When developing for iOS devices (iPad, iPad Pro, iPad Mini, iPhone, iPod Touch)
    you need to have Xcode installed on your computer. Xcode is also required for
    developing for macOS devices.
  prefs: []
  type: TYPE_NORMAL
- en: You can obtain the latest version of Xcode here: [https://developer.apple.com/develop/](https://developer.apple.com/develop/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Build Settings interface, you can identify your version of Xcode
    and decide whether you want to run it as a release or in debug mode. You can decide
    whether you want your Xcode project to directly reference the Unity iOS runtime
    library from the Unity Editor''s install location. This is accomplished by selecting
    the Symlink Unity libraries checkbox. You should not use this for your final build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7b3beafd-3f06-4156-b0c3-b6d5c1909a2c.png)'
  prefs: []
  type: TYPE_IMG
- en: You will also decide whether this is a development build or not. If it is, you
    will have the additional options of Autoconnect Profiler, Script Debugging, and
    Scripts Only Build.
  prefs: []
  type: TYPE_NORMAL
- en: tvOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can see here, the options for tvOS are the same as iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/39e877b4-fe9b-42cf-969b-939340b924c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When developing for Android devices, you have several Texture Compression options
    to choose from. You can also identify 16-bit, 32-bit, or 32-bit half resolution
    as the ETC2 fallback. You can use the internal Build System or Gradle, which is
    a build tool used in Android Studio and elsewhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8a0c9d51-6aca-4b79-9af1-5072d1b6f30a.png)'
  prefs: []
  type: TYPE_IMG
- en: You will also decide whether this is a development build or not. If it is, you
    will have the additional options of Autoconnect Profiler, Script Debugging, and
    Scripts Only Build.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about developing for Android devices here: [https://developer.android.com/](https://developer.android.com/).
  prefs: []
  type: TYPE_NORMAL
- en: HTML 5/WebGL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When developing for HTML 5/Web GL, you will decide whether this is a Development
    Build or not. If it is, you will have the additional options of Autoconnect Profiler and
    Scripts Only Build:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/af3bdee8-929d-4e05-afb1-84925ccfc556.png)'
  prefs: []
  type: TYPE_IMG
- en: Facebook
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When developing a Unity game that will be published on Facebook, you will need
    the Facebook SDK and an App ID. For Target Platform, you can select Gameroom (Windows)
    or WebGL:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a985aa8d-b02b-458f-8ee7-4466f6d05ede.png)'
  prefs: []
  type: TYPE_IMG
- en: You will also decide whether this is a development build or not. If it is, you
    will have the additional options of Autoconnect Profiler and Scripts Only Build.
  prefs: []
  type: TYPE_NORMAL
- en: Consult the following URL for instructions on how to register and configure
    a Facebook app: [https://developers.facebook.com/docs/apps/register](https://developers.facebook.com/docs/apps/register).
  prefs: []
  type: TYPE_NORMAL
- en: Xbox One
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access to the Xbox One player is handled through the Microsoft ID@Xbox program.
  prefs: []
  type: TYPE_NORMAL
- en: Visit the following link to learn how to develop games for Xbox One: [https://www.xbox.com/en-US/developers](https://www.xbox.com/en-US/developers).
  prefs: []
  type: TYPE_NORMAL
- en: PlayStation 4 and PlayStation Vita
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Access to PlayStation 4 and PlayStation Vita players is handled through Dev
    NET and requires a Unity Plus or Unity Pro license.
  prefs: []
  type: TYPE_NORMAL
- en: Player Settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using the  Edit | Project Settings | Player menu option, you have access to
    the Unity Player Settings in the Inspector panel. In this context, the term player
    does not refer to the person playing the game, but to the software that runs the
    game.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in the following screenshot, there are data fields for the name
    of the company and the game''s title. Icons and cursors are also uploaded here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/12d6aca0-86c6-4c3b-bf5b-1e0bcb93ac76.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Beneath the general settings area of the PlayerSettings interface are six buttons.
    As you can see in the following image, there is one button for each of the platforms
    that Unity can generate a player for. This does not include Xbox or PlayStation
    players:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53aae3d3-9d7d-458c-b997-96deac20defe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'For each of the platforms, there is a set of player configuration settings
    sections. This includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Resolution and Presentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Icon
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Splash Image
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging and crash reporting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other Settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not every settings section will be applicable to all platform types. Also, the
    Other Settings content varies based on the platform you are developing for.
  prefs: []
  type: TYPE_NORMAL
- en: If you are developing for multiple platforms, you will need to review the settings
    for each platform type.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on optimization and deployment. We learned how to
    diagnose Unity games for performance problems and how to optimize scripts and
    graphic rendering. We also explored how to deploy our Unity games, including learning
    about the Unity build process, how to create a standalone player, and how to deploy
    games to multiple platforms.
  prefs: []
  type: TYPE_NORMAL
- en: In [Chapter 14](e8f846b8-9476-4203-9e96-83d8556c62b5.xhtml), *Virtual Reality*, we
    will examine Unity's capabilities with regards to virtual reality. We will start
    with a quick introduction to virtual reality including hardware requirements,
    and then look at how to create a virtual reality game using the Unity game engine.
    We will also look at the available starter content from the Unity Asset Store.
  prefs: []
  type: TYPE_NORMAL
