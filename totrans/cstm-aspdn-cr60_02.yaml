- en: '*Chapter 2*: Customizing App Configuration'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*：自定义应用程序配置'
- en: This second chapter is about application configuration, how to use it, and how
    to customize the ASP.NET configuration to employ different ways to configure your
    app. Perhaps you already have an existing **Extensible Markup Language** (**XML**)
    configuration or want to share a **YAML Ain't Markup Language** (**YAML**) configuration
    file over different kinds of applications. Sometimes, it also makes sense to read
    configuration values out of a database.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的第二个部分是关于应用程序配置，如何使用它，以及如何自定义 ASP.NET 配置以采用不同的方式配置你的应用程序。也许你已经有了一个现有的 **可扩展标记语言**
    (**XML**) 配置，或者想要在不同类型的应用程序之间共享一个 **YAML 不是标记语言** (**YAML**) 配置文件。有时，从数据库中读取配置值也是有意义的。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Configuring the configuration
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置配置
- en: Using typed configurations
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用类型化配置
- en: Configuration using **Initialization** (**INI**) files
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **初始化** (**INI**) 文件进行配置
- en: Configuration providers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置提供程序
- en: 'The topics in this chapter refer to the hosting layer of the ASP.NET Core architecture:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的主题涉及 ASP.NET Core 架构的托管层：
- en: '![Figure 2.1 – ASP.NET Core architecture](img/Figure_2.1_B17996.jpg)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.1 – ASP.NET Core 架构](img/Figure_2.1_B17996.jpg)'
- en: Figure 2.1 – ASP.NET Core architecture
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – ASP.NET Core 架构
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To follow the descriptions in this chapter, you will need to create an ASP.NET
    Core **Model-View-Controller** (**MVC**) application. Open your console, shell,
    or Bash terminal, and change to your working directory. Use the following command
    to create a new MVC application:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循本章的描述，你需要创建一个 ASP.NET Core **模型-视图-控制器** (**MVC**) 应用程序。打开你的控制台、shell 或
    Bash 终端，并切换到你的工作目录。使用以下命令创建一个新的 MVC 应用程序：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, open the project in Visual Studio by double-clicking the project file
    or, in **Visual Studio Code** (**VS Code**), by typing the following command in
    the already open console:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，通过双击项目文件或在 **Visual Studio Code** (**VS Code**) 中在已打开的控制台中输入以下命令来在 Visual
    Studio 中打开项目：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All of the code samples in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter02).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码示例都可以在本书的 GitHub 仓库中找到，网址为 [https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter02](https://github.com/PacktPublishing/Customizing-ASP.NET-Core-6.0-Second-Edition/tree/main/Chapter02)。
- en: Configuring the configuration
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置配置
- en: Let's start by looking at how to configure your various configuration options.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先看看如何配置你的各种配置选项。
- en: Since ASP.NET Core 2.0, the configuration is hidden in the default configuration
    of `WebHostBuilder` and is no longer part of `Startup.cs`. This helps to keep
    the startup clean and simple.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 自从 ASP.NET Core 2.0 以来，配置被隐藏在 `WebHostBuilder` 的默认配置中，不再是 `Startup.cs` 的一部分。这有助于保持启动过程的简洁和简单。
- en: 'In ASP.NET Core 3.1 up to ASP.NET Core 5.0, the code looks like this:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 3.1 到 ASP.NET Core 5.0 中，代码看起来是这样的：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In ASP.NET Core 6.0, Microsoft introduced the minimal `Startup` and adds all
    the configuration in the `Program.cs` file. Let''s see how it looks here:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 ASP.NET Core 6.0 中，Microsoft 引入了最小的 `Startup` 并将所有配置添加到 `Program.cs` 文件中。让我们看看它的样子：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Fortunately, in both versions, you are also able to override the default settings
    to customize the configuration in the way you need it. In both versions, we extend
    `IWebHostBuilder` with the `ConfigureAppConfiguration()` method where the magic
    will happen.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，在两个版本中，你也能够覆盖默认设置以根据需要自定义配置。在两个版本中，我们通过 `ConfigureAppConfiguration()` 方法扩展了
    `IWebHostBuilder`，这里的魔法就会发生。
- en: 'This is what the configuration looks like in ASP.NET Core 3.1 and ASP.NET Core
    5.0:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 ASP.NET Core 3.1 和 ASP.NET Core 5.0 中的配置样子。
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This is what the code looks like when using the minimal API approach. You also
    can use `ConfigureAppConfiguration` to configure the app configuration:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是使用最小 API 方法时的代码样子。你也可以使用 `ConfigureAppConfiguration` 来配置应用程序配置：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'But there is a much simpler approach, by accessing the `Configuration` property
    of the builder:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但有一个更简单的方法，通过访问构建器的 `Configuration` 属性：
- en: '[PRE6]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: When you create a new ASP.NET Core project, you will already have `appsettings.json`
    and `appsettings.Development.json` configured. You can, and should, use these
    configuration files to configure your app; this is the preconfigured way, and
    most ASP.NET Core developers will look for an `appsettings.json` file to configure
    the application. This is absolutely fine and works pretty well.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个新的ASP.NET Core项目时，你将已经配置了`appsettings.json`和`appsettings.Development.json`。你可以，并且应该使用这些配置文件来配置你的应用程序；这是预配置的方式，大多数ASP.NET
    Core开发者都会寻找一个`appsettings.json`文件来配置应用程序。这是绝对可以接受的，并且工作得很好。
- en: 'The following code snippet shows the encapsulated default configuration to
    read the `appsettings.json` files:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了封装的默认配置，用于读取`appsettings.json`文件：
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This configuration also sets the base path of the application and adds the configuration
    via environment variables.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此配置还设置了应用程序的基本路径，并通过环境变量添加了配置。
- en: Whenever you customize the application configuration, you should add the configuration
    via environment variables as a final step, using the `AddEnvironmentVariables()`
    method. The order of the configuration matters and the configuration providers
    that you add later on will override the configurations added previously. Be sure
    that the environment variables always override the configurations that are set
    via a file. This way, you also ensure that the configuration of your application
    on an Azure App Service will be passed to the application as environment variables.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 无论何时自定义应用程序配置，你都应该通过使用`AddEnvironmentVariables()`方法将配置作为最终步骤添加到环境变量中。配置的顺序很重要，你稍后添加的配置提供程序将覆盖之前添加的配置。确保环境变量始终覆盖通过文件设置的配置。这样，你也可以确保在Azure
    App Service上配置的应用程序配置将以环境变量的形式传递给应用程序。
- en: '`IConfigurationBuilder` has a lot of extension methods to add more configurations,
    such as XML or INI configuration files and in-memory configurations. You can find
    additional configuration providers built by the community to read in YAML files,
    database values, and a lot more. In an upcoming section, we will see how to read
    INI files. First, we will look at using typed configurations.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`IConfigurationBuilder`有很多扩展方法来添加更多配置，例如XML或INI配置文件和内存中的配置。你可以找到社区构建的附加配置提供程序，用于读取YAML文件、数据库值以及更多。在接下来的部分中，我们将看到如何读取INI文件。首先，我们将探讨使用类型化配置。'
- en: Using typed configurations
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用类型化配置
- en: Before trying to read INI files, it makes sense for you to see how to use typed
    configurations instead of reading the configuration via `IConfiguration`, key
    by key.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在尝试读取INI文件之前，先看看如何使用类型化配置而不是通过`IConfiguration`逐个读取配置。
- en: 'To read a typed configuration, you need to define the type to configure. I
    usually create a class called `AppSettings`, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要读取类型化配置，你需要定义要配置的类型。我通常创建一个名为`AppSettings`的类，如下所示：
- en: '[PRE8]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is a simple `ConfigureServices` method in `Startup.cs` until ASP.NET Core
    5.0:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在ASP.NET Core 5.0之前的`Startup.cs`中的简单`ConfigureServices`方法：
- en: '[PRE9]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Using the minimal API approach, you need to configure the `AppSettings` class,
    like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最小API方法，你需要像这样配置`AppSettings`类：
- en: '[PRE10]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This way, the typed configuration also gets registered as a service in the
    **dependency injection** (**DI**) container and can be used everywhere in the
    application. You are able to create different configuration types for each configuration
    section. In most cases, one section should be fine, but sometimes it makes sense
    to divide the settings into different sections. The next snippet shows how to
    use the configuration in an MVC controller:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，类型化配置也注册为依赖注入（**DI**）容器中的服务，可以在应用程序的任何地方使用。你可以为每个配置部分创建不同的配置类型。在大多数情况下，一个部分就足够了，但有时将设置分成不同的部分是有意义的。下一个片段展示了如何在MVC控制器中使用配置：
- en: '[PRE11]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`IOptions<AppSettings>` is a wrapper around our `AppSettings` type, and the
    `Value` property contains the actual instance of `AppSettings`, including the
    values from the configuration file.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`IOptions<AppSettings>`是我们`AppSettings`类型的包装器，`Value`属性包含实际的`AppSettings`实例，包括来自配置文件的值。'
- en: 'To try reading the settings in, the `appsettings.json` file needs to have the
    `AppSettings` section configured, otherwise the values are null or not set. Let''s
    now add the section to the `appsettings.json` file, as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试读取设置，`appsettings.json`文件需要配置`AppSettings`部分，否则值将为null或未设置。现在让我们将部分添加到`appsettings.json`文件中，如下所示：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Next, we'll examine how INI files can be used for configuration.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将检查INI文件如何用于配置。
- en: Configuration using INI files
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 INI 文件进行配置
- en: 'To also use INI files to configure the application, you will need to add the
    INI configuration inside the `ConfigureAppConfiguration()` method in `Program.cs`,
    as follows:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 INI 文件配置应用程序，您需要在 `Program.cs` 中的 `ConfigureAppConfiguration()` 方法内添加 INI
    配置，如下所示：
- en: '[PRE13]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code loads the INI files the same way as the **JavaScript Object Notation**
    (**JSON**) configuration files. The first line is a required configuration, and
    the second line is an optional configuration depending on the current runtime
    environment.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码以与 **JavaScript 对象表示法**（**JSON**）配置文件相同的方式加载 INI 文件。第一行是必需的配置，第二行是可选配置，取决于当前运行时环境。
- en: 'The INI file could look like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: INI 文件可能看起来像这样：
- en: '[PRE14]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see, this file contains a section called `AppSettings` and a property
    called `Bar`.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此文件包含一个名为 `AppSettings` 的部分和一个名为 `Bar` 的属性。
- en: Earlier, we said that the order of the configuration matters. If you add the
    two lines to configure via INI files after the configuration via JSON files, the
    INI files will override the settings from the JSON files. The `Bar` property gets
    overridden with `"FooBar"` and the `Foo` property stays the same because it will
    not be overridden. Also, the values out of the INI file will be available via
    the typed configuration created previously.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我们说过配置的顺序很重要。如果您在配置 JSON 文件之后添加配置 INI 文件的两个行，INI 文件将覆盖 JSON 文件的设置。`Bar` 属性被覆盖为
    `"FooBar"`，而 `Foo` 属性保持不变，因为它不会被覆盖。此外，INI 文件外的值将通过之前创建的类型化配置提供。
- en: Every other configuration provider will work the same way. Let's now see how
    a configuration provider will look.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个其他配置提供程序都将以相同的方式工作。现在让我们看看配置提供程序将是什么样子。
- en: Configuration providers
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置提供程序
- en: A configuration provider is an implementation of `IConfigurationProvider` that
    is created by a configuration source, which is an implementation of `IConfigurationSource`.
    The configuration provider then reads the data from somewhere and provides it
    via `Dictionary`.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 配置提供程序是 `IConfigurationProvider` 的实现，由配置源创建，配置源是 `IConfigurationSource` 的实现。然后配置提供程序从某处读取数据，并通过
    `Dictionary` 提供它。
- en: 'To add a custom or third-party configuration provider to ASP.NET Core, you
    will need to call the `Add` method on `ConfigurationBuilder` and insert the configuration
    source. This is just an example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 要将自定义或第三方配置提供程序添加到 ASP.NET Core，您需要在 `ConfigurationBuilder` 上调用 `Add` 方法并插入配置源。这是一个示例：
- en: '[PRE15]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Usually, you would create an extension method to add the configuration source
    more easily, as illustrated here:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会创建一个扩展方法来更轻松地添加配置源，如下所示：
- en: '[PRE16]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: A really detailed concrete example about how to create a custom configuration
    provider has been written by Andrew Lock. You can find this in the *Further reading*
    section of this chapter.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 关于如何创建自定义配置提供程序的详细具体示例是由 Andrew Lock 编写的。您可以在本章的 *进一步阅读* 部分找到它。
- en: Summary
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In most cases, you will not need to add a different configuration provider or
    create your own configuration provider, but it's good to know how to change it,
    just in case. Also, using a typed configuration is a nice way to read and provide
    the settings. In classic ASP.NET, we used a manually created façade to read the
    application settings in a typed manner. Now, this is automatically done by just
    providing a type. This type will be automatically instantiated, filled, and provided,
    via DI.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，您不需要添加不同的配置提供程序或创建自己的配置提供程序，但了解如何更改它是很好的，以防万一。此外，使用类型化配置是读取和提供设置的不错方式。在经典
    ASP.NET 中，我们使用手动创建的界面以类型化方式读取应用程序设置。现在，只需提供类型即可自动完成此操作。此类型将被自动实例化、填充并提供，通过依赖注入。
- en: To learn more about customizing DI in ASP.NET Core 6.0, let's have a look at
    the next chapter.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解有关在 ASP.NET Core 6.0 中自定义依赖注入的更多信息，让我们看看下一章。
- en: Further reading
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can refer to the following source for more information:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下来源获取更多信息：
- en: '*Creating a custom ConfigurationProvider in ASP.NET Core to parse YAML*, *Andrew
    Lock*: [https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/](https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在 ASP.NET Core 中创建自定义 ConfigurationProvider 以解析 YAML*，作者：Andrew Lock：[https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/](https://andrewlock.net/creating-a-custom-iconfigurationprovider-in-asp-net-core-to-parse-yaml/)'
