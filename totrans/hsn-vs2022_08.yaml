- en: 'Chapter 6: Adding Code Snippets'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Coding is a lovely activity, but at times, we have some repeated statements
    to solve a few known situations, which makes coding more of a monotonous process.
    **Code snippets** are a good resource to reuse pieces of code where it's desirable.
    Visual Studio has some code snippets by default that we can use while we are coding,
    but we also have some tools to create our own code snippets.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will learn about how Visual Studio helps us to write code
    faster using code snippets and how to create our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will review the following topics and functionalities for snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: What are code snippets?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating code snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deleting code snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing code snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's start recognizing the concept of code snippets and how they work in Visual
    Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To complete the demos of this book chapter, you must have previously installed
    Visual Studio 2022 with the web development workload, as shown in [*Chapter 1*](B17873_01_ePub.xhtml#_idTextAnchor013),
    *Getting Started with Visual Studio 2022*. It's important to have the SPA base
    project that we created in [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052),
    *Creating Projects and Templates*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can check the changes made in `WeatherForecastController.cs` at the following
    link: [https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/blob/main/Chapter06/WeatherForecast.cs](https://github.com/PacktPublishing/Hands-On-Visual-Studio-2022/blob/main/Chapter06/WeatherForecast.cs).'
  prefs: []
  type: TYPE_NORMAL
- en: What are code snippets?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Code snippets are a simple and easy way to reuse code by creating templates
    that generate common statements, such as conditionals, loops, or comment structures.
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio has many code snippets by default for almost all the supported
    technologies and programming languages. There are many ways to use code snippets
    in Visual Studio, so let's check them out.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: Code snippets are a common concept in software development. Almost all IDEs
    and code editors provide code snippets or have extensions to include code snippets.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the SPA project created in [*Chapter 4*](B17873_04_ePub.xhtml#_idTextAnchor052),
    *Creating Projects and Templates*, you will create a new condition to return an
    empty collection in the `Get` method by navigating to the `WeatherForecastController.cs`
    file. Just write the word `if` to see the code snippet suggested by Visual Studio
    (see *Figure 6.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The code snippet for the if statement suggested by Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.01_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – The code snippet for the if statement suggested by Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Since a conditional statement is a very common piece of code, Visual Studio
    gives you the option to create this code quickly. You can click on `if` or continue
    writing if you don't want to perform any action. You can also press *tab* twice
    to create the `if` statement automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is an option in the intelligent code completion (also called **IntelliSense**,
    about which we will talk more in [*Chapter 7*](B17873_07_ePub.xhtml#_idTextAnchor088),
    *Coding Efficiently with AI and Code Views*) suggestions where you can see all
    the code snippets filtered by the characters that you wrote. See the code snippets
    filter marked in red in *Figure 6.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The code snippets filter in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.02_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – The code snippets filter in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'When the code snippet for the `if` condition is highlighted, you can press
    the *tab* key twice to generate the code of the `if` statement, including the
    brackets (*see Figure 6.3*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – The if statement created by Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.03_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – The if statement created by Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'You will get the `if` statement, including the braces and `true` as a default
    value. You need to replace `true` with your condition. In this case, you can add
    a condition to return an empty collection when the operating system is Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code block, we added a condition in the `Get` method before
    the default logic to check whether the operating system where the app is running
    is Linux or not. Within the condition, we are returning an empty list.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many useful code snippets included as default for C#, but the following
    are the most popular:'
  prefs: []
  type: TYPE_NORMAL
- en: '`try`: Creates a structure for a `try`/`catch` statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`for`: Generates a `for` statement using the local `i` variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ctor`: Creates the constructor of the class automatically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switch`: Generates a `switch` statement'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prop`: Creates a new property in the current class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can try some of these code snippets in C# code to see the code generated
    by Visual Studio and use them when the need arises.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see another example using a CSS file. Navigate to `custom.css` CSS file
    (*see Figure 6.4*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – The custom.css file loaded in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.04_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – The custom.css file loaded in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `custom.css` file, you can write the `columns` property and see how
    Visual Studio suggests a code snippet for it. See the code snippets suggested
    for this demo in *Figure 6.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – The code snippets suggested by Visual Studio when you type the
    word "columns"'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.05_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – The code snippets suggested by Visual Studio when you type the
    word "columns"
  prefs: []
  type: TYPE_NORMAL
- en: 'Once again, using the key *tab* twice, you can generate the code for this property
    automatically. See the code generated in *Figure 6.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – The code generated by the code snippet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.06_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – The code generated by the code snippet
  prefs: []
  type: TYPE_NORMAL
- en: In this case, Visual Studio is going to generate four properties, one per browser,
    to ensure the code is compatible with all of them (Chrome, Mozilla, and others).
    We can keep the default `inherit` value because the proposal of this action is
    just to see how Visual Studio makes the code.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to use code snippets in Visual Studio. You can identify which
    suggestions by Visual Studio are code snippets and how to filter them. Now, it's
    time to learn how to create your own code snippets and use them in your code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating code snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a code snippet in Visual Studio, we need to create a file with the
    `snippet` extension. This file has an XML format, and there is a base template
    that we can update to include the information for our code snippet. The following
    code is a template example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Let's review all the properties in this XML and understand how to create our
    first code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `Header` section, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Title`: Name or general information'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Author`: Creator or author'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Description`: What your code snippets do'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Shortcut`: The shortcut to call the code snippet when you are typing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In `Snippet`, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Language`: The programming language for the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[CDATA[]`: Contains the code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, we can create a code snippet to detect whether the operating system where
    the code is running is Linux or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create a new folder in documents or any new folder for this activity
    and save the file with the `snippet` extension (see *Figure 6.7*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – The code snippet file in Windows explorer'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.07_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – The code snippet file in Windows explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, the last step is to add this folder to the code snippet section in Visual
    Studio. Navigate to **Tools** | **Code Snippets Manager**, and in the **Language**
    dropdown, select **CSharp** (see *Figure 6.8*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Code Snippets Manager in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.08_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – Code Snippets Manager in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: You can use the *Ctrl* + *K* shortcuts followed by *Ctrl* + *B* to open the
    **Code Snippets Manager**.
  prefs: []
  type: TYPE_NORMAL
- en: The **Language** option includes all the programming languages and technologies
    supported by Visual Studio, depending on the workload installed.
  prefs: []
  type: TYPE_NORMAL
- en: You can click on **Add...** and select the folder where your code snippet was
    created.
  prefs: []
  type: TYPE_NORMAL
- en: 'After adding the folder, you will see a new folder in the list, including the
    new code snippet. If you select this code snippet, you will see the details on
    the right panel, as shown in *Figure 6.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – The code snippet details for the if linux condition'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.09_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – The code snippet details for the if linux condition
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you are ready to use your code snippet in any C# file. Open the `WeatherForecastController.cs`
    file and try your new code snippet in the `Get` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Using the if linux condition code snippet in Visual Studio'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Using the if linux condition code snippet in Visual Studio
  prefs: []
  type: TYPE_NORMAL
- en: You can see in *Figure 6.10* how Visual Studio suggests your new code snippet,
    and in the tooltip, there is the description that you provided. As usual, you
    can press *tab* twice to generate the code for the code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about how to create and design code snippets, look at
    the official documentation: [https://docs.microsoft.com/visualstudio/ide/code-snippets](https://docs.microsoft.com/visualstudio/ide/code-snippets).'
  prefs: []
  type: TYPE_NORMAL
- en: So far, you have created your first code snippet and know how to create others
    that meet your needs. But there are also other actions that you can perform with
    code snippets. So, let's see how to delete a code snippet in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting code snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Due to human error, we can add code snippets that we don''t need, or maybe
    we selected the wrong code snippet. For these scenarios, Visual Studio has an
    option to delete code snippets. To see this option, navigate to `CodeSnippets`
    folder. This folder contains the code snippet that you included in the *Creating
    code snippets* section. If you used a different name, select the correct folder
    for you. You can see the **Remove** button location in *Figure 6.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – The Remove button in Code Snippets Manager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.11_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – The Remove button in Code Snippets Manager
  prefs: []
  type: TYPE_NORMAL
- en: The **Remove** button will delete the whole folder, including all the code snippets
    inside. In Visual Studio 2022, it's not possible to remove code snippets one by
    one, and therefore, we need to create a folder with a proper name for our code
    snippets. After removing the folder, Visual Studio is not going to suggest the
    code snippets anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Important Note
  prefs: []
  type: TYPE_NORMAL
- en: When you remove code snippets in Visual Studio, the original files and folder
    are not removed from your local system. Only the reference to the file in Visual
    Studio will be removed.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you know how to create and delete code snippets. We can also
    import code snippets in Visual Studio, so let's see how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: Importing code snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to include code snippets in a folder already created in **Code Snippets
    Manager**, we can use the **Import…** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – The Import… button in Code Snippets Manager'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.12_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – The Import… button in Code Snippets Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking on `.snippet` extension in the modal (see *Figure 6.13*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Selecting a code snippet file (.snippet) in the filesystem'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.13_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Selecting a code snippet file (.snippet) in the filesystem
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the code snippet created in the *Creating code snippets* section, and
    then click on **Open**. Finally, you must complete the import process by selecting
    the location folder for your code snippet and clicking on **Finish**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – The selection location for the imported code snippet'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.14_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – The selection location for the imported code snippet
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing the importation, you will see that the code snippet is added
    to the selected folder. See the imported code snippet in *Figure 6.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – The code snippet imported into the My Code Snippets folder'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.15_B17873.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – The code snippet imported into the My Code Snippets folder
  prefs: []
  type: TYPE_NORMAL
- en: Importing code snippets is a great way to share our custom snippets with friends,
    colleagues, and coworkers. We can create amazing pieces of code for common scenarios
    and some special code closely related to our architecture or guidelines.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, you can use code snippets in Visual Studio and increase your productivity.
    You can identify which pieces of code are common in your architecture and use
    patterns to create your own code snippets to meet your requirements. Also, you
    know how to manage code snippets using the functionalities to delete and import.
    After completing the demos in this chapter, you will recognize the importance
    of code snippets and why Visual Studio is a powerful IDE that helps developers
    to write code faster.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 7*](B17873_07_ePub.xhtml#_idTextAnchor088), *Coding Efficiently
    with AI and Code Views*, we will review the **artificial intelligence** (**AI**)
    included in Visual Studio and how this tool can help us to write code faster and
    improve the syntax in some scenarios. You will also do some demos where the AI
    will help you, allowing you to predict what action or statement you want to perform.
  prefs: []
  type: TYPE_NORMAL
