["```cs\nimplemented in a way where the configurations of the instances are not set in the main program. Instead, you just build the objects using the Build() method. This example simulates the creation of different room styles (a single room and a family room) in WWTravelClub:\n```", "```cs\nusing DesignPatternsSample.BuilderSample;\nusing System;\nnamespace DesignPatternsSample\n{\n    class Program\n    {\n        static void Main()\n        {\n          #region Builder Sample\n          Console.WriteLine(\"Builder Sample\");\n          var simpleRoom = new SimpleRoomBuilder().Build();\n          simpleRoom.Describe();\n\n          var familyRoom = new FamilyRoomBuilder().Build();\n          familyRoom.Describe();\n          #endregion\n          Console.ReadKey();\n        }\n    }\n} \n```", "```cs\n public class Room\n    {\n        private readonly string _name;\n        private bool wiFiFreeOfCharge;\n        private int numberOfBeds;\n        private bool balconyAvailable;\n        public Room(string name)\n        {\n            _name = name;\n        }\n        public Room WithBalcony()\n        {\n            balconyAvailable = true;\n            return this;\n        }\n        public Room WithBed(int numberOfBeds)\n        {\n            this.numberOfBeds = numberOfBeds;\n            return this;\n        }\n        public Room WithWiFi()\n        {\n            wiFiFreeOfCharge = true;\n            return this;\n        }\n    ...\n    } \n```", "```cs\nstatic void Main()\n{\n    #region Factory Sample\n// In this sample, we will use the Factory Method Pattern\n      // to create a Payment Service to charge a Brazilian\n      // customer\n    ProcessCharging(\n    PaymentServiceFactory.ServicesAvailable.Brazilian,\n    \"gabriel@sample.com\",\n     178.90m,\n     EnumChargingOptions.CreditCard);\n    // In this sample, we will use the Factory Method Pattern\n    // to create a Payment Service to charge an Italian\n// customer\n     ProcessCharging(\n     PaymentServiceFactory.ServicesAvailable.Italian,\n    \"francesco@sample.com\",\n     188.70m,\n     EnumChargingOptions.DebitCard);\n    #endregion\n    Console.ReadKey();\n}\nprivate static void ProcessCharging\n    (PaymentServiceFactory.ServicesAvailable serviceToCharge,\n string emailToCharge, decimal moneyToCharge,\n    EnumChargingOptions optionToCharge)\n{\n    PaymentServiceFactory factory = new PaymentServiceFactory();\n    IPaymentService service = factory.Create(serviceToCharge);\n    service.EmailToCharge = emailToCharge;\n    service.MoneyToCharge = moneyToCharge;\n    service.OptionToCharge = optionToCharge;\n    service.ProcessCharging();\n} \n```", "```cs\npublic sealed class SingletonDemo\n{\n    #region This is the Singleton definition\nprivate static SingletonDemo _instance;\n    public static SingletonDemo Current => _instance ??= new\n        SingletonDemo();\n    #endregion\npublic string Message { get; set; }\n    public void Print()\n    {\n        Console.WriteLine(Message);\n    }\n} \n```", "```cs\nSingletonDemo.Current.Message = \"This text will be printed by \" +\n  \"the singleton. Be careful with concurrency.\";\nSingletonDemo.Current.Print(); \n```", "```cs\nstatic void Main()\n{\n    Console.WriteLine(\"Proxy Sample\");\n    ExecuteProxySample(new ProxyRoomPicture());\n}\nprivate static void ExecuteProxySample(IRoomPicture roomPicture)\n{\n    Console.WriteLine($\"Picture Id: {roomPicture.Id}\");\n    Console.WriteLine($\"Picture FileName: {roomPicture.FileName}\");\n    Console.WriteLine($\"Tags: {string.Join(\";\", roomPicture.Tags)}\");\n    Console.WriteLine($\"1st call: Picture Data\");\n    Console.WriteLine($\"Image: {roomPicture.PictureData}\");\n    Console.WriteLine($\"2nd call: Picture Data\");\n    Console.WriteLine($\"Image: {roomPicture.PictureData}\");\n} \n```", "```cs\npublic static void Main()\n{\n    CreateHostBuilder().Build().Run();\n    Console.WriteLine(\"Host has terminated. Press any key to finish the App.\");\n    Console.ReadKey();\n}\npublic static IHostBuilder CreateHostBuilder() =>\n    Host.CreateDefaultBuilder()\n    .ConfigureServices((hostContext, services) =>\n    {\n          services.AddHostedService<HostedService>();\n          services.AddHostedService<MonitoringService>();\n    })\n    .ConfigureLogging((hostContext, configLogging) =>\n    {\n          configLogging.AddConsole();\n    }); \n```"]