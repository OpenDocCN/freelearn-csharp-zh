["```cs\ndelegate <return type> <delegate name> <parameter list>\n```", "```cs\npublic delegate string delegateexample (string strVariable);\n```", "```cs\ndelegate void MathDelegate(int i, double j);\npublic class Chapter5Samples\n{\n  // Declare a delegate\n  public void NamedMethod()\n  {\n    Chapter5Samples m = new Chapter5Samples();\n    // Delegate instantiation using \"Multiply\"\n    MathDelegate d = m.Multiply;\n    // Invoke the delegate object.\n    Console.WriteLine(\"Invoking the delegate using 'Multiply':\");\n    for (int i = 1; i <= 5; i++)\n    {\n      d(i, 5);\n    }\n    Console.WriteLine(\"\");\n\n  }\n  // Declare the associated method.\n  void Multiply(int m, double n)\n  {\n    System.Console.Write(m * n + \" \");\n  }\n}\n//Output:\nInvoking the delegate using 'Multiply':\n5 10 15 20 25\n```", "```cs\npublic void InvokeDelegate()\n{\n  HelperClass helper = new HelperClass();\n\n  // Instance method mapped to delegate:\n  SampleDelegate d = helper.InstanceMethod;\n  d();\n\n  // Map to the static method:\n  d = HelperClass.StaticMethod;\n  d();\n}\n\n//Create a new Helper class to hold two methods\n// Delegate declaration\ndelegate void SampleDelegate();\n\ninternal class HelperClass\n{\n  public void InstanceMethod()\n  {\n    System.Console.WriteLine(\"Instance Method Invoked.\");\n  }\n\n  static public void StaticMethod()\n  {\n    System.Console.WriteLine(\"Invoked function Static Method.\");\n  }\n}\n\n//Output: \nInvoked function Instance Method.\nInvoked function Static Method.\n```", "```cs\nwords.Where(w => w.Equals(\"apple\")).FirstOrDefault();\n```", "```cs\npublic void LambdaOperatorExample()\n{\n    string[] words = { \"bottle\", \"jar\", \"drum\" };\n    // apply Lambda expression to each element in the array\n    string searchedWord = words.Where(w => \n                            w.Equals(\"drum\")).FirstOrDefault();\n    Console.WriteLine(searchedWord);\n    // Get the length of each word in the array.\n    var query = from w in words\n                where w.Equals(\"drum\")\n                select w;\n\n    string search2 = query.FirstOrDefault();\n    Console.WriteLine(search2);\n}\n\n//Output:\ndrum\ndrum\n```", "```cs\npublic override string ToString() => $\"{fname} {lname}\".Trim();\n```", "```cs\nInput-Parameters => Expression\n```", "```cs\ndelegate void StringDelegate(string strVariable);\npublic void InvokeDelegatebyAnonymousFunction()\n{\n  //Named Method\n  StringDelegate StringDel = HelperClass.StringMethod;\n  StringDel(\"Chapter 5 - Named Method\");\n\n  //Anonymous method\n  StringDelegate StringDelB = delegate (string s) { Console.WriteLine(s); };\n  StringDelB(\"Chapter 5- Anonymous method invocation\");\n\n  //LambdaExpression\n  StringDelegate StringDelC = (X)=> { Console.WriteLine(X); };\n  StringDelB(\"Chapter 5- Lambda Expression invocation\");\n\n}\n\n//Output:\nChapter 5 - Named Method\nChapter 5- Anonymous method invocation\nChapter 5- Lambda Expression invocation\n```", "```cs\npublic void InvokeDelegatebyAnonymousFunction()\n{\n  //Named Method\n  StringDelegate StringDel = HelperClass.StringMethod;\n  StringDel(\"Chapter 5\");\n\n  //Anonymous method\n  StringDelegate StringDelB = delegate (string s) { Console.WriteLine(s); };\n  StringDelB(\"Chapter 5- Anonymous method invocation\");\n\n}\ninternal class HelperClass\n{\n  public void InstanceMethod()\n  {\n    System.Console.WriteLine(\"Instance method Invoked.\");\n  }\n\n  public static void StaticMethod()\n  {\n    System.Console.WriteLine(\"Invoked function Static Method.\");\n  }\n\n  public static void StringMethod(string s)\n  {\n    Console.WriteLine(s);\n  }\n}\n\n//Output:\nChapter 5\nChapter 5- Anonymous method invocation\n```", "```cs\nStringDelegate StringDelB = delegate (string s) { Console.WriteLine(s); };\n```", "```cs\n// Creating a handler for a click event.\nsampleButton.Click += delegate(System.Object o, System.EventArgs e)\n                   { System.Windows.Forms.MessageBox.Show(\n                     \"Sample Button Clicked!\"); };\n```", "```cs\nint n = 0;\nDel d = delegate() { System.Console.WriteLine(\"Copy #:{0}\", ++n); };\n```", "```cs\ninternal class ParentReturnClass\n{\n  public string Message { get; set; }\n}\n\ninternal class Child1ReturnClass : ParentReturnClass\n{\n  public string ChildMessage1 { get; set; }\n}\ninternal class Child2ReturnClass : ParentReturnClass\n{\n  public string ChildMessage2 { get; set; }\n}\n```", "```cs\npublic Child1ReturnClass ChildMehod1() \n{ \n    return new Child1ReturnClass \n    { \n        ChildMessage1 = \"ChildMessage1\" \n    }; \n}\npublic Child2ReturnClass ChildMehod2() \n{ \n    return new Child2ReturnClass \n    { \n        ChildMessage2 = \"ChildMessage2\" \n    }; \n}\n```", "```cs\ndelegate ParentReturnClass covrianceDelegate();\npublic void CoVarianceSample()\n{\n  covrianceDelegate cdel;\n  cdel = new HelperClass().ChildMehod1;\n  Child1ReturnClass CR1 = (Child1ReturnClass)cdel();\n  Console.WriteLine(CR1.ChildMessage1);\n  cdel = new HelperClass().ChildMehod2;\n Child2ReturnClass CR2 = (Child2ReturnClass)cdel();\nConsole.WriteLine(CR2.ChildMessage2);\n}\n\n//Output:\nChildMessage1\nChildMessage2\n```", "```cs\npublic void Method1(ParentReturnClass parentVariable1) \n{ \n    Console.WriteLine(((Child1ReturnClass)parentVariable1).ChildMessage1); \n}\n```", "```cs\ndelegate void contravrianceDelegate(Child1ReturnClass variable1);\n```", "```cs\npublic void ContraVarianceSample()\n{\n  Child1ReturnClass CR1 = new Child1ReturnClass() { ChildMessage1 = \"ChildMessage1\" };\n  contravrianceDelegate cdel = new HelperClass().Method1;\n  cdel(CR1);\n\n}\n\n//Output:\nChildMessage1\n```", "```cs\npublic delegate TResult Func<out TResult>();\n```", "```cs\npublic delegate void Action();\n```", "```cs\npublic delegate TResult Func<in T1,in T2,in T3,in T4,out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);\n```", "```cs\npublic delegate void Action<in T1,in T2,in T3,in T4>(T1 arg1, T2 arg2, T3 arg3, T4 arg4);\n```", "```cs\ndelegate void StringDelegate( string strVariable);\npublic void MulticastDelegate()\n{\n  StringDelegate StringDel = HelperClass.StringMethod;\n  StringDel += HelperClass.StringMethod2;\n  StringDel(\"Chapter 5 - Multicast delegate Method1\");\n}\n\n//Helper Class Methods\npublic static void StringMethod(string s)\n{\n  Console.WriteLine(s);\n}\n\npublic static void StringMethod2(string s)\n{\n  Console.WriteLine(\"Method2 :\" + s);\n}\n\n/Output:\nChapter 5 - Multicast delegate Method1\nMethod2 :Chapter 5 - Multicast delegate Method1\n```", "```cs\npublic delegate void EventHandler(object sender, EventArgs e);\n\n```", "```cs\npublic delegate void EventHandler<TEventArgs>(object sender, TEventArgs e);\n```", "```cs\npublic delegate void BankTransHandler(object sender, \nBankTransEventArgs e); // Delegate Definition \n    class Account\n    {\n        // Event Definition\n        public event BankTransHandler ProcessTransaction; \n        public int BALAmount;\n        public void SetInitialDeposit(int amount)\n        {\n            this.BALAmount = amount;\n            BankTransEventArgs e = new BankTransEventArgs(amount, \n                                   \"InitialBalance\");\n            // InitialBalance transaction made\n            OnProcessTransaction(e);\n        }\n        public void Debit(int debitAmount)\n        {\n            if (debitAmount < BALAmount)\n            {\n                BALAmount = BALAmount - debitAmount;\n                BankTransEventArgs e = new BankTransEventArgs(\n                                           debitAmount, \"Debited\");\n                OnProcessTransaction(e); // Debit transaction made \n            }\n        }\n        public void Credit(int creditAmount)\n        {\n            BALAmount = BALAmount + creditAmount;\n            BankTransEventArgs e = new BankTransEventArgs(\n                                       creditAmount, \"Credited\");\n            OnProcessTransaction(e); // Credit transaction made\n        }\n        public void ShowBalance()\n        {\n            BankTransEventArgs e = new BankTransEventArgs(\n                                       BALAmount, \"Total Balance\");\n            OnProcessTransaction(e); // Credit transaction made\n        }\n        protected virtual void OnProcessTransaction(\n                                       BankTransEventArgs e)\n        {\n            ProcessTransaction?.Invoke(this, e);\n        }\n    }\n```", "```cs\npublic class BankTransEventArgs : EventArgs\n    {\n        private int _transactionAmount;\n        private string _transactionType;\n        public BankTransEventArgs(int amt, string type)\n        {\n            this._transactionAmount = amt;\n            this._transactionType = type;\n        }\n        public int TransactionAmount\n        {\n            get\n            {\n                return _transactionAmount;\n            }\n        }\n        public string TranactionType\n        {\n            get\n            {\n                return _transactionType;\n            }\n        }\n    }\n```", "```cs\npublic class EventSamples\n{\n private void AlertCustomer(object sender, BankTransEventArgs e)\n {\n  Console.WriteLine(\"Your Account is {0} for Rs.{1} \", \n                     e.TranactionType, e.TransactionAmount);\n }\n public void Run()\n {\n  Account bankAccount = new Account();\n  bankAccount.ProcessTransaction += new \n      BankTransHandler(AlertCustomer);\n  bankAccount.SetInitialDeposit(5000);\n  bankAccount.ShowBalance();\n  bankAccount.Credit(500);\n  bankAccount.ShowBalance();\n  bankAccount.Debit(500);\n  bankAccount.ShowBalance();\n }\n}\n```", "```cs\n//Output:\nYour Account is InitialBalance for Rs.5000\nYour Account is Total Balance for Rs.5000\nYour Account is Credited for Rs.500\nYour Account is Total Balance for Rs.5500\nYour Account is Debited for Rs.500\nYour Account is Total Balance for Rs.5000\n```"]