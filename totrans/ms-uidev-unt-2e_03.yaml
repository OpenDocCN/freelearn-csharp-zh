- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing Mobile User Interfaces
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most challenging aspects of designing for mobile interfaces is the
    sheer amount of possible aspect ratios of mobile devices. Mobile devices include
    phones and tablets. Phones tend to be much longer than tablet devices, and a UI
    that fits perfectly on a phone may overlap or look squished when put on a tablet.
    On top of awkward resolutions, there are also weird quirks that will affect your
    UI, such as the notch in the iPhone and the folding screens of the various Samsung
    Galaxy devices.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile devices also have a different set of inputs and interactions. For example,
    on a mobile device, you can touch the screen at multiple locations simultaneously,
    but on a PC, you can only click with your mouse in one place at a time. Mobile
    devices require on-screen keyboards and other peripherals to perform the same
    actions that you might perform on a console or PC game.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will discuss the design considerations around the various
    quirks of mobile devices and cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to simulate your game at various mobile resolutions and build at a specific
    orientation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recommended button sizes for mobile games
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing invisible buttons to create tap areas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Laying out interactions based on the thumb zone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How multi-touch input plays a part in mobile UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use the accelerometer and gyroscope
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, you will need Unity 2020.3.26f1 or later.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: When describing mobile interfaces, I will mostly focus on iOS and Android operating
    system phones and tablets. However, occasionally I will reference Microsoft, as
    they do create a series of tablet devices that, despite running Windows operating
    systems, do have touch capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the resolution, aspect ratio, and orientation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you design a mobile UI, you’ll want to make sure it makes sense and is
    visible at various resolution sizes and aspect ratios. You also may want to allow
    for different screen orientations. In [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085),
    I will discuss how you can develop user interfaces that scale to multiple resolutions
    and layouts, mechanically. But for now, let’s just review how resolution, aspect
    ratio, and orientation can affect your design and how to view your game with the
    various screen settings.
  prefs: []
  type: TYPE_NORMAL
- en: Setting the resolution in the Game view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recall in [*Chapter 1*](B18327_01.xhtml#_idTextAnchor014), we looked at how
    you can change the resolution and aspect ratio of your **Game** view. When you
    change your game’s build settings to iOS or Android, a new list of presets will
    be provided to you. For example, in the following image, you can see the list
    of possibilities when the **Build** is set to iOS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1: iOS resolutions in Game view](img/Figure_2.01_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: iOS resolutions in Game view'
  prefs: []
  type: TYPE_NORMAL
- en: It will not show all the possible iOS resolutions, but many of the common newer
    ones. You can find a more complete list at [https://www.ios-resolution.com/](https://www.ios-resolution.com/).
    Similarly, not all Android resolutions will be listed when switching to an Android
    build, especially considering there are significantly more Android resolutions.
    However, you can find more information about Android screen resolutions at [https://developer.android.com/guide/practices/screens_support.xhtml#testing](https://developer.android.com/guide/practices/screens_support.xhtml#testing).
  prefs: []
  type: TYPE_NORMAL
- en: The Device Simulator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, setting the **Game** view’s aspect isn’t sufficient to fully see
    how your UI will appear on a device. For example, the controversial notch introduced
    in the iPhone X doesn’t display in the **Game** view and can throw a huge wrench
    in your most carefully designed UIs. However, you can see this notch and how it
    overlaps with your UI using the **Device Simulator**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable the Device Simulator, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download the Device Simulator Package from **Package Manager**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To do so, go to **Window** | **Package Manager** and search for **Device Simulator**
    in the list. It’s highly likely you won’t see it in the list initially. If you
    do not see it, make sure that the packages being displayed are those from **Unity
    Registry**, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.2: Unity Registry packages](img/Figure_2.2_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Unity Registry packages'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you still do not see it in the list, you have to enable preview packages.
    Click on the settings cog in the top-right corner, select **Advanced Project Settings**,
    and then select **Enable Preview Packages**, as shown in *Figure 2**.3*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.3: Enable Preview Packages](img/Figure_2.3_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: Enable Preview Packages'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you locate **Device Simulator** in the list, install it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.4: Install Device Simulator](img/Figure_2.4_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: Install Device Simulator'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the **Device Simulator** is downloaded, you can change your **Game**
    view to reflect a simulator by selecting the **Game** dropdown and then selecting
    **Simulator**, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.5: Select Simulator view](img/Figure_2.05_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: Select Simulator view'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you can select multiple devices from the dropdown to simulate. For example,
    I can select an iPad 5th generation or an iPhone X, where the iPhone X shows the
    dreaded notch:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.6: Different devices on Simulator](img/Figure_2.06_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: Different devices on Simulator'
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, you can select **Safe Area** to see the best places to lay out
    your UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.7: Safe Area](img/Figure_2.07_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Safe Area'
  prefs: []
  type: TYPE_NORMAL
- en: Building for a specific orientation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may have noticed in *Figure 2**.1* that there are both landscape and portrait
    options for each resolution. This allows you to view your game depending on which
    orientation you want to support while developing.
  prefs: []
  type: TYPE_NORMAL
- en: 'When building for mobile devices, you can’t specify resolution and aspect ratio
    and will instead have to support all resolutions and aspect ratios. However, you
    can choose between screen orientations on mobile devices. There are two different
    orientations: **Landscape** and **Portrait**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Games built so that they are wider than they are tall are said to have landscape
    resolution. Games built taller than they are wide are said to have portrait resolution.
    For example, a **16:9** aspect ratio would be a landscape resolution, and a **9:16**
    aspect ratio would be a portrait resolution, as illustrated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8: Landscape versus portrait Orientation](img/Figure_2.8_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: Landscape versus portrait Orientation'
  prefs: []
  type: TYPE_NORMAL
- en: 'So, while you can’t choose the exact aspect ratio your mobile game will build
    to, you can choose the orientation, which forces the aspect ratio to be either
    wider or taller. You can set the orientation by navigating to **Edit** | **Project
    Settings** | **Player Settings** and selecting the mobile device. If you are building
    for both iOS and Android, you will not have to set these properties for both.
    As you can see from the following screenshot, the asterisk next to the property
    of **Default Orientation** states that the settings are shared between multiple
    platforms:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9: Resolution and Orientation Settings for mobile](img/Figure_2.09_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: Resolution and Orientation Settings for mobile'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can set the **Default Orientation** to either **Auto Rotation** or one
    of the other rotations, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10: Orientation Options for mobile](img/Figure_2.10_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: Orientation Options for mobile'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity defines the following orientations as the following rotations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11: Mobile orientation rotations](img/Figure_2.11_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: Mobile orientation rotations'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you select a rotation other than **Auto Rotation** as the **Default Orientation**,
    the game will only play at that orientation on the device. If you select **Auto
    Rotation**, you will have the option to select between multiple orientations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12: Auto Rotation options](img/Figure_2.12_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: Auto Rotation options'
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, it is best to choose only the **Landscape** orientations or only
    the **Portrait** orientations, but not all four. Generally, allowing all four
    orientations will cause issues with the game›s UI’s ability to scale appropriately.
  prefs: []
  type: TYPE_NORMAL
- en: Players tend to prefer to be able to rotate their games (especially if they’re
    like me and like to play games in bed while their phone is charging, thus being
    forced to face a specific direction), so unless you have a good reason to stop
    rotation, it’s a good idea to enable both **Portrait** and **Portrait Upside Down**
    or **Landscape Right** and **Landscape Left**.
  prefs: []
  type: TYPE_NORMAL
- en: Recommended button sizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When creating a mobile game, pretty much all of your interactions are controlled
    by button and screen taps. Buttons that are a reasonable size on a PC or console
    game may be too small for a mobile game. Therefore, you’ll want to make sure to
    design your buttons so that they are still visible on the smaller screen and large
    enough to be touched by a finger.
  prefs: []
  type: TYPE_NORMAL
- en: Apple, Google, and Microsoft all have specific recommendations for the size
    of a button’s *touchable area* when designing for their devices. Apple recommends
    that buttons be 44 points x 44 points. Google recommends 48 dp x 48 dp with 8
    dp spacing between two buttons. Microsoft recommends 9 mm x 9 mm with 2 mm padding
    between two buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find information about designing touch/hit areas for each mobile platform
    at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple: [https://developer.apple.com/design/human-interface-guidelines/layout](https://developer.apple.com/design/human-interface-guidelines/layout)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Google: [https://material.io/design/usability/accessibility.xhtml#layout-and-typography](https://material.io/design/usability/accessibility.xhtml#layout-and-typography)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Microsoft: [https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting](https://docs.microsoft.com/en-us/windows/uwp/design/input/guidelines-for-targeting)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Annoyingly, all of these recommendations are in different units of measurement.
    So, what do these numbers even mean in terms of design? How do you make sure your
    buttons are 9 mm x 9 mm or 44 points x 44 points? And why are they talking about
    these measurements in different units? It’s almost like they are all competitors
    and don’t want to work nicely together! To answer these questions, let’s first
    look at what the various units of measurement represent:'
  prefs: []
  type: TYPE_NORMAL
- en: A **point** (**pt**) is used to measure what represents a physical measurement
    on a screen. 1 point is 1/72 of an international inch or 0.3528 mm. It is primarily
    used in typography and print media. When working with a program such as **Illustrator**,
    creating an object in points and then exporting your image at 72 ppi makes pixels
    and points the same size. Points and pixels are not the same, except when exporting
    at 72 ppi.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Density-independent pixels** (**dp**), pronounced “dips”, is a unit of measurement
    that was created to maintain consistently sized items on screens with different
    **dpi** (**dots per inch**) values. A density-independent pixel measures the size
    of 1 pixel on a 160 dpi screen. Using this conversion is like saying it would
    appear at this size on a 160 dpi screen, and it should appear as the exact same
    physical size on any other screen. You can read more about density-independent
    pixels at [https://developer.android.com/training/multiscreen/screendensities](https://developer.android.com/training/multiscreen/screendensities).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When **millimeters** (**mm**) are used to describe a button size, the size is
    a physical representation of the button on the screen. So, if you were to take
    a ruler and hold it up to the screen, it would be consistent with this unit of
    measurement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OK, so they all represent some physical unit of measurement on the screen. That
    makes things a little easier. Let’s convert all of these values to millimeters
    so we can compare them in a unit of measurement that is a bit easier to conceptualize.
    I’m also going to convert them to points, since you can use points in a program,
    such as Illustrator, to create your button art.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to convert any of these units of measurement and you’re not too
    keen on the idea of doing math, googling *convert points to mm* will bring up
    a nice conversion calculator for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use the following converter tool – it is really handy for bouncing
    between all of the different units of measurement: [http://angrytools.com/android/pixelcalc/](http://angrytools.com/android/pixelcalc/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following chart, I rounded to the nearest integer the measurement for
    points, and to the nearest tenth for millimeters, to make things easier. We can
    use this image as a way to compare the different sizes (the image has been scaled
    and the sizes may not translate to their real-world measurements):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13: Recommended minimum tappable button sizes](img/Figure_2.13_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: Recommended minimum tappable button sizes'
  prefs: []
  type: TYPE_NORMAL
- en: So, which size should you use? It’s up to you. You don’t have to use their recommendations,
    but I personally go with the Apple recommendation since it is the largest and
    therefore meets the recommendations of the other two. Additionally, the larger
    the button is, the more people will be able to easily touch it. In [*Chapter 4*](B18327_04.xhtml#_idTextAnchor054),
    we will discuss designing our UI so that the maximum amount of people will be
    able to interact with it.
  prefs: []
  type: TYPE_NORMAL
- en: Another consideration is whether your game will be played with thumbs or with
    fingers. If the game will be played with thumbs, you’ll want bigger buttons because
    thumbs are bigger! The numbers described previously are minimum recommendations,
    so they would be used for a finger tap, not a thumb tap.
  prefs: []
  type: TYPE_NORMAL
- en: So, how do you ensure that your buttons are always the size you want in your
    game? The **Canvas Scaler** component! In [*Chapter 6*](B18327_06.xhtml#_idTextAnchor085),
    we will discuss how ensuring a button of a specified size, regardless of resolution,
    can be achieved by setting the **Canvas Scaler** component’s **UI Scale Mode**
    to **Constant Physical Size**. You have the option to have your Canvas’s measurement
    units be in millimeters or points (as well as a few other units).
  prefs: []
  type: TYPE_NORMAL
- en: My recommendation when designing for mobile devices is to have multiple devices
    on hand to test at various resolutions. Play the game and see how it feels to
    you. Ask people with smaller and larger hands than yours to play. Even after following
    the minimum guidelines specified by the various mobile platforms, you may still
    find your buttons are too small for what you need.
  prefs: []
  type: TYPE_NORMAL
- en: Google and Microsoft also specify visible sizes that they recommend, so you
    can have a smaller button image as long as the button’s hit area is the recommended
    size. If you want a button that is smaller visually but has a larger hit area,
    instead of attaching the button component to the tiny piece of art, attach it
    to a larger parent hit area and change the target image of the button to the tiny
    art.
  prefs: []
  type: TYPE_NORMAL
- en: Full screen/screen portion taps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many mobile games have a single input whereby you can tap anywhere on the screen
    to make an action happen. For example, endless runners tend to allow the player
    to tap or press and hold anywhere on the screen to jump. To achieve this, you
    only have to add an invisible button that covers the whole screen. If you have
    another UI that receives inputs, it needs to be in front of the full-screen button
    so that the button does not block the inputs to the other UI items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some games require that you tap on specific regions of the screen to perform
    specific actions. For example, I created a game called Sequence Seekers for my
    doctoral dissertation. This game included a down-the-mountain mode in which the
    player had to tap the left or right-hand side of the screen to move left or right
    in the game. I achieved this by adding invisible buttons that covered the two
    halves of the screen, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14: Using invisible buttons to create tab zones](img/Figure_2.14_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: Using invisible buttons to create tab zones'
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 9*](B18327_09.xhtml#_idTextAnchor213) and [*Chapter 11*](B18327_11.xhtml#_idTextAnchor292),
    we’ll discuss how to implement such buttons as well as how to implement floating
    D-Pads and joysticks.
  prefs: []
  type: TYPE_NORMAL
- en: The thumb zone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When designing a mobile game, it’s important to consider how the player will
    hold the device. You don’t want to put your UI in areas that will be difficult
    for the player to reach. Players tend to prefer to hold and play with one hand.
    Not all games allow for this, but if possible, you want to allow your players
    to do so. How do you know whether your UI is in an area that’s reachable by the
    thumb? Put the UI in the thumb zone! Essentially, the thumb zone is the area of
    the phone that is comfortable for the player to reach when holding the phone with
    one hand. You can find the thumb zone on your particular phone by holding the
    phone and easily moving your thumb around without having to move your hand.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following blog post offers a really great explanation of the thumb zone,
    along with a handy (no pun intended) template for finding the thumb zone on various
    devices: [https://www.scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens/](https://www.scotthurff.com/posts/how-to-design-for-thumbs-in-the-era-of-huge-screens/)'
  prefs: []
  type: TYPE_NORMAL
- en: The phones referenced in the link are a bit on the old side, but it is still
    one of the best resources related to the thumb zone available on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: As a lefty, I implore you to consider making the game as easy to play with the
    left hand as it is for the right when designing with the thumb zone in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Other mobile inputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When designing for mobile, it’s important to remember that the input works a
    little differently than it does with a computer or console game. Most of the input
    on a mobile is controlled by the touchscreen, accelerometer, or gyroscope. This
    opens up a different set of design choices for you when creating mobile games.
  prefs: []
  type: TYPE_NORMAL
- en: Touchscreen devices can generally access multiple touches. You can use multi-touch
    for different types of interactions, but the most common usage of multi-touch
    allows the player to pinch-to-zoom. In [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147),
    we will discuss how to use multi-touch input to create pan and pinch-to-zoom functionality
    in a game.
  prefs: []
  type: TYPE_NORMAL
- en: Most mobile devices have a built-in accelerometer and many also have a gyroscope.
    Without getting too technical in describing how they actually work, the difference
    between the accelerometer and the gyroscope is what they measure. The accelerometer
    measures acceleration within the 3D coordinate system and the gyroscope measures
    rotation. We will review examples of how to use the accelerometer and gyroscope
    in [*Chapter 8*](B18327_08.xhtml#_idTextAnchor147).
  prefs: []
  type: TYPE_NORMAL
- en: Device-specific resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are making a UI for a mobile device, you may want to use the device-specific
    UI elements to maintain a consistent style. You can find various art assets and
    templates for designing UI for each mobile platform at the following locations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Apple: [https://developer.apple.com/design/resources/](https://developer.apple.com/design/resources/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Android: [https://developer.android.com/design/index.xhtml](https://developer.android.com/design/index.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: [https://developer.microsoft.com/en-us/windows/apps/design](https://developer.microsoft.com/en-us/windows/apps/design%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a UI for mobile devices isn’t too different from creating a UI for
    a console or computer, but it is different in that you can accept more than one
    screen input and can also access information about the device’s accelerometer
    and gyroscope. Additionally, resolution plays an important part in your game’s
    development, since mobile devices have a huge range of resolutions and aspect
    ratios.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll discuss the design considerations for developing
    UI for XR applications, including VR, MR, and AR.
  prefs: []
  type: TYPE_NORMAL
