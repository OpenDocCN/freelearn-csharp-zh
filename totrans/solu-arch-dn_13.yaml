- en: '*Chapter 10*: Designing and Implementing Microsoft DevOps Solutions'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第10章*：设计和实现Microsoft DevOps解决方案'
- en: In the previous chapter, we learned about the key characteristics of modern
    web solutions. We also explored the project structure of the three main frontend
    frameworks and provided a quick comparison. We then learned the three hosting
    options in Azure and how to choose the best hosting approach for our solution.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了现代Web解决方案的关键特性。我们还探讨了三个主要前端框架的项目结构，并提供了快速比较。然后我们学习了Azure中的三种托管选项以及如何为我们的解决方案选择最佳托管方法。
- en: In this chapter, we will learn how to effectively plan and manage **DevOps**
    processes while building Microsoft solutions. Azure DevOps offers a set of modern
    tools that allow us to plan smarter and develop a product faster. It also provides
    solid collaboration between the team members to deliver better quality products.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在构建Microsoft解决方案的同时，有效地规划和管理工作流程。Azure DevOps提供了一套现代工具，使我们能够更智能地规划并更快地开发产品。它还提供了团队成员之间坚实的协作，以交付质量更高的产品。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring agile planning with **Azure Boards**
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**Azure Boards**探索敏捷规划
- en: Learning about source control
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解源代码管理
- en: Understanding Git repositories, along with branching and pull requests
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Git仓库，包括分支和拉取请求
- en: Getting to know **Azure Artifacts**
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解**Azure Artifacts**
- en: Understanding the logic behind the CI/CD practices
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解CI/CD实践的逻辑
- en: By the end of this chapter, we will have learned how to make use of DevOps to
    build, test, and deploy our applications using modern software development practices.
    Moreover, we will know about Work Items, and we will have learned about **Git**
    and its main capabilities. We will have also explored how to manage packages using
    Azure Artifacts, and also understood the **continuous integration**/**continuous
    development** (**CI**/**CD**) practices.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将学习如何利用DevOps使用现代软件开发实践构建、测试和部署我们的应用程序。此外，我们将了解工作项，并学习**Git**及其主要功能。我们还将探索如何使用Azure
    Artifacts管理包，以及理解**持续集成**/**持续开发**（**CI**/**CD**）实践。
- en: Now, let's take a look at the key characteristics of modern web solutions.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看现代Web解决方案的关键特性。
- en: Exploring Agile planning with Azure Boards
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Boards探索敏捷规划
- en: Azure Boards is a service provided by **Microsoft** as part of the Azure DevOps
    service. It provides a set of features and capabilities for managing the entire
    life cycle of the software project. It includes tools for managing **Work Items**,
    **Sprints**, and **Backlogs**. Moreover, it provides end-to-end predefined and
    customizable dashboards, allowing us to dig deeper into the big picture of the
    project's activities, alongside essential **KPIs** and metrics, to understand
    how the project is progressing.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Boards是**Microsoft**作为Azure DevOps服务的一部分提供的一项服务。它提供了一套用于管理软件项目整个生命周期的功能和能力。它包括管理**工作项**、**冲刺**和**待办事项**的工具。此外，它还提供端到端预定义和可定制的仪表板，使我们能够深入了解项目活动的全貌，同时查看关键的**KPI**和指标，以了解项目进展情况。
- en: Let's start by exploring the core features of Azure Boards.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从探索Azure Boards的核心功能开始。
- en: Introducing Work Items
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 介绍工作项
- en: '**Work Items** are the core components in Azure DevOps and can help our Agile
    team manage their daily work, organize Sprints, and prioritize tasks in Backlogs.
    A Work Item can be a general task, an issue, or a requirement. The following screenshot
    shows the landing page of **Work Items**:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作项**是Azure DevOps的核心组件，可以帮助我们的敏捷团队管理日常工作，组织冲刺，并在待办事项中优先处理任务。工作项可以是一般任务、问题或需求。以下截图显示了**工作项**的主页：'
- en: '![Figure 10.1: Work Items landing page](img/Figure_10.01_B17366.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1：工作项主页](img/Figure_10.01_B17366.jpg)'
- en: 'Figure 10.1: Work Items landing page'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：工作项主页
- en: The preceding screenshot represents the home page of all **Work Items**, where
    we can filter items based on specific criteria. We can also assign items, add
    new items, and manage existing ones. This page provides every person that's working
    on the project with a complete view of the progress, along with the status of
    each item and who is doing what. We can filter to see tasks that were planned
    to be delivered in the next **Sprints**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张截图代表所有**工作项**的主页，我们可以根据特定标准筛选项目。我们还可以分配项目、添加新项目和管理现有项目。此页面为每个参与项目的人提供了一个完整的进度视图，包括每个项目的状态以及谁在做什么。我们可以筛选以查看计划在下一个**冲刺**中交付的任务。
- en: We can also specify the dependencies between the items to break large tasks
    down into smaller, more manageable items, as well as create queries and save them
    for later use. A query is a filtered view of all the **Work Items**. For example,
    we can create a query to display the active tasks, or a query to display tasks
    that have been assigned to a particular team member.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以指定项目之间的依赖关系，将大型任务分解成更小、更易于管理的项目，以及创建查询并保存以供以后使用。查询是所有**工作项**的过滤视图。例如，我们可以创建一个查询来显示活动任务，或者创建一个查询来显示分配给特定团队成员的任务。
- en: 'It is easy to create a new Work Item. As shown in the following screenshot,
    we just need to click on **New Work Item** and then choose the type; that is,
    **Epic**, **Issue**, or **Task**:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新的工作项很容易。如图所示，我们只需点击**新建工作项**，然后选择类型；即**史诗级任务**、**问题**或**任务**：
- en: '![Figure 10.2: Action menu for creating a new Work Item](img/Figure_10.02_B17366.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2：创建新工作项的动作菜单](img/Figure_10.02_B17366.jpg)'
- en: 'Figure 10.2: Action menu for creating a new Work Item'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：创建新工作项的动作菜单
- en: 'In the action menu, we can see three main types of Work Items:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在动作菜单中，我们可以看到三种主要类型的工作项：
- en: '**Epic**: This represents a large item that''s required for the product to
    function. It can be broken down into smaller user stories. A user story is a specific
    Work Item within **Epic**. For example, let''s assume we have received a request
    to implement a login mechanism for an e-commerce website. In this case, the Epic
    represents this request. The user stories here could be **Login with Email**,
    **Login with Google**, **Login with Facebook**, and **Forgot password**.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**史诗级任务**: 这代表了一个对产品功能至关重要的较大项目。它可以被分解成更小的用户故事。用户故事是**史诗级任务**中的一个特定工作项。例如，假设我们收到了一个为电子商务网站实现登录机制的需求。在这种情况下，史诗级任务代表了这个需求。这里的用户故事可能包括**通过电子邮件登录**、**通过谷歌登录**、**通过Facebook登录**和**忘记密码**。'
- en: '**Feature**: This represents the bulk of the functionality that fulfils users''
    needs. A **Feature** is a collection of user stories that delivers business value
    and the context of the software product.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**功能**: 这代表满足用户需求的功能的主体。**功能**是一系列用户故事，它提供了业务价值和软件产品的上下文。'
- en: '`role-feature-benefit` template: as a (*user role*), I want (*an action/or
    goal*) so that (*a benefit/or reason*); for example: as a (*customer*), I want
    (*a shopping cart functionality*) so that (*I can buy items and pay online*).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`角色-功能-收益`模板：作为一个(*用户角色*)，我想要(*一个动作/目标*)以便(*一个收益/原因*)；例如：作为一个(*客户*)，我想要(*购物车功能*)以便(*我可以在线购买商品并支付*)。'
- en: '**Issue**: This represents bugs, code defects, and software issues that we
    may capture while developing the product.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**问题**: 这代表了我们可能在开发产品过程中捕获的bug、代码缺陷和软件问题。'
- en: '**Task**: This represents a Work Item that has been planned as part of building
    the product. This can be either a result of an issue or requirements, including
    requirement analysis, development, or testing.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**任务**: 这代表了一个作为构建产品一部分计划的工作项。这可能是由问题或需求引起的，包括需求分析、开发或测试。'
- en: 'The following screenshot shows the details page of a sample Work Item:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了样本工作项的详情页面：
- en: '![Figure 10.3: A bug item details page](img/Figure_10.03_B17366.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3：bug项目详情页面](img/Figure_10.03_B17366.jpg)'
- en: 'Figure 10.3: A bug item details page'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：bug项目详情页面
- en: On the details page, we can see that every Work Item has a title with a unique
    ID, status, and iteration, along with the steps to reproduce if it is a defect,
    or an item description if it is a requirement.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在详情页面，我们可以看到每个工作项都有一个带有唯一ID的标题、状态和迭代，如果它是缺陷，则包括复现步骤，如果它是需求，则包括项目描述。
- en: We can also see the comments that are attached to the Work Item. These represent
    the discussion happening between the team members about this Work Item. We can
    follow a Work Item to receive notifications whenever there is an update. We can
    also assign it to a team member, as well as link it to another Work Item by, for
    example, linking an issue to a task or Epic.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以看到附加到工作项上的评论。这些代表了团队成员之间关于此工作项的讨论。我们可以跟踪工作项，以便在更新时接收通知。我们还可以将其分配给团队成员，例如，通过将问题链接到任务或史诗级任务来链接到另一个工作项。
- en: In the next section, we will learn how to use Work Items to report and organize
    work.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习如何使用工作项来报告和组织工作。
- en: Exploring Boards, Backlogs, and Sprints
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 探索看板、待办事项和冲刺
- en: In the previous section, we learned about Work Items, so let's learn how to
    use them in Boards, Backlogs, and Sprints to organize and track team deliverables.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们学习了关于工作项的内容，所以让我们学习如何在看板、待办事项和冲刺中使用它们来组织和跟踪团队的可交付成果。
- en: 'The following screenshot shows a sample board that was associated with a project
    upon its creation:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了创建项目时关联的示例板：
- en: '![Figure 10.4: Sample Kanban Board](img/Figure_10.04_B17366.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4：示例看板](img/Figure_10.04_B17366.jpg)'
- en: 'Figure 10.4: Sample Kanban Board'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：示例看板
- en: Every time we create a new project, there is a preconfigured **Kanban Board**
    that is created and linked to the project so that we can visualize the progress
    of work items. This board is fully customizable. We can drag and drop items from
    one category to another to reflect the current situation of the project. We can
    also organize tasks by status, ownership, Sprints, or any other criteria.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我们创建一个新的项目时，都会创建一个预配置的**看板**，并将其链接到项目，以便我们可以可视化工作项的进度。这个板是完全可定制的。我们可以将项目从一个类别拖放到另一个类别，以反映项目的当前情况。我们还可以根据状态、所有权、冲刺或其他任何标准来组织任务。
- en: '**Backlogs** help us keep things organized according to priorities. As shown
    in the following screenshot, Backlogs provide a flat view of the Work Items, while
    Boards display them as cards:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**待办事项**帮助我们根据优先级来保持事物组织有序。如图所示，待办事项提供了一个平铺的工作项视图，而看板则将它们显示为卡片：'
- en: '![Figure 10.5: Backlogs list view](img/Figure_10.05_B17366.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5：待办事项列表视图](img/Figure_10.05_B17366.jpg)'
- en: 'Figure 10.5: Backlogs list view'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：待办事项列表视图
- en: The product backlog should reflect the plan and roadmap of what we plan to deliver
    in the upcoming Sprints.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 产品待办事项应该反映我们计划在即将到来的冲刺中交付的计划和路线图。
- en: 'Finally, **Sprints** are the heartbeat of DevOps as they represent the iterations
    of an Agile project. A Sprint has its own **Capacity** planning and **Taskboard**.
    It should be short in terms of duration, typically between 1 to 4 weeks; during
    this period, there must be a set of Work Items that should be accomplished by
    the team. The following screenshot shows a sample **Sprint** view:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**冲刺**是DevOps的脉搏，因为它们代表了敏捷项目的迭代。一个冲刺有自己的**容量**计划和**任务板**。在持续时间上应该较短，通常为1到4周；在这个期间，必须有一系列工作项，这些工作项应由团队完成。以下截图显示了示例**冲刺**视图：
- en: '![Figure 10.6: Sprint view](img/Figure_10.06_B17366.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6：冲刺视图](img/Figure_10.06_B17366.jpg)'
- en: 'Figure 10.6: Sprint view'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：冲刺视图
- en: In the preceding screenshot, we can see how the tasks are organized in the **Taskboard**
    area to reflect the plan of a **Sprint**. We can drag and drop items between the
    different categories, and we can check the overall progress of the team in this
    **Sprint**.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们可以看到任务是如何在**任务板**区域中组织的，以反映**冲刺**的计划。我们可以在不同的类别之间拖放项目，并且可以检查这个**冲刺**中团队的总体进度。
- en: 'Important Note:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: The Microsoft documentation for learning about and understanding everything
    related to Azure Boards can be found at [https://docs.microsoft.com/en-us/azure/devops/boards/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/boards/?view=azure-devops).
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 了解和了解与Azure Boards相关的所有内容的Microsoft文档可以在[https://docs.microsoft.com/en-us/azure/devops/boards/?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/boards/?view=azure-devops)找到。
- en: In this section, we learned how to define the project roadmap and plan Work
    Items. This helps our team break down complex solutions into manageable workloads
    by using a robust platform from Azure DevOps. In the next section, we will learn
    about source control in Azure DevOps.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何定义项目路线图和计划工作项。这有助于我们的团队通过使用Azure DevOps的强大平台将复杂解决方案分解为可管理的负载。在下一节中，我们将学习Azure
    DevOps中的源代码控制。
- en: Getting started with source control
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用源代码控制
- en: '**Source control** (also known as **version control**) is an essential part
    of DevOps. It is a collaboration platform that can be used by the development
    team to track and manage changes in the source code. It provides a historical
    version of each source code file in the project. It also helps resolve conflicts
    when merging changes from multiple developers. **Azure Repos** is a set of version
    control tools that we can use to manage our code.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**源代码控制**（也称为**版本控制**）是DevOps的一个基本组成部分。它是一个协作平台，开发团队可以使用它来跟踪和管理源代码中的更改。它为项目中的每个源代码文件提供历史版本。它还有助于在合并来自多个开发者的更改时解决冲突。**Azure
    Repos**是一组版本控制工具，我们可以使用它来管理我们的代码。'
- en: 'Here is a list of source control benefits:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一份源代码控制的好处列表：
- en: Ability to create multiple workflows for development, production, and testing.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够为开发、生产和测试创建多个工作流程。
- en: There is a lot of collaboration that must be done by the development team to
    deliver the product, especially at the source code level, to maintain a common
    repository when multiple developers are working on the same project.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在多个开发者共同参与同一项目时，为了交付产品，开发团队必须进行大量的协作，尤其是在源代码层面，以维护一个共同的仓库。
- en: Source control supports us tracking and managing all the changes that have been
    made to the code by multiple team members. This is very important, especially
    when we need to resolve conflicts when multiple developers try to modify the same
    file.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制支持我们跟踪和管理多个团队成员对代码所做的所有更改。这在需要解决多个开发者尝试修改同一文件时产生的冲突时尤为重要。
- en: Maintains a history of changes by allowing us to retrieve the complete history
    of every file in the repository.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过允许我们检索仓库中每个文件的完整历史记录来维护更改的历史。
- en: Ability to label the source code to keep track of the product version, especially
    when we have multiple releases. We can also create branches to manage the development
    activities between the production and development environments.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 能够对源代码进行标记以跟踪产品版本，尤其是在我们有多版本发布时。我们还可以创建分支来管理生产环境和开发环境之间的开发活动。
- en: 'Azure Repos provides two types of version control:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Azure Repos 提供两种类型的版本控制：
- en: '**Team Foundation Version Control** (**TFVC**): The code history is centralized
    on the server and team members need to be connected to check in.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**团队基础版本控制**（**TFVC**）：代码历史记录集中存储在服务器上，团队成员需要连接到服务器进行提交。'
- en: '**Git**: The code history is distributed on each team member''s machine, where
    they can commit changes locally.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：代码历史记录分布在每个团队成员的机器上，他们可以在本地提交更改。'
- en: Scaling Git for enterprise DevOps
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 Git 以支持企业 DevOps
- en: Git is one of the most essential version control systems that is adopted by
    development teams and companies. Git is a distributed version control system,
    which means the local copy of the source code that's stored on each machine represents
    a complete version control repository.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是开发团队和公司采用的最重要版本控制系统之一。Git 是一个分布式版本控制系统，这意味着存储在每个机器上的源代码本地副本代表了一个完整的版本控制仓库。
- en: In this section, we will learn more about Git and how to structure repositories,
    manage branches, and collaborate with pull requests.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解更多关于 Git 以及如何结构化仓库、管理分支和通过拉取请求进行协作。
- en: Structuring Git repos
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结构化 Git 仓库
- en: 'There are two types of repositories that we can use with Git:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用两种类型的仓库与 Git 一起使用：
- en: '**Mono-repo**: More than one project is stored in a single repository'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单仓库**：多个项目存储在单个仓库中'
- en: '**Multi-repo**: Each project has its own repository'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多仓库**: 每个项目都有自己的仓库'
- en: 'Mono versus multi; *what''s the right approach?* There is no direct answer
    that would recommend a particular approach. The strategy that we choose to use
    in order to structure our repositories is totally based on our way of managing
    projects; both types have their advantages and disadvantages. However, it is good
    to mention that **Facebook** and **Google** use mono-repos to manage their projects.
    Here are some key points to help you decide which strategy to follow:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 单仓库与多仓库；*哪种方法更合适？* 没有直接的答案可以推荐特定的方法。我们选择用于结构化仓库的策略完全基于我们管理项目的方式；两种类型都有其优缺点。然而，值得一提的是
    **Facebook** 和 **Google** 使用单仓库来管理他们的项目。以下是一些关键点，以帮助您决定遵循哪种策略：
- en: Mono-repo facilitates managing dependencies that may be complex if we use multi-repo.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单仓库简化了管理依赖关系，如果使用多仓库，这些依赖关系可能会变得复杂。
- en: With mono-repo, we may face some performance drawbacks in the case of a large
    code base. This is not a problem in multi-repo.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单仓库中，我们可能会遇到一些性能上的缺点，尤其是在大型代码库的情况下。这在多仓库中不是问题。
- en: It's noticeable that enforcing common practices and standards is easier in mono-repo
    than in multi-repo.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在单仓库中强制执行共同实践和标准比在多仓库中更容易。
- en: Multi-repo allows us to work efficiently by enabling each microservice team
    to work independently to finish their work faster. This allows us to grant developers
    access to the repositories they need to access.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多仓库允许我们通过使每个微服务团队能够独立工作以更快地完成工作来提高工作效率。这使我们能够授予开发者访问他们需要的仓库。
- en: Branching strategy with Git
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Git 的分支策略
- en: Git branches are effective references to a snapshot of the code changes. A branch
    provides a way to isolate changes related to a new feature or a hotfix from the
    main branch of the code. Code changes that are committed to one branch don't affect
    the other branches automatically, unless we merge changes.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: Git分支是代码更改快照的有效引用。分支提供了一种方法，可以将与新的功能或热修复相关联的更改从代码的主分支中隔离出来。提交到一个分支的代码更改不会自动影响其他分支，除非我们合并更改。
- en: 'It is essential to adopt a branching strategy and make it simple by following
    these three concepts:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 采取分支策略并遵循以下三个概念使其变得简单是至关重要的：
- en: Create a new branch for every feature or set of features of a particular release.
    This is also applicable in the case of releasing hotfixes after fixing defects.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个特定版本的每个功能或功能集创建一个新的分支。这在修复缺陷后发布热修复补丁的情况下也适用。
- en: Merge sub-branches into the main branch by using pull requests. Never merge
    code into the main branch unless the code had been tested properly, and also ensure
    that the affected functionalities are working well and certified.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用拉取请求将子分支合并到主分支。除非代码已经经过适当的测试，并且确保受影响的函数正常工作并经过认证，否则不要将代码合并到主分支中。
- en: Keep the main branch up to date and never modify code directly inside it.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持主分支的最新状态，并且永远不要直接在其中修改代码。
- en: 'The following diagram shows how all the sub-branches merge their updates into
    the main branch:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了所有子分支如何合并它们的更新到主分支：
- en: '![Figure 10.7: Merging sub-branches into the main branch](img/Figure_10.07_B17366.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7：将子分支合并到主分支](img/Figure_10.07_B17366.jpg)'
- en: 'Figure 10.7: Merging sub-branches into the main branch'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7：将子分支合并到主分支
- en: 'There are many branching strategies that you can implement. The most important
    part is to separate the development activities from the production code by creating
    two separate branches. One of the strategies that we can follow is the **trunk-based
    branching** strategy, as shown in the following diagram:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以实现许多分支策略。最重要的是通过创建两个独立的分支来将开发活动与生产代码分离。我们可以遵循的策略之一是以下图表中所示的**基于主干线的分支**策略：
- en: '![Figure 10.8: Trunk-based branching strategy](img/Figure_10.08_B17366.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8：基于主干线的分支策略](img/Figure_10.08_B17366.jpg)'
- en: 'Figure 10.8: Trunk-based branching strategy'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8：基于主干线的分支策略
- en: 'In the preceding diagram, we can see the two main branches: development (**Dev**)
    and production (**Main**). The concept here is that we never write code directly
    into the **Main** branch. Instead, we need to create a branch for hotfixes; at
    the same time, the hotfixes should be merged with **Dev** after proper testing.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到两个主要分支：开发分支（**Dev**）和生产分支（**Main**）。这里的理念是我们永远不会直接在**Main**分支中编写代码。相反，我们需要为热修复创建一个分支；同时，热修复应该在适当的测试后与**Dev**分支合并。
- en: As for the **Release** branch, it is usually created from the development branch.
    After development and proper testing, it is merged with both the production and
    development branches. This way, we make sure that the **Main** branch contains
    the production version of the code, while the **Dev** branch contains the development
    branches.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于**发布**分支，它通常从开发分支创建。经过开发和适当的测试后，它与生产分支和开发分支合并。这样，我们确保**Main**分支包含代码的生产版本，而**Dev**分支包含开发分支。
- en: Git branches are inexpensive to create and maintain. Therefore, as shown in
    the preceding diagram, we created a separate branch. Even small fixes and changes
    should have their own feature branches, which should simplify reviewing the history
    of the changes. When creating a new branch, it is important to provide descriptive
    information about the branch and link it to a Work Item.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Git分支创建和维护成本低廉。因此，如图所示，我们创建了一个单独的分支。即使是小的修复和更改也应该有自己的功能分支，这样可以简化更改历史的审查。在创建新分支时，提供有关分支的描述性信息并将其链接到工作项是很重要的。
- en: Collaborating with pull requests in Azure repos
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Azure仓库中通过拉取请求进行协作
- en: '**Pull requests** are robust mechanisms for notifying the team leader or the
    code reviewer that the development of a new feature or a bug fix has been completed,
    and that the code must be reviewed before it''s merged into the main branch. Avoid
    merging code to the main branch without a pull request, which enforces a code
    review process. This is essential for improving the code''s quality.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**拉取请求**是通知团队领导或代码审查者新功能开发或错误修复已完成，并且代码在合并到主分支之前必须进行审查的强大机制。避免在没有拉取请求的情况下将代码合并到主分支，这强制执行了代码审查流程。这对于提高代码质量至关重要。'
- en: 'It is noticeable that if the feedback that was received after the review process
    is good and up to standards, it may improve the code''s quality. Therefore, it
    is recommended that you provide high-quality feedback. Here are some key suggestions
    for successful pull requests:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果审查过程后收到的反馈良好且符合标准，它可能会提高代码的质量。因此，建议您提供高质量的反馈。以下是一些成功的拉取请求的关键建议：
- en: Having the right people to review the pull request and provide feedback is a
    key factor for better reviews.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有合适的人来审查拉取请求并提供反馈是进行更好审查的关键因素。
- en: It is recommended to have two reviewers as an optimal number for the review
    process.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议在审查过程中有两个审查者作为最佳数量。
- en: Giving actionable and constructive feedback is very essential.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供可操作和建设性的反馈非常重要。
- en: It is important to reply to comments promptly to accelerate the pull request
    process, especially if you have a large number of requests in the queue.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 及时回复评论以加速拉取请求流程很重要，尤其是如果您有大量请求在队列中。
- en: Providing enough details in the branch description helps the reviewer understand
    the purpose of the changes.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在分支描述中提供足够的细节有助于审阅者理解变更的目的。
- en: It is recommended to combine the code review sessions, if you have them in place,
    with the pull request process to avoid duplicating the effort.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您已经实施了代码审查会议，建议将其与拉取请求流程结合起来，以避免重复工作。
- en: In this section, we learned about the structuring options that we can use in
    Git repositories and how to choose between them. We also explored some recommendations
    for a better branching strategy and discussed the benefits of the pull request
    process. We then highlighted some key factors for improving this process. In the
    next section, we are going to learn how to set a good dependency management strategy.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们了解了可以在Git仓库中使用的结构化选项，以及如何在这之间进行选择。我们还探索了一些更好的分支策略的建议，并讨论了拉取请求流程的好处。然后我们强调了提高这一流程的一些关键因素。在下一节中，我们将学习如何设置良好的依赖关系管理策略。
- en: Managing packages with Azure Artifacts
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Azure Artifacts管理包
- en: '**Azure Artifacts** is an extension in Azure DevOps that provides a set of
    capabilities to create and manage packages with **NuGet**, **npm**, and **Maven**.
    This can help us manage the dependencies in our code base and group them into
    feeds. Each feed that''s created in Azure Artifacts has its own URL that we can
    consume from **Visual Studio** to install the packages into our solution; the
    development team can also use the same feed URL to publish private packages.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**Azure Artifacts**是Azure DevOps中的一个扩展，它提供了一组使用**NuGet**、**npm**和**Maven**创建和管理包的能力。这可以帮助我们管理代码库中的依赖关系并将它们分组到源中。在Azure
    Artifacts中创建的每个源都有自己的URL，我们可以从**Visual Studio**中消费这些URL来将包安装到我们的解决方案中；开发团队也可以使用相同的源URL来发布私有包。'
- en: 'Azure Artifacts is free as long as the size of the packages and artifacts is
    less than **2 GB**. Everything above 2 GB will be billed according to the subscription
    plan. The following page on Azure Artifacts can be found in the left-hand side
    menu, next to the arrow depicted in the following screenshot:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 只要包和工件的大小小于**2 GB**，Azure Artifacts是免费的。超过2 GB的所有内容都将根据订阅计划收费。以下页面可以在Azure Artifacts的左侧菜单中找到，紧邻以下截图中的箭头所示：
- en: '![Figure 10.9: Packages feed within Azure Artifacts](img/Figure_10.09_B17366.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9：Azure Artifacts中的包源](img/Figure_10.09_B17366.jpg)'
- en: 'Figure 10.9: Packages feed within Azure Artifacts'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9：Azure Artifacts中的包源
- en: In the preceding screenshot, we have a feed called **CMSArtifacts**. In this
    feed, we can see a group of packages that were added to this container. The purpose
    here is to organize the public and private packages that we are using in our solutions
    into a feed that can be consumed by the development team.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，我们有一个名为**CMSArtifacts**的源。在这个源中，我们可以看到一组被添加到这个容器中的包。这里的目的是将我们在解决方案中使用的公共和私有包组织到一个可以被开发团队消费的源中。
- en: With Azure Artifacts, we can create views of the feed. For instance, we can
    create a view for the packages that are used in the development environment and
    another view for the production version of the product.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure Artifacts，我们可以创建饲料的视图。例如，我们可以为开发环境中使用的包创建一个视图，并为产品的生产版本创建另一个视图。
- en: 'The following screenshot shows three different views of the same feed; that
    is, **Local**, **Prerelease**, and **Release**. Each view holds a particular version
    of the packages, and it is being used for a particular work environment:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了同一饲料的三个不同视图；即**本地**、**预发布**和**发布**。每个视图都包含特定版本的包，并且用于特定的工作环境：
- en: '![Figure 10.10: Feed views](img/Figure_10.10_B17366.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10：饲料视图](img/Figure_10.10_B17366.jpg)'
- en: 'Figure 10.10: Feed views'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10：饲料视图
- en: As we can see, there are three views in the preceding screenshot. These views
    were created alongside the feed. We can still add new views or modify an existing
    one.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，前一个截图中有三个视图。这些视图是与饲料一起创建的。我们仍然可以添加新的视图或修改现有的视图。
- en: '**Upstream source**, as shown in the preceding screenshot, allows us to group
    the packages that we create along with the packages that we consume from the remote
    feeds in one place. The following screenshot shows the interface we can use to
    create an upstream. Notice that we can specify the type of **View** that we want
    to use for the upstream:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**上游源**，如图所示，允许我们将创建的包和从远程饲料中消费的包在同一个地方分组。以下截图显示了我们可以用来创建上游的界面。请注意，我们可以指定我们想要用于上游的**视图**类型：'
- en: '![Figure 10.11: Adding an upstream source with a specific view](img/Figure_10.11_B17366.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11：添加具有特定视图的上游源](img/Figure_10.11_B17366.jpg)'
- en: 'Figure 10.11: Adding an upstream source with a specific view'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11：添加具有特定视图的上游源
- en: Each upstream source is linked to one view, and that's how we can make use of
    the views in Visual Studio through upstream sources.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 每个上游源都链接到一个视图，这就是我们如何通过上游源在 Visual Studio 中使用视图。
- en: 'In this section, we introduced Azure Artifacts, which supports the multiple
    feeds approach. We can make use of it to organize and group the packages that
    we are consuming in our projects. For more technical information on how to create
    and manage Azure Artifacts, please refer to the Microsoft documentation: [https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops).'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们介绍了 Azure Artifacts，它支持多饲料方法。我们可以利用它来组织和分组我们在项目中使用的包。有关如何创建和管理 Azure
    Artifacts 的更多技术信息，请参阅 Microsoft 文档：[https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops](https://docs.microsoft.com/en-us/azure/devops/artifacts/overview?view=azure-devops)。
- en: In the next section, we will explore continuous integration with **Azure Pipelines**.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探索使用 **Azure Pipelines** 的持续集成。
- en: Exploring CI/CD with Azure pipelines
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Azure Pipelines 探索 CI/CD
- en: '**Continuous integration**, **continuous delivery**, and **continuous deployment**
    (or **CI**/**CD**) are the main pillars of building, testing, and deploying robust
    applications using modern software development techniques in DevOps. These practices
    allow us to release new features and fixes quickly through automated processes.
    Let''s get to know each of these practices.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**、**持续交付**和**持续部署**（或**CI**/**CD**）是使用 DevOps 中的现代软件开发技术构建、测试和部署健壮应用程序的主要支柱。这些实践使我们能够通过自动化流程快速发布新功能和修复。让我们了解这些实践中的每一个。'
- en: '**Continuous integration** (**CI**) is the nucleus practice in DevOps. It allows
    us to frequently integrate all source code modifications coming from multiple
    developers into the main repository. It is an automated process that can be configured
    in Azure DevOps. When this capability is enabled, every time a developer commits
    their code, the CI will be verified by starting an automated build process to
    verify that the project contains no build errors. After that, an automated testing
    process is triggered to confirm that the newly committed code is stable. This
    approach is very helpful for identifying errors quickly and easily.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '**持续集成**（**CI**）是 DevOps 中的核心实践。它允许我们将来自多个开发者的所有源代码修改频繁地集成到主仓库中。这是一个可以在 Azure
    DevOps 中配置的自动化流程。当此功能启用时，每次开发者提交代码时，CI 都将通过启动自动化构建过程来验证项目是否包含构建错误。之后，将触发自动化测试过程以确认新提交的代码是稳定的。这种方法对于快速轻松地识别错误非常有帮助。'
- en: '**Continuous delivery** is a practice that automates the delivery step that
    comes after the building and testing phase. Whenever we have a successful build
    and tests, an automated process is triggered to deploy the artifacts to the desired
    environment. This can be staging or production. Note that in this practice, shipping
    the code from staging to production is completed through manual intervention.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**連續交付**是一種實踐，它自動化了建設和測試階段之後的交付步驟。無論何時我們都有成功的建設和測試，都會觸發一個自動流程將工件部署到目標環境。這可以是測試環境或生產環境。注意，在這種實踐中，從測試環境將代碼發送到生產環境是通過人工介入完成的。'
- en: '**Continuous deployment** has a lot in common with continuous delivery. The
    main difference is that this practice automates the entire life cycle of the release
    process, and the artifacts are automatically deployed to production.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '**連續部署**與**連續交付**有很多相似之處。主要差異在於這種實踐自動化了發布流程的整個生命周期，並將工件自動部署到生產環境。'
- en: 'The following diagram shows the steps of each practice:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 以下圖表展示了每種實踐的步驟：
- en: '![Figure 10.12: CI/CD steps](img/Figure_10.12_B17366.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![圖10.12：CI/CD步驟](img/Figure_10.12_B17366.jpg)'
- en: 'Figure 10.12: CI/CD steps'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 圖10.12：CI/CD步驟
- en: In the preceding diagram, neither the **Continuous Delivery** nor **Continuous
    Deployment** processes can start unless the **Continuous Integration** process
    is completed. The steps between **Continuous Delivery** and **Continuous Deployment**
    are almost the same; however, in **Continuous Delivery**, the deployment to production
    is done through a manual job, while in **Continuous Deployment**, it is an automatic
    process.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的圖表中，除非完成**連續集成**流程，否則**連續交付**和**連續部署**流程都不能啟動。**連續交付**和**連續部署**之間的步驟幾乎相同；然而，在**連續交付**中，生產部署是通過手動任務完成的，而在**連續部署**中，它是一個自動流程。
- en: To implement a build strategy, we need to make use of the pipelines in Azure
    DevOps. A pipeline is an automated service that's used to verify a build and make
    it ready for deployment. The usage of the pipeline will reduce the manual work
    needed from the developer to merge the code, build it, and test the changes, along
    with the affected features. It is important to mention that the pipelines are
    used in continuous delivery and continuous deployment to automate their steps.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要實施構建策略，我們需要利用 Azure DevOps 中的管道。管道是一種自動化服務，用於驗證構建並使其準備就緒以部署。管道的使用將減少開發者為合併代碼、構建它和測試變更以及受影響的功能所需的人工工作。重要的是要提到，管道用於連續交付和連續部署以自動化其步驟。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 總結
- en: In this chapter, we explored the fundamental procedures of Agile planning in
    Azure DevOps. We also learned about Azure Boards, along with related components,
    such as Work Items, Backlogs, and Sprints. Then, we discussed source control and
    explained the difference between TFVC and Git.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 Azure DevOps 中敏捷规划的基礎程序。我們還學習了 Azure Boards，以及相關的组件，如工作項、待辦事項和迭代。然後，我們討論了源控制，並解釋了
    TFVC 和 Git 之間的差異。
- en: After that, we explored Git and how it can version source code, before learning
    about branching and pull requests. Later, we learned about the packages that are
    available in Azure Artifacts, along with CI/CD, which help automate the steps
    related to building, testing, and deploying our code.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 之後，我們探索了 Git 及其如何版本控制源代碼，然後學習了分支和拉取請求。稍後，我們學習了 Azure Artifacts 中可用的包，以及 CI/CD，它們幫助自動化與構建、測試和部署我們的代碼相關的步驟。
- en: Now that you have finished reading this book, your mind is probably filled with
    a lot of different ideas since you've dived deep into the everyday aspects of
    solution architecture. I suggest that you start by measuring where you are on
    your journey toward becoming an effective solution architecture. A good solution
    architect helps build high-quality products that fit the existing environment,
    along with the clients' requirements. To achieve this, a solution architect must
    learn about each part of the business model and how these parts work together.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 現在你已經讀完這本書，你的腦海裡可能充滿了許多不同的想法，因為你已深入了解了解決方案架構的日常方面。我建議你從衡量你在成為有效解決方案架構師的旅程中處於何種位置開始。一個好的解決方案架構師幫助建立適合現有環境並滿足客戶需求的優質產品。為了實現這一點，解決方案架構師必須了解商業模式的每一部分以及這些部分是如何相互合作的。
- en: We covered many topics in this book. However, it is a good practice that we
    develop a learning mindset by frequently researching and getting to know new techniques
    and patterns in solution architectures, and also focus on the cloud services offered
    by Azure for building modern solutions. At the same time, it is essential to always
    improve our soft skills, especially if we want to become effective leaders. I
    hope that you have enjoyed reading this book as much as I enjoyed writing it and
    sharing my thoughts and experiences. I wish you every success in all your .NET
    projects!
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本书涵盖了众多主题。然而，经常进行研究和了解解决方案架构中的新技术和模式，培养一种学习心态，以及专注于Azure提供的云服务以构建现代解决方案，这是一种良好的实践。同时，不断提高我们的软技能至关重要，尤其是如果我们想成为有效的领导者。我希望您阅读这本书的乐趣与我写作和分享我的想法和经验一样多。祝您在所有.NET项目中取得成功！
