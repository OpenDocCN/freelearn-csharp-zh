["```cs\ndotnet new web\n```", "```cs\ndotnet add reference ../Fundamentals/Fundamentals.csproj\n```", "```cs\nnamespace Chapter13.Commands;\npublic record ValidationResult(string Message, string Member);\n```", "```cs\nusing Fundamentals;\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\nnamespace Chapter13.Commands;\npublic static class ModelErrorExtensions\n{\n    public static ValidationResult ToValidationResult(this\n      ModelError error, string member)\n    {\n        member = string.Join('.',\n          member.Split('.').Select(_ => _.ToCamelCase()));\n        return new ValidationResult(error.ErrorMessage,\n          member);\n    }\n}\n```", "```cs\nnamespace Chapter13.Commands;\npublic class CommandResult\n{\n    public Guid CorrelationId { get; init; }\n    public bool IsSuccess => IsAuthorized && IsValid &&\n      !HasExceptions;\n    public bool IsAuthorized { get; init; } = true;\n    public bool IsValid => !ValidationResults.Any();\n    public bool HasExceptions => ExceptionMessages.Any();\n    public IEnumerable<ValidationResult> ValidationResults\n      {get; init;} = Enumerable.Empty<ValidationResult>();\n    public IEnumerable<string> ExceptionMessages { get;\n      init; } = Enumerable.Empty<string>();\n    public string ExceptionStackTrace { get; init; } =\n      string.Empty;\n    public object? Response { get; init; }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Filters;\nnamespace Chapter13.Commands;\npublic class CommandActionFilter : IAsyncActionFilter\n{\n    public async Task OnActionExecutionAsync(\n      ActionExecutingContext context,\n      ActionExecutionDelegate next)\n    {\n        if (context.HttpContext.Request.Method ==\n          HttpMethod.Post.Method)\n        {\n        }\n        else\n        {\n            await next();\n        }\n    }\n}\n```", "```cs\nvar exceptionMessages = new List<string>();\nvar exceptionStackTrace = string.Empty;\nActionExecutedContext? result = null;\nobject? response = null;\nif (context.ModelState.IsValid)\n{\n    result = await next();\n    if (result.Exception is not null)\n    {\n        var exception = result.Exception;\n        exceptionStackTrace = exception.StackTrace;\n        do\n        {\n            exceptionMessages.Add(exception.Message);\n            exception = exception.InnerException;\n        }\n        while (exception is not null);\n        result.Exception = null!;\n    }\n    if (result.Result is ObjectResult objectResult)\n    {\n        response = objectResult.Value;\n    }\n}\n```", "```cs\nvar commandResult = new CommandResult\n{\n    CorrelationId = Guid.NewGuid(),\n    ValidationResults = context.ModelState.SelectMany(_ =>\n      _.Value!.Errors.Select(e => e.ToValidationResult(\n      _.Key))),\n    ExceptionMessages = exceptionMessages.ToArray(),\n    ExceptionStackTrace = exceptionStackTrace ??\n      string.Empty,\n    Response = response\n};\n```", "```cs\nif (!commandResult.IsAuthorized)\n{\n    context.HttpContext.Response.StatusCode = 401;\n}\nelse if (!commandResult.IsValid)\n{\n    context.HttpContext.Response.StatusCode = 409;\n}\nelse if (commandResult.HasExceptions)\n{\n    context.HttpContext.Response.StatusCode = 500;\n}\n```", "```cs\nvar actualResult = new ObjectResult(commandResult);\nif (result is not null)\n{\n    result.Result = actualResult;\n}\nelse\n{\n    context.Result = actualResult;\n}\n```", "```cs\nusing System.ComponentModel.DataAnnotations;\nnamespace Chapter13;\npublic record Employee(\n    [Required]\n    string FirstName,\n    [Required]\n    string LastName);\n```", "```cs\nusing Microsoft.AspNetCore.Mvc;\nnamespace Chapter13;\n[Route(\"/api/employees\")]\npublic class EmployeesController : Controller\n{\n    [HttpPost]\n    public int Register([FromBody] Employee employee)\n    {\n        // Todo: Implement logic for actually\n        // registering...\n        return 1;\n    }\n}\n```", "```cs\nusing Chapter13.Commands;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers(mvcOptions => mvcOptions.Filters.\n  Add<CommandActionFilter>());\nvar app = builder.Build();\napp.MapControllers();\napp.Run();\n```", "```cs\ndotnet run\n```", "```cs\nBuilding...\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: https://localhost:7126\ninfo: Microsoft.Hosting.Lifetime[14]\n      Now listening on: http://localhost:5234\ninfo: Microsoft.Hosting.Lifetime[0]\n      Application started. Press Ctrl+C to shut down.\ninfo: Microsoft.Hosting.Lifetime[0]\n      Hosting environment: Development\ninfo: Microsoft.Hosting.Lifetime[0]\n      Content root path: /Users/einari/Projects/Metaprogramming-in-C/\n          Chapter13/\n```", "```cs\n{\n    \"correlationId\": \"f0910061-0e1d-494e-90c2-a7e7c246069f\",\n    \"isSuccess\": false,\n    \"isAuthorized\": true,\n    \"isValid\": false,\n    \"hasExceptions\": false,\n    \"validationResults\": [\n        {\n            \"message\": \"The LastName field is required.\",\n            \"member\": \"lastName\"\n        },\n        {\n            \"message\": \"The FirstName field is required.\",\n            \"member\": \"firstName\"\n        }\n    ],\n    \"exceptionMessages\": [],\n    \"exceptionStackTrace\": \"\",\n    \"response\": null\n}\n```", "```cs\n{\n    \"firstName\": \"Jane\",\n    \"lastName\": \"Doe\"\n}\n```", "```cs\n{\n    \"correlationId\": \"f44600ee-02f2-4d0c-9187-f02ff02c9353\",\n    \"isSuccess\": true,\n    \"isAuthorized\": true,\n    \"isValid\": true,\n    \"hasExceptions\": false,\n    \"validationResults\": [],\n    \"exceptionMessages\": [],\n    \"exceptionStackTrace\": \"\",\n    \"response\": 1\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authentication;\nnamespace Chapter13;\npublic class HardCodedAuthenticationOptions :\n  AuthenticationSchemeOptions\n{\n}\n```", "```cs\nusing System.Security.Claims;\nusing System.Text.Encodings.Web;\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.Extensions.Options;\nnamespace Chapter13;\npublic class HardCodedAuthenticationHandler : AuthenticationHandler<HardCodedAuthenticationOptions>\n{\n    public const string SchemeName =\n      \"HardCodedAuthenticationHandler\";\n    public HardCodedAuthenticationHandler(\n        IOptionsMonitor<HardCodedAuthenticationOptions>\n          options,\n        ILoggerFactory logger,\n        UrlEncoder encoder,\n        ISystemClock clock) : base(options, logger,\n          encoder, clock)\n    {\n    }\n    protected override Task<AuthenticateResult>\n      HandleAuthenticateAsync() => Task.FromResult(\n        AuthenticateResult.Success(\n            new AuthenticationTicket(\n                new ClaimsPrincipal(\n                    new ClaimsIdentity(\n                        new[]\n                        {\n                            new Claim(ClaimTypes.Name,\n                              \"Bob\"),\n                            new Claim(ClaimTypes.Role,\n                              \"User\")\n                        },\n                        SchemeName)), SchemeName)));\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authorization;\nnamespace Chapter13;\npublic class AdminForNamespace : IAuthorizationRequirement\n{\n    public AdminForNamespace(string @namespace)\n    {\n        Namespace = @namespace;\n    }\n    public string Namespace { get; }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Mvc.Controllers;\nnamespace Chapter13;\npublic class AdminForNamespaceHandler : AuthorizationHandler<AdminForNamespace>\n{\n    protected override Task HandleRequirementAsync(\n      AuthorizationHandlerContext context,\n      AdminForNamespace requirement)\n    {\n        if (context.Resource is HttpContext httpContext)\n        {\n            var endpoint = httpContext.GetEndpoint();\n            if (endpoint is not null)\n            {\n                var controllerActionDescriptor =\n                  endpoint!.Metadata.GetMetadata<Controller\n                  ActionDescriptor>();\n                if (controllerActionDescriptor?\n                        .MethodInfo\n                        .DeclaringType?\n                        .Namespace?\n                        .StartsWith(requirement.Namespace,\n                          StringComparison.InvariantCulture\n                          ) == true &&\n                    !httpContext.User.IsInRole(\"Admin\"))\n                {\n                    context.Fail();\n                }\n                else\n                {\n                    context.Succeed(requirement);\n                }\n            }\n        }\n        return Task.CompletedTask;\n    }\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authorization;\nnamespace Chapter13;\npublic class CrossCuttingPoliciesProvider : IAuthorizationPolicyProvider\n{\n    readonly AuthorizationPolicy _policy;\n    public CrossCuttingPoliciesProvider()\n    {\n        _policy = new AuthorizationPolicyBuilder()\n                .AddRequirements(new\n                AdminForNamespace(\"Chapter13\")\n            ).Build();\n    }\n    public Task<AuthorizationPolicy>\n      GetDefaultPolicyAsync() => Task.FromResult(_policy);\n    public Task<AuthorizationPolicy?>\n      GetFallbackPolicyAsync() =>\n      Task.FromResult<AuthorizationPolicy?>(_policy);\n    public Task<AuthorizationPolicy?> GetPolicyAsync(string\n      policyName) =>\n      Task.FromResult<AuthorizationPolicy?>(_policy);\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authorization.Policy;\nnamespace Chapter13;\npublic static class HttpContextExtensions\n{\n    const string AuthorizeResultKey = \"_AuthorizeResult\";\n    public static PolicyAuthorizationResult?\n      GetAuthorizationResult(this HttpContext context) =>\n      (context.Items[AuthorizeResultKey] as\n      PolicyAuthorizationResult)!;\n    public static void SetAuthorizationResult(this\n      HttpContext context, PolicyAuthorizationResult\n      result) => context.Items[AuthorizeResultKey] =\n      result;\n}\n```", "```cs\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Authorization.Policy;\nnamespace Chapter13;\npublic class CrossCuttingAuthorizationMiddlewareResultHandler :\n  IAuthorizationMiddlewareResultHandler\n{\n    readonly AuthorizationMiddlewareResultHandler\n      _defaultHandler = new();\n    public async Task HandleAsync(RequestDelegate next,\n      HttpContext context, AuthorizationPolicy policy,\n      PolicyAuthorizationResult authorizeResult)\n    {\n        context.SetAuthorizationResult(authorizeResult);\n        await _defaultHandler.HandleAsync(next, context,\n          policy, PolicyAuthorizationResult.Success());\n    }\n}\n```", "```cs\nif (context.HttpContext.Request.Method == HttpMethod.Post.Method)\n    // Adding call to get authorization result and setting\n    // authorized variable\n    var authorizationResult =\n      context.HttpContext.GetAuthorizationResult();\n    var isAuthorized = authorizationResult?.Succeeded ??\n      true;\n    var exceptionMessages = new List<string>();\n    var exceptionStackTrace = string.Empty;\n    ActionExecutedContext? result = null;\n    object? response = null;\n    // Using authorized variable, we don't want to call the\n    // controller if we are\n    if (context.ModelState.IsValid && isAuthorized)\n```", "```cs\nvar commandResult = new CommandResult\n{\n    CorrelationId = Guid.NewGuid(),\n    // Adding isAuthorized\n    IsAuthorized = isAuthorized,\n    ValidationResults = context.ModelState.SelectMany(_ =>\n      _.Value!.Errors.Select(e =>\n      e.ToValidationResult(_.Key))),\n    ExceptionMessages = exceptionMessages.ToArray(),\n    ExceptionStackTrace = exceptionStackTrace ??\n      string.Empty,\n    Response = response\n};\n```", "```cs\nusing Chapter13;\nusing Chapter13.Commands;\nusing Microsoft.AspNetCore.Authorization;\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddControllers(mvcOptions => mvcOptions.Filters.\n  Add<CommandActionFilter>());\n// Adding authorization and the handlers\nbuilder.Services.AddAuthorization(options => options.\n  AddPolicy(\"Chapter13Admins\", policy => policy.Requirements.Add(new AdminForNamespace(\"Chapter13\"))));\nbuilder.Services.AddSingleton<IAuthorizationHandler,\n  AdminForNamespaceHandler>();\nbuilder.Services.AddSingleton<IAuthorizationMiddlewareResultHandler,\n  CrossCuttingAuthorizationMiddlewareResultHandler>();\nbuilder.Services.AddSingleton<IAuthorizationPolicyProvider,\n  CrossCuttingPoliciesProvider>();\n// Adding authentication with our hardcoded handler\nbuilder.Services\n    .AddAuthentication(options => options.DefaultScheme =\n      HardCodedAuthenticationHandler.SchemeName)\n    .AddScheme<HardCodedAuthenticationOptions,\n      HardCodedAuthenticationHandler>(\n      HardCodedAuthenticationHandler.SchemeName, _ => {});\nvar app = builder.Build();\napp.MapControllers();\n// Use authentication and authorization\napp.UseAuthentication();\napp.UseAuthorization();\napp.Run();\n```", "```cs\n{\n    \"correlationId\": \"eb26b553-45f3-43a4-9d92-9860b2fe541e\",\n    \"isSuccess\": false,\n    \"isAuthorized\": false,\n    \"isValid\": true,\n    \"hasExceptions\": false,\n    \"validationResults\": [],\n    \"exceptionMessages\": [],\n    \"exceptionStackTrace\": \"\",\n    \"response\": null\n}\n```", "```cs\nnew Claim(ClaimTypes.Role, \"User\")\n```", "```cs\nnew Claim(ClaimTypes.Role, \"Admin\")\n```", "```cs\n{\n    \"correlationId\": \"80191dbc-8908-4c89-9dfb-7bce8b4b9e44\",\n    \"isSuccess\": true,\n    \"isAuthorized\": true,\n    \"isValid\": true,\n    \"hasExceptions\": false,\n    \"validationResults\": [],\n    \"exceptionMessages\": [],\n    \"exceptionStackTrace\": \"\",\n    \"response\": 1\n}\n```"]