- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Multi-Platform App UI Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter delves into the realm of cross-platform development using Visual
    Studio 2022, with a focus on .NET **MAUI** ( **Multi-Platform App UI** ). We will
    gain comprehensive insights into building applications that seamlessly run on
    multiple platforms using .NET MAUI. The topics cover an introduction to .NET MAUI,
    an exploration of the essential tools for efficient development, debugging on
    various devices, and practical guidance on migrating from Xamarin to . NET MAUI.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'Throughout this chapter, we’ll explore the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to MAUI
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring tools for MAUI
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging on devices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Migration from Xamarin
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the culmination of this chapter, we’ll be equipped to productively and playfully
    craft compelling multi-platform applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: So, let’s embark on this expedition of mastering Visual Studio for MAUI development
    together.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While writing this chapter, I used the following version of Visual Studio:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Enterprise 2022 Version 17.12.0
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preview 1.0
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch05](https://github.com/PacktPublishing/Mastering-Visual-Studio-2022/tree/main/ch05)
    .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: To access the WordPuzzle project in this chapter, check out the following GitHub
    repository at [https://github.com/dotnet/maui-samples/tree/main/8.0/Apps/WordPuzzle](https://github.com/dotnet/maui-samples/tree/main/8.0/Apps/WordPuzzle)
    .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to MAUI
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**MAUI** , is a versatile framework that enables developers to craft native
    applications for both mobile and desktop platforms, using C# and XAML. With MAUI,
    developers can target Android, iOS, macOS, and Windows devices from a unified
    code base.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: This open-source framework builds upon the foundation of Xamarin.Forms, extending
    its capabilities to cover desktop scenarios while aiming for enhanced performance,
    flexibility, and the ability to consolidate app logic and UI layout within one
    code base.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: The evolution of cross-platform development
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cross-platform development frameworks have revolutionized app development by
    enabling code sharing across multiple platforms. Xamarin.Forms, for instance,
    has empowered companies to share over 95 percent of their code base, maximizing
    development investments. However, the landscape has evolved, prompting the emergence
    of frameworks such as MAUI to address previous limitations and adapt to the evolving
    demands of app development.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: What is MAUI?
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Developed by Microsoft, MAUI is an open source framework designed to facilitate
    the creation of native cross-platform apps using a single code base. It builds
    upon the foundation of Xamarin.Forms, enriching it with additional features, such
    as a unified project structure, and flexibility.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: Leveraging .NET 6, MAUI integrates the latest advancements, performance enhancements,
    and security updates from the .NET framework, enabling developers to harness the
    extensive ecosystem of .NET libraries and tools to elevate their applications.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用.NET 6，MAUI集成了.NET框架的最新进展、性能增强和安全更新，使开发者能够利用.NET库和工具的广泛生态系统来提升他们的应用程序。
- en: The key features of MAUI
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MAUI的关键特性
- en: 'Some of the key features of MAUI are as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: MAUI的一些关键特性如下：
- en: '**A single code base for multiple platforms** : MAUI streamlines project management
    by consolidating code, resources, and UI elements within a single project structure,
    reducing complexity, and saving time'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多平台单一代码库**：MAUI通过将代码、资源和UI元素合并到单一的项目结构中，简化了项目管理，减少了复杂性，并节省了时间'
- en: '**Enhanced performance and responsiveness** : Engineered for improved performance,
    MAUI ensures smooth and efficient operation across all supported platforms'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**增强的性能和响应性**：MAUI针对性能改进而设计，确保在所有支持的平台上运行顺畅且高效'
- en: '**Support for native features and controls** : MAUI prioritizes native user
    interfaces, delivering a seamless user experience on all platforms'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原生功能和控件支持**：MAUI优先考虑原生用户界面，在所有平台上提供无缝的用户体验'
- en: '**Improved developer productivity** : Features such as Hot Reload for XAML
    and CSS enable real-time visualization of UI changes, accelerating the development
    process significantly'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提高开发者生产力**：如XAML和CSS的Hot Reload等特性，能够实时可视化UI更改，显著加速开发过程'
- en: Now that we’ve explored the key features and architecture of.NET MAUI, it’s
    clear that this framework represents a significant leap forward in app development.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经探讨了.NET MAUI的关键特性和架构，很明显，这个框架代表了在应用程序开发方面的一大飞跃。
- en: The architecture of MAUI
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MAUI的架构
- en: MAUI adopts a strategy where it leverages the native capabilities of each platform
    while maintaining a single code base. This approach grants developers access to
    native platform features and UI controls through a unified API, facilitating the
    delivery of uncompromised user experiences while achieving higher code reuse.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MAUI采用一种策略，它利用每个平台的原生功能，同时保持单一的代码库。这种方法使开发者能够通过统一的API访问原生平台功能和UI控件，从而提供无妥协的用户体验，同时实现更高的代码重用。
- en: .NET MAUI offers a unified framework for constructing user interfaces across
    both mobile and desktop applications.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: .NET MAUI为构建移动和桌面应用程序的用户界面提供了一个统一的框架。
- en: 'The diagram in *Figure 5* *.1* (from [learn.microsoft.com](http://learn.microsoft.com)
    ) illustrates the high-level structure of a .NET MAUI application:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*（来自[learn.microsoft.com](http://learn.microsoft.com)）的图表展示了.NET MAUI应用程序的高级结构：'
- en: '![Figure 5.1 – The MAUI high-level structure (source: learn.microsoft.com)](img/B22218_05_1.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图5.1 – MAUI的高级结构（来源：learn.microsoft.com）](img/B22218_05_1.jpg)'
- en: 'Figure 5.1 – The MAUI high-level structure (source: learn.microsoft.com)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – MAUI的高级结构（来源：learn.microsoft.com）
- en: We can craft .NET MAUI applications on either a PC or a Mac. In our .NET MAUI
    app, our code will primarily interact with the .NET MAUI API. Then, the .NET MAUI
    subsequently accesses the native platform APIs directly. Moreover, our application
    code may directly engage with platform APIs when necessary.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在PC或Mac上构建.NET MAUI应用程序。在我们的.NET MAUI应用程序中，我们的代码将主要与.NET MAUI API交互。然后，.NET
    MAUI随后直接访问原生平台API。此外，当需要时，我们的应用程序代码可以直接与平台API交互。
- en: 'By the end, the code is compiled into native app packages:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，代码被编译成原生应用程序包：
- en: .NET MAUI facilitates the development of Android applications by compiling them
    from C# into an **intermediate language** ( **IL** ). This IL code is subsequently
    JIT-compiled into a native assembly upon an application’s launch. In contrast,
    iOS applications developed with .NET MAUI undergo **ahead-of-time** ( **AOT**
    ) compilation directly from C# into native ARM assembly code before deployment.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET MAUI通过将C#编译成**中间语言**（**IL**）来促进Android应用程序的开发。在应用程序启动时，此IL代码随后被JIT编译成原生程序集。相比之下，使用.NET
    MAUI开发的iOS应用程序在部署前直接从C#编译成原生ARM汇编代码。
- en: For macOS applications, .NET MAUI taps into Mac Catalyst, a feature provided
    by Apple. This feature permits iOS apps, constructed using UIkit, to operate on
    macOS platforms. Additionally, it supports the integration of AppKit and necessary
    platform-specific APIs.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS应用程序，.NET MAUI利用了苹果提供的Mac Catalyst功能。此功能允许使用UIkit构建的iOS应用程序在macOS平台上运行。此外，它还支持AppKit和必要的平台特定API的集成。
- en: When it comes to Windows applications, .NET MAUI employs the **Windows UI 3**
    ( **WinUI 3** ) toolkit. This approach enables the creation of native Windows
    desktop applications.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that we have an understanding of what MAUI is, let’s dive into exploring
    the tools offered by Visual Studio to enhance our MAUI experience.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the tools for MAUI
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, to explore the tools offered by Visual Studio for MAUI, we
    will start by creating a basic application. By building this application, we will
    gain hands-on experience with the various tools and features available in Visual
    Studio for MAUI development. This practical approach will ensure that we not only
    understand the purpose of these tools but also learn how to effectively utilize
    them, enhancing our development workflow.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple MAUI app
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we must ensure that we have the latest version of Visual Studio 2022
    with the MAUI workload installed. If you don’t have it installed, you can update
    your Visual Studio from the Visual Studio Installer or with the following command:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can also use the Visual Studio Installer to install the MAUI workload or
    check whether the version you have is up to date, by launching your Visual Studio
    Installer and clicking on the button to modify your installed Visual Studio (see
    *Figure 5* *.2* ):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Modifying Visual Studio’s workload](img/B22218_05_2.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 – Modifying Visual Studio’s workload
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we are all set. We can create our new MAUI project by following these
    steps:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Open Visual Studio and create a new project. Select **MAUI** as the project
    type.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.3 – The .NET MAUI App template](img/B22218_05_3.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – The .NET MAUI App template
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see that an MAUI project has a shared code base that targets multiple
    platforms. In a.NET MAUI setup, the common code base resides within the shared
    project. Conversely, each platform-specific project houses the unique code tailored
    to its respective environment (e.g., **Platforms** | **Android** , **Platforms**
    | **iOS** , **Platform** | **Tizen** , **Platforms** | **MacCatalyst** , and **Platforms**
    | **Windows** ), as shown in *Figure 5* *.4* :'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.4 – The MAUI folder architecture](img/B22218_05_4.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
- en: Figure 5.4 – The MAUI folder architecture
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: In the **Shared** project, we find the main page’s XAML file, under **MainPage.xaml**
    . This is where we design our app’s UI.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For our example, we will simply build an app, with a button to click on to show
    a text message.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: 'We will begin by designing the UI. To do that, we open **MainPage.xaml** in
    the **Shared** project and replace its content with the following XAML code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This XAML code snippet defines the basic structure of **ContentPage** in our
    .NET MAUI application. This page contains **StackLayout** , which is a simple
    layout that arranges its children in a single line that can be oriented horizontally
    or vertically.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, we implement the logic by opening **MainPage.xaml.cs** in the **Shared**
    project and adding the following C# code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is C# code-behind for the **MainPage** class in a .NET MAUI application.
    This code complements the XAML markup you shared earlier, defining the behavior
    of **ContentPage** . Specifically, it includes the implementation of the **OnButtonClicked**
    method, which updates the text of a label named **MessageLabel** when a button
    is clicked.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we can run the app. The **Start** button allows us to select an emulator
    or device as the target (see *Figure 5* *.5* ):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Launching Android Emulator](img/B22218_05_5.jpg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Launching Android Emulator
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: For instance, we can choose **Android Emulator** ; when we launch it for the
    first time, Visual Studio will prompt us with a wizard to install it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Now, when we launch our app, we will see a button labeled **Click Me** (see
    *Figure 5* *.6* ).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Android Emulator](img/B22218_05_6.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Android Emulator
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: When we click the button, the text below it changes to **You clicked** **the
    button!** .
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: This is a basic example to get us started with MAUI. Now that we have a running
    app, we can explore all the tools offered by Visual Studio to enhance our MAUI
    development experience.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: Next, let’s explore XAML Live Preview to leverage instant UI modification.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: XAML Live Preview
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **XAML Live Preview** feature in Visual Studio, when used with the Windows
    machine executer, allows developers to see real-time updates of their XAML UI
    changes without the need to manually save or rebuild a project. This feature is
    particularly useful for quickly iterating on UI designs and ensuring that the
    changes are reflected immediately in the preview window.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: To enable **XAML Live Preview** , look for the *video camera* icon in the *Visual
    Studio toolbar* . This icon is the **XAML Live Preview** button. Clicking on it
    will enable the Live Preview feature.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – The XAML Live Preview button](img/B22218_05_7.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – The XAML Live Preview button
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Note that we can open the **XAML Live Preview** directly through the Visual
    Studio top bar menu in **Debug** mode; navigate to **Debug** | **Windows** | **XAML**
    **Live Preview** .
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: This action allows us to dock an XAML preview window alongside Visual Studio,
    adjacent to our code base. As we modify the XAML code, the changes are reflected
    in the XAML Live Preview window almost instantly. This allows us to see the impact
    of our changes immediately, without the need to save or rebuild a project.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: While hovering over an element, we can retrieve a variety of style information
    and identify the file in which the element is defined.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, we hover over the **MyButton** element:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – An element’s style properties](img/B22218_05_8.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – An element’s style properties
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 5* *.8* , we can retrieve properties such as **TextColor** and **BackgroundColor**
    value of the **MyButton** define in **MainPage.xaml** .
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'Further, we can smoothly interact with the preview by scrolling and zooming.
    Besides scrolling with the scroll bars, we can also utilize the following interactions:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: A *mouse wheel* , both vertical and horizontal (if our mouse supports it)
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *touchpad* two-finger scroll, both vertical and horizontal
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *Ctrl* key press, paired with a *mouse* *drag* action
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In addition, for zooming, we can use the following interactions:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: The **Zoom in** or **Zoom out** buttons in the bottom-left corner.
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *Ctrl* + *plus sign* ( *+* ) or *Ctrl* + *minus sign* ( *-* ) keyboard shortcut
    press, if we prefer using a keyboard.
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *Ctrl* key press paired with a *mouse wheel* action, or a *pinch-to-zoom*
    action with the *touchpad* . A bonus of using a mouse is maintaining more precise
    control.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, we can add rulers to help us to define the size and position of
    our element. **Rulers** assist us in aligning elements within our application.
    They present distances, measured in application units. This feature helps us verify
    the spacing between different components of our application.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'The second set of toolbar buttons governs the rulers, as shown in *Figure 5*
    *.9* :'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.9 – The rulers toolbar](img/B22218_05_9.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – The rulers toolbar
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a list of the main functionalities offered by the toolbar:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '**Add vertical ruler** : This adds a single vertical ruler. Clicking this button
    multiple times consecutively will position new rulers to avoid overlapping existing
    ones.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add horizontal ruler** : This inserts a single horizontal ruler, functioning
    similarly to the vertical ruler.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Remove all rulers** : This clears all rulers at once.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Select ruler color** : This adjusts the color of the rulers.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Toggle ruler visibility** : This toggles the visibility of all rulers with
    a single click.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rulers are designed to be keyboard-friendly. We can navigate through them using
    the *Tab* key. Utilizing the *arrow* keys allows us to move rulers one pixel at
    a time, or we can press *Ctrl* along with the *arrow* keys to move them by 10
    app units at a time. Pressing the *Del* key deletes the currently selected ruler.
    Additionally, we can delete a ruler using the mouse, by selecting the **Delete**
    **Ruler** button.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: We can also add rulers to an element while using **Element Selection** . Right-clicking
    adds vertical rulers, and holding the *Shift* key while right-clicking adds horizontal
    rulers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: When working in an application with multiple windows, we can choose which window
    to display by using the **Window combo** box. Alternatively, we can use the **Show
    in XAML Live Preview** button in the application toolbar that’s on the window
    you want to preview, as we saw previously.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: The XAML Live Preview feature significantly speeds up the development process
    by providing immediate feedback on UI changes, making it easier to design and
    debug XAML-based applications such as MAUI.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: XAML 实时预览功能通过提供对 UI 变化的即时反馈，显著加快了开发过程，使得设计和调试基于 XAML 的应用程序（如 MAUI）变得更加容易。
- en: XAML Live Preview provides an selecting elements feature that mirrors the selection
    process in a running application. This functionality enables us to locate elements
    in either the Live Visual Tree or within the source XAML. Live Visual Tree is
    another tool that helps us understand the XAML structure of our MAUI applications.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: XAML 实时预览提供了一个选择元素的功能，它反映了运行中的应用程序中的选择过程。此功能使我们能够在实时视觉树或源 XAML 中定位元素。实时视觉树是另一个帮助我们理解
    MAUI 应用程序 XAML 结构的工具。
- en: Let’s explore the possibilities offered by the Live Visual Tree.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们探索实时视觉树提供的可能性。
- en: The Live Visual Tree
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时视觉树
- en: The **Live Visual Tree** feature in Visual Studio provides a real-time, hierarchical
    view of the UI elements in our application, allowing us to inspect and modify
    the UI structure directly within the IDE. This feature is particularly useful
    for debugging layout issues, understanding the visual tree, and making dynamic
    changes to your UI during development.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 中的 **实时视觉树** 功能提供了我们应用程序中 UI 元素的实时、层次视图，允许我们在 IDE 中直接检查和修改 UI
    结构。此功能特别适用于调试布局问题、理解视觉树以及在开发过程中对 UI 进行动态更改。
- en: 'If you want to follow with the same code base to illustrate the functionality
    of this feature, with a more complex project, I cloned the WordPuzzle application
    of the GitHub repository: [https://github.com/dotnet/maui-samples/tree/main/8.0/Apps/WordPuzzle](https://github.com/dotnet/maui-samples/tree/main/8.0/Apps/WordPuzzle)
    .'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想跟随相同的代码库来展示此功能的函数，使用一个更复杂的项目，我克隆了 GitHub 仓库中的 WordPuzzle 应用程序：[https://github.com/dotnet/maui-samples/tree/main/8.0/Apps/WordPuzzle](https://github.com/dotnet/maui-samples/tree/main/8.0/Apps/WordPuzzle)。
- en: Using the Live Visual Tree feature
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用实时视觉树功能
- en: To utilize the Live Visual Tree feature, we need to debug our application. By
    default, the **Live Visual Tree** window is located on the left side of the IDE
    for Windows and on the right side for Mac. If you can’t find it, you can display
    it by navigating to the top menu bar – **Debug** | **Window** | **Live** **Visual
    Tree** .
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 要利用实时视觉树功能，我们需要调试我们的应用程序。默认情况下，**实时视觉树**窗口位于 Windows IDE 的左侧和 Mac 的右侧。如果您找不到它，可以通过导航到顶部菜单栏
    – **调试** | **窗口** | **实时** **视觉树** 来显示它。
- en: 'While open, the **Live Visual Tree** window shows the hierarchy of the UI elements
    that we can easily explore and follow, seeing how our application layouts are
    presented (see *Figure 5* *.10* ):'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开时，**实时视觉树**窗口显示了我们可以轻松探索和跟踪的 UI 元素层次结构，展示了我们的应用程序布局是如何呈现的（参见 *图 5.10* ）：
- en: '![Figure 5.10 – Live Visual Tree](img/B22218_05_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.10 – 实时视觉树](img/B22218_05_10.jpg)'
- en: Figure 5.10 – Live Visual Tree
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 实时视觉树
- en: Now that we have introduced the Live Visual Tree, let’s explore the top menu
    bar.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了实时视觉树，让我们探索顶部菜单栏。
- en: Exploring the Live Visual Tree top menu bar
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索实时视觉树顶部菜单栏
- en: The Live Visual Tree *top menu bar* provides some handy features to navigate
    through the code base and help us debug our layouts.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 实时视觉树 *顶部菜单栏* 提供了一些方便的功能，可以帮助我们在代码库中导航并帮助我们调试布局。
- en: '*Figure 5* *.11* shows the Live Visual Tree top menu bar:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 5.11* 显示了实时视觉树顶部菜单栏：'
- en: '![Figure 5.11 – The Live Visual Tree menu](img/B22218_05_11.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.11 – 实时视觉树菜单](img/B22218_05_11.jpg)'
- en: Figure 5.11 – The Live Visual Tree menu
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – 实时视觉树菜单
- en: 'Let’s explore these features of the Live Visual Tree with a comprehensive overview
    of how we can utilize them:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过全面概述我们可以如何利用它们来探索实时视觉树的这些功能：
- en: '**Select Elements in the Running Application** : This feature enables us to
    pick a UI element within the application.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**在运行的应用程序中选择元素**：此功能使我们能够在应用程序中选取一个 UI 元素。'
- en: The Live Visual Tree then automatically updates to display the corresponding
    node in the tree, along with its properties. This functionality is invaluable
    for swiftly identifying and inspecting specific elements within our application.
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，实时视觉树会自动更新以显示树中的相应节点及其属性。此功能对于快速识别和检查我们应用程序中的特定元素非常有价值。
- en: '**Display Layout Adorners in the Running Application** : This mode showcases
    horizontal and vertical lines outlining the bounds of the selected object, along
    with rectangles indicating the margins. These visual aids make it easy to align
    and space UI elements, aiding in the identification of layout issues.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Preview Selection** : This mode reveals the XAML declaration of the selected
    element, provided we have access to an application’s source code. It’s a convenient
    feature for swiftly navigating to the source code of a selected element in the
    Live Visual Tree.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Just My XAML** : By default, the Live Visual Tree streamlines the view of
    XAML elements using the **Just My XAML** feature. This functionality hides elements
    that we’re probably not directly interested in, simplifying navigation through
    the tree. We can toggle this feature on and off using the **Show Just My XAML**
    button on the **Live Visual Tree** toolbar. Note that Visual Studio for Mac does
    not currently support this feature.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both the Live Tree View and XAML preview features are seamlessly supported by
    the Hot Reload feature provided by Visual Studio 2022. **Hot Reload** works by
    monitoring the source code for changes. When a change is detected, Hot Reload
    applies the changes to the running application without requiring a full rebuild.
    This means we can see the effects of our changes immediately, without losing the
    current state of the application.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have explored the main tooling to enhance our experience with MAUI
    development, in the next section, we’ll see how we can debug our application directly
    on devices.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Debugging on devices
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen earlier in this chapter, we can easily run our app as a **universal**
    **windows platform** ( **UWP)** or through an emulator of each existing device’s
    OS. Debugging a .NET MAUI app directly on a device using Visual Studio involves
    several steps. This process allows us to test our app on a real device, which
    can be particularly useful for testing features that require specific hardware
    capabilities, or for performance testing.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will follow a step-by-step guide on how to do debugging
    on a device.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: Enabling Developer Mode on our device
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To debug your MAUI application on a device, it’s essential to first activate
    **Developer Mode** . However, the steps to do this differ, based on the device’s
    OS.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the steps to enable Developer Mode on Windows, Android, and iOS
    devices:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: '**For Windows devices** : Go to **Settings** | **Update and Security | For
    Developers** and select **Developer Mode** .'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For Android devices** : Navigate to **Settings** | **About phone** | **Software
    information** and select the **Build number** option, tapping it seven times to
    unlock **Developer Options** . Afterward, return to **Settings** | **Developer
    options** and turn on USB debugging.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**For iOS devices** : You need to have a Mac with Xcode installed. Connect
    your iOS device to your Mac, open Xcode, go to **Window** | **Devices and Simulators**
    , select your device, and enable **Connect** **via network** .'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对于iOS设备**：您需要有一台安装了Xcode的Mac。将您的iOS设备连接到您的Mac，打开Xcode，转到**窗口** | **设备和模拟器**，选择您的设备，并启用**通过网络连接**。'
- en: The position of the **Developer Mode** option can vary, depending on the user
    interface of your device. If you’re having trouble locating USB debugging, it
    is helpful to refer to your device’s manual for guidance.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**开发者模式**选项的位置可能因设备用户界面而异。如果您在查找USB调试时遇到困难，参考设备手册以获取指导将很有帮助。'
- en: Networking device
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络设备
- en: The final step is to connect the device to the computer. This process will depend
    on our device. Let’s explore both main use cases.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是将设备连接到计算机。这个过程将取决于我们的设备。让我们探索两种主要的使用案例。
- en: Android
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安卓
- en: When using Android, it’s preferable to use USB, as it’s the easiest and most
    reliable method.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Android时，最好使用USB，因为它是最简单、最可靠的方法。
- en: Once connected, your device will ask you to confirm whether you trust the computer
    if it’s the first time you’ve debugged on it. You also have the option to select
    **Always allow from this computer** to avoid this prompt in the future.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 连接后，您的设备将询问您是否信任该计算机（如果这是您第一次在其上进行调试）。您还可以选择**始终允许来自此计算机**以避免将来出现此提示。
- en: Alternatively, it’s possible to debug an Android device over Wi-Fi, eliminating
    the need for a physical connection to the computer. Although this method requires
    more effort to set up, it can be beneficial when the device is situated far from
    the computer and a constant cable connection is impractical.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您还可以通过Wi-Fi调试Android设备，从而消除需要物理连接到计算机的需求。尽管这种方法需要更多设置工作，但在设备远离计算机且无法实现持续电缆连接的情况下，它可能是有益的。
- en: iOS with Hot Restart
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 带有热重启的iOS
- en: '**Hot Restart** is a feature in Visual Studio 2022 that allows you to quickly
    redeploy your app to an iOS device without having to go through the full build
    and deploy process. This can significantly speed up your development cycle, especially
    when you’re making frequent changes and need to test them on a device. Here’s
    how to use Hot Restart for iOS deployment in Visual Studio 2022.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '**热重启**是Visual Studio 2022中的一个功能，允许您快速将应用程序重新部署到iOS设备，而无需经过完整的构建和部署过程。这可以显著加快您的开发周期，尤其是在您频繁更改并需要在设备上测试它们时。以下是使用Visual
    Studio 2022进行iOS部署的热重启的使用方法。'
- en: 'To set up Hot Restart, follow these steps:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置热重启，请按照以下步骤操作：
- en: First, in the Visual Studio toolbar, choose **iOS Local Devices** from the **Debug**
    target drop-down menu, and then select **Local Device** .
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在Visual Studio工具栏中，从**调试**目标下拉菜单中选择**iOS本地设备**，然后选择**本地设备**。
- en: '![Figure 5.12 – iOS Local Devices](img/B22218_05_12.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.12 – iOS 本地设备](img/B22218_05_12.jpg)'
- en: Figure 5.12 – iOS Local Devices
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – iOS 本地设备
- en: This action prompts the **Setup Hot Restart** setup wizard to launch on the
    start of the debugging, guiding us through the process of setting up a local iOS
    device for Hot Restart deployment. Then, select **Next** to proceed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作将在调试开始时启动**设置热重启**设置向导，引导我们设置本地iOS设备以进行热重启部署。然后，选择**下一步**以继续。
- en: If iTunes isn’t installed, the setup wizard prompts us to download it. We can
    install iTunes either from the Microsoft Store or Apple’s website.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果未安装iTunes，设置向导会提示我们下载它。我们可以从Microsoft Store或Apple的网站安装iTunes。
- en: Next, connect your iOS device to your development machine using a USB cable,
    and trust your development machine when prompted on the device. Once your local
    iOS device is detected, click **Next** in the setup wizard.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用USB线将您的iOS设备连接到您的开发机器，并在设备上被提示时信任您的开发机器。一旦您的本地iOS设备被检测到，请在设置向导中点击**下一步**。
- en: Configure **Hot Restart** to use your individual Apple Developer Program account
    by clicking the **Sign in with an individual account** hyperlink and providing
    your App Store Connect API key data. Clicking **Finish** completes the setup wizard,
    adding your Apple Developer Program account to Visual Studio.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**使用个人账户登录**超链接并提供您的App Store Connect API密钥数据，配置**热重启**以使用您的个人Apple开发者计划账户。点击**完成**将完成设置向导，并将您的Apple开发者计划账户添加到Visual
    Studio中。
- en: In **Solution Explorer** , right-click on your project and select **Properties**
    . Under **iOS** | **Bundle Signing** , choose **Automatic Provisioning** from
    the **Scheme** drop-down menu and click **Configure** **Automatic Provisioning**
    .
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **解决方案资源管理器** 中，右键单击您的项目并选择 **属性**。在 **iOS** | **捆绑签名** 下，从 **方案** 下拉菜单中选择
    **自动配置**，然后点击 **配置** **自动配置**。
- en: In the **Configure Automatic Provisioning** dialog, select the team for your
    Connect API key, and then Visual Studio completes the automatic provisioning process.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **配置自动配置** 对话框中，选择您的 Connect API 密钥所在的团队，然后 Visual Studio 完成自动配置过程。
- en: Finally, click **OK** to dismiss the dialog.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击 **确定** 关闭对话框。
- en: The final step is to launch the debugging session targeting our device.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是启动针对我们的设备的调试会话。
- en: Launching the debugging session
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动调试会话
- en: Now, Visual Studio will recognize our device, and the option to debug directly
    on it appears.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Visual Studio 将识别我们的设备，并出现直接在其上调试的选项。
- en: '![Figure 5.13 – Android Local Devices](img/B22218_05_13.jpg)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.13 – Android 本地设备](img/B22218_05_13.jpg)'
- en: Figure 5.13 – Android Local Devices
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – Android 本地设备
- en: When we select the **Debug-on-Device** option, our application installs on the
    phone. Subsequently, we must initiate the application to commence debugging, similar
    to how we do it on emulators or Windows machines.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们选择 **设备调试** 选项时，我们的应用程序将安装在手机上。随后，我们必须启动应用程序以开始调试，这与我们在模拟器或 Windows 机器上所做的方式类似。
- en: After learning about MAUI, exploring the tools available in Visual Studio, and
    debugging on local devices, you may find yourself with an existing Xamarin project
    to migrate to MAUI. Let’s explore how to leverage Visual Studio extensions to
    achieve this effortlessly.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解 MAUI、探索 Visual Studio 中的工具以及在本地设备上进行调试后，您可能会发现自己有一个现有的 Xamarin 项目需要迁移到 MAUI。让我们探讨如何利用
    Visual Studio 扩展轻松实现这一点。
- en: Migrate from Xamarin
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Xamarin 迁移
- en: In this section, we will see how to migrate a legacy project written with Xamarin
    to a cutting-edge MAUI application. First, we will explore the key difference
    between MAUI and Xamarin. Then, finally, we will install the .NET Upgrade Assistant
    to use to migrate our project.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解如何将使用 Xamarin 编写的遗留项目迁移到前沿的 MAUI 应用程序。首先，我们将探讨 MAUI 和 Xamarin 之间的关键差异。然后，最后，我们将安装
    .NET 升级助手以用于迁移我们的项目。
- en: Understanding the key differences
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解关键差异
- en: MAUI is considered the successor to Xamarin; however, there are some key differences
    between them.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: MAUI 被认为是 Xamarin 的继任者；然而，它们之间有一些关键差异。
- en: '**Xamarin** is a framework within the .NET ecosystem that enables developers
    to create cross-platform applications using C# and .NET. It supports major platforms
    such as Android, iOS, and Windows (UWP). Xamarin facilitates the development of
    native applications, ensuring high performance and native user experiences by
    compiling code into platform-specific native binaries.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '**Xamarin** 是 .NET 生态系统中的一个框架，它允许开发人员使用 C# 和 .NET 创建跨平台应用程序。它支持主要平台，如 Android、iOS
    和 Windows (UWP)。Xamarin 通过将代码编译成特定平台的本地二进制文件，促进了原生应用程序的开发，确保了高性能和原生用户体验。'
- en: Conversely, MAUI is the next iteration of Xamarin.Forms, designed to streamline
    cross-platform development further. It expands platform support to include Android,
    iOS, macOS, and Windows, aiming for a unified code base across these platforms.
    MAUI prioritizes modern development practices, focusing on performance optimization
    and delivering native-like experiences.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，MAUI 是 Xamarin.Forms 的下一版本，旨在进一步简化跨平台开发。它扩展了平台支持，包括 Android、iOS、macOS 和 Windows，旨在实现这些平台上的统一代码库。MAUI
    优先考虑现代开发实践，专注于性能优化并提供类似原生的体验。
- en: Xamarin.Forms provide a comprehensive set of UI controls and layouts that are
    rendered natively on each supported platform. While developers share code across
    platforms, Xamarin.Forms ensure that UI elements conform to the native look and
    feel of each platform, ensuring consistency across devices.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: Xamarin.Forms 提供了一套全面的 UI 控件和布局，这些控件在每个支持的平台上都以原生方式渲染。虽然开发人员在平台之间共享代码，但 Xamarin.Forms
    确保用户界面元素符合每个平台的原生外观和感觉，确保设备之间的一致性。
- en: Further to this, MAUI introduces a fresh collection of controls and layouts
    designed to enhance efficiency and flexibility. It aims to deliver a modern, unified
    UI experience across all supported platforms, bridging the gap between native
    and cross-platform app development.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，MAUI 引入了一组全新的控件和布局，旨在提高效率和灵活性。它旨在为所有支持的平台提供现代、统一的 UI 体验，弥合原生和跨平台应用程序开发之间的差距。
- en: In order to migrate our legacy Xamarin project, we have two options – doing
    it manually or using the Upgrade Assistant. Let’s explore how to use the .NET
    Upgrade Assistant.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Using the .NET Upgrade Assistant
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the options to migrate our project is to modify each file of a Xamarin
    project to MAUI by creating a new MAUI project. This way could be time-consuming
    and need a complete understanding of the project. However, it’s a great option
    for large and complicated projects.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, we can use the **.NET Upgrade Assistant** to facilitate our process.
    The .NET Upgrade Assistant can be installed either as a Visual Studio extension
    or a.NET command-line tool. Here, in our example, we will use it as a Visual Studio
    extension.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'The.NET Upgrade Assistant is available for installation as a Visual Studio
    extension or a.NET command-line tool through the following methods:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: While Visual Studio is active, navigate to **Extensions** | **Manage Extensions**
    to open the **Manage** **Extensions** window.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Manage Extensions** window, search for **upgrade** in the search box.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose the . **NET Upgrade Assistant** option, and then click **Install** .
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.14 – Installing the extension .NET Upgrade Assistant](img/B22218_05_14.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: Figure 5.14 – Installing the extension .NET Upgrade Assistant
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: Once the extension finishes downloading, the installation will be launched when
    Visual Studio is closed, and then follow the instructions to install it.
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After installation, right-click on the project node in the **Solution Explorer**
    and select **Upgrade** .
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 5.15 – Select Upgrade](img/B22218_05_15.jpg)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Select Upgrade
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'That will open up a window to select between two options (see *Figure 5* *.16*
    ):'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**In-place project upgrade** : This will replace the legacy project with the
    new one.'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Side-by-side project upgrade** : This will create a new project containing
    the new MAUI project.'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 5.16 – The upgrade options](img/B22218_05_16.jpg)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – The upgrade options
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: I advise choosing the **Side-by-side project upgrade** option to ensure the
    safety of our working Xamarin project until the upgrade has been successfully
    completed.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Then, we just need to follow the steps of the wizard to complete the upgrade.
    The upgrade assistant is a good option for relatively simple projects. However,
    at the end of the process, we may need to make some manual adjustments.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: For complex and large projects, the upgrade should be done manually, following
    the step-by-step instructions found in books dedicated to MAUI.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we embarked on a journey into the depths of multi-platform
    app UI development using Visual Studio 2022, with a focus on .NET MAUI. From unraveling
    the essence of .NET MAUI to mastering essential tools for efficient development,
    debugging across diverse devices, and seamlessly transitioning from Xamarin, we’ve
    equipped ourselves with the knowledge and skills necessary to craft compelling
    multi-platform applications.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Throughout our exploration, we’ve gained a comprehensive understanding of .NET
    MAUI’s core principles and significance in modern application development. We’ve
    delved into the arsenal of tools tailored for .NET MAUI development within Visual
    Studio 2022, harnessing their power to create, preview, and debug applications,
    with confidence and precision.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的探索过程中，我们已经全面了解了.NET MAUI的核心原则及其在现代应用开发中的重要性。我们深入研究了Visual Studio 2022为.NET
    MAUI开发量身定制的工具库，利用它们的力量以信心和精确度创建、预览和调试应用程序。
- en: In the next chapter, we’ll explore the latest features of Visual Studio 2022
    to enhance our web development experience.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Visual Studio 2022的最新功能，以增强我们的Web开发体验。
