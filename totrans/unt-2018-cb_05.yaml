- en: Creating Textures, Maps, and Materials
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建纹理、贴图和材料
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍：
- en: Creating a basic material with Standard Shader (Specular setup)
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用标准着色器（镜面设置）创建基本材料
- en: Adapting a basic material from Specular setup to Metallic
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将基本材料从镜面设置调整为金属
- en: Applying Normal maps to a Material
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将法线贴图应用于材料
- en: Adding Transparency and Emission maps to a material
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将透明度和发射贴图添加到材料中
- en: Highlighting materials at mouse-over
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标悬停时突出显示材料
- en: Adding Detail maps to a material
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将细节贴图添加到材料中
- en: Fading the transparency of a material
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渐变材料的透明度
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: 'There is a close relationship between **Textures**, **Materials**, and **Shaders**,
    and their relationships are important:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**纹理**、**材料**和**着色器**之间存在密切关系，它们之间的关系很重要：'
- en: Textures are two-dimensional images. The surface of 2D and 3D objects in Unity
    games are defined by meshes. The **Texture** images are mapped onto meshes by
    **Materials** – each point (vertex) on a mesh has to be mapped to some value in
    the **Texture**. A **Texture** may indicate colors, but may indicate bumps/wrinkles
    or transparency – all of which can contribute to determining what is finally rendered
    for the user to see.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 纹理是二维图像。Unity 游戏中 2D 和 3D 对象的表面由网格定义。**纹理**图像通过**材料**映射到网格上——网格上的每个点（顶点）都必须映射到纹理中的某个值。**纹理**可以指示颜色，但也可以指示凹凸/皱纹或透明度——所有这些都可以有助于确定最终渲染给用户看到的内容。
- en: '**Materials** specify which **Shader** should be used to render the images
    onto the meshes, plus values for the **Shader''s** parameters (such as which textures/parts
    of a texture map, colors, other values). Learn more at the Unity documentation
    page about Materials: [https://docs.unity3d.com/Manual/Materials.html](https://docs.unity3d.com/Manual/Materials.html).'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**材料**指定应使用哪个**着色器**将图像渲染到网格上，以及**着色器**参数的值（例如哪些纹理/纹理图的哪些部分、颜色、其他值）。有关材料的更多信息，请参阅
    Unity 文档页面：[https://docs.unity3d.com/Manual/Materials.html](https://docs.unity3d.com/Manual/Materials.html)。'
- en: '**Shaders** define the method to render an object. **Shaders** can use multiple
    textures for more sophisticated results, and specify which parameters may be customized
    in the Material Inspector. At the end of the day, **Shaders** are code and mathematics,
    but Unity provides a set of **Shaders** for us. We can also use the new **Shader
    Graph** package, which allows the creation of sophisticated **Shaders** using
    a visual, drag-and-drop graphing interface. In addition, custom shaders can be
    written in the **ShaderLab** language.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**着色器**定义了渲染对象的方法。**着色器**可以使用多个纹理以获得更复杂的结果，并指定在材料检查器中可以自定义哪些参数。最终，**着色器**是代码和数学，但
    Unity 为我们提供了一套**着色器**。我们还可以使用新的**着色器图**包，它允许使用可视的、拖放式的图形界面创建复杂的**着色器**。此外，还可以使用**ShaderLab**语言编写自定义着色器。'
- en: Unity offers physically-based Shaders. **Physically-Based Rendering** (**PBR**)
    is a technique that simulates the appearance of **Materials** based on how the
    light reacts with that **Material** (more specifically, the matter from which
    that material is made) in the real world. Such a technique allows for more realistic
    and consistent materials. So, your creations in Unity should look better than
    ever. Creating **Materials** in Unity has also become more efficient now. Once
    you have chosen between the available workflows (**Metallic** or **Specular**
    setup; we'll get back to that later), there is no longer a need to browse the
    drop-down menus in search of specific features, as Unity optimizes the shader
    for the created **Material**, removing unnecessary code for unused properties
    once the material has been set up and the texture maps have been assigned.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Unity 提供基于物理的着色器。**基于物理渲染**（**PBR**）是一种技术，它根据光线与材料（更具体地说，该材料由何种物质制成）在现实世界中的相互作用来模拟材料的外观。这种技术可以实现更真实和一致的材料。因此，你在
    Unity 中的创作应该比以往任何时候都要好。在 Unity 中创建**材料**现在也变得更加高效。一旦你选择了可用的工作流程（**金属**或**镜面**设置；我们稍后会回到这一点），就不再需要浏览下拉菜单以查找特定功能，因为
    Unity 会为创建的**材料**优化着色器，一旦设置好材料并分配了纹理图，就会移除未使用的属性代码。
- en: Creating and saving texture maps
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和保存纹理图
- en: The visual aspects of a material can be modified through the use of textures.
    In order to create and edit image files, you will need an image editor, such as
    Adobe Photoshop (the industry standard, and has its native format supported by
    Unity) or GIMP. In order to follow the recipes in this chapter, it's strongly
    recommended that you have access to a few pieces of software such as these.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 材质的可视方面可以通过使用纹理进行修改。为了创建和编辑图像文件，您需要一个图像编辑器，例如Adobe Photoshop（行业标准，并且其原生格式由Unity支持）或GIMP。为了遵循本章中的配方，强烈建议您能够访问这些软件中的一两件。
- en: 'When saving **Texture Maps**, especially the ones that have an **Alpha Channel**,
    you might want to choose an adequate file format. PSD, Photoshop''s native format,
    is practical for preserving the original artwork in many layers. The PNG format
    is also a great option, but please note that Photoshop doesn''t handle PNG''s
    **Alpha Channel** independently of the transparency, possibly compromising the
    material''s appearance. Also, PNG files don''t support layers. For this chapter,
    we will often use the TIF format for three main reasons:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当保存**纹理贴图**，尤其是带有**Alpha通道**的贴图时，您可能希望选择一个合适的文件格式。PSD是Photoshop的原生格式，对于保留许多图层的原始艺术品来说很实用。PNG格式也是一个很好的选择，但请注意，Photoshop不会独立于透明度处理PNG的**Alpha通道**，这可能会影响材质的外观。此外，PNG文件不支持图层。对于本章，我们将经常使用TIF格式，主要原因如下：
- en: It's open to those not using Photoshop
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对不使用Photoshop的人来说也是开放的
- en: It uses layers
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它使用图层
- en: It preserves the **Alpha Channel** information
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它保留了**Alpha通道**信息
- en: The file size is significantly greater than in PSDs and PNGs, so feel free to
    save your work as PSDs (if you have Photoshop) or PNGs (if you don't need layers
    and, if using Photoshop, **Alpha Channels**).
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 文件大小明显大于PSDs和PNGs，因此请随意将您的作品保存为PSDs（如果您有Photoshop）或PNGs（如果您不需要图层，并且在使用Photoshop时，**Alpha通道**）。
- en: 'Finally, a word of advice: although it''s possible to manually create **Texture
    Maps** for our materials by using the traditional image-editing software, new
    tools such as Allegorthmic''s Substance Painter and Bitmap2Material make this
    work much more efficient, complete, and intuitive, complementing the traditional
    **Texture**-making process or replacing it altogether. These tools provide Texture
    work support in a similar way to what zBrush and Mudbox did for 3D modeling. For
    design professionals, we strongly recommend at least trying such tools. Note,
    however, that products from Allegorithmic won''t make use of Unity''s Standard
    Shader, relying on the substance files (which are natively supported by Unity).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，给出一些建议：虽然我们可以通过使用传统的图像编辑软件手动创建**纹理贴图**来制作我们的材质，但像Allegorthmic的Substance Painter和Bitmap2Material这样的新工具使这项工作变得更加高效、完整和直观，补充了传统的**纹理**制作过程，甚至完全取代了它。这些工具以类似于zBrush和Mudbox对3D建模所做的方式提供纹理工作支持。对于设计专业人士，我们强烈建议至少尝试这样的工具。然而，请注意，Allegorithmic的产品不会使用Unity的标准着色器，而是依赖于substance文件（这些文件是Unity原生支持的）。
- en: The big picture
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 整体情况
- en: 'To understand the **Standard Shaders**, it''s a good idea to know the workflows,
    their properties, and how they affect the material''s appearance. There are, however,
    many possible ways to work with **Materials** – texture map requirements, for
    instance, might change from engine to engine, or from one tool to another. Presently,
    Unity supports two different workflows: one based on **Specular**, and another
    based on Metallic values. Although both workflows share similar properties (such
    as **Normal**, **Height**, **Occlusion**, and **Emission**), they differ in the
    way the diffuse color and reflectance properties are set up.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解**标准着色器**，了解工作流程、它们的属性以及它们如何影响材质的外观是很好的。然而，有许多可能的工作方式与**材质**一起工作——例如，纹理贴图要求可能因引擎而异，或从一种工具到另一种工具而异。目前，Unity支持两种不同的工作流程：一种基于**镜面反射**，另一种基于**金属值**。尽管两种工作流程具有相似的性质（如**法线**、**高度**、**遮挡**和**发射**），但它们在设置漫反射颜色和反射特性方面有所不同。
- en: Standard Shader (Specular workflow)
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准着色器（镜面反射工作流程）
- en: 'Unity''s Standard **Shader** (**Specular** setup) uses **Albedo** and **Specular/Smoothness**
    maps, combining them to create some of the material''s aspect – mainly its color
    and reflectance qualities. The following shows the difference between the **Albedo**
    and **Smoothness** maps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的标准**着色器**（**镜面反射**设置）使用**阿尔贝多**和**镜面/平滑度**贴图，将它们结合起来以创建材质的一些特性——主要是其颜色和反射特性。以下显示了**阿尔贝多**和**平滑度**贴图之间的差异：
- en: '**Albedo**: This is the material''s diffused color. Plainly and simply, this
    is how you usually describe the appearance of the **Material** (the British flag
    is red, white and blue; Ferrari''s logo is a black horse in a yellow setting;
    some sunglasses'' lenses are semi-transparent gradients). This description, however,
    can be deceptive. Purely metallic objects (such as aluminum, chrome, and gold)
    should have black as their diffuse color. Their colors, as we perceive them, have
    originated from their specular channel. Non-metallic objects (plastic, wood, and
    even painted or rusted metal), on the other hand, have very distinct diffuse colors.
    **Texture Maps** for the **Albedo** property feature RGB channels for colors and
    (optionally) an Alpha Channel for transparency.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率**: 这是指材料的漫反射颜色。简单来说，这就是你通常描述材料外观的方式（比如，英国的旗帜是红、白、蓝；法拉利的标志是一个黑色马匹在黄色背景上；一些太阳镜的镜片是半透明的渐变）。然而，这种描述可能会误导。纯金属物体（如铝、铬和金）应该有黑色作为它们的漫反射颜色。我们感知到的颜色，实际上来源于它们的镜面通道。另一方面，非金属物体（如塑料、木材，甚至是涂漆或生锈的金属）具有非常明显的漫反射颜色。**反照率纹理图**用于**反照率属性**，具有RGB通道用于颜色，以及（可选）用于透明度的Alpha通道。'
- en: '**Specular/Smoothness**: This refers to the shininess of the material. **Texture**
    maps make use of RGB channels for specular color (which inform hue and intensity),
    and **Alpha Channel** for smoothness/gloss (dark values for less shiny surfaces
    and blurred reflections; light/white values for shiny, mirror-like appearance).
    It is important to note that non-metallic objects feature neutral, very dark specular
    colors (with plastic, for instance, you should work with a grey value around 59).
    Metallic objects, on the other hand, feature very light values, and are also a
    bit yellowish in hue.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜面/光滑度**: 这指的是材料的亮度。**纹理图**使用RGB通道用于镜面颜色（提供色调和强度信息），以及**Alpha通道**用于光滑度/光泽（暗值用于较不光滑的表面和模糊的反射；亮/白色值用于光滑、镜面般的外观）。重要的是要注意，非金属物体具有中性、非常暗的镜面颜色（例如，对于塑料，你应该使用大约59的灰色值）。另一方面，金属物体具有非常亮的值，并且在色调上略带黄色。'
- en: 'To illustrate such concepts, we have created a battery object, featuring brushed
    metal caps and a plastic body. Observe how each map contributes to the final result:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这些概念，我们创建了一个电池对象，具有磨砂金属盖和塑料外壳。观察每个图如何贡献于最终结果：
- en: '![](img/0be3aaf1-343d-4ed6-b6a6-ec64080ec85e.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0be3aaf1-343d-4ed6-b6a6-ec64080ec85e.png)'
- en: Standard Shader (Metallic workflow)
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标准着色器（金属工作流程）
- en: 'Unity''s default **Standard Shader** combines **Albedo** and **Metallic**/**Glossiness**
    maps to create the color and reflectance qualities of the material. The following
    are the differences:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Unity的默认**标准着色器**将**反照率**和**金属**/**光泽度**图结合以创建材料的颜色和反射特性。以下是一些区别：
- en: '**Albedo**: As in the **Specular** workflow, this is the **Material''s** diffuse
    color; how you would describe the **Material**. However, **Albedo** maps for the
    Metallic workflow should be configured in a slightly different way than ones for
    **Specular** workflow. This time around, the perceived diffuse color of metallic
    materials (grey for iron, yellow/orange for golden, and so on) have to be present
    in the Albedo map. Again, Albedo maps feature RGB channels for the colors and
    (optionally) an Alpha Channel for transparency.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率**: 如同**镜面**工作流程，这是**材料**的漫反射颜色；你描述材料的方式。然而，金属工作流程中的**反照率图**应该以略不同于**镜面**工作流程的方式配置。这一次，金属材料的感知漫反射颜色（如铁灰色、金色黄色/橙色等）必须存在于反照率图中。再次强调，反照率图具有RGB通道用于颜色，以及（可选）用于透明度的Alpha通道。'
- en: '**Metallic/Smoothness**: This refers to how metallic the **Material** looks.
    **Metallic Texture Maps** make use of the Red channel for the **Metallic** value
    (black for non-metallic and white for metallic **Materials** that are not painted
    or rusted) and the **Alpha Channel** for smoothness (in a similar way to the **Specular**
    workflow). Please note that **Metallic** maps do not include any information on
    hue, and in these cases the yellow-ish nature of the metallic gloss should be
    applied to the **Albedo** map.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金属/光滑度**: 这指的是材料看起来有多金属。**金属纹理图**使用红色通道用于**金属值**（非金属为黑色，未涂漆或未生锈的金属为白色）和**Alpha通道**用于光滑度（与**镜面**工作流程类似）。请注意，**金属图**不包含任何关于色调的信息，在这些情况下，金属光泽的黄色性质应该应用于**反照率图**。'
- en: 'To reproduce the battery that illustrated the **Specular** workflow by using
    the Metallic workflow, maps would have to be recreated as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过金属工艺流程重现说明**镜面反射**工作流程的电池，需要按照以下方式重新创建贴图：
- en: '![](img/10084c58-6e08-4a11-85dd-4886cdcedbc6.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/10084c58-6e08-4a11-85dd-4886cdcedbc6.png)'
- en: 'You might have noticed that we''ve used white to convey a metallic object.
    Technically, since only the Red channel is relevant, we could have used red (R:
    255, G: 0, B: 0), yellow (R: 255, G: 255, B: 0), or, for that matter, any color
    that has a red value of 255.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '您可能已经注意到，我们使用白色来传达金属物体。技术上，由于只有红色通道相关，我们也可以使用红色（R: 255, G: 0, B: 0）、黄色（R: 255,
    G: 255, B: 0）或任何具有255红色值的颜色。'
- en: 'The Unity documentation pages provide two very useful charts giving examples
    of common properties for the **Standard Shader** **Metallic** and **Specular**
    workflows ([https://docs.unity3d.com/Manual/StandardShaderMaterialCharts.html](https://docs.unity3d.com/Manual/StandardShaderMaterialCharts.html)):'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Unity文档页面提供了两个非常有用的图表，展示了**标准着色器**的**金属**和**镜面反射**工作流程的常见属性示例（[https://docs.unity3d.com/Manual/StandardShaderMaterialCharts.html](https://docs.unity3d.com/Manual/StandardShaderMaterialCharts.html)）：
- en: '![](img/5e14f4b7-f16c-4aa3-82a1-cb0b6bfefee4.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e14f4b7-f16c-4aa3-82a1-cb0b6bfefee4.png)'
- en: Other material properties
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他材质属性
- en: 'It''s also worth mentioning that Unity''s **Standard Shaders** support other
    maps such as:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还值得一提的是，Unity的**标准着色器**支持其他贴图，例如：
- en: '**Normal Maps**: The normal map adds detailed bumpiness into the **Material**,
    simulating a more complex geometry. For instance, the internal ring on the positive
    (top) node of the battery that illustrated shader workflows is not modeled in
    the 3D object''s geometry, but rather created through a simple **Normal Map**.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**法线贴图**：法线贴图在**材质**中添加了详细的凹凸效果，模拟更复杂的几何形状。例如，电池中正（顶部）节点内部的环形结构，在说明着色器工作流程的3D对象几何形状中并未建模，而是通过一个简单的**法线贴图**创建的。'
- en: '**Occlusion Maps**: A greyscale map is used to simulate the dark sections of
    an object under ambient light. Usually, it is used to emphasize joints, creases,
    and other details of geometry.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**遮挡贴图**：使用灰度图来模拟在环境光下物体的暗部区域。通常，它用于强调关节、褶皱和其他几何形状的细节。'
- en: '**Height Maps**: These add a displacement effect, giving the impression of
    depth without the need for complex geometry.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高度贴图**：这些添加了一个位移效果，给人一种深度感，而不需要复杂的几何形状。'
- en: '**Emission Maps**: These add color emitted by the **Material**, as if self-illuminated,
    such as fluorescent surfaces or LCDs. **Texture** maps for Emission maps feature
    RGB channels for color.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**发射贴图**：这些为**材质**添加发射出的颜色，就像自发光一样，例如荧光表面或LCD。发射贴图的**纹理**具有RGB通道用于颜色。'
- en: Resources
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 资源
- en: '**Physically-Based Rendering** (**PBR**) is a complex (and current) topic,
    so it''s a good idea to study it a bit by familiarizing yourself with the tools
    and concepts behind it. To help you with this task, we have included a non-exhaustive
    list of resources that you should take a look at.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于物理的渲染**（**PBR**）是一个复杂（且当前）的话题，因此熟悉其背后的工具和概念是很好的学习方式。为了帮助您完成这项任务，我们提供了一份非详尽的资源列表，您应该查看一下。'
- en: Unity samples and documentation
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Unity样本和文档
- en: 'Before you start, it might be a good idea to read Unity''s documentation on
    **Textures**, **Materials**, and **Shaders**. They can be found online:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，阅读Unity关于**纹理**、**材质**和**着色器**的文档可能是个不错的主意。它们可以在网上找到：
- en: '[https://docs.unity3d.com/Manual/Textures.html](https://docs.unity3d.com/Manual/Textures.html)'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.unity3d.com/Manual/Textures.html](https://docs.unity3d.com/Manual/Textures.html)'
- en: '[https://docs.unity3d.com/Manual/Materials.html](https://docs.unity3d.com/Manual/Materials.html)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.unity3d.com/Manual/Materials.html](https://docs.unity3d.com/Manual/Materials.html)'
- en: '[https://docs.unity3d.com/Manual/shader-StandardShader.html](https://docs.unity3d.com/Manual/shader-StandardShader.html)'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.unity3d.com/Manual/shader-StandardShader.html](https://docs.unity3d.com/Manual/shader-StandardShader.html)'
- en: This chapter covers a number of techniques used to create, often manually and
    sometimes automatically, texture maps that are capable of giving distinctive features
    to materials. Hopefully, you will become confident working with Unity's **Physically-Based
    Shading**, which is capable of understanding differences between available workflows,
    is aware of the role of each material property, and is ready to make better-looking
    materials for your games. We have also explored ways of changing the properties
    of materials during runtime by accessing an object's **Material** via script.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了创建纹理贴图的技术，这些贴图通常手动创建，有时也自动创建，能够为材料提供独特的特征。希望您在使用Unity的**基于物理的着色**时能够自信，它能够理解不同工作流程之间的差异，了解每个材料属性的作用，并准备好为您的游戏制作更美观的材料。我们还探讨了通过脚本访问对象的**材质**来在运行时更改材料属性的方法。
- en: 'Unity has put together a great resource for those looking for some pointers
    regarding how to set up maps for a variety of materials:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Unity为那些寻找如何为各种材料设置贴图指南的人准备了一份很好的资源：
- en: 'The **Shader Calibration** **Scene**, which can be downloaded (for free) from
    the Unity Asset Store. It is a fantastic collection, featuring sample materials
    (both **Metallic** and **Specular** setup) for wood, metal, rubber, plastic, glass,
    skin, mud, and much more: [https://assetstore.unity.com/packages/essentials/tutorial-projects/shader-calibration-scene-25422](https://assetstore.unity.com/packages/essentials/tutorial-projects/shader-calibration-scene-25422).'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Shader Calibration** **场景**，可以从Unity Asset Store免费下载。这是一个出色的集合，包括木材、金属、橡胶、塑料、玻璃、皮肤、泥土等多种材料的样本材料（包括**金属**和**光泽**设置）：[https://assetstore.unity.com/packages/essentials/tutorial-projects/shader-calibration-scene-25422](https://assetstore.unity.com/packages/essentials/tutorial-projects/shader-calibration-scene-25422)。'
- en: References
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Here''s a list of interesting, detailed material on **Physically-Based Rendering**
    (within and outside Unity):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一份关于**基于物理的渲染**（包括和不包括Unity）的有趣、详细的材料列表：
- en: For a deep understanding of **Physically-Based** **Rendering**, we recommend
    you to take a look at The Comprehensive PBR Guide, written by Wes McDermott from
    Allegorithmic. Allegorithmic's guide takes an in-depth look at the practical and
    theoretical aspects of PBR, including a great analysis of possible workflows.
    The guide is freely available in two volumes at [http://www.allegorithmic.com/pbr-guide](http://www.allegorithmic.com/pbr-guide).
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于对**基于物理的渲染**有深入理解的读者，我们推荐您查看由Allegorithmic的Wes McDermott编写的《综合PBR指南》。Allegorithmic的指南深入探讨了PBR的实践和理论方面，包括对可能的工作流程的精彩分析。指南以两卷的形式免费提供，可在[http://www.allegorithmic.com/pbr-guide](http://www.allegorithmic.com/pbr-guide)找到。
- en: Mastering Physically Based Shading in Unity 5 by Renaldas Zioma (Unity), Erland
    Körner (Unity), and Wes McDermott (Allegorithmic), is available at [http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5](http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5).
    This is a detailed presentation about using PBS in Unity. Originally presented
    at the Unite 2014 conference, it contains some out-of-date information, but it
    is still worth taking a look at.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Renaldas Zioma（Unity）、Erland Körner（Unity）和Wes McDermott（Allegorithmic）合著的《精通Unity
    5中的基于物理的着色》可在[http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5](http://www.slideshare.net/RenaldasZioma/unite2014-mastering-physically-based-shading-in-unity-5)找到。这是一份关于在Unity中使用PBS的详细演示文稿。最初在Unite
    2014会议上展示，其中包含一些过时的信息，但仍值得一观。
- en: Physically Based Shading in Unity 5 by Aras Pranckevičius, from Unity, is available
    at [http://aras-p.info/texts/talks.html](http://aras-p.info/texts/talks.html).
    Slides and notes from a presentation on the subject are given at the GDC.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Unity的Aras Pranckevičius编写的《Unity 5中的基于物理的着色》可在[http://aras-p.info/texts/talks.html](http://aras-p.info/texts/talks.html)找到。GDC上关于该主题的演示文稿的幻灯片和笔记也提供了。
- en: 'Tutorial: Physically Based Rendering, And You Can Too! by Joe "EarthQuake"
    Wilson is available at [http://www.marmoset.co/toolbag/learn/pbr-practice](http://www.marmoset.co/toolbag/learn/pbr-practice).
    It is a great overview from the makers of Marmoset Toolbag and Skyshop.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Joe "EarthQuake" Wilson编写的教程《基于物理的渲染，你也可以做到！》可在[http://www.marmoset.co/toolbag/learn/pbr-practice](http://www.marmoset.co/toolbag/learn/pbr-practice)找到。这是Marmoset
    Toolbag和Skyshop制作者提供的一个很好的概述。
- en: Polycount PBR Wiki, available at http://wiki.polycount.com/wiki/PBR, is a list
    of resources compiled by the Polycount community.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Polycount PBR Wiki，可在http://wiki.polycount.com/wiki/PBR找到，是Polycount社区汇编的资源列表。
- en: 'Lots of general 3D graphics articles and tutorials from Jeremy Brin of Pixar:
    [http://3drender.com/](http://3drender.com/).'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pixar的Jeremy Brin提供的许多关于3D图形的一般文章和教程：[http://3drender.com/](http://3drender.com/)。
- en: Tools
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工具
- en: 'This is a new generation of texturing software for you to check out, in case
    you haven''t yet:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一款新一代的纹理软件，供您查看，以防您还没有看过：
- en: Substance Painter is a 3D painting application from Allegorithmic. It is available
    at [http://www.allegorithmic.com/products/substance-painter](http://www.allegorithmic.com/products/substance-painter).
    Again, it's worth mentioning that Allegorithmic products won't make use of Unity's
    Standard Shader, relying instead on substance files that are natively supported
    by Unity.
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Substance Painter是Allegorithmic的3D绘画应用程序。它可在[http://www.allegorithmic.com/products/substance-painter](http://www.allegorithmic.com/products/substance-painter)找到。再次提一下，Allegorithmic的产品不会使用Unity的标准着色器，而是依赖Unity原生支持的substance文件。
- en: Bitmap2Material creates full-featured materials (including normal maps and specular
    maps) from a single bitmap image. Also, it is from Allegorithmic, and it is available
    at [http://www.allegorithmic.com/products/bitmap2material](http://www.allegorithmic.com/products/bitmap2material).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bitmap2Material可以从单个位图图像创建全功能的材质（包括法线图和反射率图）。此外，它来自Allegorithmic，可在[http://www.allegorithmic.com/products/bitmap2material](http://www.allegorithmic.com/products/bitmap2material)找到。
- en: Quixel DDO is a plugin for creating PBR-ready textures in Adobe Photoshop. From
    Quixel, it is available at [http://www.quixel.se/ddo](http://www.quixel.se/ddo).
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quixel DDO是用于在Adobe Photoshop中创建PBR准备纹理的插件。来自Quixel，可在[http://www.quixel.se/ddo](http://www.quixel.se/ddo)找到。
- en: Quixel NDO is a plugin for creating Normal maps in Adobe Photoshop. From Quixel,
    it is available at [http://www.quixel.se/ndo](http://www.quixel.se/ndo).
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Quixel NDO是用于在Adobe Photoshop中创建法线图的插件。来自Quixel，可在[http://www.quixel.se/ndo](http://www.quixel.se/ndo)找到。
- en: Mari is a 3D painting tool from The Foundry. It is available at [http://www.thefoundry.co.uk/products/mari/](http://www.thefoundry.co.uk/products/mari/).
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mari是来自The Foundry的3D绘画工具。它可在[http://www.thefoundry.co.uk/products/mari/](http://www.thefoundry.co.uk/products/mari/)找到。
- en: CrazyBump is a standalone tool for Windows and Mac, which is available at [http://www.crazybump.com](http://www.crazybump.com).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CrazyBump是适用于Windows和Mac的独立工具，可在[http://www.crazybump.com](http://www.crazybump.com)找到。
- en: The GIMP normalmap plugin, available for Windows only, is available at [http://code.google.com/p/gimp-normalmap/](http://code.google.com/p/gimp-normalmap/).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于Windows的GIMP normalmap插件可在[http://code.google.com/p/gimp-normalmap/](http://code.google.com/p/gimp-normalmap/)找到。
- en: NVIDIA Texture Tools for Adobe Photoshop, available for Windows only, is available
    at [http://developer.nvidia.com/nvidia-texture-tools-adobe-photoshop](http://developer.nvidia.com/nvidia-texture-tools-adobe-photoshop).
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 仅适用于Windows的NVIDIA Texture Tools for Adobe Photoshop可在[http://developer.nvidia.com/nvidia-texture-tools-adobe-photoshop](http://developer.nvidia.com/nvidia-texture-tools-adobe-photoshop)找到。
- en: The **NormalMap Online** free online tool, developed by Christian Petry, can
    be used to generate **Normal** maps, regardless of your computers **Operating
    System**. This tool can be accessed at [http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由Christian Petry开发的**NormalMap Online**免费在线工具，可以用于生成**法线**图，无论你的计算机**操作系统**是什么。此工具可通过[http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/)访问。
- en: Additional reading
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 额外阅读
- en: 'Two new Unity features relating to **Materials** and **Textures** are the **Shader
    Graph** tool, and the **Video Player** component. Learn more about these in their
    own chapter: *Shader* Graphs and *Video Players**.*'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与**材质**和**纹理**相关的两个新Unity功能是**着色器图**工具和**视频播放器**组件。更多关于这些内容的信息请参考它们各自的章节：*着色器*图和*视频播放器**。
- en: Creating a basic material with Standard Shader (Specular setup)
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用标准着色器（反射率设置）创建基本材质
- en: In this recipe, we will learn how to create a basic **Material** using the new
    **Standard Shader** (**Specular Setup**), an Albedo map, and a **Specular**/**Smoothness**
    map. The **Material** will feature both metallic and non-metallic parts, with
    various smoothness levels.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将学习如何使用新的**标准着色器**（**反射率设置**）、Albedo图和**反射率**/**光滑度**图来创建一个基本的**材质**。该**材质**将具有金属和非金属部分，以及不同的光滑度级别。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Two files have been prepared to support this recipe: a 3D model (in FBX format)
    of a battery, and an UVW template texture (in PNG format) to guide us when creating
    the diffuse texture map. 3D models and UVW templates can be made with 3D modeling
    software, such as 3DS MAX, Maya, or Blender. All necessary files are available
    in the `05_01` folder.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 已准备了两个文件来支持此配方：一个电池的3D模型（FBX格式），以及一个用于创建漫反射纹理贴图的UVW模板纹理（PNG格式）。可以使用3D建模软件（如3DS
    MAX、Maya或Blender）创建3D模型和UVW模板。所有必要的文件都可在`05_01`文件夹中找到。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a basic material, follow these steps:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建基本材质，请按照以下步骤操作：
- en: Create a new Unity 3D project and import the **battery.fbx** and **uvw_template.png**
    files to your project.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Unity 3D项目并将**battery.fbx**和**uvw_template.png**文件导入到项目中。
- en: 'Place the battery model in the scene by dragging it from the `Assets` folder,
    in the **Project** panel, to the **Hierarchy** panel. Select it on the **Hierarchy**
    panel and make sure, via the Transform component on the **Inspector** panel, that
    it is positioned at X: 0, Y: 0, Z: 0.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '通过从**项目**面板中的`Assets`文件夹拖动电池模型到**场景**面板，将其放置在场景中。在**场景**面板中选择它，并通过**检查器**面板上的变换组件确保其位置在X:
    0, Y: 0, Z: 0。'
- en: Let's create a **Specular**/**Smoothness** map for our object. Open the image
    file called **uvw_template.png** in your image editor (we'll use Adobe Photoshop
    to illustrate the next steps). Note that the image file has only a single layer,
    mostly transparent, containing the UVW mapping templates that we will use as guidelines
    for our specular map.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为我们的对象创建一个**光泽度**/**光滑度**贴图。在您的图像编辑器中打开名为**uvw_template.png**的图像文件（我们将使用Adobe
    Photoshop来说明下一步）。请注意，图像文件只有一个图层，大部分是透明的，包含我们将用作光泽度贴图指南的UVW映射模板。
- en: 'Create a new layer and place it beneath the one with the guidelines. Fill the
    new layer with dark gray (R: 56, G: 56, B: 56). The guidelines will be visible
    at the top of the solid black fill:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个新图层并将其放置在带有辅助线的图层下方。用深灰色（R: 56, G: 56, B: 56）填充新图层。辅助线将在实色黑色填充的顶部可见：'
- en: '![](img/94875c40-4411-4dd3-a97d-9bd3502eebb9.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/94875c40-4411-4dd3-a97d-9bd3502eebb9.png)'
- en: 'Create a new layer and select the upper section of the image (the one with
    the circles). Fill that area with a slightly-hued light gray (R: 196, G: 199,
    B: 199):'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个新图层并选择图像的上部区域（带有圆圈的区域）。将该区域填充为略带颜色的浅灰色（R: 196, G: 199, B: 199）：'
- en: 'The RGB values for our specular map are not arbitrary: **Physically-Based Shading**
    takes out most of the guesswork from the mapping process, replacing it with the
    research for references. In our case, we have used colors based on the reflectance
    values of iron (the slightly-hued light gray) and plastic (the dark gray). Check
    out the chapter''s conclusion for a list of references.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的光滑度贴图的RGB值并非任意选择：**基于物理的着色**从映射过程中去除了大部分猜测，用参考研究取而代之。在我们的例子中，我们使用了基于铁（略带颜色的浅灰色）和塑料（深灰色）的反射率值。查看本章结论部分以获取参考列表。
- en: 'Use the text elements in white to add a brand, size, and positive/negative
    indicators to the battery body. Then, hide the guidelines layer:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用白色文本元素为电池主体添加品牌、尺寸和正负指示器。然后，隐藏辅助线图层：
- en: '![](img/b693e9a1-92e7-4749-8155-5a5cdb75f150.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b693e9a1-92e7-4749-8155-5a5cdb75f150.png)'
- en: 'Select all your layers and organize them into a group (in Photoshop, this can
    be done by clicking on the drop-down menu in the **Layers** window and navigating
    to Window | New Group from Layers...). Name the new group Specular:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择所有图层并将它们组织到一个组中（在Photoshop中，可以通过点击**图层**窗口中的下拉菜单并导航到窗口 | 新建组从图层...来完成）。将新组命名为光泽度：
- en: '![](img/12a9d148-88a6-4b71-bbff-0789d609a3b8.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/12a9d148-88a6-4b71-bbff-0789d609a3b8.png)'
- en: Duplicate the Specular group (in the Layers window, right-click on the group's
    name and select Duplicate Group...). Name the duplicated group Smoothness.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制光泽度组（在图层窗口中，右键单击组名并选择复制组...）。将复制的组命名为光滑度。
- en: 'Hide the Smoothness group. Expand the Specular group and hide all text layers:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏光滑度组。展开光泽度组并隐藏所有文本图层：
- en: '![](img/9b6c0e71-e9f3-497f-a268-ceb6e80870d3.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b6c0e71-e9f3-497f-a268-ceb6e80870d3.png)'
- en: 'Unhide the Smoothness group, and hide the Specular group. Select the dark gray
    layer. Make an area selection around the upper region of the battery body, and
    fill it with light gray (R: 220, G: 220, B: 220). Rescale and rearrange the Text
    layers if needed:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '显示光滑度组，并隐藏光泽度组。选择深灰色图层。在电池主体的上部区域周围创建一个区域选择，并用浅灰色（R: 220, G: 220, B: 220）填充。如有需要，重新调整和排列文本图层：'
- en: '![](img/5d02084e-2625-446a-bba2-87643d57670d.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5d02084e-2625-446a-bba2-87643d57670d.png)'
- en: Duplicate the layer that contains the gray fill for the upper section of the
    image (the one that went over the circles).
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制包含图像上部灰色填充的图层（覆盖圆圈的图层）。
- en: To add a brushed quality to this material, add a Noise filter to the duplicated
    layer (in Photoshop, this can be done by navigating to Filter | Noise | Add Noise...).
    Use 50% as the Amount and set Monochromatic to true. Then, apply a Motion Blur
    filter (Filter | Blur | Motion Blur...) using 30 pixels as the Distance.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要给这个材质添加刷子效果，向复制的图层添加噪声滤镜（在 Photoshop 中，可以通过导航到滤镜 | 噪声 | 添加噪声...）。使用 50% 作为数量，并将单色设置为
    true。然后，使用 30 像素作为距离应用运动模糊滤镜（滤镜 | 模糊 | 运动模糊...）。
- en: Duplicate the Smoothness group. Select the duplicated group and merge it into
    a single layer (on the Layers window, right-click on the group's name and select
    Merge Group).
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 Smoothness 组。选择复制的组并将其合并为单个图层（在图层窗口中，右键单击组名称并选择合并组）。
- en: 'Select the merged layer, use the *Ctrl* + a key combination to select the entire
    image, and copy it using the *Ctrl + c *keys:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择合并图层，使用 *Ctrl* + a 键组合选择整个图像，并使用 *Ctrl + c* 键复制：
- en: '![](img/aed12078-d495-485c-8852-92a9b3e904a2.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aed12078-d495-485c-8852-92a9b3e904a2.png)'
- en: Hide the merged layer and the Smoothness group. Unhide the Specular group.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏合并层和 Smoothness 组。显示 Specular 组。
- en: In your image editor, access the image channels window (in Photoshop, this can
    be done by navigating to Window | Channels). Create a New Channel. This will be
    our Alpha Channel.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的图像编辑器中，访问图像通道窗口（在 Photoshop 中，可以通过导航到窗口 | 通道来完成）。创建一个新的通道。这将是我们的高光通道。
- en: 'Paste the image that you previously copied (from the merged layer) in to the
    **Alpha** **Channel**. Set all channels as visible:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您之前复制的图像（从合并层）粘贴到 **Alpha** **通道**。将所有通道设置为可见：
- en: '![](img/f03bb096-e393-4582-916c-7b9862c0e471.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/f03bb096-e393-4582-916c-7b9862c0e471.png)'
- en: Save your image in the project's `Assets` folder as Battery_specular, either
    in Photoshop format (PSD) or TIF format.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像保存到项目的 `Assets` 文件夹中，命名为 Battery_specular，可以是 Photoshop 格式（PSD）或 TIF 格式。
- en: Let's work on the Albedo map. Save a copy of **Battery_specular** as **Battery_albedo**.
    From the **Channels** window, delete the **Alpha Channel**.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们处理 Albedo 贴图。将 **Battery_specular** 的副本保存为 **Battery_albedo**。从 **通道** 窗口删除
    **Alpha 通道**。
- en: 'From the **Layers** window, hide the **Smoothness** copy merged layer, and
    unhide the **Smoothness** group. Expand the **Smoothness** group, and hide the
    layer where the Noise filter was applied:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 **图层** 窗口隐藏 **Smoothness** 复制合并层，并显示 **Smoothness** 组。展开 **Smoothness** 组，并隐藏应用了噪声滤镜的图层：
- en: '![](img/aab26a45-d8e7-4668-b161-3ab75f3d3aea.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/aab26a45-d8e7-4668-b161-3ab75f3d3aea.png)'
- en: 'Change the color of the upper rectangle to black. Change the light gray area
    to dark red (R: 204, G: 0, B: 0), and the dark gray to red (R: 255, G: 0, B: 0).
    Rename the group Albedo and save the file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将上方的矩形颜色更改为黑色。将浅灰色区域更改为深红色（R: 204, G: 0, B: 0），并将深灰色更改为红色（R: 255, G: 0, B:
    0）。将组重命名为 Albedo 并保存文件：'
- en: '![](img/7fb820d5-5ca1-41f7-bd85-456f769ed60c.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7fb820d5-5ca1-41f7-bd85-456f769ed60c.png)'
- en: 'Go back to Unity and make sure that both files were imported. From the **Project**
    panel, create a new **Material** (menu: Create | Material). Name it Battery_MAT.'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回 Unity 并确保两个文件都已导入。从 **项目** 面板创建一个新的 **材质**（菜单：创建 | 材质）。将其命名为 Battery_MAT。
- en: 'Select Battery_MAT. From the Inspector panel, change the Shader to Standard
    (Specular setup), make sure that the rendering mode is set to Opaque, and that
    the Smoothness slider is at the maximum value of 1:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 Battery_MAT。从检查器面板，将着色器更改为标准（高光设置），确保渲染模式设置为不透明，并且平滑度滑块位于最大值 1：
- en: '![](img/6d15cd6f-0f24-4943-8181-21e63b2b3e1a.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6d15cd6f-0f24-4943-8181-21e63b2b3e1a.png)'
- en: Set Battery_specular as the Specular map, and Battery_albedo as the Albedo map
    for Battery_MAT.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Battery_specular 设置为 Specular 贴图，将 Battery_albedo 设置为 Battery_MAT 的 Albedo
    贴图。
- en: 'Drag the Battery_MAT Material from the **Project** project and drop it into
    the **battery** object in the Hierarchy:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Battery_MAT 材质从 **项目** 面板拖动并放入 Hierarchy 中的 **电池** 对象。
- en: '![](img/fb634eaa-f24c-4196-8816-beb37fd43291.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fb634eaa-f24c-4196-8816-beb37fd43291.png)'
- en: How it works...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Ultimately, the visual aspect of the battery is a combination of three properties
    of its material: **Specular**, **Smoothness,** and **Albedo**.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，电池的视觉效果是其材质的三个属性的组合：**高光**、**平滑度**和**Albedo**。
- en: 'To compose the dark red part of the plastic body, for instance, we have mixed
    the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，为了制作塑料主体的深红色部分，我们混合了以下内容：
- en: '**The Specular map (RGB)**: Very dark grey specularity (for non-metallic appearance)'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜面图（RGB）**：非常暗的灰色光泽（用于非金属外观）'
- en: '**The Smoothness (the Alpha Channel of the Specular map)**: Light gray (for
    a glossy aspect)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光滑度（镜面图的Alpha通道）**：浅灰色（用于光泽质感）'
- en: '**The Albedo map**: Dark red (for a dark-red color)'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率图**：深红色（用于深红色）'
- en: 'The light red portion, on the other hand, combines the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，浅红色部分结合以下内容：
- en: '**The Specular map (RGB)**: That same dark grey specular'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜面图（RGB）**：相同的深灰色镜面'
- en: '**The Smoothness (the Alpha Channel of the Specular map)**: Dark gray (for
    a matte aspect)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光滑度（镜面图的Alpha通道）**：深灰色（用于哑光质感）'
- en: '**The Albedo map**: Red (for a red color)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率图**：红色（用于红色）'
- en: 'Finally, the brushed metal used for the top and bottom covers combines the
    following:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用于顶部和底部盖子的刷漆金属结合以下内容：
- en: '**The Specular map (RGB)**: Light grey (for a metallic aspect)'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**镜面图（RGB）**：浅灰色（用于金属质感）'
- en: '**The Smoothness (the Alpha Channel of the Specular map)**: A blurred grey
    noise pattern (for a brushed aspect)'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**光滑度（镜面图的Alpha通道）**：模糊的灰色噪点图案（用于刷漆质感）'
- en: '**The Albedo map**: Black (for a red color)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率图**：黑色（用于红色）'
- en: Regarding how the image layers are structured, it's good practice to organize
    your layers into groups named after the property that they are related to. As
    texture maps get more diversified, it can be a good idea to keep a file that contains
    all the maps for quick reference and consistency.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 关于图像层如何组织，将你的图层组织成与它们相关的属性命名的组是一个好习惯。随着纹理图变得更加多样化，保留一个包含所有图的文件以供快速参考和一致性是一个好主意。
- en: There's more...
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The following are some things you should have in mind when working with Albedo
    maps.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用反照率图时，以下是一些你应该考虑的事项。
- en: Setting the texture type for an image file
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置图像文件的纹理类型
- en: Since image files can be used for several purposes within Unity (**Texture Maps**,
    UI textures, cursors, and more), it's a good idea to check whether the right **Texture
    Type** is assigned to your file. This can be done by selecting the image file
    in the **Project** panel, and in the **Inspector** panel by using the drop-down
    menu to select the right **Texture Type** (in this case, Texture). Please note
    that other settings can be adjusted, such as Wrap Mode, Filter Mode, and Maximum
    Size. This last parameter is very useful if you want to keep your Texture maps
    small in size for your game, while still being able to edit them in full size.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于图像文件可以在Unity中用于多个目的（**纹理图**、UI纹理、光标等），检查是否为你的文件分配了正确的**纹理类型**是一个好主意。这可以通过在**项目**面板中选择图像文件，并在**检查器**面板中使用下拉菜单选择正确的**纹理类型**（在这种情况下，纹理）来完成。请注意，可以调整其他设置，例如包裹模式、过滤模式和最大尺寸。最后一个参数非常有用，如果你想在游戏中保持纹理图的小尺寸，同时仍然能够以全尺寸编辑它们。
- en: Combining the map with color
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将图与颜色结合
- en: When editing a **Material**, the color picker to the right of the Albedo map
    slot, on the Inspector panel, can be used to select the **Material's** color,
    in case there is no **Texture** map. If a **Texture** map is being used, the selected
    color will be multiplied to the image, allowing variations on the **Material's**
    color hue.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当编辑**材质**时，可以在检查器面板上反照率图插槽右侧的颜色选择器中用来选择**材质**的颜色，如果没有任何**纹理**图。如果正在使用**纹理**图，所选颜色将乘以图像，允许在**材质**的颜色色调上有所变化。
- en: Adapting a basic material from Specular setup to Metallic
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将基本材质从镜面设置转换为金属质感
- en: For a better understanding of the differences between **Metallic** and **Specular**
    workflows, we will modify the Albedo and Specular/Smoothness maps that are used
    on a Specular setup Material, in order to adapt them to the Metallic workflow.
    The material to be generated will feature both metallic and non-metallic parts,
    with various smoothness levels.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解**金属**和**镜面**工作流程之间的差异，我们将修改用于镜面设置材质上的反照率和镜面/光滑度图，以便将它们适应金属工作流程。要生成的材质将具有金属和非金属部分，以及不同的光滑度级别。
- en: Getting ready
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe builds on the previous one, so make a copy of that project and use
    the copy for this recipe.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方基于之前的配方，因此请复制该项目并使用副本进行此配方。
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a basic Material using the Metallic workflow, follow these steps:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建使用金属工作流程的基本材质，请按照以下步骤操作：
- en: 'From the **Project** panel, select the battery_prefab element. From the Inspector,
    access its **Material** (named Battery_MAT) and change its **Shader** to Standard
    (as opposed to its current shader – Standard (Specular setup):'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**面板中选择电池预制体元素。从检查器中访问其**材质**（命名为Battery_MAT）并将其**着色器**更改为标准（与当前着色器相反——标准（漫反射设置））：
- en: '![](img/58465255-8446-4383-ac80-f175f9d232ca.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/58465255-8446-4383-ac80-f175f9d232ca.png)'
- en: In the **Project** panel, find the Battery_specular map and rename it Battery_metallic.
    Open it in your image editor (we'll use Adobe Photoshop to illustrate the following
    steps).
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中找到电池高光图并将其重命名为Battery_metallic。在您的图像编辑器中打开它（以下步骤我们将使用Adobe Photoshop进行说明）。
- en: 'Find the layer group named Specular and rename it Metallic. Fill the light
    gray layer (named Layer 2, in the Metallic group) with white (R: 255, G: 255,
    B: 255), and the dark gray layer (named Layer 1, in the Metallic group) with black
    (R: 0, G: 0, B: 0). Save the file:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '找到名为Specular的图层组并将其重命名为Metallic。将浅灰色图层（在Metallic组中命名为Layer 2）填充为白色（R: 255,
    G: 255, B: 255），将深灰色图层（在Metallic组中命名为Layer 1）填充为黑色（R: 0, G: 0, B: 0）。保存文件：'
- en: '![](img/cc125bc5-64bd-497a-b5f0-5b99a40f02f5.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc125bc5-64bd-497a-b5f0-5b99a40f02f5.png)'
- en: 'Go back to Unity. From the **Inspector**, set the modified Battery_metallic
    map as the Metallic map of the Battery_MAT material. Also, set None as the Albedo
    map for that **Material**. This will give you an idea of how the **Material**
    is coming along:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity。从**检查器**中设置修改后的Battery_metallic图作为Battery_MAT材质的金属图。同时，将None设置为该**材质**的反照率图。这将给您一个关于**材质**进展的思路：
- en: '![](img/5b4d871f-8cc3-4ec0-a18e-eb7f695a9b5c.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b4d871f-8cc3-4ec0-a18e-eb7f695a9b5c.png)'
- en: 'Let''s adjust the **Albedo** texture map. From the **Project** panel, locate
    the **Battery_albedo** map and open it in your image editor. Use the **Paint Bucket**
    tool to fill the black area of **Layer** **2**, in the **Albedo** group, with
    light gray (R: 196, G: 199, B: 199). Save the file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '让我们调整**反照率**纹理图。从**项目**面板中找到**Battery_albedo**图并将其在您的图像编辑器中打开。使用**油漆桶工具**将**Albedo**组中**层2**的黑区域填充为浅灰色（R:
    196, G: 199, B: 199）。保存文件：'
- en: '![](img/4c69eb38-ff86-46c1-b9b0-e93878eba73e.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4c69eb38-ff86-46c1-b9b0-e93878eba73e.png)'
- en: Go back to Unity. From the **Inspector**, set the modified Battery_albedo map
    as the Albedo map of the Battery_MAT material.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 返回Unity。从**检查器**中设置修改后的Battery_albedo图作为Battery_MAT材质的反照率图。
- en: 'Your **Material** is ready, combining visual properties based on the different
    maps that you have edited and assigned:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的**材质**已准备好，结合了基于您编辑和分配的不同图层的视觉属性：
- en: '![](img/6319067e-0c98-4a98-a5b5-a2324ccdd440.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6319067e-0c98-4a98-a5b5-a2324ccdd440.png)'
- en: How it works...
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The visual aspect of the battery is a combination of three properties of its
    material: Metallic, Smoothness, and Albedo.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 电池的视觉外观是其材质的三个属性的结合：金属度、平滑度和反照率。
- en: 'To compose the dark-red part of the plastic body, for instance, we have mixed
    the following:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要组成塑料体的深红色部分，我们混合了以下内容：
- en: '**The Metallic map (RGB)**: Black (for a non-metallic appearance)'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金属图（RGB）**：黑色（用于非金属质感）'
- en: '**The Smoothness (the Alpha Channel of a Metallic map)**: Light gray (for a
    glossy appearance)'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑度（金属图的Alpha通道）**：浅灰色（用于光泽的外观）'
- en: '**The Albedo map**: Dark red (for a dark-red color)'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率图**：深红色（用于深红色）'
- en: 'The light-red portion, on the other hand, combines the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，浅红色部分结合了以下内容：
- en: '**The Metallic map (RGB)**: Black'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金属图（RGB）**：黑色'
- en: '**The Smoothness (the Alpha Channel of the Metallic map)**: Dark gray (for
    a matte appearance)'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑度（金属图的Alpha通道）**：深灰色（用于哑光外观）'
- en: '**The Albedo map**: Red (for a red color)'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率图**：红色（用于红色）'
- en: 'Finally, the brushed metal used for the top and bottom covers combines the
    following:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，用于顶部和底部盖子的刷洗金属结合了以下内容：
- en: '**The Metallic map (RGB)**: White (for a metallic aspect)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**金属图（RGB）**：白色（用于金属感）'
- en: '**The Smoothness (the Alpha Channel of the Metallic map)**: Blurred grey noise
    pattern (for a brushed appearance);'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**平滑度（金属图层的Alpha通道）**：模糊的灰色噪声图案（用于刷洗的质感）；'
- en: '**The Albedo map**: Light grey (for an iron-like appearance)'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**反照率图**：浅灰色（用于类似铁的质感）'
- en: Remember to organize your layers into groups named after the property that they
    are related to.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 记得将你的图层组织成以它们相关属性命名的组。
- en: Applying Normal maps to a Material
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将法线图应用于材质
- en: '**Normal Maps** are generally used to simulate complex geometry that would
    be too expensive, in terms of computer processing, to be actually represented
    by the 3D polygons during the game''s runtime. To oversimplify: **Normal Maps**
    fake complex geometry on low-definition 3D meshes. These maps can be generated
    either by projecting high-definition 3D meshes onto low-poly ones (a technique
    usually referred to as baking), or, as will be the case for this recipe, from
    another **Texture** map:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '**法线图**通常用于模拟在游戏运行时用 3D 多边形实际表示过于昂贵的复杂几何形状。为了简化：**法线图**在低分辨率 3D 网格上模拟复杂几何形状。这些图可以通过将高分辨率
    3D 网格投影到低多边形网格上（通常称为烘焙技术）生成，或者，正如本食谱中所述，从另一个 **纹理**图中生成：'
- en: '![](img/aca76bb4-a20e-4950-8cb4-17c64dcb8cf6.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aca76bb4-a20e-4950-8cb4-17c64dcb8cf6.png)'
- en: Getting ready
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will prepare two **Texture** maps: the **Heightmap** and
    the **Normal** map. The former will be made from simple shapes in an image editor.
    The latter will be automatically processed from the Heightmap. Although there
    are a number of tools that can be used to generate **Normal** maps, we will use
    the free, online NormalMap tool: [http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/).'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们将准备两个 **纹理**图：高度图和法线图。前者将使用图像编辑器中的简单形状制作。后者将自动从高度图处理生成。尽管有许多工具可以用来生成
    **法线图**，但我们将使用免费的在线 NormalMap 工具：[http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/)。
- en: To help you with this recipe, we've provided an FBX 3D model of the battery
    (battery.fbx), and its Albedo and Specular **Textures** (Battery_albedo.tif **and**
    Battery_specular.tif).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您完成这个食谱，我们提供了一个电池的 FBX 3D 模型（battery.fbx），以及其 Albedo 和 Specular **纹理**（Battery_albedo.tif
    **和** Battery_specular.tif）。
- en: We've also included the UVW template texture (in PNG format) to guide you when
    creating the diffuse **Texture** map. All the files are in the `05_03` folder.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还包含了 UVW 模板纹理（PNG 格式），以指导您创建漫反射 **纹理**图。所有文件都在 `05_03` 文件夹中。
- en: How to do it...
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To apply a **Normal Map** to a **Material**, follow these steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 **法线图**应用到 **材质**上，请按照以下步骤操作：
- en: Import battery.fbx and its Albedo and Specular **Textures** to your project.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 battery.fbx 及其 Albedo 和 Specular **纹理**导入到项目中。
- en: Add an instance of your 3D model in the Scene by dragging asset **battery**
    from the Project panel into the Scene (or Hierarchy) panel.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将资产 **battery** 从 **项目**面板拖动到 **场景**（或层次结构）面板中，在场景中添加 3D 模型的实例。
- en: In the **Project** panel, select model asset battery. In the **Inspector**,
    click the **Materials** button and then click Extract Materials... You should
    now have a **Material** asset file in the **Project** panel named BatteryMaterial.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目**面板中，选择模型资产 battery。在 **检查器**中，点击 **材质**按钮，然后点击提取材质...现在您应该在 **项目**面板中有一个名为
    BatteryMaterial 的 **材质**资产文件。
- en: Select BatteryMaterial, and change the Shader to Standard (Specular setup).
    Drag the Battery_albedo **Texture** from the **Project** panel into the Albedo
    Texture slot in the Inspector. Drag the Battery_specular **Texture** from the
    **Project** panel into the Specular Texture slot.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 BatteryMaterial，并将着色器更改为 Standard（镜面设置）。将 Battery_albedo **纹理**从 **项目**面板拖动到检查器中的
    Albedo 纹理槽中。将 Battery_specular **纹理**从 **项目**面板拖动到 Specular 纹理槽中。
- en: 'After comparing the **battery** model in your project with some reference photos,
    inform yourself about the features that should be reproduced by the Normal map:
    (A) a bumpy ring at the top, and (B) some circular creases at the bottom:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将您项目中的 **电池**模型与一些参考照片进行比较后，了解法线图应复制的特征：（A）顶部有一个凹凸的环，以及（B）底部有一些圆形的褶皱：
- en: '![](img/6d9f90e0-76cf-40e4-836d-50fb396187df.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d9f90e0-76cf-40e4-836d-50fb396187df.png)'
- en: 'In an image editor, open uvw_template.png. Create a new layer, fill it with
    grey (RGB: 128), and position it below the pre-existing layer:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在图像编辑器中打开 uvw_template.png。创建一个新的图层，将其填充为灰色（RGB：128），并将其放置在现有的图层下方：
- en: '![](img/08eba0a7-00fd-4d8e-a032-c5aba36e676b.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08eba0a7-00fd-4d8e-a032-c5aba36e676b.png)'
- en: 'On a separate layer, draw a white circle centered on the battery''s top. Then,
    on another layer, draw a black circle, centered on the battery''s bottom:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在单独的图层上，画一个以电池顶部为中心的白圆圈。然后，在另一个图层上，画一个以电池底部为中心的黑圆圈：
- en: '![](img/04ed61fd-9a39-44e7-93e9-74343d5d1cf4.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/04ed61fd-9a39-44e7-93e9-74343d5d1cf4.png)'
- en: If you have used vector shapes to make the circles, rasterize their layers (in
    Adobe Photoshop, right-click on the layer's name and select the Rasterize Layer
    option from the context menu).
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已使用矢量形状制作圆圈，则将其图层栅格化（在Adobe Photoshop中，可以通过右键单击图层名称并从上下文菜单中选择栅格化图层选项来完成）。
- en: Blur the white circle (in Photoshop, this can be done by navigating to Filter
    | Blur | Gaussian Blur...). Use 4,0 pixels as the Radius.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模糊白色圆圈（在Photoshop中，可以通过导航到滤镜 | 模糊 | 高斯模糊...来完成）。使用4.0像素作为半径。
- en: Hide the UVW template layer and save the image as Battery_height.png.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏UVW模板层并将图像保存为Battery_height.png。
- en: 'If you want to convert the Heightmap directly from Unity, import it into your
    project. Select it from the Project panel and, from the Inspector panel, change
    its Texture Type to Normal map. Check the Create from Grayscale option, adjust
    Bumpiness and Filtering as you like, and click on Apply to save the changes:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想直接从Unity转换Heightmap，将其导入到您的项目中。从项目面板中选择它，然后从检查器面板中，将其纹理类型更改为正常贴图。检查从灰度创建选项，根据需要调整凹凸度和过滤，然后单击应用以保存更改：
- en: '![](img/21de53a3-6a0d-4693-a6fd-a764855171e5.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/21de53a3-6a0d-4693-a6fd-a764855171e5.png)'
- en: 'To convert your Heightmap externally, go to [http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/).
    Drag the Battery_height.png file to the appropriate image slot. Feel free to play
    with the Strength, Level, and Blur/Sharp parameters:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在外部转换您的Heightmap，请访问[http://cpetry.github.io/NormalMap-Online/](http://cpetry.github.io/NormalMap-Online/)。将Battery_height.png文件拖到相应的图像槽中。您可以自由地调整强度、级别和模糊/锐化参数：
- en: '![](img/696f8e0f-fb80-444c-a70b-19f56bccd227.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/696f8e0f-fb80-444c-a70b-19f56bccd227.png)'
- en: Save the resulting **Normal** map as Battery_normal.jpg and add it to your Unity
    project.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将生成的**正常**贴图保存为Battery_normal.jpg并添加到您的Unity项目中。
- en: In Unity, select Battery_normal from the **Project** panel. Then, in the Inspector,
    change its Texture Type to Normal, leaving the Create from Grayscale box unchecked.
    Click on Apply to save the changes.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Unity中，从**项目**面板中选择Battery_normal。然后，在检查器中，将其纹理类型更改为正常，并取消选中从灰度创建框。单击应用以保存更改。
- en: 'In the **Project** panel, select the BatteryMaterial asset. In the Inspector
    for the Material component, assign Battery_normal to the Normal Map slot. To adjust
    its intensity and direction, change its value to -0.35:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中，选择BatteryMaterial资产。在材质组件的检查器中，将Battery_normal分配给正常贴图槽。要调整其强度和方向，将其值更改为-0.35：
- en: '![](img/6852b8d9-a6d2-4190-8128-94d87727ccc0.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6852b8d9-a6d2-4190-8128-94d87727ccc0.png)'
- en: How it works...
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Normal Map was calculated from the grey values on the Heightmap, where the
    lighter tones were interpreted as recesses (applied to the top of the battery),
    and the darker tones as bulges (applied to the bottom). Since the desired output
    was actually the opposite, it was necessary to adjust the **Normal Map** to a
    negative value (-0.35). Another possible solution to the issue would have been
    to redraw the Heightmap and switch the colors for the white and black circles.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 正常贴图是从Heightmap上的灰度值计算得出的，其中较亮的色调被解释为凹槽（应用于电池顶部），较暗的色调被解释为凸起（应用于底部）。由于所需的输出实际上是相反的，因此需要将**正常贴图**调整为负值（-0.35）。解决此问题的另一个可能方案是重新绘制Heightmap并交换白色和黑色圆圈的颜色。
- en: Adding Transparency and Emission maps to a material
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将透明度和发射贴图添加到材质中
- en: 'The Emission property can be used to simulate a variety of self-illuminated
    objects, from the LEDs of mobile displays to futuristic Tron suits. Transparency,
    on the other hand, can make the diffuse color of a **Material** more or less visible.
    In this recipe, you will learn how to configure these properties to produce a
    toy''s cardboard packaging that features a partially-transparent plastic case,
    cutouts (totally transparent), and glow-in-the-dark text:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 发射属性可以用来模拟各种自发光对象，从移动显示器的LED到未来派的Tron服装。另一方面，透明度可以使**材质**的漫反射颜色更明显或更不明显。在本配方中，您将学习如何配置这些属性以生成一个具有部分透明塑料外壳、开孔（完全透明）和发光文字的玩具纸箱包装：
- en: '![](img/d7c3c7b3-f5d3-435c-8d23-351c6d377f57.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d7c3c7b3-f5d3-435c-8d23-351c6d377f57.png)'
- en: Getting ready
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we have prepared two files in the `05_04` folder:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在`05_04`文件夹中准备了两个文件：
- en: 'package.fbx: A 3D object of a package (FBX format)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: package.fbx：包装的3D对象（FBX格式）
- en: 'card_diffuse_start.png: The diffused texture map for the packaging (PNG format)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: card_diffuse_start.png：包装的漫反射纹理贴图（PNG格式）
- en: 'Also provided are the two final, image-edited files you''ll create in the project:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还提供了您将在项目中创建的两个最终、经过图像编辑的文件：
- en: 'card_diffuse.png: The Albedo texture map for the packaging with cutouts (PNG
    format)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: card_diffuse.png：带有裁剪的包装的Albedo纹理图（PNG格式）
- en: 'card_emission.png: The Emission **Texture** map for the emission glow text
    (PNG format)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: card_emission.png：用于发射发光文本的发射**纹理**图（PNG格式）
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To add transparency and color emission maps to materials, follow these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要将透明度和颜色发射图添加到材料中，请按照以下步骤操作：
- en: Import the provided files.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的文件。
- en: Duplicate the card_diffuse_start **Texture**, naming the copy card_diffuse.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制card_diffuse_start的**纹理**，将其命名为card_diffuse。
- en: From the **Project** panel, drag the FBX model package into the **Hierarchy** to
    create a GameObject in the **Scene**.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**项目**面板中，将FBX模型包拖动到**层次结构**中，在**场景**中创建一个GameObject。
- en: 'Create a new **Material** named m_card. Choose **Project** menu: Create | Material.
    Drag the card_diffuse **Texture** into the **Albedo** property of m_card.'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为m_card的新**材料**。选择**项目**菜单：创建 | 材料。将card_diffuse **纹理**拖动到m_card的**Albedo**属性中。
- en: In the **Hierarchy**, select PackageCard (child of package), and assign it your
    new m_card Material.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中，选择PackageCard（包的子项），并分配你的新m_card材料。
- en: 'Create a new **Material** named m_plastic. Choose **Project** menu: Create
    | Material. Change its Rendering Mode to Transparent. Use the Diffuse color picker
    to change the color''s RGB values to 56/56/56, and Alpha to 25\. Change the Smoothness
    level to 0.9:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为m_plastic的新**材料**。选择**项目**菜单：创建 | 材料。将其渲染模式更改为透明。使用漫反射颜色选择器将颜色的RGB值更改为56/56/56，并将Alpha更改为25。将平滑度级别更改为0.9：
- en: '![](img/67bf2148-5a0f-4bf8-bb50-690b74dc99f5.png)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![](img/67bf2148-5a0f-4bf8-bb50-690b74dc99f5.png)'
- en: In the **Hierarchy**, select PackagePlastic (child of package), and assign it
    your new m_plastic **Material**. The plastic portion of the 3D model should now
    appear partially transparent, as if made of plastic.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中，选择PackagePlastic（包的子项），并分配你的新m_plastic **材料**。3D模型的塑料部分现在应该部分透明，就像是由塑料制成的。
- en: To create the cutouts around the package and hang hole, we need to first prepare
    the diffuse image in an image editor (such as Photoshop). Open the card_diffuse
    **Texture** in your image editor.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在包装和悬挂孔周围创建裁剪，我们首先需要在图像编辑器（如Photoshop）中准备漫反射图像。在你的图像编辑器中打开card_diffuse **纹理**。
- en: We will add transparency to the image by deleting the white areas around the
    package (and the hang hole). Make a selection of those areas (in Photoshop, this
    can be done with the Magic Wand Tool).
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将通过删除包装（以及悬挂孔）周围的白色区域来为图像添加透明度。选择这些区域（在Photoshop中，可以使用魔棒工具完成此操作）。
- en: 'Make sure you unlock the Background layer by clicking on the lock icon, to
    the left of the layer''s name:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保通过单击层名左侧的锁定图标解锁背景层：
- en: '![](img/3193dd7a-0d15-4c7e-acef-b047d6fd03c6.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3193dd7a-0d15-4c7e-acef-b047d6fd03c6.png)'
- en: 'Delete the previously-made selection (this can be done in Photoshop by pressing
    the Delete key). The background of the image should be transparent:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除之前创建的选择（在Photoshop中，可以通过按Delete键完成）。图像的背景应该是透明的：
- en: '![](img/9f5d88fc-5756-4257-983b-557600be7199.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9f5d88fc-5756-4257-983b-557600be7199.png)'
- en: Save your file in your image editor, and return to Unity.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的图像编辑器中保存你的文件，并返回Unity。
- en: 'Select the m_card **Material** in the Project panel. In the Inspector, change
    its Rendering Mode to Cutout, and adjust its Alpha Cutoff to 0.9:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中选择m_card **材料**。在检查器中，将渲染模式更改为裁剪，并调整其Alpha截止值为0.9：
- en: '![](img/94e20698-938e-4418-b2b3-f0e074a5dce2.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/94e20698-938e-4418-b2b3-f0e074a5dce2.png)'
- en: Choosing Cutout means that your material can be either invisible or fully visible,
    not allowing for semi-transparency. The **Alpha Cutoff** is used to get rid of
    unwanted pixels around the transparent borders.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 选择裁剪意味着你的材料可以是完全不可见或完全可见，不允许半透明。**Alpha截止值**用于去除透明边缘周围的不需要的像素。
- en: Let's work on the Emission map for the bright lettering. From the **Assets**
    folder, duplicate the card_diffuse.png **Texture**, rename it card_emission.png,
    and open it in your image editor.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为明亮的字母制作发射图。从**资产**文件夹中，复制card_diffuse.png **纹理**，重命名为card_emission.png，并在你的图像编辑器中打开它。
- en: Select all the characters from the Ms. Laser inscription and the green star
    (in Photoshop, this can be done with the **Magic Wand** tool, keeping the *Shift*
    key pressed while selecting multiple areas).
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Ms. Laser铭文中的所有字符和绿色星星（在Photoshop中，可以使用**魔棒**工具完成此操作，在选择多个区域时按住*Shift*键）。
- en: Copy and paste your selection into a new layer. Then, select it and apply a
    Noise filter to it (in Photoshop, this can be done by navigating to Filter | Noise
    | Add Noise...). Use 50% as the value.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的选择复制并粘贴到一个新的图层中。然后选择它，并对其应用噪声滤镜（在Photoshop中，可以通过导航到滤镜 | 噪声 | 添加噪声...来完成）。使用50%作为值。
- en: 'Create a new layer and, using a tool such as the Paint Bucket, fill it with
    black (R: 0, G: 0, B: 0). Place this black layer beneath the one with the colored
    elements.'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '创建一个新的图层，并使用如画桶工具将其填充为黑色（R: 0, G: 0, B: 0）。将这个黑色图层放置在带有彩色元素的图层下方。'
- en: 'Flatten your image (in Photoshop this can be done by navigating to Layer |
    Flatten Image):'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的图像合并（在Photoshop中，可以通过导航到图层 | 合并图像来完成）：
- en: '![](img/cfdc4c40-4740-45f2-8c94-8336c3c562cd.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cfdc4c40-4740-45f2-8c94-8336c3c562cd.png)'
- en: Save your file in your image editor, and return to Unity.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的图像编辑器中保存您的文件，并返回Unity。
- en: 'Select the m_card **Material** in the **Project** panel. Check the Emission
    property – three new properties should appear:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**项目**面板中选择m_card **材质**。检查发射属性 – 应该出现三个新属性：
- en: '**A Texture slot**: Set this to Texture card_emission (drag asset file from
    the Project panel)'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**纹理槽**：将其设置为Texture card_emission（从项目面板拖动资产文件）'
- en: '**A Color slot**: Set this to white (R: 255; G: 255; B: 255)'
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**颜色槽**：将其设置为白色（R: 255; G: 255; B: 255）'
- en: '**A Global Illumination** **drop-down menu**: Ensure this is set to Baked (so
    that its glow won''t be added to the Lightmaps or influence the illumination in
    Real-Time):'
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局照明** **下拉菜单**：确保将其设置为烘焙（这样其光芒就不会添加到光照贴图中或影响实时照明）：'
- en: '![](img/66b98314-62e5-4de4-bd8c-7123d7e32e5b.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/66b98314-62e5-4de4-bd8c-7123d7e32e5b.png)'
- en: How it works...
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Unity is able to read four channels of a texture map: R (Red), G (Green), B
    (Blue), and A (Alpha). When set to Transparent or Cutout, the **Alpha Channel**
    of the diffuse texture map sets the transparency of the material according to
    each pixel''s brightness level (the Cutout mode will not render semi-transparency –
    only fully visible or invisible pixels).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Unity能够读取纹理图的四个通道：R（红色）、G（绿色）、B（蓝色）和A（Alpha）。当设置为透明或裁剪时，漫反射纹理图的**Alpha通道**根据每个像素的亮度级别设置材质的透明度（裁剪模式将不会渲染半透明
    – 只渲染完全可见或不可见的像素）。
- en: 'We didn''t add an Alpha Channel – this is because Photoshop exports the PNG''s
    Alpha map based on its transparency. To help you visualize the Alpha map, the
    provided folder also contains the package_diffuse.tif (TIF format) Texture file;
    an image file featuring an Alpha map that works in exactly the same way as the
    PNG file that we have generated:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有添加Alpha通道 – 这是因为Photoshop根据其透明度导出PNG的Alpha图。为了帮助您可视化Alpha图，提供的文件夹还包含package_diffuse.tif（TIF格式）纹理文件；一个图像文件，其Alpha图与我们所生成的PNG文件完全相同：
- en: '![](img/7fa82fa6-c7d3-4810-befb-b3e8c7eae32f.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7fa82fa6-c7d3-4810-befb-b3e8c7eae32f.png)'
- en: Regarding the Emission texture map, Unity assigns its RGB colors to the Material,
    combining them with the appropriate color selection slot, and allows adjustments
    to the intensity of that Emission.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 关于发射纹理图，Unity将其RGB颜色分配给材质，与适当的颜色选择槽结合，并允许调整该发射的强度。
- en: There's more...
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Let's look at a little more information on Transparency and Emission.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看关于透明度和发射的更多信息。
- en: Using texture maps with the Transparent Mode
  id: totrans-255
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用透明模式纹理图
- en: Please note that you can use a bitmap texture for the Diffuse map in the Transparent
    render mode. In this case, RGB values will be interpreted as the Diffuse color,
    while the Alpha will be used to determine that pixel's transparency (in this case,
    semi-transparent materials are allowed).
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您可以在透明渲染模式中使用位图纹理作为漫反射图。在这种情况下，RGB值将被解释为漫反射颜色，而Alpha将用于确定该像素的透明度（在这种情况下，允许半透明材质）。
- en: Avoiding issues with the semi-transparent objects
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免半透明物体的问题
- en: You might have noticed that the plastic case was made from two objects (PackagePlastic
    and innerPlastic). This was done to avoid z-sorting problems, where faces are
    rendered in front of other geometry when they should be behind it. Having multiple
    meshes instead of a single one allows these faces to be correctly sorted for rendering.
    **Materials** in the Cutout mode are not affected by this problem, though.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到塑料外壳是由两个对象（PackagePlastic和innerPlastic）组成的。这样做是为了避免z排序问题，即当面应该在后面时，却渲染在前面。使用多个网格而不是一个，可以正确排序这些面以进行渲染。**在裁剪模式下**的**材质**不受此问题的影响。
- en: Emitting light over other objects
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在其他物体上发射光线
- en: The Emission value can be used to calculate the **Material's** light projection
    over other objects when using Lightmaps.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 发射值可以用来计算在使用光照贴图时材质对其他物体的光照投影。
- en: Highlighting materials at mouse-over
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标悬停时突出显示材质
- en: Changing the color of an object at runtime can be a very effective way of letting
    players know that they can interact with it. This is very useful in a number of
    game genres, such as puzzles and point-and-click adventures, and it can also be
    used to create 3D user interfaces.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行时更改对象的颜色可以是一个非常有效的方法，让玩家知道他们可以与之交互。这在许多游戏类型中非常有用，例如益智游戏和点击冒险游戏，也可以用来创建3D用户界面。
- en: How to do it...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To highlight a material at mouse-over, follow these steps:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 要在鼠标悬停时突出显示材质，请按照以下步骤操作：
- en: Create a new 3D project.
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的3D项目。
- en: 'Create **3D Cube** in the scene (Hierarchy menu: **Create | 3D Object | Cube**).'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在场景中创建**3D立方体**（在层次菜单中：**创建 | 3D对象 | 立方体**）。
- en: In the Project panel, create a new **Material** aaset named m_cube. Set its
    Albedo Color to red.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，创建一个新的**材质**集合，命名为m_cube。将其漫反射颜色设置为红色。
- en: In the **Hierarchy**, select the **Cube** GameObject, and assign it the m_cube
    **Material** (drag the asset from the Project panel).
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**层次结构**中，选择**立方体**GameObject，并分配m_cube**材质**（从项目面板拖动资产）。
- en: 'Create a new C# script-class named MouseOverHighlighter, and add an instance
    object as a component to the Cube:'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类，命名为MouseOverHighlighter，并将实例对象作为组件添加到立方体中：
- en: '[PRE0]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: With the Cube selected, in the Mouse Over Highlighter (Script) component in
    the Inspector, you'll see the mouse-over color is yellow. You may wish to change
    this.
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择立方体后，在检查器中的Mouse Over Highlighter（脚本）组件中，你会看到鼠标悬停颜色是黄色。你可能希望更改它。
- en: Test the scene. The Cube will be highlighted red when the mouse is over it (and
    green when clicked on).
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试场景。当鼠标悬停在立方体上时，立方体会突出显示为红色（点击时为绿色）。
- en: How it works...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `Start()` method does four things:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`Start()`方法做了四件事：'
- en: Stores a reference to the MeshRenderer component in the `meshRenderer` variable
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`meshRenderer`变量中存储对MeshRenderer组件的引用
- en: Stores a reference to the original Material of the GameObject in the `originalMaterial`
    variable
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`originalMaterial`变量中存储对GameObject原始材质的引用
- en: Creates a new Material named mouseOverMaterial
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的材质，命名为mouseOverMaterial
- en: Sets the color of `mouseOverMaterial` to the color in the mouseOverColor public
    variable
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将`mouseOverMaterial`的颜色设置为mouseOverColor公共变量中的颜色
- en: The cube is automatically sent the mouse enter/exit events as the user moves
    the mouse pointer over and away from the part of the screen where the cube is
    visible. Our code adds a behavior to the cube when these events are detected.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将鼠标指针移到屏幕上立方体可见的部分和移开时，立方体会自动接收到鼠标进入/退出事件。我们的代码在检测到这些事件时为立方体添加行为。
- en: When the `OnMouseOver` message is received, the method with that name is invoked,
    and the GameObject's material is set to `mouseOverMaterial`. When the `OnMouseExit` message
    is received, the GameObject's material is returned to `originalMaterial`.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 当接收到`OnMouseOver`消息时，将调用具有该名称的方法，并将GameObject的材质设置为`mouseOverMaterial`。当接收到`OnMouseExit`消息时，将GameObject的材质返回到`originalMaterial`。
- en: The material property of the Renderer is a copy of the
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: Renderer的材质属性是副本
- en: If the Material of a GameObject is shared by several objects, we must be careful
    when changing Material properties to only change those we want to. If we wish
    to only change values for a particular GameObject, use the `.material` property
    of `Renderer` – since a separate clone is created if more than one object uses
    the same Material. If we want all GameObjects using the same Material to be affected
    by changes, use the `.sharedMaterial` property of `Renderer`. Since there was
    only one GameObject in this recipe, either could have been used.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个GameObject的材质被多个对象共享，我们在更改材质属性时必须小心，以确保只更改我们想要的那些。如果我们只想更改特定GameObject的值，请使用`Renderer`的`.material`属性——因为如果多个对象使用相同的材质，则会创建一个单独的克隆。如果我们想使使用相同材质的所有GameObject都受到更改的影响，请使用`Renderer`的`.sharedMaterial`属性。由于这个配方中只有一个GameObject，所以可以使用任一方法。
- en: Read more at[ https://docs.unity3d.com/ScriptReference/Renderer-material.html](https://docs.unity3d.com/ScriptReference/Renderer-material.html)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息请参阅[https://docs.unity3d.com/ScriptReference/Renderer-material.html](https://docs.unity3d.com/ScriptReference/Renderer-material.html)
- en: There's more...
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some ways to enhance this recipe.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强这个配方的方法。
- en: Collider needed for custom meshes
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义网格所需的碰撞器
- en: We created a primitive 3D Cube – this automatically has a Box Collider component.
    If you were to use the preceding script with a custom 3D mesh object, ensure the
    GameObject has a Physics | Collider component, so that it will respond to mouse
    events.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个原始的3D立方体 – 这会自动具有一个Box Collider组件。如果你要使用前面的脚本与自定义3D网格对象一起使用，请确保GameObject具有Physics
    | Collider组件，以便它能够响应用户事件。
- en: Mouse Down/Up events – for clicking color
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 鼠标按下/释放事件 – 用于点击颜色
- en: We can extend our code to also display a different color when an object is clicked
    on (mouse down/up events).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以扩展我们的代码，以便在对象被点击时显示不同的颜色（鼠标按下/释放事件）。
- en: 'Do the following:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: Remove the scripted `MouseOverHighlighter` from the Cube `GameObject`.
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Cube `GameObject` 中移除脚本化的 `MouseOverHighlighter`。
- en: 'Create a new C# script-class named `MouseOverDownHighlighter`, and add an instance
    object as a component to the Cube:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的名为 `MouseOverDownHighlighter` 的C#脚本类，并将实例对象作为组件添加到Cube中：
- en: '[PRE1]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: There are two public Colors: one for mouse-over and one for mouse-down (click)
    highlighting.
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有两个公共颜色：一个用于鼠标悬停，一个用于鼠标按下（点击）高亮显示。
- en: Run the Scene. You should now see different highlight colors when the mouse
    pointer is over the Cube, and when you click the mouse button when the mouse pointer
    is over the Cube.
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行场景。现在你应该会看到当鼠标指针在Cube上时，会看到不同的高亮颜色，当你在鼠标指针在Cube上时点击鼠标按钮时。
- en: Since we are creating two new Materials, the reusable `NewMaterialWithColor(...)` C#
    method is included above, to simplify the content of the `Start()` method. A Boolean
    (true/false) variable has been introduced, so that the correct behavior occurs
    after the mouse button is released, depending on whether the mouse pointer is
    still over the object (`mouseOver = true`) or has moved away from the object (`mouseOver
    = false`).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们创建了两个新的材质，上面的 `NewMaterialWithColor(...)` C# 方法是可重用的，以简化 `Start()` 方法的代码内容。引入了一个布尔（true/false）变量，以便在鼠标按钮释放后，根据鼠标指针是否仍然在对象上（`mouseOver
    = true`）或已从对象上移开（`mouseOver = false`），发生正确的行为。
- en: Adding Detail maps to a material
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将细节图添加到材质中
- en: When creating a large object, there is not only the desire to **Texture** it
    as a whole, but also to add details that can make it look better when viewed up
    close. To overcome the need for large, memory-hogging, highly-detailed texture
    maps, the use of Detail maps can make a real difference.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建一个大型对象时，不仅希望整体**纹理化**它，还希望添加细节，使其在近距离观看时看起来更好。为了克服需要大、内存占用大、高度详细的纹理图的需求，使用细节图可以真正地做出差异。
- en: 'In this recipe, we will add **Detail maps** to a rocket toy by applying a **Detail
    mask** and a **Detail Normal** map. In our case, we want to add a textured quality
    (and a stripe pattern) to the green plastic, except in the region where there
    is a battery compartment and the toy''s logo:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将通过应用**细节蒙版**和**细节法线图**来将**细节图**添加到火箭玩具中。在我们的案例中，我们想在绿色塑料上添加纹理质量（和条纹图案），除了电池隔室和玩具的标志区域：
- en: '![](img/0992c355-f09f-42d9-bbc9-a91bca56df54.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0992c355-f09f-42d9-bbc9-a91bca56df54.png)'
- en: Getting ready
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we have prepared three files in the `05_06` folder:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们在 `05_06` 文件夹中准备了三个文件：
- en: 'rocketToy.fbx: A 3D object of a package (FBX format)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'rocketToy.fbx: 包装箱的3D对象 (FBX格式)'
- en: 'ship_diffuse.png: The diffused texture map for the rocket ship toy (PNG format)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ship_diffuse.png: 火箭船玩具的漫反射纹理图 (PNG格式)'
- en: 'ship_height.png: The heightmap to be used to create a normal map (PNG format)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ship_height.png: 用于创建法线图的法线图 (PNG格式)'
- en: 'Also provided are the four final, image-edited files you''ll create in the
    project:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 还提供了你将在项目中创建的四个最终、图像编辑过的文件：
- en: 'detail_diffuse.png: The Albedo texture map for the packaging with cutouts (PNG
    format)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'detail_diffuse.png: 带有切口的包装的Albedo纹理图 (PNG格式)'
- en: 'detail_height.png: The greyscale gradient circle – for the dimpled surface
    detail effect (PNG format)'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'detail_height.png: 灰度渐变圆圈 – 用于凹坑表面细节效果 (PNG格式)'
- en: 'ship_mask.tif: The detail mask – indicating how much the text and battery holder
    appear raised up (TIF format)'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ship_mask.tif: 细节蒙版 – 表示文本和电池托架升起的高度（TIF格式）'
- en: 'ship_mask2.tif: The detail mask – where the Alpha for the battery holder is
    greater, so no dimples will appear from `detail_height` (TIF format)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'ship_mask2.tif: 细节蒙版 – 当电池托架的Alpha值较大时，从 `detail_height` (TIF格式) 不会出现凹坑'
- en: How to do it...
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add the Detail maps to your object, follow these steps:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 要将细节图添加到你的对象中，请按照以下步骤操作：
- en: Import the provided files.
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入提供的文件。
- en: 'In the Project panel, select the rocketToy model asset. In the Inspector, click
    the `Materials` button and then click Extract Materials... Extract the model''s
    Materials into a new folder named `Materials`. You should now have five Materials
    for each part of the rocketToy model (`MAT_base/end/level1/2/3`):'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目面板中，选择 rocketToy 模型资产。在检查器中，点击 `Materials` 按钮，然后点击 Extract Materials... 将模型的材料提取到名为
    `Materials` 的新文件夹中。现在你应该有 rocketToy 模型每个部分的五个材料 (`MAT_base/end/level1/2/3`)：
- en: '![](img/f3705b1e-91b8-4d41-b41c-8d3ccce5f1fb.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f3705b1e-91b8-4d41-b41c-8d3ccce5f1fb.png)'
- en: Select **Mater****ial** MAT_rocketLevel1, and change the Shader to Standard
    (Specular setup). Drag the `ship_diffuse` Texture from the Project panel into
    the **Albedo** Texture slot in the Inspector properties for MAT_rocketLevel1.
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Mater****ial** MAT_rocketLevel1，并将着色器更改为 Standard（镜面设置）。将 `ship_diffuse`
    纹理从项目面板拖动到检查器属性中的 **Albedo** 纹理槽中 MAT_rocketLevel1。
- en: Drag the `rocketToy` model asset from the Project panel into the Scene panel
    (or Hierarchy) to add an instance of the model as a `GameObject` in the Scene.
    You should be able to see the image of the text of the toy's logo ("Rocket") and
    the battery compartment in level 1 (above the base).
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `rocketToy` 模型资产从项目面板拖动到场景面板（或层次结构）中，以将模型的实例作为 `GameObject` 添加到场景中。你应该能看到玩具标志文字的图像（“Rocket”）和电池仓在第一级（在底部上方）：
- en: Duplicate the ship_diffuse Texture, naming the copy ship_mask.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 复制 ship_diffuse 纹理，并将其命名为 ship_mask。
- en: 'Open ship_mask in your image editor. Select all the solid green pixels around
    the logo and battery compartment (in Photoshop, this can be done with the Magic
    Wand tool, keeping the *Shift* key pressed while selecting multiple areas):'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的图像编辑器中打开 ship_mask。选择围绕标志和电池仓周围的实心绿色像素（在 Photoshop 中，这可以通过按下 *Shift* 键并选择多个区域时使用魔棒工具来完成）：
- en: '![](img/2bd99e7e-351b-4815-8909-b43d6d25d6f9.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bd99e7e-351b-4815-8909-b43d6d25d6f9.png)'
- en: 'Keeping your selection active, access the image Channels window (in Photoshop,
    this can be done by navigating to Window | Channels). Click on New Channel. This
    will be our Alpha Channel:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保持选择活动状态，访问图像通道窗口（在 Photoshop 中，这可以通过导航到窗口 | 通道来完成）。点击新建通道。这将是我们 Alpha 通道：
- en: '![](img/2d7a5008-c9f3-4627-bd0e-b0bcc735dfc0.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2d7a5008-c9f3-4627-bd0e-b0bcc735dfc0.png)'
- en: 'Hide the Red, Green, and Blue channels. Select the Alpha Channel and paint
    the selection white. Select the area of the battery compartment and paint it grey
    (R, G, and B: 100):'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 隐藏红色、绿色和蓝色通道。选择 Alpha 通道并将选择区域涂成白色。选择电池仓区域并将其涂成灰色（R、G 和 B：100）：
- en: '![](img/587ea264-1e9e-41bd-82b9-bbf9241713b2.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/587ea264-1e9e-41bd-82b9-bbf9241713b2.png)'
- en: 'Save it in the TIF format as ship_mask.tif, in the `Assets` folder. Make sure
    that you include Alpha Channels:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以 TIF 格式保存为 ship_mask.tif，存放在 `Assets` 文件夹中。确保包含 Alpha 通道：
- en: '![](img/e25e7cd6-5d2f-4853-9c87-3f2755c6cc8b.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e25e7cd6-5d2f-4853-9c87-3f2755c6cc8b.png)'
- en: 'Now that we have the mask, let''s create a diffuse map for our detail. In your
    image editor, create a new image with the following dimensions: width: 64, and
    height: 64:'
  id: totrans-327
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们有了遮罩，让我们为我们的细节创建一个漫反射贴图。在您的图像编辑器中，创建一个新图像，其尺寸如下：宽度：64，高度：64：
- en: '![](img/6d4ef0c4-490e-4bc0-bd1c-3413ebbbcbce.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6d4ef0c4-490e-4bc0-bd1c-3413ebbbcbce.png)'
- en: 'Fill the new image with grey (R, G, and B: 128). Use shapes or rectangular
    fills to create a dark grey (R, G, and B: 100) horizontal line that is about 16
    pixels tall:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用灰色（R、G 和 B：128）填充新图像。使用形状或矩形填充创建一个大约 16 像素高的深灰色（R、G 和 B：100）水平线：
- en: Save the image as detail_diff.png in the Assets folder.
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图片保存为 detail_diff.png 并存放在 Assets 文件夹中。
- en: 'Create a new 64 x 64 image. Use a Gradient tool to create a black and white
    Radial Gradient (in Photoshop, this can be done with the Gradient Tool in Radial
    mode):'
  id: totrans-331
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 64 x 64 图像。使用渐变工具创建黑白径向渐变（在 Photoshop 中，这可以通过径向模式的渐变工具来完成）：
- en: '![](img/ef807d3f-147d-4412-aaf7-5fbc1448224b.png)'
  id: totrans-332
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef807d3f-147d-4412-aaf7-5fbc1448224b.png)'
- en: Save the image as detail_height.png in the `Assets` folder. Return to the Unity
    editor.
  id: totrans-333
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像保存为 detail_height.png 并存放在 `Assets` 文件夹中。返回到 Unity 编辑器。
- en: 'From the `Assets` folder, select detail_height. In the Inspector, change its
    Texture Type to Normal map, check the Create from Grayscale option, adjust Bumpiness
    to 0.25, and set Filtering to smooth. Click on Apply to save the changes:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `Assets` 文件夹中选择 detail_height。在检查器中，将纹理类型更改为 Normal map，勾选从灰度创建选项，将凹凸度调整为
    0.25，并将过滤设置为平滑。点击应用以保存更改：
- en: '![](img/2bce8852-1024-4696-82e0-e8698b83827d.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2bce8852-1024-4696-82e0-e8698b83827d.png)'
- en: Do the same for the ship_height Texture – in the Inspector, change its Texture
    Type to Normal map, check the Create from Grayscale option, adjust Bumpiness to
    `0.25`, and set Filtering to smooth. Click on Apply to save the changes.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对ship_height纹理也做同样的处理——在检查器中，将其纹理类型更改为法线图，勾选从灰度创建选项，调整凹凸度为`0.25`，并将过滤设置为平滑。点击应用以保存更改。
- en: 'Select the `MAT_rocketLevel1` Material and view its properties in the Inspector.
    Set the following properties:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`MAT_rocketLevel1`材质，并在检查器中查看其属性。设置以下属性：
- en: Assign the ship_height **Texture** to the Normal Map slot, and set its intensity
    to `0.3`.
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将ship_height **纹理**分配到法线图槽，并将其强度设置为`0.3`。
- en: Assign the ship_mask **Texture** to the Detail Mask slot.
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将ship_mask **纹理**分配到细节遮罩槽。
- en: Assign the detail_diff **Texture** to Secondary Maps | Detail Albedo x 2.
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将detail_diff **纹理**分配到次级图 | 细节Albedo x 2。
- en: Assign the detail_height **Texture** as Secondary Maps | Normal Map, and set
    its intensity to `0.6`.
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将detail_height **纹理**分配为次级图 | 法线图，并将其强度设置为`0.6`。
- en: 'In the Secondary Maps section, change the Tiling values as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在次级图部分，按照以下方式更改拼接值：
- en: Set Tiling X to `200` and Y to `50`.
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将拼接X设置为`200`，Y设置为`50`。
- en: Set UV Set to UV1.
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将UV集设置为UV1。
- en: Until we set UV Set to UV1, you might have noticed that the pattern was not
    seamless. This was because we were using the same UV Set from our Diffuse Texture.
    However, the object has been assigned to two different UV channels (back when
    it was being modelled). While UV channel 1 contains the mapping for our Diffuse
    map, UV channel 2 uses a basic cylindrical mapping. We need to change the **Secondary
    Maps** section's UV Set from UV0 to UV1.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将UV集设置为UV1之前，你可能已经注意到图案并不连续。这是因为我们使用了与漫反射纹理相同的UV集。然而，物体已被分配到两个不同的UV通道（在建模时）。虽然UV通道1包含漫反射图的映射，但UV通道2使用基本的圆柱形映射。我们需要将**次级图**部分的UV集从UV0更改为UV1。
- en: 'The Detail map for your Material is ready:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的材质的细节图已经准备好了：
- en: '![](img/00c84fc3-bc56-46f6-b4aa-be14a4a837bc.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00c84fc3-bc56-46f6-b4aa-be14a4a837bc.png)'
- en: How it works...
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'When in use, Secondary Maps are blended onto the Material''s primary Diffuse
    and Normal maps – that''s why our object is green even after the Diffuse Detail
    is applied: the grey tones are superimposed on the original Diffuse Texture. By
    using a Detail Mask, the artist defines which areas of the object should be affected
    by Secondary Maps. This is great for customization, and also for creating nuances
    (such as the semi-bumped battery compartment in our example).'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用时，次级图会混合到材质的初级漫反射和法线图上——这就是为什么即使应用了漫反射细节，我们的物体仍然是绿色的：灰色色调叠加在原始漫反射纹理上。通过使用细节遮罩，艺术家可以定义物体的哪些区域应该受到次级图的影响。这对于定制来说非常好，也可以用于创建细微差别（例如，我们示例中的半凸电池仓）。
- en: Another helpful feature is the possibility of using a separate UV channel for
    Details maps and Tiling. Besides adding variation to Texture mapping, this allows
    us to paint the details that can be perceived even at a very close distance by
    dramatically enhancing the visual quality of our objects.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是使用单独的UV通道来处理细节图和拼接。除了为纹理映射增加变化外，这还允许我们通过显著提高物体的视觉质量，绘制出即使在非常近的距离也能感知到的细节。
- en: Fading the transparency of a material
  id: totrans-351
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 淡化材质的不透明度
- en: A feature of many games is for objects to fade away to invisible, or appear
    gradually from invisible to fully visible. Unity provides the special Rendering
    Mode of Fade for exactly this purpose.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 许多游戏的一个特点是物体逐渐淡出至不可见，或从不可见逐渐变为完全可见。Unity提供了专门的渲染模式“淡出”，正好用于此目的。
- en: In this recipe, we will create an object that, once clicked, fades out and disappears.
    We'll also look at how to enahnce the code, to take account of the GameObject's
    own initial alpha value, to self-destruct when fading has finished and so on.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个对象，一旦点击，就会淡出并消失。我们还将探讨如何增强代码，以考虑GameObject的初始alpha值，在淡出完成后自我销毁等等。
- en: How to do it...
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Follow these steps:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤操作：
- en: 'Create a new **3D Sphere**, named Sphere-Game. Choose menu: 3D Object | Sphere.'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的**3D球体**，命名为Sphere-Game。选择菜单：3D对象 | 球体。
- en: 'Select Sphere-Game and ensure it has a Collider (if you are using a custom
    3D object, you might have to add a collider through menu: Add Component | Physics
    | Box (or Mesh) Collider).'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择Sphere-Game并确保它有一个Collider（如果你使用的是自定义3D对象，你可能需要通过菜单：添加组件 | 物理 | 箱体（或网格）Collider来添加Collider）。
- en: Create a new Material named m_fade.
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的材质，命名为m_fade。
- en: 'With the m_fade **Material** selected, change its Rendering Mode to Fade in
    the Inspector:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在选择m_fade **材质**后，在检查器中将其渲染模式更改为淡入：
- en: '![](img/6c51d7b1-d92d-4c4f-95fd-a3447b3906d7.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c51d7b1-d92d-4c4f-95fd-a3447b3906d7.png)'
- en: The **Fade** rendering mode is specifically designed for situations such as
    this. Other rendering modes, such as Transparent, will turn the Albedo color transparent,
    but not the specular highlights nor the reflections, in which case the object
    will still be visible.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '**淡入**渲染模式专门为这种情况设计。其他渲染模式，如透明，将使Albedo颜色透明，但不会使高光或反射透明，在这种情况下，对象仍然可见。'
- en: Apply the m_fade **Material** to Sphere-Game by dragging it from the Project
    panel into the Sphere-Game GameObject.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将m_fade **材质**应用到Sphere-Game中，通过从项目面板拖动它到Sphere-Game GameObject。
- en: 'Create a new C# script-class named FadeAway and add an instance object as a
    component to Sphere-Game:'
  id: totrans-363
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的C#脚本类名为FadeAway，并将其作为组件添加到Sphere-Game中：
- en: '[PRE2]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Play your Scene and click on the Sphere to see it fade away and self-destruct.
  id: totrans-365
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 播放你的场景并点击球体以查看它淡出并自我销毁。
- en: How it works...
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The opaqueness of the material using a transparent **Shader** is determined
    by the **alpha** value of its main **color**. This recipe is based around changing
    the Alpha value of the **Color** of the **MeshRenderer**.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 使用透明**着色器**的材料不透明度由其主**颜色**的**alpha**值决定。这个配方是基于改变**MeshRenderer**的**颜色**的Alpha值。
- en: 'There are three public variables:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个公共变量：
- en: '`fadeDurationSeconds`: The time in seconds we want our fading to take'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadeDurationSeconds`：我们希望我们的淡入过程持续的时间（以秒为单位）'
- en: '`alphaStart`: The initial alpha (transparency) we want the GameObject to start
    with (1 = fully visible, 0 = invisible)'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alphaStart`：我们希望GameObject开始时的初始alpha（透明度）（1 = 完全可见，0 = 不可见）'
- en: '`alphaEnd`: The alpha value we want to fade the GameObject into'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`alphaEnd`：我们希望GameObject淡入的alpha值'
- en: The `UpdateMaterialAlpha(...)` method updates the alpha value of the GameObject's
    Color object with the given value by updating the alpha value of the `fadeColor`
    Color variable, and then forcing the MeshRenderer Material to update its Color
    value to match those in fadeColor.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpdateMaterialAlpha(...)`方法通过更新`fadeColor` Color变量的alpha值，然后强制MeshRenderer材质更新其颜色值以匹配fadeColor中的值，来使用给定的值更新GameObject的Color对象的alpha值。'
- en: When the Scene begins, the `Start()` method caches a reference to the MeshRenderer
    component (the `meshRenderer` variable), and also the Color object of the Material
    of the MeshRenderer (the `fadeColor` variable). Finally, the GameObject's alpha
    is set to match the value of variable alphaStart, by invoking the `UpdateMaterialAlpha(...)`
    method.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 当场景开始时，`Start()`方法缓存了MeshRenderer组件（`meshRenderer`变量）的引用，以及MeshRenderer材质的Color对象（`fadeColor`变量）。最后，通过调用`UpdateMaterialAlpha(...)`方法，将GameObject的alpha值设置为与变量alphaStart的值匹配。
- en: The `OnMouseUp()` method is invoked when the user clicks the GameObject with
    their mouse. This invokes the `StartFading()` method.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户用鼠标点击GameObject时，会调用`OnMouseUp()`方法。这会调用`StartFading()`方法。
- en: The actions to start fading weren't simply put in this method, since we may
    also wish to start fading due to some other events (such as keyboard clicks, a
    timer hitting some value, or an NPC changing into some mode such as dying). So
    we separate the logic that detects that event that we are interested has taken
    place, with the actions we wish to perform, in this case to start the fading process.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 开始淡入的动作并没有简单地放在这个方法中，因为我们可能还希望由于某些其他事件（如键盘点击、计时器达到某个值或NPC进入某种模式，如死亡）而开始淡入。因此，我们将检测我们感兴趣的事件是否已经发生的那部分逻辑与我们要执行的动作分开，在这种情况下是开始淡入过程。
- en: The `StartFading()` method records the current **Time**, since we need that
    to know when to finish fading (time when we started fading + fadeDurationSeconds).
    Also the isFading Boolean flag is set to true, so logic elsewhere relating to
    fading will know it's time to do things.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`StartFading()`方法记录当前的**时间**，因为我们需要知道何时结束淡入（开始淡入的时间 + 淡入持续时间）。同时，将isFading布尔标志设置为true，这样其他与淡入相关的逻辑就会知道是时候做事情了。'
- en: The `Update()` method, called each frame, tests whether the `isFading` flag
    is true. If it is, the `FadeAlpha()` method is invoked for each frame.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`Update()`方法，每帧调用一次，测试`isFading`标志是否为真。如果是，则每帧调用`FadeAlpha()`方法。'
- en: 'The `FadeAlpha()` method is where the majority of our alpha-fading logic is
    based:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`FadeAlpha()`方法是我们大部分alpha淡入逻辑的基础：'
- en: '`timeFading` is calculated: The time since we started fading'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`timeFading`计算：我们开始淡入以来经过的时间'
- en: '`fadePercentage` is calculated: How far we are from start (0) to finish (1)
    of our fading'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fadePercentage`的计算：我们距离开始（0）到结束（1）的淡入距离'
- en: 'alpha is calculated: The appropriate alpha value for our fade percentage, using
    the `Lerp(...)` method to choose an `intermedia` value based on a `0..1` percentage'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: alpha值的计算：使用`Lerp(...)`方法根据`0..1`百分比选择一个`intermedia`值，以确定我们淡入百分比适当的alpha值
- en: The `UpdateMaterialAlpha(...)` method with the new alpha value
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用新的alpha值的`UpdateMaterialAlpha(...)`方法
- en: If fading has finished (`fadePercentage` >= 1), we set the `isFading` Boolean
    flag to false to indicate this
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果淡入已完成（`fadePercentage` >= 1），我们将`isFading`布尔标志设置为false以指示这一点
- en: There's more...
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Here are some ways to enhance our fading features.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些增强我们的淡入功能的方法。
- en: Start with keypress and fade in from invisible
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从按键开始并从不可见淡入
- en: 'The preceding code can fade in from invisible (`alphaStart` = 0) to fully visible
    (`alphaEnd` = 1). However, if we can''t see the object initially, then it''s a
    bit much to ask the player to click an invisible Sphere! So let''s add code to
    the `Update()` method (checked each frame) to detect when the *F* key is pressed,
    as an alternative way to start our fading process:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码可以从不可见（`alphaStart` = 0）淡入到完全可见（`alphaEnd` = 1）。然而，如果我们最初看不到对象，那么要求玩家点击一个不可见的球体就有点过分了！所以让我们在`Update()`方法中添加代码（每帧检查）来检测当按下*F*键时，作为启动我们的淡入过程的另一种方式：
- en: '[PRE3]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Destroy object when fading complete
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 淡入完成后销毁对象
- en: If fading to invisible is how a GameObject communicates to the player that it
    is leaving the scene (completed/dying), then we may want that GameObject to be
    Destroyed after the fading process is completed. Let's add this feature to our
    code.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果淡入到不可见是GameObject与玩家沟通它正在离开场景（完成/死亡）的方式，那么我们可能希望在淡入过程完成后销毁该GameObject。让我们将此功能添加到我们的代码中。
- en: 'Do the following:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: 'Add a new public Boolean variable to our script (default to false):'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的脚本中添加一个新的公共布尔变量（默认为false）：
- en: '[PRE4]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add a new `EndFade()` method, which sets `isFading` to `false`, and then tests
    whether the public `destroyWhenFadingComplete` variable was set to true, and if
    so, Destroys the GameObject:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的`EndFade()`方法，将`isFading`设置为`false`，然后检查公共变量`destroyWhenFadingComplete`是否设置为`true`，如果是，则销毁GameObject：
- en: '[PRE5]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Refactor the `FadeAlpha()` method so that it invokes `EndFade()` when the fading
    is completed (`fadeProgress >= fadeDurationSeconds`):'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新设计`FadeAlpha()`方法，使其在淡入完成后调用`EndFade()`方法（`fadeProgress >= fadeDurationSeconds`）：
- en: '[PRE6]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using GameObect's alpha as our starting alpha value
  id: totrans-398
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GameObect的alpha值作为我们的起始alpha值
- en: It may be that the game designer has set the alpha value of a GameObject in
    the Inspector to the initial value they want. So let's enhance our code to allow
    this to be indicated by checking a public Boolean flag variable in the **Inspector**,
    and adding code to read and use the GameObject's alpha if that option is chosen.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是游戏设计师已经在检查器中将GameObject的alpha值设置为他们在初始值。所以让我们增强我们的代码，以便通过检查**检查器**中的公共布尔标志变量来指示这一点，并添加代码来读取和使用GameObject的alpha值，如果选择了该选项。
- en: 'Do the following:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: 'In the **Inspector**, click the Color picker for the Material Albedo, and set
    the `Alpha` value to something other than 255 (for example, set to 32, which is
    mostly transparent):'
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**检查器**中，点击材质的Albedo颜色选择器，并将`Alpha`值设置为除255之外的其他值（例如，设置为32，这几乎是透明的）：
- en: '![](img/44bd6cbf-10ea-4cab-84c3-f3a4e6dc1862.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bd6cbf-10ea-4cab-84c3-f3a4e6dc1862.png)'
- en: 'Add a new public Boolean variable to our script (default to false):'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的脚本中添加一个新的公共布尔变量（默认为false）：
- en: '[PRE7]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add logic to the `Start()` method so that if this flag is true, we use the
    alpha value of the Color read from the GameObject''s Material as the Scene begins
    (`fadeColor.a`):'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Start()`方法中添加逻辑，以便如果此标志为真，我们使用从GameObject的材质中读取的颜色alpha值作为场景开始时的alpha值（`fadeColor.a`）：
- en: '[PRE8]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Using a coroutine for our fading loop
  id: totrans-407
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用协程进行我们的淡入循环
- en: Where possible, we should avoid adding code in the `Update()` method, since
    this is invoked every frame, and so can reduce the performance of our games, especially
    if many objects have scripted components with `Update()` methods, all testing
    flags every frame.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在可能的情况下，我们应该避免在`Update()`方法中添加代码，因为这将每帧被调用，这可能会降低我们游戏的表现，尤其是如果有许多对象具有带有`Update()`方法的脚本组件，并且每个帧都在测试所有标志。
- en: One very effective solution is to invoke a coroutine when we want some actions
    performed over several frames, since a coroutine can perform some actions, then
    yield control back to the rest of the Scene, and then resume its actions from
    the point it left off previously, and so on until its logic is completed.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 一个非常有效的解决方案是在我们需要在多个帧上执行某些动作时调用协程，因为协程可以执行一些动作，然后将控制权交还给场景的其余部分，然后从之前离开的地方继续其动作，依此类推，直到其逻辑完成。
- en: 'Do the following:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: Remove the `Update()` method.
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 删除`Update()`方法。
- en: 'Add a new using statement at the top of the script class, since coroutines
    return an `IEnumerator` value, which is part of the `System.Collections` package:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在脚本类的顶部添加一个新的using语句，因为协程返回一个`IEnumerator`值，它是`System.Collections`包的一部分：
- en: '[PRE9]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add a new method:'
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的方法：
- en: '[PRE10]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Refactor the `StartFading()` method, so that is starts our coroutine:'
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重构`StartFading()`方法，使其开始我们的协程：
- en: '[PRE11]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: That's it – once the coroutine has been started, it will be called each frame
    until it completes its logic, temporarily suspending its execution each time a
    yield statement is executed.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样 - 一旦协程开始执行，它将在每一帧中被调用，直到完成其逻辑，每次执行yield语句时都会暂时挂起其执行。
