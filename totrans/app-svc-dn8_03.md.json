["```cs\n    dotnet tool list --global \n    ```", "```cs\n    Package Id                            Version      Commands\n    -----------------------------------------------------------------\n    dotnet-ef                             7.0.0        dotnet-ef\n    microsoft.web.librarymanager.cli      2.1.175      libman\n    redth.net.maui.check                  0.5.6        maui-check \n    ```", "```cs\n    dotnet tool uninstall --global dotnet-ef \n    ```", "```cs\n    dotnet tool install --global dotnet-ef \n    ```", "```cs\n    dotnet tool update --global dotnet-ef \n    ```", "```cs\nCREATE TABLE Products (\n    ProductId       INTEGER       PRIMARY KEY,\n    **ProductName     NVARCHAR (****40****)** **NOT****NULL****,**\n    SupplierId      \"INT\",\n    ...\n); \n```", "```cs\n[Required] \n[StringLength(40)]\npublic string ProductName { get; set; } \n```", "```cs\n[Column(TypeName = \"money\")]\npublic decimal? UnitPrice { get; set; } \n```", "```cs\nCREATE TABLE Categories (\n    CategoryId   INTEGER       PRIMARY KEY,\n    CategoryName NVARCHAR (15) NOT NULL,\n    **Description  \"NTEXT\",**\n    Picture      \"IMAGE\"\n); \n```", "```cs\n[Column(TypeName = \"ntext\")]\npublic string? Description { get; set; } \n```", "```cs\nmodelBuilder.Entity<Product>()\n  .Property(product => product.ProductName)\n  .IsRequired() // only needed if you have disabled nullability checks\n  .HasMaxLength(40); \n```", "```cs\nmodelBuilder.Entity<Product>()\n  .HasData(new Product\n  {\n    ProductId = 1,\n    ProductName = \"Chai\",\n    UnitPrice = 8.99M\n  }); \n```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Design\" \n        Version=\"8.0.0\" />\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" \n        Version=\"8.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;TrustServerCertificate=true;\" Microsoft.EntityFrameworkCore.SqlServer --output-dir Models --namespace Northwind.Models --data-annotations --context NorthwindDb \n    ```", "```cs\n    Build startedâ€¦\n    Build succeeded.\n    To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263. \n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    using System.ComponentModel.DataAnnotations.Schema;\n    using Microsoft.EntityFrameworkCore;\n    namespace Northwind.Models;\n    [Index(\"CategoryName\", Name = \"CategoryName\")]\n    public partial class Category\n    {\n      [Key]\n      public int CategoryId { get; set; }\n      [StringLength(15)]\n      public string CategoryName { get; set; } = null!;\n      [Column(TypeName = \"ntext\")]\n      public string? Description { get; set; }\n      [Column(TypeName = \"image\")]\n      public byte[]? Picture { get; set; }\n      [InverseProperty(\"Category\")]\n      public virtual ICollection<Product> Products { get; set; } \n        = new List<Product>();\n    } \n    ```", "```cs\n    using System;\n    using System.Collections.Generic;\n    using Microsoft.EntityFrameworkCore;\n    namespace Northwind.Models;\n    public partial class NorthwindDb : DbContext\n    {\n      public NorthwindDb()\n      {\n      }\n      public NorthwindDb(DbContextOptions<NorthwindDb> options)\n        : base(options)\n      {\n      }\n      public virtual DbSet<AlphabeticalListOfProduct> \n        AlphabeticalListOfProducts { get; set; }\n      public virtual DbSet<Category> Categories { get; set; }\n    ...\n      public virtual DbSet<Territory> Territories { get; set; }\n      protected override void OnConfiguring(\n        DbContextOptionsBuilder optionsBuilder)\n    #warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148\\. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.\n            => optionsBuilder.UseSqlServer(\"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;TrustServerCertificate=true;\");\n      protected override void OnModelCreating(ModelBuilder modelBuilder)\n      {\n        modelBuilder.Entity<AlphabeticalListOfProduct>(entity =>\n        {\n          entity.ToView(\"Alphabetical list of products\");\n        });\n    ...\n        OnModelCreatingPartial(modelBuilder);\n      }\n      partial void OnModelCreatingPartial(ModelBuilder modelBuilder);\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder. \n    ```", "```cs\n    protected override void OnConfiguring(\n      DbContextOptionsBuilder optionsBuilder)\n    {\n      if (!optionsBuilder.IsConfigured)\n      {\n        SqlConnectionStringBuilder builder = new();\n        builder.DataSource = \".\"; // \"ServerName\\InstanceName\" e.g. @\".\\sqlexpress\"\n        builder.InitialCatalog = \"Northwind\";\n        builder.TrustServerCertificate = true;\n        builder.MultipleActiveResultSets = true;\n        // Because we want to fail faster. Default is 15 seconds.\n        builder.ConnectTimeout = 3;\n        // If using Windows Integrated authentication.\n        builder.IntegratedSecurity = true;\n        // If using SQL Server authentication.\n        // builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");\n        // builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");\n        optionsBuilder.UseSqlServer(builder.ConnectionString);\n      }\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder.\n    using Microsoft.EntityFrameworkCore; // ToQueryString, GetConnectionString\n    using Northwind.Models; // To use NorthwindDb.\n    SqlConnectionStringBuilder builder = new();\n    builder.InitialCatalog = \"Northwind\";\n    builder.MultipleActiveResultSets = true;\n    builder.Encrypt = true;\n    builder.TrustServerCertificate = true;\n    builder.ConnectTimeout = 10;\n    WriteLine(\"Connect to:\");\n    WriteLine(\"  1 - SQL Server on local machine\");\n    WriteLine(\"  2 - Azure SQL Database\");\n    WriteLine(\"  3 - Azure SQL Edge\");\n    WriteLine();\n    Write(\"Press a key: \");\n    ConsoleKey key = ReadKey().Key;\n    WriteLine(); WriteLine();\n    if (key is ConsoleKey.D1 or ConsoleKey.NumPad1)\n    {\n      builder.DataSource = \".\"; // Local SQL Server\n      // @\".\\apps-services-book\"; // Local SQL Server with an instance name\n    }\n    else if (key is ConsoleKey.D2 or ConsoleKey.NumPad2)\n    {\n      builder.DataSource = // Azure SQL Database\n        \"tcp:apps-services-book.database.windows.net,1433\";\n    }\n    else if (key is ConsoleKey.D3 or ConsoleKey.NumPad3)\n    {\n      builder.DataSource = \"tcp:127.0.0.1,1433\"; // Azure SQL Edge\n    }\n    else\n    {\n      WriteLine(\"No data source selected.\");\n      return;\n    }\n    WriteLine(\"Authenticate using:\");\n    WriteLine(\"  1 - Windows Integrated Security\");\n    WriteLine(\"  2 - SQL Login, for example, sa\");\n    WriteLine();\n    Write(\"Press a key: \");\n    key = ReadKey().Key;\n    WriteLine(); WriteLine();\n    if (key is ConsoleKey.D1 or ConsoleKey.NumPad1)\n    {\n      builder.IntegratedSecurity = true;\n    }\n    else if (key is ConsoleKey.D2 or ConsoleKey.NumPad2)\n    {\n      Write(\"Enter your SQL Server user ID: \");\n      string? userId = ReadLine();\n      if (string.IsNullOrWhiteSpace(userId))\n      {\n        WriteLine(\"User ID cannot be empty or null.\");\n        return;\n      }\n      builder.UserID = userId;\n      Write(\"Enter your SQL Server password: \");\n      string? password = ReadLine();\n      if (string.IsNullOrWhiteSpace(password))\n      {\n        WriteLine(\"Password cannot be empty or null.\");\n        return;\n      }\n      builder.Password = password;\n      builder.PersistSecurityInfo = false;\n    }\n    else\n    {\n      WriteLine(\"No authentication selected.\");\n      return;\n    }\n    DbContextOptionsBuilder<NorthwindDb> options = new();\n    options.UseSqlServer(builder.ConnectionString);\n    using (NorthwindDb db = new(options.Options))\n    {\n      Write(\"Enter a unit price: \");\n      string? priceText = ReadLine();\n      if (!decimal.TryParse(priceText, out decimal price))\n      {\n        WriteLine(\"You must enter a valid unit price.\");\n        return;\n      }\n      // We have to use var because we are projecting into an anonymous type.\n      var products = db.Products\n        .Where(p => p.UnitPrice > price)\n        .Select(p => new { p.ProductId, p.ProductName, p.UnitPrice });\n      WriteLine(\"----------------------------------------------------------\");\n      WriteLine(\"| {0,5} | {1,-35} | {2,8} |\", \"Id\", \"Name\", \"Price\");\n      WriteLine(\"----------------------------------------------------------\");\n      foreach (var p in products)\n      {\n        WriteLine(\"| {0,5} | {1,-35} | {2,8:C} |\",\n          p.ProductId, p.ProductName, p.UnitPrice);\n      }\n      WriteLine(\"----------------------------------------------------------\");\n      WriteLine(products.ToQueryString());\n      WriteLine();\n      WriteLine($\"Provider:   {db.Database.ProviderName}\");\n      WriteLine($\"Connection: {db.Database.GetConnectionString()}\");\n    } \n    ```", "```cs\n    Enter a unit price: --\n    |    Id | Name                                |    Price--\n    |     9 | Mishi Kobe Niku                     |   Â£97.00 |\n    |    18 | Carnarvon Tigers                    |   Â£62.50 |\n    |    20 | Sir Rodney's Marmalade              |   Â£81.00 |\n    |    29 | ThÃ¼ringer Rostbratwurst             |  Â£123.79 |\n    |    38 | CÃ´te de Blaye                       |  Â£263.50--\n    DECLARE @__price_0 decimal(2) = 60.0;\n    SELECT [p].[ProductId], [p].[ProductName], [p].[UnitPrice]\n    FROM [Products] AS [p]\n    WHERE [p].[UnitPrice] > @__price_0\n    Provider:   Microsoft.EntityFrameworkCore.SqlServer\n    Connection: Data Source=tcp:apps-services-book.database.windows.net,1433;Initial Catalog=Northwind;Persist Security Info=False;User ID=<censored>;Password=<censored>;Multiple Active Result Sets=False;Encrypt=True;Trust Server Certificate=False;Connection Timeout=10; \n    ```", "```cs\nvar products = db.Products\n  .AsNoTracking()\n  .Where(p => p.UnitPrice > price)\n  .Select(p => new { p.ProductId, p.ProductName, p.UnitPrice }); \n```", "```cs\ndb.ChangeTracker.QueryTrackingBehavior = QueryTrackingBehavior.NoTracking; \n```", "```cs\nvar products = db.Products\n  .AsNoTrackingWithIdentityResolution()\n  .Where(p => p.UnitPrice > price)\n  .Select(p => new { p.ProductId, p.ProductName, p.UnitPrice }); \n```", "```cs\ndb.ChangeTracker.QueryTrackingBehavior = \n  QueryTrackingBehavior.NoTrackingWithIdentityResolution; \n```", "```cs\nprotected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n{\n  optionsBuilder.UseSqlServer(connectionString)\n    .UseQueryTrackingBehavior(QueryTrackingBehavior.NoTracking);\n} \n```", "```cs\npublic abstract class Person\n{\n  public int Id { get; set; }\n  public string? Name { get; set; }\n}\npublic class Student : Person\n{\n  public string? Subject { get; set; }\n}\npublic class Employee : Person\n{\n  public DateTime HireDate { get; set; }\n} \n```", "```cs\nCREATE TABLE [People] (\n  [Id] int NOT NULL IDENTITY,\n  [Name] nvarchar(max) NOT NULL,\n **[Discriminator] nvarchar(max)** **NOT****NULL****,**\n **[Subject] nvarchar(max)** **NULL****,**\n **[HireDate] nvarchar(max)** **NULL****,**\n  CONSTRAINT [PK_People] PRIMARY KEY ([Id])\n); \n```", "```cs\nCREATE TABLE [People] (\n  [Id] int NOT NULL IDENTITY,\n  [Name] nvarchar(max) NOT NULL,\n  CONSTRAINT [PK_People] PRIMARY KEY ([Id])\n);\nCREATE TABLE [Students] (\n  [Id] int NOT NULL,\n  [Subject] nvarchar(max) NULL,\n  CONSTRAINT [PK_Students] PRIMARY KEY ([Id])\n  CONSTRAINT [FK_Students_People] FOREIGN KEY ([Id]) REFERENCES [People] ([Id])\n);\nCREATE TABLE [Employees] (\n  [Id] int NOT NULL,\n  [HireDate] nvarchar(max) NULL,\n  CONSTRAINT [PK_Employees] PRIMARY KEY ([Id])\n  CONSTRAINT [FK_Employees_People] FOREIGN KEY ([Id]) REFERENCES [People] ([Id])\n); \n```", "```cs\nCREATE TABLE [Students] (\n  [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [PersonIds]),\n  [Name] nvarchar(max) NOT NULL,\n  [Subject] nvarchar(max) NULL,\n  CONSTRAINT [PK_Students] PRIMARY KEY ([Id])\n  CONSTRAINT [FK_Students_People] FOREIGN KEY ([Id]) REFERENCES [People] ([Id])\n);\nCREATE TABLE [Employees] (\n  [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [PersonIds]),\n  [Name] nvarchar(max) NOT NULL,\n  [HireDate] nvarchar(max) NULL,\n  CONSTRAINT [PK_Employees] PRIMARY KEY ([Id])\n  CONSTRAINT [FK_Employees_People] FOREIGN KEY ([Id]) REFERENCES [People] ([Id])\n); \n```", "```cs\npublic DbSet<Person> People { get; set; }\npublic DbSet<Student> Students { get; set; }\npublic DbSet<Employee> Employees { get; set; } \n```", "```cs\nmodelBuilder.Entity<Person>().UseTphMappingStrategy(); \n```", "```cs\nmodelBuilder.Entity<Person>().UseTptMappingStrategy();\nmodelBuilder.Entity<Person>().UseTpcMappingStrategy(); \n```", "```cs\nmodelBuilder.Entity<Student>().ToTable(\"Students\");\nmodelBuilder.Entity<Employee>().ToTable(\"Employees\"); \n```", "```cs\nmodelBuilder.HasSequence<int>(\"PersonIds\");\nmodelBuilder.Entity<Person>().UseTpcMappingStrategy()\n  .Property(e => e.Id).HasDefaultValueSql(\"NEXT VALUE FOR [PersonIds]\"); \n```", "```cs\n    <ItemGroup>\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.Design\" \n        Version=\"8.0.0\" />\n      <PackageReference\n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" \n        Version=\"8.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <Using Include=\"System.Console\" Static=\"true\" />\n    </ItemGroup> \n    ```", "```cs\n    using System.ComponentModel.DataAnnotations; // To use [Required].\n    namespace Northwind.Models;\n    public abstract class Person\n    {\n      public int Id { get; set; }\n      [Required]\n      [StringLength(40)]\n      public string? Name { get; set; }\n    } \n    ```", "```cs\n    namespace Northwind.Models;\n    public class Student : Person\n    {\n      public string? Subject { get; set; }\n    } \n    ```", "```cs\n    namespace Northwind.Models;\n    public class Employee : Person\n    {\n      public DateTime HireDate { get; set; }\n    } \n    ```", "```cs\n    using Microsoft.EntityFrameworkCore; // To use DbSet<T>.\n    namespace Northwind.Models;\n    public class HierarchyDb : DbContext\n    {\n      public DbSet<Person>? People { get; set; }\n      public DbSet<Student>? Students { get; set; }\n      public DbSet<Employee>? Employees { get; set; }\n      public HierarchyDb(DbContextOptions<HierarchyDb> options)\n          : base(options)\n      {\n      }\n      protected override void OnModelCreating(ModelBuilder modelBuilder)\n      {\n        modelBuilder.Entity<Person>()\n          .UseTphMappingStrategy();\n        // Populate database with sample data.\n        Student p1 = new() { Id = 1, Name = \"Roman Roy\", \n          Subject = \"History\" };\n        Employee p2 = new() { Id = 2, Name = \"Kendall Roy\", \n          HireDate = new(year: 2014, month: 4, day: 2) };\n        Employee p3 = new() { Id = 3, Name = \"Siobhan Roy\", \n          HireDate = new(year: 2020, month: 9, day: 12) };\n        modelBuilder.Entity<Student>().HasData(p1);\n        modelBuilder.Entity<Employee>().HasData(p2, p3);\n      }\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // To use SqlConnectionStringBuilder.\n    using Microsoft.Extensions.Options;\n    using Microsoft.EntityFrameworkCore; // GenerateCreateScript()\n    using Northwind.Models; // HierarchyDb, Person, Student, Employee\n    DbContextOptionsBuilder<HierarchyDb> options = new();\n    SqlConnectionStringBuilder builder = new();\n    builder.DataSource = \".\"; // \"ServerName\\InstanceName\" e.g. @\".\\sqlexpress\"\n    builder.InitialCatalog = \"HierarchyMapping\";\n    builder.TrustServerCertificate = true;\n    builder.MultipleActiveResultSets = true;\n    // Because we want to fail faster. Default is 15 seconds.\n    builder.ConnectTimeout = 3;\n    // If using Windows Integrated authentication.\n    builder.IntegratedSecurity = true;\n    // If using SQL Server authentication.\n    // builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");\n    // builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");\n    options.UseSqlServer(builder.ConnectionString);\n    using (HierarchyDb db = new(options.Options))\n    {\n      bool deleted = await db.Database.EnsureDeletedAsync();\n      WriteLine($\"Database deleted: {deleted}\");\n\n      bool created = await db.Database.EnsureCreatedAsync();\n      WriteLine($\"Database created: {created}\");\n      WriteLine(\"SQL script used to create the database:\");\n      WriteLine(db.Database.GenerateCreateScript());\n      if (db.Students is null || !db.Students.Any())\n      {\n        WriteLine(\"There are no students.\");\n      }\n      else\n      {\n        foreach (Student student in db.Students)\n        {\n          WriteLine(\"{0} studies {1}\",\n            student.Name, student.Subject);\n        }\n      }\n      if (db.Employees is null || !db.Employees.Any())\n      {\n        WriteLine(\"There are no employees.\");\n      }\n      else\n      {\n        foreach (Employee employee in db.Employees)\n        {\n          WriteLine(\"{0} was hired on {1}\",\n            employee.Name, employee.HireDate);\n        }\n      }\n      if (db.People is null || !db.People.Any())\n      {\n        WriteLine(\"There are no people.\");\n      }\n      else\n      {\n        foreach (Person person in db.People)\n        {\n          WriteLine(\"{0} has ID of {1}\",\n            person.Name, person.Id);\n        }\n      }\n    } \n    ```", "```cs\n    Database deleted: False\n    Database created: True\n    SQL script used to create the database:\n    CREATE TABLE [People] (\n        [Id] int NOT NULL IDENTITY,\n        [Name] nvarchar(40) NOT NULL,\n        [Discriminator] nvarchar(8) NOT NULL,\n        [HireDate] datetime2 NULL,\n        [Subject] nvarchar(max) NULL,\n        CONSTRAINT [PK_People] PRIMARY KEY ([Id])\n    );\n    GO\n    IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Discriminator', N'Name', N'Subject') AND [object_id] = OBJECT_ID(N'[People]'))\n        SET IDENTITY_INSERT [People] ON;\n    INSERT INTO [People] ([Id], [Discriminator], [Name], [Subject])\n    VALUES (1, N'Student', N'Roman Roy', N'History');\n    IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Discriminator', N'Name', N'Subject') AND [object_id] = OBJECT_ID(N'[People]'))\n        SET IDENTITY_INSERT [People] OFF;\n    GO\n    IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Discriminator', N'HireDate', N'Name') AND [object_id] = OBJECT_ID(N'[People]'))\n        SET IDENTITY_INSERT [People] ON;\n    INSERT INTO [People] ([Id], [Discriminator], [HireDate], [Name])\n    VALUES (2, N'Employee', '2014-04-02T00:00:00.0000000', N'Kendall Roy'),\n    (3, N'Employee', '2020-09-12T00:00:00.0000000', N'Siobhan Roy');\n    IF EXISTS (SELECT * FROM [sys].[identity_columns] WHERE [name] IN (N'Id', N'Discriminator', N'HireDate', N'Name') AND [object_id] = OBJECT_ID(N'[People]'))\n        SET IDENTITY_INSERT [People] OFF;\n    GO\n    Roman Roy studies History\n    Kendall Roy was hired on 02/04/2014 00:00:00\n    Siobhan Roy was hired on 12/09/2020 00:00:00\n    Roman Roy has ID of 1\n    Kendall Roy has ID of 2\n    Siobhan Roy has ID of 3 \n    ```", "```cs\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n      modelBuilder.Entity<Person>()\n    **// .UseTphMappingStrategy();**\n     **.UseTptMappingStrategy();** \n    ```", "```cs\n    Database deleted: True\n    Database created: True\n    SQL script used to create the database:\n    CREATE TABLE [People] (\n        [Id] int NOT NULL IDENTITY,\n        [Name] nvarchar(40) NOT NULL,\n        CONSTRAINT [PK_People] PRIMARY KEY ([Id])\n    );\n    GO\n    CREATE TABLE [Employees] (\n        [Id] int NOT NULL,\n        [HireDate] datetime2 NOT NULL,\n        CONSTRAINT [PK_Employees] PRIMARY KEY ([Id]),\n        CONSTRAINT [FK_Employees_People_Id] FOREIGN KEY ([Id]) REFERENCES [People] ([Id])\n    );\n    GO\n    CREATE TABLE [Students] (\n        [Id] int NOT NULL,\n        [Subject] nvarchar(max) NULL,\n        CONSTRAINT [PK_Students] PRIMARY KEY ([Id]),\n        CONSTRAINT [FK_Students_People_Id] FOREIGN KEY ([Id]) REFERENCES [People] ([Id])\n    );\n    GO \n    ```", "```cs\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\n    {\n      modelBuilder.Entity<Person>()\n    **// .UseTphMappingStrategy();**\n    **// .UseTptMappingStrategy();**\n     **.UseTpcMappingStrategy()**\n     **.Property(person => person.Id)**\n     **.HasDefaultValueSql(****\"****NEXT VALUE FOR [PersonIds]\"****);**\n     **modelBuilder.HasSequence<****int****>(****\"PersonIds\"****, builder =>**\n     **{**\n     **builder.StartsAt(****4****);**\n     **});** \n    ```", "```cs\n    CREATE SEQUENCE [PersonIds] AS int START WITH 4 INCREMENT BY 1 NO MINVALUE NO MAXVALUE NO CYCLE;\n    GO\n    CREATE TABLE [Employees] (\n        [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [PersonIds]),\n        [Name] nvarchar(40) NOT NULL,\n        [HireDate] datetime2 NOT NULL,\n        CONSTRAINT [PK_Employees] PRIMARY KEY ([Id])\n    );\n    GO\n    CREATE TABLE [Students] (\n        [Id] int NOT NULL DEFAULT (NEXT VALUE FOR [PersonIds]),\n        [Name] nvarchar(40) NOT NULL,\n        [Subject] nvarchar(max) NULL,\n        CONSTRAINT [PK_Students] PRIMARY KEY ([Id])\n    );\n    GO \n    ```", "```cs\n    WriteLine(db.Database.GenerateCreateScript());\n    **if** **((db.Employees** **is****not****null****) && (db.Students** **is****not****null****))**\n    **{**\n     **db.Students.Add(****new** **Student { Name =** **\"Connor Roy\"****,** \n     **Subject =** **\"Politics\"** **});**\n     **db.Employees.Add(****new** **Employee { Name =** **\"Kerry Castellabate\"****,** \n     **HireDate = DateTime.UtcNow });**\n    **int** **result = db.SaveChanges();**\n     **WriteLine(****$\"****{result}** **people added.\"****);**\n    **}** \n    ```", "```cs\n    2 people added.\n    Roman Roy studies History\n    Connor Roy studies Politics\n    Kendall Roy was hired on 02/04/2014 00:00:00\n    Siobhan Roy was hired on 12/09/2020 00:00:00\n    Kerry Castellabate was hired on 19/05/2023 10:13:53\n    Kendall Roy has ID of 2\n    Siobhan Roy has ID of 3\n    Kerry Castellabate has ID of 4\n    Roman Roy has ID of 1\n    Connor Roy has ID of 5 \n    ```", "```cs\n    <Project Sdk=\"Microsoft.NET.Sdk\">\n      <PropertyGroup>\n        <TargetFramework>net8.0</TargetFramework>\n        <ImplicitUsings>enable</ImplicitUsings>\n        <Nullable>enable</Nullable>\n     **<TreatWarningsAsErrors>****true****</TreatWarningsAsErrors>**\n      </PropertyGroup>\n     **<ItemGroup>**\n     **<PackageReference**\n     **Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"****8.0.0****\" />**\n     **<PackageReference** \n     **Include=\"Microsoft.EntityFrameworkCore.Design\" Version=\"****8.0.0****\">**\n     **<PrivateAssets>all</PrivateAssets>**\n     **<IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>**\n     **</PackageReference>** \n     **</ItemGroup>**\n    </Project> \n    ```", "```cs\n    dotnet ef dbcontext scaffold \"Data Source=.;Initial Catalog=Northwind;Integrated Security=true;TrustServerCertificate=True;\" Microsoft.EntityFrameworkCore.SqlServer --namespace Northwind.EntityModels --data-annotations \n    ```", "```cs\n    [Key]\n    [StringLength(5)]\n    **[****RegularExpression(****\"[A-Z]{5}\"****)****]** \n    public string CustomerId { get; set; } = null!; \n    ```", "```cs\n    <ItemGroup>\n      <PackageReference \n        Include=\"Microsoft.EntityFrameworkCore.SqlServer\" Version=\"8.0.0\" />\n    </ItemGroup>\n    <ItemGroup>\n      <ProjectReference Include=\"..\\Northwind.Common.EntityModels\n    .SqlServer\\Northwind.Common.EntityModels.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // SqlConnectionStringBuilder\n    using Microsoft.EntityFrameworkCore; // UseSqlServer\n    using Microsoft.Extensions.DependencyInjection; // IServiceCollection\n    namespace Northwind.EntityModels;\n    public static class NorthwindContextExtensions\n    {\n      /// <summary>\n      /// Adds NorthwindContext to the specified IServiceCollection. Uses the SqlServer database provider.\n      /// </summary>\n      /// <param name=\"services\">The service collection.</param>\n      /// <param name=\"connectionString\">Set to override the default.</param>\n      /// <returns>An IServiceCollection that can be used to add more services.</returns>\n      public static IServiceCollection AddNorthwindContext(\n        this IServiceCollection services,\n        string? connectionString = null)\n      {\n        if (connectionString == null)\n        {\n          SqlConnectionStringBuilder builder = new();\n          builder.DataSource = \".\";\n          builder.InitialCatalog = \"Northwind\";\n          builder.TrustServerCertificate = true;\n          builder.MultipleActiveResultSets = true;\n          // If using Azure SQL Edge.\n          // builder.DataSource = \"tcp:127.0.0.1,1433\";\n          // Because we want to fail fast. Default is 15 seconds.\n          builder.ConnectTimeout = 3;\n          // If using Windows Integrated authentication.\n          builder.IntegratedSecurity = true;\n          // If using SQL Server authentication.\n          // builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");\n          // builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");\n          connectionString = builder.ConnectionString;\n        }\n        services.AddDbContext<NorthwindContext>(options =>\n        {\n          options.UseSqlServer(connectionString);\n          // Log to console when executing EF Core commands.\n          options.LogTo(Console.WriteLine,\n            new[] { Microsoft.EntityFrameworkCore\n              .Diagnostics.RelationalEventId.CommandExecuting });\n        },\n        // Register with a transient lifetime to avoid concurrency \n        // issues with Blazor Server projects.\n        contextLifetime: ServiceLifetime.Transient, \n        optionsLifetime: ServiceLifetime.Transient);\n        return services;\n      }\n    } \n    ```", "```cs\n    namespace Northwind.EntityModels;\n    public interface IHasLastRefreshed\n    {\n      DateTimeOffset LastRefreshed { get; set; }\n    } \n    ```", "```cs\n    using System.ComponentModel.DataAnnotations.Schema; // [NotMapped]\n    namespace Northwind.EntityModels;\n    public partial class Employee **:** **IHasLastRefreshed**\n    {\n     **[****NotMapped****]**\n    **public** **DateTimeOffset LastRefreshed {** **get****;** **set****; }**\n    } \n    ```", "```cs\n    // IMaterializationInterceptor, MaterializationInterceptionData\n    using Microsoft.EntityFrameworkCore.Diagnostics;\n    namespace Northwind.EntityModels;\n    public class SetLastRefreshedInterceptor : IMaterializationInterceptor\n    {\n      public object InitializedInstance(\n        MaterializationInterceptionData materializationData,\n        object entity)\n      {\n        if (entity is IHasLastRefreshed entityWithLastRefreshed)\n        {\n          entityWithLastRefreshed.LastRefreshed = DateTimeOffset.UtcNow;\n        }\n        return entity;\n      }\n    } \n    ```", "```cs\n    using Microsoft.Data.SqlClient; // SqlConnectionStringBuilder\n    using Microsoft.EntityFrameworkCore; // DbContext\n    namespace Northwind.EntityModels;\n    public partial class NorthwindContext : DbContext\n    {\n      private static readonly SetLastRefreshedInterceptor\n        setLastRefreshedInterceptor = new();\n      protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n      {\n        if (!optionsBuilder.IsConfigured)\n        {\n          SqlConnectionStringBuilder builder = new();\n          builder.DataSource = \".\";\n          builder.InitialCatalog = \"Northwind\";\n          builder.TrustServerCertificate = true;\n          builder.MultipleActiveResultSets = true;\n          // Because we want to fail fast. Default is 15 seconds.\n          builder.ConnectTimeout = 3;\n          // If using Windows Integrated authentication.\n          builder.IntegratedSecurity = true;\n          // If using SQL Server authentication.\n          // builder.UserID = Environment.GetEnvironmentVariable(\"MY_SQL_USR\");\n          // builder.Password = Environment.GetEnvironmentVariable(\"MY_SQL_PWD\");\n          optionsBuilder.UseSqlServer(builder.ConnectionString);\n        }\n        optionsBuilder.AddInterceptors(setLastRefreshedInterceptor);\n      }\n    } \n    ```", "```cs\n    <ItemGroup>\n      <ProjectReference Include=\"..\\Northwind.Common.DataContext\n    .SqlServer\\Northwind.Common.DataContext.SqlServer.csproj\" />\n    </ItemGroup> \n    ```", "```cs\n    using Northwind.EntityModels;\n    namespace Northwind.Common.EntityModels.Tests\n    {\n      public class NorthwindEntityModelsTests\n      {\n        [Fact]\n        public void CanConnectIsTrue()\n        {\n          using (NorthwindContext db = new()) // arrange\n          {\n            bool canConnect = db.Database.CanConnect(); // act\n            Assert.True(canConnect); // assert\n          }\n        }\n        [Fact]\n        public void ProviderIsSqlServer()\n        {\n          using (NorthwindContext db = new())\n          {\n            string? provider = db.Database.ProviderName;\n            Assert.Equal(\"Microsoft.EntityFrameworkCore.SqlServer\", provider);\n          }\n        }\n        [Fact]\n        public void ProductId1IsChai()\n        {\n          using (NorthwindContext db = new())\n          {\n            Product product1 = db.Products.Single(p => p.ProductId == 1);\n            Assert.Equal(\"Chai\", product1.ProductName);\n          }\n        }\n        [Fact]\n        public void EmployeeHasLastRefreshedIn10sWindow()\n        {\n          using (NorthwindContext db = new())\n          {\n            Employee employee1 = db.Employees.Single(p => p.EmployeeId == 1);\n            DateTimeOffset now = DateTimeOffset.UtcNow;\n            Assert.InRange(actual: employee1.LastRefreshed,\n              low: now.Subtract(TimeSpan.FromSeconds(5)),\n              high: now.AddSeconds(5));\n          }\n        }\n      }\n    } \n    ```", "```cs\n    dotnet test \n    ```"]