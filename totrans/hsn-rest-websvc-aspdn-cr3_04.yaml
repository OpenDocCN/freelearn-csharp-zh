- en: Overview of ASP.NET Core
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ASP.NET Core 概述
- en: In this chapter, we will explore some of the fundamental concepts of ASP.NET
    Core. .NET Core is cross-platform, but the IDEs and code editors that are used
    with it might vary depending on which OS they run on. To avoid repetition and
    cover all OS variants, I always use the CLI in the examples presented in this
    book. Furthermore, the `dotnet` instruction is the unique entry point and is also
    used, under the hood, by code editors and IDEs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 ASP.NET Core 的一些基本概念。.NET Core 是跨平台的，但与其一起使用的 IDE 和代码编辑器可能会根据它们运行的操作系统而有所不同。为了避免重复并涵盖所有操作系统变体，我在本书中提供的示例中始终使用
    CLI。此外，`dotnet` 指令是唯一的入口点，并且也被代码编辑器和 IDE 在幕后使用。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Setting up a .NET Core 3.1 and ASP.NET Core project
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 .NET Core 3.1 和 ASP.NET Core 项目
- en: The file structure of a .NET Core project template
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 项目模板的文件结构
- en: Setting up our .NET Core project
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的 .NET Core 项目
- en: 'This chapter assumes that you have already installed .NET Core version 3.1
    or higher on your machine. First of all, let''s start by launching the following
    command in our console:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章假设您已经在您的机器上安装了 .NET Core 3.1 或更高版本。首先，让我们在我们的控制台中启动以下命令：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output will appear as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '![](img/26466f6e-c8ea-4210-8234-3187b3ea8d71.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/26466f6e-c8ea-4210-8234-3187b3ea8d71.png)'
- en: The result of the *dotnet new* instruction
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '`dotnet new` 指令的结果'
- en: The preceding output shows all the .NET Core project templates available on
    the local machine. Each of these has a user-friendly name, a short name, and tags.
    They are available in C#, F# **and** VB; the default is C#.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 上述输出显示了本地机器上可用的所有 .NET Core 项目模板。每个模板都有一个用户友好的名称、简短名称和标签。它们支持 C#、F# **和** VB；默认为
    C#。
- en: 'To create a new template, we''ll use the short name. For example, in order
    to create a console application, we should run the following instruction:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个新的模板，我们将使用简短名称。例如，为了创建一个控制台应用程序，我们应该运行以下指令：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding instruction will create a new project in the current folder,
    with the following tree structure:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 上述指令将在当前文件夹中创建一个新的项目，其结构如下：
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `HelloWorld.csproj` file contains all the meta-information about the project.
    The .NET Core version of the `.csproj` file is more lightweight compared to the
    `.csproj` file in previous versions of the .NET Framework. We'll discuss the new
    structure of this project file next in this chapter. The `Program.cs` file is
    the entry point of the application.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`HelloWorld.csproj` 文件包含有关项目的所有元信息。与之前版本的 .NET Framework 中的 `.csproj` 文件相比，.NET
    Core 版本的 `.csproj` 文件更轻量。我们将在本章中讨论此项目文件的新结构。`Program.cs` 文件是应用程序的入口点。'
- en: 'To build and execute our project, we can run the following commands inside
    the project folder:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建和执行我们的项目，我们可以在项目文件夹中运行以下命令：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As expected, we obtain the following result:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，我们得到以下结果：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Unlike old .NET Framework projects, the build and run steps are lightweight
    processes, and they don't require any additional tools or configurations. In fact,
    .NET Core is not strictly chained to the development machine like the .NET Framework.
    Eventually, developers can write code without any other IDEs or code editors.
    However, for obvious reasons, it is always recommended that you use them to simplify
    the development process.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 与旧 .NET Framework 项目不同，构建和运行步骤是轻量级过程，并且不需要任何额外的工具或配置。实际上，.NET Core 并不是像 .NET
    Framework 那样严格绑定到开发机器。最终，开发者可以编写代码而无需其他 IDE 或代码编辑器。然而，出于明显的原因，始终建议您使用它们以简化开发过程。
- en: 'It is also essential to note that, once we execute the `dotnet build` command,
    the project files will change in the following way:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 还必须注意的是，一旦我们执行 `dotnet build` 命令，项目文件将按以下方式更改：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `bin/Debug/` folder contains all the app's DLLs. Below that, we can see
    the `netcoreapp3.1` folder, which refers to the current target framework. Therefore,
    if you build your project using a multi-target approach, you will find a folder
    for each target framework you specified. Now that we are able to run a simple
    console app, let's have a closer look at the *csproj* present in the project.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`bin/Debug/` 文件夹包含所有应用程序的 DLL 文件。在其下方，我们可以看到 `netcoreapp3.1` 文件夹，它指的是当前的目标框架。因此，如果你使用多目标方法构建项目，你将找到一个针对你指定的每个目标框架的文件夹。现在我们已经能够运行一个简单的控制台应用程序，让我们更仔细地看看项目中的
    *csproj* 文件。'
- en: Overview of .csproj
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: .csproj 概述
- en: 'As mentioned previously, in a plain console application template, there are
    two essential files: `ProjectName.csproj` and `Program.cs`. First of all, let''s
    have a look at the `.csproj` file:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在纯控制台应用程序模板中，有两个基本文件：`ProjectName.csproj` 和 `Program.cs`。首先，让我们看看 `.csproj`
    文件：
- en: '[PRE6]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The format of the `.csproj` file is XML, just like earlier versions of the .NET
    Framework. The
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`.csproj` 文件的格式是 XML，就像 .NET Framework 的早期版本一样。以下内容省略，因为它是无意义的空行。'
- en: '`Sdk="Microsoft.NET.Sdk"` namespace refers to the SDK we want to use to build
    our project. The `PropertyGroup` node contains a set of properties, and it can
    be associated with some conditional behaviors. `ItemGroup` is a node that usually
    contains package references. In .NET Core, it is possible to specify the `TargetFramework`
    property to assign a target framework to our project. To set up our application
    as a *multi-target application,* therefore, we can change our `TargetFramework`
    node as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sdk="Microsoft.NET.Sdk"` 命名空间指的是我们想要用于构建项目的 SDK。`PropertyGroup` 节点包含一组属性，并且可以与一些条件行为相关联。`ItemGroup`
    是一个通常包含包引用的节点。在 .NET Core 中，我们可以指定 `TargetFramework` 属性为项目分配目标框架。为了将我们的应用程序设置为
    *多目标应用程序*，因此，我们可以将我们的 `TargetFramework` 节点更改为以下内容：'
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note that the XML node has changed from `TargetFramework` to `TargetFrameworks`,
    furthermore our project will be built on both .NET Core 3.1 and .NET Standard
    2.0.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，XML 节点已从 `TargetFramework` 更改为 `TargetFrameworks`，此外我们的项目将在 .NET Core 3.1
    和 .NET Standard 2.0 上构建。
- en: 'According to the MSBuild documentation ( [https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019)),
    it is possible to define different packages for each target framework. For example,
    in a double target framework project such as the previous one, we may define various
    dependencies for each target, as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 MSBuild 文档（[https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019](https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild?view=vs-2019)），可以为每个目标框架定义不同的包。例如，在一个双目标框架项目中，如前所述，我们可能为每个目标定义各种依赖项，如下所示：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In this case, we''ll have separate references for each target: at compile-time,
    the framework generates two target versions, the `netstandard2.0` generated output
    will refer the `Microsoft.AspNetCore.Server.Kestrel.Core` package. This is an
    unusual type of configuration, but it comes in handy if we have a high level of
    customization in our project or if your project is a library consumed by different
    versions of .NET. The `dotnet new` command also sets a specific `OutputType` property
    depending on the type of project you are creating: the `OutputType` property defines
    whether the project is executable (`Exe`) or a library (`Library`). The significant
    difference is that in the first case it can be executed, whereas in the latter
    it does not contain any entry points from which to run the application. Therefore,
    we will not be able to execute the `dotnet run` command on a `<OutputType>Library</OutputType>`
    project type, on the other side, we do need to specify `static void Main` entry
    point method in case of a `<OutputType>Exe</OutputType>` project . Let''s continue
    by discussing a bit the domain of the executable projects by walking through the
    *Program.cs* file of a standard console template.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将为每个目标设置单独的引用：在编译时，框架生成两个目标版本，`netstandard2.0` 生成的输出将引用 `Microsoft.AspNetCore.Server.Kestrel.Core`
    包。这是一种不寻常的配置类型，但如果我们项目有高度定制化，或者如果我们的项目是一个由不同版本的 .NET 消耗的库，它就很有用。`dotnet new` 命令还根据你创建的项目类型设置一个特定的
    `OutputType` 属性：`OutputType` 属性定义项目是可执行的（`Exe`）还是库（`Library`）。显著的区别在于，在前一种情况下它可以被执行，而在后一种情况下它不包含任何运行应用程序的入口点。因此，我们无法在
    `<OutputType>Library</OutputType>` 项目类型上执行 `dotnet run` 命令。另一方面，如果我们有一个 `<OutputType>Exe</OutputType>`
    项目，我们确实需要指定 `static void Main` 入口点方法。让我们通过查看标准控制台模板的 `Program.cs` 文件来继续讨论可执行项目的领域。
- en: The Program.cs file in detail
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`Program.cs` 文件详细说明'
- en: 'The `Program.cs` file is the main entry point of the application. It sets up
    and runs all the components we need. By default, the console application template
    executes a single statement:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`Program.cs` 文件是应用程序的主要入口点。它设置并运行我们需要的所有组件。默认情况下，控制台应用程序模板执行单个语句：'
- en: '[PRE9]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The preceding snippet is a plain .NET Core application that runs `Console.WriteLine`
    to print a message in the console. In an ASP.NET Core application, the `Program.cs`
    file is usually utilized to initialize and run the web host.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码片段是一个普通的.NET Core应用程序，它运行`Console.WriteLine`在控制台打印一条消息。在一个ASP.NET Core应用程序中，`Program.cs`文件通常用于初始化和运行Web宿主。
- en: 'C# version 7.1 introduced the `async void Main` method. This feature is implemented
    to avoid workarounds involved in running asynchronous code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: C# 7.1版本引入了`async void Main`方法。这个特性是为了避免运行异步代码时涉及到的解决方案：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In summary, the `Program.cs` file is the main execution root for applications
    built on .NET Core 3.1\. It usually runs a set of statements in order to startup
    our application. In general, we should keep `Program.cs` as clean as possible
    to boost the reusability of our classes. In the next section, we will see how
    it is also possible to combine the `csproj` structure and the `Program.cs` file
    in order to build a simple API project.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，`Program.cs`文件是建立在.NET Core 3.1之上的应用程序的主要执行根。它通常运行一系列语句以启动我们的应用程序。一般来说，我们应该尽可能保持`Program.cs`的简洁，以提高我们类的可重用性。在下一节中，我们将看到如何结合`csproj`结构和`Program.cs`文件来构建一个简单的API项目。
- en: Setting up an ASP.NET Core project
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置ASP.NET Core项目
- en: 'As mentioned in [Chapter 1](b3e95a60-c4fb-491e-ad7e-a2213f70a63b.xhtml), *REST
    101 and Getting Started with ASP.NET Core*, the MVC pattern is all about separating
    concerns. It aims to give developers some guidelines to ensure that the different
    components of the web application are not mixed up. The following is a refresher
    on the MVC pattern:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如[第1章](b3e95a60-c4fb-491e-ad7e-a2213f70a63b.xhtml)中提到的，“REST 101和ASP.NET Core入门”，MVC模式的核心是分离关注点。它的目的是为开发者提供一些指导原则，以确保Web应用程序的不同组件不会混淆。以下是对MVC模式的复习：
- en: The Modelseeks to define the domain model of our application. It should also
    be noted that models don't contain any references to our data sources and databases.
    They describe the entities in our app.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型旨在定义我们应用程序的领域模型。还应注意的是，模型不包含对我们数据源和数据库的任何引用。它们描述了我们的应用程序中的实体。
- en: The Views partpresents the data in the form of HTML pages. In web services,
    views are not included because the model is serialized in JSON, HTML, or other
    similar formats. The critical point is that views should not contain logic. They
    are hard to test and hard to maintain. Over the past few years, views have become
    increasingly more powerful. The Razor engine, the default view rendering engine
    provided by ASP.NET Core, has recently made several new features available. It
    is easy for developers to implement logic in views, but this should be avoided
    at all costs.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图部分以HTML页面的形式呈现数据。在Web服务中，视图不包括在内，因为模型以JSON、HTML或其他类似格式序列化。关键点是视图不应包含逻辑。它们难以测试和难以维护。在过去的几年里，视图变得越来越强大。Razor引擎，ASP.NET
    Core提供的默认视图渲染引擎，最近提供了一些新功能。开发者很容易在视图中实现逻辑，但应尽量避免这样做。
- en: The Controllers part of MVC handles requests from users. They take information
    from the request and update the model. In real business applications, controllers
    are usually supported by service or repository classes, which add another level
    to the domain model layer.
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MVC的控制器部分处理来自用户的请求。它们从请求中获取信息并更新模型。在实际的商业应用程序中，控制器通常由服务或存储库类支持，这为领域模型层增加了另一个层次。
- en: Let's have a detailed look at the default ASP.NET Core web API project template.
    The project uses the model and controller parts of the MVC pattern to serve a
    simple HTTP response with the content serialized in JSON.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解一下默认的ASP.NET Core Web API项目模板。该项目使用MVC模式的模型和控制器部分来提供简单的HTTP响应，内容以JSON序列化。
- en: 'First of all, let''s create a new project using the following commands:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们使用以下命令创建一个新的项目：
- en: '[PRE11]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The execution of the preceding command creates the following folder structure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行前面的命令将创建以下文件夹结构：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The execution of the `dotnet new webapi` command creates a new project file
    called `SampleAPI` inside a folder with the same name. The following is the resulting
    `SampleAPI.csproj` generated by the `dotnet new webapi` command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`dotnet new webapi`命令将在同名文件夹内创建一个名为`SampleAPI`的新项目文件。以下是`dotnet new webapi`命令生成的`SampleAPI.csproj`文件：
- en: '[PRE13]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The first thing to note is that this project uses the `Microsoft.NET.Sdk.Web`
    SDK, which refers to the web application SDK. Furthermore, the .NET Core framework
    provides different SDKs depending on the purpose of the project we are about to
    create. For example, in the case of a desktop application, the project will specify
    another SDK: `Microsoft.NET.Sdk.WindowsDesktop`. Choosing between different SDKs
    guarantees developers an excellent level of modularity. Secondly, the project
    file does not specify any particular dependency except the `netcoreapp` target
    framework used by the application.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要注意的是，该项目使用 `Microsoft.NET.Sdk.Web` SDK，它指的是网页应用程序 SDK。此外，.NET Core 框架根据我们即将创建的项目目的提供不同的
    SDK。例如，在桌面应用程序的情况下，项目将指定另一个 SDK：`Microsoft.NET.Sdk.WindowsDesktop`。在不同的 SDK 之间进行选择确保了开发者能够获得优秀的模块化水平。其次，项目文件没有指定任何特定的依赖项，除了应用程序使用的
    `netcoreapp` 目标框架。
- en: The project structure
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目结构
- en: All ASP.NET Core web templates have a similar structure. The main difference
    lies in the `views` folder, which is not present in web API projects.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 ASP.NET Core 网页模板都有类似的结构。主要区别在于 `views` 文件夹，在网页 API 项目中不存在。
- en: 'Before proceeding, let''s have a more detailed look at the resulting content
    of the `SampleAPI` folder:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们更详细地查看 `SampleAPI` 文件夹的结果内容：
- en: '`Program.cs` is the main entry point of the application, and it runs the default
    web server used by APIs.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Program.cs` 是应用程序的主要入口点，它运行 API 使用的默认网页服务器。'
- en: '`Startup.cs`defines and configures our application pipeline and services.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Startup.cs` 定义并配置我们的应用程序管道和服务。'
- en: The `Controllers` foldercontains all the controllers for our application. According
    to the default naming convention, ASP.NET Core searches in this folder for the
    controllers of our app.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controllers` 文件夹包含我们应用程序的所有控制器。根据默认的命名约定，ASP.NET Core 会在这个文件夹中搜索我们应用程序的控制器。'
- en: '`Properties/launchSettings.json` file represents the settings for our project.
    This file is created when you try to change any of your project''s properties,
    and it usually stores the application URL for our services or apps. Furthermore,
    if we have a quick look at the content of the file we can notice two different
    profiles: one with the name of the project created, and another one with the `IISExpress`
    name. Every project can have multiple profiles associated with it. they can be
    used to specify some of the launch settings, and the environment variables used
    by the application. Therefore, it is possible to run the application using the
    `dotnet run` command by specifying a profile using the `--launch-profile` flag;'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Properties/launchSettings.json` 文件代表我们项目的设置。当您尝试更改项目的任何属性时，该文件会被创建，并且通常存储我们的服务或应用程序的应用程序
    URL。此外，如果我们快速查看文件内容，我们可以注意到两个不同的配置文件：一个以创建的项目名称命名，另一个以 `IISExpress` 命名。每个项目都可以与多个配置文件相关联。它们可以用来指定一些启动设置和应用程序使用的环境变量。因此，可以通过使用
    `dotnet run` 命令并指定配置文件使用 `--launch-profile` 标志来运行应用程序；'
- en: '`appsettings.json` and `appsettings.{Environment}.json`contains the settings
    based on our environment. They are replacements for the settings section in the
    `web.config` file.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`appsettings.json` 和 `appsettings.{Environment}.json` 包含基于我们环境的设置。它们是 `web.config`
    文件中设置部分的替代品。'
- en: The Program.cs and Startup.cs files
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Program.cs 和 Startup.cs 文件
- en: 'Let''s continue by examining the `Program.cs` file of a web API project:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续通过检查网页 API 项目的 `Program.cs` 文件：
- en: '[PRE14]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The preceding code imports the `Microsoft.AspNetCore.Hosting` and `Microsoft.Extensions.Hosting`
    namespaces. They supply the necessary references for the initialization of a new
    `IHostBuilder` instance created in the `CreateHostBuilder` function. The `CreateHostBuilder`
    function executes the `Host.CreateDefaultBuilder` method, which initializes the
    web host of our APIs. Furthermore, we should note that the `IHostBuilder` instance
    returned by the `CreateDefaultBuilder` method refers to the `Startup` class of
    the project. The `Main` method invokes the `CreateHostBuilder` function and executes
    the `Build` and `Run` methods exposed by the `IHostBuilder` interface.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码导入了 `Microsoft.AspNetCore.Hosting` 和 `Microsoft.Extensions.Hosting` 命名空间。它们为在
    `CreateHostBuilder` 函数中创建的新 `IHostBuilder` 实例的初始化提供了必要的引用。`CreateHostBuilder`
    函数执行 `Host.CreateDefaultBuilder` 方法，该方法初始化我们的 API 的网页宿主。此外，我们还应该注意，`CreateDefaultBuilder`
    方法返回的 `IHostBuilder` 实例指向项目的 `Startup` 类。`Main` 方法调用 `CreateHostBuilder` 函数并执行
    `IHostBuilder` 接口公开的 `Build` 和 `Run` 方法。
- en: 'Let''s examine the `Startup` class (defined in the `Startup.cs` file), which
    is used to configure the application stack:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查`Startup`类（在`Startup.cs`文件中定义），它用于配置应用程序堆栈：
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `Startup` class initializes the `IConfiguration` attribute through dependency
    injection. The `IConfiguration` object represents a key/value object which contains
    configurations for the app. By default, the `CreateDefaultBuilder` method declared
    in the `Program.cs` file sets `appsettings.json` as the default configuration
    file.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup`类通过依赖注入初始化`IConfiguration`属性。`IConfiguration`对象代表一个键/值对象，其中包含应用程序的配置。默认情况下，`Program.cs`文件中声明的`CreateDefaultBuilder`方法将`appsettings.json`设置为默认配置文件。'
- en: 'The `Startup` class has two different methods, which behave in the following
    ways:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`Startup`类有两个不同的方法，它们的行为如下：'
- en: The `ConfigureServices`method configures services in our application using dependency
    injection. By default, it adds controllers by executing the `.AddControllers`
    extension method. In ASP.NET Core, the term services usually refer to any component
    or class that provides our application with features and functionalities. As we'll
    see in the next few chapters, ASP.NET Core frequently uses dependency injectionto
    maintain a good design and loosely-coupled classes.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ConfigureServices`方法通过依赖注入配置我们应用程序中的服务。默认情况下，它通过执行`.AddControllers`扩展方法来添加控制器。在ASP.NET
    Core中，术语服务通常指任何为我们应用程序提供功能和功能的组件或类。正如我们将在下一章中看到的，ASP.NET Core经常使用依赖注入来维护良好的设计和松散耦合的类。'
- en: 'The `Configure` method is used to configure the application''s middleware pipeline.
    It accepts two arguments: `IApplicationBuilder` and `IWebHostEnvironment`. The
    first contains all the pipelines for our app and exposes extension methods to
    build our app with middleware. We''ll have a look at middleware in detail in [Chapter
    3](77d18c37-0c9d-4b2b-82f5-74fd874c0e0f.xhtml), *Working with the Middleware Pipeline*.
    The `IWebHostEvironment` interface gives some information about the current hosting
    environment of the application, such as its type and its name. In a web API project,
    the `Configure` method executes a list of extensions methods. The most important
    are the `UseRouting` and `UseEndpoints` extension methods. The execution of the
    `UseRouting` method defines the point in the pipeline where routing decisions
    are taken. The `UseEndpoints` extension method defines the actual execution of
    the previously selected endpoint. In the case of a web API project, the only endpoints
    involved are the controllers. Therefore, the `UseEndpoints` method executes the
    `MapControllers` extension method to initialize the default routing convention
    for controller classes, provided in .NET Core.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Configure`方法用于配置应用程序的中间件管道。它接受两个参数：`IApplicationBuilder`和`IWebHostEnvironment`。第一个包含我们应用程序的所有管道并公开扩展方法来构建带有中间件的应用程序。我们将在[第3章](77d18c37-0c9d-4b2b-82f5-74fd874c0e0f.xhtml)，*与中间件管道一起工作*中详细查看中间件。`IWebHostEvironment`接口提供了有关应用程序当前托管环境的某些信息，例如其类型和名称。在一个Web
    API项目中，`Configure`方法执行一系列扩展方法。其中最重要的是`UseRouting`和`UseEndpoints`扩展方法。`UseRouting`方法的执行定义了管道中路由决策的点。`UseEndpoints`扩展方法定义了之前选择的端点的实际执行。在Web
    API项目中，涉及的端点只有控制器。因此，`UseEndpoints`方法执行`MapControllers`扩展方法来初始化由.NET Core提供的控制器类的默认路由约定。'
- en: It should be noted that the ASP.NET Core `Startup` class provides a high-level,
    code-first way to configure the dependencies of your application through dependency
    injection, which means that it only initializes what you need. Furthermore, .NET
    Core is strongly modularity-oriented; this is one of the reasons why it performs
    better than the .NET Framework.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 应该注意的是，ASP.NET Core的`Startup`类通过依赖注入提供了一种高级、代码优先的方式来配置应用程序的依赖项，这意味着它只初始化你所需要的。此外，.NET
    Core具有强烈的模块化导向；这也是它比.NET Framework表现更好的原因之一。
- en: Since all pipelines and dependencies are initialized in the aforementioned class,
    you know exactly where they can be changed. In large applications and services
    with a lot of different components, it is advisable to create custom extension
    methods that handle the initialization of specific parts of your app.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有管道和依赖项都在上述类中初始化，你知道它们可以更改的位置。在具有许多不同组件的大型应用程序和服务中，建议创建自定义扩展方法来处理应用程序特定部分的初始化。
- en: Overview of controllers
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制器概述
- en: 'Controllers are a fundamental part of the web API in ASP.NET Core projects.
    They handle incoming requests and act as the entry point of our application. We''ll
    look at controllers in more detail in [Chapter 4](54bd7784-d757-4cbc-91d4-5362ca3a60de.xhtml),
    *Dependency Injection*, but for now, let''s examine the default `WeatherForecastController`
    provided by the web API template:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器是 ASP.NET Core 项目中 Web API 的基本部分。它们处理传入的请求并作为我们应用程序的入口点。我们将在第 4 章*依赖注入*中更详细地探讨控制器，但就目前而言，让我们检查
    Web API 模板提供的默认 `WeatherForecastController`：
- en: '[PRE16]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`WeatherForecastController` comes with basic methods. By default, it doesn''t
    use any data source; it simply returns some mock values. Let''s proceed by having
    a look at the main elements of the `WeatherForecastController` class:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`WeatherForecastController` 包含基本方法。默认情况下，它不使用任何数据源；它只是返回一些模拟值。让我们通过查看 `WeatherForecastController`
    类的主要元素来继续：'
- en: The `ApiController` attribute indicates that the controller and all extended
    controllers serve HTTP API responses. It was introduced in ASP.NET Core version
    2.1, and it is usually combined with the `ControllerBase` class.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ApiController` 属性表示控制器及其所有扩展控制器提供 HTTP API 响应。它在 ASP.NET Core 2.1 版本中引入，通常与
    `ControllerBase` 类结合使用。'
- en: 'The `Route("api/[controller]")` attribute defines the route for our controller.
    For example, in this case the controller will respond to the following URI: `https://myhostname:myport/api/weatherforecast`.
    The `[controller]` placeholder is used to indicate the name of the controller.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Route("api/[controller]")` 属性定义了我们的控制器的路由。例如，在这种情况下，控制器将响应以下 URI：`https://myhostname:myport/api/weatherforecast`。`[controller]`
    占位符用于表示控制器的名称。'
- en: The `ControllerBase` class is usually combined with the `ApiController` attribute,
    and it is defined in the `Microsoft.AspNetCore.Mvc` namespace. The `ControllerBase`
    class indicates a controller without support for the views part. It provides a
    few base methods, such as `Created`, `CreatedAtAction`*,* and `NotFound`*.* It
    also provides some properties, for example, `HttpContext`, which contains the
    requests and responses of our web service.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ControllerBase` 类通常与 `ApiController` 属性结合使用，并在 `Microsoft.AspNetCore.Mvc`
    命名空间中定义。`ControllerBase` 类表示一个不支持视图部分的控制器。它提供了一些基本方法，例如 `Created`、`CreatedAtAction`*、*
    和 `NotFound`*。它还提供了一些属性，例如 `HttpContext`，它包含我们 Web 服务的请求和响应。'
- en: The `HttpGet` attribute is part of the `Microsoft.AspNetCore.Mvc` namespace.
    It identifies the type of HTTP method accepted by the action. It also accepts
    an additional parameter, such as `[HttpGet("{id}")]`, which defines the route
    template of the action. ASP.NET Core exposes an HTTP attribute for each HTTP verb,
    such as `HttpPost`*,* `HttpPut`*,* or`HttpDelete`.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpGet` 属性是 `Microsoft.AspNetCore.Mvc` 命名空间的一部分。它标识了动作接受的 HTTP 方法类型。它还接受一个额外的参数，例如
    `[HttpGet("{id}")]`，该参数定义了动作的路由模板。ASP.NET Core 为每个 HTTP 动词暴露了一个 HTTP 属性，例如 `HttpPost`*、*
    `HttpPut`*、* 或 `HttpDelete`。'
- en: Finally, we can take a brief look at the implementation of the `WeatherForecastController()`
    constructor method and the `Get()` method. The first initializes all dependencies
    of the controller class, and it is the dependency injection entry point for our
    class; all dependencies relating to the controllers are solved in the constructor.
    The `Get()` method implements the logic and returns a collection of elements that
    will be serialized and then passed to the HTTP response of the web API.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以简要地看一下 `WeatherForecastController()` 构造方法以及 `Get()` 方法的实现。第一个初始化控制器类的所有依赖项，它是我们类的依赖注入入口点；所有与控制器相关的依赖项都在构造函数中解决。`Get()`
    方法实现逻辑并返回一个将被序列化然后传递到 Web API HTTP 响应中的元素集合。
- en: Summary
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced some central concepts in *.*NET Core. We walked
    through the console application and web API templates as well as the ASP.NET Core
    web API structure*,* and the structure of a controller class.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 .NET Core 的一些核心概念。我们探讨了控制台应用程序和 Web API 模板，以及 ASP.NET Core Web API
    结构*、*和控制器类的结构。
- en: The topics covered in this chapter provide the skills necessary to start with
    a console application project on .NET Core, and they also provides basic knowledge
    regarding the arrangement of an ASP.NET Core project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题提供了在 .NET Core 上开始控制台应用程序项目所需的技能，并且它们还提供了有关 ASP.NET Core 项目安排的基本知识。
- en: In the next chapter, we will explore a core concept of ASP.NET Core, middleware,
    and how it can be used to intercept requests and enhance our application stack.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 ASP.NET Core 的一个核心概念——中间件，以及如何使用它来拦截请求并增强我们的应用程序堆栈。
