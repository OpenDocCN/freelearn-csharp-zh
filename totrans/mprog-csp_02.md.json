["```cs\nusing System;\npublic class Program\n{\n    public static void Main()\n    {\n        Console.WriteLine(\"Hello world!\");\n    }\n}\n```", "```cs\n.class private auto ansi '<Module>'\n{\n}\n.class public auto ansi beforefieldinit Program\n    extends [System.Runtime]System.Object\n{\n    .method public hidebysig static\n        void Main () cil managed\n    {        .maxstack 8\n        IL_0000: ldstr \"Hello world!\"\n        IL_0005: call void [System.Console]System.\n            Console::WriteLine(string)\n        IL_000a: ret\n    }\n    .method public hidebysig specialname rtspecialname\n        instance void .ctor () cil managed\n    {\n        .maxstack 8\n        IL_0000: ldarg.0\n        IL_0001: call instance void [System.Runtime]System.\n            Object::.ctor()\n        IL_0006: ret\n    }\n}\n```", "```cs\nL0000: mov rcx, 0x2217fb34a50\n```", "```cs\nL000a: mov rcx, [rcx]\n```", "```cs\nL000d: jmp 0x00007ffef72f2fc8\n```", "```cs\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    public string SocialSecurityNumber { get; set; }\n}\n```", "```cs\npublic string SerializeToJson(object instance)\n{\n    var stringBuilder = new StringBuilder();\n    var type = instance.GetType();\n    var properties = type.GetProperties();\n    Var first = true;\n    stringBuilder.Append(\"{\\n\");\n    foreach( var property in properties )\n    {\n        if (!first)\n        {\n            StringBuilder.Append(\",\\n\");\n        }\n        stringBuilder.Append($\"   \\\"{property.Name}\\\":\n          \\\"{property.GetValue(instance)}\\\"\");\n    }\n    stringBuilder.Append(\"\\n}\");\n}\n```", "```cs\nvar person = new Person\n{\n   FirstName = \"Jane\",\n   LastName = \"Doe\",\n   SocialSecurityNumber = \"12345abcd\"\n};\nConsole.WriteLine(Serializer.SerializeToJson(person));\n```", "```cs\n{\n   \"FirstName\": \"Jane\",\n   \"LastName\": \"Doe\",\n   \"SocialSecurityNumber\": \"12345abcd\"\n}\n```", "```cs\n[Flags]\npublic enum MyEnum\n{\n    Flag1 = 1,\n    Flag2 = 1 << 1,\n    Flag3 = 1 << 2,\n    Flag4 = 1 << 3\n}\n```", "```cs\npublic class Person\n{\n    public string FirstName { get; set; }\n    public string LastName { get; set; }\n    [JsonIgnore]\n    public string FullName => $\"{FirstName} {LastName}\";\n    public string SocialSecurityNumber { get; set; }\n}\n```", "```cs\npublic class PersonalIdentifiableInformationAttribute :\nAttribute\n{\n}\n```", "```cs\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.\nProperty | AttributeTargets.Parameter, AllowMultiple = false)]\npublic sealed class PersonalIdentifiableInformationAttribute :\nAttribute\n{\n}\n```", "```cs\n[AttributeUsage(AttributeTargets.Class | AttributeTargets.\nProperty | AttributeTargets.Parameter, AllowMultiple = false)]\npublic sealed class PersonalIdentifiableInformationAttribute :\nAttribute\n{\n    public PersonalIdentifiableInformationAttribute(string\n      purpose = \"\")\n    {\n        Purpose = purpose;\n    }\n    public string Purpose { get; }\n}\n```", "```cs\npublic class Person\n{\n    [PersonalIdentifiableInformation(\"First name of person\")]\n    public string FirstName { get; set; }\n    [PersonalIdentifiableInformation(\"Last name of person\")]\n    public string LastName { get; set; }\n    [PersonalIdentifiableInformation(\"Unique identifier for\n      person\")]\n    public string SocialSecurityNumber { get; set; }\n}\n```", "```cs\npublic class CalculatorTests\n{\n    [Fact]\n    public void Add()\n    {\n        // Arrange\n        var left = 5;\n        var right = 3;\n        var expectedResult = 8;\n        // Act\n        var actualResult = Calculator.Add(left, right);\n        Assert.Equal(expectedResult, actualResult, 0);\n    }\n}\n```"]