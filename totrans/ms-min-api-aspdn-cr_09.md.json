["```cs\n    var builder = WebApplication.CreateBuilder(args);\n    //...\n    var supportedCultures = new CultureInfo[] { new(\"en\"), new(\"it\"), new(\"fr\") };\n    builder.Services.Configure<RequestLocalizationOptions>(options =>\n    {\n       options.SupportedCultures = supportedCultures;\n       options.SupportedUICultures = supportedCultures;\n       options.DefaultRequestCulture = new \n       RequestCulture(supportedCultures.First());\n    });\n    ```", "```cs\n    var app = builder.Build();\n    //...\n    app.UseRequestLocalization();\n    //...\n    app.Run();\n    ```", "```cs\npublic class AcceptLanguageHeaderOperationFilter : IOperationFilter\n{\n     private readonly List<IOpenApiAny>? \n     supportedLanguages;\n     public AcceptLanguageHeaderOperationFilter \n     (IOptions<RequestLocalizationOptions> \n     requestLocalizationOptions)\n     {\n           supportedLanguages = \n           requestLocalizationOptions.Value.\n           SupportedCultures?.Select(c => \n           newOpenApiString(c.TwoLetterISOLanguageName)).\n           Cast<IOpenApiAny>().           ToList();\n     }\n     public void Apply(OpenApiOperation operation, \n     OperationFilterContext context)\n     {\n           if (supportedLanguages?.Any() ?? false)\n           {\n                 operation.Parameters ??= new \n                 List<OpenApiParameter>();\n                 operation.Parameters.Add(new \n                 OpenApiParameter\n                 {\n                       Name = HeaderNames.AcceptLanguage,\n                       In = ParameterLocation.Header,\n                       Required = false,\n                       Schema = new OpenApiSchema\n                       {\n                             Type = \"string\",\n                             Enum = supportedLanguages,\n                             Default = supportedLanguages.\n                             First()\n                       }\n                 });\n           }\n     }\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n//...\nbuilder.Services.AddSwaggerGen(options =>\n{\n     options.OperationFilter<AcceptLanguageHeaderOperation\n     Filter>();\n});\n```", "```cs\napp.MapGet(\"/culture\", () => Thread.CurrentThread.CurrentCulture.DisplayName);\n```", "```cs\n    // using Chapter09.Resources;\n    app.MapGet(\"/helloworld\", () => Messages.HelloWorld);\n    ```", "```cs\n// using Chapter09.Resources;\napp.MapGet(\"/hello\", (string name) =>\n{\n     var message = string.Format(Messages.GreetingMessage, \n     name);\n     return message;\n});\n```", "```cs\npublic class Person\n{\n     [Required]\n     [MaxLength(30)]\n     public string FirstName { get; set; }\n     [Required]\n     [MaxLength(30)]\n     public string LastName { get; set; }\n     [EmailAddress]\n     [StringLength(100, MinimumLength = 6)]\n     public string Email { get; set; }\n}\n```", "```cs\npublic class Person\n{\n     [Display(Name = \"FirstName\", ResourceType = \n      typeof(Messages))]\n     [Required(ErrorMessageResourceName = \n     \"FieldRequiredAnnotation\",\n      ErrorMessageResourceType = typeof(Messages))]\n     public string FirstName { get; set; }\n     //...\n}\n```", "```cs\napp.MapPost(\"/people\", (Person person) =>\n{\n     var isValid = MiniValidator.TryValidate(person, out \n     var errors);\n     if (!isValid)\n     {\n           return Results.ValidationProblem(errors, title: \n           Messages.ValidationErrors);\n     }\n     return Results.NoContent();\n});\n```", "```cs\npublic class PersonValidator : AbstractValidator<Person>\n{\n     public PersonValidator()\n     {\n           RuleFor(p => p.FirstName).NotEmpty().\n           MaximumLength(30);\n           RuleFor(p => p.LastName).NotEmpty().\n           MaximumLength(30);\n           RuleFor(p => p.Email).EmailAddress().Length(6, \n           100);\n     }\n}\n```", "```cs\nRuleFor(p => p.FirstName).NotEmpty().\n     WithMessage(Messages.NotEmptyMessage).\n     WithName(Messages.FirstName);\n```", "```cs\napp.MapPost(\"/people\", async (Person person, IValidator<Person> validator) =>\n{\n     var validationResult = await validator.\n     ValidateAsync(person);\n     if (!validationResult.IsValid)\n     {\n           var errors = validationResult.ToDictionary();\n           return Results.ValidationProblem(errors, title: \n           Messages.ValidationErrors);\n     }\n     return Results.NoContent();\n});\n```", "```cs\npublic class UtcDateTimeConverter : JsonConverter<DateTime>\n{\n     public override DateTime Read(ref Utf8JsonReader \n     reader, Type typeToConvert, JsonSerializerOptions  \n     options)\n     => reader.GetDateTime().ToUniversalTime();\n     public override void Write(Utf8JsonWriter writer, \n     DateTime value, JsonSerializerOptions options)\n     => writer.WriteStringValue((value.Kind == \n     DateTimeKind.Local ? value.ToUniversalTime() : value)\n     .ToString(\"yyyy'-'MM'-'dd'T'HH':'mm':'ss'.'\n     fffffff'Z'\"));\n}\n```", "```cs\napp.MapPost(\"/date\", (DateInput date) =>\n{\n     return Results.Ok(new\n     {\n           Input = date.Value,\n           DateKind = date.Value.Kind.ToString(),\n           ServerDate = DateTime.Now\n     });\n});\npublic record DateInput(DateTime Value);\n```", "```cs\n{\n  \"input\": \"2022-03-06T22:42:37+01:00\",\n  \"dateKind\": \"Local\",\n  \"serverDate\": \"2022-03-07T18:33:17.0288535+01:00\"\n}\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\n//...\nbuilder.Services.Configure<Microsoft.AspNetCore.Http.Json.\nJsonOptions>(options =>\n{\n     options.SerializerOptions.Converters.Add(new \n     UtcDateTimeConverter());\n});\n```", "```cs\n{\n  \"input\": \"2022-03-06T21:42:37.0000000Z\",\n  \"dateKind\": \"Utc\",\n  \"serverDate\": \"2022-03-06T17:40:08.1472051Z\"\n}\n```"]