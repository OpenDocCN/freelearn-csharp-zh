- en: Chapter 8. Web Services with Push Notifications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章. 带有推送通知的 Web 服务
- en: Modern mobile applications are defined by their network connectivity. A mobile
    app that does not interact with a web server is both a rare find and not as interactive
    or social as it would otherwise be. In this book, we'll use the **Windows Azure**
    cloud platform to implement a server-side backend for our XamChat application.
    We'll use a feature called **Azure Mobile Services**, which is an excellent fit
    for our application and has the benefit of built-in push notifications. Once we
    are done with this chapter, our XamChat sample application will be much closer
    to being a real application and will allow its users to interact with one another.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现代移动应用程序由其网络连接性定义。一个不与 Web 服务器交互的移动应用既难找，又不如其他情况下那样互动或社交。在这本书中，我们将使用 **Windows
    Azure** 云平台来实现 XamChat 应用程序的服务器端后端。我们将使用一个名为 **Azure Mobile Services** 的功能，它非常适合我们的应用程序，并且具有内置推送通知的优势。一旦我们完成本章，我们的
    XamChat 示例应用程序将更接近成为一个真实的应用程序，并允许其用户相互交互。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The services offered by Windows Azure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows Azure 提供的服务
- en: Setting up your Azure account
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的 Azure 账户
- en: Azure Mobile Services as a backend for XamChat
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure Mobile Services 作为 XamChat 的后端
- en: Creating tables and scripts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建表和脚本
- en: Implementing a real web service for XamChat
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现 XamChat 的真实 Web 服务
- en: Using the Apple Push Notification service
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Apple Push 通知服务
- en: Sending notifications with Google Cloud Messaging
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google Cloud Messaging 发送通知
- en: Learning Windows Azure
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 学习 Windows Azure
- en: Windows Azure is an excellent cloud platform released by Microsoft in 2010\.
    Azure provides both **Infrastructure as a Service** (**IaaS**) and **Platform
    as a Service** (**PaaS**) for building modern web applications and services. This
    means that it provides you with access to direct virtual machines within which
    you can deploy any operating system or software of your choice. This is known
    as IaaS. Azure also provides multiple platforms for building applications such
    as **Azure Websites** or **SQL Azure**. These platforms are known as PaaS since
    you deploy your software at a high level and do not have to deal directly with
    virtual machines or manage software upgrades.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Windows Azure 是微软于 2010 年发布的一个优秀的云平台。Azure 提供了 **基础设施即服务**（**IaaS**）和 **平台即服务**（**PaaS**），用于构建现代的
    Web 应用和服务。这意味着它为您提供了访问直接虚拟机的权限，您可以在其中部署您选择的任何操作系统或软件。这被称为 IaaS。Azure 还提供了多个平台用于构建应用程序，如
    **Azure Websites** 或 **SQL Azure**。这些平台被称为 PaaS，因为您在较高层次上部署软件，无需直接处理虚拟机或管理软件升级。
- en: 'Let''s go through the following more common services provided by Windows Azure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 Windows Azure 提供的以下更常见的服务：
- en: '**Virtual machines**: Azure provides you with access to virtual machines of
    all sizes. You can install practically any operating system of your choice. There
    are many premade distributions to choose from within Azure''s gallery.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机**：Azure 为您提供了访问各种大小虚拟机的权限。您可以安装您选择的任何操作系统。在 Azure 的图库中有很多预制的发行版可供选择。'
- en: '**Websites**: You can deploy any type of website that will run in Microsoft
    IIS from ASP.NET sites to **PHP** or **Node.js**.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网站**：您可以部署任何在 Microsoft IIS 中运行的网站类型，从 ASP.NET 网站到 **PHP** 或 **Node.js**。'
- en: '**SQL Azure**: This is a cloud-based version of Microsoft SQL Server, which
    is a full-featured **Relational Database Management System** (**RDMS**) for storing
    data.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL Azure**：这是 Microsoft SQL Server 的云版本，它是一个功能齐全的 **关系数据库管理系统**（**RDMS**），用于存储数据。'
- en: '**Mobile Services**: This is a simple platform for building web services for
    mobile apps. It uses **SQL Azure** for backend storage and a simple JavaScript
    scripting system based on Node.js for adding business logic. In the latest version
    of Azure Mobile Services, you can also use C# and the ASP.NET Web API for developing
    server-side code.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**移动服务**：这是一个用于构建移动应用 Web 服务的简单平台。它使用 **SQL Azure** 作为后端存储，以及基于 Node.js 的简单
    JavaScript 脚本系统来添加业务逻辑。在 Azure Mobile Services 的最新版本中，您还可以使用 C# 和 ASP.NET Web
    API 来开发服务器端代码。'
- en: '**Storage**: Azure provides **Blob storage**, a method for storing binary files,
    and **Table storage**, which is a **NoSQL** solution for persisting data.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储**：Azure 提供了 **Blob 存储**，一种存储二进制文件的方法，以及 **表存储**，这是一种用于持久化数据的 **NoSQL**
    解决方案。'
- en: '**Service bus**: This is a cloud-based solution for creating queues to facilitate
    communication between other cloud services. It also includes notification hubs
    as a simple way of providing push notifications to mobile apps.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务总线**: 这是一个基于云的解决方案，用于创建队列以促进其他云服务之间的通信。它还包括通知中心，作为向移动应用程序提供推送通知的简单方式。'
- en: '**Worker roles**: A simple way to run a custom process in the cloud can be
    a plain Windows executable or a .NET worker role project.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**工作角色**: 在云中运行自定义过程的一种简单方式可以是普通的Windows可执行文件或.NET工作角色项目。'
- en: '**Media services**: A mechanism for providing streaming audio or video to nearly
    any device. It handles both encoding and delivery and can scale to support a large
    volume of users.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**媒体服务**: 提供流式音频或视频到几乎任何设备的机制。它处理编码和交付，并可以扩展以支持大量用户。'
- en: '**HDInsight**: A version of Apache Hadoop running in Windows Azure for managing
    extremely large databases, also called big data.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HDInsight**: 在Windows Azure上运行的Apache Hadoop版本，用于管理极其庞大的数据库，也称为大数据。'
- en: '**Cloud services**: This is a conglomeration of other services. Cloud services
    allow you to bundle multiple services together and create staging and production
    environments. It is a great tool for deployment; you can deploy changes to staging
    and swap staging and production to preserve uptime for your users.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云服务**: 这是由其他服务组合而成的集合。云服务允许您将多个服务捆绑在一起，并创建预生产和生产环境。这是一个出色的部署工具；您可以将更改部署到预生产环境，并交换预生产和生产环境以保持用户的正常运行时间。'
- en: Apart from these services, there are many more, and new ones are added pretty
    regularly. We will use **Azure Mobile Services**, which leverages SQL Azure, to
    build our web service for XamChat. You can visit [http://windowsazure.com](http://windowsazure.com)
    for a full rundown of pricing and services offered.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些服务之外，还有许多其他服务，并且新服务被定期添加。我们将使用**Azure移动服务**，它利用SQL Azure，来构建XamChat的Web服务。您可以通过访问[http://windowsazure.com](http://windowsazure.com)来了解定价和提供的服务详情。
- en: In this book, we chose to demonstrate a solution using Windows Azure as a web
    service backend for XamChat, since it is very easy to use with Xamarin applications
    because of the fantastic library found in the Xamarin Component Store. However,
    there are many more choices out there besides Azure that you might want to look
    at. Using Xamarin's development platform does not limit the types of web services
    your applications can interact with.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们选择使用Windows Azure作为XamChat的Web服务后端来展示解决方案，因为它与Xamarin应用程序配合使用非常方便，得益于Xamarin组件商店中发现的出色库。然而，除了Azure之外，还有许多其他选择，您可能想要考虑。使用Xamarin的开发平台并不会限制您的应用程序可以交互的Web服务类型。
- en: 'Here are a few more common ones:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些更常见的例子：
- en: '**Parse**: This service provides a product similar to that of Azure Mobile
    Services, complete with data storage and push notifications. This is a popular
    service among many mobile developers, even those not using Xamarin. You can get
    more information at [http://parse.com](http://parse.com).'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Parse**: 该服务提供与Azure移动服务类似的产品，包括数据存储和推送通知。这是许多移动开发者中流行的服务，甚至包括那些不使用Xamarin的开发者。您可以在[http://parse.com](http://parse.com)获取更多信息。'
- en: '**Urban Airship**: This service provides push notifications for mobile apps
    across multiple platforms. You can get more information at [http://urbanairship.com](http://urbanairship.com).'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Urban Airship**: 该服务为多个平台上的移动应用程序提供推送通知。您可以在[http://urbanairship.com](http://urbanairship.com)获取更多信息。'
- en: '**Amazon Web Services**: This service is a complete cloud solution that is
    equivalent to Windows Azure. It has everything that you need to deploy applications
    in the cloud with total virtual machine support. The main difference is that Azure
    is very C# focused and built for .NET developers. There are also not as many PaaS
    options on Amazon. You can get more information at [http://aws.amazon.com](http://aws.amazon.com).'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊云服务**: 这是一项完整的云解决方案，相当于Windows Azure。它拥有您部署云应用程序所需的一切，包括全面的支持虚拟机。主要区别在于Azure非常专注于C#，并且是为.NET开发者构建的。在亚马逊上，PaaS选项也不如Azure多。您可以在[http://aws.amazon.com](http://aws.amazon.com)获取更多信息。'
- en: Additionally, you can develop your own web services with on-premises web servers
    or inexpensive hosting services using the languages and technologies of your choice.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您还可以使用您选择的编程语言和技术，在自己的本地Web服务器或低成本托管服务上开发自己的Web服务。
- en: Setting up your Azure account
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的Azure账户
- en: To start developing with Windows Azure, you can subscribe to a free one-month
    trial along with free credits worth $200\. You can get even more perks if you
    have an MSDN subscription. To go along with this, many of Azure's services have
    free tiers that give you lower performance versions. So if your trial expires,
    you can continue your development at little or no cost, depending on the services
    you are using.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Windows Azure进行开发，你可以订阅一个免费的一个月试用期，以及价值200美元的免费信用额度。如果你有MSDN订阅，你还可以获得更多优惠。与此相关，Azure的许多服务都有免费层，提供较低性能的版本。所以如果你的试用期到期，你可以根据你使用的服务以很少或没有成本继续开发。
- en: 'Let''s begin by navigating to [http://windowsazure.com/en-us/pricing/free-trial](http://windowsazure.com/en-us/pricing/free-trial)
    and performing the following steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从导航到[http://windowsazure.com/en-us/pricing/free-trial](http://windowsazure.com/en-us/pricing/free-trial)并执行以下步骤开始：
- en: Click on the **Try it now** link.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**现在尝试**链接。
- en: Sign in with a Windows Live ID.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Windows Live ID登录。
- en: For security purposes, verify your account via phone or text message.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了安全起见，通过电话或短信验证你的账户。
- en: Enter the payment information. This is only used if you exceed your spending
    limits. You won't accidentally spend beyond budget by developing your app—it is
    fairly difficult to accidentally spend money until real users are interacting
    with your services.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入支付信息。这仅在超出你的消费限额时使用。你不会在开发应用程序时意外超出预算——直到真实用户开始与你的服务互动，才比较难意外地花费金钱。
- en: Check **I agree** to the policies and click on **Sign Up**.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**我同意**政策并点击**注册**。
- en: Review the final setting and click on **Submit**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看最终设置并点击**提交**。
- en: 'If all the required information is entered correctly, you will now finally
    have access to the Azure subscription page. Your subscription page will look similar
    to the following screenshot:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果所有必要的信息都正确输入，你现在将最终能够访问Azure订阅页面。你的订阅页面看起来类似于以下截图：
- en: '![Setting up your Azure account](img/00059.jpeg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![设置你的Azure账户](img/00059.jpeg)'
- en: 'You can click on the **Portal** link in the top-right corner of the page to
    access your account. In future, you can manage your Azure services at: [http://manage.windowsazure.com](http://manage.windowsazure.com).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以点击页面右上角的**门户**链接来访问你的账户。将来，你可以在[http://manage.windowsazure.com](http://manage.windowsazure.com)管理你的Azure服务。
- en: 'Complete the Windows Azure tour to get a quick rundown of the management portal''s
    features. You can then access the main menu to create new Azure services, virtual
    machines, and so on. The main menu looks similar to the following screenshot:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 完成Windows Azure之旅，快速了解管理门户的功能。然后你可以访问主菜单来创建新的Azure服务、虚拟机等。主菜单看起来类似于以下截图：
- en: '![Setting up your Azure account](img/00060.jpeg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![设置你的Azure账户](img/00060.jpeg)'
- en: This concludes the sign-up process for Windows Azure. It is pretty simple compared
    to the Apple and Google Play developer programs. Feel free to play around, but
    don't be too worried about spending money. Azure has free versions of most services
    and also delivers a good amount of bandwidth for free. You can get more information
    on pricing at [http://windowsazure.com/en-us/pricing/overview](http://windowsazure.com/en-us/pricing/overview).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了Windows Azure的注册过程。与苹果和Google Play开发者程序相比，这相当简单。请随意尝试，但不必过于担心花钱。Azure的大多数服务都有免费版本，并且还免费提供一定量的带宽。你可以在[http://windowsazure.com/en-us/pricing/overview](http://windowsazure.com/en-us/pricing/overview)了解更多有关定价的信息。
- en: Note that there are a lot of misconceptions about Windows Azure being expensive.
    You can do all of your development for an application on the free tier without
    spending a dime. When putting applications into production, you can easily scale
    up or down on the number of VM instances to keep your costs under control. In
    general, you will not be spending much money if you do not have a lot of users.
    Likewise, you should be earning plenty of revenue if you happen to have lots of
    users.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，关于Windows Azure昂贵的误解有很多。你可以在免费层上完成所有应用程序的开发，而不需要花费一分钱。当将应用程序投入生产时，你可以轻松地根据需要增加或减少虚拟机实例的数量，以控制成本。一般来说，如果你用户不多，你不会花很多钱。同样，如果你有很多用户，你应该能赚很多收入。
- en: Exploring Azure Mobile Services
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Azure移动服务
- en: For the server side of XamChat, we'll use Azure Mobile Services to provide backend
    storage to the application. A mobile service is a neat solution to accelerate
    development for mobile applications that provide data storage and a **REST-based**
    API, which is a standards-based way of communicating with a web service over HTTP.
    Azure Mobile Services also includes a .NET client library for interacting with
    the service from C#.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对于XamChat的服务器端，我们将使用Azure移动服务为应用程序提供后端存储。移动服务是加速提供数据存储和基于**REST**的API的移动应用开发的便捷解决方案，这是一种基于标准的通过HTTP与网络服务通信的方式。Azure移动服务还包括一个.NET客户端库，用于从C#与该服务交互。
- en: 'A few nice features of Azure Mobile Services are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Azure移动服务的一些不错特性如下：
- en: Storage of data in the cloud with SQL Azure or other Azure data services such
    as Blob or Table storage
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SQL Azure或其他Azure数据服务（如Blob或Table存储）在云中存储数据
- en: Easy authentication with Windows Live ID, Facebook, Google, and Twitter
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Windows Live ID、Facebook、Google和Twitter进行简单认证
- en: Push notifications with iOS, Android, and Windows devices
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持iOS、Android和Windows设备的推送通知
- en: Code the server side with JavaScript and Node.js or C#
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript和Node.js或C#编写服务器端代码
- en: An easy-to-use .NET library for client-side development
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个易于使用的.NET客户端开发库
- en: Scale Azure Mobile Services to accommodate high volumes of data
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将Azure移动服务扩展以适应大量数据
- en: You can see why using Azure is a good choice for simple mobile applications.
    The benefits of accelerated development and the many features it provides are
    a great fit for our XamChat sample application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到为什么使用Azure是简单移动应用的一个好选择。加速开发和它提供的众多功能非常适合我们的XamChat示例应用。
- en: 'Let''s navigate to your account at [http://manage.windowsazure.com](http://manage.windowsazure.com)
    and perform the following steps to create a mobile service:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们导航到[http://manage.windowsazure.com](http://manage.windowsazure.com)并执行以下步骤以创建移动服务：
- en: Click on the plus button in the bottom-left corner of the window.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口左下角的加号按钮。
- en: Navigate to **Compute** | **Mobile Service** | **Create** through the menu.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过菜单导航到**计算** | **移动服务** | **创建**。
- en: Enter a domain URL of your choice such as `yourname-xamchat`.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入您选择的域名URL，例如`yourname-xamchat`。
- en: We use the free database option for now.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们目前使用的是免费数据库选项。
- en: Select a data center near your location in the **Region** dropdown.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**区域**下拉菜单中选择您所在位置附近的数据中心。
- en: For the **Backend** dropdown, leave the selection on **JavaScript** for this
    book. It will be simpler to set up the backend since we are focusing more on the
    client side. Feel free to use C# as an alternative, but keep in mind the examples
    in this book will be written in JavaScript.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于**后端**下拉菜单，为了这本书，请将选择保留在**JavaScript**上。由于我们更关注客户端，设置后端将更加简单。您也可以使用C#作为替代，但请注意，本书中的示例将使用JavaScript编写。
- en: Now, click on **Next**.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**下一步**。
- en: Use the default database name and choose **New SQL database server**.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用默认的数据库名称并选择**新建SQL数据库服务器**。
- en: Enter a login name and password for the SQL server, and keep this information
    in a safe place.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入SQL服务器的登录名和密码，并确保将此信息保存在安全的地方。
- en: Make sure the region is the same as that of your mobile service to ensure good
    performance between your mobile service and its database.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保区域与您的移动服务相同，以确保移动服务和其数据库之间良好的性能。
- en: Review your final settings and hit the **Finish** button.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的最终设置并点击**完成**按钮。
- en: The management portal will display the progress, and it will take several seconds
    to create your mobile service and SQL Server instances. Remember that Azure is
    creating and starting new virtual machines for you under the hood, so it is really
    doing a decent amount of work to accommodate your request.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 管理门户将显示进度，创建您的移动服务和SQL服务器实例将需要几秒钟。请记住，Azure正在为您在幕后创建和启动新的虚拟机，因此它确实在为您的要求做大量工作。
- en: 'When completed, your account will have one **Mobile Service** and one **SQL
    database** in addition to the **Default Directory** that is included in all the
    accounts, as shown in the following screenshot:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的账户将除了包含在所有账户中的**默认目录**外，还将有一个**移动服务**和一个**SQL数据库**，如下面的截图所示：
- en: '![Exploring Azure Mobile Services](img/00061.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![探索Azure移动服务](img/00061.jpeg)'
- en: If you take a look at the **Scale** tab for your mobile service, you'll notice
    that it is running under the **Free** tier by default. This is a great place for
    development. At the time of writing this book, it accommodates 500 devices. When
    deploying your applications to production, you might consider the **Basic** or
    **Standard** tiers, which also give you the option to add multiple instances.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看移动服务的 **缩放** 选项卡，你会注意到它默认运行在 **免费** 层级。这是一个很好的开发场所。在撰写本书时，它可以容纳 500 个设备。当你将应用程序部署到生产环境时，你可能需要考虑
    **基本** 或 **标准** 层级，这些层级也为你提供了添加多个实例的选项。
- en: Creating tables and scripts
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建表格和脚本
- en: The first step to implement something in Azure Mobile Services is to create
    a new table. By default, Azure Mobile Services uses a feature called **dynamic
    schemas** with its SQL database. When you insert a row from the client, new columns
    are dynamically added to the table. This prevents you from having to create the
    database schema manually and is a neat code-first approach to develop your backend
    database. You can always connect to the SQL database manually to fine tune things
    or make manual changes to the schema.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Azure 移动服务中实现某项功能的第一步是创建一个新的表格。默认情况下，Azure 移动服务使用其 SQL 数据库的 **动态模式** 功能。当你从客户端插入一行时，新列会动态地添加到表格中。这可以防止你需要手动创建数据库模式，并且是一种整洁的代码优先的方法来开发你的后端数据库。你始终可以手动连接到
    SQL 数据库来微调事物或手动更改模式。
- en: 'Return to the management portal, select your mobile services instance, and
    perform the following steps:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 返回管理门户，选择你的移动服务实例，并执行以下步骤：
- en: Click on the **Data** tab.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **数据** 选项卡。
- en: Click on the **Create** button found at the bottom center of the page.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部中央的 **创建** 按钮。
- en: Enter `User` as the table name.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表格名称输入为 `User`。
- en: Leave everything else at its default value and click on the **Save** button.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将其他所有设置保留为默认值，然后点击 **保存** 按钮。
- en: Repeat this process to create three more tables named `Friend`, `Message`, and
    `Conversation`.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复此过程创建另外三个名为 `Friend`、`Message` 和 `Conversation` 的表格。
- en: Now that we have our four tables, we need to create a script to facilitate the
    login process for the users of our app. Azure Mobile Services allows you to add
    custom logic to your tables by creating scripts that run in Node.js, a framework
    for developing web services with JavaScript. You can override what happens to
    each table during the `insert`, `read`, `update`, or `delete` operations. In addition
    to this, you can also create scripts that are completely customized if you need
    other functionalities.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了四个表格，我们需要创建一个脚本来简化我们应用用户的登录过程。Azure 移动服务允许你通过创建在 Node.js 中运行的脚本（Node.js
    是一个用于开发带有 JavaScript 的网络服务的框架）来向你的表格添加自定义逻辑。你可以覆盖在 `insert`、`read`、`update` 或
    `delete` 操作期间每个表格所发生的事情。此外，如果你需要其他功能，你还可以创建完全定制的脚本。
- en: 'Click on the `User` table and then click on the **Script** tab. Make sure you
    are viewing the `insert` operation. By default, your script will be very simple,
    as shown in the following snippet:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 `User` 表格，然后点击 **脚本** 选项卡。确保你正在查看 `insert` 操作。默认情况下，你的脚本将非常简单，如下面的代码片段所示：
- en: '[PRE0]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Scripts in Azure Mobile Services have three parameters, which are stated as
    follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 移动服务中的脚本有三个参数，具体如下：
- en: '`item`: This parameter is the object that the client sends to the service.
    In our case, it will be the `User` object we created in the previous chapters.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item`：此参数是客户端发送到服务的对象。在我们的案例中，它将是我们在前几章中创建的 `User` 对象。'
- en: '`user`: This parameter includes information about the authenticated user. We
    won''t be using this in our examples.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：此参数包含有关已认证用户的信息。在我们的示例中我们不会使用它。'
- en: '`request`: This parameter is an object used to run the `table` operation and
    send a response back to the client. Calling `execute` will complete the operation
    and return a successful response to the client.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`request`：此参数是一个对象，用于运行 `table` 操作并向客户端发送响应。调用 `execute` 将完成操作并向客户端返回成功响应。'
- en: 'We need to modify the preceding script to only insert a new user when that
    user does not already exist. If the user does exist, we need to make sure that
    the password matches the username. Let''s make a few changes to the script, as
    shown in the following lines of code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改前面的脚本，以确保只有当新用户不存在时才插入新用户。如果用户已存在，我们需要确保密码与用户名匹配。让我们对脚本进行一些修改，如下面的代码行所示：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Let''s summarize what we did in the preceding JavaScript:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下前面 JavaScript 中所做的工作：
- en: First, we grabbed the `user` table. Note that you can reference the name of
    the table using lowercase.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们获取了 `user` 表。请注意，您可以使用小写来引用表名。
- en: Next, we ran a query to pull out any existing users with the `where` function.
    We used `item.Username` since this matches our `User` object in C#. Notice how
    this method is similar to `Linq` in C#.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们运行了一个查询来使用 `where` 函数提取任何现有的用户。我们使用了 `item.Username`，因为这与我们的 C# 中的 `User`
    对象相匹配。注意这个方法与 C# 中的 `Linq` 类似。
- en: If there are no results, we let the request execute normally.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果没有结果，我们让请求正常执行。
- en: Otherwise, we compare the passwords and return `statusCodes.OK` if they match.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 否则，我们比较密码，如果匹配则返回 `statusCodes.OK`。
- en: If the passwords do not match, we return `statusCodes.UNAUTHORIZED`. This will
    cause the client to receive an error.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果密码不匹配，我们返回 `statusCodes.UNAUTHORIZED`。这将导致客户端收到错误。
- en: For a complete list of available functions and methods, make sure you check
    out the server script reference on MSDN at [http://tinyurl.com/AzureMobileServices](http://tinyurl.com/AzureMobileServices).
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取可用函数和方法的完整列表，请确保查看 MSDN 上的服务器脚本参考 [http://tinyurl.com/AzureMobileServices](http://tinyurl.com/AzureMobileServices)。
- en: From here, just make sure that you click on the **Save** button to apply your
    changes. Azure Mobile Services also has the option of providing source control
    for your scripts via **Git**. Feel free to take advantage of this feature if you
    want to make changes to the script in your favorite editor locally instead of
    the website editor.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，只需确保点击 **保存** 按钮以应用您的更改。Azure 移动服务还提供了通过 **Git** 提供脚本源代码控制选项。如果您想在本地的首选编辑器中而不是网站编辑器中更改脚本，请充分利用此功能。
- en: After this, we need to create one more script. The way XamChat was implemented
    earlier in the book allows, users to add friends by entering their friends' usernames.
    So, in order to insert into the `Friend` table, we will need to modify the `insert`
    script to look up users by their usernames.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建一个额外的脚本。本书早期实现的 XamChat 允许用户通过输入朋友的用户名来添加朋友。因此，为了将数据插入到 `Friend` 表中，我们需要修改
    `insert` 脚本来通过用户名查找用户。
- en: 'Let''s modify the `insert` script for the `Friends` table as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式修改 `Friends` 表的 `insert` 脚本：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This is pretty similar to what we did before; we ran a simple query to load
    the `user` table based on the `Username` value. We merely have to set the `UserId`
    value on the new `friend` table prior to the execution of the request.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这与之前我们所做的是非常相似的；我们运行了一个简单的查询来根据 `Username` 值加载 `user` 表。我们只需在执行请求之前在新的 `friend`
    表上设置 `UserId` 值。
- en: Adding a backend to XamChat
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 XamChat 添加后端
- en: With our server-side changes complete, the next step is to implement our new
    service in our XamChat iOS and Android applications. Luckily, as we used an interface
    named `IWebService`, all we need to do is implement this interface to get it working
    in our application.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器端更改完成后，下一步是在我们的 XamChat iOS 和 Android 应用程序中实现我们的新服务。幸运的是，因为我们使用了一个名为 `IWebService`
    的接口，所以我们只需实现这个接口就可以在我们的应用程序中使其工作。
- en: 'Now we can start setting up our service in our iOS application by performing
    the following steps:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以通过执行以下步骤在我们的 iOS 应用程序中开始设置我们的服务：
- en: Open the `XamChat.Core` project that we created in [Chapter 4](part0036_split_000.html#page
    "Chapter 4. XamChat – a Cross-platform App"), *XamChat – a Cross-platform App*.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开我们在 [第 4 章](part0036_split_000.html#page "第 4 章。XamChat – 一个跨平台应用") 中创建的 `XamChat.Core`
    项目，*XamChat – 一个跨平台应用*。
- en: Create an `Azure` folder within the project.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目中创建一个 `Azure` 文件夹。
- en: Create a new class named `AzureWebService.cs`.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `AzureWebService.cs` 的新类。
- en: Create the `public` class and implement `IWebService`.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `public` 类并实现 `IWebService`。
- en: Right-click on `IWebService` in your code and navigate to **Refactor** | **Implement
    Interface**.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的代码中右键点击 `IWebService` 并导航到 **重构** | **实现接口**。
- en: A line will appear; press *Enter* to insert the method stubs.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将出现一行；按 *Enter* 插入方法占位符。
- en: 'When this setup is complete, your class will look something similar to the
    following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 当此设置完成时，您的类将类似于以下内容：
- en: '[PRE3]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding the Azure Mobile Services NuGet package
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 Azure 移动服务 NuGet 包
- en: 'To make development with Azure Mobile Services much easier, we need to add
    a reference to the .NET client library. To do this, we will use NuGet to add the
    library:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使使用 Azure 移动服务开发变得更加容易，我们需要添加对 .NET 客户端库的引用。为此，我们将使用 NuGet 来添加库：
- en: Right-click on the `XamChat.Core` project and navigate to **Add** | **Add Packages**.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击 `XamChat.Core` 项目并导航到 **添加** | **添加包**。
- en: Search for `Azure Mobile Services` using the search box.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用搜索框搜索`Azure Mobile Services`。
- en: Select the `Azure Mobile Services` package, which at the time of writing this
    book was version 1.2.5.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`Azure Mobile Services`包，在撰写本书时，该包的版本为1.2.5。
- en: Click on **Add Package**.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加包**。
- en: Repeat this process for the `XamChat.iOS` and `XamChat.Android` projects. There
    is some platform-specific setup for each platform.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于`XamChat.iOS`和`XamChat.Android`项目，重复此过程。每个平台都有一些特定平台的设置。
- en: Tip
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also get the Azure Mobile Services library from the Xamarin Component
    Store if you like. It is very similar to using NuGet.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你喜欢，你也可以从Xamarin组件商店获取Azure移动服务库。它与使用NuGet非常相似。
- en: This will download the library and automatically add references to it in your
    projects. The NuGet package manager might complain of warnings, which can be ignored.
    NuGet was originally developed for Visual Studio on Windows, so any packages that
    contain PowerShell scripts or prompt for a license agreement might give you a
    warning.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载库并自动将其添加到你的项目中。NuGet包管理器可能会发出警告，这些警告可以忽略。NuGet最初是为Windows上的Visual Studio开发的，因此包含PowerShell脚本或要求许可协议的任何包可能会发出警告。
- en: 'Now, let''s modify our `AzureWebService.cs` file. Add `using Microsoft.WindowsAzure.MobileServices`
    to the top of the file, and then make the following changes:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们修改我们的`AzureWebService.cs`文件。将`using Microsoft.WindowsAzure.MobileServices`添加到文件顶部，然后进行以下更改：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Make sure you fill in your mobile service name and application key. You can
    find your key on the **Dashboard** tab of the Azure Management Portal under the
    **Manage Keys** section.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你填写了你的移动服务名称和应用密钥。你可以在Azure管理门户的**仪表板**选项卡下的**管理密钥**部分找到你的密钥。
- en: 'Now let''s implement our first method, `Login`, in the following manner:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们以下述方式实现我们的第一个方法`Login`：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is fairly straightforward, because of how nice this library is to use.
    The `GetTable<T>` method knows how to use a table named `User` based on the C#
    class name. Upon the first call, the dynamic schema feature will create two new
    columns named `Username` and `Password` based on the C# properties of our class.
    Note that the `InsertAsync` method will also fill in the user's `Id` property
    for later use in our application since we will need the `Id` for future calls
    to the mobile service.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单，因为这款库的使用非常方便。`GetTable<T>`方法知道如何根据C#类名使用名为`User`的表。在第一次调用时，动态模式功能将根据我们类的C#属性创建两个新列，分别命名为`Username`和`Password`。请注意，`InsertAsync`方法还将填充用户的`Id`属性，以便在应用程序中稍后使用，因为我们将在对移动服务的未来调用中需要`Id`。
- en: 'Next, open the `AppDelegate.cs` file to set up our new service and add the
    following code:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开`AppDelegate.cs`文件来设置我们的新服务并添加以下代码：
- en: '[PRE6]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Additionally, you will need to add some platform-specific setup for Azure Mobile
    Services. Add `using Microsoft.WindowsAzure.MobileServices` to the top of the
    file and add the following line of code to the bottom of `FinishedLaunching` in
    your `AppDelegate.cs` file:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还需要为Azure移动服务添加一些特定平台的设置。将`using Microsoft.WindowsAzure.MobileServices`添加到文件顶部，并在你的`AppDelegate.cs`文件中的`FinishedLaunching`底部添加以下代码行：
- en: '[PRE7]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, if you compile and run your application after you log in, your app should
    successfully call Azure Mobile Services and insert a new user. Navigate to the
    **Data** tab of your Azure Mobile Service in the Azure Management Portal, and
    select the `User` table. You will see the user you just inserted, as shown in
    the following screenshot:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你在登录后编译并运行你的应用程序，你的应用程序应该能够成功调用Azure移动服务并插入一个新用户。导航到Azure管理门户中的Azure移动服务的**数据**选项卡，并选择`User`表。你将看到你刚刚插入的用户，如下面的截图所示：
- en: '![Adding the Azure Mobile Services NuGet package](img/00062.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![添加Azure移动服务NuGet包](img/00062.jpeg)'
- en: Note
  id: totrans-134
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: It is generally a bad idea to store passwords in plain text in your database.
    A simple approach to make things a bit more secure would be to store them as an
    MD5 hash. You should be able to make this change in the custom JavaScript that
    we are using to insert the password on the `User` table. A complete guide to securing
    Windows Azure applications can be found at [http://msdn.microsoft.com/en-us/library/windowsazure/hh696898.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/hh696898.aspx).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 通常来说，在数据库中以明文形式存储密码是个坏主意。为了使事情更加安全，可以将它们存储为MD5散列。你应该能够在用于在`User`表上插入密码的自定义JavaScript中实现这一更改。有关保护Windows
    Azure应用程序的完整指南，请参阅[http://msdn.microsoft.com/en-us/library/windowsazure/hh696898.aspx](http://msdn.microsoft.com/en-us/library/windowsazure/hh696898.aspx)。
- en: 'Next, let''s make a new class named `Friend.cs`. Add it to the `Azure` folder
    that is next to the other class specific to Azure as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个新的类名为 `Friend.cs`。将其添加到紧挨着其他Azure特定类的 `Azure` 文件夹中，如下所示：
- en: '[PRE8]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We'll use this class to store the friends information about each user. Note
    that we also have an `Id` property, and all the classes saved in Azure Mobile
    Services should have a `string` property named `Id`. This will be the table's
    primary key in the SQL database.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个类来存储每个用户的关于朋友的信息。请注意，我们还有一个 `Id` 属性，并且所有保存在Azure移动服务中的类都应该有一个名为 `Id`
    的 `string` 属性。这将是SQL数据库中的表的主键。
- en: 'Next, let''s modify the `Message` and `Conversation` classes to prepare for
    push notifications down the road. Add a new property to the `Message` class as
    follows:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们修改 `Message` 和 `Conversation` 类，为未来的推送通知做准备。向 `Message` 类添加一个新属性，如下所示：
- en: '[PRE9]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Then, add the following new property to `Conversation.cs`:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，向 `Conversation.cs` 添加以下新属性：
- en: '[PRE10]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here, we''ll need to insert or seed some test data for our application to function
    correctly. The easiest way to insert data would be from C#, so let''s implement
    the following simple method on our service to do so:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们需要为应用程序插入或生成一些测试数据，以便它能够正确运行。最简单的方法是从C#中插入数据，所以让我们在我们的服务中实现以下简单方法来完成此操作：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, let''s add the following method to `AppDelegate.cs` and call it from
    within `FinishedLaunching`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们向 `AppDelegate.cs` 添加以下方法，并在 `FinishedLaunching` 中调用它：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you run your application at this point, it will insert two users and make
    them friends with one another. Before doing so, let''s add some more code to the
    `LoadData` method in `AzureWebService.cs` to insert conversations and messages
    as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在此时运行你的应用程序，它将插入两个用户并使他们彼此成为朋友。在这样做之前，让我们向 `AzureWebService.cs` 中的 `LoadData`
    方法添加一些代码，以便插入对话和消息，如下所示：
- en: '[PRE13]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, if you run the application, it will seed the database with some good data
    to work with. I'd recommend that you remove the call to `LoadData` once it is
    successful the first time, and perhaps remove the method entirely when the development
    is complete.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你运行应用程序，它将使用一些良好的数据来初始化数据库。我建议你在第一次成功调用 `LoadData` 后删除对该方法的调用，也许在开发完成后完全删除该方法。
- en: 'Before going further, let''s implement the rest of our `IWebService` interface.
    It can be done as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，让我们实现 `IWebService` 接口的其余部分。它可以如下完成：
- en: '[PRE14]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Each method here is pretty simple. `Register` is very similar to `Login`, but
    the main complication for the other methods is the need to convert a `Friend`
    object to `User`. We used the `ToListAsync` method from the Azure library to get
    `List<T>`; however, since our interface uses arrays, we quickly converted the
    list to an array. We also utilized a couple of basic `Linq` operators such as
    `Where` and `Select` to accomplish our implementation of `IWebService`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里每个方法都很简单。`Register` 与 `Login` 非常相似，但其他方法的主要复杂之处在于需要将 `Friend` 对象转换为 `User`。我们使用了Azure库中的
    `ToListAsync` 方法来获取 `List<T>`；然而，由于我们的接口使用数组，我们很快将列表转换为数组。我们还利用了几个基本的 `Linq` 操作符，如
    `Where` 和 `Select`，来完成我们对 `IWebService` 的实现。
- en: 'Now let''s complete the methods related to conversations and messages, which
    are as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们完成与对话和消息相关的其他方法，如下所示：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This completes our implementation of `IWebService`. If you run the application
    at this point, it will function exactly as before with the exception that the
    app is actually talking to a real web server. New messages will get persisted
    in the SQL database, and our custom scripts will handle the custom logic that
    we need. Feel free to play around with our implementation; you might discover
    some features of Azure Mobile Services that will work great with your own applications.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们对 `IWebService` 的实现。如果你在这个时候运行应用程序，它将像以前一样工作，唯一的区别是应用程序实际上是在与一个真实的Web服务器进行通信。新消息将被持久化到SQL数据库中，我们的自定义脚本将处理我们需要的自定义逻辑。请随意尝试我们的实现；你可能会发现一些与Azure移动服务配合得很好的功能，这些功能可以应用于你自己的应用程序。
- en: At this point, another good exercise would be to set up Azure Mobile Services
    in our Android application. To do so, you will merely need to add the Azure Mobile
    Services NuGet package. After that, you should be able to swap out the `ServiceContainer.Register`
    call in your `Application` class and call `CurrentPlatform.Init()`. Everything
    will function exactly like on iOS. Isn't cross-platform development great?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，另一个很好的练习是在我们的Android应用程序中设置Azure移动服务。为此，您只需添加Azure移动服务NuGet包。之后，您应该能够在`Application`类中的`ServiceContainer.Register`调用中替换，并调用`CurrentPlatform.Init()`。一切都将与iOS上完全一样。跨平台开发不是很好吗？
- en: Using the Apple Push Notification service
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Apple推送通知服务
- en: Implementing push notifications with Azure Mobile Services on iOS is very simple
    to set up from an Azure backend perspective. The most complicated part is working
    through Apple's process of creating certificates and provisioning profiles in
    order to configure your iOS application. Before we continue, make sure you have
    a valid iOS Developer Program account, as you will not be able to send push notifications
    without one. If you are unfamiliar with the concept of push notifications, take
    a look at Apple's documentation at [http://tinyurl.com/XamarinAPNS](http://tinyurl.com/XamarinAPNS).
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在iOS上使用Azure移动服务实现推送通知非常简单，从Azure后端的角度来看。最复杂的部分是处理Apple的创建证书和配置文件的过程，以便配置您的iOS应用程序。在我们继续之前，请确保您有一个有效的iOS开发者计划帐户，因为没有它，您将无法发送推送通知。如果您不熟悉推送通知的概念，请查看Apple的文档[http://tinyurl.com/XamarinAPNS](http://tinyurl.com/XamarinAPNS)。
- en: 'To send push notifications, you need to set up the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要发送推送通知，您需要设置以下内容：
- en: An explicit App ID registered with Apple
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已在Apple注册的显式App ID
- en: A provisioning profile targeting that App ID
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 针对该App ID的配置文件
- en: A certificate for your server to trigger the push notification
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为您的服务器触发推送通知的证书
- en: Apple provides both a development and production certificate that you can use
    to send push notifications from your server.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Apple提供了开发和生产证书，您可以使用它们从您的服务器发送推送通知。
- en: Setting up proper provisioning
  id: totrans-164
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置正确的配置文件
- en: 'Let''s begin by navigating to [http://developer.apple.com/account](http://developer.apple.com/account)
    and performing the following steps:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从导航到[http://developer.apple.com/account](http://developer.apple.com/account)并执行以下步骤开始：
- en: Click on the **Identifiers** link.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**标识符**链接。
- en: Click on the plus button in the top-right corner of the window.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口右上角的加号按钮。
- en: Enter a description, such as `XamChat`, for the bundle ID.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为捆绑ID输入一个描述，例如`XamChat`。
- en: Enter your bundle ID under the **Explicit App ID** section. This should match
    the bundle ID you set up in your `Info.plist` file, for example, `com.yourcompanyname.xamchat`.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**显式App ID**部分下输入您的捆绑ID。这应该与您在`Info.plist`文件中设置的捆绑ID相匹配，例如，`com.yourcompanyname.xamchat`。
- en: Under **App Services**, make sure you check **Push Notifications**.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**App Services**下，确保您已勾选**推送通知**。
- en: Now, click on **Continue**.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**继续**。
- en: Review your final settings and hit **Submit**.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查您的最终设置并点击**提交**。
- en: 'This will create an explicit App ID similar to what you can see in the following
    screenshot, which we can use for sending push notifications:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个类似于以下截图中的显式App ID，我们可以用它来发送推送通知：
- en: '![Setting up proper provisioning](img/00063.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![设置正确的配置文件](img/00063.jpeg)'
- en: Setting up your provisioning profile
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置您的配置文件
- en: 'For push notifications, we have to use a profile with an explicit App ID that
    is not a development certificate. Now let''s set up a provisioning profile:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于推送通知，我们必须使用一个具有显式App ID的配置文件，该App ID不是开发证书。现在让我们设置一个配置文件：
- en: Click on the **Development** link under **Provisioning Profiles** in the right-hand
    side pane.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在右侧面板下点击**配置文件**下的**开发**链接。
- en: Click on the plus button in the top-right corner.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击窗口右上角的加号按钮。
- en: Check **iOS App Development** and click on **Continue**.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**iOS应用程序开发**并点击**继续**。
- en: Select the App ID we just created and click on **Continue**.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们刚刚创建的App ID，然后点击**继续**。
- en: Select the developer and click on **Continue**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择开发者并点击**继续**。
- en: Select the devices you will be using and click on **Continue**.
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您将使用的设备，然后点击**继续**。
- en: Enter a name for the profile and click on **Generate**.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为配置文件输入一个名称并点击**生成**。
- en: Download the profile and install it, or open **XCode** and use the sync button
    by navigating to **Preferences** | **Accounts**.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载配置文件并安装，或者打开**XCode**，通过导航到**偏好设置** | **帐户**来使用同步按钮。
- en: 'When finished, you should arrive at a success web page that looks similar to
    the following screenshot:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，你应该会到达一个类似以下截图的成功网页：
- en: '![Setting up your provisioning profile](img/00064.jpeg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![设置你的配置文件](img/00064.jpeg)'
- en: Setting up a certificate signing request
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置证书签名请求
- en: 'Next, we perform the following steps to set up the certificate our server needs:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们执行以下步骤来设置服务器需要的证书：
- en: Click on the **Development** link under **Certificates** in the right-hand side
    pane.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧面板中的**证书**下的**开发**链接。
- en: Click on the plus button in the top-right corner.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右上角的加号按钮。
- en: Enable **Apple Push Notifications service SSL (Sandbox)** and click on **Continue**.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用**Apple Push Notifications服务SSL (沙盒)**并点击**继续**。
- en: Select your App ID as before and click on **Continue**.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，选择你的App ID，然后点击**继续**。
- en: Create a new certificate signing request as per Apple's instructions. You can
    also refer to [Chapter 7](part0056_split_000.html#page "Chapter 7. Deploying and
    Testing on Devices"), *Deploying and Testing on Devices*, or locate the `*.certSigningRequest`
    file.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据苹果的说明创建一个新的证书签名请求。你也可以参考[第7章](part0056_split_000.html#page "第7章。在设备上部署和测试"),
    *在设备上部署和测试*，或者定位到`*.certSigningRequest`文件。
- en: Next, click on **Continue**.
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**继续**。
- en: Upload the signing request file and click on **Generate**.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 上传签名请求文件并点击**生成**。
- en: Next, click on **Download**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，点击**下载**。
- en: Open the file to import the certificate into **Keychain**.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开文件以将证书导入到**钥匙串**。
- en: Locate the certificate in **Keychain**. It will be titled **Apple Development
    iOS Push Services** and will contain your bundle ID.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**钥匙串**中找到证书。它将被命名为**Apple Development iOS Push Services**，并包含你的bundle ID。
- en: Right-click on the certificate and export it somewhere on your filesystem. Enter
    a password that you will remember.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击证书，将其导出到你的文件系统中的某个位置。输入一个你将记住的密码。
- en: 'This will create the certificate that we need to send push notifications to
    our users from Azure Mobile Services. All that remains is to return to the Azure
    Management Portal and upload the certificate from the **Push** tab under **Apple
    Push Notification Settings**, as shown in the following screenshot:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建我们需要的证书，以便从Azure Mobile Services向我们的用户发送推送通知。剩下的只是返回到Azure管理门户，并在**Apple
    Push Notification Settings**下的**推送**选项卡中上传证书，如图所示：
- en: '![Setting up a certificate signing request](img/00065.jpeg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![设置证书签名请求](img/00065.jpeg)'
- en: This upload concludes the configuration we need from Apple's side.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这次上传完成了我们从苹果方面需要的配置。
- en: Making client-side changes for push notifications
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为推送通知进行客户端更改
- en: Next, let's return to our `XamChat.iOS` project in Xamarin Studio to make the
    necessary changes on the client side for push notifications. We will need to add
    a few new classes to our shared code to start with.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们回到Xamarin Studio中的我们的`XamChat.iOS`项目，对客户端进行必要的推送通知更改。我们首先需要向共享代码中添加几个新类。
- en: 'Open `IWebService.cs` and add the following new method:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`IWebService.cs`并添加以下新方法：
- en: '[PRE16]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Next, let''s implement this method in `FakeWebService.cs` (just so it compiles)
    as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们在`FakeWebService.cs`中实现这个方法（只是为了编译），如下所示：
- en: '[PRE17]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, let''s add a new class named `Device.cs` in the `Core`/`Azure` folder:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`Core`/`Azure`文件夹中添加一个名为`Device.cs`的新类：
- en: '[PRE18]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we can implement the real method in `AzureWebService.cs` as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以在`AzureWebService.cs`中实现实际的方法，如下所示：
- en: '[PRE19]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As for ViewModels, we need to add one more new method to `LoginViewModel.cs`:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于ViewModels，我们需要在`LoginViewModel.cs`中添加一个额外的新的方法：
- en: '[PRE20]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Then, we need to add a small modification to `MessageViewModel.cs`. Add the
    following line when creating a new `Message` object in the `SendMessage` method:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要对`MessageViewModel.cs`进行一个小修改。在`SendMessage`方法中创建新的`Message`对象时，添加以下行：
- en: '[PRE21]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This modification concludes what we need to add to our shared code. We will
    reuse this new functionality when we add push notifications to Android, so go
    ahead and take the time to link in the new `Device.cs` file in your `XamChat.Droid`
    project to build your entire solution.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个修改完成了我们需要添加到共享代码中的内容。当我们添加推送通知到Android时，我们将重用这个新功能，所以请花时间在你的`XamChat.Droid`项目中链接新的`Device.cs`文件以构建整个解决方案。
- en: 'Now, let''s add the iOS platform-specific code we need. Add the following methods
    to your `AppDelegate.cs` file:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加我们需要的iOS平台特定代码。将以下方法添加到你的`AppDelegate.cs`文件中：
- en: '[PRE22]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'One last thing to do is to actually make a call to register for remote notifications.
    Open `LoginController.cs` and add the following line of code directly after the
    successful call to log in:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件要做的事情是实际调用以注册远程通知。打开`LoginController.cs`文件，并在登录成功调用后直接添加以下代码行：
- en: '[PRE24]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You can also call the method on startup; however, in our situation, we need
    a valid user ID to store in the `Device` table in Azure.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在启动时调用该方法；然而，在我们的情况下，我们需要一个有效的用户ID来存储在Azure的`Device`表中。
- en: Now let's switch to the Azure Management Portal and make the remaining changes
    in JavaScript on the server side. Under the **Data** tab, create a new table named
    `Device` with the default settings.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们切换到Azure管理门户，并在服务器端使用JavaScript进行剩余的更改。在**数据**选项卡下，创建一个名为`Device`的新表，使用默认设置。
- en: 'Next, we need to modify the `insert` script so that the duplicate device tokens
    are not inserted:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要修改`insert`脚本，以确保不会插入重复的设备令牌：
- en: '[PRE25]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Last but not least, we need to modify the `insert` script for the `Message`
    table to send push notifications to the user. The message was sent as follows:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 最后但同样重要的是，我们需要修改`Message`表的`insert`脚本，以便向用户发送推送通知。消息发送如下：
- en: '[PRE26]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'After executing the request, we retrieve a list of devices from the database
    and send out a push notification for each one. To test push notifications, deploy
    the application and log in with the secondary user (if using our examples: `chucknorris`).
    After logging in, you can just background the app with the home button. Next,
    log in with the primary user on your iOS simulator and send a message. You should
    receive a push notification, as shown in the following screenshot:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 执行请求后，我们从数据库中检索设备列表，并为每个设备发送推送通知。为了测试推送通知，部署应用程序，并使用辅助用户（如果使用我们的示例：`chucknorris`）登录。登录后，您只需使用主页按钮将应用程序置于后台。接下来，在iOS模拟器上使用主要用户登录并发送消息。您应该会收到推送通知，如下面的截图所示：
- en: '![Making client-side changes for push notifications](img/00066.jpeg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![为推送通知进行客户端更改](img/00066.jpeg)'
- en: Implementing Google Cloud Messaging
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现Google Cloud Messaging
- en: Since we have already set up everything we need in the shared code and on Azure,
    setting up push notifications for Android will be a lot less work at this point
    of time. To continue, you will need a Google account with a verified e-mail address;
    however, I would recommend that you use an account registered with **Google Play**
    if you have one. You can refer to the full documentation on **Google Cloud Messaging**
    (**GCM**) at [http://developer.android.com/google/gcm](http://developer.android.com/google/gcm).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在共享代码和Azure上设置了所需的所有内容，因此在此阶段设置Android的推送通知将变得工作量大大减少。要继续，您需要一个带有验证电子邮件地址的Google账户；然而，如果您有的话，我建议您使用注册了**Google
    Play**的账户。您可以参考关于**Google Cloud Messaging**（**GCM**）的完整文档，网址为[http://developer.android.com/google/gcm](http://developer.android.com/google/gcm)。
- en: Note
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that Google Cloud Messaging requires that Google Play be installed on the
    Android device and that the Android OS be at least version 2.2.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Google Cloud Messaging要求在Android设备上安装Google Play，并且Android操作系统至少为2.2版本。
- en: 'Let''s begin by navigating to [http://cloud.google.com/console](http://cloud.google.com/console)
    and performing the following steps:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从导航到[http://cloud.google.com/console](http://cloud.google.com/console)并执行以下步骤开始：
- en: Click on the **Create Project** button.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建项目**按钮。
- en: Enter an appropriate project name such as `XamChat`.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个适当的项目名称，例如`XamChat`。
- en: Enter a project ID; you can use the generated one. I prefer to use my application's
    bundle ID and replace the periods with hyphens.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入一个项目ID；您可以使用生成的ID。我更喜欢使用我的应用程序的bundle ID，并用连字符替换点。
- en: Agree to the **Terms of Service**.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同意**服务条款**。
- en: Click on the **Create** button.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。
- en: When creating your first project, you might have to verify the mobile number
    associated with your account.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当创建您的第一个项目时，您可能需要验证与您的账户关联的移动电话号码。
- en: Note the **Project Number** field on the **Overview** page. We will need this
    number later.
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意**项目编号**字段在**概览**页面。我们稍后会需要这个编号。
- en: 'The following screenshot shows the **Overview** tab:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了**概览**选项卡：
- en: '![Implementing Google Cloud Messaging](img/00067.jpeg)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![实现Google Cloud Messaging](img/00067.jpeg)'
- en: 'Now we can continue with our setup as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以继续以下设置：
- en: Click on **APIs & auth** in the left-hand side pane.
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧面板中的**APIs & auth**。
- en: Scroll down and click on **Google Cloud Messaging for Android**.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动并点击**Google Cloud Messaging for Android**。
- en: Click on the **OFF** button at the top to enable the service. You might have
    to accept another agreement.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的**关闭**按钮以启用服务。您可能需要接受另一项协议。
- en: Click on **Registered Apps** in the left-hand side pane.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧面板中的**已注册应用**。
- en: Click on the **Register App** button at the top.
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击顶部的**注册应用**按钮。
- en: Enter `XamChat` in the **App Name** field and click on **Register**. You can
    leave the **Platform** selection on **Web Application** at its default value.
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**应用名称**字段中输入 `XamChat` 并点击**注册**。您可以将**平台**选择保留在默认的**Web 应用程序**。
- en: Expand the **Server Key** section and copy the **API Key** value to your clipboard.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展开**服务器密钥**部分，并将**API 密钥**值复制到您的剪贴板。
- en: Switch to the Azure Management Portal and navigate to the **Push** tab in your
    Azure Mobile Service instance.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Azure 管理门户，并导航到您的 Azure 移动服务实例中的**推送**选项卡。
- en: Paste the API key in the **google cloud messaging settings** section and click
    on **Save**.
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**google cloud messaging 设置**部分粘贴 API 密钥并点击**保存**。
- en: '![Implementing Google Cloud Messaging](img/00068.jpeg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![实现 Google Cloud Messaging](img/00068.jpeg)'
- en: 'Next, let''s modify our `insert` script for the `Message` table to support
    Android as follows:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们修改我们的 `insert` 脚本以支持 Android，如下所示：
- en: '[PRE27]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Basically, we send any `deviceToken` values that are longer than 72 characters
    to GCM. This is one simple way to do it, but you can also add a value to the `Device`
    table that indicates whether the device is Android or iOS. GCM also supports sending
    custom values to be displayed in the notification area, so we send an actual title
    along with the message.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们将超过 72 个字符的任何 `deviceToken` 值发送到 GCM。这是做这件事的一种简单方法，但您也可以向 `Device` 表中添加一个值，以指示设备是
    Android 还是 iOS。GCM 还支持在通知区域发送自定义值，因此我们发送实际标题和消息。
- en: This completes our setup on Azure's side. Setting up the next part in our Android
    application can be a bit difficult, so we will use a library called **PushSharp**
    to simplify our implementation.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们在 Azure 侧的设置。在 Android 应用程序中设置下一部分可能有点困难，因此我们将使用名为 **PushSharp** 的库来简化我们的实现。
- en: 'First, navigate to [http://github.com/Redth/PushSharp](http://github.com/Redth/PushSharp)
    and perform the following steps:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，导航到 [http://github.com/Redth/PushSharp](http://github.com/Redth/PushSharp)
    并执行以下步骤：
- en: Download the project and place it in the same folder as your XamChat solution.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载项目并将其放置在与您的 XamChat 解决方案相同的文件夹中。
- en: Add the `PushSharp.Client.MonoForAndroid.Gcm` project to your solution. You
    can locate the project in the `PushSharp.Client` subdirectory.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `PushSharp.Client.MonoForAndroid.Gcm` 项目添加到您的解决方案中。您可以在 `PushSharp.Client`
    子目录中找到该项目。
- en: Reference the new project from your `XamChat.Droid` project.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的 `XamChat.Droid` 项目引用新的项目。
- en: If it's not already installed, you will need to install the **Android SDK Platform**
    for Android 2.2 (API 8). You can install this from the Android SDK manager that
    can be launched from the **Tools** menu in Xamarin Studio.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未安装，您需要为 Android 2.2（API 8）安装**Android SDK 平台**。您可以从 Xamarin Studio 的**工具**菜单中启动的
    Android SDK 管理器中安装此软件。
- en: 'Next, create a new class called `PushConstants.cs` as follows:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `PushConstants.cs` 的新类，如下所示：
- en: '[PRE28]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Fill out the `BundleId` value with your application's bundle ID and the `ProjectNumber`
    value with the project number found on the **Overview** page of your Google Cloud
    Console.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `BundleId` 值中填写您应用程序的包 ID，并在 `ProjectNumber` 值中填写在 Google Cloud Console 的**概览**页面找到的项目编号。
- en: 'Next, we need to set up some permissions to support push notifications in our
    application. Above the namespace declaration in this file, add the following:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要设置一些权限以支持我们应用程序中的推送通知。在此文件中的命名空间声明上方添加以下内容：
- en: '[PRE29]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: You can also make these changes in our `AndroidManifest.xml` file; however,
    using C# attributes can be better since it gives you the ability to use code completion
    while typing.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以在我们的 `AndroidManifest.xml` 文件中做出这些更改；然而，使用 C# 属性可能更好，因为它在键入时提供了代码自动完成的特性。
- en: 'Next, create another new class named `PushReceiver.cs` as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建另一个名为 `PushReceiver.cs` 的新类，如下所示：
- en: '[PRE30]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `PushReceiver.cs` class sets up `BroadcastReceiver`, which is Android's
    native way for different applications to talk with one another. For more information
    on this topic, check out the Android documentation at [http://developer.android.com/reference/android/content/BroadcastReceiver.html](http://developer.android.com/reference/android/content/BroadcastReceiver.html).
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`PushReceiver.cs` 类设置了 `BroadcastReceiver`，这是 Android 中不同应用程序之间通信的本地方式。有关此主题的更多信息，请参阅
    Android 文档中的 [http://developer.android.com/reference/android/content/BroadcastReceiver.html](http://developer.android.com/reference/android/content/BroadcastReceiver.html)。'
- en: 'Next, create one last class named `PushService.cs` as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个名为 `PushService.cs` 的最后一个类，如下所示：
- en: '[PRE31]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, right-click on `PushHandlerServiceBase` and navigate to **Refactor** |
    **Implement abstract members**. Next, let''s implement each member one by one:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，右键单击 `PushHandlerServiceBase` 并导航到 **重构** | **实现抽象成员**。接下来，让我们逐个实现每个成员：
- en: '[PRE32]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The preceding code is very similar to what we did on iOS. We merely have to
    send the `registrationId` value to `loginViewModel`.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码与我们之前在 iOS 上所做的是非常相似的。我们只需将 `registrationId` 值发送到 `loginViewModel`。
- en: 'Next, we have to write the following code when the message is received:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当收到消息时，我们必须编写以下代码：
- en: '[PRE33]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This code will actually pull out the values from the notification and display
    them in the notification center of the Android device. We used the built-in resource
    for `SymActionEmail` to display an e-mail icon in the notification.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实际上会从通知中提取值，并在 Android 设备的通知中心显示它们。我们使用了内置资源 `SymActionEmail` 来在通知中显示电子邮件图标。
- en: 'Next, we just need to implement two more abstract methods. For now, let''s
    just use `Console.WriteLine` to report these events as follows:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们只需要实现两个更多的抽象方法。目前，我们可以简单地使用 `Console.WriteLine` 来报告以下事件：
- en: '[PRE34]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Down the road, you should consider removing registrations from the `Device`
    table in Azure when `OnUnRegistered` is called. Occasionally, a user's `registrationId`
    will change, so this is the place where your application is notified of this change.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在将来，当调用 `OnUnRegistered` 时，你应该考虑从 Azure 的 `Device` 表中移除注册信息。偶尔，用户的 `registrationId`
    会发生变化，因此这是你的应用程序被通知这一变化的地方。
- en: 'Next, open `Application.cs` and add the following lines to the end of `OnCreate`:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `Application.cs` 并将以下行添加到 `OnCreate` 的末尾：
- en: '[PRE35]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Next, open `LoginActivity.cs` and add the following line after a successful
    login:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开 `LoginActivity.cs` 并在成功登录后添加以下行：
- en: '[PRE36]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Now if you repeat the steps for testing push notifications on iOS, you should
    be able to send a push notification to our Android app. Even better, you should
    be able to send push notifications across platforms, since an iOS user can send
    a message to an Android user.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你重复在 iOS 上测试推送通知的步骤，你应该能够向我们的 Android 应用发送推送通知。更好的是，你应该能够跨平台发送推送通知，因为 iOS
    用户可以向 Android 用户发送消息。
- en: '![Implementing Google Cloud Messaging](img/00069.jpeg)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![实现 Google 云消息传递](img/00069.jpeg)'
- en: Summary
  id: totrans-291
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we went through what Windows Azure provides: Infrastructure
    as a Service and Platform as a Service. We set up a free Windows Azure account
    and set up an Azure Mobile Services instance. Next, we created all the tables
    we needed to store our data and wrote a few scripts to add the business logic
    to the web service. We implemented the client-side code for making requests against
    Azure Mobile Services. Lastly, we implemented push notifications for iOS using
    the Apple Push Notification Service and for Android using Google Cloud Messaging.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Windows Azure 提供的内容：基础设施即服务和平台即服务。我们设置了一个免费的 Windows Azure 账户并设置了一个
    Azure 移动服务实例。接下来，我们创建了所有必要的表来存储我们的数据，并编写了一些脚本将业务逻辑添加到 Web 服务中。我们实现了客户端代码以对 Azure
    移动服务进行请求。最后，我们使用 Apple 推送通知服务和 Google 云消息传递为 iOS 和 Android 实现了推送通知。
- en: Using Azure Mobile Services, we were able to get by without writing much of
    the server-side code—mainly a few simple scripts. It would be pretty challenging
    to implement push notifications yourself instead of leveraging Azure's functionality
    for this. In the next chapter, we'll explore how to use third-party libraries
    with Xamarin. This includes everything from the Xamarin Component Store to using
    native Objective-C or Java libraries.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Azure 移动服务，我们能够避免编写大量的服务器端代码——主要是几个简单的脚本。如果不利用 Azure 的功能来实现推送通知，这将是一项相当具有挑战性的工作。在下一章中，我们将探讨如何使用
    Xamarin 与第三方库。这包括从 Xamarin 组件商店到使用原生 Objective-C 或 Java 库的所有内容。
