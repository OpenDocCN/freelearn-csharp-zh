- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Documentation with Swagger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll look at documenting your project with Swagger. Human-readable
    documentation is critical in an API. It allows your clients to understand each
    endpoint and the potential responses quickly.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll ensure that our Swagger documentation adheres to the OpenAPI (formerly
    Swagger) Specification by utilizing XML and incorporating attributes within the
    code. You can learn more about OpenAPI at [https://swagger.io/docs/specification/about/](https://swagger.io/docs/specification/about/)
    .
  prefs: []
  type: TYPE_NORMAL
- en: Swagger needs an OpenAPI implementation, and in the case of .NET, Swashbuckle
    serves as the designated option.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What Swagger is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Swagger is used
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to set up Swagger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to pass parameters to Swagger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this chapter, all you will need is Visual Studio. All of the features we’ll
    be using come with Visual Studio, or can be obtained for free through NuGet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code files for this book are available in the book’s GitHub repository
    : [https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter04](https://github.com/PacktPublishing/Programming-APIs-with-C-Sharp-and-.NET/tree/main/Chapter04)'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Swagger documentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To install Swagger, open your solution and from the menu, select **Tools** |
    **NuGet Package Manager** | **Manage NuGet Packages for Solution** . Install the
    latest version of **Swashbuckle.AspNetCore** .
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on your project file and click on **Properties** . On the left
    of your screen, choose **Application** . On the right, choose **Console Application**
    , as shown in *Figure 4* *.1* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – Installation part 1](img/B21988_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – Installation part 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Build** , choose **Output** and scroll down to **Documentation file**
    . Check the **Generate a file containing API documentation** box, as shown in
    *Figure 4* *.2* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – Setting up Swagger output](img/B21988_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Setting up Swagger output
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In *Figure 4* *.2* , **Generate a file containing API documentation** is checked.
    The file that is generated can be imported into other applications, such as Postman,
    for an integrated documentation and testing experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Program.cs** (typically the last file in Solution Explorer) and add
    the Swagger generator to the services collection:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save everything. That’s it. This is only done once. You have now set up Swagger
    documentation. In fact, you’ve already added the description, name, and contact
    information. The result is shown in *Figure 4* *.3* . This is what you will see
    when you start your program and Swagger opens a browser window to display its
    interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Top of Swagger documentation](img/B21988_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – Top of Swagger documentation
  prefs: []
  type: TYPE_NORMAL
- en: Notice that on this page, the website and email are live links and the text
    **Create documentation for Cars** is what you put in the description in the preceding
    code.
  prefs: []
  type: TYPE_NORMAL
- en: Swagger for the controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Swagger documentation is implemented using XML comments. XML comments are preceded
    by three slash marks. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'XML comments are paired tags, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Let’s start with the controller of our Cars application. We’re going to put
    Swagger documentation above every method in the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first comment we’ll add is the summary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This comment will appear next to the route for the **GET** button, as shown
    in *Figure 4* *.4* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Display the summary](img/B21988_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Display the summary
  prefs: []
  type: TYPE_NORMAL
- en: Before we go any further, let’s look at what we get from Swagger without writing
    any additional code.
  prefs: []
  type: TYPE_NORMAL
- en: Swagger out of the box
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Note that Swagger will come up automatically just after you start your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the auto-generated documentation, click on the arrow on the far right
    as circled in *Figure 4* *.4* . Swagger opens the details of the **Get** command,
    as shown in *Figure 4* *.5* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.5 – Swagger out of the box](img/B21988_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Swagger out of the box
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a little hard to see, so let’s zoom in on a couple of important parts.
    In the upper-left corner is an area for all the parameters you’ll be sending in
    for the **GetAll** command. We are sending in **returnDeletedRecords** with a
    default value of **false** . *Figure 4* *.6* shows how Swagger depicts this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.6 – Parameters](img/B21988_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Parameters
  prefs: []
  type: TYPE_NORMAL
- en: Notice the dropdown. It lets you try out both possible values ( **false** and
    **true** ).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, on the left side are the code and description for the potential responses
    from the server. *Figure 4* *.7* shows that the first potential response is **200:
    Success** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.7 – Success](img/B21988_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Success
  prefs: []
  type: TYPE_NORMAL
- en: 'Beneath the first response code is the schema that tells you what properties
    there are and what their type is, as shown in *Figure 4* *.8* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – Schema](img/B21988_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – Schema
  prefs: []
  type: TYPE_NORMAL
- en: We are all set to see the effects of our comments. Let’s take a look at what
    happens when we start the application and Swagger comes up.
  prefs: []
  type: TYPE_NORMAL
- en: Running your API in Swagger
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Most importantly, in the upper-right corner is a **Try It Out** button. Clicking
    on this button puts Swagger into interactive mode, and allows you to try out your
    code. When that button is clicked, two other buttons appear: **Execute** and **Clear**
    . Pressing **Execute** causes the code to run and in our case returns the list
    of cars, along with some other metadata. Let’s zero in on that ( **Clear** removes
    the results so that you can try again).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing we see is marked as **Curl** , as shown in *Figure 4* *.9*
    :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.9 – Every Swagger page displays the curl for the endpoint](img/B21988_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – Every Swagger page displays the curl for the endpoint
  prefs: []
  type: TYPE_NORMAL
- en: According to Wikipedia, “ *Curl combines text markup (as in HTML), scripting
    (as in JavaScript), and heavy-duty computing (as in Java, C#, or C++) within one
    unified framework* ”. We will be ignoring Curl in this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below that, we see the request URL that we submitted to the server, as shown
    in *Figure 4* *.10* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.10 – Request URL as displayed in Swagger](img/B21988_04_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – Request URL as displayed in Swagger
  prefs: []
  type: TYPE_NORMAL
- en: Notice that we are working with port **7025** (yours may differ) on localhost
    and that we pass our parameter ( **returnDeletedRecords=false** ) as we would
    with any HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next comes the most important server response: the response body, as shown
    in *Figure 4* *.11* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.11 – Server response](img/B21988_04_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Server response
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the schema of the response object is displayed, as shown in *Figure
    4* *.12* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.12 – Response schema](img/B21988_04_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – Response schema
  prefs: []
  type: TYPE_NORMAL
- en: Swagger is terrific for documentation, but somewhat limited as a way to test
    your application. As we’ll see, Postman is a much more powerful application for
    testing.
  prefs: []
  type: TYPE_NORMAL
- en: param tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your verb has parameters, you can document them in the Swagger attributes
    using the **param** keyword. For example, in our case, we want to document the
    **returnDeletedRecords** parameter. We can do so like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is that the parameter is documented in Swagger, as shown in *Figure
    4* *.13* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.13 – Documenting the parameters](img/B21988_04_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Documenting the parameters
  prefs: []
  type: TYPE_NORMAL
- en: Response codes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can (and should) document all the possible response codes and what they
    indicate:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The result is that the return codes are documented in Swagger, as shown in
    *Figure 4* *.14* :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.14 – Documenting the return codes](img/B21988_04_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Documenting the return codes
  prefs: []
  type: TYPE_NORMAL
- en: While this all takes a bit of effort, it becomes routine and is a best practice.
    It also makes the lives of your clients far easier.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to set up Swashbuckle to enable Swagger. Swagger
    provides extensive documentation of your API, allowing (human) clients to learn
    about each endpoint and what it is for. In addition, you can also document each
    parameter and the potential error codes.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you’ll see how we can validate endpoint requests on the
    way in – preventing wasted resources and protecting you from various attacks against
    your system.
  prefs: []
  type: TYPE_NORMAL
- en: You try it
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Install Swagger and create the documentation for the **Insert** endpoint in
    the **Car** controller. Run Swagger to ensure that all your documentation is displayed
    properly.
  prefs: []
  type: TYPE_NORMAL
