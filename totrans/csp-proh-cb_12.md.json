["```cs\n    namespace Chapter12\n    {\n        public class Recipes\n        {\n\n        }\n    }\n    ```", "```cs\n    using System.Security.Cryptography;\n    ```", "```cs\n    public static class Recipes\n    {\n        public static string saltValue { get; set; }\n        public static string hashValue { get; set; }\n\n        public static void RegisterUser(string password, string username)\n        {\n\n        }\n\n        public static void ValidateLogin(string password, string username)\n        {                  \n\n        }\n    }\n    ```", "```cs\n        public static void RegisterUser(string password, string username)\n        {\n            // Create a truly random salt using RNGCryptoServiceProvider.\n            RNGCryptoServiceProvider csprng = new RNGCryptoServiceProvider();\n            byte[] salt = new byte[32];\n            csprng.GetBytes(salt);\n\n            // Get the salt value\n            saltValue = Convert.ToBase64String(salt);\n            // Salt the password\n            byte[] saltedPassword = Encoding.UTF8.GetBytes(saltValue + password);\n\n            // Hash the salted password using SHA256\n            SHA256Managed hashstring = new SHA256Managed();\n            byte[] hash = hashstring.ComputeHash(saltedPassword);\n\n            // Save both the salt and the hash in the user's database record.\n            saltValue = Convert.ToBase64String(salt);\n            hashValue = Convert.ToBase64String(hash);            \n        }\n        ```", "```cs\n        public static void ValidateLogin(string password, string username)\n        {            \n            // Read the user's salt value from the database\n            string saltValueFromDB = saltValue;\n\n            // Read the user's hash value from the database\n            string hashValueFromDB = hashValue;\n\n            byte[] saltedPassword = Encoding.UTF8.GetBytes(saltValueFromDB + password);\n\n            // Hash the salted password using SHA256\n            SHA256Managed hashstring = new SHA256Managed();\n            byte[] hash = hashstring.ComputeHash(saltedPassword);\n\n            string hashToCompare = Convert.ToBase64String(hash);\n\n            if (hashValueFromDB.Equals(hashToCompare))\n                Console.WriteLine(\"User Validated.\");            \n            else\n                Console.WriteLine(\"Login credentials incorrect. User not validated.\");            \n        }\n        ```", "```cs\n    using static Chapter12.Recipes;\n    ```", "```cs\n    string username = \"dirk.strauss\";\n    string password = \"^tj_Y4$g1!8LkD\";\n    RegisterUser(password, username);\n\n    ValidateLogin(password, username);\n    Console.ReadLine();\n    ```", "```cs\n    string username = \"dirk.strauss\";\n    string password = \"^tj_Y4$g1!8LkD\";\n    RegisterUser(password, username);\n\n    password = \"WrongPassword\";\n    ValidateLogin(password, username);\n    Console.ReadLine();\n    ```", "```cs\n    private void textBox1_KeyPress(object sender, KeyPressEventArgs e)\n    {\n\n    }\n    ```", "```cs\n    using System.Runtime.InteropServices;\n    ```", "```cs\n    SecureString secure = new SecureString();\n    ```", "```cs\n    private void textBox1_KeyPress(object sender, KeyPressEventArgs e)\n    {\n        secure.AppendChar(e.KeyChar);\n    }\n    ```", "```cs\n    private void btnLogin_Click(object sender, EventArgs e)\n    {\n        IntPtr unmanagedPtr = IntPtr.Zero;\n\n        try\n        {\n            if (secure == null)\n                throw new ArgumentNullException(\"Password not defined\");\n            unmanagedPtr = Marshal.SecureStringToGlobalAllocUnicode(secure);\n            MessageBox.Show($\"SecureString password to validate is {Marshal.PtrToStringUni(unmanagedPtr)}\");\n        }\n        catch(Exception ex)\n        {\n            MessageBox.Show(ex.Message);\n        }\n        finally\n        {\n            Marshal.ZeroFreeGlobalAllocUnicode(unmanagedPtr);\n            secure.Dispose();\n        }\n    }\n    ```", "```cs\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    <configuration>\n        <startup> \n            <supportedRuntime version=\"v4.0\" sku=\".NETFramework,Version=v4.6.1\"/>\n        </startup>\n        <appSettings>\n          <add key=\"name\" value=\"Dirk\"/>\n          <add key=\"lastname\" value=\"Strauss\"/> \n          <add key=\"Secret\" value=\"letMeIn\"/>\n        </appSettings>\n    </configuration>\n    ```", "```cs\n    <appSettings file=\"C:\\temp\\secret\\secret.config\">\n    ```", "```cs\n    using System.Configuration;\n    ```", "```cs\n    string sSecret = ConfigurationManager.AppSettings[\"Secret\"];\n    Console.WriteLine(sSecret);\n    Console.ReadLine();\n    ```", "```cs\n    SET ANSI_NULLS ON\n    GO\n    SET QUOTED_IDENTIFIER ON\n    GO\n    -- =============================================\n    -- Author:          <Author,,Name>\n    -- Create date:      <Create Date,,>\n    -- Description:      <Description,,>\n    -- =============================================\n    CREATE PROCEDURE <Procedure_Name, sysname, ProcedureName> \n        -- Add the parameters for the stored procedure here\n        <@Param1, sysname, @p1> <Datatype_For_Param1, , int> = <Default_Value_For_Param1, , 0>, \n        <@Param2, sysname, @p2> <Datatype_For_Param2, , int> = <Default_Value_For_Param2, , 0>\n    AS\n    BEGIN\n        -- SET NOCOUNT ON added to prevent extra result sets from\n        -- interfering with SELECT statements.\n        SET NOCOUNT ON;\n\n        -- Insert statements for procedure here\n        SELECT <@Param1, sysname, @p1>, <@Param2, sysname, @p2>\n    END\n    GO\n    ```", "```cs\n    CREATE PROCEDURE cb_ReadCurrentUserDisplayData\n    ```", "```cs\n    @userID INT\n    ```", "```cs\n    SELECT\n       Firstname, Lastname, Displayname\n    FROM\n       dbo.UserDisplayData\n    WHERE\n       ID = @userID\n    ```", "```cs\n    using System.Data.SqlClient;\n    ```", "```cs\n    int intUserID = 1;\n    int cmdTimeout = 15;\n    string server = \"DIRK\";\n    string db = \"CookbookDB\";\n    string uid = \"dirk\";\n    string password = \"uR^GP2ABG19@!R\";\n    ```", "```cs\n    SecureString secpw = new SecureString();\n    if (password.Length > 0)\n    {\n        foreach (var c in password.ToCharArray()) secpw.AppendChar(c);\n    }\n    secpw.MakeReadOnly();\n\n    string dbConn = $\"Data Source={server};Initial Catalog={db};\";\n    6SqlCredential cred = new SqlCredential(uid, secpw);\n    ```", "```cs\n    using (SqlConnection conn = new SqlConnection(dbConn, cred))\n    {                \n        try\n        {\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n    Console.ReadLine();\n    ```", "```cs\n    cmd.Parameters.Add(\"userID\", SqlDbType.Int).Value = intUserID;\n    ```", "```cs\n    cmd.Parameters.Add(\"essay\", SqlDbType.VarChar, -1).Value = essayValue;\n    ```", "```cs\n    conn.Open();\n    SqlCommand cmd = new SqlCommand(\"cb_ReadCurrentUserDisplayData\", conn);\n    cmd.CommandType = CommandType.StoredProcedure;\n    cmd.Parameters.Add(\"userID\", SqlDbType.Int).Value = intUserID;\n    cmd.CommandTimeout = cmdTimeout;\n    var returnData = cmd.ExecuteReader();\n    var dtData = new DataTable();\n    dtData.Load(returnData);\n\n    if (dtData.Rows.Count != 0)\n         Console.WriteLine(dtData.Rows[0][\"Displayname\"]);\n    ```", "```cs\n    int intUserID = 1;\n    int cmdTimeout = 15;\n    string server = \"DIRK\";\n    string db = \"CookbookDB\";\n    string uid = \"dirk\";\n    string password = \"uR^GP2ABG19@!R\";\n    SecureString secpw = new SecureString();\n    if (password.Length > 0)\n    {\n        foreach (var c in password.ToCharArray()) secpw.AppendChar(c);\n    }\n    secpw.MakeReadOnly();\n\n    string dbConn = $\"Data Source={server};Initial Catalog={db};\";\n\n    SqlCredential cred = new SqlCredential(uid, secpw);\n    using (SqlConnection conn = new SqlConnection(dbConn, cred))\n    {                \n        try\n        {\n            conn.Open();\n            SqlCommand cmd = new SqlCommand(\"cb_ReadCurrentUserDisplayData\", conn);\n            cmd.CommandType = CommandType.StoredProcedure;\n            cmd.Parameters.Add(\"userID\", SqlDbType.Int).Value = intUserID;\n            cmd.CommandTimeout = cmdTimeout;\n            var returnData = cmd.ExecuteReader();\n            var dtData = new DataTable();\n            dtData.Load(returnData);\n            if (dtData.Rows.Count != 0)\n            Console.WriteLine(dtData.Rows[0][\"Displayname\"]);\n\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n    }\n    Console.ReadLine();\n    ```", "```cs\n    using System.Diagnostics;\n    using System.Reflection;\n    using System.IO;\n    ```", "```cs\n    public static void ErrorInception()\n    {\n        string basepath = Path.GetDirectoryName (Assembly.GetEntryAssembly().Location);\n        var full = Path.Combine(basepath, \"log\");\n    }\n\n    private static void LogException(string message)\n    {\n\n    }\n    ```", "```cs\n    try\n    {\n        for (int i = 0; i <= 3; i++)\n        {\n            // do work\n            File.Open($\"{full}\\\\log.txt\", FileMode.Append);\n        }\n    }\n    catch (Exception ex)\n    {\n        StackTrace st = new StackTrace();\n        StackFrame sf = st.GetFrame(0);\n        MethodBase currentMethodName = sf.GetMethod();\n        ex.Data.Add(\"Date\", DateTime.Now);\n        LogException(ex.Message);\n    }\n    ```", "```cs\n    public static void ErrorInception()\n    {\n        string basepath = Path.GetDirectoryName(Assembly.GetEntryAssembly().Location);\n        var full = Path.Combine(basepath, \"log\");\n\n        try\n        {\n            for (int i = 0; i <= 3; i++)\n            {\n                // do work\n                File.Open($\"{full}\\\\log.txt\", FileMode.Append);\n            }\n        }\n        catch (Exception ex)\n        {\n            StackTrace st = new StackTrace();\n            StackFrame sf = st.GetFrame(0);\n            MethodBase currentMethodName = sf.GetMethod();\n            ex.Data.Add(\"Date\", DateTime.Now);\n            LogException(ex.Message);\n        }\n    }\n\n    private static void LogException(string message)\n    {\n\n    }\n    ```", "```cs\n    ErrorInception();\n    Console.ReadLine();\n    ```", "```cs\n    List<int> myList = new List<int>() { 1, 4, 6, 9, 11 };\n    foreach(int num in myList)\n    {\n        Console.WriteLine(num);\n    }\n    Console.ReadLine();\n    ```", "```cs\n    public static void RunFastTask()\n    {\n        RunLongerTask();\n    }\n\n    private static void RunLongerTask()\n    {\n        Thread.Sleep(3000);\n        BottleNeck();\n    }\n\n    private static void BottleNeck()\n    {\n        Thread.Sleep(8000);\n    }\n    ```", "```cs\n    RunFastTask();\n    Thread.Sleep(1000);\n    ```"]