["```cs\n@page \"/counter\" @rendermode InteractiveAuto\n<PageTitle>Counter</PageTitle>\n<h1>Counter</h1>\n<p role=\"status\">Current count: @currentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\n    private int currentCount = 0;\n    private void IncrementCount()\n    {\n        currentCount++;\n    }\n} \n```", "```cs\n@page \"/counterwithparameter\"\n@rendermode InteractiveAuto\n<h1>Counter</h1>\n<p>Current count: @CurrentCount</p>\n<button class=\"btn btn-primary\" @onclick=\"IncrementCount\">Click me</button>\n@code {\n    [Parameter]\n    public int IncrementAmount { get; set; } = 1;\n    [Parameter]\n    public int CurrentCount { get; set; } = 0;\n    private void IncrementCount()\n    {\n        CurrentCount+=IncrementAmount;\n    }\n} \n```", "```cs\n@page \"/parentcounter\"\n@rendermode InteractiveAuto\n<CounterWithParameter IncrementAmount=\"@incrementamount\" CurrentCount=\"@\ncurrentcount\"/>\nThe current count is: @currentcount\n@code {\n    int incrementamount = 10;\n    int currentcount = 0;\n} \n```", "```cs\n[Parameter]\npublic EventCallback<int> CurrentCountChanged { get; set; }\nprivate async Task IncrementCount()\n{\n    CurrentCount += IncrementAmount;\n    await CurrentCountChanged.InvokeAsync(CurrentCount);\n} \n```", "```cs\n<CounterWithParameterAndEvent IncrementAmount=\"@incrementamount\" @bind-CurrentCount=\"currentcount\"/> \n```", "```cs\n<CounterWithParameterAndEvent IncrementAmount=\"@incrementamount\" @bind-CurrentCount=\"currentcount\" @bind-CurrentCount:event=\"CurrentCountChanged\"/> \n```", "```cs\n<button @onclick=\"@((e)=>message=$\"x:{e.ClientX} y:{e.ClientY}\")\">Click me</button> \n```", "```cs\n@page \"/RenderFragmentTest\"\n@for (int i = 0; i < 10; i++)\n{\n    @Render(i)\n}\n@code\n{\n    private RenderFragment Render(int number) \n    {\n         return @<p>This is a render fragment @number</p>;\n    }\n} \n```", "```cs\n@<b>This is a default value</b>; \n```", "```cs\n    <div class=\"alert alert-primary\" role=\"alert\">\n        A simple primary alert—check it out!\n    </div> \n    ```", "```cs\n    <div class=\"alert alert-primary\" role=\"alert\">\n        @ChildContent\n    </div>\n    @code{\n        [Parameter]\n        public RenderFragment ChildContent { get; set; } =@<b>This is a default value</b>;\n    } \n    ```", "```cs\n    public enum AlertStyle\n    {\n        Primary,\n        Secondary,\n        Success,\n        Danger,\n        Warning,\n        Info,\n        Light,\n        Dark\n    } \n    ```", "```cs\n    [Parameter]\n    public AlertStyle Style { get; set; } \n    ```", "```cs\n    <div class=\"@($\"alert alert-{Style.ToString().ToLower()}\")\" role=\"alert\"> \n    ```", "```cs\n    @page \"/alerttest\"\n    @using SharedComponents.ReusableComponents\n    <Alert Style=\"Alert.AlertStyle.Danger\">\n        This is a test\n    </Alert>\n    <Alert Style=\"Alert.AlertStyle.Success\">\n    <ChildContent>\n            This is another test\n        </ChildContent>\n    </Alert>\n    <Alert Style=\"Alert.AlertStyle.Success\"/> \n    ```", "```cs\n    @page \"/setfocus\" @rendermode InteractiveAuto \n    ```", "```cs\n    @code {\n        ElementReference textInput;\n    } \n    ```", "```cs\n    @using static Microsoft.AspNetCore.Components.Web.RenderMode \n    ```", "```cs\n    <input @ref=\"textInput\" />\n    <button @onclick=\"() => textInput.FocusAsync()\">Set focus</button> \n    ```", "```cs\n    <li><a href=\"/Post/@p.Id\">@p.Title</a></li> \n    ```", "```cs\n    [Parameter]\n    public string BlogPostId { get; set; } \n    ```", "```cs\n    @page \"/post/{BlogPostId}\" \n    ```", "```cs\n    @using Data.Models.Interfaces\n    @using Data.Models \n    ```", "```cs\n    @inject IBlogApi _api\n    @inject NavigationManager _navman \n    ```", "```cs\n    public BlogPost? BlogPost { get; set; } \n    ```", "```cs\n    protected async override Task OnParametersSetAsync()\n    {\n        BlogPost=await _api.GetBlogPostAsync(BlogPostId);\n        await base.OnParametersSetAsync();\n    } \n    ```", "```cs\n    @if (BlogPost != null)\n    {\n        <PageTitle>@BlogPost.Title</PageTitle>\n    <HeadContent>\n    <meta property=\"og:title\"\n     content=\"@BlogPost.Title\" />\n    <meta property=\"og:description\" content=\"@(new\n          string(BlogPost.Text.Take(100).ToArray()))\" />\n    <meta property=\"og:image\" content=\n     \"@($\"{_navman.BaseUri}/pathtoanimage.png\")\" />\n    <meta property=\"og:url\" content=\"@_navman.Uri\" />\n    <meta name=\"twitter:card\" content=\"@(new string(BlogPost.Text.Take(100).ToArray()))\" />\n    </HeadContent>\n    <h2>@BlogPost.Title</h2>\n        @((MarkupString)BlogPost.Text)\n\n    } \n    ```", "```cs\n<ul>\n    @foreach (var p in posts)\n    {\n        <li><a href=\"/Post/@p.Id\">@p.Title</a></li>\n    }\n</ul> \n```", "```cs\n<Virtualize Items=\"posts\" Context=\"p\">\n<li><a href=\"/Post/@p.Id\">@p.Title</a></li>\n</Virtualize> \n```", "```cs\n    <ul>\n    <Virtualize ItemsProvider=\"LoadPosts\" Context=\"p\">\n    <li><a href=\"/Post/@p.Id\">@p.Title</a></li>\n    </Virtualize>\n    </ul> \n    ```", "```cs\n    public int totalBlogposts { get; set; }\n    private async ValueTask<ItemsProviderResult<BlogPost>> LoadPosts(ItemsProviderRequest request)\n    {\n        if (totalBlogposts == 0)\n        {\n            totalBlogposts = await _api.GetBlogPostCountAsync();\n        }\n        var numblogposts = Math.Min(request.Count, totalBlogposts - request.StartIndex);\n        var blogposts= await _api.GetBlogPostsAsync(numblogposts,request.StartIndex);\n        return new ItemsProviderResult<BlogPost>(blogposts, totalBlogposts);\n    } \n    ```", "```cs\n<ErrorBoundary>\n<ComponentWithError />\n</ErrorBoundary> \n```", "```cs\n<ErrorBoundary>\n<ChildContent>\n<ComponentWithError />\n</ChildContent>\n<ErrorContent>\n<h1 style=\"color: red;\">Oops… something broke</h1>\n</ErrorContent>\n</ErrorBoundary> \n```", "```cs\n<ErrorBoundary Context=\"ex\">\n<ChildContent>\n<p>@(1/zero)</p>\n</ChildContent>\n<ErrorContent>\n       An error occurred\n       @ex.Message\n    </ErrorContent>\n</ErrorBoundary>\n@code {\n    int zero = 0;\n} \n```", "```cs\nMicrosoft.AspNetCore.Components.Sections; \n```", "```cs\n<SectionOutlet SectionName=\"top-header\"/> \n```", "```cs\n<SectionContent SectionName=\"top-header\">\n<b>Test</b>\n</SectionContent> \n```", "```cs\n<SectionOutlet SectionId=\"MainLayout.TopHeader\"/> \n```", "```cs\n@code\n{\n    public static SectionOutlet TopHeader = new()\n} \n```", "```cs\n<SectionContent SectionId=\"Layout.MainLayout.TopHeader\">\n<b>Using SectionId</b>\n</SectionContent> \n```"]