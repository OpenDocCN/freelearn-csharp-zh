["```cs\nAssert.Equal(35, passengerCount);\n```", "```cs\n[Fact]\npublic void PassengerFullNameShouldBeAccurate() {\n    // Arrange\n    Passenger passenger = new() {\n        FirstName = \"Dot\",\n        LastName = \"Nette\",\n    };\n    // Act\n    string name = passenger.FullName;\n    // Assert\n    Assert.Equal(\"Dot Nette\", name);\n}\n```", "```cs\nglobal using Xunit;\nglobal using Shouldly;\n```", "```cs\n[Fact]\npublic void PassengerFullNameShouldBeAccurate() {\n    // Arrange\n    Passenger passenger = new() {\n        FirstName = \"Dot\",\n        LastName = \"Nette\",\n    };\n    // Act\n    string name = passenger.FullName;\n    // Assert\n    name.ShouldBe(\"Dot Nette\");\n}\n```", "```cs\n[Fact]\npublic void ScheduleFlightShouldAddFlight() {\n    // Arrange\n    FlightScheduler scheduler = new();\n    PassengerFlightInfo flight = _flightFaker.Generate();\n    // Act\n    scheduler.ScheduleFlight(flight);\n    // Assert\n    var result = scheduler.GetAllFlights();\n    Assert.NotNull(result);\n    Assert.Equal(1, result.Count());\n    Assert.Contains(flight, result);\n}\n```", "```cs\n[Fact]\npublic void ScheduleFlightShouldAddFlight() {\n    // Arrange\n    FlightScheduler scheduler = new();\n    PassengerFlightInfo flight = _flightFaker.Generate();\n    // Act\n    scheduler.ScheduleFlight(flight);\n    // Assert\n    var result = scheduler.GetAllFlights();\n    result.ShouldNotBeNull();\n    result.Count().ShouldBe(1);\n    result.ShouldContain(flight);\n}\n```", "```cs\n[Fact]\npublic void CarryOnBaggageIsPricedCorrectly() {\n    // Arrange\n    BaggageCalculator calculator = new();\n    int carryOnBags = 2;\n    int checkedBags = 0;\n    int passengers = 1;\n    bool isHoliday = false;\n    // Act\n    decimal result = calculator.CalculatePrice(checkedBags,\n        carryOnBags, passengers, isHoliday);\n    // Assert\n    result.Should().Be(60m);\n}\n```", "```cs\n[Fact]\npublic void ScheduleFlightShouldNotBeSlow() {\n    // Arrange\n    FlightScheduler scheduler = new();\n    PassengerFlightInfo flight = _flightFaker.Generate();\n    int maxTime = 100;\n    Stopwatch stopwatch = new();\n    // Act\n    stopwatch.Start();\n    scheduler.ScheduleFlight(flight);\n    stopwatch.Stop();\n    long milliSeconds = stopwatch.ElapsedMilliseconds;\n    // Assert\n    milliSeconds.ShouldBeLessThanOrEqualTo(maxTime);\n}\n```", "```cs\n[Fact]\npublic void ScheduleFlightShouldNotBeSlow() {\n  // Arrange\n  FlightScheduler scheduler = new();\n  PassengerFlightInfo flight = _flightFaker.Generate();\n  TimeSpan maxTime = TimeSpan.FromMilliseconds(100);\n  // Act\n  Action testAction = () => scheduler.ScheduleFlight(flight);\n  // Assert\n  Should.CompleteIn(testAction, maxTime);\n}\n```", "```cs\n[Fact]\npublic void BoardingMessageShouldBeAccurate() {\n  // Arrange\n  Passenger passenger = new() {\n    BoardingGroup = 7,\n    FirstName = \"Dot\",\n    LastName = \"Nette\",\n    MailingCity = \"Columbus\",\n    MailingStateOrProvince = \"Ohio\",\n    MailingCountry = \"United States\",\n    MailingPostalCode = \"43081\",\n    Email = \"noreply@packt.com\",\n    RewardsId = \"CSA88121\",\n    RewardMiles = 360,\n    IsMilitary = false,\n    NeedsHelp = false,\n  };\n  BoardingProcessor boarding =\n    new(BoardingStatus.Boarding, group:3);\n  // Act\n  string message = boarding.BuildMessage(passenger);\n  // Assert\n  message.ShouldBe(\"Please Wait\");\n}\n```", "```cs\n// Arrange\nFaker<Passenger> faker = new();\nfaker.RuleFor(p => p.FirstName, f => f.Person.FirstName)\n .RuleFor(p => p.LastName, f => f.Person.LastName)\n .RuleFor(p => p.Email, f => f.Person.Email)\n .RuleFor(p => p.MailingCity, f => f.Address.City())\n .RuleFor(p => p.MailingCountry, f => f.Address.Country())\n .RuleFor(p => p.MailingState, f =>f.Address.State())\n .RuleFor(p => p.MailingPostalCode, f=>f.Address.ZipCode())\n .RuleFor(p => p.RewardsId, f => f.Random.String2(8))\n .RuleFor(p => p.RewardMiles,\n          f => f.Random.Number(int.MaxValue));\nPassenger passenger = faker.Generate();\npassenger.BoardingGroup = 7;\npassenger.NeedsHelp = false;\npassenger.IsMilitary = false;\n```", "```cs\n[Fact]\npublic void BoardingMessageShouldBeAccurate() {\n  Faker<Passenger> faker = BuildPersonFaker();\n  Passenger passenger = faker.Generate();\n  passenger.BoardingGroup = 7;\n  passenger.NeedsHelp = false;\n  passenger.IsMilitary = false;\n  BoardingProcessor boarding =\n    new(BoardingStatus.Boarding, group: 3);\n  // Act\n  string message = boarding.BuildMessage(passenger);\n  // Assert\n  message.ShouldBe(\"Please Wait\");\n}\n```", "```cs\npublic class FlightBookingManager {\n  private readonly IEmailClient _email;\n  public FlightBookingManager(IEmailClient email) {\n    _email = email;\n  }\n  public bool BookFlight(Passenger passenger,\n    FlightInfo flight, string seat) {\n    if (!flight.IsSeatAvailable(seat)) {\n      return false;\n    }\n    flight.AssignSeat(passenger, seat);\n    string message = \"Your seat is confirmed\";\n    return _email.SendMessage(passenger.Email, message);\n  }\n}\n```", "```cs\npublic interface IEmailClient {\n  bool SendMessage(string email, string message);\n}\n```", "```cs\npublic class TestEmailClient : IEmailClient {\n  public bool SendMessage(string email, string message)\n    => true;\n}\n```", "```cs\n[Fact]\npublic void BookingFlightShouldSucceedForEmptyFlight() {\n  // Arrange\n  TestEmailClient emailClient = new();\n  FlightBookingManager manager = new(emailClient);\n  Passenger passenger = GenerateTestPassenger();\n  FlightInfo flight = GenerateEmptyFlight(\"Paris\",\n    \"Toronto\");\n  // Act\n  bool booked = manager.BookFlight(passenger, flight,\"2B\");\n  // Assert\n  booked.ShouldBeTrue();\n}\n```", "```cs\npublic class SendingNotAllowedEmailClient : IEmailClient {\n  public bool SendMessage(string email, string message) {\n    Assert.Fail(\"You should not have sent an email\");\n    return false;\n  }\n}\n```", "```cs\n[Fact]\npublic void BookingFlightShouldSucceedForEmptyFlight() {\n  // Arrange\n  Mock<IEmailClient> clientMock = new();\n  IEmailClient emailClient = clientMock.Object;\n  FlightBookingManager manager = new(emailClient);\n  Passenger passenger = GenerateTestPassenger();\n  FlightInfo flight = GenerateEmptyFlight(\"Hamburg\",\n    \"Cairo\");\n  // Act\n  bool booked = manager.BookFlight(passenger, flight,\"2B\");\n  // Assert\n  booked.ShouldBeTrue();\n}\n```", "```cs\nMock<IEmailClient> mockClient = new();\nmockClient.Setup(c => c.SendMessage(It.IsAny<string>(),\n                                    It.IsAny<string>())\n                 ).Returns(true);\nIEmailClient emailClient = mockClient.Object;\n```", "```cs\n[Fact]\npublic void BookingFlightShouldSendEmails() {\n    // Arrange\n    Mock<IEmailClient> mockClient = new();\n    mockClient.Setup(c => c.SendMessage(It.IsAny<string>(),\n        It.IsAny<string>())).Returns(true);\n    IEmailClient emailClient = mockClient.Object;\n    FlightBookingManager manager = new(emailClient);\n    Passenger passenger = GenerateTestPassenger();\n    FlightInfo flight = GenerateEmptyFlight(\"Sydney\",\"LA\");\n    // Act\n    bool result= manager.BookFlight(passenger,flight,\"2C\");\n    // Assert\n    result.ShouldBeTrue();\n    mockClient.Verify(c => c.SendMessage(passenger.Email,\n        It.IsAny<string>()), Times.Once);\n    mockClient.VerifyNoOtherCalls();\n}\n```", "```cs\n[Fact]\npublic void BookingFlightShouldSendEmailsNSubstitute() {\n  // Arrange\n  IEmailClient emailClient= Substitute.For<IEmailClient>();\n  emailClient.SendMessage(Arg.Any<string>(),\n                          Arg.Any<string>()\n                         ).Returns(true);\n  FlightBookingManager manager = new(emailClient);\n  Passenger passenger = GenerateTestPassenger();\n  FlightInfo flight = GenerateEmptyFlight(\"Sydney\",\"LA\");\n  // Act\n  bool result = manager.BookFlight(passenger, flight,\"2C\");\n  // Assert\n  result.ShouldBeTrue();\n  emailClient.Received()\n             .SendMessage(passenger.Email,\n                          Arg.Any<string>());\n}\n```", "```cs\n[Fact]\npublic void FlightManifestShouldMatchExpectations() {\n  // Arrange\n  FlightInfo flight = GenerateEmptyFlight(\"Alta\", \"Laos\");\n  Passenger p1 = new(\"Dot\", \"Netta\");\n  Passenger p2 = new(\"See\", \"Sharp\");\n  flight.AssignSeat(p1, \"1A\");\n  flight.AssignSeat(p2, \"1B\");\n  LegacyManifestGenerator generator = new();\n  // Act\n  FlightManifest manifest = generator.Build(flight);\n  // Assert\n  manifest.ShouldMatchSnapshot();\n}\n```", "```cs\n[Fact]\n[UpdateSnapshots]\npublic void FlightManifestShouldMatchExpectations() {\n```", "```cs\n[Fact]\npublic void FlightManifestExperimentWithScientist() {\n  FlightInfo flight = GenerateEmptyFlight(\"Alta\", \"Laos\");\n  Passenger p1 = new(\"Dot\", \"Netta\");\n  Passenger p2 = new(\"See\", \"Sharp\");\n  Scientist.Science<FlightManifest>(\"Manifest\", exp => {\n    exp.Use(() => {\n      LegacyManifestGenerator generator = new();\n      return generator.Build(flight);\n    });\n    exp.Try(() => {\n      RewrittenManifestGenerator generator = new();\n      return generator.Build(flight);\n    });\n    exp.Compare((a, b)=> a.Arrival == b.Arrival &&\n                         a.Departure == b.Departure &&\n                         a.PassengerCount==b.PassengerCount\n               );\n    exp.ThrowOnMismatches = true;\n  });\n}\n```"]