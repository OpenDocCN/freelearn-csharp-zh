- en: Using WCF Services
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a WCF service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-hosting a WCF service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hosting a WCF service in IIS Server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating a WCF service in a WPF application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the modern world, enterprise applications are the key to consumer-centric
    enterprises. Users access one or multiple devices to connect to the external world.
    And to succeed at this, the business needs shared services, which can be consumed
    by all such devices.
  prefs: []
  type: TYPE_NORMAL
- en: The **service-oriented architecture** (**SOA**) is a design principle that enterprises
    follow to outline well-defined services, using a common set of contracts. Each
    of these services can be individually modified independently of one another and
    consumed by the external world.
  prefs: []
  type: TYPE_NORMAL
- en: '**Windows Communication Foundation** (**WCF**) is a framework to build such
    service-oriented applications. Using WCF, you can send data/messages asynchronously
    from one endpoint to the other. You can host a service endpoint in IIS, or in
    an application directly. The messages passed via this service endpoint can be
    a single character or a word sent as XML, or a complex stream of binary data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'WCF has been widely accepted as a standard to create web services, which offers
    support to multiple protocols and endpoints. In WCF, there are three important
    things that you need to remember; these things are generally known as the **ABC
    of WCF**. The ABC of WCF endpoints defines the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A** for **Address**, which specifies where the service resides. This generally
    follows the URL format as `schema://domain[:port]/path`, for example `http://www.kunal-chowdhury.com:8080/Services`,
    `https://www.kunal-chowdhury.com:8050/Services`, or `http://192.168.0.1/Services`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**B** stands for **Binding**, which is basically a group of elements that corresponds
    to the transport and protocol channels located in the channel stack, to define
    how the messages are handled in the service side and the client side.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C** stands for **Contract**, which is nothing but an agreement between the
    client and the server about the structure (data contract) and content (message
    contract) being passed through the channel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we will learn how to create WCF services, host them, and integrate
    them into a WPF application to give a service call to the defined endpoint. As
    this book is not about WCF, we will just be discussing basic concepts to get you
    started with it.
  prefs: []
  type: TYPE_NORMAL
- en: Please ensure that ASP.NET and WCF are correctly installed and registered. To
    confirm, open the **Visual Studio 2017 Installer**, and make sure that the ASP.NET
    and web development workload, as well as the Windows Communication Foundation
    components, are already installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'If they''re not there already, select them, and modify the installation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2b05231d-fff8-4ef4-b6ba-5d03a418548d.png)'
  prefs: []
  type: TYPE_IMG
- en: Creating a WCF service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A WCF service is a secure service to process business transactions, which supplies
    current data to others, exposing a workflow implemented using **Windows Workflow
    Foundation** as a WCF service. It provides a single programming model to leverage
    the features to create a unified solution to all distributed technologies. That
    means you can write the service once and expose different endpoints to exchange
    messages using any format (default is SOAP) over any transport protocol, that
    is, HTTP, TCP, MSMQ, Named Pipes, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: '**SOAP** (**Simple Object Access Protocol**) is one of the preferred models,
    where communication between the server and the client happens by using XML-based
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn about **data contract**, **data member**, **service
    contract**, **operation contract**, you need to consider these when creating and
    connecting to WCF services. When a service reference is taken into an application
    project, the developer only needs to configure the service with a proper endpoint
    address. Let's start demonstrating it by creating a simple, basic WCF service.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, open Visual Studio IDE with administrative privileges. This
    is often useful while deploying the service in a server.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a simple WCF service, which we will integrate
    into a WPF application later in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a new project named `EmployeeService`. Use the WCF Service Application
    template while creating the project. You can find this under the WCF template
    category, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/136ba68d-a283-444a-a4ab-32be5ce99477.png)'
  prefs: []
  type: TYPE_IMG
- en: Visual Studio, by default, creates three service files (`IService1.cs`, `Service1.svc`,
    and `Service1.svc.cs`) inside the project. As we will create our own services
    from scratch, from Solution Explorer, let's delete all three of the files:![](img/f172caeb-eb8b-4688-87ad-20e8af578300.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s create two folders inside the project node and name them `DataModels`
    and `Services`. This is optional, but it is a good idea to keep the code files
    organized:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7241f331-65b7-452a-b314-3e194d4d0519.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, right-click on the DataModels folder, and follow the context menu entry
    Add | Class... to create a new class file named `Employee`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the class implementation of the `Employee.cs` file, add a few public
    properties of type `string`, and name them `ID`, `FirstName`, `LastName`, and
    `Designation`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the attribute `[DataContract]` to the class level to specify that the type
    defines or implements a data contract and is serializable by a serializer, such
    as `System.Runtime.Serialization.DataContractSerializer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the attribute `[DataMember]` to the properties that you want to be part
    of the data contract, and mark it to serializable by the `System.Runtime.Serialization.DataContractSerializer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You need to resolve the namespace `System.Runtime.Serialization`, in order
    to use the `DataContract` and `DataMember` attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/23cf7efd-0aed-4694-bff8-49ec52de8ffe.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here''s the complete code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Now, right-click on the Services folder, and follow the context menu entry Add
    | New Item... to create a new service definition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Add New Item dialog window, select the WCF Service as the template.
    Give it a name (in our case, it is `EmployeeService`), and click on the Add button,
    as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e3591510-bcd2-45f1-963b-a4a6e9a3c881.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will create three files under the `Services` folder: `IEmployeeService.cs`,
    `EmployeeService.svc`, and `EmployeeService.svc.cs`:![](img/cb63d9d2-ad5c-49e3-a0c7-7250736b0274.png)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From Solution Explorer, navigate to the `IEmployeeService.cs` file, and add
    the following `using` namespace declarations:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now replace the class definition with the following code snippet, which will
    have three operation contracts `GetEmployeeByID`, `GetEmployees`, and `InsertEmployee`.
    Mark the interface as `[ServiceContract]` and the methods as `[OperationContract]`.
    Here''s the code snippet for reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, from Solution Explorer, navigate to the `EmployeeService.svc.cs` file,
    and create a `static` member variable of type `List<Employee>`. Let''s name it
    `m_employees`, which will be used as a static data source of our demo application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement the interface `IEmployeeService`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/63c88383-011d-42fc-b5ca-aee91e3082bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Modify the method definitions to perform the operations as per the name/functionality.
    Let''s modify them, which will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! Your WCF service named `EmployeeService` is now ready to host,
    so that applications can consume it. To check whether the service can run properly,
    build the project and then right-click on the `EmployeeService.svc` file, from
    Solution Explorer, and click on `View in Browser (Browser_Name)`, which is View
    in Browser (Firefox) in our case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9813c78a-b358-41cb-807c-757633414345.png)'
  prefs: []
  type: TYPE_IMG
- en: This will start the service and show you the message Service is hosted on the
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A point to note is that if you are running the service from Visual Studio, it
    will require administrative permission to open the specified port and host the
    service. In case you haven't provided the admin privileges yet, please restart
    Visual Studio using Run as administrator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the service has been hosted on `localhost`, this will load the SVC file
    in a browser window, and it will look like the following screenshot, which tells
    us that the service is up and running without any issues:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a1179d76-7154-4cba-a153-c305e3ed60a3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Each service provides a **Web Services Description Language** (**WSDL**) that
    defines the public interfaces including the metadata, which is similar to **interface
    definition language** (**IDA**). Click on the link to generate the WSDL of the
    service. In case your browser does not show the generated WSDL on the screen,
    copy the link, and run it inside the Internet Explorer, which will give you the
    following XML output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b261c14-bf04-4b98-800a-afe3915c0890.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this simple WCF service, we have used few attributes. Let's learn more about
    each one of them.
  prefs: []
  type: TYPE_NORMAL
- en: The DataContract attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A data contract is a formal agreement between a client and a service that abstractly
    describes the data to be exchanged. In WCF, this is the most common way to serialize
    an object and make it ready to be available for passing between client and service.
    This is done by marking the class with the `[DataContract]` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is worth mentioning that the serialization is not restricted to exactly
    match the class name and/or the property names in the class. You can simply use
    the `DataContract` and `DataMember` attributes to define their names in serialization.
    For example, consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`[DataContract (Name = "Employee")]`'
  prefs: []
  type: TYPE_NORMAL
- en: '`public class EmployeeModel { ... }`'
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding code snippet, though the class name is `EmployeeModel`, the
    class will be exposed to serialization as `Employee` as the name mapping has been
    done using the `Name` property of the attribute.
  prefs: []
  type: TYPE_NORMAL
- en: The DataMember attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `[DataMember]` attribute, on the other hand, specifies that the member
    is part of a data contract and is serializable by the `DataContractSerializer`.
    You can use the following properties while defining the data member attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Name`: It defines the name of the data member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Order`: It sets the order of serialization and deserialization of the member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TypeId`: It sets a unique identifier for this attribute in the derived class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsRequired`: This property gets or sets a value that instructs the serialization
    that the member must be present during deserializing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EmitDefaultValue`: When defined, this property value is specified whether
    to serialize the default value of the data member'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should apply the `[DataMember]` attribute in conjunction with the `[DataContract]`
    attribute to identify the members of a type that are part of the data contract.
  prefs: []
  type: TYPE_NORMAL
- en: The ServiceContract attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `[ServiceContract]` attribute is used to define an interface that provides
    the service. A service should have at least one service contract, decorated by
    the `[ServiceContract]` attribute. The following properties can be used with the
    `ServiceContractAttribute`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ConfigurationName`: It specifies the name of the service element in the configuration
    file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Name`: This specifies the name of the contract in the WSDL element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Namespace`: This specifies the namespace of the contract in the WSDL element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SessionMode`: This specifies whether the contract requires a binding that
    supports sessions. It can have either of the following three values: `Allowed`
    (specifies that the contract supports the session), `NotAllowed` (specifies that
    the contract does not support the session), and `Required` (specifies that the
    contract does not require the session).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CallbackContract`: This property specifies the return contract in a duplex
    conversation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProtectionLevel`: This specifies the message-level security that an operation
    requires during runtime. It can be one of three types: `None` (only simple authentication),
    `Sign` (`Sign` data to help ensure data integrity), and `EncryptAndSign` (`Encrypt`
    and `Sign` data to ensure integrity and confidentiality of transmitted data).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HasProtectionLevel`: This indicates whether the `ProtectionLevel` property
    has been explicitly set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OperationContract attribute
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `[OperationContract]` attribute is used to define the methods of the service
    contract. This is placed on the methods that you want to include as part of the
    service contract. The following properties can be used to control the structure
    of the operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Action`: This property specifies the action that uniquely identifies the operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ReplyAction`: This specifies the action of the reply message of the operation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AsyncPattern`: This indicates that the operation can be called asynchronously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProtectionLevel`: This specifies the message-level security that an operation
    requires during runtime. It can be one of three types—`None` (only simple authentication),
    `Sign` (sign data to help ensure data integrity), and `EncryptAndSign` (encrypt
    and sign data to ensure integrity and confidentiality of transmitted data).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HasProtectionLevel`: This indicates whether the `ProtectionLevel` property
    has been explicitly set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsOneWay`: This property indicates that the operation consists of a single
    input message and has no associated output message.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsInitiating`: This specifies whether this operation can be the initial operation
    in a session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsTerminating`: This specifies whether WCF will attempt to terminate the current
    session after the operation completes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Self-hosting a WCF service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use a WCF service, you need to host it in a runtime environment, so that
    the service host can listen for requests from clients, direct those requests to
    the service, and send responses back to the client. Using the host, you can start
    and stop the service.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to self-host a service, you must create an instance of the `System.ServiceModel.ServiceHost`
    class and configure it with endpoints. This can be done in code or in a configuration
    file. Once the host is ready, any client can access the service by the URL specified.
  prefs: []
  type: TYPE_NORMAL
- en: Self-hosting can be done in any managed application, such as a console application,
    a Windows service, a Windows Forms application, or a **Windows Presentation Foundation**
    (**WPF**) application. In this recipe, we will learn how to self-host a WCF service
    in a console application and execute it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, let's launch Visual Studio with administrative privileges. Now,
    open the project `CH09.EmployeeService`, which we created in the previous recipe.
    Ensure that the project builds successfully, and that the service launches properly
    in the browser. Mark down the service URL for reference, which we will be using
    later in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to create a self-hosted console application:'
  prefs: []
  type: TYPE_NORMAL
- en: First, add a new project of type Console Application, inside the solution, and
    name it `CH09.SelfHostingDemo`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, right-click on the References node, and add the project reference of the
    service (`CH09.EmployeeService`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ae00c43b-79bb-419f-aba6-93ed95a2077f.png)'
  prefs: []
  type: TYPE_IMG
- en: Also add the assembly reference of `System.ServiceModel` into the console application
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From Solution Explorer, navigate to the `Program.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following `using` namespaces inside the class file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to define the service URL so that we can access it from the host.
    Create a static member variable inside the `Program.cs` class file, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Program` class contains a static `Main` method. Replace the definition
    with the following code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Build the solution, and run the console application. You will see the following
    output in the console output window:![](img/eb4a7010-2170-43d6-ad0e-d267f1a98199.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The service is now hosted through the host process. Press the *Enter* key to
    stop the service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To host the service, the host application uses the `ServiceHost` class from
    the `System.ServiceModel` namespace. It gets instantiated based on the type of
    service that you have implemented. In the preceding example, the `ServiceHost`
    class creates an object of `EmployeeService.Services.EmployeeService` and removes
    it from memory whenever the service completes execution.
  prefs: []
  type: TYPE_NORMAL
- en: If you check the `ServiceHost` object in the **QuickWatch Window**, you will
    notice that the object exposes several properties. The `BaseAddress` property
    defines the URL of the service, which maintains a runtime socket listener that
    listens to the port for the created service for any incoming requests. Once it
    receives any request, it parses the whole message passed to it and calls the service
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s a screenshot of the QuickWatch Window, showing the number of properties
    exposed by the `ServiceHost` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/80d8cdb1-8a4c-45bd-b26c-0977d799e827.png)'
  prefs: []
  type: TYPE_IMG
- en: The `serviceHost.AddServiceEndpoint` adds a service endpoint to the hosted service
    with a specified contract, binding, and endpoint address. You can use any binding
    type based on your requirement, but here we have used `BasicHttpBinding` to create
    the service endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: In case of `BasicHttpBinding`, SOAP messages are transferred. The SOAP message
    contains a well-defined envelop with a header and body of the message inside it.
    When a client calls the service, the `ServiceHost` class parses the message and
    calls the service by creating the context.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see the endpoints used by the `ServiceHost` object, expand the `Description`
    property in the QuickWatch Window and navigate to `Endpoints`. Expand the first
    endpoint of the service and check the `Address`, `Binding`, `Contract` ("ABC")
    properties of it. This will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d867da9d-5923-41cd-bf38-c01c8882bafd.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that the `Address` points to the `BaseAdress` of the service, the
    `Binding` denotes the `BasicHttpBinding` that we created, and the `Contract` exposes
    service `Name`, `ConfigurationName`, `ContractType`, `SessionMode`, `ProtectionLevel`,
    `HasProtectionLevel`, and other properties.
  prefs: []
  type: TYPE_NORMAL
- en: When you are ready, the `serviceHost.Open()` method starts the service. It causes
    the communication object to transition from the created state to the opened state.
    When you are done, calling the `serviceHost.Close()` method stops the service.
    This causes the communication object to transition from its current state to the
    closed state.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you want your service object to be reused, you can add a `ServiceBehavior`
    attribute to the service class, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'When you apply this attribute, it specifies the internal execution behavior
    of the service contract implementation. The specified `InstanceContextMode` can
    be one of three types:'
  prefs: []
  type: TYPE_NORMAL
- en: '**PerSession**: A new `System.ServiceModel.InstanceContext` object is created
    for each session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**PerCall**: A new `System.ServiceModel.InstanceContext` object is created
    prior to and recycled subsequent to each call. If the channel does not create
    a session, this value behaves as `PerCall`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Single**: Only one `System.ServiceModel.InstanceContext` object is used for
    all incoming calls and is not recycled subsequent to the calls. If a `service`
    object does not exist, a new one will be created.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t have administrative rights on your system, the application will
    crash with `System.ServiceModel.AddressAccessDeniedException`, saying that the
    HTTP could not register the URL. The error log will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6fad9ef9-32d3-467a-aa69-0113308ecbb3.png)'
  prefs: []
  type: TYPE_IMG
- en: If you encounter this error, run the application under admin privileges. If
    you are running the application directly from Visual Studio, relaunch Visual Studio
    with admin privileges. To do so, right-click on the Visual Studio icon and click
    on Run as administrator.
  prefs: []
  type: TYPE_NORMAL
- en: Hosting a WCF service in an IIS server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another way to host a WCF service is in an **IIS** (**Internet Information Services**).
    It requires a physical file with a `.svc` extension to host the service properly.
    Unlike the previous recipe, you won't need to write any code to create the instance
    of `ServiceHost`. IIS automatically creates it for you while hosting the service.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to publish an already created service to host
    inside the IIS server of Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To get started, launch the Visual Studio IDE with administrative rights. To
    do so, right-click on the icon and click Run as administrator. Now open the existing
    project `CH09.EmployeeService`, which we have created earlier. Alternatively,
    you can also open the solution.
  prefs: []
  type: TYPE_NORMAL
- en: To proceed further, we assume that you are familiar with IIS and understand
    how to use the IIS management tool to create and manage IIS applications.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s follow these steps to host our service in an IIS server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, you need to check whether the **IIS** (**Internet Information Services**)
    is already installed on the system, where you are going to host the service. To
    check this, open the Control Panel and navigate to Turn Windows features on or
    off, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e2fb6da1-0573-4f91-84b2-fd3506c2d978.png)'
  prefs: []
  type: TYPE_IMG
- en: From the Windows Features dialog, which pops up on the screen, make sure that
    the Internet Information Services feature is checked. If not, check it, and click
    OK. This will install the IIS server on that system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, click on Start (![](img/1e167e22-1ea5-4da5-942c-1aeaac7192bc.png)), type
    `inetmgr`, and click the Internet Information Services (IIS) Manager app shortcut
    to launch it. Make sure that the Default Web Site is up and running. In the next
    steps, we will be deploying our service on this website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/78545579-f1a9-41ce-b429-693f46e6bfce.png)'
  prefs: []
  type: TYPE_IMG
- en: Once the IIS is installed (in case it was not already) and the Default Web Site
    in IIS is up and running, navigate back to Visual Studio.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'From the Solution Explorer, right-click on the service project (`CH09.EmployeeService`)
    node, and click Publish:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b564bb0d-4ba0-40cb-9edb-3414fdb72888.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the publishing wizard inside Visual Studio. Navigate to the
    Publish tab, select publishing template as IIS, FTP, etc, and click the Publish
    button, demonstrated as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8cfb2202-4f2c-48c6-9fa5-6d16300ac591.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This will open the Publish dialog. Make sure that the Connection tab is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 1\. Select Web Deploy as the publishing method type.
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Enter the name of the server. In our case, as we are deploying it to the
    same system, it will be `localhost`.
  prefs: []
  type: TYPE_NORMAL
- en: 3\. Enter the name of the site where we are going to deploy our service. In
    our case, it is `Default Web Site`. To deploy it in a specific web app inside
    the website, enter the name of the web app after the site name. For example, to
    deploy in the `MyApp` web application inside the `Default Web Site`, the site
    name here will be `Default Web Site/MyApp`.
  prefs: []
  type: TYPE_NORMAL
- en: 4\. Enter the User name and Password of your web server, where you are going
    to deploy it. In our case, as it is `localhost`, we will not need to enter any
    credentials. Those two fields will be by default disabled.
  prefs: []
  type: TYPE_NORMAL
- en: 5\. Click on Validate Connection to confirm about the publishing details that
    you entered. On success, you will see a green tick mark beside the Validate Connection
    button.
  prefs: []
  type: TYPE_NORMAL
- en: Once done, click on Next to proceed to the Settings page:![](img/e055c838-79ac-4968-ae2a-44fef73028da.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the Settings page, select Release as the Configuration. Optionally, select
    File Publish Options based on your requirement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are done, click Save to start the publishing:![](img/9e546c87-6f91-46fb-b310-3aecb9761ce0.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the Visual Studio IDE builds the solution and completes the deployment
    to the selected website, navigate back to the Internet Information Services (IIS)
    Manager application (`inetmgr`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refresh the Default Web Site node, which will now list two folders, named bin
    and Services. Click on the Services folder, and switch to Content View. This will
    list the `EmployeeService.svc` file, which is present inside it. Here''s a screenshot
    of this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/deee5118-56df-4cbd-a5b6-10cc2ad57297.png)'
  prefs: []
  type: TYPE_IMG
- en: As shown in the preceding screenshot, right-click on the `EmployeeService.svc`
    file, and then click Browse from the context menu entry. Alternatively, you can
    click on the Browse link present at the right-side Actions pane.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will open the service URL in the browser window as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f1270073-7a3b-4ad7-894d-dd35b14ccd70.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: IIS hosting is integrated with ASP.NET and uses the features such as process
    recycling, process health monitoring, message-based activation, and more. IIS
    also offers integrated manageability, which makes it an enterprise-grade server.
  prefs: []
  type: TYPE_NORMAL
- en: 'To host a service in IIS, the IIS needs to be configured properly. For hosting
    in IIS, no additional code needs to be written. The WCF services hosted in IIS
    are represented as `.svc` files inside the IIS application. A `.svc` file contains
    a WCF-specific processing directive, that is, an `@ServiceHost`, which creates
    the service host and allows the hosting structure of the WCF service to activate
    in response to incoming messages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The value of the `Service` attribute is the fully qualified CLR type name (in
    our case, it's `CH09.EmployeeService.Services.EmployeeService`) of the service
    implementation. The `CodeBehind` attribute defines the relative path of the code
    behind the file of the `.svc`, which is `EmployeeService.svc.cs` in our example.
  prefs: []
  type: TYPE_NORMAL
- en: When you deploy a service, the precompiled `.dll` file gets deployed in the
    application's `bin` directory and updates only when a latest version of the class
    library gets deployed.
  prefs: []
  type: TYPE_NORMAL
- en: The uncompiled source file gets deployed in the application's `App_Code` directory.
    When the application gets the first request, these uncompiled source files dynamically
    load into the memory. Any changes to these deployed source files causes the entire
    application to be recycled. A fresh recompilation happens automatically when a
    new request happens to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating a WCF service in a WPF application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you create a WCF service, you probably would like to integrate it into
    a client application. But before that, you will have to create a WCF client proxy,
    so that you can communicate with the service through the WCF client proxy.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to create the proxy client and give a call
    to the service to pass messages between the service and the client.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before going into the steps to integrate the service, we need to create a client
    application. Open your Visual Studio IDE, and create a new WPF project. Name it
    `CH09.ClientDemo`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create the service proxy and integrate the service call
    in the client application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click on the project node (`CH09.ClientDemo`), and follow the context
    menu path Add | Service Reference..., which will open the Add Service Reference
    dialog on the screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/749d3780-5c3e-4816-83ad-bb5f8e3af136.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the Add Service Reference dialog, enter the service URL (`http://localhost:59795/Services/EmployeeService.svc`)
    inside the Address field and click on the Go button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/43695922-6890-4c20-bb4e-905339b097db.png)'
  prefs: []
  type: TYPE_IMG
- en: This will resolve the service address and show the details about it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'As shown in the following screenshot, enter `EmployeeServiceReference` as the
    Namespace for the service proxy and click OK:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/496125a6-c623-4986-942a-aa49440dbfcc.png)'
  prefs: []
  type: TYPE_IMG
- en: This will create the service proxy as Connected Services under the project:![](img/ead9084e-c956-4066-b86b-c8d6ac0fa148.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the project to make sure that there are no compilation issues.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the build gets succeeded, navigate to the `MainWindow.xaml.cs` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a dependency property of type `ObservableCollection<Employee>`, and
    name it as `Employees`. The property implementation will look as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Now, resolve the reference of the `Employee` class, which will add `CH09.ClientDemo.EmployeeServiceReference`
    as the `using` namespace:![](img/1099f510-f417-4755-83a8-364efd49cd34.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Make sure the following `using` namespaces are added to the class file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Inside the class, create the following static instance of the proxy client,
    so that we can call the service APIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, add the following two methods inside the class, and make sure that the
    methods are marked as `async`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: From Solution Explorer, navigate to the `MainWindow.xaml` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give a name to the `Window` instance by adding the `x:Name="window"` attribute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Split the default `Grid` into two rows, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the first row of the `Grid` panel, add a `DataGrid`, and create a data binding
    between the `ItemsSource` property and the `Employees` collection. This will populate
    the `DataGrid` with the values from the `Employees` collection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set `AutoGenerateColumns="False"`, `CanUserAddRows="False"`, and `CanUserDeleteRows="False"`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have already asked the `DataGrid` not to generate the columns automatically,
    we need to manually create them, based on the need. In this demonstration, we
    will only display the `ID`, `Name`, and `Designation` columns in the `DataGrid`.
    Let''s add the following columns, among which, the Name column will have a multi-binding
    with the `FirstName` and `LastName` properties of the `Employee` class to display
    the full name of the employee. Here''s the code for your reference:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In the second row of the `Grid` panel, let''s add a horizontal `StackPanel`
    with two buttons in it. Label them as Refresh and Add. Also, expose the `Click`
    event of both the two buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the code behind the file of the `MainWindow.xaml` (that is, in `MainWindow.xaml.cs`),
    write the `Click` event implementation for both the two buttons. The `OnRefreshClicked`
    event will call the `RefreshListAsync()` method to fetch the employees list. The
    `OnAddClicked` event will call the `AddNewEmployeeAsync()` method to give a call
    to the service to insert a new employee record, and then call the `RefreshListAsync()`
    method to fetch the current employee list from the service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Let's build the project and run the application. Make sure that the service
    is already running and accessible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see the following application UI on the screen:![](img/8309d3cc-a058-42c3-b677-a00a0eac3d3b.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add button. This will create a new employee record and pass it to
    the service to store in the database, which is the static `m_employees` instance
    in our case.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After inserting the record, it will again give a call to the service to fetch
    the newly inserted details and populate the `DataGrid` in the UI. Clicking the
    Add button multiple times will add the number of records and fill the `DataGrid`
    accordingly:![](img/ce168531-a457-445d-b279-c681600ade72.png)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The WCF client proxy can be generated manually by using the `SVCUtil.exe` (**Service
    Model Metadata Utility Tool**). It is a command-line tool for generating the code
    from the service metadata. The following command can be used to generate the proxy
    code: `svcutil.exe <Service URL>`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to create the proxy client for the service that we created earlier,
    you can enter the following command in a console window:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can also generate the client proxy from Visual Studio. As
    demonstrated previously, the Add Service Reference feature generates the proxy
    code automatically. Once you click the Go button after inserting the service address,
    the dialog displays a list of services available at the address specified. It
    starts generating the code when you click the OK button.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, the **Service Model Metadata Utility Tool** and the Add Service
    Reference dialog of Visual Studio (you can use either of them) generates the following
    WCF client class (`EmployeeServiceClient`) for our service, which inherits from
    the generic `System.ServiceModel.ClientBase<TChannel>` class and implements the
    `CH09.ClientDemo.EmployeeServiceReference.IEmployeeService` interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the service proxy gets created, you can create the instance of the service
    client and call the methods of the service. In our example, we created the following
    service client instance and marked it as `static`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The client consists of two API method types for each operation contract that
    the service has exposed. One of them is a synchronous method, whereas the other
    is asynchronous. For example, you could see `GetEmployees()` and `GetEmployeesAsync()`
    methods, as listed in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8f1aa35b-55f0-4bfe-8c21-0f8c7181091d.png)'
  prefs: []
  type: TYPE_IMG
- en: When you want to call the service in a synchronous way, call the `GetEmployees()`
    method. In case you want to operate in asynchronous mode, call the `GetEmployeesAsync()`
    method. Similarly, to get the employee details by ID, you can select between `GetEmployeeByID`
    and `GetEmployeeByIDAsync`, based on synchronous and asynchronous modes. It is
    a similar case for other service methods.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A WCF service client may throw one or more exceptions, which you must handle
    in your code. Some of the most common exceptions are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SocketException`: This may occur when an existing connection was forcibly
    closed by the remote host'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CommunicationException`: This may occur when the underlying connection was
    unexpectedly closed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CommunicationObjectAbortedException`: This may occur when the socket connection
    was aborted due to an error processing your message, a timeout while processing
    the request, or an underlying network issue'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
