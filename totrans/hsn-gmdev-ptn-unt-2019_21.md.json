["```cs\nusing UnityEngine.Events;\nusing System.Collections.Generic;\n\npublic class EventBus : Singleton<EventBus>\n{\n    private Dictionary<string, UnityEvent> m_EventDictionary;\n\n    public override void Awake()\n    {\n        base.Awake();\n        Instance.Init();\n    }\n\n    private void Init()\n    {\n        if (Instance.m_EventDictionary == null)\n        {\n            Instance.m_EventDictionary = new Dictionary<string, UnityEvent>();\n        }\n    }\n\n    public static void StartListening(string eventName, UnityAction listener)\n    {\n        UnityEvent thisEvent = null;\n        if (Instance.m_EventDictionary.TryGetValue(eventName, out thisEvent))\n        {\n            thisEvent.AddListener(listener);\n        }\n        else\n        {\n            thisEvent = new UnityEvent();\n            thisEvent.AddListener(listener);\n            Instance.m_EventDictionary.Add(eventName, thisEvent);\n        }\n    }\n\n    public static void StopListening(string eventName, UnityAction listener)\n    {\n        UnityEvent thisEvent = null;\n        if (Instance.m_EventDictionary.TryGetValue(eventName, out thisEvent))\n        {\n            thisEvent.RemoveListener(listener);\n        }\n    }\n\n    public static void TriggerEvent(string eventName)\n    {\n        UnityEvent thisEvent = null;\n        if (Instance.m_EventDictionary.TryGetValue(eventName, out thisEvent))\n        {\n            thisEvent.Invoke();\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class EventPublisher : MonoBehaviour\n{\n    void Update()\n    {\n        if (Input.GetKeyDown(\"s\"))\n        {\n            EventBus.TriggerEvent(\"Shoot\");\n        }\n\n        if (Input.GetKeyDown(\"l\"))\n        {\n            EventBus.TriggerEvent(\"Launch\");\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Rocket : MonoBehaviour\n{\n    private bool m_IsQuitting;\n    private bool m_IsLaunched = false;\n\n    void OnEnable()\n    {\n        EventBus.StartListening(\"Launch\", Launch);\n    }\n\n    void OnApplicationQuit()\n    {\n        m_IsQuitting = true;\n    }\n\n    void OnDisable()\n    {\n        if (m_IsQuitting == false)\n        {\n            EventBus.StopListening(\"Launch\", Launch);\n        }\n    }\n\n    void Launch()\n    {\n        if (m_IsLaunched == false)\n        {\n            m_IsLaunched = true;\n            Debug.Log(\"Received a launch event : rocket launching!\");\n        }\n    }\n}\n```", "```cs\nusing UnityEngine;\n\npublic class Cannon : MonoBehaviour\n{\n    private bool m_IsQuitting;\n\n    void OnEnable()\n    {\n        EventBus.StartListening(\"Shoot\", Shoot);\n    }\n\n    void OnApplicationQuit()\n    {\n        m_IsQuitting = true;\n    }\n\n    void OnDisable()\n    {\n        if (m_IsQuitting == false)\n        {\n            EventBus.StopListening(\"Shoot\", Shoot);\n        }\n    }\n\n    void Shoot()\n    {\n        Debug.Log(\"Received a shoot event : shooting cannon!\");\n    }\n}\n```"]