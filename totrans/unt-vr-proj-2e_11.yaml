- en: Animation and VR Storytelling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The stories we tell, and how we tell them, say a lot about who we are and what
    we will become. Storytelling between humans is as primal as any human activity,
    the basis of interpersonal communications, mythology, historical record, entertainment,
    and all of the arts. VR is emerging as one of the newest, and potentially most
    profound, storytelling media formats.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at 360-degree media, which itself is becoming
    its own form of VR storytelling, especially for nonfictional documentary, capable
    of transmitting human experience and creating immersive empathy for humanitarian
    crises. Many of the tools and lessons we cover in this chapter can also be used
    with 360 media, but we're going to focus on 3D computer graphics and animation
    here.
  prefs: []
  type: TYPE_NORMAL
- en: For this project, we are going to create a little VR experience, a simplistic
    story about a bird who gains its wings and learns to fly.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Importing and using external models and animations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Unity Timelines to activate and animate objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Animation editor window for editing property keyframes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling Animation Clips with an Animation Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making the story interactive
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Composing our story
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*You start in a dark scene and notice a small sapling in the ground in front
    of you. It starts to grow into a tree. As dawn breaks, a bird''s nest appears,
    and we notice it has an egg in it. The egg begins to shake, and then hatches.
    A baby bird emerges, hops around, grows, and tests its wings. Finally, in daylight,
    it flies away to freedom.*'
  prefs: []
  type: TYPE_NORMAL
- en: Our story is about birth, growth, spreading your wings (literally and figuratively),
    and moving on. We will start with a music soundtrack and animate our graphics
    based on its parts.
  prefs: []
  type: TYPE_NORMAL
- en: We are using free, off-the-shelf assets. Of course, you can use your own music
    and graphics, but we'll assume you're following along using the ones we have selected,
    which are all available online for free (links are given). As an instructive project,
    it's minimalistic and not embellished with effects that one might expect of a
    polished product. But you'd be very proud of your 9-year old cousin or nephew
    if they made it!
  prefs: []
  type: TYPE_NORMAL
- en: 'The soundtrack we will use is a rendition of The Beatles and Paul McCartney
    song, "Blackbird". (A download link is in the next section, and a copy is included
    with the files for this chapter for convenience.) Based on our mp3 recording of
    the song, we sketched out a rough timeline plan of our VR experience on a chart,
    shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cac93114-28f5-41b7-871f-7af56d20d5a7.png)'
  prefs: []
  type: TYPE_IMG
- en: As indicated, the entire song is 165 seconds (2:45).  It starts with a 35-second
    instrumental intro, then verse one and verse two (also 35 seconds), a 25-second
    instrumental, and then verse three is 35 seconds. We'll use this to divide our
    story into five segments.
  prefs: []
  type: TYPE_NORMAL
- en: Plenty of other features ought to be planned out as well. The scene lighting,
    for example, will start in the dark of night and gradually lighten the sky into
    dawn and then daytime.
  prefs: []
  type: TYPE_NORMAL
- en: Gathering the assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As mentioned, we''re going to build our story from a variety of sources of
    free and simplistic assets. I recommend you download and install each of them
    now (or your own substitutions) so they''re accessible as we work:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Music: The Beatles and Paul McCartney song, "Blackbird" performed by guitarist
    Salvatore Manalo. Mp3 download:  [http://mp3freeget4.online/play/the-beatles-paul-mccartney-blackbird-cover/chSrubUUdwc.html](http://mp3freeget4.online/play/the-beatles-paul-mccartney-blackbird-cover/chSrubUUdwc.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scene and tree: Nature Starter Kit, [https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962](https://assetstore.unity.com/packages/3d/environments/nature-starter-kit-1-49962)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nest and egg: Use the `NestAndEgg` prefab file provided with this book (source:
    tutorial using Cinema 4D: [https://www.youtube.com/watch?v=jzoNZslTQfI](https://www.youtube.com/watch?v=jzoNZslTQfI)
    , .c4d file download, [https://yadi.sk/d/ZQep-K-AMKAc8](https://yadi.sk/d/ZQep-K-AMKAc8))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Living Birds: [https://assetstore.unity.com/packages/3d/characters/animals/living-birds-15649](https://assetstore.unity.com/packages/3d/characters/animals/living-birds-15649)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wispy Skybox: [https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737 ](https://assetstore.unity.com/packages/2d/textures-materials/sky/wispy-skybox-21737)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the nest and egg object we are using is modified from the one found
    online. That was in `.c4d` format, and we have converted it to `.fbx`, packaged
    them into a prefab, and made a few other changes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the initial scene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to make a simple, minimalist scene using a plane for the ground
    and some rocks from the Nature Starter Kit, a bird''s nest with an egg, and a
    bird:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new scene (File | New Scene) and name it "Blackbird" (File | Save Scene
    As)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a 3D Plane named `GroundPlane`, reset its Transform, then Scale it to
    (`10, 10, 10`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Material named `GroundMaterial`, set its Albedo color to an earthy
    brown (such as `#251906ff`), and drag the material onto the plane
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Main Camera Position to (`0, 2, -3`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can replace `Main Camera` with the `MeMyselfEye` camera rig we've been using
    throughout the book, but it is not necessary in this project as we will not be
    using device-specific input or other features. The `Main Camera` will provide
    a sufficient VR camera based on the SDK you've selected in Player Settings.
  prefs: []
  type: TYPE_NORMAL
- en: We are using a simple ground plane, as it gives the aesthetic we want. But this
    could be a good opportunity for you to explore the Unity Terrain system. This
    is another rich and very powerful topic, where you can "paint" complex landscapes
    with trees and grasses. See the manual at [https://docs.unity3d.com/Manual/script-Terrain.html](https://docs.unity3d.com/Manual/script-Terrain.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add a tree and some rocks:'
  prefs: []
  type: TYPE_NORMAL
- en: From the `Assets/NatureStarterKit/Models/` folder, drag the Tree into the scene.
    Reset its Transform, so it's at the origin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a few rocks near the tree, move them so they're partially buried below the
    ground. You might put these under an Empty game object named `Environment`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Wind Zone (Create | 3D Object | WindZone) , so the Tree object responds
    to wind and rustles its leaves.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The rocks in my scene are placed as follows (all at Scale `100`):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Prefab | Position |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `rock03` | `(2.9, -0.6, -0.26)` |'
  prefs: []
  type: TYPE_TB
- en: '| `rock03` | `(2.6, -0.7, -3.6)` |'
  prefs: []
  type: TYPE_TB
- en: '| `rock04` | `(2.1, -0.65, -3.1)` |'
  prefs: []
  type: TYPE_TB
- en: '| `rock01` | `(-6, -3.4, -0.6)` |'
  prefs: []
  type: TYPE_TB
- en: '| `rock04` | `(-5, -0.7, 3.8)` |'
  prefs: []
  type: TYPE_TB
- en: 'Next, we''ll add the nest:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a copy of the NestAndEgg model into the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale and Position it on the ground so it's in easy view, near the tree, and
    not too small. We chose Position (`0.5, 0.36, -1.2`) and Scale (`0.2, 0.2, 0.2`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'And add a bird. The Living Birds package doesn''t have a blackbird, but it
    does have a bluejay, which is close enough:'
  prefs: []
  type: TYPE_NORMAL
- en: From the Project `Assets/living birds/resources/` folder, drag the `lb_blueJayHQ`
    prefab into the Hierarchy. For convenience, rename it `Bluejay`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale and Position it so it appears full grown and perched on the edge of the
    nest. We chose Scale (`8, 8, 8`), Position (`0.75, 0.4, -1.25`), and Rotation
    (`0, 0, 0`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The bird is inserted into the scene in a T pose. It has animations attached,
    which we'll control later in this project. Like most character animations, it
    runs an `Idle` animation initially. (Note, don't rotate the bird object, it messes
    up the flying animations.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember to press Play and check how it looks in VR. It''s always much different
    within VR than the view you see on the flat screen. Our scene and hierarchy is
    shown in the following screen capture. You many also want to adjust the Main Camera
    position now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7cde9ff0-46d3-4cbf-82e2-e59b954c19d7.png)'
  prefs: []
  type: TYPE_IMG
- en: Timelines and Audio tracks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we planned out our movie using a graph paper timeline. Unity provides
    the tools to implement that almost directly. This Timeline feature was introduced
    with Unity 2017.
  prefs: []
  type: TYPE_NORMAL
- en: Timelines consist of one or more tracks that play over time. It's like an Animation
    (which controls the properties of a single game object), but Timelines work with
    many different objects and different types of tracks. As we'll see and explain
    later, Timelines can have Audio Tracks, Activation Tracks, Animation Tracks, and
    Control Tracks.
  prefs: []
  type: TYPE_NORMAL
- en: Timelines are a type of Unity *Playable*. Playables are runtime objects that
    "play" over time, updating each frame based on its prescribed behavior. Animations
    are playables too. For more details, see [https://docs.unity3d.com/ScriptReference/Playables.Playable.html](https://docs.unity3d.com/ScriptReference/Playables.Playable.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Presently we''ll add a Timeline to the project and add an Audio Track. To create
    the Timeline object and open it in the Timeline Editor window, do the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Hierarchy, create an Empty game object and name it `BlackbirdDirector`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Timeline Editor (Window | Timeline).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the window you will see a message "*To begin a new timeline with BlackbirdTimeline,
    create a Director component and a Timeline asset*" with a Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the Create button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are then prompted to save a new Playable asset in your Project *Assets*
    folder. Name it `BlackbirdTimeline`. Press Save.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'At this point, you may have noticed a few important things just happened:'
  prefs: []
  type: TYPE_NORMAL
- en: The `BlackbirdTimeline` asset was created in the `Asset` folder you specified
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `Playable Director` component was added to the `BlackbirdDirector` game object,
    associating it with that `BlackbirdTimeline`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `Timeline Editor` window is opened for the `BlackbirdTimeline`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next screenshot shows the `BlackbirdDirector` inspector with its `Playable
    Director` component. A Playable Director component controls when and how a Timeline
    instance plays, including whether to Play On Awake, and Wrap Mode (what to do
    when the Timeline is done playing: Hold, Loop, or None):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7e24ab47-8335-48e6-93b8-1aea94c1aab3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the Timeline Editor window for the `BlackbirdTimeline`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/43c56e6a-8524-4cfc-a2e4-2b2fc39b9bbb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s now add an Audio Track to the timeline, with our Beatles song:'
  prefs: []
  type: TYPE_NORMAL
- en: Locate the mp3 file in your Project Assets, and drag it directly onto the Timeline
    Editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press Play to play your scene as normal and now the music should start playing
    as well
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is the Timeline Editor now containing the Audio Track:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/714577ec-8e8b-48fd-9963-c36c62d52319.png)'
  prefs: []
  type: TYPE_IMG
- en: The white vertical cursor, or *Playhead*, indicates the current time frame.
    The default scale is Frames, but in the previous screenshot we have already changed
    it to Seconds (using the gear-icon in the upper right). You can see this clip
    is set start at `0` and continues to about 165 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: You can scale the view using the scroll wheel on your mouse. View all by pressing
    "A" on the keyboard. When the Timeline contains multiple tracks, you can focus
    on a specific clip by pressing "F" on the keyboard.
  prefs: []
  type: TYPE_NORMAL
- en: You may notice in the upper left of the Timeline Editor are preview controls.
    These let you play a preview of the Timeline itself, rather than the whole scene
    using the usual Editor Play button.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, at the time of this writing, the Timeline preview play mode does
    not play audio clips. You need to use the Editor Play mode for audio.
  prefs: []
  type: TYPE_NORMAL
- en: In this scene, we decided to make the music to be ambient audio. The audio will
    play in 2D mode if no audio source is selected. If you want to play it as spatial
    audio, emanating from a specific location in the scene, you should create an audio
    source and put that in the timeline track instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using a Timeline to activate objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We just added an Audio Track to the Timeline. Another type of Timeline track
    is an Activation Track. Associated with a specific game object, an Activation
    Track with enable or disable that game object at the specified times.
  prefs: []
  type: TYPE_NORMAL
- en: According to our plan, when the timeline starts, the bird's nest will be hidden
    (`NestAndEgg` object). At the 35-second mark, it becomes enabled. Also, when the
    nest is first enabled, it should have the `WholeEgg`. Then at the 80-second mark,
    it is hidden and the `HatchedEgg` is enabled instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `NestAndEgg` game object hierarchy, as shown here, contains the `Nest`
    itself, a `WholeEgg` object, and a `HatchedEgg` (which has the two eggshell halves):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be1a1d2c-c7a4-46cd-91ef-81b52a15f220.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add the activation sequence to the Timeline now:'
  prefs: []
  type: TYPE_NORMAL
- en: With `BlackbirdDirector` selected in Hierarchy, drag the `NestAndEgg` object
    from Hierarchy into the Timeline Editor window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A menu pops up, asking what type of track to add; choose Activation Track.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A small rectangular track marker is added to the track. Click and drag it into
    place.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position and size the track to start at `35:00` and end at`165:00`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now for the eggs. Although the egg models are children of NestAndEgg, they
    can be activated separately from the parent (of course, only when the parent itself
    is already enabled):'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `WholeEgg` object from Hierarchy onto the Timeline as an Activation
    Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it to start at `35:00` and end at `60:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `HatchedEgg` object from Hierarchy onto the Timeline as an Activation
    Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it to start at `60:00` and end at `165:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Similarly, activate the bird when the egg hatches, at the 60-second mark:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `Bluejay` object from Hierarchy onto the Timeline as an Activation
    Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it to start at `35:00` and end at `60:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `HatchedEgg` object from Hierarchy onto the Timeline as an Activation
    Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position it to start at `60:00` and end at `165:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Timeline with Activate Tracks now looks like the following. You can see,
    on the left, each track has an object slot containing the game object being controlled
    by the track.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/65848b58-5360-41d9-ba45-4b83b0745a8d.png)'
  prefs: []
  type: TYPE_IMG
- en: Using Preview Play (control icons in the upper left of the Timeline Editor)
    you can play and review these tracks. You can scrub through the time frames by
    dragging the white Playhead cursor. You will see the nest, eggs, and bird activate
    and deactivate as specified.
  prefs: []
  type: TYPE_NORMAL
- en: Recording an Animation Track
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you would expect, in addition to audio and activation tracks, Timelines can
    include animation tracks. Unity's animation features have evolved over the years
    and Timeline greatly simplifies basic animation capabilities within Unity. You
    can create and edit animations directly within Timeline without having to create
    separate Animation Clips and Animator Controllers. These we will get to later
    in this chapter. For now, we will start simple, animating just a few Transform
    parameters on the tree and the nest.
  prefs: []
  type: TYPE_NORMAL
- en: A growing tree
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to add an animation of the tree growing from small (scale `0.1`) to
    full size, from `0` to `30` seconds in the Timeline. We do this by adding an Animation
    Track for the Tree, and then recording the parameter values at each keyframe time:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure `BlackbirdDirector` is selected in Hierarchy and the Timeline Editor
    window is open
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Tree` from Hierarchy into the Timeline window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Animation Track as the type of Track we are adding
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, we can begin recording the keyframes:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensure the Playhead cursor is set to `0:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the red Record button on the Tree track in Timeline to begin recording
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Tree` in Hierarchy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set its Scale to (`0.1, 0.1, 0.1`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Slide the Playhead to the 30-second mark
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With Tree still selected in Hierarchy, set its Scale to (`1, 1, 1`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the blinking red Record button again to stop recording
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the small graph icon to reveal the animation curve, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22de5da0-dc8f-4edd-b986-3a584ddd529b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see, our Timeline now has an Animation Track that references the `Tree`
    game object. It has two keyframes, starting at `o` and ending at `30` seconds.
    Unity fits a gentle curve to ease in and ease out the transition between the polemic
    key values.
  prefs: []
  type: TYPE_NORMAL
- en: When you grab and slide the Playhead cursor across the timeline curve, you can
    see the tree change size in your Scene window. If you press the Preview Play icon,
    you can play the animation.
  prefs: []
  type: TYPE_NORMAL
- en: A growing bird
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Repeat the previous exercise, this time growing the Bluejay. Scale it from a
    baby bird (Scale = `1`) to full size (Scale = `8`), for 10 seconds between the `60`
    and `70`-second marks.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Animation editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next, we'll create another animation track, to animate the nest so it starts
    positioned in the grown tree and then drifts slowly to the ground, wafting like
    a falling leaf. We want it to exhibit a gentle rocking motion. This is a little
    more complicated than the simple two-keyframe animation we just did, so we'll
    do our work in a separate Animation Window instead of the narrow track band on
    the Timeline Editor. It will animate from 0:35 to 0:45.
  prefs: []
  type: TYPE_NORMAL
- en: Animations are based on Keyframes. To animate a property, you create a Keyframe
    and define the property values for that frame in time. In the previous example,
    we had just two Keyframes, for the start and end Scale values. Unity fills in-between values
    with a nice curve. You can insert additional Keyframes, and edit the curve shape.
  prefs: []
  type: TYPE_NORMAL
- en: A wafting nest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s assume your scene already has the nest positioned on the ground, where
    we want it to end up with the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `NestAndEgg` object from Hierarchy into the Timeline window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Animation Track as the type of track.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Playhead cursor to `35:00`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that the Record icon will be disabled when the object is inactive. The
    Playhead must be within the object's Activation track's Active range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the Record icon for the NestAndEgg Animation Track to begin recording.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `NestAndEgg` object in Hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the current Transform values to the clipboard (in Inspector, select the
    gear-icon on the Transform component, and Copy Component).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene window, ensure the Move gizmo is presently selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Reposition the nest up in the Tree. Position Y = `5` works for me.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Slide the Playhead to `45:00`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the NestAndEgg Inspector, click the Transform's gear icon and Paste Component
    Values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the blinking red Record button again to stop recording.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Having defined an initial Animation recording, we can now work on it in an
    Animation editor window:'
  prefs: []
  type: TYPE_NORMAL
- en: On the track, click the little menu icon in its upper right
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Edit in Animation Window, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6c9174a3-cad6-4611-9439-6f879a3ef26c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Animation Window has two view modes: Dopesheet and Curves. The Dopesheet
    view lets you focus on the Keyframes for each property. The Curves view lets you
    focus on the transitions between Keyframes.'
  prefs: []
  type: TYPE_NORMAL
- en: The goal is to animate a subtle floating action, where the Nest rocks from side
    to side (X and Z axes) and rotates lightly on each of the axes. To do this, first
    we'll "anchor" the Nest at the beginning, middle and end of the fall. (We already
    have the begin and end positions.) Then, we'll add a couple more keyframes  with
    arbitrary values to implement the gentle motion.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the Dopesheet view, we''re first going to ensure we have keyframes at
    the start and end times, and one in between. Add keyframes at 35, 40, and 45 seconds
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: If not present, add Rotation properties too (Add Property | Transform | Rotation
    | "+")
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Position the Playhead at the start of our animation (`35:00`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add Keyframe icon in control bar atop the properties list (highlighted
    in the screen capture below)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead about halfway, to the `40` second mark
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Add Keyframe icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: And again, make sure there's Keyframe markers at the end (`45:00`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use hotkeys to move between Keyframes. Press "Alt+." (Alt+period) for
    next Keyframe. Press "Alt+," (Alt+comma) for previous Keyframe, and "Shift+,"
    (Shift+comma) for first Keyframe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we''ll add a Keyframe at `37.5`:'
  prefs: []
  type: TYPE_NORMAL
- en: Move the Playhead to 37.5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add Keyframe icon
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the red Record icon in the upper left to capture new values
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `NestAndEgg` object in Hierarchy
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Scene view, using the Move Tool gizmo, move the nest a little bit along
    the X and Z axes (about 0.4 units)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Using the Rotate Tool, rotate the nest gently on any combination of axes (up
    to 10 degrees)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead to `42.5` and repeat steps 2-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The resulting Animation Window in Dopesheet view, with its Position and Rotation
    property values, is shown here at Keyframe 37.5\. The Add Keyframe icon is identified
    for the reader:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/33d2fdf5-d8f6-42a9-8446-e913f8fcb09e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The Curves view lets you focus on the transitions between Keyframes, and provides
    the ability to adjust the values and shape the curve splines. My current Curves
    view is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3779f578-e4ed-47bc-aa32-7274c164ff41.png)'
  prefs: []
  type: TYPE_IMG
- en: The length of the scrollbars in the Animation Window indicate the current zoom
    view. The oval ends of each scrollbar are grab-able controls that let you directly
    adjust the zoom as well as position of the view.
  prefs: []
  type: TYPE_NORMAL
- en: Go back to the TImeline Editor window. You can  slide the Playhead cursor to
    see animations in your Scene window, or press the Preview Play icon to play them.
  prefs: []
  type: TYPE_NORMAL
- en: Animating other properties
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our story, we want the lighting to start at night and progress through dawn
    to daylight. We'll do it by manipulating the Directional Light, Skybox Material,
    and a Spot Light.
  prefs: []
  type: TYPE_NORMAL
- en: Animating lights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For dramatic effect, let''s make the scene slowly fade from night to daytime.
    We will turn off the Directional Light at the start and slowly increase its Intensity:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `BlackbirdController` in Hierarchy and open the Timeline Editor window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Directional Light` object from Hierarchy onto the Timeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press its Record button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the Playhead is at `0:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Directional Light` in Hierarchy and change its Intensity parameter
    to `0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead to the `40:00` second mark
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Intensity to `1`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Directional Light''s Animation Track with the Intensity parameter curve
    is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/99c2faa9-237c-457c-8af2-5fb2edc2bbad.png)'
  prefs: []
  type: TYPE_IMG
- en: Other parameters of the light could also be animated, including its Color and
    the Transform Rotation angles. Just imagine the possibilities!
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s also add a Point Light. For dramatic effect, position it at the same
    location as the Nest resting position. This will illuminate the baby tree at first,
    and focus the user''s attention on the egg in the nest once the nest settles onto
    the ground:'
  prefs: []
  type: TYPE_NORMAL
- en: Create | Light | Point Light
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Scene view, use the Move Tool gizmo to position it inside the Nest at the
    Nest's ground position
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `BlackbirdDirector` and open the Timeline Editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `Point Light` onto the Timeline Editor
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Activation Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enable the light from `0`s to about `95`s, sometime after the egg hatches
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Things are looking pretty good!
  prefs: []
  type: TYPE_NORMAL
- en: 'Our Timeline is starting to get a little crowded. Let''s move the lights into
    a Track Group:'
  prefs: []
  type: TYPE_NORMAL
- en: In Timeline, choose Add | Track Group
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click its label and name it "Lights"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag each of the light tracks into the group
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use Group Tracks to organize your Timeline in a nested tree structure
  prefs: []
  type: TYPE_NORMAL
- en: Animating a scripted component property
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we're seeing, you can animate just about any GameObject property that you
    can modify in the Inspector. This includes your own C# script component's serialized
    properties.
  prefs: []
  type: TYPE_NORMAL
- en: We want to fade the environmental lighting from night to day. There are several
    ways to achieve this (see the discussion of photospheres in the previous chapter). We've
    decided to do it by modifying the Skybox Material's Exposure value (o is off,
    1 is all the way on). But Timeline can only animate GameObject properties, and
    this is not one. So what we'll do is create an empty LightingController GameObject
    and write a script that controls the Skybox Material.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add our own Skybox Material to the scene. You can use any skybox texture
    you like. We will grab one from the WispySkybox package, `WispyCubemap2`, that
    we imported earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Material (Assets | Create | Material), name it `BlackbirdSkyMaterial`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Inspector, for its Shader, select Skybox/Cubemap
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click Select in its Cubemap texture chip, and select `WispyCubemap2`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Lighting window (if not already in the Editor, choose Window | Lighting
    | Settings)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `BlackbirdSkyMaterial` from Project Assets onto the Skybox Material
    slot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Uncheck the Mixed Lighting Baked Global Illumination checkbox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We don't want to bake any of the environment lighting since we're going to modify
    its settings at runtime.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selecting the `BlackbirdSkyMaterial` again, see what happens when you slide
    the Exposure value between `1` and `0`. It fades the brightness of the skybox.
    We will animate this value to modify the ambient light in our scene. But Animations
    can only modify GameObject parameters, so we''ll write a script:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new C# script and name it `SkyboxMaterialExposureControl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open the script and write it as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the file. In Unity, lets make a LightingController object that uses the
    script as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a Empty object in Hierarchy, named "LightingController"
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `SkyboxMaterialExposureControl` to this object
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `BlackbirdSkyMaterial` onto its Skybox Material slot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, let''s animate this parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: Select `BlackbirdController` in Hierarchy and open the Timeline Editor window
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `LightingController` object from Hierarchy onto the Timeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press its Record button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the Playhead is at `0:00`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `LightingController` in Hierarchy, and change its Exp parameter to
    `0`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead to the `100:00` second mark
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the Exp to `1`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Timeline Editor window with a SkyboxMaterialExposureControl track is shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/a63ec9e0-95c1-456f-b60e-ab53ce16d560.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Press Play, and the scene lighting will fade from night to day as the skybox
    material''s Exposure animates from 0 to 1\. (Note it''s not available in the Timeline
    preview Play, just the Editor Play). Here is a screenshot of the scene playing
    at about 45 seconds:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8663f5e-5117-4a81-947f-485ca777426c.png)'
  prefs: []
  type: TYPE_IMG
- en: Controlling particle systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You could continue to improve the scene with other effects. We'd like to include
    falling leaves, which can be implemented using particle systems and played using
    a Control Track.
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, we cannot recommend a specific free "falling leaves" asset as
    all the ones we found in the Asset Store are paid ones. There's an out-of-date
    free Sky FX package ([https://assetstore.unity.com/packages/vfx/particles/environment/sky-fx-pack-19242](https://assetstore.unity.com/packages/vfx/particles/environment/sky-fx-pack-19242)),
    from which we borrowed the textures and made our own particle system prefab, included
    with this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assuming you have a FallingLeaves particle system, we can add it to the project
    now:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag a copy of the `FallingLeaves` prefab into the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Timeline Editor window (with `BlackbirdDirector` selected), click Add
    and choose Control Track.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the Control Track's menu icon, choose Add Control Playable Asset Clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This creates a small rectangle for the clip on the track. Select it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Inspector, drag the `FallingLeaves` game object from Hierarchy onto the Source
    Game Object slot.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Going back to the Timeline window, grab and slide the rectangle to the 120-second
    position, then stretch its right edge to the end of the timeline (165s).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The playable asset''s Inspector is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fe46c8e1-328c-4c0d-a128-24aa00a17a3c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'And the Timeline with this Control Track is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/84b6b080-475c-42f6-a5f4-db84bcd82925.png)'
  prefs: []
  type: TYPE_IMG
- en: Likewise, if you have multiple Timelines in a scene, you can control them from
    another Timeline using a Control Track (via game objects with `PlayableDirector`
    components).  In our app, we're using a single Timeline, with Play On Awake, so
    it starts at the beginning of the app and plays through. However, with multiple
    Timelines in a scene, you can play them on demand.
  prefs: []
  type: TYPE_NORMAL
- en: You can write your own custom Timeline track classes too. For example, using
    a Control Track for playing Particle Systems is limited. Here ([https://github.com/keijiro/TimelineParticleControl](https://github.com/keijiro/TimelineParticleControl))
    is a custom track class, `ParticleSystemControlTrack`, that offers control of
    emission rate, velocity, and other functionality. And if you look into their `.cs`
    code, it provides a good example of how to write a custom track class.
  prefs: []
  type: TYPE_NORMAL
- en: Separate Animation Clips are another Playable asset you can add and sequence
    in Timeline tracks. We look at that next.
  prefs: []
  type: TYPE_NORMAL
- en: Using Animation clips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the next animation example, we'll get the egg to rattle and shake before
    it hatches. We will create a simple animation and make it loop for its duration. To
    illustrate, we'll make an Animation Clip of the WholeEgg rattling and then add
    it to the Timeline on an Animation Clip Track.
  prefs: []
  type: TYPE_NORMAL
- en: Shaking an egg
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a new Animation Clip on the WholeEgg object, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Hierarchy, select the WholeEgg object (child of NestAndEgg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open the Animation Window (Window | Animation)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You should see a message, To begin animating WhileEgg, create an Animation Clip and
    a Create button
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press Create
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When prompted for a file name, save it to `EggShaker.anim`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We''ve seen the Animation Window earlier in this chapter. We''re going to make
    a very short, 2-second animation that rotates the egg on the X axis and Z axis
    by manipulating the animation curves:'
  prefs: []
  type: TYPE_NORMAL
- en: Show the Curves view using the Curves button on the bottom of the window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press Add Property and WholeEgg | Transform | Rotation | + to add the Rotation
    properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the WholeEgg: Rotation property group on the left.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *A* on the keyboard to zoom all; you should see three flat lines, one
    for each X, Y, Z rotation axes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the Add Keyframe icon in the upper right of the control bar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There may already be a Keyframe at one second (1:00) by default. If not, move
    the Playhead and click Add Keyframe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scroll out (middle scroll wheel on mouse, or using the horizontal scrollbar
    oval-end handles) so you can see the 2:00-second marker.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead to 2 seconds and Add Keyframe.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead back to the 1 second mark.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, we'll edit the animation spline curves. If you're familiar with spline
    editing, there is a line at each node representing the tangent of the curve at
    that point, and handles at the ends of the line for editing the curve. (You also
    modify the operation of this gizmo by right-clicking the node.)
  prefs: []
  type: TYPE_NORMAL
- en: Click the 1:00s node for the Rotation.X property, then grab one of the handles
    to make a smooth S-curve. Not too steep, something between 30 and 45 degrees
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat this for the Y and Z axes, with some variation, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ef65b6f1-7102-402c-93d0-1ec4fbd66c47.png)'
  prefs: []
  type: TYPE_IMG
- en: For one or two of the axes, add an extra Keyframe to make the curves look a
    little more random. My final curves are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f64eb290-4716-49af-a653-4d03018695b0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With that done (the curves can be edited and refined later), select BlackbirdDirector, open
    the Timeline window, and perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select Add and choose Animation Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `WholeEgg` object from Hierarchy onto the Timeline
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose Animation Track
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This time, instead of recording we''ll use the one we just created, and make
    it animate back and forth as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the menu-icon on the track, choose Add From Animation Clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A small rectangle is added to the track. Slide it to about 50 seconds, when
    the nest is on the ground but the chick has not yet hatched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In Inspector, we now have more clip options. Under Animation Extrapolation,
    choose Post-Extrapolate: Ping Pong.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Animation Clips with Timeline can be quite flexible. You can add multiple Animation
    Clips to an Animation Track, and blend between them by sliding them into one another.
    If you need even more control, you'd use an Animator Controller instead.
  prefs: []
  type: TYPE_NORMAL
- en: Using Animator Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While recording animations as Timeline tracks is very convenient, it does have
    limitations. Those animations "live" in the Timeline. But, sometimes you want
    to treat animations as assets in their own right. For example, you would use Animation
    Clips if you want an animation to loop repeatedly, or transition between animations,
    or blend their actions, or apply the same set of animation curves to other objects.
  prefs: []
  type: TYPE_NORMAL
- en: We will take a look at a couple of existing examples of Animators and then use
    the existing birds one to make our Bluejay fly.
  prefs: []
  type: TYPE_NORMAL
- en: Definitions for Animation and Animator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Animators** have been the standard way of managing *Animation Clips* in Unity,
    before Timeline. It uses an Animator Component, an Animator Controller, and an
    Animation Clip. Fortunately, if you create a new Animation Clip on an object,
    Unity creates each of these items for you. But it''s important to understand how
    they fit together.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Briefly, from the Unity manual ([https://docs.unity3d.com/Manual/animeditor-CreatingANewAnimationClip.html](https://docs.unity3d.com/Manual/animeditor-CreatingANewAnimationClip.html)):'
  prefs: []
  type: TYPE_NORMAL
- en: '"To animate GameObjects in Unity, the object or objects need an **Animator
    Component** attached. This Animator Component must reference an **Animator Controller**,
    which in turn contains references to one or more **Animation Clips**."'
  prefs: []
  type: TYPE_NORMAL
- en: 'These objects originate from the Mecanim animation system folded into Unity
    a few versions back (you may still see references to Mecanim in the Unity Manual
    and web searches). This animation system is especially tailored for humanoid character
    animations (see [https://docs.unity3d.com/Manual/AnimationOverview.html](https://docs.unity3d.com/Manual/AnimationOverview.html)).
    The terminology can seem redundant and confusing. The following definitions may
    help (or not!). Pay especially close attention to the use of "animator" versus
    "animation":'
  prefs: []
  type: TYPE_NORMAL
- en: '*Animation Clips*: Describes how an object''s properties change over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animator Controller*: Organizes clips in a state machine flowchart, keeps
    track which clip should currently be playing, when animations should change or
    blend together. References the clips it uses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animator component*: Brings together Animation Clips, the Animation Controller,
    and the Avatar if used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Do not use *legacy Animation components :* Animation component is legacy but
    Animation window is not!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animation window*: Used to create/edit individual Animation Clips, and can
    animate any property you can edit in the inspector. Shows a timeline but is not
    the same as the Timeline window. Offers Dopesheet versus Curves view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Animator window*: Organizes existing animation clip assets into a flowchart-like
    state machine graph.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Actually, Timeline animation recordings also use Animation Clips, you just don't
    need to explicitly create them. Each recorded Animation Track in a Timeline has
    a corresponding animation playable file (named "Recorded (n)") in your Assets
    folder.
  prefs: []
  type: TYPE_NORMAL
- en: ThirdPersonController Animator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ThirdPersonController` character prefab we used for Ethan in previous
    chapters uses an animator controller to manage humanoid animation clips on the
    rigged model. For curiosity, let''s examine it now (although we will not use it
    in this scene):'
  prefs: []
  type: TYPE_NORMAL
- en: Temporarily drag a copy of the `ThirdPersonController` prefab from your Project
    `Assets/Standard Assets/ Characters/ThirdPersonCharacter/Prefabs/` folder into
    the scene.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice in Inspector, it has an Animator component and the Controller slot references
    `ThirPersonAnimatorController`. Click on that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This will highlight the controller asset (in `Assets/.../ThirdPersonCharacter/Animator`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click`ThirdPersonAnimatorController` to open it in an Animator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Animator graph for Ethan is shown next. You can see that when the character
    is activated (`Entry`), it initializes to the `Grounded` state. The oval boxes
    are States; the lines between them are Transitions. On the left is the list of
    state Properties that the Animator can use. When `Crouch` is true, for example,
    the animation transitions to `Crouching`, plays that, then transitions back (and
    clears the `Crouch` state flag):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fabf44c6-83b7-4256-94f8-872d8c44e0fd.png)'
  prefs: []
  type: TYPE_IMG
- en: If you open the `Grounded` state (double-click), you can see a Blend Tree with
    an impressive collection of Animation Clips for standing idle, walking, turning,
    and so on. These will be activated and combined (blended) based on user input.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's look at another example, the `BirdAnimatorController` used by our
    `Bluejay`.
  prefs: []
  type: TYPE_NORMAL
- en: You can now delete the `ThirdPersonController` object from the scene.
  prefs: []
  type: TYPE_NORMAL
- en: Living Birds Animator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Living Birds package comes with a lot of animation clips. You can actually
    open the FBX models in Blender or another animation application and examine how
    the models and animations are defined. These have been combined into a `BirdAnimationController`.
    Examine the Animator using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `Bluejay` in Hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Notice in Inspector, it has an Animator component, and the Controller slot references
    `BirdAnimatorController`. Click on that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Project Assets, double-click the `ThirdPersonAnimatorController` to open
    it in an Animator window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Animator graph is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/fb942217-cd4a-423b-be38-3fa48b860bac.png)'
  prefs: []
  type: TYPE_IMG
- en: You can see that almost all the animations readily transition to and from the
    Idle one, whether Preen, Peck, Sing, or HopLeft, HopRight, HopForward, and so
    on. Also, note the Idle -> Fly -> Landing -> Idle loop, as we're going to use
    that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Bluejay also has a C# script, `lb_Bird`, which invokes the Animator behaviors.
    It''s not the cleanest code, but it is useful. The most pertinent functions are
    `OnGroundBehaviors` and `FlyToTarget`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`OnGroundBehaviors` randomly chooses and plays one of the idle animations every
    3 seconds'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FlyToTarget`, will cause the bird to fly to a given position, including takeoff
    and landing and random fluttering around; it looks reasonably natural'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So in our project, rather than recording the Keyframe position details of the
    bird's animation path like we did the falling nest, we'll define specific targets
    and let the `lb_Bird` script actually control the bird transforms. This is a lot
    like using a Navmesh to direct Ethan's movement as we did in Chapter 4, *Gaze-Based
    Control*. We will use Timeline to select one target position to the next, over
    time.
  prefs: []
  type: TYPE_NORMAL
- en: Learning to fly
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, let''s create a `BirdController` and specify a list of locations where
    the bird should fly between. Then, we''ll add this to the Timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: In Hierarchy, create an Empty game object named `BirdController` and reset its
    Transform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a child Empty object, named `Location1`. Move it to be just atop the
    rock closest to the Nest .
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create another Empty, named `Location2`, positioned back near the Nest but not
    in it this time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue creating location markers. The values I used, based on my scene and
    rock locations, are shown in the following table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last location should be far away. The bird will head there at the end of
    the video.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Name | Position | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `Location0` | `(0.75, 0.4, -1.25)` | Start position of the Bluejay |'
  prefs: []
  type: TYPE_TB
- en: '| `Location1` | `(3, 0.8, 0)` | Atop nearest rock |'
  prefs: []
  type: TYPE_TB
- en: '| `Location2` | `(1.2, 0.2, -1.7)` | Ground near Nest but not in it |'
  prefs: []
  type: TYPE_TB
- en: '| `Location3` | `(2.5, 0.8, -3.4)` | Atop next nearest rock |'
  prefs: []
  type: TYPE_TB
- en: '| `Location4` | `(-5.85, 0.8, -0.3)` | Next rock |'
  prefs: []
  type: TYPE_TB
- en: '| `Location5` | `(-5, 0.33, 3.5)` | Last rock |'
  prefs: []
  type: TYPE_TB
- en: '| `Location6` | `(45, 11, 45)` | In the distance |'
  prefs: []
  type: TYPE_TB
- en: 'Create a new C# script on the `BirdController`, named `BirdController`, and
    write it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There are a number of things going on here. We'll explain.
  prefs: []
  type: TYPE_NORMAL
- en: '`BirdController` has a reference to the `bird`, and a list of location `targets`.
    We''ll populate this list in the Unity Editor. Each location is identified by
    an index value between `0` and the size of the list. An integer, `animIndex`,
    will be the parameter controlled by the Timeline, telling the controller which
    location the bird should fly to.'
  prefs: []
  type: TYPE_NORMAL
- en: On each Update, we check whether the `animIndex` has changed. If so, and it's
    within the range for our list, it calls `FlyToTarget` on the bird. (We use `SendMessage`,
    not a best practice way of triggering functions in another object, but it's the
    least disruptive given the existing scripts provided with the Living Birds package.)
  prefs: []
  type: TYPE_NORMAL
- en: The extra two variables, `collideWithObjects` and `birdScale`, are not used
    but are required by the `lb_Bird.cs` script on the Bluejay.
  prefs: []
  type: TYPE_NORMAL
- en: 'Save the script. Now, in Unity:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag the `BirdController` script onto the `BirdController` object as a component
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag `Bluejay` onto the Bird slot
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unfold the Targets list and set Size to `7`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag `Location0` onto Element 0, `Location1` onto Element 1, and so on
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Hierarchy with the BirdController component is shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/04e02268-18e3-4461-b644-f51cf8bd6e73.png)'
  prefs: []
  type: TYPE_IMG
- en: Hacking the birds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unfortunately, like a lot of code you'll find on the internet, the Living Birds
    code works for its own purposes but not necessarily ours. In this case, the package
    is designed for generating a flock of various birds that fly and land randomly,
    avoid collisions and can even be killed. We have just one bird and want more control
    over the landing locations, so we'll make a change to use our `BirdController`
    rather than the `lb_BirdController` in the package.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `lb_Bird.cs` file (attached to `Bluejay`) and modify it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Replace the definition of `controller` to be our `BirdController`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Comment out or remove the  `SetController `function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save it. In Unity, drag the `BirdController` object onto the Bluejay's LB_Bird
    Controller slot.
  prefs: []
  type: TYPE_NORMAL
- en: Fly away!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we'll add the BirdController as an Animation Track in our Timeline. The
    AnimIndex parameter is an integer value that will step up in value along the timeline.
    We want to Bluejay to start learning to fly around 80 seconds, and jump from location
    to location about 10 seconds apart (80, 90, 100, 110, 120, and away at 130).
  prefs: []
  type: TYPE_NORMAL
- en: Open the Timeline Editor window for the `BlackbirdDirector`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag the `BirdController` object from Hierarchy onto the Timeline, adding a
    new Animation Track.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press its red Record button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `BirdController` in Hierarchy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead to `80`, and in Inspector, set Anim Index to `1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Move the Playhead to `90` and set Anim Index to `2`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continue for the other indexes `3` through `6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the red Record button again to stop recording.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Preview the curve. If it doesn't start at 0 (prior to 80s), use Edit in Animation
    Window and add another Keyframe with value `0`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The Animation Track curve for the Anim Index parameter is shown here, simply
    incrementing by one at each keyframe:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54b4d8a8-0308-4e22-82f4-1bf5ce8da653.png)'
  prefs: []
  type: TYPE_IMG
- en: Play it through. Wow! The bird flies from rock to rock, and eventually flies
    away!
  prefs: []
  type: TYPE_NORMAL
- en: 'You can adjust the bird''s path and timing between landings by moving the location
    objects and the animation curve keyframes, respectively. You could also try animating
    the BirdController''s Bird Scale parameter to make the bird increasingly more
    bold and strong as it learns to fly. A screen capture is given here with the bird
    flying and leaves falling:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9059b585-24dc-4923-8704-824668e046dc.png)'
  prefs: []
  type: TYPE_IMG
- en: We have a completed story. To wrap this up, let's add a little bit of interactivity,
    so the player can control when the story begins playing.
  prefs: []
  type: TYPE_NORMAL
- en: Making the story interactive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we used the Timeline to drive our entire VR story experience from start
    to finish. But in fact, Timelines are a playable asset like others in Unity. For
    example, if you select the BlackbirdDirector object and look in Inspector at its
    Playable Director, you'll see it has a Play On Awake checkbox, and it's presently
    checked. What we're going to do now is not play on awake, but rather start playing
    on a user event, namely looking directly at the small tree for a few seconds.
    And when the story ends, it resets itself.
  prefs: []
  type: TYPE_NORMAL
- en: Look to play
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''ll add a LookAtTarget encasing the small tree and then use that
    to trigger playing the timeline:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the `BlackbirdDirector` and uncheck the Play On Awake checkbox
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For reference, set the Tree game object Scale to its starting keyframe Scale
    (`0.1, 0.1, 0.1`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In Hierarchy, create a cube (Create | 3D Object | Cube) and name it `LookAtTarget`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scale and place it to encase the small tree, Scale (`0.4, 0.5, 0.4`), Position (`0,
    0.3, 0`)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Disable its Mesh Renderer, but keep its Box Collider
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new C# script on the cube, named `LookAtToStart`, and write it as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The script is similar to ones we wrote in Chapter 4\. We use the main camera
    and determine the direction it is looking. Using the physics engine, we call `Physics.Raycast`
    to cast a ray in the view direction and determine if it hit this object. If so,
    we start or continue a countdown timer and then play the timeline. Meanwhile,
    if you look away, we reset the timer.
  prefs: []
  type: TYPE_NORMAL
- en: Try it now. The Timeline will not start playing until you look at the cube for
    a few seconds.
  prefs: []
  type: TYPE_NORMAL
- en: Resetting the initial scene setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You probably noticed, unfortunately, that the default start scene is not necessary
    the same state we have for the beginning of the timeline.  You could fix this
    by manually ensuring that every object in the scene Hierarchy has the same initial
    state as the start of the timeline. Instead, we'll add a little hack that plays
    the timeline for a brief 0.1 seconds to reset the objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will implement this using a coroutine. Modify the `LookAtToStart` script
    as follows. Add a new variable, `resetSetup`, and initialize it to true:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a `PlayToSetup` function that will be run as a coroutine. Coroutines are
    a way to run a function, let Unity do other stuff momentarily, and then resume
    where you left off (via the `yield` statement). Here, we start playing the timeline,
    go away for 0.1 seconds, and then tell it to stop playing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Call the coroutine from `Update` when we want to reset the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We also want the scene to reset after the timeline plays all the way through,
    so we set `resetSetup` as soon as the timeline starts playing. It''ll be recognized
    once `timeline.state` is no longer playing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Press Play. Look at the tree. Enjoy the experience. When it ends, you're reset
    to the beginning and can look at the tree again to replay.
  prefs: []
  type: TYPE_NORMAL
- en: More interactivity ideas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We''re going to stop developing now. Some suggestions on how to improve the
    interactivity and user experience include:'
  prefs: []
  type: TYPE_NORMAL
- en: Add a particle effect around the tree to indicate that it's a trigger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Highlight the tree as feedback when you're looking at it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Display a countdown cursor to indicate the timer has started and when the story
    will begin playing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here are other suggestions for interactable objects you could add to the story:'
  prefs: []
  type: TYPE_NORMAL
- en: Look at the egg in the nest causes it to hatch sooner than its default timing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When you look at the bird while it's idle, it will turn to look back at you
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you poke the bird with your hand controller, it jumps out of the way
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can pick up a rock and throw it to kill the bird (nooo, just kidding!)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we built an animated VR story. We began by deciding what we
    want to do, planning out the timeline, music track, graphic assets, animation
    sequences, and lighting. We imported our assets and placed them in the scene,
    then created a Timeline and roughed out when specific objects are enabled and
    disabled using an Activation Track. Next, we animated several objects, including
    growing the tree, floating the nest, and rumbling the egg. We also animated the
    lighting, learning how to animate game object parameters other than Transforms.
  prefs: []
  type: TYPE_NORMAL
- en: We also used Animation Clips and an Animator Controller, using animations imported
    from a third-party package. We reviewed a script that calls into the Animator
    and wrote a controller on top of that, to fly the bird from location to location.
    Lastly, we added interactions to the story, using gaze-based control to start
    and replay the experience.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we go social as we look at ways to add multi-user networking
    to Unity VR projects and how to add scenes to the emerging metaverse. Multiplayer
    games are familiar to most of us, but when combined with virtual reality, it provides
    a social experience that is unparalleled by any other technology. We will learn
    about networking technology using the Unity Networking features.
  prefs: []
  type: TYPE_NORMAL
