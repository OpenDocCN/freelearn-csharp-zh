["```cs\n    public Transform corner_max;\n    public Transform corner_min;\n    private float x_min;\n    private float y_min;\n    private float x_max;\n    private float y_max;\n    ```", "```cs\n    void Awake(){\n      rigidBody2D = GetComponent<Rigidbody2D>();\n      x_max = corner_max.position.x;\n      x_min = corner_min.position.x;\n      y_max = corner_max.position.y;\n      y_min = corner_min.position.y;\n    }\n    ```", "```cs\n      private void KeepWithinMinMaxRectangle(){\n        float x = transform.position.x;\n        float y = transform.position.y;\n        float z = transform.position.z;\n        float clampedX = Mathf.Clamp(x, x_min, x_max);\n        float clampedY = Mathf.Clamp(y, y_min, y_max);\n        transform.position = new Vector3(clampedX, clampedY, z);\n      }\n    ```", "```cs\n      void FixedUpdate(){\n        float xMove = Input.GetAxis(\"Horizontal\");\n        float yMove = Input.GetAxis(\"Vertical\");\n\n        float xSpeed = xMove * speed;\n        float ySpeed = yMove * speed;\n\n        Vector2 newVelocity = new Vector2(xSpeed, ySpeed);\n\n        rigidBody2D.velocity = newVelocity;\t\n\n        // restrict player movement\n        KeepWithinMinMaxRectangle();\n      }\n    ```", "```cs\n    void OnDrawGizmos(){\n      Vector3 top_right = Vector3.zero;\n      Vector3 bottom_right = Vector3.zero;\n      Vector3 bottom_left = Vector3.zero;\n      Vector3 top_left = Vector3.zero;\n\n      if(corner_max && corner_min){\n        top_right = corner_max.position;\n        bottom_left = corner_min.position;\n\n        bottom_right = top_right;\n        bottom_right.y = bottom_left.y;\n\n        top_left = top_right;\n        top_left.x = bottom_left.x;\n      }\n\n      //Set the following gizmo colors to YELLOW\n      Gizmos.color = Color.yellow;\n\n      //Draw 4 lines making a rectangle\n      Gizmos.DrawLine(top_right, bottom_right);\n      Gizmos.DrawLine(bottom_right, bottom_left);\n      Gizmos.DrawLine(bottom_left, top_left);\n      Gizmos.DrawLine(top_left, top_right);\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class PlayerControl : MonoBehaviour {\n      public Transform corner_max;\n      public Transform corner_min;\n\n      public float speed = 40;\n      private Rigidbody rigidBody;\n\n      private float x_min;\n      private float x_max;\n      private float z_min;\n      private float z_max;\n\n      void Awake (){\n        rigidBody = GetComponent<Rigidbody>();\n        x_max = corner_max.position.x;\n        x_min = corner_min.position.x;\n        z_max = corner_max.position.z;\n        z_min = corner_min.position.z;\n      }\n\n      void FixedUpdate() {\n        KeyboardMovement();\n        KeepWithinMinMaxRectangle();\n      }\n\n      private void KeyboardMovement (){\n        float xMove = Input.GetAxis(\"Horizontal\") * speed * Time.deltaTime;\n        float zMove = Input.GetAxis(\"Vertical\") * speed * Time.deltaTime;\n\n        float xSpeed = xMove * speed;\n        float zSpeed = zMove * speed;\n\n        Vector3 newVelocity = new Vector3(xSpeed, 0, zSpeed);\n\n        rigidBody.velocity = newVelocity;\t\n\n        // restrict player movement\n        KeepWithinMinMaxRectangle ();\n      }\n\n      private void KeepWithinMinMaxRectangle (){\n        float x = transform.position.x;\n        float y = transform.position.y;\n        float z = transform.position.z;\n        float clampedX = Mathf.Clamp(x, x_min, x_max);\n        float clampedZ = Mathf.Clamp(z, z_min, z_max);\n        transform.position = new Vector3(clampedX, y, clampedZ);\n      }\n\n      void OnDrawGizmos (){\n        Vector3 top_right = Vector3.zero;\n        Vector3 bottom_right = Vector3.zero;\n        Vector3 bottom_left = Vector3.zero;\n        Vector3 top_left = Vector3.zero;\n\n        if(corner_max && corner_min){\n          top_right = corner_max.position;\n          bottom_left = corner_min.position;\n\n          bottom_right = top_right;\n          bottom_right.z = bottom_left.z;\n\n          top_left = bottom_left;\n          top_left.z = top_right.z;\n        } \n\n        //Set the following gizmo colors to YELLOW\n        Gizmos.color = Color.yellow;\n\n        //Draw 4 lines making a rectangle\n        Gizmos.DrawLine(top_right, bottom_right);\n        Gizmos.DrawLine(bottom_right, bottom_left);\n        Gizmos.DrawLine(bottom_left, top_left);\n        Gizmos.DrawLine(top_left, top_right);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class SpawnBall : MonoBehaviour {\n      public GameObject prefabBall;\n      private SpawnPointManager spawnPointManager;\n      private float destroyAfterDelay = 1;\n      private float testFireKeyDelay = 0;\n\n      void Start (){\n        spawnPointManager = GetComponent<SpawnPointManager> ();\n        StartCoroutine(\"CheckFireKeyAfterShortDelay\");\n      }\n\n      IEnumerator CheckFireKeyAfterShortDelay () {\n        while(true){\n          yield return new WaitForSeconds(testFireKeyDelay);\n          // having waited, now we check every frame\n          testFireKeyDelay = 0; \n          CheckFireKey();\n        }\n      }\n\n      private void CheckFireKey() {\n        if(Input.GetButton(\"Fire1\")){\n          CreateSphere();\n          // wait half-second before alling next spawn\n          testFireKeyDelay = 0.5f;\n        }\n      }\n\n      private void CreateSphere(){\n        GameObject spawnPoint = spawnPointManager.RandomSpawnPoint ();\n        GameObject newBall = (GameObject)Instantiate (prefabBall, spawnPoint.transform.position, Quaternion.identity);\n        Destroy(newBall, destroyAfterDelay);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class SpawnPointManager : MonoBehaviour {\n      private GameObject[] spawnPoints;\n\n      void Start() {\n        spawnPoints = GameObject.FindGameObjectsWithTag(\"Respawn\");\n      }\n\n      public GameObject RandomSpawnPoint (){\n        int r = Random.Range(0, spawnPoints.Length);\n        return spawnPoints[r];\n      }\n    }\n    ```", "```cs\n    public GameObject NearestSpawnpoint (Vector3 source){\n      GameObject nearestSpawnPoint = spawnPoints[0];\n      Vector3 spawnPointPos = spawnPoints[0].transform.position;\n      float shortestDistance = Vector3.Distance(source, spawnPointPos);\n\n      for (int i = 1; i < spawnPoints.Length; i++){\n        spawnPointPos = spawnPoints[i].transform.position;\n        float newDist = Vector3.Distance(source, spawnPointPos);\n        if (newDist < shortestDistance){\n          shortestDistance = newDist;\n          nearestSpawnPoint = spawnPoints[i];\n        }\n      }\n\n      return nearestSpawnPoint;\n    }\n    ```", "```cs\n    private void CreateSphere(){\n      GameObject spawnPoint = spawnPointManager.NearestSpawnpoint(transform.position);\n\n      GameObject newBall = (GameObject)Instantiate (prefabBall, spawnPoint.transform.position, Quaternion.identity);\n      Destroy(newBall, lifeDuration);\n    }\n    ```", "```cs\n    public GameObject NearestSpawnpoint (Vector3 source){\n    void Start() {\n      spawnPoints = GameObject.FindGameObjectsWithTag(\"Respawn\");\n\n      // logError if array empty\n      if(spawnPoints.Length < 1) Debug.LogError (\"SpawnPointManagaer - cannot find any objects tagged 'Respawn'!\");\n    }\n    ```", "```cs\n    public GameObject RandomSpawnPoint (){\n      // return current GameObject if array empty\n      if(spawnPoints.Length < 1) return null;\n\n    // the rest as before ...\n    ```", "```cs\n    private void CreateSphere(){\n      GameObject spawnPoint = spawnPointManager.RandomSpawnPoint ();\n\n      if(spawnPoint){\n        GameObject newBall = (GameObject)Instantiate (prefabBall, spawnPoint.transform.position, Quaternion.identity);\n        Destroy(newBall, destroyAfterDelay);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class CheckPoints : MonoBehaviour {\n      private Vector3 respawnPosition;\n\n      void Start (){\n        respawnPosition = transform.position;\n      }\n\n      void OnTriggerEnter (Collider hit){\n        if(hit.CompareTag(\"CheckPoint\")){\n          respawnPosition = transform.position;\n        }\n\n        if(hit.CompareTag(\"Death\")){\n          transform.position = respawnPosition;\n        }\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ArrowNPCMovement : MonoBehaviour {\n      public GameObject targetGO;\n      private NavMeshAgent navMeshAgent;\n\n      void Start (){\n        navMeshAgent = GetComponent<NavMeshAgent>();\n        HeadForDestintation();\n      }\n\n      private void HeadForDestintation (){\n        Vector3 destinaton = targetGO.transform.position;\n        navMeshAgent.SetDestination (destinaton);\n      }\n    }\n    ```", "```cs\n    void Start (){\n      navMeshAgent = GetComponent<NavMeshAgent>();\n    }\n\n    void Update (){\n      HeadForDestintation();\n    }\n    ```", "```cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class ArrowNPCMovement : MonoBehaviour {\n  public GameObject targetGO;\n  private NavMeshAgent navMeshAgent;\n  private float runAwayMultiplier = 2;\n  private float runAwayDistance;\n\n  void Start(){\n    navMeshAgent = GetComponent<NavMeshAgent>();\n    runAwayDistance = navMeshAgent.stoppingDistance * runAwayMultiplier;\n  }\n\n  void Update () {\n    Vector3 enemyPosition = targetGO.transform.position;\n    float distanceFromEnemy = Vector3.Distance(transform.position, enemyPosition);\n    if (distanceFromEnemy < runAwayDistance)\n      FleeFromTarget (enemyPosition);\n  }\n\n  private void FleeFromTarget(Vector3 enemyPosition){\n    Vector3 fleeToPosition = Vector3.Normalize(transform.position - enemyPosition) * runAwayDistance;\n    HeadForDestintation(fleeToPosition);\n  }\n\n  private void HeadForDestintation (Vector3 destinationPosition){\n    navMeshAgent.SetDestination (destinationPosition);\n  }\n}\n```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ClickMeToSetDestination : MonoBehaviour {\n      private NavMeshAgent playerNavMeshAgent;\n      private MeshRenderer meshRenderer;\n      private bool mouseOver = false;\n\n      private Color unselectedColor;\n\n      void Start (){\n        meshRenderer = GetComponent<MeshRenderer>();\n        unselectedColor = meshRenderer.sharedMaterial.color;\n\n        GameObject playerGO = GameObject.FindGameObjectWithTag(\"Player\");\n        playerNavMeshAgent = playerGO.GetComponent<NavMeshAgent>();\n      }\n\n      void Update (){\n        if (Input.GetButtonDown(\"Fire1\") && mouseOver)\n          playerNavMeshAgent.SetDestination(transform.position);\n      }\n\n      void OnMouseOver (){\n        mouseOver = true;\n        meshRenderer.sharedMaterial.color = Color.yellow;\n      }\n\n      void OnMouseExit (){\n        mouseOver = false;\n        meshRenderer.sharedMaterial.color = unselectedColor;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ArrowNPCMovement : MonoBehaviour {\n      private GameObject targetGO = null;\n      private WaypointManager waypointManager;\n      private NavMeshAgent navMeshAgent;\n\n      void Start (){\n        navMeshAgent = GetComponent<NavMeshAgent>();\n        waypointManager = GetComponent<WaypointManager>();\n        HeadForNextWayPoint();\n      }\n\n      void Update (){\n        float closeToDestinaton = navMeshAgent.stoppingDistance * 2;\n        if (navMeshAgent.remainingDistance < closeToDestinaton){\n          HeadForNextWayPoint ();\n        }\n      }\n\n      private void HeadForNextWayPoint (){\n        targetGO = waypointManager.NextWaypoint (targetGO);\n        navMeshAgent.SetDestination (targetGO.transform.position);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n\n    public class WaypointManager : MonoBehaviour {\n      public GameObject wayPoint0;\n      public GameObject wayPoint3;\n\n      public GameObject NextWaypoint(GameObject current){\n        if(current == wayPoint0)\n          return wayPoint3;\n        else\n          return wayPoint0;\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using System;\n\n    public class WaypointManager : MonoBehaviour {\n      public GameObject[] waypoints;\n\n      public GameObject NextWaypoint (GameObject current)\n      {\n        if( waypoints.Length < 1)\n          Debug.LogError (\"WaypointManager:: ERROR - no waypoints have been added to array!\");\n\n        int currentIndex = Array.IndexOf(waypoints, current);\n        int nextIndex = ((currentIndex + 1) % waypoints.Length);\n        return waypoints[nextIndex];\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class ArrowNPCMovement : MonoBehaviour {\n      public Waypoint waypoint;\n      private bool firstWayPoint = true;\n      private NavMeshAgent navMeshAgent;\n\n      void Start (){\n        navMeshAgent = GetComponent<NavMeshAgent>();\n        HeadForNextWayPoint();\n      }\n\n      void Update () {\n        float closeToDestinaton = navMeshAgent.stoppingDistance * 2;\n        if (navMeshAgent.remainingDistance < closeToDestinaton){\n          HeadForNextWayPoint ();\n        }\n      }\n\n      private void HeadForNextWayPoint (){\n        if(firstWayPoint)\n          firstWayPoint = false;\n        else\n          waypoint = waypoint.GetNextWaypoint();\n\n        Vector3 target = waypoint.transform.position;\n        navMeshAgent.SetDestination (target);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class Waypoint: MonoBehaviour {\n      public Waypoint[] waypoints;\n\n      public Waypoint GetNextWaypoint () {\n        return waypoints[ Random.Range(0, waypoints.Length) ];\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n\n    public class Drone : MonoBehaviour {\n      private NavMeshAgent navMeshAgent;\n\n      void Start() {\n        navMeshAgent = GetComponent<NavMeshAgent>();\n      }\n\n      public void SetTargetPosition(Vector3 swarmCenterAverage, Vector3 swarmMovementAverage) {\n        Vector3 destination = swarmCenterAverage + swarmMovementAverage;\n        navMeshAgent.SetDestination(destination);\n      }\n    }\n    ```", "```cs\n    using UnityEngine;\n    using System.Collections;\n    using System.Collections.Generic;\n\n    public class Swarm : MonoBehaviour {\n      public int droneCount = 20;\n      public GameObject dronePrefab;\n\n      private List<Drone> drones = new List<Drone>();\n\n      void Awake() {\n        for (int i = 0; i < droneCount; i++)\n          AddDrone();\n      }\n\n      void FixedUpdate() {\n        Vector3 swarmCenter = SwarmCenterAverage();\n        Vector3 swarmMovement = SwarmMovementAverage();\n\n        foreach(Drone drone in drones)\n          drone.SetTargetPosition(swarmCenter, swarmMovement);\n      }\n\n      private void AddDrone() {\n        GameObject newDroneGO = (GameObject)Instantiate(dronePrefab);\n        Drone newDrone = newDroneGO.GetComponent<Drone>();\n        drones.Add(newDrone);\n      }\n\n      private Vector3 SwarmCenterAverage() {\n        // cohesion (swarm center point)\n        Vector3 locationTotal = Vector3.zero;\n\n        foreach(Drone drone in drones)\n          locationTotal += drone.transform.position;\n\n        return (locationTotal / drones.Count);\n      }\n\n      private Vector3 SwarmMovementAverage() {\n        // alignment (swarm direction average)\n        Vector3 velocityTotal = Vector3.zero;\n\n        foreach(Drone drone in drones)\n          velocityTotal += drone.rigidbody.velocity;\n\n        return (velocityTotal / drones.Count);\t\n      }\n    }\n    ```"]