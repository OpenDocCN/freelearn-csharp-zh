["```cs\n     public Transform corner_max;\n     public Transform corner_min;\n     private float x_min;\n     private float y_min;\n     private float x_max;\n     private float y_max; \n```", "```cs\n    void Awake(){\n       rigidBody2D = GetComponent<Rigidbody2D>();\n       x_max = corner_max.position.x;\n       x_min = corner_min.position.x;\n       y_max = corner_max.position.y;\n       y_min = corner_min.position.y;\n     } \n```", "```cs\n  private void KeepWithinMinMaxRectangle(){\n     float x = transform.position.x;\n     float y = transform.position.y;\n     float z = transform.position.z;\n     float clampedX = Mathf.Clamp(x, x_min, x_max);\n     float clampedY = Mathf.Clamp(y, y_min, y_max);\n     transform.position = new Vector3(clampedX, clampedY, z);\n   } \n```", "```cs\n  void FixedUpdate(){\n     rigidBody2D.velocity = newVelocity;\n\n     // restrict player movement\n     KeepWithinMinMaxRectangle();\n   } \n```", "```cs\n    void OnDrawGizmos(){\n       Vector3 top_right = Vector3.zero;\n       Vector3 bottom_right = Vector3.zero;\n       Vector3 bottom_left = Vector3.zero;\n       Vector3 top_left = Vector3.zero;\n\n       if(corner_max && corner_min){\n         top_right = corner_max.position;\n         bottom_left = corner_min.position;\n\n         bottom_right = top_right;\n         bottom_right.y = bottom_left.y;\n\n         top_left = top_right;\n         top_left.x = bottom_left.x;\n       }\n\n       //Set the following gizmo colors to YELLOW\n       Gizmos.color = Color.yellow;\n\n       //Draw 4 lines making a rectangle\n       Gizmos.DrawLine(top_right, bottom_right);\n       Gizmos.DrawLine(bottom_right, bottom_left);\n       Gizmos.DrawLine(bottom_left, top_left);\n       Gizmos.DrawLine(top_left, top_right);\n     } \n```", "```cs\nusing UnityEngine;\n\npublic class PlayerControl : MonoBehaviour {\n   public Transform corner_max;\n         public Transform corner_min;\n         public float speed = 40;\n         private Rigidbody rigidBody;\n         private float x_min;\n         private float x_max;\n         private float z_min;\n         private float z_max;\n         private Vector3 newVelocity;\n\n    void Awake() {\n       rigidBody = GetComponent<Rigidbody>();\n       x_max = corner_max.position.x;\n       x_min = corner_min.position.x;\n       z_max = corner_max.position.z;\n       z_min = corner_min.position.z;\n    }\n\nprivate void Update() {\n    float xMove = Input.GetAxis(\"Horizontal\") * speed * Time.deltaTime;\n    float zMove = Input.GetAxis(\"Vertical\") * speed * Time.deltaTime;\n    float xSpeed = xMove * speed;\n    float zSpeed = zMove * speed;\n    newVelocity = new Vector3(xSpeed, 0, zSpeed);\n}\n\nvoid FixedUpdate() {\n    rigidBody.velocity = newVelocity;\n    KeepWithinMinMaxRectangle();\n}\n\n private void KeepWithinMinMaxRectangle() {\n   float x = transform.position.x;\n   float y = transform.position.y;\n   float z = transform.position.z;\n   float clampedX = Mathf.Clamp(x, x_min, x_max);\n   float clampedZ = Mathf.Clamp(z, z_min, z_max);\n   transform.position = new Vector3(clampedX, y, clampedZ);\n }\n }\n```", "```cs\nvoid OnDrawGizmos (){\n         Vector3 top_right = Vector3.zero;\n         Vector3 bottom_right = Vector3.zero;\n         Vector3 bottom_left = Vector3.zero;\n         Vector3 top_left = Vector3.zero;\n\n         if(corner_max && corner_min){\n           top_right = corner_max.position;\n           bottom_left = corner_min.position;\n\n           bottom_right = top_right;\n           bottom_right.z = bottom_left.z;\n\n           top_left = bottom_left;\n           top_left.z = top_right.z;\n         }\n\n         //Set the following gizmo colors to YELLOW\n         Gizmos.color = Color.yellow;\n\n         //Draw 4 lines making a rectangle\n         Gizmos.DrawLine(top_right, bottom_right);\n         Gizmos.DrawLine(bottom_right, bottom_left);\n         Gizmos.DrawLine(bottom_left, top_left);\n         Gizmos.DrawLine(top_left, top_right);\n       } \n```", "```cs\n    using UnityEngine;\n\n     public class BallSpawner : MonoBehaviour {\n         public GameObject prefabBall;\n         private SpawnPointManager spawnPointManager;\n         private float timeBetweenSpawns = 1;\n\n         void Start () {\n             spawnPointManager = GetComponent<SpawnPointManager> ();\n             InvokeRepeating(\"CreateSphere\", 0, timeBetweenSpawns);\n         }\n\n         private void CreateSphere() {\n             GameObject spawnPoint = \n             spawnPointManager.RandomSpawnPoint();\n\n             GameObject newBall = (GameObject)Instantiate(\n                 prefabBall, spawnPoint.transform.position, \n                 Quaternion.identity);\n             Destroy(newBall, timeBetweenSpawns/2);\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class SpawnPointManager : MonoBehaviour {\n         private GameObject[] spawnPoints;\n\n         void Start() {\n             spawnPoints = GameObject.FindGameObjectsWithTag(\"Respawn\");\n         }\n\n         public GameObject RandomSpawnPoint() {\n             int r = Random.Range(0, spawnPoints.Length);\n             return spawnPoints[r];\n         }\n     } \n```", "```cs\n    public GameObject NearestSpawnpoint (Vector3 source){\n       GameObject nearestSpawnPoint = spawnPoints[0];\n       Vector3 spawnPointPos = spawnPoints[0].transform.position;\n       float shortestDistance = Vector3.Distance(source, spawnPointPos);\n\n       for (int i = 1; i < spawnPoints.Length; i++){\n         spawnPointPos = spawnPoints[i].transform.position;\n         float newDist = Vector3.Distance(source, spawnPointPos);\n         if (newDist < shortestDistance){\n           shortestDistance = newDist;\n           nearestSpawnPoint = spawnPoints[i];\n         }\n       }\n\n       return nearestSpawnPoint;\n     } \n```", "```cs\n    private void CreateSphere(){\n       GameObject spawnPoint = \n       spawnPointManager.NearestSpawnpoint(transform.position);\n\n       GameObject newBall = (GameObject)Instantiate (prefabBall, \n       spawnPoint.transform.position, Quaternion.identity);\n       Destroy(newBall, timeBetweenSpawns/2);\n     } \n```", "```cs\n    public GameObject NearestSpawnpoint (Vector3 source){\n     void Start() {\n       spawnPoints = GameObject.FindGameObjectsWithTag(\"Respawn\");\n\n       // logError if array empty\n       if(spawnPoints.Length < 1)\n         Debug.LogError (\"SpawnPointManagaer - cannot find any objects \n         tagged 'Respawn'!\");\n     } \n```", "```cs\n    public GameObject RandomSpawnPoint (){\n       // return current GameObject if array empty\n       if(spawnPoints.Length < 1)\n         return null;\n\n     // the rest as before ... \n```", "```cs\n    private void CreateSphere(){\n       GameObject spawnPoint = spawnPointManager.RandomSpawnPoint ();\n\n       if(spawnPoint){\n         GameObject newBall = (GameObject)Instantiate (prefabBall, \n         spawnPoint.transform.position, Quaternion.identity);\n         Destroy(newBall, destroyAfterDelay);\n       }\n     } \n```", "```cs\n    using UnityEngine;\n\n     public class CheckPoint : MonoBehaviour {\n         private Vector3 respawnPosition;\n         void Start () {\n             respawnPosition = transform.position;\n         }\n\n         void OnTriggerEnter (Collider hit) {\n             if(hit.CompareTag(\"Checkpoint\"))\n                 respawnPosition = transform.position;\n\n             if(hit.CompareTag(\"Death\"))\n```", "```cs\n                 transform.position = respawnPosition;\n         }\n     } \n```", "```cs\n    using UnityEngine;\n\n     [RequireComponent(typeof(Rigidbody))]\n     public class ClickMove : MonoBehaviour {\n         public float multiplier = 500f;\n         private Rigidbody rigidBody;\n\n         private void Awake() {\n             rigidBody = GetComponent<Rigidbody>();\n         }\n\n         void OnMouseDown() {\n             float x = RandomDirectionComponent();\n             float y = RandomDirectionComponent();\n             float z = RandomDirectionComponent();\n             Vector3 randomDirection = new Vector3(x,y,z);\n             rigidBody.AddForce(randomDirection);\n         }\n\n         private float RandomDirectionComponent() {\n             return (Random.value - 0.5f) * multiplier;\n         }\n     } \n```", "```cs\n                       (0, 2.5, 0)\n    (-0.75, 1.5, 0),   (0.75, 1.5, 0)\n (-1, 0.5, 0),   (0, 0.5, 0),   (1.5, 0.5, 0)\n```", "```cs\n    using UnityEngine;\n\n     public class FireProjectile : MonoBehaviour {\n         const float FIRE_DELAY = 0.25f;\n         const float PROJECTILE_LIFE = 1.5f;\n\n         public Rigidbody projectilePrefab;\n         public float projectileSpeed = 500f;\n\n         private float nextFireTime = 0;\n\n         void Update() {\n             if (Time.time > nextFireTime)\n                 CheckFireKey();\n         }\n\n         private void CheckFireKey() {\n             if(Input.GetButton(\"Fire1\")) {\n                 CreateProjectile();\n                 nextFireTime = Time.time + FIRE_DELAY;\n             }\n         }\n\n         private void CreateProjectile() {\n             Vector3 position = transform.position;\n             Quaternion rotation = transform.rotation;\n\n             Rigidbody projectileRigidBody =\n                 Instantiate(projectilePrefab, position, rotation);\n             Vector3 projectileVelocity = transform.TransformDirection(\n                 Vector3.forward * projectileSpeed);\n\n             projectileRigidBody.AddForce(projectileVelocity);\n\n             GameObject projectileGO = projectileRigidBody.gameObject;\n             Destroy(projectileGO, PROJECTILE_LIFE);\n         }\n     } \n```"]