- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: AI-Assisted Refactoring with GitHub Copilot
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot 进行 AI 辅助重构
- en: Change is a constant in technology, and that’s certainly true in the .NET ecosystem.
    Every year, Microsoft releases a new version of .NET and C# packed with new features
    to keep the language exciting, useful, and relevant as technology changes. But
    perhaps the most significant changes to .NET development in the last two years
    have come not from the major language releases, but in the field of artificial
    intelligence through AI agents such as GitHub Copilot and ChatGPT.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 变化是技术的常态，这在 .NET 生态系统中尤为如此。每年，Microsoft 都会发布一个新的 .NET 和 C# 版本，其中包含新功能，以保持语言在技术变化中的兴奋、有用和相关性。但过去两年中，对
    .NET 开发影响最大的变化可能并非来自主要语言版本，而是来自人工智能领域，例如 GitHub Copilot 和 ChatGPT 这样的 AI 代理。
- en: In this chapter, we’ll explore how GitHub Copilot integrates into Visual Studio
    and brings ChatGPT-like conversational AI into your editor. We’ll also explore
    some of the interesting possibilities this opens and some of the things we must
    keep in mind when considering whether this new technology has a place in our toolset.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨 GitHub Copilot 如何集成到 Visual Studio 中，并将类似 ChatGPT 的对话式 AI 带入您的编辑器。我们还将探讨这一技术带来的有趣可能性，以及考虑是否将这项新技术纳入我们的工具集时必须注意的一些事项。
- en: 'We’ll cover the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing GitHub Copilot
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 GitHub Copilot
- en: Getting started with GitHub Copilot in Visual Studio
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中开始使用 GitHub Copilot
- en: Refactoring with GitHub Copilot Chat
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot Chat 进行重构
- en: Drafting documentation with GitHub Copilot Chat
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot Chat 撰写文档
- en: Generating test ideas with GitHub Copilot Chat
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot Chat 生成测试想法
- en: Understanding the limits of GitHub Copilot
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 GitHub Copilot 的局限性
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The starting code for this chapter is available from GitHub at [https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp)
    in the `Chapter11/Ch11BeginningCode` folder.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的起始代码可在 GitHub 的 [https://github.com/PacktPublishing/Refactoring-with-CSharp](https://github.com/PacktPublishing/Refactoring-with-CSharp)
    上的 `Chapter11/Ch11BeginningCode` 文件夹中找到。
- en: Introducing GitHub Copilot
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 GitHub Copilot
- en: In 2021, GitHub announced a new artificial intelligence tool called **GitHub
    Copilot**. GitHub Copilot is an editor extension that integrates into different
    editors including JetBrains Rider, VS Code, and all editions of Visual Studio
    2022.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 2021 年，GitHub 宣布了一款名为 **GitHub Copilot** 的新人工智能工具。GitHub Copilot 是一个编辑器扩展，可以集成到不同的编辑器中，包括
    JetBrains Rider、VS Code 和 Visual Studio 2022 的所有版本。
- en: 'What GitHub Copilot does is it looks at the code you just typed and generates
    predictions for the code it thinks you’re about to type. If it has a prediction
    and you are not currently typing, GitHub Copilot displays the prediction in grey
    text in front of your cursor for you to evaluate and possibly add to your code,
    as shown in *Figure 11**.1*:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 所做的是查看您刚刚输入的代码，并为它认为您即将输入的代码生成预测。如果它有一个预测，并且您当前没有在输入，GitHub Copilot
    会以灰色文本的形式在您的光标前显示预测，供您评估并可能添加到您的代码中，如图 *图 11**.1* 所示：
- en: '![Figure 11.1 – GitHub Copilot suggesting code to add as the developer types](img/B21324_11_1.jpg)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.1 – GitHub Copilot 在开发者输入代码时建议添加的代码](img/B21324_11_1.jpg)'
- en: Figure 11.1 – GitHub Copilot suggesting code to add as the developer types
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.1 – GitHub Copilot 在开发者输入代码时建议添加的代码
- en: Copilot does this by using a predictive machine learning model that has been
    trained on various pieces of code in many different programming languages, including
    C#, F#, JavaScript, and SQL.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot 通过使用一个经过各种不同编程语言（包括 C#、F#、JavaScript 和 SQL）中的代码片段训练的预测机器学习模型来实现这一点。
- en: Understanding GitHub’s predictive model
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 GitHub 的预测模型
- en: If this sounds familiar, it’s because GitHub Copilot’s model is a specialized
    machine learning model built around a promising new model training technique called
    **transformers**.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这听起来很熟悉，那是因为 GitHub Copilot 的模型是一个围绕一种名为 **transformers** 的新颖模型训练技术构建的专用机器学习模型。
- en: Transformers, introduced in 2017 in a paper called *Attention is All You Need*
    ([https://research.google/pubs/pub46201/](https://research.google/pubs/pub46201/)),
    allow machine learning models to be trained on larger bodies of text while still
    retaining the context of how different pieces of text related to each other.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 2017 年在一篇名为 *Attention is All You Need* 的论文中引入的 Transformer，允许机器学习模型在保留不同文本片段之间关系上下文的情况下，在更大的文本体上进行训练。（[https://research.google/pubs/pub46201/](https://research.google/pubs/pub46201/)）
- en: This innovation has led to technologies such as Google BERT (which powered Google
    search predictions), MidJourney, and DALL-E (which can generate art from textual
    prompts), and the extremely popular ChatGPT by OpenAI that can mimic conversations
    with humans.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这项创新导致了诸如Google BERT（为Google搜索预测提供动力的技术）、MidJourney和DALL-E（可以从文本提示生成艺术）等技术的出现，以及OpenAI的极为流行的ChatGPT，它可以模仿与人类的对话。
- en: Transformer-based models are now commonly referred to as **large language models**
    (**LLMs**). Their superpower is their ability to memorize patterns in text and
    generate new text that mimics patterns it has internalized in its model.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 基于转换器的模型现在通常被称为**大型语言模型**（**LLMs**）。它们的超级能力是记住文本中的模式，并生成模仿其模型内部吸收的模式的新文本。
- en: Ever wondered what GPT stood for?
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾想过GPT代表什么？
- en: The GPT acronym (found in ChatGPT, GPT-4, and similar) stands for **generative
    pre-trained transformer**. In other words, this is a transformer-based model used
    to generate new content, and the model has been trained on a large volume of data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: GPT缩写（在ChatGPT、GPT-4和类似系统中找到）代表**生成预训练转换器**。换句话说，这是一个基于转换器的模型，用于生成新内容，并且该模型是在大量数据上训练的。
- en: 'These LLMs take in a textual prompt and generate some form of output. With
    chat LLMs, the prompt might be a question such as “What is .NET?” and the output
    might be a short description of .NET, as pictured in this interaction with Bing
    Chat ([https://www.bing.com/](https://www.bing.com/)) in *Figure 11**.2*:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些LLM接受文本提示并生成某种形式的输出。在聊天LLM中，提示可能是一个问题，例如“什么是.NET？”输出可能是对.NET的简短描述，如图11.2中Bing
    Chat的交互所示（[https://www.bing.com/](https://www.bing.com/))）：
- en: '![Figure 11.2 – Bing Chat describing .NET in response to a short prompt](img/B21324_11_2.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![图11.2 – Bing Chat在接收到简短提示后描述.NET](img/B21324_11_2.jpg)'
- en: Figure 11.2 – Bing Chat describing .NET in response to a short prompt
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – Bing Chat在接收到简短提示后描述.NET
- en: There is no intelligent understanding built into an LLM. These models do not
    think or have thoughts of their own, but rather use mathematics to identify similarities
    between the text they receive and the large volumes of text the model was trained
    on.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: LLM中并没有内置智能理解。这些模型不会思考或有自己的想法，而是使用数学来识别它们收到的文本与模型训练时所接触的大量文本之间的相似性。
- en: While LLM systems may seem eerily intelligent at times, this is because they
    are emulating the intelligence of the authors of the various books, blog posts,
    tweets, and other materials they’ve been trained on.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然LLM系统在某些时候可能看起来非常智能，但这是因为它们正在模仿它们所训练的各种书籍、博客文章、推文和其他材料作者的智能。
- en: GitHub Copilot uses an LLM called **Codex**. The Codex model is produced by
    OpenAI and was trained not on blog posts or tweets but on open-source software
    repositories.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot使用一个名为**Codex**的LLM。Codex模型由OpenAI生产，并且不是在博客文章或推文上训练，而是在开源软件仓库上训练。
- en: This means that when you type something into your editor, the text you type
    can be used as a prompt to predict the next line of code you might type. This
    is very similar to how Google search predicts the next few words in a search term
    or how ChatGPT generates textual replies.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当你将某些内容输入到你的编辑器时，你输入的文本可以用作提示来预测你可能输入的下一条代码。这与Google搜索预测搜索词中的下几个单词或ChatGPT生成文本回复的方式非常相似。
- en: We’ll talk more about the use of open-source code in GitHub Copilot and whether
    it is appropriate to use GitHub Copilot in a workplace project near the end of
    this chapter. For now, let’s move on to some of the newer aspects of GitHub Copilot.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章末尾更详细地讨论GitHub Copilot中开源代码的使用以及是否在职场项目中使用GitHub Copilot是合适的。现在，让我们继续探讨GitHub
    Copilot的一些新特性。
- en: Starting the conversation with GitHub Copilot Chat
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用GitHub Copilot Chat开始对话
- en: GitHub extended Copilot’s code generation capabilities by introducing **GitHub
    Copilot Chat**. GitHub Copilot Chat gives you the ability to interact with a conversational
    AI agent like ChatGPT directly in your editor.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub通过引入**GitHub Copilot Chat**扩展了Copilot的代码生成功能。GitHub Copilot Chat让你能够直接在编辑器中与ChatGPT这样的对话式AI代理进行交互。
- en: 'This means that you can chat with an LLM in Visual Studio and do things such
    as the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你可以在Visual Studio中与LLM聊天，并执行以下操作：
- en: Ask it to explain a block of code
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让它解释一段代码
- en: Generate new code using textual prompts
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用文本提示生成新代码
- en: Ask Copilot for ways to improve the quality of your code
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向Copilot询问提高代码质量的方法
- en: Have Copilot draft unit tests or documentation for methods
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让Copilot为方法草拟单元测试或文档
- en: I’ve even used Copilot to generate intentionally messy code just to practice
    refactoring.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我甚至使用 Copilot 生成故意混乱的代码来练习重构。
- en: 'A typical interaction with GitHub Copilot Chat involves the user selecting
    some code and then pressing *Alt* + */* to start a conversation. For example,
    *Figure 11**.3* shows the user typing a text prompt to GitHub Copilot Chat with
    a small block of code selected:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与 GitHub Copilot Chat 的典型交互涉及用户选择一些代码，然后按 *Alt* + */* 以开始对话。例如，*图 11**.3* 显示了用户在
    GitHub Copilot Chat 中输入文本提示，并选择了一小段代码：
- en: '![Figure 11.3 – Asking GitHub Copilot Chat a question](img/B21324_11_3.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.3 – 向 GitHub Copilot Chat 提问](img/B21324_11_3.jpg)'
- en: Figure 11.3 – Asking GitHub Copilot Chat a question
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.3 – 向 GitHub Copilot Chat 提问
- en: 'From there, GitHub Copilot Chat generates a textual response that is shown
    to the user, as seen in *Figure 11**.4*:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从那里，GitHub Copilot Chat 生成一个文本响应，并将其显示给用户，如图 *图 11**.4* 所示：
- en: '![Figure 11.4 – GitHub Copilot generating an explanation of the block of code](img/B21324_11_4.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.4 – GitHub Copilot 生成代码块的说明](img/B21324_11_4.jpg)'
- en: Figure 11.4 – GitHub Copilot generating an explanation of the block of code
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – GitHub Copilot 生成代码块的说明
- en: If you feel you’re too experienced with C# to fully benefit from this feature,
    I want to assure you that it has value beyond basic programming. Sometimes when
    maintaining code, you’ll encounter strange method calls that don’t make sense
    and you don’t have any documentation to tell you what the developer was trying
    to do. When this happens, having Chat’s opinion can be very valuable in understanding
    the intent of the developer who wrote the code.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你觉得自己对 C# 经验丰富，无法充分利用这个功能，我想向你保证，它不仅限于基本的编程。有时在维护代码时，你会遇到没有意义且你没有任何文档可以告诉你开发者试图做什么的奇怪方法调用。当这种情况发生时，Chat
    的意见在理解编写代码的开发者的意图方面非常有价值。
- en: Of course, Chat can be used to generate code, as we’ll see in the next section.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Chat 可以用来生成代码，正如我们将在下一节中看到的。
- en: The bottom line for me is that programming with GitHub Copilot Chat is something
    that not only amplifies my capabilities as a developer but also helps keep me
    focused since I have fewer reasons to go check the documentation or leave my editor.
    Between the automation capabilities built into the Chat LLM and this added extra
    focus, GitHub Copilot Chat is a significant boost to my productivity and capabilities.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，底线是使用 GitHub Copilot Chat 编程不仅能增强我作为开发者的能力，还能帮助我保持专注，因为我没有太多理由去查看文档或离开我的编辑器。Chat
    LLM 内置的自动化能力加上这种额外的专注力，GitHub Copilot Chat 对我的生产力和能力有着显著的提升。
- en: I suspect you’ll like GitHub Copilot Chat too, so let’s see how to get started.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我怀疑你也会喜欢 GitHub Copilot Chat，那么让我们看看如何开始使用它。
- en: Getting started with GitHub Copilot in Visual Studio
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中开始使用 GitHub Copilot
- en: In order to work with GitHub Copilot, you’ll need to have a GitHub account.
    If you don’t have one, you can sign up for a free GitHub account at [https://github.com/signup](https://github.com/signup).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 GitHub Copilot，你需要有一个 GitHub 账户。如果你还没有，你可以在 [https://github.com/signup](https://github.com/signup)
    注册一个免费的 GitHub 账户。
- en: GitHub Copilot also requires that you work with Visual Studio 2022 version 17.4.4
    or later. If you haven’t installed Visual Studio, you can download a copy at [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 还要求你使用 Visual Studio 2022 版本 17.4.4 或更高版本。如果你还没有安装 Visual Studio，你可以在
    [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)
    下载一个副本。
- en: 'If you need to update or check your Visual Studio version, a quick way of doing
    either task is to launch the **Visual Studio Installer** from the Windows menu.
    This will let you see your current version and optionally update your edition
    of Visual Studio, as shown in *Figure 11**.5*:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要更新或检查你的 Visual Studio 版本，一个快速完成任务的方法是从 Windows 菜单启动 **Visual Studio 安装程序**。这将让你看到当前版本，并可选择更新你的
    Visual Studio 版本，如图 *图 11**.5* 所示：
- en: '![Figure 11.5 – Updating Visual Studio from the Visual Studio Installer](img/B21324_11_5.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.5 – 从 Visual Studio 安装程序更新 Visual Studio](img/B21324_11_5.jpg)'
- en: Figure 11.5 – Updating Visual Studio from the Visual Studio Installer
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 从 Visual Studio 安装程序更新 Visual Studio
- en: Once you have a GitHub account and an up-to-date edition of Visual Studio, you
    can install the GitHub Copilot extension.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有了 GitHub 账户和最新的 Visual Studio 版本，你就可以安装 GitHub Copilot 扩展了。
- en: Installing and activating GitHub Copilot
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和激活 GitHub Copilot
- en: 'To install GitHub Copilot, launch Visual Studio, choose the **Extensions**
    menu, and then select **Manage Extensions**. Next, search for **GitHub Copilot**
    and download and install the extension, as shown in *Figure 11**.6*:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 GitHub Copilot，启动 Visual Studio，选择 **扩展** 菜单，然后选择 **管理扩展**。接下来，搜索 **GitHub
    Copilot** 并下载并安装扩展程序，如图 *图 11**.6* 所示：
- en: '![Figure 11.6 – Installing GitHub Copilot in Visual Studio](img/B21324_11_6.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.6 – 在 Visual Studio 中安装 GitHub Copilot](img/B21324_11_6.jpg)'
- en: Figure 11.6 – Installing GitHub Copilot in Visual Studio
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.6 – 在 Visual Studio 中安装 GitHub Copilot
- en: Next, you will need to log in to GitHub within Visual Studio to link the extension
    to your GitHub account. Follow the instructions at [https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio](https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio)
    for the most up-to-date instructions on how to do this.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要在 Visual Studio 中登录 GitHub，以将扩展程序链接到您的 GitHub 账户。请按照[https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio](https://docs.github.com/en/copilot/getting-started-with-github-copilot?tool=visualstudio)中的说明进行操作，以获取最新的操作指南。
- en: GitHub Copilot Chat is currently a separate extension from GitHub Copilot. If
    you want to try Chat, I recommend you install Copilot on its own and ensure it
    works first. Once you’ve done this, repeat the installation process for the Chat
    extension.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot Chat 目前是 GitHub Copilot 的一个独立扩展。如果您想尝试 Chat，我建议您单独安装 Copilot
    并确保它首先正常工作。完成此操作后，重复安装 Chat 扩展程序的过程。
- en: Some GitHub Copilot features, such as Chat, may need to be enabled or require
    additional configuration. You can do so by going to the **Tools** menu and then
    selecting **Options…** and finding the **GitHub** node in the list.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 GitHub Copilot 功能，如 Chat，可能需要启用或进行额外配置。您可以通过转到 **工具** 菜单并选择 **选项…** 来这样做，然后在列表中找到
    **GitHub** 节点。
- en: Getting access to GitHub Copilot
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取 GitHub Copilot 访问权限
- en: While GitHub itself is free, GitHub Copilot is a premium feature that requires
    you to have a GitHub Premium license or be part of GitHub Copilot for Business
    account. We’ll talk more about the benefits of Copilot for Business near the end
    of this chapter.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GitHub 本身是免费的，但 GitHub Copilot 是一个高级功能，需要您拥有 GitHub Premium 许可证或成为 GitHub
    Copilot for Business 账户的一部分。我们将在本章末尾更多地讨论 Copilot for Business 的好处。
- en: At the time of this writing, GitHub charges $10 USD/month for individuals or
    $19/month per user for a Copilot for Business account. As with any emerging technology,
    pricing and availability may change over time.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，GitHub 对个人用户收取 10 美元/月费用，对 Copilot for Business 账户的每个用户收取 19 美元/月费用。与任何新兴技术一样，定价和可用性可能会随时间变化。
- en: Now that we’ve covered how to install and get access to Copilot, let’s see it
    in action.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了如何安装和获取对 Copilot 的访问权限，让我们看看它是如何工作的。
- en: Generating suggestions with GitHub Copilot
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot 生成建议
- en: In your `Program.cs` file for this chapter’s code, type a comment such as `//
    Populate a list of random numbers`, then move down to the next line.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章代码的 `Program.cs` 文件中，输入一条注释，例如 `// 填充一个随机数字列表`，然后移动到下一行。
- en: 'Next, type the letters `Ra` and wait a moment before continuing. If everything
    is configured right, you should hopefully see a suggestion similar to the one
    I encountered in *Figure 11**.7*:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入字母 `Ra` 并等待片刻再继续。如果一切配置正确，您应该会看到类似于我在 *图 11**.7* 中遇到的建议。
- en: '![Figure 11.7 – GitHub Copilot helping at Random](img/B21324_11_7.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.7 – GitHub Copilot 在随机帮助](img/B21324_11_7.jpg)'
- en: Figure 11.7 – GitHub Copilot helping at Random
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.7 – GitHub Copilot 在随机帮助
- en: Here, GitHub Copilot has suggested some code based on the context it has observed
    in the area. In my case, its suggestion was `Random rand = new Random();`, which
    is a valid C# code.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，GitHub Copilot 根据其在该区域观察到的上下文提出了一些代码建议。以我的情况为例，它的建议是 `Random rand = new
    Random();`，这是一段有效的 C# 代码。
- en: In your case, it may suggest something different, including something that potentially
    doesn’t even make sense or compile.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的情况下，它可能会提出不同的建议，包括可能甚至没有意义或无法编译的建议。
- en: Keep in mind that LLMs such as GitHub Copilot are not intelligent, but they
    memorize patterns and trends in their training data. Sometimes those trends work,
    while other times they look plausible but reference properties or capabilities
    that simply don’t exist.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，GitHub Copilot 等大型语言模型并不智能，但它们会记住训练数据中的模式和趋势。有时这些趋势是有效的，而有时它们看起来合理，但参考了根本不存在的属性或功能。
- en: Because GitHub Copilot and systems like it are trained on older code, you’ll
    sometimes notice Copilot generating out-of-date code or code using obsolete APIs.
    It’s also entirely possible that Copilot generates code with bugs, security vulnerabilities,
    performance issues, or other bad things. It’s your responsibility as a programmer
    to identify good and bad code.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitHub Copilot 和类似系统是在旧代码上训练的，您有时会注意到 Copilot 生成过时代码或使用过时 API 的代码。Copilot
    生成带有错误、安全漏洞、性能问题或其他不良内容的代码也是完全可能的。作为程序员，您有责任识别好代码和坏代码。
- en: Now that we’ve covered the basics of working with Copilot, let’s see what this
    has to do with refactoring by working with GitHub Copilot Chat.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了与 Copilot 一起工作的基础知识，让我们看看这与通过 GitHub Copilot Chat 进行重构有什么关系。
- en: Interacting with GitHub Copilot Chat
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与 GitHub Copilot Chat 交互
- en: With GitHub Copilot Chat installed and configured, let’s try our experiment
    again with a list of random numbers.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装并配置了 GitHub Copilot Chat 之后，让我们再次尝试使用随机数字列表进行实验。
- en: Remove any code you added after the comment on populating a list of random numbers.
    Next, move your typing cursor to the line below the comment as if you were about
    to start typing a line of code there.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 删除在填充随机数字列表注释之后添加的任何代码。然后，将您的输入光标移动到注释下面的行，就像您即将在那里开始输入一行代码一样。
- en: 'From here, let’s show the GitHub Copilot Chat window by selecting **View**
    and then choosing **GitHub Copilot Chat**. You should see the **GitHub Copilot
    Chat** pane, shown in *Figure 11**.8*:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，让我们通过选择**视图**然后选择**GitHub Copilot Chat**来显示 GitHub Copilot Chat 窗口。您应该会看到**GitHub
    Copilot Chat**窗格，如图 *图 11.8* 所示：
- en: '![Figure 11.8 – The GitHub Copilot Chat pane](img/B21324_11_8.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.8 – GitHub Copilot Chat 窗格](img/B21324_11_8.jpg)'
- en: Figure 11.8 – The GitHub Copilot Chat pane
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8 – GitHub Copilot Chat 窗格
- en: 'In the text box, type in `Generate a list of 10 random numbers` and press *Enter*.
    With any luck, you should see something like *Figure 11**.9*:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本框中输入 `生成一个包含 10 个随机数字的列表` 并按 *Enter*。如果有任何运气，您应该会看到类似于 *图 11.9* 的内容：
- en: '![Figure 11.9 – A code suggestion from GitHub Copilot Chat](img/B21324_11_9.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.9 – GitHub Copilot Chat 的代码建议](img/B21324_11_9.jpg)'
- en: Figure 11.9 – A code suggestion from GitHub Copilot Chat
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9 – GitHub Copilot Chat 的代码建议
- en: If you’ve ever interacted with ChatGPT or similar conversational AI agents,
    this should look very similar to that experience. In this case, Copilot Chat generated
    some code that we can accept either by clicking on the first button to copy the
    code or the **Insert** button to add it to the editor directly.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您曾经与 ChatGPT 或类似的对话式 AI 代理交互过，这应该与那种体验非常相似。在这种情况下，Copilot Chat 生成了一些代码，我们可以通过点击第一个按钮来复制代码，或者点击**插入**按钮将其直接添加到编辑器中。
- en: After clicking `Main` method. Click **Accept** and the code will be inserted.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在点击 `Main` 方法后。点击**接受**，代码将被插入。
- en: Tip
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you don’t like working with the GitHub Copilot Chat pane, you can bring up
    GitHub Copilot Chat suggestions at any time with the *Alt* + */* keyboard shortcut.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不喜欢使用 GitHub Copilot Chat 窗格，您可以通过 *Alt* + */* 键盘快捷键在任何时候调出 GitHub Copilot
    Chat 建议。
- en: 'If GitHub Copilot Chat doesn’t seem like it’s working, open the **Output**
    view and choose **Show output from: GitHub Copilot Chat**, as shown in *Figure
    11**.10*:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果 GitHub Copilot Chat 似乎不起作用，请打开**输出**视图并选择**显示来自：GitHub Copilot Chat**，如图
    *图 11.10* 所示：
- en: '![Figure 11.10 – Diagnostic information from GitHub Copilot Chat](img/B21324_11_10.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.10 – GitHub Copilot Chat 的诊断信息](img/B21324_11_10.jpg)'
- en: Figure 11.10 – Diagnostic information from GitHub Copilot Chat
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10 – GitHub Copilot Chat 的诊断信息
- en: This diagnostic information has helped me track down a few issues, but equally
    often the solution is simply to re-open Visual Studio. Thankfully, this diagnostic
    information is rarely ever needed, but it’s nice to know where to find it if you
    need it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这项诊断信息帮助我找到了几个问题，但同样经常的解决方案是简单地重新打开 Visual Studio。幸运的是，这种诊断信息很少需要，但知道在哪里找到它总是好的。
- en: Now that we’ve seen Copilot at work, let’s use it to refactor some code.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了 Copilot 的工作，让我们用它来重构一些代码。
- en: Refactoring with GitHub Copilot Chat
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot Chat 进行重构
- en: Because GitHub Copilot Chat was trained on open-source repositories, it has
    had a lot of exposure to people writing about code. Because of this, its likelihood
    of being able to provide helpful insight is high.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 GitHub Copilot Chat 是在开源存储库上训练的，它已经接触到了很多人关于代码的写作。正因为如此，它提供有用见解的可能性很高。
- en: 'To see this, we’ll refactor the aptly-named `RefactorMe.cs` file, which looks
    like this:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 为了看到这一点，我们将重构名为 `RefactorMe.cs` 的文件，其外观如下：
- en: '[PRE0]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code has some deliberate inefficiencies, and there’s even a potentially
    dangerous bug I sometimes see with `Random`. I’ll give you a few paragraphs to
    see if you can spot the issue, but let’s see if GitHub Copilot Chat can spot it.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码存在一些故意的低效之处，甚至有时我会遇到一个与`Random`相关的潜在危险错误。我会给你几段代码，让你看看是否能找出问题所在，但让我们也看看GitHub
    Copilot Chat是否能发现这个问题。
- en: Select the `DisplayRandomNumbers` method and then press *Alt* + */* to open
    the chat prompt. Next, ask Copilot `How would you improve` `this code?`
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 选择 `DisplayRandomNumbers` 方法，然后按 *Alt* + */* 组合键打开聊天提示。接下来，询问 Copilot “你将如何改进`this
    code`？”
- en: 'When I asked Copilot, I got several suggestions, as shown in *Figure 11**.11*:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当我询问Copilot时，我得到了几个建议，如图*图11*所示：
- en: '![Figure 11.11 – GitHub Copilot Chat acting as a code reviewer](img/B21324_11_11.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图11.11 – GitHub Copilot Chat充当代码审查员](img/B21324_11_11.jpg)'
- en: Figure 11.11 – GitHub Copilot Chat acting as a code reviewer
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11 – GitHub Copilot Chat 作为代码审查员
- en: 'Looking over the suggestions I encountered (which might be different from the
    ones you see following this same experiment), I can summarize them into a few
    bullet points:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 检视我遇到的建议（可能与你在进行相同实验后看到的建议不同），我可以将其总结为以下几点：
- en: Declare the `Random` outside of the loop for performance reasons
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了性能原因，将`Random`声明在循环外部
- en: Since you know the size of the list, declare it as `new List<int>(10)`
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于你知道列表的大小，请将其声明为`new List<int>(10)`
- en: Use a `foreach` and an `Enumerable.Range` instead of a `for` loop
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `foreach` 和 `Enumerable.Range` 而不是 `for` 循环
- en: 'Not only did GitHub Copilot Chat generate ideas for improvement, but it even
    suggested the following code to fulfill its suggestions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅 GitHub Copilot Chat 产生了改进的想法，甚至还建议了以下代码来满足其建议：
- en: '[PRE1]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Here, Copilot suggested some improvements I was considering, such as moving
    Random outside of the loop, and a few I wasn’t, such as using `Enumerable.Range`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Copilot建议了一些我正在考虑的改进，例如将Random移出循环之外，以及一些我没有考虑的，例如使用`Enumerable.Range`。
- en: What was the bug?
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 出了什么bug？
- en: If you’re curious about the potential bug I mentioned, it had to do with `Random`
    being instantiated in the loop. Every time you run `new Random()`, it uses the
    current system time as a random seed to generate new numbers. If you do this in
    a fast loop, the clock stays the same, resulting in the same sequence of “random”
    numbers every iteration.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对提到的潜在错误感到好奇，它与在循环中实例化`Random`有关。每次你运行`new Random()`，它都会使用当前系统时间作为随机种子来生成新的数字。如果你在快速循环中这样做，时钟保持不变，导致每次迭代都产生相同的“随机”数字序列。
- en: Looking at the recommended code, I notice a few opportunities for improvement,
    such as renaming the `n` variable to something more meaningful, using target-typed
    `new` to instantiate the objects, and discarding the unused `i` variable with
    the `_` operator.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 查看推荐的代码，我发现了一些改进的机会，例如将`n`变量重命名为更有意义的名称，使用目标类型`new`来实例化对象，以及使用`_`运算符丢弃未使用的`i`变量。
- en: 'Between GitHub and myself, our final code for this method is as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub和我自己之间，我们为此方法编写的最终代码如下：
- en: '[PRE2]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The resulting code is more concise, slightly more performant in its list allocation,
    and ultimately represents a slightly better result for a small piece of code.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 由此产生的代码更加简洁，在列表分配方面略为高效，最终对于一小段代码来说，代表了一个更好的结果。
- en: The purpose of this section wasn’t to show you how to generate random numbers,
    but instead for you to see the potential value chat offers as a “brainless” programming
    buddy who can review your code and generate suggestions. These suggestions won’t
    always make sense or even compile, but they can give you a quick external perspective
    when your coworkers are unavailable.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目的并非向您展示如何生成随机数，而是让您看到聊天作为一位“无脑”编程伙伴所能提供的潜在价值。这位伙伴可以审查您的代码并提出建议。这些建议并不总是有道理，甚至可能无法编译，但它们可以在同事不在场时为您提供快速的外部视角。
- en: GitHub Copilot Chat as a code reviewer
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Copilot Chat 作为代码审查员
- en: 'GitHub Copilot Chat’s value for refactoring isn’t just limited to code generation.
    You can also ask GitHub Copilot Chat questions such as the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot Chat 在重构方面的价值并不仅限于代码生成。你还可以向 GitHub Copilot Chat 提出如下问题：
- en: Can you review this code as if you were a senior engineer in a code review?
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你能否像一位资深工程师一样审查这段代码？
- en: What performance optimizations can be made to this method?
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该方法可以进行哪些性能优化？
- en: How can I make this method more readable?
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where would this method encounter errors?
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这种方法会在哪里遇到错误？
- en: Are there any ways of reducing or combining lines that don’t hurt the overall
    readability?
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有没有减少或合并行数的方法，而不会损害整体的可读性？
- en: Of course, it’s important to remember that you’re effectively getting advice
    from an LLM that is essentially a glorified autocompletion/sentence prediction
    engine and not a being with intelligent or original thought.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，重要的是要记住，你实际上是在从本质上是一个被美化的自动完成/句子预测引擎的LLM那里获得建议，而不是一个具有智能或原创思想的实体。
- en: Amusingly, I’ve noticed that asking GitHub Copilot Chat for its opinion on methods
    several times can yield different results. These results can even reverse the
    opinion of the original recommendations that Copilot provided! Still, this can
    be valuable in getting a variety of perspectives.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我注意到多次向GitHub Copilot Chat询问关于方法的意见可以产生不同的结果。这些结果甚至可以改变Copilot最初提供的原始建议的意见！尽管如此，这仍然可以提供多种观点。
- en: Before we move on, let’s look at another example of refactoring code.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们看看另一个重构代码的例子。
- en: Targeted refactoring with GitHub Copilot Chat
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub Copilot Chat的目标重构
- en: This refactoring example focuses on the `BaggageCalculator.cs` file. This file
    holds the final version of the `BaggageCalculator` class from the end of [*Chapter
    2*](B21324_02.xhtml#_idTextAnchor026).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这个重构示例主要关注`BaggageCalculator.cs`文件。这个文件包含了从[*第2章*](B21324_02.xhtml#_idTextAnchor026)结尾的`BaggageCalculator`类的最终版本。
- en: As a quick reminder, this class has a `CalculatePrice` method that calculates
    and displays the baggage fee for a customer based on the number of checked-in
    and carry-on bags and whether they’re traveling on a holiday.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 作为快速提醒，这个类有一个`CalculatePrice`方法，它根据已登记的和随身携带的行李数量以及他们是否在假日旅行来计算和显示客户的行李费用。
- en: Supporting the public `CalculatePrice` method is a private static `ApplyCheckedBagFee`
    method that calculates the fee of a checked bag.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 支持公共`CalculatePrice`方法的是私有的静态`ApplyCheckedBagFee`方法，它计算已登记行李的费用。
- en: 'We’ll focus largely on the `CalculatePrice` method, which looks a little repetitive:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将主要关注`CalculatePrice`方法，它看起来有点重复：
- en: '[PRE3]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Looking at this code, we see three similar blocks that check a condition, calculate
    a fee, display that fee, and then add it to `total`.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 看着这段代码，我们看到有三个类似的块，它们检查一个条件，计算费用，显示该费用，然后将其添加到`total`中。
- en: This repetitive nature of the code strikes me as a code smell that could potentially
    be improved. One solution would be to extract a method for each of these three
    blocks, but these methods would still be very similar to each other.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的重复性让我觉得这是一个可能得到改进的代码异味。一个解决方案是为这三个块中的每一个提取一个方法，但这些方法之间仍然非常相似。
- en: Instead, I naturally wonder if there’s a solution that might involve an `Action`
    or a `Func`, but I’m not immediately certain of what such a solution might look
    like.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我自然会想，是否有一个可能涉及`Action`或`Func`的解决方案，但我并不立即确定这样的解决方案可能是什么样子。
- en: Thankfully, we can ask Copilot about this by selecting the entire method and
    telling GitHub Copilot Chat `Refactor this method to use an Action that writes
    the fee out and adds it to total so the three blocks are` `less repetitive`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，我们可以通过选择整个方法并告诉GitHub Copilot Chat“重构这个方法，使用一个写入费用并将其添加到总金额的Action，这样三个块就”`不那么重复`“来询问Copilot。
- en: 'For me, this resulted in the following method:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，这导致了以下方法：
- en: '[PRE4]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Here, Copilot introduced a local `addFeeToTotal` variable storing an `Action`
    that writes the `fee` to the console and increments `total`. It then calls this
    `Action` from each of the three branches.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Copilot引入了一个局部`addFeeToTotal`变量，它存储一个将`fee`写入控制台并增加`total`的`Action`。然后它从三个分支中的每一个调用这个`Action`。
- en: However, this refactoring was incorrect in a few regards. First, the messages
    being displayed now start with `Fee` instead of the appropriate fee name. Second,
    the refactoring didn’t remove the `WriteLine` for the holiday fee, so that `fee`
    would be displayed twice.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个重构在几个方面是不正确的。首先，现在显示的消息现在以`Fee`开头，而不是适当的费用名称。其次，重构没有删除假日费用的`WriteLine`，所以`fee`会被显示两次。
- en: 'Still, the refactoring does give us an idea of how the code could be improved.
    With a little clean-up, you end up with a more correct method:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，重构确实给了我们一个关于代码如何改进的想法。稍加整理，你最终会得到一个更正确的方法：
- en: '[PRE5]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This code now works properly and reduces duplication. In this particular case,
    Copilot was able to suggest a path forward, but accurately implementing it without
    introducing bugs was beyond its current abilities.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码现在工作正常并减少了重复。在这种情况下，Copilot能够提出一个前进的方向，但准确实现它而不引入错误超出了它当前的能力。
- en: This limit underscores both the need for tests and the role of Copilot as the
    *partner* of the human programmer and not a *replacement* for the human.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个限制强调了测试的需求以及 Copilot 作为人类程序员的 *伙伴* 而不是 *替代者* 的角色。
- en: Reminder
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒
- en: Remember that GitHub Copilot Chat, ChatGPT, and other generative AI systems
    based on large language models are just prediction machines that generate text
    that follows patterns from their training data. There is nothing guaranteeing
    that these generated values are correct, optimal, or free of bugs.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，GitHub Copilot Chat、ChatGPT 以及基于大型语言模型的其他生成式 AI 系统只是预测机器，它们生成遵循其训练数据模式文本。没有任何保证这些生成的值是正确的、最优的或无错误的。
- en: Now that we’ve covered a few refactoring scenarios, let’s see what else we can
    do with GitHub Copilot Chat.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了几种重构场景，让我们看看我们还能用 GitHub Copilot Chat 做些什么。
- en: Drafting documentation with GitHub Copilot Chat
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 GitHub Copilot Chat 起草文档
- en: Over the years, I’ve learned that developers don’t always like to document their
    code. While some code truly is self-documenting as developers claim, other areas
    require proper documentation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这些年来，我了解到开发者并不总是喜欢为他们的代码编写文档。虽然有些代码确实像开发者所声称的那样具有自文档性，但其他区域则需要适当的文档。
- en: 'In C#, we document public methods with XML documentation, such as the sample
    comment for the `DisplayRandomNumbers` method:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C# 中，我们使用 XML 文档来记录公共方法，例如 `DisplayRandomNumbers` 方法的示例注释：
- en: '[PRE6]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This specially formatted comment is interpreted by Visual Studio to display
    additional help in the editor. This extra information appears in the editor when
    you are trying to invoke your method, as shown in *Figure 11**.12*:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这条特殊格式的注释被 Visual Studio 解释为在编辑器中显示额外的帮助。当你尝试调用你的方法时，这些额外信息会出现在编辑器中，如图 *图 11.12*
    所示：
- en: '![Figure 11.12 – Visual Studio showing a tooltip containing the method comment](img/B21324_11_12.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.12 – Visual Studio 显示包含方法注释的工具提示](img/B21324_11_12.jpg)'
- en: Figure 11.12 – Visual Studio showing a tooltip containing the method comment
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12 – Visual Studio 显示包含方法注释的工具提示
- en: Although the sample documentation we saw a moment ago was relatively straightforward,
    documentation gets a bit more complex when you have return values and parameters.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们刚才看到的示例文档相对简单，但当涉及到返回值和参数时，文档会变得稍微复杂一些。
- en: 'Let’s use GitHub Copilot Chat to document a method. We’ll start with the `AddEvenNumbers`
    method in `DocumentMe.cs`:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 GitHub Copilot Chat 来记录一个方法。我们将从 `DocumentMe.cs` 中的 `AddEvenNumbers` 方法开始：
- en: '[PRE7]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This method takes in an array of numbers and, optionally, a number to add to
    the resulting sum. If at least one number was provided, the method returns the
    sum of all even numbers in that array added to the optional `total` parameter.
    If no elements were provided, an `ArgumentException` will be thrown instead.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法接受一个数字数组，以及可选地添加到结果总和中的数字。如果至少提供了一个数字，则方法返回该数组中所有偶数的总和，加上可选的 `total` 参数。如果没有提供元素，则将抛出
    `ArgumentException`。
- en: 'Now that you’ve read *my* description of this, let’s see how GitHub Copilot
    describes it. Press *Alt* + */* to open the chat interface and then tell Copilot
    to `Document AddEvenNumbers`. Copilot should suggest documentation changes such
    as the ones shown in the preview in *Figure 11**.12*:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经阅读了我的描述，让我们看看 GitHub Copilot 如何描述它。按 *Alt* + */* 打开聊天界面，然后告诉 Copilot `Document
    AddEvenNumbers`。Copilot 应该建议如 *图 11.12* 预览中所示的文档更改：
- en: '![Figure 11.13 – GitHub Copilot suggesting documentation](img/B21324_11_13.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.13 – GitHub Copilot 建议的文档](img/B21324_11_13.jpg)'
- en: Figure 11.13 – GitHub Copilot suggesting documentation
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13 – GitHub Copilot 建议的文档
- en: Click **Accept** and the comments will be added to your method.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **接受**，评论将被添加到你的方法中。
- en: 'For me, the documentation generated was reasonably good:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我来说，生成的文档相当不错：
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This is a very accurate piece of documentation. The one change I would make
    is to add the following line of XML documenting the potential exception:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一份非常准确的文档。我唯一会做的修改是添加以下行 XML 文档来记录潜在的异常：
- en: '[PRE9]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This adds the exception to the list shown in the method tooltip, as seen in
    *Figure 11**.13*:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将异常添加到方法提示中显示的列表中，如图 *图 11.13* 所示：
- en: '![Figure 11.14 – Exception documentation in Visual Studio](img/B21324_11_14.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图 11.14 – Visual Studio 中的异常文档](img/B21324_11_14.jpg)'
- en: Figure 11.14 – Exception documentation in Visual Studio
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14 – Visual Studio 中的异常文档
- en: Communicating exceptions allows other code to catch them in an appropriate manner.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 传达异常允许其他代码以适当的方式捕获它们。
- en: Human-generated documentation will usually be better than AI documentation,
    but when humans and AI can work together, it can be a huge productivity boost.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 人类生成的文档通常会比AI生成的文档更好，但当人类和AI可以一起工作时，它可以是一个巨大的生产力提升。
- en: In the next section, we’ll see how these productivity boosts apply to testing
    as well.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将看到这些生产力提升如何应用于测试。
- en: Generating test stubs with GitHub Copilot Chat
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GitHub Copilot聊天生成测试存根
- en: 'For our final technical section of this chapter, let’s look at a method that
    finds the largest number in a sequence of numbers, provided that the number doesn’t
    have a “7” in it somewhere, such as a 71 or 17\. This method is located inside
    of `TestMe.cs`:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后技术部分，让我们看看一个方法，该方法可以在一个数字序列中找到最大的数字，前提是这个数字在某处不包含“7”，例如71或17。这个方法位于`TestMe.cs`内部：
- en: '[PRE10]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This `CalculateLargestNumberWithoutASeven` method takes in an `INumberProvider`
    that allows us to call `GenerateNumbers` and get a sequence of integers.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`CalculateLargestNumberWithoutASeven`方法接受一个`INumberProvider`，允许我们调用`GenerateNumbers`并获取一系列整数。
- en: Next, the method looks at the resulting sequence, finds the numbers that don’t
    have a seven somewhere in their string representation, and then returns the largest
    number.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，方法查看生成的序列，找到字符串表示中不包含“7”的数字，然后返回最大的数字。
- en: Dependency injection
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖注入
- en: As a brief refresher, our method is effectively getting its dependency on an
    `INumberProvider` injected into it as an external parameter. This means the code
    works with anything that implements that interface without having to know the
    details.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 作为简要的复习，我们的方法实际上是通过外部参数将`INumberProvider`的依赖注入其中。这意味着代码可以与实现该接口的任何东西一起工作，而无需了解其细节。
- en: While this method seems utterly useless as something you might write in the
    real world, think for a moment about how you would test this method. Specifically,
    how would you call this method? What would you give it as an `INumberProvider`?
    What value would you expect it to return?
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个方法看起来在现实世界中似乎毫无用处，但请思考一下你将如何测试这个方法。具体来说，你会如何调用这个方法？你会给它什么作为`INumberProvider`？你期望它返回什么值？
- en: While you’re thinking that over, let’s see how GitHub Copilot would handle this
    by opening the GitHub Copilot Chat pane and typing in `Generate tests` `for CalculateLargestNumberWithoutASeven.`
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在思考这个问题的时候，让我们看看GitHub Copilot会如何处理，通过打开GitHub Copilot聊天窗格并输入`Generate tests`
    `for CalculateLargestNumberWithoutASeven.`。
- en: Note
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While I usually prefer to use the *Alt* + */* method of interacting with Copilot,
    if you want Copilot to generate a new file you should use the GitHub Copilot Chat
    pane for best results.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我通常更喜欢使用*Alt* + */*方法与Copilot交互，但如果您想让Copilot生成新文件，您应该使用GitHub Copilot聊天窗格以获得最佳效果。
- en: 'For me, Copilot generated a C# code for a new test class. I’ll share that code
    shortly, but what’s most interesting to me about the code generation are the three
    buttons at the bottom of the recommendation, shown in *Figure 11**.14*:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我来说，Copilot生成了一个用于新测试类的C#代码。我很快就会分享这段代码，但对我来说，代码生成中最有趣的是推荐底部三个按钮，如图11.14所示：
- en: '![Figure 11.15 – GitHub Copilot offering to create a new file](img/B21324_11_15.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图11.15 – GitHub Copilot提供创建新文件的功能](img/B21324_11_15.jpg)'
- en: Figure 11.15 – GitHub Copilot offering to create a new file
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.15 – GitHub Copilot提供创建新文件的功能
- en: These three buttons allow you to copy the new code to your clipboard, create
    a new file, and insert the code in the current editor, respectively.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个按钮分别允许您将新代码复制到剪贴板、创建新文件以及在当前编辑器中插入代码。
- en: Since we want the tests to live in the test project, click **Create** **new
    file**.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们希望测试生活在测试项目中，请点击**创建** **新文件**。
- en: 'This will create a new file in your test project with any test(s) generated
    by Copilot. For me, it generated two tests, as shown at a high level in *Figure
    11**.16*:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的测试项目中创建一个新文件，其中包含Copilot生成的任何测试。对我来说，它生成了两个测试，如图11.16所示：
- en: '![Figure 11.16 – A pair of XUnit tests generated by GitHub Copilot Chat](img/B21324_11_16.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图11.16 – GitHub Copilot聊天生成的XUnit测试对](img/B21324_11_16.jpg)'
- en: Figure 11.16 – A pair of XUnit tests generated by GitHub Copilot Chat
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.16 – GitHub Copilot聊天生成的XUnit测试对
- en: 'The tests aren’t the most important thing here, so I don’t want to focus on
    the code other than to make a few observations on Copilot’s strategy when I asked
    it for tests:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 测试在这里并不是最重要的，所以我不想专注于代码，除了对Copilot在请求测试时的策略做一些观察：
- en: Copilot generated a pair of tests using xUnit and Moq, which were both installed
    in the test project already. These tests compile and pass.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Copilot使用xUnit和Moq生成了成对的测试，这两个测试已经安装在了测试项目中。这些测试编译并通过。
- en: The first test ensured the method threw an exception when given a null input.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一次测试确保了当提供null输入时，方法会抛出异常。
- en: The second test provided a series of numbers at random and asserted that the
    method returned the largest number without a seven.
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二次测试提供了一系列随机数字，并断言该方法返回了没有七的最大数字。
- en: Both tests used Moq to create a fake `INumberProvider` that is programmed to
    generate the desired sequence of numbers.
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个测试都使用了Moq来创建一个假的`INumberProvider`，该提供器被编程为生成所需的数字序列。
- en: So, have we discovered the silver bullet that allows us to forget about writing
    tests going forward? Probably not.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们是否发现了允许我们忘记编写测试的银弹？可能不是。
- en: While both tests verify something legitimate, their readability could be better.
    Additionally, the tests don’t consider all the paths that should be tested. For
    example, it didn’t test with an empty sequence of elements, with only a single
    number, with a single number with a seven in it, with only negative numbers, or
    with the largest number having a seven in it. These are all legitimate cases that
    a human tester would likely consider.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这两个测试都验证了某些合法的内容，但它们的可读性可以更好。此外，测试没有考虑所有应该测试的路径。例如，它没有测试空序列的元素，只有一个数字，一个数字中包含七，只有负数，或者最大数字中包含七的情况。这些都是合法的情况，一个人类测试员可能会考虑。
- en: So, GitHub Copilot won’t absolve you of your responsibility to test your code
    (and think about your tests), but it’s not completely worthless either.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，GitHub Copilot不会免除你测试代码（以及思考你的测试）的责任，但它也不是完全没有价值的。
- en: GitHub Copilot has a lot of value for identifying test cases and considering
    new ways of testing particularly hard-to-test classes. I’ve come to view it as
    a catalyst – or copilot –that helps get your momentum going when writing tests
    of your own.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot在识别测试用例和考虑测试特别难以测试的类的新方法方面具有很多价值。我已经把它看作是一个催化剂——或者说是一个同伴——它帮助你在编写自己的测试时获得动力。
- en: Now that we’ve seen the value GitHub Copilot provides, let’s talk about its
    limits.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看到了GitHub Copilot提供的价值，让我们来谈谈它的局限性。
- en: Understanding the limits of GitHub Copilot
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解GitHub Copilot的局限性
- en: 'By this point in the chapter, many readers are probably thinking “This is great,
    but can I actually use this in my job?” That’s a valid question, so let’s talk
    about the two common objections: privacy of source code and license concerns with
    public code.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一章的这个阶段，许多读者可能都在想：“这很好，但我真的能在我的工作中使用它吗？”这是一个合理的问题，所以让我们来谈谈两个常见的反对意见：源代码的隐私和公共代码的许可问题。
- en: Data privacy and GitHub Copilot
  id: totrans-208
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据隐私与GitHub Copilot
- en: Many organizations considering GitHub Copilot are concerned that integrating
    an AI tool into their code editor means exposing their code to GitHub. Some also
    raise the potential that GitHub might even use the organization’s private code
    to generate new large language models in the future where these new models might
    generate code based on the organization’s proprietary logic.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 许多考虑GitHub Copilot的组织担心，将AI工具集成到他们的代码编辑器中意味着将他们的代码暴露给GitHub。有些人还提出了这样的可能性：GitHub可能会在未来使用组织的私有代码来生成新的大型语言模型，这些新模型可能会根据组织的专有逻辑生成代码。
- en: These are valid concerns, and depending on which edition of GitHub Copilot you
    are using, there may be some basis for them.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是合理的担忧，具体取决于你使用的GitHub Copilot版本，它们可能有一定的依据。
- en: With **GitHub Copilot for Individuals**, the prompts you send to GitHub Copilot,
    including surrounding code and Copilot’s suggested code, may be retained for analysis
    unless you have disabled the code snippet collection in your settings.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在**GitHub Copilot for Individuals**中，你发送给GitHub Copilot的提示，包括周围的代码和Copilot的建议代码，可能会被保留以供分析，除非你在设置中禁用了代码片段收集。
- en: 'This setting can be disabled at [https://github.com/settings/copilot](https://github.com/settings/copilot)
    by unchecking the **Allow GitHub to use my code snippets for product improvements**
    checkbox, as shown in *Figure 11**.17*:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过取消选中**允许GitHub使用我的代码片段进行产品改进**复选框来在[https://github.com/settings/copilot](https://github.com/settings/copilot)中禁用此设置，如图*图11.17*所示。
- en: '![Figure 11.17 – GitHub Copilot settings](img/B21324_11_17.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图11.17 – GitHub Copilot设置](img/B21324_11_17.jpg)'
- en: Figure 11.17 – GitHub Copilot settings
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.17 – GitHub Copilot设置
- en: While GitHub Copilot for Individuals has some data privacy concerns by default,
    these can be easily opted out if you are working with sensitive code.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 GitHub Copilot for Individuals 默认存在一些数据隐私问题，但如果您正在处理敏感代码，这些问题可以轻松选择退出。
- en: It should also be noted that GitHub Copilot for Individuals also collects telemetry
    on GitHub Copilot usage to detect how frequently the service is used and detect
    and resolve errors.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 还应注意的是，GitHub Copilot for Individuals 还会收集有关 GitHub Copilot 使用情况的遥测数据，以检测该服务被使用的频率并检测和解决错误。
- en: On the other hand, **GitHub Copilot for Business** is private by default and
    also offers additional organization-wide policy settings that businesses can configure
    to globally enable or disable Copilot. These features can also be used to prevent
    Copilot from generating code matching known public code for everyone in your organization.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，**GitHub Copilot for Business** 默认为私有，还提供了额外的组织范围策略设置，企业可以配置这些设置以全局启用或禁用
    Copilot。这些功能还可以用于防止 Copilot 为您组织中的每个人生成与已知公共代码匹配的代码。
- en: According to the **GitHub Copilot Trust Center**, *“GitHub Copilot [for business]
    does not use Prompts or Suggestions to train AI models. These inputs are not retained
    or utilized in the training process of AI models for GitHub Copilot”.* This means
    that the code you send to GitHub Copilot and the suggestions it generates for
    you are private from human consumption and will not be used to give others insight
    into your codebase.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 根据 **GitHub Copilot Trust Center**，*“GitHub Copilot [for business] 不使用提示或建议来训练
    AI 模型。这些输入不会被保留或用于 GitHub Copilot 的 AI 模型训练过程中。”* 这意味着您发送给 GitHub Copilot 的代码以及它为您生成的建议对人类来说是私有的，并且不会用于让他人了解您的代码库。
- en: Disclaimer
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 免责声明
- en: This book is intended to help you understand the basics of GitHub Copilot and
    was written with the best understanding available of an early technology. As with
    any technology, GitHub Copilot continues to evolve and grow. As it does so, the
    privacy policy, data retention policy, and pricing model will likely change over
    time. Readers are encouraged to verify the information in this chapter against
    current information provided by GitHub before making any usage decisions.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 本书旨在帮助您了解 GitHub Copilot 的基础知识，并基于对早期技术的最佳理解编写。与任何技术一样，GitHub Copilot 不断发展和成长。随着其发展，隐私政策、数据保留政策以及定价模式可能会随着时间的推移而变化。读者在做出任何使用决策之前，应鼓励核实本章中的信息与
    GitHub 提供的当前信息。
- en: Glory Francke, head of privacy at GitHub, states “We only process your code
    to provide the service. It is not retained, human eyes don’t see it, and it is
    not being used for any AI model improvements” (GitHub Copilot Trust Center – [https://resources.github.com/copilot-trust-center/](https://resources.github.com/copilot-trust-center/)).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 隐私部门负责人 Glory Francke 表示：“我们只处理您的代码以提供服务。代码不会被保留，人类眼睛看不到它，并且不会被用于任何 AI
    模型改进”（GitHub Copilot Trust Center – [https://resources.github.com/copilot-trust-center/](https://resources.github.com/copilot-trust-center/))。
- en: In general, I find the GitHub Copilot Trust Center to be a very useful tool
    in addressing enterprise concerns around the security, privacy, and accessibility
    of the tool. You can read more about the trust center in the *Further reading*
    section of this chapter, but for now, let’s talk more about GitHub Copilot and
    public code.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我发现 GitHub Copilot Trust Center 是解决企业对工具安全性、隐私和可访问性担忧的一个非常有用的工具。您可以在本章的 *进一步阅读*
    部分了解更多关于信任中心的信息，但就目前而言，让我们更多地讨论 GitHub Copilot 和公共代码。
- en: Concerns around GitHub Copilot and public code
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于 GitHub Copilot 和公共代码的担忧
- en: Most open-source code is accompanied by a license dictating the terms developers
    must follow when using the source code. There are several common licenses that
    developers choose, such as the MIT License, Apache License, GNU General Public
    License, and so on.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数开源代码都附有许可证，规定了开发者在使用源代码时必须遵守的条款。开发者可以选择几种常见的许可证，例如 MIT 许可证、Apache 许可证、GNU
    通用公共许可证等。
- en: While many of these licenses are very permissive, some include clauses requiring
    additional actions such as attributing the source code, making your organization’s
    code open source, or not being able to use the code in commercial software projects.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然许多这些许可证非常宽松，但其中一些包含要求采取额外行动的条款，例如归因于源代码、使您组织的代码开源，或者不能在商业软件项目中使用该代码。
- en: Because of restrictions like this, and because GitHub Copilot was trained on
    open-source software code, there’s a small chance that GitHub Copilot might accidentally
    generate code identical to code from a public repository.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种限制，以及GitHub Copilot是在开源软件代码上训练的，因此存在GitHub Copilot可能会意外生成与公共存储库中代码相同的小概率。
- en: Because of this concern, GitHub Copilot now allows individuals and businesses
    to block the generation of code that is identical to known public code. Additionally,
    GitHub is currently rolling out a new feature called GitHub Copilot code referencing,
    which allows you to detect whether Copilot has suggested public code. This feature
    lets you unleash Copilot’s full creativity while allowing you to see what repositories
    the code was found and the licenses for those repositories.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个担忧，GitHub Copilot现在允许个人和企业阻止生成与已知公共代码相同的代码。此外，GitHub目前正在推出一个名为GitHub Copilot代码引用的新功能，该功能允许您检测Copilot是否建议了公共代码。此功能让您能够释放Copilot的全部创造力，同时让您看到代码所在的存储库以及这些存储库的许可证。
- en: At the time of writing this chapter, this feature was not yet available for
    GitHub Copilot for Visual Studio, but it’s likely that this capability will make
    it to Visual Studio sometime after the publication of this book.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本章时，此功能尚未对GitHub Copilot for Visual Studio可用，但很可能在本书出版后不久，此功能将添加到Visual Studio中。
- en: Let’s close the chapter with a case study on GitHub Copilot Chat at our fictitious
    airline.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以一个关于我们虚构的航空公司GitHub Copilot Chat的案例研究来结束这一章节。
- en: 'Case study: Cloudy Skies Airline'
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 案例研究：Cloudy Skies Airlines
- en: The use of AI at Cloudy Skies Airlines started first with individual developers,
    as often happens with productivity tools and new technologies. James, an eager
    young developer on the team, shared with his coworkers how he’s been trying GitHub
    Copilot, feeling more capable and empowered, and even learning new things. His
    coworkers were excited, but his manager, Mya, had a few concerns.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在Cloudy Skies Airlines，AI的使用最初是从个别开发者开始的，这在新技术和生产力工具中很常见。詹姆斯是团队中一个热心的年轻开发者，他与同事分享了他是如何尝试使用GitHub
    Copilot的，感觉更有能力，更有动力，甚至学到了新东西。他的同事都很兴奋，但他的经理Mya有一些顾虑。
- en: Looping in the chief technology officer (CTO), Mya and James demonstrated the
    capabilities of the tool and talked about how it worked. The CTO was worried about
    legal compliance and the safety of the company’s intellectual property. As a result,
    the use of Copilot and other AI tools was temporarily suspended while the team
    investigated the implications of the technology.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 邀请首席技术官（CTO）Mya和詹姆斯展示了该工具的功能，并讨论了它是如何工作的。CTO担心法律合规性和公司知识产权的安全性。因此，在团队调查这项技术的含义期间，Copilot和其他AI工具的使用被暂时暂停。
- en: 'After some research, and with the help of the GitHub Copilot Trust Center,
    the Cloudy Skies Airlines team agreed to a multi-stage plan:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一些研究和GitHub Copilot信任中心的帮助，Cloudy Skies Airlines团队同意了一个多阶段计划：
- en: '**Pilot the program**: A small group of developers, including James, will try
    GitHub Copilot with code snippet collection disabled for two weeks'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**试点程序**：包括詹姆斯在内的一小群开发者将尝试使用GitHub Copilot，且在两周内禁用代码片段收集功能。'
- en: '**Review**: The team will evaluate any impacts on productivity, code quality,
    and general developer feedback from the pilot program and decide whether the tool
    should be adopted'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**审查**：团队将评估试点计划对生产力、代码质量和一般开发者反馈的影响，并决定是否采用该工具。'
- en: '**Rollout**: If GitHub Copilot is found to be beneficial, it will either be
    allowed for individuals organizational-wide with guidelines or be managed through
    a GitHub Copilot for Business account, depending on the results of the technology
    review'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**推广**：如果GitHub Copilot被发现是有益的，它将根据技术审查的结果，要么在组织范围内允许个人使用并制定指南，要么通过GitHub Copilot
    for Business账户进行管理。'
- en: The developers in the pilot program reported having an easier time focusing
    on code, employing helpful practices for speeding up “boring” aspects of coding,
    and learning some new practices and concepts from the code that Copilot generated.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 试点计划中的开发者报告称，他们更容易专注于代码，采用有助于加快“无聊”编程方面的实践，并从Copilot生成的代码中学习了一些新的实践和概念。
- en: As a result, Cloudy Skies Airlines embraced GitHub Copilot and adopted a GitHub
    Copilot for Business account to ensure snippet collection was disabled and that
    appropriate policies on things such as public code sources were set at an organizational
    level.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，Cloudy Skies Airlines 拥抱了 GitHub Copilot，并开通了 GitHub Copilot for Business
    账户，以确保禁用了代码片段收集，并在组织层面设置了关于公共代码源等事项的适当政策。
- en: Summary
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we saw how GitHub Copilot and GitHub Copilot Chat can help
    developers understand, refactor, document, and even test their code.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看到了 GitHub Copilot 和 GitHub Copilot Chat 如何帮助开发者理解、重构、文档化甚至测试他们的代码。
- en: We talked about how GitHub Copilot is not an intelligent AI overlord, but instead
    a predictive model built around patterns in text found in open-source repositories.
    As a result, the code it generates may not even compile and may contain security
    vulnerabilities, bugs, performance issues, or other undesirable effects.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了 GitHub Copilot 并非一个智能 AI 统治者，而是一个围绕开源存储库中发现的文本模式构建的预测模型。因此，它生成的代码可能甚至无法编译，并可能包含安全漏洞、错误、性能问题或其他不良影响。
- en: We closed this chapter with a discussion of privacy and open-source licensing
    that organizations must care about for security and compliance purposes and how
    GitHub Copilot helps organizations meet those needs.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章结束时讨论了组织在安全和合规方面必须关注的隐私和开源许可问题，以及 GitHub Copilot 如何帮助组织满足这些需求。
- en: In the next chapter, we’ll explore code analysis in Visual Studio and see how
    code analysis can help you detect potential issues and targets for refactoring
    in your code.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨 Visual Studio 中的代码分析，并看看代码分析如何帮助您检测代码中的潜在问题和重构目标。
- en: Questions
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How do GitHub Copilot and GitHub Copilot Chat work?
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GitHub Copilot 和 GitHub Copilot Chat 是如何工作的？
- en: How can you address data privacy and compliance concerns with Copilot?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您如何解决与 Copilot 相关的数据隐私和合规性问题？
- en: Further reading
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'You can find more information about GitHub Copilot at these URLs:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到有关 GitHub Copilot 的更多信息：
- en: 'About the GitHub Copilot extension for Visual Studio: [https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-extension](https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-extension)'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于 GitHub Copilot Visual Studio 扩展：[https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-extension](https://learn.microsoft.com/en-us/visualstudio/ide/visual-studio-github-copilot-extension)
- en: 'GitHub Copilot Trust Center: [https://resources.github.com/copilot-trust-center/](https://resources.github.com/copilot-trust-center/)'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub Copilot 信任中心：[https://resources.github.com/copilot-trust-center/](https://resources.github.com/copilot-trust-center/)
- en: '*GitHub Copilot* *Chat*: [https://docs.github.com/en/copilot/github-copilot-chat/about-github-copilot-chat](https://docs.github.com/en/copilot/github-copilot-chat/about-github-copilot-chat)'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*GitHub Copilot* *Chat*: [https://docs.github.com/en/copilot/github-copilot-chat/about-github-copilot-chat](https://docs.github.com/en/copilot/github-copilot-chat/about-github-copilot-chat)'
