- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing VR, MR, and AR UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The study of **user interface** (**UI**) design for **virtual reality** (**VR**),
    **mixed reality** (**MR**), and **augmented reality** (**AR**) is expansive and
    ever-growing. It is an emergent technology, and best practices are not yet fully
    defined; however, there are a lot of researchers and developers working diligently
    to determine what those best practices are. In this chapter, I’ll summarize some
    of the generally agreed-upon best practices for designing a UI for **extended
    reality** (**XR**) experiences.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, I will discuss the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Distinguishing between XR, VR, MR, and AR applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design considerations and best practices for developing UI for VR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design considerations and best practices for developing UI for MR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design considerations and best practices for developing UI for AR
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are XR, VR, MR, and AR?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before we can begin discussing best practices for VR, MR, and AR, we should
    clarify the definition of XR, VR, MR, and AR.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may notice, if you look ahead on this chapter, that there are no sections
    titled *Designing UI for XR*. That is because XR encompasses VR, MR, and AR! It
    is an umbrella term. In fact, a more concise title for this chapter could have
    been *Designing XR UI*! XR includes VR, MR, and AR technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1: Representation of XR technologies](img/Figure_3.01_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.1: Representation of XR technologies'
  prefs: []
  type: TYPE_NORMAL
- en: '**VR** experiences are perhaps the easiest to describe. They exist fully in
    the virtual world. The entire physical world is blocked from view, and the only
    thing you can see is the virtual space. This type of space can often be so immersive
    that the brain struggles to distinguish it from reality. Devices that facilitate
    VR fit over the user’s eyes to completely block out visuals in the real world.
    Popular devices today that support VR are the Meta (formally Oculus) Quest series,
    the Sony PlayStation VR series, and the HTC Vive series. Some popular examples
    of VR games include *Half-Life: Alyx* and *Beat Saber*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**MR** overlays virtual items in the real world and allows you to interact
    with them. The user can see the real world and interact with both real-world items
    and virtual items. MR devices are also worn on the user’s face in the form of
    glasses and headsets. They either do not fully block out the real world from the
    user’s view or they allow video passthrough to allow the user to see the real
    world through lenses. Popular devices today that facilitate MR exercises are the
    Meta Quest 2 (and above), the Microsoft HoloLens series, and Magic Leap. A popular
    example of an MR experience is *I Expect You To Die: Home* *Sweet Home*.'
  prefs: []
  type: TYPE_NORMAL
- en: '**AR** is similar to MR in that it combines real and virtual worlds; however,
    it differs in that the virtual items do not interact with the real world. In AR,
    virtual items are simply overlaid on the real world and don’t appear within the
    same space as the real world. Also, it does not enable the user to interact with
    virtual items in a way that feels like it is happening in their world. AR interactions
    usually happen on a screen, while MR interactions happen within a physical space.
    The distinction is subtle, but you can consider AR as interacting with virtual
    items that appear on a screen while MR is interacting with items that appear as
    if they are in your space. There are significantly more AR devices available on
    the market. Smartphones and tablets are the most popular facilitators of AR; however,
    some smart glasses also do it. Additionally, there are AR screens, kiosks, and
    installations that can be found all over the world. Popular examples of AR games
    include *Pokémon GO* and *Ingress*.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'There is some nuance to the ideas of XR and their distinctions that I have
    not fully delved into in this section. If you would like to learn more, I recommend
    researching the virtuality continuum: [https://www.interaction-design.org/literature/topics/virtuality-continuum](https://www.interaction-design.org/literature/topics/virtuality-continuum).'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the difference between VR, MR, and AR, let’s look at
    some best practices for designing UI for these experiences.
  prefs: []
  type: TYPE_NORMAL
- en: Designing UI for VR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, when you think of UI, you think of a **heads-up display** (**HUD**)—UI
    that is on the screen in front of all gameplay. But in VR, there is no screen
    in the same sense as there is in games played on a console. The player feels as
    if they are fully immersed in the world, and putting something on the screen they
    are experiencing a VR game through (the lenses) would result in a fuzzy, unviewable
    blur since it would be right on top of their eyes. Due to this, VR UI tends to
    be placed within the world the player will be immersed in.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 16*](B18327_16.xhtml#_idTextAnchor447), we will discuss steps around
    creating UI with a physical representation within the world.
  prefs: []
  type: TYPE_NORMAL
- en: 'While there may be some exceptions, there are three locations where a UI in
    a VR game is usually placed:'
  prefs: []
  type: TYPE_NORMAL
- en: Embedded within the world in a static position. The player must approach it
    by moving their avatar toward its virtual location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded within the world a set distance in front of the player’s face. The
    UI moves with the player and is always in the same relative location regardless
    of where the player turns their head. Or the player’s avatar does not move in
    space and the UI also does not move.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attached to the player’s hands—the UI appears as some peripheral device attached
    to the player’s avatar’s virtual hands/arms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which of the three placements you choose depends on your game’s design but can
    also be affected by if and how you want the player to be able to interact with
    the UI. In essence, you want to make sure the player can see the UI and interact
    with it (if necessary).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start our VR UI design exploration with considerations for designing visual
    UI.
  prefs: []
  type: TYPE_NORMAL
- en: Visual UI placement and considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As I’ve said before, there is not an explicit set of rules for designing VR
    gameplay experiences as the technology is still considered emergent and researchers
    and developers are still learning what those best practices are.
  prefs: []
  type: TYPE_NORMAL
- en: 'When creating a UI that will be a specific distance from the player at all
    times, it is important to put it in a place that the player can see. Just because
    a player can see an item doesn’t mean it is comfortable to see it. For example,
    while a player can see items in their peripheral range, this would not be a comfortable
    place to put the UI. The following diagram shows the general angle for a person’s
    **field of view** (**FOV**), where the gray areas are maximum viewing angles:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2: Generalization of the human field of view](img/Figure_3.02_B18327.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 3.2: Generalization of the human field of view'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The angles described in the previous diagram are general guidelines and not
    set in stone. They will change depending on the user’s eyesight, whether or not
    you want to require them to rotate their eyes (and not their head), and the device
    you are using.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that when a player moves their head, the camera moves with it.
    So, if your UI is placed in a position that encourages them to rotate their head
    and is anchored to their head, the UI will move with their head. So, try to place
    any anchored UI in the area described in *Figure 3**.2*.
  prefs: []
  type: TYPE_NORMAL
- en: On top of the angle relative to the player’s eye, you must also consider the
    distance from the player’s eye. If it’s too close or too far, it will cause eye
    strain. Try to keep any visual UI, especially text that must be read, within 1.3
    to 3 in-game meters from the player’s eyes.
  prefs: []
  type: TYPE_NORMAL
- en: If the player is in a stationary position, creating a static curved UI a set
    distance away from them always helps the player comfortably move their head around
    to view the UI.
  prefs: []
  type: TYPE_NORMAL
- en: The last consideration for visual UI I want to discuss is text size. While the
    recommendation may vary depending on your source, the one I see consistently cited
    (no pun intended) is that UI should appear a multiple of 2.32 cm tall for every
    meter away the UI displays. So, if it displays 1 meter away, it should appear
    2.32 cm tall. If it displays 2 meters away, it should appear to be 4.64 cm tall.
    Personally, I have very bad eyesight, and I tend to make my UI text a bit bigger
    than this so I can easily view it. My recommendation is to have multiple people
    with varying eye strengths play your game and tell you if the UI is comfortable
    or not.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve reviewed considerations for designing visual UI in VR space,
    let’s review some considerations for interactable UI.
  prefs: []
  type: TYPE_NORMAL
- en: Interactable UI placement and considerations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Interactable UI is achieved in a few different ways in VR, and it depends on
    whether the experience uses a controller or hand tracking.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using a controller, here are common ways in which UI can be interacted
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: The player simply presses a button to perform an interaction—for example, pressing
    a menu button to make a menu button appear and disappear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player selects a UI item with a ray. The player points toward the UI item,
    a ray appears from their hand, and they then press a button to interact with the
    item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player’s avatar virtually approaches a UI item, and the player interacts
    with it. This includes pressing buttons in virtual space with a virtual hand or
    grabbing virtual items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When using hand tracking, here are common ways in which UI can be interacted
    with:'
  prefs: []
  type: TYPE_NORMAL
- en: The player performs some gesture, and a UI interaction is completed. For example,
    making a thumbs-up gesture could cause a menu to appear or disappear.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player points with their finger at an item, and a ray appears from their
    finger. They then complete some other gesture to confirm the selection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player’s avatar virtually approaches a UI item, and the player interacts
    with it. This includes pressing buttons in virtual space with a virtual hand or
    grabbing virtual items.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'When interacting with UI via a ray, it is not necessary for the player to physically
    be able to reach it. But if you want to create UI that the player’s avatar must
    virtually interact with, you will need to make sure it is within reach of the
    player both horizontally and vertically. Factors for reachability include the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: Whether the game is played in a stationary mode or if the player is expected
    to move around
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Whether the player’s avatar can move around or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player’s height
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If players are sitting or standing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The player’s general mobility and disabilities
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A good rule of thumb is to try to make sure players can reach your items by
    placing them between 0.5 and 0.75 meters from their stationary position. Just
    as you want to test your visual UI with people with various levels of sight, you
    will want to test your UI with people of various heights and abilities.
  prefs: []
  type: TYPE_NORMAL
- en: With both controllers and hand tracking, you want to make sure that whatever
    interaction you choose is not tiring for the player. Requiring them to perform
    multiple gestures or hold their hands up for a significant amount of time can
    cause fatigue and strain that you don’t want to inflict on your player.
  prefs: []
  type: TYPE_NORMAL
- en: That concludes the major considerations for designing UI for VR that I wish
    to discuss. However, there is a lot more research and information out there for
    you to explore! For more information on designing UI for VR, I recommend checking
    out the resources provided at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve looked at designing UI for VR, let’s look at designing UI for
    MR.
  prefs: []
  type: TYPE_NORMAL
- en: Designing UI for MR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Designing UI for MR is extremely similar to designing UI for VR, so most of
    what I discussed in the previous section translates. However, designing UI for
    MR does have a few extra caveats.
  prefs: []
  type: TYPE_NORMAL
- en: The main distinction between designing UI for VR and MR is MR incorporates the
    player’s physical space and items around them. When playing VR, people generally
    are assumed to have a wide-open space around them—so that when they flail about
    recklessly, they don’t hit anything and hurt themselves. The opposite tends to
    be true with MR experiences—players are generally encouraged to be around furniture,
    walls, and other items in their real world.
  prefs: []
  type: TYPE_NORMAL
- en: The UI being placed virtually not only has to be accessible via the player,
    but it also cannot intersect with things that exist within their world. You can’t
    have the player pressing buttons that are inside their desk or viewing screens
    that are behind their walls. So, when designing UI for an MR experience, you must
    consider the player’s space and not just the player’s body when placing your UI.
  prefs: []
  type: TYPE_NORMAL
- en: Ways around this include allowing the player to pick where their UI displays,
    displaying it on top of surfaces that the technology detects (how it is detected
    is highly dependent on the device the player is using), or attaching it to the
    player.
  prefs: []
  type: TYPE_NORMAL
- en: MR is an even more emergent space than VR, especially in the video game field.
    MR has mostly been used for industrial and medical purposes up to this point and
    is usually performed in a highly controlled space. MR for a gamer in their home
    with infinite possibilities of furniture and object placement is still in its
    infancy and until recently was only achievable in Unity via the Microsoft HoloLens.
    However, the Meta Quest 2 has added the ability to create MR games in Unity, and
    Meta Quest 3 plans to have more curated and polished MR support. Additionally,
    Magic Leap has partnered with Unity to allow for MR development. So, you will
    likely see more best practices and technology around MR UI in the coming years.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For information about developing with Unity and the HoloLens, see [https://learn.microsoft.com/en-us/windows/mixed-reality/develop/unity/unity-development-overview?tabs=arr%2CD365%2Chl2](https://learn.microsoft.com/en-us/windows/mixed-reality/develop/unity/unity-development-overview?tabs=arr%2CD365%2Chl2).
  prefs: []
  type: TYPE_NORMAL
- en: For information about MR capabilities planned for Quest 3, see [https://developer.oculus.com/blog/build-the-next-generation-of-vr-mr-with-meta-quest-3/](https://developer.oculus.com/blog/build-the-next-generation-of-vr-mr-with-meta-quest-3/).
  prefs: []
  type: TYPE_NORMAL
- en: For information about developing with MagicLeap, see [https://ml1-developer.magicleap.com/en-us/learn/guides/unity-overview](https://ml1-developer.magicleap.com/en-us/learn/guides/unity-overview).
  prefs: []
  type: TYPE_NORMAL
- en: Sadly, since MR is such a new and emergent space within the Unity engine, I
    cannot say much more about designing UI for it. However, AR has been around for
    quite some time, so let’s explore it now!
  prefs: []
  type: TYPE_NORMAL
- en: Designing UI for AR
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remember, that what distinguishes AR from MR is AR tends to be on a screen that
    overlays the real world, while MR appears more immersed and inside the world.
    So, interactive items for AR experiences will be displayed on the screen, not
    within the world.
  prefs: []
  type: TYPE_NORMAL
- en: Designing UI for AR is highly dependent on the device that is being used to
    augment reality. For the sake of clarity, I am going to focus my discussion on
    AR games developed for cell phones rather than trying to speak universally and
    include things such as installments and kiosks.
  prefs: []
  type: TYPE_NORMAL
- en: When designing UI for AR app on a mobile or touchscreen, you will want to follow
    the rules outlined in [*Chapter 2*](B18327_02.xhtml#_idTextAnchor024). Best practice
    is to place most non-augmented digital items (that is, the HUD UI) on the outer
    edges of the screen. Then, augmented digital items will appear in the middle of
    the screen. This will cause items that are augmenting the world to be the focus.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discussed some basic design considerations for developing
    XR experiences. Since the ways in which we experience VR, MR, and AR are all different,
    we reviewed considerations you should keep in mind when designing for each of
    these types of experiences.
  prefs: []
  type: TYPE_NORMAL
- en: XR is still an emergent space, so there are not yet many widely accepted standards.
    This is particularly true with MR, which just recently began having consumer-available
    MR devices. However, the information provided in this chapter should help you
    get started with XR UI design and get you started thinking about how the XR space
    differs from screen space.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss the concepts of universal design and accessibility
    and how you can make your user interfaces more inclusive and user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Further resources for learning about designing UI for XR can be found here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://medium.com/@oneStaci/https-medium-com-ux-vr-18-guidelines-51ef667c2c49](mailto:https://medium.com/@oneStaci/https-medium-com-ux-vr-18-guidelines-51ef667c2c49)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.youtube.com/watch?v=u6FPoOJ4AuM](https://www.youtube.com/watch?v=u6FPoOJ4AuM)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://developer.qualcomm.com/blog/xr-user-interfaces-and-perception-technologies](https://developer.qualcomm.com/blog/xr-user-interfaces-and-perception-technologies)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://aixr.org/insights/4-challenges-facing-ux-design/](https://aixr.org/insights/4-challenges-facing-ux-design/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://uxplanet.org/ux-101-for-virtual-and-mixed-reality-part-1-physicality-3fed072f371](https://uxplanet.org/ux-101-for-virtual-and-mixed-reality-part-1-physicality-3fed072f371)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
