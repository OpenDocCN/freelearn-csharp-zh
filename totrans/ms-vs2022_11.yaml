- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Collaborative Development with Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the fast-paced world of software development, collaboration and efficiency
    are paramount. Azure DevOps provides a comprehensive suite of tools designed to
    streamline and enhance team-based development efforts. This chapter will guide
    you through the essential aspects of leveraging Azure DevOps for collaborative
    development within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: The first section will introduce Azure DevOps, which will offer a foundational
    understanding of its core services and features. Next, we’ll walk through the
    process of setting up team projects to establish a connection between Visual Studio
    and Azure DevOps. Then, we’ll explore the principles of Agile development and
    how they can be integrated within Azure DevOps. We will leverage work items to
    increase collaboration, traceability, and productivity. Finally, in the last section,
    we will explore how to manage builds within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Azure DevOps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up team projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing Agile development practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrating Azure Pipelines for continuous integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, we will be equipped to effectively utilize Azure
    DevOps in our development workflow within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While writing this chapter, I used the following versions of Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: Visual Studio Enterprise 2022 version 17.12.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preview 1.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To fully follow the chapter, you will also need a valid Azure DevOps account.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Azure DevOps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As experienced developers working within the .NET ecosystem, we’ve always sought
    ways to enhance our productivity, streamline our workflows, and ensure the quality
    of our software projects. In this chapter, we delve into the world of Azure DevOps,
    a suite of development tools, services, and features that empower teams to plan
    work, collaborate on code development, and build and deploy applications efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Azure DevOps stands out as a comprehensive platform that integrates project
    management, version control, reporting, and automated builds into a single service.
    It supports both cloud-based and on-premises deployment models, making it adaptable
    to various organizational needs. By leveraging Azure DevOps, we can improve our
    team’s efficiency, enhance collaboration among team members, and accelerate the
    delivery of high-quality software solutions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an overview of the core components that we can leverage to transform
    our development practices with the help of Azure DevOps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Azure Boards** for orchestrating work, planning sprints, and managing backlogs
    with unparalleled clarity and precision'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Repos** for harnessing the power of Git repositories, ensuring seamless
    version control and collaborative coding experiences'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Pipelines** for automating the build and deployment processes, facilitating
    continuous integration, and ensuring that our applications are always ready for
    release'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Test Plans** for streamlining the testing phase, allowing us to create,
    execute, and track tests efficiently'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Azure Artifacts** for sharing packages and dependencies, fostering a cohesive
    and efficient development ecosystem'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have familiarized ourselves with the Azure DevOps context, let’s dive
    into how to connect our Azure DevOps project within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up team projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To work effectively with Azure DevOps projects from within Visual Studio, we
    need to establish a connection between the two. This involves several steps, including
    setting up our environment, configuring project settings, and ensuring that both
    Visual Studio and Azure DevOps are properly integrated. In this section, we will
    navigate through this process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting, ensure you have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: An active Azure subscription
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access to an Azure DevOps organization and at least one project within it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Visual Studio allows us to connect to Azure DevOps projects through the **Team
    Explorer** view. This approach allows us to access and manage our Azure DevOps
    projects directly from within Visual Studio without needing to open a separate
    Azure DevOps window. To do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to **View** | **Team Explorer** :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Opening Team Explorer](img/B22218_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Opening Team Explorer
  prefs: []
  type: TYPE_NORMAL
- en: 'With **Team** **Explorer** open, click on the *Manage Connection* button located
    at the top of the **Team Explorer** window, visualized as an *electric plug* :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: l
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The Manage Connection button](img/B22218_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – The Manage Connection button
  prefs: []
  type: TYPE_NORMAL
- en: This will lead us to sign in to our Azure DevOps account. We can retrieve our
    active AzureDevOps connection here, if you haven’t set one yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click on the **Manage Connections** link and then on **Connect to** **a
    Project…** :'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Connect to a Project…](img/B22218_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Connect to a Project…
  prefs: []
  type: TYPE_NORMAL
- en: 'After signing in, we’ll be presented with a list of Azure DevOps organizations
    and projects that we have access to:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Connect to a Project](img/B22218_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Connect to a Project
  prefs: []
  type: TYPE_NORMAL
- en: Select the project you wish to connect to and click **Connect** . This action
    establishes a connection between Visual Studio and your selected Azure DevOps
    project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once connected, let’s see now how we can leverage this connection, managing
    our Azure DevOps project directly from the **Team** **Explorer** window.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing Agile development practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have connected Visual Studio with the Azure DevOps project, we can
    start managing our Azure DevOps project directly from the **Team Explorer** window.
    In this section, we will have a refresher on what Agile development is and how
    to leverage Visual Studio to streamline our Agile process.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing Agile development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Agile development is a flexible approach to managing projects and developing
    software that emphasizes collaboration, customer feedback, and adapting to change.
    It was established through the Agile Manifesto in 2001 and focuses on delivering
    value to customers quickly and continuously improving processes and products.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key aspects of Agile development include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Prioritizing people over processes** : Agile values human interaction and
    collaboration over rigid processes and tools, recognizing that effective communication
    is crucial for project success'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Functional software over extensive documentation** : Agile teams focus on
    delivering working software frequently, believing that functional products provide
    more value than comprehensive documentation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Collaboration with customers** : Agile development encourages close collaboration
    with customers throughout the project lifecycle to better understand and meet
    their needs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Adaptability** : Agile methodologies embrace change, even late in the development
    process, understanding that adapting to new requirements helps deliver a product
    that truly meets customer needs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Agile practices involve breaking down projects into smaller, manageable units
    called sprints, typically lasting one to four weeks. Teams work collaboratively
    during these sprints to deliver functional increments of the product, allowing
    for regular feedback and adjustments.
  prefs: []
  type: TYPE_NORMAL
- en: In that agile context, Work Items are utilized to organize, track, and manage
    the various elements of work involved in a project. These elements can range from
    user stories and tasks to bugs and features. Work Items serve as the building
    blocks for planning and tracking work in Agile projects, allowing teams to capture
    details about the work, assign responsibilities, set priorities, and track progress.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Agile methodologies, Work Items are typically categorized into types such
    as User Stories, Bugs, Tasks, Features, and Epics, each serving a specific purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: User Stories represent the functionality that needs to be developed from the
    perspective of the end user. They help teams understand what users need and why.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bugs are used to track defects or issues found in the software during testing
    or development phases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tasks are smaller units of work that need to be completed to fulfill a User
    Story or to address a Bug.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features represent larger pieces of functionality that may encompass several
    User Stories. They help in grouping related work together.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Epics are even broader than Features, representing large bodies of work that
    can span across multiple sprints or releases.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work Items are essential for Agile project management because they facilitate
    communication among team members, help in prioritizing work, and enable tracking
    of progress toward project goals. Teams can link Work Items to each other to show
    dependencies, roll up work under larger initiatives, and generate reports for
    better project oversight.
  prefs: []
  type: TYPE_NORMAL
- en: Agile teams often use tools such as Azure DevOps to manage Work Items effectively.
    These tools provide templates for different Work Item types, support customization
    to fit team processes, and offer features for tracking dependencies, managing
    workloads, and visualizing progress through dashboards and reports.
  prefs: []
  type: TYPE_NORMAL
- en: In summary, Work Items are a fundamental aspect of Agile practices, providing
    a structured way to plan, track, and manage work across various stages of the
    project lifecycle.
  prefs: []
  type: TYPE_NORMAL
- en: Managing Work Items through Visual Studio
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Back on the **Home** page of **Team Explorer** , we might notice three tiles
    in the **Project** section with one named **Work Items** . In this section, we
    will explore how we can interact with the Work Items through Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Team Explorer Home](img/B22218_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Team Explorer Home
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on the tile, we access the list of Work Items for our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Visualizing Work Items](img/B22218_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Visualizing Work Items
  prefs: []
  type: TYPE_NORMAL
- en: In this window, we can list all our Work Items. The two drop-down options, **Assigned
    To Me** and **View Options** , along with the textbox allow us to search and filter
    the list. Additionally, the **View in Browser** link allows us direct access to
    the Azure dashboard via the browser.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Filter Work Items](img/B22218_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Filter Work Items
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking the first link under the **Work Items** title, we get access to
    the following four options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Assigned To Me** : This filter shows Work Items that are specifically assigned
    to the currently logged-in user. It helps us focus on our responsibilities and
    tasks without getting overwhelmed by the entire project’s workload.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Following** : This filter displays Work Items that we have chosen to follow.
    This could include tasks assigned to others that we have a vested interest in
    or want to keep track of for collaboration or oversight purposes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mentioned** : This option filters Work Items where we have been mentioned.
    Mentions typically occur in comments or descriptions and serve as a way to draw
    someone’s attention to a particular item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**My Activity** : This filter shows Work Items that we have interacted with
    in some way. This could include creating, editing, commenting on, or otherwise
    engaging with Work Items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These filtering options in **Team Explorer** enhance productivity by allowing
    users to tailor their view of Work Items according to their roles, interests,
    and responsibilities within the project.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the **View Options** link offers us options to manage the display
    of the Work Items.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – View options](img/B22218_11_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – View options
  prefs: []
  type: TYPE_NORMAL
- en: Here, we can select **Hide completed items** and switch between a **List view**
    display or **Detail view** .
  prefs: []
  type: TYPE_NORMAL
- en: Now we have seen how to manage the list of our Work Items, let’s explore the
    way we can interact with these Work Items. We open the **Work Items** contextual
    menu by right-clicking on one of them.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Work Items contextual menu](img/B22218_11_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Work Items contextual menu
  prefs: []
  type: TYPE_NORMAL
- en: 'This menu contains the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Open** : This action opens the selected work item in a detailed view directly
    in the Azure portal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**New Branch…** : This creates a new branch in our version control system specifically
    for the selected work item. This helps in isolating changes related to the work
    item, making it easier to track and review those changes later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Related Work items](img/B22218_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Related Work items
  prefs: []
  type: TYPE_NORMAL
- en: This way, each commit in this branch will directly contain the tag to mention
    the related Work Items ID in the commit message.
  prefs: []
  type: TYPE_NORMAL
- en: '**Assign to me** : This action assigns the selected work item to the currently
    logged-in user. It’s a way of taking ownership of a task, indicating that we will
    be responsible for completing it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Complete work item** : This marks the selected work item as completed. This
    usually changes the state of the work item to indicate that all required work
    has been done and it’s ready for review or closure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Relate To Changes** : This links the selected work item to specific changesets,
    commits, or branches in the version control system. This creates traceability
    between the work being done (code changes) and the reason for those changes (the
    work item). This way, even though the branch was not created for this work item,
    we can easily link it to a commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If we have to create a new work item, we can quickly do it directly by using
    the **New Work Item** link at the top of the **Work** **Items** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Creating new Work Items](img/B22218_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Creating new Work Items
  prefs: []
  type: TYPE_NORMAL
- en: This will prompt us to choose between three types of Work Items ( **Issue**
    , **Task** , or **Epic** ), and then a simple form appears to set the title. Once
    created, the work item will appear under the **My** **Activity** filter.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the Work Items directly in Visual Studio allows us to increase our
    productivity. Proper use of this feature enhances collaboration, traceability,
    and productivity within our development teams.
  prefs: []
  type: TYPE_NORMAL
- en: As we have seen with GitHub Actions in the previous chapter, continuous integration
    is a crucial part of modern application development. In the next section, we will
    see how to interact with Azure Pipelines within Visual Studio and manage our builds.
  prefs: []
  type: TYPE_NORMAL
- en: Integrating Azure Pipelines for continuous integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Builds** feature in the **Team Explorer** window of Visual Studio is designed
    to help developers manage, monitor, and interact with build processes within a
    team project. It provides a centralized interface for viewing build definitions,
    queuing new builds, monitoring ongoing builds, and reviewing completed builds.
    This feature supports both manual and automated build processes, making it easier
    for teams to ensure the quality and reliability of their software products.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can access this interface by clicking on the **Builds** tile on the **Home**
    page of **Teams Explorer** :'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.12 – The Builds tile in Team Explorer](img/B22218_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – The Builds tile in Team Explorer
  prefs: []
  type: TYPE_NORMAL
- en: In the **Builds** section of **Team Explorer** , we can see four sections that
    help us interact with the Azure builds.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Team Explorer Builds](img/B22218_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Team Explorer Builds
  prefs: []
  type: TYPE_NORMAL
- en: The cornerstone of the feature is **Build Definitions** . These define how your
    application should be built, including what triggers a build (e.g., continuous
    integration), which source files to include, and any pre- or post-build tasks.
    We can find all the build definitions for our project under **Build Definitions**
    . By clicking one of the builds, we get access to a contextual menu.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Build definition contextual menu](img/B22218_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Build definition contextual menu
  prefs: []
  type: TYPE_NORMAL
- en: 'The contextual menu of **Build Definitions** offers several actions, such as
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**View Builds** : This opens builds in the Azure Devops interface through the
    browser'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Edit Build Definition...** : This opens the build definition in the Azure
    Devops interface in the browser in edit mode, in order to edit it'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Queue New Build…** : We can manually queue builds from the **Team Explorer**
    window, specifying parameters such as the build definition to use and whether
    to run the build immediately or schedule it for later'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add to Favorites** : Adding build definitions to favorites streamlines access
    to frequently used builds, enhancing productivity by reducing the time spent navigating
    through various build definitions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, the **Builds** feature allows users to view the status of current
    builds, including progress, success, or failure messages. This real-time feedback
    helps us quickly address issues. After a build is completed, we can review logs,
    test results, and other artifacts generated during the build process. This aids
    in troubleshooting and ensures that all components meet quality standards.
  prefs: []
  type: TYPE_NORMAL
- en: As a result, integrating the **Builds** feature in **Team Explorer** with Azure
    DevOps provides a powerful platform for managing end-to-end CI/CD pipelines directly
    from within Visual Studio. This integration enhances productivity, ensures consistency
    across environments, and supports scalable, secure software delivery processes.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve explored the essentials of collaborative development
    with Azure DevOps, equipping you with the knowledge and skills needed to streamline
    your development workflow within Visual Studio. We began with an introduction
    to Azure DevOps, highlighting its core services and demonstrating how it integrates
    with Visual Studio to enhance team collaboration and project management.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we delved into implementing agile development practices, starting with
    a comprehensive introduction to Agile methodologies. We learned how to manage
    Work Items directly through Visual Studio, ensuring efficient tracking and resolution
    of tasks, bugs, and user stories.
  prefs: []
  type: TYPE_NORMAL
- en: We then learned how to integrate Azure Pipelines for continuous integration,
    guiding you through the management of builds within Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: As we transition to the next chapter, we’ll continue to expand our skill set.
    Docker containers have revolutionized the way we develop, test, and deploy applications,
    providing a consistent environment across different stages of development. In
    the upcoming chapter, you’ll learn how to leverage Visual Studio’s powerful container
    tools to work with Docker.
  prefs: []
  type: TYPE_NORMAL
