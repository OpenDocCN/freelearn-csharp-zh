- en: 2D Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Flipping a sprite horizontally—the Do-It-Yourself approach
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flipping a sprite horizontally—using Animator State Chart and Transitions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Animating body parts for character movement events
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a 3-frame animation clip to make a platform continually animate
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making a platform start falling once stepped-on using a Trigger to move animation
    from one state to another
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating animation clips from sprite sheet sequences
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a platform game with Tiles and Tilemaps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a Scene with the 2D Gamekit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since Unity 4.6 in 2014, Unity has shipped with dedicated 2D features, and Unity
    2018 continues to build on these. In this chapter, we present a range of recipes
    to introduce the basics of 2D animation in Unity 2018, and help you understand
    the relationships between the different animation elements.
  prefs: []
  type: TYPE_NORMAL
- en: The Big picture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Unity 2D, animations can be created in several different ways—one way is
    to create many images, each slightly different, which frame-by-frame give the
    appearance of movement. A second way to create animations is by defining keyframe
    positions for individual parts of an object (for example, the arms, legs, feet,
    head, and eyes), and getting Unity to calculate all the in-between positions when
    the game is running:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/14375113-9416-4625-868a-71ac9dab7360.png)'
  prefs: []
  type: TYPE_IMG
- en: Both sources of animations become Animation Clips in the Animation panel. Each
    Animation Clip then becomes a State in the Animator Controller State Machine.
    We can also duplicate States based on Animation Clips, or create new States, and
    add scripted Behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: We also can define sophisticated Conditions, under which GameObject will Transition
    from one animation State to another.
  prefs: []
  type: TYPE_NORMAL
- en: Grids, Tilemaps, and Tile Palettes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity has introduced a set of Tile features that makes creating Tile-based **Scenes**
    quick and easy. A Tile Grid GameObject acts as the parent to Tilemaps. Tilemaps
    are the GameObjects onto which Tiles are painted, from the Tile Palette panel.
    Sprites can be made into Tile assets, and a collection of Tiles can be added to
    form a Tile Palette from which to paint a Scene.
  prefs: []
  type: TYPE_NORMAL
- en: It also offers powerful, scripted Rule Tiles that enhance the Tile brush tools,
    automatically adding top, left, right, and bottom edge Tiles as more Grid elements
    are painted with Tiles. Rule Tiles can even randomly choose from a selection of
    Tiles under defined conditions. Learn more at [https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap).
  prefs: []
  type: TYPE_NORMAL
- en: The 2D GameKit – bringing 2D tools together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perhaps the most exciting 2D feature introduced by Unity is the 2D GameKit.
    This brings together several powerful Unity features for constructing 2D games,
    including:'
  prefs: []
  type: TYPE_NORMAL
- en: Tilemaps and Rule Tiles
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Character Controller 2D (and Input Mapper and Player Character components)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cinemachine intelligent camera control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Unity event system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many prefabricated common 2D game components, including doors, teleporters,
    dialog panels, switches, inventory, melee, collectables and inventory, damageables,
    and enemies and much more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final recipe in this chapter introduces the 2D GameKit, and the other recipes
    in this chapter, and some others, introduce some of the components individually,
    so that you'll know enough to start taking your first steps with the 2D GameKit
    and learning how to build Scenes that tightly combine core 2D game features.
  prefs: []
  type: TYPE_NORMAL
- en: Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we introduce recipes demonstrating the animation system for
    2D game elements. The PotatoMan2D character is from the Unity 2D Platformer, which
    you can download yourself from the Unity asset store. That project is a good place
    to see lots more examples of 2D game and animation techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e231b01-d595-4a5b-aa74-b05da5749ac5.png)'
  prefs: []
  type: TYPE_IMG
- en: "Here are some links for useful resources and sources of information to explore\
    \ these \Ltopics further:"
  prefs: []
  type: TYPE_NORMAL
- en: 'Overview of 2D features in Unity: [https://unity.com/solutions/2d](https://unity.com/solutions/2d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity''s beginners walkthrough guide to 2D game development: [https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough](https://unity3d.com/learn/tutorials/topics/2d-game-creation/2d-game-development-walkthrough)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity''s 2D Rogue-like tutorial series: [https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial](https://unity3d.com/learn/tutorials/s/2d-roguelike-tutorial)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity 2D Platformer (where the PotatoMan character comes from): [https://www.assetstore.unity3d.com/en/#!/content/11228](https://www.assetstore.unity3d.com/en/#!/content/11228)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The platform sprites are from Daniel Cook''s Planet Cute game resources: [http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html](http://www.lostgarden.com/2007/05/dancs-miraculously-flexible-game.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating a basic 2D platformer game: [https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/creating-a-basic-platformer-game)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hat Catch 2D game tutorial: [https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/2d-catch-game-pt1)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity games from a 2D perspective video: [https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d](https://www.unity3d.com/learn/tutorials/modules/beginner/live-training-archive/introduction-to-unity-via-2d)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A fantastic set of modular 2D characters with a free Creative Commons license
    from Kenny. These assets would be perfect for animating body parts in a similar
    way to the potato-man example in this chapter and in the Unity 2D platformer demo:
    [http://kenney.nl/assets/modular-characters](http://kenney.nl/assets/modular-characters)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Joe Strout''s illuminating Gamasutra article on three approaches to 2D character
    animation with Unity''s scripting and animation states: [https://www.gamasutra.com/blogs/JoeStrout/20150807/250646/2D_Animation_Methods_in_Unity.php](https://www.gamasutra.com/blogs/JoeStrout/20150807/250646/2D_Animation_Methods_in_Unity.php)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flipping a sprite horizontally – the DIY approach
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Perhaps the simplest 2D animation is a simple flip, from facing left to facing
    right, or facing up to facing down, and so on. In this recipe, we''ll add a cute
    bug sprite to the scene, and write a short script to flip its horizontal direction
    when the *Left* and *Right* arrow keys are pressed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d4160ed3-6d19-4451-ab9c-09534dbce803.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the image you need in a folder named Sprites
    in folder `08_01`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To flip an object horizontally with arrow key presses, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you are working in a project that was originally created in 3D, you can
    change the default project behavior (for example, new Sprite Textures and **Scene**
    mode) to 2D via menu: Edit | Project Settings | Editor, then choose 2D for the
    Default Behavior Mode in the Inspector.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9e5f36aa-c081-4587-8f58-2eadd2776b15.png)'
  prefs: []
  type: TYPE_IMG
- en: Import the provided image: EnemyBug.png.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of the red Enemy Bug image from the Project | Sprites folder
    into the **Scene**. Position this GameObject at (0, 0, 0) and scale to (2, 2,
    2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a C# script-class named BugFlip, and add an instance-object as a component
    to the Enemy Bug:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: When you run your scene, pressing the *Left* and *Right* arrow keys should make
    the bug face left or right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The C# class defines a **Boolean** variable, `facingRight`, that stores a true/false
    value corresponding to whether or not the bug is facing right. Since our bug sprite
    is initially facing right, we set the initial value of `facingRight` to true to
    match this.
  prefs: []
  type: TYPE_NORMAL
- en: Every frame, the `Update()` method, checks to see whether the *Left* or *Righ*t
    arrow keys have been pressed. If the *Left* arrow key is pressed and the bug is
    facing right, then the `Flip()` method is called, likewise if the *Right* arrow
    key is pressed and the bug is facing left (that is, facing right is false), again
    the `Flip()` method is called.
  prefs: []
  type: TYPE_NORMAL
- en: The `Flip()` method performs two actions; the first simply reverses the true/false
    value in variable `facingRight`. The second action changes the +/- sign of the
    X-value of the `localScale` property of the transform. Reversing the sign of the
    `localScale` results in the 2D flip that we desire. Look inside the PlayerControl
    script for the PotatoMan character in the next recipe – you'll see the same `Flip()`
    method being used.
  prefs: []
  type: TYPE_NORMAL
- en: Flipping a sprite horizontally – using Animator State Chart and Transitions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll use (in a simple way) the Unity animation system to create
    two states corresponding to two animation clips, and a script that changes localScale
    according to which animation state is active. We'll use a second script, which
    will map the arrow keys press Horizontal input axis values to a Parameter in the
    state chart, and which will drive the transition from one state to the other.
  prefs: []
  type: TYPE_NORMAL
- en: While it may seem like a lot of work, compared to the previous recipe, such
    an approach illustrates how we can map from input events (such as key presses
    or touch inputs), to Parameters and Triggers in a State Chart.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the image you need in a folder named Sprites
    in folder `08_02`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To flip an object horizontally using Animator State Chart and Transitions,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided image: EnemyBug.png.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of the red Enemy Bug image from the Project | Sprites folder
    into the scene. Position this GameObject at (0, 0, 0) and scale to (2, 2, 2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the Enemy Bug GameObject selected in **Hierarchy**, open the **Animation**
    panel (menu: Window | Animation | Animation), and click the Create button to create
    a new Animation Clip asset. Save the new Animation Clip asset as beetle-right.
    You will also see that an Animator component has been added to the Enemy Bug GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/12056ee9-9a17-40cc-9a19-abdaa840bcd8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'If you look at the Project panel, you''ll see two new asset files have been
    created: the beetle-right Animation Clip and an Animator Controller named Enemy
    Bug:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/97d8c5f0-3af0-4a8e-bac4-c8d7c22c2ce9.png)'
  prefs: []
  type: TYPE_IMG
- en: Close the **Anim****ation** panel, and double click the Enemy Bug Animator Controller
    to start editing it – it should appear in a new **Animator** panel. You should
    see four *states*, Any State and Exit are unlinked, and state Entry has a Transition
    arrow connecting to Animation Clipbeetle-right. This means that as soon as the
    Animator Controller starts to play, it will enter the beetle-right state. State
    beetle-right is tinted orange, to indicate that it is the Default state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f693e4b9-b9ea-4c36-a2f1-4f0eca72820c.png)'
  prefs: []
  type: TYPE_IMG
- en: If there is only one Animation Clip state, that will be the Default state automatically.
    Once you have other states added to the state chart, you can right-click a different
    state and use the context menu to change which state is first entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the beetle-right state and make a copy of it, renaming the copy beetle-left
    (use can use the right-mouse menu, or the *Ctrl *+ *C*/*V* keyboard shortcuts).
    It makes sense to position beetle-left to the **left** of beetle-right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e33b61f7-78f9-4bad-8b99-029631dba86b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Move your mouse pointer over the beetle-right state, and then in the mouse
    right-click context menu, choose Make Transition, and drag the white arrow that
    appears into the beetle-left state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11b92799-25b0-4c1c-8a8e-e5c3cb831f7b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Repeat this step with beetle-left, to create a Transition back from beetle-left
    to beetle-right:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/fecdc29d-4aba-4077-9cd9-a11564a044e6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We want an instance Transition between left- and right-facing. So for **each **Transition,
    uncheck the Has Exit Time option. Click the Transition arrow to select it (it
    should turn blue), then uncheck this option in the **Inspector**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/7b6c0e69-a37b-44e4-92ce-f29079c797e9.png)'
  prefs: []
  type: TYPE_IMG
- en: To delete a Transition, first select it, then use the *Delete* key (**Windows**)
    or press *Fn* + *Backspace* (**macOS**).
  prefs: []
  type: TYPE_NORMAL
- en: 'For our condition to decide when to change the active state, we now need to
    create a Parameter indicating whether the *Left/Right* arrow keys have been clicked.
    *Left/Right* keys presses are indicated by the Unity input system''s Horizontal
    axis value. Create a state chart float Parameter named axisHorizontal by selecting
    Parameters (rather than Layers) in the top-left of the **Animator** panel, clicking
    the plus-symbol "+" button, and choosing Float. Name your new **Parameter** axisHorizontal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b355d388-26fb-4984-a403-9f2e1a622538.png)'
  prefs: []
  type: TYPE_IMG
- en: 'With our Parameter, we can define the conditions for changing between the left-
    and right-facing states. When the *Left* arrow key is pressed, the Unity input
    system''s Horizontal axis value is negative, so select the Transition from beetle-right
    to beetle-left, and in the **Inspector** click the plus symbol in the Conditions
    section of the Transition properties. Since there is only one Parameter, this
    will automatically be suggested, with defaults of Greater than zero. Change the
    Greater to Less, and we have our desired condition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ea709f84-2591-43b9-81f8-9d268d9d106f.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, select the Transition from beetle-left to beetle-right, and add a Condition.
    In this case, the defaults, axisHorizontal Greater than zero, are just what we
    want (since a positive value is returned by Unity's input system Horizontal axis
    when the *Right* arrow key is pressed).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We need a method to actually map from the Unity input system's Horizontal axis
    value (from the *Left/Right* array keys) to our Animator state chart ParameteraxisHorizontal.
    This we can do with a short script class, which we'll create in the next steps.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a C# script class named InputMapper, and add an instance object as a
    component to the Enemy Bug GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Now we need to actually change the local scale property of the GameObject when
    we switch to the left or right facing state. Create a C# script class named LocalScaleSetter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the Animator panel, select the beetle-right state. In the **Inspector**,
    click the AddBehaviour button, and select LocalScaleSetter. The default public
    Vector three scale value of (1,1,1) is fine for this state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Animator panel, select the beetle-left state. In the Inspector, click
    the AddBehaviour button, and select LocalScaleSetter. Change the public Vector
    three scale to a value of (-1,1,1) – that is, we need to swap the X-scaling to
    make our Sprite face to the left:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc5ab0e9-9da3-4c3e-a614-1cfb885d6f34.png)'
  prefs: []
  type: TYPE_IMG
- en: Adding instance objects of C# script classes to Animator states is a great way
    to link the logic for actions when entering into/exiting a state with the Animator
    states themselves.
  prefs: []
  type: TYPE_NORMAL
- en: In the Animator panel, select the beetle-right state. In the Inspector, click
    the AddBehaviour button, and select InputMapper.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you run your **Scene**, pressing the *Left* and *Right* arrow keys should
    make the bug face left or right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Each frame the `Update()` method of the `InputMapper` C# script-class reads
    the Unity input system's Horizontal axis value each frame, and sets the Animator
    state chart ParameteraxisHorizontal to this value. If the value is less than (left
    arrow) or greater than (right arrow) zero, if appropriate, the Animator state
    system will switch to the other state.
  prefs: []
  type: TYPE_NORMAL
- en: The LocalScaleSetter C# script class actually changes the localScale property
    (initial value 1,1,1, or reflect horizontally to make it face left -1,1,1). For
    each state the public **Vector3** variable can be customized to the appropriate
    values.
  prefs: []
  type: TYPE_NORMAL
- en: The `OnStateEnter(...)` method is involved each time you enter the state that
    an instance object of this C# class is attached to. You can read about the various
    event messages for the StateMachineBehaviour class at [https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html](https://docs.unity3d.com/ScriptReference/StateMachineBehaviour.html).
  prefs: []
  type: TYPE_NORMAL
- en: When we press the *Left*-arrow key, the value of the Unity input system's Horizontal
    axis value is negative, and this is mapped to the Animator state chart, Parameter
    axisHorizontal, causing the system to Transition to the beetle-left state, and `OnStateEnter(...)`
    of the **LocalScaleSetter** script class instance to be executed, setting the
    local scale to **(-1, 1, 1**), making the **Texture** flip **Horizontally**, so
    the beetle faces left.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some suggestions for enhancing this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Instantaneous swapping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You may have noticed a delay, even though we set Exit Time to zero. This is
    because there is a default blending when Transitioning from one state to another.
    However, this can be set to zero, so that the state machine switches instantaneously
    from one state to the next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Select each Transition in the **Animator** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Expand the Settings properties.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Zero both the Transition Duration and the Transition Offset:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/45bbdae8-919b-4f13-aa48-3607bac471b3.png)'
  prefs: []
  type: TYPE_IMG
- en: Now when you run the **Scene**, the bug should immediately swith left and right
    as you press the corresponding arrow keys.
  prefs: []
  type: TYPE_NORMAL
- en: Animating body parts for character movement events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll learn to animate the hat of the Unity potato-man character
    in response to a jump event.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the files you need in folder `08_03`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To animate body parts for character movement events, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided PotatoManAssets package into your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increase the size of the **Main Camera** to 10.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set up the 2D gravity setting for this project – we''ll use the same setting
    as from Unity''s 2D platform tutorial, a setting of Y= -30\. Set 2D gravity to
    this value by choosing menu: Edit | Project Settings | Physics 2D, and then at
    the top change the Y value to -30:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ba39d9ba-5a93-4c0b-9694-b32511af35f4.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag an instance of the PotatoMan hero character2D from the Project | Prefabs
    folder into the **Scene**. Position this GameObject at (0, 3, 0).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of the sprite platformWallBlocks from the Project | Sprites
    folder into the **Scene**. Position this GameObject at (0, -4, 0).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Box Collider 2D component to the platformWallBlocks GameObject by choosing
    menu: Add Component | Physics 2D | Box Collider 2D.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We now have a stationary platform that the player can land upon, and walk left
    and right on. Create a new Layer named Ground, and assign the platformWallBlocks GameObject
    to this new layer, as shown in the following screenshot. Pressing the *Space*
    key when the character is on the platform will now make him jump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/52a0dd9d-ab12-491c-8e3c-c7e39e088cac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Currently the PotatoMan hero character is animated (arms and legs moving) when
    we make him jump. Let''s remove the Animation Clips and Animator Controller and
    create our own from scratch. Delete the Clips and Controllers folders from Project
    | Assets |PotatoMan2DAssets | Character2D | Animation, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4a356702-cd72-4b17-97e4-6c4bac98c1ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's create an Animation Clip (and its associated Animator Controller) for
    our hero character. In the **Hierarchy**, select GameObject hero. Ensuring GameObject
    hero character2D is selected in the **Hierarchy**, open the **Animation** panel,
    and ensure it is in Dope Sheet view (this is the default).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Animation** panel''s Create button, and save the new clip in the
    Character2D | Animation folder, naming it as character-potatoman-idle. You''ve
    now created an Animation Clip for the Idle character state (which is not animated):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4e49cad7-9c40-4bcc-9849-c0c4c8a9d6fa.png)'
  prefs: []
  type: TYPE_IMG
- en: Your final game may end up with dozens, or even hundreds, of Animation Clips.
    Make things easy to search by prefixing the names of clips with object type, name,
    and then a description of the animation clip.
  prefs: []
  type: TYPE_NORMAL
- en: 'Looking at the Character2D | Animation folder in the **Project** panel, you
    should now see both the Animation Clip you have just created (character-potatoman-idle)
    and a new Animator Controller, which has defaulted to the name of your hero character2D
    GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f6ec404d-e2f3-47f3-888b-1348065f23c9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Ensuring the hero GameObject is selected in the **Hierarchy**, open the **Animator**
    panel and you''ll see the State Machine for controlling the animation of our character.
    Since we only have one Animation Clip (character-potatoman-idle), upon entry,
    the State Machine immediately enters this state:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6bf2a0d0-2e16-4052-babe-a69eb8c83a43.png)'
  prefs: []
  type: TYPE_IMG
- en: Run your **Scen****e**. Since the character is always in the 'idle' state, we
    see no animation yet when we make it jump.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a jump AnimationClip that animates the hat. Ensure that the hero GameObject
    is still selected in the **Hierarchy**. Click the empty drop-down menu in the
    **Animation** panel (next to the word Samples), and create a new clip in your
    Animation folder, naming it character-potatoman-jump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d6417dc5-15a6-46d2-baa3-533c91a63969.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Click the Add Property button, and chose Transform | Position of the hat child
    object, by clicking its + (plus-sign) button. We are now ready to record changes
    to the (X, Y, Z) position of the hat GameObject in this animation clip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5d9d4ab2-43be-49cb-88dc-d39e2ca56d2d.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now see two keyframes at 0.0 and at 1.0\. These are indicated by
    diamonds in the **Timeline** area in the right-hand section of the **Animation**
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click to select the first keyframe (at time 0.0) – the diamond should turn blue
    to indicate it is selected.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s record a new position for the hat for this first frame. Click the red
    Record circle button once to start recording in the **Animation** panel. Now in
    the **Scene** panel, move the hat up and left a little, away from the head. You
    should see that all three X, Y, Z values have a red background in the **Inspector** –
    this is to inform you that the values of the Transform component are being recorded
    in the Animation Clip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/07e649f0-b551-4634-8b86-2d0351d45280.png)'
  prefs: []
  type: TYPE_IMG
- en: Click the red Record circle button again to stop recording in the **Animation**
    panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since 1 second is perhaps too long for our jump animation, drag the second
    keyframe diamond to the left to a time of 0.5:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9f7328b1-a43a-4566-820c-ec255790a758.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to define when the character should Transition from the Idle state
    to the Jump state. In the **Animator** panel, select the character-potatoman-idle state,
    and create a Transition to the character-potatoman-jump state by right-mouse-clicking
    and choosing the Make Transition menu, then drag the Transition arrow to the character-potatoman-jump state,
    as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/79b2a949-b83f-4c1f-bd96-52d8d715152c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s add a Trigger parameter named Jump, by clicking on the add parameter
    plus-sign "+" button at the top-left of the Animator panel, choosing Trigger,
    and typing the name Jump:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4d7ac701-7017-4a76-b6b4-ae97e314f7d5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We can now define the properties for when our character should Transition from
    idle to jump. Click the Transition arrow to select it, set the following two properties,
    and add one condition in the **Inspector** panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Has Exit Time: Uncheck this option'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transition Duration(s): Set to 0.01'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Conditions: Add Jump (click + button at bottom):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/6996c42d-cd4d-494a-a4a7-fba15f263697.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and run your **Scene**. Once the character has landed on the platform and
    you press the *Space* key to jump, you'll see the character's hat jump away from
    his head, and slowly move back. Since we haven't added any Transition to leave
    the Jump state, this Animation Clip will loop, so the hat keeps on moving even
    when the jump is completed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Animator** panel, select the character-potatoman-jump state and add
    a new Transition back to the character-potatoman-idle state. Select this Transition
    arrow, and in the **Inspector** panel sets its properties as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Has Exit Time: (leave as checked)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Exit Time: 0.5 (this needs to be the same time value as the second keyfame
    of our Jump animation clip):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7004e725-6b0f-4d1c-893f-20e02054d58c.png)'
  prefs: []
  type: TYPE_IMG
- en: Save and run your **Scene**. Now when you jump, the hat should animate once,
    after which the character immediately returns to its Idle state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have added an Animation Controller State Machine to the hero GameObject.
    The two Animation Clips you created (idle and jump) appear as States in the **Animator**
    panel. You created a Transition from Idle to Jump when the JumpTrigger parameter
    is received by the State Machine. You created a second Transition, which transitions
    back to the Idle state after waiting 0.5 seconds (the same duration between the
    2 key-frames in our Jump Animation Clip).
  prefs: []
  type: TYPE_NORMAL
- en: The player makes the character jump by pressing the *Space* key. This causes code
    in the `PlayerControl` C#-scripted component of the hero GameObject to be invoked,
    that makes the sprite move upwards on screen, and also sends a `SetTrigger(...)`
    message to the Animator controller component, for the Trigger named Jump.
  prefs: []
  type: TYPE_NORMAL
- en: The difference between a Boolean Parameter and a Trigger is that a Trigger is
    temporality set to True and once the `SetTrigger(...)` event has been consumed
    by a state transition, it automatically returns to being False. So Triggers are
    useful for actions we wish to do once and then revert to a previous state. A Boolean
    Parameter is a variable, which can have its value set to True or False at different
    times during the game, and so different Transitions can be created to fire depending
    on the value of the variable at any time. Note that Boolean Parameters have to
    have their values explicitly set back to False with `SetBool(...)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot highlights the line of code that sends the `SetTrigger(...)`
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b78d2caa-e14b-4bcc-9d8d-71b1e841aa25.png)'
  prefs: []
  type: TYPE_IMG
- en: State Machines for animations of a range of motions (running/walking/jumping/falling/dying)
    will have more States and Transitions. The Unity-provided potato-man hero character
    has a more complex State Machine, and more complex animations (of hands and feet,
    and eyes and hat, and so on, for each Animation Clip), which you may find useful
    to explore.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the Animation view on the Unity Manual web pages at [http://docs.unity3d.com/Manual/AnimationEditorGuide.html.](http://docs.unity3d.com/Manual/AnimationEditorGuide.html.)
  prefs: []
  type: TYPE_NORMAL
- en: Creating a three-frame animation clip to make a platform continually animate
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll make a wooden-looking platform continually animate,
    moving upwards and downwards. This can be achieved with a single three-frame Animation
    Clip (starting at top, position at bottom, top position again):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/590282c7-7967-4478-8da3-285aa282d44a.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe builds on the previous one, so make a copy of that project, and
    work on the copy for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a continually-moving animated platform, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Drag an instance of the platformWoodBlocks sprite from the Project | Sprites
    folder into the **Scene**. Position this GameObject at (-4, -5, 0), so that these
    wood blocks are neatly to the left, and slightly below, the wall blocks platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Box Collider 2D component to the platformWoodBlocks GameObject so that
    the player''s character can stand on this platform too. Choose menu: Add Component
    | Physics 2D | Box Collider 2D.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new folder named Animations, in which to store the Animation Clip and
    controller we'll create next.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensuring the platformWoodBlocks GameObject is still selected in the **Hierarchy**,
    open an **Animation** panel, and ensure it is in Dope Sheet view (this is the
    default).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the **Animation** panel's Create button, and save the new clip in your
    new Animation folder, naming it platform-wood-moving-up-down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Add Property button, choose Transform, and the click the plus-sign
    by Position. We are now ready to record changes to the (X, Y, Z) position of the platformWoodBlocks GameObject
    in this Animation Clip:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e77cbeb9-d991-49aa-994f-3d944fe7a227.png)'
  prefs: []
  type: TYPE_IMG
- en: You should now see 2 keyframes at 0.0 and at 1.0\. These are indicated by diamonds
    in the Timeline area in the right-hand section of the **Animation** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need 3 keyframes, with the new one at `2:00` seconds. Click at 2:00 in the
    Timeline along the top of the Animation panel, so that the red line for the current
    playhead time is at time 2:00\. Then click the diamond + button to create a new
    keyframe at the current playhead time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/bc5beb79-2670-47c1-9c6e-98e6c67f2320.png)'
  prefs: []
  type: TYPE_IMG
- en: The first and third keyframes are fine – they record the current height of the
    wood platform at Y= -5\. We need to make the middle keyframe record the height
    of the platform at the top of its motion, and Unity in-betweening will do all
    the rest of the animation work for us.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the middle keyframe (at time 1:00), by clicking on the diamond at time
    1:00 (they should both turn blue, and the red playhead vertical line should move
    to 1:00, to indicate the middle keyframe is being edited).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the red Record cirle button to start recording changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector**, change the Y-position of the platform to 0\. You should
    see that all three X, Y, and Z values have a red background in the **Inspector** –
    this is to inform you that the values of the Transform component are being recorded
    in the Animation Clip.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click the red Record circle button again, to finish recording changes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run your Scene. The wooden platform should now be animating continuously,
    moving smoothly up and down the positions we set up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you want the potatoman character to be able to jump when on the moving wooden
    block, you'll need to select the block GameObject and set its layer to Ground.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have added an animation to the platformWoodBlocks GameObject. This animation
    contains three keyframes. A keyframe represents the values of properties of the
    object at a point in time. The first keyframe stores a Y-value of -4, the second
    keyframe a Y-value of 0, and the final keyframe -4 again. Unity calculates all
    the in-between values for us, and the result is a smooth animation of the Y-position
    of the platform.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some suggestions for enhancing this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Copy animation relative to a new parent GameObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If we wanted to duplicate the moving platform, simply duplicating the platformWoodBlocks
    GameObject in the **Hierarchy** and moving the copy won't work – since when you
    run the **Scene** each duplicate would be animated back to the location of the
    original animation frames (that is, all copies would be positioned and moving
    in the original location).
  prefs: []
  type: TYPE_NORMAL
- en: The solution is first to create a new, empty GameObject (named movingBlockParent),
    and then a platformWoodBlocks parent to this GameObject. Now we can duplicate
    the movingBlockParent GameObject (and its platformWoodBlocks child) to create
    more moving blocks in our scene that each move relative to where the parent GameObject
    is located at **Design-Time**.
  prefs: []
  type: TYPE_NORMAL
- en: Making a platform start falling once stepped on using a Trigger to move animation
    from one state to another
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many cases, we don't want an animation to begin until some condition has
    been met, or some event has occurred. In these cases, a good way to organize the
    Animator Controller is to have two animation states (clips) and a Trigger on the
    Transition between the clips. We use code to detect when we want the animation
    to start playing, and at that time we send the Trigger message to the Animation
    Controller, causing the Transition to start.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we''ll create a water platform block in our 2D platform game;
    such blocks will begin to slowly fall down the screen as soon as they have been
    stepped on, and so the player must keep on moving otherwise they''ll fall down
    the screen with the blocks too! It looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0263dd00-96dd-4c36-96e0-ff5cfcb501c3.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe builds on the previous one, so make a copy of that project, and
    work on the copy for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To construct an animation that only plays once a Trigger has been received,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Hierarchy**, create an Empty GameObject named water-block-container,
    positioned at (2.5, -4, 0). This empty GameObject will allow us to make duplicates
    of animated Water Blocks that will animate relative to their parent GameObject
    position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Drag an instance of the Water Block sprite from the Project | Sprites folder
    into the scene and child it to the water-block-container GameObject. Ensure the
    position of your new child Water Block GameObject is (0, 0, 0), so that it appears
    neatly to right of the wall blocks platform:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00271829-245c-4049-8d08-667da1aaf94e.png)'
  prefs: []
  type: TYPE_IMG
- en: Add a Box Collider 2D component to the child Water Block GameObject, and set
    the layer of this GameObject to Ground, so that the player's character can stand
    and jump on this water block platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensuring the child Water Block GameObject is selected in the **Hierarchy**,
    open an **Animation** panel, then create a new clip named platform-water-up, saving
    it in your Animations folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a second Animation Clip, named platform-water-down. Again, click the      Add Property button, chose Transform and Position, and delete the second keyframe
    at 1:00.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the first keyframe at 0:00 selected, click the red Record button once to
    start recording changes, and set the Y-value of the GameObject's Transform Position
    to -5\. Press the red Record button again to stop recording changes. You have
    now completed the creation of the water-block-down Animation Clip, so you can
    click the red Record button to stop recording.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You may have noticed that as well as the up/down Animation Clips that you created,
    another file was created in your Animations folder, an Animator Controller named
    Water Block. Select this file and open the Animator panel, to see and edit the
    State Machine diagram:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/358a7bc4-2f68-4a2d-9d1e-308c7507c1d4.png)'
  prefs: []
  type: TYPE_IMG
- en: Currently, although we created 2 Animation Clips (states), only the Up state
    is ever active. This is because when the scene begins (Entry), the object will
    immediately go in the platform-water-up state, but since there are no Transition
    arrows from this state to platform-water-down, at present the Water Block GameObject
    will always be in its Up state.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ensure the platform-water-up state is selected (it will have a blue border around
    it), and create a Transition (arrow) to the platform-water-down state by choosing
    Make Transition from the mouse-right-click menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you run the Scene now, the default Transition settings are that after 0.75
    seconds (default Exit Time), the Water Block will Transition into their Down state.
    We don't want this – we only want them to animate downwards after the player has
    walked onto them.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Trigger named Fall, by choosing the Parameters tab in the **Animator**
    panel, clicking the + button and selecting Trigger, and then selecting Fall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Do the following to create the transition to wait for our Trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Animator** panel, select the Transition
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the **Inspector** panel, uncheck the Has Exit Time option
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set Transition Duration to 3.0 (so the Water Block slowly Transitions to its
    Down state over a period of 2 seconds)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Inspector** panel, click the + button to add a Condition, which should
    automatically suggest the only possible Condition Parameter, which is our Trigger
    Fall:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/54ab75e5-9694-401e-9f4d-09b2ad981672.png)'
  prefs: []
  type: TYPE_IMG
- en: An alternative to setting the Transition Duration numerically is to drag the
    Transition end time to 3:00 seconds in the Animation Timeline offered under the
    Transition Settings in the **Inspector.**
  prefs: []
  type: TYPE_NORMAL
- en: We need to add a Collider trigger just above the Water Block, and a C# script
    class behavior to send the Animator Controller Trigger when the player enters
    the collider.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure the child Water Block GameObject is selected, add a (second) 2D Box
    Collider, with a Y-Offset of 1, and tick its Is Trigger checkbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/de60ef89-cf02-4cf5-96b1-ff5241ea0328.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Create a C# script class named WaterBlock, and add an instance object as a
    component to the child Water Block GameObject:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Make 6 more copies of water-block-container GameObject, with X positions increasing
    by 1 each time, that is, 3.5, 4.5, 5.5, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the **Scene**, and as the player's character runs across each water block
    they will start falling down, so he had better keep running!
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You created a two-state Animator Controller state machine. Each state was an
    Animation Clip. You created a Transition from the Water Block Up state to its
    Down state that will take place when the Animator Controller received a Fall Trigger
    message. You created a Box Collider 2D with a Trigger, so that the scripted WaterBlock component
    could be detected when the player (tagged Player) enters its collider, and at
    that point send the Fall Trigger message to make the Water Block GameObject start
    gently Transitioning into its Down state further down the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the Animator Controllers on the Unity Manual web pages at [http://docs.unity3d.com/Manual/class-AnimatorController.html](http://docs.unity3d.com/Manual/class-AnimatorController.html).
  prefs: []
  type: TYPE_NORMAL
- en: Creating animation clips from sprite sheet sequences
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The traditional method of animation involved hand-drawing many images, each
    slightly different, which displayed quickly frame-by-frame to give the appearance
    of movement. For computer game animation, the term Sprite Sheet is given to the
    image file that contains one or more sequences of sprite frames. Unity provides
    tools to break up individual sprite images into large Sprite Sheet files, so that
    individual frames, or sub-sequences of frames, can be used to create Animation
    Clips that can become States in Animator Controller State Machines. In this recipe,
    we''ll import and break up an open source monster sprite sheet into three animation
    clips for Idle, Attack, and Death, which looks as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2588e576-d7f4-4d23-aa4a-d1cca4439016.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For all the recipes in this chapter, we have prepared the sprite images you
    need in folder `08_04`. Many thanks to Rosswet Mobile for making these Sprites
    available as **Open Source** at [http://www.rosswet.com/wp/?p=156](http://www.rosswet.com/wp/?p=156).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create an animation from a sprite sheet of frame-by-frame animation images,
    follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided image: monster1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the monster1 image selected in the **Project** panel, change its Sprite
    mode to Multiple in the **Inspector**, the click the Apply button at the bottom
    of the panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/22010931-5a11-4c12-9251-5f8080a62e71.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **Inspector**, open the Sprite Editor panel by clicking the Sprite Editor button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the Sprite Editor, open the Slice drop-down dialog, set the Type to Grid,
    set the grid PixelSize to 64x64, and then click the Slice button. For Type, choose
    the drop-down option Grid by CellSize, and set X and Y to 64\. Click the Slice
    button, and then the Apply button in the bar at the top right of the Sprite Editor
    panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b65dbf0-5aca-4d64-b266-ee38dcd0fb3b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the **Proje****ct** panel, you can now click the expand triangle button
    on the right-hand side of the sprite, and you''ll see all the different child
    frames for this sprite (as highlighted in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d58f545f-6bdc-4ff2-a792-777c5fa68c1b.png)'
  prefs: []
  type: TYPE_IMG
- en: Create a folder named Animations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In your new folder, create an Animator Controller asset file named monster-animator,
    choose **Project** panel menu: Create | Animator Controller.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the scene, create a new Empty GameObject named monster1 (at position 0, 0,
    0), and drag your monster-animator into this GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With the monster1 GameObject selected in the **Hierarchy**, open up the **Animation**
    panel, and create a new Animation Clip named monster1-idle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the monster1 image in the **Project** panel (in its expanded view),
    and select and drag the first 5 frames (frames monster1_0 .. monster1_4) into
    the **Animation** panel. Change the sample rate to 12 (since this animation was
    created to run at 12 frames per second):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/9958ebe0-5ffe-468f-bbe9-d153fb499d45.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look at the State Chart for monster-animator, you'll see it has a default
    state (clip) named monster-idle.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you run your **Scene**, you should now see the monster1 GameObject animating
    in its monster-idle state. You may wish to make the **Main Camera** size a bit
    smaller (size 1), since these are quite small sprites:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2b4426f7-8de1-46c0-b82a-50f988d0d64a.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unity's Sprite Editor knows about Sprite Sheets, and once the correct grid size
    has been entered, it treats the items in each grid square inside the Sprite Sheet
    image as an individual image, or frame, of the animation. You selected sub-sequences
    of sprite animation frames and added them into several Animation Clips. You added
    an Animation Controller to your GameObject, and so each Animation Clip appears
    as a state in the Animation Controller State Machine.
  prefs: []
  type: TYPE_NORMAL
- en: You can now repeat the process, creating an Animation Clipmonster-attack with
    frames 8-12, and a third clip monster-death with frames 15-21\. You would then
    create Triggers and Transitions to make the monster GameObject transition into
    the appropriate states as the game is played.
  prefs: []
  type: TYPE_NORMAL
- en: Learn more about the Unity Sprite Editor from the Unity video tutorials at [https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor](https://unity3d.com/learn/tutorials/modules/beginner/2d/sprite-editor).
  prefs: []
  type: TYPE_NORMAL
- en: 'Learn more about 2D animation with Sprite Sheets in an article by John Horton
    on GameCodeOldSchool.com: [http://gamecodeschool.com/unity/simple-2d-sprite-sheet-animations-in-unity/](http://gamecodeschool.com/unity/simple-2d-sprite-sheet-animations-in-unity/).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a platform game with Tiles and Tilemaps
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the powerful 2D tools introduced by Unity is the Tilemapper. In this
    recipe, we''ll create a simple 2D platformer, building a grid-based **Scene**
    using some free Tile **Sprite** images:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6430c93a-ac65-40d5-b1d5-1e94da59a96f.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For this recipe, we have prepared the Unity package and images you need in folder
    `08_07`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Special thanks to GameArt2D.com for publishing the Desert image Sprites with
    the Creative Commons Zero licence: [https://www.gameart2d.com/free-desert-platformer-tileset.html](https://www.gameart2d.com/free-desert-platformer-tileset.html).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a platform game with Tiles and Tilemaps, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import the provided images.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The tile Sprites we''ve using for this recipe are 128 x 128 pixels. It''s important
    to ensure that we set the pixels per unit to 128, so that our Sprite images will
    map to a grid of 1 x 1 Unity units. Select all the Sprites in the Project | DesertTilePack
    | Tile folder, and in the **Inspector** set Pixels per Unit to 128:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cbb2b25b-09b7-4d37-b74e-3a00243319fd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Display the **Til****e Palette** panel, by choosing menu: Window | 2D | Tile
    Palette.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Project** panel, create a new folder named Palettes (this is where
    you'll save your TilePalette assets).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the Create New Palette button in the Tile Palette panel, and create a
    new Tile Palette named DesertPalette:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3e89f6c6-fd1c-4184-b5ad-65c4141b3ebb.png)'
  prefs: []
  type: TYPE_IMG
- en: In the **Proje****ct** panel, create a new folder named Tiles (this is where
    to save your Tile assets).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Ensure Tile Palette DesertPalette is selected in the Tile Palette panel, select
    all the Sprites in the Project | DesertTilePack | Tile folder, and drag them into
    the Tile Palette panel. When asked where to save these new Tile asset files, select
    your new Assets | Tiles folder. You should now have 16 Tile assets in your Tiles
    folder, and these Tiles should be available to work with in your DesertPalette
    in the **Tile Palette** panel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b87af5f6-b6ba-475c-add2-a16f3fd630e3.png)'
  prefs: []
  type: TYPE_IMG
- en: Drag Sprite BG from the Project panel, DesertTilePack, into the Scene. Resize
    the **Main Camera** (it should be Orthographic since this is a 2D project), so
    that the desert background fills the entire **Game** panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a Tilemap GameObject to the **Scene**, choose the create menu: 2D Object
    | Tilemap. You''ll see a Grid GameObject added, and as a child of that, you''ll
    see a Tilemap GameObject. Rename the Tilemap GameObject to Tilemap-platforms:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e702ff8a-6a6a-42d4-8482-db94fd7bd8b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Just as UI GameObjects are children of a Canvas, Tilemap GameObjects are children
    of a Grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can now start *painting *Tiles onto our Tilemap. Ensure Tilemap-platforms
    is selected in the **Hierarchy**, and that you can see the Tile Palette panel.
    In the Tile Palette panel, select the Paint with active brush tool (the *paintbrush*
    icon). Now click on a Tile in the Tile Palette panel, and then in the **Scene**
    panel, each time you click the mouse button you''ll be adding a Tile to Tilemap-platforms,
    automatically aligned with the grid:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/01b27ea1-6df9-4c49-85f1-f8e8da10d2b4.png)'
  prefs: []
  type: TYPE_IMG
- en: If you want to delete a Tile, use Shift-Click over that grid position.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Tile Palette brush to paint two or three platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a suitable Collider to the Tilemap-platforms GameObject. Select the Tilemap-platforms GameObject
    in the **Hierarchy**, and in the **Inspector** add a Tilemap Collider 2D. Click
    Add Component then choose Tilemap | Tilemap Collider 2D.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new Layer named Ground, and set the Tilemap-platforms GameObject to
    be on this Layer (this will allow characters to jump when standing on a platform).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's test our platform **Scene** with a 2D character – we can reuse the potatoman
    character from Unity's free tutorials. Import the provided PotatoManAssets package
    into your project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s set up the 2D gravity setting for this project since the size of the
    potatoman character is big with respect to the platforms. We''ll make the character
    move slowly by having a heavy gravity setting of Y= -60\. Set 2D gravity to this
    value by choosing menu: Edit | Project Settings | Physics 2D, and then at the
    top change the Y value to -60.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag an instance of the potatoman hero character2D from the Project | Prefabs
    folder into the **Scene**. Position him somewhere above one of your platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Play the **Scene**. The 2D hero character should fall down and land on the platform.
    You should be able to move the character left and right, and make him jump using
    the *Space* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You may wish to decorate the scene by dragging some of the Objects Sprites onto
    the **Scene** (in the **Project** panel folder, Project | DesertTilePack | Object).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By having a set of platform Sprites that are all a regular size (128 x 128),
    it is straightforward to create a Tile Palette from those Sprites, and then to
    add a Grid and Tilemap to the **Scene**, allowing the Tile Palette brush to paint Tiles
    into the **Scene**.
  prefs: []
  type: TYPE_NORMAL
- en: You had to set the Sprite pixels per unit to 128, so each Tile maps to a 1 x
    1 Unity grid unit.
  prefs: []
  type: TYPE_NORMAL
- en: You added a Tilemap Collider 2D to the Tilemap GameObject, so that characters
    (such as the potatoman) can interact with the platforms. By adding a Layer Ground,
    and setting the Tilemap GameObject to this Layer, jumping code in the potatoman
    character-controller script can test the Layer of the object being stood above,
    so that the jump action will only be possible when standing on a platform Tile.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here are some suggestions for enhancing this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Tile Palettes for objects and walls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The object Sprites in the Desert free pack are all different sizes, and certainly
    not consistent with the 128 x 128 Sprite size for the platform Tiles.
  prefs: []
  type: TYPE_NORMAL
- en: However, if the Sprites for the objects and walls in your game *are* the same
    size as your platform Sprites, you can create a Tile Palette for your objects,
    and paint them into the **Scene** using the Tile Palette brush.
  prefs: []
  type: TYPE_NORMAL
- en: Rule Tiles for intelligent Tile selection
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you explore the 2D Extras Pack, or the 2D GameKit (see next recipe), you'll
    learn about Rule Tiles. These allow you to define rules about the choice of a
    Tile based on its neighbors. For example, you wouldn't put a platform top Tile
    immediately on top of another one, so Rule Tiles would place some kind of ground
    tile to be the Tile under the platform top tile. Rules can ensure the leftmost
    and rightmost tiles in a group select the Tiles with artwork for the edges, and
    so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'A good introduction to Rule Times can be found in this Unity live training
    video session: [https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/using-rule-tiles-tilemap).'
  prefs: []
  type: TYPE_NORMAL
- en: Learning more
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some learning resources about Tilemapping:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity TileMap tutorial: [https://unity3d.com/learn/tutorials/topics/2d-game-creation/intro-2d-world-building-w-tilemap](https://unity3d.com/learn/tutorials/topics/2d-game-creation/intro-2d-world-building-w-tilemap)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity tutorial TileMap assets: [https://oc.unity3d.com/index.php/s/VzImolXrvp3K2Q5/download](https://oc.unity3d.com/index.php/s/VzImolXrvp3K2Q5/download)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lots of 2D Extra resources, free from Unity Technologies: [https://github.com/Unity-Technologies/2d-extras](https://github.com/Unity-Technologies/2d-extras)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Sean Duffy''s great tutorial on Tilemapping on the Ray Wenderlich site: [https://www.raywenderlich.com/188105/introduction-to-the-new-unity-2d-tilemap-system](https://www.raywenderlich.com/188105/introduction-to-the-new-unity-2d-tilemap-system)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a game with the 2D Gamekit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A collection of Unity 2D tools has been combined to become the Unity 2D GameKit.
    In this recipe, we''ll create a simple 2D-platformer to explore some of the features
    offered by the 2D GameKit, including pressure plates, doors, and falling objects
    damaging enemies:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/46809072-b6bd-4e96-b122-6b5f504cb7cf.png)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe uses the free Unity Asset Store and Package Manager packages.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a game with the **2D GameKit**, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new Unity 2D project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the Package Manager to install the Cinemachine and Post Processing packages
    (if these are installed, you'll get errors when downloading the 2D GameKit).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Import 2D GameKit (free from Unity Technologies) from the Asset Store.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Close and then re-open the Unity Editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a new 2D GameKit**Scene**, by choosing menu: Kit Tools | Create New
    Scene. You''ll then be asked to name the **Scene**, and a new **Scene** asset
    file will be created in your Project | Assets folder. You''ll see there are quite
    a few special GameObjects in the **Hierarchy** of your new **Scene**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a0a8d52f-4abb-411a-8e38-e5a665a0d5de.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the new **Scene** starts off containing an animated 2D character
    (Ellen), and a small platform.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the **Inspector**, select the Tilemap child of the TilemapGrid GameObject –  we
    are getting ready to paint some Tiles onto this Tilemap GameObject.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Display the Tile Palette, choose menu: Window | 2D | Tile Palette. Select TilesetGameKit,
    and click on the green-topped grass platform Tile. Select the Paint with active
    Brush tool (the *paintbrush* icon).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start painting grass-topped platforms onto the **Scene**. This is a Rule Tile,
    so it cleverly ensures that only the top Tiles in a touching group are painted
    with the grass-topped Tile. The other touching tiles (left/right/below) are painted
    with a brown, earthy Tile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a wide, flat area, and then to the right of where Ellen starts, create
    a very tall wall of earth, too tall for Ellen to jump over.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add four Spikes between Ellen and the earth wall, so she would get hurt trying
    to jump over them. Drag instances of the Spikes Prefab from  the 2DGameKit | Prefabs
    | Environment Project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To make things even harder, add a Chomper enemy between the Spikes and the
    earth wall! Drag an instance of the Chomper Prefab from the 2DGameKit | Prefabs
    | Enemies Project folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2c611415-5bd6-4620-a10d-79892271ca6c.png)'
  prefs: []
  type: TYPE_IMG
- en: We have to give Ellen some way to get past the earth wall that avoids the Spikes
    and Chomper obstacles. Let's add a Teleporter, to the left of where Ellen starts.
    Drag an instance of the Teleporter Prefab from the 2DGameKit | Prefabs | Interactables Project
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's create a destination point for the Teleporter using a custom Sprite. Import
    the EnemyBug Sprite into this project, and drag an instance from the **Project**
    panel into the Scene – somewhere to the right of the earth wall.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Teleporters require a Transition Point component in the GameObject that is to
    be the destination of the teleportation. Add a Collider 2D to Enemy Bug, choose
    Add Component | Physics 2D | Box Collider 2D. Check its Is Trigger option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a Transition Point component to Enemy Bug, choose Add Component, search
    for Transition, and then add Transition Point.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can now set up the Teleporter. With the Teleporter selected in the **Hierarchy**,
    in the **Inspector** for the Transition Point (Script) component, do the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Transitioning Game Object: Drag Ellen into this slot'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transition Type: Choose Same Scene from the drop-down menu'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Destination Transform: Drag Enemy Bug into this Transition Point slot'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Transition When: Choose On Trigger Enter from the drop-down menu:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/e4ca9c51-468f-49e7-802a-a2fbf1e431c0.png)'
  prefs: []
  type: TYPE_IMG
- en: Run the **Scene**. Ellen can safetly avoid the Spikes and Chomper by using the
    Teleporter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's make it a bit more interesting – having the Teleporter GameObject initially
    inactive (not visible or able to be interacted with), and adding a switch that
    Ellen has to hit to make the Teleporter active.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Teleporter GameObject in the **Hierarchy**, and uncheck its active
    box at the top-left of the **Inspector** – the GameObject should be invisible,
    and appear greyed out in the **Hierarchy**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a single-use switch to the game, to the left of where Ellen starts. Drag
    an instance of the Single Use Switch from the 2DGameKit | Prefabs | Interactables Project
    folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'With the Single Use Switch selected in the **Hierarchy**, in the **Inspector**
    set the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Layers: Add Layer Player to the Interactable Layers (so the switch can be enabled
    by the Player colliding or firing a bullet)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On Enter: Drag Teleporter into a free RunTime Only GameObject Slot, and change
    the action drop-down menu from No Function to GameObject | Set Active (bool),
    and then check the checkbox that appears.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the **Scene**. Ellen now has to travel over to the switch, to reveal the
    Teleporter, which then leads her to safely transport to the Enemy Bug location,
    beyond the earth wall and away from danger.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have dipped our toes into the wide range of features of the 2D GameKit. Hopefully
    this recipe gives you an idea of how to work with the provided Prefabs, and also
    how to explore how custom artwork can be used, with appropriately-added components
    to create your own GameObjects using the features of the 2D GameKit.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the Ellen 2D character, you''ll see some scripted components
    that manage the character''s interaction with the 2D GameKit. These include:'
  prefs: []
  type: TYPE_NORMAL
- en: 'CharacterController 2D: Movement and physics interactions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Player Input: Keyboard/input control mapping, so you can change which keys/controller
    buttons control movement, jumping, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Player Character: How characters interact with the 2D GameKit, including fighting
    (melee), damage, and bullet pool'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Learn more about Ellen and her component in the reference guide: [https://unity3d.com/learn/tutorials/projects/2d-game-kit/ellen?playlist=49633](https://unity3d.com/learn/tutorials/projects/2d-game-kit/ellen?playlist=49633).'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some learning resources about the Unity 2D GameKit:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unity''s 2D GameKit online tutorials/Reference guide/Advanced topics: [https://unity3d.com/learn/tutorials/s/2d-game-kit](https://unity3d.com/learn/tutorials/s/2d-game-kit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Unity ''s official 2D GameKit forum: [https://forum.unity.com/threads/2d-game-kit-official-thread.517249/](https://forum.unity.com/threads/2d-game-kit-official-thread.517249/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Asset Store 2D GameKit tutorial project: [https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-game-kit-107098](https://assetstore.unity.com/packages/essentials/tutorial-projects/2d-game-kit-107098)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Series of YouTube video tutorials from Unity Technologies entitled Getting
    Started with 2D Game Kits:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overview and Goals [1/8]: [https://www.youtube.com/watch?v=cgqIOWu8W1c](https://www.youtube.com/watch?v=cgqIOWu8W1c)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ellen and Placing Hazards [2/8] Live 2018/2/21: [https://www.youtube.com/watch?v=V2_vj_bbB4M](https://www.youtube.com/watch?v=V2_vj_bbB4M)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adding Moving Platforms [3/8]: [https://www.youtube.com/watch?v=SfC3qYz4gAI](https://www.youtube.com/watch?v=SfC3qYz4gAI)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Doors and Destructible Objects [4/8]: [https://www.youtube.com/watch?v=-hj6HnbI7PE](https://www.youtube.com/watch?v=-hj6HnbI7PE)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Adding and Squishing Enemies [5/8]: [https://www.youtube.com/watch?v=WRKG_DDlUnQ](https://www.youtube.com/watch?v=WRKG_DDlUnQ)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using The Inventory System [7/8]: [https://youtu.be/LYQz-mtr90U](https://youtu.be/LYQz-mtr90U)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Teleporting and Dialog Boxes [8/8]: [https://www.youtube.com/watch?v=gZ_OZL57c0g](https://www.youtube.com/watch?v=gZ_OZL57c0g)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
