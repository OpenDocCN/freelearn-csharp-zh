- en: Mock Test 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In your application, you have implemented the `LogException(string message)`
    method to log exceptions. When an exception is thrown from your application, you
    want to log and rethrow the original exception. How do you achieve this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch(Exception ex){LogException(ex.Message); throw;}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch(Exception ex){LogException(ex.Message); throw ex;}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch{LogException(ex.Message); throw new Exception();}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch{LogException(ex.Message); rethrow;}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You have created an application where you have implemented custom exception
    types and have also implemented multiple log methods, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You have a method that can throw one of the preceding exceptions. You need
    to make sure that, when the exception is caught, a log exception message by the
    log method accepts the exception; when `CustomException2` is caught, a log message
    by the log method accepts `CustomException2`; and the same for `CustomException3`.
    How do you want to achieve this? Please specify the order of catch statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`catch(CustomException1 ex){...}`'
  prefs:
  - PREF_UL
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch(CustomExceotion2 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch(CustomException3 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch(Exception ex){...}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch(CustomExceotion2 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch(CustomException3 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch(Exception ex){...}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch(CustomExceotion1 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch(CustomException3 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`catch(CustomExceotion2 ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`catch(Exception ex){...}`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Your application is running multiple tasks using a task factory. However, a
    customer has requested you to run a specific task when its parent task throws
    an exception. How do you achieve this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`task.when()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`task.whenany()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`task.continuewhenany()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Your application is running multiple worker threads. How do you make sure that
    your application waits for all the threads to complete their execution?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.Sleep()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.WiatALL()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Thread.Join()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Secret key encryption is also known as asymmetric encryption.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`True`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`` `False` ``'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: In public-key encryption, anyone with the public key can process the message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`True`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`False`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When using `RSACryptoServiceProvider` in your sample application, how would
    you get your public and private keys?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`string publicKey = rsa.ToXmlString(false);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string pricateKey = rsa.ToXmlString(true);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`string publicKey = rsa.ToXmlString(true);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string pricateKey = rsa.ToXmlString(false);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`string publicKey = rsa.ToXmlString(public);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string pricateKey = rsa.ToXmlString(private);`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`string publicKey = rsa.ToXmlString("public");`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`string pricateKey = rsa.ToXmlString("private");`'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the best way to authenticate a sender?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Encrypt your message.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign your message.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use digital signatures.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you apply the hash algorithm on a string, what will the output be?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The string gets encrypted.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Each character gets hashed into a different binary string.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The string gets hashed as a whole.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are adding new features to an existing application for your customers. When
    you deploy them, you get an assembly manifest mismatch error. What is the best
    possible solution to resolve this issue?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update all major and minor assembly versions of the current and dependent assemblies,
    then rebuild and deploy.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Check all assembly versions of the current and dependent assemblies and make
    sure the configurations or policies are updated to reflect the change in assembly
    versions, then rebuild and deploy.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `machine.config` file to ignore such errors.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Update `web.config` and set the custom error mode to `off`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You create a release package and deploy your application into a production environment.
    When users start using the application, they receive an error. You are unable
    to reproduce it in any lower-level environments, so you decide to debug your application
    in the production environment. However, the application never stops at the breakpoint.
    Why is this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You don't have local admin permissions on the system.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Visual Studio's debugging module is not loaded.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The release version doesn't allow us to debug.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You create an application and you want to monitor it while it is executing.
    So, you decide to implement tracing. How do you trace your application so that
    you can see your trace messages in the output window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `Console.WriteLine()`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use `tracelistener` to add the output window and use `trace.write`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Debug.WriteLine()`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Output.WriteLine()`.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are creating an application where you have an `if` statement and an `else`
    statement. In the `if` statement, you have two conditions. You want both of these
    conditions to be validated before executing the code block. How do you achieve
    this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `&&` operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `&` operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `|` operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: User the `||` operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you return a default value into a variable when your expression returns
    a null value?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `ternary` operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `binary` operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the conditional `OR`.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `null` coalescing operator.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You have multiple versions of the same method in your code. Your customer has
    requested you to make sure that all dependent applications use a specific version
    of the method. How do you make sure that no one invokes any other methods which
    may cause other exceptions?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the access modifiers for all other methods.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Throw an exception from these methods.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the `Obsolete` attribute to let users know the correct method to use.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are creating a C# application where you need to output multiple lines with
    a line break between them. How do you achieve this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var sb = new StringBuilder();sb.AppendLine(Line1); sb.AppendLine(Environment.NewLine);`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var sb = new StringBuilder();foreach(string line in strList){sb.AppendLine(Line1);
    sb.AppendLine(Environment.NewLine); }`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`var sb = new StringBuilder();sb.Append(Line1); sb.Append(''\t'');`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How would you make sure a parent class method is not accessible in inherited
    classes? Which access modifier would you use?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Private
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Internal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Protected
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Abstract
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Specify the code to load an assembly at runtime:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Assembly.Load()`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Assembly.Create("A1.dll");Assembly.Load();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Assembly.Load("a.dll");`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Assembly.GetType().Load();`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you create a C# console application, which files do you see in the solution
    explorer?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Project, `App.Config`, `Program.cs`, Solution, Properties, and References
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App.Config`, `Program.cs`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Project, `App.Config`, `Program.cs`, Solution, Properties
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`App.Config`, `Program.cs`, Properties'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When you create a console application and change the `static Main(string[] args)`
    to `static main(string[] args)`, what will happen?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A compile-time error is raised.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A runtime error is raised.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both **a** and **b**.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None of the above.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A class or a class member that is declared as internal can only be accessed
    by classes in the same assembly but not by outside assemblies.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider the following statements. **Statement 1**: A value type maintains
    the address of the variable. **Statement 2**: Two reference type variables pointing
    at address 1 reflect the updated value.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both are true.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Statement 1 is true, statement 2 is false.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Statement 1 is false, statement 2 is true.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both are false.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: While defining an interface, it is good practice to have access modifiers for
    the methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'True'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'False'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you define an optional parameter?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`void AddNumbers(int a=1, int b)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`void AddNumbers(int a, int b optional)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`void AddNumbers(int a, int b=4)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`void Add numbers(int a, optional int b)`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the keyword that you use in a program function where you are using a
    pointer declaration?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sealed
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Safe
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Internal
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Unsafe
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What syntax do we use to append text to a file?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`File.CreateText`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`FileInfo.Create`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`File.Create`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`File.AppendText`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which collection type can be used to create a strongly typed, zero-based index
    to process objects in a FIFO manner?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Queue<T>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`List<T>`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Array`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Dictionary`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are creating an application that manages information. You define a save
    method in the class and you want to ensure that only this class and any inherited
    classes can invoke the method. You want to define the save method as a strongly
    typed method. How do you achieve this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static void Save<T>(T target) where T : new(), ParentClass {}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static void Save<T>(T target) where T : ParentClass,new() {}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static void Save<T>(T target) where T : ParentClass {}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`public static void Save(ParentClass target) {}`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You are developing an assembly that will be used by multiple applications. You
    need to install it in GAC. Which actions would you perform to achieve this?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Sign the assembly and use the Gacutil tool to install the assembly in GAC.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Version assembly and use the Regsvr32 tool to install the assembly in GAC.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Drag and drop to the Windows assembly folder.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the above.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: When two parties need to communicate using the asymmetric algorithm, which key
    do they need to share?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Private key
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Public key
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Both
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: None
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
