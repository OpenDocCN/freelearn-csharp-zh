- en: Implementing Design Patterns for Web Applications - Part 1
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施面向 Web 应用的设计模式 - 第 1 部分
- en: In this chapter, we will continue building the **FlixOne** Inventory Management
    application (see [Chapter 3](3a038a92-9207-4232-9acd-d17cb24da6c5.xhtml), *Implementing
    Design Patterns Basics – Part 1*), and we will discuss the conversion of a console
    application to a web application. The web application should be more appealing
    to users, as opposed to a console application; Here, we will also discuss why
    we are going for this change.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续构建 **FlixOne** 库存管理应用程序（参见 [第 3 章](3a038a92-9207-4232-9acd-d17cb24da6c5.xhtml)，*实施设计模式基础
    - 第 1 部分*），并将讨论将控制台应用程序转换为 Web 应用程序的过程。与控制台应用程序相比，Web 应用程序应该更吸引用户；在这里，我们还将讨论为什么我们要进行这种改变。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a .NET Core web application
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建 .NET Core Web 应用程序
- en: Crafting a web application
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个 Web 应用程序
- en: Implementing CRUD pages
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施 CRUD 页面
- en: If you have not looked at the earlier chapters yet, please note that the **FlixOne
    Inventory Management** web application is an imaginary product. We are creating
    this application to discuss the various design patterns required in web projects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未查看前面的章节，请注意，**FlixOne 库存管理** Web 应用程序是一个虚构的产品。我们创建此应用程序是为了讨论在 Web 项目中所需的各个设计模式。
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter contains various code examples to explain the concepts. The code
    is kept simple and is just for demonstration purposes. Most of the examples involve
    a **.NET Core** console application written in C#.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含各种代码示例，以解释概念。代码保持简单，仅用于演示目的。大多数示例涉及一个用 C# 编写的 **.NET Core** 控制台应用程序。
- en: 'To run and execute the code, you need the following:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行和执行代码，您需要以下内容：
- en: Visual Studio 2019 (you can also run the application using Visual Studio 2017
    Update 3 or later)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio 2019（您也可以使用 Visual Studio 2017 更新 3 或更高版本运行应用程序）
- en: Environment Setup for .NET Core
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: .NET Core 环境设置
- en: SQL Server (the Express edition is used in this chapter)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SQL Server（本章中使用的是 Express 版本）
- en: Installing Visual Studio
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Visual Studio
- en: 'To run these code examples, you need to install Visual Studio (2017), or later
    version such as 2019 (or you can use your preferred IDE). To do this, follow these
    steps:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些代码示例，您需要安装 Visual Studio（2017）或更高版本，例如 2019（或者您可以使用您首选的 IDE）。为此，请按照以下步骤操作：
- en: 'Download Visual Studio from: [https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio).'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从：[https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio](https://docs.microsoft.com/en-us/visualstudio/install/install-visual-studio)
    下载 Visual Studio。
- en: Follow the installation instructions included. Multiple versions are available
    for the Visual Studio installation. In this chapter, we are using Visual Studio
    for Windows.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照包含的安装说明操作。Visual Studio 安装有多个版本可用。在本章中，我们使用的是 Windows 版本的 Visual Studio。
- en: Setting up .NET Core
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 .NET Core
- en: 'If you do not have .NET Core installed, you need to follow these steps:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装 .NET Core，您需要按照以下步骤操作：
- en: 'Download .NET Core from: [https://www.microsoft.com/net/download/windows](https://www.microsoft.com/net/download/windows).'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从：[https://www.microsoft.com/net/download/windows](https://www.microsoft.com/net/download/windows)
    下载 .NET Core。
- en: 'Follow the installation instructions and follow the related library: [https://dotnet.microsoft.com/download/dotnet-core/2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2).'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照安装说明，并遵循相关的库：[https://dotnet.microsoft.com/download/dotnet-core/2.2](https://dotnet.microsoft.com/download/dotnet-core/2.2)。
- en: Installing SQL Server
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 SQL Server
- en: 'If you do not have SQL Server installed, you need to follow these instructions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未安装 SQL Server，您需要按照以下说明操作：
- en: 'Download SQL Server from: [https://www.microsoft.com/en-in/download/details.aspx?id=1695](https://www.microsoft.com/en-in/download/details.aspx?id=1695).'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从：[https://www.microsoft.com/en-in/download/details.aspx?id=1695](https://www.microsoft.com/en-in/download/details.aspx?id=1695)
    下载 SQL Server。
- en: 'You can find the installation instructions at: [https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017).'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在以下位置找到安装说明：[https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms?view=sql-server-2017).
- en: 'For troubleshooting and for more information, refer to: [https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm](https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如需故障排除和更多信息，请参阅：[https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm](https://www.blackbaud.com/files/support/infinityinstaller/content/installermaster/tkinstallsqlserver2008r2.htm).
- en: This section is meant to provide the prerequisite information to get started
    with web applications. We'll look at more details in the subsequent sections.
    In this chapter, we will use code examples to elaborate on various terms and sections.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节旨在提供开始使用 Web 应用程序所需的基本信息。我们将在后续章节中查看更多细节。在本章中，我们将使用代码示例来阐述各种术语和部分。
- en: 'The complete source code is available at: [https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可在以下链接获取：[https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6).
- en: Creating a .Net Core web application
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 .Net Core Web 应用程序
- en: At the beginning of this chapter, we discussed our FlixOne console-based application,
    and there are various reasons to go with a web application as identified by the
    business team. Now it's time to make changes in the application. In this section,
    we will start the creation of a new UI of our existing FlixOne application with
    a new look and feel. We will also discuss all the requirements and initialization.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的开头，我们讨论了我们的 FlixOne 基于控制台的应用程序，并且业务团队已经确定了采用 Web 应用程序的各种原因。现在是时候对应用程序进行更改了。在本节中，我们将开始创建一个具有新外观和感觉的现有
    FlixOne 应用程序的新用户界面。我们还将讨论所有需求和初始化。
- en: Kicking off the project
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动项目
- en: In continuation of our existing FlixOne console application, management has
    decided to revamp our FlixOne Inventory console application with a lot of features.
    Management came to the conclusion that we have to convert our existing console
    application into a web-based solution.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们现有的 FlixOne 控制台应用程序的基础上，管理层决定用许多新特性来翻新我们的 FlixOne 库存控制台应用程序。管理层得出结论，我们必须将现有的控制台应用程序转换为基于
    Web 的解决方案。
- en: 'The tech team and the business team sat down together and identified the various
    reasons why the decision was made to scrap the current console application:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 技术团队和业务团队坐下来讨论了为什么决定废弃当前控制台应用程序的多种原因：
- en: The interface is not interactive.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 界面不交互。
- en: The application is not available everywhere.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用程序并非在所有地方都可用。
- en: It is complex to maintain.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护起来很复杂。
- en: The growing business needs a scalable system with higher performance and adaptability.
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着业务的增长，需要具有更高性能和适应性的可扩展系统。
- en: Developing requirements
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发需求
- en: 'The following list of requirements was produced as the outcome of the discussions.
    The high-level requirements identified are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表是讨论的结果，确定的高层次需求如下：
- en: Product categorization
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品分类
- en: Product addition
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品添加
- en: Product updating
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品更新
- en: Product deletion
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品删除
- en: 'The actual requirements that the business demands fall on the developers. These
    technical requirements include the following:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 业务对开发者的实际需求包括以下技术要求：
- en: '**A landing or home page**: This should be a dashboard that contains various
    widgets, and it should show a summary of the store.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个着陆页或主页**：这应该是一个包含各种小部件的仪表板，并显示商店的摘要。'
- en: '**A product page**: This should have the ability to add, update, and delete
    products and categories.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个产品页面**：应该具有添加、更新和删除产品和类别的功能。'
- en: Crafting a web application
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个 Web 应用程序
- en: According to the requirements just discussed, our main goal is to convert our
    existing console application to a web application. In the process of this conversion,
    we will discuss various design patterns for web applications, and the importance
    of these design patterns in the context of web applications.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 根据刚刚讨论的需求，我们的主要目标是把现有的控制台应用程序转换为 Web 应用程序。在这个过程中，我们将讨论各种适用于 Web 应用程序的设计模式，以及这些设计模式在
    Web 应用程序背景下的重要性。
- en: Web applications and how they work
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web 应用程序及其工作原理
- en: Web applications are one of the best implementations of the client-server architecture.
    A web application can be a small piece of code, a program, or a complete solution
    for a problem or a business scenario in which users interact with one another
    or with the server, using browsers. A web application serves requests and responses
    via browsers, mainly through the use of **HyperText Transfer Protocol** (**HTTP**).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用是客户端-服务器架构的最佳实现之一。一个网络应用可以是一小段代码、一个程序，或者是一个针对问题或业务场景的完整解决方案，在这个场景中，用户可以通过浏览器相互交流或与服务器交流。网络应用通过浏览器提供请求和响应，主要通过使用**超文本传输协议**（**HTTP**）来实现。
- en: 'Whenever any communication occurs between the client and the server, two things
    happen: the client initiates the request and the server generates the response.
    This communication is made up of HTTP requests and HTTP responses. For more information,
    refer to the documentation at: [https://www.w3schools.com/whatis/whatis_http.asp](https://www.w3schools.com/whatis/whatis_http.asp).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端和服务器之间发生任何通信时，会发生两件事：客户端发起请求，服务器生成响应。这种通信由HTTP请求和HTTP响应组成。更多信息，请参阅[https://www.w3schools.com/whatis/whatis_http.asp](https://www.w3schools.com/whatis/whatis_http.asp)的文档。
- en: 'In the following diagram, you can see an overview of a web application and
    how it works:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，你可以看到网络应用的整体概述及其工作方式：
- en: '![](img/a6f3af7f-d494-4645-afd7-0f7b4f81254d.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a6f3af7f-d494-4645-afd7-0f7b4f81254d.png)'
- en: From this diagram, you can easily see that with the use of a browser (as a client),
    you're opening doors for millions of users who can access the website from anywhere
    in the world and can interact with you as a user. With a web application, you
    and your customers can communicate easily. Generally, effective engagement is
    only possible when you capture and store the data with all the necessary information
    required for your business and your users. This information is then processed,
    and the results are presented to your users.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 从这张图中，你可以很容易地看出，使用浏览器（作为客户端），你为成千上万的用户打开了大门，他们可以从世界任何地方访问网站并与你互动。有了网络应用，你和你的客户可以轻松沟通。通常，只有在捕获并存储了所有必要信息的数据时，才能实现有效的互动，这些信息对于你的业务和用户都是必需的。然后，这些信息被处理，并将结果呈现给用户。
- en: In general, web applications use a combination of server-side code to handle
    the storage and retrieval of the information, and client-side scripts to present
    the information to the users.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，网络应用结合使用服务器端代码来处理信息的存储和检索，以及客户端脚本向用户展示信息。
- en: The web application requires a web server (such as **IIS** or **Apache**) to
    manage requests coming from the client (from the browser, as can be seen in the
    previous diagram). An application server (such as IIS or Apache Tomcat) is also
    required to perform the tasks requested. A database is sometimes needed to store
    the information as well.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用需要一个网络服务器（如**IIS**或**Apache**）来管理来自客户端（从浏览器，如前图所示）的请求。还需要一个应用服务器（如IIS或Apache
    Tomcat）来执行请求的任务。有时还需要数据库来存储信息。
- en: Put simply, both a web server and an application server are designed to serve
    HTTP content, but with certain variations. Web servers serve static HTTP content,
    such as HTML pages. Application servers can, apart from serving static HTTP content,
    also serve dynamic content, using different programming languages. For more information,
    refer to [https://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server](https://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，网络服务器和应用服务器都是为了提供HTTP内容而设计的，但存在某些差异。网络服务器提供静态HTTP内容，如HTML页面。应用服务器除了提供静态HTTP内容外，还可以使用不同的编程语言提供动态内容。更多信息，请参阅[https://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server](https://stackoverflow.com/questions/936197/what-is-the-difference-between-application-server-and-web-server)。
- en: 'We can elaborate on the workflow of a web application as follows. These are
    known as the five-step working processes of a web application:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以详细说明网络应用的流程如下。这些被称为网络应用的五步工作流程：
- en: A request is triggered by the client (browser) to the web server using HTTP
    (in most cases) over the internet. This usually happens through a web browser
    or the application's user interface.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 客户端（浏览器）通过HTTP（在大多数情况下）在互联网上向网络服务器发送请求。这通常是通过网络浏览器或应用程序的用户界面完成的。
- en: The request arises at the web server, and the web server forwards the request
    to the application server (for different requests, there would be different application
    servers).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求在 Web 服务器上产生，Web 服务器将请求转发到应用服务器（对于不同的请求，可能会有不同的应用服务器）。
- en: In the application server, the requested tasks are completed. This might involve
    querying the database server, retrieving information from the database, processing
    information, and building results.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用服务器中，完成请求的任务。这可能涉及查询数据库服务器，从数据库中检索信息，处理信息，并构建结果。
- en: The generated results (the requested information or the processed data) are
    sent to the web server.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成的结果（请求的信息或处理的数据）被发送到 Web 服务器。
- en: Finally, the response is sent back to the requester (the client) from the web
    server with the requested information. This appears on the user's display.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，Web 服务器将带有请求信息的响应发送回请求者（客户端），这会显示在用户的显示设备上。
- en: 'The following diagram shows a pictorial overview of these five steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了这五个步骤的概览：
- en: '![](img/195177cd-d19e-474a-a84a-242a3be32cb4.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/195177cd-d19e-474a-a84a-242a3be32cb4.png)'
- en: In the following sections, I will describe the working process of the web application
    using the **Model-View-Controller** (**MVC**) pattern.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下章节中，我将描述使用 **模型-视图-控制器**（**MVC**）模式的 Web 应用程序的工作流程。
- en: Coding the web application
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Web 应用程序代码
- en: Up until now, we have gone through the requirements and looked at our aim, which
    is to convert a console application into a web-based platform or application.
    In this section, we will develop the actual web application using Visual Studio.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经了解了需求，并查看我们的目标，即把控制台应用程序转换成基于 Web 的平台或应用程序。在本节中，我们将使用 Visual Studio
    开发实际的 Web 应用程序。
- en: 'Carry out the following steps to create a web application using Visual Studio:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤使用 Visual Studio 创建 Web 应用程序：
- en: Open the Visual Studio instance.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 实例。
- en: 'Click on File|New|Project or press *Ctrl + Shift + N*, as shown in the following
    screenshot:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 File|New|Project 或按 *Ctrl + Shift + N*，如下面的截图所示：
- en: '![](img/111a9983-9056-44db-a155-8f0a4352373e.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/111a9983-9056-44db-a155-8f0a4352373e.png)'
- en: From the New Project window, select Web|.NET Core|ASP.NET Core Web Application.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从新建项目窗口，选择 Web|.NET Core|ASP.NET Core Web Application。
- en: Name it (for example, `FlixOne.Web`), select the location, and then you can
    update the solution name. By default, the solution name will be the same as the
    project name. Check the Create directory for solution checkbox. You can also choose
    to check the Create new Git repository checkbox (if you want to create a new repository
    for this, you need a valid Git account).
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命名它（例如，`FlixOne.Web`），选择位置，然后您可以更新解决方案名称。默认情况下，解决方案名称将与项目名称相同。选中 Create directory
    for solution 复选框。您还可以选择选中 Create new Git repository 复选框（如果您想为这个项目创建一个新的仓库，您需要一个有效的
    Git 账户）。
- en: 'The following screenshot shows the creation process of a New project:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了创建新项目的流程：
- en: '![](img/d8703640-dbe5-4058-9740-1905a9b25e98.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d8703640-dbe5-4058-9740-1905a9b25e98.png)'
- en: 'The next step is to select the proper template for your web application and
    the .NET Core version. We are not going to enable Docker support for this project,
    as we are not going to deploy our application using Docker as the container. We
    will go with the HTTP protocol only, instead of HTTPS. Both the Enable Docker
    Support and Configure HTTPs checkboxes should, therefore, remain unchecked, as
    shown in the following screenshot:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是选择适合您的 Web 应用程序的模板和 .NET Core 版本。我们不会为这个项目启用 Docker 支持，因为我们不会使用 Docker 作为容器来部署我们的应用程序。我们只会使用
    HTTP 协议，而不是 HTTPS。因此，Enable Docker Support 和 Configure HTTPS 复选框应该保持未选中状态，如下面的截图所示：
- en: '![](img/e62d22ed-9dc7-4f16-a021-994702496622.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e62d22ed-9dc7-4f16-a021-994702496622.png)'
- en: 'We now have a complete project with our template and example code, using the
    MVC framework. The following screenshot shows our solution so far:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个完整的项目，包括我们的模板和示例代码，使用 MVC 框架。以下截图显示了到目前为止的解决方案：
- en: '![](img/6af17baa-1c2c-4b81-8653-5bfa980d6f69.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6af17baa-1c2c-4b81-8653-5bfa980d6f69.png)'
- en: Architectural patterns are a way of implementing best practices within the design
    of the user interface and application itself. They provide us with reusable solutions
    to common problems. These patterns also allow us to easily implement a separation
    of concerns.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 架构模式是在用户界面和应用本身的设计中实现最佳实践的一种方式。它们为我们提供了针对常见问题的可重用解决方案。这些模式还允许我们轻松实现关注点的分离。
- en: 'The most popular architectural patterns are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最流行的架构模式如下：
- en: '**Model-View-Controller** (**MVC**)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-控制器**（**MVC**）'
- en: '**Model-view-presenter** (**MVP**)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-表示器**（**MVP**）'
- en: '**Model-view-viewmodel** (**MVVM**)'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-视图模型**（**MVVM**）'
- en: 'You can try to run the application by hitting *F5*. The following screenshot
    shows the default home page of the web application:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过按 *F5* 来尝试运行应用程序。以下截图显示了 Web 应用程序的默认主页：
- en: '![](img/3a4a7a9a-9dd8-47c7-8ad0-f19344748448.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3a4a7a9a-9dd8-47c7-8ad0-f19344748448.png)'
- en: In the coming sections, I will discuss MVC patterns and create **CRUD** (**Create**,
    **Update**, and **Delete**) pages to interact with the users.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我将讨论 MVC 模式并创建 **CRUD**（**创建**、**更新**和**删除**）页面以与用户交互。
- en: Implementing CRUD pages
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现CRUD页面
- en: 'In this section, we will start creating functional pages to create, update,
    and delete products. To get started, open your `FlixOne` solution, and add the
    following classes into the specified folders:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将开始创建用于创建、更新和删除产品的功能页面。要开始，打开您的 `FlixOne` 解决方案，并将以下类添加到指定的文件夹中：
- en: '**`Models`**: Add the following files in the `Models` folder of the solution:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**`Models`**: 在解决方案的 `Models` 文件夹中添加以下文件：'
- en: '`Product.cs`: The code snippet of the `Product` class is as follows:'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Product.cs`: `Product` 类的代码片段如下：'
- en: '[PRE0]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `Product` class represents almost all the elements of the product. It has
    a `Name`, a complete `Description`, an `Image`, a `Price`, and a unique `ID` so
    that our system recognizes it. The `Product` class also has a `Category ID` to
    which this product belongs. It also includes a complete definition of the `Category`.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`Product` 类代表了产品几乎所有的元素。它有一个 `Name`、完整的 `Description`、`Image`、`Price` 和唯一的
    `ID`，以便我们的系统能够识别它。`Product` 类还包括一个属于此产品的 `Category ID`，以及 `Category` 的完整定义。'
- en: '**Why should we define a `virtual` property?**'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么我们应该定义一个 `virtual` 属性？**'
- en: In our `Product` class, we have defined a `virtual` property. This is because,
    in the **Entity Framework** (**EF**), this property helps to create a proxy for
    the virtual property. In this way, the property can support lazy loading and more
    efficient change tracking. This means that data is available on demand. EF loads
    the data when you request to use the `Category` property.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 `Product` 类中，我们定义了一个 `virtual` 属性。这是因为，在 **Entity Framework**（**EF**）中，这个属性有助于为虚拟属性创建代理。这样，属性可以支持延迟加载和更有效的更改跟踪。这意味着数据是按需提供的。EF
    在您请求使用 `Category` 属性时加载数据。
- en: '`Category.cs`: The code snippet of the `Category` class is as follows:'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Category.cs`: `Category` 类的代码片段如下：'
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Our `Category` class represents the actual category of the product. A category
    has a unique `ID`, a `Name`, a complete `Description`, and a collection of `Products`
    that belong to this category. Whenever we initialize our `Category` class, it
    initializes our `Product` class.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `Category` 类代表产品的实际类别。一个类别有一个唯一的 `ID`、一个 `Name`、完整的 `Description` 和属于此类别的
    `Products` 集合。每次我们初始化 `Category` 类时，它也会初始化我们的 `Product` 类。
- en: '`ProductViewModel.cs`: The code snippet of the `ProductViewModel` class is
    as follows:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProductViewModel.cs`: `ProductViewModel` 类的代码片段如下：'
- en: '[PRE2]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Our `ProductViewModel` class represents a complete `Product` which is having
    attributes like a unique `ProductId`, a `ProductName`, a complete `ProductDescription`,
    a `ProductImage`, a `ProductPrice`, a unique `CategoryId`, a `CategoryName`, and
    a complete `CategoryDescription`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 `ProductViewModel` 类代表了一个完整的 `Product`，它具有诸如唯一的 `ProductId`、`ProductName`、完整的
    `ProductDescription`、`ProductImage`、`ProductPrice`、唯一的 `CategoryId`、`CategoryName`
    和完整的 `CategoryDescription` 等属性。
- en: '`Controllers`: Add the following files to the `Controllers` folder of the solution:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Controllers`: 将以下文件添加到解决方案的 `Controllers` 文件夹中：'
- en: '`ProductController` is responsible for all operations related to products.
    Let''s take a look at the code and the operations that we are trying to achieve
    in this controller:'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ProductController` 负责所有与产品相关的操作。让我们看看代码和我们在本控制器中试图实现的操作：'
- en: '[PRE3]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we defined the `ProductController` that inherits from a `Controller` class.
    We used **dependency injection**, which is built-in support from the ASP.NET Core
    MVC framework.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了继承自 `Controller` 类的 `ProductController`。我们使用了 **依赖注入**，这是 ASP.NET Core
    MVC 框架内置的支持。
- en: 'We discussed the inversion of control in detail in [Chapter 5](fd71001a-4673-4391-a10b-2490e07f135e.xhtml),
    *Implementing Design Patterns - .Net Core;* `Controller` is a base class for an
    MVC controller. For more information, refer to: [https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controller](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controller).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](fd71001a-4673-4391-a10b-2490e07f135e.xhtml)中详细讨论了控制反转 - .Net Core；`Controller`是MVC控制器的一个基类。有关更多信息，请参阅：[https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controller](https://docs.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.mvc.controller)。
- en: We have created our main controller, `ProductController`. Let's now start adding
    functionalities for our CRUD operations.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了我们的主要控制器，`ProductController`。现在让我们开始添加CRUD操作的功能。
- en: 'The following code is simply a `Read` or `Get` operation that requests the
    repository (`_``inventoryRepository`) to list all available products, and then
    transposes this product list to the `ProductViewModel` type and returns an `Index`
    view:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码只是一个`Read`或`Get`操作，它请求仓库（`_inventoryRepository`）列出所有可用的产品，然后将此产品列表转换为`ProductViewModel`类型，并返回一个`Index`视图：
- en: '[PRE4]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the preceding code snippet, the `Details` method returns the details of a
    specific `Product` based on its unique `Id`. This is also a `Get` operation that
    is similar to our `Index` method, but it provides a single object instead of a
    list.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`Details`方法根据其唯一的`Id`返回特定`Product`的详细信息。这也是一个类似于我们的`Index`方法的`Get`操作，但它提供一个单独的对象而不是列表。
- en: 'The methods of the **MVC controller** are also called **action methods** and
    have the return type of `ActionResult`. In this case, we are using `IActionResult`.
    In general, you can say that `IActionResult` is an interface of the `ActionResult`
    class. It also provides us a way to return many things, including the following:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: MVC控制器的方法定义为**操作方法**，并具有`ActionResult`的返回类型。在这种情况下，我们使用`IActionResult`。一般来说，可以说`IActionResult`是`ActionResult`类的一个接口。它还为我们提供了一种返回多种方式，包括以下内容：
- en: '`EmptyResult`'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EmptyResult`'
- en: '`FileResult`'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FileResult`'
- en: '`HttpStatusCodeResult`'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpStatusCodeResult`'
- en: '`ContentResult`'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ContentResult`'
- en: '`JsonResult`'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JsonResult`'
- en: '`RedirectToRouteResult`'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RedirectToRouteResult`'
- en: '`RedirectResult`'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RedirectResult`'
- en: 'We are not going to discuss all of these in detail, as these are beyond the
    scope of this book. To find out more about return types, refer to: [https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types](https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types).'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会详细讨论所有这些，因为这些超出了本书的范围。要了解更多关于返回类型的信息，请参阅：[https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types](https://docs.microsoft.com/en-us/aspnet/core/web-api/action-return-types)。
- en: 'In the following code, we are creating a new product. The following code snippet
    has two action methods. One has the `[HttpPost]` attribute, and the other is without
    the attribute:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们正在创建一个新的产品。以下代码片段有两个操作方法。一个有`[HttpPost]`属性，另一个没有属性：
- en: '[PRE5]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The first method simply returns a `View`. This will return a `Create.cshtml`
    page.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法简单地返回一个`View`。这将返回一个`Create.cshtml`页面。
- en: If any of the action methods in the **MVC framework** do not have any attribute,
    it will use the `[HttpGet]` attribute by default. In other views, by default,
    action methods are `Get` requests. Whenever a user views a page, we use `[HttpGet]`,
    or a `Get` request. Whenever a user submits a form or performs an action, we use
    `[HttpPost]`, or a `Post` request.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果MVC框架中的任何操作方法都没有任何属性，它将默认使用`[HttpGet]`属性。在其他视图中，默认情况下，操作方法是`Get`请求。每当用户查看页面时，我们使用`[HttpGet]`，或`Get`请求。每当用户提交表单或执行操作时，我们使用`[HttpPost]`，或`Post`请求。
- en: 'If we did not explicitly mention the view name in our action method, then the
    MVC framework looks like a view name in this format: `actionmethodname.cshtml`
    or `actionmethodname.vbhtml`. In our case, the view name is `Create.cshtml` because
    we are using the C# language. It would be `vbhtml` if we used Visual Basic. It
    first looks in the folder that has a name that is similar to the controller''s
    folder name. If it does not find a file in this folder, it looks in the `shared`
    folder.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在我们的操作方法中没有明确提及视图名称，那么MVC框架看起来像这样的视图名称：`actionmethodname.cshtml`或`actionmethodname.vbhtml`。在我们的例子中，视图名称是`Create.cshtml`，因为我们使用的是C#语言。如果我们使用Visual
    Basic，它将是`vbhtml`。它首先在名称类似于控制器文件夹名称的文件夹中查找。如果在这个文件夹中找不到文件，它将在`shared`文件夹中查找。
- en: The second action method in the previous code snippet uses the `[HttpPost]`
    attribute, which means it handles `Post` requests. This action method simply adds
    the product by calling the `AddProduct` method of `_repository`. In this action
    method, we have used the `[ValidateAntiForgeryToken]` attribute and `[FromBody]`,
    which is a model binder.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码片段中的第二个操作方法使用`[HttpPost]`属性，这意味着它处理`Post`请求。此操作方法通过调用`_repository`的`AddProduct`方法简单地添加产品。在此操作方法中，我们使用了`[ValidateAntiForgeryToken]`属性和`[FromBody]`，这是一个模型绑定器。
- en: The MVC framework provides a lot of security to protect our application from
    **Cross-Site Scripting**/**Cross-Site Request Forgery** (**XSS/CSRF**) attacks
    by providing the `[ValidateAntiForgeryToken]` attribute. These type of attacks
    generally include some dangerous client-side script code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: MVC框架通过提供`[ValidateAntiForgeryToken]`属性来为我们的应用程序提供大量安全保护，以防止**跨站脚本**/**跨站请求伪造**（XSS/CSRF）攻击。这类攻击通常包括一些危险的客户端脚本代码。
- en: 'Model binding in MVC maps data from `HTTP` requests to action method parameters.
    Frequently used model binding attributes with action methods are as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: MVC中的模型绑定将`HTTP`请求中的数据映射到操作方法参数。与操作方法一起频繁使用的模型绑定属性如下：
- en: '`[FromHeader]`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromHeader]`'
- en: '`` `[FromQuery]` ``'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`` `[FromQuery]` ``'
- en: '`[FromRoute]`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromRoute]`'
- en: '`[FromForm]`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[FromForm]`'
- en: We are not going to discuss these in more detail, as this is beyond the scope
    of this book. However, you can find complete details from the official documentation
    at [https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding](https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding).
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会对这些进行更详细的讨论，因为这超出了本书的范围。然而，您可以在官方文档中找到完整详情，网址为[https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding](https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding)。
- en: 'In the previous code snippets, we discussed the `Create` and `Read` operations.
    It''s now time to write a code for the `Update` operation. In the following code,
    we have two action methods: one is `Get`, and the other is a `Post` request:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的代码片段中，我们讨论了`Create`和`Read`操作。现在是时候编写`Update`操作的代码了。在以下代码中，我们有两个操作方法：一个是`Get`，另一个是`Post`请求：
- en: '[PRE6]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The first action method of the previous code gets a `Product` based on the
    `ID` and returns a `View`. The second action method takes the data from the view
    and updates the requested `Product` based on its ID:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 之前代码中的第一个操作方法根据`ID`获取`Product`并返回一个`View`。第二个操作方法从视图中获取数据并根据其ID更新请求的`Product`：
- en: '[PRE7]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, the previous code represents the `Delete` operation from our `CRUD`
    operations. It also has two action methods; one retrieves the data from the repository
    and serves it to the view, and another takes the data request and deletes the
    specific `Product` based on its ID.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，之前的代码表示了`CRUD`操作中的`Delete`操作。它也有两个操作方法；一个从存储库检索数据并将其提供给视图，另一个接收数据请求并根据其ID删除特定的`Product`。
- en: '`CategoryController` is responsible for all the operations of the `Product`
    category. Add the following code to the controller, it represents the `CategoryController`,
    where we have used dependency injections to initialize our `IInventoryRepository`:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`CategoryController`负责`Product`类别的所有操作。将以下代码添加到控制器中，它表示`CategoryController`，其中我们使用了依赖注入来初始化我们的`IInventoryRepository`：'
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following code contains two action methods. The first gets a list of categories,
    and the second is a specific category based on its unique ID:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码包含两个操作方法。第一个获取类别列表，第二个基于其唯一ID获取特定类别：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following code is for the `Get` and the `Post` request to create a new
    category in the system:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码用于对系统的`Get`和`Post`请求创建新类别：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In the following code, we are updating our existing category. The code contains
    the `Edit` action methods with `Get` and `Post` requests:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，我们正在更新现有的类别。代码包含带有`Get`和`Post`请求的`Edit`操作方法：
- en: '[PRE11]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, we have a `Delete` action method. This is the final operation of our
    `CRUD` pages for `Category` deletion as shown in the following code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个`Delete`操作方法。这是我们的`CRUD`页面中`Category`删除操作的最终操作，如下代码所示：
- en: '[PRE12]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`Views`: Add the following views to their respective folders:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`视图`: 将以下视图添加到相应的文件夹中：'
- en: '`Index.cshtml`'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Index.cshtml`'
- en: '`Create.cshtml`'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Create.cshtml`'
- en: '`Edit.cshtml`'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Edit.cshtml`'
- en: '`Delete.cshtml`'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Delete.cshtml`'
- en: '`Details.cshtml`'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Details.cshtml`'
- en: '`Contexts`: Add the `InventoryContext.cs` file to the `Contexts` folder with
    the following code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`上下文`: 将`InventoryContext.cs`文件添加到`Contexts`文件夹中，并包含以下代码：'
- en: '[PRE13]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code provides the various methods needed to interact with the
    database using EF. You might face the following exception while running the code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码提供了使用EF与数据库交互所需的各个方法。在运行代码时，您可能会遇到以下异常：
- en: '![](img/09846618-7502-478b-ae84-e203b2782913.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/09846618-7502-478b-ae84-e203b2782913.png)'
- en: 'To fix this exception, you should map to the `IInventoryRepository` in the
    `Startup.cs` file, as shown in the following screenshot:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了修复这个异常，您应该在`Startup.cs`文件中将映射到`IInventoryRepository`，如图所示：
- en: '![](img/f418bdc3-b1ce-46c5-a0b7-41d831833606.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f418bdc3-b1ce-46c5-a0b7-41d831833606.png)'
- en: 'We have now added various functionalities to our web application, and our solution
    now looks as shown in the following screenshot:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经为我们Web应用程序添加了各种功能，我们的解决方案现在看起来如下截图所示：
- en: '![](img/73cc1b91-de98-4cbb-b856-17e25a46a91b.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/73cc1b91-de98-4cbb-b856-17e25a46a91b.png)'
- en: Refer to the GitHub repository for this chapter ([https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6)).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅本章的GitHub仓库[https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6](https://github.com/PacktPublishing/Hands-On-Design-Patterns-with-C-and-.NET-Core/tree/master/Chapter6)。
- en: 'If we were to visualize the MVC model, then it would work as shown in the following
    diagram:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将MVC模型可视化，那么它将如以下图示所示工作：
- en: '![](img/6b34db05-1e93-4888-b96c-87eec3c74beb.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6b34db05-1e93-4888-b96c-87eec3c74beb.png)'
- en: The preceding image was adapted from [https://commons.wikimedia.org/wiki/File:MVC-Process.svg](https://commons.wikimedia.org/wiki/File:MVC-Process.svg)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像改编自[https://commons.wikimedia.org/wiki/File:MVC-Process.svg](https://commons.wikimedia.org/wiki/File:MVC-Process.svg)
- en: As shown in the previous diagram, whenever a user raises a request, it comes
    to the controller and triggers the action method to be further manipulated or
    updated, if required, to the model, and then serves the view to the user.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 如前图所示，每当用户发起请求时，它都会到达控制器，并触发动作方法，以便进一步处理或更新，如果需要的话，到模型，然后向用户提供服务。
- en: 'In our case, whenever a user requests `/Product`, the request goes to the `Index`
    action method of `ProductController` and serves the `Index.cshtml` view after
    fetching the list of products. You will get the product listing as shown in the
    following screenshot:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，每当用户请求`/Product`时，请求就会发送到`ProductController`的`Index`动作方法，并在获取产品列表后提供`Index.cshtml`视图。您将看到如下截图所示的产品列表：
- en: '![](img/2fdb3ea4-40db-49a3-852d-d682bc005bcb.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2fdb3ea4-40db-49a3-852d-d682bc005bcb.png)'
- en: The preceding screenshot is a simple product listing, and it represents the
    `Read` section of the `CRUD` operations. On this screen, the application shows
    the total available products and their categories.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图是一个简单的产品列表，它代表了`CRUD`操作中的`Read`部分。在这个屏幕上，应用程序显示了所有可用的产品和它们的类别。
- en: 'The following diagram depicts how our application interacts:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图示展示了我们的应用程序如何交互：
- en: '![](img/d2db4ee2-a842-4379-8522-3b31f80147af.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d2db4ee2-a842-4379-8522-3b31f80147af.png)'
- en: It shows the pictorial overview of the process of our application. The `InventoryRepository`
    depends on the `InventoryContext` for database operations and interacts with our
    model classes, `Category` and `Product`. Our controllers for `Product` and `Category`
    use the `IInventoryRepository` interface to interact with the repository for CRUD
    operations.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 它展示了我们应用程序流程的图示概述。`InventoryRepository`依赖于`InventoryContext`进行数据库操作，并与我们的模型类`Category`和`Product`交互。我们的`Product`和`Category`控制器使用`IInventoryRepository`接口与存储库进行CRUD操作。
- en: Summary
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The main goal of this chapter was to start a basic web application.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的主要目标是启动一个基本的Web应用程序。
- en: We started the chapter by discussing business requirements, why we needed a
    web application, and why we wanted to upgrade our console application. We then
    covered the step-by-step creation of a web application using Visual Studio in
    the MVC pattern. We also discussed how a web application can work as a client-server
    model, and looked at user interface patterns. We also started building CRUD pages.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以讨论业务需求开始本章，为什么我们需要一个Web应用程序，以及为什么我们想要升级我们的控制台应用程序。然后，我们逐步介绍了使用Visual Studio在MVC模式中创建Web应用程序的步骤。我们还讨论了Web应用程序可以作为客户端-服务器模型工作，并探讨了用户界面模式。我们还开始构建CRUD页面。
- en: In the next chapter, we will continue with the web application and discuss more
    design patterns for web applications.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将继续讨论Web应用程序，并讨论更多适用于Web应用程序的设计模式。
- en: Questions
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'The following questions will allow you to consolidate the information contained
    in this chapter:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 以下问题将帮助您巩固本章包含的信息：
- en: What is a web application?
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Web应用程序？
- en: Craft a web application of your choice, and depict how it works.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计一个你选择的Web应用程序，并描述它是如何工作的。
- en: What is inversion of control?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制反转是什么？
- en: What are the architectural patterns that we've covered in this chapter? Which
    one do you like and why?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们在本章中介绍了哪些架构模式？你最喜欢哪一个，为什么？
- en: Further reading
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'Congratulations! You''ve completed this chapter. We have covered a lot of things
    related to authentication, authorization, and testing projects. This is not the
    end of your learning; it is just the beginning, and there are more books you can
    refer to increase your understanding. The following books provide an in-depth
    look at RESTful web services and test-driven development:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经完成了这一章。我们涵盖了与身份验证、授权和测试项目相关的大量内容。这并不是你学习的终点；这只是开始，还有更多书籍你可以参考以加深理解。以下书籍深入探讨了RESTful
    Web服务和测试驱动开发：
- en: '*Building RESTful Web services with .NET Core*, by *Gaurav Aroraa*, *Tadit
    Dash*, from *Packt Publishing*, at: [https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*使用.NET Core构建RESTful Web服务*》，作者*Gaurav Aroraa*，*Tadit Dash*，由*Packt Publishing*出版，可在：[https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)找到
- en: '*C# and .NET Core Test Driven Development*, by *Ayobami Adewole*, from *Packt
    Publishing*, at: [https://www.packtpub.com/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/application-development/c-and-net-core-test-driven-development)'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 《*C#和.NET Core测试驱动开发*》，作者*Ayobami Adewole*，由*Packt Publishing*出版，可在：[https://www.packtpub.com/application-development/c-and-net-core-test-driven-development](https://www.packtpub.com/application-development/c-and-net-core-test-driven-development)找到
