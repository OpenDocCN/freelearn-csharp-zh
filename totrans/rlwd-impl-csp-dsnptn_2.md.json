["```cs\n    var l = 1;\n    var O = 0;\n    if (O == l) {\n      O++;\n    } else {\n      l = O * (l + 1);\n    }\n    ```", "```cs\n\"editor.fontFamily\": \"CaskaydiaCove Nerd Font, monospace\",\n\"editor.fontLigatures\": true,\n```", "```cs\nvar lastIndexedValue = 1;\nvar oldValue = 0;\nif(oldValue == lastIndexedValue)\n{\n  oldValue++;\n} \nelse \n{\n lastIndexedValue = oldValue * (lastIndexedValue++);\n}\n```", "```cs\n_viewModel.PhoneDefault = user == null ? \"\" :\n  (string.IsNullOrEmpty(user.PhoneDay) ?\n    (string.IsNullOrEmpty(user.PhoneEvening) ?\n      (string.IsNullOrEmpty(user.Mobile) ? \"\" : \n        user.Mobile) :\n      user.PhoneEvening) :\n     user.PhoneDay);\n```", "```cs\nif(user == null)\n{\n  _viewModel.PhoneDefault = string.Empty;\n}\nif(!string.IsNullOrEmpty(user.PhoneDay))\n{\n  _viewModel.PhoneDefault = user.PhoneDay;\n}\nif(!string.IsNullOrEmpty(user.PhoneEvening))\n{\n  _viewModel.PhoneDefault = user.PhoneEvening;\n}\nif(!string.IsNullOrEmpty(user.Mobile))\n{\n  _viewModel.PhoneDefault = user.Mobile;\n}\n```", "```cs\npublic void doesTooMuch()\n    {\n      StreamReader sr = new StreamReader(\"C:\\\\Sample.txt\");\n      var line = sr.ReadLine();\n```", "```cs\n      while (line != null)\n      {\n        Console.WriteLine(line);\n        var processedLine = line.Trim();\n        processedLine = line.ToUpper();\n        processedLine.Replace(\";\", \"\"); // no sql injection\n```", "```cs\n        var url = \"https://fake-translation-\n            service.com/translate\";\n        var httpRequest = \n            (HttpWebRequest)WebRequest.Create(url);\n        httpRequest.Method = \"POST\";\n        var data = \"{\\\"input\\\":\\\"\" + processedLine + \"\\\"}\";\n        using (var streamWriter = new \n        StreamWriter(httpRequest.GetRequestStream()))\n        {\n          streamWriter.Write(data);\n        }\n```", "```cs\n        var httpResponse = \n            (HttpWebResponse)httpRequest.GetResponse();\n        using (var streamReader = new \n        StreamReader(httpResponse.GetResponseStream()))\n        {\n          var result = streamReader.ReadToEnd();\n          Console.WriteLine(\"Translates to \" + result);\n        }\n\n```", "```cs\n        line = sr.ReadLine();\n      }\n```", "```cs\n      sr.Close();\n    }\n```", "```cs\n  public class Circle\n  {\n    public double Area { get; }\n    public Circle(double radius)\n    {\n      Area = Math.PI * (radius * radius);\n    }\n  }\n```", "```cs\n  public class Square\n  {\n    public double Area { get; }\n    public Square(double lengthOfOneSide)\n    {\n      Area = lengthOfOneSide * lengthOfOneSide;\n    }\n  }\n```", "```cs\npublic class AreaCalculator\n  {\n    private double _area { get; set; }\n    public double Area { get { return _area; } }\n    public void AddShape(Square square)\n    {\n      _area += square.Area;\n    }\n    public void AddShape(Circle circle)\n    {\n      _area += circle.Area;\n    }\n}\n```", "```cs\nvar areaCalculator1 = new AreaCalculator();\nareaCalculator1.AddShape(new Square(5d));\nareaCalculator1.AddShape(new Square(25.3452d));\nareaCalculator1.AddShape(new Circle(2342.093d));\nConsole.WriteLine(\"The total area of the shapes is \" + areaCalculator1.Area);\n```", "```cs\npublic interface IShapeWithArea\n{\n  public double Area { get; }\n}\n```", "```cs\npublic class OCPCircle : IShapeWithArea\n  {\n    public double Area { get; }\n    public OCPCircle(double radius)\n    {\n      Area = Math.PI * (radius * radius);\n    }\n  }\n```", "```cs\npublic class OCPSquare : IShapeWithArea\n  {\n    public double Area { get; }\n    public OCPSquare(double lengthOfSide) { Area = \n        lengthOfSide * lengthOfSide; }\n  }\n```", "```cs\npublic class OCPAreaCalculator\n  {\n    private double _area { get; set; }\n    public double Area { get { return _area; } }\n    public void AddShape(IShapeWithArea shape)\n    {\n      _area += shape.Area;\n    }\n  }\n```", "```cs\npublic class OCPRectangle : IShapeWithArea\n  {\n    public double Area { get; }\n    public OCPRectangle(double width, double height)\n    {\n      Area = width * height;\n    }\n  }\n```", "```cs\npublic class Rectangle\n{\n  public double Width { get; set; }\n  public double Height { get; set; }\n  public double Area { get { return Width * Height; } }\n}\n```", "```cs\npublic class RectangleAreaCalculator\n{\n  public double Area { get; set; }\n  public void AddShape(Rectangle rectangle)\n  {\n    Area += rectangle.Area;\n  }\n}\n```", "```cs\npublic class Rectangle\n  {\n    public virtual double Width { get; set; }\n    public virtual double Height { get; set; }\n    public virtual double Area { get { return Width * Height; } }\n  }\n```", "```cs\npublic class Square : Rectangle\n{\n  private double _lengthOfSide;\n  public override double Width { \n    get { return _lengthOfSide; } \n    set { _lengthOfSide = value; } \n  }\n  public override double Height { \n    get { return _lengthOfSide; } \n    set { _lengthOfSide = value; } \n  }\n  public override double Area { \n    get { return Width * Height; } \n  }\n}\n```", "```cs\npublic class LiskovAreaCalculator\n{\n  public double Area { get; set; }\n  public void AddShape(Rectangle rectangle)\n  {\n    rectangle.Width = 10;\n    rectangle.Height = 20;\n    if (rectangle.Area != 200)\n    {\n      throw new Exception(\"Bad area!\");\n    } \n    else\n    {\n      Area = rectangle.Width * rectangle.Height;\n    }\n  }\n}\n```", "```cs\nvar test1 = new LiskovAreaCalculator();\nvar testRectangle = new Rectangle();\ntestRectangle.Width = 5d;\ntestRectangle.Height = 6d;\ntest1.AddShape(testRectangle);\n// Don't forget the answer won't be 30 on purpose. \n//It prints 200.\n// That's not the problem.\nConsole.WriteLine(\"Area of test rectangle is \" + testRectangle.Area);\n```", "```cs\nvar testSquare = new Square();\ntestSquare.Width = 5d;\ntest1.AddShape(testSquare);\nConsole.WriteLine(\"Area of test square is \" + testRectangle.Area);\n```", "```cs\npublic interface IPollutedShape\n{\n  public double Width { get; set; }\n  public double Height { get; set; }\n  public double Depth { get; set; }\n}\n```", "```cs\npublic class PollutedSquare : IPollutedShape\n{\n  public double Width { get; set; }\n  public double Height { get; set; }\n  public double Depth { get; set; } //this is useless!\n  public double getArea()\n  {\n    return Width * Height;\n  }\n}\n```", "```cs\npublic interface ITwoDeeShape\n{\n  public double Width { get; set; }\n  public double Height { get; set; }\n}\n```", "```cs\npublic class SquareISP : ITwoDeeShape\n{\n  public double Width { get; set; }\n  public double Height { get; set; }\n  public double getArea() { return Width * Height; }\n}\n```", "```cs\npublic interface IThreeDeeShape : ITwoDeeShape\n{\n  public double Depth { get; set; }\n}\n```", "```cs\npublic class CubeISP : IThreeDeeShape\n{\n  public double Width { get; set; }\n  public double Height { get; set; }\n  public double Depth { get; set; }\n  public double getVolume()\n  {\n    return Width * Height * Depth;\n  }\n}\n```", "```cs\npublic class CoupledLamp\n{\n  public bool IsLit { get; set; } = false;\n}\n```", "```cs\npublic class CoupledButton\n{\n  public CoupledLamp Lamp { get; set; }\n  public void ToggleLamp()\n  {\n    if (Lamp.IsLit)\n    {\n      Console.WriteLine(\"The lamp is off\");\n    }\n    else\n    {\n      Console.WriteLine(\"The lamp is on\");\n    }\n    Lamp.IsLit = !Lamp.IsLit;\n  }\n}\n```", "```cs\npublic class ComposedButton\n{\n  private bool _isOn = false;\n  public bool Toggle()\n  {\n    _isOn = !_isOn;\n    return _isOn;\n  }\n}\n```", "```cs\npublic class ComposedLamp\n{\n  private bool _isLit;\n  public ComposedButton Button { get; }\n  public ComposedLamp(ComposedButton button)\n  {\n    Button = button;\n  }\n  public void ToggleLamp()\n  {\n    _isLit = Button.Toggle();\n    if (_isLit)\n    {\n      Console.WriteLine(\"The lamp is on\");\n    }\n    else\n    {\n      Console.WriteLine(\"The lamp is off\");\n    }\n  }\n}\n```", "```cs\npublic interface IToggleServer\n{\n  bool ToggleOnOff();\n}\n```", "```cs\npublic class DIPButton : IToggleServer\n{\n  private bool _enabled = false;\n  public bool Enabled { get { return _enabled; } }  \n  public bool ToggleOnOff() \n  {\n    _enabled = !_enabled;\n    return _enabled;\n  }\n}\n```", "```cs\npublic class DIPLamp\n{\n  public IToggleServer DipoleSwitch { get; set; }\n  public DIPLamp(IToggleServer dipoleSwitch) \n    { DipoleSwitch = dipoleSwitch; }\n  public void ToggleLamp()\n  {\n    if (DipoleSwitch.ToggleOnOff())\n    {\n      Console.WriteLine(\"The lamp is on\");\n    }\n    else\n    {\n      Console.WriteLine(\"The lamp is off\");\n    }\n  }\n}\n```"]