["```cs\nnamespace Codebreaker.GameAPIs.Contracts;\npublic interface IGame\n{\n  Guid Id { get; }\n  string GameType { get; }\n  int NumberCodes { get; }\n  int MaxMoves { get; }\n  DateTime StartTime { get; }\n  // code removed for brevity\n  IDictionary<string, IEnumerable<string>> FieldValues { get; }\n  string[] Codes { get; }\n}\n```", "```cs\npublic partial record class ColorField(string Color)\n{\n  public override string ToString() => Color;\n  public static implicit operator ColorField(string color) => \n    new(color);\n}\n```", "```cs\npublic readonly partial record struct ColorResult(int Correct, \n  int WrongPosition)\n{\n  private const char Separator = ':';\n}\n```", "```cs\ndotnet new classlib --framework net8.0 -o Codebreaker.GameAPIs.Models\n```", "```cs\npublic class Game(\n  Guid id,\n  string gameType,\n  string playerName,\n  DateTime startTime,\n  int numberCodes,\n  int maxMoves) : IGame\n{\n  public Guid Id { get; } = id;\n  public string GameType { get; } = gameType;\n  public string PlayerName { get; } = playerName;\n  public DateTime StartTime { get; } = startTime;\n  // code removed for brevity\n  public ICollection<Move> Moves { get; } = []\n  public override string ToString() =>   \n    $\"{Id}:{GameType} – {StartTime}\";\n}\n```", "```cs\npublic class Move(Guid id, int moveNumber)\n{\n  public Guid Id { get; private set; } = id;\n  public int MoveNumber { get; private set; } = moveNumber;\n  public required string[] GuessPegs { get; init; }\n  public required string[] KeyPegs { get; init; }\n  public override string ToString() => \n    $\"{MoveNumber}. {string. Join(':', GuessPegs)}\";\n}\n```", "```cs\npublic interface IGamesRepository\n{\n  Task AddGameAsync(Game game, \n        CancellationToken cancellationToken = default);\n     Task AddMoveAsync(Game game, Move move, \n       CancellationToken cancellationToken = default);\n     Task<bool> DeleteGameAsync(Guid id, \n       CancellationToken cancellationToken = default);\n     Task<Game?> GetGameAsync(Guid id, \n       CancellationToken cancellationToken = default);\n     Task<IEnumerable<Game>> GetGamesAsync(GamesQuery gamesQuery, \n       CancellationToken cancellationToken = default);\n     Task<Game> UpdateGameAsync(Game game, \n       CancellationToken cancellationToken = default);\n}\n```", "```cs\ndotnet new webapi --use-minimal-apis --framework net8.0 -o Codebreaker.GameAPIs\n```", "```cs\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen();\nvar app = builder.Build();\nif (app.Environment.IsDevelopment())\n{\n  app.UseSwagger();\n  app.UseSwaggerUI();\n}\napp.Run();\n```", "```cs\nnamespace Codebreaker.GameAPIs.Data.InMemory;\npublic class GamesMemoryRepository(ILogger<GamesMemoryRepository> \n   logger) : IGamesRepository\n{\n  private readonly ConcurrentDictionary<Guid, Game> _games = new();\n  private readonly ILogger _logger = logger;\n  public Task AddGameAsync(Game game, \n    CancellationToken cancellationToken = default)\n  {\n    if (!_games.TryAdd(game.Id, game))\n    {\n      _logger.LogWarning(\"id {Id} already exists\", game.Id);\n    }\n    return Task.CompletedTask;\n  }\n  // code removed for brevity\n  public Task AddMoveAsync(Game game, Move move, \n    CancellationToken cancellationToken = default)\n  {\n    _games[game.Id] = game;\n    return Task.CompletedTask;\n  }\n}\n```", "```cs\npublic static class GamesFactory\n{\n  private static readonly string[] s_colors6 =\n    [ Colors.Red, Colors.Green, Colors.Blue, Colors.Yellow, \n    Colors. Purple, Colors.Orange ];\n  // code removed for brevity\n  public static Game CreateGame(string gameType, string playerName)\n  {\n    Game Create6x4Game() =>\n      new(Guid.NewGuid(), gameType, playerName, DateTime.Now, 4, 12)\n      {\n        FieldValues = new Dictionary<string, IEnumerable<string>>()\n        {\n          { FieldCategories.Colors, s_colors6 }\n        },\n        Codes = Random.Shared.GetItems(s_colors6, 4)\n      };\n    // code removed for brevity\n    return gameType switch\n    {\n      GameTypes.Game6x4Mini => Create6x4SimpleGame(),\n      GameTypes.Game6x4 => Create6x4Game(),\n      GameTypes.Game8x5 => Create8x5Game(),\n      GameTypes.Game5x5x4 => Create5x5x4Game(),\n      _ => throw new CodebreakerException(\"\n      Invalid game type\") { Code = CodebreakerExceptionCodes.\n      InvalidGameType }\n    };\n  }\n}\n```", "```cs\npublic enum GameType\n{\n  Game6x4,\n  Game6x4Mini,\n  Game8x5,\n  Game5x5x4\n}\npublic record class CreateGameRequest(GameType GameType, \n  string PlayerName);\npublic record class CreateGameResponse(Guid id, GameType GameType, \n  string PlayerName, int NumberCodes, int MaxMoves)\n{\n  public required IDictionary<string, IEnumerable<string>> \n    FieldValues { get; init; }\n}\n```", "```cs\npublic record class UpdateGameRequest(Guid Id, GameType GameType, string PlayerName, int MoveNumber, bool End = false)\n{\n  public string[]? GuessPegs { get; set; }\n}\npublic record class UpdateGameResponse(\n  Guid Id,\n  GameType GameType,\n  int MoveNumber,\n  bool Ended,\n  bool IsVictory,\n  string[]? Results);\n```", "```cs\npublic class GamesService(IGamesRepository dataRepository) : IGamesService\n{\n  public async Task<Game> StartGameAsync(string gameType, \n    string playerName, CancellationToken cancellationToken = default)\n  {\n    Game game = GamesFactory.CreateGame(gameType, playerName);\n    await dataRepository.AddGameAsync(game, cancellationToken);\n    return game;\n  }\n// code removed for brevity\n```", "```cs\npublic static Move ApplyMove(this Game game, string[] guesses, int moveNumber)\n{\n  static TField[] GetGuesses<TField>(IEnumerable<string> guesses)\n    where TField: IParsable<TField> => guesses\n      .Select(g => TField.Parse(g, default))\n      .ToArray();\n  string[] GetColorGameGuessAnalyzerResult()\n  {\n    ColorGameGuessAnalyzer analyzer = \n      new (game, GetGuesses<ColorField>(guesses), moveNumber);\n    return analyzer.GetResult().ToStringResults();\n  }\n  // code removed for brevity\n  string[] results = game.GameType switch\n  {\n    GameTypes.Game6x4 => GetColorGameGuessAnalyzerResult(),\n    GameTypes.Game8x5 => GetColorGameAnalyzerResult(),\n    // code removed for brevity\n  };\n  Move move = new(Guid.NewGuid(), moveNumber)\n  {\n    GuessPegs = guesses,\n    KeyPegs = results\n  }\n  game.Moves.Add(move);\n  return move;\n}\n```", "```cs\npublic async Task<(Game game, string Result)> SetMoveAsync(\n  Guid id, string[] guesses, int moveNumber, \n    CancellationToken cancellationToken = default)\n{\n  Game? game = await dataRepository.GetGameAsync(id, cancellationToken);\n  CodebreakerException.ThrowIfNull(game);\n  CodebreakerException.ThrowIfEnded(game);\n  Move move = game.ApplyMove(guesses, moveNumber);\n  await dataRepository.AddMoveAsync(game, move, cancellationToken);\n  return (game, move);\n}\n```", "```cs\npublic static partial class ApiModelExtensions\n{\n  public static CreateGameResponse ToCreateGameResponse(\n    this Game game) =>\n    new(game.Id, Enum.Parse<GameType>(game.GameType), game.PlayerName)\n    {\n      FieldValues = game.FieldValues;\n    };\n    // code removed for brevity\n```", "```cs\nbuilder.Services.AddSingleton<IGamesRepository, GamesMemoryRepository>();\nbuilder.Services.AddScoped<IGamesService, GamesService>();\n```", "```cs\napp.MapGameEndpoints();\napp.Run();\n```", "```cs\nnamespace Codebreaker.GameAPIs.Endpoints;\npublic static class GameEndpoints\n{\n  public static void MapGameEndpoints(\n    this IEndpointRouteBuilder routes)\n  {\nvar group = routes.MapGroup(\"/games\");\n    group.MapPost(\"/\", async (\n      CreateGameRequest request,\n      IGamesService gameService,\n      HttpContext context,\n      CancellationToken cancellationToken) =>\n    {\n      Game game;\n      try\n      {\n        game = await gameService.StartGameAsync(request.\n          GameType.ToString(), request.PlayerName, cancellationToken);\n      }\n      catch (CodebreakerException) when (\n        ex.Code == CodebreakerExceptionCodes.InvalidGameType)\n      {\n        GameError error = new(ErrorCodes.InvalidGameType,\n          $\"Game type {request.GameType} does not exist\",\n          context.Request.GetDisplayUrl(),\n          Enum.GetNames<GameType>());\n        return Results.BadRequest(error);\n    }\n    return Results.Created($\"/games/{game.Id}\", \n      game.ToCreateGameResponse());\n  });\n```", "```cs\npublic record class GameError(string Code, string Message, \n  string Target, string[]? Details = default);\npublic class ErrorCodes\n{\n  public const string InvalidGameType = nameof(InvalidGameType);\n  // code removed for brevity\n}\n```", "```cs\ngroup.MapGet(\"/{id:guid}\", async (\n  Guid id,\n  IGamesService gameService,\n  CancellationToken cancellationToken\n) =>\n{\n  Game? game = await gameService.GetGameAsync(id, cancellationToken);\n  if (game is null)\n  {\n    return Results.NotFound();\n  }\n  return Results.Ok(game);\n});\n```", "```cs\ngroup.MapPatch(\"/{id:guid} \", async (\n  Guid id,\n  UpdateGameRequest request,\n  IGamesService gameService,\n  HttpContext context,\n  CancellationToken cancellationToken) =>\n{\n  try\n  {\n    (Game game, string result) = await gameService.SetMoveAsync(\n       id, request.GuessPegs, request.MoveNumber, cancellationToken);\n    return Results.Ok(game.AsUpdateGameResponse(result));\n  }\n  catch (CodebreakerException ex) when (\n    ex.Code == CodebreakerExceptionCodes.GameNotFound)\n  {\n    return Results.NotFound();\n  }\n  // code removed for brevity\n});\n```", "```cs\n[JsonConverter(typeof(JsonStringEnumConverter<GameType>))]\npublic enum GameType\n{\n    Game6x4,\n    Game6x4Mini,\n    Game8x5,\n    Game5x5x4\n}\n```", "```cs\npublic class ValidatePlayernameEndpointFilter : IEndpointFilter\n{\n  public async ValueTask<object?> \n    InvokeAsync(EndpointFilterInvocationContext context, \n    EndpointFilterDelegate next)\n  {\n    CreateGameRequest request = \n      context.GetArgument<CreateGameRequest>(0);\n    if (request.PlayerName.Length < 4)\n    {\n       return Results.BadRequest(\"\n         Player name must be at least 4 characters long\");\n    }\n    return await next(context);\n  }\n}\n```", "```cs\npublic class CreateGameExceptionEndpointFilter : IEndpointFilter\n{\n  private readonly ILogger _logger;\n  public CreateGameExceptionEndpointFilter\n    (ILogger<CreateGameExceptionEndpointFilter> logger)\n  {\n    _logger = logger;\n  }\n  public async ValueTask<object?> \n    InvokeAsync(EndpointFilterInvocationContext context, \n    EndpointFilterDelegate next)\n  {\n    CreateGameRequest request = \n      context.GetArgument<CreateGameRequest>(1);\n    try\n    {\n      return await next(context);\n    }\n    catch (CodebreakerException ex) when (\n      ex.Code == CodebreakerExceptionCodes.InvalidGameType)\n    {\n_logger.LogWarning(\"game type {gametype} not found\", \n        request.GameType);\n      return Results.BadRequest(\"Gametype does not exist\");\n    }\n  }\n}\n```", "```cs\ngroup.MapPost(\"/\", async (\n  CreateGameRequest request,\n  IGamesService gameService,\n  CancellationToken cancellationToken) =>\n{\n  Game game = await gameService.StartGameAsync(request.\n    GameType.ToString(), request.PlayerName, cancellationToken);\n  return Results.Created($\"/games/{game.Id}\", \n    game.ToCreateGameResponse());\n        }).AddEndpointFilter<ValidatePlayernameEndpointFilter>()\n          .AddEndpointFilter<CreateGameExceptionEndpointFilter>();\n```", "```cs\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.AddSwaggerGen(options =>\n{\n  options.SwaggerDoc(\"v3\", new OpenApiInfo\n  {\n    Version = \"v3\",\n    Title = \"Codebreaker Games API\",\n    Description = \n      \"An ASP.NET Core minimal APIs to play Codebreaker games\",\n    TermsOfService = new Uri(\"https://www.cninnovation.com/terms\"),\n    Contact = new OpenApiContact\n    {\n      Name = \"Christian Nagel\",\n      Url = new Uri(\"https://csharp.christiannagel.com\")\n    },\n    License = new OpenApiLicense\n    {\n      Name=\"API usage license\",\n      Url= new Uri(\"https://www.cninnovation.com/apiusage\")\n    }\n  });\n});\n```", "```cs\napp.UseSwagger();\napp.UseSwaggerUI(options =>\n{\n  options.SwaggerEndpoint(\"/swagger/v3/swagger.json\", \"v3\");\n});\n```", "```cs\npublic static void MapGameEndpoints(this IEndpointRouteBuilder routes)\n{\n  var group = routes.MapGroup(\"/games\")\n    .WithTags(\"Games API\");\n```", "```cs\ngroup.MapPost(\"/\", async Task<Results<Created<CreateGameResponse>, BadRequest<GameError>>> (\n// code removed for brevity\n})\n.WithName(\"CreateGame\")\n.WithSummary(\"Creates and starts a game\")\n.WithOpenApi(op =>\n{\n  op.RequestBody.Description = \"\n     The game type and the player name of the game to create\";\n  return op;\n});\n```", "```cs\ngroup.MapDelete(\"/{id:guid}\", async (\n  Guid id,\n  IGamesService gameService,\n  CancellationToken cancellationToken\n) =>\n{\n  await gameService.DeleteGameAsync(id, cancellationToken);\nreturn TypedResults.NoContent();\n})\n// code removed for brevity\n```", "```cs\ngroup.MapPatch(\"/{id:guid}/moves\", async Task<Results<Ok<UpdateGameResponse>, NotFound, BadRequest<GameError>>> (\n  Guid id,\n  UpdateGameRequest request,\n  IGamesService gameService,\n  HttpContext context,\n  CancellationToken cancellationToken) =>\n{\n  try\n  {\n    (Game game, string result) = await gameService.SetMoveAsync(id, \n     request.GuessPegs, request.MoveNumber, cancellationToken);\n    return TypedResults.Ok(game.AsUpdateGameResponse(result));\n  }\n  catch (ArgumentException ex) when (ex.HResult >= 4200 && \n    ex.HResult <= 4500)\n  {\n    string url = context.Request.GetDisplayUrl();\n    return ex.HResult switch\n    {\n      4200 => TypedResults.BadRequest(new GameError(\n        ErrorCodes.InvalidGuessNumber, \"Invalid number of guesses \n        received\", url)),\n      4300 => TypedResults.BadRequest(new GameError(\n        ErrorCodes.InvalidMoveNumber, \"Invalid move number received\", \n        url)),\n  // code removed for brevity\n    };\n  }\n  catch (GameNotFoundException)\n  {\n    return TypedResults.NotFound();\n  }\n})\n// code removed for brevity\n```", "```cs\n@HostAddress = http://localhost:9400\n@ContentType = application/json\n### Create a game\nPOST {{HostAddress}}/games/\nContent-Type: {{ContentType}}\n{\n  \"gameType\": \"Game6x4\",\n  \"playerName\": \"test\"\n}\n```", "```cs\n### Set a move\n@id = 1eae1e79-a7fb-41a6-9be8-39f83537b7f3\nPATCH {{HostAddress}}/games/{{id}}/moves\nContent-Type: {{ContentType}}\n{\n  \"gameType\": \"Game6x4\",\n  \"playerName\": \"test\",\n  \"moveNumber\": 1,\n  \"guessPegs\": [\n    \"Red\",\n    \"Green\",\n    \"Blue\",\n    \"Yellow\"\n  ]\n}\n```", "```cs\n### Get game information\nGET {{HostAddress}}/games/{{id}}\n```", "```cs\nvar builder = DistributedApplication.CreateBuilder(args);\nbuilder.AddProject<Projects.Codebreaker_GameAPIs>(\"gameapis\");\nbuilder.Build().Run();\n```", "```cs\npublic static IHostApplicationBuilder AddServiceDefaults(this IHostApplicationBuilder builder)\n{\n  builder.ConfigureOpenTelemetry();\n  builder.AddDefaultHealthChecks();\n  builder.Services.AddServiceDiscovery();\n  builder.Services.ConfigureHttpClientDefaults(http =>\n  {\n    http.AddStandardResilienceHandler();\n    http.AddServiceDiscovery();\n  });\n  return builder;\n}\n```", "```cs\npublic static WebApplication MapDefaultEndpoints(this WebApplication app)\n{\n  app.MapHealthChecks(\"/health\");\n  app.MapHealthChecks(\"/alive\", new HealthCheckOptions\n  {\n    Predicate = r => r.Tags.Contains(\"live\")\n  });\n  return app;\n}\n```"]