["```cs\nvar key = Registry.LocalMachine.CreateSubKey(@\"Software\\SystemsProgrammers\\Usage\");\nvar retrievedKey = key.GetValue(\"FirstAccess\");\nif (retrievedKey == null)\n{\n    // create the value\n    key.SetValue(\n        name: \"FirstAccess\",\n        value: DateTime.UtcNow.ToBinary(),\n        valueKind: RegistryValueKind.QWord);\n    \"First access recorded now\".Dump(ConsoleColor.Cyan);\n}\nelse\n{\n    if (retrievedKey is long firstAccessAsString)\n    {\n        var retrievedFirstAccess =\n            DateTime.FromBinary(firstAccessAsString);\n        $\"Retrieved first access:\n              {retrievedFirstAccess}\".Dump(ConsoleColor.Cyan);\n    }\n}\n```", "```cs\nvar currentUser = Environment.UserName;\nvar security = new RegistrySecurity();\nvar rule= new RegistryAccessRule(\n          currentUser,\n          RegistryRights.FullControl,\n          InheritanceFlags.None,\n          PropagationFlags.None,\n          AccessControlType.Allow);\nsecurity.AddAccessRule(rule);\nkey.SetAccessControl(security);\n```", "```cs\nvar builder = Host.CreateApplicationBuilder(args);\nbuilder.Services.AddHostedService<Worker>();\nvar host = builder.Build();\nhost.Run();\n```", "```cs\npublic class Worker : BackgroundService\n{\n    private readonly ILogger<Worker> _logger;\n    public Worker(ILogger<Worker> logger)\n    {\n        _logger = logger;\n    }\n    protected override async Task ExecuteAsync(CancellationToken       stoppingToken)\n    {\n        while (!stoppingToken.IsCancellationRequested)\n        {\n            if (_logger.IsEnabled(LogLevel.Information))\n            {\n                _logger.LogInformation(\"Worker running at: {time}\",                   DateTimeOffset.Now);\n            }\n            await Task.Delay(1000, stoppingToken);\n        }\n    }\n}\n```", "```cs\nprotected override async Task ExecuteAsync(CancellationToken stoppingToken)\n{\n    while (!stoppingToken.IsCancellationRequested)\n    {\n        if (_logger.IsEnabled(LogLevel.Information))\n        {\n            _logger.LogInformation(\"Worker running at: {time}\",               DateTimeOffset.Now);\n        }\n        await Task.Delay(1000, stoppingToken);\n        if (_counter++ >= 9)\n        {\n            break;\n        }\n    }\n    _logger.LogInformation(\"Worker stopped at: {time}\",       DateTimeOffset.Now);\n}\n```", "```cs\nprivate readonly IHostApplicationLifetime _hostApplicationLifetime;\npublic Worker(\n    ILogger<Worker> logger,\n    IHostApplicationLifetime hostApplicationLifetime)\n{\n    _logger = logger;\n    _hostApplicationLifetime = hostApplicationLifetime;\n}\n```", "```cs\n_hostApplicationLifetime.StopApplication();\n```", "```cs\n#pragma warning disable CA1416\n```", "```cs\npublic void ReadTemperaturesUsingMsAcpi()\n{\n    var scope = \"root\\\\WMI\";\n    var query = \"SELECT * FROM MSAcpi_ThermalZoneTemperature\";\n    var searcher = new ManagementObjectSearcher(scope, query);\n    try\n    {\n        foreach (var o in searcher.Get())\n        {\n            var obj = (ManagementObject)o;\n            var temperature = Convert.              ToDouble(obj[\"CurrentTemperature\"]) / 10 - 273.15;\n            $\"CPU Temperature: {temperature}°C\".Dump();\n        }\n    }\n    catch (ManagementException)\n    {\n        \"Unfortunately, your BIOS does not support this             API.\".Dump(ConsoleColor.Red);\n    }\n}\n```", "```cs\npublic void ReadBIOSDetails()\n{\n    // Create a management scope object\n    ManagementScope scope = new ManagementScope(\"\\\\\\\\.\\\\ROOT\\\\cimv2\");\n    scope.Connect();\n    // Query object for BIOS information\n    ObjectQuery query = new ObjectQuery(\"SELECT * FROM Win32_BIOS\");\n    using ManagementObjectSearcher searcher = new       ManagementObjectSearcher(scope, query);\n    foreach (var o in searcher.Get())\n    {\n        var queryObj = (ManagementObject)o;\n        \"----------------------------------\n            \".Dump(ConsoleColor.Yellow);\n        \"BIOS Information\".Dump(ConsoleColor.Yellow);\n        \"----------------------------------\n            \".Dump(ConsoleColor.Yellow);\n        $\"Manufacturer:\n            {queryObj[\"Manufacturer\"]}\".Dump(ConsoleColor.Yellow);\n        $\"Name:\n            {queryObj[\"Name\"]}\".Dump(ConsoleColor.Yellow);\n        $\"Version:\n            {queryObj[\"Version\"]}\".Dump(ConsoleColor.Yellow);\n    }\n}\n```", "```cs\npublic void ControlService()\n{\n    // Define the service. In this case,\n    // we're using the Windows Update service\n    string serviceName = \"wuauserv\";\n    // Define the query to get the service\n    string queryString = $\"SELECT * FROM Win32_Service WHERE Name =     '{serviceName}'\";\n    // Create a query to get the specified service\n    ManagementObjectSearcher searcher =\n        new ManagementObjectSearcher(queryString);\n    // Execute the query\n    foreach (var o in searcher.Get())\n    {\n        var service = (ManagementObject)o;\n        // Check the service state before trying to stop it\n        if (service[\"State\"].ToString().ToLower() == \"running\")\n        {\n            // Stop the service\n            service.InvokeMethod(\"StopService\", null);\n            // Wait a bit for the service to stop\n           System.Threading.Thread.Sleep(2000);\n            // Start the service again\n            service.InvokeMethod(\"StartService\", null);\n            $\"{serviceName} service restarted                  successfully.\".Dump(ConsoleColor.Cyan);\n        }\n    }\n}\n```", "```cs\npublic void StartListening()\n{\n    string wmiQuery = \"SELECT * FROM __InstanceDeletionEvent WITHIN 2 \" +\n      \"WHERE TargetInstance ISA'Win32_USBHub'\";\n    ManagementEventWatcher watcher = new       ManagementEventWatcher(wmiQuery);\n    watcher.EventArrived += new EventArrivedEventHandler(USBRemoved);\n    // Start listening for events\n    watcher.Start();\n    \"Unplug a USB device to see the event.\\nPress ENTER to        exit.\".Dump(ConsoleColor.Cyan);\n    Console.ReadLine();\n    // Stop listening for events\n    watcher.Stop();\n}\n```", "```cs\nprivate void USBRemoved(object sender, EventArrivedEventArgs e)\n{\n    // Get the instance of the removed device\n    ManagementBaseObject instance = (ManagementBaseObject)        e.NewEvent[\"TargetInstance\"];\n    // Extract some properties\n    string deviceID = (string)instance[\"DeviceID\"];\n    string pnpDeviceID = (string)instance[\"PNPDeviceID\"];\n    string description = (string)instance[\"Description\"];\n    var message =\n        $\"USB device removed:\" +\n        $\"\\n\\t\\tDeviceID={deviceID}\" +\n        $\"\\n\\t\\tPNPDeviceID={pnpDeviceID}\" +\n        $\"\\n\\t\\tDescription={description}\";\n    message.Dump(ConsoleColor.Yellow);\n}\n```"]