- en: Live Unit Testing in Visual Studio Enterprise
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Visual Studio Enterprise 中的实时单元测试
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Running **live unit tests** (**LUT**) in Visual Studio for unit test projects
    based on NUnit, XUnit, and MSTest frameworks
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中运行基于 NUnit、XUnit 和 MSTest 框架的单元测试项目的实时单元测试（**LUT**）
- en: Viewing and navigating live unit test results
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看和导航实时单元测试结果
- en: Understanding incremental live unit test execution with code changes
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解代码更改的增量实时单元测试执行
- en: Understanding start/stop/pause/continue/restart functionalities for fine grained
    control of LUT
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 LUT 的启动/停止/暂停/继续/重启功能，以实现细粒度控制
- en: Including and excluding subsets of tests for live execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括和排除实时执行测试的子集
- en: Configuring different options for live unit testing using the Tools | Options
    dialog
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用“工具 | 选项”对话框配置实时单元测试的不同选项
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter enables developers to use the new Roslyn-based feature in the Visual
    Studio 2017 Enterprise edition that enables smart live unit test execution in
    the background. The following snippet and screenshot from this ([https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/](https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/))
    Visual Studio blog post on LUT gives a nice gist about this feature.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使开发者能够使用 Visual Studio 2017 Enterprise 版本中基于 Roslyn 的新功能，在后台实现智能实时单元测试执行。以下是从该
    ([https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/](https://blogs.msdn.microsoft.com/visualstudio/2016/11/18/live-unit-testing-visual-studio-2017-rc/))
    Visual Studio 博客文章中摘录的片段和截图，关于 LUT 的功能有很好的概述。
- en: Live unit testing automatically runs the impacted unit tests in the background
    as you edit code and visualizes the results and code coverage live, in the editor,
    in real time. In addition to giving feedback on the impact that your changes had
    on the existing tests, you also get immediate feedback on whether the new code
    you added is already covered by one or more existing tests. This will gently remind
    you to write unit tests as you are making bug fixes or adding features. You will
    be on your way to the promised land, where there is no test debt in your code
    base!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实时单元测试在您编辑代码时自动在后台运行受影响的单元测试，并实时可视化结果和代码覆盖率，在编辑器中实时显示。除了对您更改对现有测试的影响提供反馈外，您还可以立即获得关于您添加的新代码是否已被一个或多个现有测试覆盖的反馈。这将温和地提醒您在修复错误或添加功能时编写单元测试。您将朝着没有代码库测试债务的应许之地迈进！
- en: '![](img/204ce7ba-0850-4cf9-8e63-5d83bd3b7468.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/204ce7ba-0850-4cf9-8e63-5d83bd3b7468.png)'
- en: 'As mentioned in the post, there are three potential states for any given line:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如文章中所述，任何给定行的三种潜在状态如下：
- en: A line of executable code that is covered by at least one failing test is decorated
    with a red cross (![](img/f9a44d62-69b8-4e18-b971-bf0d093d04bd.png))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少被一个失败的测试覆盖的可执行代码行用红色十字标记装饰 (![](img/f9a44d62-69b8-4e18-b971-bf0d093d04bd.png))
- en: A line of executable code that is covered by only passing tests is decorated
    with a green tick (![](img/2a269d1c-166f-460e-8c21-5837e358122f.png))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只被通过测试覆盖的可执行代码行用绿色勾号装饰 (![](img/2a269d1c-166f-460e-8c21-5837e358122f.png))
- en: A line of executable code that is not covered by any test is decorated it with
    a blue dash (![](img/c7fb20c1-dafb-42dc-a6c5-0c8f61b2ba32.png))
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有任何测试覆盖的可执行代码行用蓝色破折号装饰 (![](img/c7fb20c1-dafb-42dc-a6c5-0c8f61b2ba32.png))
- en: LUT uses the Roslyn APIs to analyze snapshots to your product and test code
    and determines the set of unit tests that need to be run for your projects. Additionally,
    it also uses the Roslyn APIs to analyze incremental updates to your code to smartly
    determine subset of unit tests that need to be re-run from your prior test runs.
    These are the same set of analysis APIs that are used by the Visual Studio IDE
    diagnostic engine to incrementally update the intellisense/live diagnostics in
    the error list and squiggles in the editor.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: LUT 使用 Roslyn API 分析您的产品和测试代码的快照，并确定需要运行的项目单元测试集合。此外，它还使用 Roslyn API 分析代码的增量更新，以智能地确定需要重新运行先前测试运行中的单元测试子集。这些分析
    API 与 Visual Studio IDE 诊断引擎使用的相同，用于增量更新错误列表中的智能感知/实时诊断和编辑器中的波浪线。
- en: Once the set of unit tests to execute have been determined, it schedules them
    for execution in the background, and as and when the tests complete, it automatically
    shows their pass/fail/exclusion status with the glyphs on test methods. Users
    can start/stop/pause/resume live test execution at any given time. Additionally,
    they can exclude/include a subset of tests/files projects for LUT execution. They
    can also pause/restart/stop LUT anytime and configure different options for LUT,
    such as automatic pause on low battery, test execution timeout, and so on.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦确定了要执行的单元测试集，它将在后台安排它们的执行，并在测试完成时，自动显示它们的通过/失败/排除状态，并在测试方法上显示相应的符号。用户可以在任何给定时间开始/停止/暂停/恢复实时测试执行。此外，他们还可以为
    LUT 排除/包含测试/文件/项目子集。他们还可以随时暂停/重启/停止 LUT，并为 LUT 配置不同的选项，例如在低电量时自动暂停、测试执行超时等。
- en: Running live unit tests in Visual Studio for unit test projects based on NUnit,
    XUnit, and MSTest frameworks
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中运行基于 NUnit、XUnit 和 MSTest 框架的单元测试项目。
- en: 'In this section, we will walk you through the steps to enable LUT for your
    unit test projects, viewing and understanding the live results from the test execution.
    In VS2017, live unit testing is supported for unit test projects, based on the
    following unit test frameworks:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您介绍如何为您的单元测试项目启用 LUT，查看和理解测试执行中的实时结果。在 VS2017 中，实时单元测试支持以下单元测试项目的测试项目：
- en: '**NUnit**: Documentation at [https://www.nunit.org/](https://www.nunit.org/)'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NUnit**：文档位于 [https://www.nunit.org/](https://www.nunit.org/)'
- en: '**XUnit**: Documentation at [https://xunit.github.io/](https://xunit.github.io/)'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XUnit**：文档位于 [https://xunit.github.io/](https://xunit.github.io/)'
- en: '**MSTest**: Documentation at ([https://en.wikipedia.org/wiki/MSTest](https://en.wikipedia.org/wiki/MSTest))
    and ([https://msdn.microsoft.com/en-us/library/ms182489.aspx](https://msdn.microsoft.com/en-us/library/ms182489.aspx))'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MSTest**：文档位于 ([https://en.wikipedia.org/wiki/MSTest](https://en.wikipedia.org/wiki/MSTest))
    和 ([https://msdn.microsoft.com/en-us/library/ms182489.aspx](https://msdn.microsoft.com/en-us/library/ms182489.aspx))'
- en: We will cover LUT for unit test projects, based on each of the preceding test
    frameworks.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍基于前面提到的每个测试框架的单元测试项目中的 LUT（Live Unit Testing）。
- en: Getting started
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 企业版才能执行此配方。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
    安装授权的企业版。
- en: How to do it
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作
- en: 'Open Visual Studio and create a new C# class library project, say `ClassLibrary`,
    with the following source code:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并创建一个新的 C# 类库项目，例如 `ClassLibrary`，以下为相应的源代码：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[NUnit] Add a C# unit test project, say `NUnitBasedTestProject`, to the solution
    and add a reference to `ClassLibrary` to this project.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[NUnit] 将一个 C# 单元测试项目，例如 `NUnitBasedTestProject`，添加到解决方案中，并将 `ClassLibrary`
    的引用添加到该项目中。'
- en: 'Open NuGet Package Manager for the project and uninstall the existing NuGet
    package references in `MSTest.TestAdapter` and `MSTest.TestFramework`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目的 NuGet 包管理器并卸载现有的 NuGet 包引用 `MSTest.TestAdapter` 和 `MSTest.TestFramework`：
- en: '![](img/46ea5831-af6a-401f-97db-0aae0e8ecb38.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46ea5831-af6a-401f-97db-0aae0e8ecb38.png)'
- en: Add NuGet package references to the latest stable versions of NUnit and NUnit3TestAdapter
    to the project.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 NUnit 和 NUnit3TestAdapter 的最新稳定版本添加到项目中。
- en: 'Replace the source code in file `UnitTest1.cs` with the following code:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件 `UnitTest1.cs` 中的源代码替换为以下代码：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Start live unit testing for the project by executing the Test | Live Unit Testing
    | Start command.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 Test | Live Unit Testing | Start 命令开始对项目进行实时单元测试。
- en: 'Wait for a few seconds and note that the added unit tests execute in the background,
    and that `TestMethod1` passes and `TestMethod2` fails as expected and the corresponding
    green and red glyphs show up in the editor. Also, verify that the Output window
    switches to Live Unit Testing view and shows the test execution log with execution
    time stamps:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，并注意添加的单元测试在后台执行，`TestMethod1` 按预期通过，`TestMethod2` 失败，相应的绿色和红色符号在编辑器中显示。同时，验证输出窗口切换到实时单元测试视图，并显示带有执行时间戳的测试执行日志：
- en: '![](img/4b699501-9926-4efe-9907-57b1f6803eb0.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b699501-9926-4efe-9907-57b1f6803eb0.png)'
- en: '[XUnit] Add a C# unit test project, say `XUnitBasedTestProject`, to the solution
    and add a reference to `ClassLibrary` to this project.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[XUnit] 将 C# 单元测试项目，例如 `XUnitBasedTestProject`，添加到解决方案中，并将 `ClassLibrary` 的引用添加到该项目中。'
- en: Open NuGet Package Manager for the project and uninstall the existing NuGet
    package references to `MSTest.TestAdapter` and `MSTest.TestFramework`.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目的 NuGet 包管理器，并卸载现有的 NuGet 包引用 `MSTest.TestAdapter` 和 `MSTest.TestFramework`。
- en: Add the NuGet package references to the latest stable versions of XUnit and
    `xunit.runner.visualstudio` (later than *2.2.0*).
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 NuGet 包引用添加到 XUnit 和 `xunit.runner.visualstudio` 的最新稳定版本（晚于 *2.2.0*）。
- en: 'Replace the source code in the `UnitTest1.cs` file with the following source
    code:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UnitTest1.cs` 文件中的源代码替换为以下源代码：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Wait for a few seconds and note that unit tests execute in the background and
    `TestMethod1` passes and `TestMethod2` fails. Verify that the green and red glyphs
    shows up in the editor for these tests, respectively.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，并注意单元测试在后台执行，`TestMethod1` 通过而 `TestMethod2` 失败。验证这些测试在编辑器中分别显示绿色和红色图标。
- en: '[MSTest] Add a C# unit test project, say `MSTestBasedTestProject`, to the solution
    and add a reference to `ClassLibrary` to this project.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[MSTest] 将 C# 单元测试项目，例如 `MSTestBasedTestProject`，添加到解决方案中，并将 `ClassLibrary`
    的引用添加到该项目中。'
- en: Open the NuGet Package Manager for the project and update the existing NuGet
    package references for `MSTest.TestAdapter` and `MSTest.TestFramework` to latest
    stable version (later than <q>1.1.17</q>)
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目的 NuGet 包管理器，并将现有的 NuGet 包引用 `MSTest.TestAdapter` 和 `MSTest.TestFramework`
    更新到最新稳定版本（晚于 <q>1.1.17</q>）。
- en: 'Replace the source code in file `UnitTest1.cs` with the following source code:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件 `UnitTest1.cs` 中的源代码替换为以下源代码：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Wait for a few seconds and note that unit tests execute in the background and
    `TestMethod1` passes and `TestMethod2` fails. Verify that the green and red glyphs
    shows up in the editor for these tests, respectively.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，并注意单元测试在后台执行，`TestMethod1` 通过而 `TestMethod2` 失败。验证这些测试在编辑器中分别显示绿色和红色图标。
- en: 'Open `Class1.cs` in the project `ClassLibrary` and verify that the test coverage
    and pass/fail details are shown for each method in the editor:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ClassLibrary` 项目中打开 `Class1.cs` 文件，并在编辑器中验证每个方法的测试覆盖率以及通过/失败详情。
- en: '![](img/54b46b51-f51b-4b05-8aee-c2861854f034.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54b46b51-f51b-4b05-8aee-c2861854f034.png)'
- en: Viewing and navigating live unit test results
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看和导航实时单元测试结果
- en: In this section, we will show you how to view and navigate the results from
    live test execution using the Test Explorer and the tool tip in the Visual Studio
    editor.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何使用测试资源管理器和 Visual Studio 编辑器中的工具提示查看和导航实时测试执行的结果。
- en: Getting started
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 企业版才能执行此操作。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
    安装授权的企业版。
- en: How to do it...
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open Visual Studio and create a new C# class library project, say `ClassLibrary`*.*
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 并创建一个新的 C# 类库项目，例如 `ClassLibrary`。
- en: Replace the existing code in the source file `Class1.cs` with the code in attached
    sample `ClassLibrary\Class1.cs`.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将源文件 `Class1.cs` 中的现有代码替换为附带的示例 `ClassLibrary\Class1.cs` 中的代码。
- en: Add a C# unit test project, say `UnitTestProject`*,* to the solution and add
    a reference to `ClassLibrary` to this project.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 C# 单元测试项目，例如 `UnitTestProject`，添加到解决方案中，并将 `ClassLibrary` 的引用添加到该项目中。
- en: Open the NuGet Package Manager for the project and update the existing NuGet
    package references for `MSTest.TestAdapter` and `MSTest.TestFramework` to latest
    stable version (later than <q>1.1.17</q>)
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开项目的 NuGet 包管理器，并将现有的 NuGet 包引用 `MSTest.TestAdapter` 和 `MSTest.TestFramework`
    更新到最新稳定版本（晚于 <q>1.1.17</q>）。
- en: Replace the source code in the `UnitTest1.cs` file with the code in the attached
    sample `UnitTestProject\UnitTest1.cs`.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UnitTest1.cs` 文件中的源代码替换为附带的示例 `UnitTestProject\UnitTest1.cs` 中的代码。
- en: Open the Test Explorer window by clicking on Test | Window | Test Explorer.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 Test | Window | Test Explorer 打开测试资源管理器窗口。
- en: Start live unit testing for the project by executing Test | Live Unit Testing
    | Start command.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过执行 Test | Live Unit Testing | Start 命令来为项目启动实时单元测试。
- en: Wait for a few seconds and note that the added unit tests execute on the background
    and `TestMethod1` passes and `TestMethod2` fails as expected.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，并注意添加的单元测试在后台执行，`TestMethod1` 按预期通过，而 `TestMethod2` 失败。
- en: 'Verify that the results are shown in the Test Explorer and there are corresponding
    green and red glyphs in the editor:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确认测试结果在测试资源管理器中显示，并且在编辑器中有相应的绿色和红色图标：
- en: '![](img/4340f991-6fee-4d57-80d8-ce29d7c99c4a.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4340f991-6fee-4d57-80d8-ce29d7c99c4a.png)'
- en: Open source file `Class1.cs` in `ClassLibrary` and click on the test indicator
    on top of `Method1`, which reads `1/1 passing`. Verify that a tool bar pops up
    with the name and status of the test, `TestMethod1`.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ClassLibrary` 中打开源文件 `Class1.cs` 并点击 `Method1` 顶部的测试指示器，其显示为 `1/1 passing`。验证是否弹出一个包含测试名称和状态的工具栏，`TestMethod1`。
- en: '![](img/2c312c28-0c56-45c0-8c6a-187f2e9ddc24.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2c312c28-0c56-45c0-8c6a-187f2e9ddc24.png)'
- en: Double-click on the method name `TestMethod1` in the tool bar and make sure
    to navigate to the definition of this method in `UnitTest1.cs`.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击工具栏中的方法名称 `TestMethod1` 并确保导航到 `UnitTest1.cs` 中此方法的定义。
- en: 'Switch back to `Class1.cs` and hover near the green tick (![](img/8381cf4a-2013-44c9-94b4-97b4dd85b194.png))
    near `Method1` to view that the method is Covered by 1 test.:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回 `Class1.cs` 并在 `Method1` 附近的绿色勾号 (![](img/8381cf4a-2013-44c9-94b4-97b4dd85b194.png))
    附近悬停，查看该方法被 1 个测试覆盖：
- en: '![](img/9a3298a1-a2ce-47c2-a12e-5f67372acb78.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9a3298a1-a2ce-47c2-a12e-5f67372acb78.png)'
- en: Click on the tick (![](img/8381cf4a-2013-44c9-94b4-97b4dd85b194.png)) to bring
    up another toolbar with the method name and verify that double-clicking on it
    takes you to the test method definition.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击勾号 (![](img/8381cf4a-2013-44c9-94b4-97b4dd85b194.png)) 以弹出另一个包含方法名称的工具栏，并验证双击它是否可以带您到测试方法定义。
- en: Understanding incremental live unit test execution with code changes
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解代码更改的增量实时单元测试执行
- en: In this section, we will show you how live unit tests run incrementally on making
    changes to test and product code on a solution configured to run live unit tests.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何实时单元测试在配置为运行实时单元测试的解决方案中对测试和产品代码进行更改时增量运行。
- en: Getting started
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15.](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 企业版才能执行此配方。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15.](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
    安装授权的企业版。
- en: Additionally, clone the solution `ClassLibrary.sln` attached from the previous
    recipe in this chapter, *Viewing and navigating live unit test results*. Alternatively,
    you can manually execute the steps in that recipe before executing this recipe.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，克隆本章中“查看和导航实时单元测试结果”配方中附加的解决方案 `ClassLibrary.sln`，或者您可以在执行此配方之前手动执行该配方中的步骤。
- en: How to do it...
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open the `ClassLibrary.sln` solution with two projects: `ClassLibrary` and
    `UnitTestProject` and start live unit testing by navigating to Test | Live Unit
    Testing | Start.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用两个项目：`ClassLibrary` 和 `UnitTestProject` 打开 `ClassLibrary.sln` 解决方案，并通过导航到测试
    | 实时单元测试 | 开始来启动实时单元测试。
- en: 'Add a new source file `Class2.cs` with the following code to the `ClassLibrary`
    project:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含以下代码的新源文件 `Class2.cs` 添加到 `ClassLibrary` 项目中：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open the Output window, switch the Show output from: combo box to Live Unit
    Testing, and clear all the contents in the window by pressing the highlighed button:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开输出窗口，将“显示输出从：”组合框切换到实时单元测试，并通过按高亮按钮清除窗口中的所有内容：
- en: '![](img/64291a34-9828-441b-9c2f-4baa3fa99a26.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/64291a34-9828-441b-9c2f-4baa3fa99a26.png)'
- en: 'Add a new source file `UnitTest2.cs` with the following code to the `UnitTestProject`
    project:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将包含以下代码的新源文件 `UnitTest2.cs` 添加到 `UnitTestProject` 项目中：
- en: '[PRE5]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Wait for a few seconds and note that the added unit tests execute on the background
    and `TestMethod5` passes and `TestMethod6` fails as expected.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，并注意添加的单元测试在后台执行，`TestMethod5` 按预期通过，而 `TestMethod6` 失败。
- en: 'Also, note that the text in the Output window states that only two unit tests
    were executed (newly added ones `TestMethod5` and `TestMethod6`). Additionally,
    the Test Explorer shows the old tests `TestMethod1` and `TestMethod2` as grayed
    out, because these tests did not execute when we added new test code:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，请注意输出窗口中的文本表示只执行了两个单元测试（新添加的 `TestMethod5` 和 `TestMethod6`）。此外，测试资源管理器显示旧测试
    `TestMethod1` 和 `TestMethod2` 为灰色，因为这些测试在我们添加新的测试代码时没有执行：
- en: '![](img/e49b1dcf-419d-4cf8-b177-2f42fb97c21e.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e49b1dcf-419d-4cf8-b177-2f42fb97c21e.png)'
- en: Switch back to the `Class1.cs` file in `ClassLibrary` project and edit `Method1`
    to return `true`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换回 `ClassLibrary` 项目中的 `Class1.cs` 文件并编辑 `Method1` 以返回 `true`。
- en: Wait a few seconds for the tests to execute in the background and see that `TestMethod1`
    now shows as passed.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，让测试在后台执行，并查看 `TestMethod1` 现在显示为通过。
- en: 'Note that `TestMethod5` and `TestMxethod6` are now grayed out in the Test Explorer,
    indicating that they did not execute with the last code change:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，在测试资源管理器中，`TestMethod5` 和 `TestMxethod6` 现在已变为灰色，表示它们在上次代码更改后没有执行：
- en: '![](img/53b7902e-d6bf-4427-b519-dc8216714c87.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/53b7902e-d6bf-4427-b519-dc8216714c87.png)'
- en: How it works
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理
- en: In this recipe, we showed you how the live unit test execution is designed to
    analyze incremental product and test changes and execute only the subset of tests
    in the unit test projects, which could be semantically affected by those changes.
    As mentioned in the introduction section of this chapter, LUT uses the Roslyn
    APIs to analyze these incremental code updates from your prior test runs. These
    are the same set of analysis APIs that are used by the Visual Studio IDE diagnostic
    engine to incrementally update the intellisense/live diagnostics in the error
    list and squiggles in the editor.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们向您展示了如何设计实时单元测试执行来分析增量产品和测试更改，并且只执行单元测试项目中的测试子集，这些测试可能会受到这些更改的语义影响。如本章引言部分所述，LUT
    使用 Roslyn API 分析您先前测试运行中的增量代码更新。这些是与 Visual Studio IDE 诊断引擎用于增量更新错误列表中的智能感知/实时诊断和编辑器中的波浪线相同的分析
    API。
- en: In this recipe, we started with a single class, `Class1`*,* in the `ClassLibrary`
    project and a single unit test class, `UnitTest1`*,* in `UnitTestProject`. `UnitTest1`
    contains two methods `TestMethod1` and `TestMethod2`, that tested methods `Method1`
    and `Method2` in `Class1`, respectively. We added a new class, `Class2`, in `ClassLibrary`
    project with methods `Method5` and `Method6`. Then, we added a new unit test class,
    `UnitTest2` containing methods `TestMethod5` and `TestMethod6`, that test methods
    `Method5` and `Method6`, respectively. On adding these methods, LUT determined
    that the existing tests in type `UnitTest1` are unaffected by newly added `Class2`
    and `UnitTest2` and hence did not re-execute them. Subsequently, when we edited
    `Class1.Method1`, LUT only re-executed `UnitTest1.TestMethod1` and `UnitTest1.TestMethod2`
    but not the test methods in `UnitTest2`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们从 `ClassLibrary` 项目中的单个类 `Class1`* 和 `UnitTestProject` 中的单个单元测试类 `UnitTest1`*
    开始。`UnitTest1` 包含两个方法 `TestMethod1` 和 `TestMethod2`，分别测试 `Class1` 中的 `Method1`
    和 `Method2` 方法。我们在 `ClassLibrary` 项目中添加了一个新类 `Class2`，其中包含 `Method5` 和 `Method6`
    方法。然后，我们在 `UnitTestProject` 中添加了一个新的单元测试类 `UnitTest2`，包含 `TestMethod5` 和 `TestMethod6`
    方法，分别测试 `Method5` 和 `Method6` 方法。在添加这些方法后，LUT 确定类型 `UnitTest1` 中的现有测试不受新添加的 `Class2`
    和 `UnitTest2` 的影响，因此没有重新执行它们。随后，当我们编辑 `Class1.Method1` 时，LUT 只重新执行了 `UnitTest1.TestMethod1`
    和 `UnitTest1.TestMethod2`，而没有重新执行 `UnitTest2` 中的测试方法。
- en: Understanding Start/Stop/Pause/Continue/Restart functionality for fine grain
    control of LUT
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解启动/停止/暂停/继续/重启功能以对 LUT 进行细粒度控制
- en: In this section, we will show you how to control the live unit test execution
    in Visual Studio using the start, stop, pause, continue, and restart commands.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何使用启动、停止、暂停、继续和重启命令在 Visual Studio 中控制实时单元测试执行。
- en: Getting started
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门指南
- en: You will need to have Visual Studio 2017 Enterprise edition installed on your
    machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 企业版才能执行此食谱。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
    安装授权的企业版。
- en: Additionally, clone the solution `ClassLibrary.sln` attached from the recipe,
    *Viewing and navigating live unit test results*, in this chapter. Alternatively,
    you can manually execute the steps in that recipe before executing this recipe.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，克隆本章节中附带的解决方案`ClassLibrary.sln`，*查看和导航实时单元测试结果*，在执行此配方之前。或者，您可以在执行此配方之前手动执行该配方中的步骤。
- en: How to do it...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open the solution `ClassLibrary.sln`, with two projects: `ClassLibrary` and
    `UnitTestProject` and start live unit testing by clicking on Test | Live Unit
    Testing | Start. Also, bring up the Test Explorer window by clicking on Test |
    Windows | Test Explorer.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开包含两个项目：`ClassLibrary`和`UnitTestProject`的解决方案`ClassLibrary.sln`，通过点击测试 | 实时单元测试
    | 开始来启动实时单元测试。同时，通过点击测试 | 窗口 | 测试资源管理器来打开测试资源管理器窗口。
- en: Change `Class1.Method1` to return true instead of false.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Class1.Method1`改为返回true而不是false。
- en: 'Wait for a few seconds and note that the unit tests execute on the background,
    and `TestMethod1` and `TestMethod2` are both passed:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 等待几秒钟，并注意单元测试在后台执行，`TestMethod1`和`TestMethod2`都通过了：
- en: '![](img/212c5c58-8eb1-4608-9a37-91c5488a26c7.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/212c5c58-8eb1-4608-9a37-91c5488a26c7.png)'
- en: 'Click on Test| Live Unit Testing | Pause to temporarily pause LUT execution.
    Note that green tick (![](img/fda17483-050b-463d-9bc9-0846f151a3a8.png)) marks
    in the editor disappear as soon as LUT is paused:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击测试 | 实时单元测试 | 暂停以暂时暂停LUT执行。注意，一旦暂停LUT，编辑器中的绿色勾选标记(![](img/fda17483-050b-463d-9bc9-0846f151a3a8.png))就会消失：
- en: '![](img/b224db4b-1d55-4aeb-ae17-f1b3e4c68b77.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b224db4b-1d55-4aeb-ae17-f1b3e4c68b77.png)'
- en: 'Change `Class1.Method1` to again return false. This should cause `TestMethod1`
    to fail when re-executed, but note that the test still shows as passing in Test
    Explorer window because tests are not running live:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Class1.Method1`改为再次返回false。这应该会导致在重新执行时`TestMethod1`失败，但请注意，测试在测试资源管理器窗口中仍然显示为通过，因为测试不是实时运行的：
- en: '![](img/9547dcb9-9758-4926-9f11-d3e09da0031d.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9547dcb9-9758-4926-9f11-d3e09da0031d.png)'
- en: 'Navigate to Test | Live Unit Testing | Continue to resume LUT and note that
    `TestMethod1` immediately executes and is now shown as failing in the Test Explorer
    and gylph in the editor:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到测试 | 实时单元测试 | 继续以恢复LUT，并注意`TestMethod1`立即执行，现在在测试资源管理器和编辑器的图标中显示为失败：
- en: '![](img/bf30fb79-f10b-482d-90d9-caefa738c42e.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bf30fb79-f10b-482d-90d9-caefa738c42e.png)'
- en: Click on Test | Live Unit Testing | Restart and note that all the test results
    are wiped out momentarily in the editor and Test Explorer window.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击测试 | 实时单元测试 | 重新启动，并注意编辑器和测试资源管理器窗口中的所有测试结果都会暂时被清除。
- en: 'Note that Output window''s Live Unit Testing pane shows the message: Build
    completed (succeeded), indicating the projects were built again and all tests
    re-executed.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意输出窗口的实时单元测试面板显示的消息：构建完成（成功），表示项目已重新构建并重新执行了所有测试。
- en: 'Navigate to Test | Live Unit Testing | Stop and note that all the test results
    are wiped out permanently in the editor and Test Explorer window:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到测试 | 实时单元测试 | 停止，并注意编辑器和测试资源管理器窗口中的所有测试结果都会永久清除：
- en: '![](img/590f2111-0fe1-4ba7-a418-e71dfe2b4d44.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/590f2111-0fe1-4ba7-a418-e71dfe2b4d44.png)'
- en: 'Note that the Output window''s Live Unit Testing pane shows the message: Live
    Unit Testing stopped<q>.</q>, confirming that LUT execution was stopped.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意输出窗口的实时单元测试面板显示的消息：实时单元测试停止<q>。</q>，确认LUT执行已停止。
- en: Including and excluding subset of tests for live execution
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包含和排除实时执行中的子集测试
- en: In this section, we will show you how to selectively include and/or exclude
    subset of tests from live unit test execution. This features is extremely helpful
    in improving responsiveness for very large solutions where building the entire
    solution and then executing all the unit tests could be time consuming and resource
    intensive.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何选择性地包含和/或排除实时单元测试执行中的子集测试。这个功能对于提高非常大的解决方案的响应速度非常有帮助，因为在构建整个解决方案然后执行所有单元测试可能会很耗时且资源密集。
- en: Getting started
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装Visual Studio 2017企业版才能执行此配方。您可以从[https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)安装授权的企业版。
- en: How to do it...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Open Visual Studio 2017 and create a C# solution with 10 `ClassLibrary` projects,
    say `ClassLibrary`, `ClassLibrary1`, ..., `ClassLibrary9` and one unit test project
    `UnitTestProject`:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Visual Studio 2017 并创建一个包含 10 个 `ClassLibrary` 项目（例如 `ClassLibrary`、`ClassLibrary1`、...、`ClassLibrary9`）和一个单元测试项目
    `UnitTestProject` 的 C# 解决方案：
- en: '![](img/8ca650dd-cfc7-41f3-ad5d-7c3b050ee8af.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8ca650dd-cfc7-41f3-ad5d-7c3b050ee8af.png)'
- en: Add a project reference to all the class library projects in `UnitTestProject`.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `UnitTestProject` 中将项目引用添加到所有类库项目。
- en: Add a new test class `UnitTest2` in `UnitTestProject` and rename the test method
    to `TestMethod2.`
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `UnitTestProject` 中添加一个新的测试类 `UnitTest2` 并将测试方法重命名为 `TestMethod2.`。
- en: 'Navigate to Test | Live Unit Testing | Start and notice the following dialog
    prompting that the solution is large and responsiveness will improve if subset
    of the tests are included:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到 Test | Live Unit Testing | Start 并注意以下对话框提示解决方案很大，如果包含测试子集，则响应速度会提高：
- en: '![](img/2322b4be-14f8-470d-9859-ad3cd7bc9068.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2322b4be-14f8-470d-9859-ad3cd7bc9068.png)'
- en: Click on No so that none of the tests are included for live execution.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 No 以确保没有测试被包含在实时执行中。
- en: 'Verify the blue dash (![](img/91c7043d-5a4f-4c78-8ce4-09b3cb1ad729.png)) in
    front of the test methods in `UnitTestProject`, confirming the exclusion of unit
    tests from live execution:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `UnitTestProject` 中测试方法前的蓝色破折号 (![](img/91c7043d-5a4f-4c78-8ce4-09b3cb1ad729.png))，确认已从实时执行中排除单元测试：
- en: '![](img/0740f180-58e2-4fbe-a3bb-b0e76faac5c2.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0740f180-58e2-4fbe-a3bb-b0e76faac5c2.png)'
- en: Right-click on class `UnitTest1` in the editor and execute Live Tests | Include
    to include unit tests in this class for LUT.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在编辑器中右键单击类 `UnitTest1` 并执行 Live Tests | Include 以包含此类中的单元测试到 LUT 中。
- en: '![](img/332dadc6-29b1-4082-8641-03bbe55072a1.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/332dadc6-29b1-4082-8641-03bbe55072a1.png)'
- en: Verify that `UnitTest1.TestMethod1` executes immediately with LUT and is shown
    as passed, but `UnitTest2.TestMethod2` is not executed.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证 `UnitTest1.TestMethod1` 在 LUT 下立即执行并显示为通过，但 `UnitTest2.TestMethod2` 没有执行。
- en: Right-click on class `UnitTest1` in the editor again and execute Live Tests
    | Exclude to exclude unit tests in this class for LUT.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次在编辑器中右键单击类 `UnitTest1` 并执行 Live Tests | Exclude 以排除此类中的单元测试到 LUT。
- en: 'Edit the method `UnitTest1.TestMethod1` by hitting the *Enter* key and verify
    the test is now excluded from LUT and test result is also cleared from the editor
    and Test Explorer window:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Enter* 键编辑方法 `UnitTest1.TestMethod1` 并验证测试现在已从 LUT 中排除，并且测试结果也已从编辑器和测试资源管理器窗口中清除：
- en: '![](img/7d6526c3-578f-41de-93f1-3cc0d50b0e9c.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7d6526c3-578f-41de-93f1-3cc0d50b0e9c.png)'
- en: You can include/exclude all tests from a unit test project for LUT by right-clicking
    on the project node in the solution explorer and clicking on Live Tests | Include/Exclude.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在解决方案资源管理器中右键单击项目节点并单击 Live Tests | Include/Exclude 来包含/排除单元测试项目中的所有测试。
- en: Configuring different options for live unit testing using the Tools Options
    dialog
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用工具选项对话框配置实时单元测试的不同选项
- en: In this section, we will show you how to configure LUT execution options, such
    as starting LUT on solution load, configuring the minimum battery percentage required
    to keep LUT enabled in order to save battery power, and so on. This enables users
    to control when to automatically start/pause LUT and to control the level of logging
    to meet their requirements.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何配置 LUT 执行选项，例如在解决方案加载时启动 LUT、配置保持 LUT 启用所需的最低电池百分比以节省电池电量，等等。这使用户能够控制何时自动启动/暂停
    LUT，并控制日志记录级别以满足他们的需求。
- en: Getting started
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 入门
- en: You will need to have the Visual Studio 2017 Enterprise edition installed on
    your machine to execute this recipe. You can install a licensed enterprise edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15).
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装 Visual Studio 2017 Enterprise 版本才能执行此配方。您可以从 [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Enterprise&rel=15)
    安装授权的企业版。
- en: Additionally, clone the `ClassLibrary.sln` solution attached from the recipe,
    *Viewing and navigating live unit test results*, in this chapter. Alternatively,
    you can manually execute the steps in that recipe before proceeding with this
    recipe.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，克隆本章中附带的 `ClassLibrary.sln` 解决方案，*查看和导航实时单元测试结果*，然后继续此配方。或者，您可以在继续此配方之前手动执行该配方中的步骤。
- en: How to do it...
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the solution `ClassLibrary.sln` with two projects, `ClassLibrary` and `UnitTestProject`**,**
    and start live unit testing by navigating to Test | Live Unit Testing | Start.
    Also, bring up the Test Explorer window by clicking on Test | Windows | Test Explorer.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用包含两个项目，`ClassLibrary` 和 `UnitTestProject`**，**的解决方案 `ClassLibrary.sln`，并通过导航到测试
    | 实时单元测试 | 开始来启动实时单元测试。同时，通过点击测试 | 窗口 | 测试资源管理器来打开测试资源管理器窗口。
- en: 'Click on Tools | Options, and search `Live Unit Testing` in the search bar,
    and click on the General tab to view the LUT configuration options:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击工具 | 选项，并在搜索栏中搜索 `Live Unit Testing`，然后点击常规选项卡以查看 LUT 配置选项：
- en: '![](img/75fdd645-88d0-44be-8dad-4e73202e51bf.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/75fdd645-88d0-44be-8dad-4e73202e51bf.png)'
- en: Check Start Live Unit Testing on solution load and click on OK on the dialog.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在解决方案加载时检查启动实时单元测试，并在对话框中点击确定。
- en: Stop live unit testing for the solution by navigating to Test | Live Unit Testing
    | Stop.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过导航到测试 | 实时单元测试 | 停止来停止解决方案的实时单元测试。
- en: Close and re-open the solution and verify that all unit tests are automatically
    executed with LUT on completion of the solution load.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关闭并重新打开解决方案，并验证在解决方案加载完成后所有单元测试都会自动执行。
- en: Open the LUT configuration options using Tools | Options again and change the
    minimum battery percentage to pause LUT from 30% to 100%
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次使用工具 | 选项打开 LUT 配置选项，并将暂停 LUT 的最低电池百分比从 30% 更改为 100%
- en: Disconnect the power cord from your laptop and verify the LUT is immediately
    paused, and that editing any test method doesn't cause tests to be re-executed
    with LUT.
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从笔记本电脑断开电源线，并验证 LUT 会立即暂停，并且编辑任何测试方法都不会导致测试以 LUT 重新执行。
- en: Connect the laptop power cord and verify the unit tests again; start executing
    in the background with LUT.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接笔记本电脑电源线，并再次验证单元测试；在后台以 LUT 执行。
