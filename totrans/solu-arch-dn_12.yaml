- en: '*Chapter 9*: Architecting Modern Web Solutions with ASP.NET Core and Azure'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 9 章*：使用 ASP.NET Core 和 Azure 架构现代网络解决方案'
- en: Building rich and dynamic web solutions with **ASP.NET Core** and hosting them
    in **Azure** offers greater value over the traditional approach to web development
    practices.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 **ASP.NET Core** 构建丰富和动态的网络解决方案，并在 **Azure** 中托管，比传统的网络开发实践提供了更大的价值。
- en: This chapter provides us with a foundational understanding of how to architect
    web solutions with modern .NET technologies and cloud hosting scenarios.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为我们提供了如何使用现代 .NET 技术和云托管场景架构网络解决方案的基础理解。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: An overview of modern web solution characteristics
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 现代网络解决方案特性的概述
- en: Learning how to choose between traditional web apps and **Single-Page Apps**
    (**SPAs**)
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何在传统网络应用和**单页应用**（**SPAs**）之间进行选择
- en: Understanding the project structure in the popular SPA frameworks
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解流行 SPA 框架中的项目结构
- en: Exploring hosting options in Azure with high-level recommendations
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Azure 中探索托管选项，并提供高级推荐
- en: By the end of this chapter, we will have learned how to architect cross-platform
    modern web solutions with ASP.NET Core to take advantage of its improved performance,
    which is one of the most obvious benefits of this framework along with its cloud-based
    development support.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将学会如何使用 ASP.NET Core 架构跨平台现代网络解决方案，以利用其改进的性能，这是该框架最明显的优势之一，以及其基于云的开发支持。
- en: Moreover, we will get to know how to choose between traditional web apps and
    SPAs along with a quick comparison of **Angular**, **React**, and **Vue**. We
    will also learn how to choose the best Azure hosting approach for our solution.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将了解如何在传统网络应用和 SPAs 之间进行选择，以及 **Angular**、**React** 和 **Vue** 的快速比较。我们还将学习如何为我们的解决方案选择最佳的
    Azure 托管方法。
- en: Exploring the characteristics of modern web solutions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索现代网络解决方案的特性
- en: Irrespective of the industry or business of the clients, the user expectations
    from modern web solutions are increasing with time. End users expect to use responsive
    web solutions that can be accessed from different devices with various screen
    sizes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 不论是客户所在的行业还是业务，随着时间推移，现代网络解决方案的用户期望都在不断增加。最终用户期望使用响应式网络解决方案，可以从不同设备上访问，这些设备具有各种屏幕尺寸。
- en: Moreover, the web solutions must be secure, flexible, and scalable to allow
    adding new features within a short time and with less effort. Modern web solutions
    are expected to be easy to use with a well-developed user experience. This offers
    our clients a unique competitive advantage to retain their customers and distinguish
    themselves from their competitors. In this section, we are going to highlight
    the main characteristics of modern web solutions.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，网络解决方案必须安全、灵活和可扩展，以便在短时间内以较少的努力添加新功能。现代网络解决方案预计将易于使用，并具有良好开发的用户体验。这为我们客户提供独特的竞争优势，以保留客户并使自身与竞争对手区分开来。在本节中，我们将强调现代网络解决方案的主要特性。
- en: Scalable and cloud-hosted solutions
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可扩展和云托管解决方案
- en: In the current modern era, cloud adoption is a way to accelerate digital transformation
    for many reasons, such as the ability to automatically scale up or down the allocation
    of resources based on emerging needs. Moreover, cloud hosting offers various tools
    to automate business operations along with strong security measures that ensure
    the protection of personal data and customer information that might be associated
    with the web solution.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前的现代时代，云采用是加速数字化转型的一种方式，原因有很多，例如根据不断出现的需求自动扩展或缩减资源分配的能力。此外，云托管提供了各种工具来自动化业务操作，以及强大的安全措施，确保保护与网络解决方案相关的个人数据和客户信息。
- en: ASP.NET Core is the best option, dealing perfectly with these factors. It is
    a cross-platform web framework that is optimized for cloud solutions. It is developed
    with performance and scalability in mind, which means less RAM and CPU consumption,
    and this will save us costs in infrastructure and hosting.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 是最佳选择，完美处理这些因素。它是一个针对云解决方案优化的跨平台网络框架。它以性能和可扩展性为设计理念，这意味着更少的 RAM
    和 CPU 消耗，这将为我们节省基础设施和托管成本。
- en: Modular and loosely-coupled architecture
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模块化和松散耦合的架构
- en: Modular architecture is a design approach that consists of assembling multiple
    modules to construct a system. The main benefits of the modular concept are flexibility,
    which allows us to easily bring additional features to the system, and loosely
    coupled modules, which allow reducing the costs of maintenance.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化架构是一种设计方法，它由组装多个模块来构建系统。模块化概念的主要好处是灵活性，这使我们能够轻松地将额外功能添加到系统中，以及松散耦合的模块，这有助于降低维护成本。
- en: It is worthwhile to use ASP.NET Core to implement the modular concept in modern
    web solutions. It is an open-source framework that is developed out of different
    **NuGet** packages. This means our web solution will only compile packages that
    are really needed in the solution, and it won't include additional libraries that
    are never used, as is the case with .NET Framework. By eliminating the libraries
    that are not needed in the solution, we reduce security vulnerabilities in one
    way or another.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 ASP.NET Core 在现代网络解决方案中实现模块化概念是值得的。它是一个开源框架，由不同的 **NuGet** 包开发而成。这意味着我们的网络解决方案只会编译解决方案中真正需要的包，而不会包含从未使用过的额外库，就像
    .NET 框架那样。通过消除解决方案中不需要的库，我们在某种程度上减少了安全漏洞。
- en: ASP.NET Core is designed to allow for **dependency injection**. This is a design
    technique used to reduce the dependency problems between components or classes
    through the use of an interface, or by injecting the concrete implementation of
    a low-level class into a higher one.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 设计用于允许 **依赖注入**。这是一种设计技术，通过使用接口或通过将低级类的具体实现注入到高级类中来减少组件或类之间的依赖问题。
- en: 'Check out the Microsoft documentation for more information about dependency
    injection: [https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0.](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅 Microsoft 文档以获取有关依赖注入的更多信息：[https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0.](https://docs.microsoft.com/en-us/aspnet/core/fundamentals/dependency-injection?view=aspnetcore-5.0)
- en: )
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Automated testing
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自动化测试
- en: '**Testing** is an essential phase to certify the product we are developing.
    While manual testing is still important for many reasons, such as exploratory
    testing and visual testing, automated tests offer great benefits such as saved
    costs, increased productivity, high-quality products, and better performance.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**测试** 是验证我们正在开发的产品的一个关键阶段。虽然由于许多原因，如探索性测试和视觉测试，手动测试仍然很重要，但自动化测试提供了巨大的好处，如节省成本、提高生产力、高质量的产品和更好的性能。'
- en: ASP.NET Core allows us to easily test the system we are developing because the
    framework is flexible and reliable, allowing fast automated testing. It provides
    capabilities to easily write unit tests for **Model-View-Controller** (**MVC**)
    **apps** as well as **Web APIs** that are mandatory for modern web solutions.
    It is seamlessly integrated with Azure allowing us to have full access to the
    latest features in **DevOps** testing tools, which is very valuable to the product
    and the development team.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ASP.NET Core 使我们能够轻松测试我们正在开发的系统，因为该框架灵活且可靠，允许快速自动化测试。它提供了为 **模型-视图-控制器**（**MVC**）应用程序以及现代网络解决方案所必需的
    **Web API** 编写单元测试的能力。它与 Azure 无缝集成，使我们能够完全访问 **DevOps** 测试工具的最新功能，这对产品和开发团队来说非常有价值。
- en: Traditional and single-page application support
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统和单页应用程序支持
- en: SPAs are trendy in the web world, though it doesn't mean that every web solution
    should be developed using this technique. Traditional web solutions based on the
    MVC framework are still in demand and can be used in many cases. Traditional web
    solutions with **ASP.NET MVC** rely on the server to deal with the requests and
    render back the views, while SPAs rely heavily on Web APIs to get the data needed
    to render the components.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络世界中，单页应用程序（SPAs）很流行，但这并不意味着每个网络解决方案都应该使用这种技术。基于 MVC 框架的传统网络解决方案仍然有需求，并且在许多情况下可以使用。基于
    **ASP.NET MVC** 的传统网络解决方案依赖于服务器来处理请求并渲染视图，而 SPAs 则严重依赖于 Web API 来获取渲染组件所需的数据。
- en: Many web solutions, nowadays, involve both the behaviors of traditional web
    apps and SPAs. ASP.NET supports having an MVC web application along with a web
    API in the same Visual Studio project. Moreover, it allows building web apps using
    any of the modern frontend frameworks, such as Angular, React, and Vue, along
    with a server-side backend web API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，许多网络解决方案都涉及传统网络应用和单页应用的行为。ASP.NET 支持在同一 Visual Studio 项目中拥有 MVC 网络应用和 Web
    API。此外，它允许使用任何现代前端框架构建 Web 应用，例如 Angular、React 和 Vue，以及后端 Web API。
- en: Fast deployment
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 快速部署
- en: It is essential to easily deploy new changes to web solutions. With **Azure
    DevOps** pipelines, we can automate the deployment process of ASP.NET Core solutions
    as part of the **continuous integration** and **continuous delivery** pipeline.
    Microsoft Azure is also integrated with **Git** repositories, allowing the automatic
    deployment of new changes that are made to a particular Git branch or tag.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 容易将新更改部署到网络解决方案是至关重要的。使用 **Azure DevOps** 管道，我们可以将 ASP.NET Core 解决方案的部署过程自动化，作为
    **持续集成** 和 **持续交付** 管道的一部分。Microsoft Azure 还与 **Git** 仓库集成，允许自动部署对特定 Git 分支或标签所做的更改。
- en: Moreover, we can use the tools and practices provided by GitHub, which are fully
    integrated with Azure, to deliver our products faster. Through GitHub Actions,
    which are similar to Azure pipelines, we can automate software development processes
    with the usage of workflows that are made up of steps and jobs. These workflows
    can help us build, test, package, release, and deploy any project on GitHub with
    an automated workflow.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们可以使用 GitHub 提供的工具和实践，这些工具与 Azure 完全集成，以更快地交付我们的产品。通过 GitHub Actions，这些类似于
    Azure 管道，我们可以使用由步骤和作业组成的流程来自动化软件开发过程。这些工作流程可以帮助我们使用自动化工作流程在 GitHub 上构建、测试、打包、发布和部署任何项目。
- en: 'For more information about the available GitHub actions for Azure, check the
    following reference:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于 Azure 可用的 GitHub 动作的信息，请查看以下参考资料：
- en: '[https://docs.microsoft.com/en-us/azure/developer/github/github-actions](https://docs.microsoft.com/en-us/azure/developer/github/github-actions'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.microsoft.com/en-us/azure/developer/github/github-actions](https://docs.microsoft.com/en-us/azure/developer/github/github-actions'
- en: )
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: Progressive web apps with Blazor
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Blazor 的渐进式 Web 应用
- en: '**Blazor** is a web framework that provides awesome capabilities to build interactive
    web applications using **C#** instead of **JavaScript**. It relies on open web
    standards with no need to install any kind of plugin. It can be used to build
    SPAs as well as **Progressive Web Applications** (**PWAs**).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Blazor** 是一个提供使用 **C#** 而不是 **JavaScript** 构建交互式 Web 应用的强大功能的 Web 框架。它依赖于开放网络标准，无需安装任何插件。它可以用来构建单页应用以及
    **渐进式 Web 应用**（**PWAs**）。'
- en: 'PWAs are web apps that make use of the latest technologies of the browser to
    deliver a user experience that is similar to mobile apps. They are a powerful
    trend in mobile and web development. Blazor **WebAssembly** is the client-side
    framework that can be used to build PWA apps. Here are the benefits of this technique:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: PWAs 是利用浏览器最新技术的网络应用，提供与移动应用相似的用户体验。它们是移动和 Web 开发中的一个强大趋势。Blazor **WebAssembly**
    是用于构建 PWA 应用的客户端框架。以下是这种技术的优势：
- en: It allows for seamless offline operations and the app can load instantly. Later,
    it can sync with the server to send back the data.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许无缝离线操作，并且应用可以立即加载。稍后，它可以与服务器同步以发送数据。
- en: Low development costs because we don't have to build different versions for
    multiple devices.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发成本较低，因为我们不需要为多个设备构建不同的版本。
- en: It provides users with a similar UI/UX to mobile apps.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为用户提供与移动应用类似的 UI/UX。
- en: The possibility to push notifications from the server like with native apps,
    even when users are not using the app.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 服务器可以推送通知，就像原生应用一样，即使用户没有在使用应用。
- en: No need to publish the app to a store for distribution and discovery. The app
    can be accessed through a link or a shortcut link that can be placed in the Start
    menu or on the home screen.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无需将应用发布到商店进行分发和发现。应用可以通过链接或快捷链接访问，这些链接可以放置在开始菜单或主屏幕上。
- en: In this section, we highlighted a set of key characteristics of modern web solutions.
    In the next section, we will learn how to choose between traditional web apps
    and SPAs.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们强调了现代网络解决方案的一些关键特性。在下一节中，我们将学习如何在传统网络应用和单页应用之间进行选择。
- en: Choosing between traditional web apps and single-page apps
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在传统网络应用和单页应用之间进行选择
- en: So far, we have seen that there are two approaches to building web applications.
    One approach is the traditional way, where all the application logic is served
    on the server side. The other one is the modern approach represented by SPAs,
    where all the user interaction is handled by the browser using a client-side framework
    that communicates with the web server by consuming a web API. There is also a
    way to have a hybrid solution by combining the two approaches together in one
    solution.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了构建Web应用程序的两种方法。一种方法是传统的服务器端方法，其中所有应用程序逻辑都在服务器端提供。另一种方法是现代方法，由单页应用程序（SPAs）代表，其中所有用户交互都由浏览器通过客户端框架处理，该框架通过消耗Web
    API与Web服务器通信。还可以通过将两种方法结合在一个解决方案中来实现混合解决方案。
- en: 'The following diagram shows the two approaches. We can see that in the **Single
    Page Application**, we have multiple templates that will be rendered in one single
    page using a client-side framework; also, there is no full-page refresh in this
    approach. While in the **Traditional Web Application**, we can see multiple pages
    that enforce a full refresh of the page when navigating from one page to another:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了两种方法。我们可以看到，在**单页应用程序**中，我们有多模板将在一个单页面上使用客户端框架渲染；此外，这种方法中也没有全页刷新。而在**传统Web应用程序**中，我们可以看到多个页面，在从一个页面导航到另一个页面时将强制进行全页刷新：
- en: '![Figure 9.1: Single-page application versus traditional web application](img/Figure_9.01_B17366.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1：单页应用程序与传统Web应用程序的比较](img/Figure_9.01_B17366.jpg)'
- en: 'Figure 9.1: Single-page application versus traditional web application'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1：单页应用程序与传统Web应用程序的比较
- en: A question that usually comes to mind every time we want to architect and develop
    a new web solution is, *which approach should we adopt – traditional or single
    page?* Let's learn how to choose between these two approaches.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我们想要架构和开发一个新的Web解决方案时，通常会想到一个问题，*我们应该采用哪种方法——传统还是单页？* 让我们学习如何在这两种方法之间进行选择。
- en: Selecting traditional web applications
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择传统Web应用程序
- en: 'Before we start discussing the key reasons for choosing traditional web applications,
    let''s understand the page lifecycle of this approach. Here is a diagram showing
    the request lifecycle in a traditional web application:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始讨论选择传统Web应用程序的关键原因之前，让我们了解这种方法中页面生命周期的概念。以下是展示传统Web应用程序请求生命周期的图表：
- en: '![Figure 9.2: Traditional page lifecycle](img/Figure_9.02_B17366.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图9.2：传统页面生命周期](img/Figure_9.02_B17366.jpg)'
- en: 'Figure 9.2: Traditional page lifecycle'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2：传统页面生命周期
- en: In the preceding diagram, we can see the initial request is made by the user
    to browse a page. This request is received by the server, which will process it
    and return an HTML page as a response, which is considered as a full-page refresh.
    It is the same behavior when we post a form to the server.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图表中，我们可以看到用户发起的初始请求是为了浏览一个页面。这个请求被服务器接收，服务器将处理它并返回一个HTML页面作为响应，这被视为全页刷新。当我们向服务器提交表单时，行为也是一样的。
- en: A good example of this approach is the classic ASP.NET MVC application that
    is not making use of any JavaScript framework to render views through **AJAX**
    requests.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法的一个好例子是经典的ASP.NET MVC应用程序，它没有使用任何JavaScript框架通过**AJAX**请求来渲染视图。
- en: 'Now, let''s get to know when we should choose the traditional web application
    approach:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解何时应该选择传统Web应用程序方法：
- en: If the client-side requirements of the application are simple, then the traditional
    approach is a good fit. For example, most **CMS** websites are used by users to
    read content with a minor need for client-side functionalities. In this case,
    the traditional approach should be adopted to develop such applications where
    the actual logic is executed on the server and the response is returned as HTML
    to the user's browser. Check the *New York Times* website – you will notice that
    when you navigate from one article to another, the URL in the browser changes,
    which is a sign that this website is built using the traditional approach.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果应用程序的客户端需求很简单，那么传统方法是一个很好的选择。例如，大多数**CMS**网站都是供用户阅读内容使用的，对客户端功能的需求很小。在这种情况下，应该采用传统方法来开发这样的应用程序，其中实际逻辑在服务器上执行，并将响应作为HTML返回给用户的浏览器。检查一下*纽约时报*网站——你会注意到，当你从一个文章导航到另一个文章时，浏览器中的URL会改变，这是该网站使用传统方法构建的标志。
- en: If JavaScript and famous frontend frameworks such as Angular, React, and Vue
    have not been adopted by our team and there is not enough time to train them before
    we start a project.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们的团队尚未采用 JavaScript 和著名的 frontend 框架，如 Angular、React 和 Vue，并且在我们开始项目之前没有足够的时间对他们进行培训。
- en: If the client request is to load the web app without JavaScript support, in
    this case, all JavaScript libraries will be disabled by default in the browser.
    In most cases, this is requested in intranet web apps and not online websites.
    In online websites, it is a must to have JavaScript enabled, otherwise, we won't
    be able to open the website from various devices.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果客户端请求是不支持 JavaScript 的 Web 应用，在这种情况下，浏览器中默认将禁用所有 JavaScript 库。在大多数情况下，这是在内部网络
    Web 应用中请求的，而不是在线网站。在线网站上，必须启用 JavaScript，否则我们无法从各种设备打开网站。
- en: If SEO is an essential matter in the project to improve content marketing and
    drive more leads and readers to the website. It is possible to configure the SPA
    to improve the SEO ranking of the application. However, this ranking shows better
    results with multiple pages having proper URLs.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果 SEO 是项目中改善内容营销和吸引更多潜在客户和读者到网站的关键问题。可以配置 SPA 来提高应用程序的 SEO 排名。然而，这种排名在具有适当
    URL 的多个页面中显示更好的结果。
- en: These are the main key factors that will lead us to choose the traditional approach.
    In the next section, we will learn when to choose the SPA approach.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是引导我们选择传统方法的主要关键因素。在下一节中，我们将学习何时选择 SPA 方法。
- en: Choosing single-page applications
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择单页应用程序
- en: 'An SPA is a one-page application with multiple views that are rendered using
    JavaScript on a single page. In the following diagram, we will explore the request
    lifecycle in an SPA:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: SPA 是一个单页应用程序，它使用 JavaScript 在单页上渲染多个视图。在下面的图中，我们将探索 SPA 中的请求生命周期：
- en: '![Figure 9.3: Single-page application lifecycle](img/Figure_9.03_B17366.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：单页应用程序生命周期](img/Figure_9.03_B17366.jpg)'
- en: 'Figure 9.3: Single-page application lifecycle'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：单页应用程序生命周期
- en: In the preceding diagram, we can see the initial request is triggered by the
    end user opening the SPA app for the first time. The server will answer by returning
    the full HTML of the home page. Moreover, the user will trigger another functionality
    such as updating data in the database and refreshing the view.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的图中，我们可以看到初始请求是由最终用户首次打开 SPA 应用触发的。服务器将通过返回主页的完整 HTML 来回答。此外，用户将触发另一个功能，例如更新数据库中的数据并刷新视图。
- en: This will be achieved through an **AJAX** technique that is used by most of
    the famous frontend frameworks. The **AJAX** call will consume a web service or
    a web API and return a **JSON** object, then it will refresh the view only without
    having a full-page refresh. This creates a fluid user experience allowing users
    to feel like they are using a native app.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这将通过大多数著名前端框架所使用的 **AJAX** 技术来实现。**AJAX** 调用将消耗一个网络服务或网络 API，并返回一个 **JSON**
    对象，然后它只刷新视图而不进行整个页面的刷新。这创造了一个流畅的用户体验，使用户感觉就像在使用原生应用一样。
- en: 'Now, let''s get to know when we should choose the SPA approach:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们了解何时应该选择 SPA 方法：
- en: If it is requested to provide users with the ability to work offline when they
    are not connected to the network or the internet. The SPA approach will give users
    the ability to sync their data with the server when the application is connected
    to the network again.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果需要提供用户在网络或互联网未连接时能够离线工作的能力。SPA 方法将使用户能够在应用程序再次连接到网络时同步其数据。
- en: If consuming less bandwidth is essential. It is known that SPA apps load their
    resources once during the initial request and they consume less bandwidth than
    traditional web apps because they do not load and transmit the full HTML page
    on every request.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果减少带宽消耗是至关重要的。众所周知，SPA 应用在初始请求时只加载一次资源，并且它们比传统 Web 应用消耗更少的带宽，因为它们不会在每次请求时加载和传输完整的
    HTML 页面。
- en: If the response time and user experience are crucial for the client. It is well
    known that the response time of requests in SPAs is way better than traditional
    applications. Moreover, the seamless and rich user experience can significantly
    affect the business of our clients and eventually increase leads and sales.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果响应时间和用户体验对客户至关重要。众所周知，SPAs 中的请求响应时间远远优于传统应用程序。此外，无缝且丰富的用户体验可以显著影响我们客户的业务，并最终增加潜在客户和销售额。
- en: If SEO is not important for the web application and if your team is knowledgeable
    with JavaScript, TypeScript, and any of the frontend frameworks such as Angular,
    React, Vue, or Blazor WebAssembly.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果对于Web应用来说SEO不是很重要，并且如果你的团队熟悉JavaScript、TypeScript以及任何前端框架，如Angular、React、Vue或Blazor
    WebAssembly。
- en: In this section, we learned how to choose between traditional web applications
    and SPA web applications. We also explained the request lifecycle for both approaches.
    In the next section, we are going to have a quick overview of some common SPA
    architectures.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何在传统Web应用和SPA Web应用之间进行选择。我们还解释了两种方法请求的生命周期。在下一节中，我们将快速概述一些常见的SPA架构。
- en: Understanding the structure of SPAs with ASP.NET Core
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解ASP.NET Core中SPAs的结构
- en: With proper architecture, features can easily be developed, and we can reach
    an outstanding client's satisfaction. This approach is challenging because it
    requires solid architectural expertise and a proper hosting approach, but it always
    succeeds in delivering a decent solution.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的架构下，功能可以轻松开发，并且我们可以达到出色的客户满意度。这种方法具有挑战性，因为它需要坚实的架构专业知识和适当的主机方法，但总是能够成功交付一个合理的解决方案。
- en: 'In this section, we will get to know the structure of SPAs with ASP.NET Core.
    We will explore the project structure of the three top modern SPA technologies:
    Angular, React, and Vue.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解ASP.NET Core中SPAs的结构。我们将探索三个最现代的SPA技术（Angular、React和Vue）的项目结构。
- en: Angular SPAs
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Angular SPAs
- en: Angular offers a full MVC pattern implementation. It is still one of the best
    JavaScript frameworks that is used to build SPAs. Today, with the latest version
    of **Visual Studio**, we can create a new ASP.NET web application with Angular
    enabled.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Angular提供了一个完整的MVC模式实现。它仍然是用于构建SPA的最佳JavaScript框架之一。今天，使用最新的**Visual Studio**版本，我们可以创建一个启用Angular的新ASP.NET
    Web应用。
- en: 'The project will be a combination of the Angular `ClientApp` folder along with
    the web API that is usually included in the `Controllers` folder, as shown in
    the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目将是Angular `ClientApp`文件夹与通常包含在`Controllers`文件夹中的Web API的组合，如下面的截图所示：
- en: '![Figure 9.4: Structure of an Angular app with ASP.NET Core](img/Figure_9.04_B17366.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图9.4：使用ASP.NET Core的Angular应用结构](img/Figure_9.04_B17366.jpg)'
- en: 'Figure 9.4: Structure of an Angular app with ASP.NET Core'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.4：使用ASP.NET Core的Angular应用结构
- en: 'The `ClientApp` folder usually contains all the files related to an Angular
    CLI-based frontend application and the `Controllers` folder contains all the API
    endpoints. The following list explains the main files and folders under the Angular
    client app shown in the preceding screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`ClientApp`文件夹通常包含与基于Angular CLI的前端应用相关的所有文件，而`Controllers`文件夹包含所有API端点。以下列表解释了前一个截图所示的Angular客户端应用下的主要文件和文件夹：'
- en: '`e2e`: This folder is used to create the different types of testing and it
    relies on a testing library called `Protractor`.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`e2e`: 这个文件夹用于创建不同类型的测试，它依赖于一个名为`Protractor`的测试库。'
- en: '`src`: This folder contains the frontend code that we will develop to render
    the components; we will spend most of the time writing code in this folder. It
    includes the styling file along with the configuration files to run the app.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`: 这个文件夹包含我们将开发以渲染组件的前端代码；我们将大部分时间都花在这个文件夹中编写代码。它包括样式文件以及运行应用的配置文件。'
- en: '`angular.json`: This is the configuration file where we can specify the HTML
    starting page along with the main TypeScript file that should be executed at the
    beginning of the application.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`angular.json`: 这是一个配置文件，我们可以在这里指定应用的起始HTML页面以及应用开始执行时应执行的主要TypeScript文件。'
- en: '`.editorconfig`: This is the configuration file where we set the settings that
    should be applied by the editor when adding or modifying files in the Angular
    app.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.editorconfig`: 这是一个配置文件，我们在这里设置编辑器在添加或修改Angular应用中的文件时应应用的设置。'
- en: '`package.json`: This file contains the list of dependencies that need to be
    available to develop and deploy the application.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 这个文件包含需要用于开发和部署应用的所有依赖项列表。'
- en: '`README.md`: This contains, by default, the basic project documentation in
    Markdown format.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`: 默认情况下，这个文件包含的是Markdown格式的项目基本文档。'
- en: '`tsconfig.json`: This contains the configuration needed for the TypeScript
    compiler.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tsconfig.json`: 这个文件包含了TypeScript编译器所需的配置。'
- en: '`tslint.json`: This contains a list of rules that should be checked by the
    **tslint** tool to validate the quality of the TypeScript code.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tslint.json`: 这个文件包含了一组规则，这些规则应由**tslint**工具检查以验证TypeScript代码的质量。'
- en: React SPAs
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React SPA
- en: '**React** is one of the most popular JavaScript libraries used to build fast
    and interactive SPAs. It focuses on the views part of the application, mainly
    the UI components, therefore it requires using additional libraries to build the
    entire SPA.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**React** 是用于构建快速和交互式 SPA 的最受欢迎的 JavaScript 库之一。它主要关注应用程序的视图部分，主要是 UI 组件，因此需要使用额外的库来构建整个
    SPA。'
- en: 'In Visual Studio, we can make use of the existing project templates to create
    a new ASP.NET Core application with React. The following screenshot shows the
    project structure of the React application. The `ClientApp` folder contains all
    the files related to React and we can see the `Controllers` folder, which holds
    the .NET Web API:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，我们可以利用现有的项目模板来创建一个新的 ASP.NET Core 应用程序，并使用 React。以下截图显示了 React
    应用程序的项目结构。`ClientApp` 文件夹包含所有与 React 相关的文件，我们可以看到 `Controllers` 文件夹，其中包含 .NET
    Web API：
- en: '![Figure 9.5: Structure of the React app with ASP.NET Core](img/Figure_9.05_B17366.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5：React 应用程序与 ASP.NET Core 的结构](img/Figure_9.05_B17366.jpg)'
- en: 'Figure 9.5: Structure of the React app with ASP.NET Core'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5：React 应用程序与 ASP.NET Core 的结构
- en: 'The following list explains the main files and folders under the React client
    app shown in the preceding screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表解释了前一个截图所示的 React 客户端应用程序下的主要文件和文件夹：
- en: '`public`: This folder contains the static files of the application such as
    the HTML index page.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`: 此文件夹包含应用程序的静态文件，例如 HTML 索引页面。'
- en: '`src`: This folder contains all the dynamic components that we will develop.
    It also contains the `App.js` file, which acts as the main `index.js` file, it
    represents the entry point of the application that triggers the `registerServiceWorker.js`
    file, which is used to cache the assets of the application. This caching mechanism
    helps load the application faster and allows offline capabilities.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`: 此文件夹包含我们将要开发的全部动态组件。它还包含 `App.js` 文件，该文件充当主 `index.js` 文件，它代表应用程序的入口点，触发
    `registerServiceWorker.js` 文件，该文件用于缓存应用程序的资产。这种缓存机制有助于加快应用程序的加载速度，并允许离线功能。'
- en: '`package.json`: This file contains the list of dependencies used in the application.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 此文件包含应用程序中使用的依赖项列表。'
- en: Vue SPAs
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Vue SPA
- en: '**Vue** is a JavaScript framework that, when combined with other libraries,
    is used to build modern SPAs. Unlike other monolithic frameworks, Vue is a lightweight
    and easy-to-learn framework. In Visual Studio, we can create an ASP.NET Core application
    with Vue.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '**Vue** 是一个 JavaScript 框架，当与其他库结合使用时，用于构建现代单页应用（SPA）。与其他单体框架不同，Vue 是一个轻量级且易于学习的框架。在
    Visual Studio 中，我们可以创建一个带有 Vue 的 ASP.NET Core 应用程序。'
- en: 'Similar to the other project templates, the Vue files are included within the
    `ClientApp` folder and the `Controllers` folder, which contains the Web API controllers,
    as per the following screenshot:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他项目模板类似，Vue 文件包含在 `ClientApp` 文件夹和 `Controllers` 文件夹中，后者包含 Web API 控制器，如下面的截图所示：
- en: '![Figure 9.6: Structure of the Vue app with ASP.NET Core](img/Figure_9.06_B17366.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6：Vue 应用程序与 ASP.NET Core 的结构](img/Figure_9.06_B17366.jpg)'
- en: 'Figure 9.6: Structure of the Vue app with ASP.NET Core'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6：Vue 应用程序与 ASP.NET Core 的结构
- en: 'The following list explains the main files and folders under the React client
    app shown in the preceding screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表解释了前一个截图所示的 React 客户端应用程序下的主要文件和文件夹：
- en: '`public`: This folder contains the static files of the application such as
    the HTML index page.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public`: 此文件夹包含应用程序的静态文件，例如 HTML 索引页面。'
- en: '`src`: This folder contains all the dynamic components that we will develop.
    It also contains the `App.vue` file, which acts as the root component of the application.
    The `main.js` JavaScript file is responsible for initializing the root component
    and introducing the required plugins. As for the `assets` folder, it contains
    all the static assets, such as the CSS files and the images.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`src`: 此文件夹包含我们将要开发的全部动态组件。它还包含 `App.vue` 文件，该文件充当应用程序的根组件。`main.js` JavaScript
    文件负责初始化根组件并引入所需的插件。至于 `assets` 文件夹，它包含所有静态资产，例如 CSS 文件和图片。'
- en: '`package.json`: This file contains the list of dependencies used in the application.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`package.json`: 此文件包含应用程序中使用的依赖项列表。'
- en: 'After this quick overview of the structure of these three frameworks (Angular,
    React, and Vue), we may ask ourselves, *which framework should we use?* It is
    difficult to answer this question because it is hard to find a framework that
    works for every situation. Here is a table showing a quick comparison between
    the three frameworks:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在对这三个框架（Angular、React和Vue）的结构进行快速概述之后，我们可能会问自己，*我们应该使用哪个框架？* 这个问题很难回答，因为很难找到一个适用于所有情况的框架。以下是一个表格，展示了这三个框架之间的快速比较：
- en: '![Figure 9.7: A quick comparison between Angular, React, and Vue](img/Figure_9.07_B17366.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7：Angular、React和Vue之间的快速比较](img/Figure_9.07_B17366.jpg)'
- en: 'Figure 9.7: A quick comparison between Angular, React, and Vue'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：Angular、React和Vue之间的快速比较
- en: 'Although Angular and React are perfect frameworks to build large-scale and
    enterprise web solutions with complex components and very dynamic content, writing
    code in React is easier and faster than Angular. According to a Stack Overflow
    Developer Survey conducted in 2020, React is the second most popular framework
    after **jQuery**: [https://insights.stackoverflow.com/survey/2020#most-popular-technologies](https://insights.stackoverflow.com/survey/2020#most-popular-technologies).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Angular和React是构建具有复杂组件和非常动态内容的规模化和企业级网络解决方案的完美框架，但在React中编写代码比在Angular中更容易、更快。根据2020年进行的Stack
    Overflow开发者调查，React是仅次于**jQuery**的第二大流行框架：[https://insights.stackoverflow.com/survey/2020#most-popular-technologies](https://insights.stackoverflow.com/survey/2020#most-popular-technologies)。
- en: While Vue is lightweight and easy to learn, it demonstrates the best performance
    between the three frameworks. Also, the Vue development community is rising steadily
    compared to React and Angular.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Vue轻量级且易于学习，但在三个框架中它展现了最佳的性能。此外，与React和Angular相比，Vue的开发社区正在稳步增长。
- en: In the next section, we will get to know the three main options to host our
    web applications with Azure.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将了解使用Azure托管我们的Web应用程序的三个主要选项。
- en: Exploring Azure hosting recommendations
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Azure托管建议
- en: Azure hosting offers great hosting capabilities for every business out there,
    whichever sector the web application is serving. It provides a wide range of cloud
    services that support us to host and scale web solutions. It helps us to deal
    with business challenges rather than spending time focusing on the infrastructure
    that we need to host the solution.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Azure托管为所有行业中的每个企业提供强大的托管能力，无论网络应用服务于哪个领域。它提供了一系列云服务，支持我们托管和扩展网络解决方案。它帮助我们应对业务挑战，而不是花费时间专注于我们需要托管解决方案的基础设施。
- en: 'There are three ways to host web applications in Azure:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure中有三种托管Web应用程序的方法：
- en: '**App Service Web Apps**'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**App Service Web Apps**'
- en: '**Containers**'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**'
- en: '**Virtual Machines** (**VMs**)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟机**（**VMs**）'
- en: App Service Web Apps is the recommended hosting approach for most scenarios
    as it offers a fully managed **Platform as a Service** (**PaaS**) that is optimized
    in a way that lets our clients focus on their business, while Azure takes care
    of the required infrastructure, including scaling the application. Moreover, we
    can make use of Azure **Static Web Apps** to automatically deploy full-stack web
    apps that are built using libraries and frameworks such as Angular, React, and
    Vue to Azure from a code repository that can be on GitHub or Azure DevOps.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: App Service Web Apps是大多数场景下推荐的托管方法，因为它提供了一种完全管理的**平台即服务**（**PaaS**），以优化方式让我们的客户专注于他们的业务，而Azure则负责所需的基础设施，包括扩展应用程序。此外，我们可以利用Azure
    **静态Web应用**自动部署使用Angular、React和Vue等库和框架构建的全栈Web应用，这些应用可以从GitHub或Azure DevOps上的代码仓库部署到Azure。
- en: 'Important Note:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: 'Check out the Microsoft documentation for more information about the step-by-step
    deployment process with Azure App Service: [https://docs.microsoft.com/en-us/learn/modules/host-a-web-app-with-azure-app-service/](https://docs.microsoft.com/en-us/learn/modules/host-a-web-app-with-azure-app-service/).
    Here is another link for the same thing: [https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-app-service/](https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-app-service/).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 查阅Microsoft文档以获取有关使用Azure App Service分步部署过程的更多信息：[https://docs.microsoft.com/en-us/learn/modules/host-a-web-app-with-azure-app-service/](https://docs.microsoft.com/en-us/learn/modules/host-a-web-app-with-azure-app-service/)。这里还有一个链接：[https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-app-service/](https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-app-service/)。
- en: For applications that implement microservice architecture, it is recommended
    to host them using a container-based approach.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于实现微服务架构的应用程序，建议使用基于容器的方案来托管它们。
- en: 'Important Note:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: 'Here is a Microsoft reference link on how to deploy a container instance in
    Azure using the Azure portal: [https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart-portal](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart-portal).
    Here is another reference link on how to deploy a container instance in Azure
    using the Docker CLI: [https://docs.microsoft.com/en-us/azure/container-instances/quickstart-docker-cli](https://docs.microsoft.com/en-us/azure/container-instances/quickstart-docker-cli).'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何在Azure门户中使用Azure门户部署容器实例的Microsoft参考链接：[https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart-portal](https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart-portal)。这里还有一个关于如何在Azure中使用Docker
    CLI部署容器实例的参考链接：[https://docs.microsoft.com/en-us/azure/container-instances/quickstart-docker-cli](https://docs.microsoft.com/en-us/azure/container-instances/quickstart-docker-cli)。
- en: If your application is not fully ready to be hosted on the cloud and if you
    would like to have more control over the hosting environment, you can choose **Azure
    Virtual Machines**, which is an **Infrastructure as a Service** (**IaaS**). However,
    if you choose this option, you must take into consideration that you need an ongoing
    maintenance effort to manage the VM environment and keep it up to date.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序尚未完全准备好在云中托管，并且您希望对托管环境有更多的控制，您可以选择**Azure虚拟机**，这是一种**基础设施即服务**（**IaaS**）。然而，如果您选择此选项，您必须考虑您需要持续维护工作来管理虚拟机环境并保持其更新。
- en: 'Important Note:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：
- en: 'Here is a reference on how to create a Windows virtual machine in the Azure
    portal: [https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal).
    Here is a Microsoft reference on how to create a Linux virtual machine in the
    Azure portal: [https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal).
    Here is another step-by-step guide on how to deploy a website with Azure virtual
    machines: [https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-virtual-machines/](https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-virtual-machines/).'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何在Azure门户中创建Windows虚拟机的参考：[https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/windows/quick-create-portal)。这里是一个如何在Azure门户中创建Linux虚拟机的Microsoft参考：[https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal](https://docs.microsoft.com/en-us/azure/virtual-machines/linux/quick-create-portal)。这里还有一个关于如何使用Azure虚拟机部署网站的逐步指南：[https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-virtual-machines/](https://docs.microsoft.com/en-us/learn/paths/deploy-a-website-with-azure-virtual-machines/)。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we explored some key characteristics of modern web solutions
    that we must know to build scalable and cloud-hosted solutions. We learned about
    the difference between traditional web applications and SPAs, and how to choose
    between them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了构建可扩展和云托管解决方案时必须了解的现代Web解决方案的一些关键特性。我们了解了传统Web应用程序和单页应用程序（SPAs）之间的区别，以及如何在这两者之间进行选择。
- en: Moreover, we had an overview of the project structure for the three modern frontend
    frameworks to build SPAs with the ASP.NET Core Web API, and we provided a quick
    comparison table between these frameworks. Later in this chapter, we explored
    the main options to host web applications in Azure with high-level recommendations
    to know how to choose the best hosting approach for our solution.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还概述了使用ASP.NET Core Web API构建SPAs的三个现代前端框架的项目结构，并提供了这些框架之间的快速比较表。在本章的后面部分，我们探讨了在Azure中托管Web应用程序的主要选项，并提供了如何选择最适合我们解决方案的托管方法的建议。
- en: In the next chapter, we will dig deep into designing and implementing **Microsoft
    DevOps** solutions and we will learn about their benefits.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨设计和实施**Microsoft DevOps**解决方案，并了解它们的益处。
