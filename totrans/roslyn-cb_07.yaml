- en: C# Interactive and Scripting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing a simple C# script and evaluating it within the Visual Studio interactive
    window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using script directives and REPL commands in the C# interactive window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using keyboard shortcuts for evaluating and navigating through script sessions
    in the C# interactive window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing a C# interactive session from an existing C# project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Executing a C# script on a Visual Studio developer command prompt using `csi.exe`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Roslyn scripting API to execute C# code snippets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter gives a basic introduction to one of the most powerful features/tools
    based on the Roslyn compiler API: **C# interactive and scripting.** You can read
    an overview about C# scripting at [https://msdn.microsoft.com/en-us/magazine/mt614271.aspx](https://msdn.microsoft.com/en-us/magazine/mt614271.aspx).
    Here is a small gist of this feature from the preceding article:'
  prefs: []
  type: TYPE_NORMAL
- en: C# scripting is a tool for testing out your C# and .NET snippets without the
    effort of creating multiple unit testing or console projects. It provides an easy
    means to explore and understand an API without the overhead of a yet another `CSPROJ`
    file in your `%TEMP%` directory. The C# read-evaluate-print-loop (REPL) is available
    as an interactive window within Visual Studio 2015 and after and as a new command-line
    interface (CLI) called CSI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a screenshot of the C# interactive window in Visual Studio:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/eae90547-838c-4402-89ae-f66ac39072c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following is a screenshot of the C# interactive command-line interface
    (`csi.exe`) executed from a Visual Studio 2017 developer command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bb41acbf-d61f-4a28-a65e-2ee2dd022322.png)'
  prefs: []
  type: TYPE_IMG
- en: Writing a simple C# script and evaluating it within the Visual Studio interactive
    window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the basics of C# scripting and show
    you how to use the Visual Studio interactive window to evaluate a C# script.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 Community edition installed on your
    machine to execute this recipe. You can install a free community edition from
    [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open Visual Studio and start the C# Interactive window by clicking on View
    | Other Windows | C# Interactive:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ee52c0cc-4925-43f6-8040-2c3cece4c648.png)'
  prefs: []
  type: TYPE_IMG
- en: Type `Console.WriteLine("Hello, World!")` in the interactive window and hit
    the *Enter* key to evaluate the C# expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that `Hello, World!` is output as a result in the interactive window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e6ac3c5f-ea5d-4e64-b429-9780f12769af.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, type a variable declaration statement of type `List<int>` with a collection
    initializer: `var myList = new List<int> { 3, 2, 7, 4, 9, 0 };` and press the
    *Enter* key.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, type an expression statement that accesses the `myList` variable declared
    in the previous statement and filter the list to all the even numbers in the list
    using a linq expression: `myList.Where(x => x % 2 == 0)`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Press the *Enter* key to evaluate the expression and verify that a nicely formatted
    enumerable list is output as the result of the evaluation: `Enumerable.WhereListIterator<int>
    { 2, 4, 0 }`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the command `$"The current directory is { Environment.CurrentDirectory
    }."`. This accesses the current directory environment variable and verifies your
    current directory output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, type the following commands into the interactive window and verify that
    pressing the *Enter* key leads to a 10-second UI delay as per the entered `await`
    expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Type the following class declaration in the interactive window and press the
    *Enter* key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Instantiate type `C` declared earlier and invoke method `M` on the instance
    by evaluating the following statement: `new C().M();`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that the output in the interactive window is: `C.M invoked`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view the entire contents of the interactive window for this recipe in
    the attached text file `InteractiveWindowOutput.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we wrote a simple set of C# interactive script commands to
    perform a bunch of operations that are common in regular C# code, but without
    having to declare a stub type/main method or having to create a source file/project.
    The operations performed during the interactive session were:'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluating an expression that outputs a string to the console (`Console.WriteLine(...)`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declaring a local variable for the lifetime of the interactive session and initialize
    it with a collection `initializer (myList)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accessing the preceding declared variable in a subsequent linq statement and
    evaluating the resultant value (`myList.Where(...)`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Accessing environment variables in C# expression evaluations (`Environment.CurrentDirectory`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Importing namespace in the session through a using declaration (`using System.Threading.Tasks;`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Awaiting an async expression (`await Task.Delay(10000)`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declaring a C# class with a method (`class C` and `method M`) for the lifetime
    of the interactive session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Instantiating the preceding declared class and invoking the method in a subsequent
    statement (`new C().M()`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's briefly walk through the implementation of the C# interactive compiler
    that enables all the preceding regular C# operations in the interactive mode.
  prefs: []
  type: TYPE_NORMAL
- en: '`Csi.main` ([http://source.roslyn.io/#csi/Csi.cs,14](http://source.roslyn.io/#csi/Csi.cs,14))
    is the primary entry point into the C# interactive compiler. After initialization
    of the compiler, the control eventually reaches `CommandLineRunner.RunInteractiveLoop`
    ([http://source.roslyn.io/#Microsoft.CodeAnalysis.Scripting/Hosting/CommandLine/CommandLineRunner.cs,7c8c5cedadd34d79](http://source.roslyn.io/#Microsoft.CodeAnalysis.Scripting/Hosting/CommandLine/CommandLineRunner.cs,7c8c5cedadd34d79)),
    which is, the REPL, or read-evaluate-print-loop, that reads interactive commands
    and evaluates them in a loop until the user exits by pressing *Ctrl* + *C*.'
  prefs: []
  type: TYPE_NORMAL
- en: For each entered line, the REPL loop executes `ScriptCompiler.ParseSubmission`
    ([http://source.roslyn.io/#Microsoft.CodeAnalysis.Scripting/ScriptCompiler.cs,54b12302e519f660](http://source.roslyn.io/#Microsoft.CodeAnalysis.Scripting/ScriptCompiler.cs,54b12302e519f660))
    to parse the given source text into a syntax tree. If the submission is incomplete
    (for example, if the first line of a class declaration has been entered), then
    it outputs `.` and continues waiting for more text for the submission. Otherwise,
    it creates a script using the current submission text chained to the end of the
    prior submissions and runs the new submission by invoking into the core C# compiler
    APIs. The result of the submission is output to the interactive window.
  prefs: []
  type: TYPE_NORMAL
- en: Further details on how the submission chains to the prior submissions and executes
    within the interactive compiler are out of the scope of this chapter. You may
    navigate the script compiler's code base at ([http://source.roslyn.io/#q=RunSubmissionsAsync](http://source.roslyn.io/#q=RunSubmissionsAsync))
    to understand the internal workings.
  prefs: []
  type: TYPE_NORMAL
- en: Using script directives and REPL commands in the C# interactive window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the common directives and REPL commands
    available in C# interactive scripting and show you how to use them in the Visual
    Studio interactive window.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Community edition installed on
    your machine to execute this recipe. You can install a free community edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio and start the C# Interactive window by clicking on View |
    Other Windows | C# Interactive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `Newtonsoft.Json.dll` from the attached sample for the recipe into your
    temp directory `%TEMP%`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following `#r` directive to load this assembly into the interactive
    session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that you can now reference types from this assembly as well as create
    objects and invoke methods. For example, type the following code snippet into
    the interactive window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify the string representation of the array that is the output to the interactive
    window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/273b2757-5621-4487-85df-5361864399e7.png)'
  prefs: []
  type: TYPE_IMG
- en: Execute the REPL command `#clear` (or `#cls`) and verify this clears all the
    text from the interactive window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy `MyScript.csx` from the attached sample for the recipe into your temp directory
    `%TEMP%`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute the following `#load` directive to load and execute this script in
    the interactive session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Verify that the script executes, and you get the following output from the
    execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/36cbf5c2-5ef2-4ec4-b1fd-352b8a8e597c.png)'
  prefs: []
  type: TYPE_IMG
- en: Execute the `#reset` REPL command to reset the interactive session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, attempt to refer to the `Newtonsoft.Json` namespace in the interactive
    session, which was added prior to the reset, and verify that you get an error,
    as the assembly is no longer loaded in the session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/882c3609-67a6-48b6-889e-17da609bed02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, execute the `#help` REPL command to print the help text for available
    keyboard shortcuts, directives, and REPL commands in the interactive window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b894f5a4-4f72-43e5-9bee-9a9d579e48ed.png)'
  prefs: []
  type: TYPE_IMG
- en: You can view the entire contents of the interactive window for this recipe in
    the attached text file `InteractiveWindowOutput.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Using keyboard shortcuts for evaluating and navigating through script sessions
    in the C# interactive window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the common keyboard shortcuts available
    in C# interactive scripting and show you how to use them in the Visual Studio
    interactive window.
  prefs: []
  type: TYPE_NORMAL
- en: As demonstrated in the last step of the previous recipe, you can use the *#help*
    REPL command in the interactive window to see the entire list of keyboard shortcuts
    available in the C# interactive window.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Community edition installed on
    your machine to execute this recipe. You can install a free community edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15.](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio and open the C# Interactive window by clicking on View| Other
    Windows | C# Interactive*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type the string constant `"World!"` and hit the *Enter* key to evaluate and
    output the string.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `"Hello, " +` and move the cursor to the previous submission from the step
    2, and hit the *Ctrl* + *Enter* keys to append the text from the previous submission
    to the current submission. The current submission text should change to `"Hello,
    " + "World!"`, and pressing the *Enter* key should output the text `"Hello, World!"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `@"Hello, World` and press the *Shift* + *Enter* keys to add a new line
    within the current submission. Typing `with a new line!"` on the next line and
    hitting the *Enter* key should output the text `"Hello, World\r\nwith a new line!"`,
    as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1fefa632-013e-4858-b970-b4d91bb1d6da.png)'
  prefs: []
  type: TYPE_IMG
- en: Type `Hello` and press the *Esc* key; this should clear the text on the current
    line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Alt* + Up arrow keys together; this should change the current submission
    text to be the same as the previous submission, in our case, `@"Hello, World`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`. with a new line!"`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Press the *Enter* key to output `"Hello, World\r\nwith a new line!"` again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the quote key *"*. This should automatically add another quote for the
    string. Press the *Delete* key to remove this automatically and add the second
    quote.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, press the *Ctrl* + *Alt* + Up arrow keys together; this should change the
    current submission text to be the same as the last among the previous submissions
    that started with the same character, that is, *"*. In our case, this was the
    submission `"Hello, " + "World!"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key to output `"Hello, World!"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, place the cursor on our very first submission in the session, that is,
    the submission at step 2.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Ctrl* + *A* keys together to select the entire text in the first
    submission, that is, `"World!"`. Then, press the *Ctrl* + *Enter* keys together
    to copy this text into the current submission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press the *Enter* key to output `"World!"`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Place the cursor back on the previous submission and press the *Ctrl* + *A*
    keys twice to select the entire contents of the interactive window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can view the entire contents of the interactive window for this recipe in
    the attached text file `InteractiveWindowOutput.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the C# interactive session from the existing C# project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will walk you through the steps to initialize a C# interactive
    scripting session from an existing C# project and then use the types from the
    project in the Visual Studio interactive window.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have Visual Studio 2017 Community edition installed on your
    machine to execute this recipe. You can install a free community edition from
    [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15.](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio and start the C# Interactive window by clicking on View |
    Other Windows | C# Interactive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Declare a local variable `int x = 0;` in the interactive window and press the
    *Enter* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Execute `Console.WriteLine(x)` and verify the output `0` to confirm that the
    variable `x` is declared in the current session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new C# class library project, say `ClassLibrary`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following method `M` to type `Class1` in the created project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Right-click on the project in the solution explorer and click on Initialize
    Interactive with Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3948a6dd-e7ba-442c-a196-020065aa464a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Verify that the project build has started, and that the C# interactive session
    has been reset with the project references and output assembly (`ClassLibrary.dll`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/b9b1a12d-5e11-4ecf-8cfa-c559885de8ad.png)'
  prefs: []
  type: TYPE_IMG
- en: Type the following text `new Class1().M();` in the interactive window and press
    the *Enter* key to execute the submission.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify that `Executing ClassLibrary.Class1.M()` is output as a result, confirming
    that the interactive session was initialized with the `ClassLibrary` project.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attempt to reference the variable *x* that was defined in step2, that is, prior
    to initializing the interactive session with the project by executing `Console.WriteLine(x);`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify that this leads to the following compile time error, confirming that
    the session state was completely reset when we initialized it from the project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: You can view the entire contents of the interactive window for this recipe in
    the attached text file `InteractiveWindowOutput.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Executing the C# script on a Visual Studio developer command prompt using csi.exe
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to use the command-line interface for
    executing C# scripts and their interactive mode. `csi.exe` (CSharp Interactive)
    is the CLI executable for C# interactive that ships with the C# compiler toolset,
    along with Visual Studio.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Community edition installed on
    your machine to execute this recipe. You can install a free community edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Start the Visual Studio 2017 develop command prompt and execute the command
    `csi.exe` to start the C# interactive session*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `Console.WriteLine("Hello, World!")` on the console and click on the *Enter*
    key to execute the command in interactive mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c7852ad9-4c20-4356-b701-d9c5e7528d17.png)'
  prefs: []
  type: TYPE_IMG
- en: Press *Ctrl* + *C* to exit the interactive mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a script file `MyScript.csx` with the following code to output the arguments
    to the script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the script with arguments `1 2 3` and verify the following output.
    Also, note that after executing the script, we return back to the command prompt,
    not the interactive session:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, execute the same script with an additional `-i` argument prepended and
    verify the same output as earlier, this time however, we return to an interactive
    prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Execute `Console.WriteLine(t.Length)` and verify that the output is `6`, confirming
    that the variable *t* declared in the script and initialized with the command-line
    arguments is still alive in the current interactive session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *C* to exit the interactive mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Execute `csi -i` to start `csi.exe` in interactive mode and execute the *#help*
    command to get the list of available keyboard shortcuts, REPL commands, and script
    directives:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/24dd68e6-500d-48ba-be68-2ef98b2a8a9b.png)'
  prefs: []
  type: TYPE_IMG
- en: Note that the set of available keyboard shortcuts, REPL commands, and script
    directives in `csi.exe` is a subset of the corresponding sets in the Visual Studio
    interactive window. Refer to the earlier recipes *Using script directives and
    REPL commands in the C# interactive window* and *Using keyboard shortcuts for
    evaluating and navigating through script sessions in the C# interactive window*,
    in this chapter for available shortcuts, commands, and directives in the Visual
    Studio interactive window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *C* to exit the interactive mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Attempt to execute `csi.exe` with arguments, but no script name, and verify
    error *CS2001* about missing source file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: You can read more about the command-line REPL and the arguments to `csi.exe`
    at [https://github.com/dotnet/roslyn/wiki/Interactive-Window#repl](https://github.com/dotnet/roslyn/wiki/Interactive-Window#repl).
  prefs: []
  type: TYPE_NORMAL
- en: Using the Roslyn scripting API to execute C# code snippets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will show you how to to write a C# console application that
    uses Roslyn scripting APIs to execute C# code snippets and consume their output.
    The scripting APIs enable .NET applications to instantiate a C# engine and execute
    code snippets against host-supplied objects. The scripting APIs can also be used
    directly in an interactive session.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will need to have the Visual Studio 2017 Community edition installed on
    your machine to execute this recipe. You can install a free community edition
    from [https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15](https://www.visualstudio.com/thank-you-downloading-visual-studio/?sku=Community&rel=15).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Open Visual Studio and create a new C# console application targeting .NET Framework
    4.6 or higher, say `ConsoleApp`*.*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `Microsoft.CodeAnalysis.CSharp.Scripting` NuGet package (at the
    time of writing, the latest stable version is *2.1.0*). For guidance on how to
    search for and install the NuGet package to a project, refer to the recipe, *Searching
    and installing analyzers through the NuGet package manager* in [Chapter 2](8e0229af-657f-4306-96b5-40511d1fe7b2.xhtml),
    *Consuming Diagnostic Analyzers in .NET Projects*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the source code in `Program.cs` with the source code from the attached
    code sample `\ConsoleApp\Program.cs.`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Press *Ctrl* + *F5* to build and start the project `.exe` without debugging.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Verify the first output from the evaluation of `EvaluateSimpleAsync`*:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Press any key to continue the execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the second output from the evaluation of `EvaluateWithReferencesAsync`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Press any key to continue the execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify the third output from the evaluation of `EvaluateWithImportsAsync`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Press any key to continue the execution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Verify last output from the evaluation of `EvaluateParameterizedScriptInLoopAsync`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Press any key to exit the console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Refer to the article ([https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples))
    for more examples of the scripting API.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we wrote a C# console application based on Roslyn scripting
    APIs to perform various common scripting operations. The rich scripting APIs provides
    a powerful object model for the evaluation, creation, and execution of scripts
    with configuration options.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us walk through the code in this recipe and understand how we implemented
    some of these operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Main` method invokes individual methods to perform following operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`EvaluateSimpleAsync`: A simple evaluation of a binary add expression'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EvaluateWithReferencesAsync`: An evaluation involving a reference assembly
    passed down to the script options'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EvaluateWithImportsAsync`: An evaluation involving the importing of a system
    namespace and invoking an API from the namespace'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EvaluateParameterizedScriptInLoopAsync`: A creation and evaluation of a script
    parameterized by parameters and invoked over a loop of values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`EvaluateSimpleAsync` invokes the most common scripting API, `CSharpScript.EvaluateAsync`
    ([http://source.roslyn.io/#q=CSharpScript.EvaluateAsync](http://source.roslyn.io/#q=CSharpScript.EvaluateAsync)),
    with an expression as the argument to evaluate that expression. In our case, we
    pass in `1 + 2` as the argument to `EvaluateAsync`, which outputs the result `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '`EvaluateWithReferencesAsync` invokes the same `CSharpScript.EvaluateAsync`
    API ([http://source.roslyn.io/#q=CSharpScript.EvaluateAsync](http://source.roslyn.io/#q=CSharpScript.EvaluateAsync)),
    but using an additional reference assembly passed down through the script options
    with the `ScriptOptions.WithReferences` API ([http://source.roslyn.io/#q=ScriptOptions.WithReferences](http://source.roslyn.io/#q=ScriptOptions.WithReferences)).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our case, we pass in `typeof(System.Net.Dns).Assembly` as an additional
    reference for the evaluation of `System.Net.Dns.GetHostName()`, which outputs
    the machine name:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`EvaluateWithImportsAsync` invokes the `CSharpScript.EvaluateAsync` API ([http://source.roslyn.io/#q=CSharpScript.EvaluateAsync](http://source.roslyn.io/#q=CSharpScript.EvaluateAsync))
    with a namespace import passed down through the script options with the `ScriptOptions.WithImports`
    API ([http://source.roslyn.io/#q=ScriptOptions.WithImports](http://source.roslyn.io/#q=ScriptOptions.WithImports)).
    In our case, we pass in `System.Math` as an additional namespace import for the
    evaluation of `Sqrt(2)`, which outputs the result `1.4142135623731`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '`EvaluateParameterizedScriptInLoopAsync` creates a parameterized C# script
    using the `CSharpScript.Create` API ([http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Scripting/CSharpScript.cs,3beb8afb18b9c076](http://source.roslyn.io/#Microsoft.CodeAnalysis.CSharp.Scripting/CSharpScript.cs,3beb8afb18b9c076)),
    which takes the script code to execute and a global type as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: It then invokes the `Script.Compile` API ([http://source.roslyn.io/#q=Script.Compile](http://source.roslyn.io/#q=Script.Compile))
    to compile the script. The compiled script is then executed in a loop using the
    `Script.RunAsync` API ([http://source.roslyn.io/#q=Script.RunAsync](http://source.roslyn.io/#q=Script.RunAsync))
    with different instances of global type Globals, with incremented values of fields
    *X* and *Y*. Each iteration computes the result of the expression `X * Y`, which
    in our case is just square of all the numbers in the loop from zero to nine.
  prefs: []
  type: TYPE_NORMAL
